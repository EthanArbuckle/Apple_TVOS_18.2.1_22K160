uint64_t ot::Radio::GetVersionString(ot::Radio *this)
{
  ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetVersionString();
}

{
  return __ZN2ot5Radio16GetVersionStringEv(this);
}

void *ot::Radio::GetInstancePtr(ot::Radio *this)
{
  return ot::InstanceLocator::GetInstance(this);
}

{
  return __ZNK2ot5Radio14GetInstancePtrEv(this);
}

uint64_t otIp6SetEnabled(uint64_t a1, char a2)
{
  char v15 = a2 & 1;
  unsigned int v14 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v13 = v2;
  v3 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v2);
  if (ot::Mac::LinkRaw::IsEnabled(v3))
  {
    return 13;
  }

  else
  {
    uint64_t v4 = ot::Instance::Get<ot::ThreadNetif>(v13);
    if ((v15 & 1) != 0) {
      ot::ThreadNetif::Up(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    else {
      ot::ThreadNetif::Down(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  return v14;
}

uint64_t ot::Instance::Get<ot::Mac::LinkRaw>(uint64_t a1)
{
  return a1 + 176992;
}

{
  return __ZN2ot8Instance3GetINS_3Mac7LinkRawEEERT_v(a1);
}

BOOL ot::Mac::LinkRaw::IsEnabled(ot::Mac::LinkRaw *this)
{
  return *((void *)this + 1) != 0LL;
}

{
  return __ZNK2ot3Mac7LinkRaw9IsEnabledEv(this);
}

uint64_t ot::Instance::Get<ot::ThreadNetif>(uint64_t a1)
{
  return a1 + 85536;
}

{
  return __ZN2ot8Instance3GetINS_11ThreadNetifEEERT_v(a1);
}

uint64_t otIp6IsEnabled(uint64_t a1)
{
  uint64_t v2 = (ot::ThreadNetif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  return ot::ThreadNetif::IsUp(v2) & 1;
}

uint64_t ot::ThreadNetif::IsUp(ot::ThreadNetif *this)
{
  return *((_BYTE *)this + 696) & 1;
}

{
  return __ZNK2ot11ThreadNetif4IsUpEv(this);
}

uint64_t otIp6GetUnicastAddresses(uint64_t a1)
{
  uint64_t v2 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  ot::Ip6::Netif::GetUnicastAddresses(v2);
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(v3);
}

  ;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE7GetHeadEv(a1);
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE7GetHeadEv(a1);
}

uint64_t otIp6AddUnicastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  ot::AsCoreType<otNetifAddress>(a2);
  return ot::Ip6::Netif::AddExternalUnicastAddress(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetifAddress>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otIp6RemoveUnicastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Netif::RemoveExternalUnicastAddress(v5, v3);
}

uint64_t otIp6GetMulticastAddresses(uint64_t a1)
{
  uint64_t v2 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  uint64_t MulticastAddresses = ot::Ip6::Netif::GetMulticastAddresses(v2);
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(MulticastAddresses);
}

uint64_t ot::Ip6::Netif::GetMulticastAddresses(ot::Ip6::Netif *this)
{
  return (uint64_t)this + 8;
}

{
  return __ZNK2ot3Ip65Netif21GetMulticastAddressesEv(this);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE7GetHeadEv(a1);
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE7GetHeadEv(a1);
}

uint64_t otIp6SubscribeMulticastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Netif::SubscribeExternalMulticast(v5, v3);
}

uint64_t otIp6UnsubscribeMulticastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Netif::UnsubscribeExternalMulticast(v5, v3);
}

uint64_t otIp6IsMulticastPromiscuousEnabled(uint64_t a1)
{
  uint64_t v2 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  return ot::Ip6::Netif::IsMulticastPromiscuousEnabled(v2) & 1;
}

uint64_t ot::Ip6::Netif::IsMulticastPromiscuousEnabled(ot::Ip6::Netif *this)
{
  return *((_BYTE *)this + 16) & 1;
}

{
  return __ZNK2ot3Ip65Netif29IsMulticastPromiscuousEnabledEv(this);
}

uint64_t otIp6SetMulticastPromiscuousEnabled(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::ThreadNetif>(v2);
  return ot::Ip6::Netif::SetMulticastPromiscuous(v3, v5 & 1);
}

uint64_t ot::Ip6::Netif::SetMulticastPromiscuous(uint64_t this, char a2)
{
  *(_BYTE *)(this + 16) = a2 & 1;
  return this;
}

{
  return __ZN2ot3Ip65Netif23SetMulticastPromiscuousEb(this, a2);
}

void *otIp6SetReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = ot::Instance::Get<ot::Ip6::Ip6>(v3);
  return ot::Ip6::Ip6::SetReceiveDatagramCallback(v4, a2, a3);
}

uint64_t ot::Instance::Get<ot::Ip6::Ip6>(uint64_t a1)
{
  return a1 + 85224;
}

{
  return __ZN2ot8Instance3GetINS_3Ip63Ip6EEERT_v(a1);
}

void *ot::Ip6::Ip6::SetReceiveDatagramCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otMessage *,void *)>::Set((void *)(a1 + 8), a2, a3);
}

{
  return __ZN2ot3Ip63Ip626SetReceiveDatagramCallbackEPFvP9otMessagePvES4_(a1, a2, a3);
}

uint64_t otIp6SetLargeScopeMulticastReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = ot::Instance::Get<ot::Ip6::Ip6>(v3);
  return ot::Ip6::Ip6::SetLargeScopeMulticastReceiveDatagramCallback(v4, a2, a3);
}

void *otIp6SetAddressCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = ot::Instance::Get<ot::ThreadNetif>(v3);
  return ot::Ip6::Netif::SetAddressCallback(v4, a2, a3);
}

void *ot::Ip6::Netif::SetAddressCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::Set((void *)(a1 + 24), a2, a3);
}

{
  return __ZN2ot3Ip65Netif18SetAddressCallbackEPFvPK16otIp6AddressInfobPvES5_(a1, a2, a3);
}

uint64_t otIp6IsReceiveFilterEnabled(uint64_t a1)
{
  uint64_t v2 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v1);
  return ot::Ip6::Ip6::IsReceiveIp6FilterEnabled(v2) & 1;
}

uint64_t ot::Ip6::Ip6::IsReceiveIp6FilterEnabled(ot::Ip6::Ip6 *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot3Ip63Ip625IsReceiveIp6FilterEnabledEv(this);
}

_BYTE *otIp6SetReceiveFilterEnabled(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (_BYTE *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  return ot::Ip6::Ip6::SetReceiveIp6FilterEnabled(v3, v5 & 1);
}

_BYTE *ot::Ip6::Ip6::SetReceiveIp6FilterEnabled(_BYTE *this, char a2)
{
  *this = a2 & 1;
  return this;
}

{
  return __ZN2ot3Ip63Ip626SetReceiveIp6FilterEnabledEb(this, a2);
}

uint64_t otIp6Send(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  ot::AsCoreType<otMessage>(a2);
  return ot::Ip6::Ip6::SendRaw(v5, v3, 1);
}

uint64_t otIp6GetSourceDestinationAddressandPort(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v3);
  ot::AsCoreType<otMessage>(a2);
  return ot::Ip6::Ip6::extractAddressAndportfromHeader(v6, v4, a3);
}

ot::Buffer *otIp6NewMessage(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  uint64_t v3 = (const ot::Message::Settings *)ot::Message::Settings::From(a2);
  return ot::Ip6::Ip6::NewMessage(v5, 0, v3);
}

ot::Message *otIp6NewMessageFromBuffer(uint64_t a1, char *a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v7 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v4);
  char v5 = (const ot::Message::Settings *)ot::Message::Settings::From(a4);
  return ot::Ip6::Ip6::NewMessageFromData(v7, a2, a3, v5);
}

uint64_t otIp6AddUnsecurePort(uint64_t a1, __int16 a2)
{
  uint64_t v3 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v2);
  return ot::Ip6::Filter::AddUnsecurePort(v3, a2);
}

uint64_t ot::Instance::Get<ot::Ip6::Filter>(uint64_t a1)
{
  return a1 + 88002;
}

{
  return __ZN2ot8Instance3GetINS_3Ip66FilterEEERT_v(a1);
}

uint64_t ot::Ip6::Filter::AddUnsecurePort(ot::Ip6::Filter *this, __int16 a2)
{
  return ot::Ip6::Filter::UpdateUnsecurePorts((uint64_t)this, 0, a2);
}

{
  return __ZN2ot3Ip66Filter15AddUnsecurePortEt(this, a2);
}

uint64_t otIp6RemoveUnsecurePort(uint64_t a1, __int16 a2)
{
  uint64_t v3 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v2);
  return ot::Ip6::Filter::RemoveUnsecurePort(v3, a2);
}

uint64_t ot::Ip6::Filter::RemoveUnsecurePort(ot::Ip6::Filter *this, __int16 a2)
{
  return ot::Ip6::Filter::UpdateUnsecurePorts((uint64_t)this, 1, a2);
}

{
  return __ZN2ot3Ip66Filter18RemoveUnsecurePortEt(this, a2);
}

uint64_t otIp6RemoveAllUnsecurePorts(uint64_t a1)
{
  uint64_t v2 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v1);
  return ot::Ip6::Filter::RemoveAllUnsecurePorts(v2);
}

uint64_t ot::Ip6::Filter::RemoveAllUnsecurePorts(ot::Ip6::Filter *this)
{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Clear((uint64_t)this);
}

{
  return __ZN2ot3Ip66Filter22RemoveAllUnsecurePortsEv(this);
}

uint64_t otIp6GetUnsecurePorts(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otIp6GetUnsecurePorts", "ip6_api.cpp", 183, "(aNumEntries) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v2);
  return ot::Ip6::Filter::GetUnsecurePorts(v3, a2);
}

uint64_t ot::Ip6::Filter::GetUnsecurePorts(ot::Ip6::Filter *this, unsigned __int8 *a2)
{
  *a2 = ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetLength((uint64_t)this);
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::operator[]((uint64_t)this, 0);
}

{
  return __ZNK2ot3Ip66Filter16GetUnsecurePortsERh(this, a2);
}

BOOL otIp6IsAddressEqual(uint64_t a1, uint64_t a2)
{
  char v5 = v2;
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Equatable<ot::Ip6::Address>::operator==(v5, v3);
}

BOOL otIp6ArePrefixesEqual(uint64_t a1, uint64_t a2)
{
  char v5 = v2;
  ot::AsCoreType<otIp6Prefix>(a2);
  return ot::Ip6::Prefix::operator==(v5, v3);
}

uint64_t otIp6AddressFromString(const char *a1, uint64_t a2)
{
  return ot::Ip6::Address::FromString(v2, a1);
}

uint64_t otIp6PrefixFromString(ot *a1, uint64_t a2)
{
  return ot::Ip6::Prefix::FromString(v2, a1);
}

ot::StringWriter *otIp6AddressToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp6AddressToString", "ip6_api.cpp", 210, "(aBuffer) != nullptr");
  }
  ot::AsCoreType<otIp6Address>(a1);
  return ot::Ip6::Address::ToString(v3, a2, a3);
}

ot::StringWriter *otIp6SockAddrToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp6SockAddrToString", "ip6_api.cpp", 217, "(aBuffer) != nullptr");
  }
  ot::AsCoreType<otSockAddr>(a1);
  return ot::Ip6::SockAddr::ToString(v3, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otSockAddr>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

ot::StringWriter *otIp6PrefixToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp6PrefixToString", "ip6_api.cpp", 224, "(aBuffer) != nullptr");
  }
  ot::AsCoreType<otIp6Prefix>(a1);
  return ot::Ip6::Prefix::ToString(v3, a2, a3);
}

uint64_t otIp6PrefixMatch(uint64_t a1, uint64_t a2)
{
  char v5 = v2;
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Address::PrefixMatch(v5, v3);
}

void *otIp6GetPrefix(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v6 = v3;
  ot::AsCoreType<otIp6Prefix>(a3);
  return ot::Ip6::Address::GetPrefix(v6, a2, v4);
}

void *ot::Ip6::Address::GetPrefix(ot::Ip6::Address *this, unsigned __int8 a2, ot::Ip6::Prefix *a3)
{
  return ot::Ip6::Prefix::Set(a3, (const unsigned __int8 *)this, a2);
}

{
  return __ZNK2ot3Ip67Address9GetPrefixEhRNS0_6PrefixE(this, a2, a3);
}

BOOL otIp6IsAddressUnspecified(uint64_t a1)
{
  return ot::Ip6::Address::IsUnspecified(v1);
}

uint64_t otIp6SelectSourceAddress(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  ot::AsCoreType<otMessageInfo>(a2);
  return ot::Ip6::Ip6::SelectSourceAddress(v5, v3);
}

uint64_t otIp6RegisterMulticastListeners( uint64_t a1, char *a2, unsigned __int8 a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (ot::InstanceLocator *)ot::Instance::Get<ot::MlrManager>(v6);
  return ot::MlrManager::RegisterMulticastListeners(v7, a2, a3, a4, a5, a6);
}

uint64_t ot::Instance::Get<ot::MlrManager>(uint64_t a1)
{
  return a1 + 164192;
}

{
  return __ZN2ot8Instance3GetINS_10MlrManagerEEERT_v(a1);
}

uint64_t otIp6IsSlaacEnabled(uint64_t a1)
{
  uint64_t v2 = (ot::Utils::Slaac *)ot::Instance::Get<ot::Utils::Slaac>(v1);
  return ot::Utils::Slaac::IsEnabled(v2) & 1;
}

uint64_t ot::Instance::Get<ot::Utils::Slaac>(uint64_t a1)
{
  return a1 + 87120;
}

{
  return __ZN2ot8Instance3GetINS_5Utils5SlaacEEERT_v(a1);
}

uint64_t ot::Utils::Slaac::IsEnabled(ot::Utils::Slaac *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot5Utils5Slaac9IsEnabledEv(this);
}

_BYTE *otIp6SetSlaacEnabled(uint64_t a1, char a2)
{
  char v12 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (_BYTE *)ot::Instance::Get<ot::Utils::Slaac>(v2);
  if ((v12 & 1) != 0) {
    return ot::Utils::Slaac::Enable(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else {
    return ot::Utils::Slaac::Disable(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

void otIp6SetSlaacPrefixFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Utils::Slaac>(v2);
  ot::Utils::Slaac::SetFilter(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t otIp6ProtoToString( unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::Ip6::Ip6::IpProtoToString((ot::Ip6::Ip6 *)a1, a2, a3, a4, a5, a6);
}

void *ot::CallbackBase<void (*)(otMessage *,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvP9otMessagePvEE3SetES5_S3_(result, a2, a3);
}

void *ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPK16otIp6AddressInfobPvEE3SetES6_S4_(result, a2, a3);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::Clear(uint64_t result)
{
  *(_BYTE *)(result + 4) = 0;
  return result;
}

{
  return __ZN2ot5ArrayItLt2EhE5ClearEv(result);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

{
  return __ZNK2ot5ArrayItLt2EhE9GetLengthEv(a1);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::operator[]( uint64_t a1, unsigned __int8 a2)
{
  return a1 + 2LL * a2;
}

{
  return __ZNK2ot5ArrayItLt2EhEixEh(a1, a2);
}

uint64_t otJoinerStart(uint64_t a1, ot *a2, ot *a3, ot *a4, ot *a5, ot *a6, char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = ot::Instance::Get<ot::MeshCoP::Joiner>(v9);
  return ot::MeshCoP::Joiner::Start(v10, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Instance::Get<ot::MeshCoP::Joiner>(uint64_t a1)
{
  return a1 + 161920;
}

{
  return __ZN2ot8Instance3GetINS_7MeshCoP6JoinerEEERT_v(a1);
}

unsigned __int8 *otJoinerStop(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  return ot::MeshCoP::Joiner::Stop(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t otJoinerGetState(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  unsigned __int8 State = ot::MeshCoP::Joiner::GetState(v2);
  return ot::MapEnum<ot::MeshCoP::Joiner::State>(State);
}

uint64_t ot::MapEnum<ot::MeshCoP::Joiner::State>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_7MeshCoP6Joiner5StateEEEKNS_10MappedEnumIT_E4TypeES5_(result);
}

uint64_t ot::MeshCoP::Joiner::GetState(ot::MeshCoP::Joiner *this)
{
  return *((unsigned __int8 *)this + 24);
}

{
  return __ZNK2ot7MeshCoP6Joiner8GetStateEv(this);
}

uint64_t otJoinerGetRepeatScan(uint64_t a1)
{
  uint64_t v1 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(a1);
  return ot::MeshCoP::Joiner::GetRepeatScan(v1);
}

uint64_t ot::MeshCoP::Joiner::GetRepeatScan(ot::MeshCoP::Joiner *this)
{
  return *((unsigned __int8 *)this + 112);
}

{
  return __ZNK2ot7MeshCoP6Joiner13GetRepeatScanEv(this);
}

uint64_t otJoinerSetRepeatScan(uint64_t a1, char a2)
{
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(a1);
  return ot::MeshCoP::Joiner::SetRepeatScan(v2, a2);
}

uint64_t ot::MeshCoP::Joiner::SetRepeatScan(ot::MeshCoP::Joiner *this, char a2)
{
  *((_BYTE *)this + 112) = a2;
  return 0LL;
}

{
  return __ZN2ot7MeshCoP6Joiner13SetRepeatScanEh(this, a2);
}

void otJoinerGetId(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  ot::MeshCoP::Joiner::GetId(v2);
}

  ;
}

uint64_t otJoinerSetDiscerner(uint64_t a1, uint64_t a2)
{
  *(void *)&v6[4] = a2;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v2);
  if (*(void *)&v6[4])
  {
    ot::AsCoreType<otJoinerDiscerner>(*(uint64_t *)&v6[4]);
    *(_DWORD *)uint64_t v6 = ot::MeshCoP::Joiner::SetDiscerner(v5, v3);
  }

  else
  {
    *(void *)uint64_t v6 = ot::MeshCoP::Joiner::ClearDiscerner(v5);
  }

  return *(unsigned int *)v6;
}

uint64_t otJoinerGetDiscerner(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  return ot::MeshCoP::Joiner::GetDiscerner(v2);
}

char *otJoinerStateToString(int a1)
{
  if (a1 > 5) {
    __assert_rtn("otJoinerStateToString", "joiner_api.cpp", 112, "aState <= OT_JOINER_STATE_JOINED");
  }
  unsigned __int8 v1 = ot::MapEnum<otJoinerState>(a1);
  return ot::MeshCoP::Joiner::StateToString(v1);
}

uint64_t ot::MapEnum<otJoinerState>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumI13otJoinerStateEEKNS_10MappedEnumIT_E4TypeES3_(result);
}

uint64_t otLinkGetChannel(uint64_t a1)
{
  uint64_t v7 = v1;
  uint64_t v2 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v1);
  if (ot::Mac::LinkRaw::IsEnabled(v2))
  {
    uint64_t v3 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v7);
    return ot::Mac::LinkRaw::GetChannel(v3);
  }

  else
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v7);
    return ot::Mac::Mac::GetPanChannel(v4);
  }

uint64_t ot::Mac::LinkRaw::GetChannel(ot::Mac::LinkRaw *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Mac7LinkRaw10GetChannelEv(this);
}

uint64_t ot::Instance::Get<ot::Mac::Mac>(uint64_t a1)
{
  return a1 + 88208;
}

{
  return __ZN2ot8Instance3GetINS_3Mac3MacEEERT_v(a1);
}

uint64_t ot::Mac::Mac::GetPanChannel(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 10);
}

{
  return __ZNK2ot3Mac3Mac13GetPanChannelEv(this);
}

uint64_t otLinkSetChannel(uint64_t a1, char a2)
{
  uint64_t v10 = v2;
  uint64_t v3 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v2);
  if (ot::Mac::LinkRaw::IsEnabled(v3))
  {
    uint64_t v4 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v10);
    return ot::Mac::LinkRaw::SetChannel(v4, a2);
  }

  else
  {
    uint64_t v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v10);
    if (ot::Mle::Mle::IsDisabled(v5))
    {
      uint64_t v6 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v10);
      unsigned int v11 = ot::Mac::Mac::SetPanChannel(v6, a2);
      if (!v11)
      {
        active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v10);
        ot::MeshCoP::ActiveDatasetManager::Clear(active);
        uint64_t v8 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v10);
        ot::MeshCoP::PendingDatasetManager::Clear(v8);
      }
    }

    else
    {
      return 13;
    }
  }

  return v11;
}

uint64_t ot::MeshCoP::ActiveDatasetManager::Clear(ot::MeshCoP::ActiveDatasetManager *this)
{
  return ot::MeshCoP::DatasetManager::Clear(this);
}

{
  return __ZN2ot7MeshCoP20ActiveDatasetManager5ClearEv(this);
}

uint64_t otLinkGetSupportedChannelMask(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  return ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
}

uint64_t ot::Mac::Mac::GetSupportedChannelMask(ot::Mac::Mac *this)
{
  return (uint64_t)this + 12;
}

{
  return __ZNK2ot3Mac3Mac23GetSupportedChannelMaskEv(this);
}

uint64_t otLinkSetSupportedChannelMask(uint64_t a1, int a2)
{
  uint64_t v10 = a1;
  int v9 = a2;
  unsigned int v8 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = v2;
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v5 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v7);
    ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v6, v9);
    ot::Mac::Mac::SetSupportedChannelMask(v5, (const ot::Mac::ChannelMask *)v6);
  }

  else
  {
    return 13;
  }

  return v8;
}

uint64_t otLinkGetExtendedAddress(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetExtAddress(v2);
}

uint64_t ot::Mac::Mac::GetExtAddress(ot::Mac::Mac *this)
{
  return ot::Mac::Links::GetExtAddress((ot::Mac::Mac *)((char *)this + 56));
}

{
  return __ZNK2ot3Mac3Mac13GetExtAddressEv(this);
}

uint64_t otLinkSetExtendedAddress(uint64_t a1, uint64_t a2)
{
  unsigned int v9 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v8 = v2;
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v7 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v8);
    ot::AsCoreType<otExtAddress>(a2);
    ot::Mac::Mac::SetExtAddress(v7, v4);
    uint64_t v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v8);
    ot::Mle::Mle::UpdateLinkLocalAddress(v5);
  }

  else
  {
    return 13;
  }

  return v9;
}

_BYTE *ot::Mac::Mac::SetExtAddress(ot::Mac::Mac *this, const ot::Mac::ExtAddress *a2)
{
  return ot::Mac::Links::SetExtAddress((ot::Mac::Mac *)((char *)this + 56), a2);
}

{
  return __ZN2ot3Mac3Mac13SetExtAddressERKNS0_10ExtAddressE(this, a2);
}

uint64_t otLinkGetFactoryAssignedIeeeEui64(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::Radio *)ot::Instance::Get<ot::Radio>(v2);
  ot::AsCoreType<otExtAddress>(a2);
  return ot::Radio::GetIeeeEui64(v5, v3);
}

uint64_t ot::Radio::GetIeeeEui64(ot::Radio *this, ot::Mac::ExtAddress *a2)
{
  InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetIeeeEui64((uint64_t)InstancePtr, a2);
}

{
  return __ZN2ot5Radio12GetIeeeEui64ERNS_3Mac10ExtAddressE(this, a2);
}

uint64_t otLinkGetPanId(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetPanId(v2);
}

uint64_t ot::Mac::Mac::GetPanId(ot::Mac::Mac *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot3Mac3Mac8GetPanIdEv(this);
}

uint64_t otLinkSetPanId(uint64_t a1, __int16 a2)
{
  unsigned int v9 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v8 = v2;
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v8);
    ot::Mac::Mac::SetPanId(v4, a2);
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v8);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v6 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v6);
  }

  else
  {
    return 13;
  }

  return v9;
}

uint64_t otLinkGetCslRequestAhead(uint64_t a1)
{
  uint64_t v2 = (ot::CslTxScheduler *)ot::Instance::Get<ot::CslTxScheduler>(v1);
  return ot::CslTxScheduler::GetFrameRequestAheadUs(v2);
}

uint64_t ot::Instance::Get<ot::CslTxScheduler>(uint64_t a1)
{
  return a1 + 96344;
}

{
  return __ZN2ot8Instance3GetINS_14CslTxSchedulerEEERT_v(a1);
}

uint64_t otLinkSetCslRequestAhead(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)ot::Instance::Get<ot::CslTxScheduler>(v2);
  ot::CslTxScheduler::SetFrameRequestAheadUs(v3, a2);
  return 0LL;
}

uint64_t otLinkGetPollPeriod(uint64_t a1)
{
  uint64_t v2 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v1);
  return ot::DataPollSender::GetKeepAlivePollPeriod(v2);
}

uint64_t ot::Instance::Get<ot::DataPollSender>(uint64_t a1)
{
  return a1 + 96376;
}

{
  return __ZN2ot8Instance3GetINS_14DataPollSenderEEERT_v(a1);
}

uint64_t otLinkSetPollPeriod(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v2);
  return ot::DataPollSender::SetExternalPollPeriod(v3, a2);
}

uint64_t otLinkSendDataRequest(uint64_t a1)
{
  uint64_t v2 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v1);
  return ot::DataPollSender::SendDataPoll(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t otLinkGetShortAddress(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetShortAddress(v2);
}

uint64_t ot::Mac::Mac::GetShortAddress(ot::Mac::Mac *this)
{
  return (unsigned __int16)ot::Mac::Links::GetShortAddress((ot::Mac::Mac *)((char *)this + 56));
}

{
  return __ZNK2ot3Mac3Mac15GetShortAddressEv(this);
}

uint64_t otLinkGetMaxFrameRetriesDirect(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetMaxFrameRetriesDirect(v2);
}

uint64_t ot::Mac::Mac::GetMaxFrameRetriesDirect(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 24);
}

{
  return __ZNK2ot3Mac3Mac24GetMaxFrameRetriesDirectEv(this);
}

uint64_t otLinkSetMaxFrameRetriesDirect(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::SetMaxFrameRetriesDirect(v3, a2);
}

uint64_t ot::Mac::Mac::SetMaxFrameRetriesDirect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 24) = a2;
  return this;
}

{
  return __ZN2ot3Mac3Mac24SetMaxFrameRetriesDirectEh(this, a2);
}

uint64_t otLinkGetMaxFrameRetriesIndirect(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetMaxFrameRetriesIndirect(v2);
}

uint64_t ot::Mac::Mac::GetMaxFrameRetriesIndirect(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 25);
}

{
  return __ZNK2ot3Mac3Mac26GetMaxFrameRetriesIndirectEv(this);
}

uint64_t otLinkSetMaxFrameRetriesIndirect(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::SetMaxFrameRetriesIndirect(v3, a2);
}

uint64_t ot::Mac::Mac::SetMaxFrameRetriesIndirect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 25) = a2;
  return this;
}

{
  return __ZN2ot3Mac3Mac26SetMaxFrameRetriesIndirectEh(this, a2);
}

uint64_t otLinkFilterGetAddressMode(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v1);
  unsigned __int8 Mode = ot::Mac::Filter::GetMode(v2);
  return ot::MapEnum<ot::Mac::Filter::Mode>(Mode);
}

uint64_t ot::MapEnum<ot::Mac::Filter::Mode>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_3Mac6Filter4ModeEEEKNS_10MappedEnumIT_E4TypeES5_(result);
}

uint64_t ot::Instance::Get<ot::Mac::Filter>(uint64_t a1)
{
  return a1 + 95588;
}

{
  return __ZN2ot8Instance3GetINS_3Mac6FilterEEERT_v(a1);
}

uint64_t ot::Mac::Filter::GetMode(ot::Mac::Filter *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Mac6Filter7GetModeEv(this);
}

_BYTE *otLinkFilterSetAddressMode(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = (_BYTE *)ot::Instance::Get<ot::Mac::Filter>(v2);
  char v3 = ot::MapEnum<otMacFilterAddressMode>(a2);
  return ot::Mac::Filter::SetMode(v5, v3);
}

_BYTE *ot::Mac::Filter::SetMode(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

{
  return __ZN2ot3Mac6Filter7SetModeENS1_4ModeE(result, a2);
}

uint64_t ot::MapEnum<otMacFilterAddressMode>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumI22otMacFilterAddressModeEEKNS_10MappedEnumIT_E4TypeES3_(result);
}

uint64_t otLinkFilterAddAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v2);
  ot::AsCoreType<otExtAddress>(a2);
  return ot::Mac::Filter::AddAddress(v5, v3);
}

void otLinkFilterRemoveAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v2);
  ot::AsCoreType<otExtAddress>(a2);
  ot::Mac::Filter::RemoveAddress(v4, v3);
}

uint64_t otLinkFilterClearAddresses(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::Mac::Filter>(v1);
  return ot::Mac::Filter::ClearAddresses(v2);
}

uint64_t otLinkFilterGetNextAddress(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otLinkFilterGetNextAddress", "link_api.cpp", 233, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otLinkFilterGetNextAddress", "link_api.cpp", 234, "(aEntry) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Mac::Filter>(v3);
  return ot::Mac::Filter::GetNextAddress(v4, a2, a3);
}

uint64_t otLinkFilterAddRssIn(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v3);
  ot::AsCoreType<otExtAddress>(a2);
  return ot::Mac::Filter::AddRssIn(v6, v4, a3);
}

void otLinkFilterRemoveRssIn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v2);
  ot::AsCoreType<otExtAddress>(a2);
  ot::Mac::Filter::RemoveRssIn(v4, v3);
}

uint64_t otLinkFilterSetDefaultRssIn(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mac::Filter>(v2);
  return ot::Mac::Filter::SetDefaultRssIn(v3, a2);
}

uint64_t ot::Mac::Filter::SetDefaultRssIn(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) = a2;
  return this;
}

{
  return __ZN2ot3Mac6Filter15SetDefaultRssInEa(this, a2);
}

uint64_t otLinkFilterClearDefaultRssIn(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::Mac::Filter>(v1);
  return ot::Mac::Filter::ClearDefaultRssIn(v2);
}

uint64_t ot::Mac::Filter::ClearDefaultRssIn(uint64_t this)
{
  *(_BYTE *)(this + 1) = 127;
  return this;
}

{
  return __ZN2ot3Mac6Filter17ClearDefaultRssInEv(this);
}

uint64_t otLinkFilterClearAllRssIn(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::Mac::Filter>(v1);
  return ot::Mac::Filter::ClearAllRssIn(v2);
}

uint64_t otLinkFilterGetNextRssIn(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otLinkFilterGetNextRssIn", "link_api.cpp", 263, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otLinkFilterGetNextRssIn", "link_api.cpp", 264, "(aEntry) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Mac::Filter>(v3);
  return ot::Mac::Filter::GetNextRssIn(v4, a2, a3);
}

void otLinkSetRadioFilterEnabled(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::SetRadioFilterEnabled(v3, v4 & 1);
}

uint64_t otLinkIsRadioFilterEnabled(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsRadioFilterEnabled(v2) & 1;
}

uint64_t ot::Mac::Mac::IsRadioFilterEnabled(ot::Mac::Mac *this)
{
  SubMac = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
  return ot::Mac::SubMac::IsRadioFilterEnabled(SubMac) & 1;
}

{
  return __ZNK2ot3Mac3Mac20IsRadioFilterEnabledEv(this);
}

uint64_t otLinkConvertRssToLinkQuality(uint64_t a1, char a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  unsigned __int8 v4 = ot::Mac::Mac::ComputeLinkMargin(v3, a2);
  return ot::LinkQualityForLinkMargin((ot *)v4);
}

uint64_t otLinkConvertLinkQualityToRss(uint64_t a1, char a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  char NoiseFloor = ot::Mac::Mac::GetNoiseFloor(v3);
  return (char)ot::GetTypicalRssForLinkQuality(NoiseFloor, a2);
}

uint64_t ot::Mac::Mac::GetNoiseFloor(ot::Mac::Mac *this)
{
  return (char)ot::Mac::Links::GetNoiseFloor((ot::Mac::Mac *)((char *)this + 56));
}

{
  return __ZNK2ot3Mac3Mac13GetNoiseFloorEv(this);
}

uint64_t otLinkGetTxDirectRetrySuccessHistogram(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otLinkGetTxDirectRetrySuccessHistogram", "link_api.cpp", 297, "(aNumberOfEntries) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetDirectRetrySuccessHistogram(v3, a2);
}

uint64_t otLinkGetTxIndirectRetrySuccessHistogram(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otLinkGetTxIndirectRetrySuccessHistogram", "link_api.cpp", 306, "(aNumberOfEntries) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetIndirectRetrySuccessHistogram(v3, a2);
}

void *otLinkResetTxRetrySuccessHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ResetRetrySuccessHistogram(v2);
}

uint64_t otLinkGetTxDirectErrorNoAckHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetDirectErrorNoAckHistogram(v3, a2);
}

uint64_t otLinkGetTxDirectErrorChannelAccessFailureHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetDirectErrorChannelAccessFailureHistogram(v3, a2);
}

void *otLinkResetTxErrorHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ResetTxErrorHistogram(v2);
}

void otLinkGetTxPacketSizeHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetTxSizeHistogram(v3, a2);
}

void otLinkGetRxPacketSizeHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetRxSizeHistogram(v3, a2);
}

void otLinkGetLqiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetRxLqiHistogram(v3, a2);
}

void otLinkGetRouterRssiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetRouterRssiHistogram(v3, a2);
}

void otLinkGetEndDeviceRssiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetEndDeviceRssiHistogram(v3, a2);
}

void otLinkGetJoinerRssiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetJoinerRssiHistogram(v3, a2);
}

void *otLinkResetPacketSizeHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearSizeHistograms(v2);
}

void *otLinkResetLqiHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearLqiHistogram(v2);
}

void *otLinkResetNeighborRssiHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearNeighborRssiHistograms(v2);
}

void *otLinkResetJoinerRssiHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearJoinerRssiHistograms(v2);
}

void *otLinkSetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = ot::Instance::Get<ot::Mac::Mac>(v3);
  return ot::Mac::Mac::SetPcapCallback(v4, a2, a3);
}

void *ot::Mac::Mac::SetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::Mac::Links::SetPcapCallback(a1 + 56, a2, a3);
}

{
  return __ZN2ot3Mac3Mac15SetPcapCallbackEPFvPK12otRadioFramebPvES5_(a1, a2, a3);
}

uint64_t otLinkIsPromiscuous(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsPromiscuous(v2) & 1;
}

uint64_t ot::Mac::Mac::IsPromiscuous(ot::Mac::Mac *this)
{
  return (*(unsigned __int8 *)this >> 3) & 1;
}

{
  return __ZNK2ot3Mac3Mac13IsPromiscuousEv(this);
}

uint64_t otLinkSetPromiscuous(uint64_t a1, char a2)
{
  char v8 = a2 & 1;
  unsigned int v7 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = v2;
  uint64_t v3 = (ot::ThreadNetif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  if ((ot::ThreadNetif::IsUp(v3) & 1) != 0)
  {
    return 13;
  }

  else
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v6);
    ot::Mac::Mac::SetPromiscuous(v4, v8 & 1);
  }

  return v7;
}

uint64_t otLinkSetEnabled(uint64_t a1, char a2)
{
  char v8 = a2 & 1;
  unsigned int v7 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = v2;
  uint64_t v3 = (ot::ThreadNetif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  if ((ot::ThreadNetif::IsUp(v3) & 1) != 0)
  {
    return 13;
  }

  else
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v6);
    ot::Mac::Mac::SetEnabled(v4, v8 & 1);
  }

  return v7;
}

uint64_t otLinkIsEnabled(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsEnabled(v2) & 1;
}

uint64_t ot::Mac::Mac::IsEnabled(ot::Mac::Mac *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot3Mac3Mac9IsEnabledEv(this);
}

uint64_t otLinkGetCounters(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetCounters(v2);
}

uint64_t ot::Mac::Mac::GetCounters(ot::Mac::Mac *this)
{
  return (uint64_t)this + 6344;
}

{
  return __ZN2ot3Mac3Mac11GetCountersEv(this);
}

void *otLinkResetCounters(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ResetCounters(v2);
}

void *ot::Mac::Mac::ResetCounters(ot::Mac::Mac *this)
{
  return memset((char *)this + 6344, 0, 0xB8uLL);
}

{
  return __ZN2ot3Mac3Mac13ResetCountersEv(this);
}

_BYTE *otLinkRegenerateExAddr(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::RegenerateExtAddr(v2);
}

uint64_t otLinkRegenerateMleIid(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GenerateMleIid(v2);
}

uint64_t otLinkActiveScan(uint64_t a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v5);
  return ot::Mac::Mac::ActiveScan(v6, a2, a3, a4, a5);
}

BOOL otLinkIsActiveScanInProgress(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsActiveScanInProgress(v2);
}

BOOL ot::Mac::Mac::IsActiveScanInProgress(ot::Mac::Mac *this)
{
  return ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 1u);
}

{
  return __ZNK2ot3Mac3Mac22IsActiveScanInProgressEv(this);
}

uint64_t otLinkEnergyScan(uint64_t a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v5);
  return ot::Mac::Mac::EnergyScan(v6, a2, a3, a4, a5);
}

BOOL otLinkIsEnergyScanInProgress(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsEnergyScanInProgress(v2);
}

BOOL ot::Mac::Mac::IsEnergyScanInProgress(ot::Mac::Mac *this)
{
  return ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 2u);
}

{
  return __ZNK2ot3Mac3Mac22IsEnergyScanInProgressEv(this);
}

uint64_t otLinkIsInTransmitState(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsInTransmitState(v2) & 1;
}

uint64_t otLinkGetCcaFailureRate(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetCcaFailureRate(v2);
}

uint64_t ot::Mac::Mac::GetCcaFailureRate(ot::Mac::Mac *this)
{
  return (unsigned __int16)ot::SuccessRateTracker::GetFailureRate((ot::Mac::Mac *)((char *)this + 6532));
}

{
  return __ZNK2ot3Mac3Mac17GetCcaFailureRateEv(this);
}

uint64_t otLinkGetMleAdvTxNum(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetMleAdvTxNum(v2);
}

uint64_t ot::Mac::Mac::GetMleAdvTxNum(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 26);
}

{
  return __ZNK2ot3Mac3Mac14GetMleAdvTxNumEv(this);
}

uint64_t otLinkSetMleAdvTxNum(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::SetMleAdvTxNum(v3, a2);
}

uint64_t otLinkCslPeriodToUs(unsigned __int16 a1)
{
  return 160 * a1;
}

uint64_t otLinkCslPeriodToMs(unsigned __int16 a1)
{
  return 160 * a1 / 0x3E8;
}

uint64_t otLinkCslGetChannel(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetCslChannel(v2);
}

uint64_t ot::Mac::Mac::GetCslChannel(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 32);
}

{
  return __ZNK2ot3Mac3Mac13GetCslChannelEv(this);
}

uint64_t otLinkCslSetChannel(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v5 = 0;
  if ((ot::Radio::IsCslChannelValid((ot::Radio *)a2) & 1) != 0)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
    ot::Mac::Mac::SetCslChannel(v3, a2);
  }

  else
  {
    return 7;
  }

  return v5;
}

uint64_t ot::Radio::IsCslChannelValid(ot::Radio *this)
{
  char v4 = 1;
  if ((_BYTE)this)
  {
    char v3 = 1;
    if (this != 11)
    {
      BOOL v2 = 0;
      char v3 = v2;
    }

    char v4 = v3;
  }

  return v4 & 1;
}

{
  return __ZN2ot5Radio17IsCslChannelValidEh(this);
}

uint64_t otLinkCslGetPeriod(uint64_t a1)
{
  BOOL v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetCslPeriod(v2);
}

uint64_t ot::Mac::Mac::GetCslPeriod(ot::Mac::Mac *this)
{
  return *((unsigned __int16 *)this + 17);
}

{
  return __ZNK2ot3Mac3Mac12GetCslPeriodEv(this);
}

uint64_t otLinkCslSetPeriod(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v5 = 0;
  if (a2 && a2 < 0x3EuLL)
  {
    return 7;
  }

  else
  {
    ot::AsCoreType<otInstance>(a1);
    char v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
    ot::Mac::Mac::SetCslPeriod(v3, a2);
  }

  return v5;
}

uint64_t otLinkCslGetTimeout(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetCslTimeout(v2);
}

uint64_t ot::Mle::Mle::GetCslTimeout(ot::Mle::Mle *this)
{
  return *((unsigned int *)this + 197);
}

{
  return __ZNK2ot3Mle3Mle13GetCslTimeoutEv(this);
}

uint64_t otLinkCslSetTimeout(uint64_t a1, unsigned int a2)
{
  unsigned int v5 = 0;
  if (a2 <= 0x2710uLL)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
    ot::Mle::Mle::SetCslTimeout(v3, a2);
  }

  else
  {
    return 7;
  }

  return v5;
}

uint64_t otLinkWorGetChannel(uint64_t a1)
{
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetWorChannel(v2);
}

uint64_t ot::Mac::Mac::GetWorChannel(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 36);
}

{
  return __ZNK2ot3Mac3Mac13GetWorChannelEv(this);
}

uint64_t otLinkWorSetChannel(uint64_t a1, char a2)
{
  unsigned int v9 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v8 = v2;
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v4 = ot::Instance::Get<ot::Mac::Mac>(v8);
    ot::Mac::Mac::SetWorChannel(v4, a2);
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v8);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v6 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v6);
  }

  else
  {
    return 13;
  }

  return v9;
}

uint64_t ot::Mac::Links::GetExtAddress(ot::Mac::Links *this)
{
  return ot::Mac::SubMac::GetExtAddress((ot::Mac::Links *)((char *)this + 8));
}

{
  return __ZNK2ot3Mac5Links13GetExtAddressEv(this);
}

uint64_t ot::Mac::SubMac::GetExtAddress(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 24;
}

{
  return __ZNK2ot3Mac6SubMac13GetExtAddressEv(this);
}

_BYTE *ot::Mac::Links::SetExtAddress(ot::Mac::Links *this, const ot::Mac::ExtAddress *a2)
{
  return ot::Trel::Link::HandleExtAddressChange((ot::Mac::Links *)((char *)this + 240), v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot3Mac5Links13SetExtAddressERKNS0_10ExtAddressE(this, a2);
}

_BYTE *ot::Trel::Link::HandleExtAddressChange( ot::Trel::Link *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Trel::Interface::HandleExtAddressChange((_BYTE *)this + 216, a2, a3, a4, a5, a6, a7, a8);
}

{
  return __ZN2ot4Trel4Link22HandleExtAddressChangeEv(this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Mac::Links::GetShortAddress(ot::Mac::Links *this)
{
  return (unsigned __int16)ot::Mac::SubMac::GetShortAddress((ot::Mac::Links *)((char *)this + 8));
}

{
  return __ZNK2ot3Mac5Links15GetShortAddressEv(this);
}

uint64_t ot::Mac::SubMac::GetShortAddress(ot::Mac::SubMac *this)
{
  return *((unsigned __int16 *)this + 11);
}

{
  return __ZNK2ot3Mac6SubMac15GetShortAddressEv(this);
}

uint64_t ot::Mac::Links::GetSubMac(ot::Mac::Links *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return __ZN2ot3Mac5Links9GetSubMacEv(this);
}

{
  return __ZNK2ot3Mac5Links9GetSubMacEv(this);
}

uint64_t ot::Mac::SubMac::IsRadioFilterEnabled(ot::Mac::SubMac *this)
{
  return (*((unsigned __int8 *)this + 32) >> 1) & 1;
}

{
  return __ZNK2ot3Mac6SubMac20IsRadioFilterEnabledEv(this);
}

uint64_t ot::Mac::Links::GetNoiseFloor(ot::Mac::Links *this)
{
  return (char)ot::Mac::SubMac::GetNoiseFloor((ot::Mac::Links *)((char *)this + 8));
}

{
  return __ZNK2ot3Mac5Links13GetNoiseFloorEv(this);
}

void *ot::Mac::Links::SetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::Mac::SubMac::SetPcapCallback(a1 + 8, a2, a3);
}

{
  return __ZN2ot3Mac5Links15SetPcapCallbackEPFvPK12otRadioFramebPvES5_(a1, a2, a3);
}

void *ot::Mac::SubMac::SetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::Set((void *)(a1 + 56), a2, a3);
}

{
  return __ZN2ot3Mac6SubMac15SetPcapCallbackEPFvPK12otRadioFramebPvES5_(a1, a2, a3);
}

void *ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPK12otRadioFramebPvEE3SetES6_S4_(result, a2, a3);
}

uint64_t ot::SuccessRateTracker::GetFailureRate(ot::SuccessRateTracker *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot18SuccessRateTracker14GetFailureRateEv(this);
}

uint64_t otLinkMetricsQuery(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (void *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v6);
  ot::LinkMetrics::Initiator::SetReportCallback(v7, a5, a6);
  ot::AsCoreType<otInstance>(a1);
  uint64_t v13 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v8);
  ot::AsCoreType<otIp6Address>(a2);
  char v12 = v9;
  ot::AsCoreTypePtr<otLinkMetrics>();
  return ot::LinkMetrics::Initiator::Query(v13, v12, a3, v10);
}

uint64_t ot::Instance::Get<ot::LinkMetrics::Initiator>(uint64_t a1)
{
  return a1 + 164544;
}

{
  return __ZN2ot8Instance3GetINS_11LinkMetrics9InitiatorEEERT_v(a1);
}

void *ot::LinkMetrics::Initiator::SetReportCallback(void *a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::Set( a1,  a2,  a3);
}

  ;
}

{
  return __ZN2ot11LinkMetrics9Initiator17SetReportCallbackEPFvPK12otIp6AddressPK19otLinkMetricsValueshPvES8_(a1, a2, a3);
}

uint64_t otLinkMetricsConfigForwardTrackingSeries( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v19 = a4;
  ot::AsCoreType<otInstance>(a1);
  unsigned int v14 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v7);
  ot::LinkMetrics::Initiator::SetMgmtResponseCallback((uint64_t)v14, a6, a7);
  ot::AsCoreType<otIp6Address>(a2);
  char v12 = v8;
  ot::AsCoreType<otLinkMetricsSeriesFlags>((uint64_t)&v19);
  uint64_t v13 = v9;
  ot::AsCoreTypePtr<otLinkMetrics>();
  return ot::LinkMetrics::Initiator::SendMgmtRequestForwardTrackingSeries(v14, (__n128 *)v12, a3, v13, v10);
}

void *ot::LinkMetrics::Initiator::SetMgmtResponseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::Set((void *)(a1 + 16), a2, a3);
}

{
  return __ZN2ot11LinkMetrics9Initiator23SetMgmtResponseCallbackEPFvPK12otIp6AddresshPvES5_(a1, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otLinkMetricsSeriesFlags>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otLinkMetricsConfigEnhAckProbing( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v14 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v8);
  ot::LinkMetrics::Initiator::SetMgmtResponseCallback((uint64_t)v14, a5, a6);
  ot::LinkMetrics::Initiator::SetEnhAckProbingCallback((uint64_t)v14, a7, a8);
  ot::AsCoreType<otIp6Address>(a2);
  char v12 = v9;
  char v13 = ot::MapEnum<otLinkMetricsEnhAckFlags>(a3);
  ot::AsCoreTypePtr<otLinkMetrics>();
  return ot::LinkMetrics::Initiator::SendMgmtRequestEnhAckProbing(v14, v12, v13, v10);
}

void *ot::LinkMetrics::Initiator::SetEnhAckProbingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::Set( (void *)(a1 + 32),  a2,  a3);
}

{
  return __ZN2ot11LinkMetrics9Initiator24SetEnhAckProbingCallbackEPFvtPK12otExtAddressPK19otLinkMetricsValuesPvES8_( a1,  a2,  a3);
}

uint64_t ot::MapEnum<otLinkMetricsEnhAckFlags>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumI24otLinkMetricsEnhAckFlagsEEKNS_10MappedEnumIT_E4TypeES3_(result);
}

uint64_t otLinkMetricsSendLinkProbe(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4)
{
  uint64_t v7 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v4);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::LinkMetrics::Initiator::SendLinkProbe(v7, v5, a3, a4);
}

void *ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPK12otIp6AddressPK19otLinkMetricsValueshPvEE3SetES9_S7_(result, a2, a3);
}

void *ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPK12otIp6AddresshPvEE3SetES6_S4_(result, a2, a3);
}

void *ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvtPK12otExtAddressPK19otLinkMetricsValuesPvEE3SetES9_S7_(result, a2, a3);
}

uint64_t otPlatCryptoAesInit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    else {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v2;
}

uint64_t otPlatCryptoAesSetKey(uint64_t a1, const ot::Crypto::Key *a2)
{
  uint64_t v10 = a1;
  unsigned int v9 = a2;
  unsigned int v8 = 0;
  ot::Crypto::LiteralKey::LiteralKey((ot::Crypto::LiteralKey *)v6, a2);
  if (v10)
  {
    if (*(unsigned __int16 *)(v10 + 8) >= 0x120uLL)
    {
      uint64_t v7 = *(int **)v10;
      uint64_t v5 = v7;
      uint64_t Bytes = ot::Crypto::LiteralKey::GetBytes((ot::Crypto::LiteralKey *)v6);
      unsigned __int16 Length = ot::Crypto::LiteralKey::GetLength((ot::Crypto::LiteralKey *)v6);
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v8;
}

uint64_t ot::Crypto::LiteralKey::GetBytes(ot::Crypto::LiteralKey *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot6Crypto10LiteralKey8GetBytesEv(this);
}

uint64_t ot::Crypto::LiteralKey::GetLength(ot::Crypto::LiteralKey *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot6Crypto10LiteralKey9GetLengthEv(this);
}

uint64_t otPlatCryptoAesEncrypt(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x120uLL || mbedtls_aes_crypt_ecb(*(void *)a1, 1, a2, a3) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoAesFree(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    else {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v2;
}

uint64_t otPlatCryptoHmacSha256Init(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x18uLL)
    {
      uint64_t v2 = *(void *)a1;
      mbedtls_md_init(*(void *)a1);
      uint64_t v3 = mbedtls_md_info_from_type(6);
      return mbedtls_md_setup(v2, (uint64_t)v3, 1) != 0;
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 7;
  }

uint64_t otPlatCryptoHmacSha256Deinit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    else {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v2;
}

uint64_t otPlatCryptoHmacSha256Start(uint64_t a1, const ot::Crypto::Key *a2)
{
  uint64_t v9 = a1;
  unsigned int v8 = a2;
  unsigned int v7 = 0;
  ot::Crypto::LiteralKey::LiteralKey((ot::Crypto::LiteralKey *)v6, a2);
  if (v9)
  {
    if (*(unsigned __int16 *)(v9 + 8) >= 0x18uLL)
    {
      uint64_t v5 = *(void *)v9;
      uint64_t Bytes = (_BYTE *)ot::Crypto::LiteralKey::GetBytes((ot::Crypto::LiteralKey *)v6);
      unsigned __int16 Length = ot::Crypto::LiteralKey::GetLength((ot::Crypto::LiteralKey *)v6);
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v7;
}

uint64_t otPlatCryptoHmacSha256Update(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x18uLL || mbedtls_md_hmac_update(*(void *)a1, a2, a3) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoHmacSha256Finish(uint64_t a1, _BYTE *a2)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x18uLL || mbedtls_md_hmac_finish(*(uint64_t **)a1, a2) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoHkdfInit(uint64_t a1)
{
  unsigned int v3 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x20uLL)
    {
      uint64_t v1 = *(_OWORD **)a1;
      *uint64_t v1 = 0u;
      v1[1] = 0u;
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v3;
}

uint64_t otPlatCryptoHkdfExpand(uint64_t a1, uint64_t a2, unsigned __int16 a3, char *a4, unsigned __int16 a5)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  unsigned __int16 v18 = a3;
  v17 = a4;
  unsigned __int16 v16 = a5;
  int v15 = 0;
  ot::Crypto::HmacSha256::HmacSha256((ot::Crypto::HmacSha256 *)__n_4);
  char __n_3 = 0;
  if (v20)
  {
    if (*(unsigned __int16 *)(v20 + 8) >= 0x20uLL)
    {
      unsigned int v11 = *(ot::Crypto::Sha256::Hash **)v20;
      while (v16)
      {
        ot::Crypto::Sha256::Hash::GetBytes(v11);
        ot::Crypto::Key::Set((uint64_t)v10, v5, 32);
        ot::Crypto::HmacSha256::Start((ot::Crypto::HmacSha256 *)__n_4, (const ot::Crypto::Key *)v10);
        if (__n_3) {
          ot::Crypto::HmacSha256::Update<ot::Crypto::Sha256::Hash>((ot::Crypto::HmacSha256 *)__n_4, (uint64_t)v21);
        }
        ot::Crypto::HmacSha256::Update((ot::Crypto::HmacSha256 *)__n_4, v19, v18);
        ++__n_3;
        ot::Crypto::HmacSha256::Update<unsigned char>((ot::Crypto::HmacSha256 *)__n_4, (uint64_t)&__n_3);
        ot::Crypto::HmacSha256::Finish((ot::Crypto::HmacSha256 *)__n_4, (ot::Crypto::Sha256::Hash *)v21);
        unsigned __int16 __n = ot::Min<unsigned short>(v16, 0x20u);
        __dst = v17;
        ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v21);
        memcpy(__dst, v6, __n);
        v17 += __n;
        v16 -= __n;
      }
    }

    else
    {
      int v15 = 1;
    }
  }

  else
  {
    int v15 = 7;
  }

  unsigned int v8 = v15;
  ot::Crypto::HmacSha256::~HmacSha256((ot::Crypto::HmacSha256 *)__n_4);
  return v8;
}

uint64_t ot::Crypto::Key::Set(uint64_t this, const unsigned __int8 *a2, __int16 a3)
{
  *(void *)this = a2;
  *(_WORD *)(this + 8) = a3;
  return this;
}

  ;
}

{
  return __ZN2ot6Crypto3Key3SetEPKht(this, a2, a3);
}

uint64_t ot::Crypto::HmacSha256::Update<ot::Crypto::Sha256::Hash>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 0x20u);
}

{
  return __ZN2ot6Crypto10HmacSha2566UpdateINS0_6Sha2564HashEEEvRKT_(a1, a2);
}

uint64_t ot::Crypto::HmacSha256::Update<unsigned char>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 1u);
}

{
  return __ZN2ot6Crypto10HmacSha2566UpdateIhEEvRKT_(a1, a2);
}

uint64_t otPlatCryptoHkdfExtract( uint64_t a1, const unsigned __int8 *a2, __int16 a3, const ot::Crypto::Key *a4)
{
  uint64_t v16 = a1;
  int v15 = a2;
  __int16 v14 = a3;
  char v13 = a4;
  int v12 = 0;
  ot::Crypto::HmacSha256::HmacSha256((ot::Crypto::HmacSha256 *)v11);
  ot::Crypto::LiteralKey::LiteralKey((ot::Crypto::LiteralKey *)v8, v13);
  if (v16)
  {
    if (*(unsigned __int16 *)(v16 + 8) >= 0x20uLL)
    {
      uint64_t v9 = *(ot::Crypto::Sha256::Hash **)v16;
      ot::Crypto::Key::Set((uint64_t)v10, v15, v14);
      ot::Crypto::HmacSha256::Start((ot::Crypto::HmacSha256 *)v11, (const ot::Crypto::Key *)v10);
      uint64_t Bytes = (void *)ot::Crypto::LiteralKey::GetBytes((ot::Crypto::LiteralKey *)v8);
      unsigned __int16 Length = ot::Crypto::LiteralKey::GetLength((ot::Crypto::LiteralKey *)v8);
      ot::Crypto::HmacSha256::Update((ot::Crypto::HmacSha256 *)v11, (uint64_t)Bytes, Length);
      ot::Crypto::HmacSha256::Finish((ot::Crypto::HmacSha256 *)v11, v9);
    }

    else
    {
      int v12 = 1;
    }
  }

  else
  {
    int v12 = 7;
  }

  unsigned int v6 = v12;
  ot::Crypto::HmacSha256::~HmacSha256((ot::Crypto::HmacSha256 *)v11);
  return v6;
}

uint64_t otPlatCryptoHkdfDeinit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x20uLL)
    {
      *(void *)a1 = 0LL;
      *(_WORD *)(a1 + 8) = 0;
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v2;
}

uint64_t otPlatCryptoSha256Init(uint64_t *a1)
{
  unsigned int v2 = 0;
  if (a1) {
    mbedtls_sha256_init(*a1);
  }
  else {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoSha256Deinit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x6CuLL)
    {
      mbedtls_sha256_free(*(void **)a1);
      *(void *)a1 = 0LL;
      *(_WORD *)(a1 + 8) = 0;
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 7;
  }

  return v2;
}

uint64_t otPlatCryptoSha256Start(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x6CuLL || mbedtls_sha256_starts_ret(*(_DWORD **)a1, 0) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoSha256Update(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x6CuLL || mbedtls_sha256_update_ret(*(_DWORD **)a1, a2, a3) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoSha256Finish(uint64_t a1, _BYTE *a2)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x6CuLL || mbedtls_sha256_finish_ret(*(void *)a1, a2) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoRandomInit()
{
  uint64_t result = mbedtls_ctr_drbg_seed( (uint64_t)&sCtrDrbgContext,  (uint64_t)mbedtls_entropy_func,  (uint64_t)sEntropyContext,  0LL,  0LL);
  if ((_DWORD)result) {
    __assert_rtn("otPlatCryptoRandomInit", "crypto_platform.cpp", 478, "rval == 0");
  }
  return result;
}

uint64_t handleMbedtlsEntropyPoll(void *a1, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unsigned int v5 = -60;
  if (!otPlatEntropyGet(a2, a3))
  {
    unsigned int v5 = 0;
    if (a4) {
      *a4 = a3;
    }
  }

  return v5;
}

_DWORD *otPlatCryptoRandomDeinit()
{
  return mbedtls_ctr_drbg_free(sCtrDrbgContext);
}

uint64_t otPlatCryptoRandomGet(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2 = (ot::Crypto::MbedTls *)mbedtls_ctr_drbg_random((uint64_t)&sCtrDrbgContext, a1, a2);
  return ot::Crypto::MbedTls::MapError(v2);
}

void *otPlatCryptoPbkdf2GenerateKey( __int128 *a1, unsigned __int16 a2, const void *a3, unsigned __int16 a4, unsigned int a5, unsigned __int16 a6, char *a7)
{
  int v14 = 0;
  if (a4 > 0x22uLL) {
    __assert_rtn("otPlatCryptoPbkdf2GenerateKey", "crypto_platform.cpp", 737, "aSaltLen <= sizeof(prfInput)");
  }
  uint64_t result = memcpy(__dst, a3, a4);
  if (a5 % 2) {
    __assert_rtn("otPlatCryptoPbkdf2GenerateKey", "crypto_platform.cpp", 739, "aIterationCounter % 2 == 0");
  }
  unsigned int v16 = a5 / 2;
  while (a6)
  {
    ++v14;
    __dst[a4] = HIBYTE(v14);
    __dst[a4 + 1] = BYTE2(v14);
    __dst[a4 + 2] = BYTE1(v14);
    __dst[a4 + 3] = v14;
    mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)__dst, a4 + 4, (uint64_t)__src);
    mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)__src, 0x10uLL, (uint64_t)v22);
    for (unsigned int i = 0; i < 2uLL; ++i)
      __src[i] ^= v22[i];
    for (unsigned int j = 1; j < v16; ++j)
    {
      mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)v22, 0x10uLL, (uint64_t)v21);
      mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)v21, 0x10uLL, (uint64_t)v22);
      for (unsigned int k = 0; k < 2uLL; ++k)
        __src[k] ^= v22[k] ^ v21[k];
    }

    unsigned __int16 v11 = ot::Min<unsigned short>(a6, 0x10u);
    uint64_t result = memcpy(a7, __src, v11);
    a7 += v11;
    a6 -= v11;
  }

  return result;
}

uint64_t otLoggingGetLevel(ot::Instance *a1)
{
  return ot::Instance::GetLogLevel(a1);
}

uint64_t ot::Instance::GetLogLevel(ot::Instance *this)
{
  return ot::Instance::sLogLevel;
}

{
  return __ZN2ot8Instance11GetLogLevelEv(this);
}

uint64_t otLoggingSetLevel(unsigned int a1)
{
  unsigned int v2 = 0;
  if (a1 < 6) {
    ot::Instance::SetLogLevel(a1);
  }
  else {
    return 7;
  }
  return v2;
}

void otLogCritPlat(const char *a1, ...)
{
}

void otLogWarnPlat( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogNotePlat( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogInfoPlat( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogDebgPlat( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otDumpCritPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpWarnPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpNotePlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpInfoPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpDebgPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otLogCli( int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  BOOL v9 = 0;
  if (a1 >= 0) {
    BOOL v9 = a1 <= 5;
  }
  if (!v9) {
    __assert_rtn("otLogCli", "logging_api.cpp", 189, "aLogLevel >= kLogLevelNone && aLogLevel <= kLogLevelDebg");
  }
}

void otLogCritRcp( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogWarnRcp( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogNoteRcp( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogInfoRcp( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogDebgRcp( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otMessageFree(uint64_t a1)
{
}

uint64_t otMessageGetLength(uint64_t a1)
{
  return (unsigned __int16)ot::Message::GetLength(v1);
}

uint64_t ot::Message::GetLength(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 46);
}

{
  return __ZNK2ot7Message9GetLengthEv(this);
}

uint64_t otMessageSetLength(uint64_t a1, unsigned __int16 a2)
{
  return ot::Message::SetLength(v2, a2);
}

uint64_t otMessageGetOffset(uint64_t a1)
{
  return (unsigned __int16)ot::Message::GetOffset(v1);
}

uint64_t ot::Message::GetOffset(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 48);
}

{
  return __ZNK2ot7Message9GetOffsetEv(this);
}

uint64_t otMessageSetOffset(uint64_t a1, unsigned __int16 a2)
{
  return ot::Message::SetOffset(v2, a2);
}

uint64_t otMessageIsLinkSecurityEnabled(uint64_t a1)
{
  return ot::Message::IsLinkSecurityEnabled(v1) & 1;
}

uint64_t ot::Message::IsLinkSecurityEnabled(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 8) & 1;
}

{
  return __ZNK2ot7Message21IsLinkSecurityEnabledEv(this);
}

uint64_t otMessageSetDirectTransmission(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    ot::AsCoreType<otMessage>(a1);
    return ot::Message::SetDirectTransmission(v2);
  }

  else
  {
    ot::AsCoreType<otMessage>(a1);
    return ot::Message::ClearDirectTransmission(v4);
  }

uint64_t ot::Message::SetDirectTransmission(ot::Message *this)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68) = *(_DWORD *)(result + 68) & 0xFFFFFF7F | 0x80;
  return result;
}

{
  return __ZN2ot7Message21SetDirectTransmissionEv(this);
}

uint64_t ot::Message::ClearDirectTransmission(ot::Message *this)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68) &= ~0x80u;
  return result;
}

{
  return __ZN2ot7Message23ClearDirectTransmissionEv(this);
}

uint64_t otMessageGetRss(uint64_t a1)
{
  return (char)ot::Message::GetAverageRss(v1);
}

uint64_t ot::Message::GetAverageRss(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return (char)ot::RssAverager::GetAverage((ot::RssAverager *)(Metadata + 56));
}

{
  return __ZNK2ot7Message13GetAverageRssEv(this);
}

uint64_t otMessageSetTimestamp(uint64_t a1)
{
  unsigned int v3 = v1;
  int Now = ot::TimerMilli::GetNow(v1);
  return ot::Message::SetTimestamp(v3, Now);
}

uint64_t ot::Message::SetTimestamp(ot::Buffer *a1, int a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 36) = a2;
  return result;
}

{
  return __ZN2ot7Message12SetTimestampENS_4TimeE(a1, a2);
}

uint64_t otMessageAppend(uint64_t a1, char *a2, unsigned __int16 a3)
{
  if (!a2) {
    __assert_rtn("otMessageAppend", "message_api.cpp", 78, "(aBuf) != nullptr");
  }
  ot::AsCoreType<otMessage>(a1);
  return ot::Message::AppendBytes(v3, a2, a3);
}

uint64_t otMessageRead(uint64_t a1, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  if (!a3) {
    __assert_rtn("otMessageRead", "message_api.cpp", 85, "(aBuf) != nullptr");
  }
  ot::AsCoreType<otMessage>(a1);
  return (unsigned __int16)ot::Message::ReadBytes(v4, a2, a3, a4);
}

uint64_t otMessageWrite(uint64_t a1, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  if (!a3) {
    __assert_rtn("otMessageWrite", "message_api.cpp", 92, "(aBuf) != nullptr");
  }
  ot::AsCoreType<otMessage>(a1);
  ot::Message::WriteBytes(v4, a2, a3, a4);
  return a4;
}

void *otMessageQueueInit(void *result)
{
  if (!result) {
    __assert_rtn("otMessageQueueInit", "message_api.cpp", 101, "(aQueue) != nullptr");
  }
  *uint64_t result = 0LL;
  return result;
}

ot::Message **otMessageQueueEnqueue(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = v2;
  ot::AsCoreType<otMessage>(a2);
  return ot::MessageQueue::Enqueue(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMessageQueue>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

ot::Message **ot::MessageQueue::Enqueue(ot::MessageQueue *this, ot::Message *a2)
{
  return ot::MessageQueue::Enqueue(this, a2, 1);
}

{
  return __ZN2ot12MessageQueue7EnqueueERNS_7MessageE(this, a2);
}

ot::Message **otMessageQueueEnqueueAtHead(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = v2;
  ot::AsCoreType<otMessage>(a2);
  return ot::MessageQueue::Enqueue(v5, v3, 0);
}

uint64_t otMessageQueueDequeue(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = v2;
  ot::AsCoreType<otMessage>(a2);
  return ot::MessageQueue::Dequeue(v5, v3);
}

uint64_t otMessageQueueGetHead(uint64_t a1)
{
  return ot::MessageQueue::GetHead(v1);
}

uint64_t ot::MessageQueue::GetHead(ot::MessageQueue *this)
{
  Tail = (ot::Message *)ot::MessageQueue::GetTail(this);
  return ot::Message::NextOf(Tail, v2);
}

{
  ot::Message *Tail;
  const ot::Message *v2;
  Tail = (ot::Message *)ot::MessageQueue::GetTail(this);
  return ot::Message::NextOf(Tail, v2);
}

{
  return __ZN2ot12MessageQueue7GetHeadEv(this);
}

{
  return __ZNK2ot12MessageQueue7GetHeadEv(this);
}

uint64_t otMessageQueueGetNext(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  ot::AsCoreType<otMessage>(a2);
  if (ot::Message::GetMessageQueue(v2) != a1) {
    return 0LL;
  }
  ot::AsCoreType<otMessage>(a2);
  return ot::Message::GetNext(v3);
}

uint64_t ot::Message::GetMessageQueue(ot::Message *this)
{
  if ((*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) & 0x800) != 0) {
    return 0LL;
  }
  else {
    return *(void *)(ot::Buffer::GetMetadata(this) + 24);
  }
}

{
  return __ZNK2ot7Message15GetMessageQueueEv(this);
}

uint64_t otMessageGetBufferIDs(uint64_t a1, char *a2)
{
  return ot::Message::GetBufferIDs(v2, a2);
}

uint64_t otMessageGetIsBufferStatsEnabled(uint64_t a1)
{
  unsigned int v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return ot::MessagePool::GetIsBufferStatsEnabled(v2) & 1;
}

uint64_t ot::MessagePool::GetIsBufferStatsEnabled(ot::MessagePool *this)
{
  return *((_BYTE *)this + 85012) & 1;
}

{
  return __ZN2ot11MessagePool23GetIsBufferStatsEnabledEv(this);
}

uint64_t otMessageSetIsBufferStatsEnabled(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::MessagePool>(v2);
  return ot::MessagePool::SetIsBufferStatsEnabled(v3, v5 & 1);
}

uint64_t ot::MessagePool::SetIsBufferStatsEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 85012) = a2 & 1;
  return this;
}

{
  return __ZN2ot11MessagePool23SetIsBufferStatsEnabledEb(this, a2);
}

unint64_t otMessageGetBufferAt(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v2);
  return ot::MessagePool::GetBufferAt(v3, a2);
}

unint64_t ot::MessagePool::GetBufferAt(ot::MessagePool *this, unsigned __int16 a2)
{
  return ot::Pool<ot::Buffer,(unsigned short)256>::GetEntryAt((uint64_t)this + 8, a2);
}

{
  return __ZN2ot11MessagePool11GetBufferAtEt(this, a2);
}

uint64_t otMessageResetBufferStats(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::MessagePool>(v1);
  return ot::MessagePool::ResetBufferStats(v2);
}

uint64_t otMessageGetBufferStats(uint64_t a1)
{
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return ot::MessagePool::GetBufferStats(v2);
}

uint64_t ot::MessagePool::GetBufferStats(ot::MessagePool *this)
{
  return (uint64_t)this + 65556;
}

{
  return __ZN2ot11MessagePool14GetBufferStatsEv(this);
}

uint64_t otMessageGetTotalBufferCount(uint64_t a1)
{
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return (unsigned __int16)ot::MessagePool::GetTotalBufferCount(v2);
}

uint64_t otMessageGetFreeBufferCount(uint64_t a1)
{
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return (unsigned __int16)ot::MessagePool::GetFreeBufferCount(v2);
}

BOOL otMessageGetBufferInfo(uint64_t a1, uint64_t a2)
{
  char v5 = v2;
  ot::AsCoreType<otBufferInfo>(a2);
  return ot::Instance::GetBufferInfo(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otBufferInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otMessageResetBufferInfo(uint64_t a1)
{
  return ot::Instance::ResetBufferInfo(v1);
}

uint64_t otMessageGetMatterHeader(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  ot::AsCoreType<otInstance>(a1);
  unsigned int v8 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v3);
  ot::AsCoreType<otMessage>(v11);
  if ((ot::MeshForwarder::IsMatter(v8, v4, (ot::Ip6::Headers *)v9) & 1) != 0)
  {
    ot::AsCoreType<otInstance>(v12);
    unsigned int v6 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v5);
    ot::MeshForwarder::GetMatterHeader(v6, (const ot::Ip6::Headers *)v9, v10);
    char v13 = 1;
  }

  else
  {
    char v13 = 0;
  }

  return v13 & 1;
}

BOOL otMessageIsIcmpError(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = ot::Instance::Get<ot::MeshForwarder>(v2);
  ot::AsCoreType<otMessage>(a2);
  memcpy(__dst, v3, sizeof(__dst));
  return ot::MeshForwarder::IsTxIcmpError(v5, (ot::Message *)__dst);
}

uint64_t ot::Message::NextOf(ot::Message *this, ot::Message *a2)
{
  if (this) {
    return *(void *)ot::Message::Next(this);
  }
  else {
    return 0LL;
  }
}

{
  return __ZN2ot7Message6NextOfEPS0_(this, a2);
}

uint64_t ot::MessageQueue::GetTail(ot::MessageQueue *this)
{
  return *(void *)this;
}

{
  return *(void *)this;
}

{
  return __ZN2ot12MessageQueue7GetTailEv(this);
}

{
  return __ZNK2ot12MessageQueue7GetTailEv(this);
}

uint64_t ot::Message::Next(ot::Message *this)
{
  return ot::Buffer::GetMetadata(this);
}

{
  return ot::Buffer::GetMetadata(this);
}

{
  return __ZN2ot7Message4NextEv(this);
}

{
  return __ZNK2ot7Message4NextEv(this);
}

unint64_t ot::Pool<ot::Buffer,(unsigned short)256>::GetEntryAt(uint64_t a1, unsigned __int16 a2)
{
  return a1 + 8 + ((unint64_t)a2 << 8);
}

{
  return __ZN2ot4PoolINS_6BufferELt256EE10GetEntryAtEt(a1, a2);
}

uint64_t otMultiRadioGetNeighborInfo(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned int v8 = 0;
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::NeighborTable *)ot::Instance::Get<ot::NeighborTable>(v3);
  ot::AsCoreType<otExtAddress>(a2);
  Neighbor = (ot::RadioSelector::NeighborInfo *)ot::NeighborTable::FindNeighbor(v6, v4, 5);
  if (Neighbor) {
    ot::RadioSelector::NeighborInfo::PopulateMultiRadioInfo(Neighbor, a3);
  }
  else {
    return 23;
  }
  return v8;
}

uint64_t otMultiRadioSetNeighborPhyPreference(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v9 = 0;
  ot::AsCoreType<otInstance>(a1);
  unsigned int v7 = (ot::NeighborTable *)ot::Instance::Get<ot::NeighborTable>(v4);
  ot::AsCoreType<otExtAddress>(a2);
  uint64_t Neighbor = ot::NeighborTable::FindNeighbor(v7, v5, 5);
  if (Neighbor) {
    ot::RadioSelector::NeighborInfo::UpdateMultiRadioPreference(Neighbor, a3, a4);
  }
  else {
    return 23;
  }
  return v9;
}

uint64_t otNetDataGet(uint64_t a1, char a2, unsigned __int8 *a3, char *a4)
{
  char v9 = a2 & 1;
  if (!a3) {
    __assert_rtn("otNetDataGet", "netdata_api.cpp", 45, "(aData) != nullptr");
  }
  if (!a4) {
    __assert_rtn("otNetDataGet", "netdata_api.cpp", 46, "(aDataLength) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkData::Leader>(v4);
  return ot::NetworkData::NetworkData::CopyNetworkData(v5, (v9 & 1) != 0, a3, a4);
}

uint64_t otNetDataGetLength(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkData::NetworkData *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::NetworkData::GetLength(v2);
}

uint64_t ot::NetworkData::NetworkData::GetLength(ot::NetworkData::NetworkData *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot11NetworkData11NetworkData9GetLengthEv(this);
}

uint64_t otNetDataGetMaxLength(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::LeaderBase::GetMaxLength(v2);
}

uint64_t ot::NetworkData::LeaderBase::GetMaxLength(ot::NetworkData::LeaderBase *this)
{
  return *((unsigned __int8 *)this + 266);
}

{
  return __ZNK2ot11NetworkData10LeaderBase12GetMaxLengthEv(this);
}

uint64_t otNetDataResetMaxLength(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::LeaderBase::ResetMaxLength(v2);
}

uint64_t ot::NetworkData::LeaderBase::ResetMaxLength(ot::NetworkData::LeaderBase *this)
{
  uint64_t result = ot::NetworkData::NetworkData::GetLength(this);
  *((_BYTE *)this + 266) = result;
  return result;
}

{
  return __ZN2ot11NetworkData10LeaderBase14ResetMaxLengthEv(this);
}

void otNetDataReset(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkData::Leader *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  ot::NetworkData::Leader::Reset(v2);
}

uint64_t otNetDataGetNextOnMeshPrefix(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextOnMeshPrefix", "netdata_api.cpp", 78, "(aIterator) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  ot::AsCoreType<otBorderRouterConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v6, a2, v4);
}

uint64_t otSetNetData(uint64_t a1, char *a2, size_t a3, char a4, char a5)
{
  unsigned int v6 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v5);
  return ot::NetworkData::LeaderBase::setStringAsNetworkData(v6, a2, a3, a4, a5);
}

uint64_t otNetDataGetNextRoute(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextRoute", "netdata_api.cpp", 103, "(aIterator) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  ot::AsCoreType<otExternalRouteConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextExternalRoute(v6, a2, v4);
}

uint64_t otNetDataGetNextService(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextService", "netdata_api.cpp", 110, "(aIterator) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  ot::AsCoreType<otServiceConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextService(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otServiceConfig>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otNetDataGetNextLowpanContextInfo(uint64_t a1, ot::NetworkData::OnMeshPrefixConfig *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextLowpanContextInfo", "netdata_api.cpp", 119, "(aIterator) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::NetworkData::NetworkData *)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  ot::AsCoreType<otLowpanContextInfo>(a3);
  return ot::NetworkData::NetworkData::GetNextLowpanContextInfo(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otLowpanContextInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otNetDataGetVersion(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetDataVersion(LeaderData, 0);
}

uint64_t ot::Mle::LeaderData::GetDataVersion(uint64_t a1, char a2)
{
  if (a2) {
    return *(unsigned __int8 *)(a1 + 6);
  }
  else {
    return *(unsigned __int8 *)(a1 + 5);
  }
}

{
  return __ZNK2ot3Mle10LeaderData14GetDataVersionENS_11NetworkData4TypeE(a1, a2);
}

uint64_t otNetDataGetStableVersion(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetDataVersion(LeaderData, 1);
}

uint64_t otNetDataSteeringDataCheckJoiner(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v2);
  ot::AsCoreType<otExtAddress>(a2);
  return ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(v6, v3, v4);
}

uint64_t otNetDataSteeringDataCheckJoinerWithDiscerner(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v2);
  ot::AsCoreType<otJoinerDiscerner>(a2);
  return ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(v5, v3);
}

uint64_t otThreadGetNextDiagnosticTlv(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  if (!a2) {
    __assert_rtn("otThreadGetNextDiagnosticTlv", "netdiag_api.cpp", 49, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otThreadGetNextDiagnosticTlv", "netdiag_api.cpp", 50, "(aNetworkDiagTlv) != nullptr");
  }
  ot::AsCoapMessage();
  return ot::NetworkDiagnostic::Client::GetNextDiagTlv(v3, a2, a3);
}

uint64_t otThreadSendDiagnosticGet( uint64_t a1, uint64_t a2, _BYTE *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  char v9 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkDiagnostic::Client>(v6);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::NetworkDiagnostic::Client::SendDiagnosticGet(v9, v7, a3, a4, a5, a6);
}

uint64_t ot::Instance::Get<ot::NetworkDiagnostic::Client>(uint64_t a1)
{
  return a1 + 160072;
}

{
  return __ZN2ot8Instance3GetINS_17NetworkDiagnostic6ClientEEERT_v(a1);
}

uint64_t otThreadSendDiagnosticReset(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  unsigned int v7 = (ot::NetworkDiagnostic::Client *)ot::Instance::Get<ot::NetworkDiagnostic::Client>(v4);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::NetworkDiagnostic::Client::SendDiagnosticReset(v7, v5, a3, a4);
}

void *otThreadGetVendorName(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkDiagnostic::Server *)ot::Instance::Get<ot::NetworkDiagnostic::Server>(v1);
  return ot::NetworkDiagnostic::Server::GetVendorName(v2);
}

uint64_t ot::Instance::Get<ot::NetworkDiagnostic::Server>(uint64_t a1)
{
  return a1 + 160065;
}

{
  return __ZN2ot8Instance3GetINS_17NetworkDiagnostic6ServerEEERT_v(a1);
}

void *ot::NetworkDiagnostic::Server::GetVendorName(ot::NetworkDiagnostic::Server *this)
{
  return &ot::NetworkDiagnostic::Server::kVendorName;
}

{
  return __ZNK2ot17NetworkDiagnostic6Server13GetVendorNameEv(this);
}

void *otThreadGetVendorModel(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkDiagnostic::Server *)ot::Instance::Get<ot::NetworkDiagnostic::Server>(v1);
  return ot::NetworkDiagnostic::Server::GetVendorModel(v2);
}

void *ot::NetworkDiagnostic::Server::GetVendorModel(ot::NetworkDiagnostic::Server *this)
{
  return &ot::NetworkDiagnostic::Server::kVendorModel;
}

{
  return __ZNK2ot17NetworkDiagnostic6Server14GetVendorModelEv(this);
}

void *otThreadGetVendorSwVersion(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkDiagnostic::Server *)ot::Instance::Get<ot::NetworkDiagnostic::Server>(v1);
  return ot::NetworkDiagnostic::Server::GetVendorSwVersion(v2);
}

void *ot::NetworkDiagnostic::Server::GetVendorSwVersion(ot::NetworkDiagnostic::Server *this)
{
  return &ot::NetworkDiagnostic::Server::kVendorSwVersion;
}

{
  return __ZNK2ot17NetworkDiagnostic6Server18GetVendorSwVersionEv(this);
}

ot::Utils::HistoryTracker *ot::Utils::HistoryTracker::HistoryTracker( ot::Utils::HistoryTracker *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Utils::HistoryTracker::HistoryTracker(this, a2);
  return this;
}

uint64_t ot::Utils::HistoryTracker::HandleTimer(ot::Utils::HistoryTracker *this)
{
  return ot::TimerMilli::Start((ot::Utils::HistoryTracker *)((char *)this + 9816), 0x36EE800u);
}

_WORD *ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList( _WORD *a1)
{
  return a1;
}

{
  ot::Utils::HistoryTracker::List::List(a1);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::HistoryTracker,&ot::Utils::HistoryTracker::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::HistoryTracker,&ot::Utils::HistoryTracker::HandleTimer>::HandleTimer);
  return a1;
}

ot::NetworkData::MutableNetworkData *ot::NetworkData::MutableNetworkData::MutableNetworkData( ot::NetworkData::MutableNetworkData *this, ot::Instance *a2, unsigned __int8 *a3, char a4, char a5)
{
  return this;
}

{
  ot::NetworkData::MutableNetworkData *result;
  ot::NetworkData::NetworkData::NetworkData(this, a2, a3, a4);
  uint64_t result = this;
  *((_BYTE *)this + 9) = a5;
  return result;
}

uint64_t ot::Utils::HistoryTracker::RecordNetworkInfo(ot::Utils::HistoryTracker *this)
{
  uint64_t v11 = this;
  uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::AddNewEntry((uint64_t)this + 4);
  uint64_t v10 = result;
  if (result)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    unsigned __int8 Role = ot::Mle::Mle::GetRole(v2);
    *(_DWORD *)uint64_t v10 = ot::MapEnum<ot::Mle::DeviceRole>(Role);
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    *(_WORD *)(v10 + 6) = ot::Mle::Mle::GetRloc16(v4);
    uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t LeaderData = (ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v5);
    *(_DWORD *)(v10 + 8) = ot::Mle::LeaderData::GetPartitionId(LeaderData);
    unsigned int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    Deviceunsigned __int8 Mode = ot::Mle::Mle::GetDeviceMode(v7);
    return ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode, (_BYTE *)(v10 + 4));
  }

  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::AddNewEntry( uint64_t a1)
{
  return a1
       + 132
       + 12LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI27otHistoryTrackerNetworkInfoLt32EE11AddNewEntryEv(a1);
}

uint64_t ot::MapEnum<ot::Mle::DeviceRole>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_3Mle10DeviceRoleEEEKNS_10MappedEnumIT_E4TypeES4_(result);
}

uint64_t ot::Mle::Mle::GetRole(ot::Mle::Mle *this)
{
  return *((unsigned __int8 *)this + 41);
}

{
  return __ZNK2ot3Mle3Mle7GetRoleEv(this);
}

uint64_t ot::Mle::LeaderData::GetPartitionId(ot::Mle::LeaderData *this)
{
  return *(unsigned int *)this;
}

{
  return __ZNK2ot3Mle10LeaderData14GetPartitionIdEv(this);
}

uint64_t ot::Mle::Mle::GetDeviceMode(ot::Mle::Mle *this)
{
  return *((unsigned __int8 *)this + 312);
}

{
  return __ZNK2ot3Mle3Mle13GetDeviceModeEv(this);
}

uint64_t ot::Utils::HistoryTracker::RecordMessage( ot::InstanceLocator *a1, ot::Message *a2, ot::Mac::Address *a3, char a4)
{
  v31 = a1;
  v30 = a2;
  v29 = a3;
  char v28 = a4;
  uint64_t v27 = 0LL;
  uint64_t result = ot::Message::GetType(a2);
  if (!(_BYTE)result)
  {
    uint64_t result = ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v26, v30);
    if (!(_DWORD)result)
    {
      uint64_t result = ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v26);
      if ((result & 1) == 0) {
        goto LABEL_12;
      }
      unsigned __int16 v25 = 0;
      if (v28)
      {
        if (v28 == 1)
        {
          uint64_t result = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v26);
          unsigned __int16 v25 = result;
        }
      }

      else
      {
        uint64_t result = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v26);
        unsigned __int16 v25 = result;
      }

      if (v25 != 19788 && v25 != 61631)
      {
LABEL_12:
        if (v28)
        {
          if (v28 == 1)
          {
            uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry((uint64_t)a1 + 3332);
            uint64_t v27 = result;
          }
        }

        else
        {
          uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry((uint64_t)a1 + 1728);
          uint64_t v27 = result;
        }

        if (v27)
        {
          ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v26);
          Payloadunsigned __int16 Length = ot::Ip6::Header::GetPayloadLength(v5);
          *(_WORD *)uint64_t v27 = PayloadLength;
          if (ot::Mac::Address::IsShort(v29)) {
            __int16 Short = ot::Mac::Address::GetShort(v29);
          }
          else {
            __int16 Short = -2;
          }
          *(_WORD *)(v27 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = Short;
          SourceAddress = (_OWORD *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v26);
          *(_OWORD *)(v27 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *SourceAddress;
          __int16 SourcePort = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v26);
          *(_WORD *)(v27 + 20) = SourcePort;
          DestinationAddress = (_OWORD *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v26);
          *(_OWORD *)(v27 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *DestinationAddress;
          __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v26);
          *(_WORD *)(v27 + 38) = DestinationPort;
          __int16 Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v26);
          *(_WORD *)(v27 + 40) = Checksum;
          char IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v26);
          *(_BYTE *)(v27 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = IpProto;
          if (ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v26))
          {
            IcmpHeader = (ot::Ip6::Icmp::Header *)ot::Ip6::Headers::GetIcmpHeader((ot::Ip6::Headers *)v26);
            char Type = ot::Ip6::Icmp::Header::GetType(IcmpHeader);
          }

          else
          {
            char Type = 0;
          }

          *(_BYTE *)(v27 + 43) = Type;
          if (v28)
          {
            char Average = 127;
          }

          else
          {
            RssAverager = (ot::RssAverager *)ot::Message::GetRssAverager(v30);
            char Average = ot::RssAverager::GetAverage(RssAverager);
          }

          *(_BYTE *)(v27 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = Average;
          char IsLinkSecurityEnabled = ot::Message::IsLinkSecurityEnabled(v30);
          *(_BYTE *)(v27 + 45) = *(_BYTE *)(v27 + 45) & 0xFE | IsLinkSecurityEnabled & 1;
          if (v28 == 1) {
            char TxSuccess = ot::Message::GetTxSuccess(v30);
          }
          else {
            char TxSuccess = 1;
          }
          *(_BYTE *)(v27 + 45) = *(_BYTE *)(v27 + 45) & 0xFD | (2 * (TxSuccess & 1));
          char Priority = ot::Message::GetPriority(v30);
          *(_BYTE *)(v27 + 45) = *(_BYTE *)(v27 + 45) & 0xF3 | (4 * (Priority & 3));
          if (ot::Mac::Address::IsExtended(v29))
          {
            v17 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
            uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v17, v29, 5);
            if (Neighbor)
            {
              __int16 Rloc16 = ot::Neighbor::GetRloc16(Neighbor);
              *(_WORD *)(v27 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = Rloc16;
            }
          }

          uint64_t result = ot::Message::IsRadioTypeSet(v30);
          if ((result & 1) != 0)
          {
            uint64_t result = ot::Message::GetRadioType(v30);
            if ((_BYTE)result)
            {
            }

            else
            {
              *(_BYTE *)(v27 + 45) = *(_BYTE *)(v27 + 45) & 0xEF | 0x10;
            }
          }

          else
          {
            *(_BYTE *)(v27 + 45) = *(_BYTE *)(v27 + 45) & 0xEF | 0x10;
            *(_BYTE *)(v27 + 45) = *(_BYTE *)(v27 + 45) & 0xDF | 0x20;
          }
        }
      }
    }
  }

  return result;
}

BOOL ot::Ip6::Headers::IsUdp(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 17;
}

{
  return __ZNK2ot3Ip67Headers5IsUdpEv(this);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry( uint64_t a1)
{
  return a1
       + 132
       + 46LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

  ;
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI27otHistoryTrackerMessageInfoLt32EE11AddNewEntryEv(a1);
}

uint64_t ot::Ip6::Header::GetPayloadLength(ot::Ip6::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot3Ip66Header16GetPayloadLengthEv(this);
}

BOOL ot::Mac::Address::IsShort(ot::Mac::Address *this)
{
  return *((_BYTE *)this + 8) == 1;
}

{
  return __ZNK2ot3Mac7Address7IsShortEv(this);
}

uint64_t ot::Mac::Address::GetShort(ot::Mac::Address *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot3Mac7Address8GetShortEv(this);
}

uint64_t ot::Ip6::Headers::GetSourceAddress(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetSource(this);
}

{
  return __ZNK2ot3Ip67Headers16GetSourceAddressEv(this);
}

uint64_t ot::Ip6::Headers::GetDestinationAddress(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetDestination(this);
}

{
  return __ZNK2ot3Ip67Headers21GetDestinationAddressEv(this);
}

uint64_t ot::Ip6::Headers::GetIpProto(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetNextHeader(this);
}

{
  return __ZNK2ot3Ip67Headers10GetIpProtoEv(this);
}

BOOL ot::Ip6::Headers::IsIcmp6(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 58;
}

{
  return __ZNK2ot3Ip67Headers7IsIcmp6Ev(this);
}

uint64_t ot::Ip6::Headers::GetIcmpHeader(ot::Ip6::Headers *this)
{
  return (uint64_t)this + 40;
}

{
  return __ZNK2ot3Ip67Headers13GetIcmpHeaderEv(this);
}

uint64_t ot::Ip6::Icmp::Header::GetType(ot::Ip6::Icmp::Header *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Ip64Icmp6Header7GetTypeEv(this);
}

uint64_t ot::Message::GetRssAverager(ot::Message *this)
{
  return ot::Buffer::GetMetadata(this) + 56;
}

{
  return __ZNK2ot7Message14GetRssAveragerEv(this);
}

uint64_t ot::Message::GetTxSuccess(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 12) & 1;
}

{
  return __ZNK2ot7Message12GetTxSuccessEv(this);
}

uint64_t ot::Message::GetPriority(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 9) & 3;
}

{
  return __ZNK2ot7Message11GetPriorityEv(this);
}

BOOL ot::Mac::Address::IsExtended(ot::Mac::Address *this)
{
  return *((_BYTE *)this + 8) == 2;
}

{
  return __ZNK2ot3Mac7Address10IsExtendedEv(this);
}

uint64_t ot::Message::IsRadioTypeSet(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 18) & 1;
}

{
  return __ZNK2ot7Message14IsRadioTypeSetEv(this);
}

uint64_t ot::Message::GetRadioType(ot::Message *this)
{
  return HIWORD(*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68)) & 3;
}

{
  return __ZNK2ot7Message12GetRadioTypeEv(this);
}

uint64_t ot::Utils::HistoryTracker::RecordNeighborEvent(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::AddNewEntry(a1 + 4936);
  if (result)
  {
    if (a2 <= 2u)
    {
      *(void *)uint64_t result = *(void *)(a3 + 8);
      *(_WORD *)(result + 8) = *(_WORD *)(a3 + 32);
      *(_BYTE *)(result + 10) = *(_BYTE *)(a3 + 38);
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xFB | (4 * (*(_BYTE *)(a3 + 60) & 1));
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xF7 | (8 * ((*(_BYTE *)(a3 + 60) & 2) != 0));
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xEF | (16 * ((*(_BYTE *)(a3 + 60) & 4) != 0));
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xDF | 0x20;
    }

    else if (a2 == 4 || a2 == 3)
    {
      *(void *)uint64_t result = *(void *)(a3 + 8);
      *(_WORD *)(result + 8) = *(_WORD *)(a3 + 24);
      *(_BYTE *)(result + 10) = *(_BYTE *)(a3 + 52);
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xFB | (4 * (*(_BYTE *)(a3 + 62) & 1));
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xF7 | (8 * ((*(_BYTE *)(a3 + 62) & 2) != 0));
      *(_BYTE *)(result + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_BYTE *)(result + 11) & 0xEF | (16 * ((*(_BYTE *)(a3 + 62) & 4) != 0));
      *(_BYTE *)(result + 11) &= ~0x20u;
    }

    if (a2 <= 4uLL) {
      __asm { BR              X8 }
    }
  }

  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::AddNewEntry( uint64_t a1)
{
  return a1
       + 260
       + 12LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x40u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI28otHistoryTrackerNeighborInfoLt64EE11AddNewEntryEv(a1);
}

uint64_t ot::Utils::HistoryTracker::RecordAddressEvent( uint64_t a1, char a2, ot::Ip6::Netif::UnicastAddress *a3)
{
  char v7 = a2 & 1;
  uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::AddNewEntry(a1 + 520);
  uint64_t v5 = result;
  if (result)
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress(a3);
    *(_OWORD *)uint64_t v5 = *v4;
    *(_BYTE *)(v5 + 16) = ot::Ip6::Netif::UnicastAddress::GetPrefixLength(a3);
    *(_BYTE *)(v5 + 17) = ot::Ip6::Netif::UnicastAddress::GetOrigin(a3);
    *(_DWORD *)(v5 + 20) = (v7 & 1) != 1;
    uint64_t result = ot::Ip6::Netif::UnicastAddress::GetScope(a3);
    *(_BYTE *)(v5 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(_BYTE *)(v5 + 24) & 0xF0 | result & 0xF;
    *(_BYTE *)(v5 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(_BYTE *)(v5 + 24) & 0xEF | (16 * (*((_BYTE *)a3 + 18) & 1));
    *(_BYTE *)(v5 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(_BYTE *)(v5 + 24) & 0xDF | (32 * ((*((_BYTE *)a3 + 18) & 2) != 0));
    *(_BYTE *)(v5 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(_BYTE *)(v5 + 24) & 0xBF | (*((_BYTE *)a3 + 18) >> 7 << 6);
  }

  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::AddNewEntry( uint64_t a1)
{
  return a1
       + 84
       + 28LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x14u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI34otHistoryTrackerUnicastAddressInfoLt20EE11AddNewEntryEv(a1);
}

void ot::Ip6::Netif::UnicastAddress::GetAddress(ot::Ip6::Netif::UnicastAddress *this)
{
}

{
  ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  __ZN2ot3Ip65Netif14UnicastAddress10GetAddressEv(this);
}

{
  __ZNK2ot3Ip65Netif14UnicastAddress10GetAddressEv(this);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetPrefixLength(ot::Ip6::Netif::UnicastAddress *this)
{
  return *((unsigned __int8 *)this + 16);
}

{
  return __ZNK2ot3Ip65Netif14UnicastAddress15GetPrefixLengthEv(this);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetOrigin(ot::Ip6::Netif::UnicastAddress *this)
{
  return *((unsigned __int8 *)this + 17);
}

{
  return __ZNK2ot3Ip65Netif14UnicastAddress9GetOriginEv(this);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetScope(ot::Ip6::Netif::UnicastAddress *this)
{
  if ((*((_BYTE *)this + 18) & 4) != 0)
  {
    return (*((_BYTE *)this + 18) >> 3) & 0xF;
  }

  else
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress(this);
    return ot::Ip6::Address::GetScope(v1);
  }

{
  return __ZNK2ot3Ip65Netif14UnicastAddress8GetScopeEv(this);
}

void ot::Utils::HistoryTracker::RecordAddressEvent( uint64_t a1, char a2, ot::Ip6::Netif::MulticastAddress *a3, char a4)
{
  char v8 = a2 & 1;
  uint64_t v5 = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::AddNewEntry(a1 + 1164);
  if (v5)
  {
    ot::Ip6::Netif::MulticastAddress::GetAddress(a3);
    *(_OWORD *)uint64_t v5 = *v4;
    *(_BYTE *)(v5 + 16) = a4;
    *(_DWORD *)(v5 + 20) = (v8 & 1) != 1;
  }

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::AddNewEntry( uint64_t a1)
{
  return a1
       + 84
       + 24LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x14u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI36otHistoryTrackerMulticastAddressInfoLt20EE11AddNewEntryEv(a1);
}

void ot::Ip6::Netif::MulticastAddress::GetAddress(ot::Ip6::Netif::MulticastAddress *this)
{
}

{
  ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  __ZN2ot3Ip65Netif16MulticastAddress10GetAddressEv(this);
}

{
  __ZNK2ot3Ip65Netif16MulticastAddress10GetAddressEv(this);
}

uint64_t ot::Utils::HistoryTracker::RecordRouterTableChange(uint64_t this)
{
  uint64_t v14 = this;
  uint64_t v6 = (ot::InstanceLocator *)this;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    char v9 = (char *)v6 + 2 * i + 9840;
    char v10 = v10 & 3 | (4 * (i & 0x3F));
    uint64_t v1 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v6);
    this = ot::RouterTable::IsAllocated(v1, i);
    if ((this & 1) != 0)
    {
      uint64_t v5 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v6);
      unsigned __int16 v2 = ot::Mle::Rloc16FromRouterId((ot::Mle *)i);
      ot::RouterTable::GetNextHopAndPathCost(v5, v2, &v8, &v7);
      if (v8 == 65534)
      {
        this = 63LL;
        char v4 = 63;
      }

      else
      {
        this = ot::Mle::RouterIdFromRloc16((ot::Mle *)v8);
        char v4 = this;
      }

      char v11 = v4;
      if (v7 >= 0x10u) {
        unsigned __int8 v3 = 0;
      }
      else {
        unsigned __int8 v3 = v7;
      }
      unsigned __int8 v12 = v12 & 0xF | (16 * (v3 & 0xF));
      if ((*v9 & 1) == 0)
      {
        v10 &= 0xFCu;
        v12 &= 0xF0u;
LABEL_18:
        this = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry( (uint64_t)v6 + 5964,  (uint64_t)&v10);
        *char v9 = *v9 & 0xFE | 1;
        *char v9 = *v9 & 0x81 | (2 * (v11 & 0x3F));
        v9[1] = v9[1] & 0xF0 | (v12 >> 4);
        continue;
      }

      if (v11 != ((*v9 >> 1) & 0x3F))
      {
        char v10 = v10 & 0xFC | 2;
        unsigned __int8 v12 = v12 & 0xF0 | v9[1] & 0xF;
        goto LABEL_18;
      }

      if (v11 != 63 && (v9[1] & 0xF) != v12 >> 4)
      {
        char v10 = v10 & 0xFC | 3;
        unsigned __int8 v12 = v12 & 0xF0 | v9[1] & 0xF;
        goto LABEL_18;
      }
    }

    else if ((*v9 & 1) != 0)
    {
      char v10 = v10 & 0xFC | 1;
      char v11 = 63;
      v12 &= 0xF0u;
      v12 &= 0xFu;
      this = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry( (uint64_t)v6 + 5964,  (uint64_t)&v10);
      *v9 &= ~1u;
    }
  }

  return this;
}

BOOL ot::RouterTable::IsAllocated(ot::RouterTable *this, unsigned __int8 a2)
{
  return ot::RouterTable::RouterIdMap::IsAllocated((ot::RouterTable *)((char *)this + 7968), a2);
}

{
  return __ZNK2ot11RouterTable11IsAllocatedEh(this, a2);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry( uint64_t a1, uint64_t a2)
{
  uint64_t result = ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x100u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
  uint64_t v3 = a1 + 1028 + 3LL * (unsigned __int16)result;
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  *(_BYTE *)(v3 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(a2 + 2);
  return result;
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI26otHistoryTrackerRouterInfoLt256EE11AddNewEntryERKS3_(a1, a2);
}

uint64_t ot::Utils::HistoryTracker::RecordNetworkDataChange(const unsigned __int8 **this)
{
  char v11 = this;
  unsigned int v10 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix( this + 1246,  &v10,  (ot::NetworkData::OnMeshPrefixConfig *)&v9))
  {
    uint64_t v1 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if ((ot::NetworkData::NetworkData::ContainsOnMeshPrefix(v1, (const ot::NetworkData::OnMeshPrefixConfig *)&v9) & 1) == 0) {
      ot::Utils::HistoryTracker::RecordOnMeshPrefixEvent((uint64_t)this, 1, &v9);
    }
  }

  unsigned int v10 = 0;
  while (1)
  {
    unsigned __int16 v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v2,  &v10,  (ot::NetworkData::OnMeshPrefixConfig *)&v9)) {
      break;
    }
    if ((ot::NetworkData::NetworkData::ContainsOnMeshPrefix( this + 1246,  (const ot::NetworkData::OnMeshPrefixConfig *)&v9) & 1) == 0) {
      ot::Utils::HistoryTracker::RecordOnMeshPrefixEvent((uint64_t)this, 0, &v9);
    }
  }

  unsigned int v10 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute( this + 1246,  &v10,  (ot::NetworkData::ExternalRouteConfig *)&v8))
  {
    uint64_t v3 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if ((ot::NetworkData::NetworkData::ContainsExternalRoute(v3, (const ot::NetworkData::ExternalRouteConfig *)&v8) & 1) == 0) {
      ot::Utils::HistoryTracker::RecordExternalRouteEvent((uint64_t)this, 1, &v8);
    }
  }

  unsigned int v10 = 0;
  while (1)
  {
    char v4 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if (ot::NetworkData::NetworkData::GetNextExternalRoute( v4,  &v10,  (ot::NetworkData::ExternalRouteConfig *)&v8)) {
      break;
    }
    if ((ot::NetworkData::NetworkData::ContainsExternalRoute( this + 1246,  (const ot::NetworkData::ExternalRouteConfig *)&v8) & 1) == 0) {
      ot::Utils::HistoryTracker::RecordExternalRouteEvent((uint64_t)this, 0, &v8);
    }
  }

  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
  uint64_t result = ot::NetworkData::NetworkData::CopyNetworkData(v5, 0, (ot::NetworkData::MutableNetworkData *)(this + 1246));
  if ((_DWORD)result) {
    __assert_rtn("RecordNetworkDataChange", "history_tracker.cpp", 407, "false");
  }
  return result;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Leader>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11NetworkData6LeaderEEERT_v(a1);
}

__n128 ot::Utils::HistoryTracker::RecordOnMeshPrefixEvent(uint64_t a1, int a2, __n128 *a3)
{
  uint64_t v4 = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::AddNewEntry(a1 + 7760);
  if (v4)
  {
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    *(_DWORD *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = a2;
  }

  return result;
}

__n128 ot::Utils::HistoryTracker::RecordExternalRouteEvent(uint64_t a1, int a2, __n128 *a3)
{
  uint64_t v4 = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::AddNewEntry(a1 + 8788);
  if (v4)
  {
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    *(_DWORD *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = a2;
  }

  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::AddNewEntry( uint64_t a1)
{
  return a1
       + 132
       + 28LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI32otHistoryTrackerOnMeshPrefixInfoLt32EE11AddNewEntryEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::AddNewEntry( uint64_t a1)
{
  return a1
       + 132
       + 28LL
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI33otHistoryTrackerExternalRouteInfoLt32EE11AddNewEntryEv(a1);
}

uint64_t ot::Utils::HistoryTracker::HandleNotifierEvents(ot::Utils::HistoryTracker *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v4, 228LL)) {
    ot::Utils::HistoryTracker::RecordNetworkInfo(a1);
  }
  uint64_t result = ot::Events::Contains(&v4, 512LL);
  if ((result & 1) != 0) {
    return ot::Utils::HistoryTracker::RecordNetworkDataChange((const unsigned __int8 **)a1);
  }
  return result;
}

BOOL ot::Events::Contains(void *a1, uint64_t a2)
{
  return (*a1 & a2) != 0;
}

{
  return __ZNK2ot6Events8ContainsENS_5EventE(a1, a2);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI27otHistoryTrackerNetworkInfoLt32EE17UpdateAgedEntriesEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x14u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI34otHistoryTrackerUnicastAddressInfoLt20EE17UpdateAgedEntriesEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x14u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI36otHistoryTrackerMulticastAddressInfoLt20EE17UpdateAgedEntriesEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI27otHistoryTrackerMessageInfoLt32EE17UpdateAgedEntriesEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x40u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI28otHistoryTrackerNeighborInfoLt64EE17UpdateAgedEntriesEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI32otHistoryTrackerOnMeshPrefixInfoLt32EE17UpdateAgedEntriesEv(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::UpdateAgedEntries( uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return __ZN2ot5Utils14HistoryTracker9EntryListI33otHistoryTrackerExternalRouteInfoLt32EE17UpdateAgedEntriesEv(a1);
}

ot::StringWriter *ot::Utils::HistoryTracker::EntryAgeToString( ot::Utils::HistoryTracker *this, char *a2, char *a3)
{
  unsigned int v9 = this;
  __n128 v8 = a2;
  v7[11] = (_WORD)a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v7, a2, (__int16)a3);
  if (v9 >= 0xFC579C00) {
    return ot::StringWriter::Append((ot::StringWriter *)v7, "more than %u days", 49);
  }
  unsigned int v6 = v9 / 0x5265C00;
  if (v9 / 0x5265C00)
  {
    uint64_t v4 = ot::ToUlong(v6);
    uint64_t v5 = "";
    if (v6 != 1) {
      uint64_t v5 = "s";
    }
    ot::StringWriter::Append((ot::StringWriter *)v7, "%lu day%s ", v4, v5);
    v9 -= 86400000 * v6;
  }

  return ot::StringWriter::Append( (ot::StringWriter *)v7,  "%02u:%02u:%02u.%03u",  v9 / 0x36EE80,  v9 % 0x36EE80 / 0xEA60,  v9 % 0xEA60 / 0x3E8,  v9 % 0x3E8);
}

_DWORD *ot::Utils::HistoryTracker::Timestamp::SetToNow(ot::Utils::HistoryTracker::Timestamp *this)
{
  *(_DWORD *)this = ot::TimerMilli::GetNow(this);
  uint64_t result = (_DWORD *)ot::Time::GetValue(this);
  if (!(_DWORD)result)
  {
    int Value = ot::Time::GetValue(this);
    return ot::Time::SetValue(this, Value - 1);
  }

  return result;
}

uint64_t ot::Time::GetValue(ot::Time *this)
{
  return *(unsigned int *)this;
}

{
  return __ZNK2ot4Time8GetValueEv(this);
}

uint64_t ot::Utils::HistoryTracker::Timestamp::GetDurationTill( ot::Utils::HistoryTracker::Timestamp *a1, int a2)
{
  int v6 = a2;
  if (ot::Utils::HistoryTracker::Timestamp::IsDistantPast(a1))
  {
    return -61367296;
  }

  else
  {
    unsigned int v2 = ot::Time::operator-(&v6, a1);
    return ot::Min<unsigned int>(v2, 0xFC579C00);
  }

BOOL ot::Utils::HistoryTracker::Timestamp::IsDistantPast(ot::Utils::HistoryTracker::Timestamp *this)
{
  return ot::Time::GetValue(this) == 0;
}

{
  return __ZNK2ot5Utils14HistoryTracker9Timestamp13IsDistantPastEv(this);
}

uint64_t ot::Time::operator-(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

{
  return __ZNK2ot4TimemiERKS0_(a1, a2);
}

_WORD *ot::Utils::HistoryTracker::List::List(_WORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

ot::Utils::HistoryTracker::List *ot::Utils::HistoryTracker::List::List( ot::Utils::HistoryTracker::List *this)
{
  return this;
}

_WORD *ot::Utils::HistoryTracker::List::Clear(_WORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t ot::Utils::HistoryTracker::List::Add( ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, ot::Utils::HistoryTracker::Timestamp *a3)
{
  if (*(_WORD *)this) {
    __int16 v4 = *(_WORD *)this - 1;
  }
  else {
    __int16 v4 = a2 - 1;
  }
  *(_WORD *)this = v4;
  *((_WORD *)this + 1) += *((unsigned __int16 *)this + 1) != a2;
  ot::Utils::HistoryTracker::Timestamp::SetToNow((ot::Utils::HistoryTracker::Timestamp *)((char *)a3
                                                                                        + 4 * *(unsigned __int16 *)this));
  return *(unsigned __int16 *)this;
}

uint64_t ot::Utils::HistoryTracker::List::Iterate( ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, const ot::Utils::HistoryTracker::Timestamp *a3, ot::Utils::HistoryTracker::Iterator *a4, unsigned __int16 *a5, unsigned int *a6)
{
  unsigned int v11 = 0;
  if (*((unsigned __int16 *)this + 1) > (int)(unsigned __int16)ot::Utils::HistoryTracker::Iterator::GetEntryNumber(a4))
  {
    unsigned __int16 EntryNumber = ot::Utils::HistoryTracker::Iterator::GetEntryNumber(a4);
    *a5 = ot::Utils::HistoryTracker::List::MapEntryNumberToListIndex(this, EntryNumber, a2);
    __n128 v8 = (const ot::Utils::HistoryTracker::Timestamp *)((char *)a3 + 4 * *a5);
    int InitTime = ot::Utils::HistoryTracker::Iterator::GetInitTime(a4);
    *a6 = ot::Utils::HistoryTracker::Timestamp::GetDurationTill(v8, InitTime);
    ot::Utils::HistoryTracker::Iterator::IncrementEntryNumber((uint64_t)a4);
  }

  else
  {
    return 23;
  }

  return v11;
}

uint64_t ot::Utils::HistoryTracker::Iterator::GetEntryNumber(ot::Utils::HistoryTracker::Iterator *this)
{
  return *((unsigned __int16 *)this + 2);
}

{
  return __ZNK2ot5Utils14HistoryTracker8Iterator14GetEntryNumberEv(this);
}

uint64_t ot::Utils::HistoryTracker::List::MapEntryNumberToListIndex( ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v5 = a2 + *(unsigned __int16 *)this;
  if (v5 < a3) {
    unsigned __int16 v4 = 0;
  }
  else {
    unsigned __int16 v4 = a3;
  }
  return (unsigned __int16)(v5 - v4);
}

uint64_t ot::Utils::HistoryTracker::Iterator::GetInitTime(ot::Utils::HistoryTracker::Iterator *this)
{
  return v2;
}

{
  return __ZNK2ot5Utils14HistoryTracker8Iterator11GetInitTimeEv(this);
}

uint64_t ot::Utils::HistoryTracker::Iterator::IncrementEntryNumber(uint64_t this)
{
  return this;
}

{
  return __ZN2ot5Utils14HistoryTracker8Iterator20IncrementEntryNumberEv(this);
}

uint64_t ot::Utils::HistoryTracker::List::UpdateAgedEntries( ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, ot::Utils::HistoryTracker::Timestamp *a3)
{
  uint64_t result = ot::TimerMilli::GetNow(this);
  int v7 = result;
  for (unsigned __int16 i = *((_WORD *)this + 1) - 1; i < (int)*((unsigned __int16 *)this + 1); --i)
  {
    unsigned __int16 v5 = ot::Utils::HistoryTracker::List::MapEntryNumberToListIndex(this, i, a2);
    uint64_t result = ot::Utils::HistoryTracker::Timestamp::GetDurationTill( (ot::Utils::HistoryTracker::Timestamp *)((char *)a3 + 4 * v5),  v7);
    uint64_t result = (uint64_t)ot::Utils::HistoryTracker::Timestamp::MarkAsDistantPast((ot::Utils::HistoryTracker::Timestamp *)((char *)a3 + 4 * v5));
  }

  return result;
}

_DWORD *ot::Utils::HistoryTracker::Timestamp::MarkAsDistantPast(ot::Utils::HistoryTracker::Timestamp *this)
{
  return ot::Time::SetValue(this, 0);
}

{
  return __ZN2ot5Utils14HistoryTracker9Timestamp17MarkAsDistantPastEv(this);
}

ot::NetworkData::NetworkData *ot::NetworkData::NetworkData::NetworkData( ot::NetworkData::NetworkData *this, ot::Instance *a2, const unsigned __int8 *a3, char a4)
{
  uint64_t result = this;
  *(void *)this = a3;
  *((_BYTE *)this + 8) = a4;
  return result;
}

{
  ot::NetworkData::NetworkData::NetworkData(this, a2, a3, a4);
  return this;
}

uint64_t ot::Ip6::Header::GetSource(ot::Ip6::Header *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return __ZN2ot3Ip66Header9GetSourceEv(this);
}

{
  return __ZNK2ot3Ip66Header9GetSourceEv(this);
}

uint64_t ot::Ip6::Header::GetDestination(ot::Ip6::Header *this)
{
  return (uint64_t)this + 24;
}

{
  return (uint64_t)this + 24;
}

{
  return __ZN2ot3Ip66Header14GetDestinationEv(this);
}

{
  return __ZNK2ot3Ip66Header14GetDestinationEv(this);
}

uint64_t ot::Ip6::Header::GetNextHeader(ot::Ip6::Header *this)
{
  return *((unsigned __int8 *)this + 6);
}

{
  return __ZNK2ot3Ip66Header13GetNextHeaderEv(this);
}

BOOL ot::RouterTable::RouterIdMap::IsAllocated(ot::RouterTable::RouterIdMap *this, unsigned __int8 a2)
{
  return *((char *)this + a2) < 0;
}

{
  return __ZNK2ot11RouterTable11RouterIdMap11IsAllocatedEh(this, a2);
}

uint64_t ot::TimerMilliIn<ot::Utils::HistoryTracker,&ot::Utils::HistoryTracker::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  unsigned int v2 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
  return ot::Utils::HistoryTracker::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::HistoryTracker>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5Utils14HistoryTrackerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::Utils::HistoryTracker>(uint64_t a1)
{
  return a1 + 166600;
}

{
  return __ZN2ot8Instance3GetINS_5Utils14HistoryTrackerEEERT_v(a1);
}

uint64_t otPingSenderPing(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v5 = (ot::Utils::PingSender *)ot::Instance::Get<ot::Utils::PingSender>(v2);
  ot::AsCoreType<otPingSenderConfig>(a2);
  return ot::Utils::PingSender::Ping(v5, v3);
}

uint64_t ot::Instance::Get<ot::Utils::PingSender>(uint64_t a1)
{
  return a1 + 166360;
}

{
  return __ZN2ot8Instance3GetINS_5Utils10PingSenderEEERT_v(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otPingSenderConfig>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otPingSenderStop(uint64_t a1)
{
  uint64_t v2 = (ot::Utils::PingSender *)ot::Instance::Get<ot::Utils::PingSender>(v1);
  return ot::Utils::PingSender::Stop(v2);
}

uint64_t otServerGetNetDataLocal(uint64_t a1, char a2, unsigned __int8 *a3, char *a4)
{
  char v9 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  unsigned __int16 v5 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkData::Local>(v4);
  return ot::NetworkData::NetworkData::CopyNetworkData(v5, (v9 & 1) != 0, a3, a4);
}

uint64_t otServerAddService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v6, a2 + 9, *(_BYTE *)(a2 + 8));
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v5, v7 + 264, *(_BYTE *)(v7 + 263));
  ot::AsCoreType<otInstance>(v8);
  uint64_t v3 = (ot::NetworkData::MutableNetworkData *)ot::Instance::Get<ot::NetworkData::Local>(v2);
  return ot::NetworkData::Local::AddService(v3, *(_DWORD *)(v7 + 4), (uint64_t)v6, *(_BYTE *)(v7 + 262) & 1, (uint64_t)v5);
}

uint64_t ot::Data<(ot::DataLengthType)0>::Init(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

{
  return __ZN2ot4DataILNS_14DataLengthTypeE0EE4InitEPKvh(result, a2, a3);
}

uint64_t otServerRemoveService(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v10 = a1;
  int v9 = a2;
  uint64_t v8 = a3;
  v7[23] = a4;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v7, a3, a4);
  ot::AsCoreType<otInstance>(v10);
  unsigned __int16 v5 = (ot::NetworkData::MutableNetworkData *)ot::Instance::Get<ot::NetworkData::Local>(v4);
  return ot::NetworkData::Local::RemoveService(v5, v9, (uint64_t)v7);
}

uint64_t otServerGetNextService(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    ot::AsCoreType<otInstance>(a1);
    int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Local>(v3);
    ot::AsCoreType<otServiceConfig>(a3);
    return ot::NetworkData::NetworkData::GetNextService(v6, a2, v4);
  }

  else
  {
    return 7;
  }

uint64_t otServerRegister(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkData::Notifier *)ot::Instance::Get<ot::NetworkData::Notifier>(v1);
  ot::NetworkData::Notifier::HandleServerDataUpdated(v2);
  return 0LL;
}

void *ot::Mle::RouteTlv::Init(ot::Mle::RouteTlv *this)
{
  return memset((char *)this + 11, 0, 0x3FuLL);
}

_BYTE *ot::Mle::Tlv::SetType(_BYTE *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return __ZN2ot3Mle3Tlv7SetTypeENS1_4TypeE(a1, a2);
}

uint64_t ot::Tlv::SetLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = a2;
  return this;
}

{
  return __ZN2ot3Tlv9SetLengthEh(this, a2);
}

void *ot::Mle::RouterIdSet::Clear(void *this)
{
  *this = 0LL;
  return this;
}

{
  return __ZN2ot3Mle11RouterIdSet5ClearEv(this);
}

BOOL ot::Mle::RouteTlv::IsValid(ot::Mle::RouteTlv *this)
{
  BOOL v4 = 0;
  if (ot::Tlv::GetLength(this) >= 9uLL)
  {
    unsigned __int8 NumberOfAllocatedIds = ot::Mle::RouterIdSet::GetNumberOfAllocatedIds((ot::Mle::RouteTlv *)((char *)this + 3));
    if (NumberOfAllocatedIds <= 0x20u) {
      return NumberOfAllocatedIds <= (int)ot::Mle::RouteTlv::GetRouteDataLength(this);
    }
  }

  return v4;
}

uint64_t ot::Tlv::GetLength(ot::Tlv *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot3Tlv9GetLengthEv(this);
}

uint64_t ot::Mle::RouteTlv::GetRouteDataLength(ot::Mle::RouteTlv *this)
{
  return (ot::Tlv::GetLength(this) - 9);
}

{
  return __ZNK2ot3Mle8RouteTlv18GetRouteDataLengthEv(this);
}

void ot::Mle::ConnectivityTlv::IncrementLinkQuality(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 3uLL) {
    __asm { BR              X8 }
  }

uint64_t ot::Mle::ConnectivityTlv::GetParentPriority(ot::Mle::ConnectivityTlv *this)
{
  return (char)ot::Preference::From2BitUint((ot::Preference *)((int)*((unsigned __int8 *)this + 2) >> 6));
}

uint64_t ot::Mle::ConnectivityTlv::SetParentPriority(ot::Mle::ConnectivityTlv *this, char a2)
{
  uint64_t result = ot::Preference::To2BitUint((ot::Preference *)a2);
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = (_BYTE)result << 6;
  return result;
}

_BYTE *ot::Tlv::SetType(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

{
  return __ZN2ot3Tlv7SetTypeEh(this, a2);
}

uint64_t otTaskletsProcess(uint64_t a1)
{
  uint64_t result = otInstanceIsInitialized(a1);
  if ((result & 1) != 0)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::Tasklet ***)ot::Instance::Get<ot::Tasklet::Scheduler>(v2);
    return (uint64_t)ot::Tasklet::Scheduler::ProcessQueuedTasklets(v3);
  }

  return result;
}

uint64_t ot::Instance::Get<ot::Tasklet::Scheduler>(uint64_t a1)
{
  return a1 + 8;
}

{
  return __ZN2ot8Instance3GetINS_7Tasklet9SchedulerEEERT_v(a1);
}

BOOL otTaskletsArePending(uint64_t a1)
{
  BOOL v4 = 0;
  if ((otInstanceIsInitialized(a1) & 1) != 0)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v2 = (ot::Tasklet::Scheduler *)ot::Instance::Get<ot::Tasklet::Scheduler>(v1);
    return ot::Tasklet::Scheduler::AreTaskletsPending(v2);
  }

  return v4;
}

BOOL ot::Tasklet::Scheduler::AreTaskletsPending(ot::Tasklet::Scheduler *this)
{
  return *(void *)this != 0LL;
}

{
  return __ZNK2ot7Tasklet9Scheduler18AreTaskletsPendingEv(this);
}

uint64_t otThreadGetChildTimeout(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetTimeout(v2);
}

uint64_t ot::Mle::Mle::GetTimeout(ot::Mle::Mle *this)
{
  return *((unsigned int *)this + 196);
}

{
  return __ZNK2ot3Mle3Mle10GetTimeoutEv(this);
}

void otThreadSetChildTimeout(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::Mle::SetTimeout(v3, a2);
}

void otThreadGetExtendedPanId(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::ExtendedPanIdManager *)ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(v1);
  ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v2);
}

uint64_t ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(uint64_t a1)
{
  return a1 + 87960;
}

  ;
}

{
  return __ZN2ot8Instance3GetINS_7MeshCoP20ExtendedPanIdManagerEEERT_v(a1);
}

uint64_t otThreadSetExtendedPanId(uint64_t a1, uint64_t a2)
{
  unsigned int v11 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v10 = v2;
  ot::AsCoreType<otExtendedPanId>(a2);
  int v9 = v3;
  BOOL v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v10);
  if (ot::Mle::Mle::IsDisabled(v4))
  {
    unsigned __int16 v5 = (ot::MeshCoP::ExtendedPanIdManager *)ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(v10);
    ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(v5, v9);
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v10);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v7 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v10);
    ot::MeshCoP::PendingDatasetManager::Clear(v7);
  }

  else
  {
    return 13;
  }

  return v11;
}

uint64_t otThreadGetLeaderRloc(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Mle::Mle::GetLeaderAddress(v5, v3);
}

uint64_t otThreadGetLinkMode(uint64_t a1)
{
  uint64_t v5 = a1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  Deviceunsigned __int8 Mode = ot::Mle::Mle::GetDeviceMode(v2);
  ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode, &v6);
  return v6;
}

uint64_t otThreadSetLinkMode(uint64_t a1, char a2)
{
  char v7 = a2;
  uint64_t v6 = a1;
  ot::AsCoreType<otInstance>(a1);
  BOOL v4 = (_BYTE *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::DeviceMode::DeviceMode(&v5, v7);
  return ot::Mle::Mle::SetDeviceMode(v4, v5);
}

_BYTE *ot::Mle::DeviceMode::DeviceMode(_BYTE *a1, char a2)
{
  return a1;
}

{
  char v4;
  BOOL v4 = a2;
  ot::Mle::DeviceMode::Set(a1, &v4);
  return a1;
}

double otThreadGetNetworkKey(uint64_t a1, uint64_t a2)
{
  char v5 = (__n128 *)ot::Instance::Get<ot::KeyManager>(v2);
  ot::AsCoreType<otNetworkKey>(a2);
  *(void *)&double result = ot::KeyManager::GetNetworkKey(v5, v3).n128_u64[0];
  return result;
}

uint64_t ot::Instance::Get<ot::KeyManager>(uint64_t a1)
{
  return a1 + 88008;
}

{
  return __ZN2ot8Instance3GetINS_10KeyManagerEEERT_v(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetworkKey>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otThreadSetNetworkKey(uint64_t a1, uint64_t a2)
{
  unsigned int v10 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v9 = v2;
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v8 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v9);
    ot::AsCoreType<otNetworkKey>(a2);
    ot::KeyManager::SetNetworkKey(v8, v4);
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v9);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v6 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v9);
    ot::MeshCoP::PendingDatasetManager::Clear(v6);
  }

  else
  {
    return 13;
  }

  return v10;
}

void otThreadGetRloc(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetMeshLocal16(v2);
}

void ot::Mle::Mle::GetMeshLocal16(ot::Mle::Mle *this)
{
}

{
  __ZNK2ot3Mle3Mle14GetMeshLocal16Ev(this);
}

void otThreadGetMeshLocalEid(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetMeshLocal64(v2);
}

void ot::Mle::Mle::GetMeshLocal64(ot::Mle::Mle *this)
{
}

{
  __ZNK2ot3Mle3Mle14GetMeshLocal64Ev(this);
}

void otThreadGetMeshLocalPrefix(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetMeshLocalPrefix(v2);
}

void ot::Mle::Mle::GetMeshLocalPrefix(ot::Mle::Mle *this)
{
}

{
  __ZNK2ot3Mle3Mle18GetMeshLocalPrefixEv(this);
}

uint64_t otThreadSetMeshLocalPrefix(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    ot::AsCoreType<otInstance>(a1);
    unsigned int v11 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v4);
    ot::AsCoreType<otIp6NetworkPrefix>(a2);
    ot::Mle::Mle::SetMeshLocalPrefix(v11, v5);
    ot::AsCoreType<otInstance>(a1);
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    ot::AsCoreType<otInstance>(a1);
    uint64_t v9 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v9);
  }

  else
  {
    return 13;
  }

  return v12;
}

void otThreadGetLinkLocalIp6Address(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetLinkLocalAddress(v2);
}

void ot::Mle::Mle::GetLinkLocalAddress(ot::Mle::Mle *this)
{
}

{
  __ZNK2ot3Mle3Mle19GetLinkLocalAddressEv(this);
}

void otThreadGetLinkLocalAllThreadNodesMulticastAddress(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(v2);
}

void ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(ot::Mle::Mle *this)
{
}

{
  __ZNK2ot3Mle3Mle33GetLinkLocalAllThreadNodesAddressEv(this);
}

void otThreadGetRealmLocalAllThreadNodesMulticastAddress(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(v2);
}

void ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(ot::Mle::Mle *this)
{
}

{
  __ZNK2ot3Mle3Mle34GetRealmLocalAllThreadNodesAddressEv(this);
}

uint64_t otThreadGetServiceAloc(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v6 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v3);
  ot::AsCoreType<otIp6Address>(a3);
  return ot::Mle::Mle::GetServiceAloc(v6, a2, v4);
}

void otThreadGetNetworkName(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v1);
  ot::MeshCoP::NetworkNameManager::GetNetworkName(v2);
  ot::MeshCoP::NetworkName::GetAsCString(v3);
}

uint64_t ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(uint64_t a1)
{
  return a1 + 87968;
}

  ;
}

  ;
}

{
  return __ZN2ot8Instance3GetINS_7MeshCoP18NetworkNameManagerEEERT_v(a1);
}

uint64_t otThreadSetNetworkName(uint64_t a1, ot *a2)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    if (a2 && *(_BYTE *)a2)
    {
      ot::AsCoreType<otInstance>(a1);
      char v5 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v4);
      unsigned int v11 = ot::MeshCoP::NetworkNameManager::SetNetworkName(v5, a2);
      ot::AsCoreType<otInstance>(a1);
      active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
      ot::MeshCoP::ActiveDatasetManager::Clear(active);
      ot::AsCoreType<otInstance>(a1);
      uint64_t v9 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
      ot::MeshCoP::PendingDatasetManager::Clear(v9);
    }

    else
    {
      return 7;
    }
  }

  else
  {
    return 13;
  }

  return v11;
}

void otThreadGetDomainName(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v1);
  DomainName = (ot::MeshCoP::NetworkName *)ot::MeshCoP::NetworkNameManager::GetDomainName(v2);
  ot::MeshCoP::NetworkName::GetAsCString(DomainName);
}

uint64_t ot::MeshCoP::NetworkNameManager::GetDomainName(ot::MeshCoP::NetworkNameManager *this)
{
  return (uint64_t)this + 17;
}

{
  return __ZNK2ot7MeshCoP18NetworkNameManager13GetDomainNameEv(this);
}

uint64_t otThreadSetDomainName(uint64_t a1, ot *a2)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    ot::AsCoreType<otInstance>(a1);
    char v5 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v4);
    return ot::MeshCoP::NetworkNameManager::SetDomainName(v5, a2);
  }

  else
  {
    return 13;
  }

uint64_t otThreadSetFixedDuaInterfaceIdentifier(uint64_t a1, uint64_t a2)
{
  unsigned int v8 = 0;
  if (a2)
  {
    ot::AsCoreType<otInstance>(a1);
    char v7 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v2);
    ot::AsCoreType<otIp6InterfaceIdentifier>(a2);
    return ot::DuaManager::SetFixedDuaInterfaceIdentifier(v7, v3);
  }

  else
  {
    ot::AsCoreType<otInstance>(a1);
    char v5 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v4);
    ot::DuaManager::ClearFixedDuaInterfaceIdentifier(v5);
  }

  return v8;
}

uint64_t ot::Instance::Get<ot::DuaManager>(uint64_t a1)
{
  return a1 + 164216;
}

{
  return __ZN2ot8Instance3GetINS_10DuaManagerEEERT_v(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp6InterfaceIdentifier>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otThreadGetFixedDuaInterfaceIdentifier(uint64_t a1)
{
  uint64_t v6 = v1;
  uint64_t v5 = 0LL;
  uint64_t v2 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v1);
  if (ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(v2))
  {
    uint64_t v3 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v6);
    return ot::DuaManager::GetFixedDuaInterfaceIdentifier(v3);
  }

  return v5;
}

BOOL ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(ot::DuaManager *this)
{
  return !ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::DuaManager *)((char *)this + 48));
}

{
  return __ZN2ot10DuaManager32IsFixedDuaInterfaceIdentifierSetEv(this);
}

uint64_t ot::DuaManager::GetFixedDuaInterfaceIdentifier(ot::DuaManager *this)
{
  return (uint64_t)this + 48;
}

{
  return __ZNK2ot10DuaManager30GetFixedDuaInterfaceIdentifierEv(this);
}

uint64_t otThreadGetKeySequenceCounter(uint64_t a1)
{
  uint64_t v2 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v1);
  return ot::KeyManager::GetCurrentKeySequence(v2);
}

uint64_t ot::KeyManager::GetCurrentKeySequence(ot::KeyManager *this)
{
  return *((unsigned int *)this + 4);
}

{
  return __ZNK2ot10KeyManager21GetCurrentKeySequenceEv(this);
}

uint64_t otThreadSetKeySequenceCounter(uint64_t a1, int a2)
{
  uint64_t v3 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v2);
  return ot::KeyManager::SetCurrentKeySequence(v3, a2);
}

uint64_t otThreadGetKeySwitchGuardTime(uint64_t a1)
{
  uint64_t v2 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v1);
  return ot::KeyManager::GetKeySwitchGuardTime(v2);
}

uint64_t ot::KeyManager::GetKeySwitchGuardTime(ot::KeyManager *this)
{
  return *((unsigned int *)this + 27);
}

{
  return __ZNK2ot10KeyManager21GetKeySwitchGuardTimeEv(this);
}

uint64_t otThreadSetKeySwitchGuardTime(uint64_t a1, int a2)
{
  uint64_t v3 = ot::Instance::Get<ot::KeyManager>(v2);
  return ot::KeyManager::SetKeySwitchGuardTime(v3, a2);
}

uint64_t ot::KeyManager::SetKeySwitchGuardTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 108) = a2;
  return this;
}

{
  return __ZN2ot10KeyManager21SetKeySwitchGuardTimeEj(this, a2);
}

uint64_t otThreadBecomeDetached(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::BecomeDetached(v2);
}

uint64_t otThreadBecomeChild(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::BecomeChild(v2);
}

uint64_t otThreadGetNextNeighborInfo(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otThreadGetNextNeighborInfo", "thread_api.cpp", 303, "(aIterator) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::InstanceLocator *)ot::Instance::Get<ot::NeighborTable>(v3);
  ot::AsCoreType<otNeighborInfo>(a3);
  return ot::NeighborTable::GetNextNeighborInfo(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNeighborInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otThreadSetNeighborEnhAckSolicitationEnabled(uint64_t a1, uint64_t a2, char a3)
{
  char v8 = a3 & 1;
  unsigned int v7 = 23;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::NeighborTable *)ot::Instance::Get<ot::NeighborTable>(v3);
  uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v4, a2, 0);
  if (Neighbor)
  {
    ot::Neighbor::SetEnhancedAckEnabled((uint64_t)Neighbor, v8 & 1);
    return 0;
  }

  return v7;
}

uint64_t ot::Neighbor::SetEnhancedAckEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 10ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(this + 102) & 0xFE | a2 & 1;
  return this;
}

{
  return __ZN2ot8Neighbor21SetEnhancedAckEnabledEb(this, a2);
}

uint64_t otThreadGetNeighborEnhAckSolicitationEnabled(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned int v7 = 23;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::NeighborTable *)ot::Instance::Get<ot::NeighborTable>(v3);
  uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v4, a2, 0);
  if (Neighbor)
  {
    if (!a3) {
      __assert_rtn("otThreadGetNeighborEnhAckSolicitationEnabled", "thread_api.cpp", 335, "aEnabled != nullptr");
    }
    *a3 = ot::Neighbor::IsEnhacedAckEnabled(Neighbor) & 1;
    return 0;
  }

  return v7;
}

uint64_t ot::Neighbor::IsEnhacedAckEnabled(ot::Neighbor *this)
{
  return *((_BYTE *)this + 102) & 1;
}

{
  return __ZNK2ot8Neighbor19IsEnhacedAckEnabledEv(this);
}

uint64_t otThreadGetDeviceRole(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  unsigned __int8 Role = ot::Mle::Mle::GetRole(v2);
  return ot::MapEnum<ot::Mle::DeviceRole>(Role);
}

const char *otThreadDeviceRoleToString(unsigned int a1)
{
  unsigned __int8 v1 = ot::MapEnum<otDeviceRole>(a1);
  return ot::Mle::RoleToString(v1);
}

uint64_t ot::MapEnum<otDeviceRole>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumI12otDeviceRoleEEKNS_10MappedEnumIT_E4TypeES3_(result);
}

uint64_t otThreadGetLeaderData(uint64_t a1, void *a2)
{
  unsigned int v7 = 0;
  if (!a2) {
    __assert_rtn("otThreadGetLeaderData", "thread_api.cpp", 356, "(aLeaderData) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsAttached(v3))
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v4);
    *a2 = *(void *)ot::Mle::Mle::GetLeaderData(v5);
  }

  else
  {
    return 16;
  }

  return v7;
}

uint64_t otThreadGetLeaderRouterId(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetLeaderId(v2);
}

uint64_t otThreadGetLeaderWeight(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = (ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetWeighting(LeaderData);
}

uint64_t ot::Mle::LeaderData::GetWeighting(ot::Mle::LeaderData *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot3Mle10LeaderData12GetWeightingEv(this);
}

uint64_t otThreadGetPartitionId(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = (ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetPartitionId(LeaderData);
}

uint64_t otThreadGetRloc16(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return (unsigned __int16)ot::Mle::Mle::GetRloc16(v2);
}

BOOL otThreadIsDeviceDetached(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::IsDetached(v2);
}

BOOL ot::Mle::Mle::IsDetached(ot::Mle::Mle *this)
{
  return *((_BYTE *)this + 41) == 1;
}

{
  return __ZNK2ot3Mle3Mle10IsDetachedEv(this);
}

uint64_t otThreadResetRloc16(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetRloc16(v2);
}

uint64_t ot::Mle::Mle::ResetRloc16(uint64_t this)
{
  *(_WORD *)(this + 79ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -2;
  return this;
}

{
  return __ZN2ot3Mle3Mle11ResetRloc16Ev(this);
}

uint64_t otThreadStoreInfoToSettings(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::Store(v2);
}

uint64_t otThreadGetParentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = ot::Instance::Get<ot::Mle::Mle>(v2);
  ot::AsCoreType<otRouterInfo>(a2);
  return ot::Mle::Mle::GetParentInfo(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otRouterInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

BOOL otThreadGetParentAverageRssi(uint64_t a1, _BYTE *a2)
{
  if (!a2) {
    __assert_rtn("otThreadGetParentAverageRssi", "thread_api.cpp", 405, "(aParentRssi) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v3);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Parent);
  *a2 = ot::LinkQualityInfo::GetAverageRss(LinkInfo);
  return *a2 == 127;
}

uint64_t ot::Neighbor::GetLinkInfo(ot::Neighbor *this)
{
  return (uint64_t)this + 106;
}

{
  return (uint64_t)this + 106;
}

{
  return __ZN2ot8Neighbor11GetLinkInfoEv(this);
}

{
  return __ZNK2ot8Neighbor11GetLinkInfoEv(this);
}

uint64_t ot::LinkQualityInfo::GetAverageRss(ot::LinkQualityInfo *this)
{
  return (char)ot::RssAverager::GetAverage(this);
}

{
  return __ZNK2ot15LinkQualityInfo13GetAverageRssEv(this);
}

BOOL otThreadGetParentLastRssi(uint64_t a1, _BYTE *a2)
{
  if (!a2) {
    __assert_rtn("otThreadGetParentLastRssi", "thread_api.cpp", 419, "(aLastRssi) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v3);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Parent);
  *a2 = ot::LinkQualityInfo::GetLastRss(LinkInfo);
  return *a2 == 127;
}

uint64_t ot::LinkQualityInfo::GetLastRss(ot::LinkQualityInfo *this)
{
  return *((char *)this + 3);
}

{
  return __ZNK2ot15LinkQualityInfo10GetLastRssEv(this);
}

uint64_t otThreadSearchForBetterParent(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::SearchForBetterParent(v2);
}

uint64_t otThreadSetEnabled(uint64_t a1, char a2)
{
  unsigned int v7 = 0;
  if ((a2 & 1) != 0)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
    return ot::Mle::Mle::Start(v3);
  }

  else
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v4);
    ot::Mle::Mle::Stop(v5);
  }

  return v7;
}

uint64_t ot::Mle::Mle::Start(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::Start(this, 0);
}

{
  return __ZN2ot3Mle3Mle5StartEv(this);
}

uint64_t ot::Mle::Mle::Stop(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::Stop(this, 1);
}

{
  return __ZN2ot3Mle3Mle4StopEv(this);
}

uint64_t otThreadGetVersion()
{
  return 4LL;
}

BOOL otThreadIsSingleton(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::IsSingleton(v2);
}

uint64_t otThreadDiscover(uint64_t a1, int a2, unsigned __int16 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a1;
  int v16 = a2;
  unsigned __int16 v15 = a3;
  char v14 = a4 & 1;
  char v13 = a5 & 1;
  uint64_t v12 = a6;
  uint64_t v11 = a7;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v9 = ot::Instance::Get<ot::Mle::DiscoverScanner>(v7);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v10, v16);
  return ot::Mle::DiscoverScanner::Discover(v9, (ot::Mac::ChannelMask *)v10, v15, v14 & 1, v13 & 1, 0LL, v12, v11);
}

uint64_t ot::Instance::Get<ot::Mle::DiscoverScanner>(uint64_t a1)
{
  return a1 + 142728;
}

{
  return __ZN2ot8Instance3GetINS_3Mle15DiscoverScannerEEERT_v(a1);
}

uint64_t otThreadSetJoinerAdvertisement( uint64_t a1, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 a4)
{
  uint64_t v5 = (ot::Mle::DiscoverScanner *)ot::Instance::Get<ot::Mle::DiscoverScanner>(v4);
  return ot::Mle::DiscoverScanner::SetJoinerAdvertisement(v5, a2, a3, a4);
}

BOOL otThreadIsDiscoverInProgress(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::DiscoverScanner *)ot::Instance::Get<ot::Mle::DiscoverScanner>(v1);
  return ot::Mle::DiscoverScanner::IsInProgress(v2);
}

BOOL ot::Mle::DiscoverScanner::IsInProgress(ot::Mle::DiscoverScanner *this)
{
  return *((_BYTE *)this + 64) != 0;
}

{
  return __ZNK2ot3Mle15DiscoverScanner12IsInProgressEv(this);
}

uint64_t otThreadGetIp6Counters(uint64_t a1)
{
  uint64_t v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::GetCounters(v2);
}

uint64_t ot::MeshForwarder::GetCounters(ot::MeshForwarder *this)
{
  return (uint64_t)this + 128;
}

{
  return __ZNK2ot13MeshForwarder11GetCountersEv(this);
}

_WORD *otThreadResetIp6Counters(uint64_t a1)
{
  uint64_t v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::ResetCounters(v2);
}

uint64_t otThreadGetMleCounters(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetCounters(v2);
}

uint64_t ot::Mle::Mle::GetCounters(ot::Mle::Mle *this)
{
  return (uint64_t)this + 904;
}

{
  return __ZN2ot3Mle3Mle11GetCountersEv(this);
}

unint64_t otThreadResetMleCounters(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetCounters(v2);
}

uint64_t otThreadDetachGracefully(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v3);
  return ot::Mle::Mle::DetachGracefully(v4, a2, a3);
}

uint64_t otThreadGetTriggerBasedIp6Counters(uint64_t a1)
{
  uint64_t v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::GetTriggerBasedCounters(v2);
}

uint64_t ot::MeshForwarder::GetTriggerBasedCounters(ot::MeshForwarder *this)
{
  return (uint64_t)this + 232;
}

{
  return __ZNK2ot13MeshForwarder23GetTriggerBasedCountersEv(this);
}

void *otThreadResetTriggerBasedIp6Counters(uint64_t a1)
{
  uint64_t v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::ResetTriggerBasedCounters(v2);
}

void *ot::MeshForwarder::ResetTriggerBasedCounters(ot::MeshForwarder *this)
{
  return memset((char *)this + 232, 0, 0x38uLL);
}

{
  return __ZN2ot13MeshForwarder25ResetTriggerBasedCountersEv(this);
}

uint64_t otThreadGetMleTriggerBasedCounters(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetTriggerBasedCounters(v2);
}

uint64_t ot::Mle::Mle::GetTriggerBasedCounters(ot::Mle::Mle *this)
{
  return (uint64_t)this + 988;
}

{
  return __ZNK2ot3Mle3Mle23GetTriggerBasedCountersEv(this);
}

uint64_t otThreadResetMleTriggerBasedCounters(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetMleTriggerBasedCounters(v2);
}

uint64_t ot::Mle::Mle::ResetMleTriggerBasedCounters(uint64_t this)
{
  *(void *)(this + 988) = 0LL;
  *(void *)(this + 996) = 0LL;
  *(_WORD *)(this + 100++*(_WORD *)(this + 4) = 0;
  return this;
}

{
  return __ZN2ot3Mle3Mle28ResetMleTriggerBasedCountersEv(this);
}

uint64_t otThreadGetBbrCounters(uint64_t a1)
{
  uint64_t v2 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  return ot::BackboneRouter::Local::GetBbrCounters(v2);
}

uint64_t ot::BackboneRouter::Local::GetBbrCounters(ot::BackboneRouter::Local *this)
{
  return (uint64_t)this + 120;
}

{
  return __ZNK2ot14BackboneRouter5Local14GetBbrCountersEv(this);
}

uint64_t otThreadResetBbrCounters(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  return ot::BackboneRouter::Local::ResetBbrCounters(v2);
}

uint64_t ot::BackboneRouter::Local::ResetBbrCounters(uint64_t this)
{
  *(_DWORD *)(this + 120) = 0;
  *(_WORD *)(this + 12++*(_WORD *)(this + 4) = 0;
  return this;
}

{
  return __ZN2ot14BackboneRouter5Local16ResetBbrCountersEv(this);
}

uint64_t otThreadGetMleLinkLossCounters(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetLinkLossCounters(v2);
}

uint64_t ot::Mle::Mle::GetLinkLossCounters(ot::Mle::Mle *this)
{
  return (uint64_t)this + 984;
}

{
  return __ZNK2ot3Mle3Mle19GetLinkLossCountersEv(this);
}

uint64_t otThreadResetMleLinkLossCounters(uint64_t a1)
{
  uint64_t v2 = ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetLinkLossCounters(v2);
}

uint64_t ot::Mle::Mle::ResetLinkLossCounters(uint64_t this)
{
  *(_DWORD *)(this + 98++*(_WORD *)(this + 4) = 0;
  return this;
}

{
  return __ZN2ot3Mle3Mle21ResetLinkLossCountersEv(this);
}

void otThreadGetConnectedRouterNodesHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::MleRouter::GetConnectedRouterNodesHistogram(v3, a2);
}

void *otThreadResetConnectedRouterNodesHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::ClearConnectedRouterNodesHistogram(v2);
}

void otThreadGetConnectedChildNodesHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::MleRouter::GetConnectedChildNodesHistogram(v3, a2);
}

void *otThreadResetConnectedChildNodesHistogram(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::ClearConnectedChildNodesHistogram(v2);
}

ot::StringWriter *otConvertDurationInSecondsToString(unsigned int a1, char *a2, __int16 a3)
{
  unsigned int v8 = a1;
  uint64_t v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  unint64_t v3 = ot::Uptime::SecToMsec((ot::Uptime *)v8);
  return ot::Uptime::UptimeToString(v3, (ot::StringWriter *)v5, 0LL);
}

uint64_t ot::Uptime::SecToMsec(ot::Uptime *this)
{
  return 1000LL * this;
}

{
  return __ZN2ot6Uptime9SecToMsecEj(this);
}

uint64_t otThreadGetMaxAllowedChildren(uint64_t a1)
{
  uint64_t v2 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v1);
  return (unsigned __int16)ot::ChildTable::GetMaxChildrenAllowed(v2);
}

uint64_t ot::ChildTable::GetMaxChildrenAllowed(ot::ChildTable *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot10ChildTable21GetMaxChildrenAllowedEv(this);
}

uint64_t otThreadSetMaxAllowedChildren(uint64_t a1, unsigned __int16 a2)
{
  unint64_t v3 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v2);
  return ot::ChildTable::SetMaxChildrenAllowed(v3, a2);
}

uint64_t otThreadGetMaxChildIpAddresses(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetMaxChildIpAddresses(v2);
}

uint64_t otThreadIsRouterEligible(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::IsRouterEligible(v2) & 1;
}

uint64_t otThreadSetRouterEligible(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  unint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetRouterEligible(v3, v5 & 1);
}

uint64_t otThreadSetPreferredRouterId(uint64_t a1, char a2)
{
  unint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetPreferredRouterId(v3, a2);
}

uint64_t otThreadGetDeviceProperties(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetDeviceProperties(v2);
}

uint64_t ot::Mle::MleRouter::GetDeviceProperties(ot::Mle::MleRouter *this)
{
  return (uint64_t)this + 1256;
}

{
  return __ZNK2ot3Mle9MleRouter19GetDevicePropertiesEv(this);
}

uint64_t otThreadSetDeviceProperties(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::AsCoreType<otDeviceProperties>(a2);
  return ot::Mle::MleRouter::SetDeviceProperties(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otDeviceProperties>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otThreadGetLocalLeaderWeight(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetLeaderWeight(v2);
}

uint64_t ot::Mle::MleRouter::GetLeaderWeight(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46191);
}

{
  return __ZNK2ot3Mle9MleRouter15GetLeaderWeightEv(this);
}

uint64_t otThreadSetLocalLeaderWeight(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetLeaderWeight(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetLeaderWeight(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4619mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = a2;
  return this;
}

{
  return __ZN2ot3Mle9MleRouter15SetLeaderWeightEh(this, a2);
}

uint64_t otThreadGetJoinerUdpPort(uint64_t a1)
{
  uint64_t v2 = (ot::MeshCoP::JoinerRouter *)ot::Instance::Get<ot::MeshCoP::JoinerRouter>(v1);
  return (unsigned __int16)ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(v2);
}

uint64_t ot::Instance::Get<ot::MeshCoP::JoinerRouter>(uint64_t a1)
{
  return a1 + 162040;
}

{
  return __ZN2ot8Instance3GetINS_7MeshCoP12JoinerRouterEEERT_v(a1);
}

uint64_t otThreadSetJoinerUdpPort(uint64_t a1, __int16 a2)
{
  uint64_t v3 = (ot::MeshCoP::JoinerRouter *)ot::Instance::Get<ot::MeshCoP::JoinerRouter>(v2);
  ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(v3, a2);
  return 0LL;
}

uint64_t otThreadGetContextIdReuseDelay(uint64_t a1)
{
  uint64_t v2 = (ot::NetworkData::Leader *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::Leader::GetContextIdReuseDelay(v2);
}

uint64_t ot::NetworkData::Leader::GetContextIdReuseDelay(ot::NetworkData::Leader *this)
{
  return ot::NetworkData::Leader::ContextIds::GetReuseDelay((ot::NetworkData::Leader *)((char *)this + 272));
}

{
  return __ZNK2ot11NetworkData6Leader22GetContextIdReuseDelayEv(this);
}

uint64_t otThreadSetContextIdReuseDelay(uint64_t a1, int a2)
{
  uint64_t v3 = (ot::NetworkData::Leader *)ot::Instance::Get<ot::NetworkData::Leader>(v2);
  return ot::NetworkData::Leader::SetContextIdReuseDelay(v3, a2);
}

uint64_t ot::NetworkData::Leader::SetContextIdReuseDelay(ot::NetworkData::Leader *this, int a2)
{
  return ot::NetworkData::Leader::ContextIds::SetReuseDelay((uint64_t)this + 272, a2);
}

{
  return __ZN2ot11NetworkData6Leader22SetContextIdReuseDelayEj(this, a2);
}

uint64_t otThreadGetNetworkIdTimeout(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetNetworkIdTimeout(v2);
}

uint64_t ot::Mle::MleRouter::GetNetworkIdTimeout(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46188);
}

{
  return __ZNK2ot3Mle9MleRouter19GetNetworkIdTimeoutEv(this);
}

uint64_t otThreadSetNetworkIdTimeout(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetNetworkIdTimeout(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetNetworkIdTimeout(uint64_t this, char a2)
{
  *(_BYTE *)(this + 46188) = a2;
  return this;
}

{
  return __ZN2ot3Mle9MleRouter19SetNetworkIdTimeoutEh(this, a2);
}

uint64_t otThreadGetRouterUpgradeThreshold(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetRouterUpgradeThreshold(v2);
}

uint64_t ot::Mle::MleRouter::GetRouterUpgradeThreshold(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46189);
}

{
  return __ZNK2ot3Mle9MleRouter25GetRouterUpgradeThresholdEv(this);
}

uint64_t otThreadSetRouterUpgradeThreshold(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetRouterUpgradeThreshold(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetRouterUpgradeThreshold(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4618ot::Mle::Tlv::SetType(this, 9) = a2;
  return this;
}

{
  return __ZN2ot3Mle9MleRouter25SetRouterUpgradeThresholdEh(this, a2);
}

uint64_t otThreadGetChildRouterLinks(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetChildRouterLinks(v2);
}

uint64_t ot::Mle::MleRouter::GetChildRouterLinks(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46256);
}

{
  return __ZNK2ot3Mle9MleRouter19GetChildRouterLinksEv(this);
}

uint64_t otThreadSetChildRouterLinks(uint64_t a1, char a2)
{
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetChildRouterLinks(v3, a2);
}

uint64_t otThreadReleaseRouterId(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 0x3Eu)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v2);
    return ot::RouterTable::Release(v3, a2);
  }

  else
  {
    return 7;
  }

uint64_t otThreadBecomeRouter(uint64_t a1)
{
  unsigned int v8 = 13;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  unsigned int Role = ot::Mle::Mle::GetRole(v2);
  if (Role > 1)
  {
    if (Role == 2)
    {
      ot::AsCoreType<otInstance>(a1);
      uint64_t v5 = ot::Instance::Get<ot::Mle::MleRouter>(v4);
      return ot::Mle::MleRouter::BecomeRouter(v5, 3u);
    }

    else if (Role == 4 || Role == 3)
    {
      return 0;
    }
  }

  return v8;
}

uint64_t otThreadBecomeLeader(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::BecomeLeader(v3, v5 & 1);
}

uint64_t otThreadBecomeLeader(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::BecomeLeader(v2, 1);
}

uint64_t otThreadGetRouterDowngradeThreshold(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetRouterDowngradeThreshold(v2);
}

uint64_t ot::Mle::MleRouter::GetRouterDowngradeThreshold(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46190);
}

{
  return __ZNK2ot3Mle9MleRouter27GetRouterDowngradeThresholdEv(this);
}

uint64_t otThreadSetRouterDowngradeThreshold(uint64_t a1, char a2)
{
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetRouterDowngradeThreshold(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetRouterDowngradeThreshold(uint64_t this, char a2)
{
  *(_BYTE *)(this + 46190) = a2;
  return this;
}

{
  return __ZN2ot3Mle9MleRouter27SetRouterDowngradeThresholdEh(this, a2);
}

uint64_t otThreadGetRouterSelectionJitter(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetRouterSelectionJitter(v2);
}

uint64_t ot::Mle::MleRouter::GetRouterSelectionJitter(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46254);
}

{
  return __ZNK2ot3Mle9MleRouter24GetRouterSelectionJitterEv(this);
}

void otThreadSetRouterSelectionJitter(uint64_t a1, char a2)
{
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::MleRouter::SetRouterSelectionJitter(v3, a2);
  IgnoreError();
}

uint64_t otThreadGetChildInfoById(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  __int16 v6 = (ot::InstanceLocator *)ot::Instance::Get<ot::ChildTable>(v3);
  ot::AsCoreType<otChildInfo>(a3);
  return ot::ChildTable::GetChildInfoById(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otChildInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otThreadGetChildInfoByIndex(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  __int16 v6 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v3);
  ot::AsCoreType<otChildInfo>(a3);
  return ot::ChildTable::GetChildInfoByIndex(v6, a2, v4);
}

uint64_t otThreadGetChildNextIp6Address(uint64_t a1, unsigned __int16 a2, __int16 *a3, _OWORD *a4)
{
  uint64_t v15 = a1;
  unsigned __int16 v14 = a2;
  char v13 = a3;
  uint64_t v12 = a4;
  unsigned int v11 = 0;
  if (!a3) {
    __assert_rtn("otThreadGetChildNextIp6Address", "thread_ftd_api.cpp", 255, "(aIterator) != nullptr");
  }
  if (!v12) {
    __assert_rtn("otThreadGetChildNextIp6Address", "thread_ftd_api.cpp", 256, "(aAddress) != nullptr");
  }
  ot::AsCoreType<otInstance>(v15);
  char v5 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v4);
  ChildAtIndex = (ot::Neighbor *)ot::ChildTable::GetChildAtIndex(v5, v14);
  if (ChildAtIndex)
  {
    if (ot::Neighbor::IsStateValidOrRestoring(ChildAtIndex))
    {
      ot::Child::AddressIterator::AddressIterator((uint64_t)v9, (uint64_t)ChildAtIndex, *v13, 0);
      if (ot::Child::AddressIterator::IsDone((ot::Child::AddressIterator *)v9))
      {
        return 23;
      }

      else
      {
        Address = (_OWORD *)ot::Child::AddressIterator::GetAddress((ot::Child::AddressIterator *)v9);
        *uint64_t v12 = *Address;
        ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v9);
        __int16 AsIndex = ot::Child::AddressIterator::GetAsIndex((ot::Child::AddressIterator *)v9);
        *char v13 = AsIndex;
      }
    }

    else
    {
      return 7;
    }
  }

  else
  {
    return 7;
  }

  return v11;
}

BOOL ot::Neighbor::IsStateValidOrRestoring(ot::Neighbor *this)
{
  BOOL v2 = 1;
  if ((*((_BYTE *)this + 98) & 0xF) != 7) {
    return ot::Neighbor::IsStateRestoring(this);
  }
  return v2;
}

{
  return __ZNK2ot8Neighbor23IsStateValidOrRestoringEv(this);
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  return a1;
}

{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a4;
  *(_WORD *)(a1 + 10) = a3;
  ot::Child::AddressIterator::Update((ot::Child::AddressIterator *)a1);
  return a1;
}

BOOL ot::Child::AddressIterator::IsDone(ot::Child::AddressIterator *this)
{
  return *((unsigned __int16 *)this + 5) >= 0x10u;
}

{
  return __ZNK2ot5Child15AddressIterator6IsDoneEv(this);
}

uint64_t ot::Child::AddressIterator::operator++(ot::Child::AddressIterator *a1)
{
  return ot::Child::AddressIterator::Update(a1);
}

{
  ++*((_WORD *)a1 + 5);
  return ot::Child::AddressIterator::Update(a1);
}

{
  return __ZN2ot5Child15AddressIteratorppEi(a1);
}

{
  return __ZN2ot5Child15AddressIteratorppEv(a1);
}

uint64_t ot::Child::AddressIterator::GetAsIndex(ot::Child::AddressIterator *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return __ZNK2ot5Child15AddressIterator10GetAsIndexEv(this);
}

uint64_t otThreadGetRouterIdSequence(uint64_t a1)
{
  BOOL v2 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v1);
  return ot::RouterTable::GetRouterIdSequence(v2);
}

uint64_t ot::RouterTable::GetRouterIdSequence(ot::RouterTable *this)
{
  return *((unsigned __int8 *)this + 8036);
}

{
  return __ZNK2ot11RouterTable19GetRouterIdSequenceEv(this);
}

uint64_t otThreadGetMaxRouterId()
{
  return 62LL;
}

uint64_t otThreadGetRouterInfo(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  __int16 v6 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v3);
  ot::AsCoreType<otRouterInfo>(a3);
  return ot::RouterTable::GetRouterInfo(v6, a2, v4);
}

uint64_t otThreadGetNextCacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v8 = (ot::InstanceLocator *)ot::Instance::Get<ot::AddressResolver>(v3);
  ot::AsCoreType<otCacheEntryInfo>(a2);
  uint64_t v7 = v4;
  ot::AsCoreType<otCacheEntryIterator>(a3);
  return ot::AddressResolver::GetNextCacheEntry(v8, v7, v5);
}

uint64_t ot::Instance::Get<ot::AddressResolver>(uint64_t a1)
{
  return a1 + 142872;
}

{
  return __ZN2ot8Instance3GetINS_15AddressResolverEEERT_v(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCacheEntryInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCacheEntryIterator>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

ot::AddressResolver::CacheEntry *otThreadClearEidCache(uint64_t a1)
{
  BOOL v2 = (ot::AddressResolver::CacheEntry *)ot::Instance::Get<ot::AddressResolver>(v1);
  return ot::AddressResolver::Clear(v2);
}

double otThreadGetPskc(uint64_t a1, uint64_t a2)
{
  char v5 = (__n128 *)ot::Instance::Get<ot::KeyManager>(v2);
  ot::AsCoreType<otPskc>(a2);
  *(void *)&double result = ot::KeyManager::GetPskc(v5, v3).n128_u64[0];
  return result;
}

uint64_t otThreadSetPskc(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v11 = ot::Instance::Get<ot::KeyManager>(v4);
    ot::AsCoreType<otPskc>(a2);
    ot::KeyManager::SetPskc(v11, v5);
    ot::AsCoreType<otInstance>(a1);
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    ot::AsCoreType<otInstance>(a1);
    uint64_t v9 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v9);
  }

  else
  {
    return 13;
  }

  return v12;
}

uint64_t otThreadGetParentPriority(uint64_t a1)
{
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return (char)ot::Mle::MleRouter::GetAssignParentPriority(v2);
}

uint64_t ot::Mle::MleRouter::GetAssignParentPriority(ot::Mle::MleRouter *this)
{
  return *((char *)this + 46257);
}

{
  return __ZNK2ot3Mle9MleRouter23GetAssignParentPriorityEv(this);
}

uint64_t otThreadSetParentPriority(uint64_t a1, char a2)
{
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetAssignParentPriority(v3, a2);
}

void *otThreadRegisterNeighborTableCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)ot::Instance::Get<ot::NeighborTable>(v2);
  return ot::NeighborTable::RegisterCallback(v3, a2);
}

void *ot::NeighborTable::RegisterCallback(void *result, uint64_t a2)
{
  *double result = a2;
  return result;
}

{
  return __ZN2ot13NeighborTable16RegisterCallbackEPFv20otNeighborTableEventPK24otNeighborTableEntryInfoE(result, a2);
}

void *otThreadSetDiscoveryRequestCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = ot::Instance::Get<ot::Mle::MleRouter>(v3);
  return ot::Mle::MleRouter::SetDiscoveryRequestCallback(v4, a2, a3);
}

void *ot::Mle::MleRouter::SetDiscoveryRequestCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::Set((void *)(a1 + 46264), a2, a3);
}

{
  return __ZN2ot3Mle9MleRouter27SetDiscoveryRequestCallbackEPFvPK28otThreadDiscoveryRequestInfoPvES5_(a1, a2, a3);
}

BOOL otThreadIsRouterIdAllocated(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v2);
  return ot::RouterTable::IsAllocated(v3, a2);
}

void otThreadGetNextHopAndPathCost( uint64_t a1, unsigned __int16 a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  uint64_t v12 = a1;
  unsigned __int16 v11 = a2;
  unsigned int v10 = a3;
  uint64_t v9 = a4;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v4);
  if (v10) {
    char v5 = v10;
  }
  else {
    char v5 = (unsigned __int16 *)&v7;
  }
  if (v9) {
    ot::RouterTable::GetNextHopAndPathCost(v6, v11, v5, v9);
  }
  else {
    ot::RouterTable::GetNextHopAndPathCost(v6, v11, v5, &v8);
  }
}

uint64_t ot::NetworkData::Leader::ContextIds::GetReuseDelay(ot::NetworkData::Leader::ContextIds *this)
{
  return *((unsigned int *)this + 15);
}

{
  return __ZNK2ot11NetworkData6Leader10ContextIds13GetReuseDelayEv(this);
}

uint64_t ot::NetworkData::Leader::ContextIds::SetReuseDelay(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

{
  return __ZN2ot11NetworkData6Leader10ContextIds13SetReuseDelayEj(this, a2);
}

BOOL ot::Neighbor::IsStateRestoring(ot::Neighbor *this)
{
  BOOL v2 = 1;
  if ((*((_BYTE *)this + 98) & 0xF) != 1) {
    return (*((_BYTE *)this + 98) & 0xF) == 6;
  }
  return v2;
}

{
  return __ZNK2ot8Neighbor16IsStateRestoringEv(this);
}

void *ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPK28otThreadDiscoveryRequestInfoPvEE3SetES6_S4_(result, a2, a3);
}

ot::Buffer *otUdpNewMessage(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  uint64_t v3 = (const ot::Message::Settings *)ot::Message::Settings::From(a2);
  return ot::Ip6::Udp::NewMessage(v5, 0, v3);
}

uint64_t ot::Instance::Get<ot::Ip6::Udp>(uint64_t a1)
{
  return a1 + 85328;
}

{
  return __ZN2ot8Instance3GetINS_3Ip63UdpEEERT_v(a1);
}

uint64_t otUdpOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v4);
  ot::AsCoreType<otUdpSocket>(a2);
  return ot::Ip6::Udp::Open(v7, v5, a3, a4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otUdpSocket>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

BOOL otUdpIsOpen(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  ot::AsCoreType<otUdpSocket>(a2);
  return ot::Ip6::Udp::IsOpen(v5, v3);
}

BOOL ot::Ip6::Udp::IsOpen(ot::Ip6::Udp *this, const ot::Ip6::Udp::SocketHandle *a2)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains((uint64_t *)this + 2, (uint64_t)a2);
}

{
  return __ZNK2ot3Ip63Udp6IsOpenERKNS1_12SocketHandleE(this, a2);
}

uint64_t otUdpClose(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  ot::AsCoreType<otUdpSocket>(a2);
  return ot::Ip6::Udp::Close(v5, v3);
}

uint64_t otUdpBind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned __int16 v11 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v4);
  ot::AsCoreType<otUdpSocket>(a2);
  uint64_t v9 = v5;
  ot::AsCoreType<otSockAddr>(a3);
  unsigned int v10 = v6;
  unsigned __int8 v7 = ot::MapEnum<otNetifIdentifier>(a4);
  return ot::Ip6::Udp::Bind(v11, v9, v10, v7);
}

uint64_t ot::MapEnum<otNetifIdentifier>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumI17otNetifIdentifierEEKNS_10MappedEnumIT_E4TypeES3_(result);
}

uint64_t otUdpConnect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v8 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v3);
  ot::AsCoreType<otUdpSocket>(a2);
  unsigned __int8 v7 = v4;
  ot::AsCoreType<otSockAddr>(a3);
  return ot::Ip6::Udp::Connect(v8, v7, v5);
}

uint64_t otUdpSend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v11 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v4);
  ot::AsCoreType<otUdpSocket>(a2);
  uint64_t v9 = v5;
  ot::AsCoreType<otMessage>(a3);
  unsigned int v10 = v6;
  ot::AsCoreType<otMessageInfo>(a4);
  return ot::Ip6::Udp::SendTo(v11, v9, v10, v7);
}

uint64_t otUdpGetSockets(uint64_t a1)
{
  uint64_t v2 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v1);
  return ot::Ip6::Udp::GetUdpSockets(v2);
}

uint64_t ot::Ip6::Udp::GetUdpSockets(ot::Ip6::Udp *this)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead((uint64_t)this + 16);
}

{
  return __ZN2ot3Ip63Udp13GetUdpSocketsEv(this);
}

uint64_t otUdpAddReceiver(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  ot::AsCoreType<otUdpReceiver>(a2);
  return ot::Ip6::Udp::AddReceiver(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otUdpReceiver>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otUdpRemoveReceiver(uint64_t a1, uint64_t a2)
{
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  ot::AsCoreType<otUdpReceiver>(a2);
  return ot::Ip6::Udp::RemoveReceiver(v5, v3);
}

uint64_t otUdpSendDatagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v8 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v3);
  ot::AsCoreType<otMessage>(a2);
  unsigned __int8 v7 = v4;
  ot::AsCoreType<otMessageInfo>(a3);
  return ot::Ip6::Udp::SendDatagram(v8, v7, v5, 0x11u);
}

uint64_t otUdpIsPortInUse(uint64_t a1, __int16 a2)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  return ot::Ip6::Udp::IsPortInUse(v3, a2) & 1;
}

BOOL ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2] = (uint64_t)a1;
  v3[1] = a2;
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(a1, a2, v3) == 0;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp12SocketHandleEE8ContainsERKS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3 = 0LL;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3 = i;
  }

  return v5;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp12SocketHandleEE4FindERKS3_RPS5_(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

{
  return *(void *)(a1 + 64);
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip63Udp12SocketHandleEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_3Ip63Udp12SocketHandleEE7GetNextEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE7GetHeadEv(a1);
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp12SocketHandleEE7GetHeadEv(a1);
}

ot::BackboneRouter::BackboneTmfAgent *ot::BackboneRouter::BackboneTmfAgent::BackboneTmfAgent( ot::BackboneRouter::BackboneTmfAgent *this, ot::Instance *a2)
{
  return this;
}

{
  ot::BackboneRouter::BackboneTmfAgent::BackboneTmfAgent(this, a2);
  return this;
}

void *ot::Coap::CoapBase::SetInterceptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::Set( (void *)(a1 + 56),  a2,  a3);
}

{
  return __ZN2ot4Coap8CoapBase14SetInterceptorEPF7otErrorRKNS0_7MessageERKNS_3Ip611MessageInfoEPvESA_(a1, a2, a3);
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::Filter( ot::BackboneRouter::BackboneTmfAgent *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, void *a4)
{
  if (ot::BackboneRouter::BackboneTmfAgent::IsBackboneTmfMessage(a3, a2)) {
    return 0LL;
  }
  else {
    return 31LL;
  }
}

uint64_t ot::Coap::CoapBase::SetResourceHandler(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = a2;
  return result;
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::HandleResource( ot::BackboneRouter::BackboneTmfAgent *this, ot::Coap::CoapBase *a2, ot::Coap::Message *a3, ot::Coap::Message *a4, const ot::Ip6::MessageInfo *a5, int (*a6)(const void *, const void *))
{
  return ot::BackboneRouter::BackboneTmfAgent::HandleResource(this, a2, a3, a4, (uint64_t)a5, a6) & 1;
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::Start(ot::BackboneRouter::BackboneTmfAgent *this)
{
  unsigned int v11 = ot::Coap::Coap::Start((uint64_t)this, 61631, 2u);
  if (!v11)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Bbr", "Start listening on port %u", v1, v2, v3, v4, v5, v6, 191);
    unsigned __int8 v7 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
    AllNetworkBackboneRoutersAddress = (const ot::Ip6::Address *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v7);
    ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(this, AllNetworkBackboneRoutersAddress);
  }

  return v11;
}

void ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast( ot::BackboneRouter::BackboneTmfAgent *this, const ot::Ip6::Address *a2)
{
  int v3 = ot::Ip6::Udp::Socket::JoinNetifMulticastGroup((uint64_t)this + 144, 2u, (__int128 *)a2);
  ot::BackboneRouter::BackboneTmfAgent::LogError((uint64_t)this, (char)"Backbone TMF subscribes", a2, v3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::Local>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14BackboneRouter5LocalEEERT_v(a1);
}

uint64_t ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(ot::BackboneRouter::Local *this)
{
  return (uint64_t)this + 72;
}

{
  return __ZNK2ot14BackboneRouter5Local35GetAllNetworkBackboneRoutersAddressEv(this);
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::HandleResource( ot::BackboneRouter::BackboneTmfAgent *this, ot *a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return 0LL;
}

BOOL ot::BackboneRouter::BackboneTmfAgent::IsBackboneTmfMessage( ot::BackboneRouter::BackboneTmfAgent *this, const ot::Ip6::MessageInfo *a2)
{
  unsigned __int16 v14 = v2;
  ot::Ip6::MessageInfo::GetPeerAddr(a2);
  char v13 = v3;
  uint64_t v4 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  BOOL v12 = 0;
  if (ot::BackboneRouter::Local::IsEnabled(v4))
  {
    BOOL v12 = 0;
    if (ot::Ip6::Address::IsLinkLocal(v13))
    {
      BOOL v10 = 1;
      if (!ot::Ip6::Address::IsLinkLocal((ot::Ip6::Address *)v14))
      {
        uint64_t v5 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
        AllNetworkBackboneRoutersAddress = (const void *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v5);
        BOOL v10 = 1;
        if (!ot::Equatable<ot::Ip6::Address>::operator==(v14, AllNetworkBackboneRoutersAddress))
        {
          unsigned __int8 v7 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
          AllDomainBackboneRoutersAddress = (const void *)ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(v7);
          return ot::Equatable<ot::Ip6::Address>::operator==(v14, AllDomainBackboneRoutersAddress);
        }
      }

      return v10;
    }
  }

  return v12;
}

void ot::Ip6::MessageInfo::GetSockAddr(ot::Ip6::MessageInfo *this)
{
}

{
  ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  __ZN2ot3Ip611MessageInfo11GetSockAddrEv(this);
}

{
  __ZNK2ot3Ip611MessageInfo11GetSockAddrEv(this);
}

void ot::Ip6::MessageInfo::GetPeerAddr(ot::Ip6::MessageInfo *this)
{
}

{
  ot::AsCoreType<otIp6Address>((uint64_t)this + 16);
}

{
  __ZN2ot3Ip611MessageInfo11GetPeerAddrEv(this);
}

{
  __ZNK2ot3Ip611MessageInfo11GetPeerAddrEv(this);
}

BOOL ot::BackboneRouter::Local::IsEnabled(ot::BackboneRouter::Local *this)
{
  return *(_BYTE *)this != 0;
}

{
  return __ZNK2ot14BackboneRouter5Local9IsEnabledEv(this);
}

uint64_t ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(ot::BackboneRouter::Local *this)
{
  return (uint64_t)this + 88;
}

{
  return __ZNK2ot14BackboneRouter5Local34GetAllDomainBackboneRoutersAddressEv(this);
}

void ot::BackboneRouter::BackboneTmfAgent::LogError(uint64_t a1, char a2, ot::Ip6::Address *a3, int a4)
{
  if (a4)
  {
    ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v18);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v18);
    ot::ErrorToString(a4);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Bbr", "%s %s: %s", v10, v11, v12, v13, v14, v15, a2);
  }

  else
  {
    ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v19);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v19);
    ot::ErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Bbr", "%s %s: %s", v4, v5, v6, v7, v8, v9, a2);
  }

void ot::BackboneRouter::BackboneTmfAgent::UnsubscribeMulticast( ot::BackboneRouter::BackboneTmfAgent *this, const ot::Ip6::Address *a2)
{
  int v3 = ot::Ip6::Udp::Socket::LeaveNetifMulticastGroup((uint64_t)this + 144, 2u, (__int128 *)a2);
  ot::BackboneRouter::BackboneTmfAgent::LogError((uint64_t)this, (char)"Backbone TMF unsubscribes", a2, v3);
}

void *ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPF7otErrorRKNS_4Coap7MessageERKNS_3Ip611MessageInfoEPvEE3SetESC_SA_(result, a2, a3);
}

ot::BackboneRouter::Leader *ot::BackboneRouter::Leader::Leader( ot::BackboneRouter::Leader *this, ot::Instance *a2)
{
  return this;
}

{
  ot::BackboneRouter::Leader::Leader(this, a2);
  return this;
}

uint64_t ot::BackboneRouter::Leader::Reset(ot::BackboneRouter::Leader *this)
{
  *(_WORD *)this = -2;
  return ot::Ip6::Prefix::SetLength((uint64_t)this + 12, 0);
}

uint64_t ot::Ip6::Prefix::SetLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = a2;
  return this;
}

{
  return __ZN2ot3Ip66Prefix9SetLengthEh(this, a2);
}

uint64_t ot::BackboneRouter::Leader::GetConfig(ot::BackboneRouter::Leader *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::BackboneRouter::Leader::HasPrimary(a1))
  {
    *(void *)a2 = *(void *)a1;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a1 + 2);
  }

  else
  {
    return 23;
  }

  return v4;
}

BOOL ot::BackboneRouter::Leader::HasPrimary(ot::BackboneRouter::Leader *this)
{
  return *(unsigned __int16 *)this != 65534;
}

{
  return __ZNK2ot14BackboneRouter6Leader10HasPrimaryEv(this);
}

uint64_t ot::BackboneRouter::Leader::GetServiceId(ot::BackboneRouter::Leader *this, unsigned __int8 *a2)
{
  if (ot::BackboneRouter::Leader::HasPrimary(this))
  {
    uint64_t v2 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
    return ot::NetworkData::Service::Manager::GetServiceId<ot::NetworkData::Service::BackboneRouter>( v2,  1,  a2);
  }

  else
  {
    return 23;
  }

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>( ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Service::Manager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11NetworkData7Service7ManagerEEERT_v(a1);
}

uint64_t ot::NetworkData::Service::Manager::GetServiceId<ot::NetworkData::Service::BackboneRouter>( ot::NetworkData::Service::Manager *a1, char a2, unsigned __int8 *a3)
{
  return ot::NetworkData::Service::Manager::GetServiceId( a1,  (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData,  1,  a2 & 1,  a3);
}

{
  return __ZNK2ot11NetworkData7Service7Manager12GetServiceIdINS1_14BackboneRouterEEE7otErrorbRh(a1, a2, a3);
}

void ot::BackboneRouter::Leader::LogBackboneRouterPrimary(uint64_t a1, unsigned __int8 a2, __int16 *a3)
{
  char v3 = ot::BackboneRouter::Leader::StateToString(a2);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLeader", "PBBR state: %s", v4, v5, v6, v7, v8, v9, v3);
  if (a2 != 2)
  {
    if (a2)
    {
      __int16 v16 = *a3;
      ot::ToUlong(*((unsigned int *)a3 + 1));
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BbrLeader",  "Rloc16:0x%4x, seqno:%u, delay:%u, timeout:%lu",  v10,  v11,  v12,  v13,  v14,  v15,  v16);
    }
  }

char *ot::BackboneRouter::Leader::StateToString(unsigned __int8 a1)
{
  return ot::BackboneRouter::Leader::StateToString(ot::BackboneRouter::Leader::State)::kStateStrings[a1];
}

void ot::BackboneRouter::Leader::LogDomainPrefix(uint64_t a1, unsigned __int8 a2, ot::Ip6::Prefix *a3)
{
  char v9 = ot::String<(unsigned short)45>::AsCString((uint64_t)v11);
  ot::BackboneRouter::Leader::DomainPrefixStateToString(a2);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLeader", "Domain Prefix: %s, state: %s", v3, v4, v5, v6, v7, v8, v9);
}

char *ot::BackboneRouter::Leader::DomainPrefixStateToString(unsigned __int8 a1)
{
  return ot::BackboneRouter::Leader::DomainPrefixStateToString(ot::BackboneRouter::Leader::DomainPrefixState)::kPrefixStateStrings[a1];
}

uint64_t ot::BackboneRouter::Leader::Update(ot::BackboneRouter::Leader *this)
{
  return ot::BackboneRouter::Leader::UpdateDomainPrefixConfig(this);
}

void ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary(ot::BackboneRouter::Leader *this)
{
  uint64_t v19 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
  ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(v1, (uint64_t)&v17);
  if ((unsigned __int16)v17 == *(unsigned __int16 *)this)
  {
    if ((unsigned __int16)v17 == 65534)
    {
      unsigned __int8 v16 = 0;
    }

    else if (v18 == *((unsigned __int8 *)this + 8))
    {
      else {
        unsigned __int8 v16 = 4;
      }
    }

    else
    {
      unsigned __int8 v16 = 3;
    }
  }

  else if ((unsigned __int16)v17 == 65534)
  {
    unsigned __int8 v16 = 2;
  }

  else if (*(unsigned __int16 *)this == 65534)
  {
    unsigned __int8 v16 = 1;
  }

  else
  {
    unsigned __int8 v16 = 3;
  }

  if ((unsigned __int16)v17 != 65534)
  {
    unsigned int v15 = HIDWORD(v17);
    if (HIDWORD(v17) >= 0x12C) {
      unsigned int v13 = HIDWORD(v17);
    }
    else {
      unsigned int v13 = 300;
    }
    HIDWORD(v17) = v13;
    if (v13 <= 0x20C49B) {
      int v12 = HIDWORD(v17);
    }
    else {
      int v12 = 2147483;
    }
    HIDWORD(v17) = v12;
    if (v12 != v15)
    {
      char v11 = ot::ToUlong(v15);
      ot::ToUlong(HIDWORD(v17));
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"BbrLeader",  "Leader MLR Timeout is normalized from %lu to %lu",  v2,  v3,  v4,  v5,  v6,  v7,  v11);
    }
  }

  *(void *)this = v17;
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v18;
  ot::BackboneRouter::Leader::LogBackboneRouterPrimary((uint64_t)this, v16, (__int16 *)this);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  ot::BackboneRouter::Local::HandleBackboneRouterPrimaryUpdate(v8, v16, (unsigned __int16 *)this);
  char v9 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
  ot::MlrManager::HandleBackboneRouterPrimaryUpdate(v9, v16);
  uint64_t v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
  ot::DuaManager::HandleBackboneRouterPrimaryUpdate(v10, v16);
}

uint64_t ot::BackboneRouter::Leader::UpdateDomainPrefixConfig(ot::BackboneRouter::Leader *this)
{
  unsigned int v13 = this;
  unsigned int v12 = 0;
  char v8 = 0;
  while (1)
  {
    uint64_t v1 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v1,  &v12,  (ot::NetworkData::OnMeshPrefixConfig *)v10)) {
      break;
    }
    if ((v11 & 0x400) != 0)
    {
      char v8 = 1;
      break;
    }
  }

  if ((v8 & 1) != 0)
  {
    ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v10);
    if (ot::Ip6::Prefix::operator==(v2, (unsigned __int8 *)this + 12))
    {
      char v9 = 4;
      ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, 4u, (ot::BackboneRouter::Leader *)((char *)this + 12));
    }

    else
    {
      if (*((_BYTE *)this + 28)) {
        char v9 = 3;
      }
      else {
        char v9 = 1;
      }
      ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v10);
      *(_OWORD *)((char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_OWORD *)v3;
      *((_BYTE *)this + 28) = *(_BYTE *)(v3 + 16);
      ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, v9, (ot::BackboneRouter::Leader *)((char *)this + 12));
    }
  }

  else if (ot::Ip6::Prefix::GetLength((ot::BackboneRouter::Leader *)((char *)this + 12)))
  {
    ot::Ip6::Prefix::SetLength((uint64_t)this + 12, 0);
    char v9 = 2;
    ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, 2u, (ot::BackboneRouter::Leader *)((char *)this + 12));
  }

  else
  {
    char v9 = 0;
    ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, 0, (ot::BackboneRouter::Leader *)((char *)this + 12));
  }

  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  ot::BackboneRouter::Local::HandleDomainPrefixUpdate(v4, v9);
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
  return ot::DuaManager::HandleDomainPrefixUpdate(v5, v9);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MlrManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_10MlrManagerEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::DuaManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_10DuaManagerEEERT_v(a1);
}

uint64_t ot::Ip6::Prefix::GetLength(ot::Ip6::Prefix *this)
{
  return *((unsigned __int8 *)this + 16);
}

{
  return __ZNK2ot3Ip66Prefix9GetLengthEv(this);
}

void ot::NetworkData::OnMeshPrefixConfig::GetPrefix(ot::NetworkData::OnMeshPrefixConfig *this)
{
}

{
  ot::AsCoreType<otIp6Prefix>((uint64_t)this);
}

{
  __ZN2ot11NetworkData18OnMeshPrefixConfig9GetPrefixEv(this);
}

{
  __ZNK2ot11NetworkData18OnMeshPrefixConfig9GetPrefixEv(this);
}

BOOL ot::BackboneRouter::Leader::IsDomainUnicast( ot::BackboneRouter::Leader *this, const ot::Ip6::Address *a2)
{
  BOOL v4 = 0;
  if ((ot::BackboneRouter::Leader::HasDomainPrefix(this) & 1) != 0) {
    return ot::Ip6::Address::MatchesPrefix(a2, (ot::BackboneRouter::Leader *)((char *)this + 12));
  }
  return v4;
}

uint64_t ot::BackboneRouter::Leader::HasDomainPrefix(ot::BackboneRouter::Leader *this)
{
  char Length = ot::Ip6::Prefix::GetLength((ot::BackboneRouter::Leader *)((char *)this + 12));
  if (v2 | (Length == 0)) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  return v3 & 1;
}

{
  return __ZNK2ot14BackboneRouter6Leader15HasDomainPrefixEv(this);
}

uint64_t ot::Instance::Get<ot::NetworkData::Service::Manager>(uint64_t a1)
{
  return a1 + 160064;
}

{
  return __ZN2ot8Instance3GetINS_11NetworkData7Service7ManagerEEERT_v(a1);
}

ot::BackboneRouter::Local *ot::BackboneRouter::Local::Local( ot::BackboneRouter::Local *this, ot::Instance *a2)
{
  *(_BYTE *)this = 0;
  *((_DWORD *)this + mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = 3600;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 5;
  *((_BYTE *)this + 10) = ot::Random::NonCrypto::GetUint8(v2) % 127;
  *((_BYTE *)this + 1mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = 5;
  *((_BYTE *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 13);
  ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
  ot::Ip6::Prefix::SetLength(v3, 0);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::BackboneRouter::Local *)((char *)this + 40));
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::BackboneRouter::Local *)((char *)this + 40));
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
  ot::Ip6::InterfaceIdentifier::SetToLocator(Iid, 0xFC38u);
  ot::Clearable<ot::Ip6::Address>::Clear((void *)this + 9);
  *((_BYTE *)this + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
  *((_BYTE *)this + 73) = 50;
  *((_BYTE *)this + 87) = 3;
  ot::Clearable<ot::Ip6::Address>::Clear((void *)this + 11);
  double result = this;
  *((_BYTE *)this + 88) = -1;
  *((_BYTE *)this + 8ot::Mle::Tlv::SetType(this, 9) = 50;
  *((_BYTE *)this + 103) = 3;
  return result;
}

{
  ot::BackboneRouter::Local::Local(this, a2);
  return this;
}

uint64_t ot::Random::NonCrypto::GetUint8(ot::Random::NonCrypto *this)
{
  return ot::Random::NonCrypto::GetUint32(this);
}

{
  return __ZN2ot6Random9NonCrypto8GetUint8Ev(this);
}

uint64_t ot::Ip6::Address::GetIid(ot::Ip6::Address *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return __ZN2ot3Ip67Address6GetIidEv(this);
}

{
  return __ZNK2ot3Ip67Address6GetIidEv(this);
}

void ot::BackboneRouter::Local::SetEnabled(ot::BackboneRouter::Local *this, char a2)
{
  char v3 = a2 & 1;
  if ((a2 & 1) != ot::BackboneRouter::Local::IsEnabled(this))
  {
    if ((v3 & 1) != 0)
    {
      ot::BackboneRouter::Local::SetState(this, 1u);
      ot::BackboneRouter::Local::AddDomainPrefixToNetworkData(this);
      ot::BackboneRouter::Local::AddService(this, 0);
      IgnoreError();
    }

    else
    {
      ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(this);
      ot::BackboneRouter::Local::RemoveService(this);
      ot::BackboneRouter::Local::SetState(this, 0);
    }
  }

ot::InstanceLocator *ot::BackboneRouter::Local::SetState(ot::InstanceLocator *result, unsigned __int8 a2)
{
  __int16 v11 = result;
  if (*(unsigned __int8 *)result != a2)
  {
    if (!*(_BYTE *)result)
    {
      char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(result);
      ot::Mle::Mle::GetMeshLocalPrefix(v2);
      ot::Ip6::Address::SetMulticastNetworkPrefix((ot::InstanceLocator *)((char *)v11 + 72), v3);
    }

    if (*(_BYTE *)v11 == 2)
    {
      BOOL v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v11);
      ot::Ip6::Netif::RemoveUnicastAddress(v4, (ot::InstanceLocator *)((char *)v11 + 40));
    }

    else if (a2 == 2)
    {
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::InstanceLocator *)((char *)v11 + 40));
      uint64_t v10 = v5;
      uint64_t v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v11);
      ot::Mle::Mle::GetMeshLocalPrefix(v6);
      ot::Ip6::Address::SetPrefix(v10, v7);
      char v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v11);
      ot::Ip6::Netif::AddUnicastAddress(v8, (ot::InstanceLocator *)((char *)v11 + 40));
    }

    *(_BYTE *)__int16 v11 = a2;
    if (*(_BYTE *)v11)
    {
      if (*(_BYTE *)v11 == 1) {
        ++*((_WORD *)v11 + 62);
      }
      else {
        ++*((_WORD *)v11 + 60);
      }
    }

    else
    {
      ++*((_WORD *)v11 + 61);
    }

    char v9 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(v11);
    return (ot::InstanceLocator *)ot::Notifier::Signal(v9, 0x2000000LL);
  }

  return result;
}

void ot::BackboneRouter::Local::AddDomainPrefixToNetworkData(ot::BackboneRouter::Local *this)
{
  int v7 = 23;
  ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
  char Length = ot::Ip6::Prefix::GetLength(v1);
  if (v3 | (Length == 0)) {
    char v4 = 1;
  }
  else {
    char v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (ot::NetworkData::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    int v7 = ot::NetworkData::Local::AddOnMeshPrefix(v5, (ot::BackboneRouter::Local *)((char *)this + 16));
  }

  ot::BackboneRouter::Local::LogDomainPrefix((uint64_t)this, (char)"Add", v7);
}

uint64_t ot::BackboneRouter::Local::AddService(ot::BackboneRouter::Local *this, char a2)
{
  uint64_t v14 = this;
  char v13 = a2 & 1;
  unsigned int v12 = 13;
  if (*(_BYTE *)this)
  {
    char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (ot::Mle::Mle::IsAttached(v2))
    {
      if ((v13 & 1) != 0
        || (char v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this),
            !ot::BackboneRouter::Leader::HasPrimary(v3))
        || (char v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this),
            int Server16 = (unsigned __int16)ot::BackboneRouter::Leader::GetServer16(v4),
            uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
            Server16 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v5)))
      {
        ot::NetworkData::Service::BackboneRouter::ServerData::SetSequenceNumber(v11, *((_BYTE *)this + 10));
        ot::NetworkData::Service::BackboneRouter::ServerData::SetReregistrationDelay( (ot::NetworkData::Service::BackboneRouter::ServerData *)v11,  *((_WORD *)this + 4));
        ot::NetworkData::Service::BackboneRouter::ServerData::SetMlrTimeout( (ot::NetworkData::Service::BackboneRouter::ServerData *)v11,  *((_DWORD *)this + 1));
        uint64_t v6 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
        unsigned int v12 = ot::NetworkData::Service::Manager::Add<ot::NetworkData::Service::BackboneRouter>( v6,  (ot::NetworkData::Service::BackboneRouter::ServerData *)v11,  1);
        if (!v12)
        {
          int v7 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
          ot::NetworkData::Notifier::HandleServerDataUpdated(v7);
          *((_BYTE *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
        }
      }
    }
  }

  ot::BackboneRouter::Local::LogBackboneRouterService((uint64_t)this, (char)"Add", v12);
  return v12;
}

void ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(ot::BackboneRouter::Local *this)
{
  int v4 = 23;
  if (*((_BYTE *)this + 32))
  {
    char v2 = (ot::NetworkData::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
    int v4 = ot::NetworkData::Local::RemoveOnMeshPrefix(v2, v1);
  }

  ot::BackboneRouter::Local::LogDomainPrefix((uint64_t)this, (char)"Remove", v4);
}

void ot::BackboneRouter::Local::RemoveService(ot::BackboneRouter::Local *this)
{
  uint64_t v1 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
  int v4 = ot::NetworkData::Service::Manager::Remove<ot::NetworkData::Service::BackboneRouter>(v1);
  if (!v4)
  {
    char v2 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    ot::NetworkData::Notifier::HandleServerDataUpdated(v2);
    *((_BYTE *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  }

  ot::BackboneRouter::Local::LogBackboneRouterService((uint64_t)this, (char)"Remove", v4);
}

void ot::BackboneRouter::Local::Reset(ot::BackboneRouter::Local *this)
{
  if (*(_BYTE *)this)
  {
    ot::BackboneRouter::Local::RemoveService(this);
    if (*(_BYTE *)this == 2)
    {
      ot::BackboneRouter::Local::SequenceNumberIncrease((uint64_t)this);
      uint64_t v1 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v1, 0x4000000LL);
      ot::BackboneRouter::Local::SetState(this, 1u);
    }
  }

uint64_t ot::BackboneRouter::Local::SequenceNumberIncrease(uint64_t this)
{
  int v3 = *(unsigned __int8 *)(this + 10);
  if (v3 == 127 || v3 == 126)
  {
    *(_BYTE *)(this + 10) = 0;
  }

  else if (v3 == 255 || v3 == 254)
  {
    *(_BYTE *)(this + 10) = 0x80;
  }

  else
  {
    ++*(_BYTE *)(this + 10);
  }

  return this;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Notifier>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_8NotifierEEERT_v(a1);
}

uint64_t ot::BackboneRouter::Local::GetConfig(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 10);
  *(_WORD *)(a2 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(result + 8);
  *(_DWORD *)(a2 + ++*(_WORD *)(this + 4) = *(_DWORD *)(result + 4);
  return result;
}

uint64_t ot::BackboneRouter::Local::SetConfig(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 0;
  char v5 = 0;
  if (*(_DWORD *)(a2 + 4) >= 0x12Cu
    && *(_DWORD *)(a2 + 4) <= 0x20C49Bu
    && *(_WORD *)(a2 + 2)
    && *(_DWORD *)(a2 + 4) > 2 * *(unsigned __int16 *)(a2 + 2))
  {
    if (*(unsigned __int16 *)(a2 + 2) != *(unsigned __int16 *)(a1 + 8))
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 2);
      char v5 = 1;
    }

    if (*(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4))
    {
      *(_DWORD *)(a1 + ++*(_WORD *)(this + 4) = *(_DWORD *)(a2 + 4);
      char v5 = 1;
    }

    if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 10))
    {
      *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 8);
      char v5 = 1;
    }

    if ((v5 & 1) != 0)
    {
      char v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
      ot::Notifier::Signal(v2, 0x4000000LL);
      ot::BackboneRouter::Local::AddService((ot::BackboneRouter::Local *)a1, 0);
      IgnoreError();
    }

    ot::BackboneRouter::Local::LogBackboneRouterService(a1, (char)"Set", 0);
  }

  else
  {
    unsigned int v6 = 7;
    ot::BackboneRouter::Local::LogBackboneRouterService(a1, (char)"Set", 7);
  }

  return v6;
}

void ot::BackboneRouter::Local::LogBackboneRouterService(uint64_t a1, char a2, int a3)
{
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::Leader>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14BackboneRouter6LeaderEEERT_v(a1);
}

uint64_t ot::BackboneRouter::Leader::GetServer16(ot::BackboneRouter::Leader *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot14BackboneRouter6Leader11GetServer16Ev(this);
}

_BYTE *ot::NetworkData::Service::BackboneRouter::ServerData::SetSequenceNumber(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

{
  return __ZN2ot11NetworkData7Service14BackboneRouter10ServerData17SetSequenceNumberEh(this, a2);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::SetReregistrationDelay( ot::NetworkData::Service::BackboneRouter::ServerData *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = result;
  return result;
}

{
  return __ZN2ot11NetworkData7Service14BackboneRouter10ServerData22SetReregistrationDelayEt(this, a2);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::SetMlrTimeout( ot::NetworkData::Service::BackboneRouter::ServerData *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 3) = result;
  return result;
}

{
  return __ZN2ot11NetworkData7Service14BackboneRouter10ServerData13SetMlrTimeoutEj(this, a2);
}

uint64_t ot::NetworkData::Service::Manager::Add<ot::NetworkData::Service::BackboneRouter>( ot::NetworkData::Service::Manager *a1, ot::NetworkData::Service::BackboneRouter::ServerData *a2, char a3)
{
  char v5 = a3 & 1;
  char Length = ot::NetworkData::Service::BackboneRouter::ServerData::GetLength(a2);
  return ot::NetworkData::Service::Manager::AddService( a1,  (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData,  1,  v5 & 1,  (uint64_t)a2,  Length);
}

{
  return __ZN2ot11NetworkData7Service7Manager3AddINS1_14BackboneRouterEEE7otErrorRKNT_10ServerDataEb(a1, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Notifier>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11NetworkData8NotifierEEERT_v(a1);
}

uint64_t ot::NetworkData::Service::Manager::Remove<ot::NetworkData::Service::BackboneRouter>( ot::NetworkData::Service::Manager *a1)
{
  return ot::NetworkData::Service::Manager::RemoveService( a1,  (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData,  1);
}

{
  return __ZN2ot11NetworkData7Service7Manager6RemoveINS1_14BackboneRouterEEE7otErrorv(a1);
}

void *ot::Ip6::Address::SetMulticastNetworkPrefix(ot::Ip6::Address *a1, unsigned __int8 *a2)
{
  return ot::Ip6::Address::SetMulticastNetworkPrefix(a1, a2, 0x40u);
}

{
  return __ZN2ot3Ip67Address25SetMulticastNetworkPrefixERKNS0_13NetworkPrefixE(a1, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::ThreadNetif>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11ThreadNetifEEERT_v(a1);
}

void ot::BackboneRouter::Local::HandleBackboneRouterPrimaryUpdate( uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  if (ot::BackboneRouter::Local::IsEnabled((ot::BackboneRouter::Local *)a1))
  {
    uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
    if (ot::Mle::Mle::IsAttached(v3))
    {
      if (*a3 == 65534)
      {
        char v12 = 1;
        uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        if (!ot::Mle::Mle::IsLeader(v4))
        {
          else {
            char Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0LL, *(_BYTE *)(a1 + 11) + 1);
          }
          char v12 = Uint8InRange + 1;
        }

        uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Mle::MleRouter::SetBackboneRouterRegistrationDelay(v6, v12);
      }

      else
      {
        int v10 = *a3;
        uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        if (v10 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v7))
        {
          if ((*(_BYTE *)(a1 + 12) & 1) != 0)
          {
            ot::BackboneRouter::Local::SetState((ot::InstanceLocator *)a1, 2u);
          }

          else
          {
            *(_BYTE *)(a1 + 10) = *((_BYTE *)a3 + 8);
            *(_WORD *)(a1 + 8) = a3[1];
            *(_DWORD *)(a1 + ++*(_WORD *)(this + 4) = *((_DWORD *)a3 + 1);
            ot::BackboneRouter::Local::SequenceNumberIncrease(a1);
            uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
            ot::Notifier::Signal(v8, 0x4000000LL);
            if (!ot::BackboneRouter::Local::AddService((ot::BackboneRouter::Local *)a1, 1))
            {
              char v9 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>((ot::InstanceLocator *)a1);
              ot::NetworkData::Notifier::HandleServerDataUpdated(v9);
            }
          }
        }

        else
        {
          ot::BackboneRouter::Local::Reset((ot::BackboneRouter::Local *)a1);
        }
      }
    }
  }

BOOL ot::Mle::Mle::IsLeader(ot::Mle::Mle *this)
{
  return *((_BYTE *)this + 41) == 4;
}

{
  return __ZNK2ot3Mle3Mle8IsLeaderEv(this);
}

uint64_t ot::Mle::MleRouter::SetBackboneRouterRegistrationDelay(uint64_t this, char a2)
{
  *(_BYTE *)(this + 46258) = a2;
  return this;
}

{
  return __ZN2ot3Mle9MleRouter34SetBackboneRouterRegistrationDelayEh(this, a2);
}

uint64_t ot::BackboneRouter::Local::GetDomainPrefix( ot::BackboneRouter::Local *this, ot::NetworkData::OnMeshPrefixConfig *a2)
{
  unsigned int v8 = 0;
  ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
  char Length = ot::Ip6::Prefix::GetLength(v2);
  if (v4 | (Length == 0)) {
    char v5 = 0;
  }
  else {
    char v5 = 1;
  }
  if ((v5 & 1) != 0)
  {
    *(_OWORD *)a2 = *((_OWORD *)this + 1);
    *((void *)a2 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((void *)this + 4);
  }

  else
  {
    return 23;
  }

  return v8;
}

uint64_t ot::BackboneRouter::Local::RemoveDomainPrefix( ot::BackboneRouter::Local *this, const ot::Ip6::Prefix *a2)
{
  unsigned int v9 = 0;
  char Length = ot::Ip6::Prefix::GetLength(a2);
  if (v3 | (Length == 0)) {
    char v4 = 0;
  }
  else {
    char v4 = 1;
  }
  if ((v4 & 1) != 0)
  {
    ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
    if (ot::Ip6::Prefix::operator==(v5, (unsigned __int8 *)a2))
    {
      if (ot::BackboneRouter::Local::IsEnabled(this)) {
        ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(this);
      }
      ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
      ot::Ip6::Prefix::SetLength(v6, 0);
    }

    else
    {
      return 23;
    }
  }

  else
  {
    return 7;
  }

  return v9;
}

uint64_t ot::BackboneRouter::Local::SetDomainPrefix( ot::BackboneRouter::Local *this, const ot::NetworkData::OnMeshPrefixConfig *a2)
{
  unsigned int v6 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  if ((ot::NetworkData::OnMeshPrefixConfig::IsValid(a2, Instance) & 1) != 0)
  {
    if (ot::BackboneRouter::Local::IsEnabled(this)) {
      ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(this);
    }
    *((_OWORD *)this + mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = *(_OWORD *)a2;
    *((void *)this + ++*(_WORD *)(this + 4) = *((void *)a2 + 2);
    ot::BackboneRouter::Local::LogDomainPrefix((uint64_t)this, (char)"Set", 0);
    if (ot::BackboneRouter::Local::IsEnabled(this)) {
      ot::BackboneRouter::Local::AddDomainPrefixToNetworkData(this);
    }
  }

  else
  {
    return 7;
  }

  return v6;
}

void ot::BackboneRouter::Local::LogDomainPrefix(uint64_t a1, char a2, int a3)
{
}

uint64_t ot::BackboneRouter::Local::ApplyMeshLocalPrefix(ot::BackboneRouter::Local *this)
{
  uint64_t result = ot::BackboneRouter::Local::IsEnabled(this);
  if ((result & 1) != 0)
  {
    char v2 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(this);
    ot::BackboneRouter::BackboneTmfAgent::UnsubscribeMulticast(v2, (ot::BackboneRouter::Local *)((char *)this + 72));
    char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::GetMeshLocalPrefix(v3);
    ot::Ip6::Address::SetMulticastNetworkPrefix((ot::BackboneRouter::Local *)((char *)this + 72), v4);
    uint64_t v5 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(this);
    ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(v5, (ot::BackboneRouter::Local *)((char *)this + 72));
    uint64_t result = ot::BackboneRouter::Local::IsPrimary(this);
    if ((result & 1) != 0)
    {
      uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v6, (ot::BackboneRouter::Local *)((char *)this + 40));
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::BackboneRouter::Local *)((char *)this + 40));
      __int16 v11 = v7;
      uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::GetMeshLocalPrefix(v8);
      ot::Ip6::Address::SetPrefix(v11, v9);
      int v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      return ot::Ip6::Netif::AddUnicastAddress(v10, (ot::BackboneRouter::Local *)((char *)this + 40));
    }
  }

  return result;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>( ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::BackboneTmfAgent>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14BackboneRouter16BackboneTmfAgentEEERT_v(a1);
}

BOOL ot::BackboneRouter::Local::IsPrimary(ot::BackboneRouter::Local *this)
{
  return *(_BYTE *)this == 2;
}

{
  return __ZNK2ot14BackboneRouter5Local9IsPrimaryEv(this);
}

uint64_t ot::BackboneRouter::Local::HandleDomainPrefixUpdate(void *a1, char a2)
{
  int v18 = a1;
  char v17 = a2;
  uint64_t result = ot::BackboneRouter::Local::IsEnabled((ot::BackboneRouter::Local *)a1);
  if ((result & 1) != 0)
  {
    if (v17 == 2 || v17 == 3)
    {
      char v3 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>((ot::InstanceLocator *)a1);
      ot::BackboneRouter::BackboneTmfAgent::UnsubscribeMulticast(v3, (const ot::Ip6::Address *)(a1 + 11));
    }

    if (v17 == 1 || v17 == 3)
    {
      uint64_t v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
      DomainPrefix = (const ot::Ip6::Prefix *)ot::BackboneRouter::Leader::GetDomainPrefix(v4);
      ot::Ip6::Address::SetMulticastNetworkPrefix((ot::Ip6::Address *)(a1 + 11), DomainPrefix);
      uint64_t v6 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>((ot::InstanceLocator *)a1);
      ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(v6, (const ot::Ip6::Address *)(a1 + 11));
    }

    uint64_t result = ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::IsSet(a1 + 13);
    if ((result & 1) != 0)
    {
      switch(v17)
      {
        case 1:
          unsigned int v16 = 0;
          uint64_t v7 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
          uint64_t v15 = ot::BackboneRouter::Leader::GetDomainPrefix(v7);
          return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>( (uint64_t)(a1 + 13),  &v16,  &v15);
        case 2:
          unsigned int v14 = 1;
          uint64_t v8 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
          uint64_t v13 = ot::BackboneRouter::Leader::GetDomainPrefix(v8);
          return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>( (uint64_t)(a1 + 13),  &v14,  &v13);
        case 3:
          unsigned int v12 = 2;
          uint64_t v9 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
          uint64_t v11 = ot::BackboneRouter::Leader::GetDomainPrefix(v9);
          return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>( (uint64_t)(a1 + 13),  &v12,  &v11);
      }
    }
  }

  return result;
}

void *ot::Ip6::Address::SetMulticastNetworkPrefix(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2)
{
  uint64_t v5 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  return ot::Ip6::Address::SetMulticastNetworkPrefix(this, v5, Length);
}

{
  return __ZN2ot3Ip67Address25SetMulticastNetworkPrefixERKNS0_6PrefixE(this, a2);
}

uint64_t ot::BackboneRouter::Leader::GetDomainPrefix(ot::BackboneRouter::Leader *this)
{
  else {
    return 0LL;
  }
}

{
  return __ZNK2ot14BackboneRouter6Leader15GetDomainPrefixEv(this);
}

BOOL ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::IsSet( void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPv33otBackboneRouterDomainPrefixEventPK11otIp6PrefixEE5IsSetEv(a1);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>( uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return __ZNK2ot8CallbackIPFvPv33otBackboneRouterDomainPrefixEventPK11otIp6PrefixELNS_23CallbackContextPositionE0EE6InvokeIJS2_PKNS_3Ip66PrefixEEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Local>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11NetworkData5LocalEEERT_v(a1);
}

uint64_t ot::Random::NonCrypto::GetUint32(ot::Random::NonCrypto *this)
{
  return ot::Random::Manager::NonCryptoGetUint32(this);
}

{
  return __ZN2ot6Random9NonCrypto9GetUint32Ev(this);
}

uint64_t ot::Encoding::BigEndian::HostSwap32(ot::Encoding::BigEndian *this)
{
  return ot::Encoding::Swap32((ot::Encoding *)this);
}

{
  return __ZN2ot8Encoding9BigEndian10HostSwap32Ej(this);
}

uint64_t ot::Encoding::Swap32(ot::Encoding *this)
{
  return (((unsigned __int16)this & 0xFF00) << 8) | (this << 24) | ((this & 0xFF0000) >> 8) | ((this & 0xFF000000) >> 24);
}

  ;
}

{
  return __ZN2ot8Encoding6Swap32Ej(this);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetLength( ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return 7LL;
}

{
  return __ZNK2ot11NetworkData7Service14BackboneRouter10ServerData9GetLengthEv(this);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::BackboneTmfAgent>(uint64_t a1)
{
  return ot::BackboneRouter::Manager::GetBackboneTmfAgent((ot::BackboneRouter::Manager *)(a1 + 162424));
}

{
  return __ZN2ot8Instance3GetINS_14BackboneRouter16BackboneTmfAgentEEERT_v(a1);
}

uint64_t ot::BackboneRouter::Manager::GetBackboneTmfAgent(ot::BackboneRouter::Manager *this)
{
  return (uint64_t)this + 1552;
}

{
  return __ZN2ot14BackboneRouter7Manager19GetBackboneTmfAgentEv(this);
}

ot::BackboneRouter::Manager *ot::BackboneRouter::Manager::Manager( ot::BackboneRouter::Manager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::BackboneRouter::Manager::Manager(this, a2);
  return this;
}

uint64_t ot::BackboneRouter::Manager::HandleTimer(ot::BackboneRouter::Manager *this)
{
  return ot::TimerMilli::Start((ot::BackboneRouter::Manager *)((char *)this + 1528), 0x3E8u);
}

ot::BackboneRouter::MulticastListenersTable *ot::BackboneRouter::MulticastListenersTable::MulticastListenersTable( ot::BackboneRouter::MulticastListenersTable *this, ot::Instance *a2)
{
  return this;
}

{
  BOOL v2;
  ot::BackboneRouter::MulticastListenersTable *v5;
  ot::InstanceLocator::InstanceLocator();
  uint64_t v5 = this;
  do
  {
    ot::BackboneRouter::MulticastListenersTable::Listener::Listener(v5);
    char v2 = (char *)v5 + 20 != (char *)this + 1500;
    uint64_t v5 = (ot::BackboneRouter::MulticastListenersTable *)((char *)v5 + 20);
  }

  while (v2);
  *((_WORD *)this + 750) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 188);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::BackboneRouter::Manager,&ot::BackboneRouter::Manager::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::BackboneRouter::Manager,&ot::BackboneRouter::Manager::HandleTimer>::HandleTimer);
  return a1;
}

void ot::BackboneRouter::Manager::HandleNotifierEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  if (ot::Events::Contains(&v20, 0x2000000LL))
  {
    char v2 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>((ot::InstanceLocator *)a1);
    if (ot::BackboneRouter::Local::IsEnabled(v2))
    {
      if (!ot::Timer::IsRunning((ot::Timer *)(a1 + 1528))) {
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 1528), 0x3E8u);
      }
      int v19 = ot::BackboneRouter::BackboneTmfAgent::Start((ot::BackboneRouter::BackboneTmfAgent *)(a1 + 1552));
      ot::BackboneRouter::Manager::LogError(a1, (char)"Start Backbone TMF agent", v19);
    }

    else
    {
      ot::BackboneRouter::MulticastListenersTable::Clear((ot::BackboneRouter::MulticastListenersTable *)(a1 + 8));
      ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 1528));
      int v18 = ot::Coap::Coap::Stop((ot::Coap::Coap *)(a1 + 1552));
      if (v18)
      {
        char v3 = ot::ErrorToString(v18);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"BbrManager",  "Stop Backbone TMF agent: %s",  v4,  v5,  v6,  v7,  v8,  v9,  v3);
      }

      else
      {
        char v10 = ot::ErrorToString(0);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BbrManager",  "Stop Backbone TMF agent: %s",  v11,  v12,  v13,  v14,  v15,  v16,  v10);
      }
    }
  }

void ot::BackboneRouter::Manager::LogError(uint64_t a1, char a2, int a3)
{
  if (a3)
  {
    ot::ErrorToString(a3);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"BbrManager", "%s: %s", v9, v10, v11, v12, v13, v14, a2);
  }

  else
  {
    ot::ErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "%s: %s", v3, v4, v5, v6, v7, v8, a2);
  }

void ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)38>( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(a1);
  if (ot::BackboneRouter::Local::IsEnabled(v3)) {
    ot::BackboneRouter::Manager::HandleMulticastListenerRegistration(a1, a2, a3);
  }
}

void ot::BackboneRouter::Manager::HandleMulticastListenerRegistration( ot::BackboneRouter::Manager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  v54 = this;
  v53 = a2;
  v52 = a3;
  v51[4] = 0;
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  *(_DWORD *)v51 = ot::BackboneRouter::Local::IsPrimary(v3);
  int v50 = 0;
  unsigned __int8 v44 = 0;
  unsigned __int8 v43 = 0;
  char v39 = 0;
  BOOL v38 = 0;
  if (!ot::Coap::Message::IsConfirmablePostRequest(v53))
  {
    *(_DWORD *)&v51[1] = 6;
    goto LABEL_43;
  }

  if ((v51[0] & 1) == 0)
  {
    int v50 = 5;
    goto LABEL_43;
  }

  if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(v53, &v40, v4, v5))
  {
    uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v9, 0xBu);
    ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
    *(void *)&v37[1] = v10;
    if (!v10
      || (unsigned __int16 CommissionerSessionId = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(*(ot::MeshCoP::CommissionerSessionIdTlv **)&v37[1]),
          v40 != CommissionerSessionId))
    {
      int v50 = 6;
      goto LABEL_43;
    }

    char v39 = 1;
  }

  BOOL v31 = 0;
  if ((v39 & 1) != 0) {
    BOOL v31 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(v53, &v41, v6, v7) == 0;
  }
  BOOL v38 = v31;
  TlvValueOffset = (ot::TimerMilli *)ot::Tlv::FindTlvValueOffset(v53, (const ot::Message *)0xE, &v47, &v46, v8);
  if ((_DWORD)TlvValueOffset)
  {
    *(_DWORD *)&v51[1] = 6;
    goto LABEL_43;
  }

  if (v46 % 0x10uLL)
  {
    int v50 = 6;
    goto LABEL_43;
  }

  if (v46 / 0x10uLL > 0xF)
  {
    int v50 = 6;
    goto LABEL_43;
  }

  if (v38)
  {
    if (v41 == -1)
    {
      int v50 = 3;
      goto LABEL_43;
    }

    if (v41)
    {
      v37[0] = v41;
      TlvValueOffset = (ot::TimerMilli *)ot::Min<unsigned int>(v41, 0x20C49Bu);
      unsigned int v41 = TlvValueOffset;
      if ((_DWORD)TlvValueOffset != v37[0])
      {
        char v30 = ot::ToUlong(v37[0]);
        ot::ToUlong(v41);
        ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"BbrManager",  "MLR.req: MLR timeout is normalized from %lu to %lu",  v14,  v15,  v16,  v17,  v18,  v19,  v30);
      }
    }
  }

  else
  {
    uint64_t v13 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    ot::BackboneRouter::Leader::GetConfig(v13, (uint64_t)v48);
    IgnoreError();
    unsigned int v41 = v49;
  }

  int Now = ot::TimerMilli::GetNow(TlvValueOffset);
  int v20 = ot::Time::SecToMsec((ot::Time *)v41);
  int v36 = ot::Time::operator+(&Now, v20);
  int v42 = v36;
  for (unsigned __int16 i = 0; i < (int)v46; i += 16)
  {
    ot::Message::Read<ot::Ip6::Address>(v53, v47 + i, (char *)&v45);
    IgnoreError();
    if (v41)
    {
      char v33 = 1;
      int v29 = ot::BackboneRouter::MulticastListenersTable::Add((uint64_t)this + 8, (ot::Ip6::Address *)&v45, v42);
      if (v29)
      {
        if (v29 == 3)
        {
          if (!v50) {
            int v50 = 4;
          }
        }

        else
        {
          if (v29 != 7) {
            __assert_rtn("HandleMulticastListenerRegistration", "bbr_manager.cpp", 256, "false");
          }
          if (!v50) {
            int v50 = 2;
          }
        }
      }

      else
      {
        char v33 = 0;
      }

      if ((v33 & 1) != 0)
      {
        uint64_t v21 = v44++;
        v56[v21] = v45;
      }

      else
      {
        ot::Ip6::Address::ToString((ot::Ip6::Address *)&v45, (ot::StringWriter *)v55);
        char v22 = ot::String<(unsigned short)40>::AsCString((uint64_t)v55);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"BbrManager",  "Registered address:%s is added to the addresses list successfuly",  v23,  v24,  v25,  v26,  v27,  v28,  v22);
        v56[15 - ++v43] = v45;
      }
    }

    else
    {
      ot::BackboneRouter::MulticastListenersTable::Remove( (ot::BackboneRouter::Manager *)((char *)this + 8),  (const ot::Ip6::Address *)&v45);
      v56[15 - ++v43] = v45;
    }
  }

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)15,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0xFu, a2, a4);
}

  ;
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh15EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

void ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(uint64_t a1, unsigned __int8 a2)
{
}

{
  __ZN2ot11NetworkData10LeaderBase26GetCommissioningDataSubTlvENS_7MeshCoP3Tlv4TypeE(a1, a2);
}

uint64_t ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId( ot::MeshCoP::CommissionerSessionIdTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot7MeshCoP24CommissionerSessionIdTlv24GetCommissionerSessionIdEv(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)11,unsigned int>>( ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 0xBu, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh11EjEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Time::operator+(_DWORD *a1, int a2)
{
  return v3;
}

{
  return __ZNK2ot4TimeplEj(a1, a2);
}

void ot::BackboneRouter::Manager::SendMulticastListenerRegistrationResponse( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, int a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v25 = a1;
  uint64_t v24 = a2;
  uint64_t v23 = a3;
  int v22 = a4;
  uint64_t v21 = a5;
  unsigned __int8 v20 = a6;
  int v19 = 0;
  uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v18 = ot::Coap::CoapBase::NewResponseMessage(v6, v24);
  if (v18)
  {
    if (!ot::Tlv::Append<ot::ThreadStatusTlv>((uint64_t)v18, v22))
    {
      if (v20)
      {
        ot::Ip6AddressesTlv::Init((ot::Ip6AddressesTlv *)v17);
        ot::Tlv::SetLength((uint64_t)v17, 16 * v20);
        int v19 = ot::Message::Append<ot::Ip6AddressesTlv>(v18, v17);
        if (v19) {
          goto LABEL_11;
        }
        for (unsigned __int8 i = 0; i < (int)v20; ++i)
        {
          int v19 = ot::Message::Append<ot::Ip6::Address>(v18, (char *)(v21 + 16LL * i));
          if (v19) {
            goto LABEL_11;
          }
        }
      }

      uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v19 = ot::Coap::CoapBase::SendMessage(v7, v18, v23);
    }
  }

  else
  {
    int v19 = 3;
  }

void ot::BackboneRouter::Manager::SendBackboneMulticastListenerRegistration( ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, unsigned __int8 a3, unsigned int a4)
{
  v32 = this;
  BOOL v31 = (char *)a2;
  unsigned __int8 v30 = a3;
  unsigned int v29 = a4;
  int appended = 0;
  uint64_t v27 = 0LL;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v26);
  uint64_t v24 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(this);
  BOOL v23 = 0;
  if (v30) {
    BOOL v23 = v30 <= 0xFu;
  }
  if (!v23) {
    __assert_rtn( "SendBackboneMulticastListenerRegistration",  "bbr_manager.cpp",  333,  "aAddressNum >= Ip6AddressesTlv::kMinAddresses && aAddressNum <= Ip6AddressesTlv::kMaxAddresses");
  }
  uint64_t v27 = ot::Coap::CoapBase::NewNonConfirmablePostMessage(v24, 8u);
  if (v27)
  {
    ot::Ip6AddressesTlv::Init((ot::Ip6AddressesTlv *)v25);
    ot::Tlv::SetLength((uint64_t)v25, 16 * v30);
    int appended = ot::Message::Append<ot::Ip6AddressesTlv>(v27, v25);
    if (!appended)
    {
      int appended = ot::Message::AppendBytes(v27, v31, 16 * v30);
      if (!appended)
      {
        int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(v27, v29);
        if (!appended)
        {
          uint64_t v4 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
          AllNetworkBackboneRoutersAddress = (__n128 *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v4);
          ot::Ip6::MessageInfo::SetPeerAddr(v26, AllNetworkBackboneRoutersAddress);
          ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v26, 61631);
          uint64_t v6 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
          uint64_t v7 = (ot::Ip6::Address *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v6);
          ot::Ip6::Address::ToString(v7, (ot::StringWriter *)v33);
          char v8 = ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
          ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"BbrManager",  "Send BMLR to address:%s port:%d",  v9,  v10,  v11,  v12,  v13,  v14,  v8);
          ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v26, 1);
          ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)v26, 1);
          int appended = ot::Coap::CoapBase::SendMessage(v24, v27, (const ot::Ip6::MessageInfo *)v26);
        }
      }
    }
  }

  else
  {
    int appended = 3;
  }

  if (appended && v27) {
    ot::Message::Free(v27);
  }
  char v15 = ot::ErrorToString(appended);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Sent BMLR.ntf: %s", v16, v17, v18, v19, v20, v21, v15);
}

uint64_t ot::Tlv::Append<ot::ThreadStatusTlv>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 4, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_15ThreadStatusTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

_BYTE *ot::Ip6AddressesTlv::Init(ot::Ip6AddressesTlv *this)
{
  return ot::ThreadTlv::SetType(this, 14);
}

{
  return __ZN2ot15Ip6AddressesTlv4InitEv(this);
}

uint64_t ot::Message::Append<ot::Ip6AddressesTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_15Ip6AddressesTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Message::Append<ot::Ip6::Address>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return __ZN2ot7Message6AppendINS_3Ip67AddressEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 0xBu, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh11EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

__n128 ot::Ip6::MessageInfo::SetPeerAddr(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  this[1] = *a2;
  return result;
}

uint64_t ot::Ip6::MessageInfo::SetHopLimit(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

{
  return __ZN2ot3Ip611MessageInfo11SetHopLimitEh(this, a2);
}

uint64_t ot::Ip6::MessageInfo::SetIsHostInterface(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4ot::Mle::Tlv::SetType(this, 9) = *(_BYTE *)(this + 49) & 0xFB | (4 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Ip611MessageInfo18SetIsHostInterfaceEb(this, a2);
}

ot::BackboneRouter::MulticastListenersTable::Listener *ot::BackboneRouter::MulticastListenersTable::Listener::Listener( ot::BackboneRouter::MulticastListenersTable::Listener *this)
{
  return this;
}

{
  ot::Clearable<ot::BackboneRouter::MulticastListenersTable::Listener>::Clear((uint64_t)this);
  return this;
}

uint64_t ot::Clearable<ot::BackboneRouter::MulticastListenersTable::Listener>::Clear(uint64_t result)
{
  *(void *)__n128 result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = 0;
  return result;
}

  ;
}

  ;
}

{
  return __ZN2ot9ClearableINS_14BackboneRouter23MulticastListenersTable8ListenerEE5ClearEv(result);
}

_BYTE *ot::ThreadTlv::SetType(_BYTE *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return __ZN2ot9ThreadTlv7SetTypeENS0_4TypeE(a1, a2);
}

uint64_t ot::TimerMilliIn<ot::BackboneRouter::Manager,&ot::BackboneRouter::Manager::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  char v2 = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(a1);
  return ot::BackboneRouter::Manager::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::Manager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14BackboneRouter7ManagerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::Manager>(uint64_t a1)
{
  return a1 + 162424;
}

{
  return __ZN2ot8Instance3GetINS_14BackboneRouter7ManagerEEERT_v(a1);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::Add(uint64_t a1, ot::Ip6::Address *a2, int a3)
{
  unsigned int v15 = a3;
  uint64_t v14 = a1;
  uint64_t v13 = (__n128 *)a2;
  unsigned int v12 = 0;
  if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a2))
  {
    for (unsigned __int16 i = 0; i < (int)*(unsigned __int16 *)(a1 + 1500); ++i)
    {
      uint64_t v10 = (ot::BackboneRouter::MulticastListenersTable::Listener *)(a1 + 20LL * i);
      ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(v10);
      if (ot::Equatable<ot::Ip6::Address>::operator==(v3, v13))
      {
        v9[2] = v15;
        ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime((uint64_t)v10, v15);
        ot::BackboneRouter::MulticastListenersTable::FixHeap((ot::BackboneRouter::MulticastListenersTable *)a1, i);
        goto LABEL_11;
      }
    }

    int v6 = *(unsigned __int16 *)(a1 + 1500);
    if (v6 < (unsigned __int16)ot::GetArrayLength<ot::BackboneRouter::MulticastListenersTable::Listener,(unsigned short)75>())
    {
      ot::BackboneRouter::MulticastListenersTable::Listener::SetAddress( (__n128 *)(a1 + 20LL * *(unsigned __int16 *)(a1 + 1500)),  v13);
      uint64_t v4 = a1 + 20LL * *(unsigned __int16 *)(a1 + 1500);
      v9[1] = v15;
      ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime(v4, v15);
      ot::BackboneRouter::MulticastListenersTable::FixHeap( (ot::BackboneRouter::MulticastListenersTable *)a1,  (*(_WORD *)(a1 + 1500))++);
      v9[0] = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(0LL);
      char v8 = v13;
      ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( (void *)(a1 + 1504),  v9,  &v8);
    }

    else
    {
      unsigned int v12 = 3;
    }
  }

  else
  {
    unsigned int v12 = 7;
  }

void ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress( ot::BackboneRouter::MulticastListenersTable::Listener *this)
{
}

{
  __ZNK2ot14BackboneRouter23MulticastListenersTable8Listener10GetAddressEv(this);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = a2;
  return result;
}

{
  return __ZN2ot14BackboneRouter23MulticastListenersTable8Listener13SetExpireTimeENS_4TimeE(result, a2);
}

double ot::BackboneRouter::MulticastListenersTable::FixHeap( ot::BackboneRouter::MulticastListenersTable *this, unsigned __int16 a2)
{
  if (!ot::BackboneRouter::MulticastListenersTable::SiftHeapElemDown(this, a2)) {
    return ot::BackboneRouter::MulticastListenersTable::SiftHeapElemUp(this, a2);
  }
  return result;
}

uint64_t ot::GetArrayLength<ot::BackboneRouter::MulticastListenersTable::Listener,(unsigned short)75>()
{
  return 75LL;
}

{
  return __ZN2ot14GetArrayLengthINS_14BackboneRouter23MulticastListenersTable8ListenerELt75EEEtRAT0__KT_();
}

__n128 ot::BackboneRouter::MulticastListenersTable::Listener::SetAddress(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

void *ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( void *result, unsigned int *a2, void *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( (uint64_t)result,  a2,  a3);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvPv38otBackboneRouterMulticastListenerEventPK12otIp6AddressELNS_23CallbackContextPositionE0EE11InvokeIfSetIJS2_PKNS_3Ip67AddressEEEEvDpOT_( result,  a2,  a3);
}

uint64_t ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_14BackboneRouter23MulticastListenersTable8Listener5EventEEEKNS_10MappedEnumIT_E4TypeES6_(result);
}

void ot::BackboneRouter::MulticastListenersTable::Log( uint64_t a1, unsigned __int8 a2, ot::Ip6::Address *a3, int a4, int a5)
{
  int v14 = a4;
  unsigned int v12 = ot::BackboneRouter::MulticastListenersTable::Log(ot::BackboneRouter::MulticastListenersTable::Action,ot::Ip6::Address const&,ot::Time,otError)const::kActionStrings[a2];
  ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v15);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
  uint64_t Value = ot::Time::GetValue((ot::Time *)&v14);
  ot::ToUlong(Value);
  ot::ErrorToString(a5);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrMlt", "%s %s expire %lu: %s", v6, v7, v8, v9, v10, v11, (char)v12);
}

void ot::BackboneRouter::MulticastListenersTable::CheckInvariants( ot::BackboneRouter::MulticastListenersTable *this)
{
}

void ot::BackboneRouter::MulticastListenersTable::Remove( ot::BackboneRouter::MulticastListenersTable *this, const ot::Ip6::Address *a2)
{
  int v14 = this;
  uint64_t v13 = a2;
  int v12 = 23;
  for (unsigned __int16 i = 0; i < (int)*((unsigned __int16 *)this + 750); ++i)
  {
    uint64_t v10 = (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * i);
    ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(v10);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v2, v13))
    {
      if (i != (unsigned __int16)--*((_WORD *)this + 750))
      {
        unsigned int v3 = (char *)this + 20 * *((unsigned __int16 *)this + 750);
        uint64_t v4 = v10;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v3;
        *((_DWORD *)v4 + ++*(_WORD *)(this + 4) = *((_DWORD *)v3 + 4);
        ot::BackboneRouter::MulticastListenersTable::FixHeap(this, i);
      }

      unsigned int v9 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(1LL);
      uint64_t v8 = v13;
      ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( (void *)this + 188,  &v9,  &v8);
      int v12 = 0;
      break;
    }
  }

  uint64_t v5 = (ot::Ip6::Address *)v13;
  ot::Time::Time((ot::Time *)&v7, 0);
  ot::BackboneRouter::MulticastListenersTable::Log((uint64_t)this, 1u, v5, v7, v12);
  ot::BackboneRouter::MulticastListenersTable::CheckInvariants(this);
}

void ot::BackboneRouter::MulticastListenersTable::Expire(ot::BackboneRouter::MulticastListenersTable *this)
{
  uint64_t v13 = this;
  int Now = ot::TimerMilli::GetNow(this);
  while (1)
  {
    BOOL v5 = 0;
    if (*((_WORD *)this + 750))
    {
      ExpireTime  = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(this);
      BOOL v5 = ot::Time::operator>=(&Now, &ExpireTime);
    }

    if (!v5) {
      break;
    }
    ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(this);
    uint64_t v4 = v1;
    int v9 = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(this);
    ot::BackboneRouter::MulticastListenersTable::Log((uint64_t)this, 2u, v4, v9, 0);
    ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(this);
    __int128 v11 = *v2;
    if (--*((_WORD *)this + 750))
    {
      unsigned int v3 = (char *)this + 20 * *((unsigned __int16 *)this + 750);
      *(_OWORD *)this  = *(_OWORD *)v3;
      *((_DWORD *)this + ++*(_WORD *)(this + 4) = *((_DWORD *)v3 + 4);
      ot::BackboneRouter::MulticastListenersTable::FixHeap(this, 0);
    }

    unsigned int v8 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(1LL);
    int v7 = &v11;
    ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>( (void *)this + 188,  &v8,  &v7);
  }

  ot::BackboneRouter::MulticastListenersTable::CheckInvariants(this);
}

BOOL ot::Time::operator>=(int *a1, int *a2)
{
  return !ot::Time::operator<(a1, a2);
}

{
  return __ZNK2ot4TimegeERKS0_(a1, a2);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime( ot::BackboneRouter::MulticastListenersTable::Listener *this)
{
  return *((unsigned int *)this + 4);
}

{
  return __ZNK2ot14BackboneRouter23MulticastListenersTable8Listener13GetExpireTimeEv(this);
}

void *ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>( void *result, unsigned int *a2, void *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>( (uint64_t)result,  a2,  a3);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvPv38otBackboneRouterMulticastListenerEventPK12otIp6AddressELNS_23CallbackContextPositionE0EE11InvokeIfSetIJS2_PNS_3Ip67AddressEEEEvDpOT_( result,  a2,  a3);
}

BOOL ot::BackboneRouter::MulticastListenersTable::SiftHeapElemDown( ot::BackboneRouter::MulticastListenersTable *this, unsigned __int16 a2)
{
  uint64_t v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int16 v11 = a2;
  ot::BackboneRouter::MulticastListenersTable::Listener::Listener((ot::BackboneRouter::MulticastListenersTable::Listener *)&v9);
  uint64_t v2 = 20LL * v12;
  __int128 v9 = *(_OWORD *)((char *)this + v2);
  int v10 = *(_DWORD *)((char *)this + v2 + 16);
  while (1)
  {
    unsigned __int16 v8 = 2 * v11 + 1;
    if (v8 + 1 < *((unsigned __int16 *)this + 750)
      && ot::BackboneRouter::MulticastListenersTable::Listener::operator<( (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v8 + 20),  (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v8)))
    {
      ++v8;
    }

    if (!ot::BackboneRouter::MulticastListenersTable::Listener::operator<( (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v8),  (ot::BackboneRouter::MulticastListenersTable::Listener *)&v9)) {
      break;
    }
    unsigned int v3 = (char *)this + 20 * v8;
    uint64_t v4 = (char *)this + 20 * v11;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *((_DWORD *)v4 + ++*(_WORD *)(this + 4) = *((_DWORD *)v3 + 4);
    unsigned __int16 v11 = v8;
  }

  if (v11 > (int)v12)
  {
    BOOL v5 = (char *)this + 20 * v11;
    *(_OWORD *)BOOL v5 = v9;
    *((_DWORD *)v5 + ++*(_WORD *)(this + 4) = v10;
  }

  return v11 > (int)v12;
}

double ot::BackboneRouter::MulticastListenersTable::SiftHeapElemUp( ot::BackboneRouter::MulticastListenersTable *this, unsigned __int16 a2)
{
  int v14 = this;
  unsigned __int16 v13 = a2;
  unsigned __int16 v12 = a2;
  ot::BackboneRouter::MulticastListenersTable::Listener::Listener((ot::BackboneRouter::MulticastListenersTable::Listener *)&v10);
  uint64_t v2 = 20LL * v13;
  __int128 v3 = *(_OWORD *)((char *)this + v2);
  __int128 v10 = v3;
  int v11 = *(_DWORD *)((char *)this + v2 + 16);
  while (1)
  {
    unsigned __int16 v9 = (v12 - 1) / 2;
    if (!v12
      || !ot::BackboneRouter::MulticastListenersTable::Listener::operator<( (ot::BackboneRouter::MulticastListenersTable::Listener *)&v10,  (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v9)))
    {
      break;
    }

    uint64_t v4 = (char *)this + 20 * v9;
    BOOL v5 = (char *)this + 20 * v12;
    __int128 v3 = *(_OWORD *)v4;
    *(_OWORD *)BOOL v5 = *(_OWORD *)v4;
    *((_DWORD *)v5 + ++*(_WORD *)(this + 4) = *((_DWORD *)v4 + 4);
    unsigned __int16 v12 = v9;
  }

  if (v12 < (int)v13)
  {
    uint64_t v6 = (char *)this + 20 * v12;
    *(void *)&__int128 v3 = v10;
    *(_OWORD *)uint64_t v6 = v10;
    *((_DWORD *)v6 + ++*(_WORD *)(this + 4) = v11;
  }

  return *(double *)&v3;
}

BOOL ot::BackboneRouter::MulticastListenersTable::Listener::operator<( ot::BackboneRouter::MulticastListenersTable::Listener *a1, ot::BackboneRouter::MulticastListenersTable::Listener *a2)
{
  uint64_t v6 = a1;
  BOOL v5 = a2;
  ExpireTime  = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(a1);
  int v3 = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(v5);
  return ot::Time::operator<(&ExpireTime, &v3);
}

{
  return __ZNK2ot14BackboneRouter23MulticastListenersTable8ListenerltERKS2_(a1, a2);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::IteratorBuilder::begin( ot::BackboneRouter::MulticastListenersTable::IteratorBuilder *this)
{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>( ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::MulticastListenersTable>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14BackboneRouter23MulticastListenersTableEEERT_v(a1);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::IteratorBuilder::end( ot::BackboneRouter::MulticastListenersTable::IteratorBuilder *this)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(this);
  return v3
       + 20LL
}

void ot::BackboneRouter::MulticastListenersTable::Clear(ot::BackboneRouter::MulticastListenersTable *this)
{
  uint64_t v6 = this;
  if (ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet((void *)this + 188))
  {
    for (unsigned __int16 i = 0; i < (int)*((unsigned __int16 *)this + 750); ++i)
    {
      unsigned int v4 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(1LL);
      ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress((ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * i));
      uint64_t v3 = v1;
      ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( (uint64_t)this + 1504,  &v4,  &v3);
    }
  }

  *((_WORD *)this + 750)  = 0;
  ot::BackboneRouter::MulticastListenersTable::CheckInvariants(this);
}

BOOL ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet( void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPv38otBackboneRouterMulticastListenerEventPK12otIp6AddressEE5IsSetEv(a1);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return __ZNK2ot8CallbackIPFvPv38otBackboneRouterMulticastListenerEventPK12otIp6AddressELNS_23CallbackContextPositionE0EE6InvokeIJS2_PKNS_3Ip67AddressEEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::SetCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::Set( (void *)(a1 + 1504),  a2,  a3);
  uint64_t result = ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet((void *)(a1 + 1504));
  if ((result & 1) != 0)
  {
    for (unsigned __int16 i = 0; i < (int)*(unsigned __int16 *)(a1 + 1500); ++i)
    {
      unsigned int v7 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(0LL);
      ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress((ot::BackboneRouter::MulticastListenersTable::Listener *)(a1 + 20LL * i));
      uint64_t v6 = v4;
      uint64_t result = ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>( a1 + 1504,  &v7,  &v6);
    }
  }

  return result;
}

void *ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPv38otBackboneRouterMulticastListenerEventPK12otIp6AddressEE3SetES7_S1_( result,  a2,  a3);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::GetNext( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  unsigned int v7 = 0;
  if (*a2 < (int)a1[750])
  {
    int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)a1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)&a1[10 * (unsigned __int16)*v9];
    else {
      unsigned int v4 = 0;
    }
    *(_DWORD *)(v8 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = ot::Time::MsecToSec((ot::Time *)v4);
    ++*v9;
  }

  else
  {
    return 23;
  }

  return v7;
}

uint64_t ot::Time::MsecToSec(ot::Time *this)
{
  return this / 0x3E8;
}

{
  return __ZN2ot4Time9MsecToSecEj(this);
}

BOOL ot::Time::operator>(int *a1, int *a2)
{
  return ot::Time::operator<(a2, a1);
}

{
  return __ZNK2ot4TimegtERKS0_(a1, a2);
}

BOOL ot::Time::operator<(int *a1, int *a2)
{
  return ot::SerialNumber::IsLess<unsigned int>(*a1, *a2);
}

{
  return __ZNK2ot4TimeltERKS0_(a1, a2);
}

BOOL ot::SerialNumber::IsLess<unsigned int>(int a1, int a2)
{
  return a1 - a2 < 0;
}

{
  return __ZN2ot12SerialNumber6IsLessIjEEbT_S2_(a1, a2);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>( uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return __ZNK2ot8CallbackIPFvPv38otBackboneRouterMulticastListenerEventPK12otIp6AddressELNS_23CallbackContextPositionE0EE6InvokeIJS2_PNS_3Ip67AddressEEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::Coap::CoapBase::CoapBase(uint64_t a1, ot::Instance *a2, uint64_t a3)
{
  uint64_t v3 = ot::Coap::MessageQueue::MessageQueue((ot::Coap::MessageQueue *)a1);
  *(_WORD *)(a1 + 8)  = ot::Random::NonCrypto::GetUint16(v3);
  ot::TimerMilliContext::TimerMilliContext( (ot::TimerMilliContext *)(a1 + 16),  a2,  (void (*)(ot::Timer *))ot::Coap::CoapBase::HandleRetransmissionTimer,  (void *)a1);
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)(a1 + 48));
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)(a1 + 56));
  ot::Coap::ResponsesQueue::ResponsesQueue((ot::Coap::ResponsesQueue *)(a1 + 72), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)(a1 + 112));
  uint64_t result = a1;
  *(void *)(a1 + 128)  = 0LL;
  *(void *)(a1 + 136)  = a3;
  return result;
}

{
  ot::Coap::CoapBase::CoapBase(a1, a2, a3);
  return a1;
}

ot::Coap::MessageQueue *ot::Coap::MessageQueue::MessageQueue(ot::Coap::MessageQueue *this)
{
  return this;
}

{
  ot::MessageQueue::MessageQueue(this);
  return this;
}

uint64_t ot::Random::NonCrypto::GetUint16(ot::Random::NonCrypto *this)
{
  return (unsigned __int16)ot::Random::NonCrypto::GetUint32(this);
}

{
  return __ZN2ot6Random9NonCrypto9GetUint16Ev(this);
}

uint64_t ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Coap::CoapBase *this, ot::Timer *a2)
{
  Context  = (ot::Coap::CoapBase *)ot::TimerMilliContext::GetContext(this);
  return ot::Coap::CoapBase::HandleRetransmissionTimer(Context);
}

void *ot::LinkedList<ot::Coap::Resource>::LinkedList(void *a1)
{
  return a1;
}

ot::Coap::ResponsesQueue *ot::Coap::ResponsesQueue::ResponsesQueue( ot::Coap::ResponsesQueue *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Coap::MessageQueue::MessageQueue(this);
  ot::TimerMilliContext::TimerMilliContext( (ot::Coap::ResponsesQueue *)((char *)this + 8),  a2,  (void (*)(ot::Timer *))ot::Coap::ResponsesQueue::HandleTimer,  this);
  return this;
}

ot::Message *ot::Coap::CoapBase::ClearRequestsAndResponses(ot::Coap::CoapBase *this)
{
  return ot::Coap::ResponsesQueue::DequeueAllResponses((ot::Coap::CoapBase *)((char *)this + 72));
}

BOOL ot::Coap::CoapBase::ClearRequests(ot::Coap::CoapBase *this, const ot::Ip6::Address *a2)
{
  unsigned __int16 v13 = this;
  unsigned __int16 v12 = a2;
  uint64_t v11 = this;
  v10[0]  = ot::Coap::MessageQueue::begin(this);
  v10[1]  = v2;
  v9[0]  = ot::Coap::MessageQueue::end(v11);
  v9[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v10, v9);
    if (!result) {
      break;
    }
    uint64_t v8 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v10);
    ot::Coap::CoapBase::Metadata::ReadFrom((ot::Coap::CoapBase::Metadata *)v7, v8);
    if (!v12 || ot::Equatable<ot::Ip6::Address>::operator==(v7, v12)) {
      ot::Coap::CoapBase::FinalizeCoapTransaction(this, v8, (uint64_t)v7, 0LL, 0LL, 0xBu);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v10, v5);
  }

  return result;
}

{
  return ot::Coap::CoapBase::ClearRequests(this, a2);
}

ot::Message *ot::Coap::ResponsesQueue::DequeueAllResponses(ot::Coap::ResponsesQueue *this)
{
  return ot::MessageQueue::DequeueAndFreeAll(this);
}

uint64_t ot::Coap::MessageQueue::end(ot::Coap::MessageQueue *this)
{
  v2[0]  = 0LL;
  v2[1]  = 0LL;
  ot::Coap::Message::Iterator::Iterator((ot::Coap::Message::Iterator *)v2);
  return v2[0];
}

{
  uint64_t v2;
  uint64_t v2 = 0LL;
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)&v2);
  return v2;
}

{
  return __ZN2ot4Coap12MessageQueue3endEv(this);
}

{
  return __ZNK2ot4Coap12MessageQueue3endEv(this);
}

BOOL ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_7MessageENS1_8IteratorEEneERKS2_(a1, a2);
}

uint64_t ot::Coap::Message::Iterator::operator*(uint64_t a1)
{
  return ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*(a1);
}

{
  return __ZN2ot4Coap7Message8IteratordeEv(a1);
}

void ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::CoapBase::Metadata *this, const ot::Coap::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x48uLL) {
    __assert_rtn("ReadFrom", "coap.cpp", 1518, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Coap::CoapBase::Metadata>(a2, Length - 72, (char *)this);
  IgnoreError();
}

void ot::Coap::CoapBase::FinalizeCoapTransaction( ot::Coap::CoapBase *a1, ot::Coap::Message *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (*(void *)(a3 + 40)) {
    (*(void (**)(void, uint64_t, uint64_t, void))(a3 + 40))(*(void *)(a3 + 48), a4, a5, a6);
  }
}

uint64_t ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++( ot::Message::Iterator *a1, ot::Message *a2)
{
  return ot::Message::Iterator::Advance(a1, a2);
}

{
  return __ZN2ot15ItemPtrIteratorINS_7MessageENS1_8IteratorEEppEv(a1, a2);
}

void ot::Coap::CoapBase::AddResource(ot::Coap::CoapBase *this, ot::Coap::Resource *a2)
{
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Coap::Resource>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Coap::Resource>::Push(a1, a2);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE3AddERS2_(a1, a2);
}

uint64_t ot::Coap::CoapBase::RemoveResource(ot::Coap::CoapBase *this, ot::Coap::Resource *a2)
{
  return ot::LinkedListEntry<ot::Coap::Resource>::SetNext((uint64_t)a2, 0LL);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Remove(uint64_t *a1, uint64_t a2)
{
  v5[2]  = (uint64_t)a1;
  v5[1]  = a2;
  unsigned int v4 = ot::LinkedList<ot::Coap::Resource>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Coap::Resource>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE6RemoveERKS2_(a1, a2);
}

uint64_t ot::LinkedListEntry<ot::Coap::Resource>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 2++*(_WORD *)(this + 4) = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_4Coap8ResourceEE7SetNextEPS2_(result, a2);
}

ot::Message *ot::Coap::CoapBase::NewMessage(ot::Coap::CoapBase *this, const ot::Message::Settings *a2)
{
  uint64_t v2 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  ot::Ip6::Udp::NewMessage(v2, 0, a2);
  ot::AsCoapMessagePtr();
  BOOL v5 = v3;
  if (v3) {
    ot::Message::SetOffset(v3, 0);
  }
  return v5;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Udp>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Ip63UdpEEERT_v(a1);
}

ot::Message *ot::Coap::CoapBase::NewMessage(ot::Coap::CoapBase *this)
{
  Default  = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Coap::CoapBase::NewMessage(this, Default);
}

void *ot::Message::Settings::GetDefault(ot::Message::Settings *this)
{
  return &ot::Message::Settings::kDefault;
}

{
  return __ZN2ot7Message8Settings10GetDefaultEv(this);
}

ot::Message *ot::Coap::CoapBase::NewPriorityMessage(ot::Coap::CoapBase *this)
{
  unsigned int v4 = this;
  ot::Message::Settings::Settings(v3, 1, 3);
  return ot::Coap::CoapBase::NewMessage(this, (const ot::Message::Settings *)v3);
}

ot::Coap::Message *ot::Coap::CoapBase::NewPriorityConfirmablePostMessage( ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewPriorityMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 0, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::InitMessage( uint64_t a1, ot::Coap::Message *a2, char a3, unsigned __int8 a4)
{
  uint64_t v6 = a2;
  int v5 = 0;
  if (a2)
  {
    int v5 = ot::Coap::Message::Init(a2, a3, 2, a4);
    if (!v5) {
      int v5 = ot::Coap::Message::SetPayloadMarker(v6);
    }
  }

  if (v5 && v6)
  {
    ot::Message::Free(v6);
    return 0LL;
  }

  return v6;
}

ot::Coap::Message *ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 0, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage( ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewPriorityMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 1, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::NewNonConfirmablePostMessage( ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 1, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::NewPriorityResponseMessage( ot::Coap::CoapBase *this, const ot::Coap::Message *a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewPriorityMessage(this);
  return ot::Coap::CoapBase::InitResponse(this, v2, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::InitResponse( ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Coap::Message *a3)
{
  int v5 = a2;
  int v4 = 0;
  if (a2)
  {
    int v4 = ot::Coap::Message::SetDefaultResponseHeader(a2, a3);
    if (!v4) {
      int v4 = ot::Coap::Message::SetPayloadMarker(v5);
    }
  }

  if (v4 && v5)
  {
    ot::Message::Free(v5);
    return 0LL;
  }

  return v5;
}

ot::Coap::Message *ot::Coap::CoapBase::NewResponseMessage( ot::Coap::CoapBase *this, const ot::Coap::Message *a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewMessage(this);
  return ot::Coap::CoapBase::InitResponse(this, v2, a2);
}

uint64_t ot::Coap::CoapBase::Send(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a1 + 136))(a1, a2, a3);
}

uint64_t ot::Coap::CoapBase::SendMessage( _WORD *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3, ot::Coap::TxParameters *a4, uint64_t a5, uint64_t a6)
{
  v34  = a1;
  char v33 = a2;
  v32  = a3;
  BOOL v31 = a4;
  uint64_t v30 = a5;
  uint64_t v29 = a6;
  uint64_t v27 = 0LL;
  unsigned __int16 Length = 0;
  int Type = ot::Coap::Message::GetType(a2);
  if (Type == 2)
  {
    ot::Coap::ResponsesQueue::EnqueueResponse((ot::Coap::ResponsesQueue *)(a1 + 36), v33, v32, v31);
  }

  else if (Type == 3)
  {
  }

  else
  {
    uint64_t v6 = v33;
    unsigned __int16 v7 = a1[4];
    a1[4]  = v7 + 1;
    ot::Coap::Message::SetMessageId(v6, v7);
  }

  ot::Coap::Message::Finish(v33);
  if (ot::Coap::Message::IsConfirmable(v33))
  {
    unsigned __int16 Length = ot::Message::GetLength(v33);
  }

  else if (ot::Coap::Message::IsNonConfirmable(v33) && v30)
  {
    unsigned __int16 Length = ot::Coap::Message::GetOptionStart(v33);
  }

  if (!Length) {
    goto LABEL_18;
  }
  ot::Ip6::MessageInfo::GetSockAddr(v32);
  v17[0]  = *v8;
  PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v32);
  ot::Ip6::MessageInfo::GetPeerAddr(v32);
  v17[1]  = *v9;
  char v25 = v25 & 0xFB | (4 * (ot::Ip6::MessageInfo::GetMulticastLoop(v32) & 1));
  uint64_t v19 = v30;
  uint64_t v20 = v29;
  char v23 = *((_BYTE *)v31 + 6);
  int v22 = ot::Coap::TxParameters::CalculateInitialRetransmissionTimeout(v31);
  char v25 = v25 & 0xFC | (2 * ot::Coap::Message::IsConfirmable(v33));
  HopLimit  = ot::Ip6::MessageInfo::GetHopLimit(v32);
  IsHostInterface  = (ot::TimerMilli *)ot::Ip6::MessageInfo::IsHostInterface(v32);
  char v25 = v25 & 0xF7 | (8 * (IsHostInterface & 1));
  v16[0]  = ot::TimerMilli::GetNow(IsHostInterface);
  if ((v25 & 2) != 0)
  {
    int v11 = ot::Time::operator+(v16, v22);
  }

  else
  {
    int v13 = ot::Coap::TxParameters::CalculateMaxTransmitWait(v31);
    int v11 = ot::Time::operator+(v16, v13);
  }

  v16[1]  = v11;
  int v21 = v11;
  uint64_t v27 = ot::Coap::CoapBase::CopyAndEnqueueMessage( (ot::Coap::CoapBase *)a1,  v33,  Length,  (const ot::Coap::CoapBase::Metadata *)v17);
  if (v27) {
LABEL_18:
  }
    unsigned int v28 = ot::Coap::CoapBase::Send((uint64_t)a1, (uint64_t)v33, (uint64_t)v32);
  else {
    unsigned int v28 = 3;
  }
  if (v28 && v27) {
    ot::Coap::CoapBase::DequeueMessage((ot::Coap::CoapBase *)a1, v27);
  }
  return v28;
}

void ot::Coap::ResponsesQueue::EnqueueResponse( ot::Coap::ResponsesQueue *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Coap::TxParameters *a4)
{
  unsigned int v15 = this;
  int v14 = a2;
  int v13 = a3;
  unsigned __int16 v12 = a4;
  int v4 = ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)&v9);
  int Now = ot::TimerMilli::GetNow(v4);
  int v5 = ot::Coap::TxParameters::CalculateExchangeLifetime(v12);
  int v8 = ot::Time::operator+(&Now, v5);
  int v9 = v8;
  memcpy(v10, v13, sizeof(v10));
  if (!ot::Coap::ResponsesQueue::FindMatchedResponse(this, v14, (const ot::Ip6::MessageInfo *)v13))
  {
    ot::Coap::ResponsesQueue::UpdateQueue(this);
    int v11 = ot::Coap::Message::Clone(v14);
    if (v11)
    {
      if (ot::Coap::ResponsesQueue::ResponseMetadata::AppendTo( (ot::Coap::ResponsesQueue::ResponseMetadata *)&v9,  v11))
      {
        ot::Message::Free(v11);
      }

      else
      {
        ot::Coap::MessageQueue::Enqueue(this, v11);
        ot::TimerMilli::FireAtIfEarlier((int *)this + 2, v9);
      }
    }
  }

BOOL ot::Coap::Message::IsConfirmable(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetType(this) == 0;
}

{
  return __ZNK2ot4Coap7Message13IsConfirmableEv(this);
}

BOOL ot::Coap::Message::IsNonConfirmable(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetType(this) == 1;
}

{
  return __ZNK2ot4Coap7Message16IsNonConfirmableEv(this);
}

uint64_t ot::Coap::Message::GetOptionStart(ot::Coap::Message *this)
{
  return (unsigned __int16)(ot::Coap::Message::GetTokenLength(this) + 4);
}

{
  return __ZNK2ot4Coap7Message14GetOptionStartEv(this);
}

uint64_t ot::Ip6::MessageInfo::GetPeerPort(ot::Ip6::MessageInfo *this)
{
  return *((unsigned __int16 *)this + 17);
}

{
  return __ZNK2ot3Ip611MessageInfo11GetPeerPortEv(this);
}

uint64_t ot::Ip6::MessageInfo::GetMulticastLoop(ot::Ip6::MessageInfo *this)
{
  return (*((unsigned __int8 *)this + 49) >> 4) & 1;
}

{
  return __ZNK2ot3Ip611MessageInfo16GetMulticastLoopEv(this);
}

uint64_t ot::Coap::TxParameters::CalculateInitialRetransmissionTimeout(ot::Coap::TxParameters *this)
{
  return ot::Random::NonCrypto::GetUint32InRange( (ot::Random::NonCrypto *)*(unsigned int *)this,  *(_DWORD *)this * *((unsigned __int8 *)this + 4) / *((unsigned __int8 *)this + 5) + 1);
}

uint64_t ot::Ip6::MessageInfo::GetHopLimit(ot::Ip6::MessageInfo *this)
{
  return *((unsigned __int8 *)this + 48);
}

{
  return __ZNK2ot3Ip611MessageInfo11GetHopLimitEv(this);
}

uint64_t ot::Ip6::MessageInfo::IsHostInterface(ot::Ip6::MessageInfo *this)
{
  return (*((unsigned __int8 *)this + 49) >> 2) & 1;
}

{
  return __ZNK2ot3Ip611MessageInfo15IsHostInterfaceEv(this);
}

uint64_t ot::Coap::TxParameters::CalculateMaxTransmitWait(ot::Coap::TxParameters *this)
{
  return ot::Coap::TxParameters::CalculateSpan(this, *((_BYTE *)this + 6) + 1);
}

ot::Message *ot::Coap::CoapBase::CopyAndEnqueueMessage( ot::Coap::CoapBase *this, const ot::Coap::Message *a2, unsigned __int16 a3, const ot::Coap::CoapBase::Metadata *a4)
{
  uint64_t v6 = ot::Coap::Message::Clone(a2, a3);
  if (v6)
  {
    int v7 = ot::Coap::CoapBase::Metadata::AppendTo(a4, v6);
    if (!v7)
    {
      ot::TimerMilli::FireAtIfEarlier((int *)this + 4, *((_DWORD *)a4 + 14));
      ot::Coap::MessageQueue::Enqueue(this, v6);
    }
  }

  else
  {
    int v7 = 3;
  }

  if (v7 && v6)
  {
    ot::Message::Free(v6);
    return 0LL;
  }

  return v6;
}

void ot::Coap::CoapBase::DequeueMessage(ot::Coap::CoapBase *this, ot::Coap::Message *a2)
{
}

uint64_t ot::Coap::CoapBase::SendMessage( ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Coap::TxParameters *a4)
{
  return ot::Coap::CoapBase::SendMessage(this, a2, a3, a4, 0LL, 0LL);
}

uint64_t ot::Coap::CoapBase::SendMessage( ot::Coap::TxParameters *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3, uint64_t a4, uint64_t a5)
{
  Default  = (ot::Coap::TxParameters *)ot::Coap::TxParameters::GetDefault(a1);
  return ot::Coap::CoapBase::SendMessage(a1, a2, a3, Default, a4, a5);
}

uint64_t ot::Coap::CoapBase::SendMessage( ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendMessage(this, a2, a3, 0LL, 0LL);
}

uint64_t ot::Coap::CoapBase::SendReset( ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendEmptyMessage(this, 3, a2, (uint64_t)a3);
}

uint64_t ot::Coap::CoapBase::SendEmptyMessage( ot::Coap::CoapBase *a1, char a2, ot::Coap::Message *a3, uint64_t a4)
{
  int v7 = 0LL;
  if (ot::Coap::Message::IsConfirmable(a3))
  {
    int v7 = ot::Coap::CoapBase::NewMessage(a1);
    if (v7)
    {
      ot::Coap::Message::Init(v7, a2, 0);
      MessageId  = ot::Coap::Message::GetMessageId(a3);
      ot::Coap::Message::SetMessageId(v7, MessageId);
      ot::Coap::Message::Finish(v7);
      unsigned int v8 = ot::Coap::CoapBase::Send((uint64_t)a1, (uint64_t)v7, a4);
    }

    else
    {
      unsigned int v8 = 3;
    }
  }

  else
  {
    unsigned int v8 = 7;
  }

  if (v8 && v7) {
    ot::Message::Free(v7);
  }
  return v8;
}

uint64_t ot::Coap::CoapBase::SendAck( ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendEmptyMessage(this, 2, a2, (uint64_t)a3);
}

uint64_t ot::Coap::CoapBase::SendEmptyAck( ot::Coap::CoapBase *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, char a4)
{
  if (ot::Coap::Message::IsConfirmable(a2)) {
    return ot::Coap::CoapBase::SendHeaderResponse(a1, a4, a2, a3);
  }
  else {
    return 7;
  }
}

uint64_t ot::Coap::CoapBase::SendHeaderResponse( ot::Coap::CoapBase *a1, char a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  unsigned int v8 = 0LL;
  if (ot::Coap::Message::IsRequest(a3))
  {
    unsigned int v8 = ot::Coap::CoapBase::NewMessage(a1);
    if (v8)
    {
      int Type = ot::Coap::Message::GetType(a3);
      if (Type)
      {
        if (Type != 1)
        {
          unsigned int v9 = 7;
          goto LABEL_12;
        }

        ot::Coap::Message::Init(v8, 1, a2);
      }

      else
      {
        ot::Coap::Message::Init(v8, 2, a2);
        MessageId  = ot::Coap::Message::GetMessageId(a3);
        ot::Coap::Message::SetMessageId(v8, MessageId);
      }

      unsigned int v9 = ot::Coap::Message::SetTokenFromMessage(v8, a3);
      if (!v9) {
        unsigned int v9 = ot::Coap::CoapBase::SendMessage(a1, v8, a4);
      }
    }

    else
    {
      unsigned int v9 = 3;
    }
  }

  else
  {
    unsigned int v9 = 7;
  }

uint64_t ot::Coap::CoapBase::SendEmptyAck( ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendEmptyAck(this, a2, a3, 68);
}

uint64_t ot::Coap::CoapBase::SendNotFound( ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendHeaderResponse(this, 132, a2, a3);
}

BOOL ot::Coap::Message::IsRequest(ot::Coap::Message *this)
{
  BOOL v3 = 0;
  return v3;
}

{
  return __ZNK2ot4Coap7Message9IsRequestEv(this);
}

uint64_t ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Coap::CoapBase *this)
{
  char v23 = this;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v12);
  v11[2]  = this;
  v11[0]  = ot::Coap::MessageQueue::begin(this);
  v11[1]  = v1;
  v10[0]  = ot::Coap::MessageQueue::end(this);
  v10[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v11, v10))
  {
    unsigned int v9 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v11);
    ot::Coap::CoapBase::Metadata::ReadFrom((ot::Coap::CoapBase::Metadata *)&v13, v9);
    if (ot::Time::operator>=(&Now, &v16))
    {
      if ((v20 & 2) == 0 || !v18)
      {
        ot::Coap::CoapBase::FinalizeCoapTransaction(this, v9, (uint64_t)&v13, 0LL, 0LL, 0x1Cu);
        goto LABEL_10;
      }

      --v18;
      v17 *= 2;
      int v8 = ot::Time::operator+(&Now, v17);
      int v16 = v8;
      ot::Coap::CoapBase::Metadata::UpdateIn((ot::Coap::CoapBase::Metadata *)&v13, v9);
      if ((v20 & 1) == 0)
      {
        ot::Ip6::MessageInfo::SetPeerAddr(v12, &v14);
        ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v12, v15);
        ot::Ip6::MessageInfo::SetSockAddr(v12, &v13);
        ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v12, v19);
        ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)v12, (v20 & 8) != 0);
        ot::Ip6::MessageInfo::SetMulticastLoop((uint64_t)v12, (v20 & 4) != 0);
        ot::Coap::CoapBase::SendCopy(this, v9, (const ot::Ip6::MessageInfo *)v12);
      }
    }

    v6[2]  = DistantFuture;
    v6[1]  = v16;
    int v7 = ot::Min<ot::Time>(DistantFuture, v16);
    DistantFuture  = v7;
LABEL_10:
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v11, v3);
  }

  v6[0]  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v6);
  if ((result & 1) != 0) {
    return ot::TimerMilli::FireAt((ot::Coap::CoapBase *)((char *)this + 16), DistantFuture);
  }
  return result;
}

uint64_t ot::Time::GetDistantFuture(ot::Time *this)
{
  return v2;
}

{
  return __ZNK2ot4Time16GetDistantFutureEv(this);
}

uint64_t ot::Coap::CoapBase::Metadata::UpdateIn(ot::Coap::CoapBase::Metadata *this, ot::Coap::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  return ot::Message::Write<ot::Coap::CoapBase::Metadata>(a2, Length - 72, (char *)this);
}

__n128 ot::Ip6::MessageInfo::SetSockAddr(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

uint64_t ot::Ip6::MessageInfo::SetMulticastLoop(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4ot::Mle::Tlv::SetType(this, 9) = *(_BYTE *)(this + 49) & 0xEF | (16 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Ip611MessageInfo16SetMulticastLoopEb(this, a2);
}

void ot::Coap::CoapBase::SendCopy( ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  __int16 Length = ot::Message::GetLength(a2);
  __n128 v13 = ot::Coap::Message::Clone(a2, Length - 72);
  if (v13) {
    int v14 = ot::Coap::CoapBase::Send((uint64_t)this, (uint64_t)v13, (uint64_t)a3);
  }
  else {
    int v14 = 3;
  }
  if (v14)
  {
    char v4 = ot::ErrorToString(v14);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Coap", "Failed to send copy: %s", v5, v6, v7, v8, v9, v10, v4);
    if (v13) {
      ot::Message::Free(v13);
    }
  }

uint64_t ot::Min<ot::Time>(int a1, int a2)
{
  int v5 = a1;
  int v4 = a2;
  if (ot::Time::operator<(&v5, &v4)) {
    BOOL v3 = &v5;
  }
  else {
    BOOL v3 = &v4;
  }
  return *v3;
}

{
  return __ZN2ot3MinINS_4TimeEEET_S2_S2_(a1, a2);
}

uint64_t ot::Coap::CoapBase::AbortTransaction(ot::Coap::MessageQueue *a1, uint64_t a2, uint64_t a3)
{
  char v18 = a1;
  uint64_t v17 = a2;
  uint64_t v16 = a3;
  unsigned int v15 = 23;
  int v11 = a1;
  v10[0]  = ot::Coap::MessageQueue::begin(a1);
  v10[1]  = v3;
  v9[0]  = ot::Coap::MessageQueue::end(v11);
  v9[1]  = v4;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v10, v9))
  {
    uint64_t v8 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v10);
    ot::Coap::CoapBase::Metadata::ReadFrom((ot::Coap::CoapBase::Metadata *)v12, v8);
    if (v13 == v17 && v14 == v16)
    {
      ot::Coap::CoapBase::FinalizeCoapTransaction(a1, v8, (uint64_t)v12, 0LL, 0LL, 0xBu);
      unsigned int v15 = 0;
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v10, v5);
  }

  return v15;
}

uint64_t ot::Coap::CoapBase::Metadata::AppendTo(ot::Coap::CoapBase::Metadata *this, ot::Coap::Message *a2)
{
  return ot::Message::Append<ot::Coap::CoapBase::Metadata>(a2, (char *)this);
}

{
  return __ZNK2ot4Coap8CoapBase8Metadata8AppendToERNS0_7MessageE(this, a2);
}

ot::Message **ot::Coap::MessageQueue::Enqueue(ot::Coap::MessageQueue *this, ot::Coap::Message *a2)
{
  return ot::Coap::MessageQueue::Enqueue(this, a2, 1);
}

{
  return __ZN2ot4Coap12MessageQueue7EnqueueERNS0_7MessageE(this, a2);
}

uint64_t ot::Coap::CoapBase::EvictMessage(ot::Coap::CoapBase *this)
{
  char v8 = (char)this;
  unsigned int v11 = 0;
  Head  = (ot::Coap::Message *)ot::Coap::MessageQueue::GetHead(this);
  if (Head)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Coap",  "Evicting message from head of CoAP pending requests queue",  v1,  v2,  v3,  v4,  v5,  v6,  v8);
    ot::Coap::CoapBase::DequeueMessage(v9, Head);
  }

  else
  {
    return 23;
  }

  return v11;
}

uint64_t ot::Coap::MessageQueue::GetHead(ot::Coap::MessageQueue *this)
{
  return ot::MessageQueue::GetHead(this);
}

{
  return ot::MessageQueue::GetHead(this);
}

{
  return __ZN2ot4Coap12MessageQueue7GetHeadEv(this);
}

{
  return __ZNK2ot4Coap12MessageQueue7GetHeadEv(this);
}

uint64_t ot::Coap::MessageQueue::Dequeue(ot::Coap::MessageQueue *this, ot::Coap::Message *a2)
{
  return ot::MessageQueue::Dequeue(this, a2);
}

{
  return __ZN2ot4Coap12MessageQueue7DequeueERNS0_7MessageE(this, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::FindRelatedRequest( ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, ot::Coap::CoapBase::Metadata *a4)
{
  char v23 = this;
  int v22 = a2;
  int v21 = a3;
  char v20 = a4;
  uint64_t v19 = 0LL;
  char v18 = this;
  v17[0]  = ot::Coap::MessageQueue::begin(this);
  v17[1]  = v4;
  v16[0]  = ot::Coap::MessageQueue::end(v18);
  v16[1]  = v5;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v17, v16))
  {
    unsigned int v15 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v17);
    ot::Coap::CoapBase::Metadata::ReadFrom(v20, v15);
    uint64_t v14 = (char *)v20 + 16;
    ot::Ip6::MessageInfo::GetPeerAddr(v21);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v14, v6)
      || ot::Ip6::Address::IsMulticast((ot::Coap::CoapBase::Metadata *)((char *)v20 + 16))
      || (Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid((ot::Coap::CoapBase::Metadata *)((char *)v20 + 16)),
          ot::Ip6::InterfaceIdentifier::IsAnycastLocator(Iid)))
    {
      int v13 = *((unsigned __int16 *)v20 + 16);
      if (v13 == (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort(v21))
      {
        unsigned int Type = ot::Coap::Message::GetType(v22);
        if (Type <= 1)
        {
          if (ot::Coap::Message::IsTokenEqual(v22, v15)) {
            return v15;
          }
        }

        else if (Type == 3 || Type == 2)
        {
          MessageId  = (unsigned __int16)ot::Coap::Message::GetMessageId(v22);
        }
      }
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v17, v8);
  }

  return (ot::Coap::Message *)v19;
}

void ot::Coap::CoapBase::Receive(ot::Coap::CoapBase *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  int v13 = v3;
  if (ot::Coap::Message::ParseHeader(v3))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Coap", "Failed to parse CoAP header", v4, v5, v6, v7, v8, v9, v11);
    ot::Ip6::MessageInfo::GetSockAddr(a3);
    if (!ot::Ip6::Address::IsMulticast(v10) && ot::Coap::Message::IsConfirmable(v13))
    {
      ot::Coap::CoapBase::SendReset(this, v13, a3);
      IgnoreError();
    }
  }

  else if (ot::Coap::Message::IsRequest(v13))
  {
    ot::Coap::CoapBase::ProcessReceivedRequest(this, v13, a3);
  }

  else
  {
    ot::Coap::CoapBase::ProcessReceivedResponse(this, v13, a3);
  }

void ot::Coap::CoapBase::ProcessReceivedRequest( ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v30 = this;
  uint64_t v29 = a2;
  unsigned int v28 = a3;
  uint64_t v27 = 0LL;
  UriPathOptions  = 0;
  if (!ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::IsSet((void *)this + 7)
    || (UriPathOptions  = ot::Callback<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Coap::Message&,ot::Ip6::MessageInfo const&>( (uint64_t)this + 56,  (uint64_t)v29,  (uint64_t)v28)) == 0)
  {
    MatchedResponseCopy  = ot::Coap::ResponsesQueue::GetMatchedResponseCopy( (ot::Coap::CoapBase *)((char *)this + 72),  v29,  v28,  &v27);
    if (MatchedResponseCopy)
    {
      if (MatchedResponseCopy == 3)
      {
        UriPathOptions  = 3;
      }

      else
      {
        UriPathOptions  = ot::Coap::Message::ReadUriPathOptions(v29, (char (*)[33])__s2);
        if (!UriPathOptions)
        {
          if (*((void *)this + 16)
            && ((*((uint64_t (**)(ot::Coap::CoapBase *, char *, ot::Coap::Message *, ot::Ip6::MessageInfo *))this
                 + 16))( this,  __s2,  v29,  v28) & 1) != 0)
          {
            UriPathOptions  = 0;
          }

          else
          {
            v25[1]  = (uint64_t)this + 48;
            v25[0]  = ot::LinkedList<ot::Coap::Resource>::begin((uint64_t)this + 48);
            uint64_t v24 = ot::LinkedList<ot::Coap::Resource>::end();
            while (ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator!=( v25,  &v24))
            {
              char v23 = (ot::Coap::Resource *)ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator*((uint64_t)v25);
              if (!strcmp(*(const char **)v23, __s2))
              {
                ot::Coap::Resource::HandleRequest((uint64_t)v23, (uint64_t)v29, (uint64_t)v28);
                UriPathOptions  = 0;
                goto LABEL_20;
              }

              ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator++(v25);
            }

            if (ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::IsSet((void *)this + 14))
            {
              int v22 = v29;
              int v21 = v28;
              ot::Callback<void (*)(void *,otMessage *,otMessageInfo const*),(ot::CallbackContextPosition)0>::Invoke<ot::Coap::Message *,ot::Ip6::MessageInfo const*>( (uint64_t)this + 112,  &v22,  &v21);
              UriPathOptions  = 0;
            }

            else
            {
              UriPathOptions  = 23;
            }
          }
        }
      }
    }

    else
    {
      ot::Coap::Message::Finish(v27);
      UriPathOptions  = ot::Coap::CoapBase::Send((uint64_t)this, (uint64_t)v27, (uint64_t)v28);
    }
  }

void ot::Coap::CoapBase::ProcessReceivedResponse( ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v25 = this;
  uint64_t v24 = a2;
  char v23 = a3;
  RelatedRequest  = ot::Coap::CoapBase::FindRelatedRequest(this, a2, a3, (ot::Coap::CoapBase::Metadata *)v22);
  if (RelatedRequest)
  {
    unint64_t Type = ot::Coap::Message::GetType(v24);
    if (Type <= 3) {
      __asm { BR              X8 }
    }
  }

  if (!RelatedRequest)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Coap",  "Failed to process response: no matching request",  v3,  v4,  v5,  v6,  v7,  v8,  v17);
    char Length = ot::Message::GetLength(v24);
    ot::Ip6::MessageInfo::GetPeerAddr(v23);
    ot::Ip6::Address::ToString(v9, (ot::StringWriter *)v27);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
    ot::Ip6::MessageInfo::GetPeerPort(v23);
    ot::Ip6::MessageInfo::GetSockAddr(v23);
    ot::Ip6::Address::ToString(v10, (ot::StringWriter *)v26);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v26);
    ot::Ip6::MessageInfo::GetSockPort(v23);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Coap",  "Failed message info: length %u, source %s/%u, destination %s/%u",  v11,  v12,  v13,  v14,  v15,  v16,  Length);
    if (ot::Coap::Message::IsConfirmable(v24) || ot::Coap::Message::IsNonConfirmable(v24))
    {
      ot::Coap::CoapBase::SendReset(this, v24, v23);
      IgnoreError();
    }
  }

BOOL ot::Coap::Message::IsEmpty(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetCode(this) == 0;
}

{
  return __ZNK2ot4Coap7Message7IsEmptyEv(this);
}

BOOL ot::Coap::Message::IsResponse(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetCode(this) >= 0x40u;
}

{
  return __ZNK2ot4Coap7Message10IsResponseEv(this);
}

uint64_t ot::Ip6::MessageInfo::GetSockPort(ot::Ip6::MessageInfo *this)
{
  return *((unsigned __int16 *)this + 16);
}

{
  return __ZNK2ot3Ip611MessageInfo11GetSockPortEv(this);
}

BOOL ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::IsSet( void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPF7otErrorRKNS_4Coap7MessageERKNS_3Ip611MessageInfoEPvEE5IsSetEv(a1);
}

uint64_t ot::Callback<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Coap::Message&,ot::Ip6::MessageInfo const&>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))a1)(a2, a3, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPF7otErrorRKNS_4Coap7MessageERKNS_3Ip611MessageInfoEPvELNS_23CallbackContextPositionE1EE6InvokeIJRS3_S9_EEES1_DpOT_( a1,  a2,  a3);
}

uint64_t ot::Coap::ResponsesQueue::GetMatchedResponseCopy( ot::Coap::ResponsesQueue *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, ot::Coap::Message **a4)
{
  unsigned int v7 = 0;
  MatchedResponse  = ot::Coap::ResponsesQueue::FindMatchedResponse(this, a2, a3);
  if (MatchedResponse)
  {
    __int16 Length = ot::Message::GetLength(MatchedResponse);
    *a4  = ot::Coap::Message::Clone(MatchedResponse, Length - 64);
    if (!*a4) {
      return 3;
    }
  }

  else
  {
    return 23;
  }

  return v7;
}

uint64_t ot::LinkedList<ot::Coap::Resource>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Coap::Resource>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::end()
{
  return v1;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_4Coap8ResourceENS_10LinkedListIS2_E8IteratorEEneERKS5_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_4Coap8ResourceENS_10LinkedListIS2_E8IteratorEEdeEv(a1);
}

uint64_t ot::Coap::Resource::HandleRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a2, a3);
}

uint64_t ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator++( uint64_t *a1)
{
  return ot::LinkedList<ot::Coap::Resource>::Iterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorINS_4Coap8ResourceENS_10LinkedListIS2_E8IteratorEEppEv(a1);
}

BOOL ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPvP9otMessagePK13otMessageInfoEE5IsSetEv(a1);
}

uint64_t ot::Callback<void (*)(void *,otMessage *,otMessageInfo const*),(ot::CallbackContextPosition)0>::Invoke<ot::Coap::Message *,ot::Ip6::MessageInfo const*>( uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return __ZNK2ot8CallbackIPFvPvP9otMessagePK13otMessageInfoELNS_23CallbackContextPositionE0EE6InvokeIJPNS_4Coap7MessageEPKNS_3Ip611MessageInfoEEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::Message::Read<ot::Coap::CoapBase::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x48u);
}

{
  return __ZNK2ot7Message4ReadINS_4Coap8CoapBase8MetadataEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Message::Write<ot::Coap::CoapBase::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0x48u);
}

{
  return __ZN2ot7Message5WriteINS_4Coap8CoapBase8MetadataEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Coap::ResponsesQueue::HandleTimer(ot::Coap::ResponsesQueue *this, ot::Timer *a2)
{
  Context  = (ot::Coap::ResponsesQueue *)ot::TimerMilliContext::GetContext(this);
  return ot::Coap::ResponsesQueue::HandleTimer(Context);
}

ot::Coap::Message *ot::Coap::ResponsesQueue::FindMatchedResponse( ot::Coap::ResponsesQueue *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v18 = this;
  char v17 = a2;
  uint64_t v16 = a3;
  uint64_t v15 = 0LL;
  uint64_t v14 = this;
  uint64_t v13 = (ot::Message *)ot::Coap::MessageQueue::begin(this);
  uint64_t v12 = ot::Coap::MessageQueue::end(v14);
  while (ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v13, &v12))
  {
    uint64_t v11 = (ot::Coap::Message *)ot::Coap::Message::ConstIterator::operator*((uint64_t)&v13);
    MessageId  = (unsigned __int16)ot::Coap::Message::GetMessageId(v11);
    if (MessageId == (unsigned __int16)ot::Coap::Message::GetMessageId(v17))
    {
      ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)v9);
      ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom((ot::Coap::ResponsesQueue::ResponseMetadata *)v9, v11);
      PeerPort  = (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort((ot::Ip6::MessageInfo *)v10);
      if (PeerPort == (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort(v16))
      {
        ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v10);
        uint64_t v6 = v3;
        ot::Ip6::MessageInfo::GetPeerAddr(v16);
        if (ot::Equatable<ot::Ip6::Address>::operator==(v6, v4)) {
          return v11;
        }
      }
    }

    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v13);
  }

  return (ot::Coap::Message *)v15;
}

BOOL ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorIKNS_7MessageENS1_13ConstIteratorEEneERKS3_(a1, a2);
}

uint64_t ot::Coap::Message::ConstIterator::operator*(uint64_t a1)
{
  return ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*(a1);
}

{
  return __ZN2ot4Coap7Message13ConstIteratordeEv(a1);
}

ot::Coap::ResponsesQueue::ResponseMetadata *ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata( ot::Coap::ResponsesQueue::ResponseMetadata *this)
{
  return this;
}

{
  ot::Ip6::MessageInfo::MessageInfo((ot::Coap::ResponsesQueue::ResponseMetadata *)((char *)this + 8));
  return this;
}

void ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom( ot::Coap::ResponsesQueue::ResponseMetadata *this, const ot::Coap::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x40uLL) {
    __assert_rtn("ReadFrom", "coap.cpp", 1669, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Coap::ResponsesQueue::ResponseMetadata>(a2, Length - 64, (char *)this);
  IgnoreError();
}

ot::Message *ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(ot::Message **a1)
{
  return ot::Message::ConstIterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorIKNS_7MessageENS1_13ConstIteratorEEppEv(a1);
}

uint64_t ot::Coap::TxParameters::CalculateExchangeLifetime(ot::Coap::TxParameters *this)
{
  return ot::Coap::TxParameters::CalculateSpan(this, *((_BYTE *)this + 6)) + 200000 + *(_DWORD *)this;
}

void ot::Coap::ResponsesQueue::UpdateQueue(ot::Coap::ResponsesQueue *this)
{
  uint64_t v12 = this;
  unsigned __int16 v11 = 0;
  uint64_t v10 = 0LL;
  ot::Time::Time((ot::Time *)&v9, 0);
  v8[2]  = this;
  v8[0]  = ot::Coap::MessageQueue::begin(this);
  v8[1]  = v1;
  v7[0]  = ot::Coap::MessageQueue::end(this);
  v7[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v8, v7))
  {
    uint64_t v6 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v8);
    ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)v5);
    ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom((ot::Coap::ResponsesQueue::ResponseMetadata *)v5, v6);
    if (!v10 || ot::Time::operator<(v5, &v9))
    {
      uint64_t v10 = v6;
      int v9 = v5[0];
    }

    ++v11;
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v8, v3);
  }

  if (v11 >= 0xAu) {
    ot::Coap::ResponsesQueue::DequeueResponse(this, v10);
  }
}

ot::Message *ot::Coap::Message::Clone(ot::Coap::Message *this)
{
  unsigned __int16 Length = ot::Message::GetLength(this);
  return ot::Coap::Message::Clone(this, Length);
}

{
  return __ZNK2ot4Coap7Message5CloneEv(this);
}

uint64_t ot::Coap::ResponsesQueue::ResponseMetadata::AppendTo( ot::Coap::ResponsesQueue::ResponseMetadata *this, ot::Coap::Message *a2)
{
  return ot::Message::Append<ot::Coap::ResponsesQueue::ResponseMetadata>(a2, (char *)this);
}

{
  return __ZNK2ot4Coap14ResponsesQueue16ResponseMetadata8AppendToERNS0_7MessageE(this, a2);
}

void ot::Coap::ResponsesQueue::DequeueResponse(ot::Coap::ResponsesQueue *this, ot::Coap::Message *a2)
{
}

void ot::Coap::MessageQueue::DequeueAndFree(ot::Coap::MessageQueue *this, ot::Coap::Message *a2)
{
}

{
  __ZN2ot4Coap12MessageQueue14DequeueAndFreeERNS0_7MessageE(this, a2);
}

uint64_t ot::Coap::ResponsesQueue::HandleTimer(ot::Coap::ResponsesQueue *this)
{
  uint64_t v14 = this;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  v11[2]  = this;
  v11[0]  = ot::Coap::MessageQueue::begin(this);
  v11[1]  = v1;
  v10[0]  = ot::Coap::MessageQueue::end(this);
  v10[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v11, v10))
  {
    int v9 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v11);
    ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)v8);
    ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom((ot::Coap::ResponsesQueue::ResponseMetadata *)v8, v9);
    if (ot::Time::operator>=(&Now, v8))
    {
      ot::Coap::ResponsesQueue::DequeueResponse(this, v9);
    }

    else
    {
      v6[2]  = DistantFuture;
      v6[1]  = v8[0];
      int v7 = ot::Min<ot::Time>(DistantFuture, v8[0]);
      DistantFuture  = v7;
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v11, v3);
  }

  v6[0]  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v6);
  if ((result & 1) != 0) {
    return ot::TimerMilli::FireAt((ot::Coap::ResponsesQueue *)((char *)this + 8), DistantFuture);
  }
  return result;
}

uint64_t ot::Message::Read<ot::Coap::ResponsesQueue::ResponseMetadata>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x40u);
}

{
  return __ZNK2ot7Message4ReadINS_4Coap14ResponsesQueue16ResponseMetadataEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Coap::TxParameters::IsValid(ot::Coap::TxParameters *this)
{
  BOOL v7 = 0;
  if (*((_BYTE *)this + 5)
    && *((unsigned __int8 *)this + 4) >= (int)*((unsigned __int8 *)this + 5)
    && *(_DWORD *)this >= 0x3E8u
    && *((unsigned __int8 *)this + 6) <= 0x14u)
  {
    unsigned int v1 = ot::Coap::Multiply((ot::Coap *)*(unsigned int *)this, (1 << (*((_BYTE *)this + 6) + 1)) - 1);
    BOOL v4 = 0;
    if (v6) {
      return *(_DWORD *)this != -200000 && v6 + *(_DWORD *)this + 200000 >= v6;
    }
    return v4;
  }

  return v7;
}

uint64_t ot::Coap::Multiply(ot::Coap *this, int a2)
{
  unsigned int v4 = 0;
  if ((_DWORD)this)
  {
    else {
      return 0;
    }
  }

  return v4;
}

uint64_t ot::Coap::TxParameters::CalculateSpan(ot::Coap::TxParameters *this, char a2)
{
  return *(_DWORD *)this
       * ((1 << a2) - 1)
}

void *ot::Coap::Resource::Resource(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = a2;
  result[1]  = a3;
  result[2]  = a4;
  result[3]  = 0LL;
  return result;
}

void *ot::Coap::Resource::Resource(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void *ot::Coap::Resource::Resource(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = ot::PathForUri(a2);
  ot::Coap::Resource::Resource(a1, (uint64_t)v4, a3, a4);
  return a1;
}

{
  char *v4;
  unsigned int v4 = ot::PathForUri(a2);
  ot::Coap::Resource::Resource(a1, (uint64_t)v4, a3, a4);
  return a1;
}

ot::Coap::Coap *ot::Coap::Coap::Coap(ot::Coap::Coap *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Coap::Coap::Coap(this, a2);
  return this;
}

uint64_t ot::Coap::Coap::Send( ot::Coap::Coap *this, ot::Coap::CoapBase *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  return ot::Coap::Coap::Send(this, a2, a3);
}

uint64_t ot::Coap::Coap::Start(uint64_t a1, __int16 a2, unsigned __int8 a3)
{
  unsigned int v6 = 0;
  char v5 = 0;
  if (!ot::Ip6::Udp::SocketHandle::IsBound((ot::Ip6::Udp::SocketHandle *)(a1 + 144)))
  {
    unsigned int v6 = ot::Ip6::Udp::Socket::Open((ot::InstanceLocator *)(a1 + 144), (uint64_t)ot::Coap::Coap::HandleUdpReceive, a1);
    if (!v6)
    {
      char v5 = 1;
      unsigned int v6 = ot::Ip6::Udp::Socket::Bind((ot::InstanceLocator *)(a1 + 144), a2, a3);
    }
  }

  if (v6 && (v5 & 1) != 0)
  {
    ot::Ip6::Udp::Socket::Close((ot::Ip6::Udp::Socket *)(a1 + 144));
    IgnoreError();
  }

  return v6;
}

BOOL ot::Ip6::Udp::SocketHandle::IsBound(ot::Ip6::Udp::SocketHandle *this)
{
  return *((_WORD *)this + 8) != 0;
}

{
  return __ZNK2ot3Ip63Udp12SocketHandle7IsBoundEv(this);
}

void ot::Coap::Coap::HandleUdpReceive(ot::Coap::CoapBase *a1, uint64_t a2, uint64_t a3)
{
  char v5 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  ot::Coap::CoapBase::Receive(a1, v5, v4);
}

uint64_t ot::Coap::Coap::Stop(ot::Coap::Coap *this)
{
  unsigned int v3 = 0;
  if (ot::Ip6::Udp::SocketHandle::IsBound((ot::Coap::Coap *)((char *)this + 144)))
  {
    unsigned int v3 = ot::Ip6::Udp::Socket::Close((ot::Coap::Coap *)((char *)this + 144));
    if (!v3) {
      ot::Coap::CoapBase::ClearRequestsAndResponses(this);
    }
  }

  return v3;
}

uint64_t ot::Coap::Coap::Send(ot::Coap::Coap *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  else {
    return 13;
  }
}

ot::MessageQueue *ot::MessageQueue::MessageQueue(ot::MessageQueue *this)
{
  return this;
}

void *ot::MessageQueue::SetTail(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

ot::Coap::Message::Iterator *ot::Coap::Message::Iterator::Iterator(ot::Coap::Message::Iterator *this)
{
  return this;
}

{
  ot::Message::Iterator::Iterator(this);
  return this;
}

ot::Message::Iterator *ot::Message::Iterator::Iterator(ot::Message::Iterator *this)
{
  uint64_t result = this;
  *((void *)this + mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0LL, 16LL, 1) = 0LL;
  return result;
}

uint64_t ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_7MessageENS1_8IteratorEEdeEv(a1);
}

uint64_t ot::Message::Append<ot::Coap::CoapBase::Metadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x48u);
}

{
  return __ZN2ot7Message6AppendINS_4Coap8CoapBase8MetadataEEE7otErrorRKT_(a1, a2);
}

ot::Message **ot::Coap::MessageQueue::Enqueue(ot::MessageQueue *a1, ot::Message *a2, char a3)
{
  return ot::MessageQueue::Enqueue(a1, a2, a3);
}

{
  return __ZN2ot4Coap12MessageQueue7EnqueueERNS0_7MessageENS_12MessageQueue13QueuePositionE(a1, a2, a3);
}

ot::Coap::Message::ConstIterator *ot::Coap::Message::ConstIterator::ConstIterator( ot::Coap::Message::ConstIterator *this)
{
  return this;
}

{
  ot::LinkedList<ot::Coap::Resource>::LinkedList(this);
  return this;
}

uint64_t ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorIKNS_7MessageENS1_13ConstIteratorEEdeEv(a1);
}

uint64_t ot::Message::Append<ot::Coap::ResponsesQueue::ResponseMetadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x40u);
}

{
  return __ZN2ot7Message6AppendINS_4Coap14ResponsesQueue16ResponseMetadataEEE7otErrorRKT_(a1, a2);
}

BOOL ot::LinkedList<ot::Coap::Resource>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Coap::Resource>::Find(a1, a2, v3) == 0;
}

{
  return __ZNK2ot10LinkedListINS_4Coap8ResourceEE8ContainsERKS2_(a1, a2);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Coap::Resource>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE4PushERS2_(a1, a2);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0LL;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }

  return v5;
}

{
  return __ZNK2ot10LinkedListINS_4Coap8ResourceEE4FindERKS2_RPS4_(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Coap::Resource>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

{
  return *(void *)(a1 + 24);
}

{
  return __ZN2ot15LinkedListEntryINS_4Coap8ResourceEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_4Coap8ResourceEE7GetNextEv(a1);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ot::LinkedList<ot::Coap::Resource>::Find(v3, a2, a3);
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE4FindERKS2_RPS2_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Coap::Resource>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(Next);
    ot::LinkedListEntry<ot::Coap::Resource>::SetNext(a2, v2);
  }

  return Next;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE8PopAfterEPS2_(a1, a2);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE3PopEv(a1);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE7GetHeadEv(a1);
}

void *ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator(a1, a2);
  return a1;
}

void *ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator( void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return __ZN2ot10LinkedListINS_4Coap8ResourceEE8Iterator7AdvanceEv(a1);
}

ot::Message *ot::Message::ConstIterator::Advance(ot::Message **this)
{
  uint64_t result = (ot::Message *)ot::Message::GetNext(*this);
  *this  = result;
  return result;
}

{
  return __ZN2ot7Message13ConstIterator7AdvanceEv(this);
}

void ot::Coap::Message::Init(ot::Coap::Message *this)
{
  *(_WORD *)(v2 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = 4;
  ot::Coap::Message::GetHelpData(this);
  ot::Message::SetLength(this, *(_WORD *)(v3 + 16));
  IgnoreError();
}

uint64_t ot::Clearable<ot::Coap::Message::HelpData>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8)  = 0LL;
  *(_DWORD *)(result + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_4Coap7Message8HelpDataEE5ClearEv(result);
}

void ot::Coap::Message::SetVersion(ot::Coap::Message *this, char a2)
{
  *v2 &= 0x3Fu;
  ot::Coap::Message::GetHelpData(this);
  *v3 |= a2 << 6;
}

{
  __ZN2ot4Coap7Message10SetVersionEh(this, a2);
}

void ot::Coap::Message::Init(ot::Coap::Message *a1, char a2, char a3)
{
}

void ot::Coap::Message::SetType(ot::Coap::Message *a1, char a2)
{
  *v2 &= 0xCFu;
  ot::Coap::Message::GetHelpData(a1);
  *v3 |= 16 * a2;
}

{
  __ZN2ot4Coap7Message7SetTypeENS0_4TypeE(a1, a2);
}

uint64_t ot::Coap::Message::Init(ot::Coap::Message *a1, char a2, char a3, unsigned __int8 a4)
{
  RandomToken  = ot::Coap::Message::GenerateRandomToken(a1, 2u);
  if (!RandomToken)
  {
    unsigned int v4 = ot::PathForUri(a4);
    return ot::Coap::Message::AppendUriPathOptions(a1, (ot *)v4);
  }

  return RandomToken;
}

uint64_t ot::Coap::Message::GenerateRandomToken(ot::Coap::Message *this, unsigned __int8 a2)
{
  if (a2 > 8uLL) {
    __assert_rtn("GenerateRandomToken", "coap_message.cpp", 376, "aTokenLength <= sizeof(token)");
  }
  ot::Random::Crypto::FillBuffer((ot::Random::Crypto *)v5, (unsigned __int8 *)a2);
  IgnoreError();
  return ot::Coap::Message::SetToken(this, v5, a2);
}

uint64_t ot::Coap::Message::AppendUriPathOptions(ot::Coap::Message *this, ot *a2)
{
  unsigned int v6 = (char *)a2;
  for (uint64_t i = ot::StringFind(a2, (const char *)0x2F); ; uint64_t i = ot::StringFind((ot *)((char *)v5 + 1), (const char *)0x2F))
  {
    unsigned int v5 = i;
    if (!i) {
      break;
    }
    unsigned int appended = ot::Coap::Message::AppendOption(this, 0xBu, (unsigned __int16)i - (unsigned __int16)v6, v6);
    if (appended) {
      return appended;
    }
    unsigned int v6 = (char *)v5 + 1;
  }

  return ot::Coap::Message::AppendStringOption(this, 0xBu, v6);
}

uint64_t ot::Coap::Message::InitAsPost(ot::Coap::Message *a1, ot::Ip6::Address *a2, unsigned __int8 a3)
{
  IsMulticast  = ot::Ip6::Address::IsMulticast(a2);
  return ot::Coap::Message::Init(a1, IsMulticast, 2, a3);
}

BOOL ot::Coap::Message::IsConfirmablePostRequest(ot::Coap::Message *this)
{
  BOOL v3 = 0;
  if (ot::Coap::Message::IsConfirmable(this)) {
    return ot::Coap::Message::IsPostRequest(this);
  }
  return v3;
}

BOOL ot::Coap::Message::IsPostRequest(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetCode(this) == 2;
}

{
  return __ZNK2ot4Coap7Message13IsPostRequestEv(this);
}

BOOL ot::Coap::Message::IsNonConfirmablePostRequest(ot::Coap::Message *this)
{
  BOOL v3 = 0;
  if (ot::Coap::Message::IsNonConfirmable(this)) {
    return ot::Coap::Message::IsPostRequest(this);
  }
  return v3;
}

uint64_t ot::Coap::Message::Finish(ot::Coap::Message *this)
{
  if ((*(_BYTE *)(v1 + 18) & 1) != 0)
  {
    ot::Coap::Message::GetHelpData(this);
    int v8 = *(unsigned __int16 *)(v2 + 16);
    if (v8 == (unsigned __int16)ot::Message::GetLength(this))
    {
      __int16 Length = ot::Message::GetLength(this);
      ot::Message::SetLength(this, Length - 1);
      IgnoreError();
    }
  }

  ot::Coap::Message::GetHelpData(this);
  BOOL v7 = v4;
  OptionStart  = ot::Coap::Message::GetOptionStart(this);
  return ot::Message::WriteBytes(this, 0, v7, OptionStart);
}

uint64_t ot::Coap::Message::WriteExtendedOptionField( ot::Coap::Message *this, unsigned __int16 a2, unsigned __int8 **a3)
{
  if (a2 >= 0xDu)
  {
    if (a2 >= 0x10Du)
    {
      unsigned __int8 v4 = 14;
      ot::Encoding::BigEndian::WriteUint16((unsigned __int16)(a2 - 269), *a3, (unsigned __int8 *)a3);
      *a3 += 2;
    }

    else
    {
      unsigned __int8 v4 = 13;
      *(*a3)++  = a2 - 13;
    }
  }

  else
  {
    return a2;
  }

  return v4;
}

uint64_t ot::Encoding::BigEndian::WriteUint16(uint64_t this, _BYTE *a2, unsigned __int8 *a3)
{
  *a2  = BYTE1(this);
  a2[1]  = this;
  return this;
}

{
  return __ZN2ot8Encoding9BigEndian11WriteUint16EtPh(this, a2, a3);
}

uint64_t ot::Coap::Message::AppendOption( ot::Coap::Message *this, unsigned __int16 a2, unsigned __int16 a3, char *a4)
{
  uint64_t v24 = this;
  unsigned __int16 v23 = a2;
  unsigned __int16 v22 = a3;
  int v21 = a4;
  unsigned int appended = 0;
  int v13 = a2;
  ot::Coap::Message::GetHelpData(this);
  if (v13 >= *(unsigned __int16 *)(v4 + 12))
  {
    ot::Coap::Message::GetHelpData(this);
    unsigned __int16 v19 = v23 - *(_WORD *)(v5 + 12);
    uint64_t v15 = (unsigned __int8 *)&v18;
    char v17 = 16 * ot::Coap::Message::WriteExtendedOptionField(this, v19, &v15);
    char v6 = ot::Coap::Message::WriteExtendedOptionField(this, v22, &v15);
    v17 |= v6;
    unsigned __int16 v16 = (_WORD)v15 - (unsigned __int16)&v17;
    unsigned __int16 Length = ot::Message::GetLength(this);
    if (v16 + Length + v22 < 0x200)
    {
      unsigned int appended = ot::Message::AppendBytes(this, &v17, v16);
      if (!appended)
      {
        unsigned int appended = ot::Message::AppendBytes(this, v21, v22);
        if (!appended)
        {
          unsigned __int16 v11 = v23;
          ot::Coap::Message::GetHelpData(this);
          *(_WORD *)(v8 + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v11;
          __int16 v12 = ot::Message::GetLength(this);
          ot::Coap::Message::GetHelpData(this);
          *(_WORD *)(v9 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = v12;
        }
      }
    }

    else
    {
      return 3;
    }
  }

  else
  {
    return 7;
  }

  return appended;
}

uint64_t ot::Coap::Message::AppendUintOption( ot::Coap::Message *this, unsigned __int16 a2, unsigned __int8 *a3)
{
  unsigned __int16 v11 = this;
  unsigned __int16 v10 = a2;
  int v9 = (int)a3;
  BOOL v7 = v8;
  unsigned __int16 v6 = 4;
  ot::Encoding::BigEndian::WriteUint32(a3, v8, a3);
  while (1)
  {
    BOOL v4 = 0;
    if (v6) {
      BOOL v4 = *v7 == 0;
    }
    if (!v4) {
      break;
    }
    ++v7;
    --v6;
  }

  return ot::Coap::Message::AppendOption(this, v10, v6, v7);
}

uint64_t ot::Encoding::BigEndian::WriteUint32(uint64_t this, _BYTE *a2, unsigned __int8 *a3)
{
  *a2  = BYTE3(this);
  a2[1]  = BYTE2(this);
  a2[2]  = BYTE1(this);
  a2[3]  = this;
  return this;
}

{
  return __ZN2ot8Encoding9BigEndian11WriteUint32EjPh(this, a2, a3);
}

uint64_t ot::Coap::Message::AppendStringOption(ot::Coap::Message *this, unsigned __int16 a2, char *a3)
{
  unsigned __int16 v3 = strlen(a3);
  return ot::Coap::Message::AppendOption(this, a2, v3, a3);
}

uint64_t ot::Coap::Message::ReadUriPathOptions(ot::Coap::Message *this, char (*a2)[33])
{
  unsigned __int16 v11 = this;
  unsigned __int16 v10 = (char *)a2;
  int v9 = (char *)a2;
  unsigned int v8 = 0;
  unsigned int v8 = ot::Coap::Option::Iterator::Init((ot::Coap::Option::Iterator *)v7, this, 0xBu);
  if (!v8)
  {
    while (!ot::Coap::Option::Iterator::IsDone((ot::Coap::Option::Iterator *)v7))
    {
      Option  = (ot::Coap::Option *)ot::Coap::Option::Iterator::GetOption((ot::Coap::Option::Iterator *)v7);
      unsigned __int16 Length = ot::Coap::Option::GetLength(Option);
      if (v9 != v10)
      {
        unsigned __int16 v3 = v9++;
        char *v3 = 47;
      }

      uint64_t v5 = &v9[Length];
      if ((unint64_t)v5 >= ot::GetArrayEnd<char,(unsigned short)33>((uint64_t)v10))
      {
        unsigned int v8 = 6;
        break;
      }

      ot::Coap::Option::Iterator::ReadOptionValue((ot::Coap::Option::Iterator *)v7, v9);
      IgnoreError();
      v9 += Length;
      unsigned int v8 = ot::Coap::Option::Iterator::Advance((ot::Coap::Option::Iterator *)v7, 0xBu);
      if (v8) {
        break;
      }
    }
  }

  *int v9 = 0;
  return v8;
}

uint64_t ot::Coap::Option::GetLength(ot::Coap::Option *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return __ZNK2ot4Coap6Option9GetLengthEv(this);
}

uint64_t ot::GetArrayEnd<char,(unsigned short)33>(uint64_t a1)
{
  return a1 + 33;
}

{
  return __ZN2ot11GetArrayEndIcLt33EEEPT_RAT0__S1_(a1);
}

uint64_t ot::Coap::Option::Iterator::ReadOptionValue(ot::Coap::Option::Iterator *this, char *a2)
{
  unsigned int v5 = 0;
  if (ot::Coap::Option::Iterator::IsDone(this))
  {
    return 23;
  }

  else
  {
    Message  = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this);
    ot::Message::ReadBytes(Message, *((_WORD *)this + 6) - *((_WORD *)this + 5), a2, *((_WORD *)this + 5));
  }

  return v5;
}

uint64_t ot::Coap::Message::AppendBlockOption( ot::Coap::Message *a1, char a2, unsigned int a3, char a4, int a5)
{
  if (a2 == 1 || a2 == 2)
  {
    if (a5 <= 6)
    {
      if (a3 < 0xFFFF)
      {
        if (a2 == 1) {
          unsigned __int16 v5 = 27;
        }
        else {
          unsigned __int16 v5 = 23;
        }
        return ot::Coap::Message::AppendUintOption( a1,  v5,  (unsigned __int8 *)(a5 | (8 * (a4 & 1)) | (16 * a3)));
      }

      else
      {
        return 7;
      }
    }

    else
    {
      return 7;
    }
  }

  else
  {
    return 7;
  }

uint64_t ot::Coap::Message::SetPayloadMarker(ot::Coap::Message *this)
{
  int v9 = this;
  unsigned int v8 = 0;
  char v7 = -1;
  if ((unsigned __int16)ot::Message::GetLength(this) < 0x200u)
  {
    unsigned int v8 = ot::Message::Append<unsigned char>(this, &v7);
    if (!v8)
    {
      ot::Coap::Message::GetHelpData(this);
      *(_BYTE *)(v1 + 18)  = 1;
      __int16 Length = ot::Message::GetLength(this);
      ot::Coap::Message::GetHelpData(this);
      *(_WORD *)(v2 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = Length;
      ot::Coap::Message::GetHelpData(this);
      ot::Message::SetOffset(this, *(_WORD *)(v3 + 16));
    }
  }

  else
  {
    return 3;
  }

  return v8;
}

uint64_t ot::Message::Append<unsigned char>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 1u);
}

{
  return __ZN2ot7Message6AppendIhEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Coap::Message::ParseHeader(ot::Coap::Message *this)
{
  __int16 v18 = this;
  unsigned int v17 = 0;
  Reserved  = ot::Message::GetReserved(this);
  ot::Coap::Message::GetHelpData(this);
  if (v1 - ot::Buffer::GetFirstData(this) + 20 > (unint64_t)Reserved) {
    __assert_rtn( "ParseHeader",  "coap_message.cpp",  338,  "GetReserved() >= sizeof(HelpData) + static_cast<size_t>((reinterpret_cast<uint8_t *>(&GetHelpData()) - GetFirstData()))");
  }
  ot::Coap::Message::GetHelpData(this);
  ot::Clearable<ot::Coap::Message::HelpData>::Clear(v2);
  Offset  = ot::Message::GetOffset(this);
  ot::Coap::Message::GetHelpData(this);
  *(_WORD *)(v3 + 1++*(_WORD *)(this + 4) = Offset;
  ot::Coap::Message::GetHelpData(this);
  unsigned __int16 v13 = *(_WORD *)(v4 + 14);
  ot::Coap::Message::GetHelpData(this);
  ot::Message::Read<ot::Coap::Message::Header>(this, v13, v5);
  IgnoreError();
  if (ot::Coap::Message::GetTokenLength(this) <= 8u)
  {
    unsigned int v17 = ot::Coap::Option::Iterator::Init((ot::Coap::Option::Iterator *)v16, this);
    if (!v17)
    {
      while (!ot::Coap::Option::Iterator::IsDone((ot::Coap::Option::Iterator *)v16))
      {
        unsigned int v17 = ot::Coap::Option::Iterator::Advance((ot::Coap::Option::Iterator *)v16);
        if (v17) {
          return v17;
        }
      }

      PayloadMessageOffset  = ot::Coap::Option::Iterator::GetPayloadMessageOffset((ot::Coap::Option::Iterator *)v16);
      ot::Coap::Message::GetHelpData(this);
      __int16 v11 = PayloadMessageOffset - *(_WORD *)(v6 + 14);
      ot::Coap::Message::GetHelpData(this);
      *(_WORD *)(v7 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = v11;
      ot::Coap::Message::GetHelpData(this);
      ot::Message::MoveOffset(this, *(unsigned __int16 *)(v8 + 16));
    }
  }

  else
  {
    return 6;
  }

  return v17;
}

uint64_t ot::Message::GetReserved(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 44);
}

{
  return __ZNK2ot7Message11GetReservedEv(this);
}

uint64_t ot::Message::Read<ot::Coap::Message::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xCu);
}

{
  return __ZNK2ot7Message4ReadINS_4Coap7Message6HeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Coap::Option::Iterator::Init(ot::Coap::Option::Iterator *this, const ot::Coap::Message *a2)
{
  unsigned int v6 = 6;
  int v4 = *(unsigned __int16 *)(ot::Coap::Message::GetHelpData(a2) + 14);
  unsigned int v5 = v4 + (unsigned __int16)ot::Coap::Message::GetOptionStart(a2);
  if (v5 <= (unsigned __int16)ot::Message::GetLength(a2))
  {
    *((_WORD *)this + ++*(_WORD *)(this + 4) = 0;
    *((_WORD *)this + 5)  = 0;
    *(void *)this  = a2;
    *((_WORD *)this + 6)  = v5;
    return ot::Coap::Option::Iterator::Advance(this);
  }

  else
  {
    ot::Coap::Option::Iterator::MarkAsParseErrored(this);
  }

  return v6;
}

uint64_t ot::Coap::Option::Iterator::Advance(ot::Coap::Option::Iterator *this)
{
  __int16 v11 = this;
  unsigned int v10 = 0;
  if (!ot::Coap::Option::Iterator::IsDone(this))
  {
    unsigned int v10 = ot::Coap::Option::Iterator::Read(this, 1u, (char *)&v9);
    if (v10 || v9 == 255)
    {
      ot::Coap::Option::Iterator::MarkAsDone((uint64_t)this);
      if (v10
        || (int v5 = *((unsigned __int16 *)this + 6),
            Message  = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this),
            v5 < (unsigned __int16)ot::Message::GetLength(Message)))
      {
        unsigned int v10 = 0;
      }

      else
      {
        unsigned int v10 = 6;
      }
    }

    else
    {
      unsigned __int16 v8 = (v9 & 0xF0) >> 4;
      unsigned int v10 = ot::Coap::Option::Iterator::ReadExtendedOptionField(this, &v8);
      if (!v10)
      {
        unsigned __int16 v7 = v9 & 0xF;
        unsigned int v10 = ot::Coap::Option::Iterator::ReadExtendedOptionField(this, &v7);
        if (!v10)
        {
          int v4 = v7;
          uint64_t v2 = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this);
          if (v4 <= (unsigned __int16)ot::Message::GetLength(v2) - *((unsigned __int16 *)this + 6))
          {
            *((_WORD *)this + 6) += v7;
            *((_WORD *)this + 4) += v8;
            *((_WORD *)this + 5)  = v7;
          }

          else
          {
            unsigned int v10 = 6;
          }
        }
      }
    }
  }

  if (v10) {
    ot::Coap::Option::Iterator::MarkAsParseErrored(this);
  }
  return v10;
}

uint64_t ot::Coap::Option::Iterator::GetPayloadMessageOffset(ot::Coap::Option::Iterator *this)
{
  return *((unsigned __int16 *)this + 6);
}

{
  return __ZNK2ot4Coap6Option8Iterator23GetPayloadMessageOffsetEv(this);
}

uint64_t ot::Coap::Message::SetToken(ot::Coap::Message *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  if (a3 > 8u) {
    __assert_rtn("SetToken", "coap_message.cpp", 363, "aTokenLength <= kMaxTokenLength");
  }
  ot::Coap::Message::SetTokenLength(this, a3);
  Token  = (void *)ot::Coap::Message::GetToken(this);
  memcpy(Token, a2, a3);
  ot::Coap::Message::GetHelpData(this);
  *(_WORD *)(v4 + 16) += a3;
  ot::Coap::Message::GetHelpData(this);
  return ot::Message::SetLength(this, *(_WORD *)(v5 + 16));
}

void ot::Coap::Message::SetTokenLength(ot::Coap::Message *this, char a2)
{
  *v2 &= 0xF0u;
  ot::Coap::Message::GetHelpData(this);
  *v3 |= a2 & 0xF;
}

{
  __ZN2ot4Coap7Message14SetTokenLengthEh(this, a2);
}

uint64_t ot::Coap::Message::GetToken(ot::Coap::Message *this)
{
  return v1 + 4;
}

{
  return __ZN2ot4Coap7Message8GetTokenEv(this);
}

uint64_t ot::Random::Crypto::FillBuffer(ot::Random::Crypto *this, unsigned __int8 *a2)
{
  return ot::Random::Manager::CryptoFillBuffer(this, (unsigned __int8 *)(unsigned __int16)a2);
}

{
  return __ZN2ot6Random6Crypto10FillBufferEPht(this, a2);
}

uint64_t ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message *this, const ot::Coap::Message *a2)
{
  Token  = (unsigned __int8 *)ot::Coap::Message::GetToken(a2);
  Token__int16 Length = ot::Coap::Message::GetTokenLength(a2);
  return ot::Coap::Message::SetToken(this, Token, TokenLength);
}

BOOL ot::Coap::Message::IsTokenEqual(ot::Coap::Message *this, const ot::Coap::Message *a2)
{
  Token__int16 Length = ot::Coap::Message::GetTokenLength(this);
  BOOL v6 = 0;
  if (TokenLength == ot::Coap::Message::GetTokenLength(a2))
  {
    __s1  = (void *)ot::Coap::Message::GetToken(this);
    Token  = (const void *)ot::Coap::Message::GetToken(a2);
    return memcmp(__s1, Token, TokenLength) == 0;
  }

  return v6;
}

uint64_t ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message *this, const ot::Coap::Message *a2)
{
  MessageId  = ot::Coap::Message::GetMessageId(a2);
  ot::Coap::Message::SetMessageId(this, MessageId);
  return ot::Coap::Message::SetTokenFromMessage(this, a2);
}

ot::Message *ot::Coap::Message::Clone(ot::Coap::Message *this, unsigned __int16 a2)
{
  BOOL v6 = ot::Message::Clone(this, a2);
  if (v6)
  {
    HelpData  = ot::Coap::Message::GetHelpData(this);
    ot::Coap::Message::GetHelpData(v6);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)HelpData;
    *(_DWORD *)(v2 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = *(_DWORD *)(HelpData + 16);
  }

  return v6;
}

uint64_t ot::Coap::Message::CodeToString(ot::Coap::Message *this)
{
  Code  = ot::Coap::Message::GetCode(this);
  return ot::Stringify::Lookup<(unsigned short)28>( Code,  ot::Coap::Message::CodeToString(void)const::kCodeTable,  (uint64_t)"Unknown",  v2,  v3,  v4);
}

uint64_t ot::Stringify::Lookup<(unsigned short)28>( __int16 a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  __int16 v10 = a1;
  unsigned __int16 v8 = ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)28>( (ot::BinarySearch *)&v10,  a2,  a3,  a4,  a5,  a6);
  if (v8) {
    return *((void *)v8 + 1);
  }
  else {
    return a3;
  }
}

{
  return __ZN2ot9Stringify6LookupILt28EEEPKctRAT__KNS0_5EntryES3_(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Coap::MessageQueue::begin(ot::Coap::MessageQueue *this)
{
  Head  = (ot::Message *)ot::Coap::MessageQueue::GetHead(this);
  _ZN2ot4Coap7Message8IteratorCI1NS_7Message8IteratorEEPS3_((ot::Message::Iterator *)&v3, Head);
  return v3;
}

{
  uint64_t Head;
  uint64_t v3;
  Head  = ot::Coap::MessageQueue::GetHead(this);
  _ZN2ot4Coap7Message13ConstIteratorCI1NS_7Message13ConstIteratorEEPKS3_(&v3, Head);
  return v3;
}

ot::Message::Iterator *_ZN2ot4Coap7Message8IteratorCI1NS_7Message8IteratorEEPS3_( ot::Message::Iterator *a1, ot::Message *a2)
{
  return a1;
}

void *_ZN2ot4Coap7Message13ConstIteratorCI1NS_7Message13ConstIteratorEEPKS3_(void *a1, uint64_t a2)
{
  return a1;
}

uint64_t ot::Coap::Option::Iterator::MarkAsParseErrored(ot::Coap::Option::Iterator *this)
{
  uint64_t result = ot::Coap::Option::Iterator::MarkAsDone((uint64_t)this);
  *((_WORD *)this + 6)  = 0;
  return result;
}

{
  return __ZN2ot4Coap6Option8Iterator18MarkAsParseErroredEv(this);
}

uint64_t ot::Coap::Option::Iterator::Read(ot::Coap::Option::Iterator *this, unsigned __int16 a2, char *a3)
{
  Message  = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this);
  unsigned int v6 = ot::Message::Read(Message, *((_WORD *)this + 6), a3, a2);
  if (!v6) {
    *((_WORD *)this + 6) += a2;
  }
  return v6;
}

uint64_t ot::Coap::Option::Iterator::MarkAsDone(uint64_t this)
{
  *(_WORD *)(this + 10)  = -1;
  return this;
}

{
  return __ZN2ot4Coap6Option8Iterator10MarkAsDoneEv(this);
}

uint64_t ot::Coap::Option::Iterator::ReadExtendedOptionField( ot::Coap::Option::Iterator *this, unsigned __int16 *a2)
{
  unsigned __int16 v7 = this;
  unsigned int v6 = a2;
  unsigned int v5 = 0;
  if (*a2 >= 0xDu)
  {
    if (*v6 == 13)
    {
      unsigned int v5 = ot::Coap::Option::Iterator::Read(this, 1u, (char *)&v4);
      if (!v5) {
        *unsigned int v6 = v4 + 13;
      }
    }

    else if (*v6 == 14)
    {
      unsigned int v5 = ot::Coap::Option::Iterator::Read(this, 2u, (char *)&v3);
      if (!v5)
      {
        unsigned __int16 v3 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v3);
        *unsigned int v6 = v3 + 269;
      }
    }

    else
    {
      return 6;
    }
  }

  return v5;
}

uint64_t ot::Coap::Option::Iterator::ReadOptionValue(ot::Coap::Option::Iterator *this, unint64_t *a2)
{
  unsigned int v5 = 0;
  if (ot::Coap::Option::Iterator::IsDone(this))
  {
    return 23;
  }

  else if (*((unsigned __int16 *)this + 5) <= 8uLL)
  {
    ot::Coap::Option::Iterator::ReadOptionValue(this, v7);
    IgnoreError();
    *a2  = 0LL;
    for (unsigned __int16 i = 0; i < (int)*((unsigned __int16 *)this + 5); ++i)
    {
      *a2 <<= 8;
      *a2 |= v7[i];
    }
  }

  else
  {
    return 3;
  }

  return v5;
}

uint64_t ot::Coap::Option::Iterator::InitOrAdvance( ot::Coap::Option::Iterator *this, const ot::Coap::Message *a2, unsigned __int16 a3)
{
  if (a2) {
    unsigned int v6 = ot::Coap::Option::Iterator::Init(this, a2);
  }
  else {
    unsigned int v6 = ot::Coap::Option::Iterator::Advance(this);
  }
  for (unsigned int i = v6; ; unsigned int i = ot::Coap::Option::Iterator::Advance(this))
  {
    BOOL v5 = 0;
    if (!i)
    {
      BOOL v5 = 0;
      if (!ot::Coap::Option::Iterator::IsDone(this))
      {
        Option  = (ot::Coap::Option *)ot::Coap::Option::Iterator::GetOption(this);
        BOOL v5 = a3 != (unsigned __int16)ot::Coap::Option::GetNumber(Option);
      }
    }

    if (!v5) {
      break;
    }
  }

  return i;
}

uint64_t ot::Coap::Option::GetNumber(ot::Coap::Option *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot4Coap6Option9GetNumberEv(this);
}

uint64_t ot::Random::Manager::CryptoFillBuffer(ot::Random::Manager *this, unsigned __int8 *a2)
{
  return j__otPlatCryptoRandomGet((uint64_t)this, (unsigned __int16)a2);
}

{
  return __ZN2ot6Random7Manager16CryptoFillBufferEPht(this, a2);
}

ot::Message::Iterator *_ZN2ot4Coap7Message8IteratorCI2NS_7Message8IteratorEEPS3_( ot::Message::Iterator *a1, ot::Message *a2)
{
  return a1;
}

ot::Message::Iterator *ot::Message::Iterator::Iterator(ot::Message::Iterator *this, ot::Message *a2)
{
  Message  = ot::Message::Iterator::NextMessage(a2, v2);
  uint64_t result = this;
  *((void *)this + ot::Coap::Message::SetVersion(this, 1) = Message;
  return result;
}

uint64_t ot::Message::Iterator::NextMessage(ot::Message::Iterator *this, ot::Message *a2)
{
  if (this) {
    return ot::Message::GetNext(this);
  }
  else {
    return 0LL;
  }
}

{
  return __ZN2ot7Message8Iterator11NextMessageEPS0_(this, a2);
}

uint64_t ot::Message::NextOf(ot::Message *this, const ot::Message *a2)
{
  if (this) {
    return *(void *)ot::Message::Next(this);
  }
  else {
    return 0LL;
  }
}

{
  return __ZN2ot7Message6NextOfEPKS0_(this, a2);
}

char *ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)28>( ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find( a1,  a2,  (const void *)0x1C,  0x10u,  (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<unsigned short,ot::Stringify::Entry>,  a6);
}

{
  return __ZN2ot12BinarySearch4FindItNS_9Stringify5EntryELt28EEEPKT0_RKT_RAT1__S5_(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::BinarySearch::Compare<unsigned short,ot::Stringify::Entry>( unsigned __int16 *a1, ot::Stringify::Entry *a2)
{
  return ot::Stringify::Entry::Compare(a2, *a1);
}

uint64_t ot::Stringify::Entry::Compare(ot::Stringify::Entry *this, unsigned __int16 a2)
{
  return ot::ThreeWayCompare<unsigned short>(a2, *(_WORD *)this);
}

{
  return __ZNK2ot9Stringify5Entry7CompareEt(this, a2);
}

uint64_t ot::ThreeWayCompare<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  if (a1 == a2)
  {
    return 0;
  }

  else if (a1 > (int)a2)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareItEEiT_S1_(a1, a2);
}

ot::Coap::CoapSecure *ot::Coap::CoapSecure::CoapSecure( ot::Coap::CoapSecure *this, ot::Instance *a2, char a3)
{
  char v5 = a3 & 1;
  ot::Coap::CoapBase::CoapBase((uint64_t)this, a2, (uint64_t)ot::Coap::CoapSecure::Send);
  ot::MeshCoP::Dtls::Dtls((ot::Coap::CoapSecure *)((char *)this + 144), a2, v5 & 1);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 129);
  ot::Coap::MessageQueue::MessageQueue((ot::Coap::CoapSecure *)((char *)this + 1048));
  ot::TaskletContext::TaskletContext( (ot::Coap::CoapSecure *)((char *)this + 1056),  a2,  (void (*)(ot::Tasklet *))ot::Coap::CoapSecure::HandleTransmit,  this);
  return this;
}

{
  ot::Coap::CoapSecure::CoapSecure(this, a2, a3 & 1);
  return this;
}

uint64_t ot::Coap::CoapSecure::Send( ot::Coap::CoapSecure *this, ot::Coap::CoapBase *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  return ot::Coap::CoapSecure::Send(this, a2, a3);
}

void ot::Coap::CoapSecure::HandleTransmit(ot::Coap::CoapSecure *this, ot::Tasklet *a2)
{
  Context  = (ot::Coap::CoapSecure *)ot::TaskletContext::GetContext(this);
  ot::Coap::CoapSecure::HandleTransmit(Context);
}

ot::TaskletContext *ot::TaskletContext::TaskletContext( ot::TaskletContext *this, ot::Instance *a2, void (*a3)(ot::Tasklet *), void *a4)
{
  return this;
}

{
  ot::TaskletContext *result;
  ot::Tasklet::Tasklet(this, (uint64_t)a2, (uint64_t)a3);
  uint64_t result = this;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a4;
  return result;
}

uint64_t ot::Coap::CoapSecure::Start(ot::Coap::CoapSecure *this, __int16 a2)
{
  unsigned int v4 = ot::MeshCoP::Dtls::Open( (ot::Coap::CoapSecure *)((char *)this + 144),  (void (*)(void *, unsigned __int8 *, unsigned __int16))ot::Coap::CoapSecure::HandleDtlsReceive,  (void (*)(void *, BOOL))ot::Coap::CoapSecure::HandleDtlsConnected,  (uint64_t)this);
  if (!v4) {
    return ot::MeshCoP::Dtls::Bind((ot::Coap::CoapSecure *)((char *)this + 144), a2);
  }
  return v4;
}

void *ot::CallbackBase<void (*)(BOOL,void *)>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvbPvEE5ClearEv(result);
}

void ot::Coap::CoapSecure::HandleDtlsReceive(ot::Coap::CoapSecure *this, char *a2, unsigned __int8 *a3)
{
}

void *ot::Coap::CoapSecure::HandleDtlsConnected(ot::Coap::CoapSecure *this, void *a2)
{
  return ot::Coap::CoapSecure::HandleDtlsConnected(this, a2 & 1);
}

uint64_t ot::Coap::CoapSecure::Start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = ot::MeshCoP::Dtls::Open( (ot::MeshCoP::Dtls *)(a1 + 144),  (void (*)(void *, unsigned __int8 *, unsigned __int16))ot::Coap::CoapSecure::HandleDtlsReceive,  (void (*)(void *, BOOL))ot::Coap::CoapSecure::HandleDtlsConnected,  a1);
  if (!v5) {
    return ot::MeshCoP::Dtls::Bind(a1 + 144, a2, a3);
  }
  return v5;
}

ot::Message *ot::Coap::CoapSecure::Stop(void **this)
{
  return ot::Coap::CoapBase::ClearRequestsAndResponses((ot::Coap::CoapBase *)this);
}

uint64_t ot::Coap::CoapSecure::Connect( __n128 *this, const ot::Ip6::SockAddr *a2, void (*a3)(BOOL, void *), uint64_t a4)
{
  return ot::MeshCoP::Dtls::Connect(this + 9, a2);
}

void *ot::CallbackBase<void (*)(BOOL,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvbPvEE3SetES3_S1_(result, a2, a3);
}

uint64_t ot::Coap::CoapSecure::SetPsk(ot::Coap::CoapSecure *this, const ot::MeshCoP::JoinerPskd *a2)
{
  unsigned int v6 = (ot::Coap::CoapSecure *)((char *)this + 144);
  ot::MeshCoP::JoinerPskd::GetAsCString(a2);
  unsigned int v5 = v2;
  unsigned __int8 Length = ot::MeshCoP::JoinerPskd::GetLength(a2);
  uint64_t result = ot::MeshCoP::Dtls::SetPsk(v6, v5, Length);
  if ((_DWORD)result) {
    __assert_rtn("SetPsk", "coap_secure.cpp", 104, "false");
  }
  return result;
}

  ;
}

uint64_t ot::MeshCoP::JoinerPskd::GetLength(ot::MeshCoP::JoinerPskd *this)
{
  return ot::StringLength(this, (const char *)0x21);
}

{
  return __ZNK2ot7MeshCoP10JoinerPskd9GetLengthEv(this);
}

uint64_t ot::Coap::CoapSecure::SendMessage(uint64_t a1, ot::Coap::Message *a2, uint64_t a3, uint64_t a4)
{
  if (ot::Coap::CoapSecure::IsConnected((ot::Coap::CoapSecure *)a1))
  {
    MessageInfo  = (ot::Ip6::MessageInfo *)ot::MeshCoP::Dtls::GetMessageInfo((ot::MeshCoP::Dtls *)(a1 + 144));
    return ot::Coap::CoapBase::SendMessage((ot::Coap::TxParameters *)a1, a2, MessageInfo, a3, a4);
  }

  else
  {
    return 13;
  }

BOOL ot::Coap::CoapSecure::IsConnected(ot::Coap::CoapSecure *this)
{
  return ot::MeshCoP::Dtls::IsConnected((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return __ZNK2ot4Coap10CoapSecure11IsConnectedEv(this);
}

uint64_t ot::MeshCoP::Dtls::GetMessageInfo(ot::MeshCoP::Dtls *this)
{
  return (uint64_t)this + 736;
}

{
  return __ZNK2ot7MeshCoP4Dtls14GetMessageInfoEv(this);
}

uint64_t ot::Coap::CoapSecure::SendMessage( ot::Coap::TxParameters *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3, uint64_t a4, uint64_t a5)
{
  return ot::Coap::CoapBase::SendMessage(a1, a2, a3, a4, a5);
}

uint64_t ot::Coap::CoapSecure::Send( ot::Coap::CoapSecure *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return 0LL;
}

void *ot::Coap::CoapSecure::HandleDtlsConnected(ot::Coap::CoapSecure *this, char a2)
{
  unsigned int v4 = this;
  char v3 = a2 & 1;
  return ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<BOOL &>( (void *)this + 129,  &v3);
}

void *ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<BOOL &>( void *result, _BYTE *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<BOOL &>( (uint64_t)result,  a2);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvbPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJRbEEEvDpOT_(result, a2);
}

void ot::Coap::CoapSecure::HandleDtlsReceive(ot::Coap::CoapSecure *this, char *a2, unsigned __int16 a3)
{
  unsigned int v5 = (ot::Coap::Message *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
  HelpDataReserved  = ot::Coap::Message::GetHelpDataReserved(v5);
  unsigned __int16 v7 = ot::MessagePool::Allocate(v5, 0, HelpDataReserved);
  if (v7 && !ot::Message::AppendBytes(v7, a2, a3))
  {
    MessageInfo  = (const ot::Ip6::MessageInfo *)ot::MeshCoP::Dtls::GetMessageInfo((ot::Coap::CoapSecure *)((char *)this + 144));
    ot::Coap::CoapBase::Receive(this, v7, MessageInfo);
  }

  if (v7) {
    ot::Message::Free(v7);
  }
}

uint64_t ot::Coap::Message::GetHelpDataReserved(ot::Coap::Message *this)
{
  return 22LL;
}

{
  return __ZN2ot4Coap7Message19GetHelpDataReservedEv(this);
}

uint64_t ot::TaskletContext::GetContext(ot::TaskletContext *this)
{
  return *((void *)this + 2);
}

{
  return __ZN2ot14TaskletContext10GetContextEv(this);
}

void ot::Coap::CoapSecure::HandleTransmit(ot::Coap::CoapSecure *this)
{
  int v18 = 0;
  Head  = (ot::Message *)ot::MessageQueue::GetHead((ot::Coap::CoapSecure *)((char *)this + 1048));
  if (Head)
  {
    ot::MessageQueue::Dequeue((ot::Coap::CoapSecure *)((char *)this + 1048), Head);
    unsigned __int16 Length = ot::Message::GetLength(Head);
    int v18 = ot::MeshCoP::Dtls::Send((ot::Coap::CoapSecure *)((char *)this + 144), Head, Length);
  }

  if (v18)
  {
    char v2 = ot::ErrorToString(v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"CoapSecure", "Transmit: %s", v3, v4, v5, v6, v7, v8, v2);
    ot::Message::Free(Head);
  }

  else
  {
    char v9 = ot::ErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"CoapSecure", "Transmit: %s", v10, v11, v12, v13, v14, v15, v9);
  }

void *ot::Tasklet::Tasklet(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a1;
  *a1  = a3;
  a1[1]  = 0LL;
  return result;
}

BOOL ot::MeshCoP::Dtls::IsConnected(ot::MeshCoP::Dtls *this)
{
  return *(_BYTE *)this == 4;
}

{
  return __ZNK2ot7MeshCoP4Dtls11IsConnectedEv(this);
}

uint64_t ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<BOOL &>( uint64_t a1, _BYTE *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2 & 1, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvbPvELNS_23CallbackContextPositionE1EE6InvokeIJRbEEEvDpOT_(a1, a2);
}

_WORD *ot::Crc16::Crc16(_WORD *a1, __int16 a2)
{
  *a1  = a2;
  ot::Crc16::Init((uint64_t)a1);
  return a1;
}

{
  ot::Crc16::Crc16(a1, a2);
  return a1;
}

uint64_t ot::Crc16::Init(uint64_t this)
{
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return this;
}

{
  return __ZN2ot5Crc164InitEv(this);
}

_WORD *ot::Crc16::Update(_WORD *this, unsigned __int8 a2)
{
  this[1] ^= a2 << 8;
  char v2 = 8;
  do
  {
    else {
      this[1]  = (2 * this[1]) ^ *this;
    }
    --v2;
  }

  while (v2);
  return this;
}

const char *ot::ErrorToString(int a1)
{
  else {
    return ot::ErrorToString(otError)::kErrorStrings[a1];
  }
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)38>()
{
  return 38LL;
}

{
  return __ZN2ot14GetArrayLengthIPKcLt38EEEtRAT0__KT_();
}

uint64_t ot::Heap::CAlloc(ot::Heap *this, __int16 a2)
{
  __int16 v5 = (__int16)this;
  Heap  = (ot::Utils::Heap *)ot::Instance::GetHeap(this);
  return ot::Utils::Heap::CAlloc(Heap, v5, a2);
}

unsigned __int16 *ot::Heap::Free(ot::Heap *this, void *a2)
{
  Heap  = (unsigned __int16 *)ot::Instance::GetHeap(this);
  return ot::Utils::Heap::Free(Heap, this);
}

ot::Instance *ot::Instance::Instance(ot::Instance *this)
{
  uint64_t result = this;
  *((_BYTE *)this + 17711ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return result;
}

{
  ot::Instance::Instance(this);
  return this;
}

ot::TimerMilli::Scheduler *ot::TimerMilli::Scheduler::Scheduler( ot::TimerMilli::Scheduler *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Timer::Scheduler::Scheduler(this, a2);
  return this;
}

ot::Radio *ot::Radio::Radio(ot::Radio *this, ot::Instance *a2)
{
  return this;
}

{
  ot::InstanceLocator::InstanceLocator();
  ot::SettingsDriver::SettingsDriver((ot::Radio *)((char *)this + 1), a2);
  return this;
}

ot::Settings *ot::Settings::Settings(ot::Settings *this, ot::Instance *a2)
{
  return this;
}

ot::SettingsDriver *ot::SettingsDriver::SettingsDriver(ot::SettingsDriver *this, ot::Instance *a2)
{
  return this;
}

ot::Ip6::Filter *ot::Ip6::Filter::Filter(ot::Ip6::Filter *this, ot::Instance *a2)
{
  return this;
}

{
  ot::InstanceLocator::InstanceLocator();
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::Array((uint64_t)this);
  return this;
}

ot::NetworkData::Local *ot::NetworkData::Local::Local(ot::NetworkData::Local *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkData::MutableNetworkData::MutableNetworkData(this, a2, (unsigned __int8 *)this + 10, 0, 254);
  return this;
}

uint64_t ot::Instance::GetHeap(ot::Instance *this)
{
  if (!ot::Instance::sHeap)
  {
    ot::Utils::Heap::Heap((ot::Utils::Heap *)&ot::sHeapRaw);
    ot::Instance::sHeap  = (uint64_t)&ot::sHeapRaw;
  }

  return ot::Instance::sHeap;
}

_BYTE *ot::Instance::InitSingle(ot::Instance *this)
{
  uint64_t v3 = ot::Instance::Get(this);
  if ((v3[177112] & 1) == 0)
  {
    ot::Instance::Instance((ot::Instance *)&ot::gInstanceRaw);
    uint64_t v3 = &ot::gInstanceRaw;
    ot::Instance::AfterInit((ot::Instance *)&ot::gInstanceRaw);
    logging_obg  = (os_log_s *)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(5) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_8_0((uint64_t)v5, 177120LL);
        _os_log_impl( (void *)&_mh_execute_header,  logging_obg,  OS_LOG_TYPE_INFO,  "INITSINGLE: sz_Instance[0x%lx]\n",  v5,  0xCu);
      }
    }

    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v4, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging1 Module is not defined for SubSystem: %s, Category: %s",  v4,  0x16u);
    }
  }

  return v3;
}

void *ot::Instance::Get(ot::Instance *this)
{
  return &ot::gInstanceRaw;
}

void ot::Instance::AfterInit(ot::Instance *this)
{
  *((_BYTE *)this + 17711ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
  uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
  ot::Settings::Init(v1);
  char v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)this);
  ot::Mle::Mle::Restore(v2);
  uint64_t v3 = (ot::Trel::Link *)ot::Instance::Get<ot::Trel::Link>((uint64_t)this);
  ot::Trel::Link::AfterInit(v3);
}

uint64_t __os_log_helper_16_0_1_8_0(uint64_t result, uint64_t a2)
{
  *(_BYTE *)uint64_t result = 0;
  *(_BYTE *)(result + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 1;
  *(_BYTE *)(result + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *(_BYTE *)(result + 3)  = 8;
  *(void *)(result + ++*(_WORD *)(this + 4) = a2;
  return result;
}

void ot::Instance::Reset(ot::Instance *this)
{
}

  ;
}

uint64_t ot::Instance::Get<ot::Settings>(uint64_t a1)
{
  return a1 + 200;
}

{
  return __ZN2ot8Instance3GetINS_8SettingsEEERT_v(a1);
}

uint64_t ot::Instance::ResetAllFrameCounters(ot::Instance *this)
{
  logging_obg  = (os_log_s *)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(5) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v10, (uint64_t)"ResetAllFrameCounters", 0);
      _os_log_impl( (void *)&_mh_execute_header,  logging_obg,  OS_LOG_TYPE_INFO,  "%s: Setting MLE Frame Counter: %u",  v10,  0x12u);
    }
  }

  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v9, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging1 Module is not defined for SubSystem: %s, Category: %s",  v9,  0x16u);
  }

  uint64_t v1 = ot::Instance::Get<ot::KeyManager>((uint64_t)this);
  ot::KeyManager::SetMleFrameCounter(v1, 0);
  __int16 v5 = (os_log_s *)log_get_logging_obg("com.apple.threadradiod", "default");
  if (v5 && (syslog_is_the_mask_enabled(5) & 1) != 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v8, (uint64_t)"ResetAllFrameCounters", 0);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s: Setting All MAC Frame Counter: %u",  v8,  0x12u);
    }
  }

  else if (!v5 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v7, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging1 Module is not defined for SubSystem: %s, Category: %s",  v7,  0x16u);
  }

  char v2 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>((uint64_t)this);
  return ot::KeyManager::SetAllMacFrameCounters(v2, 0, 0);
}

uint64_t ot::KeyManager::SetMleFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 9ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot10KeyManager18SetMleFrameCounterEj(this, a2);
}

void ot::Instance::Finalize(ot::Instance *this)
{
  if ((*((_BYTE *)this + 177112) & 1) != 0)
  {
    *((_BYTE *)this + 17711ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
    otThreadSetEnabled((uint64_t)this, 0);
    IgnoreError();
    otIp6SetEnabled((uint64_t)this, 0);
    IgnoreError();
    otLinkSetEnabled((uint64_t)this, 0);
    IgnoreError();
    uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
    ot::Settings::Deinit(v1);
    char v2 = (ot::Mac::SubMac *)ot::Instance::Get<ot::Mac::SubMac>((uint64_t)this);
    ot::Mac::SubMac::Disable(v2);
    IgnoreError();
    ot::Instance::~Instance(this);
  }

uint64_t ot::Instance::Get<ot::Mac::SubMac>(uint64_t a1)
{
  return a1 + 88272;
}

{
  return __ZN2ot8Instance3GetINS_3Mac6SubMacEEERT_v(a1);
}

void ot::Instance::~Instance(ot::Instance *this)
{
}

{
  ot::Random::Manager::~Manager((ot::Instance *)((char *)this + 33));
}

  ;
}

void ot::Instance::FactoryReset(ot::Instance *this)
{
  uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
  ot::Settings::Wipe(v1);
  otPlatReset(this);
}

  ;
}

uint64_t ot::Instance::ErasePersistentInfo(ot::Instance *this)
{
  unsigned int v5 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)this);
  if (ot::Mle::Mle::IsDisabled(v1))
  {
    char v2 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
    ot::Settings::Wipe(v2);
  }

  else
  {
    return 13;
  }

  return v5;
}

BOOL ot::Instance::GetBufferInfo(ot::Instance *a1, _WORD *a2)
{
  char v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>((uint64_t)a1);
  *a2  = ot::MessagePool::GetTotalBufferCount(v2);
  uint64_t v3 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>((uint64_t)a1);
  a2[1]  = ot::MessagePool::GetFreeBufferCount(v3);
  uint64_t v4 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>((uint64_t)a1);
  a2[2]  = ot::MessagePool::GetMaxUsedBufferCount(v4);
  unsigned int v5 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>((uint64_t)a1);
  ot::MeshForwarder::GetSendQueue(v5);
  ot::PriorityQueue::GetInfo(v6, (uint64_t)(a2 + 4));
  uint64_t v7 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>((uint64_t)a1);
  ReassemblyQueue  = (ot::MessageQueue *)ot::MeshForwarder::GetReassemblyQueue(v7);
  ot::MessageQueue::GetInfo(ReassemblyQueue, (uint64_t)(a2 + 8));
  char v9 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>((uint64_t)a1);
  SendQueue  = (ot::PriorityQueue *)ot::Ip6::Ip6::GetSendQueue(v9);
  ot::PriorityQueue::GetInfo(SendQueue, (uint64_t)(a2 + 12));
  uint64_t v11 = (ot::Ip6::Mpl *)ot::Instance::Get<ot::Ip6::Mpl>((uint64_t)a1);
  BufferedMessageSet  = (ot::MessageQueue *)ot::Ip6::Mpl::GetBufferedMessageSet(v11);
  ot::MessageQueue::GetInfo(BufferedMessageSet, (uint64_t)(a2 + 16));
  uint64_t v13 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)a1);
  MessageQueue  = (ot::MessageQueue *)ot::Mle::Mle::GetMessageQueue(v13);
  ot::MessageQueue::GetInfo(MessageQueue, (uint64_t)(a2 + 20));
  uint64_t v15 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::Agent>((uint64_t)a1);
  ot::Coap::CoapBase::GetRequestMessages(v15);
  ot::MessageQueue::GetInfo(v16, (uint64_t)(a2 + 24));
  unsigned int v17 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::Agent>((uint64_t)a1);
  ot::Coap::CoapBase::GetCachedResponses(v17);
  ot::MessageQueue::GetInfo(v18, (uint64_t)(a2 + 24));
  unsigned __int16 v19 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::SecureAgent>((uint64_t)a1);
  ot::Coap::CoapBase::GetRequestMessages(v19);
  ot::MessageQueue::GetInfo(v20, (uint64_t)(a2 + 28));
  int v21 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::SecureAgent>((uint64_t)a1);
  ot::Coap::CoapBase::GetCachedResponses(v21);
  ot::MessageQueue::GetInfo(v22, (uint64_t)(a2 + 28));
  ApplicationCoap  = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(a1);
  ot::Coap::CoapBase::GetRequestMessages(ApplicationCoap);
  ot::MessageQueue::GetInfo(v24, (uint64_t)(a2 + 32));
  char v25 = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(a1);
  ot::Coap::CoapBase::GetCachedResponses(v25);
  return ot::MessageQueue::GetInfo(v26, (uint64_t)(a2 + 32));
}

void *ot::Clearable<ot::Instance::BufferInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x48uLL);
}

{
  return __ZN2ot9ClearableINS_8Instance10BufferInfoEE5ClearEv(a1);
}

uint64_t ot::MessagePool::GetMaxUsedBufferCount(ot::MessagePool *this)
{
  return *((unsigned __int16 *)this + 32777);
}

  ;
}

{
  return __ZNK2ot11MessagePool21GetMaxUsedBufferCountEv(this);
}

uint64_t ot::MeshForwarder::GetReassemblyQueue(ot::MeshForwarder *this)
{
  return (uint64_t)this + 32;
}

{
  return __ZNK2ot13MeshForwarder18GetReassemblyQueueEv(this);
}

uint64_t ot::Ip6::Ip6::GetSendQueue(ot::Ip6::Ip6 *this)
{
  return (uint64_t)this + 40;
}

{
  return __ZNK2ot3Ip63Ip612GetSendQueueEv(this);
}

uint64_t ot::Instance::Get<ot::Ip6::Mpl>(uint64_t a1)
{
  return a1 + 85360;
}

{
  return __ZN2ot8Instance3GetINS_3Ip63MplEEERT_v(a1);
}

uint64_t ot::Ip6::Mpl::GetBufferedMessageSet(ot::Ip6::Mpl *this)
{
  return (uint64_t)this + 144;
}

{
  return __ZNK2ot3Ip63Mpl21GetBufferedMessageSetEv(this);
}

uint64_t ot::Mle::Mle::GetMessageQueue(ot::Mle::Mle *this)
{
  return (uint64_t)this + 400;
}

  ;
}

{
  return __ZNK2ot3Mle3Mle15GetMessageQueueEv(this);
}

void ot::Coap::CoapBase::GetCachedResponses(ot::Coap::CoapBase *this)
{
}

{
  __ZNK2ot4Coap8CoapBase18GetCachedResponsesEv(this);
}

uint64_t ot::Instance::Get<ot::Tmf::SecureAgent>(uint64_t a1)
{
  return a1 + 160840;
}

{
  return __ZN2ot8Instance3GetINS_3Tmf11SecureAgentEEERT_v(a1);
}

uint64_t ot::Instance::ResetBufferInfo(ot::Instance *this)
{
  uint64_t v1 = ot::Instance::Get<ot::MessagePool>((uint64_t)this);
  return ot::MessagePool::ResetMaxUsedBufferCount(v1);
}

uint64_t ot::MessagePool::ResetMaxUsedBufferCount(uint64_t this)
{
  *(_WORD *)(this + 6555++*(_WORD *)(this + 4) = *(_WORD *)(this + 65552);
  return this;
}

{
  return __ZN2ot11MessagePool23ResetMaxUsedBufferCountEv(this);
}

void ot::Instance::SetLogLevel(unsigned __int8 a1)
{
  if (a1 != ot::Instance::sLogLevel)
  {
    ot::Instance::sLogLevel  = a1;
    otPlatLogHandleLevelChanged(a1);
  }

ot::Timer::Scheduler *ot::Timer::Scheduler::Scheduler(ot::Timer::Scheduler *this, ot::Instance *a2)
{
  return this;
}

ot::Radio::Callbacks *ot::Radio::Callbacks::Callbacks(ot::Radio::Callbacks *this, ot::Instance *a2)
{
  return this;
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::Array(uint64_t a1)
{
  return a1;
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::Array(uint64_t result)
{
  *(_BYTE *)(result + ++*(_WORD *)(this + 4) = 0;
  return result;
}

ot::MessagePool *ot::MessagePool::MessagePool(ot::MessagePool *this, ot::Instance *a2)
{
  *((_WORD *)this + 32776)  = 0;
  *((_WORD *)this + 32777)  = 0;
  bzero((char *)this + 65556, 0x4C00uLL);
  uint64_t result = this;
  *((_BYTE *)this + 8501ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
  return result;
}

{
  ot::MessagePool::MessagePool(this, a2);
  return this;
}

uint64_t *ot::Pool<ot::Buffer,(unsigned short)256>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t *i;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  for (unsigned int i = a1 + 1; i != a1 + 8193; i += 32)
    ot::LinkedList<ot::Buffer>::Push(a1, i);
  return a1;
}

ot::Buffer *ot::MessagePool::Allocate( ot::InstanceLocator *a1, char a2, __int16 a3, ot::Message::Settings *a4)
{
  int v10 = 0;
  unsigned __int8 Priority = ot::Message::Settings::GetPriority(a4);
  __b  = ot::MessagePool::NewBuffer(a1, Priority);
  if (__b)
  {
    memset(__b, 0, 0x100uLL);
    ot::Message::SetMessagePool(__b, a1);
    ot::Message::SetType(__b, a2);
    ot::Message::SetReserved(__b, a3);
    char IsLinkSecurityEnabled = ot::Message::Settings::IsLinkSecurityEnabled(a4);
    ot::Message::SetLinkSecurityEnabled(__b, IsLinkSecurityEnabled & 1);
    unsigned __int8 v6 = ot::Message::Settings::GetPriority(a4);
    int v10 = ot::Message::SetPriority(__b, v6);
    if (!v10) {
      int v10 = ot::Message::SetLength(__b, 0);
    }
  }

  if (v10)
  {
    ot::MessagePool::Free(a1, __b);
    return 0LL;
  }

  return __b;
}

ot::Buffer *ot::MessagePool::NewBuffer(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  v55  = a1;
  v54  = a2;
  uint64_t v27 = a1;
  v53  = 0LL;
  while (1)
  {
    v53  = (ot::Buffer *)ot::Pool<ot::Buffer,(unsigned short)256>::Allocate((uint64_t *)v27 + 1);
    if (v53) {
      break;
    }
  }

  if ((*((_BYTE *)v27 + 85012) & 1) != 0) {
    ot::MessagePool::UpdateBufferStats(v27, v53, 1);
  }
  char v2 = v27;
  ++*((_WORD *)v27 + 32776);
  uint64_t v26 = 65554LL;
  *((_WORD *)v27 + 32777)  = ot::Max<unsigned short>(*((_WORD *)v2 + 32777), *((_WORD *)v2 + 32776));
  ot::Buffer::SetNextBuffer(v53, 0LL);
  FreeBufferCount  = ot::MessagePool::GetFreeBufferCount(v27);
  if (256 - FreeBufferCount >= 230 && FreeBufferCount != 26) {
    handle_ot_buffer_threshold_captureABC();
  }
LABEL_14:
  if (!v53)
  {
    Instance  = ot::InstanceLocator::GetInstance(v27);
    otMessageGetBufferInfo((uint64_t)Instance, (uint64_t)v28);
    unsigned __int16 v6 = ot::MessagePool::GetFreeBufferCount(v27);
    uint64_t v7 = *((unsigned __int16 *)v27 + 32777);
    char v25 = v9;
    v9[1]  = v6;
    v9[2]  = v35;
    unsigned int v9[3] = v36;
    v9[4]  = v37;
    v9[5]  = v29;
    v9[6]  = v30;
    v9[7]  = v31;
    v9[8]  = v32;
    v9[9]  = v33;
    v9[10]  = v34;
    v9[11]  = v41;
    uint64_t v10 = v42;
    uint64_t v11 = v43;
    uint64_t v12 = v44;
    uint64_t v13 = v45;
    uint64_t v14 = v46;
    uint64_t v15 = v47;
    uint64_t v16 = v48;
    uint64_t v17 = v49;
    uint64_t v18 = v38;
    uint64_t v19 = v39;
    uint64_t v20 = v40;
    uint64_t v21 = v50;
    uint64_t v22 = v51;
    uint64_t v23 = v52;
    uint64_t v24 = v7;
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Message",  "No available message buffer : [tot:%d, free:%d], Ip6:[msgs:%u, bufs:%u, totbytes:%u] 6LoSend:[%u, %u, %u] 6LoReas: [%u, %u, %u] mle:[%u, %u, %u,], coap:[%u, %u, %u], coapSec:[%u, %u, %u], mpl:[%u %u %u], applCoap:[%u, %u, %u], ma x allocated  = %d",  v13,  v13,  v44,  v10,  v10,  v41,  0);
  }

  return v53;
}

uint64_t ot::Message::Settings::GetPriority(ot::Message::Settings *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot7Message8Settings11GetPriorityEv(this);
}

uint64_t ot::Message::SetMessagePool(ot::Message *this, ot::MessagePool *a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(void *)(result + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = a2;
  return result;
}

{
  return __ZN2ot7Message14SetMessagePoolEPNS_11MessagePoolE(this, a2);
}

uint64_t ot::Message::SetType(ot::Buffer *a1, char a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

{
  return __ZN2ot7Message7SetTypeENS0_4TypeE(a1, a2);
}

uint64_t ot::Message::SetReserved(ot::Message *this, __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 4++*(_WORD *)(this + 4) = a2;
  return result;
}

{
  return __ZN2ot7Message11SetReservedEt(this, a2);
}

uint64_t ot::Message::SetLinkSecurityEnabled(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFFEFF | ((v3 & 1) << 8);
  return result;
}

{
  return __ZN2ot7Message22SetLinkSecurityEnabledEb(this, a2);
}

uint64_t ot::Message::Settings::IsLinkSecurityEnabled(ot::Message::Settings *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot7Message8Settings21IsLinkSecurityEnabledEv(this);
}

uint64_t ot::Message::SetPriority(ot::Message *a1, unsigned __int8 a2)
{
  unsigned int v8 = 0;
  if (a2 < 4u)
  {
    if (ot::Message::IsInAQueue(a1))
    {
      if (a2 != ((*(_DWORD *)(ot::Buffer::GetMetadata(a1) + 68) >> 9) & 3))
      {
        PriorityQueue  = (ot::PriorityQueue *)ot::Message::GetPriorityQueue(a1);
        if (PriorityQueue) {
          ot::PriorityQueue::Dequeue(PriorityQueue, a1);
        }
        uint64_t Metadata = ot::Buffer::GetMetadata(a1);
        *(_DWORD *)(Metadata + 68)  = *(_DWORD *)(Metadata + 68) & 0xFFFFF9FF | ((a2 & 3) << 9);
        if (PriorityQueue) {
          ot::PriorityQueue::Enqueue(PriorityQueue, a1);
        }
      }
    }

    else
    {
      uint64_t v2 = ot::Buffer::GetMetadata(a1);
      *(_DWORD *)(v2 + 68)  = *(_DWORD *)(v2 + 68) & 0xFFFFF9FF | ((a2 & 3) << 9);
    }
  }

  else
  {
    return 7;
  }

  return v8;
}

uint64_t ot::Message::SetLength(ot::Message *this, unsigned __int16 a2)
{
  int v4 = (unsigned __int16)(a2 + ot::Message::GetReserved(this));
  if ((unsigned __int16)v4 >= (int)(unsigned __int16)ot::Message::GetReserved(this))
  {
    unsigned int v5 = ot::Message::ResizeMessage(this, v4);
    if (!v5)
    {
      *(_WORD *)(ot::Buffer::GetMetadata(this) + 46)  = a2;
    }
  }

  else
  {
    return 7;
  }

  return v5;
}

void ot::MessagePool::Free(ot::MessagePool *this, ot::Message *a2)
{
  BOOL v3 = 0;
  if (!*(void *)ot::Message::Next(a2)) {
    BOOL v3 = *(void *)ot::Message::Prev(a2) == 0LL;
  }
  if (!v3) {
    __assert_rtn("Free", "message.cpp", 126, "aMessage->Next() == nullptr && aMessage->Prev() == nullptr");
  }
  ot::MessagePool::FreeBuffers(this, a2);
}

ot::Buffer *ot::MessagePool::Allocate(ot::Message::Settings *a1, char a2)
{
  Default  = (ot::Message::Settings *)ot::Message::Settings::GetDefault(a1);
  return ot::MessagePool::Allocate(a1, a2, 0, Default);
}

ot::Buffer *ot::MessagePool::Allocate(ot::Message::Settings *a1, char a2, __int16 a3)
{
  Default  = (ot::Message::Settings *)ot::Message::Settings::GetDefault(a1);
  return ot::MessagePool::Allocate(a1, a2, a3, Default);
}

uint64_t ot::Message::Prev(ot::Message *this)
{
  return ot::Buffer::GetMetadata(this) + 8;
}

{
  return __ZN2ot7Message4PrevEv(this);
}

void ot::MessagePool::FreeBuffers(ot::MessagePool *this, ot::Buffer *a2)
{
  while (a2)
  {
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(a2);
    ot::Pool<ot::Buffer,(unsigned short)256>::Free((uint64_t *)this + 1, a2);
    if ((*((_BYTE *)this + 85012) & 1) != 0) {
      ot::MessagePool::UpdateBufferStats(this, a2, 0);
    }
    --*((_WORD *)this + 32776);
    if ((rcpBuffersAvailable & 1) == 0)
    {
      uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      if (!ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThresholdForBackPressure(v2))
      {
        rcpBuffersAvailable  = 1;
        ot::MessagePool::GetFreeBufferCount(this);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Message",  "LOW_WATER_MARK: allocated buffers  = %d, free buffers  = %d, allocated buffers=%d, max allocated=%d OPENTHREAD_C ONFIG_MAX_FRAMES_IN_DIRECT_TX_QUEUE_FOR_BACKPRESSURE(%d) OPENTHREAD_CONFIG_MAX_FRAMES_IN_DIRECT_TX_QUEUE(%d) O PENTHREAD_CONFIG_DELAY_AWARE_QUEUE_MANAGEMENT_DROP_MSG_INTERVAL(%d) ",  v3,  v4,  v5,  v6,  v7,  v8,  0);
      }
    }

    a2  = NextBuffer;
  }

uint64_t ot::Pool<ot::Buffer,(unsigned short)256>::Allocate(uint64_t *a1)
{
  return ot::LinkedList<ot::Buffer>::Pop(a1);
}

{
  return __ZN2ot4PoolINS_6BufferELt256EE8AllocateEv(a1);
}

uint64_t ot::MessagePool::ReclaimBuffers(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  unsigned int v6 = ot::MeshForwarder::EvictMessage(v2, a2);
  if (v6 == 23)
  {
    uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    return ot::Coap::CoapBase::EvictMessage(v3);
  }

  return v6;
}

uint64_t ot::MessagePool::UpdateBufferStats(ot::MessagePool *this, const ot::Buffer *a2, char a3)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  char v10 = a3 & 1;
  IndexOf  = ot::MessagePool::GetIndexOf(this, a2);
  *((_BYTE *)this + 76 * IndexOf + 6556++*(_WORD *)(this + 4) = v10 & 1;
  gettimeofday(&v8, 0LL);
  tv_sec  = v8.tv_sec;
  tv_usec  = v8.tv_usec;
  memset(v13, 0, sizeof(v13));
  uint64_t v3 = localtime(&tv_sec);
  strftime((char *)v13, 0x20uLL, "%Y-%m-%d %H:%M:%S", v3);
  if ((v10 & 1) != 0)
  {
    ++*((_DWORD *)this + 19 * IndexOf + 16389);
    return snprintf((char *)this + 76 * IndexOf + 65565, 0x20uLL, "%s.%06d", (const char *)v13, tv_usec);
  }

  else
  {
    ++*((_DWORD *)this + 19 * IndexOf + 16390);
    return snprintf((char *)this + 76 * IndexOf + 65597, 0x20uLL, "%s.%06d", (const char *)v13, tv_usec);
  }

uint64_t ot::Max<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  else {
    return a2;
  }
}

{
  return __ZN2ot3MaxItEET_S1_S1_(a1, a2);
}

void *ot::Buffer::SetNextBuffer(ot::Buffer *this, ot::Buffer *a2)
{
  return ot::LinkedListEntry<ot::Buffer>::SetNext(this, (uint64_t)a2);
}

{
  return __ZN2ot6Buffer13SetNextBufferEPS0_(this, a2);
}

uint64_t ot::MessagePool::GetFreeBufferCount(ot::MessagePool *this)
{
  return (unsigned __int16)(256 - *((_WORD *)this + 32776));
}

uint64_t ot::Buffer::GetNextBuffer(ot::Buffer *this)
{
  return ot::LinkedListEntry<ot::Buffer>::GetNext((uint64_t)this);
}

{
  return ot::LinkedListEntry<ot::Buffer>::GetNext((uint64_t)this);
}

{
  return __ZN2ot6Buffer13GetNextBufferEv(this);
}

{
  return __ZNK2ot6Buffer13GetNextBufferEv(this);
}

void *ot::Pool<ot::Buffer,(unsigned short)256>::Free(uint64_t *a1, void *a2)
{
  return ot::LinkedList<ot::Buffer>::Push(a1, a2);
}

{
  return __ZN2ot4PoolINS_6BufferELt256EE4FreeERS1_(a1, a2);
}

uint64_t ot::MessagePool::GetTotalBufferCount(ot::MessagePool *this)
{
  return 256LL;
}

uint64_t ot::MessagePool::GetIndexOf(ot::MessagePool *this, const ot::Buffer *a2)
{
  return (unsigned __int16)ot::Pool<ot::Buffer,(unsigned short)256>::GetIndexOf((uint64_t)this + 8, (uint64_t)a2);
}

{
  return __ZN2ot11MessagePool10GetIndexOfERKNS_6BufferE(this, a2);
}

uint64_t ot::MessagePool::ResetBufferStats(uint64_t this)
{
  for (unsigned __int16 i = 0; i < 0x100u; ++i)
  {
    *(_DWORD *)(this + 65556 + 76LL * i) -= *(_DWORD *)(this + 65556 + 76LL * i + 4);
    *(_DWORD *)(this + 65556 + 76LL * i + ++*(_WORD *)(this + 4) = 0;
    uint64_t v1 = this + 65556 + 76LL * i;
    *(_OWORD *)(v1 + 4ot::Pool<ot::Buffer,(unsigned short)256>::Pool((uint64_t *)this + 1) = 0u;
    *(_OWORD *)(v1 + 57)  = 0u;
    if (!*(_DWORD *)v1)
    {
      uint64_t v2 = this + 65556 + 76LL * i;
      *(_OWORD *)(v2 + ot::Mle::Tlv::SetType(this, 9) = 0u;
      *(_OWORD *)(v2 + 25)  = 0u;
    }
  }

  return this;
}

BOOL *ot::Message::Settings::Settings(BOOL *result, char a2, BOOL a3)
{
  *uint64_t result = (a2 & 1) != 0;
  result[1]  = a3;
  return result;
}

BOOL *ot::Message::Settings::Settings(BOOL *a1, char a2, BOOL a3)
{
  return a1;
}

void *ot::Message::Settings::From(uint64_t a1)
{
  if (!a1) {
    return ot::Message::Settings::GetDefault(0LL);
  }
  ot::AsCoreType<otMessageSettings>(a1);
  return (void *)v1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMessageSettings>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t ot::Message::Iterator::Advance(ot::Message::Iterator *this, ot::Message *a2)
{
  *(void *)this  = *((void *)this + 1);
  uint64_t result = ot::Message::Iterator::NextMessage(*((ot::Message::Iterator **)this + 1), a2);
  *((void *)this + ot::Pool<ot::Buffer,(unsigned short)256>::Pool((uint64_t *)this + 1) = result;
  return result;
}

uint64_t ot::Message::GetBufferIDs(ot::Message *this, unsigned __int16 a2, unsigned __int16 a3, char *a4)
{
  NextBuffer  = this;
  char v10 = 1;
  snprintf(a4, 0x400uLL, ", BufIDs:");
  if (a2 <= 0xB0u || a2 + a3 <= 0xB0)
  {
    uint64_t v4 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
    IndexOf  = ot::MessagePool::GetIndexOf(v4, NextBuffer);
    unsigned __int16 v5 = strlen(a4);
    snprintf(&a4[v5], 1024 - v5, "%u", IndexOf);
    char v10 = 0;
  }

  for (unsigned __int16 i = 176; ; i += 248)
  {
    uint64_t result = ot::Buffer::GetNextBuffer(NextBuffer);
    if (!result) {
      break;
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
    if (a2 >= (int)i && a2 <= i + 248 || a2 + a3 >= i && a2 + a3 <= i + 248)
    {
      uint64_t v7 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
      unsigned __int16 v14 = ot::MessagePool::GetIndexOf(v7, NextBuffer);
      unsigned __int16 v11 = strlen(a4);
      timeval v8 = "";
      if ((v10 & 1) == 0) {
        timeval v8 = ",";
      }
      snprintf(&a4[v11], 1024 - v11, "%s%u", v8, v14);
      char v10 = 0;
    }
  }

  return result;
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::MessagePool>(ot::Message *a1)
{
  Instance  = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::MessagePool>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_11MessagePoolEEERT_v(a1);
}

uint64_t ot::Message::GetBufferIDs(ot::Message *this, char *a2)
{
  NextBuffer  = this;
  uint64_t v2 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
  IndexOf  = ot::MessagePool::GetIndexOf(v2, NextBuffer);
  snprintf(a2, 0x400uLL, ", BufIDs:%u", IndexOf);
  while (1)
  {
    uint64_t result = ot::Buffer::GetNextBuffer(NextBuffer);
    if (!result) {
      break;
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
    unsigned __int16 v5 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
    unsigned __int16 v8 = ot::MessagePool::GetIndexOf(v5, NextBuffer);
    unsigned __int16 v6 = strlen(a2);
    snprintf(&a2[v6], 1024 - v6, ",%u", v8);
  }

  return result;
}

uint64_t ot::Message::ResizeMessage(ot::Message *this, unsigned __int16 a2)
{
  unsigned int v12 = 0;
  NextBuffer  = this;
  for (unsigned __int16 i = 176; i < (int)a2; i += 248)
  {
    if (!ot::Buffer::GetNextBuffer(NextBuffer))
    {
      MessagePool  = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
      unsigned __int8 Priority = ot::Message::GetPriority(this);
      uint64_t v3 = ot::MessagePool::NewBuffer(MessagePool, Priority);
      ot::Buffer::SetNextBuffer(NextBuffer, v3);
      if (!ot::Buffer::GetNextBuffer(NextBuffer)) {
        return 3;
      }
    }

    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
  }

  char v9 = NextBuffer;
  unsigned __int16 v11 = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
  ot::Buffer::SetNextBuffer(v9, 0LL);
  uint64_t v4 = (ot::MessagePool *)ot::Message::GetMessagePool(this);
  ot::MessagePool::FreeBuffers(v4, v11);
  return v12;
}

void ot::Message::Free(ot::Message *this)
{
  MessagePool  = (ot::MessagePool *)ot::Message::GetMessagePool(this);
  ot::MessagePool::Free(MessagePool, this);
}

uint64_t ot::Message::GetNext(ot::Message *this)
{
  if ((*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) & 0x800) != 0)
  {
    PriorityQueue  = (ot::PriorityQueue *)ot::Message::GetPriorityQueue(this);
    if (!PriorityQueue) {
      return 0LL;
    }
    ot::PriorityQueue::GetTail(PriorityQueue);
    Tail  = v1;
  }

  else
  {
    MessageQueue  = (ot::MessageQueue *)ot::Message::GetMessageQueue(this);
    if (!MessageQueue) {
      return 0LL;
    }
    Tail  = (ot::Message *)ot::MessageQueue::GetTail(MessageQueue);
  }

  if (this == Tail) {
    return 0LL;
  }
  else {
    return *(void *)ot::Message::Next(this);
  }
}

uint64_t ot::Message::GetPriorityQueue(ot::Message *this)
{
  if ((*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) & 0x800) != 0) {
    return *(void *)(ot::Buffer::GetMetadata(this) + 24);
  }
  else {
    return 0LL;
  }
}

{
  return __ZNK2ot7Message16GetPriorityQueueEv(this);
}

void ot::PriorityQueue::GetTail(ot::PriorityQueue *this)
{
}

{
  __ZN2ot13PriorityQueue7GetTailEv(this);
}

uint64_t ot::Message::SetOffset(ot::Message *this, unsigned __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 48)  = a2;
  return result;
}

uint64_t ot::Message::GetBufferCount(ot::Message *this)
{
  unsigned __int8 v3 = 1;
  for (unsigned __int16 i = (ot::Buffer *)ot::Buffer::GetNextBuffer(this); i; unsigned __int16 i = (ot::Buffer *)ot::Buffer::GetNextBuffer(i))
    ++v3;
  return v3;
}

uint64_t ot::Message::MoveOffset(ot::Message *this, int a2)
{
  __int16 v7 = a2;
  int v6 = a2 + (unsigned __int16)ot::Message::GetOffset(this);
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  *(_WORD *)(Metadata + 48) += v7;
  int v4 = *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 48);
  uint64_t result = ot::Message::GetLength(this);
  return result;
}

BOOL ot::Message::IsSubTypeMle(ot::Message *this)
{
  int v2 = (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 3) & 0xF;
  return (v2 - 1) <= 2 || v2 == 6 || (v2 - 8) <= 2 || v2 == 12;
}

BOOL ot::Message::IsInAQueue(ot::Message *this)
{
  return *(void *)(ot::Buffer::GetMetadata(this) + 24) != 0LL;
}

{
  return __ZNK2ot7Message10IsInAQueueEv(this);
}

uint64_t ot::PriorityQueue::Dequeue(ot::PriorityQueue *this, ot::Message *a2)
{
  if ((ot::PriorityQueue *)ot::Message::GetPriorityQueue(a2) != this) {
    __assert_rtn("Dequeue", "message.cpp", 1201, "aMessage.GetPriorityQueue() == this");
  }
  unsigned __int8 Priority = ot::Message::GetPriority(a2);
  unsigned __int16 v8 = (ot::Message *)*((void *)this + Priority);
  if (a2 == v8)
  {
    char v9 = *(ot::Message **)ot::Message::Prev(v8);
    *((void *)this + Priority)  = v9;
  }

  uint64_t v5 = *(void *)ot::Message::Prev(a2);
  int v2 = (ot::Message **)ot::Message::Next(a2);
  *(void *)ot::Message::Prev(*vot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v5;
  uint64_t v6 = *(void *)ot::Message::Next(a2);
  unsigned __int8 v3 = (ot::Message **)ot::Message::Prev(a2);
  *(void *)ot::Message::Next(*v3)  = v6;
  *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  return ot::Message::SetPriorityQueue(a2, 0LL);
}

void *ot::PriorityQueue::Enqueue(ot::PriorityQueue *this, ot::Message *a2)
{
  if (ot::Message::IsInAQueue(a2)) {
    __assert_rtn("Enqueue", "message.cpp", 1170, "!aMessage.IsInAQueue()");
  }
  ot::Message::SetPriorityQueue(a2, this);
  unsigned __int8 Priority = ot::Message::GetPriority(a2);
  ot::PriorityQueue::FindFirstNonNullTail((uint64_t)this, Priority);
  uint64_t v6 = v2;
  if (v2)
  {
    int v4 = *(ot::Message **)ot::Message::Next(v2);
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v4;
    *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v6;
    *(void *)ot::Message::Prev(v++*(_WORD *)(this + 4) = a2;
    uint64_t result = (void *)ot::Message::Next(v6);
  }

  else
  {
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
    uint64_t result = (void *)ot::Message::Prev(a2);
  }

  *uint64_t result = a2;
  *((void *)this + Priority)  = a2;
  return result;
}

char *ot::Message::PriorityToString(unsigned __int8 a1)
{
  return ot::Message::PriorityToString(ot::Message::Priority)::kPriorityStrings[a1];
}

uint64_t ot::Message::AppendBytes(ot::Message *this, char *a2, unsigned __int16 a3)
{
  unsigned __int16 Length = ot::Message::GetLength(this);
  __int16 v3 = ot::Message::GetLength(this);
  unsigned int v7 = ot::Message::SetLength(this, a3 + v3);
  if (!v7) {
    ot::Message::WriteBytes(this, Length, a2, a3);
  }
  return v7;
}

uint64_t ot::Message::WriteBytes(ot::Message *this, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  uint64_t v18 = this;
  unsigned __int16 v17 = a2;
  uint64_t v16 = a3;
  unsigned __int16 v15 = a4;
  unsigned __int16 v14 = a3;
  ot::Message::GetFirstChunk(this, v17, &v15, (ot::Message::MutableChunk *)v13);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
    char v6 = v5 | ((unsigned __int16)result == 0);
    if ((v6 & 1) != 0) {
      break;
    }
    ot::Message::MutableChunk::GetBytes((ot::Message::MutableChunk *)v13);
    __dst  = v7;
    __src  = v14;
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
    memmove(__dst, __src, Length);
    unsigned __int16 v9 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
    v14 += v9;
    ot::Message::GetNextChunk(this, &v15, (ot::Message::MutableChunk *)v13);
  }

  return result;
}

uint64_t ot::Message::AppendBytesFromMessage( ot::Message *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  unsigned __int16 v17 = a3;
  unsigned __int16 v16 = a4;
  *(_WORD *)&v15[4]  = 0;
  *(_DWORD *)unsigned __int16 v15 = (unsigned __int16)ot::Message::GetLength(this);
  if (v17 + v16 <= (unsigned __int16)ot::Message::GetLength(v18))
  {
    __int16 Length = ot::Message::GetLength(this);
    *(_DWORD *)&v15[2]  = ot::Message::SetLength(this, v16 + Length);
    if (!*(_DWORD *)&v15[2])
    {
      ot::Message::GetFirstChunk(v18, v17, &v16, (ot::Message::Chunk *)v14);
      while (1)
      {
        __int16 v5 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
        char v7 = v6 | (v5 == 0);
        if ((v7 & 1) != 0) {
          break;
        }
        unsigned __int16 v11 = *(_WORD *)v15;
        uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v14);
        unsigned __int16 v8 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
        ot::Message::WriteBytes(this, v11, Bytes, v8);
        __int16 v9 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
        *(_WORD *)v15 += v9;
        ot::Message::GetNextChunk(v18, &v16, (ot::Message::Chunk *)v14);
      }
    }
  }

  else
  {
    *(_DWORD *)&v15[2]  = 6;
  }

  return *(unsigned int *)&v15[2];
}

uint64_t ot::Message::GetFirstChunk( ot::Message *this, unsigned __int16 a2, unsigned __int16 *a3, ot::Message::Chunk *a4)
{
  if (a2 < (int)(unsigned __int16)ot::Message::GetLength(this))
  {
    int v10 = a2 + *a3;
    unsigned __int16 v15 = a2 + ot::Message::GetReserved(this);
    ot::Message::Chunk::SetBuffer((uint64_t)a4, this);
    if (v15 >= 0xB0u)
    {
      for (unsigned __int16 i = v15 - 176; ; i -= 248)
      {
        Buffer  = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a4);
        NextBuffer  = (const ot::Buffer *)ot::Buffer::GetNextBuffer(Buffer);
        ot::Message::Chunk::SetBuffer((uint64_t)a4, NextBuffer);
        if (!ot::Message::Chunk::GetBuffer(a4)) {
          __assert_rtn("GetFirstChunk", "message.cpp", 774, "aChunk.GetBuffer() != nullptr");
        }
        if (i < 0xF8u) {
          break;
        }
      }

      char v7 = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a4);
      Data  = ot::Buffer::GetData(v7);
      ot::Data<(ot::DataLengthType)1>::Init((uint64_t)a4, Data + i, 248 - i);
    }

    else
    {
      FirstData  = ot::Buffer::GetFirstData(this);
      ot::Data<(ot::DataLengthType)1>::Init((uint64_t)a4, FirstData + v15, 176 - v15);
    }
  }

  else
  {
    ot::Data<(ot::DataLengthType)1>::SetLength((uint64_t)a4, 0);
  }

  uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)a4);
  *a3 -= result;
  return result;
}

uint64_t ot::Data<(ot::DataLengthType)1>::GetLength(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE1EE9GetLengthEv(a1);
}

uint64_t ot::Data<(ot::DataLengthType)1>::GetBytes(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE1EE8GetBytesEv(a1);
}

uint64_t ot::Message::GetNextChunk(ot::Message *this, unsigned __int16 *a2, ot::Message::Chunk *a3)
{
  if (!*a2) {
    return ot::Data<(ot::DataLengthType)1>::SetLength((uint64_t)a3, 0);
  }
  Buffer  = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a3);
  NextBuffer  = (const ot::Buffer *)ot::Buffer::GetNextBuffer(Buffer);
  ot::Message::Chunk::SetBuffer((uint64_t)a3, NextBuffer);
  if (!ot::Message::Chunk::GetBuffer(a3)) {
    __assert_rtn("GetNextChunk", "message.cpp", 806, "aChunk.GetBuffer() != nullptr");
  }
  char v6 = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a3);
  Data  = ot::Buffer::GetData(v6);
  ot::Data<(ot::DataLengthType)1>::Init((uint64_t)a3, Data, 248);
  uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)a3);
  *a2 -= result;
  return result;
}

uint64_t ot::Message::PrependBytes(ot::Message *this, char *a2, unsigned __int16 a3)
{
  unsigned int v16 = 0;
  while (a3 > (int)(unsigned __int16)ot::Message::GetReserved(this))
  {
    MessagePool  = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
    unsigned __int8 Priority = ot::Message::GetPriority(this);
    unsigned __int16 v15 = ot::MessagePool::NewBuffer(MessagePool, Priority);
    if (!v15) {
      return 3;
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(this);
    ot::Buffer::SetNextBuffer(v15, NextBuffer);
    ot::Buffer::SetNextBuffer(this, v15);
    if ((unsigned __int16)ot::Message::GetReserved(this) < 0xB0uLL)
    {
      __dst  = (char *)v15 + (unsigned __int16)ot::Message::GetReserved(this) + 80;
      __src  = (char *)this + (unsigned __int16)ot::Message::GetReserved(this) + 80;
      Reserved  = ot::Message::GetReserved(this);
      memcpy(__dst, __src, 176LL - Reserved);
    }

    __int16 v6 = ot::Message::GetReserved(this);
    ot::Message::SetReserved(this, v6 + 248);
  }

  __int16 v7 = ot::Message::GetReserved(this);
  ot::Message::SetReserved(this, v7 - a3);
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  *(_WORD *)(Metadata + 46) += a3;
  Offset  = ot::Message::GetOffset(this);
  ot::Message::SetOffset(this, a3 + Offset);
  if (a2) {
    ot::Message::WriteBytes(this, 0, a2, a3);
  }
  return v16;
}

uint64_t ot::Message::RemoveHeader(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  *(_WORD *)(Metadata + 44) += a2;
  uint64_t v3 = ot::Buffer::GetMetadata(this);
  *(_WORD *)(v3 + 46) -= a2;
  if (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 48) <= (int)a2)
  {
    uint64_t result = ot::Buffer::GetMetadata(this);
    *(_WORD *)(result + 48)  = 0;
  }

  else
  {
    uint64_t result = ot::Buffer::GetMetadata(this);
    *(_WORD *)(result + 48) -= a2;
  }

  return result;
}

uint64_t ot::Message::RemoveHeader(ot::Message *this, unsigned __int16 a2, unsigned __int16 a3)
{
  return ot::Message::RemoveHeader(this, a3);
}

const ot::Message *ot::Message::WriteBytesFromMessage( const ot::Message *this, unsigned __int16 a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5)
{
  uint64_t v18 = this;
  unsigned __int16 v17 = a2;
  unsigned int v16 = a3;
  unsigned __int16 v15 = a4;
  unsigned __int16 v14 = a5;
  unsigned __int16 v11 = this;
  if (a3 == this && v15 < (int)v17)
  {
    v17 += v14;
    v15 += v14;
    while (v14)
    {
      unsigned __int16 v12 = ot::Min<unsigned short>(0x20u, v14);
      v14 -= v12;
      v15 -= v12;
      v17 -= v12;
      ot::Message::ReadBytes(v11, v15, v19, v12);
      this  = (const ot::Message *)ot::Message::WriteBytes(v11, v17, v19, v12);
    }
  }

  else
  {
    ot::Message::GetFirstChunk(v16, v15, &v14, (ot::Message::Chunk *)v13);
    while (1)
    {
      this  = (const ot::Message *)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
      char v6 = v5 | ((unsigned __int16)this == 0);
      if ((v6 & 1) != 0) {
        break;
      }
      unsigned __int16 v9 = v17;
      uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v13);
      unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
      ot::Message::WriteBytes(v11, v9, Bytes, Length);
      __int16 v8 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
      v17 += v8;
      ot::Message::GetNextChunk(v16, &v14, (ot::Message::Chunk *)v13);
    }
  }

  return this;
}

uint64_t ot::Message::InsertHeader(ot::Message *this, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v5 = ot::Message::PrependBytes(this, 0LL, a3);
  if (!v5) {
    ot::Message::WriteBytesFromMessage(this, 0, this, a3, a2);
  }
  return v5;
}

uint64_t ot::Data<(ot::DataLengthType)1>::SetLength(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 8)  = a2;
  return result;
}

{
  return __ZN2ot4DataILNS_14DataLengthTypeE1EE9SetLengthEt(result, a2);
}

uint64_t ot::Message::Chunk::SetBuffer(uint64_t this, const ot::Buffer *a2)
{
  *(void *)(this + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = a2;
  return this;
}

{
  return __ZN2ot7Message5Chunk9SetBufferEPKNS_6BufferE(this, a2);
}

uint64_t ot::Data<(ot::DataLengthType)1>::Init(uint64_t result, uint64_t a2, __int16 a3)
{
  *(void *)uint64_t result = a2;
  *(_WORD *)(result + 8)  = a3;
  return result;
}

{
  return __ZN2ot4DataILNS_14DataLengthTypeE1EE4InitEPKvt(result, a2, a3);
}

uint64_t ot::Message::Chunk::GetBuffer(ot::Message::Chunk *this)
{
  return *((void *)this + 2);
}

{
  return __ZNK2ot7Message5Chunk9GetBufferEv(this);
}

uint64_t ot::Buffer::GetData(ot::Buffer *this)
{
  return (uint64_t)this + 8;
}

{
  return __ZNK2ot6Buffer7GetDataEv(this);
}

uint64_t ot::Message::ReadBytes(ot::Message *this, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  unsigned __int16 v15 = this;
  unsigned __int16 v14 = a2;
  uint64_t v13 = a3;
  unsigned __int16 v12 = a4;
  unsigned __int16 v11 = a3;
  ot::Message::GetFirstChunk(this, a2, &v12, (ot::Message::Chunk *)v10);
  while (1)
  {
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    char v6 = v5 | (Length == 0);
    if ((v6 & 1) != 0) {
      break;
    }
    ot::Data<(ot::DataLengthType)1>::CopyBytesTo((uint64_t)v10, v11);
    unsigned __int16 v7 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    v11 += v7;
    ot::Message::GetNextChunk(this, &v12, (ot::Message::Chunk *)v10);
  }

  return (unsigned __int16)((_WORD)v11 - (_WORD)v13);
}

void *ot::Data<(ot::DataLengthType)1>::CopyBytesTo(uint64_t a1, void *a2)
{
  return memcpy(a2, *(const void **)a1, *(unsigned __int16 *)(a1 + 8));
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE1EE11CopyBytesToEPv(a1, a2);
}

uint64_t ot::Message::Read(ot::Message *this, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  else {
    return 6LL;
  }
}

BOOL ot::Message::CompareBytes( ot::Message *this, unsigned __int16 a2, const unsigned __int8 *a3, unsigned __int16 a4, BOOL (*a5)(unsigned __int8, unsigned __int8))
{
  uint64_t v21 = this;
  unsigned __int16 v20 = a2;
  uint64_t v19 = a3;
  unsigned __int16 v18 = a4;
  unsigned __int16 v17 = a5;
  unsigned __int16 v16 = a4;
  unsigned __int16 v15 = a3;
  ot::Message::GetFirstChunk(this, a2, &v18, (ot::Message::Chunk *)v14);
  while (1)
  {
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    char v9 = v8 | (Length == 0);
    if ((v9 & 1) != 0
      || (ot::Data<(ot::DataLengthType)1>::MatchesBytesIn((uint64_t)v14, v15, (uint64_t)v17, v6, v7) & 1) == 0)
    {
      break;
    }

    unsigned __int16 v10 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    v15 += v10;
    __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    v16 -= v11;
    ot::Message::GetNextChunk(this, &v18, (ot::Message::Chunk *)v14);
  }

  return v16 == 0;
}

uint64_t ot::Data<(ot::DataLengthType)1>::MatchesBytesIn( uint64_t a1, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, BOOL (*a5)(unsigned __int8, unsigned __int8))
{
  return ot::DataUtils::MatchBytes( *(ot::DataUtils **)a1,  a2,  (const unsigned __int8 *)*(unsigned __int16 *)(a1 + 8),  a3,  a5) & 1;
}

{
  return __ZN2ot4DataILNS_14DataLengthTypeE1EE14MatchesBytesInEPKvPFbhhE(a1, a2, a3, a4, a5);
}

BOOL ot::Message::CompareBytes( ot::Message *this, unsigned __int16 a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5, BOOL (*a6)(unsigned __int8, unsigned __int8))
{
  uint64_t v24 = this;
  unsigned __int16 v23 = a2;
  uint64_t v22 = a3;
  unsigned __int16 v21 = a4;
  unsigned __int16 v20 = a5;
  uint64_t v19 = a6;
  unsigned __int16 v18 = a5;
  ot::Message::GetFirstChunk(this, a2, &v20, (ot::Message::Chunk *)v17);
  while (1)
  {
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    char v8 = v7 | (Length == 0);
    if ((v8 & 1) != 0) {
      break;
    }
    unsigned __int16 v15 = v22;
    unsigned __int16 v13 = v21;
    uint64_t Bytes = (const unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
    unsigned __int16 v9 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    if (!ot::Message::CompareBytes(v15, v13, Bytes, v9, v19)) {
      break;
    }
    __int16 v10 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    v21 += v10;
    __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    v18 -= v11;
    ot::Message::GetNextChunk(this, &v20, (ot::Message::Chunk *)v17);
  }

  return v18 == 0;
}

uint64_t ot::Message::GetFirstChunk( ot::Message *this, unsigned __int16 a2, unsigned __int16 *a3, ot::Message::MutableChunk *a4)
{
  return ot::Message::GetFirstChunk(v4, a2, a3, a4);
}

{
  return __ZN2ot7Message13GetFirstChunkEtRtRNS0_12MutableChunkE(this, a2, a3, a4);
}

void ot::Message::MutableChunk::GetBytes(ot::Message::MutableChunk *this)
{
}

{
  __ZN2ot7Message12MutableChunk8GetBytesEv(this);
}

uint64_t ot::Message::GetNextChunk(ot::Message *this, unsigned __int16 *a2, ot::Message::MutableChunk *a3)
{
  return ot::Message::GetNextChunk(v3, a2, a3);
}

{
  return __ZN2ot7Message12GetNextChunkERtRNS0_12MutableChunkE(this, a2, a3);
}

ot::Message *ot::Message::Clone(ot::Message *this, unsigned __int16 a2)
{
  unsigned __int16 v18 = this;
  unsigned __int16 v17 = a2;
  int appended = 0;
  BOOL v9 = (ot::Message::IsLinkSecurityEnabled(this) & 1) != 0;
  char Priority = ot::Message::GetPriority(this);
  ot::Message::Settings::Settings(v14, v9, Priority);
  unsigned __int16 Length = ot::Message::GetLength(this);
  unsigned __int16 v17 = ot::Min<unsigned short>(Length, v17);
  MessagePool  = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
  char Type = ot::Message::GetType(this);
  Reserved  = ot::Message::GetReserved(this);
  unsigned __int16 v15 = ot::MessagePool::Allocate(MessagePool, Type, Reserved, (ot::Message::Settings *)v14);
  if (v15)
  {
    int appended = ot::Message::AppendBytesFromMessage(v15, this, 0, v17);
    if (!appended)
    {
      Offset  = ot::Message::GetOffset(this);
      unsigned __int16 v13 = ot::Min<unsigned short>(Offset, v17);
      ot::Message::SetOffset(v15, v13);
      char v8 = v15;
      Subchar Type = ot::Message::GetSubType(this);
      ot::Message::SetSubType(v8, SubType);
    }
  }

  else
  {
    int appended = 3;
  }

  if (appended && v15)
  {
    ot::Message::Free(v15);
    return 0LL;
  }

  return v15;
}

uint64_t ot::Message::SetSubType(ot::Buffer *a1, char a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFFF87 | (8 * (a2 & 0xF));
  return result;
}

{
  return __ZN2ot7Message10SetSubTypeENS0_7SubTypeE(a1, a2);
}

uint64_t ot::Message::GetSubType(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 3) & 0xF;
}

{
  return __ZNK2ot7Message10GetSubTypeEv(this);
}

BOOL ot::Message::GetChildMask(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::Get(Metadata + 60, a2);
}

BOOL ot::BitVector<(unsigned short)64>::Get(uint64_t a1, unsigned __int16 a2)
{
  if (a2 >= 0x40u) {
    __assert_rtn("Get", "bit_vector.hpp", 76, "aIndex < N");
  }
  return (*(unsigned __int8 *)(a1 + a2 / 8) & (128 >> (a2 % 8))) != 0;
}

{
  return __ZNK2ot9BitVectorILt64EE3GetEt(a1, a2);
}

uint64_t ot::Message::ClearChildMask(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::Set(Metadata + 60, a2, 0);
}

uint64_t ot::BitVector<(unsigned short)64>::Set(uint64_t result, unsigned __int16 a2, char a3)
{
  if (a2 >= 0x40u) {
    __assert_rtn("Set", "bit_vector.hpp", 89, "aIndex < N");
  }
  if ((a3 & 1) != 0) {
    *(_BYTE *)(result + a2 / 8) |= 128 >> (a2 % 8);
  }
  else {
    *(_BYTE *)(result + a2 / 8) &= ~(128 >> (a2 % 8));
  }
  return result;
}

{
  return __ZN2ot9BitVectorILt64EE3SetEtb(result, a2, a3);
}

uint64_t ot::Message::SetChildMask(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::Set(Metadata + 60, a2, 1);
}

uint64_t ot::Message::IsChildPending(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::HasAny((_BYTE *)(Metadata + 60)) & 1;
}

uint64_t ot::BitVector<(unsigned short)64>::HasAny(_BYTE *a1)
{
  char v3 = 0;
  for (unsigned __int16 i = a1; i != a1 + 8; ++i)
  {
    if (*i)
    {
      char v3 = 1;
      return v3 & 1;
    }
  }

  return v3 & 1;
}

{
  return __ZNK2ot9BitVectorILt64EE6HasAnyEv(a1);
}

uint64_t ot::Message::SetLinkInfo(ot::Message *this, const ot::ThreadLinkInfo *a2)
{
  return ot::Message::SetRadioType(this, *((_BYTE *)a2 + 16));
}

uint64_t ot::Message::SetPanId(ot::Message *this, __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 5ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return result;
}

{
  return __ZN2ot7Message8SetPanIdEt(this, a2);
}

void ot::Message::AddRss(ot::Message *this, char a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  ot::RssAverager::Add((ot::RssAverager *)(Metadata + 56), a2);
  IgnoreError();
}

{
  __ZN2ot7Message6AddRssEa(this, a2);
}

uint64_t ot::Message::AddLqi(ot::Message *this, unsigned __int8 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::LqiAverager::Add((ot::LqiAverager *)(Metadata + 58), a2);
}

{
  return __ZN2ot7Message6AddLqiEh(this, a2);
}

uint64_t ot::Message::SetRadioType(ot::Buffer *a1, char a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(Metadata + 68)  = *(_DWORD *)(Metadata + 68) & 0xFFFBFFFF | 0x40000;
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFCFFFF | ((a2 & 3) << 16);
  return result;
}

{
  return __ZN2ot7Message12SetRadioTypeENS_3Mac9RadioTypeE(a1, a2);
}

uint64_t ot::Message::IsTimeSync(ot::Message *this)
{
  return 0LL;
}

uint64_t ot::Message::SetMessageQueue(ot::Message *this, ot::MessageQueue *a2)
{
  *(void *)(ot::Buffer::GetMetadata(this) + 2++*(_WORD *)(this + 4) = a2;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68) &= ~0x800u;
  return result;
}

uint64_t ot::Message::SetPriorityQueue(ot::Message *this, ot::PriorityQueue *a2)
{
  *(void *)(ot::Buffer::GetMetadata(this) + 2++*(_WORD *)(this + 4) = a2;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFF7FF | 0x800;
  return result;
}

ot::Message **ot::MessageQueue::Enqueue(ot::MessageQueue *a1, ot::Message *a2, char a3)
{
  if (ot::Message::IsInAQueue(a2)) {
    __assert_rtn("Enqueue", "message.cpp", 1025, "!aMessage.IsInAQueue()");
  }
  BOOL v8 = 0;
  if (!*(void *)ot::Message::Next(a2)) {
    BOOL v8 = *(void *)ot::Message::Prev(a2) == 0LL;
  }
  if (!v8) {
    __assert_rtn("Enqueue", "message.cpp", 1026, "(aMessage.Next() == nullptr) && (aMessage.Prev() == nullptr)");
  }
  ot::Message::SetMessageQueue(a2, a1);
  if (ot::MessageQueue::GetTail(a1))
  {
    Tail  = (ot::Message *)ot::MessageQueue::GetTail(a1);
    uint64_t v6 = *(ot::Message **)ot::Message::Next(Tail);
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v6;
    uint64_t v7 = ot::MessageQueue::GetTail(a1);
    *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v7;
    *(void *)ot::Message::Prev(v6)  = a2;
    char v5 = (ot::Message *)ot::MessageQueue::GetTail(a1);
    uint64_t result = (ot::Message **)ot::Message::Next(v5);
    *uint64_t result = a2;
    if (a3 == 1) {
      return (ot::Message **)ot::MessageQueue::SetTail(a1, (uint64_t)a2);
    }
  }

  else
  {
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
    *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
    return (ot::Message **)ot::MessageQueue::SetTail(a1, (uint64_t)a2);
  }

  return result;
}

uint64_t ot::MessageQueue::Dequeue(ot::MessageQueue *this, ot::Message *a2)
{
  if ((ot::MessageQueue *)ot::Message::GetMessageQueue(a2) != this) {
    __assert_rtn("Dequeue", "message.cpp", 1056, "aMessage.GetMessageQueue() == this");
  }
  BOOL v9 = 0;
  if (*(void *)ot::Message::Next(a2)) {
    BOOL v9 = *(void *)ot::Message::Prev(a2) != 0LL;
  }
  if (!v9) {
    __assert_rtn("Dequeue", "message.cpp", 1057, "(aMessage.Next() != nullptr) && (aMessage.Prev() != nullptr)");
  }
  if (a2 == (ot::Message *)ot::MessageQueue::GetTail(this))
  {
    Tail  = (ot::Message *)ot::MessageQueue::GetTail(this);
    char v3 = (uint64_t *)ot::Message::Prev(Tail);
    ot::MessageQueue::SetTail(this, *v3);
    if (a2 == (ot::Message *)ot::MessageQueue::GetTail(this)) {
      ot::MessageQueue::SetTail(this, 0LL);
    }
  }

  uint64_t v7 = *(void *)ot::Message::Next(a2);
  int v4 = (ot::Message **)ot::Message::Prev(a2);
  *(void *)ot::Message::Next(*v++*(_WORD *)(this + 4) = v7;
  uint64_t v8 = *(void *)ot::Message::Prev(a2);
  char v5 = (ot::Message **)ot::Message::Next(a2);
  *(void *)ot::Message::Prev(*v5)  = v8;
  *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  return ot::Message::SetMessageQueue(a2, 0LL);
}

void ot::MessageQueue::DequeueAndFree(ot::MessageQueue *this, ot::Message *a2)
{
}

ot::Message *ot::MessageQueue::DequeueAndFreeAll(ot::MessageQueue *this)
{
  while (1)
  {
    uint64_t result = (ot::Message *)ot::MessageQueue::GetHead(this);
    if (!result) {
      break;
    }
    ot::MessageQueue::DequeueAndFree(this, result);
  }

  return result;
}

uint64_t ot::MessageQueue::begin(ot::MessageQueue *this)
{
  Head  = (ot::Message *)ot::MessageQueue::GetHead(this);
  _ZN2ot4Coap7Message8IteratorCI2NS_7Message8IteratorEEPS3_((ot::Message::Iterator *)&v3, Head);
  return v3;
}

{
  uint64_t Head;
  uint64_t v3;
  Head  = ot::MessageQueue::GetHead(this);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

BOOL ot::MessageQueue::GetInfo(ot::MessageQueue *a1, uint64_t a2)
{
  __int16 v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a1;
  uint64_t v7 = (ot::Message *)ot::MessageQueue::begin(a1);
  uint64_t v6 = ot::MessageQueue::end(v8);
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v7, &v6);
    if (!result) {
      break;
    }
    char v5 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v7);
    ++*(_WORD *)v9;
    BufferCount  = ot::Message::GetBufferCount(v5);
    *(_WORD *)(v9 + 2) += BufferCount;
    unsigned __int16 Length = ot::Message::GetLength(v5);
    *(_DWORD *)(v9 + 4) += Length;
    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v7);
  }

  return result;
}

uint64_t ot::MessageQueue::end(ot::MessageQueue *this)
{
  uint64_t v2 = 0LL;
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)&v2);
  return v2;
}

{
  uint64_t v2;
  ot::Coap::Message::Iterator::Iterator((ot::Coap::Message::Iterator *)&v2);
  return v2;
}

{
  return __ZN2ot12MessageQueue3endEv(this);
}

{
  return __ZNK2ot12MessageQueue3endEv(this);
}

uint64_t ot::PriorityQueue::FindFirstNonNullTail(ot::PriorityQueue *a1, unsigned __int8 a2)
{
  uint64_t v5 = 0LL;
  unsigned __int8 Priority = a2;
  while (!*((void *)a1 + Priority))
  {
    unsigned __int8 Priority = ot::PriorityQueue::PrevPriority(a1, Priority);
    if (Priority == a2) {
      return v5;
    }
  }

  return *((void *)a1 + Priority);
}

uint64_t ot::PriorityQueue::PrevPriority(ot::PriorityQueue *this, char a2)
{
  if (a2 == 3) {
    return 0;
  }
  else {
    return (a2 + 1);
  }
}

{
  return __ZNK2ot13PriorityQueue12PrevPriorityEh(this, a2);
}

uint64_t ot::PriorityQueue::GetHead(ot::PriorityQueue *this)
{
  FirstNonNullTail  = (ot::Message *)ot::PriorityQueue::FindFirstNonNullTail(this, 0);
  return ot::Message::NextOf(FirstNonNullTail, v2);
}

uint64_t ot::PriorityQueue::GetHeadForPriority(ot::PriorityQueue *a1, unsigned __int8 a2)
{
  if (!*((void *)a1 + a2)) {
    return 0LL;
  }
  unsigned __int8 Priority = ot::PriorityQueue::PrevPriority(a1, a2);
  FirstNonNullTail  = (ot::Message *)ot::PriorityQueue::FindFirstNonNullTail(a1, Priority);
  if (!FirstNonNullTail) {
    __assert_rtn("GetHeadForPriority", "message.cpp", 1150, "previousTail != nullptr");
  }
  return *(void *)ot::Message::Next(FirstNonNullTail);
}

uint64_t ot::PriorityQueue::GetTail(ot::PriorityQueue *this)
{
  return ot::PriorityQueue::FindFirstNonNullTail(this, 0);
}

void ot::PriorityQueue::FindFirstNonNullTail(uint64_t a1, unsigned __int8 a2)
{
}

{
  __ZN2ot13PriorityQueue20FindFirstNonNullTailENS_7Message8PriorityE(a1, a2);
}

void ot::PriorityQueue::DequeueAndFree(ot::PriorityQueue *this, ot::Message *a2)
{
}

void ot::PriorityQueue::DequeueAndFreeAll(ot::PriorityQueue *this)
{
  while (1)
  {
    ot::PriorityQueue::GetHead(this);
    if (!v1) {
      break;
    }
    ot::PriorityQueue::DequeueAndFree(this, v1);
  }

void ot::PriorityQueue::GetHead(ot::PriorityQueue *this)
{
}

{
  __ZN2ot13PriorityQueue7GetHeadEv(this);
}

uint64_t ot::PriorityQueue::begin(ot::PriorityQueue *this)
{
  return v3;
}

{
  uint64_t Head;
  uint64_t v3;
  Head  = ot::PriorityQueue::GetHead(this);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

BOOL ot::PriorityQueue::GetInfo(ot::PriorityQueue *a1, uint64_t a2)
{
  __int16 v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a1;
  uint64_t v7 = (ot::Message *)ot::PriorityQueue::begin(a1);
  uint64_t v6 = ot::PriorityQueue::end(v8);
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v7, &v6);
    if (!result) {
      break;
    }
    uint64_t v5 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v7);
    ++*(_WORD *)v9;
    BufferCount  = ot::Message::GetBufferCount(v5);
    *(_WORD *)(v9 + 2) += BufferCount;
    unsigned __int16 Length = ot::Message::GetLength(v5);
    *(_DWORD *)(v9 + 4) += Length;
    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v7);
  }

  return result;
}

uint64_t ot::PriorityQueue::end(ot::PriorityQueue *this)
{
  uint64_t v2 = 0LL;
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)&v2);
  return v2;
}

{
  uint64_t v2;
  ot::Coap::Message::Iterator::Iterator((ot::Coap::Message::Iterator *)&v2);
  return v2;
}

{
  return __ZN2ot13PriorityQueue3endEv(this);
}

{
  return __ZNK2ot13PriorityQueue3endEv(this);
}

void *ot::LinkedListEntry<ot::Buffer>::SetNext(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_6BufferEE7SetNextEPS1_(result, a2);
}

uint64_t ot::LinkedListEntry<ot::Buffer>::GetNext(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

  ;
}

  ;
}

  ;
}

  ;
}

{
  return __ZN2ot15LinkedListEntryINS_6BufferEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_6BufferEE7GetNextEv(a1);
}

uint64_t ot::Pool<ot::Buffer,(unsigned short)256>::GetIndexOf(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)((a2 - (a1 + 8)) / 256);
}

{
  return __ZNK2ot4PoolINS_6BufferELt256EE10GetIndexOfERKS1_(a1, a2);
}

void *ot::LinkedList<ot::Buffer>::Push(uint64_t *a1, void *a2)
{
  BOOL result = ot::LinkedListEntry<ot::Buffer>::SetNext(a2, *a1);
  *a1  = (uint64_t)a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_6BufferEE4PushERS1_(a1, a2);
}

uint64_t ot::LinkedList<ot::Buffer>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Buffer>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_6BufferEE3PopEv(a1);
}

uint64_t __cxx_global_var_init_5()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_5()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_message_cpp()
{
  return __cxx_global_var_init_1_5();
}

ot::Notifier *ot::Notifier::Notifier(ot::Notifier *this, ot::Instance *a2)
{
  uint64_t v5 = (void *)((char *)this + 32);
  do
  {
    ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(v5);
    BOOL v2 = v5 + 2 != (void *)((char *)this + 96);
    v5 += 2;
  }

  while (v2);
  return this;
}

{
  ot::Notifier::Notifier(this, a2);
  return this;
}

uint64_t ot::Notifier::EmitEvents(ot::Notifier *this)
{
  v37[1]  = (uint64_t)this;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(v37);
  uint64_t result = ot::Events::IsEmpty(this);
  if ((result & 1) == 0)
  {
    v37[0]  = *(void *)this;
    ot::Events::Clear(this);
    uint64_t v36 = v37[0];
    ot::Notifier::LogEvents((uint64_t)this, v37[0]);
    BOOL v2 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    v35  = v37[0];
    ot::Mle::Mle::HandleNotifierEvents(v2, v37[0]);
    uint64_t v3 = (ot::Message **)ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(this);
    v34  = v37[0];
    ot::EnergyScanServer::HandleNotifierEvents(v3, v37[0]);
    int v4 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
    uint64_t v33 = v37[0];
    ot::MeshCoP::JoinerRouter::HandleNotifierEvents(v4, v37[0]);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
    v32  = v37[0];
    ot::BackboneRouter::Manager::HandleNotifierEvents(v5, v37[0]);
    uint64_t v6 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(this);
    uint64_t v31 = v37[0];
    ot::ChildSupervisor::HandleNotifierEvents(v6, v37[0]);
    uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(this);
    uint64_t v30 = v37[0];
    ot::MeshCoP::DatasetUpdater::HandleNotifierEvents(v7, v37[0]);
    uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    uint64_t v29 = v37[0];
    ot::NetworkData::Notifier::HandleNotifierEvents(v8, v37[0]);
    uint64_t v9 = (ot::AnnounceSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
    uint64_t v28 = v37[0];
    ot::AnnounceSender::HandleNotifierEvents(v9, v37[0]);
    __int16 v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
    uint64_t v27 = v37[0];
    ot::MeshCoP::BorderAgent::HandleNotifierEvents(v10, v37[0]);
    __int16 v11 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
    uint64_t v26 = v37[0];
    ot::MlrManager::HandleNotifierEvents(v11, v37[0]);
    unsigned __int16 v12 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
    uint64_t v25 = v37[0];
    ot::DuaManager::HandleNotifierEvents(v12, v37[0]);
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Link>(this);
    uint64_t v24 = v37[0];
    ot::Trel::Link::HandleNotifierEvents(v13, v37[0]);
    uint64_t v14 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(this);
    uint64_t v23 = v37[0];
    ot::Utils::Slaac::HandleNotifierEvents(v14, v37[0]);
    unsigned __int16 v15 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    uint64_t v22 = v37[0];
    uint64_t result = ot::Utils::HistoryTracker::HandleNotifierEvents(v15, v37[0]);
    unsigned __int16 v21 = (char *)this + 32;
    unsigned __int16 v20 = (char *)this + 32;
    uint64_t v19 = (char *)this + 96;
    while (v20 != v19)
    {
      v18[1]  = v20;
      unsigned __int16 v16 = v20;
      v18[0]  = ot::Events::GetAsFlags((ot::Events *)v37);
      uint64_t result = (uint64_t)ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned long long>( v16,  v18);
      v20 += 16;
    }
  }

  return result;
}

void *ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::HandleTasklet);
  return a1;
}

void *ot::CallbackBase<void (*)(unsigned long long,void *)>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvyPvEE5ClearEv(result);
}

uint64_t ot::Notifier::RegisterCallback( ot::Notifier *this, void (*a2)(unint64_t, void *), uint64_t a3)
{
  unsigned int v7 = 0;
  uint64_t v6 = 0LL;
  if (a2)
  {
    uint64_t v5 = (char *)this + 32;
    int v4 = (char *)this + 96;
    while (v5 != v4)
    {
      v5 += 16;
    }

    if (v6) {
      ot::CallbackBase<void (*)(unsigned long long,void *)>::Set(v6, (uint64_t)a2, a3);
    }
    else {
      return 3;
    }
  }

  return v7;
}

BOOL ot::CallbackBase<void (*)(unsigned long long,void *)>::Matches(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = 0;
  if (*a1 == a2) {
    return a1[1] == a3;
  }
  return v4;
}

{
  return __ZNK2ot12CallbackBaseIPFvyPvEE7MatchesES3_S1_(a1, a2, a3);
}

BOOL ot::CallbackBase<void (*)(unsigned long long,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvyPvEE5IsSetEv(a1);
}

void *ot::CallbackBase<void (*)(unsigned long long,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvyPvEE3SetES3_S1_(result, a2, a3);
}

uint64_t ot::Notifier::RemoveCallback( uint64_t this, void (*a2)(unint64_t, void *), uint64_t a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    for (unsigned __int16 i = (void *)(this + 32); i != (void *)(v3 + 96); i += 2)
    {
      this  = ot::CallbackBase<void (*)(unsigned long long,void *)>::Matches(i, (uint64_t)a2, a3);
      if ((this & 1) != 0) {
        this  = (uint64_t)ot::CallbackBase<void (*)(unsigned long long,void *)>::Clear(i);
      }
    }
  }

  return this;
}

uint64_t ot::Notifier::Signal(void *a1, uint64_t a2)
{
  return ot::Tasklet::Post((ot::Tasklet *)(a1 + 2));
}

void *ot::Events::Add(void *result, uint64_t a2)
{
  *result |= a2;
  return result;
}

{
  return __ZN2ot6Events3AddENS_5EventE(result, a2);
}

uint64_t ot::Notifier::SignalIfFirst(void *a1, uint64_t a2)
{
  uint64_t result = ot::Notifier::HasSignaled((uint64_t)a1, a2);
  if ((result & 1) == 0) {
    return ot::Notifier::Signal(a1, a2);
  }
  return result;
}

BOOL ot::Notifier::HasSignaled(uint64_t a1, uint64_t a2)
{
  return ot::Events::Contains((void *)(a1 + 8), a2);
}

{
  return __ZNK2ot8Notifier11HasSignaledENS_5EventE(a1, a2);
}

BOOL ot::Events::IsEmpty(ot::Events *this)
{
  return *(void *)this == 0LL;
}

{
  return __ZNK2ot6Events7IsEmptyEv(this);
}

void *ot::Events::Clear(void *this)
{
  *this  = 0LL;
  return this;
}

{
  return __ZN2ot6Events5ClearEv(this);
}

void ot::Notifier::LogEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  AsFlags  = ot::Events::GetAsFlags((ot::Events *)&v23);
  char v21 = 0;
  ot::String<(unsigned short)95>::String((uint64_t)v24);
  for (unsigned __int8 i = 0; i < 0x40uLL && AsFlags; ++i)
  {
    if ((AsFlags & (1LL << i)) != 0)
    {
      if ((unsigned __int16)ot::StringWriter::GetLength((ot::StringWriter *)v24) >= 0x46u)
      {
        char v18 = ot::Events::GetAsFlags((ot::Events *)&v23);
        ot::String<(unsigned short)95>::AsCString((uint64_t)v24);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Notifier",  "StateChanged (0x%llx) %s%s ...",  v2,  v3,  v4,  v5,  v6,  v7,  v18);
        ot::StringWriter::Clear((uint64_t)v24);
        char v21 = 0;
      }

      uint64_t v8 = " ";
      if ((v21 & 1) == 0) {
        uint64_t v8 = "";
      }
      unsigned __int16 v17 = v8;
      uint64_t v9 = ot::Notifier::EventToString(a1, 1LL << i);
      ot::StringWriter::Append((ot::StringWriter *)v24, "%s%s", v17, v9);
      char v21 = 1;
      AsFlags ^= 1 << i;
    }
  }

  char v16 = ot::Events::GetAsFlags((ot::Events *)&v23);
  ot::String<(unsigned short)95>::AsCString((uint64_t)v24);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Notifier",  "StateChanged (0x%llx) %s%s]",  v10,  v11,  v12,  v13,  v14,  v15,  v16);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::EnergyScanServer>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_16EnergyScanServerEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::JoinerRouter>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP12JoinerRouterEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::DatasetUpdater>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP14DatasetUpdaterEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::AnnounceSender>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14AnnounceSenderEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::BorderAgent>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP11BorderAgentEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Link>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Trel::Link>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_4Trel4LinkEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::Slaac>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5Utils5SlaacEEERT_v(a1);
}

void *ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned long long>( void *result, void *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned long long>( (uint64_t)result,  a2);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvyPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJyEEEvDpOT_(result, a2);
}

uint64_t ot::Events::GetAsFlags(ot::Events *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot6Events10GetAsFlagsEv(this);
}

uint64_t ot::String<(unsigned short)95>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 95);
  return a1;
}

uint64_t ot::StringWriter::GetLength(ot::StringWriter *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot12StringWriter9GetLengthEv(this);
}

uint64_t ot::String<(unsigned short)95>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt95EE9AsCStringEv(a1);
}

char *ot::Notifier::EventToString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = "(unknown)";
  for (unsigned __int8 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)31>(); ++i)
  {
    if (a2 == 1LL << i) {
      return ot::Notifier::EventToString(ot::Event)const::kEventStrings[i];
    }
  }

  return (char *)v4;
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)31>()
{
  return 31LL;
}

{
  return __ZN2ot14GetArrayLengthIPKcLt31EEEtRAT0__KT_();
}

uint64_t ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
  return ot::Notifier::EmitEvents(v2);
}

uint64_t ot::Instance::Get<ot::EnergyScanServer>(uint64_t a1)
{
  return a1 + 164480;
}

{
  return __ZN2ot8Instance3GetINS_16EnergyScanServerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::MeshCoP::DatasetUpdater>(uint64_t a1)
{
  return a1 + 176840;
}

{
  return __ZN2ot8Instance3GetINS_7MeshCoP14DatasetUpdaterEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::AnnounceSender>(uint64_t a1)
{
  return a1 + 176888;
}

{
  return __ZN2ot8Instance3GetINS_14AnnounceSenderEEERT_v(a1);
}

uint64_t ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned long long>( uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvyPvELNS_23CallbackContextPositionE1EE6InvokeIJyEEEvDpOT_(a1, a2);
}

void ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::NetworkInfo *a1, unsigned __int8 a2)
{
  char v21 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::NetworkInfo::GetRloc16(a1);
  ExtAddress  = (ot::Mac::ExtAddress *)ot::SettingsBase::NetworkInfo::GetExtAddress(a1);
  ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v25);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v25);
  unsigned __int8 Role = ot::SettingsBase::NetworkInfo::GetRole(a1);
  ot::Mle::RoleToString(Role);
  ot::SettingsBase::NetworkInfo::GetDeviceMode(a1);
  ot::SettingsBase::NetworkInfo::GetVersion(a1);
  KeySequence  = ot::SettingsBase::NetworkInfo::GetKeySequence(a1);
  ot::ToUlong(KeySequence);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Settings",  "%s NetworkInfo {rloc:0x%04x, extaddr:%s, role:%s, mode:0x%02x, version:%u, keyseq:0x%lx, ...",  v5,  v6,  v7,  v8,  v9,  v10,  v21);
  PreviousPartitionId  = ot::SettingsBase::NetworkInfo::GetPreviousPartitionId(a1);
  char v23 = ot::ToUlong(PreviousPartitionId);
  MleFrameCounter  = ot::SettingsBase::NetworkInfo::GetMleFrameCounter(a1);
  ot::ToUlong(MleFrameCounter);
  MacFrameCounter  = ot::SettingsBase::NetworkInfo::GetMacFrameCounter(a1);
  ot::ToUlong(MacFrameCounter);
  MeshLocalIid  = (ot::Ip6::InterfaceIdentifier *)ot::SettingsBase::NetworkInfo::GetMeshLocalIid(a1);
  ot::Ip6::InterfaceIdentifier::ToString(MeshLocalIid, (ot::StringWriter *)v24);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v24);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Settings",  "... pid:0x%lx, mlecntr:0x%lx, maccntr:0x%lx, mliid:%s}",  v15,  v16,  v17,  v18,  v19,  v20,  v23);
}

char *ot::SettingsBase::ActionToString(unsigned __int8 a1)
{
  return ot::SettingsBase::ActionToString(ot::SettingsBase::Action)::kActionStrings[a1];
}

uint64_t ot::SettingsBase::NetworkInfo::GetRloc16(ot::SettingsBase::NetworkInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo9GetRloc16Ev(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetExtAddress(ot::SettingsBase::NetworkInfo *this)
{
  return (uint64_t)this + 20;
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo13GetExtAddressEv(this);
}

uint64_t ot::String<(unsigned short)17>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt17EE9AsCStringEv(a1);
}

uint64_t ot::SettingsBase::NetworkInfo::GetRole(ot::SettingsBase::NetworkInfo *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo7GetRoleEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetDeviceMode(ot::SettingsBase::NetworkInfo *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo13GetDeviceModeEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetVersion(ot::SettingsBase::NetworkInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 18));
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo10GetVersionEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetKeySequence(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 1));
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo14GetKeySequenceEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetPreviousPartitionId(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 4));
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo22GetPreviousPartitionIdEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetMleFrameCounter(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 2));
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo18GetMleFrameCounterEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetMacFrameCounter(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 3));
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo18GetMacFrameCounterEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetMeshLocalIid(ot::SettingsBase::NetworkInfo *this)
{
  return (uint64_t)this + 28;
}

{
  return __ZNK2ot12SettingsBase11NetworkInfo15GetMeshLocalIidEv(this);
}

void ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::ParentInfo *a1, unsigned __int8 a2)
{
  char v10 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::ParentInfo::GetExtAddress(a1);
  ot::Mac::ExtAddress::ToString(v2, (ot::StringWriter *)v11);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v11);
  ot::SettingsBase::ParentInfo::GetVersion(a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Settings",  "%s ParentInfo {extaddr:%s, version:%u}",  v3,  v4,  v5,  v6,  v7,  v8,  v10);
}

  ;
}

uint64_t ot::SettingsBase::ParentInfo::GetVersion(ot::SettingsBase::ParentInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 4));
}

{
  return __ZNK2ot12SettingsBase10ParentInfo10GetVersionEv(this);
}

void ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::ChildInfo *a1, unsigned __int8 a2)
{
  char v11 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::ChildInfo::GetRloc16(a1);
  ot::SettingsBase::ChildInfo::GetExtAddress(a1);
  ot::Mac::ExtAddress::ToString(v2, (ot::StringWriter *)v12);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v12);
  Timeout  = ot::SettingsBase::ChildInfo::GetTimeout(a1);
  ot::ToUlong(Timeout);
  ot::SettingsBase::ChildInfo::GetMode(a1);
  ot::SettingsBase::ChildInfo::GetVersion(a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Settings",  "%s ChildInfo {rloc:0x%04x, extaddr:%s, timeout:%lu, mode:0x%02x, version:%u}",  v4,  v5,  v6,  v7,  v8,  v9,  v11);
}

uint64_t ot::SettingsBase::ChildInfo::GetRloc16(ot::SettingsBase::ChildInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 6));
}

  ;
}

{
  return __ZNK2ot12SettingsBase9ChildInfo9GetRloc16Ev(this);
}

uint64_t ot::SettingsBase::ChildInfo::GetTimeout(ot::SettingsBase::ChildInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 2));
}

{
  return __ZNK2ot12SettingsBase9ChildInfo10GetTimeoutEv(this);
}

uint64_t ot::SettingsBase::ChildInfo::GetMode(ot::SettingsBase::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 14);
}

{
  return __ZNK2ot12SettingsBase9ChildInfo7GetModeEv(this);
}

uint64_t ot::SettingsBase::ChildInfo::GetVersion(ot::SettingsBase::ChildInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)((char *)this + 15));
}

{
  return __ZNK2ot12SettingsBase9ChildInfo10GetVersionEv(this);
}

void ot::SettingsBase::DadInfo::Log(ot::SettingsBase::DadInfo *a1, unsigned __int8 a2)
{
  char v9 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::DadInfo::GetDadCounter(a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s DadInfo {DadCounter:%2d}", v2, v3, v4, v5, v6, v7, v9);
}

uint64_t ot::SettingsBase::DadInfo::GetDadCounter(ot::SettingsBase::DadInfo *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot12SettingsBase7DadInfo13GetDadCounterEv(this);
}

uint64_t ot::SettingsBase::BorderAgentId::SetId( ot::SettingsBase::BorderAgentId *this, const unsigned __int8 *a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (a3 == 16LL) {
    memcpy(this, a2, a3);
  }
  else {
    return 7;
  }
  return v4;
}

void ot::SettingsBase::BorderAgentId::Log(ot::SettingsBase::BorderAgentId *a1, unsigned __int8 a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = a2;
  ot::StringWriter::StringWriter((ot::StringWriter *)v11, v14, 33);
  ot::SettingsBase::BorderAgentId::GetId(a1);
  ot::StringWriter::AppendHexBytes((ot::StringWriter *)v11, v2, 16);
  char v3 = ot::SettingsBase::ActionToString(v12);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s BorderAgentId {id:%s}", v4, v5, v6, v7, v8, v9, v3);
}

  ;
}

uint64_t ot::SettingsBase::KeyToString(unsigned __int16 a1)
{
  if (a1 > 0x11u) {
    __assert_rtn("KeyToString", "settings.cpp", 208, "aKey <= kLastKey");
  }
  return *((void *)&ot::SettingsBase::KeyToString(ot::SettingsBase::Key)::kKeyStrings + a1);
}

uint64_t ot::Settings::Init(ot::Settings *this)
{
  char v3 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  Array  = ot::GetArrayLength<unsigned short,(unsigned short)3>();
  return ot::SettingsDriver::Init(v3, ot::Settings::kSensitiveKeys, Array);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::SettingsDriver>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14SettingsDriverEEERT_v(a1);
}

uint64_t ot::GetArrayLength<unsigned short,(unsigned short)3>()
{
  return 3LL;
}

{
  return __ZN2ot14GetArrayLengthItLt3EEEtRAT0__KT_();
}

uint64_t ot::Settings::Deinit(ot::Settings *this)
{
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  return ot::SettingsDriver::Deinit(v1);
}

void ot::Settings::Wipe(ot::Settings *this)
{
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  ot::SettingsDriver::Wipe(v1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "Wiped all info", v2, v3, v4, v5, v6, v7, v8);
}

uint64_t ot::SettingsDriver::Wipe(ot::SettingsDriver *this)
{
  InstancePtr  = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsWipe((uint64_t)InstancePtr);
}

{
  return __ZN2ot14SettingsDriver4WipeEv(this);
}

uint64_t ot::Settings::KeyForDatasetType(char a1)
{
  if (a1) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t ot::Settings::SaveOperationalDataset(ot::InstanceLocator *a1, char a2, ot::MeshCoP::Dataset *a3)
{
  __int16 v10 = ot::Settings::KeyForDatasetType(a2);
  char v8 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  ot::MeshCoP::Dataset::GetBytes(a3);
  uint64_t v7 = v3;
  Size  = ot::MeshCoP::Dataset::GetSize(a3);
  unsigned int v9 = ot::SettingsDriver::Set(v8, v10, v7, Size);
  ot::Settings::Log(1u, v9, v10, 0LL);
  return v9;
}

  ;
}

void ot::Settings::Log(unsigned __int8 a1, int a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v19 = a4;
  if (a2)
  {
    if (a1 <= 6uLL) {
      __asm { BR              X8 }
    }

    char v18 = ot::ErrorToString(a2);
    ot::SettingsBase::KeyToString(a3);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Settings", "Error %s %s %s", v4, v5, v6, v7, v8, v9, v18);
  }

  else
  {
    if (a4)
    {
      unint64_t v17 = a3 - 3;
      if (v17 <= 0xE) {
        __asm { BR              X8 }
      }

      uint64_t v19 = 0LL;
    }

    if (!v19)
    {
      char v16 = ot::SettingsBase::ActionToString(a1);
      ot::SettingsBase::KeyToString(a3);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s %s", v10, v11, v12, v13, v14, v15, v16);
    }
  }

uint64_t ot::Settings::ReadOperationalDataset(ot::InstanceLocator *a1, char a2, ot::MeshCoP::Dataset *a3)
{
  uint64_t v11 = a1;
  char v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned __int16 v7 = 254;
  uint64_t v6 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned __int16 v5 = ot::Settings::KeyForDatasetType(v10);
  ot::MeshCoP::Dataset::GetBytes(v9);
  unsigned int v8 = ot::SettingsDriver::Get(v6, v5, v3, &v7);
  if (!v8)
  {
    if (v7 <= 0xFEu) {
      ot::MeshCoP::Dataset::SetSize((uint64_t)v9, v7);
    }
    else {
      return 23;
    }
  }

  return v8;
}

uint64_t ot::SettingsDriver::Get( ot::SettingsDriver *this, unsigned __int16 a2, void *a3, unsigned __int16 *a4)
{
  return ot::SettingsDriver::Get(this, a2, 0, a3, a4);
}

{
  return __ZNK2ot14SettingsDriver3GetEtPvPt(this, a2, a3, a4);
}

uint64_t ot::MeshCoP::Dataset::SetSize(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 260) = a2;
  return this;
}

{
  return __ZN2ot7MeshCoP7Dataset7SetSizeEt(this, a2);
}

uint64_t ot::Settings::DeleteOperationalDataset(ot::InstanceLocator *a1, char a2)
{
  __int16 v6 = ot::Settings::KeyForDatasetType(a2);
  uint64_t v2 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned int v5 = ot::SettingsDriver::Delete(v2, v6, -1);
  ot::Settings::Log(3u, v5, v6, 0LL);
  return v5;
}

uint64_t ot::SettingsDriver::Delete(ot::SettingsDriver *this, __int16 a2, int a3)
{
  InstancePtr  = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsDelete((uint64_t)InstancePtr, a2, a3);
}

{
  return __ZN2ot14SettingsDriver6DeleteEti(this, a2, a3);
}

uint64_t ot::Settings::AddChildInfo(ot::Settings *this, const ot::SettingsBase::ChildInfo *a2)
{
  uint64_t v2 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  unsigned int v4 = ot::SettingsDriver::Add(v2, 5, a2, 0x11u);
  ot::Settings::Log(4u, v4, 5u, (uint64_t)a2);
  return v4;
}

uint64_t ot::SettingsDriver::Add(ot::SettingsDriver *this, __int16 a2, const void *a3, unsigned __int16 a4)
{
  InstancePtr  = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsAdd((uint64_t)InstancePtr, a2, a3, a4);
}

{
  return __ZN2ot14SettingsDriver3AddEtPKvt(this, a2, a3, a4);
}

uint64_t ot::Settings::DeleteAllChildInfo(ot::Settings *this)
{
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  unsigned int v3 = ot::SettingsDriver::Delete(v1, 5, -1);
  ot::Settings::Log(6u, v3, 5u, 0LL);
  return v3;
}

ot::Settings::ChildInfoIterator *ot::Settings::ChildInfoIterator::ChildInfoIterator( ot::Settings::ChildInfoIterator *this, ot::Instance *a2)
{
  *((_WORD *)this + ot::Mle::Tlv::SetType(this, 9) = 0;
  *((_BYTE *)this + 20)  = 0;
  ot::Settings::ChildInfoIterator::Read(this);
  return this;
}

{
  ot::Settings::ChildInfoIterator::ChildInfoIterator(this, a2);
  return this;
}

void ot::Settings::ChildInfoIterator::Read(ot::Settings::ChildInfoIterator *this)
{
  unsigned int v5 = this;
  unsigned __int16 v4 = 17;
  ot::SettingsBase::ChildInfo::Init(this);
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  int v3 = ot::SettingsDriver::Get(v1, 5u, *((unsigned __int16 *)this + 9), this, &v4);
  ot::Settings::Log(0, v3, 5u, (uint64_t)this);
  *((_BYTE *)this + 20)  = v3 != 0;
}

void ot::Settings::ChildInfoIterator::Advance(ot::Settings::ChildInfoIterator *this)
{
  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    ++*((_WORD *)this + 9);
    ot::Settings::ChildInfoIterator::Read(this);
  }

uint64_t ot::Settings::ChildInfoIterator::Delete(ot::Settings::ChildInfoIterator *this)
{
  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    unsigned int v4 = 13;
    ot::Settings::Log(5u, 13, 5u, (uint64_t)this);
  }

  else
  {
    uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
    unsigned int v4 = ot::SettingsDriver::Delete(v1, 5, *((unsigned __int16 *)this + 9));
    ot::Settings::Log(5u, v4, 5u, (uint64_t)this);
  }

  return v4;
}

uint64_t ot::SettingsBase::ChildInfo::Init(ot::SettingsBase::ChildInfo *this)
{
  *(void *)this  = 0LL;
  *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0LL;
  *((_BYTE *)this + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = 0;
  return ot::SettingsBase::ChildInfo::SetVersion(this, 2u);
}

{
  return __ZN2ot12SettingsBase9ChildInfo4InitEv(this);
}

uint64_t ot::SettingsDriver::Get( ot::SettingsDriver *this, unsigned __int16 a2, int a3, void *a4, unsigned __int16 *a5)
{
  InstancePtr  = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsGet((uint64_t)InstancePtr, a2, a3, a4, a5);
}

{
  return __ZNK2ot14SettingsDriver3GetEtiPvPt(this, a2, a3, a4, a5);
}

uint64_t ot::Settings::ReadEntry(ot::InstanceLocator *a1, unsigned __int16 a2, void *a3, unsigned __int16 a4)
{
  uint64_t v11 = a1;
  unsigned __int16 v10 = a2;
  uint64_t v9 = a3;
  unsigned __int16 v8 = a4;
  unsigned __int16 v6 = a4;
  unsigned int v4 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned int v7 = ot::SettingsDriver::Get(v4, v10, v9, &v6);
  ot::Settings::Log(0, v7, v10, (uint64_t)v9);
  return v7;
}

uint64_t ot::Settings::SaveEntry( ot::InstanceLocator *a1, __int16 a2, const void *a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t v14 = a1;
  __int16 v13 = a2;
  uint64_t v12 = a3;
  *(void *)&__n[1]  = a4;
  __n[0]  = a5;
  unsigned int v10 = 0;
  unsigned __int16 v9 = a5;
  unsigned int v5 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  if (!ot::SettingsDriver::Get(v5, v13, *(void **)&__n[1], &v9)
    && v9 == __n[0]
    && !memcmp(v12, *(const void **)&__n[1], __n[0]))
  {
    ot::Settings::Log(2u, v10, v13, (uint64_t)v12);
  }

  else
  {
    unsigned __int16 v6 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
    unsigned int v10 = ot::SettingsDriver::Set(v6, v13, v12, __n[0]);
    ot::Settings::Log(1u, v10, v13, (uint64_t)v12);
  }

  return v10;
}

uint64_t ot::Settings::DeleteEntry(ot::InstanceLocator *a1, __int16 a2)
{
  uint64_t v2 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned int v4 = ot::SettingsDriver::Delete(v2, a2, -1);
  ot::Settings::Log(3u, v4, a2, 0LL);
  return v4;
}

  ;
}

uint64_t ot::Encoding::LittleEndian::HostSwap16(uint64_t this)
{
  return (unsigned __int16)this;
}

{
  return __ZN2ot8Encoding12LittleEndian10HostSwap16Et(this);
}

uint64_t ot::Encoding::LittleEndian::HostSwap32(uint64_t this)
{
  return this;
}

{
  return __ZN2ot8Encoding12LittleEndian10HostSwap32Ej(this);
}

uint64_t ot::SettingsBase::ChildInfo::SetVersion(ot::SettingsBase::ChildInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *(_WORD *)((char *)this + 15)  = result;
  return result;
}

{
  return __ZN2ot12SettingsBase9ChildInfo10SetVersionEt(this, a2);
}

uint64_t ot::StringLength(ot *this, const char *a2)
{
  for (unsigned __int16 i = 0; ; ++i)
  {
    BOOL v3 = 0;
    if (!v3) {
      break;
    }
  }

  return i;
}

ot *ot::StringFind(ot *this, const char *a2)
{
  uint64_t v3 = 0LL;
  while (*(_BYTE *)this)
  {
    this  = (ot *)((char *)this + 1);
  }

  return (ot *)v3;
}

const char *ot::StringFind(const char *a1, char *a2, char a3)
{
  uint64_t v7 = 0LL;
  size_t v6 = strlen(a1);
  size_t v5 = strlen(a2);
  if (v5 <= v6)
  {
    for (size_t i = 0LL; i <= v6 - v5; ++i)
    {
    }
  }

  return (const char *)v7;
}

uint64_t ot::anonymous namespace'::Match(char *a1, char *a2, char a3)
{
  unsigned __int8 v10 = 0;
  if (a3)
  {
    if (a3 == 1)
    {
      while (*a2)
      {
        size_t v5 = a1++;
        int v9 = (char)ot::ToLowercase((ot *)*v5);
        size_t v6 = a2++;
      }
    }
  }

  else
  {
    while (*a2)
    {
      uint64_t v3 = a1++;
      unsigned int v4 = a2++;
      if (*v3 != *v4) {
        return v10;
      }
    }
  }

  if (*a1) {
    return 1;
  }
  else {
    return 2;
  }
}

BOOL ot::StringStartsWith(char *a1, char *a2, char a3)
{
}

BOOL ot::StringEndsWith(ot *this, const char *a2)
{
  char v5 = (char)a2;
  size_t v4 = strlen((const char *)this);
  BOOL v3 = 0;
  if (v4) {
    return *((char *)this + v4 - 1) == v5;
  }
  return v3;
}

BOOL ot::StringEndsWith(const char *a1, char *a2, char a3)
{
  size_t v6 = strlen(a1);
  size_t v5 = strlen(a2);
  BOOL v4 = 0;
  if (v5)
  {
    BOOL v4 = 0;
    if (v6 >= v5) {
  }
    }

  return v4;
}

BOOL ot::StringMatch(char *a1, char *a2, char a3)
{
}

uint64_t ot::StringParseUint8(ot *this, const char **a2, unsigned __int8 *a3)
{
  return ot::StringParseUint8(this, a2, (unsigned __int8 *)0xFF);
}

{
  BOOL v4;
  unsigned __int16 v5;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v7 = 6;
  size_t v6 = *(_BYTE **)this;
  size_t v5 = 0;
  while (1)
  {
    BOOL v4 = 0;
    if (!v4) {
      break;
    }
    size_t v5 = 10 * v5 + (*v6 - 48);
    uint64_t v7 = 0;
    ++v6;
  }

  *(void *)this  = v6;
  *(_BYTE *)a2  = v5;
  return v7;
}

_BYTE *ot::StringConvertToLowercase(_BYTE *this, char *a2)
{
  for (size_t i = this; *i; ++i)
  {
    this  = (_BYTE *)ot::ToLowercase((ot *)(char)*i);
    *size_t i = (_BYTE)this;
  }

  return this;
}

uint64_t ot::ToLowercase(ot *this)
{
  char v2 = (char)this;
  return v2;
}

_BYTE *ot::StringConvertToUppercase(_BYTE *this, char *a2)
{
  for (size_t i = this; *i; ++i)
  {
    this  = (_BYTE *)ot::ToUppercase((ot *)(char)*i);
    *size_t i = (_BYTE)this;
  }

  return this;
}

uint64_t ot::ToUppercase(ot *this)
{
  char v2 = (char)this;
  return v2;
}

char *ot::ToYesNo(ot *this)
{
  return ot::ToYesNo(BOOL)::kYesNoStrings[this & 1];
}

uint64_t ot::StringWriter::StringWriter(uint64_t this, char *a2, __int16 a3)
{
  *(void *)this  = a2;
  *(_WORD *)(this + 8)  = 0;
  *(_WORD *)(this + 10)  = a3;
  **(_BYTE **)this  = 0;
  return this;
}

ot::StringWriter *ot::StringWriter::StringWriter(ot::StringWriter *this, char *a2, __int16 a3)
{
  return this;
}

uint64_t ot::StringWriter::Clear(uint64_t this)
{
  **(_BYTE **)this  = 0;
  *(_WORD *)(this + 8)  = 0;
  return this;
}

ot::StringWriter *ot::StringWriter::Append(ot::StringWriter *this, const char *a2, ...)
{
  return this;
}

ot::StringWriter *ot::StringWriter::AppendVarArgs(ot::StringWriter *this, const char *a2, va_list a3)
{
  else {
    int v4 = *((unsigned __int16 *)this + 5) - *((unsigned __int16 *)this + 4);
  }
  int v6 = vsnprintf((char *)(*(void *)this + *((unsigned __int16 *)this + 4)), v4, a2, a3);
  if (v6 < 0) {
    __assert_rtn("AppendVarArgs", "string.cpp", 262, "len >= 0");
  }
  *((_WORD *)this + 4) += v6;
  if (ot::StringWriter::IsTruncated(this)) {
    *(_BYTE *)(*(void *)this + *((unsigned __int16 *)this + 5) - ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  }
  return this;
}

BOOL ot::StringWriter::IsTruncated(ot::StringWriter *this)
{
  return *((unsigned __int16 *)this + 4) >= (int)*((unsigned __int16 *)this + 5);
}

{
  return __ZNK2ot12StringWriter11IsTruncatedEv(this);
}

ot::StringWriter *ot::StringWriter::AppendHexBytes(ot::StringWriter *this, unsigned __int8 *a2, __int16 a3)
{
  while (a3--)
  {
    int v4 = a2++;
    ot::StringWriter::Append(this, "%02x", *v4);
  }

  return this;
}

uint64_t ot::IsValidUtf8String(ot *this, const char *a2)
{
  char v2 = (const char *)strlen((const char *)this);
  return ot::IsValidUtf8String(this, v2) & 1;
}

{
  unint64_t v4;
  char v5;
  char _c;
  char _ca;
  char _c_1;
  _c_1  = 1;
  int v4 = 0LL;
  while (v4 < (unint64_t)a2)
  {
    _c  = *((_BYTE *)this + v4++);
    if (_c < 0)
    {
      if ((_c & 0x40) == 0)
      {
        _c_1  = 0;
        return _c_1 & 1;
      }

      if ((_c & 0x20) == 0)
      {
        size_t v5 = 1;
        goto LABEL_16;
      }

      if ((_c & 0x10) == 0)
      {
        size_t v5 = 2;
        goto LABEL_16;
      }

      if ((_c & 8) != 0)
      {
        _c_1  = 0;
        return _c_1 & 1;
      }

      size_t v5 = 3;
LABEL_16:
      while (v5--)
      {
        if (v4 >= (unint64_t)a2)
        {
          _c_1  = 0;
          return _c_1 & 1;
        }

        _ca  = *((_BYTE *)this + v4++);
        if ((_ca & 0xC0) != 0x80)
        {
          _c_1  = 0;
          return _c_1 & 1;
        }
      }
    }

    else if (iscntrl(_c))
    {
      _c_1  = 0;
      return _c_1 & 1;
    }
  }

  return _c_1 & 1;
}

int iscntrl(int _c)
{
  return __istype(_c, 0x200uLL);
}

{
  return __Z7iscntrli(_c);
}

int __istype(__darwin_ct_rune_t _c, unint64_t _f)
{
  if (isascii(_c)) {
    return (_DefaultRuneLocale.__runetype[_c] & _f) != 0LL;
  }
  else {
    return __maskrune(_c, _f) != 0;
  }
}

{
  return __Z8__istypeim(_c, _f);
}

int isascii(int _c)
{
  return (_c & 0xFFFFFF80) == 0;
}

{
  return __Z7isasciii(_c);
}

uint64_t ot::Tasklet::Post(ot::Tasklet *this)
{
  uint64_t result = ot::Tasklet::IsPosted(this);
  if ((result & 1) == 0)
  {
    uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Tasklet::Scheduler>(this);
    return ot::Tasklet::Scheduler::PostTasklet(v2, this);
  }

  return result;
}

BOOL ot::Tasklet::IsPosted(ot::Tasklet *this)
{
  return *((void *)this + 1) != 0LL;
}

{
  return __ZNK2ot7Tasklet8IsPostedEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Tasklet::Scheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Tasklet::Scheduler>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7Tasklet9SchedulerEEERT_v(a1);
}

uint64_t ot::Tasklet::Scheduler::PostTasklet(uint64_t this, ot::Tasklet *a2)
{
  if (*(void *)this)
  {
    *((void *)a2 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *(void *)(*(void *)this + 8LL);
    *(void *)(*(void *)this + 8LL)  = a2;
    *(void *)this  = a2;
  }

  else
  {
    *(void *)this  = a2;
    *(void *)(*(void *)this + 8LL)  = *(void *)this;
    Instance  = ot::InstanceLocator::GetInstance(a2);
    return otTaskletsSignalPending(Instance);
  }

  return this;
}

ot::Tasklet ***ot::Tasklet::Scheduler::ProcessQueuedTasklets(ot::Tasklet ***this)
{
  uint64_t v2 = *this;
  *this  = 0LL;
  while (v2)
  {
    uint64_t v1 = v2[1];
    if (v1 == (ot::Tasklet *)v2) {
      uint64_t v2 = 0LL;
    }
    else {
      v2[1]  = (ot::Tasklet *)*((void *)v1 + 1);
    }
    *((void *)v1 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0LL;
    this  = (ot::Tasklet ***)ot::Tasklet::RunTask((uint64_t (**)(void))v1);
  }

  return this;
}

uint64_t ot::Tasklet::RunTask(uint64_t (**this)(void))
{
  return (*this)();
}

{
  return __ZN2ot7Tasklet7RunTaskEv(this);
}

ot::TimeTicker *ot::TimeTicker::TimeTicker(ot::TimeTicker *this, ot::Instance *a2)
{
  *(_DWORD *)this  = 0;
  ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::TimerMilliIn((ot::TimeTicker *)((char *)this + 8), a2);
  return this;
}

{
  ot::TimeTicker::TimeTicker(this, a2);
  return this;
}

ot::InstanceLocator *ot::TimeTicker::HandleTimer(ot::TimeTicker *this)
{
  v34  = this;
  FireTime  = ot::Timer::GetFireTime((ot::TimeTicker *)((char *)this + 8));
  int v1 = ot::Random::NonCrypto::AddJitter((ot::Random::NonCrypto *)0x3E8, 4u);
  int v33 = ot::Time::operator+(&FireTime, v1);
  ot::TimerMilli::FireAt((ot::TimeTicker *)((char *)this + 8), v33);
  int v31 = *(_DWORD *)this;
  if ((v31 & ot::TimeTicker::Mask(0)) != 0)
  {
    uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::HandleTimeTick(v2);
  }

  int v29 = *(_DWORD *)this;
  if ((v29 & ot::TimeTicker::Mask(1)) != 0)
  {
    BOOL v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::HandleTimeTick(v3);
  }

  int v28 = *(_DWORD *)this;
  if ((v28 & ot::TimeTicker::Mask(2)) != 0)
  {
    int v4 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
    ot::AddressResolver::HandleTimeTick(v4);
  }

  int v27 = *(_DWORD *)this;
  if ((v27 & ot::TimeTicker::Mask(6)) != 0)
  {
    size_t v5 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    ot::NetworkData::Notifier::HandleTimeTick(v5);
  }

  int v26 = *(_DWORD *)this;
  if ((v26 & ot::TimeTicker::Mask(4)) != 0)
  {
    int v6 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
    ot::DuaManager::HandleTimeTick(v6, v7, v8, v9, v10, v11, v12, v13);
  }

  int v25 = *(_DWORD *)this;
  if ((v25 & ot::TimeTicker::Mask(5)) != 0)
  {
    uint64_t v14 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
    ot::MlrManager::HandleTimeTick(v14, v15, v16, v17, v18, v19, v20, v21);
  }

  int v24 = *(_DWORD *)this;
  uint64_t result = (ot::InstanceLocator *)ot::TimeTicker::Mask(7);
  if ((v24 & result) != 0)
  {
    char v23 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(this);
    return ot::Ip6::Mpl::HandleTimeTick(v23);
  }

  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::TimeTicker::RegisterReceiver(_DWORD *a1, char a2)
{
  *a1 |= ot::TimeTicker::Mask(a2);
  uint64_t result = ot::Timer::IsRunning((ot::Timer *)(a1 + 2));
  if ((result & 1) == 0)
  {
    Uint32InRange  = ot::Random::NonCrypto::GetUint32InRange(0LL, 0x3E9u);
    return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 2), Uint32InRange);
  }

  return result;
}

uint64_t ot::TimeTicker::Mask(char a1)
{
  return (1 << a1);
}

{
  return __ZN2ot10TimeTicker4MaskENS0_8ReceiverE(a1);
}

uint64_t ot::TimeTicker::UnregisterReceiver(_DWORD *a1, char a2)
{
  uint64_t result = ot::TimeTicker::Mask(a2);
  *a1 &= ~(_DWORD)result;
  if (!*a1) {
    return ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 2));
  }
  return result;
}

uint64_t ot::Timer::GetFireTime(ot::Timer *this)
{
  return *((unsigned int *)this + 2);
}

{
  return __ZNK2ot5Timer11GetFireTimeEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::AddressResolver>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_15AddressResolverEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Mpl>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Ip63MplEEERT_v(a1);
}

ot::InstanceLocator *ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::TimeTicker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(a1);
  return ot::TimeTicker::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::TimeTicker>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_10TimeTickerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::TimeTicker>(uint64_t a1)
{
  return a1 + 168;
}

{
  return __ZN2ot8Instance3GetINS_10TimeTickerEEERT_v(a1);
}

BOOL ot::Timer::DoesFireBefore(ot::Timer *a1, ot::Timer *a2, int a3)
{
  int v14 = a3;
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  FireTime  = ot::Timer::GetFireTime(a1);
  BOOL v10 = ot::Time::operator<(&FireTime, &v14);
  int v8 = ot::Timer::GetFireTime(v12);
  BOOL v3 = ot::Time::operator<(&v8, &v14);
  if (v3 == v10)
  {
    int v7 = ot::Timer::GetFireTime(a1);
    int v6 = ot::Timer::GetFireTime(v12);
    return ot::Time::operator<(&v7, &v6);
  }

  else
  {
    return v10;
  }

uint64_t ot::TimerMilli::Start(ot::TimerMilli *this, unsigned int a2)
{
  int Now = ot::TimerMilli::GetNow(this);
  return ot::TimerMilli::StartAt(this, Now, a2);
}

uint64_t ot::TimerMilli::StartAt(ot::InstanceLocator *a1, int a2, unsigned int a3)
{
  int v6 = a2;
  if (a3 > 0x7FFFFFFF) {
    __assert_rtn("StartAt", "timer.cpp", 84, "aDelay <= kMaxDelay");
  }
  int v5 = ot::Time::operator+(&v6, a3);
  return ot::TimerMilli::FireAt(a1, v5);
}

uint64_t ot::TimerMilli::FireAt(ot::InstanceLocator *a1, int a2)
{
  *((_DWORD *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  uint64_t v2 = (ot::TimerMilli::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(a1);
  return ot::TimerMilli::Scheduler::Add(v2, a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::TimerMilli::Scheduler>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_10TimerMilli9SchedulerEEERT_v(a1);
}

uint64_t ot::TimerMilli::Scheduler::Add(ot::TimerMilli::Scheduler *this, ot::TimerMilli *a2)
{
  return ot::Timer::Scheduler::Add((uint64_t *)this, a2, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return __ZN2ot10TimerMilli9Scheduler3AddERS0_(this, a2);
}

uint64_t ot::TimerMilli::FireAtIfEarlier(int *a1, int a2)
{
  int v4 = a2;
  if (!ot::Timer::IsRunning((ot::Timer *)a1)) {
    return ot::TimerMilli::FireAt((ot::InstanceLocator *)a1, v4);
  }
  uint64_t result = ot::Time::operator>(a1 + 2, &v4);
  if ((result & 1) != 0) {
    return ot::TimerMilli::FireAt((ot::InstanceLocator *)a1, v4);
  }
  return result;
}

uint64_t ot::TimerMilli::Stop(ot::TimerMilli *this)
{
  int v1 = (ot::TimerMilli::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(this);
  return ot::TimerMilli::Scheduler::Remove(v1, this);
}

uint64_t ot::TimerMilli::Scheduler::Remove(ot::TimerMilli::Scheduler *this, ot::TimerMilli *a2)
{
  return ot::Timer::Scheduler::Remove((uint64_t *)this, a2, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return __ZN2ot10TimerMilli9Scheduler6RemoveERS0_(this, a2);
}

uint64_t ot::TimerMilli::RemoveAll(ot::TimerMilli *this, ot::Instance *a2)
{
  uint64_t v2 = (ot::TimerMilli::Scheduler *)ot::Instance::Get<ot::TimerMilli::Scheduler>((uint64_t)this);
  return ot::TimerMilli::Scheduler::RemoveAll(v2);
}

uint64_t ot::Instance::Get<ot::TimerMilli::Scheduler>(uint64_t a1)
{
  return a1 + 16;
}

{
  return __ZN2ot8Instance3GetINS_10TimerMilli9SchedulerEEERT_v(a1);
}

uint64_t ot::TimerMilli::Scheduler::RemoveAll(ot::TimerMilli::Scheduler *this)
{
  return ot::Timer::Scheduler::RemoveAll((uint64_t *)this, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return __ZN2ot10TimerMilli9Scheduler9RemoveAllEv(this);
}

uint64_t ot::Timer::Scheduler::Add(uint64_t *a1, ot::Timer *a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  BOOL v10 = 0LL;
  int v3 = (*(uint64_t (**)(void))(a3 + 16))();
  ot::Time::Time((ot::Time *)&v9, v3);
  ot::Timer::Scheduler::Remove(a1, v12, v11);
  v8[1]  = (uint64_t)a1;
  v8[0]  = ot::LinkedList<ot::Timer>::begin((uint64_t)a1);
  uint64_t v7 = ot::LinkedList<ot::Timer>::end();
  while (ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator!=(v8, &v7))
  {
    int v6 = (ot::Timer *)ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator*((uint64_t)v8);
    if (ot::Timer::DoesFireBefore(v12, v6, v9)) {
      break;
    }
    BOOL v10 = v6;
    ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator++(v8);
  }

  if (v10) {
    return ot::LinkedList<ot::Timer>::PushAfter((uint64_t)a1, (uint64_t)v12, (uint64_t)v10);
  }
  ot::LinkedList<ot::Timer>::Push(a1, (uint64_t)v12);
  return ot::Timer::Scheduler::SetAlarm((ot::InstanceLocator *)a1, v11);
}

uint64_t ot::Timer::Scheduler::Remove(uint64_t *a1, ot::Timer *a2, uint64_t a3)
{
  uint64_t result = ot::Timer::IsRunning(a2);
  if ((result & 1) != 0)
  {
    if ((ot::Timer *)ot::LinkedList<ot::Timer>::GetHead((uint64_t)a1) == a2)
    {
      ot::LinkedList<ot::Timer>::Pop(a1);
      ot::Timer::Scheduler::SetAlarm((ot::InstanceLocator *)a1, a3);
    }

    else
    {
      ot::LinkedList<ot::Timer>::Remove(a1, (uint64_t)a2);
      IgnoreError();
    }

    return ot::LinkedListEntry<ot::Timer>::SetNext((uint64_t)a2, (uint64_t)a2);
  }

  return result;
}

uint64_t ot::LinkedList<ot::Timer>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Timer>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::Timer>::end()
{
  return v1;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_5TimerENS_10LinkedListIS1_E8IteratorEEneERKS4_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_5TimerENS_10LinkedListIS1_E8IteratorEEdeEv(a1);
}

uint64_t ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Timer>::Iterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorINS_5TimerENS_10LinkedListIS1_E8IteratorEEppEv(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Timer>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE4PushERS1_(a1, a2);
}

uint64_t ot::Timer::Scheduler::SetAlarm(ot::InstanceLocator *a1, uint64_t a2)
{
  int v14 = a1;
  uint64_t v13 = a2;
  if (ot::LinkedList<ot::Timer>::IsEmpty(a1))
  {
    int v9 = *(uint64_t (**)(void *))(v13 + 8);
    Instance  = ot::InstanceLocator::GetInstance(a1);
    return v9(Instance);
  }

  else
  {
    Head  = ot::LinkedList<ot::Timer>::GetHead((uint64_t)a1);
    int v4 = (*(uint64_t (**)(void))(v13 + 16))();
    ot::Time::Time((ot::Time *)&v11, v4);
    else {
      unsigned int v8 = 0;
    }
    int v6 = *(uint64_t (**)(void *, uint64_t, void))v13;
    uint64_t v7 = ot::InstanceLocator::GetInstance(a1);
    uint64_t Value = ot::Time::GetValue((ot::Time *)&v11);
    return v6(v7, Value, v8);
  }

uint64_t ot::LinkedList<ot::Timer>::PushAfter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Next  = ot::LinkedListEntry<ot::Timer>::GetNext(a3);
  ot::LinkedListEntry<ot::Timer>::SetNext(a2, Next);
  return ot::LinkedListEntry<ot::Timer>::SetNext(a3, a2);
}

{
  return __ZN2ot10LinkedListINS_5TimerEE9PushAfterERS1_S3_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Timer>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE7GetHeadEv(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Timer>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE3PopEv(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Remove(uint64_t *a1, uint64_t a2)
{
  v5[2]  = (uint64_t)a1;
  v5[1]  = a2;
  unsigned int v4 = ot::LinkedList<ot::Timer>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Timer>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE6RemoveERKS1_(a1, a2);
}

uint64_t ot::LinkedListEntry<ot::Timer>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_5TimerEE7SetNextEPS1_(result, a2);
}

BOOL ot::LinkedList<ot::Timer>::IsEmpty(void *a1)
{
  return *a1 == 0LL;
}

{
  return __ZNK2ot10LinkedListINS_5TimerEE7IsEmptyEv(a1);
}

uint64_t ot::Timer::Scheduler::ProcessTimers(ot::InstanceLocator *a1, uint64_t a2)
{
  unsigned int v8 = a1;
  uint64_t v7 = a2;
  Head  = (ot::Timer *)ot::LinkedList<ot::Timer>::GetHead((uint64_t)a1);
  if (!Head) {
    return ot::Timer::Scheduler::SetAlarm(a1, v7);
  }
  int v2 = (*(uint64_t (**)(void))(v7 + 16))();
  ot::Time::Time((ot::Time *)&v5, v2);
  ot::Timer::Scheduler::Remove((uint64_t *)a1, Head, v7);
  return ot::Timer::Fired((uint64_t (**)(void))Head);
}

uint64_t ot::Timer::Fired(uint64_t (**this)(void))
{
  return (*this)();
}

{
  return __ZN2ot5Timer5FiredEv(this);
}

uint64_t ot::Timer::Scheduler::RemoveAll(uint64_t *a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = ot::LinkedList<ot::Timer>::Pop(a1);
    if (!v4) {
      break;
    }
    ot::LinkedListEntry<ot::Timer>::SetNext(v4, v4);
  }

  return ot::Timer::Scheduler::SetAlarm((ot::InstanceLocator *)a1, a2);
}

uint64_t otPlatAlarmMilliFired(uint64_t a1)
{
  uint64_t result = otInstanceIsInitialized(a1);
  if ((result & 1) != 0)
  {
    ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::TimerMilli::Scheduler *)ot::Instance::Get<ot::TimerMilli::Scheduler>(v2);
    return ot::TimerMilli::Scheduler::ProcessTimers(v3);
  }

  return result;
}

uint64_t ot::TimerMilli::Scheduler::ProcessTimers(ot::TimerMilli::Scheduler *this)
{
  return ot::Timer::Scheduler::ProcessTimers(this, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return __ZN2ot10TimerMilli9Scheduler13ProcessTimersEv(this);
}

uint64_t ot::TimerMicro::Start(ot::TimerMicro *this, unsigned int a2)
{
  int Now = ot::TimerMicro::GetNow(this);
  return ot::TimerMicro::StartAt(this, Now, a2);
}

uint64_t ot::TimerMicro::StartAt(ot::InstanceLocator *a1, int a2, unsigned int a3)
{
  int v6 = a2;
  if (a3 > 0x7FFFFFFF) {
    __assert_rtn("StartAt", "timer.cpp", 226, "aDelay <= kMaxDelay");
  }
  int v5 = ot::Time::operator+(&v6, a3);
  return ot::TimerMicro::FireAt(a1, v5);
}

uint64_t ot::TimerMicro::GetNow(ot::TimerMicro *this)
{
  int Now = otPlatAlarmMicroGetNow();
  ot::Time::Time((ot::Time *)&v3, Now);
  return v3;
}

{
  return __ZN2ot10TimerMicro6GetNowEv(this);
}

uint64_t ot::TimerMicro::FireAt(ot::InstanceLocator *a1, int a2)
{
  *((_DWORD *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  uint64_t v2 = (ot::TimerMicro::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(a1);
  return ot::TimerMicro::Scheduler::Add(v2, a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::TimerMicro::Scheduler>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_10TimerMicro9SchedulerEEERT_v(a1);
}

uint64_t ot::TimerMicro::Scheduler::Add(ot::TimerMicro::Scheduler *this, ot::TimerMicro *a2)
{
  return ot::Timer::Scheduler::Add((uint64_t *)this, a2, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return __ZN2ot10TimerMicro9Scheduler3AddERS0_(this, a2);
}

uint64_t ot::TimerMicro::Stop(ot::TimerMicro *this)
{
  uint64_t v1 = (ot::TimerMicro::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(this);
  return ot::TimerMicro::Scheduler::Remove(v1, this);
}

uint64_t ot::TimerMicro::Scheduler::Remove(ot::TimerMicro::Scheduler *this, ot::TimerMicro *a2)
{
  return ot::Timer::Scheduler::Remove((uint64_t *)this, a2, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return __ZN2ot10TimerMicro9Scheduler6RemoveERS0_(this, a2);
}

uint64_t ot::TimerMicro::RemoveAll(ot::TimerMicro *this, ot::Instance *a2)
{
  uint64_t v2 = (ot::TimerMicro::Scheduler *)ot::Instance::Get<ot::TimerMicro::Scheduler>((uint64_t)this);
  return ot::TimerMicro::Scheduler::RemoveAll(v2);
}

uint64_t ot::Instance::Get<ot::TimerMicro::Scheduler>(uint64_t a1)
{
  return a1 + 24;
}

{
  return __ZN2ot8Instance3GetINS_10TimerMicro9SchedulerEEERT_v(a1);
}

uint64_t ot::TimerMicro::Scheduler::RemoveAll(ot::TimerMicro::Scheduler *this)
{
  return ot::Timer::Scheduler::RemoveAll((uint64_t *)this, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return __ZN2ot10TimerMicro9Scheduler9RemoveAllEv(this);
}

uint64_t otPlatAlarmMicroFired(uint64_t a1)
{
  uint64_t result = otInstanceIsInitialized(a1);
  if ((result & 1) != 0)
  {
    ot::AsCoreType<otInstance>(a1);
    unsigned int v3 = (ot::TimerMicro::Scheduler *)ot::Instance::Get<ot::TimerMicro::Scheduler>(v2);
    return ot::TimerMicro::Scheduler::ProcessTimers(v3);
  }

  return result;
}

uint64_t ot::TimerMicro::Scheduler::ProcessTimers(ot::TimerMicro::Scheduler *this)
{
  return ot::Timer::Scheduler::ProcessTimers(this, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return __ZN2ot10TimerMicro9Scheduler13ProcessTimersEv(this);
}

uint64_t ot::LinkedList<ot::Timer>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Timer>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE8Iterator7AdvanceEv(a1);
}

uint64_t ot::LinkedListEntry<ot::Timer>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

{
  return *(void *)(a1 + 16);
}

{
  return __ZN2ot15LinkedListEntryINS_5TimerEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_5TimerEE7GetNextEv(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ot::LinkedList<ot::Timer>::Find(v3, a2, a3);
}

{
  return __ZN2ot10LinkedListINS_5TimerEE4FindERKS1_RPS1_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Timer>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Timer>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Timer>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Timer>::GetNext(Next);
    ot::LinkedListEntry<ot::Timer>::SetNext(a2, v2);
  }

  return Next;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_5TimerEE8PopAfterEPS1_(a1, a2);
}

uint64_t ot::LinkedList<ot::Timer>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0LL;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Timer>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }

  return v5;
}

{
  return __ZNK2ot10LinkedListINS_5TimerEE4FindERKS1_RPS3_(a1, a2, a3);
}

uint64_t ot::Tlv::ReadUintTlv<unsigned char>(ot::Tlv *a1, unsigned __int16 a2, _BYTE *a3)
{
  Tlvuint64_t Value = ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, (uint64_t)a3, (void *)1);
  if (!TlvValue) {
    *a3  = ot::Encoding::BigEndian::HostSwap<unsigned char>(*a3);
  }
  return TlvValue;
}

{
  return __ZN2ot3Tlv11ReadUintTlvIhEE7otErrorRKNS_7MessageEtRT_(a1, a2, a3);
}

uint64_t ot::Tlv::ReadTlvValue(ot::Tlv *this, const ot::Message *a2, uint64_t a3, void *a4)
{
  int v11 = this;
  __int16 v10 = (__int16)a2;
  *(void *)&v9[1]  = a3;
  v9[0]  = (_BYTE)a4;
  unsigned int v8 = ot::Tlv::ParsedInfo::ParseFrom((ot::Tlv::ParsedInfo *)v5, this, (unsigned __int16)a2);
  if (!v8)
  {
    else {
      return 6;
    }
  }

  return v8;
}

uint64_t ot::Encoding::BigEndian::HostSwap<unsigned char>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot8Encoding9BigEndian8HostSwapIhEET_S3_(result);
}

uint64_t ot::Tlv::ReadUintTlv<unsigned short>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  Tlvuint64_t Value = ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, (uint64_t)a3, (void *)2);
  if (!TlvValue) {
    *a3  = ot::Encoding::BigEndian::HostSwap<unsigned short>(*a3);
  }
  return TlvValue;
}

{
  return __ZN2ot3Tlv11ReadUintTlvItEE7otErrorRKNS_7MessageEtRT_(a1, a2, a3);
}

uint64_t ot::Encoding::BigEndian::HostSwap<unsigned short>(unsigned __int16 a1)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a1);
}

{
  return __ZN2ot8Encoding9BigEndian8HostSwapItEET_S3_(a1);
}

uint64_t ot::Tlv::ReadUintTlv<unsigned int>(ot::Tlv *a1, unsigned __int16 a2, unsigned int *a3)
{
  Tlvuint64_t Value = ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, (uint64_t)a3, (void *)4);
  if (!TlvValue) {
    *a3  = ot::Encoding::BigEndian::HostSwap<unsigned int>(*a3);
  }
  return TlvValue;
}

{
  return __ZN2ot3Tlv11ReadUintTlvIjEE7otErrorRKNS_7MessageEtRT_(a1, a2, a3);
}

uint64_t ot::Encoding::BigEndian::HostSwap<unsigned int>(unsigned int a1)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a1);
}

{
  return __ZN2ot8Encoding9BigEndian8HostSwapIjEET_S3_(a1);
}

uint64_t ot::Tlv::FindUintTlv<unsigned char>( ot::Tlv *a1, unsigned __int8 a2, _BYTE *a3, unsigned __int16 *a4)
{
  int v9 = a1;
  unsigned __int8 v8 = a2;
  unsigned __int16 v7 = a3;
  TlvOffset  = 0;
  TlvOffset  = ot::Tlv::FindTlvOffset(a1, (const ot::Message *)a2, &v5, a4);
  if (!TlvOffset) {
    return ot::Tlv::ReadUintTlv<unsigned char>(v9, v5, v7);
  }
  return TlvOffset;
}

{
  return __ZN2ot3Tlv11FindUintTlvIhEE7otErrorRKNS_7MessageEhRT_(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlvOffset(ot::Tlv *this, const ot::Message *a2, _WORD *a3, unsigned __int16 *a4)
{
  __int16 v10 = this;
  char v9 = (char)a2;
  unsigned __int8 v8 = a3;
  unsigned int v7 = ot::Tlv::ParsedInfo::FindIn((ot::Tlv::ParsedInfo *)v5, this, a2);
  if (!v7) {
    *unsigned __int8 v8 = v6;
  }
  return v7;
}

uint64_t ot::Tlv::FindUintTlv<unsigned short>( ot::Tlv *a1, unsigned __int8 a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  char v9 = a1;
  unsigned __int8 v8 = a2;
  unsigned int v7 = a3;
  TlvOffset  = 0;
  TlvOffset  = ot::Tlv::FindTlvOffset(a1, (const ot::Message *)a2, &v5, a4);
  if (!TlvOffset) {
    return ot::Tlv::ReadUintTlv<unsigned short>(v9, v5, v7);
  }
  return TlvOffset;
}

{
  return __ZN2ot3Tlv11FindUintTlvItEE7otErrorRKNS_7MessageEhRT_(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindUintTlv<unsigned int>( ot::Tlv *a1, unsigned __int8 a2, unsigned int *a3, unsigned __int16 *a4)
{
  char v9 = a1;
  unsigned __int8 v8 = a2;
  unsigned int v7 = a3;
  TlvOffset  = 0;
  TlvOffset  = ot::Tlv::FindTlvOffset(a1, (const ot::Message *)a2, &v5, a4);
  if (!TlvOffset) {
    return ot::Tlv::ReadUintTlv<unsigned int>(v9, v5, v7);
  }
  return TlvOffset;
}

{
  return __ZN2ot3Tlv11FindUintTlvIjEE7otErrorRKNS_7MessageEhRT_(a1, a2, a3, a4);
}

uint64_t ot::Tlv::AppendUintTlv<unsigned char>(uint64_t a1, char a2, unsigned __int8 a3)
{
  *(void *)&v5[1]  = a1;
  v5[0]  = a2;
  v4[1]  = a3;
  v4[0]  = ot::Encoding::BigEndian::HostSwap<unsigned char>(a3);
  return ot::Tlv::AppendTlv(*(ot::Tlv **)&v5[1], (ot::Message *)v5[0], v4, (const void *)1);
}

{
  return __ZN2ot3Tlv13AppendUintTlvIhEE7otErrorRNS_7MessageEhT_(a1, a2, a3);
}

uint64_t ot::Tlv::AppendTlv(ot::Tlv *this, ot::Message *a2, void *a3, const void *a4)
{
  __int16 v10 = this;
  char v9 = (char)a2;
  unsigned __int8 v8 = a3;
  unsigned __int8 v7 = a4;
  unsigned int v6 = 0;
  ot::Tlv::SetType(v5, v9);
  ot::Tlv::SetLength((uint64_t)v5, v7);
  unsigned int v6 = ot::Message::Append<ot::Tlv>(v10, v5);
  if (!v6 && v7) {
    return ot::Message::AppendBytes(v10, (char *)v8, v7);
  }
  return v6;
}

uint64_t ot::Tlv::AppendUintTlv<unsigned short>(uint64_t a1, char a2, unsigned __int16 a3)
{
  *(void *)&v5[1]  = a1;
  v5[0]  = a2;
  v4[1]  = a3;
  v4[0]  = ot::Encoding::BigEndian::HostSwap<unsigned short>(a3);
  return ot::Tlv::AppendTlv(*(ot::Tlv **)&v5[1], (ot::Message *)v5[0], v4, (const void *)2);
}

{
  return __ZN2ot3Tlv13AppendUintTlvItEE7otErrorRNS_7MessageEhT_(a1, a2, a3);
}

uint64_t ot::Tlv::AppendUintTlv<unsigned int>(ot::Tlv *a1, unsigned __int8 a2, unsigned int a3)
{
  unsigned int v6 = a1;
  unsigned __int8 v5 = a2;
  v4[1]  = a3;
  v4[0]  = ot::Encoding::BigEndian::HostSwap<unsigned int>(a3);
  return ot::Tlv::AppendTlv(v6, (ot::Message *)v5, v4, (const void *)4);
}

{
  return __ZN2ot3Tlv13AppendUintTlvIjEE7otErrorRNS_7MessageEhT_(a1, a2, a3);
}

uint64_t ot::Tlv::GetSize(ot::Tlv *this)
{
  if (!ot::Tlv::IsExtended(this)) {
    return ot::Tlv::GetLength(this) + 2LL;
  }
  ot::As<ot::ExtendedTlv>();
  return (unsigned __int16)ot::ExtendedTlv::GetLength(v1) + 4LL;
}

BOOL ot::Tlv::IsExtended(ot::Tlv *this)
{
  return *((unsigned __int8 *)this + 1) == 255;
}

  ;
}

{
  return __ZNK2ot3Tlv10IsExtendedEv(this);
}

uint64_t ot::ExtendedTlv::GetLength(ot::ExtendedTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot11ExtendedTlv9GetLengthEv(this);
}

uint64_t ot::Tlv::GetValue(ot::Tlv *this)
{
  IsExtended  = ot::Tlv::IsExtended(this);
  uint64_t v2 = 4LL;
  if (!IsExtended) {
    uint64_t v2 = 2LL;
  }
  return (uint64_t)this + v2;
}

{
  BOOL IsExtended;
  uint64_t v2;
  IsExtended  = ot::Tlv::IsExtended(this);
  uint64_t v2 = 4LL;
  if (!IsExtended) {
    uint64_t v2 = 2LL;
  }
  return (uint64_t)this + v2;
}

uint64_t ot::Tlv::AppendTo(ot::Tlv *this, ot::Message *a2)
{
  Size  = ot::Tlv::GetSize(this);
  return ot::Message::AppendBytes(a2, (char *)this, Size);
}

uint64_t ot::Tlv::FindTlv(ot::Tlv *this, const ot::Message *a2, unsigned __int16 a3, void *a4, ot::Tlv *a5)
{
  uint64_t v13 = this;
  char v12 = (char)a2;
  unsigned __int16 v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = ot::Tlv::ParsedInfo::FindIn((ot::Tlv::ParsedInfo *)v6, this, a2);
  if (!v9)
  {
    ot::Message::ReadBytes(v13, v7, (char *)v10, v11);
  }

  return v9;
}

uint64_t ot::Tlv::ParsedInfo::FindIn(ot::Tlv::ParsedInfo *this, const ot::Message *a2, unsigned __int8 a3)
{
  unsigned int v7 = 23;
  Offset  = ot::Message::GetOffset(a2);
  for (int i = ot::Tlv::ParsedInfo::ParseFrom(this, a2, Offset); !i; int i = ot::Tlv::ParsedInfo::ParseFrom(this, a2, Offset))
  {
    Offset += *((_WORD *)this + 4);
  }

  return v7;
}

uint64_t ot::Tlv::FindTlvValueOffset( ot::Tlv *this, const ot::Message *a2, _WORD *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v13 = this;
  char v12 = (char)a2;
  unsigned __int16 v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = ot::Tlv::ParsedInfo::FindIn((ot::Tlv::ParsedInfo *)v6, this, a2);
  if (!v9)
  {
    *unsigned __int16 v11 = v8;
    *__int16 v10 = v7;
  }

  return v9;
}

uint64_t ot::Tlv::ParsedInfo::ParseFrom( ot::Tlv::ParsedInfo *this, const ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v13 = this;
  char v12 = a2;
  unsigned __int16 v11 = a3;
  unsigned int v10 = ot::Message::Read<ot::Tlv>(a2, a3, v9);
  if (!v10)
  {
    if (ot::Tlv::IsExtended((ot::Tlv *)v9))
    {
      unsigned int v10 = ot::Message::Read<ot::ExtendedTlv>(v12, v11, v8);
      if (v10) {
        return v10;
      }
      *(_BYTE *)this  = ot::Tlv::GetType((ot::Tlv *)v8);
      *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = ot::ExtendedTlv::GetLength((ot::ExtendedTlv *)v8);
      unsigned __int16 v7 = 4;
    }

    else
    {
      *(_BYTE *)this  = ot::Tlv::GetType((ot::Tlv *)v9);
      *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = ot::Tlv::GetLength((ot::Tlv *)v9);
      unsigned __int16 v7 = 2;
    }

    int v5 = *((unsigned __int16 *)this + 1);
    unsigned __int16 Length = ot::Message::GetLength(v12);
    if (v5 <= Length - v11 - v7)
    {
      *(_BYTE *)this  = ot::Tlv::GetType((ot::Tlv *)v9);
      *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v11;
      *((_WORD *)this + 3)  = v11 + v7;
      *((_WORD *)this + ++*(_WORD *)(this + 4) = *((_WORD *)this + 1) + v7;
    }

    else
    {
      return 6;
    }
  }

  return v10;
}

uint64_t ot::Message::Read<ot::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return __ZNK2ot7Message4ReadINS_3TlvEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Tlv::GetType(ot::Tlv *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Tlv7GetTypeEv(this);
}

uint64_t ot::Message::Read<ot::ExtendedTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadINS_11ExtendedTlvEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Tlv::ReadStringTlv(ot::Tlv *this, const ot::Message *a2, unsigned __int8 a3, void *a4, char *a5)
{
  int v14 = this;
  __int16 v13 = (__int16)a2;
  unsigned __int8 v12 = a3;
  unsigned __int16 v11 = a4;
  unsigned int v10 = 0;
  unsigned int v10 = ot::Tlv::ParsedInfo::ParseFrom((ot::Tlv::ParsedInfo *)v7, this, (unsigned __int16)a2);
  if (!v10)
  {
    unsigned __int16 v6 = ot::Min<unsigned short>(v8, v12);
    ot::Message::ReadBytes(v14, v9, (char *)v11, v6);
    *((_BYTE *)v11 + v6)  = 0;
  }

  return v10;
}

uint64_t ot::Tlv::FindStringTlv( ot::Tlv *this, const ot::Message *a2, unsigned __int8 a3, unsigned __int16 *a4, char *a5)
{
  unsigned int v10 = this;
  char v9 = (char)a2;
  unsigned __int8 v8 = a3;
  *(void *)&v7[3]  = a4;
  *(_DWORD *)&v7[1]  = 0;
  *(_DWORD *)&v7[1]  = ot::Tlv::FindTlvOffset(this, (const ot::Message *)a2, v7, a4);
  if (!*(_DWORD *)&v7[1]) {
    *(_DWORD *)&v7[1]  = ot::Tlv::ReadStringTlv(v10, (const ot::Message *)v7[0], v8, *(void **)&v7[3], v5);
  }
  return *(unsigned int *)&v7[1];
}

uint64_t ot::Tlv::FindTlv(ot::Tlv *this, const ot::Message *a2, uint64_t a3, void *a4, unsigned __int16 *a5)
{
  unsigned int v10 = this;
  v9[16]  = (_BYTE)a2;
  *(void *)&v9[1]  = a3;
  v9[0]  = (_BYTE)a4;
  TlvValueOffset  = ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)a2, &v7, &v6, a5);
  if (!TlvValueOffset)
  {
    else {
      return 6;
    }
  }

  return TlvValueOffset;
}

uint64_t ot::Tlv::AppendStringTlv(ot::Tlv *this, ot::Message *a2, unsigned __int8 a3, ot *a4, const char *a5)
{
  unsigned __int8 v8 = a2;
  if (a4) {
    unsigned __int8 v6 = ot::StringLength(a4, (const char *)a3);
  }
  else {
    unsigned __int8 v6 = 0;
  }
  return ot::Tlv::AppendTlv(this, (ot::Message *)v8, a4, (const void *)v6);
}

uint64_t ot::Message::Append<ot::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_3TlvEEE7otErrorRKT_(a1, a2);
}

ot::TrickleTimer *ot::TrickleTimer::TrickleTimer( ot::TrickleTimer *this, ot::Instance *a2, void (*a3)(ot::TrickleTimer *))
{
  uint64_t result = this;
  *((_DWORD *)this + 6)  = 0;
  *((_DWORD *)this + 7)  = 0;
  *((_DWORD *)this + 8)  = 0;
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = 0;
  *((_WORD *)this + 20)  = 0;
  *((_WORD *)this + 2ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((void *)this + 6)  = a3;
  *((_BYTE *)this + 56)  = 0;
  *((_BYTE *)this + 57)  = 0;
  return result;
}

{
  ot::TrickleTimer::TrickleTimer(this, a2, a3);
  return this;
}

uint64_t ot::TrickleTimer::HandleTimer(ot::TrickleTimer *this, ot::Timer *a2)
{
  return ot::TrickleTimer::HandleTimer(this);
}

uint64_t ot::TrickleTimer::Start(uint64_t a1, char a2, unsigned int a3, unsigned int a4, __int16 a5)
{
  BOOL v7 = 0;
  if (a4 >= a3) {
    BOOL v7 = a3 != 0;
  }
  if (!v7) {
    __assert_rtn("Start", "trickle_timer.cpp", 58, "(aIntervalMax >= aIntervalMin) && (aIntervalMin > 0)");
  }
  *(_DWORD *)(a1 + 2++*(_WORD *)(this + 4) = a3;
  *(_DWORD *)(a1 + 28)  = a4;
  *(_WORD *)(a1 + 40)  = a5;
  *(_BYTE *)(a1 + 56)  = a2;
  *(_DWORD *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Random::NonCrypto::GetUint32InRange( (ot::Random::NonCrypto *)*(unsigned int *)(a1 + 24),  *(_DWORD *)(a1 + 28) + 1);
  return ot::TrickleTimer::StartNewInterval((ot::TrickleTimer *)a1);
}

uint64_t ot::TrickleTimer::StartNewInterval(ot::TrickleTimer *this)
{
  if (*((_BYTE *)this + 56))
  {
    if (*((_BYTE *)this + 56) == 1) {
      *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = *((_DWORD *)this + 8);
    }
  }

  else
  {
    if (*((_DWORD *)this + 8) / 2u >= *((_DWORD *)this + 8)) {
      Uint32InRange  = *((_DWORD *)this + 8) / 2u;
    }
    else {
      Uint32InRange  = ot::Random::NonCrypto::GetUint32InRange( (ot::Random::NonCrypto *)(*((_DWORD *)this + 8) / 2u),  *((_DWORD *)this + 8));
    }
    *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = Uint32InRange;
    *((_WORD *)this + 2ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
    *((_BYTE *)this + 57)  = 0;
  }

  return ot::TimerMilli::Start(this, *((_DWORD *)this + 9));
}

uint64_t ot::TrickleTimer::IndicateConsistent(uint64_t this)
{
  return this;
}

uint64_t ot::TrickleTimer::IndicateInconsistent(uint64_t this)
{
  uint64_t v1 = (ot::TrickleTimer *)this;
  if (!*(_BYTE *)(this + 56))
  {
    this  = ot::TrickleTimer::IsRunning((ot::TrickleTimer *)this);
    if ((this & 1) != 0 && *((_DWORD *)v1 + 8) != *((_DWORD *)v1 + 6))
    {
      *((_DWORD *)v1 + 8)  = *((_DWORD *)v1 + 6);
      return ot::TrickleTimer::StartNewInterval(v1);
    }
  }

  return this;
}

BOOL ot::TrickleTimer::IsRunning(ot::TrickleTimer *this)
{
  return ot::Timer::IsRunning(this);
}

{
  return __ZNK2ot12TrickleTimer9IsRunningEv(this);
}

uint64_t ot::TrickleTimer::HandleTimer(ot::TrickleTimer *this)
{
  if (*((_BYTE *)this + 56))
  {
    if (*((_BYTE *)this + 56) == 1)
    {
      *((_DWORD *)this + 8)  = ot::Random::NonCrypto::GetUint32InRange( (ot::Random::NonCrypto *)*((unsigned int *)this + 6),  *((_DWORD *)this + 7) + 1);
      ot::TrickleTimer::StartNewInterval(this);
    }

    return (*((uint64_t (**)(void))this + 6))();
  }

  if (!*((_BYTE *)this + 57))
  {
    *((_BYTE *)this + 57)  = 1;
    uint64_t result = ot::TimerMilli::Start(this, *((_DWORD *)this + 8) - *((_DWORD *)this + 9));
    return (*((uint64_t (**)(void))this + 6))();
  }

  if (*((_BYTE *)this + 57) != 1) {
    return (*((uint64_t (**)(void))this + 6))();
  }
  if (*((_DWORD *)this + 8))
  {
    else {
      *((_DWORD *)this + 8) *= 2;
    }
  }

  else
  {
    *((_DWORD *)this + 8)  = 1;
  }

  return ot::TrickleTimer::StartNewInterval(this);
}

uint64_t ot::Crypto::AesCcm::SetKey(ot::Crypto::AesCcm *this, const unsigned __int8 *a2, __int16 a3)
{
  unsigned __int8 v8 = this;
  BOOL v7 = a2;
  __int16 v6 = a3;
  ot::Crypto::Key::Set((uint64_t)v5, a2, a3);
  return ot::Crypto::AesCcm::SetKey(this, (const ot::Crypto::Key *)v5);
}

uint64_t ot::Crypto::AesCcm::SetKey(ot::Crypto::AesCcm *this, const ot::Crypto::Key *a2)
{
  return ot::Crypto::AesEcb::SetKey(this, a2);
}

{
  return __ZN2ot6Crypto6AesCcm6SetKeyERKNS0_3KeyE(this, a2);
}

uint64_t ot::Crypto::AesCcm::SetKey(ot::Crypto::AesCcm *this, const ot::Mac::KeyMaterial *a2)
{
  __int16 v6 = this;
  int v5 = a2;
  ot::Mac::KeyMaterial::ConvertToCryptoKey(a2, (ot::Crypto::Key *)v4);
  return ot::Crypto::AesCcm::SetKey(this, (const ot::Crypto::Key *)v4);
}

void ot::Crypto::AesCcm::Init( ot::Crypto::AesCcm *this, unsigned int a2, unsigned int a3, unsigned __int8 a4, const void *a5, unsigned __int8 a6)
{
  unsigned __int8 v17 = a6;
  unsigned __int8 v14 = 0;
  BOOL v9 = 0;
  if ((a4 & 1) == 0)
  {
    BOOL v9 = 0;
    if (a4 >= 4u) {
      BOOL v9 = a4 <= 0x10u;
    }
  }

  if (!v9) {
    __assert_rtn( "Init",  "aes_ccm.cpp",  74,  "((aTagLength & 0x1) == 0) && (kMinTagLength <= aTagLength) && (aTagLength <= kMaxTagLength)");
  }
  unsigned __int8 v11 = 0;
  for (unsigned int i = a3; i; i >>= 8)
    ++v11;
  if (v11 <= 1u) {
    unsigned __int8 v11 = 2;
  }
  if (a6 > 0xDu) {
    unsigned __int8 v17 = 13;
  }
  if (v11 < 15 - v17) {
    unsigned __int8 v11 = 15 - v17;
  }
  if (v17 > 15 - v11) {
    unsigned __int8 v17 = 15 - v11;
  }
  *((_BYTE *)this + 30++*(_WORD *)(this + 4) = ((a2 != 0) << 6) | (8 * ((a4 - 2) >> 1)) | (v11 - 1);
  memcpy((char *)this + 305, a5, v17);
  unsigned int v13 = a3;
  for (unsigned __int8 j = 15; j > (int)v17; --j)
  {
    *((_BYTE *)this + j + 30++*(_WORD *)(this + 4) = v13;
    v13 >>= 8;
  }

  ot::Crypto::AesEcb::Encrypt(this, (unsigned __int8 *)this + 304, (unsigned __int8 *)this + 304);
  if (a2)
  {
    if (a2 >= 0xFF00)
    {
      *((_BYTE *)this + 30++*(_WORD *)(this + 4) = ~*((_BYTE *)this + 304);
      *((_BYTE *)this + 305) ^= 0xFEu;
      *((_BYTE *)this + 306) ^= HIBYTE(a2);
      unsigned __int8 v14 = 4;
      *((_BYTE *)this + 307) ^= BYTE2(a2);
    }

    uint64_t v6 = v14;
    unsigned __int8 v15 = v14 + 1;
    *((_BYTE *)this + v6 + 304) ^= BYTE1(a2);
    uint64_t v7 = v15;
    unsigned __int8 v14 = v15 + 1;
    *((_BYTE *)this + v7 + 304) ^= a2;
  }

  *((_BYTE *)this + 320)  = v11 - 1;
  memcpy((char *)this + 321, a5, v17);
  bzero((char *)this + v17 + 321, 15LL - v17);
  *((_BYTE *)this + 37ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v17;
  *((_DWORD *)this + 88)  = a2;
  *((_DWORD *)this + 8ot::Mle::Tlv::SetType(this, 9) = 0;
  *((_DWORD *)this + 90)  = a3;
  *((_DWORD *)this + 9ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((_WORD *)this + 18++*(_WORD *)(this + 4) = v14;
  *((_WORD *)this + 185)  = 16;
  *((_BYTE *)this + 373)  = a4;
}

ot::Crypto::AesEcb *ot::Crypto::AesCcm::Header(ot::Crypto::AesEcb *this, _BYTE *a2, unsigned int a3)
{
  int v5 = this;
  if (*((_DWORD *)this + 89) + a3 > *((_DWORD *)this + 88)) {
    __assert_rtn("Header", "aes_ccm.cpp", 165, "mHeaderCur + aHeaderLength <= mHeaderLength");
  }
  for (unsigned int i = 0; i < a3; ++i)
  {
    if (*((_WORD *)v5 + 184) == 16LL)
    {
      this  = (ot::Crypto::AesEcb *)ot::Crypto::AesEcb::Encrypt( v5,  (unsigned __int8 *)v5 + 304,  (unsigned __int8 *)v5 + 304);
      *((_WORD *)v5 + 18++*(_WORD *)(this + 4) = 0;
    }

    char v3 = a2[i];
    uint64_t v4 = (unsigned __int16)(*((_WORD *)v5 + 184))++;
    *((_BYTE *)v5 + v4 + 304) ^= v3;
  }

  *((_DWORD *)v5 + 89) += a3;
  if (*((_DWORD *)v5 + 89) == *((_DWORD *)v5 + 88))
  {
    if (*((_WORD *)v5 + 184)) {
      this  = (ot::Crypto::AesEcb *)ot::Crypto::AesEcb::Encrypt( v5,  (unsigned __int8 *)v5 + 304,  (unsigned __int8 *)v5 + 304);
    }
    *((_WORD *)v5 + 18++*(_WORD *)(this + 4) = 0;
  }

  return this;
}

void ot::Crypto::AesCcm::Payload(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  if (*(_DWORD *)(a1 + 364) + a4 > *(_DWORD *)(a1 + 360)) {
    __assert_rtn("Payload", "aes_ccm.cpp", 199, "mPlainTextCur + aLength <= mPlainTextLength");
  }
  for (unsigned int i = 0; i < a4; ++i)
  {
    if (*(_WORD *)(a1 + 370) == 16)
    {
      for (int j = 15; j > *(unsigned __int8 *)(a1 + 372); --j)
      {
        int v5 = (_BYTE *)(a1 + 320 + j);
        char v6 = *v5 + 1;
        *int v5 = v6;
        if (v6) {
          break;
        }
      }

      ot::Crypto::AesEcb::Encrypt( (ot::Crypto::AesEcb *)a1,  (unsigned __int8 *)(a1 + 320),  (unsigned __int8 *)(a1 + 336));
      *(_WORD *)(a1 + 370)  = 0;
    }

    if (a5)
    {
      char v8 = *(_BYTE *)(a3 + i);
      uint64_t v9 = (unsigned __int16)(*(_WORD *)(a1 + 370))++;
      char v14 = v8 ^ *(_BYTE *)(a1 + 336 + v9);
      *(_BYTE *)(a2 + i)  = v14;
    }

    else
    {
      char v14 = *(_BYTE *)(a2 + i);
      uint64_t v7 = (unsigned __int16)(*(_WORD *)(a1 + 370))++;
      *(_BYTE *)(a3 + i)  = v14 ^ *(_BYTE *)(a1 + 336 + v7);
    }

    if (*(_WORD *)(a1 + 368) == 16LL)
    {
      ot::Crypto::AesEcb::Encrypt( (ot::Crypto::AesEcb *)a1,  (unsigned __int8 *)(a1 + 304),  (unsigned __int8 *)(a1 + 304));
      *(_WORD *)(a1 + 368)  = 0;
    }

    uint64_t v10 = (unsigned __int16)(*(_WORD *)(a1 + 368))++;
    *(_BYTE *)(a1 + 304 + v10) ^= v14;
  }

  *(_DWORD *)(a1 + 364) += a4;
  if (*(_DWORD *)(a1 + 364) >= *(_DWORD *)(a1 + 360))
  {
    if (*(_WORD *)(a1 + 368)) {
      ot::Crypto::AesEcb::Encrypt( (ot::Crypto::AesEcb *)a1,  (unsigned __int8 *)(a1 + 304),  (unsigned __int8 *)(a1 + 304));
    }
    bzero((void *)(a1 + 320 + *(unsigned __int8 *)(a1 + 372) + 1), 15LL - *(unsigned __int8 *)(a1 + 372));
  }

uint64_t ot::Crypto::AesCcm::Payload( uint64_t a1, ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4, char a5)
{
  uint64_t v18 = a1;
  unsigned __int8 v17 = a2;
  v16[1]  = a3;
  v16[0]  = a4;
  char v15 = a5;
  ot::Message::GetFirstChunk(a2, a3, v16, (ot::Message::MutableChunk *)v14);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    char v7 = v6 | ((unsigned __int16)result == 0);
    if ((v7 & 1) != 0) {
      break;
    }
    ot::Message::MutableChunk::GetBytes((ot::Message::MutableChunk *)v14);
    uint64_t v11 = v8;
    ot::Message::MutableChunk::GetBytes((ot::Message::MutableChunk *)v14);
    uint64_t v12 = v9;
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    ot::Crypto::AesCcm::Payload(a1, v11, v12, Length, v15);
    ot::Message::GetNextChunk(v17, v16, (ot::Message::MutableChunk *)v14);
  }

  return result;
}

uint64_t ot::Crypto::AesCcm::Finalize(ot::Crypto::AesCcm *this, _BYTE *a2)
{
  if (*((_DWORD *)this + 91) != *((_DWORD *)this + 90)) {
    __assert_rtn("Finalize", "aes_ccm.cpp", 270, "mPlainTextCur == mPlainTextLength");
  }
  uint64_t result = ot::Crypto::AesEcb::Encrypt(this, (unsigned __int8 *)this + 320, (unsigned __int8 *)this + 336);
  return result;
}

uint64_t ot::Crypto::AesCcm::GenerateNonce( ot::Crypto::AesCcm *this, const ot::Mac::ExtAddress *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  char v7 = (char)a3;
  *(void *)a4  = *(void *)this;
  *(void *)char v6 = a4 + 8;
  uint64_t result = ot::Encoding::BigEndian::WriteUint32(a2, (_BYTE *)(a4 + 8), a3);
  *(_BYTE *)(*(void *)v6 + 4LL)  = v7;
  return result;
}

ot::Crypto::AesEcb *ot::Crypto::AesEcb::AesEcb(ot::Crypto::AesEcb *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 288;
  return this;
}

{
  ot::Crypto::AesEcb::AesEcb(this);
  return this;
}

uint64_t ot::Crypto::AesEcb::SetKey(ot::Crypto::AesEcb *this, const ot::Crypto::Key *a2)
{
  uint64_t result = j__otPlatCryptoAesSetKey((uint64_t)this, a2);
  if ((_DWORD)result) {
    __assert_rtn("SetKey", "aes_ecb.cpp", 48, "false");
  }
  return result;
}

uint64_t ot::Crypto::AesEcb::Encrypt(ot::Crypto::AesEcb *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = j__otPlatCryptoAesEncrypt((uint64_t)this, a2, (int *)a3);
  if ((_DWORD)result) {
    __assert_rtn("Encrypt", "aes_ecb.cpp", 52, "false");
  }
  return result;
}

void ot::Crypto::AesEcb::~AesEcb(ot::Crypto::AesEcb *this)
{
}

{
  ot::Crypto::AesEcb::~AesEcb(this);
}

ot::Crypto::HkdfSha256 *ot::Crypto::HkdfSha256::HkdfSha256(ot::Crypto::HkdfSha256 *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 32;
  return this;
}

{
  ot::Crypto::HkdfSha256::HkdfSha256(this);
  return this;
}

void ot::Crypto::HkdfSha256::~HkdfSha256(ot::Crypto::HkdfSha256 *this)
{
}

{
  ot::Crypto::HkdfSha256::~HkdfSha256(this);
}

uint64_t ot::Crypto::HkdfSha256::Extract( ot::Crypto::HkdfSha256 *this, const unsigned __int8 *a2, __int16 a3, const ot::Crypto::Key *a4)
{
  uint64_t result = j__otPlatCryptoHkdfExtract((uint64_t)this, a2, a3, a4);
  if ((_DWORD)result) {
    __assert_rtn("Extract", "hkdf_sha256.cpp", 57, "false");
  }
  return result;
}

uint64_t ot::Crypto::HkdfSha256::Expand( ot::Crypto::HkdfSha256 *this, const unsigned __int8 *a2, unsigned __int16 a3, char *a4, unsigned __int16 a5)
{
  uint64_t result = j__otPlatCryptoHkdfExpand((uint64_t)this, (uint64_t)a2, a3, a4, a5);
  if ((_DWORD)result) {
    __assert_rtn("Expand", "hkdf_sha256.cpp", 62, "false");
  }
  return result;
}

ot::Crypto::HmacSha256 *ot::Crypto::HmacSha256::HmacSha256(ot::Crypto::HmacSha256 *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 24;
  return this;
}

{
  ot::Crypto::HmacSha256::HmacSha256(this);
  return this;
}

void ot::Crypto::HmacSha256::~HmacSha256(ot::Crypto::HmacSha256 *this)
{
}

{
  ot::Crypto::HmacSha256::~HmacSha256(this);
}

uint64_t ot::Crypto::HmacSha256::Start(ot::Crypto::HmacSha256 *this, const ot::Crypto::Key *a2)
{
  uint64_t result = j__otPlatCryptoHmacSha256Start((uint64_t)this, a2);
  if ((_DWORD)result) {
    __assert_rtn("Start", "hmac_sha256.cpp", 52, "false");
  }
  return result;
}

uint64_t ot::Crypto::HmacSha256::Update(ot::Crypto::HmacSha256 *this, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result = j__otPlatCryptoHmacSha256Update((uint64_t)this, a2, a3);
  if ((_DWORD)result) {
    __assert_rtn("Update", "hmac_sha256.cpp", 56, "false");
  }
  return result;
}

uint64_t ot::Crypto::HmacSha256::Finish(ot::Crypto::HmacSha256 *this, ot::Crypto::Sha256::Hash *a2)
{
  uint64_t result = j__otPlatCryptoHmacSha256Finish((uint64_t)this, a2);
  if ((_DWORD)result) {
    __assert_rtn("Finish", "hmac_sha256.cpp", 61, "false");
  }
  return result;
}

uint64_t ot::Crypto::HmacSha256::Update( ot::Crypto::HmacSha256 *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v13 = this;
  uint64_t v12 = a2;
  v11[1]  = a3;
  v11[0]  = a4;
  ot::Message::GetFirstChunk(a2, a3, v11, (ot::Message::Chunk *)v10);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    char v6 = v5 | ((unsigned __int16)result == 0);
    if ((v6 & 1) != 0) {
      break;
    }
    uint64_t Bytes = (void *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v10);
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    ot::Crypto::HmacSha256::Update(this, (uint64_t)Bytes, Length);
    ot::Message::GetNextChunk(v12, v11, (ot::Message::Chunk *)v10);
  }

  return result;
}

ot::Crypto::MbedTls *ot::Crypto::MbedTls::MbedTls(ot::Crypto::MbedTls *this)
{
  return this;
}

{
  ot::Crypto::MbedTls::MbedTls(this);
  return this;
}

uint64_t ot::Crypto::MbedTls::MapError(ot::Crypto::MbedTls *this)
{
  unsigned int v3 = 0;
  switch((_DWORD)this)
  {
    case 0xFFFF8100:
      return 3;
    case 0xFFFF8800:
      return 8;
    case 0xFFFF8F00:
      return 7;
    case 0xFFFF9700:
      return 5;
    case 0xFFFF9780:
      return 3;
    case 0xFFFF9800:
      return 5;
    case 0xFFFFFFC0:
      return 8;
    case 0xFFFFFFC2:
      return 3;
  }

  if ((_DWORD)this == -60 || (_DWORD)this == -61) {
    return 8;
  }
  if ((_DWORD)this == -56 || (_DWORD)this == -54) {
    return 7;
  }
  if ((_DWORD)this == -52 || (_DWORD)this == -30 || (_DWORD)this == -28) {
    return 8;
  }
  return v3;
}

uint64_t ot::Crypto::MbedTls::CryptoSecurePrng( ot::Crypto::MbedTls *this, ot::Random::Crypto *a2, unsigned __int8 *a3)
{
  return 0LL;
}

ot::Crypto::Sha256 *ot::Crypto::Sha256::Sha256(ot::Crypto::Sha256 *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 112;
  return this;
}

{
  ot::Crypto::Sha256::Sha256(this);
  return this;
}

void ot::Crypto::Sha256::~Sha256(ot::Crypto::Sha256 *this)
{
}

{
  ot::Crypto::Sha256::~Sha256(this);
}

uint64_t ot::Crypto::Sha256::Start(ot::Crypto::Sha256 *this)
{
  uint64_t result = j__otPlatCryptoSha256Start((uint64_t)this);
  if ((_DWORD)result) {
    __assert_rtn("Start", "sha256.cpp", 52, "false");
  }
  return result;
}

uint64_t ot::Crypto::Sha256::Update(ot::Crypto::Sha256 *this, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result = j__otPlatCryptoSha256Update((uint64_t)this, a2, a3);
  if ((_DWORD)result) {
    __assert_rtn("Update", "sha256.cpp", 56, "false");
  }
  return result;
}

uint64_t ot::Crypto::Sha256::Update( ot::Crypto::Sha256 *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v13 = this;
  uint64_t v12 = a2;
  v11[1]  = a3;
  v11[0]  = a4;
  ot::Message::GetFirstChunk(a2, a3, v11, (ot::Message::Chunk *)v10);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    char v6 = v5 | ((unsigned __int16)result == 0);
    if ((v6 & 1) != 0) {
      break;
    }
    uint64_t Bytes = (void *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v10);
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    ot::Crypto::Sha256::Update(this, (uint64_t)Bytes, Length);
    ot::Message::GetNextChunk(v12, v11, (ot::Message::Chunk *)v10);
  }

  return result;
}

uint64_t ot::Crypto::Sha256::Finish(ot::Crypto::Sha256 *this, ot::Crypto::Sha256::Hash *a2)
{
  uint64_t result = j__otPlatCryptoSha256Finish((uint64_t)this, a2);
  if ((_DWORD)result) {
    __assert_rtn("Finish", "sha256.cpp", 72, "false");
  }
  return result;
}

uint64_t ot::FactoryDiags::Diags::ProcessChannel( ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  char v15 = this;
  char v14 = a2;
  unsigned int v13 = a3;
  uint64_t v12 = a4;
  __size  = a5;
  unsigned int v10 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (v14)
    {
      unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(*v13, v9, v5);
      if (!v10)
      {
        if (*(uint64_t *)v9 >= 11 && *(uint64_t *)v9 <= 25)
        {
          *((_BYTE *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v9[0];
          char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
          ot::Radio::Receive(v6, *((_BYTE *)this + 32));
          IgnoreError();
          otPlatDiagChannelSet(*((_BYTE *)this + 32));
          snprintf(v12, __size, "set channel to %d\r\nstatus 0x%02x\r\n", *((unsigned __int8 *)this + 32), v10);
        }

        else
        {
          unsigned int v10 = 7;
        }
      }
    }

    else
    {
      snprintf(v12, __size, "channel: %d\r\n", *((unsigned __int8 *)this + 32));
    }
  }

  else
  {
    unsigned int v10 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v10, v12, __size);
  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessPower( ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  char v15 = this;
  char v14 = a2;
  unsigned int v13 = a3;
  uint64_t v12 = a4;
  __size  = a5;
  unsigned int v10 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (v14)
    {
      unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(*v13, v9, v5);
      if (!v10)
      {
        *((_BYTE *)this + 33)  = v9[0];
        char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v10 = ot::Radio::SetTransmitPower(v6, *((_BYTE *)this + 33));
        if (!v10)
        {
          otPlatDiagTxPowerSet(*((_BYTE *)this + 33));
          snprintf(v12, __size, "set tx power to %d dBm\r\nstatus 0x%02x\r\n", *((char *)this + 33), v10);
        }
      }
    }

    else
    {
      snprintf(v12, __size, "tx power: %d dBm\r\n", *((char *)this + 33));
    }
  }

  else
  {
    unsigned int v10 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v10, v12, __size);
  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessRadio( ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v12 = 7;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (a2)
    {
      if (!strcmp(*a3, "sleep"))
      {
        char v5 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v12 = ot::Radio::Sleep(v5);
        if (!v12) {
          snprintf(a4, a5, "set radio from receive to sleep \r\nstatus 0x%02x\r\n", 0);
        }
      }

      else if (!strcmp(*a3, "receive"))
      {
        char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v12 = ot::Radio::Receive(v6, *((_BYTE *)this + 32));
        if (!v12)
        {
          char v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
          unsigned int v12 = ot::Radio::SetTransmitPower(v7, *((_BYTE *)this + 33));
          if (!v12)
          {
            otPlatDiagChannelSet(*((_BYTE *)this + 32));
            otPlatDiagTxPowerSet(*((_BYTE *)this + 33));
            snprintf( a4,  a5,  "set radio from sleep to receive on channel %d\r\nstatus 0x%02x\r\n",  *((unsigned __int8 *)this + 32),  0);
          }
        }
      }

      else if (!strcmp(*a3, "state"))
      {
        uint64_t v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v12 = 0;
        unint64_t State = ot::Radio::GetState(v8);
        if (State <= 3) {
          __asm { BR              X8 }
        }

        snprintf(a4, a5, "invalid\r\n");
      }
    }

    else
    {
      unsigned int v12 = 7;
    }
  }

  else
  {
    unsigned int v12 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v12, a4, a5);
  return v12;
}

uint64_t ot::FactoryDiags::Diags::ProcessLinkRaw( ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v10 = 0;
  if (a2)
  {
    if (!strcmp(*a3, "start"))
    {
      Instance  = ot::InstanceLocator::GetInstance(this);
      unsigned int v10 = otPlatRadioEnable((uint64_t)Instance);
      if (!v10) {
        snprintf(a4, a5, "raw link started\r\n");
      }
    }

    else if (!strcmp(*a3, "stop"))
    {
      ot::InstanceLocator::GetInstance(this);
      unsigned int v10 = otPlatRadioDisable();
      if (!v10) {
        snprintf(a4, a5, "raw link stopped\r\n");
      }
    }

    else
    {
      return 35;
    }
  }

  else
  {
    ot::InstanceLocator::GetInstance(this);
    IsEnabled  = otPlatRadioIsEnabled();
    char v6 = "enabled";
    if (!IsEnabled) {
      char v6 = "disabled";
    }
    snprintf(a4, a5, "raw link is %s\r\n", v6);
  }

  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessRcp( ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, uint64_t a5)
{
  Instance  = ot::InstanceLocator::GetInstance(this);
  return otPlatDiagProcess((uint64_t)Instance, a2, (uint64_t)a3, (uint64_t)a4, a5);
}

uint64_t ot::FactoryDiags::Diags::ProcessRepeat( ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  unsigned __int8 v17 = this;
  char v16 = a2;
  char v15 = a3;
  char v14 = a4;
  size_t v13 = a5;
  unsigned int v12 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (v16)
    {
      if (!strcmp((const char *)*v15, "stop"))
      {
        ot::InstanceLocator::GetInstance(this);
        otPlatAlarmMilliStop();
        *((_BYTE *)this + 35)  = 0;
        snprintf(v14, v13, "repeated packet transmission is stopped\r\nstatus 0x%02x\r\n", v12);
      }

      else if (v16 == 2)
      {
        unsigned int v12 = ot::FactoryDiags::Diags::ParseLong(*v15, v11, v5);
        if (!v12)
        {
          *((_DWORD *)this + 6)  = *(_DWORD *)v11;
          unsigned int v12 = ot::FactoryDiags::Diags::ParseLong(v15[1], v11, v6);
          if (!v12)
          {
            if (*(uint64_t *)v11 <= 127)
            {
              if (*(uint64_t *)v11 >= 3)
              {
                *((_BYTE *)this + 3++*(_WORD *)(this + 4) = v11[0];
                *((_BYTE *)this + 35)  = 1;
                int Now = otPlatAlarmMilliGetNow();
                Instance  = ot::InstanceLocator::GetInstance(this);
                otPlatAlarmMilliStartAt((uint64_t)Instance, Now, *((_DWORD *)this + 6));
                snprintf( v14,  v13,  "sending packets of length %#x at the delay of %#x ms\r\nstatus 0x%02x\r\n",  *((unsigned __int8 *)this + 34),  *((_DWORD *)this + 6),  v12);
              }

              else
              {
                unsigned int v12 = 7;
              }
            }

            else
            {
              unsigned int v12 = 7;
            }
          }
        }
      }

      else
      {
        unsigned int v12 = 7;
      }
    }

    else
    {
      unsigned int v12 = 7;
    }
  }

  else
  {
    unsigned int v12 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v12, v14, v13);
  return v12;
}

uint64_t ot::FactoryDiags::Diags::ProcessSend( ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  char v15 = this;
  char v14 = a2;
  size_t v13 = a3;
  unsigned int v12 = a4;
  size_t v11 = a5;
  unsigned int v10 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (v14 == 2)
    {
      unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(*v13, v9, v5);
      if (!v10)
      {
        *((_DWORD *)this + 7)  = *(_DWORD *)v9;
        unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(v13[1], v9, v6);
        if (!v10)
        {
          if (*(uint64_t *)v9 <= 127)
          {
            if (*(uint64_t *)v9 >= 3)
            {
              *((_BYTE *)this + 3++*(_WORD *)(this + 4) = v9[0];
              snprintf( v12,  v11,  "sending %#x packet(s), length %#x\r\nstatus 0x%02x\r\n",  *((_DWORD *)this + 7),  *((unsigned __int8 *)this + 34),  v10);
              ot::FactoryDiags::Diags::TransmitPacket(this);
            }

            else
            {
              unsigned int v10 = 7;
            }
          }

          else
          {
            unsigned int v10 = 7;
          }
        }
      }
    }

    else
    {
      unsigned int v10 = 7;
    }
  }

  else
  {
    unsigned int v10 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v10, v12, v11);
  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessStart( ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, size_t a5)
{
  char v5 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  if ((ot::ThreadNetif::IsUp(v5) & 1) != 0)
  {
    unsigned int v19 = 13;
  }

  else
  {
    otPlatDiagChannelSet(*((_BYTE *)this + 32));
    otPlatDiagTxPowerSet(*((_BYTE *)this + 33));
    char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::Enable(v6);
    IgnoreError();
    char v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::SetPromiscuous(v7, 1);
    ot::InstanceLocator::GetInstance(this);
    otPlatAlarmMilliStop();
    uint64_t v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v19 = ot::Radio::Receive(v8, *((_BYTE *)this + 32));
    if (!v19)
    {
      uint64_t v9 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned int v19 = ot::Radio::SetTransmitPower(v9, *((_BYTE *)this + 33));
      if (!v19)
      {
        otPlatDiagModeSet(1, v10, v11, v12, v13, v14, v15, v16);
        ot::FactoryDiags::Diags::Stats::Clear((uint64_t)this);
        snprintf(a4, a5, "start diagnostics mode\r\nstatus 0x%02x\r\n", 0);
      }
    }
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v19, a4, a5);
  return v19;
}

uint64_t ot::FactoryDiags::Diags::ProcessStats( ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v7 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (a2 == 1 && !strcmp(*a3, "clear"))
    {
      ot::FactoryDiags::Diags::Stats::Clear((uint64_t)this);
      snprintf(a4, a5, "stats cleared\r\n");
    }

    else if (a2)
    {
      unsigned int v7 = 7;
    }

    else
    {
      snprintf( a4,  a5,  "received packets: %d\r\n sent packets: %d\r\n first received packet: rssi=%d, lqi=%d\r\n last received packet: rssi=%d, lqi=%d\r\n",  *(_DWORD *)this,  *((_DWORD *)this + 1),  *((char *)this + 8),  *((unsigned __int8 *)this + 9),  *((char *)this + 10),  *((unsigned __int8 *)this + 11));
    }
  }

  else
  {
    unsigned int v7 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v7, a4, a5);
  return v7;
}

uint64_t ot::FactoryDiags::Diags::ProcessStop( ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, size_t a5)
{
  unsigned int v15 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    ot::InstanceLocator::GetInstance(this);
    otPlatAlarmMilliStop();
    otPlatDiagModeSet(0, v5, v6, v7, v8, v9, v10, v11);
    uint64_t v12 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::SetPromiscuous(v12, 0);
    snprintf( a4,  a5,  "received packets: %d\r\n sent packets: %d\r\n first received packet: rssi=%d, lqi=%d\r\n last received packet: rssi=%d, lqi=%d\r\n \n stop diagnostics mode\r\n status 0x%02x\r\n",  *(_DWORD *)this,  *((_DWORD *)this + 1),  *((char *)this + 8),  *((unsigned __int8 *)this + 9),  *((char *)this + 10),  *((unsigned __int8 *)this + 11),  0);
  }

  else
  {
    unsigned int v15 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v15, a4, a5);
  return v15;
}

uint64_t ot::FactoryDiags::Diags::ProcessUartDisable( ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  uint64_t v22 = this;
  char v21 = a2;
  uint64_t v20 = a3;
  unsigned int v19 = a4;
  __size  = a5;
  unsigned int v17 = 0;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (v21)
    {
      unsigned int v17 = ot::FactoryDiags::Diags::ParseLong(*v20, v16, v5);
      if (!v17)
      {
        unsigned int v15 = *(_DWORD *)v16;
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v17 = otPlatVendorUartDisableStart((uint64_t)Instance, v15, v7, v8, v9, v10, v11, v12);
        if (!v17) {
          snprintf(v19, __size, " Uart disabled for %d mSec\r\n", v15);
        }
      }
    }

    else
    {
      snprintf(v19, __size, "missing argument for uart renable time in mSec:");
    }
  }

  else
  {
    unsigned int v17 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v17, v19, __size);
  return v17;
}

ot::FactoryDiags::Diags *ot::FactoryDiags::Diags::Diags(ot::FactoryDiags::Diags *this, ot::Instance *a2)
{
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Radio::GetTransmitBuffer(v2);
  *((_DWORD *)this + 6)  = 0;
  *((_DWORD *)this + 7)  = 0;
  *((_BYTE *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 20;
  *((_BYTE *)this + 33)  = 0;
  *((_BYTE *)this + 3++*(_WORD *)(this + 4) = 0;
  *((_BYTE *)this + 35)  = 0;
  *((_BYTE *)this + 36)  = 0;
  ot::FactoryDiags::Diags::Stats::Clear((uint64_t)this);
  return this;
}

{
  ot::FactoryDiags::Diags::Diags(this, a2);
  return this;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Radio>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5RadioEEERT_v(a1);
}

uint64_t ot::Radio::GetTransmitBuffer(ot::Radio *this)
{
  return otPlatRadioGetTransmitBuffer();
}

{
  return __ZN2ot5Radio17GetTransmitBufferEv(this);
}

uint64_t ot::FactoryDiags::Diags::Stats::Clear(uint64_t this)
{
  *(void *)this  = 0LL;
  *(_DWORD *)(this + 8)  = 0;
  return this;
}

{
  return __ZN2ot12FactoryDiags5Diags5Stats5ClearEv(this);
}

uint64_t ot::FactoryDiags::Diags::ParseLong(ot::FactoryDiags::Diags *this, char *a2, uint64_t *a3)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  uint64_t v3 = strtol((const char *)this, &__endptr, 0);
  *(void *)uint64_t v6 = v3;
  if (*__endptr) {
    return 6LL;
  }
  else {
    return 0LL;
  }
}

uint64_t ot::Radio::Receive(ot::Radio *this, unsigned __int8 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioReceive((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio7ReceiveEh(this, a2);
}

uint64_t ot::FactoryDiags::Diags::AppendErrorResult(uint64_t result, char *a2, size_t a3)
{
  if ((_DWORD)result) {
    return snprintf(a2, a3, "failed\r\nstatus %#x\r\n", result);
  }
  return result;
}

uint64_t ot::Radio::SetTransmitPower(ot::Radio *this, char a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetTransmitPower((uint64_t)InstancePtr, a2);
}

{
  return __ZN2ot5Radio16SetTransmitPowerEa(this, a2);
}

void ot::FactoryDiags::Diags::TransmitPacket(ot::FactoryDiags::Diags *this)
{
  *(_WORD *)(*((void *)this + 2) + 8LL)  = *((unsigned __int8 *)this + 34);
  *(_BYTE *)(*((void *)this + 2) + 10LL)  = *((_BYTE *)this + 32);
  *((_BYTE *)this + 36)  = 1;
  uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::Transmit(v1, *((ot::Mac::TxFrame **)this + 2));
  IgnoreError();
}

uint64_t ot::Radio::Enable(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioEnable((uint64_t)InstancePtr);
}

{
  return __ZN2ot5Radio6EnableEv(this);
}

uint64_t ot::Radio::SetPromiscuous(ot::Radio *this, char a2)
{
  char v10 = a2 & 1;
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetPromiscuous((uint64_t)InstancePtr, v10 & 1, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio14SetPromiscuousEb(this, a2);
}

uint64_t ot::Radio::Sleep(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSleep((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio5SleepEv(this);
}

uint64_t ot::Radio::GetState(ot::Radio *this)
{
  return otPlatRadioGetState();
}

{
  return __ZN2ot5Radio8GetStateEv(this);
}

void otPlatDiagAlarmFired(uint64_t a1)
{
  uint64_t v2 = (ot::FactoryDiags::Diags *)ot::Instance::Get<ot::FactoryDiags::Diags>(v1);
  ot::FactoryDiags::Diags::AlarmFired(v2);
}

void ot::FactoryDiags::Diags::AlarmFired(ot::FactoryDiags::Diags *this)
{
  if ((*((_BYTE *)this + 35) & 1) != 0)
  {
    int Now = otPlatAlarmMilliGetNow();
    ot::FactoryDiags::Diags::TransmitPacket(this);
    Instance  = ot::InstanceLocator::GetInstance(this);
    otPlatAlarmMilliStartAt((uint64_t)Instance, Now, *((_DWORD *)this + 6));
  }

  else
  {
    ot::InstanceLocator::GetInstance(this);
    otPlatDiagAlarmCallback();
  }

void ot::FactoryDiags::Diags::ReceiveDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    if (!*(_DWORD *)a1)
    {
      *((_BYTE *)a1 + 8)  = *(_BYTE *)(a2 + 29);
      *((_BYTE *)a1 + ot::Mle::Tlv::SetType(this, 9) = *(_BYTE *)(a2 + 30);
    }

    *((_BYTE *)a1 + 10)  = *(_BYTE *)(a2 + 29);
    *((_BYTE *)a1 + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *(_BYTE *)(a2 + 30);
    ++*(_DWORD *)a1;
  }

  ot::InstanceLocator::GetInstance(a1);
  otPlatDiagRadioReceived();
}

void ot::FactoryDiags::Diags::TransmitDone(uint64_t a1, int a2)
{
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    *(_BYTE *)(a1 + 36)  = 0;
    if (!a2)
    {
      ++*(_DWORD *)(a1 + 4);
      if (*(_DWORD *)(a1 + 28) <= 1u) {
        return;
      }
      --*(_DWORD *)(a1 + 28);
    }

    if ((*(_BYTE *)(a1 + 35) & 1) == 0) {
      ot::FactoryDiags::Diags::TransmitPacket((ot::FactoryDiags::Diags *)a1);
    }
  }

uint64_t ot::FactoryDiags::Diags::ProcessContinuousWave( ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v9 = 7;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (a2)
    {
      if (!strcmp(*a3, "start"))
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitCarrier((uint64_t)Instance, 1);
      }

      else if (!strcmp(*a3, "stop"))
      {
        uint64_t v6 = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitCarrier((uint64_t)v6, 0);
      }
    }

    else
    {
      unsigned int v9 = 7;
    }
  }

  else
  {
    unsigned int v9 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v9, a4, a5);
  return v9;
}

uint64_t ot::FactoryDiags::Diags::ProcessStream( ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v9 = 7;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (a2)
    {
      if (!strcmp(*a3, "start"))
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitStream((uint64_t)Instance, 1);
      }

      else if (!strcmp(*a3, "stop"))
      {
        uint64_t v6 = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitStream((uint64_t)v6, 0);
      }
    }

    else
    {
      unsigned int v9 = 7;
    }
  }

  else
  {
    unsigned int v9 = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(v9, a4, a5);
  return v9;
}

uint64_t ot::FactoryDiags::Diags::GetPowerSettings(ot::InstanceLocator *a1, unsigned __int8 a2, uint64_t a3)
{
  *(_WORD *)(a3 + 20)  = 16;
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return otPlatDiagRadioGetPowerSettings( (uint64_t)Instance,  a2,  (_WORD *)a3,  (_WORD *)(a3 + 2),  (unsigned __int16 *)(a3 + 4),  (char *)(a3 + 20));
}

uint64_t ot::FactoryDiags::Diags::ProcessPowerSettings( ot::FactoryDiags::Diags *this, char a2, ot::Utils::CmdLineParser **a3, char *a4, size_t a5)
{
  int v27 = this;
  char v26 = a2;
  int v25 = a3;
  __str  = a4;
  __size  = a5;
  PowerSettings  = 7;
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (v26)
    {
      if (v26 == 1)
      {
        PowerSettings  = ot::Utils::CmdLineParser::ParseAsUint8(*v25, &i, v5);
        if (!PowerSettings)
        {
          if (i >= 0xBu && i <= 0x19u)
          {
            PowerSettings  = ot::FactoryDiags::Diags::GetPowerSettings(this, i, (uint64_t)v31);
            if (!PowerSettings)
            {
              uint64_t v12 = __str;
              size_t v11 = __size;
              int v9 = *(__int16 *)v31;
              int v10 = *(__int16 *)&v31[2];
              ot::FactoryDiags::Diags::RawPowerSetting::ToString( (ot::FactoryDiags::Diags::RawPowerSetting *)&v31[4],  (ot::StringWriter *)v28);
              uint64_t v7 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v28);
              snprintf( v12,  v11,  "TargetPower(0.01dBm): %d\r\nActualPower(0.01dBm): %d\r\nRawPowerSetting: %s\r\n",  v9,  v10,  v7);
            }
          }

          else
          {
            PowerSettings  = 7;
          }
        }
      }
    }

    else
    {
      char v20 = 0;
      unsigned __int8 v19 = 0;
      int v17 = snprintf( __str,  __size,  "| StartCh | EndCh | TargetPower | ActualPower | RawPowerSetting |\r\n +---------+-------+-------------+-------------+-----------------+\r\n");
      if (v17 > 0 && v17 < (int)__size)
      {
        __str += v17;
        __size -= v17;
        for (char i = 11; i <= 0x1Au; ++i)
        {
          if (i == 26) {
            int v15 = 23;
          }
          else {
            int v15 = ot::FactoryDiags::Diags::GetPowerSettings(this, i, (uint64_t)v31);
          }
          PowerSettings  = v15;
          if ((v20 & 1) != 0
            && (ot::FactoryDiags::Diags::PowerSettings::operator!=((unsigned __int16 *)v31, (unsigned __int16 *)v30)
             || PowerSettings))
          {
            int v13 = *(__int16 *)v30;
            int v14 = *(__int16 *)&v30[2];
            ot::FactoryDiags::Diags::RawPowerSetting::ToString( (ot::FactoryDiags::Diags::RawPowerSetting *)&v30[4],  (ot::StringWriter *)v29);
            uint64_t v6 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v29);
            int v18 = snprintf( __str,  __size,  "| %7u | %5u | %11d | %11d | %15s |\r\n",  v19,  i - 1,  v13,  v14,  v6);
            if (v18 <= 0 || v18 >= (int)__size)
            {
              PowerSettings  = 3;
              goto LABEL_31;
            }

            __str += v18;
            __size -= v18;
            char v20 = 0;
          }

          if (!PowerSettings && (v20 & 1) == 0)
          {
            unsigned __int8 v19 = i;
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            *(void *)&v30[14]  = *(void *)&v31[14];
            char v20 = 1;
          }
        }

        PowerSettings  = 0;
      }

      else
      {
        PowerSettings  = 3;
      }
    }
  }

  else
  {
    PowerSettings  = 13;
  }

BOOL ot::FactoryDiags::Diags::PowerSettings::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BOOL v3 = 1;
  if (*a1 == *a2)
  {
    BOOL v3 = 1;
    if (a1[1] == a2[1]) {
      return ot::FactoryDiags::Diags::RawPowerSetting::operator!=(a1 + 2, a2 + 2);
    }
  }

  return v3;
}

{
  return __ZNK2ot12FactoryDiags5Diags13PowerSettingsneERKS2_(a1, a2);
}

ot::StringWriter *ot::FactoryDiags::Diags::RawPowerSetting::ToString@<X0>( ot::FactoryDiags::Diags::RawPowerSetting *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, *((_WORD *)this + 8));
}

{
  return __ZNK2ot12FactoryDiags5Diags15RawPowerSetting8ToStringEv(this, a2);
}

uint64_t ot::FactoryDiags::Diags::GetRawPowerSetting( ot::FactoryDiags::Diags *this, ot::FactoryDiags::Diags::RawPowerSetting *a2)
{
  *((_WORD *)a2 + 8)  = 16;
  Instance  = ot::InstanceLocator::GetInstance(this);
  return otPlatDiagRadioGetRawPowerSetting((uint64_t)Instance, (unsigned __int16 *)a2, (char *)a2 + 16);
}

uint64_t ot::FactoryDiags::Diags::ProcessRawPowerSetting( ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  if ((otPlatDiagModeGet() & 1) != 0)
  {
    if (a2)
    {
      if (!strcmp(*a3, "enable"))
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        RawPowerSetting  = otPlatDiagRadioRawPowerSettingEnable((uint64_t)Instance, 1);
      }

      else if (!strcmp(*a3, "disable"))
      {
        uint64_t v8 = ot::InstanceLocator::GetInstance(this);
        RawPowerSetting  = otPlatDiagRadioRawPowerSettingEnable((uint64_t)v8, 0);
      }

      else
      {
        unsigned __int16 v19 = 16;
        RawPowerSetting  = ot::Utils::CmdLineParser::ParseAsHexString( (ot::Utils::CmdLineParser *)*a3,  (char *)&v19,  v18,  v7);
        if (!RawPowerSetting)
        {
          int v9 = ot::InstanceLocator::GetInstance(this);
          RawPowerSetting  = otPlatDiagRadioSetRawPowerSetting((uint64_t)v9, (uint64_t)v18, v19);
        }
      }
    }

    else
    {
      RawPowerSetting  = ot::FactoryDiags::Diags::GetRawPowerSetting( this,  (ot::FactoryDiags::Diags::RawPowerSetting *)v18);
      if (!RawPowerSetting)
      {
        ot::FactoryDiags::Diags::RawPowerSetting::ToString( (ot::FactoryDiags::Diags::RawPowerSetting *)v18,  (ot::StringWriter *)v17);
        uint64_t v5 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v17);
        snprintf(a4, a5, "%s\r\n", v5);
      }
    }
  }

  else
  {
    RawPowerSetting  = 13;
  }

  ot::FactoryDiags::Diags::AppendErrorResult(RawPowerSetting, a4, a5);
  return RawPowerSetting;
}

uint64_t ot::FactoryDiags::Diags::ProcessGpio( ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, size_t a5)
{
  unsigned __int16 v19 = this;
  unsigned __int8 v18 = a2;
  int v17 = a3;
  uint64_t v16 = a4;
  __size  = a5;
  unsigned int Mode = 7;
  if (a2 == 2 && !strcmp(*v17, "get"))
  {
    unsigned int Mode = ot::FactoryDiags::Diags::ParseLong((ot::FactoryDiags::Diags *)v17[1], (char *)v13, v5);
    if (!Mode)
    {
      int v12 = v13[0];
      unsigned int Mode = otPlatDiagGpioGet(v13[0], (BOOL *)&v11);
      if (!Mode) {
        snprintf(v16, __size, "%d\r\n", v11 & 1);
      }
    }
  }

  else if (v18 == 3 && !strcmp(*v17, "set"))
  {
    unsigned int Mode = ot::FactoryDiags::Diags::ParseLong((ot::FactoryDiags::Diags *)v17[1], (char *)v13, v6);
    if (!Mode)
    {
      int v12 = v13[0];
      unsigned int Mode = ot::FactoryDiags::Diags::ParseBool((ot::FactoryDiags::Diags *)v17[2], &v11, v7);
      if (!Mode) {
        unsigned int Mode = otPlatDiagGpioSet(v12, v11 & 1);
      }
    }
  }

  else if (v18 >= 2u && !strcmp(*v17, "mode"))
  {
    unsigned int Mode = ot::FactoryDiags::Diags::ParseLong((ot::FactoryDiags::Diags *)v17[1], (char *)v13, v8);
    if (!Mode)
    {
      int v12 = v13[0];
      if (v18 == 2)
      {
        unsigned int Mode = otPlatDiagGpioGetMode(v12, &v10);
        if (!Mode)
        {
          if (v10)
          {
            if (v10 == 1) {
              snprintf(v16, __size, "out\r\n");
            }
          }

          else
          {
            snprintf(v16, __size, "in\r\n");
          }
        }
      }

      else if (v18 == 3 && !strcmp(v17[2], "in"))
      {
        unsigned int Mode = otPlatDiagGpioSetMode(v12, 0);
      }

      else if (v18 == 3 && !strcmp(v17[2], "out"))
      {
        unsigned int Mode = otPlatDiagGpioSetMode(v12, 1);
      }
    }
  }

  ot::FactoryDiags::Diags::AppendErrorResult(Mode, v16, __size);
  return Mode;
}

uint64_t ot::FactoryDiags::Diags::ParseBool(ot::FactoryDiags::Diags *this, char *a2, BOOL *a3)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  unsigned int v5 = ot::FactoryDiags::Diags::ParseLong(this, (char *)&v4, (uint64_t *)a3);
  if (!v5)
  {
    if (v4 < 2) {
      *uint64_t v6 = v4 != 0;
    }
    else {
      return 6;
    }
  }

  return v5;
}

uint64_t ot::FactoryDiags::Diags::ParseCmd( ot::FactoryDiags::Diags *this, ot::Utils::CmdLineParser *a2, unsigned __int8 *a3, char **a4)
{
  unsigned int v7 = ot::Utils::CmdLineParser::ParseCmd<(unsigned char)33>(a2, v10);
  if (!v7)
  {
    *a3  = ot::Utils::CmdLineParser::Arg::GetArgsLength((ot::Utils::CmdLineParser::Arg *)v10, v4);
    ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray( (ot::Utils::CmdLineParser::Arg *)v10,  (ot::Utils::CmdLineParser::Arg *)a4,  v5);
  }

  return v7;
}

uint64_t ot::Utils::CmdLineParser::ParseCmd<(unsigned char)33>(ot::Utils::CmdLineParser *a1, char *a2)
{
  return ot::Utils::CmdLineParser::ParseCmd(a1, a2, (ot::Utils::CmdLineParser::Arg *)0x21);
}

{
  return __ZN2ot5Utils13CmdLineParser8ParseCmdILh33EEE7otErrorPcRAT__NS1_3ArgE(a1, a2);
}

uint64_t ot::FactoryDiags::Diags::ProcessLine(ot::FactoryDiags::Diags *this, char *a2, char *a3, size_t a4)
{
  int v12 = this;
  __src  = a2;
  __str  = a3;
  __size  = a4;
  __int16 v8 = 256;
  unsigned int v7 = 0;
  unsigned __int8 v6 = 0;
  if ((unsigned __int16)ot::StringLength((ot *)a2, (const char *)0x100) < 0x100u)
  {
    strcpy(__dst, __src);
    unsigned int v7 = ot::FactoryDiags::Diags::ParseCmd(this, (ot::Utils::CmdLineParser *)__dst, &v6, v13);
  }

  else
  {
    unsigned int v7 = 3;
  }

  if (v7)
  {
    if (v7 == 3)
    {
      snprintf(__str, __size, "failed: command string too long\r\n");
    }

    else if (v7 == 7)
    {
      snprintf(__str, __size, "failed: command string contains too many arguments\r\n");
    }

    else
    {
      snprintf(__str, __size, "failed to parse command string\r\n");
    }
  }

  else
  {
    *__str  = 0;
    return ot::FactoryDiags::Diags::ProcessCmd(this, v6, (const char **)v13, __str, __size);
  }

  return v7;
}

uint64_t ot::FactoryDiags::Diags::ProcessCmd( ot::FactoryDiags::Diags *this, unsigned __int8 a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v15 = 0;
  if (a2)
  {
    *a4  = 0;
    for (char i = &ot::FactoryDiags::Diags::sCommands; ; i += 3)
    {
      if (i == ot::Mac::Mac::OperationToString(ot::Mac::Mac::Operation)::kOperationStrings)
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v15 = otPlatDiagProcess((uint64_t)Instance, a2, (uint64_t)a3, (uint64_t)a4, a5);
        goto LABEL_17;
      }

      if (!strcmp(*a3, *i)) {
        break;
      }
    }

    uint64_t v7 = (uint64_t)i[2];
    int v12 = (void *)((char *)this + (v7 >> 1));
    if ((v7 & 1) != 0) {
      char v11 = *(char **)(*v12 + i[1]);
    }
    else {
      char v11 = i[1];
    }
    if (a2 <= 1u) {
      unsigned int v8 = ((uint64_t (*)(void *, void, void, char *, size_t))v11)( v12,  (a2 - 1),  0LL,  a4,  a5);
    }
    else {
      unsigned int v8 = ((uint64_t (*)(void *, void, const char **, char *, size_t))v11)( v12,  (a2 - 1),  a3 + 1,  a4,  a5);
    }
    unsigned int v15 = v8;
  }

  else
  {
    char v5 = otPlatDiagModeGet();
    unsigned __int8 v6 = "enabled";
    if ((v5 & 1) == 0) {
      unsigned __int8 v6 = "disabled";
    }
    snprintf(a4, a5, "diagnostics mode is %s\r\n", v6);
  }

uint64_t ot::FactoryDiags::Diags::IsEnabled(ot::FactoryDiags::Diags *this)
{
  return otPlatDiagModeGet() & 1;
}

BOOL ot::FactoryDiags::Diags::RawPowerSetting::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BOOL v3 = 1;
  if (a1[8] == a2[8]) {
    return memcmp(a1, a2, a1[8]) != 0;
  }
  return v3;
}

{
  return __ZNK2ot12FactoryDiags5Diags15RawPowerSettingneERKS2_(a1, a2);
}

uint64_t ot::Mac::ChannelMask::GetNumberOfChannels(ot::Mac::ChannelMask *this)
{
  char v5 = this;
  unsigned __int8 v4 = 0;
  unsigned __int8 v3 = -1;
  return v4;
}

uint64_t ot::Mac::ChannelMask::GetNextChannel(ot::Mac::ChannelMask *this, unsigned __int8 *a2)
{
  unsigned int v4 = 23;
  if (*a2 == 255) {
    *a2  = 10;
  }
  ++*a2;
  while (*a2 <= 0x19u)
  {
    if (ot::Mac::ChannelMask::ContainsChannel(this, *a2)) {
      return 0;
    }
    ++*a2;
  }

  return v4;
}

BOOL ot::Mac::ChannelMask::ContainsChannel(ot::Mac::ChannelMask *this, unsigned __int8 a2)
{
  return a2 < 0x20uLL && ((1LL << a2) & *(unsigned int *)this) != 0;
}

{
  return __ZNK2ot3Mac11ChannelMask15ContainsChannelEh(this, a2);
}

uint64_t ot::Mac::ChannelMask::GetNextChannelWithRollOver(ot::Mac::ChannelMask *this, unsigned __int8 a2)
{
  char v5 = this;
  v4[1]  = a2;
  v4[0]  = a2;
  if (ot::Mac::ChannelMask::IsEmpty(this))
  {
    if (++v4[0] > 0x19u) {
      v4[0]  = 11;
    }
  }

  else if (ot::Mac::ChannelMask::GetNextChannel(this, v4) == 23)
  {
    v4[0]  = -1;
    ot::Mac::ChannelMask::GetNextChannel(this, v4);
    IgnoreError();
  }

  return v4[0];
}

BOOL ot::Mac::ChannelMask::IsEmpty(ot::Mac::ChannelMask *this)
{
  return *(_DWORD *)this == 0;
}

{
  return __ZNK2ot3Mac11ChannelMask7IsEmptyEv(this);
}

uint64_t ot::Mac::ChannelMask::GetWakeupChannel(ot::Mac::ChannelMask *this)
{
  return 11LL;
}

uint64_t ot::Mac::ChannelMask::ChooseRandomChannel(ot::Mac::ChannelMask *this)
{
  uint64_t v7 = this;
  unsigned __int8 v6 = -1;
  if (!ot::Mac::ChannelMask::IsEmpty(this))
  {
    NumberOfChannels  = ot::Mac::ChannelMask::GetNumberOfChannels(this);
    unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0LL, NumberOfChannels);
    if (!ot::Mac::ChannelMask::GetNextChannel(this, &v6))
    {
      do
        int v2 = Uint8InRange--;
      while (v2 && !ot::Mac::ChannelMask::GetNextChannel(this, &v6));
    }
  }

  return v6;
}

ot::StringWriter *ot::Mac::ChannelMask::ToString@<X0>( ot::Mac::ChannelMask *this@<X0>, ot::StringWriter *a2@<X8>)
{
  int v12 = this;
  ot::String<(unsigned short)45>::String((uint64_t)a2);
  unsigned __int8 v11 = -1;
  char v10 = 0;
  ot::StringWriter::Append(a2, "{");
  NextChannel  = ot::Mac::ChannelMask::GetNextChannel(this, &v11);
  while (!NextChannel)
  {
    unsigned __int8 v8 = v11;
    for (unsigned __int8 i = v11; ; unsigned __int8 i = v11)
    {
      NextChannel  = ot::Mac::ChannelMask::GetNextChannel(this, &v11);
      if (NextChannel || v11 != i + 1) {
        break;
      }
    }

    int v2 = ", ";
    if ((v10 & 1) == 0) {
      int v2 = " ";
    }
    ot::StringWriter::Append(a2, "%s%d", v2, v8);
    char v10 = 1;
    if (v8 < (int)i)
    {
      unsigned __int8 v3 = ", ";
      if (i != v8 + 1) {
        unsigned __int8 v3 = "-";
      }
      ot::StringWriter::Append(a2, "%s%d", v3, i);
    }
  }

  return ot::StringWriter::Append(a2, " }");
}

uint64_t ot::String<(unsigned short)45>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 45);
  return a1;
}

ot::DataPollHandler::Callbacks *ot::DataPollHandler::Callbacks::Callbacks( ot::DataPollHandler::Callbacks *this, ot::Instance *a2)
{
  return this;
}

{
  ot::DataPollHandler::Callbacks::Callbacks(this, a2);
  return this;
}

ot::DataPollHandler *ot::DataPollHandler::DataPollHandler(ot::DataPollHandler *this, ot::Instance *a2)
{
  *(void *)this  = 0LL;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 0;
  ot::DataPollHandler::Callbacks::Callbacks((ot::DataPollHandler *)((char *)this + 10), a2);
  return this;
}

{
  ot::DataPollHandler::DataPollHandler(this, a2);
  return this;
}

BOOL ot::DataPollHandler::Clear(ot::DataPollHandler *this)
{
  unsigned __int8 v11 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 5);
  char v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1]  = v2;
  v7[0]  = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    ot::DataPollHandler::ChildInfo::SetDataPollPending(v6 + 264, 0);
    ot::DataPollHandler::ChildInfo::SetFrameReplacePending(v6 + 264, 0);
    ot::DataPollHandler::ChildInfo::SetFramePurgePending(v6 + 264, 0);
    ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts(v6 + 264);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }

  *(void *)this  = 0LL;
  return result;
}

uint64_t ot::DataPollHandler::ChildInfo::SetDataPollPending(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6)  = *(_BYTE *)(this + 6) & 0xDF | (32 * (a2 & 1));
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo18SetDataPollPendingEb(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::SetFrameReplacePending(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6)  = *(_BYTE *)(this + 6) & 0x7F | ((a2 & 1) << 7);
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo22SetFrameReplacePendingEb(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::SetFramePurgePending(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6)  = *(_BYTE *)(this + 6) & 0xBF | ((a2 & 1) << 6);
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo20SetFramePurgePendingEb(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts(uint64_t this)
{
  *(_BYTE *)(this + 6) &= 0xE0u;
  return this;
}

  ;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo23ResetIndirectTxAttemptsEv(this);
}

void ot::DataPollHandler::RequestFrameChange(uint64_t a1, char a2, ot::Child *a3)
{
  if (*(ot::Child **)a1 == a3
    && (uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1),
        ot::Mac::Mac::IsPerformingIndirectTransmit(v3)))
  {
    if (a2)
    {
      if (a2 == 1) {
        ot::DataPollHandler::ChildInfo::SetFrameReplacePending((uint64_t)a3 + 264, 1);
      }
    }

    else
    {
      ot::DataPollHandler::ChildInfo::SetFramePurgePending((uint64_t)a3 + 264, 1);
    }
  }

  else
  {
    ot::DataPollHandler::ResetTxAttempts((ot::DataPollHandler *)a1, a3);
    ot::DataPollHandler::Callbacks::HandleFrameChangeDone((ot::DataPollHandler::Callbacks *)(a1 + 10), a3);
  }

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::Mac>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Mac3MacEEERT_v(a1);
}

BOOL ot::Mac::Mac::IsPerformingIndirectTransmit(ot::Mac::Mac *this)
{
  return *((_BYTE *)this + 1) == 7;
}

{
  return __ZNK2ot3Mac3Mac28IsPerformingIndirectTransmitEv(this);
}

_BYTE *ot::DataPollHandler::ResetTxAttempts(ot::DataPollHandler *this, ot::Child *a2)
{
  return ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((_BYTE *)a2 + 272);
}

void ot::DataPollHandler::Callbacks::HandleFrameChangeDone( ot::DataPollHandler::Callbacks *this, ot::Child *a2)
{
  uint64_t v2 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
  ot::IndirectSender::HandleFrameChangeDone(v2, a2);
}

{
  __ZN2ot15DataPollHandler9Callbacks21HandleFrameChangeDoneERNS_5ChildE(this, a2);
}

void ot::DataPollHandler::HandleDataPoll(ot::DataPollHandler *this, ot::Mac::RxFrame *a2)
{
  v37  = this;
  uint64_t v36 = a2;
  ot::Mac::Address::Address((ot::Mac::Address *)v35);
  v32  = 0;
  if (ot::Mac::Frame::GetSecurityEnabled(v36))
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (!ot::Mle::Mle::IsDetached(v2) && !ot::Mac::Frame::GetSrcAddr(v36, (ot::Mac::Address *)v35))
    {
      uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      ot::ChildTable::FindChild(v3, (ot::Mac::Address *)v35, 1);
      v34  = updated;
      if (updated)
      {
        if (gEnableNetworkMonitor == 1)
        {
          int Now = ot::TimerMilli::GetNow(updated);
          LastHeard  = ot::Neighbor::GetLastHeard(v34);
          int v12 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
          updated  = (ot::Neighbor *)ot::Time::MsecToSec(v12);
          v32  = (int)updated;
          if (updated > 5)
          {
            unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v34);
            updated  = (ot::Neighbor *)update_sed_device_last_heard(Rloc16);
          }
        }

        int v24 = v34;
        int v28 = ot::TimerMilli::GetNow(updated);
        ot::Neighbor::SetLastHeard((uint64_t)v24, v28);
        ot::Neighbor::ResetLinkFailures((uint64_t)v34);
        int v25 = (char *)v34 + 264;
        Radiochar Type = ot::Mac::Frame::GetRadioType(v36);
        ot::DataPollHandler::ChildInfo::SetLastPollRadioType((uint64_t)v25, RadioType);
        IndirectMessageCount  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Neighbor *)((char *)v34 + 248));
        ApplicationMessageCount  = ot::IndirectSender::ChildInfo::GetApplicationMessageCount((ot::Neighbor *)((char *)v34 + 248));
        char v26 = ot::Neighbor::GetRloc16(v34);
        ot::Mac::RxFrame::GetRssi(v36);
        ot::Mac::RxFrame::IsAckedWithFramePending(v36);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DataPollHandlr",  "Rx data poll, src:0x%04x, qed_msgs:%d, app_msgs:%d, rss:%d, ack-fp:%d",  v15,  v16,  v17,  v18,  v19,  v20,  v26);
        if (gEnableNetworkMonitor == 1 && IndirectMessageCount > 5u)
        {
          unsigned __int16 v21 = ot::Neighbor::GetRloc16(v34);
          update_sed_device_big_queue(v21);
        }

        if ((ot::Mac::RxFrame::IsAckedWithFramePending(v36) & 1) != 0)
        {
          if (*(void *)this)
          {
            ot::DataPollHandler::ChildInfo::SetDataPollPending((uint64_t)v34 + 264, 1);
          }

          else
          {
            *(void *)this  = v34;
            char v23 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ot::Mac::Mac::RequestIndirectFrameTransmission(v23);
          }
        }

        else if (IndirectMessageCount)
        {
          if (ot::Mac::Address::IsShort((ot::Mac::Address *)v35))
          {
            matched  = (ot::SourceMatchController *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SourceMatchController>(this);
            ot::SourceMatchController::SetSrcMatchAsShort(matched, v34, 1);
          }
        }
      }

      else
      {
        ot::Mac::Address::ToString((ot::Mac::Address *)v35, (ot::StringWriter *)v38);
        char v5 = ot::String<(unsigned short)17>::AsCString((uint64_t)v38);
        ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"DataPollHandlr",  "Rx data poll, child:%s not found",  v6,  v7,  v8,  v9,  v10,  v11,  v5);
      }
    }
  }

ot::Mac::Address *ot::Mac::Address::Address(ot::Mac::Address *this)
{
  return this;
}

uint64_t ot::Neighbor::GetLastHeard(ot::Neighbor *this)
{
  return *((unsigned int *)this + 14);
}

{
  return __ZNK2ot8Neighbor12GetLastHeardEv(this);
}

uint64_t ot::Neighbor::SetLastHeard(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56)  = a2;
  return result;
}

{
  return __ZN2ot8Neighbor12SetLastHeardENS_4TimeE(result, a2);
}

uint64_t ot::Neighbor::ResetLinkFailures(uint64_t this)
{
  *(_BYTE *)(this + 103)  = 0;
  return this;
}

{
  return __ZN2ot8Neighbor17ResetLinkFailuresEv(this);
}

uint64_t ot::DataPollHandler::ChildInfo::SetLastPollRadioType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 7)  = a2;
  return result;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo20SetLastPollRadioTypeENS_3Mac9RadioTypeE(result, a2);
}

uint64_t ot::Mac::Frame::GetRadioType(ot::Mac::Frame *this)
{
  return *((unsigned __int8 *)this + 11);
}

{
  return __ZNK2ot3Mac5Frame12GetRadioTypeEv(this);
}

uint64_t ot::IndirectSender::ChildInfo::GetApplicationMessageCount(ot::IndirectSender::ChildInfo *this)
{
  return HIDWORD(*((void *)this + 1)) & 0x3FFF;
}

{
  return __ZNK2ot14IndirectSender9ChildInfo26GetApplicationMessageCountEv(this);
}

uint64_t ot::Mac::RxFrame::GetRssi(ot::Mac::RxFrame *this)
{
  return *((char *)this + 29);
}

{
  return __ZNK2ot3Mac7RxFrame7GetRssiEv(this);
}

uint64_t ot::Mac::RxFrame::IsAckedWithFramePending(ot::Mac::RxFrame *this)
{
  return *((_BYTE *)this + 31) & 1;
}

{
  return __ZNK2ot3Mac7RxFrame23IsAckedWithFramePendingEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::SourceMatchController>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::SourceMatchController>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_21SourceMatchControllerEEERT_v(a1);
}

ot::Mac::Frame *ot::DataPollHandler::HandleFrameRequest(ot::DataPollHandler *this, ot::Mac::TxFrames *a2)
{
  TxFrame  = 0LL;
  if (*(void *)this)
  {
    LastPollRadiochar Type = ot::DataPollHandler::ChildInfo::GetLastPollRadioType((ot::DataPollHandler::ChildInfo *)(*(void *)this + 264LL));
    TxFrame  = (ot::Mac::Frame *)ot::Mac::TxFrames::GetTxFrame((uint64_t)a2, LastPollRadioType);
    if (ot::DataPollHandler::Callbacks::PrepareFrameForChild( (ot::DataPollHandler *)((char *)this + 10),  TxFrame,  (_WORD *)this + 4,  *(void *)this))
    {
      return 0LL;
    }

    else
    {
      IndirectTxAttempts  = ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts((ot::DataPollHandler::ChildInfo *)(*(void *)this + 264LL));
      if (v4 | (IndirectTxAttempts == 0)) {
        char v5 = 0;
      }
      else {
        char v5 = 1;
      }
      if ((v5 & 1) == 0
        && ((CslTxAttempts  = ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((ot::CslTxScheduler::ChildInfo *)(*(void *)this + 272LL)),
             !(v4 | (CslTxAttempts == 0)))
          ? (char v7 = 0)
          : (char v7 = 1),
            (v7 & 1) != 0))
      {
        ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 0);
      }

      else
      {
        ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 1);
        IndirectDataSequenceNumber  = ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber((ot::DataPollHandler::ChildInfo *)(*(void *)this + 264LL));
        ot::Mac::Frame::SetSequence(TxFrame, IndirectDataSequenceNumber);
        if (ot::Mac::Frame::GetSecurityEnabled(TxFrame))
        {
          IndirectFrameCounter  = ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter((ot::DataPollHandler::ChildInfo *)(*(void *)this + 264LL));
          ot::Mac::Frame::SetFrameCounter(TxFrame, IndirectFrameCounter);
          IndirectKeyId  = ot::DataPollHandler::ChildInfo::GetIndirectKeyId((ot::DataPollHandler::ChildInfo *)(*(void *)this + 264LL));
          ot::Mac::Frame::SetKeyId(TxFrame, IndirectKeyId);
        }
      }
    }
  }

  return TxFrame;
}

uint64_t ot::DataPollHandler::ChildInfo::GetLastPollRadioType(ot::DataPollHandler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo20GetLastPollRadioTypeEv(this);
}

uint64_t ot::DataPollHandler::Callbacks::PrepareFrameForChild( ot::InstanceLocator *a1, ot::Mac::TxFrame *a2, _WORD *a3, uint64_t a4)
{
  char v4 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  return ot::IndirectSender::PrepareFrameForChild(v4, a2, a3, a4);
}

{
  return __ZN2ot15DataPollHandler9Callbacks20PrepareFrameForChildERNS_3Mac7TxFrameERNS_18IndirectSenderBase12FrameContextERNS_5ChildE( a1,  a2,  a3,  a4);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts(ot::DataPollHandler::ChildInfo *this)
{
  return *((_BYTE *)this + 6) & 0x1F;
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo21GetIndirectTxAttemptsEv(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslTxAttempts(ot::CslTxScheduler::ChildInfo *this)
{
  return *(_BYTE *)this & 0x3F;
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo16GetCslTxAttemptsEv(this);
}

uint64_t ot::Mac::TxFrame::SetIsARetransmission(uint64_t this, char a2)
{
  *(_BYTE *)(this + 45)  = *(_BYTE *)(this + 45) & 0xFD | (2 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Mac7TxFrame20SetIsARetransmissionEb(this, a2);
}

uint64_t ot::Mac::Frame::SetSequence(ot::Mac::Frame *this, char a2)
{
  Psdu  = ot::Mac::Frame::GetPsdu(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  FcfSize  = ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)FrameControlField);
  uint64_t result = Psdu;
  *(_BYTE *)(Psdu + FcfSize)  = a2;
  return result;
}

{
  return __ZN2ot3Mac5Frame11SetSequenceEh(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber(ot::DataPollHandler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 5);
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo29GetIndirectDataSequenceNumberEv(this);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter(ot::DataPollHandler::ChildInfo *this)
{
  return *(unsigned int *)this;
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo23GetIndirectFrameCounterEv(this);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectKeyId(ot::DataPollHandler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo16GetIndirectKeyIdEv(this);
}

void ot::DataPollHandler::HandleSentFrame(ot::DataPollHandler *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)a1  = 0LL;
    ot::DataPollHandler::HandleSentFrame((uint64_t)a1, a2, a3, v4);
  }

  ot::DataPollHandler::ProcessPendingPolls(a1);
}

void ot::DataPollHandler::HandleSentFrame(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if ((ot::DataPollHandler::ChildInfo::IsFramePurgePending((ot::DataPollHandler::ChildInfo *)(a4 + 264)) & 1) == 0)
  {
    if (a3 <= 0x1DuLL) {
      __asm { BR              X8 }
    }

    __assert_rtn("HandleSentFrame", "data_poll_handler.cpp", 347, "false");
  }

  ot::DataPollHandler::ChildInfo::SetFramePurgePending(a4 + 264, 0);
  ot::DataPollHandler::ChildInfo::SetFrameReplacePending(a4 + 264, 0);
  ot::DataPollHandler::ResetTxAttempts((ot::DataPollHandler *)a1, (ot::Child *)a4);
  ot::DataPollHandler::Callbacks::HandleFrameChangeDone((ot::DataPollHandler::Callbacks *)(a1 + 10), (ot::Child *)a4);
}

void ot::DataPollHandler::ProcessPendingPolls(ot::DataPollHandler *this)
{
  int v14 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v12 = ot::ChildTable::Iterate(v1, 1);
  int v13 = (ot::ChildTable::IteratorBuilder *)&v12;
  v11[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v12);
  v11[1]  = v2;
  v10[0]  = ot::ChildTable::IteratorBuilder::end(v13);
  v10[1]  = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v11, v10))
  {
    uint64_t v9 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v11);
    if ((ot::DataPollHandler::ChildInfo::IsDataPollPending((ot::Neighbor *)((char *)v9 + 264)) & 1) != 0)
    {
      BOOL v5 = 1;
      if (*(void *)this)
      {
        LastHeard  = ot::Neighbor::GetLastHeard(v9);
        int v7 = ot::Neighbor::GetLastHeard(*(ot::Neighbor **)this);
        BOOL v5 = ot::Time::operator<(&LastHeard, &v7);
      }

      if (v5) {
        *(void *)this  = v9;
      }
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v11);
  }

  if (*(void *)this)
  {
    ot::DataPollHandler::ChildInfo::SetDataPollPending(*(void *)this + 264LL, 0);
    uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::RequestIndirectFrameTransmission(v4);
  }

uint64_t ot::DataPollHandler::ChildInfo::IsFramePurgePending(ot::DataPollHandler::ChildInfo *this)
{
  return (*((unsigned __int8 *)this + 6) >> 6) & 1;
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo19IsFramePurgePendingEv(this);
}

uint64_t ot::Mac::TxFrame::IsHeaderUpdated(ot::Mac::TxFrame *this)
{
  return *((_BYTE *)this + 45) & 1;
}

{
  return __ZNK2ot3Mac7TxFrame15IsHeaderUpdatedEv(this);
}

uint64_t ot::DataPollHandler::ChildInfo::IncrementIndirectTxAttempts(uint64_t this)
{
  *(_BYTE *)(this + 6)  = *(_BYTE *)(this + 6) & 0xE0 | ((*(_BYTE *)(this + 6) & 0x1F) + 1) & 0x1F;
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo27IncrementIndirectTxAttemptsEv(this);
}

uint64_t ot::DataPollHandler::ChildInfo::IsFrameReplacePending(ot::DataPollHandler::ChildInfo *this)
{
  return (*((unsigned __int8 *)this + 6) >> 7) & 1;
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo21IsFrameReplacePendingEv(this);
}

BOOL ot::Mac::Frame::IsEmpty(ot::Mac::Frame *this)
{
  return *((_WORD *)this + 4) == 0;
}

{
  return __ZNK2ot3Mac5Frame7IsEmptyEv(this);
}

uint64_t ot::DataPollHandler::ChildInfo::SetIndirectDataSequenceNumber(uint64_t this, char a2)
{
  *(_BYTE *)(this + 5)  = a2;
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo29SetIndirectDataSequenceNumberEh(this, a2);
}

uint64_t ot::Mac::Frame::GetSequence(ot::Mac::Frame *this)
{
  Psdu  = ot::Mac::Frame::GetPsdu(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return *(unsigned __int8 *)(Psdu + ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)FrameControlField));
}

{
  return __ZNK2ot3Mac5Frame11GetSequenceEv(this);
}

_DWORD *ot::DataPollHandler::ChildInfo::SetIndirectFrameCounter(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo23SetIndirectFrameCounterEj(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::SetIndirectKeyId(uint64_t this, char a2)
{
  *(_BYTE *)(this + ++*(_WORD *)(this + 4) = a2;
  return this;
}

{
  return __ZN2ot15DataPollHandler9ChildInfo16SetIndirectKeyIdEh(this, a2);
}

void ot::DataPollHandler::Callbacks::HandleSentFrameToChild( ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  ot::IndirectSender::HandleSentFrameToChild(v5, a2, a3, a4, a5);
}

{
  __ZN2ot15DataPollHandler9Callbacks22HandleSentFrameToChildERKNS_3Mac7TxFrameERKNS_18IndirectSenderBase12FrameContextE7otErrorRNS_5ChildE( a1,  a2,  a3,  a4,  a5);
}

uint64_t ot::DataPollHandler::ChildInfo::IsDataPollPending(ot::DataPollHandler::ChildInfo *this)
{
  return (*((unsigned __int8 *)this + 6) >> 5) & 1;
}

{
  return __ZNK2ot15DataPollHandler9ChildInfo17IsDataPollPendingEv(this);
}

_BYTE *ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts(_BYTE *this)
{
  *this &= 0xC0u;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo18ResetCslTxAttemptsEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::IndirectSender>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14IndirectSenderEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::IndirectSender>(uint64_t a1)
{
  return a1 + 96320;
}

{
  return __ZN2ot8Instance3GetINS_14IndirectSenderEEERT_v(a1);
}

uint64_t ot::Mac::Address::Address(uint64_t this)
{
  *(_BYTE *)(this + 8)  = 0;
  return this;
}

uint64_t ot::Mac::Frame::GetPsdu(ot::Mac::Frame *this)
{
  return *(void *)this;
}

{
  return *(void *)this;
}

{
  return __ZN2ot3Mac5Frame7GetPsduEv(this);
}

{
  return __ZNK2ot3Mac5Frame7GetPsduEv(this);
}

uint64_t ot::Mac::Frame::GetFcfSize(ot::Mac::Frame *this)
{
  return 2LL;
}

{
  return __ZN2ot3Mac5Frame10GetFcfSizeEt(this);
}

uint64_t ot::Instance::Get<ot::SourceMatchController>(uint64_t a1)
{
  return a1 + 96321;
}

{
  return __ZN2ot8Instance3GetINS_21SourceMatchControllerEEERT_v(a1);
}

ot::DataPollSender *ot::DataPollSender::DataPollSender(ot::DataPollSender *this, ot::Instance *a2)
{
  *((_DWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((_DWORD *)this + 2) &= 0xFC000000;
  *((_DWORD *)this + 2) &= 0x3FFFFFFu;
  ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::TimerMilliIn( (ot::DataPollSender *)((char *)this + 16),  a2);
  uint64_t result = this;
  *((_BYTE *)this + 40) &= ~1u;
  *((_BYTE *)this + 40) &= ~2u;
  *((_BYTE *)this + 40) &= ~4u;
  *((_BYTE *)this + 40) &= 0x87u;
  *((_BYTE *)this + 41) &= 0xF0u;
  *((_BYTE *)this + 41) &= 0xFu;
  return result;
}

{
  ot::DataPollSender::DataPollSender(this, a2);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::HandleTimer);
  return a1;
}

ot::Neighbor *ot::DataPollSender::GetParent(ot::DataPollSender *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ParentCandidate  = (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v1);
  if (ot::Neighbor::IsStateValid(ParentCandidate)) {
    return ParentCandidate;
  }
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  return (ot::Neighbor *)ot::Mle::Mle::GetParent(v2);
}

uint64_t ot::Mle::Mle::GetParentCandidate(ot::Mle::Mle *this)
{
  return (uint64_t)this + 424;
}

{
  return __ZN2ot3Mle3Mle18GetParentCandidateEv(this);
}

BOOL ot::Neighbor::IsStateValid(ot::Neighbor *this)
{
  return (*((_BYTE *)this + 98) & 0xF) == 7;
}

{
  return __ZNK2ot8Neighbor12IsStateValidEv(this);
}

ot::DataPollSender *ot::DataPollSender::StartPolling(ot::DataPollSender *this)
{
  uint64_t v2 = this;
  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsRxOnWhenIdle(v1)) {
      __assert_rtn("StartPolling", "data_poll_sender.cpp", 86, "!Get<Mle::MleRouter>().IsRxOnWhenIdle()");
    }
    *((_BYTE *)v2 + 40)  = *((_BYTE *)v2 + 40) & 0xFE | 1;
    return (ot::DataPollSender *)ot::DataPollSender::ScheduleNextPoll(v2, 1);
  }

  return this;
}

BOOL ot::Mle::Mle::IsRxOnWhenIdle(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::Mle *)((char *)this + 312));
}

{
  return __ZNK2ot3Mle3Mle14IsRxOnWhenIdleEv(this);
}

uint64_t ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender *a1, char a2)
{
  uint64_t v10 = a1;
  char v9 = a2;
  uint64_t v3 = a1;
  int v7 = *((_DWORD *)a1 + 1);
  if (a2 == 1)
  {
    a1  = (ot::DataPollSender *)ot::DataPollSender::CalculatePollPeriod(a1);
    *((_DWORD *)v3 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = (_DWORD)a1;
  }

  int Now = ot::TimerMilli::GetNow(a1);
  int v8 = Now;
  uint64_t result = ot::Timer::IsRunning((ot::DataPollSender *)((char *)v3 + 16));
  if ((result & 1) != 0)
  {
    if (v7 != *((_DWORD *)v3 + 1))
    {
      int v5 = ot::Time::operator+(v3, *((_DWORD *)v3 + 1));
      int v4 = ot::Time::operator+(&v8, 10);
      if (ot::Time::operator<(&v5, &v4)) {
        return ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)v3 + 16), v8, 0xAu);
      }
      else {
        return ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)v3 + 16), *(_DWORD *)v3, *((_DWORD *)v3 + 1));
      }
    }
  }

  else
  {
    *(_DWORD *)uint64_t v3 = v8;
    return ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)v3 + 16), *(_DWORD *)v3, *((_DWORD *)v3 + 1));
  }

  return result;
}

uint64_t ot::DataPollSender::StopPolling(ot::DataPollSender *this)
{
  uint64_t result = ot::TimerMilli::Stop((ot::DataPollSender *)((char *)this + 16));
  *((_BYTE *)this + 40) &= ~2u;
  *((_BYTE *)this + 40) &= ~4u;
  *((_BYTE *)this + 40) &= 0x87u;
  *((_BYTE *)this + 41) &= 0xF0u;
  *((_BYTE *)this + 41) &= 0xFu;
  *((_DWORD *)this + 2) &= 0x3FFFFFFu;
  *((_BYTE *)this + 40) &= ~1u;
  return result;
}

uint64_t ot::DataPollSender::SendDataPoll( ot::DataPollSender *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    int v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if ((ot::Mac::Mac::GetRxOnWhenIdle(v8) & 1) != 0)
    {
      unsigned int v21 = 13;
    }

    else
    {
      Parent  = ot::DataPollSender::GetParent(this);
      if (ot::Neighbor::IsStateValidOrRestoring(Parent))
      {
        ot::TimerMilli::Stop((ot::DataPollSender *)((char *)this + 16));
        uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned int v21 = ot::Mac::Mac::RequestDataPollTransmission(v10);
      }

      else
      {
        unsigned int v21 = 13;
      }
    }
  }

  else
  {
    unsigned int v21 = 13;
  }

  if (v21)
  {
    if (v21 == 13)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"DataPollSender",  "Data poll tx requested while data polling was not enabled!",  a3,  a4,  a5,  a6,  a7,  a8,  v19);
      ot::DataPollSender::StopPolling(this);
    }

    else
    {
      char v11 = ot::ErrorToString(v21);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"DataPollSender",  "Unexpected error %s requesting data poll",  v12,  v13,  v14,  v15,  v16,  v17,  v11);
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DataPollSender", "Sending data poll", a3, a4, a5, a6, a7, a8, v19);
    ot::DataPollSender::ScheduleNextPoll(this, 0);
  }

  return v21;
}

uint64_t ot::Mac::Mac::GetRxOnWhenIdle(ot::Mac::Mac *this)
{
  return (*(unsigned __int8 *)this >> 2) & 1;
}

{
  return __ZNK2ot3Mac3Mac15GetRxOnWhenIdleEv(this);
}

uint64_t ot::DataPollSender::GetPollDestinationAddress(ot::DataPollSender *a1, uint64_t a2, _BYTE *a3)
{
  unsigned int v11 = 0;
  Parent  = ot::DataPollSender::GetParent(a1);
  if (ot::Neighbor::IsStateValidOrRestoring(Parent))
  {
    uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    if ((unsigned __int16)ot::Mac::Mac::GetShortAddress(v3) == 65534
      || (int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1),
          Parent == (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v4)))
    {
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(Parent);
      ot::Mac::Address::SetExtended(a2, ExtAddress);
    }

    else
    {
      __int16 Rloc16 = ot::Neighbor::GetRloc16(Parent);
      ot::Mac::Address::SetShort(a2, Rloc16);
    }

    int v7 = (ot::RadioSelector *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>(a1);
    *a3  = ot::RadioSelector::SelectPollFrameRadio(v7, Parent);
  }

  else
  {
    return 11;
  }

  return v11;
}

uint64_t ot::Mac::Address::SetExtended(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)this  = *(void *)a2;
  *(_BYTE *)(this + 8)  = 2;
  return this;
}

{
  return __ZN2ot3Mac7Address11SetExtendedERKNS0_10ExtAddressE(this, a2);
}

uint64_t ot::Neighbor::GetExtAddress(ot::Neighbor *this)
{
  return (uint64_t)this + 48;
}

{
  return (uint64_t)this + 48;
}

{
  return __ZN2ot8Neighbor13GetExtAddressEv(this);
}

{
  return __ZNK2ot8Neighbor13GetExtAddressEv(this);
}

uint64_t ot::Mac::Address::SetShort(uint64_t this, __int16 a2)
{
  *(_WORD *)this  = a2;
  *(_BYTE *)(this + 8)  = 1;
  return this;
}

{
  return __ZN2ot3Mac7Address8SetShortEt(this, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::RadioSelector>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_13RadioSelectorEEERT_v(a1);
}

uint64_t ot::DataPollSender::SetExternalPollPeriod(ot::DataPollSender *this, unsigned int a2)
{
  int v4 = a2;
  unsigned int v3 = 0;
  if (a2)
  {
    if (a2 < 0xA) {
      return 7;
    }
    if (a2 > 0x3FFFFFF) {
      int v4 = 0x3FFFFFF;
    }
  }

  if ((*((_DWORD *)this + 2) & 0x3FFFFFF) != v4)
  {
    *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_DWORD *)this + 2) & 0xFC000000 | v4 & 0x3FFFFFF;
    if ((*((_BYTE *)this + 40) & 1) != 0) {
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }

  return v3;
}

uint64_t ot::DataPollSender::GetKeepAlivePollPeriod(ot::DataPollSender *this)
{
  DefaultPollPeriod  = ot::DataPollSender::GetDefaultPollPeriod(this);
  if ((*((_DWORD *)this + 2) & 0x3FFFFFF) != 0) {
    return ot::Min<unsigned int>(DefaultPollPeriod, *((_DWORD *)this + 2) & 0x3FFFFFF);
  }
  return DefaultPollPeriod;
}

uint64_t ot::DataPollSender::GetDefaultPollPeriod(ot::DataPollSender *this)
{
  unsigned int v12 = 4000;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  Timeout  = ot::Mle::Mle::GetTimeout(v1);
  unsigned int v2 = ot::Time::MsecToSec((ot::Time *)0x7FFFFFFF);
  unsigned int v3 = (ot::Time *)ot::Min<unsigned int>(Timeout, v2);
  unsigned int v11 = ot::Time::SecToMsec(v3);
  int v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  if (ot::Mac::Mac::IsCslEnabled(v4))
  {
    int v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    CslTimeout  = (ot::Time *)ot::Mle::Mle::GetCslTimeout(v5);
    unsigned int v7 = ot::Time::SecToMsec(CslTimeout);
    unsigned int v11 = ot::Min<unsigned int>(v11, v7);
    unsigned int v12 = 1000;
  }

  if (v11 > v12) {
    v11 -= v12;
  }
  return v11;
}

void ot::DataPollSender::HandlePollSent(ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned int a3)
{
  unsigned int v21 = a1;
  uint64_t v20 = a2;
  unsigned int v19 = a3;
  ot::Mac::Address::Address((ot::Mac::Address *)v18);
  char v17 = 0;
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    if (!ot::Mac::Frame::IsEmpty(v20))
    {
      ot::Mac::Frame::GetDstAddr(v20, (ot::Mac::Address *)v18);
      IgnoreError();
      unsigned int v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
      ot::MeshForwarder::UpdateNeighborOnSentFrame(v3, v20, v19, (ot::Mac::Address *)v18, 1);
    }

    Parent  = ot::DataPollSender::GetParent(a1);
    if (ot::Neighbor::IsStateInvalid(Parent))
    {
      ot::DataPollSender::StopPolling(a1);
      int v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      ot::Mle::Mle::BecomeDetached(v5);
      IgnoreError();
    }

    else
    {
      if (v19 <= 0x1DuLL) {
        __asm { BR              X8 }
      }

      *((_BYTE *)a1 + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_BYTE *)a1 + 41) & 0xF0 | ((*((_BYTE *)a1 + 41) & 0xF) + 1) & 0xF;
      ot::Mac::Frame::GetHeaderIe(v20, 0x1Au);
      char v6 = 15;
      if (!v7) {
        char v6 = 4;
      }
      unsigned __int8 v16 = v6;
      char v8 = ot::ErrorToString(v19);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DataPollSender",  "Failed to send data poll, error:%s, retx:%d/%d",  v9,  v10,  v11,  v12,  v13,  v14,  v8);
      if (v16 <= (*((_BYTE *)a1 + 41) & 0xF))
      {
        *((_BYTE *)a1 + 40) &= ~4u;
        *((_BYTE *)a1 + 41) &= 0xF0u;
        char v17 = 1;
      }

      else if ((*((_BYTE *)a1 + 40) & 4) == 0)
      {
        *((_BYTE *)a1 + 40)  = *((_BYTE *)a1 + 40) & 0xFB | 4;
        char v17 = 1;
      }

      if ((v17 & 1) != 0) {
        ot::DataPollSender::ScheduleNextPoll(a1, 1);
      }
    }
  }

BOOL ot::Neighbor::IsStateInvalid(ot::Neighbor *this)
{
  return (*((_BYTE *)this + 98) & 0xF) == 0;
}

{
  return __ZNK2ot8Neighbor14IsStateInvalidEv(this);
}

void ot::Mac::Frame::GetHeaderIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
}

{
  __ZN2ot3Mac5Frame11GetHeaderIeEh(this, a2);
}

void ot::DataPollSender::HandlePollTimeout( ot::DataPollSender *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    *((_BYTE *)this + 40)  = *((_BYTE *)this + 40) & 0x87 | (8 * ((((*((_BYTE *)this + 40) >> 3) & 0xF) + 1) & 0xF));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DataPollSender",  "Data poll timeout, retry:%d/%d",  a3,  a4,  a5,  a6,  a7,  a8,  (*((_BYTE *)this + 40) >> 3) & 0xF);
    if (((*((_BYTE *)this + 40) >> 3) & 0xFu) >= 5)
    {
      *((_BYTE *)this + 40) &= 0x87u;
    }

    else
    {
      ot::DataPollSender::SendDataPoll(this, v8, v9, v10, v11, v12, v13, v14);
      IgnoreError();
    }
  }

void ot::DataPollSender::ProcessRxFrame(ot::DataPollSender *this, const ot::Mac::RxFrame *a2)
{
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    *((_BYTE *)this + 40) &= 0x87u;
    if (ot::Mac::Frame::GetFramePending(a2))
    {
      ot::DataPollSender::SendDataPoll(this, v2, v3, v4, v5, v6, v7, v8);
      IgnoreError();
    }
  }

BOOL ot::Mac::Frame::GetFramePending(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsFramePending((ot::Mac::Frame *)FrameControlField);
}

{
  return __ZNK2ot3Mac5Frame15GetFramePendingEv(this);
}

void ot::DataPollSender::ProcessTxDone( ot::InstanceLocator *a1, ot::Mac::Frame *a2, ot::Mac::Frame *a3, int a4)
{
  BOOL v14 = 0;
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
    Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v4);
    if (ot::Neighbor::IsEnhancedKeepAliveSupported(Parent) && ot::Mac::Frame::GetSecurityEnabled(a2))
    {
      if ((*((_BYTE *)a2 + 45) & 2) != 0) {
        BOOL v14 = ot::Mac::Frame::GetHeaderIe(a2, 0x1Au) != 0;
      }
      if (!a4 && a3)
      {
        *((_BYTE *)a1 + 40) &= 0x87u;
        if (ot::Mac::Frame::GetFramePending(a3)) {
          BOOL v14 = 1;
        }
        else {
          ot::DataPollSender::ResetKeepAliveTimer(a1);
        }
      }

      if (v14)
      {
        ot::DataPollSender::SendDataPoll(a1, v6, v7, v8, v9, v10, v11, v12);
        IgnoreError();
      }
    }
  }

BOOL ot::Neighbor::IsEnhancedKeepAliveSupported(ot::Neighbor *this)
{
  BOOL v2 = 0;
  if ((*((_BYTE *)this + 98) & 0xF) != 0) {
    return *((unsigned __int16 *)this + 52) >= 3u;
  }
  return v2;
}

{
  return __ZNK2ot8Neighbor28IsEnhancedKeepAliveSupportedEv(this);
}

uint64_t ot::DataPollSender::ResetKeepAliveTimer(ot::DataPollSender *this)
{
  uint64_t result = ot::Timer::IsRunning((ot::DataPollSender *)((char *)this + 16));
  if ((result & 1) != 0)
  {
    int v2 = *((_DWORD *)this + 1);
    uint64_t result = ot::DataPollSender::GetDefaultPollPeriod(this);
    if (v2 == (_DWORD)result)
    {
      *(_DWORD *)this  = ot::TimerMilli::GetNow((ot::TimerMilli *)result);
      return ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)this + 16), *(_DWORD *)this, *((_DWORD *)this + 1));
    }
  }

  return result;
}

ot::DataPollSender *ot::DataPollSender::RecalculatePollPeriod(ot::DataPollSender *this)
{
  if ((*((_BYTE *)this + 40) & 1) != 0) {
    return (ot::DataPollSender *)ot::DataPollSender::ScheduleNextPoll(this, 1);
  }
  return this;
}

ot::DataPollSender *ot::DataPollSender::SetAttachMode(ot::DataPollSender *this, char a2)
{
  if (((*((_BYTE *)this + 40) & 2) != 0) != (a2 & 1))
  {
    *((_BYTE *)this + 40)  = *((_BYTE *)this + 40) & 0xFD | (2 * (a2 & 1));
    if ((*((_BYTE *)this + 40) & 1) != 0) {
      return (ot::DataPollSender *)ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }

  return this;
}

uint64_t ot::DataPollSender::SendFastPolls(uint64_t this, unsigned __int8 a2)
{
  unsigned __int8 v3 = a2;
  BOOL v2 = *(_BYTE *)(this + 41) >> 4 == 0;
  if (!a2) {
    unsigned __int8 v3 = 8;
  }
  if (v3 > 0xFu) {
    unsigned __int8 v3 = 15;
  }
  if (v3 > *(_BYTE *)(this + 41) >> 4) {
    *(_BYTE *)(this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *(_BYTE *)(this + 41) & 0xF | (16 * (v3 & 0xF));
  }
  if ((*(_BYTE *)(this + 40) & 1) != 0 && v2) {
    return ot::DataPollSender::ScheduleNextPoll((ot::DataPollSender *)this, 1);
  }
  return this;
}

uint64_t ot::DataPollSender::StopFastPolls(uint64_t this)
{
  if (*(_DWORD *)(this + 8) >> 26 && (*(_DWORD *)(this + 8) >> 26) < 0x3Fu)
  {
    *(_DWORD *)(this + 8)  = *(_DWORD *)(this + 8) & 0x3FFFFFF | ((((*(_DWORD *)(this + 8) >> 26) - 1) & 0x3F) << 26);
    if (!(*(_DWORD *)(this + 8) >> 26))
    {
      *(_BYTE *)(this + 41) &= 0xFu;
      return ot::DataPollSender::ScheduleNextPoll((ot::DataPollSender *)this, 1);
    }
  }

  return this;
}

uint64_t ot::DataPollSender::CalculatePollPeriod(ot::DataPollSender *this)
{
  DefaultPollPeriod  = ot::DataPollSender::GetDefaultPollPeriod(this);
  if ((*((_BYTE *)this + 40) & 2) != 0) {
    DefaultPollPeriod  = ot::Min<unsigned int>(DefaultPollPeriod, 0x64u);
  }
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
    DefaultPollPeriod  = ot::Min<unsigned int>(DefaultPollPeriod, 0x3E8u);
    uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if (ot::Mac::Mac::GetCslPeriodMs(v1))
    {
      BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      CslPeriodMs  = ot::Mac::Mac::GetCslPeriodMs(v2);
      DefaultPollPeriod  = ot::Min<unsigned int>(DefaultPollPeriod, CslPeriodMs);
    }
  }

  if (*((_BYTE *)this + 41) >> 4) {
    DefaultPollPeriod  = ot::Min<unsigned int>(DefaultPollPeriod, 0xBCu);
  }
  if ((*((_DWORD *)this + 2) & 0x3FFFFFF) != 0) {
    DefaultPollPeriod  = ot::Min<unsigned int>(DefaultPollPeriod, *((_DWORD *)this + 2) & 0x3FFFFFF);
  }
  if (!DefaultPollPeriod) {
    return 10;
  }
  return DefaultPollPeriod;
}

uint64_t ot::Mac::Mac::GetCslPeriodMs(ot::Mac::Mac *this)
{
  return 160 * *((unsigned __int16 *)this + 17) / 0x3E8;
}

{
  return __ZNK2ot3Mac3Mac14GetCslPeriodMsEv(this);
}

ot::Mac::Frame *ot::DataPollSender::PrepareDataRequest(ot::DataPollSender *this, ot::Mac::TxFrames *a2)
{
  uint64_t v18 = this;
  char v17 = a2;
  TxFrame  = 0LL;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v14);
  if (!ot::DataPollSender::GetPollDestinationAddress(this, (uint64_t)v15, &v12))
  {
    TxFrame  = (ot::Mac::Frame *)ot::Mac::TxFrames::GetTxFrame((uint64_t)v17, v12);
    if (ot::Mac::Address::IsExtended((ot::Mac::Address *)v15))
    {
      BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v2);
      ot::Mac::Address::SetExtended((uint64_t)v14, ExtAddress);
    }

    else
    {
      uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ShortAddress  = ot::Mac::Mac::GetShortAddress(v4);
      ot::Mac::Address::SetShort((uint64_t)v14, ShortAddress);
    }

    uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    v13[0]  = ot::Mac::Mac::GetPanId(v6);
    uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    v13[1]  = ot::Mac::Mac::GetPanId(v7);
    uint64_t v8 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::PrepareMacHeaders(v8, TxFrame, 3, (uint64_t)v14, v13, 5, 8, 0LL);
    ot::Mac::Frame::GetHeaderIe(TxFrame, 0x1Au);
    if (v9) {
      ot::Mac::TxFrames::SetMaxFrameRetries(v17, 0);
    }
    ot::Mac::Frame::SetCommandId(TxFrame, 4);
    IgnoreError();
  }

  return TxFrame;
}

ot::Mac::Addresses *ot::Mac::Addresses::Addresses(ot::Mac::Addresses *this)
{
  return this;
}

{
  ot::Mac::Address::Address(this);
  ot::Mac::Address::Address((ot::Mac::Addresses *)((char *)this + 10));
  return this;
}

uint64_t ot::Mac::TxFrames::SetMaxFrameRetries(ot::Mac::TxFrames *this, char a2)
{
  return ot::Mac::TxFrame::SetMaxFrameRetries(*((void *)this + 1), a2);
}

  ;
}

{
  return __ZN2ot3Mac8TxFrames18SetMaxFrameRetriesEh(this, a2);
}

BOOL ot::Mac::Frame::IsFramePending(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 16) != 0;
}

{
  return __ZN2ot3Mac5Frame14IsFramePendingEt(this);
}

uint64_t ot::Mac::TxFrame::SetMaxFrameRetries(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = a2;
  return this;
}

{
  return __ZN2ot3Mac7TxFrame18SetMaxFrameRetriesEh(this, a2);
}

uint64_t ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
  return ((uint64_t (*)(uint64_t))ot::DataPollSender::HandlePollTimer)(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::DataPollSender>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14DataPollSenderEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::RadioSelector>(uint64_t a1)
{
  return a1 + 159328;
}

{
  return __ZN2ot8Instance3GetINS_13RadioSelectorEEERT_v(a1);
}

ot::Mac::LinkRaw *ot::Mac::LinkRaw::LinkRaw(ot::Mac::LinkRaw *this, ot::Instance *a2)
{
  *(_BYTE *)this  = 11;
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = -1;
  *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0LL;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  *((void *)this + 3)  = 0LL;
  *((void *)this + ++*(_WORD *)(this + 4) = ot::Instance::Get<ot::Mac::SubMac>((uint64_t)a2);
  ot::Mac::LinkRaw::Init((uint64_t)this);
  return this;
}

{
  ot::Mac::LinkRaw::LinkRaw(this, a2);
  return this;
}

uint64_t ot::Mac::LinkRaw::Init(uint64_t this)
{
  *(void *)(this + 2++*(_WORD *)(this + 4) = 0LL;
  *(void *)(this + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = 0LL;
  *(void *)(this + 8)  = 0LL;
  *(_BYTE *)this  = 11;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
  *(void *)(this + 8)  = 0LL;
  return this;
}

uint64_t ot::Mac::LinkRaw::SetReceiveDone( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v13[4]  = 0;
  *(_DWORD *)uint64_t v13 = a2 != 0;
  uint64_t v8 = "true";
  if (!a2) {
    uint64_t v8 = "false";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkRaw", "Enabled(%s)", a3, a4, a5, a6, a7, a8, (char)v8);
  uint64_t v9 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  if ((ot::ThreadNetif::IsUp(v9) & 1) != 0)
  {
    *(_DWORD *)&v13[1]  = 13;
  }

  else if ((v13[0] & 1) != 0 || !ot::Mac::SubMac::IsTransmittingOrScanning(*(ot::Mac::SubMac **)(a1 + 32)))
  {
    uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
    ot::Mac::Mac::SetEnabled(v10, (v13[0] ^ 1) & 1);
    *(void *)(a1 + 8)  = a2;
  }

  else
  {
    *(_DWORD *)&v13[1]  = 5;
  }

  return *(unsigned int *)&v13[1];
}

BOOL ot::Mac::SubMac::IsTransmittingOrScanning(ot::Mac::SubMac *this)
{
  BOOL v2 = 1;
  if (*((_BYTE *)this + 1) != 4) {
    return *((_BYTE *)this + 1) == 5;
  }
  return v2;
}

{
  return __ZNK2ot3Mac6SubMac24IsTransmittingOrScanningEv(this);
}

uint64_t ot::Mac::LinkRaw::SetPanId(ot::Mac::SubMac **this, __int16 a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this))
  {
    ot::Mac::SubMac::SetPanId(this[4], a2);
    *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = a2;
  }

  else
  {
    return 13;
  }

  return v4;
}

uint64_t ot::Mac::LinkRaw::SetChannel(ot::Mac::LinkRaw *this, char a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled(this)) {
    *(_BYTE *)this  = a2;
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::SetExtAddress(ot::Mac::SubMac **this, const ot::Mac::ExtAddress *a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    ot::Mac::SubMac::SetExtAddress(this[4], a2);
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::SetShortAddress(ot::Mac::SubMac **this, __int16 a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    ot::Mac::SubMac::SetShortAddress(this[4], a2);
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::Receive(ot::Mac::SubMac **this)
{
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    return ot::Mac::SubMac::Receive(this[4], *(_BYTE *)this);
  }
  else {
    return 13;
  }
}

void ot::Mac::LinkRaw::InvokeReceiveDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  if (a2) {
    __int16 v11 = *(_WORD *)(a2 + 8);
  }
  else {
    LOBYTE(v1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  }
  ot::ErrorToString(a3);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkRaw",  "ReceiveDone(%d bytes), error:%s",  v3,  v4,  v5,  v6,  v7,  v8,  v11);
  if (*((void *)a1 + 1))
  {
    if (!a3)
    {
      uint64_t v10 = (void (*)(void *, uint64_t, void))*((void *)a1 + 1);
      Instance  = ot::InstanceLocator::GetInstance(a1);
      v10(Instance, a2, 0LL);
    }
  }

uint64_t ot::Mac::LinkRaw::Transmit(uint64_t a1, uint64_t a2)
{
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)a1))
  {
    unsigned int v4 = ot::Mac::SubMac::Send(*(ot::Mac::SubMac **)(a1 + 32));
    if (!v4) {
      *(void *)(a1 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = a2;
    }
  }

  else
  {
    return 13;
  }

  return v4;
}

void ot::Mac::LinkRaw::InvokeTransmitDone(ot::InstanceLocator *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __int16 v12 = *(_WORD *)(a2 + 8);
  ot::ErrorToString(a4);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkRaw",  "LinkRaw::TransmitDone(%d bytes), error:%s",  v4,  v5,  v6,  v7,  v8,  v9,  v12);
  if (*((void *)a1 + 2))
  {
    __int16 v11 = (void (*)(void *, uint64_t, uint64_t, void))*((void *)a1 + 2);
    Instance  = ot::InstanceLocator::GetInstance(a1);
    v11(Instance, a2, a3, a4);
    *((void *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  }

uint64_t ot::Mac::LinkRaw::EnergyScan(uint64_t a1, unsigned __int8 a2, unsigned __int16 a3, uint64_t a4)
{
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)a1))
  {
    unsigned int v6 = ot::Mac::SubMac::EnergyScan(*(ot::Mac::SubMac **)(a1 + 32), a2, a3);
    if (!v6) {
      *(void *)(a1 + 2++*(_WORD *)(this + 4) = a4;
    }
  }

  else
  {
    return 13;
  }

  return v6;
}

uint64_t ot::Mac::LinkRaw::InvokeEnergyScanDone(ot::Mac::LinkRaw *this, char a2)
{
  uint64_t result = ot::Mac::LinkRaw::IsEnabled(this);
  if ((result & 1) != 0)
  {
    if (*((void *)this + 3))
    {
      uint64_t v4 = (uint64_t (*)(void *, void))*((void *)this + 3);
      Instance  = ot::InstanceLocator::GetInstance(this);
      uint64_t result = v4(Instance, a2);
      *((void *)this + 3)  = 0LL;
    }
  }

  return result;
}

uint64_t ot::Mac::LinkRaw::SetMacKey( ot::Mac::SubMac **this, unsigned __int8 a2, unsigned __int8 a3, __n128 *a4, __n128 *a5, __n128 *a6)
{
  unsigned int v8 = 0;
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v16);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v15);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v14);
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this))
  {
    ot::Mac::KeyMaterial::SetFrom(&v16, a4);
    ot::Mac::KeyMaterial::SetFrom(&v15, a5);
    ot::Mac::KeyMaterial::SetFrom(&v14, a6);
    ot::Mac::SubMac::SetMacKey( this[4],  a2,  a3,  (const ot::Mac::KeyMaterial *)&v16,  (const ot::Mac::KeyMaterial *)&v15,  (const ot::Mac::KeyMaterial *)&v14);
  }

  else
  {
    return 13;
  }

  return v8;
}

ot::Mac::KeyMaterial *ot::Mac::KeyMaterial::KeyMaterial(ot::Mac::KeyMaterial *this)
{
  return this;
}

{
  void *v1;
  ot::Mac::KeyMaterial::GetKey(this);
  ot::Clearable<ot::Mac::Key>::Clear(v1);
  return this;
}

  ;
}

uint64_t ot::Mac::LinkRaw::SetMacFrameCounter(ot::Mac::SubMac **this, unsigned int a2, char a3)
{
  char v6 = a3 & 1;
  unsigned int v5 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    ot::Mac::SubMac::SetFrameCounter(this[4], a2, v6 & 1);
  }
  else {
    return 13;
  }
  return v5;
}

void ot::Mac::LinkRaw::RecordFrameTransmitStatus(uint64_t a1, ot::Mac::TxFrame *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    char v10 = ot::ErrorToString(a4);
    ot::Mac::TxFrame::GetMaxFrameRetries(a2);
    ot::Mac::Frame::ToInfoString(a2, (ot::StringWriter *)v12);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"LinkRaw",  "Frame tx failed, error:%s, retries:%d/%d, %s",  v4,  v5,  v6,  v7,  v8,  v9,  v10);
  }

uint64_t ot::Mac::TxFrame::GetMaxFrameRetries(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 41);
}

{
  return __ZNK2ot3Mac7TxFrame18GetMaxFrameRetriesEv(this);
}

uint64_t ot::String<(unsigned short)150>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt150EE9AsCStringEv(a1);
}

void *ot::Clearable<ot::Mac::Key>::Clear(void *result)
{
  *uint64_t result = 0LL;
  result[1]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Mac3KeyEE5ClearEv(result);
}

uint64_t ot::Mac::Mac::PerformNextOperation(uint64_t this)
{
  uint64_t v12 = this;
  uint64_t v10 = this;
  if (!*(_BYTE *)(this + 1))
  {
    if ((ot::Mac::Mac::IsEnabled((ot::Mac::Mac *)this) & 1) != 0)
    {
      this  = ot::Mac::Mac::IsPending(v10, 6);
      if ((this & 1) != 0)
      {
        *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 6;
      }

      else
      {
        this  = ot::Mac::Mac::IsPending(v10, 8);
        char v9 = 0;
        if ((this & 1) != 0)
        {
          int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)this);
          this  = ot::Time::operator>=(&Now, (int *)(v10 + 28));
          char v9 = this;
        }

        if ((v9 & 1) != 0)
        {
          *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 8;
        }

        else
        {
          this  = ot::Mac::Mac::IsPending(v10, 1);
          if ((this & 1) != 0)
          {
            *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 1;
          }

          else
          {
            this  = ot::Mac::Mac::IsPending(v10, 2);
            if ((this & 1) != 0)
            {
              *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 2;
            }

            else
            {
              this  = ot::Mac::Mac::IsPending(v10, 3);
              if ((this & 1) != 0)
              {
                *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 3;
              }

              else
              {
                this  = ot::Mac::Mac::IsPending(v10, 7);
                if ((this & 1) != 0)
                {
                  *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 7;
                }

                else if (ot::Mac::Mac::IsPending(v10, 5) {
                       && ((this  = ot::Mac::Mac::IsPending(v10, 4), (this & 1) == 0) || (*(_BYTE *)v10 & 2) != 0))
                }
                {
                  *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 5;
                }

                else
                {
                  this  = ot::Mac::Mac::IsPending(v10, 4);
                  if ((this & 1) != 0)
                  {
                    *(_BYTE *)(v10 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 4;
                    this  = ot::Mac::Mac::IsPending(v10, 5);
                    if ((this & 1) != 0) {
                      *(_BYTE *)uint64_t v10 = *(_BYTE *)v10 & 0xFD | 2;
                    }
                  }
                }
              }
            }
          }
        }
      }

      if (*(_BYTE *)(v10 + 1))
      {
        ot::Mac::Mac::ClearPending(v10, *(_BYTE *)(v10 + 1));
        char v1 = ot::Mac::Mac::OperationToString(*(_BYTE *)(v10 + 1));
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Starting operation %s pendOp:0x%x",  v2,  v3,  v4,  v5,  v6,  v7,  v1);
        this  = ot::TimerMilli::Stop((ot::TimerMilli *)(v10 + 6320));
      }

      unint64_t v8 = *(unsigned __int8 *)(v10 + 1);
      if (v8 <= 8) {
        __asm { BR              X8 }
      }
    }

    else
    {
      *(_WORD *)(v10 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
      return ot::TimerMilli::Stop((ot::TimerMilli *)(v10 + 6320));
    }
  }

  return this;
}

uint64_t ot::Mac::Mac::HandleTimer( ot::Mac::Mac *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v19 = *((unsigned __int8 *)this + 1);
  if (*((_BYTE *)this + 1))
  {
    if (v19 == 1)
    {
      return ot::Mac::Mac::PerformActiveScan(this);
    }

    else
    {
      if (v19 != 6) {
        __assert_rtn("HandleTimer", "mac.cpp", 2046, "false");
      }
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Data poll timeout",  a3,  a4,  a5,  a6,  a7,  a8,  v17);
      ot::Mac::Mac::FinishOperation(this);
      char v9 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
      ot::DataPollSender::HandlePollTimeout(v9, v10, v11, v12, v13, v14, v15, v16);
      return ot::Mac::Mac::PerformNextOperation((uint64_t)this);
    }
  }

  else
  {
    uint64_t result = ot::Mac::Mac::IsPending((uint64_t)this, 8);
    if ((result & 1) != 0) {
      return ot::Mac::Mac::PerformNextOperation((uint64_t)this);
    }
  }

  return result;
}

ot::Mac::Mac *ot::Mac::Mac::Mac(ot::Mac::Mac *this, ot::Instance *a2)
{
  *(_BYTE *)this &= ~1u;
  *(_BYTE *)this &= ~2u;
  *(_BYTE *)this &= ~4u;
  *(_BYTE *)this &= ~8u;
  *(_BYTE *)this &= ~0x10u;
  *(_BYTE *)this &= ~0x20u;
  *((_BYTE *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  Uint8  = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint8(v2);
  *((_BYTE *)this + ++*(_WORD *)(this + 4) = (_BYTE)Uint8;
  *((_BYTE *)this + 5)  = ot::Random::NonCrypto::GetUint8(Uint8);
  *((_BYTE *)this + 6)  = 0;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = -1;
  *((_BYTE *)this + 10)  = 11;
  *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 11;
  uint64_t v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  SupportedChannelMasunsigned int k = ot::Radio::GetSupportedChannelMask(v4);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::Mac *)((char *)this + 12), SupportedChannelMask);
  *((_BYTE *)this + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = 11;
  *((_WORD *)this + ot::Mle::Tlv::SetType(this, 9) = 0;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::Mac *)((char *)this + 20));
  *((_BYTE *)this + 2++*(_WORD *)(this + 4) = 15;
  *((_BYTE *)this + 25)  = 0;
  *((_BYTE *)this + 26)  = 3;
  ot::Time::Time((ot::Mac::Mac *)((char *)this + 28), -1);
  *((_BYTE *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_WORD *)this + 17)  = 0;
  *((_BYTE *)this + 36)  = 11;
  *((void *)this + 5)  = 0LL;
  *((void *)this + 6)  = 0LL;
  ot::Mac::Links::Links((ot::Mac::Mac *)((char *)this + 56), a2);
  ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::TaskletIn((void *)this + 788, (uint64_t)a2);
  ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::TimerMilliIn((ot::Mac::Mac *)((char *)this + 6320), a2);
  *((_DWORD *)this + 163ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_WORD *)this + 3267)  = 0;
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::CountHistogram((char *)this + 6740);
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::CountHistogram((char *)this + 6844);
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::CountHistogram((char *)this + 6948);
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram((char *)this + 7204);
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram((char *)this + 7260);
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram((char *)this + 7316);
  ot::Power::Domain::Domain((ot::Mac::Mac *)((char *)this + 7372));
  ot::Power::Domain::Domain((ot::Mac::Mac *)((char *)this + 7373));
  *((_DWORD *)this + 184++*(_WORD *)(this + 4) = 0;
  ot::Mac::Filter::Filter((ot::Mac::Mac *)((char *)this + 7380));
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::Mac *)((char *)this + 7704));
  ot::Mac::ExtAddress::GenerateRandom((ot::Mac::ExtAddress *)v12);
  ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 3266);
  ot::Mac::Mac::ResetCounters(this);
  ot::Mac::Mac::SetEnabled(this, 1);
  uint64_t v6 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ot::KeyManager::UpdateKeyMaterial(v6);
  ot::Mac::Mac::SetPanId(this, *((_WORD *)this + 4));
  ot::Mac::Mac::SetExtAddress(this, (const ot::Mac::ExtAddress *)v12);
  ShortAddress  = ot::Mac::Mac::GetShortAddress(this);
  ot::Mac::Mac::SetShortAddress(this, ShortAddress);
  ot::AsCoreType<otMacKey>((uint64_t)&ot::Mac::Mac::Mac(ot::Instance &)::sMode2Key);
  ot::Mac::KeyMaterial::SetFrom((__n128 *)((char *)this + 7704), v8);
  *((_BYTE *)this + 7720)  = 0;
  return this;
}

{
  ot::Mac::Mac::Mac(this, a2);
  return this;
}

uint64_t ot::Radio::GetSupportedChannelMask(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetSupportedChannelMask((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio23GetSupportedChannelMaskEv(this);
}

ot::Mac::ChannelMask *ot::Mac::ChannelMask::ChannelMask(ot::Mac::ChannelMask *this)
{
  return this;
}

void *ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::HandleTasklet);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::HandleTimer);
  return a1;
}

void *ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::CountHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear(a1);
  return a1;
}

void *ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::CountHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear(a1);
  return a1;
}

void *ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear(a1);
  return a1;
}

_WORD *ot::Clearable<ot::SuccessRateTracker>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_18SuccessRateTrackerEE5ClearEv(result);
}

void ot::Mac::Mac::SetEnabled(ot::Mac::Mac *this, char a2)
{
  *(_BYTE *)this  = *(_BYTE *)this & 0xFE | a2 & 1;
  if ((a2 & 1) != 0) {
    ot::Mac::Links::Enable((ot::Mac::Mac *)((char *)this + 56));
  }
  else {
    ot::Mac::Links::Disable((ot::Mac::Mac *)((char *)this + 56));
  }
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::KeyManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_10KeyManagerEEERT_v(a1);
}

uint64_t ot::Mac::Mac::SetPanId(ot::Mac::Mac *this, __int16 a2)
{
  uint64_t v6 = this;
  __int16 v5 = a2;
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  uint64_t result = ot::Notifier::Update<unsigned short>(v2, (_WORD *)this + 4, &v5, 0x8000LL);
  if (!(_DWORD)result) {
    return ot::Mac::Links::SetPanId((ot::Mac::Mac *)((char *)this + 56), *((_WORD *)this + 4));
  }
  return result;
}

void ot::Mac::Mac::SetShortAddress(ot::Mac::Mac *this, __int16 a2)
{
}

{
  __ZN2ot3Mac3Mac15SetShortAddressEt(this, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMacKey>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

void ot::Mac::Links::Enable(ot::Mac::Links *this)
{
}

{
  __ZN2ot3Mac5Links6EnableEv(this);
}

void ot::Mac::Links::Disable(ot::Mac::Links *this)
{
}

{
  __ZN2ot3Mac5Links7DisableEv(this);
}

BOOL ot::Mac::Mac::ResetDirectTxToSEDFlag(ot::Mac::Mac *this)
{
  uint64_t v10 = this;
  char v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v8 = ot::ChildTable::Iterate(v1, 5);
  char v9 = (ot::ChildTable::IteratorBuilder *)&v8;
  v7[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v8);
  v7[1]  = v2;
  v6[0]  = ot::ChildTable::IteratorBuilder::end(v9);
  v6[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v7, v6);
    if (!result) {
      break;
    }
    __int16 v5 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v7);
    ot::Child::SetDirectTxToSEDDetected((uint64_t)v5, 0);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v7);
  }

  return result;
}

uint64_t ot::Child::SetDirectTxToSEDDetected(uint64_t this, char a2)
{
  *(_BYTE *)(this + 57ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2 & 1;
  return this;
}

{
  return __ZN2ot5Child24SetDirectTxToSEDDetectedEb(this, a2);
}

_BYTE *ot::Mac::Mac::RegenerateExtAddr(ot::Mac::Mac *this)
{
  return ot::Mac::Mac::SetExtAddress(this, (const ot::Mac::ExtAddress *)v3);
}

uint64_t ot::Mac::Mac::ActiveScan(ot::Mac::Mac *a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = 0;
  if ((ot::Mac::Mac::IsEnabled(a1) & 1) != 0)
  {
    if (ot::Mac::Mac::IsActiveScanInProgress(a1) || ot::Mac::Mac::IsEnergyScanInProgress(a1))
    {
      return 5;
    }

    else
    {
      *((void *)a1 + 5)  = a4;
      *((void *)a1 + 6)  = a5;
      if (!a3) {
        a3  = 300;
      }
      ot::Mac::Mac::Scan((uint64_t)a1, 1, a2, a3);
    }
  }

  else
  {
    return 13;
  }

  return v7;
}

void ot::Mac::Mac::Scan(uint64_t a1, char a2, unsigned int a3, __int16 a4)
{
  Masunsigned int k = a3;
  *(_WORD *)(a1 + 18)  = a4;
  *(_BYTE *)(a1 + ot::AsCoreType<otIp6Address>((uint64_t)this + 16) = -1;
  if (!a3)
  {
    SupportedChannelMasunsigned int k = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask((ot::Mac::Mac *)a1);
    Masunsigned int k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
  }

  ot::Mac::ChannelMask::SetMask((_DWORD *)(a1 + 20), Mask);
  ot::Mac::ChannelMask::Intersect((_DWORD *)(a1 + 20), (const ot::Mac::ChannelMask *)(a1 + 12));
  ot::Mac::Mac::StartOperation(a1, a2);
}

uint64_t ot::Mac::Mac::EnergyScan(ot::Mac::Mac *a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = 0;
  if ((ot::Mac::Mac::IsEnabled(a1) & 1) != 0)
  {
    if (ot::Mac::Mac::IsActiveScanInProgress(a1) || ot::Mac::Mac::IsEnergyScanInProgress(a1))
    {
      return 5;
    }

    else
    {
      *((void *)a1 + 5)  = a4;
      *((void *)a1 + 6)  = a5;
      ot::Mac::Mac::Scan((uint64_t)a1, 2, a2, a3);
    }
  }

  else
  {
    return 13;
  }

  return v7;
}

_DWORD *ot::Mac::ChannelMask::SetMask(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot3Mac11ChannelMask7SetMaskEj(this, a2);
}

_DWORD *ot::Mac::ChannelMask::Intersect(_DWORD *this, const ot::Mac::ChannelMask *a2)
{
  *this &= *(_DWORD *)a2;
  return this;
}

{
  return __ZN2ot3Mac11ChannelMask9IntersectERKS1_(this, a2);
}

void ot::Mac::Mac::StartOperation(uint64_t a1, char a2)
{
  if (a2)
  {
    ot::Mac::Mac::SetPending(a1, a2);
    char v2 = ot::Mac::Mac::OperationToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Requesting operation %s pendOp:0x%x",  v3,  v4,  v5,  v6,  v7,  v8,  v2);
  }

  if (!*(_BYTE *)(a1 + 1)) {
    ot::Tasklet::Post((ot::Tasklet *)(a1 + 6304));
  }
}

uint64_t ot::Mac::Mac::IsInTransmitState(ot::Mac::Mac *this)
{
  char v4 = 0;
  unsigned int v3 = *((unsigned __int8 *)this + 1);
  if (v3 <= 2) {
    goto LABEL_9;
  }
  if (v3 - 3 <= 2)
  {
LABEL_8:
    char v4 = 1;
    return v4 & 1;
  }

  if (v3 == 6)
  {
LABEL_9:
    char v4 = 0;
    return v4 & 1;
  }

  if (v3 == 8 || v3 == 7) {
    goto LABEL_8;
  }
  return v4 & 1;
}

uint64_t ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::Mac *a1, ot::Mac::Frame *a2, char *a3)
{
  int v31 = a1;
  uint64_t v30 = a2;
  int v29 = a3;
  SrcAddr  = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v27);
  char v26 = 0LL;
  Payload  = 0LL;
  memset(v29, 0, 0x3CuLL);
  if (v30)
  {
    if (ot::Mac::Frame::GetType(v30))
    {
      return 6;
    }

    else
    {
      SrcAddr  = ot::Mac::Frame::GetSrcAddr(v30, (ot::Mac::Address *)v27);
      if (!SrcAddr)
      {
        if (ot::Mac::Address::IsExtended((ot::Mac::Address *)v27))
        {
          ot::Mac::Address::GetExtended((ot::Mac::Address *)v27);
          *(void *)int v29 = *v3;
          if (ot::Mac::Frame::GetSrcPanId(v30, (unsigned __int16 *)v29 + 25))
          {
            ot::Mac::Frame::GetDstPanId(v30, (unsigned __int16 *)v29 + 25);
            IgnoreError();
          }

          Channel  = ot::Mac::Frame::GetChannel(v30);
          v29[54]  = Channel;
          Rssunsigned __int8 i = ot::Mac::RxFrame::GetRssi(v30);
          v29[55]  = Rssi;
          Lqunsigned __int8 i = ot::Mac::RxFrame::GetLqi(v30);
          v29[56]  = Lqi;
          Payloadunsigned __int16 Length = ot::Mac::Frame::GetPayloadLength(v30);
          Payload  = (ot::Mac::Beacon *)ot::Mac::Frame::GetPayload(v30);
          char v26 = (ot::Mac::BeaconPayload *)ot::Mac::Beacon::GetPayload(Payload);
          if (PayloadLength >= 0x1EuLL && ot::Mac::Beacon::IsValid(Payload) && ot::Mac::BeaconPayload::IsValid(v26))
          {
            ProtocolVersion  = ot::Mac::BeaconPayload::GetProtocolVersion(v26);
            v29[57]  = v29[57] & 0xF0 | ProtocolVersion & 0xF;
            IsJoiningPermitted  = ot::Mac::BeaconPayload::IsJoiningPermitted(v26);
            v29[57]  = v29[57] & 0xBF | (IsJoiningPermitted << 6);
            IsNative  = ot::Mac::BeaconPayload::IsNative(v26);
            v29[57]  = v29[57] & 0xEF | (16 * IsNative);
            ot::AsCoreType<otNetworkName>((uint64_t)(v29 + 8));
            unsigned int v21 = v16;
            v23[0]  = ot::Mac::BeaconPayload::GetNetworkName(v26);
            v23[1]  = v17;
            ot::MeshCoP::NetworkName::Set(v21, (const ot::MeshCoP::NameData *)v23);
            IgnoreError();
            if ((ot::IsValidUtf8String((ot *)(v29 + 8), v18) & 1) == 0) {
              return 6;
            }
            ExtendedPanId  = (void *)ot::Mac::BeaconPayload::GetExtendedPanId(v26);
            *(void *)(v29 + 25)  = *ExtendedPanId;
          }

          ot::Mac::Mac::LogBeacon(a1, "Received", v7, v8, v9, v10, v11, v12);
          return SrcAddr;
        }

        return 6;
      }
    }
  }

  else
  {
    return 7;
  }

  return SrcAddr;
}

uint64_t ot::Mac::Frame::GetType(ot::Mac::Frame *this)
{
  return *(_BYTE *)ot::Mac::Frame::GetPsdu(this) & 7;
}

  ;
}

{
  return __ZNK2ot3Mac5Frame7GetTypeEv(this);
}

uint64_t ot::Mac::Frame::GetChannel(ot::Mac::Frame *this)
{
  return *((unsigned __int8 *)this + 10);
}

{
  return __ZNK2ot3Mac5Frame10GetChannelEv(this);
}

uint64_t ot::Mac::RxFrame::GetLqi(ot::Mac::RxFrame *this)
{
  return *((unsigned __int8 *)this + 30);
}

{
  return __ZNK2ot3Mac7RxFrame6GetLqiEv(this);
}

uint64_t ot::Mac::Beacon::GetPayload(ot::Mac::Beacon *this)
{
  return (uint64_t)this + 4;
}

{
  return (uint64_t)this + 4;
}

{
  return __ZN2ot3Mac6Beacon10GetPayloadEv(this);
}

{
  return __ZNK2ot3Mac6Beacon10GetPayloadEv(this);
}

BOOL ot::Mac::Beacon::IsValid(ot::Mac::Beacon *this)
{
  int v3 = *(unsigned __int16 *)this;
  BOOL v4 = 0;
  if (v3 == (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(4095LL))
  {
    BOOL v4 = 0;
    if (!*((_BYTE *)this + 2)) {
      return *((_BYTE *)this + 3) == 0;
    }
  }

  return v4;
}

{
  return __ZNK2ot3Mac6Beacon7IsValidEv(this);
}

BOOL ot::Mac::BeaconPayload::IsValid(ot::Mac::BeaconPayload *this)
{
  return *(_BYTE *)this == 3;
}

{
  return __ZNK2ot3Mac13BeaconPayload7IsValidEv(this);
}

uint64_t ot::Mac::BeaconPayload::GetProtocolVersion(ot::Mac::BeaconPayload *this)
{
  return (int)*((unsigned __int8 *)this + 1) >> 4;
}

{
  return __ZNK2ot3Mac13BeaconPayload18GetProtocolVersionEv(this);
}

BOOL ot::Mac::BeaconPayload::IsJoiningPermitted(ot::Mac::BeaconPayload *this)
{
  return (*((_BYTE *)this + 1) & 1) != 0;
}

{
  return __ZNK2ot3Mac13BeaconPayload18IsJoiningPermittedEv(this);
}

BOOL ot::Mac::BeaconPayload::IsNative(ot::Mac::BeaconPayload *this)
{
  return (*((_BYTE *)this + 1) & 8) != 0;
}

{
  return __ZNK2ot3Mac13BeaconPayload8IsNativeEv(this);
}

uint64_t ot::Mac::BeaconPayload::GetNetworkName(ot::Mac::BeaconPayload *this)
{
  return v2;
}

{
  return __ZNK2ot3Mac13BeaconPayload14GetNetworkNameEv(this);
}

uint64_t ot::Mac::BeaconPayload::GetExtendedPanId(ot::Mac::BeaconPayload *this)
{
  return (uint64_t)this + 18;
}

{
  return __ZNK2ot3Mac13BeaconPayload16GetExtendedPanIdEv(this);
}

void ot::Mac::Mac::LogBeacon( ot::Mac::Mac *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ot::Mac::Mac::UpdateScanChannel(ot::Mac::Mac *this)
{
  if ((ot::Mac::Mac::IsEnabled(this) & 1) != 0) {
    return ot::Mac::ChannelMask::GetNextChannel( (ot::Mac::Mac *)((char *)this + 20),  (unsigned __int8 *)this + 16);
  }
  else {
    return 11;
  }
}

uint64_t ot::Mac::Mac::PerformActiveScan(ot::Mac::Mac *this)
{
  return ot::Mac::Mac::PerformNextOperation(this);
}

uint64_t ot::Mac::Mac::BeginTransmit(ot::Mac::Mac *this)
{
  uint64_t v11 = this;
  BroadcastTxFrame  = 0LL;
  TxFrames  = (ot::Mac::TxFrames *)ot::Mac::Links::GetTxFrames((ot::Mac::Mac *)((char *)this + 56));
  ot::Mac::Address::Address((ot::Mac::Address *)v8);
  ot::Mac::Address::Address((ot::Mac::Address *)v7);
  uint64_t v6 = 0LL;
  unsigned int v5 = 0;
  v4[11]  = 0;
  v4[10]  = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v4);
  ot::Mac::TxFrames::Clear(TxFrames);
  ot::Mac::RadioTypes::Clear((_BYTE *)this + 7372);
  *((_DWORD *)this + 184++*(_WORD *)(this + 4) = 11;
  uint64_t result = ot::Mac::Mac::IsEnabled(this);
  if ((result & 1) != 0)
  {
    unint64_t v2 = *((unsigned __int8 *)this + 1) - 1;
    if (v2 <= 7) {
      __asm { BR              X8 }
    }

    __assert_rtn("BeginTransmit", "mac.cpp", 1364, "false");
  }

  if (!BroadcastTxFrame)
  {
    BroadcastTxFrame  = ot::Mac::TxFrames::GetBroadcastTxFrame(TxFrames);
    ot::Mac::Frame::SetLength((uint64_t)BroadcastTxFrame, 0);
    return ot::Mac::Mac::HandleTransmitDone(this, BroadcastTxFrame, 0LL, 11LL);
  }

  return result;
}

uint64_t ot::Mac::Links::SetPanId(ot::Mac::Links *this, __int16 a2)
{
  return ot::Trel::Link::SetPanId((uint64_t)this + 240, a2);
}

{
  return __ZN2ot3Mac5Links8SetPanIdEt(this, a2);
}

void ot::Mac::Mac::FinishOperation(ot::Mac::Mac *this)
{
  char v1 = ot::Mac::Mac::OperationToString(*((_BYTE *)this + 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Finishing operation %s pendOp:0x%x",  v2,  v3,  v4,  v5,  v6,  v7,  v1);
  *((_BYTE *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
}

uint64_t ot::Mac::Mac::ReportActiveScanResult(uint64_t this, const ot::Mac::RxFrame *a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 40))
  {
    if (a2)
    {
      this  = ot::Mac::Mac::ConvertBeaconToActiveScanResult((ot::Mac::Mac *)this, a2, v3);
      if (!(_DWORD)this) {
        return (*(uint64_t (**)(char *, void))(v2 + 40))(v3, *(void *)(v2 + 48));
      }
    }

    else
    {
      return (*(uint64_t (**)(void, void))(this + 40))(0LL, *(void *)(this + 48));
    }
  }

  return this;
}

uint64_t ot::Mac::Mac::PerformEnergyScan(ot::Mac::Mac *this)
{
  uint64_t result = ot::Mac::Mac::UpdateScanChannel(this);
  int v4 = result;
  if (!(_DWORD)result)
  {
    if (*((_WORD *)this + 9))
    {
      uint64_t result = ot::Mac::Links::EnergyScan( (ot::Mac::Mac *)((char *)this + 56),  *((_BYTE *)this + 16),  *((_WORD *)this + 9));
      int v4 = result;
    }

    else
    {
      do
      {
        ot::Mac::Links::Receive((ot::Mac::Mac *)((char *)this + 56), *((_BYTE *)this + 16));
        Rssunsigned __int8 i = ot::Mac::Links::GetRssi((ot::Mac::Mac *)((char *)this + 56));
        ot::Mac::Mac::ReportEnergyScanResult((uint64_t)this, Rssi);
        uint64_t result = ot::Mac::Mac::UpdateScanChannel(this);
        int v4 = result;
      }

      while (!(_DWORD)result);
    }
  }

  if (v4)
  {
    ot::Mac::Mac::FinishOperation(this);
    if (*((void *)this + 5)) {
      (*((void (**)(void, void))this + 5))(0LL, *((void *)this + 6));
    }
    return ot::Mac::Mac::PerformNextOperation(this);
  }

  return result;
}

void ot::Mac::Links::Receive(ot::Mac::Links *this, char a2)
{
}

{
  __ZN2ot3Mac5Links7ReceiveEh(this, a2);
}

uint64_t ot::Mac::Mac::ReportEnergyScanResult(uint64_t this, char a2)
{
  uint64_t v4 = this;
  char v3 = a2;
  if (*(void *)(this + 40))
  {
    if (v3 != 127)
    {
      v2[0]  = *(_BYTE *)(this + 16);
      v2[1]  = v3;
      return (*(uint64_t (**)(_BYTE *, void))(this + 40))(v2, *(void *)(this + 48));
    }
  }

  return this;
}

uint64_t ot::Mac::Links::GetRssi(ot::Mac::Links *this)
{
  return (char)ot::Mac::SubMac::GetRssi((ot::Mac::Links *)((char *)this + 8));
}

{
  return __ZNK2ot3Mac5Links7GetRssiEv(this);
}

uint64_t ot::Mac::Links::EnergyScan(ot::Mac::Links *this, unsigned __int8 a2, unsigned __int16 a3)
{
  return ot::Mac::SubMac::EnergyScan((ot::Mac::Links *)((char *)this + 8), a2, a3);
}

{
  return __ZN2ot3Mac5Links10EnergyScanEht(this, a2, a3);
}

uint64_t ot::Mac::Mac::EnergyScanDone(ot::Mac::Mac *this, char a2)
{
  return ot::Mac::Mac::PerformEnergyScan(this);
}

void ot::Mac::Mac::SetRxOnWhenIdle(ot::Mac::Mac *this, char a2)
{
  if (((*(_BYTE *)this & 4) != 0) != (a2 & 1))
  {
    *(_BYTE *)this  = *(_BYTE *)this & 0xFB | (4 * (a2 & 1));
    if ((*(_BYTE *)this & 4) != 0)
    {
      if (ot::Mac::Mac::IsPending((uint64_t)this, 6))
      {
        ot::TimerMilli::Stop((ot::Mac::Mac *)((char *)this + 6320));
        ot::Mac::Mac::ClearPending((uint64_t)this, 6);
      }

      if (*((_BYTE *)this + 1) == 6)
      {
        ot::TimerMilli::Stop((ot::Mac::Mac *)((char *)this + 6320));
        ot::Mac::Mac::FinishOperation(this);
        ot::Tasklet::Post((ot::Mac::Mac *)((char *)this + 6304));
      }
    }

    LOBYTE(vot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
    if ((*(_BYTE *)this & 4) == 0) {
      int v2 = (*(unsigned __int8 *)this >> 3) & 1;
    }
    ot::Mac::Links::SetRxOnWhenBackoff((ot::Mac::Mac *)((char *)this + 56), v2 & 1);
    ot::Mac::Mac::UpdateIdleMode(this);
  }

BOOL ot::Mac::Mac::IsPending(uint64_t a1, char a2)
{
  return (*(unsigned __int16 *)(a1 + 2) & (1 << a2)) != 0;
}

{
  return __ZNK2ot3Mac3Mac9IsPendingENS1_9OperationE(a1, a2);
}

uint64_t ot::Mac::Mac::ClearPending(uint64_t result, char a2)
{
  *(_WORD *)(result + 2) &= ~(unsigned __int16)(1 << a2);
  return result;
}

{
  return __ZN2ot3Mac3Mac12ClearPendingENS1_9OperationE(result, a2);
}

uint64_t ot::Mac::Links::SetRxOnWhenBackoff(ot::Mac::Links *this, char a2)
{
  return ot::Mac::SubMac::SetRxOnWhenBackoff((uint64_t)this + 8, a2 & 1);
}

{
  return __ZN2ot3Mac5Links18SetRxOnWhenBackoffEb(this, a2);
}

void ot::Mac::Mac::UpdateIdleMode(ot::Mac::Mac *this)
{
  BOOL v14 = 0;
  if ((*(_BYTE *)this & 4) == 0) {
    BOOL v14 = (*(_BYTE *)this & 8) == 0;
  }
  if (!*((_BYTE *)this + 1))
  {
    if (v14)
    {
      if (ot::Mac::Mac::IsCslEnabled(this))
      {
        ot::Mac::Links::CslSample((ot::Mac::Mac *)((char *)this + 56));
      }

      else
      {
        ot::Mac::Links::Sleep((ot::Mac::Mac *)((char *)this + 56));
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Idle mode: Radio sleeping pendOp:0x%x",  v1,  v2,  v3,  v4,  v5,  v6,  *((_WORD *)this + 1));
      }
    }

    else
    {
      ot::Mac::Links::Receive((ot::Mac::Mac *)((char *)this + 56), *((_BYTE *)this + 11));
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Idle mode: Radio receiving on channel %u pendOp:0x%x",  v7,  v8,  v9,  v10,  v11,  v12,  *((_BYTE *)this + 11));
    }
  }

uint64_t ot::Mac::Mac::SetPanChannel(ot::Mac::Mac *this, unsigned __int8 a2)
{
  uint64_t v7 = this;
  unsigned __int8 v6 = a2;
  unsigned int v5 = 0;
  if (ot::Mac::ChannelMask::ContainsChannel((ot::Mac::Mac *)((char *)this + 12), a2))
  {
    uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    if (!ot::Notifier::Update<unsigned char>(v2, (_BYTE *)this + 10, &v6, 0x4000LL))
    {
      ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 3266);
      if ((*(_BYTE *)this & 0x20) == 0)
      {
        *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_BYTE *)this + 10);
        ot::Mac::Mac::UpdateCsl(this, 0LL);
        ot::Mac::Mac::UpdateIdleMode(this);
      }
    }
  }

  else
  {
    return 7;
  }

  return v5;
}

uint64_t ot::Notifier::Update<unsigned char>(void *a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v5;
}

{
  return __ZN2ot8Notifier6UpdateIhEE7otErrorRT_RKS3_NS_5EventE(a1, a2, a3, a4);
}

void ot::Mac::Mac::UpdateCsl(ot::Mac::Mac *this, ot::Neighbor *a2)
{
  uint64_t v18 = this;
  uint64_t v17 = a2;
  uint64_t v15 = a2;
  if (ot::Mac::Mac::IsCslEnabled(this)) {
    CslPeriod  = ot::Mac::Mac::GetCslPeriod(this);
  }
  else {
    CslPeriod  = 0;
  }
  unsigned __int16 v14 = CslPeriod;
  else {
    CslChannel  = *((_BYTE *)this + 11);
  }
  char v13 = CslChannel;
  int v12 = 0;
  if (v15)
  {
    Parent  = v15;
  }

  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v2);
  }

  uint64_t v15 = Parent;
  else {
    unsigned __int16 Rloc16 = -2;
  }
  unsigned __int16 v16 = Rloc16;
  ExtAddress  = ot::Neighbor::GetExtAddress(v15);
  if ((ot::Mac::Links::UpdateCsl((uint64_t)this + 56, v14, v13, Rloc16, ExtAddress, &v12) & 1) != 0)
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (ot::Mle::Mle::IsChild(v4))
    {
      unsigned int v5 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
      ot::DataPollSender::RecalculatePollPeriod(v5);
      if (v14)
      {
        unsigned __int8 v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        ot::Mle::Mle::ScheduleChildUpdateRequest(v6);
      }
    }

    ot::Mac::Mac::UpdateIdleMode(this);
  }

uint64_t ot::Mac::Mac::SetTemporaryChannel(ot::Mac::Mac *this, unsigned __int8 a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::ChannelMask::ContainsChannel((ot::Mac::Mac *)((char *)this + 12), a2))
  {
    *(_BYTE *)this  = *(_BYTE *)this & 0xDF | 0x20;
    *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = a2;
    ot::Mac::Mac::UpdateIdleMode(this);
  }

  else
  {
    return 7;
  }

  return v4;
}

void ot::Mac::Mac::ClearTemporaryChannel(ot::Mac::Mac *this)
{
  if ((*(_BYTE *)this & 0x20) != 0)
  {
    *(_BYTE *)this &= ~0x20u;
    *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_BYTE *)this + 10);
    ot::Mac::Mac::UpdateIdleMode(this);
  }

void ot::Mac::Mac::SetSupportedChannelMask(ot::Mac::Mac *this, const ot::Mac::ChannelMask *a2)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  int v7 = *(_DWORD *)a2;
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  SupportedChannelMasunsigned int k = ot::Radio::GetSupportedChannelMask(v2);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v6, SupportedChannelMask);
  ot::Mac::ChannelMask::Intersect(&v7, (const ot::Mac::ChannelMask *)v6);
  unsigned int v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  ot::Notifier::Update<ot::Mac::ChannelMask>(v4, (_DWORD *)this + 3, &v7, 0x400000LL);
  IgnoreError();
}

uint64_t ot::Notifier::Update<ot::Mac::ChannelMask>(void *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Mac::ChannelMask::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v6;
}

{
  return __ZN2ot8Notifier6UpdateINS_3Mac11ChannelMaskEEE7otErrorRT_RKS5_NS_5EventE(a1, a2, a3, a4);
}

uint64_t ot::Notifier::Update<unsigned short>(void *a1, _WORD *a2, _WORD *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v5;
}

{
  return __ZN2ot8Notifier6UpdateItEE7otErrorRT_RKS3_NS_5EventE(a1, a2, a3, a4);
}

void ot::Mac::Mac::RequestDirectFrameTransmission(ot::Mac::Mac *this)
{
}

BOOL ot::Mac::Mac::IsActiveOrPending(uint64_t a1, unsigned __int8 a2)
{
  BOOL v3 = 1;
  return v3;
}

void ot::Mac::Mac::RequestIndirectFrameTransmission(ot::Mac::Mac *this)
{
}

void ot::Mac::Mac::RequestCslFrameTransmission(ot::Mac::Mac *this, int a2)
{
  unsigned int v6 = this;
  int v5 = a2;
  if ((*(_BYTE *)this & 1) != 0)
  {
    int Now = ot::TimerMilli::GetNow(this);
    int v4 = ot::Time::operator+(&Now, v5);
    *((_DWORD *)this + 7)  = v4;
    ot::Mac::Mac::StartOperation((uint64_t)this, 8);
  }

uint64_t ot::Mac::Mac::RequestDataPollTransmission(ot::Mac::Mac *this)
{
  unsigned int v3 = 0;
  if ((ot::Mac::Mac::IsEnabled(this) & 1) != 0)
  {
    if (!ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 5u))
    {
      *(_BYTE *)this  = *(_BYTE *)this & 0xFD | (2 * !ot::Mac::Mac::IsPending((uint64_t)this, 4));
      ot::Mac::Mac::StartOperation((uint64_t)this, 5);
    }
  }

  else
  {
    return 13;
  }

  return v3;
}

BOOL ot::Mac::Mac::IsCslEnabled(ot::Mac::Mac *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  BOOL v4 = 0;
  if (!ot::Mle::Mle::IsRxOnWhenIdle(v1)) {
    return ot::Mac::Mac::IsCslCapable(this);
  }
  return v4;
}

void ot::Mac::Links::CslSample(ot::Mac::Links *this)
{
}

{
  __ZN2ot3Mac5Links9CslSampleEv(this);
}

void ot::Mac::Links::Sleep(ot::Mac::Links *this)
{
}

{
  __ZN2ot3Mac5Links5SleepEv(this);
}

uint64_t ot::Mac::Mac::SetPending(uint64_t result, char a2)
{
  *(_WORD *)(result + 2) |= 1 << a2;
  return result;
}

{
  return __ZN2ot3Mac3Mac10SetPendingENS1_9OperationE(result, a2);
}

char *ot::Mac::Mac::OperationToString(unsigned __int8 a1)
{
  return ot::Mac::Mac::OperationToString(ot::Mac::Mac::Operation)::kOperationStrings[a1];
}

ot::Mac::Frame *ot::Mac::Mac::PrepareBeaconRequest(ot::Mac::Mac *this)
{
  unsigned __int16 v14 = this;
  TxFrames  = (ot::Mac::TxFrames *)ot::Mac::Links::GetTxFrames((ot::Mac::Mac *)((char *)this + 56));
  BroadcastTxFrame  = ot::Mac::TxFrames::GetBroadcastTxFrame(TxFrames);
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v11);
  ot::Mac::Address::SetNone((uint64_t)v11);
  ot::Mac::Address::SetShort((uint64_t)&v12, 0xFFFF);
  v10[1]  = -1;
  ot::Mac::Frame::InitMacHeader(BroadcastTxFrame, 3, 0, (ot::Mac::Address *)v11, v10, 0, 0);
  ot::Mac::Frame::SetCommandId(BroadcastTxFrame, 7);
  IgnoreError();
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mac::kLogModuleName,  "Sending Beacon Request",  v2,  v3,  v4,  v5,  v6,  v7,  v9);
  return BroadcastTxFrame;
}

uint64_t ot::Mac::Links::GetTxFrames(ot::Mac::Links *this)
{
  return (uint64_t)this + 6224;
}

{
  return __ZN2ot3Mac5Links11GetTxFramesEv(this);
}

uint64_t ot::Mac::Address::SetNone(uint64_t this)
{
  *(_BYTE *)(this + 8)  = 0;
  return this;
}

{
  return __ZN2ot3Mac7Address7SetNoneEv(this);
}

ot::Mac::Frame *ot::Mac::Mac::PrepareBeacon(ot::Mac::Mac *this)
{
  int v27 = this;
  int v25 = 0LL;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v23);
  Payload  = 0LL;
  TxFrames  = ot::Mac::Links::GetTxFrames((ot::Mac::Mac *)((char *)this + 56));
  char v19 = *((_BYTE *)this + 7373);
  TxFrame  = ot::Mac::TxFrames::GetTxFrame(TxFrames, v19);
  ot::Mac::RadioTypes::Clear((_BYTE *)this + 7373);
  ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(this);
  ot::Mac::Address::SetExtended((uint64_t)v23, ExtAddress);
  v22[0]  = *((_WORD *)this + 4);
  ot::Mac::Address::SetNone((uint64_t)&v24);
  ot::Mac::Frame::InitMacHeader(TxFrame, 0, 0, (ot::Mac::Address *)v23, v22, 0, 0);
  ot::Mac::Frame::GetPayload(TxFrame);
  int v25 = v3;
  ot::Mac::Beacon::Init(v3);
  unsigned __int8 v21 = 4;
  Payload  = (ot::Mac::BeaconPayload *)ot::Mac::Beacon::GetPayload(v25);
  ot::Mac::BeaconPayload::Init(Payload);
  if (ot::Mac::Mac::IsJoinable(this)) {
    ot::Mac::BeaconPayload::SetJoiningPermitted((uint64_t)Payload);
  }
  else {
    ot::Mac::BeaconPayload::ClearJoiningPermitted((uint64_t)Payload);
  }
  uint64_t v4 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
  ot::MeshCoP::NetworkNameManager::GetNetworkName(v4);
  v18[0]  = ot::MeshCoP::NetworkName::GetAsData(v5);
  v18[1]  = v6;
  ot::Mac::BeaconPayload::SetNetworkName(Payload, (const ot::MeshCoP::NameData *)v18);
  unsigned __int16 v16 = Payload;
  uint64_t v7 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
  ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v7);
  ot::Mac::BeaconPayload::SetExtendedPanId((uint64_t)v16, v8);
  v21 += 26;
  ot::Mac::Frame::SetPayloadLength(TxFrame, v21);
  ot::Mac::Mac::LogBeacon(this, "Sending", v9, v10, v11, v12, v13, v14);
  return TxFrame;
}

BOOL ot::Mac::RadioTypes::IsEmpty(ot::Mac::RadioTypes *this)
{
  return *(_BYTE *)this == 0;
}

{
  return __ZNK2ot3Mac10RadioTypes7IsEmptyEv(this);
}

_BYTE *ot::Mac::RadioTypes::Clear(_BYTE *this)
{
  *this  = 0;
  return this;
}

{
  return __ZN2ot3Mac10RadioTypes5ClearEv(this);
}

void ot::Mac::Frame::GetPayload(ot::Mac::Frame *this)
{
}

{
  __ZN2ot3Mac5Frame10GetPayloadEv(this);
}

uint64_t ot::Mac::Beacon::Init(ot::Mac::Beacon *this)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(4095LL);
  *(_WORD *)this  = result;
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_BYTE *)this + 3)  = 0;
  return result;
}

{
  return __ZN2ot3Mac6Beacon4InitEv(this);
}

_BYTE *ot::Mac::BeaconPayload::Init(_BYTE *this)
{
  *this  = 3;
  this[1]  = 32;
  return this;
}

{
  return __ZN2ot3Mac13BeaconPayload4InitEv(this);
}

BOOL ot::Mac::Mac::IsJoinable(ot::Mac::Mac *this)
{
  uint64_t v4 = this;
  uint64_t v1 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
  ot::Ip6::Filter::GetUnsecurePorts(v1, &v3);
  return v3 != 0;
}

uint64_t ot::Mac::BeaconPayload::SetJoiningPermitted(uint64_t this)
{
  *(_BYTE *)(this + 1) |= 1u;
  *(_BYTE *)(this + 1) &= 0xFu;
  *(_BYTE *)(this + 1) |= 0x40u;
  return this;
}

{
  return __ZN2ot3Mac13BeaconPayload19SetJoiningPermittedEv(this);
}

uint64_t ot::Mac::BeaconPayload::ClearJoiningPermitted(uint64_t this)
{
  *(_BYTE *)(this + 1) &= ~1u;
  return this;
}

{
  return __ZN2ot3Mac13BeaconPayload21ClearJoiningPermittedEv(this);
}

uint64_t ot::Mac::BeaconPayload::SetNetworkName( ot::Mac::BeaconPayload *this, const ot::MeshCoP::NameData *a2)
{
  return ot::MeshCoP::NameData::CopyTo(a2, (char *)this + 2, 16);
}

{
  return __ZN2ot3Mac13BeaconPayload14SetNetworkNameERKNS_7MeshCoP8NameDataE(this, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::NetworkNameManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP18NetworkNameManagerEEERT_v(a1);
}

uint64_t ot::Mac::BeaconPayload::SetExtendedPanId(uint64_t result, void *a2)
{
  *(void *)(result + 18)  = *a2;
  return result;
}

{
  return __ZN2ot3Mac13BeaconPayload16SetExtendedPanIdERK15otExtendedPanId(result, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>( ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP20ExtendedPanIdManagerEEERT_v(a1);
}

uint64_t ot::Mac::Mac::ShouldSendBeacon(ot::Mac::Mac *this)
{
  char v3 = 0;
  if ((ot::Mac::Mac::IsEnabled(this) & 1) != 0) {
    char v3 = ot::Mac::Mac::IsBeaconEnabled(this) & 1;
  }
  return v3 & 1;
}

uint64_t ot::Mac::Mac::IsBeaconEnabled(ot::Mac::Mac *this)
{
  return (*(unsigned __int8 *)this >> 4) & 1;
}

{
  return __ZNK2ot3Mac3Mac15IsBeaconEnabledEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Filter>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Ip66FilterEEERT_v(a1);
}

void ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::Mac *this, ot::Mac::TxFrame *a2)
{
  uint64_t v17 = this;
  unsigned __int16 v16 = a2;
  uint64_t v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ExtAddress  = 0LL;
  if (ot::Mac::Frame::GetSecurityEnabled(v16))
  {
    ot::Mac::Frame::GetKeyIdMode(v16, &v14);
    IgnoreError();
    if (!v14)
    {
      uint64_t v10 = v16;
      Keunsigned int k = (const ot::Mac::KeyMaterial *)ot::KeyManager::GetKek(v15);
      ot::Mac::TxFrame::SetAesKey((uint64_t)v10, Kek);
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(this);
      if ((ot::Mac::TxFrame::IsHeaderUpdated(v16) & 1) == 0)
      {
        uint64_t v9 = v16;
        KekFrameCounter  = ot::KeyManager::GetKekFrameCounter(v15);
        ot::Mac::Frame::SetFrameCounter(v9, KekFrameCounter);
        ot::KeyManager::IncrementKekFrameCounter((uint64_t)v15);
      }

      goto LABEL_15;
    }

    if (v14 != 8)
    {
      if (v14 != 16) {
        __assert_rtn("ProcessTransmitSecurity", "mac.cpp", 1157, "false");
      }
      int v12 = -1;
      ot::Mac::TxFrame::SetAesKey((uint64_t)v16, (ot::Mac::Mac *)((char *)this + 7704));
      ot::Mac::Frame::SetFrameCounter(v16, ++*((_DWORD *)this + 1632));
      ot::Mac::Frame::SetKeySource(v16, (const unsigned __int8 *)&v12);
      ot::Mac::Frame::SetKeyId(v16, 255);
      ot::AsCoreType<otExtAddress>((uint64_t)&ot::Mac::Mac::sMode2ExtAddress);
      ExtAddress  = v6;
LABEL_15:
      if ((ot::Mac::TxFrame::IsCslIePresent(v16) & 1) == 0) {
        ot::Mac::TxFrame::ProcessTransmitAesCcm(v16, ExtAddress);
      }
      return;
    }

    if ((gTxStreamingEnabled & 1) != 0 || ot::Mac::Frame::GetRadioType(v16))
    {
      uint64_t v8 = v16;
      CurrentMacKey  = (const ot::Mac::KeyMaterial *)ot::Mac::Links::GetCurrentMacKey( (ot::Mac::Mac *)((char *)this + 56),  v16);
      ot::Mac::TxFrame::SetAesKey((uint64_t)v8, CurrentMacKey);
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(this);
      if ((ot::Mac::TxFrame::IsHeaderUpdated(v16) & 1) == 0)
      {
        ot::Mac::Links::SetMacFrameCounter((ot::Mac::Mac *)((char *)this + 56), v16);
        uint64_t v7 = v16;
        CurrentKeySequence  = ot::KeyManager::GetCurrentKeySequence(v15);
        ot::Mac::Frame::SetKeyId(v7, (CurrentKeySequence & 0x7F) + 1);
      }

      goto LABEL_15;
    }
  }

uint64_t ot::Mac::TxFrame::SetAesKey(uint64_t this, const ot::Mac::KeyMaterial *a2)
{
  *(void *)(this + ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)&v2, (const char *)this + 2, 16) = a2;
  return this;
}

{
  return __ZN2ot3Mac7TxFrame9SetAesKeyERKNS0_11KeyMaterialE(this, a2);
}

uint64_t ot::KeyManager::GetKek(ot::KeyManager *this)
{
  return (uint64_t)this + 160;
}

{
  return __ZNK2ot10KeyManager6GetKekEv(this);
}

uint64_t ot::KeyManager::GetKekFrameCounter(ot::KeyManager *this)
{
  return *((unsigned int *)this + 44);
}

{
  return __ZNK2ot10KeyManager18GetKekFrameCounterEv(this);
}

uint64_t ot::KeyManager::IncrementKekFrameCounter(uint64_t this)
{
  return this;
}

{
  return __ZN2ot10KeyManager24IncrementKekFrameCounterEv(this);
}

uint64_t ot::Mac::TxFrame::IsCslIePresent(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 3) & 1;
}

{
  return __ZNK2ot3Mac7TxFrame14IsCslIePresentEv(this);
}

_BYTE *ot::Mac::TxFrames::Clear(ot::Mac::TxFrames *this)
{
  return ot::Mac::RadioTypes::Clear((_BYTE *)this + 17);
}

{
  return __ZN2ot3Mac8TxFrames5ClearEv(this);
}

uint64_t ot::Mac::TxFrame::SetChannel(ot::Mac::TxFrame *this, char a2)
{
  *((_BYTE *)this + 10)  = a2;
  return ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)this, a2);
}

{
  return __ZN2ot3Mac7TxFrame10SetChannelEh(this, a2);
}

uint64_t ot::Mac::TxFrame::SetMaxCsmaBackoffs(uint64_t this, char a2)
{
  *(_BYTE *)(this + 40)  = a2;
  return this;
}

{
  return __ZN2ot3Mac7TxFrame18SetMaxCsmaBackoffsEh(this, a2);
}

uint64_t ot::Mac::TxFrames::SetChannel(ot::Mac::TxFrame **this, char a2)
{
  return ot::Mac::TxFrame::SetChannel(this[1], a2);
}

{
  return __ZN2ot3Mac8TxFrames10SetChannelEh(this, a2);
}

uint64_t ot::Mac::TxFrames::SetMaxCsmaBackoffs(ot::Mac::TxFrames *this, char a2)
{
  return ot::Mac::TxFrame::SetMaxCsmaBackoffs(*((void *)this + 1), a2);
}

{
  return __ZN2ot3Mac8TxFrames18SetMaxCsmaBackoffsEh(this, a2);
}

BOOL ot::Mle::DeviceMode::IsMinimalEndDevice(ot::Mle::DeviceMode *this)
{
  return (*(_BYTE *)this & 0xA) != 10;
}

{
  return __ZNK2ot3Mle10DeviceMode18IsMinimalEndDeviceEv(this);
}

uint64_t ot::MeshForwarder::GetSendMessage(ot::MeshForwarder *this)
{
  return *((void *)this + 6);
}

{
  return __ZNK2ot13MeshForwarder14GetSendMessageEv(this);
}

uint64_t ot::Neighbor::GetVersion(ot::Neighbor *this)
{
  return *((unsigned __int16 *)this + 52);
}

{
  return __ZNK2ot8Neighbor10GetVersionEv(this);
}

uint64_t ot::Neighbor::GetState(ot::Neighbor *this)
{
  return *((_BYTE *)this + 98) & 0xF;
}

{
  return __ZNK2ot8Neighbor8GetStateEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::DataPollHandler>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_15DataPollHandlerEEERT_v(a1);
}

uint64_t ot::Mac::TxFrame::IsARetransmission(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 1) & 1;
}

{
  return __ZNK2ot3Mac7TxFrame17IsARetransmissionEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::CslTxScheduler>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_14CslTxSchedulerEEERT_v(a1);
}

uint64_t ot::Mac::TxFrame::IsSecurityProcessed(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 4) & 1;
}

{
  return __ZNK2ot3Mac7TxFrame19IsSecurityProcessedEv(this);
}

uint64_t ot::Mac::TxFrames::GetSelectedRadioTypes(ot::Mac::TxFrames *this)
{
  return *((unsigned __int8 *)this + 16);
}

{
  return __ZNK2ot3Mac8TxFrames21GetSelectedRadioTypesEv(this);
}

BOOL ot::Mac::RadioTypes::Contains(char *a1, char a2)
{
  char v3 = *a1;
  return (v3 & ot::Mac::RadioTypes::BitFlag(a2)) != 0;
}

{
  return __ZNK2ot3Mac10RadioTypes8ContainsENS0_9RadioTypeE(a1, a2);
}

uint64_t ot::Mac::TxFrames::GetRequiredRadioTypes(ot::Mac::TxFrames *this)
{
  return *((unsigned __int8 *)this + 17);
}

{
  return __ZNK2ot3Mac8TxFrames21GetRequiredRadioTypesEv(this);
}

uint64_t ot::Mac::Frame::SetLength(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8)  = a2;
  return this;
}

{
  return __ZN2ot3Mac5Frame9SetLengthEt(this, a2);
}

void ot::Mac::Mac::HandleTransmitDone(uint64_t a1, ot::Mac::Frame *a2, ot::Mac::Frame *a3, int a4)
{
  v56  = a1;
  v55  = a2;
  v54  = a3;
  v53  = a4;
  if (!a4)
  {
    __int16 Length = ot::Mac::Frame::GetLength(v55);
    ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Update(a1 + 6844, Length);
  }

  if (!ot::Mac::Frame::IsEmpty(v55) && !ot::Mac::Frame::GetRadioType(v55))
  {
    ot::Mac::Address::Address((ot::Mac::Address *)v52);
    ot::Mac::Frame::GetDstAddr(v55, (ot::Mac::Address *)v52);
    IgnoreError();
    if (ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v52))
    {
      ++*(_BYTE *)(a1 + 6);
      uint64_t v5 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
      SendMessage  = (ot::Message *)ot::MeshForwarder::GetSendMessage(v5);
      if (SendMessage && ot::Message::GetSubType(SendMessage) == 12)
      {
        if (*(unsigned __int8 *)(a1 + 6) < (int)*(unsigned __int8 *)(a1 + 26))
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "ReTx MLE Advertisement, current tx count=%d",  v6,  v7,  v8,  v9,  v10,  v11,  *(_BYTE *)(a1 + 6));
          ot::Power::Domain::Domain((ot::Power::Domain *)&v50);
          ot::Mac::RadioTypes::Add(&v50, 0);
          v49[1]  = v50;
          IsEmpty  = ot::Mac::Links::Send((ot::Mac::TxFrame **)(a1 + 56), (const void **)v55, v50);
          goto LABEL_31;
        }
      }

      else if (!*(_BYTE *)(a1 + 6))
      {
        ot::Power::Domain::Domain((ot::Power::Domain *)v49);
        ot::Mac::RadioTypes::Add(v49, 0);
        v48  = v49[0];
        IsEmpty  = ot::Mac::Links::Send((ot::Mac::TxFrame **)(a1 + 56), (const void **)v55, v49[0]);
        goto LABEL_31;
      }

      *(_BYTE *)(a1 + 6)  = 0;
    }
  }

  if (ot::Mac::Frame::IsEmpty(v55))
  {
LABEL_28:
    unint64_t v42 = *(unsigned __int8 *)(a1 + 1) - 1;
    if (v42 <= 7) {
      __asm { BR              X8 }
    }

    __assert_rtn("HandleTransmitDone", "mac.cpp", 1957, "false");
  }

  Radiochar Type = ot::Mac::Frame::GetRadioType(v55);
  TxFrames  = (ot::Mac::TxFrames *)ot::Mac::Links::GetTxFrames((ot::Mac::Links *)(a1 + 56));
  RequiredRadioTypes  = ot::Mac::TxFrames::GetRequiredRadioTypes(TxFrames);
  unsigned __int8 v14 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>((ot::InstanceLocator *)a1);
  ot::RadioSelector::UpdateOnSendDone(v14, v55, v53);
  if (ot::Mac::RadioTypes::IsEmpty((ot::Mac::RadioTypes *)&RequiredRadioTypes))
  {
    if (*(_DWORD *)(a1 + 7376)) {
      *(_DWORD *)(a1 + 7376)  = v53;
    }
  }

  else if (ot::Mac::RadioTypes::Contains(&RequiredRadioTypes, RadioType) && v53)
  {
    char v43 = ot::Mac::RadioTypeToString(RadioType);
    ot::ErrorToString(v53);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Frame tx failed on required radio link %s with error %s",  v15,  v16,  v17,  v18,  v19,  v20,  v43);
    *(_DWORD *)(a1 + 7376)  = v53;
  }

  ot::Mac::RadioTypes::Remove((_BYTE *)(a1 + 7372), RadioType);
  IsEmpty  = ot::Mac::RadioTypes::IsEmpty((ot::Mac::RadioTypes *)(a1 + 7372));
  if ((IsEmpty & 1) != 0)
  {
    v53  = *(_DWORD *)(a1 + 7376);
    goto LABEL_28;
  }

uint64_t ot::Mac::Mac::RecordCcaStatus(uint64_t this, char a2, char a3)
{
  char v5 = a2 & 1;
  char v3 = (ot::Mac::Mac *)this;
  if ((a2 & 1) == 0)
  {
    ++*(_DWORD *)(this + 6400);
    this  = ot::Mac::Mac::IsPerformingCslTransmit((ot::Mac::Mac *)this);
    if ((this & 1) != 0) {
      ++*((_DWORD *)v3 + 1605);
    }
  }

  if (a3 == *((_BYTE *)v3 + 10))
  {
    return (uint64_t)ot::SuccessRateTracker::AddSample((_WORD *)v3 + 3266, v5 & 1, *((_WORD *)v3 + 3267));
  }

  return this;
}

BOOL ot::Mac::Mac::IsPerformingCslTransmit(ot::Mac::Mac *this)
{
  return *((_BYTE *)this + 1) == 8;
}

{
  return __ZNK2ot3Mac3Mac23IsPerformingCslTransmitEv(this);
}

void ot::Mac::Mac::RecordFrameTransmitStatus( _DWORD *a1, ot::Mac::Frame *a2, ot::Mac::RxFrame *a3, int a4, unsigned __int8 a5, char a6)
{
  int v28 = a1;
  int v27 = a2;
  char v26 = a3;
  int v25 = a4;
  unsigned __int8 v24 = a5;
  char v23 = a6 & 1;
  AckRequest  = ot::Mac::Frame::GetAckRequest(a2);
  ot::Mac::Address::Address((ot::Mac::Address *)v21);
  uint64_t v19 = "";
  if (ot::Mac::Frame::IsEmpty(v27)) {
    return;
  }
  ot::Mac::Frame::GetDstAddr(v27, (ot::Mac::Address *)v21);
  IgnoreError();
  uint64_t v6 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
  uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v6, (ot::Mac::Address *)v21, 1);
  if (Neighbor && AckRequest)
  {
    char v18 = 1;
    if (!v25)
    {
LABEL_7:
      LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Neighbor);
      ot::LinkQualityInfo::AddFrameTxStatus(LinkInfo, v18 & 1);
      goto LABEL_8;
    }

    if (v25 == 14)
    {
      char v18 = 0;
      goto LABEL_7;
    }
  }

BOOL ot::Mac::Frame::GetAckRequest(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsAckRequest((ot::Mac::Frame *)FrameControlField);
}

{
  return __ZNK2ot3Mac5Frame13GetAckRequestEv(this);
}

_WORD *ot::LinkQualityInfo::AddFrameTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 2, a2 & 1, 0x80u);
}

{
  return __ZN2ot15LinkQualityInfo16AddFrameTxStatusEb(this, a2);
}

uint64_t ot::String<(unsigned short)128>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt128EE9AsCStringEv(a1);
}

void ot::Mac::Mac::LogFrameTx(ot::Mac::Mac *this, const ot::Mac::TxFrame *a2, const char *a3)
{
  Channel  = ot::Mac::Frame::GetChannel(a2);
  ot::Mac::TxFrame::GetTxPower(a2);
  ot::Mac::TxFrame::GetTxRetryCount(a2);
  ot::Mac::Frame::ToInfoString(a2, (ot::StringWriter *)v12);
  ot::String<(unsigned short)150>::AsCString((uint64_t)v12);
  ot::Mac::Mac::GetCcaFailureRatePercent(this);
  ot::Mac::Mac::GetCcaFailureRatePercent(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Frame tx on channel %d, txPower=%d, retryCount=%d, %s, ccaFailureRate:%d.%02d%%%s",  v3,  v4,  v5,  v6,  v7,  v8,  Channel);
}

void ot::Mac::Mac::LogFrameTxFailure( ot::Mac::Mac *a1, ot::Mac::Frame *a2, int a3, unsigned __int8 a4, char a5, uint64_t a6)
{
  unsigned __int16 v39 = a1;
  unsigned __int16 v38 = a2;
  v37  = a3;
  unsigned __int8 v36 = a4;
  v35  = a5 & 1;
  v34  = a6;
  int v31 = a1;
  if (ot::Mac::Frame::GetRadioType(a2))
  {
    LOBYTE(v1ot::Mle::Tlv::SetType(this, 9) = otThreadErrorToString(v37);
    ot::Mac::Frame::ToInfoString(v38, (ot::StringWriter *)v40);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v40);
    ot::Mac::Mac::GetCcaFailureRatePercent(v31);
    ot::Mac::Mac::GetCcaFailureRatePercent(v31);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mac::kLogModuleName,  "Frame tx failed, error:%s, %s, ccaFailureRate:%d.%02d%%%s",  v12,  v13,  v14,  v15,  v16,  v17,  v19);
  }

  else
  {
    unsigned __int8 v33 = ot::Mac::TxFrame::GetMaxFrameRetries(v38) + 1;
    if ((v35 & 1) != 0) {
      int v30 = v36 + 1;
    }
    else {
      int v30 = v33;
    }
    v32  = v30;
    int v22 = v30;
    int v23 = v33;
    TxPower  = ot::Mac::TxFrame::GetTxPower(v38);
    TxRetryCount  = ot::Mac::TxFrame::GetTxRetryCount(v38);
    char v26 = otThreadErrorToString(v37);
    uint64_t v20 = v41;
    ot::Mac::Frame::ToInfoString(v38, (ot::StringWriter *)v41);
    uint64_t v28 = ot::String<(unsigned short)150>::AsCString((uint64_t)v41);
    int v21 = 100;
    unsigned int v27 = ot::Mac::Mac::GetCcaFailureRatePercent(v31) / 0x64;
    int v29 = v18;
    v18[1]  = v33;
    v18[2]  = (char)TxPower;
    v18[3]  = TxRetryCount;
    v18[4]  = v26;
    v18[5]  = v28;
    v18[6]  = v27;
    v18[7]  = ot::Mac::Mac::GetCcaFailureRatePercent(v31) % 0x64;
    v18[8]  = v34;
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mac::kLogModuleName,  "Frame tx attempt %d/%d failed, txPower=%d, retryCount=%d, error:%s, %s, ccaFailureRate:%d.%02d%%%s",  v6,  v7,  v8,  v9,  v10,  v11,  v30);
  }

void ot::Logger::Dump<(ot::LogLevel)5,&ot::Mac::kLogModuleName>(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

uint64_t ot::Mac::Frame::GetHeader(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetPsdu(this);
}

{
  return ot::Mac::Frame::GetPsdu(this);
}

{
  return __ZN2ot3Mac5Frame9GetHeaderEv(this);
}

{
  return __ZNK2ot3Mac5Frame9GetHeaderEv(this);
}

uint64_t ot::Mac::TxFrame::GetTxRetryCount(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 43);
}

{
  return __ZNK2ot3Mac7TxFrame15GetTxRetryCountEv(this);
}

ot::Mac::HeaderIe *ot::Mac::Mac::ProcessEnhAckProbing( ot::Mac::Mac *this, const ot::Mac::RxFrame *a2, const ot::Neighbor *a3)
{
  uint64_t result = (ot::Mac::HeaderIe *)ot::Mac::Frame::GetThreadIe(a2, 0);
  uint64_t v7 = (unsigned __int8 *)result + 6;
  if (result)
  {
    uint64_t result = (ot::Mac::HeaderIe *)ot::Mac::HeaderIe::GetLength(result);
    unsigned __int8 v6 = (_BYTE)result - 4;
    if (((_BYTE)result - 4) <= 2u)
    {
      uint64_t v4 = (ot::LinkMetrics::Initiator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(this);
      return (ot::Mac::HeaderIe *)ot::LinkMetrics::Initiator::ProcessEnhAckIeData(v4, v7, v6, a3);
    }
  }

  return result;
}

uint64_t ot::Mac::Frame::GetVersion(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetFrameControlField(this) & 0x3000;
}

{
  return __ZNK2ot3Mac5Frame10GetVersionEv(this);
}

uint64_t ot::Mac::Mac::ProcessCsl(ot::Mac::Mac *this, const ot::Mac::RxFrame *a2, const ot::Mac::Address *a3)
{
  unsigned int v25 = 0;
  uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  ot::ChildTable::FindChild(v3, a3, 5);
  uint64_t v24 = v4;
  int v22 = 0LL;
  if (v4)
  {
    HeaderIe  = ot::Mac::Frame::GetHeaderIe(a2, 0x1Au);
    if (HeaderIe)
    {
      int v22 = (ot::Mac::CslIe *)(HeaderIe + 2);
      if (!ot::Mac::Frame::GetSecurityEnabled(a2)) {
        return v25;
      }
      if ((unsigned __int16)ot::Mac::CslIe::GetPeriod(v22) >= 0xAu)
      {
        Period  = ot::Mac::CslIe::GetPeriod(v22);
        ot::CslTxScheduler::ChildInfo::SetCslPeriod(v24 + 272, Period);
        Phase  = ot::Mac::CslIe::GetPhase(v22);
        ot::CslTxScheduler::ChildInfo::SetCslPhase(v24 + 272, Phase);
        uint64_t v7 = (ot::TimerMilli *)ot::CslTxScheduler::ChildInfo::SetCslSynchronized((_BYTE *)(v24 + 272), 1);
        int Now = ot::TimerMilli::GetNow(v7);
        ot::CslTxScheduler::ChildInfo::SetCslLastHeard(v24 + 272, Now);
        Timestamp  = (uint64_t *)ot::Mac::RxFrame::GetTimestamp(a2);
        ot::CslTxScheduler::ChildInfo::SetLastRxTimestamp(v24 + 272, *Timestamp);
        uint64_t v9 = (uint64_t *)ot::Mac::RxFrame::GetTimestamp(a2);
        char v18 = ot::ToUlong(*v9);
        ot::Mac::Frame::GetSequence(a2);
        ot::Mac::CslIe::GetPeriod(v22);
        ot::Mac::CslIe::GetPhase(v22);
        ot::CslTxScheduler::ChildInfo::GetCslPhase((ot::CslTxScheduler::ChildInfo *)(v24 + 272));
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Timestamp=%lu Sequence=%u CslPeriod=%u CslPhase=%u TransmitPhase=%u",  v10,  v11,  v12,  v13,  v14,  v15,  v18);
        uint64_t v16 = (ot::CslTxScheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(this);
        ot::CslTxScheduler::Update(v16);
      }
    }

    if (!ot::Mac::Frame::IsAck(a2) && ot::Mac::Frame::GetSecurityEnabled(a2))
    {
      if (ot::Mac::Frame::GetType(a2) == 1 && v22)
      {
        Sequence  = ot::Mac::Frame::GetSequence(a2);
        if ((ot::CslTxScheduler::ChildInfo::IsCslPrevSnValid((ot::CslTxScheduler::ChildInfo *)(v24 + 272)) & 1) != 0
          && Sequence == ot::CslTxScheduler::ChildInfo::GetCslPrevSn((ot::CslTxScheduler::ChildInfo *)(v24 + 272)))
        {
          return 29;
        }

        else
        {
          ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((_BYTE *)(v24 + 272), 1);
          ot::CslTxScheduler::ChildInfo::SetCslPrevSn(v24 + 272, Sequence);
        }
      }

      else
      {
        ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((_BYTE *)(v24 + 272), 0);
      }
    }
  }

  return v25;
}

BOOL ot::Mac::Address::IsBroadcast(ot::Mac::Address *this)
{
  BOOL v2 = 0;
  if (*((_BYTE *)this + 8) == 1) {
    return (unsigned __int16)ot::Mac::Address::GetShort(this) == 0xFFFF;
  }
  return v2;
}

{
  return __ZNK2ot3Mac7Address11IsBroadcastEv(this);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Update(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = 0;
  if (a2 > 0) {
    unsigned __int16 v3 = a2 / 5;
  }
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::IncrementRange(a1, v3);
}

{
  return __ZN2ot5Utils14CountHistogramILs0ELs127ELs5EE6UpdateEs(a1, a2);
}

uint64_t ot::Mac::Frame::GetLength(ot::Mac::Frame *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot3Mac5Frame9GetLengthEv(this);
}

uint64_t ot::Mac::RadioTypes::Add(_BYTE *a1, char a2)
{
  uint64_t result = ot::Mac::RadioTypes::BitFlag(a2);
  *a1 |= result;
  return result;
}

{
  return __ZN2ot3Mac10RadioTypes3AddENS0_9RadioTypeE(a1, a2);
}

uint64_t ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::Mac *this, ot::Mac::TxFrame *a2, ot::Mac::RxFrame *a3)
{
  unsigned __int16 v44 = this;
  char v43 = a2;
  unint64_t v42 = a3;
  unsigned int v41 = 8;
  ot::Mac::Address::Address((ot::Mac::Address *)v35);
  ot::Mac::Address::Address((ot::Mac::Address *)v34);
  uint64_t Neighbor = 0LL;
  v32  = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  if (!ot::Mac::Frame::GetSecurityEnabled(v42))
  {
    unsigned int v41 = 0;
    goto LABEL_31;
  }

  if (ot::Mac::Frame::IsVersion2015(v42) && !ot::Mac::Frame::ValidatePsdu(v42))
  {
    ot::Mac::Frame::GetSecurityLevel(v42, &v40);
    IgnoreError();
    if (v40 == 5)
    {
      ot::Mac::Frame::GetKeyIdMode(v42, &v37);
      IgnoreError();
      if (v37 != 8)
      {
        unsigned int v41 = 0;
        goto LABEL_31;
      }

      ot::Mac::Frame::GetKeyId(v43, &v39);
      IgnoreError();
      ot::Mac::Frame::GetKeyId(v42, &v38);
      IgnoreError();
      if (v39 == v38)
      {
        ot::Mac::Frame::GetFrameCounter(v42, &v36);
        IgnoreError();
        char v9 = ot::ToUlong(v36);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx security - Ack frame counter %lu",  v10,  v11,  v12,  v13,  v14,  v15,  v9);
        ot::Mac::Frame::GetSrcAddr(v42, (ot::Mac::Address *)v35);
        IgnoreError();
        if (ot::Mac::Address::IsNone((ot::Mac::Address *)v35))
        {
          ot::Mac::Frame::GetDstAddr(v43, (ot::Mac::Address *)v34);
          IgnoreError();
          if (!ot::Mac::Address::IsNone((ot::Mac::Address *)v34))
          {
            uint64_t v17 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
            uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v17, (ot::Mac::Address *)v34, 1);
          }
        }

        else
        {
          uint64_t v16 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
          uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v16, (ot::Mac::Address *)v35, 1);
        }

        if (!ot::Mac::Address::IsExtended((ot::Mac::Address *)v35) && Neighbor)
        {
          ExtAddress  = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(Neighbor);
          ot::Mac::Address::SetExtended((uint64_t)v35, ExtAddress);
        }

        if (ot::Mac::Address::IsExtended((ot::Mac::Address *)v35) && Neighbor)
        {
          int v29 = --v38;
          if (v29 == (ot::KeyManager::GetCurrentKeySequence(v32) & 0x7F))
          {
            SubMac  = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
            CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetCurrentMacKey(SubMac);
          }

          else
          {
            int v28 = v38;
            if (v28 == ((ot::KeyManager::GetCurrentKeySequence(v32) - 1) & 0x7F))
            {
              uint64_t v20 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetPreviousMacKey(v20);
            }

            else
            {
              int v27 = v38;
              int v21 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetNextMacKey(v21);
            }
          }

          if (!ot::Neighbor::IsStateValid(Neighbor)
            || (unsigned int v26 = v36, v26 >= ot::Neighbor::GetLinkAckFrameCounter(Neighbor)))
          {
            unsigned int v25 = v42;
            ot::Mac::Address::GetExtended((ot::Mac::Address *)v35);
            unsigned int v41 = ot::Mac::RxFrame::ProcessReceiveAesCcm(v25, v22, CurrentMacKey);
            if (!v41 && ot::Neighbor::IsStateValid(Neighbor)) {
              ot::Neighbor::SetLinkAckFrameCounter((uint64_t)Neighbor, v36 + 1);
            }
          }
        }
      }
    }
  }

uint64_t ot::Mac::RadioTypes::Remove(_BYTE *a1, char a2)
{
  uint64_t result = ot::Mac::RadioTypes::BitFlag(a2);
  *a1 &= ~(_BYTE)result;
  return result;
}

{
  return __ZN2ot3Mac10RadioTypes6RemoveENS0_9RadioTypeE(a1, a2);
}

uint64_t ot::Mac::Links::GetTransmitRetries(ot::Mac::Links *this)
{
  return ot::Mac::SubMac::GetTransmitRetries((ot::Mac::Links *)((char *)this + 8));
}

{
  return __ZNK2ot3Mac5Links18GetTransmitRetriesEv(this);
}

uint64_t ot::Mac::SubMac::GetTransmitErrorsNoAck(ot::Mac::SubMac *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot3Mac6SubMac22GetTransmitErrorsNoAckEv(this);
}

uint64_t ot::Mac::SubMac::GetTransmitErrorsChannelAccessFailure(ot::Mac::SubMac *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot3Mac6SubMac37GetTransmitErrorsChannelAccessFailureEv(this);
}

uint64_t ot::Mac::Frame::GetPsduLength(ot::Mac::Frame *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot3Mac5Frame13GetPsduLengthEv(this);
}

uint64_t ot::Mac::Mac::ProcessReceiveSecurity( ot::Mac::Mac *this, ot::Mac::RxFrame *a2, const ot::Mac::Address *a3, ot::Neighbor *a4)
{
  v164  = this;
  v163  = a2;
  v162  = a3;
  v161  = a4;
  v149  = this;
  v160  = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  v159  = 8;
  v154  = 0;
  v151  = 0;
  if (ot::Mac::Frame::GetSecurityEnabled(v163))
  {
    ot::Mac::Frame::GetSecurityLevel(v163, &v158);
    IgnoreError();
    if (v158 == 5)
    {
      ot::Mac::Frame::GetFrameCounter(v163, &v156);
      IgnoreError();
      ot::Mac::Frame::GetKeyIdMode(v163, &v157);
      IgnoreError();
      if (v161)
      {
        v141  = ot::ToUlong(v156);
        v142  = v157;
        v143  = v158;
        int Rloc16 = ot::Neighbor::GetRloc16(v161);
        ExtAddress  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v161);
        v140  = v171;
        ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v171);
        v145  = ot::String<(unsigned short)17>::AsCString((uint64_t)v171);
        int State = ot::Neighbor::GetState(v161);
        IsStateValid  = ot::Neighbor::IsStateValid(v161);
        v148  = &v87;
        v88  = v142;
        v89  = v143;
        v90  = (unsigned __int16)Rloc16;
        v91  = v145;
        v92  = State;
        v93  = IsStateValid;
        KeySequence  = ot::Neighbor::GetKeySequence(v161);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx security - frame counter %lu keyIdMode:%u securityLevel:%d nbr.rloc:0x%x nbr.ext:%s nbr.state:%d nbr.isStat eValid:%d nbr.keSeq:%d",  v11,  v12,  v13,  v14,  v15,  v16,  v141);
      }

      else
      {
        v88  = v157;
        v89  = v158;
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx security - frame counter %u keyIdMode:%u securityLevel:%d",  v4,  v5,  v6,  v7,  v8,  v9,  v156);
      }

      v139  = v157;
      if (v157)
      {
        if (v139 == 8)
        {
          if (!v161) {
            goto LABEL_46;
          }
          v151  = ot::Neighbor::IsStateValid(v161);
          ot::Mac::Frame::GetKeyId(v163, &v155);
          IgnoreError();
          v138  = --v155;
          CurrentKeySequence  = ot::KeyManager::GetCurrentKeySequence(v160);
          if (v138 == (CurrentKeySequence & 0x7F))
          {
            v154  = ot::KeyManager::GetCurrentKeySequence(v160);
            CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::Links::GetCurrentMacKey( (ot::Mac::Mac *)((char *)v149 + 56),  v163);
          }

          else
          {
            v137  = v155;
            char v19 = ot::KeyManager::GetCurrentKeySequence(v160);
            if (v137 == ((v19 - 1) & 0x7F))
            {
              v154  = ot::KeyManager::GetCurrentKeySequence(v160) - 1;
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::Links::GetTemporaryMacKey( (ot::Mac::Mac *)((char *)v149 + 56),  v163,  v154);
            }

            else
            {
              v136  = v155;
              char v20 = ot::KeyManager::GetCurrentKeySequence(v160);
              if (v136 != ((v20 + 1) & 0x7F))
              {
                v132  = ot::ErrorToString(v159);
                v133  = v154;
                v134  = CurrentMacKey;
                v135  = v155;
                uint64_t v21 = ot::KeyManager::GetCurrentKeySequence(v160);
                v88  = v133;
                v89  = (uint64_t)v134;
                v90  = v135;
                v91  = v21;
                v92  = v156;
                ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx security error exit:%s keySequence(%d) macKey(%d) keyId(%d) keyManager.CurrentKeySeq:%d frameCounter:%u",  v22,  v23,  v24,  v25,  v26,  v27,  (char)v132);
                goto LABEL_46;
              }

              v154  = ot::KeyManager::GetCurrentKeySequence(v160) + 1;
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::Links::GetTemporaryMacKey( (ot::Mac::Mac *)((char *)v149 + 56),  v163,  v154);
            }
          }

          if (v151)
          {
            v131  = v154;
            unsigned int v28 = ot::Neighbor::GetKeySequence(v161);
            if (v131 < v28)
            {
              v126  = ot::ErrorToString(v159);
              v127  = v157;
              v128  = v154;
              v129  = ot::Neighbor::GetKeySequence(v161);
              v130  = ot::Neighbor::GetRloc16(v161);
              int v29 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v161);
              v125  = v170;
              ot::Mac::ExtAddress::ToString(v29, (ot::StringWriter *)v170);
              uint64_t v30 = ot::String<(unsigned short)17>::AsCString((uint64_t)v125);
              v88  = v127;
              v89  = v128;
              v90  = v129;
              v91  = (unsigned __int16)v130;
              v92  = v30;
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx security error exit seqnum mismatch error:%s keyIdMode:%d keySequence:%u nbr.keySequence:%u nbr.rloc1 6:0x%x nbr.extAddr:%s",  v31,  v32,  v33,  v34,  v35,  v36,  (char)v126);
              goto LABEL_46;
            }

            v124  = v154;
            v37  = ot::Neighbor::GetKeySequence(v161);
            if (v124 == v37)
            {
              LinkFrameCounters  = (unsigned int *)ot::Neighbor::GetLinkFrameCounters(v161);
              Radiounsigned __int8 Type = ot::Mac::Frame::GetRadioType(v163);
              v150  = ot::Mac::LinkFrameCounters::Get(LinkFrameCounters, RadioType);
              if (v156 + 1 == v150)
              {
                v118  = ot::ErrorToString(29);
                v119  = v157;
                v120  = v156;
                v121  = v150;
                v122  = ot::Neighbor::GetRloc16(v161);
                unsigned __int8 v39 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v161);
                v117  = v169;
                ot::Mac::ExtAddress::ToString(v39, (ot::StringWriter *)v169);
                uint64_t v40 = ot::String<(unsigned short)17>::AsCString((uint64_t)v117);
                v88  = v119;
                v89  = v120;
                v90  = v121;
                v91  = (unsigned __int16)v122;
                v92  = v40;
                ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx error: %s keyIdMode:%d frameCounter:%u nbr.FrameCounter:%u nbr.rloc16:0x%x nbr.extAddr:%s",  v41,  v42,  v43,  v44,  v45,  v46,  (char)v118);
              }

              else if (v156 < v150)
              {
                v112  = ot::ErrorToString(8);
                v113  = v157;
                v114  = v156;
                v115  = v150;
                v116  = ot::Neighbor::GetRloc16(v161);
                unsigned __int16 v47 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v161);
                v111  = v168;
                ot::Mac::ExtAddress::ToString(v47, (ot::StringWriter *)v168);
                v48  = ot::String<(unsigned short)17>::AsCString((uint64_t)v111);
                v88  = v113;
                v89  = v114;
                v90  = v115;
                v91  = (unsigned __int16)v116;
                v92  = v48;
                ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Rx error: %s frame counter mismatch, keyIdMode:%d frameCounter:%u nbr.FrameCounter:%u nbr.rloc16:0x%x nbr.extAddr:%s",  v49,  v50,  v51,  v52,  v53,  v54,  (char)v112);
              }

              if (v156 + 1 == v150)
              {
                v159  = 29;
                goto LABEL_46;
              }

              if (v156 < v150) {
                goto LABEL_46;
              }
            }
          }

          ot::Mac::Address::GetExtended(v162);
          v152  = v55;
        }

        else
        {
          if (v139 != 16) {
            goto LABEL_46;
          }
          CurrentMacKey  = (ot::Mac::Mac *)((char *)v149 + 7704);
          ot::AsCoreType<otExtAddress>((uint64_t)&ot::Mac::Mac::sMode2ExtAddress);
          v152  = v56;
        }
      }

      else
      {
        CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::KeyManager::GetKek(v160);
        ot::Mac::Address::GetExtended(v162);
        v152  = v17;
      }

      if (!ot::Mac::RxFrame::ProcessReceiveAesCcm(v163, v152, CurrentMacKey))
      {
        if (v157 == 8 && v151)
        {
          v57  = ot::Neighbor::GetKeySequence(v161);
          if (v57 != v154)
          {
            v110  = v154;
            v58  = ot::Neighbor::GetKeySequence(v161);
            if (v110 < v58)
            {
              v106  = ot::Neighbor::GetRloc16(v161);
              v59  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v161);
              v105  = v167;
              ot::Mac::ExtAddress::ToString(v59, (ot::StringWriter *)v167);
              v107  = ot::String<(unsigned short)17>::AsCString((uint64_t)v105);
              v108  = ot::KeyManager::GetCurrentKeySequence(v160);
              v109  = v154;
              v60  = ot::Neighbor::GetKeySequence(v161);
              v88  = (unsigned __int16)v106;
              v89  = v107;
              v90  = v108;
              v91  = v109;
              v92  = v60;
              ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mac::kLogModuleName,  "%s Neighbor KeySequence is lower than previous RLOC16: 0x%x, ExtAddr: %s, ourKeySeq:%u, nbrCurKeySeq:%u, nbrPrevKeySeq:%u",  v61,  v62,  v63,  v64,  v65,  v66,  (char)"ProcessReceiveSecurity");
            }

            ot::Neighbor::SetKeySequence((uint64_t)v161, v154);
            ot::Neighbor::SetMleFrameCounter((uint64_t)v161, 0);
            v67  = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v161);
            ot::Mac::LinkFrameCounters::Reset(v67);
          }

          v104  = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(v161);
          v68  = ot::Mac::Frame::GetRadioType(v163);
          ot::Mac::LinkFrameCounters::Set(v104, v68, v156 + 1);
          if (!ot::Mac::Frame::GetRadioType(v163))
          {
            v103  = v156 + 1;
            LinkAckFrameCounter  = ot::Neighbor::GetLinkAckFrameCounter(v161);
            if (v103 > LinkAckFrameCounter) {
              ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v161, v156 + 1);
            }
          }

          v102  = v154;
          v70  = ot::KeyManager::GetCurrentKeySequence(v160);
          if (v102 > v70)
          {
            v98  = ot::Neighbor::GetRloc16(v161);
            v71  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v161);
            v97  = v166;
            ot::Mac::ExtAddress::ToString(v71, (ot::StringWriter *)v166);
            v99  = ot::String<(unsigned short)17>::AsCString((uint64_t)v97);
            v100  = ot::KeyManager::GetCurrentKeySequence(v160);
            v101  = v154;
            v72  = ot::Neighbor::GetKeySequence(v161);
            v88  = (unsigned __int16)v98;
            v89  = v99;
            v90  = v100;
            v91  = v101;
            v92  = v72;
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mac::kLogModuleName,  "%s Neighbor KeySequence changed RLOC16: 0x%x, ExtAddr: %s, ourKeySeq:%u, nbrCurKeySeq:%u, nbrTableKeySeq:%u",  v73,  v74,  v75,  v76,  v77,  v78,  (char)"ProcessReceiveSecurity");
            ot::KeyManager::SetCurrentKeySequence(v160, v154);
          }
        }

        v159  = 0;
      }
    }
  }

  else
  {
    v159  = 0;
  }

uint64_t ot::Neighbor::GetKeySequence(ot::Neighbor *this)
{
  return *((unsigned int *)this + 23);
}

  ;
}

{
  return __ZNK2ot8Neighbor14GetKeySequenceEv(this);
}

uint64_t ot::Neighbor::GetLinkFrameCounters(ot::Neighbor *this)
{
  return (uint64_t)this + 68;
}

{
  return (uint64_t)this + 68;
}

{
  return __ZN2ot8Neighbor20GetLinkFrameCountersEv(this);
}

{
  return __ZNK2ot8Neighbor20GetLinkFrameCountersEv(this);
}

uint64_t ot::Neighbor::SetKeySequence(uint64_t this, int a2)
{
  *(_DWORD *)(this + 9ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot8Neighbor14SetKeySequenceEj(this, a2);
}

uint64_t ot::Neighbor::SetMleFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76)  = a2;
  return this;
}

{
  return __ZN2ot8Neighbor18SetMleFrameCounterEj(this, a2);
}

_DWORD *ot::Mac::LinkFrameCounters::Reset(ot::Mac::LinkFrameCounters *this)
{
  return ot::Mac::LinkFrameCounters::SetAll(this, 0);
}

{
  return __ZN2ot3Mac17LinkFrameCounters5ResetEv(this);
}

uint64_t ot::Neighbor::GetLinkAckFrameCounter(ot::Neighbor *this)
{
  return *((unsigned int *)this + 20);
}

{
  return __ZNK2ot8Neighbor22GetLinkAckFrameCounterEv(this);
}

uint64_t ot::Neighbor::SetLinkAckFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80)  = a2;
  return this;
}

{
  return __ZN2ot8Neighbor22SetLinkAckFrameCounterEj(this, a2);
}

BOOL ot::Mac::Frame::IsVersion2015(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsVersion2015((ot::Mac::Frame *)FrameControlField);
}

{
  return ((unsigned __int16)this & 0x3000) == 0x2000;
}

{
  return __ZN2ot3Mac5Frame13IsVersion2015Et(this);
}

{
  return __ZNK2ot3Mac5Frame13IsVersion2015Ev(this);
}

BOOL ot::Mac::Address::IsNone(ot::Mac::Address *this)
{
  return *((_BYTE *)this + 8) == 0;
}

{
  return __ZNK2ot3Mac7Address6IsNoneEv(this);
}

uint64_t ot::Mac::SubMac::GetCurrentMacKey(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 88;
}

{
  return __ZNK2ot3Mac6SubMac16GetCurrentMacKeyEv(this);
}

uint64_t ot::Mac::SubMac::GetPreviousMacKey(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 72;
}

{
  return __ZNK2ot3Mac6SubMac17GetPreviousMacKeyEv(this);
}

uint64_t ot::Mac::SubMac::GetNextMacKey(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 104;
}

{
  return __ZNK2ot3Mac6SubMac13GetNextMacKeyEv(this);
}

void ot::Mac::Mac::HandleReceivedFrame(uint64_t a1, ot::Mac::Frame *a2, int a3)
{
  v76  = a1;
  v75  = a2;
  v74  = a3;
  ot::Mac::Address::Address((ot::Mac::Address *)v73);
  ot::Mac::Address::Address((ot::Mac::Address *)v72);
  v69  = v74;
  ++*(_DWORD *)(a1 + 6440);
  if (v69) {
    goto LABEL_112;
  }
  if (!v75)
  {
    v69  = 18;
    goto LABEL_112;
  }

  if ((ot::Mac::Mac::IsEnabled((ot::Mac::Mac *)a1) & 1) == 0)
  {
    v69  = 13;
    goto LABEL_112;
  }

  v69  = ot::Mac::Frame::ValidatePsdu(v75);
  if (v69) {
    goto LABEL_112;
  }
  ot::Mac::Frame::GetSrcAddr(v75, (ot::Mac::Address *)v73);
  IgnoreError();
  ot::Mac::Frame::GetDstAddr(v75, (ot::Mac::Address *)v72);
  IgnoreError();
  if (ot::Mac::Address::IsNone((ot::Mac::Address *)v73))
  {
    uint64_t Neighbor = 0LL;
  }

  else
  {
    uint64_t v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
    uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v3, (ot::Mac::Address *)v73, 1);
  }

  RxOnlyNeighborRouter  = Neighbor;
  int Type = ot::Mac::Address::GetType((ot::Mac::Address *)v72);
  if (Type)
  {
    if (Type == 1)
    {
      if ((*(_BYTE *)a1 & 4) == 0 || !ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v72))
      {
        int Short = (unsigned __int16)ot::Mac::Address::GetShort((ot::Mac::Address *)v72);
        if (Short != (unsigned __int16)ot::Mac::Mac::GetShortAddress((ot::Mac::Mac *)a1))
        {
          v69  = 22;
          goto LABEL_112;
        }
      }

      if (!RxOnlyNeighborRouter && ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v72))
      {
        uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        if (ot::Mle::Mle::IsFullThreadDevice(v4))
        {
          uint64_t v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
          RxOnlyNeighborRouter  = (ot::Neighbor *)ot::NeighborTable::FindRxOnlyNeighborRouter( v5,  (const ot::Mac::Address *)v73);
        }
      }
    }

    else if (Type == 2)
    {
      ot::Mac::Address::GetExtended((ot::Mac::Address *)v72);
      v57  = v6;
      ExtAddress  = (const void *)ot::Mac::Mac::GetExtAddress((ot::Mac::Mac *)a1);
      if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(v57, ExtAddress))
      {
        v69  = 22;
        goto LABEL_112;
      }
    }
  }

  if (!ot::Mac::Frame::GetDstPanId(v75, &v71) && v71 != 0xFFFF && v71 != *(unsigned __int16 *)(a1 + 8))
  {
    v69  = 22;
    goto LABEL_112;
  }

  v56  = ot::Mac::Address::GetType((ot::Mac::Address *)v73);
  if (v56)
  {
    if (v56 == 1)
    {
      char v8 = ot::Mac::Address::GetShort((ot::Mac::Address *)v73);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mac::kLogModuleName,  "Received frame from short address 0x%04x",  v9,  v10,  v11,  v12,  v13,  v14,  v8);
      if (!RxOnlyNeighborRouter)
      {
        v69  = 19;
        goto LABEL_112;
      }

      uint64_t v15 = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(RxOnlyNeighborRouter);
      ot::Mac::Address::SetExtended((uint64_t)v73, v15);
    }

    else if (v56 != 2)
    {
      goto LABEL_41;
    }

    ot::Mac::Address::GetExtended((ot::Mac::Address *)v73);
    v55  = v16;
    uint64_t v17 = (const void *)ot::Mac::Mac::GetExtAddress((ot::Mac::Mac *)a1);
    if (!ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v55, v17))
    {
      v69  = 20;
      goto LABEL_112;
    }

    v54  = v75;
    ot::Mac::Address::GetExtended((ot::Mac::Address *)v73);
    v69  = ot::Mac::Filter::ApplyToRxFrame((ot::Mac::Filter *)(a1 + 7380), v54, v18, RxOnlyNeighborRouter);
    if (v69) {
      goto LABEL_112;
    }
  }

uint64_t ot::Mac::Address::GetType(ot::Mac::Address *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot3Mac7Address7GetTypeEv(this);
}

BOOL ot::Mle::Mle::IsFullThreadDevice(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::Mle *)((char *)this + 312));
}

{
  return __ZNK2ot3Mle3Mle18IsFullThreadDeviceEv(this);
}

BOOL ot::Equatable<ot::Mac::ExtAddress>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_3Mac10ExtAddressEEeqERKS2_(a1, a2);
}

BOOL ot::Unequatable<ot::Mac::ExtAddress>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Mac::ExtAddress>::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_3Mac10ExtAddressEEneERKS2_(a1, a2);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Update(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = 0;
  if (a2 > 0) {
    unsigned __int16 v3 = a2 / 4;
  }
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::IncrementRange(a1, v3);
}

{
  return __ZN2ot5Utils14CountHistogramILs0ELs255ELs4EE6UpdateEs(a1, a2);
}

uint64_t ot::Neighbor::ResetNumConsecutiveMACSecurityFailures(uint64_t this)
{
  *(_DWORD *)(this + 240)  = 0;
  return this;
}

{
  return __ZN2ot8Neighbor38ResetNumConsecutiveMACSecurityFailuresEv(this);
}

uint64_t ot::Neighbor::IncrementNumConsecutiveMACSecurityFailures(uint64_t this)
{
  return this;
}

{
  return __ZN2ot8Neighbor42IncrementNumConsecutiveMACSecurityFailuresEv(this);
}

uint64_t ot::Neighbor::GetNumConsecutiveMACSecurityFailures(ot::Neighbor *this)
{
  return *((unsigned int *)this + 60);
}

{
  return __ZN2ot8Neighbor36GetNumConsecutiveMACSecurityFailuresEv(this);
}

uint64_t ot::Mac::RxFrame::GetTimestamp(ot::Mac::RxFrame *this)
{
  return (uint64_t)this + 16;
}

{
  return __ZNK2ot3Mac7RxFrame12GetTimestampEv(this);
}

uint64_t ot::Mac::SubMac::GetLastCslSampleTime(ot::Mac::SubMac *this)
{
}

{
  return __ZNK2ot3Mac6SubMac20GetLastCslSampleTimeEv(this);
}

uint64_t ot::Min<int>(unsigned int a1, unsigned int a2)
{
  else {
    return a1;
  }
}

{
  return __ZN2ot3MinIiEET_S1_S1_(a1, a2);
}

uint64_t ot::Max<int>(unsigned int a1, unsigned int a2)
{
  else {
    return a2;
  }
}

{
  return __ZN2ot3MaxIiEET_S1_S1_(a1, a2);
}

uint64_t ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = 0;
  if (a2 < -41) {
    unsigned __int16 v3 = -(a2 + 41) / 5;
  }
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::IncrementRange(a1, v3);
}

{
  return __ZN2ot5Utils14CountHistogramILsn41ELsn110ELs5EE6UpdateEs(a1, a2);
}

uint64_t ot::Mac::Mac::HandleMacCommand(ot::Mac::Mac *this, ot::Mac::RxFrame *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  char v14 = 0;
  ot::Mac::Frame::GetCommandId(a2, &v13);
  IgnoreError();
  if (v13 == 4)
  {
    ++*((_DWORD *)this + 1614);
    uint64_t v9 = (ot::DataPollHandler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>(this);
    ot::DataPollHandler::HandleDataPoll(v9, v15);
    char v14 = 1;
  }

  else if (v13 == 7)
  {
    ++*((_DWORD *)this + 1616);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mac::kLogModuleName,  "Received Beacon Request",  v2,  v3,  v4,  v5,  v6,  v7,  v11);
    if ((ot::Mac::Mac::ShouldSendBeacon(this) & 1) != 0)
    {
      Radioint Type = ot::Mac::Frame::GetRadioType(v15);
      ot::Mac::RadioTypes::Add((_BYTE *)this + 7373, RadioType);
      ot::Mac::Mac::StartOperation((uint64_t)this, 3);
    }

    char v14 = 1;
  }

  else
  {
    ++*((_DWORD *)this + 1617);
  }

  return v14 & 1;
}

void ot::Mac::Mac::LogFrameRx(ot::Mac::Mac *this, const ot::Mac::RxFrame *a2)
{
  char v2 = ot::String<(unsigned short)150>::AsCString((uint64_t)v9);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame rx, %s", v3, v4, v5, v6, v7, v8, v2);
}

void ot::Mac::Mac::LogFrameRxFailure(uint64_t a1, ot::Mac::Frame *a2, int a3)
{
  if (a3 == 11 || a3 == 18 || (a3 == 22 || a3 == 21 ? (char v3 = 0) : (char v3 = 1), (v3 & 1) == 0)) {
    unsigned __int8 v16 = 5;
  }
  else {
    unsigned __int8 v16 = 4;
  }
  if (a3 != 17)
  {
    if (a2)
    {
      char v15 = ot::ErrorToString(a3);
      ot::Mac::Frame::ToInfoString(a2, (ot::StringWriter *)v18);
      ot::String<(unsigned short)150>::AsCString((uint64_t)v18);
      ot::Logger::LogInModule( (ot *)&ot::Mac::kLogModuleName,  v16,  "Frame rx failed, error:%s, %s",  v10,  v11,  v12,  v13,  v14,  v15);
    }

    else
    {
      char v4 = ot::ErrorToString(a3);
      ot::Logger::LogInModule((ot *)&ot::Mac::kLogModuleName, v16, "Frame rx failed, error:%s", v5, v6, v7, v8, v9, v4);
    }
  }

void ot::Mac::Mac::SetPromiscuous(ot::Mac::Mac *this, char a2)
{
  char v5 = a2 & 1;
  *(_BYTE *)this  = *(_BYTE *)this & 0xF7 | (8 * (a2 & 1));
  char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::SetPromiscuous(v2, v5 & 1);
  LOBYTE(v++*(_WORD *)(this + 4) = 1;
  if ((*(_BYTE *)this & 4) == 0) {
    int v4 = (*(unsigned __int8 *)this >> 3) & 1;
  }
  ot::Mac::Links::SetRxOnWhenBackoff((ot::Mac::Mac *)((char *)this + 56), v4 & 1);
  ot::Mac::Mac::UpdateIdleMode(this);
}

uint64_t ot::Mac::Mac::GetDirectRetrySuccessHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  else {
    *a2  = 16;
  }
  return (uint64_t)this + 6536;
}

uint64_t ot::Mac::Mac::GetIndirectRetrySuccessHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  if (*((_BYTE *)this + 25)) {
    *a2  = 1;
  }
  else {
    *a2  = *((_BYTE *)this + 25) + 1;
  }
  return (uint64_t)this + 6600;
}

void *ot::Mac::Mac::ResetRetrySuccessHistogram(ot::Mac::Mac *this)
{
  return memset((char *)this + 6536, 0, 0x44uLL);
}

uint64_t ot::Mac::Mac::ComputeLinkMargin(ot::Mac::Mac *this, char a2)
{
  char NoiseFloor = ot::Mac::Mac::GetNoiseFloor(this);
  return ot::ComputeLinkMargin((ot *)NoiseFloor, a2);
}

uint64_t ot::Mac::Mac::GetDirectErrorNoAckHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  else {
    *a2  = 17;
  }
  return (uint64_t)this + 6604;
}

uint64_t ot::Mac::Mac::GetDirectErrorChannelAccessFailureHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  else {
    *a2  = 17;
  }
  return (uint64_t)this + 6672;
}

void *ot::Mac::Mac::ResetTxErrorHistogram(ot::Mac::Mac *this)
{
  return memset((char *)this + 6604, 0, 0x88uLL);
}

void ot::Mac::Mac::GetTxSizeHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetData();
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount()
{
  return 26LL;
}

  ;
}

{
  return __ZNK2ot5Utils14CountHistogramILs0ELs127ELs5EE8GetCountEv();
}

void ot::Mac::Mac::GetRxSizeHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetData();
}

void ot::Mac::Mac::GetRxLqiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetCount();
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetData();
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetCount()
{
  return 64LL;
}

  ;
}

{
  return __ZNK2ot5Utils14CountHistogramILs0ELs255ELs4EE8GetCountEv();
}

void ot::Mac::Mac::GetRouterRssiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData();
}

uint64_t ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount()
{
  return 14LL;
}

  ;
}

{
  return __ZNK2ot5Utils14CountHistogramILsn41ELsn110ELs5EE8GetCountEv();
}

void ot::Mac::Mac::GetEndDeviceRssiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData();
}

uint64_t ot::Mac::Mac::UpdateJoinerRssiHistogram(ot::Mac::Mac *this, char a2)
{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update((uint64_t)this + 7316, a2);
}

void ot::Mac::Mac::GetJoinerRssiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData();
}

void *ot::Mac::Mac::ClearJoinerRssiHistograms(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear((char *)this + 7316);
}

void *ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear(void *a1)
{
  return memset(a1, 0, 0x38uLL);
}

{
  return __ZN2ot5Utils14CountHistogramILsn41ELsn110ELs5EE5ClearEv(a1);
}

void *ot::Mac::Mac::ClearNeighborRssiHistograms(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear((char *)this + 7260);
}

void *ot::Mac::Mac::ClearSizeHistograms(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear((char *)this + 6844);
}

void *ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear(void *a1)
{
  return memset(a1, 0, 0x68uLL);
}

{
  return __ZN2ot5Utils14CountHistogramILs0ELs127ELs5EE5ClearEv(a1);
}

void *ot::Mac::Mac::ClearLqiHistogram(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear((char *)this + 6948);
}

void *ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear(void *a1)
{
  return memset(a1, 0, 0x100uLL);
}

{
  return __ZN2ot5Utils14CountHistogramILs0ELs255ELs4EE5ClearEv(a1);
}

uint64_t ot::Mac::TxFrame::GetTxPower(ot::Mac::TxFrame *this)
{
  return *((char *)this + 42);
}

{
  return __ZNK2ot3Mac7TxFrame10GetTxPowerEv(this);
}

uint64_t ot::Mac::Mac::GetCcaFailureRatePercent(ot::Mac::Mac *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::Mac::Mac *)((char *)this + 6532));
}

{
  return __ZNK2ot3Mac3Mac24GetCcaFailureRatePercentEv(this);
}

uint64_t ot::Mac::Mac::SetMleAdvTxNum(ot::Mac::Mac *this, unsigned __int8 a2)
{
  unsigned int v3 = 0;
  if (a2)
  {
    if (a2 <= 0xFu) {
      *((_BYTE *)this + 26)  = a2;
    }
    else {
      return 7;
    }
  }

  else
  {
    return 7;
  }

  return v3;
}

uint64_t ot::Mac::Links::UpdateCsl( uint64_t a1, unsigned __int16 a2, char a3, unsigned __int16 a4, uint64_t a5, int *a6)
{
  return ot::Mac::SubMac::UpdateCsl(a1 + 8, a2, a3, a4, a5, a6) & 1;
}

{
  return __ZN2ot3Mac5Links9UpdateCslEthtPK12otExtAddressRj(a1, a2, a3, a4, a5, a6);
}

void ot::Mac::Mac::SetCslChannel(ot::Mac::Mac *this, char a2)
{
  *((_BYTE *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  ot::Mac::Mac::UpdateCsl(this, 0LL);
}

void ot::Mac::Mac::SetCslPeriod(ot::Mac::Mac *this, __int16 a2)
{
  *((_WORD *)this + 17)  = a2;
  ot::Mac::Mac::UpdateCsl(this, 0LL);
}

void ot::Mac::Mac::SetCslParentAccuracy(ot::Mac::Mac *this, const ot::Mac::CslAccuracy *a2)
{
  SubMac  = ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
  ot::Mac::SubMac::SetCslParentAccuracy(SubMac, a2);
  ot::Mac::Mac::UpdateCsl(this, 0LL);
}

uint64_t ot::Mac::SubMac::SetCslParentAccuracy(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 19ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *a2;
  return result;
}

BOOL ot::Mac::Mac::IsCslCapable(ot::Mac::Mac *this)
{
  CslPeriod  = ot::Mac::Mac::GetCslPeriod(this);
  if (v2 | (CslPeriod == 0)) {
    char v3 = 1;
  }
  else {
    char v3 = 0;
  }
  BOOL v6 = 0;
  if ((v3 & 1) == 0) {
    return ot::Mac::Mac::IsCslSupported(this);
  }
  return v6;
}

BOOL ot::Mac::Mac::IsCslSupported(ot::Mac::Mac *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsChild(v1))
  {
    char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v2);
    return ot::Neighbor::IsEnhancedKeepAliveSupported(Parent);
  }

  else
  {
    return 0;
  }

uint64_t ot::Mac::Mac::SetWorChannel(uint64_t this, char a2)
{
  *(_BYTE *)(this + 36)  = a2;
  return this;
}

uint64_t ot::Mac::CslIe::GetPeriod(ot::Mac::CslIe *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Mac5CslIe9GetPeriodEv(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslPeriod(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8)  = a2;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo12SetCslPeriodEt(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslPhase(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10)  = a2;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo11SetCslPhaseEt(this, a2);
}

uint64_t ot::Mac::CslIe::GetPhase(ot::Mac::CslIe *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)this);
}

{
  return __ZNK2ot3Mac5CslIe8GetPhaseEv(this);
}

_BYTE *ot::CslTxScheduler::ChildInfo::SetCslSynchronized(_BYTE *this, char a2)
{
  *this  = *this & 0xBF | ((a2 & 1) << 6);
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo18SetCslSynchronizedEb(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslLastHeard(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return result;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo15SetCslLastHeardENS_4TimeE(result, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetLastRxTimestamp(uint64_t this, uint64_t a2)
{
  *(void *)(this + ot::Mac::RadioTypes::Clear((_BYTE *)this + 16) = a2;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo18SetLastRxTimestampEy(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslPhase(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo11GetCslPhaseEv(this);
}

BOOL ot::Mac::Frame::IsAck(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetType(this) == 2;
}

{
  return __ZNK2ot3Mac5Frame5IsAckEv(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::IsCslPrevSnValid(ot::CslTxScheduler::ChildInfo *this)
{
  return (*(unsigned __int8 *)this >> 7) & 1;
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo16IsCslPrevSnValidEv(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslPrevSn(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo12GetCslPrevSnEv(this);
}

_BYTE *ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid(_BYTE *this, char a2)
{
  *this  = *this & 0x7F | ((a2 & 1) << 7);
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo17SetCslPrevSnValidEb(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslPrevSn(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo12SetCslPrevSnEh(this, a2);
}

uint64_t ot::Mac::HeaderIe::GetLength(ot::Mac::HeaderIe *this)
{
  return *(_BYTE *)this & 0x7F;
}

{
  return __ZNK2ot3Mac8HeaderIe9GetLengthEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::LinkMetrics::Initiator>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11LinkMetrics9InitiatorEEERT_v(a1);
}

void ot::Mac::Mac::SetRadioFilterEnabled(ot::Mac::Mac *this, char a2)
{
  char v4 = a2 & 1;
  SubMac  = ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
  ot::Mac::SubMac::SetRadioFilterEnabled(SubMac, v4 & 1);
  ot::Mac::Mac::UpdateIdleMode(this);
}

uint64_t ot::Mac::SubMac::SetRadioFilterEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(this + 32) & 0xFD | (2 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Mac6SubMac21SetRadioFilterEnabledEb(this, a2);
}

_DWORD *ot::Mac::ChannelMask::ChannelMask(_DWORD *this)
{
  *this  = 0;
  return this;
}

void ot::Mac::Links::SetShortAddress(ot::Mac::Links *this, __int16 a2)
{
}

{
  __ZN2ot3Mac5Links15SetShortAddressEt(this, a2);
}

ot::MeshCoP::NameData *ot::MeshCoP::NameData::NameData(ot::MeshCoP::NameData *this, const char *a2, char a3)
{
  return this;
}

{
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)this, (uint64_t)a2, a3);
  return this;
}

uint64_t ot::Trel::Link::SetPanId(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 170)  = a2;
  return this;
}

{
  return __ZN2ot4Trel4Link8SetPanIdEt(this, a2);
}

uint64_t ot::Mac::SubMac::SetRxOnWhenBackoff(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(this + 32) & 0xFE | a2 & 1;
  return this;
}

{
  return __ZN2ot3Mac6SubMac18SetRxOnWhenBackoffEb(this, a2);
}

uint64_t ot::Mac::TxFrame::SetIsSecurityProcessed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 45)  = *(_BYTE *)(this + 45) & 0xEF | (16 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Mac7TxFrame22SetIsSecurityProcessedEb(this, a2);
}

uint64_t ot::Mac::TxFrame::SetCsmaCaEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 45)  = *(_BYTE *)(this + 45) & 0xFB | (4 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Mac7TxFrame16SetCsmaCaEnabledEb(this, a2);
}

uint64_t ot::Mac::TxFrame::SetTxDelay(uint64_t this, int a2)
{
  *(_DWORD *)(this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot3Mac7TxFrame10SetTxDelayEj(this, a2);
}

uint64_t ot::Mac::TxFrame::SetTxDelayBaseTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36)  = a2;
  return this;
}

{
  return __ZN2ot3Mac7TxFrame18SetTxDelayBaseTimeEj(this, a2);
}

uint64_t ot::Mac::TxFrame::SetCslIePresent(uint64_t this, char a2)
{
  *(_BYTE *)(this + 45)  = *(_BYTE *)(this + 45) & 0xF7 | (8 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Mac7TxFrame15SetCslIePresentEb(this, a2);
}

uint64_t ot::Mac::TxFrame::SetRxChannelAfterTxDone(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4++*(_WORD *)(this + 4) = a2;
  return this;
}

{
  return __ZN2ot3Mac7TxFrame23SetRxChannelAfterTxDoneEh(this, a2);
}

uint64_t ot::Mac::RadioTypes::BitFlag(char a1)
{
  return (1 << a1);
}

{
  return __ZN2ot3Mac10RadioTypes7BitFlagENS0_9RadioTypeE(a1);
}

BOOL ot::Mac::Frame::IsAckRequest(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 32) != 0;
}

{
  return __ZN2ot3Mac5Frame12IsAckRequestEt(this);
}

uint64_t ot::Mac::SubMac::GetTransmitRetries(ot::Mac::SubMac *this)
{
  return *((unsigned __int8 *)this + 20);
}

{
  return __ZNK2ot3Mac6SubMac18GetTransmitRetriesEv(this);
}

BOOL ot::Mle::DeviceMode::IsFullThreadDevice(ot::Mle::DeviceMode *this)
{
  return (*(_BYTE *)this & 2) != 0;
}

{
  return __ZNK2ot3Mle10DeviceMode18IsFullThreadDeviceEv(this);
}

uint64_t ot::SuccessRateTracker::GetFailureRatePercent(ot::SuccessRateTracker *this)
{
  return (10000 * *(unsigned __int16 *)this / 0xFFFF);
}

{
  return __ZNK2ot18SuccessRateTracker21GetFailureRatePercentEv(this);
}

uint64_t ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  return ot::Mac::Mac::PerformNextOperation(v2);
}

uint64_t ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mac::Mac::HandleTimer)(v2);
}

BOOL ot::Mac::ChannelMask::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

{
  return __ZNK2ot3Mac11ChannelMaskeqERKS1_(a1, a2);
}

uint64_t ot::Instance::Get<ot::DataPollHandler>(uint64_t a1)
{
  return a1 + 96328;
}

{
  return __ZN2ot8Instance3GetINS_15DataPollHandlerEEERT_v(a1);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::IncrementRange( uint64_t result, unsigned __int16 a2)
{
  if (a2 >= 0x1Au) {
    int v2 = 25;
  }
  else {
    int v2 = a2;
  }
  ++*(_DWORD *)(result + 4LL * v2);
  return result;
}

{
  return __ZN2ot5Utils14CountHistogramILs0ELs127ELs5EE14IncrementRangeEt(result, a2);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::IncrementRange( uint64_t result, unsigned __int16 a2)
{
  if (a2 >= 0x40u) {
    int v2 = 63;
  }
  else {
    int v2 = a2;
  }
  ++*(_DWORD *)(result + 4LL * v2);
  return result;
}

{
  return __ZN2ot5Utils14CountHistogramILs0ELs255ELs4EE14IncrementRangeEt(result, a2);
}

uint64_t ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::IncrementRange( uint64_t result, unsigned __int16 a2)
{
  if (a2 >= 0xEu) {
    int v2 = 13;
  }
  else {
    int v2 = a2;
  }
  ++*(_DWORD *)(result + 4LL * v2);
  return result;
}

{
  return __ZN2ot5Utils14CountHistogramILsn41ELsn110ELs5EE14IncrementRangeEt(result, a2);
}

uint64_t otMeshDiagDiscoverTopology(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    __assert_rtn("otMeshDiagDiscoverTopology", "mesh_diag_api.cpp", 51, "(aConfig) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = ot::Instance::Get<ot::Utils::MeshDiag>(v4);
  return ot::Utils::MeshDiag::DiscoverTopology(v5, a2, a3, a4);
}

void otMeshDiagCancel(uint64_t a1)
{
  int v2 = (ot::Utils::MeshDiag *)ot::Instance::Get<ot::Utils::MeshDiag>(v1);
  ot::Utils::MeshDiag::Cancel(v2);
}

uint64_t otMeshDiagGetNextIp6Address(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  ot::AsCoreType<otIp6Address>(a2);
  return ot::Utils::MeshDiag::Ip6AddrIterator::GetNextAddress(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMeshDiagIp6AddrIterator>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otMeshDiagGetNextChildInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  ot::AsCoreType<otMeshDiagChildInfo>(a2);
  return ot::Utils::MeshDiag::ChildIterator::GetNextChildInfo(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMeshDiagChildIterator>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMeshDiagChildInfo>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

_BYTE *ot::Mac::Filter::Filter(_BYTE *this)
{
  *this  = 0;
  this[1]  = 127;
  for (unsigned __int8 i = this + 2; i != this + 322; i += 10)
  {
    *unsigned __int8 i = 0;
    i[1]  = 127;
  }

  return this;
}

ot::Mac::Filter *ot::Mac::Filter::Filter(ot::Mac::Filter *this)
{
  return this;
}

char *ot::Mac::Filter::FindEntry(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v5 = 0LL;
  uint64_t v4 = (char *)this + 2;
  char v3 = (char *)this + 322;
  while (v4 != v3)
  {
    if (ot::Mac::Filter::FilterEntry::IsInUse((ot::Mac::Filter::FilterEntry *)v4)
      && ot::Equatable<ot::Mac::ExtAddress>::operator==(a2, v4 + 2))
    {
      return v4;
    }

    v4 += 10;
  }

  return (char *)v5;
}

BOOL ot::Mac::Filter::FilterEntry::IsInUse(ot::Mac::Filter::FilterEntry *this)
{
  BOOL v2 = 1;
  if ((*(_BYTE *)this & 1) == 0) {
    return *((_BYTE *)this + 1) != 127;
  }
  return v2;
}

{
  return __ZNK2ot3Mac6Filter11FilterEntry7IsInUseEv(this);
}

ot::Mac::Filter::FilterEntry *ot::Mac::Filter::FindAvailableEntry(ot::Mac::Filter *this)
{
  uint64_t v4 = 0LL;
  char v3 = (ot::Mac::Filter *)((char *)this + 2);
  BOOL v2 = (ot::Mac::Filter *)((char *)this + 322);
  while (v3 != v2)
  {
    if (!ot::Mac::Filter::FilterEntry::IsInUse(v3)) {
      return v3;
    }
    char v3 = (ot::Mac::Filter::FilterEntry *)((char *)v3 + 10);
  }

  return (ot::Mac::Filter::FilterEntry *)v4;
}

uint64_t ot::Mac::Filter::AddAddress(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  unsigned int v6 = 0;
  ot::Mac::Filter::FindEntry(this, a2);
  AvailableEntry  = v2;
  if (v2) {
    goto LABEL_5;
  }
  AvailableEntry  = ot::Mac::Filter::FindAvailableEntry(this);
  if (AvailableEntry)
  {
    *(void *)((char *)AvailableEntry + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(void *)a2;
LABEL_5:
    *(_BYTE *)AvailableEntry  = 1;
    return v6;
  }

  return 3;
}

void ot::Mac::Filter::FindEntry(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
}

{
  __ZN2ot3Mac6Filter9FindEntryERKNS0_10ExtAddressE(this, a2);
}

void ot::Mac::Filter::RemoveAddress(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  if (v2) {
    *BOOL v2 = 0;
  }
}

uint64_t ot::Mac::Filter::ClearAddresses(uint64_t this)
{
  for (unsigned __int8 i = (_BYTE *)(this + 2); i != (_BYTE *)(this + 322); i += 10)
    *unsigned __int8 i = 0;
  return this;
}

uint64_t ot::Mac::Filter::GetNextAddress(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v7 = 23;
  while (1)
  {
    int v4 = *a2;
    uint64_t v6 = a1 + 2 + 10LL * *a2;
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      *(void *)a3  = *(void *)(v6 + 2);
      *(_BYTE *)(a3 + 8)  = *(_BYTE *)(v6 + 1);
      unsigned int v7 = 0;
      ++*a2;
      return v7;
    }

    ++*a2;
  }

  return v7;
}

uint64_t ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>()
{
  return 32LL;
}

{
  return __ZN2ot14GetArrayLengthINS_3Mac6Filter11FilterEntryELt32EEEtRAT0__KT_();
}

uint64_t ot::Mac::Filter::AddRssIn(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2, char a3)
{
  unsigned int v7 = 0;
  ot::Mac::Filter::FindEntry(this, a2);
  AvailableEntry  = v3;
  if (v3) {
    goto LABEL_5;
  }
  AvailableEntry  = ot::Mac::Filter::FindAvailableEntry(this);
  if (AvailableEntry)
  {
    *(void *)((char *)AvailableEntry + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(void *)a2;
LABEL_5:
    *((_BYTE *)AvailableEntry + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a3;
    return v7;
  }

  return 3;
}

void ot::Mac::Filter::RemoveRssIn(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  if (v2) {
    *(_BYTE *)(v2 + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 127;
  }
}

uint64_t ot::Mac::Filter::ClearAllRssIn(uint64_t this)
{
  for (uint64_t i = this + 2; i != this + 322; i += 10LL)
    *(_BYTE *)(i + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 127;
  *(_BYTE *)(this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 127;
  return this;
}

uint64_t ot::Mac::Filter::GetNextRssIn(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v9 = 23;
  while (1)
  {
    int v6 = *a2;
    uint64_t v8 = a1 + 2 + 10LL * *a2;
    if (*(_BYTE *)(v8 + 1) != 127)
    {
      *(void *)a3  = *(void *)(v8 + 2);
      *(_BYTE *)(a3 + 8)  = *(_BYTE *)(v8 + 1);
      unsigned int v9 = 0;
      ++*a2;
      return v9;
    }

    ++*a2;
  }

  int v5 = *a2;
  if (v5 == (unsigned __int16)ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>()
    && *(_BYTE *)(a1 + 1) != 127)
  {
    ot::AsCoreType<otExtAddress>(a3);
    ot::Mac::ExtAddress::Fill(v3, 0xFFu);
    *(_BYTE *)(a3 + 8)  = *(_BYTE *)(a1 + 1);
    unsigned int v9 = 0;
    ++*a2;
  }

  return v9;
}

void *ot::Mac::ExtAddress::Fill(void *this, unsigned __int8 a2)
{
  *this  = 0x101010101010101LL * a2;
  return this;
}

{
  return __ZN2ot3Mac10ExtAddress4FillEh(this, a2);
}

uint64_t ot::Mac::Filter::Apply(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2, signed __int8 *a3)
{
  unsigned int v8 = 0;
  Entry  = ot::Mac::Filter::FindEntry(this, a2);
  *a3  = *((_BYTE *)this + 1);
  char v6 = 0;
  if (Entry) {
    char v6 = *Entry;
  }
  int v4 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    if (v4 == 1)
    {
      if ((v6 & 1) == 0) {
        return 21;
      }
    }

    else if (v4 == 2 && (v6 & 1) != 0)
    {
      return 21;
    }
  }

  if (Entry && Entry[1] != 127) {
    *a3  = Entry[1];
  }
  return v8;
}

uint64_t ot::Mac::Filter::ApplyToRxFrame( ot::Mac::Filter *this, ot::Mac::RxFrame *a2, const ot::Mac::ExtAddress *a3, ot::Neighbor *a4)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned int v9 = a3;
  unsigned int v8 = a4;
  unsigned int v7 = ot::Mac::Filter::Apply(this, a3, &v6);
  if (!v7 && v6 != 127)
  {
    ot::Mac::RxFrame::SetRssi((uint64_t)v10, v6);
    if (v8)
    {
      LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v8);
      ot::LinkQualityInfo::ClearAverageRss(LinkInfo);
    }
  }

  return v7;
}

uint64_t ot::Mac::RxFrame::SetRssi(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2ot::Mle::Tlv::SetType(this, 9) = a2;
  return this;
}

{
  return __ZN2ot3Mac7RxFrame7SetRssiEa(this, a2);
}

_WORD *ot::LinkQualityInfo::ClearAverageRss(ot::LinkQualityInfo *this)
{
  return ot::Clearable<ot::RssAverager>::Clear(this);
}

  ;
}

  ;
}

{
  return __ZN2ot15LinkQualityInfo15ClearAverageRssEv(this);
}

_WORD *ot::Clearable<ot::RssAverager>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_11RssAveragerEE5ClearEv(result);
}

ot::StringWriter *ot::MeshCoP::ExtendedPanId::ToString@<X0>( ot::MeshCoP::ExtendedPanId *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, 8);
}

uint64_t ot::String<(unsigned short)17>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 17);
  return a1;
}

ot::MeshCoP::ExtendedPanIdManager *ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager( ot::MeshCoP::ExtendedPanIdManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager(this, a2);
  return this;
}

void *ot::Clearable<ot::MeshCoP::ExtendedPanId>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_7MeshCoP13ExtendedPanIdEE5ClearEv(result);
}

void ot::MeshCoP::ExtendedPanIdManager::SetExtPanId( ot::MeshCoP::ExtendedPanIdManager *this, const ot::MeshCoP::ExtendedPanId *a2)
{
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  ot::Notifier::Update<ot::MeshCoP::ExtendedPanId>(v2, this, a2, 0x20000LL);
  IgnoreError();
}

uint64_t ot::Notifier::Update<ot::MeshCoP::ExtendedPanId>(void *a1, void *a2, void *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v6;
}

{
  return __ZN2ot8Notifier6UpdateINS_7MeshCoP13ExtendedPanIdEEE7otErrorRT_RKS5_NS_5EventE(a1, a2, a3, a4);
}

BOOL ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_7MeshCoP13ExtendedPanIdEEeqERKS2_(a1, a2);
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CslIe>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0x1Au, 4u);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::CslIe>((uint64_t)a1, a2);
  }
  return inited;
}

{
  return __ZN2ot3Mac5Frame16AppendHeaderIeAtINS0_5CslIeEEE7otErrorRh(a1, a2);
}

uint64_t ot::Mac::Frame::InitIeHeaderAt( ot::Mac::Frame *this, unsigned __int8 *a2, unsigned __int8 a3, unsigned __int8 a4)
{
  unsigned int v8 = 0;
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  ot::Encoding::LittleEndian::WriteUint16(FrameControlField | 0x200u, *(_WORD **)this, v5);
  if (!*a2) {
    *a2  = ot::Mac::Frame::FindHeaderIeIndex(this);
  }
  if (*a2 == 255)
  {
    return 23;
  }

  else
  {
    ot::Mac::HeaderIe::Init((ot::Mac::HeaderIe *)(*(void *)this + *a2), a3, a4);
    *a2 += 2;
    *((_WORD *)this + 4) += a4 + 2;
  }

  return v8;
}

void ot::Mac::Frame::InitIeContentAt<ot::Mac::CslIe>(uint64_t a1, _BYTE *a2)
{
  *a2 += 4;
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::Termination2Ie>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0x7Fu, 0);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::Termination2Ie>();
  }
  return inited;
}

  ;
}

{
  return __ZN2ot3Mac5Frame16AppendHeaderIeAtINS0_14Termination2IeEEE7otErrorRh(a1, a2);
}

_BYTE *ot::Mac::HeaderIe::Init(ot::Mac::HeaderIe *this, __int16 a2, char a3)
{
  return ot::Mac::HeaderIe::SetLength(this, a3);
}

_WORD *ot::Mac::HeaderIe::Init(_WORD *this)
{
  *this  = 0;
  return this;
}

{
  return __ZN2ot3Mac8HeaderIe4InitEv(this);
}

uint64_t ot::Mac::HeaderIe::SetId(ot::Mac::HeaderIe *this, __int16 a2)
{
  __int16 v2 = ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)this);
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(v2 & 0x807F | (a2 << 7) & 0x7F80u);
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot3Mac8HeaderIe5SetIdEt(this, a2);
}

_BYTE *ot::Mac::HeaderIe::SetLength(_BYTE *this, char a2)
{
  *this  = *this & 0x80 | a2 & 0x7F;
  return this;
}

{
  return __ZN2ot3Mac8HeaderIe9SetLengthEh(this, a2);
}

uint64_t ot::Mac::Frame::InitMacHeader( ot::Mac::Frame *a1, __int16 a2, __int16 a3, ot::Mac::Address *a4, unsigned __int16 *a5, char a6, char a7)
{
  uint64_t v24 = a1;
  __int16 v23 = a2;
  __int16 v22 = a3;
  uint64_t v21 = a4;
  char v20 = a5;
  char v19 = a6;
  char v18 = a7;
  unsigned __int16 v17 = a2 | a3;
  int Type = ot::Mac::Address::GetType(a4);
  if (Type)
  {
    if (Type == 1)
    {
      v17 |= 0x8000u;
    }

    else if (Type == 2)
    {
      v17 |= 0xC000u;
    }
  }

  int v12 = ot::Mac::Address::GetType((ot::Mac::Address *)((char *)v21 + 10));
  if (v12)
  {
    if (v12 == 1)
    {
      v17 |= 0x800u;
      else {
        __int16 v7 = 32;
      }
      v17 |= v7;
    }

    else if (v12 == 2)
    {
      v17 |= 0xC20u;
    }
  }

  if (v19) {
    __int16 v8 = 8;
  }
  else {
    __int16 v8 = 0;
  }
  v17 |= v8;
  if (!ot::Mac::Address::IsNone(v21)
    && !ot::Mac::Address::IsNone((ot::Mac::Address *)((char *)v21 + 10))
    && *v20 == v20[1]
    && (!v22
     || v22 == 4096
     || v22 == 0x2000
     && (!ot::Mac::Address::IsExtended(v21) || !ot::Mac::Address::IsExtended((ot::Mac::Address *)((char *)v21 + 10)))))
  {
    v17 |= 0x40u;
  }

  uint64_t v11 = *(void **)a1;
  Mtu  = ot::Mac::Frame::GetMtu(a1);
  ot::FrameBuilder::Init((uint64_t)v16, v11, Mtu);
  ot::FrameBuilder::AppendLittleEndianUint16((ot::FrameBuilder *)v16, v17);
  IgnoreError();
  ot::FrameBuilder::AppendUint8((ot::FrameBuilder *)v16, 0);
  IgnoreError();
  if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)v17))
  {
    ot::FrameBuilder::AppendLittleEndianUint16((ot::FrameBuilder *)v16, v20[1]);
    IgnoreError();
  }

  ot::FrameBuilder::AppendMacAddress((ot::FrameBuilder *)v16, (ot::Mac::Address *)((char *)v21 + 10));
  IgnoreError();
  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)v17))
  {
    ot::FrameBuilder::AppendLittleEndianUint16((ot::FrameBuilder *)v16, *v20);
    IgnoreError();
  }

  ot::FrameBuilder::AppendMacAddress((ot::FrameBuilder *)v16, v21);
  IgnoreError();
  *((_WORD *)a1 + ++*(_WORD *)(this + 4) = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v16);
  if (v19)
  {
    unsigned __int8 v15 = v19 | v18;
    ot::FrameBuilder::AppendUint8((ot::FrameBuilder *)v16, v19 | v18);
    IgnoreError();
    *((_WORD *)a1 + 4) += ot::Mac::Frame::CalculateSecurityHeaderSize((ot::Mac::Frame *)v15);
    *((_WORD *)a1 + 4) += ot::Mac::Frame::CalculateMicSize((ot::Mac::Frame *)v15);
  }

  if (v23 == 3) {
    ++*((_WORD *)a1 + 4);
  }
  uint64_t result = ot::Mac::Frame::GetFcsSize(a1);
  *((_WORD *)a1 + 4) += result;
  return result;
}

uint64_t ot::Mac::Frame::GetMtu(ot::Mac::Frame *this)
{
  unsigned __int16 v3 = 0;
  Radioint Type = ot::Mac::Frame::GetRadioType(this);
  if (RadioType)
  {
    if (RadioType == 1) {
      return 1208;
    }
  }

  else
  {
    return 127;
  }

  return v3;
}

BOOL ot::Mac::Frame::IsDstPanIdPresent(ot::Mac::Frame *this)
{
  unsigned __int16 v4 = (unsigned __int16)this;
  BOOL v3 = 1;
  if (ot::Mac::Frame::IsVersion2015((ot::Mac::Frame *)(unsigned __int16)this))
  {
    int v2 = v4 & 0xCC40;
    if ((v4 & 0xCC40) == 0
      || v2 == 2112
      || v2 == 3136
      || v2 == 0x8000
      || v2 == 32832
      || v2 == 49152
      || v2 == 49216
      || v2 == 52288)
    {
      return 0;
    }
  }

  else
  {
    return ot::Mac::Frame::IsDstAddrPresent((ot::Mac::Frame *)v4);
  }

  return v3;
}

{
  unsigned __int16 FrameControlField;
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)FrameControlField);
}

{
  return __ZNK2ot3Mac5Frame17IsDstPanIdPresentEv(this);
}

BOOL ot::Mac::Frame::IsSrcPanIdPresent(ot::Mac::Frame *this)
{
  unsigned __int16 v4 = (unsigned __int16)this;
  BOOL v2 = 0;
  BOOL v3 = v2;
  if (ot::Mac::Frame::IsVersion2015((ot::Mac::Frame *)v4) && (v4 & 0xCC00) == 0xCC00) {
    return 0;
  }
  return v3;
}

{
  unsigned __int16 FrameControlField;
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)FrameControlField);
}

{
  return __ZNK2ot3Mac5Frame17IsSrcPanIdPresentEv(this);
}

uint64_t ot::FrameBuilder::GetLength(ot::FrameBuilder *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot12FrameBuilder9GetLengthEv(this);
}

uint64_t ot::Mac::Frame::CalculateSecurityHeaderSize(ot::Mac::Frame *this)
{
  unsigned __int8 v3 = 5;
  if ((this & 7) != 0)
  {
    unint64_t v2 = this & 0x18;
    if (v2 <= 0x18) {
      __asm { BR              X8 }
    }
  }

  else
  {
    return -1;
  }

  return v3;
}

uint64_t ot::Mac::Frame::CalculateMicSize(ot::Mac::Frame *this)
{
  unint64_t v2 = this & 7;
  if (v2 <= 7) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t ot::Mac::Frame::GetFcsSize(ot::Mac::Frame *this)
{
  unsigned __int8 v3 = 0;
  Radioint Type = ot::Mac::Frame::GetRadioType(this);
  if (RadioType)
  {
    if (RadioType == 1) {
      return 0;
    }
  }

  else
  {
    return 2;
  }

  return v3;
}

uint64_t ot::Mac::Frame::ValidatePsdu(ot::Mac::Frame *this)
{
  v3[4]  = 0;
  *(_DWORD *)unsigned __int8 v3 = ot::Mac::Frame::FindPayloadIndex(this);
  if (v3[0] == 255)
  {
    *(_DWORD *)&v3[1]  = 6;
  }

  else if (v3[0] + ot::Mac::Frame::GetFooterLength(this) > *((unsigned __int16 *)this + 4))
  {
    *(_DWORD *)&v3[1]  = 6;
  }

  return *(unsigned int *)&v3[1];
}

uint64_t ot::Mac::Frame::FindPayloadIndex(ot::Mac::Frame *this)
{
  unsigned __int16 v5 = ot::Mac::Frame::SkipSecurityHeaderIndex(this);
  if (v5 != 255)
  {
    if (ot::Mac::Frame::IsIePresent(this))
    {
      Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
      while (1)
      {
        unsigned __int8 v3 = (ot::Mac::HeaderIe *)(*(void *)this + v5);
        unsigned __int16 v6 = v5 + 2;
        if (v6 + FooterLength > *((unsigned __int16 *)this + 4))
        {
          LOBYTE(v5)  = -1;
          return v5;
        }

        unsigned __int16 v5 = v6 + ot::Mac::HeaderIe::GetLength(v3);
        if ((unsigned __int16)ot::Mac::HeaderIe::GetId(v3) == 127
          || v5 + FooterLength >= *((unsigned __int16 *)this + 4))
        {
          goto LABEL_10;
        }
      }

      LOBYTE(v5)  = -1;
    }

    else
    {
LABEL_10:
      if (!ot::Mac::Frame::IsVersion2015(this) && (ot::Mac::Frame::GetFrameControlField(this) & 7) == 3) {
        LOBYTE(v5)  = v5 + 1;
      }
    }
  }

  return v5;
}

uint64_t ot::Mac::Frame::GetFooterLength(ot::Mac::Frame *this)
{
  FcsSize  = ot::Mac::Frame::GetFcsSize(this);
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex != 255) {
    FcsSize += ot::Mac::Frame::CalculateMicSize((ot::Mac::Frame *)*(unsigned __int8 *)(*(void *)this
  }
                                                                                     + SecurityHeaderIndex));
  return FcsSize;
}

_BYTE **ot::Mac::Frame::SetAckRequest(_BYTE **this, char a2)
{
  if ((a2 & 1) != 0) {
    **this |= 0x20u;
  }
  else {
    **this &= ~0x20u;
  }
  return this;
}

_BYTE **ot::Mac::Frame::SetFramePending(_BYTE **this, char a2)
{
  if ((a2 & 1) != 0) {
    **this |= 0x10u;
  }
  else {
    **this &= ~0x10u;
  }
  return this;
}

uint64_t ot::Mac::Frame::SkipDsnIndex(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  FcfSize  = ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)FrameControlField);
  if (ot::Mac::Frame::IsDsnPresent((ot::Mac::Frame *)FrameControlField)) {
    ++FcfSize;
  }
  return FcfSize;
}

BOOL ot::Mac::Frame::IsDsnPresent(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 256) == 0;
}

{
  return __ZN2ot3Mac5Frame12IsDsnPresentEt(this);
}

uint64_t ot::Mac::Frame::FindDstPanIdIndex(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::IsDstPanIdPresent(this)) {
    return ot::Mac::Frame::SkipDsnIndex(this);
  }
  else {
    return -1;
  }
}

BOOL ot::Mac::Frame::IsDstAddrPresent(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 3072) != 0;
}

{
  return __ZN2ot3Mac5Frame16IsDstAddrPresentEt(this);
}

uint64_t ot::Mac::Frame::GetDstPanId(ot::Mac::Frame *this, unsigned __int16 *a2)
{
  v5[4]  = 0;
  *(_DWORD *)unsigned __int16 v5 = ot::Mac::Frame::FindDstPanIdIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    *a2  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v5[0]), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Mac::Frame::SetDstPanId(ot::Mac::Frame *this, unsigned __int16 a2)
{
  DstPanIdIndex  = ot::Mac::Frame::FindDstPanIdIndex(this);
  if (DstPanIdIndex == 255) {
    __assert_rtn("SetDstPanId", "mac_frame.cpp", 363, "index != kInvalidIndex");
  }
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)this + DstPanIdIndex), v2);
}

uint64_t ot::Mac::Frame::FindDstAddrIndex(ot::Mac::Frame *this)
{
  char v5 = ot::Mac::Frame::SkipDsnIndex(this);
  IsDstPanIdPresent  = ot::Mac::Frame::IsDstPanIdPresent(this);
  char v2 = 2;
  if (!IsDstPanIdPresent) {
    char v2 = 0;
  }
  return (v2 + v5);
}

uint64_t ot::Mac::Frame::GetDstAddr(ot::Mac::Frame *this, ot::Mac::Address *a2)
{
  v8[4]  = 0;
  *(_DWORD *)__int16 v8 = ot::Mac::Frame::FindDstAddrIndex(this);
  if (v8[0] == 255)
  {
    *(_DWORD *)&v8[1]  = 6;
  }

  else
  {
    FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
    FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField);
    if (FcfDstAddr == 2)
    {
      Uint16  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v8[0]), v3);
      ot::Mac::Address::SetShort((uint64_t)a2, Uint16);
    }

    else if (FcfDstAddr == 3)
    {
      ot::Mac::Address::SetExtended((char *)a2, (void *)(*(void *)this + v8[0]), 1);
    }

    else
    {
      ot::Mac::Address::SetNone((uint64_t)a2);
    }
  }

  return *(unsigned int *)&v8[1];
}

uint64_t ot::Mac::Frame::GetFcfDstAddr(ot::Mac::Frame *this)
{
  return ((unsigned __int16)this & 0xC00) >> 10;
}

{
  return __ZN2ot3Mac5Frame13GetFcfDstAddrEt(this);
}

char *ot::Mac::Address::SetExtended(char *a1, void *a2, char a3)
{
  uint64_t result = ot::Mac::ExtAddress::Set(a1, a2, a3);
  a1[8]  = 2;
  return result;
}

{
  return __ZN2ot3Mac7Address11SetExtendedEPKhNS0_10ExtAddress13CopyByteOrderE(a1, a2, a3);
}

uint64_t ot::Mac::Frame::SetDstAddr(ot::Mac::Frame *this, unsigned __int16 a2)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  uint64_t v6 = *(void *)this;
  DstAddrIndex  = ot::Mac::Frame::FindDstAddrIndex(this);
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(v6 + DstAddrIndex), v4);
}

char *ot::Mac::Frame::SetDstAddr(ot::Mac::Frame *this, const ot::Mac::ExtAddress *a2)
{
  DstAddrIndex  = ot::Mac::Frame::FindDstAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (DstAddrIndex == 255) {
    __assert_rtn("SetDstAddr", "mac_frame.cpp", 406, "index != kInvalidIndex");
  }
  return ot::Mac::ExtAddress::CopyTo(a2, (char *)(*(void *)this + DstAddrIndex), 1);
}

char *ot::Mac::ExtAddress::CopyTo(void *a1, char *a2, char a3)
{
  return ot::Mac::ExtAddress::CopyAddress(a2, a1, a3);
}

{
  return __ZNK2ot3Mac10ExtAddress6CopyToEPhNS1_13CopyByteOrderE(a1, a2, a3);
}

char *ot::Mac::Frame::SetDstAddr(ot::Mac::Frame *this, const ot::Mac::Address *a2)
{
  int Type = ot::Mac::Address::GetType(a2);
  if (Type == 1)
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(a2);
    return (char *)ot::Mac::Frame::SetDstAddr(this, Short);
  }

  else
  {
    if (Type != 2) {
      __assert_rtn("SetDstAddr", "mac_frame.cpp", 424, "false");
    }
    ot::Mac::Address::GetExtended(a2);
    return ot::Mac::Frame::SetDstAddr(this, v4);
  }

uint64_t ot::Mac::Frame::FindSrcPanIdIndex(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)FrameControlField))
  {
    unsigned __int8 v4 = ot::Mac::Frame::SkipDsnIndex(this);
    if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)FrameControlField)) {
      v4 += 2;
    }
    FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField);
    if (FcfDstAddr == 2)
    {
      v4 += 2;
    }

    else if (FcfDstAddr == 3)
    {
      v4 += 8;
    }
  }

  else
  {
    return -1;
  }

  return v4;
}

BOOL ot::Mac::Frame::IsSrcAddrPresent(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 49152) != 0;
}

{
  unsigned __int16 FrameControlField;
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsSrcAddrPresent((ot::Mac::Frame *)FrameControlField);
}

{
  return __ZN2ot3Mac5Frame16IsSrcAddrPresentEt(this);
}

{
  return __ZNK2ot3Mac5Frame16IsSrcAddrPresentEv(this);
}

uint64_t ot::Mac::Frame::GetSrcPanId(ot::Mac::Frame *this, unsigned __int16 *a2)
{
  v5[4]  = 0;
  *(_DWORD *)char v5 = ot::Mac::Frame::FindSrcPanIdIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    *a2  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v5[0]), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Mac::Frame::SetSrcPanId(ot::Mac::Frame *this, unsigned __int16 a2)
{
  v5[4]  = 0;
  *(_DWORD *)char v5 = ot::Mac::Frame::FindSrcPanIdIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)this + v5[0]), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Mac::Frame::FindSrcAddrIndex(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  unsigned __int8 v4 = ot::Mac::Frame::SkipDsnIndex(this);
  if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)FrameControlField)) {
    v4 += 2;
  }
  FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField);
  if (FcfDstAddr == 2)
  {
    v4 += 2;
  }

  else if (FcfDstAddr == 3)
  {
    v4 += 8;
  }

  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)FrameControlField)) {
    v4 += 2;
  }
  return v4;
}

uint64_t ot::Mac::Frame::GetSrcAddr(ot::Mac::Frame *this, ot::Mac::Address *a2)
{
  v8[4]  = 0;
  *(_DWORD *)__int16 v8 = ot::Mac::Frame::FindSrcAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (v8[0] == 255)
  {
    *(_DWORD *)&v8[1]  = 6;
  }

  else
  {
    FcfSrcAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfSrcAddr((ot::Mac::Frame *)FrameControlField);
    if (FcfSrcAddr)
    {
      if (FcfSrcAddr == 2)
      {
        Uint16  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v8[0]), v2);
        ot::Mac::Address::SetShort((uint64_t)a2, Uint16);
      }

      else if (FcfSrcAddr == 3)
      {
        ot::Mac::Address::SetExtended((char *)a2, (void *)(*(void *)this + v8[0]), 1);
      }

      else
      {
        *(_DWORD *)&v8[1]  = 6;
      }
    }

    else
    {
      ot::Mac::Address::SetNone((uint64_t)a2);
    }
  }

  return *(unsigned int *)&v8[1];
}

uint64_t ot::Mac::Frame::GetFcfSrcAddr(ot::Mac::Frame *this)
{
  return ((unsigned __int16)this & 0xC000) >> 14;
}

{
  return __ZN2ot3Mac5Frame13GetFcfSrcAddrEt(this);
}

uint64_t ot::Mac::Frame::SetSrcAddr(ot::Mac::Frame *this, unsigned __int16 a2)
{
  SrcAddrIndex  = ot::Mac::Frame::FindSrcAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (SrcAddrIndex == 255) {
    __assert_rtn("SetSrcAddr", "mac_frame.cpp", 576, "index != kInvalidIndex");
  }
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)this + SrcAddrIndex), v3);
}

char *ot::Mac::Frame::SetSrcAddr(ot::Mac::Frame *this, const ot::Mac::ExtAddress *a2)
{
  SrcAddrIndex  = ot::Mac::Frame::FindSrcAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (SrcAddrIndex == 255) {
    __assert_rtn("SetSrcAddr", "mac_frame.cpp", 586, "index != kInvalidIndex");
  }
  return ot::Mac::ExtAddress::CopyTo(a2, (char *)(*(void *)this + SrcAddrIndex), 1);
}

char *ot::Mac::Frame::SetSrcAddr(ot::Mac::Frame *this, const ot::Mac::Address *a2)
{
  int Type = ot::Mac::Address::GetType(a2);
  if (Type == 1)
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(a2);
    return (char *)ot::Mac::Frame::SetSrcAddr(this, Short);
  }

  else
  {
    if (Type != 2) {
      __assert_rtn("SetSrcAddr", "mac_frame.cpp", 604, "false");
    }
    ot::Mac::Address::GetExtended(a2);
    return ot::Mac::Frame::SetSrcAddr(this, v4);
  }

uint64_t ot::Mac::Frame::GetSecurityControlField(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v4[4]  = 0;
  *(_DWORD *)unsigned __int8 v4 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v4[0] == 255) {
    *(_DWORD *)&v4[1]  = 6;
  }
  else {
    *a2  = *(_BYTE *)(*(void *)this + v4[0]);
  }
  return *(unsigned int *)&v4[1];
}

uint64_t ot::Mac::Frame::FindSecurityHeaderIndex(ot::Mac::Frame *this)
{
  if (*((unsigned __int16 *)this + 4) > 2u)
  {
    if (ot::Mac::Frame::GetSecurityEnabled(this)) {
      return ot::Mac::Frame::SkipAddrFieldIndex(this);
    }
    else {
      return -1;
    }
  }

  else
  {
    return -1;
  }

uint64_t ot::Mac::Frame::SetSecurityControlField(ot::Mac::Frame *this, char a2)
{
  uint64_t result = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  *(_BYTE *)(*(void *)this + result)  = a2;
  return result;
}

uint64_t ot::Mac::Frame::SkipAddrFieldIndex(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::GetFcsSize(this) + 2 <= *((unsigned __int16 *)this + 4))
  {
    FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
    return ot::Mac::Frame::CalculateAddrFieldSize((ot::Mac::Frame *)FrameControlField);
  }

  else
  {
    return -1;
  }

uint64_t ot::Mac::Frame::GetSecurityLevel(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v4[4]  = 0;
  *(_DWORD *)unsigned __int8 v4 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v4[0] == 255) {
    *(_DWORD *)&v4[1]  = 6;
  }
  else {
    *a2  = *(_BYTE *)(*(void *)this + v4[0]) & 7;
  }
  return *(unsigned int *)&v4[1];
}

uint64_t ot::Mac::Frame::GetKeyIdMode(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v4[4]  = 0;
  *(_DWORD *)unsigned __int8 v4 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v4[0] == 255) {
    *(_DWORD *)&v4[1]  = 6;
  }
  else {
    *a2  = *(_BYTE *)(*(void *)this + v4[0]) & 0x18;
  }
  return *(unsigned int *)&v4[1];
}

uint64_t ot::Mac::Frame::GetFrameCounter(ot::Mac::Frame *this, unsigned int *a2)
{
  v5[4]  = 0;
  *(_DWORD *)char v5 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    *a2  = ot::Encoding::LittleEndian::ReadUint32( (ot::Encoding::LittleEndian *)(*(void *)this + (v5[0] + 1)),  v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Encoding::LittleEndian::ReadUint32(ot::Encoding::LittleEndian *this, const unsigned __int8 *a2)
{
  return (*((unsigned __int8 *)this + 1) << 8) | *(unsigned __int8 *)this | (*((unsigned __int8 *)this + 2) << 16) | (*((unsigned __int8 *)this + 3) << 24);
}

{
  return __ZN2ot8Encoding12LittleEndian10ReadUint32EPKh(this, a2);
}

uint64_t ot::Mac::Frame::SetFrameCounter(ot::Mac::Frame *this, unsigned int a2)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("SetFrameCounter", "mac_frame.cpp", 688, "index != kInvalidIndex");
  }
  ot::Encoding::LittleEndian::WriteUint32(a2, *(void *)this + (SecurityHeaderIndex + 1), v2);
  return ot::Mac::TxFrame::SetIsHeaderUpdated((uint64_t)this, 1);
}

uint64_t ot::Encoding::LittleEndian::WriteUint32(uint64_t this, uint64_t a2, unsigned __int8 *a3)
{
  *(_BYTE *)a2  = this;
  *(_WORD *)(a2 + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = this >> 8;
  *(_BYTE *)(a2 + 3)  = BYTE3(this);
  return this;
}

{
  return __ZN2ot8Encoding12LittleEndian11WriteUint32EjPh(this, a2, a3);
}

uint64_t ot::Mac::Frame::GetKeySource(ot::Mac::Frame *this)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("GetKeySource", "mac_frame.cpp", 702, "index != kInvalidIndex");
  }
  return *(void *)this + SecurityHeaderIndex + 5;
}

uint64_t ot::Mac::Frame::GetKeySourceLength(ot::Mac::Frame *this)
{
  if (this <= 0x18uLL) {
    __asm { BR              X8 }
  }

  return 0LL;
}

void *ot::Mac::Frame::SetKeySource(ot::Mac::Frame *this, const unsigned __int8 *a2)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("SetKeySource", "mac_frame.cpp", 738, "index != kInvalidIndex");
  }
  KeySource__int16 Length = ot::Mac::Frame::GetKeySourceLength((ot::Mac::Frame *)(*(_BYTE *)(*(void *)this
                                                                                   + SecurityHeaderIndex) & 0x18));
  return memcpy((void *)(*(void *)this + SecurityHeaderIndex + 5), a2, KeySourceLength);
}

uint64_t ot::Mac::Frame::GetKeyId(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  unsigned int v5 = 0;
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    return 6;
  }
  else {
    *a2  = *(_BYTE *)(*(void *)this
  }
                   + SecurityHeaderIndex
                   + 5
                   + ot::Mac::Frame::GetKeySourceLength((ot::Mac::Frame *)(*(_BYTE *)(*(void *)this + SecurityHeaderIndex) & 0x18)));
  return v5;
}

uint64_t ot::Mac::Frame::SetKeyId(ot::Mac::Frame *this, char a2)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("SetKeyId", "mac_frame.cpp", 766, "index != kInvalidIndex");
  }
  uint64_t result = ot::Mac::Frame::GetKeySourceLength((ot::Mac::Frame *)(*(_BYTE *)(*(void *)this + SecurityHeaderIndex) & 0x18));
  *(_BYTE *)(*(void *)this + SecurityHeaderIndex + 5 + result)  = a2;
  return result;
}

uint64_t ot::Mac::Frame::GetCommandId(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  _BYTE v6[4] = 0;
  *(_DWORD *)uint64_t v6 = ot::Mac::Frame::FindPayloadIndex(this);
  if (v6[0] == 255)
  {
    *(_DWORD *)&v6[1]  = 6;
  }

  else
  {
    uint64_t v4 = *(void *)this;
    if (ot::Mac::Frame::IsVersion2015(this)) {
      int v3 = v6[0];
    }
    else {
      int v3 = v6[0] - 1;
    }
    *a2  = *(_BYTE *)(v4 + v3);
  }

  return *(unsigned int *)&v6[1];
}

uint64_t ot::Mac::Frame::SetCommandId(ot::Mac::Frame *this, char a2)
{
  _BYTE v6[4] = 0;
  *(_DWORD *)uint64_t v6 = ot::Mac::Frame::FindPayloadIndex(this);
  if (v6[0] == 255)
  {
    *(_DWORD *)&v6[1]  = 6;
  }

  else
  {
    uint64_t v4 = *(void *)this;
    if (ot::Mac::Frame::IsVersion2015(this)) {
      int v3 = v6[0];
    }
    else {
      int v3 = v6[0] - 1;
    }
    *(_BYTE *)(v4 + v3)  = a2;
  }

  return *(unsigned int *)&v6[1];
}

BOOL ot::Mac::Frame::IsDataRequestCommand(ot::Mac::Frame *this)
{
  unsigned int v5 = this;
  BOOL v4 = 0;
  return v4;
}

uint64_t ot::Mac::Frame::GetHeaderLength(ot::Mac::Frame *this)
{
  return (ot::Mac::Frame::GetPayload(this) - *(_BYTE *)this);
}

uint64_t ot::Mac::Frame::GetPayload(ot::Mac::Frame *this)
{
  PayloadIndex  = ot::Mac::Frame::FindPayloadIndex(this);
  if (PayloadIndex == 255) {
    return 0LL;
  }
  else {
    return *(void *)this + PayloadIndex;
  }
}

uint64_t ot::Mac::Frame::GetMaxPayloadLength(ot::Mac::Frame *this)
{
  Mtu  = ot::Mac::Frame::GetMtu(this);
  Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
  return (unsigned __int16)(Mtu - (ot::Mac::Frame::GetFooterLength(this) + HeaderLength));
}

uint64_t ot::Mac::Frame::GetPayloadLength(ot::Mac::Frame *this)
{
  __int16 v3 = *((_WORD *)this + 4);
  Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
  return (unsigned __int16)(v3 - (ot::Mac::Frame::GetFooterLength(this) + HeaderLength));
}

uint64_t ot::Mac::Frame::SetPayloadLength(ot::Mac::Frame *this, __int16 a2)
{
  Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
  Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
  uint64_t result = HeaderLength;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = FooterLength + HeaderLength + a2;
  return result;
}

uint64_t ot::Mac::Frame::SkipSecurityHeaderIndex(ot::Mac::Frame *this)
{
  unsigned __int8 v4 = ot::Mac::Frame::SkipAddrFieldIndex(this);
  if (v4 != 255 && ot::Mac::Frame::GetSecurityEnabled(this))
  {
    if (v4 < (int)*((unsigned __int16 *)this + 4))
    {
      unsigned __int8 v3 = ot::Mac::Frame::CalculateSecurityHeaderSize((ot::Mac::Frame *)*(unsigned __int8 *)(*(void *)this + v4));
      if (v3 == 255)
      {
        return -1;
      }

      else
      {
        v4 += v3;
      }
    }

    else
    {
      return -1;
    }
  }

  return v4;
}

uint64_t ot::Mac::Frame::CalculateAddrFieldSize(ot::Mac::Frame *this)
{
  unsigned __int16 v6 = (unsigned __int16)this;
  FcfSize  = ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)(unsigned __int16)this);
  unsigned __int8 v5 = ot::Mac::Frame::IsDsnPresent((ot::Mac::Frame *)v6) + FcfSize;
  if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)v6)) {
    v5 += 2;
  }
  FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)v6);
  if (FcfDstAddr)
  {
    if (FcfDstAddr == 2)
    {
      v5 += 2;
    }

    else
    {
      if (FcfDstAddr != 3) {
        return -1;
      }
      v5 += 8;
    }
  }

  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)v6)) {
    v5 += 2;
  }
  FcfSrcAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfSrcAddr((ot::Mac::Frame *)v6);
  if (FcfSrcAddr)
  {
    if (FcfSrcAddr == 2)
    {
      v5 += 2;
    }

    else if (FcfSrcAddr == 3)
    {
      v5 += 8;
    }

    else
    {
      return -1;
    }
  }

  return v5;
}

BOOL ot::Mac::Frame::IsIePresent(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsIePresent((ot::Mac::Frame *)FrameControlField);
}

{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 512) != 0;
}

{
  return __ZN2ot3Mac5Frame11IsIePresentEt(this);
}

{
  return __ZNK2ot3Mac5Frame11IsIePresentEv(this);
}

uint64_t ot::Mac::HeaderIe::GetId(ot::Mac::HeaderIe *this)
{
  return (int)(ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)this) & 0x7F80) >> 7;
}

{
  return __ZNK2ot3Mac8HeaderIe5GetIdEv(this);
}

uint64_t ot::Mac::Frame::GetFooter(ot::Mac::Frame *this)
{
  uint64_t v2 = *(void *)this;
  int v3 = *((unsigned __int16 *)this + 4);
  return v2 + v3 - ot::Mac::Frame::GetFooterLength(this);
}

uint64_t ot::Mac::Frame::FindHeaderIeIndex(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::IsIePresent(this)) {
    return ot::Mac::Frame::SkipSecurityHeaderIndex(this);
  }
  else {
    return -1;
  }
}

uint64_t ot::Mac::Frame::GetHeaderIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
  HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
  PayloadIndex  = ot::Mac::Frame::FindPayloadIndex(this);
  uint64_t v5 = 0LL;
  if (HeaderIeIndex != 255 && PayloadIndex != 255)
  {
    while (HeaderIeIndex <= (int)PayloadIndex)
    {
      unsigned __int8 v4 = (ot::Mac::HeaderIe *)(*(void *)this + HeaderIeIndex);
      HeaderIeIndex += ot::Mac::HeaderIe::GetLength(v4) + 2;
    }
  }

  return v5;
}

uint64_t ot::Mac::Frame::GetThreadIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
  HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
  PayloadIndex  = ot::Mac::Frame::FindPayloadIndex(this);
  uint64_t v6 = 0LL;
  if (HeaderIeIndex != 255 && PayloadIndex != 255)
  {
    while (HeaderIeIndex <= (int)PayloadIndex)
    {
      uint64_t v5 = (ot::Mac::HeaderIe *)(*(void *)this + HeaderIeIndex);
      if (!(unsigned __int16)ot::Mac::HeaderIe::GetId(v5)
        && ot::Mac::VendorIeHeader::GetVendorOui((ot::Mac::HeaderIe *)((char *)v5 + 2), v2) == 15382683
        && a2 == ot::Mac::VendorIeHeader::GetSubType((ot::Mac::HeaderIe *)((char *)v5 + 2)))
      {
        return *(void *)this + HeaderIeIndex;
      }

      HeaderIeIndex += ot::Mac::HeaderIe::GetLength(v5) + 2;
    }
  }

  return v6;
}

uint64_t ot::Mac::VendorIeHeader::GetVendorOui(ot::Mac::VendorIeHeader *this, const unsigned __int8 *a2)
{
  return ot::Encoding::LittleEndian::ReadUint24(this, a2);
}

{
  return __ZNK2ot3Mac14VendorIeHeader12GetVendorOuiEv(this, a2);
}

uint64_t ot::Mac::VendorIeHeader::GetSubType(ot::Mac::VendorIeHeader *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot3Mac14VendorIeHeader10GetSubTypeEv(this);
}

void ot::Mac::Frame::SetCslIe(ot::Mac::Frame *this, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v4 = v3;
  if (v3)
  {
    ot::Mac::CslIe::SetPeriod((ot::Mac::CslIe *)(v3 + 2), a2);
    ot::Mac::CslIe::SetPhase((ot::Mac::CslIe *)(v4 + 2), a3);
  }

uint64_t ot::Mac::CslIe::SetPeriod(ot::Mac::CslIe *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot3Mac5CslIe9SetPeriodEt(this, a2);
}

uint64_t ot::Mac::CslIe::SetPhase(ot::Mac::CslIe *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot3Mac5CslIe8SetPhaseEt(this, a2);
}

void *ot::Mac::Frame::SetEnhAckProbingIe( ot::Mac::Frame *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  if (!v3) {
    __assert_rtn("SetEnhAckProbingIe", "mac_frame.cpp", 1223, "cur != nullptr");
  }
  return memcpy((void *)(v3 + 6), a2, a3);
}

void ot::Mac::Frame::GetThreadIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
}

{
  __ZN2ot3Mac5Frame11GetThreadIeEh(this, a2);
}

uint64_t ot::Mac::TxFrame::CopyFrom(ot::Mac::TxFrame *this, const void **a2)
{
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 3);
  char v8 = *((_BYTE *)this + 11);
  memcpy(this, a2, 0x30uLL);
  *(void *)this  = v10;
  *((void *)this + 3)  = v9;
  *((_BYTE *)this + 1ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = v8;
  memcpy(*(void **)this, *a2, *((unsigned __int16 *)a2 + 4));
  int v7 = *((unsigned __int8 *)this + 11);
  uint64_t result = ot::Mac::Frame::GetRadioType((ot::Mac::Frame *)a2);
  if (v7 != result)
  {
    Psdu__int16 Length = ot::Mac::Frame::GetPsduLength((ot::Mac::Frame *)a2);
    __int16 v5 = PsduLength - ot::Mac::Frame::GetFcsSize((ot::Mac::Frame *)a2);
    FcsSize  = ot::Mac::Frame::GetFcsSize(this);
    return ot::Mac::Frame::SetLength((uint64_t)this, v5 + FcsSize);
  }

  return result;
}

void ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::TxFrame *this, const ot::Mac::ExtAddress *a2)
{
  char v18 = this;
  *(void *)&v17[5]  = a2;
  *(_DWORD *)&v17[1]  = 0;
  ot::Crypto::AesCcm::AesCcm((ot::Crypto::AesCcm *)v19);
  if (ot::Mac::Frame::GetSecurityEnabled(this)
    && !ot::Mac::Frame::GetSecurityLevel(this, v17)
    && !ot::Mac::Frame::GetFrameCounter(this, (unsigned int *)&v17[1]))
  {
    ot::Crypto::AesCcm::GenerateNonce( *(ot::Crypto::AesCcm **)&v17[5],  (const ot::Mac::ExtAddress *)*(unsigned int *)&v17[1],  (unsigned __int8 *)v17[0],  (uint64_t)v20,  v2);
    AesKey  = (const ot::Mac::KeyMaterial *)ot::Mac::TxFrame::GetAesKey(this);
    ot::Crypto::AesCcm::SetKey((ot::Crypto::AesCcm *)v19, AesKey);
    Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
    unsigned __int8 v16 = FooterLength - ot::Mac::Frame::GetFcsSize(this);
    Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
    Payload__int16 Length = ot::Mac::Frame::GetPayloadLength(this);
    ot::Crypto::AesCcm::Init((ot::Crypto::AesCcm *)v19, HeaderLength, PayloadLength, v16, v20, 0xDu);
    Header  = (_BYTE *)ot::Mac::Frame::GetHeader(this);
    unsigned __int8 v5 = ot::Mac::Frame::GetHeaderLength(this);
    ot::Crypto::AesCcm::Header((ot::Crypto::AesEcb *)v19, Header, v5);
    ot::Mac::Frame::GetPayload(this);
    uint64_t v13 = v6;
    ot::Mac::Frame::GetPayload(this);
    uint64_t v14 = v7;
    unsigned __int16 v8 = ot::Mac::Frame::GetPayloadLength(this);
    ot::Crypto::AesCcm::Payload((uint64_t)v19, v13, v14, v8, 0);
    ot::Mac::Frame::GetFooter(this);
    ot::Crypto::AesCcm::Finalize((ot::Crypto::AesCcm *)v19, v9);
    ot::Mac::TxFrame::SetIsSecurityProcessed((uint64_t)this, 1);
  }

  ot::Crypto::AesCcm::~AesCcm((ot::Crypto::AesCcm *)v19);
}

ot::Crypto::AesCcm *ot::Crypto::AesCcm::AesCcm(ot::Crypto::AesCcm *this)
{
  return this;
}

{
  ot::Crypto::AesEcb::AesEcb(this);
  return this;
}

uint64_t ot::Mac::TxFrame::GetAesKey(ot::Mac::TxFrame *this)
{
  return *((void *)this + 2);
}

{
  return __ZNK2ot3Mac7TxFrame9GetAesKeyEv(this);
}

void ot::Mac::Frame::GetFooter(ot::Mac::Frame *this)
{
}

{
  __ZN2ot3Mac5Frame9GetFooterEv(this);
}

void ot::Crypto::AesCcm::~AesCcm(ot::Crypto::AesCcm *this)
{
}

{
  ot::Crypto::AesEcb::~AesEcb(this);
}

uint64_t ot::Mac::TxFrame::GenerateImmAck(ot::Mac::TxFrame *this, const ot::Mac::RxFrame *a2, char a3)
{
  char v7 = a3 & 1;
  unsigned __int16 v6 = ot::Mac::Frame::GetVersion(a2) | 2;
  *((_BYTE *)this + 10)  = *((_BYTE *)a2 + 10);
  *((_OWORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0u;
  *((_OWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0u;
  if ((v7 & 1) != 0) {
    v6 |= 0x10u;
  }
  ot::Encoding::LittleEndian::WriteUint16(v6, *(_WORD **)this, v3);
  uint64_t result = ot::Mac::Frame::GetSequence(a2);
  *(_BYTE *)(*(void *)this + 2LL)  = result;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 5;
  return result;
}

uint64_t ot::Mac::TxFrame::GenerateEnhAck( ot::Mac::TxFrame *this, const ot::Mac::RxFrame *a2, char a3, const unsigned __int8 *a4, unsigned __int8 a5)
{
  __int16 v22 = this;
  uint64_t v21 = a2;
  char v20 = a3 & 1;
  char v19 = a4;
  unsigned __int8 v18 = a5;
  SrcPanId  = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v15);
  unsigned __int16 v16 = 8194;
  *((_BYTE *)this + 10)  = *((_BYTE *)v21 + 10);
  *((_OWORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0u;
  *((_OWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0u;
  if ((v20 & 1) != 0) {
    v16 |= 0x10u;
  }
  if (ot::Mac::Frame::GetSecurityEnabled(v21)) {
    v16 |= 8u;
  }
  if (ot::Mac::Frame::IsPanIdCompressed(v21)) {
    v16 |= 0x40u;
  }
  if ((ot::Mac::Frame::GetFrameControlField(v21) & 0xC000) == 0xC000)
  {
    v16 |= 0xC00u;
  }

  else if ((ot::Mac::Frame::GetFrameControlField(v21) & 0xC000) == 0x8000)
  {
    v16 |= 0x800u;
  }

  if (v18) {
    v16 |= 0x200u;
  }
  ot::Encoding::LittleEndian::WriteUint16(v16, *(_WORD **)this, v5);
  *(_BYTE *)(*(void *)this + 2LL)  = ot::Mac::Frame::GetSequence(v21);
  if (ot::Mac::Frame::IsDstPanIdPresent(this))
  {
    if (ot::Mac::Frame::IsSrcPanIdPresent(v21))
    {
      SrcPanId  = ot::Mac::Frame::GetSrcPanId(v21, &v14);
      if (SrcPanId) {
        return SrcPanId;
      }
    }

    else
    {
      if (!ot::Mac::Frame::IsDstPanIdPresent(v21)) {
        return 6;
      }
      SrcPanId  = ot::Mac::Frame::GetDstPanId(v21, &v14);
      if (SrcPanId) {
        return SrcPanId;
      }
    }

    ot::Mac::Frame::SetDstPanId(this, v14);
  }

  if (ot::Mac::Frame::IsSrcAddrPresent(v21))
  {
    SrcPanId  = ot::Mac::Frame::GetSrcAddr(v21, (ot::Mac::Address *)v15);
    if (SrcPanId) {
      return SrcPanId;
    }
    ot::Mac::Frame::SetDstAddr(this, (const ot::Mac::Address *)v15);
  }

  *((_WORD *)this + ++*(_WORD *)(this + 4) = 254;
  if (ot::Mac::Frame::GetSecurityEnabled(v21))
  {
    SrcPanId  = ot::Mac::Frame::GetSecurityControlField(v21, &v12);
    if (SrcPanId) {
      return SrcPanId;
    }
    SrcPanId  = ot::Mac::Frame::GetKeyId(v21, &v11);
    if (SrcPanId) {
      return SrcPanId;
    }
    if ((v12 & 7) != 5) {
      return 6;
    }
    ot::Mac::Frame::SetSecurityControlField(this, v12);
    ot::Mac::Frame::SetKeyId(this, v11);
  }

  if (v18)
  {
    if (!v19) {
      __assert_rtn("GenerateEnhAck", "mac_frame.cpp", 1507, "aIeData != nullptr");
    }
    uint64_t v9 = *(void *)this;
    HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
    memcpy((void *)(v9 + HeaderIeIndex), v19, v18);
  }

  Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
  if (FooterLength == 255) {
    __assert_rtn("GenerateEnhAck", "mac_frame.cpp", 1513, "footerLength != kInvalidIndex");
  }
  unsigned __int8 v7 = ot::Mac::Frame::SkipSecurityHeaderIndex(this);
  *((_WORD *)this + ++*(_WORD *)(this + 4) = v18 + v7 + FooterLength;
  return SrcPanId;
}

BOOL ot::Mac::Frame::IsPanIdCompressed(ot::Mac::Frame *this)
{
  return (ot::Mac::Frame::GetFrameControlField(this) & 0x40) != 0;
}

{
  return __ZNK2ot3Mac5Frame17IsPanIdCompressedEv(this);
}

uint64_t ot::Mac::RxFrame::ProcessReceiveAesCcm( ot::Mac::RxFrame *this, const ot::Mac::ExtAddress *a2, const ot::Mac::KeyMaterial *a3)
{
  unint64_t v43 = this;
  uint64_t v42 = a2;
  unsigned __int8 v41 = a3;
  *(void *)&__n[1]  = 0x800000000LL;
  ot::Crypto::AesCcm::AesCcm((ot::Crypto::AesCcm *)v45);
  if (ot::Mac::Frame::GetSecurityEnabled(this))
  {
    if (ot::Mac::Frame::GetSecurityLevel(this, (unsigned __int8 *)__n + 1))
    {
      otLogDebgPlat( "RxFrame::ProcessReceiveAesCcm Security error could not get securityLevel",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v31);
    }

    else if (ot::Mac::Frame::GetFrameCounter(this, (unsigned int *)&__n[1]))
    {
      otLogDebgPlat( "RxFrame:ProcessReceiveAesCsm Security error could not get frameCounter",  v10,  v11,  v12,  (uint64_t)v13,  v14,  v15,  v16,  v31);
    }

    else
    {
      ot::Crypto::AesCcm::GenerateNonce( v42,  (const ot::Mac::ExtAddress *)*(unsigned int *)&__n[1],  (unsigned __int8 *)HIBYTE(__n[0]),  (uint64_t)v47,  v13);
      ot::Crypto::AesCcm::SetKey((ot::Crypto::AesCcm *)v45, v41);
      Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
      LOBYTE(__n[0])  = FooterLength - ot::Mac::Frame::GetFcsSize(this);
      Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
      Payload__int16 Length = ot::Mac::Frame::GetPayloadLength(this);
      ot::Crypto::AesCcm::Init((ot::Crypto::AesCcm *)v45, HeaderLength, PayloadLength, __n[0], v47, 0xDu);
      Header  = (_BYTE *)ot::Mac::Frame::GetHeader(this);
      unsigned __int8 v18 = ot::Mac::Frame::GetHeaderLength(this);
      ot::Crypto::AesCcm::Header((ot::Crypto::AesEcb *)v45, Header, v18);
      ot::Mac::Frame::GetPayload(this);
      v37  = v19;
      ot::Mac::Frame::GetPayload(this);
      uint64_t v38 = v20;
      unsigned __int16 v21 = ot::Mac::Frame::GetPayloadLength(this);
      ot::Crypto::AesCcm::Payload((uint64_t)v45, v37, v38, v21, 1);
      ot::Crypto::AesCcm::Finalize((ot::Crypto::AesCcm *)v45, v46);
      ot::Mac::Frame::GetFooter(this);
      if (!memcmp(v46, v22, LOBYTE(__n[0])))
      {
        *(_DWORD *)&__n[3]  = 0;
      }

      else
      {
        char v33 = ot::ErrorToString(*(int *)&__n[3]);
        ot::Mac::ExtAddress::ToString(v42, (ot::StringWriter *)v44);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v44);
        ot::Mac::Frame::GetPayloadLength(this);
        ot::Mac::Frame::GetFooterLength(this);
        otLogDebgPlat( "RxFrame::ProcessReceiveAesCcm Security error tag and GetFooter() mismatch: error:%s extAddr:%s frameCounter:%u tagLen:%d payloadLen:%d footerLen:%d secLevel:%d ",  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v33);
      }
    }
  }

  else
  {
    *(_DWORD *)&__n[3]  = 0;
  }

  v32  = *(_DWORD *)&__n[3];
  ot::Crypto::AesCcm::~AesCcm((ot::Crypto::AesCcm *)v45);
  return v32;
}

ot::StringWriter *ot::Mac::Frame::ToInfoString@<X0>(ot::Mac::Frame *this@<X0>, ot::StringWriter *a2@<X8>)
{
  unsigned __int16 v21 = this;
  ot::String<(unsigned short)150>::String((uint64_t)a2);
  ot::Mac::Address::Address((ot::Mac::Address *)v19);
  ot::Mac::Address::Address((ot::Mac::Address *)v18);
  unsigned int v17 = 0;
  int v14 = *((unsigned __int16 *)this + 4);
  Sequence  = ot::Mac::Frame::GetSequence(this);
  ot::StringWriter::Append(a2, "len:%d, seqnum:%d, type:", v14, Sequence);
  unsigned __int8 Type = ot::Mac::Frame::GetType(this);
  if (Type <= 3uLL) {
    __asm { BR              X8 }
  }

  ot::StringWriter::Append(a2, "%d", Type);
  ot::Mac::Frame::GetSrcAddr(this, (ot::Mac::Address *)v19);
  IgnoreError();
  ot::Mac::Frame::GetDstAddr(this, (ot::Mac::Address *)v18);
  IgnoreError();
  ot::Mac::Address::ToString((ot::Mac::Address *)v19, (ot::StringWriter *)v23);
  uint64_t v10 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v23);
  ot::Mac::Address::ToString((ot::Mac::Address *)v18, (ot::StringWriter *)v22);
  uint64_t v11 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v22);
  SecurityEnabled  = ot::Mac::Frame::GetSecurityEnabled(this);
  uint64_t v12 = ot::ToYesNo((ot *)SecurityEnabled);
  AckRequest  = ot::Mac::Frame::GetAckRequest(this);
  uint64_t v13 = ot::ToYesNo((ot *)AckRequest);
  FramePending  = ot::Mac::Frame::GetFramePending(this);
  uint64_t v6 = "yes";
  if (!FramePending) {
    uint64_t v6 = "no";
  }
  ot::StringWriter::Append(a2, ", src:%s, dst:%s, sec:%s, ackreq:%s, fp:%s", v10, v11, v12, v13, v6);
  if (ot::Mac::Frame::GetSecurityEnabled(this))
  {
    ot::Mac::Frame::GetFrameCounter(this, &v17);
    ot::StringWriter::Append(a2, ", fc:%u", v17);
  }

  Radiounsigned __int8 Type = ot::Mac::Frame::GetRadioType(this);
  uint64_t v8 = ot::Mac::RadioTypeToString(RadioType);
  return ot::StringWriter::Append(a2, ", radio:%s", v8);
}

uint64_t ot::String<(unsigned short)150>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 150);
  return a1;
}

char *ot::Mac::ExtAddress::Set(char *a1, void *a2, char a3)
{
  return ot::Mac::ExtAddress::CopyAddress(a1, a2, a3);
}

{
  return __ZN2ot3Mac10ExtAddress3SetEPKhNS1_13CopyByteOrderE(a1, a2, a3);
}

uint64_t ot::Encoding::LittleEndian::ReadUint24(ot::Encoding::LittleEndian *this, const unsigned __int8 *a2)
{
  return (*((unsigned __int8 *)this + 1) << 8) | *(unsigned __int8 *)this | (*((unsigned __int8 *)this + 2) << 16);
}

{
  return __ZN2ot8Encoding12LittleEndian10ReadUint24EPKh(this, a2);
}

ot::Mac::TxFrames *ot::Mac::TxFrames::TxFrames(ot::Mac::TxFrames *this, ot::Instance *a2)
{
  uint64_t v2 = (ot::Mac::SubMac *)ot::Instance::Get<ot::Mac::SubMac>((uint64_t)a2);
  *(void *)this  = ot::Mac::SubMac::GetTransmitFrame(v2);
  uint64_t v3 = (ot::Trel::Link *)ot::Instance::Get<ot::Trel::Link>((uint64_t)a2);
  *((void *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = ot::Trel::Link::GetTransmitFrame(v3);
  ot::Power::Domain::Domain((ot::Mac::TxFrames *)((char *)this + 16));
  ot::Power::Domain::Domain((ot::Mac::TxFrames *)((char *)this + 17));
  return this;
}

{
  ot::Mac::TxFrames::TxFrames(this, a2);
  return this;
}

uint64_t ot::Mac::SubMac::GetTransmitFrame(ot::Mac::SubMac *this)
{
  return *((void *)this + 5);
}

{
  return __ZN2ot3Mac6SubMac16GetTransmitFrameEv(this);
}

uint64_t ot::Trel::Link::GetTransmitFrame(ot::Trel::Link *this)
{
  return (uint64_t)this + 4672;
}

{
  return __ZN2ot4Trel4Link16GetTransmitFrameEv(this);
}

uint64_t ot::Mac::TxFrames::GetTxFrame(uint64_t a1, unsigned __int8 a2)
{
  *(_DWORD *)&v3[8]  = 0;
  *(void *)uint64_t v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      *(void *)&v3[4]  = *(void *)(a1 + 8);
    }
  }

  else
  {
    *(void *)&v3[4]  = *(void *)a1;
  }

  ot::Mac::RadioTypes::Add((_BYTE *)(a1 + 16), a2);
  return *(void *)&v3[4];
}

ot::Mac::Frame *ot::Mac::TxFrames::GetTxFrame(uint64_t a1, char a2)
{
  char v6 = a2;
  uint64_t v5 = 0LL;
  if (ot::Mac::RadioTypes::Contains(&v6, 0)) {
    uint64_t v5 = *(ot::Mac::Frame **)a1;
  }
  if (ot::Mac::RadioTypes::Contains(&v6, 1))
  {
    if (!v5
      || (Mtu  = (unsigned __int16)ot::Mac::Frame::GetMtu(v5),
          Mtu > (unsigned __int16)ot::Mac::Frame::GetMtu(*(ot::Mac::Frame **)(a1 + 8))))
    {
      uint64_t v5 = *(ot::Mac::Frame **)(a1 + 8);
    }
  }

  ot::Mac::RadioTypes::Add((_BYTE *)(a1 + 16), v6);
  return v5;
}

_BYTE *ot::Mac::RadioTypes::Add(_BYTE *result, char a2)
{
  *result |= a2;
  return result;
}

{
  return __ZN2ot3Mac10RadioTypes3AddES1_(result, a2);
}

ot::Mac::Frame *ot::Mac::TxFrames::GetBroadcastTxFrame(ot::Mac::TxFrames *this)
{
  uint64_t v4 = this;
  ot::Power::Domain::Domain((ot::Power::Domain *)&v3);
  ot::Mac::RadioTypes::AddAll((ot::Mac::RadioTypes *)&v3);
  return ot::Mac::TxFrames::GetTxFrame((uint64_t)this, v3);
}

ot::Mac::Links *ot::Mac::Links::Links(ot::Mac::Links *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Mac::Links::Links(this, a2);
  return this;
}

uint64_t ot::Mac::Links::Send(ot::Mac::TxFrame **a1, const void **a2, char a3)
{
  char v6 = a3;
  if (ot::Mac::RadioTypes::Contains(&v6, 0) && ot::Mac::Frame::IsEmpty(a1[778])) {
    ot::Mac::TxFrame::CopyFrom(a1[778], a2);
  }
  if (ot::Mac::RadioTypes::Contains(&v6, 1) && ot::Mac::Frame::IsEmpty(a1[779])) {
    ot::Mac::TxFrame::CopyFrom(a1[779], a2);
  }
  uint64_t result = ot::Mac::RadioTypes::Contains(&v6, 1);
  if ((result & 1) != 0) {
    return ot::Trel::Link::Send((ot::Trel::Link *)(a1 + 30));
  }
  return result;
}

uint64_t ot::Mac::Links::GetCurrentMacKey(ot::Mac::Links *this, const ot::Mac::Frame *a2)
{
  v6[8]  = 0;
  *(void *)char v6 = ot::Mac::Frame::GetRadioType(a2);
  if (v6[0])
  {
    if (v6[0] == 1)
    {
      char v3 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      *(void *)&v6[1]  = ot::KeyManager::GetCurrentTrelMacKey(v3);
    }
  }

  else
  {
    uint64_t v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
    *(void *)&v6[1]  = ot::Mac::SubMac::GetCurrentMacKey(v2);
  }

  return *(void *)&v6[1];
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::SubMac>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Mac6SubMacEEERT_v(a1);
}

uint64_t ot::KeyManager::GetCurrentTrelMacKey(ot::KeyManager *this)
{
  return (uint64_t)this + 52;
}

{
  return __ZNK2ot10KeyManager20GetCurrentTrelMacKeyEv(this);
}

uint64_t ot::Mac::Links::GetTemporaryMacKey(ot::Mac::Links *this, const ot::Mac::Frame *a2, unsigned int a3)
{
  v10[8]  = 0;
  *(void *)uint64_t v10 = ot::Mac::Frame::GetRadioType(a2);
  if (v10[0])
  {
    if (v10[0] == 1)
    {
      uint64_t v7 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      *(void *)&v10[1]  = ot::KeyManager::GetTemporaryTrelMacKey(v7, a3);
    }
  }

  else
  {
    char v3 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    if (a3 == ot::KeyManager::GetCurrentKeySequence(v3) - 1)
    {
      uint64_t v4 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
      *(void *)&v10[1]  = ot::Mac::SubMac::GetPreviousMacKey(v4);
    }

    else
    {
      uint64_t v5 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      char v6 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
      *(void *)&v10[1]  = ot::Mac::SubMac::GetNextMacKey(v6);
    }
  }

  return *(void *)&v10[1];
}

void ot::Mac::Links::SetMacFrameCounter(ot::Mac::Links *this, ot::Mac::TxFrame *a2)
{
  Radiounsigned __int8 Type = ot::Mac::Frame::GetRadioType(a2);
  if (RadioType == 1)
  {
    uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    TrelMacFrameCounter  = ot::KeyManager::GetTrelMacFrameCounter(v2);
    ot::Mac::Frame::SetFrameCounter(a2, TrelMacFrameCounter);
    uint64_t v4 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::KeyManager::IncrementTrelMacFrameCounter(v4);
  }

  else if (!RadioType)
  {
    uint64_t v5 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int v6 = ot::KeyManager::Get154MacFrameCounter(v5);
    ot::Mac::Frame::SetFrameCounter(a2, v6 + 5);
  }

uint64_t ot::KeyManager::GetTrelMacFrameCounter(ot::KeyManager *this)
{
  return ot::Mac::LinkFrameCounters::GetTrel((ot::KeyManager *)((char *)this + 84));
}

{
  return __ZNK2ot10KeyManager22GetTrelMacFrameCounterEv(this);
}

uint64_t ot::KeyManager::Get154MacFrameCounter(ot::KeyManager *this)
{
  return ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 84));
}

{
  return __ZNK2ot10KeyManager21Get154MacFrameCounterEv(this);
}

uint64_t ot::Mac::LinkFrameCounters::GetTrel(ot::Mac::LinkFrameCounters *this)
{
  return *((unsigned int *)this + 1);
}

{
  return __ZNK2ot3Mac17LinkFrameCounters7GetTrelEv(this);
}

uint64_t ot::Mac::LinkFrameCounters::Get154(ot::Mac::LinkFrameCounters *this)
{
  return *(unsigned int *)this;
}

{
  return __ZNK2ot3Mac17LinkFrameCounters6Get154Ev(this);
}

uint64_t ot::FrameBuilder::Init(uint64_t this, void *a2, __int16 a3)
{
  *(void *)this  = a2;
  *(_WORD *)(this + 8)  = 0;
  *(_WORD *)(this + 10)  = a3;
  return this;
}

uint64_t ot::FrameBuilder::AppendUint8(ot::FrameBuilder *this, char a2)
{
  uint64_t v4 = this;
  char v3 = a2;
  return ot::FrameBuilder::Append<unsigned char>(this, &v3);
}

uint64_t ot::FrameBuilder::Append<unsigned char>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 1u);
}

{
  return __ZN2ot12FrameBuilder6AppendIhEE7otErrorRKT_(a1, a2);
}

uint64_t ot::FrameBuilder::AppendBigEndianUint16(ot::FrameBuilder *this, unsigned __int16 a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  return ot::FrameBuilder::Append<unsigned short>(this, v4);
}

uint64_t ot::FrameBuilder::Append<unsigned short>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot12FrameBuilder6AppendItEE7otErrorRKT_(a1, a2);
}

uint64_t ot::FrameBuilder::AppendBigEndianUint32(ot::FrameBuilder *this, unsigned int a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  return ot::FrameBuilder::Append<unsigned int>(this, v4);
}

uint64_t ot::FrameBuilder::Append<unsigned int>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot12FrameBuilder6AppendIjEE7otErrorRKT_(a1, a2);
}

uint64_t ot::FrameBuilder::AppendLittleEndianUint16(ot::FrameBuilder *this, unsigned __int16 a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::LittleEndian::HostSwap16(a2);
  return ot::FrameBuilder::Append<unsigned short>(this, v4);
}

uint64_t ot::FrameBuilder::AppendLittleEndianUint32(ot::FrameBuilder *this, unsigned int a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::LittleEndian::HostSwap32(a2);
  return ot::FrameBuilder::Append<unsigned int>(this, v4);
}

uint64_t ot::FrameBuilder::AppendBytes(ot::FrameBuilder *this, const void *a2, unsigned __int16 a3)
{
  unsigned int v5 = 0;
  if (ot::FrameBuilder::CanAppend(this, a3))
  {
    memcpy((void *)(*(void *)this + *((unsigned __int16 *)this + 4)), a2, a3);
    *((_WORD *)this + 4) += a3;
  }

  else
  {
    return 3;
  }

  return v5;
}

BOOL ot::FrameBuilder::CanAppend(ot::FrameBuilder *this, unsigned __int16 a2)
{
  return *((unsigned __int16 *)this + 4) + a2 <= *((unsigned __int16 *)this + 5);
}

{
  return __ZNK2ot12FrameBuilder9CanAppendEt(this, a2);
}

uint64_t ot::FrameBuilder::AppendMacAddress(ot::FrameBuilder *this, const ot::Mac::Address *a2)
{
  unsigned int v7 = 0;
  int Type = ot::Mac::Address::GetType(a2);
  if (Type)
  {
    if (Type == 1)
    {
      unsigned __int16 Short = ot::Mac::Address::GetShort(a2);
      return ot::FrameBuilder::AppendLittleEndianUint16(this, Short);
    }

    else if (Type == 2)
    {
      if (ot::FrameBuilder::CanAppend(this, 8u))
      {
        ot::Mac::Address::GetExtended(a2);
        ot::Mac::ExtAddress::CopyTo(v3, (char *)(*(void *)this + *((unsigned __int16 *)this + 4)), 1);
        *((_WORD *)this + 4) += 8;
      }

      else
      {
        return 3;
      }
    }
  }

  return v7;
}

uint64_t ot::FrameBuilder::AppendBytesFromMessage( ot::FrameBuilder *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (ot::FrameBuilder::CanAppend(this, a4))
  {
    unsigned int v6 = ot::Message::Read(a2, a3, (char *)(*(void *)this + *((unsigned __int16 *)this + 4)), a4);
    if (!v6) {
      *((_WORD *)this + 4) += a4;
    }
  }

  else
  {
    return 3;
  }

  return v6;
}

void *ot::FrameBuilder::WriteBytes( ot::FrameBuilder *this, unsigned __int16 a2, const void *a3, unsigned __int16 a4)
{
  return memcpy((void *)(*(void *)this + a2), a3, a4);
}

uint64_t ot::FrameBuilder::InsertBytes( ot::FrameBuilder *this, unsigned __int16 a2, const void *a3, unsigned __int16 a4)
{
  unsigned int v6 = 0;
  if (ot::FrameBuilder::CanAppend(this, a4))
  {
    memmove( (void *)(*(void *)this + a2 + a4),  (const void *)(*(void *)this + a2),  *((unsigned __int16 *)this + 4) - a2);
    memcpy((void *)(*(void *)this + a2), a3, a4);
    *((_WORD *)this + 4) += a4;
  }

  else
  {
    return 3;
  }

  return v6;
}

void *ot::FrameBuilder::RemoveBytes(ot::FrameBuilder *this, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t result = memmove( (void *)(*(void *)this + a2),  (const void *)(*(void *)this + a2 + a3),  *((unsigned __int16 *)this + 4) - a2 - a3);
  *((_WORD *)this + 4) -= a3;
  return result;
}

uint64_t ot::MeshCoP::NameData::CopyTo(ot::MeshCoP::NameData *this, char *a2, char a3)
{
  unsigned int v7 = this;
  unsigned int v6 = a2;
  v5[23]  = a3;
  ot::MutableData<(ot::DataLengthType)0>::Init((uint64_t)v5, (uint64_t)a2, a3);
  ot::MutableData<(ot::DataLengthType)0>::ClearBytes((uint64_t)v5);
  ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom((uint64_t)v5, (uint64_t)this);
  IgnoreError();
  return ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v5);
}

uint64_t ot::MutableData<(ot::DataLengthType)0>::Init(uint64_t a1, uint64_t a2, char a3)
{
  return ot::Data<(ot::DataLengthType)0>::Init(a1, a2, a3);
}

{
  return __ZN2ot11MutableDataILNS_14DataLengthTypeE0EE4InitEPvh(a1, a2, a3);
}

void ot::MutableData<(ot::DataLengthType)0>::ClearBytes(uint64_t a1)
{
}

{
  __ZN2ot11MutableDataILNS_14DataLengthTypeE0EE10ClearBytesEv(a1);
}

uint64_t ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(uint64_t a1, uint64_t a2)
{
  uint64_t Bytes = (const void *)ot::Data<(ot::DataLengthType)0>::GetBytes(a2);
  unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength(a2);
  return ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(a1, Bytes, Length);
}

{
  return __ZN2ot11MutableDataILNS_14DataLengthTypeE0EE13CopyBytesFromERKNS_4DataILS1_0EEE(a1, a2);
}

uint64_t ot::Data<(ot::DataLengthType)0>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE0EE9GetLengthEv(a1);
}

uint64_t ot::MeshCoP::NetworkName::GetAsData(ot::MeshCoP::NetworkName *this)
{
  char v1 = ot::StringLength(this, (const char *)0x11);
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)&v4, (const char *)this, v1);
  return v4;
}

uint64_t ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NetworkName *this, ot *a2)
{
  uint64_t v8 = this;
  unsigned int v7 = a2;
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)v5, (const char *)a2, 17);
  if ((ot::IsValidUtf8String(v7, v2) & 1) != 0) {
    return ot::MeshCoP::NetworkName::Set(this, (const ot::MeshCoP::NameData *)v5);
  }
  else {
    return 7;
  }
}

uint64_t ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NetworkName *this, const ot::MeshCoP::NameData *a2)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  unsigned int v8 = 0;
  __int128 v7 = *(_OWORD *)a2;
  Buffer  = (ot *)ot::MeshCoP::NameData::GetBuffer((ot::MeshCoP::NameData *)&v7);
  unsigned __int8 Length = ot::MeshCoP::NameData::GetLength((ot::MeshCoP::NameData *)&v7);
  unsigned __int8 v6 = ot::StringLength(Buffer, (const char *)Length);
  if (v6 <= 0x10u)
  {
    ot::Data<(ot::DataLengthType)0>::SetLength((uint64_t)&v7, v6);
    if (!ot::Data<(ot::DataLengthType)0>::MatchesBytesIn((uint64_t)&v7, this) || *((_BYTE *)this + v6))
    {
      ot::Data<(ot::DataLengthType)0>::CopyBytesTo((uint64_t)&v7, this);
      *((_BYTE *)this + v6)  = 0;
    }

    else
    {
      return 24;
    }
  }

  else
  {
    return 7;
  }

  return v8;
}

uint64_t ot::MeshCoP::NameData::GetBuffer(ot::MeshCoP::NameData *this)
{
  return ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)this);
}

{
  return __ZNK2ot7MeshCoP8NameData9GetBufferEv(this);
}

uint64_t ot::MeshCoP::NameData::GetLength(ot::MeshCoP::NameData *this)
{
  return ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)this);
}

{
  return __ZNK2ot7MeshCoP8NameData9GetLengthEv(this);
}

uint64_t ot::Data<(ot::DataLengthType)0>::SetLength(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8)  = a2;
  return result;
}

{
  return __ZN2ot4DataILNS_14DataLengthTypeE0EE9SetLengthEh(result, a2);
}

BOOL ot::Data<(ot::DataLengthType)0>::MatchesBytesIn(uint64_t a1, const void *a2)
{
  return memcmp(*(const void **)a1, a2, *(unsigned __int8 *)(a1 + 8)) == 0;
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE0EE14MatchesBytesInEPKv(a1, a2);
}

void *ot::Data<(ot::DataLengthType)0>::CopyBytesTo(uint64_t a1, void *a2)
{
  return memcpy(a2, *(const void **)a1, *(unsigned __int8 *)(a1 + 8));
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE0EE11CopyBytesToEPv(a1, a2);
}

BOOL ot::MeshCoP::NetworkName::operator==(ot::MeshCoP::NetworkName *a1, ot::MeshCoP::NetworkName *a2)
{
  unsigned int v8 = a1;
  __int128 v7 = a2;
  v6[0]  = ot::MeshCoP::NetworkName::GetAsData(a1);
  v6[1]  = v2;
  v5[0]  = ot::MeshCoP::NetworkName::GetAsData(v7);
  v5[1]  = v3;
  return ot::Data<(ot::DataLengthType)0>::operator==((uint64_t)v6, (uint64_t)v5);
}

BOOL ot::Data<(ot::DataLengthType)0>::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v3 = 0;
  return v3;
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE0EEeqERKS2_(a1, a2);
}

ot::MeshCoP::NetworkNameManager *ot::MeshCoP::NetworkNameManager::NetworkNameManager( ot::MeshCoP::NetworkNameManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::NetworkNameManager::NetworkNameManager(this, a2);
  return this;
}

uint64_t ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NetworkNameManager *this, ot *a2)
{
  unsigned int v2 = ot::MeshCoP::NetworkName::Set(this, a2);
  return ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(this, v2);
}

uint64_t ot::MeshCoP::NetworkNameManager::SetDomainName(ot::MeshCoP::NetworkNameManager *this, ot *a2)
{
  unsigned int v4 = ot::MeshCoP::NetworkName::Set((ot::MeshCoP::NetworkNameManager *)((char *)this + 17), a2);
  if (v4 == 24) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(ot::InstanceLocator *a1, unsigned int a2)
{
  unsigned int v5 = a2;
  if (a2)
  {
    if (a2 == 24)
    {
      BOOL v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
      ot::Notifier::SignalIfFirst(v3, 0x10000LL);
      return 0;
    }
  }

  else
  {
    unsigned int v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
    ot::Notifier::Signal(v2, 0x10000LL);
  }

  return v5;
}

uint64_t ot::MeshCoP::NetworkNameManager::SetNetworkName( ot::MeshCoP::NetworkNameManager *this, const ot::MeshCoP::NameData *a2)
{
  unsigned int v2 = ot::MeshCoP::NetworkName::Set(this, a2);
  return ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(this, v2);
}

uint64_t ot::MeshCoP::NetworkNameManager::SetDomainName( ot::MeshCoP::NetworkNameManager *this, const ot::MeshCoP::NameData *a2)
{
  unsigned int v4 = ot::MeshCoP::NetworkName::Set((ot::MeshCoP::NetworkNameManager *)((char *)this + 17), a2);
  if (v4 == 24) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t ot::Data<(ot::DataLengthType)0>::GetBytes(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE0EE8GetBytesEv(a1);
}

void ot::MutableData<(ot::DataLengthType)0>::GetBytes(uint64_t a1)
{
}

{
  __ZN2ot11MutableDataILNS_14DataLengthTypeE0EE8GetBytesEv(a1);
}

uint64_t ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom( uint64_t a1, const void *a2, unsigned __int8 a3)
{
  else {
    int v3 = 0;
  }
  unsigned int v7 = v3;
  *(_BYTE *)(a1 + 8)  = ot::Min<unsigned char>(*(_BYTE *)(a1 + 8), a3);
  ot::AsNonConst<unsigned char>();
  memcpy(v4, a2, *(unsigned __int8 *)(a1 + 8));
  return v7;
}

{
  return __ZN2ot11MutableDataILNS_14DataLengthTypeE0EE13CopyBytesFromEPKhh(a1, a2, a3);
}

uint64_t ot::Min<unsigned char>(unsigned __int8 a1, unsigned __int8 a2)
{
  else {
    return a1;
  }
}

{
  return __ZN2ot3MinIhEET_S1_S1_(a1, a2);
}

ot::Random::NonCrypto *ot::Mac::GenerateRandomPanId(ot::Random::NonCrypto *this)
{
  do
    this  = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint16(this);
  while ((unsigned __int16)this == 0xFFFF);
  return (ot::Random::NonCrypto *)(unsigned __int16)this;
}

_BYTE *ot::Mac::ExtAddress::GenerateRandom(ot::Mac::ExtAddress *this)
{
  return ot::Mac::ExtAddress::SetLocal(this, 1);
}

_BYTE *ot::Mac::ExtAddress::SetGroup(_BYTE *this, char a2)
{
  if ((a2 & 1) != 0) {
    *this |= 1u;
  }
  else {
    *this &= ~1u;
  }
  return this;
}

{
  return __ZN2ot3Mac10ExtAddress8SetGroupEb(this, a2);
}

_BYTE *ot::Mac::ExtAddress::SetLocal(_BYTE *this, char a2)
{
  if ((a2 & 1) != 0) {
    *this |= 2u;
  }
  else {
    *this &= ~2u;
  }
  return this;
}

{
  return __ZN2ot3Mac10ExtAddress8SetLocalEb(this, a2);
}

ot::StringWriter *ot::Mac::ExtAddress::ToString@<X0>( ot::Mac::ExtAddress *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, 8);
}

char *ot::Mac::ExtAddress::CopyAddress(char *result, void *a2, char a3)
{
  unsigned int v7 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      unsigned __int8 v6 = (char *)a2 + 7;
      for (char i = 8; i; --i)
      {
        int v3 = v6--;
        unsigned int v4 = v7++;
        *unsigned int v4 = *v3;
      }
    }
  }

  else
  {
    *(void *)uint64_t result = *a2;
  }

  return result;
}

ot::StringWriter *ot::Mac::Address::ToString@<X0>(ot::Mac::Address *this@<X0>, ot::StringWriter *a2@<X8>)
{
  if (*((_BYTE *)this + 8) == 2)
  {
    ot::Mac::Address::GetExtended(this);
    return ot::StringWriter::AppendHexBytes(a2, v2, 8);
  }

  else if (*((_BYTE *)this + 8))
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(this);
    return ot::StringWriter::Append(a2, "0x%04x", Short);
  }

  else
  {
    return ot::StringWriter::Append(a2, "None");
  }

uint64_t ot::Mac::RadioTypes::AddAll(ot::Mac::RadioTypes *this)
{
  return ot::Mac::RadioTypes::Add(this, 1);
}

ot::StringWriter *ot::Mac::RadioTypes::ToString@<X0>( ot::Mac::RadioTypes *this@<X0>, ot::StringWriter *a2@<X8>)
{
  char v9 = 0;
  ot::StringWriter::Append(a2, "{");
  if (ot::Mac::RadioTypes::Contains((char *)this, 0))
  {
    unsigned int v2 = ot::Mac::RadioTypeToString(0);
    ot::StringWriter::Append(a2, "%s%s", " ", v2);
    char v9 = 1;
  }

  if (ot::Mac::RadioTypes::Contains((char *)this, 1))
  {
    int v3 = ", ";
    if ((v9 & 1) == 0) {
      int v3 = " ";
    }
    unsigned __int8 v6 = v3;
    unsigned int v4 = ot::Mac::RadioTypeToString(1);
    ot::StringWriter::Append(a2, "%s%s", v6, v4);
  }

  return ot::StringWriter::Append(a2, " }");
}

uint64_t ot::String<(unsigned short)32>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 32);
  return a1;
}

const char *ot::Mac::RadioTypeToString(char a1)
{
  unsigned int v2 = "unknown";
  if (!a1) {
    return "15.4";
  }
  if (a1 == 1) {
    return "trel";
  }
  return v2;
}

uint64_t ot::Mac::LinkFrameCounters::Get(unsigned int *a1, char a2)
{
  unsigned int v3 = 0;
  if (a2)
  {
    if (a2 == 1) {
      return a1[1];
    }
  }

  else
  {
    return *a1;
  }

  return v3;
}

_DWORD *ot::Mac::LinkFrameCounters::Set(_DWORD *result, char a2, int a3)
{
  if (a2)
  {
    if (a2 == 1) {
      result[1]  = a3;
    }
  }

  else
  {
    *uint64_t result = a3;
  }

  return result;
}

uint64_t ot::Mac::LinkFrameCounters::GetMaximum(ot::Mac::LinkFrameCounters *this)
{
  unsigned int v2 = 0;
  if (*(_DWORD *)this) {
    unsigned int v2 = *(_DWORD *)this;
  }
  if (v2 < *((_DWORD *)this + 1)) {
    return *((unsigned int *)this + 1);
  }
  return v2;
}

_DWORD *ot::Mac::LinkFrameCounters::SetAll(_DWORD *this, int a2)
{
  *this  = a2;
  this[1]  = a2;
  return this;
}

void *ot::Mac::KeyMaterial::Clear(ot::Mac::KeyMaterial *this)
{
  return ot::Clearable<ot::Mac::Key>::Clear(v1);
}

double ot::Mac::KeyMaterial::SetFrom(__n128 *this, __n128 *a2)
{
  return ot::Mac::KeyMaterial::SetKey(this, a2);
}

__n128 ot::Mac::KeyMaterial::SetKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1  = *a2;
  return result;
}

__n128 ot::Mac::KeyMaterial::ExtractKey(ot::Mac::KeyMaterial *this, __n128 *a2)
{
  __n128 result = *v2;
  *a2  = *v2;
  return result;
}

  ;
}

uint64_t ot::Mac::KeyMaterial::ConvertToCryptoKey(ot::Mac::KeyMaterial *this, ot::Crypto::Key *a2)
{
  return ot::Crypto::Key::Set((uint64_t)a2, v3, 16);
}

  ;
}

BOOL ot::Mac::KeyMaterial::operator==(ot::Mac::KeyMaterial *a1, ot::Mac::KeyMaterial *a2)
{
  unsigned int v5 = v2;
  ot::Mac::KeyMaterial::GetKey(a2);
  return ot::Equatable<ot::Mac::Key>::operator==(v5, v3);
}

BOOL ot::Equatable<ot::Mac::Key>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_3Mac3KeyEEeqERKS2_(a1, a2);
}

ot::Mac::SubMac *ot::Mac::SubMac::SubMac(ot::Mac::SubMac *this, ot::Instance *a2)
{
  unsigned int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  *(_BYTE *)this  = ot::Radio::GetCaps(v2);
  unsigned int v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  *((void *)this + 5)  = ot::Radio::GetTransmitBuffer(v3);
  ot::Mac::SubMac::Callbacks::Callbacks((ot::Mac::SubMac *)((char *)this + 48), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 7);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::SubMac *)((char *)this + 72));
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::SubMac *)((char *)this + 88));
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::SubMac *)((char *)this + 104));
  ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::TimerMicroIn( (ot::Mac::SubMac *)((char *)this + 144),  a2);
  ot::TimerMilli::TimerMilli( (ot::Mac::SubMac *)((char *)this + 208),  a2,  (void (*)(ot::Timer *))ot::Mac::SubMac::HandleCslTimer);
  ot::Mac::CslAccuracy::Init((_BYTE *)this + 192);
  ot::Mac::SubMac::Init(this);
  return this;
}

{
  ot::Mac::SubMac::SubMac(this, a2);
  return this;
}

uint64_t ot::Mac::SubMac::HandleTimer(uint64_t this)
{
  unint64_t v1 = *(unsigned __int8 *)(this + 1) - 3;
  if (v1 <= 0x1A) {
    __asm { BR              X8 }
  }

  return this;
}

uint64_t ot::Radio::GetCaps(ot::Radio *this)
{
  return otPlatRadioGetCaps();
}

{
  return __ZN2ot5Radio7GetCapsEv(this);
}

ot::TimerMilli *ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::TimerMicroIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Mac::SubMac::HandleCslTimer(ot::Mac::SubMac *this, ot::Timer *a2)
{
  unsigned int v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::HandleCslTimer(v2);
}

_BYTE *ot::Mac::CslAccuracy::Init(_BYTE *this)
{
  *this  = -1;
  this[1]  = -1;
  return this;
}

{
  return __ZN2ot3Mac11CslAccuracy4InitEv(this);
}

uint64_t ot::Mac::SubMac::Init(ot::Mac::SubMac *this)
{
  unsigned __int8 v6 = this;
  *((_BYTE *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0;
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_BYTE *)this + 20)  = 0;
  *((_WORD *)this + 1ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = -2;
  ot::Clearable<ot::Mac::ExtAddress>::Clear((void *)this + 3);
  *((_BYTE *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 32) & 0xFE | 1;
  *((_BYTE *)this + 33)  = 127;
  ot::Time::Time((ot::Time *)&v5, 0);
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = v5;
  *((_BYTE *)this + 125)  = 0;
  *((_BYTE *)this + 32) &= ~2u;
  ot::Mac::KeyMaterial::Clear((ot::Mac::SubMac *)((char *)this + 72));
  ot::Mac::KeyMaterial::Clear((ot::Mac::SubMac *)((char *)this + 88));
  ot::Mac::KeyMaterial::Clear((ot::Mac::SubMac *)((char *)this + 104));
  *((_DWORD *)this + 30)  = 0;
  *((_BYTE *)this + 12++*(_WORD *)(this + 4) = 0;
  ot::TimerMicro::Stop((ot::Mac::SubMac *)((char *)this + 144));
  *((_WORD *)this + 8++*(_WORD *)(this + 4) = 0;
  *((_BYTE *)this + 170) &= 0xC0u;
  *((_WORD *)this + 86)  = 0;
  ot::Clearable<ot::Mac::ExtAddress>::Clear((ot::Mac::SubMac *)((char *)this + 174));
  *((_BYTE *)this + 170) &= ~0x40u;
  ot::Time::Time((ot::Time *)&v4, 0);
  *((_DWORD *)this + 46)  = v4;
  ot::Time::Time((ot::Time *)&v3, 0);
  *((_DWORD *)this + 47)  = v3;
  uint64_t result = ot::TimerMicro::Stop((ot::Mac::SubMac *)((char *)this + 208));
  *((_BYTE *)this + 5)  = 0;
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_DWORD *)this + 3)  = 0;
  *((_DWORD *)this + ++*(_WORD *)(this + 4) = 0;
  return result;
}

void *ot::Clearable<ot::Mac::ExtAddress>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Mac10ExtAddressEE5ClearEv(result);
}

uint64_t ot::Mac::SubMac::GetCaps(ot::Mac::SubMac *this)
{
  return *(unsigned __int8 *)this;
}

void ot::Mac::SubMac::SetPanId(ot::Mac::SubMac *this, __int16 a2)
{
  unsigned int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::SetPanId(v2, a2);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "RadioPanId: 0x%04x", v3, v4, v5, v6, v7, v8, a2);
}

uint64_t ot::Radio::SetPanId(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetPanId((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio8SetPanIdEt(this, a2);
}

void ot::Mac::SubMac::SetShortAddress(ot::Mac::SubMac *this, __int16 a2)
{
  *((_WORD *)this + 1ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  unsigned int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::SetShortAddress(v2, *((_WORD *)this + 11));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SubMac",  "RadioShortAddress: 0x%04x",  v3,  v4,  v5,  v6,  v7,  v8,  *((_WORD *)this + 11));
}

void ot::Mac::SubMac::SetExtAddress(ot::Mac::SubMac *this, const ot::Mac::ExtAddress *a2)
{
  char v31 = this;
  uint64_t v30 = a2;
  uint64_t v27 = this;
  *((void *)this + 3)  = *(void *)a2;
  uint64_t v26 = (ot::Mac::ExtAddress *)v34;
  ot::Mac::ExtAddress::Set(v34, v30, 1);
  v25[10]  = (ot::Mac::ExtAddress *)v33;
  ot::Mac::ExtAddress::ToString((ot::InstanceLocator *)((char *)v27 + 24), (ot::StringWriter *)v33);
  char v2 = ot::String<(unsigned short)17>::AsCString((uint64_t)v33);
  uint64_t v3 = (ot::Mac::ExtAddress *)*(unsigned __int8 *)v30;
  uint64_t v4 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 1);
  uint64_t v5 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 2);
  uint64_t v6 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 3);
  uint64_t v7 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 4);
  uint64_t v8 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 5);
  char v9 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 6);
  uint64_t v10 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 7);
  v25[11]  = (ot::Mac::ExtAddress *)v25;
  v25[1]  = v3;
  uint64_t v25[2] = v4;
  v25[3]  = v5;
  v25[4]  = v6;
  v25[5]  = v7;
  v25[6]  = v8;
  v25[7]  = v9;
  v25[8]  = v10;
  uint64_t v29 = (ot *)"SubMac";
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SubMac",  "RadioExtAddress1: %s 0[%d] 1[%d] 2[%d] 3[%d] 4[%d] 5[%d] 6[%d] 7[%d]",  v11,  v12,  v13,  v14,  v15,  v16,  v2);
  unsigned int v17 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(v27);
  ot::Radio::SetExtendedAddress(v17, v26);
  uint64_t v28 = v32;
  ot::Mac::ExtAddress::ToString((ot::InstanceLocator *)((char *)v27 + 24), (ot::StringWriter *)v32);
  char v18 = ot::String<(unsigned short)17>::AsCString((uint64_t)v28);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>(v29, "RadioExtAddress: %s", v19, v20, v21, v22, v23, v24, v18);
}

uint64_t ot::Mac::SubMac::Enable(ot::Mac::SubMac *this)
{
  int v5 = 0;
  if (!*((_BYTE *)this + 1))
  {
    unint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    int v5 = ot::Radio::Enable(v1);
    if (!v5)
    {
      char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      int v5 = ot::Radio::Sleep(v2);
      if (!v5) {
        ot::Mac::SubMac::SetState((uint64_t)this, 1u);
      }
    }
  }

  if (v5) {
    __assert_rtn("Enable", "sub_mac.cpp", 237, "false");
  }
  return 0LL;
}

void ot::Mac::SubMac::SetState(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned __int8 *)(a1 + 1) != a2)
  {
    char v8 = ot::Mac::SubMac::StateToString(*(_BYTE *)(a1 + 1));
    ot::Mac::SubMac::StateToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "RadioState: %s -> %s", v2, v3, v4, v5, v6, v7, v8);
    *(_BYTE *)(a1 + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  }

uint64_t ot::Mac::SubMac::Disable(ot::Mac::SubMac *this)
{
  unint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  unsigned int v5 = ot::Radio::Sleep(v1);
  if (!v5)
  {
    uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v5 = ot::Radio::Disable(v2);
    if (!v5) {
      ot::Mac::SubMac::SetState((uint64_t)this, 0);
    }
  }

  return v5;
}

uint64_t ot::Radio::Disable(ot::Radio *this)
{
  return otPlatRadioDisable();
}

{
  return __ZN2ot5Radio7DisableEv(this);
}

uint64_t ot::Mac::SubMac::Sleep(ot::Mac::SubMac *this)
{
  unint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  unsigned int v11 = ot::Radio::Sleep(v1);
  if (v11)
  {
    char v2 = ot::ErrorToString(v11);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"SubMac",  "RadioSleep() failed, error: %s",  v3,  v4,  v5,  v6,  v7,  v8,  v2);
  }

  else
  {
    ot::Mac::SubMac::SetState((uint64_t)this, 1u);
  }

  return v11;
}

uint64_t ot::Mac::SubMac::Receive(ot::Mac::SubMac *this, unsigned __int8 a2)
{
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v13 = ot::Radio::Sleep(v2);
  }

  else
  {
    uint64_t v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v13 = ot::Radio::Receive(v3, a2);
  }

  if (v13)
  {
    char v4 = ot::ErrorToString(v13);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"SubMac",  "RadioReceive() failed, error: %s",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
  }

  else
  {
    ot::Mac::SubMac::SetState((uint64_t)this, 2u);
  }

  return v13;
}

void ot::Mac::SubMac::CslSample(ot::Mac::SubMac *this)
{
  if ((*((_BYTE *)this + 32) & 2) != 0
    || (ot::Mac::SubMac::SetState((uint64_t)this, 8u), (*((_BYTE *)this + 170) & 0x40) == 0)
    || ot::Mac::SubMac::RadioSupportsReceiveTiming(this))
  {
    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::Sleep(v2);
    IgnoreError();
  }

  else
  {
    unint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::Receive(v1, *((_BYTE *)this + 170) & 0x3F);
    IgnoreError();
  }

BOOL ot::Mac::SubMac::RadioSupportsReceiveTiming(ot::Mac::SubMac *this)
{
  return *(char *)this < 0;
}

{
  return __ZNK2ot3Mac6SubMac26RadioSupportsReceiveTimingEv(this);
}

void ot::Mac::SubMac::HandleReceiveDone(uint64_t a1, ot::Mac::Frame *a2, int a3)
{
  v9[1]  = (ot::Mac::Frame *)a1;
  v9[0]  = a2;
  int v8 = a3;
  if (ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet((void *)(a1 + 56)) && v9[0] && !v8)
  {
    char v7 = 0;
    ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::RxFrame *&,BOOL>( a1 + 56,  v9,  &v7);
  }

  if (!ot::Mac::SubMac::ShouldHandleTransmitSecurity((ot::Mac::SubMac *)a1)
    && v9[0]
    && (*((_BYTE *)v9[0] + 31) & 2) != 0)
  {
    ot::Mac::SubMac::SignalFrameCounterUsed((ot::Mac::SubMac *)a1, *((_DWORD *)v9[0] + 6), *((_BYTE *)v9[0] + 28));
  }

  if (v9[0] && !v8)
  {
    LOBYTE(v3)  = 0;
    if (*(_WORD *)(a1 + 168)) {
      int v3 = (*((unsigned __int8 *)v9[0] + 31) >> 1) & 1;
    }
    char v6 = v3;
    if ((v3 & 1) != 0)
    {
      ot::Time::Time((ot::Time *)&v5, *((void *)v9[0] + 2));
      *(_DWORD *)(a1 + 188)  = v5;
    }
  }

  if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
    ot::Mac::SubMac::Callbacks::ReceiveDone((ot::InstanceLocator *)(a1 + 48), v9[0], v8);
  }
}

BOOL ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPK12otRadioFramebPvEE5IsSetEv(a1);
}

uint64_t ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::RxFrame *&,BOOL>( uint64_t a1, void *a2, _BYTE *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3 & 1, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK12otRadioFramebPvELNS_23CallbackContextPositionE1EE6InvokeIJRPNS_3Mac7RxFrameEbEEEvDpOT_( a1,  a2,  a3);
}

BOOL ot::Mac::SubMac::ShouldHandleTransmitSecurity(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsTransmitSecurity(this))
  {
    return 0;
  }

  else
  {
    unint64_t v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }

void ot::Mac::SubMac::SignalFrameCounterUsed(ot::Mac::SubMac *this, unsigned int a2, char a3)
{
  if (a3 == *((_BYTE *)this + 124))
  {
    ot::Mac::SubMac::Callbacks::FrameCounterUsed((ot::Mac::SubMac *)((char *)this + 48), a2);
    if (*((_DWORD *)this + 30) <= a2) {
      *((_DWORD *)this + 30)  = a2 + 1;
    }
  }

uint64_t ot::Mac::SubMac::Send(ot::Mac::SubMac *this)
{
  unsigned int v5 = 0;
  if (*((_BYTE *)this + 1) == 5)
  {
    return 13;
  }

  else if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    int v3 = (ot::Mac::Frame *)*((void *)this + 5);
    if (ot::Mac::Frame::GetAckRequest(v3)) {
      uint64_t v1 = 14LL;
    }
    else {
      uint64_t v1 = 0LL;
    }
    ot::Mac::SubMac::Callbacks::TransmitDone((char *)this + 48, v3, 0LL, v1);
  }

  else
  {
    ot::Mac::SubMac::ProcessTransmitSecurity(this);
    *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
    *((_BYTE *)this + 20)  = 0;
    *((_BYTE *)this + 125)  = 0;
    *((_BYTE *)this + ++*(_WORD *)(this + 4) = 0;
    *((_BYTE *)this + 3)  = 0;
    ot::Mac::SubMac::StartCsmaBackoff(this);
  }

  return v5;
}

void ot::Mac::SubMac::ProcessTransmitSecurity(ot::Mac::SubMac *this)
{
  char v7 = this;
  ExtAddress  = 0LL;
  if (ot::Mac::Frame::GetSecurityEnabled(*((ot::Mac::Frame **)this + 5))
    && (ot::Mac::TxFrame::IsSecurityProcessed(*((ot::Mac::TxFrame **)this + 5)) & 1) == 0
    && !ot::Mac::Frame::GetKeyIdMode(*((ot::Mac::Frame **)this + 5), &v5))
  {
    if ((ot::Mac::TxFrame::IsHeaderUpdated(*((ot::Mac::TxFrame **)this + 5)) & 1) == 0) {
      ot::Mac::Frame::SetKeyId(*((ot::Mac::Frame **)this + 5), *((_BYTE *)this + 124));
    }
    if (ot::Mac::SubMac::ShouldHandleTransmitSecurity(this) && v5 == 8)
    {
      char v2 = (ot::Mac::TxFrame *)*((void *)this + 5);
      CurrentMacKey  = (const ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetCurrentMacKey(this);
      ot::Mac::TxFrame::SetAesKey((uint64_t)v2, CurrentMacKey);
      if ((ot::Mac::TxFrame::IsHeaderUpdated(*((ot::Mac::TxFrame **)this + 5)) & 1) == 0)
      {
        FrameCounter  = ot::Mac::SubMac::GetFrameCounter(this);
        ot::Mac::Frame::SetFrameCounter(*((ot::Mac::Frame **)this + 5), FrameCounter);
        ot::Mac::SubMac::SignalFrameCounterUsed(this, FrameCounter, *((_BYTE *)this + 124));
      }

      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::SubMac::GetExtAddress(this);
      ot::Mac::TxFrame::ProcessTransmitAesCcm(*((ot::Mac::TxFrame **)this + 5), ExtAddress);
    }
  }

void ot::Mac::SubMac::StartCsmaBackoff(ot::Mac::SubMac *this)
{
  uint64_t v12 = this;
  unsigned __int8 v11 = *((_BYTE *)this + 2) + 3;
  if (*(_DWORD *)(*((void *)this + 5) + 32LL))
  {
    ot::Mac::SubMac::SetState((uint64_t)this, 7u);
    if (ot::Mac::SubMac::ShouldHandleTransmitTargetTime(this))
    {
      ot::InstanceLocator::GetInstance(this);
      int Now = otPlatRadioGetNow();
      ot::Time::Time((ot::Time *)&v10, Now);
      ot::Time::Time((ot::Time *)&v6, *(_DWORD *)(*((void *)this + 5) + 36LL));
      int v7 = ot::Time::operator+(&v6, *(_DWORD *)(*((void *)this + 5) + 32LL));
      int v8 = ot::Time::operator-(&v7, 128);
      int v9 = ot::Time::operator-(&v8, 40);
      if (ot::Time::operator<(&v10, &v9))
      {
        ot::Time::Time((ot::Time *)&v3, *(_DWORD *)(*((void *)this + 5) + 36LL));
        int v4 = ot::Time::operator-(&v3, 128);
        int v5 = ot::Time::operator-(&v4, 40);
        ot::TimerMicro::StartAt((ot::Mac::SubMac *)((char *)this + 144), v5, *(_DWORD *)(*((void *)this + 5) + 32LL));
      }

      else
      {
        ot::Mac::SubMac::BeginTransmit(this);
      }

      return;
    }

uint64_t ot::Mac::SubMac::GetFrameCounter(ot::Mac::SubMac *this)
{
  return *((unsigned int *)this + 30);
}

{
  return __ZNK2ot3Mac6SubMac15GetFrameCounterEv(this);
}

BOOL ot::Mac::SubMac::ShouldHandleTransmitTargetTime(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsTransmitTiming(this))
  {
    return 0;
  }

  else
  {
    uint64_t v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }

uint64_t ot::Time::operator-(_DWORD *a1, int a2)
{
  return v3;
}

{
  return __ZNK2ot4TimemiEj(a1, a2);
}

_BYTE *ot::Mac::SubMac::BeginTransmit(_BYTE *this)
{
  int v9 = this;
  uint64_t v5 = (uint64_t)this;
  if (this[1] == 3 || this[1] == 7)
  {
    if ((*this & 0x10) == 0)
    {
      int v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
      Channel  = ot::Mac::Frame::GetChannel(*(ot::Mac::Frame **)(v5 + 40));
    }

    ot::Mac::SubMac::SetState(v5, 4u);
    if (ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet((void *)(v5 + 56)))
    {
      uint64_t v7 = *(void *)(v5 + 40);
      char v6 = 1;
      ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::TxFrame *,BOOL>( v5 + 56,  &v7,  &v6);
    }

    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)v5);
    this  = (_BYTE *)ot::Radio::Transmit(v2, *(ot::Mac::TxFrame **)(v5 + 40));
    int v8 = (int)this;
    if ((_DWORD)this == 13 && *(_DWORD *)(*(void *)(v5 + 40) + 32LL))
    {
      *(_DWORD *)(*(void *)(v5 + 40) + 32LL)  = 0;
      *(_DWORD *)(*(void *)(v5 + 40) + 36LL)  = 0;
      unsigned int v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)v5);
      this  = (_BYTE *)ot::Radio::Transmit(v3, *(ot::Mac::TxFrame **)(v5 + 40));
      int v8 = (int)this;
    }

    if (v8) {
      __assert_rtn("BeginTransmit", "sub_mac.cpp", 664, "false");
    }
  }

  return this;
}

BOOL ot::Mac::SubMac::ShouldHandleCsmaBackOff(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsCsmaBackoff(this))
  {
    return 0;
  }

  else
  {
    uint64_t v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }

void ot::Mac::SubMac::StartTimerForBackoff(ot::Mac::Frame **this, char a2)
{
  unsigned int v13 = 320 * ot::Random::NonCrypto::GetUint32InRange(0LL, 1LL << a2);
  if (((_BYTE)this[4] & 1) != 0)
  {
    unsigned __int8 v11 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
    Channel  = ot::Mac::Frame::GetChannel(this[5]);
    ot::Radio::Receive(v11, Channel);
  }

  else
  {
    unsigned int v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
    ot::Radio::Sleep(v3);
  }

  IgnoreError();
  ot::TimerMicro::Start((ot::TimerMicro *)(this + 18), v13);
  if (*((_BYTE *)this + 1) == 6)
  {
    char v4 = ot::ToUlong(v13);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SubMac",  "Delaying retx for %lu usec (be=%u)",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
  }

uint64_t ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::TxFrame *,BOOL>( uint64_t a1, void *a2, _BYTE *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3 & 1, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK12otRadioFramebPvELNS_23CallbackContextPositionE1EE6InvokeIJPNS_3Mac7TxFrameEbEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::SubMac *this, ot::Mac::TxFrame *a2)
{
  uint64_t result = ot::Mac::SubMac::ShouldHandleAckTimeout(this);
  if ((result & 1) != 0)
  {
    uint64_t result = ot::Mac::Frame::GetAckRequest(a2);
    if ((result & 1) != 0) {
      return ot::TimerMicro::Start((ot::Mac::SubMac *)((char *)this + 144), 0x3E80u);
    }
  }

  return result;
}

BOOL ot::Mac::SubMac::ShouldHandleAckTimeout(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsAckTimeout(this))
  {
    return 0;
  }

  else
  {
    uint64_t v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }

void ot::Mac::SubMac::HandleTransmitDone(uint64_t a1, ot::Mac::Frame *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = a4;
  v12[3]  = 1;
  v12[2]  = 0;
  v12[1]  = 0;
  v12[0]  = -1;
  if ((*(_BYTE *)(a1 + 5) & 1) != 0
    && v13 != 11
    && ot::Mac::Frame::GetSecurityEnabled(v15)
    && !ot::Mac::Frame::GetKeyIdMode(v15, v12)
    && v12[0] == 8)
  {
    ++*(_DWORD *)(a1 + 12);
  }

  ot::TimerMicro::Stop((ot::TimerMicro *)(a1 + 144));
  if (v13 <= 0x1DuLL) {
    __asm { BR              X8 }
  }

  char v4 = ot::ErrorToString(v13);
  ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"SubMac",  "SubMac::HandleTransmitDone Unhandled error=%s",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
  handle_transmitdone_captureABC();
  __assert_rtn("HandleTransmitDone", "sub_mac.cpp", 795, "false");
}

uint64_t ot::Mac::TxFrame::IsCsmaCaEnabled(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 2) & 1;
}

{
  return __ZNK2ot3Mac7TxFrame15IsCsmaCaEnabledEv(this);
}

_DWORD *ot::Time::operator-=(_DWORD *result, int a2)
{
  *result -= a2;
  return result;
}

{
  return __ZN2ot4TimemIEj(result, a2);
}

void ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::SubMac *this, const ot::Mac::TxFrame *a2)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  if (!ot::Mac::SubMac::ShouldHandleTransmitSecurity(this)
    && ot::Mac::Frame::GetSecurityEnabled(v8)
    && (ot::Mac::TxFrame::IsHeaderUpdated(v8) & 1) != 0)
  {
    char v2 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    IsEnabled  = ot::Mac::LinkRaw::IsEnabled(v2);
    if (ot::Mac::Frame::GetKeyIdMode(v8, &v7))
    {
      if (!IsEnabled) {
        __assert_rtn("SignalFrameCounterUsedOnTxDone", "sub_mac.cpp", 919, "allowError");
      }
    }

    else if (v7 == 8)
    {
      if (ot::Mac::Frame::GetFrameCounter(v8, &v5))
      {
        if (!IsEnabled) {
          __assert_rtn("SignalFrameCounterUsedOnTxDone", "sub_mac.cpp", 934, "allowError");
        }
      }

      else if (ot::Mac::Frame::GetKeyId(v8, &v6))
      {
        if (!IsEnabled) {
          __assert_rtn("SignalFrameCounterUsedOnTxDone", "sub_mac.cpp", 935, "allowError");
        }
      }

      else
      {
        ot::Mac::SubMac::SignalFrameCounterUsed(this, v5, v6);
      }
    }
  }

uint64_t ot::Mac::TxFrame::GetMaxCsmaBackoffs(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 40);
}

{
  return __ZNK2ot3Mac7TxFrame18GetMaxCsmaBackoffsEv(this);
}

BOOL ot::Mac::SubMac::ShouldHandleRetries(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsRetries(this))
  {
    return 0;
  }

  else
  {
    uint64_t v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::LinkRaw>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Mac7LinkRawEEERT_v(a1);
}

uint64_t ot::Mac::SubMac::GetRssi(ot::Mac::SubMac *this)
{
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    return 127;
  }

  else
  {
    uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    return (char)ot::Radio::GetRssi(v1);
  }

uint64_t ot::Radio::GetRssi(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return (char)otPlatRadioGetRssi((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio7GetRssiEv(this);
}

uint64_t ot::Mac::SubMac::GetNoiseFloor(ot::Mac::SubMac *this)
{
  uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  return (char)ot::Radio::GetReceiveSensitivity(v1);
}

uint64_t ot::Radio::GetReceiveSensitivity(ot::Radio *this)
{
  return (char)otPlatRadioGetReceiveSensitivity();
}

{
  return __ZNK2ot5Radio21GetReceiveSensitivityEv(this);
}

uint64_t ot::Mac::SubMac::EnergyScan(ot::Mac::SubMac *this, unsigned __int8 a2, unsigned __int16 a3)
{
  uint64_t v15 = this;
  unsigned __int8 v14 = a2;
  unsigned __int16 v13 = a3;
  unsigned int v12 = 0;
  int v9 = *((unsigned __int8 *)this + 1);
  if (*((_BYTE *)this + 1) && (v9 != 2 && v9 != 1 ? (char v3 = 0) : (char v3 = 1), (v3 & 1) != 0 || (v9 - 3) > 4))
  {
    if ((*((_BYTE *)this + 32) & 2) != 0)
    {
      ot::Mac::SubMac::HandleEnergyScanDone(this, 127);
    }

    else if (ot::Mac::SubMac::RadioSupportsEnergyScan(this))
    {
      uint64_t v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::EnergyScan(v4, v14, v13);
      IgnoreError();
      ot::Mac::SubMac::SetState((uint64_t)this, 5u);
    }

    else if (ot::Mac::SubMac::ShouldHandleEnergyScan(this))
    {
      uint64_t v5 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Mac::SubMac::SetState((uint64_t)this, 5u);
      *((_BYTE *)this + 33)  = 127;
      int Now = ot::TimerMilli::GetNow(v6);
      int v11 = ot::Time::operator+(&Now, v13);
      *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = v11;
      ot::TimerMicro::Start((ot::Mac::SubMac *)((char *)this + 144), 0);
    }

    else
    {
      return 12;
    }
  }

  else
  {
    return 13;
  }

  return v12;
}

uint64_t ot::Mac::SubMac::HandleEnergyScanDone(ot::Mac::SubMac *this, char a2)
{
  return ot::Mac::SubMac::Callbacks::EnergyScanDone((ot::Mac::SubMac *)((char *)this + 48), a2);
}

BOOL ot::Mac::SubMac::RadioSupportsEnergyScan(ot::Mac::SubMac *this)
{
  return (*(_BYTE *)this & 2) != 0;
}

{
  return __ZNK2ot3Mac6SubMac23RadioSupportsEnergyScanEv(this);
}

uint64_t ot::Radio::EnergyScan(ot::Radio *this, char a2, __int16 a3)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioEnergyScan((uint64_t)InstancePtr, a2, a3);
}

{
  return __ZN2ot5Radio10EnergyScanEht(this, a2, a3);
}

BOOL ot::Mac::SubMac::ShouldHandleEnergyScan(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsEnergyScan(this))
  {
    return 0;
  }

  else
  {
    uint64_t v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }

uint64_t ot::Mac::SubMac::SampleRssi(ot::Mac::SubMac *this)
{
  uint64_t v7 = this;
  if (ot::Mac::SubMac::RadioSupportsEnergyScan(this)) {
    __assert_rtn("SampleRssi", "sub_mac.cpp", 1022, "!RadioSupportsEnergyScan()");
  }
  Rsschar i = (ot::TimerMilli *)ot::Mac::SubMac::GetRssi(this);
  char v6 = (char)Rssi;
  int Now = ot::TimerMilli::GetNow(Rssi);
  FireTime  = ot::Timer::GetFireTime((ot::Mac::SubMac *)((char *)this + 144));
  return ot::TimerMicro::StartAt((ot::Mac::SubMac *)((char *)this + 144), FireTime, 0x1F400u);
}

BOOL ot::Mac::SubMac::RadioSupportsTransmitSecurity(ot::Mac::SubMac *this)
{
  return (*(_BYTE *)this & 0x20) != 0;
}

{
  return __ZNK2ot3Mac6SubMac29RadioSupportsTransmitSecurityEv(this);
}

BOOL ot::Mac::SubMac::RadioSupportsCsmaBackoff(ot::Mac::SubMac *this)
{
  return (*(_BYTE *)this & 0xC) != 0;
}

{
  return __ZNK2ot3Mac6SubMac24RadioSupportsCsmaBackoffEv(this);
}

BOOL ot::Mac::SubMac::RadioSupportsAckTimeout(ot::Mac::SubMac *this)
{
  return (*(_BYTE *)this & 1) != 0;
}

{
  return __ZNK2ot3Mac6SubMac23RadioSupportsAckTimeoutEv(this);
}

BOOL ot::Mac::SubMac::RadioSupportsRetries(ot::Mac::SubMac *this)
{
  return (*(_BYTE *)this & 4) != 0;
}

{
  return __ZNK2ot3Mac6SubMac20RadioSupportsRetriesEv(this);
}

BOOL ot::Mac::SubMac::RadioSupportsTransmitTiming(ot::Mac::SubMac *this)
{
  return (*(_BYTE *)this & 0x40) != 0;
}

{
  return __ZNK2ot3Mac6SubMac27RadioSupportsTransmitTimingEv(this);
}

char *ot::Mac::SubMac::StateToString(unsigned __int8 a1)
{
  return ot::Mac::SubMac::StateToString(ot::Mac::SubMac::State)::kStateStrings[a1];
}

uint64_t ot::Mac::SubMac::SetMacKey( ot::Mac::SubMac *this, unsigned __int8 a2, unsigned __int8 a3, const ot::Mac::KeyMaterial *a4, const ot::Mac::KeyMaterial *a5, const ot::Mac::KeyMaterial *a6)
{
  if (a2)
  {
    if (a2 == 8)
    {
      *((_BYTE *)this + 12++*(_WORD *)(this + 4) = a3;
      *(_OWORD *)((char *)this + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_OWORD *)a4;
      *(_OWORD *)((char *)this + 88)  = *(_OWORD *)a5;
      *(_OWORD *)((char *)this + 10++*(_WORD *)(this + 4) = *(_OWORD *)a6;
    }

    else if (a2 != 16)
    {
      __assert_rtn("SetMacKey", "sub_mac.cpp", 1237, "false");
    }
  }

  uint64_t result = ot::Mac::SubMac::ShouldHandleTransmitSecurity(this);
  if ((result & 1) == 0)
  {
    uint64_t v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    return ot::Radio::SetMacKey(v7, a2, a3, a4, a5, a6);
  }

  return result;
}

uint64_t ot::Radio::SetMacKey( ot::Radio *this, unsigned __int8 a2, unsigned __int8 a3, const ot::Mac::KeyMaterial *a4, const ot::Mac::KeyMaterial *a5, const ot::Mac::KeyMaterial *a6)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetMacKey((uint64_t)InstancePtr, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, 0LL, v7);
}

{
  return __ZN2ot5Radio9SetMacKeyEhhRKNS_3Mac11KeyMaterialES4_S4_(this, a2, a3, a4, a5, a6);
}

uint64_t ot::Mac::SubMac::SetFrameCounter(ot::Mac::SubMac *this, unsigned int a2, char a3)
{
  char v6 = a3 & 1;
  if ((a3 & 1) == 0 || a2 > *((_DWORD *)this + 30)) {
    *((_DWORD *)this + 30)  = a2;
  }
  uint64_t result = ot::Mac::SubMac::ShouldHandleTransmitSecurity(this);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    if ((v6 & 1) != 0) {
      return ot::Radio::SetMacFrameCounterIfLarger(v4, a2);
    }
    else {
      return ot::Radio::SetMacFrameCounter(v4, a2);
    }
  }

  return result;
}

uint64_t ot::Radio::SetMacFrameCounterIfLarger(ot::Radio *this, unsigned int a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetMacFrameCounterIfLarger((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio26SetMacFrameCounterIfLargerEj(this, a2);
}

uint64_t ot::Radio::SetMacFrameCounter(ot::Radio *this, unsigned int a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetMacFrameCounter((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio18SetMacFrameCounterEj(this, a2);
}

uint64_t ot::Mac::SubMac::UpdateCsl( uint64_t a1, unsigned __int16 a2, char a3, unsigned __int16 a4, uint64_t a5, int *a6)
{
  uint64_t v28 = a1;
  unsigned __int16 v27 = a2;
  char v26 = a3;
  unsigned __int16 v25 = a4;
  uint64_t v24 = a5;
  uint64_t v23 = a6;
  BOOL v22 = a2 != *(unsigned __int16 *)(a1 + 168);
  BOOL v21 = a3 != (*(_BYTE *)(a1 + 170) & 0x3F);
  BOOL v20 = a4 != *(unsigned __int16 *)(a1 + 172);
  ot::AsCoreType<otExtAddress>(a5);
  BOOL v19 = ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v6, (const void *)(a1 + 174));
  BOOL v18 = *v23 != 0;
  char v13 = 1;
  if (!v22)
  {
    char v13 = 1;
    if (!v21)
    {
      char v13 = 1;
      if (!v20)
      {
        char v13 = 1;
        if (!v19) {
          char v13 = v18;
        }
      }
    }
  }

  char v17 = v13 & 1;
  if ((v13 & 1) != 0)
  {
    *(_BYTE *)(a1 + 170)  = *(_BYTE *)(a1 + 170) & 0xC0 | v26 & 0x3F;
    if (v22 || v20 || v19 || v18)
    {
      *(_WORD *)(a1 + 168)  = v27;
      *(_WORD *)(a1 + 17ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v25;
      ot::AsCoreType<otExtAddress>(v24);
      *(void *)(a1 + 17++*(_WORD *)(this + 4) = *v7;
      uint64_t v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)a1);
      ot::Radio::EnableCsl(v8, v27, v25, v24);
      IgnoreError();
      if (v22 || v18)
      {
        ot::TimerMicro::Stop((ot::TimerMicro *)(a1 + 208));
        *(_BYTE *)(a1 + 170) &= ~0x40u;
        if (*(_WORD *)(a1 + 168))
        {
          ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
          unsigned int Now = otPlatRadioGetNow();
          if (*v23) {
            int v11 = *v23;
          }
          else {
            int v11 = Now;
          }
          for (*uint64_t v23 = v11; ; *uint64_t v23 = v16)
          {
            unsigned int v16 = *v23 - 160 * *(unsigned __int16 *)(a1 + 168);
            if (v16 <= Now) {
              break;
            }
          }

          ot::Time::Time((ot::Time *)&v14, *v23);
          *(_DWORD *)(a1 + 18++*(_WORD *)(this + 4) = v14;
          ot::Mac::SubMac::HandleCslTimer((ot::Mac::SubMac *)a1);
        }
      }
    }
  }

  int Value = ot::Time::GetValue((ot::Time *)(a1 + 184));
  *uint64_t v23 = Value;
  return v17 & 1;
}

uint64_t ot::Radio::EnableCsl(ot::Radio *a1, unsigned int a2, unsigned __int16 a3, uint64_t a4)
{
  InstancePtr  = ot::Radio::GetInstancePtr(a1);
  return otPlatRadioEnableCsl((uint64_t)InstancePtr, a2, a3, a4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio9EnableCslEjtPK12otExtAddress(a1, a2, a3, a4);
}

uint64_t ot::Mac::SubMac::HandleCslTimer(ot::Mac::SubMac *this)
{
  unint64_t v43 = this;
  int v42 = 160 * *((unsigned __int16 *)this + 84);
  ot::Mac::SubMac::GetCslWindowEdges(this, &v41, &v40);
  if ((*((_BYTE *)this + 170) & 0x40) != 0)
  {
    *((_BYTE *)this + 170) &= ~0x40u;
    int v36 = ot::Time::operator-((_DWORD *)this + 46, v41);
    int v39 = v36;
    if (*((_BYTE *)this + 1) == 8)
    {
      uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::Sleep(v1);
      IgnoreError();
      int Now = ot::TimerMicro::GetNow(v2);
      uint64_t Value = ot::Time::GetValue((ot::Time *)&Now);
      char v4 = ot::ToUlong(Value);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "CSL sleep %lu", v5, v6, v7, v8, v9, v10, v4);
    }
  }

  else
  {
    if (ot::Mac::SubMac::RadioSupportsReceiveTiming(this))
    {
      ot::Time::operator+=((_DWORD *)this + 46, v42);
      v34  = ot::Time::operator-((_DWORD *)this + 46, v41);
      int v39 = v34;
      v41 -= 320;
    }

    else
    {
      int v33 = ot::Time::operator+((_DWORD *)this + 46, v40);
      int v39 = v33;
      *((_BYTE *)this + 170)  = *((_BYTE *)this + 170) & 0xBF | 0x40;
      ot::Time::operator+=((_DWORD *)this + 46, v42);
    }

    *((_WORD *)this + 100)  = v41 + v40;
    uint64_t v28 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v11 = ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 184));
    ot::Radio::UpdateCslSampleTime(v28, v11);
    if (ot::Mac::SubMac::RadioSupportsReceiveTiming(this) && *((_BYTE *)this + 1) && *((_BYTE *)this + 1) != 2)
    {
      int v12 = ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 184));
      *((_DWORD *)this + 4ot::Mle::Tlv::SetType(this, 9) = v12 - v42 - v41;
      char v13 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::ReceiveAt( v13,  *((_BYTE *)this + 170) & 0x3F,  *((_DWORD *)this + 49),  *((unsigned __int16 *)this + 100),  0);
      IgnoreError();
    }

    else if (*((_BYTE *)this + 1) == 8)
    {
      int v14 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::Receive(v14, *((_BYTE *)this + 170) & 0x3F);
      IgnoreError();
      v32  = ot::TimerMicro::GetNow(v15);
      uint64_t v16 = ot::Time::GetValue((ot::Time *)&v32);
      char v27 = ot::ToUlong(v16);
      ot::ToUlong(*((unsigned __int16 *)this + 100));
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SubMac",  "CSL sample %lu, duration %lu",  v17,  v18,  v19,  v20,  v21,  v22,  v27);
    }
  }

  ot::InstanceLocator::GetInstance(this);
  int v23 = otPlatRadioGetNow();
  uint64_t v24 = ot::Time::Time((ot::Time *)&v31, v23);
  v37  = v31;
  int v38 = ot::TimerMicro::GetNow(v24);
  if (ot::Time::operator>=(&v39, &v37))
  {
    int v25 = ot::Time::operator-(&v39, &v37);
    int v30 = ot::Time::operator+(&v38, v25);
  }

  else
  {
    int v30 = v38;
  }

  int v39 = v30;
  return ot::TimerMicro::FireAt((ot::Mac::SubMac *)((char *)this + 208), v30);
}

uint64_t ot::Mac::SubMac::GetCslWindowEdges(ot::Mac::SubMac *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v13 = 160 * *((unsigned __int16 *)this + 84) / 2;
  ot::InstanceLocator::GetInstance(this);
  int Now = otPlatRadioGetNow();
  uint64_t v7 = Now - ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 188));
  uint64_t v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  CslAccuracy  = ot::Radio::GetCslAccuracy(v3);
  int v11 = v7
  UncertaintyInMicrosec  = ot::Mac::CslAccuracy::GetUncertaintyInMicrosec((ot::Mac::SubMac *)((char *)this + 192));
  char v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  int v12 = v11 + 10 * ot::Radio::GetCslUncertainty(v4) + UncertaintyInMicrosec;
  *a2  = ot::Min<unsigned int>(v13, v12 + 512);
  uint64_t result = ot::Min<unsigned int>(v13, v12 + 5504);
  *a3  = result;
  return result;
}

_DWORD *ot::Time::operator+=(_DWORD *result, int a2)
{
  *result += a2;
  return result;
}

{
  return __ZN2ot4TimepLEj(result, a2);
}

void ot::Radio::UpdateCslSampleTime(ot::Radio *this, unsigned int a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  otPlatRadioUpdateCslSampleTime((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  __ZN2ot5Radio19UpdateCslSampleTimeEj(this, a2);
}

uint64_t ot::Radio::ReceiveAt( ot::Radio *this, unsigned __int8 a2, unsigned int a3, unsigned int a4, unsigned __int8 a5)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioReceiveAt((uint64_t)InstancePtr, a2, a3, a4, a5, v6, v7, v8);
}

{
  return __ZN2ot5Radio9ReceiveAtEhjjh(this, a2, a3, a4, a5);
}

uint64_t ot::Radio::GetCslAccuracy(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetCslAccuracy((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio14GetCslAccuracyEv(this);
}

uint64_t ot::Mac::CslAccuracy::GetClockAccuracy(ot::Mac::CslAccuracy *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Mac11CslAccuracy16GetClockAccuracyEv(this);
}

uint64_t ot::Mac::CslAccuracy::GetUncertaintyInMicrosec(ot::Mac::CslAccuracy *this)
{
  return (unsigned __int16)(10 * *((unsigned __int8 *)this + 1));
}

{
  return __ZNK2ot3Mac11CslAccuracy24GetUncertaintyInMicrosecEv(this);
}

uint64_t ot::Radio::GetCslUncertainty(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetCslUncertainty((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio17GetCslUncertaintyEv(this);
}

uint64_t ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
  return ot::Mac::SubMac::HandleTimer(v2);
}

ot::Appender *ot::Appender::Appender(ot::Appender *this, ot::Message *a2)
{
  *(_BYTE *)this  = 0;
  *((void *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  __int16 Length = ot::Message::GetLength(a2);
  uint64_t result = this;
  *((_WORD *)this + 8)  = Length;
  return result;
}

{
  ot::Appender::Appender(this, a2);
  return this;
}

ot::Appender *ot::Appender::Appender(ot::Appender *this, unsigned __int8 *a2, __int16 a3)
{
  *(_BYTE *)this  = 1;
  ot::FrameBuilder::Init((uint64_t)this + 8, a2, a3);
  return this;
}

{
  ot::Appender::Appender(this, a2, a3);
  return this;
}

uint64_t ot::Appender::AppendBytes(ot::Message **this, void *a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (*(_BYTE *)this)
  {
    if (*(_BYTE *)this == 1) {
      return ot::FrameBuilder::AppendBytes((ot::FrameBuilder *)(this + 1), a2, a3);
    }
  }

  else
  {
    return ot::Message::AppendBytes(this[1], (char *)a2, a3);
  }

  return v4;
}

uint64_t ot::Appender::GetAppendedLength(ot::Message **this)
{
  unsigned __int16 v2 = 0;
  if (*(_BYTE *)this)
  {
    if (*(_BYTE *)this == 1) {
      return (unsigned __int16)ot::FrameBuilder::GetLength((ot::FrameBuilder *)(this + 1));
    }
  }

  else
  {
    return (unsigned __int16)(ot::Message::GetLength(this[1]) - *((_WORD *)this + 8));
  }

  return v2;
}

uint64_t ot::Appender::GetAsData(uint64_t a1, uint64_t a2)
{
  uint64_t Bytes = ot::FrameBuilder::GetBytes((ot::FrameBuilder *)(a1 + 8));
  __int16 Length = ot::FrameBuilder::GetLength((ot::FrameBuilder *)(a1 + 8));
  return ot::Data<(ot::DataLengthType)1>::Init(a2, Bytes, Length);
}

uint64_t ot::FrameBuilder::GetBytes(ot::FrameBuilder *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot12FrameBuilder8GetBytesEv(this);
}

ot::Mac::SubMac::Callbacks *ot::Mac::SubMac::Callbacks::Callbacks( ot::Mac::SubMac::Callbacks *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Mac::SubMac::Callbacks::Callbacks(this, a2);
  return this;
}

void ot::Mac::SubMac::Callbacks::ReceiveDone(ot::InstanceLocator *a1, ot::Mac::Frame *a2, int a3)
{
  uint64_t v3 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
  if (ot::Mac::LinkRaw::IsEnabled(v3))
  {
    unsigned int v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
    ot::Mac::LinkRaw::InvokeReceiveDone(v4, (uint64_t)a2, a3);
  }

  else
  {
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    ot::Mac::Mac::HandleReceivedFrame(v5, a2, a3);
  }

uint64_t ot::Mac::SubMac::Callbacks::RecordCcaStatus(ot::Mac::SubMac::Callbacks *this, char a2, char a3)
{
  char v6 = a2 & 1;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  return ot::Mac::Mac::RecordCcaStatus(v3, v6 & 1, a3);
}

void ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus( ot::InstanceLocator *a1, ot::Mac::Frame *a2, ot::Mac::RxFrame *a3, int a4, unsigned __int8 a5, char a6)
{
  char v7 = a6 & 1;
  char v6 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  ot::Mac::Mac::RecordFrameTransmitStatus(v6, a2, a3, a4, a5, v7 & 1);
}

void ot::Mac::SubMac::Callbacks::TransmitDone( ot::InstanceLocator *a1, ot::Mac::Frame *a2, ot::Mac::Frame *a3, unsigned int a4)
{
  unsigned int v4 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
  if (ot::Mac::LinkRaw::IsEnabled(v4))
  {
    uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
    ot::Mac::LinkRaw::InvokeTransmitDone(v5, (uint64_t)a2, (uint64_t)a3, a4);
  }

  else
  {
    uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    ot::Mac::Mac::HandleTransmitDone(v6, a2, a3, a4);
  }

uint64_t ot::Mac::SubMac::Callbacks::EnergyScanDone(ot::Mac::SubMac::Callbacks *this, char a2)
{
  unsigned __int16 v2 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
  if (ot::Mac::LinkRaw::IsEnabled(v2))
  {
    uint64_t v3 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return ot::Mac::LinkRaw::InvokeEnergyScanDone(v3, a2);
  }

  else
  {
    uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    return ot::Mac::Mac::EnergyScanDone(v5, a2);
  }

void ot::Mac::SubMac::Callbacks::FrameCounterUsed(ot::Mac::SubMac::Callbacks *this, unsigned int a2)
{
  unsigned __int16 v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ot::KeyManager::MacFrameCounterUsed(v2, a2);
}

ot::AnnounceBeginClient *ot::AnnounceBeginClient::AnnounceBeginClient( ot::AnnounceBeginClient *this, ot::Instance *a2)
{
  return this;
}

{
  ot::AnnounceBeginClient::AnnounceBeginClient(this, a2);
  return this;
}

uint64_t ot::AnnounceBeginClient::SendRequest( ot::AnnounceBeginClient *this, int a2, unsigned __int8 a3, unsigned __int16 a4, const ot::Ip6::Address *a5)
{
  uint64_t v28 = this;
  int v27 = a2;
  unsigned __int8 v26 = a3;
  unsigned __int16 v25 = a4;
  uint64_t v24 = a5;
  inited  = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v21, Instance);
  uint64_t v20 = 0LL;
  uint64_t v6 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
  if (ot::MeshCoP::Commissioner::IsActive(v6))
  {
    char v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v20 = ot::Coap::CoapBase::NewPriorityMessage(v7);
    if (v20)
    {
      inited  = ot::Coap::Message::InitAsPost(v20, v24, 0xAu);
      if (!inited)
      {
        inited  = ot::Coap::Message::SetPayloadMarker(v20);
        if (!inited)
        {
          uint64_t v8 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
          SessionId  = ot::MeshCoP::Commissioner::GetSessionId(v8);
          inited  = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v20, SessionId);
          if (!inited)
          {
            ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v22);
            ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v22, v27);
            inited  = ot::Tlv::AppendTo((ot::Tlv *)v22, v20);
            if (!inited)
            {
              inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>((uint64_t)v20, v26);
              if (!inited)
              {
                inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>((uint64_t)v20, v25);
                if (!inited)
                {
                  ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v21, (__n128 *)v24);
                  uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                  inited  = ot::Coap::CoapBase::SendMessage(v10, v20, (const ot::Ip6::MessageInfo *)v21);
                  if (!inited)
                  {
                    char v11 = ot::UriToString<(ot::Uri)10>();
                    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshCoP",  "Sent %s",  v12,  v13,  v14,  v15,  v16,  v17,  v11);
                  }
                }
              }
            }
          }
        }
      }
    }

    else
    {
      inited  = 3;
    }
  }

  else
  {
    inited  = 13;
  }

  if (inited && v20) {
    ot::Message::Free(v20);
  }
  return inited;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::Commissioner>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP12CommissionerEEERT_v(a1);
}

BOOL ot::MeshCoP::Commissioner::IsActive(ot::MeshCoP::Commissioner *this)
{
  return *((_BYTE *)this + 554) == 2;
}

{
  return __ZNK2ot7MeshCoP12Commissioner8IsActiveEv(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 11, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP24CommissionerSessionIdTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::MeshCoP::ChannelMaskTlv::Init(ot::MeshCoP::ChannelMaskTlv *this)
{
  uint64_t result = ot::Tlv::SetLength((uint64_t)this, 6);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_WORD *)this + 3)  = 0;
  return result;
}

{
  return __ZN2ot7MeshCoP14ChannelMaskTlv4InitEv(this);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 54, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh54EhEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 55, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh55EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

_BYTE *ot::MeshCoP::Tlv::SetType(_BYTE *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return __ZN2ot7MeshCoP3Tlv7SetTypeENS1_4TypeE(a1, a2);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)0>( ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void ot::Logger::LogVarArgs(ot *a1, unsigned __int8 a2, const char *a3, va_list a4)
{
  if (*(_BYTE *)a1 == 82 && *((_BYTE *)a1 + 1) == 99 && *((_BYTE *)a1 + 2) == 112)
  {
    logging_obg  = (ot::Instance *)log_get_logging_obg("com.apple.rcp", "default");
    uint64_t v14 = logging_obg;
  }

  else
  {
    logging_obg  = (ot::Instance *)log_get_logging_obg("com.apple.openthread", "default");
    uint64_t v14 = logging_obg;
  }

  uint64_t v5 = ot::Instance::Get(logging_obg);
  uint64_t v6 = (ot::Uptime *)ot::Instance::Get<ot::Uptime>((uint64_t)v5);
  Uptime  = ot::Uptime::GetUptime(v6);
  ot::Uptime::UptimeToString(Uptime, (ot::StringWriter *)v22, (ot::StringWriter *)1);
  uint64_t v8 = ot::StringWriter::Append((ot::StringWriter *)v22, " ");
  if (a2 <= (int)ot::Instance::GetLogLevel(v8))
  {
    ot::StringWriter::Append( (ot::StringWriter *)v22,  "[%c] ",  ot::Logger::LogVarArgs(char const*,ot::LogLevel,char const*,char *)::kLevelChars[a2]);
    unsigned __int16 v9 = ot::StringLength(a1, (const char *)0xE);
    ot::StringWriter::Append( (ot::StringWriter *)v22,  "%.*s%s: ",  14,  (const char *)a1,  &ot::Logger::LogVarArgs(char const*,ot::LogLevel,char const*,char *)::kModuleNamePadding[v9]);
    ot::StringWriter::AppendVarArgs((ot::StringWriter *)v22, a3, a4);
    ot::StringWriter::Append((ot::StringWriter *)v22, "%s", "");
    if (a2 <= 2u)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = ot::String<(unsigned short)1024>::AsCString((uint64_t)v22);
        __os_log_helper_16_3_1_8_33((uint64_t)v21, v11);
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{private}s", v21, 0xCu);
      }
    }

    else if (a2 == 4 || a2 == 3)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = ot::String<(unsigned short)1024>::AsCString((uint64_t)v22);
        __os_log_helper_16_3_1_8_33((uint64_t)v20, v12);
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%{private}s", v20, 0xCu);
      }
    }

    else
    {
      if (a2 != 5) {
        __assert_rtn("LogVarArgs", "log.cpp", 181, "false");
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = ot::String<(unsigned short)1024>::AsCString((uint64_t)v22);
        __os_log_helper_16_3_1_8_33((uint64_t)v19, v13);
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%{private}s", v19, 0xCu);
      }
    }
  }

void ot::Logger::LogAtLevel<(ot::LogLevel)1>( ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  __ZN2ot6Logger10LogAtLevelILNS_8LogLevelE1EEEvPKcS4_z(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)2>( ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  __ZN2ot6Logger10LogAtLevelILNS_8LogLevelE2EEEvPKcS4_z(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)3>( ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  __ZN2ot6Logger10LogAtLevelILNS_8LogLevelE3EEEvPKcS4_z(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)4>( ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  __ZN2ot6Logger10LogAtLevelILNS_8LogLevelE4EEEvPKcS4_z(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)5>( ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  __ZN2ot6Logger10LogAtLevelILNS_8LogLevelE5EEEvPKcS4_z(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)0>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpInModule(ot *a1, unsigned __int8 a2, ot *a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v23 = ot::StringLength(a3, (const char *)0x3E) + 10;
  uint64_t v5 = (ot::Instance *)ot::String<(unsigned short)80>::String((uint64_t)v29);
  if ((int)otLoggingGetLevel(v5) >= a2)
  {
    ot::StringWriter::Append((ot::StringWriter *)v29, "[%s len=%03u]", (const char *)a3, a5);
    char v6 = ot::String<(unsigned short)80>::AsCString((uint64_t)v29);
    ot::Logger::LogInModule(a1, a2, "%s", v7, v8, v9, v10, v11, v6);
    for (unsigned __int16 k = 0; k < (int)a5; k += 16)
    {
      unsigned __int8 v12 = ot::Min<unsigned char>(a5 - k, 0x10u);
      ot::Logger::DumpLine(a1, a2, a4 + k, v12);
    }

    ot::StringWriter::Clear((uint64_t)v29);
    for (m  = 0; m < 0x48u; ++m)
      ot::StringWriter::Append((ot::StringWriter *)v29, "-");
    char v13 = ot::String<(unsigned short)80>::AsCString((uint64_t)v29);
    ot::Logger::LogInModule(a1, a2, "%s", v14, v15, v16, v17, v18, v13);
  }

void ot::Logger::DumpAtLevel<(ot::LogLevel)1>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)2>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)3>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)4>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)5>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

{
  __ZN2ot6Logger11DumpAtLevelILNS_8LogLevelE5EEEvPKcS4_PKvt(a1, a2, a3, a4);
}

void ot::Logger::LogInModule( ot *a1, unsigned __int8 a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t ot::String<(unsigned short)1024>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 1024);
  return a1;
}

uint64_t ot::String<(unsigned short)1024>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt1024EE9AsCStringEv(a1);
}

uint64_t __os_log_helper_16_3_1_8_33(uint64_t result, uint64_t a2)
{
  *(_BYTE *)uint64_t result = 3;
  *(_BYTE *)(result + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 1;
  *(_BYTE *)(result + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 33;
  *(_BYTE *)(result + 3)  = 8;
  *(void *)(result + ++*(_WORD *)(this + 4) = a2;
  return result;
}

void ot::Logger::DumpLine(ot *a1, unsigned __int8 a2, uint64_t a3, unsigned __int16 a4)
{
  for (_c_3  = 0; _c_3 < 0x10u; ++_c_3)
  {
    else {
      ot::StringWriter::Append((ot::StringWriter *)v18, " %02X", *(unsigned __int8 *)(a3 + _c_3));
    }
    if (!((_c_3 + 1) % 8)) {
      ot::StringWriter::Append((ot::StringWriter *)v18, " |");
    }
  }

  ot::StringWriter::Append((ot::StringWriter *)v18, " ");
  for (_c_2  = 0; _c_2 < 0x10u; ++_c_2)
  {
    _c_1  = 46;
    if (_c_2 < (int)a4)
    {
      _c  = *(_BYTE *)(a3 + _c_2) & 0x7F;
    }

    ot::StringWriter::Append((ot::StringWriter *)v18, "%c", _c_1);
  }

  char v4 = ot::String<(unsigned short)80>::AsCString((uint64_t)v18);
  ot::Logger::LogInModule(a1, a2, "%s", v5, v6, v7, v8, v9, v4);
}

uint64_t ot::String<(unsigned short)80>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 80);
  return a1;
}

int isprint(int _c)
{
  return __istype(_c, 0x40000uLL);
}

{
  return __Z7isprinti(_c);
}

uint64_t ot::String<(unsigned short)80>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt80EE9AsCStringEv(a1);
}

void *ot::MeshCoP::BorderAgent::ForwardContext::Init( ot::MeshCoP::BorderAgent::ForwardContext *this, ot::Instance *a2, const ot::Coap::Message *a3, char a4, char a5)
{
  char v9 = a4 & 1;
  char v8 = a5 & 1;
  ot::InstanceLocatorInit::Init(this, a2);
  *(_WORD *)this  = ot::Coap::Message::GetMessageId(a3);
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 2) & 0xFE | v9 & 1;
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 2) & 0xFD | (2 * (v8 & 1));
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 2) & 0x3F | ((ot::Coap::Message::GetType(a3) & 3) << 6);
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 2) & 0xC3 | (4 * (ot::Coap::Message::GetTokenLength(a3) & 0xF));
  Token  = (const void *)ot::Coap::Message::GetToken(a3);
  return memcpy((char *)this + 3, Token, (*((_BYTE *)this + 2) >> 2) & 0xF);
}

void ot::MeshCoP::BorderAgent::HandleTimeout(ot::MeshCoP::BorderAgent *this)
{
  uint64_t v1 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  if (ot::Coap::CoapSecure::IsConnected(v1))
  {
    unsigned __int16 v2 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    ot::Coap::CoapSecure::Disconnect(v2);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"BorderAgent",  "Reset commissioner session",  v3,  v4,  v5,  v6,  v7,  v8,  (char)this);
  }

uint64_t ot::MeshCoP::BorderAgent::ForwardContext::ToHeader( ot::MeshCoP::BorderAgent::ForwardContext *this, ot::Coap::Message *a2, char a3)
{
  if (*((_BYTE *)this + 2) >> 6 == 1 || (*((_BYTE *)this + 2) & 2) != 0) {
    ot::Coap::Message::Init(a2, 1, a3);
  }
  else {
    ot::Coap::Message::Init(a2, 2, a3);
  }
  if ((*((_BYTE *)this + 2) & 2) == 0) {
    ot::Coap::Message::SetMessageId(a2, *(_WORD *)this);
  }
  return ot::Coap::Message::SetToken(a2, (const unsigned __int8 *)this + 3, (*((_BYTE *)this + 2) >> 2) & 0xF);
}

uint64_t ot::MeshCoP::BorderAgent::CoapCodeFromError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 6) {
      return 0x80;
    }
    else {
      return -96;
    }
  }

  else
  {
    return 68;
  }

void ot::MeshCoP::BorderAgent::SendErrorMessage( ot::InstanceLocator *a1, ot::MeshCoP::BorderAgent::ForwardContext *a2, int a3)
{
  uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
  char v9 = ot::Coap::CoapBase::NewPriorityMessage(v3);
  if (v9)
  {
    char v4 = ot::MeshCoP::BorderAgent::CoapCodeFromError((uint64_t)a1, a3);
    int v10 = ot::MeshCoP::BorderAgent::ForwardContext::ToHeader(a2, v9, v4);
    if (!v10)
    {
      uint64_t v7 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      uint64_t v5 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v5);
      int v10 = ot::Coap::CoapSecure::SendMessage(v7, v9, MessageInfo, 0LL, 0LL);
    }
  }

  else
  {
    int v10 = 3;
  }

  if (v10 && v9) {
    ot::Message::Free(v9);
  }
  ot::MeshCoP::LogError((char)"send error CoAP message", v10);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Tmf::SecureAgent>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Tmf11SecureAgentEEERT_v(a1);
}

uint64_t ot::Coap::CoapSecure::GetMessageInfo(ot::Coap::CoapSecure *this)
{
  return ot::MeshCoP::Dtls::GetMessageInfo((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return __ZNK2ot4Coap10CoapSecure14GetMessageInfoEv(this);
}

void ot::MeshCoP::BorderAgent::SendErrorMessage( ot::InstanceLocator *a1, ot::Coap::Message *a2, char a3, int a4)
{
  char v15 = a3 & 1;
  char v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
  unsigned __int8 v12 = ot::Coap::CoapBase::NewPriorityMessage(v4);
  if (v12)
  {
    if (ot::Coap::Message::IsNonConfirmable(a2) || (v15 & 1) != 0)
    {
      char v5 = ot::MeshCoP::BorderAgent::CoapCodeFromError((uint64_t)a1, a4);
      ot::Coap::Message::Init(v12, 1, v5);
    }

    else
    {
      char v6 = ot::MeshCoP::BorderAgent::CoapCodeFromError((uint64_t)a1, a4);
      ot::Coap::Message::Init(v12, 2, v6);
    }

    if ((v15 & 1) == 0)
    {
      MessageId  = ot::Coap::Message::GetMessageId(a2);
      ot::Coap::Message::SetMessageId(v12, MessageId);
    }

    int v13 = ot::Coap::Message::SetTokenFromMessage(v12, a2);
    if (!v13)
    {
      int v10 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      uint64_t v8 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v8);
      int v13 = ot::Coap::CoapSecure::SendMessage(v10, v12, MessageInfo, 0LL, 0LL);
    }
  }

  else
  {
    int v13 = 3;
  }

  if (v13 && v12) {
    ot::Message::Free(v12);
  }
  ot::MeshCoP::LogError((char)"send error CoAP message", v13);
}

unsigned __int16 *ot::MeshCoP::BorderAgent::HandleCoapResponse( ot::InstanceLocator *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
  ot::AsCoapMessagePtr();
  return ot::MeshCoP::BorderAgent::HandleCoapResponse(v6, a1, v4, a4);
}

unsigned __int16 *ot::MeshCoP::BorderAgent::HandleCoapResponse( uint64_t a1, ot::MeshCoP::BorderAgent::ForwardContext *a2, ot::Tlv *a3, int a4)
{
  uint64_t v41 = a1;
  unsigned int v40 = a2;
  int v39 = a3;
  int v38 = a4;
  v37  = 0LL;
  int v36 = a4;
  if (!a4)
  {
    char v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
    v37  = ot::Coap::CoapBase::NewPriorityMessage(v4);
    if (!v37)
    {
      int v36 = 3;
      goto LABEL_14;
    }

    if ((ot::MeshCoP::BorderAgent::ForwardContext::IsPetition(v40) & 1) != 0
      && ot::Coap::Message::GetCode(v39) == 68)
    {
      int v36 = ot::Tlv::Find<ot::MeshCoP::StateTlv>(v39, &v35, v5, v6);
      if (v36) {
        goto LABEL_14;
      }
      if (v35 == 1)
      {
        int v36 = ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v39, &v34, v7, v8);
        if (v36) {
          goto LABEL_14;
        }
        int v31 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
        ot::Mle::Mle::GetCommissionerAloc(v31, v9, v34);
        IgnoreError();
        int v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
        ot::Ip6::Netif::AddUnicastAddress(v10, (ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
        uint64_t v11 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>((ot::InstanceLocator *)a1);
        ot::Ip6::Udp::AddReceiver(v11, (ot::Ip6::Udp::Receiver *)(a1 + 56));
        IgnoreError();
        v32  = v34;
        ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
        ot::Ip6::Address::ToString(v12, (ot::StringWriter *)v42);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v42);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "commissioner accepted: session ID=%d, ALOC=%s",  v13,  v14,  v15,  v16,  v17,  v18,  v32);
      }
    }

    int v30 = v40;
    uint64_t v29 = v37;
    Code  = ot::Coap::Message::GetCode(v39);
    int v36 = ot::MeshCoP::BorderAgent::ForwardContext::ToHeader(v30, v29, Code);
    if (!v36)
    {
      int Length = (unsigned __int16)ot::Message::GetLength(v39);
      if (Length <= (unsigned __int16)ot::Message::GetOffset(v39)
        || (int v36 = ot::Coap::Message::SetPayloadMarker(v37)) == 0)
      {
        int v36 = ot::MeshCoP::BorderAgent::ForwardToCommissioner((ot::MeshCoP::BorderAgent *)a1, v37, v39);
      }
    }
  }

uint64_t ot::MeshCoP::BorderAgent::ForwardContext::IsPetition(ot::MeshCoP::BorderAgent::ForwardContext *this)
{
  return *((_BYTE *)this + 2) & 1;
}

{
  return __ZNK2ot7MeshCoP11BorderAgent14ForwardContext10IsPetitionEv(this);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::StateTlv>(ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x10u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP8StateTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0xBu, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP24CommissionerSessionIdTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE( a1,  a2,  a3,  a4);
}

uint64_t ot::Mle::Mle::GetCommissionerAloc(ot::Mle::Mle *this, ot::Ip6::Address *a2, unsigned __int16 a3)
{
  unsigned __int16 v3 = ot::Mle::CommissionerAloc16FromId((ot::Mle *)a3);
  return ot::Mle::Mle::GetLocatorAddress(this, a2, v3);
}

{
  return __ZNK2ot3Mle3Mle19GetCommissionerAlocERNS_3Ip67AddressEt(this, a2, a3);
}

uint64_t ot::MeshCoP::BorderAgent::ForwardToCommissioner( ot::MeshCoP::BorderAgent *this, ot::Coap::Message *a2, const ot::Message *a3)
{
  Offset  = ot::Message::GetOffset(a3);
  __int16 Length = ot::Message::GetLength(a3);
  __int16 v3 = ot::Message::GetOffset(a3);
  unsigned int appended = ot::Message::AppendBytesFromMessage(a2, a3, Offset, Length - v3);
  if (!appended)
  {
    uint64_t v14 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    char v4 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v4);
    unsigned int appended = ot::Coap::CoapSecure::SendMessage(v14, a2, MessageInfo, 0LL, 0LL);
    if (!appended) {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Sent to commissioner",  v6,  v7,  v8,  v9,  v10,  v11,  v13);
    }
  }

  ot::MeshCoP::LogError((char)"send to commissioner", appended);
  return appended;
}

uint64_t ot::MeshCoP::BorderAgent::ForwardContext::GetMessageId( ot::MeshCoP::BorderAgent::ForwardContext *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot7MeshCoP11BorderAgent14ForwardContext12GetMessageIdEv(this);
}

ot::MeshCoP::BorderAgent *ot::MeshCoP::BorderAgent::BorderAgent( ot::MeshCoP::BorderAgent *this, ot::Instance *a2)
{
  *((_BYTE *)this + 136)  = 0;
  *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
  *((_BYTE *)this + 156)  = 0;
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::MeshCoP::BorderAgent *)((char *)this + 80));
  return this;
}

{
  ot::MeshCoP::BorderAgent::BorderAgent(this, a2);
  return this;
}

BOOL ot::MeshCoP::BorderAgent::HandleUdpReceive(ot::MeshCoP::BorderAgent *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  return ot::MeshCoP::BorderAgent::HandleUdpReceive(a1, v6, v4);
}

void *ot::Ip6::Udp::Receiver::Receiver(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::BorderAgent,&ot::MeshCoP::BorderAgent::HandleTimeout>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::BorderAgent,&ot::MeshCoP::BorderAgent::HandleTimeout>::HandleTimer);
  return a1;
}

uint64_t ot::MeshCoP::BorderAgent::GetId( ot::MeshCoP::BorderAgent *this, unsigned __int8 *a2, unsigned __int16 *a3)
{
  unsigned int v9 = 0;
  if (*a3 >= 0x10uLL)
  {
    if ((*((_BYTE *)this + 156) & 1) != 0)
    {
      unsigned int v9 = 0;
    }

    else
    {
      __int16 v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
      if (!ot::Settings::Read<ot::SettingsBase::BorderAgentId>( v3,  (ot::MeshCoP::BorderAgent *)((char *)this + 140))
        || (ot::SettingsBase::BorderAgentId::GetId((ot::MeshCoP::BorderAgent *)((char *)this + 140)),
            ot::Random::NonCrypto::FillBuffer(v4, (unsigned __int8 *)0x10),
            uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this),
            (unsigned int v9 = ot::Settings::Save<ot::SettingsBase::BorderAgentId>(v5, (char *)this + 140)) == 0))
      {
        *((_BYTE *)this + 156)  = 1;
      }
    }
  }

  else
  {
    unsigned int v9 = 7;
  }

  if (!v9)
  {
    ot::SettingsBase::BorderAgentId::GetId((ot::MeshCoP::BorderAgent *)((char *)this + 140));
    *(_OWORD *)a2  = *v6;
    *a3  = 16;
  }

  return v9;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Settings>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_8SettingsEEERT_v(a1);
}

uint64_t ot::Settings::Read<ot::SettingsBase::BorderAgentId>( ot::InstanceLocator *a1, ot::SettingsBase::BorderAgentId *a2)
{
  return ot::Settings::ReadEntry(a1, 0x11u, a2, 0x10u);
}

  ;
}

{
  return __ZNK2ot8Settings4ReadINS_12SettingsBase13BorderAgentIdEEE7otErrorRT_(a1, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::BorderAgentId>(ot::InstanceLocator *a1, const void *a2)
{
  return ot::Settings::SaveEntry(a1, 17, a2, (uint64_t)v3, 0x10u);
}

{
  return __ZN2ot8Settings4SaveINS_12SettingsBase13BorderAgentIdEEE7otErrorRKT_(a1, a2);
}

void ot::MeshCoP::BorderAgent::HandleNotifierEvents(ot::InstanceLocator *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v5, 8388612LL))
  {
    unsigned __int16 v2 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
    if (ot::MeshCoP::Commissioner::IsDisabled(v2))
    {
      __int16 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      if (ot::Mle::Mle::IsAttached(v3)) {
        ot::MeshCoP::BorderAgent::Start(a1);
      }
      else {
        ot::MeshCoP::BorderAgent::Stop(a1);
      }
    }
  }

BOOL ot::MeshCoP::Commissioner::IsDisabled(ot::MeshCoP::Commissioner *this)
{
  return *((_BYTE *)this + 554) == 0;
}

{
  return __ZNK2ot7MeshCoP12Commissioner10IsDisabledEv(this);
}

void ot::MeshCoP::BorderAgent::Start(ot::MeshCoP::BorderAgent *this)
{
  if (*((_BYTE *)this + 136))
  {
    int v19 = 0;
  }

  else
  {
    uint64_t v1 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::KeyManager::GetPskc(v1, &v20);
    unsigned __int16 v2 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    int v19 = ot::Coap::CoapSecure::Start(v2, 0);
    if (!v19)
    {
      __int16 v3 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
      int v19 = ot::Coap::CoapSecure::SetPsk(v3, (const unsigned __int8 *)&v20, 0x10u);
      if (!v19)
      {
        ot::Clearable<ot::Pskc>::Clear(&v20);
        char v4 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
        ot::Coap::CoapSecure::SetConnectedCallback( v4,  (void (*)(BOOL, void *))ot::MeshCoP::BorderAgent::HandleConnected,  (uint64_t)this);
        *((_BYTE *)this + 136)  = 1;
        *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
        UdpPort  = ot::MeshCoP::BorderAgent::GetUdpPort(this);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Border Agent start listening on port %u",  v6,  v7,  v8,  v9,  v10,  v11,  UdpPort);
      }
    }
  }

  if (v19)
  {
    ot::ErrorToString(v19);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"BorderAgent",  "failed to start Border Agent on port %d: %s",  v12,  v13,  v14,  v15,  v16,  v17,  0);
  }

void ot::MeshCoP::BorderAgent::Stop(ot::MeshCoP::BorderAgent *this)
{
  if (*((_BYTE *)this + 136))
  {
    ot::TimerMilli::Stop((ot::MeshCoP::BorderAgent *)((char *)this + 112));
    uint64_t v1 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    ot::Coap::CoapSecure::Stop(v1);
    *((_BYTE *)this + 136)  = 0;
    *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Border Agent stopped",  v2,  v3,  v4,  v5,  v6,  v7,  (char)this);
  }

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)31>(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v36 = a1;
  v35  = a2;
  v34  = a3;
  TlvValueOffset  = 0;
  v32  = 0LL;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v31);
  if (*(_BYTE *)(a1 + 136))
  {
    TlvValueOffset  = ot::Tlv::FindTlvValueOffset(v35, (const ot::Message *)0x30, &v30, &v29, v3);
    if (!TlvValueOffset)
    {
      TlvValueOffset  = ot::Message::Read<ot::MeshCoP::UdpEncapsulationTlvHeader>(v35, v30, v28);
      if (!TlvValueOffset)
      {
        v30 += 4;
        v29 -= 4;
        __int16 SourcePort = ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
        if (v5 | (SourcePort == 0)) {
          char v6 = 1;
        }
        else {
          char v6 = 0;
        }
        if ((v6 & 1) == 0
          && ((__int16 v7 = ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28),
               v5 | (v7 == 0))
            ? (char v8 = 0)
            : (char v8 = 1),
              (v8 & 1) != 0))
        {
          uint64_t v9 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>((ot::InstanceLocator *)a1);
          v32  = ot::Ip6::Udp::NewMessage(v9);
          if (v32)
          {
            TlvValueOffset  = ot::Message::AppendBytesFromMessage(v32, v35, v30, v29);
            if (!TlvValueOffset)
            {
              __int16 v10 = ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
              ot::Ip6::MessageInfo::SetSockPort((uint64_t)v31, v10);
              ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
              ot::Ip6::MessageInfo::SetSockAddr(v31, v11);
              __int16 DestinationPort = ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
              ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v31, DestinationPort);
              unsigned __int8 v26 = v35;
              ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v31);
              TlvValueOffset  = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>( v26,  v13,  v14,  v15,  v16);
              if (!TlvValueOffset)
              {
                uint64_t v17 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>((ot::InstanceLocator *)a1);
                TlvValueOffset  = ot::Ip6::Udp::SendDatagram(v17, v32, (ot::Ip6::MessageInfo *)v31, 0x11u);
                if (!TlvValueOffset)
                {
                  *(_WORD *)(a1 + 138)  = ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
                  ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v31);
                  ot::Ip6::Address::ToString(v18, (ot::StringWriter *)v37);
                  char v19 = ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Proxy transmit sent to %s",  v20,  v21,  v22,  v23,  v24,  v25,  v19);
                }
              }
            }
          }

          else
          {
            TlvValueOffset  = 3;
          }
        }

        else
        {
          TlvValueOffset  = 2;
        }
      }
    }
  }

  if (TlvValueOffset && v32) {
    ot::Message::Free(v32);
  }
  ot::MeshCoP::LogError((char)"send proxy stream", TlvValueOffset);
}

uint64_t ot::Message::Read<ot::MeshCoP::UdpEncapsulationTlvHeader>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP25UdpEncapsulationTlvHeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort(ot::MeshCoP::UdpEncapsulationTlvHeader *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return __ZNK2ot7MeshCoP25UdpEncapsulationTlvHeader13GetSourcePortEv(this);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort( ot::MeshCoP::UdpEncapsulationTlvHeader *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot7MeshCoP25UdpEncapsulationTlvHeader18GetDestinationPortEv(this);
}

uint64_t ot::Ip6::MessageInfo::SetSockPort(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot3Ip611MessageInfo11SetSockPortEt(this, a2);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x31, a2, (void *)0x10, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh49ENS_3Ip67AddressEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

BOOL ot::MeshCoP::BorderAgent::HandleUdpReceive( ot::MeshCoP::BorderAgent *this, const ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v47 = this;
  uint64_t v46 = a2;
  int v45 = a3;
  unint64_t v43 = 0LL;
  ot::Ip6::MessageInfo::GetSockAddr(a3);
  int v39 = v3;
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::MeshCoP::BorderAgent *)((char *)this + 80));
  if (ot::Unequatable<ot::Ip6::Address>::operator!=(v39, v4))
  {
    ot::Ip6::MessageInfo::GetSockAddr(v45);
    ot::Ip6::Address::ToString(v5, (ot::StringWriter *)v49);
    v37  = ot::String<(unsigned short)40>::AsCString((uint64_t)v49);
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::MeshCoP::BorderAgent *)((char *)this + 80));
    ot::Ip6::Address::ToString(v6, (ot::StringWriter *)v48);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v48);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"BorderAgent",  "Filtered out message for commissioner: dest %s != %s (ALOC)",  v7,  v8,  v9,  v10,  v11,  v12,  v37);
    int appended = 22;
  }

  else
  {
    __int16 Length = ot::Message::GetLength(v46);
    if (v14 | (Length == 0)) {
      char v15 = 0;
    }
    else {
      char v15 = 1;
    }
    if ((v15 & 1) != 0)
    {
      uint64_t v16 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
      unint64_t v43 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v16, 0x1Eu);
      if (v43)
      {
        __int16 v36 = ot::Message::GetLength(v46);
        unsigned __int16 v40 = v36 - ot::Message::GetOffset(v46);
        ot::MeshCoP::ExtendedTlv::SetType(v42, 48);
        ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v42, v40 + 4);
        int appended = ot::Message::Append<ot::MeshCoP::ExtendedTlv>(v43, v42);
        if (!appended)
        {
          PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v45);
          ot::MeshCoP::UdpEncapsulationTlvHeader::SetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v41, PeerPort);
          SockPort  = ot::Ip6::MessageInfo::GetSockPort(v45);
          ot::MeshCoP::UdpEncapsulationTlvHeader::SetDestinationPort( (ot::MeshCoP::UdpEncapsulationTlvHeader *)v41,  SockPort);
          int appended = ot::Message::Append<ot::MeshCoP::UdpEncapsulationTlvHeader>(v43, v41);
          if (!appended)
          {
            v35  = v43;
            v34  = v46;
            Offset  = ot::Message::GetOffset(v46);
            int appended = ot::Message::AppendBytesFromMessage(v35, v34, Offset, v40);
            if (!appended)
            {
              int v33 = v43;
              ot::Ip6::MessageInfo::GetPeerAddr(v45);
              int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(v33, v20);
              if (!appended)
              {
                v32  = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
                int v31 = v43;
                uint64_t v21 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
                MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v21);
                int appended = ot::Coap::CoapSecure::SendMessage(v32, v31, MessageInfo, 0LL, 0LL);
                if (!appended) {
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Sent to commissioner on ProxyRx (c/ur)",  v23,  v24,  v25,  v26,  v27,  v28,  v30);
                }
              }
            }
          }
        }
      }

      else
      {
        int appended = 3;
      }
    }

    else
    {
      int appended = 0;
    }
  }

  if (appended && v43) {
    ot::Message::Free(v43);
  }
  if (appended != 22) {
    ot::MeshCoP::LogError((char)"Notify commissioner on ProxyRx (c/ur)", appended);
  }
  return appended != 22;
}

_BYTE *ot::MeshCoP::ExtendedTlv::SetType(_BYTE *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return __ZN2ot7MeshCoP11ExtendedTlv7SetTypeENS0_3Tlv4TypeE(a1, a2);
}

uint64_t ot::ExtendedTlv::SetLength(ot::ExtendedTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot11ExtendedTlv9SetLengthEt(this, a2);
}

uint64_t ot::Message::Append<ot::MeshCoP::ExtendedTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendINS_7MeshCoP11ExtendedTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::SetSourcePort( ot::MeshCoP::UdpEncapsulationTlvHeader *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot7MeshCoP25UdpEncapsulationTlvHeader13SetSourcePortEt(this, a2);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::SetDestinationPort( ot::MeshCoP::UdpEncapsulationTlvHeader *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP25UdpEncapsulationTlvHeader18SetDestinationPortEt(this, a2);
}

uint64_t ot::Message::Append<ot::MeshCoP::UdpEncapsulationTlvHeader>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendINS_7MeshCoP25UdpEncapsulationTlvHeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x31, a2, (const void *)0x10);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh49ENS_3Ip67AddressEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)28>(ot::InstanceLocator *a1, const ot::Message *a2)
{
  uint64_t v11 = 0LL;
  int v10 = 0;
  if (*((_BYTE *)a1 + 136))
  {
    if (ot::Coap::Message::IsNonConfirmablePostRequest(a2))
    {
      uint64_t v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      uint64_t v11 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v2, 0x1Cu);
      if (v11)
      {
        int v10 = ot::MeshCoP::BorderAgent::ForwardToCommissioner(a1, v11, a2);
        if (!v10) {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Sent to commissioner on RelayRx (c/rx)",  v3,  v4,  v5,  v6,  v7,  v8,  (char)a1);
        }
      }

      else
      {
        int v10 = 3;
      }
    }

    else
    {
      int v10 = 2;
    }
  }

  if (v10)
  {
    if (v11) {
      ot::Message::Free(v11);
    }
  }

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)15>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

uint64_t ot::MeshCoP::BorderAgent::ForwardToLeader( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  int v33 = a1;
  v32  = a2;
  int v31 = a3;
  unsigned __int8 v30 = a4;
  unsigned int appended = 0;
  uint64_t v28 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v27, Instance);
  uint64_t v26 = 0LL;
  char v25 = 0;
  char v24 = 0;
  if (*((_BYTE *)a1 + 136))
  {
    if (v30 == 22)
    {
      char v24 = 1;
    }

    else if (v30 == 23)
    {
      char v25 = 1;
      char v24 = 1;
    }

    if ((v24 & 1) == 0
      || (uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1),
          (unsigned int appended = ot::Coap::CoapBase::SendAck(v5, v32, v31)) == 0))
    {
      uint64_t v28 = (ot::Heap *)ot::Heap::CAlloc((ot::Heap *)1, 12);
      if (v28)
      {
        uint64_t v22 = v28;
        uint64_t v6 = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
        ot::MeshCoP::BorderAgent::ForwardContext::Init(v22, v6, v32, v25 & 1, v24 & 1);
        uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        uint64_t v26 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v7, v30);
        if (v26)
        {
          uint64_t v20 = v32;
          Offset  = ot::Message::GetOffset(v32);
          __int16 Length = ot::Message::GetLength(v32);
          __int16 v8 = ot::Message::GetOffset(v32);
          unsigned int appended = ot::Message::AppendBytesFromMessage(v26, v20, Offset, Length - v8);
          if (!appended)
          {
            unsigned int appended = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v27);
            if (!appended)
            {
              ot::Tmf::MessageInfo::SetSockPortToTmf((ot::Tmf::MessageInfo *)v27);
              uint64_t v9 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
              unsigned int appended = ot::Coap::CoapBase::SendMessage( v9,  v26,  (ot::Ip6::MessageInfo *)v27,  (uint64_t)ot::MeshCoP::BorderAgent::HandleCoapResponse,  (uint64_t)v28);
              if (!appended)
              {
                uint64_t v28 = 0LL;
                char v10 = ot::PathForUri(v30);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Forwarded request to leader on %s",  v11,  v12,  v13,  v14,  v15,  v16,  v10);
              }
            }
          }
        }

        else
        {
          unsigned int appended = 3;
        }
      }

      else
      {
        unsigned int appended = 3;
      }
    }
  }

  ot::MeshCoP::LogError((char)"forward to leader", appended);
  if (appended)
  {
    if (v28) {
      ot::Heap::Free(v28, v17);
    }
    if (v26) {
      ot::Message::Free(v26);
    }
    ot::MeshCoP::BorderAgent::SendErrorMessage(a1, v32, v24 & 1, appended);
  }

  return appended;
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)14>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)16>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)11>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)12>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)25>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)27>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

ot::InstanceLocator *ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)13>( ot::InstanceLocator *result, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = result;
  if (*((_BYTE *)result + 136))
  {
    uint64_t result = (ot::InstanceLocator *)ot::MeshCoP::BorderAgent::ForwardToLeader(result, a2, a3, 0x16u);
    if (!(_DWORD)result) {
      return (ot::InstanceLocator *)ot::TimerMilli::Start((ot::InstanceLocator *)((char *)v3 + 112), 0xC350u);
    }
  }

  return result;
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)29>(ot::InstanceLocator *a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v26 = a1;
  char v25 = a2;
  uint64_t v24 = a3;
  int appended = 0;
  uint64_t v21 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v20, Instance);
  if (*((_BYTE *)a1 + 136))
  {
    if (ot::Coap::Message::IsNonConfirmablePostRequest(v25))
    {
      int appended = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(v25, &v22, v4, v5);
      if (!appended)
      {
        uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        uint64_t v21 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v6, 0x1Du);
        if (v21)
        {
          uint64_t v18 = v21;
          uint64_t v16 = v25;
          Offset  = ot::Message::GetOffset(v25);
          __int16 Length = ot::Message::GetLength(v25);
          __int16 v7 = ot::Message::GetOffset(v25);
          int appended = ot::Message::AppendBytesFromMessage(v18, v16, Offset, Length - v7);
          if (!appended)
          {
            ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v20, v22);
            ot::Tmf::MessageInfo::SetSockPortToTmf((ot::Tmf::MessageInfo *)v20);
            __int16 v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
            int appended = ot::Coap::CoapBase::SendMessage(v8, v21, (const ot::Ip6::MessageInfo *)v20);
            if (!appended) {
              ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Sent to joiner router request on RelayTx (c/tx)",  v9,  v10,  v11,  v12,  v13,  v14,  (char)v20);
            }
          }
        }

        else
        {
          int appended = 3;
        }
      }
    }
  }

  if (appended && v21) {
    ot::Message::Free(v21);
  }
  ot::MeshCoP::LogError((char)"send to joiner router request RelayTx (c/tx)", appended);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x14u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh20EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tmf::MessageInfo::SetSockPortToTmf(ot::Tmf::MessageInfo *this)
{
  return ot::Ip6::MessageInfo::SetSockPort((uint64_t)this, 61631);
}

{
  return __ZN2ot3Tmf11MessageInfo16SetSockPortToTmfEv(this);
}

uint64_t ot::MeshCoP::BorderAgent::HandleConnected( ot::MeshCoP::BorderAgent *this, ot::MeshCoP::BorderAgent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::BorderAgent::HandleConnected(a2, this & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::BorderAgent::HandleConnected( ot::MeshCoP::BorderAgent *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 1) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Commissioner connected", a3, a4, a5, a6, a7, a8, v11);
    *((_BYTE *)this + 136)  = 2;
    return ot::TimerMilli::Start((ot::MeshCoP::BorderAgent *)((char *)this + 112), 0xC350u);
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"BorderAgent",  "Commissioner disconnected",  a3,  a4,  a5,  a6,  a7,  a8,  v11);
    uint64_t v9 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
    ot::Ip6::Udp::RemoveReceiver(v9, (ot::MeshCoP::BorderAgent *)((char *)this + 56));
    IgnoreError();
    uint64_t v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    uint64_t result = ot::Ip6::Netif::RemoveUnicastAddress(v10, (ot::MeshCoP::BorderAgent *)((char *)this + 80));
    *((_BYTE *)this + 136)  = 1;
    *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
  }

  return result;
}

uint64_t ot::MeshCoP::BorderAgent::GetUdpPort(ot::MeshCoP::BorderAgent *this)
{
  uint64_t v1 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  return (unsigned __int16)ot::Coap::CoapSecure::GetUdpPort(v1);
}

uint64_t ot::Coap::CoapSecure::GetUdpPort(ot::Coap::CoapSecure *this)
{
  return (unsigned __int16)ot::MeshCoP::Dtls::GetUdpPort((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return __ZNK2ot4Coap10CoapSecure10GetUdpPortEv(this);
}

uint64_t ot::Coap::CoapSecure::SetPsk( ot::Coap::CoapSecure *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::MeshCoP::Dtls::SetPsk((ot::Coap::CoapSecure *)((char *)this + 144), a2, a3);
}

{
  return __ZN2ot4Coap10CoapSecure6SetPskEPKhh(this, a2, a3);
}

void *ot::Clearable<ot::Pskc>::Clear(void *result)
{
  *uint64_t result = 0LL;
  result[1]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_4PskcEE5ClearEv(result);
}

void *ot::Coap::CoapSecure::SetConnectedCallback( ot::Coap::CoapSecure *this, void (*a2)(BOOL, void *), uint64_t a3)
{
  return ot::CallbackBase<void (*)(BOOL,void *)>::Set((void *)this + 129, (uint64_t)a2, a3);
}

{
  return __ZN2ot4Coap10CoapSecure20SetConnectedCallbackEPFvbPvES2_(this, a2, a3);
}

void **ot::Coap::CoapSecure::Disconnect(void **this)
{
  return ot::MeshCoP::Dtls::Disconnect(this + 18);
}

{
  return __ZN2ot4Coap10CoapSecure10DisconnectEv(this);
}

uint64_t ot::MeshCoP::BorderAgent::ApplyMeshLocalPrefix(uint64_t this)
{
  uint64_t v8 = this;
  if (*(_BYTE *)(this + 136) == 2)
  {
    uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)this);
    this  = ot::Ip6::Netif::HasUnicastAddress(v1, (const ot::Ip6::Netif::UnicastAddress *)(v8 + 80));
    if ((this & 1) != 0)
    {
      uint64_t v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)v8);
      ot::Ip6::Netif::RemoveUnicastAddress(v2, (const ot::Ip6::Netif::UnicastAddress *)(v8 + 80));
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(v8 + 80));
      __int16 v7 = v3;
      uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)v8);
      ot::Mle::Mle::GetMeshLocalPrefix(v4);
      ot::Ip6::Address::SetPrefix(v7, v5);
      uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)v8);
      return ot::Ip6::Netif::AddUnicastAddress(v6, (ot::Ip6::Netif::UnicastAddress *)(v8 + 80));
    }
  }

  return this;
}

BOOL ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains((uint64_t *)this, (uint64_t)a2);
}

{
  return __ZNK2ot3Ip65Netif17HasUnicastAddressERKNS1_14UnicastAddressE(this, a2);
}

uint64_t ot::Mle::CommissionerAloc16FromId(ot::Mle *this)
{
  return (unsigned __int16)((this & 7) - 976);
}

{
  return __ZN2ot3Mle24CommissionerAloc16FromIdEt(this);
}

void *ot::Ip6::Udp::Receiver::Receiver(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = 0LL;
  result[1]  = a2;
  result[2]  = a3;
  return result;
}

BOOL ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(a1, a2, v3) == 0;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE8ContainsERKS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0LL;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }

  return v5;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE4FindERKS3_RPS5_(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

{
  return *(void *)(a1 + 24);
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip65Netif14UnicastAddressEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_3Ip65Netif14UnicastAddressEE7GetNextEv(a1);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::BorderAgent,&ot::MeshCoP::BorderAgent::HandleTimeout>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::BorderAgent::HandleTimeout)(v2);
}

void *ot::SettingsBase::BorderAgentId::Init(ot::SettingsBase::BorderAgentId *this)
{
  return ot::Clearable<ot::SettingsBase::BorderAgentId>::Clear(this);
}

{
  return __ZN2ot12SettingsBase13BorderAgentId4InitEv(this);
}

void *ot::Clearable<ot::SettingsBase::BorderAgentId>::Clear(void *result)
{
  *uint64_t result = 0LL;
  result[1]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_12SettingsBase13BorderAgentIdEE5ClearEv(result);
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::Commissioner( ot::MeshCoP::Commissioner *this, ot::Instance *a2)
{
  *((void *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  *((_WORD *)this + 136)  = 0;
  *((_WORD *)this + 137)  = 0;
  *((_WORD *)this + 138)  = 0;
  *((_BYTE *)this + 278)  = 0;
  ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::TimerMilliIn( (ot::MeshCoP::Commissioner *)((char *)this + 280),  a2);
  ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::TimerMilliIn( (ot::MeshCoP::Commissioner *)((char *)this + 304),  a2);
  ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::TimerMilliIn( (ot::MeshCoP::Commissioner *)((char *)this + 328),  a2);
  ot::AnnounceBeginClient::AnnounceBeginClient((ot::MeshCoP::Commissioner *)((char *)this + 352), a2);
  ot::EnergyScanClient::EnergyScanClient((ot::MeshCoP::Commissioner *)((char *)this + 360), a2);
  ot::PanIdQueryClient::PanIdQueryClient((ot::MeshCoP::Commissioner *)((char *)this + 376), a2);
  *((_BYTE *)this + 55++*(_WORD *)(this + 4) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 70);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 72);
  memset(this, 0, 0x100uLL);
  ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear((ot::MeshCoP::Commissioner *)((char *)this + 392));
  *((_BYTE *)this + 408)  = 64;
  *((_BYTE *)this + 410) &= ~1u;
  *((_BYTE *)this + 410)  = *((_BYTE *)this + 410) & 0xFD | 2;
  *((_BYTE *)this + 410)  = *((_BYTE *)this + 410) & 0x87 | 0x18;
  *((_BYTE *)this + 410)  = *((_BYTE *)this + 410) & 0xFB | 4;
  ot::MeshCoP::Commissioner::SetId(this, (ot *)"OpenThread Commissioner");
  IgnoreError();
  uint64_t result = this;
  *((_BYTE *)this + 42++*(_WORD *)(this + 4) = 0;
  return result;
}

{
  ot::MeshCoP::Commissioner::Commissioner(this, a2);
  return this;
}

uint64_t ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer(ot::MeshCoP::Commissioner *this)
{
  uint64_t v12 = this;
  int Now = ot::TimerMilli::GetNow(this);
  for (uint64_t i = this; i != (ot::MeshCoP::Commissioner *)((char *)this + 256); uint64_t i = (ot::MeshCoP::Commissioner *)((char *)i + 64))
  {
    if (*((_BYTE *)i + 57))
    {
      if (ot::Time::operator<=((int *)i, &Now))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"Commissioner",  "removing joiner due to timeout or successfully joined",  v1,  v2,  v3,  v4,  v5,  v6,  v8);
        ot::MeshCoP::Commissioner::RemoveJoinerEntry(this, i);
      }
    }
  }

  return ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(this);
}

void ot::MeshCoP::Commissioner::HandleTimer(ot::MeshCoP::Commissioner *this)
{
  int v1 = *((unsigned __int8 *)this + 554);
  if (*((_BYTE *)this + 554))
  {
    if (v1 == 1)
    {
      ot::MeshCoP::Commissioner::SendPetition(this);
      IgnoreError();
    }

    else if (v1 == 2)
    {
      ot::MeshCoP::Commissioner::SendKeepAlive(this);
    }
  }

void **ot::MeshCoP::Commissioner::HandleJoinerSessionTimer(ot::MeshCoP::Commissioner *this)
{
  if (*((void *)this + 32)) {
    ot::MeshCoP::Commissioner::LogJoinerEntry((uint64_t)this, (uint64_t)"Timed out session with", *((void *)this + 32));
  }
  int v1 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  return ot::Coap::CoapSecure::Disconnect(v1);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::HandleTimer);
  return a1;
}

double ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(_OWORD *a1)
{
  double result = 0.0;
  *a1  = 0u;
  a1[1]  = 0u;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip65Netif14UnicastAddressEE5ClearEv(a1);
}

uint64_t ot::MeshCoP::Commissioner::SetId(ot::MeshCoP::Commissioner *this, ot *a2)
{
  __n_1  = 0;
  if (ot::MeshCoP::Commissioner::IsDisabled(this))
  {
    if (a2)
    {
      if ((ot::IsValidUtf8String(a2, v2) & 1) != 0)
      {
        unsigned __int8 __n = ot::StringLength(a2, (const char *)0x41);
        if (__n < 0x40u)
        {
          memcpy((char *)this + 489, a2, __n);
          *((_BYTE *)this + __n + 48ot::Mle::Tlv::SetType(this, 9) = 0;
        }

        else
        {
          return 7;
        }
      }

      else
      {
        return 7;
      }
    }
  }

  else
  {
    return 13;
  }

  return __n_1;
}

void *ot::MeshCoP::Commissioner::SetState(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v15 = a1;
  unsigned __int8 v14 = a2;
  unsigned __int8 v13 = *(_BYTE *)(a1 + 554);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
  double result = (void *)ot::Notifier::Update<ot::MeshCoP::Commissioner::State>(v2, (_BYTE *)(a1 + 554), &v14, 0x800000LL);
  if (!(_DWORD)result)
  {
    char v10 = ot::MeshCoP::Commissioner::StateToString(v13);
    ot::MeshCoP::Commissioner::StateToString(v14);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "State: %s -> %s", v4, v5, v6, v7, v8, v9, v10);
    unsigned int v12 = ot::MapEnum<ot::MeshCoP::Commissioner::State>(*(unsigned __int8 *)(a1 + 554));
    return ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otCommissionerState>( (void *)(a1 + 560),  &v12);
  }

  return result;
}

uint64_t ot::Notifier::Update<ot::MeshCoP::Commissioner::State>(void *a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v5;
}

{
  return __ZN2ot8Notifier6UpdateINS_7MeshCoP12Commissioner5StateEEE7otErrorRT_RKS6_NS_5EventE(a1, a2, a3, a4);
}

char *ot::MeshCoP::Commissioner::StateToString(unsigned __int8 a1)
{
  return ot::MeshCoP::Commissioner::StateToString(ot::MeshCoP::Commissioner::State)::kStateStrings[a1];
}

void *ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otCommissionerState>( void *result, unsigned int *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerState>( (uint64_t)result,  a2);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFv19otCommissionerStatePvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJS1_EEEvDpOT_( result,  a2);
}

uint64_t ot::MeshCoP::Commissioner::SignalJoinerEvent(void *a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 v13 = a1;
  unsigned __int8 v12 = a2;
  uint64_t v11 = a3;
  char v10 = 0;
  uint64_t result = ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::IsSet(a1 + 72);
  if ((result & 1) != 0 && v11)
  {
    ot::MeshCoP::Commissioner::Joiner::CopyToJoinerInfo(v11, v15);
    if (*(_BYTE *)(v11 + 57) == 2)
    {
      ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)(v11 + 8), (const ot::Mac::ExtAddress *)v14, v4);
    }

    else if (v11 == a1[32])
    {
      ot::Ip6::InterfaceIdentifier::ConvertToExtAddress( (ot::Ip6::InterfaceIdentifier *)(a1 + 33),  (ot::Mac::ExtAddress *)v14);
    }

    else
    {
      char v10 = 1;
    }

    unsigned int v9 = ot::MapEnum<ot::MeshCoP::Commissioner::JoinerEvent>(v12);
    uint64_t v8 = v15;
    if ((v10 & 1) != 0) {
      unsigned int v5 = 0LL;
    }
    else {
      unsigned int v5 = v14;
    }
    uint64_t v7 = v5;
    return ot::Callback<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerJoinerEvent,otJoinerInfo*,ot::Mac::ExtAddress *>( (uint64_t)(a1 + 72),  &v9,  &v8,  &v7);
  }

  return result;
}

BOOL ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::IsSet( void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFv25otCommissionerJoinerEventPK12otJoinerInfoPK12otExtAddressPvEE5IsSetEv(a1);
}

uint64_t ot::MeshCoP::Commissioner::Joiner::CopyToJoinerInfo(uint64_t a1, _DWORD *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  memset(a2, 0, 0x40uLL);
  unint64_t v5 = *(unsigned __int8 *)(a1 + 57);
  if (v5 <= 3) {
    __asm { BR              X8 }
  }

  uint64_t v2 = (ot::TimerMilli *)memcpy(v7 + 6, (const void *)(a1 + 24), 0x21uLL);
  int Now = ot::TimerMilli::GetNow(v2);
  uint64_t result = ot::Time::operator-((_DWORD *)a1, &Now);
  v7[15]  = result;
  return result;
}

uint64_t ot::Callback<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerJoinerEvent,otJoinerInfo*,ot::Mac::ExtAddress *>( uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFv25otCommissionerJoinerEventPK12otJoinerInfoPK12otExtAddressPvELNS_23CallbackContextPositionE1EE6InvokeIJS1_PS2_PNS_3Mac10ExtAddressEEEEvDpOT_( a1,  a2,  a3,  a4);
}

uint64_t ot::MapEnum<ot::MeshCoP::Commissioner::JoinerEvent>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_7MeshCoP12Commissioner11JoinerEventEEEKNS_10MappedEnumIT_E4TypeES5_(result);
}

uint64_t ot::MeshCoP::Commissioner::HandleSecureAgentConnected( ot::MeshCoP::Commissioner *this, ot::MeshCoP::Commissioner *a2, void *a3)
{
  return ot::MeshCoP::Commissioner::HandleSecureAgentConnected(a2, this & 1);
}

uint64_t ot::MeshCoP::Commissioner::HandleSecureAgentConnected(ot::MeshCoP::Commissioner *this, char a2)
{
  char v5 = a2 & 1;
  if ((a2 & 1) == 0) {
    ot::TimerMilli::Stop((ot::MeshCoP::Commissioner *)((char *)this + 328));
  }
  if ((v5 & 1) != 0) {
    unsigned __int8 v2 = 1;
  }
  else {
    unsigned __int8 v2 = 3;
  }
  return ot::MeshCoP::Commissioner::SignalJoinerEvent(this, v2, *((void *)this + 32));
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::GetUnusedJoinerEntry(ot::MeshCoP::Commissioner *this)
{
  uint64_t v3 = 0LL;
  for (uint64_t i = this; i != (ot::MeshCoP::Commissioner *)((char *)this + 256); uint64_t i = (ot::MeshCoP::Commissioner *)((char *)i + 64))
  {
    if (!*((_BYTE *)i + 57)) {
      return i;
    }
  }

  return (ot::MeshCoP::Commissioner *)v3;
}

uint64_t ot::MeshCoP::Commissioner::FindJoinerEntry( ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2)
{
  for (uint64_t i = (unsigned __int8 *)this; i != (unsigned __int8 *)((char *)this + 256); i += 64)
  {
    unint64_t v3 = i[57];
    if (v3 <= 3) {
      __asm { BR              X8 }
    }
  }

  return 0LL;
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::FindJoinerEntry( ot::MeshCoP::Commissioner *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  uint64_t v5 = 0LL;
  uint64_t v4 = this;
  unint64_t v3 = (ot::MeshCoP::Commissioner *)((char *)this + 256);
  while (v4 != v3)
  {
    uint64_t v4 = (ot::MeshCoP::Commissioner *)((char *)v4 + 64);
  }

  return (ot::MeshCoP::Commissioner *)v5;
}

uint64_t ot::MeshCoP::Commissioner::FindBestMatchingJoinerEntry( ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2)
{
  for (uint64_t i = (unsigned __int8 *)this; i != (unsigned __int8 *)((char *)this + 256); i += 64)
  {
    unint64_t v3 = i[57];
    if (v3 <= 3) {
      __asm { BR              X8 }
    }
  }

  return 0LL;
}

uint64_t ot::MeshCoP::JoinerDiscerner::GetLength(ot::MeshCoP::JoinerDiscerner *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot7MeshCoP15JoinerDiscerner9GetLengthEv(this);
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoinerEntry(ot::MeshCoP::Commissioner *a1, _BYTE *a2)
{
  a2[57]  = 0;
  if (a2 == *((_BYTE **)a1 + 32)) {
    *((void *)a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  }
  ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(a1);
  ot::MeshCoP::Commissioner::SendCommissionerSet(a1);
  ot::MeshCoP::Commissioner::LogJoinerEntry((uint64_t)a1, (uint64_t)"Removed", (uint64_t)__dst);
  return ot::MeshCoP::Commissioner::SignalJoinerEvent(a1, 4u, (uint64_t)__dst);
}

uint64_t ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(ot::MeshCoP::Commissioner *this)
{
  uint64_t v15 = this;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  unsigned __int8 v12 = this;
  uint64_t v11 = this;
  char v10 = (ot::MeshCoP::Commissioner *)((char *)this + 256);
  while (v11 != v10)
  {
    unsigned int v9 = (int *)v11;
    if (*((_BYTE *)v11 + 57))
    {
      int v7 = DistantFuture;
      int v5 = Now;
      int v4 = *v9;
      int v6 = ot::Max<ot::Time>(Now, v4);
      int v8 = ot::Min<ot::Time>(DistantFuture, v6);
      DistantFuture  = v8;
    }

    uint64_t v11 = (ot::MeshCoP::Commissioner *)((char *)v11 + 64);
  }

  int v3 = ot::Time::GetDistantFuture((ot::Time *)&Now);
  if (ot::Time::operator<(&DistantFuture, &v3)) {
    return ot::TimerMilli::FireAt((ot::MeshCoP::Commissioner *)((char *)this + 280), DistantFuture);
  }
  else {
    return ot::TimerMilli::Stop((ot::MeshCoP::Commissioner *)((char *)this + 280));
  }
}

void ot::MeshCoP::Commissioner::SendCommissionerSet(ot::MeshCoP::Commissioner *this)
{
  if (*((_BYTE *)this + 554) == 2)
  {
    ot::Clearable<ot::MeshCoP::Commissioner::Dataset>::Clear((uint64_t)v4);
    ot::MeshCoP::Commissioner::Dataset::SetSessionId((uint64_t)v4, *((_WORD *)this + 138));
    ot::MeshCoP::Commissioner::Dataset::UpdateSteeringData((ot::MeshCoP::Commissioner::Dataset *)v4);
    ot::MeshCoP::Commissioner::ComputeBloomFilter(this, v1);
    int v3 = ot::MeshCoP::Commissioner::SendMgmtCommissionerSetRequest( this,  (const ot::MeshCoP::Commissioner::Dataset *)v4,  0LL,  0);
    ot::MeshCoP::LogError((char)"send MGMT_COMMISSIONER_SET.req", v3);
  }

  else
  {
    ot::MeshCoP::LogError((char)"send MGMT_COMMISSIONER_SET.req", 13);
  }

void ot::MeshCoP::Commissioner::LogJoinerEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned __int8 *)(a3 + 57);
  if (v3 <= 3) {
    __asm { BR              X8 }
  }

uint64_t ot::MeshCoP::Commissioner::Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
  if (ot::Mle::Mle::IsAttached(v4))
  {
    if (*(_BYTE *)(a1 + 554))
    {
      unsigned int v17 = 24;
    }

    else
    {
      int v5 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>((ot::InstanceLocator *)a1);
      ot::MeshCoP::BorderAgent::Stop(v5);
      uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
      unsigned int v17 = ot::Coap::CoapSecure::Start(v6, (uint64_t)ot::MeshCoP::Commissioner::SendRelayTransmit, a1);
      if (!v17)
      {
        int v7 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
        ot::Coap::CoapSecure::SetConnectedCallback( v7,  (void (*)(BOOL, void *))ot::MeshCoP::Commissioner::HandleSecureAgentConnected,  a1);
        ot::CallbackBase<void (*)(otCommissionerState,void *)>::Set((void *)(a1 + 560), a2, a4);
        ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::Set( (void *)(a1 + 576),  a3,  a4);
        *(_BYTE *)(a1 + 278)  = 0;
        unsigned int v17 = ot::MeshCoP::Commissioner::SendPetition((ot::MeshCoP::Commissioner *)a1);
        if (!v17)
        {
          ot::MeshCoP::Commissioner::SetState(a1, 1u);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Commissioner",  "start commissioner %s",  v8,  v9,  v10,  v11,  v12,  v13,  a1 - 23);
        }
      }
    }
  }

  else
  {
    unsigned int v17 = 13;
  }

  if (v17 && v17 != 24)
  {
    unsigned __int8 v14 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
    ot::Coap::CoapSecure::Stop(v14);
  }

  ot::MeshCoP::LogError((char)"start commissioner", v17);
  return v17;
}

uint64_t ot::MeshCoP::Commissioner::SendRelayTransmit( ot::MeshCoP::Commissioner *this, ot::Message *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  return ot::MeshCoP::Commissioner::SendRelayTransmit(this, a2, a3);
}

void *ot::CallbackBase<void (*)(otCommissionerState,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFv19otCommissionerStatePvEE3SetES4_S2_(result, a2, a3);
}

void *ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFv25otCommissionerJoinerEventPK12otJoinerInfoPK12otExtAddressPvEE3SetESA_S8_( result,  a2,  a3);
}

uint64_t ot::MeshCoP::Commissioner::SendPetition(ot::MeshCoP::Commissioner *this)
{
  uint64_t v16 = this;
  unsigned int v15 = 0;
  unsigned __int8 v14 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v13, Instance);
  ++*((_BYTE *)this + 278);
  unsigned __int8 v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  unsigned __int8 v14 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v2, 0x17u);
  if (v14)
  {
    ot::MeshCoP::CommissionerIdTlv::Init((ot::MeshCoP::CommissionerIdTlv *)v17);
    ot::MeshCoP::CommissionerIdTlv::SetCommissionerId( (ot::MeshCoP::CommissionerIdTlv *)v17,  (ot::MeshCoP::Commissioner *)((char *)this + 489));
    unsigned int v15 = ot::Tlv::AppendTo((ot::Tlv *)v17, v14);
    if (!v15)
    {
      unsigned int v15 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v13);
      if (!v15)
      {
        unint64_t v3 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        unsigned int v15 = ot::Coap::CoapBase::SendMessage( v3,  v14,  (ot::Ip6::MessageInfo *)v13,  (uint64_t)ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse,  (uint64_t)this);
        if (!v15)
        {
          char v4 = ot::UriToString<(ot::Uri)23>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s", v5, v6, v7, v8, v9, v10, v4);
        }
      }
    }
  }

  else
  {
    unsigned int v15 = 3;
  }

  if (v15 && v14) {
    ot::Message::Free(v14);
  }
  return v15;
}

uint64_t ot::MeshCoP::Commissioner::Stop(_BYTE *a1, char a2)
{
  unsigned int v8 = 0;
  char v7 = 0;
  if (a1[554])
  {
    ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 328));
    unsigned __int8 v2 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
    ot::Coap::CoapSecure::Stop(v2);
    if (a1[554] == 2)
    {
      unint64_t v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
      ot::Ip6::Netif::RemoveUnicastAddress(v3, (const ot::Ip6::Netif::UnicastAddress *)(a1 + 392));
      ot::MeshCoP::Commissioner::ClearJoiners((ot::MeshCoP::Commissioner *)a1);
      char v7 = 1;
    }

    else if (a1[554] == 1)
    {
      a1[278]  = 0;
    }

    ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 304));
    ot::MeshCoP::Commissioner::SetState((uint64_t)a1, 0);
    if ((v7 & 1) != 0 && !a2) {
      ot::MeshCoP::Commissioner::SendKeepAlive((ot::MeshCoP::Commissioner *)a1);
    }
    char v4 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>((ot::InstanceLocator *)a1);
    ot::MeshCoP::BorderAgent::Start(v4);
    ot::MeshCoP::LogError((char)"stop commissioner", 0);
  }

  else
  {
    unsigned int v8 = 24;
    ot::MeshCoP::LogError((char)"stop commissioner", 24);
  }

  return v8;
}

void ot::MeshCoP::Commissioner::ClearJoiners(ot::MeshCoP::Commissioner *this)
{
}

void ot::MeshCoP::Commissioner::SendKeepAlive(ot::MeshCoP::Commissioner *this)
{
}

uint64_t ot::MeshCoP::Commissioner::ComputeBloomFilter( ot::MeshCoP::Commissioner *this, ot::MeshCoP::SteeringData *a2)
{
  uint64_t result = ot::MeshCoP::SteeringData::Init((uint64_t)a2, 0x10u);
  for (uint64_t i = (unsigned __int8 *)this; i != (unsigned __int8 *)((char *)this + 256); i += 64)
  {
    unint64_t v3 = i[57];
    if (v3 <= 3) {
      __asm { BR              X8 }
    }
  }

  return result;
}

uint64_t ot::Clearable<ot::MeshCoP::Commissioner::Dataset>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8)  = 0LL;
  *(void *)(result + ot::Mac::RadioTypes::Clear((_BYTE *)this + 16) = 0LL;
  *(_WORD *)(result + 2++*(_WORD *)(this + 4) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_7MeshCoP12Commissioner7DatasetEE5ClearEv(result);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::SetSessionId(uint64_t this, __int16 a2)
{
  *(_BYTE *)(this + 2++*(_WORD *)(this + 4) = *(_BYTE *)(this + 24) & 0xFD | 2;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot7MeshCoP12Commissioner7Dataset12SetSessionIdEt(this, a2);
}

void ot::MeshCoP::Commissioner::Dataset::UpdateSteeringData(ot::MeshCoP::Commissioner::Dataset *this)
{
  *((_BYTE *)this + 2++*(_WORD *)(this + 4) = *((_BYTE *)this + 24) & 0xFB | 4;
  ot::AsCoreType<otSteeringData>((uint64_t)this + 4);
}

{
  __ZN2ot7MeshCoP12Commissioner7Dataset18UpdateSteeringDataEv(this);
}

uint64_t ot::MeshCoP::Commissioner::SendMgmtCommissionerSetRequest( ot::MeshCoP::Commissioner *this, const ot::MeshCoP::Commissioner::Dataset *a2, char *a3, unsigned __int8 a4)
{
  int v33 = this;
  v32  = a2;
  int v31 = a3;
  unsigned __int8 v30 = a4;
  unsigned int appended = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v27, Instance);
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v28 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v5, 0x10u);
  if (v28)
  {
    if ((ot::MeshCoP::Commissioner::Dataset::IsLocatorSet(v32) & 1) == 0
      || (uint64_t v24 = v28,
          Locator  = ot::MeshCoP::Commissioner::Dataset::GetLocator(v32),
          (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::BorderAgentLocatorTlv>((uint64_t)v24, Locator)) == 0))
    {
      if ((ot::MeshCoP::Commissioner::Dataset::IsSessionIdSet(v32) & 1) == 0
        || (uint64_t v23 = v28,
            SessionId  = ot::MeshCoP::Commissioner::Dataset::GetSessionId(v32),
            (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v23, SessionId)) == 0))
      {
        if ((ot::MeshCoP::Commissioner::Dataset::IsSteeringDataSet(v32) & 1) == 0
          || (ot::MeshCoP::Commissioner::Dataset::GetSteeringData(v32),
              uint64_t v26 = v8,
              unsigned __int16 v22 = v28,
              Data  = (void *)ot::MeshCoP::SteeringData::GetData(v8),
              unsigned __int8 Length = ot::MeshCoP::SteeringData::GetLength(v26),
              (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::SteeringDataTlv>(v22, Data, Length)) == 0))
        {
          if ((ot::MeshCoP::Commissioner::Dataset::IsJoinerUdpPortSet(v32) & 1) == 0
            || (uint64_t v20 = v28,
                JoinerUdpPort  = ot::MeshCoP::Commissioner::Dataset::GetJoinerUdpPort(v32),
                (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>((uint64_t)v20, JoinerUdpPort)) == 0))
          {
            if (!v30 || (unsigned int appended = ot::Message::AppendBytes(v28, v31, v30)) == 0)
            {
              unsigned int appended = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v27);
              if (!appended)
              {
                uint64_t v11 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                unsigned int appended = ot::Coap::CoapBase::SendMessage( v11,  v28,  (ot::Ip6::MessageInfo *)v27,  (uint64_t)ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse,  (uint64_t)this);
                if (!appended)
                {
                  char v12 = ot::UriToString<(ot::Uri)16>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Commissioner",  "Sent %s to leader",  v13,  v14,  v15,  v16,  v17,  v18,  v12);
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v28) {
    ot::Message::Free(v28);
  }
  return appended;
}

uint64_t ot::MeshCoP::Commissioner::AddJoiner( ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, const ot::MeshCoP::JoinerDiscerner *a3, ot *a4, unsigned int a5)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  unsigned int v13 = a5;
  unsigned int v12 = 0;
  if (*((_BYTE *)this + 554) == 2)
  {
    if (v15)
    {
      if (!ot::MeshCoP::JoinerDiscerner::IsValid(v15)) {
        return 7;
      }
      JoinerEntry  = ot::MeshCoP::Commissioner::FindJoinerEntry(this, v15);
    }

    else
    {
      JoinerEntry  = (ot::MeshCoP::Commissioner *)ot::MeshCoP::Commissioner::FindJoinerEntry(this, v16);
    }

    if (!JoinerEntry) {
      JoinerEntry  = ot::MeshCoP::Commissioner::GetUnusedJoinerEntry(this);
    }
    if (JoinerEntry)
    {
      uint64_t v5 = (ot::TimerMilli *)ot::MeshCoP::JoinerPskd::SetFrom( (ot::MeshCoP::Commissioner *)((char *)JoinerEntry + 24),  v14);
      unsigned int v12 = v5;
      if (!(_DWORD)v5)
      {
        if (v15)
        {
          *((_BYTE *)JoinerEntry + 57)  = 3;
          *(_OWORD *)((char *)JoinerEntry + 8)  = *(_OWORD *)v15;
        }

        else if (v16)
        {
          *((_BYTE *)JoinerEntry + 57)  = 2;
          *((void *)JoinerEntry + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = *(void *)v16;
        }

        else
        {
          *((_BYTE *)JoinerEntry + 57)  = 1;
        }

        int Now = ot::TimerMilli::GetNow(v5);
        int v6 = ot::Time::SecToMsec((ot::Time *)v13);
        int v10 = ot::Time::operator+(&Now, v6);
        *(_DWORD *)JoinerEntry  = v10;
        ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(this);
        ot::MeshCoP::Commissioner::SendCommissionerSet(this);
        ot::MeshCoP::Commissioner::LogJoinerEntry((uint64_t)this, (uint64_t)"Added", (uint64_t)JoinerEntry);
      }
    }

    else
    {
      return 3;
    }
  }

  else
  {
    return 13;
  }

  return v12;
}

BOOL ot::MeshCoP::JoinerDiscerner::IsValid(ot::MeshCoP::JoinerDiscerner *this)
{
  BOOL v2 = 0;
  if (*((_BYTE *)this + 8)) {
    return *((unsigned __int8 *)this + 8) <= 0x40u;
  }
  return v2;
}

{
  return __ZNK2ot7MeshCoP15JoinerDiscerner7IsValidEv(this);
}

uint64_t ot::MeshCoP::Commissioner::GetNextJoinerInfo(uint64_t a1, _WORD *a2, _DWORD *a3)
{
  unsigned int v8 = 0;
  while (1)
  {
    int v5 = (unsigned __int16)*a2;
    uint64_t v3 = (unsigned __int16)(*a2)++;
    uint64_t v7 = a1 + (v3 << 6);
    if (*(_BYTE *)(v7 + 57))
    {
      ot::MeshCoP::Commissioner::Joiner::CopyToJoinerInfo(v7, a3);
      return v8;
    }
  }

  return 23;
}

uint64_t ot::GetArrayLength<ot::MeshCoP::Commissioner::Joiner,(unsigned short)4>()
{
  return 4LL;
}

{
  return __ZN2ot14GetArrayLengthINS_7MeshCoP12Commissioner6JoinerELt4EEEtRAT0__KT_();
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoiner( ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, const ot::MeshCoP::JoinerDiscerner *a3, unsigned int a4)
{
  unsigned int v7 = 0;
  if (*((_BYTE *)this + 554) == 2)
  {
    if (a3)
    {
      if (!ot::MeshCoP::JoinerDiscerner::IsValid(a3)) {
        return 7;
      }
      JoinerEntry  = (int *)ot::MeshCoP::Commissioner::FindJoinerEntry(this, a3);
    }

    else
    {
      JoinerEntry  = (int *)ot::MeshCoP::Commissioner::FindJoinerEntry(this, a2);
    }

    if (JoinerEntry) {
      ot::MeshCoP::Commissioner::RemoveJoiner(this, JoinerEntry, a4);
    }
    else {
      return 23;
    }
  }

  else
  {
    return 13;
  }

  return v7;
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoiner(ot::MeshCoP::Commissioner *a1, int *a2, unsigned int a3)
{
  int v10 = a1;
  uint64_t v9 = a2;
  unsigned int v8 = a3;
  if (!a3) {
    return ot::MeshCoP::Commissioner::RemoveJoinerEntry(a1, v9);
  }
  int Now = ot::TimerMilli::GetNow(a1);
  int v3 = ot::Time::SecToMsec((ot::Time *)v8);
  int v7 = ot::Time::operator+(&Now, v3);
  uint64_t result = ot::Time::operator>(v9, &v7);
  if ((result & 1) != 0)
  {
    *uint64_t v9 = v7;
    return ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(a1);
  }

  return result;
}

uint64_t ot::MeshCoP::Commissioner::SetProvisioningUrl(ot::MeshCoP::Commissioner *this, ot *a2)
{
  __n_1  = 0;
  if (a2)
  {
    if ((ot::IsValidUtf8String(a2, (const char *)a2) & 1) != 0)
    {
      unsigned __int8 __n = ot::StringLength(a2, (const char *)0x41);
      if (__n < 0x41uLL)
      {
        memcpy((char *)this + 424, a2, __n);
        *((_BYTE *)this + __n + 42++*(_WORD *)(this + 4) = 0;
      }

      else
      {
        return 7;
      }
    }

    else
    {
      return 7;
    }
  }

  else
  {
    *((_BYTE *)this + 42++*(_WORD *)(this + 4) = 0;
  }

  return __n_1;
}

BOOL ot::Time::operator<=(int *a1, int *a2)
{
  return ot::Time::operator>=(a2, a1);
}

{
  return __ZNK2ot4TimeleERKS0_(a1, a2);
}

uint64_t ot::Max<ot::Time>(int a1, int a2)
{
  int v5 = a1;
  int v4 = a2;
  if (ot::Time::operator<(&v5, &v4)) {
    int v3 = &v4;
  }
  else {
    int v3 = &v5;
  }
  return *v3;
}

{
  return __ZN2ot3MaxINS_4TimeEEET_S2_S2_(a1, a2);
}

uint64_t ot::MeshCoP::Commissioner::SendMgmtCommissionerGetRequest( ot::MeshCoP::Commissioner *this, char *a2, unsigned __int8 a3)
{
  uint64_t v21 = this;
  uint64_t v20 = a2;
  unsigned __int8 v19 = a3;
  unsigned int appended = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v16, Instance);
  int v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v17 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v4, 0xEu);
  if (v17)
  {
    if (!v19
      || (ot::MeshCoP::Tlv::SetType(v15, 13),
          ot::Tlv::SetLength((uint64_t)v15, v19),
          (unsigned int appended = ot::Message::Append<ot::MeshCoP::Tlv>(v17, v15)) == 0)
      && (unsigned int appended = ot::Message::AppendBytes(v17, v20, v19)) == 0)
    {
      unsigned int appended = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v16);
      if (!appended)
      {
        int v5 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        unsigned int appended = ot::Coap::CoapBase::SendMessage( v5,  v17,  (ot::Ip6::MessageInfo *)v16,  (uint64_t)ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse,  (uint64_t)this);
        if (!appended)
        {
          char v6 = ot::UriToString<(ot::Uri)14>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Commissioner",  "Sent %s to leader",  v7,  v8,  v9,  v10,  v11,  v12,  v6);
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v17) {
    ot::Message::Free(v17);
  }
  return appended;
}

uint64_t ot::Message::Append<ot::MeshCoP::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_7MeshCoP3TlvEEE7otErrorRKT_(a1, a2);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse( uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse( uint64_t a1, ot::Coap::Message *a2, uint64_t a3, int a4)
{
  if (!a4 && ot::Coap::Message::GetCode(a2) == 68)
  {
    char v4 = ot::UriToString<(ot::Uri)14>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
  }

uint64_t ot::MeshCoP::Commissioner::Dataset::IsLocatorSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *((_BYTE *)this + 24) & 1;
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset12IsLocatorSetEv(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::BorderAgentLocatorTlv>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 9, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP21BorderAgentLocatorTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetLocator(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset10GetLocatorEv(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsSessionIdSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return (*((unsigned __int8 *)this + 24) >> 1) & 1;
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset14IsSessionIdSetEv(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetSessionId(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset12GetSessionIdEv(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsSteeringDataSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return (*((unsigned __int8 *)this + 24) >> 2) & 1;
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset17IsSteeringDataSetEv(this);
}

void ot::MeshCoP::Commissioner::Dataset::GetSteeringData(ot::MeshCoP::Commissioner::Dataset *this)
{
}

{
  __ZNK2ot7MeshCoP12Commissioner7Dataset15GetSteeringDataEv(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::SteeringDataTlv>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)8, a2, (const void *)a3);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP15SteeringDataTlvEEE7otErrorRNS_7MessageEPKvh(a1, a2, a3);
}

uint64_t ot::MeshCoP::SteeringData::GetData(ot::MeshCoP::SteeringData *this)
{
  return (uint64_t)this + 1;
}

{
  return (uint64_t)this + 1;
}

{
  return __ZN2ot7MeshCoP12SteeringData7GetDataEv(this);
}

{
  return __ZNK2ot7MeshCoP12SteeringData7GetDataEv(this);
}

uint64_t ot::MeshCoP::SteeringData::GetLength(ot::MeshCoP::SteeringData *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot7MeshCoP12SteeringData9GetLengthEv(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsJoinerUdpPortSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return (*((unsigned __int8 *)this + 24) >> 3) & 1;
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset18IsJoinerUdpPortSetEv(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 18, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP16JoinerUdpPortTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetJoinerUdpPort(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *((unsigned __int16 *)this + 11);
}

{
  return __ZNK2ot7MeshCoP12Commissioner7Dataset16GetJoinerUdpPortEv(this);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse( uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse( uint64_t a1, ot::Coap::Message *a2, uint64_t a3, int a4)
{
  if (!a4 && ot::Coap::Message::GetCode(a2) == 68)
  {
    char v4 = ot::UriToString<(ot::Uri)16>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
  }

uint64_t ot::MeshCoP::CommissionerIdTlv::Init(ot::MeshCoP::CommissionerIdTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 64);
}

{
  return __ZN2ot7MeshCoP17CommissionerIdTlv4InitEv(this);
}

uint64_t ot::MeshCoP::CommissionerIdTlv::SetCommissionerId(ot::MeshCoP::CommissionerIdTlv *this, ot *a2)
{
  unsigned __int16 __n = ot::StringLength(a2, (const char *)0x40);
  memcpy((char *)this + 2, a2, __n);
  return ot::Tlv::SetLength((uint64_t)this, __n);
}

{
  return __ZN2ot7MeshCoP17CommissionerIdTlv17SetCommissionerIdEPKc(this, a2);
}

void ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse(uint64_t a1, ot::Tlv *a2, uint64_t a3, int a4)
{
  uint64_t v26 = a1;
  char v25 = a2;
  uint64_t v24 = a3;
  int v23 = a4;
  BOOL v21 = 0;
  if (*(_BYTE *)(a1 + 554) != 2)
  {
    if (!v23 && ot::Coap::Message::GetCode(v25) == 68)
    {
      char v4 = ot::UriToString<(ot::Uri)23>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
      if (!ot::Tlv::Find<ot::MeshCoP::StateTlv>(v25, &v22, v11, v12))
      {
        if (v22 == 1)
        {
          if (!ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>( v25,  (unsigned __int16 *)(a1 + 276),  v13,  v14))
          {
            if (*(_BYTE *)(a1 + 554))
            {
              unsigned __int8 v19 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
              ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 392));
              ot::Mle::Mle::GetCommissionerAloc(v19, v15, *(_WORD *)(a1 + 276));
              IgnoreError();
              uint64_t v16 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
              ot::Ip6::Netif::AddUnicastAddress(v16, (ot::Ip6::Netif::UnicastAddress *)(a1 + 392));
              ot::MeshCoP::Commissioner::SetState(a1, 2u);
              *(_BYTE *)(a1 + 278)  = 0;
              unsigned int v17 = ot::Time::SecToMsec((ot::Time *)0x32);
              ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), v17 / 2);
            }

            else
            {
              ot::MeshCoP::Commissioner::SendKeepAlive((ot::MeshCoP::Commissioner *)a1, *(_WORD *)(a1 + 276));
            }
          }
        }

        else
        {
          ot::MeshCoP::Commissioner::Stop((_BYTE *)a1, 1);
          IgnoreError();
        }
      }
    }

    else
    {
      BOOL v21 = *(_BYTE *)(a1 + 554) == 1;
    }
  }

  if (v21)
  {
    if (*(unsigned __int8 *)(a1 + 278) < 2u)
    {
      unsigned int v18 = ot::Time::SecToMsec((ot::Time *)1);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), v18);
    }

    else
    {
      ot::MeshCoP::Commissioner::Stop((_BYTE *)a1, 1);
      IgnoreError();
    }
  }

void ot::MeshCoP::Commissioner::SendKeepAlive(ot::MeshCoP::Commissioner *this, unsigned __int16 a2)
{
  unsigned int v18 = this;
  unsigned __int16 v17 = a2;
  int v16 = 0;
  uint64_t v15 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v14, Instance);
  int v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v15 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v3, 0x16u);
  if (v15)
  {
    if (*((_BYTE *)this + 554) == 2) {
      unsigned __int8 v4 = 1;
    }
    else {
      unsigned __int8 v4 = -1;
    }
    int v16 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)v15, v4);
    if (!v16)
    {
      int v16 = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v15, v17);
      if (!v16)
      {
        int v16 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v14);
        if (!v16)
        {
          uint64_t v5 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          int v16 = ot::Coap::CoapBase::SendMessage( v5,  v15,  (ot::Ip6::MessageInfo *)v14,  (uint64_t)ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse,  (uint64_t)this);
          if (!v16)
          {
            char v6 = ot::UriToString<(ot::Uri)22>();
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s", v7, v8, v9, v10, v11, v12, v6);
          }
        }
      }
    }
  }

  else
  {
    int v16 = 3;
  }

  if (v16 && v15) {
    ot::Message::Free(v15);
  }
  ot::MeshCoP::LogError((char)"send keep alive", v16);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::StateTlv>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 16, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP8StateTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

void ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse(uint64_t a1, ot::Tlv *a2, uint64_t a3, int a4)
{
  uint64_t v19 = a1;
  unsigned int v18 = a2;
  uint64_t v17 = a3;
  int v16 = a4;
  if (*(_BYTE *)(a1 + 554) == 2)
  {
    if (!v16 && ot::Coap::Message::GetCode(v18) == 68)
    {
      char v4 = ot::UriToString<(ot::Uri)22>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
      if (!ot::Tlv::Find<ot::MeshCoP::StateTlv>(v18, &v15, v11, v12))
      {
        if (v15 == 1)
        {
          unsigned int v13 = ot::Time::SecToMsec((ot::Time *)0x32);
          ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), v13 / 2);
        }

        else
        {
          ot::MeshCoP::Commissioner::Stop(a1, 1LL);
          IgnoreError();
        }
      }
    }

    else
    {
      ot::MeshCoP::Commissioner::Stop(a1, 1LL);
      IgnoreError();
    }
  }

void ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)28>(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v44 = a1;
  unint64_t v43 = a2;
  uint64_t v42 = a3;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v37);
  if (*(_BYTE *)(a1 + 554) != 2)
  {
    TlvValueOffset  = 13;
    return;
  }

  if (ot::Coap::Message::IsNonConfirmablePostRequest(v43))
  {
    TlvValueOffset  = ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>(v43, &v40, v3, v4);
    if (!TlvValueOffset)
    {
      TlvValueOffset  = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>( v43,  (uint64_t)&v39,  v5,  v6,  v7);
      if (!TlvValueOffset)
      {
        TlvValueOffset  = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(v43, &v38, v8, v9);
        if (!TlvValueOffset)
        {
          TlvValueOffset  = ot::Tlv::FindTlvValueOffset(v43, (const ot::Message *)0x11, &v36, &v35, v10);
          if (!TlvValueOffset)
          {
            v32  = v35;
            unsigned __int16 Length = ot::Message::GetLength(v43);
            if (v32 > Length - v36)
            {
              TlvValueOffset  = 6;
              return;
            }

            uint64_t v12 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
            if (ot::Coap::CoapSecure::IsConnectionActive(v12))
            {
              if (ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=((const void *)(a1 + 264), &v39))
              {
                char v31 = ot::UriToString<(ot::Uri)28>();
                ot::Ip6::InterfaceIdentifier::ToString((ot::Ip6::InterfaceIdentifier *)&v39, (ot::StringWriter *)v47);
                ot::String<(unsigned short)17>::AsCString((uint64_t)v47);
                ot::Ip6::InterfaceIdentifier::ToString( (ot::Ip6::InterfaceIdentifier *)(a1 + 264),  (ot::StringWriter *)v46);
                ot::String<(unsigned short)17>::AsCString((uint64_t)v46);
                ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"Commissioner",  "Ignore %s (%s, 0x%04x), session in progress with (%s, 0x%04x)",  v14,  v15,  v16,  v17,  v18,  v19,  v31);
                return;
              }
            }

            else
            {
              *(void *)(a1 + 26ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = v39;
              ot::Ip6::InterfaceIdentifier::ConvertToExtAddress( (ot::Ip6::InterfaceIdentifier *)(a1 + 264),  (ot::Mac::ExtAddress *)v48);
              BestMatchingJoinerEntry  = ot::MeshCoP::Commissioner::FindBestMatchingJoinerEntry( (ot::MeshCoP::Commissioner *)a1,  (const ot::Mac::ExtAddress *)v48);
              if (!BestMatchingJoinerEntry) {
                return;
              }
              unsigned int v13 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
              ot::Coap::CoapSecure::SetPsk(v13, (const ot::MeshCoP::JoinerPskd *)(BestMatchingJoinerEntry + 24));
              *(void *)(a1 + 256)  = BestMatchingJoinerEntry;
              ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 328), 0x7530u);
              ot::MeshCoP::Commissioner::LogJoinerEntry( a1,  (uint64_t)"Starting new session with",  BestMatchingJoinerEntry);
              ot::MeshCoP::Commissioner::SignalJoinerEvent((void *)a1, 0, BestMatchingJoinerEntry);
            }

            *(_WORD *)(a1 + 27ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v40;
            *(_WORD *)(a1 + 27ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = v38;
            char v30 = ot::UriToString<(ot::Uri)28>();
            ot::Ip6::InterfaceIdentifier::ToString((ot::Ip6::InterfaceIdentifier *)(a1 + 264), (ot::StringWriter *)v45);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v45);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Commissioner",  "Received %s (%s, 0x%04x)",  v20,  v21,  v22,  v23,  v24,  v25,  v30);
            ot::Message::SetOffset(v43, v36);
            TlvValueOffset  = ot::Message::SetLength(v43, v36 + v35);
            if (!TlvValueOffset)
            {
              uint64_t v26 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
              ot::Mle::Mle::GetMeshLocal64(v26);
              ot::Ip6::MessageInfo::SetPeerAddr(v37, v27);
              ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v37);
              ot::Ip6::Address::SetIid(v28, (const ot::Ip6::InterfaceIdentifier *)(a1 + 264));
              ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v37, *(_WORD *)(a1 + 272));
              unsigned __int16 v29 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
              ot::Coap::CoapSecure::HandleUdpReceive(v29, v43, (const ot::Ip6::MessageInfo *)v37);
            }
          }
        }
      }
    }
  }

uint64_t ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x12u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP16JoinerUdpPortTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x13, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh19ENS_3Ip619InterfaceIdentifierEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

BOOL ot::Coap::CoapSecure::IsConnectionActive(ot::Coap::CoapSecure *this)
{
  return ot::MeshCoP::Dtls::IsConnectionActive((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return __ZNK2ot4Coap10CoapSecure18IsConnectionActiveEv(this);
}

BOOL ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_3Ip619InterfaceIdentifierEEneERKS2_(a1, a2);
}

void *ot::Ip6::Address::SetIid(ot::Ip6::Address *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  uint64_t result = (void *)ot::Ip6::Address::GetIid(this);
  *uint64_t result = *(void *)a2;
  return result;
}

{
  return __ZN2ot3Ip67Address6SetIidERKNS0_19InterfaceIdentifierE(this, a2);
}

uint64_t ot::Coap::CoapSecure::HandleUdpReceive( ot::Coap::CoapSecure *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::MeshCoP::Dtls::HandleUdpReceive((uint64_t)this + 144, a2, a3);
}

{
  return __ZN2ot4Coap10CoapSecure16HandleUdpReceiveERNS_7MessageERKNS_3Ip611MessageInfoE(this, a2, a3);
}

void ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)17>( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  if (*((_BYTE *)a1 + 554) == 2 && ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)17>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    if (!ot::Coap::CoapBase::SendEmptyAck(v10, a2, a3))
    {
      char v11 = ot::UriToString<(ot::Uri)17>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s ack", v12, v13, v14, v15, v16, v17, v11);
    }
  }

void ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)21>(uint64_t a1, ot::Tlv *a2)
{
  unsigned __int8 v14 = 1;
  if (*(_BYTE *)(a1 + 554) == 2)
  {
    char v2 = ot::UriToString<(ot::Uri)21>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s", v3, v4, v5, v6, v7, v8, v2);
    int v12 = ot::Tlv::Find<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(a2, v16, v9, v10, v11);
    if (v12)
    {
      if (v12 != 23) {
        return;
      }
    }

    else if (!ot::StringMatch((char *)v16, (char *)(a1 + 424), 0))
    {
      unsigned __int8 v14 = -1;
    }

    ot::MeshCoP::Commissioner::SendJoinFinalizeResponse(a1, a2, v14);
  }

uint64_t ot::Tlv::Find<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, char *a5)
{
  return ot::Tlv::FindStringTlv(a1, (const ot::Message *)0x20, 0x40u, a2, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13StringTlvInfoILh32ELh64EEEEE7otErrorRKNS_7MessageERNT_10StringTypeE(a1, a2, a3, a4, a5);
}

void ot::MeshCoP::Commissioner::SendJoinFinalizeResponse( uint64_t a1, const ot::Coap::Message *a2, unsigned __int8 a3)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unsigned __int8 v20 = a3;
  int v19 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v18);
  uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
  uint64_t v17 = ot::Coap::CoapBase::NewPriorityResponseMessage(v3, v21);
  if (v17)
  {
    unsigned __int16 Length = ot::Message::GetLength(v17);
    ot::Message::SetOffset(v17, Length);
    ot::Message::SetSubType(v17, 7);
    int v19 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)v17, v20);
    if (!v19)
    {
      uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      ot::Mle::Mle::GetMeshLocal64(v5);
      ot::Ip6::MessageInfo::SetPeerAddr(v18, v6);
      ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v18);
      ot::Ip6::Address::SetIid(v7, (const ot::Ip6::InterfaceIdentifier *)(a1 + 264));
      ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v18, *(_WORD *)(a1 + 272));
      uint64_t v8 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
      int v19 = ot::Coap::CoapSecure::SendMessage(v8, v17, (ot::Ip6::MessageInfo *)v18, 0LL, 0LL);
      if (!v19)
      {
        ot::MeshCoP::Commissioner::SignalJoinerEvent((void *)a1, 2u, *(void *)(a1 + 256));
        if (*(void *)(a1 + 256) && *(_BYTE *)(*(void *)(a1 + 256) + 57LL) != 1) {
          ot::MeshCoP::Commissioner::RemoveJoiner((ot::MeshCoP::Commissioner *)a1, *(int **)(a1 + 256), 0x14u);
        }
        char v9 = ot::UriToString<(ot::Uri)21>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Commissioner",  "Sent %s response",  v10,  v11,  v12,  v13,  v14,  v15,  v9);
      }
    }
  }

  else
  {
    int v19 = 3;
  }

  if (v19)
  {
    if (v17) {
      ot::Message::Free(v17);
    }
  }

uint64_t ot::MeshCoP::Commissioner::SendRelayTransmit( ot::MeshCoP::Commissioner *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  int v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  unsigned int appended = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v13, Instance);
  uint64_t v4 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ot::KeyManager::ExtractKek(v4, &v20);
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v5, 0x1Du);
  if (v14)
  {
    unsigned int appended = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>((uint64_t)v14, *((_WORD *)this + 136));
    if (!appended)
    {
      unsigned int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>( v14,  (char *)this + 264);
      if (!appended)
      {
        unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>( (uint64_t)v14,  *((_WORD *)this + 137));
        if (!appended
          && (ot::Message::GetSubType(v18) != 7
           || (unsigned int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(v14, &v20)) == 0))
        {
          ot::MeshCoP::ExtendedTlv::SetType(v15, 17);
          unsigned __int16 Length = ot::Message::GetLength(v18);
          ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v15, Length);
          unsigned int appended = ot::Message::Append<ot::MeshCoP::ExtendedTlv>(v14, v15);
          if (!appended)
          {
            uint64_t v11 = v14;
            uint64_t v10 = v18;
            unsigned __int16 v7 = ot::Message::GetLength(v18);
            unsigned int appended = ot::Message::AppendBytesFromMessage(v11, v10, 0, v7);
            if (!appended)
            {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v13, *((_WORD *)this + 137));
              uint64_t v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
              unsigned int appended = ot::Coap::CoapBase::SendMessage(v8, v14, (const ot::Ip6::MessageInfo *)v13);
              if (!appended) {
                ot::Message::Free(v18);
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v14) {
    ot::Message::Free(v14);
  }
  return appended;
}

double ot::KeyManager::ExtractKek(ot::KeyManager *this, __n128 *a2)
{
  *(void *)&double result = ot::Mac::KeyMaterial::ExtractKey((ot::KeyManager *)((char *)this + 160), a2).n128_u64[0];
  return result;
}

{
  return __ZN2ot10KeyManager10ExtractKekERNS_3Mac3KeyE(this, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>( ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x13, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh19ENS_3Ip619InterfaceIdentifierEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE( a1,  a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 20, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh20EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x15, a2, (const void *)0x10);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh21ENS_3Mac3KeyEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

ot::InstanceLocator *ot::MeshCoP::Commissioner::ApplyMeshLocalPrefix(ot::InstanceLocator *this)
{
  uint64_t v7 = (uint64_t)this;
  if (*((_BYTE *)this + 554) == 2)
  {
    int v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v1, (const ot::Ip6::Netif::UnicastAddress *)(v7 + 392));
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(v7 + 392));
    uint64_t v6 = v2;
    uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)v7);
    ot::Mle::Mle::GetMeshLocalPrefix(v3);
    ot::Ip6::Address::SetPrefix(v6, v4);
    uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)v7);
    return (ot::InstanceLocator *)ot::Ip6::Netif::AddUnicastAddress(v5, (ot::Ip6::Netif::UnicastAddress *)(v7 + 392));
  }

  return this;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otSteeringData>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

BOOL ot::MeshCoP::Dtls::IsConnectionActive(ot::MeshCoP::Dtls *this)
{
  return *(unsigned __int8 *)this >= 3u;
}

{
  return __ZNK2ot7MeshCoP4Dtls18IsConnectionActiveEv(this);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  char v2 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  return ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer(v2);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::Commissioner::HandleTimer)(v2);
}

void **ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  return ot::MeshCoP::Commissioner::HandleJoinerSessionTimer(v2);
}

uint64_t ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerState>( uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFv19otCommissionerStatePvELNS_23CallbackContextPositionE1EE6InvokeIJS1_EEEvDpOT_(a1, a2);
}

BOOL ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_3Ip619InterfaceIdentifierEEeqERKS2_(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::GenerateRandom(ot::MeshCoP::Dataset::Info *this, ot::Instance *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>((uint64_t)a2);
  int v13 = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  uint64_t v3 = (ot::Radio *)ot::Instance::Get<ot::Radio>((uint64_t)v15);
  PreferredChannelMasunsigned __int16 k = ot::Radio::GetPreferredChannelMask(v3);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v12, PreferredChannelMask);
  ot::Mac::ChannelMask::Intersect(&v12, (const ot::Mac::ChannelMask *)&v13);
  if (ot::Mac::ChannelMask::IsEmpty((ot::Mac::ChannelMask *)&v12)) {
    int v12 = v13;
  }
  ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(this);
  *(void *)this  = 1LL;
  *((_WORD *)this + ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = 0;
  *((_BYTE *)this + 10)  = 0;
  *((_WORD *)this + 45)  = ot::Mac::ChannelMask::ChooseRandomChannel((ot::Mac::ChannelMask *)&v12);
  *((_DWORD *)this + 2ot::Mle::Tlv::SetType(this, 9) = ot::Mac::ChannelMask::GetMask((ot::Mac::ChannelMask *)&v13);
  WakeupChannel  = (ot::Random::NonCrypto *)ot::Mac::ChannelMask::GetWakeupChannel((ot::Mac::ChannelMask *)&v13);
  *((_WORD *)this + 46)  = WakeupChannel;
  *((_WORD *)this + 4ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = (unsigned __int16)ot::Mac::GenerateRandomPanId(WakeupChannel);
  ot::AsCoreType<otSecurityPolicy>((uint64_t)this + 110);
  ot::SecurityPolicy::SetToDefault(v6);
  ot::AsCoreType<otNetworkKey>((uint64_t)this + 32);
  Random  = ot::NetworkKey::GenerateRandom(v7);
  if (!Random)
  {
    ot::AsCoreType<otPskc>((uint64_t)this + 94);
    Random  = ot::Pskc::GenerateRandom(v8);
    if (!Random)
    {
      Random  = ot::Random::Crypto::FillBuffer((ot::MeshCoP::Dataset::Info *)((char *)this + 65), (unsigned __int8 *)8);
      if (!Random)
      {
        ot::AsCoreType<otIp6NetworkPrefix>((uint64_t)this + 73);
        Random  = ot::Ip6::NetworkPrefix::GenerateRandomUla(v9);
        if (!Random)
        {
          snprintf((char *)this + 48, 0x11uLL, "%s-%04x", "OpenThread", *((unsigned __int16 *)this + 44));
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFFE | 1;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFFB | 4;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFF7 | 8;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFEF | 0x10;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFDF | 0x20;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFF7F | 0x80;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFEFF | 0x100;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xEFFF | 0x1000;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFDFF | 0x200;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFBFF | 0x400;
          *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xF7FF | 0x800;
        }
      }
    }
  }

  return Random;
}

uint64_t ot::Radio::GetPreferredChannelMask(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetPreferredChannelMask((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio23GetPreferredChannelMaskEv(this);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otSecurityPolicy>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

  ;
}

uint64_t ot::NetworkKey::GenerateRandom(ot::NetworkKey *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)0x10);
}

{
  return __ZN2ot10NetworkKey14GenerateRandomEv(this);
}

uint64_t ot::Pskc::GenerateRandom(ot::Pskc *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)0x10);
}

{
  return __ZN2ot4Pskc14GenerateRandomEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsSubsetOf( ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::Dataset::Info *a2)
{
  char v24 = 0;
  if ((ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(this) & 1) == 0
    || (ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(a2) & 1) != 0
    && (ot::MeshCoP::Dataset::Info::GetNetworkKey(this),
        uint64_t v22 = v2,
        ot::MeshCoP::Dataset::Info::GetNetworkKey(a2),
        ot::Equatable<ot::NetworkKey>::operator==(v22, v3)))
  {
    if ((ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(this) & 1) == 0
      || (ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(a2) & 1) != 0
      && (ot::MeshCoP::Dataset::Info::GetNetworkName(this),
          uint64_t v21 = v4,
          ot::MeshCoP::Dataset::Info::GetNetworkName(a2),
          ot::MeshCoP::NetworkName::operator==(v21, v5)))
    {
      if ((ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(this) & 1) == 0
        || (ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(a2) & 1) != 0
        && (ot::MeshCoP::Dataset::Info::GetExtendedPanId(this),
            __n128 v20 = v6,
            ot::MeshCoP::Dataset::Info::GetExtendedPanId(a2),
            ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(v20, v7)))
      {
        if ((ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(this) & 1) == 0
          || (ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(a2) & 1) != 0
          && (MeshLocalPrefix  = (const void *)ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(this),
              uint64_t v8 = (const void *)ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(a2),
              ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(MeshLocalPrefix, v8)))
        {
          if ((ot::MeshCoP::Dataset::Info::IsPanIdPresent(this) & 1) == 0
            || (ot::MeshCoP::Dataset::Info::IsPanIdPresent(a2) & 1) != 0
            && (PanId  = (unsigned __int16)ot::MeshCoP::Dataset::Info::GetPanId(this),
                PanId == (unsigned __int16)ot::MeshCoP::Dataset::Info::GetPanId(a2)))
          {
            if ((ot::MeshCoP::Dataset::Info::IsChannelPresent(this) & 1) == 0
              || (ot::MeshCoP::Dataset::Info::IsChannelPresent(a2) & 1) != 0
              && (Channel  = (unsigned __int16)ot::MeshCoP::Dataset::Info::GetChannel(this),
                  Channel == (unsigned __int16)ot::MeshCoP::Dataset::Info::GetChannel(a2)))
            {
              if ((ot::MeshCoP::Dataset::Info::IsPskcPresent(this) & 1) == 0
                || (ot::MeshCoP::Dataset::Info::IsPskcPresent(a2) & 1) != 0
                && (ot::MeshCoP::Dataset::Info::GetPskc(this),
                    uint64_t v16 = v9,
                    ot::MeshCoP::Dataset::Info::GetPskc(a2),
                    ot::Equatable<ot::Pskc>::operator==(v16, v10)))
              {
                if ((ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(this) & 1) == 0
                  || (ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(a2) & 1) != 0
                  && (ot::MeshCoP::Dataset::Info::GetSecurityPolicy(this),
                      uint64_t v15 = v11,
                      ot::MeshCoP::Dataset::Info::GetSecurityPolicy(a2),
                      ot::Equatable<ot::SecurityPolicy>::operator==(v15, v12)))
                {
                  if ((ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(this) & 1) == 0
                    || (ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(a2) & 1) != 0
                    && (ChannelMasunsigned __int16 k = ot::MeshCoP::Dataset::Info::GetChannelMask(this),
                        ChannelMask == ot::MeshCoP::Dataset::Info::GetChannelMask(a2)))
                  {
                    char v24 = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return v24 & 1;
}

uint64_t ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 2) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info19IsNetworkKeyPresentEv(this);
}

void ot::MeshCoP::Dataset::Info::GetNetworkKey(ot::MeshCoP::Dataset::Info *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset4Info13GetNetworkKeyEv(this);
}

BOOL ot::Equatable<ot::NetworkKey>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_10NetworkKeyEEeqERKS1_(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 3) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info20IsNetworkNamePresentEv(this);
}

void ot::MeshCoP::Dataset::Info::GetNetworkName(ot::MeshCoP::Dataset::Info *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset4Info14GetNetworkNameEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 4) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info22IsExtendedPanIdPresentEv(this);
}

void ot::MeshCoP::Dataset::Info::GetExtendedPanId(ot::MeshCoP::Dataset::Info *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset4Info16GetExtendedPanIdEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 5) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info24IsMeshLocalPrefixPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(ot::MeshCoP::Dataset::Info *this)
{
  return (uint64_t)this + 73;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info18GetMeshLocalPrefixEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsPanIdPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 7) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info14IsPanIdPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetPanId(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned __int16 *)this + 44);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info8GetPanIdEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsChannelPresent(ot::MeshCoP::Dataset::Info *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 60)) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info16IsChannelPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetChannel(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned __int16 *)this + 45);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info10GetChannelEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsPskcPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 9) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info13IsPskcPresentEv(this);
}

void ot::MeshCoP::Dataset::Info::GetPskc(ot::MeshCoP::Dataset::Info *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset4Info7GetPskcEv(this);
}

BOOL ot::Equatable<ot::Pskc>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_4PskcEEeqERKS1_(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 10) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info23IsSecurityPolicyPresentEv(this);
}

void ot::MeshCoP::Dataset::Info::GetSecurityPolicy(ot::MeshCoP::Dataset::Info *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset4Info17GetSecurityPolicyEv(this);
}

BOOL ot::Equatable<ot::SecurityPolicy>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 4uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_14SecurityPolicyEEeqERKS1_(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 11) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info20IsChannelMaskPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetChannelMask(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned int *)this + 29);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info14GetChannelMaskEv(this);
}

ot::MeshCoP::Dataset *ot::MeshCoP::Dataset::Dataset(ot::MeshCoP::Dataset *this)
{
  *((_WORD *)this + 130)  = 0;
  memset(this, 0, 0xFEuLL);
  return this;
}

{
  ot::MeshCoP::Dataset::Dataset(this);
  return this;
}

uint64_t ot::MeshCoP::Dataset::Clear(uint64_t this)
{
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 260) = 0;
  return this;
}

uint64_t ot::MeshCoP::Dataset::IsValid(ot::MeshCoP::Dataset *this)
{
  char v9 = 1;
  TlvsEnd  = ot::MeshCoP::Dataset::GetTlvsEnd(this);
  ot::MeshCoP::Dataset::GetTlvsStart(this);
  for (uint64_t i = v1; (unint64_t)i < TlvsEnd; uint64_t i = v4)
  {
    if (ot::Tlv::IsExtended(i)
      || (unint64_t)i + 2 > TlvsEnd
      || (ot::MeshCoP::Tlv::GetNext(i), v3 > TlvsEnd)
      || (ot::MeshCoP::Tlv::IsValid(i, v2) & 1) == 0)
    {
      char v9 = 0;
      return v9 & 1;
    }

    ot::MeshCoP::Tlv::GetNext(i);
  }

  return v9 & 1;
}

uint64_t ot::MeshCoP::Dataset::GetTlvsEnd(ot::MeshCoP::Dataset *this)
{
  return (uint64_t)this + *((unsigned __int16 *)this + 130);
}

  ;
}

{
  return (uint64_t)this + *((unsigned __int16 *)this + 130);
}

{
  return __ZN2ot7MeshCoP7Dataset10GetTlvsEndEv(this);
}

{
  return __ZNK2ot7MeshCoP7Dataset10GetTlvsEndEv(this);
}

void ot::MeshCoP::Tlv::GetNext(ot::MeshCoP::Tlv *this)
{
}

{
  ot::Tlv::GetNext(this);
  ot::As<ot::MeshCoP::Tlv>();
}

{
  __ZN2ot7MeshCoP3Tlv7GetNextEv(this);
}

{
  __ZNK2ot7MeshCoP3Tlv7GetNextEv(this);
}

ot::Tlv *ot::MeshCoP::Dataset::GetTlv(unsigned __int16 *a1, unsigned __int8 a2)
{
  return ot::MeshCoP::Tlv::FindTlv((ot::Tlv *)a1, a1[130], a2);
}

unint64_t ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset *this, ot::MeshCoP::Dataset::Info *a2)
{
  for (uint64_t i = v2; ; uint64_t i = v4)
  {
    unint64_t result = ot::MeshCoP::Dataset::GetTlvsEnd(this);
    unint64_t Type = ot::MeshCoP::Tlv::GetType(i);
    if (Type <= 0x4A) {
      __asm { BR              X8 }
    }

    ot::MeshCoP::Tlv::GetNext(i);
  }

  return result;
}

uint64_t ot::MeshCoP::Tlv::GetType(ot::MeshCoP::Tlv *this)
{
  return ot::Tlv::GetType(this);
}

{
  return __ZNK2ot7MeshCoP3Tlv7GetTypeEv(this);
}

BOOL ot::MeshCoP::Dataset::Info::SetActiveTimestamp( ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::Timestamp *a2)
{
  BOOL result = ot::MeshCoP::Timestamp::ConvertTo(a2, (uint64_t)this);
  *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFFE | 1;
  return result;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info18SetActiveTimestampERKNS0_9TimestampE(this, a2);
}

uint64_t ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(ot::MeshCoP::ActiveTimestampTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return (uint64_t)this + 2;
}

{
  return __ZN2ot7MeshCoP18ActiveTimestampTlv12GetTimestampEv(this);
}

{
  return __ZNK2ot7MeshCoP18ActiveTimestampTlv12GetTimestampEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetChannel(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 90)  = a2;
  *(_WORD *)(this + 120)  = *(_WORD *)(this + 120) & 0xFEFF | 0x100;
  return this;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info10SetChannelEt(this, a2);
}

uint64_t ot::MeshCoP::ChannelTlv::GetChannel(ot::MeshCoP::ChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return __ZNK2ot7MeshCoP10ChannelTlv10GetChannelEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetWakeupChannel(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 9ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  *(_WORD *)(this + 120)  = *(_WORD *)(this + 120) & 0xEFFF | 0x1000;
  return this;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info16SetWakeupChannelEt(this, a2);
}

uint64_t ot::MeshCoP::WakeupChannelTlv::GetChannel(ot::MeshCoP::WakeupChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

  ;
}

{
  return __ZNK2ot7MeshCoP16WakeupChannelTlv10GetChannelEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetChannelMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1ot::Mac::RadioTypes::Clear((_BYTE *)this + 16) = a2;
  *(_WORD *)(this + 120)  = *(_WORD *)(this + 120) & 0xF7FF | 0x800;
  return this;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info14SetChannelMaskEj(this, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::SetDelay(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = a2;
  *(_WORD *)(this + 120)  = *(_WORD *)(this + 120) & 0xFFBF | 0x40;
  return this;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info8SetDelayEj(this, a2);
}

uint64_t ot::MeshCoP::DelayTimerTlv::GetDelayTimer(ot::MeshCoP::DelayTimerTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
}

{
  return __ZNK2ot7MeshCoP13DelayTimerTlv13GetDelayTimerEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetExtendedPanId(uint64_t result, void *a2)
{
  *(void *)(result + 65)  = *a2;
  *(_WORD *)(result + 120)  = *(_WORD *)(result + 120) & 0xFFEF | 0x10;
  return result;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info16SetExtendedPanIdERKNS0_13ExtendedPanIdE(result, a2);
}

uint64_t ot::MeshCoP::ExtendedPanIdTlv::GetExtendedPanId(ot::MeshCoP::ExtendedPanIdTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP16ExtendedPanIdTlv16GetExtendedPanIdEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetMeshLocalPrefix(uint64_t result, void *a2)
{
  *(void *)(result + 73)  = *a2;
  *(_WORD *)(result + 120)  = *(_WORD *)(result + 120) & 0xFFDF | 0x20;
  return result;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info18SetMeshLocalPrefixERKNS_3Ip613NetworkPrefixE(result, a2);
}

uint64_t ot::MeshCoP::MeshLocalPrefixTlv::GetMeshLocalPrefix(ot::MeshCoP::MeshLocalPrefixTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP18MeshLocalPrefixTlv18GetMeshLocalPrefixEv(this);
}

__n128 ot::MeshCoP::Dataset::Info::SetNetworkKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[2]  = *a2;
  a1[7].n128_u16[4]  = a1[7].n128_u16[4] & 0xFFFB | 4;
  return result;
}

  ;
}

uint64_t ot::MeshCoP::NetworkKeyTlv::GetNetworkKey(ot::MeshCoP::NetworkKeyTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP13NetworkKeyTlv13GetNetworkKeyEv(this);
}

void ot::MeshCoP::Dataset::Info::SetNetworkName( ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::NameData *a2)
{
  *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFF7 | 8;
}

  ;
}

{
  __ZN2ot7MeshCoP7Dataset4Info14SetNetworkNameERKNS0_8NameDataE(this, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::SetPanId(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 88)  = a2;
  *(_WORD *)(this + 120)  = *(_WORD *)(this + 120) & 0xFF7F | 0x80;
  return this;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info8SetPanIdEt(this, a2);
}

uint64_t ot::MeshCoP::PanIdTlv::GetPanId(ot::MeshCoP::PanIdTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot7MeshCoP8PanIdTlv8GetPanIdEv(this);
}

BOOL ot::MeshCoP::Dataset::Info::SetPendingTimestamp( ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::Timestamp *a2)
{
  BOOL result = ot::MeshCoP::Timestamp::ConvertTo(a2, (uint64_t)this + 16);
  *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFFD | 2;
  return result;
}

  ;
}

{
  return __ZN2ot7MeshCoP7Dataset4Info19SetPendingTimestampERKNS0_9TimestampE(this, a2);
}

uint64_t ot::MeshCoP::PendingTimestampTlv::GetTimestamp(ot::MeshCoP::PendingTimestampTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP19PendingTimestampTlv12GetTimestampEv(this);
}

__n128 ot::MeshCoP::Dataset::Info::SetPskc(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 9ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = *a2;
  *(_WORD *)(a1 + 120)  = *(_WORD *)(a1 + 120) & 0xFDFF | 0x200;
  return result;
}

  ;
}

uint64_t ot::MeshCoP::PskcTlv::GetPskc(ot::MeshCoP::PskcTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP7PskcTlv7GetPskcEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetSecurityPolicy(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 110)  = *a2;
  *(_WORD *)(result + 120)  = *(_WORD *)(result + 120) & 0xFBFF | 0x400;
  return result;
}

  ;
}

void *ot::MeshCoP::Dataset::ConvertTo(unsigned __int16 *a1, _BYTE *a2)
{
  __n128 result = memcpy(a2, a1, a1[130]);
  a2[254]  = a1[130];
  return result;
}

uint64_t ot::MeshCoP::Dataset::Set(uint64_t a1, char a2, unsigned __int16 *a3)
{
  *(_WORD *)(a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 260) = a3[130];
  if (!a2)
  {
    ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)a1, 0x33u);
    ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)a1, 0x34u);
  }

  uint64_t result = ot::MeshCoP::Dataset::GetUpdateTime((ot::MeshCoP::Dataset *)a3);
  *(_DWORD *)(a1 + 256)  = result;
  return result;
}

void ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Dataset *a1, unsigned __int8 a2)
{
  if (v2) {
    ot::MeshCoP::Dataset::RemoveTlv(a1, v2);
  }
}

uint64_t ot::MeshCoP::Dataset::GetUpdateTime(ot::MeshCoP::Dataset *this)
{
  return *((unsigned int *)this + 64);
}

{
  return __ZNK2ot7MeshCoP7Dataset13GetUpdateTimeEv(this);
}

void *ot::MeshCoP::Dataset::SetFrom(_WORD *a1, unsigned __int8 *a2)
{
  a1[130]  = a2[254];
  return memcpy(a1, a2, (unsigned __int16)a1[130]);
}

uint64_t ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset *this, const ot::MeshCoP::Dataset::Info *a2)
{
  uint64_t v28 = this;
  uint64_t v27 = a2;
  unsigned int v26 = 0;
  if ((ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent(a2) & 1) != 0)
  {
    ot::MeshCoP::Dataset::Info::GetActiveTimestamp(v27, (ot::MeshCoP::Timestamp *)v25);
    ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>((uint64_t)this, 0xEu, v25);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::Dataset::Info::GetPendingTimestamp(v27, (ot::MeshCoP::Timestamp *)v24);
    ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>((uint64_t)this, 0x33u, v24);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsDelayPresent(v27) & 1) != 0)
  {
    Delay  = ot::MeshCoP::Dataset::Info::GetDelay(v27);
    ot::MeshCoP::Dataset::SetTlv<unsigned int>((uint64_t)this, 0x34u, &Delay);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsChannelPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::ChannelTlv::Init((ot::MeshCoP::ChannelTlv *)v22);
    Channel  = ot::MeshCoP::Dataset::Info::GetChannel(v27);
    ot::MeshCoP::ChannelTlv::SetChannel((ot::MeshCoP::ChannelTlv *)v22, Channel);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v22);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsWakeupChannelPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::WakeupChannelTlv::Init((ot::MeshCoP::WakeupChannelTlv *)v21);
    WakeupChannel  = ot::MeshCoP::Dataset::Info::GetWakeupChannel(v27);
    ot::MeshCoP::WakeupChannelTlv::SetChannel((ot::MeshCoP::WakeupChannelTlv *)v21, WakeupChannel);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v21);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v20);
    ChannelMasunsigned __int16 k = ot::MeshCoP::Dataset::Info::GetChannelMask(v27);
    ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v20, ChannelMask);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v20);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::Dataset::Info::GetExtendedPanId(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>((uint64_t)this, 2u, v5);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(v27) & 1) != 0)
  {
    MeshLocalPrefix  = (const void *)ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>((uint64_t)this, 7u, MeshLocalPrefix);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::Dataset::Info::GetNetworkKey(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>((uint64_t)this, 5u, v7);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(v27) & 1) != 0)
  {
    ot::MeshCoP::Dataset::Info::GetNetworkName(v27);
    v19[0]  = ot::MeshCoP::NetworkName::GetAsData(v8);
    v19[1]  = v9;
    Buffer  = (const void *)ot::MeshCoP::NameData::GetBuffer((ot::MeshCoP::NameData *)v19);
    unsigned __int8 Length = ot::MeshCoP::NameData::GetLength((ot::MeshCoP::NameData *)v19);
    ot::MeshCoP::Dataset::SetTlv((uint64_t)this, 3u, Buffer, Length);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsPanIdPresent(v27) & 1) != 0)
  {
    PanId  = ot::MeshCoP::Dataset::Info::GetPanId(v27);
    ot::MeshCoP::Dataset::SetTlv<unsigned short>((uint64_t)this, 1u, &PanId);
    IgnoreError();
  }

  if ((ot::MeshCoP::Dataset::Info::IsPskcPresent(v27) & 1) != 0)
  {
    ot::MeshCoP::Dataset::Info::GetPskc(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::Pskc>((uint64_t)this, 4u, v11);
    IgnoreError();
  }

  IsSecurityPolicyPresent  = (ot::TimerMilli *)ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(v27);
  if ((IsSecurityPolicyPresent & 1) != 0)
  {
    ot::MeshCoP::SecurityPolicyTlv::Init((ot::MeshCoP::SecurityPolicyTlv *)v17);
    ot::MeshCoP::Dataset::Info::GetSecurityPolicy(v27);
    ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy((ot::MeshCoP::SecurityPolicyTlv *)v17, v13);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v17);
    IgnoreError();
  }

  *((_DWORD *)this + 6ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = ot::TimerMilli::GetNow(IsSecurityPolicyPresent);
  return v26;
}

uint64_t ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent(ot::MeshCoP::Dataset::Info *this)
{
  return *((_WORD *)this + 60) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info24IsActiveTimestampPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetActiveTimestamp( ot::MeshCoP::Dataset::Info *this, ot::MeshCoP::Timestamp *a2)
{
  return ot::MeshCoP::Timestamp::SetFromTimestamp(a2, (uint64_t)this);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info18GetActiveTimestampERNS0_9TimestampE(this, a2);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 8u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvINS0_9TimestampEEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 1) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info25IsPendingTimestampPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetPendingTimestamp( ot::MeshCoP::Dataset::Info *this, ot::MeshCoP::Timestamp *a2)
{
  return ot::MeshCoP::Timestamp::SetFromTimestamp(a2, (uint64_t)this + 16);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info19GetPendingTimestampERNS0_9TimestampE(this, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsDelayPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 6) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info14IsDelayPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<unsigned int>(uint64_t a1, unsigned __int8 a2, unsigned int *a3)
{
  uint64_t v8 = a1;
  unsigned __int8 v7 = a2;
  uint64_t v6 = a3;
  int v5 = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*a3);
  return ot::MeshCoP::Dataset::SetTlv(a1, v7, &v5, 4u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvIjEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::Info::GetDelay(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned int *)this + 21);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info8GetDelayEv(this);
}

uint64_t ot::MeshCoP::ChannelTlv::Init(ot::MeshCoP::ChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return __ZN2ot7MeshCoP10ChannelTlv4InitEv(this);
}

uint64_t ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Dataset *this, const ot::MeshCoP::Tlv *a2)
{
  unsigned __int8 Type = ot::MeshCoP::Tlv::GetType(a2);
  uint64_t Value = (const void *)ot::Tlv::GetValue(a2);
  unsigned __int8 Length = ot::Tlv::GetLength(a2);
  return ot::MeshCoP::Dataset::SetTlv((uint64_t)this, Type, Value, Length);
}

uint64_t ot::MeshCoP::Dataset::Info::IsWakeupChannelPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 12) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info22IsWakeupChannelPresentEv(this);
}

uint64_t ot::MeshCoP::WakeupChannelTlv::Init(ot::MeshCoP::WakeupChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return __ZN2ot7MeshCoP16WakeupChannelTlv4InitEv(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetWakeupChannel(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned __int16 *)this + 46);
}

{
  return __ZNK2ot7MeshCoP7Dataset4Info16GetWakeupChannelEv(this);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>( uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 8u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvINS0_13ExtendedPanIdEEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 8u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvINS_3Ip613NetworkPrefixEEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 0x10u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvINS_10NetworkKeyEEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv(uint64_t a1, unsigned __int8 a2, const void *a3, unsigned __int8 a4)
{
  uint64_t v14 = a1;
  char v13 = a2;
  int v12 = a3;
  unsigned __int8 v11 = a4;
  *(_DWORD *)&v10[2]  = 0;
  *(_DWORD *)uint64_t v10 = (unsigned __int16)(254 - *(_WORD *)(a1 + 260));
  ot::MeshCoP::Dataset::GetTlv(a1, a2);
  uint64_t v9 = v4;
  if (v4) {
    *(_WORD *)v10 += ot::Tlv::GetLength(v9) + 2;
  }
  if ((unint64_t)v11 + 2 <= *(unsigned __int16 *)v10)
  {
    if (v9) {
      ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)a1, v9);
    }
    ot::MeshCoP::Tlv::SetType(&v8, v13);
    ot::Tlv::SetLength((uint64_t)&v8, v11);
    *(_WORD *)(a1 + *(unsigned __int16 *)(a1 + 260))  = v8;
    *(_WORD *)(a1 + 260) += 2;
    int v5 = (ot::TimerMilli *)memcpy((void *)(a1 + *(unsigned __int16 *)(a1 + 260)), v12, v11);
    *(_WORD *)(a1 + 260) += v11;
    *(_DWORD *)(a1 + 256)  = ot::TimerMilli::GetNow(v5);
  }

  else
  {
    *(_DWORD *)&v10[2]  = 3;
  }

  return *(unsigned int *)&v10[2];
}

uint64_t ot::MeshCoP::Dataset::SetTlv<unsigned short>(uint64_t a1, unsigned __int8 a2, unsigned __int16 *a3)
{
  uint64_t v8 = a1;
  unsigned __int8 v7 = a2;
  uint64_t v6 = a3;
  __int16 v5 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*a3);
  return ot::MeshCoP::Dataset::SetTlv(a1, v7, &v5, 2u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvItEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::Pskc>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 0x10u);
}

{
  return __ZN2ot7MeshCoP7Dataset6SetTlvINS_4PskcEEE7otErrorNS0_3Tlv4TypeERKT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::Init(ot::MeshCoP::SecurityPolicyTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 4);
}

{
  return __ZN2ot7MeshCoP17SecurityPolicyTlv4InitEv(this);
}

uint64_t ot::MeshCoP::Dataset::GetTimestamp(unsigned __int16 *a1, char a2, void *a3)
{
  unsigned int v6 = 0;
  if (a2)
  {
    ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PendingTimestampTlv>(a1);
    if (v4) {
      *a3  = *(void *)ot::MeshCoP::PendingTimestampTlv::GetTimestamp(v4);
    }
    else {
      return 23;
    }
  }

  else
  {
    ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(a1);
    if (v3) {
      *a3  = *(void *)ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(v3);
    }
    else {
      return 23;
    }
  }

  return v6;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(unsigned __int16 *a1)
{
}

{
  __ZNK2ot7MeshCoP7Dataset6GetTlvINS0_18ActiveTimestampTlvEEEPKT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PendingTimestampTlv>(unsigned __int16 *a1)
{
}

{
  __ZNK2ot7MeshCoP7Dataset6GetTlvINS0_19PendingTimestampTlvEEEPKT_v(a1);
}

void ot::MeshCoP::Dataset::SetTimestamp(uint64_t a1, char a2, const void *a3)
{
  if (a2) {
    unsigned __int8 v3 = 51;
  }
  else {
    unsigned __int8 v3 = 14;
  }
  ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>(a1, v3, a3);
  IgnoreError();
}

void ot::MeshCoP::Dataset::GetTlv(uint64_t a1, unsigned __int8 a2)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvENS0_3Tlv4TypeE(a1, a2);
}

void *ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Dataset *this, ot::MeshCoP::Tlv *a2)
{
  unsigned __int16 v4 = ot::Tlv::GetLength(a2) + 2;
  uint64_t result = memmove( a2,  (char *)a2 + v4,  *((unsigned __int16 *)this + 130) - (v4 + ((_BYTE)a2 - (_BYTE)this)));
  *((_WORD *)this + 130) -= v4;
  return result;
}

uint64_t ot::MeshCoP::Dataset::ReadFromMessage( ot::MeshCoP::Dataset *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v7 = 6;
  if (a4 <= 0xFEu && !ot::Message::Read(a2, a3, (char *)this, a4))
  {
    *((_WORD *)this + 130)  = a4;
    IsValid  = (ot::TimerMilli *)ot::MeshCoP::Dataset::IsValid(this);
    if ((IsValid & 1) != 0)
    {
      *((_DWORD *)this + 6ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = ot::TimerMilli::GetNow(IsValid);
      return 0;
    }

    else
    {
      return 6;
    }
  }

  return v7;
}

uint64_t ot::MeshCoP::Dataset::AppendMleDatasetTlv(uint64_t a1, char a2, ot::Message *a3)
{
  uint64_t v23 = a1;
  char v22 = a2;
  uint64_t v21 = a3;
  unsigned int v20 = 0;
  if (*(_WORD *)(a1 + 260))
  {
    char v3 = v22 ? 25 : 24;
    char v18 = v3;
    ot::Mle::Tlv::SetType(v19, v3);
    ot::Tlv::SetLength((uint64_t)v19, *(_WORD *)(a1 + 260) - 10);
    unsigned int v20 = ot::Message::Append<ot::Mle::Tlv>(v21, v19);
    if (!v20)
    {
      ot::MeshCoP::Dataset::GetTlvsStart((ot::MeshCoP::Dataset *)a1);
      for (uint64_t i = v4; ; uint64_t i = v9)
      {
        unsigned __int8 v11 = i;
        if ((v22 || ot::MeshCoP::Tlv::GetType(i) != 14)
          && (v22 != 1 || ot::MeshCoP::Tlv::GetType(i) != 51))
        {
          unsigned __int8 Type = (ot::TimerMilli *)ot::MeshCoP::Tlv::GetType(i);
          if (Type == 52)
          {
            int Now = ot::TimerMilli::GetNow(Type);
            unsigned int v16 = ot::Time::operator-(&Now, (_DWORD *)(a1 + 256));
            ot::As<ot::MeshCoP::DelayTimerTlv>();
            int v13 = *v6;
            __int16 v14 = *((_WORD *)v6 + 2);
            DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13);
            if (DelayTimer <= v16)
            {
              ot::MeshCoP::DelayTimerTlv::SetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13, 0);
            }

            else
            {
              int v8 = ot::MeshCoP::DelayTimerTlv::GetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13);
              ot::MeshCoP::DelayTimerTlv::SetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13, v8 - v16);
            }

            unsigned int v20 = ot::Tlv::AppendTo((ot::Tlv *)&v13, v21);
            if (v20) {
              return v20;
            }
          }

          else
          {
            unsigned int v20 = ot::Tlv::AppendTo(i, v21);
            if (v20) {
              return v20;
            }
          }
        }

        ot::MeshCoP::Tlv::GetNext(i);
      }
    }
  }

  return v20;
}

uint64_t ot::Message::Append<ot::Mle::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_3Mle3TlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::MeshCoP::DelayTimerTlv::SetDelayTimer(ot::MeshCoP::DelayTimerTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP13DelayTimerTlv13SetDelayTimerEj(this, a2);
}

uint64_t ot::MeshCoP::Dataset::ApplyConfiguration(ot::MeshCoP::Dataset *this, ot::Instance *a2, BOOL *a3)
{
  unsigned int v9 = 0;
  if ((ot::MeshCoP::Dataset::IsValid(this) & 1) != 0)
  {
    if (a3) {
      *a3  = 0;
    }
    ot::MeshCoP::Dataset::GetTlvsStart(this);
    for (uint64_t i = v3; (unint64_t)i < ot::MeshCoP::Dataset::GetTlvsEnd(this); uint64_t i = v4)
    {
      unint64_t Type = ot::MeshCoP::Tlv::GetType(i);
      if (Type <= 0x4A) {
        __asm { BR              X8 }
      }

      ot::MeshCoP::Tlv::GetNext(i);
    }
  }

  else
  {
    return 6;
  }

  return v9;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>(unsigned __int16 *a1)
{
}

{
  __ZNK2ot7MeshCoP7Dataset6GetTlvINS0_16WakeupChannelTlvEEEPKT_v(a1);
}

BOOL ot::Unequatable<ot::NetworkKey>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::NetworkKey>::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_10NetworkKeyEEneERKS1_(a1, a2);
}

void ot::MeshCoP::Dataset::ConvertToActive(ot::MeshCoP::Dataset *this)
{
}

const char *ot::MeshCoP::Dataset::TypeToString(char a1)
{
  if (a1) {
    return "Pending";
  }
  else {
    return "Active";
  }
}

uint64_t ot::Tlv::GetNext(ot::Tlv *this)
{
  return (uint64_t)this + ot::Tlv::GetSize(this);
}

  ;
}

{
  return (uint64_t)this + ot::Tlv::GetSize(this);
}

{
  return __ZN2ot3Tlv7GetNextEv(this);
}

{
  return __ZNK2ot3Tlv7GetNextEv(this);
}

uint64_t ot::MeshCoP::DatasetLocal::DatasetLocal(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(a1 + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  *(_BYTE *)(a1 + 13) &= ~1u;
  *(_BYTE *)(a1 + 13) &= ~2u;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)(a1 + 16));
  ot::Clearable<ot::MeshCoP::Timestamp>::Clear((void *)a1);
  ot::MeshCoP::Dataset::Clear(a1 + 16);
  return a1;
}

{
  ot::MeshCoP::DatasetLocal::DatasetLocal(a1, a2, a3);
  return a1;
}

void *ot::Clearable<ot::MeshCoP::Timestamp>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_7MeshCoP9TimestampEE5ClearEv(result);
}

void *ot::MeshCoP::DatasetLocal::Clear(ot::MeshCoP::DatasetLocal *this)
{
  uint64_t result = ot::Clearable<ot::MeshCoP::Timestamp>::Clear(this);
  *((_BYTE *)this + 13) &= ~1u;
  *((_BYTE *)this + 13) &= ~2u;
  return result;
}

uint64_t ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::DatasetLocal *this, ot::MeshCoP::Dataset *a2)
{
  *((_BYTE *)this + 13) &= ~1u;
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Read(this, a2);
  if (!v4)
  {
    *((_BYTE *)this + 13)  = *((_BYTE *)this + 13) & 0xFD | 2;
    *((_BYTE *)this + 13)  = *((_BYTE *)this + 13) & 0xFE | (ot::MeshCoP::Dataset::GetTimestamp( (unsigned __int16 *)a2,  *((_BYTE *)this + 12),  this) == 0);
  }

  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::DatasetLocal *this, ot::MeshCoP::Dataset *a2)
{
  uint64_t v15 = this;
  __int16 v14 = a2;
  if (*((_WORD *)this + 138))
  {
    memcpy(v14, (char *)this + 16, 0x106uLL);
    unsigned int v11 = 0;
  }

  else
  {
    unsigned int v11 = 23;
  }

  if (!v11)
  {
    if (*((_BYTE *)this + 12))
    {
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>((uint64_t)v14);
      int v13 = v3;
      if (!v3) {
        return v11;
      }
      int Now = ot::TimerMilli::GetNow(v3);
      unsigned int v12 = ot::Time::operator-(&Now, (_DWORD *)this + 2);
      DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v13);
      if (DelayTimer <= v12)
      {
        uint64_t v2 = (ot::TimerMilli *)ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v13, 0);
      }

      else
      {
        unsigned int v7 = v13;
        int v5 = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v13);
        uint64_t v2 = (ot::TimerMilli *)ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v7, v5 - v12);
      }
    }

    else
    {
      ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)v14, 0x33u);
      ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)v14, 0x34u);
    }

    int v9 = ot::TimerMilli::GetNow(v2);
    *((_DWORD *)v14 + 6ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = v9;
    return v11;
  }

  *((_WORD *)v14 + 130)  = 0;
  return v11;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_13DelayTimerTlvEEEPT_v(a1);
}

uint64_t ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::DatasetLocal *this, ot::MeshCoP::Dataset::Info *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Read(this, (ot::MeshCoP::Dataset *)v6);
  if (!v4) {
    ot::MeshCoP::Dataset::ConvertTo((ot::MeshCoP::Dataset *)v6, a2);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::DatasetLocal *a1, _BYTE *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Read(a1, (ot::MeshCoP::Dataset *)v6);
  if (!v4) {
    ot::MeshCoP::Dataset::ConvertTo(v6, a2);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Save( ot::MeshCoP::DatasetLocal *this, const ot::MeshCoP::Dataset::Info *a2)
{
  unsigned int v4 = ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v6, a2);
  if (!v4) {
    return ot::MeshCoP::DatasetLocal::Save(this, (const ot::MeshCoP::Dataset *)v6);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::DatasetLocal *this, const ot::MeshCoP::Dataset *a2)
{
  unsigned int v19 = 0;
  if (!(unsigned __int16)ot::MeshCoP::Dataset::GetSize(a2))
  {
    ot::MeshCoP::Dataset::Clear((uint64_t)this + 16);
    *((_BYTE *)this + 13) &= ~2u;
    char v2 = ot::MeshCoP::Dataset::TypeToString(*((_BYTE *)this + 12));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetLocal", "%s dataset deleted", v3, v4, v5, v6, v7, v8, v2);
LABEL_6:
    Timestamp  = (ot::TimerMilli *)ot::MeshCoP::Dataset::GetTimestamp( (unsigned __int16 *)a2,  *((_BYTE *)this + 12),  this);
    *((_BYTE *)this + 13)  = *((_BYTE *)this + 13) & 0xFE | ((_DWORD)Timestamp == 0);
    *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::TimerMilli::GetNow(Timestamp);
    return v19;
  }

  memcpy((char *)this + 16, a2, 0x106uLL);
  if ((ot::MeshCoP::Dataset::IsValid((ot::MeshCoP::DatasetLocal *)((char *)this + 16)) & 1) != 0)
  {
    *((_BYTE *)this + 13)  = *((_BYTE *)this + 13) & 0xFD | 2;
    char v9 = ot::MeshCoP::Dataset::TypeToString(*((_BYTE *)this + 12));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetLocal", "%s dataset set", v10, v11, v12, v13, v14, v15, v9);
    goto LABEL_6;
  }

  return 7;
}

uint64_t ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::DatasetLocal *a1, unsigned __int8 *a2)
{
  return ot::MeshCoP::DatasetLocal::Save(a1, (const ot::MeshCoP::Dataset *)v5);
}

  ;
}

uint64_t __cxx_global_var_init_6()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_6()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_dataset_local_cpp()
{
  return __cxx_global_var_init_1_6();
}

BOOL otIp4IsAddressEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  ot::AsCoreType<otIp4Address>(a2);
  return ot::Equatable<ot::Ip4::Address>::operator==(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp4Address>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

BOOL ot::Equatable<ot::Ip4::Address>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 4uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_3Ip47AddressEEeqERKS2_(a1, a2);
}

void otIp4ExtractFromIp6Address(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  ot::AsCoreType<otIp6Address>(a2);
  ot::Ip4::Address::ExtractFromIp6Address(v5, a1, v4);
}

uint64_t otIp4AddressFromString(const char *a1, uint64_t a2)
{
  if (!a1) {
    __assert_rtn("otIp4AddressFromString", "nat64_api.cpp", 145, "(aString) != nullptr");
  }
  ot::AsCoreType<otIp4Address>(a2);
  return ot::Ip4::Address::FromString(v2, a1, 0LL);
}

uint64_t otNat64SynthesizeIp6Address(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  uint64_t v13 = a3;
  unsigned int v12 = 0;
  ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  if (ot::NetworkData::LeaderBase::GetPreferredNat64Prefix( v4,  (ot::NetworkData::ExternalRouteConfig *)v11))
  {
    return 13;
  }

  else
  {
    ot::AsCoreType<otIp6Address>(v13);
    uint64_t v10 = v5;
    ot::NetworkData::ExternalRouteConfig::GetPrefix((ot::NetworkData::ExternalRouteConfig *)v11);
    char v9 = v6;
    ot::AsCoreType<otIp4Address>(v14);
    ot::Ip6::Address::SynthesizeFromIp4Address(v10, v9, v7);
  }

  return v12;
}

void ot::NetworkData::ExternalRouteConfig::GetPrefix(ot::NetworkData::ExternalRouteConfig *this)
{
}

{
  ot::AsCoreType<otIp6Prefix>((uint64_t)this);
}

{
  __ZN2ot11NetworkData19ExternalRouteConfig9GetPrefixEv(this);
}

{
  __ZNK2ot11NetworkData19ExternalRouteConfig9GetPrefixEv(this);
}

ot::StringWriter *otIp4AddressToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp4AddressToString", "nat64_api.cpp", 164, "(aBuffer) != nullptr");
  }
  ot::AsCoreType<otIp4Address>(a1);
  return ot::Ip4::Address::ToString(v3, a2, a3);
}

uint64_t otIp4CidrFromString(ot *a1, uint64_t a2)
{
  return ot::Ip4::Cidr::FromString(v2, a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp4Cidr>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

ot::StringWriter *otIp4CidrToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp4CidrToString", "nat64_api.cpp", 173, "(aBuffer) != nullptr");
  }
  ot::AsCoreType<otIp4Cidr>(a1);
  return ot::Ip4::Cidr::ToString(v3, a2, a3);
}

uint64_t ot::MeshCoP::DatasetManager::DatasetManager( uint64_t a1, ot::Instance *a2, char a3, void (*a4)(ot::Timer *))
{
  *(_BYTE *)(a1 + 292) &= ~1u;
  *(_BYTE *)(a1 + 292) &= ~2u;
  ot::TimerMilli::TimerMilli((ot::TimerMilli *)(a1 + 296), a2, a4);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)(a1 + 320));
  ot::Clearable<ot::MeshCoP::Timestamp>::Clear((void *)(a1 + 284));
  return a1;
}

{
  ot::MeshCoP::DatasetManager::DatasetManager(a1, a2, a3, a4);
  return a1;
}

uint64_t ot::MeshCoP::PendingDatasetManager::HandleDelayTimer(ot::MeshCoP::PendingDatasetManager *this)
{
  char v18 = this;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v19);
  ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v19);
  IgnoreError();
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>((uint64_t)v19);
  uint64_t v17 = v7;
  if (v7
    && (int v15 = ot::Timer::GetFireTime((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336)),
        UpdateTime  = ot::MeshCoP::Dataset::GetUpdateTime((ot::MeshCoP::Dataset *)v19),
        unsigned int v16 = ot::Time::operator-(&v15, &UpdateTime),
        DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v17),
        v16 < DelayTimer))
  {
    FireTime  = ot::Timer::GetFireTime((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336));
    return ot::TimerMilli::StartAt( (ot::MeshCoP::PendingDatasetManager *)((char *)this + 336),  FireTime,  DelayTimer - v16);
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "pending delay timer expired",  v1,  v2,  v3,  v4,  v5,  v6,  v10);
    ot::MeshCoP::Dataset::ConvertToActive((ot::MeshCoP::Dataset *)v19);
    active  = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
    ot::MeshCoP::ActiveDatasetManager::Save(active, (const ot::MeshCoP::Dataset *)v19);
    return ot::MeshCoP::PendingDatasetManager::Clear(this);
  }

uint64_t ot::MeshCoP::DatasetManager::GetTimestamp(ot::MeshCoP::DatasetManager *this)
{
  if ((*((_BYTE *)this + 292) & 1) != 0) {
    return (uint64_t)this + 284;
  }
  else {
    return 0LL;
  }
}

uint64_t ot::MeshCoP::DatasetManager::Restore(ot::MeshCoP::DatasetManager *this)
{
  *((_BYTE *)this + 292) &= ~1u;
  unsigned int v5 = ot::MeshCoP::DatasetLocal::Restore((ot::MeshCoP::DatasetManager *)((char *)this + 4), (ot::MeshCoP::Dataset *)v6);
  if (!v5)
  {
    char Type = ot::MeshCoP::DatasetManager::GetType(this);
    *((_BYTE *)this + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 292) & 0xFE | (ot::MeshCoP::Dataset::GetTimestamp( v6,  Type,  (ot::MeshCoP::DatasetManager *)((char *)this + 284)) == 0);
    if (ot::MeshCoP::DatasetManager::IsActiveDataset(this))
    {
      Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
      ot::MeshCoP::Dataset::ApplyConfiguration((ot::MeshCoP::Dataset *)v6, Instance, 0LL);
      IgnoreError();
    }

    ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
  }

  return v5;
}

uint64_t ot::MeshCoP::DatasetManager::GetType(ot::MeshCoP::DatasetManager *this)
{
  return ot::MeshCoP::DatasetLocal::GetType((ot::MeshCoP::DatasetManager *)((char *)this + 4));
}

{
  return __ZNK2ot7MeshCoP14DatasetManager7GetTypeEv(this);
}

BOOL ot::MeshCoP::DatasetManager::IsActiveDataset(ot::MeshCoP::DatasetManager *this)
{
  return ot::MeshCoP::DatasetManager::GetType(this) == 0;
}

{
  return __ZNK2ot7MeshCoP14DatasetManager15IsActiveDatasetEv(this);
}

uint64_t ot::MeshCoP::DatasetManager::SignalDatasetChange(ot::MeshCoP::DatasetManager *this)
{
  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  else {
    uint64_t v1 = 0x10000000LL;
  }
  return ot::Notifier::Signal(v4, v1);
}

uint64_t ot::MeshCoP::DatasetManager::ApplyConfiguration(ot::MeshCoP::DatasetManager *this)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v5);
  if (!v4)
  {
    Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
    return ot::MeshCoP::Dataset::ApplyConfiguration((ot::MeshCoP::Dataset *)v5, Instance, 0LL);
  }

  return v4;
}

uint64_t ot::MeshCoP::DatasetManager::Read(ot::MeshCoP::DatasetManager *this, ot::MeshCoP::Dataset *a2)
{
  return ot::MeshCoP::DatasetLocal::Read((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
}

{
  return __ZNK2ot7MeshCoP14DatasetManager4ReadERNS0_7DatasetE(this, a2);
}

uint64_t ot::MeshCoP::DatasetManager::Clear(ot::MeshCoP::DatasetManager *this)
{
  *((_BYTE *)this + 292) &= ~1u;
  ot::MeshCoP::DatasetLocal::Clear((ot::MeshCoP::DatasetManager *)((char *)this + 4));
  ot::TimerMilli::Stop((ot::MeshCoP::DatasetManager *)((char *)this + 296));
  return ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
}

void ot::MeshCoP::DatasetManager::HandleDetach(ot::MeshCoP::DatasetManager *this)
{
}

uint64_t ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
  int v15 = this;
  uint64_t v14 = a2;
  unsigned int v13 = 0;
  BOOL v11 = 0;
  char Type = ot::MeshCoP::DatasetManager::GetType(this);
  if (ot::MeshCoP::Dataset::GetTimestamp( (unsigned __int16 *)a2,  Type,  (ot::MeshCoP::DatasetManager *)((char *)this + 284)) {
    || (*((_BYTE *)this + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 292) & 0xFE | 1, !ot::MeshCoP::DatasetManager::IsActiveDataset(this))
  }
    || (Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this),
        (unsigned int v13 = ot::MeshCoP::Dataset::ApplyConfiguration(v14, Instance, &v11)) == 0))
  {
    if ((*((_BYTE *)this + 292) & 1) != 0) {
      uint64_t v8 = (ot::MeshCoP::DatasetManager *)((char *)this + 284);
    }
    else {
      uint64_t v8 = 0LL;
    }
    Timestamp  = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
    int v12 = ot::MeshCoP::Timestamp::Compare(v8, Timestamp, v5);
    if (!v11 && v12 <= 0)
    {
      if (v12 < 0) {
        ot::TimerMilli::Start((ot::MeshCoP::DatasetManager *)((char *)this + 296), 0x1388u);
      }
      goto LABEL_13;
    }

    unsigned int v13 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetManager *)((char *)this + 4), v14);
    if (!v13)
    {
      uint64_t v6 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      ot::NetworkData::Leader::IncrementVersionAndStableVersion(v6);
LABEL_13:
      ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
    }
  }

  return v13;
}

ot::MeshCoP::DatasetLocal *ot::MeshCoP::DatasetLocal::GetTimestamp(ot::MeshCoP::DatasetLocal *this)
{
  if ((*((_BYTE *)this + 13) & 1) != 0) {
    return this;
  }
  else {
    return 0LL;
  }
}

{
  return __ZNK2ot7MeshCoP12DatasetLocal12GetTimestampEv(this);
}

uint64_t ot::MeshCoP::DatasetManager::Save( ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset::Info *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
  if (!v4) {
    ot::MeshCoP::DatasetManager::HandleDatasetUpdated(this);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetManager::HandleDatasetUpdated(ot::MeshCoP::DatasetManager *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unint64_t Role = ot::Mle::Mle::GetRole(v1);
  if (Role <= 4) {
    __asm { BR              X8 }
  }

  return ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
}

uint64_t ot::MeshCoP::DatasetManager::Save(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetLocal *)(a1 + 4), a2);
  if (!v4) {
    ot::MeshCoP::DatasetManager::HandleDatasetUpdated((ot::MeshCoP::DatasetManager *)a1);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetManager::SaveLocal( ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
  if (!v4) {
    ot::MeshCoP::DatasetManager::HandleDatasetUpdated(this);
  }
  return v4;
}

void ot::MeshCoP::DatasetManager::SendSet(ot::MeshCoP::DatasetManager *this)
{
  char v30 = this;
  uint64_t v28 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v27, Instance);
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v32);
  if ((*((_BYTE *)this + 292) & 2) != 0)
  {
    int appended = 5;
  }

  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsChild(v2)
      || (uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
          ot::Mle::Mle::IsRouter(v3)))
    {
      Timestamp  = (ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(this);
      unsigned int v4 = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
      if ((int)ot::MeshCoP::Timestamp::Compare(Timestamp, v4, v5) < 0)
      {
        if (!ot::MeshCoP::DatasetManager::IsActiveDataset(this)
          || (ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v31),
              uint64_t v6 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this),
              ot::MeshCoP::DatasetManager::Read(v6, (ot::MeshCoP::Dataset *)v31),
              IgnoreError(),
              ot::MeshCoP::Dataset::GetTimestamp(v31, 0, &v26))
          || (uint64_t v7 = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4)),
              ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)&v26, v7, v8)))
        {
          uint64_t v23 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          if (ot::MeshCoP::DatasetManager::IsActiveDataset(this)) {
            unsigned __int8 v9 = 12;
          }
          else {
            unsigned __int8 v9 = 27;
          }
          uint64_t v28 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v23, v9);
          if (v28)
          {
            ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v32);
            IgnoreError();
            char v22 = v28;
            ot::MeshCoP::Dataset::GetBytes((ot::MeshCoP::Dataset *)v32);
            uint64_t v21 = v10;
            Size  = ot::MeshCoP::Dataset::GetSize((ot::MeshCoP::Dataset *)v32);
            int appended = ot::Message::AppendBytes(v22, v21, Size);
            if (!appended)
            {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v27);
              IgnoreError();
              int v12 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
              int appended = ot::Coap::CoapBase::SendMessage( v12,  v28,  (ot::Ip6::MessageInfo *)v27,  (uint64_t)ot::MeshCoP::DatasetManager::HandleMgmtSetResponse,  (uint64_t)this);
              if (!appended)
              {
                char Type = ot::MeshCoP::DatasetManager::GetType(this);
                char v14 = ot::MeshCoP::Dataset::TypeToString(Type);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "Sent %s set to leader",  v15,  v16,  v17,  v18,  v19,  v20,  v14);
              }
            }
          }

          else
          {
            int appended = 3;
          }
        }

        else
        {
          int appended = 13;
        }
      }

      else
      {
        int appended = 24;
      }
    }

    else
    {
      int appended = 13;
    }
  }

  if (appended)
  {
    if (appended == 3) {
      ot::TimerMilli::Start((ot::MeshCoP::DatasetManager *)((char *)this + 296), 0x1388u);
    }
    ot::MeshCoP::LogError((char)"send Dataset set to leader", appended);
    if (v28) {
      ot::Message::Free(v28);
    }
  }

  else
  {
    *((_BYTE *)this + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 292) & 0xFD | 2;
  }

uint64_t ot::MeshCoP::DatasetLocal::GetType(ot::MeshCoP::DatasetLocal *this)
{
  return *((unsigned __int8 *)this + 12);
}

{
  return __ZNK2ot7MeshCoP12DatasetLocal7GetTypeEv(this);
}

uint64_t ot::MeshCoP::DatasetManager::GetChannelMask( ot::MeshCoP::DatasetManager *this, ot::Mac::ChannelMask *a2)
{
  unsigned int v9 = ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v11);
  if (!v9)
  {
    ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>((uint64_t)v11);
    if (v2)
    {
      ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v2);
      if (ChannelMask)
      {
        uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        SupportedChannelMasunsigned __int16 k = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v3);
        Masunsigned __int16 k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
        ot::Mac::ChannelMask::SetMask(a2, ChannelMask & Mask);
        if (ot::Mac::ChannelMask::IsEmpty(a2)) {
          return 23;
        }
      }
    }

    else
    {
      return 23;
    }
  }

  return v9;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_14ChannelMaskTlvEEEPT_v(a1);
}

void ot::MeshCoP::DatasetManager::HandleTimer(ot::MeshCoP::DatasetManager *this)
{
}

BOOL ot::Mle::Mle::IsRouter(ot::Mle::Mle *this)
{
  return *((_BYTE *)this + 41) == 3;
}

{
  return __ZNK2ot3Mle3Mle8IsRouterEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>( ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP21PendingDatasetManagerEEERT_v(a1);
}

uint64_t ot::MeshCoP::DatasetManager::HandleMgmtSetResponse( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  BOOL v11 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(a1, v11, v5, (unsigned __int16 *)a4, v6, v7, v8, v9);
}

uint64_t ot::MeshCoP::DatasetManager::HandleMgmtSetResponse( uint64_t a1, ot::Tlv *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  v19[1]  = a4;
  unsigned __int8 v18 = 0;
  v19[0]  = a4;
  if (!(_DWORD)a4)
  {
    if (ot::Tlv::Find<ot::MeshCoP::StateTlv>(v21, &v18, a3, a4))
    {
      v19[0]  = 6;
    }

    else if (v18 == 1)
    {
      v19[0]  = 0;
    }

    else if (v18 == 255)
    {
      v19[0]  = 37;
    }

    else
    {
      v19[0]  = 6;
    }
  }

  if (v19[0])
  {
    char v15 = ot::ErrorToString(v19[0]);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "MGMT_SET finished: %s",  v8,  v9,  v10,  v11,  v12,  v13,  v15);
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "MGMT_SET finished: %s",  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  (char)"Accepted");
  }

  *(_BYTE *)(a1 + 292) &= ~2u;
  if (ot::CallbackBase<void (*)(otError,void *)>::IsSet((void *)(a1 + 320)))
  {
    __int128 v17 = *(_OWORD *)(a1 + 320);
    ot::CallbackBase<void (*)(otError,void *)>::Clear((void *)(a1 + 320));
    ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>((uint64_t)&v17, v19);
  }

  return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 296), 0x1388u);
}

BOOL ot::CallbackBase<void (*)(otError,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFv7otErrorPvEE5IsSetEv(a1);
}

void *ot::CallbackBase<void (*)(otError,void *)>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFv7otErrorPvEE5ClearEv(result);
}

uint64_t ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>( uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFv7otErrorPvELNS_23CallbackContextPositionE1EE6InvokeIJRS1_EEEvDpOT_(a1, a2);
}

void ot::MeshCoP::DatasetManager::HandleGet( ot::MeshCoP::DatasetManager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  Offset  = ot::Message::GetOffset(a2);
  unsigned __int8 Length = 0;
  while (Offset < (int)(unsigned __int16)ot::Message::GetLength(v10))
  {
    if (ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v8) == 13)
    {
      unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v8);
      if (Length > 0x3FuLL) {
        unsigned __int8 Length = 63;
      }
      ot::Message::ReadBytes(v10, Offset + 2, v12, Length);
      break;
    }

    Offset += ot::Tlv::GetLength((ot::Tlv *)v8) + 2;
  }

  if (Length && ot::MeshCoP::DatasetManager::IsPendingDataset(this))
  {
    for (unsigned __int8 i = 0; i < (int)Length; ++i)
    {
      if (v12[i] == 52) {
        goto LABEL_17;
      }
    }

    uint64_t v3 = Length++;
    v12[v3]  = 52;
  }

uint64_t ot::Message::Read<ot::MeshCoP::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP3TlvEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::MeshCoP::DatasetManager::IsPendingDataset(ot::MeshCoP::DatasetManager *this)
{
  return ot::MeshCoP::DatasetManager::GetType(this) == 1;
}

{
  return __ZNK2ot7MeshCoP14DatasetManager16IsPendingDatasetEv(this);
}

void ot::MeshCoP::DatasetManager::SendGetResponse( ot::MeshCoP::DatasetManager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 *a4, unsigned __int8 a5)
{
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v25 = ot::Coap::CoapBase::NewPriorityResponseMessage(v5, a2);
  if (v25)
  {
    if (a5)
    {
      for (unsigned __int8 i = 0; i < (int)a5; ++i)
      {
        if (a4[i] == 5)
        {
          uint64_t v9 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v9) + 2) & 1) == 0) {
            continue;
          }
        }

        ot::MeshCoP::Dataset::GetTlv((uint64_t)v32, a4[i]);
        if (v10)
        {
          int v26 = ot::Tlv::AppendTo(v10, v25);
          if (v26) {
            goto LABEL_22;
          }
        }
      }
    }

    else
    {
      ot::MeshCoP::Dataset::GetTlvsStart((ot::MeshCoP::Dataset *)v32);
      for (unsigned __int16 j = v6; (unint64_t)j < ot::MeshCoP::Dataset::GetTlvsEnd((ot::MeshCoP::Dataset *)v32); unsigned __int16 j = v8)
      {
        if (ot::MeshCoP::Tlv::GetType(j) != 5
          || (uint64_t v7 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this),
              (*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v7) + 2) & 1) != 0))
        {
          int v26 = ot::Tlv::AppendTo(j, v25);
          if (v26) {
            goto LABEL_22;
          }
        }

        ot::MeshCoP::Tlv::GetNext(j);
      }
    }

    uint64_t v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    int v26 = ot::Coap::CoapBase::SendMessage(v11, v25, a3);
    if (!v26)
    {
      BOOL v12 = ot::MeshCoP::DatasetManager::GetType(this) == 0;
      uint64_t v13 = "active";
      if (!v12) {
        uint64_t v13 = "pending";
      }
      char v21 = (char)v13;
      ot::Ip6::MessageInfo::GetPeerAddr(a3);
      ot::Ip6::Address::ToString(v14, (ot::StringWriter *)v31);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "sent %s dataset get response to %s",  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }
  }

  else
  {
    int v26 = 3;
  }

uint64_t ot::KeyManager::GetSecurityPolicy(ot::KeyManager *this)
{
  return (uint64_t)this + 180;
}

{
  return __ZNK2ot10KeyManager17GetSecurityPolicyEv(this);
}

uint64_t ot::MeshCoP::DatasetManager::AppendDatasetToMessage( ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset::Info *a2, ot::Message *a3)
{
  unsigned int v7 = ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v10, a2);
  if (!v7)
  {
    ot::MeshCoP::Dataset::GetBytes((ot::MeshCoP::Dataset *)v10);
    uint64_t v6 = v3;
    Size  = ot::MeshCoP::Dataset::GetSize((ot::MeshCoP::Dataset *)v10);
    return ot::Message::AppendBytes(a3, v6, Size);
  }

  return v7;
}

uint64_t ot::MeshCoP::DatasetManager::SendSetRequest( uint64_t a1, const ot::MeshCoP::Dataset::Info *a2, char *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  v35  = a1;
  v34  = a2;
  int v33 = a3;
  v32  = a4;
  uint64_t v31 = a5;
  uint64_t v30 = a6;
  unsigned int appended = 0;
  uint64_t v28 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v27, Instance);
  if ((*(_BYTE *)(a1 + 292) & 2) != 0)
  {
    unsigned int appended = 5;
  }

  else
  {
    uint64_t v22 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
    if (ot::MeshCoP::DatasetManager::IsActiveDataset((ot::MeshCoP::DatasetManager *)a1)) {
      unsigned __int8 v7 = 12;
    }
    else {
      unsigned __int8 v7 = 27;
    }
    uint64_t v28 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v22, v7);
    if (v28)
    {
      uint64_t v8 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>((ot::InstanceLocator *)a1);
      if (!ot::MeshCoP::Commissioner::IsActive(v8)) {
        goto LABEL_18;
      }
      int v26 = &v33[v32];
      char v25 = 0;
      for (unsigned __int8 i = (ot::MeshCoP::Tlv *)v33; i < (ot::MeshCoP::Tlv *)v26; unsigned __int8 i = v9)
      {
        if ((char *)i + 2 > v26)
        {
          unsigned int appended = 7;
          goto LABEL_23;
        }

        if (ot::MeshCoP::Tlv::GetType(i) == 11)
        {
          char v25 = 1;
          break;
        }

        ot::MeshCoP::Tlv::GetNext(i);
      }

      if ((v25 & 1) != 0
        || (char v21 = v28,
            uint64_t v10 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>((ot::InstanceLocator *)a1),
            SessionId  = ot::MeshCoP::Commissioner::GetSessionId(v10),
            (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v21, SessionId)) == 0))
      {
LABEL_18:
        unsigned int appended = ot::MeshCoP::DatasetManager::AppendDatasetToMessage((ot::MeshCoP::DatasetManager *)a1, v34, v28);
        if (!appended && (!v32 || (unsigned int appended = ot::Message::AppendBytes(v28, v33, v32)) == 0))
        {
          ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v27);
          IgnoreError();
          BOOL v12 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
          unsigned int appended = ot::Coap::CoapBase::SendMessage( v12,  v28,  (ot::Ip6::MessageInfo *)v27,  (uint64_t)ot::MeshCoP::DatasetManager::HandleMgmtSetResponse,  a1);
          if (!appended)
          {
            ot::CallbackBase<void (*)(otError,void *)>::Set((void *)(a1 + 320), v31, v30);
            *(_BYTE *)(a1 + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(a1 + 292) & 0xFD | 2;
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "sent dataset set request to leader",  v13,  v14,  v15,  v16,  v17,  v18,  v20);
          }
        }
      }
    }

    else
    {
      unsigned int appended = 3;
    }
  }

void *ot::CallbackBase<void (*)(otError,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFv7otErrorPvEE3SetES4_S2_(result, a2, a3);
}

uint64_t ot::MeshCoP::DatasetManager::SendGetRequest( ot::InstanceLocator *a1, ot::MeshCoP::Dataset::Components *a2, char *a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v39 = a1;
  unsigned __int16 v38 = a2;
  v37  = a3;
  unsigned __int8 v36 = a4;
  v35  = a5;
  unsigned int appended = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v32, Instance);
  unsigned __int8 v30 = 0;
  if ((ot::MeshCoP::Dataset::Components::IsActiveTimestampPresent(v38) & 1) != 0)
  {
    unsigned __int8 v30 = 1;
    v40[0]  = 14;
  }

  if ((ot::MeshCoP::Dataset::Components::IsPendingTimestampPresent(v38) & 1) != 0)
  {
    uint64_t v6 = v30++;
    v40[v6]  = 51;
  }

  if ((ot::MeshCoP::Dataset::Components::IsNetworkKeyPresent(v38) & 1) != 0)
  {
    uint64_t v7 = v30++;
    v40[v7]  = 5;
  }

  if ((ot::MeshCoP::Dataset::Components::IsNetworkNamePresent(v38) & 1) != 0)
  {
    uint64_t v8 = v30++;
    v40[v8]  = 3;
  }

  if ((ot::MeshCoP::Dataset::Components::IsExtendedPanIdPresent(v38) & 1) != 0)
  {
    uint64_t v9 = v30++;
    v40[v9]  = 2;
  }

  if ((ot::MeshCoP::Dataset::Components::IsMeshLocalPrefixPresent(v38) & 1) != 0)
  {
    uint64_t v10 = v30++;
    v40[v10]  = 7;
  }

  if ((ot::MeshCoP::Dataset::Components::IsDelayPresent(v38) & 1) != 0)
  {
    uint64_t v11 = v30++;
    v40[v11]  = 52;
  }

  if ((ot::MeshCoP::Dataset::Components::IsPanIdPresent(v38) & 1) != 0)
  {
    uint64_t v12 = v30++;
    v40[v12]  = 1;
  }

  if ((ot::MeshCoP::Dataset::Components::IsChannelPresent(v38) & 1) != 0)
  {
    uint64_t v13 = v30++;
    v40[v13]  = 0;
  }

  if ((ot::MeshCoP::Dataset::Components::IsPskcPresent(v38) & 1) != 0)
  {
    uint64_t v14 = v30++;
    v40[v14]  = 4;
  }

  if ((ot::MeshCoP::Dataset::Components::IsSecurityPolicyPresent(v38) & 1) != 0)
  {
    uint64_t v15 = v30++;
    v40[v15]  = 12;
  }

  if ((ot::MeshCoP::Dataset::Components::IsChannelMaskPresent(v38) & 1) != 0)
  {
    uint64_t v16 = v30++;
    v40[v16]  = 53;
  }

  uint64_t v28 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  if (ot::MeshCoP::DatasetManager::IsActiveDataset(a1)) {
    unsigned __int8 v17 = 11;
  }
  else {
    unsigned __int8 v17 = 25;
  }
  int v33 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v28, v17);
  if (v33)
  {
    if (v36 + v30 <= 0
      || (ot::MeshCoP::Tlv::SetType(&v31, 13),
          ot::Tlv::SetLength((uint64_t)&v31, v36 + v30),
          (unsigned int appended = ot::Message::Append<ot::MeshCoP::Tlv>(v33, (char *)&v31)) == 0)
      && (!v30 || (unsigned int appended = ot::Message::AppendBytes(v33, v40, v30)) == 0)
      && (!v36 || (unsigned int appended = ot::Message::AppendBytes(v33, v37, v36)) == 0))
    {
      ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v32);
      IgnoreError();
      if (v35)
      {
        ot::AsCoreType<otIp6Address>(v35);
        ot::Ip6::MessageInfo::SetPeerAddr(v32, v18);
      }

      uint64_t v19 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      unsigned int appended = ot::Coap::CoapBase::SendMessage(v19, v33, (const ot::Ip6::MessageInfo *)v32);
      if (!appended) {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "sent dataset get request",  v20,  v21,  v22,  v23,  v24,  v25,  v27);
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v33) {
    ot::Message::Free(v33);
  }
  return appended;
}

uint64_t ot::MeshCoP::Dataset::Components::IsActiveTimestampPresent(ot::MeshCoP::Dataset::Components *this)
{
  return *(_WORD *)this & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components24IsActiveTimestampPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsPendingTimestampPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 1) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components25IsPendingTimestampPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsNetworkKeyPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 2) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components19IsNetworkKeyPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsNetworkNamePresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 3) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components20IsNetworkNamePresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsExtendedPanIdPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 4) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components22IsExtendedPanIdPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsMeshLocalPrefixPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 5) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components24IsMeshLocalPrefixPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsDelayPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 6) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components14IsDelayPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsPanIdPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 7) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components14IsPanIdPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsChannelPresent(ot::MeshCoP::Dataset::Components *this)
{
  return HIBYTE(*(unsigned __int16 *)this) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components16IsChannelPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsPskcPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 9) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components13IsPskcPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsSecurityPolicyPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 10) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components23IsSecurityPolicyPresentEv(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsChannelMaskPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 11) & 1;
}

{
  return __ZNK2ot7MeshCoP7Dataset10Components20IsChannelMaskPresentEv(this);
}

ot::MeshCoP::ActiveDatasetManager *ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager( ot::MeshCoP::ActiveDatasetManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager(this, a2);
  return this;
}

void ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::MeshCoP::ActiveDatasetManager *this, ot::Timer *a2)
{
  active  = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  ot::MeshCoP::ActiveDatasetManager::HandleTimer(active);
}

BOOL ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete(ot::MeshCoP::ActiveDatasetManager *this)
{
  BOOL v3 = 0;
  return v3;
}

uint64_t ot::MeshCoP::DatasetLocal::IsSaved(ot::MeshCoP::DatasetLocal *this)
{
  return (*((unsigned __int8 *)this + 13) >> 1) & 1;
}

{
  return __ZNK2ot7MeshCoP12DatasetLocal7IsSavedEv(this);
}

uint64_t ot::MeshCoP::ActiveDatasetManager::IsCommissioned(ot::MeshCoP::ActiveDatasetManager *this)
{
  char v3 = 0;
  if (!ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset::Info *)v4))
  {
    IsChannelPresent  = 0;
    if ((ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent((ot::MeshCoP::Dataset::Info *)v4) & 1) != 0)
    {
      IsChannelPresent  = 0;
      if ((ot::MeshCoP::Dataset::Info::IsNetworkNamePresent((ot::MeshCoP::Dataset::Info *)v4) & 1) != 0)
      {
        IsChannelPresent  = 0;
        if ((ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent((ot::MeshCoP::Dataset::Info *)v4) & 1) != 0)
        {
          IsChannelPresent  = 0;
          if ((ot::MeshCoP::Dataset::Info::IsPanIdPresent((ot::MeshCoP::Dataset::Info *)v4) & 1) != 0) {
            IsChannelPresent  = ot::MeshCoP::Dataset::Info::IsChannelPresent((ot::MeshCoP::Dataset::Info *)v4);
          }
        }
      }
    }

    char v3 = IsChannelPresent & 1;
  }

  return v3 & 1;
}

uint64_t ot::MeshCoP::ActiveDatasetManager::Save( ot::MeshCoP::ActiveDatasetManager *this, const ot::MeshCoP::Timestamp *a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5)
{
  unsigned int v7 = ot::MeshCoP::Dataset::ReadFromMessage((ot::MeshCoP::Dataset *)v12, a3, a4, a5);
  if (!v7)
  {
    ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v12, 0, a2);
    return ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v12);
  }

  return v7;
}

void ot::MeshCoP::ActiveDatasetManager::HandleTmf<(ot::Uri)11>( ot::MeshCoP::DatasetManager *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>( ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP20ActiveDatasetManagerEEERT_v(a1);
}

void ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::MeshCoP::ActiveDatasetManager *this)
{
}

{
  __ZN2ot7MeshCoP20ActiveDatasetManager11HandleTimerEv(this);
}

ot::MeshCoP::PendingDatasetManager *ot::MeshCoP::PendingDatasetManager::PendingDatasetManager( ot::MeshCoP::PendingDatasetManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::PendingDatasetManager::PendingDatasetManager(this, a2);
  return this;
}

void ot::MeshCoP::PendingDatasetManager::HandleTimer( ot::MeshCoP::PendingDatasetManager *this, ot::Timer *a2)
{
  uint64_t v2 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  ot::MeshCoP::PendingDatasetManager::HandleTimer(v2);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::PendingDatasetManager,&ot::MeshCoP::PendingDatasetManager::HandleDelayTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::PendingDatasetManager,&ot::MeshCoP::PendingDatasetManager::HandleDelayTimer>::HandleTimer);
  return a1;
}

uint64_t ot::MeshCoP::PendingDatasetManager::Clear(ot::MeshCoP::PendingDatasetManager *this)
{
  return ot::TimerMilli::Stop((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336));
}

void ot::MeshCoP::PendingDatasetManager::ClearNetwork(ot::MeshCoP::PendingDatasetManager *this)
{
  *((_BYTE *)this + 292) &= ~1u;
  ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v2);
  IgnoreError();
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save( ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Dataset::Info *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::Save(this, a2);
  if (!v4) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
  }
  return v4;
}

void ot::MeshCoP::PendingDatasetManager::StartDelayTimer(ot::MeshCoP::PendingDatasetManager *this)
{
  if (v1)
  {
    DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v1);
    if (DelayTimer > 0x7FFFFFFF) {
      DelayTimer  = 0x7FFFFFFF;
    }
    UpdateTime  = ot::MeshCoP::Dataset::GetUpdateTime((ot::MeshCoP::Dataset *)v12);
    ot::TimerMilli::StartAt((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336), UpdateTime, DelayTimer);
    char v2 = ot::ToUlong(DelayTimer);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "delay timer started %lu",  v3,  v4,  v5,  v6,  v7,  v8,  v2);
  }

uint64_t ot::MeshCoP::PendingDatasetManager::Save( ot::MeshCoP::PendingDatasetManager *a1, unsigned __int8 *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::Save((uint64_t)a1, a2);
  if (!v4) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(a1);
  }
  return v4;
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save( ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::SaveLocal(this, a2);
  if (!v4) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
  }
  return v4;
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save( ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Timestamp *a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5)
{
  unsigned int v7 = ot::MeshCoP::Dataset::ReadFromMessage((ot::MeshCoP::Dataset *)v12, a3, a4, a5);
  if (!v7)
  {
    ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v12, 1, a2);
    unsigned int v7 = ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v12);
    if (!v7) {
      ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
    }
  }

  return v7;
}

void ot::MeshCoP::ActiveDatasetManager::Save( ot::MeshCoP::ActiveDatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
}

{
  __ZN2ot7MeshCoP20ActiveDatasetManager4SaveERKNS0_7DatasetE(this, a2);
}

void ot::MeshCoP::PendingDatasetManager::HandleTmf<(ot::Uri)25>( ot::MeshCoP::DatasetManager *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::MeshCoP::PendingDatasetManager *this)
{
}

  ;
}

{
  __ZN2ot7MeshCoP21PendingDatasetManager11HandleTimerEv(this);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::PendingDatasetManager,&ot::MeshCoP::PendingDatasetManager::HandleDelayTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  char v2 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(a1);
  return ot::MeshCoP::PendingDatasetManager::HandleDelayTimer(v2);
}

uint64_t ot::Ip4::Address::FromString(ot::Ip4::Address *this, const char *a2, unsigned __int8 *a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  char v9 = (char)a3;
  char v8 = 46;
  unsigned int v7 = 6;
  uint64_t v6 = a2;
  for (unsigned __int8 i = 0; !ot::StringParseUint8((ot *)&v6, (const char **)((char *)this + i), a3); ++i)
  {
    if (i == 3LL)
    {
      if (*v6 == v9) {
        return 0;
      }
      return v7;
    }

    if (*v6 != 46) {
      return v7;
    }
    ++v6;
  }

  return v7;
}

void ot::Ip4::Address::ExtractFromIp6Address( ot::Ip4::Address *this, unsigned __int8 a2, const ot::Ip6::Address *a3)
{
  if (!ot::Ip6::Prefix::IsValidNat64PrefixLength((ot::Ip6::Prefix *)a2)) {
    __assert_rtn("ExtractFromIp6Address", "ip4_types.cpp", 93, "Ip6::Prefix::IsValidNat64PrefixLength(aPrefixLength)");
  }
  unsigned __int8 v7 = a2 / 8;
  for (unsigned __int8 i = this; i != (ot::Ip4::Address *)((char *)this + 4); unsigned __int8 i = (ot::Ip4::Address *)((char *)i + 1))
  {
    if (v7 == 8) {
      ++v7;
    }
    ot::Ip6::Address::GetBytes(a3);
    uint64_t v3 = v7++;
    *(_BYTE *)unsigned __int8 i = *(_BYTE *)(v4 + v3);
  }

uint64_t ot::Ip4::Address::SynthesizeFromCidrAndHost( ot::Ip4::Address *this, const ot::Ip4::Cidr *a2, unsigned int a3)
{
  int v5 = *(_DWORD *)a2;
  int v6 = v5 & ot::Ip4::Cidr::SubnetMask(a2);
  unsigned int v8 = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a3);
  int v3 = ot::Ip4::Cidr::HostMask(a2);
  uint64_t result = v8;
  *(_DWORD *)this  = v6 | v8 & v3;
  return result;
}

uint64_t ot::Ip4::Cidr::SubnetMask(ot::Ip4::Cidr *this)
{
  return ~ot::Ip4::Cidr::HostMask(this);
}

{
  return __ZNK2ot3Ip44Cidr10SubnetMaskEv(this);
}

uint64_t ot::Ip4::Cidr::HostMask(ot::Ip4::Cidr *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)(0xFFFFFFFFLL >> *((_BYTE *)this + 4)));
}

{
  return __ZNK2ot3Ip44Cidr8HostMaskEv(this);
}

ot::StringWriter *ot::Ip4::Address::ToString(ot::Ip4::Address *this, ot::StringWriter *a2)
{
  return ot::StringWriter::Append( a2,  "%d.%d.%d.%d",  *(unsigned __int8 *)this,  *((unsigned __int8 *)this + 1),  *((unsigned __int8 *)this + 2),  *((unsigned __int8 *)this + 3));
}

ot::StringWriter *ot::Ip4::Address::ToString(ot::Ip4::Address *this, char *a2, __int16 a3)
{
  unsigned int v8 = this;
  unsigned __int8 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip4::Address::ToString(this, (ot::StringWriter *)v5);
}

ot::StringWriter *ot::Ip4::Address::ToString@<X0>(ot::Ip4::Address *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip4::Address::ToString(this, a2);
}

uint64_t ot::Ip4::Cidr::FromString(ot::Ip4::Cidr *this, ot *a2)
{
  uint64_t v10 = this;
  char v9 = a2;
  char v8 = 47;
  __int16 v7 = 32;
  unsigned int v6 = 6;
  ot::AsCoreType<otIp4Address>((uint64_t)this);
  if (!ot::Ip4::Address::FromString(v2, (const char *)v9, (unsigned __int8 *)0x2F))
  {
    int v5 = ot::StringFind(v9, (const char *)0x2F);
    if (v5)
    {
      int v5 = (ot *)((char *)v5 + 1);
      if (!ot::StringParseUint8((ot *)&v5, (const char **)((char *)this + 4), (unsigned __int8 *)0x20)
        && !*(_BYTE *)v5)
      {
        return 0;
      }
    }
  }

  return v6;
}

ot::StringWriter *ot::Ip4::Cidr::ToString(ot::Ip4::Cidr *this, ot::StringWriter *a2)
{
  int v3 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v7);
  return ot::StringWriter::Append(a2, "%s/%d", v3, *((unsigned __int8 *)this + 4));
}

ot::StringWriter *ot::Ip4::Cidr::ToString(ot::Ip4::Cidr *this, char *a2, __int16 a3)
{
  char v8 = this;
  __int16 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip4::Cidr::ToString(this, (ot::StringWriter *)v5);
}

ot::StringWriter *ot::Ip4::Cidr::ToString@<X0>(ot::Ip4::Cidr *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip4::Cidr::ToString(this, a2);
}

uint64_t ot::String<(unsigned short)20>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 20);
  return a1;
}

BOOL ot::Ip4::Cidr::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v7 = 0;
  if (a1[4] == a2[4])
  {
    ot::Ip4::Cidr::GetBytes((ot::Ip4::Cidr *)a1);
    int v5 = v2;
    ot::Ip4::Cidr::GetBytes((ot::Ip4::Cidr *)a2);
    return a1[4] <= (int)ot::Ip6::Prefix::MatchLength(v5, v3, (const unsigned __int8 *)4);
  }

  return v7;
}

  ;
}

uint64_t ot::Ip4::Cidr::Set(uint64_t this, const unsigned __int8 *a2, char a3)
{
  *(_DWORD *)this  = *(_DWORD *)a2;
  *(_BYTE *)(this + ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = a3;
  return this;
}

uint64_t ot::Ip4::Header::ParseFrom(ot::Ip4::Header *this, const ot::Message *a2)
{
  unsigned int v5 = 6;
  if (!ot::Message::Read<ot::Ip4::Header>(a2, 0, (char *)this) && ot::Ip4::Header::IsValid(this))
  {
    Totalunsigned __int8 Length = (unsigned __int16)ot::Ip4::Header::GetTotalLength(this);
  }

  return v5;
}

uint64_t ot::Message::Read<ot::Ip4::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x14u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip46HeaderEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Ip4::Header::IsValid(ot::Ip4::Header *this)
{
  return ot::Ip4::Header::IsVersion4(this);
}

{
  return __ZNK2ot3Ip46Header7IsValidEv(this);
}

uint64_t ot::Ip4::Header::GetTotalLength(ot::Ip4::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Ip46Header14GetTotalLengthEv(this);
}

BOOL ot::Ip4::Header::IsVersion4(ot::Ip4::Header *this)
{
  return (*(_BYTE *)this & 0xF0) == 64;
}

{
  return __ZNK2ot3Ip46Header10IsVersion4Ev(this);
}

uint64_t ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::MeshCoP::DatasetManager *this, ot::Message *a2)
{
  char Type = ot::MeshCoP::DatasetManager::GetType(this);
  return ot::MeshCoP::Dataset::AppendMleDatasetTlv((uint64_t)v6, Type, a2);
}

uint64_t ot::MeshCoP::DatasetManager::HandleSet( ot::MeshCoP::DatasetManager *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  v78  = this;
  v77  = a2;
  v76  = a3;
  Offset  = ot::Message::GetOffset(a2);
  v73  = 0;
  v72  = 0;
  v71  = 0;
  v70  = 0;
  v69  = -1;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v83);
  int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v3))
  {
    while (Offset < (int)(unsigned __int16)ot::Message::GetLength(v77))
    {
      if (ot::Message::Read<ot::MeshCoP::Tlv>(v77, Offset, v75)
        || ot::Tlv::GetLength((ot::Tlv *)v75) > 0x10u)
      {
        goto LABEL_62;
      }

      Offset += ot::Tlv::GetLength((ot::Tlv *)v75) + 2;
    }

    if (Offset - (unsigned __int16)ot::Message::GetOffset(v77) <= 254
      && !ot::Tlv::Find<ot::MeshCoP::ActiveTimestampTlv>(v77, (uint64_t)v68, v4, v5, v6))
    {
      if (ot::MeshCoP::DatasetManager::GetType(this) == 1)
      {
        Timestamp  = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
      }

      else
      {
        uint64_t v15 = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
      }

      if (!ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(v77, v67, v12, v13, v14))
      {
        if ((ot::MeshCoP::ChannelTlv::IsValid((ot::MeshCoP::ChannelTlv *)v67) & 1) == 0) {
          goto LABEL_62;
        }
        Channel  = (unsigned __int16)ot::MeshCoP::ChannelTlv::GetChannel((ot::MeshCoP::ChannelTlv *)v67);
        uint64_t v19 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      }

      if (!ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(v77, &v65, v17, v18))
      {
        v56  = v65;
        uint64_t v23 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      }

      if (!ot::Tlv::Find<ot::MeshCoP::MeshLocalPrefixTlv>(v77, (uint64_t)v82, v20, v21, v22))
      {
        char v27 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::Mle::GetMeshLocalPrefix(v27);
        if (ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(v82, v28)) {
          v72  = 1;
        }
      }

      if (!ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>(v77, (uint64_t)v81, v24, v25, v26))
      {
        v70  = 1;
        unsigned __int16 v29 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::GetNetworkKey(v29, &v80);
        if (ot::Unequatable<ot::NetworkKey>::operator!=(v81, &v80))
        {
          v72  = 1;
          v71  = 1;
        }
      }

      if (ot::MeshCoP::DatasetManager::GetType(this) != 1
        || (v70 & 1) != 0 && (v71 & 1) != 0
        || (v32  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this),
            v63  = (ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v32),
            (int)ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v68, v63, v33) > 0))
      {
        if (ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v77, &v66, v30, v31)
          || (v73  = 1,
              v34  = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
              ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v34, 0xBu),
              ot::As<ot::MeshCoP::CommissionerSessionIdTlv>(),
              (v62  = v35) != 0LL)
          && (unsigned __int16 v36 = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v62), v66 == v36))
        {
          if ((v73 & 1) == 0 || ot::MeshCoP::DatasetManager::GetType(this) == 1 || (v72 & 1) == 0)
          {
            if ((v73 & 1) != 0)
            {
              active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
              ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset *)v83);
              IgnoreError();
            }

            if (ot::MeshCoP::DatasetManager::GetType(this) != 1 && (v72 & 1) != 0)
            {
              uint64_t v44 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(v44, (const ot::MeshCoP::Timestamp *)v68, v77);
              goto LABEL_58;
            }

            for (Offset  = ot::Message::GetOffset(v77); ; Offset += Size)
            {
              v55  = Offset;
              if (ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage( (ot::MeshCoP::DatasetManager::DatasetTlv *)v79,  v77,  Offset)) {
                goto LABEL_62;
              }
              int Type = ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v79);
              if (Type != 11)
              {
                if (Type == 52)
                {
                  ot::As<ot::MeshCoP::DelayTimerTlv>();
                  v61  = v38;
                  if ((v71 & 1) != 0 && ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v61) < 0x493E0)
                  {
                    ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v61, 0x493E0u);
                  }

                  else
                  {
                    DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v61);
                    uint64_t v39 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
                    if (DelayTimer < ot::MeshCoP::Leader::GetDelayTimerMinimal(v39))
                    {
                      unsigned __int16 v40 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
                      DelayTimerMinimal  = ot::MeshCoP::Leader::GetDelayTimerMinimal(v40);
                      ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v61, DelayTimerMinimal);
                    }
                  }
                }

                if (ot::MeshCoP::Dataset::SetTlv( (ot::MeshCoP::Dataset *)v83,  (const ot::MeshCoP::Tlv *)v79)) {
                  goto LABEL_62;
                }
              }

              Size  = ot::Tlv::GetSize((ot::Tlv *)v79);
            }

            if (!ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v83))
            {
              unint64_t v43 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
              ot::NetworkData::Leader::IncrementVersionAndStableVersion(v43);
LABEL_58:
              v69  = 1;
              if ((v73 & 1) == 0)
              {
                uint64_t v45 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
                ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v45, 0xBu);
                ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
                v60  = v46;
                if (v46)
                {
                  v52  = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                  unsigned __int16 CommissionerSessionId = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v60);
                  if (!ot::Mle::Mle::GetCommissionerAloc( v52,  (ot::Ip6::Address *)&v59,  CommissionerSessionId))
                  {
                    v48  = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
                    ot::MeshCoP::Leader::SendDatasetChanged(v48, &v59);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t ot::Tlv::Find<ot::MeshCoP::ActiveTimestampTlv>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xE, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP18ActiveTimestampTlvEEE7otErrorRKNS_7MessageERNT_9ValueTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::PendingTimestampTlv>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x33, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP19PendingTimestampTlvEEE7otErrorRKNS_7MessageERNT_9ValueTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(a1, a2, a3, a4, a5);
}

{
  return __ZN2ot7MeshCoP3Tlv7FindTlvINS0_10ChannelTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::PanIdTlv>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 1u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP8PanIdTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::MeshLocalPrefixTlv>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)7, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP18MeshLocalPrefixTlvEEE7otErrorRKNS_7MessageERNT_9ValueTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)5, a2, (void *)0x10, a5);
}

{
  return __ZN2ot3Tlv4FindINS_7MeshCoP13NetworkKeyTlvEEE7otErrorRKNS_7MessageERNT_9ValueTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage( ot::MeshCoP::DatasetManager::DatasetTlv *this, const ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v7 = ot::Message::Read(a2, a3, (char *)this, 2u);
  if (!v7)
  {
    if (ot::Tlv::GetLength(this) <= 0x10u)
    {
      unsigned __int8 Length = ot::Tlv::GetLength(this);
      unsigned int v7 = ot::Message::Read(a2, a3 + 2, (char *)this + 2, Length);
      if (!v7 && (ot::MeshCoP::Tlv::IsValid(this, v4) & 1) == 0) {
        return 6;
      }
    }

    else
    {
      return 6;
    }
  }

  return v7;
}

  ;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::Leader>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP6LeaderEEERT_v(a1);
}

void ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset( ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Timestamp *a2, ot::Coap::Message *a3)
{
  uint64_t v10 = this;
  char v9 = a2;
  uint64_t v8 = a3;
  Offset  = ot::Message::GetOffset(a3);
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v12);
  int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsAttached(v3))
  {
    while (Offset < (int)(unsigned __int16)ot::Message::GetLength(v8))
    {
      if (ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage( (ot::MeshCoP::DatasetManager::DatasetTlv *)v11,  v8,  Offset)) {
        return;
      }
      Offset += ot::Tlv::GetSize((ot::Tlv *)v11);
      ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v12, (const ot::MeshCoP::Tlv *)v11);
      IgnoreError();
    }

    uint64_t v4 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
    DelayTimerMinimal  = ot::MeshCoP::Leader::GetDelayTimerMinimal(v4);
    ot::MeshCoP::Dataset::SetTlv<unsigned int>((uint64_t)v12, 0x34u, &DelayTimerMinimal);
    IgnoreError();
    ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v12, 1, v9);
    ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v12);
    IgnoreError();
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
  }

void ot::MeshCoP::DatasetManager::SendSetResponse( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v13 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v13)
  {
    int v14 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)v13, a4);
    if (!v14)
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v14 = ot::Coap::CoapBase::SendMessage(v5, v13, a3);
      if (!v14) {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "sent dataset set response",  v6,  v7,  v8,  v9,  v10,  v11,  (char)a1);
      }
    }
  }

  else
  {
    int v14 = 3;
  }

  if (v14)
  {
    if (v13) {
      ot::Message::Free(v13);
    }
  }

uint64_t ot::MeshCoP::ActiveDatasetManager::GenerateLocal(ot::MeshCoP::ActiveDatasetManager *this)
{
  v52  = this;
  Random  = 0;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v55);
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsAttached(v1))
  {
    if ((ot::MeshCoP::DatasetLocal::IsTimestampPresent((ot::MeshCoP::ActiveDatasetManager *)((char *)this + 4)) & 1) != 0)
    {
      return 24;
    }

    else
    {
      ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v55);
      IgnoreError();
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>((uint64_t)v55);
      if (!v2)
      {
        ot::Clearable<ot::MeshCoP::Timestamp>::Clear(&v50);
        ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>((uint64_t)v55, 0xEu, &v50);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelTlv>((uint64_t)v55);
      if (!v3)
      {
        ot::MeshCoP::ChannelTlv::Init((ot::MeshCoP::ChannelTlv *)v49);
        uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        PanChannel  = ot::Mac::Mac::GetPanChannel(v4);
        ot::MeshCoP::ChannelTlv::SetChannel((ot::MeshCoP::ChannelTlv *)v49, PanChannel);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v49);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>((uint64_t)v55);
      if (!v6)
      {
        ot::MeshCoP::WakeupChannelTlv::Init((ot::MeshCoP::WakeupChannelTlv *)v48);
        uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        WorChannel  = ot::Mac::Mac::GetWorChannel(v7);
        ot::MeshCoP::WakeupChannelTlv::SetChannel((ot::MeshCoP::WakeupChannelTlv *)v48, WorChannel);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v48);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>((uint64_t)v55);
      if (!v9)
      {
        ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v47);
        uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        SupportedChannelMasunsigned __int16 k = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v10);
        Masunsigned __int16 k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
        ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v47, Mask);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v47);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ExtendedPanIdTlv>((uint64_t)v55);
      if (!v13)
      {
        int v14 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
        ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v14);
        ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>((uint64_t)v55, 2u, v15);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::MeshLocalPrefixTlv>((uint64_t)v55);
      if (!v16)
      {
        uint64_t v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::Mle::GetMeshLocalPrefix(v17);
        ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>((uint64_t)v55, 7u, v18);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkKeyTlv>((uint64_t)v55);
      if (!v19)
      {
        uint64_t v20 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::GetNetworkKey(v20, &v54);
        ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>((uint64_t)v55, 5u, &v54);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkNameTlv>((uint64_t)v55);
      if (!v21)
      {
        uint64_t v22 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
        ot::MeshCoP::NetworkNameManager::GetNetworkName(v22);
        v46[0]  = ot::MeshCoP::NetworkName::GetAsData(v23);
        v46[1]  = v24;
        Buffer  = (const void *)ot::MeshCoP::NameData::GetBuffer((ot::MeshCoP::NameData *)v46);
        unsigned __int8 Length = ot::MeshCoP::NameData::GetLength((ot::MeshCoP::NameData *)v46);
        ot::MeshCoP::Dataset::SetTlv((uint64_t)v55, 3u, Buffer, Length);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PanIdTlv>((uint64_t)v55);
      if (!v26)
      {
        char v27 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        PanId  = ot::Mac::Mac::GetPanId(v27);
        ot::MeshCoP::Dataset::SetTlv<unsigned short>((uint64_t)v55, 1u, &PanId);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>((uint64_t)v55);
      if (!v28)
      {
        unsigned __int16 v29 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        if ((ot::KeyManager::IsPskcSet(v29) & 1) != 0)
        {
          uint64_t v30 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          ot::KeyManager::GetPskc(v30, &v53);
        }

        else
        {
          Random  = ot::Pskc::GenerateRandom((ot::Pskc *)&v53);
          if (Random) {
            return Random;
          }
        }

        ot::MeshCoP::Dataset::SetTlv<ot::Pskc>((uint64_t)v55, 4u, &v53);
        IgnoreError();
      }

      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>((uint64_t)v55);
      if (!v31)
      {
        ot::MeshCoP::SecurityPolicyTlv::Init((ot::MeshCoP::SecurityPolicyTlv *)v44);
        v32  = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        SecurityPolicy  = (const ot::SecurityPolicy *)ot::KeyManager::GetSecurityPolicy(v32);
        ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy((ot::MeshCoP::SecurityPolicyTlv *)v44, SecurityPolicy);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v44);
        IgnoreError();
      }

      Random  = ot::MeshCoP::DatasetLocal::Save( (ot::MeshCoP::ActiveDatasetManager *)((char *)this + 4),  (const ot::MeshCoP::Dataset *)v55);
      if (!Random)
      {
        ot::MeshCoP::DatasetManager::Restore(this);
        IgnoreError();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DatasetManager",  "Generated local dataset",  v34,  v35,  v36,  v37,  v38,  v39,  v41);
      }
    }
  }

  else
  {
    return 13;
  }

  return Random;
}

uint64_t ot::MeshCoP::DatasetLocal::IsTimestampPresent(ot::MeshCoP::DatasetLocal *this)
{
  return *((_BYTE *)this + 13) & 1;
}

{
  return __ZNK2ot7MeshCoP12DatasetLocal18IsTimestampPresentEv(this);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_18ActiveTimestampTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_10ChannelTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_16WakeupChannelTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ExtendedPanIdTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_16ExtendedPanIdTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::MeshLocalPrefixTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_18MeshLocalPrefixTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkKeyTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_13NetworkKeyTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkNameTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_14NetworkNameTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PanIdTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_8PanIdTlvEEEPT_v(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_7PskcTlvEEEPT_v(a1);
}

uint64_t ot::KeyManager::IsPskcSet(ot::KeyManager *this)
{
  return *((_BYTE *)this + 184) & 1;
}

{
  return __ZNK2ot10KeyManager9IsPskcSetEv(this);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>(uint64_t a1)
{
}

{
  __ZN2ot7MeshCoP7Dataset6GetTlvINS0_17SecurityPolicyTlvEEEPT_v(a1);
}

void ot::MeshCoP::ActiveDatasetManager::StartLeader(ot::MeshCoP::ActiveDatasetManager *this)
{
}

void ot::MeshCoP::ActiveDatasetManager::HandleTmf<(ot::Uri)12>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && !ot::MeshCoP::DatasetManager::HandleSet(a1, a2, a3))
  {
    ot::MeshCoP::DatasetManager::ApplyConfiguration(a1);
    IgnoreError();
  }

void ot::MeshCoP::PendingDatasetManager::StartLeader(ot::MeshCoP::PendingDatasetManager *this)
{
}

void ot::MeshCoP::PendingDatasetManager::HandleTmf<(ot::Uri)27>( ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
}

uint64_t ot::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, 0LL, 5u, a2, a5);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

{
  return __ZN2ot3Tlv7FindTlvINS_7MeshCoP10ChannelTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

ot::MeshCoP::DatasetUpdater *ot::MeshCoP::DatasetUpdater::DatasetUpdater( ot::MeshCoP::DatasetUpdater *this, ot::Instance *a2)
{
  uint64_t result = this;
  *((void *)this + 5)  = 0LL;
  return result;
}

{
  ot::MeshCoP::DatasetUpdater::DatasetUpdater(this, a2);
  return this;
}

uint64_t ot::MeshCoP::DatasetUpdater::HandleTimer(ot::Message **this)
{
  return ot::MeshCoP::DatasetUpdater::PreparePendingDataset(this);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::MeshCoP::DatasetUpdater::RequestUpdate(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0LL;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
  if (ot::Mle::Mle::IsDisabled(v4))
  {
    unsigned int v9 = 13;
  }

  else if (a1[5])
  {
    unsigned int v9 = 5;
  }

  else if ((ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent((ot::MeshCoP::Dataset::Info *)a2) & 1) != 0 {
         || (ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent((ot::MeshCoP::Dataset::Info *)a2) & 1) != 0)
  }
  {
    unsigned int v9 = 7;
  }

  else
  {
    uint64_t v5 = (ot::Message::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>((ot::InstanceLocator *)a1);
    uint64_t v8 = ot::MessagePool::Allocate(v5, 5);
    if (v8)
    {
      unsigned int v9 = ot::Message::Append<ot::MeshCoP::Dataset::Info>(v8, a2);
      if (!v9)
      {
        ot::CallbackBase<void (*)(otError,void *)>::Set(a1, a3, a4);
        a1[5]  = v8;
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 2), 1u);
      }
    }

    else
    {
      unsigned int v9 = 3;
    }
  }

  if (v9 && v8) {
    ot::Message::Free(v8);
  }
  return v9;
}

uint64_t ot::Message::Append<ot::MeshCoP::Dataset::Info>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x80u);
}

{
  return __ZN2ot7Message6AppendINS_7MeshCoP7Dataset4InfoEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::MeshCoP::DatasetUpdater::CancelUpdate(uint64_t this)
{
  uint64_t v1 = this;
  if (*(void *)(this + 40))
  {
    ot::Message::Free(*(ot::Message **)(this + 40));
    *(void *)(v1 + 40)  = 0LL;
    return ot::TimerMilli::Stop((ot::TimerMilli *)(v1 + 16));
  }

  return this;
}

uint64_t ot::MeshCoP::DatasetUpdater::PreparePendingDataset(ot::Message **this)
{
  uint64_t v13 = this;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v15);
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)this);
  uint64_t result = ot::Mle::Mle::IsDisabled(v1);
  if ((result & 1) != 0)
  {
    unsigned int v12 = 13;
  }

  else
  {
    ot::Message::Read<ot::MeshCoP::Dataset::Info>(this[5], 0, v14);
    IgnoreError();
    active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)this);
    unsigned int v12 = ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset *)v15);
    if (v12)
    {
      uint64_t result = ot::TimerMilli::Start((ot::TimerMilli *)(this + 2), 0x3E8u);
      unsigned int v12 = 0;
    }

    else
    {
      ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v15, (const ot::MeshCoP::Dataset::Info *)v14);
      IgnoreError();
      if ((ot::MeshCoP::Dataset::Info::IsDelayPresent((ot::MeshCoP::Dataset::Info *)v14) & 1) != 0
        || (unsigned int v11 = 30000,
            uint64_t result = ot::MeshCoP::Dataset::SetTlv<unsigned int>((uint64_t)v15, 0x34u, &v11),
            (unsigned int v12 = result) == 0))
      {
        uint64_t v4 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)this);
        if (ot::MeshCoP::DatasetManager::GetTimestamp(v4))
        {
          uint64_t v5 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)this);
          uint64_t v10 = *(void *)ot::MeshCoP::DatasetManager::GetTimestamp(v5);
        }

        ot::MeshCoP::Timestamp::AdvanceRandomTicks((ot::MeshCoP::Timestamp *)&v10);
        ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v15, 1, &v10);
        ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>((uint64_t)v15);
        Timestamp  = (ot::MeshCoP::Timestamp *)ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(v6);
        ot::MeshCoP::Timestamp::AdvanceRandomTicks(Timestamp);
        uint64_t v8 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)this);
        uint64_t result = ot::MeshCoP::PendingDatasetManager::Save(v8, (const ot::MeshCoP::Dataset *)v15);
        unsigned int v12 = result;
      }
    }
  }

  if (v12) {
    return (uint64_t)ot::MeshCoP::DatasetUpdater::Finish((uint64_t)this, v12);
  }
  return result;
}

uint64_t ot::Message::Read<ot::MeshCoP::Dataset::Info>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x80u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP7Dataset4InfoEEE7otErrortRT_(a1, a2, a3);
}

void *ot::MeshCoP::DatasetUpdater::Finish(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = a1;
  unsigned int v4 = a2;
  if (!*(void *)(a1 + 40)) {
    __assert_rtn("Finish", "dataset_updater.cpp", 158, "mDataset != nullptr");
  }
  ot::Message::Free(*(ot::Message **)(a1 + 40));
  *(void *)(a1 + 40)  = 0LL;
  return ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>((void *)a1, &v4);
}

void *ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>( void *result, unsigned int *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>( (uint64_t)result,  a2);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFv7otErrorPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJRS1_EEEvDpOT_(result, a2);
}

uint64_t ot::MeshCoP::DatasetUpdater::HandleNotifierEvents(uint64_t result, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v8 = result;
  uint64_t v5 = (ot::Message **)result;
  if (*(void *)(result + 40))
  {
    uint64_t result = ot::Events::ContainsAny((ot::Events *)&v9, 805306368LL);
    if ((result & 1) != 0)
    {
      ot::Message::Read<ot::MeshCoP::Dataset::Info>(v5[5], 0, v11);
      IgnoreError();
      if (ot::Events::Contains(&v9, 0x10000000LL))
      {
        active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)v5);
        if (!ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset::Info *)v10))
        {
          if ((ot::MeshCoP::Dataset::Info::IsSubsetOf( (ot::MeshCoP::Dataset::Info *)v11,  (const ot::MeshCoP::Dataset::Info *)v10) & 1) != 0)
          {
            ot::MeshCoP::DatasetUpdater::Finish((uint64_t)v5, 0);
          }

          else
          {
            ot::MeshCoP::Dataset::Info::GetActiveTimestamp( (ot::MeshCoP::Dataset::Info *)v11,  (ot::MeshCoP::Timestamp *)v7);
            ot::MeshCoP::Dataset::Info::GetActiveTimestamp( (ot::MeshCoP::Dataset::Info *)v10,  (ot::MeshCoP::Timestamp *)v6);
            if ((int)ot::MeshCoP::Timestamp::Compare( (ot::MeshCoP::Timestamp *)v7,  (const ot::MeshCoP::Timestamp *)v6,  v3) <= 0) {
              ot::MeshCoP::DatasetUpdater::Finish((uint64_t)v5, 0x18u);
            }
          }
        }
      }

      uint64_t result = ot::Events::Contains(&v9, 0x20000000LL);
      if ((result & 1) != 0)
      {
        unsigned int v4 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)v5);
        uint64_t result = ot::MeshCoP::DatasetManager::Read(v4, (ot::MeshCoP::Dataset::Info *)v10);
        if (!(_DWORD)result)
        {
          uint64_t result = ot::MeshCoP::Dataset::Info::IsSubsetOf( (ot::MeshCoP::Dataset::Info *)v11,  (const ot::MeshCoP::Dataset::Info *)v10);
          if ((result & 1) == 0) {
            return (uint64_t)ot::MeshCoP::DatasetUpdater::Finish((uint64_t)v5, 0x18u);
          }
        }
      }
    }
  }

  return result;
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Message **)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(a1);
  return ot::MeshCoP::DatasetUpdater::HandleTimer(v2);
}

ot::MeshCoP::Dtls *ot::MeshCoP::Dtls::Dtls(ot::MeshCoP::Dtls *this, ot::Instance *a2, char a3)
{
  char v5 = a3 & 1;
  ot::InstanceLocator::InstanceLocator();
  *(_BYTE *)this  = 0;
  *((_BYTE *)this + 4ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = 0;
  *((_BYTE *)this + 45)  = 1;
  ot::TimerMilliContext::TimerMilliContext( (ot::MeshCoP::Dtls *)((char *)this + 656),  a2,  (void (*)(ot::Timer *))ot::MeshCoP::Dtls::HandleTimer,  this);
  ot::Time::Time((ot::MeshCoP::Dtls *)((char *)this + 688), 0);
  *((_BYTE *)this + 692) &= ~1u;
  *((_BYTE *)this + 69ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)this + 692) & 0xFD | (2 * (v5 & 1));
  *((void *)this + 87)  = 0LL;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 88);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 90);
  ot::Ip6::MessageInfo::MessageInfo((ot::MeshCoP::Dtls *)((char *)this + 736));
  ot::Ip6::Udp::Socket::Socket((ot::MeshCoP::Dtls *)((char *)this + 792), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 108);
  *((_BYTE *)this + 880)  = 0;
  *((_BYTE *)this + 88ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0;
  *(void *)((char *)this + ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = 0LL;
  *(_OWORD *)((char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 28)  = 0u;
  bzero((char *)this + 48, 0x190uLL);
  memset((char *)this + 448, 0, 0xA8uLL);
  memset((char *)this + 616, 0, 0x28uLL);
  return this;
}

{
  ot::MeshCoP::Dtls::Dtls(this, a2, a3 & 1);
  return this;
}

void **ot::MeshCoP::Dtls::HandleTimer(ot::MeshCoP::Dtls *this, ot::Timer *a2)
{
  Context  = (void **)ot::TimerMilliContext::GetContext(this);
  return ot::MeshCoP::Dtls::HandleTimer(Context);
}

void **ot::MeshCoP::Dtls::FreeMbedtls(void **this)
{
  return mbedtls_ssl_free(this + 6);
}

uint64_t ot::MeshCoP::Dtls::Open( ot::MeshCoP::Dtls *this, void (*a2)(void *, unsigned __int8 *, unsigned __int16), void (*a3)(void *, BOOL), uint64_t a4)
{
  if (*(_BYTE *)this)
  {
    return 24;
  }

  else
  {
    unsigned int v6 = ot::Ip6::Udp::Socket::Open( (ot::MeshCoP::Dtls *)((char *)this + 792),  (uint64_t)ot::MeshCoP::Dtls::HandleUdpReceive,  (uint64_t)this);
    if (!v6)
    {
      ot::CallbackBase<void (*)(void *,BOOL)>::Set((void *)this + 88, (uint64_t)a3, a4);
      ot::CallbackBase<void (*)(void *,unsigned char *,unsigned short)>::Set((void *)this + 90, (uint64_t)a2, a4);
      *(_BYTE *)this  = 1;
    }
  }

  return v6;
}

uint64_t ot::MeshCoP::Dtls::HandleUdpReceive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  return ot::MeshCoP::Dtls::HandleUdpReceive(a1, v6, v4);
}

void *ot::CallbackBase<void (*)(void *,BOOL)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPvbEE3SetES3_S1_(result, a2, a3);
}

void *ot::CallbackBase<void (*)(void *,unsigned char *,unsigned short)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPvPhtEE3SetES4_S1_(result, a2, a3);
}

uint64_t ot::MeshCoP::Dtls::Connect(__n128 *this, const ot::Ip6::SockAddr *a2)
{
  if (this->n128_u8[0] == 1)
  {
    ot::Ip6::SockAddr::GetAddress(a2);
    ot::Ip6::MessageInfo::SetPeerAddr(this + 46, v2);
    ot::Ip6::MessageInfo::SetPeerPort((uint64_t)&this[46], *((_WORD *)a2 + 8));
    return ot::MeshCoP::Dtls::Setup((ot::MeshCoP::Dtls *)this, 1);
  }

  else
  {
    return 13;
  }

void ot::Ip6::SockAddr::GetAddress(ot::Ip6::SockAddr *this)
{
}

{
  ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  __ZN2ot3Ip68SockAddr10GetAddressEv(this);
}

{
  __ZNK2ot3Ip68SockAddr10GetAddressEv(this);
}

uint64_t ot::MeshCoP::Dtls::Setup(ot::MeshCoP::Dtls *this, char a2)
{
  char v12 = a2 & 1;
  if (*(_BYTE *)this == 1)
  {
    *(_BYTE *)this  = 2;
    mbedtls_ssl_init((uint64_t)this + 48);
    mbedtls_ssl_config_init((uint64_t)this + 448);
    mbedtls_ssl_cookie_init((uint64_t)this + 616);
    unsigned int v11 = mbedtls_ssl_config_defaults((uint64_t)this + 448, (v12 & 1) == 0, 1, 0);
    if (!v11)
    {
      mbedtls_ssl_conf_rng((uint64_t)this + 448, (uint64_t)ot::Crypto::MbedTls::CryptoSecurePrng, 0LL);
      mbedtls_ssl_conf_min_version((uint64_t)this + 448, 3, 3);
      mbedtls_ssl_conf_max_version((_BYTE *)this + 448, 3, 3);
      if (*((_DWORD *)this + 2)) {
        __assert_rtn("Setup", "dtls.cpp", 288, "mCipherSuites[1] == 0");
      }
      mbedtls_ssl_conf_ciphersuites((void *)this + 56, (uint64_t)this + 4);
      if (*((_DWORD *)this + 1) == 49407) {
        mbedtls_ssl_conf_curves((uint64_t)this + 448, (uint64_t)&ot::MeshCoP::Dtls::sCurves);
      }
      mbedtls_ssl_conf_export_keys_cb( (uint64_t)this + 448,  (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsExportKeys,  (uint64_t)this);
      mbedtls_ssl_conf_handshake_timeout((uint64_t)this + 448, 8000, 60000);
      mbedtls_ssl_conf_dbg((uint64_t)this + 448, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsDebug, (uint64_t)this);
      if ((v12 & 1) == 0)
      {
        unsigned int v11 = mbedtls_ssl_cookie_setup( (uint64_t)this + 616,  (uint64_t (*)(uint64_t, _BYTE *, uint64_t))ot::Crypto::MbedTls::CryptoSecurePrng,  0LL);
        if (v11) {
          goto LABEL_18;
        }
        mbedtls_ssl_conf_dtls_cookies( (void *)this + 56,  (uint64_t)mbedtls_ssl_cookie_write,  (uint64_t)mbedtls_ssl_cookie_check,  (uint64_t)this + 616);
      }

      unsigned int v11 = mbedtls_ssl_setup((void *)this + 6, (uint64_t)this + 448);
      if (!v11)
      {
        mbedtls_ssl_set_bio( (void *)this + 6,  (uint64_t)this,  (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsTransmit,  (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsReceive,  0LL);
        mbedtls_ssl_set_timer_cb( (void *)this + 6,  (uint64_t)this,  (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsSetTimer,  (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsGetTimer);
        if (*((_DWORD *)this + 1) == 49407) {
          unsigned int v11 = mbedtls_ssl_set_hs_ecjpake_password( (void *)this + 6,  (uint64_t)this + 12,  *((unsigned __int8 *)this + 44));
        }
        if (!v11)
        {
          *((void *)this + 87)  = 0LL;
          *((_BYTE *)this + 880)  = 0;
          *(_BYTE *)this  = 3;
          if (*((_DWORD *)this + 1) == 49407) {
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Dtls", "DTLS started", v2, v3, v4, v5, v6, v7, v9);
          }
          *(_BYTE *)this  = 3;
          ot::MeshCoP::Dtls::Process((void **)this);
        }
      }
    }
  }

  else
  {
    unsigned int v11 = -26624;
  }

uint64_t ot::MeshCoP::Dtls::HandleUdpReceive(uint64_t this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v13 = (__n128 *)this;
  if (*(_BYTE *)this)
  {
    if (*(_BYTE *)this == 1)
    {
      ot::Ip6::MessageInfo::GetPeerAddr(a3);
      ot::Ip6::MessageInfo::SetPeerAddr(v13 + 46, v3);
      PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(a3);
      ot::Ip6::MessageInfo::SetPeerPort((uint64_t)&v13[46], PeerPort);
      IsHostInterface  = ot::Ip6::MessageInfo::IsHostInterface(a3);
      ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)&v13[46], IsHostInterface & 1);
      ot::Ip6::MessageInfo::GetSockAddr(a3);
      ot::Ip6::MessageInfo::SetSockAddr(v13 + 46, v6);
      SockPort  = ot::Ip6::MessageInfo::GetSockPort(a3);
      ot::Ip6::MessageInfo::SetSockPort((uint64_t)&v13[46], SockPort);
      this  = ot::MeshCoP::Dtls::Setup((ot::MeshCoP::Dtls *)v13, 0);
      if ((_DWORD)this) {
        return this;
      }
    }

    else
    {
      ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)(this + 736));
      char v12 = v8;
      ot::Ip6::MessageInfo::GetPeerAddr(a3);
      this  = ot::Equatable<ot::Ip6::Address>::operator==(v12, v9);
      if ((this & 1) == 0) {
        return this;
      }
      int v11 = (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort((ot::Ip6::MessageInfo *)&v13[46]);
      this  = ot::Ip6::MessageInfo::GetPeerPort(a3);
    }

    if (v13->n128_u8[0] == 3)
    {
      ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)&v13[46]);
      ot::MeshCoP::Dtls::SetClientId((ot::MeshCoP::Dtls *)v13, v10, 0x10u);
      IgnoreError();
    }

    return (uint64_t)ot::MeshCoP::Dtls::Receive((ot::MeshCoP::Dtls *)v13, a2);
  }

  return this;
}

uint64_t ot::MeshCoP::Dtls::SetClientId( ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned int v4 = mbedtls_ssl_set_client_transport_id((void *)this + 6, (uint64_t)a2, a3);
  return ot::Crypto::MbedTls::MapError((ot::Crypto::MbedTls *)v4);
}

void **ot::MeshCoP::Dtls::Receive(ot::MeshCoP::Dtls *this, ot::Message *a2)
{
  *((void *)this + 87)  = a2;
  uint64_t result = ot::MeshCoP::Dtls::Process((void **)this);
  *((void *)this + 87)  = 0LL;
  return result;
}

uint64_t ot::MeshCoP::Dtls::GetUdpPort(ot::MeshCoP::Dtls *this)
{
  return (unsigned __int16)ot::Ip6::SockAddr::GetPort(v1);
}

void ot::Ip6::Udp::SocketHandle::GetSockName(ot::Ip6::Udp::SocketHandle *this)
{
}

{
  ot::AsCoreType<otSockAddr>((uint64_t)this);
}

{
  __ZN2ot3Ip63Udp12SocketHandle11GetSockNameEv(this);
}

{
  __ZNK2ot3Ip63Udp12SocketHandle11GetSockNameEv(this);
}

uint64_t ot::Ip6::SockAddr::GetPort(ot::Ip6::SockAddr *this)
{
  return *((unsigned __int16 *)this + 8);
}

{
  return __ZNK2ot3Ip68SockAddr7GetPortEv(this);
}

uint64_t ot::MeshCoP::Dtls::Bind(ot::MeshCoP::Dtls *this, __int16 a2)
{
  if (*(_BYTE *)this == 1)
  {
    if (ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet((void *)this + 108))
    {
      return 24;
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "Dtls::Bind to port=%d", v2, v3, v4, v5, v6, v7, a2);
      return ot::Ip6::Udp::Socket::Bind((ot::MeshCoP::Dtls *)((char *)this + 792), a2, 0);
    }
  }

  else
  {
    return 13;
  }

BOOL ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPF7otErrorPvRNS_7MessageERKNS_3Ip611MessageInfoEEE5IsSetEv(a1);
}

uint64_t ot::MeshCoP::Dtls::Bind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (*(_BYTE *)a1 == 1)
  {
    if (ot::Ip6::Udp::SocketHandle::IsBound((ot::Ip6::Udp::SocketHandle *)(a1 + 792)))
    {
      return 24;
    }

    else if (ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet((void *)(a1 + 864)))
    {
      return 24;
    }

    else
    {
      ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Set((void *)(a1 + 864), a2, a3);
    }
  }

  else
  {
    return 13;
  }

  return v5;
}

void *ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPF7otErrorPvRNS_7MessageERKNS_3Ip611MessageInfoEEE3SetESA_S2_(result, a2, a3);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsExportKeys( ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(this, a2, a3, (uint64_t)a4, a5, a6);
}

void ot::MeshCoP::Dtls::HandleMbedtlsDebug( ot::MeshCoP::Dtls *this, void *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsTransmit( ot::MeshCoP::Dtls *this, char *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsTransmit(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsReceive( ot::MeshCoP::Dtls *this, char *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsReceive(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsSetTimer( ot::MeshCoP::Dtls *this, void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(this, (int)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsGetTimer( ot::MeshCoP::Dtls *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsGetTimer(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  BOOL IsRunning;
  char v10;
  int Now;
  ot::MeshCoP::Dtls *v14;
  int v14 = this;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "HandleMbedtlsGetTimer", a3, a4, a5, a6, a7, a8, v10);
  }
  if ((*((_BYTE *)this + 692) & 1) != 0)
  {
    IsRunning  = ot::Timer::IsRunning((ot::MeshCoP::Dtls *)((char *)this + 656));
    if (IsRunning)
    {
      int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsRunning);
      return ot::Time::operator<=((int *)this + 172, &Now);
    }

    else
    {
      return 2;
    }
  }

  else
  {
    return -1;
  }

void **ot::MeshCoP::Dtls::Process(void **this)
{
  uint64_t v7 = this;
  uint64_t v2 = (ot::MeshCoP::Dtls *)this;
  char v6 = 0;
  while (1)
  {
    BOOL v1 = 1;
    if (*(_BYTE *)v2 != 3) {
      BOOL v1 = *(_BYTE *)v2 == 4;
    }
    if (!v1) {
      break;
    }
    if (*(_BYTE *)v2 == 3)
    {
      this  = (void **)mbedtls_ssl_handshake((uint64_t)v2 + 48);
      int v5 = (int)this;
      if (*((_DWORD *)v2 + 14) == 16)
      {
        *(_BYTE *)uint64_t v2 = 4;
        char v4 = 1;
        this  = (void **)ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>( (void *)v2 + 88,  &v4);
      }
    }

    else
    {
      this  = (void **)mbedtls_ssl_read((uint64_t)v2 + 48, (uint64_t)v8, 0x300uLL);
      int v5 = (int)this;
    }

    if (v5 <= 0)
    {
      if (v5 && v5 != -26880 && v5 != -26752)
      {
        if (v5 == -30848 || v5 == -30592)
        {
          this  = (void **)mbedtls_ssl_close_notify((uint64_t)v2 + 48);
          char v6 = 1;
          break;
        }

        if (v5 == -29056)
        {
          if (*((_DWORD *)v2 + 14) != 16)
          {
            this  = (void **)mbedtls_ssl_send_alert_message((uint64_t)v2 + 48, 2, 20);
            char v6 = 1;
            break;
          }
        }

        else if (v5 != -27264 && *((_DWORD *)v2 + 14) != 16)
        {
          this  = (void **)mbedtls_ssl_send_alert_message((uint64_t)v2 + 48, 2, 40);
          char v6 = 1;
          break;
        }

        this  = (void **)mbedtls_ssl_session_reset((uint64_t)v2 + 48);
        if (*((_DWORD *)v2 + 1) == 49407) {
          this  = (void **)mbedtls_ssl_set_hs_ecjpake_password( (void *)v2 + 6,  (uint64_t)v2 + 12,  *((unsigned __int8 *)v2 + 44));
        }
      }

      break;
    }

    unsigned __int16 v3 = v5;
    this  = (void **)ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::InvokeIfSet<unsigned char (&)[768],unsigned short>( (void *)v2 + 90,  (uint64_t)v8,  &v3);
  }

  if ((v6 & 1) != 0) {
    return ot::MeshCoP::Dtls::Disconnect((void **)v2);
  }
  return this;
}

uint64_t ot::MeshCoP::Dtls::Close(void **this)
{
  *(_BYTE *)this  = 0;
  *((_BYTE *)this + 692) &= ~1u;
  ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Clear(this + 108);
  ot::Ip6::Udp::Socket::Close((ot::Ip6::Udp::Socket *)(this + 99));
  IgnoreError();
  return ot::TimerMilli::Stop((ot::TimerMilli *)(this + 82));
}

void **ot::MeshCoP::Dtls::Disconnect(void **this)
{
  BOOL v1 = this;
  if (*(_BYTE *)this == 3 || *(_BYTE *)this == 4)
  {
    mbedtls_ssl_close_notify((uint64_t)(this + 6));
    *(_BYTE *)BOOL v1 = 5;
    ot::TimerMilli::Start((ot::TimerMilli *)(v1 + 82), 0x7D0u);
    ot::Clearable<ot::Ip6::MessageInfo>::Clear(v1 + 92);
    ot::Ip6::Udp::Socket::Connect((ot::Ip6::Udp::Socket *)(v1 + 99));
    IgnoreError();
    return ot::MeshCoP::Dtls::FreeMbedtls(v1);
  }

  return this;
}

void *ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Clear( void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPF7otErrorPvRNS_7MessageERKNS_3Ip611MessageInfoEEE5ClearEv(result);
}

uint64_t ot::Ip6::Udp::Socket::Connect(ot::Ip6::Udp::Socket *this)
{
  return ot::Ip6::Udp::Socket::Connect(this, 0);
}

{
  return __ZN2ot3Ip63Udp6Socket7ConnectEv(this);
}

uint64_t ot::MeshCoP::Dtls::SetPsk(ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned int v5 = 0;
  if (a3 <= 0x20uLL)
  {
    memcpy((char *)this + 12, a2, a3);
    *((_BYTE *)this + 4ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = a3;
    *(void *)((char *)this + ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = 49407LL;
  }

  else
  {
    return 7;
  }

  return v5;
}

uint64_t ot::MeshCoP::Dtls::Send(ot::MeshCoP::Dtls *this, ot::Message *a2, unsigned __int16 a3)
{
  if (a3 <= 0x480u)
  {
    ot::Message::ReadBytes(a2, 0, v9, a3);
    unsigned __int16 v3 = (ot::Crypto::MbedTls *)mbedtls_ssl_write((uint64_t)this + 48, (uint64_t)v9, a3);
    unsigned int v6 = ot::Crypto::MbedTls::MapError(v3);
    if (!v6) {
      ot::Message::Free(a2);
    }
  }

  else
  {
    return 3;
  }

  return v6;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsTransmit( ot::MeshCoP::Dtls *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v20 = a3;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "HandleMbedtlsTransmit", a3, a4, a5, a6, a7, a8, v16);
  }
  int v19 = ot::MeshCoP::Dtls::HandleDtlsSend((uint64_t)this, a2, v20, *((_BYTE *)this + 880));
  *((_BYTE *)this + 880)  = *((_BYTE *)this + 881);
  if (v19)
  {
    if (v19 == 3)
    {
      return -26752;
    }

    else
    {
      char v8 = ot::ErrorToString(v19);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Dtls",  "HandleMbedtlsTransmit: %s error",  v9,  v10,  v11,  v12,  v13,  v14,  v8);
      return -78;
    }
  }

  else
  {
    return v20;
  }

uint64_t ot::MeshCoP::Dtls::HandleDtlsSend(uint64_t a1, char *a2, unsigned __int16 a3, char a4)
{
  unsigned int v6 = ot::Ip6::Udp::Socket::NewMessage((ot::Ip6::Udp::Socket *)(a1 + 792));
  if (v6)
  {
    ot::Message::SetSubType(v6, a4);
    ot::Message::SetLinkSecurityEnabled(v6, (*(_BYTE *)(a1 + 692) & 2) != 0);
    unsigned int appended = ot::Message::AppendBytes(v6, a2, a3);
    if (!appended)
    {
      if (a4) {
        ot::Message::SetSubType(v6, a4);
      }
      if (ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet((void *)(a1 + 864))) {
        unsigned int appended = ot::Callback<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&),(ot::CallbackContextPosition)0>::Invoke<ot::Message &,ot::Ip6::MessageInfo&>( a1 + 864,  (uint64_t)v6,  a1 + 736);
      }
      else {
        unsigned int appended = ot::Ip6::Udp::Socket::SendTo( (ot::Ip6::Udp::Socket *)(a1 + 792),  v6,  (const ot::Ip6::MessageInfo *)(a1 + 736));
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v6) {
    ot::Message::Free(v6);
  }
  return appended;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsReceive( ot::MeshCoP::Dtls *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16 = a3;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "HandleMbedtlsReceive", a3, a4, a5, a6, a7, a8, v10);
  }
  if (*((void *)this + 87)
    && (int Length = (unsigned __int16)ot::Message::GetLength(*((ot::Message **)this + 87)),
        int v14 = Length - (unsigned __int16)ot::Message::GetOffset(*((ot::Message **)this + 87)),
        v14 > 0))
  {
    if (v16 > v14) {
      LOWORD(vot::MeshCoP::Dataset::Clear((uint64_t)this + 16) = v14;
    }
    uint64_t v11 = (ot::Message *)*((void *)this + 87);
    Offset  = ot::Message::GetOffset(v11);
    unsigned int Bytes = (unsigned __int16)ot::Message::ReadBytes(v11, Offset, a2, v16);
    ot::Message::MoveOffset(*((ot::Message **)this + 87), Bytes);
  }

  else
  {
    return -26880;
  }

  return Bytes;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsSetTimer( ot::MeshCoP::Dtls *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14 = this;
  int v13 = a2;
  unsigned int v12 = a3;
  char v10 = this;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "SetTimer", a3, a4, a5, a6, a7, a8, (char)this);
  }
  if (v12)
  {
    *((_BYTE *)v10 + 69ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_BYTE *)v10 + 692) & 0xFE | 1;
    uint64_t v9 = (ot::TimerMilli *)ot::TimerMilli::Start((ot::MeshCoP::Dtls *)((char *)v10 + 656), v12);
    int Now = ot::TimerMilli::GetNow(v9);
    uint64_t result = ot::Time::operator+(&Now, v13);
    *((_DWORD *)v10 + 17ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  }

  else
  {
    *((_BYTE *)v10 + 692) &= ~1u;
    return ot::TimerMilli::Stop((ot::MeshCoP::Dtls *)((char *)v10 + 656));
  }

  return result;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsExportKeys( ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  uint64_t v19 = a5;
  uint64_t v18 = a6;
  ot::Crypto::Sha256::Sha256((ot::Crypto::Sha256 *)v17);
  if (*((_DWORD *)this + 1) == 49407)
  {
    ot::Crypto::Sha256::Start((ot::Crypto::Sha256 *)v17);
    ot::Crypto::Sha256::Update((ot::Crypto::Sha256 *)v17, (uint64_t)v21, 2 * (v20 + v19 + v18));
    ot::Crypto::Sha256::Finish((ot::Crypto::Sha256 *)v17, (ot::Crypto::Sha256::Hash *)v24);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "Generated KEK", v6, v7, v8, v9, v10, v11, v14);
    uint64_t v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v24);
    ot::KeyManager::SetKek((__n128 *)v15, v12);
  }

  ot::Crypto::Sha256::~Sha256((ot::Crypto::Sha256 *)v17);
  return 0LL;
}

void ot::KeyManager::SetKek(__n128 *this, __n128 *a2)
{
}

{
  ot::Mac::KeyMaterial::SetFrom(this + 10, a2);
  this[11].n128_u32[0]  = 0;
}

{
  __ZN2ot10KeyManager6SetKekEPKh(this, a2);
}

void **ot::MeshCoP::Dtls::HandleTimer(void **this)
{
  uint64_t v6 = this;
  int v4 = *(unsigned __int8 *)this;
  if (v4 == 4 || v4 == 3) {
    return ot::MeshCoP::Dtls::Process(this);
  }
  if (v4 != 5) {
    __assert_rtn("HandleTimer", "dtls.cpp", 850, "false");
  }
  *(_BYTE *)this  = 1;
  ot::TimerMilli::Stop((ot::TimerMilli *)(this + 82));
  char v5 = 0;
  return (void **)ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>(this + 88, &v5);
}

void *ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>( void *result, _BYTE *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::Invoke<BOOL>( (uint64_t)result,  a2);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvPvbELNS_23CallbackContextPositionE0EE11InvokeIfSetIJbEEEvDpOT_(result, a2);
}

void *ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::InvokeIfSet<unsigned char (&)[768],unsigned short>( void *result, uint64_t a2, unsigned __int16 *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::Invoke<unsigned char (&)[768],unsigned short>( (uint64_t)result,  a2,  a3);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvPvPhtELNS_23CallbackContextPositionE0EE11InvokeIfSetIJRA768_htEEEvDpOT_(result, a2, a3);
}

void ot::MeshCoP::Dtls::HandleMbedtlsDebug( ot::MeshCoP::Dtls *this, int a2, const char *a3, int a4, const char *a5)
{
  unint64_t v12 = (a2 - 1);
  if (v12 <= 3) {
    __asm { BR              X8 }
  }

  ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::Dtls *)((char *)this + 792));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "[%u] %s", v6, v7, v8, v9, v10, v11, *(_WORD *)(v5 + 16));
}

uint64_t ot::Callback<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&),(ot::CallbackContextPosition)0>::Invoke<ot::Message &,ot::Ip6::MessageInfo&>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))a1)(*(void *)(a1 + 8), a2, a3);
}

{
  return __ZNK2ot8CallbackIPF7otErrorPvRNS_7MessageERKNS_3Ip611MessageInfoEELNS_23CallbackContextPositionE0EE6InvokeIJS4_RS6_EEES1_DpOT_( a1,  a2,  a3);
}

uint64_t ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::Invoke<BOOL>( uint64_t a1, _BYTE *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*(void *)(a1 + 8), *a2 & 1);
}

{
  return __ZNK2ot8CallbackIPFvPvbELNS_23CallbackContextPositionE0EE6InvokeIJbEEEvDpOT_(a1, a2);
}

uint64_t ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::Invoke<unsigned char (&)[768],unsigned short>( uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))a1)(*(void *)(a1 + 8), a2, *a3);
}

{
  return __ZNK2ot8CallbackIPFvPvPhtELNS_23CallbackContextPositionE0EE6InvokeIJRA768_htEEEvDpOT_(a1, a2, a3);
}

ot::EnergyScanClient *ot::EnergyScanClient::EnergyScanClient(ot::EnergyScanClient *this, ot::Instance *a2)
{
  return this;
}

{
  ot::EnergyScanClient::EnergyScanClient(this, a2);
  return this;
}

uint64_t ot::EnergyScanClient::SendQuery( ot::EnergyScanClient *this, int a2, unsigned __int8 a3, unsigned __int16 a4, unsigned __int16 a5, const ot::Ip6::Address *a6, void (*a7)(unsigned int, const unsigned __int8 *, unsigned __int8, void *), uint64_t a8)
{
  v34  = this;
  int v33 = a2;
  v32  = a3;
  unsigned __int16 v31 = a4;
  unsigned __int16 v30 = a5;
  unsigned __int16 v29 = a6;
  uint64_t v28 = a7;
  uint64_t v27 = a8;
  inited  = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v24, Instance);
  uint64_t v23 = 0LL;
  uint64_t v9 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
  if (ot::MeshCoP::Commissioner::IsActive(v9))
  {
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v23 = ot::Coap::CoapBase::NewPriorityMessage(v10);
    if (v23)
    {
      inited  = ot::Coap::Message::InitAsPost(v23, v29, 0x13u);
      if (!inited)
      {
        inited  = ot::Coap::Message::SetPayloadMarker(v23);
        if (!inited)
        {
          uint64_t v11 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
          SessionId  = ot::MeshCoP::Commissioner::GetSessionId(v11);
          inited  = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v23, SessionId);
          if (!inited)
          {
            ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v25);
            ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v25, v33);
            inited  = ot::Tlv::AppendTo((ot::Tlv *)v25, v23);
            if (!inited)
            {
              inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>((uint64_t)v23, v32);
              if (!inited)
              {
                inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>((uint64_t)v23, v31);
                if (!inited)
                {
                  inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)56,unsigned short>>((uint64_t)v23, v30);
                  if (!inited)
                  {
                    ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v24, (__n128 *)v29);
                    int v13 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                    inited  = ot::Coap::CoapBase::SendMessage(v13, v23, (const ot::Ip6::MessageInfo *)v24);
                    if (!inited)
                    {
                      char v14 = ot::UriToString<(ot::Uri)19>();
                      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"EnergyScanClnt",  "Sent %s",  v15,  v16,  v17,  v18,  v19,  v20,  v14);
                      ot::CallbackBase<void (*)(unsigned int,unsigned char const*,unsigned char,void *)>::Set( this,  (uint64_t)v28,  v27);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    else
    {
      inited  = 3;
    }
  }

  else
  {
    inited  = 13;
  }

  if (inited && v23) {
    ot::Message::Free(v23);
  }
  return inited;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 56, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh56EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

void *ot::CallbackBase<void (*)(unsigned int,unsigned char const*,unsigned char,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvjPKhhPvEE3SetES5_S3_(result, a2, a3);
}

void ot::EnergyScanClient::HandleTmf<(ot::Uri)18>( ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int16 v29 = a1;
  uint64_t v28 = a2;
  uint64_t v27 = a3;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)18>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanClnt", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v28, v10, v11, v12, v13);
    if (ChannelMask)
    {
      if (!ot::MeshCoP::Tlv::FindTlv(v28, 0x39u, 0x42u, v30, v14))
      {
        EnergyList  = ot::MeshCoP::EnergyListTlv::GetEnergyList((ot::MeshCoP::EnergyListTlv *)v30);
        EnergyListint Length = ot::MeshCoP::EnergyListTlv::GetEnergyListLength((ot::MeshCoP::EnergyListTlv *)v30);
        ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned int &,unsigned char const*,unsigned char>( a1,  &ChannelMask,  &EnergyList,  &EnergyListLength);
        uint64_t v15 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        if (!ot::Coap::CoapBase::SendEmptyAck(v15, v28, v27))
        {
          char v16 = ot::UriToString<(ot::Uri)18>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"EnergyScanClnt",  "Sent %s ack",  v17,  v18,  v19,  v20,  v21,  v22,  v16);
        }
      }
    }
  }

uint64_t ot::MeshCoP::Tlv::FindTlv( ot::Tlv *a1, unsigned __int8 a2, unsigned __int16 a3, void *a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)a2, a3, a4, a5);
}

{
  return __ZN2ot7MeshCoP3Tlv7FindTlvERKNS_7MessageENS1_4TypeEtRS1_(a1, a2, a3, a4, a5);
}

void *ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned int &,unsigned char const*,unsigned char>( void *result, unsigned int *a2, void *a3, unsigned __int8 *a4)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned int &,unsigned char const*,unsigned char>( (uint64_t)result,  a2,  a3,  a4);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvjPKhhPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJRjS2_hEEEvDpOT_( result,  a2,  a3,  a4);
}

uint64_t ot::MeshCoP::EnergyListTlv::GetEnergyList(ot::MeshCoP::EnergyListTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP13EnergyListTlv13GetEnergyListEv(this);
}

uint64_t ot::MeshCoP::EnergyListTlv::GetEnergyListLength(ot::MeshCoP::EnergyListTlv *this)
{
  unsigned __int8 Length = ot::Tlv::GetLength(this);
  return ot::Min<unsigned char>(0x40u, Length);
}

{
  return __ZNK2ot7MeshCoP13EnergyListTlv19GetEnergyListLengthEv(this);
}

uint64_t ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned int &,unsigned char const*,unsigned char>( uint64_t a1, unsigned int *a2, void *a3, unsigned __int8 *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvjPKhhPvELNS_23CallbackContextPositionE1EE6InvokeIJRjS2_hEEEvDpOT_(a1, a2, a3, a4);
}

ot::MeshCoP::Joiner *ot::MeshCoP::Joiner::Joiner(ot::MeshCoP::Joiner *this, ot::Instance *a2)
{
  *(void *)this  = 0LL;
  *((void *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0LL;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  *((_BYTE *)this + 2ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4);
  *((_WORD *)this + 38)  = 0;
  *((void *)this + 10)  = 0LL;
  ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::TimerMilliIn( (ot::MeshCoP::Joiner *)((char *)this + 88),  a2);
  *((_BYTE *)this + 11ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_BYTE *)this + 113)  = 0;
  ot::MeshCoP::Joiner::SetIdFromIeeeEui64(this);
  ot::MeshCoP::JoinerDiscerner::Clear((uint64_t)this + 8);
  uint64_t result = this;
  *((void *)this + 6)  = 0LL;
  *((void *)this + 7)  = 0LL;
  *((void *)this + 8)  = 0LL;
  *((_DWORD *)this + 18)  = 0;
  return result;
}

{
  ot::MeshCoP::Joiner::Joiner(this, a2);
  return this;
}

unsigned __int8 *ot::MeshCoP::Joiner::HandleTimer(ot::MeshCoP::Joiner *this)
{
  unint64_t v2 = *((unsigned __int8 *)this + 24);
  if (v2 <= 5) {
    __asm { BR              X8 }
  }

  return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)this, 0);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::HandleTimer);
  return a1;
}

void ot::MeshCoP::Joiner::SetIdFromIeeeEui64(ot::MeshCoP::Joiner *this)
{
  BOOL v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v1, (ot::Mac::ExtAddress *)v4);
  ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)v4, this, v2);
}

uint64_t ot::MeshCoP::JoinerDiscerner::Clear(uint64_t this)
{
  *(_BYTE *)(this + 8)  = 0;
  return this;
}

{
  return __ZN2ot7MeshCoP15JoinerDiscerner5ClearEv(this);
}

uint64_t ot::MeshCoP::Joiner::GetDiscerner(ot::MeshCoP::Joiner *this)
{
  else {
    return (uint64_t)this + 8;
  }
}

BOOL ot::MeshCoP::JoinerDiscerner::IsEmpty(ot::MeshCoP::JoinerDiscerner *this)
{
  return *((_BYTE *)this + 8) == 0;
}

{
  return __ZNK2ot7MeshCoP15JoinerDiscerner7IsEmptyEv(this);
}

uint64_t ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::Joiner *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  unsigned int v4 = 0;
  if (ot::MeshCoP::JoinerDiscerner::IsValid(a2))
  {
    if (*((_BYTE *)this + 24))
    {
      return 13;
    }

    else
    {
      *(_OWORD *)((char *)this + 8)  = *(_OWORD *)a2;
      ot::MeshCoP::JoinerDiscerner::GenerateJoinerId((ot::MeshCoP::Joiner *)((char *)this + 8), this);
    }
  }

  else
  {
    return 7;
  }

  return v4;
}

uint64_t ot::MeshCoP::Joiner::ClearDiscerner(ot::MeshCoP::Joiner *this)
{
  unsigned int v3 = 0;
  if (*((_BYTE *)this + 24))
  {
    return 13;
  }

  else if (!ot::MeshCoP::JoinerDiscerner::IsEmpty((ot::MeshCoP::Joiner *)((char *)this + 8)))
  {
    ot::MeshCoP::JoinerDiscerner::Clear((uint64_t)this + 8);
    ot::MeshCoP::Joiner::SetIdFromIeeeEui64(this);
  }

  return v3;
}

void ot::MeshCoP::Joiner::SetState(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  int v13 = a1;
  unsigned __int8 v12 = a2;
  unsigned __int8 v11 = *((_BYTE *)a1 + 24);
  unint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
  if (!ot::Notifier::Update<ot::MeshCoP::Joiner::State>(v2, (_BYTE *)a1 + 24, &v12, 0x8000000LL))
  {
    char v9 = ot::MeshCoP::Joiner::StateToString(v11);
    ot::MeshCoP::Joiner::StateToString(v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "JoinerState: %s -> %s", v3, v4, v5, v6, v7, v8, v9);
  }

uint64_t ot::Notifier::Update<ot::MeshCoP::Joiner::State>(void *a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v5;
}

{
  return __ZN2ot8Notifier6UpdateINS_7MeshCoP6Joiner5StateEEE7otErrorRT_RKS6_NS_5EventE(a1, a2, a3, a4);
}

char *ot::MeshCoP::Joiner::StateToString(unsigned __int8 a1)
{
  return ot::MeshCoP::Joiner::StateToString(ot::MeshCoP::Joiner::State)::kStateStrings[a1];
}

uint64_t ot::MeshCoP::Joiner::Start( uint64_t a1, ot *a2, ot *a3, ot *a4, ot *a5, ot *a6, char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v36 = a1;
  v35  = a2;
  v34  = a3;
  int v33 = a4;
  v32  = a5;
  unsigned __int16 v31 = a6;
  unsigned __int16 v30 = a7;
  uint64_t v29 = a8;
  uint64_t v28 = a9;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Joiner",  "Joiner starting",  (uint64_t)a3,  (uint64_t)a4,  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  v19);
  if (!v34 || (ot::IsValidUtf8String(v34, v9) & 1) != 0)
  {
    if (!v33 || (ot::IsValidUtf8String(v33, v9) & 1) != 0)
    {
      if (!v31 || (ot::IsValidUtf8String(v31, v9) & 1) != 0)
      {
        if (*(_BYTE *)(a1 + 24))
        {
          unsigned int v27 = 5;
        }

        else
        {
          uint64_t v10 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
          if ((ot::ThreadNetif::IsUp(v10) & 1) != 0
            && (unsigned __int8 v11 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1),
                !ot::Mle::Mle::GetRole(v11)))
          {
            unsigned int v27 = ot::MeshCoP::JoinerPskd::SetFrom((ot::MeshCoP::JoinerPskd *)v38, v35);
            if (!v27)
            {
              *(_BYTE *)(a1 + 113)  = *(_BYTE *)(a1 + 112);
              ot::Mac::ExtAddress::GenerateRandom((ot::Mac::ExtAddress *)v37);
              unsigned __int8 v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
              ot::Mac::Mac::SetExtAddress(v12, (const ot::Mac::ExtAddress *)v37);
              int v13 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
              ot::Mle::Mle::UpdateLinkLocalAddress(v13);
              char v14 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
              unsigned int v27 = ot::Coap::CoapSecure::Start(v14, 1000);
              if (!v27)
              {
                uint64_t v15 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
                ot::Coap::CoapSecure::SetPsk(v15, (const ot::MeshCoP::JoinerPskd *)v38);
                uint64_t v26 = a1 + 48;
                uint64_t v25 = a1 + 48;
                uint64_t v24 = a1 + 76;
                while (v25 != v24)
                {
                  uint64_t v23 = v25;
                  *(_BYTE *)(v25 + 13)  = 0;
                  v25 += 14LL;
                }

                unsigned int v27 = ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage( (ot::Message **)a1,  v34,  v33,  v32,  v31,  (ot *)v30);
                if (!v27)
                {
                  if (ot::MeshCoP::JoinerDiscerner::IsEmpty((ot::MeshCoP::JoinerDiscerner *)(a1 + 8))) {
                    ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)a1, (_WORD *)(a1 + 114));
                  }
                  else {
                    ot::MeshCoP::SteeringData::CalculateHashBitIndexes( (ot::MeshCoP::JoinerDiscerner *)(a1 + 8),  (_WORD *)(a1 + 114));
                  }
                  uint64_t v20 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>((ot::InstanceLocator *)a1);
                  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v22, 0);
                  char v16 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                  PanId  = ot::Mac::Mac::GetPanId(v16);
                  unsigned int v27 = ot::Mle::DiscoverScanner::Discover( v20,  (ot::Mac::ChannelMask *)v22,  PanId,  1,  1,  (_DWORD *)(a1 + 114),  (uint64_t)ot::MeshCoP::Joiner::HandleDiscoverResult,  a1);
                  if (!v27)
                  {
                    ot::CallbackBase<void (*)(otError,void *)>::Set((void *)(a1 + 32), v29, v28);
                    ot::MeshCoP::Joiner::SetState((ot::InstanceLocator *)a1, 1u);
                  }
                }
              }
            }
          }

          else
          {
            unsigned int v27 = 13;
          }
        }
      }

      else
      {
        unsigned int v27 = 7;
      }
    }

    else
    {
      unsigned int v27 = 7;
    }
  }

  else
  {
    unsigned int v27 = 7;
  }

  if (v27) {
    ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage((ot::Message **)a1);
  }
  ot::MeshCoP::LogError((char)"start joiner", v27);
  return v27;
}

uint64_t ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage( ot::Message **this, ot *a2, ot *a3, ot *a4, ot *a5, ot *a6)
{
  unsigned __int16 v31 = (ot::MeshCoP::Joiner *)this;
  unsigned __int16 v30 = a2;
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  unsigned int v27 = a5;
  uint64_t v26 = a6;
  unsigned int v25 = 0;
  ot::MeshCoP::VendorStackVersionTlv::VendorStackVersionTlv((ot::MeshCoP::VendorStackVersionTlv *)v24);
  uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)this);
  this[10]  = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v6, 0x15u);
  if (this[10])
  {
    uint64_t v22 = this[10];
    unsigned __int16 Length = ot::Message::GetLength(v22);
    ot::Message::SetOffset(v22, Length);
    unsigned int v25 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)this[10], 1u);
    if (!v25)
    {
      unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)33,(unsigned char)32>>(this[10], v29, v8, v9, v10);
      if (!v25)
      {
        unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)34,(unsigned char)32>>(this[10], v28, v11, v12, v13);
        if (!v25)
        {
          unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)35,(unsigned char)16>>(this[10], v27, v14, v15, v16);
          if (!v25)
          {
            ot::MeshCoP::VendorStackVersionTlv::Init((ot::MeshCoP::VendorStackVersionTlv *)v24);
            ot::MeshCoP::VendorStackVersionTlv::SetOui((ot::MeshCoP::VendorStackVersionTlv *)v24, 0x18B430u, v17);
            ot::MeshCoP::VendorStackVersionTlv::SetMajor((uint64_t)v24, 0);
            ot::MeshCoP::VendorStackVersionTlv::SetMinor((uint64_t)v24, 1);
            ot::MeshCoP::VendorStackVersionTlv::SetRevision((ot::MeshCoP::VendorStackVersionTlv *)v24, 0);
            unsigned int v25 = ot::Tlv::AppendTo((ot::Tlv *)v24, this[10]);
            if (!v25
              && (!v26
               || (unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)36,(unsigned char)64>>( this[10],  v26,  v18,  v19,  v20)) == 0))
            {
              if (v30) {
                unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>( this[10],  v30,  v18,  v19,  v20);
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int v25 = 3;
  }

  if (v25)
  {
    ot::MeshCoP::LogError((char)"prepare joiner finalize message", v25);
    ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage(this);
  }

  return v25;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::DiscoverScanner>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Mle15DiscoverScannerEEERT_v(a1);
}

void ot::MeshCoP::Joiner::HandleDiscoverResult(uint64_t a1, uint64_t a2)
{
}

{
  ot::Mac::Mac *v2;
  ot::Mle::Mle *v3;
  unint64_t i;
  char v6;
  uint64_t v6 = 0;
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    if (a2)
    {
      ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter((ot::MeshCoP::Joiner *)a1, a2);
    }

    else
    {
      unint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      ot::Mac::Mac::SetExtAddress(v2, (const ot::Mac::ExtAddress *)a1);
      uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      ot::Mle::Mle::UpdateLinkLocalAddress(v3);
      *(_WORD *)(a1 + 76)  = 0;
      for (unsigned __int8 i = a1 + 48; i < a1 + 76; i += 14LL)
      {
        if (*(_BYTE *)(i + 13))
        {
          uint64_t v6 = 1;
          break;
        }
      }

      if ((v6 & 1) == 0 && *(_BYTE *)(a1 + 113))
      {
        *(void *)(a1 + 48)  = 0LL;
        *(void *)(a1 + 56)  = 0LL;
        *(void *)(a1 + 6ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = 0LL;
        *(_DWORD *)(a1 + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
        ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 88));
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 88), 0x64u);
      }

      else
      {
        ot::MeshCoP::Joiner::TryNextJoinerRouter((unsigned __int16 *)a1, 0);
      }
    }
  }

void ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage(ot::Message **this)
{
  if (!*((_BYTE *)this + 24))
  {
    if (this[10])
    {
      ot::Message::Free(this[10]);
      this[10]  = 0LL;
    }
  }

unsigned __int8 *ot::MeshCoP::Joiner::Stop( ot::MeshCoP::Joiner *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)v9, 0xBu);
}

unsigned __int8 *ot::MeshCoP::Joiner::Finish(unsigned __int8 *result, unsigned int a2)
{
  uint64_t v8 = result;
  unsigned int v7 = a2;
  unsigned int v5 = (ot::MeshCoP::Joiner *)result;
  int v6 = result[24];
  if (result[24])
  {
    if (v6 != 1)
    {
      unint64_t v2 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)result);
      ot::Coap::CoapSecure::Disconnect(v2);
      uint64_t v3 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(v5);
      ot::Ip6::Filter::RemoveUnsecurePort(v3, 1000);
      IgnoreError();
      ot::TimerMilli::Stop((ot::MeshCoP::Joiner *)((char *)v5 + 88));
    }

    uint64_t v4 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(v5);
    ot::Coap::CoapSecure::Stop(v4);
LABEL_8:
    ot::MeshCoP::Joiner::SetState(v5, 0);
    ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage((ot::Message **)v5);
    return (unsigned __int8 *)ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>( (void *)v5 + 4,  &v7);
  }

  return result;
}

uint64_t ot::MeshCoP::Joiner::CalculatePriority(ot::MeshCoP::Joiner *this, char a2, char a3)
{
  char v7 = a2;
  char v6 = a3 & 1;
  if (a2 == 127) {
    char v7 = -127;
  }
  char v5 = ot::Clamp<signed char>(v7, -127, -1);
  if ((v6 & 1) != 0) {
    char v3 = 0x80;
  }
  else {
    char v3 = 0;
  }
  return (v5 + v3);
}

uint64_t ot::Clamp<signed char>(char a1, char a2, char a3)
{
  char v4 = ot::Max<signed char>(a1, a2);
  return (char)ot::Min<signed char>(v4, a3);
}

{
  return __ZN2ot5ClampIaEET_S1_S1_S1_(a1, a2, a3);
}

void ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(ot::MeshCoP::Joiner *a1, uint64_t a2)
{
  unint64_t v14 = ot::GetArrayEnd<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>((uint64_t)a1 + 48);
  ot::AsCoreType<otSteeringData>(a2 + 33);
  char v15 = ot::MeshCoP::SteeringData::PermitsAllJoiners(v2) & 1;
  ot::AsCoreType<otExtAddress>(a2);
  ot::Mac::ExtAddress::ToString(v3, (ot::StringWriter *)v18);
  char v11 = ot::String<(unsigned short)17>::AsCString((uint64_t)v18);
  ot::ToYesNo((ot *)(v15 & 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Joiner",  "Joiner discover network: %s, pan:0x%04x, port:%d, chan:%d, rssi:%d, allow-any:%s",  v4,  v5,  v6,  v7,  v8,  v9,  v11);
  unsigned __int8 v16 = ot::MeshCoP::Joiner::CalculatePriority(a1, *(_BYTE *)(a2 + 55), v15 & 1);
  for (unsigned __int8 i = (void *)((char *)a1 + 48);
        (unint64_t)i < v14 && v16 <= (int)*((unsigned __int8 *)i + 13);
    ;
  }

  if ((unint64_t)i < v14)
  {
    memmove((char *)i + 14, i, v14 - 14 - (void)i);
    ot::AsCoreType<otExtAddress>(a2);
    *unsigned __int8 i = *v10;
    *((_WORD *)i + ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = *(_WORD *)(a2 + 50);
    *((_WORD *)i + 5)  = *(_WORD *)(a2 + 52);
    *((_BYTE *)i + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(a2 + 54);
    *((_BYTE *)i + 13)  = v16;
  }

unsigned __int8 *ot::MeshCoP::Joiner::TryNextJoinerRouter(unsigned __int16 *a1, unsigned int a2)
{
  while (1)
  {
    int v3 = a1[38];
    uint64_t v5 = (uint64_t)&a1[7 * a1[38] + 24];
    if (!*(_BYTE *)(v5 + 13)) {
      break;
    }
    uint64_t result = (unsigned __int8 *)ot::MeshCoP::Joiner::Connect((ot::InstanceLocator *)a1, (__int16 *)v5);
    if (!(_DWORD)result)
    {
      ++a1[38];
      return result;
    }

    if (!a2) {
      a2  = result;
    }
    ++a1[38];
  }

  if (!a2) {
    a2  = 23;
  }
  return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)a1, a2);
}

uint64_t ot::GetArrayEnd<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>(uint64_t a1)
{
  return a1 + 28;
}

{
  return __ZN2ot11GetArrayEndINS_7MeshCoP6Joiner12JoinerRouterELt2EEEPT_RAT0__S4_(a1);
}

uint64_t ot::MeshCoP::SteeringData::PermitsAllJoiners(ot::MeshCoP::SteeringData *this)
{
  DoesAllMatch  = 0;
  if (*(_BYTE *)this) {
    DoesAllMatch  = ot::MeshCoP::SteeringData::DoesAllMatch(this, 0xFFu);
  }
  return DoesAllMatch & 1;
}

{
  return __ZNK2ot7MeshCoP12SteeringData17PermitsAllJoinersEv(this);
}

uint64_t ot::GetArrayLength<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>()
{
  return 2LL;
}

{
  return __ZN2ot14GetArrayLengthINS_7MeshCoP6Joiner12JoinerRouterELt2EEEtRAT0__KT_();
}

uint64_t ot::MeshCoP::Joiner::Connect(ot::InstanceLocator *a1, __int16 *a2)
{
  uint64_t v19 = a1;
  uint64_t v18 = (ot::Mac::ExtAddress *)a2;
  unsigned int v17 = 23;
  ot::Ip6::SockAddr::SockAddr((ot::Ip6::SockAddr *)v16, a2[5]);
  ot::Mac::ExtAddress::ToString(v18, (ot::StringWriter *)v20);
  char v2 = ot::String<(unsigned short)17>::AsCString((uint64_t)v20);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Joiner",  "Joiner connecting to %s, pan:0x%04x, chan:%d",  v3,  v4,  v5,  v6,  v7,  v8,  v2);
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  ot::Mac::Mac::SetPanId(v9, *((_WORD *)v18 + 4));
  uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  unsigned int v17 = ot::Mac::Mac::SetPanChannel(v10, *((_BYTE *)v18 + 12));
  if (!v17)
  {
    char v11 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(a1);
    unsigned int v17 = ot::Ip6::Filter::AddUnsecurePort(v11, 1000);
    if (!v17)
    {
      ot::Ip6::SockAddr::GetAddress((ot::Ip6::SockAddr *)v16);
      ot::Ip6::Address::SetToLinkLocalAddress(v12, v18);
      int v13 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      unsigned int v17 = ot::Coap::CoapSecure::Connect( v13,  (const ot::Ip6::SockAddr *)v16,  (void (*)(BOOL, void *))ot::MeshCoP::Joiner::HandleSecureCoapClientConnect,  (uint64_t)a1);
      if (!v17) {
        ot::MeshCoP::Joiner::SetState(a1, 2u);
      }
    }
  }

  ot::MeshCoP::LogError((char)"start secure joiner connection", v17);
  return v17;
}

ot::Ip6::SockAddr *ot::Ip6::SockAddr::SockAddr(ot::Ip6::SockAddr *this, __int16 a2)
{
  return this;
}

{
  void *v2;
  *((_WORD *)this + 8)  = a2;
  ot::Ip6::SockAddr::GetAddress(this);
  ot::Clearable<ot::Ip6::Address>::Clear(v2);
  return this;
}

ot::MeshCoP::Joiner *ot::MeshCoP::Joiner::HandleSecureCoapClientConnect( ot::MeshCoP::Joiner *this, ot::MeshCoP::Joiner *a2, void *a3)
{
  return ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(a2, this & 1);
}

ot::MeshCoP::Joiner *ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(ot::MeshCoP::Joiner *this, char a2)
{
  char v2 = this;
  if (*((_BYTE *)this + 24) == 2)
  {
    if ((a2 & 1) != 0)
    {
      ot::MeshCoP::Joiner::SetState(this, 3u);
      ot::MeshCoP::Joiner::SendJoinerFinalize(v2);
      return (ot::MeshCoP::Joiner *)ot::TimerMilli::Start((ot::MeshCoP::Joiner *)((char *)v2 + 88), 0xFA0u);
    }

    else
    {
      return (ot::MeshCoP::Joiner *)ot::MeshCoP::Joiner::TryNextJoinerRouter(this, 8LL);
    }
  }

  return this;
}

void ot::MeshCoP::Joiner::SendJoinerFinalize(ot::MeshCoP::Joiner *this)
{
  if (!*((void *)this + 10)) {
    __assert_rtn("SendJoinerFinalize", "joiner.cpp", 522, "mFinalizeMessage != nullptr");
  }
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  if (!ot::Coap::CoapSecure::SendMessage( v1,  *((ot::Coap::Message **)this + 10),  (uint64_t)ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse,  (uint64_t)this))
  {
    *((void *)this + 10)  = 0LL;
    char v2 = ot::UriToString<(ot::Uri)21>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Sent %s", v3, v4, v5, v6, v7, v8, v2);
  }

ot::MeshCoP::VendorStackVersionTlv *ot::MeshCoP::VendorStackVersionTlv::VendorStackVersionTlv( ot::MeshCoP::VendorStackVersionTlv *this)
{
  return this;
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)33,(unsigned char)32>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x21, 0x20u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh33ELh32EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)34,(unsigned char)32>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x22, 0x20u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh34ELh32EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)35,(unsigned char)16>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x23, 0x10u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh35ELh16EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::Init(ot::MeshCoP::VendorStackVersionTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 6);
}

{
  return __ZN2ot7MeshCoP21VendorStackVersionTlv4InitEv(this);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetOui( ot::MeshCoP::VendorStackVersionTlv *this, unsigned int a2, unsigned __int8 *a3)
{
  return ot::Encoding::BigEndian::WriteUint24(a2, (_BYTE *)this + 2, a3);
}

{
  return __ZN2ot7MeshCoP21VendorStackVersionTlv6SetOuiEj(this, a2, a3);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetMajor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 7)  = *(_BYTE *)(this + 7) & 0xF0 | a2 & 0xF;
  return this;
}

{
  return __ZN2ot7MeshCoP21VendorStackVersionTlv8SetMajorEh(this, a2);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetMinor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 7)  = *(_BYTE *)(this + 7) & 0xF | (16 * a2);
  return this;
}

{
  return __ZN2ot7MeshCoP21VendorStackVersionTlv8SetMinorEh(this, a2);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetRevision(ot::MeshCoP::VendorStackVersionTlv *this, char a2)
{
  __int16 v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 5));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 0xFF0F | a2 & 0xF0u));
  *(_WORD *)((char *)this + 5)  = result;
  return result;
}

{
  return __ZN2ot7MeshCoP21VendorStackVersionTlv11SetRevisionEh(this, a2);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)36,(unsigned char)64>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x24, 0x40u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh36ELh64EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x20, 0x40u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh32ELh64EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

void ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = v4;
  ot::AsCoreType<otMessageInfo>(a3);
  ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(_BYTE *a1, ot::Tlv *a2, uint64_t a3, int a4)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  uint64_t v18 = a3;
  int v17 = a4;
  if (a1[24] == 3 && !v17)
  {
    if (!v19) {
      __assert_rtn("HandleJoinerFinalizeResponse", "joiner.cpp", 553, "aMessage != nullptr");
    }
    if (ot::Coap::Message::IsAck(v19)
      && ot::Coap::Message::GetCode(v19) == 68
      && !ot::Tlv::Find<ot::MeshCoP::StateTlv>(v19, &v16, v4, v5))
    {
      ot::MeshCoP::Joiner::SetState((ot::InstanceLocator *)a1, 4u);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 88), 0xFA0u);
      char v6 = ot::UriToString<(ot::Uri)21>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Received %s %d", v7, v8, v9, v10, v11, v12, v6);
    }
  }

  int v13 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
  ot::Coap::CoapSecure::Disconnect(v13);
  unint64_t v14 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>((ot::InstanceLocator *)a1);
  ot::Ip6::Filter::RemoveUnsecurePort(v14, 1000);
  IgnoreError();
}

BOOL ot::Coap::Message::IsAck(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetType(this) == 2;
}

{
  return __ZNK2ot4Coap7Message5IsAckEv(this);
}

void ot::MeshCoP::Joiner::HandleTmf<(ot::Uri)20>(_BYTE *a1, ot::Tlv *a2, const ot::Ip6::MessageInfo *a3)
{
  if (a1[24] == 4 && ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)20>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(v30);
    ot::MeshCoP::Dataset::Info::UpdateNetworkKey((ot::MeshCoP::Dataset::Info *)v30);
    int v27 = ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>(a2, v10, v11, v12, v13);
    if (!v27)
    {
      unint64_t v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      PanChannel  = ot::Mac::Mac::GetPanChannel(v14);
      ot::MeshCoP::Dataset::Info::SetChannel((uint64_t)v30, PanChannel);
      char v16 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      PanId  = ot::Mac::Mac::GetPanId(v16);
      ot::MeshCoP::Dataset::Info::SetPanId((uint64_t)v30, PanId);
      active  = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
      ot::MeshCoP::ActiveDatasetManager::Save(active, (const ot::MeshCoP::Dataset::Info *)v30);
      IgnoreError();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Joiner successful!", v19, v20, v21, v22, v23, v24, v25);
      ot::MeshCoP::Joiner::SendJoinerEntrustResponse((ot::MeshCoP::Joiner *)a1, a2, a3);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 88), 0x64u);
    }

    ot::MeshCoP::LogError((char)"process joiner entrust", v27);
  }

  else
  {
    ot::MeshCoP::LogError((char)"process joiner entrust", 2);
  }

void ot::MeshCoP::Dataset::Info::UpdateNetworkKey(ot::MeshCoP::Dataset::Info *this)
{
  *((_WORD *)this + 60)  = *((_WORD *)this + 60) & 0xFFFB | 4;
  ot::AsCoreType<otNetworkKey>((uint64_t)this + 32);
}

{
  __ZN2ot7MeshCoP7Dataset4Info16UpdateNetworkKeyEv(this);
}

void ot::MeshCoP::Joiner::SendJoinerEntrustResponse( ot::MeshCoP::Joiner *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  int v17 = a3;
  int v16 = 0;
  memcpy(__dst, a3, sizeof(__dst));
  char v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v15 = ot::Coap::CoapBase::NewPriorityResponseMessage(v3, v18);
  if (v15)
  {
    ot::Message::SetSubType(v15, 4);
    ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)__dst);
    ot::Clearable<ot::Ip6::Address>::Clear(v4);
    uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    int v16 = ot::Coap::CoapBase::SendMessage(v5, v15, (const ot::Ip6::MessageInfo *)__dst);
    if (!v16)
    {
      ot::MeshCoP::Joiner::SetState(this, 5u);
      char v6 = ot::UriToString<(ot::Uri)20>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Sent %s response", v7, v8, v9, v10, v11, v12, v6);
    }
  }

  else
  {
    int v16 = 3;
  }

  if (v16)
  {
    if (v15) {
      ot::Message::Free(v15);
    }
  }

uint64_t ot::MeshCoP::VendorStackVersionTlv::VendorStackVersionTlv(uint64_t this)
{
  *(_WORD *)(this + 5)  = 0;
  *(_BYTE *)(this + 7)  = 0;
  return this;
}

uint64_t ot::Encoding::BigEndian::WriteUint24(uint64_t this, _BYTE *a2, unsigned __int8 *a3)
{
  *a2  = BYTE2(this);
  a2[1]  = BYTE1(this);
  a2[2]  = this;
  return this;
}

{
  return __ZN2ot8Encoding9BigEndian11WriteUint24EjPh(this, a2, a3);
}

unsigned __int8 *ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  __int16 v2 = (ot::MeshCoP::Joiner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Joiner>(a1);
  return ot::MeshCoP::Joiner::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Joiner>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::Joiner>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_7MeshCoP6JoinerEEERT_v(a1);
}

uint64_t ot::Max<signed char>(char a1, char a2)
{
  if (a1 >= a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return __ZN2ot3MaxIaEET_S1_S1_(a1, a2);
}

uint64_t ot::Min<signed char>(char a1, char a2)
{
  if (a1 >= a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return __ZN2ot3MinIaEET_S1_S1_(a1, a2);
}

ot::MeshCoP::JoinerRouter *ot::MeshCoP::JoinerRouter::JoinerRouter( ot::MeshCoP::JoinerRouter *this, ot::Instance *a2)
{
  uint64_t result = this;
  *((_WORD *)this + 56)  = 0;
  *((_BYTE *)this + 114) &= ~1u;
  return result;
}

{
  ot::MeshCoP::JoinerRouter::JoinerRouter(this, a2);
  return this;
}

uint64_t ot::MeshCoP::JoinerRouter::HandleTimer(ot::MeshCoP::JoinerRouter *this)
{
  return ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust(this);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::HandleTimer);
  return a1;
}

void ot::MeshCoP::JoinerRouter::HandleNotifierEvents(ot::MeshCoP::JoinerRouter *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (ot::Events::Contains(&v3, 512LL)) {
    ot::MeshCoP::JoinerRouter::Start(a1);
  }
}

void ot::MeshCoP::JoinerRouter::Start(ot::MeshCoP::JoinerRouter *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsFullThreadDevice(v1))
  {
    __int16 v2 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if ((ot::NetworkData::LeaderBase::IsJoiningEnabled(v2) & 1) != 0)
    {
      JoinerUdpPort  = ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(this);
      if (!ot::Ip6::Udp::SocketHandle::IsBound((ot::MeshCoP::JoinerRouter *)((char *)this + 8)))
      {
        ot::Ip6::Udp::Socket::Open( (ot::MeshCoP::JoinerRouter *)((char *)this + 8),  (uint64_t)ot::MeshCoP::JoinerRouter::HandleUdpReceive,  (uint64_t)this);
        IgnoreError();
        ot::Ip6::Udp::Socket::Bind((ot::MeshCoP::JoinerRouter *)((char *)this + 8), JoinerUdpPort, 1u);
        IgnoreError();
        uint64_t v9 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
        ot::Ip6::Filter::AddUnsecurePort(v9, JoinerUdpPort);
        IgnoreError();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"JoinerRouter",  "Joiner Router: start",  v10,  v11,  v12,  v13,  v14,  v15,  v17);
      }
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Joiner Router: stop", v3, v4, v5, v6, v7, v8, v17);
      if (ot::Ip6::Udp::SocketHandle::IsBound((ot::MeshCoP::JoinerRouter *)((char *)this + 8)))
      {
        uint64_t v18 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
        ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::JoinerRouter *)((char *)this + 8));
        ot::Ip6::Filter::RemoveUnsecurePort(v18, *(_WORD *)(v16 + 16));
        IgnoreError();
        ot::Ip6::Udp::Socket::Close((ot::MeshCoP::JoinerRouter *)((char *)this + 8));
        IgnoreError();
      }
    }
  }

uint64_t ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(ot::MeshCoP::JoinerRouter *this)
{
  unsigned __int16 v4 = 1000;
  if ((*((_BYTE *)this + 114) & 1) != 0)
  {
    return *((unsigned __int16 *)this + 56);
  }

  else
  {
    uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v1, 0x12u);
    ot::As<ot::MeshCoP::JoinerUdpPortTlv>();
    if (v2) {
      return (unsigned __int16)ot::MeshCoP::JoinerUdpPortTlv::GetUdpPort(v2);
    }
  }

  return v4;
}

void ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::MeshCoP::JoinerRouter *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  ot::MeshCoP::JoinerRouter::HandleUdpReceive(a1, v5, v4);
}

  ;
}

uint64_t ot::MeshCoP::JoinerUdpPortTlv::GetUdpPort(ot::MeshCoP::JoinerUdpPortTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot7MeshCoP16JoinerUdpPortTlv10GetUdpPortEv(this);
}

void ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(ot::MeshCoP::JoinerRouter *this, __int16 a2)
{
  *((_WORD *)this + 56)  = a2;
  *((_BYTE *)this + 11ot::AsCoreType<otSteeringData>((uint64_t)this + 4) = *((_BYTE *)this + 114) & 0xFE | 1;
  ot::MeshCoP::JoinerRouter::Start(this);
}

void ot::MeshCoP::JoinerRouter::HandleUdpReceive( ot::MeshCoP::JoinerRouter *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v44 = this;
  unint64_t v43 = a2;
  uint64_t v42 = a3;
  unsigned __int16 v40 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v39, Instance);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"JoinerRouter",  "JoinerRouter::HandleUdpReceive",  v4,  v5,  v6,  v7,  v8,  v9,  v28);
  uint64_t v10 = (ot::MeshCoP *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  BorderAgentRloc  = ot::MeshCoP::GetBorderAgentRloc(v10, (ot::ThreadNetif *)&v37, v11);
  if (!BorderAgentRloc)
  {
    uint64_t v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    unsigned __int16 v40 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v12, 0x1Cu);
    if (v40)
    {
      v35  = v40;
      PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v42);
      BorderAgentRloc  = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>((uint64_t)v35, PeerPort);
      if (!BorderAgentRloc)
      {
        v34  = v40;
        ot::Ip6::MessageInfo::GetPeerAddr(v42);
        Iid  = (void *)ot::Ip6::Address::GetIid(v14);
        BorderAgentRloc  = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(v34, Iid);
        if (!BorderAgentRloc)
        {
          int v33 = v40;
          uint64_t v16 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v16);
          BorderAgentRloc  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>((uint64_t)v33, Rloc16);
          if (!BorderAgentRloc)
          {
            ot::MeshCoP::ExtendedTlv::SetType(v38, 17);
            __int16 Length = ot::Message::GetLength(v43);
            Offset  = ot::Message::GetOffset(v43);
            ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v38, Length - Offset);
            BorderAgentRloc  = ot::Message::Append<ot::MeshCoP::ExtendedTlv>(v40, v38);
            if (!BorderAgentRloc)
            {
              unsigned __int16 v31 = v40;
              uint64_t v29 = v43;
              unsigned __int16 v30 = ot::Message::GetOffset(v43);
              unsigned __int16 v19 = ot::ExtendedTlv::GetLength((ot::ExtendedTlv *)v38);
              BorderAgentRloc  = ot::Message::AppendBytesFromMessage(v31, v29, v30, v19);
              if (!BorderAgentRloc)
              {
                ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v39, v37);
                uint64_t v20 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                BorderAgentRloc  = ot::Coap::CoapBase::SendMessage(v20, v40, (const ot::Ip6::MessageInfo *)v39);
                if (!BorderAgentRloc)
                {
                  char v21 = ot::UriToString<(ot::Uri)28>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"JoinerRouter",  "Sent %s",  v22,  v23,  v24,  v25,  v26,  v27,  v21);
                }
              }
            }
          }
        }
      }
    }

    else
    {
      BorderAgentRloc  = 3;
    }
  }

  if (BorderAgentRloc && v40)
  {
    ot::MeshCoP::LogError((char)"process UDP message", BorderAgentRloc);
    if (v40) {
      ot::Message::Free(v40);
    }
  }

void ot::MeshCoP::JoinerRouter::HandleTmf<(ot::Uri)29>(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v38 = a1;
  v37  = a2;
  uint64_t v36 = a3;
  unsigned __int16 v30 = 0LL;
  ot::Message::Settings::Settings(v29, 0, 3);
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v28);
  if (ot::Coap::Message::IsNonConfirmablePostRequest(v37))
  {
    char v3 = ot::UriToString<(ot::Uri)29>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    TlvValueOffset  = ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>(v37, (unsigned __int16 *)&v34, v10, v11);
    if (!TlvValueOffset)
    {
      TlvValueOffset  = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>( v37,  (uint64_t)v33,  v12,  v13,  v14);
      if (!TlvValueOffset)
      {
        TlvValueOffset  = ot::Tlv::FindTlvValueOffset(v37, (const ot::Message *)0x11, &v32, &v31, v15);
        if (!TlvValueOffset)
        {
          unsigned __int16 v30 = ot::Ip6::Udp::Socket::NewMessage( (ot::Ip6::Udp::Socket *)(a1 + 8),  0,  (const ot::Message::Settings *)v29);
          if (v30)
          {
            TlvValueOffset  = ot::Message::AppendBytesFromMessage(v30, v37, v32, v31);
            if (!TlvValueOffset)
            {
              ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v28);
              ot::Ip6::Address::SetToLinkLocalAddress(v16, (const ot::Ip6::InterfaceIdentifier *)v33);
              ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v28, v34);
              TlvValueOffset  = ot::Ip6::Udp::Socket::SendTo( (ot::Ip6::Udp::Socket *)(a1 + 8),  v30,  (const ot::Ip6::MessageInfo *)v28);
              if (!TlvValueOffset
                && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>( v37,  (uint64_t)v39,  v17,  v18,  v19))
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"JoinerRouter",  "Received kek",  v20,  v21,  v22,  v23,  v24,  v25,  v26);
                ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust( (ot::MeshCoP::JoinerRouter *)a1,  (const ot::Ip6::MessageInfo *)v28,  (const ot::Mac::Key *)v39);
              }
            }
          }

          else
          {
            TlvValueOffset  = 3;
          }
        }
      }
    }
  }

  else
  {
    TlvValueOffset  = 2;
  }

  if (TlvValueOffset && v30)
  {
    ot::MeshCoP::LogError((char)"process UDP message", TlvValueOffset);
    if (v30) {
      ot::Message::Free(v30);
    }
  }

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x15, a2, (void *)0x10, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh21ENS_3Mac3KeyEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

void ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust( ot::MeshCoP::JoinerRouter *this, const ot::Ip6::MessageInfo *a2, const ot::Mac::Key *a3)
{
  uint64_t v12 = this;
  __src  = a2;
  uint64_t v10 = a3;
  int v9 = 0;
  char v3 = (ot::Message::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
  uint64_t v8 = ot::MessagePool::Allocate(v3, 5);
  ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::JoinerEntrustMetadata((ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)__dst);
  if (v8)
  {
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t v4 = (ot::TimerMilli *)ot::Ip6::MessageInfo::SetPeerPort((uint64_t)__dst, 61631);
    int Now = ot::TimerMilli::GetNow(v4);
    int v7 = ot::Time::operator+(&Now, 50);
    int v14 = v7;
    __int128 v15 = *(_OWORD *)v10;
    int v9 = ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::AppendTo( (ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)__dst,  v8);
    if (!v9)
    {
      ot::MessageQueue::Enqueue((ot::MeshCoP::JoinerRouter *)((char *)this + 104), v8);
    }
  }

  else
  {
    int v9 = 3;
  }

  if (v9 && v8) {
    ot::Message::Free(v8);
  }
  ot::MeshCoP::LogError((char)"schedule joiner entrust", v9);
}

ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::JoinerEntrustMetadata( ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *this)
{
  return this;
}

{
  ot::Ip6::MessageInfo::MessageInfo(this);
  return this;
}

uint64_t ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::AppendTo( ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *this, ot::Message *a2)
{
  return ot::Message::Append<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(a2, (char *)this);
}

{
  return __ZNK2ot7MeshCoP12JoinerRouter21JoinerEntrustMetadata8AppendToERNS_7MessageE(this, a2);
}

uint64_t ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust(ot::MeshCoP::JoinerRouter *this)
{
  int v7 = this;
  ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::JoinerEntrustMetadata((ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)v8);
  uint64_t result = ot::MessageQueue::GetHead((ot::MeshCoP::JoinerRouter *)((char *)this + 104));
  uint64_t v6 = (ot::Message *)result;
  if (result)
  {
    uint64_t result = ot::Timer::IsRunning((ot::MeshCoP::JoinerRouter *)((char *)this + 80));
    if ((result & 1) == 0)
    {
      ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom( (ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)v8,  v6);
      int Now = ot::TimerMilli::GetNow(v2);
      if (ot::Time::operator<(&Now, &v9))
      {
        return ot::TimerMilli::FireAt((ot::MeshCoP::JoinerRouter *)((char *)this + 80), v9);
      }

      else
      {
        ot::MessageQueue::DequeueAndFree((ot::MeshCoP::JoinerRouter *)((char *)this + 104), v6);
        char v3 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::SetKek(v3, &v10);
        uint64_t result = ot::MeshCoP::JoinerRouter::SendJoinerEntrust(this, (const ot::Ip6::MessageInfo *)v8);
        if ((_DWORD)result) {
          return ot::TimerMilli::Start((ot::MeshCoP::JoinerRouter *)((char *)this + 80), 0);
        }
      }
    }
  }

  return result;
}

void ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom( ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *this, const ot::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x50uLL) {
    __assert_rtn("ReadFrom", "joiner_router.cpp", 418, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(a2, Length - 80, (char *)this);
  IgnoreError();
}

uint64_t ot::MeshCoP::JoinerRouter::SendJoinerEntrust( ot::MeshCoP::JoinerRouter *this, const ot::Ip6::MessageInfo *a2)
{
  uint64_t v13 = ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage(this);
  if (v13)
  {
    __int16 v2 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    ot::Coap::CoapBase::AbortTransaction( v2,  (uint64_t)ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse,  (uint64_t)this);
    IgnoreError();
    char v3 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    unsigned int v14 = ot::Coap::CoapBase::SendMessage( v3,  v13,  a2,  (uint64_t)ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse,  (uint64_t)this);
    if (!v14)
    {
      char v11 = ot::UriToString<(ot::Uri)20>();
      ot::Message::GetLength(v13);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Sent %s (len= %d)", v4, v5, v6, v7, v8, v9, v11);
    }
  }

  else
  {
    unsigned int v14 = 3;
  }

  if (v14 && v13) {
    ot::Message::Free(v13);
  }
  return v14;
}

ot::Message *ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage(ot::MeshCoP::JoinerRouter *this)
{
  uint64_t v27 = this;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v31);
  uint64_t v1 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v25 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v1, 0x14u);
  if (v25)
  {
    ot::Message::SetSubType(v25, 4);
    __int16 v2 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::KeyManager::GetNetworkKey(v2, &v29);
    int v26 = ot::Tlv::Append<ot::MeshCoP::NetworkKeyTlv>(v25, &v29);
    if (!v26)
    {
      char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::GetMeshLocalPrefix(v3);
      int v26 = ot::Tlv::Append<ot::MeshCoP::MeshLocalPrefixTlv>(v25, v4);
      if (!v26)
      {
        uint64_t v5 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
        ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v5);
        int v26 = ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(v25, v6);
        if (!v26)
        {
          ot::MeshCoP::NetworkNameTlv::Init((ot::MeshCoP::NetworkNameTlv *)v30);
          uint64_t v7 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
          ot::MeshCoP::NetworkNameManager::GetNetworkName(v7);
          v23[0]  = ot::MeshCoP::NetworkName::GetAsData(v8);
          v23[1]  = v9;
          ot::MeshCoP::NetworkNameTlv::SetNetworkName( (ot::MeshCoP::NetworkNameTlv *)v30,  (const ot::MeshCoP::NameData *)v23);
          int v26 = ot::Tlv::AppendTo((ot::Tlv *)v30, v25);
          if (!v26)
          {
            active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
            ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset *)v31);
            IgnoreError();
            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>((uint64_t)v31);
            uint64_t v24 = v11;
            if (v11)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            else
            {
              ot::MeshCoP::ActiveTimestampTlv::Init((ot::MeshCoP::ActiveTimestampTlv *)v22);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v22, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>((uint64_t)v31);
            uint64_t v24 = v12;
            if (v12)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            else
            {
              ot::MeshCoP::ChannelMaskBaseTlv::Init((ot::MeshCoP::ChannelMaskBaseTlv *)v21);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v21, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>((uint64_t)v31);
            uint64_t v24 = v13;
            if (v13)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            else
            {
              ot::MeshCoP::PskcTlv::Init((ot::MeshCoP::PskcTlv *)v28);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v28, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>((uint64_t)v31);
            uint64_t v24 = v14;
            if (v14)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            else
            {
              ot::MeshCoP::SecurityPolicyTlv::Init((ot::MeshCoP::SecurityPolicyTlv *)v20);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v20, v25);
              if (v26) {
                goto LABEL_24;
              }
            }

            uint64_t v18 = v25;
            __int128 v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
            CurrentKeySequence  = ot::KeyManager::GetCurrentKeySequence(v15);
            int v26 = ot::Tlv::Append<ot::MeshCoP::NetworkKeySequenceTlv>(v18, CurrentKeySequence);
          }
        }
      }
    }
  }

  else
  {
    int v26 = 3;
  }

void ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse( ot::MeshCoP::JoinerRouter *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(a1, v6, v5, a4);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::NetworkKeyTlv>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)5, a2, (const void *)0x10);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP13NetworkKeyTlvEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::MeshLocalPrefixTlv>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)7, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP18MeshLocalPrefixTlvEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)2, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP16ExtendedPanIdTlvEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

uint64_t ot::MeshCoP::NetworkNameTlv::Init(ot::MeshCoP::NetworkNameTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 16);
}

{
  return __ZN2ot7MeshCoP14NetworkNameTlv4InitEv(this);
}

void *ot::MeshCoP::ActiveTimestampTlv::Init(ot::MeshCoP::ActiveTimestampTlv *this)
{
  return ot::Clearable<ot::MeshCoP::Timestamp>::Clear((ot::MeshCoP::ActiveTimestampTlv *)((char *)this + 2));
}

{
  return __ZN2ot7MeshCoP18ActiveTimestampTlv4InitEv(this);
}

uint64_t ot::MeshCoP::ChannelMaskBaseTlv::Init(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 0);
}

{
  return __ZN2ot7MeshCoP18ChannelMaskBaseTlv4InitEv(this);
}

uint64_t ot::MeshCoP::PskcTlv::Init(ot::MeshCoP::PskcTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 16);
}

{
  return __ZN2ot7MeshCoP7PskcTlv4InitEv(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::NetworkKeySequenceTlv>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 6u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP21NetworkKeySequenceTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

void ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse( ot::MeshCoP::JoinerRouter *a1, ot::Message *a2, uint64_t a3, int a4)
{
  if (!a4 && a2 && ot::Coap::Message::GetCode(a2) == 68)
  {
    uint64_t v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    AverageRss  = ot::Message::GetAverageRss(a2);
    ot::Mac::Mac::UpdateJoinerRssiHistogram(v12, AverageRss);
    char v5 = ot::UriToString<(ot::Uri)20>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Receive %s response", v6, v7, v8, v9, v10, v11, v5);
  }

uint64_t ot::Message::Read<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x50u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP12JoinerRouter21JoinerEntrustMetadataEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Message::Append<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x50u);
}

{
  return __ZN2ot7Message6AppendINS_7MeshCoP12JoinerRouter21JoinerEntrustMetadataEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  __int16 v2 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(a1);
  return ot::MeshCoP::JoinerRouter::HandleTimer(v2);
}

uint64_t ot::MeshCoP::JoinerPskd::SetFrom(ot::MeshCoP::JoinerPskd *this, ot *a2)
{
  unsigned int v5 = 0;
  if ((ot::MeshCoP::JoinerPskd::IsPskdValid(a2, (const char *)a2) & 1) != 0)
  {
    ot::Clearable<ot::MeshCoP::JoinerPskd>::Clear(this);
    unsigned __int16 v2 = ot::StringLength(a2, (const char *)0x21);
    memcpy(this, a2, v2);
  }

  else
  {
    return 7;
  }

  return v5;
}

uint64_t ot::MeshCoP::JoinerPskd::IsPskdValid(ot::MeshCoP::JoinerPskd *this, const char *a2)
{
  char v6 = 0;
  _c_3  = ot::StringLength(this, (const char *)0x21);
  if (_c_3 >= 6u && _c_3 <= 0x20u)
  {
    for (_c_1  = 0; _c_1 < (int)_c_3; ++_c_1)
    {
      _c  = *((_BYTE *)this + _c_1);
      if (!isdigit(_c) && !isupper(_c) || _c == 73 || _c == 79 || _c == 81 || _c == 90) {
        return v6 & 1;
      }
    }

    char v6 = 1;
  }

  return v6 & 1;
}

void *ot::Clearable<ot::MeshCoP::JoinerPskd>::Clear(void *a1)
{
  return memset(a1, 0, 0x21uLL);
}

{
  return __ZN2ot9ClearableINS_7MeshCoP10JoinerPskdEE5ClearEv(a1);
}

uint64_t ot::MeshCoP::JoinerPskd::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = 1;
  for (unsigned __int8 i = 0; i < 0x21uLL; ++i)
  {
    if (*(char *)(a1 + i) != *(char *)(a2 + i))
    {
      char v4 = 0;
      return v4 & 1;
    }

    if (!*(_BYTE *)(a1 + i)) {
      return v4 & 1;
    }
  }

  return v4 & 1;
}

int isupper(int _c)
{
  return __istype(_c, 0x8000uLL);
}

{
  return __Z7isupperi(_c);
}

_BYTE *ot::MeshCoP::JoinerDiscerner::GenerateJoinerId( ot::MeshCoP::JoinerDiscerner *this, ot::Mac::ExtAddress *a2)
{
  return ot::Mac::ExtAddress::SetLocal(a2, 1);
}

BOOL ot::MeshCoP::JoinerDiscerner::CopyTo(ot::MeshCoP::JoinerDiscerner *this, ot::Mac::ExtAddress *a2)
{
  unsigned int v5 = (char *)a2 + 7;
  unsigned __int8 v4 = *((_BYTE *)this + 8);
  unint64_t v3 = *(void *)this;
  BOOL result = ot::MeshCoP::JoinerDiscerner::IsValid(this);
  if (!result) {
    __assert_rtn("CopyTo", "meshcop.cpp", 135, "IsValid()");
  }
  while (v4 >= 8u)
  {
    *unsigned int v5 = v3;
    v3 >>= 8;
    --v5;
    v4 -= 8;
  }

  if (v4)
  {
    *v5 &= ~((1 << v4) - 1);
    *v5 |= v3 & ((1 << v4) - 1);
  }

  return result;
}

BOOL ot::MeshCoP::JoinerDiscerner::Matches( ot::MeshCoP::JoinerDiscerner *this, const ot::Mac::ExtAddress *a2)
{
  if (!ot::MeshCoP::JoinerDiscerner::IsValid(this)) {
    __assert_rtn("Matches", "meshcop.cpp", 117, "IsValid()");
  }
  Masunsigned __int16 k = ot::MeshCoP::JoinerDiscerner::GetMask(this);
  return (ot::Encoding::BigEndian::ReadUint64(a2, v2) & Mask) == (*(void *)this & Mask);
}

uint64_t ot::MeshCoP::JoinerDiscerner::GetMask(ot::MeshCoP::JoinerDiscerner *this)
{
  return (1LL << *((_BYTE *)this + 8)) - 1;
}

{
  return __ZNK2ot7MeshCoP15JoinerDiscerner7GetMaskEv(this);
}

unint64_t ot::Encoding::BigEndian::ReadUint64( ot::Encoding::BigEndian *this, const unsigned __int8 *a2)
{
  return _byteswap_uint64(*(void *)this);
}

{
  return __ZN2ot8Encoding9BigEndian10ReadUint64EPKh(this, a2);
}

BOOL ot::MeshCoP::JoinerDiscerner::operator==(unsigned __int8 *a1, uint64_t a2)
{
  Masunsigned __int16 k = ot::MeshCoP::JoinerDiscerner::GetMask((ot::MeshCoP::JoinerDiscerner *)a1);
  BOOL v4 = 0;
  if (ot::MeshCoP::JoinerDiscerner::IsValid((ot::MeshCoP::JoinerDiscerner *)a1))
  {
    BOOL v4 = 0;
  }

  return v4;
}

ot::StringWriter *ot::MeshCoP::JoinerDiscerner::ToString@<X0>( ot::MeshCoP::JoinerDiscerner *this@<X0>, ot::StringWriter *a2@<X8>)
{
  if (*((unsigned __int8 *)this + 8) > 0x10uLL)
  {
    if (*((unsigned __int8 *)this + 8) > 0x20uLL)
    {
      uint64_t v5 = ot::ToUlong(HIDWORD(*(void *)this));
      uint64_t v3 = ot::ToUlong(*(void *)this);
      ot::StringWriter::Append(a2, "0x%lx-%08lx", v5, v3);
    }

    else
    {
      uint64_t v2 = ot::ToUlong(*(void *)this);
      ot::StringWriter::Append(a2, "0x%08lx", v2);
    }
  }

  else
  {
    ot::StringWriter::Append(a2, "0x%04x", (unsigned __int16)*(void *)this);
  }

  return ot::StringWriter::Append(a2, "/len:%d", *((unsigned __int8 *)this + 8));
}

uint64_t ot::MeshCoP::SteeringData::Init(uint64_t this, unsigned __int8 a2)
{
  if (a2 > 0x10u) {
    __assert_rtn("Init", "meshcop.cpp", 191, "aLength <= kMaxLength");
  }
  *(_BYTE *)this  = a2;
  *(void *)(this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0LL;
  *(void *)(this + ot::Mle::Tlv::SetType(this, 9) = 0LL;
  return this;
}

uint64_t ot::MeshCoP::SteeringData::SetToPermitAllJoiners(ot::MeshCoP::SteeringData *this)
{
  uint64_t result = ot::MeshCoP::SteeringData::Init((uint64_t)this, 1u);
  *((_BYTE *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = -1;
  return result;
}

uint64_t ot::MeshCoP::SteeringData::UpdateBloomFilter( ot::MeshCoP::SteeringData *this, const ot::Mac::ExtAddress *a2)
{
  char v6 = this;
  uint64_t v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)a2, v4);
  return ot::MeshCoP::SteeringData::UpdateBloomFilter(this, v4);
}

uint64_t ot::MeshCoP::SteeringData::CalculateHashBitIndexes(unsigned __int8 *a1, _WORD *a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  ot::Crc16::Crc16(v8, 4129);
  ot::Crc16::Crc16(v7, 32773);
  char v6 = v10;
  uint64_t v5 = v10 + 8;
  while (v6 != v5)
  {
    unsigned __int8 v4 = *v6;
    ot::Crc16::Update(v8, *v6);
    ot::Crc16::Update(v7, v4);
    ++v6;
  }

  __int16 v2 = ot::Crc16::Get((ot::Crc16 *)v8);
  *uint64_t v9 = v2;
  uint64_t result = ot::Crc16::Get((ot::Crc16 *)v7);
  v9[1]  = result;
  return result;
}

uint64_t ot::MeshCoP::SteeringData::UpdateBloomFilter(ot::MeshCoP::SteeringData *a1, unsigned __int16 *a2)
{
  BOOL v8 = 0;
  if (*(_BYTE *)a1) {
    BOOL v8 = *(unsigned __int8 *)a1 <= 0x10u;
  }
  if (!v8) {
    __assert_rtn("UpdateBloomFilter", "meshcop.cpp", 220, "(mLength > 0) && (mLength <= kMaxLength)");
  }
  int v5 = *a2;
  NumBits  = ot::MeshCoP::SteeringData::GetNumBits(a1);
  ot::MeshCoP::SteeringData::SetBit(a1, v5 % NumBits);
  int v6 = a2[1];
  unsigned __int8 v3 = ot::MeshCoP::SteeringData::GetNumBits(a1);
  return ot::MeshCoP::SteeringData::SetBit(a1, v6 % v3);
}

uint64_t ot::MeshCoP::SteeringData::UpdateBloomFilter( ot::MeshCoP::SteeringData *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  int v6 = this;
  int v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(a2, v4);
  return ot::MeshCoP::SteeringData::UpdateBloomFilter(this, v4);
}

uint64_t ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner *a1, _WORD *a2)
{
  return ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)&v5, a2);
}

uint64_t ot::MeshCoP::SteeringData::SetBit(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  char v4 = ot::MeshCoP::SteeringData::BitFlag(this, a2);
  uint64_t result = ot::MeshCoP::SteeringData::BitIndex(this, a2);
  *((_BYTE *)this + result + 1) |= v4;
  return result;
}

{
  return __ZN2ot7MeshCoP12SteeringData6SetBitEh(this, a2);
}

uint64_t ot::MeshCoP::SteeringData::GetNumBits(ot::MeshCoP::SteeringData *this)
{
  return (8 * *(_BYTE *)this);
}

{
  return __ZNK2ot7MeshCoP12SteeringData10GetNumBitsEv(this);
}

BOOL ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData *this, const ot::Mac::ExtAddress *a2)
{
  int v6 = this;
  uint64_t v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)a2, v4);
  return ot::MeshCoP::SteeringData::Contains(this, v4);
}

BOOL ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData *a1, unsigned __int16 *a2)
{
  BOOL v8 = 0;
  if (*(_BYTE *)a1)
  {
    int v6 = *a2;
    NumBits  = ot::MeshCoP::SteeringData::GetNumBits(a1);
    BOOL v8 = 0;
    if (ot::MeshCoP::SteeringData::GetBit(a1, v6 % NumBits))
    {
      int v5 = a2[1];
      unsigned __int8 v3 = ot::MeshCoP::SteeringData::GetNumBits(a1);
      return ot::MeshCoP::SteeringData::GetBit(a1, v5 % v3);
    }
  }

  return v8;
}

BOOL ot::MeshCoP::SteeringData::Contains( ot::MeshCoP::SteeringData *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  int v6 = this;
  int v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(a2, v4);
  return ot::MeshCoP::SteeringData::Contains(this, v4);
}

BOOL ot::MeshCoP::SteeringData::GetBit(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  char v4 = *((_BYTE *)this + ot::MeshCoP::SteeringData::BitIndex(this, a2) + 1);
  return (v4 & ot::MeshCoP::SteeringData::BitFlag(this, a2)) != 0;
}

{
  return __ZNK2ot7MeshCoP12SteeringData6GetBitEh(this, a2);
}

uint64_t ot::Crc16::Get(ot::Crc16 *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return __ZNK2ot5Crc163GetEv(this);
}

uint64_t ot::MeshCoP::SteeringData::DoesAllMatch(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  char v4 = 1;
  for (unsigned __int8 i = 0; i < (int)*(unsigned __int8 *)this; ++i)
  {
    if (*((unsigned __int8 *)this + i + 1) != a2)
    {
      char v4 = 0;
      return v4 & 1;
    }
  }

  return v4 & 1;
}

void ot::MeshCoP::ComputeJoinerId(ot::MeshCoP *this, const ot::Mac::ExtAddress *a2, ot::Mac::ExtAddress *a3)
{
  uint64_t v7 = this;
  int v6 = a2;
  ot::Crypto::Sha256::Sha256((ot::Crypto::Sha256 *)v5);
  ot::Crypto::Sha256::Start((ot::Crypto::Sha256 *)v5);
  ot::Crypto::Sha256::Update<ot::Mac::ExtAddress>((ot::Crypto::Sha256 *)v5, (uint64_t)v7);
  ot::Crypto::Sha256::Finish((ot::Crypto::Sha256 *)v5, (ot::Crypto::Sha256::Hash *)v8);
  char v4 = v6;
  ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v8);
  *char v4 = *v3;
  ot::Mac::ExtAddress::SetLocal(v6, 1);
  ot::Crypto::Sha256::~Sha256((ot::Crypto::Sha256 *)v5);
}

uint64_t ot::Crypto::Sha256::Update<ot::Mac::ExtAddress>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 8u);
}

{
  return __ZN2ot6Crypto6Sha2566UpdateINS_3Mac10ExtAddressEEEvRKT_(a1, a2);
}

uint64_t ot::MeshCoP::GetBorderAgentRloc(ot::MeshCoP *this, ot::ThreadNetif *a2, unsigned __int16 *a3)
{
  unsigned int v6 = 0;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v3, 9u);
  ot::As<ot::MeshCoP::BorderAgentLocatorTlv>();
  if (v4) {
    *(_WORD *)a2  = ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(v4);
  }
  else {
    return 23;
  }
  return v6;
}

  ;
}

uint64_t ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(ot::MeshCoP::BorderAgentLocatorTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot7MeshCoP21BorderAgentLocatorTlv21GetBorderAgentLocatorEv(this);
}

uint64_t ot::MeshCoP::GeneratePskc(__int128 *a1, ot::MeshCoP::NetworkName *a2, void *a3, char *a4)
{
  unsigned int v14 = (ot *)a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  uint64_t v11 = a4;
  unsigned int v10 = 0;
  strcpy((char *)&__n_5, "Thread");
  if ((ot::IsValidUtf8String((ot *)a1, (const char *)a2) & 1) != 0)
  {
    __n_1  = ot::StringLength(v14, (const char *)0x100);
    ot::MeshCoP::NetworkName::GetAsCString(v13);
    unsigned __int8 __n = ot::StringLength(v4, (const char *)0x11);
    if (__n_1 >= 6u && __n_1 <= 0xFFu && __n <= 0x10u)
    {
      *(_DWORD *)&v16[8]  = 0;
      v17[0]  = 0LL;
      *(void *)((char *)v17 + 6)  = 0LL;
      int v15 = __n_5;
      *(void *)uint64_t v16 = WORD2(__n_5);
      *(void *)&v16[2]  = *v12;
      ot::MeshCoP::NetworkName::GetAsCString(v13);
      memcpy(&v16[10], v5, __n);
      j__otPlatCryptoPbkdf2GenerateKey((__int128 *)v14, __n_1, &v15, __n + 14, 0x4000u, 0x10u, v11);
    }

    else
    {
      return 7;
    }
  }

  else
  {
    return 7;
  }

  return v10;
}

void ot::MeshCoP::LogError(char a1, int a2)
{
  if (a2)
  {
    if (a2 != 24)
    {
      ot::ErrorToString(a2);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshCoP", "Failed to %s: %s", v2, v3, v4, v5, v6, v7, a1);
    }
  }

uint64_t ot::MeshCoP::SteeringData::BitFlag(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  return (1 << (a2 % 8));
}

{
  return __ZNK2ot7MeshCoP12SteeringData7BitFlagEh(this, a2);
}

uint64_t ot::MeshCoP::SteeringData::BitIndex(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  return (*(_BYTE *)this - 1 - a2 / 8);
}

{
  return __ZNK2ot7MeshCoP12SteeringData8BitIndexEh(this, a2);
}

ot::MeshCoP::Leader *ot::MeshCoP::Leader::Leader(ot::MeshCoP::Leader *this, ot::Instance *a2)
{
  uint64_t v2 = ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::TimerMilliIn( (ot::MeshCoP::Leader *)((char *)this + 8),  a2);
  *((_DWORD *)this + 8)  = 30000;
  Uint16  = ot::Random::NonCrypto::GetUint16(v2);
  uint64_t result = this;
  *((_WORD *)this + 5ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = Uint16;
  return result;
}

{
  ot::MeshCoP::Leader::Leader(this, a2);
  return this;
}

void ot::MeshCoP::Leader::HandleTimer(ot::MeshCoP::Leader *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v1)) {
    ot::MeshCoP::Leader::ResignCommissioner(this);
  }
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::HandleTimer);
  return a1;
}

void ot::MeshCoP::Leader::HandleTmf<(ot::Uri)23>(_WORD *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v27 = -1;
  char v3 = ot::UriToString<(ot::Uri)23>();
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Received %s", v4, v5, v6, v7, v8, v9, v3);
  uint64_t v25 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
  ot::Ip6::MessageInfo::GetPeerAddr(a3);
  if (ot::Mle::Mle::IsRoutingLocator(v25, v10)
    && !ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(a2, __src, v11, v12, v13))
  {
    if (ot::Timer::IsRunning((ot::Timer *)(a1 + 4)))
    {
      CommissionerIdunsigned __int8 Length = ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength((ot::MeshCoP::CommissionerIdTlv *)__src);
      __s1  = (char *)ot::MeshCoP::CommissionerIdTlv::GetCommissionerId((ot::MeshCoP::CommissionerIdTlv *)__src);
      __s2  = (char *)ot::MeshCoP::CommissionerIdTlv::GetCommissionerId((ot::MeshCoP::CommissionerIdTlv *)(a1 + 18));
      unsigned __int8 v14 = ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength((ot::MeshCoP::CommissionerIdTlv *)__src);
      if (strncmp(__s1, __s2, v14)) {
        goto LABEL_12;
      }
      ot::MeshCoP::Leader::ResignCommissioner((ot::MeshCoP::Leader *)a1);
    }

    ot::MeshCoP::BorderAgentLocatorTlv::Init((ot::MeshCoP::BorderAgentLocatorTlv *)v31);
    ot::Ip6::MessageInfo::GetPeerAddr(a3);
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v15);
    Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator((ot::MeshCoP::BorderAgentLocatorTlv *)v31, Locator);
    ot::MeshCoP::CommissionerSessionIdTlv::Init((ot::MeshCoP::CommissionerSessionIdTlv *)v32);
    unsigned __int16 v18 = a1[51] + 1;
    a1[51]  = v18;
    ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId((ot::MeshCoP::CommissionerSessionIdTlv *)v32, v18);
    ot::MeshCoP::SteeringDataTlv::Init((ot::MeshCoP::SteeringDataTlv *)v33);
    ot::Tlv::SetLength((uint64_t)v33, 1);
    ot::MeshCoP::SteeringDataTlv::Clear((ot::MeshCoP::SteeringDataTlv *)v33);
    uint64_t v21 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    unsigned __int8 Length = ot::MeshCoP::CommissioningData::GetLength((ot::MeshCoP::CommissioningData *)v31);
    if (!ot::NetworkData::LeaderBase::SetCommissioningData(v21, v31, Length))
    {
      memcpy(a1 + 18, __src, 0x42uLL);
      unsigned __int8 v27 = 1;
      unsigned int v20 = ot::Time::SecToMsec((ot::Time *)0x32);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 4), v20);
    }
  }

uint64_t ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(a1, a2, a3, a4, a5);
}

{
  return __ZN2ot7MeshCoP3Tlv7FindTlvINS0_17CommissionerIdTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength(ot::MeshCoP::CommissionerIdTlv *this)
{
  else {
    return ot::Tlv::GetLength(this);
  }
}

{
  return __ZNK2ot7MeshCoP17CommissionerIdTlv23GetCommissionerIdLengthEv(this);
}

uint64_t ot::MeshCoP::CommissionerIdTlv::GetCommissionerId(ot::MeshCoP::CommissionerIdTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZNK2ot7MeshCoP17CommissionerIdTlv17GetCommissionerIdEv(this);
}

void ot::MeshCoP::Leader::ResignCommissioner(ot::MeshCoP::Leader *this)
{
}

uint64_t ot::MeshCoP::BorderAgentLocatorTlv::Init(ot::MeshCoP::BorderAgentLocatorTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return __ZN2ot7MeshCoP21BorderAgentLocatorTlv4InitEv(this);
}

uint64_t ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator( ot::MeshCoP::BorderAgentLocatorTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP21BorderAgentLocatorTlv21SetBorderAgentLocatorEt(this, a2);
}

uint64_t ot::Ip6::InterfaceIdentifier::GetLocator(ot::Ip6::InterfaceIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return __ZNK2ot3Ip619InterfaceIdentifier10GetLocatorEv(this);
}

uint64_t ot::MeshCoP::CommissionerSessionIdTlv::Init(ot::MeshCoP::CommissionerSessionIdTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return __ZN2ot7MeshCoP24CommissionerSessionIdTlv4InitEv(this);
}

uint64_t ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId( ot::MeshCoP::CommissionerSessionIdTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP24CommissionerSessionIdTlv24SetCommissionerSessionIdEt(this, a2);
}

void ot::MeshCoP::SteeringDataTlv::Init(ot::MeshCoP::SteeringDataTlv *this)
{
}

{
  __ZN2ot7MeshCoP15SteeringDataTlv4InitEv(this);
}

void ot::MeshCoP::SteeringDataTlv::Clear(ot::MeshCoP::SteeringDataTlv *this)
{
  SteeringDataunsigned __int8 Length = ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
  bzero((char *)this + 2, SteeringDataLength);
}

{
  __ZN2ot7MeshCoP15SteeringDataTlv5ClearEv(this);
}

uint64_t ot::MeshCoP::CommissioningData::GetLength(ot::MeshCoP::CommissioningData *this)
{
  uint64_t v2 = ot::Tlv::GetLength(this) + 4LL;
  uint64_t v4 = v2 + ot::Tlv::GetLength((ot::MeshCoP::CommissioningData *)((char *)this + 4)) + 2;
  return (v4 + ot::Tlv::GetLength((ot::MeshCoP::CommissioningData *)((char *)this + 8)));
}

{
  return __ZNK2ot7MeshCoP17CommissioningData9GetLengthEv(this);
}

void ot::MeshCoP::Leader::SendPetitionResponse( unsigned __int16 *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
  unsigned __int8 v14 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v14)
  {
    int v15 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)v14, a4);
    if (!v15
      && (!ot::Timer::IsRunning((ot::Timer *)(a1 + 4)) || (int v15 = ot::Tlv::AppendTo((ot::Tlv *)(a1 + 18), v14)) == 0)
      && (a4 != 1 || (int v15 = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v14, a1[51])) == 0))
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
      int v15 = ot::Coap::CoapBase::SendMessage(v5, v14, a3);
      if (!v15)
      {
        char v6 = ot::UriToString<(ot::Uri)23>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshCoPLeader",  "Sent %s response",  v7,  v8,  v9,  v10,  v11,  v12,  v6);
      }
    }
  }

  else
  {
    int v15 = 3;
  }

  if (v15 && v14) {
    ot::Message::Free(v14);
  }
  ot::MeshCoP::LogError((char)"send petition response", v15);
}

void ot::MeshCoP::Leader::HandleTmf<(ot::Uri)22>( unsigned __int16 *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v27 = a1;
  int v26 = a2;
  uint64_t v25 = a3;
  char v3 = ot::UriToString<(ot::Uri)22>();
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Received %s", v4, v5, v6, v7, v8, v9, v3);
  if (!ot::Tlv::Find<ot::MeshCoP::StateTlv>(v26, &v24, v10, v11)
    && !ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v26, &v23, v12, v13))
  {
    uint64_t v14 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v14, 9u);
    ot::As<ot::MeshCoP::BorderAgentLocatorTlv>();
    uint64_t v22 = v15;
    if (v15 && v23 == a1[51])
    {
      if (v24 == 1)
      {
        ot::Ip6::MessageInfo::GetPeerAddr(v25);
        Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v16);
        Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
        if (Locator != (unsigned __int16)ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(v22))
        {
          ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator(v22, Locator);
          unsigned __int16 v18 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
          ot::NetworkData::Leader::IncrementVersion(v18);
        }

        unsigned int v19 = ot::Time::SecToMsec((ot::Time *)0x32);
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 4), v19);
        ot::MeshCoP::Leader::SendKeepAliveResponse((ot::InstanceLocator *)a1, v26, v25, 1u);
      }

      else
      {
        ot::MeshCoP::Leader::ResignCommissioner((ot::MeshCoP::Leader *)a1);
        ot::MeshCoP::Leader::SendKeepAliveResponse((ot::InstanceLocator *)a1, v26, v25, 0xFFu);
      }
    }

    else
    {
      ot::MeshCoP::Leader::SendKeepAliveResponse((ot::InstanceLocator *)a1, v26, v25, 0xFFu);
    }
  }

void ot::MeshCoP::Leader::SendKeepAliveResponse( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v14)
  {
    int v15 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)v14, a4);
    if (!v15)
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v15 = ot::Coap::CoapBase::SendMessage(v5, v14, a3);
      if (!v15)
      {
        char v6 = ot::UriToString<(ot::Uri)22>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshCoPLeader",  "Sent %s response",  v7,  v8,  v9,  v10,  v11,  v12,  v6);
      }
    }
  }

  else
  {
    int v15 = 3;
  }

  if (v15 && v14) {
    ot::Message::Free(v14);
  }
  ot::MeshCoP::LogError((char)"send keep alive response", v15);
}

void ot::MeshCoP::Leader::SendDatasetChanged(ot::MeshCoP::Leader *this, __n128 *a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  int v15 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v14, Instance);
  char v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v13 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v3, 0x11u);
  if (v13)
  {
    ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v14, v16);
    uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    int v15 = ot::Coap::CoapBase::SendMessage(v4, v13, (const ot::Ip6::MessageInfo *)v14);
    if (!v15)
    {
      char v5 = ot::UriToString<(ot::Uri)17>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Sent %s", v6, v7, v8, v9, v10, v11, v5);
    }
  }

  else
  {
    int v15 = 3;
  }

  if (v15 && v13) {
    ot::Message::Free(v13);
  }
  ot::MeshCoP::LogError((char)"send dataset changed", v15);
}

uint64_t ot::MeshCoP::Leader::SetDelayTimerMinimal(ot::MeshCoP::Leader *this, unsigned int a2)
{
  unsigned int v3 = 0;
  if (a2 && a2 < 0x493E0) {
    *((_DWORD *)this + 8)  = a2;
  }
  else {
    return 7;
  }
  return v3;
}

uint64_t ot::MeshCoP::Leader::GetDelayTimerMinimal(ot::MeshCoP::Leader *this)
{
  return *((unsigned int *)this + 8);
}

void ot::MeshCoP::Leader::SetEmptyCommissionerData(ot::MeshCoP::Leader *this)
{
  uint64_t v6 = this;
  ot::MeshCoP::CommissionerSessionIdTlv::Init((ot::MeshCoP::CommissionerSessionIdTlv *)v5);
  unsigned __int16 v1 = *((_WORD *)this + 51) + 1;
  *((_WORD *)this + 5ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = v1;
  ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId((ot::MeshCoP::CommissionerSessionIdTlv *)v5, v1);
  uint64_t v4 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char Length = ot::Tlv::GetLength((ot::Tlv *)v5);
  ot::NetworkData::LeaderBase::SetCommissioningData(v4, v5, Length + 2);
  IgnoreError();
}

uint64_t ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(ot::MeshCoP::SteeringDataTlv *this)
{
  else {
    return ot::Tlv::GetLength(this);
  }
}

{
  return __ZNK2ot7MeshCoP15SteeringDataTlv21GetSteeringDataLengthEv(this);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::Leader::HandleTimer)(v2);
}

uint64_t ot::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xA, 0x42u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_7MeshCoP17CommissionerIdTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv *this, const ot::MeshCoP::Tlv *a2)
{
  unint64_t Type = ot::MeshCoP::Tlv::GetType(this);
  if (Type <= 0x4A) {
    __asm { BR              X8 }
  }

  return 1LL;
}

  ;
}

uint64_t ot::MeshCoP::ChannelTlv::IsValid(ot::MeshCoP::ChannelTlv *this)
{
  char v3 = 0;
  if (ot::Tlv::GetLength(this) == 3LL
    && *((unsigned __int8 *)this + 2) < 0x20uLL
    && ((1 << *((_BYTE *)this + 2)) & 1) != 0
    && (unsigned __int16)ot::MeshCoP::ChannelTlv::GetChannel(this) >= 0xBu
    && (unsigned __int16)ot::MeshCoP::ChannelTlv::GetChannel(this) <= 0x19u)
  {
    char v3 = 1;
  }

  return v3 & 1;
}

  ;
}

uint64_t ot::MeshCoP::WakeupChannelTlv::IsValid(ot::MeshCoP::WakeupChannelTlv *this)
{
  char v3 = 0;
  if (ot::Tlv::GetLength(this) == 3LL
    && *((unsigned __int8 *)this + 2) < 0x20uLL
    && ((1 << *((_BYTE *)this + 2)) & 1) != 0
    && (unsigned __int16)ot::MeshCoP::WakeupChannelTlv::GetChannel(this) >= 0xBu
    && (unsigned __int16)ot::MeshCoP::WakeupChannelTlv::GetChannel(this) <= 0x19u)
  {
    char v3 = 1;
  }

  return v3 & 1;
}

  ;
}

BOOL ot::MeshCoP::PanIdTlv::IsValid(ot::MeshCoP::PanIdTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

  ;
}

{
  return __ZNK2ot7MeshCoP8PanIdTlv7IsValidEv(this);
}

BOOL ot::MeshCoP::ExtendedPanIdTlv::IsValid(ot::MeshCoP::ExtendedPanIdTlv *this)
{
  return ot::Tlv::GetLength(this) >= 8uLL;
}

  ;
}

{
  return __ZNK2ot7MeshCoP16ExtendedPanIdTlv7IsValidEv(this);
}

uint64_t ot::MeshCoP::NetworkNameTlv::IsValid(ot::MeshCoP::NetworkNameTlv *this)
{
  unsigned __int8 Length = ot::Tlv::GetLength(this);
  return ot::IsValidUtf8String((ot::MeshCoP::NetworkNameTlv *)((char *)this + 2), (const char *)Length) & 1;
}

  ;
}

BOOL ot::MeshCoP::NetworkKeyTlv::IsValid(ot::MeshCoP::NetworkKeyTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x10uLL;
}

  ;
}

{
  return __ZNK2ot7MeshCoP13NetworkKeyTlv7IsValidEv(this);
}

BOOL ot::MeshCoP::PskcTlv::IsValid(ot::MeshCoP::PskcTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x10uLL;
}

  ;
}

{
  return __ZNK2ot7MeshCoP7PskcTlv7IsValidEv(this);
}

BOOL ot::MeshCoP::MeshLocalPrefixTlv::IsValid(ot::MeshCoP::MeshLocalPrefixTlv *this)
{
  return ot::Tlv::GetLength(this) >= 8uLL;
}

  ;
}

{
  return __ZNK2ot7MeshCoP18MeshLocalPrefixTlv7IsValidEv(this);
}

BOOL ot::MeshCoP::SecurityPolicyTlv::IsValid(ot::MeshCoP::SecurityPolicyTlv *this)
{
  BOOL v3 = 0;
  return v3;
}

  ;
}

uint64_t ot::MeshCoP::ChannelMaskBaseTlv::IsValid(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  FirstEntry  = ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(this);
  ot::MeshCoP::Tlv::GetNext(this);
  unint64_t v6 = v1;
  char v5 = 0;
  if (FirstEntry)
  {
    while ((unint64_t)FirstEntry < v6)
    {
      ChannelPage  = ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage(FirstEntry);
      if ((!ChannelPage || ChannelPage == 2) && !ot::MeshCoP::ChannelMaskEntry::IsValid(FirstEntry)) {
        return v5 & 1;
      }
      FirstEntry  = (ot::MeshCoP::ChannelMaskEntryBase *)ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry);
    }

    char v5 = 1;
  }

  return v5 & 1;
}

ot::Tlv *ot::MeshCoP::Tlv::FindTlv(ot::Tlv *a1, unsigned __int16 a2, unsigned __int8 a3)
{
  unint64_t v6 = (unint64_t)a1 + a2;
  for (unsigned __int8 i = a1; (unint64_t)i < v6; unsigned __int8 i = v4)
  {
    ot::MeshCoP::Tlv::GetNext(i);
    if (v3 > v6) {
      return 0LL;
    }
    ot::MeshCoP::Tlv::GetNext(i);
  }

  return 0LL;
}

uint64_t ot::MeshCoP::NetworkNameTlv::GetNetworkName(ot::MeshCoP::NetworkNameTlv *this)
{
  unsigned __int8 Length = ot::Tlv::GetLength(this);
  if (Length > 0x10uLL) {
    unsigned __int8 Length = 16;
  }
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)&v4, (const char *)this + 2, Length);
  return v4;
}

uint64_t ot::MeshCoP::NetworkNameTlv::SetNetworkName( ot::MeshCoP::NetworkNameTlv *this, const ot::MeshCoP::NameData *a2)
{
  char v4 = ot::MeshCoP::NameData::CopyTo(a2, (char *)this + 2, 16);
  return ot::Tlv::SetLength((uint64_t)this, v4);
}

void *ot::MeshCoP::SteeringDataTlv::CopyTo( ot::MeshCoP::SteeringDataTlv *this, ot::MeshCoP::SteeringData *a2)
{
  SteeringDataunsigned __int8 Length = ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
  ot::MeshCoP::SteeringData::Init((uint64_t)a2, SteeringDataLength);
  __dst  = (void *)ot::MeshCoP::SteeringData::GetData(a2);
  unsigned __int8 v3 = ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
  return memcpy(__dst, (char *)this + 2, v3);
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::GetFlagsLength(ot::MeshCoP::SecurityPolicyTlv *this)
{
  return (ot::Tlv::GetLength(this) - 2);
}

{
  return __ZNK2ot7MeshCoP17SecurityPolicyTlv14GetFlagsLengthEv(this);
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy(ot::MeshCoP::SecurityPolicyTlv *this)
{
  Flagsunsigned __int8 Length = ot::MeshCoP::SecurityPolicyTlv::GetFlagsLength(this);
  unsigned __int8 v4 = ot::Min<unsigned char>(2u, FlagsLength);
  LOWORD(v5)  = ot::MeshCoP::SecurityPolicyTlv::GetRotationTime(this);
  ot::SecurityPolicy::SetFlags((ot::SecurityPolicy *)&v5, (char *)this + 4, v4);
  return v5;
}

ot::SecurityPolicy *ot::SecurityPolicy::SecurityPolicy(ot::SecurityPolicy *this)
{
  return this;
}

{
  ot::SecurityPolicy::SetToDefault(this);
  return this;
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::GetRotationTime(ot::MeshCoP::SecurityPolicyTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot7MeshCoP17SecurityPolicyTlv15GetRotationTimeEv(this);
}

void ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy( ot::MeshCoP::SecurityPolicyTlv *this, const ot::SecurityPolicy *a2)
{
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::SetRotationTime( ot::MeshCoP::SecurityPolicyTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP17SecurityPolicyTlv15SetRotationTimeEt(this, a2);
}

uint64_t ot::MeshCoP::ChannelTlv::SetChannel(ot::MeshCoP::ChannelTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 3)  = result;
  return result;
}

uint64_t ot::MeshCoP::ChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot7MeshCoP10ChannelTlv14SetChannelPageEh(this, a2);
}

uint64_t ot::MeshCoP::WakeupChannelTlv::SetChannel(ot::MeshCoP::WakeupChannelTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 3)  = result;
  return result;
}

uint64_t ot::MeshCoP::WakeupChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot7MeshCoP16WakeupChannelTlv14SetChannelPageEh(this, a2);
}

ot::MeshCoP::ChannelMaskEntryBase *ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry( ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  uint64_t Value = 0LL;
  if (ot::Tlv::GetLength(this) >= 2uLL)
  {
    uint64_t Value = (ot::MeshCoP::ChannelMaskEntryBase *)ot::Tlv::GetValue(this);
    int Length = ot::Tlv::GetLength(this);
  }

  return Value;
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetNext(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return (uint64_t)this + (unsigned __int16)ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize(this);
}

{
  return __ZNK2ot7MeshCoP20ChannelMaskEntryBase7GetNextEv(this);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot7MeshCoP20ChannelMaskEntryBase14GetChannelPageEv(this);
}

BOOL ot::MeshCoP::ChannelMaskEntry::IsValid(ot::MeshCoP::ChannelMaskEntry *this)
{
  return ot::MeshCoP::ChannelMaskEntryBase::GetMaskLength(this) == 4LL;
}

{
  return __ZNK2ot7MeshCoP16ChannelMaskEntry7IsValidEv(this);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return (unsigned __int16)(*((unsigned __int8 *)this + 1) + 2);
}

{
  return __ZNK2ot7MeshCoP20ChannelMaskEntryBase12GetEntrySizeEv(this);
}

void ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
}

  ;
}

  ;
}

uint64_t ot::MeshCoP::ChannelMaskTlv::SetChannelMask(ot::MeshCoP::ChannelMaskTlv *this, int a2)
{
  char v6 = 0;
  ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(this);
  unsigned int v5 = v2;
  if ((a2 & 0x7FFF800) != 0)
  {
    if (!v2) {
      __assert_rtn("SetChannelMask", "meshcop_tlvs.cpp", 336, "entry != nullptr");
    }
    ot::MeshCoP::ChannelMaskEntry::Init(v2);
    ot::MeshCoP::ChannelMaskEntryBase::SetChannelPage(v5, 0);
    ot::MeshCoP::ChannelMaskEntry::SetMask(v5, a2 & 0x7FFF800);
    char v6 = 6;
  }

  return ot::Tlv::SetLength((uint64_t)this, v6);
}

uint64_t ot::MeshCoP::ChannelMaskEntry::Init(ot::MeshCoP::ChannelMaskEntry *this)
{
  return ot::MeshCoP::ChannelMaskEntryBase::SetMaskLength((uint64_t)this, 4);
}

{
  return __ZN2ot7MeshCoP16ChannelMaskEntry4InitEv(this);
}

_BYTE *ot::MeshCoP::ChannelMaskEntryBase::SetChannelPage(_BYTE *this, char a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot7MeshCoP20ChannelMaskEntryBase14SetChannelPageEh(this, a2);
}

uint64_t ot::MeshCoP::ChannelMaskEntry::SetMask(ot::MeshCoP::ChannelMaskEntry *this, unsigned int a2)
{
  uint64_t v2 = (ot::Encoding::BigEndian *)ot::Encoding::Reverse32((ot::Encoding *)a2);
  uint64_t result = ot::Encoding::BigEndian::HostSwap32(v2);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP16ChannelMaskEntry7SetMaskEj(this, a2);
}

uint64_t ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::MeshCoP::ChannelMaskTlv *this)
{
  FirstEntry  = ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(this);
  ot::MeshCoP::Tlv::GetNext(this);
  unint64_t v5 = v1;
  unsigned int v4 = 0;
  if (FirstEntry)
  {
    while ((unint64_t)FirstEntry < v5
         && (unint64_t)FirstEntry + 2 <= v5
         && ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry) <= v5)
    {
      FirstEntry  = (ot::MeshCoP::ChannelMaskEntryBase *)ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry);
    }
  }

  return v4;
}

uint64_t ot::MeshCoP::ChannelMaskEntry::GetMask(ot::MeshCoP::ChannelMaskEntry *this)
{
  unint64_t v1 = (ot::Encoding *)ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
  return ot::Encoding::Reverse32(v1);
}

{
  return __ZNK2ot7MeshCoP16ChannelMaskEntry7GetMaskEv(this);
}

uint64_t ot::MeshCoP::ChannelMaskTlv::GetChannelMask( ot::MeshCoP::ChannelMaskTlv *this, const ot::Message *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v14 = this;
  unsigned int v13 = 0;
  if (!ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)0x35, &v12, &v11, a5))
  {
    v11 += v12;
    while ((unint64_t)v12 + 2 <= v11)
    {
      ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(v14, v12, v10);
      IgnoreError();
      int v9 = v12;
      EntrySize  = ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize((ot::MeshCoP::ChannelMaskEntryBase *)v10);
      if (v9 + EntrySize > v11) {
        break;
      }
      if (!ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage((ot::MeshCoP::ChannelMaskEntryBase *)v10))
      {
        ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(v14, v12, v10);
        IgnoreError();
        Masunsigned __int16 k = ot::MeshCoP::ChannelMaskEntry::GetMask((ot::MeshCoP::ChannelMaskEntry *)v10);
        v13 |= Mask & 0x7FFF800;
      }

      __int16 v7 = ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize((ot::MeshCoP::ChannelMaskEntryBase *)v10);
      v12 += v7;
    }
  }

  return v13;
}

uint64_t ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP16ChannelMaskEntryEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetMaskLength(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot7MeshCoP20ChannelMaskEntryBase13GetMaskLengthEv(this);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::SetMaskLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  return this;
}

{
  return __ZN2ot7MeshCoP20ChannelMaskEntryBase13SetMaskLengthEh(this, a2);
}

uint64_t ot::Encoding::Reverse32(ot::Encoding *this)
{
  int v1 = (unsigned __int16)((((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F))) & 0xFF00FF00) >> 8) | ((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55))) & 0x33))) & 0xF))) << 8));
  return ((((((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F))) & 0xFF00FF00) >> 8) | (((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F))) & 0xFF00FF) << 8)) & 0xFFFF0000) >> 16) | (v1 << 16);
}

{
  return __ZN2ot8Encoding9Reverse32Ej(this);
}

ot::PanIdQueryClient *ot::PanIdQueryClient::PanIdQueryClient(ot::PanIdQueryClient *this, ot::Instance *a2)
{
  return this;
}

{
  ot::PanIdQueryClient::PanIdQueryClient(this, a2);
  return this;
}

uint64_t ot::PanIdQueryClient::SendQuery( ot::PanIdQueryClient *this, unsigned __int16 a2, int a3, const ot::Ip6::Address *a4, void (*a5)(unsigned __int16, unsigned int, void *), uint64_t a6)
{
  unsigned __int16 v30 = this;
  unsigned __int16 v29 = a2;
  int v28 = a3;
  unsigned __int8 v27 = a4;
  int v26 = a5;
  uint64_t v25 = a6;
  inited  = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v22, Instance);
  uint64_t v21 = 0LL;
  __int16 v7 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
  if (ot::MeshCoP::Commissioner::IsActive(v7))
  {
    uint64_t v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v21 = ot::Coap::CoapBase::NewPriorityMessage(v8);
    if (v21)
    {
      inited  = ot::Coap::Message::InitAsPost(v21, v27, 0x1Au);
      if (!inited)
      {
        inited  = ot::Coap::Message::SetPayloadMarker(v21);
        if (!inited)
        {
          int v9 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
          SessionId  = ot::MeshCoP::Commissioner::GetSessionId(v9);
          inited  = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>((uint64_t)v21, SessionId);
          if (!inited)
          {
            ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v23);
            ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v23, v28);
            inited  = ot::Tlv::AppendTo((ot::Tlv *)v23, v21);
            if (!inited)
            {
              inited  = ot::Tlv::Append<ot::MeshCoP::PanIdTlv>((uint64_t)v21, v29);
              if (!inited)
              {
                ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v22, (__n128 *)v27);
                unsigned __int16 v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                inited  = ot::Coap::CoapBase::SendMessage(v11, v21, (const ot::Ip6::MessageInfo *)v22);
                if (!inited)
                {
                  char v12 = ot::UriToString<(ot::Uri)26>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"PanIdQueryClnt",  "Sent %s",  v13,  v14,  v15,  v16,  v17,  v18,  v12);
                  ot::CallbackBase<void (*)(unsigned short,unsigned int,void *)>::Set(this, (uint64_t)v26, v25);
                }
              }
            }
          }
        }
      }
    }

    else
    {
      inited  = 3;
    }
  }

  else
  {
    inited  = 13;
  }

  if (inited && v21) {
    ot::Message::Free(v21);
  }
  return inited;
}

uint64_t ot::Tlv::Append<ot::MeshCoP::PanIdTlv>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 1, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_7MeshCoP8PanIdTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

void *ot::CallbackBase<void (*)(unsigned short,unsigned int,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvtjPvEE3SetES3_S1_(result, a2, a3);
}

void ot::PanIdQueryClient::HandleTmf<(ot::Uri)24>( ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int16 v29 = a1;
  int v28 = a2;
  unsigned __int8 v27 = a3;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)24>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"PanIdQueryClnt", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    if (!ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(v28, &v26, v10, v11))
    {
      ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v28, v12, v13, v14, v15);
      if (ChannelMask)
      {
        ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned short &,unsigned int &>( a1,  &v26,  &ChannelMask);
        uint64_t v16 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        if (!ot::Coap::CoapBase::SendEmptyAck(v16, v28, v27))
        {
          char v17 = ot::UriToString<(ot::Uri)24>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"PanIdQueryClnt",  "Sent %s response",  v18,  v19,  v20,  v21,  v22,  v23,  v17);
        }
      }
    }
  }

void *ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned short &,unsigned int &>( void *result, unsigned __int16 *a2, unsigned int *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short &,unsigned int &>( (uint64_t)result,  a2,  a3);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvtjPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJRtRjEEEvDpOT_(result, a2, a3);
}

uint64_t ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short &,unsigned int &>( uint64_t a1, unsigned __int16 *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvtjPvELNS_23CallbackContextPositionE1EE6InvokeIJRtRjEEEvDpOT_(a1, a2, a3);
}

BOOL ot::MeshCoP::Timestamp::ConvertTo(ot::MeshCoP::Timestamp *a1, uint64_t a2)
{
  *(void *)a2  = ot::MeshCoP::Timestamp::GetSeconds(a1);
  *(_WORD *)(a2 + 8)  = ot::MeshCoP::Timestamp::GetTicks(a1);
  BOOL result = ot::MeshCoP::Timestamp::GetAuthoritative(a1);
  *(_BYTE *)(a2 + 10)  = result;
  return result;
}

unint64_t ot::MeshCoP::Timestamp::GetSeconds(ot::MeshCoP::Timestamp *this)
{
  unint64_t v3 = (unint64_t)(unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this) << 32;
  return v3
       + ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
}

{
  return __ZNK2ot7MeshCoP9Timestamp10GetSecondsEv(this);
}

uint64_t ot::MeshCoP::Timestamp::GetTicks(ot::MeshCoP::Timestamp *this)
{
  return (int)(unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this
                                                                                               + 3)) >> 1;
}

{
  return __ZNK2ot7MeshCoP9Timestamp8GetTicksEv(this);
}

BOOL ot::MeshCoP::Timestamp::GetAuthoritative(ot::MeshCoP::Timestamp *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3)) & 1) != 0;
}

{
  return __ZNK2ot7MeshCoP9Timestamp16GetAuthoritativeEv(this);
}

uint64_t ot::MeshCoP::Timestamp::SetFromTimestamp(ot::MeshCoP::Timestamp *a1, uint64_t a2)
{
  return ot::MeshCoP::Timestamp::SetAuthoritative(a1, *(_BYTE *)(a2 + 10) & 1);
}

uint64_t ot::MeshCoP::Timestamp::SetSeconds(ot::MeshCoP::Timestamp *this, uint64_t a2)
{
  unsigned int v4 = a2;
  *(_WORD *)this  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)WORD2(a2));
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)v4);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot7MeshCoP9Timestamp10SetSecondsEy(this, a2);
}

uint64_t ot::MeshCoP::Timestamp::SetTicks(ot::MeshCoP::Timestamp *this, __int16 a2)
{
  char v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 1u | (unsigned __int16)(2 * a2)));
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot7MeshCoP9Timestamp8SetTicksEt(this, a2);
}

uint64_t ot::MeshCoP::Timestamp::SetAuthoritative(ot::MeshCoP::Timestamp *this, char a2)
{
  char v5 = a2 & 1;
  __int16 v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 0xFFFE | v5 & 1u));
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot7MeshCoP9Timestamp16SetAuthoritativeEb(this, a2);
}

uint64_t ot::MeshCoP::Timestamp::Compare( ot::MeshCoP::Timestamp *this, const ot::MeshCoP::Timestamp *a2, const ot::MeshCoP::Timestamp *a3)
{
  if (this)
  {
    if (a2) {
      return ot::MeshCoP::Timestamp::Compare(this, a2, a3);
    }
    else {
      return 1;
    }
  }

  else if (a2)
  {
    return -1;
  }

  else
  {
    return 0;
  }

{
  unint64_t v3;
  unsigned __int16 v4;
  BOOL v5;
  BOOL Authoritative;
  unsigned __int16 Ticks;
  unint64_t Seconds;
  unsigned int v10;
  Seconds  = ot::MeshCoP::Timestamp::GetSeconds(this);
  unint64_t v3 = ot::MeshCoP::Timestamp::GetSeconds(a2);
  uint64_t v10 = ot::ThreeWayCompare<unsigned long long>(Seconds, v3);
  if (!v10)
  {
    Ticks  = ot::MeshCoP::Timestamp::GetTicks(this);
    unsigned int v4 = ot::MeshCoP::Timestamp::GetTicks(a2);
    uint64_t v10 = ot::ThreeWayCompare<unsigned short>(Ticks, v4);
    if (!v10)
    {
      Authoritative  = ot::MeshCoP::Timestamp::GetAuthoritative(this);
      char v5 = ot::MeshCoP::Timestamp::GetAuthoritative(a2);
      return ot::ThreeWayCompare<BOOL>(Authoritative, v5);
    }
  }

  return v10;
}

uint64_t ot::ThreeWayCompare<unsigned long long>(unint64_t a1, unint64_t a2)
{
  if (a1 == a2)
  {
    return 0;
  }

  else if (a1 > a2)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareIyEEiT_S1_(a1, a2);
}

uint64_t ot::ThreeWayCompare<BOOL>(char a1, char a2)
{
  if ((a1 & 1) == (a2 & 1))
  {
    return 0;
  }

  else if ((a1 & 1) != 0)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareIbEEiT_S1_(a1, a2);
}

uint64_t ot::MeshCoP::Timestamp::AdvanceRandomTicks(ot::MeshCoP::Timestamp *this)
{
  Ticks  = ot::MeshCoP::Timestamp::GetTicks(this);
  __int16 v5 = Ticks + ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)1, 0x7FFFu);
  if ((v5 & 0x7FFF) != 0)
  {
    Seconds  = ot::MeshCoP::Timestamp::GetSeconds(this);
    ot::MeshCoP::Timestamp::SetSeconds(this, Seconds + 1);
  }

  return ot::MeshCoP::Timestamp::SetTicks(this, v5);
}

unsigned __int16 *ot::Checksum::AddUint8(unsigned __int16 *this, unsigned __int8 a2)
{
  if ((this[1] & 1) != 0) {
    __int16 v2 = a2;
  }
  else {
    __int16 v2 = a2 << 8;
  }
  unsigned __int16 v3 = *this + v2;
  *this  = v3;
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = (*((_BYTE *)this + 2) ^ 1) & 1;
  return this;
}

unsigned __int16 *ot::Checksum::AddUint16(ot::Checksum *this, __int16 a2)
{
  unsigned __int8 v4 = a2;
  ot::Checksum::AddUint8((unsigned __int16 *)this, HIBYTE(a2));
  return ot::Checksum::AddUint8((unsigned __int16 *)this, v4);
}

unsigned __int16 *ot::Checksum::AddData( unsigned __int16 *this, const unsigned __int8 *a2, unsigned __int16 a3)
{
  unsigned __int16 v3 = this;
  return this;
}

uint64_t ot::Checksum::WriteToMessage(ot::Checksum *this, unsigned __int16 a2, ot::Message *a3)
{
  uint64_t v6 = this;
  unsigned __int16 v5 = a2;
  *(void *)&v4[2]  = a3;
  *(_WORD *)unsigned __int8 v4 = ot::Checksum::GetValue(this);
  *(_WORD *)unsigned __int8 v4 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)v4);
  return ot::Message::Write<unsigned short>(*(ot::Message **)&v4[2], v5, v4);
}

uint64_t ot::Checksum::GetValue(ot::Checksum *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot8Checksum8GetValueEv(this);
}

uint64_t ot::Message::Write<unsigned short>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return __ZN2ot7Message5WriteItEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Checksum::Calculate( ot::Checksum *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, unsigned __int8 a4, const ot::Message *a5)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  unsigned __int8 v19 = a4;
  uint64_t v18 = a5;
  __int16 Length = ot::Message::GetLength(a5);
  unsigned __int16 v16 = Length - ot::Message::GetOffset(v18);
  ot::Ip6::Address::GetBytes(v21);
  ot::Checksum::AddData((unsigned __int16 *)this, v5, 0x10u);
  ot::Ip6::Address::GetBytes(v20);
  ot::Checksum::AddData((unsigned __int16 *)this, v6, 0x10u);
  ot::Checksum::AddUint16(this, v16);
  ot::Checksum::AddUint16(this, v19);
  uint64_t v15 = v18;
  Offset  = ot::Message::GetOffset(v18);
  ot::Message::GetFirstChunk(v15, Offset, &v16, (ot::Message::Chunk *)v17);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    char v10 = v9 | ((unsigned __int16)result == 0);
    if ((v10 & 1) != 0) {
      break;
    }
    unsigned int Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
    unsigned __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    ot::Checksum::AddData((unsigned __int16 *)this, Bytes, v11);
    ot::Message::GetNextChunk(v18, &v16, (ot::Message::Chunk *)v17);
  }

  return result;
}

uint64_t ot::Checksum::Calculate( ot::Checksum *this, const ot::Ip4::Address *a2, const ot::Ip4::Address *a3, unsigned __int8 a4, const ot::Message *a5)
{
  uint64_t v21 = this;
  uint64_t v20 = a2;
  unsigned __int8 v19 = a3;
  unsigned __int8 v18 = a4;
  char v17 = a5;
  __int16 Length = ot::Message::GetLength(a5);
  unsigned __int16 v15 = Length - ot::Message::GetOffset(v17);
  if (v18 != 1)
  {
    ot::Ip4::Address::GetBytes(v20);
    ot::Checksum::AddData((unsigned __int16 *)this, v5, 4u);
    ot::Ip4::Address::GetBytes(v19);
    ot::Checksum::AddData((unsigned __int16 *)this, v6, 4u);
    ot::Checksum::AddUint16(this, v18);
    ot::Checksum::AddUint16(this, v15);
  }

  Offset  = ot::Message::GetOffset(v17);
  ot::Message::GetFirstChunk(v17, Offset, &v15, (ot::Message::Chunk *)v16);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v16);
    char v10 = v9 | ((unsigned __int16)result == 0);
    if ((v10 & 1) != 0) {
      break;
    }
    unsigned int Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v16);
    unsigned __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v16);
    ot::Checksum::AddData((unsigned __int16 *)this, Bytes, v11);
    ot::Message::GetNextChunk(v17, &v15, (ot::Message::Chunk *)v16);
  }

  return result;
}

  ;
}

uint64_t ot::Checksum::VerifyMessageChecksum( ot::Checksum *this, const ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v10 = this;
  char v9 = a2;
  unsigned __int8 v8 = a3;
  ot::Checksum::Checksum((ot::Checksum *)v7);
  ot::Ip6::MessageInfo::GetPeerAddr(v9);
  uint64_t v6 = v3;
  ot::Ip6::MessageInfo::GetSockAddr(v9);
  ot::Checksum::Calculate((ot::Checksum *)v7, v6, v4, v8, v10);
  else {
    return 2LL;
  }
}

ot::Checksum *ot::Checksum::Checksum(ot::Checksum *this)
{
  return this;
}

ot::Checksum *ot::Checksum::UpdateMessageChecksum( ot::Checksum *this, ot::Message *a2, const ot::Ip6::Address *a3, const ot::Ip6::Address *a4)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  char v12 = a3;
  unsigned __int8 v11 = a4;
  uint64_t result = ot::Checksum::Checksum((ot::Checksum *)v9);
  switch(v11)
  {
    case 6u:
      __int16 v10 = 16;
LABEL_8:
      uint64_t v7 = v14;
      Offset  = ot::Message::GetOffset(v14);
      __int16 v8 = 0;
      ot::Message::Write<unsigned short>(v7, v10 + Offset, (char *)&v8);
      ot::Checksum::Calculate((ot::Checksum *)v9, v13, v12, v11, v14);
      __int16 v6 = ot::Message::GetOffset(v14);
      return (ot::Checksum *)ot::Checksum::WriteToMessage((ot::Checksum *)v9, v10 + v6, v14);
    case 0x11u:
      __int16 v10 = 6;
      goto LABEL_8;
    case 0x3Au:
      __int16 v10 = 2;
      goto LABEL_8;
  }

  return result;
}

ot::Checksum *ot::Checksum::UpdateMessageChecksum( ot::Checksum *this, ot::Message *a2, const ot::Ip4::Address *a3, const ot::Ip4::Address *a4)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  char v12 = a3;
  unsigned __int8 v11 = a4;
  uint64_t result = ot::Checksum::Checksum((ot::Checksum *)v9);
  switch(v11)
  {
    case 1u:
      __int16 v10 = 2;
      goto LABEL_8;
    case 6u:
      __int16 v10 = 16;
LABEL_8:
      uint64_t v7 = v14;
      Offset  = ot::Message::GetOffset(v14);
      __int16 v8 = 0;
      ot::Message::Write<unsigned short>(v7, v10 + Offset, (char *)&v8);
      ot::Checksum::Calculate((ot::Checksum *)v9, v13, v12, v11, v14);
      __int16 v6 = ot::Message::GetOffset(v14);
      return (ot::Checksum *)ot::Checksum::WriteToMessage((ot::Checksum *)v9, v10 + v6, v14);
    case 0x11u:
      __int16 v10 = 6;
      goto LABEL_8;
  }

  return result;
}

uint64_t ot::Checksum::UpdateIp4HeaderChecksum(ot::Checksum *this, ot::Ip4::Header *a2)
{
  __int16 v6 = this;
  ot::Checksum::Checksum((ot::Checksum *)v5);
  ot::Ip4::Header::SetChecksum(v6, 0);
  ot::Checksum::AddData(v5, (const unsigned __int8 *)v6, 0x14u);
  unsigned __int8 v4 = v6;
  __int16 Value = ot::Checksum::GetValue((ot::Checksum *)v5);
  return ot::Ip4::Header::SetChecksum(v4, ~Value);
}

uint64_t ot::Ip4::Header::SetChecksum(ot::Ip4::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 5)  = result;
  return result;
}

{
  return __ZN2ot3Ip46Header11SetChecksumEt(this, a2);
}

uint64_t ot::Checksum::Checksum(uint64_t this)
{
  *(_WORD *)this  = 0;
  *(_BYTE *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return this;
}

ot::Dhcp6::Client *ot::Dhcp6::Client::Client(ot::Dhcp6::Client *this, ot::Instance *a2)
{
  *((void *)this + 43)  = 0LL;
  memset((char *)this + 152, 0, 0xC0uLL);
  return this;
}

{
  ot::Dhcp6::Client::Client(this, a2);
  return this;
}

void ot::Dhcp6::Client::HandleTrickleTimer(ot::Dhcp6::Client *this, ot::TrickleTimer *a2)
{
  __int16 v2 = (ot::Dhcp6::Client *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>(this);
  ot::Dhcp6::Client::HandleTrickleTimer(v2);
}

BOOL ot::Dhcp6::Client::MatchNetifAddressWithPrefix( ot::Dhcp6::Client *this, const ot::Ip6::Netif::UnicastAddress *a2, const ot::Ip6::Prefix *a3)
{
  return ot::Ip6::Netif::UnicastAddress::HasPrefix(this, a2);
}

BOOL ot::Ip6::Netif::UnicastAddress::HasPrefix( ot::Ip6::Netif::UnicastAddress *this, const ot::Ip6::Prefix *a2)
{
  int v5 = *((unsigned __int8 *)this + 16);
  BOOL v6 = 0;
  if (v5 == ot::Ip6::Prefix::GetLength(a2))
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress(this);
    return ot::Ip6::Address::MatchesPrefix(v2, a2);
  }

  return v6;
}

{
  return __ZNK2ot3Ip65Netif14UnicastAddress9HasPrefixERKNS0_6PrefixE(this, a2);
}

void ot::Dhcp6::Client::UpdateAddresses(ot::Dhcp6::Client *this)
{
  unsigned __int8 v27 = this;
  char v26 = 0;
  char v25 = 0;
  unsigned __int8 v19 = (ot::Dhcp6::Client *)((char *)this + 152);
  unsigned __int8 v18 = (ot::Dhcp6::Client *)((char *)this + 344);
  while (v19 != v18)
  {
    if (*((_BYTE *)v19 + 42) && *((_DWORD *)v19 + 9))
    {
      char v26 = 0;
      unsigned int v24 = 0;
      while (1)
      {
        int v1 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v1,  &v24,  (ot::NetworkData::OnMeshPrefixConfig *)&v20)) {
          break;
        }
        if ((v22 & 0x10) != 0)
        {
          ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)&v20);
          if (ot::Dhcp6::Client::MatchNetifAddressWithPrefix(v19, v2, v3))
          {
            char v26 = 1;
            break;
          }
        }
      }

      if ((v26 & 1) == 0)
      {
        unsigned __int8 v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::RemoveUnicastAddress(v4, v19);
        *((_BYTE *)v19 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
      }
    }

    unsigned __int8 v19 = (ot::Dhcp6::Client *)((char *)v19 + 48);
  }

  unsigned int v24 = 0;
  while (1)
  {
    int v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v5,  &v24,  (ot::NetworkData::OnMeshPrefixConfig *)&v20)) {
      break;
    }
    char v17 = 0LL;
    if ((v22 & 0x10) != 0)
    {
      char v25 = 1;
      char v26 = 0;
      for (unsigned __int16 i = (ot::Dhcp6::Client *)((char *)this + 152);
            i != (ot::Dhcp6::Client *)((char *)this + 344);
            unsigned __int16 i = (ot::Dhcp6::Client *)((char *)i + 48))
      {
        if (*((_BYTE *)i + 42))
        {
          ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)&v20);
          if (ot::Dhcp6::Client::MatchNetifAddressWithPrefix(i, v12, v13))
          {
            char v26 = 1;
            char v17 = i;
            break;
          }
        }

        else if (!v17)
        {
          char v17 = i;
        }
      }

      if ((v26 & 1) != 0)
      {
LABEL_31:
        *((_WORD *)v17 + 20)  = v23;
      }

      else
      {
        if (v17)
        {
          *(_OWORD *)char v17 = v20;
          *((_BYTE *)v17 + ot::Tlv::SetLength((uint64_t)this, 16) = v21;
          *((_BYTE *)v17 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
          *((_DWORD *)v17 + ot::MeshCoP::Tlv::SetType(this, 9) = 0;
          goto LABEL_31;
        }

        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Dhcp6Client",  "Insufficient memory for new DHCP prefix",  v6,  v7,  v8,  v9,  v10,  v11,  v14);
      }
    }
  }

  if ((v25 & 1) != 0) {
    ot::Dhcp6::Client::Start(this);
  }
  else {
    ot::Dhcp6::Client::Stop(this);
  }
}

uint64_t ot::Dhcp6::Client::Start(ot::Dhcp6::Client *this)
{
  uint64_t result = ot::Ip6::Udp::SocketHandle::IsBound((ot::Dhcp6::Client *)((char *)this + 8));
  if ((result & 1) == 0)
  {
    ot::Ip6::Udp::Socket::Open( (ot::Dhcp6::Client *)((char *)this + 8),  (uint64_t)ot::Dhcp6::Client::HandleUdpReceive,  (uint64_t)this);
    IgnoreError();
    ot::Ip6::Udp::Socket::Bind((ot::Dhcp6::Client *)((char *)this + 8), 546, 1u);
    IgnoreError();
    return ot::Dhcp6::Client::ProcessNextIdentityAssociation(this);
  }

  return result;
}

void ot::Dhcp6::Client::Stop(ot::Dhcp6::Client *this)
{
}

void ot::Dhcp6::Client::HandleUdpReceive(ot::Dhcp6::Client *a1, uint64_t a2, uint64_t a3)
{
  int v5 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  ot::Dhcp6::Client::HandleUdpReceive(a1, v5, v4);
}

uint64_t ot::Dhcp6::Client::ProcessNextIdentityAssociation(ot::Dhcp6::Client *this)
{
  char v6 = 0;
  if (!*((void *)this + 43) || *(_BYTE *)(*((void *)this + 43) + 42LL) != 2)
  {
    ot::TrickleTimer::Stop((ot::Dhcp6::Client *)((char *)this + 80));
    for (unsigned __int16 i = (char *)this + 152; i != (char *)this + 344; i += 48)
    {
      if (i[42] == 1)
      {
        ot::Dhcp6::TransactionId::GenerateRandom((ot::Dhcp6::Client *)((char *)this + 144));
        IgnoreError();
        *((void *)this + 43)  = i;
        unsigned int v3 = ot::Time::SecToMsec((ot::Time *)1);
        unsigned int v1 = ot::Time::SecToMsec((ot::Time *)0x78);
        ot::TrickleTimer::Start((uint64_t)this + 80, 0, v3, v1, 0xFFFF);
        ot::TrickleTimer::IndicateInconsistent((uint64_t)this + 80);
        char v6 = 1;
        return v6 & 1;
      }
    }
  }

  return v6 & 1;
}

uint64_t ot::TrickleTimer::Stop(ot::TrickleTimer *this)
{
  return ot::TimerMilli::Stop(this);
}

{
  return __ZN2ot12TrickleTimer4StopEv(this);
}

uint64_t ot::Dhcp6::TransactionId::GenerateRandom(ot::Dhcp6::TransactionId *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)3);
}

{
  return __ZN2ot5Dhcp613TransactionId14GenerateRandomEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Dhcp6::Client>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5Dhcp66ClientEEERT_v(a1);
}

void ot::Dhcp6::Client::HandleTrickleTimer(ot::Dhcp6::Client *this)
{
  IsBound  = ot::Ip6::Udp::SocketHandle::IsBound((ot::Dhcp6::Client *)((char *)this + 8));
  if (!IsBound) {
    __assert_rtn("HandleTrickleTimer", "dhcp6_client.cpp", 225, "mSocket.IsBound()");
  }
  if (!*((void *)this + 43))
  {
    ot::TrickleTimer::Stop((ot::Dhcp6::Client *)((char *)this + 80));
    return;
  }

  int v2 = *(unsigned __int8 *)(*((void *)this + 43) + 42LL);
  switch(v2)
  {
    case 1:
      *((_DWORD *)this + 37)  = ot::TimerMilli::GetNow((ot::TimerMilli *)IsBound);
      *(_BYTE *)(*((void *)this + 43) + 42LL)  = 2;
      goto LABEL_10;
    case 2:
LABEL_10:
      ot::Dhcp6::Client::Solicit(this, *(_WORD *)(*((void *)this + 43) + 40LL));
      return;
    case 3:
      *((void *)this + 43)  = 0LL;
      if ((ot::Dhcp6::Client::ProcessNextIdentityAssociation(this) & 1) == 0)
      {
        ot::Dhcp6::Client::Stop(this);
        ot::TrickleTimer::Stop((ot::Dhcp6::Client *)((char *)this + 80));
      }

      break;
  }

void ot::Dhcp6::Client::Solicit(ot::Dhcp6::Client *this, unsigned __int16 a2)
{
  int v28 = this;
  unsigned __int16 v27 = a2;
  int appended = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v23);
  char v25 = ot::Ip6::Udp::Socket::NewMessage((ot::Dhcp6::Client *)((char *)this + 8));
  if (v25)
  {
    int appended = ot::Dhcp6::Client::AppendHeader(this, v25);
    if (!appended)
    {
      int appended = ot::Dhcp6::Client::AppendElapsedTime(this, v25);
      if (!appended)
      {
        int appended = ot::Dhcp6::Client::AppendClientIdentifier(this, v25);
        if (!appended)
        {
          int appended = ot::Dhcp6::Client::AppendIaNa(this, v25, v27);
          if (!appended)
          {
            int appended = ot::Dhcp6::Client::AppendIaAddress(this, v25, v27);
            if (!appended)
            {
              int appended = ot::Dhcp6::Client::AppendRapidCommit(this, v25);
              if (!appended)
              {
                ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v23);
                char v21 = v2;
                unsigned int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::Mle::GetMeshLocalPrefix(v3);
                ot::Ip6::Address::SetToRoutingLocator(v21, v4, v27);
                int v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::Mle::GetMeshLocal16(v5);
                ot::Ip6::MessageInfo::SetSockAddr(v23, v6);
                __int16 v24 = 547;
                int appended = ot::Ip6::Udp::Socket::SendTo( (ot::Dhcp6::Client *)((char *)this + 8),  v25,  (const ot::Ip6::MessageInfo *)v23);
                if (!appended) {
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Dhcp6Client",  "solicit",  v7,  v8,  v9,  v10,  v11,  v12,  v20);
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    int appended = 3;
  }

  if (appended)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
    char v13 = ot::ErrorToString(appended);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Dhcp6Client",  "Failed to send DHCPv6 Solicit: %s",  v14,  v15,  v16,  v17,  v18,  v19,  v13);
  }

uint64_t ot::Dhcp6::Client::AppendHeader(ot::Dhcp6::Client *this, ot::Message *a2)
{
  char v6 = this;
  int v5 = a2;
  ot::Clearable<ot::Dhcp6::Header>::Clear(&v4);
  ot::Dhcp6::Header::SetType(&v4, 1);
  ot::Dhcp6::Header::SetTransactionId((uint64_t)&v4, (uint64_t)this + 144);
  return ot::Message::Append<ot::Dhcp6::Header>(v5, (char *)&v4);
}

uint64_t ot::Dhcp6::Client::AppendElapsedTime(ot::Dhcp6::Client *this, ot::Message *a2)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  int v2 = (ot::TimerMilli *)ot::Dhcp6::ElapsedTime::Init((ot::Dhcp6::ElapsedTime *)v8);
  int Now = ot::TimerMilli::GetNow(v2);
  unsigned int v3 = (ot::Time *)ot::Time::operator-(&Now, (_DWORD *)this + 37);
  unsigned __int16 v4 = ot::Time::MsecToSec(v3);
  ot::Dhcp6::ElapsedTime::SetElapsedTime((ot::Dhcp6::ElapsedTime *)v8, v4);
  return ot::Message::Append<ot::Dhcp6::ElapsedTime>(v9, v8);
}

uint64_t ot::Dhcp6::Client::AppendClientIdentifier(ot::Dhcp6::Client *this, ot::Message *a2)
{
  int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v2, (ot::Mac::ExtAddress *)v5);
  ot::Dhcp6::ClientIdentifier::Init((ot::Dhcp6::ClientIdentifier *)v6);
  ot::Dhcp6::ClientIdentifier::SetDuidType((uint64_t)v6, 3u);
  ot::Dhcp6::ClientIdentifier::SetDuidHardwareType((ot::Dhcp6::ClientIdentifier *)v6, 0x1Bu);
  ot::Dhcp6::ClientIdentifier::SetDuidLinkLayerAddress((uint64_t)v6, (const ot::Mac::ExtAddress *)v5);
  return ot::Message::Append<ot::Dhcp6::ClientIdentifier>(a2, v6);
}

uint64_t ot::Dhcp6::Client::AppendIaNa(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned __int16 v9 = a3;
  int v8 = 0;
  unsigned __int8 v7 = 0;
  unsigned __int16 v6 = 0;
  if (*((void *)this + 43))
  {
    for (unsigned __int16 i = (char *)this + 152; i != (char *)this + 344; i += 48)
    {
    }

    unsigned __int16 v6 = 28 * v7 + 12;
    ot::Dhcp6::IaNa::Init((ot::Dhcp6::IaNa *)v5);
    ot::Dhcp6::Option::SetLength((ot::Dhcp6::Option *)v5, v6);
    ot::Dhcp6::IaNa::SetIaid((ot::Dhcp6::IaNa *)v5, 0);
    ot::Dhcp6::IaNa::SetT1((ot::Dhcp6::IaNa *)v5, 0);
    ot::Dhcp6::IaNa::SetT2((ot::Dhcp6::IaNa *)v5, 0);
    return ot::Message::Append<ot::Dhcp6::IaNa>(v10, v5);
  }

  else
  {
    return 2;
  }

uint64_t ot::Dhcp6::Client::AppendIaAddress(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned __int16 v9 = a3;
  unsigned int v8 = 0;
  if (*((void *)this + 43))
  {
    ot::Dhcp6::IaAddress::Init((ot::Dhcp6::IaAddress *)v7);
    for (unsigned __int16 i = (ot::Dhcp6::Client *)((char *)this + 152);
          i != (ot::Dhcp6::Client *)((char *)this + 344);
          unsigned __int16 i = (ot::Ip6::Netif::UnicastAddress *)((char *)i + 48))
    {
      if ((*((_BYTE *)i + 42) == 1 || *((_BYTE *)i + 42) == 2) && *((unsigned __int16 *)i + 20) == v9)
      {
        ot::Ip6::Netif::UnicastAddress::GetAddress(i);
        ot::Dhcp6::IaAddress::SetAddress((ot::Dhcp6::IaAddress *)v7, v3);
        ot::Dhcp6::IaAddress::SetPreferredLifetime((ot::Dhcp6::IaAddress *)v7, 0);
        ot::Dhcp6::IaAddress::SetValidLifetime((ot::Dhcp6::IaAddress *)v7, 0);
        unsigned int v8 = ot::Message::Append<ot::Dhcp6::IaAddress>(v10, v7);
        if (v8) {
          break;
        }
      }
    }
  }

  else
  {
    return 2;
  }

  return v8;
}

uint64_t ot::Dhcp6::Client::AppendRapidCommit(ot::Dhcp6::Client *this, ot::Message *a2)
{
  int v5 = this;
  unsigned __int16 v4 = a2;
  ot::Dhcp6::RapidCommit::Init((ot::Dhcp6::RapidCommit *)v3);
  return ot::Message::Append<ot::Dhcp6::RapidCommit>(v4, v3);
}

uint64_t ot::Ip6::Address::SetToRoutingLocator(ot::Ip6::Address *a1, void *a2, unsigned __int16 a3)
{
  return ot::Ip6::Address::SetToLocator(a1, a2, a3);
}

{
  return __ZN2ot3Ip67Address19SetToRoutingLocatorERKNS0_13NetworkPrefixEt(a1, a2, a3);
}

_DWORD *ot::Clearable<ot::Dhcp6::Header>::Clear(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_5Dhcp66HeaderEE5ClearEv(result);
}

_BYTE *ot::Dhcp6::Header::SetType(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return __ZN2ot5Dhcp66Header7SetTypeENS0_4TypeE(result, a2);
}

uint64_t ot::Dhcp6::Header::SetTransactionId(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = *(_WORD *)a2;
  *(_BYTE *)(result + 3)  = *(_BYTE *)(a2 + 2);
  return result;
}

{
  return __ZN2ot5Dhcp66Header16SetTransactionIdERKNS0_13TransactionIdE(result, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp66HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::ElapsedTime::Init(ot::Dhcp6::ElapsedTime *this)
{
  return ot::Dhcp6::Option::SetLength(this, 2u);
}

{
  return __ZN2ot5Dhcp611ElapsedTime4InitEv(this);
}

uint64_t ot::Dhcp6::ElapsedTime::SetElapsedTime(ot::Dhcp6::ElapsedTime *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot5Dhcp611ElapsedTime14SetElapsedTimeEt(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::ElapsedTime>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 6u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp611ElapsedTimeEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::ClientIdentifier::Init(ot::Dhcp6::ClientIdentifier *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0xCu);
}

{
  return __ZN2ot5Dhcp616ClientIdentifier4InitEv(this);
}

uint64_t ot::Dhcp6::ClientIdentifier::SetDuidType(uint64_t a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = result;
  return result;
}

{
  return __ZN2ot5Dhcp616ClientIdentifier11SetDuidTypeENS0_8DuidTypeE(a1, a2);
}

uint64_t ot::Dhcp6::ClientIdentifier::SetDuidHardwareType( ot::Dhcp6::ClientIdentifier *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot5Dhcp616ClientIdentifier19SetDuidHardwareTypeEt(this, a2);
}

uint64_t ot::Dhcp6::ClientIdentifier::SetDuidLinkLayerAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 8)  = *(void *)a2;
  return this;
}

{
  return __ZN2ot5Dhcp616ClientIdentifier23SetDuidLinkLayerAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::ClientIdentifier>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp616ClientIdentifierEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::IaNa::Init(ot::Dhcp6::IaNa *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0xCu);
}

{
  return __ZN2ot5Dhcp64IaNa4InitEv(this);
}

uint64_t ot::Dhcp6::Option::SetLength(ot::Dhcp6::Option *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot5Dhcp66Option9SetLengthEt(this, a2);
}

uint64_t ot::Dhcp6::IaNa::SetIaid(ot::Dhcp6::IaNa *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot5Dhcp64IaNa7SetIaidEj(this, a2);
}

uint64_t ot::Dhcp6::IaNa::SetT1(ot::Dhcp6::IaNa *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot5Dhcp64IaNa5SetT1Ej(this, a2);
}

uint64_t ot::Dhcp6::IaNa::SetT2(ot::Dhcp6::IaNa *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot5Dhcp64IaNa5SetT2Ej(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::IaNa>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp64IaNaEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::IaAddress::Init(ot::Dhcp6::IaAddress *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0x18u);
}

{
  return __ZN2ot5Dhcp69IaAddress4InitEv(this);
}

__n128 ot::Dhcp6::IaAddress::SetAddress(ot::Dhcp6::IaAddress *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + ot::MeshCoP::Tlv::SetType(this, 4) = *a2;
  return result;
}

uint64_t ot::Dhcp6::IaAddress::SetPreferredLifetime(ot::Dhcp6::IaAddress *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 5)  = result;
  return result;
}

{
  return __ZN2ot5Dhcp69IaAddress20SetPreferredLifetimeEj(this, a2);
}

uint64_t ot::Dhcp6::IaAddress::SetValidLifetime(ot::Dhcp6::IaAddress *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 6)  = result;
  return result;
}

{
  return __ZN2ot5Dhcp69IaAddress16SetValidLifetimeEj(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::IaAddress>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x1Cu);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp69IaAddressEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::RapidCommit::Init(ot::Dhcp6::RapidCommit *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0);
}

{
  return __ZN2ot5Dhcp611RapidCommit4InitEv(this);
}

uint64_t ot::Message::Append<ot::Dhcp6::RapidCommit>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp611RapidCommitEEE7otErrorRKT_(a1, a2);
}

void ot::Dhcp6::Client::HandleUdpReceive( ot::Dhcp6::Client *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v10 = this;
  unsigned __int16 v9 = a2;
  unsigned int v8 = a3;
  Offset  = ot::Message::GetOffset(a2);
  if (!ot::Message::Read<ot::Dhcp6::Header>(a2, Offset, v7))
  {
    ot::Message::MoveOffset(v9, 4);
    if (ot::Dhcp6::Header::GetType((ot::Dhcp6::Header *)v7) == 7)
    {
      TransactionId  = (const void *)ot::Dhcp6::Header::GetTransactionId((ot::Dhcp6::Header *)v7);
    }
  }

uint64_t ot::Message::Read<ot::Dhcp6::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp66HeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::Header::GetType(ot::Dhcp6::Header *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot5Dhcp66Header7GetTypeEv(this);
}

uint64_t ot::Dhcp6::Header::GetTransactionId(ot::Dhcp6::Header *this)
{
  return (uint64_t)this + 1;
}

{
  return __ZNK2ot5Dhcp66Header16GetTransactionIdEv(this);
}

BOOL ot::Equatable<ot::Dhcp6::TransactionId>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 3uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_5Dhcp613TransactionIdEEeqERKS2_(a1, a2);
}

void ot::Dhcp6::Client::ProcessReply(ot::Dhcp6::Client *this, ot::Message *a2)
{
  Offset  = ot::Message::GetOffset(a2);
  __int16 Length = ot::Message::GetLength(a2);
  __int16 v15 = Length - ot::Message::GetOffset(a2);
  Option  = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 13);
  if (v3 | (Option == 0)) {
    char v4 = 1;
  }
  else {
    char v4 = 0;
  }
  if ((v4 & 1) != 0 || !ot::Dhcp6::Client::ProcessStatusCode(this, a2, Option))
  {
    unsigned __int16 v5 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 2);
    BOOL v6 = !(v3 | (v5 == 0));
    if (v6 && !ot::Dhcp6::Client::ProcessServerIdentifier(this, a2, v5))
    {
      unsigned __int16 v7 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 1);
      BOOL v8 = !(v3 | (v7 == 0));
      if (v8 && !ot::Dhcp6::Client::ProcessClientIdentifier(this, a2, v7))
      {
        __int16 v9 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 14);
        if (!(v3 | (v9 == 0)))
        {
          unsigned __int16 v11 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 3);
          if (v3 | (v11 == 0)) {
            char v12 = 0;
          }
          else {
            char v12 = 1;
          }
        }
      }
    }
  }

uint64_t ot::Dhcp6::Client::FindOption( uint64_t a1, ot::Message *a2, unsigned __int16 a3, __int16 a4, __int16 a5)
{
  uint64_t v16 = a1;
  __int16 v15 = a2;
  unsigned __int16 v14 = a3;
  __int16 v13 = a4;
  __int16 v12 = a5;
  unsigned int v11 = a3;
  unsigned __int16 v10 = a3 + a4;
  unsigned __int16 v9 = 0;
  while (v11 <= v10 && !ot::Message::Read<ot::Dhcp6::Option>(v15, v11, v8))
  {
    Code  = ot::Dhcp6::Option::GetCode((ot::Dhcp6::Option *)v8);
    if (v12 == Code) {
      return (unsigned __int16)v11;
    }
    unsigned __int16 Length = ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v8);
    v11 += Length + 4;
  }

  return v9;
}

uint64_t ot::Dhcp6::Client::ProcessStatusCode(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  BOOL v8 = this;
  unsigned __int16 v7 = a2;
  unsigned __int16 v6 = a3;
  unsigned int v5 = 0;
  unsigned int v5 = ot::Message::Read<ot::Dhcp6::StatusCode>(a2, a3, v4);
  if (!v5
    && ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v4) < 2uLL
     || (unsigned __int16)ot::Dhcp6::StatusCode::GetStatusCode((ot::Dhcp6::StatusCode *)v4)))
  {
    return 6;
  }

  return v5;
}

uint64_t ot::Dhcp6::Client::ProcessServerIdentifier( ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (!ot::Message::Read<ot::Dhcp6::ServerIdentifier>(a2, a3, v5)
    && ((unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidType((ot::Dhcp6::ServerIdentifier *)v5) != 1
     || (unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidHardwareType((ot::Dhcp6::ServerIdentifier *)v5) != 1)
    && ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v5) != 12LL
     || (unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidType((ot::Dhcp6::ServerIdentifier *)v5) != 3
     || (unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidHardwareType((ot::Dhcp6::ServerIdentifier *)v5) != 27))
  {
    return 6;
  }

  return v4;
}

uint64_t ot::Dhcp6::Client::ProcessClientIdentifier( ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  char v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v3, (ot::Mac::ExtAddress *)v9);
  unsigned int v6 = ot::Message::Read<ot::Dhcp6::ClientIdentifier>(a2, a3, v10);
  if (!v6)
  {
    DuidLinkLayerAddress  = (const void *)ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress((ot::Dhcp6::ClientIdentifier *)v10);
    if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(DuidLinkLayerAddress, v9)) {
      return 6;
    }
  }

  return v6;
}

uint64_t ot::Dhcp6::Client::ProcessIaNa(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v16 = this;
  __int16 v15 = a2;
  unsigned __int16 v14 = a3;
  unsigned int v13 = 0;
  unsigned int v13 = ot::Message::Read<ot::Dhcp6::IaNa>(a2, a3, v12);
  if (!v13)
  {
    v14 += 16;
    unsigned __int16 v10 = ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v12) - 12;
    unsigned __int16 Length = ot::Message::GetLength(v15);
    if (v10 <= Length - v14)
    {
      Option  = ot::Dhcp6::Client::FindOption((uint64_t)this, v15, v14, v10, 13);
      if (v5 | (Option == 0)) {
        char v6 = 1;
      }
      else {
        char v6 = 0;
      }
      if ((v6 & 1) != 0 || (unsigned int v13 = ot::Dhcp6::Client::ProcessStatusCode(this, v15, Option)) == 0)
      {
        while (v10)
        {
          unsigned __int16 v7 = ot::Dhcp6::Client::FindOption((uint64_t)this, v15, v14, v10, 5);
          unsigned __int16 v11 = v7;
          if (!v7) {
            break;
          }
          unsigned int v13 = ot::Dhcp6::Client::ProcessIaAddress(this, v15, v7);
          if (v13) {
            break;
          }
          v10 -= v11 - v14 + 28;
          unsigned __int16 v14 = v11 + 28;
        }
      }
    }

    else
    {
      return 6;
    }
  }

  return v13;
}

uint64_t ot::Message::Read<ot::Dhcp6::Option>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp66OptionEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::Option::GetCode(ot::Dhcp6::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return __ZNK2ot5Dhcp66Option7GetCodeEv(this);
}

uint64_t ot::Dhcp6::Option::GetLength(ot::Dhcp6::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot5Dhcp66Option9GetLengthEv(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::ServerIdentifier>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp616ServerIdentifierEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::ServerIdentifier::GetDuidType(ot::Dhcp6::ServerIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot5Dhcp616ServerIdentifier11GetDuidTypeEv(this);
}

uint64_t ot::Dhcp6::ServerIdentifier::GetDuidHardwareType(ot::Dhcp6::ServerIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return __ZNK2ot5Dhcp616ServerIdentifier19GetDuidHardwareTypeEv(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::ClientIdentifier>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp616ClientIdentifierEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::ClientIdentifier::GetDuidType(ot::Dhcp6::ClientIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot5Dhcp616ClientIdentifier11GetDuidTypeEv(this);
}

uint64_t ot::Dhcp6::ClientIdentifier::GetDuidHardwareType(ot::Dhcp6::ClientIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return __ZNK2ot5Dhcp616ClientIdentifier19GetDuidHardwareTypeEv(this);
}

uint64_t ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress(ot::Dhcp6::ClientIdentifier *this)
{
  return (uint64_t)this + 8;
}

{
  return __ZNK2ot5Dhcp616ClientIdentifier23GetDuidLinkLayerAddressEv(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::IaNa>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp64IaNaEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::Client::ProcessIaAddress(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  unsigned __int16 v14 = this;
  unsigned int v13 = a2;
  unsigned __int16 v12 = a3;
  unsigned int v11 = ot::Message::Read<ot::Dhcp6::IaAddress>(a2, a3, v10);
  if (!v11)
  {
    if ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v10) == 24LL)
    {
      for (unsigned __int16 i = (ot::Dhcp6::Client *)((char *)this + 152);
            i != (ot::Dhcp6::Client *)((char *)this + 344);
            unsigned __int16 i = (ot::Ip6::Netif::UnicastAddress *)((char *)i + 48))
      {
        if (*((_BYTE *)i + 42))
        {
          if (!*((_DWORD *)i + 9))
          {
            ot::Ip6::Netif::UnicastAddress::GetAddress(i);
            unsigned __int16 v7 = v3;
            Address  = (const ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v10);
            if (*((unsigned __int8 *)i + 16) <= (int)ot::Ip6::Address::PrefixMatch(v7, Address))
            {
              *(_OWORD *)unsigned __int16 i = *(_OWORD *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v10);
              *((_DWORD *)i + 8)  = ot::Dhcp6::IaAddress::GetPreferredLifetime((ot::Dhcp6::IaAddress *)v10);
              *((_DWORD *)i + ot::MeshCoP::Tlv::SetType(this, 9) = ot::Dhcp6::IaAddress::GetValidLifetime((ot::Dhcp6::IaAddress *)v10);
              *((_BYTE *)i + 17)  = 2;
              *((_BYTE *)i + 18)  = *((_BYTE *)i + 18) & 0xFE | (ot::Dhcp6::IaAddress::GetPreferredLifetime((ot::Dhcp6::IaAddress *)v10) != 0);
              *((_BYTE *)i + 18)  = *((_BYTE *)i + 18) & 0xFD | (2
                                                              * (ot::Dhcp6::IaAddress::GetValidLifetime((ot::Dhcp6::IaAddress *)v10) != 0));
              *((_BYTE *)i + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 3;
              char v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
              ot::Ip6::Netif::AddUnicastAddress(v5, i);
              return 0;
            }
          }
        }
      }

      return 23;
    }

    else
    {
      return 6;
    }
  }

  return v11;
}

uint64_t ot::Message::Read<ot::Dhcp6::StatusCode>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp610StatusCodeEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::StatusCode::GetStatusCode(ot::Dhcp6::StatusCode *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot5Dhcp610StatusCode13GetStatusCodeEv(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::IaAddress>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x1Cu);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp69IaAddressEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::IaAddress::GetAddress(ot::Dhcp6::IaAddress *this)
{
  return (uint64_t)this + 4;
}

{
  return __ZN2ot5Dhcp69IaAddress10GetAddressEv(this);
}

uint64_t ot::Dhcp6::IaAddress::GetPreferredLifetime(ot::Dhcp6::IaAddress *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 5));
}

{
  return __ZNK2ot5Dhcp69IaAddress20GetPreferredLifetimeEv(this);
}

uint64_t ot::Dhcp6::IaAddress::GetValidLifetime(ot::Dhcp6::IaAddress *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 6));
}

{
  return __ZNK2ot5Dhcp69IaAddress16GetValidLifetimeEv(this);
}

uint64_t ot::Dhcp6::Option::SetCode(_WORD *a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *a1  = result;
  return result;
}

{
  return __ZN2ot5Dhcp66Option7SetCodeENS0_4CodeE(a1, a2);
}

uint64_t ot::Instance::Get<ot::Dhcp6::Client>(uint64_t a1)
{
  return a1 + 86456;
}

{
  return __ZN2ot8Instance3GetINS_5Dhcp66ClientEEERT_v(a1);
}

ot::Dhcp6::Server *ot::Dhcp6::Server::Server(ot::Dhcp6::Server *this, ot::Instance *a2)
{
  *((_BYTE *)this + 30ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  *((_BYTE *)this + 305)  = 0;
  memset((char *)this + 80, 0, 0xE0uLL);
  return this;
}

{
  ot::Dhcp6::Server::Server(this, a2);
  return this;
}

uint64_t ot::Dhcp6::Server::UpdateService(ot::Dhcp6::Server *this)
{
  char v21 = this;
  *(_WORD *)&v20[4]  = 0;
  unsigned int v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  *(_DWORD *)char v20 = (unsigned __int16)ot::Mle::Mle::GetRloc16(v1);
  for (unsigned __int16 i = (ot::Dhcp6::Server *)((char *)this + 80);
        i != (ot::Dhcp6::Server *)((char *)this + 304);
        unsigned __int16 i = (ot::Dhcp6::Server::PrefixAgent *)((char *)i + 56))
  {
    char v14 = 0;
    if ((ot::Dhcp6::Server::PrefixAgent::IsValid(i) & 1) != 0)
    {
      unsigned int v19 = 0;
      while (1)
      {
        int v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v2,  &v19,  *(unsigned __int16 *)v20,  (ot::NetworkData::OnMeshPrefixConfig *)v17)) {
          break;
        }
        if ((v18 & 0x10) != 0 || (v18 & 0x20) != 0)
        {
          unsigned __int16 v12 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          PrefixAsAddress  = (const ot::Ip6::Address *)ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(i);
          *(_DWORD *)&v20[2]  = ot::NetworkData::LeaderBase::GetContext(v12, PrefixAsAddress, (ot::Ip6::Prefix *)v16);
          if (!*(_DWORD *)&v20[2])
          {
            ContextId  = ot::Dhcp6::Server::PrefixAgent::GetContextId(i);
            if (v16[17] == ContextId)
            {
              char v14 = 1;
              break;
            }
          }
        }
      }

      if ((v14 & 1) == 0)
      {
        unsigned int v11 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Dhcp6::Server::PrefixAgent::GetAloc(i);
        ot::Ip6::Netif::RemoveUnicastAddress(v11, v5);
        ot::Dhcp6::Server::PrefixAgent::Clear((uint64_t)i);
        --*((_BYTE *)this + 304);
      }
    }
  }

  unsigned int v19 = 0;
  while (1)
  {
    char v6 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v6,  &v19,  *(unsigned __int16 *)v20,  (ot::NetworkData::OnMeshPrefixConfig *)v17)) {
      break;
    }
    if ((v18 & 0x10) != 0 || (v18 & 0x20) != 0)
    {
      unsigned __int16 v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      ot::AsCoreType<otIp6Address>((uint64_t)v17);
      *(_DWORD *)&v20[2]  = ot::NetworkData::LeaderBase::GetContext(v10, v7, (ot::Ip6::Prefix *)v16);
      if (!*(_DWORD *)&v20[2])
      {
        ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v17);
        ot::Dhcp6::Server::AddPrefixAgent(this, v8, (uint64_t)v16);
      }
    }
  }

  if (*((_BYTE *)this + 304)) {
    ot::Dhcp6::Server::Start(this);
  }
  else {
    ot::Dhcp6::Server::Stop(this);
  }
  return *(unsigned int *)&v20[2];
}

uint64_t ot::Dhcp6::Server::PrefixAgent::IsValid(ot::Dhcp6::Server::PrefixAgent *this)
{
  return (*((unsigned __int8 *)this + 18) >> 1) & 1;
}

{
  return __ZNK2ot5Dhcp66Server11PrefixAgent7IsValidEv(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(ot::Dhcp6::Server::PrefixAgent *this)
{
  return (uint64_t)this + 32;
}

{
  return __ZNK2ot5Dhcp66Server11PrefixAgent18GetPrefixAsAddressEv(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::GetContextId(ot::Dhcp6::Server::PrefixAgent *this)
{
  return *((unsigned __int8 *)this + 15);
}

  ;
}

{
  return __ZNK2ot5Dhcp66Server11PrefixAgent12GetContextIdEv(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::Clear(uint64_t this)
{
  *(_BYTE *)(this + 18) &= ~2u;
  return this;
}

{
  return __ZN2ot5Dhcp66Server11PrefixAgent5ClearEv(this);
}

void ot::Dhcp6::Server::AddPrefixAgent(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v19 = 0;
  char v18 = 0LL;
  uint64_t v17 = (ot::Dhcp6::Server::PrefixAgent *)(a1 + 80);
  uint64_t v16 = (ot::Dhcp6::Server::PrefixAgent *)(a1 + 304);
  while (v17 != v16)
  {
    if ((ot::Dhcp6::Server::PrefixAgent::IsValid(v17) & 1) != 0)
    {
      Prefix  = (unsigned __int8 *)ot::Dhcp6::Server::PrefixAgent::GetPrefix(v17);
      if (ot::Ip6::Prefix::operator==(Prefix, a2)) {
        goto LABEL_10;
      }
    }

    else
    {
      char v18 = v17;
    }

    uint64_t v17 = (ot::Dhcp6::Server::PrefixAgent *)((char *)v17 + 56);
  }

  if (v18)
  {
    unsigned int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
    ot::Mle::Mle::GetMeshLocalPrefix(v4);
    ot::Dhcp6::Server::PrefixAgent::Set((uint64_t)v18, (uint64_t)a2, v5, *(_BYTE *)(a3 + 17));
    char v14 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Dhcp6::Server::PrefixAgent::GetAloc(v18);
    ot::Ip6::Netif::AddUnicastAddress(v14, v6);
    ++a1[304];
  }

  else
  {
    int v19 = 3;
  }

void ot::Dhcp6::Server::Start(ot::Dhcp6::Server *this)
{
  if (!ot::Ip6::Udp::Socket::IsOpen((ot::Dhcp6::Server *)((char *)this + 8)))
  {
    ot::Ip6::Udp::Socket::Open( (ot::Dhcp6::Server *)((char *)this + 8),  (uint64_t)ot::Dhcp6::Server::HandleUdpReceive,  (uint64_t)this);
    IgnoreError();
    ot::Ip6::Udp::Socket::Bind((ot::Dhcp6::Server *)((char *)this + 8), 547, 1u);
    IgnoreError();
  }

void ot::Dhcp6::Server::Stop(ot::Dhcp6::Server *this)
{
}

uint64_t ot::Dhcp6::Server::HandleUdpReceive(ot::Dhcp6::Server *a1, uint64_t a2, uint64_t a3)
{
  char v6 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  return ot::Dhcp6::Server::HandleUdpReceive(a1, v6, v4);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::GetPrefix(ot::Dhcp6::Server::PrefixAgent *this)
{
  return (uint64_t)this + 32;
}

{
  return (uint64_t)this + 32;
}

{
  return __ZN2ot5Dhcp66Server11PrefixAgent9GetPrefixEv(this);
}

{
  return __ZNK2ot5Dhcp66Server11PrefixAgent9GetPrefixEv(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::Set(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  *(_OWORD *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 16);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin((ot::Ip6::Netif::UnicastAddress *)a1, 0);
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)a1);
  return ot::Ip6::Address::SetToAnycastLocator(v4, a3, a4 - 1024);
}

{
  return __ZN2ot5Dhcp66Server11PrefixAgent3SetERKNS_3Ip66PrefixERKNS3_13NetworkPrefixEh(a1, a2, a3, a4);
}

uint64_t ot::Dhcp6::Server::HandleUdpReceive( ot::Dhcp6::Server *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v14 = this;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  Offset  = ot::Message::GetOffset(a2);
  uint64_t result = ot::Message::Read<ot::Dhcp6::Header>(a2, Offset, v11);
  if (!(_DWORD)result)
  {
    ot::Message::MoveOffset(v13, 4);
    uint64_t result = ot::Dhcp6::Header::GetType((ot::Dhcp6::Header *)v11);
    if (result == 1)
    {
      char v7 = v13;
      ot::Ip6::MessageInfo::GetPeerAddr(v12);
      uint64_t v8 = v5;
      TransactionId  = (const ot::Dhcp6::TransactionId *)ot::Dhcp6::Header::GetTransactionId((ot::Dhcp6::Header *)v11);
      return ot::Dhcp6::Server::ProcessSolicit(this, v7, v8, TransactionId);
    }
  }

  return result;
}

uint64_t ot::Dhcp6::Server::ProcessSolicit( ot::Dhcp6::Server *this, ot::Message *a2, const ot::Ip6::Address *a3, const ot::Dhcp6::TransactionId *a4)
{
  int v19 = this;
  char v18 = a2;
  uint64_t v17 = a3;
  uint64_t v16 = a4;
  Offset  = ot::Message::GetOffset(a2);
  __int16 Length = ot::Message::GetLength(v18);
  __int16 v13 = Length - ot::Message::GetOffset(v18);
  uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 1);
  else {
    char v6 = 1;
  }
  if ((v6 & 1) != 0)
  {
    uint64_t result = ot::Dhcp6::Server::ProcessClientIdentifier(this, v18, result, (ot::Dhcp6::ClientIdentifier *)v20);
    if (!(_DWORD)result)
    {
      uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 2);
      if (!(_WORD)result)
      {
        uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 14);
        if (!(v5 | ((unsigned __int16)result == 0)))
        {
          Option  = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 8);
          char v9 = v5 | (Option == 0);
          if ((v9 & 1) != 0 || (uint64_t result = ot::Dhcp6::Server::ProcessElapsedTime(this, v18, Option), !(_DWORD)result))
          {
            uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 3);
            else {
              char v10 = 1;
            }
            if ((v10 & 1) != 0)
            {
              uint64_t result = ot::Dhcp6::Server::ProcessIaNa(this, v18, result, (ot::Dhcp6::IaNa *)v15);
              if (!(_DWORD)result) {
                return ot::Dhcp6::Server::SendReply( this,  (__n128 *)v17,  v16,  (ot::Dhcp6::ClientIdentifier *)v20,  (ot::Dhcp6::IaNa *)v15);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t ot::Dhcp6::Server::FindOption( uint64_t a1, ot::Message *a2, unsigned __int16 a3, __int16 a4, __int16 a5)
{
  uint64_t v15 = a1;
  char v14 = a2;
  unsigned __int16 v13 = a3;
  __int16 v12 = a4;
  __int16 v11 = a5;
  unsigned __int16 v10 = a3 + a4;
  unsigned __int16 v9 = 0;
  while (v13 <= (int)v10 && !ot::Message::Read<ot::Dhcp6::Option>(v14, v13, v8))
  {
    Code  = ot::Dhcp6::Option::GetCode((ot::Dhcp6::Option *)v8);
    if (v11 == Code) {
      return v13;
    }
    __int16 Length = ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v8);
    v13 += Length + 4;
  }

  return v9;
}

uint64_t ot::Dhcp6::Server::ProcessClientIdentifier( ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3, ot::Dhcp6::ClientIdentifier *a4)
{
  unsigned int v5 = ot::Message::Read<ot::Dhcp6::ClientIdentifier>(a2, a3, (char *)a4);
  if (!v5
    && ((unsigned __int16)ot::Dhcp6::Option::GetLength(a4) != 12LL
     || (unsigned __int16)ot::Dhcp6::ClientIdentifier::GetDuidType(a4) != 3
     || (unsigned __int16)ot::Dhcp6::ClientIdentifier::GetDuidHardwareType(a4) != 27))
  {
    return 6;
  }

  return v5;
}

uint64_t ot::Dhcp6::Server::ProcessElapsedTime(ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v8 = this;
  char v7 = a2;
  unsigned __int16 v6 = a3;
  unsigned int v5 = 0;
  unsigned int v5 = ot::Message::Read<ot::Dhcp6::ElapsedTime>(a2, a3, v4);
  return v5;
}

uint64_t ot::Dhcp6::Server::ProcessIaNa( ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3, ot::Dhcp6::IaNa *a4)
{
  unsigned int v11 = ot::Message::Read<ot::Dhcp6::IaNa>(a2, a3, (char *)a4);
  if (!v11)
  {
    unsigned __int16 v14 = a3 + 16;
    unsigned __int16 v9 = ot::Dhcp6::Option::GetLength(a4) - 12;
    if (v9 <= (unsigned __int16)ot::Message::GetLength(a2) - v14)
    {
      *((_BYTE *)this + 305)  = 0;
      while (v9)
      {
        Option  = ot::Dhcp6::Server::FindOption((uint64_t)this, a2, v14, v9, 5);
        unsigned __int16 v10 = Option;
        if (v5 | (Option == 0)) {
          break;
        }
        unsigned int v11 = ot::Dhcp6::Server::ProcessIaAddress(this, a2, Option);
        if (v11) {
          break;
        }
        v9 -= v10 - v14 + 28;
        unsigned __int16 v14 = v10 + 28;
      }
    }

    else
    {
      return 6;
    }
  }

  return v11;
}

uint64_t ot::Dhcp6::Server::SendReply( ot::Dhcp6::Server *this, __n128 *a2, const ot::Dhcp6::TransactionId *a3, ot::Dhcp6::ClientIdentifier *a4, ot::Dhcp6::IaNa *a5)
{
  unsigned __int16 v14 = this;
  unsigned __int16 v13 = a2;
  __int16 v12 = a3;
  unsigned int v11 = a4;
  unsigned __int16 v10 = a5;
  unsigned int appended = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v8);
  char v7 = ot::Ip6::Udp::Socket::NewMessage((ot::Dhcp6::Server *)((char *)this + 8));
  if (v7)
  {
    unsigned int appended = ot::Dhcp6::Server::AppendHeader(this, v7, v12);
    if (!appended)
    {
      unsigned int appended = ot::Dhcp6::Server::AppendServerIdentifier(this, v7);
      if (!appended)
      {
        unsigned int appended = ot::Dhcp6::Server::AppendClientIdentifier(this, v7, v11);
        if (!appended)
        {
          unsigned int appended = ot::Dhcp6::Server::AppendIaNa(this, v7, v10);
          if (!appended)
          {
            unsigned int appended = ot::Dhcp6::Server::AppendStatusCode((uint64_t)this, v7, 0);
            if (!appended)
            {
              unsigned int appended = ot::Dhcp6::Server::AppendIaAddress(this, v7, v11);
              if (!appended)
              {
                unsigned int appended = ot::Dhcp6::Server::AppendRapidCommit(this, v7);
                if (!appended)
                {
                  ot::Ip6::MessageInfo::SetPeerAddr(v8, v13);
                  ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v8, 546);
                  unsigned int appended = ot::Ip6::Udp::Socket::SendTo( (ot::Dhcp6::Server *)((char *)this + 8),  v7,  (const ot::Ip6::MessageInfo *)v8);
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v7) {
    ot::Message::Free(v7);
  }
  return appended;
}

uint64_t ot::Message::Read<ot::Dhcp6::ElapsedTime>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return __ZNK2ot7Message4ReadINS_5Dhcp611ElapsedTimeEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dhcp6::Server::ProcessIaAddress(ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v11 = this;
  unsigned __int16 v10 = a2;
  unsigned __int16 v9 = a3;
  unsigned int v8 = 0;
  unsigned int v8 = ot::Message::Read<ot::Dhcp6::IaAddress>(a2, a3, v7);
  if (!v8)
  {
    if ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v7) == 24LL)
    {
      for (unsigned __int16 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>(); ++i)
      {
        if ((ot::Dhcp6::Server::PrefixAgent::IsValid((ot::Dhcp6::Server *)((char *)this + 56 * i + 80)) & 1) != 0)
        {
          Address  = (const ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v7);
          if (ot::Dhcp6::Server::PrefixAgent::IsPrefixMatch((ot::Dhcp6::Server *)((char *)this + 56 * i + 80), Address))
          {
            *((_BYTE *)this + 305) |= 1 << i;
            return v8;
          }
        }
      }
    }

    else
    {
      return 6;
    }
  }

  return v8;
}

uint64_t ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>()
{
  return 4LL;
}

{
  return __ZN2ot14GetArrayLengthINS_5Dhcp66Server11PrefixAgentELt4EEEtRAT0__KT_();
}

BOOL ot::Dhcp6::Server::PrefixAgent::IsPrefixMatch( ot::Dhcp6::Server::PrefixAgent *this, const ot::Ip6::Address *a2)
{
  Prefix  = (const ot::Ip6::Prefix *)ot::Dhcp6::Server::PrefixAgent::GetPrefix(this);
  return ot::Ip6::Address::MatchesPrefix(a2, Prefix);
}

{
  return __ZNK2ot5Dhcp66Server11PrefixAgent13IsPrefixMatchERKNS_3Ip67AddressE(this, a2);
}

uint64_t ot::Dhcp6::Server::AppendHeader( ot::Dhcp6::Server *this, ot::Message *a2, const ot::Dhcp6::TransactionId *a3)
{
  char v7 = this;
  unsigned __int16 v6 = a2;
  char v5 = a3;
  ot::Clearable<ot::Dhcp6::Header>::Clear(&v4);
  ot::Dhcp6::Header::SetType(&v4, 7);
  ot::Dhcp6::Header::SetTransactionId((uint64_t)&v4, (uint64_t)v5);
  return ot::Message::Append<ot::Dhcp6::Header>(v6, (char *)&v4);
}

uint64_t ot::Dhcp6::Server::AppendServerIdentifier(ot::Dhcp6::Server *this, ot::Message *a2)
{
  int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v2, (ot::Mac::ExtAddress *)v5);
  ot::Dhcp6::ServerIdentifier::Init((ot::Dhcp6::ServerIdentifier *)v6);
  ot::Dhcp6::ServerIdentifier::SetDuidType((uint64_t)v6, 3u);
  ot::Dhcp6::ServerIdentifier::SetDuidHardwareType((ot::Dhcp6::ServerIdentifier *)v6, 0x1Bu);
  ot::Dhcp6::ServerIdentifier::SetDuidLinkLayerAddress((uint64_t)v6, (const ot::Mac::ExtAddress *)v5);
  return ot::Message::Append<ot::Dhcp6::ServerIdentifier>(a2, v6);
}

uint64_t ot::Dhcp6::Server::AppendClientIdentifier( ot::Dhcp6::Server *this, ot::Message *a2, ot::Dhcp6::ClientIdentifier *a3)
{
  return ot::Message::Append<ot::Dhcp6::ClientIdentifier>(a2, (char *)a3);
}

uint64_t ot::Dhcp6::Server::AppendIaNa(ot::Dhcp6::Server *this, ot::Message *a2, ot::Dhcp6::IaNa *a3)
{
  unsigned __int16 v6 = 0;
  if (*((_BYTE *)this + 305))
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>(); ++i)
    {
    }
  }

  else
  {
    unsigned __int16 v6 = 28 * *((unsigned __int8 *)this + 304);
  }

  ot::Dhcp6::Option::SetLength(a3, v6 + 18);
  ot::Dhcp6::IaNa::SetT1(a3, 0xFFFFFFFF);
  ot::Dhcp6::IaNa::SetT2(a3, 0xFFFFFFFF);
  return ot::Message::Append<ot::Dhcp6::IaNa>(a2, (char *)a3);
}

uint64_t ot::Dhcp6::Server::AppendStatusCode(uint64_t a1, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v7 = a1;
  unsigned __int16 v6 = a2;
  unsigned __int16 v5 = a3;
  ot::Dhcp6::StatusCode::Init((ot::Dhcp6::StatusCode *)v4);
  ot::Dhcp6::StatusCode::SetStatusCode((uint64_t)v4, v5);
  return ot::Message::Append<ot::Dhcp6::StatusCode>(v6, v4);
}

uint64_t ot::Dhcp6::Server::AppendIaAddress( ot::Dhcp6::Server *this, ot::Message *a2, ot::Dhcp6::ClientIdentifier *a3)
{
  unsigned int v10 = 0;
  if (*((_BYTE *)this + 305))
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>(); ++i)
    {
      if ((*((unsigned __int8 *)this + 305) & (1 << i)) != 0)
      {
        PrefixAsAddress  = (const ot::Ip6::Address *)ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress((ot::Dhcp6::Server *)((char *)this + 56 * i + 80));
        unsigned int v10 = ot::Dhcp6::Server::AddIaAddress(this, a2, PrefixAsAddress, a3);
        if (v10) {
          break;
        }
      }
    }
  }

  else
  {
    unsigned int v8 = (ot::Dhcp6::Server *)((char *)this + 80);
    uint64_t v7 = (ot::Dhcp6::Server *)((char *)this + 304);
    while (v8 != v7)
    {
      if ((ot::Dhcp6::Server::PrefixAgent::IsValid(v8) & 1) != 0)
      {
        int v4 = (const ot::Ip6::Address *)ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(v8);
        unsigned int v10 = ot::Dhcp6::Server::AddIaAddress(this, a2, v4, a3);
        if (v10) {
          break;
        }
      }

      unsigned int v8 = (ot::Dhcp6::Server::PrefixAgent *)((char *)v8 + 56);
    }
  }

  return v10;
}

uint64_t ot::Dhcp6::Server::AppendRapidCommit(ot::Dhcp6::Server *this, ot::Message *a2)
{
  unsigned __int16 v5 = this;
  int v4 = a2;
  ot::Dhcp6::RapidCommit::Init((ot::Dhcp6::RapidCommit *)v3);
  return ot::Message::Append<ot::Dhcp6::RapidCommit>(v4, v3);
}

uint64_t ot::Dhcp6::ServerIdentifier::Init(ot::Dhcp6::ServerIdentifier *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0xCu);
}

{
  return __ZN2ot5Dhcp616ServerIdentifier4InitEv(this);
}

uint64_t ot::Dhcp6::ServerIdentifier::SetDuidType(uint64_t a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = result;
  return result;
}

{
  return __ZN2ot5Dhcp616ServerIdentifier11SetDuidTypeENS0_8DuidTypeE(a1, a2);
}

uint64_t ot::Dhcp6::ServerIdentifier::SetDuidHardwareType( ot::Dhcp6::ServerIdentifier *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot5Dhcp616ServerIdentifier19SetDuidHardwareTypeEt(this, a2);
}

uint64_t ot::Dhcp6::ServerIdentifier::SetDuidLinkLayerAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 8)  = *(void *)a2;
  return this;
}

{
  return __ZN2ot5Dhcp616ServerIdentifier23SetDuidLinkLayerAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::ServerIdentifier>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp616ServerIdentifierEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::StatusCode::Init(ot::Dhcp6::StatusCode *this)
{
  return ot::Dhcp6::Option::SetLength(this, 2u);
}

{
  return __ZN2ot5Dhcp610StatusCode4InitEv(this);
}

uint64_t ot::Dhcp6::StatusCode::SetStatusCode(uint64_t a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = result;
  return result;
}

{
  return __ZN2ot5Dhcp610StatusCode13SetStatusCodeENS0_6StatusE(a1, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::StatusCode>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 6u);
}

{
  return __ZN2ot7Message6AppendINS_5Dhcp610StatusCodeEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dhcp6::Server::AddIaAddress( ot::Dhcp6::Server *this, ot::Message *a2, const ot::Ip6::Address *a3, ot::Dhcp6::ClientIdentifier *a4)
{
  unsigned __int16 v14 = this;
  unsigned __int16 v13 = a2;
  __int16 v12 = (unsigned __int8 *)a3;
  unsigned int v11 = a4;
  int v10 = 0;
  ot::Dhcp6::IaAddress::Init((ot::Dhcp6::IaAddress *)v9);
  Address  = (ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v9);
  ot::Ip6::Address::SetPrefix(Address, v12, 0x40u);
  unsigned __int16 v5 = (ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v9);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v5);
  DuidLinkLayerAddress  = (const ot::Mac::ExtAddress *)ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress(v11);
  ot::Ip6::InterfaceIdentifier::SetFromExtAddress(Iid, DuidLinkLayerAddress);
  ot::Dhcp6::IaAddress::SetPreferredLifetime((ot::Dhcp6::IaAddress *)v9, 0xFFFFFFFF);
  ot::Dhcp6::IaAddress::SetValidLifetime((ot::Dhcp6::IaAddress *)v9, 0xFFFFFFFF);
  return ot::Message::Append<ot::Dhcp6::IaAddress>(v13, v9);
}

uint64_t ot::Dhcp6::Server::ApplyMeshLocalPrefix(uint64_t this)
{
  int v10 = (ot::InstanceLocator *)this;
  __int16 v12 = (ot::Dhcp6::Server::PrefixAgent *)(this + 80);
  unsigned int v11 = (ot::Dhcp6::Server::PrefixAgent *)(this + 304);
  while (v12 != v11)
  {
    this  = ot::Dhcp6::Server::PrefixAgent::IsValid(v12);
    if ((this & 1) != 0)
    {
      uint64_t v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v10);
      ot::Dhcp6::Server::PrefixAgent::GetAloc(v12);
      ot::Ip6::Netif::RemoveUnicastAddress(v7, v1);
      ot::Dhcp6::Server::PrefixAgent::GetAloc(v12);
      ot::Ip6::Netif::UnicastAddress::GetAddress(v2);
      unsigned int v8 = v3;
      int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v10);
      ot::Mle::Mle::GetMeshLocalPrefix(v4);
      ot::Ip6::Address::SetPrefix(v8, v5);
      unsigned __int16 v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v10);
      ot::Dhcp6::Server::PrefixAgent::GetAloc(v12);
      this  = ot::Ip6::Netif::AddUnicastAddress(v9, v6);
    }

    __int16 v12 = (ot::Dhcp6::Server::PrefixAgent *)((char *)v12 + 56);
  }

  return this;
}

uint64_t ot::Ip6::Address::SetToAnycastLocator(ot::Ip6::Address *a1, void *a2, unsigned __int16 a3)
{
  return ot::Ip6::Address::SetToLocator(a1, a2, a3);
}

{
  return __ZN2ot3Ip67Address19SetToAnycastLocatorERKNS0_13NetworkPrefixEt(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Metrics::ConvertToTypeIds(ot::LinkMetrics::Metrics *this, unsigned __int8 *a2)
{
  unsigned __int8 v6 = 0;
  if ((*(_BYTE *)this & 1) != 0)
  {
    unsigned __int8 v6 = 1;
    *a2  = 64;
  }

  if ((*(_BYTE *)this & 2) != 0)
  {
    uint64_t v2 = v6++;
    a2[v2]  = 9;
  }

  if ((*(_BYTE *)this & 4) != 0)
  {
    uint64_t v3 = v6++;
    a2[v3]  = 10;
  }

  if ((*(_BYTE *)this & 8) != 0)
  {
    uint64_t v4 = v6++;
    a2[v4]  = 11;
  }

  return v6;
}

uint64_t ot::LinkMetrics::SeriesFlags::ConvertToMask(ot::LinkMetrics::SeriesFlags *this)
{
  if ((*(_BYTE *)this & 2) != 0) {
    char v1 = 2;
  }
  else {
    char v1 = 0;
  }
  char v5 = ((*(_BYTE *)this & 1) != 0) | v1;
  if ((*(_BYTE *)this & 4) != 0) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  char v6 = v5 | v2;
  if ((*(_BYTE *)this & 8) != 0) {
    char v3 = 8;
  }
  else {
    char v3 = 0;
  }
  return (v6 | v3);
}

_BYTE *ot::LinkMetrics::SeriesFlags::SetFrom(_BYTE *this, char a2)
{
  *this  = *this & 0xFE | ((a2 & 1) != 0);
  *this  = *this & 0xFD | (2 * ((a2 & 2) != 0));
  *this  = *this & 0xFB | (4 * ((a2 & 4) != 0));
  *this  = *this & 0xF7 | (8 * ((a2 & 8) != 0));
  return this;
}

_WORD *ot::LinkMetrics::SeriesInfo::Init( ot::LinkMetrics::SeriesInfo *this, char a2, char a3, const ot::LinkMetrics::Metrics *a4)
{
  *((_BYTE *)this + 8)  = a2;
  ot::LinkMetrics::SeriesFlags::SetFrom((_BYTE *)this + 9, a3);
  *((_BYTE *)this + 10)  = *(_BYTE *)a4;
  ot::Clearable<ot::RssAverager>::Clear((_WORD *)this + 6);
  uint64_t result = ot::Clearable<ot::LqiAverager>::Clear((_WORD *)this + 7);
  *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  return result;
}

_WORD *ot::Clearable<ot::LqiAverager>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_11LqiAveragerEE5ClearEv(result);
}

void ot::LinkMetrics::SeriesInfo::AggregateLinkMetrics( ot::LinkMetrics::SeriesInfo *this, unsigned __int8 a2, unsigned __int8 a3, char a4)
{
  if ((ot::LinkMetrics::SeriesInfo::IsFrameTypeMatch(this, a2) & 1) != 0)
  {
    ++*((_DWORD *)this + 4);
    ot::LqiAverager::Add((ot::LinkMetrics::SeriesInfo *)((char *)this + 14), a3);
    ot::RssAverager::Add((ot::LinkMetrics::SeriesInfo *)((char *)this + 12), a4);
    IgnoreError();
  }

uint64_t ot::LinkMetrics::SeriesInfo::IsFrameTypeMatch(ot::LinkMetrics::SeriesInfo *this, unsigned __int8 a2)
{
  if (a2 <= 3uLL) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t ot::LinkMetrics::SeriesFlags::IsMacDataFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return (*(unsigned __int8 *)this >> 1) & 1;
}

{
  return __ZNK2ot11LinkMetrics11SeriesFlags16IsMacDataFlagSetEv(this);
}

uint64_t ot::LinkMetrics::SeriesFlags::IsLinkProbeFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot11LinkMetrics11SeriesFlags18IsLinkProbeFlagSetEv(this);
}

uint64_t ot::LinkMetrics::SeriesFlags::IsMacDataRequestFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return (*(unsigned __int8 *)this >> 2) & 1;
}

{
  return __ZNK2ot11LinkMetrics11SeriesFlags23IsMacDataRequestFlagSetEv(this);
}

uint64_t ot::LinkMetrics::SeriesFlags::IsMacAckFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return (*(unsigned __int8 *)this >> 3) & 1;
}

{
  return __ZNK2ot11LinkMetrics11SeriesFlags15IsMacAckFlagSetEv(this);
}

uint64_t ot::Dns::Header::SetRandomMessageId(ot::Dns::Header *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)2);
}

uint64_t ot::Dns::Header::ResponseCodeToError(unsigned __int8 a1)
{
  if (a1 <= 0x16uLL) {
    __asm { BR              X8 }
  }

  return 1LL;
}

uint64_t ot::Dns::Name::AppendTo(ot::Dns::Name *this, ot::Message *a2)
{
  __int16 v12 = this;
  unsigned int v11 = a2;
  if (ot::Dns::Name::IsEmpty(this))
  {
    return ot::Dns::Name::AppendTerminator(v11, v2);
  }

  else if (ot::Dns::Name::IsFromCString(this))
  {
    AsCString  = (ot::Dns::Name *)ot::Dns::Name::GetAsCString(this);
    return ot::Dns::Name::AppendName(AsCString, v11, v4, v5);
  }

  else
  {
    ot::Dns::Name::LabelIterator::LabelIterator( (ot::Dns::Name::LabelIterator *)v9,  *((const ot::Message **)this + 1),  *((_WORD *)this + 8));
    while (1)
    {
      NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v9);
      if (NextLabel) {
        break;
      }
      NextLabel  = ot::Dns::Name::LabelIterator::AppendLabel((ot::Dns::Name::LabelIterator *)v9, v11);
      if (NextLabel) {
        return NextLabel;
      }
    }

    if (NextLabel == 23) {
      return ot::Dns::Name::AppendTerminator(v11, v6);
    }
  }

  return NextLabel;
}

BOOL ot::Dns::Name::IsEmpty(ot::Dns::Name *this)
{
  BOOL v2 = 0;
  if (!*(void *)this) {
    return *((void *)this + 1) == 0LL;
  }
  return v2;
}

{
  return __ZNK2ot3Dns4Name7IsEmptyEv(this);
}

uint64_t ot::Dns::Name::AppendTerminator(ot::Dns::Name *this, ot::Message *a2)
{
  uint64_t v4 = this;
  char v3 = 0;
  return ot::Message::Append<unsigned char>(this, &v3);
}

BOOL ot::Dns::Name::IsFromCString(ot::Dns::Name *this)
{
  return *(void *)this != 0LL;
}

{
  return __ZNK2ot3Dns4Name13IsFromCStringEv(this);
}

uint64_t ot::Dns::Name::AppendName(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned int appended = ot::Dns::Name::AppendMultipleLabels(this, a2, a3, a4);
  if (!appended) {
    return ot::Dns::Name::AppendTerminator(a2, v4);
  }
  return appended;
}

uint64_t ot::Dns::Name::GetAsCString(ot::Dns::Name *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot3Dns4Name12GetAsCStringEv(this);
}

ot::Dns::Name::LabelIterator *ot::Dns::Name::LabelIterator::LabelIterator( ot::Dns::Name::LabelIterator *this, const ot::Message *a2, __int16 a3)
{
  return this;
}

uint64_t ot::Dns::Name::LabelIterator::GetNextLabel(ot::Dns::Name::LabelIterator *this)
{
  unsigned __int16 v9 = this;
  while (1)
  {
    unsigned int v8 = ot::Message::Read<unsigned char>(*(ot::Message **)this, *((_WORD *)this + 6), (char *)&v7);
    if (v8) {
      break;
    }
    unsigned __int8 v6 = v7 & 0xC0;
    if ((v7 & 0xC0) == 0)
    {
      if (v7)
      {
        *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = *((_WORD *)this + 6) + 1;
        *((_BYTE *)this + 10)  = v7;
        *((_WORD *)this + 6)  = *((_WORD *)this + 4) + v7;
      }

      else
      {
        if (!ot::Dns::Name::LabelIterator::IsEndOffsetSet(this)) {
          *((_WORD *)this + 7)  = *((_WORD *)this + 6) + 1;
        }
        return 23;
      }

      return v8;
    }

    if (v6 != 192) {
      return 6;
    }
    unsigned int v8 = ot::Message::Read<unsigned short>(*(ot::Message **)this, *((_WORD *)this + 6), (char *)&v5);
    if (v8) {
      return v8;
    }
    if (!ot::Dns::Name::LabelIterator::IsEndOffsetSet(this)) {
      *((_WORD *)this + 7)  = *((_WORD *)this + 6) + 2;
    }
    Offset  = ot::Message::GetOffset(*(ot::Message **)this);
    unsigned __int16 v4 = (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v5) & 0x3FFF) + Offset;
    *((_WORD *)this + 6)  = v4;
  }

  return v8;
}

uint64_t ot::Dns::Name::LabelIterator::AppendLabel(ot::Dns::Name::LabelIterator *this, ot::Message *a2)
{
  if (*((_BYTE *)this + 10) && *((unsigned __int8 *)this + 10) <= 0x3Fu)
  {
    unsigned int v4 = ot::Message::Append<unsigned char>(a2, (char *)this + 10);
    if (!v4) {
      return ot::Message::AppendBytesFromMessage( a2,  *(const ot::Message **)this,  *((_WORD *)this + 4),  *((unsigned __int8 *)this + 10));
    }
  }

  else
  {
    return 7;
  }

  return v4;
}

uint64_t ot::Dns::Name::AppendLabel(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3)
{
  unsigned __int8 v3 = ot::StringLength(this, (const char *)0x40);
  return ot::Dns::Name::AppendLabel(this, (const char *)v3, a2, v4);
}

uint64_t ot::Dns::Name::AppendLabel(ot::Dns::Name *this, const char *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned int v8 = (char *)this;
  unsigned __int8 v7 = a2;
  if ((_BYTE)a2 && v7 <= 0x3Fu)
  {
    unsigned int v5 = ot::Message::Append<unsigned char>(a3, (char *)&v7);
    if (!v5) {
      return ot::Message::AppendBytes(a3, v8, v7);
    }
  }

  else
  {
    return 7;
  }

  return v5;
}

uint64_t ot::Dns::Name::AppendMultipleLabels( ot::Dns::Name *this, ot::Message *a2, ot::Message *a3, ot::Message *a4)
{
  return ot::Dns::Name::AppendMultipleLabels(this, (const char *)0xFE, a2, a4);
}

uint64_t ot::Dns::Name::AppendMultipleLabels( ot::Dns::Name *this, const char *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned __int8 v11 = a2;
  uint64_t v9 = 0LL;
  if (!this) {
    return HIDWORD(v9);
  }
  while (1)
  {
    else {
      char v8 = *((_BYTE *)this + WORD1(v9));
    }
    if (v8 && v8 != 46) {
      goto LABEL_20;
    }
    if (BYTE2(v9) == (_BYTE)v9) {
      break;
    }
    if (WORD1(v9) + 1 >= 255)
    {
      HIDWORD(vot::MeshCoP::Tlv::SetType(this, 9) = 7;
      return HIDWORD(v9);
    }

    HIDWORD(vot::MeshCoP::Tlv::SetType(this, 9) = ot::Dns::Name::AppendLabel( (ot::Dns::Name *)((char *)this + (unsigned __int16)v9),  (const char *)(BYTE2(v9) - v9),  a3,  a4);
    if (HIDWORD(v9)) {
      return HIDWORD(v9);
    }
    LOWORD(vot::MeshCoP::Tlv::SetType(this, 9) = WORD1(v9) + 1;
LABEL_20:
    ++WORD1(v9);
    if (!v8) {
      return HIDWORD(v9);
    }
  }

  char v7 = 1;
  if (v8)
  {
    BOOL v6 = 0;
    if (!WORD1(v9)) {
      BOOL v6 = *((_BYTE *)this + 1) == 0;
    }
    char v7 = v6;
  }

  if ((v7 & 1) != 0) {
    int v4 = 0;
  }
  else {
    int v4 = 7;
  }
  HIDWORD(vot::MeshCoP::Tlv::SetType(this, 9) = v4;
  return HIDWORD(v9);
}

uint64_t ot::Dns::Name::AppendPointerLabel(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3)
{
  unsigned __int16 v6 = (unsigned __int16)this;
  unsigned int v5 = a2;
  __int16 v4 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v6 | 0xC000u));
  return ot::Message::Append<unsigned short>(v5, (char *)&v4);
}

uint64_t ot::Dns::Name::ParseName(ot::Dns::Name *this, const ot::Message *a2, unsigned __int16 *a3)
{
  char v8 = this;
  char v7 = a2;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v4, this, *(_WORD *)a2);
  do
    NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v4);
  while (!NextLabel);
  if (NextLabel == 23)
  {
    *(_WORD *)char v7 = v5;
    return 0;
  }

  return NextLabel;
}

uint64_t ot::Dns::Name::ReadLabel( ot::Dns::Name *this, const ot::Message *a2, char *a3, char *a4, unsigned __int8 *a5)
{
  __int16 v12 = this;
  unsigned __int8 v11 = a2;
  int v10 = a3;
  uint64_t v9 = (unsigned __int8 *)a4;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v6, this, *(_WORD *)a2);
  NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6);
  if (!NextLabel)
  {
    NextLabel  = ot::Dns::Name::LabelIterator::ReadLabel((ot::Dns::Name::LabelIterator *)v6, v10, v9, 1);
    if (!NextLabel) {
      *(_WORD *)unsigned __int8 v11 = v7;
    }
  }

  return NextLabel;
}

uint64_t ot::Dns::Name::LabelIterator::ReadLabel( ot::Dns::Name::LabelIterator *this, char *a2, unsigned __int8 *a3, char a4)
{
  char v7 = a4 & 1;
  if (*((unsigned __int8 *)this + 10) < (int)*a3)
  {
    unsigned int v6 = ot::Message::Read(*(ot::Message **)this, *((_WORD *)this + 4), a2, *((unsigned __int8 *)this + 10));
    if (!v6)
    {
      a2[*((unsigned __int8 *)this + 10)]  = 0;
      *a3  = *((_BYTE *)this + 10);
      if ((v7 & 1) == 0)
      {
      }
    }
  }

  else
  {
    return 3;
  }

  return v6;
}

uint64_t ot::Dns::Name::ReadName(ot::Dns::Name *this, const ot::Message *a2, char *a3, char *a4)
{
  uint64_t v15 = this;
  unsigned __int16 v14 = a2;
  unsigned __int16 v13 = a3;
  unsigned __int16 v12 = (unsigned __int16)a4;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v9, this, *(_WORD *)a2);
  for (char i = 1; ; char i = 0)
  {
    NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v9);
    if (NextLabel) {
      break;
    }
    if ((i & 1) == 0)
    {
      __int16 v4 = v13++;
      *__int16 v4 = 46;
      --v12;
    }

    unsigned __int8 v7 = ot::Min<unsigned short>(0x40u, v12);
    NextLabel  = ot::Dns::Name::LabelIterator::ReadLabel((ot::Dns::Name::LabelIterator *)v9, v13, &v7, 0);
    if (NextLabel) {
      return NextLabel;
    }
    v13 += v7;
    v12 -= v7;
  }

  if (NextLabel == 23)
  {
    __int16 v5 = v13++;
    *__int16 v5 = 46;
    if (--v12)
    {
      *unsigned __int16 v13 = 0;
      *(_WORD *)unsigned __int16 v14 = v10;
      return 0;
    }

    else
    {
      return 3;
    }
  }

  return NextLabel;
}

uint64_t ot::Dns::Name::CompareLabel(ot::Dns::Name *this, const ot::Message *a2, char *a3, const char *a4)
{
  uint64_t v9 = this;
  char v8 = a2;
  unsigned __int8 v7 = a3;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v5, this, *(_WORD *)a2);
  NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v5);
  if (!NextLabel)
  {
    else {
      return 23;
    }
  }

  return NextLabel;
}

BOOL ot::Dns::Name::LabelIterator::CompareLabel( ot::Dns::Name::LabelIterator *this, const char **a2, char a3)
{
  char v6 = a3 & 1;
  BOOL v5 = 0;
  if (*((unsigned __int8 *)this + 10) == (unsigned __int16)ot::StringLength( (ot *)*a2,  (const char *)*((unsigned __int8 *)this + 10)))
  {
    BOOL v5 = ot::Message::CompareBytes( *(ot::Message **)this,  *((_WORD *)this + 4),  (const unsigned __int8 *)*a2,  *((unsigned __int8 *)this + 10),  (BOOL (*)(unsigned __int8, unsigned __int8))ot::Dns::Name::LabelIterator::CaseInsensitiveMatch);
    if (v5)
    {
      *a2 += *((unsigned __int8 *)this + 10);
      BOOL v5 = **a2 == 0;
      if ((v6 & 1) == 0 && **a2 == 46)
      {
        BOOL v5 = 1;
        ++*a2;
      }
    }
  }

  return v5;
}

uint64_t ot::Dns::Name::CompareName(ot::Dns::Name *this, const ot::Message *a2, char *a3, const char *a4)
{
  unsigned __int8 v11 = this;
  __int16 v10 = a2;
  uint64_t v9 = a3;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v6, this, *(_WORD *)a2);
  char v5 = 1;
  if (*v9 == 46 && (++v9, *v9))
  {
    return 7;
  }

  else
  {
    while (1)
    {
      NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6);
      if (NextLabel) {
        break;
      }
      if ((v5 & 1) != 0
        && !ot::Dns::Name::LabelIterator::CompareLabel((ot::Dns::Name::LabelIterator *)v6, (const char **)&v9, 0))
      {
        char v5 = 0;
      }
    }

    if (NextLabel == 23)
    {
      if ((v5 & 1) != 0 && !*v9) {
        NextLabel  = 0;
      }
      *(_WORD *)__int16 v10 = v7;
    }
  }

  return NextLabel;
}

uint64_t ot::Dns::Name::CompareName( ot::Dns::Name *this, const ot::Message *a2, const ot::Message *a3, const ot::Message *a4)
{
  unsigned __int16 v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int8 v11 = a3;
  __int16 v10 = (__int16)a4;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v7, this, *(_WORD *)a2);
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v6, v11, v10);
  char v5 = 1;
  while (1)
  {
    NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v7);
    if (NextLabel) {
      break;
    }
    if ((v5 & 1) != 0
      && (ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6)
       || !ot::Dns::Name::LabelIterator::CompareLabel( (ot::Dns::Name::LabelIterator *)v7,  (const ot::Dns::Name::LabelIterator *)v6)))
    {
      char v5 = 0;
    }
  }

  if (NextLabel == 23)
  {
    if ((v5 & 1) != 0
      && ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6) == 23)
    {
      NextLabel  = 0;
    }

    *(_WORD *)unsigned __int16 v12 = v8;
  }

  return NextLabel;
}

BOOL ot::Dns::Name::LabelIterator::CompareLabel( ot::Dns::Name::LabelIterator *this, const ot::Dns::Name::LabelIterator *a2)
{
  BOOL v3 = 0;
  if (*((unsigned __int8 *)this + 10) == *((unsigned __int8 *)a2 + 10)) {
    return ot::Message::CompareBytes( *(ot::Message **)this,  *((_WORD *)this + 4),  *(const ot::Message **)a2,  *((_WORD *)a2 + 4),  *((unsigned __int8 *)this + 10),  (BOOL (*)(unsigned __int8, unsigned __int8))ot::Dns::Name::LabelIterator::CaseInsensitiveMatch);
  }
  return v3;
}

uint64_t ot::Dns::Name::CompareName( ot::Dns::Name *this, const ot::Message *a2, const ot::Message **a3, const ot::Dns::Name *a4)
{
  if (ot::Dns::Name::IsFromCString((ot::Dns::Name *)a3))
  {
    return ot::Dns::Name::CompareName(this, a2, (char *)*a3, v4);
  }

  else if (ot::Dns::Name::IsFromMessage((ot::Dns::Name *)a3))
  {
    return ot::Dns::Name::CompareName(this, a2, a3[1], (const ot::Message *)*((unsigned __int16 *)a3 + 8));
  }

  else
  {
    return ot::Dns::Name::ParseName(this, a2, v5);
  }

BOOL ot::Dns::Name::IsFromMessage(ot::Dns::Name *this)
{
  return *((void *)this + 1) != 0LL;
}

{
  return __ZNK2ot3Dns4Name13IsFromMessageEv(this);
}

uint64_t ot::Message::Read<unsigned char>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 1u);
}

{
  return __ZNK2ot7Message4ReadIhEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Dns::Name::LabelIterator::IsEndOffsetSet(ot::Dns::Name::LabelIterator *this)
{
  return *((_WORD *)this + 7) != 0;
}

{
  return __ZNK2ot3Dns4Name13LabelIterator14IsEndOffsetSetEv(this);
}

BOOL ot::Dns::Name::LabelIterator::CaseInsensitiveMatch(ot::Dns::Name::LabelIterator *this, char a2)
{
  int v3 = (char)ot::ToLowercase((ot *)(char)this);
  return v3 == (char)ot::ToLowercase((ot *)a2);
}

BOOL ot::Dns::Name::IsSubDomainOf(ot::Dns::Name *this, ot *a2, const char *a3)
{
  BOOL v8 = 0;
  char v7 = 0;
  char v6 = 0;
  unsigned __int16 v5 = ot::StringLength(this, (const char *)0xFE);
  unsigned __int16 v4 = ot::StringLength(a2, (const char *)0xFE);
  if (v5 && *((_BYTE *)this + v5 - 1) == 46)
  {
    char v7 = 1;
    --v5;
  }

  if (v4 && *((_BYTE *)a2 + v4 - 1) == 46)
  {
    char v6 = 1;
    --v4;
  }

  if (v5 >= (int)v4)
  {
    unsigned __int8 v11 = (char *)this + v5 - v4;
    if (v5 <= (int)v4 || *(v11 - 1) == 46)
    {
      if ((v7 & 1) == (v6 & 1))
      {
        return ot::StringMatch(v11, (char *)a2, 1);
      }

      else if ((v7 & 1) != 0)
      {
        return ot::StringStartsWith(v11, (char *)a2, 1);
      }

      else
      {
        return ot::StringStartsWith((char *)a2, v11, 1);
      }
    }
  }

  return v8;
}

BOOL ot::Dns::Name::IsSameDomain(ot::Dns::Name *this, ot::Dns::Name *a2, const char *a3)
{
  BOOL v5 = 0;
  if (ot::Dns::Name::IsSubDomainOf(this, a2, a3)) {
    return ot::Dns::Name::IsSubDomainOf(a2, this, v3);
  }
  return v5;
}

uint64_t ot::Dns::ResourceRecord::ParseRecords( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3)
{
  uint64_t v9 = this;
  BOOL v8 = a2;
  __int16 v7 = (__int16)a3;
  unsigned int v6 = 0;
  while (v7)
  {
    unsigned int v6 = ot::Dns::Name::ParseName(v9, v8, a3);
    if (v6) {
      break;
    }
    unsigned int v6 = ot::Dns::ResourceRecord::ReadFrom((ot::Dns::ResourceRecord *)v5, v9, *(_WORD *)v8);
    if (v6) {
      break;
    }
    Size  = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v5);
    *(_WORD *)v8 += Size;
    --v7;
  }

  return v6;
}

uint64_t ot::Dns::ResourceRecord::ReadFrom( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v5 = ot::Message::Read<ot::Dns::ResourceRecord>(a2, a3, (char *)this);
  if (!v5) {
    return ot::Dns::ResourceRecord::CheckRecord(this, a2, a3);
  }
  return v5;
}

uint64_t ot::Dns::ResourceRecord::GetSize(ot::Dns::ResourceRecord *this)
{
  return (unsigned __int16)ot::Dns::ResourceRecord::GetLength(this) + 10LL;
}

{
  return __ZNK2ot3Dns14ResourceRecord7GetSizeEv(this);
}

uint64_t ot::Dns::ResourceRecord::FindRecord( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3, unsigned __int16 *a4, const ot::Dns::Name *a5)
{
  unsigned __int16 v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int8 v11 = a3;
  __int16 v10 = a4;
  while (*v11)
  {
    char v8 = 1;
    unsigned int v9 = ot::Dns::Name::CompareName(v13, v12, (const ot::Message **)v10, (const ot::Dns::Name *)a4);
    if (v9)
    {
      if (v9 != 23) {
        return v9;
      }
      char v8 = 0;
    }

    unsigned int v9 = ot::Dns::ResourceRecord::ReadFrom((ot::Dns::ResourceRecord *)v7, v13, *(_WORD *)v12);
    if (v9) {
      return v9;
    }
    --*v11;
    if ((v8 & 1) != 0) {
      return v9;
    }
    Size  = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v7);
    *(_WORD *)v12 += Size;
  }

  return 23;
}

uint64_t ot::Dns::ResourceRecord::FindRecord( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3, __int16 a4, const ot::Dns::Name *a5, const ot::Dns::Name *a6, uint64_t a7, ot::Dns::ResourceRecord *a8, unsigned __int16 a9)
{
  char v18 = this;
  uint64_t v17 = a2;
  unsigned __int16 v16 = (unsigned __int16)a3;
  __int16 v15 = a4;
  *(void *)&v14[1]  = a5;
  v14[0]  = (_WORD)a6;
  *(void *)&v13[1]  = a7;
  v13[0]  = (_WORD)a8;
  __int16 v11 = *(_WORD *)a2;
  while (v16)
  {
    Record  = ot::Dns::ResourceRecord::FindRecord( v18,  (const ot::Message *)&v11,  &v16,  *(unsigned __int16 **)&v14[1],  a5);
    if (Record) {
      return Record;
    }
    __int16 v10 = v11;
    Record  = ot::Dns::ResourceRecord::ReadRecord( v18,  (const ot::Message *)&v11,  (unsigned __int16 *)v14[0],  *(void **)&v13[1],  (ot::Dns::ResourceRecord *)v13[0]);
    if (Record != 23)
    {
      if (Record) {
        return Record;
      }
      if (!v15)
      {
        *(_WORD *)uint64_t v17 = v11;
        return Record;
      }

      --v15;
      __int16 v11 = v10 + ot::Dns::ResourceRecord::GetSize(*(ot::Dns::ResourceRecord **)&v13[1]);
    }
  }

  return 23;
}

uint64_t ot::Dns::ResourceRecord::ReadRecord( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3, void *a4, ot::Dns::ResourceRecord *a5)
{
  __int16 v15 = this;
  unsigned __int16 v14 = (unsigned __int16 *)a2;
  __int16 v13 = (__int16)a3;
  unsigned __int16 v12 = a4;
  unsigned __int16 v11 = (unsigned __int16)a5;
  unsigned int v10 = ot::Dns::ResourceRecord::ReadFrom((ot::Dns::ResourceRecord *)v9, this, *(_WORD *)a2);
  if (!v10)
  {
    if ((v13 == 255 || (__int16 Type = ot::Dns::ResourceRecord::GetType((ot::Dns::ResourceRecord *)v9), v13 == Type))
      && (unsigned int v6 = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v9), v6 >= v11))
    {
      ot::Message::Read(v15, *v14, (char *)v12, v11);
      IgnoreError();
      *v14 += v11;
    }

    else
    {
      Size  = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v9);
      *v14 += Size;
      return 23;
    }
  }

  return v10;
}

uint64_t ot::Dns::ResourceRecord::GetType(ot::Dns::ResourceRecord *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return __ZNK2ot3Dns14ResourceRecord7GetTypeEv(this);
}

uint64_t ot::Dns::ResourceRecord::ReadName( ot::Dns::ResourceRecord *this, const ot::Message *a2, const ot::Message *a3, unsigned __int16 a4, char *a5, unsigned __int16 a6, char a7)
{
  char v11 = a7 & 1;
  Name  = ot::Dns::Name::ReadName(a2, a3, a5, (char *)a6);
  if (!Name)
  {
    unsigned int v8 = *(unsigned __int16 *)a3;
    if (v8 <= a4 + ot::Dns::ResourceRecord::GetSize(this))
    {
      if ((v11 & 1) != 0)
      {
        *(_WORD *)a3  = a4;
        return ot::Dns::ResourceRecord::SkipRecord(this, a2, (unsigned __int16 *)a3);
      }
    }

    else
    {
      return 6;
    }
  }

  return Name;
}

uint64_t ot::Dns::ResourceRecord::SkipRecord( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3)
{
  unsigned int v5 = ot::Dns::ResourceRecord::CheckRecord(this, a2, *a3);
  if (!v5) {
    *a3 += ot::Dns::ResourceRecord::GetSize(this);
  }
  return v5;
}

uint64_t ot::Dns::ResourceRecord::CheckRecord( ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v4 = a3 + ot::Dns::ResourceRecord::GetSize(this);
  else {
    return 0LL;
  }
}

uint64_t ot::Message::Read<ot::Dns::ResourceRecord>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xAu);
}

{
  return __ZNK2ot7Message4ReadINS_3Dns14ResourceRecordEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Dns::TxtEntry::Iterator::Init( ot::Dns::TxtEntry::Iterator *this, const unsigned __int8 *a2, __int16 a3)
{
  return ot::Dns::TxtEntry::Iterator::SetTxtDataPosition((uint64_t)this, 0);
}

void *ot::Dns::TxtEntry::Iterator::SetTxtData(void *this, const unsigned __int8 *a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot3Dns8TxtEntry8Iterator10SetTxtDataEPKh(this, a2);
}

uint64_t ot::Dns::TxtEntry::Iterator::SetTxtDataLength(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8)  = a2;
  return this;
}

{
  return __ZN2ot3Dns8TxtEntry8Iterator16SetTxtDataLengthEt(this, a2);
}

uint64_t ot::Dns::TxtEntry::Iterator::SetTxtDataPosition(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10)  = a2;
  return this;
}

{
  return __ZN2ot3Dns8TxtEntry8Iterator18SetTxtDataPositionEt(this, a2);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetNextEntry(ot::Dns::TxtEntry::Iterator *this, ot::Dns::TxtEntry *a2)
{
  unsigned int v12 = 0;
  KeyBuffer  = ot::Dns::TxtEntry::Iterator::GetKeyBuffer(this);
  if (ot::Dns::TxtEntry::Iterator::GetTxtData(this))
  {
    *(void *)a2  = KeyBuffer;
    do
    {
      TxtData  = ot::Dns::TxtEntry::Iterator::GetTxtData(this);
      __int16 v7 = (unsigned __int8 *)(TxtData + (unsigned __int16)ot::Dns::TxtEntry::Iterator::GetTxtDataPosition(this));
      unsigned __int8 v11 = *v7;
      unsigned int v8 = v7 + 1;
      ot::Dns::TxtEntry::Iterator::IncreaseTxtDataPosition((uint64_t)this, v11 + 1);
    }

    while (!v11 || *v8 == 61);
    for (unsigned __int8 i = 0; i < (int)v11; ++i)
    {
      if (v8[i] == 61)
      {
        uint64_t v2 = i;
        unsigned __int8 v10 = i + 1;
        *(_BYTE *)(KeyBuffer + vot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
        *((void *)a2 + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = &v8[v10];
        *((_WORD *)a2 + 8)  = v11 - v10;
        return v12;
      }

      if (i >= 9u)
      {
        *(void *)a2  = 0LL;
        *((void *)a2 + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = v8;
        *((_WORD *)a2 + 8)  = v11;
        return v12;
      }

      *(_BYTE *)(KeyBuffer + i)  = v8[i];
    }

    *(_BYTE *)(KeyBuffer + i)  = 0;
    *((void *)a2 + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0LL;
    *((_WORD *)a2 + 8)  = 0;
  }

  else
  {
    return 6;
  }

  return v12;
}

uint64_t ot::Dns::TxtEntry::Iterator::GetKeyBuffer(ot::Dns::TxtEntry::Iterator *this)
{
  return (uint64_t)this + 12;
}

{
  return __ZN2ot3Dns8TxtEntry8Iterator12GetKeyBufferEv(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtData(ot::Dns::TxtEntry::Iterator *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot3Dns8TxtEntry8Iterator10GetTxtDataEv(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtDataPosition(ot::Dns::TxtEntry::Iterator *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return __ZNK2ot3Dns8TxtEntry8Iterator18GetTxtDataPositionEv(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtDataEnd(ot::Dns::TxtEntry::Iterator *this)
{
  TxtData  = ot::Dns::TxtEntry::Iterator::GetTxtData(this);
  return TxtData + (unsigned __int16)ot::Dns::TxtEntry::Iterator::GetTxtDataLength(this);
}

{
  return __ZNK2ot3Dns8TxtEntry8Iterator13GetTxtDataEndEv(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::IncreaseTxtDataPosition(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10) += a2;
  return this;
}

{
  return __ZN2ot3Dns8TxtEntry8Iterator23IncreaseTxtDataPositionEt(this, a2);
}

uint64_t ot::Dns::TxtEntry::AppendTo(ot::Dns::TxtEntry *this, ot::Message *a2)
{
  v4[4]  = this;
  v4[3]  = a2;
  ot::Appender::Appender((ot::Appender *)v4, a2);
  return ot::Dns::TxtEntry::AppendTo(this, v4);
}

uint64_t ot::Dns::TxtEntry::AppendTo(ot::Dns::TxtEntry *this, ot::Message **a2)
{
  unsigned __int8 v10 = this;
  unsigned int v9 = a2;
  unsigned int appended = 0;
  char v6 = 61;
  if (*(void *)this)
  {
    unsigned __int16 v7 = ot::StringLength(*(ot **)this, (const char *)0x100);
    if (v7)
    {
      if (*((void *)this + 1))
      {
        if ((unint64_t)(*((unsigned __int16 *)this + 8) + v7 + 1LL) <= 0xFF)
        {
          char v4 = v7 + *((_WORD *)this + 8) + 1;
          unsigned int appended = ot::Appender::Append<unsigned char>(v9, &v4);
          if (!appended)
          {
            unsigned int appended = ot::Appender::AppendBytes(v9, *(void **)this, v7);
            if (!appended)
            {
              unsigned int appended = ot::Appender::Append<char>(v9, &v6);
              if (!appended) {
                return ot::Appender::AppendBytes(v9, *((void **)this + 1), *((_WORD *)this + 8));
              }
            }
          }
        }

        else
        {
          return 7;
        }
      }

      else
      {
        char v5 = v7;
        unsigned int appended = ot::Appender::Append<unsigned char>(v9, &v5);
        if (!appended) {
          return ot::Appender::AppendBytes(v9, *(void **)this, v7);
        }
      }
    }

    else
    {
      return 7;
    }
  }

  else if (*((void *)this + 1) && *((_WORD *)this + 8))
  {
    return ot::Appender::AppendBytes(v9, *((void **)this + 1), *((_WORD *)this + 8));
  }

  return appended;
}

uint64_t ot::Appender::Append<unsigned char>(ot::Message **a1, void *a2)
{
  return ot::Appender::AppendBytes(a1, a2, 1u);
}

{
  return __ZN2ot8Appender6AppendIhEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Appender::Append<char>(ot::Message **a1, void *a2)
{
  return ot::Appender::AppendBytes(a1, a2, 1u);
}

{
  return __ZN2ot8Appender6AppendIcEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Dns::TxtEntry::AppendEntries( ot::Dns::TxtEntry *this, const ot::Dns::TxtEntry *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned int v9 = this;
  unsigned __int8 v8 = a2;
  unsigned __int16 v7 = a3;
  ot::Appender::Appender((ot::Appender *)v6, a3);
  return ot::Dns::TxtEntry::AppendEntries(v9, (const ot::Dns::TxtEntry *)v8, (ot::Appender *)v6, v4);
}

uint64_t ot::Dns::TxtEntry::AppendEntries( ot::Dns::TxtEntry *this, const ot::Dns::TxtEntry *a2, ot::Appender *a3, ot::Appender *a4)
{
  unsigned __int8 v8 = this;
  unsigned __int8 v7 = a2;
  char v6 = a3;
  memset(&v5[1], 0, 5);
  while (v5[1] < (int)v7)
  {
    *(_DWORD *)&v5[2]  = ot::Dns::TxtEntry::AppendTo((ot::Dns::TxtEntry *)((char *)v8 + 24 * v5[1]), (ot::Message **)v6);
    if (*(_DWORD *)&v5[2]) {
      return *(unsigned int *)&v5[2];
    }
    *(_DWORD *)&v5[1]  = (v5[1] + 1);
  }

  if (!(unsigned __int16)ot::Appender::GetAppendedLength((ot::Message **)v6))
  {
    v5[0]  = 0;
    *(_DWORD *)&v5[2]  = ot::Appender::Append<unsigned char>((ot::Message **)v6, v5);
  }

  return *(unsigned int *)&v5[2];
}

uint64_t ot::Dns::TxtEntry::AppendEntries(ot::Dns::TxtEntry *a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned int v12 = a1;
  unsigned __int8 v11 = a2;
  uint64_t v10 = a3;
  ot::MutableData<(ot::DataLengthType)1>::GetBytes(a3);
  unsigned __int8 v7 = v3;
  __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(v10);
  ot::Appender::Appender((ot::Appender *)v8, v7, Length);
  unsigned int appended = ot::Dns::TxtEntry::AppendEntries(v12, (const ot::Dns::TxtEntry *)v11, (ot::Appender *)v8, v5);
  if (!appended) {
    ot::Appender::GetAsData((uint64_t)v8, v10);
  }
  return appended;
}

void ot::MutableData<(ot::DataLengthType)1>::GetBytes(uint64_t a1)
{
}

{
  __ZN2ot11MutableDataILNS_14DataLengthTypeE1EE8GetBytesEv(a1);
}

BOOL ot::Dns::AaaaRecord::IsValid(ot::Dns::AaaaRecord *this)
{
  BOOL v3 = 0;
  return v3;
}

BOOL ot::Dns::KeyRecord::IsValid(ot::Dns::KeyRecord *this)
{
  return (unsigned __int16)ot::Dns::ResourceRecord::GetType(this) == 25;
}

BOOL ot::Dns::SigRecord::IsValid(ot::Dns::SigRecord *this)
{
  BOOL v3 = 0;
  return v3;
}

uint64_t ot::Dns::ResourceRecord::GetLength(ot::Dns::ResourceRecord *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 4));
}

{
  return __ZNK2ot3Dns14ResourceRecord9GetLengthEv(this);
}

uint64_t ot::Dns::LeaseOption::InitAsShortVariant(ot::Dns::LeaseOption *this, unsigned int a2)
{
  return ot::Dns::LeaseOption::SetLeaseInterval(this, a2);
}

uint64_t ot::Dns::Option::SetOptionCode(ot::Dns::Option *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot3Dns6Option13SetOptionCodeEt(this, a2);
}

uint64_t ot::Dns::Option::SetOptionLength(ot::Dns::Option *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot3Dns6Option15SetOptionLengthEt(this, a2);
}

uint64_t ot::Dns::LeaseOption::SetLeaseInterval(ot::Dns::LeaseOption *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = result;
  return result;
}

{
  return __ZN2ot3Dns11LeaseOption16SetLeaseIntervalEj(this, a2);
}

uint64_t ot::Dns::LeaseOption::InitAsLongVariant( ot::Dns::LeaseOption *this, unsigned int a2, unsigned int a3)
{
  return ot::Dns::LeaseOption::SetKeyLeaseInterval(this, a3);
}

uint64_t ot::Dns::LeaseOption::SetKeyLeaseInterval(ot::Dns::LeaseOption *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot3Dns11LeaseOption19SetKeyLeaseIntervalEj(this, a2);
}

BOOL ot::Dns::LeaseOption::IsValid(ot::Dns::LeaseOption *this)
{
  BOOL v4 = 0;
  if ((unsigned __int16)ot::Dns::Option::GetOptionLength(this) == 4
    || (unsigned __int16)ot::Dns::Option::GetOptionLength(this) >= 8u)
  {
    LeaseInterval  = ot::Dns::LeaseOption::GetLeaseInterval(this);
    return LeaseInterval <= ot::Dns::LeaseOption::GetKeyLeaseInterval(this);
  }

  return v4;
}

uint64_t ot::Dns::Option::GetOptionLength(ot::Dns::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Dns6Option15GetOptionLengthEv(this);
}

uint64_t ot::Dns::LeaseOption::GetLeaseInterval(ot::Dns::LeaseOption *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 1));
}

{
  return __ZNK2ot3Dns11LeaseOption16GetLeaseIntervalEv(this);
}

uint64_t ot::Dns::LeaseOption::GetKeyLeaseInterval(ot::Dns::LeaseOption *this)
{
  if (ot::Dns::LeaseOption::IsShortVariant(this)) {
    return ot::Dns::LeaseOption::GetLeaseInterval(this);
  }
  else {
    return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 2));
  }
}

{
  return __ZNK2ot3Dns11LeaseOption19GetKeyLeaseIntervalEv(this);
}

uint64_t ot::Dns::LeaseOption::ReadFrom( ot::Dns::LeaseOption *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned __int16 v11 = a3;
  if (a3 + a4 <= (unsigned __int16)ot::Message::GetLength(a2))
  {
    unsigned __int16 v8 = v11 + a4;
    while (1)
    {
      unsigned int v9 = ot::Message::Read(a2, v11, (char *)this, 4u);
      if (v9) {
        return v9;
      }
      Size  = ot::Dns::Option::GetSize(this);
      v11 += Size;
    }

    if ((unsigned __int16)ot::Dns::Option::GetOptionLength(this) >= 4u)
    {
      unsigned __int16 v4 = ot::Min<unsigned short>(Size, 0xCu);
      ot::Message::Read(a2, v11, (char *)this, v4);
      IgnoreError();
      if (!ot::Dns::LeaseOption::IsValid(this)) {
        return 6;
      }
    }

    else
    {
      return 6;
    }
  }

  else
  {
    return 6;
  }

  return v9;
}

uint64_t ot::Dns::Option::GetSize(ot::Dns::Option *this)
{
  return (unsigned __int16)ot::Dns::Option::GetOptionLength(this) + 4LL;
}

{
  return __ZNK2ot3Dns6Option7GetSizeEv(this);
}

uint64_t ot::Dns::Option::GetOptionCode(ot::Dns::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return __ZNK2ot3Dns6Option13GetOptionCodeEv(this);
}

uint64_t ot::Dns::PtrRecord::ReadPtrName( ot::Dns::PtrRecord *this, const ot::Message *a2, const ot::Message *a3, char *a4, char a5, char *a6, unsigned __int16 a7)
{
  int v19 = this;
  char v18 = a2;
  uint64_t v17 = a3;
  unsigned __int16 v16 = a4;
  char v15 = a5;
  unsigned __int16 v11 = *(_WORD *)a3 - 10;
  Name  = ot::Dns::Name::ParseName(a2, a3, (unsigned __int16 *)a3);
  if (!Name)
  {
    unsigned int v9 = *(unsigned __int16 *)v17;
    if (v9 <= v11 + ot::Dns::ResourceRecord::GetSize(this))
    {
      *(_WORD *)uint64_t v17 = v11 + 10;
      Name  = ot::Dns::Name::ReadLabel(v18, v17, v16, &v15, v7);
      if (!Name && (!a6 || (Name  = ot::Dns::Name::ReadName(v18, v17, a6, (char *)a7)) == 0))
      {
        *(_WORD *)uint64_t v17 = v11;
        return ot::Dns::ResourceRecord::SkipRecord(this, v18, (unsigned __int16 *)v17);
      }
    }

    else
    {
      return 6;
    }
  }

  return Name;
}

uint64_t ot::Dns::TxtRecord::ReadTxtData( ot::Dns::TxtRecord *this, const ot::Message *a2, unsigned __int16 *a3, char *a4, unsigned __int16 *a5)
{
  unsigned __int16 v8 = *a3;
  unsigned __int16 Length = ot::Dns::ResourceRecord::GetLength(this);
  unsigned __int16 v6 = ot::Min<unsigned short>(Length, *a5);
  unsigned int v12 = ot::Message::Read(a2, v8, a4, v6);
  if (!v12)
  {
    *a3 += ot::Dns::ResourceRecord::GetLength(this);
    if (*a5 >= (int)(unsigned __int16)ot::Dns::ResourceRecord::GetLength(this))
    {
      *a5  = ot::Dns::ResourceRecord::GetLength(this);
    }

    else
    {
      return 3;
    }
  }

  return v12;
}

BOOL ot::Dns::TxtRecord::VerifyTxtData(ot::Dns::TxtRecord *this, const unsigned __int8 *a2, char a3)
{
  BOOL v6 = 0;
  char v5 = 0;
  if ((a3 & 1) != 0 || (_WORD)a2)
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)a2; ++i)
    {
      if (v5) {
        --v5;
      }
      else {
        char v5 = *((_BYTE *)this + i);
      }
    }

    return v5 == 0;
  }

  return v6;
}

uint64_t ot::Dns::Name::LabelIterator::LabelIterator(uint64_t this, const ot::Message *a2, __int16 a3)
{
  *(void *)this  = a2;
  *(_WORD *)(this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  *(_WORD *)(this + 1ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  return this;
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtDataLength(ot::Dns::TxtEntry::Iterator *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot3Dns8TxtEntry8Iterator16GetTxtDataLengthEv(this);
}

BOOL ot::Dns::LeaseOption::IsShortVariant(ot::Dns::LeaseOption *this)
{
  return (unsigned __int16)ot::Dns::Option::GetOptionLength(this) == 4;
}

{
  return __ZNK2ot3Dns11LeaseOption14IsShortVariantEv(this);
}

ot::Ip6::Icmp *ot::Ip6::Icmp::Icmp(ot::Ip6::Icmp *this, ot::Instance *a2)
{
  uint64_t result = this;
  *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 1;
  *((_DWORD *)this + 3)  = 3;
  return result;
}

{
  ot::Ip6::Icmp::Icmp(this, a2);
  return this;
}

ot::Buffer *ot::Ip6::Icmp::NewMessage(ot::Ip6::Icmp *this)
{
  char v1 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  return ot::Ip6::Ip6::NewMessage(v1, 8);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Ip6>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Ip63Ip6EEERT_v(a1);
}

uint64_t ot::Ip6::Icmp::RegisterHandler(ot::Ip6::Icmp *this, ot::Ip6::Icmp::Handler *a2)
{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Add((uint64_t *)this, (uint64_t)a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Icmp::Handler>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Icmp::Handler>::Push(a1, a2);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip64Icmp7HandlerEE3AddERS3_(a1, a2);
}

uint64_t ot::Ip6::Icmp::SendEchoRequest( ot::Ip6::Icmp *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int16 a4)
{
  char v21 = this;
  char v20 = a2;
  int v19 = a3;
  unsigned __int16 v18 = a4;
  unsigned int v17 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v16);
  memcpy(v16, v19, sizeof(v16));
  ot::Clearable<ot::Ip6::Icmp::Header>::Clear(&v15);
  ot::Ip6::Icmp::Header::SetType(&v15, 128);
  ot::Ip6::Icmp::Header::SetId((ot::Ip6::Icmp::Header *)&v15, v18);
  unsigned __int16 v4 = *((_WORD *)this + 4);
  *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = v4 + 1;
  ot::Ip6::Icmp::Header::SetSequence((ot::Ip6::Icmp::Header *)&v15, v4);
  unsigned int v17 = ot::Message::Prepend<ot::Ip6::Icmp::Header>(v20, (char *)&v15);
  if (!v17)
  {
    ot::Message::SetOffset(v20, 0);
    char v5 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
    unsigned int v17 = ot::Ip6::Ip6::SendDatagram(v5, v20, (ot::Ip6::MessageInfo *)v16, 0x3Au);
    if (!v17)
    {
      Sequence  = ot::Ip6::Icmp::Header::GetSequence((ot::Ip6::Icmp::Header *)&v15);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Icmp6",  "Sent echo request: (seq  = %d)",  v7,  v8,  v9,  v10,  v11,  v12,  Sequence);
    }
  }

  return v17;
}

void *ot::Clearable<ot::Ip6::Icmp::Header>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip64Icmp6HeaderEE5ClearEv(result);
}

_BYTE *ot::Ip6::Icmp::Header::SetType(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return __ZN2ot3Ip64Icmp6Header7SetTypeENS2_4TypeE(result, a2);
}

uint64_t ot::Ip6::Icmp::Header::SetId(ot::Ip6::Icmp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot3Ip64Icmp6Header5SetIdEt(this, a2);
}

uint64_t ot::Ip6::Icmp::Header::SetSequence(ot::Ip6::Icmp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot3Ip64Icmp6Header11SetSequenceEt(this, a2);
}

uint64_t ot::Message::Prepend<ot::Ip6::Icmp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 8u);
}

{
  return __ZN2ot7Message7PrependINS_3Ip64Icmp6HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Ip6::Icmp::Header::GetSequence(ot::Ip6::Icmp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return __ZNK2ot3Ip64Icmp6Header11GetSequenceEv(this);
}

uint64_t ot::Ip6::Icmp::SendError( ot::InstanceLocator *a1, char a2, char a3, ot::Ip6::MessageInfo *a4, const ot::Message *a5)
{
  __int16 v13 = a1;
  char v12 = a2;
  char v11 = a3;
  uint64_t v10 = a4;
  uint64_t v9 = a5;
  unsigned int v8 = ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v7, a5);
  if (!v8) {
    return ot::Ip6::Icmp::SendError(a1, v12, v11, v10, (ot::Ip6::Headers *)v7, (uint64_t)v10);
  }
  return v8;
}

uint64_t ot::Ip6::Icmp::SendError( ot::InstanceLocator *a1, char a2, char a3, ot::Ip6::MessageInfo *a4, ot::Ip6::Headers *a5, uint64_t a6)
{
  v32  = a1;
  char v31 = a2;
  char v30 = a3;
  unsigned __int16 v29 = a4;
  int v28 = a5;
  uint64_t v27 = a6;
  unsigned int v26 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)__dst);
  __int16 v24 = 0LL;
  ot::Message::Settings::Settings(v22, 1, 3);
  if (ot::Ip6::Headers::GetIpProto(v28) != 58
    || (IcmpHeader  = (ot::Ip6::Icmp::Header *)ot::Ip6::Headers::GetIcmpHeader(v28),
        !ot::Ip6::Icmp::Header::IsError(IcmpHeader)))
  {
    memcpy(__dst, v29, 0x38uLL);
    uint64_t v7 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
    __int16 v24 = ot::Ip6::Ip6::NewMessage(v7, 0, (const ot::Message::Settings *)v22);
    if (v24)
    {
      ot::Clearable<ot::Ip6::Icmp::Header>::Clear(&v23);
      ot::Ip6::Icmp::Header::SetType(&v23, v31);
      ot::Ip6::Icmp::Header::SetCode((uint64_t)&v23, v30);
      unsigned int v26 = ot::Message::Append<ot::Ip6::Icmp::Header>(v24, (char *)&v23);
      if (!v26)
      {
        char v20 = v24;
        ot::Ip6::Headers::GetIp6Header(v28);
        unsigned int v26 = ot::Message::Append<ot::Ip6::Header>(v20, v8);
        if (!v26)
        {
          uint64_t v9 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
          unsigned int v26 = ot::Ip6::Ip6::SendDatagram(v9, v24, (ot::Ip6::MessageInfo *)__dst, 0x3Au);
          if (!v26)
          {
            char v19 = v31;
            ot::Ip6::MessageInfo::GetPeerAddr(v29);
            ot::Ip6::Address::ToString(v10, (ot::StringWriter *)v34);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
            ot::Ip6::MessageInfo::GetSockAddr(v29);
            ot::Ip6::Address::ToString(v11, (ot::StringWriter *)v33);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
            ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"Icmp6",  "Sent ICMPv6 Error, type: %u, code: %u, for ICMPv6 from peer: [%s] to peer [%s]",  v12,  v13,  v14,  v15,  v16,  v17,  v19);
          }
        }
      }
    }

    else
    {
      unsigned int v26 = 3;
    }
  }

  if (v26 && v24) {
    ot::Message::Free(v24);
  }
  return v26;
}

BOOL ot::Ip6::Icmp::Header::IsError(ot::Ip6::Icmp::Header *this)
{
  return *(unsigned __int8 *)this < 0x80u;
}

{
  return __ZNK2ot3Ip64Icmp6Header7IsErrorEv(this);
}

uint64_t ot::Ip6::Icmp::Header::SetCode(uint64_t result, char a2)
{
  *(_BYTE *)(result + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  return result;
}

{
  return __ZN2ot3Ip64Icmp6Header7SetCodeENS2_4CodeE(result, a2);
}

uint64_t ot::Message::Append<ot::Ip6::Icmp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 8u);
}

{
  return __ZN2ot7Message6AppendINS_3Ip64Icmp6HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Message::Append<ot::Ip6::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x28u);
}

{
  return __ZN2ot7Message6AppendINS_3Ip66HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Ip6::Icmp::HandleMessage(ot::Ip6::Icmp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  unsigned int v11 = 0;
  Offset  = ot::Message::GetOffset(a2);
  unsigned int v11 = ot::Message::Read<ot::Ip6::Icmp::Header>(a2, Offset, v10);
  if (!v11)
  {
    unsigned int v11 = ot::Checksum::VerifyMessageChecksum(v13, v12, (const ot::Ip6::MessageInfo *)0x3A);
    if (!v11
      && (ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v10) != 128
       || (unsigned int v11 = ot::Ip6::Icmp::HandleEchoRequest(this, v13, v12)) == 0))
    {
      ot::Message::MoveOffset(v13, 8);
      v9[1]  = (uint64_t)this;
      v9[0]  = ot::LinkedList<ot::Ip6::Icmp::Handler>::begin((uint64_t)this);
      uint64_t v8 = ot::LinkedList<ot::Ip6::Icmp::Handler>::end();
      while (ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator!=( v9,  &v8))
      {
        uint64_t v7 = (ot::Ip6::Icmp::Handler *)ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator*((uint64_t)v9);
        ot::Ip6::Icmp::Handler::HandleReceiveMessage(v7, v13, v12, (const ot::Ip6::Icmp::Header *)v10);
        ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator++(v9);
      }
    }
  }

  return v11;
}

uint64_t ot::Message::Read<ot::Ip6::Icmp::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip64Icmp6HeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::Icmp::HandleEchoRequest( ot::Ip6::Icmp *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v45 = this;
  uint64_t v44 = a2;
  unint64_t v43 = a3;
  unsigned int appended = 0;
  unsigned __int16 v40 = 0LL;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v39);
  if ((ot::Ip6::Icmp::ShouldHandleEchoRequest(this, v43) & 1) != 0
    || (ot::Ip6::MessageInfo::GetSockAddr(v43),
        Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v9),
        ot::Ip6::InterfaceIdentifier::IsLocator(Iid)))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Icmp6", "Received Echo Request", v3, v4, v5, v6, v7, v8, v32);
    ot::Clearable<ot::Ip6::Icmp::Header>::Clear(&v41);
    ot::Ip6::Icmp::Header::SetType(&v41, 129);
    unsigned int v11 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
    unsigned __int16 v40 = ot::Ip6::Ip6::NewMessage(v11, 0);
    if (v40)
    {
      unsigned __int16 v38 = ot::Message::GetOffset(v44) + 4;
      unsigned int appended = ot::Message::AppendBytes(v40, (char *)&v41, 4u);
      if (!appended)
      {
        uint64_t v36 = v40;
        v35  = v44;
        __int16 Length = ot::Message::GetLength(v44);
        unsigned int appended = ot::Message::AppendBytesFromMessage(v36, v35, v38, Length - v38);
        if (!appended)
        {
          ot::Ip6::MessageInfo::GetPeerAddr(v43);
          ot::Ip6::MessageInfo::SetPeerAddr(v39, v19);
          ot::Ip6::MessageInfo::GetSockAddr(v43);
          if (!ot::Ip6::Address::IsMulticast(v20))
          {
            ot::Ip6::MessageInfo::GetSockAddr(v43);
            ot::Ip6::MessageInfo::SetSockAddr(v39, v21);
          }

          char v22 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
          unsigned int appended = ot::Ip6::Ip6::SendDatagram(v22, v40, (ot::Ip6::MessageInfo *)v39, 0x3Au);
          if (!appended)
          {
            v34  = v40;
            Offset  = ot::Message::GetOffset(v40);
            ot::Message::Read<ot::Ip6::Icmp::Header>(v34, Offset, (char *)&v41);
            IgnoreError();
            Sequence  = ot::Ip6::Icmp::Header::GetSequence((ot::Ip6::Icmp::Header *)&v41);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Icmp6",  "Sent Echo Reply (seq  = %d)",  v25,  v26,  v27,  v28,  v29,  v30,  Sequence);
          }
        }
      }
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"Icmp6",  "Failed to allocate a new message",  v12,  v13,  v14,  v15,  v16,  v17,  v33);
    }
  }

  if (appended && v40) {
    ot::Message::Free(v40);
  }
  return appended;
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Ip6::Icmp::Handler>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZN2ot10LinkedListINS_3Ip64Icmp7HandlerEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::end()
{
  return v1;
}

{
  return __ZN2ot10LinkedListINS_3Ip64Icmp7HandlerEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_3Ip64Icmp7HandlerENS_10LinkedListIS3_E8IteratorEEneERKS6_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_3Ip64Icmp7HandlerENS_10LinkedListIS3_E8IteratorEEdeEv(a1);
}

uint64_t ot::Ip6::Icmp::Handler::HandleReceiveMessage( ot::Ip6::Icmp::Handler *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Ip6::Icmp::Header *a4)
{
  return (*(uint64_t (**)(void, ot::Message *, const ot::Ip6::MessageInfo *, const ot::Ip6::Icmp::Header *))this)( *((void *)this + 1),  a2,  a3,  a4);
}

{
  return __ZN2ot3Ip64Icmp7Handler20HandleReceiveMessageERNS_7MessageERKNS0_11MessageInfoERKNS1_6HeaderE( this,  a2,  a3,  a4);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator++( uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorINS_3Ip64Icmp7HandlerENS_10LinkedListIS3_E8IteratorEEppEv(a1);
}

uint64_t ot::Ip6::Icmp::ShouldHandleEchoRequest(ot::Ip6::Icmp *this, const ot::Ip6::MessageInfo *a2)
{
  unint64_t v3 = *((unsigned int *)this + 3);
  if (v3 <= 3) {
    __asm { BR              X8 }
  }

  return 0LL;
}

BOOL ot::LinkedList<ot::Ip6::Icmp::Handler>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Find(a1, a2, v3) == 0;
}

{
  return __ZNK2ot10LinkedListINS_3Ip64Icmp7HandlerEE8ContainsERKS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip64Icmp7HandlerEE4PushERS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0LL;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }

  return v5;
}

{
  return __ZNK2ot10LinkedListINS_3Ip64Icmp7HandlerEE4FindERKS3_RPS5_(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

{
  return *(void *)(a1 + 16);
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip64Icmp7HandlerEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_3Ip64Icmp7HandlerEE7GetNextEv(a1);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + ot::Tlv::SetLength((uint64_t)this, 16) = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip64Icmp7HandlerEE7SetNextEPS3_(result, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_3Ip64Icmp7HandlerEE7GetHeadEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip64Icmp7HandlerEE8Iterator7AdvanceEv(a1);
}

ot::Ip6::Ip6 *ot::Ip6::Ip6::Ip6(ot::Ip6::Ip6 *this, ot::Instance *a2)
{
  *(_BYTE *)this  = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 1);
  *((void *)this + 3)  = 0LL;
  *((void *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0LL;
  ot::PriorityQueue::PriorityQueue((ot::Ip6::Ip6 *)((char *)this + 40));
  ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::TaskletIn((void *)this + 9, (uint64_t)a2);
  ot::Ip6::Icmp::Icmp((ot::Ip6::Ip6 *)((char *)this + 88), a2);
  ot::Ip6::Udp::Udp((ot::Ip6::Ip6 *)((char *)this + 104), a2);
  ot::Ip6::Mpl::Mpl((ot::Ip6::Ip6 *)((char *)this + 136), a2);
  return this;
}

{
  ot::Ip6::Ip6::Ip6(this, a2);
  return this;
}

void ot::Ip6::Ip6::HandleSendQueue(ot::Ip6::Ip6 *this)
{
  while (1)
  {
    ot::PriorityQueue::GetHead((ot::Ip6::Ip6 *)((char *)this + 40));
    unint64_t v3 = v1;
    if (!v1) {
      break;
    }
    ot::PriorityQueue::Dequeue((ot::Ip6::Ip6 *)((char *)this + 40), v1);
    ot::Ip6::Ip6::HandleDatagram(this, v3, 2u, 0LL, 0);
    IgnoreError();
  }

ot::PriorityQueue *ot::PriorityQueue::PriorityQueue(ot::PriorityQueue *this)
{
  return this;
}

{
  ot::Clearable<ot::PriorityQueue>::Clear(this);
  return this;
}

void *ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::HandleTasklet);
  return a1;
}

ot::Buffer *ot::Ip6::Ip6::NewMessage(ot::Ip6::Ip6 *this)
{
  return ot::Ip6::Ip6::NewMessage(this, 0);
}

ot::Buffer *ot::Ip6::Ip6::NewMessage(ot::Ip6::Ip6 *this, __int16 a2)
{
  Default  = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Ip6::Ip6::NewMessage(this, a2, Default);
}

ot::Buffer *ot::Ip6::Ip6::NewMessage(ot::Ip6::Ip6 *this, __int16 a2, const ot::Message::Settings *a3)
{
  unint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
  return ot::MessagePool::Allocate(v3, 0, a2 + 48, a3);
}

ot::Message *ot::Ip6::Ip6::NewMessageFromData( ot::Ip6::Ip6 *this, char *a2, unsigned __int16 a3, const ot::Message::Settings *a4)
{
  uint64_t v13 = this;
  uint64_t v12 = (ot::Ip6::Header *)a2;
  unsigned __int16 v11 = a3;
  uint64_t v10 = a4;
  uint64_t v9 = 0LL;
  __int16 v8 = *(_WORD *)a4;
  if (a2)
  {
    if (v11 >= 0x28uLL
      && ot::Ip6::Header::IsValid(v12)
      && (unsigned __int16)ot::Ip6::Header::GetPayloadLength(v12) + 40LL == v11)
    {
      Dscp  = ot::Ip6::Header::GetDscp(v12);
      HIBYTE(v8)  = ot::Ip6::Ip6::DscpToPriority((ot::Ip6::Ip6 *)Dscp);
      unsigned int v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
      uint64_t v9 = ot::MessagePool::Allocate(v5, 0, 0, (ot::Message::Settings *)&v8);
      if (v9)
      {
        if (ot::Message::AppendBytes(v9, (char *)v12, v11))
        {
          ot::Message::Free(v9);
          return 0LL;
        }
      }
    }
  }

  return v9;
}

uint64_t ot::Ip6::Ip6::DscpToPriority(ot::Ip6::Ip6 *this)
{
  int v2 = this & 0x38;
  switch(v2)
  {
    case 8:
    case 16:
      return 0;
    case 24:
      return 1;
    case 32:
    case 40:
    case 48:
    case 56:
      return 2;
    default:
      return 1;
  }

uint64_t ot::Ip6::Header::GetDscp(ot::Ip6::Header *this)
{
  return (int)(ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this) & 0xFC0) >> 6;
}

{
  return __ZNK2ot3Ip66Header7GetDscpEv(this);
}

uint64_t ot::Ip6::Ip6::PriorityToDscp(unsigned __int8 a1)
{
  if (a1 <= 3uLL) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t ot::Ip6::Ip6::SetLargeScopeMulticastReceiveDatagramCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  *(void *)(result + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  return result;
}

uint64_t ot::Ip6::Ip6::AddMplOption(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3)
{
  char v20 = this;
  char v19 = a2;
  unsigned __int16 v18 = a3;
  unsigned int v17 = 0;
  NextHeader  = ot::Ip6::Header::GetNextHeader(a3);
  ot::Ip6::ExtensionHeader::SetNextHeader(v16, NextHeader);
  ot::Ip6::ExtensionHeader::SetLength((uint64_t)v16, 0);
  Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource(v18);
  ot::Ip6::Mpl::InitOption((ot::Ip6::Ip6 *)((char *)this + 136), (ot::Ip6::MplOption *)v15, Source);
  Size  = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v15);
  if (ot::Ip6::PadOption::InitToPadHeaderWithSize((ot::Ip6::PadOption *)v14, Size + 2)
    || (uint64_t v12 = v19,
        unsigned __int16 v6 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v14),
        (unsigned int v17 = ot::Message::PrependBytes(v12, v14, v6)) == 0))
  {
    unsigned __int16 v11 = v19;
    unsigned __int16 v7 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v15);
    unsigned int v17 = ot::Message::PrependBytes(v11, v15, v7);
    if (!v17)
    {
      unsigned int v17 = ot::Message::Prepend<ot::Ip6::HopByHopHeader>(v19, v16);
      if (!v17)
      {
        uint64_t v10 = v18;
        Payload__int16 Length = ot::Ip6::Header::GetPayloadLength(v18);
        ot::Ip6::Header::SetPayloadLength(v10, PayloadLength + 8);
        ot::Ip6::Header::SetNextHeader((uint64_t)v18, 0);
      }
    }
  }

  return v17;
}

_BYTE *ot::Ip6::ExtensionHeader::SetNextHeader(_BYTE *this, char a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot3Ip615ExtensionHeader13SetNextHeaderEh(this, a2);
}

uint64_t ot::Ip6::ExtensionHeader::SetLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  return this;
}

{
  return __ZN2ot3Ip615ExtensionHeader9SetLengthEh(this, a2);
}

uint64_t ot::Message::Prepend<ot::Ip6::HopByHopHeader>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message7PrependINS_3Ip614HopByHopHeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Ip6::Header::SetPayloadLength(ot::Ip6::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot3Ip66Header16SetPayloadLengthEt(this, a2);
}

uint64_t ot::Ip6::Header::SetNextHeader(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6)  = a2;
  return this;
}

{
  return __ZN2ot3Ip66Header13SetNextHeaderEh(this, a2);
}

uint64_t ot::Ip6::Ip6::AddTunneledMplOption(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3)
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  unsigned __int16 v11 = a3;
  unsigned int v10 = 0;
  ot::Ip6::Header::InitVersionTrafficClassFlow((ot::Ip6::Header *)v9);
  ot::Ip6::Header::SetHopLimit((uint64_t)v9, 64);
  Payload__int16 Length = ot::Ip6::Header::GetPayloadLength(v11);
  ot::Ip6::Header::SetPayloadLength((ot::Ip6::Header *)v9, PayloadLength + 40);
  Destination  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v9);
  ot::Ip6::Address::SetToRealmLocalAllMplForwarders(Destination);
  ot::Ip6::Header::SetNextHeader((uint64_t)v9, 41);
  unsigned int v5 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v9);
  __int16 v8 = (ot::Ip6::Address *)ot::Ip6::Ip6::SelectSourceAddress(this, v5);
  if (v8)
  {
    ot::Ip6::Header::SetSource((ot::Ip6::Header *)v9, (__n128 *)v8);
    unsigned int v10 = ot::Ip6::Ip6::AddMplOption(this, v12, (ot::Ip6::Header *)v9);
    if (!v10) {
      return ot::Message::Prepend<ot::Ip6::Header>(v12, v9);
    }
  }

  else
  {
    return 20;
  }

  return v10;
}

uint64_t ot::Ip6::Header::InitVersionTrafficClassFlow(ot::Ip6::Header *this)
{
  return ot::Ip6::Header::SetVerionTrafficClassFlow(this, 0x60000000u);
}

{
  return __ZN2ot3Ip66Header27InitVersionTrafficClassFlowEv(this);
}

uint64_t ot::Ip6::Header::SetHopLimit(uint64_t this, char a2)
{
  *(_BYTE *)(this + 7)  = a2;
  return this;
}

{
  return __ZN2ot3Ip66Header11SetHopLimitEh(this, a2);
}

uint64_t ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Ip6 *this, const ot::Ip6::Address *a2)
{
  uint64_t v29 = this;
  uint64_t v28 = a2;
  Scope  = ot::Ip6::Address::GetScope(a2);
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  IsRoutingLocator  = ot::Mle::Mle::IsRoutingLocator(v2, v28);
  uint64_t v25 = 0LL;
  unsigned __int8 v24 = 0;
  unint64_t v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v3);
  v23[1]  = v4;
  v23[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v4);
  uint64_t v22 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v23,  &v22))
  {
    char v21 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v23);
    unsigned int v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    ot::Ip6::Netif::UnicastAddress::GetAddress(v21);
    if (ot::Mle::Mle::IsAnycastLocator(v17, v5)) {
      goto LABEL_30;
    }
    uint64_t v16 = v28;
    ot::Ip6::Netif::UnicastAddress::GetAddress(v21);
    unsigned __int8 v20 = ot::Ip6::Address::PrefixMatch(v16, v6);
    if (v20 < (int)*((unsigned __int8 *)v21 + 16))
    {
      unsigned __int8 v19 = Scope;
    }

    else
    {
      unsigned __int8 v20 = *((_BYTE *)v21 + 16);
      unsigned __int8 v19 = ot::Ip6::Netif::UnicastAddress::GetScope(v21);
    }

    if (!v25)
    {
      uint64_t v25 = v21;
      unsigned __int8 v24 = v20;
      goto LABEL_28;
    }

    ot::Ip6::Netif::UnicastAddress::GetAddress(v21);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v7, v28))
    {
      uint64_t v25 = v21;
      break;
    }

    int v15 = ot::Ip6::Netif::UnicastAddress::GetScope(v21);
    if (v15 < ot::Ip6::Netif::UnicastAddress::GetScope(v25))
    {
      uint64_t v25 = v21;
      unsigned __int8 v24 = v20;
      goto LABEL_28;
    }

    int v14 = ot::Ip6::Netif::UnicastAddress::GetScope(v21);
    if (v14 > ot::Ip6::Netif::UnicastAddress::GetScope(v25))
    {
      uint64_t v25 = v21;
      unsigned __int8 v24 = v20;
      goto LABEL_28;
    }

    if ((*((_BYTE *)v21 + 18) & 1) != 0 && (*((_BYTE *)v25 + 18) & 1) == 0)
    {
      uint64_t v25 = v21;
      unsigned __int8 v24 = v20;
      goto LABEL_28;
    }

    if (v20 > (int)v24)
    {
      uint64_t v25 = v21;
      unsigned __int8 v24 = v20;
      goto LABEL_28;
    }

    if (v20 == v24)
    {
      int v13 = IsRoutingLocator;
      uint64_t v12 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      ot::Ip6::Netif::UnicastAddress::GetAddress(v21);
      if (v13 == ot::Mle::Mle::IsRoutingLocator(v12, v8))
      {
        uint64_t v25 = v21;
        unsigned __int8 v24 = v20;
LABEL_28:
      }
    }

__n128 ot::Ip6::Header::SetSource(ot::Ip6::Header *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + 8)  = *a2;
  return result;
}

uint64_t ot::Message::Prepend<ot::Ip6::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 0x28u);
}

{
  return __ZN2ot7Message7PrependINS_3Ip66HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Ip6::Ip6::InsertMplOption(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3)
{
  uint64_t v46 = this;
  uint64_t v45 = a2;
  uint64_t v44 = a3;
  inserted  = 0;
  Destination  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
  if (ot::Ip6::Address::IsMulticast(Destination))
  {
    uint64_t v4 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
    if (ot::Ip6::Address::GetScope(v4) >= 3u)
    {
      unsigned int v5 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
      if (ot::Ip6::Address::IsRealmLocalMulticast(v5))
      {
        ot::Message::RemoveHeader(v45, 0x28u);
        if (ot::Ip6::Header::GetNextHeader(v44))
        {
          inserted  = ot::Ip6::Ip6::AddMplOption(this, v45, v44);
          if (inserted) {
            return inserted;
          }
        }

        else
        {
          inserted  = ot::Message::Read<ot::Ip6::HopByHopHeader>(v45, 0, v42);
          if (inserted) {
            return inserted;
          }
          Size  = ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v42);
          char Length = ot::Ip6::ExtensionHeader::GetLength((ot::Ip6::ExtensionHeader *)v42);
          ot::Ip6::ExtensionHeader::SetLength((uint64_t)v42, Length + 1);
          ot::Message::Write<ot::Ip6::HopByHopHeader>(v45, 0, v42);
          inserted  = ot::Message::InsertHeader(v45, Size, 8u);
          if (inserted) {
            return inserted;
          }
          Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource(v44);
          ot::Ip6::Mpl::InitOption((ot::Ip6::Ip6 *)((char *)this + 136), (ot::Ip6::MplOption *)v40, Source);
          v35  = v45;
          v34  = Size;
          unsigned __int16 v8 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v40);
          ot::Message::WriteBytes(v35, v34, v40, v8);
          unsigned __int16 v9 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v40);
          if (!ot::Ip6::PadOption::InitToPadHeaderWithSize((ot::Ip6::PadOption *)v39, v9))
          {
            char v33 = v45;
            unsigned __int16 v31 = Size;
            v32  = v31 + ot::Ip6::Option::GetSize((ot::Ip6::Option *)v40);
            unsigned __int16 v10 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v39);
            ot::Message::WriteBytes(v33, v32, v39, v10);
          }

          uint64_t v30 = v44;
          Payloadchar Length = ot::Ip6::Header::GetPayloadLength(v44);
          ot::Ip6::Header::SetPayloadLength(v30, PayloadLength + 8);
        }

        return ot::Message::Prepend<ot::Ip6::Header>(v45, (char *)v44);
      }

      uint64_t v12 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
      if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v12))
      {
        int v38 = ot::Ip6::Header::GetHopLimit(v44) - 1;
        ot::Message::Write<int>(v45, 7u, (char *)&v38);
      }

      int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
      if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v13))
      {
        uint64_t v29 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        int v14 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
        if ((ot::ChildTable::HasSleepyChildWithAddress(v29, v14) & 1) != 0)
        {
          v37  = ot::Message::Clone(v45);
          if (v37)
          {
            ot::Ip6::Ip6::HandleDatagram(this, v37, 1u, 0LL, 0);
            IgnoreError();
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Ip6",  "Message copy for indirect transmission to sleepy children",  v21,  v22,  v23,  v24,  v25,  v26,  v28);
          }

          else
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "No enough buffer for message copy for indirect transmission to sleepy children",  v15,  v16,  v17,  v18,  v19,  v20,  v28);
          }
        }
      }

      return ot::Ip6::Ip6::AddTunneledMplOption(this, v45, v44);
    }
  }

  return inserted;
}

uint64_t ot::Message::Read<ot::Ip6::HopByHopHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip614HopByHopHeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::ExtensionHeader::GetSize(ot::Ip6::ExtensionHeader *this)
{
  return (unsigned __int16)(8 * (*((unsigned __int8 *)this + 1) + 1));
}

{
  return __ZNK2ot3Ip615ExtensionHeader7GetSizeEv(this);
}

uint64_t ot::Ip6::ExtensionHeader::GetLength(ot::Ip6::ExtensionHeader *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot3Ip615ExtensionHeader9GetLengthEv(this);
}

uint64_t ot::Message::Write<ot::Ip6::HopByHopHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return __ZN2ot7Message5WriteINS_3Ip614HopByHopHeaderEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Ip6::Header::GetHopLimit(ot::Ip6::Header *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return __ZNK2ot3Ip66Header11GetHopLimitEv(this);
}

uint64_t ot::Message::Write<int>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 4u);
}

{
  return __ZN2ot7Message5WriteIiEEvtRKT_(a1, a2, a3);
}

ot::Message *ot::Message::Clone(ot::Message *this)
{
  unsigned __int16 Length = ot::Message::GetLength(this);
  return ot::Message::Clone(this, Length);
}

{
  return __ZNK2ot7Message5CloneEv(this);
}

uint64_t ot::Ip6::Ip6::HandleDatagram( ot::InstanceLocator *a1, ot::Message *a2, unsigned __int8 a3, const void *a4, char a5)
{
  v81  = a1;
  v80  = a2;
  v79  = a3;
  v78  = a4;
  v77  = a5 & 1;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v75);
  v68  = 0LL;
  while (1)
  {
    v73  = 0;
    v72  = 0;
    IsMulticastLargerThanRealmLocal  = 0;
    v70  = 1;
    v76  = ot::Ip6::Header::ParseFrom((ot::Ip6::Header *)v74, v80);
    if (v76) {
      break;
    }
    ot::Clearable<ot::Ip6::MessageInfo>::Clear(v75);
    Source  = (__n128 *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v74);
    ot::Ip6::MessageInfo::SetPeerAddr(v75, Source);
    Destination  = (__n128 *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
    ot::Ip6::MessageInfo::SetSockAddr(v75, Destination);
    HopLimit  = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v74);
    ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v75, HopLimit);
    Ecn  = ot::Ip6::Header::GetEcn((ot::Ip6::Header *)v74);
    ot::Ip6::MessageInfo::SetEcn((uint64_t)v75, Ecn);
    ot::Ip6::MessageInfo::SetLinkInfo((uint64_t)v75, v78);
    unsigned __int16 v9 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
    if (ot::Ip6::Address::IsMulticast(v9))
    {
      v72  = v79 != 0;
      if (!v79)
      {
        unsigned __int16 v10 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
        if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v10))
        {
          v60  = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
          unsigned __int16 v11 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
          if ((ot::ChildTable::HasSleepyChildWithAddress(v60, v11) & 1) != 0) {
            v72  = 1;
          }
        }
      }

      uint64_t v12 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
      IsMulticastLargerThanRealmLocal  = ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v12);
      int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
      if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v13))
      {
        int v14 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
        ot::Ip6::Address::ToString(v14, (ot::StringWriter *)v82);
        v59  = ot::String<(unsigned short)40>::AsCString((uint64_t)v82);
        uint64_t v15 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
        ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v15);
        v58  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
        uint64_t v16 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
        ot::Ip6::Netif::IsMulticastSubscribed(v58, v16);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "Ip6::HandleDatagram destn=%s forwardHost=%d forwardThread=%d isLargeScope=%d multicastSubscribed=%d receive=%d",  v17,  v18,  v19,  v20,  v21,  v22,  v59);
        if (!*((void *)a1 + 3))
        {
          v76  = 4;
          break;
        }

        v68  = ot::Message::Clone(v80);
        if (!v68)
        {
          char Length = ot::Message::GetLength(v80);
          otLogWarnPlat("No buff to clone msg (len: %d) to pass to host", v24, v25, v26, v27, v28, v29, v30, Length);
          v76  = 3;
          break;
        }

        (*((void (**)(ot::Message *, void))a1 + 3))(v68, *((void *)a1 + 4));
        ot::Message::Free(v68);
      }

      if ((!v79 || (ot::Message::GetMulticastLoop(v80) & 1) != 0)
        && (v57  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1),
            unsigned __int16 v31 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74),
            ot::Ip6::Netif::IsMulticastSubscribed(v57, v31)))
      {
        v73  = 1;
      }

      else
      {
        v32  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
        if ((ot::Ip6::Netif::IsMulticastPromiscuousEnabled(v32) & 1) != 0) {
          IsMulticastLargerThanRealmLocal  = 1;
        }
      }
    }

    else
    {
      v56  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
      char v33 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
      if (ot::Ip6::Netif::HasUnicastAddress(v56, v33))
      {
        v73  = 1;
      }

      else if (v79 {
             || (v34  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74),
      }
                 !ot::Ip6::Address::IsLinkLocal(v34)))
      {
        v35  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
        if (ot::Ip6::Address::IsLinkLocal(v35))
        {
          v72  = 1;
        }

        else
        {
          uint64_t v36 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
          if ((ot::Ip6::Ip6::IsOnLink(a1, v36) & 1) != 0)
          {
            v72  = 1;
          }

          else
          {
            v55  = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v74);
            v37  = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v74);
          }
        }

        IsMulticastLargerThanRealmLocal  = !v72;
      }
    }

    ot::Message::SetOffset(v80, 0x28u);
    NextHeader  = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v74);
    v76  = ot::Ip6::Ip6::HandleExtensionHeaders( a1,  v80,  v79,  (ot::Ip6::MessageInfo *)v75,  (ot::Ip6::Header *)v74,  &NextHeader,  (BOOL *)&v73);
    if (v76) {
      break;
    }
    if ((v73 & 1) == 0 || NextHeader != 41)
    {
      if (((IsMulticastLargerThanRealmLocal & 1) != 0 || (v73 & 1) != 0) && (v77 & 1) == 0)
      {
        v53  = 1;
        if ((v73 & 1) == 0) {
          v53  = v72;
        }
        v76  = ot::Ip6::Ip6::PassToHost( a1,  v80,  v79,  (ot::Ip6::MessageInfo *)v75,  NextHeader,  (IsMulticastLargerThanRealmLocal ^ 1) & 1,  (v53 & 1) != 0);
        v52  = 1;
        if ((v73 & 1) == 0) {
          v52  = v72;
        }
        v70  = v52 & 1;
      }

      if ((v73 & 1) != 0)
      {
        v76  = ot::Ip6::Ip6::HandlePayload((uint64_t)a1, (uint64_t)v74, v80, (ot::Ip6::MessageInfo *)v75, NextHeader, v72);
        v70  = v72;
      }

      if (v72)
      {
        if (!v79)
        {
          unsigned __int16 v40 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
          if (!ot::Mle::Mle::IsRouterOrLeader(v40)) {
            break;
          }
          char v41 = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v74);
          ot::Ip6::Header::SetHopLimit((uint64_t)v74, v41 - 1);
        }

        char v42 = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v74);
        if (v43 | (v42 == 0)) {
          char v44 = 0;
        }
        else {
          char v44 = 1;
        }
        if ((v44 & 1) == 0)
        {
          v76  = 2;
          break;
        }

        v67  = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v74);
        ot::Message::Write<unsigned char>(v80, 7u, &v67);
        if (NextHeader == 58)
        {
          v65  = 0;
          v51  = v80;
          Offset  = ot::Message::GetOffset(v80);
          v76  = ot::Message::Read<unsigned char>(v51, Offset, (char *)&v66);
          if (v76) {
            break;
          }
          v64  = &sForwardICMPTypes;
          v63  = &sForwardICMPTypes;
          *(void *)&v62[1]  = &ot::Ip6::Headers::DecompressFrom(ot::Message const&,unsigned short,ot::Mac::Addresses const&)::kReadLength;
          while (v63 != *(_BYTE **)&v62[1])
          {
            HIBYTE(v62[0])  = *v63;
            if (v66 == HIBYTE(v62[0]))
            {
              v65  = 1;
              break;
            }

            ++v63;
          }

          if ((v65 & 1) == 0)
          {
            v76  = 2;
            break;
          }
        }

        if (v79 != 1 || NextHeader != 17) {
          goto LABEL_70;
        }
        uint64_t v50 = v80;
        __int16 v46 = ot::Message::GetOffset(v80);
        v76  = ot::Message::Read<unsigned short>(v50, v46 + 2, (char *)v62);
        if (v76) {
          break;
        }
        LOWORD(v62[0])  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)LOWORD(v62[0]));
        if (NextHeader == 17
          && (uint64_t v47 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1),
              !ot::Ip6::Udp::ShouldUsePlatformUdp(v47, v62[0])))
        {
          v76  = 2;
        }

        else
        {
LABEL_70:
          ot::Message::ClearRadioType(v80);
          v48  = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
          v76  = ot::MeshForwarder::SendMessage(v48, v80);
          if (!v76) {
            v70  = 0;
          }
        }
      }

      break;
    }

    v54  = v80;
    unsigned __int16 v38 = ot::Message::GetOffset(v80);
    ot::Message::RemoveHeader(v54, v38);
    uint64_t v39 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
    ot::MeshForwarder::LogMessage(v39, 0, v80, 0, 0LL);
  }

  if ((v70 & 1) != 0) {
    ot::Message::Free(v80);
  }
  return v76;
}

uint64_t ot::Ip6::Ip6::RemoveMplOption(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  uint64_t v20 = this;
  uint64_t v19 = a2;
  unsigned int v18 = 0;
  unsigned __int16 v12 = 0;
  unsigned __int8 Length = 0;
  char v10 = 0;
  ot::Message::Read<ot::Ip6::Header>(a2, 0, v17);
  IgnoreError();
  unsigned __int16 v14 = 40;
  if (!ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v17))
  {
    ot::Message::Read<ot::Ip6::HopByHopHeader>(v19, v14, v16);
    IgnoreError();
    unsigned __int16 v13 = v14 + ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v16);
    if (v13 <= (int)(unsigned __int16)ot::Message::GetLength(v19))
    {
      for (v14 += 2; v14 < (int)v13; v14 += ot::Ip6::Option::GetSize((ot::Ip6::Option *)v15))
      {
        ot::Ip6::Option::ParseFrom((ot::Ip6::Option *)v15, v19, v14, v13);
        IgnoreError();
        if (!ot::Ip6::Option::IsPadding((ot::Ip6::Option *)v15))
        {
          if (ot::Ip6::Option::GetType((ot::Ip6::Option *)v15) == 109)
          {
            if (v12) {
              return 6;
            }
            unsigned __int16 v12 = v14;
            unsigned __int8 Length = ot::Ip6::Option::GetLength((ot::Ip6::Option *)v15);
            if (Length > 4uLL) {
              return 6;
            }
            if (v12 != 42LL || ot::Ip6::ExtensionHeader::GetLength((ot::Ip6::ExtensionHeader *)v16))
            {
              if (v12 + 8 == v13) {
                char v10 = 1;
              }
            }

            else
            {
              char v10 = 1;
            }
          }

          else
          {
            char v10 = 0;
          }
        }
      }

      if (v14 == v13)
      {
        if ((v10 & 1) != 0)
        {
          ot::Message::RemoveHeader(v19, v13 - 8, 8u);
          if (v12 == 42LL)
          {
            NextHeader  = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v16);
            ot::Ip6::Header::SetNextHeader((uint64_t)v17, NextHeader);
          }

          else
          {
            char v3 = ot::Ip6::ExtensionHeader::GetLength((ot::Ip6::ExtensionHeader *)v16);
            ot::Ip6::ExtensionHeader::SetLength((uint64_t)v16, v3 - 1);
            ot::Message::Write<ot::Ip6::HopByHopHeader>(v19, 0x28u, v16);
          }

          Payloadunsigned __int8 Length = ot::Ip6::Header::GetPayloadLength((ot::Ip6::Header *)v17);
          ot::Ip6::Header::SetPayloadLength((ot::Ip6::Header *)v17, PayloadLength - 8);
          ot::Message::Write<ot::Ip6::Header>(v19, 0, v17);
        }

        else if (v12)
        {
          ot::Ip6::PadOption::InitForPadSize((ot::Ip6::PadOption *)v9, Length + 2);
          unsigned __int16 v8 = v19;
          unsigned __int16 v7 = v12;
          Size  = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v9);
          ot::Message::WriteBytes(v8, v7, v9, Size);
        }
      }

      else
      {
        return 6;
      }
    }

    else
    {
      return 6;
    }
  }

  return v18;
}

uint64_t ot::Message::Read<ot::Ip6::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x28u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip66HeaderEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Ip6::Option::IsPadding(ot::Ip6::Option *this)
{
  BOOL v2 = 1;
  if (*(_BYTE *)this) {
    return *(_BYTE *)this == 1;
  }
  return v2;
}

{
  return __ZNK2ot3Ip66Option9IsPaddingEv(this);
}

uint64_t ot::Ip6::Option::GetType(ot::Ip6::Option *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Ip66Option7GetTypeEv(this);
}

uint64_t ot::Ip6::Option::GetLength(ot::Ip6::Option *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot3Ip66Option9GetLengthEv(this);
}

uint64_t ot::Ip6::ExtensionHeader::GetNextHeader(ot::Ip6::ExtensionHeader *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Ip615ExtensionHeader13GetNextHeaderEv(this);
}

uint64_t ot::Message::Write<ot::Ip6::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0x28u);
}

{
  return __ZN2ot7Message5WriteINS_3Ip66HeaderEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Ip6::Ip6::EnqueueDatagram(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  return ot::Tasklet::Post((ot::Ip6::Ip6 *)((char *)this + 72));
}

uint64_t ot::Ip6::Ip6::SendDatagram( ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  __int16 v46 = this;
  uint64_t v45 = a2;
  char v44 = a3;
  unsigned __int8 v43 = a4;
  unsigned int v42 = 0;
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (v43 == 17
    && (v35  = (ot::Tmf::Agent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this),
        ot::Ip6::MessageInfo::GetSockAddr(v44),
        char v33 = v4,
        ot::Ip6::MessageInfo::GetPeerAddr(v44),
        v34  = v5,
        PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v44),
        (ot::Tmf::Agent::IsTmfMessage(v35, v33, v34, PeerPort) & 1) != 0))
  {
    char Priority = ot::Message::GetPriority(v45);
    unsigned __int8 v40 = ot::Tmf::Agent::PriorityToDscp(Priority);
  }

  else
  {
    unsigned __int8 v8 = ot::Message::GetPriority(v45);
    unsigned __int8 v40 = ot::Ip6::Ip6::PriorityToDscp(v8);
  }

  ot::Ip6::Header::InitVersionTrafficClassFlow((ot::Ip6::Header *)v41);
  ot::Ip6::Header::SetDscp((ot::Ip6::Header *)v41, v40);
  Ecn  = ot::Ip6::MessageInfo::GetEcn(v44);
  ot::Ip6::Header::SetEcn((uint64_t)v41, Ecn);
  ot::Ip6::Header::SetPayloadLength((ot::Ip6::Header *)v41, Length);
  ot::Ip6::Header::SetNextHeader((uint64_t)v41, v43);
  if (ot::Ip6::MessageInfo::GetHopLimit(v44)
    || (ot::Ip6::MessageInfo::ShouldAllowZeroHopLimit(v44) & 1) != 0)
  {
    HopLimit  = ot::Ip6::MessageInfo::GetHopLimit(v44);
    ot::Ip6::Header::SetHopLimit((uint64_t)v41, HopLimit);
  }

  else
  {
    ot::Ip6::Header::SetHopLimit((uint64_t)v41, 64);
  }

  ot::Ip6::MessageInfo::GetSockAddr(v44);
  if (ot::Ip6::Address::IsUnspecified(v11)
    || (ot::Ip6::MessageInfo::GetSockAddr(v44), ot::Ip6::Address::IsMulticast(v12)))
  {
    ot::Ip6::MessageInfo::GetPeerAddr(v44);
    unsigned __int16 v38 = (ot::Ip6::Address *)ot::Ip6::Ip6::SelectSourceAddress(this, v13);
    if (!v38) {
      return 20;
    }
    ot::Ip6::Header::SetSource((ot::Ip6::Header *)v41, (__n128 *)v38);
  }

  else
  {
    ot::Ip6::MessageInfo::GetSockAddr(v44);
    ot::Ip6::Header::SetSource((ot::Ip6::Header *)v41, v14);
  }

  ot::Ip6::MessageInfo::GetPeerAddr(v44);
  ot::Ip6::Header::SetDestination((ot::Ip6::Header *)v41, v15);
  ot::Ip6::MessageInfo::GetPeerAddr(v44);
  if (!ot::Ip6::Address::IsRealmLocalMulticast(v16)
    || (unsigned int v42 = ot::Ip6::Ip6::AddMplOption(this, v45, (ot::Ip6::Header *)v41)) == 0)
  {
    unsigned int v42 = ot::Message::Prepend<ot::Ip6::Header>(v45, v41);
    if (!v42)
    {
      v32  = v45;
      Source  = (ot::Message *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v41);
      Destination  = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v41);
      ot::Checksum::UpdateMessageChecksum(v32, Source, Destination, (const ot::Ip6::Address *)v43);
      ot::Ip6::MessageInfo::GetPeerAddr(v44);
      if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v18)) {
        goto LABEL_24;
      }
      uint64_t v30 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      uint64_t v19 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v41);
      if ((ot::ChildTable::HasSleepyChildWithAddress(v30, v19) & 1) != 0)
      {
        v37  = ot::Message::Clone(v45);
        if (v37)
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Ip6",  "Message copy for indirect transmission to sleepy children",  v20,  v21,  v22,  v23,  v24,  v25,  v28);
          ot::Ip6::Ip6::EnqueueDatagram(this, v37);
        }

        else
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "No enough buffer for message copy for indirect transmission to sleepy children",  v20,  v21,  v22,  v23,  v24,  v25,  v28);
        }
      }

      unsigned int v42 = ot::Ip6::Ip6::AddTunneledMplOption(this, v45, (ot::Ip6::Header *)v41);
      if (!v42)
      {
LABEL_24:
        uint64_t v29 = v45;
        MulticastLoop  = ot::Ip6::MessageInfo::GetMulticastLoop(v44);
        ot::Message::SetMulticastLoop(v29, MulticastLoop & 1);
        else {
          return ot::Ip6::Ip6::FragmentDatagram(this, v45);
        }
      }
    }
  }

  return v42;
}

uint64_t ot::Ip6::Header::SetDscp(ot::Ip6::Header *this, unsigned __int8 a2)
{
  __int16 v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 0xF03F | (a2 << 6) & 0xFC0u));
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot3Ip66Header7SetDscpEh(this, a2);
}

uint64_t ot::Ip6::Header::SetEcn(uint64_t result, char a2)
{
  *(_BYTE *)(result + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = *(_BYTE *)(result + 1) & 0xCF | (16 * a2) & 0x30;
  return result;
}

{
  return __ZN2ot3Ip66Header6SetEcnENS0_3EcnE(result, a2);
}

uint64_t ot::Ip6::MessageInfo::GetEcn(ot::Ip6::MessageInfo *this)
{
  return *((_BYTE *)this + 49) & 3;
}

{
  return __ZNK2ot3Ip611MessageInfo6GetEcnEv(this);
}

uint64_t ot::Ip6::MessageInfo::ShouldAllowZeroHopLimit(ot::Ip6::MessageInfo *this)
{
  return (*((unsigned __int8 *)this + 49) >> 3) & 1;
}

{
  return __ZNK2ot3Ip611MessageInfo23ShouldAllowZeroHopLimitEv(this);
}

__n128 ot::Ip6::Header::SetDestination(ot::Ip6::Header *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + 2ot::MeshCoP::Tlv::SetType(this, 4) = *a2;
  return result;
}

uint64_t ot::Message::SetMulticastLoop(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFBFFF | ((v3 & 1) << 14);
  return result;
}

{
  return __ZN2ot7Message16SetMulticastLoopEb(this, a2);
}

uint64_t ot::Ip6::Ip6::FragmentDatagram(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  return 0LL;
}

uint64_t ot::Ip6::Ip6::HandleOptions( ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3, char a4, BOOL *a5)
{
  uint64_t v19 = this;
  unsigned int v18 = a2;
  uint64_t v17 = a3;
  char v16 = a4 & 1;
  uint64_t v15 = a5;
  unsigned int v14 = 0;
  Offset  = ot::Message::GetOffset(a2);
  unsigned int v14 = ot::Message::Read<ot::Ip6::HopByHopHeader>(v18, Offset, v13);
  if (!v14)
  {
    unsigned __int16 v9 = Offset + ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v13);
    if (v9 <= (int)(unsigned __int16)ot::Message::GetLength(v18))
    {
      for (unsigned __int16 i = Offset + 2; i < (int)v9; i += ot::Ip6::Option::GetSize((ot::Ip6::Option *)v12))
      {
        unsigned int v14 = ot::Ip6::Option::ParseFrom((ot::Ip6::Option *)v12, v18, i, v9);
        if (v14) {
          return v14;
        }
        if (!ot::Ip6::Option::IsPadding((ot::Ip6::Option *)v12))
        {
          if (ot::Ip6::Option::GetType((ot::Ip6::Option *)v12) == 109)
          {
            unsigned __int16 v7 = v18;
            Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource(v17);
            unsigned int v14 = ot::Ip6::Mpl::ProcessOption((ot::Ip6::Ip6 *)((char *)this + 136), v7, i, Source, v16 & 1, v15);
            if (v14) {
              return v14;
            }
          }

          else if (ot::Ip6::Option::GetAction((ot::Ip6::Option *)v12))
          {
            return 2;
          }
        }
      }

      ot::Message::SetOffset(v18, i);
    }

    else
    {
      return 6;
    }
  }

  return v14;
}

uint64_t ot::Ip6::Option::GetAction(ot::Ip6::Option *this)
{
  return *(_BYTE *)this & 0xC0;
}

{
  return __ZNK2ot3Ip66Option9GetActionEv(this);
}

uint64_t ot::Ip6::Ip6::HandleFragment(uint64_t a1, ot::Message *a2, char a3, uint64_t a4)
{
  uint64_t v12 = a1;
  unsigned __int16 v11 = a2;
  char v10 = a3;
  uint64_t v9 = a4;
  unsigned int v8 = 0;
  Offset  = ot::Message::GetOffset(a2);
  unsigned int v8 = ot::Message::Read<ot::Ip6::FragmentHeader>(a2, Offset, v7);
  if (!v8)
  {
    if ((unsigned __int16)ot::Ip6::FragmentHeader::GetOffset((ot::Ip6::FragmentHeader *)v7)
      || ot::Ip6::FragmentHeader::IsMoreFlagSet((ot::Ip6::FragmentHeader *)v7))
    {
      return 2;
    }

    else
    {
      ot::Message::MoveOffset(v11, 8);
    }
  }

  return v8;
}

uint64_t ot::Message::Read<ot::Ip6::FragmentHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip614FragmentHeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::FragmentHeader::GetOffset(ot::Ip6::FragmentHeader *this)
{
  return (int)(ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0xFFF8) >> 3;
}

{
  return __ZNK2ot3Ip614FragmentHeader9GetOffsetEv(this);
}

BOOL ot::Ip6::FragmentHeader::IsMoreFlagSet(ot::Ip6::FragmentHeader *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 1) != 0;
}

{
  return __ZNK2ot3Ip614FragmentHeader13IsMoreFlagSetEv(this);
}

uint64_t ot::Ip6::Ip6::HandleExtensionHeaders( ot::InstanceLocator *a1, ot::Message *a2, unsigned __int8 a3, ot::Ip6::MessageInfo *a4, ot::Ip6::Header *a5, unsigned __int8 *a6, BOOL *a7)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unsigned __int8 v20 = a3;
  uint64_t v19 = a4;
  unsigned int v18 = a5;
  uint64_t v17 = a6;
  char v16 = a7;
  v15[4]  = 0;
  *(_DWORD *)uint64_t v15 = a3 != 0;
  while (1)
  {
    BOOL v12 = 1;
    if (!*v16) {
      BOOL v12 = *v17 == 0;
    }
    if (!v12) {
      break;
    }
    unsigned __int16 v11 = v21;
    Offset  = ot::Message::GetOffset(v21);
    *(_DWORD *)&v15[1]  = ot::Message::Read<ot::Ip6::ExtensionHeader>(v11, Offset, v14);
    if (*(_DWORD *)&v15[1]) {
      break;
    }
    int v10 = *v17;
    if (*v17)
    {
      switch(v10)
      {
        case ')':
          return *(unsigned int *)&v15[1];
        case '+':
LABEL_20:
          *(_DWORD *)&v15[1]  = 2;
          return *(unsigned int *)&v15[1];
        case ',':
          ot::Ip6::Ip6::PassToHost(a1, v21, v20, v19, *v17, 0, 1u);
          IgnoreError();
          *(_DWORD *)&v15[1]  = ot::Ip6::Ip6::HandleFragment((uint64_t)a1, v21, v20, (uint64_t)v19);
          if (*(_DWORD *)&v15[1]) {
            return *(unsigned int *)&v15[1];
          }
          break;
        case ';':
          goto LABEL_20;
        case '<':
          *(_DWORD *)&v15[1]  = ot::Ip6::Ip6::HandleOptions(a1, v21, v18, v15[0] & 1, v16);
          if (*(_DWORD *)&v15[1]) {
            return *(unsigned int *)&v15[1];
          }
          break;
        default:
          return *(unsigned int *)&v15[1];
      }
    }

    else
    {
      *(_DWORD *)&v15[1]  = ot::Ip6::Ip6::HandleOptions(a1, v21, v18, v15[0] & 1, v16);
      if (*(_DWORD *)&v15[1]) {
        return *(unsigned int *)&v15[1];
      }
    }

    NextHeader  = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v14);
    unsigned __int8 *v17 = NextHeader;
  }

  return *(unsigned int *)&v15[1];
}

uint64_t ot::Message::Read<ot::Ip6::ExtensionHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip615ExtensionHeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::Ip6::PassToHost( ot::InstanceLocator *a1, ot::Message *a2, unsigned __int8 a3, ot::Ip6::MessageInfo *a4, unsigned __int8 a5, char a6, unsigned __int8 a7)
{
  v97  = a1;
  v96  = a2;
  v95  = a3;
  v94  = a4;
  v93  = a5;
  v92  = a6 & 1;
  v91  = a7;
  v83  = a1;
  unsigned __int16 DestinationPort = 0;
  ShouldUsePlatformUdp  = 0;
  v88  = 0;
  v87  = 0;
  v86  = 0LL;
  if (!a7) {
    v86  = v96;
  }
  if (v95 == 1)
  {
    v87  = 4;
    goto LABEL_35;
  }

  if (!ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet((void *)v83 + 1))
  {
    v87  = 4;
    goto LABEL_35;
  }

  if ((unsigned __int16)ot::Message::GetLength(v96) > 0x500u)
  {
    v87  = 2;
    goto LABEL_35;
  }

  if ((*(_BYTE *)v83 & 1) != 0 && (v92 & 1) != 0)
  {
    v81  = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(v83);
    ot::Ip6::MessageInfo::GetSockAddr(v94);
    IsLocator  = 0;
    if (ot::Mle::Mle::IsMeshLocalAddress(v81, v7))
    {
      ot::Ip6::MessageInfo::GetSockAddr(v94);
      Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v8);
      IsLocator  = ot::Ip6::InterfaceIdentifier::IsLocator(Iid);
    }

    v85[8]  = IsLocator;
    if (IsLocator)
    {
      ot::Ip6::MessageInfo::GetSockAddr(v94);
      unsigned __int16 v11 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v10);
      if (!ot::Ip6::InterfaceIdentifier::IsAnycastServiceLocator(v11))
      {
        ot::Ip6::MessageInfo::GetSockAddr(v94);
        unsigned __int16 v13 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v12);
        if (!ot::Ip6::InterfaceIdentifier::IsRoutingLocator(v13))
        {
          v87  = 4;
          goto LABEL_35;
        }
      }
    }

    v80  = v93;
    if (v93 == 17)
    {
      v74  = v96;
      Offset  = ot::Message::GetOffset(v96);
      v76  = v84;
      ot::Message::Read<ot::Ip6::Udp::Header>(v96, Offset, v84);
      IgnoreError();
      unsigned __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      v75  = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83);
      unsigned __int16 v23 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      ShouldUsePlatformUdp  = ot::Ip6::Udp::ShouldUsePlatformUdp(v75, v23);
      v77  = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83);
      __int16 v24 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      v88  = ot::Ip6::Udp::IsPortInUse(v77, v24) & 1;
      v73  = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83);
      unsigned __int16 v25 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      if (!ot::Ip6::Udp::ShouldUsePlatformUdp(v73, v25)
        || (v72  = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83),
            __int16 v26 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84),
            (ot::Ip6::Udp::IsPortInUse(v72, v26) & 1) != 0))
      {
        v87  = 4;
        goto LABEL_35;
      }
    }

    else if (v80 == 58 {
           && (ot::Ip6::Icmp::ShouldHandleEchoRequest((ot::InstanceLocator *)((char *)v83 + 88), v94) & 1) != 0)
    }
    {
      v78  = v96;
      unsigned __int16 v14 = ot::Message::GetOffset(v96);
      v79  = v85;
      ot::Message::Read<ot::Ip6::Icmp::Header>(v96, v14, v85);
      IgnoreError();
      if (ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v85) == 128)
      {
        char Type = ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v85);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "PassToHost drop ICMP as header type is not EchoRequest:%d",  v16,  v17,  v18,  v19,  v20,  v21,  Type);
      }

      if (ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v85) == 128)
      {
        v87  = 2;
        goto LABEL_35;
      }
    }
  }

  v71  = v91;
  if (v91 && v71 == 1 && (v86  = ot::Message::Clone(v96)) == 0LL)
  {
    char Length = ot::Message::GetLength(v96);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "No buff to clone msg (len: %d) to pass to host",  v28,  v29,  v30,  v31,  v32,  v33,  Length);
    v87  = 3;
  }

  else
  {
    v70  = &v86;
    ot::Ip6::Ip6::RemoveMplOption(v83, v86);
    IgnoreError();
    ot::Callback<void (*)(otMessage *,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Message *&>( (uint64_t)v83 + 8,  &v86);
    v86  = 0LL;
  }

uint64_t ot::Ip6::Ip6::HandlePayload( uint64_t a1, uint64_t a2, ot::Message *a3, ot::Ip6::MessageInfo *a4, char a5, char a6)
{
  unsigned int v24 = 0;
  if (a6) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = a3;
  }
  unsigned __int16 v23 = v21;
  if (a5 == 17 || a5 == 58)
  {
    if (a6 == 1) {
      unsigned __int16 v23 = ot::Message::Clone(a3);
    }
    if (v23)
    {
      if (a5 == 17)
      {
        unsigned int v24 = ot::Ip6::Udp::HandleMessage((ot::Ip6::Udp *)(a1 + 104), v23, a4);
        if (v24 == 2) {
          ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Ip6", "Error UDP Checksum", v6, v7, v8, v9, v10, v11, v20);
        }
      }

      else if (a5 == 58)
      {
        unsigned int v24 = ot::Ip6::Icmp::HandleMessage((ot::Ip6::Icmp *)(a1 + 88), v23, a4);
      }
    }

    else
    {
      unsigned int v24 = 3;
    }
  }

  if (v24)
  {
    char v12 = ot::ErrorToString(v24);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"Ip6",  "Failed to handle payload: %s",  v13,  v14,  v15,  v16,  v17,  v18,  v12);
  }

  if (v23) {
    ot::Message::Free(v23);
  }
  return v24;
}

BOOL ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvP9otMessagePvEE5IsSetEv(a1);
}

uint64_t ot::Message::Read<ot::Ip6::Udp::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip63Udp6HeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::Udp::Header::GetDestinationPort(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Ip63Udp6Header18GetDestinationPortEv(this);
}

uint64_t ot::Callback<void (*)(otMessage *,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Message *&>( uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvP9otMessagePvELNS_23CallbackContextPositionE1EE6InvokeIJRPNS_7MessageEEEEvDpOT_(a1, a2);
}

uint64_t ot::Ip6::Ip6::SendRaw(ot::Ip6::Ip6 *this, ot::Message *a2, char a3)
{
  uint64_t v13 = this;
  char v12 = a2;
  char v11 = a3 & 1;
  inserted  = 0;
  char v8 = 0;
  inserted  = ot::Ip6::Header::ParseFrom((ot::Ip6::Header *)v9, a2);
  if (!inserted)
  {
    Source  = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v9);
    if (ot::Ip6::Address::IsMulticast(Source))
    {
      inserted  = 20;
    }

    else
    {
      Destination  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v9);
      if (!ot::Ip6::Address::IsMulticast(Destination)
        || (inserted  = ot::Ip6::Ip6::InsertMplOption(this, v12, (ot::Ip6::Header *)v9)) == 0)
      {
        if ((v11 & 1) != 0) {
          unsigned __int8 v5 = 2;
        }
        else {
          unsigned __int8 v5 = 1;
        }
        inserted  = ot::Ip6::Ip6::HandleDatagram(this, v12, v5, 0LL, 0);
        char v8 = 1;
      }
    }
  }

  if ((v8 & 1) == 0) {
    ot::Message::Free(v12);
  }
  return inserted;
}

uint64_t ot::Ip6::Ip6::extractAddressAndportfromHeader(ot::Ip6::Ip6 *this, ot::Message *a2, char *a3)
{
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  memcpy(__dst, a2, sizeof(__dst));
  return ot::MeshForwarder::GetAddressAndPortInfo(v4, (ot::Message *)__dst, a3, 0);
}

uint64_t ot::Ip6::MessageInfo::SetEcn(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4ot::MeshCoP::Tlv::SetType(this, 9) = *(_BYTE *)(result + 49) & 0xFC | a2 & 3;
  return result;
}

{
  return __ZN2ot3Ip611MessageInfo6SetEcnENS0_3EcnE(result, a2);
}

uint64_t ot::Ip6::Header::GetEcn(ot::Ip6::Header *this)
{
  return (*((_BYTE *)this + 1) & 0x30) >> 4;
}

{
  return __ZNK2ot3Ip66Header6GetEcnEv(this);
}

uint64_t ot::Ip6::MessageInfo::SetLinkInfo(uint64_t this, const void *a2)
{
  *(void *)(this + 40)  = a2;
  return this;
}

{
  return __ZN2ot3Ip611MessageInfo11SetLinkInfoEPKv(this, a2);
}

uint64_t ot::Message::GetMulticastLoop(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 14) & 1;
}

{
  return __ZNK2ot7Message16GetMulticastLoopEv(this);
}

uint64_t ot::Ip6::Ip6::IsOnLink(ot::Ip6::Ip6 *this, const ot::Ip6::Address *a2)
{
  uint64_t v13 = this;
  char v12 = a2;
  char v11 = 0;
  __int16 v2 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  if ((ot::NetworkData::LeaderBase::IsOnMesh(v2, v12) & 1) != 0)
  {
    char v11 = 1;
  }

  else
  {
    char v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::GetUnicastAddresses(v3);
    v10[1]  = v4;
    v10[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v4);
    uint64_t v9 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
    while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v10,  &v9))
    {
      char v8 = (unsigned __int8 *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v10);
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)v8);
      if (v8[16] <= (int)ot::Ip6::Address::PrefixMatch(v5, v12))
      {
        char v11 = 1;
        return v11 & 1;
      }

      ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v10);
    }
  }

  return v11 & 1;
}

uint64_t ot::Ip6::Ip6::RouteLookup( ot::Ip6::Ip6 *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  char v3 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  unsigned int v16 = ot::NetworkData::LeaderBase::RouteLookup(v3, v18, v17, &v15);
  if (v16)
  {
    ot::Ip6::Address::ToString(v17, (ot::StringWriter *)v20);
    char v5 = ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"Ip6",  "Failed to find valid route for: %s",  v6,  v7,  v8,  v9,  v10,  v11,  v5);
  }

  else
  {
    int v13 = v15;
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  }

  return v16;
}

uint64_t ot::Message::Write<unsigned char>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 1u);
}

{
  return __ZN2ot7Message5WriteIhEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Message::ClearRadioType(ot::Message *this)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68) &= ~0x40000u;
  return result;
}

{
  return __ZN2ot7Message14ClearRadioTypeEv(this);
}

uint64_t ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Ip6 *this, ot::Ip6::MessageInfo *a2)
{
  unsigned int v6 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2);
  char v5 = (ot::Ip6::Address *)ot::Ip6::Ip6::SelectSourceAddress(this, v2);
  if (v5) {
    ot::Ip6::MessageInfo::SetSockAddr((__n128 *)a2, (__n128 *)v5);
  }
  else {
    return 23;
  }
  return v6;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end()
{
  return v1;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorIKNS_3Ip65Netif14UnicastAddressENS_10LinkedListIS3_E13ConstIteratorEEneERKS7_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorIKNS_3Ip65Netif14UnicastAddressENS_10LinkedListIS3_E13ConstIteratorEEdeEv(a1);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++( uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorIKNS_3Ip65Netif14UnicastAddressENS_10LinkedListIS3_E13ConstIteratorEEppEv(a1);
}

uint64_t ot::Ip6::Ip6::IpProtoToString( ot::Ip6::Ip6 *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::Stringify::Lookup<(unsigned short)9>( this,  ot::Ip6::Ip6::IpProtoToString(unsigned char)::kIpProtoTable,  (uint64_t)"Unknown",  a4,  a5,  a6);
}

uint64_t ot::Stringify::Lookup<(unsigned short)9>( __int16 a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  __int16 v10 = a1;
  uint64_t v8 = ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)9>( (ot::BinarySearch *)&v10,  a2,  a3,  a4,  a5,  a6);
  if (v8) {
    return *((void *)v8 + 1);
  }
  else {
    return a3;
  }
}

{
  return __ZN2ot9Stringify6LookupILt9EEEPKctRAT__KNS0_5EntryES3_(a1, a2, a3, a4, a5, a6);
}

char *ot::Ip6::Ip6::EcnToString(unsigned __int8 a1)
{
  return ot::Ip6::Ip6::EcnToString(ot::Ip6::Ecn)::kEcnStrings[a1];
}

uint64_t ot::Ip6::Headers::ParseFrom(ot::Ip6::Headers *this, const ot::Message *a2)
{
  unsigned int v5 = 6;
  ot::Clearable<ot::Ip6::Headers>::Clear(this);
  NextHeader  = ot::Ip6::Header::GetNextHeader(this);
  if (NextHeader == 6)
  {
    goto LABEL_7;
  }

  if (NextHeader == 17)
  {
LABEL_7:
    ot::Ip6::Headers::ParseMatterFrom(this, a2);
    return 0;
  }

  return v5;
}

void *ot::Clearable<ot::Ip6::Headers>::Clear(void *a1)
{
  return memset(a1, 0, 0x46uLL);
}

{
  return __ZN2ot9ClearableINS_3Ip67HeadersEE5ClearEv(a1);
}

void ot::Ip6::Headers::ParseMatterFrom(ot::Ip6::Headers *this, const ot::Message *a2)
{
  int v12 = 0;
  if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort(this) == 5540
    || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort(this) == 5540)
  {
    if (ot::Ip6::Headers::IsUdp(this))
    {
      int v12 = ot::Message::Read<ot::Ip6::Matter::Header>(a2, 0x30u, (char *)this + 62);
    }

    else if (ot::Ip6::Headers::IsTcp(this))
    {
      int v12 = ot::Message::Read<unsigned short>(a2, 0x3Cu, (char *)this + 60);
      if (!v12) {
        int v12 = ot::Message::Read<ot::Ip6::Matter::Header>(a2, 0x3Eu, (char *)this + 62);
      }
    }
  }

  if (v12)
  {
    char Checksum = ot::Ip6::Headers::GetChecksum(this);
    SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(this);
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v15);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
    DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(this);
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v14);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v14);
    ot::ErrorToString(v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "Matter header can not be parsed (MsgType:kTypeIp6), chksum=%04x, src=[%s], dst=[%s], error=%s",  v4,  v5,  v6,  v7,  v8,  v9,  Checksum);
  }

uint64_t ot::Message::Read<ot::Ip6::Tcp::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x14u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip63Tcp6HeaderEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::Headers::GetSourcePort(ot::Ip6::Headers *this)
{
  unsigned __int16 v4 = 0;
  int IpProto = ot::Ip6::Headers::GetIpProto(this);
  if (IpProto == 6)
  {
    return (unsigned __int16)ot::Ip6::Tcp::Header::GetSourcePort((ot::Ip6::Headers *)((char *)this + 40));
  }

  else if (IpProto == 17)
  {
    return (unsigned __int16)ot::Ip6::Udp::Header::GetSourcePort((ot::Ip6::Headers *)((char *)this + 40));
  }

  return v4;
}

uint64_t ot::Ip6::Headers::GetDestinationPort(ot::Ip6::Headers *this)
{
  unsigned __int16 v4 = 0;
  int IpProto = ot::Ip6::Headers::GetIpProto(this);
  if (IpProto == 6)
  {
    return (unsigned __int16)ot::Ip6::Tcp::Header::GetDestinationPort((ot::Ip6::Headers *)((char *)this + 40));
  }

  else if (IpProto == 17)
  {
    return (unsigned __int16)ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Headers *)((char *)this + 40));
  }

  return v4;
}

uint64_t ot::Message::Read<ot::Ip6::Matter::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip66Matter6HeaderEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Ip6::Headers::IsTcp(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 6;
}

{
  return __ZNK2ot3Ip67Headers5IsTcpEv(this);
}

uint64_t ot::Ip6::Headers::GetChecksum(ot::Ip6::Headers *this)
{
  unsigned __int16 v4 = 0;
  int IpProto = ot::Ip6::Headers::GetIpProto(this);
  switch(IpProto)
  {
    case 6:
      return (unsigned __int16)ot::Ip6::Tcp::Header::GetChecksum((ot::Ip6::Headers *)((char *)this + 40));
    case 17:
      return (unsigned __int16)ot::Ip6::Udp::Header::GetChecksum((ot::Ip6::Headers *)((char *)this + 40));
    case 58:
      return (unsigned __int16)ot::Ip6::Icmp::Header::GetChecksum((ot::Ip6::Headers *)((char *)this + 40));
  }

  return v4;
}

void ot::Ip6::Headers::ParseMatterFrom(ot::Ip6::Headers *this, ot::FrameData *a2)
{
  int v12 = 0;
  if (((unsigned __int16)ot::Ip6::Headers::GetSourcePort(this) == 5540
     || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort(this) == 5540)
    && (ot::Ip6::Headers::IsUdp(this)
     || ot::Ip6::Headers::IsTcp(this) && (int v12 = ot::FrameData::Read<unsigned short>(a2, (char *)this + 60)) == 0))
  {
    int v12 = ot::FrameData::Read<ot::Ip6::Matter::Header>(a2, (char *)this + 62);
  }

  if (v12)
  {
    char Checksum = ot::Ip6::Headers::GetChecksum(this);
    SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(this);
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v15);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
    DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(this);
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v14);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v14);
    ot::ErrorToString(v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Ip6",  "Matter header can not be parsed (MsgType:kType6lowpan), chksum=%04x, src=[%s], dst=[%s], error=%s",  v4,  v5,  v6,  v7,  v8,  v9,  Checksum);
  }

uint64_t ot::FrameData::Read<ot::Ip6::Matter::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return __ZN2ot9FrameData4ReadINS_3Ip66Matter6HeaderEEE7otErrorRT_(a1, a2);
}

uint64_t ot::FrameData::Read<unsigned short>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 2u);
}

{
  return __ZN2ot9FrameData4ReadItEE7otErrorRT_(a1, a2);
}

uint64_t ot::Ip6::Headers::DecompressFrom( ot::Ip6::Headers *this, const ot::Message *a2, unsigned __int16 a3, const ot::Mac::Addresses *a4)
{
  int v13 = this;
  int v12 = a2;
  unsigned __int16 v11 = a3;
  __int16 v10 = a4;
  __int16 Bytes = ot::Message::ReadBytes(a2, a3, v14, 0x4Bu);
  ot::Data<(ot::DataLengthType)1>::Init((uint64_t)v8, (uint64_t)v14, Bytes);
  uint64_t v6 = v10;
  Instance  = (ot::Instance *)ot::Message::GetInstance(v12);
  return ot::Ip6::Headers::DecompressFrom(this, (const ot::FrameData *)v8, v6, Instance);
}

uint64_t ot::Ip6::Headers::DecompressFrom( ot::Ip6::Headers *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3, ot::Instance *a4)
{
  uint64_t v17 = this;
  unsigned int v16 = a2;
  unsigned __int16 v15 = a3;
  uint64_t v14 = a4;
  unsigned int v13 = 0;
  __int128 v12 = *(_OWORD *)a2;
  if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v11, (ot::FrameData *)&v12)
    && (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v11))
  {
    return 23;
  }

  uint64_t v5 = (ot::Lowpan::Lowpan *)ot::Instance::Get<ot::Lowpan::Lowpan>((uint64_t)v14);
  unsigned int v13 = ot::Lowpan::Lowpan::DecompressBaseHeader(v5, this, &v10, v15, (ot::FrameData *)&v12);
  if (v13) {
    return v13;
  }
  NextHeader  = ot::Ip6::Header::GetNextHeader(this);
  switch(NextHeader)
  {
    case 6:
      unsigned int v13 = ot::FrameData::Read<ot::Ip6::Tcp::Header>((ot::FrameData *)&v12, (char *)this + 40);
      if (v13) {
        return v13;
      }
      goto LABEL_17;
    case 17:
      if (v10)
      {
        uint64_t v6 = (ot::Lowpan::Lowpan *)ot::Instance::Get<ot::Lowpan::Lowpan>((uint64_t)v14);
        unsigned int v13 = ot::Lowpan::Lowpan::DecompressUdpHeader( v6,  (ot::Ip6::Headers *)((char *)this + 40),  (ot::FrameData *)&v12);
        if (v13) {
          return v13;
        }
      }

      else
      {
        unsigned int v13 = ot::FrameData::Read<ot::Ip6::Udp::Header>((ot::FrameData *)&v12, (char *)this + 40);
        if (v13) {
          return v13;
        }
      }

uint64_t ot::Lowpan::FragmentHeader::GetDatagramOffset(ot::Lowpan::FragmentHeader *this)
{
  return *((unsigned __int16 *)this + 2);
}

{
  return __ZNK2ot6Lowpan14FragmentHeader17GetDatagramOffsetEv(this);
}

BOOL ot::Lowpan::Lowpan::IsLowpanHc(uint64_t a1)
{
  __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(a1);
  if (v2 | (Length == 0)) {
    char v3 = 1;
  }
  else {
    char v3 = 0;
  }
  BOOL v7 = 0;
  if ((v3 & 1) == 0)
  {
    __int16 Bytes = (ot::Lowpan::Lowpan *)ot::Data<(ot::DataLengthType)1>::GetBytes(a1);
    return ot::Lowpan::Lowpan::IsLowpanHc(Bytes, v5);
  }

  return v7;
}

uint64_t ot::Instance::Get<ot::Lowpan::Lowpan>(uint64_t a1)
{
  return a1 + 88200;
}

{
  return __ZN2ot8Instance3GetINS_6Lowpan6LowpanEEERT_v(a1);
}

uint64_t ot::FrameData::Read<ot::Ip6::Udp::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return __ZN2ot9FrameData4ReadINS_3Ip63Udp6HeaderEEE7otErrorRT_(a1, a2);
}

uint64_t ot::FrameData::Read<ot::Ip6::Tcp::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 0x14u);
}

{
  return __ZN2ot9FrameData4ReadINS_3Ip63Tcp6HeaderEEE7otErrorRT_(a1, a2);
}

uint64_t ot::FrameData::Read<ot::Ip6::Icmp::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return __ZN2ot9FrameData4ReadINS_3Ip64Icmp6HeaderEEE7otErrorRT_(a1, a2);
}

uint64_t ot::Ip6::Udp::Header::GetSourcePort(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return __ZNK2ot3Ip63Udp6Header13GetSourcePortEv(this);
}

uint64_t ot::Ip6::Tcp::Header::GetSourcePort(ot::Ip6::Tcp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return __ZNK2ot3Ip63Tcp6Header13GetSourcePortEv(this);
}

uint64_t ot::Ip6::Tcp::Header::GetDestinationPort(ot::Ip6::Tcp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Ip63Tcp6Header18GetDestinationPortEv(this);
}

uint64_t ot::Ip6::Udp::Header::GetChecksum(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return __ZNK2ot3Ip63Udp6Header11GetChecksumEv(this);
}

uint64_t ot::Ip6::Tcp::Header::GetChecksum(ot::Ip6::Tcp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 8));
}

{
  return __ZNK2ot3Ip63Tcp6Header11GetChecksumEv(this);
}

uint64_t ot::Ip6::Icmp::Header::GetChecksum(ot::Ip6::Icmp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Ip64Icmp6Header11GetChecksumEv(this);
}

double ot::Clearable<ot::PriorityQueue>::Clear(_OWORD *a1)
{
  double result = 0.0;
  *a1  = 0u;
  a1[1]  = 0u;
  return result;
}

{
  return __ZN2ot9ClearableINS_13PriorityQueueEE5ClearEv(a1);
}

uint64_t ot::Ip6::Header::SetVerionTrafficClassFlow(ot::Ip6::Header *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)this  = result;
  return result;
}

{
  return __ZN2ot3Ip66Header25SetVerionTrafficClassFlowEj(this, a2);
}

BOOL ot::Lowpan::Lowpan::IsLowpanHc(ot::Lowpan::Lowpan *this, const unsigned __int8 *a2)
{
  return (*(_BYTE *)this & 0xE0) == 96;
}

{
  return __ZN2ot6Lowpan6Lowpan10IsLowpanHcEPKh(this, a2);
}

uint64_t ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
  return ((uint64_t (*)(uint64_t))ot::Ip6::Ip6::HandleSendQueue)(v2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE13ConstIterator7AdvanceEv(a1);
}

char *ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)9>( ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find( a1,  a2,  (const void *)9,  0x10u,  (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<unsigned short,ot::Stringify::Entry>,  a6);
}

{
  return __ZN2ot12BinarySearch4FindItNS_9Stringify5EntryELt9EEEPKT0_RKT_RAT1__S5_(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Ip6::NetworkPrefix::GenerateRandomUla(ot::Ip6::NetworkPrefix *this)
{
  *(_BYTE *)this  = -3;
  return ot::Random::Crypto::FillBuffer((ot::Ip6::NetworkPrefix *)((char *)this + 1), (unsigned __int8 *)7);
}

void *ot::Ip6::Prefix::Set(ot::Ip6::Prefix *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned __int8 v3 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
  uint64_t result = memcpy(this, a2, v3);
  *((_BYTE *)this + ot::Tlv::SetLength((uint64_t)this, 16) = a3;
  return result;
}

uint64_t ot::Ip6::Prefix::SizeForLength(ot::Ip6::Prefix *this)
{
  return ((this + 7) / 8);
}

{
  return __ZN2ot3Ip66Prefix13SizeForLengthEh(this);
}

BOOL ot::Ip6::Prefix::IsLinkLocal(ot::Ip6::Prefix *this)
{
  BOOL v4 = 0;
  if (*((unsigned __int8 *)this + 16) >= 0xAu)
  {
    __int16 v2 = *(_WORD *)this;
    int v3 = (unsigned __int16)(v2 & ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFFC0));
    return v3 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
  }

  return v4;
}

BOOL ot::Ip6::Prefix::IsMulticast(ot::Ip6::Prefix *this)
{
  BOOL v2 = 0;
  return v2;
}

BOOL ot::Ip6::Prefix::IsUniqueLocal(ot::Ip6::Prefix *this)
{
  BOOL v2 = 0;
  return v2;
}

BOOL ot::Ip6::Prefix::IsEqual(ot::Ip6::Prefix *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v8 = 0;
  if (*((unsigned __int8 *)this + 16) == a3)
  {
    ot::Ip6::Prefix::GetBytes(this);
    uint64_t v6 = v3;
    BytesSize  = ot::Ip6::Prefix::GetBytesSize(this);
    return *((unsigned __int8 *)this + 16) <= (int)ot::Ip6::Prefix::MatchLength( v6,  a2,  (const unsigned __int8 *)BytesSize);
  }

  return v8;
}

uint64_t ot::Ip6::Prefix::MatchLength( ot::Ip6::Prefix *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  unsigned __int8 v6 = 0;
  for (unsigned __int8 i = 0; i < (int)a3; ++i)
  {
    char v4 = *((_BYTE *)this + i) ^ a2[i];
    if (v4)
    {
      while (v4 >= 0)
      {
        ++v6;
        v4 *= 2;
      }

      return v6;
    }

    v6 += 8;
  }

  return v6;
}

uint64_t ot::Ip6::Prefix::GetBytesSize(ot::Ip6::Prefix *this)
{
  return ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 16));
}

{
  return __ZNK2ot3Ip66Prefix12GetBytesSizeEv(this);
}

BOOL ot::Ip6::Prefix::ContainsPrefix(ot::Ip6::Prefix *this, const ot::Ip6::Prefix *a2)
{
  BOOL v9 = 0;
  if (*((unsigned __int8 *)this + 16) >= (int)*((unsigned __int8 *)a2 + 16))
  {
    ot::Ip6::Prefix::GetBytes(this);
    BOOL v7 = v2;
    ot::Ip6::Prefix::GetBytes(a2);
    unsigned __int8 v6 = v3;
    BytesSize  = ot::Ip6::Prefix::GetBytesSize(a2);
    matched  = ot::Ip6::Prefix::MatchLength(v7, v6, (const unsigned __int8 *)BytesSize);
    return matched >= ot::Ip6::Prefix::GetLength(a2);
  }

  return v9;
}

BOOL ot::Ip6::Prefix::ContainsPrefix(unsigned __int8 *a1, const unsigned __int8 *a2)
{
  BOOL v4 = 0;
  if (a1[16] >= 0x40u)
  {
    ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)a1);
    return ot::Ip6::Prefix::MatchLength(v2, a2, (const unsigned __int8 *)8) >= 0x40u;
  }

  return v4;
}

uint64_t ot::Ip6::Prefix::Tidy(ot::Ip6::Prefix *this)
{
  BytesSize  = ot::Ip6::Prefix::GetBytesSize(this);
  if (BytesSize) {
    *((_BYTE *)this + BytesSize - 1) &= ~((1 << (8 * BytesSize - *((_BYTE *)this + 16))) - 1);
  }
  for (unsigned __int16 i = BytesSize; ; ++i)
  {
    uint64_t result = ot::GetArrayLength<unsigned char,(unsigned short)16>();
    *((_BYTE *)this + i)  = 0;
  }

  return result;
}

uint64_t ot::GetArrayLength<unsigned char,(unsigned short)16>()
{
  return 16LL;
}

{
  return __ZN2ot14GetArrayLengthIhLt16EEEtRAT0__KT_();
}

BOOL ot::Ip6::Prefix::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v10 = 0;
  if (a1[16] == a2[16])
  {
    ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)a1);
    BOOL v7 = v2;
    ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)a2);
    unsigned __int8 v6 = v3;
    BytesSize  = ot::Ip6::Prefix::GetBytesSize((ot::Ip6::Prefix *)a1);
    matched  = ot::Ip6::Prefix::MatchLength(v7, v6, (const unsigned __int8 *)BytesSize);
    return matched >= ot::Ip6::Prefix::GetLength((ot::Ip6::Prefix *)a1);
  }

  return v10;
}

BOOL ot::Ip6::Prefix::operator<(ot::Ip6::Prefix *a1, ot::Ip6::Prefix *a2)
{
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a1);
  unsigned __int8 v2 = ot::Ip6::Prefix::GetLength(a2);
  unsigned __int8 v16 = ot::Min<unsigned char>(Length, v2);
  ot::Ip6::Prefix::GetBytes(a1);
  uint64_t v14 = v3;
  ot::Ip6::Prefix::GetBytes(a2);
  unsigned int v13 = v4;
  unsigned __int8 v5 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)v16);
  matched  = ot::Ip6::Prefix::MatchLength(v14, v13, (const unsigned __int8 *)v5);
  if (matched < (int)v16)
  {
    ot::Ip6::Prefix::GetBytes(a1);
    int v9 = *(unsigned __int8 *)(v6 + matched / 8);
    ot::Ip6::Prefix::GetBytes(a2);
    return v9 < *(unsigned __int8 *)(v7 + matched / 8);
  }

  else
  {
    int v10 = ot::Ip6::Prefix::GetLength(a1);
    return v10 < ot::Ip6::Prefix::GetLength(a2);
  }

BOOL ot::Ip6::Prefix::IsValidNat64PrefixLength(ot::Ip6::Prefix *this)
{
  BOOL v2 = 1;
  if (this != 32)
  {
    BOOL v2 = 1;
    if (this != 40)
    {
      BOOL v2 = 1;
      if (this != 48)
      {
        BOOL v2 = 1;
        if (this != 56)
        {
          BOOL v2 = 1;
        }
      }
    }
  }

  return v2;
}

uint64_t ot::Ip6::Prefix::FromString(const char **this, ot *a2)
{
  int v10 = this;
  int v9 = a2;
  char v8 = 47;
  char v7 = 0;
  unsigned int v6 = 6;
  if (a2)
  {
    unsigned __int8 v5 = ot::StringFind(v9, (const char *)0x2F);
    if (v5)
    {
      ot::AsCoreType<otIp6Address>((uint64_t)this);
      if (!ot::Ip6::Address::ParseFrom(v2, (const char *)v9, 47))
      {
        unsigned __int8 v5 = (ot *)((char *)v5 + 1);
      }
    }
  }

  return v6;
}

uint64_t ot::Ip6::Address::ParseFrom(ot::Ip6::Address *this, const char *a2, char a3)
{
  unsigned int v24 = this;
  unsigned __int16 v23 = a2;
  char v22 = a3;
  char v21 = -1;
  char v20 = 58;
  char v19 = 46;
  unsigned int v18 = 6;
  unsigned __int8 v17 = 0;
  unsigned __int8 v16 = 8;
  unsigned __int8 v15 = -1;
  char v14 = 0;
  if (*a2 == 58)
  {
    if (*++v23 != 58) {
      return v18;
    }
    ++v23;
    unsigned __int8 v15 = v17;
  }

  while (2)
  {
    if (*v23 == v22) {
      goto LABEL_30;
    }
    unsigned int v13 = v23;
    unsigned int v12 = 0;
    while (1)
    {
      char v11 = *v23;
      if (v11 < 65 || v11 > 70) {
        break;
      }
      unsigned __int8 v10 = v11 - 55;
LABEL_16:
      ++v23;
      unsigned int v12 = v10 + 16 * v12;
      if (v12 >= 0x10000) {
        return v18;
      }
    }

    if (v11 >= 97 && v11 <= 102)
    {
      unsigned __int8 v10 = v11 - 87;
      goto LABEL_16;
    }

    if (v11 >= 48 && v11 <= 57)
    {
      unsigned __int8 v10 = v11 - 48;
      goto LABEL_16;
    }

    if (v23 == v13) {
      return v18;
    }
    if (*v23 != 46)
    {
      __int16 v3 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(unsigned __int16)v12);
      uint64_t v4 = v17++;
      *((_WORD *)this + vot::MeshCoP::Tlv::SetType(this, 4) = v3;
      if (*v23 == 58 && *++v23 == 58)
      {
        if (v15 == 255)
        {
          unsigned __int8 v15 = v17;
          ++v23;
          continue;
        }

        return v18;
      }

      continue;
    }

    break;
  }

  unsigned __int16 v23 = v13;
  char v14 = 1;
  v16 -= 2;
  if (v17 <= (int)v16)
  {
LABEL_30:
    if (v15 != 255)
    {
      v9[4]  = v17 - v15;
      memmove( (char *)this + 2 * (v16 - (v17 - v15)),  (char *)this + 2 * v15,  2LL * (v17 - v15));
      bzero((char *)this + 2 * v15, 2LL * (v16 - v17));
LABEL_33:
      if ((v14 & 1) != 0)
      {
        unsigned int v18 = ot::Ip4::Address::FromString((ot::Ip4::Address *)v9, v23, (unsigned __int8 *)v22);
        if (!v18)
        {
          Array  = ot::GetArrayEnd<unsigned char,(unsigned short)16>((uint64_t)this);
          ot::Ip4::Address::GetBytes((ot::Ip4::Address *)v9);
          *(_DWORD *)(Array - ot::MeshCoP::Tlv::SetType(this, 4) = *v5;
          return 0;
        }
      }

      else
      {
        return 0;
      }
    }
  }

  return v18;
}

ot::StringWriter *ot::Ip6::Prefix::ToString@<X0>(ot::Ip6::Prefix *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip6::Prefix::ToString(this, a2);
}

ot::StringWriter *ot::Ip6::Prefix::ToString(ot::Ip6::Prefix *this, ot::StringWriter *a2)
{
  int v9 = this;
  char v8 = a2;
  unsigned __int8 v7 = ((unint64_t)ot::Ip6::Prefix::GetBytesSize(this) + 1) / 2;
  __int128 v5 = *(_OWORD *)this;
  char v6 = *((_BYTE *)this + 16);
  ot::Ip6::Prefix::Tidy((ot::Ip6::Prefix *)&v5);
  ot::AsCoreType<otIp6Address>((uint64_t)&v5);
  ot::Ip6::Address::AppendHexWords(v2, v8, v7);
  return ot::StringWriter::Append(v8, "/%d", *((unsigned __int8 *)this + 16));
}

ot::StringWriter *ot::Ip6::Prefix::ToString(ot::Ip6::Prefix *this, char *a2, __int16 a3)
{
  char v8 = this;
  unsigned __int8 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip6::Prefix::ToString(this, (ot::StringWriter *)v5);
}

ot::StringWriter *ot::Ip6::Address::AppendHexWords( ot::StringWriter *this, ot::StringWriter *a2, unsigned __int8 a3)
{
  uint64_t v4 = this;
  for (unsigned __int8 i = 0; i < (int)a3; ++i)
  {
    if (i) {
      ot::StringWriter::Append(a2, ":");
    }
    unsigned __int16 v3 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)v4 + i));
    this  = ot::StringWriter::Append(a2, "%x", v3);
  }

  return this;
}

BOOL ot::Ip6::InterfaceIdentifier::IsUnspecified(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v2 = 0;
  if (!*(_DWORD *)this) {
    return *((_DWORD *)this + 1) == 0;
  }
  return v2;
}

BOOL ot::Ip6::InterfaceIdentifier::IsReserved(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v3 = 1;
  if (!ot::Ip6::InterfaceIdentifier::IsSubnetRouterAnycast(this))
  {
    BOOL v3 = 1;
    if (!ot::Ip6::InterfaceIdentifier::IsReservedSubnetAnycast(this)) {
      return ot::Ip6::InterfaceIdentifier::IsAnycastLocator(this);
    }
  }

  return v3;
}

BOOL ot::Ip6::InterfaceIdentifier::IsSubnetRouterAnycast(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v2 = 0;
  if (!*(_DWORD *)this) {
    return *((_DWORD *)this + 1) == 0;
  }
  return v2;
}

BOOL ot::Ip6::InterfaceIdentifier::IsReservedSubnetAnycast(ot::Ip6::InterfaceIdentifier *this)
{
  int v4 = *(_DWORD *)this;
  BOOL v5 = 0;
  if (v4 == ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFDFFFFFFLL))
  {
    int v2 = *((unsigned __int16 *)this + 2);
    BOOL v5 = 0;
    if (v2 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFFFF))
    {
      BOOL v5 = 0;
    }
  }

  return v5;
}

BOOL ot::Ip6::InterfaceIdentifier::IsAnycastLocator(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsLocator(this)) {
    return *((unsigned __int8 *)this + 6) == 252;
  }
  return v3;
}

uint64_t ot::Ip6::InterfaceIdentifier::GenerateRandom(ot::Ip6::InterfaceIdentifier *this)
{
  uint64_t result = ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)8);
  if ((_DWORD)result) {
    __assert_rtn("GenerateRandom", "ip6_address.cpp", 258, "false");
  }
  return result;
}

void *ot::Ip6::InterfaceIdentifier::SetBytes(void *this, const unsigned __int8 *a2)
{
  *this  = *(void *)a2;
  return this;
}

char *ot::Ip6::InterfaceIdentifier::SetFromExtAddress( ot::Ip6::InterfaceIdentifier *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v4 = *(void *)a2;
  ot::Mac::ExtAddress::ToggleLocal(&v4);
  return ot::Mac::ExtAddress::CopyTo(&v4, (char *)this, 0);
}

_BYTE *ot::Ip6::InterfaceIdentifier::ConvertToExtAddress( ot::Ip6::InterfaceIdentifier *this, ot::Mac::ExtAddress *a2)
{
  return ot::Mac::ExtAddress::ToggleLocal(a2);
}

_BYTE *ot::Ip6::InterfaceIdentifier::ConvertToMacAddress( ot::Ip6::InterfaceIdentifier *this, ot::Mac::Address *a2)
{
  return ot::Mac::ExtAddress::ToggleLocal(v2);
}

uint64_t ot::Ip6::InterfaceIdentifier::SetToLocator(ot::Ip6::InterfaceIdentifier *this, unsigned __int16 a2)
{
  *(_DWORD *)this  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFF);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE00);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

BOOL ot::Ip6::InterfaceIdentifier::IsLocator(ot::Ip6::InterfaceIdentifier *this)
{
  int v4 = *(_DWORD *)this;
  BOOL v5 = 0;
  if (v4 == ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFF))
  {
    int v2 = *((unsigned __int16 *)this + 2);
    return v2 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE00);
  }

  return v5;
}

BOOL ot::Ip6::InterfaceIdentifier::IsRoutingLocator(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsLocator(this))
  {
    BOOL v3 = 0;
  }

  return v3;
}

BOOL ot::Ip6::InterfaceIdentifier::IsAnycastServiceLocator(ot::Ip6::InterfaceIdentifier *this)
{
  Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(this);
  BOOL v3 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsLocator(this))
  {
    BOOL v3 = 0;
    if (Locator >= 0xFC10u) {
      return Locator <= 0xFC2Fu;
    }
  }

  return v3;
}

void *ot::Ip6::InterfaceIdentifier::ApplyPrefix( ot::Ip6::InterfaceIdentifier *this, const ot::Ip6::Prefix *a2)
{
  uint64_t result = (void *)ot::Ip6::Prefix::GetLength(a2);
  if (result > 0x40u)
  {
    ot::Ip6::Prefix::GetBytes(a2);
    BOOL v5 = (unsigned __int8 *)(v3 + 8);
    char Length = ot::Ip6::Prefix::GetLength(a2);
    return ot::Ip6::Address::CopyBits(this, v5, (const unsigned __int8 *)(Length - 64));
  }

  return result;
}

void *ot::Ip6::Address::CopyBits(ot::Ip6::Address *this, unsigned __int8 *a2, const unsigned __int8 *a3)
{
  unsigned __int8 __n = a3 / 8;
  char v5 = a3 % 8;
  uint64_t result = memcpy(this, a2, __n);
  if (v5)
  {
    char v4 = (128 >> (v5 - 1)) - 1;
    *((_BYTE *)this + __n) &= v4;
    *((_BYTE *)this + __n) |= a2[__n] & ~v4;
  }

  return result;
}

ot::StringWriter *ot::Ip6::InterfaceIdentifier::ToString@<X0>( ot::Ip6::InterfaceIdentifier *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, 8);
}

BOOL ot::Ip6::Address::IsUnspecified(ot::Ip6::Address *this)
{
  BOOL v2 = 0;
  if (!*(_DWORD *)this)
  {
    BOOL v2 = 0;
    if (!*((_DWORD *)this + 1))
    {
      BOOL v2 = 0;
      if (!*((_DWORD *)this + 2)) {
        return *((_DWORD *)this + 3) == 0;
      }
    }
  }

  return v2;
}

BOOL ot::Ip6::Address::IsLoopback(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (!*(_DWORD *)this)
  {
    BOOL v3 = 0;
    if (!*((_DWORD *)this + 1))
    {
      BOOL v3 = 0;
      if (!*((_DWORD *)this + 2))
      {
        int v2 = *((_DWORD *)this + 3);
        return v2 == ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)1);
      }
    }
  }

  return v3;
}

BOOL ot::Ip6::Address::IsLinkLocal(ot::Ip6::Address *this)
{
  __int16 v2 = *(_WORD *)this;
  int v3 = (unsigned __int16)(v2 & ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFFC0));
  return v3 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
}

char *ot::Ip6::Address::SetToLinkLocalAddress(ot::Ip6::Address *this, const ot::Mac::ExtAddress *a2)
{
  *(void *)this  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFE800000LL);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(this);
  return ot::Ip6::InterfaceIdentifier::SetFromExtAddress(Iid, a2);
}

void *ot::Ip6::Address::SetToLinkLocalAddress( ot::Ip6::Address *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  *(void *)this  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFE800000LL);
  return ot::Ip6::Address::SetIid(this, a2);
}

BOOL ot::Ip6::Address::IsLinkLocalMulticast(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Address::IsMulticast(this)) {
    return ot::Ip6::Address::GetScope(this) == 2;
  }
  return v3;
}

uint64_t ot::Ip6::Address::GetScope(ot::Ip6::Address *this)
{
  if (ot::Ip6::Address::IsMulticast(this))
  {
    return *((_BYTE *)this + 1) & 0xF;
  }

  else if (ot::Ip6::Address::IsLinkLocal(this))
  {
    return 2;
  }

  else if (ot::Ip6::Address::IsLoopback(this))
  {
    return 0;
  }

  else
  {
    return 14;
  }

BOOL ot::Ip6::Address::IsLinkLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(this, v1);
}

void ot::Ip6::Address::GetLinkLocalAllNodesMulticast(ot::Ip6::Address *this)
{
}

__n128 ot::Ip6::Address::SetToLinkLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  __n128 result = *v1;
  *(__n128 *)this  = *v1;
  return result;
}

BOOL ot::Ip6::Address::IsLinkLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(this, v1);
}

void ot::Ip6::Address::GetLinkLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
}

__n128 ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  __n128 result = *v1;
  *(__n128 *)this  = *v1;
  return result;
}

BOOL ot::Ip6::Address::IsRealmLocalMulticast(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Address::IsMulticast(this)) {
    return ot::Ip6::Address::GetScope(this) == 3;
  }
  return v3;
}

BOOL ot::Ip6::Address::IsMulticastLargerThanRealmLocal(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Address::IsMulticast(this)) {
    return ot::Ip6::Address::GetScope(this) > 3u;
  }
  return v3;
}

BOOL ot::Ip6::Address::IsRealmLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(this, v1);
}

void ot::Ip6::Address::GetRealmLocalAllNodesMulticast(ot::Ip6::Address *this)
{
}

__n128 ot::Ip6::Address::SetToRealmLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  __n128 result = *v1;
  *(__n128 *)this  = *v1;
  return result;
}

BOOL ot::Ip6::Address::IsRealmLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(this, v1);
}

void ot::Ip6::Address::GetRealmLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
}

__n128 ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  __n128 result = *v1;
  *(__n128 *)this  = *v1;
  return result;
}

BOOL ot::Ip6::Address::IsRealmLocalAllMplForwarders(ot::Ip6::Address *this)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(this, v1);
}

void ot::Ip6::Address::GetRealmLocalAllMplForwarders(ot::Ip6::Address *this)
{
}

__n128 ot::Ip6::Address::SetToRealmLocalAllMplForwarders(ot::Ip6::Address *this)
{
  __n128 result = *v1;
  *(__n128 *)this  = *v1;
  return result;
}

BOOL ot::Ip6::Address::MatchesPrefix(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2)
{
  char v5 = v2;
  BytesSize  = ot::Ip6::Prefix::GetBytesSize(a2);
  matched  = ot::Ip6::Prefix::MatchLength(this, v5, (const unsigned __int8 *)BytesSize);
  return matched >= ot::Ip6::Prefix::GetLength(a2);
}

BOOL ot::Ip6::Address::MatchesPrefix(ot::Ip6::Address *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned __int8 v3 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
  return a3 <= (int)ot::Ip6::Prefix::MatchLength(this, a2, (const unsigned __int8 *)v3);
}

void *ot::Ip6::Address::SetPrefix(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *ot::Ip6::Address::SetPrefix(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2)
{
  char v5 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  return ot::Ip6::Address::CopyBits(this, v5, (const unsigned __int8 *)Length);
}

void *ot::Ip6::Address::SetMulticastNetworkPrefix( ot::Ip6::Address *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  __n128 result = ot::Ip6::Address::CopyBits((ot::Ip6::Address *)((char *)this + 4), a2, (const unsigned __int8 *)a3);
  *((_BYTE *)this + 3)  = a3;
  return result;
}

uint64_t ot::Ip6::Address::SetToLocator(ot::Ip6::Address *a1, void *a2, unsigned __int16 a3)
{
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a1);
  return ot::Ip6::InterfaceIdentifier::SetToLocator(Iid, a3);
}

uint64_t ot::Ip6::Address::PrefixMatch(ot::Ip6::Address *this, const ot::Ip6::Address *a2)
{
  return ot::Ip6::Prefix::MatchLength(this, (const unsigned __int8 *)a2, (const unsigned __int8 *)0x10);
}

uint64_t ot::Ip6::Address::MatchesFilter(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 3uLL) {
    __asm { BR              X8 }
  }

  return 1LL;
}

void ot::Ip6::Address::SynthesizeFromIp4Address( ot::Ip6::Address *this, const ot::Ip6::Prefix *a2, const ot::Ip4::Address *a3)
{
  if (!ot::Ip6::Prefix::IsValidNat64(a2)) {
    __assert_rtn("SynthesizeFromIp4Address", "ip6_address.cpp", 518, "aPrefix.IsValidNat64()");
  }
  ot::Clearable<ot::Ip6::Address>::Clear(this);
  ot::Ip6::Address::SetPrefix(this, a2);
  unsigned __int8 v7 = ot::Ip6::Prefix::GetLength(a2) / 8;
  for (unsigned __int8 i = 0; i < 4u; ++i)
  {
    if (v7 == 8) {
      ++v7;
    }
    ot::Ip4::Address::GetBytes(a3);
    uint64_t v4 = v7++;
    *((_BYTE *)this + vot::MeshCoP::Tlv::SetType(this, 4) = *(_BYTE *)(v3 + i);
  }

BOOL ot::Ip6::Prefix::IsValidNat64(ot::Ip6::Prefix *this)
{
  return ot::Ip6::Prefix::IsValidNat64PrefixLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 16));
}

{
  return __ZNK2ot3Ip66Prefix12IsValidNat64Ev(this);
}

uint64_t ot::Ip6::Address::FromString(ot::Ip6::Address *this, const char *a2)
{
  return ot::Ip6::Address::ParseFrom(this, a2, 0);
}

uint64_t ot::GetArrayEnd<unsigned char,(unsigned short)16>(uint64_t a1)
{
  return a1 + 16;
}

{
  return __ZN2ot11GetArrayEndIhLt16EEEPT_RAT0__S1_(a1);
}

ot::StringWriter *ot::Ip6::Address::ToString@<X0>(ot::Ip6::Address *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip6::Address::ToString(this, a2);
}

uint64_t ot::String<(unsigned short)40>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 40);
  return a1;
}

ot::StringWriter *ot::Ip6::Address::ToString(ot::Ip6::Address *this, ot::StringWriter *a2)
{
  Array  = ot::GetArrayLength<unsigned short,(unsigned short)8>();
  return ot::Ip6::Address::AppendHexWords(this, a2, Array);
}

ot::StringWriter *ot::Ip6::Address::ToString(ot::Ip6::Address *this, char *a2, __int16 a3)
{
  char v8 = this;
  unsigned __int8 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip6::Address::ToString(this, (ot::StringWriter *)v5);
}

uint64_t ot::GetArrayLength<unsigned short,(unsigned short)8>()
{
  return 8LL;
}

{
  return __ZN2ot14GetArrayLengthItLt8EEEtRAT0__KT_();
}

ot::Random::Manager *ot::Random::Manager::Manager(ot::Random::Manager *this)
{
  uint64_t v3 = this;
  uint64_t v4 = this;
  if (!ot::Random::Manager::sInitCount)
  {
    j__otPlatCryptoRandomInit();
    ot::Random::Manager::NonCryptoPrng::Init(&ot::Random::Manager::sPrng, v2);
  }

  ++ot::Random::Manager::sInitCount;
  return v4;
}

{
  ot::Random::Manager::Manager(this);
  return this;
}

int *ot::Random::Manager::NonCryptoPrng::Init(int *this, int a2)
{
  int v2 = a2;
  if (!a2 || a2 == 0x7FFFFFFF) {
    int v2 = 1;
  }
  *this  = v2;
  return this;
}

void ot::Random::Manager::~Manager(ot::Random::Manager *this)
{
  if (!ot::Random::Manager::sInitCount) {
    __assert_rtn("~Manager", "random.cpp", 70, "sInitCount > 0");
  }
  if (!--ot::Random::Manager::sInitCount) {
    j__otPlatCryptoRandomDeinit();
  }
}

{
  ot::Random::Manager::~Manager(this);
}

uint64_t ot::Random::Manager::NonCryptoGetUint32(ot::Random::Manager *this)
{
  if (!ot::Random::Manager::sInitCount) {
    __assert_rtn("NonCryptoGetUint32", "random.cpp", 85, "sInitCount > 0");
  }
  return ot::Random::Manager::NonCryptoPrng::GetNext((ot::Random::Manager::NonCryptoPrng *)&ot::Random::Manager::sPrng);
}

uint64_t ot::Random::Manager::NonCryptoPrng::GetNext(ot::Random::Manager::NonCryptoPrng *this)
{
  int v2 = ((33614 * (unint64_t)*(unsigned int *)this) >> 32) + ((33614 * *(_DWORD *)this) >> 1);
  if (v2 < 0) {
    int v2 = (v2 & 0x7FFFFFFF) + 1;
  }
  *(_DWORD *)this  = v2;
  return v2;
}

uint64_t ot::Random::NonCrypto::GetUint8InRange(ot::Random::NonCrypto *this, unsigned __int8 a2)
{
  return ((_BYTE)this
                         + ot::Random::NonCrypto::GetUint8(this) % (a2 - this));
}

uint64_t ot::Random::NonCrypto::GetUint16InRange(ot::Random::NonCrypto *this, unsigned __int16 a2)
{
  return (unsigned __int16)((_WORD)this
                          + (unsigned __int16)ot::Random::NonCrypto::GetUint16(this) % (a2 - (unsigned __int16)this));
}

uint64_t ot::Random::NonCrypto::GetUint32InRange(ot::Random::NonCrypto *this, unsigned int a2)
{
  return this + ot::Random::NonCrypto::GetUint32(this) % (a2 - this);
}

ot::Random::NonCrypto *ot::Random::NonCrypto::FillBuffer(ot::Random::NonCrypto *this, unsigned __int8 *a2)
{
  char v5 = this;
  __int16 v4 = (__int16)a2;
  while (v4--)
  {
    this  = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint8(this);
    uint64_t v3 = v5;
    char v5 = (ot::Random::NonCrypto *)((char *)v5 + 1);
    *(_BYTE *)uint64_t v3 = (_BYTE)this;
  }

  return this;
}

uint64_t ot::Random::NonCrypto::AddJitter(ot::Random::NonCrypto *this, unsigned __int16 a2)
{
  else {
    unsigned __int16 v3 = a2;
  }
  return this + ot::Random::NonCrypto::GetUint32InRange(0LL, 2 * v3 + 1) - v3;
}

BOOL ot::Ip6::Filter::Accept(ot::Ip6::Filter *this, ot::Message *a2)
{
  char v14 = this;
  unsigned int v13 = a2;
  BOOL v12 = 0;
  if ((ot::Message::IsLinkSecurityEnabled(a2) & 1) != 0)
  {
    return 1;
  }

  else if (!ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v11, v13))
  {
    DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v11);
    if (ot::Ip6::Address::IsLinkLocal(DestinationAddress)
      || (unsigned __int16 v3 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v11),
          ot::Ip6::Address::IsLinkLocalMulticast(v3)))
    {
      __int16 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      if (ot::Mle::Mle::GetRole(v4))
      {
        unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v11);
        int IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v11);
        if (IpProto != 6)
        {
          if (IpProto != 17) {
            return v12;
          }
          if (DestinationPort == 19788) {
            return 1;
          }
          char v5 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v5) + 2) & 2) != 0)
          {
            __int16 v6 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
          }
        }

        return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Contains((uint64_t)this, &DestinationPort);
      }

      return 1;
    }
  }

  return v12;
}

BOOL ot::Array<unsigned short,(unsigned short)2,unsigned char>::Contains(uint64_t a1, unsigned __int16 *a2)
{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(a1, a2) != 0LL;
}

{
  return __ZNK2ot5ArrayItLt2EhE8ContainsERKt(a1, a2);
}

uint64_t ot::Ip6::Filter::UpdateUnsecurePorts(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v16 = a1;
  char v15 = a2;
  unsigned __int16 v14 = a3;
  unsigned int v13 = 0;
  if (!a3) {
    return 7;
  }
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(a1, &v14);
  if (v15)
  {
    if (!v3) {
      return 23;
    }
    ot::Array<unsigned short,(unsigned short)2,unsigned char>::Remove(a1, v3);
  }

  else
  {
    if (v3) {
      return v13;
    }
    unsigned int v13 = ot::Array<unsigned short,(unsigned short)2,unsigned char>::PushBack(a1, (__int16 *)&v14);
    if (v13) {
      return v13;
    }
  }

  unsigned __int8 v10 = "Added";
  if (v15) {
    unsigned __int8 v10 = "Removed";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Ip6Filter", "%s unsecure port %d", v4, v5, v6, v7, v8, v9, (char)v10);
  return v13;
}

void ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(uint64_t a1, unsigned __int16 *a2)
{
}

{
  __ZN2ot5ArrayItLt2EhE4FindERKt(a1, a2);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::PushBack(uint64_t a1, __int16 *a2)
{
  if (ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsFull(a1))
  {
    return 3;
  }

  else
  {
    __int16 v2 = *a2;
    uint64_t v3 = (*(_BYTE *)(a1 + 4))++;
    *(_WORD *)(a1 + 2 * v3)  = v2;
    return 0;
  }

{
  return __ZN2ot5ArrayItLt2EhE8PushBackERKt(a1, a2);
}

_WORD *ot::Array<unsigned short,(unsigned short)2,unsigned char>::Remove(uint64_t a1, _WORD *a2)
{
  __n128 result = (_WORD *)ot::Array<unsigned short,(unsigned short)2,unsigned char>::PopBack(a1);
  if (result != a2) {
    *a2  = *result;
  }
  return result;
}

{
  return __ZN2ot5ArrayItLt2EhE6RemoveERt(a1, a2);
}

unsigned __int16 *ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find( uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v7 = 0LL;
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<unsigned short,(unsigned short)2,unsigned char>::end(a1);
  while (v5 != (unsigned __int16 *)v4)
  {
    if (*v5 == *a2) {
      return v5;
    }
    ++v5;
  }

  return (unsigned __int16 *)v7;
}

  ;
}

{
  return __ZNK2ot5ArrayItLt2EhE4FindERKt(a1, a2);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::end(uint64_t a1)
{
  return a1 + 2LL * *(unsigned __int8 *)(a1 + 4);
}

  ;
}

  ;
}

{
  return __ZNK2ot5ArrayItLt2EhE3endEv(a1);
}

BOOL ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 4);
  return v2 == ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetMaxSize();
}

{
  return __ZNK2ot5ArrayItLt2EhE6IsFullEv(a1);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetMaxSize()
{
  return 2LL;
}

{
  return __ZNK2ot5ArrayItLt2EhE10GetMaxSizeEv();
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::PopBack(uint64_t a1)
{
  char v1 = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = v1 - 1;
  return a1 + 2LL * (v1 - 1);
}

{
  return __ZN2ot5ArrayItLt2EhE7PopBackEv(a1);
}

BOOL ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsEmpty(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4) == 0;
}

{
  return __ZNK2ot5ArrayItLt2EhE7IsEmptyEv(a1);
}

uint64_t ot::Ip6::Header::ParseFrom(ot::Ip6::Header *this, const ot::Message *a2)
{
  unsigned int v5 = 6;
  if (!ot::Message::Read<ot::Ip6::Header>(a2, 0, (char *)this) && ot::Ip6::Header::IsValid(this))
  {
    uint64_t v3 = (unsigned __int16)ot::Ip6::Header::GetPayloadLength(this) + 40LL;
  }

  return v5;
}

BOOL ot::Ip6::Header::IsValid(ot::Ip6::Header *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Header::IsVersion6(this)) {
    return (unint64_t)(unsigned __int16)ot::Ip6::Header::GetPayloadLength(this) + 40 <= 0x500;
  }
  return v3;
}

BOOL ot::Ip6::Header::IsVersion6(ot::Ip6::Header *this)
{
  return (*(_BYTE *)this & 0xF0) == 96;
}

{
  return __ZNK2ot3Ip66Header10IsVersion6Ev(this);
}

uint64_t ot::Ip6::Option::ParseFrom( ot::Ip6::Option *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v6 = ot::Message::Read(a2, a3, (char *)this, 1u);
  if (!v6)
  {
    if (*(_BYTE *)this)
    {
      unsigned int v6 = ot::Message::Read<ot::Ip6::Option>(a2, a3, (char *)this);
    }

    else
    {
      ot::Ip6::Option::SetLength((uint64_t)this, 0);
    }
  }

  return v6;
}

uint64_t ot::Ip6::Option::SetLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = a2;
  return this;
}

{
  return __ZN2ot3Ip66Option9SetLengthEh(this, a2);
}

uint64_t ot::Message::Read<ot::Ip6::Option>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip66OptionEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::Option::GetSize(ot::Ip6::Option *this)
{
  if (*(_BYTE *)this) {
    return (unsigned __int16)(*((unsigned __int8 *)this + 1) + 2);
  }
  else {
    return 1;
  }
}

_BYTE *ot::Ip6::PadOption::InitForPadSize(ot::Ip6::PadOption *this, char a2)
{
  if (a2 == 1) {
    return ot::Ip6::Option::SetType(this, 0);
  }
  ot::Ip6::Option::SetType(this, 1);
  return (_BYTE *)ot::Ip6::Option::SetLength((uint64_t)this, a2 - 2);
}

_DWORD *ot::Clearable<ot::Ip6::PadOption>::Clear(_DWORD *result)
{
  *__n128 result = 0;
  *(_DWORD *)((char *)result + 3)  = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip69PadOptionEE5ClearEv(result);
}

_BYTE *ot::Ip6::Option::SetType(_BYTE *this, char a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot3Ip66Option7SetTypeEh(this, a2);
}

uint64_t ot::Ip6::PadOption::InitToPadHeaderWithSize(ot::Ip6::PadOption *this, unsigned __int16 a2)
{
  v3[4]  = 0;
  *(_DWORD *)BOOL v3 = a2 % 8;
  if (v3[0]) {
    ot::Ip6::PadOption::InitForPadSize(this, 8 - v3[0]);
  }
  else {
    *(_DWORD *)&v3[1]  = 24;
  }
  return *(unsigned int *)&v3[1];
}

ot::Ip6::Mpl *ot::Ip6::Mpl::Mpl(ot::Ip6::Mpl *this, ot::Instance *a2)
{
  *((_BYTE *)this + 140)  = 0;
  ot::Coap::MessageQueue::MessageQueue((ot::Ip6::Mpl *)((char *)this + 144));
  ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::TimerMilliIn( (ot::Ip6::Mpl *)((char *)this + 152),  a2);
  memset(this, 0, 0x8CuLL);
  return this;
}

{
  ot::Ip6::Mpl::Mpl(this, a2);
  return this;
}

uint64_t ot::Ip6::Mpl::HandleRetransmissionTimer(ot::Ip6::Mpl *this)
{
  uint64_t v33 = this;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  v28[2]  = (char *)this + 144;
  v28[0]  = ot::MessageQueue::begin((ot::Ip6::Mpl *)((char *)this + 144));
  v28[1]  = v1;
  v27[0]  = ot::MessageQueue::end((ot::Ip6::Mpl *)((char *)this + 144));
  v27[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v28, v27))
  {
    __src  = (void *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v28);
    ot::Ip6::Mpl::Metadata::ReadFrom((ot::Ip6::Mpl::Metadata *)&v29, (const ot::Message *)__src);
    if (ot::Time::operator<(&Now, &v29))
    {
      int v24 = DistantFuture;
      int v23 = v29;
      int v25 = ot::Min<ot::Time>(DistantFuture, v29);
      DistantFuture  = v25;
    }

    else
    {
      TimerExpirations  = ot::Ip6::Mpl::GetTimerExpirations(this);
      if (++v30 >= (int)TimerExpirations)
      {
        ot::MessageQueue::Dequeue((ot::Ip6::Mpl *)((char *)this + 144), (ot::Message *)__src);
        if (v30 == TimerExpirations)
        {
          if (v30 > 1u) {
            ot::Message::SetSubType((ot::Buffer *)__src, 5);
          }
          ot::Ip6::Mpl::Metadata::RemoveFrom((ot::Ip6::Mpl::Metadata *)&v29, (ot::Message *)__src);
          unsigned int v6 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
          ot::Ip6::Ip6::EnqueueDatagram(v6, (ot::Message *)__src);
        }

        else
        {
          memcpy(__dst, __src, sizeof(__dst));
          uint64_t v7 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
          ot::MessagePool::GetTotalBufferCount(v7);
          uint64_t v8 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
          ot::MessagePool::GetFreeBufferCount(v8);
          otLogInfoPlat( "MPL message free buffer  = %p, total buffers  = %d, free buffers  = %d, , mTransmissionCount  = %d",  v9,  v10,  v11,  v12,  v13,  v14,  v15,  (char)__dst);
          ot::Message::Free((ot::Message *)__src);
        }
      }

      else
      {
        __int16 Length = ot::Message::GetLength((ot::Message *)__src);
        char v21 = ot::Message::Clone((ot::Message *)__src, Length - 12);
        if (v21)
        {
          if (v30 > 1u) {
            ot::Message::SetSubType(v21, 5);
          }
          unsigned int v5 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
          ot::Ip6::Ip6::EnqueueDatagram(v5, v21);
        }

        int v20 = Now;
        ot::Ip6::Mpl::Metadata::GenerateNextTransmissionTime((uint64_t)&v29, Now, 0x40u);
        ot::Ip6::Mpl::Metadata::UpdateIn((ot::Ip6::Mpl::Metadata *)&v29, (ot::Message *)__src);
        v18[2]  = DistantFuture;
        v18[1]  = v29;
        int v19 = ot::Min<ot::Time>(DistantFuture, v29);
        DistantFuture  = v19;
      }
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v28, v3);
  }

  v18[0]  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v18);
  if ((result & 1) != 0) {
    return ot::TimerMilli::FireAt((ot::Ip6::Mpl *)((char *)this + 152), DistantFuture);
  }
  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Ip6::MplOption::Init(_BYTE *a1, char a2)
{
  if (a2)
  {
    if (a2 != 64) {
      __assert_rtn("Init", "ip6_mpl.cpp", 71, "false");
    }
    uint64_t result = ot::Ip6::Option::SetLength((uint64_t)a1, 4);
  }

  else
  {
    uint64_t result = ot::Ip6::Option::SetLength((uint64_t)a1, 2);
  }

  a1[2]  = a2;
  return result;
}

uint64_t ot::Ip6::Mpl::InitOption(ot::Ip6::Mpl *this, ot::Ip6::MplOption *a2, const ot::Ip6::Address *a3)
{
  BOOL v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  ot::Mle::Mle::GetMeshLocal16(v3);
  if (ot::Equatable<ot::Ip6::Address>::operator==(a3, v4))
  {
    ot::Ip6::MplOption::Init(a2, 0);
  }

  else
  {
    ot::Ip6::MplOption::Init(a2, 64);
    unsigned int v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v5);
    ot::Ip6::MplOption::SetSeedId(a2, Rloc16);
  }

  char v7 = *((_BYTE *)this + 140);
  *((_BYTE *)this + 140)  = v7 + 1;
  return ot::Ip6::MplOption::SetSequence((uint64_t)a2, v7);
}

uint64_t ot::Ip6::MplOption::SetSeedId(ot::Ip6::MplOption *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot3Ip69MplOption9SetSeedIdEt(this, a2);
}

uint64_t ot::Ip6::MplOption::SetSequence(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3)  = a2;
  return this;
}

{
  return __ZN2ot3Ip69MplOption11SetSequenceEh(this, a2);
}

uint64_t ot::Ip6::Mpl::ProcessOption( ot::Ip6::Mpl *this, ot::Message *a2, unsigned __int16 a3, const ot::Ip6::Address *a4, char a5, BOOL *a6)
{
  int v24 = this;
  int v23 = a2;
  unsigned __int16 v22 = a3;
  char v21 = a4;
  char v20 = a5 & 1;
  int v19 = a6;
  updated  = ot::Message::Read(a2, a3, v17, 4u);
  if (!updated)
  {
    SeedId__int16 Length = ot::Ip6::MplOption::GetSeedIdLength((ot::Ip6::MplOption *)v17);
    if (SeedIdLength)
    {
      if (SeedIdLength == 64)
      {
        updated  = ot::Message::Read<ot::Ip6::MplOption>(v23, v22, v17);
        if (updated) {
          return updated;
        }
      }

      else if (SeedIdLength == 128 || SeedIdLength == 192)
      {
        return 6;
      }
    }

    else
    {
      Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
      if (!ot::Ip6::InterfaceIdentifier::IsLocator(Iid)) {
        return 2;
      }
      char v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
      Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(v7);
      ot::Ip6::MplOption::SetSeedId((ot::Ip6::MplOption *)v17, Locator);
    }

    SeedId  = ot::Ip6::MplOption::GetSeedId((ot::Ip6::MplOption *)v17);
    Sequence  = ot::Ip6::MplOption::GetSequence((ot::Ip6::MplOption *)v17);
    updated  = ot::Ip6::Mpl::UpdateSeedSet(this, SeedId, Sequence);
    if (updated)
    {
      if ((v20 & 1) != 0)
      {
        *int v19 = 0;
        return 0;
      }
    }

    else
    {
      uint64_t v12 = v23;
      __int16 v13 = ot::Ip6::MplOption::GetSeedId((ot::Ip6::MplOption *)v17);
      char v10 = ot::Ip6::MplOption::GetSequence((ot::Ip6::MplOption *)v17);
      ot::Ip6::Mpl::AddBufferedMessage(this, v12, v13, v10, v20 & 1);
    }
  }

  return updated;
}

uint64_t ot::Ip6::MplOption::GetSeedIdLength(ot::Ip6::MplOption *this)
{
  return *((_BYTE *)this + 2) & 0xC0;
}

{
  return __ZNK2ot3Ip69MplOption15GetSeedIdLengthEv(this);
}

uint64_t ot::Message::Read<ot::Ip6::MplOption>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip69MplOptionEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Ip6::Mpl::UpdateSeedSet(ot::Ip6::Mpl *this, __int16 a2, char a3)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0LL;
  char v10 = this;
  __dst  = this;
  unsigned __int8 v8 = 0;
  unsigned __int8 v7 = 0;
  for (unsigned int i = 0; i < 0x23; ++i)
  {
    if (!*((_BYTE *)this + 4 * i + 3))
    {
      if (!v11) {
        uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
      }
      __dst  = (ot::Ip6::Mpl *)((char *)this + 4 * i);
      break;
    }

    if (*((unsigned __int16 *)this + 2 * i) != *(unsigned __int16 *)v10)
    {
      if (a2 == *(_WORD *)v10 && !v11)
      {
        uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
        ++v8;
      }

      if (v7 < (int)v8)
      {
        __dst  = v10;
        unsigned __int8 v7 = v8;
      }

      char v10 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
      unsigned __int8 v8 = 0;
    }

    if (a2 == *((_WORD *)this + 2 * i))
    {
      if (a3 == *((_BYTE *)this + 4 * i + 2))
      {
        *((_BYTE *)this + 4 * i + 3)  = 5;
        return 2;
      }

      if (!v11 && ot::SerialNumber::IsLess<unsigned char>(a3, *((_BYTE *)this + 4 * i + 2)))
      {
        uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
        ++v8;
      }
    }

    ++v8;
  }

  if (*((_BYTE *)__dst + 3))
  {
    if (!v8) {
      __assert_rtn("UpdateSeedSet", "ip6_mpl.cpp", 232, "curCount != 0");
    }
    if (a2 == *(_WORD *)v10 && !v11)
    {
      uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 140);
      ++v8;
    }

    if (v7 < (int)v8)
    {
      __dst  = v10;
      unsigned __int8 v7 = v8;
    }

    if (v7 <= 1u) {
      return 2;
    }
    if (v11)
    {
      if (v11 <= this || a2 != *((_WORD *)v11 - 2)) {
        return 2;
      }
    }

    else
    {
      uint64_t v11 = __dst;
    }
  }

  if (__dst <= v11)
  {
    if (__dst < v11)
    {
      if (__dst < this) {
        __assert_rtn("UpdateSeedSet", "ip6_mpl.cpp", 270, "evict >= mSeedSet");
      }
      memmove(__dst, (char *)__dst + 4, 4 * (((ot::Ip6::Mpl *)((char *)v11 - 4) - __dst) / 4));
      uint64_t v11 = (ot::Ip6::Mpl *)((char *)v11 - 4);
    }
  }

  else
  {
    if (v11 < this) {
      __assert_rtn("UpdateSeedSet", "ip6_mpl.cpp", 265, "insert >= mSeedSet");
    }
    memmove((char *)v11 + 4, v11, 4 * ((__dst - v11) / 4));
  }

  *(_WORD *)uint64_t v11 = a2;
  *((_BYTE *)v11 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  *((_BYTE *)v11 + 3)  = 5;
  BOOL v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
  ot::TimeTicker::RegisterReceiver(v3, 7);
  return v12;
}

uint64_t ot::Ip6::MplOption::GetSeedId(ot::Ip6::MplOption *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot3Ip69MplOption9GetSeedIdEv(this);
}

uint64_t ot::Ip6::MplOption::GetSequence(ot::Ip6::MplOption *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot3Ip69MplOption11GetSequenceEv(this);
}

void ot::Ip6::Mpl::AddBufferedMessage(ot::Ip6::Mpl *this, ot::Message *a2, __int16 a3, char a4, char a5)
{
  uint64_t v33 = this;
  v32  = a2;
  __int16 v31 = a3;
  char v30 = a4;
  char v29 = a5 & 1;
  int v28 = 0;
  uint64_t v27 = 0LL;
  unsigned __int8 v21 = 0;
  TimerExpirations  = ot::Ip6::Mpl::GetTimerExpirations(this);
  if (v6 | (TimerExpirations == 0)) {
    char v7 = 0;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) != 0)
  {
    uint64_t v27 = ot::Message::Clone(v32);
    if (!v27)
    {
      int v28 = 3;
      goto LABEL_13;
    }

    unsigned __int8 v8 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetTotalBufferCount(v8);
    uint64_t v9 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetFreeBufferCount(v9);
    otLogInfoPlat( "MPL AddBufferedMessage: Sequence=%d, SeedID=0x%x, IsOutBound=%s, buffer  = %p, total buffers  = %d, free buffers  = %d",  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v30);
    if ((v29 & 1) == 0)
    {
      ot::Message::Read<unsigned char>(v32, 7u, (char *)&v21);
      IgnoreError();
      int v18 = v21--;
      if (v18 <= 1)
      {
        int v28 = 2;
        goto LABEL_13;
      }

      unsigned __int8 v17 = (ot::TimerMilli *)ot::Message::Write<unsigned char>(v27, 7u, (char *)&v21);
    }

    __int16 v23 = v31;
    char v24 = v30;
    BOOL v25 = (v29 & 1) != 0;
    char v26 = 0;
    int Now = ot::TimerMilli::GetNow(v17);
    ot::Ip6::Mpl::Metadata::GenerateNextTransmissionTime((uint64_t)&v22, Now, 0x40u);
    int v28 = ot::Ip6::Mpl::Metadata::AppendTo((ot::Ip6::Mpl::Metadata *)&v22, v27);
    if (!v28)
    {
      ot::MessageQueue::Enqueue((ot::Ip6::Mpl *)((char *)this + 144), v27);
      ot::TimerMilli::FireAtIfEarlier((int *)this + 38, v22);
    }
  }

BOOL ot::SerialNumber::IsLess<unsigned char>(char a1, char a2)
{
  return (char)(a1 - a2) < 0;
}

{
  return __ZN2ot12SerialNumber6IsLessIhEEbT_S2_(a1, a2);
}

uint64_t ot::Ip6::Mpl::RemoveMatchedMessage(ot::Ip6::Mpl *this, ot::Message *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  char v14 = 0;
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length)
  {
    v12[2]  = (char *)this + 144;
    v12[0]  = ot::MessageQueue::begin((ot::Ip6::Mpl *)((char *)this + 144));
    v12[1]  = v2;
    v11[0]  = ot::MessageQueue::end((ot::Ip6::Mpl *)((char *)this + 144));
    v11[1]  = v3;
    while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v12, v11))
    {
      uint64_t v10 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v12);
      unsigned __int16 v4 = ot::Message::GetLength(v10);
      if ((unint64_t)v4 - 12 >= Length)
      {
        unsigned __int8 v8 = v15;
        __int16 v6 = ot::Message::GetLength(v10);
        if (ot::Message::CompareBytes(v8, 0, v10, v6 - 12 - Length, Length, 0LL))
        {
          ot::MessageQueue::DequeueAndFree((ot::Ip6::Mpl *)((char *)this + 144), v10);
          char v14 = 1;
          return v14 & 1;
        }
      }

      ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v12, v5);
    }
  }

  return v14 & 1;
}

ot::InstanceLocator *ot::Ip6::Mpl::HandleTimeTick(ot::InstanceLocator *this)
{
  char v7 = 0;
  int v6 = 0;
  for (int i = 0; ; ++i)
  {
    BOOL v4 = 0;
    if (i < 35) {
      BOOL v4 = *((_BYTE *)this + 4 * i + 3) != 0;
    }
    if (!v4) {
      break;
    }
    if (--*((_BYTE *)this + 4 * i + 3))
    {
      uint64_t v1 = v6++;
      *((_DWORD *)this + vot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = *((_DWORD *)this + i);
      char v7 = 1;
    }
  }

  while (1)
  {
    BOOL v3 = 0;
    if (v6 < 35) {
      BOOL v3 = *((_BYTE *)this + 4 * v6 + 3) != 0;
    }
    if (!v3) {
      break;
    }
    *((_BYTE *)this + 4 * v6++ + 3)  = 0;
  }

  if ((v7 & 1) == 0)
  {
    uint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return (ot::InstanceLocator *)ot::TimeTicker::UnregisterReceiver(v2, 7);
  }

  return this;
}

uint64_t ot::Ip6::Mpl::GetTimerExpirations(ot::Ip6::Mpl *this)
{
  unsigned __int8 v5 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  unsigned int Role = ot::Mle::Mle::GetRole(v1);
  if (Role > 1)
  {
    if (Role == 2)
    {
      return 0;
    }

    else if (Role == 4 || Role == 3)
    {
      return 2;
    }
  }

  return v5;
}

uint64_t ot::Ip6::Mpl::Metadata::GenerateNextTransmissionTime(uint64_t a1, int a2, unsigned __int8 a3)
{
  int v7 = a2;
  if (a3) {
    unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0LL, a3);
  }
  else {
    unsigned __int8 Uint8InRange = 0;
  }
  uint64_t result = ot::Time::operator+(&v7, *(unsigned __int8 *)(a1 + 8) + Uint8InRange);
  *(_DWORD *)a1  = result;
  *(_BYTE *)(a1 + 8)  = a3 - Uint8InRange;
  return result;
}

uint64_t ot::Ip6::Mpl::Metadata::AppendTo(ot::Ip6::Mpl::Metadata *this, ot::Message *a2)
{
  return ot::Message::Append<ot::Ip6::Mpl::Metadata>(a2, (char *)this);
}

{
  return __ZNK2ot3Ip63Mpl8Metadata8AppendToERNS_7MessageE(this, a2);
}

void ot::Ip6::Mpl::Metadata::ReadFrom(ot::Ip6::Mpl::Metadata *this, const ot::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0xCuLL) {
    __assert_rtn("ReadFrom", "ip6_mpl.cpp", 479, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Ip6::Mpl::Metadata>(a2, Length - 12, (char *)this);
  IgnoreError();
}

uint64_t ot::Ip6::Mpl::Metadata::UpdateIn(ot::Ip6::Mpl::Metadata *this, ot::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  return ot::Message::Write<ot::Ip6::Mpl::Metadata>(a2, Length - 12, (char *)this);
}

uint64_t ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Ip6::Mpl::Metadata *this, ot::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  uint64_t result = ot::Message::SetLength(a2, Length - 12);
  if ((_DWORD)result) {
    __assert_rtn("RemoveFrom", "ip6_mpl.cpp", 485, "false");
  }
  return result;
}

uint64_t ot::Message::Read<ot::Ip6::Mpl::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xCu);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip63Mpl8MetadataEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Message::Write<ot::Ip6::Mpl::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0xCu);
}

{
  return __ZN2ot7Message5WriteINS_3Ip63Mpl8MetadataEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Message::Append<ot::Ip6::Mpl::Metadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0xCu);
}

{
  return __ZN2ot7Message6AppendINS_3Ip63Mpl8MetadataEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Ip6::Mpl *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(a1);
  return ot::Ip6::Mpl::HandleRetransmissionTimer(v2);
}

ot::Uptime *ot::Uptime::Uptime(ot::Uptime *this, ot::Instance *a2)
{
  *(_DWORD *)this  = ot::TimerMilli::GetNow(v2);
  *((_DWORD *)this + ot::Mac::TxFrame::SetCsmaCaEnabled(*((void *)this + 1), 1) = 0;
  ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::TimerMilliIn((ot::Uptime *)((char *)this + 8), a2);
  int v5 = ot::Time::operator+(this, 0x40000000);
  ot::TimerMilli::FireAt((ot::Uptime *)((char *)this + 8), v5);
  return this;
}

{
  ot::Uptime::Uptime(this, a2);
  return this;
}

uint64_t ot::Uptime::HandleTimer(ot::Uptime *this)
{
  int v6 = this;
  FireTime  = ot::Timer::GetFireTime((ot::Uptime *)((char *)this + 8));
  if (ot::Time::operator==(&FireTime, this)) {
    ++*((_DWORD *)this + 1);
  }
  int v3 = ot::Timer::GetFireTime((ot::Uptime *)((char *)this + 8));
  int v4 = ot::Time::operator+(&v3, 0x40000000);
  return ot::TimerMilli::FireAt((ot::Uptime *)((char *)this + 8), v4);
}

ot::TimerMilli *ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::HandleTimer);
  return a1;
}

unint64_t ot::Uptime::GetUptime(ot::Uptime *this)
{
  unsigned __int8 v8 = this;
  int Now = ot::TimerMilli::GetNow(this);
  unsigned int v6 = *((_DWORD *)this + 1);
  FireTime  = ot::Timer::GetFireTime((ot::Uptime *)((char *)this + 8));
  BOOL v4 = 0;
  if (ot::Time::operator==(&FireTime, this)) {
    BOOL v4 = ot::Time::operator>=(&Now, (int *)this);
  }
  if (v4) {
    ++v6;
  }
  unint64_t v2 = (unint64_t)v6 << 32;
  return v2 + ot::Time::operator-(&Now, this);
}

BOOL ot::Time::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

{
  return __ZNK2ot4TimeeqERKS0_(a1, a2);
}

ot::StringWriter *ot::Uptime::GetUptime(ot::Uptime *this, char *a2, __int16 a3)
{
  uint64_t v9 = this;
  unsigned __int8 v8 = a2;
  __int16 v7 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v6, a2, a3);
  Uptime  = ot::Uptime::GetUptime(this);
  return ot::Uptime::UptimeToString(Uptime, (ot::StringWriter *)v6, (ot::StringWriter *)1);
}

ot::StringWriter *ot::Uptime::UptimeToString( unint64_t this, ot::StringWriter *a2, ot::StringWriter *a3)
{
  unint64_t v11 = this;
  uint64_t v10 = a2;
  char v9 = a3 & 1;
  unint64_t v8 = this / 0x5265C00;
  if (this / 0x5265C00)
  {
    ot::StringWriter::Append(v10, "%lud.", v8);
    v11 -= 86400000 * v8;
  }

  int v7 = v11;
  Remainder  = ot::DivideAndGetRemainder((ot *)&v7, (unsigned int *)0x36EE80);
  unsigned __int16 v5 = ot::DivideAndGetRemainder((ot *)&v7, (unsigned int *)0xEA60);
  unsigned __int16 v4 = ot::DivideAndGetRemainder((ot *)&v7, (unsigned int *)0x3E8);
  uint64_t result = ot::StringWriter::Append(v10, "%02u:%02u:%02u", Remainder, v5, v4);
  if ((v9 & 1) != 0) {
    return ot::StringWriter::Append(v10, ".%03u", (unsigned __int16)v7);
  }
  return result;
}

uint64_t ot::DivideAndGetRemainder(ot *this, unsigned int *a2)
{
  unsigned int v3 = *(_DWORD *)this / a2;
  *(_DWORD *)this %= a2;
  return (unsigned __int16)v3;
}

uint64_t ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unint64_t v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(a1);
  return ot::Uptime::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Uptime>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_6UptimeEEERT_v(a1);
}

ot::Ip6::Netif *ot::Ip6::Netif::Netif (ot::Ip6::Netif *this, ot::Instance *a2)
{
  *((_BYTE *)this + ot::Tlv::SetLength((uint64_t)this, 16) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 3);
  ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Pool((uint64_t *)this + 5);
  ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Pool((uint64_t *)this + 38);
  return this;
}

{
  ot::Ip6::Netif::Netif (this, a2);
  return this;
}

uint64_t *ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t i;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  return a1;
}

uint64_t *ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t i;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  return a1;
}

BOOL ot::Ip6::Netif::IsMulticastSubscribed(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::ContainsMatching<ot::Ip6::Address>( (ot::Ip6::Netif *)((char *)this + 8),  a2);
}

BOOL ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::ContainsMatching<ot::Ip6::Address>( ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(a1, a2) != 0LL;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE16ContainsMatchingINS1_7AddressEEEbRKT_(a1, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::SubscribeAllNodesMulticast(ot::Ip6::Netif *this)
{
  unsigned int v6 = v2;
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains( (ot::Ip6::Netif *)((char *)this + 8),  v2);
  if ((result & 1) == 0)
  {
    ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail();
    if (v4) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(v4, (uint64_t)v6);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead((void *)this + 1, (uint64_t)v6);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 1, v6, 0LL);
  }

  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetifMulticastAddress>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

  ;
}

BOOL ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains( ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  v3[2]  = a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find( (ot::Ip6::Netif::MulticastAddress **)a1,  a2,  v3) == 0;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE8ContainsERKS3_(a1, a2);
}

void ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail()
{
}

{
  __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE7GetTailEv();
}

void *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE7SetHeadEPS3_(result, a2);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + ot::Tlv::SetLength((uint64_t)this, 16) = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip65Netif16MulticastAddressEE7SetNextEPS3_(result, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::SignalMulticastAddressChange( ot::InstanceLocator *a1, char a2, ot::Ip6::Netif::MulticastAddress *a3, ot::Ip6::Netif::MulticastAddress *a4)
{
  uint64_t v15 = a1;
  char v14 = a2 & 1;
  uint64_t v13 = a3;
  uint64_t v12 = a4;
  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
  if ((v14 & 1) == 1) {
    uint64_t v5 = 4096LL;
  }
  else {
    uint64_t v5 = 0x2000LL;
  }
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::Notifier::Signal(v4, v5);
  for (int i = v13; i != v12; int i = result)
  {
    uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
    ot::Utils::HistoryTracker::RecordAddressEvent(v7, v14 & 1, i, 0);
    if (ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)a1 + 3))
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v10, i);
      char v9 = v10;
      ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent &>( (uint64_t)a1 + 24,  &v9,  &v14);
    }

    uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(i);
  }

  return result;
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::UnsubscribeAllNodesMulticast(ot::Ip6::Netif *this)
{
  v8[1]  = this;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v1);
  uint64_t v7 = v2;
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find( (uint64_t)this + 8,  v2,  v8);
  if (!(_DWORD)result)
  {
    uint64_t v5 = v8[0];
    ot::AsNonConst<otNetifMulticastAddress>();
    ot::AsCoreTypePtr<otNetifMulticastAddress>();
    if (v5 == v4) {
      __assert_rtn( "UnsubscribeAllNodesMulticast",  "netif.cpp",  175,  "prev != AsCoreTypePtr(AsNonConst(&kRealmLocalAllRoutersMulticastAddress))");
    }
    if (v8[0]) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)v8[0], 0LL);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Clear((void *)this + 1);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 0, v7, 0LL);
  }

  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find( uint64_t a1, ot::Ip6::Netif::MulticastAddress *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find(v3, a2, a3);
}

  ;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE4FindERKS3_RPS3_(a1, a2, a3);
}

void *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE5ClearEv(result);
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::SubscribeAllRoutersMulticast(ot::Ip6::Netif *this)
{
  v12[1]  = this;
  v12[0]  = 0LL;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v1);
  unint64_t v11 = v2;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v3);
  uint64_t v10 = v4;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v5);
  char v9 = v6;
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find( (uint64_t)this + 8,  v10,  v12);
  if ((_DWORD)result) {
    __assert_rtn("SubscribeAllRoutersMulticast", "netif.cpp", 202, "false");
  }
  if (v12[0] != v9)
  {
    if (v12[0]) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)v12[0], (uint64_t)v11);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead((void *)this + 1, (uint64_t)v11);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 1, v11, v10);
  }

  return result;
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::UnsubscribeAllRoutersMulticast(ot::Ip6::Netif *this)
{
  v9[1]  = this;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v1);
  unint64_t v8 = v2;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v3);
  uint64_t v7 = v4;
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find( (uint64_t)this + 8,  v8,  v9);
  if (!(_DWORD)result)
  {
    if (v9[0]) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)v9[0], (uint64_t)v7);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead((void *)this + 1, (uint64_t)v7);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 0, v8, v7);
  }

  return result;
}

BOOL ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPK16otIp6AddressInfobPvEE5IsSetEv(a1);
}

ot::Ip6::AddressInfo *ot::Ip6::AddressInfo::AddressInfo( ot::Ip6::AddressInfo *this, const ot::Ip6::Netif::MulticastAddress *a2)
{
  return this;
}

{
  uint64_t v2;
  ot::Ip6::Address *v3;
  char Scope;
  ot::Ip6::AddressInfo *result;
  ot::Ip6::Netif::MulticastAddress::GetAddress(a2);
  *(void *)this  = v2;
  *((_BYTE *)this + 8)  = 0x80;
  ot::Ip6::Netif::MulticastAddress::GetAddress(a2);
  Scope  = ot::Ip6::Address::GetScope(v3);
  uint64_t result = this;
  *((_BYTE *)this + ot::MeshCoP::Tlv::SetType(this, 9) = *((_BYTE *)this + 9) & 0xF0 | Scope & 0xF;
  *((_BYTE *)this + 9) &= ~0x10u;
  return result;
}

uint64_t ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent &>( uint64_t a1, void *a2, _BYTE *a3)
{
  return (*(uint64_t (**)(void, BOOL, void))a1)(*a2, (*a3 & 1) != 0, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK16otIp6AddressInfobPvELNS_23CallbackContextPositionE1EE6InvokeIJPNS_3Ip611AddressInfoERNSA_5Netif12AddressEventEEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::Ip6::Netif::MulticastAddress::GetNext(ot::Ip6::Netif::MulticastAddress *this)
{
  return *((void *)this + 2);
}

{
  return __ZNK2ot3Ip65Netif16MulticastAddress7GetNextEv(this);
}

BOOL ot::Ip6::Netif::IsMulticastAddressExternal( ot::Ip6::Netif *this, const ot::Ip6::Netif::MulticastAddress *a2)
{
  return ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::IsPoolEntry( (uint64_t)this + 304,  (unint64_t)a2);
}

BOOL ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::IsPoolEntry( uint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1 + 8 <= a2) {
    return a2 < ot::GetArrayEnd<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>(a1 + 8);
  }
  return v3;
}

{
  return __ZNK2ot4PoolINS_3Ip65Netif24ExternalMulticastAddressELt12EE11IsPoolEntryERKS3_(a1, a2);
}

uint64_t ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif *this, ot::Ip6::Netif::MulticastAddress *a2)
{
  int v19 = this;
  int v18 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Add((uint64_t *)this + 1, a2);
  if (!(_DWORD)result)
  {
    ot::Ip6::Netif::MulticastAddress::GetAddress(v18);
    ot::Ip6::Address::ToString(v3, (ot::StringWriter *)v20);
    char v4 = ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    otLogDebgPlat("Netif::SubscribeMulticast address:%s", v5, v6, v7, v8, v9, v10, v11, v4);
    uint64_t v12 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v12, 4096LL);
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v13, 1, v18, 0);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if ((result & 1) != 0)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v17, v18);
      uint64_t v16 = v17;
      char v15 = 1;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( (uint64_t)this + 24,  &v16,  &v15);
    }
  }

  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Add( uint64_t *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains((ot::Ip6::Netif::MulticastAddress *)a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push(a1, (uint64_t)a2);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE3AddERS3_(a1, a2);
}

uint64_t ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( uint64_t a1, void *a2, _BYTE *a3)
{
  return (*(uint64_t (**)(void, BOOL, void))a1)(*a2, (*a3 & 1) != 0, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK16otIp6AddressInfobPvELNS_23CallbackContextPositionE1EE6InvokeIJPNS_3Ip611AddressInfoENSA_5Netif12AddressEventEEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::Ip6::Netif::UnsubscribeMulticast( ot::Ip6::Netif *this, const ot::Ip6::Netif::MulticastAddress *a2)
{
  int v19 = this;
  int v18 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Remove((ot::Ip6::Netif *)((char *)this + 8), a2);
  if (!(_DWORD)result)
  {
    ot::Ip6::Netif::MulticastAddress::GetAddress(v18);
    ot::Ip6::Address::ToString(v3, (ot::StringWriter *)v20);
    char v4 = ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    otLogDebgPlat("Netif::UnsubscribeMulticast address:%s", v5, v6, v7, v8, v9, v10, v11, v4);
    uint64_t v12 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v12, 0x2000LL);
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v13, 0, v18, 0);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if ((result & 1) != 0)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v17, v18);
      uint64_t v16 = v17;
      char v15 = 0;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( (uint64_t)this + 24,  &v16,  &v15);
    }
  }

  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Remove( ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  v5[2]  = a1;
  v5[1]  = a2;
  unsigned int v4 = ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter((ot::Ip6::Netif::MulticastAddress **)a1, v5[0]);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE6RemoveERKS3_(a1, a2);
}

uint64_t ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  v35  = this;
  v34  = a2;
  unsigned int v33 = 0;
  ot::AsNonConst<otNetifMulticastAddress>();
  ot::AsCoreType<otNetifMulticastAddress>(v2);
  v32  = v3;
  if (ot::Ip6::Address::IsMulticast(v34))
  {
    ot::Ip6::Address::ToString(v34, (ot::StringWriter *)v37);
    char v24 = ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
    ot::Ip6::Netif::IsMulticastSubscribed(this, v34);
    otLogDebgPlat("Netif::SubscribeExternalMulticast address:%s isAlready:%d", v4, v5, v6, v7, v8, v9, v10, v24);
    if (ot::Ip6::Netif::IsMulticastSubscribed(this, v34))
    {
      return 24;
    }

    else
    {
      for (int i = v32; i; int i = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(i))
      {
        ot::Ip6::Netif::MulticastAddress::GetAddress(i);
        if (!ot::Unequatable<ot::Ip6::Address>::operator!=(v11, v34)) {
          return 37;
        }
      }

      __int16 v31 = ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Allocate((ot::Ip6::Netif::ExternalMulticastAddress **)this + 38);
      if (v31)
      {
        *(_OWORD *)__int16 v31 = *(_OWORD *)v34;
        *((_BYTE *)v31 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
        ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push((uint64_t *)this + 1, (uint64_t)v31);
        uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
        ot::Utils::HistoryTracker::RecordAddressEvent(v12, 1, v31, 3);
        ot::Ip6::Address::ToString(v34, (ot::StringWriter *)v36);
        char v13 = ot::String<(unsigned short)40>::AsCString((uint64_t)v36);
        otLogDebgPlat( "Netif::SubscribeExternalMulticast Signal MulticastSubscribed for address:%s",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v13);
        unsigned __int8 v21 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
        ot::Notifier::Signal(v21, 4096LL);
        if (ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3))
        {
          ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Ip6::Netif::MulticastAddress *)v29);
          *int v22 = *(_OWORD *)v34;
          ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v28, (const ot::Ip6::Netif::MulticastAddress *)v29);
          uint64_t v27 = v28;
          char v26 = 1;
          ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( (uint64_t)this + 24,  &v27,  &v26);
        }
      }

      else
      {
        return 3;
      }
    }
  }

  else
  {
    return 7;
  }

  return v33;
}

ot::Ip6::Netif::ExternalMulticastAddress *ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Allocate( ot::Ip6::Netif::ExternalMulticastAddress **a1)
{
  return ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Pop(a1);
}

{
  return __ZN2ot4PoolINS_3Ip65Netif24ExternalMulticastAddressELt12EE8AllocateEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE4PushERS3_(a1, a2);
}

uint64_t ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  v32  = this;
  __int16 v31 = a2;
  unsigned int v30 = 0;
  ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v34);
  char v22 = ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this + 8, v31, &v28);
  otLogDebgPlat("Netif::unsubscribeExternalMulticast address:%s entry:%d", v2, v3, v4, v5, v6, v7, v8, v22);
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this + 8, v31, &v28);
  char v29 = v9;
  if (v9)
  {
    if (ot::Ip6::Netif::IsMulticastAddressExternal(this, v29))
    {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter((ot::Ip6::Netif::MulticastAddress **)this + 1, v28);
      uint64_t v10 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
      ot::Utils::HistoryTracker::RecordAddressEvent(v10, 0, v29, 3);
      ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Free((uint64_t *)this + 38, (uint64_t)v29);
      ot::Ip6::Address::ToString(v31, (ot::StringWriter *)v33);
      char v21 = ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
      ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::GetSize();
      otLogDebgPlat( "Netif::unSubscribeExternalMulticast Signal multicastUnsubscribed for  address:%s poolSize:%d",  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v21);
      uint64_t v18 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v18, 0x2000LL);
      if (ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3))
      {
        ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Ip6::Netif::MulticastAddress *)v27);
        *uint64_t v19 = *(_OWORD *)v31;
        ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v26, (const ot::Ip6::Netif::MulticastAddress *)v27);
        BOOL v25 = v26;
        char v24 = 0;
        ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( (uint64_t)this + 24,  &v25,  &v24);
      }
    }

    else
    {
      return 37;
    }
  }

  else
  {
    return 23;
  }

  return v30;
}

void ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>( uint64_t a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
}

{
  __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE12FindMatchingINS1_7AddressEEEPS3_RKT_RS7_(a1, a2, a3);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter( ot::Ip6::Netif::MulticastAddress **a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Pop(a1);
  }
  ot::Ip6::Netif::MulticastAddress::GetNext(a2);
  uint64_t v5 = v2;
  if (v2)
  {
    ot::Ip6::Netif::MulticastAddress::GetNext(v2);
    ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)a2, v3);
  }

  return v5;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE8PopAfterEPS3_(a1, a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Free(uint64_t *a1, uint64_t a2)
{
  return ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Push(a1, a2);
}

{
  return __ZN2ot4PoolINS_3Ip65Netif24ExternalMulticastAddressELt12EE4FreeERS3_(a1, a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::GetSize()
{
  return 12LL;
}

{
  return __ZNK2ot4PoolINS_3Ip65Netif24ExternalMulticastAddressELt12EE7GetSizeEv();
}

void ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses(ot::Ip6::Netif *this)
{
  for (int i = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead((uint64_t)this + 8);
        i;
        int i = v5)
  {
    ot::Ip6::Netif::MulticastAddress::GetNext(i);
    uint64_t v5 = v1;
    if (ot::Ip6::Netif::IsMulticastAddressExternal(this, i))
    {
      ot::Ip6::Netif::MulticastAddress::GetAddress(i);
      ot::Ip6::Netif::UnsubscribeExternalMulticast(this, v2);
      IgnoreError();
    }
  }

void ot::Ip6::Netif::MulticastAddress::GetNext(ot::Ip6::Netif::MulticastAddress *this)
{
}

{
  __ZN2ot3Ip65Netif16MulticastAddress7GetNextEv(this);
}

uint64_t ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif *this, ot::Ip6::Netif::UnicastAddress *a2)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Add((uint64_t *)this, (uint64_t)a2);
  if (!(_DWORD)result)
  {
    uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    else {
      uint64_t v4 = 32LL;
    }
    ot::Notifier::Signal(v3, v4);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v5, 1, v10);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if ((result & 1) != 0)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v9, v10);
      uint64_t v8 = v9;
      char v7 = 1;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( (uint64_t)this + 24,  &v8,  &v7);
    }
  }

  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(a1, a2);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE3AddERS3_(a1, a2);
}

ot::Ip6::AddressInfo *ot::Ip6::AddressInfo::AddressInfo( ot::Ip6::AddressInfo *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  return this;
}

{
  char Scope;
  ot::Ip6::AddressInfo *result;
  *(void *)this  = a2;
  *((_BYTE *)this + 8)  = *((_BYTE *)a2 + 16);
  Scope  = ot::Ip6::Netif::UnicastAddress::GetScope(a2);
  uint64_t result = this;
  *((_BYTE *)this + ot::MeshCoP::Tlv::SetType(this, 9) = *((_BYTE *)this + 9) & 0xF0 | Scope & 0xF;
  *((_BYTE *)this + ot::MeshCoP::Tlv::SetType(this, 9) = *((_BYTE *)this + 9) & 0xEF | (16 * (*((_BYTE *)a2 + 18) & 1));
  return result;
}

uint64_t ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Remove((uint64_t *)this, (uint64_t)a2);
  if (!(_DWORD)result)
  {
    uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    else {
      uint64_t v4 = 64LL;
    }
    ot::Notifier::Signal(v3, v4);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v5, 0, v10);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if ((result & 1) != 0)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v9, v10);
      uint64_t v8 = v9;
      char v7 = 0;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>( (uint64_t)this + 24,  &v8,  &v7);
    }
  }

  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Remove(uint64_t *a1, uint64_t a2)
{
  v5[2]  = (uint64_t)a1;
  v5[1]  = a2;
  unsigned int v4 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE6RemoveERKS3_(a1, a2);
}

uint64_t ot::Ip6::Netif::AddExternalUnicastAddress( ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  unsigned int v12 = 0;
  ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
  if (ot::Ip6::Address::IsMulticast(v2))
  {
    return 7;
  }

  else
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this, v3);
    uint64_t v10 = v4;
    if (v4)
    {
      if (ot::Ip6::Netif::IsUnicastAddressExternal(this, v4))
      {
        *((_BYTE *)v10 + ot::Tlv::SetLength((uint64_t)this, 16) = *((_BYTE *)a2 + 16);
        *((_BYTE *)v10 + 17)  = *((_BYTE *)a2 + 17);
        *((_BYTE *)v10 + 18)  = *((_BYTE *)v10 + 18) & 0xFE | *((_BYTE *)a2 + 18) & 1;
        *((_BYTE *)v10 + 18)  = *((_BYTE *)v10 + 18) & 0xFD | (2 * ((*((_BYTE *)a2 + 18) & 2) != 0));
      }

      else
      {
        return 24;
      }
    }

    else
    {
      ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
      if (ot::Ip6::Address::IsLinkLocal(v5))
      {
        return 7;
      }

      else
      {
        uint64_t v11 = (ot::Ip6::Netif::UnicastAddress *)ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Allocate((uint64_t *)this + 5);
        if (v11)
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
          *((_OWORD *)v11 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_OWORD *)a2 + 1);
          ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push((uint64_t *)this, (uint64_t)v11);
          uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
          ot::Utils::HistoryTracker::RecordAddressEvent(v6, 1, v11);
          char v7 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
          ot::Notifier::Signal(v7, 1LL);
        }

        else
        {
          return 3;
        }
      }
    }
  }

  return v12;
}

void ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>( uint64_t a1, ot::Ip6::Netif::UnicastAddress *a2)
{
}

{
  __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE12FindMatchingINS1_7AddressEEEPS3_RKT_(a1, a2);
}

BOOL ot::Ip6::Netif::IsUnicastAddressExternal( ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  return ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::IsPoolEntry( (uint64_t)this + 40,  (unint64_t)a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Allocate(uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(a1);
}

{
  return __ZN2ot4PoolINS_3Ip65Netif14UnicastAddressELt8EE8AllocateEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE4PushERS3_(a1, a2);
}

uint64_t ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned int v9 = 0;
  ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this, a2, &v7);
  uint64_t v8 = v2;
  if (v2)
  {
    if (ot::Ip6::Netif::IsUnicastAddressExternal(this, v8))
    {
      ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter((uint64_t *)this, (uint64_t)v7);
      uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
      ot::Utils::HistoryTracker::RecordAddressEvent(v3, 0, v8);
      ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Free((uint64_t *)this + 5, (uint64_t)v8);
      unsigned int v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v4, 2LL);
    }

    else
    {
      return 37;
    }
  }

  else
  {
    return 23;
  }

  return v9;
}

void ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>( uint64_t a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::UnicastAddress **a3)
{
}

{
  __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE12FindMatchingINS1_7AddressEEEPS3_RKT_RS7_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(Next);
    ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(a2, v2);
  }

  return Next;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE8PopAfterEPS3_(a1, a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Free(uint64_t *a1, uint64_t a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(a1, a2);
}

{
  return __ZN2ot4PoolINS_3Ip65Netif14UnicastAddressELt8EE4FreeERS3_(a1, a2);
}

void ot::Ip6::Netif::RemoveAllExternalUnicastAddresses(ot::Ip6::Netif *this)
{
  for (int i = (ot::Ip6::Netif::UnicastAddress *)ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead((uint64_t)this);
        i;
        int i = (ot::Ip6::Netif::UnicastAddress *)Next)
  {
    Next  = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext((uint64_t)i);
    if (ot::Ip6::Netif::IsUnicastAddressExternal(this, i))
    {
      ot::Ip6::Netif::UnicastAddress::GetAddress(i);
      ot::Ip6::Netif::RemoveExternalUnicastAddress(this, v1);
      IgnoreError();
    }
  }

BOOL ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ContainsMatching<ot::Ip6::Address>(this, a2);
}

BOOL ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ContainsMatching<ot::Ip6::Address>( ot::Ip6::Netif::UnicastAddress *a1, ot::Ip6::Netif::UnicastAddress *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, a2) != 0LL;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE16ContainsMatchingINS1_7AddressEEEbRKT_(a1, a2);
}

BOOL ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::IsPoolEntry( uint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1 + 8 <= a2) {
    return a2 < ot::GetArrayEnd<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>(a1 + 8);
  }
  return v3;
}

{
  return __ZNK2ot4PoolINS_3Ip65Netif14UnicastAddressELt8EE11IsPoolEntryERKS3_(a1, a2);
}

void ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(ot::Ip6::Netif::UnicastAddress *this, char a2)
{
  char v3 = a2 & 1;
  ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(this);
  *((_BYTE *)this + ot::Tlv::SetLength((uint64_t)this, 16) = 64;
  *((_BYTE *)this + 17)  = 0;
  *((_BYTE *)this + 18)  = *((_BYTE *)this + 18) & 0xFE | v3 & 1;
  *((_BYTE *)this + 18)  = *((_BYTE *)this + 18) & 0xFD | 2;
}

uint64_t ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope( ot::Ip6::Netif::UnicastAddress *this)
{
  return ot::Ip6::Netif::UnicastAddress::SetScopeOverride((uint64_t)this, 3);
}

uint64_t ot::Ip6::Netif::UnicastAddress::SetScopeOverride(uint64_t this, char a2)
{
  *(_BYTE *)(this + 18)  = *(_BYTE *)(this + 18) & 0x87 | (8 * (a2 & 0xF));
  *(_BYTE *)(this + 18)  = *(_BYTE *)(this + 18) & 0xFB | 4;
  return this;
}

{
  return __ZN2ot3Ip65Netif14UnicastAddress16SetScopeOverrideEh(this, a2);
}

uint64_t ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginGlobalScope(ot::Ip6::Netif::UnicastAddress *this)
{
  *((_BYTE *)this + 17)  = 0;
  *((_BYTE *)this + 18)  = *((_BYTE *)this + 18) & 0xFD | 2;
  return ot::Ip6::Netif::UnicastAddress::SetScopeOverride((uint64_t)this, 14);
}

void ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin( ot::Ip6::Netif::UnicastAddress *this, char a2, char a3)
{
  char v4 = a3 & 1;
  ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(this);
  *((_BYTE *)this + ot::Tlv::SetLength((uint64_t)this, 16) = a2;
  *((_BYTE *)this + 17)  = 1;
  *((_BYTE *)this + 18)  = *((_BYTE *)this + 18) & 0xFE | v4 & 1;
  *((_BYTE *)this + 18)  = *((_BYTE *)this + 18) & 0xFD | 2;
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 8)  = a2;
  *(_BYTE *)(a1 + ot::Tlv::SetLength((uint64_t)this, 16) = a3;
  uint64_t MulticastAddresses = ot::Ip6::Netif::GetMulticastAddresses(*(ot::Ip6::Netif **)(a1 + 8));
  Head  = (const ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(MulticastAddresses);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator *)a1,  Head);
  return a1;
}

{
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(a1, a2, a3);
  return a1;
}

  ;
}

void ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom( ot::Ip6::Netif::ExternalMulticastAddress::Iterator *this, const ot::Ip6::Netif::MulticastAddress *Next)
{
  while (1)
  {
    char v5 = 0;
    if (Next)
    {
      char v4 = 0;
      if (ot::Ip6::Netif::IsMulticastAddressExternal(*((ot::Ip6::Netif **)this + 1), Next))
      {
        ot::Ip6::Netif::MulticastAddress::GetAddress(Next);
        char v4 = ot::Ip6::Address::MatchesFilter(v2, *((_BYTE *)this + 16));
      }

      char v5 = v4 ^ 1;
    }

    if ((v5 & 1) == 0) {
      break;
    }
    Next  = (const ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(Next);
  }

  ot::AsNonConst<ot::Ip6::Netif::ExternalMulticastAddress>();
  *(void *)this  = v3;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif24ExternalMulticastAddressEE4PushERS3_(a1, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>( ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  v3[2]  = a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>( (ot::Ip6::Netif::MulticastAddress **)a1,  a2,  v3);
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE12FindMatchingINS1_7AddressEEEPKS3_RKT_(a1, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>( ot::Ip6::Netif::MulticastAddress **a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)a1, *a1, 0LL, a2, a3);
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE12FindMatchingINS1_7AddressEEEPKS3_RKT_RS8_(a1, a2, a3);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>( uint64_t a1, ot::Ip6::Netif::MulticastAddress *Next, ot::Ip6::Netif::MulticastAddress *a3, const ot::Ip6::Address *a4, ot::Ip6::Netif::MulticastAddress **a5)
{
  *a5  = 0LL;
  while (Next != a3 && !ot::Ip6::Netif::MulticastAddress::Matches(Next, a4))
  {
    *a5  = Next;
    Next  = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE12FindMatchingINS1_7AddressEEEPKS3_S8_S8_RKT_RS8_( a1,  Next,  a3,  a4,  a5);
}

BOOL ot::Ip6::Netif::MulticastAddress::Matches( ot::Ip6::Netif::MulticastAddress *this, const ot::Ip6::Address *a2)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(v2, a2);
}

{
  return __ZNK2ot3Ip65Netif16MulticastAddress7MatchesERKNS0_7AddressE(this, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find( ot::Ip6::Netif::MulticastAddress **a1, ot::Ip6::Netif::MulticastAddress *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  unsigned int v5 = 23;
  *a3  = 0LL;
  for (int i = *a1; i; int i = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }

  return v5;
}

  ;
}

  ;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE4FindERKS3_RPS5_(a1, a2, a3);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail( ot::Ip6::Netif::MulticastAddress **a1)
{
  Next  = *a1;
  if (*a1)
  {
    for (uint64_t i = ot::Ip6::Netif::MulticastAddress::GetNext(Next); i; uint64_t i = ot::Ip6::Netif::MulticastAddress::GetNext(Next))
      Next  = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE7GetTailEv(a1);
}

uint64_t ot::GetArrayEnd<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>(uint64_t a1)
{
  return a1 + 384;
}

{
  return __ZN2ot11GetArrayEndINS_3Ip65Netif24ExternalMulticastAddressELt12EEEPKT_RAT0__S5_(a1);
}

ot::Ip6::Netif::ExternalMulticastAddress *ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Pop( ot::Ip6::Netif::ExternalMulticastAddress **a1)
{
  char v4 = *a1;
  if (*a1)
  {
    ot::Ip6::Netif::ExternalMulticastAddress::GetNext(*a1);
    *a1  = v1;
  }

  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif24ExternalMulticastAddressEE3PopEv(a1);
}

void ot::Ip6::Netif::ExternalMulticastAddress::GetNext(ot::Ip6::Netif::ExternalMulticastAddress *this)
{
}

{
  __ZN2ot3Ip65Netif24ExternalMulticastAddress7GetNextEv(this);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Pop( ot::Ip6::Netif::MulticastAddress **a1)
{
  char v4 = *a1;
  if (*a1)
  {
    ot::Ip6::Netif::MulticastAddress::GetNext(*a1);
    *a1  = v1;
  }

  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE3PopEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(v3, a2, a3);
}

  ;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE4FindERKS3_RPS3_(a1, a2, a3);
}

ot::Ip6::Netif::UnicastAddress *ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>( ot::Ip6::Netif::UnicastAddress *a1, ot::Ip6::Netif::UnicastAddress *a2)
{
  v3[2]  = a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>( (ot::Ip6::Netif::UnicastAddress **)a1,  a2,  v3);
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE12FindMatchingINS1_7AddressEEEPKS3_RKT_(a1, a2);
}

ot::Ip6::Netif::UnicastAddress *ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>( ot::Ip6::Netif::UnicastAddress **a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::UnicastAddress **a3)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)a1, *a1, 0LL, a2, a3);
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE12FindMatchingINS1_7AddressEEEPKS3_RKT_RS8_(a1, a2, a3);
}

ot::Ip6::Netif::UnicastAddress *ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>( uint64_t a1, ot::Ip6::Netif::UnicastAddress *Next, ot::Ip6::Netif::UnicastAddress *a3, const ot::Ip6::Address *a4, ot::Ip6::Netif::UnicastAddress **a5)
{
  *a5  = 0LL;
  while (Next != a3 && !ot::Ip6::Netif::UnicastAddress::Matches(Next, a4))
  {
    *a5  = Next;
    Next  = (ot::Ip6::Netif::UnicastAddress *)ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext((uint64_t)Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE12FindMatchingINS1_7AddressEEEPKS3_S8_S8_RKT_RS8_( a1,  Next,  a3,  a4,  a5);
}

BOOL ot::Ip6::Netif::UnicastAddress::Matches( ot::Ip6::Netif::UnicastAddress *this, const ot::Ip6::Address *a2)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(v2, a2);
}

{
  return __ZNK2ot3Ip65Netif14UnicastAddress7MatchesERKNS0_7AddressE(this, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE3PopEv(a1);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip65Netif14UnicastAddressEE7SetNextEPS3_(result, a2);
}

uint64_t ot::GetArrayEnd<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>(uint64_t a1)
{
  return a1 + 256;
}

{
  return __ZN2ot11GetArrayEndINS_3Ip65Netif14UnicastAddressELt8EEEPKT_RAT0__S5_(a1);
}

ot::StringWriter *ot::Ip6::SockAddr::ToString@<X0>(ot::Ip6::SockAddr *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip6::SockAddr::ToString(this, a2);
}

uint64_t ot::String<(unsigned short)48>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 48);
  return a1;
}

ot::StringWriter *ot::Ip6::SockAddr::ToString(ot::Ip6::SockAddr *this, ot::StringWriter *a2)
{
  uint64_t v6 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v8);
  Port  = ot::Ip6::SockAddr::GetPort(this);
  return ot::StringWriter::Append(a2, "[%s]:%u", v6, Port);
}

ot::StringWriter *ot::Ip6::SockAddr::ToString(ot::Ip6::SockAddr *this, char *a2, __int16 a3)
{
  uint64_t v8 = this;
  char v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip6::SockAddr::ToString(this, (ot::StringWriter *)v5);
}

uint64_t ot::Ip6::Udp::SocketHandle::Matches( ot::Ip6::Udp::SocketHandle *this, const ot::Ip6::MessageInfo *a2)
{
  char v22 = 0;
  ot::Ip6::Udp::SocketHandle::GetSockName(this);
  int v20 = *(unsigned __int16 *)(v2 + 16);
  if (v20 == (unsigned __int16)ot::Ip6::MessageInfo::GetSockPort(a2))
  {
    ot::Ip6::MessageInfo::GetSockAddr(a2);
    if (ot::Ip6::Address::IsMulticast(v3)
      || (ot::Ip6::Udp::SocketHandle::GetSockName(this),
          ot::Ip6::SockAddr::GetAddress(v4),
          ot::Ip6::Address::IsUnspecified(v5))
      || (ot::Ip6::Udp::SocketHandle::GetSockName(this),
          ot::Ip6::SockAddr::GetAddress(v6),
          uint64_t v19 = v7,
          ot::Ip6::MessageInfo::GetSockAddr(a2),
          ot::Equatable<ot::Ip6::Address>::operator==(v19, v8)))
    {
      ot::Ip6::Udp::SocketHandle::GetPeerName(this);
      if (!*(_WORD *)(v9 + 16)) {
        goto LABEL_9;
      }
      ot::Ip6::Udp::SocketHandle::GetPeerName(this);
      int v18 = *(unsigned __int16 *)(v10 + 16);
      if (v18 == (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort(a2))
      {
        ot::Ip6::Udp::SocketHandle::GetPeerName(this);
        ot::Ip6::SockAddr::GetAddress(v11);
        if (ot::Ip6::Address::IsUnspecified(v12)
          || (ot::Ip6::Udp::SocketHandle::GetPeerName(this),
              ot::Ip6::SockAddr::GetAddress(v13),
              uint64_t v17 = v14,
              ot::Ip6::MessageInfo::GetPeerAddr(a2),
              ot::Equatable<ot::Ip6::Address>::operator==(v17, v15)))
        {
LABEL_9:
          char v22 = 1;
        }
      }
    }
  }

  return v22 & 1;
}

void ot::Ip6::Udp::SocketHandle::GetPeerName(ot::Ip6::Udp::SocketHandle *this)
{
}

{
  ot::AsCoreType<otSockAddr>((uint64_t)this + 18);
}

{
  __ZN2ot3Ip63Udp12SocketHandle11GetPeerNameEv(this);
}

{
  __ZNK2ot3Ip63Udp12SocketHandle11GetPeerNameEv(this);
}

ot::Ip6::Udp::Socket *ot::Ip6::Udp::Socket::Socket(ot::Ip6::Udp::Socket *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Ip6::Udp::Socket::Socket(this, a2);
  return this;
}

void *ot::Clearable<ot::Ip6::Udp::SocketHandle>::Clear(void *a1)
{
  return memset(a1, 0, 0x48uLL);
}

{
  return __ZN2ot9ClearableINS_3Ip63Udp12SocketHandleEE5ClearEv(a1);
}

ot::Buffer *ot::Ip6::Udp::Socket::NewMessage(ot::Ip6::Udp::Socket *this)
{
  return ot::Ip6::Udp::Socket::NewMessage(this, 0);
}

ot::Buffer *ot::Ip6::Udp::Socket::NewMessage(ot::Ip6::Udp::Socket *this, __int16 a2)
{
  Default  = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Ip6::Udp::Socket::NewMessage(this, a2, Default);
}

ot::Buffer *ot::Ip6::Udp::Socket::NewMessage( ot::Ip6::Udp::Socket *this, __int16 a2, const ot::Message::Settings *a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::NewMessage(v3, a2, a3);
}

ot::Buffer *ot::Ip6::Udp::NewMessage(ot::Ip6::Udp *this, __int16 a2, const ot::Message::Settings *a3)
{
  uint64_t v3 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  return ot::Ip6::Ip6::NewMessage(v3, a2 + 8, a3);
}

uint64_t ot::Ip6::Udp::Socket::Open(ot::InstanceLocator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1);
  return ot::Ip6::Udp::Open(v3, a1, a2, a3);
}

uint64_t ot::Ip6::Udp::Open(ot::Ip6::Udp *a1, const ot::Ip6::Udp::SocketHandle *a2, uint64_t a3, uint64_t a4)
{
  if (ot::Ip6::Udp::IsOpen(a1, a2)) {
    __assert_rtn("Open", "udp6.cpp", 175, "!IsOpen(aSocket)");
  }
  ot::Ip6::Udp::SocketHandle::GetSockName(a2);
  ot::Clearable<ot::Ip6::SockAddr>::Clear(v4);
  ot::Ip6::Udp::SocketHandle::GetPeerName(a2);
  ot::Clearable<ot::Ip6::SockAddr>::Clear(v5);
  *((void *)a2 + 5)  = a3;
  *((void *)a2 + 6)  = a4;
  unsigned int v8 = otPlatUdpSocket((uint64_t)a2);
  if (!v8) {
    ot::Ip6::Udp::AddSocket(a1, a2);
  }
  return v8;
}

BOOL ot::Ip6::Udp::Socket::IsOpen(ot::Ip6::Udp::Socket *this)
{
  uint64_t v1 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::IsOpen(v1, this);
}

uint64_t ot::Ip6::Udp::Socket::Bind(ot::InstanceLocator *a1, ot::Ip6::SockAddr *a2, unsigned __int8 a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1);
  return ot::Ip6::Udp::Bind(v3, a1, a2, a3);
}

uint64_t ot::Ip6::Udp::Bind( ot::Ip6::Udp *a1, ot::Ip6::Udp::SocketHandle *a2, ot::Ip6::SockAddr *a3, unsigned __int8 a4)
{
  uint64_t v4 = (void *)ot::MapEnum<ot::Ip6::NetifIdentifier>(a4);
  unsigned int v13 = otPlatUdpBindToNetif ((uint64_t)a2, v4);
  if (!v13)
  {
    if (a4 == 2) {
      ot::Ip6::Udp::SetBackboneSocket(a1, a2);
    }
    ot::Ip6::SockAddr::GetAddress(a3);
    if (ot::Ip6::Address::IsUnspecified(v5)
      || (uint64_t v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1),
          ot::Ip6::SockAddr::GetAddress(a3),
          ot::Ip6::Netif::HasUnicastAddress(v10, v6)))
    {
      *(_OWORD *)a2  = *(_OWORD *)a3;
      *((_WORD *)a2 + 8)  = *((_WORD *)a3 + 8);
      if (ot::Ip6::Udp::SocketHandle::IsBound(a2))
      {
        if ((ot::Ip6::Udp::ShouldUsePlatformUdp(a1, a2) & 1) != 0) {
          return otPlatUdpBind((uint64_t)a2, v8);
        }
      }

      else
      {
        do
        {
          *((_WORD *)a2 + 8)  = ot::Ip6::Udp::GetEphemeralPort(a1);
          unsigned int v13 = otPlatUdpBind((uint64_t)a2, v7);
        }

        while (v13);
      }
    }

    else
    {
      return 7;
    }
  }

  return v13;
}

uint64_t ot::Ip6::Udp::Socket::Bind(ot::InstanceLocator *a1, __int16 a2, unsigned __int8 a3)
{
  unsigned int v8 = a1;
  __int16 v7 = a2;
  unsigned __int8 v6 = a3;
  ot::Ip6::SockAddr::SockAddr((ot::Ip6::SockAddr *)v5, a2);
  return ot::Ip6::Udp::Socket::Bind(a1, (ot::Ip6::SockAddr *)v5, v6);
}

uint64_t ot::Ip6::Udp::Socket::Connect(ot::Ip6::Udp::Socket *this, const ot::Ip6::SockAddr *a2)
{
  uint64_t v2 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::Connect(v2, this, a2);
}

uint64_t ot::Ip6::Udp::Connect( ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2, const ot::Ip6::SockAddr *a3)
{
  unsigned int v6 = 0;
  *(_OWORD *)((char *)a2 + 18)  = *(_OWORD *)a3;
  *((_WORD *)a2 + 17)  = *((_WORD *)a3 + 8);
  if (ot::Ip6::Udp::SocketHandle::IsBound(a2)
    || (ot::Ip6::Udp::SocketHandle::GetSockName(a2), (unsigned int v6 = ot::Ip6::Udp::Bind(this, a2, v3, 1u)) == 0))
  {
    if ((ot::Ip6::Udp::ShouldUsePlatformUdp(this, a2) & 1) != 0) {
      return otPlatUdpConnect((uint64_t)a2);
    }
  }

  return v6;
}

uint64_t ot::Ip6::Udp::Socket::Connect(ot::Ip6::Udp::Socket *this, __int16 a2)
{
  unsigned int v6 = this;
  __int16 v5 = a2;
  ot::Ip6::SockAddr::SockAddr((ot::Ip6::SockAddr *)v4, a2);
  return ot::Ip6::Udp::Socket::Connect(this, (const ot::Ip6::SockAddr *)v4);
}

uint64_t ot::Ip6::Udp::Socket::Close(ot::Ip6::Udp::Socket *this)
{
  uint64_t v1 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::Close(v1, this);
}

uint64_t ot::Ip6::Udp::Close(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  unsigned int v7 = 0;
  if (ot::Ip6::Udp::IsOpen(this, a2))
  {
    unsigned int v7 = otPlatUdpClose((uint64_t)a2, v2);
    if (!v7)
    {
      ot::Ip6::Udp::RemoveSocket(this, a2);
      ot::Ip6::Udp::SocketHandle::GetSockName(a2);
      ot::Clearable<ot::Ip6::SockAddr>::Clear(v3);
      ot::Ip6::Udp::SocketHandle::GetPeerName(a2);
      ot::Clearable<ot::Ip6::SockAddr>::Clear(v4);
    }
  }

  return v7;
}

uint64_t ot::Ip6::Udp::Socket::SendTo( ot::Ip6::Udp::Socket *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::SendTo(v3, this, a2, a3);
}

uint64_t ot::Ip6::Udp::SendTo( ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  char v26 = this;
  BOOL v25 = a2;
  char v24 = a3;
  __int16 v23 = a4;
  unsigned int v22 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)__dst);
  if (!(unsigned __int16)ot::Ip6::MessageInfo::GetSockPort(v23)
    || (ot::Ip6::Udp::SocketHandle::GetSockName(v25),
        int v19 = *(unsigned __int16 *)(v4 + 16),
        v19 == (unsigned __int16)ot::Ip6::MessageInfo::GetSockPort(v23)))
  {
    memcpy(__dst, v23, sizeof(__dst));
    ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)__dst);
    if (ot::Ip6::Address::IsUnspecified(v5))
    {
      ot::Ip6::Udp::SocketHandle::GetPeerName(v25);
      ot::Ip6::SockAddr::GetAddress(v6);
      if (ot::Ip6::Address::IsUnspecified(v7)) {
        return 7;
      }
      ot::Ip6::Udp::SocketHandle::GetPeerName(v25);
      ot::Ip6::SockAddr::GetAddress(v8);
      ot::Ip6::MessageInfo::SetPeerAddr((__n128 *)__dst, v9);
    }

    if (!*(_WORD *)&__dst[34])
    {
      ot::Ip6::Udp::SocketHandle::GetPeerName(v25);
      if (!*(_WORD *)(v10 + 16)) {
        return 7;
      }
      ot::Ip6::Udp::SocketHandle::GetPeerName(v25);
      *(_WORD *)&_BYTE __dst[34] = *(_WORD *)(v11 + 16);
    }

    ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)__dst);
    if (ot::Ip6::Address::IsUnspecified(v12))
    {
      ot::Ip6::Udp::SocketHandle::GetSockName(v25);
      ot::Ip6::SockAddr::GetAddress(v13);
      ot::Ip6::MessageInfo::SetSockAddr((__n128 *)__dst, v14);
    }

    if (ot::Ip6::Udp::SocketHandle::IsBound(v25)
      || (int v18 = v25, ot::Ip6::Udp::SocketHandle::GetSockName(v25), (v22 = ot::Ip6::Udp::Bind(this, v18, v15, 1u)) == 0))
    {
      ot::Ip6::Udp::SocketHandle::GetSockName(v25);
      ot::Ip6::MessageInfo::SetSockPort((uint64_t)__dst, *(_WORD *)(v16 + 16));
      else {
        return otPlatUdpSend((uint64_t)v25, v24, (uint64_t)__dst);
      }
    }
  }

  else
  {
    return 7;
  }

  return v22;
}

uint64_t ot::Ip6::Udp::Socket::JoinNetifMulticastGroup(uint64_t a1, unsigned __int8 a2, __int128 *a3)
{
  if (ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)a3))
  {
    uint64_t v3 = (void *)ot::MapEnum<ot::Ip6::NetifIdentifier>(a2);
    return otPlatUdpJoinMulticastGroup(a1, v3, a3);
  }

  else
  {
    return 7;
  }

uint64_t ot::MapEnum<ot::Ip6::NetifIdentifier>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_3Ip615NetifIdentifierEEEKNS_10MappedEnumIT_E4TypeES4_(result);
}

uint64_t ot::Ip6::Udp::Socket::LeaveNetifMulticastGroup(uint64_t a1, unsigned __int8 a2, __int128 *a3)
{
  if (ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)a3))
  {
    uint64_t v3 = (void *)ot::MapEnum<ot::Ip6::NetifIdentifier>(a2);
    return otPlatUdpLeaveMulticastGroup(a1, v3, a3);
  }

  else
  {
    return 7;
  }

ot::Ip6::Udp *ot::Ip6::Udp::Udp(ot::Ip6::Udp *this, ot::Instance *a2)
{
  *(_WORD *)this  = -16384;
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1);
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 2);
  uint64_t result = this;
  *((void *)this + 3)  = 0LL;
  return result;
}

{
  ot::Ip6::Udp::Udp(this, a2);
  return this;
}

uint64_t ot::Ip6::Udp::AddReceiver(ot::Ip6::Udp *this, ot::Ip6::Udp::Receiver *a2)
{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Add((uint64_t *)this + 1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Add(uint64_t *a1, void *a2)
{
  unsigned int v4 = 0;
  else {
    ot::LinkedList<ot::Ip6::Udp::Receiver>::Push(a1, a2);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE3AddERS3_(a1, a2);
}

uint64_t ot::Ip6::Udp::RemoveReceiver(ot::Ip6::Udp *this, ot::Ip6::Udp::Receiver *a2)
{
  unsigned int v3 = ot::LinkedList<ot::Ip6::Udp::Receiver>::Remove((void *)this + 1, a2);
  if (!v3) {
    ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(a2, 0LL);
  }
  return v3;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Remove(void *a1, void *a2)
{
  v5[2]  = a1;
  v5[1]  = a2;
  unsigned int v4 = ot::LinkedList<ot::Ip6::Udp::Receiver>::Find((uint64_t)a1, (uint64_t)a2, (uint64_t *)v5);
  if (!v4) {
    ot::LinkedList<ot::Ip6::Udp::Receiver>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE6RemoveERKS3_(a1, a2);
}

void *ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip63Udp8ReceiverEE7SetNextEPS3_(result, a2);
}

uint64_t ot::Clearable<ot::Ip6::SockAddr>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8)  = 0LL;
  *(_WORD *)(result + ot::Tlv::SetLength((uint64_t)this, 16) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip68SockAddrEE5ClearEv(result);
}

uint64_t ot::Ip6::Udp::AddSocket(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  uint64_t result = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Add((uint64_t *)this + 2, (uint64_t)a2);
  if (!(_DWORD)result && !*((void *)this + 3)) {
    *((void *)this + 3)  = a2;
  }
  return result;
}

uint64_t ot::Ip6::Udp::SetBackboneSocket(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  if (*((void *)this + 3)) {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PushAfter((uint64_t)this + 16, (uint64_t)a2, *((void *)this + 3));
  }
  else {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push((uint64_t *)this + 2, (uint64_t)a2);
  }
}

uint64_t ot::Ip6::Udp::GetEphemeralPort(ot::Ip6::Udp *this)
{
  do
  {
    else {
      ++*(_WORD *)this;
    }
  }

  while ((ot::Ip6::Udp::IsPortReserved((ot::Ip6::Udp *)*(unsigned __int16 *)this) & 1) != 0);
  return *(unsigned __int16 *)this;
}

uint64_t ot::Ip6::Udp::ShouldUsePlatformUdp(ot::Ip6::Udp *this, const ot::Ip6::Udp::SocketHandle *a2)
{
  IsBackboneSocket  = 1;
  if (!ot::Ip6::Udp::ShouldUsePlatformUdp(this, *((_WORD *)a2 + 8))) {
    IsBackboneSocket  = ot::Ip6::Udp::IsBackboneSocket(this, a2);
  }
  return IsBackboneSocket & 1;
}

uint64_t ot::Ip6::Udp::RemoveSocket(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  unsigned int v6 = this;
  __int16 v5 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find((uint64_t)this + 16, (uint64_t)a2, &v4);
  if (!(_DWORD)result)
  {
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PopAfter((uint64_t *)this + 2, v4);
    uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext((uint64_t)v5, 0LL);
    if (v5 == *((ot::Ip6::Udp::SocketHandle **)this + 3)) {
      *((void *)this + 3)  = v4;
    }
  }

  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PushAfter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Next  = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(a3);
  ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a2, Next);
  return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a3, a2);
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE9PushAfterERS3_S5_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE4PushERS3_(a1, a2);
}

uint64_t ot::Ip6::Udp::GetBackboneSockets(ot::Ip6::Udp *this)
{
  if (*((void *)this + 3)) {
    return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(*((void *)this + 3));
  }
  else {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead((uint64_t)this + 16);
  }
}

uint64_t ot::Ip6::Udp::IsBackboneSocket(ot::Ip6::Udp *this, const ot::Ip6::Udp::SocketHandle *a2)
{
  char v4 = 0;
  for (uint64_t i = (const ot::Ip6::Udp::SocketHandle *)ot::Ip6::Udp::GetBackboneSockets(this);
        i;
        uint64_t i = (const ot::Ip6::Udp::SocketHandle *)ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext((uint64_t)i))
  {
    if (i == a2)
    {
      char v4 = 1;
      return v4 & 1;
    }
  }

  return v4 & 1;
}

uint64_t ot::Ip6::Udp::SendDatagram( ot::Ip6::Udp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  unsigned int v13 = this;
  unsigned int v12 = a2;
  uint64_t v11 = a3;
  unsigned __int8 v10 = a4;
  unsigned int v9 = 0;
  ot::Ip6::Udp::Header::SetSourcePort((ot::Ip6::Udp::Header *)v8, *((_WORD *)a3 + 16));
  ot::Ip6::Udp::Header::SetDestinationPort((ot::Ip6::Udp::Header *)v8, *((_WORD *)v11 + 17));
  __int16 Length = ot::Message::GetLength(v12);
  ot::Ip6::Udp::Header::SetLength((ot::Ip6::Udp::Header *)v8, Length + 8);
  ot::Ip6::Udp::Header::SetChecksum((ot::Ip6::Udp::Header *)v8, 0);
  unsigned int v9 = ot::Message::Prepend<ot::Ip6::Udp::Header>(v12, v8);
  if (!v9)
  {
    ot::Message::SetOffset(v12, 0);
    __int16 v5 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
    return ot::Ip6::Ip6::SendDatagram(v5, v12, v11, v10);
  }

  return v9;
}

uint64_t ot::Ip6::Udp::IsPortReserved(ot::Ip6::Udp *this)
{
  char v3 = 1;
  if ((unsigned __int16)this != 61631)
  {
    BOOL v2 = 0;
    char v3 = v2;
  }

  return v3 & 1;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push(a1, a2);
  }
  return v4;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE3AddERS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(v3, a2, a3);
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE4FindERKS3_RPS3_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(Next);
    ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a2, v2);
  }

  return Next;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE8PopAfterEPS3_(a1, a2);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 6ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip63Udp12SocketHandleEE7SetNextEPS3_(result, a2);
}

ot::Buffer *ot::Ip6::Udp::NewMessage(ot::Ip6::Udp *this)
{
  return ot::Ip6::Udp::NewMessage(this, 0);
}

ot::Buffer *ot::Ip6::Udp::NewMessage(ot::Ip6::Udp *this, __int16 a2)
{
  Default  = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Ip6::Udp::NewMessage(this, a2, Default);
}

uint64_t ot::Ip6::Udp::Header::SetSourcePort(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot3Ip63Udp6Header13SetSourcePortEt(this, a2);
}

uint64_t ot::Ip6::Udp::Header::SetDestinationPort(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = result;
  return result;
}

{
  return __ZN2ot3Ip63Udp6Header18SetDestinationPortEt(this, a2);
}

uint64_t ot::Ip6::Udp::Header::SetLength(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot3Ip63Udp6Header9SetLengthEt(this, a2);
}

uint64_t ot::Ip6::Udp::Header::SetChecksum(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot3Ip63Udp6Header11SetChecksumEt(this, a2);
}

uint64_t ot::Message::Prepend<ot::Ip6::Udp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 8u);
}

{
  return __ZN2ot7Message7PrependINS_3Ip63Udp6HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Ip6::Udp::HandleMessage(ot::Ip6::Udp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = 0;
  Offset  = ot::Message::GetOffset(a2);
  unsigned int v13 = ot::Message::Read<ot::Ip6::Udp::Header>(a2, Offset, v12);
  if (!v13)
  {
    unsigned int v13 = ot::Checksum::VerifyMessageChecksum(v15, v14, (const ot::Ip6::MessageInfo *)0x11);
    if (!v13)
    {
      ot::Message::MoveOffset(v15, 8);
      __int16 SourcePort = ot::Ip6::Udp::Header::GetSourcePort((ot::Ip6::Udp::Header *)v12);
      *((_WORD *)v14 + 17)  = SourcePort;
      __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v12);
      *((_WORD *)v14 + ot::Tlv::SetLength((uint64_t)this, 16) = DestinationPort;
      if (!ot::Ip6::Udp::ShouldUsePlatformUdp(this, *((_WORD *)v14 + 16))
        || (ot::Ip6::Udp::IsPortInUse(this, *((_WORD *)v14 + 16)) & 1) != 0)
      {
        v11[1]  = (uint64_t)this + 8;
        v11[0]  = ot::LinkedList<ot::Ip6::Udp::Receiver>::begin((uint64_t)this + 8);
        uint64_t v10 = ot::LinkedList<ot::Ip6::Udp::Receiver>::end();
        while (ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator!=( v11,  &v10))
        {
          unsigned int v9 = (ot::Ip6::Udp::Receiver *)ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator*((uint64_t)v11);
          if ((ot::Ip6::Udp::Receiver::HandleMessage(v9, v15, v14) & 1) != 0) {
            return v13;
          }
          ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator++(v11);
        }

        ot::Ip6::Udp::HandlePayload(this, v15, v14);
      }
    }
  }

  return v13;
}

BOOL ot::Ip6::Udp::ShouldUsePlatformUdp(ot::Ip6::Udp *this, unsigned __int16 a2)
{
  BOOL v6 = 0;
  if (a2 != 19788)
  {
    BOOL v6 = 0;
    if (a2 != 61631)
    {
      uint64_t v2 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
      BOOL v6 = 0;
      if (a2 != (unsigned __int16)ot::MeshCoP::BorderAgent::GetUdpProxyPort(v2))
      {
        char v3 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
        return a2 != (unsigned __int16)ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(v3);
      }
    }
  }

  return v6;
}

uint64_t ot::Ip6::Udp::IsPortInUse(ot::Ip6::Udp *this, __int16 a2)
{
  uint64_t v10 = this;
  __int16 v9 = a2;
  char v8 = 0;
  v7[1]  = (uint64_t)this + 16;
  v7[0]  = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::begin((uint64_t)this + 16);
  uint64_t v6 = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator!=( v7,  &v6))
  {
    __int16 v5 = (ot::Ip6::Udp::SocketHandle *)ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator*((uint64_t)v7);
    ot::Ip6::Udp::SocketHandle::GetSockName(v5);
    Port  = ot::Ip6::SockAddr::GetPort(v2);
    if (v9 == Port)
    {
      char v8 = 1;
      return v8 & 1;
    }

    ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator++(v7);
  }

  return v8 & 1;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Ip6::Udp::Receiver>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::end()
{
  return v1;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_3Ip63Udp8ReceiverENS_10LinkedListIS3_E8IteratorEEneERKS6_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_3Ip63Udp8ReceiverENS_10LinkedListIS3_E8IteratorEEdeEv(a1);
}

uint64_t ot::Ip6::Udp::Receiver::HandleMessage( ot::Ip6::Udp::Receiver *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return (*((uint64_t (**)(void, ot::Message *, const ot::Ip6::MessageInfo *))this + 1))( *((void *)this + 2),  a2,  a3) & 1;
}

{
  return __ZN2ot3Ip63Udp8Receiver13HandleMessageERNS_7MessageERKNS0_11MessageInfoE(this, a2, a3);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator++( uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorINS_3Ip63Udp8ReceiverENS_10LinkedListIS3_E8IteratorEEppEv(a1);
}

void ot::Ip6::Udp::HandlePayload(ot::Ip6::Udp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v14 = this;
  unsigned int v13 = a2;
  unsigned int v12 = a3;
  if ((ot::Ip6::MessageInfo::IsHostInterface(a3) & 1) != 0)
  {
    BackboneSockets  = (ot::Ip6::Udp::SocketHandle *)ot::Ip6::Udp::GetBackboneSockets(this);
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>( (uint64_t)this + 16,  BackboneSockets,  0LL,  v12,  &v10);
  }

  else
  {
    Head  = (ot::Ip6::Udp::SocketHandle *)ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead((uint64_t)this + 16);
    unsigned int v7 = (ot::Ip6::Udp::SocketHandle *)ot::Ip6::Udp::GetBackboneSockets(this);
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>( (uint64_t)this + 16,  Head,  v7,  v12,  &v10);
  }

  uint64_t v11 = v3;
  if (v3)
  {
    __int16 v5 = v13;
    Offset  = ot::Message::GetOffset(v13);
    ot::Message::RemoveHeader(v5, Offset);
    ot::Ip6::Udp::SocketHandle::HandleUdpReceive(v11, v13, v12);
  }

void ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>( uint64_t a1, ot::Ip6::Udp::SocketHandle *a2, ot::Ip6::Udp::SocketHandle *a3, const ot::Ip6::MessageInfo *a4, ot::Ip6::Udp::SocketHandle **a5)
{
}

{
  __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE12FindMatchingINS1_11MessageInfoEEEPS3_PKS3_S9_RKT_RS7_( a1,  a2,  a3,  a4,  a5);
}

uint64_t ot::Ip6::Udp::SocketHandle::HandleUdpReceive( ot::Ip6::Udp::SocketHandle *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return (*((uint64_t (**)(void, ot::Message *, const ot::Ip6::MessageInfo *))this + 5))( *((void *)this + 6),  a2,  a3);
}

{
  return __ZN2ot3Ip63Udp12SocketHandle16HandleUdpReceiveERNS_7MessageERKNS0_11MessageInfoE(this, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp12SocketHandleEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::end()
{
  return v1;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp12SocketHandleEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorIKNS_3Ip63Udp12SocketHandleENS_10LinkedListIS3_E13ConstIteratorEEneERKS7_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorIKNS_3Ip63Udp12SocketHandleENS_10LinkedListIS3_E13ConstIteratorEEdeEv(a1);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator++( uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorIKNS_3Ip63Udp12SocketHandleENS_10LinkedListIS3_E13ConstIteratorEEppEv(a1);
}

uint64_t ot::MeshCoP::BorderAgent::GetUdpProxyPort(ot::MeshCoP::BorderAgent *this)
{
  return *((unsigned __int16 *)this + 69);
}

{
  return __ZNK2ot7MeshCoP11BorderAgent15GetUdpProxyPortEv(this);
}

BOOL ot::LinkedList<ot::Ip6::Udp::Receiver>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(a1, a2, v3) == 0;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp8ReceiverEE8ContainsERKS3_(a1, a2);
}

void *ot::LinkedList<ot::Ip6::Udp::Receiver>::Push(uint64_t *a1, void *a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(a2, *a1);
  *a1  = (uint64_t)a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE4PushERS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0LL;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }

  return v5;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp8ReceiverEE4FindERKS3_RPS5_(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

  ;
}

{
  return __ZN2ot15LinkedListEntryINS_3Ip63Udp8ReceiverEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_3Ip63Udp8ReceiverEE7GetNextEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(v3, a2, a3);
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE4FindERKS3_RPS3_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::PopAfter(uint64_t *a1, void *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Udp::Receiver>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext((uint64_t)a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(Next);
    ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(a2, v2);
  }

  return Next;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE8PopAfterEPS3_(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE3PopEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE3PopEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE7GetHeadEv(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(*a1);
  *a1  = result;
  return result;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp8ReceiverEE8Iterator7AdvanceEv(a1);
}

ot::Ip6::Udp::SocketHandle *ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>( uint64_t a1, ot::Ip6::Udp::SocketHandle *Next, ot::Ip6::Udp::SocketHandle *a3, const ot::Ip6::MessageInfo *a4, ot::Ip6::Udp::SocketHandle **a5)
{
  *a5  = 0LL;
  while (Next != a3 && (ot::Ip6::Udp::SocketHandle::Matches(Next, a4) & 1) == 0)
  {
    *a5  = Next;
    Next  = (ot::Ip6::Udp::SocketHandle *)ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext((uint64_t)Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_3Ip63Udp12SocketHandleEE12FindMatchingINS1_11MessageInfoEEEPKS3_S8_S8_RKT_RS8_( a1,  Next,  a3,  a4,  a5);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return __ZN2ot10LinkedListINS_3Ip63Udp12SocketHandleEE13ConstIterator7AdvanceEv(a1);
}

uint64_t ot::Radio::SetExtendedAddress(ot::Radio *this, const ot::Mac::ExtAddress *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetExtendedAddress((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

uint64_t ot::Radio::SetShortAddress(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetShortAddress((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

uint64_t ot::Radio::Transmit(ot::Radio *this, ot::Mac::TxFrame *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioTransmit((uint64_t)InstancePtr, (uint64_t)a2);
}

void ot::Radio::Callbacks::HandleReceiveDone(ot::InstanceLocator *a1, ot::Mac::Frame *a2, int a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
  ot::Mac::SubMac::HandleReceiveDone(v3, a2, a3);
}

uint64_t ot::Radio::Callbacks::HandleTransmitStarted(ot::Radio::Callbacks *this, ot::Mac::TxFrame *a2)
{
  uint64_t v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::HandleTransmitStarted(v2, a2);
}

void ot::Radio::Callbacks::HandleTransmitDone( ot::InstanceLocator *a1, ot::Mac::Frame *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
  ot::Mac::SubMac::HandleTransmitDone(v4, a2, a3, a4);
}

void ot::Radio::Callbacks::HandleFrameCounterUpdated(ot::Radio::Callbacks *this, unsigned int a2)
{
  uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ot::KeyManager::MacFrameCounterUsed(v2, a2);
}

uint64_t ot::Radio::Callbacks::HandleEnergyScanDone(ot::Radio::Callbacks *this, char a2)
{
  uint64_t v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::HandleEnergyScanDone(v2, a2);
}

void ot::Radio::Callbacks::HandleDiagsReceiveDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(a1);
  ot::FactoryDiags::Diags::ReceiveDone(v3, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::FactoryDiags::Diags>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_12FactoryDiags5DiagsEEERT_v(a1);
}

void ot::Radio::Callbacks::HandleDiagsTransmitDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(a1);
  ot::FactoryDiags::Diags::TransmitDone(v3, a3);
}

void otPlatRadioReceiveDone(uint64_t a1, ot::Mac::Frame *a2, int a3)
{
  uint64_t v5 = v3;
  if ((ot::Instance::IsInitialized(v3) & 1) != 0)
  {
    if (a2) {
      ot::Mac::Frame::SetRadioType((uint64_t)a2, 0);
    }
    uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v5);
    ot::Radio::Callbacks::HandleReceiveDone(v4, a2, a3);
  }

uint64_t ot::Mac::Frame::SetRadioType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = a2;
  return result;
}

{
  return __ZN2ot3Mac5Frame12SetRadioTypeENS0_9RadioTypeE(result, a2);
}

uint64_t otPlatRadioTxStarted(uint64_t a1, ot::Mac::TxFrame *a2)
{
  uint64_t v5 = v2;
  uint64_t result = ot::Instance::IsInitialized(v2);
  if ((result & 1) != 0)
  {
    ot::Mac::Frame::SetRadioType((uint64_t)a2, 0);
    uint64_t v4 = (ot::Radio::Callbacks *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v5);
    return ot::Radio::Callbacks::HandleTransmitStarted(v4, a2);
  }

  return result;
}

void otPlatRadioTxDone(uint64_t a1, ot::Mac::Frame *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = v4;
  if ((ot::Instance::IsInitialized(v4) & 1) != 0)
  {
    if (a3) {
      ot::Mac::Frame::SetRadioType(a3, 0);
    }
    ot::Mac::Frame::SetRadioType((uint64_t)a2, 0);
    uint64_t v5 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v6);
    ot::Radio::Callbacks::HandleTransmitDone(v5, a2, a3, a4);
  }

uint64_t otPlatRadioEnergyScanDone(uint64_t a1, char a2)
{
  uint64_t v5 = v2;
  uint64_t result = ot::Instance::IsInitialized(v2);
  if ((result & 1) != 0)
  {
    uint64_t v4 = (ot::Radio::Callbacks *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v5);
    return ot::Radio::Callbacks::HandleEnergyScanDone(v4, a2);
  }

  return result;
}

void otPlatRadioFrameCounterUpdated(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = v2;
  if ((ot::Instance::IsInitialized(v2) & 1) != 0)
  {
    uint64_t v3 = (ot::Radio::Callbacks *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v4);
    ot::Radio::Callbacks::HandleFrameCounterUpdated(v3, a2);
  }

void otPlatDiagRadioReceiveDone(uint64_t a1, uint64_t a2, int a3)
{
  if (a2) {
    ot::Mac::Frame::SetRadioType(a2, 0);
  }
  ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>(v3);
  ot::Radio::Callbacks::HandleDiagsReceiveDone(v4, a2, a3);
}

void otPlatDiagRadioTransmitDone(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>(v3);
  ot::Radio::Callbacks::HandleDiagsTransmitDone(v4, a2, a3);
}

void ot::Trel::Interface::RegisterService(ot::Trel::Interface *this)
{
  char v24 = this;
  if ((*(_BYTE *)this & 1) != 0 && (*(_BYTE *)this & 2) != 0)
  {
    uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ExtAddress  = (const unsigned __int8 *)ot::Mac::Mac::GetExtAddress(v1);
    ot::Dns::TxtEntry::Init((uint64_t)v27, "xa", ExtAddress, 8u);
    uint64_t v3 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
    ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v3);
    ot::Dns::TxtEntry::Init((uint64_t)&v28, "xp", v4, 8u);
    ot::MutableData<(ot::DataLengthType)1>::Init((uint64_t)v23, (uint64_t)v29, 24);
    unsigned __int8 v5 = ot::GetArrayLength<ot::Dns::TxtEntry,(unsigned short)2>();
    __int16 v18 = *((_WORD *)this + 12);
    uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    uint64_t v7 = (ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v6);
    ot::Mac::ExtAddress::ToString(v7, (ot::StringWriter *)v26);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v26);
    uint64_t v8 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
    ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v8);
    ot::MeshCoP::ExtendedPanId::ToString(v9, (ot::StringWriter *)v25);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v25);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"TrelInterface",  "Registering DNS-SD service: port:%u, txt:%s=%s, %s=%s",  v10,  v11,  v12,  v13,  v14,  v15,  v18);
    Instance  = ot::InstanceLocator::GetInstance(this);
    unsigned __int16 v19 = *((_WORD *)this + 12);
    ot::MutableData<(ot::DataLengthType)1>::GetBytes((uint64_t)v23);
    int v20 = v16;
    unsigned __int8 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v23);
    otPlatTrelRegisterService((uint64_t)Instance, v19, v20, Length);
  }

ot::Trel::Interface *ot::Trel::Interface::Interface(ot::Trel::Interface *this, ot::Instance *a2)
{
  *(_BYTE *)this &= ~1u;
  *(_BYTE *)this &= ~2u;
  *(_BYTE *)this &= ~4u;
  ot::TaskletIn<ot::Trel::Interface,&ot::Trel::Interface::RegisterService>::TaskletIn((void *)this + 1, (uint64_t)a2);
  ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Array((uint64_t)this + 48);
  return this;
}

{
  ot::Trel::Interface::Interface(this, a2);
  return this;
}

void *ot::TaskletIn<ot::Trel::Interface,&ot::Trel::Interface::RegisterService>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::Trel::Interface,&ot::Trel::Interface::RegisterService>::HandleTasklet);
  return a1;
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Array(uint64_t a1)
{
  return a1;
}

void ot::Trel::Interface::Init(ot::Trel::Interface *this)
{
  if ((*(_BYTE *)this & 1) != 0) {
    __assert_rtn("Init", "trel_interface.cpp", 74, "!mInitialized");
  }
  *(_BYTE *)this  = *(_BYTE *)this & 0xFE | 1;
  if ((*(_BYTE *)this & 2) != 0)
  {
    *(_BYTE *)this &= ~2u;
    ot::Trel::Interface::Enable(this);
  }

void ot::Trel::Interface::Enable(ot::Trel::Interface *this)
{
  __s  = otPlatGetBackboneInterfaceName();
  if ((*(_BYTE *)this & 2) == 0 && trelDnssdIsInitialized())
  {
    *(_BYTE *)this  = *(_BYTE *)this & 0xFD | 2;
    if (__s)
    {
      trelDnssdInitialize(__s);
      if ((*(_BYTE *)this & 1) != 0)
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        otPlatTrelEnable((uint64_t)Instance, (unsigned __int16 *)this + 12);
        if (*((_WORD *)this + 12))
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"TrelInterface",  "Enabled interface, local port:%u",  v2,  v3,  v4,  v5,  v6,  v7,  *((_WORD *)this + 12));
          ot::Tasklet::Post((ot::Trel::Interface *)((char *)this + 8));
        }
      }
    }

    else
    {
      *(_BYTE *)this &= ~2u;
    }
  }

void ot::Trel::Interface::SetEnabled(ot::Trel::Interface *this, char a2)
{
  if ((a2 & 1) != 0) {
    ot::Trel::Interface::Enable(this);
  }
  else {
    ot::Trel::Interface::Disable(this);
  }
}

void ot::Trel::Interface::Disable(ot::Trel::Interface *this)
{
  if ((*(_BYTE *)this & 2) != 0)
  {
    *(_BYTE *)this &= ~2u;
    if ((*(_BYTE *)this & 1) != 0)
    {
      ot::InstanceLocator::GetInstance(this);
      otPlatTrelDisable();
      ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Clear((uint64_t)this + 48);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelInterface",  "Disabled interface",  v1,  v2,  v3,  v4,  v5,  v6,  (char)this);
    }
  }

void ot::Trel::Interface::ResolveTrelPeers(ot::Trel::Interface *this, char *a2)
{
  if ((*(_BYTE *)this & 2) != 0 && (*(_BYTE *)this & 1) != 0)
  {
    Instance  = ot::InstanceLocator::GetInstance(this);
    otPlatTrelResolveService((uint64_t)Instance, a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelInterface",  "Start DNSServiceResolve on peer extAddr: %s",  v3,  v4,  v5,  v6,  v7,  v8,  (char)a2);
  }

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Clear(uint64_t result)
{
  *(_WORD *)(result + 435ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return result;
}

{
  return __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE5ClearEv(result);
}

_BYTE *ot::Trel::Interface::HandleExtAddressChange( _BYTE *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*this & 1) != 0 && (*this & 2) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelInterface",  "Extended Address changed, re-registering DNS-SD service",  a3,  a4,  a5,  a6,  a7,  a8,  (char)this);
    return (_BYTE *)ot::Tasklet::Post((ot::Tasklet *)(v8 + 8));
  }

  return this;
}

_BYTE *ot::Trel::Interface::HandleExtPanIdChange( _BYTE *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*this & 1) != 0 && (*this & 2) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelInterface",  "Extended PAN ID changed, re-registering DNS-SD service",  a3,  a4,  a5,  a6,  a7,  a8,  (char)this);
    return (_BYTE *)ot::Tasklet::Post((ot::Tasklet *)(v8 + 8));
  }

  return this;
}

uint64_t ot::Dns::TxtEntry::Init(uint64_t this, const char *a2, const unsigned __int8 *a3, unsigned __int8 a4)
{
  *(void *)this  = a2;
  *(void *)(this + 8)  = a3;
  *(_WORD *)(this + ot::Tlv::SetLength((uint64_t)this, 16) = a4;
  return this;
}

{
  return __ZN2ot3Dns8TxtEntry4InitEPKcPKhh(this, a2, a3, a4);
}

uint64_t ot::MutableData<(ot::DataLengthType)1>::Init(uint64_t a1, uint64_t a2, __int16 a3)
{
  return ot::Data<(ot::DataLengthType)1>::Init(a1, a2, a3);
}

{
  return __ZN2ot11MutableDataILNS_14DataLengthTypeE1EE4InitEPvt(a1, a2, a3);
}

uint64_t ot::GetArrayLength<ot::Dns::TxtEntry,(unsigned short)2>()
{
  return 2LL;
}

{
  return __ZN2ot14GetArrayLengthINS_3Dns8TxtEntryELt2EEEtRAT0__KT_();
}

void otPlatTrelHandleDiscoveredPeerInfo(uint64_t a1, const ot::Trel::Interface::Peer::Info *a2)
{
  uint64_t v4 = v2;
  if ((ot::Instance::IsInitialized(v2) & 1) != 0)
  {
    uint64_t v3 = (ot::Trel::Interface *)ot::Instance::Get<ot::Trel::Interface>((uint64_t)v4);
    ot::Trel::Interface::HandleDiscoveredPeerInfo(v3, a2);
  }

void ot::Trel::Interface::HandleDiscoveredPeerInfo( ot::Trel::Interface *this, const ot::Trel::Interface::Peer::Info *a2)
{
  char v14 = 0;
  if ((*(_BYTE *)this & 1) != 0
    && (*(_BYTE *)this & 2) != 0
    && !ot::Trel::Interface::ParsePeerInfoTxtData( this,  a2,  (ot::Mac::ExtAddress *)v18,  (ot::MeshCoP::ExtendedPanId *)&v17))
  {
    uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ExtAddress  = (const void *)ot::Mac::Mac::GetExtAddress(v2);
    if (ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v18, ExtAddress))
    {
      if ((ot::Trel::Interface::Peer::Info::IsRemoved(a2) & 1) != 0)
      {
        ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Mac::ExtAddress>( (uint64_t)this + 48,  (const ot::Mac::ExtAddress *)v18);
        if (v4) {
          ot::Trel::Interface::RemovePeerEntry(this, v4);
        }
      }

      else
      {
        SockAddr  = (const ot::Ip6::SockAddr *)ot::Trel::Interface::Peer::Info::GetSockAddr(a2);
        ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Ip6::SockAddr>( (uint64_t)this + 48,  SockAddr);
        NewPeerEntry  = v6;
        if (v6 && !ot::Trel::Interface::Peer::Matches(v6, (const ot::Mac::ExtAddress *)v18))
        {
          ot::Trel::Interface::RemovePeerEntry(this, NewPeerEntry);
          NewPeerEntry  = 0LL;
        }

        if (!NewPeerEntry)
        {
          ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Mac::ExtAddress>( (uint64_t)this + 48,  (const ot::Mac::ExtAddress *)v18);
          NewPeerEntry  = v7;
        }

        if (!NewPeerEntry)
        {
          NewPeerEntry  = ot::Trel::Interface::GetNewPeerEntry(this);
          if (!NewPeerEntry) {
            return;
          }
          ot::Trel::Interface::Peer::SetExtAddress(NewPeerEntry, (const ot::Mac::ExtAddress *)v18);
          char v14 = 1;
        }

        if ((v14 & 1) != 0
          || (ExtPanId  = (const void *)ot::Trel::Interface::Peer::GetExtPanId(NewPeerEntry),
              ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(ExtPanId, &v17))
          || (uint64_t v12 = (ot::Ip6::SockAddr *)ot::Trel::Interface::Peer::GetSockAddr(NewPeerEntry),
              __int16 v9 = (ot::Ip6::SockAddr *)ot::Trel::Interface::Peer::Info::GetSockAddr(a2),
              ot::Unequatable<ot::Ip6::SockAddr>::operator!=(v12, v9)))
        {
          ot::Trel::Interface::Peer::SetExtPanId((uint64_t)NewPeerEntry, &v17);
          uint64_t v10 = (const ot::Ip6::SockAddr *)ot::Trel::Interface::Peer::Info::GetSockAddr(a2);
          ot::Trel::Interface::Peer::SetSockAddr(NewPeerEntry, v10);
          if ((v14 & 1) != 0) {
            uint64_t v11 = "Added";
          }
          else {
            uint64_t v11 = "Updated";
          }
          ot::Trel::Interface::Peer::Log(NewPeerEntry, v11);
        }
      }
    }
  }

uint64_t ot::Trel::Interface::ParsePeerInfoTxtData( ot::Trel::Interface *this, const ot::Trel::Interface::Peer::Info *a2, ot::Mac::ExtAddress *a3, ot::MeshCoP::ExtendedPanId *a4)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  char v14 = (char *)a3;
  uint64_t v13 = a4;
  char v8 = 0;
  char v7 = 0;
  ot::Clearable<ot::MeshCoP::ExtendedPanId>::Clear(a4);
  TxtData  = (unsigned __int8 *)ot::Trel::Interface::Peer::Info::GetTxtData(v15);
  Txtunsigned __int8 Length = ot::Trel::Interface::Peer::Info::GetTxtLength(v15);
  ot::Dns::TxtEntry::Iterator::Init((ot::Dns::TxtEntry::Iterator *)v17, TxtData, TxtLength);
  while (1)
  {
    NextEntry  = ot::Dns::TxtEntry::Iterator::GetNextEntry( (ot::Dns::TxtEntry::Iterator *)v17,  (ot::Dns::TxtEntry *)&__s1);
    if (NextEntry) {
      break;
    }
    if (__s1)
    {
      if (!strcmp(__s1, "xa"))
      {
        if ((v8 & 1) != 0) {
          return 6;
        }
        if (v11 != 8LL) {
          return 6;
        }
        ot::Mac::ExtAddress::Set(v14, v10, 0);
        char v8 = 1;
      }

      else if (!strcmp(__s1, "xp"))
      {
        if ((v7 & 1) != 0) {
          return 6;
        }
        if (v11 != 8LL) {
          return 6;
        }
        *(void *)uint64_t v13 = *v10;
        char v7 = 1;
      }
    }
  }

  if (NextEntry == 23)
  {
    NextEntry  = 0;
    if ((v8 & 1) == 0 || (v7 & 1) == 0) {
      return 6;
    }
  }

  return NextEntry;
}

uint64_t ot::Trel::Interface::Peer::Info::IsRemoved(ot::Trel::Interface::Peer::Info *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot4Trel9Interface4Peer4Info9IsRemovedEv(this);
}

void ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Mac::ExtAddress>( uint64_t a1, const ot::Mac::ExtAddress *a2)
{
}

{
  __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE12FindMatchingINS_3Mac10ExtAddressEEEPS3_RKT_(a1, a2);
}

uint64_t ot::Trel::Interface::RemovePeerEntry(ot::Trel::Interface *this, ot::Trel::Interface::Peer *a2)
{
  if (a2 != (ot::Trel::Interface::Peer *)ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Back((uint64_t)this + 48))
  {
    uint64_t v2 = (const void *)ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Back((uint64_t)this + 48);
    memcpy(a2, v2, 0x22uLL);
  }

  return ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::PopBack((uint64_t)this + 48);
}

void ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Ip6::SockAddr>( uint64_t a1, const ot::Ip6::SockAddr *a2)
{
}

{
  __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE12FindMatchingINS_3Ip68SockAddrEEEPS3_RKT_(a1, a2);
}

uint64_t ot::Trel::Interface::Peer::Info::GetSockAddr(ot::Trel::Interface::Peer::Info *this)
{
  return (uint64_t)this + 18;
}

{
  return __ZNK2ot4Trel9Interface4Peer4Info11GetSockAddrEv(this);
}

BOOL ot::Trel::Interface::Peer::Matches(ot::Trel::Interface::Peer *this, const ot::Mac::ExtAddress *a2)
{
  return ot::Equatable<ot::Mac::ExtAddress>::operator==(v2, a2);
}

{
  return __ZNK2ot4Trel9Interface4Peer7MatchesERKNS_3Mac10ExtAddressE(this, a2);
}

ot::Trel::Interface::Peer *ot::Trel::Interface::GetNewPeerEntry(ot::Trel::Interface *this)
{
  unsigned int v22 = this;
  uint64_t v21 = ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::PushBack((uint64_t)this + 48);
  if (!v21)
  {
    int v20 = (char *)this + 48;
    ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::begin();
    unsigned __int16 v19 = v1;
    __int16 v18 = (ot::Trel::Interface::Peer *)ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::end((uint64_t)this + 48);
    while (v19 != v18)
    {
      uint64_t v17 = v19;
      ExtPanId  = (const void *)ot::Trel::Interface::Peer::GetExtPanId(v19);
      uint64_t v2 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
      ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v2);
      if (ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(ExtPanId, v3)) {
        return v17;
      }
      unsigned __int16 v19 = (ot::Trel::Interface::Peer *)((char *)v19 + 34);
    }

    uint64_t v16 = (char *)this + 48;
    ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::begin();
    uint64_t v15 = v4;
    uint64_t v14 = ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::end((uint64_t)this + 48);
    while (v15 != (ot::Trel::Interface::Peer *)v14)
    {
      uint64_t v13 = v15;
      __int16 v9 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
      ot::Trel::Interface::Peer::GetExtAddress(v13);
      if (!ot::NeighborTable::FindNeighbor(v9, v5, 7))
      {
        ot::Mac::Address::Address((ot::Mac::Address *)v12);
        ot::Trel::Interface::Peer::GetExtAddress(v13);
        ot::Mac::Address::SetExtended((uint64_t)v12, v6);
        char v7 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
        if (!ot::NeighborTable::FindRxOnlyNeighborRouter(v7, (const ot::Mac::Address *)v12)) {
          return v13;
        }
      }

      uint64_t v15 = (ot::Trel::Interface::Peer *)((char *)v15 + 34);
    }
  }

  return (ot::Trel::Interface::Peer *)v21;
}

void *ot::Trel::Interface::Peer::SetExtAddress(void *this, const ot::Mac::ExtAddress *a2)
{
  *this  = *(void *)a2;
  return this;
}

{
  return __ZN2ot4Trel9Interface4Peer13SetExtAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::Trel::Interface::Peer::GetExtPanId(ot::Trel::Interface::Peer *this)
{
  return (uint64_t)this + 8;
}

{
  return __ZNK2ot4Trel9Interface4Peer11GetExtPanIdEv(this);
}

BOOL ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_7MeshCoP13ExtendedPanIdEEneERKS2_(a1, a2);
}

uint64_t ot::Trel::Interface::Peer::GetSockAddr(ot::Trel::Interface::Peer *this)
{
  return (uint64_t)this + 16;
}

{
  return __ZNK2ot4Trel9Interface4Peer11GetSockAddrEv(this);
}

BOOL ot::Unequatable<ot::Ip6::SockAddr>::operator!=(ot::Ip6::SockAddr *a1, ot::Ip6::SockAddr *a2)
{
  return !ot::Ip6::SockAddr::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_3Ip68SockAddrEEneERKS2_(a1, a2);
}

uint64_t ot::Trel::Interface::Peer::SetExtPanId(uint64_t result, void *a2)
{
  *(void *)(result + 8)  = *a2;
  return result;
}

{
  return __ZN2ot4Trel9Interface4Peer11SetExtPanIdERKNS_7MeshCoP13ExtendedPanIdE(result, a2);
}

__n128 ot::Trel::Interface::Peer::SetSockAddr(ot::Trel::Interface::Peer *this, const ot::Ip6::SockAddr *a2)
{
  __n128 result = *(__n128 *)a2;
  *((_OWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *(_OWORD *)a2;
  *((_WORD *)this + ot::Tlv::SetLength((uint64_t)this, 16) = *((_WORD *)a2 + 8);
  return result;
}

void ot::Trel::Interface::Peer::Log(ot::Trel::Interface::Peer *this, const char *a2)
{
  char v11 = (char)a2;
  ot::Trel::Interface::Peer::GetExtAddress(this);
  ot::Mac::ExtAddress::ToString(v2, (ot::StringWriter *)v15);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v15);
  ExtPanId  = (ot::MeshCoP::ExtendedPanId *)ot::Trel::Interface::Peer::GetExtPanId(this);
  ot::MeshCoP::ExtendedPanId::ToString(ExtPanId, (ot::StringWriter *)v14);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v14);
  SockAddr  = (ot::Ip6::SockAddr *)ot::Trel::Interface::Peer::GetSockAddr(this);
  ot::Ip6::SockAddr::ToString(SockAddr, (ot::StringWriter *)v13);
  ot::String<(unsigned short)48>::AsCString((uint64_t)v13);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"TrelInterface",  "%s peer mac:%s, xpan:%s, %s",  v5,  v6,  v7,  v8,  v9,  v10,  v11);
}

uint64_t ot::Trel::Interface::Peer::Info::GetTxtData(ot::Trel::Interface::Peer::Info *this)
{
  return *((void *)this + 1);
}

{
  return __ZNK2ot4Trel9Interface4Peer4Info10GetTxtDataEv(this);
}

uint64_t ot::Trel::Interface::Peer::Info::GetTxtLength(ot::Trel::Interface::Peer::Info *this)
{
  return *((unsigned __int16 *)this + 8);
}

{
  return __ZNK2ot4Trel9Interface4Peer4Info12GetTxtLengthEv(this);
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::PushBack(uint64_t a1)
{
  if (ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::IsFull(a1)) {
    return 0LL;
  }
  uint64_t v1 = (unsigned __int16)(*(_WORD *)(a1 + 4352))++;
  return a1 + 34 * v1;
}

  ;
}

{
  return __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE8PushBackEv(a1);
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::end(uint64_t a1)
{
  return a1 + 34LL * *(unsigned __int16 *)(a1 + 4352);
}

  ;
}

{
  return a1 + 34LL * *(unsigned __int16 *)(a1 + 4352);
}

{
  return __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE3endEv(a1);
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE3endEv(a1);
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Back(uint64_t a1)
{
  return ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::At(a1, *(_WORD *)(a1 + 4352) - 1);
}

{
  return __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE4BackEv(a1);
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::PopBack(uint64_t a1)
{
  if (ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::IsEmpty(a1)) {
    return 0LL;
  }
  unsigned __int16 v1 = *(_WORD *)(a1 + 4352) - 1;
  *(_WORD *)(a1 + 435ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v1;
  return a1 + 34LL * v1;
}

{
  return __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE7PopBackEv(a1);
}

uint64_t ot::Trel::Interface::Send(ot::Trel::Interface *this, const ot::Trel::Packet *a2, char a3)
{
  char v25 = a3 & 1;
  unsigned int v24 = 0;
  if ((*(_BYTE *)this & 1) != 0 && (*(_BYTE *)this & 2) != 0)
  {
    if ((*(_BYTE *)this & 4) == 0)
    {
      Header  = (ot::Trel::Header *)ot::Trel::Packet::GetHeader(a2);
      int Type = ot::Trel::Header::GetType(Header);
      if (Type)
      {
        if (Type == 2 || Type == 1)
        {
          uint64_t v9 = (ot::Trel::Header *)ot::Trel::Packet::GetHeader(a2);
          Destination  = (const ot::Mac::ExtAddress *)ot::Trel::Header::GetDestination(v9);
          ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Mac::ExtAddress>( (uint64_t)this + 48,  Destination);
          uint64_t v23 = v11;
          if (v11)
          {
            Instance  = ot::InstanceLocator::GetInstance(this);
            Buffer  = (void *)ot::Trel::Packet::GetBuffer(a2);
            unsigned __int16 Length = ot::Trel::Packet::GetLength(a2);
            otPlatTrelSend((uint64_t)Instance, Buffer, Length, (_WORD *)(v23 + 16));
          }

          else
          {
            return 11;
          }
        }
      }

      else
      {
        ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::begin();
        unsigned int v22 = v5;
        uint64_t v21 = ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::end((uint64_t)this + 48);
        while (v22 != (ot::Trel::Interface::Peer *)v21)
        {
          if ((v25 & 1) != 0
            || (ExtPanId  = (const void *)ot::Trel::Interface::Peer::GetExtPanId(v22),
                uint64_t v6 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this),
                ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v6),
                !ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(ExtPanId, v7)))
          {
            uint64_t v17 = ot::InstanceLocator::GetInstance(this);
            uint64_t v16 = (void *)ot::Trel::Packet::GetBuffer(a2);
            unsigned __int16 v8 = ot::Trel::Packet::GetLength(a2);
            otPlatTrelSend((uint64_t)v17, v16, v8, (_WORD *)v22 + 8);
          }

          unsigned int v22 = (ot::Trel::Interface::Peer *)((char *)v22 + 34);
        }
      }
    }
  }

  else
  {
    return 11;
  }

  return v24;
}

uint64_t ot::Trel::Packet::GetHeader(ot::Trel::Packet *this)
{
  return ot::MutableData<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
}

{
  return __ZNK2ot4Trel6Packet9GetHeaderEv(this);
}

uint64_t ot::Trel::Header::GetType(ot::Trel::Header *this)
{
  return *(_BYTE *)this & 3;
}

{
  return __ZNK2ot4Trel6Header7GetTypeEv(this);
}

uint64_t ot::Trel::Packet::GetBuffer(ot::Trel::Packet *this)
{
  return ot::MutableData<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
}

{
  return __ZNK2ot4Trel6Packet9GetBufferEv(this);
}

uint64_t ot::Trel::Packet::GetLength(ot::Trel::Packet *this)
{
  return (unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
}

{
  return __ZNK2ot4Trel6Packet9GetLengthEv(this);
}

uint64_t ot::Trel::Header::GetDestination(ot::Trel::Header *this)
{
  return (uint64_t)this + 16;
}

{
  return __ZNK2ot4Trel6Header14GetDestinationEv(this);
}

void otPlatTrelHandleReceived(uint64_t a1, unsigned __int8 *a2, unsigned __int16 a3)
{
  uint64_t v10 = v3;
  if ((ot::Instance::IsInitialized(v3) & 1) != 0)
  {
    uint64_t v4 = (ot::Trel::Interface *)ot::Instance::Get<ot::Trel::Interface>((uint64_t)v10);
    ot::Trel::Interface::HandleReceived(v4, a2, a3, v5, v6, v7, v8, v9);
  }

void ot::Trel::Interface::HandleReceived( ot::Trel::Interface *this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10 = a3;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelInterface",  "HandleReceived(aLength:%u)",  a3,  a4,  a5,  a6,  a7,  a8,  a3);
  if ((*(_BYTE *)this & 1) != 0 && (*(_BYTE *)this & 2) != 0 && (*(_BYTE *)this & 4) == 0)
  {
    ot::Trel::Packet::Init((ot::Trel::Interface *)((char *)this + 32), a2, v10);
    uint64_t v8 = (ot::Trel::Link *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Link>(this);
    ot::Trel::Link::ProcessReceivedPacket(v8, (ot::Trel::Interface *)((char *)this + 32));
  }

uint64_t ot::Trel::Packet::Init(ot::Trel::Packet *this, unsigned __int8 *a2, __int16 a3)
{
  return ot::MutableData<(ot::DataLengthType)1>::Init((uint64_t)this, (uint64_t)a2, a3);
}

{
  return __ZN2ot4Trel6Packet4InitEPht(this, a2, a3);
}

uint64_t ot::Trel::Interface::GetNextPeer(ot::Trel::Interface *this, unsigned __int16 *a2)
{
  uint64_t v3 = ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::At((uint64_t)this + 48, *a2);
  if (v3) {
    ++*a2;
  }
  return v3;
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::At( uint64_t a1, unsigned __int16 a2)
{
  else {
    return a1 + 34LL * a2;
  }
}

{
  else {
    return a1 + 34LL * a2;
  }
}

{
  return __ZN2ot5ArrayINS_4Trel9Interface4PeerELt128EtE2AtEt(a1, a2);
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE2AtEt(a1, a2);
}

uint64_t ot::String<(unsigned short)48>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt48EE9AsCStringEv(a1);
}

uint64_t ot::MutableData<(ot::DataLengthType)1>::GetBytes(uint64_t a1)
{
  return ot::Data<(ot::DataLengthType)1>::GetBytes(a1);
}

{
  return __ZNK2ot11MutableDataILNS_14DataLengthTypeE1EE8GetBytesEv(a1);
}

uint64_t ot::TaskletIn<ot::Trel::Interface,&ot::Trel::Interface::RegisterService>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Interface>(a1);
  return ((uint64_t (*)(uint64_t))ot::Trel::Interface::RegisterService)(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Interface>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Trel::Interface>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_4Trel9InterfaceEEERT_v(a1);
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::Array(uint64_t result)
{
  *(_WORD *)(result + 435ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return result;
}

  ;
}

  ;
}

ot::Trel::Interface::Peer *ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Mac::ExtAddress>( uint64_t a1, const ot::Mac::ExtAddress *a2)
{
  uint64_t v7 = 0LL;
  ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::end(a1);
  while (v5 != (ot::Trel::Interface::Peer *)v4)
  {
    if (ot::Trel::Interface::Peer::Matches(v5, a2)) {
      return v5;
    }
    uint64_t v5 = (ot::Trel::Interface::Peer *)((char *)v5 + 34);
  }

  return (ot::Trel::Interface::Peer *)v7;
}

  ;
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE12FindMatchingINS_3Mac10ExtAddressEEEPKS3_RKT_(a1, a2);
}

ot::Trel::Interface::Peer *ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::FindMatching<ot::Ip6::SockAddr>( uint64_t a1, const ot::Ip6::SockAddr *a2)
{
  uint64_t v7 = 0LL;
  ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::end(a1);
  while (v5 != (ot::Trel::Interface::Peer *)v4)
  {
    if (ot::Trel::Interface::Peer::Matches(v5, a2)) {
      return v5;
    }
    uint64_t v5 = (ot::Trel::Interface::Peer *)((char *)v5 + 34);
  }

  return (ot::Trel::Interface::Peer *)v7;
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE12FindMatchingINS_3Ip68SockAddrEEEPKS3_RKT_(a1, a2);
}

BOOL ot::Trel::Interface::Peer::Matches(ot::Trel::Interface::Peer *this, const ot::Ip6::SockAddr *a2)
{
  SockAddr  = (ot::Ip6::SockAddr *)ot::Trel::Interface::Peer::GetSockAddr(this);
  return ot::Ip6::SockAddr::operator==(SockAddr, a2);
}

{
  return __ZNK2ot4Trel9Interface4Peer7MatchesERKNS_3Ip68SockAddrE(this, a2);
}

BOOL ot::Ip6::SockAddr::operator==(ot::Ip6::SockAddr *a1, ot::Ip6::SockAddr *a2)
{
  Port  = (unsigned __int16)ot::Ip6::SockAddr::GetPort(a1);
  BOOL v8 = 0;
  if (Port == (unsigned __int16)ot::Ip6::SockAddr::GetPort(a2))
  {
    ot::Ip6::SockAddr::GetAddress(a1);
    uint64_t v5 = v2;
    ot::Ip6::SockAddr::GetAddress(a2);
    return ot::Equatable<ot::Ip6::Address>::operator==(v5, v3);
  }

  return v8;
}

{
  return __ZNK2ot3Ip68SockAddreqERKS1_(a1, a2);
}

BOOL ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 4352);
  return v2 == (unsigned __int16)ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::GetMaxSize();
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE6IsFullEv(a1);
}

uint64_t ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::GetMaxSize()
{
  return 128LL;
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE10GetMaxSizeEv();
}

BOOL ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::IsEmpty(uint64_t a1)
{
  return *(_WORD *)(a1 + 4352) == 0;
}

{
  return __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE7IsEmptyEv(a1);
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::map[abi:nn180100](uint64_t a1)
{
  return a1;
}

{
  char v3;
  uint64_t v4;
  uint64_t v4 = a1;
  boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&v3);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__tree( a1,  (uint64_t)&v3);
  return a1;
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::~__tree(a1);
  return a1;
}

ot::Posix::Daemon *std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( ot::Posix::Daemon *a1)
{
  return a1;
}

ot::Trel::Link *ot::Trel::Link::Link(ot::Trel::Link *this, ot::Instance *a2)
{
  *((_BYTE *)this + 168)  = 0;
  *((_BYTE *)this + 16ot::MeshCoP::Tlv::SetType(this, 9) = 0;
  *((_WORD *)this + 85)  = -1;
  *((_DWORD *)this + 43)  = 0;
  ot::TaskletIn<ot::Trel::Link,&ot::Trel::Link::HandleTxTasklet>::TaskletIn((void *)this + 22, (uint64_t)a2);
  ot::TimerMilliIn<ot::Trel::Link,&ot::Trel::Link::HandleTimer>::TimerMilliIn( (ot::Trel::Link *)((char *)this + 192),  a2);
  ot::Trel::Interface::Interface((ot::Trel::Link *)((char *)this + 216), a2);
  memset((char *)this + 4672, 0, 0x30uLL);
  memset((char *)this + 4624, 0, 0x30uLL);
  *((_WORD *)this + 2988)  = 0;
  *((_BYTE *)this + 5978)  = 0;
  *((void *)this + 58ot::MeshCoP::Tlv::SetType(this, 4) = (char *)this + 4744;
  ot::Mac::Frame::SetLength((uint64_t)this + 4672, 0);
  ot::Mac::Frame::SetRadioType((uint64_t)this + 4672, 1);
  ot::Mac::Frame::SetRadioType((uint64_t)this + 4624, 1);
  ot::TimerMilli::Start((ot::Trel::Link *)((char *)this + 192), 0x2EEu);
  std::map<std::pair<std::string,unsigned int>,unsigned int>::clear[abi:nn180100]((uint64_t)&mTxPktRecordSentTime);
  return this;
}

{
  ot::Trel::Link::Link(this, a2);
  return this;
}

void ot::Trel::Link::HandleTxTasklet(ot::Trel::Link *this)
{
}

uint64_t ot::Trel::Link::HandleTimer(ot::Trel::Link *this)
{
  unsigned int v22 = this;
  ot::TimerMilli::Start((ot::Trel::Link *)((char *)this + 192), 0x2EEu);
  unsigned __int16 v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v20 = ot::ChildTable::Iterate(v1, 5);
  uint64_t v21 = (ot::ChildTable::IteratorBuilder *)&v20;
  v19[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v20);
  v19[1]  = v2;
  v18[0]  = ot::ChildTable::IteratorBuilder::end(v21);
  v18[1]  = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v19, v18))
  {
    uint64_t v17 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v19);
    ot::Trel::Link::HandleTimer(this, v17);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v19);
  }

  uint64_t v16 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  ot::RouterTable::begin(v16);
  uint64_t v15 = v4;
  uint64_t v14 = ot::RouterTable::end(v16);
  while (v15 != (ot::Neighbor *)v14)
  {
    ot::Trel::Link::HandleTimer(this, v15);
    uint64_t v15 = (ot::Neighbor *)((char *)v15 + 248);
  }

  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = ot::Mle::Mle::GetRole(v5);
  if (!(_BYTE)result) {
    return result;
  }
  if (result == 2 || result == 1)
  {
    uint64_t v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v9);
    ot::Trel::Link::HandleTimer(this, Parent);
LABEL_19:
    uint64_t v11 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ParentCandidate  = (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v11);
    return ot::Trel::Link::HandleTimer(this, ParentCandidate);
  }

  return result;
}

void *ot::TaskletIn<ot::Trel::Link,&ot::Trel::Link::HandleTxTasklet>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Trel::Link,&ot::Trel::Link::HandleTxTasklet>::HandleTasklet);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Trel::Link,&ot::Trel::Link::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Trel::Link,&ot::Trel::Link::HandleTimer>::HandleTimer);
  return a1;
}

void std::map<std::pair<std::string,unsigned int>,unsigned int>::clear[abi:nn180100](uint64_t a1)
{
}

void ot::Trel::Link::AfterInit(ot::Trel::Link *this)
{
}

void ot::Trel::Link::Enable(ot::Trel::Link *this)
{
  if (!*((_BYTE *)this + 168)) {
    ot::Trel::Link::SetState((uint64_t)this, 1u);
  }
  std::map<std::pair<std::string,unsigned int>,unsigned int>::clear[abi:nn180100]((uint64_t)&mTxPktRecordSentTime);
}

void ot::Trel::Link::SetState(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned __int8 *)(a1 + 168) != a2)
  {
    char v8 = ot::Trel::Link::StateToString(*(_BYTE *)(a1 + 168));
    ot::Trel::Link::StateToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"TrelLink", "State: %s -> %s", v2, v3, v4, v5, v6, v7, v8);
    *(_BYTE *)(a1 + 168)  = a2;
  }

void ot::Trel::Link::Disable(ot::Trel::Link *this)
{
  if (*((_BYTE *)this + 168)) {
    ot::Trel::Link::SetState((uint64_t)this, 0);
  }
  std::map<std::pair<std::string,unsigned int>,unsigned int>::clear[abi:nn180100]((uint64_t)&mTxPktRecordSentTime);
}

void ot::Trel::Link::Sleep(ot::Trel::Link *this)
{
  if (*((_BYTE *)this + 168)) {
    ot::Trel::Link::SetState((uint64_t)this, 1u);
  }
}

void ot::Trel::Link::Receive(ot::Trel::Link *this, char a2)
{
  if (!*((_BYTE *)this + 168)) {
    __assert_rtn("Receive", "trel_link.cpp", 129, "mState != kStateDisabled");
  }
  *((_BYTE *)this + 16ot::MeshCoP::Tlv::SetType(this, 9) = a2;
  ot::Trel::Link::SetState((uint64_t)this, 2u);
}

uint64_t ot::Trel::Link::Send(ot::Trel::Link *this)
{
  if (!*((_BYTE *)this + 168)) {
    __assert_rtn("Send", "trel_link.cpp", 136, "mState != kStateDisabled");
  }
  ot::Trel::Link::SetState((uint64_t)this, 3u);
  return ot::Tasklet::Post((ot::Trel::Link *)((char *)this + 176));
}

void ot::Trel::Link::BeginTransmit(ot::Trel::Link *this)
{
  v54  = this;
  ot::Mac::Address::Address((ot::Mac::Address *)v53);
  uint64_t Neighbor = 0LL;
  v48  = 0LL;
  BOOL v47 = 0;
  ot::Trel::Link::GetTrelLinkCounters(this);
  uint64_t v46 = v1;
  if (*((_BYTE *)this + 168) == 3)
  {
    *((_BYTE *)this + 16ot::MeshCoP::Tlv::SetType(this, 9) = ot::Mac::Frame::GetChannel((ot::Trel::Link *)((char *)this + 4672));
    if (ot::Mac::Frame::IsEmpty((ot::Trel::Link *)((char *)this + 4672)))
    {
      ot::Trel::Link::InvokeSendDone((uint64_t)this, 11);
    }

    else
    {
      ot::Mac::Frame::GetDstAddr((ot::Trel::Link *)((char *)this + 4672), (ot::Mac::Address *)v53);
      IgnoreError();
      if (ot::Mac::Address::IsNone((ot::Mac::Address *)v53) || ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v53))
      {
        v51  = 0;
      }

      else
      {
        v51  = 1;
        uint64_t v2 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
        uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v2, (ot::Mac::Address *)v53, 5);
        if (ot::Mac::Address::IsShort((ot::Mac::Address *)v53))
        {
          if (Neighbor)
          {
            ExtAddress  = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(Neighbor);
            ot::Mac::Address::SetExtended((uint64_t)v53, ExtAddress);
          }

          else
          {
            v51  = 0;
          }
        }
      }

      if (!v51)
      {
        if (ot::Mac::Frame::GetSecurityEnabled((ot::Trel::Link *)((char *)this + 4672)))
        {
          ot::Mac::Frame::GetKeyIdMode((ot::Trel::Link *)((char *)this + 4672), &v45);
          IgnoreError();
          BOOL v47 = v45 == 16;
        }

        else
        {
          BOOL v47 = 1;
        }

        ++*(_DWORD *)(v46 + 4);
        if (Neighbor) {
          ++*((_DWORD *)Neighbor + 2);
        }
      }

      v35  = v51;
      Psdu  = ot::Mac::Frame::GetPsdu((ot::Trel::Link *)((char *)this + 4672));
      __int16 Length = ot::Mac::Frame::GetLength((ot::Trel::Link *)((char *)this + 4672));
      ot::Trel::Packet::Init((ot::Trel::Packet *)v50, v35, Psdu, Length);
      if (Neighbor)
      {
        ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
        ot::Trel::Header::SetAckMode(v8, 1);
        ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
        unsigned int v9 = *((_DWORD *)Neighbor + 10);
        *((_DWORD *)Neighbor + 10)  = v9 + 1;
        ot::Trel::Header::SetPacketNumber(v10, v9);
        ++*((_WORD *)Neighbor + 22);
      }

      else
      {
        ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
        ot::Trel::Header::SetAckMode(v5, 0);
        ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
        unsigned int v6 = *((_DWORD *)this + 43);
        *((_DWORD *)this + 43)  = v6 + 1;
        ot::Trel::Header::SetPacketNumber(v7, v6);
        ++*(_DWORD *)(v46 + 8);
      }

      ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
      unsigned int v33 = v11;
      Channel  = ot::Mac::Frame::GetChannel((ot::Trel::Link *)((char *)this + 4672));
      ot::Trel::Header::SetChannel((uint64_t)v33, Channel);
      ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
      ot::Trel::Header::SetPanId(v13, v52);
      ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
      v34  = v14;
      uint64_t v15 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      uint64_t v16 = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v15);
      ot::Trel::Header::SetSource((uint64_t)v34, v16);
      if (v51 == 1)
      {
        if (!ot::Mac::Address::IsExtended((ot::Mac::Address *)v53)) {
          __assert_rtn("BeginTransmit", "trel_link.cpp", 248, "destAddr.IsExtended()");
        }
        ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
        v32  = v17;
        ot::Mac::Address::GetExtended((ot::Mac::Address *)v53);
        ot::Trel::Header::SetDestination((uint64_t)v32, v18);
        ++*(_DWORD *)v46;
        if (Neighbor)
        {
          ++*((_DWORD *)Neighbor + 1);
          unsigned __int16 v19 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(Neighbor);
          ot::Mac::ExtAddress::ToString(v19, (ot::StringWriter *)v56);
          char v20 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v56);
          std::string::basic_string[abi:nn180100]<0>(&v44, v20);
          ExpectedTrelAckNumber  = ot::Trel::NeighborInfo::GetExpectedTrelAckNumber((ot::Neighbor *)((char *)Neighbor + 4));
          uint64_t v21 = (ot::TimerMilli *)std::pair<std::string,unsigned int>::pair[abi:nn180100]<std::string&,unsigned int,0>( (uint64_t)&v42,  &v44,  &ExpectedTrelAckNumber);
          int Now = ot::TimerMilli::GetNow(v21);
          int Value = ot::Time::GetValue((ot::Time *)&Now);
          std::pair<std::pair<std::string,unsigned int> const,unsigned int>::pair[abi:nn180100]<true,0>( (uint64_t)&v43,  (uint64_t)&v42,  &Value);
          std::map<std::pair<std::string,unsigned int>,unsigned int>::insert[abi:nn180100]( (uint64_t)&mTxPktRecordSentTime,  (uint64_t)&v43);
          std::pair<std::pair<std::string,unsigned int> const,unsigned int>::~pair(&v43);
          std::pair<std::string,unsigned int>::~pair(&v42);
          std::string::~string(&v44);
        }
      }

      ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v50);
      ot::Trel::Header::ToString(v22, (ot::StringWriter *)v55);
      char v31 = ot::String<(unsigned short)128>::AsCString((uint64_t)v55);
      ot::Trel::Packet::GetPayloadLength((ot::Trel::Packet *)v50);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelLink",  "BeginTransmit() [%s] plen:%d",  v23,  v24,  v25,  v26,  v27,  v28,  v31);
      *(void *)(v46 + 152) += (unsigned __int16)ot::Trel::Packet::GetLength((ot::Trel::Packet *)v50);
      if (ot::Trel::Interface::Send( (ot::Trel::Link *)((char *)this + 216),  (const ot::Trel::Packet *)v50,  v47))
      {
        ot::Trel::Link::InvokeSendDone((uint64_t)this, 11);
      }

      else
      {
        if (ot::Mac::Frame::GetAckRequest((ot::Trel::Link *)((char *)this + 4672)))
        {
          unsigned __int16 v38 = 2;
          char v29 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          if (!ot::Mle::Mle::IsRxOnWhenIdle(v29)) {
            unsigned __int16 v38 = 18;
          }
          ot::Encoding::LittleEndian::WriteUint16(v38, (_WORD *)this + 2988, v30);
          *((_BYTE *)this + 5978)  = ot::Mac::Frame::GetSequence((ot::Trel::Link *)((char *)this + 4672));
          *((void *)this + 578)  = (char *)this + 5976;
          *((_WORD *)this + 23ot::Tlv::SetLength((uint64_t)this, 16) = 3;
          *((_BYTE *)this + 463ot::MeshCoP::Tlv::SetType(this, 4) = ot::Mac::Frame::GetChannel((ot::Trel::Link *)((char *)this + 4672));
          *((_BYTE *)this + 4635)  = 1;
          *((void *)this + 580)  = 0LL;
          *((_BYTE *)this + 4653)  = 127;
          *((_BYTE *)this + 465ot::MeshCoP::Tlv::SetType(this, 4) = 0;
          *((_BYTE *)this + 4655) &= ~1u;
          v48  = (ot::Trel::Link *)((char *)this + 4624);
        }

        ot::Trel::Link::InvokeSendDone((uint64_t)this, 0, v48);
      }
    }
  }

void ot::Trel::Link::InvokeSendDone(uint64_t a1, int a2)
{
}

{
  __ZN2ot4Trel4Link14InvokeSendDoneE7otError(a1, a2);
}

void ot::Trel::Packet::GetHeader(ot::Trel::Packet *this)
{
}

{
  __ZN2ot4Trel6Packet9GetHeaderEv(this);
}

uint64_t ot::Trel::Header::SetPacketNumber(ot::Trel::Header *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = result;
  return result;
}

{
  return __ZN2ot4Trel6Header15SetPacketNumberEj(this, a2);
}

uint64_t ot::Trel::Header::SetChannel(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = a2;
  return this;
}

{
  return __ZN2ot4Trel6Header10SetChannelEh(this, a2);
}

uint64_t ot::Trel::Header::SetPanId(ot::Trel::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = result;
  return result;
}

{
  return __ZN2ot4Trel6Header8SetPanIdEt(this, a2);
}

uint64_t ot::Trel::Header::SetSource(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 8)  = *(void *)a2;
  return this;
}

{
  return __ZN2ot4Trel6Header9SetSourceERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::Trel::Header::SetDestination(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + ot::Tlv::SetLength((uint64_t)this, 16) = *(void *)a2;
  return this;
}

{
  return __ZN2ot4Trel6Header14SetDestinationERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::insert[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  v4[3]  = a1;
  v4[2]  = a2;
  v4[0]  = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__insert_unique[abi:nn180100]( a1,  a2);
  v4[1]  = v2;
  std::pair<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL,0>( (uint64_t)&v5,  (uint64_t)v4);
  return v5;
}

uint64_t ot::Trel::NeighborInfo::GetExpectedTrelAckNumber(ot::Trel::NeighborInfo *this)
{
  int v2 = *((_DWORD *)this + 9);
  return v2 - ot::Trel::NeighborInfo::GetPendingTrelAckCount(this);
}

{
  return __ZNK2ot4Trel12NeighborInfo24GetExpectedTrelAckNumberEv(this);
}

uint64_t std::pair<std::string,unsigned int>::pair[abi:nn180100]<std::string&,unsigned int,0>( uint64_t a1, const std::string *a2, _DWORD *a3)
{
  return a1;
}

{
  uint64_t result;
  std::string::basic_string((std::string *)a1, a2);
  uint64_t result = a1;
  *(_DWORD *)(a1 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *a3;
  return result;
}

uint64_t std::pair<std::pair<std::string,unsigned int> const,unsigned int>::pair[abi:nn180100]<true,0>( uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return a1;
}

{
  uint64_t result;
  std::pair<std::string,unsigned int>::pair[abi:nn180100](a1, a2);
  uint64_t result = a1;
  *(_DWORD *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *a3;
  return result;
}

std::string *std::pair<std::pair<std::string,unsigned int> const,unsigned int>::~pair(std::string *a1)
{
  return a1;
}

{
  std::pair<std::string,unsigned int>::~pair(a1);
  return a1;
}

std::string *std::pair<std::string,unsigned int>::~pair(std::string *a1)
{
  return a1;
}

{
  std::string::~string(a1);
  return a1;
}

uint64_t ot::Trel::Packet::GetPayloadLength(ot::Trel::Packet *this)
{
  __int16 Length = ot::Trel::Packet::GetLength(this);
  Header  = (ot::Trel::Header *)ot::Trel::Packet::GetHeader(this);
  return (unsigned __int16)(Length - ot::Trel::Header::GetLength(Header));
}

{
  return __ZNK2ot4Trel6Packet16GetPayloadLengthEv(this);
}

void ot::Trel::Link::InvokeSendDone(uint64_t a1, int a2, ot::Mac::RxFrame *a3)
{
  uint64_t v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  ot::Mac::Mac::RecordFrameTransmitStatus(v3, (ot::Mac::Frame *)(a1 + 4672), a3, a2, 0, 0);
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  ot::Mac::Mac::HandleTransmitDone(v4, (ot::Mac::Frame *)(a1 + 4672), a3, a2);
}

BOOL ot::Trel::Link::HandleTimer(ot::Trel::Link *this, ot::Neighbor *a2)
{
  IsStateInvalid  = ot::Neighbor::IsStateInvalid(a2);
  if (!IsStateInvalid)
  {
    while (*((_WORD *)a2 + 23))
    {
      --*((_WORD *)a2 + 23);
      ot::Trel::Link::ReportDeferredAckStatus(this, a2, 14);
      IsStateInvalid  = ot::Neighbor::IsStateInvalid(a2);
      if (IsStateInvalid) {
        return ot::Trel::cleanTxPktRecordTimeMap((ot::Trel *)IsStateInvalid);
      }
    }

    *((_WORD *)a2 + 23)  = *((_WORD *)a2 + 22);
    *((_WORD *)a2 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  }

  return ot::Trel::cleanTxPktRecordTimeMap((ot::Trel *)IsStateInvalid);
}

void ot::RouterTable::begin(ot::RouterTable *this)
{
}

{
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
}

{
  __ZN2ot11RouterTable5beginEv(this);
}

{
  __ZNK2ot11RouterTable5beginEv(this);
}

uint64_t ot::RouterTable::end(ot::RouterTable *this)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
}

{
  return __ZN2ot11RouterTable3endEv(this);
}

{
  return __ZNK2ot11RouterTable3endEv(this);
}

BOOL ot::Trel::cleanTxPktRecordTimeMap(ot::Trel *this)
{
  BOOL result = std::map<std::pair<std::string,unsigned int>,unsigned int>::empty[abi:nn180100]();
  if (!result)
  {
    unsigned int v9 = (ot::TimerMilli *)std::map<std::pair<std::string,unsigned int>,unsigned int>::begin[abi:nn180100]();
    int Now = ot::TimerMilli::GetNow(v9);
    int Value = ot::Time::GetValue((ot::Time *)&Now);
    while (1)
    {
      uint64_t v6 = std::map<std::pair<std::string,unsigned int>,unsigned int>::end[abi:nn180100]();
      BOOL result = std::operator!=[abi:nn180100](&v9, &v6);
      if (!result) {
        break;
      }
      int v5 = Value;
      std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator->[abi:nn180100]((uint64_t)&v9);
      if (v5 == *(_DWORD *)(v2 + 32)
        || (int v4 = Value,
            std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator->[abi:nn180100]((uint64_t)&v9),
            (v4 - *(_DWORD *)(v3 + 32)) <= 0x3E8))
      {
        std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator++[abi:nn180100]((uint64_t *)&v9);
      }

      else
      {
        unsigned int v9 = (ot::TimerMilli *)std::map<std::pair<std::string,unsigned int>,unsigned int>::erase[abi:nn180100]( (uint64_t)&mTxPktRecordSentTime,  (uint64_t)v9);
      }
    }
  }

  return result;
}

BOOL std::map<std::pair<std::string,unsigned int>,unsigned int>::empty[abi:nn180100]()
{
  return *v0 == 0LL;
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::begin[abi:nn180100]()
{
  uint64_t v1 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::begin[abi:nn180100]();
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( &v2,  v1);
  return v2;
}

BOOL std::operator!=[abi:nn180100](void *a1, void *a2)
{
  return std::operator!=[abi:nn180100](a1, a2);
}

{
  return !std::operator==[abi:nn180100](a1, a2);
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::end[abi:nn180100]()
{
  uint64_t v1 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::end[abi:nn180100]();
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( &v2,  v1);
  return v2;
}

void std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator->[abi:nn180100]( uint64_t a1)
{
}

uint64_t std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator++[abi:nn180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator++[abi:nn180100](a1);
  return v2;
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::erase[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v6 = a1;
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( &v4,  a2);
  uint64_t v5 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::erase( a1,  v4);
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( &v8,  v5);
  return v8;
}

void ot::Trel::Link::ReportDeferredAckStatus(ot::InstanceLocator *a1, ot::Neighbor *a2, int a3)
{
  ExtAddress  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(a2);
  ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v15);
  char v11 = ot::String<(unsigned short)17>::AsCString((uint64_t)v15);
  ot::ErrorToString(a3);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelLink",  "ReportDeferredAckStatus(): %s for %s",  v4,  v5,  v6,  v7,  v8,  v9,  v11);
  __int16 v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  ot::MeshForwarder::HandleDeferredAck(v10, a2, a3);
}

void ot::Trel::Link::ProcessReceivedPacket(ot::Trel::Link *this, ot::Trel::Packet *a2)
{
  uint64_t v27 = v2;
  if (ot::Trel::Packet::IsHeaderValid(a2))
  {
    ot::Trel::Packet::GetHeader(a2);
    char Type = ot::Trel::Header::GetType(v3);
    *(void *)(v27 + 144) += (unsigned __int16)ot::Trel::Packet::GetLength(a2);
    if (Type == 2
      || (*((_BYTE *)this + 168) == 2 || *((_BYTE *)this + 168) == 3)
      && (ot::Trel::Packet::GetHeader(a2),
          *((unsigned __int8 *)this + 169) == ot::Trel::Header::GetChannel(v4)))
    {
      if (*((unsigned __int16 *)this + 85) == 0xFFFF
        || (ot::Trel::Packet::GetHeader(a2),
            PanId  = ot::Trel::Header::GetPanId(v5),
            PanId == *((unsigned __int16 *)this + 85))
        || PanId == 0xFFFF)
      {
        ot::Trel::Packet::GetHeader(a2);
        Source  = (const void *)ot::Trel::Header::GetSource(v6);
        uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ExtAddress  = (const void *)ot::Mac::Mac::GetExtAddress(v7);
        if (ot::Unequatable<ot::Mac::ExtAddress>::operator!=(Source, ExtAddress))
        {
          if (Type)
          {
            ot::Trel::Packet::GetHeader(a2);
            Destination  = (const void *)ot::Trel::Header::GetDestination(v9);
            __int16 v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            char v11 = (const void *)ot::Mac::Mac::GetExtAddress(v10);
            if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(Destination, v11)) {
              return;
            }
            if (Type == 2)
            {
              ot::Trel::Link::HandleAck(this, a2);
              return;
            }

            ++*(_DWORD *)(v27 + 28);
          }

          else
          {
            ++*(_DWORD *)(v27 + 32);
          }

          ot::Trel::Packet::GetHeader(a2);
          ot::Trel::Header::ToString(v12, (ot::StringWriter *)v30);
          char v22 = ot::String<(unsigned short)128>::AsCString((uint64_t)v30);
          ot::Trel::Packet::GetPayloadLength(a2);
          ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelLink",  "ReceivedPacket() [%s] plen:%d",  v13,  v14,  v15,  v16,  v17,  v18,  v22);
          ot::Trel::Packet::GetHeader(a2);
          if (ot::Trel::Header::GetAckMode(v19)) {
            ot::Trel::Link::SendAck(this, a2);
          }
          *((void *)this + 578)  = ot::Trel::Packet::GetPayload(a2);
          *((_WORD *)this + 23ot::Tlv::SetLength((uint64_t)this, 16) = ot::Trel::Packet::GetPayloadLength(a2);
          ot::Trel::Packet::GetHeader(a2);
          *((_BYTE *)this + 463ot::MeshCoP::Tlv::SetType(this, 4) = ot::Trel::Header::GetChannel(v20);
          *((_BYTE *)this + 4635)  = 1;
          *((void *)this + 580)  = 0LL;
          *((_BYTE *)this + 4653)  = -20;
          *((_BYTE *)this + 465ot::MeshCoP::Tlv::SetType(this, 4) = 0;
          *((_BYTE *)this + 4655)  = *((_BYTE *)this + 4655) & 0xFE | 1;
          uint64_t v21 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
          ot::Mac::Mac::HandleReceivedFrame(v21, (ot::Trel::Link *)((char *)this + 4624), 0);
        }
      }
    }
  }

uint64_t ot::Trel::Header::GetChannel(ot::Trel::Header *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot4Trel6Header10GetChannelEv(this);
}

uint64_t ot::Trel::Header::GetPanId(ot::Trel::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot4Trel6Header8GetPanIdEv(this);
}

uint64_t ot::Trel::Header::GetSource(ot::Trel::Header *this)
{
  return (uint64_t)this + 8;
}

{
  return __ZNK2ot4Trel6Header9GetSourceEv(this);
}

BOOL ot::Trel::Link::HandleAck(ot::Trel::Link *this, ot::Trel::Packet *a2)
{
  uint64_t v25 = this;
  uint64_t v24 = a2;
  ot::Mac::Address::Address((ot::Mac::Address *)v22);
  ot::Trel::Link::GetTrelLinkCounters(this);
  uint64_t v19 = v2;
  ot::Trel::Packet::GetHeader(v24);
  ot::Trel::Header::ToString(v3, (ot::StringWriter *)v26);
  char v4 = ot::String<(unsigned short)128>::AsCString((uint64_t)v26);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"TrelLink", "HandleAck() [%s]", v5, v6, v7, v8, v9, v10, v4);
  ot::Trel::Packet::GetHeader(v24);
  Source  = (const ot::Mac::ExtAddress *)ot::Trel::Header::GetSource(v11);
  ot::Mac::Address::SetExtended((uint64_t)v22, Source);
  uint64_t v13 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
  uint64_t Neighbor = ot::NeighborTable::FindNeighbor(v13, (ot::Mac::Address *)v22, 5);
  uint64_t v21 = (ot::Neighbor *)Neighbor;
  if (Neighbor)
  {
    ot::Trel::Packet::GetHeader(v24);
    PacketNumber  = ot::Trel::Header::GetPacketNumber(v15);
    uint64_t Neighbor = ot::Trel::NeighborInfo::IsRxAckNumberValid((ot::Neighbor *)((char *)v21 + 4), PacketNumber);
    if ((Neighbor & 1) != 0)
    {
      ++*((_DWORD *)v21 + 4);
      ++*(_DWORD *)(v19 + 36);
      do
      {
        else {
          int v16 = 14;
        }
        int v23 = v16;
        ot::Trel::NeighborInfo::DecrementPendingTrelAckCount((uint64_t)v21 + 4);
        ot::Trel::Link::ReportDeferredAckStatus(this, v21, v23);
        ot::Trel::Link::UpdateTrelStats(this, v21, v19, PacketNumber, v23);
        uint64_t Neighbor = ot::Neighbor::IsStateInvalid(v21);
      }

      while ((Neighbor & 1) == 0 && v23 == 14);
    }

    else
    {
      ++*(_DWORD *)(v19 + 40);
      ++*((_DWORD *)v21 + 5);
    }
  }

  return ot::Trel::cleanTxPktRecordTimeMap((ot::Trel *)Neighbor);
}

BOOL ot::Trel::Header::GetAckMode(ot::Trel::Header *this)
{
  return (*(_BYTE *)this & 4) != 0;
}

{
  return __ZNK2ot4Trel6Header10GetAckModeEv(this);
}

void ot::Trel::Link::SendAck(ot::Trel::Link *this, ot::Trel::Packet *a2)
{
  v35  = this;
  v34  = a2;
  ot::Trel::Packet::Init((ot::Trel::Packet *)v33, (unsigned __int8 *)this + 5952, 24);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  ot::Trel::Header::Init(v2, 2);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  ot::Trel::Header::SetAckMode(v3, 0);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  uint64_t v27 = v4;
  ot::Trel::Packet::GetHeader(v34);
  Channel  = ot::Trel::Header::GetChannel(v5);
  ot::Trel::Header::SetChannel((uint64_t)v27, Channel);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  uint64_t v28 = v7;
  ot::Trel::Packet::GetHeader(v34);
  PanId  = ot::Trel::Header::GetPanId(v8);
  ot::Trel::Header::SetPanId(v28, PanId);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  char v29 = v10;
  ot::Trel::Packet::GetHeader(v34);
  PacketNumber  = ot::Trel::Header::GetPacketNumber(v11);
  ot::Trel::Header::SetPacketNumber(v29, PacketNumber);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  unsigned int v30 = v13;
  uint64_t v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v14);
  ot::Trel::Header::SetSource((uint64_t)v30, ExtAddress);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  char v31 = v16;
  ot::Trel::Packet::GetHeader(v34);
  Source  = (const ot::Mac::ExtAddress *)ot::Trel::Header::GetSource(v17);
  ot::Trel::Header::SetDestination((uint64_t)v31, Source);
  ot::Trel::Packet::GetHeader((ot::Trel::Packet *)v33);
  ot::Trel::Header::ToString(v19, (ot::StringWriter *)v36);
  char v20 = ot::String<(unsigned short)128>::AsCString((uint64_t)v36);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"TrelLink", "SendAck [%s]", v21, v22, v23, v24, v25, v26, v20);
  ot::Trel::Interface::Send((ot::Trel::Link *)((char *)this + 216), (const ot::Trel::Packet *)v33, 0);
  IgnoreError();
}

uint64_t ot::Trel::Packet::GetPayload(ot::Trel::Packet *this)
{
  uint64_t v5 = v1;
  ot::Trel::Packet::GetHeader(this);
  return v5 + (unsigned __int16)ot::Trel::Header::GetLength(v2);
}

{
  return __ZN2ot4Trel6Packet10GetPayloadEv(this);
}

void ot::Trel::Link::UpdateTrelStats(ot::InstanceLocator *a1, ot::Neighbor *a2, uint64_t a3, int a4, int a5)
{
  unsigned int v33 = a1;
  v32  = a2;
  uint64_t v31 = a3;
  int v30 = a4;
  int v29 = a5;
  BOOL v28 = 0;
  updated  = 0;
  if (a2 && v31)
  {
    int Rloc16 = (unsigned __int16)ot::Neighbor::GetRloc16(v32);
    uint64_t v18 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
    unsigned __int16 v5 = ot::Neighbor::GetRloc16(v32);
    NextHop  = ot::Mle::MleRouter::GetNextHop(v18, v5);
    BOOL v28 = Rloc16 == (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(NextHop);
    if (v28) {
      uint64_t v26 = v31 + 80;
    }
    else {
      uint64_t v26 = v31 + 48;
    }
    ExtAddress  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v32);
    ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v34);
    uint64_t v22 = ot::String<(unsigned short)17>::AsCString((uint64_t)v34);
    v23[0]  = std::make_pair[abi:nn180100]<char const*,unsigned int &>(&v22, &v30);
    v23[1]  = v8;
    std::pair<std::string,unsigned int>::pair[abi:nn180100]<char const*,unsigned int,0>((uint64_t)&v24, (uint64_t)v23);
    uint64_t v25 = std::map<std::pair<std::string,unsigned int>,unsigned int>::find[abi:nn180100]( (uint64_t)&mTxPktRecordSentTime,  (uint64_t)&v24);
    mMapIter  = v25;
    std::pair<std::string,unsigned int>::~pair(&v24);
    uint64_t v21 = std::map<std::pair<std::string,unsigned int>,unsigned int>::end[abi:nn180100]();
    if (std::operator!=[abi:nn180100](&mMapIter, &v21))
    {
      if (!v29)
      {
        std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator->[abi:nn180100]((uint64_t)&mMapIter);
        updated  = ot::Trel::Link::UpdateTrelTxDelayStats(a1, *(_DWORD *)(v9 + 32), v26);
        std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator->[abi:nn180100]((uint64_t)&mMapIter);
        updated  = ot::Trel::Link::UpdateTrelTxDelayStats(a1, *(_DWORD *)(v10 + 32), v31 + 112);
      }

      std::map<std::pair<std::string,unsigned int>,unsigned int>::erase[abi:nn180100]( (uint64_t)&mTxPktRecordSentTime,  mMapIter);
    }

    char v17 = std::map<std::pair<std::string,unsigned int>,unsigned int>::size[abi:nn180100]();
    ot::Neighbor::GetRloc16(v32);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"TrelLink",  "UpdateTrelStats() txPktsTimeStampMapSize.size:%zu neighbor rloc:%u pkt num:%u overall tx_delay:%u tx_delay_avg:%u tx_delay_min:%u tx_delay_max:%u",  v11,  v12,  v13,  v14,  v15,  v16,  v17);
  }

uint64_t ot::Mle::MleRouter::GetNextHop(ot::Mle::MleRouter *this, unsigned __int16 a2)
{
  return (unsigned __int16)ot::RouterTable::GetNextHop((ot::Mle::MleRouter *)((char *)this + 38136), a2);
}

{
  return __ZN2ot3Mle9MleRouter10GetNextHopEt(this, a2);
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::find[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::find<std::pair<std::string,unsigned int>>( a1,  a2);
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( &v4,  v3);
  return v4;
}

uint64_t std::make_pair[abi:nn180100]<char const*,unsigned int &>(void *a1, _DWORD *a2)
{
  return v3;
}

uint64_t std::pair<std::string,unsigned int>::pair[abi:nn180100]<char const*,unsigned int,0>( uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;
  std::string::basic_string[abi:nn180100]<0>((std::string *)a1, *(const char **)a2);
  BOOL result = a1;
  *(_DWORD *)(a1 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t ot::Trel::Link::UpdateTrelTxDelayStats(ot::TimerMilli *a1, int a2, uint64_t a3)
{
  uint64_t v9 = a1;
  int v8 = a2;
  uint64_t v7 = a3;
  int Now = ot::TimerMilli::GetNow(a1);
  int Value = ot::Time::GetValue((ot::Time *)&Now);
  unsigned int v6 = Value - v8;
  *(void *)(v7 + 16) += (Value - v8);
  ++*(_DWORD *)(v7 + 24);
  if (v6 > *(_DWORD *)v7) {
    *(_DWORD *)uint64_t v7 = v6;
  }
  if (v6 < *(_DWORD *)(v7 + 4) || *(_DWORD *)(v7 + 24) == 1) {
    *(_DWORD *)(v7 + ot::MeshCoP::Tlv::SetType(this, 4) = v6;
  }
  *(_DWORD *)(v7 + 8)  = *(void *)(v7 + 16) / (unint64_t)*(unsigned int *)(v7 + 24);
  return v6;
}

uint64_t std::map<std::pair<std::string,unsigned int>,unsigned int>::size[abi:nn180100]()
{
  return *(void *)v0;
}

uint64_t ot::Trel::Header::GetPacketNumber(ot::Trel::Header *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 1));
}

{
  return __ZNK2ot4Trel6Header15GetPacketNumberEv(this);
}

BOOL ot::Trel::NeighborInfo::IsRxAckNumberValid(ot::Trel::NeighborInfo *this, int a2)
{
  BOOL v5 = 0;
  if (ot::Trel::NeighborInfo::GetPendingTrelAckCount(this))
  {
    unsigned int v3 = a2 - ot::Trel::NeighborInfo::GetExpectedTrelAckNumber(this);
    return v3 < ot::Trel::NeighborInfo::GetPendingTrelAckCount(this);
  }

  return v5;
}

{
  return __ZNK2ot4Trel12NeighborInfo18IsRxAckNumberValidEj(this, a2);
}

uint64_t ot::Trel::NeighborInfo::DecrementPendingTrelAckCount(uint64_t this)
{
  if (*(_WORD *)(this + 42))
  {
    --*(_WORD *)(this + 42);
  }

  else if (*(_WORD *)(this + 40))
  {
    --*(_WORD *)(this + 40);
  }

  return this;
}

{
  return __ZN2ot4Trel12NeighborInfo28DecrementPendingTrelAckCountEv(this);
}

_BYTE *ot::Trel::Header::Init(_BYTE *result, char a2)
{
  *BOOL result = a2;
  return result;
}

{
  return __ZN2ot4Trel6Header4InitENS1_4TypeE(result, a2);
}

char *ot::Trel::Link::StateToString(unsigned __int8 a1)
{
  return ot::Trel::Link::StateToString(ot::Trel::Link::State)::kStateStrings[a1];
}

_BYTE *ot::Trel::Link::HandleNotifierEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  BOOL result = (_BYTE *)ot::Events::Contains(&v11, 0x20000LL);
  return result;
}

uint64_t ot::Trel::NeighborInfo::GetPendingTrelAckCount(ot::Trel::NeighborInfo *this)
{
  return *((unsigned __int16 *)this + 21) + *((unsigned __int16 *)this + 20);
}

{
  return __ZNK2ot4Trel12NeighborInfo22GetPendingTrelAckCountEv(this);
}

uint64_t ot::Trel::Header::GetLength(ot::Trel::Header *this)
{
  char Type = ot::Trel::Header::GetType(this);
  return (unsigned __int16)ot::Trel::Header::GetSize(Type);
}

  ;
}

{
  return __ZNK2ot4Trel6Header9GetLengthEv(this);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::end(uint64_t a1)
{
  return a1 + 248LL * *(unsigned __int8 *)(a1 + 7936);
}

{
  return a1 + 248LL * *(unsigned __int8 *)(a1 + 7936);
}

{
  return __ZN2ot5ArrayINS_6RouterELt32EhE3endEv(a1);
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE3endEv(a1);
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__tree( uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>>::__compressed_pair[abi:nn180100]<true,void>((void *)(a1 + 8));
  uint64_t v8 = 0;
  std::__compressed_pair<unsigned long,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>>::__compressed_pair[abi:nn180100]<int,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true> const&>( (void *)(a1 + 16),  &v8);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  uint64_t v6 = v2;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  uint64_t v4 = v3;
  BOOL result = a1;
  *uint64_t v4 = v6;
  return result;
}

void *std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>>::__compressed_pair[abi:nn180100]<true,void>( void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__tree_end_node<std::__tree_node_base<void *> *>,0,false>::__compressed_pair_elem[abi:nn180100](a1);
  std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair<unsigned long,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>>::__compressed_pair[abi:nn180100]<int,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true> const&>( void *a1, int *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:nn180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,1,true>::__compressed_pair_elem[abi:nn180100]<std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true> const&,void>();
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]()
{
}

void *std::__compressed_pair_elem<std::__tree_end_node<std::__tree_node_base<void *> *>,0,false>::__compressed_pair_elem[abi:nn180100]( void *a1)
{
  return a1;
}

void *std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:nn180100]<int,void>( void *result, int *a2)
{
  *BOOL result = *a2;
  return result;
}

  ;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::~__tree( uint64_t a1)
{
  return a1;
}

{
  void *v1;
  uint64_t v1 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::destroy( a1,  v1);
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::destroy( a1,  a2[1]);
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__node_alloc[abi:nn180100]();
    uint64_t v6 = v2;
    uint64_t v4 = v2;
    std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::destroy[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,void,void>( v4,  v3);
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::deallocate[abi:nn180100]( v6,  a2);
  }

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]()
{
  return *(void *)v0;
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__node_alloc[abi:nn180100]()
{
}

std::string *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::destroy[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,void,void>( uint64_t a1, std::string *a2)
{
  return std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,0>(a2);
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEjEEjEEPvEEEEE7destroyB8nn180100INS4_IKSA_jEEvvEEvRSE_PT_( a1,  a2);
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::deallocate[abi:nn180100]( uint64_t a1, void *a2)
{
}

std::string *std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,0>( std::string *a1)
{
  return std::pair<std::pair<std::string,unsigned int> const,unsigned int>::~pair(a1);
}

void std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::deallocate[abi:nn180100]( uint64_t a1, void *a2)
{
}

uint64_t ot::TaskletIn<ot::Trel::Link,&ot::Trel::Link::HandleTxTasklet>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Link>(a1);
  return ((uint64_t (*)(uint64_t))ot::Trel::Link::HandleTxTasklet)(v2);
}

uint64_t ot::TimerMilliIn<ot::Trel::Link,&ot::Trel::Link::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Trel::Link *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Link>(a1);
  return ot::Trel::Link::HandleTimer(v2);
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::clear( uint64_t a1)
{
  uint64_t v1 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::destroy( a1,  v1);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  *uint64_t v2 = 0LL;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  uint64_t v6 = v3;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  *uint64_t v4 = v6;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  *uint64_t v5 = 0LL;
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]()
{
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__insert_unique[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  return std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned int>,std::pair<std::pair<std::string,unsigned int> const,unsigned int>>( a1,  v2,  a2);
}

uint64_t std::pair<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL,0>( uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;
  std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( (void *)a1,  *(void *)a2);
  BOOL result = a1;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8) & 1;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned int>,std::pair<std::pair<std::string,unsigned int> const,unsigned int>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  uint64_t v12 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__find_equal<std::pair<std::string,unsigned int>>( a1,  (uint64_t)&v13,  a2);
  uint64_t v11 = *v12;
  char v10 = 0;
  if (!*v12)
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__construct_node<std::pair<std::pair<std::string,unsigned int> const,unsigned int>>( a1,  v14,  (uint64_t)v9);
    uint64_t v5 = v13;
    uint64_t v6 = v12;
    uint64_t v3 = (void *)std::string::__get_long_pointer[abi:nn180100]();
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__insert_node_at( a1,  v5,  v6,  v3);
    uint64_t v11 = std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::release[abi:nn180100]();
    char v10 = 1;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)v9);
  }

  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v8, v11);
  std::pair<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL &,0>( (uint64_t)&v17,  &v8,  &v10);
  return v17;
}

  ;
}

{
  return __ZNSt3__16__treeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEEjEENS_19__map_value_compareIS9_SA_NS_4lessIS9_EELb1EEENS6_ISA_EEE25__emplace_unique_key_argsIS9_JNS2_IKS9_jEEEEENS2_INS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEEbEERKT_DpOT0_( a1,  a2,  a3);
}

void *std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__find_equal<std::pair<std::string,unsigned int>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root_ptr[abi:nn180100]();
  uint64_t v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
        if ((std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>::operator()[abi:nn180100]( v4,  a3) & 1) == 0) {
          break;
        }
        if (!*v9)
        {
          *(void *)a2  = v9;
          return *(void **)a2;
        }

        uint64_t v8 = v9;
        uint64_t v9 = (void *)*v9;
      }

      std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
      if ((std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>::operator()[abi:nn180100]( v5,  (uint64_t)(v9 + 4),  a3) & 1) == 0) {
        break;
      }
      if (!v9[1])
      {
        *(void *)a2  = v9;
        return v9 + 1;
      }

      uint64_t v8 = v9 + 1;
      uint64_t v9 = (void *)v9[1];
    }

    *(void *)a2  = v9;
    return v8;
  }

  else
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
    *(void *)a2  = v6;
    return *(void **)a2;
  }

{
  return __ZNSt3__16__treeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEEjEENS_19__map_value_compareIS9_SA_NS_4lessIS9_EELb1EEENS6_ISA_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_( a1,  a2,  a3);
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__construct_node<std::pair<std::pair<std::string,unsigned int> const,unsigned int>>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = a3;
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__node_alloc[abi:nn180100]();
  uint64_t v11 = v3;
  char v10 = 0;
  uint64_t v6 = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::allocate[abi:nn180100]( v3,  1uLL);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::__tree_node_destructor[abi:nn180100]( (uint64_t)&v9,  v11,  0);
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::unique_ptr[abi:nn180100]<true,void>( a3,  (uint64_t)v6,  &v9);
  uint64_t v7 = v11;
  std::string::__get_long_pointer[abi:nn180100]();
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::construct[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,std::pair<std::pair<std::string,unsigned int> const,unsigned int>,void>( v7,  v4,  v12);
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::get_deleter[abi:nn180100]();
  *(_BYTE *)(v5 + 8)  = 1;
}

{
  __ZNSt3__16__treeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEEjEENS_19__map_value_compareIS9_SA_NS_4lessIS9_EELb1EEENS6_ISA_EEE16__construct_nodeIJNS2_IKS9_jEEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS6_ISN_EEEEEEDpOT_( a1,  a2,  a3);
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__insert_node_at( uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  *a4  = 0LL;
  a4[1]  = 0LL;
  a4[2]  = a2;
  *a3  = (uint64_t)a4;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  if (**v4)
  {
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    uint64_t v9 = **v5;
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    *uint64_t v6 = v9;
  }

  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v7, *a3);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  ++*v8;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::release[abi:nn180100]()
{
  uint64_t v3 = *v0;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *uint64_t v1 = 0LL;
  return v3;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]( uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::reset[abi:nn180100]( a1,  0LL);
  return a1;
}

uint64_t std::pair<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL &,0>( uint64_t a1, void *a2, _BYTE *a3)
{
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root_ptr[abi:nn180100]()
{
}

uint64_t std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>::operator()[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  return std::less<std::pair<std::string,unsigned int>>::operator()[abi:nn180100](a1, a2, v2) & 1;
}

uint64_t std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>::operator()[abi:nn180100]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::less<std::pair<std::string,unsigned int>>::operator()[abi:nn180100](a1, v3, a3) & 1;
}

uint64_t std::less<std::pair<std::string,unsigned int>>::operator()[abi:nn180100]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::operator<[abi:nn180100]<std::string,unsigned int,std::string,unsigned int>(a2, a3) & 1;
}

uint64_t std::operator<[abi:nn180100]<std::string,unsigned int,std::string,unsigned int>( uint64_t a1, uint64_t a2)
{
  char v4 = 1;
  if (!std::operator<[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2))
  {
    BOOL v3 = 0;
    char v4 = v3;
  }

  return v4 & 1;
}

BOOL std::operator<[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2)
{
  return (int)std::string::compare[abi:nn180100](a1, a2) < 0;
}

uint64_t std::string::compare[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  *(void *)&__int128 v5 = std::string::operator std::string_view[abi:nn180100]();
  *((void *)&v5 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = v2;
  return std::string::compare<std::string_view,0>(a1, &v5);
}

uint64_t std::string::compare<std::string_view,0>(uint64_t a1, _OWORD *a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  __int128 v10 = *a2;
  unint64_t v9 = std::string::size[abi:nn180100]();
  unint64_t v8 = std::string_view::size[abi:nn180100]((uint64_t)&v10);
  std::string::data[abi:nn180100]();
  uint64_t v6 = v2;
  __int128 v5 = (const void *)std::string_view::data[abi:nn180100]((uint64_t)&v10);
  BOOL v3 = std::min[abi:nn180100]<unsigned long>(&v9, &v8);
  unsigned int v7 = std::char_traits<char>::compare[abi:nn180100](v6, v5, *v3);
  if (v7)
  {
    return v7;
  }

  else if (v9 >= v8)
  {
    return v9 > v8;
  }

  else
  {
    return -1;
  }

{
  return __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EELi0EEEiRKT_( a1,  a2);
}

uint64_t std::string::operator std::string_view[abi:nn180100]()
{
  uint64_t v3 = v0;
  uint64_t v1 = std::string::size[abi:nn180100]();
  ot::Cli::Dataset::Dataset(&v4, v3, v1);
  return v4;
}

uint64_t std::string_view::size[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t std::char_traits<char>::compare[abi:nn180100](const void *a1, const void *a2, size_t a3)
{
  return memcmp(a1, a2, a3);
}

uint64_t std::string_view::data[abi:nn180100](uint64_t a1)
{
  return *(void *)a1;
}

void *std::min[abi:nn180100]<unsigned long>(void *a1, void *a2)
{
  return std::min[abi:nn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

void *std::min[abi:nn180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  else {
    return a1;
  }
}

BOOL std::__less<void,void>::operator()[abi:nn180100]<unsigned long,unsigned long>( uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::allocate[abi:nn180100]( uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::allocate[abi:nn180100]( a1,  a2);
}

uint64_t std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::__tree_node_destructor[abi:nn180100]( uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::unique_ptr[abi:nn180100]<true,void>( uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];
  v5[1]  = a1;
  v5[0]  = a2;
  std::__compressed_pair<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::__compressed_pair[abi:nn180100]<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *&,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>( a1,  v5,  a3);
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::construct[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,std::pair<std::pair<std::string,unsigned int> const,unsigned int>,void>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::construct[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,std::pair<std::pair<std::string,unsigned int> const,unsigned int>>( a1,  a2,  a3);
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEjEEjEEPvEEEEE9constructB8nn180100INS4_IKSA_jEEJSI_EvEEvRSE_PT_DpOT0_( a1,  a2,  a3);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::get_deleter[abi:nn180100]()
{
}

void *std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::allocate[abi:nn180100]( uint64_t a1, unint64_t a2)
{
  return std::__libcpp_allocate[abi:nn180100](72 * a2);
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::max_size[abi:nn180100]<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>,void>()
{
  return std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::max_size[abi:nn180100]();
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEjEEjEEPvEEEEE8max_sizeB8nn180100ISE_vEEmRKSE_();
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void *std::__libcpp_allocate[abi:nn180100](size_t a1)
{
  return std::__libcpp_operator_new[abi:nn180100]<unsigned long>(a1);
}

uint64_t std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::max_size[abi:nn180100]()
{
  return 0x38E38E38E38E38ELL;
}

void *std::__libcpp_operator_new[abi:nn180100]<unsigned long>(size_t a1)
{
  return operator new(a1);
}

uint64_t std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::__tree_node_destructor[abi:nn180100]( uint64_t result, uint64_t a2, char a3)
{
  *(void *)BOOL result = a2;
  *(_BYTE *)(result + 8)  = a3 & 1;
  return result;
}

uint64_t std::__compressed_pair<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::__compressed_pair[abi:nn180100]<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *&,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>( uint64_t a1, void *a2, __n128 *a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,0,false>::__compressed_pair_elem[abi:nn180100]<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *&,void>( (void *)a1,  a2);
  ot::Cli::Vendor::Vendor((__n128 *)(a1 + 8), a3);
  return a1;
}

void *std::__compressed_pair_elem<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,0,false>::__compressed_pair_elem[abi:nn180100]<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *&,void>( void *result, void *a2)
{
  *BOOL result = *a2;
  return result;
}

uint64_t std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>::construct[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,std::pair<std::pair<std::string,unsigned int> const,unsigned int>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::pair<std::pair<std::string,unsigned int> const,unsigned int>::pair[abi:nn180100](a2, a3);
}

{
  return __ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEjEEjEEPvEEE9constructB8nn180100INS3_IKS9_jEEJSG_EEEvPT_DpOT0_( a1,  a2,  a3);
}

uint64_t std::pair<std::pair<std::string,unsigned int> const,unsigned int>::pair[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;
  std::pair<std::string,unsigned int>::pair[abi:nn180100](a1, a2);
  BOOL result = a1;
  *(_DWORD *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t std::pair<std::string,unsigned int>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;
  std::string::basic_string((std::string *)a1, (const std::string *)a2);
  BOOL result = a1;
  *(_DWORD *)(a1 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *(_DWORD *)(a2 + 24);
  return result;
}

void std::__compressed_pair<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::second[abi:nn180100]()
{
}

uint64_t std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>( uint64_t result, uint64_t a2)
{
  uint64_t v14 = (uint64_t *)result;
  uint64_t v11 = (uint64_t *)a2;
  *(_BYTE *)(a2 + 2ot::MeshCoP::Tlv::SetType(this, 4) = a2 == result;
  while (1)
  {
    char v8 = 0;
    if (v11 != v14)
    {
      BOOL result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      char v8 = *(_BYTE *)(result + 24) ^ 1;
    }

    if ((v8 & 1) == 0) {
      break;
    }
    uint64_t v2 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
    if (std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(v2))
    {
      uint64_t v3 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      uint64_t v10 = *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v3) + 8);
      if (!v10 || (*(_BYTE *)(v10 + 24) & 1) != 0)
      {
        if (!std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          uint64_t v11 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
          std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11);
        }

        uint64_t v5 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
        *(_BYTE *)(v5 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
        uint64_t v12 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v5);
        *(_BYTE *)(v12 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
        return std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v12);
      }

      uint64_t v4 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      *(_BYTE *)(v4 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
      BOOL result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v4);
      uint64_t v11 = (uint64_t *)result;
      *(_BYTE *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = result == (void)v14;
      *(_BYTE *)(v10 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
    }

    else
    {
      uint64_t v9 = **(void **)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11) + 16);
      if (!v9 || (*(_BYTE *)(v9 + 24) & 1) != 0)
      {
        if (std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          uint64_t v11 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
          std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v11);
        }

        uint64_t v7 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
        *(_BYTE *)(v7 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
        uint64_t v13 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v7);
        *(_BYTE *)(v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
        return std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v13);
      }

      uint64_t v6 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      *(_BYTE *)(v6 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
      BOOL result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v6);
      uint64_t v11 = (uint64_t *)result;
      *(_BYTE *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = result == (void)v14;
      *(_BYTE *)(v9 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
    }
  }

  return result;
}

uint64_t std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  return a1 == **(void **)(a1 + 16);
}

uint64_t std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  *(void *)(a1 + 8)  = *v2;
  if (*(void *)(a1 + 8)) {
    std::__tree_node_base<void *>::__set_parent[abi:nn180100](*(void *)(a1 + 8), a1);
  }
  v2[2]  = *(void *)(a1 + 16);
  else {
    *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](a1) + 8)  = v2;
  }
  *uint64_t v2 = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:nn180100](a1, (uint64_t)v2);
}

uint64_t std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1  = *(void *)(*a1 + 8);
  if (*a1) {
    std::__tree_node_base<void *>::__set_parent[abi:nn180100](*a1, (uint64_t)a1);
  }
  *(void *)(v2 + ot::Tlv::SetLength((uint64_t)this, 16) = a1[2];
  else {
    *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)a1) + 8)  = v2;
  }
  *(void *)(v2 + 8)  = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:nn180100]((uint64_t)a1, v2);
}

uint64_t std::__tree_node_base<void *>::__set_parent[abi:nn180100](uint64_t result, uint64_t a2)
{
  *(void *)(result + ot::Tlv::SetLength((uint64_t)this, 16) = a2;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::reset[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::second[abi:nn180100]();
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::operator()[abi:nn180100]( v4,  v5);
  }

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::operator()[abi:nn180100]( uint64_t a1, void *a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    uint64_t v3 = *(void *)a1;
    std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::destroy[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,void,void>( v3,  v2);
  }

  if (a2) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::deallocate[abi:nn180100]( *(void *)a1,  a2);
  }
}

uint64_t std::pair<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL &,0>( uint64_t result, void *a2, _BYTE *a3)
{
  *(void *)BOOL result = *a2;
  *(_BYTE *)(result + 8)  = *a3 & 1;
  return result;
}

void *std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( void *a1, uint64_t a2)
{
  return a1;
}

void *std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]( void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::begin[abi:nn180100]()
{
  return v2;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::end[abi:nn180100]()
{
  return v2;
}

BOOL std::operator==[abi:nn180100](void *a1, void *a2)
{
  return *a1 == *a2;
}

void std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>::operator->[abi:nn180100]( uint64_t a1)
{
}

uint64_t *std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::operator++[abi:nn180100]( uint64_t *a1)
{
  return a1;
}

uint64_t *std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>::operator++[abi:nn180100]( uint64_t *a1)
{
  uint64_t v1 = std::__tree_next_iter[abi:nn180100]<std::__tree_end_node<std::__tree_node_base<void *> *> *,std::__tree_node_base<void *> *>(*a1);
  BOOL result = a1;
  *a1  = (uint64_t)v1;
  return result;
}

void *std::__tree_next_iter[abi:nn180100]<std::__tree_end_node<std::__tree_node_base<void *> *> *,std::__tree_node_base<void *> *>( uint64_t a1)
{
  uint64_t v3 = a1;
  if (*(void *)(a1 + 8)) {
    return std::__tree_min[abi:nn180100]<std::__tree_node_base<void *> *>(*(void **)(a1 + 8));
  }
  for (BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(a1);
        !i;
        BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(v3))
  {
    uint64_t v3 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v3);
  }

  return *(void **)(v3 + 16);
}

void *std::__tree_min[abi:nn180100]<std::__tree_node_base<void *> *>(void *a1)
{
  while (*a1)
    a1  = (void *)*a1;
  return a1;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::erase( uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  char v8 = (void *)std::string_view::data[abi:nn180100]((uint64_t)&v9);
  uint64_t v10 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__remove_node_pointer( a1,  (uint64_t)v8);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__node_alloc[abi:nn180100]();
  uint64_t v7 = v2;
  uint64_t v6 = v2;
  std::__tree_const_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>::operator*[abi:nn180100]((uint64_t)&v9);
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::destroy[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,void,void>( v6,  v3);
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::deallocate[abi:nn180100]( v7,  v8);
  return v10;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__remove_node_pointer( uint64_t a1, uint64_t a2)
{
  if (*v2 == a2)
  {
    uint64_t v7 = v9;
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    uint64_t *v3 = v7;
  }

  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  --*v4;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*v5, a2);
  return v9;
}

uint64_t std::__tree_const_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>::operator*[abi:nn180100]( uint64_t a1)
{
  return std::string_view::data[abi:nn180100](a1) + 32;
}

uint64_t std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *a1, uint64_t a2)
{
  if (*(void *)a2 && *(void *)(a2 + 8)) {
    uint64_t v11 = std::__tree_next[abi:nn180100]<std::__tree_node_base<void *> *>(a2);
  }
  else {
    uint64_t v11 = (uint64_t *)a2;
  }
  if (*v11) {
    uint64_t v10 = *v11;
  }
  else {
    uint64_t v10 = v11[1];
  }
  uint64_t v13 = 0LL;
  if (v10) {
    *(void *)(v10 + ot::Tlv::SetLength((uint64_t)this, 16) = v11[2];
  }
  uint64_t result = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11);
  if ((result & 1) != 0)
  {
    *(void *)v11[2]  = v10;
    if (v11 == a1)
    {
      a1  = (uint64_t *)v10;
    }

    else
    {
      uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      uint64_t v13 = *(uint64_t **)(result + 8);
    }
  }

  else
  {
    uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
    *(void *)(result + 8)  = v10;
    uint64_t v13 = *(uint64_t **)v11[2];
  }

  char v12 = v11[3] & 1;
  if (v11 != (uint64_t *)a2)
  {
    v11[2]  = *(void *)(a2 + 16);
    else {
      *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11) + 8)  = v11;
    }
    *uint64_t v11 = *(void *)a2;
    uint64_t result = std::__tree_node_base<void *>::__set_parent[abi:nn180100](*v11, (uint64_t)v11);
    v11[1]  = *(void *)(a2 + 8);
    if (v11[1]) {
      uint64_t result = std::__tree_node_base<void *>::__set_parent[abi:nn180100](v11[1], (uint64_t)v11);
    }
    *((_BYTE *)v11 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *(_BYTE *)(a2 + 24) & 1;
  }

  if ((v12 & 1) != 0 && a1)
  {
    if (v10)
    {
      *(_BYTE *)(v10 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
    }

    else
    {
      for (BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v13);
            ;
            BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(v8))
      {
        while (!i)
        {
          if ((v13[3] & 1) == 0)
          {
            *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
            *(_BYTE *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13) + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
            uint64_t v4 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
            std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v4);
            uint64_t v13 = *(uint64_t **)(*v13 + 8);
          }

          if (*v13 && (*(_BYTE *)(*v13 + 24) & 1) == 0 || v13[1] && (*(_BYTE *)(v13[1] + 24) & 1) == 0)
          {
            if (!v13[1] || (*(_BYTE *)(v13[1] + 24) & 1) != 0)
            {
              *(_BYTE *)(*v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
              *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
              std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v13);
              uint64_t v13 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
            }

            *(_BYTE *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13) + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
            *(_BYTE *)(v13[1] + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
            uint64_t v5 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
            return std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v5);
          }

          *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
          uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
          uint64_t v14 = result;
          if ((uint64_t *)result == a1 || (*(_BYTE *)(result + 24) & 1) == 0)
          {
            *(_BYTE *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
            return result;
          }

          else {
            uint64_t v9 = **(void **)(v14 + 16);
          }
          uint64_t v13 = (uint64_t *)v9;
          BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(v9);
        }

        if ((v13[3] & 1) == 0)
        {
          *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
          *(_BYTE *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13) + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
          uint64_t v6 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
          std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v6);
          uint64_t v13 = *(uint64_t **)v13[1];
        }

        if (*v13 && (*(_BYTE *)(*v13 + 24) & 1) == 0 || v13[1] && (*(_BYTE *)(v13[1] + 24) & 1) == 0) {
          break;
        }
        *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
        uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
        uint64_t v15 = result;
        if ((*(_BYTE *)(result + 24) & 1) == 0 || (uint64_t *)result == a1)
        {
          *(_BYTE *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
          return result;
        }

        else {
          uint64_t v8 = **(void **)(v15 + 16);
        }
        uint64_t v13 = (uint64_t *)v8;
      }

      if (!*v13 || (*(_BYTE *)(*v13 + 24) & 1) != 0)
      {
        *(_BYTE *)(v13[1] + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
        *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
        std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v13);
        uint64_t v13 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
      }

      *((_BYTE *)v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *(_BYTE *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13) + 24) & 1;
      *(_BYTE *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13) + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
      *(_BYTE *)(*v13 + 2ot::MeshCoP::Tlv::SetType(this, 4) = 1;
      uint64_t v7 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v13);
      return std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v7);
    }
  }

  return result;
}

void *std::__tree_next[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t v3 = a1;
  if (*(void *)(a1 + 8)) {
    return std::__tree_min[abi:nn180100]<std::__tree_node_base<void *> *>(*(void **)(a1 + 8));
  }
  for (BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(a1);
        !i;
        BOOL i = std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(v3))
  {
    uint64_t v3 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v3);
  }

  return (void *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v3);
}

uint64_t std::pair<char const*,unsigned int>::pair[abi:nn180100]<char const*,unsigned int &,0>( uint64_t a1, void *a2, _DWORD *a3)
{
  return a1;
}

uint64_t std::pair<char const*,unsigned int>::pair[abi:nn180100]<char const*,unsigned int &,0>( uint64_t result, void *a2, _DWORD *a3)
{
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8)  = *a3;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::find<std::pair<std::string,unsigned int>>( uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v8 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  uint64_t v12 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__lower_bound<std::pair<std::string,unsigned int>>( a1,  a2,  v8,  v2);
  uint64_t v11 = std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::end[abi:nn180100]();
  LOBYTE(v10)  = 0;
  if (std::operator!=[abi:nn180100](&v12, &v11))
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
    uint64_t v6 = v3;
    uint64_t v5 = v13;
    std::__tree_const_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>::operator*[abi:nn180100]((uint64_t)&v12);
    int v10 = std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>::operator()[abi:nn180100]( v6,  v5) ^ 1;
  }

  if ((v10 & 1) != 0) {
    return v12;
  }
  else {
    return std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::end[abi:nn180100]();
  }
}

{
  return __ZNSt3__16__treeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEEjEENS_19__map_value_compareIS9_SA_NS_4lessIS9_EELb1EEENS6_ISA_EEE4findIS9_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_( a1,  a2);
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__lower_bound<std::pair<std::string,unsigned int>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  while (a3)
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
    if ((std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>::operator()[abi:nn180100]( v4,  (uint64_t)(a3 + 4),  a2) & 1) != 0)
    {
      a3  = (void *)a3[1];
    }

    else
    {
      a4  = (uint64_t)a3;
      a3  = (void *)*a3;
    }
  }

  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v9, a4);
  return v9;
}

{
  return __ZNSt3__16__treeINS_12__value_typeINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEEjEENS_19__map_value_compareIS9_SA_NS_4lessIS9_EELb1EEENS6_ISA_EEE13__lower_boundIS9_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_SM_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISK_EEEE( a1,  a2,  a3,  a4);
}

uint64_t __cxx_global_var_init_7()
{
  return __cxa_atexit( (void (*)(void *))std::map<std::pair<std::string,unsigned int>,unsigned int>::~map[abi:nn180100],  &mTxPktRecordSentTime,  (void *)&_mh_execute_header);
}

ot::Posix::Daemon *__cxx_global_var_init_1_7()
{
  return std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>>::__map_iterator[abi:nn180100]((ot::Posix::Daemon *)&mMapIter);
}

ot::Posix::Daemon *_GLOBAL__sub_I_trel_link_cpp()
{
  return __cxx_global_var_init_1_7();
}

_BYTE *ot::Trel::Header::SetAckMode(_BYTE *result, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      *result |= 4u;
    }
  }

  else
  {
    *result &= ~4u;
  }

  return result;
}

uint64_t ot::Trel::Header::GetSize(char a1)
{
  unsigned __int16 v2 = 24;
  if (!a1) {
    return 16;
  }
  return v2;
}

ot::StringWriter *ot::Trel::Header::ToString@<X0>(ot::Trel::Header *this@<X0>, ot::StringWriter *a2@<X8>)
{
  char Type = ot::Trel::Header::GetType(this);
  ot::String<(unsigned short)128>::String((uint64_t)a2);
  if (Type)
  {
    if (Type == 1)
    {
      Channel  = ot::Trel::Header::GetChannel(this);
      ot::StringWriter::Append(a2, "unicast ch:%d", Channel);
    }

    else if (Type == 2)
    {
      ot::StringWriter::Append(a2, "ack");
    }
  }

  else
  {
    unsigned __int8 v2 = ot::Trel::Header::GetChannel(this);
    ot::StringWriter::Append(a2, "broadcast ch:%d", v2);
  }

  PanId  = ot::Trel::Header::GetPanId(this);
  PacketNumber  = ot::Trel::Header::GetPacketNumber(this);
  uint64_t v11 = ot::ToUlong(PacketNumber);
  Source  = (ot::Mac::ExtAddress *)ot::Trel::Header::GetSource(this);
  ot::Mac::ExtAddress::ToString(Source, (ot::StringWriter *)v16);
  uint64_t v6 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v16);
  uint64_t result = ot::StringWriter::Append(a2, " panid:%04x num:%lu src:%s", PanId, v11, v6);
  if (Type == 1 || Type == 2)
  {
    Destination  = (ot::Mac::ExtAddress *)ot::Trel::Header::GetDestination(this);
    ot::Mac::ExtAddress::ToString(Destination, (ot::StringWriter *)v15);
    uint64_t v9 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v15);
    uint64_t result = ot::StringWriter::Append(a2, " dst:%s", v9);
  }

  if (Type == 1 || !Type)
  {
    if (ot::Trel::Header::GetAckMode(this)) {
      return ot::StringWriter::Append(a2, " ack-req");
    }
    else {
      return ot::StringWriter::Append(a2, " no-ack");
    }
  }

  return result;
}

uint64_t ot::String<(unsigned short)128>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 128);
  return a1;
}

_BYTE *ot::Trel::Packet::Init(ot::Trel::Packet *a1, char a2, uint64_t a3, __int16 a4)
{
  Size  = ot::Trel::Header::GetSize(a2);
  ot::Trel::Packet::Init(a1, (unsigned __int8 *)(a3 - Size), a4 + Size);
  ot::Trel::Packet::GetHeader(a1);
  return ot::Trel::Header::Init(v5, a2);
}

BOOL ot::Trel::Packet::IsHeaderValid(ot::Trel::Packet *this)
{
  BOOL v9 = 0;
  if (ot::MutableData<(ot::DataLengthType)1>::GetBytes((uint64_t)this))
  {
    __int16 Length = ot::Trel::Packet::GetLength(this);
    if (v2 | (Length == 0)) {
      char v3 = 1;
    }
    else {
      char v3 = 0;
    }
    BOOL v9 = 0;
    if ((v3 & 1) == 0)
    {
      Header  = (ot::Trel::Header *)ot::Trel::Packet::GetHeader(this);
      BOOL v9 = 0;
      if (ot::Trel::Header::IsVersionValid(Header))
      {
        int v7 = (unsigned __int16)ot::Trel::Packet::GetLength(this);
        uint64_t v5 = (ot::Trel::Header *)ot::Trel::Packet::GetHeader(this);
        return v7 >= (unsigned __int16)ot::Trel::Header::GetLength(v5);
      }
    }
  }

  return v9;
}

BOOL ot::Trel::Header::IsVersionValid(ot::Trel::Header *this)
{
  return (*(_BYTE *)this & 0xE0) == 0;
}

{
  return __ZNK2ot4Trel6Header14IsVersionValidEv(this);
}

ot::AddressResolver::CacheEntry **ot::AddressResolver::AddressResolver( ot::AddressResolver::CacheEntry **this, ot::Instance *a2)
{
  char v2 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>((ot::InstanceLocator *)this);
  ot::Ip6::Icmp::RegisterHandler(v2, (ot::Ip6::Icmp::Handler *)(this + 2054));
  IgnoreError();
  return this;
}

{
  ot::AddressResolver::AddressResolver(this, a2);
  return this;
}

ot::AddressResolver::CacheEntry **ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Pool( ot::AddressResolver::CacheEntry **a1, ot::Instance *a2)
{
  return a1;
}

{
  BOOL v2;
  ot::Posix::Daemon *v5;
  ot::AddressResolver::CacheEntry *i;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  uint64_t v5 = (ot::Posix::Daemon *)(a1 + 1);
  do
  {
    ot::Posix::Daemon::~Daemon(v5);
    char v2 = (ot::AddressResolver::CacheEntry **)((char *)v5 + 32) != a1 + 2049;
    uint64_t v5 = (ot::Posix::Daemon *)((char *)v5 + 32);
  }

  while (v2);
  for (BOOL i = (ot::AddressResolver::CacheEntry *)(a1 + 1);
        i != (ot::AddressResolver::CacheEntry *)(a1 + 2049);
        BOOL i = (ot::AddressResolver::CacheEntry *)((char *)i + 32))
  {
    ot::AddressResolver::CacheEntry::Init(i, a2);
    ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1, i);
  }

  return a1;
}

  ;
}

  ;
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::HandleIcmpReceive( ot::AddressResolver::CacheEntry **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  ot::AsCoreType<otMessageInfo>(a3);
  BOOL v9 = v5;
  ot::AsCoreType<otIcmp6Header>(a4);
  return ot::AddressResolver::HandleIcmpReceive(a1, v8, v9, v6);
}

void *ot::Ip6::Icmp::Handler::Handler(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Icmp>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_3Ip64IcmpEEERT_v(a1);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::Clear(ot::AddressResolver::CacheEntry *this)
{
  char v3 = (ot::AddressResolver::CacheEntry **)this;
  v7[0]  = (char *)this + 16400;
  v7[1]  = (char *)this + 16408;
  v7[2]  = (char *)this + 16416;
  v7[3]  = (char *)this + 16424;
  for (BOOL i = (ot::AddressResolver::CacheEntry ***)v7; i != (ot::AddressResolver::CacheEntry ***)&v8; ++i)
  {
    uint64_t v5 = *i;
    while (1)
    {
      this  = ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(v5);
      uint64_t v4 = this;
      if (!this) {
        break;
      }
      if (v5 == v3 + 2052)
      {
        uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)v3);
        ot::AddressResolver::CacheEntry::GetTarget(v4);
        ot::MeshForwarder::HandleResolved(v2, v1, 2);
      }

      ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(v3 + 1, v4);
    }
  }

  return this;
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop( ot::AddressResolver::CacheEntry **a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(*a1);
  }
  return v2;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE3PopEv(a1);
}

_WORD *ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free( ot::AddressResolver::CacheEntry **a1, ot::AddressResolver::CacheEntry *a2)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1, a2);
}

{
  return __ZN2ot4PoolINS_15AddressResolver10CacheEntryELt512EE4FreeERS2_(a1, a2);
}

uint64_t ot::AddressResolver::GetNextCacheEntry( ot::InstanceLocator *a1, _OWORD *a2, ot::AddressResolver::Iterator *a3)
{
  unsigned int v17 = 0;
  List  = ot::AddressResolver::Iterator::GetList(a3);
  for (BOOL i = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::Iterator::GetEntry(a3);
        !i;
        BOOL i = (ot::AddressResolver::CacheEntry *)Head)
  {
    if (List)
    {
      if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16400))
      {
        List  = (uint64_t)a1 + 16408;
        Head  = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16408);
      }

      else if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16408))
      {
        List  = (uint64_t)a1 + 16416;
        Head  = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16416);
      }

      else
      {
        List  = (uint64_t)a1 + 16424;
        Head  = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16424);
      }
    }

    else
    {
      List  = (uint64_t)a1 + 16400;
      Head  = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16400);
    }
  }

  Next  = (const ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(i);
  ot::AddressResolver::Iterator::SetEntry((uint64_t)a3, Next);
  ot::AddressResolver::Iterator::SetList(a3, List);
  ot::Clearable<ot::AddressResolver::EntryInfo>::Clear(a2);
  ot::AddressResolver::CacheEntry::GetTarget(i);
  *a2  = *v5;
  *((_WORD *)a2 + 8)  = ot::AddressResolver::CacheEntry::GetRloc16(i);
  if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16400))
  {
    *((_DWORD *)a2 + 5)  = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(0LL);
    *((_BYTE *)a2 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *((_BYTE *)a2 + 24) & 0xFE | 1;
    *((_BYTE *)a2 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *((_BYTE *)a2 + 24) & 0xFB | (4
                                                      * ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(i));
    if (ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(i))
    {
      *((_DWORD *)a2 + 7)  = ot::AddressResolver::CacheEntry::GetLastTransactionTime(i);
      ot::AsCoreType<otIp6Address>((uint64_t)(a2 + 2));
      uint64_t v12 = v6;
      int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      ot::Mle::Mle::GetMeshLocalPrefix(v7);
      ot::Ip6::Address::SetPrefix(v12, v8);
      ot::AsCoreType<otIp6Address>((uint64_t)(a2 + 2));
      uint64_t v13 = v9;
      MeshLocalIid  = (const ot::Ip6::InterfaceIdentifier *)ot::AddressResolver::CacheEntry::GetMeshLocalIid(i);
      ot::Ip6::Address::SetIid(v13, MeshLocalIid);
    }
  }

  else
  {
    if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16408))
    {
      *((_DWORD *)a2 + 5)  = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(1LL);
    }

    else if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16416))
    {
      *((_DWORD *)a2 + 5)  = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(2LL);
    }

    else
    {
      *((_DWORD *)a2 + 5)  = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(3LL);
      *((_BYTE *)a2 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *((_BYTE *)a2 + 24) & 0xFD | (2 * (ot::AddressResolver::CacheEntry::IsInRampDown(i) & 1));
    }

    *((_BYTE *)a2 + 2ot::MeshCoP::Tlv::SetType(this, 4) = *((_BYTE *)a2 + 24) & 0xFE | ot::AddressResolver::CacheEntry::CanEvict(i) & 1;
    *((_WORD *)a2 + 2ot::MeshCoP::Tlv::SetType(this, 4) = ot::AddressResolver::CacheEntry::GetTimeout(i);
    *((_WORD *)a2 + 25)  = ot::AddressResolver::CacheEntry::GetRetryDelay(i);
  }

  return v17;
}

uint64_t ot::AddressResolver::Iterator::GetList(ot::AddressResolver::Iterator *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot15AddressResolver8Iterator7GetListEv(this);
}

uint64_t ot::AddressResolver::Iterator::GetEntry(ot::AddressResolver::Iterator *this)
{
  return *((void *)this + 1);
}

{
  return __ZNK2ot15AddressResolver8Iterator8GetEntryEv(this);
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE7GetHeadEv(a1);
}

{
  return __ZNK2ot10LinkedListINS_15AddressResolver10CacheEntryEE7GetHeadEv(a1);
}

uint64_t ot::AddressResolver::Iterator::SetEntry(uint64_t this, const ot::AddressResolver::CacheEntry *a2)
{
  *(void *)(this + 8)  = a2;
  return this;
}

{
  return __ZN2ot15AddressResolver8Iterator8SetEntryEPKNS0_10CacheEntryE(this, a2);
}

uint64_t ot::AddressResolver::CacheEntry::GetNext(ot::AddressResolver::CacheEntry *this)
{
  uint64_t v1 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  CacheEntryPool  = ot::AddressResolver::GetCacheEntryPool(v1);
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt(CacheEntryPool, *((_WORD *)this + 9));
}

{
  ot::AddressResolver *v1;
  uint64_t CacheEntryPool;
  uint64_t v1 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  CacheEntryPool  = ot::AddressResolver::GetCacheEntryPool(v1);
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt(CacheEntryPool, *((_WORD *)this + 9));
}

void *ot::AddressResolver::Iterator::SetList(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return __ZN2ot15AddressResolver8Iterator7SetListEPKNS0_14CacheEntryListE(result, a2);
}

void *ot::Clearable<ot::AddressResolver::EntryInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x34uLL);
}

{
  return __ZN2ot9ClearableINS_15AddressResolver9EntryInfoEE5ClearEv(a1);
}

uint64_t ot::AddressResolver::CacheEntry::GetRloc16(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned __int16 *)this + 8);
}

{
  return __ZNK2ot15AddressResolver10CacheEntry9GetRloc16Ev(this);
}

uint64_t ot::MapEnum<ot::AddressResolver::EntryInfo::State>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumINS_15AddressResolver9EntryInfo5StateEEEKNS_10MappedEnumIT_E4TypeES5_(result);
}

BOOL ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(ot::AddressResolver::CacheEntry *this)
{
  return ot::AddressResolver::CacheEntry::GetLastTransactionTime(this) != -1;
}

{
  return __ZNK2ot15AddressResolver10CacheEntry26IsLastTransactionTimeValidEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetLastTransactionTime(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned int *)this + 5);
}

{
  return __ZNK2ot15AddressResolver10CacheEntry22GetLastTransactionTimeEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetMeshLocalIid(ot::AddressResolver::CacheEntry *this)
{
  return (uint64_t)this + 24;
}

{
  return __ZNK2ot15AddressResolver10CacheEntry15GetMeshLocalIidEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::IsInRampDown(ot::AddressResolver::CacheEntry *this)
{
  return *((_BYTE *)this + 25) & 1;
}

{
  return __ZNK2ot15AddressResolver10CacheEntry12IsInRampDownEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::CanEvict(ot::AddressResolver::CacheEntry *this)
{
  return *((_BYTE *)this + 24) & 1;
}

{
  return __ZNK2ot15AddressResolver10CacheEntry8CanEvictEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetTimeout(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned __int16 *)this + 10);
}

{
  return __ZNK2ot15AddressResolver10CacheEntry10GetTimeoutEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetRetryDelay(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned __int16 *)this + 11);
}

{
  return __ZNK2ot15AddressResolver10CacheEntry13GetRetryDelayEv(this);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::RemoveEntriesForRouterId( ot::AddressResolver *this, unsigned __int8 a2)
{
  unsigned __int16 v2 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a2);
  return ot::AddressResolver::Remove(this, v2, 1);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::Remove( ot::AddressResolver::CacheEntry *this, unsigned __int16 a2, char a3)
{
  char v10 = a3 & 1;
  uint64_t v5 = (ot::AddressResolver::CacheEntry **)this;
  v12[0]  = (char *)this + 16400;
  v12[1]  = (char *)this + 16408;
  for (BOOL i = (ot::AddressResolver::CacheEntry ***)v12; i != (ot::AddressResolver::CacheEntry ***)&v13; ++i)
  {
    uint64_t v8 = *i;
    int v7 = 0LL;
    while (1)
    {
      this  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(v7, (uint64_t)v8);
      uint64_t v6 = this;
      if (!this) {
        break;
      }
      if ((v10 & 1) != 0
        && (unsigned __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(this), ot::Mle::RouterIdMatch((ot::Mle *)Rloc16, a2))
        || (v10 & 1) == 0 && a2 == (unsigned __int16)ot::AddressResolver::CacheEntry::GetRloc16(v6))
      {
        if ((v10 & 1) != 0) {
          unsigned __int8 v4 = 3;
        }
        else {
          unsigned __int8 v4 = 4;
        }
        ot::AddressResolver::RemoveCacheEntry((ot::InstanceLocator *)v5, v6, v8, v7, v4);
        ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(v5 + 1, v6);
      }

      else
      {
        int v7 = v6;
      }
    }
  }

  return this;
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::RemoveEntriesForRloc16( ot::AddressResolver *this, unsigned __int16 a2)
{
  return ot::AddressResolver::Remove(this, a2, 0);
}

uint64_t ot::AddressResolver::GetEntryAfter(ot::AddressResolver::CacheEntry *a1, uint64_t a2)
{
  if (a1) {
    return ot::AddressResolver::CacheEntry::GetNext(a1);
  }
  else {
    return ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(a2);
  }
}

BOOL ot::Mle::RouterIdMatch(ot::Mle *this, unsigned __int16 a2)
{
  int v3 = ot::Mle::RouterIdFromRloc16((ot::Mle *)(unsigned __int16)this);
  return v3 == ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
}

{
  return __ZN2ot3Mle13RouterIdMatchEtt(this, a2);
}

void ot::AddressResolver::RemoveCacheEntry( ot::InstanceLocator *a1, ot::AddressResolver::CacheEntry *a2, ot::AddressResolver::CacheEntry **a3, ot::AddressResolver::CacheEntry *a4, unsigned __int8 a5)
{
  if (a3 == (ot::AddressResolver::CacheEntry **)((char *)a1 + 16416))
  {
    uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
    ot::AddressResolver::CacheEntry::GetTarget(a2);
    ot::MeshForwarder::HandleResolved(v6, v5, 2LL);
  }

  ot::AddressResolver::LogCacheEntryChange((uint64_t)a1, 2u, a5, a2, (uint64_t)a3);
}

uint64_t ot::AddressResolver::FindCacheEntry( uint64_t a1, const ot::Ip6::Address *a2, uint64_t *a3, ot::AddressResolver::CacheEntry **a4)
{
  uint64_t v7 = 0LL;
  v11[0]  = a1 + 16400;
  v11[1]  = a1 + 16408;
  v11[2]  = a1 + 16416;
  v11[3]  = a1 + 16424;
  for (BOOL i = v11; i != &v12; ++i)
  {
    *a3  = *i;
    ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(*a3, a2, a4);
    uint64_t v7 = v4;
    if (v4) {
      break;
    }
  }

  return v7;
}

void ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>( uint64_t a1, const ot::Ip6::Address *a2, ot::AddressResolver::CacheEntry **a3)
{
}

{
  __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE12FindMatchingINS_3Ip67AddressEEEPS2_RKT_RS7_(a1, a2, a3);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::RemoveEntryForAddress( ot::AddressResolver::CacheEntry **this, const ot::Ip6::Address *a2)
{
  return ot::AddressResolver::Remove(this, a2, 7u);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::Remove( ot::AddressResolver::CacheEntry **a1, const ot::Ip6::Address *a2, unsigned __int8 a3)
{
  char v10 = a1;
  BOOL v9 = a2;
  unsigned __int8 v8 = a3;
  uint64_t result = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry((uint64_t)a1, a2, (uint64_t *)&v5, &v6);
  uint64_t v7 = result;
  if (result)
  {
    ot::AddressResolver::RemoveCacheEntry((ot::InstanceLocator *)a1, v7, v5, v6, v8);
    return (ot::AddressResolver::CacheEntry *)ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free( a1 + 1,  v7);
  }

  return result;
}

BOOL ot::AddressResolver::ReplaceEntriesForRloc16(BOOL this, __int16 a2, __int16 a3)
{
  BOOL v13 = this;
  __int16 v12 = a2;
  __int16 v11 = a3;
  v14[0]  = this + 16400;
  v14[1]  = this + 16408;
  char v10 = v14;
  BOOL v9 = (ot::AddressResolver::CacheEntry **)v14;
  unsigned __int8 v8 = (ot::AddressResolver::CacheEntry **)&v15;
  while (v9 != v8)
  {
    uint64_t v7 = *v9;
    v6[1]  = v7;
    v6[0]  = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)v7);
    uint64_t v5 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
    while (1)
    {
      this  = ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=( v6,  &v5);
      if (!this) {
        break;
      }
      uint64_t v4 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v6);
      __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(v4);
      if (v12 == Rloc16) {
        ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)v4, v11);
      }
      ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v6);
    }

    ++v9;
  }

  return this;
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::end()
{
  return v1;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_15AddressResolver10CacheEntryENS_10LinkedListIS2_E8IteratorEEneERKS5_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_15AddressResolver10CacheEntryENS_10LinkedListIS2_E8IteratorEEdeEv(a1);
}

uint64_t ot::AddressResolver::CacheEntry::SetRloc16(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + ot::Tlv::SetLength((uint64_t)this, 16) = a2;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry9SetRloc16Et(this, a2);
}

uint64_t ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++( ot::AddressResolver::CacheEntry **a1)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorINS_15AddressResolver10CacheEntryENS_10LinkedListIS2_E8IteratorEEppEv(a1);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::NewCacheEntry( ot::AddressResolver::CacheEntry **this, char a2)
{
  char v12 = a2 & 1;
  char v10 = 0LL;
  v13[0]  = this + 2051;
  v13[1]  = this + 2053;
  v13[2]  = this + 2052;
  v13[3]  = this + 2050;
  __int16 v11 = ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Allocate(this + 1);
  if (!v11)
  {
    for (BOOL i = v13; i != &v14; ++i)
    {
      unsigned __int8 v8 = (ot::AddressResolver *)*i;
      unsigned __int16 v5 = 0;
      uint64_t v7 = 0LL;
      for (unsigned __int16 j = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(0LL, *i);
            ;
            unsigned __int16 j = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(v6, (uint64_t)v8))
      {
        uint64_t v6 = j;
        if (!j) {
          break;
        }
        if (v8 == (ot::AddressResolver *)(this + 2050) || (ot::AddressResolver::CacheEntry::CanEvict(j) & 1) != 0)
        {
          __int16 v11 = v6;
          char v10 = v7;
        }

        else
        {
          ++v5;
        }

        uint64_t v7 = v6;
      }

      if (v11)
      {
        ot::AddressResolver::RemoveCacheEntry( (ot::InstanceLocator *)this,  v11,  (ot::AddressResolver::CacheEntry **)v8,  v10,  6u);
        return v11;
      }

      if ((v12 & 1) != 0 && v8 == (ot::AddressResolver *)(this + 2051) && v5 >= 0x20u) {
        return v11;
      }
    }
  }

  return v11;
}

ot::AddressResolver::CacheEntry *ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Allocate( ot::AddressResolver::CacheEntry **a1)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(a1);
}

{
  return __ZN2ot4PoolINS_15AddressResolver10CacheEntryELt512EE8AllocateEv(a1);
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter( ot::AddressResolver::CacheEntry **a1, ot::AddressResolver::CacheEntry *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(a1);
  }
  Next  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(a2);
  if (Next)
  {
    unsigned __int16 v2 = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(Next);
    ot::AddressResolver::CacheEntry::SetNext(a2, v2);
  }

  return Next;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE8PopAfterEPS2_(a1, a2);
}

void ot::AddressResolver::LogCacheEntryChange( uint64_t a1, unsigned __int8 a2, uint64_t a3, ot::AddressResolver::CacheEntry *a4, uint64_t a5)
{
  BOOL v13 = ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange,ot::AddressResolver::Reason,ot::AddressResolver::CacheEntry const&,ot::AddressResolver::CacheEntryList *)::kChangeStrings[a2];
  ot::AddressResolver::CacheEntry::GetTarget(a4);
  ot::Ip6::Address::ToString(v5, (ot::StringWriter *)v16);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v16);
  ot::AddressResolver::CacheEntry::GetRloc16(a4);
  ot::AddressResolver::ListToString(a1, a5);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Cache entry %s: %s, 0x%04x%s%s - %s",  v6,  v7,  v8,  v9,  v10,  v11,  (char)v13);
}

uint64_t ot::AddressResolver::UpdateCacheEntry( ot::AddressResolver::CacheEntry **this, const ot::Ip6::Address *a2, __int16 a3)
{
  BOOL v13 = this;
  char v12 = a2;
  __int16 v11 = a3;
  unsigned int v10 = 0;
  CacheEntry  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry( (uint64_t)this,  a2,  (uint64_t *)&v9,  &v7);
  if (CacheEntry)
  {
    if (v9 == this + 2050 || v9 == this + 2051)
    {
      __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(CacheEntry);
      if (v11 == Rloc16) {
        return v10;
      }
      ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, v11);
    }

    else
    {
      ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(v9, v7);
      ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, v11);
      ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid(CacheEntry);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2050, CacheEntry);
      uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)this);
      ot::MeshForwarder::HandleResolved(v4, v12, 0);
    }

    ot::AddressResolver::LogCacheEntryChange((uint64_t)this, 1u, 1LL, CacheEntry, 0LL);
    return v10;
  }

  return 23;
}

uint64_t ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid( ot::AddressResolver::CacheEntry *this)
{
  return ot::AddressResolver::CacheEntry::SetLastTransactionTime((uint64_t)this, -1);
}

{
  return __ZN2ot15AddressResolver10CacheEntry32MarkLastTransactionTimeAsInvalidEv(this);
}

_WORD *ot::LinkedList<ot::AddressResolver::CacheEntry>::Push( ot::AddressResolver::CacheEntry **a1, ot::AddressResolver::CacheEntry *a2)
{
  uint64_t result = ot::AddressResolver::CacheEntry::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE4PushERS2_(a1, a2);
}

void ot::AddressResolver::UpdateSnoopedCacheEntry( ot::AddressResolver *this, __n128 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  unsigned __int16 v17 = a3;
  unsigned __int16 v16 = a4;
  unsigned __int16 v15 = 0;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsFullThreadDevice(v4))
  {
    if (ot::AddressResolver::ResolveUsingNetDataServices( this,  (const ot::Ip6::Address *)v18,  &ShortAddress))
    {
      if (ot::AddressResolver::UpdateCacheEntry( (ot::AddressResolver::CacheEntry **)this,  (const ot::Ip6::Address *)v18,  v17))
      {
        unsigned __int16 v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ShortAddress  = ot::Mac::Mac::GetShortAddress(v5);
        if (v17 != ShortAddress)
        {
          uint64_t v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          if (!ot::Mle::MleRouter::IsMinimalChild(v6, v17))
          {
            if (v16 == ShortAddress
              || (uint64_t v7 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
                  ot::Mle::MleRouter::IsMinimalChild(v7, v16)))
            {
              uint64_t v14 = ot::AddressResolver::NewCacheEntry((ot::AddressResolver::CacheEntry **)this, 1);
              if (v14)
              {
                v12[1]  = (ot::AddressResolver *)((char *)this + 16408);
                v12[0]  = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)this + 16408);
                uint64_t v11 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
                while (ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=( v12,  &v11))
                {
                  unsigned int v10 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v12);
                  if ((ot::AddressResolver::CacheEntry::CanEvict(v10) & 1) == 0) {
                    ++v15;
                  }
                  ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v12);
                }

                ot::AddressResolver::CacheEntry::SetTarget((__n128 *)v14, v18);
                ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)v14, v17);
                if (v15 >= 0x20u)
                {
                  ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v14, 1);
                  ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v14, 0);
                }

                else
                {
                  ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v14, 0);
                  ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v14, 3);
                  uint64_t v8 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
                  ot::TimeTicker::RegisterReceiver(v8, 2);
                }

                ot::LinkedList<ot::AddressResolver::CacheEntry>::Push( (ot::AddressResolver::CacheEntry **)this + 2051,  v14);
                ot::AddressResolver::LogCacheEntryChange((uint64_t)this, 0, 1LL, v14, 0LL);
              }
            }
          }
        }
      }
    }
  }

uint64_t ot::AddressResolver::ResolveUsingNetDataServices( ot::AddressResolver *this, const ot::Ip6::Address *a2, unsigned __int16 *a3)
{
  unsigned __int16 v16 = this;
  unsigned __int16 v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = 23;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(v12);
  ot::NetworkData::Service::DnsSrpUnicast::Info::Info((ot::NetworkData::Service::DnsSrpUnicast::Info *)v10);
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  Deviceunsigned int Mode = ot::Mle::Mle::GetDeviceMode(v3);
  if (!ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::DeviceMode *)&DeviceMode))
  {
    while (1)
    {
      uint64_t v4 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
      if (ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo( v4,  v12,  (ot::NetworkData::Service::DnsSrpUnicast::Info *)v10)) {
        break;
      }
      if (v10[18] == 1)
      {
        uint64_t v7 = v15;
        ot::Ip6::SockAddr::GetAddress((ot::Ip6::SockAddr *)v10);
        if (ot::Equatable<ot::Ip6::Address>::operator==(v7, v5))
        {
          *uint64_t v14 = v11;
          return 0;
        }
      }
    }
  }

  return v13;
}

__n128 ot::AddressResolver::CacheEntry::SetTarget(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

uint64_t ot::AddressResolver::CacheEntry::SetCanEvict(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2ot::MeshCoP::Tlv::SetType(this, 4) = a2 & 1;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry11SetCanEvictEb(this, a2);
}

uint64_t ot::AddressResolver::CacheEntry::SetTimeout(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 20)  = a2;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry10SetTimeoutEt(this, a2);
}

BOOL ot::AddressResolver::RestartAddressQueries(ot::AddressResolver *this)
{
  unsigned __int16 v11 = this;
  ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail();
  unsigned int v10 = v1;
  if (v1)
  {
    Head  = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)this + 16424);
    ot::AddressResolver::CacheEntry::SetNext(v10, Head);
  }

  else
  {
    uint64_t v2 = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)this + 16424);
    ot::LinkedList<ot::AddressResolver::CacheEntry>::SetHead((void *)this + 2052, v2);
  }

  ot::LinkedList<ot::AddressResolver::CacheEntry>::Clear((void *)this + 2053);
  v9[1]  = (ot::AddressResolver *)((char *)this + 16416);
  v9[0]  = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)this + 16416);
  uint64_t v8 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=( v9,  &v8);
    if (!result) {
      break;
    }
    uint64_t v7 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v9);
    ot::AddressResolver::CacheEntry::GetTarget(v7);
    ot::AddressResolver::SendAddressQuery(this, v5);
    IgnoreError();
    ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v7, 3);
    ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)v7, 8);
    ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v7, 0);
    ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v9);
  }

  return result;
}

void ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail()
{
}

{
  __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE7GetTailEv();
}

void *ot::LinkedList<ot::AddressResolver::CacheEntry>::SetHead(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE7SetHeadEPS2_(result, a2);
}

_WORD *ot::AddressResolver::CacheEntry::SetNext(_WORD *this, ot::AddressResolver::CacheEntry *a2)
{
  uint64_t v4 = this;
  if (a2)
  {
    uint64_t v2 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)this);
    CacheEntryPool  = ot::AddressResolver::GetCacheEntryPool(v2);
    this  = (_WORD *)ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetIndexOf( CacheEntryPool,  (uint64_t)a2);
    v4[9]  = (_WORD)this;
  }

  else
  {
    this[9]  = -1;
  }

  return this;
}

void *ot::LinkedList<ot::AddressResolver::CacheEntry>::Clear(void *result)
{
  *BOOL result = 0LL;
  return result;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE5ClearEv(result);
}

uint64_t ot::AddressResolver::SendAddressQuery(ot::AddressResolver *this, const ot::Ip6::Address *a2)
{
  char v20 = this;
  uint64_t v19 = a2;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v16, Instance);
  uint64_t v3 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  ot::MeshForwarder::UpdateMatterAddressQuerryCnt(v3, v19);
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  unsigned __int16 v17 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v4, 2u);
  if (v17)
  {
    unsigned int v18 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v17, v19);
    if (!v18)
    {
      ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast((ot::Tmf::MessageInfo *)v16);
      unsigned __int16 v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
      unsigned int v18 = ot::Coap::CoapBase::SendMessage(v5, v17, (const ot::Ip6::MessageInfo *)v16);
      if (!v18)
      {
        char v14 = ot::UriToString<(ot::Uri)2>();
        ot::Ip6::Address::ToString(v19, (ot::StringWriter *)v21);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v21);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s for %s", v6, v7, v8, v9, v10, v11, v14);
      }
    }
  }

  else
  {
    unsigned int v18 = 3;
  }

  char v12 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
  ot::TimeTicker::RegisterReceiver(v12, 2);
  if (v18 && v17) {
    ot::Message::Free(v17);
  }
  return v18;
}

uint64_t ot::AddressResolver::CacheEntry::SetRetryDelay(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry13SetRetryDelayEt(this, a2);
}

uint64_t ot::AddressResolver::LookUp(ot::AddressResolver::CacheEntry **this, const ot::Ip6::Address *a2)
{
  unsigned __int16 v5 = this;
  uint64_t v4 = a2;
  unsigned __int16 v3 = -2;
  ot::AddressResolver::Resolve(this, (__n128 *)a2, &v3, 0);
  IgnoreError();
  return v3;
}

uint64_t ot::AddressResolver::Resolve( ot::AddressResolver::CacheEntry **this, __n128 *a2, unsigned __int16 *a3, char a4)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  char v20 = a4 & 1;
  unsigned int v19 = 0;
  unsigned __int16 v17 = 0LL;
  if (!ot::AddressResolver::ResolveUsingNetDataServices( (ot::AddressResolver *)this,  (const ot::Ip6::Address *)a2,  a3)) {
    goto LABEL_29;
  }
  CacheEntry  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry( (uint64_t)this,  (const ot::Ip6::Address *)v22,  (uint64_t *)&v16,  &v17);
  if (CacheEntry && (v16 == this + 2050 || v16 == this + 2051))
  {
    ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(v16, v17);
    char v14 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>((ot::InstanceLocator *)this);
    unsigned __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(CacheEntry);
    if ((unsigned __int16)ot::RouterTable::GetNextHop(v14, Rloc16) != 65534)
    {
      if (v16 == this + 2051) {
        ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid(CacheEntry);
      }
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2050, CacheEntry);
      unsigned __int16 v5 = ot::AddressResolver::CacheEntry::GetRloc16(CacheEntry);
      *uint64_t v21 = v5;
      goto LABEL_29;
    }

    ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(this + 1, CacheEntry);
    CacheEntry  = 0LL;
  }

  if (!CacheEntry)
  {
    if ((v20 & 1) == 0)
    {
      unsigned int v19 = 23;
      goto LABEL_29;
    }

    CacheEntry  = ot::AddressResolver::NewCacheEntry(this, 0);
    if (!CacheEntry)
    {
      unsigned int v19 = 3;
      goto LABEL_29;
    }

    ot::AddressResolver::CacheEntry::SetTarget((__n128 *)CacheEntry, v22);
    ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, 65534);
    ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)CacheEntry, 8);
    ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)CacheEntry, 0);
    unsigned __int16 v16 = 0LL;
  }

  if ((v20 & 1) != 0)
  {
    if (v16 == this + 2052)
    {
      unsigned int v19 = 9;
    }

    else
    {
      if (v16 == this + 2053)
      {
        if ((ot::AddressResolver::CacheEntry::IsInRampDown(CacheEntry) & 1) == 0)
        {
          unsigned int v19 = 2;
          goto LABEL_29;
        }

        ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(this + 2053, v17);
      }

      ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)CacheEntry, 3);
      unsigned int v19 = ot::AddressResolver::SendAddressQuery((ot::AddressResolver *)this, (const ot::Ip6::Address *)v22);
      if (v19)
      {
        ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(this + 1, CacheEntry);
      }

      else
      {
        if (!v16) {
          ot::AddressResolver::LogCacheEntryChange((uint64_t)this, 0, 0LL, CacheEntry, 0LL);
        }
        ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2052, CacheEntry);
        unsigned int v19 = 9;
      }
    }
  }

  else
  {
    unsigned int v19 = 23;
  }

ot::NetworkData::Service::DnsSrpUnicast::Info *ot::NetworkData::Service::DnsSrpUnicast::Info::Info( ot::NetworkData::Service::DnsSrpUnicast::Info *this)
{
  return this;
}

{
  ot::Ip6::SockAddr::SockAddr(this);
  return this;
}

BOOL ot::Mle::DeviceMode::GetNetworkDataType(ot::Mle::DeviceMode *this)
{
  return (*(_BYTE *)this & 1) == 0;
}

{
  return __ZNK2ot3Mle10DeviceMode18GetNetworkDataTypeEv(this);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, 0LL, a2, (const void *)0x10);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh0ENS_3Ip67AddressEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

void ot::AddressResolver::HandleTmf<(ot::Uri)1>( ot::AddressResolver::CacheEntry **a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  std::string v44 = a1;
  std::string v43 = a2;
  std::string v42 = a3;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2)
    && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v43, (uint64_t)v41, v3, v4, v5)
    && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>( v43,  (uint64_t)v40,  v6,  v7,  v8)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v43, &v39, v9, v10))
  {
    int v33 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v43, &v38, v11, v12);
    if (v33)
    {
      if (v33 != 23) {
        return;
      }
      unsigned int v38 = 0;
    }

    v32  = ot::UriToString<(ot::Uri)1>();
    ot::Ip6::MessageInfo::GetPeerAddr(v42);
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v13);
    ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    ot::Ip6::Address::ToString((ot::Ip6::Address *)v41, (ot::StringWriter *)v45);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v45);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Received %s from 0x%04x for %s to 0x%04x",  v15,  v16,  v17,  v18,  v19,  v20,  v32);
    CacheEntry  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry( (uint64_t)a1,  (const ot::Ip6::Address *)v41,  (uint64_t *)&v37,  &v35);
    if (!CacheEntry) {
      return;
    }
    if (v37 != a1 + 2050 || !ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(CacheEntry)) {
      goto LABEL_16;
    }
    MeshLocalIid  = (const void *)ot::AddressResolver::CacheEntry::GetMeshLocalIid(CacheEntry);
    if (!ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(MeshLocalIid, v40))
    {
      ot::AddressResolver::SendAddressError( (ot::AddressResolver *)a1,  (const ot::Ip6::Address *)v41,  (const ot::Ip6::InterfaceIdentifier *)v40,  0LL);
      return;
    }

    unsigned int v31 = v38;
    if (v31 < ot::AddressResolver::CacheEntry::GetLastTransactionTime(CacheEntry))
    {
LABEL_16:
      ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, v39);
      ot::AddressResolver::CacheEntry::SetMeshLocalIid((uint64_t)CacheEntry, (const ot::Ip6::InterfaceIdentifier *)v40);
      ot::AddressResolver::CacheEntry::SetLastTransactionTime((uint64_t)CacheEntry, v38);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(v37, v35);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1 + 2050, CacheEntry);
      ot::AddressResolver::LogCacheEntryChange((uint64_t)a1, 1u, 2LL, CacheEntry, 0LL);
      uint64_t v22 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
      if (!ot::Coap::CoapBase::SendEmptyAck(v22, v43, v42))
      {
        char v23 = ot::UriToString<(ot::Uri)1>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s ack", v24, v25, v26, v27, v28, v29, v23);
      }

      uint64_t v30 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
      ot::MeshForwarder::HandleResolved(v30, v41, 0);
    }
  }

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, 0LL, a2, (void *)0x10, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh0ENS_3Ip67AddressEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)3, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh3ENS_3Ip619InterfaceIdentifierEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 2u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh2EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>( ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 6u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh6EjEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

void ot::AddressResolver::SendAddressError( ot::AddressResolver *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, __n128 *a4)
{
  uint64_t v30 = this;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  uint64_t v27 = a4;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v24, Instance);
  unsigned __int16 v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v25 = ot::Coap::CoapBase::NewMessage(v5);
  if (v25)
  {
    ot::Coap::Message::Init(v25, v27 == 0LL, 2);
    uint64_t v22 = v25;
    uint64_t v6 = ot::PathForUri(0);
    int appended = ot::Coap::Message::AppendUriPathOptions(v22, (ot *)v6);
    if (!appended)
    {
      int appended = ot::Coap::Message::SetPayloadMarker(v25);
      if (!appended)
      {
        int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v25, v29);
        if (!appended)
        {
          int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v25, v28);
          if (!appended)
          {
            if (v27) {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v24, v27);
            }
            else {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast((ot::Tmf::MessageInfo *)v24);
            }
            uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
            int appended = ot::Coap::CoapBase::SendMessage(v7, v25, (const ot::Ip6::MessageInfo *)v24);
            if (!appended)
            {
              char v21 = ot::UriToString<(ot::Uri)0>();
              ot::Ip6::Address::ToString((ot::Ip6::Address *)v29, (ot::StringWriter *)v31);
              ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Sent %s for target %s",  v8,  v9,  v10,  v11,  v12,  v13,  v21);
            }
          }
        }
      }
    }
  }

  else
  {
    int appended = 3;
  }

  if (appended)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
    char v20 = ot::UriToString<(ot::Uri)0>();
    ot::ErrorToString(appended);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Failed to send %s: %s",  v14,  v15,  v16,  v17,  v18,  v19,  v20);
  }

uint64_t ot::AddressResolver::CacheEntry::SetMeshLocalIid( uint64_t this, const ot::Ip6::InterfaceIdentifier *a2)
{
  *(void *)(this + 2ot::MeshCoP::Tlv::SetType(this, 4) = *(void *)a2;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry15SetMeshLocalIidERKNS_3Ip619InterfaceIdentifierE(this, a2);
}

uint64_t ot::AddressResolver::CacheEntry::SetLastTransactionTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20)  = a2;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry22SetLastTransactionTimeEj(this, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>( ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)3, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh3ENS_3Ip619InterfaceIdentifierEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE( a1,  a2);
}

void ot::AddressResolver::HandleTmf<(ot::Uri)0>( ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  v63  = a1;
  v62  = a2;
  v61  = a3;
  LocatorAddress  = 0;
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)0>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    if (ot::Coap::Message::IsConfirmable(v62))
    {
      ot::Ip6::MessageInfo::GetSockAddr(v61);
      if (!ot::Ip6::Address::IsMulticast(v13))
      {
        uint64_t v14 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        if (!ot::Coap::CoapBase::SendEmptyAck(v14, v62, v61))
        {
          char v15 = ot::UriToString<(ot::Uri)0>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Sent %s ack",  v16,  v17,  v18,  v19,  v20,  v21,  v15);
        }
      }
    }

    LocatorAddress  = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>( v62,  (uint64_t)v59,  v10,  v11,  v12);
    if (!LocatorAddress)
    {
      LocatorAddress  = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>( v62,  (uint64_t)v58,  v22,  v23,  v24);
      if (!LocatorAddress)
      {
        uint64_t v25 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
        ot::Ip6::Netif::GetUnicastAddresses(v25);
        v56[1]  = v26;
        v56[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v26);
        v55  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
        while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v56,  &v55))
        {
          v54  = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v56);
          ot::Ip6::Netif::UnicastAddress::GetAddress(v54);
          if (ot::Equatable<ot::Ip6::Address>::operator==(v27, v59))
          {
            uint64_t v28 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
            ot::Mle::Mle::GetMeshLocal64(v28);
            Iid  = (const void *)ot::Ip6::Address::GetIid(v29);
            if (ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=(Iid, v58))
            {
              BOOL v47 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
              ot::Ip6::Netif::UnicastAddress::GetAddress(v54);
              if (ot::BackboneRouter::Leader::IsDomainUnicast(v47, v31))
              {
                v32  = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
                ot::DuaManager::NotifyDuplicateDomainUnicastAddress(v32);
              }

              else
              {
                int v33 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
                ot::Ip6::Netif::RemoveUnicastAddress(v33, v54);
              }

              goto LABEL_25;
            }
          }

          ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v56);
        }

        ot::Ip6::InterfaceIdentifier::ConvertToExtAddress( (ot::Ip6::InterfaceIdentifier *)v58,  (ot::Mac::ExtAddress *)v64);
        v34  = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
        v52  = ot::ChildTable::Iterate(v34, 0);
        v53  = (ot::ChildTable::IteratorBuilder *)&v52;
        v51[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v52);
        v51[1]  = v35;
        v50[0]  = ot::ChildTable::IteratorBuilder::end(v53);
        v50[1]  = v36;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v51, v50))
        {
          uint64_t v49 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v51);
          if (!ot::Neighbor::IsFullThreadDevice(v49))
          {
            ExtAddress  = (const void *)ot::Neighbor::GetExtAddress(v49);
            if (ot::Unequatable<ot::Mac::ExtAddress>::operator!=(ExtAddress, v64)
              && !ot::Child::RemoveIp6Address(v49, (const ot::Ip6::Address *)v59))
            {
              uint64_t v46 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
              unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v49);
              LocatorAddress  = ot::Mle::Mle::GetLocatorAddress(v46, (ot::Ip6::Address *)&v57, Rloc16);
              if (!LocatorAddress) {
                ot::AddressResolver::SendAddressError( a1,  (const ot::Ip6::Address *)v59,  (const ot::Ip6::InterfaceIdentifier *)v58,  &v57);
              }
              break;
            }
          }

          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v51);
        }
      }
    }
  }

  else
  {
    LocatorAddress  = 2;
  }

BOOL ot::Neighbor::IsFullThreadDevice(ot::Neighbor *this)
{
  char v3 = this;
  Deviceunsigned int Mode = ot::Neighbor::GetDeviceMode(this);
  return ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&DeviceMode);
}

{
  return __ZNK2ot8Neighbor18IsFullThreadDeviceEv(this);
}

uint64_t ot::AddressResolver::HandleTmf<(ot::Uri)2>( ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v42 = a1;
  uint64_t v41 = a2;
  uint64_t v40 = a3;
  uint64_t result = ot::Coap::Message::IsNonConfirmablePostRequest(a2);
  if ((result & 1) != 0)
  {
    uint64_t result = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v41, (uint64_t)v39, v4, v5, v6);
    if (!(_DWORD)result)
    {
      char v29 = ot::UriToString<(ot::Uri)2>();
      ot::Ip6::MessageInfo::GetPeerAddr(v40);
      Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
      ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
      ot::Ip6::Address::ToString((ot::Ip6::Address *)v39, (ot::StringWriter *)v43);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v43);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Received %s from 0x%04x for target %s",  v9,  v10,  v11,  v12,  v13,  v14,  v29);
      char v15 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
      if (ot::Ip6::Netif::HasUnicastAddress(v15, (const ot::Ip6::Address *)v39))
      {
        uint64_t v16 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
        ot::Mle::Mle::GetMeshLocal64(v16);
        uint64_t v28 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v17);
        ot::Ip6::MessageInfo::GetPeerAddr(v40);
        ot::AddressResolver::SendAddressQueryResponse(a1, (const ot::Ip6::Address *)v39, v28, 0LL, v18);
        uint64_t v19 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
        return ot::Ip6::Ip6::RemoveMplEntry(v19, v41);
      }

      else
      {
        uint64_t v20 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
        char v36 = ot::ChildTable::Iterate(v20, 0);
        v37  = (ot::ChildTable::IteratorBuilder *)&v36;
        v35[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v36);
        v35[1]  = v21;
        v34[0]  = ot::ChildTable::IteratorBuilder::end(v37);
        v34[1]  = v22;
        while (1)
        {
          uint64_t result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v35, v34);
          if ((result & 1) == 0) {
            break;
          }
          int v33 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v35);
          if (!ot::Neighbor::IsFullThreadDevice(v33) && ot::Neighbor::GetLinkFailures(v33) < 4u)
          {
            HasIp6Address  = ot::Child::HasIp6Address(v33, (const ot::Ip6::Address *)v39);
            if (HasIp6Address)
            {
              int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)HasIp6Address);
              LastHeard  = ot::Neighbor::GetLastHeard(v33);
              uint64_t v24 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
              unsigned int v38 = ot::Time::MsecToSec(v24);
              MeshLocalIid  = (ot::Ip6::InterfaceIdentifier *)ot::Child::GetMeshLocalIid(v33);
              ot::Ip6::MessageInfo::GetPeerAddr(v40);
              ot::AddressResolver::SendAddressQueryResponse(a1, (const ot::Ip6::Address *)v39, MeshLocalIid, &v38, v25);
              uint64_t v26 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
              return ot::Ip6::Ip6::RemoveMplEntry(v26, v41);
            }
          }

          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v35);
        }
      }
    }
  }

  return result;
}

void ot::AddressResolver::SendAddressQueryResponse( ot::AddressResolver *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, unsigned int *a4, __n128 *a5)
{
  uint64_t v26 = this;
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v19, Instance);
  uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v20 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v6, 1u);
  if (v20)
  {
    int v21 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v20, v25);
    if (!v21)
    {
      int v21 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v20, v24);
      if (!v21)
      {
        uint64_t v17 = v20;
        uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v7);
        int v21 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>((uint64_t)v17, Rloc16);
        if (!v21 && (!v23 || (int v21 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v20, *v23)) == 0))
        {
          ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v19, v22);
          uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          int v21 = ot::Coap::CoapBase::SendMessage(v9, v20, (const ot::Ip6::MessageInfo *)v19);
          if (!v21)
          {
            char v16 = ot::UriToString<(ot::Uri)1>();
            ot::Ip6::Address::ToString((ot::Ip6::Address *)v25, (ot::StringWriter *)v27);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Sent %s for target %s",  v10,  v11,  v12,  v13,  v14,  v15,  v16);
          }
        }
      }
    }
  }

  else
  {
    int v21 = 3;
  }

  if (v21)
  {
    if (v20) {
      ot::Message::Free(v20);
    }
  }

uint64_t ot::Ip6::Ip6::RemoveMplEntry(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  return ot::Ip6::Mpl::RemoveMatchedMessage((ot::Ip6::Ip6 *)((char *)this + 136), a2);
}

{
  return __ZN2ot3Ip63Ip614RemoveMplEntryERNS_7MessageE(this, a2);
}

uint64_t ot::Neighbor::GetLinkFailures(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 103);
}

{
  return __ZNK2ot8Neighbor15GetLinkFailuresEv(this);
}

uint64_t ot::Child::GetMeshLocalIid(ot::Child *this)
{
  return (uint64_t)this + 296;
}

{
  return __ZNK2ot5Child15GetMeshLocalIidEv(this);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 2, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh2EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 6u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh6EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::HandleTimeTick(ot::AddressResolver::CacheEntry **this)
{
  uint64_t v43 = this;
  char v42 = 0;
  v41[1]  = (ot::AddressResolver::CacheEntry *)(this + 2051);
  v41[0]  = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)(this + 2051));
  uint64_t v40 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
  while (ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=( v41,  &v40))
  {
    uint64_t v39 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v41);
    if (!ot::AddressResolver::CacheEntry::IsTimeoutZero(v39))
    {
      char v42 = 1;
      ot::AddressResolver::CacheEntry::DecrementTimeout((uint64_t)v39);
      if (ot::AddressResolver::CacheEntry::IsTimeoutZero(v39)) {
        ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v39, 1);
      }
    }

    ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v41);
  }

  v38[1]  = (ot::AddressResolver::CacheEntry *)(this + 2053);
  v38[0]  = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)(this + 2053));
  v37  = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
  while (ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=( v38,  &v37))
  {
    char v36 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v38);
    if (!ot::AddressResolver::CacheEntry::IsTimeoutZero(v36))
    {
      char v42 = 1;
      ot::AddressResolver::CacheEntry::DecrementTimeout((uint64_t)v36);
      if (ot::AddressResolver::CacheEntry::IsTimeoutZero(v36))
      {
        if ((ot::AddressResolver::CacheEntry::IsInRampDown(v36) & 1) != 0)
        {
          RetryDelay  = ot::AddressResolver::CacheEntry::GetRetryDelay(v36);
          v35  = ot::Max<unsigned short>((int)RetryDelay >> 1, 8u);
          if (v35 != (unsigned __int16)ot::AddressResolver::CacheEntry::GetRetryDelay(v36))
          {
            ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)v36, v35);
            ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v36, 64);
            ot::AddressResolver::CacheEntry::GetTarget(v36);
            ot::Ip6::Address::ToString(v9, (ot::StringWriter *)v45);
            char v10 = ot::String<(unsigned short)40>::AsCString((uint64_t)v45);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Ramping down %s retry-delay:%u",  v11,  v12,  v13,  v14,  v15,  v16,  v10);
          }
        }

        else
        {
          ot::AddressResolver::CacheEntry::SetRampDown((uint64_t)v36, 1);
          ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v36, 64);
          ot::AddressResolver::CacheEntry::GetTarget(v36);
          ot::Ip6::Address::ToString(v1, (ot::StringWriter *)v46);
          char v29 = ot::String<(unsigned short)40>::AsCString((uint64_t)v46);
          ot::AddressResolver::CacheEntry::GetTimeout(v36);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Starting ramp down of %s retry-delay:%u",  v2,  v3,  v4,  v5,  v6,  v7,  v29);
        }
      }
    }

    ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v38);
  }

  v34  = 0LL;
  while (1)
  {
    uint64_t result = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(v34, (uint64_t)(this + 2052));
    int v33 = result;
    if (!result) {
      break;
    }
    if (ot::AddressResolver::CacheEntry::IsTimeoutZero(result)) {
      __assert_rtn("HandleTimeTick", "address_resolver.cpp", 1077, "!entry->IsTimeoutZero()");
    }
    char v42 = 1;
    ot::AddressResolver::CacheEntry::DecrementTimeout((uint64_t)v33);
    if (ot::AddressResolver::CacheEntry::IsTimeoutZero(v33))
    {
      unsigned __int16 v31 = ot::AddressResolver::CacheEntry::GetRetryDelay(v33);
      ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v33, v31);
      v32  = 2 * v31;
      if (v32 > 0x40u) {
        v32  = 64;
      }
      ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)v33, v32);
      ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v33, 1);
      ot::AddressResolver::CacheEntry::SetRampDown((uint64_t)v33, 0);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(this + 2052, v34);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2053, v33);
      char v28 = ot::UriToString<(ot::Uri)1>();
      ot::AddressResolver::CacheEntry::GetTarget(v33);
      ot::Ip6::Address::ToString(v18, (ot::StringWriter *)v44);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v44);
      ot::AddressResolver::CacheEntry::GetTimeout(v33);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AddrResolver",  "Timed out waiting for %s for %s, retry: %d",  v19,  v20,  v21,  v22,  v23,  v24,  v28);
      if (gEnableNetworkMonitor == 1) {
        update_address_notification_timeout();
      }
      uint64_t v27 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)this);
      ot::AddressResolver::CacheEntry::GetTarget(v33);
      ot::MeshForwarder::HandleResolved(v27, v25, 2);
    }

    else
    {
      v34  = v33;
    }
  }

  if ((v42 & 1) == 0)
  {
    uint64_t v26 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)this);
    return (ot::AddressResolver::CacheEntry *)ot::TimeTicker::UnregisterReceiver(v26, 2);
  }

  return result;
}

BOOL ot::AddressResolver::CacheEntry::IsTimeoutZero(ot::AddressResolver::CacheEntry *this)
{
  return *((_WORD *)this + 10) == 0;
}

{
  return __ZNK2ot15AddressResolver10CacheEntry13IsTimeoutZeroEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::DecrementTimeout(uint64_t this)
{
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry16DecrementTimeoutEv(this);
}

uint64_t ot::AddressResolver::CacheEntry::SetRampDown(uint64_t this, char a2)
{
  *(_BYTE *)(this + 25)  = a2 & 1;
  return this;
}

{
  return __ZN2ot15AddressResolver10CacheEntry11SetRampDownEb(this, a2);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::HandleIcmpReceive( ot::AddressResolver::CacheEntry **this, ot::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Ip6::Icmp::Header *a4)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  char v10 = a3;
  uint64_t v9 = a4;
  uint64_t result = (ot::AddressResolver::CacheEntry *)ot::Ip6::Icmp::Header::GetType(a4);
  if (result == 1)
  {
    uint64_t result = (ot::AddressResolver::CacheEntry *)ot::Ip6::Icmp::Header::GetCode(v9);
    if (!(_BYTE)result)
    {
      Offset  = ot::Message::GetOffset(v11);
      uint64_t result = (ot::AddressResolver::CacheEntry *)ot::Message::Read<ot::Ip6::Header>(v11, Offset, v8);
      if (!(_DWORD)result)
      {
        Destination  = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v8);
        return ot::AddressResolver::Remove(this, Destination, 5u);
      }
    }
  }

  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIcmp6Header>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t ot::Ip6::Icmp::Header::GetCode(ot::Ip6::Icmp::Header *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot3Ip64Icmp6Header7GetCodeEv(this);
}

const char *ot::AddressResolver::ListToString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = "";
  if (a2 == a1 + 16400) {
    return "cached";
  }
  if (a2 == a1 + 16408) {
    return "snooped";
  }
  if (a2 == a1 + 16416) {
    return "query";
  }
  if (a2 == a1 + 16424) {
    return "query-retry";
  }
  return v3;
}

void ot::AddressResolver::CacheEntry::Init(ot::AddressResolver::CacheEntry *this, ot::Instance *a2)
{
  *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 9) = -1;
}

uint64_t ot::AddressResolver::GetCacheEntryPool(ot::AddressResolver *this)
{
  return (uint64_t)this + 8;
}

{
  return __ZN2ot15AddressResolver17GetCacheEntryPoolEv(this);
}

uint64_t ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt( uint64_t a1, unsigned __int16 a2)
{
  return a1 + 8 + 32LL * a2;
}

{
  return __ZN2ot4PoolINS_15AddressResolver10CacheEntryELt512EE10GetEntryAtEt(a1, a2);
}

uint64_t ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetIndexOf(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)((a2 - (a1 + 8)) / 32);
}

{
  return __ZNK2ot4PoolINS_15AddressResolver10CacheEntryELt512EE10GetIndexOfERKS2_(a1, a2);
}

void *ot::Ip6::Icmp::Handler::Handler(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  result[2]  = 0LL;
  return result;
}

ot::Ip6::SockAddr *ot::Ip6::SockAddr::SockAddr(ot::Ip6::SockAddr *this)
{
  return this;
}

{
  ot::Clearable<ot::Ip6::SockAddr>::Clear((uint64_t)this);
  return this;
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>( ot::AddressResolver::CacheEntry **a1, const ot::Ip6::Address *a2, ot::AddressResolver::CacheEntry **a3)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>((uint64_t)a1, *a1, 0LL, a2, a3);
}

{
  return __ZNK2ot10LinkedListINS_15AddressResolver10CacheEntryEE12FindMatchingINS_3Ip67AddressEEEPKS2_RKT_RS8_( a1,  a2,  a3);
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>( uint64_t a1, ot::AddressResolver::CacheEntry *Next, ot::AddressResolver::CacheEntry *a3, const ot::Ip6::Address *a4, ot::AddressResolver::CacheEntry **a5)
{
  *a5  = 0LL;
  while (Next != a3 && !ot::AddressResolver::CacheEntry::Matches(Next, a4))
  {
    *a5  = Next;
    Next  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_15AddressResolver10CacheEntryEE12FindMatchingINS_3Ip67AddressEEEPKS2_S8_S8_RKT_RS8_( a1,  Next,  a3,  a4,  a5);
}

BOOL ot::AddressResolver::CacheEntry::Matches( ot::AddressResolver::CacheEntry *this, const ot::Ip6::Address *a2)
{
  return ot::Equatable<ot::Ip6::Address>::operator==(v2, a2);
}

{
  return __ZNK2ot15AddressResolver10CacheEntry7MatchesERKNS_3Ip67AddressE(this, a2);
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator::Advance( ot::AddressResolver::CacheEntry **a1)
{
  uint64_t result = ot::AddressResolver::CacheEntry::GetNext(*a1);
  *a1  = (ot::AddressResolver::CacheEntry *)result;
  return result;
}

{
  return __ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE8Iterator7AdvanceEv(a1);
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail( ot::AddressResolver::CacheEntry **a1)
{
  Next  = *a1;
  if (*a1)
  {
    for (uint64_t i = ot::AddressResolver::CacheEntry::GetNext(Next); i; uint64_t i = ot::AddressResolver::CacheEntry::GetNext(Next))
      Next  = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_15AddressResolver10CacheEntryEE7GetTailEv(a1);
}

ot::AnnounceBeginServer *ot::AnnounceBeginServer::AnnounceBeginServer( ot::AnnounceBeginServer *this, ot::Instance *a2)
{
  return this;
}

{
  ot::AnnounceBeginServer::AnnounceBeginServer(this, a2);
  return this;
}

uint64_t ot::AnnounceBeginServer::HandleTimer(ot::AnnounceBeginServer *this, ot::Timer *a2)
{
  uint64_t v2 = (ot::AnnounceSenderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(this);
  return ot::AnnounceSenderBase::HandleTimer(v2);
}

uint64_t ot::AnnounceBeginServer::SendAnnounce( ot::AnnounceBeginServer *this, int a2, char a3, unsigned __int16 a4)
{
  char v10 = this;
  int v9 = a2;
  char v8 = a3;
  unsigned __int16 v7 = a4;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v6, a2);
  ot::AnnounceSenderBase::SetChannelMask(this, v6);
  ot::AnnounceSenderBase::SetPeriod((uint64_t)this, v7);
  ot::AnnounceSenderBase::SetJitter((uint64_t)this, 0);
  return ot::AnnounceSenderBase::SendAnnounce(this, v8);
}

uint64_t ot::AnnounceSenderBase::SetPeriod(uint64_t this, int a2)
{
  *(_DWORD *)(this + ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot18AnnounceSenderBase9SetPeriodEj(this, a2);
}

uint64_t ot::AnnounceSenderBase::SetJitter(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8)  = a2;
  return this;
}

{
  return __ZN2ot18AnnounceSenderBase9SetJitterEt(this, a2);
}

void ot::AnnounceBeginServer::HandleTmf<(ot::Uri)10>( ot::AnnounceBeginServer *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v25, v3, v4, v5, v6);
    if (ChannelMask)
    {
      if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(v25, &v22, v7, v8)
        && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(v25, &v21, v9, v10))
      {
        ot::AnnounceBeginServer::SendAnnounce(a1, ChannelMask, v22, v21);
        if (ot::Coap::Message::IsConfirmable(v25))
        {
          ot::Ip6::MessageInfo::GetSockAddr(v24);
          if (!ot::Ip6::Address::IsMulticast(v11))
          {
            uint64_t v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
            if (!ot::Coap::CoapBase::SendEmptyAck(v12, v25, v24))
            {
              char v13 = ot::UriToString<(ot::Uri)10>();
              ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshCoP",  "Sent %s response",  v14,  v15,  v16,  v17,  v18,  v19,  v13);
            }
          }
        }
      }
    }
  }

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>( ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x36u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh54EhEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x37u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh55EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::AnnounceBeginServer>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_19AnnounceBeginServerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::AnnounceBeginServer>(uint64_t a1)
{
  return a1 + 164392;
}

{
  return __ZN2ot8Instance3GetINS_19AnnounceBeginServerEEERT_v(a1);
}

ot::AnnounceSenderBase *ot::AnnounceSenderBase::AnnounceSenderBase( ot::AnnounceSenderBase *this, ot::Instance *a2, void (*a3)(ot::Timer *))
{
  *((_DWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  *((_BYTE *)this + 10)  = 0;
  *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((_BYTE *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
  ot::TimerMilli::TimerMilli((ot::AnnounceSenderBase *)((char *)this + 16), a2, a3);
  return this;
}

{
  ot::AnnounceSenderBase::AnnounceSenderBase(this, a2, a3);
  return this;
}

uint64_t ot::AnnounceSenderBase::SendAnnounce(ot::AnnounceSenderBase *this, char a2)
{
  uint64_t result = ot::AnnounceSenderBase::IsRunning(this);
  if ((result & 1) != 0)
  {
    *((_BYTE *)this + 10) += a2;
  }

  else if (*((_DWORD *)this + 1))
  {
    uint64_t result = ot::Mac::ChannelMask::IsEmpty(this);
    if ((result & 1) == 0)
    {
      ot::AnnounceSenderBase::SelectStartingChannel(this);
      *((_BYTE *)this + 10)  = a2;
      *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_BYTE *)this + 12);
      Uint32InRange  = ot::Random::NonCrypto::GetUint32InRange(0LL, *((unsigned __int16 *)this + 4) + 1);
      return ot::TimerMilli::Start((ot::AnnounceSenderBase *)((char *)this + 16), Uint32InRange);
    }
  }

  return result;
}

BOOL ot::AnnounceSenderBase::IsRunning(ot::AnnounceSenderBase *this)
{
  return ot::Timer::IsRunning((ot::AnnounceSenderBase *)((char *)this + 16));
}

{
  return __ZNK2ot18AnnounceSenderBase9IsRunningEv(this);
}

void ot::AnnounceSenderBase::SelectStartingChannel(ot::AnnounceSenderBase *this)
{
  if (!ot::Mac::ChannelMask::IsEmpty(this)
    && (*((unsigned __int8 *)this + 12) == 255 || !ot::Mac::ChannelMask::ContainsChannel(this, *((_BYTE *)this + 12))))
  {
    *((_BYTE *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
    ot::Mac::ChannelMask::GetNextChannel(this, (unsigned __int8 *)this + 12);
    IgnoreError();
  }

uint64_t ot::AnnounceSenderBase::Stop(ot::AnnounceSenderBase *this)
{
  uint64_t result = ot::TimerMilli::Stop((ot::AnnounceSenderBase *)((char *)this + 16));
  *((_BYTE *)this + 10)  = 0;
  return result;
}

void ot::AnnounceSenderBase::SetChannelMask(ot::InstanceLocator *a1, int a2)
{
  *(_DWORD *)a1  = a2;
  uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  SupportedChannelMasunsigned __int16 k = (const ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  ot::Mac::ChannelMask::Intersect(a1, SupportedChannelMask);
  if (ot::Mac::ChannelMask::IsEmpty(a1)) {
    ot::AnnounceSenderBase::Stop(a1);
  }
  else {
    ot::AnnounceSenderBase::SelectStartingChannel(a1);
  }
}

void ot::AnnounceSenderBase::SetStartingChannel(ot::AnnounceSenderBase *this, char a2)
{
  *((_BYTE *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  ot::AnnounceSenderBase::SelectStartingChannel(this);
}

uint64_t ot::AnnounceSenderBase::HandleTimer(ot::AnnounceSenderBase *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::SendAnnounce(v1, *((_BYTE *)this + 11));
  while (1)
  {
    uint64_t result = ot::Mac::ChannelMask::GetNextChannel(this, (unsigned __int8 *)this + 11);
    if (!(_DWORD)result) {
      break;
    }
    *((_BYTE *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = -1;
  }

  if (*((unsigned __int8 *)this + 11) != *((unsigned __int8 *)this + 12)
    || !*((_BYTE *)this + 10)
    || (--*((_BYTE *)this + 10), *((_BYTE *)this + 10)))
  {
    unsigned int v3 = ot::Random::NonCrypto::AddJitter((ot::Random::NonCrypto *)*((unsigned int *)this + 1), *((_WORD *)this + 4));
    return ot::TimerMilli::Start((ot::AnnounceSenderBase *)((char *)this + 16), v3);
  }

  return result;
}

void ot::Mle::Mle::SendAnnounce(ot::Mle::Mle *this, unsigned __int8 a2)
{
}

{
  __ZN2ot3Mle3Mle12SendAnnounceEh(this, a2);
}

ot::AnnounceSender *ot::AnnounceSender::AnnounceSender(ot::AnnounceSender *this, ot::Instance *a2)
{
  return this;
}

{
  ot::AnnounceSender::AnnounceSender(this, a2);
  return this;
}

uint64_t ot::AnnounceSender::HandleTimer(ot::AnnounceSender *this, ot::Timer *a2)
{
  uint64_t v2 = (ot::AnnounceSenderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
  return ot::AnnounceSenderBase::HandleTimer(v2);
}

void ot::AnnounceSender::HandleTrickleTimer(ot::AnnounceSender *this, ot::TrickleTimer *a2)
{
  uint64_t v2 = (ot::AnnounceSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
  ot::AnnounceSender::HandleTrickleTimer(v2);
}

uint64_t ot::AnnounceSender::UpdateOnReceivedAnnounce(ot::AnnounceSender *this)
{
  return ot::TrickleTimer::IndicateConsistent((uint64_t)this + 40);
}

void ot::AnnounceSender::Stop(ot::AnnounceSender *this)
{
}

void ot::AnnounceSender::HandleTrickleTimer(ot::AnnounceSender *this)
{
}

void ot::AnnounceSender::HandleNotifierEvents(ot::AnnounceSender *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (ot::Events::Contains(&v3, 4LL)) {
    ot::AnnounceSender::HandleRoleChanged(a1);
  }
  if (ot::Events::Contains(&v3, 0x10000000LL)) {
    ot::AnnounceSender::HandleActiveDatasetChanged(a1);
  }
  if (ot::Events::Contains(&v3, 0x4000LL)) {
    ot::AnnounceSender::HandleThreadChannelChanged(a1);
  }
}

void ot::AnnounceSender::HandleRoleChanged(ot::AnnounceSender *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  unsigned int Role = ot::Mle::Mle::GetRole(v1);
  if (Role > 1
    && (Role != 2
     || (uint64_t v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
         (ot::Mle::MleRouter::IsRouterEligible(v2) & 1) != 0)
     && (uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this),
         ot::Mle::Mle::IsRxOnWhenIdle(v3))))
  {
    ot::TrickleTimer::Start((uint64_t)this + 40, 0, 0xA7F80u, 0xA7F80u, 8);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AnnounceSender", "Started", v4, v5, v6, v7, v8, v9, v10);
  }

  else
  {
    ot::AnnounceSender::Stop(this);
  }

void ot::AnnounceSender::HandleActiveDatasetChanged(ot::AnnounceSender *this)
{
  uint64_t v15 = this;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v14);
  active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  if (!ot::MeshCoP::DatasetManager::GetChannelMask(active, (ot::Mac::ChannelMask *)&v14)
    && !ot::Mac::ChannelMask::IsEmpty((ot::Mac::ChannelMask *)&v14))
  {
    ChannelMasunsigned __int16 k = ot::AnnounceSenderBase::GetChannelMask(this);
    if (ot::Unequatable<ot::Mac::ChannelMask>::operator!=(&v14, &ChannelMask))
    {
      v12[1]  = v14;
      ot::AnnounceSenderBase::SetChannelMask(this, v14);
      NumberOfChannels  = ot::Mac::ChannelMask::GetNumberOfChannels((ot::Mac::ChannelMask *)&v14);
      ot::AnnounceSenderBase::SetPeriod((uint64_t)this, 0x53FC1u / NumberOfChannels);
      v12[0]  = ot::AnnounceSenderBase::GetChannelMask(this);
      ot::Mac::ChannelMask::ToString((ot::Mac::ChannelMask *)v12, (ot::StringWriter *)v16);
      char v10 = ot::String<(unsigned short)45>::AsCString((uint64_t)v16);
      Period  = ot::AnnounceSenderBase::GetPeriod(this);
      ot::ToUlong(Period);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AnnounceSender",  "ChannelMask:%s, period:%lu",  v4,  v5,  v6,  v7,  v8,  v9,  v10);
      ot::AnnounceSender::HandleThreadChannelChanged(this);
    }
  }

void ot::AnnounceSender::HandleThreadChannelChanged(ot::AnnounceSender *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  PanChannel  = ot::Mac::Mac::GetPanChannel(v1);
  ot::AnnounceSenderBase::SetStartingChannel(this, PanChannel);
  StartingChannel  = ot::AnnounceSenderBase::GetStartingChannel(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"AnnounceSender",  "StartingChannel:%d",  v4,  v5,  v6,  v7,  v8,  v9,  StartingChannel);
}

BOOL ot::Unequatable<ot::Mac::ChannelMask>::operator!=(_DWORD *a1, _DWORD *a2)
{
  return !ot::Mac::ChannelMask::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_3Mac11ChannelMaskEEneERKS2_(a1, a2);
}

uint64_t ot::AnnounceSenderBase::GetChannelMask(ot::AnnounceSenderBase *this)
{
  return *(unsigned int *)this;
}

{
  return __ZNK2ot18AnnounceSenderBase14GetChannelMaskEv(this);
}

uint64_t ot::AnnounceSenderBase::GetPeriod(ot::AnnounceSenderBase *this)
{
  return *((unsigned int *)this + 1);
}

{
  return __ZNK2ot18AnnounceSenderBase9GetPeriodEv(this);
}

uint64_t ot::AnnounceSenderBase::GetStartingChannel(ot::AnnounceSenderBase *this)
{
  return *((unsigned __int8 *)this + 12);
}

{
  return __ZNK2ot18AnnounceSenderBase18GetStartingChannelEv(this);
}

uint64_t ot::ChildTable::Iterator::Iterator(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(a1 + 8)  = a3;
  ot::ChildTable::Iterator::Reset((ot::ChildTable::Iterator *)a1);
  return a1;
}

{
  ot::ChildTable::Iterator::Iterator(a1, a2, a3);
  return a1;
}

uint64_t ot::ChildTable::Iterator::Reset(ot::ChildTable::Iterator *this)
{
  *(void *)this  = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this) + 8;
  uint64_t result = ot::Neighbor::MatchesFilter(*(void *)this, *((_BYTE *)this + 8));
  if ((result & 1) == 0) {
    return ot::ChildTable::Iterator::Advance((uint64_t)this);
  }
  return result;
}

uint64_t ot::ChildTable::Iterator::Advance(uint64_t this)
{
  uint64_t v3 = (unsigned __int8 *)this;
  if (*(void *)this)
  {
    while (1)
    {
      *(void *)v3 += 576LL;
      unint64_t v2 = *(void *)v3;
      uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)v3) + 8;
      this  = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)v3);
      this  = ot::Neighbor::MatchesFilter(*(void *)v3, v3[8]);
      if ((this & 1) != 0) {
        return this;
      }
    }

    *(void *)uint64_t v3 = 0LL;
  }

  return this;
}

ot::ChildTable *ot::ChildTable::ChildTable(ot::ChildTable *this, ot::Instance *a2)
{
  *(_WORD *)this  = 64;
  uint64_t v5 = (ot::ChildTable *)((char *)this + 8);
  do
  {
    ot::Child::Child(v5);
    BOOL v2 = (char *)v5 + 576 != (char *)this + 36872;
    uint64_t v5 = (ot::Child *)((char *)v5 + 576);
  }

  while (v2);
  for (uint64_t i = (ot::ChildTable *)((char *)this + 8);
        i != (ot::ChildTable *)((char *)this + 36872);
        uint64_t i = (ot::Child *)((char *)i + 576))
  {
    ot::Child::Init(i, a2);
    ot::Child::Clear(i);
  }

  return this;
}

{
  ot::ChildTable::ChildTable(this, a2);
  return this;
}

ot::Child *ot::Child::Child(ot::Child *this)
{
  return this;
}

{
  ot::Neighbor::Neighbor(this);
  return this;
}

ot::InstanceLocator *ot::Child::Init(ot::Child *this, ot::Instance *a2)
{
  return ot::Neighbor::Init(this, a2);
}

{
  return __ZN2ot5Child4InitERNS_8InstanceE(this, a2);
}

ot::InstanceLocator *ot::ChildTable::Clear(ot::InstanceLocator *this)
{
  BOOL v2 = (ot::InstanceLocator *)((char *)this + 8);
  uint64_t v1 = (ot::InstanceLocator *)((char *)this + 36872);
  while (v2 != v1)
  {
    this  = ot::Child::Clear(v2);
    BOOL v2 = (ot::Child *)((char *)v2 + 576);
  }

  return this;
}

uint64_t ot::ChildTable::GetChildAtIndex(ot::ChildTable *this, unsigned __int16 a2)
{
  uint64_t v3 = 0LL;
  return v3;
}

ot::Child *ot::ChildTable::GetNewChild(ot::ChildTable *this)
{
  uint64_t v6 = this;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, 4);
  ot::ChildTable::FindChild(this, (const ot::Neighbor::AddressMatcher *)v4);
  uint64_t v5 = v1;
  if (v1) {
    ot::Child::Clear(v5);
  }
  return v5;
}

void ot::ChildTable::FindChild(ot::ChildTable *this, const ot::Neighbor::AddressMatcher *a2)
{
}

{
  __ZN2ot10ChildTable9FindChildERKNS_8Neighbor14AddressMatcherE(this, a2);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, char a2)
{
  return a1;
}

ot::Neighbor *ot::ChildTable::FindChild(ot::ChildTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v4 = (ot::ChildTable *)((char *)this + 8);
  for (__int16 i = *(_WORD *)this; i; --i)
  {
    if ((ot::Neighbor::Matches(v4, a2) & 1) != 0) {
      return v4;
    }
    uint64_t v4 = (ot::Neighbor *)((char *)v4 + 576);
  }

  return 0LL;
}

uint64_t ot::Neighbor::Matches(ot::Neighbor *this, const ot::Neighbor::AddressMatcher *a2)
{
  return ot::Neighbor::AddressMatcher::Matches(a2, this) & 1;
}

{
  return __ZNK2ot8Neighbor7MatchesERKNS0_14AddressMatcherE(this, a2);
}

void ot::ChildTable::FindChild(ot::ChildTable *a1, __int16 a2, char a3)
{
  uint64_t v6 = a1;
  __int16 v5 = a2;
  v4[21]  = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2, a3);
  ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, __int16 a2, char a3)
{
  return a1;
}

void ot::ChildTable::FindChild(ot::ChildTable *a1, uint64_t a2, char a3)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  v4[23]  = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2, a3);
  ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

void ot::ChildTable::FindChild(ot::ChildTable *a1, ot::Mac::Address *a2, char a3)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  v4[23]  = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2, a3);
  ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, ot::Mac::Address *a2, char a3)
{
  if (ot::Mac::Address::IsShort(a2)) {
    __int16 Short = ot::Mac::Address::GetShort(a2);
  }
  else {
    __int16 Short = -2;
  }
  if (ot::Mac::Address::IsExtended(a2))
  {
    ot::Mac::Address::GetExtended(a2);
    ot::Neighbor::AddressMatcher::AddressMatcher(a1, a3, Short, v3);
  }

  else
  {
    ot::Neighbor::AddressMatcher::AddressMatcher(a1, a3, Short, 0LL);
  }

  return a1;
}

BOOL ot::ChildTable::HasChildren(ot::ChildTable *a1, char a2)
{
  uint64_t v5 = a1;
  v4[23]  = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2);
  return ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4) != 0LL;
}

uint64_t ot::ChildTable::GetNumChildren(__int16 *a1, unsigned __int8 a2)
{
  unsigned __int16 v5 = 0;
  uint64_t v4 = (uint64_t)(a1 + 4);
  for (__int16 i = *a1; i; --i)
  {
    if ((ot::Neighbor::MatchesFilter(v4, a2) & 1) != 0) {
      ++v5;
    }
    v4 += 576LL;
  }

  return v5;
}

uint64_t ot::ChildTable::SetMaxChildrenAllowed(ot::ChildTable *this, unsigned __int16 a2)
{
  unsigned int v4 = 0;
  if (a2 && a2 <= 0x40u)
  {
    if (ot::ChildTable::HasChildren(this, 5)) {
      return 13;
    }
    else {
      *(_WORD *)this  = a2;
    }
  }

  else
  {
    return 7;
  }

  return v4;
}

uint64_t ot::ChildTable::GetChildInfoById(ot::InstanceLocator *a1, unsigned __int16 a2, ot::Child::Info *a3)
{
  __int16 v10 = a2;
  unsigned int v8 = 0;
  if ((a2 & 0xFE00) != 0) {
    __int16 v10 = ot::Mle::ChildIdFromRloc16((ot::Mle *)a2);
  }
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  __int16 v7 = ot::Mac::Mac::GetShortAddress(v3) | v10;
  ot::ChildTable::FindChild(a1, v7, 1);
  if (v4) {
    ot::Child::Info::SetFrom(a3, v4);
  }
  else {
    return 23;
  }
  return v8;
}

uint64_t ot::Mle::ChildIdFromRloc16(ot::Mle *this)
{
  return (unsigned __int16)this & 0x1FF;
}

{
  return __ZN2ot3Mle17ChildIdFromRloc16Et(this);
}

uint64_t ot::ChildTable::GetChildInfoByIndex(ot::ChildTable *a1, unsigned __int16 a2, ot::Child::Info *a3)
{
  unsigned int v5 = 0;
  ChildAtIndex  = (ot::Neighbor *)ot::ChildTable::GetChildAtIndex(a1, a2);
  if (ChildAtIndex && ot::Neighbor::IsStateValidOrRestoring(ChildAtIndex)) {
    ot::Child::Info::SetFrom(a3, ChildAtIndex);
  }
  else {
    return 23;
  }
  return v5;
}

uint64_t ot::ChildTable::Restore(ot::ChildTable *this)
{
  v32  = this;
  int v31 = 0;
  char v30 = 0;
  unsigned __int16 v29 = 0;
  uint64_t v1 = (ot::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  ot::Settings::IterateChildInfo(v1);
  char v28 = (ot::Settings::ChildInfoIteratorBuilder *)&v27;
  ot::Settings::ChildInfoIteratorBuilder::begin( (ot::Settings::ChildInfoIteratorBuilder *)&v27,  (ot::Settings::ChildInfoIterator *)v34);
  ot::Settings::ChildInfoIteratorBuilder::end(v28, (uint64_t)v33);
  while ((ot::Unequatable<ot::Settings::ChildInfoIterator>::operator!=((uint64_t)v34, (uint64_t)v33) & 1) != 0)
  {
    ot::Settings::ChildInfoIterator::operator*();
    uint64_t v26 = v2;
    ot::SettingsBase::ChildInfo::GetExtAddress(v2);
    ot::ChildTable::FindChild(this, v3, 5);
    NewChild  = v4;
    if (v4)
    {
      char v30 = 1;
    }

    else
    {
      NewChild  = ot::ChildTable::GetNewChild(this);
      if (!NewChild)
      {
        int v31 = 3;
        break;
      }
    }

    ot::Child::Clear(NewChild);
    uint64_t v16 = NewChild;
    ot::SettingsBase::ChildInfo::GetExtAddress(v26);
    ot::Neighbor::SetExtAddress((uint64_t)v16, v5);
    LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(NewChild);
    ot::LinkQualityInfo::Clear(LinkInfo);
    uint64_t v17 = NewChild;
    __int16 Rloc16 = ot::SettingsBase::ChildInfo::GetRloc16(v26);
    ot::Neighbor::SetRloc16((uint64_t)v17, Rloc16);
    uint64_t v18 = NewChild;
    Timeout  = ot::SettingsBase::ChildInfo::GetTimeout(v26);
    ot::Child::SetTimeout((uint64_t)v18, Timeout);
    uint64_t v19 = NewChild;
    char Mode = ot::SettingsBase::ChildInfo::GetMode(v26);
    ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v24, Mode);
    ot::Child::SetDeviceMode(v19, v24);
    ot::Neighbor::SetState(NewChild, 1);
    ot::Child::GenerateChallenge(NewChild);
    uint64_t v20 = NewChild;
    int Now = ot::TimerMilli::GetNow(v10);
    ot::Neighbor::SetLastHeard((uint64_t)v20, Now);
    unsigned __int16 v21 = NewChild;
    Version  = ot::SettingsBase::ChildInfo::GetVersion(v26);
    ot::Neighbor::SetVersion((uint64_t)v21, Version);
    uint64_t v12 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
    ot::IndirectSender::SetChildUseShortAddress(v12, NewChild, 1);
    char v13 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    ot::NeighborTable::Signal(v13, 0, NewChild);
    ++v29;
    ot::Settings::ChildInfoIterator::operator++((ot::Settings::ChildInfoIterator *)v34);
  }

  if ((v30 & 1) != 0) {
    return ot::ChildTable::RefreshStoredChildren(this);
  }
  int v15 = v29;
  uint64_t result = ot::ChildTable::GetMaxChildren(this);
  return result;
}

ot::SettingsDriver *ot::Settings::IterateChildInfo(ot::Settings *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::SettingsDriver::SettingsDriver((ot::SettingsDriver *)&v3, Instance);
}

{
  return __ZN2ot8Settings16IterateChildInfoEv(this);
}

ot::Settings::ChildInfoIterator *ot::Settings::ChildInfoIteratorBuilder::begin@<X0>( ot::Settings::ChildInfoIteratorBuilder *this@<X0>, ot::Settings::ChildInfoIterator *a2@<X8>)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::Settings::ChildInfoIterator::ChildInfoIterator(a2, Instance);
}

{
  return __ZN2ot8Settings24ChildInfoIteratorBuilder5beginEv(this, a2);
}

uint64_t ot::Settings::ChildInfoIteratorBuilder::end@<X0>( ot::Settings::ChildInfoIteratorBuilder *this@<X0>, uint64_t a2@<X8>)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::Settings::ChildInfoIterator::ChildInfoIterator(a2, Instance);
}

{
  return __ZN2ot8Settings24ChildInfoIteratorBuilder3endEv(this, a2);
}

uint64_t ot::Unequatable<ot::Settings::ChildInfoIterator>::operator!=(uint64_t a1, uint64_t a2)
{
  return (ot::Settings::ChildInfoIterator::operator==(a1, a2) ^ 1) & 1;
}

  ;
}

{
  return __ZNK2ot11UnequatableINS_8Settings17ChildInfoIteratorEEneERKS2_(a1, a2);
}

uint64_t ot::Neighbor::SetExtAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 48)  = *(void *)a2;
  return this;
}

{
  return __ZN2ot8Neighbor13SetExtAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::Neighbor::SetRloc16(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 96)  = a2;
  return this;
}

{
  return __ZN2ot8Neighbor9SetRloc16Et(this, a2);
}

uint64_t ot::Child::SetTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 54ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot5Child10SetTimeoutEj(this, a2);
}

uint64_t ot::Neighbor::SetVersion(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot8Neighbor10SetVersionEt(this, a2);
}

void ot::Settings::ChildInfoIterator::operator++(ot::Settings::ChildInfoIterator *a1)
{
}

{
  ot::Settings::ChildInfoIterator::Advance(a1);
}

{
  __ZN2ot8Settings17ChildInfoIteratorppEi(a1);
}

{
  __ZN2ot8Settings17ChildInfoIteratorppEv(a1);
}

uint64_t ot::ChildTable::GetMaxChildren(ot::ChildTable *this)
{
  return 64LL;
}

{
  return __ZNK2ot10ChildTable14GetMaxChildrenEv(this);
}

uint64_t ot::ChildTable::RefreshStoredChildren(ot::ChildTable *this)
{
  unsigned int v5 = (ot::ChildTable *)((char *)this + 8);
  uint64_t v1 = (ot::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  uint64_t result = ot::Settings::DeleteAllChildInfo(v1);
  if (!(_DWORD)result)
  {
    for (__int16 i = *(_WORD *)this; i; --i)
    {
      uint64_t result = ot::Neighbor::IsStateInvalid(v5);
      if ((result & 1) == 0)
      {
        uint64_t result = ot::ChildTable::StoreChild(this, v5);
        if ((_DWORD)result) {
          break;
        }
      }

      unsigned int v5 = (ot::Neighbor *)((char *)v5 + 576);
    }
  }

  return result;
}

void ot::ChildTable::RemoveStoredChild(ot::ChildTable *this, const ot::Child *a2)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Settings::ChildInfoIterator::ChildInfoIterator((ot::Settings::ChildInfoIterator *)v6, Instance);
  while ((ot::Settings::ChildInfoIterator::IsDone((ot::Settings::ChildInfoIterator *)v6) & 1) == 0)
  {
    ot::Settings::ChildInfoIterator::GetChildInfo((ot::Settings::ChildInfoIterator *)v6);
    int Rloc16 = (unsigned __int16)ot::SettingsBase::ChildInfo::GetRloc16(v3);
    if (Rloc16 == (unsigned __int16)ot::Neighbor::GetRloc16(a2))
    {
      ot::Settings::ChildInfoIterator::Delete((ot::Settings::ChildInfoIterator *)v6);
      IgnoreError();
      return;
    }

    ot::Settings::ChildInfoIterator::operator++((ot::Settings::ChildInfoIterator *)v6);
  }

uint64_t ot::Settings::ChildInfoIterator::IsDone(ot::Settings::ChildInfoIterator *this)
{
  return *((_BYTE *)this + 20) & 1;
}

  ;
}

{
  return __ZNK2ot8Settings17ChildInfoIterator6IsDoneEv(this);
}

uint64_t ot::ChildTable::StoreChild(ot::ChildTable *this, const ot::Child *a2)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  ot::ChildTable::RemoveStoredChild(this, a2);
  ot::SettingsBase::ChildInfo::Init((ot::SettingsBase::ChildInfo *)v13);
  ExtAddress  = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v11);
  ot::SettingsBase::ChildInfo::SetExtAddress(v13, ExtAddress);
  Timeout  = ot::Child::GetTimeout(v11);
  ot::SettingsBase::ChildInfo::SetTimeout((ot::SettingsBase::ChildInfo *)v13, Timeout);
  unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v11);
  ot::SettingsBase::ChildInfo::SetRloc16((ot::SettingsBase::ChildInfo *)v13, Rloc16);
  Devicechar Mode = ot::Neighbor::GetDeviceMode(v11);
  char v5 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode);
  ot::SettingsBase::ChildInfo::SetMode((uint64_t)v13, v5);
  Version  = ot::Neighbor::GetVersion(v11);
  ot::SettingsBase::ChildInfo::SetVersion((ot::SettingsBase::ChildInfo *)v13, Version);
  __int16 v7 = (ot::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  return ot::Settings::AddChildInfo(v7, (const ot::SettingsBase::ChildInfo *)v13);
}

void *ot::SettingsBase::ChildInfo::SetExtAddress(void *this, const ot::Mac::ExtAddress *a2)
{
  *this  = *(void *)a2;
  return this;
}

{
  return __ZN2ot12SettingsBase9ChildInfo13SetExtAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::SettingsBase::ChildInfo::SetTimeout(ot::SettingsBase::ChildInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase9ChildInfo10SetTimeoutEj(this, a2);
}

uint64_t ot::Child::GetTimeout(ot::Child *this)
{
  return *((unsigned int *)this + 136);
}

{
  return __ZNK2ot5Child10GetTimeoutEv(this);
}

uint64_t ot::SettingsBase::ChildInfo::SetRloc16(ot::SettingsBase::ChildInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 6)  = result;
  return result;
}

{
  return __ZN2ot12SettingsBase9ChildInfo9SetRloc16Et(this, a2);
}

uint64_t ot::SettingsBase::ChildInfo::SetMode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot12SettingsBase9ChildInfo7SetModeEh(this, a2);
}

uint64_t ot::Mle::DeviceMode::Get(ot::Mle::DeviceMode *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Mle10DeviceMode3GetEv(this);
}

uint64_t ot::ChildTable::HasSleepyChildWithAddress(ot::ChildTable *this, const ot::Ip6::Address *a2)
{
  char v5 = 0;
  unsigned int v4 = (ot::ChildTable *)((char *)this + 8);
  for (__int16 i = *(_WORD *)this; i; --i)
  {
    if (ot::Neighbor::IsStateValidOrRestoring(v4)
      && !ot::Neighbor::IsRxOnWhenIdle(v4)
      && ot::Child::HasIp6Address(v4, a2))
    {
      char v5 = 1;
      return v5 & 1;
    }

    unsigned int v4 = (ot::Neighbor *)((char *)v4 + 576);
  }

  return v5 & 1;
}

ot::Neighbor *ot::Neighbor::Neighbor(ot::Neighbor *this)
{
  uint64_t result = this;
  *((_DWORD *)this + 37)  = 7;
  return result;
}

ot::RadioSelector::NeighborInfo *ot::RadioSelector::NeighborInfo::NeighborInfo( ot::RadioSelector::NeighborInfo *this)
{
  return this;
}

  ;
}

  ;
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  return a1;
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t result, char a2, __int16 a3, uint64_t a4)
{
  *(_BYTE *)uint64_t result = a2;
  *(_WORD *)(result + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  *(void *)(result + 8)  = a4;
  return result;
}

uint64_t ot::Settings::ChildInfoIterator::ChildInfoIterator(uint64_t a1, ot::Instance *a2)
{
  return a1;
}

{
  uint64_t result;
  ot::Radio::Callbacks::Callbacks((ot::Radio::Callbacks *)a1, a2);
  uint64_t result = a1;
  *(_WORD *)(a1 + 18)  = 0;
  *(_BYTE *)(a1 + 20)  = 1;
  return result;
}

uint64_t ot::Settings::ChildInfoIterator::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) == 0 || (char v4 = 1, (*(_BYTE *)(a2 + 20) & 1) == 0))
  {
    BOOL v3 = 0;
    if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    {
      BOOL v3 = 0;
      if ((*(_BYTE *)(a2 + 20) & 1) == 0) {
        BOOL v3 = *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18);
      }
    }

    char v4 = v3;
  }

  return v4 & 1;
}

{
  return __ZNK2ot8Settings17ChildInfoIteratoreqERKS1_(a1, a2);
}

ot::CslTxScheduler::Callbacks *ot::CslTxScheduler::Callbacks::Callbacks( ot::CslTxScheduler::Callbacks *this, ot::Instance *a2)
{
  return this;
}

{
  ot::CslTxScheduler::Callbacks::Callbacks(this, a2);
  return this;
}

ot::CslTxScheduler *ot::CslTxScheduler::CslTxScheduler(ot::CslTxScheduler *this, ot::Instance *a2)
{
  *((void *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0LL;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  *((_WORD *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  ot::CslTxScheduler::Callbacks::Callbacks((ot::CslTxScheduler *)((char *)this + 26), a2);
  *((_DWORD *)this + 7)  = 0;
  ot::CslTxScheduler::InitFrameRequestAhead(this);
  return this;
}

{
  ot::CslTxScheduler::CslTxScheduler(this, a2);
  return this;
}

_DWORD *ot::CslTxScheduler::InitFrameRequestAhead(ot::CslTxScheduler *this)
{
  BusSpeed  = otPlatRadioGetBusSpeed();
  if (BusSpeed) {
    unsigned int v2 = (BusSpeed + 1199999999) / BusSpeed;
  }
  else {
    unsigned int v2 = 0;
  }
  *((_DWORD *)this + 7)  = v2;
  return ot::CslTxScheduler::SetFrameRequestAheadUs(this, 8000);
}

_DWORD *ot::CslTxScheduler::SetFrameRequestAheadUs(_DWORD *this, int a2)
{
  *this  = a2 + this[7];
  return this;
}

uint64_t ot::CslTxScheduler::GetFrameRequestAheadUs(ot::CslTxScheduler *this)
{
  return (*(_DWORD *)this - *((_DWORD *)this + 7));
}

void ot::CslTxScheduler::Update(ot::CslTxScheduler *this)
{
  if (*((void *)this + 2))
  {
    if (*((void *)this + 1))
    {
      if (ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::IndirectSender::ChildInfo *)(*((void *)this + 1)
                                                                                             + 248LL)) != *((void *)this + 2))
      {
        ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((_BYTE *)(*((void *)this + 1) + 272LL));
        *((void *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0LL;
        *((_WORD *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
      }
    }
  }

  else
  {
    ot::CslTxScheduler::RescheduleCslTx(this);
  }

void ot::CslTxScheduler::RescheduleCslTx(ot::CslTxScheduler *this)
{
  int v15 = this;
  unsigned int v14 = -1;
  char v13 = 0LL;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v1, 5);
  uint64_t v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1]  = v2;
  v9[0]  = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1]  = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9))
  {
    unsigned int v8 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    if (ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Child *)((char *)v8 + 272))
      && (unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)v8 + 248)))
    {
      NextCslTransmissionDelay  = ot::CslTxScheduler::GetNextCslTransmissionDelay(this, v8, &v6, *(_DWORD *)this);
      if (NextCslTransmissionDelay < v14)
      {
        unsigned int v14 = NextCslTransmissionDelay;
        char v13 = v8;
      }
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }

  if (v13)
  {
    char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::RequestCslFrameTransmission(v4, v14 / 0x3E8);
  }

  *((void *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = v13;
}

uint64_t ot::IndirectSender::ChildInfo::GetIndirectMessage(ot::IndirectSender::ChildInfo *this)
{
  return *(void *)this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo18GetIndirectMessageEv(this);
}

BOOL ot::CslTxScheduler::Clear(ot::CslTxScheduler *this)
{
  char v13 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v1, 5);
  uint64_t v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1]  = v2;
  v9[0]  = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9);
    if (!result) {
      break;
    }
    uint64_t v8 = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((_BYTE *)(v8 + 272));
    ot::CslTxScheduler::ChildInfo::SetCslSynchronized((_BYTE *)(v8 + 272), 0);
    ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((_BYTE *)(v8 + 272), 0);
    ot::CslTxScheduler::ChildInfo::SetCslChannel(v8 + 272, 0);
    ot::CslTxScheduler::ChildInfo::SetCslTimeout(v8 + 272, 0);
    ot::CslTxScheduler::ChildInfo::SetCslPeriod(v8 + 272, 0);
    ot::CslTxScheduler::ChildInfo::SetCslPhase(v8 + 272, 0);
    uint64_t v5 = v8 + 272;
    ot::Time::Time((ot::Time *)&v7, 0);
    ot::CslTxScheduler::ChildInfo::SetCslLastHeard(v5, v7);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }

  *((_WORD *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((void *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0LL;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  return result;
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslChannel(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo13SetCslChannelEh(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo13SetCslTimeoutEj(this, a2);
}

BOOL ot::CslTxScheduler::ChildInfo::IsCslSynchronized(ot::CslTxScheduler::ChildInfo *this)
{
  BOOL v2 = 0;
  if ((*(_BYTE *)this & 0x40) != 0) {
    return *((_WORD *)this + 4) != 0;
  }
  return v2;
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo17IsCslSynchronizedEv(this);
}

unint64_t ot::CslTxScheduler::GetNextCslTransmissionDelay( ot::CslTxScheduler *this, const ot::Child *a2, unsigned int *a3, unsigned int a4)
{
  unint64_t Now = otPlatRadioGetNow();
  unsigned int v7 = 160 * (unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPeriod((const ot::Child *)((char *)a2 + 272));
  uint64_t v5 = ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((const ot::Child *)((char *)a2 + 272)) - 160;
  for (unint64_t i = Now
          - Now % v7
          + (v5
           + (unint64_t)(160
    ;
  *a3  = i - ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((const ot::Child *)((char *)a2 + 272));
  return i - Now - a4;
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslPeriod(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo12GetCslPeriodEv(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp(ot::CslTxScheduler::ChildInfo *this)
{
  return *((void *)this + 2);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo18GetLastRxTimestampEv(this);
}

ot::Mac::TxFrame *ot::CslTxScheduler::HandleFrameRequest(const ot::Child **this, ot::Mac::TxFrames *a2)
{
  uint64_t v23 = (ot::CslTxScheduler *)this;
  unsigned __int8 v22 = a2;
  TxFrame  = 0LL;
  if (this[1] && ot::CslTxScheduler::ChildInfo::IsCslSynchronized((const ot::Child *)((char *)this[1] + 272)))
  {
    TxFrame  = (ot::Mac::TxFrame *)ot::Mac::TxFrames::GetTxFrame((uint64_t)v22, 0);
    if (ot::CslTxScheduler::Callbacks::PrepareFrameForChild( (ot::InstanceLocator *)((char *)this + 26),  TxFrame,  (_WORD *)this + 12,  (uint64_t)this[1]))
    {
      return 0LL;
    }

    else
    {
      this[2]  = (const ot::Child *)ot::IndirectSender::ChildInfo::GetIndirectMessage((const ot::Child *)((char *)this[1] + 248));
      if (this[2])
      {
        IndirectTxAttempts  = ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts((const ot::Child *)((char *)this[1] + 264));
        if (v3 | (IndirectTxAttempts == 0)) {
          char v4 = 0;
        }
        else {
          char v4 = 1;
        }
        if ((v4 & 1) == 0
          && ((CslTxAttempts  = ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((const ot::Child *)((char *)this[1] + 272)),
               !(v3 | (CslTxAttempts == 0)))
            ? (char v6 = 0)
            : (char v6 = 1),
              (v6 & 1) != 0))
        {
          ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 0);
        }

        else
        {
          ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 1);
          IndirectDataSequenceNumber  = ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber((const ot::Child *)((char *)this[1] + 264));
          ot::Mac::Frame::SetSequence(TxFrame, IndirectDataSequenceNumber);
          char v19 = ot::Mac::TxFrame::IsCslIePresent(TxFrame) & 1;
          if (ot::Mac::Frame::GetSecurityEnabled(TxFrame) && (v19 & 1) == 0)
          {
            IndirectFrameCounter  = ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter((const ot::Child *)((char *)this[1] + 264));
            ot::Mac::Frame::SetFrameCounter(TxFrame, IndirectFrameCounter);
            IndirectKeyId  = ot::DataPollHandler::ChildInfo::GetIndirectKeyId((const ot::Child *)((char *)this[1] + 264));
            ot::Mac::Frame::SetKeyId(TxFrame, IndirectKeyId);
          }
        }

        if (ot::CslTxScheduler::ChildInfo::GetCslChannel((const ot::Child *)((char *)this[1] + 272)))
        {
          CslChannel  = ot::CslTxScheduler::ChildInfo::GetCslChannel((const ot::Child *)((char *)this[1] + 272));
          ot::Mac::TxFrame::SetChannel(TxFrame, CslChannel);
        }

        Channel  = ot::Mac::Frame::GetChannel(TxFrame);
        char v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)this);
        if (Channel != ot::Mac::Mac::GetPanChannel(v11))
        {
          uint64_t v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)this);
          PanChannel  = ot::Mac::Mac::GetPanChannel(v12);
          ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)TxFrame, PanChannel);
        }

        if (ot::CslTxScheduler::GetNextCslTransmissionDelay((ot::CslTxScheduler *)this, this[1], &v20, 0) <= *(_DWORD *)this + 1500)
        {
          ot::Mac::TxFrame::SetTxDelay((uint64_t)TxFrame, v20);
          uint64_t v16 = TxFrame;
          LastRxTimestamp  = ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((const ot::Child *)((char *)this[1] + 272));
          ot::Mac::TxFrame::SetTxDelayBaseTime((uint64_t)v16, LastRxTimestamp);
          ot::Mac::TxFrame::SetCsmaCaEnabled((uint64_t)TxFrame, 0);
        }

        else
        {
          return 0LL;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return TxFrame;
}

uint64_t ot::CslTxScheduler::Callbacks::PrepareFrameForChild( ot::InstanceLocator *a1, ot::Mac::TxFrame *a2, _WORD *a3, uint64_t a4)
{
  char v4 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  return ot::IndirectSender::PrepareFrameForChild(v4, a2, a3, a4);
}

{
  return __ZN2ot14CslTxScheduler9Callbacks20PrepareFrameForChildERNS_3Mac7TxFrameERNS_18IndirectSenderBase12FrameContextERNS_5ChildE( a1,  a2,  a3,  a4);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslChannel(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo13GetCslChannelEv(this);
}

void ot::CslTxScheduler::HandleMissedScheduledTx(ot::CslTxScheduler *this)
{
  if (*((void *)this + 1))
  {
    *((void *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0LL;
    *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
    ot::CslTxScheduler::RescheduleCslTx(this);
  }

void ot::CslTxScheduler::HandleSentFrame(ot::InstanceLocator *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
  if (v4)
  {
    *((void *)a1 + ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0LL;
    ot::CslTxScheduler::HandleSentFrame(a1, a2, a3);
  }

  ot::CslTxScheduler::RescheduleCslTx(a1);
}

{
  ot::Mac::Mac *v3;
  uint64_t Counters;
  char v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  Counters  = ot::Mac::Mac::GetCounters(v3);
  ++*(_DWORD *)(Counters + 68);
  if (a3 <= 0xFuLL) {
    __asm { BR              X8 }
  }

  __assert_rtn("HandleSentFrame", "csl_tx_scheduler.cpp", 439, "false");
}

_BYTE *ot::CslTxScheduler::ChildInfo::IncrementCslTxAttempts(_BYTE *this)
{
  *this  = *this & 0xC0 | ((*this & 0x3F) + 1) & 0x3F;
  return this;
}

{
  return __ZN2ot14CslTxScheduler9ChildInfo22IncrementCslTxAttemptsEv(this);
}

void ot::CslTxScheduler::Callbacks::HandleSentFrameToChild( ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  ot::IndirectSender::HandleSentFrameToChild(v5, a2, a3, a4, a5);
}

{
  __ZN2ot14CslTxScheduler9Callbacks22HandleSentFrameToChildERKNS_3Mac7TxFrameERKNS_18IndirectSenderBase12FrameContextE7otErrorRNS_5ChildE( a1,  a2,  a3,  a4,  a5);
}

ot::Mle::DiscoverScanner *ot::Mle::DiscoverScanner::DiscoverScanner( ot::Mle::DiscoverScanner *this, ot::Instance *a2)
{
  *((_DWORD *)this + 1ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  ot::Mac::ChannelMask::ChannelMask((ot::Mle::DiscoverScanner *)((char *)this + 60));
  BOOL result = this;
  *((_BYTE *)this + 6ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  *((_BYTE *)this + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_BYTE *)this + 73)  = 0;
  *((_BYTE *)this + 138) &= ~1u;
  *((_BYTE *)this + 138) &= ~2u;
  return result;
}

{
  ot::Mle::DiscoverScanner::DiscoverScanner(this, a2);
  return this;
}

void *ot::Mle::DiscoverScanner::HandleScanDoneTask(ot::Mle::DiscoverScanner *this)
{
  *((_BYTE *)this + 6ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  return ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<decltype(nullptr)>(this);
}

unsigned __int8 *ot::Mle::DiscoverScanner::HandleTimer(unsigned __int8 *this)
{
  BOOL v2 = (ot::InstanceLocator *)this;
  if (this[64] == 1)
  {
    uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v2);
    return (unsigned __int8 *)ot::MeshForwarder::ResumeMessageTransmissions(v1);
  }

  return this;
}

void *ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::HandleTasklet);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Mle::DiscoverScanner::Discover( uint64_t a1, ot::Mac::ChannelMask *a2, unsigned __int16 a3, char a4, char a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  v37  = a1;
  char v36 = a2;
  v35  = a3;
  v34  = a4 & 1;
  char v33 = a5 & 1;
  v32  = a6;
  uint64_t v31 = a7;
  uint64_t v30 = a8;
  unsigned int v29 = 0;
  char v28 = 0LL;
  uint64_t v8 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  if ((ot::ThreadNetif::IsUp(v8) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      unsigned int v29 = 5;
    }

    else
    {
      *(_BYTE *)(a1 + 138)  = *(_BYTE *)(a1 + 138) & 0xFE | v33 & 1;
      if ((*(_BYTE *)(a1 + 138) & 1) != 0)
      {
        if (v32)
        {
          *(_DWORD *)(a1 + 56)  = *v32;
        }

        else
        {
          uint64_t v9 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)a1);
          ot::Radio::GetIeeeEui64(v9, (ot::Mac::ExtAddress *)v38);
          ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)v38, (const ot::Mac::ExtAddress *)v38, v10);
          ot::MeshCoP::SteeringData::CalculateHashBitIndexes(v38, (_WORD *)(a1 + 56));
        }
      }

      ot::CallbackBase<void (*)(otActiveScanResult *,void *)>::Set((void *)a1, v31, v30);
      *(_BYTE *)(a1 + 138) &= ~2u;
      char v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      *(_DWORD *)(a1 + 60)  = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v11);
      if (!ot::Mac::ChannelMask::IsEmpty(v36)) {
        ot::Mac::ChannelMask::Intersect((_DWORD *)(a1 + 60), v36);
      }
      uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
      char v28 = ot::Mle::Mle::NewMleMessage(v12, 0x10u);
      if (v28)
      {
        ot::Message::SetPanId(v28, v35);
        ot::MeshCoP::DiscoveryRequestTlv::Init((ot::MeshCoP::DiscoveryRequestTlv *)v25);
        ot::MeshCoP::DiscoveryRequestTlv::SetVersion((uint64_t)v25, 4);
        ot::MeshCoP::DiscoveryRequestTlv::SetJoiner((uint64_t)v25, v34 & 1);
        if (*(_BYTE *)(a1 + 73))
        {
          ot::MeshCoP::JoinerAdvertisementTlv::Init((ot::MeshCoP::JoinerAdvertisementTlv *)v39);
          ot::MeshCoP::JoinerAdvertisementTlv::SetOui( (ot::MeshCoP::JoinerAdvertisementTlv *)v39,  *(_DWORD *)(a1 + 68),  v13);
          ot::MeshCoP::JoinerAdvertisementTlv::SetAdvData( (ot::MeshCoP::JoinerAdvertisementTlv *)v39,  (const unsigned __int8 *)(a1 + 74),  *(_BYTE *)(a1 + 73));
        }

        ot::Mle::Tlv::SetType(v27, 26);
        Size  = ot::Tlv::GetSize((ot::Tlv *)v25);
        if (*(_BYTE *)(a1 + 73)) {
          char v22 = ot::Tlv::GetSize((ot::Tlv *)v39);
        }
        else {
          char v22 = 0;
        }
        ot::Tlv::SetLength((uint64_t)v27, Size + v22);
        unsigned int v29 = ot::Message::Append<ot::Mle::Tlv>(v28, v27);
        if (!v29)
        {
          unsigned int v29 = ot::Tlv::AppendTo((ot::Tlv *)v25, v28);
          if (!v29 && (!*(_BYTE *)(a1 + 73) || (unsigned int v29 = ot::Tlv::AppendTo((ot::Tlv *)v39, v28)) == 0))
          {
            ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v26);
            unsigned int v29 = ot::Mle::Mle::TxMessage::SendTo(v28, &v26);
            if (!v29)
            {
              if (v35 == 0xFFFF)
              {
                unsigned int v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                if ((unsigned __int16)ot::Mac::Mac::GetPanId(v14) == 0xFFFF)
                {
                  unsigned __int16 v21 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                  RandomPanId  = (unsigned __int16)ot::Mac::GenerateRandomPanId(v21);
                  ot::Mac::Mac::SetPanId(v21, RandomPanId);
                  *(_BYTE *)(a1 + 138)  = *(_BYTE *)(a1 + 138) & 0xFD | 2;
                }
              }

              *(_BYTE *)(a1 + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
              if (ot::Mac::ChannelMask::GetNextChannel( (ot::Mac::ChannelMask *)(a1 + 60),  (unsigned __int8 *)(a1 + 72))) {
                char v16 = 2;
              }
              else {
                char v16 = 1;
              }
              *(_BYTE *)(a1 + 6ot::MeshCoP::Tlv::SetType(this, 4) = v16;
              uint64_t v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
              if (!ot::Mle::Mle::IsDisabled(v17))
              {
                uint64_t v18 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
                if (!ot::Mle::Mle::IsRxOnWhenIdle(v18))
                {
                  char v19 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
                  ot::MeshForwarder::SetRxOnWhenIdle(v19, 1);
                }
              }

              ot::Mle::Mle::Log(0, 9u, (ot::Ip6::Address *)&v26);
            }
          }
        }
      }

      else
      {
        unsigned int v29 = 3;
      }
    }
  }

  else
  {
    unsigned int v29 = 13;
  }

  if (v29 && v28) {
    ot::Message::Free(v28);
  }
  return v29;
}

void *ot::CallbackBase<void (*)(otActiveScanResult *,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvP18otActiveScanResultPvEE3SetES5_S3_(result, a2, a3);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::Init(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  uint64_t result = ot::Tlv::SetLength((uint64_t)this, 2);
  *((_BYTE *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_BYTE *)this + 3)  = 0;
  return result;
}

{
  return __ZN2ot7MeshCoP19DiscoveryRequestTlv4InitEv(this);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::SetVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_BYTE *)(this + 2) & 0xF | (16 * a2);
  return this;
}

{
  return __ZN2ot7MeshCoP19DiscoveryRequestTlv10SetVersionEh(this, a2);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::SetJoiner(uint64_t this, char a2)
{
  if ((a2 & 1) != 0) {
    *(_BYTE *)(this + 2) |= 8u;
  }
  else {
    *(_BYTE *)(this + 2) &= ~8u;
  }
  return this;
}

{
  return __ZN2ot7MeshCoP19DiscoveryRequestTlv9SetJoinerEb(this, a2);
}

uint64_t ot::MeshCoP::JoinerAdvertisementTlv::Init(ot::MeshCoP::JoinerAdvertisementTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 67);
}

{
  return __ZN2ot7MeshCoP22JoinerAdvertisementTlv4InitEv(this);
}

uint64_t ot::MeshCoP::JoinerAdvertisementTlv::SetOui( ot::MeshCoP::JoinerAdvertisementTlv *this, unsigned int a2, unsigned __int8 *a3)
{
  return ot::Encoding::BigEndian::WriteUint24(a2, (_BYTE *)this + 2, a3);
}

{
  return __ZN2ot7MeshCoP22JoinerAdvertisementTlv6SetOuiEj(this, a2, a3);
}

void *ot::MeshCoP::JoinerAdvertisementTlv::SetAdvData( ot::MeshCoP::JoinerAdvertisementTlv *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v5 = 0;
  if (a2)
  {
    BOOL v5 = 0;
    if (a3) {
      BOOL v5 = a3 <= 0x40u;
    }
  }

  if (!v5) {
    __assert_rtn( "SetAdvData",  "meshcop_tlvs.hpp",  2113,  "(aAdvData != nullptr) && (aAdvDataLength > 0) && (aAdvDataLength <= kAdvDataMaxLength)");
  }
  ot::Tlv::SetLength((uint64_t)this, a3 + 3);
  return memcpy((char *)this + 5, a2, a3);
}

{
  return __ZN2ot7MeshCoP22JoinerAdvertisementTlv10SetAdvDataEPKhh(this, a2, a3);
}

uint64_t ot::Mle::DiscoverScanner::SetJoinerAdvertisement( ot::Mle::DiscoverScanner *this, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 a4)
{
  unsigned int v5 = 0;
  if (a3 && a4 && a4 <= 0x40u && a2 <= 0xFFFFFF)
  {
    *((_DWORD *)this + 17)  = a2;
    *((_BYTE *)this + 73)  = a4;
    memcpy((char *)this + 74, a3, a4);
  }

  else
  {
    return 7;
  }

  return v5;
}

ot::Mac::TxFrame *ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame( ot::Mle::DiscoverScanner *this, ot::Mac::TxFrame *a2)
{
  char v6 = a2;
  int v5 = *((unsigned __int8 *)this + 64);
  if (!*((_BYTE *)this + 64)) {
    return 0LL;
  }
  if (v5 == 1)
  {
    ot::Mac::TxFrame::SetChannel(a2, *((_BYTE *)this + 72));
    BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::SetTemporaryChannel(v2, *((_BYTE *)this + 72));
    IgnoreError();
    return v6;
  }

  if (v5 == 2) {
    return 0LL;
  }
  return v6;
}

unsigned __int8 *ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone( unsigned __int8 *this, ot::Message *a2)
{
  char v3 = (ot::Mle::DiscoverScanner *)this;
  int v4 = this[64];
  if (this[64])
  {
    if (v4 == 1)
    {
      ot::Message::SetDirectTransmission(a2);
      ot::Message::SetTimestampToNow(a2);
      uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v3);
      ot::MeshForwarder::PauseMessageTransmissions(v2);
      return (unsigned __int8 *)ot::TimerMilli::Start((ot::Mle::DiscoverScanner *)((char *)v3 + 32), 0x12Cu);
    }

    else if (v4 == 2)
    {
      return (unsigned __int8 *)ot::Mle::DiscoverScanner::HandleDiscoverComplete((ot::Mle::DiscoverScanner *)this);
    }
  }

  return this;
}

uint64_t ot::Message::SetTimestampToNow(ot::Message *this)
{
  int Now = ot::TimerMilli::GetNow(this);
  return ot::Message::SetTimestamp(this, Now);
}

{
  return __ZN2ot7Message17SetTimestampToNowEv(this);
}

uint64_t ot::MeshForwarder::PauseMessageTransmissions(uint64_t this)
{
  *(_BYTE *)(this + 80)  = *(_BYTE *)(this + 80) & 0xFB | 4;
  return this;
}

{
  return __ZN2ot13MeshForwarder25PauseMessageTransmissionsEv(this);
}

uint64_t ot::Mle::DiscoverScanner::HandleDiscoverComplete(ot::Mle::DiscoverScanner *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  uint64_t result = ot::Mle::Mle::IsDisabled(v1);
  if ((result & 1) == 0)
  {
    char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t result = ot::Mle::Mle::IsRxOnWhenIdle(v3);
    if ((result & 1) == 0)
    {
      int v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      uint64_t result = ot::MeshForwarder::SetRxOnWhenIdle(v4, 0);
    }
  }

  int v8 = *((unsigned __int8 *)this + 64);
  if (*((_BYTE *)this + 64))
  {
    if (v8 == 1)
    {
      ot::TimerMilli::Stop((ot::Mle::DiscoverScanner *)((char *)this + 32));
      uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      ot::MeshForwarder::ResumeMessageTransmissions(v5);
    }

    else if (v8 != 2)
    {
      return result;
    }

    char v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::ClearTemporaryChannel(v6);
    if ((*((_BYTE *)this + 138) & 2) != 0)
    {
      unsigned int v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::SetPanId(v7, 0xFFFF);
      *((_BYTE *)this + 138) &= ~2u;
    }

    return ot::Tasklet::Post((ot::Mle::DiscoverScanner *)((char *)this + 16));
  }

  return result;
}

void *ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<decltype(nullptr)>( void *result)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<decltype(nullptr)>((uint64_t)result);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvP18otActiveScanResultPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJDnEEEvDpOT_(result);
}

void ot::Mle::DiscoverScanner::HandleDiscoveryResponse( ot::Mle::DiscoverScanner *this, ot::Ip6::MessageInfo **a2)
{
  v37  = this;
  char v36 = a2;
  TlvValueOffset  = 0;
  ThreadLinkInfo  = ot::Ip6::MessageInfo::GetThreadLinkInfo(a2[1]);
  char v28 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(v36[1]);
  ot::Mle::Mle::Log(1u, 0xAu, v2);
  if (*((_BYTE *)this + 64) == 1)
  {
    TlvValueOffset  = ot::Tlv::FindTlvValueOffset(*v36, (const ot::Message *)0x1A, &v31, &v30, v3);
    if (!TlvValueOffset)
    {
      unsigned __int16 v29 = v31 + v30;
      memset(__b, 0, 0x3CuLL);
      HIBYTE(__b[28])  = HIBYTE(__b[28]) & 0xDF | 0x20;
      __b[25]  = *(_WORD *)ThreadLinkInfo;
      __b[27]  = *(_WORD *)(ThreadLinkInfo + 2);
      LOBYTE(__b[28])  = *(_BYTE *)(ThreadLinkInfo + 4);
      ot::Ip6::MessageInfo::GetPeerAddr(v36[1]);
      Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
      ot::AsCoreType<otExtAddress>((uint64_t)__b);
      ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, v5);
      while (v31 < (int)v29)
      {
        ot::Message::Read<ot::MeshCoP::Tlv>(*v36, v31, v33);
        IgnoreError();
        int Type = ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v33);
        switch(Type)
        {
          case 2:
            unsigned __int16 v21 = *v36;
            unsigned __int16 v20 = v31;
            ot::AsCoreType<otExtendedPanId>((uint64_t)&__b[12] + 1);
            TlvValueOffset  = ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(v21, v20, v8);
            if (TlvValueOffset) {
              goto LABEL_35;
            }
            break;
          case 3:
            ot::Message::Read<ot::MeshCoP::NetworkNameTlv>(*v36, v31, v39);
            IgnoreError();
            if ((ot::MeshCoP::NetworkNameTlv::IsValid((ot::MeshCoP::NetworkNameTlv *)v39) & 1) != 0)
            {
              ot::AsCoreType<otNetworkName>((uint64_t)&__b[4]);
              char v19 = v9;
              v27[0]  = ot::MeshCoP::NetworkNameTlv::GetNetworkName((ot::MeshCoP::NetworkNameTlv *)v39);
              v27[1]  = v10;
              ot::MeshCoP::NetworkName::Set(v19, (const ot::MeshCoP::NameData *)v27);
              IgnoreError();
            }

            break;
          case 8:
            char Length = ot::Tlv::GetLength((ot::Tlv *)v33);
            if (v12 | (Length == 0)) {
              char v13 = 1;
            }
            else {
              char v13 = 0;
            }
            if ((v13 & 1) == 0)
            {
              ot::AsCoreType<otSteeringData>((uint64_t)&__b[16] + 1);
              *(void *)&v26[1]  = v14;
              v26[0]  = 16;
              ot::MeshCoP::SteeringData::Init(*(uint64_t *)&v26[1], v26[0]);
              uint64_t v18 = *v36;
              unsigned int v17 = v31;
              Data  = ot::MeshCoP::SteeringData::GetData(*(ot::MeshCoP::SteeringData **)&v26[1]);
              TlvValueOffset  = ot::Tlv::ReadTlvValue(v18, (const ot::Message *)v17, Data, (void *)v26[0]);
              if (TlvValueOffset
                || (*((_BYTE *)this + 138) & 1) != 0
                && !ot::MeshCoP::SteeringData::Contains( *(ot::MeshCoP::SteeringData **)&v26[1],  (unsigned __int16 *)this + 28))
              {
                goto LABEL_35;
              }

              char v28 = 1;
            }

            break;
          case 18:
            TlvValueOffset  = ot::Tlv::Read<ot::MeshCoP::JoinerUdpPortTlv>(*v36, v31, &__b[26]);
            if (TlvValueOffset) {
              goto LABEL_35;
            }
            break;
          case 129:
            ot::Message::Read<ot::MeshCoP::DiscoveryResponseTlv>(*v36, v31, v32);
            IgnoreError();
            if (!ot::MeshCoP::DiscoveryResponseTlv::IsValid((ot::MeshCoP::DiscoveryResponseTlv *)v32))
            {
              TlvValueOffset  = 6;
              goto LABEL_35;
            }

            Version  = ot::MeshCoP::DiscoveryResponseTlv::GetVersion((ot::MeshCoP::DiscoveryResponseTlv *)v32);
            HIBYTE(__b[28])  = HIBYTE(__b[28]) & 0xF0 | Version & 0xF;
            IsNativeCommissioner  = ot::MeshCoP::DiscoveryResponseTlv::IsNativeCommissioner((ot::MeshCoP::DiscoveryResponseTlv *)v32);
            HIBYTE(__b[28])  = HIBYTE(__b[28]) & 0xEF | (16 * IsNativeCommissioner);
            break;
        }

        unsigned __int8 v16 = ot::Tlv::GetLength((ot::Tlv *)v33);
        v31 += v16 + 2;
      }

      if ((*((_BYTE *)this + 138) & 1) == 0 || (v28 & 1) != 0)
      {
        uint64_t v25 = __b;
        ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otActiveScanResult *>( this,  &v25);
      }
    }
  }

  else
  {
    TlvValueOffset  = 2;
  }

uint64_t ot::Ip6::MessageInfo::GetThreadLinkInfo(ot::Ip6::MessageInfo *this)
{
  return *((void *)this + 5);
}

{
  return __ZNK2ot3Ip611MessageInfo17GetThreadLinkInfoEv(this);
}

uint64_t ot::Message::Read<ot::MeshCoP::DiscoveryResponseTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP20DiscoveryResponseTlvEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::MeshCoP::DiscoveryResponseTlv::IsValid(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return __ZNK2ot7MeshCoP20DiscoveryResponseTlv7IsValidEv(this);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::GetVersion(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  return (int)*((unsigned __int8 *)this + 2) >> 4;
}

{
  return __ZNK2ot7MeshCoP20DiscoveryResponseTlv10GetVersionEv(this);
}

BOOL ot::MeshCoP::DiscoveryResponseTlv::IsNativeCommissioner(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  return (*((_BYTE *)this + 2) & 8) != 0;
}

{
  return __ZNK2ot7MeshCoP20DiscoveryResponseTlv20IsNativeCommissionerEv(this);
}

uint64_t ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(ot::Tlv *a1, unsigned __int16 a2, uint64_t a3)
{
  return ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, a3, (void *)8);
}

{
  return __ZN2ot3Tlv4ReadINS_7MeshCoP16ExtendedPanIdTlvEEE7otErrorRKNS_7MessageEtRNT_9ValueTypeE(a1, a2, a3);
}

uint64_t ot::Message::Read<ot::MeshCoP::NetworkNameTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x12u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP14NetworkNameTlvEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::MeshCoP::JoinerUdpPortTlv>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_7MeshCoP16JoinerUdpPortTlvEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

void *ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otActiveScanResult *>( void *result, void *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<otActiveScanResult *>( (uint64_t)result,  a2);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvP18otActiveScanResultPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJS2_EEEvDpOT_( result,  a2);
}

void *ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(a1);
  return ot::Mle::DiscoverScanner::HandleScanDoneTask(v2);
}

unsigned __int8 *ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (unsigned __int8 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(a1);
  return ot::Mle::DiscoverScanner::HandleTimer(v2);
}

uint64_t ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<decltype(nullptr)>( uint64_t a1)
{
  return (*(uint64_t (**)(void, void))a1)(0LL, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvP18otActiveScanResultPvELNS_23CallbackContextPositionE1EE6InvokeIJDnEEEvDpOT_(a1);
}

uint64_t ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<otActiveScanResult *>( uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvP18otActiveScanResultPvELNS_23CallbackContextPositionE1EE6InvokeIJS2_EEEvDpOT_(a1, a2);
}

ot::DuaManager *ot::DuaManager::DuaManager(ot::DuaManager *this, ot::Instance *a2)
{
  *((_BYTE *)this + 40) &= ~1u;
  *((_BYTE *)this + 4ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0;
  *((_BYTE *)this + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  ot::Time::Time((ot::DuaManager *)((char *)this + 44), 0);
  *((_WORD *)this + 5ot::MeshCoP::Tlv::SetType(this, 4) = 64;
  *((_DWORD *)this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginGlobalScope((ot::DuaManager *)((char *)this + 56));
  ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear((void *)this + 6);
  ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)this + 92));
  ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)this + 100));
  return this;
}

{
  ot::DuaManager::DuaManager(this, a2);
  return this;
}

void ot::DuaManager::PerformNextRegistration(ot::DuaManager *this)
{
  v76  = this;
  ServiceId  = 0;
  v74  = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  v73  = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v72, Instance);
  if (!ot::Mle::Mle::IsAttached(v74))
  {
    ServiceId  = 13;
    goto LABEL_51;
  }

  uint64_t v8 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (!ot::BackboneRouter::Leader::HasPrimary(v8))
  {
    ServiceId  = 13;
    goto LABEL_51;
  }

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    ServiceId  = 5;
    goto LABEL_51;
  }

  if (!ot::Mle::Mle::IsRouterOrLeader(v74) && (ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(v74) & 1) != 0)
  {
    ServiceId  = 13;
    goto LABEL_51;
  }

  if (!ot::Mle::Mle::IsFullThreadDevice(v74))
  {
    Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v74);
    if (!ot::Neighbor::IsThreadVersion1p1(Parent))
    {
      ServiceId  = 13;
      goto LABEL_51;
    }
  }

  v70  = 0;
  v55  = 0;
  if (*((_BYTE *)this + 41) == 1) {
    v55  = *((_BYTE *)this + 91) == 0;
  }
  v70  = v55;
  v54  = 1;
  if (!v55)
  {
    v53  = 0;
    if ((ot::BitVector<(unsigned short)64>::HasAny((_BYTE *)this + 92) & 1) != 0) {
      v53  = ot::Unequatable<ot::BitVector<(unsigned short)64>>::operator!=((char *)this + 92, (char *)this + 100);
    }
    v54  = v53;
  }

  v70  = v54 & 1;
  if ((v54 & 1) == 0)
  {
    ServiceId  = 23;
    goto LABEL_51;
  }

  uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  v73  = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v10, 0x25u);
  if (!v73)
  {
    ServiceId  = 3;
    goto LABEL_51;
  }

  if (*((_BYTE *)this + 41) != 1 || *((_BYTE *)this + 91))
  {
    DomainUnicastAddress  = 0LL;
    ChildAtIndex  = 0LL;
    if (*((_WORD *)this + 54) != 64) {
      __assert_rtn("PerformNextRegistration", "dua_manager.cpp", 488, "mChildIndexDuaRegistering == Mle::kMaxChildren");
    }
    int v15 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    v64  = ot::ChildTable::Iterate(v15, 0);
    v65  = (ot::ChildTable::IteratorBuilder *)&v64;
    v63[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v64);
    v63[1]  = v16;
    v62[0]  = ot::ChildTable::IteratorBuilder::end(v65);
    v62[1]  = v17;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v63, v62))
    {
      v61  = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v63);
      uint64_t v18 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      ChildIndex  = ot::ChildTable::GetChildIndex(v18, (uint64_t)v61);
      if (ot::BitVector<(unsigned short)64>::Get((uint64_t)this + 92, ChildIndex)
        && !ot::BitVector<(unsigned short)64>::Get((uint64_t)this + 100, ChildIndex))
      {
        *((_WORD *)this + 5ot::MeshCoP::Tlv::SetType(this, 4) = ChildIndex;
        break;
      }

      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v63);
    }

    char v19 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    ChildAtIndex  = (ot::Child *)ot::ChildTable::GetChildAtIndex(v19, *((_WORD *)this + 54));
    DomainUnicastAddress  = ot::Child::GetDomainUnicastAddress(ChildAtIndex);
    if (!DomainUnicastAddress) {
      __assert_rtn("PerformNextRegistration", "dua_manager.cpp", 504, "duaPtr != nullptr");
    }
    v71  = *(_OWORD *)DomainUnicastAddress;
    ServiceId  = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v73, &v71);
    if (ServiceId) {
      goto LABEL_51;
    }
    v51  = v73;
    MeshLocalIid  = (void *)ot::Child::GetMeshLocalIid(ChildAtIndex);
    unsigned __int16 v21 = (ot::TimerMilli *)ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>( v51,  MeshLocalIid);
    ServiceId  = (int)v21;
    if ((_DWORD)v21) {
      goto LABEL_51;
    }
    int Now = ot::TimerMilli::GetNow(v21);
    LastHeard  = ot::Neighbor::GetLastHeard(ChildAtIndex);
    char v22 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
    v68  = ot::Time::MsecToSec(v22);
    ServiceId  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v73, v68);
    if (ServiceId) {
      goto LABEL_51;
    }
  }

  else
  {
    ot::DuaManager::GetDomainUnicastAddress(this);
    v71  = *v11;
    ServiceId  = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v73, &v71);
    if (ServiceId) {
      goto LABEL_51;
    }
    v52  = v73;
    ot::Mle::Mle::GetMeshLocal64(v74);
    Iid  = (void *)ot::Ip6::Address::GetIid(v12);
    uint64_t v14 = (ot::TimerMilli *)ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v52, Iid);
    ServiceId  = (int)v14;
    if ((_DWORD)v14) {
      goto LABEL_51;
    }
    *((_BYTE *)this + 4ot::AnnounceSenderBase::SendAnnounce(this, 1) = 2;
    v69  = ot::TimerMilli::GetNow(v14);
    *((_DWORD *)this + 1ot::AnnounceSenderBase::SendAnnounce(this, 1) = v69;
  }

  if (ot::Mle::Mle::IsFullThreadDevice(v74)
    || (uint64_t v23 = (ot::Neighbor *)ot::Mle::Mle::GetParent(v74), !ot::Neighbor::IsThreadVersion1p1(v23)))
  {
    ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v72);
    v48  = v26;
    ot::Mle::Mle::GetMeshLocalPrefix(v74);
    BOOL v47 = v27;
    char v28 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    unsigned __int16 Server16 = ot::BackboneRouter::Leader::GetServer16(v28);
    ot::Ip6::Address::SetToRoutingLocator(v48, v47, Server16);
  }

  else
  {
    char v24 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    ServiceId  = ot::BackboneRouter::Leader::GetServiceId(v24, &v57);
    if (ServiceId) {
      goto LABEL_51;
    }
    uint64_t v50 = v74;
    unsigned __int8 v49 = v57;
    ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v72);
    ServiceId  = ot::Mle::Mle::GetServiceAloc(v50, v49, v25);
    if (ServiceId) {
      goto LABEL_51;
    }
  }

  ot::Tmf::MessageInfo::SetSockAddrToRloc((ot::Tmf::MessageInfo *)v72);
  unsigned __int16 v30 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  ServiceId  = ot::Coap::CoapBase::SendMessage( v30,  v73,  (ot::Ip6::MessageInfo *)v72,  (uint64_t)ot::DuaManager::HandleDuaResponse,  (uint64_t)this);
  if (!ServiceId)
  {
    *((_BYTE *)this + 40)  = *((_BYTE *)this + 40) & 0xFE | 1;
    *(_OWORD *)((char *)this + 2ot::MeshCoP::Tlv::SetType(this, 4) = v71;
    *((_DWORD *)this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
    unsigned __int16 v31 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (!ot::Mle::Mle::IsRxOnWhenIdle(v31))
    {
      v32  = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
      ot::DataPollSender::SendFastPolls(v32, 0);
    }

    char v46 = ot::UriToString<(ot::Uri)37>();
    ot::Ip6::Address::ToString((ot::Ip6::Address *)&v71, (ot::StringWriter *)v77);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v77);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Sent %s for DUA %s", v33, v34, v35, v36, v37, v38, v46);
  }

void *ot::TaskletIn<ot::DuaManager,&ot::DuaManager::PerformNextRegistration>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::DuaManager,&ot::DuaManager::PerformNextRegistration>::HandleTasklet);
  return a1;
}

void *ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip619InterfaceIdentifierEE5ClearEv(result);
}

void *ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_9BitVectorILt64EEEE5ClearEv(result);
}

uint64_t ot::DuaManager::HandleDomainPrefixUpdate(uint64_t result, char a2)
{
  uint64_t v9 = (ot::DuaManager *)result;
  if (a2 == 2 || a2 == 3)
  {
    if ((*(_BYTE *)(result + 40) & 1) != 0)
    {
      uint64_t v2 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)result);
      ot::Coap::CoapBase::AbortTransaction(v2, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)v9);
      IgnoreError();
    }

    ot::DuaManager::RemoveDomainUnicastAddress(v9);
    uint64_t result = ot::BitVector<(unsigned short)64>::HasAny((_BYTE *)v9 + 92);
    if ((result & 1) != 0)
    {
      ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)v9 + 92));
      uint64_t result = (uint64_t)ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)v9 + 100));
    }
  }

  if (a2 == 1
    || a2 == 3
    || a2 == 4
    && (uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v9),
        ot::DuaManager::GetDomainUnicastAddress(v9),
        uint64_t result = ot::Ip6::Netif::HasUnicastAddress(v8, v3),
        (result & 1) == 0))
  {
    uint64_t v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(v9);
    DomainPrefix  = (ot::Ip6::Prefix *)ot::BackboneRouter::Leader::GetDomainPrefix(v4);
    if (!DomainPrefix) {
      __assert_rtn("HandleDomainPrefixUpdate", "dua_manager.cpp", 117, "prefix != nullptr");
    }
    *((_BYTE *)v9 + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Ip6::Prefix::GetLength(DomainPrefix);
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)v9 + 56));
    ot::Clearable<ot::Ip6::Address>::Clear(v5);
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)v9 + 56));
    ot::Ip6::Address::SetPrefix(v6, DomainPrefix);
    if (ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(v9))
    {
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)v9 + 56));
      ot::Ip6::Address::SetIid(v7, (ot::DuaManager *)((char *)v9 + 48));
    }

    else
    {
      uint64_t result = ot::DuaManager::GenerateDomainUnicastAddressIid(v9);
      if ((_DWORD)result) {
        return result;
      }
    }

    return ot::DuaManager::AddDomainUnicastAddress(v9);
  }

  return result;
}

void ot::DuaManager::HandleDuaResponse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v10 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::DuaManager::HandleDuaResponse(a1, v10, v5, a4, v6, v7, v8, v9);
}

uint64_t ot::DuaManager::RemoveDomainUnicastAddress(ot::DuaManager *this)
{
  if (*((_BYTE *)this + 41) == 2 && (*((_BYTE *)this + 40) & 1) != 0)
  {
    uint64_t v1 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    ot::Coap::CoapBase::AbortTransaction(v1, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)this);
    IgnoreError();
  }

  *((_BYTE *)this + 4ot::AnnounceSenderBase::SendAnnounce(this, 1) = 0;
  *((_BYTE *)this + 74) &= ~1u;
  uint64_t v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  return ot::Ip6::Netif::RemoveUnicastAddress(v2, (ot::DuaManager *)((char *)this + 56));
}

void ot::DuaManager::GetDomainUnicastAddress(ot::DuaManager *this)
{
}

{
  __ZNK2ot10DuaManager23GetDomainUnicastAddressEv(this);
}

uint64_t ot::DuaManager::GenerateDomainUnicastAddressIid(ot::DuaManager *this)
{
  unsigned __int16 v21 = this;
  unsigned __int8 v19 = *((_BYTE *)this + 42);
  uint64_t v1 = (ot::Utils::Slaac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(this);
  unsigned int v20 = ot::Utils::Slaac::GenerateIid(v1, (ot::DuaManager *)((char *)this + 56), 0LL, 0, &v19);
  if (v20)
  {
    char v10 = ot::ErrorToString(v20);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"DuaManager", "Generate DUA: %s", v11, v12, v13, v14, v15, v16, v10);
  }

  else
  {
    if (v19 != *((unsigned __int8 *)this + 42))
    {
      *((_BYTE *)this + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v19;
      ot::DuaManager::Store(this);
      IgnoreError();
    }

    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)this + 56));
    ot::Ip6::Address::ToString(v2, (ot::StringWriter *)v22);
    char v3 = ot::String<(unsigned short)40>::AsCString((uint64_t)v22);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Generated DUA: %s", v4, v5, v6, v7, v8, v9, v3);
  }

  return v20;
}

uint64_t ot::DuaManager::AddDomainUnicastAddress(ot::DuaManager *this)
{
  *((_BYTE *)this + 4ot::AnnounceSenderBase::SendAnnounce(this, 1) = 1;
  *((_DWORD *)this + 1ot::AnnounceSenderBase::SendAnnounce(this, 1) = ot::TimerMilli::GetNow(this);
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  return ot::Ip6::Netif::AddUnicastAddress(v1, (ot::DuaManager *)((char *)this + 56));
}

uint64_t ot::DuaManager::Store(ot::DuaManager *this)
{
  uint64_t v5 = this;
  ot::SettingsBase::DadInfo::SetDadCounter(&v4, *((_BYTE *)this + 42));
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  return ot::Settings::Save<ot::SettingsBase::DadInfo>(v1, &v4);
}

uint64_t ot::DuaManager::SetFixedDuaInterfaceIdentifier( ot::DuaManager *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  unsigned int v14 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsReserved(a2))
  {
    return 7;
  }

  else if (ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::DuaManager *)((char *)this + 48)) {
         || ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=((char *)this + 48, a2))
  }
  {
    *((void *)this + 6)  = *(void *)a2;
    ot::Ip6::InterfaceIdentifier::ToString((ot::DuaManager *)((char *)this + 48), (ot::StringWriter *)v16);
    char v2 = ot::String<(unsigned short)17>::AsCString((uint64_t)v16);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Set DUA IID: %s", v3, v4, v5, v6, v7, v8, v2);
    uint64_t v12 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::DuaManager::GetDomainUnicastAddress(this);
    if (ot::Ip6::Netif::HasUnicastAddress(v12, v9))
    {
      ot::DuaManager::RemoveDomainUnicastAddress(this);
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)this + 56));
      ot::Ip6::Address::SetIid(v10, (ot::DuaManager *)((char *)this + 48));
      ot::DuaManager::AddDomainUnicastAddress(this);
    }
  }

  return v14;
}

uint64_t ot::DuaManager::ClearFixedDuaInterfaceIdentifier(ot::DuaManager *this)
{
  uint64_t result = ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(this);
  if ((result & 1) != 0)
  {
    ot::DuaManager::GetDomainUnicastAddress(this);
    Iid  = (const void *)ot::Ip6::Address::GetIid(v2);
    if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(Iid, (char *)this + 48))
    {
      uint64_t v12 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::DuaManager::GetDomainUnicastAddress(this);
      if (ot::Ip6::Netif::HasUnicastAddress(v12, v4))
      {
        ot::DuaManager::RemoveDomainUnicastAddress(this);
      }
    }

    ot::Ip6::InterfaceIdentifier::ToString((ot::DuaManager *)((char *)this + 48), (ot::StringWriter *)v14);
    char v5 = ot::String<(unsigned short)17>::AsCString((uint64_t)v14);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Cleared DUA IID: %s", v6, v7, v8, v9, v10, v11, v5);
    return (uint64_t)ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear((void *)this + 6);
  }

  return result;
}

uint64_t ot::DuaManager::Restore(ot::DuaManager *this)
{
  char v5 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  uint64_t result = ot::Settings::Read<ot::SettingsBase::DadInfo>(v1, (ot::SettingsBase::DadInfo *)&v4);
  if (!(_DWORD)result)
  {
    uint64_t result = ot::SettingsBase::DadInfo::GetDadCounter((ot::SettingsBase::DadInfo *)&v4);
    *((_BYTE *)this + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  }

  return result;
}

uint64_t ot::Settings::Read<ot::SettingsBase::DadInfo>( ot::InstanceLocator *a1, ot::SettingsBase::DadInfo *a2)
{
  return ot::Settings::ReadEntry(a1, 8u, a2, 1u);
}

{
  return __ZNK2ot8Settings4ReadINS_12SettingsBase7DadInfoEEE7otErrorRT_(a1, a2);
}

_BYTE *ot::SettingsBase::DadInfo::SetDadCounter(_BYTE *this, char a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot12SettingsBase7DadInfo13SetDadCounterEh(this, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::DadInfo>(ot::InstanceLocator *a1, const void *a2)
{
  char v5 = a1;
  char v4 = a2;
  return ot::Settings::SaveEntry(a1, 8, a2, (uint64_t)&v3, 1u);
}

{
  return __ZN2ot8Settings4SaveINS_12SettingsBase7DadInfoEEE7otErrorRKT_(a1, a2);
}

char *ot::DuaManager::UpdateRegistrationDelay( char *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (ot::DuaManager *)this;
  if (!this[91] || this[91] > (int)a2)
  {
    this[91]  = a2;
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DuaManager", "update regdelay %d", a3, a4, a5, a6, a7, a8, this[91]);
    return (char *)ot::DuaManager::UpdateTimeTickerRegistration(v8);
  }

  return this;
}

uint64_t ot::DuaManager::UpdateTimeTickerRegistration(ot::DuaManager *this)
{
  if (*((_DWORD *)this + 22))
  {
    char v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::RegisterReceiver(v3, 4);
  }

  else
  {
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v1, 4);
  }

uint64_t ot::DuaManager::NotifyDuplicateDomainUnicastAddress(ot::DuaManager *this)
{
  uint64_t result = ot::DuaManager::GenerateDomainUnicastAddressIid(this);
  if (!(_DWORD)result) {
    return ot::DuaManager::AddDomainUnicastAddress(this);
  }
  return result;
}

void ot::DuaManager::UpdateReregistrationDelay(ot::DuaManager *this)
{
  uint64_t v13 = this;
  unsigned __int16 v12 = 0;
  uint64_t v1 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (!ot::BackboneRouter::Leader::GetConfig(v1, (uint64_t)v10))
  {
    if (v11 <= 1u) {
      Uint16InRange  = 1;
    }
    else {
      Uint16InRange  = ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, v11);
    }
    unsigned __int16 v12 = Uint16InRange;
    if (!*((_WORD *)this + 44) || *((unsigned __int16 *)this + 44) > (int)v12)
    {
      *((_WORD *)this + 4ot::MeshCoP::Tlv::SetType(this, 4) = v12;
      ot::DuaManager::UpdateTimeTickerRegistration(this);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"DuaManager",  "update reregdelay %d",  v2,  v3,  v4,  v5,  v6,  v7,  *((_WORD *)this + 44));
    }
  }

char *ot::DuaManager::UpdateCheckDelay( char *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (ot::DuaManager *)this;
  if (!this[90] || this[90] > (int)a2)
  {
    this[90]  = a2;
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"DuaManager",  "update checkdelay %d",  a3,  a4,  a5,  a6,  a7,  a8,  this[90]);
    return (char *)ot::DuaManager::UpdateTimeTickerRegistration(v8);
  }

  return this;
}

char *ot::DuaManager::HandleNotifierEvents(ot::InstanceLocator *a1, uint64_t a2)
{
  v32  = a2;
  unsigned __int16 v31 = a1;
  unsigned __int16 v30 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Events::Contains(&v32, 512LL))
  {
    char v27 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
    uint64_t v2 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
    ot::DuaManager::GetDomainUnicastAddress(v2);
    if (ot::Ip6::Netif::HasUnicastAddress(v27, v3))
    {
      __n128 v26 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
      uint64_t v4 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
      ot::DuaManager::GetDomainUnicastAddress(v4);
    }
  }

  uint64_t result = (char *)ot::Mle::Mle::IsAttached(v30);
  if ((result & 1) != 0)
  {
    if (ot::Events::Contains(&v32, 4LL))
    {
      if ((ot::Mle::Mle::HasRestored(v30) & 1) != 0)
      {
        ot::DuaManager::UpdateReregistrationDelay(a1);
      }

      else if (ot::Mle::Mle::IsRouter(v30))
      {
        ot::DuaManager::UpdateRegistrationDelay((char *)a1, 3u, v7, v8, v9, v10, v11, v12);
      }

      else if ((ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(v30) & 1) != 0)
      {
        RouterSelectionJitterTimeout  = ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(v30);
        ot::DuaManager::UpdateRegistrationDelay( (char *)a1,  RouterSelectionJitterTimeout + 4,  v14,  v15,  v16,  v17,  v18,  v19);
      }
    }

    uint64_t result = (char *)ot::Events::ContainsAny((ot::Events *)&v32, 1LL);
  }

  else
  {
    *((_DWORD *)a1 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  }

  return result;
}

uint64_t ot::Mle::Mle::HasRestored(ot::Mle::Mle *this)
{
  return *((_BYTE *)this + 709) & 1;
}

{
  return __ZNK2ot3Mle3Mle11HasRestoredEv(this);
}

uint64_t ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 46255);
}

{
  return __ZNK2ot3Mle9MleRouter31GetRouterSelectionJitterTimeoutEv(this);
}

void ot::DuaManager::HandleBackboneRouterPrimaryUpdate(ot::InstanceLocator *a1, char a2)
{
  if (a2 == 1 || a2 == 3)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
    if (ot::Mle::Mle::IsFullThreadDevice(v2)
      || (uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1),
          Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v3),
          ot::Neighbor::IsThreadVersion1p1(Parent)))
    {
      ot::DuaManager::UpdateReregistrationDelay(a1);
    }
  }

BOOL ot::Neighbor::IsThreadVersion1p1(ot::Neighbor *this)
{
  BOOL v2 = 0;
  if ((*((_BYTE *)this + 98) & 0xF) != 0) {
    return *((unsigned __int16 *)this + 52) == 2;
  }
  return v2;
}

{
  return __ZNK2ot8Neighbor18IsThreadVersion1p1Ev(this);
}

uint64_t ot::DuaManager::HandleTimeTick( ot::DuaManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = this;
  char v17 = 0;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"DuaManager",  "regdelay %d, reregdelay %d, checkdelay %d",  a3,  a4,  a5,  a6,  a7,  a8,  *((_BYTE *)this + 91));
  BOOL v14 = 0;
  if (*((_BYTE *)this + 41))
  {
    int Now = ot::TimerMilli::GetNow(0LL);
    int v8 = ot::Time::SecToMsec((ot::Time *)0x64);
    int v15 = ot::Time::operator+((_DWORD *)this + 11, v8);
    BOOL v14 = ot::Time::operator>(&Now, &v15);
  }

  if (v14) {
    *((_BYTE *)this + 7ot::MeshCoP::Tlv::SetType(this, 4) = *((_BYTE *)this + 74) & 0xFE | 1;
  }
  if (*((_BYTE *)this + 91))
  {
    char v9 = *((_BYTE *)this + 91);
    *((_BYTE *)this + 9ot::AnnounceSenderBase::SendAnnounce(this, 1) = v9 - 1;
    if (v9 == 1) {
      char v17 = 1;
    }
  }

  if (*((_BYTE *)this + 90))
  {
    char v10 = *((_BYTE *)this + 90);
    *((_BYTE *)this + 90)  = v10 - 1;
    if (v10 == 1) {
      char v17 = 1;
    }
  }

  if (*((_WORD *)this + 44))
  {
    __int16 v11 = *((_WORD *)this + 44);
    *((_WORD *)this + 4ot::MeshCoP::Tlv::SetType(this, 4) = v11 - 1;
    if (v11 == 1)
    {
      if (*((_BYTE *)this + 41)) {
        *((_BYTE *)this + 4ot::AnnounceSenderBase::SendAnnounce(this, 1) = 1;
      }
      ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)this + 100));
      char v17 = 1;
    }
  }

  if ((v17 & 1) != 0) {
    ot::Tasklet::Post((ot::DuaManager *)((char *)this + 8));
  }
  return ot::DuaManager::UpdateTimeTickerRegistration(this);
}

BOOL ot::Unequatable<ot::BitVector<(unsigned short)64>>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_9BitVectorILt64EEEEneERKS2_(a1, a2);
}

void ot::DuaManager::HandleDuaResponse( uint64_t a1, ot::Coap::Message *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(a1 + 40) &= ~1u;
  *(_WORD *)(a1 + 108)  = 64;
  if ((_DWORD)a4 == 28)
  {
    ot::DuaManager::UpdateCheckDelay((char *)a1, 0x1Eu, a3, a4, a5, a6, a7, a8);
    int v16 = 28;
  }

  else if ((_DWORD)a4)
  {
    int v16 = 6;
  }

  else
  {
    if (!a2) {
      __assert_rtn("HandleDuaResponse", "dua_manager.cpp", 582, "aMessage != nullptr");
    }
    if (ot::Coap::Message::GetCode(a2) == 68
      || ot::Coap::Message::GetCode(a2) >= 0x80u)
    {
      int v16 = ot::DuaManager::ProcessDuaResponse((ot::DuaManager *)a1, a2);
    }

    else
    {
      int v16 = 6;
    }
  }

  if (v16 != 28) {
    ot::Tasklet::Post((ot::Tasklet *)(a1 + 8));
  }
  char v14 = ot::UriToString<(ot::Uri)37>();
  ot::ErrorToString(v16);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DuaManager",  "Received %s response: %s",  v8,  v9,  v10,  v11,  v12,  v13,  v14);
}

uint64_t ot::DuaManager::ProcessDuaResponse(ot::DuaManager *this, ot::Coap::Message *a2)
{
  __n128 v26 = this;
  uint64_t v25 = a2;
  unsigned int v24 = 0;
  if (ot::Coap::Message::GetCode(a2) < 0x80u)
  {
    unsigned int v24 = ot::Tlv::Find<ot::ThreadStatusTlv>(v25, &v22, v2, v3);
    if (v24) {
      goto LABEL_22;
    }
    unsigned int v24 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v25, (uint64_t)&v23, v4, v5, v6);
    if (v24) {
      goto LABEL_22;
    }
  }

  else
  {
    unsigned __int8 v22 = 6;
    __int128 v23 = *(_OWORD *)((char *)this + 24);
  }

  uint64_t v7 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (ot::BackboneRouter::Leader::IsDomainUnicast(v7, (const ot::Ip6::Address *)&v23))
  {
    uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    if (ot::Ip6::Netif::HasUnicastAddress(v8, (const ot::Ip6::Address *)&v23))
    {
      if (v22 <= 6uLL) {
        __asm { BR              X8 }
      }
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v9 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      char v18 = ot::ChildTable::Iterate(v9, 0);
      uint64_t v19 = (ot::ChildTable::IteratorBuilder *)&v18;
      v17[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v18);
      v17[1]  = v10;
      v16[0]  = ot::ChildTable::IteratorBuilder::end(v19);
      v16[1]  = v11;
      while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v17, v16))
      {
        int v15 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v17);
        if (ot::Child::HasIp6Address(v15, (const ot::Ip6::Address *)&v23))
        {
          uint64_t v21 = v15;
          break;
        }

        ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v17);
      }

      if (v21)
      {
        uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        ChildIndex  = ot::ChildTable::GetChildIndex(v12, (uint64_t)v21);
        if (v22 <= 6uLL) {
          __asm { BR              X8 }
        }

        if (v22) {
          ot::DuaManager::SendAddressNotification(this, &v23, v22, v21);
        }
      }

      else
      {
        unsigned int v24 = 23;
      }
    }
  }

  else
  {
    unsigned int v24 = 2;
  }

void ot::DuaManager::HandleTmf<(ot::Uri)36>( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    if (ot::Coap::Message::IsConfirmable(a2))
    {
      uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      if (!ot::Coap::CoapBase::SendEmptyAck(v3, a2, a3))
      {
        char v4 = ot::UriToString<(ot::Uri)36>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Sent %s ack", v5, v6, v7, v8, v9, v10, v4);
      }
    }

    int v19 = ot::DuaManager::ProcessDuaResponse(a1, a2);
  }

  else
  {
    int v19 = 6;
  }

  char v17 = ot::UriToString<(ot::Uri)36>();
  ot::ErrorToString(v19);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Received %s: %s", v11, v12, v13, v14, v15, v16, v17);
}

uint64_t ot::Tlv::Find<ot::ThreadStatusTlv>(ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 4u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_15ThreadStatusTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

void ot::DuaManager::SendAddressNotification( ot::InstanceLocator *a1, void *a2, unsigned __int8 a3, ot::Neighbor *a4)
{
  unsigned __int16 v29 = a1;
  char v28 = a2;
  unsigned __int8 v27 = a3;
  __n128 v26 = a4;
  uint64_t v25 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v24, Instance);
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v25 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v5, 0x24u);
  if (v25)
  {
    int v23 = ot::Tlv::Append<ot::ThreadStatusTlv>((uint64_t)v25, v27);
    if (!v23)
    {
      int v23 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v25, v28);
      if (!v23)
      {
        unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v26);
        ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v24, Rloc16);
        uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        int v23 = ot::Coap::CoapBase::SendMessage(v7, v25, (const ot::Ip6::MessageInfo *)v24);
        if (!v23)
        {
          char v21 = ot::UriToString<(ot::Uri)36>();
          ot::Neighbor::GetRloc16(v26);
          ot::Ip6::Address::ToString((ot::Ip6::Address *)v28, (ot::StringWriter *)v31);
          ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"DuaManager",  "Sent %s for child %04x DUA %s",  v8,  v9,  v10,  v11,  v12,  v13,  v21);
        }
      }
    }
  }

  else
  {
    int v23 = 3;
  }

  if (v23)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
    char v20 = ot::UriToString<(ot::Uri)36>();
    ot::Neighbor::GetRloc16(v26);
    ot::Ip6::Address::ToString((ot::Ip6::Address *)v28, (ot::StringWriter *)v30);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v30);
    ot::ErrorToString(v23);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"DuaManager",  "Sent %s for child %04x DUA %s Error %s",  v14,  v15,  v16,  v17,  v18,  v19,  v20);
  }

uint64_t ot::DuaManager::UpdateChildDomainUnicastAddress(unsigned __int16 *a1, uint64_t a2, char a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
  uint64_t result = ot::ChildTable::GetChildIndex(v3, a2);
  unsigned __int16 v14 = result;
  if (a3 == 2 || a3 == 1)
  {
    uint64_t result = ot::BitVector<(unsigned short)64>::Get((uint64_t)(a1 + 46), result);
    if ((result & 1) != 0)
    {
      if (a1[54] == v14)
      {
        uint64_t v5 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
        ot::Coap::CoapBase::AbortTransaction(v5, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)a1);
        IgnoreError();
      }

      ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 46), v14, 0);
      uint64_t result = ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 50), v14, 0);
    }
  }

  if (!a3
    || a3 == 1
    || a3 == 3 && (uint64_t result = ot::BitVector<(unsigned short)64>::Get((uint64_t)(a1 + 46), v14), (result & 1) == 0))
  {
    if (ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(a1 + 46, a1 + 50))
    {
      unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange((ot::Random::NonCrypto *)1, 5u);
      ot::DuaManager::UpdateCheckDelay((char *)a1, Uint8InRange, v7, v8, v9, v10, v11, v12);
    }

    ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 46), v14, 1);
    return ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 50), v14, 0);
  }

  return result;
}

BOOL ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_9BitVectorILt64EEEEeqERKS2_(a1, a2);
}

uint64_t ot::TaskletIn<ot::DuaManager,&ot::DuaManager::PerformNextRegistration>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
  return ((uint64_t (*)(uint64_t))ot::DuaManager::PerformNextRegistration)(v2);
}

_BYTE *ot::SettingsBase::DadInfo::Init(ot::SettingsBase::DadInfo *this)
{
  return ot::Clearable<ot::SettingsBase::DadInfo>::Clear(this);
}

{
  return __ZN2ot12SettingsBase7DadInfo4InitEv(this);
}

_BYTE *ot::Clearable<ot::SettingsBase::DadInfo>::Clear(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_12SettingsBase7DadInfoEE5ClearEv(result);
}

ot::EnergyScanServer *ot::EnergyScanServer::EnergyScanServer(ot::EnergyScanServer *this, ot::Instance *a2)
{
  *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  *((_DWORD *)this + 5)  = 0;
  *((_WORD *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_WORD *)this + 13)  = 0;
  *((_BYTE *)this + 28)  = 0;
  *((void *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0LL;
  ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::TimerMilliIn( (ot::EnergyScanServer *)((char *)this + 40),  a2);
  return this;
}

{
  ot::EnergyScanServer::EnergyScanServer(this, a2);
  return this;
}

void ot::EnergyScanServer::HandleTimer(ot::EnergyScanServer *this)
{
  if (*((void *)this + 4))
  {
    if (*((_BYTE *)this + 28))
    {
      unsigned int v3 = *((_DWORD *)this + 5) & ~(*((_DWORD *)this + 5) - 1);
      uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::EnergyScan( v1,  v3,  *((_WORD *)this + 13),  (uint64_t)ot::EnergyScanServer::HandleScanResult,  (uint64_t)this);
      IgnoreError();
    }

    else
    {
      ot::EnergyScanServer::SendReport(this);
    }
  }

ot::TimerMilli *ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::HandleTimer);
  return a1;
}

void ot::EnergyScanServer::HandleTmf<(ot::Uri)19>(uint64_t a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v33 = a1;
  v32  = a2;
  unsigned __int16 v31 = a3;
  if (ot::Coap::Message::IsPostRequest(a2)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(v32, &v30, v3, v4)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(v32, &v29, v5, v6)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(v32, &v28, v7, v8))
  {
    ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v32, v9, v10, v11, v12);
    if (ChannelMask)
    {
      if (*(void *)(a1 + 32)) {
        ot::Message::Free(*(ot::Message **)(a1 + 32));
      }
      uint64_t v13 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
      *(void *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v13, 0x12u);
      if (*(void *)(a1 + 32))
      {
        ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v25);
        ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v25, ChannelMask);
        if (!ot::Tlv::AppendTo((ot::Tlv *)v25, *(ot::Message **)(a1 + 32)))
        {
          ot::MeshCoP::Tlv::SetType(v26, 57);
          if (!ot::Message::Append<ot::MeshCoP::Tlv>(*(ot::Message **)(a1 + 32), v26))
          {
            *(_BYTE *)(a1 + 2ot::MeshCoP::Tlv::SetType(this, 9) = 0;
            *(_DWORD *)(a1 + ot::Tlv::SetLength((uint64_t)this, 16) = ChannelMask;
            *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a1 + 16);
            *(_BYTE *)(a1 + 28)  = v30;
            *(_WORD *)(a1 + 2ot::MeshCoP::Tlv::SetType(this, 4) = v29;
            *(_WORD *)(a1 + 26)  = v28;
            ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), 0x3E8u);
            ot::Ip6::MessageInfo::GetPeerAddr(v31);
            *(_OWORD *)a1  = *v14;
            if (ot::Coap::Message::IsConfirmable(v32))
            {
              ot::Ip6::MessageInfo::GetSockAddr(v31);
              if (!ot::Ip6::Address::IsMulticast(v15))
              {
                uint64_t v16 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
                if (!ot::Coap::CoapBase::SendEmptyAck(v16, v32, v31))
                {
                  char v17 = ot::UriToString<(ot::Uri)19>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"EnergyScanSrv",  "Sent %s ack",  v18,  v19,  v20,  v21,  v22,  v23,  v17);
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)56,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x38u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh56EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

void ot::EnergyScanServer::HandleScanResult(uint64_t a1, uint64_t a2)
{
}

{
  if (*(void *)(a1 + 32))
  {
    if (a2)
    {
      if (ot::Message::Append<signed char>(*(ot::Message **)(a1 + 32), (char *)(a2 + 1)))
      {
        if (*(void *)(a1 + 32)) {
          ot::Message::Free(*(ot::Message **)(a1 + 32));
        }
        *(void *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0LL;
      }

      else if (++*(_BYTE *)(a1 + 29) == 255)
      {
        *(_BYTE *)(a1 + 28)  = 0;
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), 0x1F4u);
      }
    }

    else
    {
      *(_DWORD *)(a1 + 20) &= *(_DWORD *)(a1 + 20) - 1;
      if (!*(_DWORD *)(a1 + 20))
      {
        *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a1 + 16);
        --*(_BYTE *)(a1 + 28);
      }

      if (*(_BYTE *)(a1 + 28)) {
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), *(unsigned __int16 *)(a1 + 24));
      }
      else {
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), 0x1F4u);
      }
    }
  }

void ot::EnergyScanServer::SendReport(ot::EnergyScanServer *this)
{
  unsigned __int16 v14 = this;
  int v13 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v12, Instance);
  __int16 Length = ot::Message::GetLength(*((ot::Message **)this + 4));
  ot::Message::Write<unsigned char>( *((ot::Message **)this + 4),  Length - *((unsigned __int8 *)this + 29) - 1,  (char *)this + 29);
  ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v12, (__n128 *)this);
  uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  int v13 = ot::Coap::CoapBase::SendMessage(v3, *((ot::Coap::Message **)this + 4), (const ot::Ip6::MessageInfo *)v12);
  if (!v13)
  {
    char v4 = ot::UriToString<(ot::Uri)18>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanSrv", "Sent %s", v5, v6, v7, v8, v9, v10, v4);
  }

  if (v13 && *((void *)this + 4)) {
    ot::Message::Free(*((ot::Message **)this + 4));
  }
  ot::MeshCoP::LogError((char)"send scan results", v13);
  *((void *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0LL;
}

uint64_t ot::Message::Append<signed char>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 1u);
}

{
  return __ZN2ot7Message6AppendIaEE7otErrorRKT_(a1, a2);
}

void ot::EnergyScanServer::HandleNotifierEvents(ot::Message **a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (ot::Events::Contains(&v5, 512LL) && a1[4])
  {
    uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    ot::NetworkData::LeaderBase::GetCommissioningData(v2);
    if (!v3)
    {
      ot::Message::Free(a1[4]);
      a1[4]  = 0LL;
      ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 5));
    }
  }

void ot::NetworkData::LeaderBase::GetCommissioningData(ot::NetworkData::LeaderBase *this)
{
}

  ;
}

{
  unint64_t TlvsEnd;
  ot::NetworkData::NetworkDataTlv *TlvsStart;
  TlvsStart  = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(this);
  TlvsEnd  = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::CommissioningDataTlv>(TlvsStart, TlvsEnd);
}

{
  __ZN2ot11NetworkData10LeaderBase20GetCommissioningDataEv(this);
}

uint64_t ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(a1);
  return ((uint64_t (*)(uint64_t))ot::EnergyScanServer::HandleTimer)(v2);
}

ot::Mac::Address *ot::IndirectSender::ChildInfo::GetMacAddress( ot::IndirectSender::ChildInfo *this, ot::Mac::Address *a2)
{
  if ((*((void *)this + 1) & 0x40000000) != 0)
  {
    __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::IndirectSender::ChildInfo *)((char *)this - 248));
    ot::Mac::Address::SetShort((uint64_t)a2, Rloc16);
  }

  else
  {
    ExtAddress  = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress((ot::IndirectSender::ChildInfo *)((char *)this - 248));
    ot::Mac::Address::SetExtended((uint64_t)a2, ExtAddress);
  }

  return a2;
}

ot::IndirectSender *ot::IndirectSender::IndirectSender(ot::IndirectSender *this, ot::Instance *a2)
{
  *(_BYTE *)this  = 0;
  ot::SourceMatchController::SourceMatchController((ot::IndirectSender *)((char *)this + 1), a2);
  ot::DataPollHandler::DataPollHandler((ot::IndirectSender *)((char *)this + 8), a2);
  ot::CslTxScheduler::CslTxScheduler((ot::IndirectSender *)((char *)this + 24), a2);
  return this;
}

{
  ot::IndirectSender::IndirectSender(this, a2);
  return this;
}

ot::InstanceLocator *ot::IndirectSender::Stop(ot::InstanceLocator *this)
{
  uint64_t v10 = this;
  char v4 = this;
  if ((*(_BYTE *)this & 1) != 0)
  {
    uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v8 = ot::ChildTable::Iterate(v1, 5);
    uint64_t v9 = (ot::ChildTable::IteratorBuilder *)&v8;
    v7[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v8);
    v7[1]  = v2;
    v6[0]  = ot::ChildTable::IteratorBuilder::end(v9);
    v6[1]  = v3;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v7, v6))
    {
      uint64_t v5 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v7);
      ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v5 + 31, 0LL);
      ot::SourceMatchController::ResetMessageCount((ot::InstanceLocator *)((char *)v4 + 1), v5);
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v7);
    }

    ot::DataPollHandler::Clear((ot::InstanceLocator *)((char *)v4 + 8));
    this  = (ot::InstanceLocator *)ot::CslTxScheduler::Clear((ot::InstanceLocator *)((char *)v4 + 24));
  }

  *(_BYTE *)char v4 = 0;
  return this;
}

void *ot::IndirectSender::ChildInfo::SetIndirectMessage(void *this, ot::Message *a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo18SetIndirectMessageEPNS_7MessageE(this, a2);
}

void ot::IndirectSender::AddMessageForSleepyChild(ot::IndirectSender *this, ot::Message *a2, ot::Child *a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  ChildIndex  = ot::ChildTable::GetChildIndex(v3, (uint64_t)a3);
  if (!ot::Message::GetChildMask(a2, ChildIndex))
  {
    ot::Message::SetChildMask(a2, ChildIndex);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    memcpy(__dst, a2, sizeof(__dst));
    if (ot::MeshForwarder::IsTxThreadControl(v5, (ot::Message *)__dst)) {
      ot::SourceMatchController::IncrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 0);
    }
    else {
      ot::SourceMatchController::IncrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 1);
    }
    if (ot::Message::GetType(a2) != 2
      && (unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a3 + 248)) > 1u)
    {
      IndirectMessage  = (ot::Message *)ot::IndirectSender::FindIndirectMessage(this, a3, 1);
      if (IndirectMessage)
      {
        ot::IndirectSender::RemoveMessageFromSleepyChild(this, IndirectMessage, a3);
        IgnoreError();
        char v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        ot::MeshForwarder::RemoveMessageIfNoPendingTx(v4, IndirectMessage);
      }
    }

    ot::IndirectSender::RequestMessageUpdate(this, a3);
  }

uint64_t ot::IndirectSender::FindIndirectMessage(ot::IndirectSender *this, ot::Child *a2, char a3)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  char v14 = a3 & 1;
  *(_WORD *)&v13[8]  = 0;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  *(void *)int v13 = (unsigned __int16)ot::ChildTable::GetChildIndex(v3, (uint64_t)v15);
  uint64_t v12 = (ot::PriorityQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  v11[0]  = ot::PriorityQueue::begin(v12);
  v11[1]  = v4;
  v10[0]  = ot::PriorityQueue::end(v12);
  v10[1]  = v5;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v11, v10))
  {
    uint64_t v9 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v11);
    if (ot::Message::GetChildMask(v9, *(unsigned __int16 *)v13)
      && ((v14 & 1) == 0 || ot::Message::GetType(v9) == 2))
    {
      *(void *)&v13[2]  = v9;
      return *(void *)&v13[2];
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v11, v6);
  }

  return *(void *)&v13[2];
}

uint64_t ot::IndirectSender::RemoveMessageFromSleepyChild( ot::IndirectSender *this, ot::Message *a2, ot::Child *a3)
{
  *(_WORD *)&v7[4]  = 0;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  *(_DWORD *)uint64_t v7 = (unsigned __int16)ot::ChildTable::GetChildIndex(v3, (uint64_t)a3);
  if (ot::Message::GetChildMask(a2, *(unsigned __int16 *)v7))
  {
    ot::Message::ClearChildMask(a2, *(unsigned __int16 *)v7);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    memcpy(__dst, a2, sizeof(__dst));
    if (ot::MeshForwarder::IsTxThreadControl(v5, (ot::Message *)__dst)) {
      ot::SourceMatchController::DecrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 0);
    }
    else {
      ot::SourceMatchController::DecrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 1);
    }
    ot::IndirectSender::RequestMessageUpdate(this, a3);
  }

  else
  {
    *(_DWORD *)&v7[2]  = 23;
  }

  return *(unsigned int *)&v7[2];
}

void ot::IndirectSender::RequestMessageUpdate(ot::IndirectSender *this, ot::Child *a2)
{
  IndirectMessage  = (ot::Message *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::Child *)((char *)a2 + 248));
  if (!IndirectMessage
    || (uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this),
        ChildIndex  = ot::ChildTable::GetChildIndex(v2, (uint64_t)a2),
        ot::Message::GetChildMask(IndirectMessage, ChildIndex)))
  {
    if ((ot::IndirectSender::ChildInfo::IsWaitingForMessageUpdate((ot::Child *)((char *)a2 + 248)) & 1) == 0
      && IndirectMessage != (ot::Message *)ot::IndirectSender::FindIndirectMessage(this, a2, 0))
    {
      if (IndirectMessage)
      {
        if (!(unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset((ot::Child *)((char *)a2 + 248)))
        {
          ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate((uint64_t)a2 + 248, 1);
          ot::DataPollHandler::RequestFrameChange((uint64_t)this + 8, 1, a2);
          ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
        }
      }

      else
      {
        ot::IndirectSender::UpdateIndirectMessage(this, a2);
      }
    }
  }

  else
  {
    ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)a2 + 31, 0LL);
    ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate((uint64_t)a2 + 248, 1);
    ot::DataPollHandler::RequestFrameChange((uint64_t)this + 8, 0, a2);
    ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
  }

void ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::IndirectSender *this, ot::Child *a2)
{
  char v17 = this;
  uint64_t v16 = a2;
  IndirectMessageCount  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 248));
  if (v3 | (IndirectMessageCount == 0)) {
    char v4 = 0;
  }
  else {
    char v4 = 1;
  }
  if ((v4 & 1) != 0)
  {
    uint64_t v15 = (ot::PriorityQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    v14[0]  = ot::PriorityQueue::begin(v15);
    v14[1]  = v5;
    v13[0]  = ot::PriorityQueue::end(v15);
    v13[1]  = v6;
    while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v14, v13))
    {
      uint64_t v11 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v14);
      uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      ChildIndex  = ot::ChildTable::GetChildIndex(v7, (uint64_t)v16);
      ot::Message::ClearChildMask(v11, ChildIndex);
      uint64_t v9 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      ot::MeshForwarder::RemoveMessageIfNoPendingTx(v9, v11);
      ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v14, v10);
    }

    ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v16 + 31, 0LL);
    ot::SourceMatchController::ResetMessageCount((ot::IndirectSender *)((char *)this + 1), v16);
    ot::DataPollHandler::RequestFrameChange((uint64_t)this + 8, 0, v16);
    ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
  }

void ot::IndirectSender::SetChildUseShortAddress(ot::IndirectSender *this, ot::Child *a2, char a3)
{
  char v4 = a3 & 1;
}

uint64_t ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 30) & 1LL;
}

{
  return __ZNK2ot14IndirectSender9ChildInfo26IsIndirectSourceMatchShortEv(this);
}

void ot::IndirectSender::HandleChildModeChange(uint64_t a1, ot::Neighbor *a2, char a3)
{
  char v18 = a3;
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  if (!ot::Neighbor::IsRxOnWhenIdle(a2) && ot::Neighbor::IsStateValid(v16)) {
    ot::IndirectSender::SetChildUseShortAddress((ot::IndirectSender *)a1, v16, 1);
  }
  if (!ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v18) && ot::Neighbor::IsRxOnWhenIdle(v16))
  {
    IndirectMessageCount  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Neighbor *)((char *)v16 + 248));
    char v5 = v4 | (IndirectMessageCount == 0);
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
      ChildIndex  = ot::ChildTable::GetChildIndex(v6, (uint64_t)v16);
      char v14 = (ot::PriorityQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
      v13[0]  = ot::PriorityQueue::begin(v14);
      v13[1]  = v7;
      v12[0]  = ot::PriorityQueue::end(v14);
      v12[1]  = v8;
      while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v13, v12))
      {
        uint64_t v11 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v13);
        if (ot::Message::GetChildMask(v11, ChildIndex))
        {
          ot::Message::ClearChildMask(v11, ChildIndex);
          ot::Message::SetDirectTransmission(v11);
        }

        ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v13, v9);
      }

      ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v16 + 31, 0LL);
      ot::SourceMatchController::ResetMessageCount((ot::SourceMatchController *)(a1 + 1), v16);
      ot::DataPollHandler::RequestFrameChange(a1 + 8, 0, v16);
      ot::CslTxScheduler::Update((ot::CslTxScheduler *)(a1 + 24));
    }
  }

uint64_t ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate(uint64_t this, char a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFFFFF7FFFLL | ((unint64_t)(a2 & 1) << 15);
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo26SetWaitingForMessageUpdateEb(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::IsWaitingForMessageUpdate(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 15) & 1LL;
}

{
  return __ZNK2ot14IndirectSender9ChildInfo25IsWaitingForMessageUpdateEv(this);
}

void ot::IndirectSender::UpdateIndirectMessage(ot::IndirectSender *this, ot::Child *a2)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  IndirectMessage  = (ot::Message *)ot::IndirectSender::FindIndirectMessage(this, a2, 0);
  ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate((uint64_t)v6 + 248, 0);
  ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v6 + 31, IndirectMessage);
  ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset((uint64_t)v6 + 248, 0);
  ot::IndirectSender::ChildInfo::SetIndirectTxSuccess((uint64_t)v6 + 248, 1);
  ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
  if (IndirectMessage)
  {
    ot::Mac::Address::Address((ot::Mac::Address *)v4);
    ot::DataPollHandler::HandleNewFrame((ot::IndirectSender *)((char *)this + 8), v6);
    ot::IndirectSender::ChildInfo::GetMacAddress((ot::Child *)((char *)v6 + 248), (ot::Mac::Address *)v4);
    uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::LogMessage(v2, 2u, IndirectMessage, 0, (ot::Mac::Address *)v4);
  }

uint64_t ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset(ot::IndirectSender::ChildInfo *this)
{
  return *((_WORD *)this + 4) & 0x3FFF;
}

{
  return __ZNK2ot14IndirectSender9ChildInfo25GetIndirectFragmentOffsetEv(this);
}

void ot::IndirectSender::HandleFrameChangeDone(ot::IndirectSender *this, ot::Child *a2)
{
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset(uint64_t this, __int16 a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFFFFFC000LL | a2 & 0x3FFF;
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo25SetIndirectFragmentOffsetEt(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectTxSuccess(uint64_t this, char a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFFFFFBFFFLL | ((unint64_t)(a2 & 1) << 14);
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo20SetIndirectTxSuccessEb(this, a2);
}

uint64_t ot::IndirectSender::PrepareFrameForChild( ot::IndirectSender *a1, ot::Mac::TxFrame *a2, _WORD *a3, uint64_t a4)
{
  unsigned int v8 = 0;
  IndirectMessage  = (ot::Message *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::IndirectSender::ChildInfo *)(a4 + 248));
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    if (IndirectMessage)
    {
      int Type = ot::Message::GetType(IndirectMessage);
      if (Type)
      {
        if (Type != 2) {
          __assert_rtn("PrepareFrameForChild", "indirect_sender.cpp", 374, "false");
        }
        ot::IndirectSender::PrepareEmptyFrame(a1, a2, (ot::Child *)a4, 1);
        *a3  = ot::Message::GetLength(IndirectMessage);
      }

      else
      {
        *a3  = ot::IndirectSender::PrepareDataFrame(a1, a2, (ot::Child *)a4, IndirectMessage);
      }
    }

    else
    {
      ot::IndirectSender::PrepareEmptyFrame(a1, a2, (ot::Child *)a4, 1);
      *a3  = 0;
    }
  }

  else
  {
    return 11;
  }

  return v8;
}

uint64_t ot::IndirectSender::PrepareEmptyFrame( ot::IndirectSender *this, ot::Mac::TxFrame *a2, ot::Child *a3, char a4)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  char v8 = a4 & 1;
  ot::Mac::Address::Address((ot::Mac::Address *)v7);
  ot::IndirectSender::ChildInfo::GetMacAddress((ot::Child *)((char *)v9 + 248), (ot::Mac::Address *)v7);
  char v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  return ot::MeshForwarder::PrepareEmptyFrame(v4, v10, (const ot::Mac::Address *)v7, v8 & 1);
}

uint64_t ot::IndirectSender::PrepareDataFrame( ot::IndirectSender *this, ot::Mac::TxFrame *a2, ot::Child *a3, ot::Message *a4)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  uint64_t v19 = a4;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v16);
  ot::Message::Read<ot::Ip6::Header>(v19, 0, v18);
  IgnoreError();
  int v13 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v18);
  ot::MeshForwarder::GetMacSourceAddress(v13, Source, (ot::Mac::Address *)v16);
  Destination  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v18);
  if (ot::Ip6::Address::IsLinkLocal(Destination))
  {
    uint64_t v11 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    uint64_t v6 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v18);
    ot::MeshForwarder::GetMacDestinationAddress(v11, v6, (ot::Mac::Address *)v17);
  }

  else
  {
    ot::IndirectSender::ChildInfo::GetMacAddress((ot::Child *)((char *)v20 + 248), (ot::Mac::Address *)v17);
  }

  Offset  = ot::Message::GetOffset(v19);
  uint64_t v10 = v19;
  IndirectFragmentOffset  = ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset((ot::Child *)((char *)v20 + 248));
  ot::Message::SetOffset(v10, IndirectFragmentOffset);
  char v8 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  unsigned __int16 v14 = ot::MeshForwarder::PrepareDataFrame(v8, v21, v19, (const ot::Mac::Addresses *)v16, 0, 0xFFFFu, 0xFFFFu, 0);
  ot::Message::SetOffset(v19, Offset);
  return v14;
}

void ot::IndirectSender::HandleSentFrameToChild( uint64_t a1, ot::Mac::Frame *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v50 = a1;
  unsigned __int8 v49 = a2;
  v48  = a3;
  int v47 = a4;
  char v46 = (ot::Child *)a5;
  __src  = (void *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::IndirectSender::ChildInfo *)(a5 + 248));
  unsigned __int16 Length = *v48;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    if (!v47)
    {
      char v5 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>((ot::InstanceLocator *)a1);
      ot::ChildSupervisor::UpdateOnSend(v5, v46);
    }

    if (Length)
    {
      if (v47)
      {
        if (v47 != 11 && v47 != 15 && v47 != 14) {
          __assert_rtn("HandleSentFrameToChild", "indirect_sender.cpp", 485, "false");
        }
        ot::IndirectSender::ChildInfo::SetIndirectTxSuccess((uint64_t)v46 + 248, 0);
        if (__src) {
          unsigned __int16 Length = ot::Message::GetLength((ot::Message *)__src);
        }
      }

      if (__src && Length < (int)(unsigned __int16)ot::Message::GetLength((ot::Message *)__src))
      {
        ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset((uint64_t)v46 + 248, Length);
        ot::DataPollHandler::HandleNewFrame((ot::DataPollHandler *)(a1 + 8), v46);
        ot::CslTxScheduler::Update((ot::CslTxScheduler *)(a1 + 24));
      }

      else
      {
        if (__src)
        {
          int v43 = v47;
          uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
          ChildIndex  = ot::ChildTable::GetChildIndex(v7, (uint64_t)v46);
          ot::Mac::Address::Address((ot::Mac::Address *)v41);
          ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v46 + 31, 0LL);
          LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v46);
          Indirectchar TxSuccess = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248));
          ot::LinkQualityInfo::AddMessageTxStatus(LinkInfo, IndirectTxSuccess & 1);
          uint64_t v9 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
          if ((ot::MeshForwarder::IsMatter(v9, (const ot::Message *)__src, (ot::Ip6::Headers *)v40) & 1) != 0)
          {
            char v30 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v46);
            char v10 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248));
            ot::LinkQualityInfo::AddMatterMessageTxStatus(v30, v10 & 1);
            unsigned __int16 v31 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            char v11 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248));
            ot::MeshForwarder::AddMatterMessageTxStatus(v31, v11 & 1);
          }

          if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v40) == 5683
            || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v40) == 5683)
          {
            unsigned __int16 v28 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v46);
            char v12 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248));
            ot::LinkQualityInfo::AddHomeKitMessageTxStatus(v28, v12 & 1);
            unsigned __int16 v29 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            char v13 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248));
            ot::MeshForwarder::AddHomeKitMessageTxStatus(v29, v13 & 1);
          }

          ot::SourceMatchController::SetSrcMatchAsShort((ot::SourceMatchController *)(a1 + 1), v46, 1);
          if (!ot::Mac::Frame::IsEmpty(v49))
          {
            ot::Mac::Frame::GetDstAddr(v49, (ot::Mac::Address *)v41);
            IgnoreError();
            unsigned __int16 v14 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            ot::MeshForwarder::LogMessage(v14, 1u, (ot::Message *)__src, v43, (ot::Mac::Address *)v41);
          }

          if (!ot::Message::GetType((ot::Message *)__src))
          {
            char v39 = (_DWORD *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1)
                           + 128);
            uint64_t v26 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            memcpy(__dst, __src, sizeof(__dst));
            IsTxThreadControl  = ot::MeshForwarder::IsTxThreadControl(v26, (ot::Message *)__dst);
            uint64_t v27 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            memcpy(v52, __src, sizeof(v52));
            IsTxIcmpError  = ot::MeshForwarder::IsTxIcmpError(v27, (ot::Message *)v52);
            uint64_t v36 = (_DWORD *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1)
                           + 232);
            if ((ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248)) & 1) != 0)
            {
              ++*v39;
              ++*v36;
              if (!IsTxThreadControl)
              {
                ++v39[11];
                ++v36[11];
              }

              uint64_t v25 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
              Timestamp  = ot::Message::GetTimestamp((ot::Message *)__src);
              int Value = ot::Time::GetValue((ot::Time *)&Timestamp);
              ot::MeshForwarder::UpdateTxDelayStats(v25, Value);
            }

            else
            {
              ++v39[2];
              ++v36[2];
              if (!IsTxThreadControl)
              {
                ++v39[12];
                ++v36[12];
              }

              unsigned int v24 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
              v34  = ot::Message::GetTimestamp((ot::Message *)__src);
              int v16 = ot::Time::GetValue((ot::Time *)&v34);
              ot::MeshForwarder::UpdateTxDelayStats(v24, v16);
            }

            uint64_t v23 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            uint64_t v20 = v46;
            BOOL v21 = IsTxThreadControl;
            BOOL v22 = IsTxIcmpError;
            char v17 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v46 + 248));
            ot::MeshForwarder::UpdateTriggerBasedNeighborInfo(v23, v20, v21, v22, v17 & 1);
          }

          if (ot::Message::GetChildMask((ot::Message *)__src, ChildIndex))
          {
            ot::Message::ClearChildMask((ot::Message *)__src, ChildIndex);
            uint64_t v19 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            memcpy(v51, __src, sizeof(v51));
            if (ot::MeshForwarder::IsTxThreadControl(v19, (ot::Message *)v51)) {
              ot::SourceMatchController::DecrementMessageCount((ot::SourceMatchController *)(a1 + 1), v46, 0);
            }
            else {
              ot::SourceMatchController::DecrementMessageCount((ot::SourceMatchController *)(a1 + 1), v46, 1);
            }
          }

          char v18 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
          ot::MeshForwarder::RemoveMessageIfNoPendingTx(v18, (ot::Message *)__src);
        }

        ot::IndirectSender::UpdateIndirectMessage((ot::IndirectSender *)a1, v46);
      }
    }
  }

  if ((*(_BYTE *)a1 & 1) != 0) {
    ot::IndirectSender::ClearMessagesForRemovedChildren((ot::IndirectSender *)a1);
  }
}

_WORD *ot::LinkQualityInfo::AddMessageTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 3, a2 & 1, 0x80u);
}

{
  return __ZN2ot15LinkQualityInfo18AddMessageTxStatusEb(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::GetIndirectTxSuccess(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 14) & 1LL;
}

{
  return __ZNK2ot14IndirectSender9ChildInfo20GetIndirectTxSuccessEv(this);
}

_WORD *ot::LinkQualityInfo::AddMatterMessageTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 5, a2 & 1, 0x80u);
}

{
  return __ZN2ot15LinkQualityInfo24AddMatterMessageTxStatusEb(this, a2);
}

_WORD *ot::LinkQualityInfo::AddHomeKitMessageTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 4, a2 & 1, 0x80u);
}

{
  return __ZN2ot15LinkQualityInfo25AddHomeKitMessageTxStatusEb(this, a2);
}

uint64_t ot::Message::GetTimestamp(ot::Message *this)
{
  return *(unsigned int *)(ot::Buffer::GetMetadata(this) + 36);
}

{
  return __ZNK2ot7Message12GetTimestampEv(this);
}

BOOL ot::IndirectSender::ClearMessagesForRemovedChildren(ot::IndirectSender *this)
{
  char v11 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 6);
  char v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1]  = v2;
  v7[0]  = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }

  return result;
}

uint64_t ot::KeyManager::HandleKeyRotationTimer(ot::KeyManager *this)
{
  FireTime  = ot::Timer::GetFireTime((ot::KeyManager *)((char *)this + 120));
  uint64_t result = ot::TimerMilli::StartAt((ot::KeyManager *)((char *)this + 120), FireTime, 0x36EE80u);
  if (*((_DWORD *)this + 26) >= *((unsigned __int16 *)this + 90))
  {
    ot::Timer::IsRunning((ot::KeyManager *)((char *)this + 120));
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"KeyManager",  "%s Update keysequence as key rotation timer expired hoursSinceKeyRotation:%u, securityPolicy.RotationTime:%u, guar dTimeSwitchEnabled:%d, guardTime:%u, keySequence:%u, isRunning:%d",  v8,  v9,  v10,  v11,  v12,  v13,  (char)"HandleKeyRotationTimer");
    return ot::KeyManager::SetCurrentKeySequence(this, *((_DWORD *)this + 4) + 1);
  }

  return result;
}

uint64_t ot::SecurityPolicy::SetToDefault(ot::SecurityPolicy *this)
{
  *(_WORD *)this  = 672;
  return ot::SecurityPolicy::SetToDefaultFlags((uint64_t)this);
}

uint64_t ot::SecurityPolicy::SetToDefaultFlags(uint64_t this)
{
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(this + 2) & 0xFFFE | 1;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(this + 2) & 0xFFFD | 2;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(this + 2) & 0xFFFB | 4;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(this + 2) & 0xFFF7 | 8;
  *(_WORD *)(this + 2) &= ~0x10u;
  *(_WORD *)(this + 2) &= ~0x20u;
  *(_WORD *)(this + 2) &= ~0x40u;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(this + 2) & 0xFF7F | 0x80;
  *(_WORD *)(this + 2) &= ~0x100u;
  *(_WORD *)(this + 2) &= 0xF1FFu;
  return this;
}

uint64_t ot::SecurityPolicy::SetFlags(ot::SecurityPolicy *this, char *a2, unsigned __int8 a3)
{
  if (!a3) {
    __assert_rtn("SetFlags", "key_manager.cpp", 92, "aFlagsLength > 0");
  }
  uint64_t result = ot::SecurityPolicy::SetToDefaultFlags((uint64_t)this);
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFFE | (*a2 < 0);
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFFD | (2 * ((*a2 & 0x40) != 0));
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFFB | (4 * ((*a2 & 0x20) != 0));
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFF7 | (8 * ((*a2 & 0x10) != 0));
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFEF | (16 * ((*a2 & 4) == 0));
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFDF | (32 * ((*a2 & 2) == 0));
  *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFFBF | (((*a2 & 1) == 0) << 6);
  if (a3 > 1uLL)
  {
    *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFF7F | ((a2[1] < 0) << 7);
    *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xFEFF | (((a2[1] & 0x40) == 0) << 8);
    *((_WORD *)this + ot::AnnounceSenderBase::SendAnnounce(this, 1) = *((_WORD *)this + 1) & 0xF1FF | ((a2[1] & 7) << 9);
  }

  return result;
}

void ot::SecurityPolicy::GetFlags(ot::SecurityPolicy *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  if (!a3) {
    __assert_rtn("GetFlags", "key_manager.cpp", 115, "aFlagsLength > 0");
  }
  bzero(a2, a3);
  if ((*((_WORD *)this + 1) & 1) != 0) {
    *a2 |= 0x80u;
  }
  if ((*((_WORD *)this + 1) & 2) != 0) {
    *a2 |= 0x40u;
  }
  if ((*((_WORD *)this + 1) & 4) != 0) {
    *a2 |= 0x20u;
  }
  if ((*((_WORD *)this + 1) & 8) != 0) {
    *a2 |= 0x10u;
  }
  if ((*((_WORD *)this + 1) & 0x10) == 0) {
    *a2 |= 4u;
  }
  if ((*((_WORD *)this + 1) & 0x20) == 0) {
    *a2 |= 2u;
  }
  if ((*((_WORD *)this + 1) & 0x40) == 0) {
    *a2 |= 1u;
  }
  if (a3 > 1uLL)
  {
    if ((*((_WORD *)this + 1) & 0x80) != 0) {
      a2[1] |= 0x80u;
    }
    if ((*((_WORD *)this + 1) & 0x100) == 0) {
      a2[1] |= 0x40u;
    }
    a2[1] |= 0x38u;
    a2[1] |= (*((unsigned __int16 *)this + 1) >> 9) & 7;
  }

ot::KeyManager *ot::KeyManager::KeyManager(ot::KeyManager *this, ot::Instance *a2)
{
  *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 20));
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 36));
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 52));
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 68));
  *((_DWORD *)this + 23)  = 0;
  *((_DWORD *)this + 2ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  *((_DWORD *)this + 25)  = 0;
  *((_DWORD *)this + 26)  = 0;
  *((_DWORD *)this + 27)  = 624;
  *((_BYTE *)this + 11ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::TimerMilliIn( (ot::KeyManager *)((char *)this + 120),  a2);
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 160));
  *((_DWORD *)this + 4ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  ot::SecurityPolicy::SecurityPolicy((ot::KeyManager *)((char *)this + 180));
  *((_BYTE *)this + 184) &= ~1u;
  j__otPlatCryptoInit();
  ot::NetworkKey::GenerateRandom(this);
  IgnoreError();
  ot::Clearable<ot::Pskc>::Clear((void *)this + 18);
  ot::Mac::LinkFrameCounters::Reset((ot::KeyManager *)((char *)this + 84));
  return this;
}

{
  ot::KeyManager::KeyManager(this, a2);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::HandleTimer);
  return a1;
}

uint64_t ot::KeyManager::Start(ot::KeyManager *this)
{
  *((_BYTE *)this + 11ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return ot::KeyManager::StartKeyRotationTimer(this);
}

uint64_t ot::KeyManager::StartKeyRotationTimer(ot::KeyManager *this)
{
  *((_DWORD *)this + 26)  = 0;
  return ot::TimerMilli::Start((ot::KeyManager *)((char *)this + 120), 0x36EE80u);
}

uint64_t ot::KeyManager::Stop(ot::KeyManager *this)
{
  return ot::TimerMilli::Stop((ot::KeyManager *)((char *)this + 120));
}

uint64_t ot::KeyManager::SetPskc(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
  uint64_t result = ot::Notifier::Update<ot::Pskc>(v2, (_OWORD *)(a1 + 144), a2, 0x80000LL);
  *(_BYTE *)(a1 + 18ot::MeshCoP::Tlv::SetType(this, 4) = *(_BYTE *)(a1 + 184) & 0xFE | 1;
  return result;
}

uint64_t ot::Notifier::Update<ot::Pskc>(void *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::Pskc>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v6;
}

{
  return __ZN2ot8Notifier6UpdateINS_4PskcEEE7otErrorRT_RKS4_NS_5EventE(a1, a2, a3, a4);
}

BOOL ot::KeyManager::ResetFrameCounters(ot::KeyManager *this)
{
  BOOL v21 = this;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v1);
  ot::Neighbor::SetKeySequence((uint64_t)Parent, 0);
  LinkFrameCounters  = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(Parent);
  ot::Mac::LinkFrameCounters::Reset(LinkFrameCounters);
  ot::Neighbor::SetLinkAckFrameCounter((uint64_t)Parent, 0);
  ot::Neighbor::SetMleFrameCounter((uint64_t)Parent, 0);
  uint64_t v19 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  ot::RouterTable::begin(v19);
  char v18 = v3;
  char v17 = (ot::Neighbor *)ot::RouterTable::end(v19);
  while (v18 != v17)
  {
    int v16 = v18;
    ot::Neighbor::SetKeySequence((uint64_t)v18, 0);
    uint64_t v4 = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v18);
    ot::Mac::LinkFrameCounters::Reset(v4);
    ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v18, 0);
    ot::Neighbor::SetMleFrameCounter((uint64_t)v18, 0);
    char v18 = (ot::Neighbor *)((char *)v18 + 248);
  }

  uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v14 = ot::ChildTable::Iterate(v5, 5);
  uint64_t v15 = (ot::ChildTable::IteratorBuilder *)&v14;
  v13[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v14);
  v13[1]  = v6;
  v12[0]  = ot::ChildTable::IteratorBuilder::end(v15);
  v12[1]  = v7;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v13, v12);
    if (!result) {
      break;
    }
    uint64_t v11 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v13);
    ot::Neighbor::SetKeySequence((uint64_t)v11, 0);
    uint64_t v9 = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v11);
    ot::Mac::LinkFrameCounters::Reset(v9);
    ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v11, 0);
    ot::Neighbor::SetMleFrameCounter((uint64_t)v11, 0);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v13);
  }

  return result;
}

uint64_t ot::KeyManager::SetNetworkKey(ot::KeyManager *this, const ot::NetworkKey *a2)
{
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  uint64_t result = ot::Notifier::Update<ot::NetworkKey>(v2, this, a2, 0x40000LL);
  if (!(_DWORD)result)
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::GetRole(v4))
    {
      uint64_t v5 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v5, 256LL);
      *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
    }

    ot::KeyManager::UpdateKeyMaterial(this);
    return ot::KeyManager::ResetFrameCounters(this);
  }

  return result;
}

uint64_t ot::Notifier::Update<ot::NetworkKey>(void *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::NetworkKey>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v6;
}

{
  return __ZN2ot8Notifier6UpdateINS_10NetworkKeyEEE7otErrorRT_RKS4_NS_5EventE(a1, a2, a3, a4);
}

void ot::KeyManager::UpdateKeyMaterial(ot::KeyManager *this)
{
  MacKey  = (__n128 *)ot::KeyManager::HashKeys::GetMacKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom(&v10, MacKey);
  ot::KeyManager::ComputeKeys(this, *((_DWORD *)this + 4) - 1, (ot::KeyManager::HashKeys *)v11);
  uint64_t v3 = (__n128 *)ot::KeyManager::HashKeys::GetMacKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom(&v9, v3);
  ot::KeyManager::ComputeKeys(this, *((_DWORD *)this + 4) + 1, (ot::KeyManager::HashKeys *)v11);
  uint64_t v4 = (__n128 *)ot::KeyManager::HashKeys::GetMacKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom(&v8, v4);
  uint64_t v5 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  ot::Mac::SubMac::SetMacKey( v5,  8u,  (*((_BYTE *)this + 16) & 0x7F) + 1,  (const ot::Mac::KeyMaterial *)&v9,  (const ot::Mac::KeyMaterial *)&v10,  (const ot::Mac::KeyMaterial *)&v8);
  ot::KeyManager::ComputeTrelKey(this, *((_DWORD *)this + 4), (ot::Mac::Key *)&v7);
  ot::Mac::KeyMaterial::SetFrom((__n128 *)((char *)this + 52), &v7);
}

void ot::KeyManager::ComputeKeys(ot::KeyManager *this, unsigned int a2, ot::KeyManager::HashKeys *a3)
{
  __n128 v10 = this;
  unsigned int v9 = a2;
  __n128 v8 = a3;
  ot::Crypto::HmacSha256::HmacSha256((ot::Crypto::HmacSha256 *)v7);
  ot::Crypto::Key::Set((uint64_t)v5, (const unsigned __int8 *)this, 16);
  ot::Crypto::HmacSha256::Start((ot::Crypto::HmacSha256 *)v7, (const ot::Crypto::Key *)v5);
  ot::Encoding::BigEndian::WriteUint32(v9, v6, v3);
  ot::Crypto::HmacSha256::Update<unsigned char [4]>((ot::Crypto::HmacSha256 *)v7, (uint64_t)v6);
  ot::Crypto::HmacSha256::Update<unsigned char [6]>( (ot::Crypto::HmacSha256 *)v7,  (uint64_t)&ot::KeyManager::kThreadString);
  ot::Crypto::HmacSha256::Finish((ot::Crypto::HmacSha256 *)v7, v8);
  ot::Crypto::HmacSha256::~HmacSha256((ot::Crypto::HmacSha256 *)v7);
}

uint64_t ot::Crypto::HmacSha256::Update<unsigned char [4]>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 4u);
}

{
  return __ZN2ot6Crypto10HmacSha2566UpdateIA4_hEEvRKT_(a1, a2);
}

uint64_t ot::Crypto::HmacSha256::Update<unsigned char [6]>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 6u);
}

{
  return __ZN2ot6Crypto10HmacSha2566UpdateIA6_hEEvRKT_(a1, a2);
}

void ot::KeyManager::ComputeTrelKey(ot::KeyManager *this, unsigned int a2, ot::Mac::Key *a3)
{
  unsigned int v9 = this;
  unsigned int v8 = a2;
  __n128 v7 = (char *)a3;
  ot::Crypto::HkdfSha256::HkdfSha256((ot::Crypto::HkdfSha256 *)v6);
  ot::Crypto::Key::Set((uint64_t)v5, (const unsigned __int8 *)this, 16);
  ot::Encoding::BigEndian::WriteUint32(v8, v10, v3);
  qmemcpy(v11, "ThreadSequenceMasterKey", sizeof(v11));
  ot::Crypto::HkdfSha256::Extract((ot::Crypto::HkdfSha256 *)v6, v10, 27, (const ot::Crypto::Key *)v5);
  ot::Crypto::HkdfSha256::Expand((ot::Crypto::HkdfSha256 *)v6, ot::KeyManager::kTrelInfoString, 0x12u, v7, 0x10u);
  ot::Crypto::HkdfSha256::~HkdfSha256((ot::Crypto::HkdfSha256 *)v6);
}

  ;
}

uint64_t ot::KeyManager::HashKeys::GetMacKey(ot::KeyManager::HashKeys *this)
{
  return (uint64_t)this + 16;
}

{
  return __ZNK2ot10KeyManager8HashKeys9GetMacKeyEv(this);
}

uint64_t ot::KeyManager::SetCurrentKeySequence(ot::KeyManager *this, int a2)
{
  if (a2 == *((_DWORD *)this + 4))
  {
    uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    return ot::Notifier::SignalIfFirst(v2, 256LL);
  }

  if (a2 == *((_DWORD *)this + 4) + 1)
  {
    uint64_t result = ot::Timer::IsRunning((ot::KeyManager *)((char *)this + 120));
    if ((result & 1) != 0)
    {
      if ((*((_BYTE *)this + 112) & 1) != 0)
      {
        if (*((_DWORD *)this + 26) < *((_DWORD *)this + 27)) {
          return result;
        }
        ot::KeyManager::StartKeyRotationTimer(this);
      }

      *((_BYTE *)this + 11ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
    }
  }

  *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  ot::KeyManager::UpdateKeyMaterial(this);
  ot::KeyManager::SetAllMacFrameCounters(this, 0, 0);
  *((_DWORD *)this + 23)  = 0;
  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v4, 256LL);
}

uint64_t ot::KeyManager::SetAllMacFrameCounters(ot::KeyManager *this, unsigned int a2, char a3)
{
  char v6 = a3 & 1;
  ot::Mac::LinkFrameCounters::SetAll((_DWORD *)this + 21, a2);
  uint64_t v3 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::SetFrameCounter(v3, a2, v6 & 1);
}

uint64_t ot::KeyManager::GetTemporaryMleKey(ot::KeyManager *this, unsigned int a2)
{
  return (uint64_t)this + 36;
}

uint64_t ot::KeyManager::GetTemporaryTrelMacKey(ot::KeyManager *this, unsigned int a2)
{
  return (uint64_t)this + 68;
}

void ot::KeyManager::MacFrameCounterUsed(ot::KeyManager *this, unsigned int a2)
{
  if (ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 84)) <= a2)
  {
    ot::Mac::LinkFrameCounters::Set154((_DWORD *)this + 21, a2 + 1);
    if (ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 84)) >= *((_DWORD *)this + 24))
    {
      uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::Store(v2);
      IgnoreError();
    }
  }

_DWORD *ot::Mac::LinkFrameCounters::Set154(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot3Mac17LinkFrameCounters6Set154Ej(this, a2);
}

void ot::KeyManager::Increment154MacFrameCounter(ot::KeyManager *this)
{
  if (ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 84)) >= *((_DWORD *)this + 24))
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::Store(v1);
    IgnoreError();
  }

_DWORD *ot::Mac::LinkFrameCounters::Increment154(_DWORD *this)
{
  return this;
}

{
  return __ZN2ot3Mac17LinkFrameCounters12Increment154Ev(this);
}

void ot::KeyManager::IncrementTrelMacFrameCounter(ot::KeyManager *this)
{
  if (ot::Mac::LinkFrameCounters::GetTrel((ot::KeyManager *)((char *)this + 84)) >= *((_DWORD *)this + 24))
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::Store(v1);
    IgnoreError();
  }

uint64_t ot::Mac::LinkFrameCounters::IncrementTrel(uint64_t this)
{
  return this;
}

{
  return __ZN2ot3Mac17LinkFrameCounters13IncrementTrelEv(this);
}

void ot::KeyManager::IncrementMleFrameCounter(ot::KeyManager *this)
{
  if (++*((_DWORD *)this + 23) >= *((_DWORD *)this + 25))
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::Store(v1);
    IgnoreError();
  }

void ot::KeyManager::LogMacFrameCounters(ot::KeyManager *this)
{
  uint64_t v15 = this;
  __int16 v14 = 90;
  ot::String<(unsigned short)90>::String((uint64_t)v16);
  ot::StringWriter::Append((ot::StringWriter *)v16, "Frame counters");
  int v1 = ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 84));
  ot::StringWriter::Append((ot::StringWriter *)v16, ", 15.4 (local): %d", v1);
  Trel  = ot::Mac::LinkFrameCounters::GetTrel((ot::KeyManager *)((char *)this + 84));
  ot::StringWriter::Append((ot::StringWriter *)v16, ", Trel (local): %d", Trel);
  ot::StringWriter::Append((ot::StringWriter *)v16, ", 15.4 (Radio): ");
  unsigned int v13 = 0;
  uint64_t v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  MacFrameCounter  = ot::Radio::GetMacFrameCounter(v3, &v13);
  if (MacFrameCounter) {
    ot::StringWriter::Append((ot::StringWriter *)v16, "Error %d", MacFrameCounter);
  }
  else {
    ot::StringWriter::Append((ot::StringWriter *)v16, "%d", v13);
  }
  char v10 = ot::String<(unsigned short)90>::AsCString((uint64_t)v16);
  ot::Mac::LinkFrameCounters::GetMaximum((ot::KeyManager *)((char *)this + 84));
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"KeyManager", "%s, Max: %d", v4, v5, v6, v7, v8, v9, v10);
}

uint64_t ot::String<(unsigned short)90>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 90);
  return a1;
}

uint64_t ot::Radio::GetMacFrameCounter(ot::Radio *this, unsigned int *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetMacFrameCounter((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio18GetMacFrameCounterEPj(this, a2);
}

uint64_t ot::String<(unsigned short)90>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt90EE9AsCStringEv(a1);
}

void ot::KeyManager::SetSecurityPolicy( ot::KeyManager *this, const ot::SecurityPolicy *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)a2)
  {
    uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Update<ot::SecurityPolicy>(v8, (_DWORD *)this + 45, a2, 0x100000LL);
    IgnoreError();
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"KeyManager",  "Key Rotation Time too small: %d",  a3,  a4,  a5,  a6,  a7,  a8,  *(_WORD *)a2);
  }

uint64_t ot::Notifier::Update<ot::SecurityPolicy>(void *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::SecurityPolicy>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v6;
}

{
  return __ZN2ot8Notifier6UpdateINS_14SecurityPolicyEEE7otErrorRT_RKS4_NS_5EventE(a1, a2, a3, a4);
}

__n128 ot::KeyManager::GetNetworkKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2  = *a1;
  return result;
}

__n128 ot::KeyManager::GetPskc(__n128 *a1, __n128 *a2)
{
  __n128 result = a1[9];
  *a2  = result;
  return result;
}

uint64_t ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
  return ot::KeyManager::HandleKeyRotationTimer(v2);
}

ot::LinkMetrics::Initiator *ot::LinkMetrics::Initiator::Initiator( ot::LinkMetrics::Initiator *this, ot::Instance *a2)
{
  return this;
}

{
  ot::LinkMetrics::Initiator::Initiator(this, a2);
  return this;
}

uint64_t ot::LinkMetrics::Initiator::Query( ot::LinkMetrics::Initiator *this, const ot::Ip6::Address *a2, char a3, const ot::LinkMetrics::Metrics *a4)
{
  uint64_t v15 = this;
  __int16 v14 = a2;
  char v13 = a3;
  uint64_t v12 = a4;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(this, a2, &v10);
  if (!Neighbor)
  {
    ot::Clearable<ot::LinkMetrics::Initiator::QueryInfo>::Clear((uint64_t)&v7);
    char v7 = v13;
    if (v12) {
      char v9 = ot::LinkMetrics::Metrics::ConvertToTypeIds(v12, v8);
    }
    if (v13 && v9)
    {
      return 7;
    }

    else
    {
      uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      return ot::Mle::Mle::SendDataRequestForLinkMetricsReport(v4, v14, (uint64_t)&v7);
    }
  }

  return Neighbor;
}

uint64_t ot::LinkMetrics::Initiator::FindNeighbor( ot::LinkMetrics::Initiator *this, const ot::Ip6::Address *a2, ot::Neighbor **a3)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  char v10 = a3;
  unsigned int v9 = 19;
  ot::Mac::Address::Address((ot::Mac::Address *)v8);
  *char v10 = 0LL;
  if (ot::Ip6::Address::IsLinkLocal(v11))
  {
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
    ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(Iid, (ot::Mac::Address *)v8);
    uint64_t v4 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    uint64_t Neighbor = ot::NeighborTable::FindNeighbor(v4, (ot::Mac::Address *)v8, 1);
    *char v10 = (ot::Neighbor *)Neighbor;
    if (*v10)
    {
      else {
        return 27;
      }
    }
  }

  return v9;
}

uint64_t ot::Clearable<ot::LinkMetrics::Initiator::QueryInfo>::Clear(uint64_t result)
{
  *(_DWORD *)__n128 result = 0;
  *(_WORD *)(result + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_11LinkMetrics9Initiator9QueryInfoEE5ClearEv(result);
}

uint64_t ot::LinkMetrics::Initiator::AppendLinkMetricsQueryTlv(uint64_t a1, ot::Message *a2, uint64_t a3)
{
  uint64_t v10 = a1;
  unsigned int v9 = a2;
  uint64_t v8 = a3;
  OptionsSub  = 0;
  ot::Tlv::SetType(v6, 87);
  if (*(_BYTE *)(v8 + 5)) {
    char v4 = *(_BYTE *)(v8 + 5) + 2;
  }
  else {
    char v4 = 0;
  }
  ot::Tlv::SetLength((uint64_t)v6, v4 + 3);
  OptionsSub  = ot::Message::Append<ot::Tlv>(v9, v6);
  if (!OptionsSub)
  {
    OptionsSub  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>((uint64_t)v9, *(_BYTE *)v8);
    if (!OptionsSub)
    {
      if (*(_BYTE *)(v8 + 5))
      {
        ot::LinkMetrics::QueryOptionsSubTlv::Init((ot::LinkMetrics::QueryOptionsSubTlv *)v5);
        ot::Tlv::SetLength((uint64_t)v5, *(_BYTE *)(v8 + 5));
        OptionsSub  = ot::Message::Append<ot::LinkMetrics::QueryOptionsSubTlv>(v9, v5);
        if (!OptionsSub) {
          return ot::Message::AppendBytes(v9, (char *)(v8 + 1), *(unsigned __int8 *)(v8 + 5));
        }
      }
    }
  }

  return OptionsSub;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 1, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh1EhEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::LinkMetrics::QueryOptionsSubTlv::Init(ot::LinkMetrics::QueryOptionsSubTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 0);
}

{
  return __ZN2ot11LinkMetrics18QueryOptionsSubTlv4InitEv(this);
}

uint64_t ot::Message::Append<ot::LinkMetrics::QueryOptionsSubTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_11LinkMetrics18QueryOptionsSubTlvEEE7otErrorRKT_(a1, a2);
}

void ot::LinkMetrics::Initiator::HandleReport( ot::LinkMetrics::Initiator *this, const ot::Message *a2, unsigned __int16 a3, __int16 a4, const ot::Ip6::Address *a5)
{
  v67  = this;
  v66  = a2;
  v65  = a3;
  v64  = a4;
  v63  = a5;
  v62  = 0;
  v61  = a3;
  v60  = a3 + a4;
  v59  = 0;
  v58  = 0;
  if (ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::IsSet(this))
  {
    ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear((uint64_t)v51);
    while (v61 < (int)v60)
    {
      v62  = ot::Message::Read<ot::Tlv>(v66, v61, v57);
      if (v62) {
        goto LABEL_40;
      }
      uint64_t v44 = v61 + 2LL;
      unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v57);
      if (v44 + (unint64_t)Length > v60)
      {
        v62  = 6;
        goto LABEL_40;
      }

      int Type = ot::Tlv::GetType((ot::Tlv *)v57);
      if (Type)
      {
        if (Type == 5)
        {
          if ((v59 & 1) != 0 || (v58 & 1) != 0)
          {
            v62  = 2;
            goto LABEL_40;
          }

          v62  = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(v66, v61, &v50);
          if (v62) {
            goto LABEL_40;
          }
          v59  = 1;
        }
      }

      else
      {
        if ((v59 & 1) != 0)
        {
          v62  = 2;
          goto LABEL_40;
        }

        v62  = ot::Message::Read(v66, v61, v56, 4u);
        if (v62) {
          goto LABEL_40;
        }
        if (!ot::LinkMetrics::ReportSubTlv::IsValid((ot::LinkMetrics::ReportSubTlv *)v56))
        {
          v62  = 6;
          goto LABEL_40;
        }

        v58  = 1;
        MetricsTypeId  = ot::LinkMetrics::ReportSubTlv::GetMetricsTypeId((ot::LinkMetrics::ReportSubTlv *)v56);
        if (!ot::LinkMetrics::TypeId::IsExtended((ot::LinkMetrics::TypeId *)MetricsTypeId))
        {
          if (ot::LinkMetrics::TypeId::GetValueLength((ot::LinkMetrics::TypeId *)MetricsTypeId) > 1uLL)
          {
            v62  = ot::Message::Read<ot::LinkMetrics::ReportSubTlv>(v66, v61, v56);
            if (v62) {
              goto LABEL_40;
            }
          }

          switch(MetricsTypeId)
          {
            case 9u:
              v51[0]  = v51[0] & 0xFD | 2;
              MetricsValue8  = ot::LinkMetrics::ReportSubTlv::GetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v56);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkMetrics",  " - LQI: %u (Exponential Moving Average)",  v13,  v14,  v15,  v16,  v17,  v18,  MetricsValue8);
              break;
            case 0xAu:
              v51[0]  = v51[0] & 0xFB | 4;
              unsigned __int8 v19 = ot::LinkMetrics::ReportSubTlv::GetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v56);
              v54  = ot::LinkMetrics::ScaleRawValueToLinkMargin((ot::LinkMetrics *)v19);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkMetrics",  " - Margin: %u (dB) (Exponential Moving Average)",  v20,  v21,  v22,  v23,  v24,  v25,  v54);
              break;
            case 0xBu:
              v51[0]  = v51[0] & 0xF7 | 8;
              unsigned __int8 v26 = ot::LinkMetrics::ReportSubTlv::GetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v56);
              v55  = ot::LinkMetrics::ScaleRawValueToRssi((ot::LinkMetrics *)v26);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkMetrics",  " - RSSI: %u (dBm) (Exponential Moving Average)",  v27,  v28,  v29,  v30,  v31,  v32,  v55);
              break;
            case 0x40u:
              v51[0]  = v51[0] & 0xFE | 1;
              MetricsValue32  = ot::LinkMetrics::ReportSubTlv::GetMetricsValue32((ot::LinkMetrics::ReportSubTlv *)v56);
              char v6 = ot::ToUlong(MetricsValue32);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkMetrics",  " - PDU Counter: %lu (Count/Summation)",  v7,  v8,  v9,  v10,  v11,  v12,  v6);
              break;
          }
        }
      }

      unsigned __int8 v33 = ot::Tlv::GetLength((ot::Tlv *)v57);
      v61 += v33 + 2;
    }

    if ((v59 & 1) != 0 || (v58 & 1) != 0)
    {
      v48  = v63;
      if ((v59 & 1) != 0) {
        uint64_t v42 = 0LL;
      }
      else {
        uint64_t v42 = v51;
      }
      int v47 = v42;
      if ((v59 & 1) != 0) {
        unsigned __int8 v41 = v50;
      }
      else {
        unsigned __int8 v41 = 0;
      }
      unsigned __int8 v46 = v41;
      ot::Callback<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,ot::LinkMetrics::MetricsValues *,ot::LinkMetrics::Status>( (uint64_t)this,  &v48,  &v47,  &v46);
    }
  }

BOOL ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::IsSet( void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPK12otIp6AddressPK19otLinkMetricsValueshPvEE5IsSetEv(a1);
}

uint64_t ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear(uint64_t result)
{
  *(void *)__n128 result = 0LL;
  *(_DWORD *)(result + 8)  = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_11LinkMetrics13MetricsValuesEE5ClearEv(result);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>( ot::Tlv *a1, unsigned __int16 a2, _BYTE *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh5EhEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

BOOL ot::LinkMetrics::ReportSubTlv::IsValid(ot::LinkMetrics::ReportSubTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2u;
}

{
  return __ZNK2ot11LinkMetrics12ReportSubTlv7IsValidEv(this);
}

uint64_t ot::LinkMetrics::ReportSubTlv::GetMetricsTypeId(ot::LinkMetrics::ReportSubTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot11LinkMetrics12ReportSubTlv16GetMetricsTypeIdEv(this);
}

BOOL ot::LinkMetrics::TypeId::IsExtended(ot::LinkMetrics::TypeId *this)
{
  return (char)this < 0;
}

{
  return __ZN2ot11LinkMetrics6TypeId10IsExtendedEh(this);
}

uint64_t ot::LinkMetrics::TypeId::GetValueLength(ot::LinkMetrics::TypeId *this)
{
  unsigned __int8 v1 = 4;
  return v1;
}

{
  return __ZN2ot11LinkMetrics6TypeId14GetValueLengthEh(this);
}

uint64_t ot::Message::Read<ot::LinkMetrics::ReportSubTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 7u);
}

{
  return __ZNK2ot7Message4ReadINS_11LinkMetrics12ReportSubTlvEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::LinkMetrics::ReportSubTlv::GetMetricsValue32(ot::LinkMetrics::ReportSubTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 3));
}

{
  return __ZNK2ot11LinkMetrics12ReportSubTlv17GetMetricsValue32Ev(this);
}

uint64_t ot::LinkMetrics::ReportSubTlv::GetMetricsValue8(ot::LinkMetrics::ReportSubTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot11LinkMetrics12ReportSubTlv16GetMetricsValue8Ev(this);
}

uint64_t ot::LinkMetrics::ScaleRawValueToLinkMargin(ot::LinkMetrics *this)
{
  return ot::DivideAndRoundToClosest<unsigned short>(130 * this, 0xFFu);
}

uint64_t ot::LinkMetrics::ScaleRawValueToRssi(ot::LinkMetrics *this)
{
  unsigned int v2 = ot::DivideAndRoundToClosest<int>(130 * this, 255) - 130;
  return (char)ot::ClampToInt8<int>(v2);
}

uint64_t ot::Callback<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,ot::LinkMetrics::MetricsValues *,ot::LinkMetrics::Status>( uint64_t a1, void *a2, void *a3, unsigned __int8 *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK12otIp6AddressPK19otLinkMetricsValueshPvELNS_23CallbackContextPositionE1EE6InvokeIJPKNS_3Ip67AddressEPNS_11LinkMetrics13MetricsValuesENSH_6StatusEEEEvDpOT_( a1,  a2,  a3,  a4);
}

uint64_t ot::LinkMetrics::Initiator::SendMgmtRequestForwardTrackingSeries( ot::LinkMetrics::Initiator *this, __n128 *a2, char a3, const ot::LinkMetrics::SeriesFlags *a4, const ot::LinkMetrics::Metrics *a5)
{
  unsigned __int8 v26 = this;
  uint64_t v25 = a2;
  char v24 = a3;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  char v19 = 0;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(this, (const ot::Ip6::Address *)a2, &v20);
  if (!Neighbor)
  {
    if (v24)
    {
      ot::LinkMetrics::FwdProbingRegSubTlv::Init((ot::LinkMetrics::FwdProbingRegSubTlv *)v18);
      ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesId((uint64_t)v18, v24);
      char v5 = ot::LinkMetrics::SeriesFlags::ConvertToMask(v23);
      ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesFlagsMask((uint64_t)v18, v5);
      if (v22)
      {
        uint64_t v16 = v22;
        TypeIds  = (unsigned __int8 *)ot::LinkMetrics::FwdProbingRegSubTlv::GetTypeIds((ot::LinkMetrics::FwdProbingRegSubTlv *)v18);
        char v19 = ot::LinkMetrics::Metrics::ConvertToTypeIds(v16, TypeIds);
      }

      ot::Tlv::SetLength((uint64_t)v18, v19 + 2);
      uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned int Neighbor = ot::Mle::Mle::SendLinkMetricsManagementRequest(v7, v25, (const ot::Tlv *)v18);
    }

    else
    {
      unsigned int Neighbor = 7;
    }
  }

  char v8 = ot::ErrorToString(Neighbor);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkMetrics",  "SendMgmtRequestForwardTrackingSeries, error:%s, Series ID:%u",  v9,  v10,  v11,  v12,  v13,  v14,  v8);
  return Neighbor;
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::Init(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return __ZN2ot11LinkMetrics19FwdProbingRegSubTlv4InitEv(this);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesId(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return __ZN2ot11LinkMetrics19FwdProbingRegSubTlv11SetSeriesIdEh(this, a2);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesFlagsMask(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3)  = a2;
  return this;
}

{
  return __ZN2ot11LinkMetrics19FwdProbingRegSubTlv18SetSeriesFlagsMaskEh(this, a2);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::GetTypeIds(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return (uint64_t)this + 4;
}

{
  return __ZN2ot11LinkMetrics19FwdProbingRegSubTlv10GetTypeIdsEv(this);
}

uint64_t ot::LinkMetrics::Initiator::SendMgmtRequestEnhAckProbing( ot::LinkMetrics::Initiator *a1, __n128 *a2, char a3, const ot::LinkMetrics::Metrics *a4)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  char v15 = a3;
  uint64_t v14 = a4;
  char v11 = 0;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(a1, (const ot::Ip6::Address *)a2, &v12);
  if (!Neighbor)
  {
    if (v15 || !v14)
    {
      ot::LinkMetrics::EnhAckConfigSubTlv::Init((ot::LinkMetrics::EnhAckConfigSubTlv *)v10);
      ot::LinkMetrics::EnhAckConfigSubTlv::SetEnhAckFlags((uint64_t)v10, v15);
      if (v14)
      {
        uint64_t v7 = v14;
        TypeIds  = (unsigned __int8 *)ot::LinkMetrics::EnhAckConfigSubTlv::GetTypeIds((ot::LinkMetrics::EnhAckConfigSubTlv *)v10);
        char v11 = ot::LinkMetrics::Metrics::ConvertToTypeIds(v7, TypeIds);
      }

      ot::Tlv::SetLength((uint64_t)v10, v11 + 1);
      char v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
      unsigned int Neighbor = ot::Mle::Mle::SendLinkMetricsManagementRequest(v5, v16, (const ot::Tlv *)v10);
      if (v14)
      {
        ot::Neighbor::SetEnhAckProbingMetrics((uint64_t)v12, v14);
      }

      else
      {
        ot::Clearable<ot::LinkMetrics::Metrics>::Clear(&v9);
        ot::Neighbor::SetEnhAckProbingMetrics((uint64_t)v12, (const ot::LinkMetrics::Metrics *)&v9);
      }
    }

    else
    {
      return 7;
    }
  }

  return Neighbor;
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::Init(ot::LinkMetrics::EnhAckConfigSubTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 1);
}

{
  return __ZN2ot11LinkMetrics18EnhAckConfigSubTlv4InitEv(this);
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::SetEnhAckFlags(uint64_t result, char a2)
{
  *(_BYTE *)(result + ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return __ZN2ot11LinkMetrics18EnhAckConfigSubTlv14SetEnhAckFlagsENS0_11EnhAckFlagsE(result, a2);
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::GetTypeIds(ot::LinkMetrics::EnhAckConfigSubTlv *this)
{
  return (uint64_t)this + 3;
}

{
  return __ZN2ot11LinkMetrics18EnhAckConfigSubTlv10GetTypeIdsEv(this);
}

uint64_t ot::Neighbor::SetEnhAckProbingMetrics(uint64_t this, const ot::LinkMetrics::Metrics *a2)
{
  *(_BYTE *)(this + 128)  = *(_BYTE *)a2;
  return this;
}

{
  return __ZN2ot8Neighbor23SetEnhAckProbingMetricsERKNS_11LinkMetrics7MetricsE(this, a2);
}

_BYTE *ot::Clearable<ot::LinkMetrics::Metrics>::Clear(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_11LinkMetrics7MetricsEE5ClearEv(result);
}

uint64_t ot::LinkMetrics::Initiator::HandleManagementResponse( ot::LinkMetrics::Initiator *this, const ot::Message *a2, const ot::Ip6::Address *a3)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  char v15 = a3;
  TlvValueOffset  = 0;
  char v9 = 0;
  if (ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::IsSet((void *)this + 2))
  {
    TlvValueOffset  = ot::Tlv::FindTlvValueOffset(v16, (const ot::Message *)0x58, &v13, &v11, v3);
    if (!TlvValueOffset)
    {
      unsigned __int16 v12 = v13 + v11;
      while (v13 < (int)v12)
      {
        TlvValueOffset  = ot::Message::Read<ot::Tlv>(v16, v13, v8);
        if (TlvValueOffset) {
          return TlvValueOffset;
        }
        if (ot::Tlv::GetType((ot::Tlv *)v8) == 5)
        {
          if ((v9 & 1) != 0) {
            return 6;
          }
          TlvValueOffset  = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(v16, v13, &v10);
          if (TlvValueOffset) {
            return TlvValueOffset;
          }
          char v9 = 1;
        }

        unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v8);
        v13 += Length + 2;
      }

      if ((v9 & 1) != 0)
      {
        uint64_t v7 = v15;
        ot::Callback<void (*)(otIp6Address const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,unsigned char &>( (uint64_t)this + 16,  &v7,  &v10);
      }

      else
      {
        return 6;
      }
    }
  }

  return TlvValueOffset;
}

BOOL ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPK12otIp6AddresshPvEE5IsSetEv(a1);
}

uint64_t ot::Callback<void (*)(otIp6Address const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,unsigned char &>( uint64_t a1, void *a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK12otIp6AddresshPvELNS_23CallbackContextPositionE1EE6InvokeIJPKNS_3Ip67AddressERhEEEvDpOT_( a1,  a2,  a3);
}

uint64_t ot::LinkMetrics::Initiator::SendLinkProbe( ot::LinkMetrics::Initiator *this, const ot::Ip6::Address *a2, unsigned __int8 a3, unsigned __int8 a4)
{
  char v19 = this;
  uint64_t v18 = a2;
  unsigned __int8 v17 = a3;
  unsigned __int8 v16 = a4;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(this, a2, &v14);
  if (!Neighbor)
  {
    if (v16 <= 0x40u && v17 && v17 != 255)
    {
      char v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned int Neighbor = ot::Mle::Mle::SendLinkProbe(v4, (__n128 *)v18, v17, v20, v16);
    }

    else
    {
      unsigned int Neighbor = 7;
    }
  }

  char v5 = ot::ErrorToString(Neighbor);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"LinkMetrics",  "SendLinkProbe, error:%s, Series ID:%u",  v6,  v7,  v8,  v9,  v10,  v11,  v5);
  return Neighbor;
}

uint64_t ot::LinkMetrics::Initiator::ProcessEnhAckIeData( ot::LinkMetrics::Initiator *this, const unsigned __int8 *a2, unsigned __int8 a3, const ot::Neighbor *a4)
{
  uint64_t v21 = this;
  uint64_t v20 = a2;
  unsigned __int8 v19 = a3;
  uint64_t v18 = a4;
  unsigned __int8 v16 = 0;
  uint64_t result = ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::IsSet((void *)this + 4);
  if ((result & 1) != 0)
  {
    EnhAckProbingMetrics  = (const ot::LinkMetrics::Metrics *)ot::Neighbor::GetEnhAckProbingMetrics(v18);
    ot::LinkMetrics::MetricsValues::SetMetrics(v17, EnhAckProbingMetrics);
    ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v17);
    if ((*v6 & 2) != 0 && v16 < (int)v19)
    {
      uint64_t v7 = v16++;
      v17[8]  = v20[v7];
    }

    ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v17);
    if ((*v8 & 4) != 0 && v16 < (int)v19)
    {
      uint64_t v9 = v16++;
      v17[9]  = ot::LinkMetrics::ScaleRawValueToLinkMargin((ot::LinkMetrics *)v20[v9]);
    }

    ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v17);
    if ((*v10 & 8) != 0 && v16 < (int)v19)
    {
      uint64_t v11 = v16++;
      v17[10]  = ot::LinkMetrics::ScaleRawValueToRssi((ot::LinkMetrics *)v20[v11]);
    }

    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v18);
    ExtAddress  = ot::Neighbor::GetExtAddress(v18);
    unsigned __int16 v13 = v17;
    return ot::Callback<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short,ot::Mac::ExtAddress const*,ot::LinkMetrics::MetricsValues *>( (uint64_t)this + 32,  &Rloc16,  &ExtAddress,  &v13);
  }

  return result;
}

BOOL ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::IsSet( void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvtPK12otExtAddressPK19otLinkMetricsValuesPvEE5IsSetEv(a1);
}

_BYTE *ot::LinkMetrics::MetricsValues::SetMetrics(_BYTE *this, const ot::LinkMetrics::Metrics *a2)
{
  *this  = *(_BYTE *)a2;
  return this;
}

{
  return __ZN2ot11LinkMetrics13MetricsValues10SetMetricsERKNS0_7MetricsE(this, a2);
}

uint64_t ot::Neighbor::GetEnhAckProbingMetrics(ot::Neighbor *this)
{
  return (uint64_t)this + 128;
}

  ;
}

{
  return __ZNK2ot8Neighbor23GetEnhAckProbingMetricsEv(this);
}

uint64_t ot::Callback<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short,ot::Mac::ExtAddress const*,ot::LinkMetrics::MetricsValues *>( uint64_t a1, unsigned __int16 *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvtPK12otExtAddressPK19otLinkMetricsValuesPvELNS_23CallbackContextPositionE1EE6InvokeIJtPKNS_3Mac10ExtAddressEPNS_11LinkMetrics13MetricsValuesEEEEvDpOT_( a1,  a2,  a3,  a4);
}

ot::LinkMetrics::Subject *ot::LinkMetrics::Subject::Subject( ot::LinkMetrics::Subject *this, ot::Instance *a2)
{
  return this;
}

{
  ot::LinkMetrics::Subject::Subject(this, a2);
  return this;
}

uint64_t *ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t *i;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  for (unint64_t i = a1 + 1; i != a1 + 193; i += 3)
    ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(a1, i);
  return a1;
}

uint64_t ot::LinkMetrics::Subject::AppendReport( ot::LinkMetrics::Subject *this, ot::Message *a2, const ot::Message *a3, ot::Neighbor *a4)
{
  int v47 = this;
  unsigned __int8 v46 = a2;
  uint64_t v45 = a3;
  uint64_t v44 = a4;
  TlvValueOffset  = 0;
  char v40 = 0;
  ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear((uint64_t)v32);
  TlvValueOffset  = ot::Tlv::FindTlvValueOffset(v45, (const ot::Message *)0x57, &Length, &v39, v4);
  if (!TlvValueOffset)
  {
    v37  = Length + v39;
    while (Length < (int)v37)
    {
      TlvValueOffset  = ot::Message::Read<ot::Tlv>(v45, Length, v42);
      if (TlvValueOffset) {
        goto LABEL_26;
      }
      int Type = ot::Tlv::GetType((ot::Tlv *)v42);
      if (Type == 1)
      {
        TlvValueOffset  = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(v45, Length, &v41);
        if (TlvValueOffset) {
          goto LABEL_26;
        }
        char v40 = 1;
      }

      else if (Type == 2)
      {
        uint64_t v28 = v45;
        unsigned __int16 v26 = Length + 2;
        int v25 = Length;
        int v27 = v25 + ot::Tlv::GetSize((ot::Tlv *)v42);
        ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v32);
        TlvValueOffset  = ot::LinkMetrics::Subject::ReadTypeIdsFromMessage(v28, (const ot::Message *)v26, v27, v5, v6);
        if (TlvValueOffset) {
          goto LABEL_26;
        }
      }

      Size  = ot::Tlv::GetSize((ot::Tlv *)v42);
      Length += Size;
    }

    if ((v40 & 1) != 0)
    {
      unsigned __int16 Length = ot::Message::GetLength(v46);
      ot::Tlv::SetType(v42, 89);
      TlvValueOffset  = ot::Message::Append<ot::Tlv>(v46, v42);
      if (!TlvValueOffset)
      {
        if (v41)
        {
          ot::Neighbor::GetForwardTrackingSeriesInfo(v44, (ot::LinkMetrics::SeriesInfo *)&v41);
          uint64_t v31 = v10;
          if (v10)
          {
            if (ot::LinkMetrics::SeriesInfo::GetPduCount(v10))
            {
              LinkMetrics  = (const ot::LinkMetrics::Metrics *)ot::LinkMetrics::SeriesInfo::GetLinkMetrics(v31);
              ot::LinkMetrics::MetricsValues::SetMetrics(v32, LinkMetrics);
              PduCount  = ot::LinkMetrics::SeriesInfo::GetPduCount(v31);
              AverageLqunint64_t i = ot::LinkMetrics::SeriesInfo::GetAverageLqi(v31);
              uint64_t v23 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              AverageRss  = ot::LinkMetrics::SeriesInfo::GetAverageRss(v31);
              v35  = ot::Mac::Mac::ComputeLinkMargin(v23, AverageRss);
              char v36 = ot::LinkMetrics::SeriesInfo::GetAverageRss(v31);
              TlvValueOffset  = ot::LinkMetrics::Subject::AppendReportSubTlvToMessage(v46, (ot::Message *)v32, v13);
              if (TlvValueOffset) {
                goto LABEL_26;
              }
            }

            else
            {
              TlvValueOffset  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>((uint64_t)v46, 4u);
              if (TlvValueOffset) {
                goto LABEL_26;
              }
            }
          }

          else
          {
            TlvValueOffset  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>((uint64_t)v46, 3u);
            if (TlvValueOffset) {
              goto LABEL_26;
            }
          }
        }

        else
        {
          LOBYTE(PduCount)  = ot::Message::GetPsduCount(v45);
          PduCount  = PduCount;
          AverageLqunint64_t i = ot::Message::GetAverageLqi(v45);
          char v24 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
          char v8 = ot::Message::GetAverageRss(v45);
          v35  = ot::Mac::Mac::ComputeLinkMargin(v24, v8);
          char v36 = ot::Message::GetAverageRss(v45);
          TlvValueOffset  = ot::LinkMetrics::Subject::AppendReportSubTlvToMessage(v46, (ot::Message *)v32, v9);
          if (TlvValueOffset) {
            goto LABEL_26;
          }
        }

        __int16 v14 = ot::Message::GetLength(v46);
        unsigned __int16 v39 = v14 - Length - 2;
        ot::Tlv::SetLength((uint64_t)v42, v14 - Length - 2);
        ot::Message::Write<ot::Tlv>(v46, Length, v42);
      }
    }

    else
    {
      TlvValueOffset  = 6;
    }
  }

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned char>>( ot::Tlv *a1, unsigned __int16 a2, _BYTE *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh1EhEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Subject::ReadTypeIdsFromMessage( ot::LinkMetrics::Subject *this, const ot::Message *a2, unsigned __int16 a3, _BYTE *a4, ot::LinkMetrics::Metrics *a5)
{
  uint64_t v9 = this;
  __int16 v8 = (__int16)a2;
  unsigned __int16 v7 = a3;
  *(void *)&v6[7]  = a4;
  *(_DWORD *)&v6[3]  = 0;
  ot::Clearable<ot::LinkMetrics::Metrics>::Clear(a4);
  *(_WORD *)&v6[1]  = v8;
  while (*(unsigned __int16 *)&v6[1] < (int)v7
       && !ot::Message::Read<unsigned char>(v9, *(unsigned __int16 *)&v6[1], v6))
  {
    switch(v6[0])
    {
      case 9:
        if ((**(_BYTE **)&v6[7] & 2) != 0)
        {
          *(_DWORD *)&v6[3]  = 6;
          return *(unsigned int *)&v6[3];
        }

        **(_BYTE **)&v6[7]  = **(_BYTE **)&v6[7] & 0xFD | 2;
        break;
      case 0xA:
        if ((**(_BYTE **)&v6[7] & 4) != 0)
        {
          *(_DWORD *)&v6[3]  = 6;
          return *(unsigned int *)&v6[3];
        }

        **(_BYTE **)&v6[7]  = **(_BYTE **)&v6[7] & 0xFB | 4;
        break;
      case 0xB:
        if ((**(_BYTE **)&v6[7] & 8) != 0)
        {
          *(_DWORD *)&v6[3]  = 6;
          return *(unsigned int *)&v6[3];
        }

        **(_BYTE **)&v6[7]  = **(_BYTE **)&v6[7] & 0xF7 | 8;
        break;
      case 0x40:
        if ((**(_BYTE **)&v6[7] & 1) != 0)
        {
          *(_DWORD *)&v6[3]  = 6;
          return *(unsigned int *)&v6[3];
        }

        **(_BYTE **)&v6[7]  = **(_BYTE **)&v6[7] & 0xFE | 1;
        break;
      default:
        else {
          **(_BYTE **)&v6[7]  = **(_BYTE **)&v6[7] & 0xEF | 0x10;
        }
        break;
    }

    ++*(_WORD *)&v6[1];
  }

  return *(unsigned int *)&v6[3];
}

uint64_t ot::Message::GetPsduCount(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::LqiAverager::GetCount((ot::LqiAverager *)(Metadata + 58));
}

{
  return __ZNK2ot7Message12GetPsduCountEv(this);
}

uint64_t ot::Message::GetAverageLqi(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::LqiAverager::GetAverage((ot::LqiAverager *)(Metadata + 58));
}

{
  return __ZNK2ot7Message13GetAverageLqiEv(this);
}

uint64_t ot::LinkMetrics::Subject::AppendReportSubTlvToMessage( ot::LinkMetrics::Subject *this, ot::Message *a2, const ot::LinkMetrics::MetricsValues *a3)
{
  uint64_t v9 = this;
  __int16 v8 = a2;
  unsigned int v7 = 0;
  ot::LinkMetrics::ReportSubTlv::Init((ot::LinkMetrics::ReportSubTlv *)v6);
  if ((*(_BYTE *)v8 & 1) == 0
    || (ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 64),
        ot::LinkMetrics::ReportSubTlv::SetMetricsValue32((ot::LinkMetrics::ReportSubTlv *)v6, *((_DWORD *)v8 + 1)),
        (unsigned int v7 = ot::Tlv::AppendTo((ot::Tlv *)v6, v9)) == 0))
  {
    if ((*(_BYTE *)v8 & 2) == 0
      || (ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 9),
          ot::LinkMetrics::ReportSubTlv::SetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v6, *((_BYTE *)v8 + 8)),
          (unsigned int v7 = ot::Tlv::AppendTo((ot::Tlv *)v6, v9)) == 0))
    {
      if ((*(_BYTE *)v8 & 4) == 0
        || (ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 10),
            char v3 = ot::LinkMetrics::ScaleLinkMarginToRawValue((ot::LinkMetrics *)*((unsigned __int8 *)v8 + 9)),
            ot::LinkMetrics::ReportSubTlv::SetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v6, v3),
            (unsigned int v7 = ot::Tlv::AppendTo((ot::Tlv *)v6, v9)) == 0))
      {
        if ((*(_BYTE *)v8 & 8) != 0)
        {
          ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 11);
          char v4 = ot::LinkMetrics::ScaleRssiToRawValue((ot::LinkMetrics *)*((char *)v8 + 10));
          ot::LinkMetrics::ReportSubTlv::SetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v6, v4);
          return ot::Tlv::AppendTo((ot::Tlv *)v6, v9);
        }
      }
    }
  }

  return v7;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 5, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh5EhEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetPduCount(ot::LinkMetrics::SeriesInfo *this)
{
  return *((unsigned int *)this + 4);
}

{
  return __ZNK2ot11LinkMetrics10SeriesInfo11GetPduCountEv(this);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetLinkMetrics(ot::LinkMetrics::SeriesInfo *this)
{
  return (uint64_t)this + 10;
}

{
  return __ZNK2ot11LinkMetrics10SeriesInfo14GetLinkMetricsEv(this);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetAverageLqi(ot::LinkMetrics::SeriesInfo *this)
{
  return ot::LqiAverager::GetAverage((ot::LinkMetrics::SeriesInfo *)((char *)this + 14));
}

{
  return __ZNK2ot11LinkMetrics10SeriesInfo13GetAverageLqiEv(this);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetAverageRss(ot::LinkMetrics::SeriesInfo *this)
{
  return (char)ot::RssAverager::GetAverage((ot::LinkMetrics::SeriesInfo *)((char *)this + 12));
}

{
  return __ZNK2ot11LinkMetrics10SeriesInfo13GetAverageRssEv(this);
}

uint64_t ot::Message::Write<ot::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return __ZN2ot7Message5WriteINS_3TlvEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Subject::HandleManagementRequest( ot::LinkMetrics::Subject *a1, ot::Message *a2, ot::Neighbor *a3, _BYTE *a4, unsigned __int16 *a5)
{
  uint64_t v31 = a1;
  uint64_t v30 = a2;
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  TlvValueOffset  = 0;
  TlvValueOffset  = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x58, &v26, &v23, a5);
  if (TlvValueOffset) {
    return TlvValueOffset;
  }
  unsigned __int16 v25 = v26 + v23;
  ot::Tlv::SetLength((uint64_t)v22, 0);
  ot::Tlv::SetLength((uint64_t)v21, 0);
  while (v26 < (int)v25)
  {
    TlvValueOffset  = ot::Message::Read<ot::Tlv>(v30, v26, v19);
    if (TlvValueOffset) {
      return TlvValueOffset;
    }
    int v15 = v26;
    Size  = ot::Tlv::GetSize((ot::Tlv *)v19);
    unsigned __int16 v13 = v26;
    unsigned __int16 v24 = v13 + ot::Tlv::GetSize((ot::Tlv *)v19);
    int Type = ot::Tlv::GetType((ot::Tlv *)v19);
    if (Type == 3)
    {
      uint64_t v17 = v22;
      unsigned __int16 v18 = 4;
    }

    else
    {
      if (Type != 7) {
        goto LABEL_20;
      }
      uint64_t v17 = v21;
      unsigned __int16 v18 = 3;
    }

    TlvValueOffset  = ot::Message::Read(v30, v26, v17, v18);
    if (TlvValueOffset) {
      return TlvValueOffset;
    }
    TlvValueOffset  = ot::LinkMetrics::Subject::ReadTypeIdsFromMessage( v30,  (const ot::Message *)(unsigned __int16)(v26 + v18),  v24,  &v20,  v6);
    if (TlvValueOffset) {
      return TlvValueOffset;
    }
LABEL_20:
    unsigned __int16 v26 = v24;
  }

  if (ot::Tlv::GetLength((ot::Tlv *)v22))
  {
    SeriesId  = ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesId((ot::LinkMetrics::FwdProbingRegSubTlv *)v22);
    SeriesFlagsMasunsigned __int16 k = ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesFlagsMask((ot::LinkMetrics::FwdProbingRegSubTlv *)v22);
    char v8 = ot::LinkMetrics::Subject::ConfigureForwardTrackingSeries( a1,  SeriesId,  SeriesFlagsMask,  (const ot::LinkMetrics::Metrics *)&v20,  v29);
    *uint64_t v28 = v8;
  }

  if (ot::Tlv::GetLength((ot::Tlv *)v21))
  {
    EnhAckFlags  = ot::LinkMetrics::EnhAckConfigSubTlv::GetEnhAckFlags((ot::LinkMetrics::EnhAckConfigSubTlv *)v21);
    char v10 = ot::LinkMetrics::Subject::ConfigureEnhAckProbing(a1, EnhAckFlags, (const ot::LinkMetrics::Metrics *)&v20, v29);
    *uint64_t v28 = v10;
  }

  return TlvValueOffset;
}

uint64_t ot::LinkMetrics::Subject::ConfigureForwardTrackingSeries( ot::LinkMetrics::Subject *this, unsigned __int8 a2, char a3, const ot::LinkMetrics::Metrics *a4, ot::Neighbor *a5)
{
  int v15 = this;
  unsigned __int8 v14 = a2;
  unsigned __int8 v10 = 0;
  if (a2)
  {
    if (a3)
    {
      ot::Neighbor::GetForwardTrackingSeriesInfo(a5, (ot::LinkMetrics::SeriesInfo *)&v14);
      if (v5)
      {
        return 2;
      }

      else
      {
        char v8 = (ot::LinkMetrics::SeriesInfo *)ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Allocate((uint64_t *)this + 1);
        if (v8)
        {
          ot::LinkMetrics::SeriesInfo::Init(v8, v14, a3, a4);
          ot::Neighbor::AddForwardTrackingSeriesInfo(a5, v8);
        }

        else
        {
          return 1;
        }
      }
    }

    else if (v14 == 255)
    {
      ot::Neighbor::RemoveAllForwardTrackingSeriesInfo(a5);
    }

    else
    {
      uint64_t v9 = (void *)ot::Neighbor::RemoveForwardTrackingSeriesInfo(a5, (ot::LinkMetrics::SeriesInfo *)&v14);
      if (v9) {
        ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free((uint64_t *)this + 1, v9);
      }
      else {
        return 3;
      }
    }
  }

  else
  {
    return -2;
  }

  return v10;
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesId(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot11LinkMetrics19FwdProbingRegSubTlv11GetSeriesIdEv(this);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesFlagsMask(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot11LinkMetrics19FwdProbingRegSubTlv18GetSeriesFlagsMaskEv(this);
}

uint64_t ot::LinkMetrics::Subject::ConfigureEnhAckProbing( ot::LinkMetrics::Subject *this, char a2, const ot::LinkMetrics::Metrics *a3, ot::Neighbor *a4)
{
  unsigned __int16 v18 = this;
  char v17 = a2;
  uint64_t v16 = a3;
  int v15 = a4;
  unsigned __int8 v14 = 0;
  int v13 = 0;
  if ((*(_BYTE *)a3 & 0x10) != 0)
  {
    return -2;
  }

  else
  {
    if (v17 == 1)
    {
      if ((*(_BYTE *)v16 & 1) != 0) {
        return -2;
      }
      if ((*(_BYTE *)v16 & 2) == 0 && (*(_BYTE *)v16 & 4) == 0 && (*(_BYTE *)v16 & 8) == 0) {
        return -2;
      }
      if ((*(_BYTE *)v16 & 2) != 0 && (*(_BYTE *)v16 & 4) != 0 && (*(_BYTE *)v16 & 8) != 0) {
        return -2;
      }
      char v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned __int8 v12 = *(_BYTE *)v16;
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v15);
      ExtAddress  = ot::Neighbor::GetExtAddress(v15);
      int v13 = ot::Radio::ConfigureEnhAckProbing(v8, v12, &Rloc16, ExtAddress);
    }

    else if (v17)
    {
      unsigned __int8 v14 = -2;
    }

    else
    {
      if ((*(_BYTE *)v16 & 2) != 0 || (*(_BYTE *)v16 & 4) != 0 || (*(_BYTE *)v16 & 8) != 0) {
        return -2;
      }
      unsigned int v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned __int8 v10 = *(_BYTE *)v16;
      unsigned __int16 v9 = ot::Neighbor::GetRloc16(v15);
      uint64_t v5 = ot::Neighbor::GetExtAddress(v15);
      int v13 = ot::Radio::ConfigureEnhAckProbing(v7, v10, &v9, v5);
    }

    if (v13) {
      return -2;
    }
  }

  return v14;
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::GetEnhAckFlags(ot::LinkMetrics::EnhAckConfigSubTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot11LinkMetrics18EnhAckConfigSubTlv14GetEnhAckFlagsEv(this);
}

uint64_t ot::LinkMetrics::Subject::HandleLinkProbe( ot::LinkMetrics::Subject *this, const ot::Message *a2, char *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v11 = this;
  unsigned __int8 v10 = a2;
  unsigned __int16 v9 = a3;
  TlvValueOffset  = 0;
  TlvValueOffset  = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x5A, &v7, &v6, a5);
  if (!TlvValueOffset)
  {
    if (v6) {
      return ot::Message::Read<unsigned char>(v10, v7, v9);
    }
    else {
      return 6;
    }
  }

  return TlvValueOffset;
}

_BYTE *ot::LinkMetrics::ReportSubTlv::Init(ot::LinkMetrics::ReportSubTlv *this)
{
  return ot::Tlv::SetType(this, 0);
}

{
  return __ZN2ot11LinkMetrics12ReportSubTlv4InitEv(this);
}

uint64_t ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return __ZN2ot11LinkMetrics12ReportSubTlv16SetMetricsTypeIdEh(this, a2);
}

uint64_t ot::LinkMetrics::ReportSubTlv::SetMetricsValue32( ot::LinkMetrics::ReportSubTlv *this, unsigned int a2)
{
  *(_DWORD *)((char *)this + 3)  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  return ot::Tlv::SetLength((uint64_t)this, 5);
}

{
  return __ZN2ot11LinkMetrics12ReportSubTlv17SetMetricsValue32Ej(this, a2);
}

uint64_t ot::LinkMetrics::ReportSubTlv::SetMetricsValue8(ot::LinkMetrics::ReportSubTlv *this, char a2)
{
  *((_BYTE *)this + 3)  = a2;
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return __ZN2ot11LinkMetrics12ReportSubTlv16SetMetricsValue8Eh(this, a2);
}

uint64_t ot::LinkMetrics::ScaleLinkMarginToRawValue(ot::LinkMetrics *this)
{
  unsigned __int16 v2 = 255 * ot::Min<unsigned char>(this, 0x82u);
  return ot::DivideAndRoundToClosest<unsigned short>(v2, 0x82u);
}

uint64_t ot::LinkMetrics::ScaleRssiToRawValue(ot::LinkMetrics *this)
{
  int v1 = ot::Clamp<int>((char)this, 0xFFFFFF7E, 0);
  return ot::DivideAndRoundToClosest<int>(255 * (v1 + 130), 130);
}

void *ot::LinkMetrics::Subject::Free(ot::LinkMetrics::Subject *this, ot::LinkMetrics::SeriesInfo *a2)
{
  return ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free((uint64_t *)this + 1, a2);
}

void *ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free(uint64_t *a1, void *a2)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(a1, a2);
}

{
  return __ZN2ot4PoolINS_11LinkMetrics10SeriesInfoELt64EE4FreeERS2_(a1, a2);
}

uint64_t ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Allocate(uint64_t *a1)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(a1);
}

{
  return __ZN2ot4PoolINS_11LinkMetrics10SeriesInfoELt64EE8AllocateEv(a1);
}

uint64_t ot::Radio::ConfigureEnhAckProbing( ot::Radio *a1, unsigned __int8 a2, unsigned __int16 *a3, uint64_t a4)
{
  InstancePtr  = ot::Radio::GetInstancePtr(a1);
  return otPlatRadioConfigureEnhAckProbing((uint64_t)InstancePtr, a2, *a3, a4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio22ConfigureEnhAckProbingE13otLinkMetricsRKtRKNS_3Mac10ExtAddressE(a1, a2, a3, a4);
}

uint64_t ot::DivideAndRoundToClosest<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  return (unsigned __int16)((a1 + a2 / 2) / a2);
}

{
  return __ZN2ot23DivideAndRoundToClosestItEET_S1_S1_(a1, a2);
}

uint64_t ot::Clamp<int>(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4 = ot::Max<int>(a1, a2);
  return ot::Min<int>(v4, a3);
}

{
  return __ZN2ot5ClampIiEET_S1_S1_S1_(a1, a2, a3);
}

uint64_t ot::DivideAndRoundToClosest<int>(int a1, int a2)
{
  return ((a1 + a2 / 2) / a2);
}

{
  return __ZN2ot23DivideAndRoundToClosestIiEET_S1_S1_(a1, a2);
}

uint64_t ot::ClampToInt8<int>(unsigned int a1)
{
  return (char)ot::Clamp<int>(a1, 0xFFFFFF80, 0x7Fu);
}

{
  return __ZN2ot11ClampToInt8IiEEaT_(a1);
}

uint64_t ot::LqiAverager::GetCount(ot::LqiAverager *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot11LqiAverager8GetCountEv(this);
}

uint64_t ot::LqiAverager::GetAverage(ot::LqiAverager *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot11LqiAverager10GetAverageEv(this);
}

void *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(uint64_t *a1, void *a2)
{
  uint64_t result = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(a2, *a1);
  *a1  = (uint64_t)a2;
  return result;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE4PushERS2_(a1, a2);
}

void *ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return __ZN2ot15LinkedListEntryINS_11LinkMetrics10SeriesInfoEE7SetNextEPS2_(result, a2);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(*a1);
  }
  return v2;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE3PopEv(a1);
}

uint64_t ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return __ZN2ot15LinkedListEntryINS_11LinkMetrics10SeriesInfoEE7GetNextEv(a1);
}

{
  return __ZNK2ot15LinkedListEntryINS_11LinkMetrics10SeriesInfoEE7GetNextEv(a1);
}

_WORD *ot::SuccessRateTracker::AddSample(_WORD *this, char a2, unsigned __int16 a3)
{
  if ((a2 & 1) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = 0xFFFF;
  }
  *this  = ((unsigned __int16)*this * (a3 - 1) + v3 + a3 / 2u) / a3;
  return this;
}

uint64_t ot::RssAverager::Add(ot::RssAverager *this, char a2)
{
  char v4 = a2;
  unsigned int v3 = 0;
  if (a2 == 127)
  {
    return 7;
  }

  else
  {
    if (a2 > 0) {
      char v4 = 0;
    }
    *(_WORD *)this  = *(_WORD *)this & 0x7FF | (((((unsigned __int16)(*(_WORD *)this >> 11) < 8u) + (*(_WORD *)this >> 11)) & 0x1F) << 11);
    *(_WORD *)this  = *(_WORD *)this & 0xF800 | (((*(_WORD *)this & 0x7FF) * ((*(_WORD *)this >> 11) - 1)
  }

  return v3;
}

uint64_t ot::RssAverager::GetAverage(ot::RssAverager *this)
{
  if (*(_WORD *)this >> 11)
  {
    char v2 = -((*(_WORD *)this & 0x7FF) >> 3);
    if ((*(_WORD *)this & 7u) >= 4) {
      --v2;
    }
  }

  else
  {
    return 127;
  }

  return v2;
}

ot::StringWriter *ot::RssAverager::ToString@<X0>(ot::RssAverager *this@<X0>, ot::StringWriter *a2@<X8>)
{
  uint64_t result = (ot::StringWriter *)ot::String<(unsigned short)10>::String((uint64_t)a2);
  if (*(_WORD *)this >> 11) {
    return ot::StringWriter::Append( a2,  "%d.%s",  -((*(_WORD *)this & 0x7FF) >> 3),  ot::kDigitsString[*(_WORD *)this & 7]);
  }
  return result;
}

uint64_t ot::String<(unsigned short)10>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 10);
  return a1;
}

uint64_t ot::LqiAverager::Add(ot::LqiAverager *this, unsigned __int8 a2)
{
  uint64_t result = ot::Min<unsigned char>(8u, *((_BYTE *)this + 1));
  *(_BYTE *)this  = (*(unsigned __int8 *)this * (result - 1) + a2) / result;
  return result;
}

_WORD *ot::LinkQualityInfo::Clear(ot::LinkQualityInfo *this)
{
  *((_BYTE *)this + 3)  = 127;
  ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 2);
  return ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 3);
}

uint64_t ot::LinkQualityInfo::SetLinkQuality(uint64_t result, char a2)
{
  *(_BYTE *)(result + ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return __ZN2ot15LinkQualityInfo14SetLinkQualityENS_11LinkQualityE(result, a2);
}

ot::LinkQualityInfo *ot::LinkQualityInfo::AddRss(ot::LinkQualityInfo *this, char a2)
{
  char v4 = this;
  LinkQuality  = -1;
  if (a2 != 127)
  {
    *((_BYTE *)this + 3)  = a2;
    if (ot::RssAverager::HasAverage(this)) {
      LinkQuality  = ot::LinkQualityInfo::GetLinkQuality(v4);
    }
    this  = (ot::LinkQualityInfo *)ot::RssAverager::Add(v4, a2);
    if (!(_DWORD)this)
    {
      LinkMargin  = ot::LinkQualityInfo::GetLinkMargin(v4);
      char v3 = ot::LinkQualityInfo::CalculateLinkQuality((ot::LinkQualityInfo *)LinkMargin, LinkQuality);
      return (ot::LinkQualityInfo *)ot::LinkQualityInfo::SetLinkQuality((uint64_t)v4, v3);
    }
  }

  return this;
}

BOOL ot::RssAverager::HasAverage(ot::RssAverager *this)
{
  return *(_WORD *)this >> 11 != 0;
}

{
  return __ZNK2ot11RssAverager10HasAverageEv(this);
}

uint64_t ot::LinkQualityInfo::GetLinkQuality(ot::LinkQualityInfo *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot15LinkQualityInfo14GetLinkQualityEv(this);
}

uint64_t ot::LinkQualityInfo::CalculateLinkQuality(ot::LinkQualityInfo *this, char a2)
{
  unsigned __int8 v3 = 0;
  unsigned __int8 v6 = 2;
  unsigned __int8 v5 = 10;
  unsigned __int8 v4 = 20;
  switch(a2)
  {
    case 0:
      unsigned __int8 v6 = 4;
      goto LABEL_6;
    case 1:
LABEL_6:
      unsigned __int8 v5 = 12;
      goto LABEL_7;
    case 2:
LABEL_7:
      unsigned __int8 v4 = 22;
      break;
  }

  if (this <= (int)v4)
  {
    if (this <= (int)v5)
    {
    }

    else
    {
      return 2;
    }
  }

  else
  {
    return 3;
  }

  return v3;
}

uint64_t ot::LinkQualityInfo::GetLinkMargin(ot::LinkQualityInfo *this)
{
  int v1 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  char NoiseFloor = ot::Mac::SubMac::GetNoiseFloor(v1);
  AverageRss  = ot::LinkQualityInfo::GetAverageRss(this);
  return ot::ComputeLinkMargin((ot *)NoiseFloor, AverageRss);
}

uint64_t ot::ComputeLinkMargin(ot *this, char a2)
{
  unsigned __int8 v3 = a2 - (_BYTE)this;
  return v3;
}

ot::StringWriter *ot::LinkQualityInfo::ToInfoString@<X0>( ot::LinkQualityInfo *this@<X0>, ot::StringWriter *a2@<X8>)
{
  unsigned __int8 v5 = (const char *)ot::String<(unsigned short)10>::AsCString((uint64_t)v8);
  LastRss  = ot::LinkQualityInfo::GetLastRss(this);
  LinkQuality  = ot::LinkQualityInfo::GetLinkQuality(this);
  return ot::StringWriter::Append(a2, "aveRss:%s, lastRss:%d, linkQuality:%d", v5, LastRss, LinkQuality);
}

uint64_t ot::String<(unsigned short)50>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 50);
  return a1;
}

uint64_t ot::String<(unsigned short)10>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt10EE9AsCStringEv(a1);
}

ot::StringWriter *ot::LinkQualityInfo::ToErrorRateInfoString@<X0>( ot::LinkQualityInfo *this@<X0>, ot::StringWriter *a2@<X8>)
{
  unsigned int v5 = ot::LinkQualityInfo::GetFrameErrorRatePercent(this) / 0x64;
  unsigned int v6 = ot::LinkQualityInfo::GetFrameErrorRatePercent(this) % 0x64;
  unsigned int v7 = ot::LinkQualityInfo::GetMessageErrorRatePercent(this) / 0x64;
  unsigned int v8 = ot::LinkQualityInfo::GetMessageErrorRatePercent(this) % 0x64;
  unsigned int v9 = ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(this) / 0x64;
  unsigned int v10 = ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(this) % 0x64;
  unsigned int v11 = ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(this) / 0x64;
  HomeKitMessageErrorRatePercent  = ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(this);
  return ot::StringWriter::Append( a2,  ", frameErrorRate:%d.%02d%%, messageErrorRate:%d.%02d%%, MatterMessageErrorRate:%d.%02d%%, HomeKitMessageErrorRate:%d.%02d%%",  v5,  v6,  v7,  v8,  v9,  v10,  v11,  HomeKitMessageErrorRatePercent % 0x64);
}

uint64_t ot::LinkQualityInfo::GetFrameErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 4));
}

{
  return __ZNK2ot15LinkQualityInfo24GetFrameErrorRatePercentEv(this);
}

uint64_t ot::LinkQualityInfo::GetMessageErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 6));
}

{
  return __ZNK2ot15LinkQualityInfo26GetMessageErrorRatePercentEv(this);
}

uint64_t ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 10));
}

{
  return __ZNK2ot15LinkQualityInfo32GetMatterMessageErrorRatePercentEv(this);
}

uint64_t ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 8));
}

{
  return __ZNK2ot15LinkQualityInfo33GetHomeKitMessageErrorRatePercentEv(this);
}

uint64_t ot::LinkQualityForLinkMargin(ot *this)
{
  return ot::LinkQualityInfo::CalculateLinkQuality((ot::LinkQualityInfo *)this, 255);
}

uint64_t ot::GetTypicalRssForLinkQuality(char a1, char a2)
{
  switch(a2)
  {
    case 1:
      char v3 = 5;
      break;
    case 2:
      char v3 = 15;
      break;
    case 3:
      char v3 = 50;
      break;
    default:
      char v3 = 0;
      break;
  }

  return (char)(v3 + a1);
}

uint64_t ot::CostForLinkQuality(unsigned __int8 a1)
{
  unsigned __int8 v2 = 16;
  if (a1 <= 3u) {
    return ot::CostForLinkQuality(ot::LinkQuality)::kCostsForLinkQuality[a1];
  }
  return v2;
}

ot::Lowpan::Lowpan *ot::Lowpan::Lowpan::Lowpan(ot::Lowpan::Lowpan *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Lowpan::Lowpan::Lowpan(this, a2);
  return this;
}

uint64_t ot::Lowpan::Lowpan::FindContextForId(ot::InstanceLocator *a1, char a2, ot::Ip6::Prefix *a3)
{
  char v3 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
  uint64_t result = ot::NetworkData::LeaderBase::GetContext(v3, a2, a3);
  if ((_DWORD)result) {
    return ot::Clearable<ot::Lowpan::Context>::Clear((uint64_t)a3);
  }
  return result;
}

uint64_t ot::Clearable<ot::Lowpan::Context>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8)  = 0LL;
  *(_DWORD *)(result + ot::Tlv::SetLength((uint64_t)this, 16) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_6Lowpan7ContextEE5ClearEv(result);
}

uint64_t ot::Lowpan::Lowpan::FindContextToCompressAddress( ot::InstanceLocator *a1, const ot::Ip6::Address *a2, ot::Ip6::Prefix *a3)
{
  char v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
  uint64_t result = ot::NetworkData::LeaderBase::GetContext(v3, a2, a3);
  if ((_DWORD)result || (*((_BYTE *)a3 + 18) & 1) == 0) {
    return ot::Clearable<ot::Lowpan::Context>::Clear((uint64_t)a3);
  }
  return result;
}

uint64_t ot::Lowpan::Lowpan::ComputeIid( ot::Mac::Address *a1, const ot::Ip6::Prefix *a2, ot::Ip6::InterfaceIdentifier *a3)
{
  unsigned int v7 = 0;
  int Type = ot::Mac::Address::GetType(a1);
  if (Type == 1)
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(a1);
    ot::Ip6::InterfaceIdentifier::SetToLocator(a3, Short);
LABEL_6:
    ot::Ip6::InterfaceIdentifier::ApplyPrefix(a3, a2);
    return v7;
  }

  if (Type == 2)
  {
    ot::Mac::Address::GetExtended(a1);
    ot::Ip6::InterfaceIdentifier::SetFromExtAddress(a3, v4);
    goto LABEL_6;
  }

  return 6;
}

uint64_t ot::Lowpan::Lowpan::CompressSourceIid( uint64_t a1, ot::Mac::Address *a2, ot::Ip6::Address *a3, const ot::Ip6::Prefix *a4, _WORD *a5, ot::FrameBuilder *a6)
{
  uint64_t v21 = a1;
  char v20 = a2;
  uint64_t v19 = a3;
  unsigned __int16 v18 = a4;
  char v17 = a5;
  uint64_t v16 = a6;
  unsigned int v15 = 0;
  ot::Lowpan::Lowpan::ComputeIid(a2, a4, (ot::Ip6::InterfaceIdentifier *)v14);
  IgnoreError();
  Iid  = (const void *)ot::Ip6::Address::GetIid(v19);
  if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v14, Iid))
  {
    *v17 |= 0x30u;
  }

  else
  {
    unsigned int v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
    if (ot::Ip6::InterfaceIdentifier::IsLocator(v7))
    {
      *v17 |= 0x20u;
      int v13 = v16;
      unsigned int v8 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
      Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(v8);
      return ot::FrameBuilder::AppendBigEndianUint16(v13, Locator);
    }

    else
    {
      *v17 |= 0x10u;
      unsigned __int8 v12 = v16;
      unsigned int v10 = (const void *)ot::Ip6::Address::GetIid(v19);
      return ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(v12, v10);
    }
  }

  return v15;
}

uint64_t ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 8u);
}

{
  return __ZN2ot12FrameBuilder6AppendINS_3Ip619InterfaceIdentifierEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::CompressDestinationIid( uint64_t a1, ot::Mac::Address *a2, ot::Ip6::Address *a3, const ot::Ip6::Prefix *a4, _WORD *a5, ot::FrameBuilder *a6)
{
  uint64_t v21 = a1;
  char v20 = a2;
  uint64_t v19 = a3;
  unsigned __int16 v18 = a4;
  char v17 = a5;
  uint64_t v16 = a6;
  unsigned int v15 = 0;
  ot::Lowpan::Lowpan::ComputeIid(a2, a4, (ot::Ip6::InterfaceIdentifier *)v14);
  IgnoreError();
  Iid  = (const void *)ot::Ip6::Address::GetIid(v19);
  if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v14, Iid))
  {
    *v17 |= 3u;
  }

  else
  {
    unsigned int v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
    if (ot::Ip6::InterfaceIdentifier::IsLocator(v7))
    {
      *v17 |= 2u;
      int v13 = v16;
      unsigned int v8 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
      Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(v8);
      return ot::FrameBuilder::AppendBigEndianUint16(v13, Locator);
    }

    else
    {
      *v17 |= 1u;
      unsigned __int8 v12 = v16;
      unsigned int v10 = (const void *)ot::Ip6::Address::GetIid(v19);
      return ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(v12, v10);
    }
  }

  return v15;
}

uint64_t ot::Lowpan::Lowpan::CompressMulticast( ot::Lowpan::Lowpan *this, const ot::Ip6::Address *a2, unsigned __int16 *a3, ot::FrameBuilder *a4)
{
  int v13 = this;
  unsigned __int8 v12 = (char *)a2;
  unsigned int v11 = a3;
  unsigned int v10 = a4;
  unsigned int appended = 0;
  *a3 |= 8u;
  for (unsigned int i = 2; i < 0x10uLL; ++i)
  {
    if (v12[i])
    {
      if (v12[1] == 2 && i >= 0xF)
      {
        *v11 |= 3u;
        return ot::FrameBuilder::AppendUint8(v10, v12[15]);
      }

      else if (i < 0xD)
      {
        if (i < 0xB)
        {
          ot::Lowpan::Lowpan::FindContextForId(this, 0, (ot::Ip6::Prefix *)v8);
          char Length = ot::Ip6::Prefix::GetLength((ot::Ip6::Prefix *)v8);
          if (v12[3] == Length && (ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)v8), !memcmp(v5, v12 + 4, 8uLL)))
          {
            *v11 |= 4u;
            unsigned int appended = ot::FrameBuilder::AppendBytes(v10, v12 + 1, 2u);
            if (!appended) {
              return ot::FrameBuilder::AppendBytes(v10, v12 + 12, 4u);
            }
          }

          else
          {
            return ot::FrameBuilder::Append<ot::Ip6::Address>(v10, v12);
          }
        }

        else
        {
          *v11 |= 1u;
          unsigned int appended = ot::FrameBuilder::AppendUint8(v10, v12[1]);
          if (!appended) {
            return ot::FrameBuilder::AppendBytes(v10, v12 + 11, 5u);
          }
        }
      }

      else
      {
        *v11 |= 2u;
        unsigned int appended = ot::FrameBuilder::AppendUint8(v10, v12[1]);
        if (!appended) {
          return ot::FrameBuilder::AppendBytes(v10, v12 + 13, 3u);
        }
      }

      return appended;
    }
  }

  return appended;
}

uint64_t ot::FrameBuilder::Append<ot::Ip6::Address>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 0x10u);
}

{
  return __ZN2ot12FrameBuilder6AppendINS_3Ip67AddressEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::Compress( ot::Lowpan::Lowpan *this, ot::Message *a2, const ot::Mac::Addresses *a3, ot::FrameBuilder *a4)
{
  unsigned __int8 v12 = this;
  unsigned int v11 = a2;
  unsigned int v10 = a3;
  unsigned int v9 = a4;
  unsigned int v8 = 0;
  unsigned __int8 v7 = -1;
  while (v7)
  {
    __int128 v6 = *(_OWORD *)v9;
    unsigned int v8 = ot::Lowpan::Lowpan::Compress(this, v11, v10, v9, &v7);
    if (!v8) {
      break;
    }
    *(_OWORD *)unsigned int v9 = v6;
  }

  return v8;
}

uint64_t ot::Lowpan::Lowpan::Compress( ot::Lowpan::Lowpan *this, ot::Message *a2, const ot::Mac::Addresses *a3, ot::FrameBuilder *a4, unsigned __int8 *a5)
{
  v57  = this;
  v56  = a2;
  v55  = a3;
  v54  = a4;
  v53  = a5;
  *(_WORD *)&v52[4]  = 0;
  *(_DWORD *)v52  = (unsigned __int16)ot::Message::GetOffset(a2);
  v51  = 24576;
  unsigned __int16 Length = 0;
  v48  = v49;
  unsigned __int8 v38 = 0;
  v37  = *v53;
  v34  = v56;
  Offset  = ot::Message::GetOffset(v56);
  *(_DWORD *)&v52[2]  = ot::Message::Read<ot::Ip6::Header>(v34, Offset, v49);
  if (!*(_DWORD *)&v52[2])
  {
    Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
    ot::Lowpan::Lowpan::FindContextToCompressAddress(this, Source, (ot::Ip6::Prefix *)v45);
    Destination  = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
    ot::Lowpan::Lowpan::FindContextToCompressAddress(this, Destination, (ot::Ip6::Prefix *)v42);
    unsigned __int16 Length = ot::FrameBuilder::GetLength(v54);
    *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendBigEndianUint16(v54, v51);
    if (!*(_DWORD *)&v52[2])
    {
      if (!v46 && !v43
        || (v51 |= 0x80u,
            (*(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v54, v43 | (16 * v46))) == 0))
      {
        char v39 = (4 * *v48) & 0x3C | ((int)v48[1] >> 6);
        char v40 = (4 * v48[1]) & 0xC0;
        if ((v48[1] & 0xF) != 0 || v48[2] || v48[3])
        {
          if (v39)
          {
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v54, v40 | v39);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v54, v48[1] & 0xF);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendBytes(v54, v48 + 2, 2u);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }

          else
          {
            v51 |= 0x800u;
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v54, v40 | (v48[1] & 0xF));
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendBytes(v54, v48 + 2, 2u);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
        }

        else if (v39 || v40)
        {
          v51 |= 0x1000u;
          *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v54, v40 | v39);
          if (*(_DWORD *)&v52[2]) {
            goto LABEL_65;
          }
        }

        else
        {
          v51 |= 0x1800u;
        }

        NextHeader  = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v49);
        if ((!NextHeader || NextHeader == 17 || NextHeader == 41) && v38 + 1 < v37)
        {
          v51 |= 0x400u;
        }

        else
        {
          v32  = v54;
          char v8 = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v49);
          *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v32, v8);
          if (*(_DWORD *)&v52[2]) {
            goto LABEL_65;
          }
        }

        HopLimit  = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v49);
        switch(HopLimit)
        {
          case 1:
            v51 |= 0x100u;
            break;
          case 64:
            v51 |= 0x200u;
            break;
          case 255:
            v51 |= 0x300u;
            break;
          default:
            uint64_t v30 = v54;
            char v9 = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v30, v9);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            break;
        }

        unsigned int v10 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
        if (ot::Ip6::Address::IsUnspecified(v10))
        {
          v51 |= 0x40u;
        }

        else
        {
          unsigned int v11 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
          if (ot::Ip6::Address::IsLinkLocal(v11))
          {
            uint64_t v29 = v55;
            unsigned __int8 v12 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressSourceIid( (uint64_t)this,  v29,  v12,  (const ot::Ip6::Prefix *)v45,  &v51,  v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }

          else if ((v47 & 1) != 0)
          {
            v51 |= 0x40u;
            uint64_t v28 = v55;
            int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressSourceIid( (uint64_t)this,  v28,  v13,  (const ot::Ip6::Prefix *)v45,  &v51,  v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }

          else
          {
            int v27 = v54;
            unsigned __int8 v14 = (const void *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::Append<ot::Ip6::Address>(v27, v14);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
        }

        unsigned int v15 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
        if (ot::Ip6::Address::IsMulticast(v15))
        {
          uint64_t v16 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
          *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressMulticast(this, v16, &v51, v54);
          if (*(_DWORD *)&v52[2]) {
            goto LABEL_65;
          }
        }

        else
        {
          char v17 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
          if (ot::Ip6::Address::IsLinkLocal(v17))
          {
            unsigned __int16 v26 = (const ot::Mac::Addresses *)((char *)v55 + 10);
            unsigned __int16 v18 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressDestinationIid( (uint64_t)this,  v26,  v18,  (const ot::Ip6::Prefix *)v42,  &v51,  v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }

          else if ((v44 & 1) != 0)
          {
            v51 |= 4u;
            unsigned __int16 v25 = (const ot::Mac::Addresses *)((char *)v55 + 10);
            uint64_t v19 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressDestinationIid( (uint64_t)this,  v25,  v19,  (const ot::Ip6::Prefix *)v42,  &v51,  v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }

          else
          {
            unsigned __int16 v24 = v54;
            char v20 = (const void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2]  = ot::FrameBuilder::Append<ot::Ip6::Address>(v24, v20);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
        }

        ++v38;
        ot::Message::MoveOffset(v56, 40);
        unsigned __int8 v41 = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v49);
        while (v38 < (int)v37)
        {
          if (v41)
          {
            if (v41 == 17)
            {
              *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressUdp(this, v56, v54);
            }

            else if (v41 == 41)
            {
              *(_DWORD *)&v52[2]  = ot::FrameBuilder::AppendUint8(v54, 238);
              if (!*(_DWORD *)&v52[2]) {
                *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::Compress(this, v56, v55, v54);
              }
            }

            break;
          }

          *(_DWORD *)&v52[2]  = ot::Lowpan::Lowpan::CompressExtensionHeader(this, v56, v54, &v41);
          if (*(_DWORD *)&v52[2]) {
            break;
          }
          ++v38;
        }
      }
    }
  }

uint64_t ot::Lowpan::Lowpan::CompressExtensionHeader( ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameBuilder *a3, unsigned __int8 *a4)
{
  unsigned __int16 v26 = this;
  unsigned __int16 v25 = a2;
  unsigned __int16 v24 = a3;
  unsigned __int16 v23 = a4;
  *(_WORD *)&v22[4]  = 0;
  *(_DWORD *)unsigned __int16 v22 = (unsigned __int16)ot::Message::GetOffset(a2);
  unsigned __int16 v19 = 0;
  Offset  = ot::Message::GetOffset(v25);
  *(_DWORD *)&BOOL v22[2] = ot::Message::Read<ot::Ip6::ExtensionHeader>(v25, Offset, v21);
  if (!*(_DWORD *)&v22[2])
  {
    ot::Message::MoveOffset(v25, 2);
    char v18 = -32;
    NextHeader  = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v21);
    if (NextHeader == 17 || NextHeader == 41)
    {
      v18 |= 1u;
    }

    else
    {
      *(_DWORD *)&BOOL v22[2] = ot::FrameBuilder::AppendUint8(v24, v18);
      if (*(_DWORD *)&v22[2]) {
        goto LABEL_24;
      }
      char v18 = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v21);
    }

    *(_DWORD *)&BOOL v22[2] = ot::FrameBuilder::AppendUint8(v24, v18);
    if (!*(_DWORD *)&v22[2])
    {
      unsigned __int16 v20 = ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v21) - 2;
      if (v20 <= 0xFFu)
      {
        if (!*v23 || *v23 == 60)
        {
          unsigned __int16 v17 = ot::Message::GetOffset(v25);
          unsigned __int16 v16 = v17 + v20;
          char v15 = 0;
          while (v17 < (int)v16)
          {
            *(_DWORD *)&BOOL v22[2] = ot::Ip6::Option::ParseFrom((ot::Ip6::Option *)v14, v25, v17, v16);
            if (*(_DWORD *)&v22[2]) {
              goto LABEL_24;
            }
            char v15 = 1;
            Size  = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v14);
            v17 += Size;
          }

          if ((v15 & 1) != 0 && ot::Ip6::Option::IsPadding((ot::Ip6::Option *)v14))
          {
            unsigned __int16 v19 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v14);
            v20 -= v19;
          }
        }

        unsigned __int16 v6 = ot::Message::GetOffset(v25);
        int v12 = v20 + v6 + v19;
        if (v12 <= (unsigned __int16)ot::Message::GetLength(v25))
        {
          unsigned __int8 v7 = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v21);
          *unsigned __int16 v23 = v7;
          *(_DWORD *)&BOOL v22[2] = ot::FrameBuilder::AppendUint8(v24, v20);
          if (!*(_DWORD *)&v22[2])
          {
            unsigned int v11 = v24;
            unsigned int v10 = v25;
            unsigned __int16 v8 = ot::Message::GetOffset(v25);
            *(_DWORD *)&BOOL v22[2] = ot::FrameBuilder::AppendBytesFromMessage(v11, v10, v8, v20);
            if (!*(_DWORD *)&v22[2]) {
              ot::Message::MoveOffset(v25, v20 + v19);
            }
          }
        }

        else
        {
          *(_DWORD *)&BOOL v22[2] = 6;
        }
      }

      else
      {
        *(_DWORD *)&BOOL v22[2] = 1;
      }
    }
  }

uint64_t ot::Lowpan::Lowpan::CompressUdp(ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameBuilder *a3)
{
  int v13 = this;
  int v12 = a2;
  unsigned int v11 = a3;
  *(_WORD *)&unsigned __int8 v10[4] = 0;
  *(_DWORD *)unsigned int v10 = (unsigned __int16)ot::Message::GetOffset(a2);
  Offset  = ot::Message::GetOffset(v12);
  *(_DWORD *)&v10[2]  = ot::Message::Read<ot::Ip6::Udp::Header>(v12, Offset, v9);
  if (!*(_DWORD *)&v10[2])
  {
    unsigned __int16 SourcePort = ot::Ip6::Udp::Header::GetSourcePort((ot::Ip6::Udp::Header *)v9);
    unsigned __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v9);
    if ((SourcePort & 0xFFF0) == 0xF0B0 && (DestinationPort & 0xFFF0) == 0xF0B0)
    {
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, 243);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, DestinationPort & 0xF | (16 * (SourcePort & 0xFu)));
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }

    else if ((SourcePort & 0xFF00) == 0xF000)
    {
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, 242);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, SourcePort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendBigEndianUint16(v11, DestinationPort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }

    else if ((DestinationPort & 0xFF00) == 0xF000)
    {
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, 241);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendBigEndianUint16(v11, SourcePort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, DestinationPort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }

    else
    {
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendUint8(v11, 240);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendBytes(v11, v9, 4u);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }

    unsigned __int16 v6 = v11;
    unsigned __int16 Checksum = ot::Ip6::Udp::Header::GetChecksum((ot::Ip6::Udp::Header *)v9);
    *(_DWORD *)&v10[2]  = ot::FrameBuilder::AppendBigEndianUint16(v6, Checksum);
    if (!*(_DWORD *)&v10[2]) {
      ot::Message::MoveOffset(v12, 8);
    }
  }

void *ot::FrameBuilder::Write<unsigned short>(ot::FrameBuilder *a1, unsigned __int16 a2, const void *a3)
{
  return ot::FrameBuilder::WriteBytes(a1, a2, a3, 2u);
}

{
  return __ZN2ot12FrameBuilder5WriteItEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Lowpan::Lowpan::DispatchToNextHeader(ot::Lowpan::Lowpan *this, char a2, unsigned __int8 *a3)
{
  unsigned int v5 = 0;
  if ((a2 & 0xF0) == 0xE0)
  {
    unint64_t v4 = a2 & 0xE;
    if (v4 <= 0xE) {
      __asm { BR              X8 }
    }

    return 6;
  }

  if ((a2 & 0xF8) != 0xF0) {
    return 6;
  }
  *a3  = 17;
  return v5;
}

uint64_t ot::Lowpan::Lowpan::DecompressBaseHeader( ot::Lowpan::Lowpan *this, ot::Ip6::Header *a2, BOOL *a3, const ot::Mac::Addresses *a4, ot::FrameData *a5)
{
  v53  = this;
  v52  = a2;
  v51  = a3;
  unsigned __int8 v50 = a4;
  unsigned __int8 v49 = a5;
  v48  = 6;
  char v45 = 0;
  char v44 = 0;
  if ((v47 & 0x80u) != 0)
  {
    char v45 = (int)v46 >> 4;
    char v44 = v46 & 0xF;
  }

  ot::Lowpan::Lowpan::FindContextForId(this, v45, (ot::Ip6::Prefix *)v43);
  ot::Lowpan::Lowpan::FindContextForId(this, v44, (ot::Ip6::Prefix *)v41);
  ot::Clearable<ot::Ip6::Header>::Clear(v52);
  ot::Ip6::Header::InitVersionTrafficClassFlow((ot::Ip6::Header *)v52);
  if ((v47 & 0x1800) != 0x1800)
  {
    char v39 = v52;
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v49);
    if (v6 | (Length == 0)) {
      char v7 = 0;
    }
    else {
      char v7 = 1;
    }
    if ((v7 & 1) == 0) {
      return v48;
    }
    v39[1] |= (*(_BYTE *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v49) & 0xC0) >> 2;
    if ((v47 & 0x800) == 0)
    {
      ot::FrameData::ReadUint8(v49, &v46);
      IgnoreError();
      *v39 |= ((int)v46 >> 2) & 0xF;
      v39[1] |= v46 << 6;
    }

    if ((v47 & 0x1000) == 0)
    {
      v39[1] |= *(_BYTE *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v49) & 0xF;
      v39[2] |= *(_BYTE *)(ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v49) + 1);
      v39[3] |= *(_BYTE *)(ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v49) + 2);
      ot::FrameData::SkipOver(v49, 3u);
    }
  }

  if ((v47 & 0x400) != 0)
  {
    *v51  = 1;
  }

  else
  {
    ot::Ip6::Header::SetNextHeader((uint64_t)v52, v46);
    *v51  = 0;
  }

  v37  = v47 & 0x300;
  switch(v37)
  {
    case 256:
      ot::Ip6::Header::SetHopLimit((uint64_t)v52, 1);
      break;
    case 512:
      ot::Ip6::Header::SetHopLimit((uint64_t)v52, 64);
      break;
    case 768:
      ot::Ip6::Header::SetHopLimit((uint64_t)v52, 255);
      break;
    default:
      ot::Ip6::Header::SetHopLimit((uint64_t)v52, v46);
      break;
  }

  int v36 = v47 & 0x30;
  if ((v47 & 0x30) != 0)
  {
    switch(v36)
    {
      case 16:
        v34  = v49;
        Source  = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52);
        Iid  = (void *)ot::Ip6::Address::GetIid(Source);
        break;
      case 32:
        *(_BYTE *)(ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52) + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = -1;
        *(_BYTE *)(ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52) + 1ot::Tlv::SetType(this, 2) = -2;
        unsigned __int8 v33 = v49;
        uint64_t v12 = ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52);
        break;
      case 48:
        v32  = v50;
        int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52);
        unsigned __int8 v14 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v13);
        ot::Lowpan::Lowpan::ComputeIid(v32, (const ot::Ip6::Prefix *)v43, v14);
        IgnoreError();
        break;
    }
  }

  else if ((v47 & 0x40) == 0)
  {
    v35  = v49;
    char v9 = (void *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52);
  }

  if ((v47 & 0x30) != 0)
  {
    if ((v47 & 0x40) != 0)
    {
      if ((v43[19] & 1) == 0) {
        return v48;
      }
      char v15 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v52);
      ot::Ip6::Address::SetPrefix(v15, (const ot::Ip6::Prefix *)v43);
    }

    else
    {
      __int16 v31 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
      *(_WORD *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v5ot::Tlv::SetType(this, 2) = v31;
    }
  }

  if ((v47 & 8) != 0)
  {
    *(_BYTE *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v5ot::Tlv::SetType(this, 2) = -1;
    if ((v47 & 4) != 0)
    {
      if ((v47 & 3) != 0) {
        return v48;
      }
      if ((v42 & 1) == 0) {
        return v48;
      }
      int v27 = v49;
      Destination  = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v52);
      char v25 = ot::Ip6::Prefix::GetLength((ot::Ip6::Prefix *)v41);
      *(_BYTE *)(ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v52) + 3)  = v25;
      uint64_t v26 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v52);
      ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)v41);
      *(void *)(v26 + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *v18;
      unsigned __int16 v24 = v49;
      uint64_t v19 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v52);
    }

    else
    {
      unint64_t v28 = v47 & 3;
      if (v28 <= 3) {
        __asm { BR              X8 }
      }
    }
  }

  else
  {
    unint64_t v30 = v47 & 3;
    if (v30 <= 3) {
      __asm { BR              X8 }
    }

    if ((v47 & 4) != 0)
    {
      if ((v42 & 1) == 0) {
        return v48;
      }
      unsigned __int16 v16 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v52);
      ot::Ip6::Address::SetPrefix(v16, (const ot::Ip6::Prefix *)v41);
    }

    else if ((v47 & 3) != 0)
    {
      __int16 v29 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
      *(_WORD *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v5ot::Tlv::SetType(this, 2) = v29;
    }
  }

  if ((v47 & 0x400) == 0) {
    return 0;
  }
  __int16 v20 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v49);
  if (v6 | (v20 == 0)) {
    char v21 = 0;
  }
  else {
    char v21 = 1;
  }
  if ((v21 & 1) != 0)
  {
    __int16 Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v49);
    if (!ot::Lowpan::Lowpan::DispatchToNextHeader(this, *Bytes, &v40))
    {
      ot::Ip6::Header::SetNextHeader((uint64_t)v52, v40);
      return 0;
    }
  }

  return v48;
}

void *ot::Clearable<ot::Ip6::Header>::Clear(void *a1)
{
  return memset(a1, 0, 0x28uLL);
}

{
  return __ZN2ot9ClearableINS_3Ip66HeaderEE5ClearEv(a1);
}

uint64_t ot::FrameData::Read<ot::Ip6::Address>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 0x10u);
}

{
  return __ZN2ot9FrameData4ReadINS_3Ip67AddressEEE7otErrorRT_(a1, a2);
}

uint64_t ot::FrameData::Read<ot::Ip6::InterfaceIdentifier>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return __ZN2ot9FrameData4ReadINS_3Ip619InterfaceIdentifierEEE7otErrorRT_(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::DecompressExtensionHeader( ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameData *a3)
{
  uint64_t v19 = this;
  char v18 = a2;
  unsigned __int16 v17 = a3;
  unsigned int v16 = 6;
  if (!ot::FrameData::ReadUint8(a3, &v13))
  {
    if ((v13 & 1) != 0)
    {
      if (!ot::FrameData::CanRead(v17, v14 + 1)) {
        return v16;
      }
      uint64_t Bytes = ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
    }

    else if (ot::FrameData::ReadUint8(v17, v15) {
           || ot::FrameData::ReadUint8(v17, &v14)
    }
           || !ot::FrameData::CanRead(v17, v14))
    {
      return v16;
    }

    v15[1]  = ((unint64_t)v14 + 9) / 8 - 1;
    if (!ot::Message::AppendBytes(v18, (char *)v15, 2u))
    {
      ot::Message::MoveOffset(v18, 2);
      unsigned int v10 = v18;
      unint64_t v4 = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
      if (!ot::Message::AppendBytes(v10, v4, v14))
      {
        ot::Message::MoveOffset(v18, v14);
        ot::FrameData::SkipOver(v17, v14);
        char v9 = v18;
        Size  = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v12);
        if (!ot::Message::AppendBytes(v9, v12, Size))
        {
          unsigned __int16 v8 = v18;
          unsigned __int16 v6 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v12);
          ot::Message::MoveOffset(v8, v6);
          return 0;
        }
      }
    }
  }

  return v16;
}

BOOL ot::FrameData::CanRead(ot::FrameData *this, unsigned __int16 a2)
{
  return a2 <= (int)(unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
}

{
  return __ZNK2ot9FrameData7CanReadEt(this, a2);
}

uint64_t ot::Lowpan::Lowpan::DecompressUdpHeader( ot::Lowpan::Lowpan *this, ot::Ip6::Udp::Header *a2, ot::FrameData *a3)
{
  uint64_t v12 = this;
  unsigned int v11 = a2;
  unsigned int v10 = a3;
  unsigned int v9 = 6;
  unsigned __int16 v7 = 0;
  unsigned __int16 v6 = 0;
  if (!ot::FrameData::ReadUint8(a3, &v8) && (v8 & 0xF8) == 0xF0)
  {
    ot::Clearable<ot::Ip6::Udp::Header>::Clear(v11);
    unint64_t v4 = v8 & 3;
    if (v4 <= 3) {
      __asm { BR              X8 }
    }

    ot::Ip6::Udp::Header::SetSourcePort(v11, v7);
    ot::Ip6::Udp::Header::SetDestinationPort(v11, v6);
    if ((v8 & 4) == 0 && !ot::FrameData::ReadBigEndianUint16(v10, &v5))
    {
      ot::Ip6::Udp::Header::SetChecksum(v11, v5);
      return 0;
    }
  }

  return v9;
}

void *ot::Clearable<ot::Ip6::Udp::Header>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip63Udp6HeaderEE5ClearEv(result);
}

uint64_t ot::Lowpan::Lowpan::DecompressUdpHeader( ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameData *a3, __int16 a4)
{
  unsigned __int8 v13 = this;
  uint64_t v12 = a2;
  unsigned int v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = ot::Lowpan::Lowpan::DecompressUdpHeader(this, (ot::Ip6::Udp::Header *)v8, a3);
  if (!v9)
  {
    if (v10)
    {
      __int16 v7 = v10;
      Offset  = ot::Message::GetOffset(v12);
      ot::Ip6::Udp::Header::SetLength((ot::Ip6::Udp::Header *)v8, v7 - Offset);
    }

    else
    {
      __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v11);
      ot::Ip6::Udp::Header::SetLength((ot::Ip6::Udp::Header *)v8, Length + 8);
    }

    unsigned int v9 = ot::Message::Append<ot::Ip6::Udp::Header>(v12, v8);
    if (!v9) {
      ot::Message::MoveOffset(v12, 8);
    }
  }

  return v9;
}

uint64_t ot::Message::Append<ot::Ip6::Udp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 8u);
}

{
  return __ZN2ot7Message6AppendINS_3Ip63Udp6HeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::Decompress( ot::Lowpan::Lowpan *this, ot::Message *a2, const ot::Mac::Addresses *a3, ot::FrameData *a4, __int16 a5)
{
  unsigned __int16 v22 = this;
  char v21 = a2;
  __int16 v20 = a3;
  uint64_t v19 = a4;
  __int16 v18 = a5;
  unsigned int v17 = 6;
  Offset  = ot::Message::GetOffset(a2);
  if (!ot::Lowpan::Lowpan::DecompressBaseHeader(this, (ot::Ip6::Header *)v16, &v15, v20, v19)
    && !ot::Message::Append<ot::Ip6::Header>(v21, v16))
  {
    ot::Message::MoveOffset(v21, 40);
    while (v15)
    {
      __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v19);
      if (v6 | (Length == 0)) {
        char v7 = 0;
      }
      else {
        char v7 = 1;
      }
      if ((v7 & 1) == 0) {
        return v17;
      }
      char v12 = *(_BYTE *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v19);
      if ((v12 & 0xF0) == 0xE0)
      {
        if ((v12 & 0xE) == 0xE)
        {
          BOOL v15 = 0;
          ot::FrameData::SkipOver(v19, 1u);
        }

        else
        {
          BOOL v15 = (v12 & 1) != 0;
        }
      }

      else
      {
        if ((v12 & 0xF8) != 0xF0) {
          return v17;
        }
        BOOL v15 = 0;
      }
    }

    if (v18)
    {
      *(_WORD *)unsigned __int8 v14 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(unsigned __int16)(v18 - Offset - 40));
    }

    else
    {
      uint64_t v10 = (unsigned __int16)ot::Message::GetOffset(v21) - Offset - 40LL;
      __int16 v8 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v19);
      *(_WORD *)unsigned __int8 v14 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(unsigned __int16)(v10 + v8));
    }

    ot::Message::Write<unsigned short>(v21, Offset + 4, v14);
    return 0;
  }

  return v17;
}

uint64_t ot::Lowpan::Lowpan::DecompressEcn( ot::Lowpan::Lowpan *this, const ot::Message *a2, unsigned __int16 a3)
{
  char v6 = this;
  *(void *)&v5[3]  = a2;
  v5[2]  = a3;
  HIBYTE(v5[1])  = 0;
  if (!ot::Message::Read<unsigned short>(a2, a3, (char *)v5))
  {
    v5[0]  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v5[0]);
    if ((v5[0] & 0xE000) == 0x6000)
    {
      v5[2] += 2;
      if ((v5[0] & 0x1800) != 0x1800
        && !ot::Message::Read<unsigned char>(*(ot::Message **)&v5[3], v5[2], &v4))
      {
        HIBYTE(v5[1])  = (v4 & 0xC0) >> 6;
      }
    }
  }

  return HIBYTE(v5[1]);
}

uint64_t ot::Lowpan::Lowpan::MarkCompressedEcn(ot::Lowpan::Lowpan *this, ot::Message *a2, __int16 a3)
{
  char v7 = this;
  char v6 = a2;
  unsigned __int16 v5 = a3 + 2;
  ot::Message::Read<unsigned char>(a2, a3 + 2, &v4);
  IgnoreError();
  char v4 = v4 & 0x3F | 0xC0;
  return ot::Message::Write<unsigned char>(v6, v5, &v4);
}

uint64_t ot::Lowpan::MeshHeader::Init(uint64_t this, __int16 a2, __int16 a3, char a4)
{
  *(_WORD *)this  = a2;
  *(_WORD *)(this + ot::Tlv::SetType(this, 2) = a3;
  *(_BYTE *)(this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = a4;
  return this;
}

BOOL ot::Lowpan::MeshHeader::IsMeshHeader(ot::Lowpan::MeshHeader *this, const ot::FrameData *a2)
{
  BOOL v3 = 0;
  return v3;
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom(ot::Lowpan::MeshHeader *this, ot::FrameData *a2)
{
  unsigned int v9 = this;
  __int16 v8 = a2;
  uint64_t Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v8);
  unsigned int v7 = ot::Lowpan::MeshHeader::ParseFrom(this, Bytes, Length, &v6);
  if (!v7) {
    ot::FrameData::SkipOver(v8, v6);
  }
  return v7;
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom( ot::Lowpan::MeshHeader *this, const unsigned __int8 *a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  unsigned int v7 = 6;
  if (a3 >= 5u)
  {
    __int16 v8 = (unsigned __int8 *)(a2 + 1);
    if ((*a2 & 0xF0) == 0xB0)
    {
      *((_BYTE *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *a2 & 0xF;
      if (*((_BYTE *)this + 4) != 15)
      {
        *a4  = 5;
        goto LABEL_7;
      }

      if (a3 >= 6u)
      {
        __int16 v8 = (unsigned __int8 *)(a2 + 2);
        *((_BYTE *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = a2[1];
        *a4  = 6;
LABEL_7:
        *(_WORD *)this  = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)v8, a2);
        *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)(v8 + 2), v4);
        return 0;
      }
    }
  }

  return v7;
}

uint64_t ot::Encoding::BigEndian::ReadUint16(ot::Encoding::BigEndian *this, const unsigned __int8 *a2)
{
  return _byteswap_ushort(*(_WORD *)this);
}

{
  return __ZN2ot8Encoding9BigEndian10ReadUint16EPKh(this, a2);
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom(ot::Lowpan::MeshHeader *this, const ot::Message *a2)
{
  unsigned __int16 v5 = this;
  char v4 = a2;
  return ot::Lowpan::MeshHeader::ParseFrom(this, a2, &v3);
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom( ot::Lowpan::MeshHeader *this, const ot::Message *a2, unsigned __int16 *a3)
{
  unsigned int v9 = this;
  __int16 v8 = a2;
  unsigned int v7 = a3;
  unsigned __int16 Bytes = ot::Message::ReadBytes(a2, 0, v6, 6u);
  return ot::Lowpan::MeshHeader::ParseFrom(this, (const unsigned __int8 *)v6, Bytes, v7);
}

uint64_t ot::Lowpan::MeshHeader::GetHeaderLength(ot::Lowpan::MeshHeader *this)
{
  else {
    return 6;
  }
}

uint64_t ot::Lowpan::MeshHeader::DecrementHopsLeft(uint64_t this)
{
  if (*(_BYTE *)(this + 4)) {
    --*(_BYTE *)(this + 4);
  }
  return this;
}

uint64_t ot::Lowpan::MeshHeader::AppendTo(ot::Lowpan::MeshHeader *this, ot::FrameBuilder *a2)
{
  if (*((unsigned __int8 *)this + 4) >= 0xFu)
  {
    unsigned int appended = ot::FrameBuilder::AppendUint8(a2, 191);
    if (appended) {
      return appended;
    }
    unsigned int appended = ot::FrameBuilder::AppendUint8(a2, *((_BYTE *)this + 4));
    if (appended) {
      return appended;
    }
  }

  else
  {
    unsigned int appended = ot::FrameBuilder::AppendUint8(a2, *((_BYTE *)this + 4) | 0xB0u);
    if (appended) {
      return appended;
    }
  }

  unsigned int appended = ot::FrameBuilder::AppendBigEndianUint16(a2, *(_WORD *)this);
  if (!appended) {
    return ot::FrameBuilder::AppendBigEndianUint16(a2, *((_WORD *)this + 1));
  }
  return appended;
}

uint64_t ot::Lowpan::MeshHeader::AppendTo(ot::Lowpan::MeshHeader *this, ot::Message *a2)
{
  uint64_t v10 = this;
  unsigned int v9 = a2;
  ot::FrameBuilder::Init((uint64_t)v7, v8, 6);
  ot::Lowpan::MeshHeader::AppendTo(this, (ot::FrameBuilder *)v7);
  IgnoreError();
  unsigned __int16 v6 = v9;
  unsigned __int16 Bytes = (char *)ot::FrameBuilder::GetBytes((ot::FrameBuilder *)v7);
  unsigned __int16 Length = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v7);
  return ot::Message::AppendBytes(v6, Bytes, Length);
}

BOOL ot::Lowpan::FragmentHeader::IsFragmentHeader(ot::Lowpan::FragmentHeader *this, const ot::FrameData *a2)
{
  unsigned __int16 Bytes = (ot::Lowpan::FragmentHeader *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
  return ot::Lowpan::FragmentHeader::IsFragmentHeader(Bytes, (const unsigned __int8 *)Length);
}

BOOL ot::Lowpan::FragmentHeader::IsFragmentHeader( ot::Lowpan::FragmentHeader *this, const unsigned __int8 *a2)
{
  BOOL v3 = 0;
  return v3;
}

uint64_t ot::Lowpan::FragmentHeader::ParseFrom(ot::Lowpan::FragmentHeader *this, ot::FrameData *a2)
{
  unsigned int v9 = this;
  __int16 v8 = a2;
  unsigned __int16 Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v8);
  unsigned int v7 = ot::Lowpan::FragmentHeader::ParseFrom(this, Bytes, Length, &v6);
  if (!v7) {
    ot::FrameData::SkipOver(v8, v6);
  }
  return v7;
}

uint64_t ot::Lowpan::FragmentHeader::ParseFrom( ot::Lowpan::FragmentHeader *this, unsigned __int8 *a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  unsigned int v15 = 6;
  if (ot::Lowpan::FragmentHeader::IsFragmentHeader((ot::Lowpan::FragmentHeader *)a2, (const unsigned __int8 *)a3))
  {
    *(_WORD *)this  = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)a2, v4) & 0x7FF;
    *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)(a2 + 2), v5);
    if ((*a2 & 0x20) == 0x20)
    {
      if (a3 < 5uLL)
      {
        otLogNotePlat( "ParseFrom() Frame length is less than sizeof(NextFrag)",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (char)this);
        return v15;
      }

      *((_WORD *)this + ot::Tlv::SetType(this, 2) = 8 * a2[4];
      *a4  = 5;
    }

    else
    {
      *((_WORD *)this + ot::Tlv::SetType(this, 2) = 0;
      *a4  = 4;
    }

    return 0;
  }

  return v15;
}

uint64_t ot::Lowpan::FragmentHeader::ParseFrom( ot::Lowpan::FragmentHeader *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned __int16 v9 = a3;
  uint64_t v8 = a4;
  unsigned __int16 Bytes = ot::Message::ReadBytes(a2, a3, (char *)v7, 5u);
  return ot::Lowpan::FragmentHeader::ParseFrom(this, v7, Bytes, v8);
}

uint64_t std::map<unsigned long long,ot::matterInfo>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::~__tree(a1);
  return a1;
}

void *std::vector<ot::Ip6::Address>::vector[abi:nn180100](void *a1)
{
  return a1;
}

{
  *a1  = 0LL;
  a1[1]  = 0LL;
  std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

uint64_t *std::vector<ot::Ip6::Address>::~vector[abi:nn180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];
  v3[1]  = a1;
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(v3, (uint64_t)a1);
  std::vector<ot::Ip6::Address>::__destroy_vector::operator()[abi:nn180100](v3);
  return a1;
}

uint64_t ot::ThreadLinkInfo::SetFrom(ot::ThreadLinkInfo *this, const ot::Mac::RxFrame *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  ot::Clearable<ot::ThreadLinkInfo>::Clear(this);
  if (ot::Mac::Frame::GetSrcPanId(v7, (unsigned __int16 *)this))
  {
    ot::Mac::Frame::GetDstPanId(v7, (unsigned __int16 *)this);
    IgnoreError();
  }

  *((_BYTE *)this + 5)  = *((_BYTE *)this + 5) & 0xFD | (2 * (v6 == 0xFFFF));
  if (ot::Mac::Frame::GetSecurityEnabled(v7))
  {
    ot::Mac::Frame::GetKeyIdMode(v7, &v5);
    IgnoreError();
    BOOL v3 = 1;
    if (v5) {
      BOOL v3 = v5 == 8;
    }
    *((_BYTE *)this + 5)  = *((_BYTE *)this + 5) & 0xFE | v3;
  }

  else
  {
    *((_BYTE *)this + 5) &= ~1u;
  }

  *((_BYTE *)this + ot::Tlv::SetType(this, 2) = ot::Mac::Frame::GetChannel(v7);
  *((_BYTE *)this + 3)  = ot::Mac::RxFrame::GetRssi(v7);
  *((_BYTE *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = ot::Mac::RxFrame::GetLqi(v7);
  uint64_t result = ot::Mac::Frame::GetRadioType(v7);
  *((_BYTE *)this + ot::Tlv::SetLength((uint64_t)this, 16) = result;
  return result;
}

void *ot::Clearable<ot::ThreadLinkInfo>::Clear(void *result)
{
  *uint64_t result = 0LL;
  result[1]  = 0LL;
  result[2]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_14ThreadLinkInfoEE5ClearEv(result);
}

ot::MeshForwarder *ot::MeshForwarder::MeshForwarder(ot::MeshForwarder *this, ot::Instance *a2)
{
  *((_WORD *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)this + 6)  = 0LL;
  ot::Mac::Addresses::Addresses((ot::MeshForwarder *)((char *)this + 56));
  *((_WORD *)this + 38)  = 0;
  *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = 0;
  *((_BYTE *)this + 80) &= ~1u;
  *((_BYTE *)this + 80) &= ~2u;
  *((_BYTE *)this + 80) &= ~4u;
  *((_BYTE *)this + 80) &= ~8u;
  *((_BYTE *)this + 80) &= ~0x10u;
  ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::TimerMilliIn( (ot::MeshForwarder *)((char *)this + 88),  a2);
  ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::TaskletIn( (void *)this + 14,  (uint64_t)a2);
  ot::IndirectSender::IndirectSender((ot::MeshForwarder *)((char *)this + 384), a2);
  unsigned __int8 v2 = ot::DataPollSender::DataPollSender((ot::MeshForwarder *)((char *)this + 440), a2);
  *((_WORD *)this + 20)  = ot::Random::NonCrypto::GetUint16(v2);
  ot::MeshForwarder::ResetCounters(this);
  ot::MeshForwarder::ResetTriggerBasedCounters(this);
  ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear((char *)this + 288);
  return this;
}

{
  ot::MeshForwarder::MeshForwarder(this, a2);
  return this;
}

void ot::MeshForwarder::HandleTxDelayTimer(ot::MeshForwarder *this)
{
  *((_BYTE *)this + 80) &= ~0x10u;
  ot::Tasklet::Post((ot::MeshForwarder *)((char *)this + 112));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "Tx delay timer expired", v1, v2, v3, v4, v5, v6, v7);
}

void ot::MeshForwarder::ScheduleTransmissionTask(ot::MeshForwarder *this)
{
  if ((*((_BYTE *)this + 80) & 8) == 0 && (*((_BYTE *)this + 80) & 4) == 0 && (*((_BYTE *)this + 80) & 0x10) == 0)
  {
    *((void *)this + 6)  = ot::MeshForwarder::PrepareNextDirectTransmission(this);
    if (*((void *)this + 6))
    {
      uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::RequestDirectFrameTransmission(v1);
    }
  }

ot::TimerMilli *ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::HandleTimer);
  return a1;
}

void *ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::HandleTasklet);
  return a1;
}

_WORD *ot::MeshForwarder::ResetCounters(ot::MeshForwarder *this)
{
  return ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 112);
}

void *ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear(void *a1)
{
  return memset(a1, 0, 0x60uLL);
}

{
  return __ZN2ot9ClearableINS_13MeshForwarder20FragmentPriorityListEE5ClearEv(a1);
}

_BYTE *ot::MeshForwarder::Start(_BYTE *this)
{
  uint64_t v2 = this;
  if ((this[80] & 2) == 0)
  {
    uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)this);
    ot::Mac::Mac::SetRxOnWhenIdle(v1, 1);
    this  = ot::IndirectSender::Start(v2 + 384);
    v2[80]  = v2[80] & 0xFD | 2;
  }

  return this;
}

_BYTE *ot::IndirectSender::Start(_BYTE *this)
{
  *this  = 1;
  return this;
}

{
  return __ZN2ot14IndirectSender5StartEv(this);
}

void ot::MeshForwarder::Stop(ot::MeshForwarder *this)
{
  if ((*((_BYTE *)this + 80) & 2) != 0)
  {
    ot::DataPollSender::StopPolling((ot::MeshForwarder *)((char *)this + 440));
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    ot::TimeTicker::UnregisterReceiver(v1, 0);
    uint64_t v2 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
    ot::Mle::DiscoverScanner::Stop(v2);
    ot::PriorityQueue::DequeueAndFreeAll(this);
    ot::MessageQueue::DequeueAndFreeAll((ot::MeshForwarder *)((char *)this + 32));
    ot::IndirectSender::Stop((ot::MeshForwarder *)((char *)this + 384));
    ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear((char *)this + 288);
    ot::TimerMilli::Stop((ot::MeshForwarder *)((char *)this + 88));
    *((_BYTE *)this + 80) &= ~0x10u;
    *((_BYTE *)this + 80) &= ~2u;
    *((void *)this + 6)  = 0LL;
    uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::SetRxOnWhenIdle(v3, 0);
  }

uint64_t ot::Mle::DiscoverScanner::Stop(ot::Mle::DiscoverScanner *this)
{
  return ot::Mle::DiscoverScanner::HandleDiscoverComplete(this);
}

{
  return __ZN2ot3Mle15DiscoverScanner4StopEv(this);
}

uint64_t ot::MeshForwarder::PrepareEmptyFrame( ot::MeshForwarder *this, ot::Mac::TxFrame *a2, const ot::Mac::Address *a3, char a4)
{
  uint64_t v19 = this;
  __int16 v18 = a2;
  unsigned int v17 = a3;
  char v16 = a4 & 1;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v13);
  uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ShortAddress  = ot::Mac::Mac::GetShortAddress(v4);
  ot::Mac::Address::SetShort((uint64_t)v13, ShortAddress);
  if (ot::Mac::Address::IsShortAddrInvalid((ot::Mac::Address *)v13) || ot::Mac::Address::IsExtended(v17))
  {
    uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v6);
    ot::Mac::Address::SetExtended((uint64_t)v13, ExtAddress);
  }

  uint64_t v14 = *(void *)v17;
  char v15 = *((_BYTE *)v17 + 8);
  uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v12[0]  = ot::Mac::Mac::GetPanId(v8);
  unsigned __int16 v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v12[1]  = ot::Mac::Mac::GetPanId(v9);
  ot::MeshForwarder::PrepareMacHeaders(this, v18, 1, (uint64_t)v13, v12, 5, 8, 0LL);
  ot::Mac::Frame::SetAckRequest((_BYTE **)v18, v16 & 1);
  return ot::Mac::Frame::SetPayloadLength(v18, 0);
}

BOOL ot::Mac::Address::IsShortAddrInvalid(ot::Mac::Address *this)
{
  BOOL v2 = 0;
  if (*((_BYTE *)this + 8) == 1) {
    return (unsigned __int16)ot::Mac::Address::GetShort(this) == 65534;
  }
  return v2;
}

{
  return __ZNK2ot3Mac7Address18IsShortAddrInvalidEv(this);
}

void ot::MeshForwarder::PrepareMacHeaders( ot::MeshForwarder *a1, ot::Mac::Frame *a2, __int16 a3, uint64_t a4, unsigned __int16 *a5, char a6, char a7, const ot::Message *a8)
{
  BOOL v12 = ot::MeshForwarder::CalcIePresent(a1, a8, (const ot::Mac::Address *)(a4 + 10));
  uint64_t v8 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
  unsigned int Neighbor = (const ot::Neighbor *)ot::NeighborTable::FindNeighbor(v8, (ot::Mac::Address *)(a4 + 10), 1);
  __int16 v11 = ot::MeshForwarder::CalcFrameVersion(a1, Neighbor, v12);
  ot::Mac::Frame::InitMacHeader(a2, a3, v11, (ot::Mac::Address *)a4, a5, a6, a7);
  if (v12) {
    ot::MeshForwarder::AppendHeaderIe(a1, a8, a2);
  }
}

void ot::MeshForwarder::RemoveMessage(ot::MeshForwarder *this, ot::Message *a2)
{
  unsigned __int8 v13 = this;
  BOOL v12 = a2;
  PriorityQueue  = (ot::PriorityQueue *)ot::Message::GetPriorityQueue(a2);
  if (!PriorityQueue) {
    __assert_rtn("RemoveMessage", "mesh_forwarder.cpp", 258, "queue != nullptr");
  }
  if (PriorityQueue == this)
  {
    BOOL v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v9 = ot::ChildTable::Iterate(v2, 5);
    uint64_t v10 = (ot::ChildTable::IteratorBuilder *)&v9;
    v8[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
    v8[1]  = v3;
    v7[0]  = ot::ChildTable::IteratorBuilder::end(v10);
    v7[1]  = v4;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7))
    {
      uint64_t v6 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
      ot::IndirectSender::RemoveMessageFromSleepyChild((ot::MeshForwarder *)((char *)this + 384), v12, v6);
      IgnoreError();
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
    }

    if (*((ot::Message **)this + 6) == v12) {
      *((void *)this + 6)  = 0LL;
    }
  }

  ot::MeshForwarder::LogMessage(this, 5u, v12, 3, 0LL);
  ot::PriorityQueue::DequeueAndFree(PriorityQueue, v12);
}

void ot::MeshForwarder::LogMessage( ot::MeshForwarder *a1, unsigned __int8 a2, ot::Message *a3, int a4, ot::Mac::Address *a5)
{
  unsigned __int8 v9 = 4;
  if (a2 <= 2u) {
    goto LABEL_9;
  }
  if (a2 - 3 > 2)
  {
    if (a2 != 6)
    {
      if (a2 != 8 && a2 != 7) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }

uint64_t ot::MeshForwarder::ResumeMessageTransmissions(uint64_t this)
{
  if ((*(_BYTE *)(this + 80) & 4) != 0)
  {
    *(_BYTE *)(this + 80) &= ~4u;
    return ot::Tasklet::Post((ot::Tasklet *)(this + 112));
  }

  return this;
}

uint64_t ot::MeshForwarder::UpdateEcnOrDrop(ot::MeshForwarder *this, ot::Message *a2, char a3)
{
  int v36 = this;
  v35  = a2;
  v34  = a3 & 1;
  unsigned int v33 = 0;
  int Now = ot::TimerMilli::GetNow(this);
  Timestamp  = ot::Message::GetTimestamp(v35);
  v32  = ot::Time::operator-(&Now, &Timestamp);
  BOOL v29 = v32 >= 0x834;
  BOOL v28 = 0;
  if ((ot::Message::IsDirectTransmission(v35) & 1) != 0 && !(unsigned __int16)ot::Message::GetOffset(v35))
  {
    if (ot::Message::GetType(v35))
    {
      if (ot::Message::GetType(v35) == 1)
      {
        unsigned __int16 v26 = 0;
        char v24 = 0;
        ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v22, v35, &v26);
        IgnoreError();
        unsigned __int16 v25 = v26;
        if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v23, v35, v26, &v26))
        {
          char v24 = 1;
          v25 += v26;
        }

        if ((v24 & 1) != 0
          && (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v23))
        {
          if ((v24 & 1) != 0)
          {
            Source  = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v22);
            DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v23);
            Entry  = ot::MeshForwarder::FragmentPriorityList::FindEntry( (ot::MeshForwarder *)((char *)this + 288),  Source,  DatagramTag);
            if (Entry)
            {
              if ((ot::MeshForwarder::FragmentPriorityList::Entry::ShouldDrop(Entry) & 1) != 0) {
                unsigned int v33 = 2;
              }
              if ((v34 & 1) != 0)
              {
                DatagramOffset  = ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v23);
                unsigned __int16 Length = ot::Message::GetLength(v35);
                int v13 = Length + DatagramOffset - v25;
              }
            }
          }
        }

        else
        {
          uint64_t v5 = (ot::Lowpan::Lowpan *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(this);
          char v21 = ot::Lowpan::Lowpan::DecompressEcn(v5, v35, v25);
          BOOL v28 = v21 != 0;
          if ((!v29 || v28) && v32 < 0x834)
          {
            if (v29 && v21 && (v21 == 2 || v21 == 1))
            {
              uint64_t v8 = (ot::Lowpan::Lowpan *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(this);
              ot::Lowpan::Lowpan::MarkCompressedEcn(v8, v35, v25);
              ot::MeshForwarder::LogMessage(this, 6u, v35, 0, 0LL);
            }
          }

          else
          {
            unsigned __int16 v15 = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v22);
            unsigned __int16 v6 = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v23);
            __int16 v20 = ot::MeshForwarder::FragmentPriorityList::FindEntry((ot::MeshForwarder *)((char *)this + 288), v15, v6);
            if (v20)
            {
              ot::MeshForwarder::FragmentPriorityList::Entry::MarkToDrop((uint64_t)v20);
              ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime((uint64_t)v20);
            }

            unsigned int v33 = 2;
          }
        }
      }
    }

    else
    {
      ot::Message::Read<ot::Ip6::Header>(v35, 0, v27);
      IgnoreError();
      unsigned int v17 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      uint64_t v3 = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v27);
      if (!ot::Ip6::Netif::HasUnicastAddress(v17, v3))
      {
        BOOL v28 = ot::Ip6::Header::GetEcn((ot::Ip6::Header *)v27) != 0;
        if ((!v29 || v28) && v32 < 0x834)
        {
          if (v29)
          {
            Ecn  = ot::Ip6::Header::GetEcn((ot::Ip6::Header *)v27);
            if (Ecn)
            {
              if (Ecn == 2 || Ecn == 1)
              {
                ot::Ip6::Header::SetEcn((uint64_t)v27, 3);
                ot::Message::Write<ot::Ip6::Header>(v35, 0, v27);
                ot::MeshForwarder::LogMessage(this, 6u, v35, 0, 0LL);
              }
            }
          }
        }

        else
        {
          unsigned int v33 = 2;
        }
      }
    }
  }

  if (v33 == 2)
  {
    ot::MeshForwarder::LogMessage(this, 7u, v35, 0, 0LL);
    ot::Message::ClearDirectTransmission(v35);
    ot::MeshForwarder::RemoveMessageIfNoPendingTx(this, v35);
  }

  return v33;
}

uint64_t ot::Message::IsDirectTransmission(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 7) & 1;
}

{
  return __ZNK2ot7Message20IsDirectTransmissionEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Lowpan::Lowpan>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_6Lowpan6LowpanEEERT_v(a1);
}

uint64_t ot::Lowpan::MeshHeader::GetSource(ot::Lowpan::MeshHeader *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot6Lowpan10MeshHeader9GetSourceEv(this);
}

uint64_t ot::Lowpan::FragmentHeader::GetDatagramTag(ot::Lowpan::FragmentHeader *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return __ZNK2ot6Lowpan14FragmentHeader14GetDatagramTagEv(this);
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::MarkToDrop(uint64_t this)
{
  *(_BYTE *)(this + 5)  = *(_BYTE *)(this + 5) & 0xFB | 4;
  return this;
}

{
  return __ZN2ot13MeshForwarder20FragmentPriorityList5Entry10MarkToDropEv(this);
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime(uint64_t this)
{
  *(_BYTE *)(this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = -16;
  return this;
}

{
  return __ZN2ot13MeshForwarder20FragmentPriorityList5Entry13ResetLifetimeEv(this);
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::ShouldDrop( ot::MeshForwarder::FragmentPriorityList::Entry *this)
{
  return (*((unsigned __int8 *)this + 5) >> 2) & 1;
}

{
  return __ZNK2ot13MeshForwarder20FragmentPriorityList5Entry10ShouldDropEv(this);
}

uint64_t ot::Lowpan::FragmentHeader::GetDatagramSize(ot::Lowpan::FragmentHeader *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot6Lowpan14FragmentHeader15GetDatagramSizeEv(this);
}

uint64_t ot::Clearable<ot::MeshForwarder::FragmentPriorityList::Entry>::Clear(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(_WORD *)(result + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_13MeshForwarder20FragmentPriorityList5EntryEE5ClearEv(result);
}

uint64_t ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::MeshForwarder *this, ot::Message *a2)
{
  char v4 = 0;
  if ((ot::Message::IsDirectTransmission(a2) & 1) == 0 && (ot::Message::IsChildPending(a2) & 1) == 0)
  {
    if (*((ot::Message **)this + 6) == a2)
    {
      *((void *)this + 6)  = 0LL;
      *((_WORD *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
    }

    ot::PriorityQueue::DequeueAndFree(this, a2);
    char v4 = 1;
  }

  return v4 & 1;
}

uint64_t ot::MeshForwarder::RemoveAgedMessages(ot::MeshForwarder *this)
{
  unsigned int v6 = 23;
  ot::PriorityQueue::GetHead(this);
  for (unsigned int i = v1; i; unsigned int i = (ot::Message *)Next)
  {
    Next  = ot::Message::GetNext(i);
    if (i != *((ot::Message **)this + 6)
      && (ot::Message::IsDirectTransmission(i) & 1) != 0
      && (ot::Message::GetDoNotEvict(i) & 1) == 0
      && ot::MeshForwarder::UpdateEcnOrDrop(this, i, 0) == 2)
    {
      unsigned int v6 = 0;
    }
  }

  return v6;
}

uint64_t ot::Message::GetDoNotEvict(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 13) & 1;
}

{
  return __ZNK2ot7Message13GetDoNotEvictEv(this);
}

BOOL ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold(ot::MeshForwarder *this)
{
  unsigned __int8 v9 = this;
  unsigned __int16 v8 = 0;
  char v7 = this;
  unsigned int v6 = (ot::Message *)ot::PriorityQueue::begin(this);
  uint64_t v5 = ot::PriorityQueue::end(v7);
  while (ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v6, &v5))
  {
    char v4 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v6);
    if ((ot::Message::IsDirectTransmission(v4) & 1) != 0 && v4 != *((ot::Message **)this + 6))
    {
      unint64_t Type = ot::Message::GetType(v4);
      if (Type <= 3) {
        __asm { BR              X8 }
      }
    }

    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v6);
  }

  return v8 > 0x64u;
}

void ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::MeshForwarder *this, ot::Message *a2)
{
  if ((ot::Message::IsDirectTransmission(a2) & 1) != 0 && ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold(this))
  {
    char v13 = ot::Message::GetDoNotEvict(a2) & 1;
    ot::Message::SetDoNotEvict(a2, 1);
    int v12 = ot::MeshForwarder::RemoveAgedMessages(this);
    ot::Message::SetDoNotEvict(a2, v13 & 1);
    if (v12 || ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold(this))
    {
      ot::MeshForwarder::LogMessage(this, 8u, a2, 0, 0LL);
      ot::Message::ClearDirectTransmission(a2);
      ot::MeshForwarder::RemoveMessageIfNoPendingTx(this, a2);
    }
  }

  if (ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThresholdForBackPressure(this))
  {
    rcpBuffersAvailable  = 0;
    BOOL v2 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetFreeBufferCount(v2);
    uint64_t v3 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetNumAllocatedBufferCount(v3);
    char v4 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetMaxUsedBufferCount(v4);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshForwarder",  "HIGH_WATER_MARK: Low message buffer : buffer  = %p,total buffers  = %d, free buffers  = %d, allocated buffers  = %d, m ax allocated  = %d",  v5,  v6,  v7,  v8,  v9,  v10,  (char)this);
  }

uint64_t ot::Message::SetDoNotEvict(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFDFFF | ((v3 & 1) << 13);
  return result;
}

{
  return __ZN2ot7Message13SetDoNotEvictEb(this, a2);
}

BOOL ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThresholdForBackPressure(ot::MeshForwarder *this)
{
  uint64_t v9 = this;
  unsigned __int16 v8 = 0;
  uint64_t v7 = this;
  uint64_t v6 = (ot::Message *)ot::PriorityQueue::begin(this);
  uint64_t v5 = ot::PriorityQueue::end(v7);
  while (ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v6, &v5))
  {
    char v4 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v6);
    if ((ot::Message::IsDirectTransmission(v4) & 1) != 0 && v4 != *((ot::Message **)this + 6))
    {
      unint64_t Type = ot::Message::GetType(v4);
      if (Type <= 3) {
        __asm { BR              X8 }
      }
    }

    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v6);
  }

  return v8 > 0x20u;
}

uint64_t ot::MessagePool::GetNumAllocatedBufferCount(ot::MessagePool *this)
{
  return *((unsigned __int16 *)this + 32776);
}

{
  return __ZN2ot11MessagePool26GetNumAllocatedBufferCountEv(this);
}

ot::Message *ot::MeshForwarder::PrepareNextDirectTransmission(ot::MeshForwarder *this)
{
  for (unsigned int i = v1; i; unsigned int i = (ot::Message *)Next)
  {
    Next  = ot::Message::GetNext(i);
    if ((ot::Message::IsDirectTransmission(i) & 1) != 0
      && (ot::Message::IsResolvingAddress(i) & 1) == 0
      && ot::MeshForwarder::UpdateEcnOrDrop(this, i, 1) != 2)
    {
      ot::Message::SetDoNotEvict(i, 1);
      int Type = ot::Message::GetType(i);
      if (Type)
      {
        if (Type == 1) {
          updated  = ot::MeshForwarder::UpdateMeshRoute(this, i);
        }
        else {
          updated  = 2;
        }
      }

      else
      {
        updated  = ot::MeshForwarder::UpdateIp6Route(this, i);
      }

      ot::Message::SetDoNotEvict(i, 0);
      Next  = ot::Message::GetNext(i);
      if (!updated) {
        return i;
      }
      if (updated == 9)
      {
        ot::Message::SetResolvingAddress(i, 1);
      }

      else
      {
        ot::MeshForwarder::LogMessage(this, 3u, i, updated, 0LL);
        ot::PriorityQueue::DequeueAndFree(this, i);
      }
    }
  }

  return i;
}

uint64_t ot::Message::SetTxSuccess(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFFEFFF | ((v3 & 1) << 12);
  return result;
}

{
  return __ZN2ot7Message12SetTxSuccessEb(this, a2);
}

uint64_t ot::Message::IsResolvingAddress(ot::Message *this)
{
  return (*(_DWORD *)(ot::Buffer::GetMetadata(this) + 68) >> 15) & 1;
}

{
  return __ZNK2ot7Message18IsResolvingAddressEv(this);
}

uint64_t ot::MeshForwarder::UpdateIp6Route(ot::MeshForwarder *this, ot::Message *a2)
{
  char v16 = this;
  unsigned __int16 v15 = a2;
  uint64_t v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned int v13 = 0;
  *((_BYTE *)this + 80) &= ~1u;
  ot::Message::Read<ot::Ip6::Header>(v15, 0, v12);
  IgnoreError();
  Source  = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v12);
  if (!ot::Ip6::Address::IsMulticast(Source))
  {
    char v3 = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v12);
    ot::MeshForwarder::GetMacSourceAddress(this, v3, (ot::MeshForwarder *)((char *)this + 56));
    if (ot::Mle::Mle::IsDisabled(v14) || ot::Mle::Mle::IsDetached(v14))
    {
      Destination  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
      if (!ot::Ip6::Address::IsLinkLocal(Destination))
      {
        uint64_t v5 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
        if (!ot::Ip6::Address::IsLinkLocalMulticast(v5)) {
          return 2;
        }
      }

uint64_t ot::Message::SetResolvingAddress(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 68)  = *(_DWORD *)(result + 68) & 0xFFFF7FFF | ((v3 & 1) << 15);
  return result;
}

{
  return __ZN2ot7Message19SetResolvingAddressEb(this, a2);
}

uint64_t ot::MeshForwarder::GetMacSourceAddress( ot::MeshForwarder *this, const ot::Ip6::Address *a2, ot::Mac::Address *a3)
{
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
  ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(Iid, a3);
  ot::Mac::Address::GetExtended(a3);
  __int16 v11 = v4;
  uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress  = (const void *)ot::Mac::Mac::GetExtAddress(v5);
  uint64_t result = ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v11, ExtAddress);
  if ((result & 1) != 0)
  {
    unsigned __int16 v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ShortAddress  = ot::Mac::Mac::GetShortAddress(v8);
    return ot::Mac::Address::SetShort((uint64_t)a3, ShortAddress);
  }

  return result;
}

_BYTE *ot::MeshForwarder::GetMacDestinationAddress( ot::MeshForwarder *this, const ot::Ip6::Address *a2, ot::Mac::Address *a3)
{
  if (ot::Ip6::Address::IsMulticast(a2)) {
    return (_BYTE *)ot::Mac::Address::SetShort((uint64_t)a3, 0xFFFF);
  }
  char v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsRoutingLocator(v4, a2))
  {
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    return (_BYTE *)ot::Mac::Address::SetShort((uint64_t)a3, Locator);
  }

  else
  {
    uint64_t v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    return ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(v7, a3);
  }

BOOL ot::Mle::Mle::IsMinimalEndDevice(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::IsMinimalEndDevice((ot::Mle::Mle *)((char *)this + 312));
}

{
  return __ZNK2ot3Mle3Mle18IsMinimalEndDeviceEv(this);
}

uint64_t ot::MeshForwarder::GetRxOnWhenIdle(ot::MeshForwarder *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  return ot::Mac::Mac::GetRxOnWhenIdle(v1) & 1;
}

uint64_t ot::MeshForwarder::SetRxOnWhenIdle(ot::MeshForwarder *this, char a2)
{
  char v6 = a2 & 1;
  BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetRxOnWhenIdle(v2, v6 & 1);
  if ((v6 & 1) != 0) {
    ot::DataPollSender::StopPolling((ot::MeshForwarder *)((char *)this + 440));
  }
  else {
    ot::DataPollSender::StartPolling((ot::MeshForwarder *)((char *)this + 440));
  }
  char v3 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
  if ((v6 & 1) != 0) {
    return ot::SupervisionListener::Stop(v3);
  }
  else {
    return ot::SupervisionListener::Start(v3);
  }
}

ot::Mac::Frame *ot::MeshForwarder::HandleFrameRequest(ot::MeshForwarder *this, ot::Mac::TxFrames *a2)
{
  char v16 = 0LL;
  if ((*((_BYTE *)this + 80) & 2) != 0 && *((void *)this + 6))
  {
    BOOL v2 = (ot::RadioSelector *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>(this);
    char v16 = ot::RadioSelector::SelectRadio(v2, *((ot::Message **)this + 6), (ot::MeshForwarder *)((char *)this + 66), a2);
    BOOL v15 = (ot::Message::IsLinkSecurityEnabled(*((ot::Message **)this + 6)) & 1) != 0;
    *((_BYTE *)this + 80)  = *((_BYTE *)this + 80) & 0xF7 | 8;
    int Type = ot::Message::GetType(*((ot::Message **)this + 6));
    if (Type)
    {
      if (Type != 1)
      {
        *((_WORD *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Message::GetLength(*((ot::Message **)this + 6));
        return 0LL;
      }

      ot::MeshForwarder::SendMesh(this, *((ot::Message **)this + 6), v16);
    }

    else
    {
      if (ot::Message::GetSubType(*((ot::Message **)this + 6)) == 2)
      {
        char v3 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
        char v16 = ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(v3, v16);
        if (!v16) {
          return v16;
        }
      }

      else
      {
        char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        if (ot::Mac::Mac::IsCslEnabled(v4) && ot::Message::IsSubTypeMle(*((ot::Message **)this + 6))) {
          ot::Message::SetLinkSecurityEnabled(*((ot::Message **)this + 6), 1);
        }
      }

      *((_WORD *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::MeshForwarder::PrepareDataFrame( this,  v16,  *((ot::Message **)this + 6),  (ot::MeshForwarder *)((char *)this + 56),  *((_BYTE *)this + 80) & 1,  *((_WORD *)this + 38),  *((_WORD *)this + 39),  v15);
      if (ot::Message::GetSubType(*((ot::Message **)this + 6)) == 10
        && (ot::Message::IsLinkSecurityEnabled(*((ot::Message **)this + 6)) & 1) != 0)
      {
        ot::Mac::Address::ToString((ot::MeshForwarder *)((char *)this + 56), (ot::StringWriter *)v19);
        char v12 = ot::String<(unsigned short)17>::AsCString((uint64_t)v19);
        ot::Mac::Address::ToString((ot::MeshForwarder *)((char *)this + 66), (ot::StringWriter *)v18);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v18);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"MeshForwarder",  "Child ID Request requires fragmentation, aborting tx src:%s dst:%s mMeshSource:0x%x mMeshDest:0x%x",  v5,  v6,  v7,  v8,  v9,  v10,  v12);
        *((_WORD *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Message::GetLength(*((ot::Message **)this + 6));
        return 0LL;
      }
    }

    ot::Mac::TxFrame::SetIsARetransmission((uint64_t)v16, 0);
  }

  return v16;
}

uint64_t ot::MeshForwarder::PrepareDataFrame( ot::MeshForwarder *this, ot::Mac::TxFrame *a2, ot::Message *a3, const ot::Mac::Addresses *a4, char a5, unsigned __int16 a6, unsigned __int16 a7, char a8)
{
  v78  = this;
  v77  = a2;
  v76  = a3;
  v75  = a4;
  v74  = a5 & 1;
  v73  = a6;
  v72  = a7;
  v71  = a8 & 1;
  v62  = 0;
  while (1)
  {
    v70  = 0;
    v69  = 8;
    if ((ot::Message::IsLinkSecurityEnabled(v76) & 1) != 0)
    {
      v70  = 5;
      Subint Type = ot::Message::GetSubType(v76);
      if (SubType == 1)
      {
        v69  = 16;
      }

      else if (SubType == 4)
      {
        v69  = 0;
      }
    }

    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    PanId  = ot::Mac::Mac::GetPanId(v8);
    uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    v68  = ot::Mac::Mac::GetPanId(v9);
    int v49 = ot::Message::GetSubType(v76);
    if (v49 == 1)
    {
      unsigned __int16 v47 = v77;
      Channel  = ot::Message::GetChannel(v76);
      ot::Mac::TxFrame::SetChannel(v47, Channel);
      v48  = v77;
      char v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      PanChannel  = ot::Mac::Mac::GetPanChannel(v12);
      ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)v48, PanChannel);
      v68  = -1;
    }

    else if (v49 == 3 || v49 == 2)
    {
      v68  = ot::Message::GetPanId(v76);
    }

    ot::MeshForwarder::PrepareMacHeaders(this, v77, 1, (uint64_t)v75, &PanId, v70, v69, v76);
    MaxPayloadunsigned __int16 Length = ot::Mac::Frame::GetMaxPayloadLength(v77);
    ot::Mac::Frame::GetPayload(v77);
    ot::FrameBuilder::Init((uint64_t)v63, v14, MaxPayloadLength);
    if ((v74 & 1) != 0)
    {
      __int16 v46 = 127 - ot::Mac::Frame::GetHeaderLength(v77);
      Footerunsigned __int16 Length = ot::Mac::Frame::GetFooterLength(v77);
      v58  = v46 - (FooterLength - ot::Mac::Frame::GetFcsSize(v77) + 2);
      ot::Mac::Frame::GetPayload(v77);
      ot::FrameBuilder::Init((uint64_t)v63, v15, v58);
      ot::Lowpan::MeshHeader::Init((uint64_t)v59, v73, v72, 19);
      ot::Lowpan::MeshHeader::AppendTo((ot::Lowpan::MeshHeader *)v59, (ot::FrameBuilder *)v63);
      IgnoreError();
    }

    Offset  = ot::Message::GetOffset(v76);
    ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)&v54);
    unsigned __int16 Length = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v63);
    Maxunsigned __int16 Length = ot::FrameBuilder::GetMaxLength((ot::FrameBuilder *)v63);
    ot::FrameBuilder::SetMaxLength((uint64_t)v63, MaxLength - 4);
    if ((v74 & 1) != 0)
    {
      ot::Mac::Address::SetShort((uint64_t)&v54, v73);
      ot::Mac::Address::SetShort((uint64_t)&v54 + 10, v72);
    }

    else
    {
      v54  = *(_OWORD *)v75;
      v55  = *((_DWORD *)v75 + 4);
    }

    char v16 = (ot::Lowpan::Lowpan *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(this);
    ot::FrameBuilder::SetMaxLength((uint64_t)v63, MaxLength);
    __int16 v44 = ot::Message::GetLength(v76);
    v66  = v44 - ot::Message::GetOffset(v76);
    if ((v71 & 1) == 0)
    {
      int v43 = v66;
    }

    v62  = 1;
    if ((ot::Message::IsLinkSecurityEnabled(v76) & 1) != 0 || !ot::Message::IsSubTypeMle(v76))
    {
      if (!ot::Message::GetDatagramTag(v76))
      {
        if (!*((_WORD *)this + 20)) {
          ++*((_WORD *)this + 20);
        }
        unsigned int v17 = v76;
        int v18 = *((unsigned __int16 *)this + 20);
        *((_WORD *)this + 20)  = v18 + 1;
        ot::Message::SetDatagramTag(v17, v18);
      }

      __int16 v42 = ot::Message::GetLength(v76);
      DatagramTag  = ot::Message::GetDatagramTag(v76);
      ot::Lowpan::FragmentHeader::FirstFrag::Init((ot::Lowpan::FragmentHeader::FirstFrag *)v53, v42, DatagramTag);
      if (ot::FrameBuilder::Insert<ot::Lowpan::FragmentHeader::FirstFrag>( (ot::FrameBuilder *)v63,  Length,  v53)) {
        __assert_rtn("PrepareDataFrame", "mesh_forwarder.cpp", 1132, "false");
      }
      v61  = 4;
      goto LABEL_39;
    }

    ot::Message::SetOffset(v76, 0);
    ot::Message::SetLinkSecurityEnabled(v76, 1);
  }

  v62  = 1;
  __int16 v39 = ot::Message::GetLength(v76);
  v66  = v39 - ot::Message::GetOffset(v76);
  __int16 v40 = ot::Message::GetLength(v76);
  unsigned __int16 v41 = ot::Message::GetDatagramTag(v76);
  unsigned __int16 v20 = ot::Message::GetOffset(v76);
  ot::Lowpan::FragmentHeader::NextFrag::Init((ot::Lowpan::FragmentHeader::NextFrag *)v52, v40, v41, v20);
  v61  = 5;
  __int16 v38 = ot::Message::GetLength(v76);
  v66  = v38 - ot::Message::GetOffset(v76);
LABEL_39:
  v37  = v66;
  int v36 = v76;
  unsigned __int16 v21 = ot::Message::GetOffset(v76);
  v34  = v77;
  __int16 v22 = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v63);
  ot::Mac::Frame::SetPayloadLength(v34, v22);
  __int16 v23 = ot::Message::GetOffset(v76);
  v64  = v66 + v23;
  v35  = (unsigned __int16)(v66 + v23);
  if ((v62 & 1) != 0)
  {
    bzero(v81, 0x400uLL);
    char v24 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    if ((ot::MessagePool::GetIsBufferStatsEnabled(v24) & 1) != 0) {
      ot::Message::GetBufferIDs(v76, Offset, v64 - Offset, v81);
    }
    Payloadunsigned __int16 Length = ot::Mac::Frame::GetPayloadLength(v77);
    char v33 = PayloadLength - v61;
    ot::Mac::Address::ToString(v75, (ot::StringWriter *)v80);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v80);
    ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v75 + 10), (ot::StringWriter *)v79);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v79);
    ot::Message::GetDatagramTag(v76);
    ot::Message::GetLength(v76);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "tx frag frame, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d%s",  v26,  v27,  v28,  v29,  v30,  v31,  v33);
  }

  ot::Message::SetOffset(v76, Offset);
  return v64;
}

BOOL ot::MeshForwarder::CalcIePresent( ot::MeshForwarder *this, const ot::Message *a2, const ot::Mac::Address *a3)
{
  char v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
  BOOL v6 = 0;
  if (ot::NeighborTable::FindNeighbor(v3, a3, 5))
  {
    char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    return ot::Mac::Mac::IsCslEnabled(v4);
  }

  return v6;
}

uint64_t ot::MeshForwarder::CalcFrameVersion(ot::MeshForwarder *this, const ot::Neighbor *a2, char a3)
{
  unsigned __int16 v5 = 4096;
  if ((a3 & 1) != 0)
  {
    return 0x2000;
  }

  else if (a2 {
         && (char v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this),
  }
             ot::ChildTable::Contains(v3, a2))
         && ot::CslTxScheduler::ChildInfo::IsCslSynchronized((const ot::Neighbor *)((char *)a2 + 272)))
  {
    return 0x2000;
  }

  else if (a2 && ot::Neighbor::IsEnhAckProbingActive(a2))
  {
    return 0x2000;
  }

  else if (a2 && (ot::Neighbor::IsEnhacedAckEnabled(a2) & 1) != 0)
  {
    return 0x2000;
  }

  return v5;
}

void ot::MeshForwarder::AppendHeaderIe(ot::MeshForwarder *this, const ot::Message *a2, ot::Mac::TxFrame *a3)
{
  BOOL v15 = this;
  uint64_t v14 = a2;
  unsigned int v13 = a3;
  unsigned __int8 v12 = 0;
  char v11 = 0;
  char v8 = 1;
  if (ot::Mac::Frame::GetType(a3) != 3)
  {
    BOOL v6 = 0;
    if (v14) {
      BOOL v6 = (unsigned __int16)ot::Message::GetLength(v14) != 0;
    }
    char v8 = v6;
  }

  char v10 = v8;
  ot::Mac::Address::Address((ot::Mac::Address *)v9);
  BOOL v5 = 0;
  if (!ot::Mac::Frame::GetDstAddr(v13, (ot::Mac::Address *)v9))
  {
    char v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    BOOL v5 = ot::NeighborTable::FindNeighbor(v3, (ot::Mac::Address *)v9, 5) != 0;
  }

  if (v5)
  {
    char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if (ot::Mac::Mac::IsCslEnabled(v4))
    {
      ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CslIe>(v13, &v12);
      IgnoreError();
      ot::Mac::TxFrame::SetCslIePresent((uint64_t)v13, 1);
      char v11 = 1;
    }
  }

  if ((v11 & 1) != 0 && (v10 & 1) != 0)
  {
    ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::Termination2Ie>(v13, &v12);
    IgnoreError();
  }

uint64_t ot::Message::GetChannel(ot::Message *this)
{
  return *(unsigned __int8 *)(ot::Buffer::GetMetadata(this) + 54);
}

{
  return __ZNK2ot7Message10GetChannelEv(this);
}

uint64_t ot::Message::GetPanId(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 52);
}

{
  return __ZNK2ot7Message8GetPanIdEv(this);
}

uint64_t ot::FrameBuilder::GetMaxLength(ot::FrameBuilder *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return __ZNK2ot12FrameBuilder12GetMaxLengthEv(this);
}

uint64_t ot::FrameBuilder::SetMaxLength(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10)  = a2;
  return this;
}

{
  return __ZN2ot12FrameBuilder12SetMaxLengthEt(this, a2);
}

uint64_t ot::FrameBuilder::GetRemainingLength(ot::FrameBuilder *this)
{
  return (unsigned __int16)(*((_WORD *)this + 5) - *((_WORD *)this + 4));
}

{
  return __ZNK2ot12FrameBuilder18GetRemainingLengthEv(this);
}

uint64_t ot::Message::GetDatagramTag(ot::Message *this)
{
  return *(unsigned int *)(ot::Buffer::GetMetadata(this) + 32);
}

{
  return __ZNK2ot7Message14GetDatagramTagEv(this);
}

uint64_t ot::Message::SetDatagramTag(ot::Message *this, int a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 3ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return __ZN2ot7Message14SetDatagramTagEj(this, a2);
}

uint64_t ot::Lowpan::FragmentHeader::FirstFrag::Init( ot::Lowpan::FragmentHeader::FirstFrag *this, __int16 a2, unsigned __int16 a3)
{
  *(_WORD *)this  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(a2 & 0x7FF | 0xC000u));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a3);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return __ZN2ot6Lowpan14FragmentHeader9FirstFrag4InitEtt(this, a2, a3);
}

uint64_t ot::FrameBuilder::Insert<ot::Lowpan::FragmentHeader::FirstFrag>( ot::FrameBuilder *a1, unsigned __int16 a2, const void *a3)
{
  return ot::FrameBuilder::InsertBytes(a1, a2, a3, 4u);
}

{
  return __ZN2ot12FrameBuilder6InsertINS_6Lowpan14FragmentHeader9FirstFragEEE7otErrortRKT_(a1, a2, a3);
}

uint64_t ot::Lowpan::FragmentHeader::NextFrag::Init( ot::Lowpan::FragmentHeader::NextFrag *this, __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  *(_WORD *)this  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(a2 & 0x7FF | 0xE000u));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a3);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  *((_BYTE *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = (int)a4 >> 3;
  return result;
}

{
  return __ZN2ot6Lowpan14FragmentHeader8NextFrag4InitEttt(this, a2, a3, a4);
}

uint64_t ot::FrameBuilder::Append<ot::Lowpan::FragmentHeader::NextFrag>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 5u);
}

{
  return __ZN2ot12FrameBuilder6AppendINS_6Lowpan14FragmentHeader8NextFragEEE7otErrorRKT_(a1, a2);
}

ot::Neighbor *ot::MeshForwarder::UpdateNeighborOnSentFrame( ot::InstanceLocator *a1, ot::Mac::Frame *a2, int a3, ot::Mac::Address *a4, char a5)
{
  char v10 = a5 & 1;
  unsigned int Neighbor = 0LL;
  if ((*((_BYTE *)a1 + 80) & 2) != 0)
  {
    BOOL v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v5, a4, 1);
    if (Neighbor)
    {
      if (ot::Mac::Frame::GetAckRequest(a2) && (ot::Mac::Frame::GetRadioType(a2) != 1 || a3))
      {
        ot::Mac::Frame::GetHeaderIe(a2, 0x1Au);
        if (v6 && (v10 & 1) != 0) {
          ot::MeshForwarder::UpdateNeighborLinkFailures(a1, Neighbor, a3, 1, 0xFu);
        }
        else {
          ot::MeshForwarder::UpdateNeighborLinkFailures(a1, Neighbor, a3, 1, 4u);
        }
      }
    }
  }

  return Neighbor;
}

void ot::MeshForwarder::UpdateNeighborLinkFailures( ot::InstanceLocator *a1, ot::Neighbor *a2, int a3, char a4, unsigned __int8 a5)
{
  char v9 = a4 & 1;
  if (a3)
  {
    if (a3 == 14)
    {
      ot::Neighbor::IncrementLinkFailures((uint64_t)a2);
      if ((v9 & 1) != 0)
      {
        unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
        if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16) && a5 <= (int)ot::Neighbor::GetLinkFailures(a2))
        {
          uint64_t v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
          ot::Mle::MleRouter::RemoveRouterLink(v6, a2);
        }
      }
    }
  }

  else
  {
    ot::Neighbor::ResetLinkFailures((uint64_t)a2);
  }

uint64_t ot::Neighbor::IncrementLinkFailures(uint64_t this)
{
  return this;
}

{
  return __ZN2ot8Neighbor21IncrementLinkFailuresEv(this);
}

BOOL ot::Mle::IsActiveRouter(ot::Mle *this)
{
  return (unsigned __int16)ot::Mle::ChildIdFromRloc16((ot::Mle *)(unsigned __int16)this) == 0;
}

{
  return __ZN2ot3Mle14IsActiveRouterEt(this);
}

void ot::MeshForwarder::HandleDeferredAck(ot::InstanceLocator *a1, ot::Neighbor *a2, int a3)
{
  char v16 = a1;
  BOOL v15 = a2;
  int v14 = a3;
  char v13 = 1;
  if ((*((_BYTE *)a1 + 80) & 2) != 0)
  {
    if (v14 == 14)
    {
      ExtAddress  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v15);
      ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v17);
      char v11 = ot::String<(unsigned short)17>::AsCString((uint64_t)v17);
      ot::Neighbor::GetRloc16(v15);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshForwarder",  "Deferred ack timeout on trel for neighbor %s rloc16:0x%04x",  v4,  v5,  v6,  v7,  v8,  v9,  v11);
    }

    uint64_t v10 = ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>(a1);
    ot::RadioSelector::UpdateOnDeferredAck(v10, v15, v14, &v13);
  }

uint64_t ot::MeshForwarder::GetTxDelayStats(ot::MeshForwarder *this, int a2)
{
  uint64_t v6 = this;
  int v5 = a2;
  if (a2)
  {
    int Now = ot::TimerMilli::GetNow(this);
    int Value = ot::Time::GetValue((ot::Time *)&Now);
    return (Value - v5);
  }

  else
  {
    return 0;
  }

uint64_t ot::MeshForwarder::IsMatter(ot::MeshForwarder *this, const ot::Message *a2, ot::Ip6::Headers *a3)
{
  int v14 = this;
  char v13 = a2;
  unsigned __int8 v12 = a3;
  if (!ot::Message::GetType(a2))
  {
    goto LABEL_11;
  }

  if (ot::Message::GetType(v13) == 1)
  {
    ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v8);
    Source  = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v7);
    ot::Mac::Address::SetShort((uint64_t)v8, Source);
    Destination  = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v7);
    ot::Mac::Address::SetShort((uint64_t)v9, Destination);
    unsigned __int16 v11 = v10;
    if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v6, v13, v10, &v10))
    {
      v11 += v10;
    }

uint64_t ot::Lowpan::MeshHeader::GetDestination(ot::Lowpan::MeshHeader *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return __ZNK2ot6Lowpan10MeshHeader14GetDestinationEv(this);
}

uint64_t ot::MeshForwarder::GetMatterHeader(ot::MeshForwarder *this, const ot::Ip6::Headers *a2, char *a3)
{
  MatterFlags  = ot::Ip6::Headers::GetMatterFlags(a2);
  MatterSessionID  = ot::Ip6::Headers::GetMatterSessionID(a2);
  MatterSecurityFlags  = ot::Ip6::Headers::GetMatterSecurityFlags(a2);
  MatterCounter  = ot::Ip6::Headers::GetMatterCounter(a2);
  return snprintf( a3,  0x40uLL,  ", Matter F:%u, S:%u, Sec:%u, M:%u",  MatterFlags,  MatterSessionID,  MatterSecurityFlags,  MatterCounter);
}

uint64_t ot::Ip6::Headers::GetMatterFlags(ot::Ip6::Headers *this)
{
  return ot::Ip6::Matter::Header::GetFlags((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return __ZNK2ot3Ip67Headers14GetMatterFlagsEv(this);
}

uint64_t ot::Ip6::Headers::GetMatterSessionID(ot::Ip6::Headers *this)
{
  return (unsigned __int16)ot::Ip6::Matter::Header::GetSessionID((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return __ZNK2ot3Ip67Headers18GetMatterSessionIDEv(this);
}

uint64_t ot::Ip6::Headers::GetMatterSecurityFlags(ot::Ip6::Headers *this)
{
  return ot::Ip6::Matter::Header::GetSecurityFlags((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return __ZNK2ot3Ip67Headers22GetMatterSecurityFlagsEv(this);
}

uint64_t ot::Ip6::Headers::GetMatterCounter(ot::Ip6::Headers *this)
{
  return ot::Ip6::Matter::Header::GetCounter((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return __ZNK2ot3Ip67Headers16GetMatterCounterEv(this);
}

void ot::MeshForwarder::CountMatterDuplicates( uint64_t a1, ot::Ip6::Headers *a2, unsigned __int16 a3, int a4, char a5, unsigned __int8 a6)
{
  v66  = a1;
  v65  = a2;
  v64  = a3;
  v63  = a4;
  v62  = a5;
  v61  = a6;
  v51  = a1;
  MatterSessionID  = (unsigned __int16)ot::Ip6::Headers::GetMatterSessionID(a2);
  v60  = ot::Ip6::Headers::GetMatterCounter(v65) | (unint64_t)(MatterSessionID << 32);
  v53  = 0;
  if (v62)
  {
    if (v62 == 1)
    {
      uint64_t v14 = v51;
      int v15 = *(_DWORD *)(v51 + 192) + 1;
      *(_DWORD *)(v51 + 19ot::Tlv::SetType(this, 2) = v15;
      v56  = v15;
      int v16 = *(_DWORD *)(v14 + 208) + v64;
      *(_DWORD *)(v14 + 208)  = v16;
      v54  = v16;
      if (std::map<unsigned long long,ot::matterInfo>::count[abi:nn180100]((uint64_t)&mMatterTxMap, &v60))
      {
        v53  = 1;
        char v45 = &mMatterTxMap;
        __int16 v44 = &v60;
        unsigned int v17 = (_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60);
        uint64_t v18 = v51;
        unsigned int v19 = (*v17)++;
        v59  = v19;
        int v20 = *(_DWORD *)(v18 + 184) + 1;
        *(_DWORD *)(v18 + 18ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v20;
        v57  = v20;
        int v21 = *(_DWORD *)(v18 + 200) + v64;
        *(_DWORD *)(v18 + 200)  = v21;
        v55  = v21;
        int v46 = v63;
        v58  = v46
            - *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60) + 4);
      }

      else
      {
        *(_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60)  = 1;
      }

      int v43 = v63;
      *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60) + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v43;
    }
  }

  else
  {
    uint64_t v6 = v51;
    int v7 = *(_DWORD *)(v51 + 188) + 1;
    *(_DWORD *)(v51 + 188)  = v7;
    v56  = v7;
    int v8 = *(_DWORD *)(v6 + 204) + v64;
    *(_DWORD *)(v6 + 20ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v8;
    v54  = v8;
    if (std::map<unsigned long long,ot::matterInfo>::count[abi:nn180100]((uint64_t)&mMatterRxMap, &v60))
    {
      v53  = 1;
      int v49 = &mMatterRxMap;
      v48  = &v60;
      uint64_t v9 = (_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60);
      uint64_t v10 = v51;
      unsigned int v11 = (*v9)++;
      v59  = v11;
      int v12 = *(_DWORD *)(v10 + 180) + 1;
      *(_DWORD *)(v10 + 180)  = v12;
      v57  = v12;
      int v13 = *(_DWORD *)(v10 + 196) + v64;
      *(_DWORD *)(v10 + 196)  = v13;
      v55  = v13;
      int v50 = v63;
      v58  = v50 - *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60) + 4);
    }

    else
    {
      *(_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60)  = 1;
    }

    int v47 = v63;
    *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60) + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v47;
  }

  if ((v53 & 1) != 0)
  {
    int v41 = v61;
    __int16 v22 = "Received";
    if (v62) {
      __int16 v22 = "Sent";
    }
    uint64_t v28 = v22;
    MatterFlags  = ot::Ip6::Headers::GetMatterFlags(v65);
    unsigned int v30 = ot::Ip6::Headers::GetMatterSessionID(v65);
    MatterSecurityFlags  = ot::Ip6::Headers::GetMatterSecurityFlags(v65);
    MatterCounter  = ot::Ip6::Headers::GetMatterCounter(v65);
    uint64_t v33 = v59;
    v34  = v58;
    v35  = v56;
    uint64_t v36 = v57;
    v37  = v54;
    uint64_t v38 = v55;
    unsigned int v39 = v64;
    SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(v65);
    v27[14]  = v68;
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v68);
    uint64_t v40 = ot::String<(unsigned short)40>::AsCString((uint64_t)v68);
    DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(v65);
    v27[15]  = v67;
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v67);
    __int16 v42 = v27;
    v27[1]  = MatterFlags;
    v27[2]  = (unsigned __int16)v30;
    v27[3]  = MatterSecurityFlags;
    v27[4]  = MatterCounter;
    v27[5]  = v59;
    v27[6]  = v58;
    v27[7]  = v56;
    v27[8]  = v57;
    v27[9]  = v54;
    v27[10]  = v55;
    v27[11]  = v39;
    v27[12]  = v40;
    v27[13]  = ot::String<(unsigned short)40>::AsCString((uint64_t)v67);
    ot::Logger::LogInModule( (ot *)"MeshForwarder",  v41,  "%s Matter [F:%u, S:%u, Sec:%u, M:%u, dupCnt:%u, retryDelay:%u], [totalMsgCnt:%u, totalDupCnt:%u, totalMsgBytes:%u, totalDupBytes:%u], len=%d, src=[%s], dst=[%s]",  MatterSecurityFlags,  v30,  MatterFlags,  v25,  v26,  (char)v28);
  }

uint64_t std::map<unsigned long long,ot::matterInfo>::count[abi:nn180100](uint64_t a1, void *a2)
{
  return std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__count_unique<unsigned long long>( a1,  a2);
}

uint64_t std::map<unsigned long long,ot::matterInfo>::operator[](uint64_t a1, void *a2)
{
  unsigned int v9[3] = a1;
  v9[2]  = a2;
  uint64_t v8 = std::forward_as_tuple[abi:nn180100]<unsigned long long const&>((uint64_t)a2);
  boost::any::holder<unsigned short>::~holder(v8);
  v9[0]  = std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( a1,  a2,  (uint64_t)&std::piecewise_construct,  &v8,  (uint64_t)&v7);
  v9[1]  = v2;
  std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>::operator->[abi:nn180100]((uint64_t)v9);
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  return v3 + 8;
}

uint64_t ot::MeshForwarder::AddHomeKitMessageTxStatus(ot::MeshForwarder *this, char a2)
{
  if (ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 224)) % 0x64)
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 224));
    unsigned int v3 = result / 0x64 + 1;
  }

  else
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 224));
    unsigned int v3 = result / 0x64;
  }

  *((_DWORD *)this + 55)  = v3;
  return result;
}

uint64_t ot::MeshForwarder::AddMatterMessageTxStatus(ot::MeshForwarder *this, char a2)
{
  if (ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 226)) % 0x64)
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 226));
    unsigned int v3 = result / 0x64 + 1;
  }

  else
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 226));
    unsigned int v3 = result / 0x64;
  }

  *((_DWORD *)this + 5ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v3;
  return result;
}

uint64_t ot::MeshForwarder::ContainsMatterEidList(ot::MeshForwarder *this, const ot::Ip6::Address *a2)
{
  char v7 = this;
  uint64_t v6 = a2;
  if (std::vector<ot::Ip6::Address>::size[abi:nn180100](mMatterEidList))
  {
    v5[1]  = mMatterEidList;
    v5[0]  = std::vector<ot::Ip6::Address>::begin[abi:nn180100](mMatterEidList);
    uint64_t v4 = std::vector<ot::Ip6::Address>::end[abi:nn180100]((uint64_t)mMatterEidList);
    while (std::operator!=[abi:nn180100]<ot::Ip6::Address *>((uint64_t)v5, (uint64_t)&v4))
    {
      __int128 v3 = *(_OWORD *)std::string_view::data[abi:nn180100]((uint64_t)v5);
      if (ot::Equatable<ot::Ip6::Address>::operator==(v6, &v3))
      {
        char v8 = 1;
        return v8 & 1;
      }

      std::__wrap_iter<ot::Ip6::Address *>::operator++[abi:nn180100](v5);
    }

    char v8 = 0;
  }

  else
  {
    char v8 = 0;
  }

  return v8 & 1;
}

uint64_t std::vector<ot::Ip6::Address>::size[abi:nn180100](void *a1)
{
  return (a1[1] - *a1) / 16LL;
}

uint64_t std::vector<ot::Ip6::Address>::begin[abi:nn180100](uint64_t *a1)
{
  return std::vector<ot::Ip6::Address>::__make_iter[abi:nn180100]((uint64_t)a1, *a1);
}

uint64_t std::vector<ot::Ip6::Address>::end[abi:nn180100](uint64_t a1)
{
  return std::vector<ot::Ip6::Address>::__make_iter[abi:nn180100](a1, *(void *)(a1 + 8));
}

BOOL std::operator!=[abi:nn180100]<ot::Ip6::Address *>(uint64_t a1, uint64_t a2)
{
  return !std::operator==[abi:nn180100]<ot::Ip6::Address *>(a1, a2);
}

void *std::__wrap_iter<ot::Ip6::Address *>::operator++[abi:nn180100](void *result)
{
  *result += 16LL;
  return result;
}

uint64_t ot::MeshForwarder::UpdateMatterEidList(ot::MeshForwarder *this, const ot::Ip6::Headers *a2)
{
  uint64_t v6 = this;
  int v5 = a2;
  if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort(a2) == 5540)
  {
    __n128 v4 = *(__n128 *)ot::Ip6::Headers::GetSourceAddress(v5);
  }

  else if ((unsigned __int16)ot::Ip6::Headers::GetDestinationPort(v5) == 5540)
  {
    __n128 v4 = *(__n128 *)ot::Ip6::Headers::GetDestinationAddress(v5);
  }

  uint64_t result = ot::MeshForwarder::ContainsMatterEidList(this, (const ot::Ip6::Address *)&v4);
  if ((result & 1) == 0) {
    return std::vector<ot::Ip6::Address>::push_back[abi:nn180100](mMatterEidList, &v4);
  }
  return result;
}

uint64_t std::vector<ot::Ip6::Address>::push_back[abi:nn180100](uint64_t *a1, __n128 *a2)
{
  unint64_t v5 = a1[1];
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<ot::Ip6::Address>::__push_back_slow_path<ot::Ip6::Address const&>(a1, a2);
    uint64_t v6 = result;
  }

  else
  {
    uint64_t result = (uint64_t)std::vector<ot::Ip6::Address>::__construct_one_at_end[abi:nn180100]<ot::Ip6::Address const&>( (uint64_t)a1,  a2);
    uint64_t v6 = v5 + 16;
  }

  a1[1]  = v6;
  return result;
}

void ot::MeshForwarder::UpdateMatterAddressQuerryCnt(ot::MeshForwarder *this, const ot::Ip6::Address *a2)
{
  if ((ot::MeshForwarder::ContainsMatterEidList(this, a2) & 1) != 0) {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshForwarder",  "mIpCounters.mMatterAddressQueryCnt: %u",  v2,  v3,  v4,  v5,  v6,  v7,  ++*((_DWORD *)this + 53));
  }
}

void std::vector<ot::Ip6::Address>::clear[abi:nn180100](uint64_t *a1)
{
}

void std::map<unsigned long long,ot::matterInfo>::clear[abi:nn180100](uint64_t a1)
{
}

uint64_t ot::MeshForwarder::GetAddressAndPortInfo(uint64_t a1, ot::Message *a2, char *a3, char a4)
{
  uint64_t v49 = a1;
  v48  = a2;
  __s  = a3;
  v46[71]  = a4;
  unsigned int v45 = 6;
  if (!ot::Message::GetType(a2)
    && !ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v46, a2))
  {
    unsigned int v45 = 0;
    if (ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v46))
    {
      __str  = &__s[strlen(__s)];
      __size  = 256 - strlen(__s);
      SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v57);
      uint64_t v40 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v57);
      DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v56);
      int v41 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v56);
      unsigned __int16 Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(__str, __size, "IPv6 ICMP src=[%s], dst=[%s], chksum:%04x", v40, v41, Checksum);
    }

    else if (ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v46))
    {
      unsigned int v39 = &__s[strlen(__s)];
      size_t v38 = 256 - strlen(__s);
      uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v7, (ot::StringWriter *)v55);
      v34  = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v55);
      unsigned __int16 SourcePort = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v46);
      char v8 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v8, (ot::StringWriter *)v54);
      uint64_t v36 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v54);
      unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v46);
      unsigned __int16 v9 = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(v39, v38, "IPv6 UDP src=[%s]:%d, dst=[%s]:%d,  chksum:%04x", v34, SourcePort, v36, DestinationPort, v9);
    }

    else if (ot::Ip6::Headers::IsTcp((ot::Ip6::Headers *)v46))
    {
      uint64_t v33 = &__s[strlen(__s)];
      v32  = 256 - strlen(__s);
      uint64_t v10 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v10, (ot::StringWriter *)v53);
      uint64_t v28 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v53);
      unsigned __int16 v29 = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v46);
      unsigned int v11 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v11, (ot::StringWriter *)v52);
      unsigned int v30 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v52);
      unsigned __int16 v31 = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v46);
      unsigned __int16 v12 = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(v33, v32, "IPv6 TCP src=[%s]:%d, dst=[%s]:%d, chksum:%04x", v28, v29, v30, v31, v12);
    }

    else if (ot::Ip6::Headers::IsHopOpts((ot::Ip6::Headers *)v46))
    {
      uint64_t v27 = &__s[strlen(__s)];
      size_t v26 = 256 - strlen(__s);
      unsigned int v19 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v19, (ot::StringWriter *)v51);
      char v24 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v51);
      int v20 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v20, (ot::StringWriter *)v50);
      uint64_t v25 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v50);
      unsigned __int16 v21 = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(v27, v26, "IPv6 HopOpts src=[%s], dst=[%s], chksum:%04x", v24, v25, v21);
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"MeshForwarder",  "MeshForwarder::GetAddressAndPortInfo packet type is unknown ",  v13,  v14,  v15,  v16,  v17,  v18,  v23);
      return 6;
    }
  }

  return v45;
}

BOOL ot::Ip6::Headers::IsHopOpts(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 0;
}

{
  return __ZNK2ot3Ip67Headers9IsHopOptsEv(this);
}

BOOL ot::MeshForwarder::IsTxThreadControl(uint64_t a1, ot::Message *a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  if (ot::Message::GetType(a2) != 2 && ot::Message::GetType(a2) != 3) {
    return !ot::Message::GetType(a2)
  }
        && !ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v5, a2)
        && ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v5)
        && ((unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v5), DestinationPort == 19788)
         || DestinationPort == 61631);
  return 1;
}

BOOL ot::MeshForwarder::IsTxIcmpError(uint64_t a1, ot::Message *a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  if (ot::Message::GetType(a2)
    || ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v12, a2)
    || !ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v12)
    || ot::Message::Read<ot::Ip6::Icmp::Header>(a2, 0x28u, v11))
  {
    return 0;
  }

  else
  {
    char Type = ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v11);
    ot::Ip6::Icmp::Header::IsError((ot::Ip6::Icmp::Header *)v11);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MeshForwarder",  "IxTxIcmpError type=%d isError=%d",  v2,  v3,  v4,  v5,  v6,  v7,  Type);
    return ot::Ip6::Icmp::Header::IsError((ot::Ip6::Icmp::Header *)v11);
  }

_DWORD *ot::MeshForwarder::UpdateTriggerBasedNeighborInfo( _DWORD *this, ot::Neighbor *a2, char a3, char a4, char a5)
{
  char v7 = a3 & 1;
  char v6 = a4 & 1;
  char v5 = a5 & 1;
  if (a2)
  {
    this  = (_DWORD *)ot::Neighbor::GetTriggerBasedStatsInfo(a2);
    if ((v5 & 1) != 0)
    {
      ++this[2];
      if ((v7 & 1) != 0) {
        ++this[13];
      }
    }

    else
    {
      ++this[4];
      if ((v7 & 1) != 0) {
        ++this[14];
      }
    }

    if ((v6 & 1) != 0) {
      ++*this;
    }
  }

  return this;
}

uint64_t ot::Neighbor::GetTriggerBasedStatsInfo(ot::Neighbor *this)
{
  return (uint64_t)this + 176;
}

{
  return __ZN2ot8Neighbor24GetTriggerBasedStatsInfoEv(this);
}

uint64_t ot::MeshForwarder::UpdateTxDelayTriggerBasedStats(uint64_t this, unsigned int a2)
{
  *(void *)(this + 264) += a2;
  ++*(_DWORD *)(this + 272);
  if (a2 > *(_DWORD *)(this + 248)) {
    *(_DWORD *)(this + 248)  = a2;
  }
  if (a2 < *(_DWORD *)(this + 252) || *(_DWORD *)(this + 272) == 1) {
    *(_DWORD *)(this + 25ot::Tlv::SetType(this, 2) = a2;
  }
  *(_DWORD *)(this + 256)  = *(void *)(this + 264) / (unint64_t)*(unsigned int *)(this + 272);
  return this;
}

ot::TimerMilli *ot::MeshForwarder::UpdateTxDelayStats(ot::TimerMilli *this, int a2)
{
  char v7 = this;
  int v6 = a2;
  uint64_t v3 = this;
  if (a2)
  {
    int Now = ot::TimerMilli::GetNow(this);
    int Value = ot::Time::GetValue((ot::Time *)&Now);
    unsigned int v5 = Value - v6;
    *((void *)v3 + 20) += (Value - v6);
    ++*((_DWORD *)v3 + 42);
    if (v5 > *((_DWORD *)v3 + 36)) {
      *((_DWORD *)v3 + 36)  = v5;
    }
    if (v5 < *((_DWORD *)v3 + 37) || *((_DWORD *)v3 + 42) == 1) {
      *((_DWORD *)v3 + 37)  = v5;
    }
    *((_DWORD *)v3 + 38)  = *((void *)v3 + 20) / (unint64_t)*((unsigned int *)v3 + 42);
    return (ot::TimerMilli *)ot::MeshForwarder::UpdateTxDelayTriggerBasedStats((uint64_t)v3, v5);
  }

  return this;
}

ot::Mac::Address *ot::MeshForwarder::HandleSentFrame(_BYTE *a1, ot::Mac::Frame *a2, int a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  int v15 = a3;
  updated  = 0LL;
  uint64_t result = ot::Mac::Address::Address((ot::Mac::Address *)v13);
  BOOL v12 = 1;
  if (v15)
  {
    BOOL v12 = 1;
    if (v15 != 15)
    {
      BOOL v12 = 1;
      if (v15 != 11)
      {
        BOOL v12 = 1;
        if (v15 != 14) {
          BOOL v12 = v15 == 29;
        }
      }
    }
  }

  if (!v12) {
    __assert_rtn( "HandleSentFrame",  "mesh_forwarder.cpp",  1735,  "(aError == kErrorNone) || (aError == kErrorChannelAccessFailure) || (aError == kErrorAbort) || (aError == kErrorNo Ack) || (aError == kErrorDuplicated)");
  }
  a1[80] &= ~8u;
  if ((a1[80] & 2) != 0)
  {
    if ((a1[80] & 0x10) == 0 || v15)
    {
      a1[80] &= ~0x10u;
    }

    else
    {
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 88), 8u);
      char v4 = ot::ToUlong(8LL);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MeshForwarder",  "Start tx delay timer for %lu msec",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
    }

    if (!ot::Mac::Frame::IsEmpty(v16))
    {
      ot::Mac::Frame::GetDstAddr(v16, (ot::Mac::Address *)v13);
      IgnoreError();
      updated  = ot::MeshForwarder::UpdateNeighborOnSentFrame( (ot::InstanceLocator *)a1,  v16,  v15,  (ot::Mac::Address *)v13,  0);
    }

    return (ot::Mac::Address *)ot::MeshForwarder::UpdateSendMessage((uint64_t)a1, v15, (ot::Mac::Address *)v13, updated);
  }

  return result;
}

uint64_t ot::MeshForwarder::UpdateSendMessage(uint64_t a1, int a2, ot::Mac::Address *a3, ot::Neighbor *a4)
{
  v32  = a1;
  int v31 = a2;
  unsigned int v30 = a3;
  unsigned __int16 v29 = a4;
  int v28 = a2;
  if (*(void *)(a1 + 48))
  {
    if ((ot::Message::IsDirectTransmission(*(ot::Message **)(a1 + 48)) & 1) == 0) {
      __assert_rtn("UpdateSendMessage", "mesh_forwarder.cpp", 1771, "mSendMessage->IsDirectTransmission()");
    }
    if (v31)
    {
      ot::Message::SetTxSuccess(*(ot::Message **)(a1 + 48), 0);
      *(_WORD *)(a1 + 4ot::Tlv::SetType(this, 2) = ot::Message::GetLength(*(ot::Message **)(a1 + 48));
    }

    int v23 = *(unsigned __int16 *)(a1 + 42);
    if (v23 >= (unsigned __int16)ot::Message::GetLength(*(ot::Message **)(a1 + 48)))
    {
      int v28 = v31;
      ot::Message::ClearDirectTransmission(*(ot::Message **)(a1 + 48));
      ot::Message::SetOffset(*(ot::Message **)(a1 + 48), 0);
      if (v29)
      {
        LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v29);
        char TxSuccess = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48));
        ot::LinkQualityInfo::AddMessageTxStatus(LinkInfo, TxSuccess & 1);
        if ((ot::MeshForwarder::IsMatter( (ot::MeshForwarder *)a1,  *(const ot::Message **)(a1 + 48),  (ot::Ip6::Headers *)v27) & 1) != 0)
        {
          unsigned __int16 v21 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v29);
          char v5 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48));
          ot::LinkQualityInfo::AddMatterMessageTxStatus(v21, v5 & 1);
          char v6 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48));
          ot::MeshForwarder::AddMatterMessageTxStatus((ot::MeshForwarder *)a1, v6 & 1);
        }

        if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v27) == 5683
          || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v27) == 5683)
        {
          int v20 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v29);
          char v7 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48));
          ot::LinkQualityInfo::AddHomeKitMessageTxStatus(v20, v7 & 1);
          char v8 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48));
          ot::MeshForwarder::AddHomeKitMessageTxStatus((ot::MeshForwarder *)a1, v8 & 1);
        }
      }

      uint64_t v9 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>((ot::InstanceLocator *)a1);
      ot::Utils::HistoryTracker::RecordTxMessage(v9, *(const ot::Message **)(a1 + 48), v30);
      ot::MeshForwarder::LogMessage((ot::MeshForwarder *)a1, 1u, *(ot::Message **)(a1 + 48), v28, v30);
      if (!ot::Message::GetType(*(ot::Message **)(a1 + 48)))
      {
        if ((ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48)) & 1) != 0)
        {
          ++*(_DWORD *)(a1 + 128);
          ++*(_DWORD *)(a1 + 232);
          memcpy(__dst, *(const void **)(a1 + 48), sizeof(__dst));
          if (!ot::MeshForwarder::IsTxThreadControl(a1, (ot::Message *)__dst))
          {
            ++*(_DWORD *)(a1 + 172);
            ++*(_DWORD *)(a1 + 276);
          }

          Timestamp  = ot::Message::GetTimestamp(*(ot::Message **)(a1 + 48));
          int Value = ot::Time::GetValue((ot::Time *)&Timestamp);
          ot::MeshForwarder::UpdateTxDelayStats((ot::TimerMilli *)a1, Value);
        }

        else
        {
          ++*(_DWORD *)(a1 + 136);
          ++*(_DWORD *)(a1 + 240);
          memcpy(v35, *(const void **)(a1 + 48), sizeof(v35));
          if (!ot::MeshForwarder::IsTxThreadControl(a1, (ot::Message *)v35))
          {
            ++*(_DWORD *)(a1 + 176);
            ++*(_DWORD *)(a1 + 280);
          }

          int v25 = ot::Message::GetTimestamp(*(ot::Message **)(a1 + 48));
          int v11 = ot::Time::GetValue((ot::Time *)&v25);
          ot::MeshForwarder::UpdateTxDelayStats((ot::TimerMilli *)a1, v11);
        }

        uint64_t v17 = v29;
        memcpy(v34, *(const void **)(a1 + 48), sizeof(v34));
        IsTxThreadControl  = ot::MeshForwarder::IsTxThreadControl(a1, (ot::Message *)v34);
        memcpy(v33, *(const void **)(a1 + 48), sizeof(v33));
        IsTxIcmpError  = ot::MeshForwarder::IsTxIcmpError(a1, (ot::Message *)v33);
        char v12 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 48));
        ot::MeshForwarder::UpdateTriggerBasedNeighborInfo((_DWORD *)a1, v17, IsTxThreadControl, IsTxIcmpError, v12 & 1);
      }

      Subchar Type = ot::Message::GetSubType(*(ot::Message **)(a1 + 48));
      if (SubType == 2)
      {
        uint64_t v13 = (unsigned __int8 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>((ot::InstanceLocator *)a1);
        ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(v13, *(ot::Message **)(a1 + 48));
      }

      else if (SubType == 10)
      {
        uint64_t v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        ot::Mle::Mle::HandleChildIdRequestTxDone(v14, *(ot::Message **)(a1 + 48));
      }

      ot::MeshForwarder::RemoveMessageIfNoPendingTx((ot::MeshForwarder *)a1, *(ot::Message **)(a1 + 48));
    }

    else
    {
      ot::Message::SetOffset(*(ot::Message **)(a1 + 48), *(_WORD *)(a1 + 42));
    }
  }

  return ot::Tasklet::Post((ot::Tasklet *)(a1 + 112));
}

uint64_t ot::Utils::HistoryTracker::RecordTxMessage( ot::Utils::HistoryTracker *this, const ot::Message *a2, const ot::Mac::Address *a3)
{
  return ot::Utils::HistoryTracker::RecordMessage(this, a2, a3, 1);
}

{
  return __ZN2ot5Utils14HistoryTracker15RecordTxMessageERKNS_7MessageERKNS_3Mac7AddressE(this, a2, a3);
}

void ot::MeshForwarder::HandleReceivedFrame(ot::MeshForwarder *this, ot::Mac::RxFrame *a2)
{
  uint64_t v18 = this;
  uint64_t v17 = a2;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v14);
  if ((*((_BYTE *)this + 80) & 2) != 0)
  {
    SrcAddr  = ot::Mac::Frame::GetSrcAddr(v17, (ot::Mac::Address *)v14);
    if (!SrcAddr)
    {
      SrcAddr  = ot::Mac::Frame::GetDstAddr(v17, (ot::Mac::Address *)&v15);
      if (!SrcAddr)
      {
        ot::ThreadLinkInfo::SetFrom((ot::ThreadLinkInfo *)v16, v17);
        ot::Mac::Frame::GetPayload(v17);
        uint64_t v8 = v2;
        Payloadunsigned __int16 Length = ot::Mac::Frame::GetPayloadLength(v17);
        ot::Data<(ot::DataLengthType)1>::Init((uint64_t)v13, v8, PayloadLength);
        uint64_t v9 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
        char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled((ot::ThreadLinkInfo *)v16);
        ot::SupervisionListener::UpdateOnReceive(v9, (const ot::Mac::Address *)v14, IsLinkSecurityEnabled & 1);
        int Type = ot::Mac::Frame::GetType(v17);
        if (Type)
        {
          if (Type == 1)
          {
            if (ot::Lowpan::MeshHeader::IsMeshHeader((ot::Lowpan::MeshHeader *)v13, v5))
            {
              ot::MeshForwarder::HandleMesh( this,  (ot::FrameData *)v13,  (const ot::Mac::Address *)v14,  (const ot::ThreadLinkInfo *)v16);
            }

            else if (ot::Lowpan::FragmentHeader::IsFragmentHeader((ot::Lowpan::FragmentHeader *)v13, v6))
            {
              ot::MeshForwarder::HandleFragment( this,  (ot::FrameData *)v13,  (const ot::Mac::Addresses *)v14,  (const ot::ThreadLinkInfo *)v16);
            }

            else if (ot::Lowpan::Lowpan::IsLowpanHc((uint64_t)v13, v7))
            {
              ot::MeshForwarder::HandleLowpanHC( this,  (const ot::FrameData *)v13,  (const ot::Mac::Addresses *)v14,  (const ot::ThreadLinkInfo *)v16);
            }

            else if ((unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13))
            {
              SrcAddr  = 32;
            }

            else
            {
              ot::MeshForwarder::LogFrame((uint64_t)this, (char)"Received empty payload frame", v17, 0);
            }
          }

          else
          {
            SrcAddr  = 2;
          }
        }
      }
    }
  }

  else
  {
    SrcAddr  = 13;
  }

  if (SrcAddr) {
    ot::MeshForwarder::LogFrame((uint64_t)this, (char)"Dropping rx frame", v17, SrcAddr);
  }
}

uint64_t ot::ThreadLinkInfo::IsLinkSecurityEnabled(ot::ThreadLinkInfo *this)
{
  return *((_BYTE *)this + 5) & 1;
}

{
  return __ZNK2ot14ThreadLinkInfo21IsLinkSecurityEnabledEv(this);
}

void ot::MeshForwarder::HandleFragment( ot::MeshForwarder *this, ot::FrameData *a2, const ot::Mac::Addresses *a3, const ot::ThreadLinkInfo *a4)
{
  v91  = this;
  v90  = a2;
  v89  = a3;
  v88  = a4;
  v87  = 0;
  v85  = 0LL;
  uint64_t Bytes = ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v90);
  v87  = ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v86, v90);
  if (v87)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "Error while converting frame to packet fragment",  v4,  v5,  v6,  v7,  v8,  v9,  v55);
    goto LABEL_39;
  }

  if ((*((_BYTE *)v88 + 5) & 1) != 0)
  {
    uint64_t v10 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v10, v89, 5);
    if (Neighbor)
    {
      if (!(unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v86))
      {
        DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v86);
        if (ot::Neighbor::IsLastRxFragmentTagSet(Neighbor)
          && ot::Neighbor::IsLastRxFragmentTagAfter(Neighbor, DatagramTag))
        {
          v87  = 29;
          goto LABEL_39;
        }

        ot::Neighbor::SetLastRxFragmentTag(Neighbor, DatagramTag);
      }
    }
  }

  if ((unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v86))
  {
    v79[2]  = (char *)this + 32;
    v79[0]  = ot::MessageQueue::begin((ot::MeshForwarder *)((char *)this + 32));
    v79[1]  = v38;
    v78[0]  = ot::MessageQueue::end((ot::MeshForwarder *)((char *)this + 32));
    v78[1]  = v39;
    while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v79, v78))
    {
      v77  = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v79);
      v74  = (unsigned __int16)ot::Message::GetLength(v77);
      if (v74 == (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramSize((ot::Lowpan::FragmentHeader *)v86))
      {
        v73  = ot::Message::GetDatagramTag(v77);
        if (v73 == (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v86))
        {
          Offset  = (unsigned __int16)ot::Message::GetOffset(v77);
          if (Offset == (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v86))
          {
            v70  = ot::Message::GetOffset(v77);
            v71  = (unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v90) + v70;
            if (v71 <= (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramSize((ot::Lowpan::FragmentHeader *)v86))
            {
              v69  = ot::Message::IsLinkSecurityEnabled(v77) & 1;
              if (v69 == (ot::ThreadLinkInfo::IsLinkSecurityEnabled(v88) & 1))
              {
                v85  = v77;
                break;
              }
            }
          }
        }
      }

      ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v79, v40);
    }

    if ((ot::MeshForwarder::GetRxOnWhenIdle(this) & 1) == 0
      && !v85
      && (ot::ThreadLinkInfo::IsLinkSecurityEnabled(v88) & 1) != 0)
    {
      ot::MeshForwarder::ClearReassemblyList(this);
    }

    if (v85)
    {
      v65  = v85;
      unsigned __int16 v47 = ot::Message::GetOffset(v85);
      ot::Message::WriteData<(ot::DataLengthType)1>(v65, v47, (uint64_t)v90);
      v66  = v85;
      v48  = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v90);
      ot::Message::MoveOffset(v66, v48);
      v67  = v85;
      Rss  = ot::ThreadLinkInfo::GetRss(v88);
      ot::Message::AddRss(v67, Rss);
      v68  = v85;
      Lqunsigned int i = ot::ThreadLinkInfo::GetLqi(v88);
      ot::Message::AddLqi(v68, Lqi);
      ot::Message::SetTimestampToNow(v85);
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MeshForwarder",  "Received fragment with a non-matching fragmentation offset, tag and security",  v41,  v42,  v43,  v44,  v45,  v46,  v55);
      v87  = 2;
    }
  }

  else
  {
    DatagramSize  = ot::Lowpan::FragmentHeader::GetDatagramSize((ot::Lowpan::FragmentHeader *)v86);
    ot::MeshForwarder::UpdateRoutes(this, v90, v89);
    v87  = ot::MeshForwarder::FrameToMessage(this, v90, DatagramSize, v89, &v85);
    if (v87)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "HandleFragment() Error while converting frame to message",  v11,  v12,  v13,  v14,  v15,  v16,  v55);
    }

    else if (DatagramSize >= (int)(unsigned __int16)ot::Message::GetLength(v85))
    {
      v87  = ot::Message::SetLength(v85, DatagramSize);
      if (v87)
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "HandleFragment() Failed to set message's length",  v23,  v24,  v25,  v26,  v27,  v28,  v55);
      }

      else
      {
        v75  = v85;
        unsigned __int16 v29 = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v86);
        ot::Message::SetDatagramTag(v75, v29);
        ot::Message::SetTimestampToNow(v85);
        ot::Message::SetFirstFragTimestampToNow(v85);
        ot::Message::SetLinkInfo(v85, v88);
        unsigned int v30 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
        if (ot::Ip6::Filter::Accept(v30, v85))
        {
          ot::MeshForwarder::SendIcmpErrorIfDstUnreach(this, v85, v89);
          if ((ot::MeshForwarder::GetRxOnWhenIdle(this) & 1) == 0 && (ot::Message::IsLinkSecurityEnabled(v85) & 1) != 0) {
            ot::MeshForwarder::ClearReassemblyList(this);
          }
          ot::MessageQueue::Enqueue((ot::MeshForwarder *)((char *)this + 32), v85);
          v37  = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
          ot::TimeTicker::RegisterReceiver(v37, 0);
        }

        else
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MeshForwarder",  "Received fragment was filtered out by IPv6 filter",  v31,  v32,  v33,  v34,  v35,  v36,  v55);
          v87  = 2;
        }
      }
    }

    else
    {
      v87  = 6;
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "HandleFragment() Datagram size less than message",  v17,  v18,  v19,  v20,  v21,  v22,  v55);
    }
  }

void ot::MeshForwarder::HandleLowpanHC( ot::MeshForwarder *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3, const ot::ThreadLinkInfo *a4)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  int v19 = 0;
  uint64_t v18 = 0LL;
  ot::MeshForwarder::UpdateRoutes(this, a2, a3);
  int v19 = ot::MeshForwarder::FrameToMessage(this, v22, 0, v21, &v18);
  if (!v19)
  {
    ot::Message::SetLinkInfo(v18, v20);
    uint64_t v4 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
    if (ot::Ip6::Filter::Accept(v4, v18))
    {
      uint64_t v5 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
      if (ot::Ip6::Filter::Accept(v5, v18))
      {
        ot::MeshForwarder::SendIcmpErrorIfDstUnreach(this, v18, v21);
      }

      else
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MeshForwarder",  "Received lowpan HC was filtered out by IPv6 filter",  v6,  v7,  v8,  v9,  v10,  v11,  v13);
        int v19 = 2;
      }
    }

    else
    {
      int v19 = 2;
    }
  }

  if (v19)
  {
    int v14 = v19;
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v22);
    uint64_t v16 = v21;
    char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled(v20);
    ot::MeshForwarder::LogLowpanHcFrameDrop((uint64_t)this, v14, Length, (uint64_t)v16, IsLinkSecurityEnabled & 1);
    if (v18) {
      ot::Message::Free(v18);
    }
  }

  else
  {
    ot::MeshForwarder::HandleDatagram(this, v18, v20, v21);
    IgnoreError();
  }

void ot::MeshForwarder::LogFrame(uint64_t a1, char a2, ot::Mac::Frame *a3, int a4)
{
  if (a4)
  {
    ot::ErrorToString(a4);
    ot::Mac::Frame::ToInfoString(a3, (ot::StringWriter *)v19);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v19);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "%s, aError:%s, %s", v4, v5, v6, v7, v8, v9, a2);
  }

  else
  {
    ot::Mac::Frame::ToInfoString(a3, (ot::StringWriter *)v18);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshForwarder", "%s, %s", v10, v11, v12, v13, v14, v15, a2);
  }

BOOL ot::Neighbor::IsLastRxFragmentTagAfter(ot::Neighbor *this, __int16 a2)
{
  return ot::SerialNumber::IsGreater<unsigned short>(*((_WORD *)this + 42), a2);
}

{
  return __ZNK2ot8Neighbor24IsLastRxFragmentTagAfterEt(this, a2);
}

uint64_t ot::MeshForwarder::FrameToMessage( ot::MeshForwarder *this, const ot::FrameData *a2, __int16 a3, const ot::Mac::Addresses *a4, ot::Message **a5)
{
  uint64_t v20 = this;
  int v19 = a2;
  __int16 v18 = a3;
  uint64_t v17 = a4;
  uint64_t v16 = a5;
  Framechar Priority = 0;
  __int128 v14 = *(_OWORD *)a2;
  Framechar Priority = ot::MeshForwarder::GetFramePriority(this, (const ot::FrameData *)&v14, a4, &v13);
  if (!FramePriority)
  {
    uint64_t v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::Message::Settings::Settings(v12, v13);
    uint64_t v5 = ot::MessagePool::Allocate(v10, 0, 0, (ot::Message::Settings *)v12);
    *uint64_t v16 = v5;
    if (*v16)
    {
      uint64_t v6 = (ot::Lowpan::Lowpan *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(this);
      Framechar Priority = ot::Lowpan::Lowpan::Decompress(v6, *v16, v17, (ot::FrameData *)&v14, v18);
      if (!FramePriority)
      {
        Framechar Priority = ot::Message::AppendData<(ot::DataLengthType)1>(*v16, (uint64_t)&v14);
        if (!FramePriority)
        {
          uint64_t v9 = *v16;
          unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)&v14);
          ot::Message::MoveOffset(v9, Length);
        }
      }
    }

    else
    {
      return 3;
    }
  }

  return FramePriority;
}

uint64_t ot::Message::SetFirstFragTimestampToNow(ot::Message *this)
{
  int Now = ot::TimerMilli::GetNow(this);
  return ot::Message::SetFirstFragTimestamp(this, Now);
}

{
  return __ZN2ot7Message26SetFirstFragTimestampToNowEv(this);
}

BOOL ot::MeshForwarder::ClearReassemblyList(ot::MeshForwarder *this)
{
  uint64_t v10 = this;
  uint64_t v9 = (ot::MeshForwarder *)((char *)this + 32);
  v8[0]  = ot::MessageQueue::begin((ot::MeshForwarder *)((char *)this + 32));
  v8[1]  = v1;
  v7[0]  = ot::MessageQueue::end(v9);
  v7[1]  = v2;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v8);
    ot::MeshForwarder::LogMessage(this, 4u, v6, 18, 0LL);
    if (!ot::Message::GetType(v6))
    {
      ++*((_DWORD *)this + 35);
      ++*((_DWORD *)this + 61);
    }

    ot::MessageQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 32), v6);
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v8, v4);
  }

  return result;
}

uint64_t ot::Message::WriteData<(ot::DataLengthType)1>(ot::Message *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes(a3);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(a3);
  return ot::Message::WriteBytes(a1, a2, Bytes, Length);
}

{
  return __ZN2ot7Message9WriteDataILNS_14DataLengthTypeE1EEEvtRKNS_4DataIXT_EEE(a1, a2, a3);
}

uint64_t ot::ThreadLinkInfo::GetRss(ot::ThreadLinkInfo *this)
{
  return *((char *)this + 3);
}

{
  return __ZNK2ot14ThreadLinkInfo6GetRssEv(this);
}

uint64_t ot::ThreadLinkInfo::GetLqi(ot::ThreadLinkInfo *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot14ThreadLinkInfo6GetLqiEv(this);
}

void ot::MeshForwarder::LogFragmentFrame( uint64_t a1, int a2, unsigned __int16 a3, ot::Mac::Address *a4, ot::Lowpan::FragmentHeader *a5, char a6, uint64_t a7)
{
  uint64_t v28 = a1;
  int v27 = a2;
  unsigned __int16 v26 = a3;
  uint64_t v25 = a4;
  uint64_t v24 = a5;
  char v23 = a6 & 1;
  uint64_t v22 = a7;
  int v14 = a3;
  v13[10]  = v30;
  ot::Mac::Address::ToString(a4, (ot::StringWriter *)v30);
  uint64_t v15 = ot::String<(unsigned short)17>::AsCString((uint64_t)v30);
  v13[11]  = v29;
  ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v25 + 10), (ot::StringWriter *)v29);
  uint64_t v16 = ot::String<(unsigned short)17>::AsCString((uint64_t)v29);
  DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag(v24);
  DatagramOffset  = ot::Lowpan::FragmentHeader::GetDatagramOffset(v24);
  DatagramSize  = ot::Lowpan::FragmentHeader::GetDatagramSize(v24);
  uint64_t v20 = ot::ErrorToString(v27);
  uint64_t v21 = v13;
  v13[1]  = v15;
  v13[2]  = v16;
  v13[3]  = (unsigned __int16)DatagramTag;
  v13[4]  = (unsigned __int16)DatagramOffset;
  v13[5]  = (unsigned __int16)DatagramSize;
  v13[6]  = v20;
  v13[7]  = ot::ToYesNo((ot *)(v23 & 1));
  v13[8]  = v22;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "rx frag frame, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d, error:%s, sec:%s%s",  v7,  v8,  v9,  v10,  v11,  v12,  v14);
}

uint64_t ot::MeshForwarder::HandleDatagram( ot::MeshForwarder *this, ot::Message *a2, const ot::ThreadLinkInfo *a3, const ot::Mac::Address *a4)
{
  uint64_t v4 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
  ot::Utils::HistoryTracker::RecordRxMessage(v4, a2, a4);
  ot::MeshForwarder::LogMessage(this, 0, a2, 0, a4);
  if (!ot::Message::GetType(a2))
  {
    ++*((_DWORD *)this + 33);
    ++*((_DWORD *)this + 59);
    uint64_t v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v5, a4, 5);
    if (Neighbor)
    {
      TriggerBasedStatsInfo  = ot::Neighbor::GetTriggerBasedStatsInfo(Neighbor);
      ++*(_DWORD *)(TriggerBasedStatsInfo + 12);
    }
  }

  uint64_t v7 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  return ot::Ip6::Ip6::HandleDatagram(v7, a2, 0, a3, 0);
}

void ot::MeshForwarder::LogFragmentFrameDrop( uint64_t a1, int a2, unsigned __int16 a3, ot::Mac::Address *a4, ot::Lowpan::FragmentHeader *a5, char a6)
{
  uint64_t v26 = a1;
  int v25 = a2;
  unsigned __int16 v24 = a3;
  char v23 = a4;
  uint64_t v22 = a5;
  char v21 = a6 & 1;
  BOOL v13 = ot::ErrorToString(a2);
  int v14 = v24;
  v12[9]  = v28;
  ot::Mac::Address::ToString(v23, (ot::StringWriter *)v28);
  uint64_t v15 = ot::String<(unsigned short)17>::AsCString((uint64_t)v28);
  v12[10]  = v27;
  ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v23 + 10), (ot::StringWriter *)v27);
  uint64_t v16 = ot::String<(unsigned short)17>::AsCString((uint64_t)v27);
  DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag(v22);
  DatagramOffset  = ot::Lowpan::FragmentHeader::GetDatagramOffset(v22);
  DatagramSize  = ot::Lowpan::FragmentHeader::GetDatagramSize(v22);
  uint64_t v20 = v12;
  v12[1]  = v24;
  v12[2]  = v15;
  v12[3]  = v16;
  v12[4]  = (unsigned __int16)DatagramTag;
  v12[5]  = (unsigned __int16)DatagramOffset;
  v12[6]  = (unsigned __int16)DatagramSize;
  v12[7]  = ot::ToYesNo((ot *)(v21 & 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "Dropping rx frag frame, error:%s, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d, sec:%s",  v6,  v7,  v8,  v9,  v10,  v11,  (char)v13);
}

uint64_t ot::MeshForwarder::HandleTimeTick(ot::MeshForwarder *this)
{
  char v5 = ot::MeshForwarder::FragmentPriorityList::UpdateOnTimeTick((ot::MeshForwarder *)((char *)this + 288)) & 1;
  uint64_t result = ot::MeshForwarder::UpdateReassemblyList(this);
  char v4 = 1;
  if ((result & 1) == 0) {
    char v4 = v5;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v2, 0);
  }

  return result;
}

BOOL ot::MeshForwarder::UpdateReassemblyList(ot::MeshForwarder *this)
{
  uint64_t v12 = this;
  int Now = ot::TimerMilli::GetNow(this);
  v10[2]  = (char *)this + 32;
  v10[0]  = ot::MessageQueue::begin((ot::MeshForwarder *)((char *)this + 32));
  v10[1]  = v1;
  v9[0]  = ot::MessageQueue::end((ot::MeshForwarder *)((char *)this + 32));
  v9[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v10, v9))
  {
    uint64_t v8 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v10);
    Timestamp  = ot::Message::GetTimestamp(v8);
    unsigned int v5 = ot::Time::operator-(&Now, &Timestamp);
    if (v5 >= ot::Time::SecToMsec((ot::Time *)2))
    {
      ot::MeshForwarder::LogMessage(this, 4u, v8, 30, 0LL);
      if (!ot::Message::GetType(v8))
      {
        ++*((_DWORD *)this + 35);
        ++*((_DWORD *)this + 61);
      }

      ot::MessageQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 32), v8);
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v10, v3);
  }

  return ot::MessageQueue::GetHead((ot::MeshForwarder *)((char *)this + 32)) != 0;
}

uint64_t ot::MeshForwarder::GetFramePriority( ot::InstanceLocator *a1, const ot::FrameData *a2, const ot::Mac::Addresses *a3, _BYTE *a4)
{
  unsigned __int16 v24 = a1;
  char v23 = a2;
  uint64_t v22 = a3;
  char v21 = a4;
  unsigned int v20 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  unsigned int v20 = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v19, a2, a3, Instance);
  if (!v20)
  {
    ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v19);
    Dscp  = ot::Ip6::Header::GetDscp(v5);
    *char v21 = ot::Ip6::Ip6::DscpToPriority((ot::Ip6::Ip6 *)Dscp);
    if (ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v19))
    {
      IcmpHeader  = (ot::Ip6::Icmp::Header *)ot::Ip6::Headers::GetIcmpHeader((ot::Ip6::Headers *)v19);
      if (ot::Ip6::Icmp::Header::IsError(IcmpHeader)) {
        *char v21 = 3;
      }
    }

    if (ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v19))
    {
      UdpHeader  = (ot::Ip6::Udp::Header *)ot::Ip6::Headers::GetUdpHeader((ot::Ip6::Headers *)v19);
      unsigned __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort(UdpHeader);
      if (DestinationPort == 19788)
      {
        *char v21 = 3;
      }

      else
      {
        int v14 = (ot::Tmf::Agent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v19);
        DestinationAddress  = (const ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v19);
        if ((ot::Tmf::Agent::IsTmfMessage(v14, SourceAddress, DestinationAddress, DestinationPort) & 1) != 0)
        {
          ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v19);
          unsigned __int8 v11 = ot::Ip6::Header::GetDscp(v10);
          *char v21 = ot::Tmf::Agent::DscpToPriority((ot::Tmf::Agent *)v11);
        }
      }
    }
  }

  return v20;
}

BOOL *ot::Message::Settings::Settings(BOOL *a1, BOOL a2)
{
  return a1;
}

uint64_t ot::Message::AppendData<(ot::DataLengthType)1>(ot::Message *a1, uint64_t a2)
{
  uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes(a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(a2);
  return ot::Message::AppendBytes(a1, Bytes, Length);
}

{
  return __ZN2ot7Message10AppendDataILNS_14DataLengthTypeE1EEE7otErrorRKNS_4DataIXT_EEE(a1, a2);
}

void ot::MeshForwarder::LogLowpanHcFrameDrop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  char v12 = a5 & 1;
  char v11 = ot::ErrorToString(a2);
  ot::Mac::Address::ToString((ot::Mac::Address *)a4, (ot::StringWriter *)v15);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v15);
  ot::Mac::Address::ToString((ot::Mac::Address *)(a4 + 10), (ot::StringWriter *)v14);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v14);
  ot::ToYesNo((ot *)(v12 & 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "Dropping rx lowpan HC frame, error:%s, len:%d, src:%s, dst:%s, sec:%s",  v5,  v6,  v7,  v8,  v9,  v10,  v11);
}

uint64_t ot::Utils::HistoryTracker::RecordRxMessage( ot::Utils::HistoryTracker *this, const ot::Message *a2, const ot::Mac::Address *a3)
{
  return ot::Utils::HistoryTracker::RecordMessage(this, a2, a3, 0);
}

{
  return __ZN2ot5Utils14HistoryTracker15RecordRxMessageERKNS_7MessageERKNS_3Mac7AddressE(this, a2, a3);
}

uint64_t ot::Ip6::Headers::GetUdpHeader(ot::Ip6::Headers *this)
{
  return (uint64_t)this + 40;
}

{
  return __ZNK2ot3Ip67Headers12GetUdpHeaderEv(this);
}

BOOL ot::ChildTable::Contains(ot::ChildTable *this, const ot::Neighbor *a2)
{
  BOOL v3 = 0;
  return v3;
}

{
  return __ZNK2ot10ChildTable8ContainsERKNS_8NeighborE(this, a2);
}

BOOL ot::Neighbor::IsEnhAckProbingActive(ot::Neighbor *this)
{
  BOOL v2 = 1;
  if ((*((_BYTE *)this + 128) & 2) == 0)
  {
    BOOL v2 = 1;
    if ((*((_BYTE *)this + 128) & 4) == 0) {
      return (*((_BYTE *)this + 128) & 8) != 0;
    }
  }

  return v2;
}

{
  return __ZNK2ot8Neighbor21IsEnhAckProbingActiveEv(this);
}

char *ot::MeshForwarder::MessageActionToString(uint64_t a1, unsigned __int8 a2, int a3)
{
  char v4 = ot::MeshForwarder::MessageActionToString(ot::MeshForwarder::MessageAction,otError)::kMessageActionStrings[a2];
  if (a3) {
    return ot::MeshForwarder::MessageActionToString(ot::MeshForwarder::MessageAction,otError)::kMessageFailedActionStrings[a2];
  }
  return v4;
}

char *ot::MeshForwarder::MessagePriorityToString(ot::MeshForwarder *this, const ot::Message *a2)
{
  unsigned __int8 Priority = ot::Message::GetPriority(a2);
  return ot::Message::PriorityToString(Priority);
}

uint64_t ot::MeshForwarder::LogIp6SourceDestAddresses( uint64_t a1, ot::Ip6::Headers *a2, uint64_t a3, const char *a4)
{
  unsigned __int16 SourcePort = ot::Ip6::Headers::GetSourcePort(a2);
  unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort(a2);
  if (SourcePort)
  {
    __str  = (char *)&a4[strlen(a4)];
    __size  = 2048 - strlen(a4);
    SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(a2);
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v28);
    uint64_t v5 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v28);
    snprintf(__str, __size, " src:[%s]:%d", v5, SourcePort);
  }

  else
  {
    __int16 v18 = (char *)&a4[strlen(a4)];
    size_t v17 = 2048 - strlen(a4);
    uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(a2);
    ot::Ip6::Address::ToString(v6, (ot::StringWriter *)v27);
    uint64_t v7 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
    snprintf(v18, v17, " src:[%s]", v7);
  }

  if (DestinationPort)
  {
    uint64_t v16 = (char *)&a4[strlen(a4)];
    size_t v15 = 2048 - strlen(a4);
    DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(a2);
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v26);
    uint64_t v9 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v26);
    return snprintf(v16, v15, " dst:[%s]:%d", v9, DestinationPort);
  }

  else
  {
    int v14 = (char *)&a4[strlen(a4)];
    size_t v13 = 2048 - strlen(a4);
    char v11 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(a2);
    ot::Ip6::Address::ToString(v11, (ot::StringWriter *)v25);
    char v12 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v25);
    return snprintf(v14, v13, " dst:[%s]", v12);
  }

uint64_t ot::MeshForwarder::GetIp6SourceDestAddresses( ot::MeshForwarder *this, const ot::Ip6::Headers *a2, const ot::Mac::Address *a3, char *a4, uint64_t a5)
{
  v32  = this;
  uint64_t v31 = a2;
  unsigned int v30 = a3;
  unsigned __int16 v29 = a4;
  uint64_t v28 = a5;
  unsigned __int16 SourcePort = ot::Ip6::Headers::GetSourcePort(a2);
  unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort(v31);
  int v25 = 0;
  unsigned int Neighbor = 0LL;
  if (v30)
  {
    uint64_t v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v5, v30, 7);
  }

  SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(v31);
  if (SourcePort)
  {
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v37);
    uint64_t v7 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
    v25 += snprintf(&v29[v25], v28 - v25, " src=[%s]:%d,", v7, SourcePort);
  }

  else
  {
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v36);
    uint64_t v8 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v36);
    v25 += snprintf(&v29[v25], v28 - v25, " src=[%s],", v8);
  }

  DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(v31);
  if (DestinationPort)
  {
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v35);
    uint64_t v10 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v35);
    v25 += snprintf(&v29[v25], v28 - v25, " dst=[%s]:%d,", v10, DestinationPort);
  }

  else
  {
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v34);
    char v11 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
    v25 += snprintf(&v29[v25], v28 - v25, " dst=[%s],", v11);
  }

  if (!Neighbor) {
    return snprintf(&v29[v25], v28 - v25, " nbr_ext=nil, nbr_rloc=nil, nbr_age=nil");
  }
  unsigned int v20 = &v29[v25];
  size_t v19 = v28 - v25;
  ExtAddress  = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(Neighbor);
  ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v33);
  size_t v17 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v33);
  unsigned __int16 Rloc16 = (ot::TimerMilli *)ot::Neighbor::GetRloc16(Neighbor);
  unsigned __int16 v18 = (unsigned __int16)Rloc16;
  int Now = ot::TimerMilli::GetNow(Rloc16);
  LastHeard  = ot::Neighbor::GetLastHeard(Neighbor);
  int v14 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  unsigned __int8 v15 = ot::Time::MsecToSec(v14);
  return snprintf(v20, v19, " nbr_ext=%s, nbr_rloc=0x%04x, nbr_age=%d", v17, v18, v15);
}

uint64_t ot::MeshForwarder::SetChildTrafficTimestamp( ot::InstanceLocator *a1, ot::Ip6::Headers *a2, ot::Mac::Address *a3, char a4)
{
  unsigned __int16 v29 = a1;
  uint64_t v28 = a2;
  int v27 = a3;
  char v26 = a4;
  uint64_t result = ot::Ip6::Headers::GetIpProto(a2);
  char v25 = result;
  if (result == 17 || v25 == 6)
  {
    unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort(v28);
    uint64_t result = ot::Ip6::Headers::GetSourcePort(v28);
    unsigned __int16 v23 = result;
    char v22 = 0;
    char v21 = 0;
    if (DestinationPort == 19788 || v23 == 19788)
    {
      char v22 = 1;
    }

    else if (DestinationPort == 61631 || v23 == 61631)
    {
      char v21 = 1;
    }

    if ((v22 & 1) == 0 && (v21 & 1) == 0)
    {
      uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
      char v19 = ot::ChildTable::Iterate(v5, 0);
      unsigned int v20 = (ot::ChildTable::IteratorBuilder *)&v19;
      v18[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v19);
      v18[1]  = v6;
      v17[0]  = ot::ChildTable::IteratorBuilder::end(v20);
      v17[1]  = v7;
      while (1)
      {
        uint64_t result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v18, v17);
        if ((result & 1) == 0) {
          break;
        }
        uint64_t v16 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v18);
        BOOL v15 = 0;
        if (ot::Mac::Address::IsShort(v27))
        {
          int Rloc16 = (unsigned __int16)ot::Neighbor::GetRloc16(v16);
          unsigned __int16 Short = (ot::TimerMilli *)ot::Mac::Address::GetShort(v27);
          BOOL v15 = Rloc16 == (unsigned __int16)Short;
        }

        else
        {
          unsigned __int16 Short = (ot::TimerMilli *)ot::Mac::Address::IsExtended(v27);
          if ((Short & 1) != 0)
          {
            ExtAddress  = (const void *)ot::Neighbor::GetExtAddress(v16);
            ot::Mac::Address::GetExtended(v27);
            unsigned __int16 Short = (ot::TimerMilli *)ot::Equatable<ot::Mac::ExtAddress>::operator==(ExtAddress, v9);
            BOOL v15 = (Short & 1) != 0;
          }
        }

        if (v15)
        {
          if (v26 == 1)
          {
            int Now = ot::TimerMilli::GetNow(Short);
            ot::Neighbor::SetLastHeardTraffic((uint64_t)v16, Now);
          }

          else if (v26 == 4)
          {
            int v13 = ot::TimerMilli::GetNow(Short);
            ot::Neighbor::SetLastReassemblyTimeout((uint64_t)v16, v13);
          }
        }

        ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v18);
      }
    }
  }

  return result;
}

uint64_t ot::Neighbor::SetLastHeardTraffic(uint64_t result, int a2)
{
  *(_DWORD *)(result + 60)  = a2;
  return result;
}

{
  return __ZN2ot8Neighbor19SetLastHeardTrafficENS_4TimeE(result, a2);
}

uint64_t ot::Neighbor::SetLastReassemblyTimeout(uint64_t result, int a2)
{
  *(_DWORD *)(result + 6ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = a2;
  return result;
}

{
  return __ZN2ot8Neighbor24SetLastReassemblyTimeoutENS_4TimeE(result, a2);
}

void ot::MeshForwarder::LogIp6Message( ot::MeshForwarder *a1, unsigned __int8 a2, ot::Message *a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  v84  = &v105;
  v114  = a1;
  v113  = a2;
  v112  = a3;
  v111  = a4;
  v110  = a5;
  v109  = a6;
  v82  = a1;
  v106  = 0;
  v83  = "";
  v105  = "";
  strcpy(__format, ", offset=%hu, tag=%u");
  v103  = 5;
  __str[0]  = 0LL;
  __str[1]  = 0LL;
  v121[0]  = 0LL;
  *(void *)((char *)v121 + 7)  = 0LL;
  memset(__b, 0, sizeof(__b));
  bzero(v118, 0x400uLL);
  v102  = 0;
  v101  = 1500;
  bzero(v117, 0x5DCuLL);
  std::string::basic_string[abi:nn180100]<0>(&v100, "");
  std::string::basic_string[abi:nn180100]<0>(&v99, "");
  std::string::basic_string[abi:nn180100]<0>(&v98, "");
  Timestamp  = ot::Message::GetTimestamp(v112);
  if ((int)ot::Time::GetValue((ot::Time *)&Timestamp) > 0)
  {
    v94  = ot::Message::GetTimestamp((ot::Message *)v84[12]);
    int Value = ot::Time::GetValue((ot::Time *)&v94);
    TxDelayStats  = ot::MeshForwarder::GetTxDelayStats(v82, Value);
    v79  = &v95;
    std::to_string(&v95, TxDelayStats);
    v78  = &v96;
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(", txdelay=", &v95, (uint64_t)&v96);
    std::string::operator=[abi:nn180100]((uint64_t)&v100, (uint64_t)&v96);
    std::string::~string(&v96);
    std::string::~string(&v95);
    v91  = ot::Message::GetTimestamp((ot::Message *)v84[12]);
    int v8 = ot::Time::GetValue((ot::Time *)&v91);
    unsigned int v9 = ot::MeshForwarder::GetTxDelayStats(v82, v8);
    v81  = &v92;
    std::to_string(&v92, v9);
    v80  = &v93;
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>( ", rxdelayprevfrag=",  &v92,  (uint64_t)&v93);
    std::string::operator=[abi:nn180100]((uint64_t)&v99, (uint64_t)&v93);
    std::string::~string(&v93);
    std::string::~string(&v92);
  }

  FirstFragTimestamp  = ot::Message::GetFirstFragTimestamp((ot::Message *)v84[12]);
  if ((int)ot::Time::GetValue((ot::Time *)&FirstFragTimestamp) > 0)
  {
    v87  = ot::Message::GetTimestamp((ot::Message *)v84[12]);
    v75  = ot::Time::GetValue((ot::Time *)&v87);
    v86  = ot::Message::GetFirstFragTimestamp((ot::Message *)v84[12]);
    int v10 = ot::Time::GetValue((ot::Time *)&v86);
    v77  = &v88;
    std::to_string(&v88, v75 - v10);
    v76  = &v89;
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>( ", rxdelayfirstfrag=",  &v88,  (uint64_t)&v89);
    std::string::operator=[abi:nn180100]((uint64_t)&v98, (uint64_t)&v89);
    std::string::~string(&v89);
    std::string::~string(&v88);
  }

  if (!ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v108, (const ot::Message *)v84[12]))
  {
    if ((ot::MeshForwarder::IsMatter(v82, (const ot::Message *)v84[12], (ot::Ip6::Headers *)v108) & 1) != 0)
    {
      v102  = 1;
      v73  = v108;
      ot::MeshForwarder::GetMatterHeader(v82, (const ot::Ip6::Headers *)v108, __b);
      int Length = ot::Message::GetLength((ot::Message *)v84[12]);
      v85  = ot::Message::GetTimestamp((ot::Message *)v84[12]);
      int v11 = ot::Time::GetValue((ot::Time *)&v85);
      ot::MeshForwarder::CountMatterDuplicates((uint64_t)v82, (ot::Ip6::Headers *)v108, Length, v11, v113, v109);
    }

    char v12 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v82);
    if ((ot::MessagePool::GetIsBufferStatsEnabled(v12) & 1) != 0) {
      ot::Message::GetBufferIDs((ot::Message *)v84[12], v118);
    }
    v72  = 1;
    if (v113) {
      v72  = v113 == 4;
    }
    v107  = v72;
    v106  = 1;
    if ((ot::Message::IsRadioTypeSet((ot::Message *)v84[12]) & 1) != 0)
    {
      Radioint Type = ot::Message::GetRadioType((ot::Message *)v84[12]);
      v71  = ot::Mac::RadioTypeToString(RadioType);
    }

    else
    {
      v71  = "all";
    }

    *v84  = v71;
    v70  = 1;
    if (v113 != 4) {
      v70  = v113 == 0;
    }
    v104  = v70;
    if (v70)
    {
      Offset  = ot::Message::GetOffset((ot::Message *)v84[12]);
      DatagramTag  = ot::Message::GetDatagramTag((ot::Message *)v84[12]);
      snprintf((char *)__str, 0x1FuLL, __format, (unsigned __int16)Offset, DatagramTag);
    }

    if (v113 == 2) {
      v117[0]  = 0;
    }
    else {
      ot::MeshForwarder::GetIp6SourceDestAddresses( v82,  (const ot::Ip6::Headers *)v108,  (const ot::Mac::Address *)v84[11],  v117,  1500LL);
    }
    if (gEnableNetworkMonitor == 1 && v84[11] && (!v110 && v113 == 1 || v113 == 4)) {
      ot::MeshForwarder::SetChildTrafficTimestamp(v82, (ot::Ip6::Headers *)v108, (ot::Mac::Address *)v84[11], v113);
    }
    v62  = v109;
    v63  = ot::MeshForwarder::MessageActionToString((uint64_t)v82, v113, v110);
    v66  = (ot::Ip6::Headers *)v108;
    unsigned __int8 IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v108);
    v64  = ot::Ip6::Ip6::IpProtoToString((ot::Ip6::Ip6 *)IpProto, v16, v17, v18, v19, v20);
    v65  = ot::Message::GetLength((ot::Message *)v84[12]);
    int Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v108);
    Ecn  = ot::Ip6::Headers::GetEcn((ot::Ip6::Headers *)v108);
    v68  = ot::Ip6::Ip6::EcnToString(Ecn);
    if (v84[11])
    {
      char v22 = ", from=";
      if (v113) {
        char v22 = ", to=";
      }
      v61  = v22;
    }

    else
    {
      v61  = "";
    }

    v60  = v61;
    if (v84[11])
    {
      unsigned __int16 v23 = (ot::Mac::Address *)v84[11];
      v58  = v116;
      ot::Mac::Address::ToString(v23, (ot::StringWriter *)v116);
      v59  = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v116);
    }

    else
    {
      v59  = "";
    }

    v55  = v59;
    char IsLinkSecurityEnabled = ot::Message::IsLinkSecurityEnabled((ot::Message *)v84[12]);
    v56  = ot::ToYesNo((ot *)(IsLinkSecurityEnabled & 1));
    char v25 = "";
    if (v110) {
      char v25 = ", error=";
    }
    v57  = v25;
    if (v110) {
      v54  = ot::ErrorToString(v110);
    }
    else {
      v54  = "";
    }
    v51  = v54;
    v52  = ot::MeshForwarder::MessagePriorityToString(v82, (const ot::Message *)v84[12]);
    char v26 = ", rss=";
    if (!v107) {
      char v26 = "";
    }
    v53  = v26;
    if (v107)
    {
      RssAverager  = (ot::RssAverager *)ot::Message::GetRssAverager((ot::Message *)v84[12]);
      uint64_t v49 = v115;
      ot::RssAverager::ToString(RssAverager, (ot::StringWriter *)v115);
      int v50 = (const char *)ot::String<(unsigned short)10>::AsCString((uint64_t)v115);
    }

    else
    {
      int v50 = "";
    }

    uint64_t v45 = v50;
    uint64_t v28 = ", radio=";
    if ((v106 & 1) == 0) {
      uint64_t v28 = "";
    }
    uint64_t v46 = v28;
    unsigned __int16 v47 = *v84;
    ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v108);
    HopLimit  = ot::Ip6::Header::GetHopLimit(v29);
    if (v104) {
      uint64_t v44 = (const char *)__str;
    }
    else {
      uint64_t v44 = "";
    }
    uint64_t v40 = v44;
    uint64_t v41 = v84[12];
    unsigned int v30 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v82);
    TotalBufferCount  = ot::MessagePool::GetTotalBufferCount(v30);
    uint64_t v31 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v82);
    FreeBufferCount  = ot::MessagePool::GetFreeBufferCount(v31);
    std::string::c_str[abi:nn180100]();
    uint64_t v39 = v32;
    uint64_t v38 = v32;
    if (v113 && v113 != 4)
    {
      v37  = "";
    }

    else
    {
      std::string::c_str[abi:nn180100]();
      v37  = v33;
    }

    uint64_t v36 = v37;
    if ((v102 & 1) != 0) {
      v35  = __b;
    }
    else {
      v35  = "";
    }
    v34[26]  = v34;
    v34[1]  = v64;
    v34[2]  = v117;
    v34[3]  = (unsigned __int16)v65;
    v34[4]  = (unsigned __int16)Checksum;
    v34[5]  = v68;
    v34[6]  = v60;
    v34[7]  = v55;
    v34[8]  = v56;
    v34[9]  = v57;
    v34[10]  = v51;
    v34[11]  = v52;
    v34[12]  = v53;
    v34[13]  = v45;
    v34[14]  = v46;
    v34[15]  = v47;
    v34[16]  = HopLimit;
    v34[17]  = v40;
    v34[18]  = v41;
    v34[19]  = v118;
    v34[20]  = (unsigned __int16)TotalBufferCount;
    v34[21]  = (unsigned __int16)FreeBufferCount;
    v34[22]  = v38;
    v34[23]  = v36;
    v34[24]  = v35;
    ot::Logger::LogInModule( (ot *)"MeshForwarder",  v62,  "ITMD: %s IPv6 %s msg,%s, len=%d, chksum=%04x, ecn=%s%s%s, sec=%s%s%s, prio=%s%s%s%s%s, hlim=%u%s, buffer=%p%s, tot _buf=%d, free_buf=%d%s%s%s",  (uint64_t)v53,  (uint64_t)v52,  (uint64_t)v51,  (uint64_t)v57,  (uint64_t)v56,  (char)v63);
  }

  std::string::~string(&v98);
  std::string::~string(&v99);
  std::string::~string(&v100);
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>( const std::string::value_type *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3 = std::string::insert(a2, 0LL, a1);
  return std::string::basic_string[abi:nn180100](a3, (uint64_t)v3);
}

uint64_t ot::Message::GetFirstFragTimestamp(ot::Message *this)
{
  return *(unsigned int *)(ot::Buffer::GetMetadata(this) + 40);
}

{
  return __ZNK2ot7Message21GetFirstFragTimestampEv(this);
}

uint64_t ot::Ip6::Headers::GetEcn(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetEcn(this);
}

{
  return __ZNK2ot3Ip67Headers6GetEcnEv(this);
}

uint64_t ot::Ip6::Matter::Header::GetFlags(ot::Ip6::Matter::Header *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot3Ip66Matter6Header8GetFlagsEv(this);
}

uint64_t ot::Ip6::Matter::Header::GetSessionID(ot::Ip6::Matter::Header *this)
{
  return *(unsigned __int16 *)((char *)this + 1);
}

{
  return __ZNK2ot3Ip66Matter6Header12GetSessionIDEv(this);
}

uint64_t ot::Ip6::Matter::Header::GetSecurityFlags(ot::Ip6::Matter::Header *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot3Ip66Matter6Header16GetSecurityFlagsEv(this);
}

uint64_t ot::Ip6::Matter::Header::GetCounter(ot::Ip6::Matter::Header *this)
{
  return *((unsigned int *)this + 1);
}

{
  return __ZNK2ot3Ip66Matter6Header10GetCounterEv(this);
}

BOOL std::operator==[abi:nn180100]<ot::Ip6::Address *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::string_view::data[abi:nn180100](a1);
  return v3 == std::string_view::data[abi:nn180100](a2);
}

BOOL ot::SerialNumber::IsGreater<unsigned short>(__int16 a1, __int16 a2)
{
  return ot::SerialNumber::IsLess<unsigned short>(a2, a1);
}

{
  return __ZN2ot12SerialNumber9IsGreaterItEEbT_S2_(a1, a2);
}

BOOL ot::SerialNumber::IsLess<unsigned short>(__int16 a1, __int16 a2)
{
  return (__int16)(a1 - a2) < 0;
}

{
  return __ZN2ot12SerialNumber6IsLessItEEbT_S2_(a1, a2);
}

uint64_t ot::Message::SetFirstFragTimestamp(ot::Buffer *a1, int a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 40)  = a2;
  return result;
}

{
  return __ZN2ot7Message21SetFirstFragTimestampENS_4TimeE(a1, a2);
}

uint64_t ot::GetArrayEnd<ot::Child,(unsigned short)64>(uint64_t a1)
{
  return a1 + 36864;
}

{
  return __ZN2ot11GetArrayEndINS_5ChildELt64EEEPKT_RAT0__S3_(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::~__tree( uint64_t a1)
{
  return a1;
}

{
  void *v1;
  uint64_t v1 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy( a1,  v1);
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy( a1,  a2[1]);
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__node_alloc[abi:nn180100]();
    uint64_t v4 = v2;
    std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::deallocate[abi:nn180100]( v4,  a2);
  }

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>()
{
}

{
  __ZNSt3__116allocator_traitsINS_9allocatorINS_11__tree_nodeINS_12__value_typeIyN2ot10matterInfoEEEPvEEEEE7destroyB8nn180100INS_4pairIKyS5_EEvvEEvRS9_PT_();
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::deallocate[abi:nn180100]( uint64_t a1, void *a2)
{
}

void std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::deallocate[abi:nn180100]( uint64_t a1, void *a2)
{
}

void *std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::__default_init_tag>( void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<ot::Ip6::Address *,0,false>::__compressed_pair_elem[abi:nn180100]<decltype(nullptr),void>(a1);
  std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair_elem<ot::Ip6::Address *,0,false>::__compressed_pair_elem[abi:nn180100]<decltype(nullptr),void>( void *result)
{
  *uint64_t result = 0LL;
  return result;
}

void std::vector<ot::Ip6::Address>::__destroy_vector::operator()[abi:nn180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<ot::Ip6::Address>::__clear[abi:nn180100](*a1);
    std::string::__annotate_delete[abi:nn180100]();
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
    uint64_t v3 = v1;
    uint64_t v2 = (void *)**a1;
    std::vector<ot::Ip6::Address>::capacity[abi:nn180100](*a1);
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::deallocate[abi:nn180100](v3, v2);
  }

void std::vector<ot::Ip6::Address>::__clear[abi:nn180100](uint64_t *a1)
{
}

void std::allocator_traits<std::allocator<ot::Ip6::Address>>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

uint64_t std::vector<ot::Ip6::Address>::capacity[abi:nn180100](void *a1)
{
  return (*v1 - *a1) / 16LL;
}

void std::vector<ot::Ip6::Address>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 16LL)
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>();
  }

  *(void *)(a1 + 8)  = a2;
}

void std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>()
{
}

{
  __ZNSt3__116allocator_traitsINS_9allocatorIN2ot3Ip67AddressEEEE7destroyB8nn180100IS4_vEEvRS5_PT_();
}

void std::allocator<ot::Ip6::Address>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

uint64_t ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshForwarder::HandleTxDelayTimer)(v2);
}

uint64_t ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshForwarder::ScheduleTransmissionTask)(v2);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__count_unique<unsigned long long>( uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  while (v5)
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
    if (std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100]( v2,  a2))
    {
      uint64_t v5 = (void *)*v5;
    }

    else
    {
      std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
      if (!std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100]( v3,  (uint64_t)(v5 + 4),  a2)) {
        return 1LL;
      }
      uint64_t v5 = (void *)v5[1];
    }
  }

  return 0LL;
}

{
  return __ZNKSt3__16__treeINS_12__value_typeIyN2ot10matterInfoEEENS_19__map_value_compareIyS4_NS_4lessIyEELb1EEENS_9allocatorIS4_EEE14__count_uniqueIyEEmRKT_( a1,  a2);
}

BOOL std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100]( uint64_t a1, void *a2)
{
  return std::__less<void,void>::operator()[abi:nn180100]<unsigned long,unsigned long>(a1, a2, v2);
}

BOOL std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100]( uint64_t a1, uint64_t a2, void *a3)
{
  return std::__less<void,void>::operator()[abi:nn180100]<unsigned long,unsigned long>(a1, v3, a3);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  uint64_t v18 = a3;
  uint64_t v17 = a4;
  uint64_t v16 = a5;
  int v14 = std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__find_equal<unsigned long long>( a1,  (uint64_t)&v15,  a2);
  uint64_t v13 = *v14;
  char v12 = 0;
  if (!*v14)
  {
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( v17,  a1,  v18,  v16,  (uint64_t)v11);
    uint64_t v7 = v15;
    int v8 = v14;
    uint64_t v5 = (void *)std::string::__get_long_pointer[abi:nn180100]();
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__insert_node_at( a1,  v7,  v8,  v5);
    uint64_t v13 = std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::release[abi:nn180100]();
    char v12 = 1;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)v11);
  }

  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v10, v13);
  std::pair<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,long>,BOOL &,0>( (uint64_t)&v21,  &v10,  &v12);
  return v21;
}

{
  return __ZNSt3__16__treeINS_12__value_typeIyN2ot10matterInfoEEENS_19__map_value_compareIyS4_NS_4lessIyEELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIyJRKNS_21piecewise_construct_tENS_5tupleIJRKyEEENSG_IJEEEEEENS_4pairINS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEbEERKT_DpOT0_( a1,  a2,  a3,  a4,  a5);
}

uint64_t std::forward_as_tuple[abi:nn180100]<unsigned long long const&>(uint64_t a1)
{
  return v2;
}

void *std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__find_equal<unsigned long long>( uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v9 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root_ptr[abi:nn180100]();
  int v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
        if (!std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100]( v4,  a3)) {
          break;
        }
        if (!*v9)
        {
          *(void *)a2  = v9;
          return *(void **)a2;
        }

        int v8 = v9;
        unsigned int v9 = (void *)*v9;
      }

      std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
      if (!std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100]( v5,  (uint64_t)(v9 + 4),  a3)) {
        break;
      }
      if (!v9[1])
      {
        *(void *)a2  = v9;
        return v9 + 1;
      }

      int v8 = v9 + 1;
      unsigned int v9 = (void *)v9[1];
    }

    *(void *)a2  = v9;
    return v8;
  }

  else
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
    *(void *)a2  = v6;
    return *(void **)a2;
  }

{
  return __ZNSt3__16__treeINS_12__value_typeIyN2ot10matterInfoEEENS_19__map_value_compareIyS4_NS_4lessIyEELb1EEENS_9allocatorIS4_EEE12__find_equalIyEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_( a1,  a2,  a3);
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = a5;
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__node_alloc[abi:nn180100]();
  uint64_t v13 = v5;
  char v12 = 0;
  int v8 = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::allocate[abi:nn180100]( v5,  1uLL);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>::__tree_node_destructor[abi:nn180100]( (uint64_t)&v11,  v13,  0);
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::unique_ptr[abi:nn180100]<true,void>( a5,  (uint64_t)v8,  &v11);
  uint64_t v9 = v13;
  std::string::__get_long_pointer[abi:nn180100]();
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>( v9,  v6,  v16,  v15);
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::get_deleter[abi:nn180100]();
  *(_BYTE *)(v7 + 8)  = 1;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::~unique_ptr[abi:nn180100]( uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::reset[abi:nn180100]( a1,  0LL);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::allocate[abi:nn180100]( uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::allocate[abi:nn180100]( a1,  a2);
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>( uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( a1,  a2,  a3,  a4);
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorINS_11__tree_nodeINS_12__value_typeIyN2ot10matterInfoEEEPvEEEEE9constructB8nn180100INS_4pairIKyS5_EEJRKNS_21piecewise_construct_tENS_5tupleIJRSD_EEENSI_IJEEEEvEEvRS9_PT_DpOT0_( a1,  a2,  a3,  a4);
}

void *std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::allocate[abi:nn180100]( uint64_t a1, unint64_t a2)
{
  return std::__libcpp_allocate[abi:nn180100](48 * a2);
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::max_size[abi:nn180100]<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>,void>()
{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::max_size[abi:nn180100]();
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorINS_11__tree_nodeINS_12__value_typeIyN2ot10matterInfoEEEPvEEEEE8max_sizeB8nn180100IS9_vEEmRKS9_();
}

uint64_t std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::max_size[abi:nn180100]()
{
  return 0x555555555555555LL;
}

void *std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return std::pair<unsigned long long const,ot::matterInfo>::pair[abi:nn180100]<unsigned long long const&>(a2, *a4);
}

{
  return __ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeIyN2ot10matterInfoEEEPvEEE9constructB8nn180100INS_4pairIKyS4_EEJRKNS_21piecewise_construct_tENS_5tupleIJRSB_EEENSG_IJEEEEEEvPT_DpOT0_( a1,  a2,  a3,  a4);
}

void *std::pair<unsigned long long const,ot::matterInfo>::pair[abi:nn180100]<unsigned long long const&>( void *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  _ZNSt3__14pairIKyN2ot10matterInfoEEC1B8nn180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE( a1,  (uint64_t)&v4);
  return a1;
}

void *_ZNSt3__14pairIKyN2ot10matterInfoEEC1B8nn180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE( void *a1, uint64_t a2)
{
  return a1;
}

void *_ZNSt3__14pairIKyN2ot10matterInfoEEC2B8nn180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE( void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)std::get[abi:nn180100]<0ul,unsigned long long const&>(a2);
  uint64_t result = a1;
  *a1  = *v2;
  a1[1]  = 0LL;
  return result;
}

uint64_t std::get[abi:nn180100]<0ul,unsigned long long const&>(uint64_t a1)
{
  return std::string_view::data[abi:nn180100](a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::reset[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,void *>>>>::second[abi:nn180100]();
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::operator()[abi:nn180100]( v4,  v5);
  }

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::operator()[abi:nn180100]( uint64_t a1, void *a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>();
  }

  if (a2) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::deallocate[abi:nn180100]( *(void *)a1,  a2);
  }
}

void *std::tuple<unsigned long long const&>::tuple[abi:nn180100]<std::_And,0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJRKyEEC1B8nn180100IJLm0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_( a1,  a2);
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJRKyEEC1B8nn180100IJLm0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_( void *a1, uint64_t a2)
{
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJRKyEEC2B8nn180100IJLm0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_( void *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::vector<ot::Ip6::Address>::__make_iter[abi:nn180100](uint64_t a1, uint64_t a2)
{
  return v3;
}

void *std::vector<ot::Ip6::Address>::__construct_one_at_end[abi:nn180100]<ot::Ip6::Address const&>( uint64_t a1, __n128 *a2)
{
  uint64_t v9 = a1;
  int v8 = a2;
  std::vector<ot::Ip6::Address>::_ConstructTransaction::_ConstructTransaction[abi:nn180100](&v6, a1, 1LL);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  uint64_t v5 = v2;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>( v5,  v3,  v8);
  v7 += 16LL;
  return std::vector<ot::Ip6::Address>::_ConstructTransaction::~_ConstructTransaction[abi:nn180100](&v6);
}

{
  return __ZNSt3__16vectorIN2ot3Ip67AddressENS_9allocatorIS3_EEE22__construct_one_at_endB8nn180100IJRKS3_EEEvDpOT_( a1,  a2);
}

uint64_t std::vector<ot::Ip6::Address>::__push_back_slow_path<ot::Ip6::Address const&>( uint64_t *a1, __n128 *a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<ot::Ip6::Address>::size[abi:nn180100](a1);
  unint64_t v7 = std::vector<ot::Ip6::Address>::__recommend[abi:nn180100](a1, v3 + 1);
  uint64_t v4 = std::vector<ot::Ip6::Address>::size[abi:nn180100](a1);
  std::__split_buffer<ot::Ip6::Address>::__split_buffer(v11, v7, v4, v13);
  uint64_t v8 = v13;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>( v8,  v5,  v14);
  v12 += 16LL;
  std::vector<ot::Ip6::Address>::__swap_out_circular_buffer(a1, v11);
  uint64_t v10 = a1[1];
  std::__split_buffer<ot::Ip6::Address>::~__split_buffer(v11);
  return v10;
}

{
  return __ZNSt3__16vectorIN2ot3Ip67AddressENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEPS3_OT_(a1, a2);
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::_ConstructTransaction[abi:nn180100]( void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

double std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>( uint64_t a1, __n128 *a2, __n128 *a3)
{
  return std::allocator<ot::Ip6::Address>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&>(a1, a2, a3);
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorIN2ot3Ip67AddressEEEE9constructB8nn180100IS4_JRKS4_EvEEvRS5_PT_DpOT0_( a1,  a2,  a3);
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::~_ConstructTransaction[abi:nn180100]( void *a1)
{
  return a1;
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::_ConstructTransaction[abi:nn180100]( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = *(void *)(a2 + 8);
  result[2]  = *(void *)(a2 + 8) + 16 * a3;
  return result;
}

__n128 std::allocator<ot::Ip6::Address>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&>( uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2  = *a3;
  return result;
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::~_ConstructTransaction[abi:nn180100]( void *result)
{
  *(void *)(*result + 8LL)  = result[1];
  return result;
}

unint64_t std::vector<ot::Ip6::Address>::__recommend[abi:nn180100](void *a1, uint64_t a2)
{
  v7[1]  = a1;
  v7[0]  = a2;
  unint64_t v6 = std::vector<ot::Ip6::Address>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<ot::Ip6::Address>::__throw_length_error[abi:nn180100]();
  }
  unint64_t v5 = std::vector<ot::Ip6::Address>::capacity[abi:nn180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:nn180100]<unsigned long>(&v4, v7);
}

void **std::__split_buffer<ot::Ip6::Address>::__split_buffer( void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  void v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1]  = a4;
  uint64_t v15 = a1;
  v11[0]  = 0LL;
  std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::allocator<ot::Ip6::Address> &>( a1 + 3,  (uint64_t)v11,  a4);
  if (v13)
  {
    uint64_t v4 = std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100]((uint64_t)a1);
    *a1  = std::__allocate_at_least[abi:nn180100]<std::allocator<ot::Ip6::Address>>(v4, v13);
    uint64_t v13 = v5;
  }

  else
  {
    *a1  = 0LL;
  }

  unint64_t v6 = (uint64_t)*a1 + 16 * v12;
  a1[2]  = (void *)v6;
  a1[1]  = (void *)v6;
  uint64_t v9 = (unint64_t)*a1 + 16 * v13;
  std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]();
  *unint64_t v7 = v9;
  return v15;
}

void std::vector<ot::Ip6::Address>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::string::__annotate_delete[abi:nn180100]();
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](v12, a1[1]);
  std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](v11, *a1);
  std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](v10, v14[1]);
  v13[0]  = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<ot::Ip6::Address>,std::reverse_iterator<ot::Ip6::Address*>,std::reverse_iterator<ot::Ip6::Address*>,ot::Ip6::Address,void>( v7,  v12[0],  v12[1],  v11[0],  v11[1],  v10[0],  v10[1]);
  v13[1]  = v3;
  uint64_t v4 = std::string_view::size[abi:nn180100]((uint64_t)v13);
  v14[1]  = v4;
  std::swap[abi:nn180100]<ot::Ip6::Address *>(a1, v14 + 1);
  std::swap[abi:nn180100]<ot::Ip6::Address *>(a1 + 1, v14 + 2);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  uint64_t v8 = v5;
  std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]();
  std::swap[abi:nn180100]<ot::Ip6::Address *>(v8, v6);
  *uint64_t v14 = v14[1];
  std::vector<ot::Ip6::Address>::size[abi:nn180100](a1);
  std::string::__annotate_new[abi:nn180100]();
}

void **std::__split_buffer<ot::Ip6::Address>::~__split_buffer(void **a1)
{
  return a1;
}

{
  void *v2;
  uint64_t v3;
  std::__split_buffer<ot::Ip6::Address>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v3 = std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100]((uint64_t)a1);
    uint64_t v2 = *a1;
    std::__split_buffer<ot::Ip6::Address>::capacity[abi:nn180100](a1);
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::deallocate[abi:nn180100](v3, v2);
  }

  return a1;
}

uint64_t std::vector<ot::Ip6::Address>::max_size(uint64_t a1)
{
  v3[1]  = a1;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  v3[0]  = std::allocator_traits<std::allocator<ot::Ip6::Address>>::max_size[abi:nn180100]<std::allocator<ot::Ip6::Address>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:nn180100]();
  return *std::min[abi:nn180100]<unsigned long>(v3, &v2);
}

void std::vector<ot::Ip6::Address>::__throw_length_error[abi:nn180100]()
{
}

void *std::max[abi:nn180100]<unsigned long>(void *a1, void *a2)
{
  return std::max[abi:nn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

uint64_t std::allocator_traits<std::allocator<ot::Ip6::Address>>::max_size[abi:nn180100]<std::allocator<ot::Ip6::Address>,void>()
{
  return std::allocator<ot::Ip6::Address>::max_size[abi:nn180100]();
}

{
  return __ZNSt3__116allocator_traitsINS_9allocatorIN2ot3Ip67AddressEEEE8max_sizeB8nn180100IS5_vEEmRKS5_();
}

uint64_t std::numeric_limits<long>::max[abi:nn180100]()
{
  return std::__libcpp_numeric_limits<long,true>::max[abi:nn180100]();
}

uint64_t std::allocator<ot::Ip6::Address>::max_size[abi:nn180100]()
{
  return 0xFFFFFFFFFFFFFFFLL;
}

uint64_t std::__libcpp_numeric_limits<long,true>::max[abi:nn180100]()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

void std::__throw_length_error[abi:nn180100]()
{
}

void *std::max[abi:nn180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  else {
    return a1;
  }
}

void *std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::allocator<ot::Ip6::Address> &>( void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<ot::Ip6::Address *,0,false>::__compressed_pair_elem[abi:nn180100]<decltype(nullptr),void>(a1);
  ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator(a1 + 1, a3);
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ot::Ip6::Address>>( uint64_t a1, unint64_t a2)
{
  return std::allocator<ot::Ip6::Address>::allocate[abi:nn180100](a1, a2);
}

uint64_t std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100](uint64_t a1)
{
  return std::__compressed_pair<ot::Ip6::Address *>::second[abi:nn180100](a1 + 24);
}

void std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]()
{
}

void *std::allocator<ot::Ip6::Address>::allocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  return std::__libcpp_allocate[abi:nn180100](16 * a2);
}

uint64_t std::__compressed_pair<ot::Ip6::Address *>::second[abi:nn180100](uint64_t a1)
{
  return std::string_view::data[abi:nn180100](a1 + 8);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<ot::Ip6::Address>,std::reverse_iterator<ot::Ip6::Address*>,std::reverse_iterator<ot::Ip6::Address*>,ot::Ip6::Address,void>( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return std::move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( a2,  a3,  a4,  a5,  a6,  a7);
}

void *std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](void *a1, uint64_t a2)
{
  return a1;
}

uint64_t *std::swap[abi:nn180100]<ot::Ip6::Address *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = *a2;
  *a2  = v2;
  return result;
}

uint64_t std::move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = a1;
  unint64_t v14 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v9 = a5;
  uint64_t v10 = a6;
  std::__move[abi:nn180100]<std::_ClassicAlgPolicy,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( a1,  a2,  a3,  a4,  a5,  a6,  &v7);
  return v8;
}

_OWORD *std::__move[abi:nn180100]<std::_ClassicAlgPolicy,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

_OWORD *std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

_OWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  v26.n128_u64[0]  = a1;
  v26.n128_u64[1]  = a2;
  *(void *)&__int128 v25 = a3;
  *((void *)&v25 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a4;
  *(void *)&__int128 v24 = a5;
  *((void *)&v24 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a6;
  __n128 v22 = v26;
  __int128 v21 = v25;
  std::__unwrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( a1,  a2,  a3,  a4,  v23);
  __int128 v18 = v23[0];
  __int128 v17 = v23[1];
  v14[1]  = v24;
  std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>();
  unint64_t v15 = v7;
  unint64_t v16 = v8;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( &v19,  v18,  *((uint64_t *)&v18 + 1),  v17,  *((uint64_t *)&v17 + 1),  v7,  v8);
  v13[2]  = v26;
  v13[1]  = v19;
  *(void *)&v14[0]  = std::__rewrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( v26.n128_i64[0],  v26.n128_i64[1],  v19.n128_i64[0]);
  *((void *)&v14[0] + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
  v13[0].n128_u64[0]  = std::__rewrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>>( v24,  *((uint64_t *)&v24 + 1),  v20);
  v13[0].n128_u64[1]  = v10;
  return std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( v14,  v13,  a7);
}

_OWORD *std::__unwrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  v15.n128_u64[0]  = a1;
  v15.n128_u64[1]  = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  v11[1]  = v15;
  std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>();
  *(void *)&__int128 v12 = v5;
  *((void *)&v12 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v6;
  std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>();
  v11[0].n128_u64[0]  = v7;
  v11[0].n128_u64[1]  = v8;
  return std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( &v12,  v11,  a5);
}

_OWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  *(void *)&__int128 v12 = a1;
  *((void *)&v12 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  v11[0]  = a3;
  v11[1]  = a4;
  v10.n128_u64[0]  = a5;
  v10.n128_u64[1]  = a6;
  while (std::operator!=[abi:nn180100]<ot::Ip6::Address *,ot::Ip6::Address *>((uint64_t)&v12, (uint64_t)v11))
  {
    unint64_t v8 = (_OWORD *)std::_IterOps<std::_ClassicAlgPolicy>::__iter_move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *> &,0>((uint64_t)&v12);
    *(_OWORD *)std::reverse_iterator<ot::Ip6::Address *>::operator*[abi:nn180100]((uint64_t)&v10)  = *v8;
    std::reverse_iterator<ot::Ip6::Address *>::operator++[abi:nn180100]((uint64_t)&v12);
    std::reverse_iterator<ot::Ip6::Address *>::operator++[abi:nn180100]((uint64_t)&v10);
  }

  return std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( &v12,  &v10,  a7);
}

void std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>()
{
}

_OWORD *std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>( _OWORD *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  return std::pair<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>::pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>( a3,  a1,  a2);
}

uint64_t std::__rewrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__rewrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>>( a1,  a2,  a3);
}

uint64_t std::__rewrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>::__rewrap[abi:nn180100](a1, a2, a3);
}

BOOL std::operator!=[abi:nn180100]<ot::Ip6::Address *,ot::Ip6::Address *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::string_view::size[abi:nn180100](a1);
  return v3 != std::string_view::size[abi:nn180100](a2);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::__iter_move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *> &,0>( uint64_t a1)
{
  return std::reverse_iterator<ot::Ip6::Address *>::operator*[abi:nn180100](a1);
}

uint64_t std::reverse_iterator<ot::Ip6::Address *>::operator*[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 16LL;
}

uint64_t std::reverse_iterator<ot::Ip6::Address *>::operator++[abi:nn180100](uint64_t result)
{
  *(void *)(result + 8) -= 16LL;
  return result;
}

  ;
}

_OWORD *std::pair<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>::pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>( _OWORD *a1, _OWORD *a2, __n128 *a3)
{
  return a1;
}

__n128 std::pair<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>::pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>( _OWORD *a1, _OWORD *a2, __n128 *a3)
{
  *a1  = *a2;
  __n128 result = *a3;
  a1[1]  = *a3;
  return result;
}

uint64_t std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>::__rewrap[abi:nn180100]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100]( void *result, uint64_t a2)
{
  *__n128 result = a2;
  result[1]  = a2;
  return result;
}

void std::__split_buffer<ot::Ip6::Address>::clear[abi:nn180100](uint64_t a1)
{
}

uint64_t std::__split_buffer<ot::Ip6::Address>::capacity[abi:nn180100](void *a1)
{
  return (*v1 - *a1) / 16LL;
}

void std::__split_buffer<ot::Ip6::Address>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
}

{
  while (a2 != *(void *)(a1 + 16))
  {
    std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100](a1);
    *(void *)(a1 + 16) -= 16LL;
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>();
  }

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::clear( uint64_t a1)
{
  uint64_t v1 = (void *)std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy( a1,  v1);
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::size[abi:nn180100]();
  *uint64_t v2 = 0LL;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  uint64_t v6 = v3;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  *uint64_t v4 = v6;
  std::__tree<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<std::string,unsigned int>,std::__value_type<std::pair<std::string,unsigned int>,unsigned int>,std::less<std::pair<std::string,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>>::__end_node[abi:nn180100]();
  *uint64_t v5 = 0LL;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v8 = a1;
  unint64_t v7 = a2;
  uint64_t v9 = a1;
  uint64_t v2 = std::string::basic_string[abi:nn180100](std::string&&)::{lambda(std::string&)#1}::operator()((uint64_t)&v6, a2);
  *(_OWORD *)a1  = *(_OWORD *)v2;
  *(void *)(a1 + ot::Tlv::SetLength((uint64_t)this, 16) = *(void *)(v2 + 16);
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *(_OWORD *)uint64_t v3 = 0uLL;
  *(void *)(v3 + ot::Tlv::SetLength((uint64_t)this, 16) = 0LL;
  std::string::__annotate_new[abi:nn180100]();
  if (!std::string::__is_long[abi:nn180100]())
  {
    std::string::size[abi:nn180100]();
    std::string::__annotate_new[abi:nn180100]();
  }

  return v9;
}

uint64_t std::string::basic_string[abi:nn180100](std::string&&)::{lambda(std::string&)#1}::operator()( uint64_t a1, uint64_t a2)
{
  if (!std::string::__is_long[abi:nn180100]()) {
    std::string::__annotate_delete[abi:nn180100]();
  }
  return a2;
}

uint64_t __cxx_global_var_init_8()
{
  return __cxa_atexit( (void (*)(void *))std::map<unsigned long long,ot::matterInfo>::~map[abi:nn180100],  &mMatterRxMap,  (void *)&_mh_execute_header);
}

uint64_t __cxx_global_var_init_1_8()
{
  return __cxa_atexit( (void (*)(void *))std::map<unsigned long long,ot::matterInfo>::~map[abi:nn180100],  &mMatterTxMap,  (void *)&_mh_execute_header);
}

uint64_t __cxx_global_var_init_2_0()
{
  return __cxa_atexit( (void (*)(void *))std::vector<ot::Ip6::Address>::~vector[abi:nn180100],  mMatterEidList,  (void *)&_mh_execute_header);
}

uint64_t _GLOBAL__sub_I_mesh_forwarder_cpp()
{
  return __cxx_global_var_init_2_0();
}

char *ot::BinarySearch::Find( ot::BinarySearch *this, char *a2, const void *a3, unsigned __int16 a4, uint64_t (*a5)(ot::BinarySearch *, char *), int (*a6)(const void *, const void *))
{
  unsigned __int16 v10 = 0;
  unsigned __int16 v9 = (unsigned __int16)a3;
  while (v10 < (int)v9)
  {
    unsigned __int16 v8 = (v10 + v9) / 2;
    uint64_t v11 = &a2[a4 * v8];
    int v7 = a5(this, v11);
    if (!v7) {
      return v11;
    }
    if (v7 <= 0) {
      unsigned __int16 v9 = (v10 + v9) / 2;
    }
    else {
      unsigned __int16 v10 = v8 + 1;
    }
  }

  return 0LL;
}

uint64_t ot::MeshForwarder::SendMessage(ot::MeshForwarder *this, ot::Message *a2)
{
  v118  = this;
  v117  = a2;
  v86  = this;
  v116  = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  v87  = 0;
  UriPathOptions  = 0;
  ot::Message::SetOffset(v117, 0);
  ot::Message::SetDatagramTag(v117, 0);
  ot::Message::SetTimestampToNow(v117);
  v114  = -3905;
  unsigned __int16 Length = ot::Message::GetLength(v117);
  v88  = Length;
  v112  = v62;
  v89  = (Length + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin();
  v90  = &v62[-v89];
  *(void *)&v111[70]  = v2;
  memset(__b, v3, sizeof(__b));
  if (!ot::Message::GetType(v117))
  {
    v85  = (ot::Ip6::Headers *)v111;
    UriPathOptions  = ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v111, v117);
    if (ot::Ip6::Headers::IsUdp(v85)
      && (unsigned __int16)ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v111) == 61631
      && (unsigned __int16)ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v111) == 61631)
    {
      v110  = 594;
      unsigned __int16 Bytes = ot::Message::ReadBytes(v117, 0, v90, v88);
      v80  = Bytes;
      v81  = (ot::Ip6::Headers *)v111;
      UdpHeader  = (ot::Ip6::Udp::Header *)ot::Ip6::Headers::GetUdpHeader((ot::Ip6::Headers *)v111);
      __int16 v5 = ot::Ip6::Udp::Header::GetLength(UdpHeader);
      v84  = 8LL;
      v108  = v80 - (v5 - 8);
      v82  = v108;
      v83  = Bytes;
      uint64_t v6 = (ot::Ip6::Udp::Header *)ot::Ip6::Headers::GetUdpHeader(v81);
      unsigned __int16 v7 = ot::Ip6::Udp::Header::GetLength(v6);
      v57  = v82;
      v58  = v83;
      v59  = v7;
      v60  = (char *)v84;
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MeshForwarder",  "MeshForwarder::%s:coapOffset = %d, raw totalBytes = %d, Udp total packet unsigned __int16 Length = %d, udp header size = %d",  v8,  v9,  v10,  v11,  v12,  v13,  (char)"SendMessage");
      if (v90[v108] == v110 && v90[v108 + 1] == HIBYTE(v110))
      {
        v107  = 0LL;
        v79  = v117;
        unsigned __int16 v14 = ot::Message::GetLength(v117);
        v107  = ot::Message::Clone(v79, v14);
        if (!v107)
        {
          UriPathOptions  = 3;
          v61  = 3LL;
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"MeshForwarder",  "MeshForwarder::%s[BMLR]:Message Clone failed, error  = %d",  v15,  v16,  v17,  v18,  v19,  v20,  (char)"SendMessage");
          v119  = UriPathOptions;
          v106  = 1;
          return v119;
        }

        v105  = v107;
        ot::Message::RemoveHeader(v107, v108);
        if (ot::Coap::Message::ParseHeader(v105))
        {
          v61  = UriPathOptions;
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"MeshForwarder",  "MeshForwarder::%s[BMLR]:Failed to parse CoAP header, error  = %d",  v21,  v22,  v23,  v24,  v25,  v26,  (char)"SendMessage");
          ot::Message::Free(v107);
          v119  = UriPathOptions;
          v106  = 1;
          return v119;
        }

        UriPathOptions  = ot::Coap::Message::ReadUriPathOptions(v105, (char (*)[33])__b);
        if (!UriPathOptions)
        {
          v104  = ot::UriFromPath((ot *)__b, v27, v28, v29, v30, v31);
          if (v104 == 8)
          {
            v73  = Length;
            v71  = (ot::Ip6::Headers *)v111;
            SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v111);
            v70  = v121;
            ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v121);
            v74  = ot::String<(unsigned short)40>::AsCString((uint64_t)v70);
            DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(v71);
            v72  = v120;
            ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v120);
            v75  = ot::String<(unsigned short)40>::AsCString((uint64_t)v72);
            IsNonConfirmablePostRequest  = ot::Coap::Message::IsNonConfirmablePostRequest(v105);
            v77  = ot::Message::GetLength(v105);
            MessageId  = ot::Coap::Message::GetMessageId(v105);
            v78  = v56;
            v56[1]  = v73;
            v56[2]  = v74;
            v57  = v75;
            v58  = IsNonConfirmablePostRequest;
            v59  = (unsigned __int16)v77;
            v60  = __b;
            v61  = MessageId;
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshForwarder",  "MeshForwarder::%s[BMLR]: Ipv6 rawFrameunsigned __int16 Length = %d, src[%s] => dst[%s], coap NonConfirmablePost = %d, Messa geLength=%d, URI= %s, coapMessageId = %d",  v35,  v36,  v37,  v38,  v39,  v40,  (char)"SendMessage");
            ot::Message::Free(v107);
            platformSendPacketToBackBone(v90, Length);
            v119  = UriPathOptions;
            v106  = 1;
            return v119;
          }
        }

        ot::Message::Free(v107);
      }
    }
  }

  ot::PriorityQueue::Enqueue(v86, v117);
  LOBYTE(v6ot::MeshCoP::Tlv::SetType(this, 9) = ot::Message::GetType(v117);
  v69  = v69;
  if ((_BYTE)v69)
  {
    if (v69 == 2)
    {
      v54  = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(v86);
      Destination  = (ot::Child *)ot::ChildSupervisor::GetDestination(v54, v117);
      v63  = 0;
      if (Destination) {
        v63  = ot::Child::NeedsIndirectTransmission(Destination);
      }
      if (!v63) {
        __assert_rtn( "SendMessage",  "mesh_forwarder_ftd.cpp",  203,  "(child != nullptr) && child->NeedsIndirectTransmission()");
      }
      ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v86 + 384), v117, Destination);
      goto LABEL_48;
    }
  }

  else
  {
    v68  = (ot::Ip6::Header *)v103;
    ot::Message::Read<ot::Ip6::Header>(v117, 0, v103);
    IgnoreError();
    uint64_t v41 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v68);
    if (ot::Ip6::Address::IsMulticast(v41))
    {
      uint64_t v42 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v103);
      if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v42)) {
        ot::Message::SetDirectTransmission(v117);
      }
      if (ot::Message::GetSubType(v117) != 5)
      {
        v67  = (const void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v103);
        ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(v116);
        if (ot::Equatable<ot::Ip6::Address>::operator==(v67, v43)
          || (v66  = (const void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v103),
              ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(v116),
              ot::Equatable<ot::Ip6::Address>::operator==(v66, v44)))
        {
          uint64_t v45 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v86);
          v101  = ot::ChildTable::Iterate(v45, 1);
          v102  = (ot::ChildTable::IteratorBuilder *)&v101;
          v100[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v101);
          v100[1]  = v46;
          v99[0]  = ot::ChildTable::IteratorBuilder::end(v102);
          v99[1]  = v47;
          while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v100, v99))
          {
            v98  = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v100);
            if (ot::Child::NeedsIndirectTransmission(v98)) {
              ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v86 + 384), v117, v98);
            }
            ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v100);
          }
        }

        else
        {
          v48  = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v86);
          v96  = ot::ChildTable::Iterate(v48, 1);
          v97  = (ot::ChildTable::IteratorBuilder *)&v96;
          v95[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v96);
          v95[1]  = v49;
          v94[0]  = ot::ChildTable::IteratorBuilder::end(v97);
          v94[1]  = v50;
          while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v95, v94))
          {
            v93  = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v95);
            if (ot::Child::NeedsIndirectTransmission(v93))
            {
              v65  = v93;
              v51  = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v103);
              if (ot::Child::HasIp6Address(v65, v51)) {
                ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v86 + 384), v117, v93);
              }
            }

            ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v95);
          }
        }
      }

      goto LABEL_48;
    }

    v64  = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(v86);
    v52  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v103);
    unsigned int Neighbor = (ot::Child *)ot::NeighborTable::FindNeighbor(v64, v52, 1);
    if ((ot::Message::IsDirectTransmission(v117) & 1) == 0)
    {
      if (Neighbor)
      {
        v53  = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v86);
        if (ot::ChildTable::Contains(v53, Neighbor) && ot::Child::NeedsIndirectTransmission(Neighbor))
        {
          ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v86 + 384), v117, Neighbor);
          goto LABEL_48;
        }
      }
    }
  }

  ot::Message::SetDirectTransmission(v117);
LABEL_48:
  if ((ot::MeshForwarder::RemoveMessageIfNoPendingTx(v86, v117) & 1) == 0)
  {
    ot::MeshForwarder::ApplyDirectTxQueueLimit(v86, v117);
    ot::Tasklet::Post((ot::InstanceLocator *)((char *)v86 + 112));
  }

  v119  = UriPathOptions;
  v106  = 1;
  return v119;
}

uint64_t ot::Ip6::Udp::Header::GetLength(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot3Ip63Udp6Header9GetLengthEv(this);
}

BOOL ot::Child::NeedsIndirectTransmission(ot::Child *this)
{
  return !ot::Neighbor::IsRxOnWhenIdle(this);
}

{
  return __ZNK2ot5Child25NeedsIndirectTransmissionEv(this);
}

uint64_t ot::MeshForwarder::HandleResolved(uint64_t a1, const void *a2, int a3)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  int v21 = a3;
  char v19 = 0;
  uint64_t v18 = (ot::PriorityQueue *)a1;
  v17[0]  = ot::PriorityQueue::begin((ot::PriorityQueue *)a1);
  v17[1]  = v3;
  v16[0]  = ot::PriorityQueue::end(v18);
  v16[1]  = v4;
  while (1)
  {
    uint64_t result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v17, v16);
    if ((result & 1) == 0) {
      break;
    }
    uint64_t v15 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v17);
    if ((ot::Message::IsResolvingAddress(v15) & 1) != 0)
    {
      ot::Message::Read<ot::Ip6::Address>(v15, 0x18u, v20);
      IgnoreError();
      if (!ot::Unequatable<ot::Ip6::Address>::operator!=(v20, v22))
      {
        if (v21)
        {
          ot::MeshForwarder::LogMessage((ot::MeshForwarder *)a1, 3u, v15, 9, 0LL);
          ot::PriorityQueue::DequeueAndFree((ot::PriorityQueue *)a1, v15);
        }

        else
        {
          unsigned __int16 v7 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>((ot::InstanceLocator *)a1);
          if (ot::BackboneRouter::Local::IsPrimary(v7)
            && (uint64_t v8 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1),
                ot::BackboneRouter::Leader::IsDomainUnicast(v8, (const ot::Ip6::Address *)v20))
            && (uint64_t v9 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)a1),
                int v12 = (unsigned __int16)ot::AddressResolver::LookUp(v9, (const ot::Ip6::Address *)v20),
                uint64_t v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1),
                v12 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v10)))
          {
            ot::PriorityQueue::Dequeue((ot::PriorityQueue *)a1, v15);
            ot::Message::Read<unsigned char>(v15, 7u, &v14);
            IgnoreError();
            ++v14;
            ot::Message::Write<unsigned char>(v15, 7u, &v14);
            uint64_t v11 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>((ot::InstanceLocator *)a1);
            ot::Ip6::Ip6::HandleDatagram(v11, v15, 2u, 0LL, 0);
            IgnoreError();
          }

          else
          {
            ot::Message::SetResolvingAddress(v15, 0);
            char v19 = 1;
          }
        }
      }
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v17, v6);
  }

  if ((v19 & 1) != 0) {
    return ot::Tasklet::Post((ot::Tasklet *)(a1 + 112));
  }
  return result;
}

uint64_t ot::MeshForwarder::EvictMessage(ot::MeshForwarder *a1, unsigned __int8 a2)
{
  uint64_t v10 = 0LL;
  unsigned int v11 = ot::MeshForwarder::RemoveAgedMessages(a1);
  if (v11 == 23)
  {
    for (unsigned __int8 i = 0; i < (int)a2; ++i)
    {
      ot::PriorityQueue::GetHeadForPriority((uint64_t)a1, i);
      for (unsigned __int16 j = v2; j && i == ot::Message::GetPriority(j); unsigned __int16 j = (ot::Message *)ot::Message::GetNext(j))
      {
        if ((ot::Message::GetDoNotEvict(j) & 1) == 0)
        {
          uint64_t v10 = j;
          unsigned int v11 = 0;
          goto LABEL_21;
        }
      }
    }

    for (unsigned __int8 k = a2; k < 4u; ++k)
    {
      ot::PriorityQueue::GetHeadForPriority((uint64_t)a1, a2);
      for (m  = v3; m && k == ot::Message::GetPriority(m); m  = (ot::Message *)ot::Message::GetNext(m))
      {
        if ((ot::Message::GetDoNotEvict(m) & 1) == 0 && (ot::Message::IsChildPending(m) & 1) != 0)
        {
          uint64_t v10 = m;
          unsigned int v11 = 0;
          goto LABEL_21;
        }
      }
    }
  }

void ot::PriorityQueue::GetHeadForPriority(uint64_t a1, unsigned __int8 a2)
{
}

{
  __ZN2ot13PriorityQueue18GetHeadForPriorityENS_7Message8PriorityE(a1, a2);
}

BOOL ot::MeshForwarder::RemoveMessages(uint64_t a1, ot::Child *a2, unsigned __int8 a3)
{
  uint64_t v24 = a1;
  uint64_t v23 = a2;
  unsigned __int8 v22 = a3;
  int v21 = (ot::PriorityQueue *)a1;
  v20[0]  = ot::PriorityQueue::begin((ot::PriorityQueue *)a1);
  v20[1]  = v3;
  v19[0]  = ot::PriorityQueue::end(v21);
  v19[1]  = v4;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v20, v19);
    if (!result) {
      break;
    }
    uint64_t v18 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v20);
    if (!v22 || (int v14 = v22, v14 == ot::Message::GetSubType(v18)))
    {
      if (ot::IndirectSender::RemoveMessageFromSleepyChild((ot::IndirectSender *)(a1 + 384), v18, v23))
      {
        int Type = ot::Message::GetType(v18);
        if (Type)
        {
          if (Type == 1)
          {
            ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v16, v18);
            IgnoreError();
            uint64_t v10 = v23;
            uint64_t v9 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
            Destination  = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v16);
            if (v10 == (ot::Child *)ot::NeighborTable::FindNeighbor(v9, Destination, 1)) {
              ot::Message::ClearDirectTransmission(v18);
            }
          }
        }

        else
        {
          ot::Message::Read<ot::Ip6::Header>(v18, 0, v17);
          IgnoreError();
          int v12 = v23;
          unsigned int v11 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
          unsigned __int16 v7 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v17);
          if (v12 == (ot::Child *)ot::NeighborTable::FindNeighbor(v11, v7, 1)) {
            ot::Message::ClearDirectTransmission(v18);
          }
        }
      }

      ot::MeshForwarder::RemoveMessageIfNoPendingTx((ot::MeshForwarder *)a1, v18);
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v20, v6);
  }

  return result;
}

BOOL ot::MeshForwarder::RemoveDataResponseMessages(ot::MeshForwarder *this)
{
  uint64_t v20 = this;
  uint64_t v18 = this;
  v17[0]  = ot::PriorityQueue::begin(this);
  v17[1]  = v1;
  v16[0]  = ot::PriorityQueue::end(v18);
  v16[1]  = v2;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v17, v16);
    if (!result) {
      break;
    }
    uint64_t v15 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v17);
    if (ot::Message::GetSubType(v15) == 9)
    {
      ot::Message::Read<ot::Ip6::Header>(v15, 0, v19);
      IgnoreError();
      Destination  = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v19);
      if (!ot::Ip6::Address::IsMulticast(Destination))
      {
        uint64_t v6 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        char v13 = ot::ChildTable::Iterate(v6, 5);
        int v14 = (ot::ChildTable::IteratorBuilder *)&v13;
        v12[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v13);
        v12[1]  = v7;
        v11[0]  = ot::ChildTable::IteratorBuilder::end(v14);
        v11[1]  = v8;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v12, v11))
        {
          uint64_t v10 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v12);
          ot::IndirectSender::RemoveMessageFromSleepyChild((ot::MeshForwarder *)((char *)this + 384), v15, v10);
          IgnoreError();
          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v12);
        }
      }

      if (*((ot::Message **)this + 6) == v15) {
        *((void *)this + 6)  = 0LL;
      }
      ot::MeshForwarder::LogMessage(this, 3u, v15, 0, 0LL);
      ot::PriorityQueue::DequeueAndFree(this, v15);
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v17, v4);
  }

  return result;
}

uint64_t ot::MeshForwarder::SendMesh(ot::MeshForwarder *this, ot::Message *a2, ot::Mac::TxFrame *a3)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v14[0]  = ot::Mac::Mac::GetPanId(v3);
  uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v14[1]  = ot::Mac::Mac::GetPanId(v4);
  ot::MeshForwarder::PrepareMacHeaders(this, v15, 1, (uint64_t)this + 56, v14, 5, 8, v16);
  int Length = (unsigned __int16)ot::Message::GetLength(v16);
  uint64_t v10 = v16;
  ot::Mac::Frame::GetPayload(v15);
  uint64_t v9 = v5;
  unsigned __int16 v6 = ot::Message::GetLength(v16);
  ot::Message::ReadBytes(v10, 0, v9, v6);
  unsigned int v11 = v15;
  __int16 v7 = ot::Message::GetLength(v16);
  ot::Mac::Frame::SetPayloadLength(v11, v7);
  uint64_t result = ot::Message::GetLength(v16);
  *((_WORD *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

uint64_t ot::MeshForwarder::UpdateMeshRoute(ot::MeshForwarder *this, ot::Message *a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  unsigned int v15 = 0;
  ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v14, a2);
  IgnoreError();
  unsigned int v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  Destination  = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v14);
  NextHop  = ot::Mle::MleRouter::GetNextHop(v11, Destination);
  if (NextHop == 65534)
  {
    uint64_t v9 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned __int16 v4 = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v14);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v9, v4, 1);
  }

  else
  {
    uint64_t v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v3, NextHop, 1);
  }

  if (Neighbor)
  {
    __int16 Rloc16 = ot::Neighbor::GetRloc16(Neighbor);
    ot::Mac::Address::SetShort((uint64_t)this + 66, Rloc16);
    unsigned __int16 v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ShortAddress  = ot::Mac::Mac::GetShortAddress(v6);
    ot::Mac::Address::SetShort((uint64_t)this + 56, ShortAddress);
    *((_BYTE *)this + 80)  = *((_BYTE *)this + 80) & 0xFE | 1;
    *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v14);
    *((_WORD *)this + 38)  = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v14);
  }

  else
  {
    return 2;
  }

  return v15;
}

uint64_t ot::MeshForwarder::EvaluateRoutingCost( ot::MeshForwarder *this, unsigned __int16 a2, unsigned __int8 *a3, unsigned __int16 *a4)
{
  unsigned __int16 v4 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  uint64_t result = ot::RouterTable::GetPathCost(v4, a2);
  if (*a4 == 65534 || result < (int)*a3)
  {
    *a4  = a2;
    *a3  = result;
  }

  return result;
}

uint64_t ot::MeshForwarder::AnycastRouteLookup( ot::InstanceLocator *a1, char a2, unsigned __int8 a3, _WORD *a4)
{
  int v21 = a1;
  unsigned __int8 v20 = a2;
  unsigned __int8 v19 = a3;
  uint64_t v18 = a4;
  *(_DWORD *)&v17[5]  = 0;
  v17[4]  = 16;
  *(_WORD *)&v17[1]  = -2;
  if (a3 <= 1u)
  {
    unsigned __int16 v4 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
    while (1)
    {
      while (1)
      {
        do
        {
          __int16 v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
          if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v5,  (unsigned int *)&v17[5],  (ot::NetworkData::OnMeshPrefixConfig *)v14)) {
            goto LABEL_19;
          }
          ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v14);
        }

        while (ot::Unequatable<ot::Ip6::Prefix>::operator!=(v6, v13));
        if (v19) {
          break;
        }
        if ((v15 & 0x10) != 0 || (v15 & 0x20) != 0) {
          goto LABEL_14;
        }
      }

      if (v19 != 1) {
        __assert_rtn("AnycastRouteLookup", "mesh_forwarder_ftd.cpp", 543, "false");
      }
      if ((v15 & 0x200) != 0) {
LABEL_14:
      }
        ot::MeshForwarder::EvaluateRoutingCost(a1, v16, &v17[4], (unsigned __int16 *)&v17[1]);
    }
  }

  if (a3 == 2)
  {
    while (1)
    {
      __int16 v7 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
      if (ot::NetworkData::NetworkData::GetNextService( v7,  (unsigned int *)&v17[5],  (ot::NetworkData::ServiceConfig *)v22)) {
        break;
      }
      if (v22[0] == v20) {
        ot::MeshForwarder::EvaluateRoutingCost(a1, v23, &v17[4], (unsigned __int16 *)&v17[1]);
      }
    }
  }

BOOL ot::Unequatable<ot::Ip6::Prefix>::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return !ot::Ip6::Prefix::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_3Ip66PrefixEEneERKS2_(a1, a2);
}

uint64_t ot::MeshForwarder::UpdateIp6RouteFtd(ot::MeshForwarder *this, ot::Ip6::Header *a2, ot::Message *a3)
{
  uint64_t v41 = this;
  uint64_t v40 = a2;
  uint64_t v39 = a3;
  uint64_t v38 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  BorderAgentRloc  = 0;
  if ((ot::MeshForwarder::IsMatter(this, v39, (ot::Ip6::Headers *)v35) & 1) != 0) {
    ot::MeshForwarder::UpdateMatterEidList(this, (const ot::Ip6::Headers *)v35);
  }
  Offset  = ot::Message::GetOffset(v39);
  if (v4 | (Offset == 0)) {
    char v5 = 1;
  }
  else {
    char v5 = 0;
  }
  if ((v5 & 1) == 0)
  {
    *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = ot::Message::GetMeshDest(v39);
    goto LABEL_39;
  }

  uint64_t v31 = v38;
  Destination  = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
  if (ot::Mle::Mle::IsRoutingLocator(v31, Destination))
  {
    __int16 v7 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
    Locator  = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    unsigned __int8 v9 = ot::Mle::RouterIdFromRloc16((ot::Mle *)Locator);
    if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)v9)) {
      return 2;
    }
    *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = Locator;
    goto LABEL_39;
  }

  uint64_t v30 = v38;
  uint64_t v10 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
  if (!ot::Mle::Mle::IsAnycastLocator(v30, v10))
  {
    uint64_t v29 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    uint64_t v18 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v29, v18, 1);
    if (Neighbor)
    {
      *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = ot::Neighbor::GetRloc16(Neighbor);
    }

    else
    {
      uint64_t v28 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int8 v19 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
      if ((ot::NetworkData::LeaderBase::IsOnMesh(v28, v19) & 1) != 0)
      {
        int v27 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        unsigned __int8 v20 = (__n128 *)ot::Ip6::Header::GetDestination(v40);
        BorderAgentRloc  = ot::AddressResolver::Resolve(v27, v20, (unsigned __int16 *)this + 39);
        if (BorderAgentRloc) {
          return BorderAgentRloc;
        }
      }

      else
      {
        uint64_t v26 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        Source  = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(v40);
        int v21 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
        ot::NetworkData::LeaderBase::RouteLookup(v26, Source, v21, (unsigned __int16 *)this + 39);
        IgnoreError();
      }
    }

    goto LABEL_39;
  }

  int v11 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
  int v12 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
  unsigned __int16 v33 = ot::Ip6::InterfaceIdentifier::GetLocator(v12);
  if (v33 == 64512)
  {
    LeaderId  = ot::Mle::Mle::GetLeaderId(v38);
    *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderId);
    goto LABEL_39;
  }

  if (v33 <= 0xFC0Fu)
  {
    BorderAgentRloc  = ot::MeshForwarder::AnycastRouteLookup(this, v33, 0, (_WORD *)this + 39);
    if (BorderAgentRloc) {
      return BorderAgentRloc;
    }
    goto LABEL_39;
  }

  if (v33 <= 0xFC2Fu)
  {
    BorderAgentRloc  = ot::MeshForwarder::AnycastRouteLookup(this, v33 - 16, 2u, (_WORD *)this + 39);
    if (BorderAgentRloc) {
      return BorderAgentRloc;
    }
    goto LABEL_39;
  }

  if (v33 <= 0xFC37u)
  {
    int v14 = (ot::MeshCoP *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    BorderAgentRloc  = ot::MeshCoP::GetBorderAgentRloc(v14, (ot::MeshForwarder *)((char *)this + 78), v15);
    if (BorderAgentRloc) {
      return BorderAgentRloc;
    }
    goto LABEL_39;
  }

  if (v33 == 64568)
  {
    unsigned __int16 v16 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    if (!ot::BackboneRouter::Leader::HasPrimary(v16)) {
      return 2;
    }
    uint64_t v17 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    *((_WORD *)this + 3ot::MeshCoP::Tlv::SetType(this, 9) = ot::BackboneRouter::Leader::GetServer16(v17);
    goto LABEL_39;
  }

  if (v33 < 0xFC40u || v33 > 0xFC4Eu) {
    return 2;
  }
  BorderAgentRloc  = ot::MeshForwarder::AnycastRouteLookup(this, v33 - 63, 1u, (_WORD *)this + 39);
  if (!BorderAgentRloc)
  {
LABEL_39:
    if (*((unsigned __int16 *)this + 39) == 65534)
    {
      return 2;
    }

    else
    {
      unsigned __int8 v22 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      *((_WORD *)this + 38)  = ot::Mac::Mac::GetShortAddress(v22);
      BorderAgentRloc  = ot::Mle::MleRouter::CheckReachability(v38, *((_WORD *)this + 39), v40);
      if (!BorderAgentRloc)
      {
        ot::Message::SetMeshDest(v39, *((_WORD *)this + 39));
        NextHop  = ot::Mle::MleRouter::GetNextHop(v38, *((_WORD *)this + 39));
        ot::Mac::Address::SetShort((uint64_t)this + 66, NextHop);
        if (*((unsigned __int16 *)this + 39) != (unsigned __int16)ot::Mac::Address::GetShort((ot::MeshForwarder *)((char *)this + 66)))
        {
          ot::Mac::Address::SetShort((uint64_t)this + 56, *((_WORD *)this + 38));
          *((_BYTE *)this + 80)  = *((_BYTE *)this + 80) & 0xFE | 1;
          *((_BYTE *)this + 80)  = *((_BYTE *)this + 80) & 0xEF | 0x10;
        }
      }
    }
  }

  return BorderAgentRloc;
}

uint64_t ot::Message::GetMeshDest(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 50);
}

{
  return __ZNK2ot7Message11GetMeshDestEv(this);
}

BOOL ot::Mle::MleRouter::IsRouterIdValid(ot::Mle::MleRouter *this)
{
  return this <= 0x3Eu;
}

{
  return __ZN2ot3Mle9MleRouter15IsRouterIdValidEh(this);
}

uint64_t ot::AddressResolver::Resolve( ot::AddressResolver::CacheEntry **this, __n128 *a2, unsigned __int16 *a3)
{
  return ot::AddressResolver::Resolve(this, a2, a3, 1);
}

{
  return __ZN2ot15AddressResolver7ResolveERKNS_3Ip67AddressERt(this, a2, a3);
}

uint64_t ot::Message::SetMeshDest(ot::Message *this, __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 50)  = a2;
  return result;
}

{
  return __ZN2ot7Message11SetMeshDestEt(this, a2);
}

void ot::MeshForwarder::SendIcmpErrorIfDstUnreach( ot::MeshForwarder *this, const ot::Message *a2, const ot::Mac::Addresses *a3)
{
  unsigned __int8 v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  if (ot::Mac::Address::IsShort(a3) && ot::Mac::Address::IsShort((ot::Mac::Address *)((char *)v17 + 10)))
  {
    char v13 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    __int16 Short = ot::Mac::Address::GetShort(v17);
    ot::ChildTable::FindChild(v13, Short, 5);
    if ((!v4 || ot::Neighbor::IsFullThreadDevice(v4))
      && !ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v15, v18))
    {
      DestinationAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v15);
      if (!ot::Ip6::Address::IsMulticast(DestinationAddress))
      {
        int v12 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        unsigned __int16 v6 = (const ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v15);
        if ((ot::NetworkData::LeaderBase::IsOnMesh(v12, v6) & 1) != 0)
        {
          int v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned __int16 v10 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v17 + 10));
          ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v15);
          int v16 = ot::Mle::MleRouter::CheckReachability(v11, v10, v7);
          if (v16 == 4)
          {
            unsigned __int16 v9 = ot::Mac::Address::GetShort(v17);
            unsigned __int16 v8 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v17 + 10));
            ot::MeshForwarder::SendDestinationUnreachable(this, v9, v8, (const ot::Ip6::Headers *)v15);
          }
        }
      }
    }
  }

void ot::MeshForwarder::SendDestinationUnreachable( ot::MeshForwarder *this, unsigned __int16 a2, unsigned __int16 a3, const ot::Ip6::Headers *a4)
{
  unsigned __int16 v23 = this;
  unsigned __int16 v22 = a2;
  unsigned __int16 v21 = a3;
  unsigned __int8 v20 = a4;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v19);
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v18);
  char v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::GetMeshLocal16(v4);
  __int16 v15 = v5;
  ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v19);
  *unsigned __int16 v6 = *v15;
  ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v19);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
  ot::Ip6::InterfaceIdentifier::SetLocator(Iid, v22);
  memcpy(v18, v19, sizeof(v18));
  unsigned __int16 v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::GetMeshLocal16(v9);
  int v16 = v10;
  ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)v18);
  *int v11 = *v16;
  ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)v18);
  char v13 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v12);
  ot::Ip6::InterfaceIdentifier::SetLocator(v13, v21);
  int v14 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
  ot::Ip6::Icmp::SendError(v14, 1, 0, (ot::Ip6::MessageInfo *)v19, v20, (uint64_t)v18);
  IgnoreError();
}

uint64_t ot::MeshForwarder::CheckReachability( ot::MeshForwarder *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3)
{
  uint64_t v17 = this;
  int v16 = a2;
  __int16 v15 = a3;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  unsigned int v14 = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v13, a2, a3, Instance);
  if (v14 == 23)
  {
    return 0;
  }

  else
  {
    unsigned __int16 v9 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    unsigned __int16 Short = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v15 + 10));
    ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v13);
    unsigned int v14 = ot::Mle::MleRouter::CheckReachability(v9, Short, v4);
    if (v14 == 4)
    {
      unsigned __int16 v7 = ot::Mac::Address::GetShort(v15);
      unsigned __int16 v5 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v15 + 10));
      ot::MeshForwarder::SendDestinationUnreachable(this, v7, v5, (const ot::Ip6::Headers *)v13);
    }
  }

  return v14;
}

uint64_t ot::Ip6::InterfaceIdentifier::SetLocator(ot::Ip6::InterfaceIdentifier *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return __ZN2ot3Ip619InterfaceIdentifier10SetLocatorEt(this, a2);
}

void ot::MeshForwarder::HandleMesh( ot::MeshForwarder *this, ot::FrameData *a2, const ot::Mac::Address *a3, const ot::ThreadLinkInfo *a4)
{
  v48  = this;
  uint64_t v47 = a2;
  uint64_t v46 = a3;
  uint64_t v45 = a4;
  int v44 = 0;
  uint64_t v43 = 0LL;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v41);
  if ((ot::ThreadLinkInfo::IsLinkSecurityEnabled(v45) & 1) != 0)
  {
    int v44 = ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v40, v47);
    if (!v44)
    {
      Source  = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v40);
      ot::Mac::Address::SetShort((uint64_t)v41, Source);
      Destination  = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v40);
      ot::Mac::Address::SetShort((uint64_t)v42, Destination);
      ot::MeshForwarder::UpdateRoutes(this, v47, (const ot::Mac::Addresses *)v41);
      int Short = (unsigned __int16)ot::Mac::Address::GetShort((ot::Mac::Address *)v42);
      unsigned __int16 v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      if (Short == (unsigned __int16)ot::Mac::Mac::GetShortAddress(v6)
        || (v32  = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
            unsigned __int16 v8 = ot::Mac::Address::GetShort((ot::Mac::Address *)v42),
            ot::Mle::MleRouter::IsMinimalChild(v32, v8)))
      {
        if (ot::Lowpan::FragmentHeader::IsFragmentHeader(v47, v7))
        {
          ot::MeshForwarder::HandleFragment(this, v47, (const ot::Mac::Addresses *)v41, v45);
        }

        else if (ot::Lowpan::Lowpan::IsLowpanHc((uint64_t)v47, v9))
        {
          ot::MeshForwarder::HandleLowpanHC(this, v47, (const ot::Mac::Addresses *)v41, v45);
        }

        else
        {
          int v44 = 6;
        }
      }

      else
      {
        HopsLeft  = ot::Lowpan::MeshHeader::GetHopsLeft((ot::Lowpan::MeshHeader *)v40);
        if (v11 | (HopsLeft == 0)) {
          char v12 = 1;
        }
        else {
          char v12 = 0;
        }
        if ((v12 & 1) == 0)
        {
          BOOL v39 = 1;
          uint64_t v31 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned __int16 v30 = ot::Mac::Address::GetShort(v46);
          unsigned __int16 v13 = ot::Mac::Address::GetShort((ot::Mac::Address *)v42);
          ot::Mle::MleRouter::ResolveRoutingLoops(v31, v30, v13);
          int v44 = ot::MeshForwarder::CheckReachability(this, v47, (const ot::Mac::Addresses *)v41);
          if (!v44)
          {
            ot::Lowpan::MeshHeader::DecrementHopsLeft((uint64_t)v40);
            ot::MeshForwarder::GetForwardFramePriority(this, v47, (ot::Mac::Address *)v41, (char *)&v39);
            uint64_t v29 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
            ot::Message::Settings::Settings(v38, v39);
            uint64_t v43 = ot::MessagePool::Allocate(v29, 1, 0, (ot::Message::Settings *)v38);
            if (v43)
            {
              int v44 = ot::Lowpan::MeshHeader::AppendTo((ot::Lowpan::MeshHeader *)v40, v43);
              if (!v44)
              {
                int v44 = ot::Message::AppendData<(ot::DataLengthType)1>(v43, (uint64_t)v47);
                if (!v44)
                {
                  ot::Message::SetLinkInfo(v43, v45);
                  ot::Message::SetRadioType(v43, *((_BYTE *)v45 + 16));
                  ot::MeshForwarder::LogMessage(this, 0, v43, 0, v46);
                  ot::Message::ClearRadioType(v43);
                  if ((unsigned __int16)ot::Message::GetLength(v43) > 0x7Fu
                    && (v37  = *((_BYTE *)v45 + 16),
                        __int16 v36 = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v40),
                        v35  = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v40),
                        char Length = ot::Message::GetLength(v43),
                        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"MeshForwarder",  "Large Packet on Mesh Len[%d] radioType[%d] mSrc[0x%x] mDest[0x%x]",  v15,  v16,  v17,  v18,  v19,  v20,  Length),  v37 == 1)
                    && (v36 & 0x1FF) != 0
                    && (v35 & 0x1FF) != 0)
                  {
                    handle_sendmesh_captureABC();
                    int v44 = 2;
                  }

                  else
                  {
                    ot::MeshForwarder::SendMessage(this, v43);
                    IgnoreError();
                  }
                }
              }
            }

            else
            {
              int v44 = 3;
            }
          }
        }
      }
    }
  }

  else
  {
    int v44 = 8;
  }

  if (v44)
  {
    char v28 = ot::ErrorToString(v44);
    ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v47);
    ot::Mac::Address::ToString(v46, (ot::StringWriter *)v49);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v49);
    char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled(v45);
    ot::ToYesNo((ot *)(IsLinkSecurityEnabled & 1));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MeshForwarder",  "Dropping rx mesh frame, error:%s, len:%d, src:%s, sec:%s",  v22,  v23,  v24,  v25,  v26,  v27,  v28);
    if (v43) {
      ot::Message::Free(v43);
    }
  }

uint64_t ot::MeshForwarder::UpdateRoutes( ot::MeshForwarder *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3)
{
  uint64_t v24 = this;
  uint64_t v23 = a2;
  uint64_t v22 = a3;
  uint64_t result = ot::Mac::Address::IsBroadcast((const ot::Mac::Addresses *)((char *)a3 + 10));
  if ((result & 1) == 0)
  {
    uint64_t result = ot::Mac::Address::IsShort(v22);
    if ((result & 1) != 0)
    {
      Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
      uint64_t result = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v21, v23, v22, Instance);
      if (!(_DWORD)result)
      {
        SourceAddress  = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v21);
        Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(SourceAddress);
        if (!ot::Ip6::InterfaceIdentifier::IsLocator(Iid))
        {
          uint64_t v18 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          unsigned __int16 v7 = (const ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v21);
          if ((ot::NetworkData::LeaderBase::IsOnMesh(v18, v7) & 1) != 0)
          {
            uint64_t v17 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
            uint64_t v15 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v21);
            unsigned __int16 Short = ot::Mac::Address::GetShort(v22);
            unsigned __int16 v8 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v22 + 10));
            ot::AddressResolver::UpdateSnoopedCacheEntry(v17, (__n128 *)v15, Short, v8);
          }
        }

        unsigned int v14 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
        unsigned __int16 v9 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v21);
        uint64_t result = ot::NeighborTable::FindNeighbor(v14, v9, 1);
        uint64_t v20 = (ot::Neighbor *)result;
        if (result)
        {
          uint64_t result = ot::Neighbor::IsFullThreadDevice((ot::Neighbor *)result);
          if ((result & 1) == 0)
          {
            unsigned __int16 v13 = ot::Mac::Address::GetShort(v22);
            unsigned __int16 v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ShortAddress  = ot::Mac::Mac::GetShortAddress(v10);
            uint64_t result = ot::Mle::RouterIdMatch((ot::Mle *)v13, ShortAddress);
            if ((result & 1) == 0)
            {
              char v12 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
              return ot::Mle::MleRouter::RemoveNeighbor(v12, v20);
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t ot::Lowpan::MeshHeader::GetHopsLeft(ot::Lowpan::MeshHeader *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot6Lowpan10MeshHeader11GetHopsLeftEv(this);
}

void ot::MeshForwarder::GetForwardFramePriority( ot::InstanceLocator *a1, _OWORD *a2, ot::Mac::Address *a3, char *a4)
{
  uint64_t v25 = a1;
  uint64_t v24 = a2;
  uint64_t v23 = a3;
  uint64_t v22 = a4;
  Frameunsigned __int8 Priority = 0;
  __int128 v20 = *a2;
  char v19 = 0;
  if (ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v18, (ot::FrameData *)&v20)
    || ((char v19 = 1,
         DatagramOffset  = ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v18),
         !(v5 | (DatagramOffset == 0)))
      ? (char v6 = 0)
      : (char v6 = 1),
        (v6 & 1) != 0))
  {
    Frameunsigned __int8 Priority = ot::MeshForwarder::GetFramePriority(a1, (const ot::FrameData *)&v20, v23, v22);
  }

  else
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(v23);
    Frameunsigned __int8 Priority = ot::MeshForwarder::GetFragmentPriority((uint64_t)a1, (ot::Lowpan::FragmentHeader *)v18, Short, v22);
  }

  if (FramePriority)
  {
    char v16 = ot::ErrorToString(FramePriority);
    ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)&v20);
    ot::Mac::Address::ToString(v23, (ot::StringWriter *)v27);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v27);
    ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v23 + 10), (ot::StringWriter *)v26);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v26);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"MeshForwarder",  "Failed to get forwarded frame priority, error:%s, len:%d, src:%s, dst:%s",  v8,  v9,  v10,  v11,  v12,  v13,  v16);
  }

  else if ((v19 & 1) != 0)
  {
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)&v20);
    __int16 v14 = ot::Mac::Address::GetShort(v23);
    ot::MeshForwarder::UpdateFragmentPriority((uint64_t)a1, (ot::Lowpan::FragmentHeader *)v18, Length, v14, *v22);
  }

uint64_t ot::MeshForwarder::FragmentPriorityList::UpdateOnTimeTick( ot::MeshForwarder::FragmentPriorityList *this)
{
  char v4 = 0;
  uint64_t v3 = this;
  uint64_t v2 = (ot::MeshForwarder::FragmentPriorityList *)((char *)this + 96);
  while (v3 != v2)
  {
    if (!ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(v3))
    {
      ot::MeshForwarder::FragmentPriorityList::Entry::DecrementLifetime((uint64_t)v3);
      if (!ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(v3)) {
        char v4 = 1;
      }
    }

    uint64_t v3 = (ot::MeshForwarder::FragmentPriorityList::Entry *)((char *)v3 + 6);
  }

  return v4 & 1;
}

BOOL ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired( ot::MeshForwarder::FragmentPriorityList::Entry *this)
{
  return *((_BYTE *)this + 4) == 0;
}

{
  return __ZNK2ot13MeshForwarder20FragmentPriorityList5Entry9IsExpiredEv(this);
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::DecrementLifetime(uint64_t this)
{
  return this;
}

{
  return __ZN2ot13MeshForwarder20FragmentPriorityList5Entry17DecrementLifetimeEv(this);
}

uint64_t ot::MeshForwarder::UpdateFragmentPriority( uint64_t a1, ot::Lowpan::FragmentHeader *a2, uint64_t a3, __int16 a4, char a5)
{
  DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag(a2);
  Entry  = ot::MeshForwarder::FragmentPriorityList::FindEntry( (ot::MeshForwarder::FragmentPriorityList *)(a1 + 288),  a4,  DatagramTag);
  if (Entry) {
    return ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime((uint64_t)Entry);
  }
  uint64_t result = ot::Lowpan::FragmentHeader::GetDatagramOffset(a2);
  if (!(_WORD)result)
  {
    __int16 v7 = ot::Lowpan::FragmentHeader::GetDatagramTag(a2);
    ot::MeshForwarder::FragmentPriorityList::AllocateEntry(a1 + 288, a4, v7, a5);
    uint64_t v8 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
    return ot::TimeTicker::RegisterReceiver(v8, 0);
  }

  return result;
}

ot::MeshForwarder::FragmentPriorityList::Entry *ot::MeshForwarder::FragmentPriorityList::FindEntry( ot::MeshForwarder::FragmentPriorityList *this, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v6 = 0LL;
  char v5 = this;
  char v4 = (ot::MeshForwarder::FragmentPriorityList *)((char *)this + 96);
  while (v5 != v4)
  {
    if (!ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(v5)
      && ot::MeshForwarder::FragmentPriorityList::Entry::Matches(v5, a2, a3))
    {
      return v5;
    }

    char v5 = (ot::MeshForwarder::FragmentPriorityList::Entry *)((char *)v5 + 6);
  }

  return (ot::MeshForwarder::FragmentPriorityList::Entry *)v6;
}

uint64_t ot::MeshForwarder::FragmentPriorityList::AllocateEntry(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v7 = 0LL;
  uint64_t v6 = a1;
  uint64_t v5 = a1 + 96;
  while (v6 != v5)
  {
    if (ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired((ot::MeshForwarder::FragmentPriorityList::Entry *)v6))
    {
      ot::Clearable<ot::MeshForwarder::FragmentPriorityList::Entry>::Clear(v6);
      *(_WORD *)uint64_t v6 = a2;
      *(_WORD *)(v6 + ot::Tlv::SetType(this, 2) = a3;
      *(_BYTE *)(v6 + 5)  = *(_BYTE *)(v6 + 5) & 0xFC | a4 & 3;
      ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime(v6);
      return v6;
    }

    v6 += 6LL;
  }

  return v7;
}

BOOL ot::MeshForwarder::FragmentPriorityList::Entry::Matches( ot::MeshForwarder::FragmentPriorityList::Entry *this, unsigned __int16 a2, unsigned __int16 a3)
{
  BOOL v4 = 0;
  return v4;
}

{
  return __ZNK2ot13MeshForwarder20FragmentPriorityList5Entry7MatchesEtt(this, a2, a3);
}

uint64_t ot::MeshForwarder::GetFragmentPriority( uint64_t a1, ot::Lowpan::FragmentHeader *a2, unsigned __int16 a3, _BYTE *a4)
{
  unsigned int v9 = 0;
  DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag(a2);
  Entry  = ot::MeshForwarder::FragmentPriorityList::FindEntry( (ot::MeshForwarder::FragmentPriorityList *)(a1 + 288),  a3,  DatagramTag);
  if (Entry) {
    *a4  = ot::MeshForwarder::FragmentPriorityList::Entry::GetPriority(Entry);
  }
  else {
    return 23;
  }
  return v9;
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::GetPriority( ot::MeshForwarder::FragmentPriorityList::Entry *this)
{
  return *((_BYTE *)this + 5) & 3;
}

{
  return __ZNK2ot13MeshForwarder20FragmentPriorityList5Entry11GetPriorityEv(this);
}

uint64_t ot::MeshForwarder::LogMeshFragmentHeader( uint64_t a1, unsigned __int8 a2, ot::Message *a3, ot::Mac::Address *a4, int a5, unsigned __int16 *a6, ot::Mac::Address *a7, char a8, const char *a9)
{
  v70  = a1;
  v69  = a2;
  v68  = a3;
  v67  = a4;
  v66  = a5;
  v65  = a6;
  v64  = a7;
  v63  = a8;
  v62  = (char *)a9;
  v53  = a1;
  v61  = 1;
  v60  = 0;
  v55  = 0;
  v54  = "";
  if (!ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v58, a3, &v56))
  {
    uint64_t v50 = v64;
    v51  = (ot::Lowpan::MeshHeader *)v58;
    Source  = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v58);
    ot::Mac::Address::SetShort((uint64_t)v50, Source);
    v52  = (ot::Mac::Address *)((char *)v64 + 10);
    Destination  = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v58);
    ot::Mac::Address::SetShort((uint64_t)v52, Destination);
    *v65  = v56;
    if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v57, v68, *v65, &v56))
    {
      v60  = 1;
      *v65 += v56;
    }

    BOOL v49 = 1;
    if (v69) {
      BOOL v49 = v69 == 4;
    }
    v59  = v49;
    v55  = 1;
    if ((ot::Message::IsRadioTypeSet(v68) & 1) != 0)
    {
      Radioint Type = ot::Message::GetRadioType(v68);
      v48  = ot::Mac::RadioTypeToString(RadioType);
    }

    else
    {
      v48  = "all";
    }

    v54  = v48;
    __str  = v62;
    uint64_t v46 = ot::MeshForwarder::MessageActionToString(v53, v69, v66);
    int Length = ot::Message::GetLength(v68);
    if (v67)
    {
      uint64_t v12 = ", from:";
      if (v69) {
        uint64_t v12 = ", to:";
      }
      int v44 = v12;
    }

    else
    {
      int v44 = "";
    }

    uint64_t v43 = v44;
    if (v67)
    {
      uint64_t v41 = v74;
      ot::Mac::Address::ToString(v67, (ot::StringWriter *)v74);
      uint64_t v42 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v74);
    }

    else
    {
      uint64_t v42 = "";
    }

    v32  = v42;
    unsigned __int16 v33 = v73;
    ot::Mac::Address::ToString(v64, (ot::StringWriter *)v73);
    v34  = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v73);
    v35  = v72;
    ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v64 + 10), (ot::StringWriter *)v72);
    __int16 v36 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v72);
    HopsLeft  = ot::Lowpan::MeshHeader::GetHopsLeft((ot::Lowpan::MeshHeader *)v58);
    v37  = (v69 == 0) + HopsLeft;
    uint64_t v38 = ot::ToYesNo((ot *)(v60 & 1));
    char IsLinkSecurityEnabled = ot::Message::IsLinkSecurityEnabled(v68);
    BOOL v39 = ot::ToYesNo((ot *)(IsLinkSecurityEnabled & 1));
    uint64_t v15 = "";
    if (v66) {
      uint64_t v15 = ", error:";
    }
    uint64_t v40 = v15;
    if (v66) {
      uint64_t v31 = ot::ErrorToString(v66);
    }
    else {
      uint64_t v31 = "";
    }
    uint64_t v29 = v31;
    char v16 = ", rss:";
    if (!v59) {
      char v16 = "";
    }
    unsigned __int16 v30 = v16;
    if (v59)
    {
      RssAverager  = (ot::RssAverager *)ot::Message::GetRssAverager(v68);
      uint64_t v27 = v71;
      ot::RssAverager::ToString(RssAverager, (ot::StringWriter *)v71);
      char v28 = (const char *)ot::String<(unsigned short)10>::AsCString((uint64_t)v71);
    }

    else
    {
      char v28 = "";
    }

    uint64_t v26 = v20;
    snprintf( __str,  0x800uLL,  "%s mesh frame, len:%d%s%s, msrc:%s, mdst:%s, hops:%d, frag:%s, sec:%s%s%s%s%s%s%s",  v46,  (unsigned __int16)Length,  v43,  v32,  v34,  v36,  v37,  v38,  v39,  v40,  v29,  v30,  v28,  ", radio:",  v54);
    if ((v60 & 1) == 0) {
      return 0;
    }
    v20[16]  = (ot::Lowpan::FragmentHeader *)v62;
    uint64_t v25 = &v62[strlen(v62)];
    __size  = 2048 - strlen(v62);
    unsigned __int16 v21 = (ot::Lowpan::FragmentHeader *)v57;
    DatagramTag  = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v57);
    DatagramOffset  = ot::Lowpan::FragmentHeader::GetDatagramOffset(v21);
    DatagramSize  = ot::Lowpan::FragmentHeader::GetDatagramSize(v21);
    snprintf( v25,  __size,  " Frag tag:%04x, offset:%d, size:%d",  (unsigned __int16)DatagramTag,  (unsigned __int16)DatagramOffset,  DatagramSize);
  }

  return v61;
}

uint64_t ot::MeshForwarder::LogMeshIpHeader( ot::MeshForwarder *a1, char a2, ot::Message *a3, unsigned __int16 a4, ot::Mac::Addresses *a5, unsigned __int8 a6, char *a7)
{
  uint64_t v45 = a1;
  char v44 = a2;
  uint64_t v43 = a3;
  unsigned __int16 v42 = a4;
  uint64_t v41 = a5;
  unsigned __int8 v40 = a6;
  __s  = a7;
  v34  = a1;
  memset(__b, 0, sizeof(__b));
  v37  = 0;
  bzero(v46, 0x400uLL);
  uint64_t result = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v38, v43, v42, v41);
  if (!(_DWORD)result)
  {
    if ((ot::MeshForwarder::IsMatter(v34, v43, (ot::Ip6::Headers *)v38) & 1) != 0)
    {
      v37  = 1;
      v32  = v38;
      ot::MeshForwarder::GetMatterHeader(v34, (const ot::Ip6::Headers *)v38, __b);
      int Length = ot::Message::GetLength(v43);
      Timestamp  = ot::Message::GetTimestamp(v43);
      int Value = ot::Time::GetValue((ot::Time *)&Timestamp);
      ot::MeshForwarder::CountMatterDuplicates((uint64_t)v34, (ot::Ip6::Headers *)v38, Length, Value, v44, v40);
    }

    unsigned int v9 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v34);
    if ((ot::MessagePool::GetIsBufferStatsEnabled(v9) & 1) != 0) {
      ot::Message::GetBufferIDs(v43, v46);
    }
    unsigned __int16 v36 = strlen(__s);
    __str  = &__s[v36];
    __size  = 2048 - v36;
    char v28 = (ot::Ip6::Headers *)v38;
    unsigned __int8 IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v38);
    uint64_t v27 = (const char *)ot::Ip6::Ip6::IpProtoToString((ot::Ip6::Ip6 *)IpProto, v11, v12, v13, v14, v15);
    int Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v38);
    Ecn  = ot::Ip6::Headers::GetEcn((ot::Ip6::Headers *)v38);
    unsigned __int16 v30 = ot::Ip6::Ip6::EcnToString(Ecn);
    uint64_t v31 = ot::MeshForwarder::MessagePriorityToString(v34, v43);
    if ((v37 & 1) != 0) {
      uint64_t v24 = __b;
    }
    else {
      uint64_t v24 = "";
    }
    v20[9]  = v24;
    unsigned __int16 v21 = v43;
    uint64_t v17 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v34);
    TotalBufferCount  = ot::MessagePool::GetTotalBufferCount(v17);
    uint64_t v18 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v34);
    FreeBufferCount  = ot::MessagePool::GetFreeBufferCount(v18);
    uint64_t v23 = v20;
    snprintf( __str,  __size,  " IPv6 %s msg, chksum:%04x, ecn:%s, prio:%s%s, buffer=%p%s, tot_buf=%d, free_buf=%d,",  v27,  (unsigned __int16)Checksum,  v30,  v31,  v24,  v21,  v46,  (unsigned __int16)TotalBufferCount,  FreeBufferCount);
    return ot::MeshForwarder::LogIp6SourceDestAddresses((uint64_t)v34, (ot::Ip6::Headers *)v38, v40, __s);
  }

  return result;
}

void ot::MeshForwarder::LogMeshMessage( ot::MeshForwarder *a1, unsigned __int8 a2, ot::Message *a3, ot::Mac::Address *a4, int a5, unsigned __int8 a6)
{
  char v19 = a1;
  unsigned __int8 v18 = a2;
  uint64_t v17 = a3;
  char v16 = a4;
  int v15 = a5;
  unsigned __int8 v14 = a6;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v12);
  bzero(v20, 0x800uLL);
  if (!ot::MeshForwarder::LogMeshFragmentHeader( (uint64_t)a1,  v18,  v17,  v16,  v15,  &v13,  (ot::Mac::Address *)v12,  v14,  v20))
  {
    ot::MeshForwarder::LogMeshIpHeader(a1, v18, v17, v13, (ot::Mac::Addresses *)v12, v14, v20);
    ot::Logger::LogInModule((ot *)"MeshForwarder", v14, "ITMD: %s", v6, v7, v8, v9, v10, (char)v20);
  }

void ot::Mle::Mle::HandleAttachTimer(ot::Mle::Mle *this)
{
  unsigned int v3 = 0;
  if ((ot::Mle::Mle::HasAcceptableParentCandidate(this) & 1) == 0
    || ot::Mle::Mle::SendChildIdRequest(this))
  {
    unint64_t v1 = *((unsigned __int8 *)this + 313);
    if (v1 <= 5) {
      __asm { BR              X8 }
    }
  }

  else
  {
    ot::Mle::Mle::SetAttachState((uint64_t)this, 5u);
    unsigned int v3 = 1250;
  }

  if (v3) {
    ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 320), v3);
  }
}

uint64_t ot::Mle::Mle::HandleDelayedResponseTimer(ot::Mle::Mle *this)
{
  int v15 = this;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  v12[2]  = (char *)this + 400;
  v12[0]  = ot::MessageQueue::begin((ot::Mle::Mle *)((char *)this + 400));
  v12[1]  = v1;
  v11[0]  = ot::MessageQueue::end((ot::Mle::Mle *)((char *)this + 400));
  v11[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v12, v11))
  {
    uint64_t v10 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v12);
    ot::Mle::Mle::DelayedResponseMetadata::ReadFrom((ot::Mle::Mle::DelayedResponseMetadata *)v8, v10);
    if (ot::Time::operator<(&Now, &v9))
    {
      v6[2]  = DistantFuture;
      v6[1]  = v9;
      int v7 = ot::Min<ot::Time>(DistantFuture, v9);
      DistantFuture  = v7;
    }

    else
    {
      ot::MessageQueue::Dequeue((ot::Mle::Mle *)((char *)this + 400), v10);
      ot::Mle::Mle::SendDelayedResponse(this, v10, (ot::Mle::Mle::DelayedResponseMetadata *)v8);
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v12, v3);
  }

  v6[0]  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v6);
  if ((result & 1) != 0) {
    return ot::TimerMilli::FireAt((ot::Mle::Mle *)((char *)this + 344), DistantFuture);
  }
  return result;
}

void ot::Mle::Mle::HandleMessageTransmissionTimer( ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v13 = this;
  if (*((_BYTE *)this + 41) == 1 && *((_BYTE *)this + 392))
  {
    uint64_t v8 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::SendLinkRequest(v8, 0LL);
    IgnoreError();
    --*((_BYTE *)this + 392);
    ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
    return;
  }

  if (*((_BYTE *)this + 705))
  {
    if (*((_BYTE *)this + 705) == 1)
    {
      uint64_t v10 = (ot::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      if (ot::Notifier::IsPending(v10))
      {
        ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
        return;
      }

      *((_BYTE *)this + 70--*(_BYTE *)(this + 4) = 0;
    }

    goto LABEL_20;
  }

  if (*((_BYTE *)this + 707) == 1)
  {
    if (*((unsigned __int8 *)this + 706) < 4u)
    {
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 48));
      ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)v12, ExtAddress);
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Device becomes detached - reached max data request attempts dataReqAttempts(%d) reached maxChildKeepAliveAttempts(%d)",  a3,  a4,  a5,  a6,  a7,  a8,  *((_BYTE *)this + 706));
      ot::Mle::Mle::BecomeDetached(this);
      IgnoreError();
    }
  }

  else if (ot::Mle::Mle::IsChild(this) && ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
LABEL_20:
    if (*((unsigned __int8 *)this + 704) < 4u)
    {
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Device becomes detached - reached max child update attempts childUpdateAttempts(%d) reached maxChildKeepAliveAttempts(%d)",  a3,  a4,  a5,  a6,  a7,  a8,  *((_BYTE *)this + 704));
      ot::Mle::Mle::BecomeDetached(this);
      IgnoreError();
    }
  }

uint64_t ot::Mle::Mle::HandleDetachGracefullyTimer(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::Stop(this);
}

ot::Mle::Mle *ot::Mle::Mle::Mle(ot::Mle::Mle *this, ot::Instance *a2)
{
  *((_BYTE *)this + 40) &= ~1u;
  *((_BYTE *)this + 40) &= ~2u;
  *((_BYTE *)this + 4ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  ot::Parent::Parent((ot::Mle::Mle *)((char *)this + 48));
  ot::NeighborTable::NeighborTable((ot::Mle::Mle *)((char *)this + 304), a2);
  ot::Mle::DeviceMode::DeviceMode((ot::Mle::Mle *)((char *)this + 312), 8);
  *((_BYTE *)this + 313)  = 0;
  *((_BYTE *)this + 315)  = 0;
  *((_WORD *)this + 158)  = 0;
  *((_WORD *)this + 15ot::MeshCoP::Tlv::SetType(this, 9) = 1400;
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::TimerMilliIn( (ot::Mle::Mle *)((char *)this + 320),  a2);
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::TimerMilliIn( (ot::Mle::Mle *)((char *)this + 344),  a2);
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::TimerMilliIn( (ot::Mle::Mle *)((char *)this + 368),  a2);
  *((_BYTE *)this + 393)  = 0;
  ot::Coap::MessageQueue::MessageQueue((ot::Mle::Mle *)((char *)this + 400));
  *((_BYTE *)this + 417)  = 0;
  ot::Mle::Mle::ParentCandidate::ParentCandidate((ot::Mle::Mle *)((char *)this + 424));
  *((_BYTE *)this + 70--*(_BYTE *)(this + 4) = 0;
  *((_BYTE *)this + 705)  = 0;
  *((_BYTE *)this + 706)  = 0;
  *((_BYTE *)this + 707)  = 0;
  *((_BYTE *)this + 708)  = 0;
  *((_BYTE *)this + 70ot::MeshCoP::Tlv::SetType(this, 9) = 0;
  *((_BYTE *)this + 710)  = 0;
  *((_BYTE *)this + 71ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  ot::Ip6::Udp::Socket::Socket((ot::Mle::Mle *)((char *)this + 712), a2);
  *((_DWORD *)this + 196)  = 240;
  *((_DWORD *)this + 197)  = 100;
  *((_WORD *)this + 396)  = -2;
  *((_WORD *)this + 397)  = -2;
  *((_BYTE *)this + 796)  = 0;
  *((_BYTE *)this + 797)  = 0;
  *((_WORD *)this + 39ot::MeshCoP::Tlv::SetType(this, 9) = -1;
  *((void *)this + 100)  = 0LL;
  uint64_t v22 = (ot::Mle::Mle *)((char *)this + 808);
  do
  {
    ot::Mle::Mle::ServiceAloc::ServiceAloc(v22);
    BOOL v2 = (char *)v22 + 32 != (char *)this + 904;
    uint64_t v22 = (ot::Mle::Mle::ServiceAloc *)((char *)v22 + 32);
  }

  while (v2);
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::TimerMilliIn( (ot::Mle::Mle *)((char *)this + 1152),  a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 147);
  ot::Parent::Init((ot::Mle::Mle *)((char *)this + 48), a2);
  ot::Mle::Mle::ParentCandidate::Init((ot::Mle::Mle *)((char *)this + 424), a2);
  ot::Clearable<ot::Mle::LeaderData>::Clear((void *)this + 4);
  ot::Parent::Clear((ot::Mle::Mle *)((char *)this + 48));
  ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 424));
  ot::Mle::Mle::ResetCounters(this);
  ot::Mle::Mle::ResetLinkLossCounters((uint64_t)this);
  ot::Mle::Mle::ResetMleTriggerBasedCounters((uint64_t)this);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin((ot::Mle::Mle *)((char *)this + 1008), 1);
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1008));
  char v16 = v3;
  BOOL v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v4);
  ot::Ip6::Address::SetToLinkLocalAddress(v16, ExtAddress);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope(this);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::Mle::Mle *)((char *)this + 1040));
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1040));
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v6);
  ot::Ip6::InterfaceIdentifier::GenerateRandom(Iid);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::Mle::Mle *)((char *)this + 1072));
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1072));
  int v9 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v8);
  ot::Ip6::InterfaceIdentifier::SetToLocator(v9, 0);
  *((_BYTE *)this + 1090)  = *((_BYTE *)this + 1090) & 0x7F | 0x80;
  ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear((void *)this + 138);
  __int16 v17 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFF32);
  ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1104));
  *uint64_t v10 = v17;
  __int16 v18 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)1);
  ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1104));
  *(_WORD *)(v11 + 1--*(_BYTE *)(this + 4) = v18;
  ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear((void *)this + 141);
  __int16 v19 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFF33);
  ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1128));
  *uint64_t v12 = v19;
  __int16 v20 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)1);
  ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1128));
  *(_WORD *)(v13 + 1--*(_BYTE *)(this + 4) = v20;
  ot::AsCoreType<otIp6NetworkPrefix>((uint64_t)&ot::Mle::Mle::sMeshLocalPrefixInit);
  ot::Mle::Mle::SetMeshLocalPrefix(this, v14);
  return this;
}

{
  ot::Mle::Mle::Mle(this, a2);
  return this;
}

ot::Parent *ot::Parent::Parent(ot::Parent *this)
{
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::HandleTimer);
  return a1;
}

ot::Mle::Mle::ParentCandidate *ot::Mle::Mle::ParentCandidate::ParentCandidate( ot::Mle::Mle::ParentCandidate *this)
{
  return this;
}

ot::Mle::Mle::ServiceAloc *ot::Mle::Mle::ServiceAloc::ServiceAloc(ot::Mle::Mle::ServiceAloc *this)
{
  return this;
}

{
  ot::Ip6::Address *v1;
  ot::Ip6::InterfaceIdentifier *Iid;
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope(this);
  ot::Ip6::Netif::UnicastAddress::GetAddress(this);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v1);
  ot::Ip6::InterfaceIdentifier::SetToLocator(Iid, 0xFFFEu);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::HandleTimer);
  return a1;
}

_BYTE *ot::Parent::Init(ot::Parent *this, ot::Instance *a2)
{
  return ot::Mac::CslAccuracy::Init((_BYTE *)this + 247);
}

{
  return __ZN2ot6Parent4InitERNS_8InstanceE(this, a2);
}

_BYTE *ot::Mle::Mle::ParentCandidate::Init(ot::Mle::Mle::ParentCandidate *this, ot::Instance *a2)
{
  return ot::Parent::Init(this, a2);
}

{
  return __ZN2ot3Mle3Mle15ParentCandidate4InitERNS_8InstanceE(this, a2);
}

void *ot::Clearable<ot::Mle::LeaderData>::Clear(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Mle10LeaderDataEE5ClearEv(result);
}

_BYTE *ot::Mle::Mle::ParentCandidate::Clear(ot::Mle::Mle::ParentCandidate *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  bzero(this, 0x118uLL);
  return ot::Mle::Mle::ParentCandidate::Init(this, Instance);
}

unint64_t ot::Mle::Mle::ResetCounters(ot::Mle::Mle *this)
{
  uint64_t v1 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(this);
  unint64_t result = ot::Uptime::GetUptime(v1);
  *((void *)this + 12ot::Tlv::SetType(this, 2) = result;
  return result;
}

void *ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear(void *result)
{
  *unint64_t result = 0LL;
  result[1]  = 0LL;
  result[2]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Ip65Netif16MulticastAddressEE5ClearEv(result);
}

uint64_t ot::Mle::Mle::SetMeshLocalPrefix(ot::Mle::Mle *this, const ot::Ip6::NetworkPrefix *a2)
{
  if (ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(v2, a2))
  {
    uint64_t v5 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    if ((ot::ThreadNetif::IsUp(v5) & 1) != 0)
    {
      uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v6, this);
      int v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v7, (ot::Mle::Mle *)((char *)this + 1040));
      uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 1072));
      int v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::UnsubscribeMulticast(v9, (ot::Mle::Mle *)((char *)this + 1104));
      uint64_t v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::UnsubscribeMulticast(v10, (ot::Mle::Mle *)((char *)this + 1128));
    }

    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1040));
    ot::Ip6::Address::SetPrefix(v11, a2);
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1072));
    ot::Ip6::Address::SetPrefix(v12, a2);
    ot::Ip6::Netif::UnicastAddress::GetAddress(this);
    ot::Ip6::Address::SetPrefix(v13, a2);
    unsigned __int8 v14 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    uint64_t result = ot::ThreadNetif::IsUp(v14);
    if ((result & 1) != 0) {
      return ot::Mle::Mle::ApplyMeshLocalPrefix(this);
    }
  }

  else
  {
    unsigned int v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    return ot::Notifier::SignalIfFirst(v3, 16LL);
  }

  return result;
}

uint64_t ot::Mle::Mle::Enable( ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Ip6::Udp::Socket::Open( (ot::Mle::Mle *)((char *)this + 712),  (uint64_t)ot::Mle::Mle::HandleUdpReceive,  (uint64_t)this);
  if (!v11) {
    return ot::Ip6::Udp::Socket::Bind((ot::Mle::Mle *)((char *)this + 712), 19788, 1u);
  }
  return v11;
}

uint64_t ot::Mle::Mle::UpdateLinkLocalAddress(ot::Mle::Mle *this)
{
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::RemoveUnicastAddress(v1, (ot::Mle::Mle *)((char *)this + 1008));
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1008));
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v2);
  unsigned int v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v3);
  ot::Ip6::InterfaceIdentifier::SetFromExtAddress(Iid, ExtAddress);
  uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::AddUnicastAddress(v5, (ot::Mle::Mle *)((char *)this + 1008));
  uint64_t v6 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v6, 8LL);
}

uint64_t ot::Mle::Mle::HandleUdpReceive(ot::Mle::Mle *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  ot::AsCoreType<otMessageInfo>(a3);
  return ot::Mle::Mle::HandleUdpReceive(a1, v6, v4);
}

uint64_t ot::Mle::Mle::ScheduleChildUpdateRequest(ot::Mle::Mle *this)
{
  *((_BYTE *)this + 705)  = 1;
  return ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
}

uint64_t ot::Mle::Mle::ScheduleMessageTransmissionTimer(ot::Mle::Mle *this)
{
  Uint32InRange  = 0;
  if (*((_BYTE *)this + 41) == 1 && *((_BYTE *)this + 392))
  {
    Uint32InRange  = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)0x1194, 0x157Cu);
    goto LABEL_21;
  }

  int v4 = *((unsigned __int8 *)this + 705);
  if (*((_BYTE *)this + 705))
  {
    if (v4 == 1)
    {
      Uint32InRange  = 100;
      goto LABEL_21;
    }

    if (v4 == 2)
    {
      uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      if (ot::Mac::Mac::IsCslEnabled(v1))
      {
        BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        Uint32InRange  = ot::Mac::Mac::GetCslPeriodMs(v2) + 1000;
      }

      else
      {
        Uint32InRange  = 1000;
      }

      goto LABEL_21;
    }
  }

  if (*((_BYTE *)this + 707) && *((_BYTE *)this + 707) == 1)
  {
    Uint32InRange  = 1000;
  }

  else if (ot::Mle::Mle::IsChild(this) && ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    Uint32InRange  = ot::Time::SecToMsec((ot::Time *)*((unsigned int *)this + 196)) - 4000;
  }

uint64_t ot::Mle::Mle::Disable( ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12 = ot::Ip6::Udp::Socket::Close((ot::Mle::Mle *)((char *)this + 712));
  if (!v12)
  {
    uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 1008));
  }

  return v12;
}

uint64_t ot::Mle::Mle::Stop(void *a1, char a2)
{
  uint64_t v13 = a1;
  char v12 = a2;
  if (a2 == 1)
  {
    active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::HandleDetach(active);
    unsigned int v3 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::HandleDetach(v3);
  }

  if (!ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1))
  {
    int v4 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>((ot::InstanceLocator *)a1);
    ot::KeyManager::Stop(v4);
    ot::Mle::Mle::SetStateDetached((ot::Mle::Mle *)a1);
    uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::UnsubscribeMulticast(v5, (const ot::Ip6::Netif::MulticastAddress *)(a1 + 141));
    uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::UnsubscribeMulticast(v6, (const ot::Ip6::Netif::MulticastAddress *)(a1 + 138));
    int v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::RemoveUnicastAddress(v7, (const ot::Ip6::Netif::UnicastAddress *)(a1 + 134));
    uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::RemoveUnicastAddress(v8, (const ot::Ip6::Netif::UnicastAddress *)(a1 + 130));
    ot::Mle::Mle::SetRole((unsigned __int8 *)a1, 0);
  }

  ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 144));
  uint64_t result = ot::CallbackBase<void (*)(void *)>::IsSet(a1 + 147);
  if ((result & 1) != 0)
  {
    __int128 v11 = *(_OWORD *)(a1 + 147);
    ot::CallbackBase<void (*)(void *)>::Clear(a1 + 147);
    return ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>((uint64_t)&v11);
  }

  return result;
}