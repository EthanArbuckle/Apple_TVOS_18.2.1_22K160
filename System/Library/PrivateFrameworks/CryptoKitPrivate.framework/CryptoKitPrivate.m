uint64_t ciphersuiteForKeyByteCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  v1 = MEMORY[0x1895FA240];
  v2 = MEMORY[0x1895FA238];
  if (a1 != 384) {
    v2 = 0LL;
  }
  if (a1 != 512) {
    v1 = v2;
  }
  if (a1 == 256) {
    return MEMORY[0x1895FA230];
  }
  else {
    return v1;
  }
}

LABEL_8:
  return v11;
}

  __asm { BR              X9 }

    if (v11 == *(void *)(a2 + 8)) {
      goto LABEL_9;
    }
LABEL_16:
    v17 = 0;
    return v17 & 1;
  }

  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    v11 = 0LL;
    goto LABEL_8;
  }

    __break(1u);
    goto LABEL_9;
  }

  sub_18765E614(a1, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  return v2;
}

uint64_t static CKSecretSharing.HybridShareParameterSelection.== infix(_:_:)()
{
  return 1LL;
}

uint64_t sub_187622B70()
{
  return 1LL;
}

double sub_187622B80@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_18769BCF0;
  *(_OWORD *)(a1 + 16) = xmmword_18769BD00;
  *(void *)&double result = 32LL;
  *(_OWORD *)(a1 + 32) = xmmword_18769BD10;
  *(void *)(a1 + 48) = 16LL;
  *(void *)(a1 + 56) = &unk_18A07FFF8;
  *(void *)(a1 + 64) = 0xD000000000000021LL;
  *(void *)(a1 + 72) = 0x800000018769FF10LL;
  *(void *)(a1 + 80) = 0xD000000000000023LL;
  *(void *)(a1 + 88) = 0x800000018769FF40LL;
  return result;
}

uint64_t static CKSecretSharing.ShamirGeneratorPrimeField.== infix(_:_:)()
{
  return 1LL;
}

uint64_t CKSecretSharing.ShamirGeneratorPrimeField.hash(into:)()
{
  return sub_18769A760();
}

void *static CKSecretSharing.ShamirGeneratorPrimeField.allCases.getter()
{
  return &unk_18A080070;
}

uint64_t _s16CryptoKitPrivate15CKSecretSharingO29HybridShareParameterSelectionO9hashValueSivg_0()
{
  return sub_18769A778();
}

uint64_t sub_187622C64()
{
  return sub_18769A760();
}

uint64_t sub_187622C88()
{
  return sub_18769A778();
}

unint64_t sub_187622CC8()
{
  unint64_t result = qword_18C6D97D0;
  if (!qword_18C6D97D0)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for CKSecretSharing.HybridShareParameterSelection,  &type metadata for CKSecretSharing.HybridShareParameterSelection);
    atomic_store(result, (unint64_t *)&qword_18C6D97D0);
  }

  return result;
}

unint64_t sub_187622D10()
{
  unint64_t result = qword_18C6D97D8;
  if (!qword_18C6D97D8)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for CKSecretSharing.ShamirGeneratorPrimeField,  &type metadata for CKSecretSharing.ShamirGeneratorPrimeField);
    atomic_store(result, (unint64_t *)&qword_18C6D97D8);
  }

  return result;
}

unint64_t sub_187622D58()
{
  unint64_t result = qword_18C6D97E0;
  if (!qword_18C6D97E0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6D97E8);
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6D97E0);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895AAF90](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void sub_187622DE8(void *a1@<X8>)
{
  *a1 = &unk_18A080098;
}

uint64_t sub_187622E08()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridShareParameterSelection()
{
  return &type metadata for CKSecretSharing.HybridShareParameterSelection;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  sub_18769A52C();
  sub_18769A52C();
  sub_18769A52C();
  return a1;
}

void *_s29HybridShareParameterSelectionO11suiteParamsVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  sub_18769A52C();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  sub_18769A52C();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridShareParameterSelection.suiteParams()
{
  return &type metadata for CKSecretSharing.HybridShareParameterSelection.suiteParams;
}

uint64_t _s16SimilarityMetricOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s29HybridShareParameterSelectionOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_187623164 + 4 * byte_18769BD20[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_187623184 + 4 * byte_18769BD25[v4]))();
  }
}

_BYTE *sub_187623164(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_187623184(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_18762318C(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_187623194(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_18762319C(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_1876231A4(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirGeneratorPrimeField()
{
  return &type metadata for CKSecretSharing.ShamirGeneratorPrimeField;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for ccss_shamir_share_generator(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ccss_shamir_share(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_187623250(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_187623270(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 40) = v3;
  return result;
}

void type metadata accessor for ccss_shamir_parameters(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for ccec_cp(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_1876232EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18762330C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for cczp(uint64_t a1)
{
}

void sub_18762334C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_187623390(uint64_t a1)
{
  return sub_187699FF8();
}

uint64_t sub_1876233CC()
{
  return sub_187699FEC();
}

uint64_t sub_187623414(uint64_t a1, uint64_t a2)
{
  return sub_18769A778();
}

uint64_t sub_18762346C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_187699FE0();
}

uint64_t sub_1876234B8()
{
  return sub_187623500(&qword_18C6D9818, (uint64_t)&unk_18769BF88);
}

uint64_t sub_1876234DC()
{
  return sub_187623500(qword_18C6D9820, (uint64_t)&unk_18769BF30);
}

uint64_t sub_187623500(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255LL);
    uint64_t result = MEMORY[0x1895AAF9C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_18762355C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_187623564()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }

    else
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

void *sub_1876236CC(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  BOOL v12 = (v11 | (unint64_t)v6) <= 7 && ((*(_DWORD *)(v10 + 80) | v6) & 0x100000) == 0;
  if (v12
    && (uint64_t v13 = v8 + v6,
        uint64_t v14 = v8 + v11,
        uint64_t v15 = (v8 + v11 + ((v8 + v7 + ((v8 + v7 + ((v8 + v7 + ((v7 + 8) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v11,
        uint64_t v16 = *(void *)(v10 + 64),
        uint64_t v17 = v16 + v11,
        uint64_t v18 = (v16 + v11 + ((v16 + v11 + ((v16 + v11 + ((v16 + v11 + v15) & ~v11)) & ~v11)) & ~v11)) & ~v11,
        uint64_t v19 = v16 + 7,
        ((v19 + v18) & 0xFFFFFFFFFFFFFFF8LL) + 16 <= 0x18))
  {
    uint64_t v20 = v9;
    v21 = a2;
    uint64_t v22 = ~v7;
    uint64_t v52 = v19;
    v53 = a1;
    uint64_t v23 = ~v11;
    void *v53 = *v21;
    v24 = (char *)v21 + v7;
    uint64_t v25 = ((unint64_t)v53 + v7 + 8) & ~v7;
    uint64_t v26 = (unint64_t)(v24 + 8) & v22;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v51 = v10;
    v27(v25, v26, AssociatedTypeWitness);
    uint64_t v28 = (v13 + v25) & v22;
    uint64_t v29 = (v13 + v26) & v22;
    v27(v28, v29, AssociatedTypeWitness);
    uint64_t v30 = (v13 + v28) & v22;
    uint64_t v31 = (v13 + v29) & v22;
    v27(v30, v31, AssociatedTypeWitness);
    uint64_t v32 = (v13 + v30) & v22;
    uint64_t v33 = (v13 + v31) & v22;
    v27(v32, v33, AssociatedTypeWitness);
    uint64_t v34 = (v14 + v32) & v23;
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
    v35(v34, (v14 + v33) & v23, v20);
    uint64_t v36 = (v17 + v34) & v23;
    uint64_t v37 = (v17 + ((v14 + v33) & v23)) & v23;
    v35(v36, v37, v20);
    uint64_t v38 = (v17 + v36) & v23;
    uint64_t v39 = (v17 + v37) & v23;
    v35(v38, v39, v20);
    uint64_t v40 = (v17 + v38) & v23;
    uint64_t v41 = (v17 + v39) & v23;
    v35(v40, v41, v20);
    uint64_t v42 = (v17 + v40) & v23;
    uint64_t v43 = (v17 + v41) & v23;
    v44 = v53;
    v35(v42, v43, v20);
    v45 = (void *)((v52 + v42) & 0xFFFFFFFFFFFFFFF8LL);
    v46 = (uint64_t *)((v52 + v43) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    sub_187623A28(*v46, v48);
    void *v45 = v47;
    v45[1] = v48;
  }

  else
  {
    uint64_t v49 = *a2;
    *a1 = *a2;
    v44 = (void *)(v49 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
    swift_retain();
  }

  return v44;
}

uint64_t sub_187623A28(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_187623A6C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + v4 + 8) & ~v4;
  int v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v5, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v8 = (v7 + v4 + v5) & ~v4;
  v6(v8, AssociatedTypeWitness);
  uint64_t v9 = (v7 + v4 + v8) & ~v4;
  v6(v9, AssociatedTypeWitness);
  uint64_t v10 = (v7 + v4 + v9) & ~v4;
  v6(v10, AssociatedTypeWitness);
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (v7 + v13 + v10) & ~v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v15(v14, v11);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v17 = (v16 + v13 + v14) & ~v13;
  v15(v17, v11);
  uint64_t v18 = (v16 + v13 + v17) & ~v13;
  v15(v18, v11);
  uint64_t v19 = (v16 + v13 + v18) & ~v13;
  v15(v19, v11);
  uint64_t v20 = (v16 + v13 + v19) & ~v13;
  v15(v20, v11);
  return sub_187623C58( *(void *)((v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL),  *(void *)(((v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_187623C58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void *sub_187623C9C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v21(v19, v20, v16);
  uint64_t v22 = *(void *)(v17 + 64);
  uint64_t v23 = (v22 + v18 + v19) & ~v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  uint64_t v25 = (v22 + v18 + v23) & ~v18;
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  uint64_t v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  uint64_t v29 = (v22 + v18 + v27) & ~v18;
  uint64_t v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  uint64_t v31 = (void *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v32 = (uint64_t *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_187623A28(*v32, v34);
  *uint64_t v31 = v33;
  v31[1] = v34;
  return a1;
}

void *sub_187623F24(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
  v21(v19, v20, v16);
  uint64_t v22 = *(void *)(v17 + 64);
  uint64_t v23 = (v22 + v18 + v19) & ~v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  uint64_t v25 = (v22 + v18 + v23) & ~v18;
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  uint64_t v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  uint64_t v29 = (v22 + v18 + v27) & ~v18;
  uint64_t v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  uint64_t v31 = (uint64_t *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v32 = (uint64_t *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_187623A28(*v32, v34);
  uint64_t v35 = *v31;
  unint64_t v36 = v31[1];
  *uint64_t v31 = v33;
  v31[1] = v34;
  sub_187623C58(v35, v36);
  return a1;
}

void *sub_1876241B4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v21(v19, v20, v16);
  uint64_t v22 = *(void *)(v17 + 64);
  uint64_t v23 = (v22 + v18 + v19) & ~v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  uint64_t v25 = (v22 + v18 + v23) & ~v18;
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  uint64_t v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  uint64_t v29 = (v22 + v18 + v27) & ~v18;
  uint64_t v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  *(_OWORD *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

void *sub_187624430(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v21(v19, v20, v16);
  uint64_t v22 = *(void *)(v17 + 64);
  uint64_t v23 = (v22 + v18 + v19) & ~v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  uint64_t v25 = (v22 + v18 + v23) & ~v18;
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  uint64_t v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  uint64_t v29 = (v22 + v18 + v27) & ~v18;
  uint64_t v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  uint64_t v31 = (uint64_t *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFF8LL);
  sub_187623C58(v32, v33);
  return a1;
}

uint64_t sub_1876246B4(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (v10 <= 0xC) {
    unsigned int v10 = 12;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = v7;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = v13 + v12;
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = v13 + v15;
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = v17 + v15;
  uint64_t v19 = v17 + 7;
  if (v10 < a2)
  {
    if (((((v19
           + ((v18
             + ((v18
               + ((v18
                 + ((v18 + ((v16 + ((v14 + ((v14 + ((v14 + ((v12 + 8) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v15)) & ~v15)) & ~v15)) & ~v15)) & ~v15)) & 0xFFFFFFFFFFFFFFF8LL)
         + 16) & 0xFFFFFFF8) != 0)
      unsigned int v20 = 2;
    else {
      unsigned int v20 = a2 - v10 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0LL;
    }
    __asm { BR              X4 }
  }

  uint64_t v24 = (a1 + v12 + 8) & ~v12;
  if ((_DWORD)v6 == v10)
  {
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v9 = v6;
    uint64_t v11 = AssociatedTypeWitness;
    return v25(v24, v9, v11);
  }

  uint64_t v26 = ~v15;
  uint64_t v24 = (v16 + ((v14 + ((v14 + ((v14 + v24) & ~v12)) & ~v12)) & ~v12)) & v26;
  if ((_DWORD)v9 == v10)
  {
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v25(v24, v9, v11);
  }

  uint64_t v27 = *(void *)(((v19 + ((v18 + ((v18 + ((v18 + ((v18 + v24) & v26)) & v26)) & v26)) & v26)) & 0xFFFFFFFFFFFFF8LL)
                  + 8) >> 60;
  if (((4 * (_DWORD)v27) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v27) & 0xC | (v27 >> 2));
  }
  else {
    return 0LL;
  }
}

void sub_18762499C(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_checkMetadataState() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= 0xC) {
    unsigned int v9 = 12;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  size_t v14 = ((v13
        + 7
        + ((v13
          + v12
          + ((v13
            + v12
            + ((v13
              + v12
              + ((v13
                + v12
                + ((v11 + v12 + ((v11 + v10 + ((v11 + v10 + ((v11 + v10 + ((v10 + 8) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8LL)
      + 16;
  if (v9 >= a3)
  {
    int v17 = 0u;
    if (a2 <= v9) {
      goto LABEL_19;
    }
  }

  else
  {
    if ((((_DWORD)v13
         + 7
         + (((_DWORD)v13
           + (_DWORD)v12
           + (((_DWORD)v13
             + (_DWORD)v12
             + (((_DWORD)v13
               + (_DWORD)v12
               + (((_DWORD)v13
                 + (_DWORD)v12
                 + (((_DWORD)v11
                   + (_DWORD)v12
                   + (((_DWORD)v11
                     + (_DWORD)v10
                     + (((_DWORD)v11
                       + (_DWORD)v10
                       + (((_DWORD)v11 + (_DWORD)v10 + (((_DWORD)v10 + 8) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v15 = a3 - v9 + 1;
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v17 = v16;
    }
    else {
      int v17 = 0;
    }
    if (a2 <= v9) {
LABEL_19:
    }
      __asm { BR              X1 }
  }

  if ((_DWORD)v14)
  {
    unsigned int v18 = ~v9 + a2;
    bzero(a1, v14);
    *a1 = v18;
  }

  __asm { BR              X10 }

void sub_187624BD4()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x187624CC0LL);
}

void sub_187624BDC()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x187624BE4LL);
  }
  JUMPOUT(0x187624CC0LL);
}

void sub_187624C54()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x187624CC0LL);
}

void sub_187624C5C()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x187624CC0LL);
}

uint64_t sub_187624C64@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(_WORD *)(v14 + v17) = 0;
  if (!(_DWORD)v13) {
    JUMPOUT(0x187624CC0LL);
  }
  uint64_t v3 = (v14 + v9 + 8) & v12;
  if ((_DWORD)v16 == v7)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v5 = v13;
    a1 = v16;
    a2 = v15;
  }

  else
  {
    uint64_t v3 = (v10 + ((v8 + ((v8 + ((v8 + v3) & v12)) & v12)) & v12)) & v11;
    if ((_DWORD)a1 != v7) {
      JUMPOUT(0x187624C70LL);
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    uint64_t v5 = v13;
  }

  return v4(v3, v5, a1, a2);
}

uint64_t _s6ServerVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ServerVMn);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1895AAF60](a1, v6, a5);
}

uint64_t sub_187624D14()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_187624D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = _s6ServerVMa_0(319LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

unint64_t sub_187624D88(unint64_t a1, unint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 16) & (unint64_t)~v6) + 1 > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }

  else
  {
    uint64_t v11 = ~v6;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
    uint64_t v12 = (a1 & 0xFFFFFFFFFFFFFFF8LL) + v6;
    uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + v6;
    uint64_t v14 = (v12 + 16) & v11;
    uint64_t v15 = (v13 + 16) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 + v7);
  }

  return a1;
}

uint64_t sub_187624F10(uint64_t a1)
{
  unint64_t v1 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( (v1 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL),  AssociatedTypeWitness);
}

unint64_t sub_187625008(unint64_t a1, unint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 16 + v3) & ~v7;
  uint64_t v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(void *)(v6 + 64)) = *(_BYTE *)(v9 + *(void *)(v6 + 64));
  return a1;
}

unint64_t sub_187625144(unint64_t a1, unint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 16 + v3) & ~v7;
  uint64_t v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(void *)(v6 + 64)) = *(_BYTE *)(v9 + *(void *)(v6 + 64));
  return a1;
}

unint64_t sub_187625280(unint64_t a1, unint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 16 + v3) & ~v7;
  uint64_t v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(void *)(v6 + 64)) = *(_BYTE *)(v9 + *(void *)(v6 + 64));
  return a1;
}

unint64_t sub_1876253BC(unint64_t a1, unint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 16 + v3) & ~v7;
  uint64_t v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(void *)(v6 + 64)) = *(_BYTE *)(v9 + *(void *)(v6 + 64));
  return a1;
}

uint64_t sub_1876254F8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(v4 + 64);
  if (a2 <= v6) {
    goto LABEL_23;
  }
  uint64_t v9 = v8 + ((v7 + 16) & ~v7) + 1;
  char v10 = 8 * v9;
  unsigned int v12 = ((a2 - v6 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)(a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }

  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_23;
      }
LABEL_7:
      int v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9)) {
        goto LABEL_23;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if ((_DWORD)v8 + (((_DWORD)v7 + 16) & ~(_DWORD)v7) != -1)
      {
        else {
          int v14 = 4;
        }
        __asm { BR              X12 }
      }

      int v18 = v6 + v13;
      return (v18 + 1);
    }

    int v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9)) {
      goto LABEL_14;
    }
  }

LABEL_23:
  unint64_t v15 = ((a1 & 0xFFFFFFFFFFFFFFF8LL) + v7 + 16) & ~v7;
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
  }
  unsigned int v17 = *(unsigned __int8 *)(v15 + v8);
  if (v17 < 2) {
    return 0LL;
  }
  int v18 = (v17 + 2147483646) & 0x7FFFFFFF;
  return (v18 + 1);
}

  unint64_t v15 = ((a1 & 0xFFFFFFFFFFFFFFF8LL) + v7 + 16) & ~v7;
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
  }
  unsigned int v17 = *(unsigned __int8 *)(v15 + v8);
  if (v17 < 2) {
    return 0LL;
  }
  int v18 = (v17 + 2147483646) & 0x7FFFFFFF;
  return (v18 + 1);
}

    __break(1u);
    goto LABEL_24;
  }

  uint64_t v16 = *(void *)(v3 + 24);
  unsigned int v17 = *(void *)(v16 + 16);
  if (v17)
  {
    int v18 = 0LL;
    uint64_t v19 = (uint64_t *)(v16 + 32);
    while (1)
    {
      unsigned int v20 = *v19++;
      unsigned int v21 = __OFADD__(v18, v20);
      v18 += v20;
      if (v21) {
        break;
      }
      if (!--v17) {
        return sub_18767B80C(v18, v6, v7, a1);
      }
    }

    __break(1u);
    goto LABEL_23;
  }

  int v18 = 0LL;
  return sub_18767B80C(v18, v6, v7, a1);
}

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a6 & 0x8000000000000000LL) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (*(void *)(a5 + 16) <= a6)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v26 = a5 + 32;
  uint64_t v27 = *(void *)(a5 + 32 + 8 * a6);
  uint64_t v28 = v27 * a7;
  if ((unsigned __int128)(v27 * (__int128)a7) >> 64 != (v27 * a7) >> 63)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v29 = a6 >> 1;
  if (__OFADD__(v28, a6 >> 1))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  sub_187686C08(v15, v28 + (a6 >> 1), a8, a10, a11, a10);
  uint64_t v25 = v30;
  unint64_t v36 = v30;
  if (*(void *)(a4 + 40) != 1LL) {
    goto LABEL_20;
  }
  uint64_t v31 = *(unsigned __int8 *)(a4 + 57);
  if (v31 == 2 || (v31 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v32 = *(void *)(v26 + 8 * a6);
  unint64_t v33 = v32 * a7;
  if (!__OFADD__(v33, v29))
  {
    sub_187686C08(v15, v33 + v29, a12, a10, a11, a10);
    sub_18762E820(v34);
    uint64_t v25 = v36;
    goto LABEL_20;
  }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v14 = 0x1EFFCu >> v5;
    if (((1 << v23) & 0x1EFFC) != 0) {
      unint64_t v15 = 0x316D75746E617571LL;
    }
    else {
      unint64_t v15 = 0x656B636568636E75LL;
    }
    if (((1 << v23) & 0x1EFFC) != 0) {
      uint64_t v16 = 0xEA00000000003832LL;
    }
    else {
      uint64_t v16 = 0xE900000000000064LL;
    }
    if ((v14 & 1) != 0) {
      unsigned int v17 = 0x316D75746E617571LL;
    }
    else {
      unsigned int v17 = 0x656B636568636E75LL;
    }
    if ((v14 & 1) != 0) {
      int v18 = 0xEA00000000003832LL;
    }
    else {
      int v18 = 0xE900000000000064LL;
    }
    if (v17 == v15 && v18 == v16)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
LABEL_41:
      *a3 = v5;
      return result;
    }

    uint64_t v19 = sub_18769A6DC();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v3 = a2;
    if ((v19 & 1) != 0) {
      goto LABEL_41;
    }
LABEL_3:
    if (++v4 == 17)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)unsigned int v20 = 5;
      *(_BYTE *)(v20 + 4) = 1;
      return swift_willThrow();
    }
  }

  int v13 = 0LL;
  while (v12 != v13)
  {
    if (*(void *)(v9 + 40 + 8 * v13) != *(void *)(v11 + 8 * v13 + 40)) {
      goto LABEL_2;
    }
    if (v12 == ++v13) {
      goto LABEL_23;
    }
  }

void sub_18762573C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  size_t v8 = *(void *)(v6 + 64)
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X14 }

uint64_t _s16VerifiableServerVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s16VerifiableServerVMn);
}

uint64_t type metadata accessor for SecureBytes.Backing()
{
  uint64_t result = qword_18C4C7040;
  if (!qword_18C4C7040) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_187625A40()
{
  return swift_initClassMetadata2();
}

uint64_t sub_187625A7C()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  off_18C4C70D0 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_187625AAC(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v8 = (uint64_t)a1 + 32;
  uint64_t v9 = (uint64_t)a1 + result;
  uint64_t v10 = result - 32;
  uint64_t result = sub_1876287B8(0LL, a2, result - 32, v8, v9);
  if ((v11 & 1) != 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = result;
  }
  if (v12 < 0) {
    goto LABEL_10;
  }
  v15[0] = v8;
  v15[1] = v8 + v12;
  uint64_t v16 = 0LL;
  sub_1876388DC(v15, &v16);
  if (!v3)
  {
    uint64_t v13 = *a3;
    uint64_t v14 = v16;
    swift_beginAccess();
    *(void *)(v13 + 16) = v14;
  }

  return swift_release();
}

uint64_t sub_187625B8C(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  size_t v9 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = (uint64_t)a1 + 32;
    uint64_t v11 = (uint64_t)a1 + v9;
    size_t v12 = v9 - 32;
    uint64_t v13 = sub_1876287B8(0LL, a2, v9 - 32, v10, v11);
    if ((v14 & 1) != 0) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v13;
    }
    if ((v15 & 0x8000000000000000LL) == 0)
    {
      if (qword_18C6D97C8 == -1) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }

  __break(1u);
LABEL_11:
  swift_once();
LABEL_7:
  cckem_full_ctx_init();
  uint64_t result = cckem_generate_key();
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = *a3;
    uint64_t result = swift_beginAccess();
    *(void *)(v17 + 16) = a5;
  }

  return result;
}

uint64_t sub_187625C84( const void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v11 = (uint64_t)a1 + 32;
  uint64_t v12 = (uint64_t)a1 + result;
  uint64_t v13 = result - 32;
  uint64_t result = sub_1876287B8(0LL, a2, result - 32, v11, v12);
  if ((v14 & 1) != 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = result;
  }
  if (v15 < 0) {
    goto LABEL_10;
  }
  v18[0] = v11;
  v18[1] = v11 + v15;
  uint64_t v19 = 0LL;
  uint64_t result = a3(v18, &v19);
  if (!v5)
  {
    uint64_t v16 = *a5;
    uint64_t v17 = v19;
    uint64_t result = swift_beginAccess();
    *(void *)(v16 + 16) = v17;
  }

  return result;
}

char *sub_187625D58(char *result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = v3;
  unsigned int v7 = result;
  uint64_t result = (char *)_swift_stdlib_malloc_size(result);
  if ((uint64_t)(result - 32) < a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t v8 = _swift_stdlib_malloc_size(v4) - 32;
  size_t v9 = v4 + 2;
  uint64_t result = (char *)swift_beginAccess();
  uint64_t v10 = v4[2];
  size_t v11 = v8 - v10;
  if (__OFSUB__(v8, v10))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v12 = __OFSUB__(a3, a2);
  size_t v13 = a3 - a2;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  BOOL v12 = __OFSUB__(v11, v13);
  size_t v14 = v11 - v13;
  if (v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((v14 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t result = (char *)_swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t result = (char *)memmove((char *)v4 + v10 + 32, &v7[a2 + 32], v13);
  size_t v15 = *v9 + v13;
  if (!__OFADD__(*v9, v13))
  {
    uint64_t result = (char *)swift_beginAccess();
    *size_t v9 = v15;
    return result;
  }

LABEL_17:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      return result;
    }

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 3;
  size_t v8 = v6 - 3;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
  return result;
}

              __break(1u);
              goto LABEL_18;
            }

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 5;
  size_t v8 = v6 - 5;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 0x13;
  size_t v8 = v6 - 19;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 2;
  size_t v8 = v6 - 2;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

    __break(1u);
  }

  unsigned int v20 = v24;
  sub_18762D1DC();
  swift_allocError();
  *(_DWORD *)unsigned int v21 = v20;
  *(_BYTE *)(v21 + 4) = 0;
  swift_willThrow();
  sub_187623C58(v10, v12);
}

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 4;
  size_t v8 = v6 - 4;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
LABEL_18:
  uint64_t result = sub_18769A67C();
  __break(1u);
  return result;
}

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 8;
  size_t v8 = v6 - 8;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
  return result;
}

  uint64_t v6 = *((unsigned __int8 *)a1 + 1);
  unsigned int v7 = v6 >= 2;
  size_t v8 = v6 - 2;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  unsigned int v7 = v6 >= 0x11;
  size_t v8 = v6 - 17;
  if (!v7) {
    size_t v8 = -1;
  }
  return (v8 + 1);
}

size_t sub_187625E68()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_18769A580();
  size_t v3 = _swift_stdlib_malloc_size(v1) - 32;
  size_t result = swift_beginAccess();
  int64_t v5 = v1[2];
  size_t v6 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
    __break(1u);
    goto LABEL_8;
  }

  BOOL v7 = __OFSUB__(v6, v2);
  size_t v8 = v6 - v2;
  if (v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v8 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t result = _swift_stdlib_malloc_size(v1);
  if ((uint64_t)(result - 32) < v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  size_t result = sub_18769A5D4();
  uint64_t v9 = v1[2];
  BOOL v7 = __OFADD__(v9, v2);
  uint64_t v10 = v9 + v2;
  if (!v7)
  {
    v1[2] = v10;
    return result;
  }

LABEL_11:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        __break(1u);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_10;
  }

  __break(1u);
  size_t result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          __break(1u);
          JUMPOUT(0x187670EFCLL);
        }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    return v10;
  }

  v56 = v4;
  uint64_t v22 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CE8);
  if (swift_dynamicCast())
  {

    uint64_t v23 = v64;
    if (v65 == 1)
    {
      if (v64 == 1)
      {
        sub_187635F00();
        swift_allocError();
        *(_BYTE *)uint64_t v24 = 1;
        *(_DWORD *)(v24 + 4) = 0;
        *(_BYTE *)(v24 + 8) = 1;
        *(_DWORD *)(v24 + 12) = 0;
        *(_WORD *)(v24 + 16) = 256;
        *(_OWORD *)(v24 + 24) = xmmword_18769F3C0;
        *(void *)(v24 + 40) = 0x80000001876A0170LL;
        *(void *)(v24 + 48) = 0xD00000000000006BLL;
        *(void *)(v24 + 56) = 0x80000001876A1900LL;
        *(void *)(v24 + 64) = 0xD000000000000049LL;
        *(void *)(v24 + 72) = 0x80000001876A0220LL;
      }

      else
      {
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v28 = v23;
        *(_BYTE *)(v28 + 4) = 1;
      }
    }

    else
    {
      v58 = 0LL;
      v59 = 0xE000000000000000LL;
      sub_18769A5E0();
      sub_18769A490();
      v62 = v23;
      v63 = 0;
      sub_18769A664();
      sub_18769A490();
      uint64_t v25 = v58;
      uint64_t v26 = v59;
      sub_187635F00();
      swift_allocError();
      *(_BYTE *)uint64_t v27 = 3;
      *(_DWORD *)(v27 + 4) = v23;
      *(_BYTE *)(v27 + 8) = 0;
      *(_DWORD *)(v27 + 12) = 0;
      *(_WORD *)(v27 + 16) = 256;
      *(_OWORD *)(v27 + 24) = xmmword_18769F3B0;
      *(void *)(v27 + 40) = 0x80000001876A0170LL;
      *(void *)(v27 + 48) = 0xD00000000000006BLL;
      *(void *)(v27 + 56) = 0x80000001876A1900LL;
      *(void *)(v27 + 64) = v25;
      *(void *)(v27 + 72) = v26;
    }

    swift_willThrow();
  }
}

size_t sub_187625F54(int64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)*v2;
  size_t result = _swift_stdlib_malloc_size(*v2);
  if ((uint64_t)(result - 32) < a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (!HIDWORD(a1))
    {
      if ((_DWORD)a1)
      {
        unsigned int v6 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
        unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
        int v8 = v7 | HIWORD(v7);
        if (v8 == -1) {
          uint64_t v9 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v9 = (v8 + 1);
        }
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      type metadata accessor for SecureBytes.Backing();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0LL;
      *(void *)(v10 + 24) = v9;
      size_t result = swift_beginAccess();
      uint64_t v11 = *((void *)v4 + 2);
      if ((v11 & 0x8000000000000000LL) == 0)
      {
        sub_187625D58(v4, 0LL, v11);
        size_t result = swift_release();
        *uint64_t v2 = (const void *)v10;
        return result;
      }

LABEL_14:
      __break(1u);
      return result;
    }

    __break(1u);
    goto LABEL_14;
  }

  return result;
}

          uint64_t v9 = __OFADD__(v7++, 1LL);
          if (v9) {
            goto LABEL_27;
          }
        }

        uint64_t v9 = __OFADD__(v10++, 1LL);
        if (v9) {
          goto LABEL_26;
        }
      }

      goto LABEL_25;
    }

    uint64_t v9 = __OFADD__(v7++, 1LL);
  }

  while (!v9);
  __break(1u);
LABEL_9:
  swift_release();
  uint64_t v10 = *(void *)(v4 + 16);
  unsigned int v7 = v10;
  return sub_187683F38(v7, v10);
}

  __break(1u);
  return result;
}

      __break(1u);
LABEL_15:
      __break(1u);
    }
  }

  else if (*(void *)(a2 + 24))
  {
    uint64_t v4 = MEMORY[0x18961AFE8];
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_15;
      }

  uint64_t v26 = a7;
  if ((a8 & 1) != 0) {
    uint64_t v26 = 1LL;
  }
  if (!v26) {
    goto LABEL_26;
  }
  if (a6 == 0x8000000000000000LL && v26 == -1) {
    goto LABEL_27;
  }
  if (a6 % v26) {
    goto LABEL_20;
  }
  *(_BYTE *)a9 = v15;
  *(_BYTE *)(a9 + 1) = v30;
  *(_BYTE *)(a9 + 2) = v28;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = v20;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  *(_BYTE *)(a9 + 57) = a10;
  return result;
}

      __break(1u);
LABEL_15:
      __break(1u);
    }
  }

  else if (*(void *)(a2 + 24))
  {
    uint64_t v4 = MEMORY[0x18961AFE8];
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

uint64_t sub_18762603C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_187698204(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

void sub_18762609C(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_1876260A4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(v3 + 16);
  return result;
}

uint64_t (*sub_1876260E8(_BYTE *a1, void *a2))()
{
  *a1 = *(_BYTE *)(*v2 + *a2 + 32LL);
  return nullsub_1;
}

uint64_t sub_187626110@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v8 >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }

LABEL_7:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    JUMPOUT(0x18762A898LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, v11, v14, v13);
}

    JUMPOUT(0x1876356A8LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, v11, v14, v13);
}

  swift_unexpectedError();
  __break(1u);
}

      __break(1u);
      JUMPOUT(0x187644784LL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  goto LABEL_7;
}

    uint64_t v37 = &qword_18C6DA1F8;
    uint64_t v38 = (uint64_t)v22;
LABEL_8:
    sub_18764D2EC(v38, v37);
    goto LABEL_19;
  }

  unint64_t v36 = v70;
  sub_187662420((uint64_t)v22, v70, &qword_18C6DA100);
  if (v35(v34, 1LL, v17) == 1)
  {
    sub_18764D2EC((uint64_t)v27, &qword_18C6DA100);
    sub_18764D2EC((uint64_t)v30, &qword_18C6DA100);
    sub_18765E614(v36, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    goto LABEL_7;
  }

  uint64_t v39 = v82;
  sub_187662464(v34, v82, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  uint64_t v40 = sub_187662D1C(v36, v39);
  sub_18765E614(v39, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  sub_18764D2EC((uint64_t)v27, &qword_18C6DA100);
  sub_18764D2EC((uint64_t)v30, &qword_18C6DA100);
  sub_18765E614(v36, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  sub_18764D2EC((uint64_t)v22, &qword_18C6DA100);
  if ((v40 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v42 = v68;
  uint64_t v41 = v69;
  sub_187638644(*((void *)v68 + 1), *((void *)v68 + 2));
  if ((v43 & 1) == 0) {
    goto LABEL_19;
  }
  v44 = v67;
  v45 = v79;
  sub_187662420((uint64_t)v42 + *(int *)(v67 + 32), v79, &qword_18C6DA108);
  v46 = v78;
  sub_187662420((uint64_t)v41 + *(int *)(v44 + 32), v78, &qword_18C6DA108);
  uint64_t v47 = v81;
  unint64_t v48 = v81 + *(int *)(v66 + 48);
  sub_187662420(v45, v81, &qword_18C6DA108);
  sub_187662420(v46, v48, &qword_18C6DA108);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v50 = v80;
  if (v49(v47, 1LL, v80) != 1)
  {
    uint64_t v51 = v76;
    sub_187662420(v47, (uint64_t)v76, &qword_18C6DA108);
    if (v49(v48, 1LL, v50) != 1)
    {
      uint64_t v52 = v71;
      sub_187662464( v48,  v71,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      v53 = sub_187662BC8(v51, v52);
      sub_18765E614( v52,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      sub_18764D2EC(v46, &qword_18C6DA108);
      sub_18764D2EC(v45, &qword_18C6DA108);
      sub_18765E614( (uint64_t)v51,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      sub_18764D2EC(v47, &qword_18C6DA108);
      if ((v53 & 1) != 0) {
        goto LABEL_18;
      }
LABEL_19:
      v62 = 0;
      return v62 & 1;
    }

    sub_18764D2EC(v46, &qword_18C6DA108);
    sub_18764D2EC(v45, &qword_18C6DA108);
    sub_18765E614( (uint64_t)v51,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_16;
  }

  sub_18764D2EC(v46, &qword_18C6DA108);
  sub_18764D2EC(v45, &qword_18C6DA108);
  if (v49(v48, 1LL, v50) != 1)
  {
LABEL_16:
    uint64_t v37 = &qword_18C6DA1F0;
    uint64_t v38 = v47;
    goto LABEL_8;
  }

  sub_18764D2EC(v47, &qword_18C6DA108);
LABEL_18:
  v54 = v67;
  v55 = (uint64_t)v42 + *(int *)(v67 + 24);
  v57 = v74;
  v56 = v75;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v59 = v72;
  v58(v72, v55, v75);
  v60 = (uint64_t)v41 + *(int *)(v54 + 24);
  v61 = v73;
  v58(v73, v60, v56);
  sub_187639840(&qword_18C6DA200, (uint64_t (*)(uint64_t))MEMORY[0x189610108], MEMORY[0x189610120]);
  v62 = sub_18769A424();
  v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63(v61, v56);
  v63(v59, v56);
  return v62 & 1;
}

  __break(1u);
  return result;
}

  __break(1u);
  uint64_t result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    JUMPOUT(0x187685150LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, v10, v13, v12);
}

uint64_t sub_187626188@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5 < 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = v5;
  }

  return result;
}

BOOL sub_1876261D4()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16) == 0LL;
}

void sub_187626218(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_187626230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9 < a3 || (a3 | a1) < 0 || v9 < a1)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= a2) {
      goto LABEL_11;
    }
    return 0LL;
  }

  if (v10 <= 0 && v10 > a2) {
    return 0LL;
  }
LABEL_11:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }

  if (result < 0 || v9 < result) {
    goto LABEL_17;
  }
  return result;
}

uint64_t *sub_1876262F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_187626314(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_187626330(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_18762634C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *sub_187626364(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_18762637C(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0LL;
}

uint64_t sub_187626388()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16);
}

uint64_t sub_1876263C4()
{
  return 2LL;
}

uint64_t sub_1876263CC()
{
  uint64_t v1 = sub_187628330(*v0);
  swift_release();
  return v1;
}

uint64_t sub_187626400(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_187626408(a1, a2, a3, *v3);
}

uint64_t sub_187626408(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_14:
    *BOOL v5 = a4;
    v5[1] = v6;
    return v6;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    if (v8)
    {
      *a2 = *(_BYTE *)(a4 + 32);
      uint64_t v9 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v10 = 0LL;
        while (v9 != v10)
        {
          if (__OFSUB__(v8, v10 + 1)) {
            goto LABEL_16;
          }
          if (v8 - 1 == v10) {
            goto LABEL_13;
          }
          a2[v10 + 1] = *(_BYTE *)(a4 + 33 + v10);
          if (v9 == ++v10) {
            goto LABEL_14;
          }
        }

        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }

    else
    {
LABEL_13:
      uint64_t v6 = v8;
    }

    goto LABEL_14;
  }

uint64_t sub_1876264DC@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1876264F8(a1, a2, a3);
}

uint64_t sub_1876264F8@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1876274DC(a1, a2, a3);
}

void *sub_18762651C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1LL;
  }
  return result;
}

void *sub_187626534(void *result)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void *sub_18762654C@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *v3;
    uint64_t result = (void *)swift_beginAccess();
    if ((v5 & 0x8000000000000000LL) == 0 && *(void *)(v6 + 16) >= v5)
    {
      *a3 = v5;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1876265B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_187626230(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_1876265F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 >= v4 && ((v4 | v3) & 0x8000000000000000LL) == 0 && v7 >= v3) {
    return v4 - v3;
  }
  __break(1u);
  return result;
}

_BYTE *sub_18762665C(_BYTE *result, void *a2)
{
  *(_BYTE *)(*v2 + *a2 + 32LL) = *result;
  return result;
}

uint64_t (*sub_187626674(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v3 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(*v2 + v3 + 32);
  return sub_1876266A0;
}

uint64_t sub_1876266A0(uint64_t result)
{
  *(_BYTE *)(**(void **)result + *(void *)(result + 8) + 32LL) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_1876266B8(uint64_t *a1, uint64_t *a2)
{
  return swift_release();
}

void (*sub_1876266F0(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_187626768(v4, *a2, a2[1]);
  return sub_18762673C;
}

void sub_18762673C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_187626768(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  uint64_t v8 = *v3;
  uint64_t result = (void (*)(uint64_t **))swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v10 >= a3)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    v7[2] = v8;
    swift_retain();
    return sub_18762680C;
  }

void sub_18762680C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_18762821C((uint64_t *)(*a1)[8], v1[6], (*a1)[7], *v1, v1[1], v1[2]);
  swift_release();
  free(v1);
}

uint64_t sub_187626848@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_187628690(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_187626870(void *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }

  else if (*a2 != *result)
  {
    uint64_t v5 = *v2 + 32LL;
    char v6 = *(_BYTE *)(v5 + v3);
    *(_BYTE *)(v5 + v3) = *(_BYTE *)(v5 + v4);
    *(_BYTE *)(v5 + v4) = v6;
  }

  return result;
}

uint64_t sub_1876268A4()
{
  return sub_18769A418();
}

uint64_t sub_1876268C4()
{
  return sub_18769A40C();
}

uint64_t sub_1876268E4(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }

  int64_t v13 = *v10 - v12;
  if (__OFSUB__(*v10, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = sub_18769A580();
  BOOL v14 = __OFADD__(v13, result);
  uint64_t v15 = v13 + result;
  if (v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_187626AB0(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }

  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  unsigned int v20 = (const void *)result;
  unsigned int v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  sub_187625D58(v21, 0LL, a1);
  sub_187625E68();
  sub_187625D58((char *)*v5, a2, v22);
  *uint64_t v5 = v20;
  return swift_release();
}

uint64_t sub_187626AB0(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858]();
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v14);
  uint64_t v15 = v5 + 2;
  uint64_t result = swift_beginAccess();
  int64_t v17 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }

  int64_t v27 = a2;
  int64_t v18 = *v15 - v17;
  if (__OFSUB__(*v15, v17))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = sub_18769A580();
  BOOL v19 = __OFADD__(v18, result);
  int64_t v20 = v18 + result;
  if (v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v26 = a1;
  int64_t v21 = _swift_stdlib_malloc_size(v5) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  if (v21 < v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t result = sub_18769A580();
  uint64_t v22 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t result = v27;
  if (*v15 < v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  sub_1876279A8(v27, *v15, v22);
  sub_187627A5C(a3, v26, a4);
  uint64_t result = sub_18769A580();
  uint64_t v23 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  BOOL v19 = __OFADD__(*v15, v23);
  int64_t v24 = *v15 + v23;
  if (!v19)
  {
    *uint64_t v15 = v24;
    return result;
  }

uint64_t sub_187626C40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858]();
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858]();
  int64_t v12 = &v16[-v11];
  int64_t v17 = v3;
  uint64_t result = sub_18769A4E4();
  if (v18 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    sub_18769A4D8();
    swift_getAssociatedConformanceWitness();
    sub_18769A5C8();
    if ((v20 & 1) == 0)
    {
      size_t v14 = v19;
      do
      {
        uint64_t v15 = *v3;
        swift_beginAccess();
        sub_187681724(*(void *)(v15 + 16), *(void *)(v15 + 16), v14);
        sub_18769A5C8();
        size_t v14 = v19;
      }

      while (v20 != 1);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }

  return result;
}

uint64_t sub_187626E10(void *a1, size_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  swift_beginAccess();
  return sub_1876818C0(*(void *)(v5 + 16), *(void *)(v5 + 16), a1, a2);
}

uint64_t sub_187626E80@<X0>(void *a1@<X8>)
{
  if (qword_18C4C70B0 != -1) {
    swift_once();
  }
  *a1 = off_18C4C70D0;
  return swift_retain();
}

uint64_t sub_187626ED0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

void *sub_187626F24@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_187628C88(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_187626F4C()
{
  return sub_18769A598();
}

uint64_t sub_187626F64(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  size_t v3 = *a1;
  swift_beginAccess();
  return sub_187681724(*(void *)(v2 + 16), *(void *)(v2 + 16), v3);
}

uint64_t sub_187626FBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t sub_187626FF8(unsigned __int8 *a1, int64_t *a2)
{
  return sub_187681724(*a2, *a2, *a1);
}

uint64_t sub_187627008()
{
  return sub_18769A58C();
}

uint64_t sub_187627020@<X0>(int64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_6;
  }

  int64_t v7 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v7 >= v4)
  {
    char v8 = *(_BYTE *)(v5 + v4 + 32);
    uint64_t result = sub_187683F38(v4, v7);
    *a2 = v8;
    return result;
  }

uint64_t sub_1876270A0(int64_t *a1)
{
  return sub_187683F38(*a1, a1[1]);
}

void sub_1876270AC(_WORD *a1@<X8>)
{
  *a1 = 256;
}

int64_t sub_1876270B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  char v6 = *(_BYTE *)(v3 + 32);
  int64_t result = sub_187626230(0LL, 1LL, v5, v3);
  if ((v7 & 1) == 0)
  {
    if ((result & 0x8000000000000000LL) == 0)
    {
      int64_t result = sub_187683F38(0LL, result);
      *a1 = v6;
      return result;
    }

    goto LABEL_6;
  }

int64_t sub_187627140(int64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = *v1;
      swift_beginAccess();
      int64_t result = sub_187626230(0LL, v2, *(void *)(v3 + 16), v3);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }

      if ((result & 0x8000000000000000LL) == 0) {
        return sub_187683F38(0LL, result);
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_1876271C4(char a1)
{
  uint64_t v2 = *v1;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    int64_t v3 = *(void *)(v2 + 16);
    if ((v3 & 0x8000000000000000LL) == 0) {
      return sub_187683F38(0LL, v3);
    }
    __break(1u);
    goto LABEL_7;
  }

  swift_release();
  if (qword_18C4C70B0 != -1) {
LABEL_7:
  }
    swift_once();
  *uint64_t v1 = (uint64_t)off_18C4C70D0;
  return swift_retain();
}

uint64_t sub_187627260(uint64_t (*a1)(char *))
{
  return sub_187627274(a1);
}

uint64_t sub_187627274(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)(*v1 + 16LL);
  swift_retain();
  uint64_t result = swift_beginAccess();
  int64_t v7 = 0LL;
  uint64_t v8 = v4 + 32;
  do
  {
    if (__OFSUB__(*v5, v7))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }

    if (v7 == *v5) {
      goto LABEL_9;
    }
    char v12 = *(_BYTE *)(v4 + v7 + 32);
    uint64_t result = a1(&v12);
    if (v2) {
      return swift_release();
    }
    if ((result & 1) != 0)
    {
      uint64_t result = swift_release();
      int64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1LL))
      {
        __break(1u);
        goto LABEL_14;
      }

      while (!__OFSUB__(*v5, v10))
      {
        if (*v5 == v10)
        {
          if (v10 < v7) {
            goto LABEL_29;
          }
          return sub_187683F38(v7, v10);
        }

        char v12 = *(_BYTE *)(v8 + v10);
        uint64_t result = a1(&v12);
        if ((result & 1) == 0)
        {
          if (__OFSUB__(v10, v7)) {
            goto LABEL_28;
          }
          if (v10 != v7)
          {
            char v11 = *(_BYTE *)(v8 + v7);
            *(_BYTE *)(v8 + v7) = *(_BYTE *)(v8 + v10);
            *(_BYTE *)(v8 + v10) = v11;
          }

uint64_t sub_1876273F8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(void *)(a3 + 16));
}

uint64_t sub_18762746C(uint64_t (*a1)(uint64_t, uint64_t))
{
  return a1(v1 + 32, v1 + 32 + *(void *)(v1 + 16));
}

uint64_t sub_1876274DC@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = a1(v3 + 32, *(void *)(v3 + 16));
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a3, 0LL, 1LL, a2);
  }
  return result;
}

uint64_t sub_187627574(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1876273F8(a1, a2, *v2);
}

uint64_t sub_18762758C@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_187627598()
{
  return sub_187699E30();
}

uint64_t sub_1876275BC()
{
  return sub_187699E6C();
}

uint64_t sub_1876275E4()
{
  return sub_187699E54();
}

uint64_t sub_1876275F4()
{
  return sub_187699E48();
}

uint64_t sub_18762760C()
{
  return sub_187699E3C();
}

uint64_t sub_187627628()
{
  return sub_187699EE4();
}

uint64_t sub_187627640()
{
  return sub_18769A778();
}

uint64_t sub_187627684()
{
  return sub_18769A760();
}

uint64_t sub_1876276AC()
{
  return sub_18769A778();
}

void *sub_1876276EC(void *result, void *a2)
{
  if (!__OFSUB__(*a2, *result)) {
    return (void *)(*a2 == *result);
  }
  __break(1u);
  return result;
}

BOOL sub_187627708(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_18762771C(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_187627730(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_187627744(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *sub_187627758@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *sub_187627774@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = *v2 + *result;
  }
  return result;
}

void *sub_187627790(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }

  else
  {
    *uint64_t result = *a4 + *a6;
    return 0LL;
  }

  return result;
}

uint64_t sub_1876277B4()
{
  return v1;
}

size_t sub_187627818@<X0>(size_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v4 = a2 - result;
  if (result) {
    size_t v5 = a2 - result;
  }
  else {
    size_t v5 = 0LL;
  }
  if ((v5 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  if (HIDWORD(v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  char v6 = (const void *)result;
  if ((_DWORD)v5)
  {
    unsigned int v7 = (v5 - 1) | ((v5 - 1) >> 1) | ((((_DWORD)v5 - 1) | ((v5 - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  char v11 = (void *)swift_allocObject();
  v11[2] = 0LL;
  v11[3] = v10;
  _swift_stdlib_malloc_size(v11);
  if (v6) {
    memmove(v11 + 4, v6, v4);
  }
  else {
    int64_t v4 = 0LL;
  }
  swift_beginAccess();
  v11[2] = v4;
  uint64_t result = _swift_stdlib_malloc_size(v11);
  if ((uint64_t)(result - 32) >= v4)
  {
    *a3 = v11;
    return result;
  }

LABEL_18:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

                __break(1u);
                goto LABEL_19;
              }

  __break(1u);
  swift_unexpectedError();
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

    swift_unexpectedError();
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v47 = v58;
  sub_18762D1DC();
  unint64_t v48 = swift_allocError();
  *(_DWORD *)uint64_t v49 = v47;
  *(_BYTE *)(v49 + 4) = 0;
  v55 = v48;
  swift_willThrow();
  return sub_1876482B4(v28, a4);
}

  uint64_t v28 = 0;
  return v28 & 1;
}

uint64_t sub_187627930()
{
  return swift_deallocClassInstance();
}

uint64_t sub_187627980()
{
  return type metadata accessor for SecureBytes.Backing();
}

ValueMetadata *type metadata accessor for SecureBytes.BackingHeader()
{
  return &type metadata for SecureBytes.BackingHeader;
}

ValueMetadata *type metadata accessor for SecureBytes()
{
  return &type metadata for SecureBytes;
}

size_t sub_1876279A8(size_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v4 = v3;
  size_t v7 = result;
  uint64_t result = _swift_stdlib_malloc_size(v4);
  uint64_t v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  BOOL v9 = __OFADD__(a2, a3);
  uint64_t v10 = a2 + a3;
  if (v9)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v10 < v8)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) >= v10)
  {
    _swift_stdlib_malloc_size(v4);
    return (size_t)memmove(&v4[v8 + 32], &v4[v7 + 32], a2 - v7);
  }

uint64_t sub_187627A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t result = MEMORY[0x1895F8858]();
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  uint64_t result = sub_18769A580();
  int64_t v13 = a2 + result;
  if (__OFADD__(a2, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  int64_t v14 = _swift_stdlib_malloc_size(v4) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  if (v14 < v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_18769A580();
  if (__OFADD__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 + result >= a2)
  {
    _swift_stdlib_malloc_size(v4);
    return sub_18769A5D4();
  }

uint64_t sub_187627B80(uint64_t (*a1)(uint64_t, uint64_t))
{
  return sub_18762746C(a1);
}

unint64_t sub_187627BA4()
{
  unint64_t result = qword_18C6D9928;
  if (!qword_18C6D9928)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C120, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_18C6D9928);
  }

  return result;
}

uint64_t sub_187627BE8()
{
  return MEMORY[0x189618758];
}

uint64_t sub_187627BF4()
{
  return MEMORY[0x189618790];
}

unint64_t sub_187627C04()
{
  unint64_t result = qword_18C6D9930;
  if (!qword_18C6D9930)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C168, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_18C6D9930);
  }

  return result;
}

unint64_t sub_187627C4C()
{
  unint64_t result = qword_18C6D9938;
  if (!qword_18C6D9938)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C558, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D9938);
  }

  return result;
}

unint64_t sub_187627C94()
{
  unint64_t result = qword_18C6D9940;
  if (!qword_18C6D9940)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C2C8, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D9940);
  }

  return result;
}

unint64_t sub_187627CDC()
{
  unint64_t result = qword_18C6D9948;
  if (!qword_18C6D9948)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C210, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D9948);
  }

  return result;
}

unint64_t sub_187627D24()
{
  unint64_t result = qword_18C6D9950;
  if (!qword_18C6D9950)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C450, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D9950);
  }

  return result;
}

uint64_t sub_187627D68()
{
  return sub_1876281B4(&qword_18C6D9958, (uint64_t (*)(void))sub_187627CDC, MEMORY[0x18961A5F0]);
}

uint64_t sub_187627D94()
{
  return sub_1876281B4(&qword_18C6D9968, (uint64_t (*)(void))sub_187627C94, MEMORY[0x18961A5D0]);
}

unint64_t sub_187627DC4()
{
  unint64_t result = qword_18C6D9970;
  if (!qword_18C6D9970)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C388, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D9970);
  }

  return result;
}

uint64_t sub_187627E08()
{
  return sub_18762800C(&qword_18C6D9978, MEMORY[0x189618A58]);
}

unint64_t sub_187627E2C()
{
  unint64_t result = qword_18C6D9988;
  if (!qword_18C6D9988)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C0C8, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_18C6D9988);
  }

  return result;
}

unint64_t sub_187627E70()
{
  unint64_t result = qword_18C6D9990;
  if (!qword_18C6D9990)
  {
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C6D9990);
  }

  return result;
}

uint64_t sub_187627EB4()
{
  return sub_1876281B4(&qword_18C6D9998, (uint64_t (*)(void))sub_187627EE0, MEMORY[0x18961A5E0]);
}

unint64_t sub_187627EE0()
{
  unint64_t result = qword_18C6D99A0;
  if (!qword_18C6D99A0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C338, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D99A0);
  }

  return result;
}

uint64_t sub_187627F24()
{
  return sub_18762800C(&qword_18C6D99A8, MEMORY[0x189618A40]);
}

uint64_t sub_187627F48()
{
  return sub_1876281B4(&qword_18C6D99B0, (uint64_t (*)(void))sub_187627DC4, MEMORY[0x18961A5C8]);
}

uint64_t sub_187627F74()
{
  return sub_1876280D4(&qword_18C6D99B8, &qword_18C6D99C0, MEMORY[0x189619678]);
}

unint64_t sub_187627FA4()
{
  unint64_t result = qword_18C6D99C8;
  if (!qword_18C6D99C8)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C3E8, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6D99C8);
  }

  return result;
}

uint64_t sub_187627FE8()
{
  return sub_18762800C(&qword_18C6D99D0, MEMORY[0x189618A60]);
}

uint64_t sub_18762800C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6D9980);
    v6[0] = sub_187627E2C();
    v6[1] = sub_187627E70();
    uint64_t result = MEMORY[0x1895AAF9C](a2, v5, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_187628078()
{
  return sub_1876280D4(&qword_18C6D99D8, &qword_18C6D9960, MEMORY[0x18961A5E8]);
}

uint64_t sub_1876280A8()
{
  return sub_1876280D4(&qword_18C6D99E0, &qword_18C6D99E8, MEMORY[0x189619490]);
}

uint64_t sub_1876280D4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x1895AAF9C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_187628114()
{
  return sub_1876281B4(&qword_18C6D99F0, (uint64_t (*)(void))sub_187627C4C, MEMORY[0x189607400]);
}

unint64_t sub_187628144()
{
  unint64_t result = qword_18C4C70F0;
  if (!qword_18C4C70F0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769C5E8, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4C70F0);
  }

  return result;
}

uint64_t sub_187628188()
{
  return sub_1876281B4(&qword_18C6D99F8, (uint64_t (*)(void))sub_187628144, MEMORY[0x189607408]);
}

uint64_t sub_1876281B4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6D9960);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x1895AAF9C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_18762821C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a1;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (a2 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v13 < a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (__OFSUB__(a3, a2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (a3 != a2)
  {
    if (__OFSUB__(a5, a4))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    if (a5 == a4)
    {
LABEL_29:
      __break(1u);
      return result;
    }

    while (a4 < a5)
    {
      *(_BYTE *)(v11 + 32 + a2) = *(_BYTE *)(a6 + 32 + a4);
      uint64_t v14 = a2 + 1;
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_19;
      }
      if (__OFSUB__(a3, v14)) {
        goto LABEL_20;
      }
      ++a4;
      if (v14 == a3) {
        goto LABEL_6;
      }
      if (__OFSUB__(a5, a4)) {
        goto LABEL_21;
      }
      ++a2;
      if (a5 == a4)
      {
        __break(1u);
        break;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

LABEL_6:
  if (__OFSUB__(a5, a4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (a4 != a5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  return result;
}

uint64_t sub_187628330(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x18961AFE8];
  }
  if (v2 <= 0)
  {
    uint64_t v3 = MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
    uint64_t v3 = swift_allocObject();
    size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = 2 * v4 - 64;
  }

  uint64_t v5 = sub_187626408((uint64_t)&v7, (_BYTE *)(v3 + 32), v2, a1);
  swift_retain();
  uint64_t result = swift_release();
  if (v5 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895AAF84]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

int64_t sub_18762844C(int64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    int64_t v4 = a4 - a3;
  }
  else {
    int64_t v4 = 0LL;
  }
  if (result < 0 || (uint64_t v5 = result, v4 < result))
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (a2 < 0 || v4 < a2) {
    goto LABEL_24;
  }
  uint64_t v7 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x18961AFE8];
  }
  if (v7 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
    uint64_t v8 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v8);
    v8[2] = v7;
    v8[3] = 2 * result - 64;
  }

  v14[0] = v5;
  v14[1] = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  MEMORY[0x1895F8858](result);
  if (a3) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t result = (int64_t)sub_1876288B4( v11,  v14,  (void *(*)(__int128 *__return_ptr, uint64_t, void *))sub_187628ED4,  &v17);
  uint64_t v12 = v14[0] + v18;
  if (__OFADD__(v14[0], v18)) {
    goto LABEL_25;
  }
  uint64_t v13 = v16 - v15;
  if (!v15) {
    uint64_t v13 = 0LL;
  }
  if (v12 < 0 || v13 < v12) {
    goto LABEL_26;
  }
  if (v18 == v7) {
    return (int64_t)v8;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1876285C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }

  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy();
        return;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_18C6D9A00);
      uint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = _swift_stdlib_malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

uint64_t sub_187628690(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 < 1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = v4 + 32;
  uint64_t v8 = v4 + 31;
  do
  {
    char v14 = *(_BYTE *)(v7 + v6);
    char v9 = a1(&v14);
    if (v2) {
      break;
    }
    if ((v9 & 1) != 0)
    {
      if (v6 >= v5 - 1) {
        return v6;
      }
      while (1)
      {
        char v14 = *(_BYTE *)(v8 + v5);
        uint64_t result = a1(&v14);
        uint64_t v11 = v5 - 1;
        if ((result & 1) == 0) {
          break;
        }
        uint64_t v12 = v5 - 2;
        if (__OFSUB__(v11, 1LL))
        {
          __break(1u);
          goto LABEL_17;
        }

        --v5;
        if (v6 >= v12) {
          return v6;
        }
      }

      if (!__OFSUB__(v11, v6))
      {
        char v13 = *(_BYTE *)(v7 + v6);
        *(_BYTE *)(v7 + v6) = *(_BYTE *)(v8 + v5);
        *(_BYTE *)(v8 + v5--) = v13;
        goto LABEL_3;
      }

LABEL_3:
    ++v6;
  }

  while (v6 < v5);
  return v6;
}

uint64_t sub_1876287B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - a4;
  if (!a4) {
    uint64_t v5 = 0LL;
  }
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (a3 < 0 || v5 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 > 0)
  {
    return 0LL;
  }

  if (v6 <= 0 && v6 > a2) {
    return 0LL;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }

  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

char *sub_187628840(char *__src, int64_t a2, void *__dst, int64_t a4)
{
  uint64_t v4 = __src;
  if (a2 && a4)
  {
    if (a2 >= a4) {
      size_t v5 = a4;
    }
    else {
      size_t v5 = a2;
    }
    memcpy(__dst, __src, v5);
    v4 += v5;
  }

  return v4;
}

void *sub_1876288B4@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X2>, void *(*a3)(__int128 *__return_ptr, uint64_t, void *)@<X3>, _OWORD *a4@<X8>)
{
  unsigned __int8 v19 = a4;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v11 = sub_1876696D0(0LL, *a2, v10, v9);
  uint64_t result = (void *)sub_1876696D0(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }

  char v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  if (a1) {
    uint64_t v14 = a1 + v11;
  }
  else {
    uint64_t v14 = 0LL;
  }
  uint64_t result = a3(&v17, v14, v13);
  if (!v4)
  {
    uint64_t v15 = v18;
    uint64_t v16 = v19;
    *unsigned __int8 v19 = v17;
    *((void *)v16 + 2) = v15;
  }

  return result;
}

uint64_t sub_187628980()
{
  return sub_1876277B4();
}

unint64_t sub_1876289C4(unint64_t result)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v2 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v3 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
    int v5 = v4 | HIWORD(v4);
    if (v5 == -1) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v6 = (v5 + 1);
    }
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = v6;
  uint64_t v9 = v7;
  swift_retain();
  uint64_t v8 = (const void *)swift_retain();
  sub_187625AAC(v8, v2, &v9);
  swift_release();
  if (v1) {
    swift_release();
  }
  return v7;
}

unint64_t sub_187628AB8(unint64_t result, uint64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_187625B8C(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

unint64_t sub_187628BA0( unint64_t result, uint64_t (*a2)(void *, uint64_t *), uint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_187625C84(v12, v4, a2, a3, &v13);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

void *sub_187628C88(size_t a1, uint64_t a2)
{
  if (qword_18C4C70B0 != -1) {
    swift_once();
  }
  uint64_t result = off_18C4C70D0;
  int v5 = off_18C4C70D0;
  if (!a2) {
    return (void *)swift_retain();
  }
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_187681724(v5[2], v5[2], a1);
      --a2;
    }

    while (a2);
    return v5;
  }

  return result;
}

uint64_t sub_187628D3C(void *a1, size_t a2)
{
  uint64_t v5 = **(void **)(v2 + 16);
  swift_beginAccess();
  return sub_1876818C0(*(void *)(v5 + 16), *(void *)(v5 + 16), a1, a2);
}

uint64_t sub_187628DAC(int64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((_DWORD)a1)
  {
    unsigned int v2 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
    unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
    int v4 = v3 | HIWORD(v3);
    if (v4 == -1) {
      uint64_t v5 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v5 = (v4 + 1);
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 0LL;
  void v6[3] = v5;
  size_t v7 = _swift_stdlib_malloc_size(v6);
  if (!a1) {
    goto LABEL_12;
  }
  if ((uint64_t)(v7 - 32) < a1)
  {
LABEL_15:
    __break(1u);
    __break(1u);
  }

  uint64_t result = ccrng();
  if (result)
  {
    ccrng_generate_bridge();
LABEL_12:
    swift_beginAccess();
    void v6[2] = a1;
    return (uint64_t)v6;
  }

  __break(1u);
  return result;
}

char *sub_187628ED4@<X0>(char *a1@<X0>, int64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t result = sub_187628840(a1, a2, *(void **)(v3 + 16), *(void *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }

  return result;
}

uint64_t sub_187628F04(uint64_t a1)
{
  uint64_t v2 = sub_187699F14();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (uint64_t (**)())((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *uint64_t v5 = sub_1876290A8;
  v5[1] = (uint64_t (*)())v7;
  (*(void (**)(uint64_t (**)(), void, uint64_t))(v3 + 104))(v5, *MEMORY[0x189606B40], v2);
  swift_retain();
  sub_187699F08();
  if (v6)
  {
    sub_187699ECC();
    swift_allocObject();
    swift_retain();
    uint64_t v8 = sub_187699E78();
    uint64_t v9 = sub_187696BE4(v8, v6);
    swift_release();
  }

  else
  {
    uint64_t v10 = (void (*)(uint64_t, void))sub_187699F08();
    v10(a1 + 32, 0LL);
    swift_release();
    swift_release();
    uint64_t v9 = 0LL;
  }

  (*(void (**)(uint64_t (**)(), uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t sub_187629098()
{
  return swift_deallocObject();
}

uint64_t sub_1876290A8()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SecureBytes.Index()
{
  return &type metadata for SecureBytes.Index;
}

ValueMetadata *type metadata accessor for HE.DcrtPlaintext()
{
  return &type metadata for HE.DcrtPlaintext;
}

uint64_t cryptokit_scrypt( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8, void *a9)
{
  return scrypt(pass_len:pass:salt_len:salt:cost_N:block_size_r:parallelization:output_len:output:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
}

uint64_t scrypt(pass_len:pass:salt_len:salt:cost_N:block_size_r:parallelization:output_len:output:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8, void *a9)
{
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, a2, a1);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, a4, a3);
  uint64_t v14 = (void *)_s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0( v12,  v13,  a8);
  if (v14)
  {
    id v15 = v14;
    memcpy(a9, objc_msgSend(v15, sel_bytes), (size_t)objc_msgSend(v15, sel_length));

    uint64_t v16 = 0LL;
    id v12 = v15;
  }

  else
  {
    uint64_t v16 = 4294899619LL;
  }

  return v16;
}

uint64_t sub_187629204(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proof(319LL, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1876292CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 & 0xF8;
  uint64_t v12 = v11 | 7;
  int v13 = (v10 | v6) & 0x100000;
  BOOL v14 = (v11 | 7 | v6) == 7 && v13 == 0;
  if (v14
    && (uint64_t v15 = v5 + v6,
        uint64_t v16 = (v5
             + v7
             + ((v5
               + v7
               + ((v5
                 + v7
                 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7,
        uint64_t v17 = v5 + 7,
        uint64_t v18 = v11 + 23,
        ((*(void *)(v9 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL)
      + ((v11 + 23 + ((v17 + v16) & 0xFFFFFFFFFFFFFFF8LL)) & ~v12)
      + 8 <= 0x18))
  {
    uint64_t v19 = ~v7;
    uint64_t v36 = ~v12;
    uint64_t v37 = *(void *)(v9 + 64) + 7LL;
    char v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    int64_t v21 = a1;
    uint64_t v38 = v8;
    v20(a1, a2, AssociatedTypeWitness);
    unint64_t v22 = ((unint64_t)a2 + v15) & v19;
    v20((uint64_t *)(((unint64_t)a1 + v15) & v19), (uint64_t *)v22, AssociatedTypeWitness);
    unint64_t v23 = (v15 + v22) & v19;
    v20((uint64_t *)((v15 + (((unint64_t)a1 + v15) & v19)) & v19), (uint64_t *)v23, AssociatedTypeWitness);
    unint64_t v24 = (v15 + v23) & v19;
    v20( (uint64_t *)((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19),  (uint64_t *)v24,  AssociatedTypeWitness);
    uint64_t v25 = (v15 + v24) & v19;
    v20( (uint64_t *)((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19),  (uint64_t *)v25,  AssociatedTypeWitness);
    uint64_t v26 = (v15 + v25) & v19;
    v20( (uint64_t *)((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19),  (uint64_t *)v26,  AssociatedTypeWitness);
    uint64_t v27 = (v15 + v26) & v19;
    v20( (uint64_t *)((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19),  (uint64_t *)v27,  AssociatedTypeWitness);
    uint64_t v28 = (v15 + v27) & v19;
    v20( (uint64_t *)((v15 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19),  (uint64_t *)v28,  AssociatedTypeWitness);
    uint64_t v29 = (v15 + v28) & v19;
    v20( (uint64_t *)((v15 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19),  (uint64_t *)v29,  AssociatedTypeWitness);
    uint64_t v30 = (void *)((v17
                    + ((v15
                      + ((v15
                        + ((v15
                          + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v31 = (uint64_t *)((v17 + v29) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_187623A28(*v31, v33);
    *uint64_t v30 = v32;
    v30[1] = v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)v30 + v18) & v36,  ((unint64_t)v31 + v18) & v36,  v38);
    *(void *)((v37 + (((unint64_t)v30 + v18) & v36)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v37
                                                                                                 + (((unint64_t)v31 + v18) & v36)) & 0xFFFFFFFFFFFFF8LL);
    sub_18769A52C();
  }

  else
  {
    uint64_t v34 = *a2;
    *a1 = *a2;
    int64_t v21 = (uint64_t *)(v34 + (((v12 | v7) + 16) & ~(v12 | v7)));
    swift_retain();
  }

  return v21;
}

uint64_t sub_18762961C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v5 + v6 + a1) & ~v6;
  v4(v7, AssociatedTypeWitness);
  uint64_t v8 = (v5 + v6 + v7) & ~v6;
  v4(v8, AssociatedTypeWitness);
  uint64_t v9 = (v5 + v6 + v8) & ~v6;
  v4(v9, AssociatedTypeWitness);
  uint64_t v10 = (v5 + v6 + v9) & ~v6;
  v4(v10, AssociatedTypeWitness);
  uint64_t v11 = (v5 + v6 + v10) & ~v6;
  v4(v11, AssociatedTypeWitness);
  uint64_t v12 = (v5 + v6 + v11) & ~v6;
  v4(v12, AssociatedTypeWitness);
  uint64_t v13 = (v5 + v6 + v12) & ~v6;
  v4(v13, AssociatedTypeWitness);
  uint64_t v14 = (v5 + v6 + v13) & ~v6;
  v4(v14, AssociatedTypeWitness);
  unint64_t v15 = (v5 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_187623C58(*(void *)v15, *(void *)(v15 + 8));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7LL;
  (*(void (**)(unint64_t, uint64_t))(v17 + 8))((v18 + v15 + 16) & ~v18, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_187629810(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  uint64_t v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  uint64_t v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  uint64_t v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  uint64_t v15 = (v7 + v8 + v14) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v15,  AssociatedTypeWitness);
  uint64_t v16 = (v7 + v8 + v15) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v16,  AssociatedTypeWitness);
  uint64_t v17 = (v7 + v8 + v16) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v17,  AssociatedTypeWitness);
  uint64_t v18 = (void *)((v7
                  + 7
                  + ((v9
                    + ((v9
                      + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (uint64_t *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_187623A28(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  uint64_t v25 = v24 + 23;
  unint64_t v26 = (unint64_t)v18 + v24 + 23;
  unint64_t v27 = ~v24 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v28 = v26 & v27;
  unint64_t v29 = ((unint64_t)v19 + v25) & v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 16))(v26 & v27, v29, v22);
  *(void *)((*(void *)(v23 + 64) + 7LL + v28) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v23 + 64) + 7LL + v29) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  return a1;
}

uint64_t sub_187629AA8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  uint64_t v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  uint64_t v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  uint64_t v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  uint64_t v15 = (v7 + v8 + v14) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v15,  AssociatedTypeWitness);
  uint64_t v16 = (v7 + v8 + v15) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v16,  AssociatedTypeWitness);
  uint64_t v17 = (v7 + v8 + v16) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v17,  AssociatedTypeWitness);
  uint64_t v18 = (uint64_t *)((v7
                   + 7
                   + ((v9
                     + ((v9
                       + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (uint64_t *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_187623A28(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_187623C58(v22, v23);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  uint64_t v27 = v26 + 23;
  unint64_t v28 = (unint64_t)v18 + v26 + 23;
  unint64_t v29 = ~v26 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v30 = v28 & v29;
  unint64_t v31 = ((unint64_t)v19 + v27) & v29;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 24))(v28 & v29, v31, v24);
  *(void *)((*(void *)(v25 + 64) + 7LL + v30) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v25 + 64)
                                                                                       + 7LL
                                                                                       + v31) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187629D54(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  uint64_t v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  uint64_t v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  uint64_t v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  uint64_t v15 = (v7 + v8 + v14) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v15,  AssociatedTypeWitness);
  uint64_t v16 = (v7 + v8 + v15) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v16,  AssociatedTypeWitness);
  uint64_t v17 = (v7 + v8 + v16) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v17,  AssociatedTypeWitness);
  uint64_t v18 = (_OWORD *)((v7
                  + 7
                  + ((v9
                    + ((v9
                      + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (_OWORD *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v18 = *v19;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  uint64_t v23 = v22 + 23;
  unint64_t v24 = (unint64_t)v18 + v22 + 23;
  unint64_t v25 = ~v22 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v26 = v24 & v25;
  unint64_t v27 = ((unint64_t)v19 + v23) & v25;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 32))(v24 & v25, v27, v20);
  *(void *)((*(void *)(v21 + 64) + 7LL + v26) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v21 + 64) + 7LL + v27) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_187629FDC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  uint64_t v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  uint64_t v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  uint64_t v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  uint64_t v15 = (v7 + v8 + v14) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v15,  AssociatedTypeWitness);
  uint64_t v16 = (v7 + v8 + v15) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v16,  AssociatedTypeWitness);
  uint64_t v17 = (v7 + v8 + v16) & ~v8;
  v6( (v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8,  v17,  AssociatedTypeWitness);
  uint64_t v18 = (uint64_t *)((v7
                   + 7
                   + ((v9
                     + ((v9
                       + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (_OWORD *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = *v18;
  unint64_t v21 = v18[1];
  *(_OWORD *)uint64_t v18 = *v19;
  sub_187623C58(v20, v21);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  uint64_t v25 = v24 + 23;
  unint64_t v26 = (unint64_t)v18 + v24 + 23;
  unint64_t v27 = ~v24 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v28 = v26 & v27;
  unint64_t v29 = ((unint64_t)v19 + v25) & v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 40))(v26 & v27, v29, v22);
  *(void *)((*(void *)(v23 + 64) + 7LL + v28) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v23 + 64)
                                                                                       + 7LL
                                                                                       + v29) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18762A274(unint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v11 = v6;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = v7;
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = v13 + v14;
  uint64_t v16 = v13 + 7;
  uint64_t v17 = *(_DWORD *)(v8 + 80) & 0xF8;
  unint64_t v18 = ~v17 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = v17 + 23;
  uint64_t v20 = *(void *)(v8 + 64) + 7LL;
  if (v11 < a2)
  {
    if ((((v20 & 0xFFFFFFFFFFFFFFF8LL)
         + ((v19
           + ((v16
             + ((v15
               + ((v15
                 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (v15 & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & 0xFFFFFFFFFFFFFFF8LL)) & v18)
         + 8) & 0xFFFFFFF8) != 0)
      unsigned int v21 = 2;
    else {
      unsigned int v21 = a2 - v11 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0LL;
    }
    __asm { BR              X5 }
  }

  if (v6 >= v10)
  {
    unint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    unint64_t v25 = a1;
    uint64_t v9 = v6;
    uint64_t v12 = AssociatedTypeWitness;
    return v26(v25, v9, v12);
  }

  unint64_t v25 = (v19
       + ((v16
         + ((v15
           + ((v15
             + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + a1) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & 0xFFFFFFFFFFFFFFF8LL)) & v18;
  if (v9 >= 0x7FFFFFFF)
  {
    unint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    return v26(v25, v9, v12);
  }

  unint64_t v27 = *(void *)((v20 + v25) & 0xFFFFFFFFFFFFF8LL);
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  return (v27 + 1);
}

void sub_18762A560(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (v7 <= v9) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = v7;
  }
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  size_t v13 = (((*(_DWORD *)(v8 + 80) & 0xF8LL)
        + 23
        + ((v11
          + 7
          + ((v11
            + v12
            + ((v11
              + v12
              + ((v11
                + v12
                + ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8LL)) & ~(*(_DWORD *)(v8 + 80) & 0xF8LL) & 0xFFFFFFFFFFFFFFF8LL)
      + ((*(void *)(v8 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL)
      + 8;
  if (v10 >= a3)
  {
    int v16 = 0u;
    if (a2 <= v10) {
      goto LABEL_20;
    }
  }

  else
  {
    if ((_DWORD)v13) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a3 - v10 + 1;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (a2 <= v10) {
LABEL_20:
    }
      __asm { BR              X0 }
  }

  if ((_DWORD)v13)
  {
    unsigned int v17 = ~v10 + a2;
    bzero(a1, v13);
    *a1 = v17;
  }

  __asm { BR              X10 }

void sub_18762A788()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18762A898LL);
}

void sub_18762A790()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x18762A798LL);
  }
  JUMPOUT(0x18762A898LL);
}

void sub_18762A844()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18762A898LL);
}

void sub_18762A84C()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18762A898LL);
}

uint64_t sub_18762A854(uint64_t a1, size_t a2)
{
  *(_WORD *)(v12 + v15) = 0;
  if (!(_DWORD)v11) {
    goto LABEL_7;
  }
  if (v14 < v5)
  {
    uint64_t v2 = (_DWORD *)((v9
                   + ((v7
                     + ((v6
                       + ((v6
                         + ((v6 + ((v6 + ((v6 + ((v6 + ((v6 + ((v6 + v12) & v10)) & v10)) & v10)) & v10)) & v10)) & v10)) & v10)) & v10)) & 0xFFFFFFFFFFFFFFF8LL)) & v8);
    if ((_DWORD)a2)
    {
      int v3 = ~v5 + v11;
      bzero(v2, a2);
      *uint64_t v2 = v3;
    }

uint64_t _s17EncryptedIssuanceVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s17EncryptedIssuanceVMn);
}

void *sub_18762A8C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_18762A8D8(a1, a2);
}

void *sub_18762A8D8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_18762A8EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_187699E90();
  if (!result || (uint64_t result = sub_187699EB4(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_187699EA8();
      sub_18769A3C4();
      sub_18762AC84();
      return sub_18769A1B4();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_18762A998(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_18769A3C4();
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = sub_18769A1E4();
  MEMORY[0x1895F8858](v4);
  sub_18762AC84();
  sub_18769A1CC();
  __asm { BR              X10 }

uint64_t sub_18762AA80()
{
  *(void *)(v7 - 112) = v5;
  *(_WORD *)(v7 - 104) = v4;
  *(_BYTE *)(v7 - 102) = BYTE2(v4);
  *(_BYTE *)(v7 - 101) = BYTE3(v4);
  *(_BYTE *)(v7 - 100) = BYTE4(v4);
  *(_BYTE *)(v7 - 99) = BYTE5(v4);
  sub_18769A1B4();
  sub_187623C58(v5, v4);
  sub_18769A1C0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v0);
  sub_18769A1D8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 120) + 8LL))(v3, v1);
  return *(void *)(v7 - 112);
}

unint64_t sub_18762AC84()
{
  unint64_t result = qword_18C6D9A88;
  if (!qword_18C6D9A88)
  {
    uint64_t v1 = sub_18769A3C4();
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189605DE8], v1);
    atomic_store(result, (unint64_t *)&qword_18C6D9A88);
  }

  return result;
}

char *sub_18762ACCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v41 = sub_18769A1E4();
  uint64_t v32 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_18769A3C4();
  uint64_t v31 = *(void *)(v40 - 8);
  MEMORY[0x1895F8858](v40);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18762A998(a1, a2);
  if (a4 < 0) {
    goto LABEL_30;
  }
  if (a4)
  {
    if ((a3 & 0x8000000000000000LL) != 0)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }

    if (!a3) {
      goto LABEL_32;
    }
    uint64_t v13 = 0LL;
    uint64_t v38 = &v43;
    unint64_t v39 = bswap64(v12);
    uint64_t v14 = (char *)MEMORY[0x18961AFE8];
    __int128 v34 = xmmword_18769C700;
    uint64_t v30 = a4;
    unint64_t v37 = a3;
    uint64_t v15 = v40;
    while (1)
    {
      if (v13 == a4) {
        goto LABEL_29;
      }
      uint64_t v33 = v13;
      sub_18769A3B8();
      unint64_t v42 = v39;
      sub_18769A394();
      sub_18769A52C();
      unint64_t v16 = sub_18762AC84();
      uint64_t v17 = v40;
      unint64_t v36 = v16;
      sub_18769A1B4();
      swift_bridgeObjectRelease();
      sub_18769A3A0();
      sub_18769A1D8();
      unint64_t v18 = v42 % a3;
      uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v9, v41);
      uint64_t v19 = *(void (**)(char *, uint64_t))(v31 + 8);
      v19(v11, v17);
      uint64_t v20 = *((void *)v14 + 2);
      if (v20)
      {
        unsigned int v21 = 0;
        while (1)
        {
          if (*((void *)v14 + 4) != v18)
          {
            if (v20 == 1) {
              goto LABEL_20;
            }
            if (*((void *)v14 + 5) != v18) {
              break;
            }
          }

LABEL_12:
          if (v21 < 0xA)
          {
            ++v21;
            sub_18769A3B8();
            unint64_t v42 = v39;
            sub_18769A394();
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
            uint64_t v22 = swift_allocObject();
            *(_OWORD *)(v22 + 16) = v34;
            *(_BYTE *)(v22 + 32) = v21;
            sub_18769A52C();
            sub_18769A1B4();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_18769A3A0();
            sub_18769A1D8();
            unint64_t v18 = v42 % v37;
            v35(v9, v41);
            v19(v11, v15);
            uint64_t v20 = *((void *)v14 + 2);
            if (v20) {
              continue;
            }
          }

          goto LABEL_20;
        }

        if (v20 != 2) {
          break;
        }
      }

      uint64_t v33 = *((void *)&v45[0] + 1);
      __int128 v34 = v14 & 0xC000000000000001LL;
      unint64_t v16 = 4LL;
      uint64_t v31 = v7;
      uint64_t v32 = v14;
      uint64_t v30 = v12;
      while (1)
      {
        uint64_t v17 = v16 - 4;
        if (v34)
        {
          uint64_t v14 = MEMORY[0x1895AA3E4](v16 - 4, v14);
          unint64_t v18 = v16 - 3;
          if (__OFADD__(v17, 1LL)) {
            goto LABEL_25;
          }
        }

        else
        {
          uint64_t v14 = *(void *)(v14 + 8 * v16);
          swift_retain();
          unint64_t v18 = v16 - 3;
          if (__OFADD__(v17, 1LL))
          {
LABEL_25:
            __break(1u);
LABEL_26:
            sub_18769A52C();
            uint64_t v15 = sub_18769A688();
            if (!v15) {
              goto LABEL_27;
            }
            goto LABEL_12;
          }
        }

        uint64_t v49 = v18;
        v38[0] = v36;
        v38[1] = v7;
        unint64_t v37 = v6;
        swift_retain();
        sub_18769A52C();
        swift_retain();
        sub_18768CA98(v14, v38, &v37, v12, v33, v35 != 0, (uint64_t)&v40);
        uint64_t v19 = v15;
        uint64_t v20 = v6;
        swift_release();
        unsigned int v21 = v40;
        uint64_t v22 = v41;
        uint64_t v23 = v43;
        unint64_t v39 = v9;
        unint64_t v25 = *(void *)(v9 + 16);
        uint64_t v24 = *(void *)(v9 + 24);
        if (v25 >= v24 >> 1)
        {
          unint64_t v29 = v40;
          sub_18762C3CC((char *)(v24 > 1), v25 + 1, 1);
          unsigned int v21 = v29;
          uint64_t v9 = v39;
        }

        *(void *)(v9 + 16) = v25 + 1;
        unint64_t v26 = v9 + 32 * v25;
        *(_OWORD *)(v26 + 32) = v21;
        *(_BYTE *)(v26 + 48) = v22;
        *(void *)(v26 + 56) = v23;
        ++v16;
        uint64_t v15 = v19;
        uint64_t v6 = v20;
        unint64_t v12 = v30;
        uint64_t v7 = v31;
        uint64_t v14 = v32;
        if (v49 == v19) {
          goto LABEL_27;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  return v9;
}

  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[8 * v14 + 32], (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    *unint64_t v4 = v7;
    return;
  }

  uint64_t v15 = *((void *)v7 + 2);
  unint64_t v16 = __OFADD__(v15, v6);
  uint64_t v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (!*(void *)(a1 + 16) || !*((void *)v19 + 2)) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void **)(a1 + 32);
  sub_18769A52C();
  sub_18769A52C();
  unint64_t v12 = *((void *)v19 + 4);
  sub_18769A52C();
  swift_retain();
  swift_retain();
  PIR.IndexPirClient.decrypt(reply:index:)(v11, v12);
  if (!v20)
  {
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

  swift_bridgeObjectRelease();
  unint64_t v16 = *v9;
  uint64_t v17 = qword_18C6D9760;
  sub_18769A52C();
  if (v17 != -1) {
    swift_once();
  }
  unint64_t result = sub_18766B114(v15, 1uLL, 0, qword_18C6DEDE8, v16);
  if (v8) {
    *uint64_t v6 = v8;
  }
  else {
    *uint64_t v20 = result;
  }
  return result;
}

    *(void *)&uint64_t v40 = result;
    *((void *)&v40 + 1) = v19;
    if (!*(void *)(v13 + 24)) {
      goto LABEL_35;
    }
    if (!*(void *)(a6 + 24)) {
      goto LABEL_36;
    }
    swift_retain();
    sub_1876875D4((uint64_t)&v40);
    unsigned int v21 = v20;
    swift_release();
    if (v21)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v31 = v21;
      *(_BYTE *)(v31 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_30:
      sub_187623C58(v40, *((unint64_t *)&v40 + 1));
      swift_release();
      swift_release();
      swift_release();
      return v7;
    }

    uint64_t v22 = v40;
    unint64_t result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      uint64_t v23 = result;
      if (result <= 14)
      {
        if (result < 0) {
          goto LABEL_33;
        }
        unint64_t result = 0LL;
        unint64_t v25 = (unint64_t)v23 << 48;
      }

      else
      {
        sub_187699ECC();
        swift_allocObject();
        uint64_t v24 = sub_187699E9C();
        if (v23 >= 0x7FFFFFFF)
        {
          sub_187699F38();
          unint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0LL;
          *(void *)(result + 24) = v23;
          unint64_t v25 = v24 | 0x8000000000000000LL;
        }

        else
        {
          unint64_t result = v23 << 32;
          unint64_t v25 = v24 | 0x4000000000000000LL;
        }
      }
    }

    else
    {
      unint64_t v25 = 0xC000000000000000LL;
    }

    *(void *)&uint64_t v40 = result;
    *((void *)&v40 + 1) = v25;
    sub_187687A20((uint64_t)&v40);
    if (v26)
    {
      uint64_t v32 = v26;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v33 = v32;
      *(_BYTE *)(v33 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_187623C58(v22, *((unint64_t *)&v22 + 1));
      goto LABEL_30;
    }

    swift_release();
    swift_release();
    swift_release();
    uint64_t v27 = v40;
    uint64_t v41 = v7;
    unint64_t v29 = *(void *)(v7 + 16);
    unint64_t v28 = *(void *)(v7 + 24);
    if (v29 >= v28 >> 1)
    {
      unint64_t v39 = v40;
      sub_18762C3B0((char *)(v28 > 1), v29 + 1, 1);
      uint64_t v27 = v39;
      uint64_t v7 = v41;
    }

    *(void *)(v7 + 16) = v29 + 1;
    uint64_t v30 = v7 + 32 * v29;
    *(_OWORD *)(v30 + 32) = v27;
    *(_OWORD *)(v30 + 48) = v22;
    ++v11;
    if (!--v6) {
      return v7;
    }
  }

  if ((v38 & 0x8000000000000000LL) == 0)
  {
    unint64_t result = 0LL;
    uint64_t v19 = v35;
    goto LABEL_12;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = sub_18765B244(0LL, v20 + 1, 1, v14);
      }
      a4 = v30;
      unint64_t v26 = *((void *)v14 + 2);
      unint64_t v25 = *((void *)v14 + 3);
      uint64_t v27 = v33;
      if (v26 >= v25 >> 1)
      {
        unint64_t v28 = sub_18765B244((char *)(v25 > 1), v26 + 1, 1, v14);
        uint64_t v27 = v33;
        uint64_t v14 = v28;
      }

      uint64_t v13 = v27 + 1;
      *((void *)v14 + 2) = v26 + 1;
      *(void *)&v14[8 * v26 + 32] = v18;
      a3 = v37;
      if (v13 == a4) {
        return v14;
      }
    }

    uint64_t v23 = 6LL;
    while (1)
    {
      uint64_t v24 = v23 - 3;
      if (__OFADD__(v23 - 4, 1LL)) {
        break;
      }
      if (*(void *)&v14[8 * v23] == v18) {
        goto LABEL_12;
      }
      ++v23;
      if (v24 == v20) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  return (char *)MEMORY[0x18961AFE8];
}

  __break(1u);
}

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t static Padme.paddedMessageByteCount(_:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = __clz(result);
    unint64_t v2 = __clz(v1 ^ 0x3F);
    unint64_t v3 = ~v1;
    BOOL v5 = __OFADD__(v2, v3);
    uint64_t v6 = v2 + v3;
    BOOL v4 = v6 < 0;
    uint64_t v7 = 1LL << v6;
    if (v4 != v5) {
      uint64_t v7 = 0LL;
    }
    BOOL v8 = v7 != 0;
    uint64_t v9 = v7 - 1;
    if (v8)
    {
      if (__CFADD__(result, v9)) {
        return 0LL;
      }
      else {
        return (result + v9) & ~v9;
      }
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Padme()
{
  return &type metadata for Padme;
}

uint64_t PEC.SimilarityClient.similarityConfig.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 17);
  uint64_t v3 = *(void *)(v1 + 24);
  char v4 = *(_BYTE *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 1) = v2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  sub_18769A52C();
  return sub_18769A52C();
}

uint64_t PEC.SimilarityClient.init(config:secretKey:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  char v5 = a1[1];
  unint64_t v6 = *((void *)a1 + 1);
  char v7 = a1[16];
  uint64_t v9 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  uint64_t v11 = *a2;
  unint64_t v25 = a2[1];
  LOBYTE(v19) = v4;
  BYTE1(v19) = v5;
  unint64_t v20 = v6;
  char v21 = v7;
  uint64_t v22 = v9;
  uint64_t v23 = v8;
  uint64_t v24 = v10;
  uint64_t result = sub_18762E578();
  if (v3)
  {
    sub_187623C58(v11, v25);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v13 = result;
  uint64_t v17 = v9;
  uint64_t v19 = v11;
  unint64_t v20 = v25;
  if ((result & 0xC000000000000001LL) != 0)
  {
    sub_18769A52C();
    uint64_t v14 = MEMORY[0x1895AA3E4](0LL, v13);
    goto LABEL_6;
  }

  if (*(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v14 = *(void *)(result + 32);
    sub_18769A52C();
    swift_retain();
LABEL_6:
    sub_18767B524((uint64_t)&v19, v14);
    uint64_t v16 = v15;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v16;
    *(_BYTE *)(a3 + 16) = v4;
    *(_BYTE *)(a3 + 17) = v5;
    *(void *)(a3 + 24) = v6;
    *(_BYTE *)(a3 + 32) = v7;
    *(void *)(a3 + 40) = v17;
    *(void *)(a3 + 48) = v8;
    *(void *)(a3 + 56) = v10;
    return result;
  }

  __break(1u);
  return result;
}

void PEC.SimilarityClient.generateGaloisKey()(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[6];
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v6 = MEMORY[0x1895AA3E4](0LL);
    goto LABEL_4;
  }

  if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
LABEL_4:
    sub_18769A52C();
    swift_retain();
    sub_18768BC4C(v6, v5, v4, a1);
    return;
  }

  __break(1u);
}

int64_t PEC.SimilarityClient.query(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = PEC.SimilarityClient.queryCrt(values:)(a1);
  if (!v2)
  {
    int64_t v5 = result;
    if (*(void *)(result + 16))
    {
      char v6 = *(_BYTE *)(result + 48);
      uint64_t v7 = *(void *)(result + 56);
      *(_OWORD *)a2 = *(_OWORD *)(v5 + 32);
      *(_BYTE *)(a2 + 16) = v6;
      *(void *)(a2 + 24) = v7;
      sub_18769A52C();
      return swift_bridgeObjectRelease();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

int64_t PEC.SimilarityClient.queryCrt(values:)(uint64_t a1)
{
  __int128 v4 = v1[2];
  __int128 v46 = v1[3];
  __int128 v5 = v1[1];
  v45[0] = *v1;
  v45[1] = v5;
  v45[2] = v4;
  __int128 v48 = v5;
  uint64_t v6 = v4;
  v47[0] = (unint64_t)v4 >> 8;
  *(_DWORD *)((char *)v47 + 3) = DWORD1(v4);
  uint64_t v7 = *((void *)&v4 + 1);
  __int128 v8 = v46;
  int64_t v9 = *(void *)(a1 + 16);
  if (*((void *)&v4 + 1) != -1LL)
  {
    if (!*((void *)&v4 + 1))
    {
      if (v9)
      {
LABEL_6:
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v10 = 1;
        *(_BYTE *)(v10 + 4) = 1;
        swift_willThrow();
        return v9;
      }

      __break(1u);
    }

    if (v9 % *((void *)&v4 + 1)) {
      goto LABEL_6;
    }
  }

  sub_18769A52C();
  uint64_t v11 = sub_18762D220(0LL, v9, v7, a1, v7);
  swift_bridgeObjectRelease();
  sub_18762D800((uint64_t)v45);
  uint64_t v12 = sub_18762D668(v11, (uint64_t)v45);
  sub_18762D850((uint64_t)v45);
  swift_bridgeObjectRelease();
  if (v7 < 1 || (uint64_t v36 = v9 / v7, v9 / v7 < 1))
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v27 = 1;
    *(_BYTE *)(v27 + 4) = 1;
    swift_willThrow();
  }

  else
  {
    __int128 v40 = v48;
    char v41 = v6;
    *(_DWORD *)unint64_t v42 = v47[0];
    *(_DWORD *)&v42[3] = *(_DWORD *)((char *)v47 + 3);
    uint64_t v43 = v7;
    __int128 v44 = v8;
    int64_t v9 = (int64_t)&v40;
    uint64_t v13 = sub_18762E578();
    if (!v2)
    {
      unint64_t v14 = v13;
      uint64_t v35 = *(void *)(*((void *)&v8 + 1) + 16LL);
      int64_t v39 = MEMORY[0x18961AFE8];
      sub_18762C3CC(0LL, 0LL, 0);
      int64_t v9 = v39;
      if (v14 >> 62) {
        goto LABEL_26;
      }
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_18769A52C();
      if (!v15)
      {
LABEL_27:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v9;
      }

uint64_t sub_18762B81C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(void *)(*a1 + 16);
  uint64_t v6 = MEMORY[0x18961AFE8];
  if (v5)
  {
    uint64_t v30 = MEMORY[0x18961AFE8];
    sub_18762C438(0LL, v5, 0);
    uint64_t v6 = v30;
    uint64_t v7 = (float *)(v4 + 32);
    unint64_t v8 = *(void *)(v30 + 16);
    int64_t v9 = v5;
    do
    {
      float v10 = *v7;
      uint64_t v31 = v6;
      unint64_t v11 = *(void *)(v6 + 24);
      unint64_t v12 = v8 + 1;
      if (v8 >= v11 >> 1)
      {
        sub_18762C438((char *)(v11 > 1), v8 + 1, 1);
        uint64_t v6 = v31;
      }

      *(void *)(v6 + 16) = v12;
      *(float *)(v6 + 4 * v8 + 32) = v10 * v10;
      ++v7;
      ++v8;
      --v9;
    }

    while (v9);
  }

  else
  {
    unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (!v12)
    {
      uint64_t v21 = MEMORY[0x18961AFE8];
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }

  if (v12 < 2)
  {
    unint64_t v13 = 0LL;
    float v14 = 0.0;
LABEL_13:
    unint64_t v17 = v12 - v13;
    uint64_t v18 = (float *)(v6 + 4 * v13 + 32);
    do
    {
      float v19 = *v18++;
      float v14 = v14 + v19;
      --v17;
    }

    while (v17);
    goto LABEL_15;
  }

  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v15 = (float *)(v6 + 36);
  float v14 = 0.0;
  unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    float v14 = (float)(v14 + *(v15 - 1)) + *v15;
    v15 += 2;
    v16 -= 2LL;
  }

  while (v16);
  if (v12 != v13) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = MEMORY[0x18961AFE8];
  if (!v5)
  {
LABEL_28:
    *a3 = v21;
    return result;
  }

  float v22 = (float)*(uint64_t *)(a2 + 24);
  uint64_t v32 = MEMORY[0x18961AFE8];
  float v23 = sqrtf(v14);
  uint64_t result = (uint64_t)sub_18762C414(0LL, v5, 0);
  uint64_t v21 = v32;
  unint64_t v24 = (float *)(v4 + 32);
  while (1)
  {
    if ((LODWORD(v23) & 0x7FFFFFFF) == 0)
    {
      uint64_t v26 = 0LL;
      goto LABEL_23;
    }

    float v25 = roundf((float)(*v24 * v22) / v23);
    if ((~LODWORD(v25) & 0x7F800000) == 0) {
      break;
    }
    if (v25 <= -9.2234e18) {
      goto LABEL_30;
    }
    if (v25 >= 9.2234e18) {
      goto LABEL_31;
    }
    uint64_t v26 = (uint64_t)v25;
LABEL_23:
    unint64_t v28 = *(void *)(v32 + 16);
    unint64_t v27 = *(void *)(v32 + 24);
    if (v28 >= v27 >> 1) {
      uint64_t result = (uint64_t)sub_18762C414((char *)(v27 > 1), v28 + 1, 1);
    }
    *(void *)(v32 + 16) = v28 + 1;
    *(void *)(v32 + 8 * v28 + 32) = v26;
    ++v24;
    if (!--v5) {
      goto LABEL_28;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_18762BA7C(uint64_t a1, unint64_t a2, uint64_t (*a3)(__int128 *, uint64_t))
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v39 = *(void *)(a1 + 16);
  unint64_t v34 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_61;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v6 >= v39) {
      uint64_t v7 = v39;
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v44 = MEMORY[0x18961AFE8];
    sub_18762C454(0LL, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
LABEL_63:
      uint64_t result = swift_bridgeObjectRelease();
LABEL_64:
      __break(1u);
      return result;
    }

    uint64_t v8 = v44;
    unint64_t v28 = v4;
    uint64_t v26 = v5;
    if (v7)
    {
      uint64_t v35 = v4 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v29 = v4 + 32;
      unint64_t v31 = v4 & 0xC000000000000001LL;
      sub_18769A52C();
      uint64_t result = sub_18769A52C();
      uint64_t v10 = 0LL;
      unint64_t v11 = (uint64_t *)(v5 + 56);
      while (v7 != v10)
      {
        if (v39 == v10) {
          goto LABEL_64;
        }
        if (v10 >= v39) {
          goto LABEL_53;
        }
        __int128 v37 = *(_OWORD *)(v11 - 3);
        unint64_t v4 = *((unsigned __int8 *)v11 - 8);
        uint64_t v12 = *v11;
        if (v34)
        {
          sub_18769A52C();
          sub_18769A52C();
          uint64_t v5 = sub_18769A688();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v5 = *(void *)(v35 + 16);
          sub_18769A52C();
        }

        if (v10 == v5) {
          goto LABEL_63;
        }
        if (v31)
        {
          uint64_t result = MEMORY[0x1895AA3E4](v10, v28);
          uint64_t v5 = result;
        }

        else
        {
          if (v10 < 0) {
            goto LABEL_54;
          }
          uint64_t v5 = *(void *)(v29 + 8 * v10);
          uint64_t result = swift_retain();
        }

        uint64_t v32 = v10 + 1;
        if (__OFADD__(v10, 1LL)) {
          goto LABEL_56;
        }
        __int128 v40 = v37;
        char v41 = v4;
        uint64_t v42 = v12;
        uint64_t v43 = v5;
        if (!v12) {
          goto LABEL_64;
        }
        uint64_t v13 = a3(&v40, v5);
        if (v3)
        {
LABEL_50:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_51;
        }

        uint64_t v14 = v13;
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v44 = v8;
        unint64_t v4 = *(void *)(v8 + 16);
        unint64_t v15 = *(void *)(v8 + 24);
        uint64_t v5 = v4 + 1;
        if (v4 >= v15 >> 1)
        {
          uint64_t result = (uint64_t)sub_18762C454((void *)(v15 > 1), v4 + 1, 1);
          uint64_t v8 = v44;
        }

        ++v10;
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 8 * v4 + 32) = v14;
        v11 += 4;
        if (v7 == v10)
        {
          unint64_t v4 = v28;
          goto LABEL_30;
        }
      }

      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

    sub_18769A52C();
    sub_18769A52C();
    uint64_t v32 = 0LL;
    uint64_t v10 = 0LL;
LABEL_30:
    uint64_t v36 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v39 == v10) {
      break;
    }
    uint64_t v16 = 0LL;
    unint64_t v30 = v4 & 0xC000000000000001LL;
    uint64_t v17 = v4 + 8 * v32 + 32;
    unint64_t v4 = v26 + 32 * v10 + 56;
    uint64_t v27 = v17;
    while (v10 + v16 < v39)
    {
      __int128 v38 = *(_OWORD *)(v4 - 24);
      char v18 = *(_BYTE *)(v4 - 8);
      uint64_t v5 = *(void *)v4;
      if (v34)
      {
        sub_18769A52C();
        sub_18769A52C();
        uint64_t v19 = sub_18769A688();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v19 = *(void *)(v36 + 16);
        sub_18769A52C();
      }

      unint64_t v20 = v32 + v16;
      if (v32 + v16 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }

      if (v30)
      {
        uint64_t v21 = MEMORY[0x1895AA3E4]();
      }

      else
      {
        if ((v20 & 0x8000000000000000LL) != 0) {
          goto LABEL_58;
        }
        if (v20 >= *(void *)(v36 + 16)) {
          goto LABEL_59;
        }
        uint64_t v21 = *(void *)(v27 + 8 * v16);
        swift_retain();
      }

      if (!(v32 - 0x7FFFFFFFFFFFFFFFLL + v16)) {
        goto LABEL_60;
      }
      __int128 v40 = v38;
      char v41 = v18;
      uint64_t v42 = v5;
      uint64_t v43 = v21;
      uint64_t v22 = a3(&v40, v21);
      if (v3) {
        goto LABEL_50;
      }
      uint64_t v23 = v22;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v44 = v8;
      unint64_t v25 = *(void *)(v8 + 16);
      unint64_t v24 = *(void *)(v8 + 24);
      uint64_t v5 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        sub_18762C454((void *)(v24 > 1), v25 + 1, 1);
        uint64_t v8 = v44;
      }

      *(void *)(v8 + 16) = v5;
      *(void *)(v8 + 8 * v25 + 32) = v23;
      ++v16;
      v4 += 32LL;
      if (v39 - v10 == v16) {
        goto LABEL_31;
      }
    }

LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    sub_18769A52C();
    uint64_t v6 = sub_18769A688();
    swift_bridgeObjectRelease();
  }

                            __break(1u);
                            goto LABEL_58;
                          }

LABEL_31:
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t PEC.SimilarityClient.decrypt(reply:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  char v3 = *((_BYTE *)a1 + 16);
  uint64_t v4 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9A98);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18769C700;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v2;
  *(_BYTE *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  sub_18769A52C();
  uint64_t v6 = PEC.SimilarityClient.decryptCrt(reply:)();
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

uint64_t PEC.SimilarityClient.decryptCrt(reply:)()
{
  __int128 v14 = *(_OWORD *)(v0 + 16);
  unint64_t v2 = *(void *)v0;
  sub_18769A52C();
  uint64_t v3 = sub_18769A52C();
  uint64_t v4 = sub_18762BA7C(v3, v2, (uint64_t (*)(__int128 *, uint64_t))sub_18762D89C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    return v2;
  }
  uint64_t v5 = PEC.SimilarityClientConfig.plaintextModuli()();
  uint64_t v7 = sub_187649BE8(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((unsigned __int128)(*((uint64_t *)&v14 + 1) * (__int128)*((uint64_t *)&v14 + 1)) >> 64 == (uint64_t)(*((void *)&v14 + 1) * *((void *)&v14 + 1)) >> 63)
  {
    int64_t v8 = *((void *)v7 + 2);
    if (v8)
    {
      unint64_t v13 = MEMORY[0x18961AFE8];
      sub_18762C438(0LL, v8, 0);
      uint64_t v9 = 0LL;
      unint64_t v2 = v13;
      unint64_t v10 = *(void *)(v13 + 16);
      do
      {
        uint64_t v11 = *(void *)&v7[8 * v9 + 32];
        unint64_t v12 = *(void *)(v13 + 24);
        if (v10 >= v12 >> 1) {
          sub_18762C438((char *)(v12 > 1), v10 + 1, 1);
        }
        ++v9;
        *(void *)(v13 + 16) = v10 + 1;
        *(float *)(v13 + 4 * v10++ + 32) = (float)v11 / (float)(uint64_t)(*((void *)&v14 + 1) * *((void *)&v14 + 1));
      }

      while (v8 != v9);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x18961AFE8];
    }

    return v2;
  }

  __break(1u);
  return result;
}

uint64_t sub_18762C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(_BYTE *)(a1 + 16);
  uint64_t v8 = *(void *)(a3 + 8);
  swift_retain();
  swift_retain();
  uint64_t v9 = sub_18769A52C();
  uint64_t v10 = sub_18762D8B4(v9, a2, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    unsigned __int8 v18 = v7;
    sub_1876326E0(&v14, &v18, v10, (uint64_t)&v19);
    if (v21)
    {
      if (v21 != 1)
      {
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v13 = 5;
        *(_BYTE *)(v13 + 4) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return v10;
      }

      uint64_t v14 = v19;
      uint64_t v15 = v20;
      char v16 = 1;
      uint64_t v17 = v22;
      sub_1876330F4();
    }

    else
    {
      uint64_t v14 = v19;
      uint64_t v15 = v20;
      char v16 = 0;
      uint64_t v17 = v22;
      sub_187632B7C();
    }

    uint64_t v10 = v12;
    swift_bridgeObjectRelease();
  }

  return v10;
}

char *sub_18762C3B0(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762C5C0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C3CC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762C6C0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_18762C3E8(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CEA4(a1, a2, a3, *v3, &qword_18C6D9B18, qword_18C6D9B20);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C414(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CBB8(a1, a2, a3, *v3, &qword_18C6D9B10);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C438(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762C7C0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_18762C454(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CEA4(a1, a2, a3, *v3, &qword_18C6D9B00, &qword_18C6D9B08);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C480(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762C8B8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C49C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762C9B8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C4B8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CAA0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_18762C4D4(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CEA4(a1, a2, a3, *v3, &qword_18C6D9AE0, qword_18C4C7100);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C500(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CBB8(a1, a2, a3, *v3, &qword_18C6D9AD8);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C524(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CCAC(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C540(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CDA4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_18762C55C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CEA4(a1, a2, a3, *v3, &qword_18C6D9AC0, &qword_18C6D9AC8);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C588(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762CFC8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C5A4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_18762D0C0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_18762C5C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AD0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

char *sub_18762C6C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9A98);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

char *sub_18762C7C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AF8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 4 * v8);
  }

  swift_release();
  return v10;
}

char *sub_18762C8B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C6D9A00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

char *sub_18762C9B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AF0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v8);
  }

  swift_release();
  return v10;
}

char *sub_18762CAA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AE8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

char *sub_18762CBB8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    size_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v9);
  }

  swift_release();
  return v11;
}

char *sub_18762CCAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AB0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 4 * v8);
  }

  swift_release();
  return v10;
}

char *sub_18762CDA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AB8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

void *sub_18762CEA4(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }

  else
  {
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v13;
}

char *sub_18762CFC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AA8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    int64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_release();
  return v10;
}

char *sub_18762D0C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AA0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }

  else
  {
    int64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

unint64_t sub_18762D1DC()
{
  unint64_t result = qword_18C6D9A90;
  if (!qword_18C6D9A90)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_18C6D9A90);
  }

  return result;
}

uint64_t sub_18762D220(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int64_t v7 = a1;
  int64_t v8 = 0LL;
  int64_t v9 = a1;
  while (1)
  {
    BOOL v10 = v9 <= a2;
    if (a3 > 0) {
      BOOL v10 = v9 >= a2;
    }
    if (v10) {
      break;
    }
    BOOL v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11) {
      int64_t v9 = (v9 >> 63) ^ 0x8000000000000000LL;
    }
    BOOL v11 = __OFADD__(v8++, 1LL);
    if (v11)
    {
      __break(1u);
      break;
    }
  }

  uint64_t v44 = MEMORY[0x18961AFE8];
  sub_18762C3E8(0LL, v8, 0);
  uint64_t result = v44;
  if (v8)
  {
    uint64_t v40 = *(void *)(a4 + 16);
    int64_t v13 = a2;
    while (1)
    {
      BOOL v14 = v7 <= v13;
      if (v6 > 0) {
        BOOL v14 = v7 >= v13;
      }
      if (v14) {
        break;
      }
      if (__OFADD__(v7, v6)) {
        int64_t v15 = ((v7 + v6) >> 63) ^ 0x8000000000000000LL;
      }
      else {
        int64_t v15 = v7 + v6;
      }
      if (__OFADD__(v7, a5)) {
        goto LABEL_70;
      }
      if (v40 >= v7 + a5) {
        uint64_t v16 = v7 + a5;
      }
      else {
        uint64_t v16 = v40;
      }
      uint64_t v17 = v16 - v7;
      if (v16 < v7) {
        goto LABEL_71;
      }
      if (v7 < 0) {
        goto LABEL_72;
      }
      uint64_t v43 = result;
      uint64_t v18 = v6;
      sub_18769A6E8();
      sub_18769A52C();
      swift_unknownObjectRetain_n();
      uint64_t v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x18961AFE8];
      }

      uint64_t v20 = *(void *)(v19 + 16);
      swift_release();
      if (v20 == v17)
      {
        char v21 = (void *)swift_dynamicCastClass();
        uint64_t v6 = v18;
        int64_t v13 = a2;
        if (!v21)
        {
          swift_bridgeObjectRelease();
          char v21 = (void *)MEMORY[0x18961AFE8];
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        char v21 = (void *)MEMORY[0x18961AFE8];
        uint64_t v6 = v18;
        int64_t v13 = a2;
        if (v16 != v7)
        {
          if (v17 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AF8);
            char v21 = (void *)swift_allocObject();
            int64_t v24 = _swift_stdlib_malloc_size(v21);
            uint64_t v25 = v24 - 32;
            if (v24 < 32) {
              uint64_t v25 = v24 - 29;
            }
            v21[2] = v17;
            v21[3] = 2 * (v25 >> 2);
          }

          memcpy(v21 + 4, (const void *)(a4 + 32 + 4 * v7), 4 * v17);
        }
      }

      swift_bridgeObjectRelease();
      uint64_t result = v43;
      unint64_t v23 = *(void *)(v43 + 16);
      unint64_t v22 = *(void *)(v43 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_18762C3E8((void *)(v22 > 1), v23 + 1, 1);
        int64_t v13 = a2;
        uint64_t result = v43;
      }

      *(void *)(result + 16) = v23 + 1;
      *(void *)(result + 8 * v23 + 32) = v21;
      int64_t v7 = v15;
      if (!--v8) {
        goto LABEL_40;
      }
    }

    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  int64_t v15 = v7;
  int64_t v13 = a2;
LABEL_40:
  BOOL v26 = v15 <= v13;
  if (v6 > 0) {
    BOOL v26 = v15 >= v13;
  }
  if (!v26)
  {
    while (1)
    {
      int64_t v27 = __OFADD__(v15, v6) ? ((v15 + v6) >> 63) ^ 0x8000000000000000LL : v15 + v6;
      if (__OFADD__(v15, a5)) {
        break;
      }
      if (*(void *)(a4 + 16) >= v15 + a5) {
        uint64_t v28 = v15 + a5;
      }
      else {
        uint64_t v28 = *(void *)(a4 + 16);
      }
      uint64_t v29 = v28 - v15;
      if (v28 < v15) {
        goto LABEL_74;
      }
      if (v15 < 0) {
        goto LABEL_75;
      }
      uint64_t v30 = result;
      sub_18769A6E8();
      sub_18769A52C();
      swift_unknownObjectRetain_n();
      uint64_t v31 = swift_dynamicCastClass();
      if (!v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = MEMORY[0x18961AFE8];
      }

      uint64_t v32 = *(void *)(v31 + 16);
      swift_release();
      if (v32 == v29)
      {
        uint64_t v33 = (void *)swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          uint64_t v33 = (void *)MEMORY[0x18961AFE8];
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = (void *)MEMORY[0x18961AFE8];
        if (v28 != v15)
        {
          if (v29 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AF8);
            uint64_t v33 = (void *)swift_allocObject();
            int64_t v38 = _swift_stdlib_malloc_size(v33);
            uint64_t v39 = v38 - 32;
            if (v38 < 32) {
              uint64_t v39 = v38 - 29;
            }
            v33[2] = v29;
            v33[3] = 2 * (v39 >> 2);
          }

          memcpy(v33 + 4, (const void *)(a4 + 32 + 4 * v15), 4 * v29);
        }
      }

      swift_bridgeObjectRelease();
      uint64_t result = v30;
      uint64_t v45 = v30;
      unint64_t v35 = *(void *)(v30 + 16);
      unint64_t v34 = *(void *)(v30 + 24);
      int64_t v36 = a2;
      if (v35 >= v34 >> 1)
      {
        sub_18762C3E8((void *)(v34 > 1), v35 + 1, 1);
        int64_t v36 = a2;
        uint64_t result = v45;
      }

      *(void *)(result + 16) = v35 + 1;
      *(void *)(result + 8 * v35 + 32) = v33;
      BOOL v37 = v27 <= v36;
      if (v6 > 0) {
        BOOL v37 = v27 >= v36;
      }
      int64_t v15 = v27;
      if (v37) {
        return result;
      }
    }

LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
  }

  return result;
}

uint64_t sub_18762D668(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x18961AFE8];
  }
  sub_18769A52C();
  uint64_t v5 = 0LL;
  uint64_t v6 = MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + 8 * v5 + 32);
    sub_18769A52C();
    sub_18762B81C(&v19, a2, &v18);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v18;
    uint64_t v9 = *(void *)(v18 + 16);
    int64_t v10 = *(void *)(v6 + 16);
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0 && v11 <= *(void *)(v6 + 24) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v10 <= v11) {
        int64_t v12 = v10 + v9;
      }
      else {
        int64_t v12 = v10;
      }
      uint64_t result = (uint64_t)sub_18765B25C((char *)result, v12, 1, (char *)v6);
      uint64_t v6 = result;
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v13 = *(void *)(v6 + 16);
        if ((*(void *)(v6 + 24) >> 1) - v13 < v9) {
          goto LABEL_25;
        }
        uint64_t result = (uint64_t)memcpy((void *)(v6 + 8 * v13 + 32), (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v14 = *(void *)(v6 + 16);
          BOOL v15 = __OFADD__(v14, v9);
          uint64_t v16 = v14 + v9;
          if (v15) {
            goto LABEL_26;
          }
          *(void *)(v6 + 16) = v16;
        }

        goto LABEL_4;
      }
    }

    if (v9) {
      goto LABEL_24;
    }
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v3 == v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }

  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_18762D800(uint64_t a1)
{
  return a1;
}

uint64_t sub_18762D850(uint64_t a1)
{
  return a1;
}

uint64_t sub_18762D89C(uint64_t a1, uint64_t a2)
{
  return sub_18762C240(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_18762D8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x18961AFE8];
  if (!v3) {
    return v4;
  }
  uint64_t v34 = MEMORY[0x18961AFE8];
  sub_18762C480(0LL, v3, 0);
  uint64_t v6 = a2;
  uint64_t v4 = v34;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v10 = *(v8 - 3);
    unint64_t v9 = *(v8 - 2);
    uint64_t v12 = *(v8 - 1);
    unint64_t v11 = *v8;
    sub_18762DE94(v10, v9, v12, *v8);
    uint64_t v31 = v10;
    unint64_t v32 = v9;
    sub_18762DE94(v10, v9, v12, v11);
    uint64_t v13 = qword_18C6D9758;
    uint64_t result = swift_retain();
    if (v13 != -1) {
      uint64_t result = swift_once();
    }
    if (qword_18C6DEDE0 < 0) {
      break;
    }
    if (HIDWORD(qword_18C6DEDE0)) {
      goto LABEL_19;
    }
    uint64_t v28 = v8;
    int64_t v29 = v3;
    uint64_t v30 = v4;
    unint64_t v15 = v11;
    uint64_t v16 = cche_ciphertext_sizeof();
    type metadata accessor for HE.ObjectStorage();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v6;
    swift_retain();
    uint64_t v4 = swift_slowAlloc();
    inited[3] = v4;
    inited[4] = v4 + v16;
    sub_18766A10C(v7, v31, v9, v12);
    sub_18762DEDC(v31, v9, v12, v11);
    if (v33)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v23 = v33;
      *(_BYTE *)(v23 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_16:
      swift_release();
      sub_18762DEDC(v31, v32, v12, v15);
      swift_release();
      return v4;
    }

    swift_release();
    uint64_t v18 = cche_plaintext_sizeof();
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = v6;
    swift_retain();
    uint64_t result = swift_slowAlloc();
    v19[3] = result;
    v19[4] = result + v18;
    if (!*(void *)(a3 + 24)) {
      goto LABEL_20;
    }
    int v20 = cche_decrypt();
    if (v20)
    {
      int v24 = v20;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v25 = v24;
      *(_BYTE *)(v25 + 4) = 0;
      swift_willThrow();
      swift_release();
      goto LABEL_16;
    }

    swift_release();
    sub_18762DEDC(v31, v32, v12, v15);
    uint64_t v4 = v30;
    unint64_t v22 = *(void *)(v30 + 16);
    unint64_t v21 = *(void *)(v30 + 24);
    if (v22 >= v21 >> 1)
    {
      sub_18762C480((char *)(v21 > 1), v22 + 1, 1);
      uint64_t v6 = a2;
      uint64_t v4 = v30;
    }

    uint64_t v8 = v28 + 4;
    *(void *)(v4 + 16) = v22 + 1;
    *(void *)(v4 + 8 * v22 + 32) = v19;
    int64_t v3 = v29 - 1;
    if (v29 == 1) {
      return v4;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t _s16SimilarityClientVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s16SimilarityClientVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_18769A52C();
  swift_retain();
  sub_18769A52C();
  sub_18769A52C();
  return a1;
}

uint64_t _s16SimilarityClientVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s16SimilarityClientVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16SimilarityClientVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t _s16SimilarityClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityClient()
{
  return &type metadata for PEC.SimilarityClient;
}

uint64_t sub_18762DE94(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    sub_187623A28(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return sub_18769A52C();
  }

  else
  {
    sub_187623A28(a1, a2);
    return sub_187623A28(a3, a4);
  }

uint64_t sub_18762DEDC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    sub_187623C58(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return swift_bridgeObjectRelease();
  }

  else
  {
    sub_187623C58(a1, a2);
    return sub_187623C58(a3, a4);
  }

uint64_t sub_18762DF24()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_18762DF2C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t sub_18762E06C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(v4 + 64);
  if (a2 <= v6) {
    goto LABEL_23;
  }
  uint64_t v9 = v8 + ((v7 + 16) & ~v7) + 1;
  char v10 = 8 * v9;
  unsigned int v12 = ((a2 - v6 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)(a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }

  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_23;
      }
LABEL_7:
      int v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9)) {
        goto LABEL_23;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if ((_DWORD)v8 + (((_DWORD)v7 + 16) & ~(_DWORD)v7) != -1)
      {
        else {
          int v14 = 4;
        }
        __asm { BR              X12 }
      }

      int v18 = v6 + v13;
      return (v18 + 1);
    }

    int v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9)) {
      goto LABEL_14;
    }
  }

void sub_18762E2B0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  size_t v8 = *(void *)(v6 + 64)
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X14 }

uint64_t _s6ServerVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ServerVMn_0);
}

uint64_t sub_18762E578()
{
  char v2 = *v0;
  char v3 = v0[1];
  uint64_t v4 = PEC.SimilarityClientConfig.plaintextModuli()();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v10 = MEMORY[0x18961AFE8];
    sub_18769A640();
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
      char v12 = v2;
      HE.RlweParams.init(inParams:plaintextModulus:)(&v12, v7, v11);
      if (v1) {
        break;
      }
      v11[1] = v3;
      _s12ParamContextCMa();
      swift_allocObject();
      sub_1876496B8((uint64_t)v11);
      ++v6;
      sub_18769A628();
      sub_18769A64C();
      sub_18769A658();
      sub_18769A634();
      if (v5 == v6)
      {
        uint64_t v8 = v10;
        swift_bridgeObjectRelease();
        return v8;
      }
    }

    uint64_t v8 = v10;
    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  return v8;
}

uint64_t PEC.SimilarityClientConfig.plaintextModuli()()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18769C700;
  *(void *)(v0 + 32) = cche_encryption_params_plaintext_modulus();
  uint64_t v1 = sub_18769A52C();
  sub_18762E820(v1);
  return v0;
}

uint64_t PEC.SimilarityMetric.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t PEC.SimilarityMetric.rawValue.getter()
{
  return 0LL;
}

void *sub_18762E798@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0LL;
  return result;
}

void PEC.SimilarityClientConfig.encryptionParams.getter(_BYTE *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t PEC.SimilarityClientConfig.scalingFactor.getter()
{
  return *(void *)(v0 + 8);
}

void PEC.SimilarityClientConfig.plaintextPacking.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t PEC.SimilarityClientConfig.embeddingDimension.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PEC.SimilarityClientConfig.galoisElements.getter()
{
  return sub_18769A52C();
}

uint64_t PEC.SimilarityClientConfig.extraPlaintextModuli.getter()
{
  return sub_18769A52C();
}

_BYTE *PEC.SimilarityClientConfig.init(encryptionParams:scalingFactor:plaintextPacking:embeddingDimension:galoisElements:similarityMetric:extraPlaintextModuli:)@<X0>( _BYTE *result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v7 = result[1];
  char v8 = *a3;
  *(_BYTE *)a7 = *result;
  *(_BYTE *)(a7 + 1) = v7;
  *(void *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = v8;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  return result;
}

uint64_t sub_18762E820(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_18765B250((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }

    uint64_t result = swift_bridgeObjectRelease();
    --v2;
    uint64_t v3 = v30;
    if (!v2) {
      goto LABEL_37;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_18762E900(uint64_t result, unint64_t a2)
{
  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v10 = *((void *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6) {
      int64_t v11 = v6;
    }
    else {
      int64_t v11 = v5;
    }
    int64_t v4 = sub_18765B25C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    int64_t v10 = *((void *)v4 + 3) >> 1;
  }

  uint64_t v12 = *((void *)v4 + 2);
  uint64_t v13 = v10 - v12;
  uint64_t result = (uint64_t)sub_18762EB54(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t v27 = v34 + v3 + 1;
      goto LABEL_35;
    }

    *((void *)v4 + 2) = v16;
  }

  if (result != v13)
  {
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }

LABEL_16:
  uint64_t v17 = v40;
  uint64_t v18 = v38;
  if (v40 == v38) {
    goto LABEL_13;
  }
  int64_t v19 = *((void *)v4 + 2);
  uint64_t v36 = v39;
  int v20 = sub_18762EC2C((uint64_t (*)())v37, v40, v38, v39);
  uint64_t v22 = *v21;
  uint64_t result = ((uint64_t (*)(_BYTE *, void))v20)(v37, 0LL);
  if (v17 < 0 || v17 >= v18) {
    goto LABEL_37;
  }
  uint64_t v23 = v17 + 1;
  uint64_t v24 = -v18;
LABEL_21:
  while (1)
  {
    unint64_t v25 = *((void *)v4 + 3);
    int64_t v26 = v25 >> 1;
    uint64_t v27 = v19 + 1;
    if (v19 < v26) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v19;
  }

  uint64_t result = (uint64_t)sub_18765B25C((char *)(v25 > 1), v19 + 1, 1, v4);
  int64_t v4 = (char *)result;
  int64_t v26 = *(void *)(result + 24) >> 1;
  if (v19 >= v26) {
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v28 = &v4[8 * v19];
  *((void *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((void *)v4 + 2) = v27;
    goto LABEL_13;
  }

  uint64_t v3 = 0LL;
  uint64_t v29 = v24 + v23;
  int64_t v34 = v19;
  int64_t v35 = v26;
  int64_t v30 = ~v19 + v26;
  uint64_t v31 = v28 + 40;
  while (1)
  {
    unint64_t v32 = sub_18762EC2C((uint64_t (*)())v37, v23 + v3, v18, v36);
    uint64_t v22 = *v33;
    uint64_t result = ((uint64_t (*)(_BYTE *, void))v32)(v37, 0LL);
    if (v23 < 0 || v23 + v3 >= v18) {
      break;
    }
    if (v30 == v3)
    {
      v23 += v3 + 1;
      int64_t v19 = v35;
      uint64_t v24 = -v18;
      *((void *)v4 + 2) = v35;
      goto LABEL_21;
    }

    *(void *)&v31[8 * v3++] = v22;
    if (!(v29 + v3)) {
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

            __break(1u);
            goto LABEL_17;
          }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_17:
  uint64_t result = sub_18769A67C();
  __break(1u);
  return result;
}

    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      return v5;
    }

    goto LABEL_19;
  }

uint64_t *sub_18762EB54(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0LL;
    goto LABEL_23;
  }

  if (!a3)
  {
LABEL_22:
    uint64_t v5 = a3;
    goto LABEL_23;
  }

  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_23:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (uint64_t *)v5;
  }

  unint64_t v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6) {
        unint64_t v6 = a3 - 2;
      }
      if (v6 >= a3 - 1) {
        unint64_t v6 = a3 - 1;
      }
      unint64_t v7 = v6 + 1;
      if (v7 > 4)
      {
        uint64_t v10 = v7 & 3;
        if ((v7 & 3) == 0) {
          uint64_t v10 = 4LL;
        }
        unint64_t v11 = v7 - v10;
        uint64_t v8 = v7 - v10 + 1;
        BOOL v9 = &a2[v11];
        int64x2_t v12 = vdupq_n_s64(a5);
        uint64_t v13 = (int64x2_t *)(a2 + 3);
        do
        {
          v13[-1] = v12;
          *uint64_t v13 = v12;
          v13 += 2;
          v11 -= 4LL;
        }

        while (v11);
      }

      else
      {
        uint64_t v8 = 1LL;
        BOOL v9 = a2;
      }

      uint64_t v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          uint64_t v5 = a4;
          goto LABEL_23;
        }

        ++v8;
        *v14++ = a5;
        if (a3 == v8) {
          goto LABEL_22;
        }
      }

      __break(1u);
      goto LABEL_26;
    }

    goto LABEL_22;
  }

LABEL_27:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        ++v26;
        swift_bridgeObjectRelease();
        unint64_t v6 = v42;
        uint64_t result = v43;
        if (v26 == v42)
        {
          swift_bridgeObjectRelease();
          uint64_t v16 = v41;
          ++v45;
          if (v40 != v9) {
            goto LABEL_16;
          }
          swift_bridgeObjectRelease();
          unint64_t v7 = v37;
          goto LABEL_45;
        }
      }
    }

    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

uint64_t (*sub_18762EC2C(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }

  else
  {
    *(void *)uint64_t result = a4;
    return nullsub_1;
  }

  return result;
}

BOOL _s16CryptoKitPrivate3PECO22SimilarityClientConfigV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int64_t v19 = *(void **)(a1 + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v18 = *(void **)(a2 + 40);
  uint64_t v9 = HE.RlweParams.rawValue.getter();
  uint64_t v11 = v10;
  if (v9 == HE.RlweParams.rawValue.getter() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v13 = sub_18769A6DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      return 0LL;
    }
  }

  if (v2) {
    uint64_t v14 = 5654338LL;
  }
  else {
    uint64_t v14 = 5654082LL;
  }
  if (v5) {
    uint64_t v15 = 5654338LL;
  }
  else {
    uint64_t v15 = 5654082LL;
  }
  if (v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v16 = sub_18769A6DC();
    swift_bridgeObjectRelease_n();
    if ((v16 & 1) == 0) {
      return 0LL;
    }
  }

  if (v3 == v6 && v4 == v7 && v22 == v8 && sub_18768D41C(v21, v20)) {
    return sub_18768D490(v19, v18);
  }
  return 0LL;
}

unint64_t sub_18762EDF4()
{
  unint64_t result = qword_18C6D9BB0[0];
  if (!qword_18C6D9BB0[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for PEC.SimilarityMetric,  &type metadata for PEC.SimilarityMetric);
    atomic_store(result, qword_18C6D9BB0);
  }

  return result;
}

uint64_t _s16SimilarityMetricOwst(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18762EE78 + 4 * byte_18769C7A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18762EE98 + 4 * byte_18769C7A5[v4]))();
  }
}

_BYTE *sub_18762EE78(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_18762EE98(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18762EEA0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18762EEA8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18762EEB0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18762EEB8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityMetric()
{
  return &type metadata for PEC.SimilarityMetric;
}

uint64_t _s22SimilarityClientConfigVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s22SimilarityClientConfigVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_18769A52C();
  sub_18769A52C();
  return a1;
}

uint64_t _s22SimilarityClientConfigVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s22SimilarityClientConfigVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s22SimilarityClientConfigVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s22SimilarityClientConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityClientConfig()
{
  return &type metadata for PEC.SimilarityClientConfig;
}

void sub_18762F0F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }

  int v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      isUniquelyReferenced_nonNull_native = sub_18765B25C(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      int v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }

    goto LABEL_16;
  }

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_18762F1F8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_18762F24C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = a2 + 1;
    }
  }

  return result;
}

uint64_t _s16VerifiableClientVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s16VerifiableClientVMn);
}

uint64_t sub_18762F29C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_18762F2A4()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }

    else
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_18762F3F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = v12 + v9;
  uint64_t v14 = v12 + 7;
  unint64_t v15 = ((v12 + 7 + ((v12 + v9 + ((v12 + v9 + v11) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  unsigned int v16 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v16 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v16 | 7) + 16LL) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }

  else
  {
    uint64_t v20 = v7;
    uint64_t v21 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v22 = ((unint64_t)a2 + v10) & v21;
    uint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v23(((unint64_t)a1 + v10) & v21, v22, v20);
    unint64_t v24 = (v13 + v22) & v21;
    v23((v13 + (((unint64_t)a1 + v10) & v21)) & v21, v24, v20);
    unint64_t v25 = (v13 + v24) & v21;
    v23((v13 + ((v13 + (((unint64_t)a1 + v10) & v21)) & v21)) & v21, v25, v20);
    int64_t v26 = (void *)((v14 + ((v13 + ((v13 + (((unint64_t)a1 + v10) & v21)) & v21)) & v21)) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v27 = (uint64_t *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    sub_187623A28(*v27, v29);
    *int64_t v26 = v28;
    v26[1] = v29;
  }

  return a1;
}

uint64_t sub_18762F624(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_checkMetadataState();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + a1 + v7) & ~v7;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v8, v5);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = (v10 + v7 + v8) & ~v7;
  v9(v11, v5);
  uint64_t v12 = (v10 + v7 + v11) & ~v7;
  v9(v12, v5);
  return sub_187623C58( *(void *)((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL),  *(void *)(((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_18762F78C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (v14 + v9 + v11) & ~v9;
  uint64_t v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  uint64_t v17 = (v14 + v9 + v15) & ~v9;
  uint64_t v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  uint64_t v19 = (void *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = (uint64_t *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_187623A28(*v20, v22);
  *uint64_t v19 = v21;
  v19[1] = v22;
  return a1;
}

uint64_t sub_18762F944(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (v14 + v9 + v11) & ~v9;
  uint64_t v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  uint64_t v17 = (v14 + v9 + v15) & ~v9;
  uint64_t v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  uint64_t v19 = (uint64_t *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = (uint64_t *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_187623A28(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_187623C58(v23, v24);
  return a1;
}

uint64_t sub_18762FB04(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (v14 + v9 + v11) & ~v9;
  uint64_t v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  uint64_t v17 = (v14 + v9 + v15) & ~v9;
  uint64_t v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  *(_OWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_18762FCB0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (v14 + v9 + v11) & ~v9;
  uint64_t v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  uint64_t v17 = (v14 + v9 + v15) & ~v9;
  uint64_t v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  uint64_t v19 = (uint64_t *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  *(_OWORD *)uint64_t v19 = *(_OWORD *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFF8LL);
  sub_187623C58(v20, v21);
  return a1;
}

uint64_t sub_18762FE64(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (v10 <= 0xC) {
    unsigned int v10 = 12;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = v7;
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v5 + 64) + v12;
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + 7;
  if (v10 < a2)
  {
    if (((((v16 + ((v15 + ((v15 + (v13 & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v10 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0LL;
    }
    __asm { BR              X0 }
  }

  if ((_DWORD)v6 == v10)
  {
    unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v22 = a1;
    uint64_t v9 = v6;
    uint64_t v11 = AssociatedTypeWitness;
    return v21(v22, v9, v11);
  }

  uint64_t v23 = ~v12;
  uint64_t v22 = (v13 + a1) & v23;
  if ((_DWORD)v9 == v10)
  {
    unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v21(v22, v9, v11);
  }

  uint64_t v24 = *(void *)(((v16 + ((v15 + ((v15 + v22) & v23)) & v23)) & 0xFFFFFFFFFFFFF8LL) + 8) >> 60;
  if (((4 * (_DWORD)v24) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v24) & 0xC | (v24 >> 2));
  }
  else {
    return 0LL;
  }
}

void sub_1876300DC(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_checkMetadataState() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= 0xC) {
    unsigned int v9 = 12;
  }
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  if (v9 >= a3)
  {
    int v13 = 0u;
    if (a2 <= v9) {
      goto LABEL_19;
    }
  }

  else
  {
    if (((*(_DWORD *)(v8 + 64)
         + 7
         + ((*(_DWORD *)(v8 + 64)
           + (_DWORD)v10
           + ((*(_DWORD *)(v8 + 64) + (_DWORD)v10 + ((*(_DWORD *)(v6 + 64) + (_DWORD)v10) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v11 = a3 - v9 + 1;
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (a2 <= v9) {
LABEL_19:
    }
      __asm { BR              X16 }
  }

  if (((*(_DWORD *)(v8 + 64)
       + 7
       + ((*(_DWORD *)(v8 + 64)
         + (_DWORD)v10
         + ((*(_DWORD *)(v8 + 64) + (_DWORD)v10 + ((*(_DWORD *)(v6 + 64) + (_DWORD)v10) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v14 = ~v9 + a2;
    bzero( a1,  ((*(void *)(v8 + 64)
      + 7LL
      + ((*(void *)(v8 + 64) + v10 + ((*(void *)(v8 + 64) + v10 + ((*(void *)(v6 + 64) + v10) & ~v10)) & ~v10)) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL)
    + 16);
    *a1 = v14;
  }

  __asm { BR              X10 }

void sub_1876302D4()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x187630390LL);
}

void sub_1876302DC()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x1876302E4LL);
  }
  JUMPOUT(0x187630390LL);
}

void sub_187630334()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x187630390LL);
}

void sub_18763033C()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x187630390LL);
}

uint64_t sub_187630344@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(_WORD *)(v11 + v14) = 0;
  if (!(_DWORD)v10) {
    JUMPOUT(0x187630390LL);
  }
  if ((_DWORD)v13 == v7)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v4 = v11;
    uint64_t v5 = v10;
    a1 = v13;
    a2 = v12;
  }

  else
  {
    uint64_t v4 = (v8 + v11) & v9;
    if ((_DWORD)a1 != v7) {
      JUMPOUT(0x187630350LL);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    uint64_t v5 = v10;
  }

  return v3(v4, v5, a1, a2);
}

uint64_t _s10CredentialVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s10CredentialVMn);
}

BOOL static APSIC.SupportedCurves.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t APSIC.SupportedCurves.hash(into:)()
{
  return sub_18769A760();
}

void *static APSIC.SupportedCurves.allCases.getter()
{
  return &unk_18A080120;
}

uint64_t APSIC.SupportedCurves.hashValue.getter()
{
  return sub_18769A778();
}

BOOL sub_187630444(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_187630458()
{
  return sub_18769A778();
}

uint64_t sub_18763049C()
{
  return sub_18769A760();
}

uint64_t sub_1876304C4()
{
  return sub_18769A778();
}

void sub_187630504(void *a1@<X8>)
{
  *a1 = &unk_18A080148;
}

uint64_t sub_187630514()
{
  uint64_t v0 = ccec_compressed_x962_export_pub_size();
  v3[0] = sub_187644164(v0);
  v3[1] = v1;
  sub_187631D04((uint64_t)v3);
  return v3[0];
}

uint64_t sub_1876305B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    size_t v6 = result;
    if (result)
    {
      uint64_t v7 = sub_18769A550();
      *(void *)(v7 + 16) = v6;
      bzero((void *)(v7 + 32), v6);
    }

    else
    {
      uint64_t v7 = MEMORY[0x18961AFE8];
      size_t v6 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    }

    sub_187630678(v7 + 32, v7 + 32 + v6, a1, a2);
    if (v2) {
      swift_bridgeObjectRelease();
    }
    return v7;
  }

  return result;
}

void sub_187630678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187630944LL);
}

uint64_t sub_187630958(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (!result)
  {
    __break(1u);
    return result;
  }

  int v4 = ccec_x963_import_pub();
  *a3 = v4;
  if (v4)
  {
    int v5 = v4;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = v5;
  }

  else
  {
    uint64_t result = ccec_validate_pub();
    if ((_DWORD)result) {
      return result;
    }
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = -19;
  }

  *(_BYTE *)(v6 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_187630A18(uint64_t a1, uint64_t a2)
{
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    size_t v5 = result;
    if (result)
    {
      uint64_t v6 = sub_18769A550();
      *(void *)(v6 + 16) = v5;
      bzero((void *)(v6 + 32), v5);
    }

    else
    {
      uint64_t v6 = MEMORY[0x18961AFE8];
      size_t v5 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    }

    sub_187630B18(v6 + 32, v6 + 32 + v5, a1, a2);
    return v6;
  }

  return result;
}

void sub_187630B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187630D68LL);
}

void APSIC.Client.init(publicKey:domainSeparationTag:curveType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (*a5)
  {
    if (*a5 != 1) {
      goto LABEL_7;
    }
    if (MEMORY[0x1895AA690]()) {
      goto LABEL_8;
    }
    __break(1u);
  }

  if (MEMORY[0x1895AA684]()) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_7:
  if (!ccec_cp_521())
  {
    __break(1u);
    JUMPOUT(0x1876312A0LL);
  }

void sub_1876312FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t v12 = *(char **)(a3 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a3 + 16) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = sub_187631FCC((uint64_t)v12);
      *(void *)(a3 + 16) = v12;
    }

    sub_1876313A4((uint64_t)(v12 + 32), (uint64_t)&v12[*((void *)v12 + 2) + 32], a4, a5, a6, a7);
    *(void *)(a3 + 16) = v12;
  }

  else
  {
    __break(1u);
  }

void sub_1876313A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if (ccrng()) {
      __asm { BR              X10 }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  JUMPOUT(0x1876314B4LL);
}

__int128 *APSIC.Client.computeIntersectResponse(element:matchPoint:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v10 = *v4;
  sub_187630A18(a3, a4);
  if (!v5)
  {
    if ((*((void *)&v10 + 1) & 0x8000000000000000LL) == 0)
    {
      if (*((void *)&v10 + 1))
      {
        uint64_t v7 = sub_18769A550();
        *(void *)(v7 + 16) = *((void *)&v10 + 1);
        bzero((void *)(v7 + 32), *((size_t *)&v10 + 1));
        uint64_t v8 = sub_18769A550();
        *(void *)(v8 + 16) = *((void *)&v10 + 1);
        bzero((void *)(v8 + 32), *((size_t *)&v10 + 1));
      }

      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x1876318A8LL);
  }

  return v4;
}

void sub_1876318D0( uint64_t a1, uint64_t a2, char **a3, char **a4, char **a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    uint64_t v15 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v15 = sub_187631FCC((uint64_t)v15);
      *a3 = v15;
    }

    unsigned int v17 = *a4;
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v17;
    if ((v18 & 1) == 0)
    {
      unsigned int v17 = sub_187631FCC((uint64_t)v17);
      *a4 = v17;
    }

    uint64_t v19 = *a5;
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v19;
    if ((v20 & 1) == 0)
    {
      uint64_t v19 = sub_187631FCC((uint64_t)v19);
      *a5 = v19;
    }

    sub_187631A04((void *)v19 + 4, (uint64_t)&v19[*((void *)v19 + 2) + 32], (uint64_t *)v17 + 4, a6, a7, a8, a9);
    *a5 = v19;
    *a4 = v17;
    *a3 = v15;
  }

  else
  {
    __break(1u);
  }

void sub_187631A04(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t v7 = *a4;
    *a3 = *a4;
    *a1 = v7;
    __asm { BR              X12 }
  }

  __break(1u);
  JUMPOUT(0x187631B68LL);
}

void APSIC.Client.computeGuaranteedMatchResponse()()
{
  size_t v2 = v0[1];
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = *v0;
    if (v2)
    {
      uint64_t v4 = sub_18769A550();
      *(void *)(v4 + 16) = v2;
      bzero((void *)(v4 + 32), v2);
      uint64_t v5 = sub_18769A550();
      *(void *)(v5 + 16) = v2;
      bzero((void *)(v5 + 32), v2);
    }

    else
    {
      uint64_t v5 = MEMORY[0x18961AFE8];
      uint64_t v4 = MEMORY[0x18961AFE8];
    }

    *(void *)(v4 + 32) = v3;
    *(void *)(v5 + 32) = v3;
    int match_response = ccapsic_client_generate_match_response();
    if (match_response)
    {
      int v7 = match_response;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = v7;
      *(_BYTE *)(v8 + 4) = 0;
      swift_willThrow();
LABEL_8:
      swift_bridgeObjectRelease();
      sub_187623C58(0LL, 0xC000000000000000LL);
      swift_bridgeObjectRelease();
      return;
    }

    sub_187630514();
    if (v1) {
      goto LABEL_8;
    }
    sub_187630514();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

void sub_187631D04(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_187631D64@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  uint64_t result = ccec_compressed_x962_export_pub();
  *uint64_t v3 = result;
  *size_t v2 = v1;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

char *sub_187631FCC(uint64_t a1)
{
  return sub_18765AF3C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_187631FE0(uint64_t a1)
{
  return sub_18765B25C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_187631FF4(uint64_t a1)
{
  return sub_18765B244(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_187632008(uint64_t a1)
{
  return sub_18765B250(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_18763201C(void *a1)
{
  return sub_18765B66C(0LL, a1[2], 0, a1);
}

uint64_t sub_187632030( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result = sub_187699E90();
  uint64_t v15 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v15 += a1 - result;
  }

  BOOL v16 = __OFSUB__(a2, a1);
  uint64_t v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v18 = sub_187699EA8();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = v15 + v19;
  if (v15) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0LL;
  }
  sub_1876312FC(v15, v21, a4, a5, a6, a7, a8);
  return sub_187623C58(a7, a8);
}

uint64_t sub_187632110( uint64_t a1, uint64_t a2, uint64_t a3, char **a4, char **a5, char **a6, uint64_t *a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result = sub_187699E90();
  uint64_t v17 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v17 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v18 = sub_187699EA8();
  if (v18 >= a2 - a1) {
    uint64_t v19 = a2 - a1;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = v17 + v19;
  if (v17) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0LL;
  }
  sub_1876318D0(v17, v21, a4, a5, a6, a7, a8, a9, a10);
  sub_187632248((uint64_t)a7);
  return sub_187623C58(a9, a10);
}

uint64_t sub_187632214(uint64_t a1)
{
  return a1;
}

uint64_t sub_187632248(uint64_t a1)
{
  return a1;
}

unint64_t sub_18763227C()
{
  unint64_t result = qword_18C6D9C38;
  if (!qword_18C6D9C38)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for APSIC.SupportedCurves,  &type metadata for APSIC.SupportedCurves);
    atomic_store(result, (unint64_t *)&qword_18C6D9C38);
  }

  return result;
}

unint64_t sub_1876322C4()
{
  unint64_t result = qword_18C6D9C40;
  if (!qword_18C6D9C40)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_18C6D9C48);
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6D9C40);
  }

  return result;
}

ValueMetadata *type metadata accessor for APSIC()
{
  return &type metadata for APSIC;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OPRF.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for APSIC.SupportedCurves(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_187632408 + 4 * byte_18769C9C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18763243C + 4 * byte_18769C9C0[v4]))();
}

uint64_t sub_18763243C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187632444(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18763244CLL);
  }
  return result;
}

uint64_t sub_187632458(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187632460LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_187632464(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18763246C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187632478(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_187632480(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for APSIC.SupportedCurves()
{
  return &type metadata for APSIC.SupportedCurves;
}

uint64_t destroy for APSIC.Client()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for APSIC.Client(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_18769A52C();
  sub_18769A52C();
  return a1;
}

void *assignWithCopy for APSIC.Client(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  sub_18769A52C();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  sub_18769A52C();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for APSIC.Client(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for APSIC.Client(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for APSIC.Client(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for APSIC.Client()
{
  return &type metadata for APSIC.Client;
}

uint64_t PEC.PlaintextMatrixDims.init(rowCount:colCount:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (result < 1 || a2 <= 0)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = 1;
    *(_BYTE *)(v3 + 4) = 1;
    return swift_willThrow();
  }

  else
  {
    *a3 = result;
    a3[1] = a2;
  }

  return result;
}

ValueMetadata *type metadata accessor for PEC.PlaintextMatrixDims()
{
  return &type metadata for PEC.PlaintextMatrixDims;
}

uint64_t sub_1876326E0@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v29 = a1[1];
    uint64_t v30 = *a1;
    int v33 = *a2;
    uint64_t v6 = *(void *)(*(void *)(a3 + 32) + 16LL);
    char v7 = *(_BYTE *)(v6 + 40);
    if (*(_BYTE *)(v6 + 41)) {
      uint64_t v8 = 5654338LL;
    }
    else {
      uint64_t v8 = 5654082LL;
    }
    uint64_t v31 = *(void *)(*(void *)(a3 + 32) + 16LL);
    swift_retain();
    sub_18769A52C();
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      uint64_t v10 = v4;
      uint64_t v11 = *(void *)(*(void *)(v4 + 8 * i + 32) + 16LL);
      int v12 = *(unsigned __int8 *)(v11 + 41);
      LOBYTE(v32[0]) = *(_BYTE *)(v11 + 40);
      v35[0] = v7;
      uint64_t v13 = HE.RlweParams.rawValue.getter();
      uint64_t v15 = v14;
      if (v13 == HE.RlweParams.rawValue.getter() && v15 == v16)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v17 = sub_18769A6DC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
      }

      if (v12) {
        uint64_t v18 = 5654338LL;
      }
      else {
        uint64_t v18 = 5654082LL;
      }
      if (v18 == v8)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v19 = sub_18769A6DC();
        swift_bridgeObjectRelease_n();
        if ((v19 & 1) == 0)
        {
LABEL_17:
          swift_bridgeObjectRelease_n();
          sub_18762D1DC();
          swift_allocError();
          *(_DWORD *)uint64_t v20 = 5;
          *(_BYTE *)(v20 + 4) = 1;
          swift_willThrow();
          return swift_release();
        }
      }

      uint64_t v4 = v10;
    }

    swift_bridgeObjectRelease();
    char v23 = *(_BYTE *)(v31 + 41);
    v35[0] = *(_BYTE *)(v31 + 40);
    v35[1] = v23;
    v32[0] = v30;
    v32[1] = v29;
    char v24 = v33;
    unsigned __int8 v34 = v33;
    uint64_t v25 = sub_187633558((uint64_t)v35, v32, &v34);
    if (v28)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }

    else
    {
      if (*(void *)(v10 + 16) != v25)
      {
        swift_bridgeObjectRelease();
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v26 = 1;
        *(_BYTE *)(v26 + 4) = 1;
        swift_willThrow();
        return swift_release();
      }

      uint64_t result = swift_release();
      *(void *)a4 = v30;
      *(void *)(a4 + 8) = v29;
      *(_BYTE *)(a4 + 16) = v24;
      *(void *)(a4 + 24) = v10;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 1;
    *(_BYTE *)(v22 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

unint64_t sub_1876329C0@<X0>( unint64_t result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *a2 * v8;
  if ((unsigned __int128)(*a2 * (__int128)v8) >> 64 == v10 >> 63)
  {
    if (v10 != *(void *)(a4 + 16) || v10 == 0)
    {
      swift_bridgeObjectRelease();
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 1;
    }

    else
    {
      if (!*a3)
      {
        *(void *)&__int128 v19 = *a2;
        *((void *)&v19 + 1) = v8;
        uint64_t v14 = sub_18763366C(result, (uint64_t *)&v19, a4, a5 & 1);
        swift_bridgeObjectRelease();
        if (v6) {
          return swift_release();
        }
        uint64_t v17 = v9;
        uint64_t v18 = v8;
        unsigned __int8 v22 = 0;
LABEL_18:
        sub_1876326E0(&v17, &v22, (uint64_t)v14, (uint64_t)&v19);
        uint64_t result = swift_release();
        char v15 = v20;
        uint64_t v16 = v21;
        *(_OWORD *)a6 = v19;
        *(_BYTE *)(a6 + 16) = v15;
        *(void *)(a6 + 24) = v16;
        return result;
      }

      if (*a3 == 1)
      {
        *(void *)&__int128 v19 = *a2;
        *((void *)&v19 + 1) = v8;
        uint64_t v13 = sub_187633F28(result, (uint64_t *)&v19, a4, a5 & 1);
        if (v6)
        {
          swift_bridgeObjectRelease();
          return swift_release();
        }

        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
        uint64_t v17 = v9;
        uint64_t v18 = v8;
        unsigned __int8 v22 = 1;
        goto LABEL_18;
      }

      swift_bridgeObjectRelease();
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 5;
    }

    *(_BYTE *)(v12 + 4) = 1;
    swift_willThrow();
    return swift_release();
  }

  __break(1u);
  return result;
}

void sub_187632B7C()
{
  if (*(_BYTE *)(v0 + 16))
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v1 = 5;
    *(_BYTE *)(v1 + 4) = 1;
    swift_willThrow();
    return;
  }

  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v43 = *(void *)(v2 + 16);
  if (!v43) {
    goto LABEL_86;
  }
  uint64_t v3 = *(void *)v0;
  uint64_t v41 = *(void *)(v0 + 8);
  swift_retain();
  uint64_t v4 = sub_187649A28();
  swift_release();
  if (!v3)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  if (v4 == 0x8000000000000000LL && v3 == -1)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  uint64_t v6 = v4 / v3;
  if (v4 / v3 + 0x4000000000000000LL < 0) {
    goto LABEL_88;
  }
  if ((unsigned __int128)(v3 * (__int128)v41) >> 64 != (v3 * v41) >> 63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  uint64_t v46 = 2 * v6;
  __int128 v48 = sub_18765B25C(0LL, (v3 * v41) & ~((v3 * v41) >> 63), 0, MEMORY[0x18961AFE8]);
  uint64_t v44 = v3 * v6;
  BOOL v42 = (unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63;
  sub_18769A52C();
  uint64_t v7 = 0LL;
  uint64_t v47 = v2;
  uint64_t v45 = v3 * v41;
  do
  {
    uint64_t v10 = *(void *)(v2 + 8 * v7 + 32);
    unsigned int v11 = cche_param_ctx_polynomial_degree();
    swift_retain();
    swift_retain();
    if (v11)
    {
      uint64_t v12 = sub_18769A550();
      *(void *)(v12 + 16) = v11;
    }

    else
    {
      uint64_t v12 = MEMORY[0x18961AFE8];
    }

    if (!*(void *)(v10 + 24)) {
      goto LABEL_93;
    }
    int v13 = cche_decode_simd_int64();
    if (v13)
    {
      int v30 = v13;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v31 = v30;
      *(_BYTE *)(v31 + 4) = 0;
      swift_willThrow();
      *(void *)(v12 + 16) = 0LL;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_64:
      swift_bridgeObjectRelease();
      return;
    }

    unsigned int v14 = cche_param_ctx_polynomial_degree();
    if (v11 < v14)
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }

    *(void *)(v12 + 16) = v14;
    swift_release();
    if (v46 <= 1)
    {
      uint64_t v26 = *((void *)v48 + 2) % v3;
      BOOL v17 = __OFSUB__(v3, v26);
      uint64_t v27 = v3 - v26;
      if (v17) {
        goto LABEL_74;
      }
      if (v27 >= *(void *)(v12 + 16)) {
        uint64_t v27 = *(void *)(v12 + 16);
      }
      if (v27 < 0) {
        goto LABEL_76;
      }
      unint64_t v28 = (2 * v27) | 1;
      uint64_t v29 = sub_18769A52C();
      sub_18762F0F0(v29, v12 + 32, 0LL, v28);
      uint64_t v16 = v3 * v41;
    }

    else
    {
      if (v42) {
        goto LABEL_73;
      }
      uint64_t v15 = *((void *)v48 + 2);
      uint64_t v16 = v3 * v41;
      BOOL v17 = __OFSUB__(v45, v15);
      uint64_t v18 = v45 - v15;
      if (v17) {
        goto LABEL_75;
      }
      if (v18 >= v44) {
        uint64_t v18 = v44;
      }
      if (v18 < 0) {
        goto LABEL_77;
      }
      unint64_t v19 = (2 * v18) | 1;
      uint64_t v20 = sub_18769A52C();
      sub_18762F0F0(v20, v12 + 32, 0LL, v19);
      swift_bridgeObjectRelease();
      uint64_t v21 = *((void *)v48 + 2);
      BOOL v17 = __OFSUB__(v45, v21);
      uint64_t v22 = v45 - v21;
      if (v17) {
        goto LABEL_79;
      }
      if (v22 >= v44) {
        uint64_t v22 = v44;
      }
      BOOL v17 = __OFADD__(v4, v22);
      uint64_t v23 = v4 + v22;
      if (v17) {
        goto LABEL_80;
      }
      if (v23 < v4) {
        goto LABEL_81;
      }
      if (v4 < 0) {
        goto LABEL_82;
      }
      unint64_t v24 = *(void *)(v12 + 16);
      unint64_t v8 = (2 * v23) | 1;
      uint64_t v9 = swift_unknownObjectRetain();
      sub_18762F0F0(v9, v12 + 32, v4, v8);
    }

    ++v7;
    swift_release();
    swift_bridgeObjectRelease_n();
    uint64_t v2 = v47;
  }

  while (v43 != v7);
  swift_bridgeObjectRelease();
  if (*((void *)v48 + 2) != v16)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v40 = 5;
    *(_BYTE *)(v40 + 4) = 1;
    swift_willThrow();
    goto LABEL_64;
  }

  if (v3 < 0) {
    goto LABEL_91;
  }
  uint64_t v32 = v41;
  if ((v41 & 0x8000000000000000LL) == 0)
  {
    sub_18769A52C();
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 32LL;
    uint64_t v36 = v48;
    while (v34 != v3)
    {
      if (v32)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = sub_187631FE0((uint64_t)v36);
        }
        uint64_t v37 = 0LL;
        uint64_t v32 = v41;
        while (1)
        {
          uint64_t v38 = v37 * v3;
          BOOL v17 = __OFADD__(v38, v34);
          unint64_t v39 = v38 + v34;
          if (v17) {
            goto LABEL_67;
          }
          if ((v39 & 0x8000000000000000LL) != 0) {
            goto LABEL_68;
          }
          if (v39 >= *((void *)v48 + 2)) {
            goto LABEL_69;
          }
          if (v33 < 0) {
            goto LABEL_70;
          }
          *(void *)&v36[8 * v37++ + v35] = *(void *)&v48[8 * v39 + 32];
          if (v41 == v37) {
            goto LABEL_48;
          }
        }

        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }

LABEL_48:
      ++v34;
      v33 += v32;
      v35 += 8 * v41;
      if (v34 == v3) {
        goto LABEL_64;
      }
    }

    goto LABEL_84;
  }

          __break(1u);
          goto LABEL_49;
        }

LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

void sub_1876330F4()
{
  if (*((_BYTE *)v0 + 16) != 1)
  {
LABEL_51:
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v40 = 5;
    *(_BYTE *)(v40 + 4) = 1;
    swift_willThrow();
    return;
  }

  uint64_t v2 = v0[3];
  uint64_t v42 = *(void *)(v2 + 16);
  if (!v42)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  uint64_t v3 = v1;
  uint64_t v4 = *v0;
  int64_t v5 = v0[1];
  uint64_t v6 = v2 + 32;
  swift_retain();
  uint64_t v7 = sub_187649A28();
  swift_release();
  unint64_t v8 = sub_18767B7D8(v5);
  if (!v8)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  uint64_t v9 = v8;
  if (v7 == 0x8000000000000000LL && v8 == -1LL) {
    goto LABEL_75;
  }
  uint64_t v46 = v7;
  unint64_t v11 = sub_18767B7D8(v5);
  int64_t v49 = v11 - v5;
  if (__OFSUB__(v11, v5)) {
    goto LABEL_73;
  }
  uint64_t v12 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    return;
  }

  uint64_t v13 = v46 / v9;
  unsigned int v14 = sub_18765B25C(0LL, v12 & ~(v12 >> 63), 0, MEMORY[0x18961AFE8]);
  sub_18769A52C();
  unint64_t v15 = 0LL;
  uint64_t v43 = v2;
  uint64_t v41 = v2 + 32;
  uint64_t v48 = v46 / v9;
  while (2)
  {
    if (v15 >= *(void *)(v2 + 16)) {
      goto LABEL_71;
    }
    unint64_t v44 = v15;
    uint64_t v16 = *(void *)(v6 + 8 * v15);
    uint64_t v17 = cche_param_ctx_polynomial_degree();
    swift_retain_n();
    swift_retain_n();
    uint64_t v51 = sub_18763463C(v17, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      return;
    }

    swift_release();
    swift_release_n();
    if (v13 < 0) {
      goto LABEL_72;
    }
    uint64_t v18 = v14;
    char v19 = 0;
    uint64_t v20 = 0LL;
    unint64_t v45 = v44 + 1;
    do
    {
      char v47 = v19;
      if (v13)
      {
        uint64_t v21 = 0LL;
        uint64_t v50 = v20 * v46;
        while (v13 != v21)
        {
          int64_t v22 = v21 * v5;
          BOOL v23 = __OFADD__(v50, v22);
          uint64_t v24 = v50 + v22;
          if (v23) {
            goto LABEL_57;
          }
          int64_t v25 = v21 * v49;
          uint64_t v26 = v24 + v25;
          if (__OFADD__(v24, v25)) {
            goto LABEL_59;
          }
          int64_t v27 = *((void *)v18 + 2);
          int64_t v28 = v12 - v27;
          if (__OFSUB__(v12, v27)) {
            goto LABEL_60;
          }
          if (v28 >= v5) {
            int64_t v28 = v5;
          }
          uint64_t v29 = v26 + v28;
          if (__OFADD__(v26, v28)) {
            goto LABEL_61;
          }
          uint64_t v30 = v28;
          if (v29 < v26) {
            goto LABEL_62;
          }
          if (v26 < 0) {
            goto LABEL_63;
          }
          unint64_t v31 = *(void *)(v51 + 16);
          int64_t v32 = v5;
          uint64_t v33 = v12;
          int64_t v34 = v27 + v30;
          if (__OFADD__(v27, v30)) {
            goto LABEL_65;
          }
          uint64_t v35 = v18;
          unint64_t v36 = *((void *)v18 + 3);
          sub_18769A52C();
          if (v34 > (uint64_t)(v36 >> 1))
          {
            if (v27 <= v34) {
              int64_t v39 = v27 + v30;
            }
            else {
              int64_t v39 = v27;
            }
            uint64_t v18 = sub_18765B25C((char *)1, v39, 1, v35);
            int64_t v27 = *((void *)v18 + 2);
            uint64_t v12 = v33;
          }

          else
          {
            uint64_t v12 = v33;
            uint64_t v18 = v35;
          }

          int64_t v5 = v32;
          if (v29 == v26)
          {
            uint64_t v13 = v48;
            if (v30 > 0) {
              goto LABEL_66;
            }
          }

          else
          {
            uint64_t v13 = v48;
            if ((*((void *)v18 + 3) >> 1) - v27 < v30) {
              goto LABEL_67;
            }
            memcpy(&v18[8 * v27 + 32], (const void *)(v51 + 32 + 8 * v26), 8 * v30);
            if (v30 >= 1)
            {
              uint64_t v37 = *((void *)v18 + 2);
              BOOL v23 = __OFADD__(v37, v30);
              uint64_t v38 = v37 + v30;
              if (v23) {
                goto LABEL_68;
              }
              *((void *)v18 + 2) = v38;
            }
          }

          swift_bridgeObjectRelease();
          if (*((void *)v18 + 2) == v12)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return;
          }

          if (v13 == ++v21) {
            goto LABEL_15;
          }
        }

        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }

LABEL_15:
      char v19 = 1;
      uint64_t v20 = 1LL;
    }

    while ((v47 & 1) == 0);
    unsigned int v14 = v18;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = v43;
    uint64_t v3 = 0LL;
    unint64_t v15 = v45;
    uint64_t v6 = v41;
    if (v45 != v42) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease();
  if (*((void *)v14 + 2) != v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }

          __break(1u);
          goto LABEL_16;
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  BOOL v23 = *(void *)(v33 + 72);
  if (v23)
  {
    uint64_t v24 = (void *)sub_187628DAC(v23);
    uint64_t v4 = (uint64_t)v34;
    uint64_t v13 = v35;
    goto LABEL_20;
  }

  uint64_t v4 = (uint64_t)v34;
  uint64_t v13 = v35;
  if (qword_18C4C70B0 != -1) {
    goto LABEL_28;
  }
LABEL_19:
  uint64_t v24 = off_18C4C70D0;
  swift_retain();
LABEL_20:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v29 = sub_187681C6C((uint64_t)v24);
    swift_release();
    uint64_t v24 = (void *)v29;
  }

  swift_beginAccess();
  sub_187694504((uint64_t)v24 + 32);
  swift_release();
  if (!v13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v32, v4, v31);
  }
  return MEMORY[0x1895AB038](v39, -1LL, -1LL);
}

uint64_t sub_187633558(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  int64_t v4 = a2[1];
  int v5 = *a3;
  uint64_t result = cche_encryption_params_polynomial_degree();
  uint64_t v7 = result >> 1;
  if (v5)
  {
    if (v5 != 1)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = 5;
      *(_BYTE *)(v8 + 4) = 1;
      return swift_willThrow();
    }

    uint64_t result = sub_18767B7D8(v4);
    if (result) {
      return sub_18765C140(2 * (v7 / result), v3);
    }
    __break(1u);
    goto LABEL_12;
  }

  if (!v3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  if (v7 / v3 >= 1) {
    return sub_18765C140(2 * (v7 / v3), v4);
  }
  unsigned int v9 = cche_encryption_params_polynomial_degree();
  uint64_t v10 = sub_18765C140(v9, v3);
  uint64_t result = v4 * v10;
  return result;
}

char *sub_18763366C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = cche_param_ctx_polynomial_degree();
  uint64_t v12 = sub_187649A28();
  char v13 = *(_BYTE *)(a1 + 41);
  v65[0] = *(_BYTE *)(a1 + 40);
  v65[1] = v13;
  v62[0] = v8;
  v62[1] = v9;
  unsigned __int8 v64 = 0;
  uint64_t v14 = sub_187633558((uint64_t)v65, v62, &v64);
  if (v4) {
    return v15;
  }
  uint64_t v55 = v12;
  unint64_t v58 = v10;
  int v63 = a4;
  uint64_t v56 = a1;
  unint64_t v16 = v11;
  int64_t v17 = MEMORY[0x18961AFE8];
  v59 = sub_18765B35C(0LL, v14 & ~(v14 >> 63), 0, MEMORY[0x18961AFE8]);
  int64_t v61 = v11;
  uint64_t v18 = sub_18765B25C(0LL, v11, 0, (char *)v17);
  if (v9 < 0) {
    goto LABEL_101;
  }
  uint64_t v20 = v18;
  if (v9)
  {
    if (v8 < 0) {
      goto LABEL_105;
    }
    uint64_t v21 = 0LL;
    uint64_t v57 = a3 + 32;
    int64_t v17 = v55 + 1;
    int64_t v19 = __OFADD__(v55, 1LL);
    char v52 = v19;
    int64_t v53 = v55 + 1;
    uint64_t v54 = a3;
    unint64_t v11 = v10;
    while (1)
    {
      if (v21 == v9)
      {
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        unint64_t v15 = sub_18765B35C((char *)((unint64_t)v19 > 1), v17, 1, v15);
LABEL_91:
        *((void *)v15 + 2) = v17;
        *(void *)&v15[8 * v11 + 32] = v16;
        return v15;
      }

      uint64_t v60 = v21;
      if (v8)
      {
        int64_t v17 = 0LL;
        int64_t v22 = *(void *)(a3 + 16);
        while (v8 != v17)
        {
          int64_t v19 = v17 * v9;
          BOOL v23 = __OFADD__(v19, v21);
          v19 += v21;
          if (v23) {
            goto LABEL_95;
          }
          if (v19 < 0) {
            goto LABEL_96;
          }
          if (v19 >= v22) {
            goto LABEL_97;
          }
          unint64_t v16 = *(void *)(v57 + 8 * v19);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v20 = sub_18765B25C(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
          }
          unint64_t v25 = *((void *)v20 + 2);
          unint64_t v24 = *((void *)v20 + 3);
          unint64_t v26 = v25 + 1;
          if (v25 >= v24 >> 1) {
            uint64_t v20 = sub_18765B25C((char *)(v24 > 1), v25 + 1, 1, v20);
          }
          *((void *)v20 + 2) = v26;
          *(void *)&v20[8 * v25 + 32] = v16;
          int64_t v19 = v61;
          if (v26 == v61)
          {
            unint64_t v11 = v58;
            unint64_t v16 = cche_plaintext_sizeof();
            type metadata accessor for HE.ObjectStorage();
            int64_t v27 = (void *)swift_allocObject();
            v27[2] = v56;
            sub_18769A52C();
            swift_retain();
            uint64_t v28 = swift_slowAlloc();
            v27[3] = v28;
            v27[4] = v28 + v16;
            int64_t v19 = HIDWORD(*((void *)v20 + 2));
            if (v19) {
              goto LABEL_98;
            }
            if ((v63 & 1) != 0)
            {
              int v29 = cche_encode_simd_reduced_int64();
              if (v29) {
                goto LABEL_86;
              }
            }

            else
            {
              int v29 = cche_encode_simd_int64();
              if (v29) {
                goto LABEL_86;
              }
            }

            swift_bridgeObjectRelease();
            uint64_t v30 = v59;
            unint64_t v16 = *((void *)v59 + 2);
            unint64_t v31 = *((void *)v59 + 3);
            if (v16 >= v31 >> 1) {
              uint64_t v30 = sub_18765B35C((char *)(v31 > 1), v16 + 1, 1, v59);
            }
            *((void *)v30 + 2) = v16 + 1;
            v59 = v30;
            *(void *)&v30[8 * v16 + 32] = v27;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              int64_t v32 = *((void *)v20 + 2);
              uint64_t v21 = v60;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v20 = sub_18765B25C(0LL, v32, 1, v20);
              }
              if (v32)
              {
                unint64_t v16 = *((void *)v20 + 2) - v32;
                memmove(v20 + 32, &v20[8 * v32 + 32], 8 * v16);
                *((void *)v20 + 2) = v16;
              }
            }

            else
            {
              unint64_t v16 = *((void *)v20 + 3);
              uint64_t v33 = (void *)MEMORY[0x18961AFE8];
              uint64_t v21 = v60;
              if (v16 >= 2)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9B10);
                uint64_t v33 = (void *)swift_allocObject();
                int64_t v34 = _swift_stdlib_malloc_size(v33);
                uint64_t v35 = v34 - 32;
                if (v34 < 32) {
                  uint64_t v35 = v34 - 25;
                }
                v33[2] = 0LL;
                v33[3] = 2 * (v35 >> 3);
              }

              swift_bridgeObjectRelease();
              uint64_t v20 = (char *)v33;
            }
          }

          else
          {
            unint64_t v11 = v58;
            uint64_t v21 = v60;
          }

          if (v8 == ++v17) {
            goto LABEL_44;
          }
        }

        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }

LABEL_44:
      unint64_t v16 = *((void *)v20 + 2);
      int64_t v19 = v16 + v8;
      if (__OFADD__(v16, v8)) {
        goto LABEL_100;
      }
      a3 = v54;
      int64_t v17 = v55 + 1;
      if ((uint64_t)v16 < v55)
      {
        if ((v52 & 1) != 0) {
          goto LABEL_102;
        }
        if (v53 > v61) {
          goto LABEL_103;
        }
        if (v19 >= v53 && v19 <= v61) {
          break;
        }
      }

      if (v19 <= v61) {
        goto LABEL_11;
      }
      unint64_t v16 = cche_plaintext_sizeof();
      type metadata accessor for HE.ObjectStorage();
      uint64_t v38 = (void *)swift_allocObject();
      uint64_t v38[2] = v56;
      swift_retain();
      sub_18769A52C();
      uint64_t v39 = swift_slowAlloc();
      v38[3] = v39;
      v38[4] = v39 + v16;
      int64_t v19 = HIDWORD(*((void *)v20 + 2));
      if (v19) {
        goto LABEL_104;
      }
      if ((v63 & 1) != 0) {
        int v40 = cche_encode_simd_reduced_int64();
      }
      else {
        int v40 = cche_encode_simd_int64();
      }
      int v29 = v40;
      if (v40)
      {
LABEL_86:
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v50 = v29;
        *(_BYTE *)(v50 + 4) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_release();
        return v15;
      }

      swift_bridgeObjectRelease();
      uint64_t v41 = v59;
      unint64_t v16 = *((void *)v59 + 2);
      unint64_t v42 = *((void *)v59 + 3);
      if (v16 >= v42 >> 1) {
        uint64_t v41 = sub_18765B35C((char *)(v42 > 1), v16 + 1, 1, v59);
      }
      *((void *)v41 + 2) = v16 + 1;
      v59 = v41;
      *(void *)&v41[8 * v16 + 32] = v38;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        int64_t v43 = *((void *)v20 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = sub_18765B25C(0LL, v43, 1, v20);
        }
        uint64_t v21 = v60;
        if (v43)
        {
          unint64_t v16 = *((void *)v20 + 2) - v43;
          memmove(v20 + 32, &v20[8 * v43 + 32], 8 * v16);
          *((void *)v20 + 2) = v16;
        }

        goto LABEL_11;
      }

      unint64_t v16 = *((void *)v20 + 3);
      unint64_t v44 = (void *)MEMORY[0x18961AFE8];
      if (v16 >= 2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9B10);
        unint64_t v44 = (void *)swift_allocObject();
        int64_t v45 = _swift_stdlib_malloc_size(v44);
        uint64_t v46 = v45 - 32;
        if (v45 < 32) {
          uint64_t v46 = v45 - 25;
        }
        v44[2] = 0LL;
        v44[3] = 2 * (v46 >> 3);
      }

      swift_bridgeObjectRelease();
      uint64_t v20 = (char *)v44;
LABEL_10:
      uint64_t v21 = v60;
LABEL_11:
      if (++v21 == v9) {
        goto LABEL_87;
      }
    }

    int64_t v19 = v61 - v16;
    uint64_t v36 = (uint64_t)(v61 - v16) % v55;
    if (v36 < 0) {
      goto LABEL_106;
    }
    if (v36)
    {
      uint64_t v37 = sub_18769A550();
      *(void *)(v37 + 16) = v36;
      bzero((void *)(v37 + 32), 8 * v36);
      unint64_t v16 = *((void *)v20 + 2);
      int64_t v17 = v16 + v36;
      if (__OFADD__(v16, v36)) {
        goto LABEL_107;
      }
    }

    else
    {
      uint64_t v37 = MEMORY[0x18961AFE8];
      uint64_t v36 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      int64_t v17 = v16 + v36;
      if (__OFADD__(v16, v36)) {
        goto LABEL_107;
      }
    }

    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v17 <= *((void *)v20 + 3) >> 1)
    {
      int64_t v19 = *(void *)(v37 + 16);
      if (v19) {
        goto LABEL_76;
      }
    }

    else
    {
      else {
        int64_t v49 = v16;
      }
      uint64_t v20 = sub_18765B25C(isUniquelyReferenced_nonNull_native, v49, 1, v20);
      int64_t v19 = *(void *)(v37 + 16);
      if (v19)
      {
LABEL_76:
        int64_t v19 = *((void *)v20 + 2);
        if ((*((void *)v20 + 3) >> 1) - v19 < v36) {
          goto LABEL_109;
        }
        memcpy(&v20[8 * v19 + 32], (const void *)(v37 + 32), 8 * v36);
        if (v36)
        {
          uint64_t v48 = *((void *)v20 + 2);
          BOOL v23 = __OFADD__(v48, v36);
          int64_t v19 = v48 + v36;
          if (v23) {
            goto LABEL_110;
          }
          *((void *)v20 + 2) = v19;
        }

        sub_187647FC0((uint64_t)v73);
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }

      sub_187647FC0((uint64_t)v73);
      uint64_t v8 = (char *)v72;
      uint64_t v2 = v55;
      uint64_t v3 = v56;
      int v5 = v54;
      goto LABEL_42;
    }

  __break(1u);
  return result;
}

LABEL_85:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }

    if (v36) {
      goto LABEL_108;
    }
    goto LABEL_85;
  }

LABEL_87:
  if (*((void *)v20 + 2))
  {
    sub_187649A94((uint64_t)v20, v63 & 1, v62);
    swift_bridgeObjectRelease();
    unint64_t v16 = v62[0];
    unint64_t v15 = v59;
    unint64_t v11 = *((void *)v59 + 2);
    int64_t v19 = *((void *)v59 + 3);
    int64_t v17 = v11 + 1;
    goto LABEL_91;
  }

  swift_bridgeObjectRelease();
  return v59;
}

unint64_t sub_187633E24(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_18765B25C((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }

  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }

char *sub_187633F28(unint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v6 = v4;
  int v67 = a4;
  uint64_t v8 = *a2;
  int64_t v9 = a2[1];
  unsigned int v10 = cche_param_ctx_polynomial_degree();
  uint64_t v11 = sub_187649A28();
  if (v11 < v9)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = 1;
    *(_BYTE *)(v12 + 4) = 1;
    swift_willThrow();
    return v5;
  }

  uint64_t v13 = v11;
  char v14 = *(_BYTE *)(a1 + 41);
  LOBYTE(v65) = *(_BYTE *)(a1 + 40);
  BYTE1(v65) = v14;
  v66[0] = v8;
  v66[1] = v9;
  unsigned __int8 v68 = 1;
  uint64_t v15 = sub_187633558((uint64_t)&v65, v66, &v68);
  if (v4) {
    return v5;
  }
  uint64_t v60 = v8;
  int64_t v5 = sub_18765B35C(0LL, v15 & ~(v15 >> 63), 0, MEMORY[0x18961AFE8]);
  unint64_t v17 = sub_18767B7D8(v9);
  int64_t v19 = v17 - v9;
  if (__OFSUB__(v17, v9))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  if (v19 < 0)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  if (v19)
  {
    uint64_t v20 = sub_18769A550();
    *(void *)(v20 + 16) = v19;
    uint64_t v64 = v20;
    bzero((void *)(v20 + 32), 8 * v19);
  }

  else
  {
    uint64_t v64 = MEMORY[0x18961AFE8];
  }

  uint64_t v21 = sub_18765B25C(0LL, v10, 0, MEMORY[0x18961AFE8]);
  v66[0] = (uint64_t)v21;
  uint64_t v22 = v8;
  if (v8 < 0) {
    goto LABEL_94;
  }
  unint64_t v59 = v10;
  if (!v8)
  {
    char v47 = v21;
    swift_bridgeObjectRelease();
    uint64_t v18 = *((void *)v47 + 2);
    if (v18) {
      goto LABEL_65;
    }
LABEL_71:
    swift_bridgeObjectRelease();
    return v5;
  }

  unint64_t v57 = 0LL;
  unint64_t v58 = a1;
  BOOL v23 = (char *)v9;
  if ((v9 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = 0LL;
    a1 = 0LL;
    uint64_t v18 = v64 + 32;
    uint64_t v62 = v13;
    do
    {
      if (a1 == v22) {
        goto LABEL_83;
      }
      int64_t v19 = v66[0];
      int v63 = v5;
      if (v23)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v19 = (int64_t)sub_18765B25C(0LL, *(void *)(v19 + 16) + 1LL, 1, (char *)v19);
        }
        unint64_t v26 = *(void *)(a3 + 16);
        BOOL v27 = v26 >= v6;
        uint64_t v18 = v26 - v6;
        if (v27) {
          uint64_t v28 = v18;
        }
        else {
          uint64_t v28 = 0LL;
        }
        int64_t v5 = v23;
        while (v28)
        {
          uint64_t v29 = *(void *)(a3 + 32 + 8 * v6);
          unint64_t v31 = *(void *)(v19 + 16);
          unint64_t v30 = *(void *)(v19 + 24);
          int64_t v32 = v31 + 1;
          if (v31 >= v30 >> 1) {
            int64_t v19 = (int64_t)sub_18765B25C((char *)(v30 > 1), v31 + 1, 1, (char *)v19);
          }
          *(void *)(v19 + 16) = v32;
          uint64_t v18 = v19 + 8 * v31;
          *(void *)(v18 + 32) = v29;
          v66[0] = v19;
          ++v6;
          --v28;
          if (!--v5) {
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }

      int64_t v32 = *(void *)(v66[0] + 16);
LABEL_33:
      uint64_t v33 = *(void *)(v64 + 16);
      int64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_84;
      }
      sub_18769A52C();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v34 > *(void *)(v19 + 24) >> 1)
      {
        if (v32 <= v34) {
          int64_t v36 = v32 + v33;
        }
        else {
          int64_t v36 = v32;
        }
        int64_t v19 = (int64_t)sub_18765B25C(isUniquelyReferenced_nonNull_native, v36, 1, (char *)v19);
      }

      BOOL v23 = (char *)v9;
      int64_t v5 = v63;
      uint64_t v18 = *(void *)(v64 + 16);
      if (v18)
      {
        uint64_t v18 = *(void *)(v19 + 16);
        if ((*(void *)(v19 + 24) >> 1) - v18 < v33) {
          goto LABEL_87;
        }
        memcpy((void *)(v19 + 8 * v18 + 32), (const void *)(v64 + 32), 8 * v33);
        if (v33)
        {
          uint64_t v37 = *(void *)(v19 + 16);
          BOOL v38 = __OFADD__(v37, v33);
          uint64_t v18 = v37 + v33;
          if (v38) {
            goto LABEL_90;
          }
          *(void *)(v19 + 16) = v18;
        }
      }

      else if (v33)
      {
        goto LABEL_85;
      }

      swift_bridgeObjectRelease();
      v66[0] = v19;
      uint64_t v18 = *(void *)(v19 + 16);
      uint64_t v13 = v62;
      if (v62 > v18)
      {
        if (__OFADD__(v18, v9)) {
          goto LABEL_88;
        }
        if (v62 < v18 + v9)
        {
          if (v62 - v18 < 0) {
            goto LABEL_91;
          }
          sub_18762E900(v62 - v18, 0LL);
          int64_t v19 = v66[0];
          uint64_t v18 = *(void *)(v66[0] + 16);
        }
      }

      BOOL v38 = __OFADD__(v18, v9);
      v18 += v9;
      if (v38) {
        goto LABEL_86;
      }
      if (v18 > (uint64_t)v59)
      {
        uint64_t v39 = cche_plaintext_sizeof();
        type metadata accessor for HE.ObjectStorage();
        int v40 = (void *)swift_allocObject();
        v40[2] = v58;
        sub_18769A52C();
        swift_retain();
        uint64_t v41 = swift_slowAlloc();
        v40[3] = v41;
        v40[4] = v41 + v39;
        uint64_t v18 = HIDWORD(*(void *)(v19 + 16));
        if (v18) {
          goto LABEL_89;
        }
        if ((v67 & 1) != 0) {
          int v42 = cche_encode_simd_reduced_int64();
        }
        else {
          int v42 = cche_encode_simd_int64();
        }
        int v43 = v42;
        if (v42)
        {
          sub_18762D1DC();
          swift_allocError();
          *(_DWORD *)uint64_t v51 = v43;
          *(_BYTE *)(v51 + 4) = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v5;
        }

        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          sub_187633E24(0LL, *(void *)(v19 + 16));
        }

        else
        {
          unint64_t v44 = (void *)MEMORY[0x18961AFE8];
          if (*(void *)(v19 + 24) >= 2uLL)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9B10);
            unint64_t v44 = (void *)swift_allocObject();
            int64_t v45 = _swift_stdlib_malloc_size(v44);
            uint64_t v46 = v45 - 32;
            if (v45 < 32) {
              uint64_t v46 = v45 - 25;
            }
            v44[2] = 0LL;
            v44[3] = 2 * (v46 >> 3);
          }

          v66[0] = (uint64_t)v44;
          swift_bridgeObjectRelease();
        }

        unint64_t v25 = *((void *)v63 + 2);
        unint64_t v24 = *((void *)v63 + 3);
        int64_t v19 = v25 + 1;
        swift_retain();
        if (v25 >= v24 >> 1) {
          int64_t v5 = sub_18765B35C((char *)(v24 > 1), v25 + 1, 1, v63);
        }
        *((void *)v5 + 2) = v19;
        *(void *)&v5[8 * v25 + 32] = v40;
        swift_release();
        uint64_t v13 = v62;
        BOOL v23 = (char *)v9;
      }

      ++a1;
      uint64_t v22 = v60;
    }

    while (a1 != v60);
    while (1)
    {
      swift_bridgeObjectRelease();
      unint64_t v6 = v57;
      a1 = v58;
      uint64_t v18 = *(void *)(v66[0] + 16);
      if (!v18) {
        goto LABEL_71;
      }
LABEL_65:
      if (!v13) {
        goto LABEL_96;
      }
      uint64_t v48 = v18 % v13;
      if (!(v18 % v13))
      {
        uint64_t v50 = 0LL;
LABEL_74:
        int64_t v19 = (int64_t)v66;
        sub_18762E900(v50, 0LL);
        uint64_t v52 = 0LL;
        uint64_t v53 = v66[0];
        unint64_t v54 = *(void *)(v66[0] + 16);
        if (v13 < (uint64_t)v54)
        {
          uint64_t v52 = v13;
          if (v13 < 0) {
            goto LABEL_98;
          }
        }

        sub_18769A52C();
        if (v54 < v59)
        {
          do
          {
            uint64_t v55 = sub_18769A52C();
            sub_18762F0F0(v55, v53 + 32, v52, (2 * v54) | 1);
            swift_bridgeObjectRelease();
          }

          while (*(void *)(v66[0] + 16) < v59);
        }

        uint64_t v56 = sub_18769A52C();
        sub_187649A94(v56, v67 & 1, &v65);
        if (v6)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v5;
        }

        swift_bridgeObjectRelease();
        unint64_t v6 = v65;
        a1 = *((void *)v5 + 2);
        uint64_t v18 = *((void *)v5 + 3);
        int64_t v19 = a1 + 1;
        goto LABEL_81;
      }

      unint64_t v49 = sub_18767B7D8(v18 % v13);
      BOOL v38 = __OFSUB__(v49, v48);
      uint64_t v50 = v49 - v48;
      if (v38) {
        goto LABEL_97;
      }
      if ((v50 & 0x8000000000000000LL) == 0) {
        goto LABEL_74;
      }
      __break(1u);
    }
  }

LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  int64_t v5 = sub_18765B35C((char *)((unint64_t)v18 > 1), v19, 1, v5);
LABEL_81:
  *((void *)v5 + 2) = v19;
  *(void *)&v5[8 * a1 + 32] = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_18763463C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v3 = result;
  if (result)
  {
    uint64_t result = sub_18769A550();
    *(void *)(result + 16) = v3;
    if (*(void *)(a2 + 24))
    {
      if (!HIDWORD(v3))
      {
        uint64_t v4 = result;
LABEL_8:
        int v5 = cche_decode_simd_int64();
        if (v5)
        {
          int v6 = v5;
          sub_18762D1DC();
          swift_allocError();
          *(_DWORD *)uint64_t v7 = v6;
          *(_BYTE *)(v7 + 4) = 0;
          swift_willThrow();
          *(void *)(v4 + 16) = 0LL;
          swift_bridgeObjectRelease();
          return v4;
        }

        uint64_t result = cche_param_ctx_polynomial_degree();
        if (result <= v3)
        {
          *(void *)(v4 + 16) = result;
          return v4;
        }

        goto LABEL_15;
      }

uint64_t sub_187634744(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proof(319LL, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1876347F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v21 = v4 + v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 & 0xF8 | 7LL;
  uint64_t v10 = *(void *)(v7 + 64) + 7LL;
  int v11 = (v8 | v5) & 0x100000;
  if ((v9 | v5) != 7
    || v11 != 0
    || (v10 & 0xFFFFFFFFFFFFFFF8LL)
     + ((v4 + ((v4 + v5) & ~(unint64_t)v5) + v9) & ~v9)
     + 8 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    unint64_t v17 = (uint64_t *)(v14 + (((v9 | v5) + 16) & ~(v9 | v5)));
    swift_retain();
  }

  else
  {
    unint64_t v15 = ~(unint64_t)v5;
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16);
    unint64_t v17 = a1;
    uint64_t v22 = v6;
    v16(a1, a2, AssociatedTypeWitness);
    unint64_t v18 = ((unint64_t)a1 + v21) & v15;
    unint64_t v19 = ((unint64_t)a2 + v21) & v15;
    v16((uint64_t *)v18, (uint64_t *)v19, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( (v18 + v4 + v9) & ~v9,  (v19 + v4 + v9) & ~v9,  v22);
    *(void *)((v10 + ((v18 + v4 + v9) & ~v9)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v10 + ((v19 + v4 + v9) & ~v9)) & 0xFFFFFFFFFFFFF8LL);
    sub_18769A52C();
  }

  return v17;
}

uint64_t sub_187634A0C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v3 + 64);
  unint64_t v6 = (v5 + a1 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v4(v6, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7LL;
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v6 + v5 + v9) & ~v9, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_187634B58(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7LL;
  uint64_t v14 = (v7 + v13 + v9) & ~v13;
  uint64_t v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  *(void *)((*(void *)(v12 + 64) + 7LL + v14) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v12 + 64) + 7LL + v15) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  return a1;
}

uint64_t sub_187634CE0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7LL;
  uint64_t v14 = (v7 + v13 + v9) & ~v13;
  uint64_t v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v14, v15, v11);
  *(void *)((*(void *)(v12 + 64) + 7LL + v14) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v12 + 64)
                                                                                       + 7LL
                                                                                       + v15) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187634E74(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7LL;
  uint64_t v14 = (v7 + v13 + v9) & ~v13;
  uint64_t v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v15, v11);
  *(void *)((*(void *)(v12 + 64) + 7LL + v14) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v12 + 64) + 7LL + v15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_187634FF8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7LL;
  uint64_t v14 = (v7 + v13 + v9) & ~v13;
  uint64_t v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v14, v15, v11);
  *(void *)((*(void *)(v12 + 64) + 7LL + v14) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v12 + 64)
                                                                                       + 7LL
                                                                                       + v15) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187635184(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = v7;
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = v13 + v14;
  uint64_t v16 = *(_DWORD *)(v8 + 80) & 0xF8 | 7LL;
  uint64_t v17 = *(void *)(v8 + 64) + 7LL;
  if (v11 < a2)
  {
    if ((((v17 & 0xFFFFFFFFFFFFFFF8LL) + ((v13 + (v15 & ~v14) + v16) & ~v16) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v11 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0LL;
    }
    __asm { BR              X4 }
  }

  if (v6 >= v10)
  {
    BOOL v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v22 = a1;
    uint64_t v9 = v6;
    uint64_t v12 = AssociatedTypeWitness;
    return v23(v22, v9, v12);
  }

  uint64_t v22 = (((v15 + a1) & ~v14) + v13 + v16) & ~v16;
  if (v9 >= 0x7FFFFFFF)
  {
    BOOL v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v23(v22, v9, v12);
  }

  unint64_t v24 = *(void *)((v17 + v22) & 0xFFFFFFFFFFFFF8LL);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  return (v24 + 1);
}

void sub_1876353F0(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = ((*(void *)(v6 + 64)
        + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + (*(_DWORD *)(v8 + 80) & 0xF8LL | 7)) & ~(*(_DWORD *)(v8 + 80) & 0xF8LL | 7))
      + ((*(void *)(v8 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL)
      + 8;
  if (v10 >= a3)
  {
    int v14 = 0u;
    if (a2 <= v10) {
      goto LABEL_20;
    }
  }

  else
  {
    if ((_DWORD)v11) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = a3 - v10 + 1;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (a2 <= v10) {
LABEL_20:
    }
      __asm { BR              X0 }
  }

  if ((_DWORD)v11)
  {
    unsigned int v15 = ~v10 + a2;
    bzero(a1, v11);
    *a1 = v15;
  }

  __asm { BR              X10 }

void sub_1876355D4()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1876356A8LL);
}

void sub_1876355DC()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x1876355E4LL);
  }
  JUMPOUT(0x1876356A8LL);
}

void sub_187635654()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1876356A8LL);
}

void sub_18763565C()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1876356A8LL);
}

uint64_t sub_187635664(uint64_t a1, size_t a2)
{
  *(_WORD *)(v12 + v15) = 0;
  if (!(_DWORD)v11) {
    goto LABEL_7;
  }
  if (v14 < v5)
  {
    uint64_t v2 = (_DWORD *)((((v8 + v12) & v10) + v6 + v7) & v9);
    if ((_DWORD)a2)
    {
      int v3 = ~v5 + v11;
      bzero(v2, a2);
      *uint64_t v2 = v3;
    }

uint64_t _s16EncryptedRequestVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s16EncryptedRequestVMn);
}

void sub_1876356D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x18763581CLL);
}

uint64_t sub_187635850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[2] = *MEMORY[0x1895F89C0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CF8);
  uint64_t result = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  v10[0] = a1;
  v10[1] = a2;
  if (a3)
  {
    MEMORY[0x1895F8858](result);
    *(void *)&v9[-32] = v10;
    *(void *)&v9[-24] = a3;
    *(void *)&v9[-16] = a4;
    *(void *)&v9[-8] = a3;
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_187635BB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v7 = MEMORY[0x1895F8858](result);
    MEMORY[0x1895F8858](v7);
    return sub_187669724(v5, v6, sub_1876397C8);
  }

  return result;
}

void CKSecretSharing.ShamirShare.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_187635CFC(uint64_t a1@<X8>)
{
  if (BYTE6(v1) < 6uLL)
  {
    unint64_t v11 = a1 | 0x8000000000000000LL;
    uint64_t v12 = 31LL;
  }

  else
  {
    sub_187623A28(v2, v1);
    sub_187635F44(v2, v1);
    __int16 v7 = v6;
    sub_187623C58(v2, v1);
    if ((v7 & 0x100) != 0)
    {
      __break(1u);
      JUMPOUT(0x187635EF0LL);
    }

    if (v7 == 1)
    {
      unsigned int v14 = 0;
      sub_187623A28(v2, v1);
      sub_18763608C(1LL, v2, v1);
      sub_1876356D4(4LL, v15[0], v15[1]);
      __int128 v8 = v16;
      sub_187635850(v16, *((uint64_t *)&v16 + 1), (uint64_t)&v14, (uint64_t)v15);
      sub_187623C58(v8, *((unint64_t *)&v8 + 1));
      unsigned int v9 = bswap32(v14);
      sub_18763608C(5LL, v2, v1);
      __int128 v10 = v16;
      *(_BYTE *)uint64_t v3 = 1;
      *(_DWORD *)(v3 + 4) = v9;
      *(_OWORD *)(v3 + 8) = v10;
      return;
    }

    uint64_t v4 = v5 + 10;
    unint64_t v11 = 0x80000001876A0040LL;
    uint64_t v12 = 35LL;
  }

  sub_187635F00();
  swift_allocError();
  *(_BYTE *)uint64_t v13 = 10;
  *(_DWORD *)(v13 + 4) = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_DWORD *)(v13 + 12) = 0;
  *(_WORD *)(v13 + 16) = 256;
  *(void *)(v13 + 24) = v12;
  *(void *)(v13 + 32) = 0x293A5F2874696E69LL;
  *(void *)(v13 + 40) = 0xE800000000000000LL;
  *(void *)(v13 + 48) = v5 + 77;
  *(void *)(v13 + 56) = 0x800000018769FFD0LL;
  *(void *)(v13 + 64) = v4;
  *(void *)(v13 + 72) = v11;
  swift_willThrow();
  sub_187623C58(v2, v1);
}

unint64_t sub_187635F00()
{
  unint64_t result = qword_18C6D9CD0;
  if (!qword_18C6D9CD0)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for CKSecretSharing.SecretSharingError,  &type metadata for CKSecretSharing.SecretSharingError);
    atomic_store(result, (unint64_t *)&qword_18C6D9CD0);
  }

  return result;
}

void sub_187635F44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t sub_187635F8C(unsigned __int8 a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) != 0) {
    unsigned __int8 v2 = a1;
  }
  else {
    unsigned __int8 v2 = 0;
  }
  return v2 | (((a2 & 0xFF000000000000LL) == 0) << 8);
}

void sub_18763608C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1876361E8LL);
}

uint64_t sub_18763621C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v5 = a3 - a2;
  if (a2) {
    uint64_t v6 = a3 - a2;
  }
  else {
    uint64_t v6 = 0LL;
  }
  unint64_t result = sub_18763841C(0LL, result, v6, a2, a3);
  if ((v7 & 1) != 0)
  {
    unint64_t result = v5;
    if (!a2) {
      return 0LL;
    }
  }

  else if (!a2)
  {
    uint64_t v5 = 0LL;
  }

  if (v5 < result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t CKSecretSharing.ShamirShare.serialize()()
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  char v1 = *v0;
  unsigned int v2 = *((_DWORD *)v0 + 1);
  __int128 v8 = xmmword_18769C9B0;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CD8);
  unint64_t v7 = sub_1876363CC();
  LOBYTE(v5[0]) = v1;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  sub_187699F44();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  unsigned int v4 = bswap32(v2);
  uint64_t v6 = MEMORY[0x1896181D0];
  unint64_t v7 = MEMORY[0x1896071B0];
  v5[0] = &v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1896181D0]);
  sub_187699F50();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  sub_187699FA4();
  return v8;
}

unint64_t sub_1876363CC()
{
  unint64_t result = qword_18C6D9CE0;
  if (!qword_18C6D9CE0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6D9CD8);
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189607388], v1);
    atomic_store(result, (unint64_t *)&qword_18C6D9CE0);
  }

  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void static CKSecretSharing.ShamirShare.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)) {
    sub_187638644(*((void *)a1 + 1), *((void *)a1 + 2));
  }
}

void sub_18763648C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)) {
    sub_187638644(*((void *)a1 + 1), *((void *)a1 + 2));
  }
}

void *sub_1876364BC(uint64_t a1)
{
  unsigned int v2 = v1;
  v1[2] = a1;
  unint64_t v3 = a1 - 0x7FFFFFFF;
  if ((unint64_t)(a1 - 0x7FFFFFFF) >= 0xFFFFFFFF80000003LL)
  {
    ccss_sizeof_parameters_fix();
    uint64_t v9 = swift_slowAlloc();
    v1[3] = v9;
    int v10 = ccss_shamir_parameters_init();
    if (!v10)
    {
      ccss_sizeof_share();
      v1[4] = swift_slowAlloc();
      ccss_sizeof_generator();
      v1[5] = swift_slowAlloc();
      ccss_shamir_share_init();
      return v2;
    }

    int v7 = v10;
    MEMORY[0x1895AB038](v9, -1LL, -1LL);
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    unint64_t v4 = 0LL;
    unint64_t v5 = 0xE000000000000000LL;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v6 = 3;
    uint64_t v8 = 89LL;
  }

  else
  {
    sub_18769A5E0();
    swift_bridgeObjectRelease();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A490();
    unint64_t v4 = 0xD000000000000016LL;
    unint64_t v5 = 0x80000001876A0650LL;
    sub_187635F00();
    swift_allocError();
    int v7 = 0;
    *(_BYTE *)uint64_t v6 = 1;
    uint64_t v8 = 78LL;
  }

  *(_DWORD *)(v6 + 4) = v7;
  *(_BYTE *)(v6 + 8) = v3 < 0xFFFFFFFF80000003LL;
  *(_WORD *)(v6 + 16) = 256;
  *(_DWORD *)(v6 + 12) = 0;
  *(void *)(v6 + 24) = v8;
  *(void *)(v6 + 32) = 0xD00000000000001FLL;
  *(void *)(v6 + 40) = 0x80000001876A0630LL;
  *(void *)(v6 + 48) = 0xD00000000000006ELL;
  *(void *)(v6 + 56) = 0x800000018769FFD0LL;
  *(void *)(v6 + 64) = v4;
  *(void *)(v6 + 72) = v5;
  swift_willThrow();
  _s32CKShamirShareSharedInternalStateCMa();
  swift_deallocPartialClassInstance();
  return v2;
}

uint64_t sub_1876367A4(uint64_t result)
{
  if (result)
  {
    unint64_t result = ccss_shamir_share_generator_deserialize();
    if ((_DWORD)result)
    {
      int v1 = result;
      sub_18769A5E0();
      sub_18769A490();
      sub_18769A6D0();
      sub_18769A490();
      swift_bridgeObjectRelease();
      sub_187635F00();
      swift_allocError();
      *(_BYTE *)uint64_t v2 = 17;
      *(_DWORD *)(v2 + 4) = v1;
      *(_BYTE *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 12) = 0;
      *(_WORD *)(v2 + 16) = 256;
      *(_OWORD *)(v2 + 24) = xmmword_18769CB40;
      *(void *)(v2 + 40) = 0xE800000000000000LL;
      *(void *)(v2 + 48) = 0xD00000000000006ELL;
      *(void *)(v2 + 56) = 0x800000018769FFD0LL;
      *(void *)(v2 + 64) = 0LL;
      *(void *)(v2 + 72) = 0xE000000000000000LL;
      return swift_willThrow();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1876368F0()
{
  int v1 = (void *)v0[5];
  memset_s(v1, 8uLL, 0, 8uLL);
  MEMORY[0x1895AB038](v1, -1LL, -1LL);
  return swift_deallocClassInstance();
}

uint64_t CKSecretSharing.ShamirShareGenerator.init(threshold:secret:supportedPrime:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!v3) {
    __asm { BR              X10 }
  }

  return sub_187623C58(a2, a3);
}

void sub_187636D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (ccrng())
  {
    if (a1) {
      __asm { BR              X10 }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  JUMPOUT(0x187636E78LL);
}

uint64_t CKSecretSharing.ShamirShareGenerator.init(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_187638E80(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

id sub_187636EB4(int a1)
{
  if (!a1)
  {
    sub_187635F00();
    swift_allocError();
    int v6 = 0;
    *(_BYTE *)uint64_t v7 = 1;
    unint64_t v8 = 0xD000000000000022LL;
    unint64_t v9 = 0x80000001876A0440LL;
    uint64_t v10 = 173LL;
    goto LABEL_5;
  }

  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 32);
  int share = ccss_shamir_share_generator_generate_share();
  if (share)
  {
    int v6 = share;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v7 = 3;
    unint64_t v8 = 0xD000000000000041LL;
    unint64_t v9 = 0x80000001876A04A0LL;
    uint64_t v10 = 177LL;
LABEL_5:
    *(_DWORD *)(v7 + 4) = v6;
    *(_BYTE *)(v7 + 8) = a1 == 0;
    *(_WORD *)(v7 + 16) = 256;
    *(_DWORD *)(v7 + 12) = 0;
    *(void *)(v7 + 24) = v10;
    *(void *)(v7 + 32) = 0xD000000000000020LL;
    *(void *)(v7 + 40) = 0x80000001876A0470LL;
    *(void *)(v7 + 48) = 0xD00000000000006ELL;
    *(void *)(v7 + 56) = 0x800000018769FFD0LL;
    *(void *)(v7 + 64) = v8;
    *(void *)(v7 + 72) = v9;
    return (id)swift_willThrow();
  }

  return objc_msgSend(objc_allocWithZone(MEMORY[0x18960F080]), sel_initWithParams_share_, *(void *)(v3 + 24), v4);
}

void CKSecretSharing.ShamirShareGenerator.generateShare(shareIndex:)(int a1@<W0>, uint64_t a2@<X8>)
{
  if ((a1 - 1) > 0x7FFFFFFC)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v13 = 1;
    *(_DWORD *)(v13 + 4) = 0;
    *(_BYTE *)(v13 + 8) = 1;
    *(_DWORD *)(v13 + 12) = 0;
    *(_WORD *)(v13 + 16) = 256;
    *(_OWORD *)(v13 + 24) = xmmword_18769CB50;
    *(void *)(v13 + 40) = 0x80000001876A0170LL;
    *(void *)(v13 + 48) = 0xD00000000000006ELL;
    *(void *)(v13 + 56) = 0x800000018769FFD0LL;
    *(void *)(v13 + 64) = 0LL;
    *(void *)(v13 + 72) = 0xE000000000000000LL;
    swift_willThrow();
  }

  else
  {
    uint64_t v14 = *v2;
    id v5 = sub_187636EB4(a1);
    if (!v3)
    {
      int v6 = v5;
      unsigned int v7 = objc_msgSend(v5, sel_x, v14);
      id v8 = objc_msgSend(v6, sel_y);
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = sub_187699F98();
        uint64_t v12 = v11;

        *(_BYTE *)a2 = 1;
        *(_DWORD *)(a2 + 4) = v7;
        *(void *)(a2 + 8) = v10;
        *(void *)(a2 + 16) = v12;
      }

      else
      {
        __break(1u);
      }
    }
  }

uint64_t CKSecretSharing.ShamirShareGenerator.generateShares(_:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 16LL) > result)
  {
    sub_187635F00();
    id v5 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v4 = 5;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    __int128 v6 = xmmword_18769CB70;
LABEL_5:
    *(_OWORD *)(v4 + 24) = v6;
    *(void *)(v4 + 40) = 0x80000001876A0200LL;
    *(void *)(v4 + 48) = 0xD00000000000006ELL;
    *(void *)(v4 + 56) = 0x800000018769FFD0LL;
    *(void *)(v4 + 64) = 0LL;
    *(void *)(v4 + 72) = 0xE000000000000000LL;
    swift_willThrow();
    goto LABEL_6;
  }

  if (result > 2147483646)
  {
    sub_187635F00();
    id v5 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v4 = 6;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    __int128 v6 = xmmword_18769CB60;
    goto LABEL_5;
  }

  if ((_DWORD)result)
  {
    unint64_t v9 = (result << 32) | 1;
    swift_retain();
    sub_187638BE0(v9);
    id v5 = v2;
    if (!v2)
    {
      uint64_t v3 = v10;
      swift_release();
      return v3;
    }

    swift_release();
LABEL_6:
    id v7 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CE8);
    if (swift_dynamicCast())
    {

      uint64_t v3 = v13;
      if (v14 == 1)
      {
        if (v13 == 1)
        {
          sub_187635F00();
          swift_allocError();
          *(_BYTE *)uint64_t v8 = 1;
          *(_DWORD *)(v8 + 4) = 0;
          *(_BYTE *)(v8 + 8) = 1;
          *(_DWORD *)(v8 + 12) = 0;
          *(_WORD *)(v8 + 16) = 256;
          *(_OWORD *)(v8 + 24) = xmmword_18769CB90;
          *(void *)(v8 + 40) = 0x80000001876A0200LL;
          *(void *)(v8 + 48) = 0xD00000000000006ELL;
          *(void *)(v8 + 56) = 0x800000018769FFD0LL;
          *(void *)(v8 + 64) = 0xD000000000000049LL;
          *(void *)(v8 + 72) = 0x80000001876A0220LL;
        }

        else
        {
          sub_18762D1DC();
          swift_allocError();
          *(_DWORD *)uint64_t v12 = v13;
          *(_BYTE *)(v12 + 4) = 1;
        }
      }

      else
      {
        sub_18769A5E0();
        sub_18769A490();
        sub_18769A664();
        sub_18769A490();
        sub_187635F00();
        swift_allocError();
        *(_BYTE *)uint64_t v11 = 3;
        *(_DWORD *)(v11 + 4) = v13;
        *(_BYTE *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 12) = 0;
        *(_WORD *)(v11 + 16) = 256;
        *(_OWORD *)(v11 + 24) = xmmword_18769CB80;
        *(void *)(v11 + 40) = 0x80000001876A0200LL;
        *(void *)(v11 + 48) = 0xD00000000000006ELL;
        *(void *)(v11 + 56) = 0x800000018769FFD0LL;
        *(void *)(v11 + 64) = 0LL;
        *(void *)(v11 + 72) = 0xE000000000000000LL;
      }

      swift_willThrow();
    }

    return v3;
  }

  __break(1u);
  return result;
}

uint64_t CKSecretSharing.ShamirShareGenerator.serializedData()()
{
  uint64_t v1 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0LL);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = swift_retain();
  sub_187637674(v4, (uint64_t)v3);
  if (!v0)
  {
    sub_187639840( &qword_18C4C7188,  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization,  (uint64_t)&unk_18769DD44);
    uint64_t v1 = sub_18769A0DC();
    sub_187638084((uint64_t)(v3 + 16));
    sub_187639590((uint64_t)v3);
  }

  return v1;
}

uint64_t sub_187637674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v4 = sub_187699F14();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  id v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a2 = 0LL;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_18769C9B0;
  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0LL);
  sub_18769A010();
  uint64_t v32 = 0LL;
  int v8 = ccss_sizeof_shamir_share_generator_serialization();
  char v9 = v8;
  uint64_t v28 = a1;
  if (!v8)
  {
    unint64_t v15 = 0xD00000000000003ALL;
    unint64_t v16 = 0x80000001876A03C0LL;
    int v14 = -7;
    uint64_t v17 = 303LL;
    goto LABEL_5;
  }

  uint64_t v27 = v4;
  uint64_t v10 = swift_slowAlloc();
  uint64_t v11 = v32;
  int v12 = ccss_shamir_share_generator_serialize();
  if (v12)
  {
    int v13 = v12;
    MEMORY[0x1895AB038](v10, -1LL, -1LL);
    unint64_t v30 = 0LL;
    unint64_t v31 = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    int v29 = v13;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    int v14 = 0;
    unint64_t v15 = v30;
    unint64_t v16 = v31;
    uint64_t v17 = 311LL;
LABEL_5:
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v18 = 3;
    *(_DWORD *)(v18 + 4) = v14;
    *(_BYTE *)(v18 + 8) = v9;
    *(_DWORD *)(v18 + 12) = 0;
    *(_WORD *)(v18 + 16) = 256;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = 0x293A5F2874696E69LL;
    *(void *)(v18 + 40) = 0xE800000000000000LL;
    *(void *)(v18 + 48) = 0xD00000000000006ELL;
    *(void *)(v18 + 56) = 0x800000018769FFD0LL;
    *(void *)(v18 + 64) = v15;
    *(void *)(v18 + 72) = v16;
    swift_willThrow();
    swift_release();
    return sub_187639590(a2);
  }

  uint64_t v20 = v27;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x189606B28], v27);
  sub_187699F08();
  if (v11)
  {
    sub_187699ECC();
    swift_allocObject();
    swift_retain();
    uint64_t v21 = sub_187699E78();
    uint64_t v22 = sub_187696BE4(v21, v11);
    unint64_t v24 = v23;
    swift_release();
  }

  else
  {
    unint64_t v25 = (void (*)(uint64_t, void))sub_187699F08();
    v25(v10, 0LL);
    swift_release();
    swift_release();
    uint64_t v22 = 0LL;
    unint64_t v24 = 0xC000000000000000LL;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 8) = *(void *)(v28 + 16);
  sub_187623C58(*(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v22;
  *(void *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 4) = 1;
  return result;
}

void *CKSecretSharing.ShamirShareSecretReconstructor.init(threshold:supportedPrime:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1876364BC(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

void sub_187637A34(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  if (a1 >> 62)
  {
    sub_18769A52C();
    uint64_t v6 = sub_18769A688();
    swift_bridgeObjectRelease();
    if (v6 < v4) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10) < v4)
  {
LABEL_3:
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v5 = 5;
    *(_DWORD *)(v5 + 4) = 0;
    *(_BYTE *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 12) = 0;
    *(_WORD *)(v5 + 16) = 256;
    *(_OWORD *)(v5 + 24) = xmmword_18769CBB0;
    *(void *)(v5 + 40) = 0x80000001876A0320LL;
    *(void *)(v5 + 48) = 0xD00000000000006ELL;
    *(void *)(v5 + 56) = 0x800000018769FFD0LL;
    *(void *)(v5 + 64) = 0xD00000000000002DLL;
    *(void *)(v5 + 72) = 0x80000001876A0350LL;
    swift_willThrow();
    return;
  }

  ccss_sizeof_share_bag();
  uint64_t v7 = swift_slowAlloc();
  ccss_shamir_share_bag_init();
  uint64_t v8 = *(void *)(v3 + 16);
  sub_18769A52C();
  sub_187638A48(v8, a1);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  int64_t v15 = v14 >> 1;
  if (v12 == v14 >> 1)
  {
LABEL_9:
    swift_unknownObjectRelease();
    swift_retain();
    sub_1876289C4(0x10uLL);
    swift_release();
    MEMORY[0x1895AB038](v7, -1LL, -1LL);
  }

  else
  {
    while (v12 < v15)
    {
      id v16 = *(id *)(v10 + 8 * v12);
      objc_msgSend(v16, sel_share);
      int v17 = ccss_shamir_share_bag_add_share();
      if (v17)
      {
        int v18 = v17;
        sub_18769A5E0();
        sub_18769A490();
        sub_18769A6D0();
        sub_18769A490();
        swift_bridgeObjectRelease();
        sub_187635F00();
        swift_allocError();
        *(_BYTE *)uint64_t v19 = 3;
        *(_DWORD *)(v19 + 4) = v18;
        *(_BYTE *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 12) = 0;
        *(_WORD *)(v19 + 16) = 256;
        *(_OWORD *)(v19 + 24) = xmmword_18769CBA0;
        *(void *)(v19 + 40) = 0x80000001876A0320LL;
        *(void *)(v19 + 48) = 0xD00000000000006ELL;
        *(void *)(v19 + 56) = 0x800000018769FFD0LL;
        *(void *)(v19 + 64) = 0LL;
        *(void *)(v19 + 72) = 0xE000000000000000LL;
        swift_willThrow();
        swift_unknownObjectRelease();

        MEMORY[0x1895AB038](v7, -1LL, -1LL);
        return;
      }

      if (v15 == ++v12) {
        goto LABEL_9;
      }
    }

    __break(1u);
  }

unint64_t CKSecretSharing.ShamirShareSecretReconstructor.recoverSecret(shares:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_retain();
  unint64_t v5 = sub_187638D60(a1, v4);
  swift_release();
  sub_187637A34(v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    unint64_t v5 = sub_187628F04(v7);
    swift_release();
  }

  return v5;
}

void sub_187637E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_187637E7C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x187638060LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *uint64_t v37 = (_DWORD)result == 0;
  return result;
}

void sub_187638084(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1876380DC@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t __s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21 = v18;
  LOWORD(v22) = a1;
  BYTE2(v22) = BYTE2(a1);
  HIBYTE(v22) = BYTE3(a1);
  unsigned __int8 v23 = BYTE4(a1);
  unsigned __int8 v24 = BYTE5(a1);
  unsigned __int8 v25 = BYTE6(a1);
  uint64_t result = memset_s(&v21, BYTE6(a1), 0, BYTE6(a1));
  unint64_t v20 = v22 | ((unint64_t)v23 << 32) | ((unint64_t)v24 << 40) | ((unint64_t)v25 << 48);
  *int v17 = v21;
  v17[1] = v20;
  return result;
}

uint64_t sub_18763836C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_187699E90();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v5 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    sub_187699EA8();
    sub_1876367A4(v5);
    return swift_release();
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_18763841C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1876696D0(a1, a3, a4, a5);
  if (a2 > 0)
  {
    return 0LL;
  }

  if (v9 <= 0 && v9 > a2) {
    return 0LL;
  }
LABEL_8:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v11 = a5 - a4;
  if (!a4) {
    uint64_t v11 = 0LL;
  }
  if (result < 0 || v11 < result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1876384BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_187637E1C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_187638590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_187699E90();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = sub_187699EA8();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_187637E1C(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_187638644(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_187638690()
{
  return ((uint64_t (*)(void))((char *)&loc_1876386C4 + dword_18763889C[v0 >> 62]))();
}

uint64_t sub_1876386D4@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t _s32CKShamirShareSharedInternalStateCMa()
{
  return objc_opt_self();
}

void *sub_1876388DC(void *result, void *a2)
{
  if (*result)
  {
    uint64_t result = (void *)ccss_shamir_share_bag_recover_secret();
    if ((_DWORD)result)
    {
      int v3 = (int)result;
      sub_18769A5E0();
      sub_18769A490();
      sub_18769A6D0();
      sub_18769A490();
      swift_bridgeObjectRelease();
      sub_187635F00();
      swift_allocError();
      *(_BYTE *)uint64_t v4 = 3;
      *(_DWORD *)(v4 + 4) = v3;
      *(_BYTE *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      *(_WORD *)(v4 + 16) = 256;
      *(_OWORD *)(v4 + 24) = xmmword_18769CBC0;
      *(void *)(v4 + 40) = 0x80000001876A0320LL;
      *(void *)(v4 + 48) = 0xD00000000000006ELL;
      *(void *)(v4 + 56) = 0x800000018769FFD0LL;
      *(void *)(v4 + 64) = 0LL;
      *(void *)(v4 + 72) = 0xE000000000000000LL;
      return (void *)swift_willThrow();
    }

    else
    {
      *a2 = 16LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_187638A48(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  sub_18769A52C();
  uint64_t v5 = sub_18769A688();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v4)
  {
    sub_18769A52C();
    uint64_t v9 = sub_18769A688();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }

    sub_18769A52C();
    uint64_t v8 = sub_18769A688();
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }

  if ((v2 & 0xC000000000000001LL) != 0 && v7)
  {
    sub_1876397E4();
    uint64_t v10 = 0LL;
    do
    {
      uint64_t v11 = v10 + 1;
      sub_18769A5F8();
      uint64_t v10 = v11;
    }

    while (v7 != v11);
  }

  if (v4)
  {
    sub_18769A52C();
    uint64_t v12 = sub_18769A694();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8LL;
    sub_18769A52C();
  }

  return v12;
}

void sub_187638BE0(unint64_t a1)
{
  int v2 = a1;
  unint64_t v16 = HIDWORD(a1);
  else {
    uint64_t v3 = (HIDWORD(a1) - a1);
  }
  uint64_t v4 = v3 + 1;
  if (v3 != -1)
  {
    uint64_t v20 = MEMORY[0x18961AFE8];
    int64_t v5 = v4 & ~(v4 >> 63);
    sub_18762C4B8(0LL, v5, 0);
    if (v3 >= -1)
    {
      BOOL v6 = 0;
      uint64_t v7 = v20;
      while (v5)
      {
        if (v6) {
          goto LABEL_23;
        }
        CKSecretSharing.ShamirShareGenerator.generateShare(shareIndex:)(v2, (uint64_t)v17);
        if (v1)
        {
          swift_release();
          return;
        }

        char v8 = v17[0];
        int v9 = v18;
        __int128 v10 = v19;
        uint64_t v20 = v7;
        unint64_t v12 = *(void *)(v7 + 16);
        unint64_t v11 = *(void *)(v7 + 24);
        if (v12 >= v11 >> 1)
        {
          __int128 v15 = v19;
          sub_18762C4B8((char *)(v11 > 1), v12 + 1, 1);
          __int128 v10 = v15;
          uint64_t v7 = v20;
        }

        *(void *)(v7 + 16) = v12 + 1;
        uint64_t v13 = v7 + 24 * v12;
        *(_BYTE *)(v13 + 32) = v8;
        *(_DWORD *)(v13 + 36) = v9;
        *(_OWORD *)(v13 + 40) = v10;
        BOOL v6 = v2 == (_DWORD)v16;
        if (v2 == (_DWORD)v16)
        {
          int v2 = 0;
        }

        else if (__CFADD__(v2++, 1))
        {
          goto LABEL_21;
        }

        --v5;
        if (!--v4) {
          return;
        }
      }

      __break(1u);
LABEL_21:
      __break(1u);
    }

    __break(1u);
LABEL_23:
    __break(1u);
  }

uint64_t sub_187638D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x18961AFE8];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x18961AFE8];
    sub_18769A640();
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = (unint64_t *)(a1 + 48);
    do
    {
      uint64_t v8 = *((unsigned int *)v7 - 3);
      uint64_t v9 = *(v7 - 1);
      unint64_t v10 = *v7;
      id v11 = objc_allocWithZone(MEMORY[0x18960F080]);
      sub_187623A28(v9, v10);
      unint64_t v12 = (void *)sub_187699F80();
      objc_msgSend(v11, sel_initWithParams_x_y_, v6, v8, v12);

      sub_187623C58(v9, v10);
      sub_18769A628();
      sub_18769A64C();
      sub_18769A658();
      sub_18769A634();
      v7 += 3;
      --v3;
    }

    while (v3);
    return v13;
  }

  return result;
}

uint64_t sub_187638E80(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v5 = sub_18769A034();
  MEMORY[0x1895F8858](v5);
  uint64_t v6 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (_DWORD *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  sub_187623A28(a1, a2);
  sub_18769A028();
  sub_187639840( &qword_18C4C7188,  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization,  (uint64_t)&unk_18769DD44);
  uint64_t v9 = v6;
  sub_18769A0D0();
  if (!v2)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    if (v8[1] == 1)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&__int128 v21 = v9;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_18762C49C(0LL, *(void *)(v9 + 16) + 1LL, 1);
        uint64_t v9 = v21;
      }

      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = *(void *)(v9 + 24);
      unint64_t v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        sub_18762C49C((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v9 = v21;
      }

      *(void *)(v9 + 16) = v13;
    }

    else if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
    {
      swift_release();
      sub_187635F00();
      swift_allocError();
      *(_BYTE *)uint64_t v18 = 17;
      *(_DWORD *)(v18 + 4) = 0;
      *(_BYTE *)(v18 + 8) = 1;
      *(_DWORD *)(v18 + 12) = 0;
      *(_WORD *)(v18 + 16) = 256;
      *(_OWORD *)(v18 + 24) = xmmword_18769CBD0;
      *(void *)(v18 + 40) = 0xE800000000000000LL;
      *(void *)(v18 + 48) = 0xD00000000000006ELL;
      *(void *)(v18 + 56) = 0x800000018769FFD0LL;
      *(void *)(v18 + 64) = 0xD000000000000078LL;
      *(void *)(v18 + 72) = 0x80000001876A0530LL;
LABEL_14:
      swift_willThrow();
      sub_187638084((uint64_t)(v8 + 4));
      sub_187623C58(a1, a2);
      sub_187639590((uint64_t)v8);
      return v9;
    }

    swift_release();
    int v14 = *v8;
    if (*v8 == 1)
    {
      uint64_t v15 = v8[2];
      _s32CKShamirShareSharedInternalStateCMa();
      swift_allocObject();
      sub_1876364BC(v15);
      __asm { BR              X10 }
    }

    *(void *)&__int128 v21 = 0LL;
    *((void *)&v21 + 1) = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    v20[7] = v14;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A490();
    uint64_t v16 = *((void *)&v21 + 1);
    uint64_t v9 = v21;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v17 = 18;
    *(_DWORD *)(v17 + 4) = 0;
    *(_BYTE *)(v17 + 8) = 1;
    *(_DWORD *)(v17 + 12) = 0;
    *(_WORD *)(v17 + 16) = 256;
    *(_OWORD *)(v17 + 24) = xmmword_18769CBE0;
    *(void *)(v17 + 40) = 0xE800000000000000LL;
    *(void *)(v17 + 48) = 0xD00000000000006ELL;
    *(void *)(v17 + 56) = 0x800000018769FFD0LL;
    *(void *)(v17 + 64) = v9;
    *(void *)(v17 + 72) = v16;
    goto LABEL_14;
  }

  sub_187623C58(a1, a2);
  return v9;
}

void sub_1876394D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_187699E90();
  if (v11)
  {
    uint64_t v12 = sub_187699EB4();
    if (__OFSUB__(a1, v12))
    {
LABEL_13:
      __break(1u);
      return;
    }

    v11 += a1 - v12;
  }

  BOOL v13 = __OFSUB__(a2, a1);
  uint64_t v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v15 = sub_187699EA8();
  if (v15 >= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t v17 = v11 + v16;
  if (v11) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0LL;
  }
  sub_187636D64(v11, v18, a4, a5, a6);
}

uint64_t sub_187639590(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _s11ShamirShareVwxx(uint64_t a1)
{
  return sub_187623C58(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s11ShamirShareVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_187623A28(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s11ShamirShareVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_187623A28(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_187623C58(v5, v6);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s11ShamirShareVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_187623C58(v3, v4);
  return a1;
}

uint64_t _s11ShamirShareVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s11ShamirShareVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShare()
{
  return &type metadata for CKSecretSharing.ShamirShare;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShareGenerator()
{
  return &type metadata for CKSecretSharing.ShamirShareGenerator;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShareSecretReconstructor()
{
  return &type metadata for CKSecretSharing.ShamirShareSecretReconstructor;
}

void *sub_1876397AC(void *a1, size_t a2)
{
  return sub_187669704(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1876397C8(uint64_t a1, uint64_t a2)
{
  return sub_187669754(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

unint64_t sub_1876397E4()
{
  unint64_t result = qword_18C6D9CF0;
  if (!qword_18C6D9CF0)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C6D9CF0);
  }

  return result;
}

void *sub_187639820(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000LL) != 0) {
      __break(1u);
    }
    else {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }

  return __src;
}

uint64_t sub_187639840(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x1895AAF9C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_187639880(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1876398C0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || (uint64_t v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (a1 <= 1) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = a1;
  }
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    goto LABEL_27;
  }
  double v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  v14[0] = sub_187644164(a2);
  v14[1] = v9;
  sub_187670F74((uint64_t)v14);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (a2 - v8 < a2)
  {
    uint64_t v10 = -v8;
    while (1)
    {
      uint64_t v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10)) {
        break;
      }
      BOOL v13 = __CFADD__(v10++, 1LL);
      sub_187699F68();
      if (v13) {
        return;
      }
      if (__OFADD__(v11, 1LL))
      {
        __break(1u);
        return;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

LABEL_33:
  __break(1u);
}

      __break(1u);
LABEL_34:
      uint64_t v9 = (uint64_t)sub_187631FCC(v9);
      *a2 = v9;
LABEL_23:
      ccspake_sizeof_point();
      unint64_t v49 = ccspake_kex_generate();
      *a2 = v9;
      swift_endAccess();
      sub_187623C58(v62, v63);
      uint64_t v50 = v59;

      *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_X] = v6;
      uint64_t v51 = (uint64_t *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self];
      *uint64_t v51 = v14;
      v51[1] = v5;
      uint64_t v52 = &v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self];
      *(void *)uint64_t v52 = v60;
      *((void *)v52 + 1) = a4;
      *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_aad] = v64;
      if (!v49)
      {

        unint64_t v54 = (objc_class *)type metadata accessor for AlishaSPAKE2Prover();
        v66.receiver = v15;
        v66.super_class = v54;
        uint64_t v53 = objc_msgSendSuper2(&v66, sel_init);

        return (uint64_t)v53;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_187623C58( *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self],  *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self + 8]);
      sub_187623C58( *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self],  *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self + 8]);

LABEL_25:
      type metadata accessor for AlishaSPAKE2Prover();
      swift_deallocPartialClassInstance();
      return 0LL;
    }

  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_187639A54( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  id v36 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v38);
  id v15 = objc_msgSend(v14, sel_serializedPublicKey_, 1);
  if (v15)
  {
    uint64_t v16 = v15;
    int64_t v34 = v11;
    uint64_t v35 = v12;
    uint64_t v17 = sub_187699F98();
    unint64_t v19 = v18;

    uint64_t v20 = sub_18763B1DC(0xD000000000000023LL, 0x80000001876A0A90LL);
    unint64_t v22 = v21;
    sub_187651220(v17, v19, v20, v21);
    uint64_t v24 = v23;
    sub_187623C58(v20, v22);
    sub_187623C58(v17, v19);
    id v25 = sub_18764FE4C((uint64_t)v36, v14);
    id v26 = sub_18764FE4C((uint64_t)v13, v24);
    id v27 = sub_187657164(v25, (uint64_t)v26);

    id v28 = sub_18764FE4C((uint64_t)v34, v24);
    id v29 = sub_18764FE4C((uint64_t)v35, v24);
    sub_1876442B0(v27, v28, v29);
    uint64_t v33 = v30;
    uint64_t v32 = v31;

    *a6 = a1;
    a6[1] = v36;
    a6[2] = v34;
    a6[3] = v35;
    a6[4] = v13;
    a6[5] = v27;
    a6[6] = v28;
    a6[7] = v29;
    a6[8] = v14;
    a6[9] = v24;
    a6[10] = v33;
    a6[11] = v32;
  }

  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }

void sub_187639CCC(id a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v12 = (void *)v5[8];
  id v11 = (void *)v5[9];
  char v13 = sub_187639E8C(v12, v11, a1, a2, a3, a4);
  if (!v6)
  {
    if ((v13 & 1) != 0)
    {
      id v27 = (void *)v5[4];
      id v29 = (void *)v5[1];
      unint64_t v19 = (void *)v5[5];
      uint64_t v21 = (void *)v5[3];
      uint64_t v23 = (void *)v5[6];
      uint64_t v24 = (void *)v5[2];
      id v26 = (void *)v5[7];
      uint64_t v32 = v5[10];
      unint64_t v31 = v5[11];
      id v35 = a1;
      id v34 = a2;
      id v33 = a3;
      sub_18769A52C();
      id v30 = v29;
      id v28 = v27;
      id v25 = v24;
      id v22 = v21;
      id v20 = v19;
      id v14 = v23;
      id v15 = v26;
      id v16 = v12;
      id v17 = v11;
      sub_187623A28(v32, v31);
      sub_18763A314(v35, v34, v33, v30, v28, v25, v22, a5, v20, v14, v15, v16, v17, v32, v31);
    }

    else
    {
      sub_1876480C4();
      swift_allocError();
      *unint64_t v18 = 0;
      swift_willThrow();
    }
  }

uint64_t sub_187639E8C(void *a1, void *a2, id a3, void *a4, void *a5, uint64_t a6)
{
  if ((objc_msgSend(a3, sel_isEqual_, a1) & 1) != 0
    || (objc_msgSend(a3, sel_isEqual_, a2) & 1) != 0)
  {
    LOBYTE(v13) = 0;
    return v13 & 1;
  }

  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  sub_18769A52C();
  id v17 = sub_187657164(v14, (uint64_t)v14);
  unsigned __int8 v18 = objc_msgSend(v14, sel_isEqual_, v17);
  swift_bridgeObjectRelease();

  if ((v18 & 1) != 0)
  {
LABEL_8:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }

  id v19 = v14;
  id v20 = v15;
  id v21 = v16;
  sub_18769A52C();
  id v22 = a1;
  id v23 = a2;
  if ((objc_msgSend(v20, sel_isEqual_, v22) & 1) != 0
    || objc_msgSend(v20, sel_isEqual_, v23))
  {

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  id v25 = v19;
  id v26 = v20;
  id v27 = v21;
  sub_18769A52C();
  id v28 = sub_187657164(v26, (uint64_t)v26);
  unsigned __int8 v29 = objc_msgSend(v26, sel_isEqual_, v28);

  swift_bridgeObjectRelease_n();
  if ((v29 & 1) != 0) {
    goto LABEL_8;
  }
  *(void *)&__int128 v57 = 0xD000000000000029LL;
  *((void *)&v57 + 1) = 0x80000001876A0A60LL;
  *((void *)&v58 + 1) = MEMORY[0x18961AFE8];
  *(void *)&__int128 v59 = MEMORY[0x18961AFE8];
  *((void *)&v59 + 1) = MEMORY[0x18961AFE8];
  id v30 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
  unint64_t v31 = *((void *)v30 + 2);
  unint64_t v32 = *((void *)v30 + 3);
  unint64_t v33 = v32 >> 1;
  unint64_t v34 = v31 + 1;
  if (v32 >> 1 <= v31)
  {
    unint64_t v47 = *((void *)v30 + 2);
    uint64_t v48 = sub_18765B024((char *)(v32 > 1), v31 + 1, 1, v30);
    unint64_t v31 = v47;
    id v30 = v48;
    unint64_t v32 = *((void *)v48 + 3);
    unint64_t v33 = v32 >> 1;
  }

  *((void *)v30 + 2) = v34;
  id v35 = &v30[16 * v31];
  *((void *)v35 + 4) = 12653LL;
  *((void *)v35 + 5) = 0xE200000000000000LL;
  unint64_t v36 = v31 + 2;
  if (v33 <= v34)
  {
    unint64_t v54 = v31 + 2;
    unint64_t v49 = v31;
    uint64_t v50 = sub_18765B024((char *)(v32 > 1), v31 + 2, 1, v30);
    unint64_t v36 = v54;
    unint64_t v31 = v49;
    id v30 = v50;
  }

  *((void *)v30 + 2) = v36;
  uint64_t v37 = &v30[16 * v34];
  *((void *)v37 + 4) = 12909LL;
  *((void *)v37 + 5) = 0xE200000000000000LL;
  *(void *)&__int128 v58 = v30;
  unint64_t v39 = *((void *)v30 + 2);
  unint64_t v38 = *((void *)v30 + 3);
  uint64_t v40 = v39 - 1;
  unint64_t v41 = v38 >> 1;
  if (v38 >> 1 <= v39)
  {
    unint64_t v55 = v31;
    uint64_t v51 = sub_18765B024((char *)(v38 > 1), v39 + 1, 1, v30);
    uint64_t v40 = v39 - 1;
    unint64_t v31 = v55;
    id v30 = v51;
    unint64_t v38 = *((void *)v51 + 3);
    unint64_t v41 = v38 >> 1;
  }

  *((void *)v30 + 2) = v39 + 1;
  uint64_t v42 = &v30[16 * v39];
  *((void *)v42 + 4) = 12658LL;
  *((void *)v42 + 5) = 0xE200000000000000LL;
  *(void *)&__int128 v58 = v30;
  unint64_t v43 = *((void *)v30 + 2);
  unint64_t v44 = v43 + 1;
  if (v41 <= v43)
  {
    unint64_t v56 = v31;
    uint64_t v53 = v40;
    uint64_t v52 = sub_18765B024((char *)(v38 > 1), v43 + 1, 1, v30);
    uint64_t v40 = v53;
    unint64_t v44 = v43 + 1;
    unint64_t v31 = v56;
    id v30 = v52;
  }

  *((void *)v30 + 2) = v44;
  char v45 = &v30[16 * v43];
  *((void *)v45 + 4) = 12914LL;
  *((void *)v45 + 5) = 0xE200000000000000LL;
  *(void *)&__int128 v58 = v30;
  sub_18763CCDC((uint64_t)&v57, v22, v23, v25, v26, v31, v40, v43 - 1, *((void *)v30 + 2) - 1LL);
  __int128 v60 = v57;
  __int128 v61 = v58;
  __int128 v62 = v59;
  char v13 = &v60;
  char v46 = sub_187651DE4((uint64_t)v27, a6);
  if (v6)
  {
    __int128 v68 = v60;
    sub_187647F98((uint64_t)&v68);
    uint64_t v69 = v61;
    sub_187647FC0((uint64_t)&v69);
    uint64_t v70 = *((void *)&v61 + 1);
    sub_187647FC0((uint64_t)&v70);
    uint64_t v71 = v62;
    sub_187647FC0((uint64_t)&v71);
    uint64_t v72 = *((void *)&v62 + 1);
    sub_187647FC0((uint64_t)&v72);
  }

  else
  {
    LOBYTE(v13) = v46;
    __int128 v63 = v60;
    sub_187647F98((uint64_t)&v63);
    uint64_t v64 = v61;
    sub_187647FC0((uint64_t)&v64);
    uint64_t v65 = *((void *)&v61 + 1);
    sub_187647FC0((uint64_t)&v65);
    uint64_t v66 = v62;
    sub_187647FC0((uint64_t)&v66);
    uint64_t v67 = *((void *)&v62 + 1);
    sub_187647FC0((uint64_t)&v67);
  }

  return v13 & 1;
}

void sub_18763A314( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X4>, void *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, unint64_t a15)
{
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v95);
  if (v18)
  {
    id v19 = v18;
    id v76 = sub_18764FE4C((uint64_t)v18, a12);
    id v20 = sub_18766D7B8(v19, (uint64_t)a5);
    id v75 = sub_18764FE4C((uint64_t)v20, a13);

    id v73 = sub_18764FE4C((uint64_t)v19, a10);
    id v72 = sub_18764FE4C((uint64_t)v19, a11);
    id v21 = sub_18764FE4C((uint64_t)v19, a13);
    v78 = a1;
    id v22 = sub_18764FE4C((uint64_t)a6, a1);
    id v23 = sub_187657164(a9, (uint64_t)v22);

    v77 = a2;
    id v24 = sub_18764FE4C((uint64_t)a7, a2);
    id v25 = sub_187657164(v23, (uint64_t)v24);

    id v71 = sub_18764FE4C((uint64_t)v19, v25);
    *(void *)&__int128 v89 = 0xD00000000000002ALL;
    *((void *)&v89 + 1) = 0x80000001876A0A30LL;
    *(void *)&__int128 v90 = MEMORY[0x18961AFE8];
    *(void *)&__int128 v91 = MEMORY[0x18961AFE8];
    *((void *)&v91 + 1) = MEMORY[0x18961AFE8];
    uint64_t v92 = MEMORY[0x18961AFE8];
    id v26 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v28 = *((void *)v26 + 2);
    unint64_t v27 = *((void *)v26 + 3);
    if (v28 >= v27 >> 1) {
      id v26 = sub_18765B024((char *)(v27 > 1), v28 + 1, 1, v26);
    }
    v74 = v21;
    *((void *)v26 + 2) = v28 + 1;
    unsigned __int8 v29 = &v26[16 * v28];
    *((void *)v29 + 4) = 12408LL;
    *((void *)v29 + 5) = 0xE200000000000000LL;
    *((void *)&v90 + 1) = v26;
    id v30 = a4;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    uint64_t v66 = v30;
    sub_18769A55C();
    sub_18769A538();
    uint64_t v68 = *(void *)(v90 + 16);
    unint64_t v32 = *((void *)v26 + 2);
    unint64_t v31 = *((void *)v26 + 3);
    if (v32 >= v31 >> 1) {
      id v26 = sub_18765B024((char *)(v31 > 1), v32 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v32 + 1;
    unint64_t v33 = &v26[16 * v32];
    *((void *)v33 + 4) = 12664LL;
    *((void *)v33 + 5) = 0xE200000000000000LL;
    *((void *)&v90 + 1) = v26;
    id v34 = a6;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    sub_18769A55C();
    sub_18769A538();
    *(void *)v81 = *(void *)(v90 + 16);
    unint64_t v36 = *((void *)v26 + 2);
    unint64_t v35 = *((void *)v26 + 3);
    if (v36 >= v35 >> 1) {
      id v26 = sub_18765B024((char *)(v35 > 1), v36 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v36 + 1;
    uint64_t v37 = &v26[16 * v36];
    *((void *)v37 + 4) = 12920LL;
    *((void *)v37 + 5) = 0xE200000000000000LL;
    *((void *)&v90 + 1) = v26;
    id v38 = a7;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    v87 = v38;
    sub_18769A55C();
    sub_18769A538();
    uint64_t v67 = *(void *)(v90 + 16);
    unint64_t v40 = *((void *)v26 + 2);
    unint64_t v39 = *((void *)v26 + 3);
    if (v40 >= v39 >> 1) {
      id v26 = sub_18765B024((char *)(v39 > 1), v40 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v40 + 1;
    unint64_t v41 = &v26[16 * v40];
    *((void *)v41 + 4) = 0x69646E696C423078LL;
    *((void *)v41 + 5) = 0xEA0000000000676ELL;
    *((void *)&v90 + 1) = v26;
    id v42 = a5;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    uint64_t v65 = v42;
    sub_18769A55C();
    sub_18769A538();
    uint64_t v43 = *(void *)(v90 + 16);
    unint64_t v45 = *((void *)v26 + 2);
    unint64_t v44 = *((void *)v26 + 3);
    if (v45 >= v44 >> 1) {
      id v26 = sub_18765B024((char *)(v44 > 1), v45 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v45 + 1;
    char v46 = &v26[16 * v45];
    *((void *)v46 + 4) = 98LL;
    *((void *)v46 + 5) = 0xE100000000000000LL;
    *((void *)&v90 + 1) = v26;
    id v47 = v19;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    sub_18769A55C();
    sub_18769A538();
    uint64_t v70 = *(void *)(v90 + 16);
    id v48 = sub_18766D7B8(v47, (uint64_t)v34);
    unint64_t v50 = *((void *)v26 + 2);
    unint64_t v49 = *((void *)v26 + 3);
    if (v50 >= v49 >> 1) {
      id v26 = sub_18765B024((char *)(v49 > 1), v50 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v50 + 1;
    uint64_t v51 = &v26[16 * v50];
    *((void *)v51 + 4) = 12660LL;
    *((void *)v51 + 5) = 0xE200000000000000LL;
    *((void *)&v90 + 1) = v26;
    id v52 = v48;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    sub_18769A55C();
    sub_18769A538();
    uint64_t v53 = *(void *)(v90 + 16);

    id v54 = sub_18766D7B8(v47, (uint64_t)v87);
    unint64_t v56 = *((void *)v26 + 2);
    unint64_t v55 = *((void *)v26 + 3);
    if (v56 >= v55 >> 1) {
      id v26 = sub_18765B024((char *)(v55 > 1), v56 + 1, 1, v26);
    }
    uint64_t v69 = v68 - 1;
    uint64_t v82 = *(void *)v81 - 1LL;
    uint64_t v57 = v43 - 1;
    uint64_t v58 = v53 - 1;
    *((void *)v26 + 2) = v56 + 1;
    __int128 v59 = &v26[16 * v56];
    *((void *)v59 + 4) = 12916LL;
    *((void *)v59 + 5) = 0xE200000000000000LL;
    *((void *)&v90 + 1) = v26;
    id v60 = v54;
    MEMORY[0x1895AA300]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_18769A544();
    }
    sub_18769A55C();
    sub_18769A538();
    uint64_t v61 = *(void *)(v90 + 16);

    sub_187644798( (uint64_t)&v89,  v78,  v77,  a12,  a13,  v76,  v71,  a9,  a10,  a11,  v75,  v73,  v72,  v74,  v69,  v57,  v82,  v67 - 1,  v70 - 1,  v58,  v61 - 1);
    v93[0] = v89;
    v93[1] = v90;
    v93[2] = v91;
    uint64_t v94 = v92;
    __int128 v62 = sub_187651C8C();
    if (v84)
    {
      sub_187648108((uint64_t)v93);
      sub_187623C58(a14, a15);

      swift_bridgeObjectRelease();
    }

    else
    {
      *(void *)v83 = v63;
      v85 = v62;
      sub_187648108((uint64_t)v93);

      swift_bridgeObjectRelease();
      *a8 = v76;
      a8[1] = v71;
      a8[2] = a9;
      a8[3] = a10;
      a8[4] = a11;
      a8[5] = v75;
      a8[6] = v73;
      a8[7] = v72;
      a8[8] = v74;
      a8[9] = a14;
      a8[11] = v85;
      a8[12] = *(void *)v83;
      a8[10] = a15;
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_18763ABC4( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  if ((v17 & 1) == 0) {
    goto LABEL_3;
  }
  id v42 = a8;
  uint64_t v43 = a4;
  id v18 = *(void **)v9;
  sub_187647EC0(v9);
  id v19 = sub_187657164(v18, (uint64_t)v18);
  unsigned __int8 v20 = objc_msgSend(v19, sel_isEqual_, v18);

  sub_187647F2C(v9);
  if ((v20 & 1) == 0)
  {
    id v23 = sub_18764FE4C(a1, v18);
    unint64_t v41 = *(void **)(v9 + 16);
    id v24 = sub_18764FE4C(a2, v41);
    id v25 = sub_187657164(v23, (uint64_t)v24);

    id v26 = sub_18766D7B8(a3, a5);
    id v27 = sub_18764FE4C((uint64_t)v26, v18);

    id v28 = sub_187657164(v25, (uint64_t)v27);
    unsigned __int8 v29 = *(void **)(v9 + 8);
    id v40 = sub_18765727C(v28, (uint64_t)v29);

    *(void *)&__int128 v44 = 0xD000000000000025LL;
    *((void *)&v44 + 1) = 0x80000001876A09B0LL;
    *((void *)&v45 + 1) = MEMORY[0x18961AFE8];
    *(void *)&__int128 v46 = MEMORY[0x18961AFE8];
    *((void *)&v46 + 1) = MEMORY[0x18961AFE8];
    id v30 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v32 = *((void *)v30 + 2);
    unint64_t v31 = *((void *)v30 + 3);
    unint64_t v33 = v31 >> 1;
    unint64_t v34 = v32 + 1;
    if (v31 >> 1 <= v32)
    {
      id v30 = sub_18765B024((char *)(v31 > 1), v32 + 1, 1, v30);
      unint64_t v31 = *((void *)v30 + 3);
      unint64_t v33 = v31 >> 1;
    }

    *((void *)v30 + 2) = v34;
    unint64_t v35 = &v30[16 * v32];
    *((void *)v35 + 4) = 12653LL;
    *((void *)v35 + 5) = 0xE200000000000000LL;
    if (v33 <= v34) {
      id v30 = sub_18765B024((char *)(v31 > 1), v32 + 2, 1, v30);
    }
    *((void *)v30 + 2) = v32 + 2;
    unint64_t v36 = &v30[16 * v34];
    *((void *)v36 + 4) = 122LL;
    *((void *)v36 + 5) = 0xE100000000000000LL;
    *(void *)&__int128 v45 = v30;
    unint64_t v38 = *((void *)v30 + 2);
    unint64_t v37 = *((void *)v30 + 3);
    if (v38 >= v37 >> 1) {
      id v30 = sub_18765B024((char *)(v37 > 1), v38 + 1, 1, v30);
    }
    *((void *)v30 + 2) = v38 + 1;
    unint64_t v39 = &v30[16 * v38];
    *((void *)v39 + 4) = 29229LL;
    *((void *)v39 + 5) = 0xE200000000000000LL;
    *(void *)&__int128 v45 = v30;
    sub_1876425C0((uint64_t)&v44, v42, a9, v18, v29, v41, v40, v43, v32, v38 - 1, *((void *)v30 + 2) - 1LL);
    __int128 v47 = v44;
    __int128 v48 = v45;
    __int128 v49 = v46;
    char v21 = sub_187651DE4(*(void *)(v9 + 40), *(void *)(v9 + 48));

    if (v10)
    {
      __int128 v55 = v47;
      sub_187647F98((uint64_t)&v55);
      uint64_t v56 = v48;
      sub_187647FC0((uint64_t)&v56);
      uint64_t v57 = *((void *)&v48 + 1);
      sub_187647FC0((uint64_t)&v57);
      uint64_t v58 = v49;
      sub_187647FC0((uint64_t)&v58);
      uint64_t v59 = *((void *)&v49 + 1);
      sub_187647FC0((uint64_t)&v59);
    }

    else
    {
      __int128 v50 = v47;
      sub_187647F98((uint64_t)&v50);
      uint64_t v51 = v48;
      sub_187647FC0((uint64_t)&v51);
      uint64_t v52 = *((void *)&v48 + 1);
      sub_187647FC0((uint64_t)&v52);
      uint64_t v53 = v49;
      sub_187647FC0((uint64_t)&v53);
      uint64_t v54 = *((void *)&v49 + 1);
      sub_187647FC0((uint64_t)&v54);
    }
  }

  else
  {
LABEL_3:
    char v21 = 0;
  }

  return v21 & 1;
}

void sub_18763AF34(uint64_t a1, uint64_t a2)
{
  v3[5] = *MEMORY[0x1895F89C0];
  v3[3] = MEMORY[0x189606D70];
  v3[4] = MEMORY[0x189606D58];
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_18763AF98
     + dword_18763B1CC[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x189606D70])[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_18763AFA8()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_187623A28(v1, v0);
  sub_187696720(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_187623C58(v1, v0);
  uint64_t v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t sub_18763B1DC(uint64_t a1, unint64_t a2)
{
  v17[5] = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v16 = a1;
  *((void *)&v16 + 1) = a2;
  sub_18769A52C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71C8);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0LL;
    memset(v14, 0, sizeof(v14));
    sub_187648218((uint64_t)v14);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      BOOL v5 = v17;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v2 = sub_18769A61C();
      }

      if (v2) {
        uint64_t v4 = (_BYTE *)(v2 + v3);
      }
      else {
        uint64_t v4 = 0LL;
      }
      BOOL v5 = (_BYTE *)v2;
    }

    uint64_t v6 = sub_187644100(v5, v4);
    unint64_t v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v14[0] = v6;
      *((void *)&v14[0] + 1) = v8;
      return *(void *)&v14[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      uint64_t v9 = sub_18769A49C();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v9 = HIBYTE(a2) & 0xF;
    }

    else
    {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v14[0] = sub_187644164(v9);
    *((void *)&v14[0] + 1) = v10;
    MEMORY[0x1895F8858](*(void *)&v14[0]);
    sub_187643BD4();
    __asm { BR              X12 }
  }

  sub_1876482C8(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_187699ED8();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(void *)&v14[0];
}

uint64_t sub_18763B6D8(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1896181D0];
  v8[4] = MEMORY[0x1896071B0];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1896181D0]);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (uint64_t v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_187696980(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_187696A40((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_187696AB8((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_18763B790@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X5>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, void *a9, void *a10)
{
  char v17 = sub_187645820(a2, a3, a9, a10);
  if (!v10)
  {
    id v28 = a4;
    uint64_t v27 = a8;
    if ((v17 & 1) != 0)
    {
      id v18 = sub_18765727C(*(void **)(a1 + 8), *(void *)(a1 + 40));
      id v19 = sub_18764FE4C((uint64_t)a6, *(id *)(a1 + 48));
      id v20 = sub_18765727C(v18, (uint64_t)v19);

      id v21 = sub_18764FE4C((uint64_t)a7, *(id *)(a1 + 56));
      id v26 = sub_18765727C(v20, (uint64_t)v21);

      swift_bridgeObjectRelease();
      id v33 = *(id *)a1;
      id v32 = *(id *)(a1 + 24);
      __int128 v31 = *(_OWORD *)(a1 + 72);
      sub_1876481AC(&v33);
      sub_1876481AC(&v32);
      sub_187647FE8((uint64_t)&v31);
      uint64_t result = sub_187648014(a1);
      id v23 = v33;
      *(void *)uint64_t v27 = a5;
      *(void *)(v27 + 8) = v23;
      id v24 = v32;
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = v24;
      *(_OWORD *)(v27 + 32) = v31;
      return result;
    }

    sub_1876480C4();
    swift_allocError();
    *id v25 = 0;
    swift_willThrow();
  }

  swift_bridgeObjectRelease();
  return sub_187648014(a1);
}

void sub_18763B974(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x189605D70];
  id v14 = a1;
  id v13 = a2;
  id v9 = a3;
  sub_18764635C(v4);
  sub_187639840((unint64_t *)&qword_18C4C7198, v8, MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v16);
  if (v10)
  {
    char v11 = v10;
    sub_18769A22C();
    swift_dynamicCast();
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v16);
    if (v12)
    {
      sub_18763BAF0(v4, v11, v12, v14, v13, v9, a4);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

double sub_18763BAF0@<D0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  id v13 = sub_18764FE4C((uint64_t)a2, *(id *)(a1 + 8));
  id v14 = *(void **)a1;
  __int128 v55 = v13;
  id v15 = sub_18764FE4C(*(void *)a1, v13);
  id v16 = sub_18764FE4C((uint64_t)a4, a6);
  id v53 = sub_187657164(v15, (uint64_t)v16);

  id v17 = sub_18764FE4C((uint64_t)a2, *(id *)(a1 + 16));
  id v18 = sub_18764FE4C((uint64_t)a3, a5);
  __int128 v50 = v17;
  id v51 = sub_187657164(v17, (uint64_t)v18);

  __int128 v46 = *(void **)(a1 + 24);
  uint64_t v47 = a1;
  id v19 = sub_18764FE4C((uint64_t)a4, v46);
  id v63 = a3;
  id v20 = sub_18764FE4C((uint64_t)a3, a5);
  id v48 = sub_18765727C(v19, (uint64_t)v20);

  *(void *)&__int128 v56 = 0xD000000000000025LL;
  *((void *)&v56 + 1) = 0x80000001876A09B0LL;
  *(void *)&__int128 v57 = MEMORY[0x18961AFE8];
  *(void *)&__int128 v58 = MEMORY[0x18961AFE8];
  *((void *)&v58 + 1) = MEMORY[0x18961AFE8];
  uint64_t v59 = MEMORY[0x18961AFE8];
  id v21 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
  unint64_t v23 = *((void *)v21 + 2);
  unint64_t v22 = *((void *)v21 + 3);
  if (v23 >= v22 >> 1) {
    id v21 = sub_18765B024((char *)(v22 > 1), v23 + 1, 1, v21);
  }
  uint64_t v54 = a6;
  *((void *)v21 + 2) = v23 + 1;
  id v24 = &v21[16 * v23];
  *((void *)v24 + 4) = 12653LL;
  *((void *)v24 + 5) = 0xE200000000000000LL;
  *((void *)&v57 + 1) = v21;
  id v25 = v14;
  MEMORY[0x1895AA300]();
  if (*(void *)(v57 + 16) >= *(void *)(v57 + 24) >> 1) {
    sub_18769A544();
  }
  sub_18769A55C();
  sub_18769A538();
  uint64_t v26 = *(void *)(v57 + 16);
  unint64_t v28 = *((void *)v21 + 2);
  unint64_t v27 = *((void *)v21 + 3);
  if (v28 >= v27 >> 1) {
    id v21 = sub_18765B024((char *)(v27 > 1), v28 + 1, 1, v21);
  }
  uint64_t v52 = a5;
  *((void *)v21 + 2) = v28 + 1;
  unsigned __int8 v29 = &v21[16 * v28];
  *((void *)v29 + 4) = 122LL;
  *((void *)v29 + 5) = 0xE100000000000000LL;
  *((void *)&v57 + 1) = v21;
  id v30 = a4;
  MEMORY[0x1895AA300]();
  if (*(void *)(v57 + 16) >= *(void *)(v57 + 24) >> 1) {
    sub_18769A544();
  }
  sub_18769A55C();
  sub_18769A538();
  uint64_t v31 = *(void *)(v57 + 16);
  id v32 = (void *)sub_18765755C((uint64_t)v63);
  unint64_t v34 = *((void *)v21 + 2);
  unint64_t v33 = *((void *)v21 + 3);
  if (v34 >= v33 >> 1) {
    id v21 = sub_18765B024((char *)(v33 > 1), v34 + 1, 1, v21);
  }
  uint64_t v35 = v26 - 1;
  uint64_t v36 = v31 - 1;
  *((void *)v21 + 2) = v34 + 1;
  unint64_t v37 = &v21[16 * v34];
  *((void *)v37 + 4) = 29229LL;
  *((void *)v37 + 5) = 0xE200000000000000LL;
  *((void *)&v57 + 1) = v21;
  id v38 = v32;
  MEMORY[0x1895AA300]();
  if (*(void *)(v57 + 16) >= *(void *)(v57 + 24) >> 1) {
    sub_18769A544();
  }
  sub_18769A55C();
  sub_18769A538();
  uint64_t v39 = *(void *)(v57 + 16);

  sub_1876422E8((uint64_t)&v56, v52, v54, v55, v51, v53, v48, v46, v35, v36, v39 - 1);
  v61[0] = v56;
  v61[1] = v57;
  v61[2] = v58;
  uint64_t v62 = v59;
  id v40 = sub_187651C8C();
  if (v49)
  {
    sub_187648108((uint64_t)v61);

    sub_1876463B4(v47);
  }

  else
  {
    uint64_t v43 = v40;
    uint64_t v44 = v41;
    sub_187648108((uint64_t)v61);

    __int128 v60 = *(_OWORD *)(v47 + 32);
    sub_187647FE8((uint64_t)&v60);
    sub_1876463B4(v47);
    *(void *)a7 = v55;
    *(void *)(a7 + 8) = v51;
    *(void *)(a7 + 16) = v53;
    *(void *)(a7 + 40) = v43;
    *(void *)(a7 + 48) = v44;
    double result = *(double *)&v60;
    *(_OWORD *)(a7 + 24) = v60;
  }

  return result;
}

void sub_18763BF74(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  unint64_t v38 = a2;
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v30);
  if (!v7)
  {
    __break(1u);
    goto LABEL_6;
  }

  unint64_t v8 = v7;
  uint64_t v28 = a3;
  sub_18769A22C();
  swift_dynamicCast();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v30);
  id v10 = objc_msgSend(v9, sel_serializedPublicKey_, 1);
  if (!v10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  char v11 = v10;
  uint64_t v12 = sub_187699F98();
  unint64_t v14 = v13;

  uint64_t v15 = sub_18763B1DC(0xD000000000000023LL, 0x80000001876A0A90LL);
  unint64_t v17 = v16;
  sub_187651220(v12, v14, v15, v16);
  if (!v4)
  {
    id v19 = v18;
    sub_187623C58(v15, v17);
    sub_187623C58(v12, v14);
    sub_18763B974(v8, v9, v19, (uint64_t)&v34);
    id v20 = v34;
    id v21 = *v5;
    id v22 = v8;
    id v23 = v20;
    id v24 = v19;
    uint64_t v25 = v38;
    sub_187623A28(a1, v38);
    sub_18763C298(v21, (uint64_t)v22, a1, v25, v23, v24, &v30);

    uint64_t v26 = v30;
    *(void *)uint64_t v28 = v23;
    *(_OWORD *)(v28 + 8) = v35;
    *(_OWORD *)(v28 + 24) = v36;
    *(_OWORD *)(v28 + 40) = v37;
    *(void *)(v28 + 56) = v26;
    __int128 v27 = v32;
    *(_OWORD *)(v28 + 64) = v31;
    *(_OWORD *)(v28 + 80) = v27;
    *(_OWORD *)(v28 + 96) = v33;
    return;
  }

void sub_18763C298( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  id v51 = a5;
  uint64_t v13 = sub_18763B1DC(0xD00000000000001CLL, 0x80000001876A09E0LL);
  unint64_t v15 = v14;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  sub_187651220(a3, a4, v13, v14);
  if (v7)
  {
    swift_unexpectedError();
    __break(1u);
  }

  else
  {
    unint64_t v17 = v16;
    sub_187623C58(v13, v15);
    uint64_t v41 = v17;
    id v42 = sub_18764FE4C((uint64_t)a1, v17);
    id v18 = sub_18764FE4C((uint64_t)a1, v51);
    id v40 = (void *)a2;
    id v19 = sub_18764FE4C(a2, a6);
    id v20 = sub_187657164(v18, (uint64_t)v19);

    *(void *)&__int128 v45 = 0xD00000000000001CLL;
    *((void *)&v45 + 1) = 0x80000001876A09E0LL;
    *(void *)&__int128 v46 = MEMORY[0x18961AFE8];
    *(void *)&__int128 v47 = MEMORY[0x18961AFE8];
    *((void *)&v47 + 1) = MEMORY[0x18961AFE8];
    uint64_t v48 = MEMORY[0x18961AFE8];
    id v21 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v23 = *((void *)v21 + 2);
    unint64_t v22 = *((void *)v21 + 3);
    if (v23 >= v22 >> 1) {
      id v21 = sub_18765B024((char *)(v22 > 1), v23 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v23 + 1;
    id v24 = &v21[16 * v23];
    *((void *)v24 + 4) = 12653LL;
    *((void *)v24 + 5) = 0xE200000000000000LL;
    *((void *)&v46 + 1) = v21;
    id v25 = a1;
    MEMORY[0x1895AA300]();
    if (*(void *)(v46 + 16) >= *(void *)(v46 + 24) >> 1) {
      sub_18769A544();
    }
    uint64_t v39 = v25;
    sub_18769A55C();
    sub_18769A538();
    uint64_t v26 = *(void *)(v46 + 16) - 1LL;
    unint64_t v28 = *((void *)v21 + 2);
    unint64_t v27 = *((void *)v21 + 3);
    unsigned __int8 v29 = v20;
    if (v28 >= v27 >> 1) {
      id v21 = sub_18765B024((char *)(v27 > 1), v28 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v28 + 1;
    uint64_t v30 = &v21[16 * v28];
    *((void *)v30 + 4) = 122LL;
    *((void *)v30 + 5) = 0xE100000000000000LL;
    *((void *)&v46 + 1) = v21;
    id v31 = v40;
    MEMORY[0x1895AA300]();
    if (*(void *)(v46 + 16) >= *(void *)(v46 + 24) >> 1) {
      sub_18769A544();
    }
    sub_18769A55C();
    sub_18769A538();
    __int128 v32 = a6;
    __int128 v33 = a6;
    unint64_t v34 = v51;
    sub_187642B18((uint64_t)&v45, v33, v41, v42, v51, v29, v26, *(void *)(v46 + 16) - 1LL);
    v49[0] = v45;
    v49[1] = v46;
    v49[2] = v47;
    uint64_t v50 = v48;
    __int128 v35 = sub_187651C8C();
    uint64_t v37 = v36;
    sub_187648108((uint64_t)v49);

    a7[4] = v34;
    a7[5] = v35;
    a7[6] = v37;
    *a7 = v42;
    a7[1] = v43;
    a7[2] = v44;
    a7[3] = v29;
  }

void sub_18763C614(void *a1, void *a2, void *a3, uint64_t a4, id a5, void *a6)
{
  id v12 = sub_18764FE4C((uint64_t)a1, a5);
  id v13 = sub_18764FE4C((uint64_t)a3, a6);
  id v45 = sub_187657164(v12, (uint64_t)v13);

  id v46 = a5;
  id v14 = sub_18764FE4C((uint64_t)a2, a5);
  id v42 = (void *)a4;
  id v53 = a6;
  id v15 = sub_18764FE4C(a4, a6);
  id v44 = sub_187657164(v14, (uint64_t)v15);

  *(void *)&__int128 v47 = 0xD000000000000029LL;
  *((void *)&v47 + 1) = 0x80000001876A0A60LL;
  *(void *)&__int128 v48 = MEMORY[0x18961AFE8];
  *(void *)&__int128 v49 = MEMORY[0x18961AFE8];
  *((void *)&v49 + 1) = MEMORY[0x18961AFE8];
  uint64_t v50 = MEMORY[0x18961AFE8];
  uint64_t v16 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
  unint64_t v18 = *((void *)v16 + 2);
  unint64_t v17 = *((void *)v16 + 3);
  if (v18 >= v17 >> 1) {
    uint64_t v16 = sub_18765B024((char *)(v17 > 1), v18 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v18 + 1;
  id v19 = &v16[16 * v18];
  *((void *)v19 + 4) = 12653LL;
  *((void *)v19 + 5) = 0xE200000000000000LL;
  *((void *)&v48 + 1) = v16;
  id v20 = a1;
  MEMORY[0x1895AA300]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_18769A544();
  }
  uint64_t v41 = v20;
  sub_18769A55C();
  sub_18769A538();
  uint64_t v21 = *(void *)(v48 + 16);
  unint64_t v23 = *((void *)v16 + 2);
  unint64_t v22 = *((void *)v16 + 3);
  if (v23 >= v22 >> 1) {
    uint64_t v16 = sub_18765B024((char *)(v22 > 1), v23 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v23 + 1;
  id v24 = &v16[16 * v23];
  *((void *)v24 + 4) = 12909LL;
  *((void *)v24 + 5) = 0xE200000000000000LL;
  *((void *)&v48 + 1) = v16;
  id v25 = a2;
  MEMORY[0x1895AA300]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_18769A544();
  }
  id v40 = v25;
  sub_18769A55C();
  sub_18769A538();
  uint64_t v26 = *(void *)(v48 + 16);
  unint64_t v28 = *((void *)v16 + 2);
  unint64_t v27 = *((void *)v16 + 3);
  if (v28 >= v27 >> 1) {
    uint64_t v16 = sub_18765B024((char *)(v27 > 1), v28 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v28 + 1;
  unsigned __int8 v29 = &v16[16 * v28];
  *((void *)v29 + 4) = 12658LL;
  *((void *)v29 + 5) = 0xE200000000000000LL;
  *((void *)&v48 + 1) = v16;
  id v30 = a3;
  MEMORY[0x1895AA300]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_18769A544();
  }
  uint64_t v31 = v21 - 1;
  uint64_t v32 = v26 - 1;
  uint64_t v39 = v30;
  sub_18769A55C();
  sub_18769A538();
  uint64_t v33 = *(void *)(v48 + 16) - 1LL;
  unint64_t v35 = *((void *)v16 + 2);
  unint64_t v34 = *((void *)v16 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v16 = sub_18765B024((char *)(v34 > 1), v35 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v35 + 1;
  uint64_t v36 = &v16[16 * v35];
  *((void *)v36 + 4) = 12914LL;
  *((void *)v36 + 5) = 0xE200000000000000LL;
  *((void *)&v48 + 1) = v16;
  id v37 = v42;
  MEMORY[0x1895AA300]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_18769A544();
  }
  sub_18769A55C();
  sub_18769A538();
  unint64_t v38 = v53;
  sub_18763CA88((uint64_t)&v47, v46, v53, v45, v44, v31, v32, v33, *(void *)(v48 + 16) - 1LL);
  v51[0] = v47;
  v51[1] = v48;
  v51[2] = v49;
  uint64_t v52 = v50;
  sub_187651C8C();
  sub_187648108((uint64_t)v51);
  if (v43)
  {
  }
}

uint64_t sub_18763CA88( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v15 = a2;
  uint64_t v16 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004772LL, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004872LL, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_1876586FC(0x636E45316DLL, 0xE500000000000000LL, v19, a1);

  id v21 = a5;
  uint64_t v32 = sub_1876586FC(0x636E45326DLL, 0xE500000000000000LL, v21, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18769CCC0;
  *(void *)(v22 + 32) = a6;
  *(void *)(v22 + 40) = v16;
  *(void *)(v22 + 48) = a8;
  *(void *)(v22 + 56) = v18;
  unint64_t v23 = *(void **)(a1 + 48);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v23 = sub_18765B124(0LL, v23[2] + 1LL, 1, v23);
  }
  unint64_t v25 = v23[2];
  unint64_t v24 = v23[3];
  if (v25 >= v24 >> 1) {
    unint64_t v23 = sub_18765B124((void *)(v24 > 1), v25 + 1, 1, v23);
  }
  v23[2] = v25 + 1;
  uint64_t v26 = &v23[2 * v25];
  v26[4] = v20;
  v26[5] = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v23;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_18769CCC0;
  *(void *)(v27 + 32) = a7;
  *(void *)(v27 + 40) = v16;
  *(void *)(v27 + 48) = a9;
  *(void *)(v27 + 56) = v18;
  unint64_t v28 = v23[2];
  unint64_t v29 = v23[3];
  sub_18769A52C();
  if (v28 >= v29 >> 1) {
    unint64_t v23 = sub_18765B124((void *)(v29 > 1), v28 + 1, 1, v23);
  }
  v23[2] = v28 + 1;
  id v30 = &v23[2 * v28];
  v30[4] = v32;
  v30[5] = v27;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v23;
  return result;
}

uint64_t sub_18763CCDC( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v15 = a2;
  uint64_t v16 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004772LL, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004872LL, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_18765886C(0x636E45316DLL, 0xE500000000000000LL, v19, a1);

  id v21 = a5;
  uint64_t v32 = sub_18765886C(0x636E45326DLL, 0xE500000000000000LL, v21, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18769CCC0;
  *(void *)(v22 + 32) = a6;
  *(void *)(v22 + 40) = v16;
  *(void *)(v22 + 48) = a8;
  *(void *)(v22 + 56) = v18;
  unint64_t v23 = *(void **)(a1 + 40);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v23 = sub_18765B124(0LL, v23[2] + 1LL, 1, v23);
  }
  unint64_t v25 = v23[2];
  unint64_t v24 = v23[3];
  if (v25 >= v24 >> 1) {
    unint64_t v23 = sub_18765B124((void *)(v24 > 1), v25 + 1, 1, v23);
  }
  v23[2] = v25 + 1;
  uint64_t v26 = &v23[2 * v25];
  v26[4] = v20;
  v26[5] = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v23;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_18769CCC0;
  *(void *)(v27 + 32) = a7;
  *(void *)(v27 + 40) = v16;
  *(void *)(v27 + 48) = a9;
  *(void *)(v27 + 56) = v18;
  unint64_t v28 = v23[2];
  unint64_t v29 = v23[3];
  sub_18769A52C();
  if (v28 >= v29 >> 1) {
    unint64_t v23 = sub_18765B124((void *)(v29 > 1), v28 + 1, 1, v23);
  }
  v23[2] = v28 + 1;
  id v30 = &v23[2 * v28];
  v30[4] = v32;
  v30[5] = v27;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v23;
  return result;
}

void sub_18763CF30(uint64_t a1, uint64_t a2)
{
  v3[5] = *MEMORY[0x1895F89C0];
  v3[3] = MEMORY[0x189606D70];
  v3[4] = MEMORY[0x189606D58];
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_18763CF94
     + *((int *)qword_18763D138 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x189606D70])[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_18763CFA4()
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t KVACRequestWrapper.requestData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData + 8));
  return v1;
}

id sub_18763D1A0(void *a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v28 = v4;
  id result = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (result)
  {
    char v11 = result;
    uint64_t v32 = sub_187699F98();
    unint64_t v27 = v12;

    id result = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (result)
    {
      id v13 = result;
      uint64_t v14 = sub_187699F98();
      unint64_t v16 = v15;

      if (*(void *)(a4 + 16) == 4LL)
      {
        uint64_t v17 = sub_187645DD0(a3, a4);
        if (!v5)
        {
          uint64_t v21 = v17;
          unint64_t v22 = v18;
          *(void *)&__int128 v30 = v32;
          *((void *)&v30 + 1) = v27;
          sub_187623A28(v32, v27);
          sub_187623A28(v14, v16);
          sub_18763CF30(v14, v16);
          sub_187623C58(v14, v16);
          __int128 v31 = v30;
          sub_187623A28(v32, v27);
          sub_187623A28(v21, v22);
          sub_18763CF30(v21, v22);
          sub_187623C58(v21, v22);
          sub_187623C58(v14, v16);
          sub_187623C58(v32, v27);
          sub_187623C58(v32, v27);
          sub_187623C58(v21, v22);
          *(_OWORD *)&v28[OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData] = v30;
          unint64_t v23 = &v28[OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request];
          *(void *)unint64_t v23 = a1;
          *((void *)v23 + 1) = a2;
          *((void *)v23 + 2) = a3;
          *((void *)v23 + 3) = a4;
          id v24 = a1;
          id v25 = a2;
          id v26 = a3;
          sub_18769A52C();

          v29.receiver = v28;
          v29.super_class = (Class)type metadata accessor for KVACRequestWrapper();
          id v19 = objc_msgSendSuper2(&v29, sel_init);
          swift_bridgeObjectRelease();

          return v19;
        }

        swift_bridgeObjectRelease();

        a3 = a2;
        a2 = a1;
        id v19 = v28;
        a1 = v28;
      }

      else
      {
        id v19 = v28;

        sub_18763E228();
        swift_allocError();
        *uint64_t v20 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
      }

      sub_187623C58(v14, v16);
      sub_187623C58(v32, v27);
      type metadata accessor for KVACRequestWrapper();
      swift_deallocPartialClassInstance();
      return v19;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void KVACRequestWrapper.init()()
{
}

id KVACRequestWrapper.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for KVACRequestWrapper);
}

uint64_t type metadata accessor for KVACRequestWrapper()
{
  return objc_opt_self();
}

uint64_t KVACCredentialWrapper.credentialData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData + 8));
  return v1;
}

uint64_t KVACCredentialWrapper.serverKeyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId + 8));
  return v1;
}

id sub_18763D5D8(uint64_t a1)
{
  id v3 = *(id *)a1;
  uint64_t v4 = v1;
  id v5 = objc_msgSend(v3, sel_serializedBigEndianScalar);
  if (!v5)
  {

    sub_18763E228();
    swift_allocError();
    *id v25 = 1;
    swift_willThrow();
    sub_1876463B4(a1);
    type metadata accessor for KVACCredentialWrapper();
    swift_deallocPartialClassInstance();
    return v3;
  }

  uint64_t v6 = v5;
  uint64_t v36 = sub_187699F98();
  unint64_t v8 = v7;

  id result = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }

  id v10 = result;
  uint64_t v11 = sub_187699F98();
  unint64_t v30 = v12;

  id result = objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  id v13 = result;
  uint64_t v14 = sub_187699F98();
  unint64_t v28 = v15;
  uint64_t v29 = v14;

  id result = objc_msgSend(*(id *)(a1 + 24), sel_serializedPublicKey_, 1);
  if (result)
  {
    unint64_t v16 = result;
    uint64_t v17 = sub_187699F98();
    unint64_t v31 = v18;

    __int128 v35 = *(_OWORD *)(a1 + 32);
    unint64_t v27 = (uint64_t *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId];
    *(_OWORD *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId] = v35;
    id v19 = &v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential];
    __int128 v20 = *(_OWORD *)(a1 + 32);
    __int128 v21 = *(_OWORD *)a1;
    *((_OWORD *)v19 + 1) = *(_OWORD *)(a1 + 16);
    *((_OWORD *)v19 + 2) = v20;
    *(_OWORD *)id v19 = v21;
    uint64_t v22 = v36;
    *(void *)&__int128 v33 = v36;
    *((void *)&v33 + 1) = v8;
    sub_187647FE8((uint64_t)&v35);
    sub_18764635C(a1);
    sub_187623A28(v22, v8);
    sub_187623A28(v11, v30);
    sub_18763CF30(v11, v30);
    sub_187623C58(v11, v30);
    __int128 v34 = v33;
    sub_187623A28(v33, v8);
    sub_187623A28(v29, v28);
    sub_18763CF30(v29, v28);
    sub_187623C58(v29, v28);
    sub_187623C58(v33, v8);
    sub_187623A28(v33, v8);
    uint64_t v26 = v17;
    sub_187623A28(v17, v31);
    sub_18763CF30(v17, v31);
    sub_187623C58(v17, v31);
    sub_187623C58(v33, v8);
    uint64_t v24 = *v27;
    unint64_t v23 = v27[1];
    __int128 v34 = v33;
    sub_187623A28(v24, v23);
    sub_187623A28(v33, v8);
    sub_18763CF30(v24, v23);
    sub_187623C58(v26, v31);
    sub_187623C58(v29, v28);
    sub_187623C58(v11, v30);
    sub_187623C58(v36, v8);
    sub_187623C58(v24, v23);
    sub_187623C58(v33, v8);
    *(_OWORD *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData] = v33;

    v32.receiver = v4;
    v32.super_class = (Class)type metadata accessor for KVACCredentialWrapper();
    id v3 = objc_msgSendSuper2(&v32, sel_init);
    sub_1876463B4(a1);
    return v3;
  }

LABEL_10:
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_11;
      }

  unint64_t v12 = MEMORY[0x18961AFE8];
LABEL_11:
  swift_retain();
  id v13 = swift_slowAlloc();
  if (!*(void *)(a1 + 24))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }

  if (HIDWORD(v10)) {
    goto LABEL_25;
  }
  uint64_t v14 = v13;
  if (!ccrng()) {
    goto LABEL_29;
  }
  unint64_t v27 = v12;
  unint64_t v15 = cche_relin_key_generate();
  if (v15)
  {
    unint64_t v16 = v15;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v17 = v16;
    *(_BYTE *)(v17 + 4) = 0;
    swift_willThrow();
    swift_release();
LABEL_19:
    swift_release();
    swift_retain();
    MEMORY[0x1895AB038](v14, -1LL, -1LL);
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  if (HIDWORD(v8)) {
    goto LABEL_26;
  }
  v28[0] = v11;
  unint64_t v18 = cche_relin_key_save();
  if (v18)
  {
    id v19 = v18;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)__int128 v20 = v19;
    *(_BYTE *)(v20 + 4) = 0;
    swift_willThrow();
    swift_release();
    goto LABEL_19;
  }

  if (!v25) {
    goto LABEL_27;
  }
  uint64_t v22 = sub_18768B60C(0LL, v7, v23, v26, v28, &v27);
  swift_release();
  swift_release();
  swift_retain();
  MEMORY[0x1895AB038](v14, -1LL, -1LL);
  swift_release_n();
  swift_bridgeObjectRelease();
  id result = swift_bridgeObjectRelease();
  char *v24 = v22;
  return result;
}

void KVACCredentialWrapper.__allocating_init(credentialData:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  KVACCredentialWrapper.init(credentialData:)(a1, a2);
}

void KVACCredentialWrapper.init(credentialData:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

id sub_18763D9EC( uint64_t a1, unint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, objc_super a18, int a19, int a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  uint64_t v40 = BYTE6(a2);
  uint64_t v41 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  v93 = v38;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t v42 = (unint64_t)objc_msgSend(v41, sel_groupOrderByteCountForCP_, v98);
  if ((v42 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }

  unint64_t v43 = v42;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v44 = (uint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
  if (v44 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v45 = 3 * v44;
  if ((unsigned __int128)(v44 * (__int128)3LL) >> 64 != (3 * v44) >> 63)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  unint64_t v46 = v43 + v45;
  if (__OFADD__(v43, v45))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v47 = sub_18769A3AC();
  if (__OFADD__(v46, v47))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (v40 != v46 + v47)
  {
    id v61 = v93;

    sub_18763E228();
    swift_allocError();
    *uint64_t v62 = 2;
    swift_willThrow();
    uint64_t v63 = a1;
    unint64_t v64 = a2;
LABEL_17:
    sub_187623C58(v63, v64);
    goto LABEL_18;
  }

  sub_18769A22C();
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v41, sel_groupOrderByteCountForCP_, v98) & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v48 = sub_187699FB0();
  unint64_t v50 = v49;
  int v97 = 0;
  sub_18769A22C();
  swift_dynamicCast();
  id v51 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v52 = (void *)sub_187699F80();
  id v53 = objc_msgSend(v51, sel_initWithData_inGroup_reduction_corecryptoError_, v52, v98, 0, &v97);

  if (!v53)
  {
    int v65 = v97;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v66 = v65;
    *(_BYTE *)(v66 + 4) = 0;
    swift_willThrow();
    id v61 = v93;

    sub_187623C58(a1, a2);
    uint64_t v63 = v48;
    unint64_t v64 = v50;
    goto LABEL_17;
  }

  sub_187623C58(v48, v50);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v54 = (unint64_t)objc_msgSend(v41, sel_groupOrderByteCountForCP_, v98);
  if ((v54 & 0x8000000000000000LL) != 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  __int128 v55 = (char *)v54;
  sub_18769A22C();
  swift_dynamicCast();
  int64_t v56 = (int64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
  if (v56 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if (__OFADD__(v55, v56))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  if ((uint64_t)&v55[v56] < (uint64_t)v55)
  {
LABEL_44:
    __break(1u);
    JUMPOUT(0x18763E1D4LL);
  }

  uint64_t v57 = sub_187699FB0();
  unint64_t v59 = v58;
  id v60 = sub_187646200();
  if (!v39)
  {
    id v92 = v60;
    sub_187623C58(v57, v59);
    sub_18769A22C();
    swift_dynamicCast();
    unint64_t v68 = (unint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
    if ((v68 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      BOOL v69 = __OFADD__(v55, v68);
      uint64_t v70 = &v55[v68];
      if (!v69)
      {
        sub_18769A22C();
        swift_dynamicCast();
        int64_t v71 = (int64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
        if ((v71 & 0x8000000000000000LL) == 0)
        {
          if (!__OFADD__(v70, v71))
          {
            if ((uint64_t)&v70[v71] >= (uint64_t)v70)
            {
              uint64_t v72 = sub_187699FB0();
              unint64_t v74 = v73;
              id v91 = sub_187646200();
              sub_187623C58(v72, v74);
              sub_18769A22C();
              swift_dynamicCast();
              unint64_t v75 = (unint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
              if ((v75 & 0x8000000000000000LL) == 0)
              {
                BOOL v69 = __OFADD__(v70, v75);
                id v76 = &v70[v75];
                if (!v69)
                {
                  sub_18769A22C();
                  swift_dynamicCast();
                  int64_t v77 = (int64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
                  if ((v77 & 0x8000000000000000LL) == 0)
                  {
                    if (!__OFADD__(v76, v77))
                    {
                      if ((uint64_t)&v76[v77] >= (uint64_t)v76)
                      {
                        uint64_t v78 = sub_187699FB0();
                        unint64_t v80 = v79;
                        id v90 = sub_187646200();
                        sub_187623C58(v78, v80);
                        sub_18769A22C();
                        swift_dynamicCast();
                        unint64_t v81 = (unint64_t)objc_msgSend( v41,  sel_compressedx962PointByteCountForCurveParameters_,  v98);
                        if ((v81 & 0x8000000000000000LL) == 0)
                        {
                          uint64_t v82 = &v76[v81];
                          if (!__OFADD__(v76, v81))
                          {
                            uint64_t v83 = sub_18769A3AC();
                            if (!__OFADD__(v82, v83))
                            {
                              if ((uint64_t)&v82[v83] >= (uint64_t)v82)
                              {
                                uint64_t v84 = sub_187699FB0();
                                unint64_t v86 = v85;
                                v87 = (uint64_t *)&v93[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId];
                                uint64_t *v87 = v84;
                                v87[1] = v85;
                                v88 = (uint64_t *)&v93[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData];
                                uint64_t *v88 = a1;
                                v88[1] = a2;
                                __int128 v89 = &v93[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential];
                                *(void *)__int128 v89 = v53;
                                *((void *)v89 + 1) = v92;
                                *((void *)v89 + 2) = v91;
                                *((void *)v89 + 3) = v90;
                                *((void *)v89 + 4) = v84;
                                *((void *)v89 + 5) = v85;
                                sub_187623A28(a1, a2);
                                sub_187623A28(v84, v86);

                                v96.receiver = v93;
                                v96.super_class = (Class)type metadata accessor for KVACCredentialWrapper();
                                id v61 = objc_msgSendSuper2(&v96, sel_init);
                                sub_187623C58(a1, a2);
                                return v61;
                              }

LABEL_58:
                              __break(1u);
                            }

  __break(1u);
  return result;
}

LABEL_56:
                          __break(1u);
                          goto LABEL_57;
                        }

LABEL_55:
                        __break(1u);
                        goto LABEL_56;
                      }

LABEL_54:
                      __break(1u);
                      goto LABEL_55;
                    }

LABEL_53:
                    __break(1u);
                    goto LABEL_54;
                  }

LABEL_52:
                  __break(1u);
                  goto LABEL_53;
                }

LABEL_51:
                __break(1u);
                goto LABEL_52;
              }

LABEL_50:
              __break(1u);
              goto LABEL_51;
            }

LABEL_49:
            __break(1u);
            goto LABEL_50;
          }

LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }

    __break(1u);
    goto LABEL_47;
  }

  sub_187623C58(v57, v59);
  id v61 = v93;

  sub_187623C58(a1, a2);
LABEL_18:
  type metadata accessor for KVACCredentialWrapper();
  swift_deallocPartialClassInstance();
  return v61;
}

unint64_t sub_18763E228()
{
  unint64_t result = qword_18C6D9D18;
  if (!qword_18C6D9D18)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769CE5C, &type metadata for KVACErrors);
    atomic_store(result, (unint64_t *)&qword_18C6D9D18);
  }

  return result;
}

uint64_t type metadata accessor for KVACCredentialWrapper()
{
  return objc_opt_self();
}

char *sub_18763E298(uint64_t a1, unint64_t a2)
{
  __int128 v6 = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential + 16);
  v11[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential);
  v11[1] = v6;
  _BYTE v11[2] = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential + 32);
  sub_18764635C((uint64_t)v11);
  sub_18763BF74(a1, a2, (uint64_t)v9);
  sub_1876463B4((uint64_t)v11);
  if (v3)
  {
    unint64_t result = (char *)swift_unexpectedError();
    __break(1u);
  }

  else
  {
    v10[4] = v9[4];
    v10[5] = v9[5];
    v10[6] = v9[6];
    v10[0] = v9[0];
    v10[1] = v9[1];
    v10[2] = v9[2];
    void v10[3] = v9[3];
    id v7 = objc_allocWithZone((Class)type metadata accessor for KVACPresentationWrapper());
    return sub_18763E6F0((uint64_t)v10);
  }

  return result;
}

void KVACCredentialWrapper.init()()
{
}

id KVACCredentialWrapper.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for KVACCredentialWrapper);
}

uint64_t KVACPresentationWrapper.serverKeyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.tag.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.prefix.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.presentationData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData + 8));
  return v1;
}

char *sub_18763E6F0(uint64_t a1)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  __int128 v59 = *(_OWORD *)a1;
  *(_OWORD *)id v60 = v4;
  *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 32);
  uint64_t v61 = *(void *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 88);
  __int128 v6 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)__int128 v55 = *(_OWORD *)(a1 + 56);
  __int128 v56 = v6;
  __int128 v57 = v5;
  uint64_t v58 = *(void *)(a1 + 104);
  id v7 = (void *)v59;
  uint64_t v8 = v5;
  id v9 = v1;
  sub_187647EC0((uint64_t)&v59);
  sub_1876482FC((uint64_t)v55);
  if (!objc_msgSend(v7, sel_isEqual_, v8)
    || (id v10 = *(void **)v60, (objc_msgSend(*(id *)v60, sel_isEqual_, *((void *)&v56 + 1)) & 1) == 0))
  {
    sub_18763E228();
    swift_allocError();
    *id v37 = 1;
    swift_willThrow();
    sub_187647AEC(a1);
    sub_187648368((uint64_t)v55);
    sub_187647F2C((uint64_t)&v59);
LABEL_12:

    type metadata accessor for KVACPresentationWrapper();
    swift_deallocPartialClassInstance();
    return v9;
  }

  __int128 v62 = *(_OWORD *)&v60[8];
  uint64_t v11 = &v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId];
  *(_OWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId] = *(_OWORD *)&v60[8];
  sub_187647FE8((uint64_t)&v62);
  unint64_t result = (char *)objc_msgSend(v7, sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_20;
  }

  id v13 = result;
  uint64_t v14 = sub_187699F98();
  unint64_t v16 = v15;

  unint64_t result = (char *)objc_msgSend(*((id *)&v59 + 1), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v17 = result;
  uint64_t v51 = sub_187699F98();
  unint64_t v63 = v18;

  unint64_t result = (char *)objc_msgSend(v10, sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  id v19 = result;
  uint64_t v20 = sub_187699F98();
  unint64_t v50 = v21;

  if (*(void *)(v61 + 16) != 3LL)
  {
    sub_18763E228();
    swift_allocError();
    *unint64_t v38 = 0;
    swift_willThrow();
    goto LABEL_15;
  }

  uint64_t v22 = sub_187645DD0(*(void **)&v60[24], v61);
  if (v2)
  {
LABEL_15:
    sub_187647AEC(a1);
    int v39 = 0;
LABEL_16:
    sub_187623C58(v20, v50);
    sub_187623C58(v51, v63);
    sub_187623C58(v14, v16);
    sub_187648368((uint64_t)v55);
    sub_187647F2C((uint64_t)&v59);
    sub_187623C58(*(void *)v11, *((void *)v11 + 1));
    if (v39)
    {
      sub_187623C58( *(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag],  *(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag + 8]);
      sub_187623C58( *(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix],  *(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix + 8]);
    }

    goto LABEL_12;
  }

  uint64_t v49 = v22;
  *(void *)&__int128 v54 = v14;
  *((void *)&v54 + 1) = v16;
  uint64_t v47 = v14;
  unint64_t v48 = v16;
  unint64_t v24 = v23;
  sub_187623A28(v14, v16);
  unint64_t v25 = v63;
  sub_187623A28(v51, v63);
  sub_18763CF30(v51, v25);
  sub_187623C58(v51, v25);
  __int128 v53 = v54;
  sub_187623A28(v14, *((unint64_t *)&v54 + 1));
  sub_187623A28(v20, v50);
  sub_18763CF30(v20, v50);
  sub_187623C58(v20, v50);
  sub_187623C58(v14, *((unint64_t *)&v54 + 1));
  sub_187623A28(v14, *((unint64_t *)&v54 + 1));
  sub_187623A28(v49, v24);
  sub_18763CF30(v49, v24);
  unint64_t v46 = v24;
  sub_187623C58(v49, v24);
  sub_187623C58(v14, *((unint64_t *)&v54 + 1));
  __int128 v26 = v54;
  unint64_t result = (char *)objc_msgSend(v55[0], sel_serializedPublicKey_, 1);
  if (result)
  {
    unint64_t v27 = result;
    uint64_t v28 = sub_187699F98();
    uint64_t v30 = v29;

    unint64_t v31 = (uint64_t *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag];
    *(void *)&__int128 v45 = v28;
    *((void *)&v45 + 1) = v30;
    *unint64_t v31 = v28;
    v31[1] = v30;
    id v32 = v55[1];
    unint64_t v33 = v56;
    __int128 v34 = &v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix];
    *(id *)__int128 v34 = v55[1];
    *((void *)v34 + 1) = v33;
    uint64_t v35 = v58;
    if (*(void *)(v58 + 16) == 2LL)
    {
      uint64_t v36 = (void *)*((void *)&v57 + 1);
      sub_187623A28((uint64_t)v32, v33);
      uint64_t v44 = sub_187645DD0(v36, v35);
      __int128 v53 = v45;
      unint64_t v43 = v41;
      sub_187623A28(v45, *((unint64_t *)&v45 + 1));
      sub_187623A28((uint64_t)v32, v33);
      sub_187623A28(v45, *((unint64_t *)&v45 + 1));
      sub_18763CF30((uint64_t)v32, v33);
      sub_187623C58((uint64_t)v32, v33);
      sub_187623C58(v45, *((unint64_t *)&v45 + 1));
      __int128 v54 = v45;
      sub_187623A28(v45, *((unint64_t *)&v45 + 1));
      sub_187623A28(v44, v43);
      sub_18763CF30(v44, v43);
      sub_187623C58(v44, v43);
      sub_187623C58(v45, *((unint64_t *)&v45 + 1));
      unint64_t v42 = *((void *)v11 + 1);
      *(void *)&__int128 v53 = *(void *)v11;
      *((void *)&v53 + 1) = v42;
      sub_187623A28(v53, v42);
      sub_187623A28(v53, v42);
      sub_187623A28(v26, *((unint64_t *)&v26 + 1));
      sub_18763CF30(v26, *((uint64_t *)&v26 + 1));
      sub_187623C58(v26, *((unint64_t *)&v26 + 1));
      sub_187623C58(v53, v42);
      __int128 v54 = v53;
      sub_187623A28(v53, v42);
      sub_187623A28(v45, *((unint64_t *)&v45 + 1));
      sub_18763CF30(v45, *((uint64_t *)&v45 + 1));
      sub_187623C58(v45, *((unint64_t *)&v45 + 1));
      sub_187623C58(v44, v43);
      sub_187623C58(v26, *((unint64_t *)&v26 + 1));
      sub_187623C58(v49, v46);
      sub_187623C58(v20, v50);
      sub_187623C58(v51, v63);
      sub_187623C58(v47, v48);
      sub_187648368((uint64_t)v55);
      sub_187647F2C((uint64_t)&v59);
      sub_187623C58(v53, v42);
      sub_187623C58(v45, *((unint64_t *)&v45 + 1));
      *(_OWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData] = v53;

      v52.receiver = v9;
      v52.super_class = (Class)type metadata accessor for KVACPresentationWrapper();
      id v9 = (char *)objc_msgSendSuper2(&v52, sel_init);
      sub_187647AEC(a1);
      return v9;
    }

    sub_18763E228();
    swift_allocError();
    *uint64_t v40 = 0;
    sub_187623A28((uint64_t)v32, v33);
    swift_willThrow();
    sub_187647AEC(a1);
    sub_187623C58(v26, *((unint64_t *)&v26 + 1));
    sub_187623C58(v49, v24);
    int v39 = 1;
    uint64_t v14 = v47;
    unint64_t v16 = v48;
    goto LABEL_16;
  }

LABEL_22:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void KVACPresentationWrapper.init()()
{
}

id KVACPresentationWrapper.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for KVACPresentationWrapper);
}

char *KVACClient.__allocating_init(tokenChallenge:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return KVACClient.init(tokenChallenge:)(a1, a2);
}

char *KVACClient.init(tokenChallenge:)(uint64_t a1, unint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v4 = sub_18769A46C();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  id v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v34 = v2;
  uint64_t v8 = sub_18763B1DC(0xD000000000000027LL, 0x80000001876A0730LL);
  unint64_t v10 = v9;
  sub_18769A448();
  uint64_t v11 = sub_18769A43C();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v13 >> 60 == 15)
  {
    __break(1u);
LABEL_14:
    unint64_t result = (char *)swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v38 = v11;
  *(void *)&__int128 v39 = v13;
  sub_18764642C(v11, v13);
  sub_187623A28(v8, v10);
  sub_18763CF30(v8, v10);
  sub_187623C58(v8, v10);
  sub_1876482B4(v11, v13);
  uint64_t v15 = v38;
  unint64_t v14 = v39;
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  uint64_t v16 = sub_18769A220();
  uint64_t v17 = v35;
  uint64_t v18 = v36;
  uint64_t v19 = sub_187641FD8(v36, a2, 1LL, v15, v14, v16, 0);
  uint64_t v35 = v17;
  if (v17)
  {
    sub_187623C58(v15, v14);
    uint64_t v20 = v34;

    sub_187623C58(v18, a2);
    sub_187623C58(v8, v10);
    goto LABEL_10;
  }

  unint64_t v33 = a2;
  if (!*(void *)(v19 + 16)) {
    goto LABEL_14;
  }
  id v21 = *(id *)(v19 + 32);
  swift_bridgeObjectRelease();
  sub_187623C58(v15, v14);
  sub_187623C58(v8, v10);
  id v22 = v21;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v42);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v24 = (uint64_t)result;
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v42);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v25 = (uint64_t)result;
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v42);
  if (result)
  {
    uint64_t v26 = v35;
    sub_18763F2F0(4LL, v24, (uint64_t)v22, v25, (uint64_t)result, &v38);
    unint64_t v27 = v33;
    uint64_t v28 = v36;
    if (!v26)
    {

      id v29 = v34;
      uint64_t v30 = &v34[OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client];
      *(void *)uint64_t v30 = v38;
      *(_OWORD *)(v30 + 8) = v39;
      *(_OWORD *)(v30 + 24) = v40;
      *(_OWORD *)(v30 + 40) = v41;

      unint64_t v31 = (objc_class *)type metadata accessor for KVACClient();
      v37.receiver = v29;
      v37.super_class = v31;
      uint64_t v20 = (char *)objc_msgSendSuper2(&v37, sel_init);
      sub_187623C58(v28, v27);
      return v20;
    }

    sub_187623C58(v36, v33);

    uint64_t v20 = v34;
LABEL_10:
    type metadata accessor for KVACClient();
    swift_deallocPartialClassInstance();
    return v20;
  }

uint64_t sub_18763F2F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v25);
  id v10 = objc_msgSend(v9, sel_serializedPublicKey_, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = sub_187699F98();
    unint64_t v14 = v13;

    uint64_t v15 = sub_18763B1DC(0xD000000000000023LL, 0x80000001876A0A90LL);
    unint64_t v17 = v16;
    sub_187651220(v12, v14, v15, v16);
    if (!v6)
    {
      uint64_t v19 = v18;
      sub_187623C58(v15, v17);
      uint64_t result = sub_187623C58(v12, v14);
      *a6 = a1;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      a6[4] = a5;
      a6[5] = v9;
      a6[6] = v19;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

id sub_18763F4B0()
{
  if (v1)
  {
    id result = (id)swift_unexpectedError();
    __break(1u);
  }

  else
  {
    uint64_t v6 = v2;
    id v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    id v10 = objc_allocWithZone((Class)type metadata accessor for KVACRequestWrapper());
    return sub_18763D1A0(v6, v7, v8, v9);
  }

  return result;
}

id sub_18763F6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 8);
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 24);
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 32);
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 40);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 48);
  __int128 v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 80);
  v27[4] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 64);
  v27[5] = v8;
  uint64_t v28 = *(void *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 96);
  __int128 v9 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 16);
  v27[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance);
  v27[1] = v9;
  __int128 v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 48);
  v27[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 32);
  v27[3] = v10;
  uint64_t v11 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request);
  uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request + 8);
  unint64_t v13 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request + 16);
  sub_187646460((uint64_t)v27);
  id v14 = v11;
  id v15 = v12;
  id v16 = v13;
  sub_18769A52C();
  id v17 = v3;
  id v18 = v4;
  id v19 = v5;
  id v20 = v7;
  id v21 = v6;
  uint64_t v22 = v29;
  sub_18763B790((uint64_t)v27, v14, v15, v16, v17, v18, v19, (uint64_t)v25, v20, v21);
  if (v22)
  {
    id result = (id)swift_unexpectedError();
    __break(1u);
  }

  else
  {
    v26[0] = v25[0];
    v26[1] = v25[1];
    v26[2] = v25[2];
    id v23 = objc_allocWithZone((Class)type metadata accessor for KVACCredentialWrapper());
    return sub_18763D5D8((uint64_t)v26);
  }

  return result;
}

id KVACClient.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void KVACClient.init()()
{
}

id KVACClient.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for KVACClient);
}

uint64_t KVACIssuanceWrapper.keyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId + 8));
  return v1;
}

uint64_t KVACIssuanceWrapper.issuanceData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData + 8));
  return v1;
}

id sub_18763FA90(uint64_t a1)
{
  __int128 v67 = *(_OWORD *)(a1 + 72);
  uint64_t v4 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId];
  *(_OWORD *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId] = v67;
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = v1;
  sub_187647FE8((uint64_t)&v67);
  id result = objc_msgSend(v5, sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  __int128 v8 = result;
  uint64_t v9 = sub_187699F98();
  unint64_t v11 = v10;

  id result = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v12 = result;
  uint64_t v68 = sub_187699F98();
  unint64_t v14 = v13;

  id result = objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  id v15 = result;
  uint64_t v62 = sub_187699F98();
  unint64_t v63 = v16;

  id result = objc_msgSend(*(id *)(a1 + 24), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  id v17 = result;
  uint64_t v54 = sub_187699F98();
  unint64_t v61 = v18;

  id result = objc_msgSend(*(id *)(a1 + 32), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  id v19 = result;
  uint64_t v59 = sub_187699F98();
  unint64_t v60 = v20;

  id result = objc_msgSend(*(id *)(a1 + 40), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  id v21 = result;
  uint64_t v53 = sub_187699F98();
  unint64_t v58 = v22;

  id result = objc_msgSend(*(id *)(a1 + 48), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  id v23 = result;
  uint64_t v56 = sub_187699F98();
  unint64_t v57 = v24;

  id result = objc_msgSend(*(id *)(a1 + 56), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v25 = result;
  uint64_t v49 = v4;
  uint64_t v26 = sub_187699F98();
  unint64_t v51 = v27;
  uint64_t v52 = v26;

  id result = objc_msgSend(*(id *)(a1 + 64), sel_serializedPublicKey_, 1);
  uint64_t v50 = a1;
  if (result)
  {
    uint64_t v28 = result;
    uint64_t v55 = sub_187699F98();
    unint64_t v30 = v29;

    *(void *)&__int128 v65 = v9;
    *((void *)&v65 + 1) = v11;
    unint64_t v48 = v11;
    sub_187623A28(v9, v11);
    uint64_t v31 = v68;
    sub_187623A28(v68, v14);
    sub_18763CF30(v31, v14);
    sub_187623C58(v31, v14);
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v62, v63);
    sub_18763CF30(v62, v63);
    sub_187623C58(v62, v63);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v54, v61);
    sub_18763CF30(v54, v61);
    sub_187623C58(v54, v61);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v59, v60);
    sub_18763CF30(v59, v60);
    sub_187623C58(v59, v60);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v53, v58);
    sub_18763CF30(v53, v58);
    sub_187623C58(v53, v58);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v56, v57);
    sub_18763CF30(v56, v57);
    sub_187623C58(v56, v57);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v52, v51);
    sub_18763CF30(v52, v51);
    sub_187623C58(v52, v51);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    __int128 v66 = v65;
    sub_187623A28(v9, *((unint64_t *)&v65 + 1));
    sub_187623A28(v55, v30);
    sub_18763CF30(v55, v30);
    sub_187623C58(v55, v30);
    sub_187623C58(v9, *((unint64_t *)&v65 + 1));
    __int128 v32 = v65;
    uint64_t v33 = *(void *)(v50 + 96);
    if (*(void *)(v33 + 16) == 7LL)
    {
      uint64_t v34 = sub_187645DD0(*(void **)(v50 + 88), v33);
      uint64_t v36 = v4;
      if (!v2)
      {
        uint64_t v37 = v34;
        unint64_t v38 = *((void *)v4 + 1);
        *(void *)&__int128 v65 = *(void *)v49;
        *((void *)&v65 + 1) = v38;
        unint64_t v47 = v35;
        sub_187623A28(v65, v38);
        sub_187623A28(v65, v38);
        sub_187623A28(v32, *((unint64_t *)&v32 + 1));
        sub_18763CF30(v32, *((uint64_t *)&v32 + 1));
        sub_187623C58(v32, *((unint64_t *)&v32 + 1));
        sub_187623C58(v65, v38);
        __int128 v66 = v65;
        sub_187623A28(v65, v38);
        sub_187623A28(v37, v47);
        sub_18763CF30(v37, v47);
        sub_187623C58(v37, v47);
        sub_187623C58(v32, *((unint64_t *)&v32 + 1));
        sub_187623C58(v55, v30);
        sub_187623C58(v52, v51);
        sub_187623C58(v56, v57);
        sub_187623C58(v53, v58);
        sub_187623C58(v59, v60);
        sub_187623C58(v54, v61);
        sub_187623C58(v62, v63);
        sub_187623C58(v68, v14);
        sub_187623C58(v9, v48);
        sub_187623C58(v65, v38);
        sub_187623C58(v37, v47);
        *(_OWORD *)&v6[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData] = v65;
        __int128 v39 = &v6[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance];
        __int128 v41 = *(_OWORD *)(v50 + 16);
        __int128 v40 = *(_OWORD *)(v50 + 32);
        *(_OWORD *)__int128 v39 = *(_OWORD *)v50;
        *((_OWORD *)v39 + 1) = v41;
        *((_OWORD *)v39 + 2) = v40;
        __int128 v43 = *(_OWORD *)(v50 + 64);
        __int128 v42 = *(_OWORD *)(v50 + 80);
        __int128 v44 = *(_OWORD *)(v50 + 48);
        *((void *)v39 + 12) = *(void *)(v50 + 96);
        *((_OWORD *)v39 + 4) = v43;
        *((_OWORD *)v39 + 5) = v42;
        *((_OWORD *)v39 + 3) = v44;
        sub_187646460(v50);

        v64.receiver = v6;
        v64.super_class = (Class)type metadata accessor for KVACIssuanceWrapper();
        id v45 = objc_msgSendSuper2(&v64, sel_init);
        sub_187648014(v50);
        return v45;
      }
    }

    else
    {
      sub_18763E228();
      swift_allocError();
      _BYTE *v46 = 0;
      swift_willThrow();
      uint64_t v36 = v4;
    }

    sub_187648014(v50);
    sub_187623C58(v32, *((unint64_t *)&v32 + 1));
    sub_187623C58(v55, v30);
    sub_187623C58(v52, v51);
    sub_187623C58(v56, v57);
    sub_187623C58(v53, v58);
    sub_187623C58(v59, v60);
    sub_187623C58(v54, v61);
    sub_187623C58(v62, v63);
    sub_187623C58(v68, v14);
    sub_187623C58(v9, v48);
    sub_187623C58(*(void *)v36, *((void *)v36 + 1));
    id v45 = v6;

    type metadata accessor for KVACIssuanceWrapper();
    swift_deallocPartialClassInstance();
    return v45;
  }

LABEL_24:
  __break(1u);
  return result;
}

      __break(1u);
    }

        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }

void KVACIssuanceWrapper.__allocating_init(issuanceData:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  KVACIssuanceWrapper.init(issuanceData:)(a1, a2);
}

void KVACIssuanceWrapper.init(issuanceData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  id v5 = v2;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t v6 = (unint64_t)objc_msgSend(v4, sel_groupOrderByteCountForCP_, v7);
  if ((v6 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if ((v6 - 0x1000000000000000LL) >> 61 == 7)
  {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187640D08LL);
}

uint64_t sub_187641130( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6 = a3;
  uint64_t v7 = sub_187699F98();
  uint64_t v9 = v8;

  return a5(v7, v9);
}

void KVACIssuanceWrapper.init()()
{
}

id KVACIssuanceWrapper.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for KVACIssuanceWrapper);
}

id sub_187641328(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_187623A28(*v3, v5);
  id v6 = (void *)sub_187699F80();
  sub_187623C58(v4, v5);
  return v6;
}

uint64_t KVACServer.keyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId + 8));
  return v1;
}

id KVACServer.init()()
{
  uint64_t v1 = v0;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v3 = result;
  sub_18769A22C();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v4 = result;
  sub_18769A22C();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v5 = result;
  sub_18769A22C();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v12);
  if (result)
  {
    sub_187639A54(4LL, v3, v4, v5, result, &v13);
    uint64_t v7 = v18;
    uint64_t v6 = v19;
    unint64_t v8 = v20;
    uint64_t v9 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
    *(void *)uint64_t v9 = v13;
    *(_OWORD *)(v9 + 8) = v14;
    *(_OWORD *)(v9 + 24) = v15;
    *(_OWORD *)(v9 + 40) = v16;
    *(_OWORD *)(v9 + 56) = v17;
    *((void *)v9 + 9) = v7;
    *((void *)v9 + 10) = v6;
    *((void *)v9 + 11) = v8;
    unint64_t v10 = (uint64_t *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId];
    *unint64_t v10 = v6;
    v10[1] = v8;
    sub_187623A28(v6, v8);

    v11.receiver = v1;
    v11.super_class = (Class)type metadata accessor for KVACServer();
    return objc_msgSendSuper2(&v11, sel_init);
  }

LABEL_9:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    goto LABEL_16;
  }
  sub_187638644(*(void *)(a1 + 32), *(void *)(a1 + 40));
  if ((v12 & 1) == 0) {
    goto LABEL_16;
  }
  sub_187638644(*(void *)(a1 + 56), *(void *)(a1 + 64));
  if ((v13 & 1) == 0) {
    goto LABEL_16;
  }
  __int128 v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  __int128 v15 = a1 + *(int *)(v14 + 48);
  __int128 v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v10, v15, v4);
  v16(v8, a2 + *(int *)(v14 + 48), v4);
  sub_187639840(&qword_18C6DA200, (uint64_t (*)(uint64_t))MEMORY[0x189610108], MEMORY[0x189610120]);
  __int128 v17 = sub_18769A424();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  return v17 & 1;
}

      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }

      __break(1u);
      goto LABEL_10;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  goto LABEL_9;
}

  __break(1u);
  return result;
}

    uint64_t v9 = 0;
    goto LABEL_10;
  }

  if (v8) {
    goto LABEL_9;
  }
  if (!a3) {
LABEL_12:
  }
    __break(1u);
  __break(1u);
  return result;
}

char *sub_18764164C(uint64_t a1, uint64_t a2)
{
  if (!v3)
  {
    unint64_t v8 = v4;
    uint64_t v9 = v5;
    unint64_t v10 = v6;
    uint64_t v11 = v7;
    __int128 v12 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 48];
    v20[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 32];
    v20[3] = v12;
    __int128 v13 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 80];
    v20[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 64];
    v20[5] = v13;
    __int128 v14 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 16];
    v20[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
    v20[1] = v14;
    sub_18764700C((uint64_t)v20);
    sub_187639CCC(v8, v9, v10, v11, v16);
    sub_1876470A0((uint64_t)v20);
    v18[4] = v16[4];
    v18[5] = v16[5];
    uint64_t v19 = v17;
    v18[0] = v16[0];
    v18[1] = v16[1];
    void v18[2] = v16[2];
    v18[3] = v16[3];
    objc_allocWithZone((Class)type metadata accessor for KVACIssuanceWrapper());
    uint64_t v2 = (char *)sub_18763FA90((uint64_t)v18);
    swift_bridgeObjectRelease();
  }

  return v2;
}

uint64_t sub_18764185C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_18769A46C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_187647138(a1, a2);
  uint64_t v12 = sub_18763B1DC(0xD000000000000027LL, 0x80000001876A0730LL);
  unint64_t v14 = v13;
  sub_18769A448();
  uint64_t v15 = sub_18769A43C();
  unint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v17 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_17;
  }

  *(void *)&__int128 v75 = v15;
  *((void *)&v75 + 1) = v17;
  sub_18764642C(v15, v17);
  sub_187623A28(v12, v14);
  sub_18763CF30(v12, v14);
  sub_187623C58(v12, v14);
  sub_1876482B4(v15, v17);
  uint64_t v15 = *((void *)&v75 + 1);
  uint64_t v11 = (char *)v75;
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  uint64_t v18 = sub_18769A220();
  uint64_t v19 = sub_187641FD8(a3, a4, 1LL, (uint64_t)v11, v15, v18, 0);
  if (!*(void *)(v19 + 16))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    sub_187623C58((uint64_t)v11, v15);
    sub_187623C58(v12, v14);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  id v20 = *(id *)(v19 + 32);
  swift_bridgeObjectRelease();
  sub_187623C58((uint64_t)v11, v15);
  sub_187623C58(v12, v14);
  __int128 v76 = v64;
  __int128 v77 = v65;
  __int128 v75 = v63;
  uint64_t v78 = v66;
  uint64_t v21 = *((void *)&v64 + 1);
  unint64_t v22 = v65;
  id v23 = v62;
  sub_187623A28(*((uint64_t *)&v64 + 1), v65);
  sub_187638644(v21, v22);
  char v25 = v24;
  sub_187623C58(v21, v22);
  if ((v25 & 1) == 0)
  {

    goto LABEL_8;
  }

  uint64_t v26 = &v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
  unint64_t v27 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 8];
  uint64_t v28 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 16];
  unint64_t v57 = 0LL;
  unint64_t v29 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 24];
  unint64_t v30 = (void *)*((void *)v26 + 4);
  id v61 = v20;
  uint64_t v31 = (void *)*((void *)v26 + 5);
  __int128 v32 = (void *)*((void *)v26 + 6);
  uint64_t v33 = (void *)*((void *)v26 + 7);
  uint64_t v62 = (char *)*((void *)v26 + 8);
  unint64_t v35 = (void *)*((void *)v26 + 9);
  uint64_t v34 = *((void *)v26 + 10);
  uint64_t v36 = (char *)*((void *)v26 + 11);
  __int128 v71 = v67;
  __int128 v72 = v68;
  __int128 v73 = v69;
  uint64_t v74 = v70;
  uint64_t v56 = *((void *)&v67 + 1);
  uint64_t v55 = v68;
  id v37 = v27;
  id v60 = v28;
  id v38 = v29;
  id v59 = v30;
  id v58 = v31;
  id v39 = v32;
  id v40 = v33;
  __int128 v41 = v62;
  id v42 = v35;
  uint64_t v62 = v36;
  unint64_t v43 = (unint64_t)v36;
  __int128 v44 = v38;
  sub_187623A28(v34, v43);
  id v45 = v57;
  int v46 = sub_187642898(v56, v55, v42);
  if (v45)
  {

    sub_187623C58(v34, (unint64_t)v62);
LABEL_8:
    sub_187647AEC((uint64_t)&v63);
    return 0LL;
  }

  int v47 = v46;
  int v48 = sub_18763ABC4((uint64_t)v37, (uint64_t)v60, v44, v39, (uint64_t)v61, v34, (uint64_t)v62, v41, v42);
  LODWORD(v55) = v48;
  id v50 = v58;
  LODWORD(v57) = v47;
  id v51 = v59;
  id v52 = v60;
  uint64_t v56 = v34;
  if (objc_msgSend(*((id *)&v72 + 1), sel_isEqual_, (void)v76))
  {
    unsigned int v53 = objc_msgSend((id)v73, sel_isEqual_, (void)v75);

    sub_187623C58(v56, (unint64_t)v62);
    sub_187647AEC((uint64_t)&v63);
    return 0LL;
  }

  sub_187623C58(v56, (unint64_t)v62);
  sub_187647AEC((uint64_t)&v63);
  unsigned int v53 = 0;
  uint64_t result = 0LL;
  return result;
}

id KVACServer.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for KVACServer);
}

id sub_187641EF8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_187641FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (a3 < 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v10 = a3;
  if ((unsigned __int128)(a3 * (__int128)a6) >> 64 != (a3 * a6) >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v12 = sub_187642FC8(a1, a2, a4, a5, a3 * a6);
  if (v8) {
    return v7;
  }
  uint64_t v14 = v12;
  unint64_t v15 = v13;
  uint64_t v33 = MEMORY[0x1895AA3F0](0LL, v10, 0LL, MEMORY[0x18961AFE8]);
  sub_18769A538();
  sub_18769A37C();
  uint64_t v16 = 0LL;
  unsigned int v30 = a7 & 1;
  uint64_t v29 = v14;
  do
  {
    if (v10 == v16)
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    uint64_t v17 = v16 * a6;
    if (__OFADD__(v17, a6)) {
      goto LABEL_20;
    }
    if (v17 + a6 < v17) {
      goto LABEL_21;
    }
    uint64_t v18 = v10;
    unint64_t v19 = v15;
    uint64_t v20 = sub_187699FB0();
    unint64_t v22 = v21;
    unsigned int v32 = 0;
    sub_187623A28(v20, v21);
    sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
    sub_18769A22C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
    swift_dynamicCast();
    id v23 = objc_allocWithZone(MEMORY[0x18960F078]);
    char v24 = (void *)sub_187699F80();
    id v25 = objc_msgSend(v23, sel_initWithData_inGroup_reduction_corecryptoError_, v24, v31, v30, &v32);
    sub_187623C58(v20, v22);

    if (!v25)
    {
      uint64_t v7 = v32;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v26 = v7;
      *(_BYTE *)(v26 + 4) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      sub_187623C58(v29, v19);
      sub_187623C58(v20, v22);
      return v7;
    }

    MEMORY[0x1895AA300]();
    if (*(void *)(v33 + 16) >= *(void *)(v33 + 24) >> 1) {
      sub_18769A544();
    }
    ++v16;
    sub_18769A55C();
    sub_18769A538();
    sub_187623C58(v20, v22);
    uint64_t v10 = v18;
    unint64_t v15 = v19;
  }

  while (v18 != v16);
  uint64_t v7 = v33;
  uint64_t v28 = *(void *)(v33 + 16);
  sub_187623C58(v29, v19);
  if (v28 != v18) {
LABEL_24:
  }
    __break(1u);
  return v7;
}

uint64_t sub_1876422E8( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v18 = a2;
  uint64_t v40 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004772LL, v18, a1);

  id v19 = a3;
  uint64_t v20 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004872LL, v19, a1);

  id v21 = a4;
  uint64_t v22 = sub_1876586FC(85LL, 0xE100000000000000LL, v21, a1);

  id v23 = a5;
  sub_1876586FC(0x6F43656D69725055LL, 0xEC00000074696D6DLL, v23, a1);

  id v24 = a6;
  uint64_t v25 = sub_1876586FC(0x74696D6D6F43316DLL, 0xE800000000000000LL, v24, a1);

  id v26 = a7;
  uint64_t v39 = sub_1876586FC(86LL, 0xE100000000000000LL, v26, a1);

  id v27 = a8;
  uint64_t v28 = sub_1876586FC(12632LL, 0xE200000000000000LL, v27, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_18769CCC0;
  *(void *)(v29 + 32) = a9;
  *(void *)(v29 + 40) = v22;
  *(void *)(v29 + 48) = a10;
  *(void *)(v29 + 56) = v20;
  unsigned int v30 = *(void **)(a1 + 48);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v30 = sub_18765B124(0LL, v30[2] + 1LL, 1, v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    unsigned int v30 = sub_18765B124((void *)(v31 > 1), v32 + 1, 1, v30);
  }
  v30[2] = v32 + 1;
  uint64_t v33 = &v30[2 * v32];
  v33[4] = v25;
  v33[5] = v29;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v30;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_18769CCC0;
  *(void *)(v34 + 32) = a10;
  *(void *)(v34 + 40) = v28;
  *(void *)(v34 + 48) = a11;
  *(void *)(v34 + 56) = v40;
  unint64_t v35 = v30[2];
  unint64_t v36 = v30[3];
  sub_18769A52C();
  if (v35 >= v36 >> 1) {
    unsigned int v30 = sub_18765B124((void *)(v36 > 1), v35 + 1, 1, v30);
  }
  v30[2] = v35 + 1;
  id v37 = &v30[2 * v35];
  v37[4] = v39;
  v37[5] = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v30;
  return result;
}

uint64_t sub_1876425C0( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v18 = a2;
  uint64_t v40 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004772LL, v18, a1);

  id v19 = a3;
  uint64_t v20 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004872LL, v19, a1);

  id v21 = a4;
  uint64_t v22 = sub_18765886C(85LL, 0xE100000000000000LL, v21, a1);

  id v23 = a5;
  sub_18765886C(0x6F43656D69725055LL, 0xEC00000074696D6DLL, v23, a1);

  id v24 = a6;
  uint64_t v25 = sub_18765886C(0x74696D6D6F43316DLL, 0xE800000000000000LL, v24, a1);

  id v26 = a7;
  uint64_t v39 = sub_18765886C(86LL, 0xE100000000000000LL, v26, a1);

  id v27 = a8;
  uint64_t v28 = sub_18765886C(12632LL, 0xE200000000000000LL, v27, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_18769CCC0;
  *(void *)(v29 + 32) = a9;
  *(void *)(v29 + 40) = v22;
  *(void *)(v29 + 48) = a10;
  *(void *)(v29 + 56) = v20;
  unsigned int v30 = *(void **)(a1 + 40);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v30 = sub_18765B124(0LL, v30[2] + 1LL, 1, v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    unsigned int v30 = sub_18765B124((void *)(v31 > 1), v32 + 1, 1, v30);
  }
  v30[2] = v32 + 1;
  uint64_t v33 = &v30[2 * v32];
  v33[4] = v25;
  v33[5] = v29;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v30;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_18769CCC0;
  *(void *)(v34 + 32) = a10;
  *(void *)(v34 + 40) = v28;
  *(void *)(v34 + 48) = a11;
  *(void *)(v34 + 56) = v40;
  unint64_t v35 = v30[2];
  unint64_t v36 = v30[3];
  sub_18769A52C();
  if (v35 >= v36 >> 1) {
    unsigned int v30 = sub_18765B124((void *)(v36 > 1), v35 + 1, 1, v30);
  }
  v30[2] = v35 + 1;
  id v37 = &v30[2 * v35];
  v37[4] = v39;
  v37[5] = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v30;
  return result;
}

uint64_t sub_187642898(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = sub_18763B1DC(0xD00000000000001CLL, 0x80000001876A09E0LL);
  unint64_t v10 = v9;
  sub_187651220(a1, a2, v8, v9);
  if (v4)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }

  else
  {
    uint64_t v12 = v11;
    sub_187623C58(v8, v10);
    *(void *)&__int128 v22 = 0xD00000000000001CLL;
    *((void *)&v22 + 1) = 0x80000001876A09E0LL;
    *((void *)&v23 + 1) = MEMORY[0x18961AFE8];
    *(void *)&__int128 v24 = MEMORY[0x18961AFE8];
    *((void *)&v24 + 1) = MEMORY[0x18961AFE8];
    unint64_t v13 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v15 = *((void *)v13 + 2);
    unint64_t v14 = *((void *)v13 + 3);
    unint64_t v16 = v14 >> 1;
    unint64_t v17 = v15 + 1;
    if (v14 >> 1 <= v15)
    {
      unint64_t v13 = sub_18765B024((char *)(v14 > 1), v15 + 1, 1, v13);
      unint64_t v14 = *((void *)v13 + 3);
      unint64_t v16 = v14 >> 1;
    }

    *((void *)v13 + 2) = v17;
    id v18 = &v13[16 * v15];
    *((void *)v18 + 4) = 12653LL;
    *((void *)v18 + 5) = 0xE200000000000000LL;
    if (v16 <= v17) {
      unint64_t v13 = sub_18765B024((char *)(v14 > 1), v15 + 2, 1, v13);
    }
    *((void *)v13 + 2) = v15 + 2;
    id v19 = &v13[16 * v17];
    *((void *)v19 + 4) = 122LL;
    *((void *)v19 + 5) = 0xE100000000000000LL;
    *(void *)&__int128 v23 = v13;
    sub_187642D70( (uint64_t)&v22,  a3,  v12,  *(void **)v3,  *(void **)(v3 + 32),  *(void **)(v3 + 24),  v15,  *((void *)v13 + 2) - 1LL);
    __int128 v25 = v22;
    __int128 v26 = v23;
    __int128 v27 = v24;
    char v20 = sub_187651DE4(*(void *)(v3 + 40), *(void *)(v3 + 48));

    __int128 v28 = v25;
    sub_187647F98((uint64_t)&v28);
    uint64_t v29 = v26;
    sub_187647FC0((uint64_t)&v29);
    uint64_t v30 = *((void *)&v26 + 1);
    sub_187647FC0((uint64_t)&v30);
    uint64_t v31 = v27;
    sub_187647FC0((uint64_t)&v31);
    uint64_t v32 = *((void *)&v27 + 1);
    sub_187647FC0((uint64_t)&v32);
    return v20 & 1;
  }

  return result;
}

uint64_t sub_187642B18(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15 = a2;
  uint64_t v16 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004872LL, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000005472LL, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_1876586FC(84LL, 0xE100000000000000LL, v19, a1);

  id v21 = a5;
  uint64_t v22 = sub_1876586FC(85LL, 0xE100000000000000LL, v21, a1);

  id v23 = a6;
  uint64_t v24 = sub_1876586FC(0x74696D6D6F43316DLL, 0xE800000000000000LL, v23, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18769CCC0;
  *(void *)(v25 + 32) = a7;
  *(void *)(v25 + 40) = v22;
  *(void *)(v25 + 48) = a8;
  *(void *)(v25 + 56) = v16;
  __int128 v26 = *(void **)(a1 + 48);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v26 = sub_18765B124(0LL, v26[2] + 1LL, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    __int128 v26 = sub_18765B124((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  uint64_t v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v26;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_18769C700;
  *(void *)(v30 + 32) = a7;
  *(void *)(v30 + 40) = v18;
  unint64_t v31 = v26[2];
  unint64_t v32 = v26[3];
  sub_18769A52C();
  if (v31 >= v32 >> 1) {
    __int128 v26 = sub_18765B124((void *)(v32 > 1), v31 + 1, 1, v26);
  }
  v26[2] = v31 + 1;
  uint64_t v33 = &v26[2 * v31];
  v33[4] = v20;
  v33[5] = v30;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v26;
  return result;
}

uint64_t sub_187642D70(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15 = a2;
  uint64_t v16 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004872LL, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000005472LL, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_18765886C(84LL, 0xE100000000000000LL, v19, a1);

  id v21 = a5;
  uint64_t v22 = sub_18765886C(85LL, 0xE100000000000000LL, v21, a1);

  id v23 = a6;
  uint64_t v24 = sub_18765886C(0x74696D6D6F43316DLL, 0xE800000000000000LL, v23, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18769CCC0;
  *(void *)(v25 + 32) = a7;
  *(void *)(v25 + 40) = v22;
  *(void *)(v25 + 48) = a8;
  *(void *)(v25 + 56) = v16;
  __int128 v26 = *(void **)(a1 + 40);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v26 = sub_18765B124(0LL, v26[2] + 1LL, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    __int128 v26 = sub_18765B124((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  uint64_t v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v26;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_18769C700;
  *(void *)(v30 + 32) = a7;
  *(void *)(v30 + 40) = v18;
  unint64_t v31 = v26[2];
  unint64_t v32 = v26[3];
  sub_18769A52C();
  if (v31 >= v32 >> 1) {
    __int128 v26 = sub_18765B124((void *)(v32 > 1), v31 + 1, 1, v26);
  }
  v26[2] = v31 + 1;
  uint64_t v33 = &v26[2 * v31];
  v33[4] = v20;
  v33[5] = v30;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v26;
  return result;
}

uint64_t sub_187642FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a2;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v18 = sub_18769A3D0();
  uint64_t v8 = MEMORY[0x1895F8858](v18);
  v17[21] = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = sub_18769A1F0();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  v17[18] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  sub_187639840(&qword_18C4C71B0, v13, MEMORY[0x189605968]);
  v17[20] = v10;
  uint64_t v14 = sub_18769A388();
  void v17[7] = a5;
  v17[8] = v14;
  double v15 = ceil((double)a5 / (double)v14);
  if ((~*(void *)&v15 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v15 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v15 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x187643B04LL);
  }

  v17[19] = (uint64_t)v15;
  if ((uint64_t)v15 <= 255) {
    __asm { BR              X10 }
  }

  sub_1876481D4();
  swift_allocError();
  swift_willThrow();
  return a1;
}

void *sub_187643B70( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void sub_187643BD4()
{
  __asm { BR              X11 }

void *sub_187643C34@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  uint64_t v10 = BYTE4(a1);
  uint64_t v11 = BYTE5(a1);
  uint64_t v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  uint64_t v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *uint64_t v1 = v8;
  v1[1] = v6;
  return result;
}

char *sub_187643EC4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_187699E90();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_187699EB4();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = sub_187699EA8();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_187643F70(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_187699E90();
  if (!result || (uint64_t result = sub_187699EB4(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_187699EA8();
      return sub_187699F50();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_187644000(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = sub_18769A4CC();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x1895AA294](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

uint64_t sub_187644078@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    sub_18769A52C();
    uint64_t result = sub_18769A5EC();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0LL;
      a2[1] = 0xE000000000000000LL;
      a2[2] = 15LL;
      a2[3] = v4;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

_BYTE *sub_187644100(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)sub_187696980(result, a2);
    }

    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_187696A40((uint64_t)result, (uint64_t)a2);
    }

    else
    {
      return (_BYTE *)sub_187696AB8((uint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

uint64_t sub_187644164(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      sub_187699ECC();
      swift_allocObject();
      sub_187699E9C();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_187699F38();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_187644200(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_18C4C7100);
  uint64_t v10 = sub_1876280D4(&qword_18C4C71A8, qword_18C4C7100, MEMORY[0x189607200]);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  sub_18769A52C();
  sub_187696720(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

void sub_1876442B0(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v6 = sub_18769A3C4();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = sub_18769A1E4();
  v33[2] = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  v33[1] = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    v33[0] = v7;
    uint64_t v12 = sub_187699F98();
    unint64_t v14 = v13;

    id v15 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = sub_187699F98();
      unint64_t v19 = v18;

      uint64_t v34 = v12;
      unint64_t v35 = v14;
      sub_187623A28(v12, v14);
      sub_18763CF30(v17, v19);
      sub_187623C58(v17, v19);
      sub_187623C58(v12, v14);
      uint64_t v20 = v34;
      unint64_t v21 = v35;
      id v22 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = sub_187699F98();
        unint64_t v26 = v25;

        uint64_t v36 = v20;
        unint64_t v37 = v21;
        sub_187623A28(v20, v21);
        sub_18763CF30(v24, v26);
        sub_187623C58(v24, v26);
        sub_187623C58(v20, v21);
        uint64_t v27 = v36;
        unint64_t v28 = v37;
        uint64_t v29 = sub_18763B1DC(0xD00000000000001ELL, 0x80000001876A0AC0LL);
        unint64_t v31 = v30;
        uint64_t v34 = v27;
        unint64_t v35 = v28;
        sub_187623A28(v27, v28);
        sub_18763CF30(v29, v31);
        sub_187623C58(v29, v31);
        sub_187623C58(v27, v28);
        unint64_t v32 = v35;
        sub_187639840( (unint64_t *)&qword_18C6D9A88,  (uint64_t (*)(uint64_t))MEMORY[0x189605DF8],  MEMORY[0x189605DE8]);
        sub_18769A1CC();
        __asm { BR              X10 }
      }

uint64_t sub_187644798( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  id v28 = a4;
  uint64_t v99 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004772LL, v28, a1);

  id v29 = a5;
  uint64_t v30 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004872LL, v29, a1);

  id v31 = a2;
  uint64_t v94 = sub_1876586FC(0x636E45316DLL, 0xE500000000000000LL, v31, a1);

  id v32 = a3;
  uint64_t v93 = sub_1876586FC(0x636E45326DLL, 0xE500000000000000LL, v32, a1);

  id v33 = a6;
  uint64_t v91 = sub_1876586FC(85LL, 0xE100000000000000LL, v33, a1);

  id v34 = a7;
  uint64_t v92 = sub_1876586FC(0x6D69725055636E65LL, 0xE900000000000065LL, v34, a1);

  id v35 = a8;
  uint64_t v98 = sub_1876586FC(12376LL, 0xE200000000000000LL, v35, a1);

  id v36 = a9;
  uint64_t v95 = sub_1876586FC(12632LL, 0xE200000000000000LL, v36, a1);

  id v37 = a10;
  uint64_t v96 = sub_1876586FC(12888LL, 0xE200000000000000LL, v37, a1);

  id v38 = a11;
  uint64_t v89 = sub_1876586FC(0x7875413058LL, 0xE500000000000000LL, v38, a1);

  id v39 = a12;
  uint64_t v90 = sub_1876586FC(0x7875413158LL, 0xE500000000000000LL, v39, a1);

  id v40 = a13;
  uint64_t v97 = sub_1876586FC(0x7875413258LL, 0xE500000000000000LL, v40, a1);

  id v41 = a14;
  uint64_t v42 = sub_1876586FC(2020950344LL, 0xE400000000000000LL, v41, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_18769CCC0;
  *(void *)(v43 + 32) = a15;
  *(void *)(v43 + 40) = v99;
  *(void *)(v43 + 48) = a16;
  *(void *)(v43 + 56) = v30;
  __int128 v44 = *(void **)(a1 + 48);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v44 = sub_18765B124(0LL, v44[2] + 1LL, 1, v44);
  }
  unint64_t v46 = v44[2];
  unint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v45 > 1), v46 + 1, 1, v44);
  }
  v44[2] = v46 + 1;
  int v47 = &v44[2 * v46];
  v47[4] = v98;
  v47[5] = v43;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_18769C700;
  *(void *)(v48 + 32) = a17;
  *(void *)(v48 + 40) = v30;
  unint64_t v50 = v44[2];
  unint64_t v49 = v44[3];
  sub_18769A52C();
  if (v50 >= v49 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v49 > 1), v50 + 1, 1, v44);
  }
  v44[2] = v50 + 1;
  id v51 = &v44[2 * v50];
  v51[4] = v95;
  v51[5] = v48;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_18769C700;
  *(void *)(v52 + 32) = a18;
  *(void *)(v52 + 40) = v30;
  unint64_t v53 = v44[2];
  unint64_t v54 = v44[3];
  sub_18769A52C();
  if (v53 >= v54 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v54 > 1), v53 + 1, 1, v44);
  }
  v44[2] = v53 + 1;
  uint64_t v55 = &v44[2 * v53];
  v55[4] = v96;
  v55[5] = v52;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_18769C700;
  *(void *)(v56 + 32) = a19;
  *(void *)(v56 + 40) = v30;
  unint64_t v57 = v44[2];
  unint64_t v58 = v44[3];
  sub_18769A52C();
  if (v57 >= v58 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v58 > 1), v57 + 1, 1, v44);
  }
  v44[2] = v57 + 1;
  id v59 = &v44[2 * v57];
  v59[4] = v42;
  v59[5] = v56;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_18769C700;
  *(void *)(v60 + 32) = a16;
  *(void *)(v60 + 40) = v42;
  unint64_t v61 = v44[2];
  unint64_t v62 = v44[3];
  sub_18769A52C();
  if (v61 >= v62 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v62 > 1), v61 + 1, 1, v44);
  }
  v44[2] = v61 + 1;
  __int128 v63 = &v44[2 * v61];
  v63[4] = v89;
  v63[5] = v60;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_18769C700;
  *(void *)(v64 + 32) = a19;
  *(void *)(v64 + 40) = v95;
  unint64_t v65 = v44[2];
  unint64_t v66 = v44[3];
  sub_18769A52C();
  if (v65 >= v66 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v66 > 1), v65 + 1, 1, v44);
  }
  v44[2] = v65 + 1;
  __int128 v67 = &v44[2 * v65];
  v67[4] = v90;
  v67[5] = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_18769C700;
  *(void *)(v68 + 32) = a20;
  *(void *)(v68 + 40) = v30;
  unint64_t v69 = v44[2];
  unint64_t v70 = v44[3];
  sub_18769A52C();
  if (v69 >= v70 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v70 > 1), v69 + 1, 1, v44);
  }
  v44[2] = v69 + 1;
  __int128 v71 = &v44[2 * v69];
  v71[4] = v90;
  v71[5] = v68;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_18769C700;
  *(void *)(v72 + 32) = a19;
  *(void *)(v72 + 40) = v96;
  unint64_t v73 = v44[2];
  unint64_t v74 = v44[3];
  sub_18769A52C();
  if (v73 >= v74 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v74 > 1), v73 + 1, 1, v44);
  }
  v44[2] = v73 + 1;
  __int128 v75 = &v44[2 * v73];
  v75[4] = v97;
  v75[5] = v72;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_18769C700;
  *(void *)(v76 + 32) = a21;
  *(void *)(v76 + 40) = v30;
  unint64_t v77 = v44[2];
  unint64_t v78 = v44[3];
  sub_18769A52C();
  if (v77 >= v78 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v78 > 1), v77 + 1, 1, v44);
  }
  v44[2] = v77 + 1;
  unint64_t v79 = &v44[2 * v77];
  v79[4] = v97;
  v79[5] = v76;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_18769C700;
  *(void *)(v80 + 32) = a19;
  *(void *)(v80 + 40) = v99;
  unint64_t v81 = v44[2];
  unint64_t v82 = v44[3];
  sub_18769A52C();
  if (v81 >= v82 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v82 > 1), v81 + 1, 1, v44);
  }
  v44[2] = v81 + 1;
  uint64_t v83 = &v44[2 * v81];
  v83[4] = v91;
  v83[5] = v80;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_18769CCD0;
  *(void *)(v84 + 32) = a19;
  *(void *)(v84 + 40) = v98;
  *(void *)(v84 + 48) = a20;
  *(void *)(v84 + 56) = v94;
  *(void *)(v84 + 64) = a21;
  *(void *)(v84 + 72) = v93;
  unint64_t v85 = v44[2];
  unint64_t v86 = v44[3];
  sub_18769A52C();
  if (v85 >= v86 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v86 > 1), v85 + 1, 1, v44);
  }
  v44[2] = v85 + 1;
  v87 = &v44[2 * v85];
  v87[4] = v92;
  v87[5] = v84;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  return result;
}

uint64_t sub_187644FDC( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  id v28 = a4;
  uint64_t v99 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004772LL, v28, a1);

  id v29 = a5;
  uint64_t v30 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004872LL, v29, a1);

  id v31 = a2;
  uint64_t v94 = sub_18765886C(0x636E45316DLL, 0xE500000000000000LL, v31, a1);

  id v32 = a3;
  uint64_t v93 = sub_18765886C(0x636E45326DLL, 0xE500000000000000LL, v32, a1);

  id v33 = a6;
  uint64_t v91 = sub_18765886C(85LL, 0xE100000000000000LL, v33, a1);

  id v34 = a7;
  uint64_t v92 = sub_18765886C(0x6D69725055636E65LL, 0xE900000000000065LL, v34, a1);

  id v35 = a8;
  uint64_t v98 = sub_18765886C(12376LL, 0xE200000000000000LL, v35, a1);

  id v36 = a9;
  uint64_t v95 = sub_18765886C(12632LL, 0xE200000000000000LL, v36, a1);

  id v37 = a10;
  uint64_t v96 = sub_18765886C(12888LL, 0xE200000000000000LL, v37, a1);

  id v38 = a11;
  uint64_t v89 = sub_18765886C(0x7875413058LL, 0xE500000000000000LL, v38, a1);

  id v39 = a12;
  uint64_t v90 = sub_18765886C(0x7875413158LL, 0xE500000000000000LL, v39, a1);

  id v40 = a13;
  uint64_t v97 = sub_18765886C(0x7875413258LL, 0xE500000000000000LL, v40, a1);

  id v41 = a14;
  uint64_t v42 = sub_18765886C(2020950344LL, 0xE400000000000000LL, v41, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_18769CCC0;
  *(void *)(v43 + 32) = a15;
  *(void *)(v43 + 40) = v99;
  *(void *)(v43 + 48) = a16;
  *(void *)(v43 + 56) = v30;
  __int128 v44 = *(void **)(a1 + 40);
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v44 = sub_18765B124(0LL, v44[2] + 1LL, 1, v44);
  }
  unint64_t v46 = v44[2];
  unint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v45 > 1), v46 + 1, 1, v44);
  }
  v44[2] = v46 + 1;
  int v47 = &v44[2 * v46];
  v47[4] = v98;
  v47[5] = v43;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_18769C700;
  *(void *)(v48 + 32) = a17;
  *(void *)(v48 + 40) = v30;
  unint64_t v50 = v44[2];
  unint64_t v49 = v44[3];
  sub_18769A52C();
  if (v50 >= v49 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v49 > 1), v50 + 1, 1, v44);
  }
  v44[2] = v50 + 1;
  id v51 = &v44[2 * v50];
  v51[4] = v95;
  v51[5] = v48;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_18769C700;
  *(void *)(v52 + 32) = a18;
  *(void *)(v52 + 40) = v30;
  unint64_t v53 = v44[2];
  unint64_t v54 = v44[3];
  sub_18769A52C();
  if (v53 >= v54 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v54 > 1), v53 + 1, 1, v44);
  }
  v44[2] = v53 + 1;
  uint64_t v55 = &v44[2 * v53];
  v55[4] = v96;
  v55[5] = v52;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_18769C700;
  *(void *)(v56 + 32) = a19;
  *(void *)(v56 + 40) = v30;
  unint64_t v57 = v44[2];
  unint64_t v58 = v44[3];
  sub_18769A52C();
  if (v57 >= v58 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v58 > 1), v57 + 1, 1, v44);
  }
  v44[2] = v57 + 1;
  id v59 = &v44[2 * v57];
  v59[4] = v42;
  v59[5] = v56;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_18769C700;
  *(void *)(v60 + 32) = a16;
  *(void *)(v60 + 40) = v42;
  unint64_t v61 = v44[2];
  unint64_t v62 = v44[3];
  sub_18769A52C();
  if (v61 >= v62 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v62 > 1), v61 + 1, 1, v44);
  }
  v44[2] = v61 + 1;
  __int128 v63 = &v44[2 * v61];
  v63[4] = v89;
  v63[5] = v60;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_18769C700;
  *(void *)(v64 + 32) = a19;
  *(void *)(v64 + 40) = v95;
  unint64_t v65 = v44[2];
  unint64_t v66 = v44[3];
  sub_18769A52C();
  if (v65 >= v66 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v66 > 1), v65 + 1, 1, v44);
  }
  v44[2] = v65 + 1;
  __int128 v67 = &v44[2 * v65];
  v67[4] = v90;
  v67[5] = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_18769C700;
  *(void *)(v68 + 32) = a20;
  *(void *)(v68 + 40) = v30;
  unint64_t v69 = v44[2];
  unint64_t v70 = v44[3];
  sub_18769A52C();
  if (v69 >= v70 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v70 > 1), v69 + 1, 1, v44);
  }
  v44[2] = v69 + 1;
  __int128 v71 = &v44[2 * v69];
  v71[4] = v90;
  v71[5] = v68;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_18769C700;
  *(void *)(v72 + 32) = a19;
  *(void *)(v72 + 40) = v96;
  unint64_t v73 = v44[2];
  unint64_t v74 = v44[3];
  sub_18769A52C();
  if (v73 >= v74 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v74 > 1), v73 + 1, 1, v44);
  }
  v44[2] = v73 + 1;
  __int128 v75 = &v44[2 * v73];
  v75[4] = v97;
  v75[5] = v72;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_18769C700;
  *(void *)(v76 + 32) = a21;
  *(void *)(v76 + 40) = v30;
  unint64_t v77 = v44[2];
  unint64_t v78 = v44[3];
  sub_18769A52C();
  if (v77 >= v78 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v78 > 1), v77 + 1, 1, v44);
  }
  v44[2] = v77 + 1;
  unint64_t v79 = &v44[2 * v77];
  v79[4] = v97;
  v79[5] = v76;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_18769C700;
  *(void *)(v80 + 32) = a19;
  *(void *)(v80 + 40) = v99;
  unint64_t v81 = v44[2];
  unint64_t v82 = v44[3];
  sub_18769A52C();
  if (v81 >= v82 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v82 > 1), v81 + 1, 1, v44);
  }
  v44[2] = v81 + 1;
  uint64_t v83 = &v44[2 * v81];
  v83[4] = v91;
  v83[5] = v80;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_18769CCD0;
  *(void *)(v84 + 32) = a19;
  *(void *)(v84 + 40) = v98;
  *(void *)(v84 + 48) = a20;
  *(void *)(v84 + 56) = v94;
  *(void *)(v84 + 64) = a21;
  *(void *)(v84 + 72) = v93;
  unint64_t v85 = v44[2];
  unint64_t v86 = v44[3];
  sub_18769A52C();
  if (v85 >= v86 >> 1) {
    __int128 v44 = sub_18765B124((void *)(v86 > 1), v85 + 1, 1, v44);
  }
  v44[2] = v85 + 1;
  v87 = &v44[2 * v85];
  v87[4] = v92;
  v87[5] = v84;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  return result;
}

uint64_t sub_187645820(void *a1, void *a2, void *a3, void *a4)
{
  id v10 = *(void **)(v4 + 16);
  uint64_t v64 = *(void **)(v4 + 32);
  unint64_t v65 = *(void **)(v4 + 24);
  sub_1876442B0(v10, v65, v64);
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  sub_187638644(*(void *)(v4 + 72), *(void *)(v4 + 80));
  if ((v15 & 1) == 0) {
    goto LABEL_3;
  }
  unint64_t v62 = a1;
  __int128 v63 = a2;
  uint64_t v16 = *(void *)v4;
  sub_187646460(v4);
  id v17 = sub_187657164((void *)v16, v16);
  unint64_t v61 = (void *)v16;
  LOBYTE(v16) = objc_msgSend(v17, sel_isEqual_, v16);

  sub_187648014(v4);
  if ((v16 & 1) == 0)
  {
    *(void *)&__int128 v66 = 0xD00000000000002ALL;
    *((void *)&v66 + 1) = 0x80000001876A0A30LL;
    *((void *)&v67 + 1) = MEMORY[0x18961AFE8];
    *(void *)&__int128 v68 = MEMORY[0x18961AFE8];
    *((void *)&v68 + 1) = MEMORY[0x18961AFE8];
    uint64_t v20 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v22 = *((void *)v20 + 2);
    unint64_t v21 = *((void *)v20 + 3);
    unint64_t v23 = v21 >> 1;
    unint64_t v24 = v22 + 1;
    if (v21 >> 1 <= v22)
    {
      unint64_t v43 = *((void *)v20 + 2);
      __int128 v44 = sub_18765B024((char *)(v21 > 1), v22 + 1, 1, v20);
      unint64_t v22 = v43;
      uint64_t v20 = v44;
      unint64_t v21 = *((void *)v44 + 3);
      unint64_t v23 = v21 >> 1;
    }

    *((void *)v20 + 2) = v24;
    unint64_t v25 = &v20[16 * v22];
    *((void *)v25 + 4) = 12408LL;
    *((void *)v25 + 5) = 0xE200000000000000LL;
    unint64_t v26 = v22 + 2;
    if (v23 <= v24)
    {
      unint64_t v56 = v22;
      unint64_t v45 = sub_18765B024((char *)(v21 > 1), v22 + 2, 1, v20);
      unint64_t v22 = v56;
      uint64_t v20 = v45;
    }

    *((void *)v20 + 2) = v26;
    uint64_t v27 = &v20[16 * v24];
    *((void *)v27 + 4) = 12664LL;
    *((void *)v27 + 5) = 0xE200000000000000LL;
    *(void *)&__int128 v67 = v20;
    unint64_t v29 = *((void *)v20 + 2);
    unint64_t v28 = *((void *)v20 + 3);
    unint64_t v30 = v28 >> 1;
    id v59 = a3;
    if (v28 >> 1 <= v29)
    {
      unint64_t v46 = v22;
      int v47 = sub_18765B024((char *)(v28 > 1), v29 + 1, 1, v20);
      unint64_t v22 = v46;
      uint64_t v20 = v47;
      unint64_t v28 = *((void *)v47 + 3);
      unint64_t v30 = v28 >> 1;
    }

    *((void *)v20 + 2) = v29 + 1;
    id v31 = &v20[16 * v29];
    *((void *)v31 + 4) = 12920LL;
    *((void *)v31 + 5) = 0xE200000000000000LL;
    *(void *)&__int128 v67 = v20;
    unint64_t v32 = *((void *)v20 + 2);
    if (v30 <= v32)
    {
      unint64_t v48 = v22;
      unint64_t v49 = sub_18765B024((char *)(v28 > 1), v32 + 1, 1, v20);
      unint64_t v22 = v48;
      uint64_t v20 = v49;
      unint64_t v28 = *((void *)v49 + 3);
      unint64_t v30 = v28 >> 1;
    }

    *((void *)v20 + 2) = v32 + 1;
    id v33 = &v20[16 * v32];
    *((void *)v33 + 4) = 0x69646E696C423078LL;
    *((void *)v33 + 5) = 0xEA0000000000676ELL;
    *(void *)&__int128 v67 = v20;
    unint64_t v34 = *((void *)v20 + 2);
    unint64_t v58 = v10;
    if (v30 <= v34)
    {
      unint64_t v50 = v22;
      id v51 = sub_18765B024((char *)(v28 > 1), v34 + 1, 1, v20);
      unint64_t v22 = v50;
      uint64_t v20 = v51;
      unint64_t v28 = *((void *)v51 + 3);
      unint64_t v30 = v28 >> 1;
    }

    *((void *)v20 + 2) = v34 + 1;
    id v35 = &v20[16 * v34];
    *((void *)v35 + 4) = 98LL;
    *((void *)v35 + 5) = 0xE100000000000000LL;
    *(void *)&__int128 v67 = v20;
    unint64_t v36 = *((void *)v20 + 2);
    uint64_t v60 = a4;
    if (v30 <= v36)
    {
      unint64_t v52 = v22;
      unint64_t v53 = sub_18765B024((char *)(v28 > 1), v36 + 1, 1, v20);
      unint64_t v22 = v52;
      uint64_t v20 = v53;
      unint64_t v28 = *((void *)v53 + 3);
      unint64_t v30 = v28 >> 1;
    }

    uint64_t v37 = v29 - 1;
    uint64_t v38 = v32 - 1;
    uint64_t v39 = v34 - 1;
    *((void *)v20 + 2) = v36 + 1;
    id v40 = &v20[16 * v36];
    *((void *)v40 + 4) = 12660LL;
    *((void *)v40 + 5) = 0xE200000000000000LL;
    *(void *)&__int128 v67 = v20;
    unint64_t v41 = *((void *)v20 + 2);
    if (v30 <= v41)
    {
      unint64_t v57 = v22;
      uint64_t v55 = v39;
      unint64_t v54 = sub_18765B024((char *)(v28 > 1), v41 + 1, 1, v20);
      uint64_t v39 = v55;
      uint64_t v37 = v29 - 1;
      unint64_t v22 = v57;
      uint64_t v20 = v54;
    }

    *((void *)v20 + 2) = v41 + 1;
    uint64_t v42 = &v20[16 * v41];
    *((void *)v42 + 4) = 12916LL;
    *((void *)v42 + 5) = 0xE200000000000000LL;
    *(void *)&__int128 v67 = v20;
    sub_187644FDC( (uint64_t)&v66,  v62,  v63,  v59,  v60,  v61,  *(void **)(v4 + 8),  v58,  v65,  v64,  *(void **)(v4 + 40),  *(void **)(v4 + 48),  *(void **)(v4 + 56),  *(void **)(v4 + 64),  v22,  v39,  v37,  v38,  v36 - 1,  v41 - 1,  *((void *)v20 + 2) - 1LL);
    __int128 v69 = v66;
    __int128 v70 = v67;
    __int128 v71 = v68;
    char v18 = sub_187651DE4(*(void *)(v4 + 88), *(void *)(v4 + 96));
    sub_187623C58(v12, v14);
    if (v5)
    {
      __int128 v77 = v69;
      sub_187647F98((uint64_t)&v77);
      uint64_t v78 = v70;
      sub_187647FC0((uint64_t)&v78);
      uint64_t v79 = *((void *)&v70 + 1);
      sub_187647FC0((uint64_t)&v79);
      uint64_t v80 = v71;
      sub_187647FC0((uint64_t)&v80);
      uint64_t v81 = *((void *)&v71 + 1);
      sub_187647FC0((uint64_t)&v81);
    }

    else
    {
      __int128 v72 = v69;
      sub_187647F98((uint64_t)&v72);
      uint64_t v73 = v70;
      sub_187647FC0((uint64_t)&v73);
      uint64_t v74 = *((void *)&v70 + 1);
      sub_187647FC0((uint64_t)&v74);
      uint64_t v75 = v71;
      sub_187647FC0((uint64_t)&v75);
      uint64_t v76 = *((void *)&v71 + 1);
      sub_187647FC0((uint64_t)&v76);
    }
  }

  else
  {
LABEL_3:
    sub_187623C58(v12, v14);
    char v18 = 0;
  }

  return v18 & 1;
}

void *sub_187645CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D88);
  v19[3] = v8;
  v19[4] = sub_1876280D4((unint64_t *)&qword_18C6D9D90, &qword_18C6D9D88, MEMORY[0x189607380]);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }

  else
  {
    char v15 = (_BYTE *)(result[1] + v11);
    uint64_t v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_187696720(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }

  return result;
}

uint64_t sub_187645DD0(void *a1, uint64_t a2)
{
  v20[7] = *MEMORY[0x1895F89C0];
  id v5 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v3 = sub_187699F98();
    unint64_t v8 = v7;

    uint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      sub_18769A52C();
      id v10 = *(id *)(a2 + 32);
      id v11 = objc_msgSend(v10, sel_serializedBigEndianScalar, v2, v9, a2);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = sub_187699F98();
        uint64_t v15 = v14;

        v20[5] = v3;
        _OWORD v20[6] = v8;
        v20[3] = MEMORY[0x189606D70];
        v20[4] = MEMORY[0x189606D58];
        v20[0] = v13;
        v20[1] = v15;
        uint64_t v16 = (char *)&loc_187645F34
            + *((int *)qword_1876461F0 + (__swift_project_boxed_opaque_existential_1(v20, MEMORY[0x189606D70])[1] >> 62));
        __asm { BR              X9 }
      }

      swift_bridgeObjectRelease();
      sub_18763E228();
      swift_allocError();
      *uint64_t v18 = 1;
      swift_willThrow();
      sub_187623C58(v3, v8);
    }
  }

  else
  {
    sub_18763E228();
    swift_allocError();
    *uint64_t v17 = 1;
    swift_willThrow();
  }

  return v3;
}

id sub_187646200()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v7 = 0;
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v0 = objc_allocWithZone(MEMORY[0x18960F070]);
  unint64_t v1 = (void *)sub_187699F80();
  id v2 = objc_msgSend(v0, sel_initFromPublicKeyBytes_inGroup_compressed_corecryptoError_, v1, v6, 1, &v7);

  if (!v2)
  {
    int v3 = v7;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = v3;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
  }

  return v2;
}

uint64_t sub_18764635C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)a1;
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  sub_187623A28(v5, v6);
  return a1;
}

uint64_t sub_1876463B4(uint64_t a1)
{
  id v2 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);

  sub_187623C58(v5, v6);
  return a1;
}

uint64_t type metadata accessor for KVACPresentationWrapper()
{
  return objc_opt_self();
}

uint64_t sub_18764642C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_187623A28(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for KVACClient()
{
  return objc_opt_self();
}

uint64_t sub_187646460(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void **)(a1 + 32);
  unint64_t v6 = *(void **)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v9 = *(void **)(a1 + 64);
  unint64_t v10 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 72);
  unint64_t v23 = *(void **)(a1 + 88);
  id v11 = *(id *)a1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v8;
  id v18 = v7;
  id v19 = v9;
  sub_187623A28(v22, v10);
  id v20 = v23;
  sub_18769A52C();
  return a1;
}

uint64_t type metadata accessor for KVACIssuanceWrapper()
{
  return objc_opt_self();
}

void sub_18764652C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_187646588( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v37 = (void *)objc_opt_self();
  sub_18769A37C();
  uint64_t v38 = sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v39 = (uint64_t)objc_msgSend(v37, sel_groupOrderByteCountForCP_, v76);
  if (v39 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (!v39)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v40 = v73 / v39;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9DB0);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 32) = 0xD000000000000021LL;
  *(void *)(v41 + 40) = 0x80000001876A0AE0LL;
  uint64_t v42 = MEMORY[0x189618740];
  *(_OWORD *)(v41 + 16) = xmmword_18769CCC0;
  *(void *)(v41 + 88) = v42;
  *(void *)(v41 + 56) = MEMORY[0x189617FA8];
  *(void *)(v41 + 64) = v40;
  sub_18769A73C();
  swift_bridgeObjectRelease();
  sub_18769A22C();
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v37, sel_groupOrderByteCountForCP_, v76) & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  __int128 v72 = v37;
  uint64_t v43 = sub_187699FB0();
  unint64_t v45 = v44;
  LODWORD(v75) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  id v46 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v47 = v38;
  unint64_t v48 = (void *)sub_187699F80();
  id v49 = objc_msgSend(v46, sel_initWithData_inGroup_reduction_corecryptoError_, v48, v76, 0, &v75);

  if (!v49)
  {
    int v67 = v75;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v68 = v67;
    *(_BYTE *)(v68 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v43, v45);
    return;
  }

  __int128 v71 = v49;
  sub_187623C58(v43, v45);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v50 = v72;
  unint64_t v51 = (unint64_t)objc_msgSend(v72, sel_groupOrderByteCountForCP_, v76);
  if ((v51 & 0x8000000000000000LL) != 0) {
    goto LABEL_33;
  }
  uint64_t v52 = v47;
  uint64_t v76 = MEMORY[0x18961AFE8];
  uint64_t v53 = v40 - 1;
  if (__OFSUB__(v40, 1LL))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v53 < 0)
  {
LABEL_35:
    __break(1u);
    JUMPOUT(0x187646B64LL);
  }

  if (v40 != 1)
  {
    unint64_t v54 = (char *)v51;
    while (v53)
    {
      sub_18769A22C();
      swift_dynamicCast();
      int64_t v55 = (int64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, v75);
      if (v55 < 0) {
        goto LABEL_25;
      }
      if (__OFADD__(v54, v55)) {
        goto LABEL_26;
      }
      uint64_t v56 = sub_187699FB0();
      unint64_t v58 = v57;
      int v74 = 0;
      sub_187623A28(v56, v57);
      uint64_t v59 = v52;
      sub_18769A22C();
      swift_dynamicCast();
      uint64_t v60 = v75;
      id v61 = objc_allocWithZone(MEMORY[0x18960F078]);
      unint64_t v62 = (void *)sub_187699F80();
      id v63 = objc_msgSend(v61, sel_initWithData_inGroup_reduction_corecryptoError_, v62, v60, 0, &v74);
      sub_187623C58(v56, v58);

      if (!v63)
      {
        int v69 = v74;
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v70 = v69;
        *(_BYTE *)(v70 + 4) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        sub_187623C58(v56, v58);

        return;
      }

      sub_187623C58(v56, v58);
      id v64 = v63;
      MEMORY[0x1895AA300]();
      if (*(void *)(v76 + 16) >= *(void *)(v76 + 24) >> 1) {
        sub_18769A544();
      }
      sub_18769A55C();
      sub_18769A538();
      uint64_t v52 = v59;
      sub_18769A22C();
      swift_dynamicCast();
      unint64_t v50 = v72;
      unint64_t v65 = (unint64_t)objc_msgSend(v72, sel_groupOrderByteCountForCP_, v75);

      if ((v65 & 0x8000000000000000LL) != 0) {
        goto LABEL_28;
      }
      BOOL v66 = __OFADD__(v54, v65);
      v54 += v65;
      if (v66) {
        goto LABEL_29;
      }
      if (!--v53) {
        return;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

uint64_t type metadata accessor for KVACServer()
{
  return objc_opt_self();
}

void sub_187646BA0(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v4 = (uint64_t)objc_msgSend(v3, sel_groupOrderByteCountForCP_, v5);
  if (v4 < 0)
  {
    __break(1u);
  }

  else if ((unsigned __int128)(v4 * (__int128)5LL) >> 64 == (5 * v4) >> 63)
  {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187646FC4LL);
}

uint64_t sub_18764700C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  int v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  unint64_t v6 = *(void **)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v9 = *(void **)(a1 + 72);
  uint64_t v21 = *(void *)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);
  id v11 = *(id *)(a1 + 8);
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  sub_187623A28(v21, v10);
  return a1;
}

uint64_t sub_1876470A0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  id v12 = *(void **)(a1 + 8);
  int v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  unint64_t v6 = *(void **)(a1 + 48);
  id v8 = *(void **)(a1 + 56);
  id v7 = *(void **)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);

  sub_187623C58(v9, v10);
  return a1;
}

void sub_187647138(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t v3 = (unint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v13);
  if ((v3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v4 = v3;
    if ((v3 - 0x2000000000000000LL) >> 62 == 3)
    {
      sub_18769A22C();
      swift_dynamicCast();
      uint64_t v5 = (uint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v13);
      if ((v5 & 0x8000000000000000LL) == 0)
      {
        uint64_t v6 = 3 * v5;
        if ((unsigned __int128)(v5 * (__int128)3LL) >> 64 == (3 * v5) >> 63)
        {
          sub_18769A22C();
          swift_dynamicCast();
          unint64_t v7 = (unint64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v13);
          if ((v7 & 0x8000000000000000LL) == 0)
          {
            if ((v7 - 0x2000000000000000LL) >> 62 == 3)
            {
              uint64_t v8 = 4 * v4;
              uint64_t v9 = v8 + 4 * v7;
              if (!__OFADD__(v8, 4 * v7))
              {
                BOOL v10 = __OFADD__(v9, v6);
                uint64_t v11 = v9 + v6;
                if (!v10)
                {
                  if (!__OFADD__(v11, sub_18769A3AC())) {
                    __asm { BR              X11 }
                  }

LABEL_19:
                  __break(1u);
                  JUMPOUT(0x187647A60LL);
                }

        __break(1u);
LABEL_20:
        __break(1u);
        return;
      }
    }

    else
    {
      if (error[0])
      {

        sub_18764D1D0();
        swift_allocError();
        void *v24 = 3;
        swift_willThrow();
        return;
      }

      __break(1u);
    }

    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }

  __break(1u);
  goto LABEL_13;
}

    __break(1u);
LABEL_14:
    __break(1u);
  }

  uint64_t result = sub_18769A67C();
  __break(1u);
  return result;
}

uint64_t sub_187647AEC(uint64_t a1)
{
  id v2 = *(void **)a1;
  unint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void *)(a1 + 72);
  id v12 = *(void **)(a1 + 88);
  uint64_t v13 = *(void **)(a1 + 80);
  BOOL v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(void **)(a1 + 96);

  sub_187623C58(v4, v5);
  swift_bridgeObjectRelease();

  sub_187623C58(v7, v8);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t method lookup function for KVACRequestWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for KVACCredentialWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACCredentialWrapper.makePresentation(tagPrefix:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x78LL))();
}

uint64_t method lookup function for KVACPresentationWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for KVACClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACClient.__allocating_init(tokenChallenge:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of KVACClient.makeRequest()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x60LL))();
}

uint64_t dispatch thunk of KVACClient.makeCredential(issuance:request:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x68LL))();
}

uint64_t method lookup function for KVACIssuanceWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACIssuanceWrapper.__allocating_init(issuanceData:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for KVACServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACServer.issue(requestData:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x60LL))();
}

uint64_t dispatch thunk of KVACServer.verify(presentationData:tokenChallenge:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x68LL))();
}

uint64_t getEnumTagSinglePayload for KVACErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for KVACErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_187647DD4 + 4 * byte_18769CCE5[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187647E08 + 4 * byte_18769CCE0[v4]))();
}

uint64_t sub_187647E08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187647E10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187647E18LL);
  }
  return result;
}

uint64_t sub_187647E24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187647E2CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_187647E30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187647E38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KVACErrors()
{
  return &type metadata for KVACErrors;
}

unint64_t sub_187647E58()
{
  unint64_t result = qword_18C6D9D80;
  if (!qword_18C6D9D80)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769CE34, &type metadata for KVACErrors);
    atomic_store(result, (unint64_t *)&qword_18C6D9D80);
  }

  return result;
}

uint64_t sub_187647E9C()
{
  return swift_deallocObject();
}

uint64_t sub_187647EC0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(void **)(a1 + 40);
  id v7 = *(id *)a1;
  id v8 = v2;
  id v9 = v4;
  sub_187623A28(v3, v5);
  id v10 = v6;
  sub_18769A52C();
  return a1;
}

uint64_t sub_187647F2C(uint64_t a1)
{
  int v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(void **)(a1 + 40);

  sub_187623C58(v4, v5);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_187647F98(uint64_t a1)
{
  return a1;
}

uint64_t sub_187647FC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_187647FE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_187648014(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 32);
  unsigned int v6 = *(void **)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = *(void *)(a1 + 80);
  id v12 = *(void **)a1;
  uint64_t v13 = *(void **)(a1 + 88);

  sub_187623C58(v9, v10);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_1876480C4()
{
  unint64_t result = qword_18C6D9DA0;
  if (!qword_18C6D9DA0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769DF68, &type metadata for KVAC.Errors);
    atomic_store(result, (unint64_t *)&qword_18C6D9DA0);
  }

  return result;
}

uint64_t sub_187648108(uint64_t a1)
{
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  __int16 v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

id *sub_1876481AC(id *a1)
{
  id v2 = *a1;
  return a1;
}

unint64_t sub_1876481D4()
{
  unint64_t result = qword_18C6D9DB8[0];
  if (!qword_18C6D9DB8[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769F78C, &type metadata for Hash2FieldErrors);
    atomic_store(result, qword_18C6D9DB8);
  }

  return result;
}

uint64_t sub_187648218(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_187648258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_187643B70( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1876482E0,  (uint64_t)v12,  a1,  a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1876482B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_187623C58(a1, a2);
  }
  return a1;
}

uint64_t sub_1876482C8(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1876482E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_187644078(a1, a2);
}

uint64_t sub_1876482FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = *(id *)a1;
  sub_187623A28(v2, v3);
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  sub_18769A52C();
  return a1;
}

uint64_t sub_187648368(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);

  sub_187623C58(v2, v3);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t dispatch thunk of KVACCredentialWrapper.__allocating_init(credentialData:)()
{
  return dispatch thunk of KVACIssuanceWrapper.__allocating_init(issuanceData:)();
}

uint64_t sub_1876483FC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_187648404()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *sub_187648544(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = (*(_BYTE *)(v5 + 80) | v9);
  BOOL v11 = v10 <= 7 && ((*(_DWORD *)(v5 + 80) | v9) & 0x100000) == 0;
  if (v11
    && (uint64_t v12 = *(_DWORD *)(v8 + 80),
        uint64_t v13 = v6 + v12,
        uint64_t v14 = *(void *)(v8 + 64),
        uint64_t v15 = v14 + v12,
        ((v14
        + v12
        + ((v14
          + v12
          + ((v14 + v12 + ((v14 + v12 + ((v14 + v12 + ((v14 + v12 + (v13 & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & (unint64_t)~v12)
      + v14 <= 0x18))
  {
    uint64_t v16 = v7;
    uint64_t v17 = ~v12;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v18 = ((unint64_t)a2 + v13) & v17;
    id v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v19(((unint64_t)a1 + v13) & v17, v18, v16);
    unint64_t v20 = (v15 + v18) & v17;
    v19((v15 + (((unint64_t)a1 + v13) & v17)) & v17, v20, v16);
    unint64_t v21 = (v15 + v20) & v17;
    v19((v15 + ((v15 + (((unint64_t)a1 + v13) & v17)) & v17)) & v17, v21, v16);
    uint64_t v22 = (v15 + v21) & v17;
    v19((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v13) & v17)) & v17)) & v17)) & v17, v22, v16);
    uint64_t v23 = (v15 + v22) & v17;
    v19((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v13) & v17)) & v17)) & v17)) & v17)) & v17, v23, v16);
    uint64_t v24 = (v15 + v23) & v17;
    v19( (v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v13) & v17)) & v17)) & v17)) & v17)) & v17)) & v17,  v24,  v16);
    v19( (v15 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v13) & v17)) & v17)) & v17)) & v17)) & v17)) & v17)) & v17,  (v15 + v24) & v17,  v16);
  }

  else
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v10 + 16) & ~v10));
    swift_retain();
  }

  return a1;
}

uint64_t sub_1876487BC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 64) + a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v15((v4 + v7) & ~v7, v5);
  uint64_t v8 = *(void *)(v6 + 64) + v7;
  uint64_t v9 = (v8 + ((v4 + v7) & ~v7)) & ~v7;
  v15(v9, v5);
  uint64_t v10 = (v8 + v9) & ~v7;
  v15(v10, v5);
  uint64_t v11 = (v8 + v10) & ~v7;
  v15(v11, v5);
  uint64_t v12 = (v8 + v11) & ~v7;
  v15(v12, v5);
  uint64_t v13 = (v8 + v12) & ~v7;
  v15(v13, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)((v8 + v13) & ~v7, v5);
}

uint64_t sub_18764896C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v9 + a2) & ~v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v11((v6 + v9 + a1) & ~v9, v10, v7);
  uint64_t v12 = *(void *)(v8 + 64) + v9;
  uint64_t v13 = (v12 + ((v6 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v14 = (v12 + v10) & ~v9;
  v11(v13, v14, v7);
  uint64_t v15 = (v12 + v13) & ~v9;
  uint64_t v16 = (v12 + v14) & ~v9;
  v11(v15, v16, v7);
  uint64_t v17 = (v12 + v15) & ~v9;
  uint64_t v18 = (v12 + v16) & ~v9;
  v11(v17, v18, v7);
  uint64_t v19 = (v12 + v17) & ~v9;
  uint64_t v20 = (v12 + v18) & ~v9;
  v11(v19, v20, v7);
  uint64_t v21 = (v12 + v19) & ~v9;
  uint64_t v22 = (v12 + v20) & ~v9;
  v11(v21, v22, v7);
  v11((v12 + v21) & ~v9, (v12 + v22) & ~v9, v7);
  return a1;
}

uint64_t sub_187648B5C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v9 + a2) & ~v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v11((v6 + v9 + a1) & ~v9, v10, v7);
  uint64_t v12 = *(void *)(v8 + 64) + v9;
  uint64_t v13 = (v12 + ((v6 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v14 = (v12 + v10) & ~v9;
  v11(v13, v14, v7);
  uint64_t v15 = (v12 + v13) & ~v9;
  uint64_t v16 = (v12 + v14) & ~v9;
  v11(v15, v16, v7);
  uint64_t v17 = (v12 + v15) & ~v9;
  uint64_t v18 = (v12 + v16) & ~v9;
  v11(v17, v18, v7);
  uint64_t v19 = (v12 + v17) & ~v9;
  uint64_t v20 = (v12 + v18) & ~v9;
  v11(v19, v20, v7);
  uint64_t v21 = (v12 + v19) & ~v9;
  uint64_t v22 = (v12 + v20) & ~v9;
  v11(v21, v22, v7);
  v11((v12 + v21) & ~v9, (v12 + v22) & ~v9, v7);
  return a1;
}

uint64_t sub_187648D4C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v9 + a2) & ~v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v11((v6 + v9 + a1) & ~v9, v10, v7);
  uint64_t v12 = *(void *)(v8 + 64) + v9;
  uint64_t v13 = (v12 + ((v6 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v14 = (v12 + v10) & ~v9;
  v11(v13, v14, v7);
  uint64_t v15 = (v12 + v13) & ~v9;
  uint64_t v16 = (v12 + v14) & ~v9;
  v11(v15, v16, v7);
  uint64_t v17 = (v12 + v15) & ~v9;
  uint64_t v18 = (v12 + v16) & ~v9;
  v11(v17, v18, v7);
  uint64_t v19 = (v12 + v17) & ~v9;
  uint64_t v20 = (v12 + v18) & ~v9;
  v11(v19, v20, v7);
  uint64_t v21 = (v12 + v19) & ~v9;
  uint64_t v22 = (v12 + v20) & ~v9;
  v11(v21, v22, v7);
  v11((v12 + v21) & ~v9, (v12 + v22) & ~v9, v7);
  return a1;
}

uint64_t sub_187648F3C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v9 + a2) & ~v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v11((v6 + v9 + a1) & ~v9, v10, v7);
  uint64_t v12 = *(void *)(v8 + 64) + v9;
  uint64_t v13 = (v12 + ((v6 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v14 = (v12 + v10) & ~v9;
  v11(v13, v14, v7);
  uint64_t v15 = (v12 + v13) & ~v9;
  uint64_t v16 = (v12 + v14) & ~v9;
  v11(v15, v16, v7);
  uint64_t v17 = (v12 + v15) & ~v9;
  uint64_t v18 = (v12 + v16) & ~v9;
  v11(v17, v18, v7);
  uint64_t v19 = (v12 + v17) & ~v9;
  uint64_t v20 = (v12 + v18) & ~v9;
  v11(v19, v20, v7);
  uint64_t v21 = (v12 + v19) & ~v9;
  uint64_t v22 = (v12 + v20) & ~v9;
  v11(v21, v22, v7);
  v11((v12 + v21) & ~v9, (v12 + v22) & ~v9, v7);
  return a1;
}

uint64_t sub_18764912C(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = ((v13
        + v11
        + ((v13
          + v11
          + ((v13 + v11 + ((v13 + v11 + ((v13 + v11 + ((v13 + v11 + (v12 & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)
      + v13;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v10 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)(a1 + v14);
      if (!v16) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 < 2)
    {
LABEL_23:
      if (v10)
      {
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
        }
      }

      return 0LL;
    }
  }

  int v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14)) {
    goto LABEL_23;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if ((_DWORD)v14)
  {
    else {
      int v19 = 4;
    }
    __asm { BR              X12 }
  }

  return v10 + v18 + 1;
}

void sub_1876493A8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  size_t v12 = ((v11
        + v10
        + ((v11
          + v10
          + ((v11
            + v10
            + ((v11 + v10 + ((v11 + v10 + ((v11 + v10 + ((*(void *)(v6 + 64) + v10) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v10)
      + v11;
  if (a3 <= v9)
  {
    unsigned int v13 = 0u;
  }

  else if (v12 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = 4u;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }
  }

  else
  {
    unsigned int v13 = 1u;
  }

  if (v9 < a2)
  {
    unsigned int v14 = ~v9 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        int v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }

        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }

        else
        {
          *a1 = v16;
        }
      }
    }

    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t _s13ResponseProofVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s13ResponseProofVMn);
}

ValueMetadata *type metadata accessor for HE.Plaintext()
{
  return &type metadata for HE.Plaintext;
}

void sub_1876496B8(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_1876496F0()
{
  uint64_t v3 = cche_param_ctx_sizeof();
  uint64_t v4 = swift_slowAlloc();
  *(void *)(v0 + 16) = v4;
  *(void *)(v0 + 24) = v4 + v3;
  *(void *)(v0 + 32) = v4;
  int v5 = cche_param_ctx_init();
  if (v5)
  {
    int v6 = v5;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = v6;
    *(_BYTE *)(v7 + 4) = 0;
    swift_willThrow();
    _s12ParamContextCMa();
    swift_deallocPartialClassInstance();
  }

  else
  {
    *(_BYTE *)(v0 + 40) = v1;
    *(_BYTE *)(v0 + 41) = v2;
  }

  return v0;
}

uint64_t sub_187649870()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    MEMORY[0x1895AB038](v1, -1LL, -1LL);
  }
  return swift_deallocClassInstance();
}

uint64_t _s12ParamContextCMa()
{
  return objc_opt_self();
}

uint64_t sub_1876498C0()
{
  int v0 = cche_ciphertext_galois_elt_rotate_rows_right();
  if (!v0) {
    return 0LL;
  }
  int v1 = v0;
  sub_18762D1DC();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = v1;
  *(_BYTE *)(v2 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_18764997C()
{
  int v0 = cche_ciphertext_galois_elt_swap_columns();
  if (!v0) {
    return 0LL;
  }
  int v1 = v0;
  sub_18762D1DC();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = v1;
  *(_BYTE *)(v2 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_187649A28()
{
  return cche_encryption_params_polynomial_degree() >> 1;
}

uint64_t sub_187649A50()
{
  uint64_t result = cche_ciphertext_fresh_npolys();
  qword_18C6DEDE0 = result;
  return result;
}

uint64_t sub_187649A70()
{
  uint64_t result = cche_ciphertext_fresh_correction_factor();
  if (result < 0) {
    __break(1u);
  }
  else {
    qword_18C6DEDE8 = result;
  }
  return result;
}

uint64_t sub_187649A94@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = cche_plaintext_sizeof();
  type metadata accessor for HE.ObjectStorage();
  unsigned int v9 = (void *)swift_allocObject();
  v9[2] = v4;
  swift_retain();
  uint64_t result = swift_slowAlloc();
  v9[3] = result;
  v9[4] = result + v8;
  if (HIDWORD(*(void *)(a1 + 16)))
  {
    __break(1u);
  }

  else
  {
    if ((a2 & 1) != 0)
    {
      uint64_t result = cche_encode_simd_reduced_int64();
      int v11 = result;
      if ((_DWORD)result)
      {
LABEL_4:
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v12 = v11;
        *(_BYTE *)(v12 + 4) = 0;
        swift_willThrow();
        return swift_release();
      }
    }

    else
    {
      uint64_t result = cche_encode_simd_int64();
      int v11 = result;
      if ((_DWORD)result) {
        goto LABEL_4;
      }
    }

    *a3 = v9;
  }

  return result;
}

uint64_t sub_187649B98(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v3 = *(_BYTE *)(*(void *)a1 + 41LL);
  v7[0] = *(_BYTE *)(*(void *)a1 + 40LL);
  v7[1] = v3;
  char v4 = *(_BYTE *)(v2 + 40);
  LOBYTE(v2) = *(_BYTE *)(v2 + 41);
  v6[0] = v4;
  v6[1] = v2;
  return _s16CryptoKitPrivate2HEO16EncryptionParamsV2eeoiySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v6) & 1;
}

char *sub_187649BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16) && v3)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
    uint64_t v22 = v5;
    if (v5)
    {
      uint64_t v6 = sub_18769A550();
      *(void *)(v6 + 16) = v5;
      uint64_t v21 = v6;
      bzero((void *)(v6 + 32), 8 * v5);
    }

    else
    {
      uint64_t v21 = MEMORY[0x18961AFE8];
    }

    uint64_t result = (char *)sub_18769A52C();
    uint64_t v8 = 0LL;
    unsigned int v9 = (char *)MEMORY[0x18961AFE8];
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 8 * v8 + 32);
      uint64_t v11 = *(void *)(v10 + 16);
      int64_t v12 = *((void *)v9 + 2);
      int64_t v2 = v12 + v11;
      if (__OFADD__(v12, v11))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

      sub_18769A52C();
      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v2 <= *((void *)v9 + 3) >> 1)
      {
        if (*(void *)(v10 + 16)) {
          goto LABEL_18;
        }
      }

      else
      {
        if (v12 <= v2) {
          int64_t v13 = v12 + v11;
        }
        else {
          int64_t v13 = v12;
        }
        uint64_t result = sub_18765B25C(result, v13, 1, v9);
        unsigned int v9 = result;
        if (*(void *)(v10 + 16))
        {
LABEL_18:
          uint64_t v14 = *((void *)v9 + 2);
          if ((*((void *)v9 + 3) >> 1) - v14 < v11) {
            goto LABEL_32;
          }
          uint64_t result = (char *)memcpy(&v9[8 * v14 + 32], (const void *)(v10 + 32), 8 * v11);
          if (v11)
          {
            uint64_t v15 = *((void *)v9 + 2);
            BOOL v16 = __OFADD__(v15, v11);
            uint64_t v17 = v15 + v11;
            if (v16) {
              goto LABEL_33;
            }
            *((void *)v9 + 2) = v17;
          }

          goto LABEL_8;
        }
      }

      if (v11) {
        goto LABEL_31;
      }
LABEL_8:
      uint64_t result = (char *)swift_bridgeObjectRelease();
      if (v3 == ++v8)
      {
        uint64_t result = (char *)swift_bridgeObjectRelease();
        if ((unsigned __int128)(v22 * (__int128)v3) >> 64 == (v22 * v3) >> 63)
        {
          if (*((void *)v9 + 2) != v22 * v3)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }

          int64_t v2 = v21;
          sub_18769A52C();
          int v18 = cche_crt_compose();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v18) {
            return (char *)v2;
          }
          swift_bridgeObjectRelease();
          sub_18762D1DC();
          swift_allocError();
          char v20 = 0;
          *(_DWORD *)uint64_t v19 = v18;
          goto LABEL_28;
        }

LABEL_34:
        __break(1u);
        return result;
      }
    }
  }

  sub_18762D1DC();
  swift_allocError();
  *(_DWORD *)uint64_t v19 = 5;
  char v20 = 1;
LABEL_28:
  *(_BYTE *)(v19 + 4) = v20;
  swift_willThrow();
  return (char *)v2;
}

    return;
  }

  if (*(_BYTE *)(v36 + 18) != 1) {
    __asm { BR              X10 }
  }

  sub_187623C58(v144, v145);
  sub_187623C58(v124, v153);
  v116 = v151;
  v117 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
  v117(v146, v151);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v148);
  v118 = v138;
  v119 = v130;
  v130(v136, v138);
  v119(v134, v118);
  v119(v137, v118);
  sub_187623C58(v159, *((unint64_t *)&v159 + 1));
  v117(v152, v116);
  v119((uint64_t)v140, v118);
  sub_187623C58(v160, *((unint64_t *)&v160 + 1));
}

uint64_t sub_187649E68()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_187649F94(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    sub_18769A52C();
  }

  return a1;
}

uint64_t sub_18764A100(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18764A204(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  return a1;
}

uint64_t sub_18764A324(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18764A450(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_18764A56C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18764A690(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    __asm { BR              X15 }
  }

  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  }
  unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
  if (v12 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  return (v12 + 1);
}

void sub_18764A884(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (v7 >= a3)
  {
    int v10 = 0u;
    if (a2 <= v7) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v8 = a3 - v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v9 = 1;
    }
    if (v8 >= 2) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (a2 <= v7) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v11 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v11;
  }

  __asm { BR              X10 }

void sub_18764AA30()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18764AAACLL);
}

void sub_18764AA38()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x18764AA40LL);
  }
  JUMPOUT(0x18764AAACLL);
}

void sub_18764AA88()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18764AAACLL);
}

void sub_18764AA90()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18764AAACLL);
}

uint64_t sub_18764AA98@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4) {
    JUMPOUT(0x18764AAACLL);
  }
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0) {
      JUMPOUT(0x18764AAA8LL);
    }
    JUMPOUT(0x18764AAA4LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata accessor for Proof(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Proof);
}

uint64_t storeEnumTagSinglePayload for ZKPErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_18764AB20 + 4 * byte_18769D004[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18764AB54 + 4 * byte_18769CFFF[v4]))();
}

uint64_t sub_18764AB54(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18764AB5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18764AB64LL);
  }
  return result;
}

uint64_t sub_18764AB70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18764AB78LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18764AB7C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18764AB84(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ZKPErrors()
{
  return &type metadata for ZKPErrors;
}

ValueMetadata *type metadata accessor for PointVar()
{
  return &type metadata for PointVar;
}

ValueMetadata *type metadata accessor for ScalarVar()
{
  return &type metadata for ScalarVar;
}

unint64_t sub_18764ABC4()
{
  unint64_t result = qword_18C6D9EC0;
  if (!qword_18C6D9EC0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769D0A0, &type metadata for ZKPErrors);
    atomic_store(result, (unint64_t *)&qword_18C6D9EC0);
  }

  return result;
}

uint64_t sub_18764AC08()
{
  uint64_t result = sub_18763B1DC(0x654B204153444345LL, 0xEF646E696C422079LL);
  qword_18C6DEDF0 = result;
  *(void *)algn_18C6DEDF8 = v1;
  return result;
}

unint64_t sub_18764AC48(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9ED8);
  int v2 = (void *)sub_18769A6B8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = sub_187663C60((uint64_t)v6);
    if ((v8 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static CKPIETFKeyBlinding.blindSign(_:blindedBy:with:context:)( uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4, void *a5)
{
  return sub_18764BDB4(a1, a2, a3, a4, a5);
}

void static CKPIETFKeyBlinding.blindPublicKey(publicKey:with:context:)( __SecKey *a1, __SecKey *a2, uint64_t a3)
{
}

void static CKPIETFKeyBlinding.unblindPublicKey(_:with:context:)(__SecKey *a1, __SecKey *a2, void *a3)
{
}

id sub_18764B048( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(id, id, id))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  int64_t v13 = (void *)a7(v10, v11, v12);

  return v13;
}

id CKPIETFKeyBlinding.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CKPIETFKeyBlinding.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKPIETFKeyBlinding();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CKPIETFKeyBlinding.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKPIETFKeyBlinding();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_18764B1C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFF0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9F08);
  uint64_t v3 = (void *)sub_18769A6B8();
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_187663C2C(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    sub_18769A52C();
    return (unint64_t)v3;
  }

  char v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1LL);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    void v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    id v12 = v8 + 2;
    unsigned int v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = *v8;
    sub_18769A52C();
    unint64_t result = sub_187663C2C(v4);
    char v8 = v12;
    uint64_t v5 = v13;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_18764B2C4(__SecKey *a1)
{
  uint64_t result = (uint64_t)SecKeyCopyAttributes(a1);
  if (result)
  {
    *(void *)&__int128 v2 = 0LL;
    type metadata accessor for CFString(0LL);
    sub_187639840( &qword_18C6D9818,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_18769BF88);
    uint64_t result = sub_18769A3E8();
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

void sub_18764B568()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18769CCD0;
  uint64_t v1 = (void *)*MEMORY[0x18960B998];
  __int128 v2 = (void *)*MEMORY[0x18960B9B0];
  *(void *)(inited + 32) = *MEMORY[0x18960B998];
  *(void *)(inited + 40) = v2;
  uint64_t v3 = (void *)*MEMORY[0x18960B968];
  unsigned int v4 = (void *)*MEMORY[0x18960B980];
  *(void *)(inited + 48) = *MEMORY[0x18960B968];
  *(void *)(inited + 56) = v4;
  uint64_t v5 = (void *)*MEMORY[0x18960B988];
  *(void *)(inited + 64) = *MEMORY[0x18960B988];
  id v6 = v1;
  id v7 = v2;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  *(void *)(inited + 72) = sub_18769A574();
  sub_18764AC48(inited);
  type metadata accessor for CFString(0LL);
  sub_187639840( &qword_18C6D9818,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_18769BF88);
  uint64_t v11 = (const __CFDictionary *)sub_18769A3DC();
  swift_bridgeObjectRelease();
  id v12 = (const __CFData *)sub_187699F80();
  SecKeyRef v13 = SecKeyCreateWithData(v12, v11, 0LL);

  if (v13) {
  else
  }
    __break(1u);
}

void _s16CryptoKitPrivate18CKPIETFKeyBlindingC23privateScalarFromSecKeyy10Foundation4DataVSgSo0iJ3RefaFZ_0( __SecKey *a1)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  sub_18764B2C4(a1);
  error[0] = 0LL;
  CFDataRef v2 = SecKeyCopyExternalRepresentation(a1, error);
  CFDataRef v3 = v2;
  if (v2)
  {
    uint64_t v4 = sub_187699F98();
    unint64_t v6 = v5;

    sub_18769A37C();
    id v7 = (uint64_t (*)(uint64_t))MEMORY[0x189605D70];
    sub_187623A28(v4, v6);
    sub_187639840((unint64_t *)&qword_18C4C7198, v7, MEMORY[0x189605D68]);
    sub_18769A22C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
    swift_dynamicCast();
    id v8 = objc_allocWithZone(MEMORY[0x18960F078]);
    id v9 = (void *)sub_187699F80();
    id v10 = objc_msgSend(v8, sel_initWithx963Representation_group_, v9, v13);
    sub_187623C58(v4, v6);

    if (v10)
    {
      id v11 = objc_msgSend(v10, sel_serializedBigEndianScalar);
      if (v11)
      {
        id v12 = v11;
        sub_187699F98();

        sub_187623C58(v4, v6);
      }

      else
      {

        sub_187623C58(v4, v6);
      }
    }

    else
    {
      __break(1u);
    }
  }

CFDataRef _s16CryptoKitPrivate18CKPIETFKeyBlindingC7isValid9signature3for4with7contextSb10Foundation4DataV_AKSo9SecKeyRefaSo6NSDataCtFZ_0( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, __SecKey *a5)
{
  uint64_t v45 = a3;
  unint64_t v46 = a4;
  uint64_t v43 = a1;
  unint64_t v44 = a2;
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9F00);
  MEMORY[0x1895F8858](v6);
  id v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_18769A328();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  id v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9EF0);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_18769A370();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18764B2C4(a5);
  unint64_t v36 = v12;
  uint64_t v37 = v19;
  uint64_t v41 = v17;
  uint64_t v42 = v16;
  uint64_t v38 = v10;
  uint64_t v39 = v8;
  uint64_t v21 = v45;
  unint64_t v20 = v46;
  uint64_t v40 = v9;
  error[0] = 0LL;
  CFDataRef result = SecKeyCopyExternalRepresentation(a5, error);
  if (result)
  {
    CFDataRef v23 = result;
    uint64_t v24 = sub_187699F98();
    unint64_t v26 = v25;

    uint64_t v47 = v24;
    unint64_t v48 = v26;
    sub_187623A28(v24, v26);
    sub_18769A34C();
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v15, 0LL, 1LL, v42);
    unint64_t v29 = v37;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v37, v15, v27);
    uint64_t v47 = v43;
    unint64_t v48 = v44;
    sub_187623A28(v43, v44);
    sub_18764D2A8();
    unint64_t v30 = v39;
    sub_18769A31C();
    unint64_t v44 = v26;
    uint64_t v31 = v38;
    uint64_t v32 = v40;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v30, 0LL, 1LL, v40);
    id v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    uint64_t v43 = v24;
    unint64_t v34 = v36;
    v33(v36, v30, v32);
    uint64_t v47 = v21;
    unint64_t v48 = v20;
    char v35 = sub_18769A334();
    sub_187623C58(v43, v44);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
    return (CFDataRef)(v35 & 1);
  }

  if (error[0])
  {

    char v35 = 0;
    return (CFDataRef)(v35 & 1);
  }

  __break(1u);
  return result;
}

uint64_t sub_18764BC24(void *a1, id a2, unint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (!v6) {
    __break(1u);
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_187699F98();
  unint64_t v10 = v9;

  sub_18763CF30(0LL, 0x1000000000000LL);
  sub_187623A28(v8, v10);
  sub_187623A28((uint64_t)a2, a3);
  sub_18763CF30((uint64_t)a2, a3);
  sub_187623C58((uint64_t)a2, a3);
  sub_187623C58(v8, v10);
  if (qword_18C6D9768 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_187641FD8(v8, v10, 1LL, qword_18C6DEDF0, *(uint64_t *)algn_18C6DEDF8, 72LL, 0);
  if (v3) {
    goto LABEL_7;
  }
  if (*(void *)(v11 + 16))
  {
    a2 = *(id *)(v11 + 32);
    swift_bridgeObjectRelease();
LABEL_7:
    sub_187623C58(v8, v10);
    return (uint64_t)a2;
  }

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_18764BDB4(uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4, void *a5)
{
  uint64_t v61 = a2;
  id v62 = a5;
  uint64_t v60 = a1;
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  uint64_t v8 = sub_18769A328();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = (void *)sub_18769A304();
  uint64_t v13 = *(v12 - 1);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  error[0] = 0LL;
  sub_18764B2C4(a3);
  if (v5) {
    return (uint64_t)v12;
  }
  sub_18764B2C4(a4);
  CFDataRef v16 = SecKeyCopyExternalRepresentation(a4, error);
  if (!v16)
  {
    if (!error[0])
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    sub_18764D1D0();
    swift_allocError();
    *uint64_t v39 = 3;
    swift_willThrow();
    return (uint64_t)v12;
  }

  CFDataRef v17 = v16;
  uint64_t v52 = v13;
  uint64_t v53 = v12;
  uint64_t v18 = sub_187699F98();
  uint64_t v58 = v18;
  unint64_t v20 = v19;

  uint64_t v21 = sub_18769A37C();
  unint64_t v59 = v20;
  sub_187623A28(v18, v20);
  uint64_t v55 = sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  uint64_t v56 = (void *)v21;
  sub_18769A22C();
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t v57 = v63;
  id v22 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v23 = v58;
  uint64_t v24 = (void *)sub_187699F80();
  id v12 = objc_msgSend(v22, sel_initWithx963Representation_group_, v24, v57);
  sub_187623C58(v23, v59);

  if (!v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  CFDataRef v25 = SecKeyCopyExternalRepresentation(a3, error);
  if (!v25)
  {
    if (!error[0])
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    sub_18764D1D0();
    swift_allocError();
    *uint64_t v40 = 3;
    swift_willThrow();

    sub_187623C58(v58, v59);
    return (uint64_t)v12;
  }

  CFDataRef v26 = v25;
  unint64_t v57 = v12;
  uint64_t v27 = sub_187699F98();
  unint64_t v29 = v28;

  unint64_t v30 = v29;
  sub_187623A28(v27, v29);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v56 = v63;
  id v31 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v32 = (void *)sub_187699F80();
  id v33 = objc_msgSend(v31, sel_initWithx963Representation_group_, v32, v56);
  uint64_t v55 = v27;
  uint64_t v56 = (void *)v30;
  uint64_t v34 = v27;
  char v35 = v33;
  sub_187623C58(v34, v30);

  if (!v35)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v37 = (void *)sub_187699F98();
  unint64_t v38 = v36;
  uint64_t v42 = (void *)sub_18764BC24(v35, v37, v36);
  id v62 = v35;
  sub_187623C58((uint64_t)v37, v38);
  id v43 = sub_18766D7B8(v57, (uint64_t)v42);

  id v44 = objc_msgSend(v43, sel_x963Representation);
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = sub_187699F98();
    uint64_t v48 = v47;

    uint64_t v64 = v46;
    uint64_t v65 = v48;
    sub_18769A2EC();
    uint64_t v64 = v60;
    uint64_t v65 = v61;
    sub_18764D2A8();
    sub_18769A2F8();
    uint64_t v49 = sub_18769A310();
    unint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    id v12 = (void *)sub_187699F80();
    sub_187623C58(v49, v51);

    sub_187623C58(v55, (unint64_t)v56);
    sub_187623C58(v58, v59);

    (*(void (**)(char *, void *))(v52 + 8))(v15, v53);
    return (uint64_t)v12;
  }

uint64_t _s16CryptoKitPrivate18CKPIETFKeyBlindingC28compressedRepresentationFrom6secKeySo6NSDataCSgSo03SecJ3Refa_tFZ_0( __SecKey *a1)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9EF0);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_18769A370();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  error[0] = 0LL;
  sub_18764B2C4(a1);
  CFDataRef v11 = SecKeyCopyExternalRepresentation(a1, error);
  if (!v11) {
    return 0LL;
  }
  CFDataRef v12 = v11;
  uint64_t v13 = sub_187699F98();
  unint64_t v15 = v14;

  v19[2] = v13;
  v19[3] = v15;
  sub_187623A28(v13, v15);
  sub_18769A34C();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  uint64_t v16 = sub_18769A358();
  unint64_t v18 = v17;
  uint64_t v9 = sub_187699F80();
  sub_187623C58(v16, v18);
  sub_187623C58(v13, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t _s16CryptoKitPrivate18CKPIETFKeyBlindingC10secKeyFrom24compressedRepresentationSo03SecG3RefaSgSo6NSDataC_tFZ_0()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9EF0);
  MEMORY[0x1895F8858](v0);
  uint64_t v2 = (char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_18769A370();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15[2] = sub_187699F98();
  v15[3] = v7;
  sub_18769A364();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0LL, 1LL, v3);
  uint64_t v8 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  uint64_t v9 = MEMORY[0x1895AA120](v8);
  unint64_t v11 = v10;
  sub_18764B568();
  uint64_t v13 = v12;
  sub_187623C58(v9, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v13;
}

void sub_18764C6B8(__SecKey *a1, __SecKey *a2, uint64_t a3)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  uint64_t v7 = sub_18769A370();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  unint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  unint64_t v14 = (char *)&v57 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v57 - v15;
  sub_18764B2C4(a1);
  if (!v3)
  {
    sub_18764B2C4(a2);
    error[0] = 0LL;
    CFDataRef v17 = SecKeyCopyExternalRepresentation(a1, error);
    if (v17)
    {
      CFDataRef v18 = v17;
      uint64_t v64 = a3;
      uint64_t v65 = v7;
      uint64_t v19 = sub_187699F98();
      unint64_t v21 = v20;

      unint64_t v22 = v21;
      uint64_t v23 = v19;
      uint64_t v67 = v19;
      unint64_t v68 = v22;
      sub_187623A28(v19, v22);
      sub_18769A34C();
      unint64_t v62 = v22;
      uint64_t v25 = v65;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v16, v65);
      uint64_t v26 = sub_18769A358();
      unint64_t v63 = v27;
      id v61 = sub_187646200();
      sub_187623C58(v26, v63);
      unint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v14, v25);
      CFDataRef v29 = SecKeyCopyExternalRepresentation(a2, error);
      if (!v29)
      {
        if (error[0])
        {

          sub_18764D1D0();
          swift_allocError();
          _BYTE *v44 = 3;
          swift_willThrow();

          sub_187623C58(v23, v62);
          v28(v16, v25);
          return;
        }

        goto LABEL_17;
      }

      CFDataRef v30 = v29;
      uint64_t v60 = v28;
      unint64_t v63 = v23;
      uint64_t v31 = sub_187699F98();
      unint64_t v33 = v32;

      sub_18769A37C();
      uint64_t v34 = (uint64_t (*)(uint64_t))MEMORY[0x189605D70];
      sub_187623A28(v31, v33);
      sub_187639840((unint64_t *)&qword_18C4C7198, v34, MEMORY[0x189605D68]);
      sub_18769A22C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
      swift_dynamicCast();
      uint64_t v35 = v66;
      id v36 = objc_allocWithZone(MEMORY[0x18960F078]);
      uint64_t v37 = (void *)sub_187699F80();
      id v38 = objc_msgSend(v36, sel_initWithx963Representation_group_, v37, v35);
      uint64_t v58 = v31;
      unint64_t v59 = v33;
      uint64_t v39 = v31;
      uint64_t v40 = v38;
      sub_187623C58(v39, v33);

      if (v40)
      {
        uint64_t v42 = (void *)sub_187699F98();
        unint64_t v43 = v41;
        uint64_t v45 = (void *)sub_18764BC24(v40, v42, v41);
        sub_187623C58((uint64_t)v42, v43);
        id v46 = sub_18764FE4C((uint64_t)v45, v61);

        id v47 = objc_msgSend(v46, sel_serializedPublicKey_, 1);
        if (v47)
        {
          uint64_t v48 = v47;
          uint64_t v49 = sub_187699F98();
          unint64_t v51 = v50;

          uint64_t v67 = v49;
          unint64_t v68 = v51;
          uint64_t v52 = sub_18769A364();
          uint64_t v53 = MEMORY[0x1895AA120](v52);
          unint64_t v55 = v54;
          sub_18764B568();
          sub_187623C58(v53, v55);

          sub_187623C58(v58, v59);
          sub_187623C58(v63, v62);
          uint64_t v56 = v60;
          v60(v11, v25);
          v56(v16, v25);
          return;
        }

        goto LABEL_18;
      }
    }

    else
    {
      if (error[0])
      {

        sub_18764D1D0();
        swift_allocError();
        _BYTE *v24 = 3;
        swift_willThrow();
        return;
      }

      __break(1u);
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }

void sub_18764CC08(__SecKey *a1, __SecKey *a2, void *a3)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  uint64_t v7 = sub_18769A370();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  unint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  unint64_t v14 = (char *)&v58 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v58 - v15;
  error[0] = 0LL;
  sub_18764B2C4(a1);
  if (!v3)
  {
    sub_18764B2C4(a2);
    CFDataRef v17 = SecKeyCopyExternalRepresentation(a1, error);
    if (v17)
    {
      CFDataRef v18 = v17;
      id v67 = a3;
      uint64_t v68 = v7;
      uint64_t v19 = sub_187699F98();
      unint64_t v21 = v20;

      unint64_t v22 = v21;
      uint64_t v23 = v19;
      uint64_t v70 = v19;
      unint64_t v71 = v22;
      sub_187623A28(v19, v22);
      sub_18769A34C();
      unint64_t v66 = v22;
      uint64_t v25 = v68;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v16, v68);
      uint64_t v26 = sub_18769A358();
      unint64_t v65 = v27;
      id v64 = sub_187646200();
      sub_187623C58(v26, v65);
      unint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v14, v25);
      CFDataRef v29 = SecKeyCopyExternalRepresentation(a2, error);
      if (!v29)
      {
        if (error[0])
        {

          sub_18764D1D0();
          swift_allocError();
          _BYTE *v44 = 3;
          swift_willThrow();

          sub_187623C58(v23, v66);
          v28(v16, v25);
          return;
        }

        goto LABEL_18;
      }

      CFDataRef v30 = v29;
      unint64_t v63 = v28;
      unint64_t v65 = v23;
      uint64_t v31 = sub_187699F98();
      unint64_t v33 = v32;

      sub_18769A37C();
      uint64_t v34 = (uint64_t (*)(uint64_t))MEMORY[0x189605D70];
      sub_187623A28(v31, v33);
      sub_187639840((unint64_t *)&qword_18C4C7198, v34, MEMORY[0x189605D68]);
      sub_18769A22C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
      swift_dynamicCast();
      uint64_t v35 = v69;
      id v36 = objc_allocWithZone(MEMORY[0x18960F078]);
      uint64_t v37 = (void *)sub_187699F80();
      id v38 = objc_msgSend(v36, sel_initWithx963Representation_group_, v37, v35);
      uint64_t v61 = v31;
      unint64_t v62 = v33;
      uint64_t v39 = v31;
      uint64_t v40 = v38;
      sub_187623C58(v39, v33);

      if (v40)
      {
        uint64_t v42 = (void *)sub_187699F98();
        unint64_t v43 = v41;
        uint64_t v45 = (void *)sub_18764BC24(v40, v42, v41);
        sub_187623C58((uint64_t)v42, v43);
        id v46 = objc_msgSend(v45, sel_inverseModOrder);
        if (v46)
        {
          id v67 = v45;
          id v60 = v46;
          id v59 = sub_18764FE4C((uint64_t)v46, v64);
          id v47 = objc_msgSend(v59, sel_serializedPublicKey_, 1);
          uint64_t v48 = v65;
          if (v47)
          {
            uint64_t v49 = v47;
            uint64_t v50 = sub_187699F98();
            unint64_t v52 = v51;

            uint64_t v70 = v50;
            unint64_t v71 = v52;
            uint64_t v53 = sub_18769A364();
            uint64_t v54 = MEMORY[0x1895AA120](v53);
            unint64_t v56 = v55;
            sub_18764B568();
            sub_187623C58(v54, v56);

            sub_187623C58(v61, v62);
            sub_187623C58(v48, v66);
            uint64_t v57 = v63;
            v63(v11, v25);
            v57(v16, v25);
            return;
          }

          goto LABEL_20;
        }

uint64_t type metadata accessor for CKPIETFKeyBlinding()
{
  return objc_opt_self();
}

unint64_t sub_18764D1D0()
{
  unint64_t result = qword_18C6D9EC8;
  if (!qword_18C6D9EC8)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769D1D4, &type metadata for CKPIETFKeyBlindingErrors);
    atomic_store(result, (unint64_t *)&qword_18C6D9EC8);
  }

  return result;
}

uint64_t sub_18764D214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_18764D25C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_18764D26C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_18764D2A8()
{
  unint64_t result = qword_18C6D9EF8;
  if (!qword_18C6D9EF8)
  {
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189606D48], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C6D9EF8);
  }

  return result;
}

uint64_t sub_18764D2EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t storeEnumTagSinglePayload for CKPIETFKeyBlindingErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_18764D374 + 4 * byte_18769D115[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18764D3A8 + 4 * byte_18769D110[v4]))();
}

uint64_t sub_18764D3A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18764D3B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18764D3B8LL);
  }
  return result;
}

uint64_t sub_18764D3C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18764D3CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_18764D3D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18764D3D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CKPIETFKeyBlindingErrors()
{
  return &type metadata for CKPIETFKeyBlindingErrors;
}

unint64_t sub_18764D3F8()
{
  unint64_t result = qword_18C6D9F10[0];
  if (!qword_18C6D9F10[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769D1AC, &type metadata for CKPIETFKeyBlindingErrors);
    atomic_store(result, qword_18C6D9F10);
  }

  return result;
}

objc_class *RSAPSSSPKI_Bridging.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_18769A19C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = objc_allocWithZone(v2);
  sub_187623A28(a1, a2);
  sub_18769A184();
  if (v3)
  {
    sub_187623C58(a1, a2);

    swift_deallocPartialClassInstance();
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( (uint64_t)v10 + OBJC_IVAR____TtC16CryptoKitPrivate19RSAPSSSPKI_Bridging_backingStruct,  v9,  v6);

    v12.receiver = v10;
    v12.super_class = v2;
    __int128 v2 = (objc_class *)objc_msgSendSuper2(&v12, sel_init);
    sub_187623C58(a1, a2);
  }

  return v2;
}

id RSAPSSSPKI_Bridging.init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_18769A19C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = v2;
  sub_187623A28(a1, a2);
  sub_18769A184();
  if (v3)
  {
    sub_187623C58(a1, a2);

    type metadata accessor for RSAPSSSPKI_Bridging();
    swift_deallocPartialClassInstance();
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( (uint64_t)v10 + OBJC_IVAR____TtC16CryptoKitPrivate19RSAPSSSPKI_Bridging_backingStruct,  v9,  v6);

    unint64_t v11 = (objc_class *)type metadata accessor for RSAPSSSPKI_Bridging();
    v13.receiver = v10;
    v13.super_class = v11;
    id v10 = objc_msgSendSuper2(&v13, sel_init);
    sub_187623C58(a1, a2);
  }

  return v10;
}

uint64_t type metadata accessor for RSAPSSSPKI_Bridging()
{
  uint64_t result = qword_18C4C7078;
  if (!qword_18C4C7078) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_18764D888()
{
  return sub_18769A178();
}

uint64_t static RSAPSSSPKI_Bridging.serialize(keyBytes:)()
{
  return sub_18769A190();
}

id RSAPSSSPKI_Bridging.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void RSAPSSSPKI_Bridging.init()()
{
}

id RSAPSSSPKI_Bridging.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RSAPSSSPKI_Bridging();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18764DAF4()
{
  return type metadata accessor for RSAPSSSPKI_Bridging();
}

uint64_t sub_18764DAFC()
{
  uint64_t result = sub_18769A19C();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for RSAPSSSPKI_Bridging()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RSAPSSSPKI_Bridging.__allocating_init(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of RSAPSSSPKI_Bridging.publicKeyBytes()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x60LL))();
}

uint64_t sub_18764DBA8()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_18764DC24(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(void *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }

  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }

  return a1;
}

uint64_t sub_18764DCB8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t sub_18764DD04(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_18764DD5C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_18764DDB4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_18764DE0C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_18764DE64(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if ((_DWORD)v7)
  {
    __asm { BR              X11 }
  }

  return (v6 + v11 + 1);
}

void sub_18764DFA4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t _s12TokenRequestVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s12TokenRequestVMn);
}

ValueMetadata *type metadata accessor for PEC()
{
  return &type metadata for PEC;
}

uint64_t sub_18764E194(unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_18769A46C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unsigned int v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18769A448();
  uint64_t v10 = sub_18769A43C();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    sub_1876398C0(a1, 1LL);
    uint64_t v15 = v14;
    unint64_t v17 = v16;
    uint64_t v24 = v10;
    unint64_t v25 = v12;
    sub_187623A28(v10, v12);
    sub_18763CF30(v15, v17);
    sub_187623C58(v15, v17);
    sub_1876482B4(v10, v12);
    uint64_t v18 = v24;
    unint64_t v19 = v25;
    sub_18767D534(a2, a3 & 1);
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t v26 = v18;
    unint64_t v27 = v19;
    sub_187623A28(v18, v19);
    sub_18763CF30(v21, v23);
    sub_187623C58(v21, v23);
    sub_187623C58(v18, v19);
    return v26;
  }

  return result;
}

uint64_t sub_18764E338( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, void *a9, char a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v100 = a3;
  unint64_t v101 = a4;
  uint64_t v96 = a1;
  uint64_t v97 = a2;
  uint64_t v17 = sub_18769A46C();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a10 != 1)
  {
    __break(1u);
    JUMPOUT(0x18764EC40LL);
  }

  id v99 = v12;
  uint64_t v91 = a6;
  uint64_t v92 = a7;
  unint64_t v22 = (void *)v19;
  int v95 = a12;
  uint64_t v93 = a11;
  uint64_t v23 = sub_18764E194(1u, a11, a12 & 1);
  unint64_t v25 = v24;
  sub_18769A448();
  uint64_t v26 = sub_18769A43C();
  unint64_t v28 = v27;
  v103 = *(void (**)(char *, void *))(v18 + 8);
  v104 = v22;
  v103(v21, v22);
  if (v28 >> 60 == 15)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v105 = v26;
  unint64_t v106 = v28;
  sub_18764642C(v26, v28);
  sub_187623A28(v23, v25);
  sub_18763CF30(v23, v25);
  sub_187623C58(v23, v25);
  sub_1876482B4(v26, v28);
  unint64_t v29 = v106;
  uint64_t v109 = v105;
  unint64_t v30 = v101;
  uint64_t v94 = a5;
  uint64_t v90 = a8;
  if (v101 >> 60 != 15) {
    __asm { BR              X10 }
  }

  uint64_t v31 = v100;
  unint64_t v102 = v25;
  sub_1876398C0(0LL, 2LL);
  uint64_t v33 = v32;
  unint64_t v35 = v34;
  uint64_t v107 = v109;
  uint64_t v108 = v29;
  unint64_t v98 = v29;
  sub_187623A28(v109, v29);
  sub_18763CF30(v33, v35);
  sub_187623C58(v33, v35);
  uint64_t v36 = v107;
  unint64_t v37 = v108;
  uint64_t v105 = v107;
  unint64_t v106 = v108;
  sub_18764642C(v31, v30);
  sub_187623A28(v36, v37);
  sub_187623A28(0LL, 0xC000000000000000LL);
  sub_18763CF30(0LL, 0xC000000000000000LL);
  sub_187623C58(0LL, 0xC000000000000000LL);
  sub_187623C58(0LL, 0xC000000000000000LL);
  sub_187623C58(v36, v37);
  uint64_t v39 = v105;
  uint64_t v38 = v106;
  sub_18769A448();
  uint64_t v40 = sub_18769A43C();
  unint64_t v42 = v41;
  uint64_t v89 = v21;
  v103(v21, v104);
  if (v42 >> 60 == 15) {
    goto LABEL_19;
  }
  uint64_t v105 = v40;
  unint64_t v106 = v42;
  unint64_t v43 = v102;
  sub_187623A28(v23, v102);
  sub_18764642C(v40, v42);
  sub_18763CF30(v23, v43);
  sub_187623C58(v23, v43);
  sub_1876482B4(v40, v42);
  uint64_t v44 = v105;
  uint64_t v45 = v106;
  uint64_t v46 = sub_18769A37C();
  uint64_t v47 = sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  uint64_t v48 = sub_18769A220();
  id v49 = v99;
  uint64_t v50 = sub_187641FD8(v39, v38, 1LL, v44, v45, v48, 0);
  id v99 = v49;
  if (v49)
  {
    sub_187623C58(v44, v45);
    sub_187623C58(v39, v38);
    sub_187623C58(v109, v98);
    sub_187623C58(v23, v43);
    return v46;
  }

  uint64_t v88 = v47;
  uint64_t v85 = v39;
  uint64_t v86 = v23;
  unint64_t v87 = v38;
  if (!*(void *)(v50 + 16)) {
    goto LABEL_20;
  }
  unint64_t v51 = (char *)*(id *)(v50 + 32);
  swift_bridgeObjectRelease();
  sub_187623C58(v44, v45);
  sub_18769A22C();
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v107);
  id v53 = sub_18764FE4C((uint64_t)v51, v52);

  id v54 = sub_187657164(a9, (uint64_t)v53);
  unint64_t v55 = v89;
  sub_18769A448();
  uint64_t v56 = sub_18769A43C();
  unint64_t v58 = v57;
  v103(v55, v104);
  uint64_t v59 = v93;
  id v60 = v99;
  if (v58 >> 60 == 15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v89 = v51;
  id v83 = v53;
  v104 = v54;
  int v61 = v95 & 1;
  uint64_t v62 = sub_18764E194(1u, v93, v95 & 1);
  uint64_t v63 = v59;
  unint64_t v65 = v64;
  uint64_t v105 = v56;
  unint64_t v106 = v58;
  sub_187623A28(v56, v58);
  sub_18763CF30(v62, v65);
  sub_187623C58(v62, v65);
  sub_1876482B4(v56, v58);
  uint64_t v66 = v105;
  unint64_t v67 = v106;
  sub_187651220(v96, v97, v105, v106);
  if (v60)
  {
LABEL_22:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x18764EC80LL);
  }

  uint64_t v69 = v68;
  id v70 = sub_18764FE4C((uint64_t)v94, v68);
  sub_187623C58(v66, v67);

  sub_18769A22C();
  swift_dynamicCast();
  id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v107);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18769C700;
  unsigned __int8 v73 = v91;
  *(void *)(inited + 32) = v91;
  uint64_t v46 = inited + 32;
  *(void *)(inited + 40) = v70;
  id v74 = v73;
  v103 = (void (*)(char *, void *))v70;
  uint64_t v75 = v63;
  uint64_t v76 = sub_18764E194(1u, v63, v61);
  unint64_t v78 = v77;
  id v99 = v71;
  LOBYTE(v71) = sub_18764EC90(v71, v104, inited, (uint64_t)v92, v90, v76, v77, v61);
  uint64_t v92 = v74;

  sub_187623C58(v76, v78);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(qword_18C4C71E0);
  swift_arrayDestroy();
  uint64_t v79 = v85;
  if ((v71 & 1) != 0)
  {
    sub_18764EE18(v96, v97, v100, v101, v94, v92, 1, v75, v95 & 1);
    uint64_t v46 = v80;
  }

  else
  {
    sub_187651718();
    swift_allocError();
    swift_willThrow();
  }

  sub_187623C58(v79, v87);
  sub_187623C58(v109, v98);
  sub_187623C58(v86, v102);

  return v46;
}

uint64_t sub_18764EC90( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8)
{
  if (!v8)
  {
    unint64_t v16 = v15;
    id v17 = sub_18764FE4C(a5, a1);
    uint64_t v32 = a7;
    uint64_t v18 = a4;
    id v19 = sub_18764FE4C(a4, a2);
    id v31 = sub_187657164(v17, (uint64_t)v19);

    a4 = (uint64_t)sub_18764FE4C(a5, v16);
    id v20 = v33;
    uint64_t v30 = v18;
    uint64_t v21 = v18;
    unint64_t v22 = v16;
    id v23 = sub_18764FE4C(v21, v33);
    id v24 = sub_187657164((void *)a4, (uint64_t)v23);

    uint64_t v25 = a6;
    uint64_t v26 = v24;
    sub_18767048C(v25, v32, a2, v22, v20, v31, v24);
    unint64_t v29 = v28;
    LOBYTE(a4) = objc_msgSend(v28, sel_isEqual_, v30);
  }

  return a4 & 1;
}

void sub_18764EE18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int a7, uint64_t a8, char a9)
{
  uint64_t v24 = a8;
  int v25 = a7;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v15 = sub_18769A3D0();
  v23[1] = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v16 = sub_18769A1F0();
  v23[3] = *(void *)(v16 - 8);
  v23[4] = v16;
  MEMORY[0x1895F8858](v16);
  v23[2] = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v18 = objc_msgSend(a5, sel_inverseModOrder);
  if (v18)
  {
    id v19 = v18;
    id v20 = sub_18764FE4C((uint64_t)v18, a6);

    v23[0] = v20;
    sub_18766CE0C(a1, a2, a3, a4, (uint64_t)v20, v24, v25, a9 & 1);
    uint64_t v22 = v21;
    sub_187639840(&qword_18C4C71B8, (uint64_t (*)(uint64_t))MEMORY[0x189605E10], MEMORY[0x189605E08]);
    sub_18769A1CC();
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x18764F214LL);
}

id sub_18764F23C( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, id a5, void *a6, void *a7, uint64_t a8, void *a9, char a10, uint64_t a11, char a12)
{
  uint64_t v67 = a8;
  __int128 v72 = a7;
  uint64_t v66 = a6;
  uint64_t v17 = sub_18769A46C();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  if ((a12 & 1) == 0)
  {
    uint64_t v62 = a9;
    uint64_t v64 = a1;
    uint64_t v65 = a2;
    uint64_t v63 = a3;
    unint64_t v22 = a4 >> 60;
    if (a4 >> 60 != 15 && a10 == 1)
    {
      sub_18765175C();
      swift_allocError();
      *id v23 = 1;
      swift_willThrow();
      return a5;
    }

    unint64_t v57 = a4;
    uint64_t v59 = a5;
    uint64_t v24 = v18;
    int v25 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v26 = v20;
    uint64_t v61 = sub_18764E194(a10, a11, 0);
    unint64_t v60 = v27;
    sub_18769A448();
    uint64_t v28 = sub_18769A43C();
    unint64_t v30 = v29;
    id v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    v56[3] = v25;
    v56[4] = v24;
    v56[2] = v31;
    v31(v25, v24);
    if (v30 >> 60 == 15)
    {
      __break(1u);
    }

    else
    {
      uint64_t v58 = a11;
      uint64_t v32 = sub_18764E194(a10, a11, 0);
      unint64_t v34 = v33;
      uint64_t v69 = v28;
      unint64_t v70 = v30;
      sub_187623A28(v28, v30);
      sub_18763CF30(v32, v34);
      sub_187623C58(v32, v34);
      sub_1876482B4(v28, v30);
      uint64_t v35 = v69;
      unint64_t v36 = v70;
      id v37 = v68;
      sub_187651220(v64, v65, v69, v70);
      uint64_t v39 = (uint64_t)v72;
      if (v37)
      {
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x18764FE3CLL);
      }

      uint64_t v40 = v38;
      id v41 = sub_18764FE4C((uint64_t)v59, v38);
      sub_187623C58(v35, v36);

      if (a10 == 1)
      {
        sub_18769A37C();
        sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
        sub_18769A22C();
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
        swift_dynamicCast();
        unint64_t v42 = v41;
        a5 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v71);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71D8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18769C700;
        *(void *)(inited + 32) = v41;
        uint64_t v44 = v66;
        *(void *)(inited + 40) = v66;
        id v68 = v42;
        id v45 = v44;
        uint64_t v46 = sub_18764E194(1u, v58, 0);
        unint64_t v48 = v47;
        char v49 = sub_18764EC90(a5, v62, inited, v39, v67, v46, v47, 0);
        char v50 = v49;
        unint64_t v51 = v45;
        id v52 = v68;

        sub_187623C58(v46, v48);
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(qword_18C4C71E0);
        swift_arrayDestroy();
        unint64_t v53 = v60;
        if ((v50 & 1) != 0)
        {
          sub_18764EE18(v64, v65, v63, v57, v59, v51, 1, v58, 0);
          a5 = v54;

          sub_187623C58(v61, v53);
        }

        else
        {
          sub_187651718();
          swift_allocError();
          swift_willThrow();
          sub_187623C58(v61, v53);
        }

        return a5;
      }

      id v68 = 0LL;
      if (a10 != 2)
      {
        __break(1u);
        JUMPOUT(0x18764FDFCLL);
      }

      sub_18763B1DC(1868983881LL, 0xE400000000000000LL);
      if (v22 <= 0xE) {
        __asm { BR              X10 }
      }
    }

    __break(1u);
    JUMPOUT(0x18764FE0CLL);
  }

  uint64_t v21 = sub_18764E338(a1, a2, a3, a4, a5, v66, v72, v67, a9, a10, a11, 1u);
  if (!v68) {
    return (id)v21;
  }
  return a5;
}

id sub_18764FE4C(uint64_t a1, id a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  id result = objc_msgSend(a2, sel_multiply_corecryptoError_, a1, &v3);
  if (!result)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    id result = (id)sub_18769A67C();
    __break(1u);
  }

  return result;
}

uint64_t PIR.BlindedKeyword.blindedElement.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_187623A28(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t PIR.BlindedKeyword.blindedElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_187623C58(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PIR.BlindedKeyword.blindedElement.modify())()
{
  return nullsub_1;
}

unint64_t sub_18764FFE0(uint64_t a1)
{
  return sub_187650064(a1, (SEL *)&selRef_groupOrderByteCountForCP_, (unint64_t *)&qword_18C6DEE00);
}

uint64_t sub_18764FFF4()
{
  if (qword_18C6D9770 != -1) {
    uint64_t result = swift_once();
  }
  if (qword_18C6DEE00 + 0x4000000000000000LL < 0) {
    __break(1u);
  }
  else {
    qword_18C6DEE08 = 2 * qword_18C6DEE00;
  }
  return result;
}

unint64_t sub_187650050(uint64_t a1)
{
  return sub_187650064( a1,  (SEL *)&selRef_compressedx962PointByteCountForCurveParameters_,  (unint64_t *)&qword_18C6DEE10);
}

unint64_t sub_187650064(uint64_t a1, SEL *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t result = (unint64_t)objc_msgSend(v5, *a2, v7);
  if ((result & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  else {
    *a3 = result;
  }
  return result;
}

uint64_t PIR.SymmetricPIRClient.init(serverPublicKey:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v7 = sub_187646200();
  uint64_t result = sub_187623C58(a1, a2);
  if (!v3)
  {
    *(_BYTE *)a3 = 1;
    *(void *)(a3 + 8) = 4LL;
    *(_BYTE *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = v7;
  }

  return result;
}

uint64_t PIR.SymmetricPIRClient.blindKeyword(keyword:blind:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v62 = *MEMORY[0x1895F89C0];
  uint64_t v8 = sub_18769A46C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v55) = *v4;
  uint64_t v54 = *((void *)v4 + 1);
  int v53 = v4[16];
  if (a4 >> 60 == 15)
  {
    sub_18769A37C();
    sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
    sub_18769A22C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
    swift_dynamicCast();
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v59);
    if (!v12)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }

    id v13 = v12;
    sub_18769A448();
    uint64_t v14 = sub_18769A43C();
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v16 >> 60 == 15)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    uint64_t v17 = sub_18764E194(v55, v54, v53);
    unint64_t v19 = v18;
    uint64_t v60 = v14;
    unint64_t v61 = v16;
    sub_187623A28(v14, v16);
    sub_18763CF30(v17, v19);
    sub_187623C58(v17, v19);
    sub_1876482B4(v14, v16);
    uint64_t v20 = v60;
    unint64_t v21 = v61;
    sub_187651220(v56, v57, v60, v61);
    uint64_t v55 = v5;
    if (!v5)
    {
      id v23 = v22;
      id v24 = sub_18764FE4C((uint64_t)v13, v22);
      sub_187623C58(v20, v21);

LABEL_10:
      id v41 = objc_msgSend(v13, sel_serializedBigEndianScalar);
      if (!v41)
      {
LABEL_19:
        sub_18769A67C();
        __break(1u);
        JUMPOUT(0x187650810LL);
      }

      unint64_t v42 = v41;
      sub_187699F98();
      uint64_t v44 = v43;

      id v45 = objc_msgSend(v24, sel_serializedPublicKey_, 1);
      if (v45)
      {
        uint64_t v46 = v45;
        sub_187699F98();

        __asm { BR              X10 }
      }

      __break(1u);
      goto LABEL_15;
    }

    goto LABEL_18;
  }

  uint64_t v52 = v5;
  int v58 = 0;
  sub_18769A37C();
  int v25 = (uint64_t (*)(uint64_t))MEMORY[0x189605D70];
  sub_187623A28(a3, a4);
  sub_187639840((unint64_t *)&qword_18C4C7198, v25, MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v26 = v59;
  id v27 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v28 = a3;
  unint64_t v29 = (void *)sub_187699F80();
  id v13 = objc_msgSend(v27, sel_initWithData_inGroup_reduction_corecryptoError_, v29, v26, 0, &v58);

  if (v13)
  {
    uint64_t v51 = v28;
    sub_18769A448();
    uint64_t v30 = sub_18769A43C();
    unint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v32 >> 60 == 15)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    uint64_t v33 = sub_18764E194(v55, v54, v53);
    unint64_t v35 = v34;
    uint64_t v60 = v30;
    unint64_t v61 = v32;
    sub_187623A28(v30, v32);
    sub_18763CF30(v33, v35);
    sub_187623C58(v33, v35);
    sub_1876482B4(v30, v32);
    uint64_t v36 = v60;
    unint64_t v37 = v61;
    uint64_t v38 = v52;
    sub_187651220(v56, v57, v60, v61);
    uint64_t v55 = v38;
    if (!v38)
    {
      uint64_t v40 = v39;
      id v24 = sub_18764FE4C((uint64_t)v13, v39);
      sub_187623C58(v36, v37);

      sub_1876482B4(v51, a4);
      goto LABEL_10;
    }

void sub_187650830(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_18765087C()
{
  uint64_t v2 = BYTE6(v0);
  if (qword_18C6D9770 != -1) {
    swift_once();
  }
  if (v2 == qword_18C6DEE00) {
    __asm { BR              X10 }
  }

  sub_18762D1DC();
  swift_allocError();
  *(_DWORD *)uint64_t v3 = 1;
  *(_BYTE *)(v3 + 4) = 1;
  return swift_willThrow();
}

unint64_t PIR.SymmetricPIRClient.validateThenHash(blindedKeyword:evaluatedElement:proof:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 40);
  v13[0] = *(void *)a1;
  v13[1] = v9;
  void v13[2] = v10;
  __int128 v14 = *(_OWORD *)(a1 + 24);
  uint64_t v15 = v11;
  sub_187650830((uint64_t)v13);
  if (!v5)
  {
    sub_187623A28(a2, a3);
    sub_187646200();
    sub_187623C58(a2, a3);
    __asm { BR              X10 }
  }

  return a3;
}

void sub_187651220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_18769A220();
  uint64_t v10 = sub_187641FD8(a1, a2, 2LL, a3, a4, v9, 1);
  if (!v4)
  {
    uint64_t v11 = v10;
    unint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      id v13 = *(id *)(v10 + 32);
      id v14 = objc_msgSend(v13, sel_mapToCurve_SSWU_RandomOracle);
      if (!v14)
      {
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }

      uint64_t v15 = v14;

      if (v12 <= *(void *)(v11 + 16))
      {
        id v16 = *(id *)(v11 + 32 + 8 * v12 - 8);
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(v16, sel_mapToCurve_SSWU_RandomOracle);
        if (v17)
        {
          unint64_t v18 = v17;

          sub_187657164(v15, (uint64_t)v18);
          return;
        }

uint64_t _s14BlindedKeywordVwxx(uint64_t a1)
{
  return sub_187623C58(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t *_s14BlindedKeywordVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_187623A28(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_187623A28(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_187623A28(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *_s14BlindedKeywordVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_187623A28(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_187623C58(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_187623A28(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_187623C58(v10, v11);
  uint64_t v13 = a2[4];
  unint64_t v12 = a2[5];
  sub_187623A28(v13, v12);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_187623C58(v14, v15);
  return a1;
}

uint64_t *_s14BlindedKeywordVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_187623C58(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_187623C58(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_187623C58(v8, v9);
  return a1;
}

uint64_t _s14BlindedKeywordVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s14BlindedKeywordVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PIR.BlindedKeyword()
{
  return &type metadata for PIR.BlindedKeyword;
}

void _s18SymmetricPIRClientVwxx(uint64_t a1)
{
}

uint64_t _s18SymmetricPIRClientVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unsigned int v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  id v4 = v3;
  return a1;
}

uint64_t _s18SymmetricPIRClientVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unsigned int v3 = *(void **)(a2 + 24);
  id v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  id v5 = v3;

  return a1;
}

uint64_t _s18SymmetricPIRClientVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unsigned int v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t _s18SymmetricPIRClientVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SymmetricPIRClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PIR.SymmetricPIRClient()
{
  return &type metadata for PIR.SymmetricPIRClient;
}

unint64_t sub_187651718()
{
  unint64_t result = qword_18C6D9F98;
  if (!qword_18C6D9F98)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769F9B8, &type metadata for OPRF.Errors);
    atomic_store(result, (unint64_t *)&qword_18C6D9F98);
  }

  return result;
}

unint64_t sub_18765175C()
{
  unint64_t result = qword_18C6D9FA0;
  if (!qword_18C6D9FA0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769E43C, &type metadata for OPRFErrors);
    atomic_store(result, (unint64_t *)&qword_18C6D9FA0);
  }

  return result;
}

BOOL static CKSecretSharing.SecretSharingError.SecretSharingErrorType.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CKSecretSharing.SecretSharingError.SecretSharingErrorType.hash(into:)()
{
  return sub_18769A760();
}

uint64_t CKSecretSharing.SecretSharingError.SecretSharingErrorType.hashValue.getter()
{
  return sub_18769A778();
}

void CKSecretSharing.SecretSharingError.type.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_187651830()
{
  unint64_t result = qword_18C6D9FA8;
  if (!qword_18C6D9FA8)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for CKSecretSharing.SecretSharingError.SecretSharingErrorType,  &type metadata for CKSecretSharing.SecretSharingError.SecretSharingErrorType);
    atomic_store(result, (unint64_t *)&qword_18C6D9FA8);
  }

  return result;
}

uint64_t _s18SecretSharingErrorVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s18SecretSharingErrorVwcp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_18769A52C();
  sub_18769A52C();
  sub_18769A52C();
  return a1;
}

uint64_t _s18SecretSharingErrorVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v4;
  int v5 = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s18SecretSharingErrorVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18SecretSharingErrorVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SecretSharingErrorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.SecretSharingError()
{
  return &type metadata for CKSecretSharing.SecretSharingError;
}

uint64_t _s18SecretSharingErrorV22SecretSharingErrorTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

uint64_t _s18SecretSharingErrorV22SecretSharingErrorTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xED) {
    return ((uint64_t (*)(void))((char *)&loc_187651C0C + 4 * byte_18769D2D5[v4]))();
  }
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_187651C40 + 4 * asc_18769D2D0[v4]))();
}

uint64_t sub_187651C40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187651C48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187651C50LL);
  }
  return result;
}

uint64_t sub_187651C5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187651C64LL);
  }
  *(_BYTE *)__n128 result = a2 + 18;
  return result;
}

uint64_t sub_187651C68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187651C70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.SecretSharingError.SecretSharingErrorType()
{
  return &type metadata for CKSecretSharing.SecretSharingError.SecretSharingErrorType;
}

uint64_t *sub_187651C8C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16LL);
  unint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    unint64_t v6 = MEMORY[0x18961AFE8];
    sub_18769A640();
    sub_18769A37C();
    sub_1876597B0();
    while (1)
    {
      sub_18769A22C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
      swift_dynamicCast();
      __n128 result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v5);
      if (!result) {
        break;
      }
      sub_18769A628();
      sub_18769A64C();
      sub_18769A658();
      sub_18769A634();
      if (!--v1)
      {
        unint64_t v2 = v6;
        goto LABEL_6;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_6:
    uint64_t v4 = sub_1876576C0(v2);
    swift_bridgeObjectRelease();
    return v4;
  }

  return result;
}

uint64_t sub_187651DE4(uint64_t a1, uint64_t a2)
{
  v73[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 != *(void *)(v4 + 16))
  {
    sub_187659AF0();
    swift_allocError();
    _BYTE *v46 = 2;
    goto LABEL_46;
  }

  int v8 = (char *)MEMORY[0x18961AFE8];
  unint64_t v9 = *(void **)(v2 + 40);
  uint64_t v72 = MEMORY[0x18961AFE8];
  v73[0] = v9;
  uint64_t v62 = v9[2];
  if (v62)
  {
    unint64_t v10 = v9[4];
    uint64_t v63 = v9 + 4;
    if (v10 < v6)
    {
      uint64_t v55 = v2;
      uint64_t v56 = v3;
      unint64_t v12 = (void *)v9[5];
      unint64_t v13 = v10;
      sub_187659788((uint64_t)v73);
      uint64_t v14 = v13;
      uint64_t v54 = v5;
      uint64_t v15 = v5 + 32;
      id v16 = v12;
      uint64_t v65 = v8;
      uint64_t v66 = a2 + 32;
      uint64_t v58 = v4 + 32;
      uint64_t v59 = a1;
      uint64_t v2 = 1LL;
      while (1)
      {
        uint64_t v17 = v16[2];
        if (v17)
        {
          if (v16[5] >= v6) {
            goto LABEL_44;
          }
          uint64_t v18 = v17 - 1;
          if (v18)
          {
            if (v16[7] >= v6) {
              goto LABEL_44;
            }
            uint64_t v36 = v16 + 9;
            while (--v18)
            {
              unint64_t v37 = *v36;
              v36 += 2;
              if (v37 >= v6) {
                goto LABEL_44;
              }
            }
          }
        }

        uint64_t v60 = v14;
        unint64_t v19 = *(void **)(v15 + 8 * v14);
        LODWORD(v68) = 0;
        sub_18769A52C();
        id v20 = v19;
        id v64 = objc_msgSend(v20, sel_multiply_corecryptoError_, a1, &v68);
        if (!v64) {
          goto LABEL_58;
        }
        uint64_t v61 = v2;

        uint64_t v21 = v16[2];
        if (v21)
        {
          uint64_t v57 = &v52;
          id v68 = v8;
          sub_18769A640();
          unint64_t v22 = v16 + 5;
          while (1)
          {
            unint64_t v23 = *(v22 - 1);
            if ((v23 & 0x8000000000000000LL) != 0) {
              break;
            }
            if (v23 >= *(void *)(a2 + 16)) {
              goto LABEL_51;
            }
            if (*v22 >= v6) {
              goto LABEL_52;
            }
            id v24 = *(void **)(v66 + 8 * v23);
            int v25 = *(void **)(v15 + 8 * *v22);
            int v69 = 0;
            id v26 = v24;
            id v27 = v25;
            if (!objc_msgSend(v27, sel_multiply_corecryptoError_, v26, &v69))
            {
              uint64_t v70 = 0LL;
              unint64_t v71 = 0xE000000000000000LL;
              sub_18769A5E0();
              sub_18769A490();
              int v67 = v69;
              goto LABEL_55;
            }

            v22 += 2;

            sub_18769A628();
            sub_18769A64C();
            sub_18769A658();
            sub_18769A634();
            if (!--v21)
            {
              uint64_t v28 = v68;
              swift_bridgeObjectRelease();
              a1 = v59;
              goto LABEL_19;
            }
          }

          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
        }

        swift_bridgeObjectRelease();
        uint64_t v28 = v8;
LABEL_19:
        uint64_t v29 = *((void *)v28 + 2);
        if (v29)
        {
          id v30 = v64;
          sub_18769A52C();
          uint64_t v31 = 0LL;
          do
          {
            unint64_t v32 = *(void **)&v28[8 * v31 + 32];
            LODWORD(v68) = 0;
            id v33 = v32;
            id v34 = objc_msgSend(v30, sel_add_corecryptoError_, v33, &v68);
            if (!v34)
            {
              uint64_t v70 = 0LL;
              unint64_t v71 = 0xE000000000000000LL;
              sub_18769A5E0();
              sub_18769A490();
              int v69 = (int)v68;
              sub_18769A6D0();
              sub_18769A490();
              swift_bridgeObjectRelease();
              int v53 = 0;
              for (uint64_t i = 75LL; ; uint64_t i = 66LL)
              {
                uint64_t v52 = i;
                sub_18769A67C();
                __break(1u);
LABEL_58:
                uint64_t v70 = 0LL;
                unint64_t v71 = 0xE000000000000000LL;
                sub_18769A5E0();
                sub_18769A490();
                int v69 = (int)v68;
LABEL_55:
                sub_18769A6D0();
                sub_18769A490();
                swift_bridgeObjectRelease();
                int v53 = 0;
              }
            }

            id v35 = v34;
            ++v31;

            id v30 = v35;
          }

          while (v29 != v31);
          swift_bridgeObjectRelease();
          a1 = v59;
        }

        else
        {
          id v35 = v64;
        }

        swift_bridgeObjectRelease();
        id v38 = v35;
        MEMORY[0x1895AA300]();
        if (*(void *)(v72 + 16) >= *(void *)(v72 + 24) >> 1) {
          sub_18769A544();
        }
        sub_18769A55C();
        sub_18769A538();
        uint64_t v39 = (uint64_t *)(v58 + 16 * v60);
        unint64_t v40 = v39[1];
        uint64_t v70 = *v39;
        unint64_t v71 = v40;
        swift_bridgeObjectRetain_n();
        sub_18769A490();
        swift_bridgeObjectRelease();
        uint64_t v2 = v70;
        unint64_t v41 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = sub_18765B024(0LL, *((void *)v65 + 2) + 1LL, 1, v65);
        }
        unint64_t v43 = *((void *)v65 + 2);
        unint64_t v42 = *((void *)v65 + 3);
        if (v43 >= v42 >> 1) {
          uint64_t v65 = sub_18765B024((char *)(v42 > 1), v43 + 1, 1, v65);
        }
        uint64_t v44 = v65;
        *((void *)v65 + 2) = v43 + 1;
        id v45 = &v44[16 * v43];
        *((void *)v45 + 4) = v2;
        *((void *)v45 + 5) = v41;

        if (v61 == v62) {
          break;
        }
        uint64_t v14 = v63[2 * v61];
        int v8 = (char *)MEMORY[0x18961AFE8];
        if ((v14 & 0x8000000000000000LL) == 0)
        {
          uint64_t v2 = v61 + 1;
          id v16 = (void *)v63[2 * v61 + 1];
        }

LABEL_45:
    swift_bridgeObjectRelease();
    sub_187659AF0();
    swift_allocError();
    *uint64_t v48 = 0;
LABEL_46:
    swift_willThrow();
    return v2 & 1;
  }

  uint64_t v65 = (char *)MEMORY[0x18961AFE8];
LABEL_42:
  uint64_t v47 = sub_1876589DC(*(void *)v2, *(void *)(v2 + 8), v5, (uint64_t)v8);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v50 = (void *)v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v2) = objc_msgSend(v50, sel_isEqual_, a1);
  }

  return v2 & 1;
}

uint64_t sub_1876524C4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  id v33 = sub_18766D8D0(*(void **)(a1 + 16), (uint64_t)a3);
  unint64_t v10 = *(void **)a1;
  id v11 = a7;
  id v12 = sub_18764FE4C((uint64_t)v11, v10);
  id v13 = v11;
  unint64_t v40 = (void *)a4;
  id v14 = sub_18764FE4C(a4, v10);
  uint64_t v38 = a1;
  uint64_t v15 = *(void **)(a1 + 8);
  id v16 = sub_18765727C(v15, (uint64_t)v14);

  id v17 = sub_18764FE4C((uint64_t)v13, v16);
  uint64_t v39 = v13;

  LODWORD(v41) = 0;
  id v18 = objc_msgSend(v12, sel_add_corecryptoError_, v12, &v41);
  if (v18)
  {
    id v19 = v18;
    id v20 = v13;
    while (1)
    {
      unsigned __int8 v21 = objc_msgSend(v12, sel_isEqual_, v19);

      if ((v21 & 1) == 0) {
        break;
      }
      sub_18769A37C();
      sub_1876597B0();
      sub_18769A22C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
      swift_dynamicCast();
      id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v41);
      if (!v22) {
        __break(1u);
      }
      unint64_t v23 = v22;

      LODWORD(v41) = 0;
      id v24 = objc_msgSend(v10, sel_multiply_corecryptoError_, v23, &v41);
      if (v24)
      {
        int v25 = v24;

        LODWORD(v41) = 0;
        id v20 = v23;
        id v26 = objc_msgSend(v10, sel_multiply_corecryptoError_, v40, &v41);
        if (v26)
        {
          id v27 = v26;
          LODWORD(v41) = 0;
          id v28 = objc_msgSend(v15, sel_sub_corecryptoError_, v26, &v41);
          if (v28)
          {
            uint64_t v29 = v28;

            LODWORD(v41) = 0;
            id v30 = objc_msgSend(v29, sel_multiply_corecryptoError_, v20, &v41);
            if (v30)
            {
              id v31 = v30;

              LODWORD(v41) = 0;
              id v19 = objc_msgSend(v25, sel_add_corecryptoError_, v25, &v41);
              id v12 = v25;
              id v17 = v31;
              if (v19) {
                continue;
              }
            }
          }
        }
      }

      goto LABEL_13;
    }

    sub_1876598B4(v38);
    return (uint64_t)v33;
  }

  else
  {
LABEL_13:
    uint64_t v43 = 0LL;
    unint64_t v44 = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    int v42 = v41;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    uint64_t result = sub_18769A67C();
    __break(1u);
  }

  return result;
}

void sub_187652984( char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, void *a9@<X8>, void *a10, void *a11)
{
  id v74 = *(void **)(a7 + 24);
  uint64_t v75 = *(void *)(a7 + 32);
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v98)
  {
    __break(1u);
    goto LABEL_24;
  }

  sub_18769A22C();
  swift_dynamicCast();
  id v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v96)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  sub_18769A22C();
  swift_dynamicCast();
  id v95 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v95)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v94 = a5;
  sub_18769A22C();
  swift_dynamicCast();
  id v93 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v93)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  sub_18769A22C();
  swift_dynamicCast();
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  id v13 = v12;
  sub_18769A22C();
  swift_dynamicCast();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v14)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  id v15 = v14;
  sub_18769A22C();
  swift_dynamicCast();
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v99);
  if (!v16)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return;
  }

  id v17 = v16;
  uint64_t v90 = v15;
  uint64_t v92 = v13;
  id v18 = *(void **)(a7 + 8);
  id v19 = sub_18764FE4C((uint64_t)v16, a11);
  uint64_t v70 = v17;
  uint64_t v89 = v18;
  if ((a1 & 1) != 0)
  {
    id v20 = sub_187657164(v18, (uint64_t)v19);

    id v21 = sub_18764FE4C((uint64_t)v95, a11);
    id v22 = sub_18764FE4C((uint64_t)v96, a11);
    id v23 = sub_18764FE4C((uint64_t)v98, v20);
    uint64_t v91 = v20;
    id v68 = sub_18765727C(v22, (uint64_t)v23);
    int v69 = v21;
    unint64_t v71 = v68;
    uint64_t v72 = v21;
    uint64_t v24 = (uint64_t)v93;
  }

  else
  {
    id v25 = sub_18764FE4C((uint64_t)v95, a11);
    id v22 = sub_18764FE4C((uint64_t)v96, a11);
    id v26 = sub_18765727C(v19, (uint64_t)v18);
    id v23 = sub_18764FE4C((uint64_t)v98, v26);

    id v68 = sub_18765727C(v22, (uint64_t)v23);
    int v69 = v25;
    unint64_t v71 = v25;
    uint64_t v72 = v68;
    uint64_t v24 = (uint64_t)v93;
    uint64_t v91 = v19;
  }

  uint64_t v27 = v24;
  id v28 = sub_18764FE4C(v24, a4);
  id v29 = sub_18764FE4C(v24, v94);
  id v30 = sub_18764FE4C((uint64_t)v92, a11);
  id v31 = sub_187657164(v29, (uint64_t)v30);

  id v32 = sub_18764FE4C(v27, v94);
  id v33 = sub_18764FE4C((uint64_t)v90, a10);
  id v34 = sub_187657164(v32, (uint64_t)v33);

  unint64_t v78 = *(void **)(a3 + 8);
  uint64_t v79 = *(void **)a3;
  id v83 = *(void **)(a3 + 24);
  uint64_t v80 = *(void **)(a3 + 16);
  uint64_t v82 = *(void **)(a3 + 32);
  id v35 = *(void **)a7;
  uint64_t v36 = *(void **)(a7 + 16);
  id v37 = v71;
  id v38 = v72;
  int v67 = v34;
  unsigned __int8 v73 = v28;
  id v39 = v38;
  sub_187653280( a10,  (uint64_t)a11,  (uint64_t)v35,  (uint64_t)v89,  (uint64_t)v36,  (uint64_t)a4,  (uint64_t)v94,  (uint64_t)a6,  (uint64_t)a8,  (uint64_t)v91,  (uint64_t)v37,  (uint64_t)v38,  (uint64_t)v28,  (uint64_t)v31,  (uint64_t)v34);
  if (v76)
  {

    id v100 = v74;
    sub_1876597F8(&v100);
    uint64_t v101 = v75;
    sub_187647FC0((uint64_t)&v101);

    return;
  }

  uint64_t v63 = v36;
  id v64 = v35;
  uint64_t v65 = v39;
  uint64_t v62 = v40;
  id v41 = sub_18766D9E8(v40, (uint64_t)v98);
  id v42 = objc_msgSend(a2, sel_inverseModOrder);
  if (!v42) {
    goto LABEL_30;
  }
  unint64_t v77 = v42;
  if ((a1 & 1) != 0)
  {
    id v43 = sub_18766D8D0(v83, (uint64_t)v82);
    unint64_t v44 = v70;
    id v45 = sub_18766D8D0(v43, (uint64_t)v70);

    uint64_t v56 = (void *)sub_18765755C((uint64_t)v45);
    id v46 = sub_18766D8D0(v79, (uint64_t)v78);
    id v47 = sub_18766D7B8(a6, (uint64_t)v80);
    id v48 = sub_18766D8D0(v46, (uint64_t)v47);

    id v57 = v98;
    id v98 = v41;
  }

  else
  {
    unint64_t v44 = v70;
    id v49 = sub_18766D8D0(v83, (uint64_t)v70);
    uint64_t v56 = (void *)sub_18765755C((uint64_t)v49);

    id v47 = sub_18766D7B8(a6, (uint64_t)v80);
    id v48 = sub_18766D8D0(v79, (uint64_t)v47);
    id v57 = v41;
  }

  id v50 = sub_18766D7B8(v41, (uint64_t)v44);
  id v61 = sub_18766D8D0(v95, (uint64_t)v50);

  id v51 = sub_18766D7B8(v62, (uint64_t)v77);
  id v60 = sub_18766D9E8(v93, (uint64_t)v51);

  id v52 = sub_18766D7B8(v62, (uint64_t)v56);
  id v59 = sub_18766D8D0(v92, (uint64_t)v52);

  id v53 = sub_18766D7B8(v62, (uint64_t)v48);
  id v58 = sub_18766D8D0(v90, (uint64_t)v53);

  id v102 = v74;
  sub_1876597F8(&v102);
  uint64_t v103 = v75;
  sub_187647FC0((uint64_t)&v103);

  id v54 = v96;
  if ((a1 & 1) != 0) {
    id v55 = v61;
  }
  else {
    id v55 = v96;
  }
  if ((a1 & 1) == 0) {
    id v54 = v61;
  }
  *a9 = v91;
  a9[1] = v57;
  a9[2] = v98;
  a9[3] = v54;
  a9[4] = v55;
  a9[5] = v60;
  a9[6] = v59;
  a9[7] = v58;
}

void sub_187653280( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v24 = a8;
  v22[11] = a7;
  v22[12] = a6;
  v22[13] = a5;
  uint64_t v16 = sub_18769A46C();
  v22[2] = *(void *)(v16 - 8);
  v22[3] = v16;
  MEMORY[0x1895F8858](v16);
  v22[1] = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v23 = xmmword_18769C9B0;
  id v18 = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (v18)
  {
    id v19 = v18;
    v22[4] = a15;
    v22[5] = a14;
    v22[6] = a13;
    v22[7] = a12;
    v22[8] = a11;
    v22[9] = a10;
    v22[10] = a9;
    sub_187699F98();
    uint64_t v21 = v20;

    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x18765486CLL);
}

uint64_t sub_187654A30(void *a1, void *a2)
{
  id v5 = *(id *)v2;
  unint64_t v6 = *(void **)(v2 + 8);
  BOOL v7 = *(void **)(v2 + 16);
  unint64_t v9 = *(void **)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v2 = (uint64_t)v5;
  id v10 = v6;
  id v11 = v7;
  id v12 = v9;
  sub_18769A52C();
  id v13 = sub_187657164((void *)v2, v2);
  unsigned __int8 v14 = objc_msgSend((id)v2, sel_isEqual_, v13);
  swift_bridgeObjectRelease();

  if ((v14 & 1) != 0) {
    goto LABEL_8;
  }
  uint64_t v2 = (uint64_t)(id)v2;
  id v15 = v10;
  id v16 = v11;
  id v17 = v12;
  sub_18769A52C();
  id v18 = a1;
  id v19 = a2;
  if ((objc_msgSend(v15, sel_isEqual_, v18) & 1) != 0
    || objc_msgSend(v15, sel_isEqual_, v19))
  {

    swift_bridgeObjectRelease();
LABEL_7:

LABEL_8:
    sub_187659948();
    swift_allocError();
    *uint64_t v20 = 2;
    swift_willThrow();
    return v2 & 1;
  }

  uint64_t v2 = (uint64_t)(id)v2;
  id v22 = v15;
  id v23 = v16;
  id v24 = v17;
  sub_18769A52C();
  id v25 = sub_187657164(v22, (uint64_t)v22);
  unsigned __int8 v26 = objc_msgSend(v22, sel_isEqual_, v25);

  uint64_t v27 = v23;
  swift_bridgeObjectRelease_n();

  if ((v26 & 1) != 0) {
    goto LABEL_8;
  }
  id v15 = (id)v2;
  id v28 = v24;
  id v16 = v22;
  id v17 = v27;
  id v29 = v28;
  sub_18769A52C();
  uint64_t v2 = (uint64_t)v18;
  if (objc_msgSend(v17, sel_isEqual_, v2))
  {
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }

  id v30 = v15;
  id v31 = v16;
  id v32 = v17;
  id v33 = v29;
  sub_18769A52C();
  id v34 = sub_187657164(v32, (uint64_t)v32);
  unsigned __int8 v35 = objc_msgSend(v32, sel_isEqual_, v34);

  swift_bridgeObjectRelease_n();
  if ((v35 & 1) != 0) {
    goto LABEL_8;
  }
  uint64_t v51 = v8;
  unint64_t v52 = 0xD000000000000021LL;
  unint64_t v53 = 0x80000001876A0FC0LL;
  uint64_t v55 = MEMORY[0x18961AFE8];
  uint64_t v56 = MEMORY[0x18961AFE8];
  id v57 = (void *)MEMORY[0x18961AFE8];
  uint64_t v36 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
  unint64_t v38 = *((void *)v36 + 2);
  unint64_t v37 = *((void *)v36 + 3);
  if (v38 >= v37 >> 1) {
    uint64_t v36 = sub_18765B024((char *)(v37 > 1), v38 + 1, 1, v36);
  }
  *((void *)v36 + 2) = v38 + 1;
  id v39 = &v36[16 * v38];
  *((void *)v39 + 4) = 122LL;
  *((void *)v39 + 5) = 0xE100000000000000LL;
  id v54 = v36;
  id v40 = (id)v2;
  uint64_t v41 = sub_18765886C(0x6F746172656E6567LL, 0xEA00000000004772LL, v40, (uint64_t)&v52);

  id v42 = v32;
  uint64_t v43 = sub_18765886C(90LL, 0xE100000000000000LL, v42, (uint64_t)&v52);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_18769C700;
  *(void *)(v44 + 32) = v38;
  *(void *)(v44 + 40) = v41;
  id v45 = v57;
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v45 = sub_18765B124(0LL, v45[2] + 1LL, 1, v45);
  }
  unint64_t v47 = v45[2];
  unint64_t v46 = v45[3];
  if (v47 >= v46 >> 1) {
    id v45 = sub_18765B124((void *)(v46 > 1), v47 + 1, 1, v45);
  }
  v45[2] = v47 + 1;
  id v48 = &v45[2 * v47];
  v48[4] = v43;
  v48[5] = v44;
  swift_bridgeObjectRelease();
  v58[0] = v52;
  v58[1] = v53;
  v58[2] = v54;
  v58[3] = v55;
  v58[4] = v56;
  v58[5] = v45;
  uint64_t v2 = (uint64_t)v58;
  uint64_t v49 = v58[7];
  char v50 = sub_187651DE4((uint64_t)v33, v51);
  if (!v49) {
    LOBYTE(v2) = v50;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id ATHMKeyCommitments.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATHMKeyCommitments();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ATHMKeyCommitments.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for ATHMKeyCommitments);
}

id ATHMClient.__allocating_init(keyCommitmentsData:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ATHMClient.init(keyCommitmentsData:)(a1, a2);
}

id ATHMClient.init(keyCommitmentsData:)(uint64_t a1, unint64_t a2)
{
  unint64_t v6 = (char *)v2;
  sub_187664530(a1, a2);
  if (v3)
  {

    sub_187623C58(a1, a2);
    type metadata accessor for ATHMClient();
    swift_deallocPartialClassInstance();
    return v2;
  }

  id v29 = (id)v21;
  id v27 = v22;
  v28[0] = *((id *)&v21 + 1);
  uint64_t v25 = v24;
  id v26 = v23;
  sub_18769A37C();
  sub_1876481AC(&v29);
  sub_1876481AC(v28);
  sub_1876481AC(&v27);
  sub_1876481AC(&v26);
  sub_187659788((uint64_t)&v25);
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v15);
  if (result)
  {
    uint64_t v8 = result;
    sub_18769A22C();
    swift_dynamicCast();
    id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v15);
    if (result)
    {
      sub_187655330(4LL, v8, result, &v21, (uint64_t)v16);
      sub_1876597F8(&v29);
      sub_1876597F8(v28);
      sub_1876597F8(&v27);
      sub_1876597F8(&v26);
      sub_187647FC0((uint64_t)&v25);
      uint64_t v9 = v17;
      uint64_t v10 = v18;
      uint64_t v11 = v20;
      id v12 = &v6[OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client];
      __int128 v13 = v16[1];
      *(_OWORD *)id v12 = v16[0];
      *((_OWORD *)v12 + 1) = v13;
      *((_OWORD *)v12 + 2) = v16[2];
      *((void *)v12 + 6) = v9;
      *((void *)v12 + 7) = v10;
      *((_OWORD *)v12 + 4) = v19;
      *((void *)v12 + 10) = v11;

      v14.receiver = v6;
      v14.super_class = (Class)type metadata accessor for ATHMClient();
      id v2 = objc_msgSendSuper2(&v14, sel_init);
      sub_187623C58(a1, a2);
      return v2;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_187655330(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v30 = a4[1];
  __int128 v31 = *a4;
  uint64_t v29 = *((void *)a4 + 4);
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v36);
  id v9 = objc_msgSend(v8, sel_serializedPublicKey_, 1);
  if (!v9)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v10 = v9;
  uint64_t v11 = sub_187699F98();
  unint64_t v13 = v12;

  uint64_t v14 = sub_18763B1DC(0xD000000000000029LL, 0x80000001876A0F90LL);
  unint64_t v16 = v15;
  sub_187651220(v11, v13, v14, v15);
  if (v5)
  {
LABEL_7:
    swift_unexpectedError();
    __break(1u);
    return;
  }

  uint64_t v18 = v17;
  sub_187623C58(v14, v16);
  __int128 v19 = (void *)*((void *)a4 + 1);
  id v40 = *(id *)a4;
  uint64_t v20 = (void *)*((void *)a4 + 2);
  uint64_t v21 = *((void *)a4 + 4);
  id v38 = (id)*((void *)a4 + 3);
  id v39 = v19;
  uint64_t v37 = v21;
  sub_187623C58(v11, v13);
  if ((sub_187654A30(v8, v18) & 1) != 0)
  {
    sub_1876481AC(&v40);
    sub_1876481AC(&v39);
    id v22 = v20;
    sub_1876481AC(&v38);
    sub_187659788((uint64_t)&v37);
    id v23 = a2;
    id v24 = a3;
    id v25 = v8;
    id v26 = sub_18764FE4C((uint64_t)v23, v22);
    id v27 = sub_18764FE4C((uint64_t)v24, v25);
    id v35 = sub_187657164(v26, (uint64_t)v27);

    sub_1876597F8(&v40);
    sub_1876597F8(&v39);

    sub_1876597F8(&v38);
    sub_187647FC0((uint64_t)&v37);

    *(void *)a5 = v23;
    *(void *)(a5 + 8) = v24;
    *(_OWORD *)(a5 + 16) = v31;
    *(_OWORD *)(a5 + 32) = v30;
    *(void *)(a5 + 48) = v29;
    *(void *)(a5 + 56) = a1;
    *(void *)(a5 + 64) = v25;
    *(void *)(a5 + 72) = v18;
    *(void *)(a5 + 80) = v35;
  }

  else
  {
    sub_187659948();
    swift_allocError();
    *id v28 = 2;
    swift_willThrow();
    sub_1876597F8(&v40);
    sub_1876597F8(&v39);

    sub_1876597F8(&v38);
    sub_187647FC0((uint64_t)&v37);
  }

id sub_1876556E8()
{
  id result =  objc_msgSend( *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 80),  sel_serializedPublicKey_,  1);
  if (result)
  {
    id v2 = result;
    uint64_t v3 = sub_187699F98();

    return (id)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1876557E8(uint64_t a1, uint64_t a2)
{
  if (v3) {
    return v4;
  }
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client);
  unint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 8);
  id v8 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 16);
  BOOL v7 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 24);
  id v9 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 32);
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 40);
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 64);
  id v38 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 72);
  uint64_t v41 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 80);
  sub_18769A37C();
  sub_1876597B0();
  id v36 = v5;
  id v35 = v6;
  id v37 = v8;
  id v12 = v7;
  id v13 = v9;
  id v34 = v10;
  sub_18769A52C();
  id v14 = v11;
  id v15 = v38;
  id v4 = v41;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v42[13]);
  if (result)
  {
    uint64_t v17 = result;
    id v18 = sub_187657164(v42[0], (uint64_t)v42[0]);
    unsigned __int8 v19 = objc_msgSend(v42[0], sel_isEqual_, v18);

    if ((v19 & 1) != 0
      || (uint64_t v20 = v42[1],
          sub_187659820((uint64_t)v42),
          id v21 = sub_187657164(v20, (uint64_t)v20),
          LODWORD(v20) = objc_msgSend(v20, sel_isEqual_, v21),
          v21,
          sub_1876598B4((uint64_t)v42),
          (_DWORD)v20))
    {
      sub_187659948();
      swift_allocError();
      *id v22 = 4;
      swift_willThrow();

      swift_bridgeObjectRelease();
    }

    else
    {
      if ((sub_1876591CC(v4, (uint64_t)v42, v37, (uint64_t)v12, v13, v14, v15) & 1) != 0)
      {
        sub_187659820((uint64_t)v42);
        id v40 = v12;
        id v33 = v4;
        id v39 = v36;
        id v23 = v35;
        id v24 = v14;
        id v25 = v15;
        id v26 = v23;
        id v27 = (void *)sub_1876524C4((uint64_t)v42, v33, v39, (uint64_t)v23, v24, v25, v17);
        uint64_t v29 = v28;
        __int128 v31 = v30;

        swift_bridgeObjectRelease();
        id v4 = (id)sub_187665F80(v27, v29, v31);

        sub_1876598B4((uint64_t)v42);
        return v4;
      }

      sub_187659948();
      swift_allocError();
      *id v32 = 5;
      swift_willThrow();

      swift_bridgeObjectRelease();
    }

    sub_1876598B4((uint64_t)v42);
    return v4;
  }

  __break(1u);
  return result;
}

id ATHMClient.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ATHMClient.init()()
{
}

id ATHMClient.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for ATHMClient);
}

id ATHMServer.init()()
{
  uint64_t v1 = v0;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }

  id v3 = v2;
  unsigned __int8 v19 = v1;
  sub_18769A22C();
  swift_dynamicCast();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  id v5 = v4;
  sub_18769A22C();
  swift_dynamicCast();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  id v7 = v6;
  sub_18769A22C();
  swift_dynamicCast();
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  id v9 = v8;
  sub_18769A22C();
  swift_dynamicCast();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (v10)
  {
    v24[0] = v3;
    v24[1] = v5;
    v24[2] = v7;
    v24[3] = v9;
    v24[4] = v10;
    sub_187658414(4LL, (uint64_t)v24, (uint64_t)v21);
    uint64_t v11 = v22;
    __int128 v12 = v21[1];
    __int128 v13 = v21[2];
    __int128 v14 = v21[3];
    __int128 v15 = v21[4];
    __int128 v16 = v23;
    uint64_t v17 = &v19[OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server];
    *(_OWORD *)uint64_t v17 = v21[0];
    *((_OWORD *)v17 + 1) = v12;
    *((_OWORD *)v17 + 2) = v13;
    *((_OWORD *)v17 + 3) = v14;
    *((_OWORD *)v17 + 4) = v15;
    *((void *)v17 + 10) = v11;
    *(_OWORD *)(v17 + 88) = v16;

    v20.receiver = v19;
    v20.super_class = (Class)type metadata accessor for ATHMServer();
    return objc_msgSendSuper2(&v20, sel_init);
  }

uint64_t sub_1876560B4()
{
  __int128 v1 = *(_OWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 56);
  v3[0] = *(_OWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 40);
  v3[1] = v1;
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 72);
  return sub_18766634C((uint64_t)v3);
}

id sub_1876561C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v4) {
    return (id)v3;
  }
  uint64_t v43 = v6;
  id v7 = (void *)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
  id v8 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
  id v9 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 8);
  id v10 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 16);
  uint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 24);
  __int128 v12 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 32);
  __int128 v13 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 40);
  __int128 v15 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 48);
  __int128 v14 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 56);
  uint64_t v16 = v7[9];
  id v45 = (void *)v7[11];
  unint64_t v47 = (void *)v7[12];
  id v48 = (void *)v7[8];
  v50[0] = 2;
  id v30 = v8;
  id v31 = v9;
  id v33 = v10;
  id v35 = v11;
  id v36 = v12;
  id v38 = v13;
  id v40 = v15;
  id v41 = v14;
  id v49 = v48;
  sub_18769A52C();
  id v42 = v45;
  id v46 = v47;
  id result = (id)MEMORY[0x1895AA348](a3, v50);
  char v18 = v50[0];
  if (v50[0] == 2)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v58);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v29 = result;
  sub_18769A22C();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v58);
  id v28 = result;
  if (result)
  {
    char v27 = v18 & 1;
    memset(v57, 0, 64);
    v55[0] = v30;
    v55[1] = v31;
    id v55[2] = v33;
    v55[3] = v35;
    v55[4] = v36;
    v56[0] = v38;
    v56[1] = v40;
    v56[2] = v41;
    v56[3] = v49;
    v56[4] = v16;
    id v19 = v43;
    id v44 = v30;
    id v32 = v31;
    objc_super v20 = v19;
    id v34 = v33;
    id v21 = v35;
    id v37 = v36;
    id v39 = v38;
    id v22 = v40;
    id v23 = v41;
    id v24 = v49;
    sub_18769A52C();
    id v25 = v42;
    id v26 = v46;
    sub_187656A54(v27, v20, (uint64_t)v55, (uint64_t)v56, v25, v26, v29, v28, v51, (uint64_t)v57);

    swift_bridgeObjectRelease();
    v53[2] = v51[2];
    v53[3] = v51[3];
    v53[4] = v51[4];
    uint64_t v54 = v52;
    v53[0] = v51[0];
    v53[1] = v51[1];
    uint64_t v3 = sub_187666758((uint64_t)v53);
    sub_1876598B4((uint64_t)v53);

    return (id)v3;
  }

void sub_187656698(uint64_t a1, uint64_t a2)
{
  if (!v3)
  {
    id v7 = (void *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
    id v8 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
    id v9 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 8);
    uint64_t v29 = v6;
    uint64_t v11 = (void *)v7[2];
    id v10 = (void *)v7[3];
    __int128 v12 = v4;
    __int128 v13 = (void *)v7[4];
    id v32 = v5;
    id v24 = (void *)v7[5];
    id v26 = (void *)v7[6];
    __int128 v14 = (void *)v7[8];
    id v28 = (void *)v7[7];
    id v30 = (void *)v7[11];
    id v31 = (void *)v7[12];
    id v15 = v8;
    id v16 = v9;
    id v17 = v11;
    id v23 = v10;
    id v22 = v13;
    id v25 = v24;
    id v27 = v26;
    id v21 = v28;
    id v20 = v14;
    sub_18769A52C();
    id v18 = v30;
    id v19 = v31;
    LOBYTE(v10) = sub_187658FF0(v15, (uint64_t)v16, (uint64_t)v17, v12, v32, (uint64_t)v29);

    swift_bridgeObjectRelease();
    objc_msgSend(objc_allocWithZone(MEMORY[0x189607968]), sel_initWithInteger_, (v10 & 1) != 0);
  }

id ATHMServer.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for ATHMServer);
}

void sub_187656A54( char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  v104[8] = *MEMORY[0x1895F89C0];
  sub_187659AA8(a10, (uint64_t)v103);
  unint64_t v64 = v103[1];
  uint64_t v66 = v103[0];
  uint64_t v60 = v103[3];
  uint64_t v62 = v103[2];
  uint64_t v58 = v103[5];
  uint64_t v59 = v103[4];
  uint64_t v56 = v103[7];
  uint64_t v57 = v103[6];
  __int128 v14 = *(void **)(a3 + 24);
  uint64_t v77 = a3;
  id v93 = *(id *)(a3 + 32);
  id v94 = v14;
  id v79 = a8;
  id v15 = a5;
  id v16 = sub_18764FE4C((uint64_t)v79, a5);
  LODWORD(v81) = 0;
  id v17 = objc_msgSend(v16, sel_add_corecryptoError_, v16, &v81);
  if (v17)
  {
    id v18 = v17;
    id v19 = v79;
    while (1)
    {
      unsigned __int8 v20 = objc_msgSend(v16, sel_isEqual_, v18);

      if ((v20 & 1) == 0) {
        break;
      }
      sub_18769A37C();
      sub_1876597B0();
      sub_18769A22C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
      swift_dynamicCast();
      id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v81);
      if (!v21) {
        __break(1u);
      }
      id v22 = v21;

      LODWORD(v81) = 0;
      id v23 = objc_msgSend(v15, sel_multiply_corecryptoError_, v22, &v81);
      if (v23)
      {
        id v24 = v23;

        LODWORD(v81) = 0;
        id v18 = objc_msgSend(v24, sel_add_corecryptoError_, v24, &v81);
        id v19 = v22;
        id v16 = v24;
        if (v18) {
          continue;
        }
      }

      goto LABEL_18;
    }

    id v26 = *(void **)a3;
    uint64_t v25 = *(void *)(a3 + 8);
    id v68 = *(void **)(a3 + 16);
    char v27 = a1;
    id v28 = sub_18766D7B8(a7, (uint64_t)v68);
    uint64_t v70 = v26;
    id v29 = sub_18766D8D0(v26, (uint64_t)v28);

    id v30 = sub_18764FE4C((uint64_t)v29, v15);
    uint64_t v72 = (void *)v25;
    id v31 = sub_18764FE4C(v25, v15);
    id v32 = sub_187657164(v30, (uint64_t)v31);

    char v55 = v27;
    if ((v27 & 1) != 0) {
      id v33 = v32;
    }
    else {
      id v33 = v30;
    }
    id v34 = v33;
    id v35 = sub_187657164(v34, (uint64_t)a2);
    id v36 = sub_18764FE4C((uint64_t)v19, v35);

    sub_187659AA8(a10, (uint64_t)v104);
    if (v104[0])
    {

      id v87 = *(id *)a4;
      sub_1876597F8(&v87);
      id v86 = *(id *)(a4 + 8);
      sub_1876597F8(&v86);
      id v85 = *(id *)(a4 + 16);
      sub_1876597F8(&v85);
      uint64_t v37 = *(void *)(a4 + 32);
      id v84 = *(id *)(a4 + 24);
      sub_1876597F8(&v84);
      uint64_t v83 = v37;
      sub_187647FC0((uint64_t)&v83);

      sub_1876597F8(&v94);
      sub_1876597F8(&v93);

      unint64_t v39 = v64;
      uint64_t v38 = v66;
      uint64_t v41 = v60;
      uint64_t v40 = v62;
      uint64_t v43 = v58;
      uint64_t v42 = v59;
      uint64_t v45 = v56;
      uint64_t v44 = v57;
LABEL_13:
      *a9 = v16;
      a9[1] = v36;
      a9[2] = a7;
      a9[3] = v38;
      a9[4] = v39;
      a9[5] = v40;
      a9[6] = v41;
      a9[7] = v42;
      a9[8] = v43;
      a9[9] = v44;
      a9[10] = v45;
      return;
    }

    uint64_t v65 = v34;
    id v46 = *(id *)a4;
    id v91 = *(id *)(a4 + 8);
    id v92 = v46;
    unint64_t v47 = *(void **)(a4 + 16);
    id v89 = *(id *)(a4 + 24);
    id v90 = v47;
    uint64_t v88 = *(void *)(a4 + 32);
    id v71 = v70;
    id v73 = v72;
    id v69 = v68;
    sub_1876481AC(&v94);
    sub_1876481AC(&v93);
    id v48 = v16;
    id v49 = v36;
    id v50 = v48;
    id v61 = v49;
    id v51 = v49;
    id v63 = a7;
    sub_1876481AC(&v92);
    sub_1876481AC(&v91);
    sub_1876481AC(&v90);
    sub_1876481AC(&v89);
    sub_187659788((uint64_t)&v88);
    id v52 = a2;
    id v53 = v15;
    id v54 = a6;
    sub_187652984(v55 & 1, v79, v77, v50, v51, v63, a4, v52, &v95, v53, v54);

    if (!v76)
    {
      id v36 = v61;
      sub_1876597F8(&v92);
      sub_1876597F8(&v91);
      sub_1876597F8(&v90);
      sub_1876597F8(&v89);
      sub_187647FC0((uint64_t)&v88);

      sub_1876597F8(&v94);
      sub_1876597F8(&v93);

      uint64_t v38 = v95;
      unint64_t v39 = v96;
      uint64_t v40 = v97;
      uint64_t v41 = v98;
      uint64_t v42 = v99;
      uint64_t v43 = v100;
      uint64_t v44 = v101;
      uint64_t v45 = v102;
      goto LABEL_13;
    }

    sub_1876597F8(&v92);
    sub_1876597F8(&v91);
    sub_1876597F8(&v90);
    sub_1876597F8(&v89);
    sub_187647FC0((uint64_t)&v88);

    sub_1876597F8(&v94);
    sub_1876597F8(&v93);
  }

  else
  {
LABEL_18:
    uint64_t v95 = 0LL;
    unint64_t v96 = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    int v82 = v81;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A67C();
    __break(1u);
  }

id sub_187657164(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_add_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    id result = (id)sub_18769A67C();
    __break(1u);
  }

  return result;
}

id sub_18765727C(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_sub_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    id result = (id)sub_18769A67C();
    __break(1u);
  }

  return result;
}

id sub_187657394(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v3 = (uint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v15);
  if (v3 < 0) {
    __break(1u);
  }
  sub_1876398C0(a1, v3);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  int v14 = 0;
  sub_18769A22C();
  swift_dynamicCast();
  id v8 = objc_allocWithZone(MEMORY[0x18960F078]);
  id v9 = (void *)sub_187699F80();
  id v10 = objc_msgSend(v8, sel_initWithData_inGroup_reduction_corecryptoError_, v9, v15, 1, &v14);

  if (!v10)
  {
    int v11 = v14;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
    *(_BYTE *)(v12 + 4) = 0;
    swift_willThrow();
  }

  sub_187623C58(v5, v7);
  return v10;
}

uint64_t sub_18765755C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v6 = 0;
  id v2 = sub_187657394(0LL);
  id v3 = objc_msgSend(v2, sel_sub_corecryptoError_, a1, &v6);
  if (v3)
  {
    id v4 = v3;

    return (uint64_t)v4;
  }

  else
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    uint64_t result = sub_18769A67C();
    __break(1u);
  }

  return result;
}

uint64_t *sub_1876576C0(unint64_t a1)
{
  v85[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  v85[0] = v5;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 != *(void *)(v4 + 16)
    || (id v3 = v1, v7 = v1[4], v8 = v1[5], v9 = *(void *)(v7 + 16), v9 != *(void *)(v8 + 16)))
  {
    sub_187659AF0();
    swift_allocError();
    char v52 = 2;
LABEL_41:
    *id v51 = v52;
    goto LABEL_42;
  }

  unint64_t v10 = a1;
  if (*(void *)(a1 + 16) != v6)
  {
    sub_187659AF0();
    swift_allocError();
    char v52 = 1;
    goto LABEL_41;
  }

  uint64_t v11 = v2;
  uint64_t v12 = (void *)MEMORY[0x18961AFE8];
  __int128 v13 = (void *)v1[6];
  uint64_t v83 = MEMORY[0x18961AFE8];
  id v84 = v13;
  uint64_t v14 = v13[2];
  if (v14)
  {
    uint64_t v12 = v13 + 4;
    unint64_t v15 = v13[4];
    if (v15 < v9)
    {
      uint64_t v16 = (void *)v13[5];
      unint64_t v74 = v10;
      unint64_t v17 = v10 + 32;
      uint64_t v65 = v7;
      uint64_t v72 = v8 + 32;
      uint64_t v73 = v7 + 32;
      uint64_t v18 = sub_18769A52C();
      uint64_t v77 = (char *)MEMORY[0x18961AFE8];
      uint64_t v19 = 1LL;
      while (1)
      {
        unint64_t v20 = v17;
        unint64_t v10 = v16[2];
        if (!v10)
        {
          __break(1u);
          goto LABEL_49;
        }

        uint64_t v71 = v15;
        uint64_t v22 = (uint64_t)(v16 + 4);
        unint64_t v21 = v16[4];
        if (v21 >= v6 || (uint64_t v23 = v16[5], v23 < 0) || v23 >= v9)
        {
LABEL_58:
          sub_187647FC0((uint64_t)&v84);
          swift_bridgeObjectRelease();
          goto LABEL_59;
        }

        unint64_t v24 = v10 - 1;
        if (v10 != 1)
        {
          if (v16[6] >= v6) {
            goto LABEL_58;
          }
          uint64_t v40 = v16[7];
          if (v40 < 0 || v40 >= v9) {
            goto LABEL_58;
          }
          uint64_t v41 = v16 + 9;
          while (--v24)
          {
            if (*(v41 - 1) < v6)
            {
              uint64_t v42 = *v41;
              if ((*v41 & 0x8000000000000000LL) == 0)
              {
                v41 += 2;
                if (v42 < v9) {
                  continue;
                }
              }
            }

            goto LABEL_58;
          }
        }

        int v67 = v12;
        uint64_t v68 = v19;
        uint64_t v69 = v14;
        unint64_t v70 = v6;
        uint64_t v76 = v11;
        unint64_t v66 = v20;
        uint64_t v25 = *(void **)(v20 + 8 * v21);
        id v26 = *(void **)(v73 + 8 * v23);
        LODWORD(v79) = 0;
        char v27 = v16;
        sub_18769A52C();
        id v28 = v25;
        id v29 = v26;
        id v75 = objc_msgSend(v29, sel_multiply_corecryptoError_, v28, &v79);
        if (!v75) {
          goto LABEL_67;
        }

        if (v27[2] < v10) {
          goto LABEL_62;
        }
        MEMORY[0x1895F8858](v30);
        uint64_t v32 = sub_187658ED4(v22, 1LL, v31, (void (*)(uint64_t *__return_ptr, void, void))sub_187659B34);
        uint64_t v11 = v76;
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          id v34 = v75;
          sub_18769A52C();
          uint64_t v35 = 0LL;
          do
          {
            id v36 = *(void **)(v32 + 8 * v35 + 32);
            LODWORD(v79) = 0;
            id v37 = v36;
            id v38 = objc_msgSend(v34, sel_add_corecryptoError_, v37, &v79);
            if (!v38) {
              goto LABEL_67;
            }
            id v39 = v38;
            ++v35;

            id v34 = v39;
          }

          while (v33 != v35);
          swift_bridgeObjectRelease();
          uint64_t v11 = v76;
        }

        else
        {
          id v39 = v75;
        }

        swift_bridgeObjectRelease();
        id v43 = v39;
        MEMORY[0x1895AA300]();
        if (*(void *)(v83 + 16) >= *(void *)(v83 + 24) >> 1) {
          sub_18769A544();
        }
        sub_18769A55C();
        sub_18769A538();
        if (v71 >= v9) {
          goto LABEL_63;
        }
        uint64_t v44 = (uint64_t *)(v72 + 16 * v71);
        unint64_t v45 = v44[1];
        uint64_t v81 = *v44;
        unint64_t v82 = v45;
        swift_bridgeObjectRetain_n();
        sub_18769A490();
        swift_bridgeObjectRelease();
        uint64_t v46 = v81;
        unint64_t v47 = v82;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v77 = sub_18765B024(0LL, *((void *)v77 + 2) + 1LL, 1, v77);
        }
        unint64_t v49 = *((void *)v77 + 2);
        unint64_t v48 = *((void *)v77 + 3);
        if (v49 >= v48 >> 1) {
          uint64_t v77 = sub_18765B024((char *)(v48 > 1), v49 + 1, 1, v77);
        }
        *((void *)v77 + 2) = v49 + 1;
        id v50 = &v77[16 * v49];
        *((void *)v50 + 4) = v46;
        *((void *)v50 + 5) = v47;

        uint64_t v14 = v69;
        if (v68 == v69) {
          break;
        }
        uint64_t v12 = v67;
        unint64_t v15 = v67[2 * v68];
        unint64_t v6 = v70;
        unint64_t v17 = v66;
        if ((v15 & 0x8000000000000000LL) == 0)
        {
          uint64_t v19 = v68 + 1;
          uint64_t v16 = (void *)v67[2 * v68 + 1];
        }

        goto LABEL_58;
      }

      sub_187647FC0((uint64_t)&v84);
      uint64_t v54 = v83;
      unint64_t v6 = v70;
      uint64_t v12 = (void *)MEMORY[0x18961AFE8];
      unint64_t v10 = v74;
      uint64_t v7 = v65;
      goto LABEL_46;
    }

LABEL_59:
    swift_bridgeObjectRelease();
    sub_187659AF0();
    swift_allocError();
    *unint64_t v64 = 0;
LABEL_42:
    swift_willThrow();
    return v3;
  }

  uint64_t v54 = MEMORY[0x18961AFE8];
LABEL_46:
  uint64_t v18 = sub_1876589DC(*v3, v3[1], v7, v54);
  if (v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_49:
    id v3 = (uint64_t *)v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v79 = v12;
    if (v6)
    {
      unint64_t v78 = v3;
      char v55 = (void **)(v5 + 32);
      uint64_t v56 = (void **)(v10 + 32);
      sub_18769A52C();
      while (v6)
      {
        unint64_t v57 = v6;
        uint64_t v58 = *v55;
        uint64_t v59 = *v56;
        int v80 = 0;
        id v60 = v58;
        id v61 = v59;
        id v62 = objc_msgSend(v78, sel_multiply_corecryptoError_, v60, &v80);
        if (!v62
          || (id v63 = v62,
              int v80 = 0,
              !objc_msgSend(v61, sel_sub_corecryptoError_, v62, &v80)))
        {
          uint64_t v81 = 0LL;
          unint64_t v82 = 0xE000000000000000LL;
          sub_18769A5E0();
          sub_18769A490();
          sub_18769A6D0();
          sub_18769A490();
          swift_bridgeObjectRelease();
          while (1)
          {
            sub_18769A67C();
            __break(1u);
LABEL_67:
            uint64_t v81 = 0LL;
            unint64_t v82 = 0xE000000000000000LL;
            sub_18769A5E0();
            sub_18769A490();
            int v80 = (int)v79;
            sub_18769A6D0();
            sub_18769A490();
            swift_bridgeObjectRelease();
          }
        }

        MEMORY[0x1895AA300]();
        if (v79[2] >= v79[3] >> 1) {
          sub_18769A544();
        }
        sub_18769A55C();
        sub_18769A538();

        ++v56;
        ++v55;
        unint64_t v6 = v57 - 1;
        if (v57 == 1)
        {
          sub_187647FC0((uint64_t)v85);
          return v78;
        }
      }

      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
    }
  }

  return v3;
}

unint64_t sub_187657F7C(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (*(void *)(a3 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = *(void *)(a4 + 32);
  if (*(void *)(v4 + 16) > a2)
  {
    uint64_t v5 = *(void **)(v4 + 8 * a2 + 32);
    id v6 = *(id *)(a3 + 8 * result + 32);
    id v7 = v5;
    id v8 = sub_18764FE4C((uint64_t)v6, v7);

    return (unint64_t)v8;
  }

uint64_t sub_18765800C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a1[1];
  id v7 = (void *)a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  id v43 = (void *)*a1;
  id v10 = sub_18764FE4C(*a1, a2);
  uint64_t v40 = (void *)v8;
  id v11 = sub_18764FE4C(v8, a3);
  id v41 = sub_187657164(v10, (uint64_t)v11);

  uint64_t v42 = (void *)v6;
  id v12 = sub_18764FE4C(v6, a2);
  id v39 = (void *)v9;
  id v58 = a3;
  id v13 = sub_18764FE4C(v9, a3);
  id v38 = sub_187657164(v12, (uint64_t)v13);

  id v14 = sub_18764FE4C((uint64_t)v7, a2);
  unint64_t v44 = 0xD000000000000021LL;
  unint64_t v45 = 0x80000001876A0FC0LL;
  uint64_t v46 = MEMORY[0x18961AFE8];
  uint64_t v48 = MEMORY[0x18961AFE8];
  uint64_t v49 = MEMORY[0x18961AFE8];
  id v50 = (void *)MEMORY[0x18961AFE8];
  unint64_t v15 = sub_18765B024(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
  unint64_t v17 = *((void *)v15 + 2);
  unint64_t v16 = *((void *)v15 + 3);
  if (v17 >= v16 >> 1) {
    unint64_t v15 = sub_18765B024((char *)(v16 > 1), v17 + 1, 1, v15);
  }
  *((void *)v15 + 2) = v17 + 1;
  uint64_t v18 = &v15[16 * v17];
  *((void *)v18 + 4) = 122LL;
  *((void *)v18 + 5) = 0xE100000000000000LL;
  unint64_t v47 = v15;
  id v19 = v7;
  MEMORY[0x1895AA300]();
  if (*(void *)(v46 + 16) >= *(void *)(v46 + 24) >> 1) {
    sub_18769A544();
  }
  uint64_t v35 = v19;
  sub_18769A55C();
  sub_18769A538();
  uint64_t v20 = *(void *)(v46 + 16) - 1LL;
  id v21 = a2;
  uint64_t v22 = sub_1876586FC(0x6F746172656E6567LL, 0xEA00000000004772LL, v21, (uint64_t)&v44);

  id v23 = v14;
  uint64_t v24 = sub_1876586FC(90LL, 0xE100000000000000LL, v23, (uint64_t)&v44);

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D98);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18769C700;
  *(void *)(v25 + 32) = v20;
  *(void *)(v25 + 40) = v22;
  id v26 = v50;
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v26 = sub_18765B124(0LL, v26[2] + 1LL, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    id v26 = sub_18765B124((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  id v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  unint64_t v51 = v44;
  unint64_t v52 = v45;
  uint64_t v53 = v46;
  uint64_t v54 = v47;
  uint64_t v55 = v48;
  uint64_t v56 = v49;
  unint64_t v57 = v26;
  uint64_t v30 = sub_187651C8C();
  if (v36)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v33 = v30;
    uint64_t v37 = v31;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v41;
    a4[1] = v38;
    a4[2] = v23;
    a4[3] = v33;
    a4[4] = v37;
  }

  return result;
}

void sub_187658414(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *(void **)(a2 + 8);
  uint64_t v25 = *(void **)a2;
  id v32 = v24;
  id v33 = v25;
  id v23 = *(void **)(a2 + 16);
  id v30 = *(id *)(a2 + 24);
  id v31 = v23;
  id v22 = v30;
  uint64_t v5 = *(void **)(a2 + 32);
  id v29 = v5;
  sub_18769A37C();
  sub_1876481AC(&v33);
  sub_1876481AC(&v32);
  sub_1876481AC(&v31);
  sub_1876481AC(&v30);
  sub_1876481AC(&v29);
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v26);
  id v7 = objc_msgSend(v6, sel_serializedPublicKey_, 1);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_187699F98();
    unint64_t v11 = v10;

    uint64_t v12 = sub_18763B1DC(0xD000000000000029LL, 0x80000001876A0F90LL);
    unint64_t v14 = v13;
    sub_187651220(v9, v11, v12, v13);
    if (!v3)
    {
      unint64_t v16 = v15;
      sub_187623C58(v12, v14);
      sub_187623C58(v9, v11);
      v34[0] = (uint64_t)v25;
      v34[1] = (uint64_t)v24;
      v34[2] = (uint64_t)v23;
      v34[3] = (uint64_t)v22;
      v34[4] = (uint64_t)v5;
      id v35 = v5;
      id v39 = v25;
      id v37 = v23;
      id v38 = v24;
      id v36 = v22;
      sub_1876481AC(&v39);
      sub_1876481AC(&v38);
      sub_1876481AC(&v37);
      sub_1876481AC(&v36);
      sub_1876481AC(&v35);
      id v17 = v6;
      id v18 = v16;
      sub_18765800C(v34, v17, v18, v27);
      uint64_t v20 = v28;
      sub_1876597F8(&v33);
      sub_1876597F8(&v32);
      sub_1876597F8(&v31);
      sub_1876597F8(&v30);
      sub_1876597F8(&v29);
      *(void *)a3 = v25;
      *(void *)(a3 + 8) = v24;
      *(void *)(a3 + 16) = v23;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v5;
      __int128 v19 = v27[1];
      *(_OWORD *)(a3 + 40) = v27[0];
      *(_OWORD *)(a3 + 56) = v19;
      *(void *)(a3 + 72) = v20;
      *(void *)(a3 + 80) = a1;
      *(void *)(a3 + 88) = v17;
      *(void *)(a3 + 96) = v18;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_1876586FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9FD8);
  _BYTE v17[4] = sub_187659B5C();
  v17[0] = a3;
  uint64_t v8 = *(char **)(a4 + 40);
  id v9 = a3;
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_18765B024(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v8 = sub_18765B024((char *)(v10 > 1), v11 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v11 + 1;
  uint64_t v12 = &v8[16 * v11];
  *((void *)v12 + 4) = a1;
  *((void *)v12 + 5) = a2;
  *(void *)(a4 + 40) = v8;
  sub_187659BA8((uint64_t)v17, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9FE8);
  uint64_t v13 = swift_dynamicCast();
  MEMORY[0x1895AA300](v13);
  if (*(void *)(*(void *)(a4 + 32) + 16LL) >= *(void *)(*(void *)(a4 + 32) + 24LL) >> 1) {
    sub_18769A544();
  }
  sub_18769A55C();
  sub_18769A538();
  uint64_t v14 = *(void *)(*(void *)(a4 + 32) + 16LL) - 1LL;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

uint64_t sub_18765886C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9FD8);
  _BYTE v17[4] = sub_187659B5C();
  v17[0] = a3;
  uint64_t v8 = *(char **)(a4 + 32);
  id v9 = a3;
  sub_18769A52C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_18765B024(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v8 = sub_18765B024((char *)(v10 > 1), v11 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v11 + 1;
  uint64_t v12 = &v8[16 * v11];
  *((void *)v12 + 4) = a1;
  *((void *)v12 + 5) = a2;
  *(void *)(a4 + 32) = v8;
  sub_187659BA8((uint64_t)v17, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9FE8);
  uint64_t v13 = swift_dynamicCast();
  MEMORY[0x1895AA300](v13);
  if (*(void *)(*(void *)(a4 + 24) + 16LL) >= *(void *)(*(void *)(a4 + 24) + 24LL) >> 1) {
    sub_18769A544();
  }
  sub_18769A55C();
  sub_18769A538();
  uint64_t v14 = *(void *)(*(void *)(a4 + 24) + 16LL) - 1LL;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

uint64_t sub_1876589DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a1;
  unint64_t v33 = a2;
  uint64_t v39 = sub_18769A46C();
  uint64_t v35 = *(void *)(v39 - 8);
  MEMORY[0x1895F8858](v39);
  id v34 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v38 = xmmword_18769C9B0;
  if (*(void *)(a3 + 16))
  {
    v31[0] = a4;
    sub_18769A52C();
    id v7 = objc_msgSend(*(id *)(a3 + 32), sel_serializedPublicKey_, 1);
    if (v7)
    {
      uint64_t v8 = v7;
      sub_187699F98();
      uint64_t v10 = v9;

      __asm { BR              X9 }
    }

    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (*(void *)(a4 + 16))
  {
    sub_18769A52C();
    id v11 = objc_msgSend(*(id *)(a4 + 32), sel_serializedPublicKey_, 1);
    if (v11)
    {
      uint64_t v12 = v11;
      sub_187699F98();
      uint64_t v14 = v13;

      __asm { BR              X9 }
    }

    goto LABEL_14;
  }

  __int128 v15 = v38;
  unint64_t v16 = v33;
  sub_18769A52C();
  sub_187623A28(v15, *((unint64_t *)&v15 + 1));
  uint64_t v17 = sub_18763B1DC(v32, v16);
  unint64_t v19 = v18;
  uint64_t v20 = v34;
  sub_18769A448();
  uint64_t v21 = sub_18769A43C();
  unint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v39);
  if (v23 >> 60 == 15)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v36 = v21;
  unint64_t v37 = v23;
  sub_18764642C(v21, v23);
  sub_187623A28(v17, v19);
  sub_18763CF30(v17, v19);
  sub_187623C58(v17, v19);
  sub_1876482B4(v21, v23);
  uint64_t v24 = v36;
  unint64_t v25 = v37;
  sub_18769A37C();
  sub_1876597B0();
  uint64_t v26 = sub_18769A220();
  uint64_t v27 = v31[1];
  uint64_t v28 = sub_187641FD8(v15, *((uint64_t *)&v15 + 1), 1LL, v24, v25, v26, 0);
  if (v27)
  {
    sub_187623C58(v24, v25);
    sub_187623C58(v15, *((unint64_t *)&v15 + 1));
    sub_187623C58(v17, v19);
    return sub_187623C58(v15, *((unint64_t *)&v15 + 1));
  }

  else
  {
    if (!*(void *)(v28 + 16))
    {
LABEL_16:
      swift_bridgeObjectRelease();
      __break(1u);
      JUMPOUT(0x187658EB4LL);
    }

    id v30 = *(id *)(v28 + 32);
    swift_bridgeObjectRelease();
    sub_187623C58(v24, v25);
    sub_187623C58(v15, *((unint64_t *)&v15 + 1));
    sub_187623C58(v17, v19);
    sub_187623C58(v15, *((unint64_t *)&v15 + 1));
    return (uint64_t)v30;
  }

uint64_t sub_187658ED4( uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t *__return_ptr, void, void))
{
  int64_t v4 = a3 >> 1;
  uint64_t v5 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_13;
  }
  uint64_t v6 = result;
  uint64_t result = MEMORY[0x18961AFE8];
  if (v5)
  {
    uint64_t v13 = MEMORY[0x18961AFE8];
    uint64_t result = sub_18769A640();
    if (v5 < 0)
    {
LABEL_14:
      __break(1u);
      return result;
    }

    uint64_t v8 = 0LL;
    for (uint64_t i = (void *)(v6 + 16 * a2 + 8); ; i += 2)
    {
      uint64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        break;
      }
      if (a2 + v8 >= v4 || v8 >= v5) {
        goto LABEL_12;
      }
      a4(&v12, *(i - 1), *i);
      sub_18769A628();
      sub_18769A64C();
      sub_18769A658();
      uint64_t result = sub_18769A634();
      ++v8;
      if (v10 == v5) {
        return v13;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return result;
}

uint64_t sub_187658FF0(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id v11 = sub_187657164(a5, (uint64_t)a5);
  unsigned __int8 v12 = objc_msgSend(a5, sel_isEqual_, v11);

  if ((v12 & 1) != 0) {
    goto LABEL_3;
  }
  id v13 = a4;
  id v14 = a5;
  a6 = (uint64_t)(id)a6;
  id v15 = sub_187657164((void *)a6, a6);
  unsigned int v16 = objc_msgSend((id)a6, sel_isEqual_, v15);

  if (v16)
  {
LABEL_3:
    sub_187659948();
    swift_allocError();
    *uint64_t v17 = 6;
    swift_willThrow();
  }

  else
  {
    id v19 = sub_18766D7B8(v13, a3);
    id v20 = sub_18766D8D0(a1, (uint64_t)v19);

    id v21 = sub_18764FE4C((uint64_t)v20, v14);
    LODWORD(v19) = objc_msgSend((id)a6, sel_isEqual_, v21);
    id v22 = sub_18764FE4C(a2, v14);
    id v23 = sub_187657164(v21, (uint64_t)v22);

    unsigned int v24 = objc_msgSend((id)a6, sel_isEqual_, v23);
    if ((_DWORD)v19 == v24)
    {
      sub_187659948();
      swift_allocError();
      *unint64_t v25 = 6;
      swift_willThrow();
    }

    else
    {
      LOBYTE(a6) = v24;
    }
  }

  return a6 & 1;
}

uint64_t sub_1876591CC(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, id a7)
{
  id v11 = *(void **)(a2 + 24);
  uint64_t v10 = *(void **)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v57 = *(void *)(a2 + 64);
  uint64_t v47 = *(void *)(a2 + 72);
  uint64_t v54 = *(void *)(a2 + 80);
  id v14 = sub_18764FE4C(*(void *)(a2 + 48), a7);
  id v15 = sub_18764FE4C((uint64_t)v10, v11);
  id v53 = sub_18765727C(v14, (uint64_t)v15);

  id v16 = sub_18764FE4C(v13, a7);
  uint64_t v46 = (uint64_t)v11;
  id v17 = sub_18765727C(v11, a4);
  id v18 = sub_18764FE4C(v12, v17);

  id v52 = sub_18765727C(v16, (uint64_t)v18);
  id v19 = sub_18766D8D0(v10, v12);
  id v51 = *(id *)a2;
  id v20 = sub_18764FE4C(v57, *(id *)a2);
  id v21 = sub_18764FE4C((uint64_t)v19, a6);
  id v49 = sub_187657164(v20, (uint64_t)v21);

  id v45 = *(id *)(a2 + 8);
  id v22 = sub_18764FE4C(v57, v45);
  id v23 = sub_18764FE4C(v47, a7);
  id v24 = sub_187657164(v22, (uint64_t)v23);

  id v25 = sub_187657164(a3, (uint64_t)v11);
  uint64_t v48 = *(void *)(a2 + 16);
  id v26 = sub_18764FE4C(v48, a5);
  id v27 = sub_187657164(v25, (uint64_t)v26);

  id v28 = sub_187657164(v27, (uint64_t)a1);
  id v29 = sub_18764FE4C((uint64_t)v19, v28);

  id v30 = sub_187657164(v24, (uint64_t)v29);
  id v31 = sub_18764FE4C(v57, v45);
  unsigned __int8 v32 = a6;
  id v33 = sub_18764FE4C(v54, a6);
  id v34 = sub_187657164(v31, (uint64_t)v33);

  uint64_t v35 = v53;
  id v58 = v19;
  id v36 = sub_18764FE4C((uint64_t)v19, a1);
  id v37 = sub_187657164(v34, (uint64_t)v36);

  __int128 v38 = v52;
  uint64_t v39 = v49;
  sub_187653280( a6,  (uint64_t)a7,  (uint64_t)a3,  a4,  (uint64_t)a5,  (uint64_t)v51,  (uint64_t)v45,  v48,  (uint64_t)a1,  v46,  (uint64_t)v53,  (uint64_t)v52,  (uint64_t)v49,  (uint64_t)v30,  (uint64_t)v37);
  if (v56)
  {
    id v41 = v49;
    uint64_t v39 = v58;
    uint64_t v42 = v30;
  }

  else
  {
    id v43 = v40;
    unsigned __int8 v32 = objc_msgSend(v40, sel_isEqual_, v58);

    uint64_t v35 = v52;
    __int128 v38 = v58;
    id v41 = v30;
    uint64_t v42 = v37;
    id v37 = v43;
  }

  return v32 & 1;
}

uint64_t _s16CryptoKitPrivate18ATHMKeyCommitmentsC6verify03keyE4DataSb10Foundation0H0V_tFZ_0( uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v26);
  id v5 = objc_msgSend(v4, sel_serializedPublicKey_, 1);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_187699F98();
    unint64_t v9 = v8;

    uint64_t v10 = sub_18763B1DC(0xD000000000000029LL, 0x80000001876A0F90LL);
    unint64_t v12 = v11;
    sub_187651220(v7, v9, v10, v11);
    id v14 = v13;
    sub_187623C58(v10, v12);
    sub_187623C58(v7, v9);
    sub_187664530(a1, a2);
    char v15 = sub_187654A30(v4, v14);

    id v26 = v17;
    sub_1876597F8(&v26);
    id v25 = v18;
    sub_1876597F8(&v25);
    id v24 = v19;
    sub_1876597F8(&v24);
    id v23 = v20;
    sub_1876597F8(&v23);
    uint64_t v22 = v21;
    sub_187647FC0((uint64_t)&v22);
    return v15 & 1;
  }

  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for ATHMKeyCommitments()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ATHMClient()
{
  return objc_opt_self();
}

uint64_t sub_187659788(uint64_t a1)
{
  return a1;
}

unint64_t sub_1876597B0()
{
  unint64_t result = qword_18C4C7198;
  if (!qword_18C4C7198)
  {
    uint64_t v1 = sub_18769A37C();
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189605D68], v1);
    atomic_store(result, (unint64_t *)&qword_18C4C7198);
  }

  return result;
}

id *sub_1876597F8(id *a1)
{
  return a1;
}

uint64_t sub_187659820(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  id v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  unint64_t v8 = *(void **)(a1 + 56);
  unint64_t v9 = *(void **)(a1 + 64);
  uint64_t v10 = *(void **)(a1 + 72);
  id v23 = *(void **)(a1 + 80);
  id v11 = *(id *)a1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v10;
  id v21 = v23;
  return a1;
}

uint64_t sub_1876598B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  id v12 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 16);
  id v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  unint64_t v8 = *(void **)(a1 + 56);
  uint64_t v10 = *(void **)(a1 + 64);
  unint64_t v9 = *(void **)(a1 + 72);

  return a1;
}

unint64_t sub_187659948()
{
  unint64_t result = qword_18C6D9FB8;
  if (!qword_18C6D9FB8)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769FBE8, &type metadata for ATHM.Errors);
    atomic_store(result, (unint64_t *)&qword_18C6D9FB8);
  }

  return result;
}

uint64_t type metadata accessor for ATHMServer()
{
  return objc_opt_self();
}

uint64_t method lookup function for ATHMClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ATHMClient.__allocating_init(keyCommitmentsData:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ATHMClient.request()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x60LL))();
}

uint64_t dispatch thunk of ATHMClient.finalize(responseData:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x68LL))();
}

uint64_t method lookup function for ATHMServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ATHMServer.exportKeyCommitments()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x58LL))();
}

uint64_t dispatch thunk of ATHMServer.respond(requestData:b:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x60LL))();
}

uint64_t dispatch thunk of ATHMServer.readBit(presentationData:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x68LL))();
}

uint64_t sub_187659AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_187659AF0()
{
  unint64_t result = qword_18C6D9FD0;
  if (!qword_18C6D9FD0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769D0C8, &type metadata for ZKPErrors);
    atomic_store(result, (unint64_t *)&qword_18C6D9FD0);
  }

  return result;
}

unint64_t sub_187659B34@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_187657F7C(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24));
  *a3 = result;
  return result;
}

unint64_t sub_187659B5C()
{
  unint64_t result = qword_18C6D9FE0;
  if (!qword_18C6D9FE0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6D9FD8);
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769E090, v1);
    atomic_store(result, (unint64_t *)&qword_18C6D9FE0);
  }

  return result;
}

uint64_t sub_187659BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_187659BF4()
{
  return sub_187659D24(&OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t sub_187659C00(uint64_t a1, uint64_t a2)
{
  return sub_187659D84(a1, a2, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t (*sub_187659C0C())()
{
  return j__swift_endAccess;
}

uint64_t sub_187659C54@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  *a3 = *v4;
  a3[1] = v6;
  return sub_187623A28(v5, v6);
}

uint64_t sub_187659CA4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(*a2 + *a5);
  swift_beginAccess();
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  *uint64_t v7 = v5;
  v7[1] = v6;
  sub_187623A28(v5, v6);
  return sub_187623C58(v8, v9);
}

uint64_t sub_187659D18()
{
  return sub_187659D24(&OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t sub_187659D24(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  sub_187623A28(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_187659D78(uint64_t a1, uint64_t a2)
{
  return sub_187659D84(a1, a2, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t sub_187659D84(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  *unint64_t v6 = a1;
  v6[1] = a2;
  return sub_187623C58(v7, v8);
}

uint64_t (*sub_187659DDC())()
{
  return j_j__swift_endAccess;
}

uint64_t AlishaSPAKE2Prover.__allocating_init(password:salt:authenticatedData:keyDerivationCost:)( void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  id v9 = objc_allocWithZone(v4);
  return AlishaSPAKE2Prover.init(password:salt:authenticatedData:keyDerivationCost:)(a1, a2, a3, a4);
}

uint64_t AlishaSPAKE2Prover.init(password:salt:authenticatedData:keyDerivationCost:)( void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  id v64 = a3;
  id v65 = a1;
  uint64_t v68 = *MEMORY[0x1895F89C0];
  uint64_t v9 = sub_18769A46C();
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  id v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ccspake_cp_256();
  if (!v13)
  {
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v14 = v13;
  id v15 = v4;
  uint64_t v16 = ccspake_sizeof_w();
  if (v16 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v5 = v16;
  sub_18769A448();
  uint64_t v17 = sub_18769A460();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v18 = v65;
  id v19 = objc_msgSend(v65, sel_dataUsingEncoding_, v17);
  if (!v19) {
LABEL_36:
  }
    __break(1u);
  id v20 = v19;
  uint64_t v21 = sub_187699F98();
  unint64_t v23 = v22;

  uint64_t v62 = v21;
  unint64_t v63 = v23;
  id v24 = (void *)sub_187699F80();
  a4 = a2;
  id v25 = (void *)_s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0( v24,  a2,  2 * v5);

  if (!v25)
  {
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9DB0);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_18769C700;
    *(void *)(v33 + 56) = MEMORY[0x189617FA8];
    *(void *)(v33 + 32) = 0xD000000000000050LL;
    *(void *)(v33 + 40) = 0x80000001876A1040LL;
    sub_18769A73C();

    swift_bridgeObjectRelease();
    sub_187623C58(v62, v63);
    goto LABEL_25;
  }

  unint64_t v6 = v25;
  if (objc_msgSend(v6, sel_length) != (id)(2 * v5))
  {

    goto LABEL_10;
  }

  id v26 = objc_msgSend(v6, sel_subdataWithRange_, 0, v5);
  a2 = (uint64_t *)sub_187699F98();
  id v12 = v27;

  id v28 = objc_msgSend(v6, sel_subdataWithRange_, v5, v5);
  uint64_t v9 = sub_187699F98();
  unint64_t v10 = v29;

  uint64_t v30 = SPAKE2CtxSize();
  if (v30 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  size_t v31 = v30;
  id v59 = v6;
  uint64_t v60 = v9;
  if (v30)
  {
    uint64_t v32 = sub_18769A550();
    *(void *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), v31);
  }

  else
  {
    uint64_t v32 = MEMORY[0x18961AFE8];
  }

  uint64_t v5 = (uint64_t)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData];
  *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData] = v32;
  id v34 = v64;
  uint64_t v35 = sub_187699F98();
  uint64_t v9 = v36;
  id v58 = v34;

  sub_18765B884(v35, v9);
  id v64 = v37;
  sub_187623C58(v35, v9);
  swift_beginAccess();
  unint64_t v6 = *(void **)v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v61 = (uint64_t *)v5;
  *(void *)uint64_t v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    uint64_t v39 = ccspake_mac_hkdf_cmac_aes128_sha256();
    if (v39) {
      goto LABEL_14;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

LABEL_30:
  unint64_t v6 = sub_187631FCC((uint64_t)v6);
  *id v61 = (uint64_t)v6;
  uint64_t v39 = ccspake_mac_hkdf_cmac_aes128_sha256();
  if (!v39) {
    goto LABEL_31;
  }
LABEL_14:
  uint64_t v40 = (void *)v39;
  int v67 = 0;
  uint64_t result = ccrng();
  if (result)
  {
    if (!v67)
    {
      v55[0] = a4;
      v55[1] = v40;
      uint64_t v56 = v6 + 4;
      uint64_t v57 = v15;
      v55[3] = *((id *)v64 + 2);
      unint64_t v42 = v10;
      id v55[2] = (id)SPAKE2Alishaz0Size();
      sub_187623A28((uint64_t)a2, (unint64_t)v12);
      sub_18765B884((uint64_t)a2, (uint64_t)v12);
      sub_187623C58((uint64_t)a2, (unint64_t)v12);
      uint64_t v43 = v60;
      sub_187623A28(v60, v10);
      sub_18765B884(v43, v10);
      sub_187623C58(v43, v10);
      uint64_t v56 = (void *)v14;
      int v44 = ccspake_prover_init();
      uint64_t v9 = (uint64_t)v61;
      *id v61 = (uint64_t)v6;
      swift_endAccess();
      swift_release();
      swift_release();
      if (v44)
      {

        sub_187623C58(v62, v63);
        id v45 = v59;

        sub_187623C58((uint64_t)a2, (unint64_t)v12);
        sub_187623C58(v43, v42);
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_25;
      }

      a4 = (uint64_t *)v42;
      uint64_t v5 = (uint64_t)v12;
      uint64_t v46 = ccspake_sizeof_point();
      id v15 = v57;
      if ((v46 & 0x8000000000000000LL) == 0)
      {
        size_t v47 = v46;
        uint64_t v14 = (uint64_t)a2;
        if (v46)
        {
          unint64_t v6 = (void *)sub_18769A550();
          _BYTE v6[2] = v47;
          bzero(v6 + 4, v47);
        }

        else
        {
          unint64_t v6 = (void *)MEMORY[0x18961AFE8];
        }

        a2 = v61;
        swift_beginAccess();
        uint64_t v9 = *a2;
        char v48 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v9;
        if ((v48 & 1) != 0) {
          goto LABEL_23;
        }
        goto LABEL_34;
      }

        id v12 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      id v27 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v19);
      id v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        sub_18769A52C();
      }
      uint64_t result = MEMORY[0x1895AA528](*(void *)(v7 + 40), v27, 4LL);
      uint64_t v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v23 = 0;
        id v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          id v25 = v16 == v24;
          if (v16 == v24) {
            uint64_t v16 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        uint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

  if ((_DWORD)v6 == v12)
  {
    id v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v35 = a1;
LABEL_34:
    uint64_t v9 = v6;
    uint64_t v13 = AssociatedTypeWitness;
    return v34(v35, v9, v13);
  }

  uint64_t v36 = ~v17;
  uint64_t v35 = (v20 + a1) & ~v19;
  if (v11 != v12)
  {
    uint64_t v35 = (v26 + v35 + v25) & v36;
    goto LABEL_40;
  }

  if (v9 >= v10)
  {
LABEL_40:
    id v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    return v34(v35, v9, v13);
  }

  uint64_t v35 = (v23 + ((v22 + ((v22 + v35) & v36)) & v36)) & ~v18;
  if (v6 >= 0x7FFFFFFF)
  {
    id v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    goto LABEL_34;
  }

  id v37 = *(void *)((v24 + v35) & 0xFFFFFFFFFFFFF8LL);
  if (v37 >= 0xFFFFFFFF) {
    LODWORD(v37) = -1;
  }
  return (v37 + 1);
}

  __break(1u);
}

  if ((_DWORD)v6 == v12)
  {
    uint64_t v33 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    id v34 = a1;
LABEL_34:
    uint64_t v9 = v6;
    uint64_t v13 = AssociatedTypeWitness;
    return v33(v34, v9, v13);
  }

  uint64_t v35 = ~v17;
  id v34 = (v20 + a1) & ~v19;
  if (v11 != v12)
  {
    id v34 = (v25 + v34) & v35;
    goto LABEL_40;
  }

  if (v9 >= v10)
  {
LABEL_40:
    uint64_t v33 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    return v33(v34, v9, v13);
  }

  id v34 = (v23 + ((v22 + ((v22 + v34) & v35)) & v35)) & ~v18;
  if (v6 >= 0x7FFFFFFF)
  {
    uint64_t v33 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    goto LABEL_34;
  }

  uint64_t v36 = *(void *)((v24 + v34) & 0xFFFFFFFFFFFFF8LL);
  if (v36 >= 0xFFFFFFFF) {
    LODWORD(v36) = -1;
  }
  return (v36 + 1);
}

id sub_18765A5A8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_X);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v1 + 32, *(void *)(v1 + 16));
}

uint64_t sub_18765A63C(void *a1, void *a2)
{
  id v5 = objc_msgSend(a1, sel_length);
  uint64_t result = ccspake_cp_256();
  if (result)
  {
    uint64_t v7 = (void *)sub_18769A550();
    _BYTE v7[2] = 16LL;
    v7[4] = 0LL;
    v7[5] = 0LL;
    unint64_t v8 = (void *)sub_18769A550();
    v8[2] = 16LL;
    v8[4] = 0LL;
    void v8[5] = 0LL;
    uint64_t v9 = (char **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData);
    swift_beginAccess();
    unint64_t v10 = *v9;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_187631FCC((uint64_t)v10);
      *uint64_t v9 = v10;
    }

    objc_msgSend(a1, sel_length);
    uint64_t v12 = sub_187699F98();
    unint64_t v14 = v13;
    sub_18765B884(v12, v13);
    sub_187623C58(v12, v14);
    LODWORD(v14) = ccspake_kex_process();
    *uint64_t v9 = v10;
    swift_endAccess();
    swift_release();
    if ((_DWORD)v14) {
      goto LABEL_13;
    }
    swift_beginAccess();
    id v15 = *v9;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v15;
    if ((v16 & 1) == 0)
    {
      id v15 = sub_187631FCC((uint64_t)v15);
      *uint64_t v9 = v15;
    }

    int v17 = ccspake_mac_compute();
    *uint64_t v9 = v15;
    swift_endAccess();
    if (v17) {
      goto LABEL_13;
    }
    swift_beginAccess();
    id v18 = *v9;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v18;
    if ((v19 & 1) == 0)
    {
      id v18 = sub_187631FCC((uint64_t)v18);
      *uint64_t v9 = v18;
    }

    objc_msgSend(a2, sel_length);
    uint64_t v20 = sub_187699F98();
    unint64_t v22 = v21;
    sub_18765B884(v20, v21);
    sub_187623C58(v20, v22);
    int session_key = ccspake_mac_verify_and_get_session_key();
    *uint64_t v9 = v18;
    swift_endAccess();
    swift_release();
    if (session_key)
    {
LABEL_13:
      id v24 = 0LL;
    }

    else
    {
      id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v7 + 4, v7[2]);
      id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v8 + 4, v8[2]);
      id v27 = objc_allocWithZone((Class)type metadata accessor for AlishaSPAKE2ProverConfirmed());
      id v24 = sub_18765ABAC(v25, v26);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v24;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id AlishaSPAKE2Prover.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AlishaSPAKE2Prover.init()()
{
}

id AlishaSPAKE2Prover.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for AlishaSPAKE2Prover);
}

id AlishaSPAKE2ProverConfirmed.alishaKey.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey);
}

id AlishaSPAKE2ProverConfirmed.KEnc.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KEnc);
}

id AlishaSPAKE2ProverConfirmed.KMac.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KMac);
}

id AlishaSPAKE2ProverConfirmed.KRMac.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KRMac);
}

id AlishaSPAKE2ProverConfirmed.SymmetricLTS.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_SymmetricLTS);
}

id AlishaSPAKE2ProverConfirmed.Kble_intro.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_intro);
}

id AlishaSPAKE2ProverConfirmed.Kble_oob_master.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_oob_master);
}

id AlishaSPAKE2ProverConfirmed.M2.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2);
}

void *sub_18765ABAC(void *a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey;
  *(void *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey] = a1;
  uint64_t v6 = OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2;
  *(void *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2] = a2;
  uint64_t v7 = v2;
  id v8 = a1;
  id v9 = a2;
  uint64_t result = (void *)sub_18765BB9C(v8);
  if (!result)
  {

    uint64_t v21 = *(void **)&v2[v6];
    type metadata accessor for AlishaSPAKE2ProverConfirmed();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  uint64_t v11 = result;
  if (!result[2])
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v12 = result[4];
  uint64_t result = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytes_length_,  v12 + 32,  *(void *)(v12 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KEnc] = result;
  if (v11[2] < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v13 = v11[5];
  uint64_t result = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytes_length_,  v13 + 32,  *(void *)(v13 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KMac] = result;
  if (v11[2] < 3uLL)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v14 = v11[6];
  uint64_t result = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytes_length_,  v14 + 32,  *(void *)(v14 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KRMac] = result;
  if (v11[2] < 4uLL)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v15 = v11[7];
  uint64_t result = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytes_length_,  v15 + 32,  *(void *)(v15 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_SymmetricLTS] = result;
  if (v11[2] < 5uLL)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v16 = v11[8];
  uint64_t result = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytes_length_,  v16 + 32,  *(void *)(v16 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_intro] = result;
  if (v11[2] >= 6uLL)
  {
    uint64_t v17 = v11[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v17 + 32, v18);
    swift_bridgeObjectRelease();
    *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_oob_master] = v19;

    v22.receiver = v7;
    v22.super_class = (Class)type metadata accessor for AlishaSPAKE2ProverConfirmed();
    id v20 = objc_msgSendSuper2(&v22, sel_init);

    return v20;
  }

void AlishaSPAKE2ProverConfirmed.init()()
{
}

id AlishaSPAKE2ProverConfirmed.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for AlishaSPAKE2ProverConfirmed);
}

char *sub_18765AF3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_18765B024(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA070);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_18765B124(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA060);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA068);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_18765B244(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_18765B268(a1, a2, a3, a4, &qword_18C6D9AD8);
}

char *sub_18765B250(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_18765B268(a1, a2, a3, a4, &qword_18C6D9BA8);
}

char *sub_18765B25C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_18765B268(a1, a2, a3, a4, &qword_18C6D9B10);
}

char *sub_18765B268(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    int64_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v9);
  }

  swift_bridgeObjectRelease();
  return v11;
}

char *sub_18765B35C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C6D9A00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_18765B45C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA058);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_18765B574(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AB0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 4 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_18765B66C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AC0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AC8);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_18765B78C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AA8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

void sub_18765B884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_187699FBC();
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

void *sub_18765B900()
{
  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_187623A28(v2, v0);
    uint64_t v7 = sub_187699F2C();
    sub_187623C58(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x18765B9D4LL);
    }
  }

  return v4;
}

uint64_t type metadata accessor for AlishaSPAKE2Prover()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AlishaSPAKE2ProverConfirmed()
{
  return objc_opt_self();
}

uint64_t sub_18765BA2C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_187659C54(a1, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self, a2);
}

uint64_t sub_18765BA48(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_187659CA4(a1, a2, a3, a4, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t sub_18765BA64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_187659C54(a1, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self, a2);
}

uint64_t sub_18765BA80(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_187659CA4(a1, a2, a3, a4, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t method lookup function for AlishaSPAKE2Prover()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xC0LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xC8LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xD0LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xD8LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xE0LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xE8LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.__allocating_init(password:salt:authenticatedData:keyDerivationCost:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.getX()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xF8LL))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.processResponse(Y:M1:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x100LL))();
}

uint64_t method lookup function for AlishaSPAKE2ProverConfirmed()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_18765BB9C(void *a1)
{
  uint64_t v2 = sub_18769A46C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18769A454();
  uint64_t v6 = sub_18769A43C();
  unint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8 >> 60 == 15) {
    goto LABEL_84;
  }
  sub_18765B884(v6, v8);
  sub_1876482B4(v6, v8);
  uint64_t v10 = sub_18769A550();
  *(void *)(v10 + 16) = 96LL;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  sub_18769A52C();
  ccsha256_di();
  objc_msgSend(a1, sel_length);
  objc_msgSend(a1, sel_bytes);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = (uint64_t)sub_18765AF3C(0LL, *(void *)(v10 + 16), 0, (char *)v10);
  }
  int v11 = cchkdf();
  uint64_t result = swift_release();
  if (v11)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v13 = *(void *)(v10 + 16);
  if (v13)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    while (1)
    {
      uint64_t v16 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        break;
      }
      BOOL v17 = __OFADD__(v15, 16LL);
      v15 += 16LL;
      if (v17) {
        uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      ++v14;
      if (v15 >= v13) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v16 = 0LL;
LABEL_14:
    uint64_t v50 = MEMORY[0x18961AFE8];
    uint64_t result = (uint64_t)sub_18762C4D4(0LL, v16 & ~(v16 >> 63), 0);
    if (v16 < 0) {
      goto LABEL_83;
    }
    uint64_t v12 = v50;
    uint64_t v48 = v13;
    if (!v16)
    {
      if (!v13)
      {
LABEL_72:
        swift_bridgeObjectRelease();
        return v12;
      }

      unint64_t v18 = 0LL;
LABEL_45:
      uint64_t v32 = v18 + 16;
      uint64_t v33 = -(uint64_t)v18;
      unint64_t v34 = v18;
      while (1)
      {
        uint64_t v35 = v13 >= v32 ? v32 : v13;
        uint64_t v36 = v34 + 16;
        if (__OFADD__(v34, 16LL)) {
          goto LABEL_79;
        }
        if (v13 >= v36) {
          uint64_t v37 = v34 + 16;
        }
        else {
          uint64_t v37 = v13;
        }
        if ((v18 & 0x8000000000000000LL) != 0) {
          goto LABEL_81;
        }
        uint64_t v38 = *(void *)(v10 + 16);
        if (v38 < v34 || v38 < v37) {
          goto LABEL_82;
        }
        uint64_t v49 = v12;
        sub_18769A6E8();
        sub_18769A52C();
        swift_unknownObjectRetain_n();
        uint64_t v40 = swift_dynamicCastClass();
        if (!v40)
        {
          swift_bridgeObjectRelease();
          uint64_t v40 = MEMORY[0x18961AFE8];
        }

        int64_t v41 = v35 + v33;
        uint64_t v42 = *(void *)(v40 + 16);
        swift_release();
        if (v41 == v42)
        {
          uint64_t v43 = (void *)swift_dynamicCastClass();
          uint64_t v12 = v49;
          if (!v43)
          {
            swift_bridgeObjectRelease();
            uint64_t v43 = (void *)MEMORY[0x18961AFE8];
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v43 = (void *)MEMORY[0x18961AFE8];
          uint64_t v12 = v49;
          if (v34 != v37)
          {
            if (v41 >= 1)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
              uint64_t v43 = (void *)swift_allocObject();
              size_t v46 = _swift_stdlib_malloc_size(v43);
              v43[2] = v41;
              v43[3] = 2 * v46 - 64;
            }

            memcpy(v43 + 4, (const void *)(v10 + v34 + 32), v41);
          }
        }

        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v50 = v12;
        unint64_t v45 = *(void *)(v12 + 16);
        unint64_t v44 = *(void *)(v12 + 24);
        if (v45 >= v44 >> 1)
        {
          uint64_t result = (uint64_t)sub_18762C4D4((void *)(v44 > 1), v45 + 1, 1);
          uint64_t v12 = v50;
        }

        *(void *)(v12 + 16) = v45 + 1;
        *(void *)(v12 + 8 * v45 + 32) = v43;
        v34 += 16LL;
        v32 += 16LL;
        v33 -= 16LL;
        uint64_t v13 = v48;
        if (v36 >= v48) {
          goto LABEL_72;
        }
      }
    }

    unint64_t v18 = 0LL;
    uint64_t v19 = 16LL;
    uint64_t v20 = 32LL;
    while (1)
    {
      uint64_t v21 = v13 >= v19 ? v19 : v13;
      if (v18 >= v13) {
        break;
      }
      if (v18 == 0x7FFFFFFFFFFFFFF0LL) {
        goto LABEL_76;
      }
      else {
        uint64_t v22 = v13;
      }
      unint64_t v23 = *(void *)(v10 + 16);
      uint64_t v49 = v12;
      sub_18769A6E8();
      sub_18769A52C();
      swift_unknownObjectRetain_n();
      uint64_t v24 = swift_dynamicCastClass();
      if (!v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = MEMORY[0x18961AFE8];
      }

      uint64_t v25 = v21 + v20;
      uint64_t v26 = *(void *)(v24 + 16);
      swift_release();
      uint64_t v27 = v25 - 32;
      if (v25 - 32 == v26)
      {
        id v28 = (void *)swift_dynamicCastClass();
        uint64_t v12 = v49;
        if (!v28)
        {
          swift_bridgeObjectRelease();
          id v28 = (void *)MEMORY[0x18961AFE8];
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        id v28 = (void *)MEMORY[0x18961AFE8];
        uint64_t v12 = v49;
        if (v18 != v22)
        {
          if (v27 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C70F8);
            id v28 = (void *)swift_allocObject();
            size_t v31 = _swift_stdlib_malloc_size(v28);
            id v28[2] = v27;
            v28[3] = 2 * v31 - 64;
          }

          memcpy(v28 + 4, (const void *)(v10 + v18 + 32), v25 - 32);
        }
      }

      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v50 = v12;
      unint64_t v30 = *(void *)(v12 + 16);
      unint64_t v29 = *(void *)(v12 + 24);
      if (v30 >= v29 >> 1)
      {
        uint64_t result = (uint64_t)sub_18762C4D4((void *)(v29 > 1), v30 + 1, 1);
        uint64_t v12 = v50;
      }

      *(void *)(v12 + 16) = v30 + 1;
      *(void *)(v12 + 8 * v30 + 32) = v28;
      v19 += 16LL;
      v20 -= 16LL;
      v18 += 16LL;
      --v16;
      uint64_t v13 = v48;
      if (!v16)
      {
        goto LABEL_72;
      }
    }
  }

  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_18765C140(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }

  BOOL v2 = __OFSUB__(result, 1LL);
  if (result >= 1)
  {
    BOOL v2 = __OFSUB__(a2, 1LL);
    if (a2 >= 1) {
      return (a2 - 1) / (unint64_t)result + 1;
    }
  }

  if ((a2 & result) < 0 == v2)
  {
    if (result != -1 || a2 != 0x8000000000000000LL) {
      return a2 / result;
    }
    goto LABEL_13;
  }

  uint64_t v3 = (a2 + 1) / result;
  uint64_t result = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  return result;
}

BOOL static PIR.PirAlgorithm.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PIR.PirAlgorithm.hash(into:)()
{
  return sub_18769A760();
}

uint64_t PIR.PirAlgorithm.hashValue.getter()
{
  return sub_18769A778();
}

void PIR.PirParams.encryptionParams.getter(_BYTE *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

void PIR.PirParams.algorithm.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

uint64_t PIR.PirParams.entriesCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PIR.PirParams.entrySize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PIR.PirParams.dimensions.getter()
{
  return sub_18769A52C();
}

uint64_t PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)@<X0>( char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10)
{
  char v15 = *a1;
  char v30 = a1[1];
  char v28 = *a2;
  uint64_t result = cche_encryption_params_plaintext_modulus();
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unint64_t v17 = result;
  uint64_t result = cche_encryption_params_polynomial_degree();
  if ((unint64_t)(a4 - 0x1000000000000000LL) >> 61 != 7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v18 = (__clz(v17) ^ 0x3F) * (unint64_t)result;
  uint64_t v19 = 8 * a4;
  if (v18 < 8 * a4)
  {
    uint64_t v20 = 1LL;
    goto LABEL_7;
  }

  if (!v19)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }

  uint64_t v20 = v18 / v19;
LABEL_7:
  uint64_t result = sub_18765C140(v20, a3);
  uint64_t v21 = *(void *)(a5 + 16);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)(a5 + 32);
    uint64_t v23 = 1LL;
    do
    {
      uint64_t v24 = *v22++;
      uint64_t v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63)
      {
        __break(1u);
        goto LABEL_23;
      }

      uint64_t v23 = v25;
      --v21;
    }

    while (v21);
    if (v25 >= result) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  if (result > 1)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v27 = 5;
    *(_BYTE *)(v27 + 4) = 1;
    return swift_willThrow();
  }

unint64_t sub_18765C448()
{
  unint64_t result = qword_18C6DA078;
  if (!qword_18C6DA078)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for PIR.PirAlgorithm,  &type metadata for PIR.PirAlgorithm);
    atomic_store(result, (unint64_t *)&qword_18C6DA078);
  }

  return result;
}

uint64_t _s12PirAlgorithmOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_18765C4D8 + 4 * byte_18769D535[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18765C50C + 4 * byte_18769D530[v4]))();
}

uint64_t sub_18765C50C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18765C514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18765C51CLL);
  }
  return result;
}

uint64_t sub_18765C528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18765C530LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18765C534(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18765C53C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PIR.PirAlgorithm()
{
  return &type metadata for PIR.PirAlgorithm;
}

uint64_t _s9PirParamsVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9PirParamsVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  sub_18769A52C();
  return a1;
}

uint64_t _s9PirParamsVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9PirParamsVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t _s9PirParamsVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9PirParamsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 58) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PIR.PirParams()
{
  return &type metadata for PIR.PirParams;
}

char *sub_18765C780(char *result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x18961AFE8];
  if (!v3) {
    return (char *)v4;
  }
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = 1LL;
  do
  {
    uint64_t v8 = *(void *)(v2 + 8 * v6 + 32);
    if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
    {
      __break(1u);
      goto LABEL_20;
    }

    v7 *= v8;
    ++v6;
  }

  while (v3 != v6);
  uint64_t v16 = MEMORY[0x18961AFE8];
  sub_18769A52C();
  __n128 result = sub_18762C500(0LL, v3, 0);
  uint64_t v9 = 0LL;
  uint64_t v4 = v16;
  while (1)
  {
    uint64_t v10 = *(void *)(v2 + 8 * v9 + 32);
    if (!v10) {
      break;
    }
    if (v7 == 0x8000000000000000LL && v10 == -1) {
      goto LABEL_24;
    }
    v7 /= v10;
    if (!v7) {
      goto LABEL_21;
    }
    if (v5 == 0x8000000000000000LL && v7 == -1) {
      goto LABEL_25;
    }
    uint64_t v11 = v5 / v7;
    uint64_t v12 = v5 / v7 * v7;
    BOOL v13 = __OFSUB__(v5, v12);
    v5 %= v7;
    if (v13) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v16 + 16);
    unint64_t v14 = *(void *)(v16 + 24);
    if (v15 >= v14 >> 1) {
      __n128 result = sub_18762C500((char *)(v14 > 1), v15 + 1, 1);
    }
    ++v9;
    *(void *)(v16 + 16) = v15 + 1;
    *(void *)(v16 + 8 * v15 + 32) = v11;
    if (v3 == v9)
    {
      swift_bridgeObjectRelease();
      return (char *)v4;
    }
  }

uint64_t sub_18765C8FC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }

    else
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_18765CA54(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(_DWORD *)(v3 + 80);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = v6 + v4;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + ((v6 + v5 + ((v6 + v5 + ((v6 + v5 + ((v5 + 8) & ~v5)) & ~v5)) & ~v5)) & ~v5)) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = v13 + v10;
  unint64_t v15 = ((v13 + v10 + v12) & ~v10) + v13;
  if ((v10 | (unint64_t)v4) > 7 || ((*(_DWORD *)(v9 + 80) | v4) & 0x100000) != 0 || v15 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    uint64_t v33 = v18 + (((v10 | v4) & 0xF8 ^ 0x1F8) & ((v10 | v4) + 16));
    swift_retain();
  }

  else
  {
    unint64_t v19 = ~(unint64_t)v4;
    uint64_t v20 = ~v10;
    *a1 = *a2;
    uint64_t v21 = (char *)a2 + v5;
    uint64_t v22 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v23 = (unint64_t)(v21 + 8) & v19;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v36 = v8;
    v24(v22, v23, AssociatedTypeWitness);
    unint64_t v25 = (v7 + v22) & v19;
    unint64_t v26 = (v7 + v23) & v19;
    v24(v25, v26, AssociatedTypeWitness);
    unint64_t v27 = (v7 + v25) & v19;
    unint64_t v28 = (v7 + v26) & v19;
    v24(v27, v28, AssociatedTypeWitness);
    unint64_t v29 = (v7 + v27) & v19;
    unint64_t v30 = (v7 + v28) & v19;
    v24(v29, v30, AssociatedTypeWitness);
    unint64_t v31 = (v11 + v29) & v20;
    uint64_t v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v32(v31, (v11 + v30) & v20, v36);
    v32((v14 + v31) & v20, (v14 + ((v11 + v30) & v20)) & v20, v36);
    return a1;
  }

  return (uint64_t *)v33;
}

uint64_t sub_18765CCEC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + v4 + 8) & ~v4;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v5, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v8 = (v7 + v4 + v5) & ~v4;
  v6(v8, AssociatedTypeWitness);
  uint64_t v9 = (v7 + v4 + v8) & ~v4;
  v6(v9, AssociatedTypeWitness);
  uint64_t v10 = (v7 + v4 + v9) & ~v4;
  v6(v10, AssociatedTypeWitness);
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (v7 + v13 + v10) & ~v13;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v16(v14, v11);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)((*(void *)(v12 + 64) + v13 + v14) & ~v13, v11);
}

void *sub_18765CE98(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v21(v19, v20, v16);
  v21((*(void *)(v17 + 64) + v18 + v19) & ~v18, (*(void *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

void *sub_18765D090(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
  v21(v19, v20, v16);
  v21((*(void *)(v17 + 64) + v18 + v19) & ~v18, (*(void *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

void *sub_18765D288(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v21(v19, v20, v16);
  v21((*(void *)(v17 + 64) + v18 + v19) & ~v18, (*(void *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

void *sub_18765D480(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  uint64_t v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v9 + v6 + v10) & ~v6;
  uint64_t v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v9 + v6 + v12) & ~v6;
  uint64_t v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v9 + v18 + v14) & ~v18;
  uint64_t v20 = (v9 + v18 + v15) & ~v18;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v21(v19, v20, v16);
  v21((*(void *)(v17 + 64) + v18 + v19) & ~v18, (*(void *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

uint64_t sub_18765D678(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = v7;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = v13 + v12;
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = v13 + v15;
  if (a2 <= v10) {
    goto LABEL_23;
  }
  uint64_t v17 = ((*(void *)(v8 + 64)
        + v15
        + ((v16 + ((v14 + ((v14 + ((v14 + ((v12 + 8) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v15)) & ~v15)
      + *(void *)(v8 + 64);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v20 = ((a2 - v10 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      int v19 = *(_DWORD *)(a1 + v17);
      if (!v19) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v20 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v20 < 2)
    {
LABEL_23:
      if (v10)
      {
        uint64_t v23 = (a1 + v12 + 8) & ~v12;
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))( (v16 + ((v14 + ((v14 + ((v14 + v23) & ~v12)) & ~v12)) & ~v12)) & ~v15,  v9,  v11);
        }
      }

      return 0LL;
    }
  }

  int v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17)) {
    goto LABEL_23;
  }
LABEL_14:
  int v21 = (v19 - 1) << v18;
  if ((_DWORD)v17)
  {
    else {
      int v22 = 4;
    }
    __asm { BR              X12 }
  }

  return v10 + v21 + 1;
}

void sub_18765D920(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_checkMetadataState() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  size_t v13 = ((*(void *)(v8 + 64)
        + v12
        + ((v11 + v12 + ((v11 + v10 + ((v11 + v10 + ((v11 + v10 + ((v10 + 8) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12)
      + *(void *)(v8 + 64);
  if (a3 <= v9)
  {
    unsigned int v14 = 0u;
  }

  else if (v13 <= 3)
  {
    unsigned int v16 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      unsigned int v14 = 4u;
    }

    else if (v16 >= 0x100)
    {
      unsigned int v14 = 2;
    }

    else
    {
      unsigned int v14 = v16 > 1;
    }
  }

  else
  {
    unsigned int v14 = 1u;
  }

  if (v9 < a2)
  {
    unsigned int v15 = ~v9 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        int v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }

        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }

        else
        {
          *a1 = v17;
        }
      }
    }

    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t _s6ClientVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ClientVMn_0);
}

uint64_t *sub_18765DC58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_187623A28(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_18769A01C();
    size_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    unsigned int v15 = (_DWORD *)((char *)v4 + v14);
    unsigned int v16 = (_DWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      *unsigned int v15 = *v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      *((_WORD *)v15 + 8) = *((_WORD *)v16 + 8);
      v15[5] = v16[5];
      *((_BYTE *)v15 + 24) = *((_BYTE *)v16 + 24);
      uint64_t v38 = v13;
      uint64_t v21 = *((void *)v16 + 4);
      unint64_t v22 = *((void *)v16 + 5);
      sub_187623A28(v21, v22);
      *((void *)v15 + 4) = v21;
      *((void *)v15 + 5) = v22;
      *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
      uint64_t v23 = *((void *)v16 + 7);
      unint64_t v24 = *((void *)v16 + 8);
      sub_187623A28(v23, v24);
      *((void *)v15 + 7) = v23;
      *((void *)v15 + 8) = v24;
      size_t v13 = v38;
      v38((char *)v15 + *(int *)(v17 + 48), (char *)v16 + *(int *)(v17 + 48), v12);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v25 = a3[8];
    unint64_t v26 = (uint64_t *)((char *)v4 + v25);
    unint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      uint64_t v31 = *v27;
      unint64_t v32 = v27[1];
      sub_187623A28(*v27, v32);
      *unint64_t v26 = v31;
      v26[1] = v32;
      uint64_t v33 = v27[2];
      unint64_t v34 = v27[3];
      sub_187623A28(v33, v34);
      v26[2] = v33;
      _OWORD v26[3] = v34;
      uint64_t v35 = v27[4];
      unint64_t v36 = v27[5];
      sub_187623A28(v35, v36);
      v26[4] = v35;
      v26[5] = v36;
      v13((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return v4;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(uint64_t a1)
{
  return sub_18765FD48(a1, (uint64_t *)&unk_18C6DA130);
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox( uint64_t a1)
{
  return sub_18765FD48(a1, (uint64_t *)&unk_18C6DA140);
}

uint64_t sub_18765DEEC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_18769A01C();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    sub_187623C58(*(void *)(v6 + 32), *(void *)(v6 + 40));
    sub_187623C58(*(void *)(v6 + 56), *(void *)(v6 + 64));
    v11(v6 + *(int *)(v7 + 48), v5);
  }

  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    sub_187623C58(*(void *)v8, *(void *)(v8 + 8));
    sub_187623C58(*(void *)(v8 + 16), *(void *)(v8 + 24));
    sub_187623C58(*(void *)(v8 + 32), *(void *)(v8 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 28), v5);
  }

  return result;
}

uint64_t sub_18765E020(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_187623A28(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_18769A01C();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (_DWORD *)(a1 + v13);
  unsigned int v15 = (_DWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    *uint64_t v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
    v14[5] = v15[5];
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
    unint64_t v36 = v12;
    uint64_t v19 = *((void *)v15 + 4);
    unint64_t v20 = *((void *)v15 + 5);
    sub_187623A28(v19, v20);
    *((void *)v14 + 4) = v19;
    *((void *)v14 + 5) = v20;
    *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
    uint64_t v21 = *((void *)v15 + 7);
    unint64_t v22 = *((void *)v15 + 8);
    sub_187623A28(v21, v22);
    *((void *)v14 + 7) = v21;
    *((void *)v14 + 8) = v22;
    uint64_t v12 = v36;
    v36((uint64_t)v14 + *(int *)(v16 + 48), (uint64_t)v15 + *(int *)(v16 + 48), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v23 = a3[8];
  unint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    uint64_t v29 = *v25;
    unint64_t v30 = v25[1];
    sub_187623A28(*v25, v30);
    void *v24 = v29;
    v24[1] = v30;
    uint64_t v31 = v25[2];
    unint64_t v32 = v25[3];
    sub_187623A28(v31, v32);
    v24[2] = v31;
    v24[3] = v32;
    uint64_t v33 = v25[4];
    unint64_t v34 = v25[5];
    sub_187623A28(v33, v34);
    v24[4] = v33;
    v24[5] = v34;
    v12((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v25 + *(int *)(v26 + 28), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

uint64_t sub_18765E260(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_187623A28(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_187623C58(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_18769A01C();
  uint64_t v66 = *(void *)(v13 - 8);
  id v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 24);
  v65(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
      uint64_t v22 = *(void *)(v16 + 8);
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
      *(void *)(v15 + 8) = v22;
      *(_BYTE *)(v15 + 17) = *(_BYTE *)(v16 + 17);
      *(_DWORD *)(v15 + 20) = *(_DWORD *)(v16 + 20);
      *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
      uint64_t v23 = *(void *)(v16 + 32);
      unint64_t v24 = *(void *)(v16 + 40);
      sub_187623A28(v23, v24);
      *(void *)(v15 + 32) = v23;
      *(void *)(v15 + 40) = v24;
      *(_BYTE *)(v15 + 48) = *(_BYTE *)(v16 + 48);
      uint64_t v25 = *(void *)(v16 + 56);
      unint64_t v26 = *(void *)(v16 + 64);
      sub_187623A28(v25, v26);
      *(void *)(v15 + 56) = v25;
      *(void *)(v15 + 64) = v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))( v15 + *(int *)(v17 + 48),  v16 + *(int *)(v17 + 48),  v13);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_18765E614(v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
    memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v44 = *(void *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(void *)(v15 + 8) = v44;
  *(_BYTE *)(v15 + 17) = *(_BYTE *)(v16 + 17);
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v16 + 20);
  *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
  uint64_t v45 = *(void *)(v16 + 32);
  unint64_t v46 = *(void *)(v16 + 40);
  sub_187623A28(v45, v46);
  uint64_t v47 = *(void *)(v15 + 32);
  unint64_t v48 = *(void *)(v15 + 40);
  *(void *)(v15 + 32) = v45;
  *(void *)(v15 + 40) = v46;
  sub_187623C58(v47, v48);
  *(_BYTE *)(v15 + 48) = *(_BYTE *)(v16 + 48);
  uint64_t v49 = *(void *)(v16 + 56);
  unint64_t v50 = *(void *)(v16 + 64);
  sub_187623A28(v49, v50);
  uint64_t v51 = *(void *)(v15 + 56);
  unint64_t v52 = *(void *)(v15 + 64);
  *(void *)(v15 + 56) = v49;
  *(void *)(v15 + 64) = v50;
  sub_187623C58(v51, v52);
  v65(v15 + *(int *)(v17 + 48), v16 + *(int *)(v17 + 48), v13);
LABEL_7:
  uint64_t v28 = a3[8];
  uint64_t v29 = (uint64_t *)(a1 + v28);
  unint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (!v35)
    {
      uint64_t v53 = *v30;
      unint64_t v54 = v30[1];
      sub_187623A28(*v30, v54);
      uint64_t v55 = *v29;
      unint64_t v56 = v29[1];
      *uint64_t v29 = v53;
      v29[1] = v54;
      sub_187623C58(v55, v56);
      uint64_t v57 = v30[2];
      unint64_t v58 = v30[3];
      sub_187623A28(v57, v58);
      uint64_t v59 = v29[2];
      unint64_t v60 = v29[3];
      v29[2] = v57;
      v29[3] = v58;
      sub_187623C58(v59, v60);
      uint64_t v61 = v30[4];
      unint64_t v62 = v30[5];
      sub_187623A28(v61, v62);
      uint64_t v63 = v29[4];
      unint64_t v64 = v29[5];
      v29[4] = v61;
      v29[5] = v62;
      sub_187623C58(v63, v64);
      v65((uint64_t)v29 + *(int *)(v31 + 28), (uint64_t)v30 + *(int *)(v31 + 28), v13);
      return a1;
    }

    sub_18765E614( (uint64_t)v29,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_12;
  }

  if (v35)
  {
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
    memcpy(v29, v30, *(void *)(*(void *)(v42 - 8) + 64LL));
    return a1;
  }

  uint64_t v36 = *v30;
  unint64_t v37 = v30[1];
  sub_187623A28(*v30, v37);
  *uint64_t v29 = v36;
  v29[1] = v37;
  uint64_t v38 = v30[2];
  unint64_t v39 = v30[3];
  sub_187623A28(v38, v39);
  v29[2] = v38;
  v29[3] = v39;
  uint64_t v40 = v30[4];
  unint64_t v41 = v30[5];
  sub_187623A28(v40, v41);
  v29[4] = v40;
  v29[5] = v41;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))( (char *)v29 + *(int *)(v31 + 28),  (char *)v30 + *(int *)(v31 + 28),  v13);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  return a1;
}

uint64_t sub_18765E614(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_18765E650(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_18769A01C();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_DWORD *)(a1 + v11);
  uint64_t v13 = (_DWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
    v12[5] = v13[5];
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)(v12 + 14) = *(_OWORD *)(v13 + 14);
    v10((char *)v12 + *(int *)(v14 + 48), (char *)v13 + *(int *)(v14 + 48), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = a3[8];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    __int128 v23 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v23;
    void v18[2] = v19[2];
    v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  return a1;
}

uint64_t sub_18765E830(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_187623C58(v6, v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_18769A01C();
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40);
  v42(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(_WORD *)(v13 + 16) = *(_WORD *)(v14 + 16);
      *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
      *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))( v13 + *(int *)(v15 + 48),  v14 + *(int *)(v15 + 48),  v11);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_18765E614(v13, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_BYTE *)(v13 + 17) = *(_BYTE *)(v14 + 17);
  *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
  *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
  uint64_t v32 = *(void *)(v13 + 32);
  unint64_t v33 = *(void *)(v13 + 40);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  sub_187623C58(v32, v33);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  uint64_t v34 = *(void *)(v13 + 56);
  unint64_t v35 = *(void *)(v13 + 64);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  sub_187623C58(v34, v35);
  v42(v13 + *(int *)(v15 + 48), v14 + *(int *)(v15 + 48), v11);
LABEL_7:
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  __int128 v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v36 = *v22;
      unint64_t v37 = v22[1];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      sub_187623C58(v36, v37);
      uint64_t v38 = v22[2];
      unint64_t v39 = v22[3];
      *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
      sub_187623C58(v38, v39);
      uint64_t v40 = v22[4];
      unint64_t v41 = v22[5];
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      sub_187623C58(v40, v41);
      v42((uint64_t)v22 + *(int *)(v24 + 28), (uint64_t)v23 + *(int *)(v24 + 28), v11);
      return a1;
    }

    sub_18765E614( (uint64_t)v22,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_12;
  }

  if (v28)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
    memcpy(v22, v23, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  __int128 v29 = *((_OWORD *)v23 + 1);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v29;
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))( (char *)v22 + *(int *)(v24 + 28),  (char *)v23 + *(int *)(v24 + 28),  v11);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

uint64_t sub_18765EB54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765EB60(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_18769A01C();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_18765EC38()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765EC44(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v8 = sub_18769A01C();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization( uint64_t a1)
{
  return sub_18765FD48(a1, (uint64_t *)&unk_18C6DA110);
}

void sub_18765ED28()
{
  if (v0 <= 0x3F)
  {
    sub_18765EE00( 319LL,  &qword_18C6DA120,  (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    if (v1 <= 0x3F)
    {
      sub_18765EE00( 319LL,  &qword_18C6DA128,  (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }

void sub_18765EE00(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255LL);
    unint64_t v4 = sub_18769A5BC();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }

uint64_t sub_18765EE4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v15 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v7 = a2[4];
    unint64_t v8 = a2[5];
    sub_187623A28(v7, v8);
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v8;
    *(_BYTE *)(v4 + 48) = *((_BYTE *)a2 + 48);
    uint64_t v9 = a2[7];
    unint64_t v10 = a2[8];
    sub_187623A28(v9, v10);
    *(void *)(v4 + 56) = v9;
    *(void *)(v4 + 64) = v10;
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = sub_18769A01C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  }

  return v4;
}

uint64_t sub_18765EF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_18765EF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  sub_187623A28(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 64);
  sub_187623A28(v8, v9);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_18765F044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_187623A28(v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  sub_187623C58(v9, v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  unint64_t v12 = *(void *)(a2 + 64);
  sub_187623A28(v11, v12);
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  sub_187623C58(v13, v14);
  uint64_t v15 = *(int *)(a3 + 48);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  return a1;
}

uint64_t sub_18765F118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_18765F1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_187623C58(v6, v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_187623C58(v8, v9);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_18765F264()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765F270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 48),  a2,  v10);
  }

uint64_t sub_18765F2EC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765F2F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 17) = a2 + 1;
  }

  else
  {
    uint64_t v7 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 48),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_18765F368()
{
  uint64_t result = sub_18769A01C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_18765F404(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_187623A28(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_187623A28(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_187623A28(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    unint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_18769A01C();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return a1;
}

uint64_t sub_18765F4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_18765F52C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_187623A28(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_187623A28(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_187623A28(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_18769A01C();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  return a1;
}

uint64_t *sub_18765F5CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_187623A28(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_187623C58(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_187623A28(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_187623C58(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_187623A28(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_187623C58(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  int v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_18769A01C();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  return a1;
}

_OWORD *sub_18765F684(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_18769A01C();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_18765F6E8(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_187623C58(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_187623C58(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_187623C58(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_18769A01C();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_18765F778()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765F784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_18765F80C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18765F818(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = sub_18769A01C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_18765F894()
{
  uint64_t result = sub_18769A01C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *sub_18765F90C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_187623A28(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_18769A01C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  }

  return v4;
}

uint64_t sub_18765F9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_18765FA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_187623A28(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_18765FA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_187623A28(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  sub_187623C58(v8, v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_18765FB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_18765FB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_187623C58(v6, v7);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_18765FC18()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765FC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 24) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t sub_18765FCAC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18765FCB8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(uint64_t a1)
{
  return sub_18765FD48(a1, qword_18C4C73F8);
}

uint64_t sub_18765FD48(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_18765FD7C()
{
  uint64_t result = sub_18769A01C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void sub_18765FE00(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_18765FE10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_18765FE28()
{
  if ((v0[8] & 1) != 0) {
    return 0LL;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_18765FE40@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0LL;
  *(void *)a2 = *result;
  char v3 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_18765FE5C(void *a1@<X8>)
{
  if ((*(_BYTE *)(v1 + 8) & 1) != 0) {
    *a1 = 0LL;
  }
  else {
    *a1 = *(void *)v1;
  }
}

uint64_t sub_18765FE78()
{
  return sub_18769A778();
}

uint64_t sub_18765FEE0()
{
  return sub_18769A058();
}

uint64_t sub_18765FF18()
{
  return sub_18769A778();
}

BOOL sub_18765FF7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((a1[1] & 1) != 0) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((_BYTE *)a2 + 8)) {
    uint64_t v2 = 0LL;
  }
  return v3 == v2;
}

void sub_18765FFAC()
{
  qword_18C6DEE18 = (uint64_t)&unk_18A080170;
}

uint64_t sub_18765FFC0@<X0>(void *a1@<X8>)
{
  if (qword_18C6D9788 != -1) {
    swift_once();
  }
  *a1 = qword_18C6DEE18;
  return sub_18769A52C();
}

uint64_t sub_187660010()
{
  uint64_t v0 = sub_18769A160();
  __swift_allocate_value_buffer(v0, qword_18C6DEE20);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6DEE20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18769D650;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)(v5 + v4) = 1LL;
  *(void *)unint64_t v7 = "version";
  *(void *)(v7 + 8) = 7LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102D0];
  uint64_t v9 = sub_18769A148();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = v6 + v3 + *(int *)(v1 + 48);
  *(void *)(v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "sharedState";
  *(void *)(v11 + 8) = 11LL;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  uint64_t v12 = (void *)(v6 + 2 * v3);
  uint64_t v13 = (char *)v12 + *(int *)(v1 + 48);
  *uint64_t v12 = 3LL;
  *(void *)uint64_t v13 = "keyToBeShared";
  *((void *)v13 + 1) = 13LL;
  v13[16] = 2;
  v10();
  uint64_t v14 = (void *)(v6 + 3 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v1 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "sealedBox";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v10();
  return sub_18769A154();
}

uint64_t sub_1876601D0()
{
  uint64_t result = sub_18769A064();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_18769A0AC();
          break;
        case 2LL:
          sub_1876602BC();
          break;
        case 3LL:
          sub_18769A094();
          break;
        case 4LL:
          sub_187660350();
          break;
        default:
          break;
      }

      uint64_t result = sub_18769A064();
    }
  }

  return result;
}

uint64_t sub_1876602BC()
{
  return sub_18769A0B8();
}

uint64_t sub_187660350()
{
  return sub_18769A0B8();
}

uint64_t sub_1876603E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
  MEMORY[0x1895F8858](v6);
  v19[2] = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  v19[1] = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  v19[0] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
  MEMORY[0x1895F8858](v9);
  unint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v16 = *v3;
  uint64_t v21 = a3;
  if (!v16 || (uint64_t result = sub_18769A130(), !v4))
  {
    uint64_t v18 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0LL);
    sub_187662420((uint64_t)v3 + *(int *)(v18 + 28), (uint64_t)v11, &qword_18C6DA100);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_18764D2EC((uint64_t)v11, &qword_18C6DA100);
      goto LABEL_6;
    }

    sub_187662464( (uint64_t)v11,  (uint64_t)v15,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    sub_187639840( &qword_18C6DA168,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState,  (uint64_t)&unk_18769D9C4);
    sub_18769A13C();
    uint64_t result = sub_18765E614( (uint64_t)v15,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    if (!v4) {
LABEL_6:
    }
      __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_18766075C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_18769C9B0;
  sub_18769A010();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

unint64_t sub_1876607F4()
{
  return 0xD000000000000040LL;
}

uint64_t sub_187660814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_187660854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_187660894())()
{
  return nullsub_1;
}

uint64_t sub_1876608A8()
{
  return sub_1876601D0();
}

uint64_t sub_1876608BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1876603E4(a1, a2, a3);
}

uint64_t sub_1876608D4()
{
  return sub_18769A04C();
}

uint64_t sub_187660928@<X0>(uint64_t a1@<X8>)
{
  return sub_187661F6C(&qword_18C6D9790, (uint64_t)qword_18C6DEE20, a1);
}

uint64_t sub_187660944()
{
  return sub_18769A0E8();
}

uint64_t sub_187660988()
{
  return sub_18769A0F4();
}

uint64_t sub_1876609E0()
{
  uint64_t result = sub_18769A490();
  qword_18C6DEE38 = 0xD000000000000040LL;
  unk_18C6DEE40 = 0x80000001876A1350LL;
  return result;
}

uint64_t sub_187660A4C()
{
  uint64_t v0 = sub_18769A160();
  __swift_allocate_value_buffer(v0, qword_18C6DEE48);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6DEE48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18769CCD0;
  uint64_t v6 = (void *)(v5 + v4);
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *uint64_t v6 = 1LL;
  *(void *)unint64_t v7 = "nonce";
  *(void *)(v7 + 8) = 5LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102D0];
  uint64_t v9 = sub_18769A148();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(void *)((char *)v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "ciphertext";
  *((void *)v11 + 1) = 10LL;
  v11[16] = 2;
  v10();
  uint64_t v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(void *)((char *)v6 + 2 * v3) = 3LL;
  *(void *)uint64_t v12 = "tag";
  *(void *)(v12 + 8) = 3LL;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_18769A154();
}

uint64_t sub_187660BDC()
{
  uint64_t result = sub_18769A064();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        sub_18769A094();
      }
      uint64_t result = sub_18769A064();
    }
  }

  return result;
}

void sub_187660C80()
{
  __asm { BR              X10 }

uint64_t sub_187660CC8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0 || (uint64_t result = sub_18769A124(), !v2)) {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_187660E2C@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_18769C9B0;
  a1[1] = xmmword_18769C9B0;
  a1[2] = xmmword_18769C9B0;
  return sub_18769A010();
}

uint64_t sub_187660E58()
{
  if (qword_18C6D9798 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6DEE38;
  sub_18769A52C();
  return v0;
}

uint64_t sub_187660EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_187660EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_187660F34())()
{
  return nullsub_1;
}

uint64_t sub_187660F48()
{
  return sub_187660BDC();
}

void sub_187660F5C()
{
}

uint64_t sub_187660F70()
{
  return sub_18769A04C();
}

uint64_t sub_187660FC0@<X0>(uint64_t a1@<X8>)
{
  return sub_187661F6C(&qword_18C6D97A0, (uint64_t)qword_18C6DEE48, a1);
}

uint64_t sub_187660FDC()
{
  return sub_18769A0E8();
}

uint64_t sub_18766101C()
{
  return sub_18769A0F4();
}

uint64_t sub_187661070()
{
  uint64_t v0 = sub_18769A160();
  __swift_allocate_value_buffer(v0, qword_18C6DEE60);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6DEE60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18769D660;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)(v5 + v4) = 1LL;
  *(void *)unint64_t v7 = "version";
  *(void *)(v7 + 8) = 7LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102D0];
  uint64_t v9 = sub_18769A148();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = v6 + v3 + *(int *)(v1 + 48);
  *(void *)(v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "ciphersuite";
  *(void *)(v11 + 8) = 11LL;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  uint64_t v12 = (void *)(v6 + 2 * v3);
  uint64_t v13 = (char *)v12 + *(int *)(v1 + 48);
  *uint64_t v12 = 3LL;
  *(void *)uint64_t v13 = "includeThreshold";
  *((void *)v13 + 1) = 16LL;
  v13[16] = 2;
  v10();
  uint64_t v14 = (void *)(v6 + 3 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v1 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "threshold";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v10();
  int v16 = (void *)(v6 + 4 * v3);
  unint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *int v16 = 5LL;
  *(void *)unint64_t v17 = "includeAuthenticatedData";
  *((void *)v17 + 1) = 24LL;
  v17[16] = 2;
  v10();
  uint64_t v18 = (void *)(v6 + 5 * v3);
  int v19 = (char *)v18 + *(int *)(v1 + 48);
  *uint64_t v18 = 6LL;
  *(void *)int v19 = "authenticatedData";
  *((void *)v19 + 1) = 17LL;
  v19[16] = 2;
  v10();
  uint64_t v20 = (void *)(v6 + 6 * v3);
  uint64_t v21 = (char *)v20 + *(int *)(v1 + 48);
  *uint64_t v20 = 7LL;
  *(void *)uint64_t v21 = "insecureToChangeIncludeMessageEntropy";
  *((void *)v21 + 1) = 37LL;
  v21[16] = 2;
  v10();
  uint64_t v22 = (void *)(v6 + 7 * v3);
  __int128 v23 = (char *)v22 + *(int *)(v1 + 48);
  *uint64_t v22 = 8LL;
  *(void *)__int128 v23 = "shamirGeneratorState";
  *((void *)v23 + 1) = 20LL;
  v23[16] = 2;
  v10();
  return sub_18769A154();
}

uint64_t sub_187661318()
{
  uint64_t result = sub_18769A064();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
        case 4LL:
          sub_18769A0AC();
          break;
        case 2LL:
          sub_187662EE4();
          sub_18769A07C();
          break;
        case 3LL:
        case 5LL:
        case 7LL:
          sub_18769A070();
          break;
        case 6LL:
        case 8LL:
          sub_18769A094();
          break;
        default:
          break;
      }

      uint64_t result = sub_18769A064();
    }
  }

  return result;
}

uint64_t sub_187661498()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_18769A130(), !v1))
  {
    if ((*(_BYTE *)(v0 + 16) & 1) != 0 || !*(void *)(v0 + 8) || (sub_187662EE4(), uint64_t result = sub_18769A118(), !v1))
    {
      if (*(_BYTE *)(v0 + 17) != 1 || (uint64_t result = sub_18769A10C(), !v1))
      {
        if (!*(_DWORD *)(v0 + 20) || (uint64_t result = sub_18769A130(), !v1))
        {
          if (*(_BYTE *)(v0 + 24) != 1 || (uint64_t result = sub_18769A10C(), !v1)) {
            __asm { BR              X10 }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1876616E8@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_18769C9B0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_18769C9B0;
  return sub_18769A010();
}

unint64_t sub_187661730()
{
  return 0xD000000000000035LL;
}

uint64_t sub_18766174C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_18766178C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1876617CC())()
{
  return nullsub_1;
}

uint64_t sub_1876617E0()
{
  return sub_187661318();
}

uint64_t sub_1876617F4()
{
  return sub_187661498();
}

uint64_t sub_187661808()
{
  return sub_18769A04C();
}

uint64_t sub_187661858@<X0>(uint64_t a1@<X8>)
{
  return sub_187661F6C(&qword_18C6D97A8, (uint64_t)qword_18C6DEE60, a1);
}

uint64_t sub_187661874()
{
  return sub_18769A0E8();
}

uint64_t sub_1876618B4()
{
  return sub_18769A0F4();
}

uint64_t sub_187661908()
{
  uint64_t v0 = sub_18769A160();
  __swift_allocate_value_buffer(v0, qword_18C6DEE78);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6DEE78);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18769C700;
  uint64_t v5 = v4 + v3 + *(int *)(v1 + 48);
  *(void *)(v4 + v3) = 0LL;
  *(void *)uint64_t v5 = "AES_GCM_256_128";
  *(void *)(v5 + 8) = 15LL;
  *(_BYTE *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1896102D0];
  uint64_t v7 = sub_18769A148();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL))(v5, v6, v7);
  return sub_18769A154();
}

uint64_t sub_187661A08@<X0>(uint64_t a1@<X8>)
{
  return sub_187661F6C(&qword_18C6D97B0, (uint64_t)qword_18C6DEE78, a1);
}

uint64_t sub_187661A24()
{
  uint64_t v0 = sub_18769A160();
  __swift_allocate_value_buffer(v0, qword_18C6DEE90);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6DEE90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18769D650;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)(v5 + v4) = 1LL;
  *(void *)unint64_t v7 = "version";
  *(void *)(v7 + 8) = 7LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102D0];
  uint64_t v9 = sub_18769A148();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = v6 + v3 + *(int *)(v1 + 48);
  *(void *)(v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "prime";
  *(void *)(v11 + 8) = 5LL;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  uint64_t v12 = (void *)(v6 + 2 * v3);
  uint64_t v13 = (char *)v12 + *(int *)(v1 + 48);
  *uint64_t v12 = 3LL;
  *(void *)uint64_t v13 = "threshold";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v10();
  uint64_t v14 = (void *)(v6 + 3 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v1 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "shamirGeneratorState";
  *((void *)v15 + 1) = 20LL;
  v15[16] = 2;
  v10();
  return sub_18769A154();
}

uint64_t sub_187661BE4()
{
  uint64_t result = sub_18769A064();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
        case 2LL:
        case 3LL:
          sub_18769A0AC();
          break;
        case 4LL:
          sub_18769A094();
          break;
        default:
          break;
      }

      uint64_t result = sub_18769A064();
    }
  }

  return result;
}

uint64_t sub_187661CB8()
{
  if (!*v0 || (uint64_t result = sub_18769A130(), !v1))
  {
    if (!v0[1] || (uint64_t result = sub_18769A130(), !v1))
    {
      if (!v0[2] || (uint64_t result = sub_18769A130(), !v1)) {
        __asm { BR              X10 }
      }
    }
  }

  return result;
}

uint64_t sub_187661DF8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_18769C9B0;
  return sub_18769A010();
}

unint64_t sub_187661E28()
{
  return 0xD000000000000038LL;
}

uint64_t sub_187661E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_187661E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_187661EC4())()
{
  return nullsub_1;
}

uint64_t sub_187661ED8()
{
  return sub_187661BE4();
}

uint64_t sub_187661EEC()
{
  return sub_187661CB8();
}

uint64_t sub_187661F00()
{
  return sub_18769A04C();
}

uint64_t sub_187661F50@<X0>(uint64_t a1@<X8>)
{
  return sub_187661F6C(&qword_18C6D97B8, (uint64_t)qword_18C6DEE90, a1);
}

uint64_t sub_187661F6C@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = sub_18769A160();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a3, v6, v5);
}

uint64_t sub_187661FD8()
{
  return sub_18769A0E8();
}

uint64_t sub_187662018()
{
  return sub_18769A778();
}

uint64_t sub_18766206C()
{
  return sub_18769A0F4();
}

uint64_t sub_1876620BC()
{
  return sub_18769A778();
}

uint64_t sub_187662110()
{
  return sub_187639840( &qword_18C6DA150,  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization,  (uint64_t)&unk_18769D7BC);
}

uint64_t sub_18766213C()
{
  return sub_187639840( &qword_18C4C7188,  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization,  (uint64_t)&unk_18769DD44);
}

uint64_t sub_187662168()
{
  return sub_187639840( &qword_18C6DA158,  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization,  (uint64_t)&unk_18769D7E4);
}

uint64_t sub_187662194()
{
  return sub_187639840( &qword_18C6DA160,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState,  (uint64_t)&unk_18769D8D4);
}

uint64_t sub_1876621C0()
{
  return sub_187639840( &qword_18C6DA168,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState,  (uint64_t)&unk_18769D9C4);
}

uint64_t sub_1876621EC()
{
  return sub_187639840( &qword_18C6DA170,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState,  (uint64_t)&unk_18769D8FC);
}

uint64_t sub_187662218()
{
  return sub_187639840( &qword_18C6DA178,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState,  (uint64_t)&unk_18769D93C);
}

uint64_t sub_187662244()
{
  return sub_187639840( &qword_18C6DA180,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox,  (uint64_t)&unk_18769DA3C);
}

uint64_t sub_187662270()
{
  return sub_187639840( &qword_18C6DA188,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox,  (uint64_t)&unk_18769DB2C);
}

uint64_t sub_18766229C()
{
  return sub_187639840( &qword_18C6DA190,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox,  (uint64_t)&unk_18769DA64);
}

uint64_t sub_1876622C8()
{
  return sub_187639840( &qword_18C6DA198,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox,  (uint64_t)&unk_18769DAA4);
}

uint64_t sub_1876622F4()
{
  return sub_187639840( &qword_18C6DA1A0,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization,  (uint64_t)&unk_18769DBA4);
}

uint64_t sub_187662320()
{
  return sub_187639840( &qword_18C6DA1A8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization,  (uint64_t)&unk_18769DCCC);
}

uint64_t sub_18766234C()
{
  return sub_187639840( &qword_18C6DA1B0,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization,  (uint64_t)&unk_18769DBCC);
}

unint64_t sub_18766237C()
{
  unint64_t result = qword_18C6DA1B8;
  if (!qword_18C6DA1B8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6DA1C0);
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6DA1B8);
  }

  return result;
}

uint64_t sub_1876623C8()
{
  return sub_187639840( &qword_18C6DA1C8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization,  (uint64_t)&unk_18769DC0C);
}

uint64_t sub_1876623F4()
{
  return sub_187639840( qword_18C4C7440,  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization,  (uint64_t)&unk_18769D824);
}

uint64_t sub_187662420(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_187662464(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }

  return a2;
}

uint64_t sub_187662500(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_18769A01C();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v73 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v72 = (char *)&v65 - v7;
  uint64_t v80 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v77 = *(void *)(v80 - 8);
  MEMORY[0x1895F8858](v80);
  uint64_t v71 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1F0);
  MEMORY[0x1895F8858](v9);
  uint64_t v81 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v76 = (uint64_t *)((char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v78 = (uint64_t)&v65 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v79 = (uint64_t)&v65 - v16;
  uint64_t v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v82 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1F8);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
  uint64_t v24 = MEMORY[0x1895F8858](v23);
  uint64_t v25 = MEMORY[0x1895F8858](v24);
  int v27 = (char *)&v65 - v26;
  MEMORY[0x1895F8858](v25);
  uint64_t v30 = (char *)&v65 - v29;
  if (*a1 != *a2) {
    goto LABEL_19;
  }
  uint64_t v70 = v28;
  uint64_t v66 = v9;
  uint64_t v31 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0LL);
  uint64_t v32 = *(int *)(v31 + 28);
  uint64_t v68 = a1;
  sub_187662420((uint64_t)a1 + v32, (uint64_t)v30, &qword_18C6DA100);
  uint64_t v67 = v31;
  uint64_t v33 = *(int *)(v31 + 28);
  uint64_t v69 = a2;
  sub_187662420((uint64_t)a2 + v33, (uint64_t)v27, &qword_18C6DA100);
  uint64_t v34 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_187662420((uint64_t)v30, (uint64_t)v22, &qword_18C6DA100);
  sub_187662420((uint64_t)v27, v34, &qword_18C6DA100);
  unint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v35((uint64_t)v22, 1LL, v17) == 1)
  {
    sub_18764D2EC((uint64_t)v27, &qword_18C6DA100);
    sub_18764D2EC((uint64_t)v30, &qword_18C6DA100);
    if (v35(v34, 1LL, v17) == 1)
    {
      sub_18764D2EC((uint64_t)v22, &qword_18C6DA100);
      goto LABEL_10;
    }

uint64_t sub_187662BC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_18769A01C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v20 - v9;
  sub_187638644(*a1, a1[1]);
  if ((v11 & 1) != 0 && (sub_187638644(a1[2], a1[3]), (v12 & 1) != 0) && (sub_187638644(a1[4], a1[5]), (v13 & 1) != 0))
  {
    uint64_t v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
    uint64_t v15 = (char *)a1 + *(int *)(v14 + 28);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (char *)(a2 + *(int *)(v14 + 28)), v4);
    sub_187639840(&qword_18C6DA200, (uint64_t (*)(uint64_t))MEMORY[0x189610108], MEMORY[0x189610120]);
    char v17 = sub_18769A424();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t sub_187662D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18769A01C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v20 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    goto LABEL_16;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (!v11) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }

unint64_t sub_187662EE4()
{
  unint64_t result = qword_18C6DA218;
  if (!qword_18C6DA218)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &unk_18769DE68,  &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, (unint64_t *)&qword_18C6DA218);
  }

  return result;
}

uint64_t sub_187662F28(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_18769A01C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *((_DWORD *)a2 + 1)
    && *(_DWORD *)(a1 + 8) == *((_DWORD *)a2 + 2)
    && (sub_187638644(*(void *)(a1 + 16), *(void *)(a1 + 24)), (v11 & 1) != 0))
  {
    uint64_t v12 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0LL);
    char v13 = (char *)(a1 + *(int *)(v12 + 32));
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 32)], v4);
    sub_187639840(&qword_18C6DA200, (uint64_t (*)(uint64_t))MEMORY[0x189610108], MEMORY[0x189610120]);
    char v15 = sub_18769A424();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1876630F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18766310C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite()
{
  return &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite;
}

unint64_t sub_187663140()
{
  unint64_t result = qword_18C6DA220;
  if (!qword_18C6DA220)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &unk_18769DDC8,  &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, (unint64_t *)&qword_18C6DA220);
  }

  return result;
}

unint64_t sub_187663188()
{
  unint64_t result = qword_18C6DA228;
  if (!qword_18C6DA228)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &unk_18769DDF0,  &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, (unint64_t *)&qword_18C6DA228);
  }

  return result;
}

unint64_t sub_1876631D0()
{
  unint64_t result = qword_18C6DA230[0];
  if (!qword_18C6DA230[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &unk_18769DE30,  &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, qword_18C6DA230);
  }

  return result;
}

ValueMetadata *type metadata accessor for KVAC()
{
  return &type metadata for KVAC;
}

uint64_t getEnumTagSinglePayload for KVAC.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for KVAC.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_187663300 + 4 * byte_18769DEB5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187663334 + 4 * byte_18769DEB0[v4]))();
}

uint64_t sub_187663334(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18766333C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187663344LL);
  }
  return result;
}

uint64_t sub_187663350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187663358LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18766335C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187663364(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_187663370(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KVAC.Errors()
{
  return &type metadata for KVAC.Errors;
}

uint64_t type metadata accessor for KVAC.Ciphersuite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KVAC.Ciphersuite);
}

unint64_t sub_18766339C()
{
  unint64_t result = qword_18C6DA2B8[0];
  if (!qword_18C6DA2B8[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769DF40, &type metadata for KVAC.Errors);
    atomic_store(result, qword_18C6DA2B8);
  }

  return result;
}

BOOL sub_1876633E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t type metadata accessor for CoreCryptoGroupScalar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoGroupScalar);
}

uint64_t type metadata accessor for CorecryptoCurvePoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CorecryptoCurvePoint);
}

uint64_t sub_187663410()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for CoreCryptoHash2Curve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoHash2Curve);
}

void sub_187663424()
{
}

void sub_187663434()
{
}

uint64_t sub_187663444()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_187663460()
{
}

_UNKNOWN **sub_187663470()
{
  return &off_18A082538;
}

uint64_t sub_18766347C(uint64_t a1)
{
  uint64_t result = MEMORY[0x1895AAF9C](&unk_18769E090);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1876634A8(void *a1)
{
  id v1 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v1)
  {
    int v2 = v1;
    sub_187699F98();
    uint64_t v4 = v3;

    __asm { BR              X10 }
  }

  sub_18769A67C();
  __break(1u);
  JUMPOUT(0x18766367CLL);
}

void sub_18766368C()
{
}

void sub_187663694(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_187699FBC();
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

uint64_t sub_187663724()
{
  if ((*(_BYTE *)(v5 - 65) & 1) == 0)
  {
    unsigned int v7 = *(unsigned __int8 *)(v5 - 66);
    do
    {
      uint64_t v8 = *v1;
      if (*v1 + 0x4000000000000000LL < 0) {
        goto LABEL_21;
      }
      if (v7 <= 0x9F) {
        char v9 = (v7 >> 4) | 0x30;
      }
      else {
        char v9 = (v7 >> 4) + 87;
      }
      uint64_t v10 = *v2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *int v2 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        unint64_t v12 = 2 * v8;
        if (2 * v8 < 0) {
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v10 = sub_187631FCC((uint64_t)v10);
        unint64_t v12 = 2 * v8;
        if (2 * v8 < 0)
        {
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          JUMPOUT(0x1876638ACLL);
        }
      }

      unint64_t v13 = *((void *)v10 + 2);
      if (v12 >= v13) {
        goto LABEL_22;
      }
      v10[v12 + 32] = v9;
      uint64_t v14 = *v1;
      if (*v1 + 0x4000000000000000LL < 0) {
        goto LABEL_23;
      }
      if (v14 < 0) {
        goto LABEL_24;
      }
      uint64_t v15 = (2 * v14) | 1;
      if ((v7 & 0xF) <= 9) {
        char v16 = v7 & 0xF | 0x30;
      }
      else {
        char v16 = (v7 & 0xF) + 87;
      }
      v10[v15 + 32] = v16;
      *int v2 = v10;
      *id v1 = v14 + 1;
      sub_18769A5C8();
      unsigned int v7 = *(unsigned __int8 *)(v5 - 66);
    }

    while (*(_BYTE *)(v5 - 65) != 1);
  }

  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v5 - 104) + 8LL))(v0, *(void *)(v5 - 88));
}

unint64_t sub_1876638BC()
{
  unint64_t result = qword_18C4C7190;
  if (!qword_18C4C7190)
  {
    uint64_t v1 = sub_187699FBC();
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189606D20], v1);
    atomic_store(result, (unint64_t *)&qword_18C4C7190);
  }

  return result;
}

uint64_t type metadata accessor for CoreCryptoGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoGroup);
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
}

unint64_t sub_18766392C()
{
  unint64_t result = qword_18C6DA340;
  if (!qword_18C6DA340)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769E1B0, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_18C6DA340);
  }

  return result;
}

unint64_t sub_187663970()
{
  unint64_t result = qword_18C6DA348;
  if (!qword_18C6DA348)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C6DA348);
  }

  return result;
}

void SecureEnclave.P256.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
}

void sub_1876639C8(__SecKey *a1, void (*a2)(uint64_t, uint64_t))
{
  CFDictionaryRef v4 = SecKeyCopyAttributes(a1);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    sub_187663970();
    sub_187639840(&qword_18C6DA350, (uint64_t (*)(uint64_t))sub_187663970, MEMORY[0x18961BB08]);
    uint64_t v6 = sub_18769A3F4();
    uint64_t v7 = sub_18769A430();
    uint64_t v8 = (void *)v7;
    if ((v6 & 0xC000000000000001LL) != 0)
    {
      uint64_t v9 = sub_18769A670();

      swift_bridgeObjectRelease();
      if (!v9) {
        goto LABEL_11;
      }
    }

    else
    {
      if (!*(void *)(v6 + 16) || (sub_187663CE8(v7), (v11 & 1) == 0))
      {

        swift_bridgeObjectRelease();
LABEL_11:
        sub_18766392C();
        swift_allocError();
        *char v16 = 1;
        swift_willThrow();
        goto LABEL_12;
      }

      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
    }

    swift_unknownObjectRetain();
    objc_opt_self();
    unint64_t v12 = (void *)swift_dynamicCastObjCClassUnconditional();
    uint64_t v13 = sub_187699F98();
    uint64_t v15 = v14;

    a2(v13, v15);
    swift_unknownObjectRelease();
LABEL_12:

    goto LABEL_13;
  }

  sub_18766392C();
  swift_allocError();
  *uint64_t v10 = 0;
  swift_willThrow();
LABEL_13:
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
}

unint64_t sub_187663C2C(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x1895AA528](*(void *)(v1 + 40), a1, 4LL);
  return sub_187663E2C(a1, v3);
}

unint64_t sub_187663C60(uint64_t a1)
{
  uint64_t v2 = sub_18769A778();
  return sub_187663EC8(a1, v2);
}

unint64_t sub_187663CE8(uint64_t a1)
{
  uint64_t v2 = sub_18769A5A4();
  return sub_187664008(a1, v2);
}

uint64_t storeEnumTagSinglePayload for SecKeySEPInteropErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_187663D64 + 4 * byte_18769E125[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187663D98 + 4 * byte_18769E120[v4]))();
}

uint64_t sub_187663D98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187663DA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187663DA8LL);
  }
  return result;
}

uint64_t sub_187663DB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187663DBCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_187663DC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187663DC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecKeySEPInteropErrors()
{
  return &type metadata for SecKeySEPInteropErrors;
}

unint64_t sub_187663DE8()
{
  unint64_t result = qword_18C6DA358;
  if (!qword_18C6DA358)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769E188, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_18C6DA358);
  }

  return result;
}

unint64_t sub_187663E2C(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_187663EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0LL);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_187639840( &qword_18C6D9EE8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_18769BF5C);
    id v7 = v6;
    char v8 = sub_187699FE0();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_187699FE0();

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_187664008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_187663970();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_18769A5B0();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_18769A5B0();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

void sub_187664110()
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v0, sel_groupOrderByteCountForCP_, v25) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  id v23 = v0;
  uint64_t v1 = sub_187699FB0();
  unint64_t v3 = v2;
  int v24 = 0;
  sub_18769A22C();
  swift_dynamicCast();
  id v4 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v5 = (void *)sub_187699F80();
  id v6 = objc_msgSend(v4, sel_initWithData_inGroup_reduction_corecryptoError_, v5, v25, 0, &v24);

  if (!v6)
  {
    int v18 = v24;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v19 = v18;
    *(_BYTE *)(v19 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v1, v3);
    return;
  }

  sub_187623C58(v1, v3);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v7 = (unint64_t)objc_msgSend(v0, sel_groupOrderByteCountForCP_, v25);
  if ((v7 & 0x8000000000000000LL) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = (char *)v7;
  sub_18769A22C();
  swift_dynamicCast();
  int64_t v9 = (int64_t)objc_msgSend(v0, sel_groupOrderByteCountForCP_, v25);
  if (v9 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (__OFADD__(v8, v9))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if ((uint64_t)&v8[v9] < (uint64_t)v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v22 = v6;
  uint64_t v10 = sub_187699FB0();
  unint64_t v12 = v11;
  int v24 = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v13 = v25;
  id v14 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v15 = (void *)sub_187699F80();
  id v16 = objc_msgSend(v14, sel_initWithData_inGroup_reduction_corecryptoError_, v15, v13, 0, &v24);

  if (v16)
  {
    sub_187623C58(v10, v12);
    sub_18769A22C();
    swift_dynamicCast();
    if (((unint64_t)objc_msgSend(v23, sel_groupOrderByteCountForCP_, v25) & 0x8000000000000000) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_18C4C7680);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_18769C700;
      *(void *)(v17 + 32) = v16;
      uint64_t v26 = v17;
      sub_18769A538();
      return;
    }

void sub_187664530(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  int64_t v4 = (int64_t)objc_msgSend(v3, sel_groupOrderByteCountForCP_, v5);
  if (v4 < 0)
  {
    __break(1u);
  }

  else if (v4 + 0x4000000000000000LL >= 0)
  {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187664A40LL);
}

void sub_187664A9C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_187664AF8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46)
{
  uint64_t v50 = (void *)objc_opt_self();
  sub_18769A37C();
  unint64_t v51 = sub_1876597B0();
  sub_18769A22C();
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v53 = (uint64_t)objc_msgSend(v50, sel_compressedx962PointByteCountForCurveParameters_, *(void *)(v49 - 136));
  if (v53 < 0)
  {
    __break(1u);
    goto LABEL_82;
  }

  uint64_t v54 = 3 * v53;
  if ((unsigned __int128)(v53 * (__int128)3LL) >> 64 != (3 * v53) >> 63)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }

  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v55 = (unint64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v55 & 0x8000000000000000LL) != 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }

  if ((v55 - 0x1000000000000000LL) >> 61 != 7)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  if (__OFADD__(v54, 8 * v55))
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

  if (BYTE6(v48) != v54 + 8 * v55)
  {
    sub_187659948();
    swift_allocError();
    *uint64_t v60 = 4;
    swift_willThrow();
    return;
  }

  sub_18769A22C();
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v50, sel_compressedx962PointByteCountForCurveParameters_, *(void *)(v49 - 136)) & 0x8000000000000000) != 0)
  {
    __break(1u);
    JUMPOUT(0x187665E9CLL);
  }

  v197 = v50;
  uint64_t v56 = sub_187699FB0();
  unint64_t v58 = v57;
  id v59 = sub_187646200();
  if (v46)
  {
    sub_187623C58(v56, v58);
    return;
  }

  v196 = v59;
  v195 = v47;
  sub_187623C58(v56, v58);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v61 = (unint64_t)objc_msgSend(v50, sel_compressedx962PointByteCountForCurveParameters_, *(void *)(v49 - 136));
  if ((v61 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_89;
  }

  char v62 = (char *)v61;
  sub_18769A22C();
  swift_dynamicCast();
  int64_t v63 = (int64_t)objc_msgSend(v50, sel_compressedx962PointByteCountForCurveParameters_, *(void *)(v49 - 136));
  if (v63 < 0)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  if (__OFADD__(v62, v63))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  if ((uint64_t)&v62[v63] < (uint64_t)v62)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v64 = sub_187699FB0();
  unint64_t v66 = v65;
  id v185 = sub_187646200();
  sub_187623C58(v64, v66);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v67 = (unint64_t)objc_msgSend(v50, sel_compressedx962PointByteCountForCurveParameters_, *(void *)(v49 - 136));
  if ((v67 & 0x8000000000000000LL) != 0) {
    goto LABEL_92;
  }
  BOOL v68 = __OFADD__(v62, v67);
  uint64_t v69 = &v62[v67];
  if (v68)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v70 = (int64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v70 < 0)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  if (__OFADD__(v69, v70))
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }

  if ((uint64_t)&v69[v70] < (uint64_t)v69)
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }

  v184 = v69;
  uint64_t v71 = sub_187699FB0();
  unint64_t v73 = v72;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v74 = *(void *)(v49 - 136);
  id v75 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v194 = v73;
  uint64_t v76 = (void *)sub_187699F80();
  id v77 = objc_msgSend(v75, sel_initWithData_inGroup_reduction_corecryptoError_, v76, v74, 0, v49 - 140);

  if (!v77)
  {
    int v84 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v85 = v84;
    *(_BYTE *)(v85 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v71, v194);
LABEL_30:

    id v86 = v185;
LABEL_16:

    return;
  }

  sub_187623C58(v71, v194);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v78 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v78 & 0x8000000000000000LL) != 0) {
    goto LABEL_97;
  }
  uint64_t v79 = &v69[v78];
  if (__OFADD__(v184, v78))
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v80 = (int64_t)objc_msgSend(v197, sel_compressedx962PointByteCountForCurveParameters_, *(void *)(v49 - 136));
  if (v80 < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }

  if (__OFADD__(v79, v80))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  v193 = v77;
  if ((uint64_t)&v79[v80] < (uint64_t)v79)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }

  uint64_t v81 = sub_187699FB0();
  unint64_t v83 = v82;
  id v182 = sub_187646200();
  sub_187623C58(v81, v83);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v87 = (unint64_t)objc_msgSend( v197,  sel_compressedx962PointByteCountForCurveParameters_,  *(void *)(v49 - 136));
  if ((v87 & 0x8000000000000000LL) != 0) {
    goto LABEL_102;
  }
  uint64_t v88 = &v79[v87];
  if (__OFADD__(v79, v87))
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v89 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v89 < 0)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }

  if (__OFADD__(v88, v89))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }

  if ((uint64_t)&v88[v89] < (uint64_t)v88)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }

  v181 = v88;
  uint64_t v90 = sub_187699FB0();
  unint64_t v92 = v91;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v93 = *(void *)(v49 - 136);
  id v94 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v187 = v92;
  uint64_t v95 = (void *)sub_187699F80();
  id v96 = objc_msgSend(v94, sel_initWithData_inGroup_reduction_corecryptoError_, v95, v93, 0, v49 - 140);

  if (!v96)
  {
    int v158 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v159 = v158;
    *(_BYTE *)(v159 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v90, v187);

    id v86 = v182;
    goto LABEL_16;
  }

  sub_187623C58(v90, v187);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v97 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v97 & 0x8000000000000000LL) != 0) {
    goto LABEL_107;
  }
  uint64_t v98 = &v181[v97];
  if (__OFADD__(v181, v97))
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v99 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v99 < 0)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }

  if (__OFADD__(v98, v99))
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }

  v180 = v96;
  if ((uint64_t)&v98[v99] < (uint64_t)v98)
  {
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }

  v179 = v98;
  uint64_t v100 = sub_187699FB0();
  unint64_t v102 = v101;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v103 = *(void *)(v49 - 136);
  id v104 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v188 = v102;
  uint64_t v105 = (void *)sub_187699F80();
  id v106 = objc_msgSend(v104, sel_initWithData_inGroup_reduction_corecryptoError_, v105, v103, 0, v49 - 140);

  if (!v106)
  {
    int v160 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v161 = v160;
    *(_BYTE *)(v161 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v100, v188);

    id v86 = v180;
    goto LABEL_16;
  }

  sub_187623C58(v100, v188);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v107 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v107 & 0x8000000000000000LL) != 0) {
    goto LABEL_112;
  }
  uint64_t v108 = &v179[v107];
  if (__OFADD__(v179, v107))
  {
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v109 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v109 < 0)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }

  if (__OFADD__(v108, v109))
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }

  v178 = v106;
  if ((uint64_t)&v108[v109] < (uint64_t)v108)
  {
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }

  v177 = v108;
  uint64_t v110 = sub_187699FB0();
  unint64_t v112 = v111;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v113 = *(void *)(v49 - 136);
  id v114 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v189 = v112;
  v115 = (void *)sub_187699F80();
  id v116 = objc_msgSend(v114, sel_initWithData_inGroup_reduction_corecryptoError_, v115, v113, 0, v49 - 140);

  if (!v116)
  {
    int v162 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v163 = v162;
    *(_BYTE *)(v163 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v110, v189);

    id v86 = v178;
    goto LABEL_16;
  }

  sub_187623C58(v110, v189);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v117 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v117 & 0x8000000000000000LL) != 0) {
    goto LABEL_117;
  }
  v118 = &v177[v117];
  if (__OFADD__(v177, v117))
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v119 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v119 < 0)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }

  if (__OFADD__(v118, v119))
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }

  v176 = v116;
  if ((uint64_t)&v118[v119] < (uint64_t)v118)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }

  v174 = v118;
  uint64_t v120 = sub_187699FB0();
  unint64_t v122 = v121;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v123 = *(void *)(v49 - 136);
  id v124 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v190 = v122;
  v125 = (void *)sub_187699F80();
  id v126 = objc_msgSend(v124, sel_initWithData_inGroup_reduction_corecryptoError_, v125, v123, 0, v49 - 140);

  if (!v126)
  {
    int v164 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v165 = v164;
    *(_BYTE *)(v165 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v120, v190);

    id v86 = v176;
    goto LABEL_16;
  }

  sub_187623C58(v120, v190);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v127 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v127 & 0x8000000000000000LL) != 0) {
    goto LABEL_122;
  }
  v128 = &v174[v127];
  if (__OFADD__(v174, v127))
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v129 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v129 < 0)
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }

  if (__OFADD__(v128, v129))
  {
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
  }

  v183 = v126;
  v175 = v128;
  uint64_t v130 = sub_187699FB0();
  unint64_t v132 = v131;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v133 = *(void *)(v49 - 136);
  id v134 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v191 = v130;
  unint64_t v135 = v132;
  v136 = (void *)sub_187699F80();
  id v137 = objc_msgSend(v134, sel_initWithData_inGroup_reduction_corecryptoError_, v136, v133, 0, v49 - 140);

  if (!v137)
  {
    int v166 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v167 = v166;
    *(_BYTE *)(v167 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v191, v135);

    id v86 = v183;
    goto LABEL_16;
  }

  sub_187623C58(v191, v135);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v138 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v138 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_128;
  }

  v139 = &v175[v138];
  if (__OFADD__(v175, v138))
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v140 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v140 < 0)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  if (__OFADD__(v139, v140))
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }

  v173 = v137;
  if ((uint64_t)&v139[v140] < (uint64_t)v139)
  {
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  v172 = v139;
  uint64_t v141 = sub_187699FB0();
  unint64_t v143 = v142;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v144 = *(void *)(v49 - 136);
  id v145 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v192 = v141;
  unint64_t v146 = v143;
  v147 = (void *)sub_187699F80();
  id v148 = objc_msgSend(v145, sel_initWithData_inGroup_reduction_corecryptoError_, v147, v144, 0, v49 - 140);

  if (!v148)
  {
    int v168 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v169 = v168;
    *(_BYTE *)(v169 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v192, v146);

    id v86 = v196;
    goto LABEL_16;
  }

  sub_187623C58(v192, v146);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v149 = (unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if ((v149 & 0x8000000000000000LL) != 0) {
    goto LABEL_132;
  }
  v150 = &v172[v149];
  if (__OFADD__(v172, v149))
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v151 = (int64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136));
  if (v151 < 0)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }

  if (__OFADD__(v150, v151))
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }

  v186 = v148;
  if ((uint64_t)&v150[v151] < (uint64_t)v150)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }

  uint64_t v152 = sub_187699FB0();
  unint64_t v51 = v153;
  *(_DWORD *)(v49 - 140) = 0;
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v154 = *(void *)(v49 - 136);
  id v155 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v52 = v152;
  v156 = (void *)sub_187699F80();
  id v157 = objc_msgSend(v155, sel_initWithData_inGroup_reduction_corecryptoError_, v156, v154, 0, v49 - 140);

  if (!v157)
  {
LABEL_86:
    int v170 = *(_DWORD *)(v49 - 140);
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v171 = v170;
    *(_BYTE *)(v171 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v52, v51);

    goto LABEL_30;
  }

  sub_187623C58(v52, v51);
  sub_18769A22C();
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v197, sel_groupOrderByteCountForCP_, *(void *)(v49 - 136)) & 0x8000000000000000) != 0)
  {
LABEL_137:
    __break(1u);
    JUMPOUT(0x187665F70LL);
  }

  void *v195 = v196;
  v195[1] = v185;
  v195[2] = v193;
  v195[3] = v182;
  v195[4] = v180;
  v195[5] = v178;
  v195[6] = v176;
  v195[7] = v183;
  v195[8] = v173;
  v195[9] = v186;
  v195[10] = v157;
}

uint64_t sub_187665F80(void *a1, void *a2, void *a3)
{
  id v6 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  int64_t v7 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v28);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v8 = v7;
  if (v7 + 0x4000000000000000LL < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v9 = (int64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v28);
  if (v9 < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  BOOL v10 = __OFADD__(2 * v8, v9);
  uint64_t v11 = 2 * v8 + v9;
  if (v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v29 = sub_187696EB8(v11);
  id v12 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_187699F98();
    unint64_t v16 = v15;

    sub_187699FA4();
    sub_187623C58(v14, v16);
    id v17 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (v17)
    {
      int v18 = v17;
      uint64_t v19 = sub_187699F98();
      unint64_t v21 = v20;

      sub_187699FA4();
      sub_187623C58(v19, v21);
      id v22 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = sub_187699F98();
        unint64_t v26 = v25;

        sub_187699FA4();
        sub_187623C58(v24, v26);
        return v29;
      }

      goto LABEL_14;
    }

uint64_t sub_1876661FC(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) == 1LL)
  {
    id v3 = objc_msgSend(a1, sel_serializedBigEndianScalar);
    if (v3
      && (int64_t v4 = v3,
          uint64_t v5 = sub_187699F98(),
          v4,
          uint64_t v14 = v5,
          id v6 = *(id *)(a2 + 32),
          (id v7 = objc_msgSend(v6, sel_serializedBigEndianScalar)) != 0))
    {
      int64_t v8 = v7;
      uint64_t v9 = sub_187699F98();
      unint64_t v11 = v10;

      sub_187699FA4();
      sub_187623C58(v9, v11);
      return v14;
    }

    else
    {
      uint64_t result = sub_18769A67C();
      __break(1u);
    }
  }

  else
  {
    sub_187659948();
    swift_allocError();
    *uint64_t v13 = 1;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_18766634C(uint64_t a1)
{
  id v3 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v3, sel_groupOrderByteCountForCP_, v25);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = result;
  if (result + 0x4000000000000000LL < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_18769A22C();
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v3, sel_compressedx962PointByteCountForCurveParameters_, v24);
  if (result < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = 3 * result;
  if ((unsigned __int128)(result * (__int128)3LL) >> 64 != (3 * result) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t result = v6 + 2 * v5;
  if (__OFADD__(v6, 2 * v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v26 = sub_187696EB8(result);
  unint64_t v27 = v7;
  uint64_t result = (uint64_t)objc_msgSend(*(id *)a1, sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  int64_t v8 = (void *)result;
  uint64_t v9 = sub_187699F98();
  unint64_t v11 = v10;

  sub_187699FA4();
  sub_187623C58(v9, v11);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  id v12 = (void *)result;
  uint64_t v13 = sub_187699F98();
  unint64_t v15 = v14;

  sub_187699FA4();
  sub_187623C58(v13, v15);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v16 = (void *)result;
  uint64_t v17 = sub_187699F98();
  unint64_t v19 = v18;

  sub_187699FA4();
  sub_187623C58(v17, v19);
  uint64_t v20 = sub_1876661FC(*(void **)(a1 + 24), *(void *)(a1 + 32));
  if (v1) {
    return sub_187623C58(v26, v27);
  }
  uint64_t v22 = v20;
  unint64_t v23 = v21;
  sub_187699FA4();
  sub_187623C58(v22, v23);
  return v26;
}

void sub_1876665CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

id sub_187666610()
{
  id v3 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  unint64_t v4 = (unint64_t)objc_msgSend(v3, sel_compressedx962PointByteCountForCurveParameters_, v7);
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    JUMPOUT(0x187666740LL);
  }

  if (BYTE6(v0) == v4)
  {
    sub_187623A28(v1, v0);
    id v2 = sub_187646200();
    sub_187623C58(v1, v0);
  }

  else
  {
    sub_187659948();
    swift_allocError();
    *uint64_t v5 = 3;
    swift_willThrow();
  }

  return v2;
}

uint64_t sub_187666758(uint64_t a1)
{
  id v2 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v3 = (uint64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v72);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v4 = 3 * v3;
  if ((unsigned __int128)(v3 * (__int128)3LL) >> 64 != (3 * v3) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v5 = (unint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v72);
  if ((v5 & 0x8000000000000000LL) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if ((v5 - 0x1000000000000000LL) >> 61 != 7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  BOOL v6 = __OFADD__(v4, 8 * v5);
  uint64_t v7 = v4 + 8 * v5;
  if (v6)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v73 = sub_187696EB8(v7);
  id v8 = objc_msgSend(*(id *)a1, sel_serializedPublicKey_, 1);
  if (!v8)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v9 = v8;
  uint64_t v10 = sub_187699F98();
  unint64_t v12 = v11;

  sub_187699FA4();
  sub_187623C58(v10, v12);
  id v13 = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!v13)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  unint64_t v14 = v13;
  uint64_t v15 = sub_187699F98();
  unint64_t v17 = v16;

  sub_187699FA4();
  sub_187623C58(v15, v17);
  id v18 = objc_msgSend(*(id *)(a1 + 16), sel_serializedBigEndianScalar);
  if (!v18) {
    goto LABEL_26;
  }
  unint64_t v19 = v18;
  uint64_t v20 = sub_187699F98();
  unint64_t v22 = v21;

  sub_187699FA4();
  sub_187623C58(v20, v22);
  unint64_t v23 = *(void **)(a1 + 24);
  uint64_t v24 = *(void **)(a1 + 32);
  uint64_t v26 = *(void **)(a1 + 40);
  uint64_t v25 = *(void **)(a1 + 48);
  uint64_t v28 = *(void **)(a1 + 56);
  unint64_t v27 = *(void **)(a1 + 64);
  uint64_t v30 = *(void **)(a1 + 72);
  uint64_t v29 = *(void **)(a1 + 80);
  id v31 = objc_msgSend(v23, sel_serializedPublicKey_, 1);
  if (!v31)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v32 = v31;
  uint64_t v33 = sub_187699F98();
  unint64_t v35 = v34;

  sub_187699FA4();
  sub_187623C58(v33, v35);
  id v36 = objc_msgSend(v24, sel_serializedBigEndianScalar);
  if (v36)
  {
    unint64_t v37 = v36;
    uint64_t v38 = sub_187699F98();
    unint64_t v40 = v39;

    sub_187699FA4();
    sub_187623C58(v38, v40);
    id v41 = objc_msgSend(v26, sel_serializedBigEndianScalar);
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = sub_187699F98();
      unint64_t v45 = v44;

      sub_187699FA4();
      sub_187623C58(v43, v45);
      id v46 = objc_msgSend(v25, sel_serializedBigEndianScalar);
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v48 = sub_187699F98();
        unint64_t v50 = v49;

        sub_187699FA4();
        sub_187623C58(v48, v50);
        id v51 = objc_msgSend(v28, sel_serializedBigEndianScalar);
        if (v51)
        {
          uint64_t v52 = v51;
          uint64_t v53 = sub_187699F98();
          unint64_t v55 = v54;

          sub_187699FA4();
          sub_187623C58(v53, v55);
          id v56 = objc_msgSend(v27, sel_serializedBigEndianScalar);
          if (v56)
          {
            unint64_t v57 = v56;
            uint64_t v58 = sub_187699F98();
            unint64_t v60 = v59;

            sub_187699FA4();
            sub_187623C58(v58, v60);
            id v61 = objc_msgSend(v30, sel_serializedBigEndianScalar);
            if (v61)
            {
              char v62 = v61;
              uint64_t v63 = sub_187699F98();
              unint64_t v65 = v64;

              sub_187699FA4();
              sub_187623C58(v63, v65);
              id v66 = objc_msgSend(v29, sel_serializedBigEndianScalar);
              if (v66)
              {
                unint64_t v67 = v66;
                uint64_t v68 = sub_187699F98();
                unint64_t v70 = v69;

                sub_187699FA4();
                sub_187623C58(v68, v70);
                return v73;
              }
            }
          }
        }
      }
    }
  }

LABEL_26:
  uint64_t result = sub_18769A67C();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_187666C3C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_187666C94()
{
  id v2 = (void *)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  int64_t v3 = (int64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v28);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  int64_t v4 = v3;
  if (v3 + 0x4000000000000000LL < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v5 = (unint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v28);
  if ((v5 & 0x8000000000000000LL) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (__OFADD__(2 * v4, v5))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (BYTE6(v1) != 2 * v4 + v5)
  {
    sub_187659948();
    swift_allocError();
    *id v18 = 6;
    swift_willThrow();
    return;
  }

  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v6 = sub_187699FB0();
  unint64_t v8 = v7;
  int v27 = 0;
  sub_18769A22C();
  swift_dynamicCast();
  id v9 = objc_allocWithZone(MEMORY[0x18960F078]);
  uint64_t v10 = (void *)sub_187699F80();
  id v11 = objc_msgSend(v9, sel_initWithData_inGroup_reduction_corecryptoError_, v10, v28, 0, &v27);

  if (!v11)
  {
    int v19 = v27;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v19;
    *(_BYTE *)(v20 + 4) = 0;
    swift_willThrow();
    sub_187623C58(v6, v8);
    return;
  }

  sub_187623C58(v6, v8);
  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v12 = (unint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v28);
  if ((v12 & 0x8000000000000000LL) != 0) {
    goto LABEL_28;
  }
  id v13 = (char *)v12;
  sub_18769A22C();
  swift_dynamicCast();
  int64_t v14 = (int64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v28);
  if (v14 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (__OFADD__(v13, v14))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if ((uint64_t)&v13[v14] < (uint64_t)v13)
  {
LABEL_31:
    __break(1u);
    JUMPOUT(0x18766718CLL);
  }

  uint64_t v15 = sub_187699FB0();
  unint64_t v17 = v16;
  sub_187646200();
  sub_187623C58(v15, v17);
  if (v0)
  {

    return;
  }

  sub_18769A22C();
  swift_dynamicCast();
  unint64_t v21 = (unint64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v28);
  if ((v21 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }

  unint64_t v22 = &v13[v21];
  if (__OFADD__(v13, v21))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  sub_18769A22C();
  swift_dynamicCast();
  int64_t v23 = (int64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v28);
  if (v23 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (__OFADD__(v22, v23))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  if ((uint64_t)&v22[v23] < (uint64_t)v22)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }

  uint64_t v24 = sub_187699FB0();
  unint64_t v26 = v25;
  sub_187646200();
  sub_187623C58(v24, v26);
  sub_18769A22C();
  swift_dynamicCast();
}

id Scrypt.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id Scrypt.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Scrypt();
  return objc_msgSendSuper2(&v2, sel_init);
}

id Scrypt.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Scrypt();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0( void *a1, void *a2, size_t a3)
{
  uint64_t result = ccscrypt_storage_size();
  if (result < 0)
  {
    __break(1u);
    return result;
  }

  size_t v7 = result;
  if (result)
  {
    uint64_t v8 = sub_18769A550();
    *(void *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), v7);
    if ((a3 & 0x8000000000000000LL) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if ((a3 & 0x8000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_4:
  if (!a3)
  {
LABEL_8:
    uint64_t v9 = MEMORY[0x18961AFE8];
    goto LABEL_9;
  }

  uint64_t v9 = sub_18769A550();
  *(void *)(v9 + 16) = a3;
  bzero((void *)(v9 + 32), a3);
LABEL_9:
  objc_msgSend(a1, sel_length);
  objc_msgSend(a1, sel_bytes);
  if (a2)
  {
    objc_msgSend(a2, sel_length);
    objc_msgSend(a2, sel_bytes);
  }

  sub_18769A52C();
  sub_18769A52C();
  int v10 = ccscrypt();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v10)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v9 + 32, a3, a3, v9 + 32);
    swift_bridgeObjectRelease();
  }

  return (uint64_t)v11;
}

uint64_t type metadata accessor for Scrypt()
{
  return objc_opt_self();
}

uint64_t PIR.KeywordPirClient.init(pirParams:hashFunctionCount:secretKey:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  char v7 = *(_BYTE *)result;
  char v8 = *(_BYTE *)(result + 1);
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v10 = *(void *)(result + 16);
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v13 = *(void *)(result + 40);
  uint64_t v12 = *(void *)(result + 48);
  char v14 = *(_BYTE *)(result + 56);
  char v15 = *(_BYTE *)(result + 57);
  uint64_t v17 = *a3;
  unint64_t v16 = a3[1];
  if (*(_BYTE *)(result + 2) != 2)
  {
    char v32 = *(_BYTE *)(result + 2);
    char v33 = *(_BYTE *)(result + 57);
    int v49 = *(unsigned __int8 *)(result + 56);
    uint64_t v34 = v12;
    uint64_t v35 = v10;
    unint64_t v36 = v9;
    uint64_t v37 = a4;
    uint64_t v23 = *(void *)(result + 32);
    LOBYTE(v40) = v7;
    BYTE1(v40) = v8;
    _s12ParamContextCMa();
    swift_allocObject();
    sub_18769A52C();
    sub_1876496B8((uint64_t)&v40);
    if (v4)
    {
      sub_187623C58(v17, v16);
      return swift_bridgeObjectRelease_n();
    }

    uint64_t v25 = v24;
    uint64_t v31 = v23;
    uint64_t v40 = v17;
    unint64_t v41 = v16;
    goto LABEL_9;
  }

  v51[0] = *(_BYTE *)result;
  v51[1] = v8;
  char v50 = 2;
  uint64_t v18 = v13 * a2;
  if ((unsigned __int128)(v13 * (__int128)a2) >> 64 == (v13 * a2) >> 63)
  {
    unint64_t v38 = v16;
    uint64_t v19 = v9;
    uint64_t v20 = v10;
    uint64_t v21 = v12;
    char v22 = v14;
    sub_18769A52C();
    PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)( v51,  &v50,  v19,  v20,  v11,  v18,  v21,  v22,  (uint64_t)&v40,  v15);
    if (v5)
    {
      sub_187623C58(v17, v38);
      return swift_bridgeObjectRelease();
    }

    uint64_t v37 = a4;
    swift_bridgeObjectRelease();
    char v7 = v40;
    char v8 = BYTE1(v40);
    char v26 = BYTE2(v40);
    uint64_t v11 = v43;
    uint64_t v35 = v42;
    unint64_t v36 = v41;
    uint64_t v27 = v44;
    uint64_t v13 = v45;
    uint64_t v34 = v46;
    int v49 = v47;
    char v33 = v48;
    _s12ParamContextCMa();
    swift_allocObject();
    sub_18769A52C();
    sub_1876496B8((uint64_t)&v40);
    uint64_t v25 = v28;
    char v32 = v26;
    uint64_t v31 = v27;
    uint64_t v40 = v17;
    unint64_t v41 = v38;
LABEL_9:
    swift_retain_n();
    sub_18767B524((uint64_t)&v40, v25);
    uint64_t v30 = v29;
    sub_18769A52C();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)uint64_t v37 = a2;
    *(_BYTE *)(v37 + 8) = v7;
    *(_BYTE *)(v37 + 9) = v8;
    *(_BYTE *)(v37 + 10) = v32;
    *(void *)(v37 + 16) = v36;
    *(void *)(v37 + 24) = v35;
    *(void *)(v37 + 32) = v11;
    *(void *)(v37 + 40) = v31;
    *(void *)(v37 + 48) = v13;
    *(void *)(v37 + 56) = v34;
    *(_BYTE *)(v37 + 64) = v49;
    *(_BYTE *)(v37 + 65) = v33;
    *(void *)(v37 + 72) = v25;
    *(void *)(v37 + 80) = v30;
    return result;
  }

  __break(1u);
  return result;
}

unint64_t PIR.KeywordPirClient.generateGaloisKey()@<X0>(void *a1@<X8>)
{
  return PIR.IndexPirClient.generateGaloisKey()(a1);
}

uint64_t PIR.KeywordPirClient.generateRelinKey()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 80);
  swift_retain();
  swift_retain();
  return sub_18768B768(v3, a1);
}

char *PIR.KeywordPirClient.query(keyword:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)v2;
  char v4 = *(_BYTE *)(v2 + 8);
  char v5 = *(_BYTE *)(v2 + 9);
  int v6 = *(unsigned __int8 *)(v2 + 10);
  unint64_t v8 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t v20 = *(void *)(v2 + 56);
  char v21 = *(_BYTE *)(v2 + 64);
  char v22 = *(_BYTE *)(v2 + 65);
  uint64_t v12 = *(void *)(v2 + 72);
  uint64_t v13 = *(void *)(v2 + 80);
  uint64_t v23 = v12;
  char v14 = sub_18762ACCC(a1, a2, v8, v3);
  char v15 = v14;
  if (v6 == 2)
  {
    char v24 = v4;
    char v25 = v5;
    char v26 = 2;
    unint64_t v27 = v8;
    uint64_t v28 = v7;
    uint64_t v29 = v10;
    uint64_t v30 = v9;
    uint64_t v31 = v11;
    uint64_t v32 = v20;
    char v33 = v21;
    char v34 = v22;
    uint64_t v35 = v23;
    uint64_t v36 = v13;
    sub_18769A52C();
    swift_retain();
    swift_retain();
    unint64_t v16 = (char *)sub_187685E28(v15);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v24 = v4;
    char v25 = v5;
    char v26 = v6;
    unint64_t v27 = v8;
    uint64_t v28 = v7;
    uint64_t v29 = v10;
    uint64_t v30 = v9;
    uint64_t v31 = v11;
    uint64_t v32 = v20;
    char v33 = v21;
    char v34 = v22;
    uint64_t v35 = v23;
    uint64_t v36 = v13;
    unint64_t v16 = &v24;
    uint64_t v17 = v37;
    uint64_t v18 = sub_187686240((uint64_t)v14);
    if (!v17) {
      return (char *)v18;
    }
  }

  return v16;
}

void *PIR.KeywordPirClient.decrypt(replies:keyword:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  unsigned int v8 = *(unsigned __int8 *)(v3 + 10);
  unint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void **)(v3 + 80);
  uint64_t v19 = sub_18762ACCC(a2, a3, v9, v7);
  sub_18762A998(a2, a3);
  if (v8 > 1)
  {
    if (!*(void *)(a1 + 16))
    {
      __break(1u);
      __break(1u);
      JUMPOUT(0x187669274LL);
    }

    uint64_t v15 = *(void *)(a1 + 32);
    sub_18769A52C();
    swift_retain();
    swift_retain();
    sub_18769A52C();
    uint64_t v11 = v10;
    uint64_t v16 = PIR.IndexPirClient.decryptVectorizedPirReply(reply:indices:)(v15, (uint64_t)v19);
    if (v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }

    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(void *)(v17 + 16)) {
      __asm { BR              X9 }
    }

void sub_187669338(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_1876693A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = v5;
  LOWORD(v14) = v4;
  BYTE2(v14) = BYTE2(v4);
  HIBYTE(v14) = BYTE3(v4);
  unsigned __int8 v15 = BYTE4(v4);
  unsigned __int8 v16 = BYTE5(v4);
  unsigned __int8 v17 = BYTE6(v4);
  uint64_t v9 = *v8;
  uint64_t v10 = *v8 + v7;
  if (__OFADD__(*v8, v7))
  {
    __break(1u);
    JUMPOUT(0x187669580LL);
  }

  if (v10 < v9)
  {
    __break(1u);
    JUMPOUT(0x18766958CLL);
  }

  uint64_t result = sub_187635BB8(v9, v10, a3, a4, (uint64_t)&v13);
  unint64_t v12 = v14 | ((unint64_t)v15 << 32) | ((unint64_t)v16 << 40) | ((unint64_t)v17 << 48);
  *int v6 = v13;
  v6[1] = v12;
  return result;
}

uint64_t sub_1876695B4(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result = sub_187699F20();
  uint64_t v11 = *a1;
  if (a1[1] < (int)v11)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v15 = a2;
  uint64_t result = sub_187699E90();
  if (result)
  {
    uint64_t v12 = result;
    uint64_t result = sub_187699EB4();
    uint64_t v13 = v11 - result;
    if (!__OFSUB__(v11, result))
    {
      sub_187699EA8();
      uint64_t result = *a4;
      uint64_t v14 = *a4 + a5;
      if (!__OFADD__(*a4, a5))
      {
        if (v14 >= result) {
          return sub_187635BB8(result, v14, v15, a3, v12 + v13);
        }
        goto LABEL_10;
      }

char *sub_187669688()
{
  uint64_t v1 = *v0;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!(_DWORD)result)
  {
    uint64_t result = sub_18765B45C(result, *((void *)v1 + 2) + 1LL, 1, v1);
    *uint64_t v0 = result;
  }

  return result;
}

uint64_t sub_1876696D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0LL;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0 && v4 >= a2)
  {
    return a2 - result;
  }

  __break(1u);
  return result;
}

void *sub_187669704(void *__src, size_t __len, int a3, int a4, int a5, void *__dst)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000LL) != 0) {
      __break(1u);
    }
    else {
      return memmove(__dst, __src, __len);
    }
  }

  return __src;
}

uint64_t sub_187669724(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  return a3(a1, v3);
}

uint64_t sub_187669754(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v10 = sub_1876696D0(0LL, *a3, v9, v8);
  uint64_t result = sub_1876696D0(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  if (a1) {
    uint64_t v13 = a1 + v10;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return a4(v13, v12);
}

uint64_t _s16KeywordPirClientVwxx()
{
  return swift_release();
}

uint64_t _s16KeywordPirClientVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  sub_18769A52C();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s16KeywordPirClientVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s16KeywordPirClientVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t _s16KeywordPirClientVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s16KeywordPirClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PIR.KeywordPirClient()
{
  return &type metadata for PIR.KeywordPirClient;
}

ValueMetadata *_s16KeywordPirClientV10HashBucketVMa()
{
  return &_s16KeywordPirClientV10HashBucketVN;
}

void *sub_187669AF4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  sub_187623A28(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *_s16KeywordPirClientV10HashBucketV15HashBucketEntryVwca(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  sub_187623A28(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_187623C58(v5, v6);
  return a1;
}

uint64_t _s16KeywordPirClientV10HashBucketV15HashBucketEntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_187623C58(v4, v5);
  return a1;
}

ValueMetadata *_s16KeywordPirClientV10HashBucketV15HashBucketEntryVMa()
{
  return &_s16KeywordPirClientV10HashBucketV15HashBucketEntryVN;
}

void HE.SerializedEvaluationKey.encryptionParams.getter(_BYTE *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t HE.SerializedEvaluationKey.galoisKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return sub_18769A52C();
}

uint64_t HE.SerializedEvaluationKey.relinKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return sub_18769A52C();
}

_BYTE *HE.SerializedEvaluationKey.init(encryptionParams:galoisKey:relinKey:)@<X0>( _BYTE *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = result[1];
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  *(_BYTE *)a4 = *result;
  *(_BYTE *)(a4 + 1) = v4;
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v6;
  return result;
}

uint64_t HE.SerializedEvaluationKey.init(config:secretKey:scheme:)@<X0>( char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  char v6 = a1[1];
  uint64_t v7 = *((void *)a1 + 1);
  int v8 = a1[16];
  uint64_t v10 = *a2;
  unint64_t v9 = a2[1];
  LOBYTE(v18[0]) = *a1;
  BYTE1(v18[0]) = v6;
  _s12ParamContextCMa();
  swift_allocObject();
  sub_1876496B8((uint64_t)v18);
  if (v3)
  {
    sub_187623C58(v10, v9);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = v11;
    v18[0] = v10;
    v18[1] = v9;
    swift_retain();
    sub_18767B524((uint64_t)v18, v13);
    uint64_t v15 = v14;
    if (*(void *)(v7 + 16))
    {
      swift_retain();
      sub_18769A52C();
      swift_retain();
      sub_18768BC4C(v13, v7, v15, v18);
      uint64_t v16 = v18[0];
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    sub_18769A52C();
    swift_bridgeObjectRelease();
    if (v8)
    {
      sub_18768B768(v15, v18);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = v18[0];
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v17 = 0LL;
    }

    *(_BYTE *)a3 = v5;
    *(_BYTE *)(a3 + 1) = v6;
    *(void *)(a3 + 8) = v16;
    *(void *)(a3 + 16) = v17;
  }

  return result;
}

uint64_t _s23SerializedEvaluationKeyVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s23SerializedEvaluationKeyVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  sub_18769A52C();
  sub_18769A52C();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_187623C58(v4, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s23SerializedEvaluationKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedEvaluationKey()
{
  return &type metadata for HE.SerializedEvaluationKey;
}

unint64_t PEC.PlaintextPacking.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t PEC.PlaintextPacking.rawValue.getter()
{
  return *v0;
}

unint64_t sub_187669FD8()
{
  unint64_t result = qword_18C6DA360;
  if (!qword_18C6DA360)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for PEC.PlaintextPacking,  &type metadata for PEC.PlaintextPacking);
    atomic_store(result, (unint64_t *)&qword_18C6DA360);
  }

  return result;
}

unint64_t sub_18766A01C@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return PEC.PlaintextPacking.init(rawValue:)(*a1, a2);
}

void sub_18766A024(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t _s16PlaintextPackingOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_18766A07C + 4 * byte_18769E275[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18766A0B0 + 4 * asc_18769E270[v4]))();
}

uint64_t sub_18766A0B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18766A0B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18766A0C0LL);
  }
  return result;
}

uint64_t sub_18766A0CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18766A0D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18766A0D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18766A0E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PEC.PlaintextPacking()
{
  return &type metadata for PEC.PlaintextPacking;
}

ValueMetadata *type metadata accessor for PIR()
{
  return &type metadata for PIR;
}

void sub_18766A10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0x2000000000000000LL) == 0) {
    __asm { BR              X10 }
  }

  unint64_t v7 = a3 & 0xDFFFFFFFFFFFFFFFLL;
  int64_t v8 = *(void *)(a4 + 16);
  if (v8)
  {
    sub_187623A28(a2, v7);
    uint64_t v14 = MEMORY[0x18961AFE8];
    sub_18762C524(0LL, v8, 0);
    unint64_t v9 = (unint64_t *)(a4 + 32);
    do
    {
      unint64_t v11 = *v9++;
      unint64_t v10 = v11;
      if ((v11 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x18766A7A0LL);
      }

      if (HIDWORD(v10)) {
        goto LABEL_14;
      }
      unint64_t v13 = *(void *)(v14 + 16);
      unint64_t v12 = *(void *)(v14 + 24);
      if (v13 >= v12 >> 1) {
        sub_18762C524((char *)(v12 > 1), v13 + 1, 1);
      }
      *(void *)(v14 + 16) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13 + 32) = v10;
      --v8;
    }

    while (v8);
  }

  else
  {
    sub_187623A28(a2, v7);
  }

  __asm { BR              X10 }

void sub_18766A88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_18766A8FC()
{
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x18766AC10LL);
  }

  if ((v1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    JUMPOUT(0x18766AB74LL);
  }

  if (HIDWORD(v1))
  {
    __break(1u);
    JUMPOUT(0x18766AB84LL);
  }

  if (qword_18C6D9760 != -1) {
    swift_once();
  }
  if (qword_18C6DEDE8 < 0)
  {
    __break(1u);
    JUMPOUT(0x18766A994LL);
  }

  uint64_t result = cche_deserialize_seeded_ciphertext_coeff();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_18766AC44@<X0>(uint64_t result@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, _DWORD *a4@<X8>)
{
  if (!result) {
    goto LABEL_9;
  }
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
  }

  else if (((a3 | a2) & 0x8000000000000000LL) == 0)
  {
    if (a3 <= 0xFFFFFFFFLL)
    {
      uint64_t result = cche_deserialize_ciphertext_coeff();
      *a4 = result;
      return result;
    }

    goto LABEL_8;
  }

  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

void sub_18766ACD8( char **a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _DWORD *a6@<X8>)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  unint64_t v7 = *a1;
  int64_t v8 = *((void *)*a1 + 2);
  if ((v8 | a2) >> 32)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (a3 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!*(void *)(a4 + 16))
  {
    unint64_t v9 = a6;
    goto LABEL_8;
  }

  if (!a5)
  {
LABEL_14:
    __break(1u);
    return;
  }

  unint64_t v9 = a6;
LABEL_8:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v7 = sub_18765B78C(0LL, v8, 0, v7);
  }
  *a1 = v7;
  *unint64_t v9 = cche_ciphertext_coeff_compose();
}

char *sub_18766ADD0(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
    uint64_t result = sub_18762C524(0LL, v3, 0);
    char v6 = (unint64_t *)(a1 + 32);
    while (1)
    {
      unint64_t v8 = *v6++;
      unint64_t v7 = v8;
      if ((v8 & 0x8000000000000000LL) != 0) {
        break;
      }
      if (HIDWORD(v7)) {
        goto LABEL_11;
      }
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        uint64_t result = sub_18762C524((char *)(v9 > 1), v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(_DWORD *)(v12 + 4 * v10 + 32) = v7;
      if (!--v3) {
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
  }

  else
  {
LABEL_8:
    uint64_t result = *(char **)(a2 + 24);
    if (result)
    {
      unsigned int v11 = cche_ciphertext_coeff_decompose_nptexts();
      swift_bridgeObjectRelease();
      return (char *)v11;
    }
  }

  __break(1u);
  return result;
}

void *sub_18766AED4(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_6;
  }

  if ((a3 | a2) < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (a3 <= 0xFFFFFFFFLL)
  {
    int64_t v3 = result;
    uint64_t v4 = cche_ciphertext_sizeof();
    type metadata accessor for HE.ObjectStorage();
    char v5 = (void *)swift_allocObject();
    v5[2] = v3;
    uint64_t v6 = swift_slowAlloc();
    void v5[3] = v6;
    v5[4] = v6 + v4;
    return v5;
  }

void sub_18766AF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_187699E90();
  if (v9)
  {
    uint64_t v10 = sub_187699EB4();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }

    v9 += a1 - v10;
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v13 = sub_187699EA8();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = v9 + v14;
  if (v9) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  sub_18766A88C(v9, v16, a4, a5);
}

uint64_t sub_18766B038( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_187699E90();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }

    v13 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  sub_187699EA8();
  uint64_t result = sub_18766AC44(v13, a7, a8, &v15);
  if (!v14) {
    return v15;
  }
  return result;
}

uint64_t sub_18766B114(uint64_t a1, unint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  if (!*(void *)(a1 + 16))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_14;
  }

  uint64_t v9 = v7;
  unint64_t v10 = a4;
  unint64_t v8 = (char *)a1;
  char v5 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if ((a3 & 1) != 0) {
    a2 = cche_param_ctx_ciphertext_ctx_nmoduli();
  }
  unint64_t v22 = a2;
  int64_t v12 = *(void *)(a5 + 16);
  if (v12)
  {
    unint64_t v21 = v10;
    uint64_t v23 = MEMORY[0x18961AFE8];
    swift_retain();
    sub_18762C524(0LL, v12, 0);
    uint64_t v9 = 0LL;
    uint64_t v6 = v23;
    while (1)
    {
      unint64_t v10 = *(void *)(a5 + 8 * v9 + 32);
      if ((v10 & 0x8000000000000000LL) != 0) {
        break;
      }
      if (HIDWORD(v10)) {
        goto LABEL_19;
      }
      unint64_t v14 = *(void *)(v23 + 16);
      unint64_t v13 = *(void *)(v23 + 24);
      if (v14 >= v13 >> 1) {
        sub_18762C524((char *)(v13 > 1), v14 + 1, 1);
      }
      ++v9;
      *(void *)(v23 + 16) = v14 + 1;
      *(_DWORD *)(v23 + 4 * v14 + 32) = v10;
      if (v12 == v9)
      {
        swift_bridgeObjectRelease();
        unint64_t v10 = v21;
        uint64_t v9 = v7;
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x18961AFE8];
LABEL_13:
  uint64_t v15 = qword_18C6D9758;
  swift_retain();
  if (v15 != -1) {
    goto LABEL_21;
  }
LABEL_14:
  uint64_t v16 = sub_18766AED4(v5, v22, qword_18C6DEDE0);
  char v24 = v16;
  swift_retain();
  sub_18769A52C();
  unsigned int v17 = sub_187699B98(v8, (uint64_t)&v24, v6, (uint64_t)v5, v22, v10);
  if (v9)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    unsigned int v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    if (v18)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v19 = v18;
      *(_BYTE *)(v19 + 4) = 0;
      swift_willThrow();
      swift_release();
    }

    swift_release();
    return (uint64_t)v16;
  }

  return result;
}

id sub_18766B36C( void *a1, void *a2, void *a3, unint64_t a4, void *a5, int a6, uint64_t a7, void *a8, char a9)
{
  id v61 = a5;
  char v62 = a8;
  unint64_t v59 = (void *)sub_18769A46C();
  uint64_t v58 = (void *)*(v59 - 1);
  MEMORY[0x1895F8858](v59);
  unint64_t v57 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_18764E194(a6, a7, a9);
  uint64_t v18 = v16;
  unint64_t v19 = v17;
  if ((a9 & 1) != 0)
  {
    sub_18766C59C(a1, a2, a3, a4, v61, a6, a7, v62, 1u);
    id v21 = v20;
    sub_187623C58(v18, v19);
  }

  else
  {
    id v55 = a2;
    uint64_t v56 = v16;
    unint64_t v60 = v17;
    if (a6 >= 2u)
    {
      if (a6 != 2)
      {
        __break(1u);
        JUMPOUT(0x18766BEECLL);
      }

      sub_18763B1DC(1868983881LL, 0xE400000000000000LL);
      if (a4 >> 60 != 15) {
        __asm { BR              X10 }
      }

      __break(1u);
      JUMPOUT(0x18766BEF8LL);
    }

    unint64_t v22 = v62;
    id v21 = sub_18764FE4C((uint64_t)v62, v55);
    if ((_BYTE)a6)
    {
      unint64_t v54 = a1;
      sub_18769A37C();
      sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
      id v23 = v22;
      sub_18769A22C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
      swift_dynamicCast();
      unint64_t v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v64);
      sub_18769A22C();
      swift_dynamicCast();
      id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v64);
      id v25 = sub_18764FE4C((uint64_t)v23, v24);

      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71D8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18769C700;
      id v27 = v55;
      *(void *)(inited + 32) = v55;
      *(void *)(inited + 40) = v21;
      id v28 = v23;
      id v29 = v27;
      id v21 = v21;
      uint64_t v30 = v56;
      unint64_t v31 = v60;
      uint64_t v32 = v65;
      sub_18766F288((uint64_t)&v63, (uint64_t)v23, v25, v56, v60, inited, 0);
      char v62 = v28;
      if (v32)
      {
        id v34 = v28;
        id v35 = v59;
      }

      else
      {
        uint64_t v36 = v33;
        unint64_t v57 = (char *)(inited + 32);

        unint64_t v65 = 0LL;
        uint64_t v37 = v63;
        id v38 = v36;
        uint64_t v58 = v25;
        id v39 = v38;
        id v40 = v37;
        unint64_t v41 = v61;
        id v35 = v59;
        id v42 = sub_18764FE4C((uint64_t)v41, v59);
        id v61 = v41;
        id v34 = sub_18764FE4C((uint64_t)v41, v39);
        uint64_t v43 = v31;
        uint64_t v44 = v40;
        uint64_t v45 = v40;
        uint64_t v46 = v42;
        unsigned __int8 v47 = v65;
        sub_18767048C(v30, v43, v58, v39, v45, v42, v34);
        if (!v47)
        {
          unint64_t v65 = v48;
          id v53 = sub_18766D7B8(v48, (uint64_t)v62);
          char v50 = v61;
          id v55 = sub_18766D9E8(v61, (uint64_t)v53);

          sub_187623C58(v56, v60);
          swift_setDeallocating();
          __swift_instantiateConcreteTypeFromMangledName(qword_18C4C71E0);
          swift_arrayDestroy();

          id v51 = v54;
          *unint64_t v54 = v65;
          v51[1] = v55;
          return v21;
        }

        unint64_t v31 = v60;
        uint64_t v30 = v56;
        id v25 = v58;
      }

      sub_187623C58(v30, v31);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(qword_18C4C71E0);
      swift_arrayDestroy();
    }

    else
    {
      sub_187623C58(v56, v60);
      *a1 = 0LL;
      a1[1] = 0LL;
    }
  }

  return v21;
}

void sub_18766BF1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, int a7, uint64_t a8, void *a9, char a10)
{
  unint64_t v49 = a6;
  char v48 = a5;
  v42[3] = a4;
  v42[8] = a3;
  uint64_t v51 = a2;
  id v55[2] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v45 = sub_18769A3D0();
  v42[4] = *(void *)(v45 - 8);
  MEMORY[0x1895F8858](v45);
  uint64_t v44 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_18769A1F0();
  v42[6] = *(void *)(v14 - 8);
  _BYTE v42[7] = v14;
  MEMORY[0x1895F8858](v14);
  v42[5] = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_18769A46C();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  unint64_t v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18769A448();
  uint64_t v20 = sub_18769A43C();
  unint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (v22 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    int v47 = a7;
    unsigned __int8 v23 = a7;
    uint64_t v24 = a8;
    uint64_t v25 = sub_18764E194(v23, a8, a10 & 1);
    unint64_t v27 = v26;
    uint64_t v53 = v20;
    unint64_t v54 = v22;
    sub_187623A28(v20, v22);
    sub_18763CF30(v25, v27);
    sub_187623C58(v25, v27);
    sub_1876482B4(v20, v22);
    uint64_t v29 = v53;
    uint64_t v28 = v54;
    uint64_t v30 = v50;
    sub_187651220(a1, v51, v53, v54);
    if (v30)
    {
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x18766C578LL);
    }

    uint64_t v32 = v31;
    uint64_t v43 = a1;
    uint64_t v46 = v29;
    uint64_t v50 = v28;
    sub_18769A37C();
    sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
    sub_18769A22C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
    swift_dynamicCast();
    id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v52);
    if (v33)
    {
      id v34 = v33;
      uint64_t v36 = (uint64_t)v48;
      uint64_t v35 = v49;
      unsigned __int8 v37 = v47;
      id v38 = sub_18766B36C(v55, v32, v48, v49, v33, v47, v24, a9, a10 & 1);
      v42[2] = v32;

      sub_1876719C4(v55[0], v55[1]);
      sub_18766CE0C(v43, v51, v36, v35, (uint64_t)v38, v24, v37, a10 & 1);
      unint64_t v40 = v39;
      sub_187639840(&qword_18C4C71B8, (uint64_t (*)(uint64_t))MEMORY[0x189605E10], MEMORY[0x189605E08]);
      sub_18769A1CC();
      unint64_t v41 = (char *)&loc_18766C280 + dword_18766C58C[v40 >> 62];
      v42[1] = v38;
      __asm { BR              X10 }
    }
  }

  __break(1u);
}

void sub_18766C59C( void *a1, void *a2, void *a3, unint64_t a4, void *a5, int a6, uint64_t a7, void *a8, unsigned __int8 a9)
{
  id v101 = a3;
  id v96 = a2;
  id v97 = a8;
  unsigned int v14 = a6;
  uint64_t v15 = sub_18769A46C();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v14 > 1)
  {
    __break(1u);
    JUMPOUT(0x18766CDDCLL);
  }

  id v92 = a5;
  uint64_t v93 = a1;
  LODWORD(v94) = a9;
  LODWORD(v95) = a6;
  uint64_t v19 = sub_18764E194(a6, a7, a9 & 1);
  unint64_t v21 = v20;
  sub_18769A448();
  uint64_t v22 = sub_18769A43C();
  unint64_t v24 = v23;
  int64_t v99 = *(void (**)(char *, uint64_t))(v16 + 8);
  v99(v18, v15);
  if (v24 >> 60 == 15)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v25 = v15;
  uint64_t v104 = v22;
  unint64_t v105 = v24;
  sub_18764642C(v22, v24);
  sub_187623A28(v19, v21);
  sub_18763CF30(v19, v21);
  uint64_t v102 = v19;
  sub_187623C58(v19, v21);
  sub_1876482B4(v22, v24);
  unint64_t v26 = v105;
  uint64_t v108 = v104;
  uint64_t v27 = (uint64_t)v101;
  if (a4 >> 60 != 15) {
    __asm { BR              X10 }
  }

  unint64_t v103 = v21;
  sub_1876398C0(0LL, 2LL);
  uint64_t v29 = v28;
  unint64_t v31 = v30;
  uint64_t v106 = v108;
  unint64_t v107 = v26;
  unint64_t v98 = v26;
  sub_187623A28(v108, v26);
  sub_18763CF30(v29, v31);
  sub_187623C58(v29, v31);
  uint64_t v32 = v106;
  unint64_t v33 = v107;
  uint64_t v104 = v106;
  unint64_t v105 = v107;
  sub_18764642C(v27, a4);
  sub_187623A28(v32, v33);
  sub_187623A28(0LL, 0xC000000000000000LL);
  sub_18763CF30(0LL, 0xC000000000000000LL);
  sub_187623C58(0LL, 0xC000000000000000LL);
  sub_187623C58(0LL, 0xC000000000000000LL);
  sub_187623C58(v32, v33);
  uint64_t v35 = v104;
  unint64_t v34 = v105;
  sub_18769A448();
  uint64_t v36 = sub_18769A43C();
  unint64_t v38 = v37;
  v99(v18, v25);
  if (v38 >> 60 == 15) {
    goto LABEL_18;
  }
  uint64_t v104 = v36;
  unint64_t v105 = v38;
  uint64_t v40 = v102;
  unint64_t v39 = v103;
  sub_187623A28(v102, v103);
  sub_18764642C(v36, v38);
  sub_18763CF30(v40, v39);
  sub_187623C58(v40, v39);
  sub_1876482B4(v36, v38);
  uint64_t v41 = v104;
  unint64_t v42 = v105;
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  uint64_t v43 = sub_18769A220();
  uint64_t v44 = v100;
  uint64_t v45 = sub_187641FD8(v35, v34, 1LL, v41, v42, v43, 0);
  id v101 = v44;
  if (v44)
  {
    sub_187623C58(v41, v42);
    sub_187623C58(v35, v34);
    sub_187623C58(v108, v98);
    sub_187623C58(v40, v39);
    return;
  }

  uint64_t v100 = (void *)v35;
  if (!*(void *)(v45 + 16)) {
    goto LABEL_19;
  }
  int64_t v99 = (void (*)(char *, uint64_t))v34;
  id v46 = *(id *)(v45 + 32);
  swift_bridgeObjectRelease();
  sub_187623C58(v41, v42);
  id v47 = v97;
  id v97 = v46;
  id v48 = sub_18766D8D0(v47, (uint64_t)v46);
  id v49 = objc_msgSend(v48, sel_inverseModOrder);
  if (!v49)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x18766CDFCLL);
  }

  uint64_t v50 = v49;
  int v51 = v95;
  id v52 = v96;
  id v53 = sub_18764FE4C((uint64_t)v49, v96);

  if (v51)
  {
    sub_18769A22C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
    swift_dynamicCast();
    id v95 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v106);
    sub_18769A22C();
    swift_dynamicCast();
    uint64_t v54 = v106;
    id v55 = objc_allocWithZone(MEMORY[0x18960F070]);
    uint64_t v56 = v102;
    id v57 = objc_msgSend(v55, sel_initWithGeneratorForCP_, v54);
    id v58 = sub_18764FE4C((uint64_t)v48, v57);

    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71D8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18769C700;
    *(void *)(inited + 32) = v53;
    *(void *)(inited + 40) = v52;
    id v91 = v53;
    id v60 = v52;
    id v61 = v48;
    id v62 = v101;
    sub_18766F288((uint64_t)&v104, (uint64_t)v48, v58, v56, v103, inited, v94 & 1);
    if (v62)
    {
      unint64_t v64 = v103;
      swift_bridgeObjectRelease();
      unint64_t v65 = v61;
      uint64_t v66 = (uint64_t)v100;
      unint64_t v67 = v61;
      id v68 = v95;

      sub_187623C58(v66, (unint64_t)v99);
      sub_187623C58(v108, v98);
      sub_187623C58(v56, v64);
    }

    else
    {
      unint64_t v70 = v63;
      v89[1] = inited + 32;
      v89[2] = v53;

      uint64_t v94 = (uint64_t)v61;
      uint64_t v71 = (void *)v104;
      id v72 = v70;
      id v101 = v71;
      id v73 = v92;
      id v74 = sub_18764FE4C((uint64_t)v73, v95);
      uint64_t v90 = v73;
      id v75 = sub_18764FE4C((uint64_t)v73, v72);
      uint64_t v76 = v56;
      id v77 = v101;
      id v92 = v58;
      id v96 = v72;
      unint64_t v78 = v72;
      id v79 = v74;
      sub_18767048C(v76, v103, v58, v78, v101, v74, v75);
      uint64_t v80 = (uint64_t)v100;
      v89[0] = v81;
      unint64_t v82 = (void *)v94;
      id v83 = sub_18766D7B8(v81, v94);
      int v84 = v90;
      id v91 = sub_18766D9E8(v90, (uint64_t)v83);

      uint64_t v85 = v79;
      id v86 = v96;

      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(qword_18C4C71E0);
      swift_arrayDestroy();
      sub_187623C58(v80, (unint64_t)v99);
      sub_187623C58(v108, v98);
      sub_187623C58(v102, v103);

      unint64_t v87 = v93;
      id v88 = v91;
      void *v93 = v89[0];
      v87[1] = v88;
    }
  }

  else
  {
    sub_187623C58((uint64_t)v100, (unint64_t)v99);
    sub_187623C58(v108, v98);
    sub_187623C58(v40, v39);

    unint64_t v69 = v93;
    void *v93 = 0LL;
    v69[1] = 0LL;
  }

void sub_18766CE0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, char a8)
{
  v23[3] = a4;
  uint64_t v13 = sub_18769A46C();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a8 & 1) != 0)
  {
    v23[2] = a5;
    sub_18769A448();
    uint64_t v17 = sub_18769A43C();
    unint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = sub_18764E194(a7, a6, 1);
      unint64_t v22 = v21;
      v23[8] = v17;
      v23[9] = v19;
      sub_187623A28(v17, v19);
      sub_18763CF30(v20, v22);
      sub_187623C58(v20, v22);
      sub_1876482B4(v17, v19);
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x18766D734LL);
  }

  __asm { BR              X10 }

id sub_18766D7B8(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_multiply_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    id result = (id)sub_18769A67C();
    __break(1u);
  }

  return result;
}

id sub_18766D8D0(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_add_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    id result = (id)sub_18769A67C();
    __break(1u);
  }

  return result;
}

id sub_18766D9E8(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_sub_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    id result = (id)sub_18769A67C();
    __break(1u);
  }

  return result;
}

id TDMClient.__allocating_init(TID:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = sub_1876713EC(a1, a2);
  sub_187623C58(a1, a2);
  return v6;
}

id TDMClient.init(TID:)(uint64_t a1, unint64_t a2)
{
  id v4 = sub_1876713EC(a1, a2);
  sub_187623C58(a1, a2);
  return v4;
}

id sub_18766DBF8()
{
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_be), sel_serializedPublicKey_, 1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_187699F98();

    return (id)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_18766DCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

id sub_18766DD54( uint64_t a1, unint64_t a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22, int a23, int a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  id v50 = (id)objc_opt_self();
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v91 = v50;
  int64_t v51 = (int64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, v95);
  if (v51 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if (v51 + 0x4000000000000000LL < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (BYTE6(v45) != 2 * v51)
  {
    sub_18765175C();
    swift_allocError();
    *unint64_t v69 = 0;
    swift_willThrow();
    return v50;
  }

  unint64_t v84 = v49;
  uint64_t v52 = v48;
  sub_187623A28(v48, v45);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v53 = (uint64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, v94);
  if (v53 < 0) {
    goto LABEL_19;
  }
  uint64_t v83 = v46;
  sub_1876356D4(v53, v48, v45);
  uint64_t v54 = v95;
  unint64_t v55 = (unint64_t)v96;
  int v93 = 0;
  sub_187623A28(v95, (unint64_t)v96);
  sub_18769A22C();
  swift_dynamicCast();
  id v50 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v56 = v45;
  uint64_t v57 = v52;
  id v58 = (void *)sub_187699F80();
  id v59 = objc_msgSend(v50, sel_initWithData_inGroup_reduction_corecryptoError_, v58, v94, 0, &v93);
  sub_187623C58(v54, v55);

  if (!v59)
  {
    int v70 = v93;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v71 = v70;
    *(_BYTE *)(v71 + 4) = 0;
    swift_willThrow();
    uint64_t v72 = v54;
    unint64_t v73 = v55;
LABEL_14:
    sub_187623C58(v72, v73);
    return v50;
  }

  sub_187623C58(v54, v55);
  sub_187623A28(v57, v56);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v60 = (uint64_t)objc_msgSend(v91, sel_groupOrderByteCountForCP_, v94);
  if (v60 < 0)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x18766E2F8LL);
  }

  sub_18766E314(v60, v57, v56);
  uint64_t v61 = v95;
  id v50 = v96;
  int v93 = 0;
  sub_187623A28(v95, (unint64_t)v96);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v62 = v94;
  id v63 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v64 = (void *)sub_187699F80();
  id v65 = objc_msgSend(v63, sel_initWithData_inGroup_reduction_corecryptoError_, v64, v62, 0, &v93);
  sub_187623C58(v61, (unint64_t)v50);

  if (!v65)
  {
    int v74 = v93;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v75 = v74;
    *(_BYTE *)(v75 + 4) = 0;
    swift_willThrow();

    uint64_t v72 = v61;
    unint64_t v73 = (unint64_t)v50;
    goto LABEL_14;
  }

  sub_187623C58(v61, (unint64_t)v50);
  id v66 = v59;
  id v67 = v65;
  id v50 = (id)v89;
  sub_187623A28(v89, a8);
  id v68 = sub_187646200();
  if (v47)
  {
    sub_187623C58(v89, a8);
  }

  else
  {
    id v77 = v68;
    sub_187623C58(v89, a8);
    sub_187623A28(v87, v84);
    id v78 = sub_187646200();
    sub_187623C58(v87, v84);
    char v92 = *(_BYTE *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient);
    uint64_t v90 = *(void *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient + 8);
    char v79 = *(_BYTE *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient + 16);
    uint64_t v80 = *(void *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input);
    uint64_t v81 = *(void *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input + 8);
    id v82 = *(id *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_blind);
    id v50 = sub_18764F23C(v80, v81, a1, a2, v82, v78, v66, (uint64_t)v67, v77, v92, v90, v79);
  }

  return v50;
}

void sub_18766E314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x18766E460LL);
}

void TDMClient.init()()
{
}

id TDMClient.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for TDMClient);
}

uint64_t TDMServerEvaluation.proof.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof + 8));
  return v1;
}

uint64_t TDMServerEvaluation.evaluatedElement.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement);
  sub_187623A28(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement + 8));
  return v1;
}

id TDMServerEvaluation.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TDMServerEvaluation.init()()
{
}

id TDMServerEvaluation.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for TDMServerEvaluation);
}

id TDMServer.init()()
{
  uint64_t v1 = v0;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v6);
  if (result)
  {
    *(void *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_secret] = result;
    uint64_t v3 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer];
    *uint64_t v3 = 1;
    *((void *)v3 + 1) = 4LL;
    *((void *)v3 + 2) = result;
    v3[24] = 1;
    id v4 = result;

    v5.receiver = v1;
    v5.super_class = (Class)type metadata accessor for TDMServer();
    return objc_msgSendSuper2(&v5, sel_init);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_18766E98C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 16);
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  id v2 = v1;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v8);
  id v4 = sub_18764FE4C((uint64_t)v2, v3);

  id result = objc_msgSend(v4, sel_serializedPublicKey_, 1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_187699F98();

    return (id)v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_18766EB0C()
{
  return 0LL;
}

uint64_t sub_18766EBA8(uint64_t a1, unint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  sub_187623A28(a1, a2);
  id v6 = sub_187646200();
  sub_187623C58(a1, a2);
  if (v3) {
    return (uint64_t)v2;
  }
  int v7 = v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer];
  uint64_t v8 = *(void *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 8];
  char v9 = v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 24];
  id v10 = *(id *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 16];
  sub_18769A37C();
  sub_187639840( (unint64_t *)&qword_18C4C7198,  (uint64_t (*)(uint64_t))MEMORY[0x189605D70],  MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  BOOL v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v45);
  if (!v11)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  id v2 = v11;
  if (v7 == 1) {
    char v12 = v9;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    sub_18765175C();
    swift_allocError();
    *unint64_t v37 = 1;
    swift_willThrow();

    return (uint64_t)v2;
  }

  id v13 = sub_18766B36C(&v46, v6, 0LL, 0x8000000000000uLL, v11, v7, v8, v10, v9);
  uint64_t v14 = v46;
  if (!v46) {
    goto LABEL_15;
  }
  uint64_t v15 = v13;
  uint64_t v16 = v47;

  id v17 = objc_msgSend(v14, sel_serializedBigEndianScalar);
  if (!v17) {
    goto LABEL_17;
  }
  unint64_t v18 = v17;
  unint64_t v42 = v14;
  uint64_t v19 = sub_187699F98();
  unint64_t v43 = v20;

  uint64_t v41 = v16;
  id v21 = objc_msgSend(v16, sel_serializedBigEndianScalar);
  if (!v21) {
    goto LABEL_17;
  }
  unint64_t v22 = v21;
  uint64_t v23 = sub_187699F98();
  unint64_t v25 = v24;

  uint64_t v46 = (void *)v19;
  uint64_t v47 = (void *)v43;
  uint64_t v40 = v19;
  sub_187623A28(v19, v43);
  sub_187623A28(v23, v25);
  sub_18763CF30(v23, v25);
  sub_187623C58(v23, v25);
  unint64_t v26 = v46;
  uint64_t v27 = v47;
  id v28 = objc_msgSend(v15, sel_serializedPublicKey_, 1);
  unint64_t v39 = v15;
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = sub_187699F98();
    uint64_t v32 = v31;

    unint64_t v33 = (objc_class *)type metadata accessor for TDMServerEvaluation();
    unint64_t v34 = (char *)objc_allocWithZone(v33);
    uint64_t v35 = &v34[OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof];
    *(void *)uint64_t v35 = v26;
    *((void *)v35 + 1) = v27;
    uint64_t v36 = (uint64_t *)&v34[OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement];
    *uint64_t v36 = v30;
    v36[1] = v32;
    v44.receiver = v34;
    v44.super_class = v33;
    id v2 = objc_msgSendSuper2(&v44, sel_init);
    sub_187623C58(v23, v25);
    sub_187623C58(v40, v43);

    return (uint64_t)v2;
  }

uint64_t sub_18766F02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6)
{
  id v13 = (id *)(v6 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer);
  uint64_t v14 = *(void *)(v6 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 8);
  char v15 = *((_BYTE *)v13 + 24);
  int v16 = *(unsigned __int8 *)v13;
  id v17 = v13[2];
  sub_18766BF1C(a3, a4, a1, a2, a5, a6, v16, v14, v17, v15);
  LOBYTE(v14) = v18;

  return v14 & 1;
}

id TDMServer.__deallocating_deinit()
{
  return sub_187641EF8(type metadata accessor for TDMServer);
}

void sub_18766F288(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  int v26 = a7;
  uint64_t v35 = a6;
  v25[15] = a2;
  v25[2] = a1;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v10 = sub_18769A3D0();
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v36 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_18769A1F0();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  uint64_t v31 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_18769A46C();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  int v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18769A448();
  uint64_t v17 = sub_18769A43C();
  unint64_t v19 = v18;
  unint64_t v20 = *(void (**)(void, void))(v14 + 8);
  uint64_t v29 = v16;
  uint64_t v30 = v13;
  id v28 = v20;
  v20(v16, v13);
  if (v19 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v37 = v17;
    unint64_t v38 = v19;
    sub_18764642C(v17, v19);
    sub_187623A28(a4, a5);
    sub_18763CF30(a4, a5);
    uint64_t v27 = a4;
    v25[13] = a5;
    sub_187623C58(a4, a5);
    sub_1876482B4(v17, v19);
    id v21 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
    if (v21)
    {
      unint64_t v22 = v21;
      v25[9] = sub_187699F98();
      uint64_t v24 = v23;

      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x1876703F0LL);
}

void sub_18767048C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v24 = sub_18769A46C();
  MEMORY[0x1895F8858](v24);
  id v12 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
  if (v12)
  {
    uint64_t v13 = v12;
    sub_187699F98();
    uint64_t v15 = v14;

    id v16 = objc_msgSend(a4, sel_serializedPublicKey_, 1);
    if (v16)
    {
      uint64_t v17 = v16;
      sub_187699F98();

      id v18 = objc_msgSend(a5, sel_serializedPublicKey_, 1);
      if (v18)
      {
        unint64_t v19 = v18;
        sub_187699F98();

        id v20 = objc_msgSend(a6, sel_serializedPublicKey_, 1);
        if (v20)
        {
          id v21 = v20;
          sub_187699F98();

          id v22 = objc_msgSend(a7, sel_serializedPublicKey_, 1);
          if (v22)
          {
            uint64_t v23 = v22;
            sub_187699F98();

            __asm { BR              X10 }
          }

void sub_187670F74(uint64_t a1)
{
  __asm { BR              X13 }

void *sub_187670FD0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  unsigned __int8 v32 = BYTE4(v24);
  unsigned __int8 v33 = BYTE5(v24);
  unsigned __int8 v34 = BYTE6(v24);
  uint64_t result = memset(&v30, v27, BYTE6(v24));
  unint64_t v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *int v26 = v30;
  v26[1] = v29;
  return result;
}

char *sub_18767115C(int *a1, int a2)
{
  uint64_t result = (char *)sub_187699F20();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = (char *)sub_187699E90();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  int v7 = result;
  uint64_t result = (char *)sub_187699EB4();
  uint64_t v8 = v5 - (void)result;
  if (__OFSUB__(v5, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int64_t v9 = v6 - v5;
  uint64_t v10 = sub_187699EA8();
  if (v10 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v10;
  }
  return (char *)memset(&v7[v8], a2, v11);
}

uint64_t sub_1876711DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_187699E90();
  if (!result || (uint64_t result = sub_187699EB4(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_187699EA8();
      sub_18769A3D0();
      sub_187639840(&qword_18C4C71B8, (uint64_t (*)(uint64_t))MEMORY[0x189605E10], MEMORY[0x189605E08]);
      return sub_18769A1B4();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1876712A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x187671300LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_1876712B8 + dword_187671304[a4 >> 62]))(v5);
}

uint64_t sub_187671314(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_187671324 + dword_1876713CC[a4 >> 62]))();
}

uint64_t sub_187671338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1876713C4LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_187671374 + dword_1876713DC[a3]))();
}

id sub_1876713EC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_18769A46C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = (uint64_t *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input];
  *int64_t v9 = a1;
  v9[1] = a2;
  uint64_t v10 = &v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient];
  *uint64_t v10 = 1;
  *((void *)v10 + 1) = 4LL;
  v10[16] = 1;
  sub_18769A37C();
  size_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x189605D70];
  id v12 = v2;
  unint64_t v41 = a2;
  sub_187623A28(a1, a2);
  sub_187639840((unint64_t *)&qword_18C4C7198, v11, MEMORY[0x189605D68]);
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v43);
  if (!v13)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v14 = (uint64_t)v13;
  sub_18769A448();
  uint64_t v15 = sub_18769A43C();
  unint64_t v17 = v16;
  id v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v8, v5);
  if (v17 >> 60 == 15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  sub_18769A448();
  uint64_t v19 = sub_18769A43C();
  unint64_t v21 = v20;
  v18(v8, v5);
  if (v21 >> 60 != 15)
  {
    sub_1876398C0(1LL, 1LL);
    uint64_t v23 = v22;
    unint64_t v25 = v24;
    uint64_t v43 = v19;
    unint64_t v44 = v21;
    sub_187623A28(v19, v21);
    sub_18763CF30(v23, v25);
    sub_187623C58(v23, v25);
    sub_1876482B4(v19, v21);
    uint64_t v26 = v43;
    unint64_t v27 = v44;
    sub_1876398C0(4LL, 2LL);
    uint64_t v29 = v28;
    unint64_t v31 = v30;
    uint64_t v45 = v26;
    unint64_t v46 = v27;
    sub_187623A28(v26, v27);
    sub_18763CF30(v29, v31);
    sub_187623C58(v29, v31);
    sub_187623C58(v26, v27);
    uint64_t v32 = v45;
    uint64_t v33 = v46;
    uint64_t v45 = v15;
    unint64_t v46 = v17;
    sub_187623A28(v15, v17);
    sub_18763CF30(v32, v33);
    sub_187623C58(v32, v33);
    sub_1876482B4(v15, v17);
    uint64_t v34 = v45;
    unint64_t v35 = v46;
    sub_187651220(a1, v41, v45, v46);
    uint64_t v37 = v36;
    id v38 = sub_18764FE4C(v14, v36);
    sub_187623C58(v34, v35);

    *(void *)&v12[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_blind] = v14;
    *(void *)&v12[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_be] = v38;

    uint64_t v39 = (objc_class *)type metadata accessor for TDMClient();
    v42.receiver = v12;
    v42.super_class = v39;
    return objc_msgSendSuper2(&v42, sel_init);
  }

uint64_t type metadata accessor for TDMClient()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TDMServerEvaluation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TDMServer()
{
  return objc_opt_self();
}

uint64_t method lookup function for TDMClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TDMClient.__allocating_init(TID:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TDMClient.blindedElement()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x78LL))();
}

uint64_t dispatch thunk of TDMClient.finalize(FSR:evaluatedElement:proof:publicKey:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x80LL))();
}

uint64_t method lookup function for TDMServerEvaluation()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for TDMServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TDMServer.publicKey()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x60LL))();
}

uint64_t dispatch thunk of TDMServer.info()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x68LL))();
}

uint64_t dispatch thunk of TDMServer.evaluate(blindedElement:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x70LL))();
}

uint64_t dispatch thunk of TDMServer.verifyToken(output:TID:FSR:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x78LL))();
}

uint64_t storeEnumTagSinglePayload for OPRFErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1876718FC + 4 * byte_18769E355[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187671930 + 4 * asc_18769E350[v4]))();
}

uint64_t sub_187671930(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187671938(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187671940LL);
  }
  return result;
}

uint64_t sub_18767194C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187671954LL);
  }
  *(_BYTE *)id result = a2 + 2;
  return result;
}

uint64_t sub_187671958(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187671960(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OPRFErrors()
{
  return &type metadata for OPRFErrors;
}

unint64_t sub_187671980()
{
  unint64_t result = qword_18C6DA3A8;
  if (!qword_18C6DA3A8)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769E414, &type metadata for OPRFErrors);
    atomic_store(result, (unint64_t *)&qword_18C6DA3A8);
  }

  return result;
}

void sub_1876719C4(void *a1, void *a2)
{
  if (a1)
  {
  }

uint64_t SPAKE2.Spake2Error.hash(into:)()
{
  return sub_18769A760();
}

BOOL static SPAKE2.Spake2Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SPAKE2.Spake2Error.hashValue.getter()
{
  return sub_18769A778();
}

uint64_t static SPAKE2.minimumSeedCount.getter()
{
  return 16LL;
}

uint64_t static SPAKE2.CipherSuite.== infix(_:_:)()
{
  return 1LL;
}

uint64_t SPAKE2.CipherSuite.hash(into:)()
{
  return sub_18769A760();
}

uint64_t SPAKE2.CipherSuite.hashValue.getter()
{
  return sub_18769A778();
}

uint64_t SPAKE2.WL.w0.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_187623A28(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SPAKE2.WL.L.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_187623A28(v1, *(void *)(v0 + 24));
  return v1;
}

void sub_187671B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18769A214();
  uint64_t v3 = MEMORY[0x1895F8858](v4);
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

uint64_t sub_187671C00()
{
  if (BYTE6(v1) < 0x10uLL)
  {
    sub_187672730();
    swift_allocError();
    *size_t v11 = 3;
    return swift_willThrow();
  }

  *(void *)(v10 - 136) = v0;
  *(void *)(v10 - 96) = v5;
  *(void *)(v10 - 88) = v1;
  sub_187623A28(v5, v1);
  sub_18769A208();
  *(void *)(v10 - 96) = v3;
  *(void *)(v10 - 88) = v9;
  *(void *)(v10 - 112) = v8;
  *(void *)(v10 - 104) = v6;
  uint64_t v13 = *(void *)(v2 + 24);
  if (v13 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(2 * v13, 16LL))
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x187671F5CLL);
  }

  sub_18769A3C4();
  sub_18762AC84();
  sub_18764D2A8();
  sub_18769A2BC();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v15 = v7;
  uint64_t v16 = *(void *)(v10 - 120);
  uint64_t v17 = v14(v15, v16);
  MEMORY[0x1895F8858](v17);
  __swift_instantiateConcreteTypeFromMangledName(qword_18C4C7100);
  uint64_t v18 = sub_18769A1FC();
  MEMORY[0x1895F8858](v18);
  sub_18769A1FC();
  *(_DWORD *)(v10 - 68) = 0;
  *(void *)(v10 - 96) = sub_187644164(v13);
  *(void *)(v10 - 88) = v19;
  sub_1876790F0(v10 - 96);
  int v20 = *(_DWORD *)(v10 - 68);
  if (v20)
  {
    if (v20 == -2)
    {
      sub_187672730();
      swift_allocError();
      _BYTE *v21 = 0;
    }

    else
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v26 = v20;
      *(_BYTE *)(v26 + 4) = 0;
    }

    swift_willThrow();
    swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(v10 - 112) = sub_187644164(v13);
    *(void *)(v10 - 104) = v22;
    sub_1876790F0(v10 - 112);
    int v23 = *(_DWORD *)(v10 - 68);
    if (v23 == -2)
    {
      sub_187672730();
      swift_allocError();
      *unint64_t v27 = 0;
    }

    else
    {
      if (!v23)
      {
        uint64_t result = v14(*(void *)(v10 - 136), v16);
        __int128 v24 = *(_OWORD *)(v10 - 112);
        unint64_t v25 = *(_OWORD **)(v10 - 144);
        *unint64_t v25 = *(_OWORD *)(v10 - 96);
        v25[1] = v24;
        return result;
      }

      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v28 = v23;
      *(_BYTE *)(v28 + 4) = 0;
    }

    swift_willThrow();
    sub_187623C58(*(void *)(v10 - 112), *(void *)(v10 - 104));
  }

  sub_187623C58(*(void *)(v10 - 96), *(void *)(v10 - 88));
  return v14(*(void *)(v10 - 136), v16);
}

int64_t sub_187671F74@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int64_t *a5@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 24);
  int64_t result = v8 + a4;
  if (__OFADD__(v8, a4))
  {
    __break(1u);
  }

  else
  {
    int64_t v10 = sub_18763621C(result, a1, a2);
    int64_t result = sub_18762844C(v10, v11, v12, v13);
    *a5 = result;
  }

  return result;
}

void sub_187671FC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, _OWORD *a4@<X8>)
{
  if (!v4)
  {
    __int128 v7 = v14;
    uint64_t v8 = v15;
    unint64_t v9 = v16;
    int v17 = 0;
    *(void *)&__int128 v14 = sub_187644164(*(void *)(a3 + 32));
    *((void *)&v14 + 1) = v10;
    sub_187623A28(v7, *((unint64_t *)&v7 + 1));
    sub_187623A28(v15, v16);
    sub_187679444((uint64_t)&v14);
    int v11 = v17;
    if (v17 == -2)
    {
      sub_187672730();
      swift_allocError();
      *uint64_t v12 = 0;
    }

    else
    {
      if (!v17)
      {
        sub_187623A28(v7, *((unint64_t *)&v7 + 1));
        sub_187623C58(v7, *((unint64_t *)&v7 + 1));
        sub_187623C58(v8, v9);
        *a4 = v7;
        a4[1] = v14;
        return;
      }

      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v13 = v11;
      *(_BYTE *)(v13 + 4) = 0;
    }

    swift_willThrow();
    sub_187623C58(v14, *((unint64_t *)&v14 + 1));
    sub_187623C58(v7, *((unint64_t *)&v7 + 1));
    sub_187623C58(v8, v9);
  }

void sub_187672128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

uint64_t sub_18767218C()
{
  if (!v1)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (!ccrng())
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x187672408LL);
  }

  uint64_t result = ccspake_generate_L();
  *uint64_t v0 = result;
  return result;
}

void sub_18767243C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (ccrng()) {
    __asm { BR              X16 }
  }

  __break(1u);
  JUMPOUT(0x187672620LL);
}

__n128 SPAKE2.Prover.init(w0:w1:context:verifierID:proverID:cipherSuite:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return result;
}

uint64_t SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  return sub_187678510( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  (void (*)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void *))sub_187671B4C);
}

uint64_t SPAKE2.Prover.getShare()()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_187623A28(v1, *(void *)(v0 + 72));
  return v1;
}

void SPAKE2.Prover.processPeerShareAndGenerateVerificationTag(peerShare:)(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_187672730()
{
  unint64_t result = qword_18C6DA3B0;
  if (!qword_18C6DA3B0)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for SPAKE2.Spake2Error,  &type metadata for SPAKE2.Spake2Error);
    atomic_store(result, (unint64_t *)&qword_18C6DA3B0);
  }

  return result;
}

void SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)(uint64_t a1, uint64_t a2)
{
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverV2wsAC2WSVvg_0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[10];
  unint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  unint64_t v5 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_187623A28(v2, v3);
  return sub_187623A28(v4, v5);
}

void sub_1876727F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void *)(a8 + 16);
  if ((v8 & 0x8000000000000000LL) == 0)
  {
    if (v8)
    {
      uint64_t v9 = sub_18769A550();
      *(void *)(v9 + 16) = v8;
      bzero((void *)(v9 + 32), v8);
    }

    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187674A84LL);
}

void sub_187675B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_187675BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = v13;
  unint64_t v16 = v8;
  *(void *)(v14 - 112) = v9;
  *(_WORD *)(v14 - 104) = a4;
  *(_BYTE *)(v14 - 102) = BYTE2(a4);
  uint64_t v17 = v12;
  *(_BYTE *)(v14 - 101) = BYTE3(a4);
  *(_BYTE *)(v14 - 100) = BYTE4(a4);
  *(_BYTE *)(v14 - 99) = BYTE5(a4);
  uint64_t v18 = v15;
  unint64_t v20 = v7;
  sub_187623A28(a7, v11);
  sub_187623A28(v17, v16);
  sub_187623A28(v18, v20);
  *(void *)(v14 - 168) = a7;
  *(void *)(v14 - 160) = v11;
  sub_187623A28(a7, v11);
  sub_187623A28(v17, v16);
  uint64_t v21 = sub_187623A28(v18, v20);
  return ((uint64_t (*)(uint64_t))((char *)&loc_187675CF0 + dword_18767705C[v10 >> 62]))(v21);
}

uint64_t sub_187675D0C()
{
  *(void *)(v3 - 128) = v1;
  unint64_t v4 = v0;
  *(_WORD *)(v3 - 120) = v0;
  *(_BYTE *)(v3 - 118) = BYTE2(v0);
  *(_BYTE *)(v3 - 117) = BYTE3(v0);
  *(_BYTE *)(v3 - 116) = BYTE4(v0);
  *(_BYTE *)(v3 - 115) = BYTE5(v0);
  uint64_t v5 = v3 - 128 + BYTE6(v0);
  sub_187623A28(v1, v0);
  unint64_t v6 = *(void *)(v3 - 152);
  sub_187623A28(v2, v6);
  uint64_t v7 = v5;
  unint64_t v8 = *(void *)(v3 - 144);
  unint64_t v9 = *(void *)(v3 - 160);
  uint64_t v10 = *(void *)(v3 - 176);
  sub_1876776A8(v3 - 128, v7, *(void *)(v3 - 168), v9);
  *(void *)(v3 - 176) = v10;
  if (v10)
  {
    sub_187623C58(v1, v4);
    sub_187623C58(v2, v6);
    uint64_t v15 = *(void *)(v3 - 168);
    sub_187623C58(v15, v9);
    sub_187623C58(v19, v8);
    unint64_t v16 = *(void *)(v3 - 136);
    sub_187623C58(v17, v16);
    sub_187623C58(v2, v6);
    sub_187623C58(v1, v4);
    sub_187623C58(v15, v9);
    sub_187623C58(v19, *(void *)(v3 - 144));
    sub_187623C58(v17, v16);
    sub_187623C58(v2, v6);
    sub_187623C58(v1, v4);
    __break(1u);
    JUMPOUT(0x187676EDCLL);
  }

  unint64_t v11 = v8;
  sub_187623C58(v2, v6);
  unint64_t v12 = *(void *)(v3 - 136);
  sub_187623C58(v1, v4);
  sub_187623C58(v1, v4);
  uint64_t v13 = *(void *)(v3 - 168);
  sub_187623C58(v13, v9);
  sub_187623C58(v19, v11);
  sub_187623C58(v17, v12);
  sub_187623C58(v18, v6);
  sub_187623C58(v1, v4);
  sub_187623C58(v13, v9);
  sub_187623C58(v19, v11);
  sub_187623C58(v17, *(void *)(v3 - 136));
  return sub_187623C58(v18, v6);
}

void sub_18767706C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_187677104()
{
  *(void *)(v9 - 112) = v0;
  *(_WORD *)(v9 - 104) = v1;
  *(_BYTE *)(v9 - 102) = BYTE2(v1);
  *(_BYTE *)(v9 - 101) = BYTE3(v1);
  *(_BYTE *)(v9 - 100) = BYTE4(v1);
  *(_BYTE *)(v9 - 99) = BYTE5(v1);
  sub_187623A28(v2, v8);
  sub_187623A28(v7, v5);
  sub_187623A28(v6, v4);
  sub_187623A28(v3, *(void *)(v9 - 120));
  uint64_t v10 = *(void *)(v9 - 136);
  sub_1876776A8(v9 - 112, v9 - 112 + BYTE6(v1), v2, v8);
  if (v10)
  {
    sub_187623C58(v0, v1);
    sub_187623C58(v2, v8);
    sub_187623C58(v7, v5);
    sub_187623C58(v6, v4);
    sub_187623C58(*(void *)(v9 - 128), *(void *)(v9 - 120));
    sub_187623C58(v0, v1);
    __break(1u);
    JUMPOUT(0x187677698LL);
  }

  sub_187623C58(v0, v1);
  sub_187623C58(v2, v8);
  sub_187623C58(v7, v5);
  sub_187623C58(v6, v4);
  sub_187623C58(*(void *)(v9 - 128), *(void *)(v9 - 120));
  return sub_187623C58(v0, v1);
}

void sub_1876776A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_187677740()
{
  *(void *)(v9 - 112) = v6;
  *(_WORD *)(v9 - 104) = v0;
  *(_BYTE *)(v9 - 102) = BYTE2(v0);
  *(_BYTE *)(v9 - 101) = BYTE3(v0);
  *(_BYTE *)(v9 - 100) = BYTE4(v0);
  *(_BYTE *)(v9 - 99) = BYTE5(v0);
  sub_187623A28(v6, v0);
  sub_187623A28(v8, v7);
  sub_187623A28(v5, v4);
  sub_187623A28(v3, v2);
  sub_187623A28(v1, *(void *)(v9 - 120));
  uint64_t v10 = *(void *)(v9 - 136);
  sub_187677D68(v9 - 112, v9 - 112 + BYTE6(v0), v6, v0, v8, v7);
  if (v10)
  {
    sub_187623C58(v6, v0);
    sub_187623C58(v8, v7);
    sub_187623C58(v5, v4);
    sub_187623C58(v3, v2);
    sub_187623C58(*(void *)(v9 - 128), *(void *)(v9 - 120));
    __break(1u);
    JUMPOUT(0x187677CC4LL);
  }

  sub_187623C58(v6, v0);
  sub_187623C58(v8, v7);
  sub_187623C58(v5, v4);
  sub_187623C58(v3, v2);
  return sub_187623C58(*(void *)(v9 - 128), *(void *)(v9 - 120));
}

void sub_187677D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

uint64_t sub_187677DE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v21 - 112) = v20;
  *(_WORD *)(v21 - 104) = v18;
  *(_BYTE *)(v21 - 102) = BYTE2(v18);
  *(_BYTE *)(v21 - 101) = BYTE3(v18);
  *(_BYTE *)(v21 - 100) = BYTE4(v18);
  *(_BYTE *)(v21 - 99) = BYTE5(v18);
  return v8( v21 - 112,  v21 - 112 + BYTE6(v18),  a7,  a8,  a5,  a6,  v10,  v9,  v11,  v12,  v15,  a3,  a4,  v14,  a1,  v19,  v13,  v16,  v17);
}

void sub_18767811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (ccrng()) {
    __asm { BR              X16 }
  }

  __break(1u);
  JUMPOUT(0x187678300LL);
}

__n128 SPAKE2.Verifier.init(w0:L:context:verifierID:proverID:cipherSuite:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return result;
}

void sub_18767837C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v41 = a4;
  uint64_t v19 = ccspake_cp_256_rfc();
  if (!v19)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v20 = v19;
  uint64_t v21 = ccspake_mac_hkdf_hmac_sha256();
  if (!v21)
  {
LABEL_7:
    __break(1u);
    return;
  }

  v39[0] = v20;
  v39[1] = v21;
  v39[2] = ccspake_sizeof_ctx();
  v39[3] = ccspake_sizeof_w();
  v39[4] = ccspake_sizeof_point();
  int64x2_t v40 = vdupq_n_s64(0x20uLL);
  v30[0] = a1;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = v41;
  sub_1876727F4((uint64_t)v30, a5, a6, a7, a8, a10, a11, (uint64_t)v39);
  if (!v11)
  {
    uint64_t v22 = v32;
    uint64_t v23 = v38;
    __int128 v24 = v33;
    __int128 v25 = v34;
    __int128 v26 = v35;
    __int128 v27 = v36;
    __int128 v28 = v37;
    *(_OWORD *)a9 = v31;
    *(void *)(a9 + 16) = v22;
    *(_OWORD *)(a9 + 24) = v24;
    *(_OWORD *)(a9 + 40) = v25;
    *(_OWORD *)(a9 + 56) = v26;
    *(_OWORD *)(a9 + 72) = v27;
    *(_OWORD *)(a9 + 88) = v28;
    *(void *)(a9 + 104) = v23;
  }

uint64_t SPAKE2.Verifier.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  return sub_187678510( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  (void (*)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void *))sub_187671FC0);
}

uint64_t sub_187678510@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, void (*a15)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void *))
{
  unint64_t v52 = a6;
  uint64_t result = ccspake_cp_256_rfc();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v23 = result;
  uint64_t v36 = a9;
  uint64_t result = ccspake_mac_hkdf_hmac_sha256();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  v50[0] = v23;
  v50[1] = result;
  v50[2] = ccspake_sizeof_ctx();
  v50[3] = ccspake_sizeof_w();
  v50[4] = ccspake_sizeof_point();
  int64x2_t v51 = vdupq_n_s64(0x20uLL);
  unint64_t v24 = v52;
  a15(&v42, a1, a2, a3, a4, a5, v52, v50);
  if (v15)
  {
    sub_187623C58(a12, a13);
    sub_187623C58(a10, a11);
    sub_187623C58(a7, a8);
    sub_187623C58(a5, v24);
    sub_187623C58(a3, a4);
    return sub_187623C58(a1, a2);
  }

  else
  {
    __int128 v25 = v42;
    unint64_t v26 = v24;
    uint64_t v27 = v43;
    unint64_t v28 = v44;
    __int128 v39 = v42;
    uint64_t v40 = v43;
    uint64_t v41 = v44;
    sub_187623A28(v42, *((unint64_t *)&v42 + 1));
    sub_187623A28(v27, v28);
    sub_1876727F4((uint64_t)&v39, a7, a8, a10, a11, a12, a13, (uint64_t)v50);
    sub_187623C58(a5, v26);
    sub_187623C58(a3, a4);
    sub_187623C58(a1, a2);
    sub_187623C58(v25, *((unint64_t *)&v25 + 1));
    uint64_t result = sub_187623C58(v27, v28);
    uint64_t v29 = v43;
    uint64_t v30 = v49;
    __int128 v31 = v44;
    __int128 v32 = v45;
    __int128 v33 = v46;
    __int128 v34 = v47;
    __int128 v35 = v48;
    *(_OWORD *)uint64_t v36 = v42;
    *(void *)(v36 + 16) = v29;
    *(_OWORD *)(v36 + 24) = v31;
    *(_OWORD *)(v36 + 40) = v32;
    *(_OWORD *)(v36 + 56) = v33;
    *(_OWORD *)(v36 + 72) = v34;
    *(_OWORD *)(v36 + 88) = v35;
    *(void *)(v36 + 104) = v30;
  }

  return result;
}

void SPAKE2.Verifier.processPeerShareAndGenerateVerificationTag(peerShare:)(uint64_t a1, uint64_t a2)
{
}

void sub_187678784(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1876787C0()
{
  if (BYTE6(v1) == *(void *)(v0 + 40))
  {
    v9[0] = sub_187644164(*(void *)(v0 + 56));
    v9[1] = v3;
    unint64_t v4 = *(char **)v0;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v0 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v4 = sub_187631FCC((uint64_t)v4);
      *(void *)uint64_t v0 = v4;
    }

    sub_18767896C((uint64_t)(v4 + 32), v2, v1);
    *(void *)uint64_t v0 = v4;
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v0 = v4;
    if ((v6 & 1) == 0)
    {
      unint64_t v4 = sub_187631FCC((uint64_t)v4);
      *(void *)uint64_t v0 = v4;
    }

    sub_187679A74((uint64_t)v9);
    *(void *)uint64_t v0 = v4;
    return v9[0];
  }

  else
  {
    sub_187672730();
    swift_allocError();
    *uint64_t v8 = 1;
    return swift_willThrow();
  }

void sub_18767896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1876789C4()
{
  uint64_t result = ccspake_kex_process();
  *uint64_t v0 = result;
  return result;
}

void SPAKE2.Verifier.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)(uint64_t a1, uint64_t a2)
{
}

void sub_187678C38(uint64_t a1, uint64_t a2)
{
  size_t v4 = v2[6];
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a2;
    if (v4)
    {
      uint64_t v5 = sub_18769A550();
      *(void *)(v5 + 16) = v4;
      bzero((void *)(v5 + 32), v4);
    }

    size_t v4 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
LABEL_5:
    }
      __asm { BR              X10 }
  }

  *uint64_t v2 = (size_t)sub_187631FCC(v4);
  goto LABEL_5;
}

void sub_187678FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

uint64_t sub_18767903C()
{
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1876790E0LL);
  }

  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v3 = sub_18765AF3C(0LL, *((void *)v3 + 2), 0, v3);
  }
  *uint64_t v1 = v3;
  uint64_t result = ccspake_mac_verify_and_get_session_key();
  *uint64_t v0 = result;
  return result;
}

void sub_1876790F0(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_187679158@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  if (__OFADD__(*(void *)(v4 + 24), v5))
  {
    __break(1u);
    JUMPOUT(0x187679408LL);
  }

  *uint64_t v1 = ccspake_reduce_w();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = v3;
  v2[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

void sub_187679444(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_1876794B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v13 = v1;
  LOWORD(v14) = a1;
  BYTE2(v14) = BYTE2(a1);
  HIBYTE(v14) = BYTE3(a1);
  unsigned __int8 v15 = BYTE4(a1);
  unsigned __int8 v16 = BYTE5(a1);
  unsigned __int8 v17 = BYTE6(a1);
  sub_187672128((uint64_t)&v13, (uint64_t)&v13 + BYTE6(a1), v6, v5, v3, v2);
  uint64_t v11 = v14;
  uint64_t v12 = v13;
  uint64_t v7 = v15;
  uint64_t v8 = v16;
  uint64_t v9 = v17;
  sub_187623C58(v6, v5);
  uint64_t result = sub_187623C58(v3, v2);
  *uint64_t v4 = v12;
  v4[1] = v11 | (v7 << 32) | (v8 << 40) | (v9 << 48);
  return result;
}

void sub_187679788(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1876797EC@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  uint64_t result = ccspake_kex_generate();
  *uint64_t v3 = result;
  *unint64_t v2 = v1;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

void sub_187679A74(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_187679AD8@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  uint64_t result = ccspake_mac_compute();
  *uint64_t v3 = result;
  *unint64_t v2 = v1;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

uint64_t sub_187679D60(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_187699F20();
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if ((int)v12 < (int)v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_187699E90();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v13 = result;
  uint64_t result = sub_187699EB4();
  uint64_t v14 = v11 - result;
  if (__OFSUB__(v11, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v15 = v12 - v11;
  uint64_t v16 = sub_187699EA8();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_187672128(v13 + v14, v13 + v14 + v17, a2, a3, a4, a5);
  sub_187623C58(a2, a3);
  return sub_187623C58(a4, a5);
}

uint64_t sub_187679E54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t result = sub_187699E90();
  uint64_t v26 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v26 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v27 = sub_187699EA8();
  if (v27 >= a2 - a1) {
    uint64_t v28 = a2 - a1;
  }
  else {
    uint64_t v28 = v27;
  }
  uint64_t v29 = v26 + v28;
  if (v26) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0LL;
  }
  sub_187677D68(v26, v30, a4, a5, a6, a7);
  sub_187623C58(a4, a5);
  sub_187623C58(a6, a7);
  sub_187623C58(a11, a12);
  sub_187623C58(a15, a16);
  return sub_187623C58(a19, a20);
}

uint64_t sub_18767A00C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  uint64_t result = sub_187699E90();
  uint64_t v23 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v23 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v24 = sub_187699EA8();
  if (v24 >= a2 - a1) {
    uint64_t v25 = a2 - a1;
  }
  else {
    uint64_t v25 = v24;
  }
  uint64_t v26 = v23 + v25;
  if (v23) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0LL;
  }
  sub_187675B68(v23, v27, a4, a5);
  sub_187623C58(a4, a5);
  sub_187623C58(a6, a7);
  sub_187623C58(a8, a9);
  sub_187623C58(a10, a11);
  return sub_187623C58(a15, a16);
}

uint64_t sub_18767A1A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint64_t result = sub_187699E90();
  uint64_t v25 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v25 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v26 = sub_187699EA8();
  if (v26 >= a2 - a1) {
    uint64_t v27 = a2 - a1;
  }
  else {
    uint64_t v27 = v26;
  }
  uint64_t v28 = v25 + v27;
  if (v25) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0LL;
  }
  sub_18767706C(v25, v29, a4, a5);
  sub_187623C58(a4, a5);
  sub_187623C58(a6, a7);
  sub_187623C58(a8, a9);
  sub_187623C58(a13, a14);
  return sub_187623C58(a17, a18);
}

uint64_t sub_18767A348( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t result = sub_187699E90();
  uint64_t v27 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v27 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v28 = sub_187699EA8();
  if (v28 >= a2 - a1) {
    uint64_t v29 = a2 - a1;
  }
  else {
    uint64_t v29 = v28;
  }
  uint64_t v30 = v27 + v29;
  if (v27) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0LL;
  }
  sub_1876776A8(v27, v31, a4, a5);
  sub_187623C58(a4, a5);
  sub_187623C58(a6, a7);
  sub_187623C58(a11, a12);
  sub_187623C58(a15, a16);
  return sub_187623C58(a19, a20);
}

uint64_t sub_18767A4F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result = sub_187699E90();
  uint64_t v14 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v14 += a1 - result;
  }

  BOOL v15 = __OFSUB__(a2, a1);
  uint64_t v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v17 = sub_187699EA8();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = v14 + v18;
  if (v14) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0LL;
  }
  sub_187678FF0(v14, v20, a4, a5, a6, a7);
  return sub_187623C58(a6, a7);
}

unint64_t sub_18767A5DC()
{
  unint64_t result = qword_18C6DA3B8;
  if (!qword_18C6DA3B8)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for SPAKE2.Spake2Error,  &type metadata for SPAKE2.Spake2Error);
    atomic_store(result, (unint64_t *)&qword_18C6DA3B8);
  }

  return result;
}

unint64_t sub_18767A624()
{
  unint64_t result = qword_18C6DA3C0[0];
  if (!qword_18C6DA3C0[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for SPAKE2.CipherSuite,  &type metadata for SPAKE2.CipherSuite);
    atomic_store(result, qword_18C6DA3C0);
  }

  return result;
}

ValueMetadata *type metadata accessor for SPAKE2()
{
  return &type metadata for SPAKE2;
}

uint64_t getEnumTagSinglePayload for SPAKE2.Spake2Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for SPAKE2.Spake2Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18767A754 + 4 * byte_18769E485[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18767A788 + 4 * byte_18769E480[v4]))();
}

uint64_t sub_18767A788(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18767A790(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18767A798LL);
  }
  return result;
}

uint64_t sub_18767A7A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18767A7ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18767A7B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18767A7B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Spake2Error()
{
  return &type metadata for SPAKE2.Spake2Error;
}

uint64_t storeEnumTagSinglePayload for SPAKE2.CipherSuite(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18767A814 + 4 * byte_18769E48A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18767A834 + 4 * byte_18769E48F[v4]))();
  }
}

_BYTE *sub_18767A814(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_18767A834(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18767A83C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18767A844(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18767A84C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18767A854(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.CipherSuite()
{
  return &type metadata for SPAKE2.CipherSuite;
}

ValueMetadata *type metadata accessor for SPAKE2.WS()
{
  return &type metadata for SPAKE2.WS;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwxx_0(uint64_t a1)
{
  return sub_187623C58(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_187623A28(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_187623A28(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_187623A28(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_187623C58(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_187623A28(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_187623C58(v10, v11);
  return a1;
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwta_0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_187623C58(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_187623C58(v6, v7);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.WL()
{
  return &type metadata for SPAKE2.WL;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Prover()
{
  return &type metadata for SPAKE2.Prover;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwxx_0(uint64_t a1)
{
  return sub_187623C58(*(void *)(a1 + 96), *(void *)(a1 + 104));
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  unint64_t v5 = *(void *)(a2 + 72);
  sub_18769A52C();
  sub_187623A28(v4, v5);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  unint64_t v7 = *(void *)(a2 + 88);
  sub_187623A28(v6, v7);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  uint64_t v9 = *(void *)(a2 + 96);
  unint64_t v8 = *(void *)(a2 + 104);
  sub_187623A28(v9, v8);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v8;
  return a1;
}

void *_s16CryptoKitPrivate6SPAKE2O6ProverVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  sub_18769A52C();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v4 = a2[8];
  unint64_t v5 = a2[9];
  sub_187623A28(v4, v5);
  uint64_t v6 = a1[8];
  unint64_t v7 = a1[9];
  a1[8] = v4;
  a1[9] = v5;
  sub_187623C58(v6, v7);
  uint64_t v8 = a2[10];
  unint64_t v9 = a2[11];
  sub_187623A28(v8, v9);
  uint64_t v10 = a1[10];
  unint64_t v11 = a1[11];
  a1[10] = v8;
  a1[11] = v9;
  sub_187623C58(v10, v11);
  uint64_t v13 = a2[12];
  unint64_t v12 = a2[13];
  sub_187623A28(v13, v12);
  uint64_t v14 = a1[12];
  unint64_t v15 = a1[13];
  a1[12] = v13;
  a1[13] = v12;
  sub_187623C58(v14, v15);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  unint64_t v5 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_187623C58(v4, v5);
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v7 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_187623C58(v6, v7);
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a1 + 96);
  unint64_t v10 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v8;
  sub_187623C58(v9, v10);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_18767AD2C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Verifier()
{
  return &type metadata for SPAKE2.Verifier;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SPAKE2.CipherSuiteSpecifics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SPAKE2.CipherSuiteSpecifics( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.CipherSuiteSpecifics()
{
  return &type metadata for SPAKE2.CipherSuiteSpecifics;
}

int64_t sub_18767AE54@<X0>(int64_t result@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(*(void *)(v3 + 16) + 24LL);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
    __break(1u);
  }

  else if ((v8 & 0x8000000000000000LL) == 0)
  {
    __n128 result = sub_18762844C(0LL, v8, result, a2);
    *a3 = result;
    return result;
  }

  __break(1u);
  return result;
}

int64_t sub_18767AEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  return sub_187671F74(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t SPAKE2.Verifier.getShare()()
{
  return SPAKE2.Prover.getShare()();
}

uint64_t HE.SerializedSecretKey.seed.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_187623A28(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

void HE.SerializedSecretKey.init(seed:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_18767AF50()
{
  uint64_t result = cche_rng_seed_sizeof();
  if (BYTE6(v0) == result)
  {
    *uint64_t v2 = v1;
    v2[1] = v0;
  }

  else
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 0;
    *(_BYTE *)(v4 + 4) = 1;
    swift_willThrow();
    return sub_187623C58(v1, v0);
  }

  return result;
}

double HE.SerializedSecretKey.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = cche_rng_seed_sizeof();
  *(void *)&__int128 v5 = sub_187644164(v2);
  *((void *)&v5 + 1) = v3;
  sub_18767B0E4((uint64_t)&v5);
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t sub_18767B048(uint64_t result, uint64_t a2)
{
  if (result && a2 - result >= 1)
  {
    double result = ccrng();
    if (result) {
      return ccrng_generate_bridge();
    }
    else {
      __break(1u);
    }
  }

  return result;
}

void sub_18767B0E4(uint64_t a1)
{
  __asm { BR              X12 }

void sub_18767B140(unint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  unint64_t v3 = HIDWORD(a1);
  HIBYTE(v7) = BYTE3(a1);
  unint64_t v4 = a1 >> 40;
  char v8 = BYTE4(a1);
  unint64_t v5 = HIWORD(a1);
  char v9 = BYTE5(a1);
  char v10 = BYTE6(a1);
  if (BYTE6(a1))
  {
    if (!ccrng())
    {
      __break(1u);
      JUMPOUT(0x18767B2F8LL);
    }

    ccrng_generate_bridge();
    LOBYTE(sub_187623C58(v4, v3) = v8;
    LOBYTE(v4) = v9;
    LOBYTE(v5) = v10;
  }

  *uint64_t v2 = v6;
  v2[1] = v7 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 48);
}

uint64_t sub_18767B308(int *a1)
{
  uint64_t result = sub_187699F20();
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_187699E90();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v5 = result;
  uint64_t result = sub_187699EB4();
  uint64_t v6 = v3 - result;
  if (__OFSUB__(v3, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v7 = v4 - v3;
  uint64_t v8 = sub_187699EA8();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  return sub_18767B048(v5 + v6, v5 + v6 + v9);
}

uint64_t *_s19SerializedSecretKeyVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_187623A28(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s19SerializedSecretKeyVwxx(uint64_t a1)
{
  return sub_187623C58(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s19SerializedSecretKeyVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_187623A28(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_187623C58(v5, v6);
  return a1;
}

uint64_t *_s19SerializedSecretKeyVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_187623C58(v3, v4);
  return a1;
}

uint64_t _s19SerializedSecretKeyVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s19SerializedSecretKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedSecretKey()
{
  return &type metadata for HE.SerializedSecretKey;
}

ValueMetadata *_s9SecretKeyVMa()
{
  return &_s9SecretKeyVN;
}

void sub_18767B524(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = cche_secret_key_sizeof();
  type metadata accessor for HE.ObjectStorageWithZeroize();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = a2;
  swift_retain();
  uint64_t v6 = swift_slowAlloc();
  void v5[3] = v6;
  v5[4] = v6 + v4;
  __asm { BR              X10 }

uint64_t sub_18767B5C8()
{
  int v3 = cche_secret_key_generate_from_seed();
  sub_187623C58(v1, v2);
  if (v3)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = v3;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
    swift_release();
  }

  swift_release();
  return v0;
}

unint64_t sub_18767B7D8(unint64_t result)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if ((result & (result - 1)) != 0)
  {
    return 1LL << -(char)__clz(result);
  }

  else if (result <= 1)
  {
    return 1LL;
  }

  return result;
}

unint64_t sub_18767B80C@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if ((result & (result - 1)) != 0)
  {
    char v7 = -(uint64_t)__clz(result);
    if ((v7 & 0x3F) == 0x3FLL)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    unint64_t v8 = 1LL << v7;
  }

  else if (result <= 1)
  {
    unint64_t v8 = 1LL;
  }

  else
  {
    unint64_t v8 = result;
  }

  uint64_t result = cche_param_ctx_polynomial_degree();
  if (!(_DWORD)result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  int64_t v9 = __clz(v8) ^ 0x3F;
  unint64_t v10 = __clz(result) ^ 0x3F;
  if (v10 < v9)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 5;
    *(_BYTE *)(v11 + 4) = 1;
    return swift_willThrow();
  }

  if (!v9) {
    goto LABEL_32;
  }
  uint64_t v17 = a4;
  uint64_t v18 = a3;
  unint64_t v12 = v10 - v9 + 1;
  uint64_t v19 = MEMORY[0x18961AFE8];
  uint64_t result = (unint64_t)sub_18762C524(0LL, v9 & ~(v9 >> 63), 0);
  if (v9 - 1 >= -1)
  {
    BOOL v13 = 0;
    while (!v13)
    {
      if ((v12 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }

      if (HIDWORD(v12)) {
        goto LABEL_28;
      }
      if (v12 < 0x20) {
        int v14 = (1 << v12) + 1;
      }
      else {
        int v14 = 1;
      }
      unint64_t v16 = *(void *)(v19 + 16);
      unint64_t v15 = *(void *)(v19 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t result = (unint64_t)sub_18762C524((char *)(v15 > 1), v16 + 1, 1);
      }
      *(void *)(v19 + 16) = v16 + 1;
      *(_DWORD *)(v19 + 4 * v16 + 32) = v14;
      BOOL v13 = v12 == v10;
      if (v12 == v10) {
        unint64_t v12 = 0LL;
      }
      else {
        ++v12;
      }
      if (!--v9)
      {
        swift_retain();
        swift_retain();
        return sub_18768BC4C(a2, v19, v18, v17);
      }
    }

    goto LABEL_34;
  }

uint64_t sub_18767BA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x18961AFE8];
  if (!v5) {
    return v6;
  }
  uint64_t v45 = MEMORY[0x18961AFE8];
  sub_18762C3B0(0LL, v5, 0);
  uint64_t v6 = v45;
  int64_t v9 = (void *)(a1 + 32);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    uint64_t v40 = v9;
    uint64_t v10 = *v9;
    uint64_t v11 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = a2;
    sub_18769A52C();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v11;
    if (HIDWORD(*(void *)(v10 + 16))) {
      break;
    }
    int v14 = cche_encode_poly_uint64();
    if (v14)
    {
      int v34 = v14;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v35 = v34;
      *(_BYTE *)(v35 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }

    uint64_t v41 = v6;
    uint64_t v42 = v4;
    uint64_t v6 = cche_param_ctx_ciphertext_ctx_nmoduli();
    uint64_t v15 = cche_ciphertext_sizeof();
    unint64_t v16 = (void *)swift_initStackObject();
    v16[2] = a2;
    swift_retain();
    uint64_t v17 = swift_slowAlloc();
    _OWORD v16[3] = v17;
    v16[4] = v17 + v15;
    uint64_t result = cche_rng_seed_sizeof();
    if (result)
    {
      unint64_t v18 = result;
      if (result < 15)
      {
        if (result < 0) {
          goto LABEL_35;
        }
        uint64_t result = 0LL;
        unint64_t v20 = (unint64_t)v18 << 48;
      }

      else
      {
        sub_187699ECC();
        swift_allocObject();
        uint64_t v19 = sub_187699E9C();
        if (v18 >= 0x7FFFFFFF)
        {
          sub_187699F38();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0LL;
          *(void *)(result + 24) = v18;
          unint64_t v20 = v19 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t result = v18 << 32;
          unint64_t v20 = v19 | 0x4000000000000000LL;
        }
      }
    }

    else
    {
      unint64_t v20 = 0xC000000000000000LL;
    }

    *(void *)&__int128 v44 = result;
    *((void *)&v44 + 1) = v20;
    if (!*(void *)(a3 + 24)) {
      goto LABEL_37;
    }
    swift_retain();
    sub_1876875D4((uint64_t)&v44);
    int v22 = v21;
    swift_release();
    if (v22)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = v22;
      *(_BYTE *)(v36 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_187623C58(v44, *((unint64_t *)&v44 + 1));
LABEL_32:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }

    unint64_t v24 = *((void *)&v44 + 1);
    uint64_t v23 = v44;
    uint64_t result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      unint64_t v25 = result;
      if (result <= 14)
      {
        if (result < 0) {
          goto LABEL_36;
        }
        uint64_t result = 0LL;
        unint64_t v28 = (unint64_t)v25 << 48;
      }

      else
      {
        uint64_t v26 = v23;
        sub_187699ECC();
        swift_allocObject();
        uint64_t v27 = sub_187699E9C();
        if (v25 >= 0x7FFFFFFF)
        {
          sub_187699F38();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0LL;
          *(void *)(result + 24) = v25;
          unint64_t v28 = v27 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t result = v25 << 32;
          unint64_t v28 = v27 | 0x4000000000000000LL;
        }

        uint64_t v23 = v26;
      }
    }

    else
    {
      unint64_t v28 = 0xC000000000000000LL;
    }

    *(void *)&__int128 v44 = result;
    *((void *)&v44 + 1) = v28;
    sub_187687A20((uint64_t)&v44);
    uint64_t v6 = v41;
    if (v29)
    {
      int v37 = v29;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v38 = v37;
      *(_BYTE *)(v38 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_187623C58(v23, v24);
      sub_187623C58(v44, *((unint64_t *)&v44 + 1));
      goto LABEL_32;
    }

    uint64_t v4 = v42;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __int128 v30 = v44;
    uint64_t v45 = v41;
    unint64_t v32 = *(void *)(v41 + 16);
    unint64_t v31 = *(void *)(v41 + 24);
    if (v32 >= v31 >> 1)
    {
      __int128 v43 = v44;
      sub_18762C3B0((char *)(v31 > 1), v32 + 1, 1);
      __int128 v30 = v43;
      uint64_t v6 = v45;
    }

    *(void *)(v6 + 16) = v32 + 1;
    uint64_t v33 = v6 + 32 * v32;
    *(_OWORD *)(v33 + 32) = v30;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v24;
    int64_t v9 = v40 + 1;
    if (!--v5) {
      return v6;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18767BEA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v33 = MEMORY[0x18961AFE8];
  sub_18762C500(0LL, v7, 0);
  int64_t v27 = v6;
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  unint64_t v28 = v5;
  int64_t v26 = v7;
  if (v7)
  {
    unint64_t v8 = (void *)(a1 + 32);
    unint64_t v9 = v5;
    uint64_t v10 = (void *)(a2 + 32);
    sub_18769A52C();
    uint64_t result = sub_18769A52C();
    unint64_t v12 = v6;
    unint64_t v13 = v9;
    while (v13)
    {
      if (!v12) {
        goto LABEL_26;
      }
      uint64_t result = a3(*v8, *v10);
      uint64_t v14 = result;
      unint64_t v16 = *(void *)(v33 + 16);
      unint64_t v15 = *(void *)(v33 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t result = (uint64_t)sub_18762C500((char *)(v15 > 1), v16 + 1, 1);
      }
      --v12;
      *(void *)(v33 + 16) = v16 + 1;
      *(void *)(v33 + 8 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v8;
      if (!--v7) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
  }

  else
  {
    sub_18769A52C();
    uint64_t result = sub_18769A52C();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }

    uint64_t v17 = 0LL;
    if (v26 <= v27) {
      int64_t v18 = v27;
    }
    else {
      int64_t v18 = v26;
    }
    int64_t v31 = v18 - v26;
    unint64_t v19 = v28 - v26;
    uint64_t v20 = 8 * v26 + 32;
    uint64_t v21 = v30 + v20;
    uint64_t v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17) {
        goto LABEL_24;
      }
      if (v31 == v17) {
        goto LABEL_28;
      }
      uint64_t result = a3(*(void *)(v21 + 8 * v17), *(void *)(v22 + 8 * v17));
      uint64_t v23 = result;
      unint64_t v25 = *(void *)(v33 + 16);
      unint64_t v24 = *(void *)(v33 + 24);
      if (v25 >= v24 >> 1) {
        uint64_t result = (uint64_t)sub_18762C500((char *)(v24 > 1), v25 + 1, 1);
      }
      *(void *)(v33 + 16) = v25 + 1;
      *(void *)(v33 + 8 * v25 + 32) = v23;
      if (v19 == ++v17) {
        goto LABEL_24;
      }
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

char *sub_18767C0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  unsigned int v9 = cche_param_ctx_polynomial_degree();
  uint64_t v10 = *(void *)(a4 + 16);
  if (v10)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = (uint64_t *)(a4 + 32);
    while (1)
    {
      uint64_t v13 = *v12++;
      BOOL v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14) {
        break;
      }
      if (!--v10) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  uint64_t v11 = 0LL;
LABEL_7:
  uint64_t v45 = a3;
  uint64_t v15 = v9;
  uint64_t v5 = sub_18765C140(v9, v11);
  if (!(_DWORD)v15)
  {
LABEL_43:
    sub_187685514(MEMORY[0x18961AFE8], v5);
    __break(1u);
  }

  unint64_t v16 = (void *)sub_18769A550();
  v16[2] = v15;
  bzero(v16 + 4, 8 * v15);
  uint64_t v17 = sub_187685514(v16, v5);
  uint64_t v49 = v15;
  unint64_t v18 = v11 % v15;
  if (v11 % v15 < 0) {
    goto LABEL_40;
  }
  unint64_t v19 = v17;
  uint64_t v50 = 0LL;
  uint64_t v20 = cche_param_ctx_plaintext_modulus_inverse();
  if ((_DWORD)v20
    || (v44 = a2, v21 = v50, v50 = 0LL, v22 = v49, uint64_t v20 = cche_param_ctx_plaintext_modulus_inverse(), (_DWORD)v20))
  {
    uint64_t v23 = (char *)v20;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v24 = (_DWORD)v23;
    *(_BYTE *)(v24 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v23 = (char *)v42;
    uint64_t v47 = v50;
    uint64_t v48 = v21;
    uint64_t v50 = 0LL;
    MEMORY[0x1895F8858](v20);
    sub_18769A52C();
    uint64_t v26 = sub_18769A52C();
    uint64_t v27 = sub_18767BEA8(v26, a4, sub_18767C4B0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v27 + 16);
    v42[1] = v27;
    uint64_t v43 = v4;
    if (v28)
    {
      uint64_t v46 = v5 - 1;
      if (__OFSUB__(v5, 1LL))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }

      uint64_t v29 = (uint64_t *)(v27 + 32);
      uint64_t v30 = v48;
      do
      {
        uint64_t v32 = *v29++;
        uint64_t v31 = v32;
        uint64_t v33 = v32 / v22;
        uint64_t v34 = v33 >= v46 ? v30 : v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (v33 < 0) {
            goto LABEL_36;
          }
        }

        else
        {
          unint64_t v19 = sub_18763201C(v19);
          if (v33 < 0) {
            goto LABEL_36;
          }
        }

        uint64_t v5 = (uint64_t)v19;
        uint64_t v23 = (char *)v19[v33 + 4];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19[v33 + 4] = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v23 = sub_187632008((uint64_t)v23);
          v19[v33 + 4] = v23;
        }

        unint64_t v36 = v31 - v33 * v49;
        if ((v36 & 0x8000000000000000LL) != 0) {
          goto LABEL_38;
        }
        uint64_t v22 = v49;
        if (v36 >= *((void *)v23 + 2)) {
          goto LABEL_39;
        }
        *(void *)&v23[8 * v36 + 32] = v34;
        --v28;
        uint64_t v30 = v48;
      }

      while (v28);
    }

    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v19;
    uint64_t v38 = v44;
    swift_retain();
    uint64_t v39 = v45;
    swift_retain();
    uint64_t v40 = v43;
    uint64_t v41 = sub_18767BA18(v37, v38, v39);
    if (!v40) {
      uint64_t v23 = (char *)v41;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }

  return v23;
}

uint64_t sub_18767C4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = *v3;
  BOOL v5 = __OFADD__(*v3, a1);
  uint64_t result = *v3 + a1;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    BOOL v5 = __OFADD__(v4, a2);
    uint64_t v7 = v4 + a2;
    if (!v5)
    {
      *uint64_t v3 = v7;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t SKANUTClient.input.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_187623A28(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t static SKANUTClient.defaultToken()()
{
  uint64_t v0 = sub_187628DAC(32LL);
  uint64_t v1 = sub_187628F04(v0);
  swift_release();
  return v1;
}

uint64_t SKANUTClient.init(privateInput:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_18769A46C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unsigned int v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v44 = 0;
  sub_18769A37C();
  sub_187623A28(a1, a2);
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v40);
  if (!v10)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v11 = (uint64_t)v10;
  unint64_t v39 = a2;
  sub_18769A448();
  uint64_t v12 = sub_18769A43C();
  unint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  if (v14 >> 60 == 15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  sub_18769A448();
  uint64_t v16 = sub_18769A43C();
  unint64_t v18 = v17;
  v15(v9, v6);
  if (v18 >> 60 != 15)
  {
    sub_1876398C0(2LL, 1LL);
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    uint64_t v40 = v16;
    unint64_t v41 = v18;
    sub_187623A28(v16, v18);
    sub_18763CF30(v20, v22);
    sub_187623C58(v20, v22);
    sub_1876482B4(v16, v18);
    uint64_t v23 = v40;
    unint64_t v24 = v41;
    uint64_t v25 = sub_18763B1DC(0x48532D343833502DLL, 0xEC00000034383341LL);
    unint64_t v27 = v26;
    uint64_t v42 = v23;
    unint64_t v43 = v24;
    sub_187623A28(v23, v24);
    sub_18763CF30(v25, v27);
    sub_187623C58(v25, v27);
    sub_187623C58(v23, v24);
    uint64_t v28 = v42;
    uint64_t v29 = v43;
    uint64_t v42 = v12;
    unint64_t v43 = v14;
    sub_187623A28(v12, v14);
    sub_18763CF30(v28, v29);
    sub_187623C58(v28, v29);
    sub_1876482B4(v12, v14);
    uint64_t v30 = v42;
    unint64_t v31 = v43;
    unint64_t v32 = v39;
    sub_187651220(a1, v39, v42, v43);
    uint64_t v34 = v33;
    id v35 = sub_18764FE4C(v11, v33);
    sub_187623C58(v30, v31);

    uint64_t result = sub_187623C58(a1, v32);
    char v37 = v44;
    *(_BYTE *)a3 = 2;
    *(void *)(a3 + 8) = 4LL;
    *(_BYTE *)(a3 + 16) = v37;
    *(void *)(a3 + 24) = a1;
    *(void *)(a3 + 32) = v32;
    *(void *)(a3 + 40) = v11;
    *(void *)(a3 + 48) = v35;
    return result;
  }

id SKANUTClient.blindedElement()()
{
  id result = objc_msgSend(*(id *)(v0 + 48), sel_serializedPublicKey_, 1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_187699F98();

    return (id)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

id sub_18767C94C( uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28, int a29, int a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
  char v93 = v54;
  uint64_t v94 = v53;
  uint64_t v95 = v52;
  uint64_t v96 = v51;
  id v61 = (id)objc_opt_self();
  sub_18769A37C();
  sub_1876597B0();
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  uint64_t v102 = v61;
  int64_t v62 = (int64_t)objc_msgSend(v61, sel_groupOrderByteCountForCP_, *(void *)(v58 - 144));
  if (v62 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if (v62 + 0x4000000000000000LL < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (BYTE6(v56) != 2 * v62)
  {
    sub_18765175C();
    swift_allocError();
    _BYTE *v78 = 0;
    swift_willThrow();
    return v61;
  }

  sub_187623A28(a5, v56);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v63 = (uint64_t)objc_msgSend(v61, sel_groupOrderByteCountForCP_, v104);
  if (v63 < 0) {
    goto LABEL_19;
  }
  unint64_t v90 = a4;
  uint64_t v91 = a5;
  char v89 = v57;
  sub_1876356D4(v63, a5, v56);
  uint64_t v65 = *(void *)(v58 - 144);
  unint64_t v64 = *(void *)(v58 - 136);
  int v103 = 0;
  sub_187623A28(v65, v64);
  sub_18769A22C();
  swift_dynamicCast();
  id v61 = objc_allocWithZone(MEMORY[0x18960F078]);
  id v66 = (void *)sub_187699F80();
  id v67 = objc_msgSend(v61, sel_initWithData_inGroup_reduction_corecryptoError_, v66, v104, 0, &v103);
  sub_187623C58(v65, v64);

  if (!v67)
  {
    int v79 = v103;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v80 = v79;
    *(_BYTE *)(v80 + 4) = 0;
    swift_willThrow();
    uint64_t v81 = v65;
    unint64_t v82 = v64;
LABEL_14:
    sub_187623C58(v81, v82);
    return v61;
  }

  id v68 = v67;
  sub_187623C58(v65, v64);
  sub_187623A28(v91, v56);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v69 = (uint64_t)objc_msgSend(v102, sel_groupOrderByteCountForCP_, v104);
  if (v69 < 0)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x18767CE9CLL);
  }

  sub_18766E314(v69, v91, v56);
  uint64_t v70 = *(void *)(v58 - 144);
  id v61 = *(id *)(v58 - 136);
  int v103 = 0;
  sub_187623A28(v70, (unint64_t)v61);
  sub_18769A22C();
  swift_dynamicCast();
  uint64_t v71 = v104;
  id v72 = objc_allocWithZone(MEMORY[0x18960F078]);
  unint64_t v73 = (void *)sub_187699F80();
  id v74 = objc_msgSend(v72, sel_initWithData_inGroup_reduction_corecryptoError_, v73, v71, 0, &v103);
  sub_187623C58(v70, (unint64_t)v61);

  if (!v74)
  {
    int v83 = v103;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v84 = v83;
    *(_BYTE *)(v84 + 4) = 0;
    swift_willThrow();

    uint64_t v81 = v70;
    unint64_t v82 = (unint64_t)v61;
    goto LABEL_14;
  }

  sub_187623C58(v70, (unint64_t)v61);
  id v75 = v68;
  id v76 = v74;
  id v61 = (id)a8;
  sub_187623A28(a7, a8);
  id v77 = sub_187646200();
  if (v55)
  {
    sub_187623C58(a7, a8);
  }

  else
  {
    id v86 = v77;
    sub_187623C58(a7, a8);
    sub_187623A28(v99, v90);
    id v87 = sub_187646200();
    sub_187623C58(v99, v90);
    id v88 = a3;
    id v61 = sub_18764F23C(v95, v94, a1, a2, v88, v87, v75, (uint64_t)v76, v86, v89, v96, v93);
  }

  return v61;
}

id SKANUTTestServer.init()@<X0>(uint64_t a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v3);
  if (result)
  {
    *(_BYTE *)a1 = 2;
    *(void *)(a1 + 8) = 4LL;
    *(void *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = result;
    return result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t SKANUTTestServer.publicKey()()
{
  uint64_t v1 = sub_18769A2E0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v5 = *(void **)(v0 + 16);
  sub_18769A37C();
  sub_1876597B0();
  id v6 = v5;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F070]), sel_initWithGeneratorForCP_, v17[1]);
  id v8 = sub_18764FE4C((uint64_t)v6, v7);

  id v9 = objc_msgSend(v8, sel_serializedPublicKey_, 1);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = sub_187699F98();
    uint64_t v13 = v12;

    v17[2] = v11;
    v17[3] = v13;
    uint64_t v14 = sub_18769A2D4();
    uint64_t v15 = MEMORY[0x1895AA0A8](v14);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v15;
  }

  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }

  return result;
}

uint64_t SKANUTTestServer.evaluate(blindedElement:publicInput:)( uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  int v10 = *v4;
  uint64_t v11 = *((void *)v4 + 1);
  unint64_t v39 = (void *)*((void *)v4 + 2);
  char v12 = v4[24];
  sub_187623A28(a1, a2);
  id v13 = sub_187646200();
  sub_187623C58(a1, a2);
  if (v5) {
    return (uint64_t)v13;
  }
  char v36 = v12;
  uint64_t v38 = v13;
  sub_18769A37C();
  sub_1876597B0();
  id v14 = v39;
  sub_18769A22C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4C71A0);
  swift_dynamicCast();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x18960F078]), sel_initWithRandomScalarInGroup_, v43);
  if (!v15)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  id v13 = v15;
  if (v10 == 1) {
    char v16 = v36;
  }
  else {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    sub_18765175C();
    swift_allocError();
    *unint64_t v18 = 1;
    swift_willThrow();

    return (uint64_t)v13;
  }

  id v17 = sub_18766B36C(&v41, v38, a3, a4, v15, v10, v11, v14, v36);
  uint64_t v20 = v41;
  if (!v41) {
    goto LABEL_16;
  }
  unint64_t v21 = v17;
  unint64_t v22 = v42;

  id v23 = objc_msgSend(v20, sel_serializedBigEndianScalar);
  if (!v23) {
    goto LABEL_18;
  }
  unint64_t v24 = v23;
  uint64_t v40 = v20;
  uint64_t v25 = sub_187699F98();
  unint64_t v27 = v26;

  char v37 = v22;
  id v28 = objc_msgSend(v22, sel_serializedBigEndianScalar);
  if (!v28) {
    goto LABEL_18;
  }
  uint64_t v29 = v28;
  uint64_t v30 = sub_187699F98();
  unint64_t v32 = v31;

  unint64_t v41 = (void *)v25;
  uint64_t v42 = (void *)v27;
  unint64_t v35 = v27;
  sub_187623A28(v25, v27);
  sub_187623A28(v30, v32);
  sub_18763CF30(v30, v32);
  sub_187623C58(v30, v32);
  id v13 = v41;
  id v33 = objc_msgSend(v21, sel_serializedPublicKey_, 1);
  if (v33)
  {
    uint64_t v34 = v33;
    sub_187699F98();

    sub_187623C58(v30, v32);
    sub_187623C58(v25, v35);

    return (uint64_t)v13;
  }

uint64_t SKANUTTestServer.verifyToken(token:publicInput:unblindedInput:)( uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = *((void *)v6 + 1);
  id v13 = (void *)*((void *)v6 + 2);
  char v15 = v6[24];
  int v16 = *v6;
  id v17 = v13;
  sub_18766BF1C(a5, a6, a1, a2, a3, a4, v16, v14, v17, v15);
  LOBYTE(v16) = v18;

  return v16 & 1;
}

void sub_18767D534(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    sub_1876398C0(a1, 2LL);
  }

  else if (a1 == 5 || a1 == 4 || a1 == 3)
  {
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18763B1DC(45LL, 0xE100000000000000LL);
  }

  else
  {
    sub_18769A67C();
    __break(1u);
  }

void destroy for SKANUTClient(uint64_t a1)
{
}

uint64_t initializeWithCopy for SKANUTClient(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_187623A28(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  id v6 = *(void **)(a2 + 40);
  id v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  id v8 = v6;
  id v9 = v7;
  return a1;
}

uint64_t assignWithCopy for SKANUTClient(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_187623A28(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  sub_187623C58(v6, v7);
  id v8 = *(void **)(a2 + 40);
  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  id v10 = v8;

  uint64_t v11 = *(void **)(a2 + 48);
  char v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v11;
  id v13 = v11;

  return a1;
}

uint64_t assignWithTake for SKANUTClient(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_187623C58(v4, v5);

  uint64_t v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for SKANUTClient(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKANUTClient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SKANUTClient()
{
  return &type metadata for SKANUTClient;
}

void destroy for SKANUTTestServer(uint64_t a1)
{
}

uint64_t initializeWithCopy for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  unint64_t v7 = *(void **)(a2 + 32);
  id v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for SKANUTTestServer()
{
  return &type metadata for SKANUTTestServer;
}

uint64_t sub_18767D9A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5 = v4;
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t result = _s13ClientSecretsVMa(319LL, v6, v7, v8);
  if (v11 <= 0x3F)
  {
    uint64_t result = _s14KeyCommitmentsVMa(319LL, v2, v1, v10);
    if (v12 <= 0x3F)
    {
      if (v5 > 0x3F)
      {
        return AssociatedTypeWitness;
      }

      else
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *sub_18767DB34(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  int v4 = *(_DWORD *)(v2 + 80);
  uint64_t v5 = ((v3 + v4) & ~(unint64_t)v4) + v3;
  uint64_t v6 = swift_checkMetadataState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v4 | 7LL | v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v10 + (v4 | 7LL);
  if (v9 != 7
    || ((*(_DWORD *)(v7 + 80) | v4) & 0x100000) != 0
    || ((v10
       + v8
       + ((v10
         + v8
         + ((v8
           + 8
           + ((v9 + v5) & ~v9)
           + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8LL)
           + ((v12 + ((v10 + v8 + ((v10 + v8) & ~v8)) & ~v8)) & ~(v4 | 7LL))
           + 8) & ~v8)) & ~v8)) & ~v8)
     + v10 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v28 = v15 + ((v9 + 16) & ~v9);
    swift_retain();
  }

  else
  {
    uint64_t v16 = ~v8;
    uint64_t v33 = ~(v4 | 7LL);
    uint64_t v34 = v3 + 7;
    id v17 = *(void (**)(uint64_t *, uint64_t *))(v2 + 16);
    uint64_t v30 = ~v9;
    uint64_t v31 = v6;
    unint64_t v35 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v12 + ((v10 + v8 + ((v10 + v8) & ~v8)) & ~v8)) & v33) + 8;
    uint64_t v36 = v8 + 8;
    uint64_t v32 = v10 + (v4 | 7LL);
    v17(a1, a2);
    ((void (*)(unint64_t, unint64_t, uint64_t))v17)( ((unint64_t)a1 + v3 + v4) & ~(unint64_t)v4,  ((unint64_t)a2 + v3 + v4) & ~(unint64_t)v4,  AssociatedTypeWitness);
    uint64_t v18 = ((unint64_t)a1 + v5 + 7) & v30;
    uint64_t v19 = ((unint64_t)a2 + v5 + 7) & v30;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v20(v18, v19, v31);
    v20((v11 + v18) & v16, (v11 + v19) & v16, v31);
    uint64_t v21 = (v11 + ((v11 + v19) & v16)) & v16;
    v20((v11 + ((v11 + v18) & v16)) & v16, v21, v31);
    uint64_t v22 = (v32 + v21) & v33;
    ((void (*)(uint64_t, uint64_t, uint64_t))v17)( (v32 + ((v11 + ((v11 + v18) & v16)) & v16)) & v33,  v22,  AssociatedTypeWitness);
    *(void *)((v34 + ((v32 + ((v11 + ((v11 + v18) & v16)) & v16)) & v33)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v34 + v22) & 0xFFFFFFFFFFFFF8LL);
    unint64_t v23 = v35 + v19;
    *(void *)(v35 + v18) = *(void *)(v35 + v19);
    unint64_t v24 = (v36 + v35 + v18) & v16;
    unint64_t v25 = (v36 + v23) & v16;
    sub_18769A52C();
    v20(v24, v25, v31);
    unint64_t v26 = (v11 + v24) & v16;
    unint64_t v27 = (v11 + v25) & v16;
    v20(v26, v27, v31);
    v20((v11 + v26) & v16, (v11 + v27) & v16, v31);
    return a1;
  }

  return (uint64_t *)v28;
}

uint64_t sub_18767DE88(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = v5 + a1;
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  v4((v5 + a1 + v7) & ~v7, AssociatedTypeWitness);
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 | 7;
  uint64_t v12 = (v6 + ((v5 + v7) & ~v7) + (v7 | 7 | v10)) & ~(v7 | 7 | v10);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v19(v12, v8);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = v13 + v10;
  v19((v13 + v10 + v12) & ~v10, v8);
  uint64_t v15 = (v13 + v10 + ((v13 + v10 + v12) & ~v10)) & ~v10;
  v19(v15, v8);
  uint64_t v16 = v13 + v11;
  v4((v16 + v15) & ~v11, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  v19((v12 + v10 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v16 + ((v14 + (v14 & ~v10)) & ~v10)) & ~v11) + 16) & ~v10, v8);
  unint64_t v17 = (v14
       + ((v12 + v10 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v16 + ((v14 + (v14 & ~v10)) & ~v10)) & ~v11) + 16) & ~v10)) & ~v10;
  v19(v17, v8);
  return ((uint64_t (*)(unint64_t, uint64_t))v19)((v14 + v17) & ~v10, v8);
}

uint64_t sub_18767E0C4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = v6;
  unint64_t v39 = v6;
  uint64_t v40 = a1;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8;
  uint64_t v38 = v8;
  uint64_t v12 = a1;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v13 = (v10 & ~v9) + v11;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v9 | 7;
  uint64_t v18 = v9 | 7 | v16;
  uint64_t v37 = (v18 + v13 + v12) & ~v18;
  uint64_t v19 = (v18 + v13 + a2) & ~v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v20(v37, v19, v14);
  uint64_t v21 = *(void *)(v15 + 64);
  uint64_t v22 = v21 + v16;
  uint64_t v23 = (v21 + v16 + v37) & ~v16;
  v20(v23, (v21 + v16 + v19) & ~v16, v14);
  uint64_t v24 = (v21 + v16 + v23) & ~v16;
  uint64_t v25 = (v21 + v16 + ((v21 + v16 + v19) & ~v16)) & ~v16;
  v20(v24, v25, v14);
  uint64_t v26 = v21 + v17;
  uint64_t v27 = (v26 + v24) & ~v17;
  uint64_t v28 = (v26 + v25) & ~v17;
  v39(v27, v28, AssociatedTypeWitness);
  *(void *)((v38 + 7 + v27) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v38 + 7 + v28) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v29 = ((v38 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v26 + ((v22 + (v22 & ~v16)) & ~v16)) & ~v17) + 8;
  uint64_t v30 = (void *)(v29 + v37);
  uint64_t v31 = (void *)(v29 + v19);
  *uint64_t v30 = *v31;
  uint64_t v32 = ((unint64_t)v30 + v16 + 8) & ~v16;
  uint64_t v33 = ((unint64_t)v31 + v16 + 8) & ~v16;
  sub_18769A52C();
  v20(v32, v33, v14);
  uint64_t v34 = (v22 + v32) & ~v16;
  uint64_t v35 = (v22 + v33) & ~v16;
  v20(v34, v35, v14);
  v20((v22 + v34) & ~v16, (v22 + v35) & ~v16, v14);
  return v40;
}

uint64_t sub_18767E38C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = v6;
  uint64_t v38 = v6;
  uint64_t v39 = a1;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8;
  uint64_t v37 = v8;
  uint64_t v12 = a1;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v13 = (v10 & ~v9) + v11;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  v9 |= 7uLL;
  uint64_t v17 = (v9 | v16) + v13;
  uint64_t v35 = (v17 + a2) & ~(v9 | v16);
  uint64_t v36 = (v17 + v12) & ~(v9 | v16);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
  v18(v36, v35, v14);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v20 = v19 + v16;
  uint64_t v21 = (v19 + v16 + v36) & ~v16;
  v18(v21, (v19 + v16 + v35) & ~v16, v14);
  uint64_t v22 = (v19 + v16 + v21) & ~v16;
  uint64_t v23 = (v19 + v16 + ((v19 + v16 + v35) & ~v16)) & ~v16;
  v18(v22, v23, v14);
  uint64_t v24 = v19 + v9;
  uint64_t v25 = (v24 + v22) & ~v9;
  uint64_t v26 = (v24 + v23) & ~v9;
  v38(v25, v26, AssociatedTypeWitness);
  *(void *)((v37 + 7 + v25) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((v37 + 7 + v26) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  unint64_t v27 = ((v37 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v24 + ((v20 + (v20 & ~v16)) & ~v16)) & ~v9) + 8;
  uint64_t v28 = (void *)(v27 + v36);
  unint64_t v29 = (void *)(v27 + v35);
  *uint64_t v28 = *v29;
  uint64_t v30 = ((unint64_t)v28 + v16 + 8) & ~v16;
  uint64_t v31 = ((unint64_t)v29 + v16 + 8) & ~v16;
  v18(v30, v31, v14);
  uint64_t v32 = (v20 + v30) & ~v16;
  uint64_t v33 = (v20 + v31) & ~v16;
  v18(v32, v33, v14);
  v18((v20 + v32) & ~v16, (v20 + v33) & ~v16, v14);
  return v39;
}

uint64_t sub_18767E660(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = v6;
  uint64_t v39 = v6;
  uint64_t v40 = a1;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8;
  uint64_t v38 = v8;
  uint64_t v12 = a1;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v13 = (v10 & ~v9) + v11;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v9 | 7;
  uint64_t v18 = v9 | 7 | v16;
  uint64_t v37 = (v18 + v13 + v12) & ~v18;
  uint64_t v19 = (v18 + v13 + a2) & ~v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v20(v37, v19, v14);
  uint64_t v21 = *(void *)(v15 + 64);
  uint64_t v22 = v21 + v16;
  uint64_t v23 = (v21 + v16 + v37) & ~v16;
  v20(v23, (v21 + v16 + v19) & ~v16, v14);
  uint64_t v24 = (v21 + v16 + v23) & ~v16;
  uint64_t v25 = (v21 + v16 + ((v21 + v16 + v19) & ~v16)) & ~v16;
  v20(v24, v25, v14);
  uint64_t v26 = v21 + v17;
  uint64_t v27 = (v26 + v24) & ~v17;
  uint64_t v28 = (v26 + v25) & ~v17;
  v39(v27, v28, AssociatedTypeWitness);
  *(void *)((v38 + 7 + v27) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v38 + 7 + v28) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v29 = ((v38 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v26 + ((v22 + (v22 & ~v16)) & ~v16)) & ~v17) + 8;
  uint64_t v30 = (void *)(v29 + v37);
  uint64_t v31 = (void *)(v29 + v19);
  *uint64_t v30 = *v31;
  uint64_t v32 = ((unint64_t)v30 + v16 + 8) & ~v16;
  uint64_t v33 = ((unint64_t)v31 + v16 + 8) & ~v16;
  v20(v32, v33, v14);
  uint64_t v34 = (v22 + v32) & ~v16;
  uint64_t v35 = (v22 + v33) & ~v16;
  v20(v34, v35, v14);
  v20((v22 + v34) & ~v16, (v22 + v35) & ~v16, v14);
  return v40;
}

uint64_t sub_18767E924(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = v6;
  uint64_t v38 = v6;
  uint64_t v39 = a1;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8;
  uint64_t v37 = v8;
  uint64_t v12 = a1;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v13 = (v10 & ~v9) + v11;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  v9 |= 7uLL;
  uint64_t v17 = (v9 | v16) + v13;
  uint64_t v36 = (v17 + v12) & ~(v9 | v16);
  uint64_t v18 = (v17 + a2) & ~(v9 | v16);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v19(v36, v18, v14);
  uint64_t v20 = *(void *)(v15 + 64);
  uint64_t v21 = v20 + v16;
  uint64_t v22 = (v20 + v16 + v36) & ~v16;
  v19(v22, (v20 + v16 + v18) & ~v16, v14);
  uint64_t v23 = (v20 + v16 + v22) & ~v16;
  uint64_t v24 = (v20 + v16 + ((v20 + v16 + v18) & ~v16)) & ~v16;
  v19(v23, v24, v14);
  uint64_t v25 = v20 + v9;
  uint64_t v26 = (v25 + v23) & ~v9;
  uint64_t v27 = (v25 + v24) & ~v9;
  v38(v26, v27, AssociatedTypeWitness);
  *(void *)((v37 + 7 + v26) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((v37 + 7 + v27) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  unint64_t v28 = ((v37 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v25 + ((v21 + (v21 & ~v16)) & ~v16)) & ~v9) + 8;
  unint64_t v29 = (void *)(v28 + v36);
  uint64_t v30 = (void *)(v28 + v18);
  *unint64_t v29 = *v30;
  uint64_t v31 = ((unint64_t)v29 + v16 + 8) & ~v16;
  uint64_t v32 = ((unint64_t)v30 + v16 + 8) & ~v16;
  v19(v31, v32, v14);
  uint64_t v33 = (v21 + v31) & ~v16;
  uint64_t v34 = (v21 + v32) & ~v16;
  v19(v33, v34, v14);
  v19((v21 + v33) & ~v16, (v21 + v34) & ~v16, v14);
  return v39;
}

uint64_t sub_18767EBF0(unint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v7;
  uint64_t v14 = *(void *)(v5 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = ((v14 + v15) & ~v15) + v14;
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = v15 | 7;
  uint64_t v19 = v18 | v17;
  uint64_t v20 = v16 + (v18 | v17);
  uint64_t v21 = *(void *)(v8 + 64);
  uint64_t v22 = v21 + v17;
  uint64_t v23 = v18 + v21;
  uint64_t v24 = v14 + 7;
  unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8LL) + ((v18 + v21 + ((v21 + v17 + ((v21 + v17) & ~v17)) & ~v17)) & ~v18) + 8;
  uint64_t v26 = v17 + 8;
  if (a2 > v12)
  {
    uint64_t v27 = ((v22 + ((v22 + ((v26 + (v20 & ~v19) + v25) & ~v17)) & ~v17)) & ~v17) + v21;
    char v28 = 8 * v27;
    unsigned int v31 = ((a2 - v12 + ~(-1 << v28)) >> v28) + 1;
    if (HIWORD(v31))
    {
      int v29 = *(_DWORD *)(a1 + v27);
      if (!v29) {
        goto LABEL_32;
      }
      goto LABEL_23;
    }

    if (v31 > 0xFF)
    {
      int v29 = *(unsigned __int16 *)(a1 + v27);
      if (!*(_WORD *)(a1 + v27)) {
        goto LABEL_32;
      }
      goto LABEL_23;
    }

    if (v31 >= 2)
    {
LABEL_15:
      int v29 = *(unsigned __int8 *)(a1 + v27);
      if (!*(_BYTE *)(a1 + v27)) {
        goto LABEL_32;
      }
LABEL_23:
      int v32 = (v29 - 1) << v28;
      if ((_DWORD)v27)
      {
        else {
          int v33 = 4;
        }
        __asm { BR              X12 }
      }

      return v12 + v32 + 1;
    }
  }

void sub_18767EF28(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_checkMetadataState() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v7;
  }
  if (v10 <= v9) {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v9 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v8 + 64);
  size_t v18 = ((v17
        + v16
        + ((v17
          + v16
          + ((v16
            + 8
            + ((((v14 + v15) & ~v15) + v14 + (v15 | 7 | v16)) & ~(v15 | 7 | v16))
            + (((v15 | 7) + v17 + ((v17 + v16 + ((v17 + v16) & ~v16)) & ~v16)) & ~(v15 | 7))
            + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8LL)
            + 8) & ~v16)) & ~v16)) & ~v16)
      + v17;
  if (a3 <= v13)
  {
    unsigned int v19 = 0u;
  }

  else if (v18 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v21))
    {
      unsigned int v19 = 4u;
    }

    else if (v21 >= 0x100)
    {
      unsigned int v19 = 2;
    }

    else
    {
      unsigned int v19 = v21 > 1;
    }
  }

  else
  {
    unsigned int v19 = 1u;
  }

  if (v13 < a2)
  {
    int v20 = ~v13 + a2;
    if (v18 < 4)
    {
      if ((_DWORD)v18)
      {
        int v22 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if ((_DWORD)v18 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }

        else if ((_DWORD)v18 == 2)
        {
          *(_WORD *)a1 = v22;
        }

        else
        {
          *a1 = v22;
        }
      }
    }

    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X24 }

uint64_t _s6ClientVMa_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ClientVMn_1);
}

uint64_t _s13ClientSecretsVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s13ClientSecretsVMn);
}

uint64_t sub_18767F31C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_18767F388(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }

  else
  {
    uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(void *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }

  return v4;
}

uint64_t sub_18767F43C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6( (*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  v3);
}

unint64_t sub_18767F4A4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t sub_18767F510(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t sub_18767F57C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t sub_18767F5E8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

uint64_t sub_18767F654(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_18767F714 + 4 * byte_18769E706[(v7 - 1)]))();
}

void sub_18767F764(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t *sub_18767F924(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_187623A28(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_187623A28(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = a2[5];
    unint64_t v12 = a2[6];
    sub_187623A28(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    uint64_t v13 = a2[7];
    unint64_t v14 = a2[8];
    sub_187623A28(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    uint64_t v15 = a3[10];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_18769A01C();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v19 = a3[11];
    uint64_t v20 = a3[12];
    unsigned int v21 = (char *)v4 + v19;
    int v22 = (char *)a2 + v19;
    *(_DWORD *)unsigned int v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = (char *)v4 + v20;
    uint64_t v24 = (uint64_t *)((char *)a2 + v20);
    unint64_t v25 = *(uint64_t *)((char *)a2 + v20 + 8);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    }

    else
    {
      uint64_t v27 = *v24;
      sub_187623A28(*v24, v25);
      *(void *)uint64_t v23 = v27;
      *((void *)v23 + 1) = v25;
    }
  }

  return v4;
}

uint64_t sub_18767FA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_18769A01C();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 48));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    return sub_187623C58(*v7, v8);
  }
  return result;
}

void *sub_18767FAFC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_187623A28(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_187623A28(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = a2[5];
  unint64_t v11 = a2[6];
  sub_187623A28(v10, v11);
  a1[5] = v10;
  a1[6] = v11;
  uint64_t v12 = a2[7];
  unint64_t v13 = a2[8];
  sub_187623A28(v12, v13);
  a1[7] = v12;
  a1[8] = v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_18769A01C();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = a3[12];
  uint64_t v20 = (char *)a1 + v18;
  unsigned int v21 = (char *)a2 + v18;
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  int v22 = (char *)a1 + v19;
  uint64_t v23 = (void *)((char *)a2 + v19);
  unint64_t v24 = *(void *)((char *)a2 + v19 + 8);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)int v22 = *(_OWORD *)v23;
  }

  else
  {
    uint64_t v25 = *v23;
    sub_187623A28(*v23, v24);
    *(void *)int v22 = v25;
    *((void *)v22 + 1) = v24;
  }

  return a1;
}

uint64_t sub_18767FC0C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_187623A28(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_187623C58(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_187623A28(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_187623C58(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_187623A28(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_187623C58(v16, v17);
  uint64_t v18 = *(void *)(a2 + 56);
  unint64_t v19 = *(void *)(a2 + 64);
  sub_187623A28(v18, v19);
  uint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  sub_187623C58(v20, v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 24LL))(v23, v24, v25);
  uint64_t v26 = a3[11];
  uint64_t v27 = a1 + v26;
  char v28 = (int *)(a2 + v26);
  int v29 = *v28;
  *(_BYTE *)(v27 + 4) = *((_BYTE *)v28 + 4);
  *(_DWORD *)uint64_t v27 = v29;
  uint64_t v30 = a3[12];
  unsigned int v31 = (uint64_t *)(a1 + v30);
  int v32 = (uint64_t *)(a2 + v30);
  unint64_t v33 = *(void *)(a2 + v30 + 8);
  if (*(void *)(a1 + v30 + 8) >> 60 != 15LL)
  {
    if (v33 >> 60 != 15)
    {
      uint64_t v35 = *v32;
      sub_187623A28(v35, v33);
      uint64_t v36 = *v31;
      unint64_t v37 = v31[1];
      *unsigned int v31 = v35;
      v31[1] = v33;
      sub_187623C58(v36, v37);
      return a1;
    }

    sub_18767FD8C((uint64_t)v31);
    goto LABEL_6;
  }

  if (v33 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)unsigned int v31 = *(_OWORD *)v32;
    return a1;
  }

  uint64_t v34 = *v32;
  sub_187623A28(v34, v33);
  *unsigned int v31 = v34;
  v31[1] = v33;
  return a1;
}

uint64_t sub_18767FD8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_18767FDC0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_18769A01C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = a3[12];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

void *sub_18767FE70(void *a1, uint64_t a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_187623C58(v6, v7);
  uint64_t v8 = a1[3];
  unint64_t v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_187623C58(v8, v9);
  uint64_t v10 = a1[5];
  unint64_t v11 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  sub_187623C58(v10, v11);
  uint64_t v12 = a1[7];
  unint64_t v13 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  sub_187623C58(v12, v13);
  uint64_t v14 = a3[10];
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_18769A01C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = a3[12];
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = a2 + v18;
  v20[4] = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  uint64_t v22 = (void *)((char *)a1 + v19);
  uint64_t v23 = (uint64_t *)(a2 + v19);
  unint64_t v24 = *(void *)((char *)a1 + v19 + 8);
  if (v24 >> 60 != 15)
  {
    unint64_t v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *v22;
      *uint64_t v22 = *v23;
      v22[1] = v25;
      sub_187623C58(v26, v24);
      return a1;
    }

    sub_18767FD8C((uint64_t)v22);
  }

  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  return a1;
}

uint64_t sub_18767FF88()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18767FF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v8);
  }

uint64_t sub_18768001C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187680028(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = sub_18769A01C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_SecretShare()
{
  uint64_t result = qword_18C6DA4C8;
  if (!qword_18C6DA4C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1876800E0()
{
  uint64_t result = sub_18769A01C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t sub_18768017C()
{
  uint64_t v0 = sub_18769A160();
  __swift_allocate_value_buffer(v0, qword_18C6DEEA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6DEEA8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA1E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18769D660;
  unint64_t v5 = v24 + v4;
  unint64_t v6 = v24 + v4 + *(int *)(v1 + 48);
  *(void *)(v24 + v4) = 1LL;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7LL;
  *(_BYTE *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1896102D0];
  uint64_t v8 = sub_18769A148();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v3 + *(int *)(v1 + 48);
  *(void *)(v5 + sub_187623C58(v4, v3) = 2LL;
  *(void *)unint64_t v10 = "share_x";
  *(void *)(v10 + 8) = 7LL;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v3);
  uint64_t v12 = (char *)v11 + *(int *)(v1 + 48);
  *unint64_t v11 = 3LL;
  *(void *)uint64_t v12 = "share_y";
  *((void *)v12 + 1) = 7LL;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v3);
  uint64_t v14 = (char *)v13 + *(int *)(v1 + 48);
  *unint64_t v13 = 4LL;
  *(void *)uint64_t v14 = "threshold";
  *((void *)v14 + 1) = 9LL;
  v14[16] = 2;
  v9();
  unint64_t v15 = (void *)(v5 + 4 * v3);
  uint64_t v16 = (char *)v15 + *(int *)(v1 + 48);
  *unint64_t v15 = 5LL;
  *(void *)uint64_t v16 = "iv";
  *((void *)v16 + 1) = 2LL;
  _BYTE v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v3);
  uint64_t v18 = (char *)v17 + *(int *)(v1 + 48);
  *uint64_t v17 = 6LL;
  *(void *)uint64_t v18 = "ciphertext";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v3);
  uint64_t v20 = (char *)v19 + *(int *)(v1 + 48);
  *uint64_t v19 = 7LL;
  *(void *)uint64_t v20 = "tag";
  *((void *)v20 + 1) = 3LL;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v3);
  uint64_t v22 = (char *)v21 + *(int *)(v1 + 48);
  void *v21 = 8LL;
  *(void *)uint64_t v22 = "associated_data";
  *((void *)v22 + 1) = 15LL;
  v22[16] = 2;
  v9();
  return sub_18769A154();
}

uint64_t sub_187680434()
{
  uint64_t result = sub_18769A064();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
        case 2LL:
          sub_18769A0AC();
          break;
        case 3LL:
        case 5LL:
        case 6LL:
        case 7LL:
          sub_18769A094();
          break;
        case 4LL:
          type metadata accessor for CryptoKitSecretSharing_SecretShare();
          sub_18769A0A0();
          break;
        case 8LL:
          type metadata accessor for CryptoKitSecretSharing_SecretShare();
          sub_18769A088();
          break;
        default:
          break;
      }

      uint64_t result = sub_18769A064();
    }
  }

  return result;
}

uint64_t sub_1876805B0()
{
  if (!*v0 || (uint64_t result = sub_18769A130(), !v1))
  {
    if (!v0[1] || (uint64_t result = sub_18769A130(), !v1)) {
      __asm { BR              X10 }
    }
  }

  return result;
}

uint64_t sub_1876806E0(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) != 0)
  {
    sub_18769A124();
    if (v3) {
      JUMPOUT(0x1876806A8LL);
    }
  }

  return ((uint64_t (*)(void))((char *)sub_187680748 + 4 * byte_18769E780[*(void *)(v2 + 48) >> 62]))(*(void *)(v2 + 40));
}

uint64_t sub_187680748(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) != 0)
  {
    sub_18769A124();
    if (v3) {
      JUMPOUT(0x1876806A8LL);
    }
  }

  return ((uint64_t (*)(void))((char *)sub_1876807A8 + 4 * byte_18769E784[*(void *)(v2 + 64) >> 62]))(*(void *)(v2 + 56));
}

void sub_1876807A8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0 || (sub_18769A124(), !v3))
  {
    sub_1876808AC(v2);
    if (!v3)
    {
      type metadata accessor for CryptoKitSecretSharing_SecretShare();
      sub_18769A004();
    }
  }

  JUMPOUT(0x1876806A8LL);
}

uint64_t sub_187680838(uint64_t a1)
{
  uint64_t result = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  return result;
}

uint64_t sub_1876808AC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  uint64_t v3 = a1 + *(int *)(result + 48);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    sub_187623A28(*(void *)v3, *(void *)(v3 + 8));
    sub_18769A124();
    return sub_1876482B4(v5, v4);
  }

  return result;
}

double sub_187680948@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_OWORD *)(a2 + 16) = xmmword_18769E750;
  *(_OWORD *)(a2 + 32) = xmmword_18769E750;
  *(_OWORD *)(a2 + 48) = xmmword_18769E750;
  *(void *)(a2 + 64) = 0xC000000000000000LL;
  sub_18769A010();
  uint64_t v4 = *(int *)(a1 + 48);
  uint64_t v5 = a2 + *(int *)(a1 + 44);
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_18769E760;
  return result;
}

unint64_t sub_1876809B0()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1876809CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_187680A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = sub_18769A01C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_187680A4C())()
{
  return nullsub_1;
}

uint64_t sub_187680A60()
{
  return sub_187680434();
}

uint64_t sub_187680A74()
{
  return sub_1876805B0();
}

uint64_t sub_187680A88()
{
  return sub_18769A04C();
}

uint64_t sub_187680AD8@<X0>(uint64_t a1@<X8>)
{
  if (qword_18C6D97C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_18769A160();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_18C6DEEA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t sub_187680B48()
{
  return sub_18769A0E8();
}

uint64_t sub_187680B88()
{
  return sub_18769A0F4();
}

uint64_t sub_187680BDC()
{
  return sub_187639840( &qword_18C6DA4D8,  (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare,  (uint64_t)&unk_18769E800);
}

uint64_t sub_187680C08()
{
  return sub_187639840( &qword_18C6DA4E0,  (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare,  (uint64_t)&unk_18769E8F0);
}

uint64_t sub_187680C34()
{
  return sub_187639840( &qword_18C6DA4E8,  (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare,  (uint64_t)&unk_18769E828);
}

uint64_t sub_187680C60()
{
  return sub_187639840( &qword_18C6DA4F0,  (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare,  (uint64_t)&unk_18769E868);
}

uint64_t sub_187680C8C(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_18769A01C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v6);
  unint64_t v10 = &v34[-v9];
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 4) != *((_DWORD *)a2 + 1)) {
    goto LABEL_18;
  }
  sub_187638644(*(void *)(a1 + 8), *(void *)(a1 + 16));
  if ((v11 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v12 = (int *)type metadata accessor for CryptoKitSecretSharing_SecretShare();
  uint64_t v13 = v12[11];
  uint64_t v14 = (_DWORD *)(a1 + v13);
  char v15 = *(_BYTE *)(a1 + v13 + 4);
  uint64_t v16 = &a2[v13];
  int v17 = a2[v13 + 4];
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_18;
    }
  }

  else
  {
    if (*v14 != *(_DWORD *)v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_18;
    }
  }

  sub_187638644(*(void *)(a1 + 24), *(void *)(a1 + 32));
  if ((v18 & 1) == 0) {
    goto LABEL_18;
  }
  sub_187638644(*(void *)(a1 + 40), *(void *)(a1 + 48));
  if ((v19 & 1) == 0) {
    goto LABEL_18;
  }
  sub_187638644(*(void *)(a1 + 56), *(void *)(a1 + 64));
  if ((v20 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v21 = v12[12];
  uint64_t v22 = *(void *)(a1 + v21);
  unint64_t v23 = *(void *)(a1 + v21 + 8);
  uint64_t v24 = (uint64_t *)&a2[v21];
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  if (v23 >> 60 == 15)
  {
    if (v26 >> 60 == 15) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }

  if (v26 >> 60 == 15)
  {
LABEL_17:
    uint64_t v27 = v22;
    sub_18764642C(v22, v23);
    sub_18764642C(v25, v26);
    sub_1876482B4(v27, v23);
    sub_1876482B4(v25, v26);
    goto LABEL_18;
  }

  uint64_t v36 = v22;
  sub_18764642C(v22, v23);
  sub_18764642C(v25, v26);
  sub_187638644(v36, v23);
  int v35 = v30;
  sub_1876482B4(v25, v26);
  sub_1876482B4(v36, v23);
  if ((v35 & 1) != 0)
  {
LABEL_21:
    unsigned int v31 = (char *)(a1 + v12[10]);
    int v32 = *(void (**)(_BYTE *, char *, uint64_t))(v5 + 16);
    v32(v10, v31, v4);
    v32(v8, &a2[v12[10]], v4);
    sub_187639840(&qword_18C6DA200, (uint64_t (*)(uint64_t))MEMORY[0x189610108], MEMORY[0x189610120]);
    char v28 = sub_18769A424();
    unint64_t v33 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v33(v8, v4);
    v33(v10, v4);
    return v28 & 1;
  }

uint64_t CryptoKitError.hash(into:)()
{
  if (*(_BYTE *)(v0 + 4) == 1) {
    __asm { BR              X9 }
  }

  sub_18769A760();
  return sub_18769A76C();
}

uint64_t CryptoKitError.hashValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 4);
  sub_18769A754();
  if (v2 == 1) {
    __asm { BR              X9 }
  }

  sub_18769A760();
  sub_18769A76C();
  return sub_18769A778();
}

uint64_t sub_18768106C()
{
  if (*(_BYTE *)(v0 + 4) == 1) {
    __asm { BR              X9 }
  }

  sub_18769A760();
  return sub_18769A76C();
}

uint64_t sub_1876810F8()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 4);
  sub_18769A754();
  if (v2 == 1) {
    __asm { BR              X9 }
  }

  sub_18769A760();
  sub_18769A76C();
  return sub_18769A778();
}

BOOL static CryptoKitASN1Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptoKitASN1Error.hash(into:)()
{
  return sub_18769A760();
}

uint64_t CryptoKitASN1Error.hashValue.getter()
{
  return sub_18769A778();
}

uint64_t _s16CryptoKitPrivate0aB5ErrorO2eeoiySbAC_ACtFZ_0(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 4) == 1) {
    return ((uint64_t (*)(void))((char *)&loc_187681264 + 4 * byte_18769E988[v2]))();
  }
  if ((*(_BYTE *)(a2 + 4) & 1) != 0) {
    return 0LL;
  }
  return (_DWORD)v2 == *(_DWORD *)a2;
}

uint64_t sub_187681290@<X0>(char a1@<W8>)
{
  if (v1 != 1) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x18768127CLL);
  }
  return 1LL;
}

uint64_t sub_1876812A4@<X0>(char a1@<W8>)
{
  if (v1 != 2) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x18768127CLL);
  }
  return 1LL;
}

uint64_t sub_1876812B8@<X0>(char a1@<W8>)
{
  if (v1 != 3) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x18768127CLL);
  }
  return 1LL;
}

uint64_t sub_1876812CC@<X0>(char a1@<W8>)
{
  if (v1 != 4) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x18768127CLL);
  }
  return 1LL;
}

uint64_t sub_1876812E0@<X0>(char a1@<W8>)
{
  if (v1 <= 4) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x18768127CLL);
  }
  return 1LL;
}

unint64_t sub_1876812F8()
{
  unint64_t result = qword_18C6DA500;
  if (!qword_18C6DA500)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_18C6DA500);
  }

  return result;
}

unint64_t sub_187681340()
{
  unint64_t result = qword_18C6DA508;
  if (!qword_18C6DA508)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for CryptoKitASN1Error,  &type metadata for CryptoKitASN1Error);
    atomic_store(result, (unint64_t *)&qword_18C6DA508);
  }

  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKitError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_1876813E4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_187681400(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }

  else
  {
    *(_BYTE *)(result + 4) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for CryptoKitError()
{
  return &type metadata for CryptoKitError;
}

uint64_t getEnumTagSinglePayload for CryptoKitASN1Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for CryptoKitASN1Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_18768150C + 4 * byte_18769E993[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_187681540 + 4 * byte_18769E98E[v4]))();
}

uint64_t sub_187681540(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187681548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187681550LL);
  }
  return result;
}

uint64_t sub_18768155C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187681564LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_187681568(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187681570(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitASN1Error()
{
  return &type metadata for CryptoKitASN1Error;
}

size_t sub_18768158C(char a1)
{
  int v2 = v1;
  size_t v4 = _swift_stdlib_malloc_size(v2) - 32;
  uint64_t v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = v2[2];
  size_t v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_8;
  }

  BOOL v9 = __OFSUB__(v8, 1LL);
  size_t v10 = v8 - 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  *((_BYTE *)v2 + v7 + 32) = a1;
  uint64_t v11 = *v5 + 1;
  if (!__OFADD__(*v5, 1LL))
  {
    size_t result = swift_beginAccess();
    *uint64_t v5 = v11;
    return result;
  }

size_t sub_187681654(const void *a1, size_t a2)
{
  int v3 = v2;
  size_t v6 = _swift_stdlib_malloc_size(v2) - 32;
  int64_t v7 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = v3[2];
  size_t v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v11 = __OFSUB__(v10, a2);
  size_t v12 = v10 - a2;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((v12 & 0x8000000000000000LL) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v9)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!a1) {
    goto LABEL_8;
  }
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    size_t result = (size_t)memmove((char *)v3 + v9 + 32, a1, a2);
LABEL_8:
    if (!__OFADD__(*v7, a2))
    {
      *v7 += a2;
      return result;
    }

    goto LABEL_14;
  }

uint64_t sub_187681724(int64_t a1, int64_t a2, size_t a3)
{
  size_t v4 = v3;
  size_t v8 = (char *)*v3 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }

  BOOL v11 = __OFSUB__(*v8, v10);
  int64_t v12 = *v8 - v10;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v4);
    if (result - 32 >= v13)
    {
      if (a2 >= a1) {
        return sub_187681A68(a1, a2, a3);
      }
      goto LABEL_26;
    }
  }

  if (v13 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v13))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v13)
  {
    unsigned int v14 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
    unsigned int v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    int v16 = v15 | HIWORD(v15);
    if (v16 == -1) {
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v17 = (v16 + 1);
    }
  }

  else
  {
    uint64_t v17 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v17;
  if (a1 < 0) {
    goto LABEL_24;
  }
  char v18 = (const void *)result;
  char v19 = (char *)*v4;
  uint64_t result = swift_beginAccess();
  uint64_t v20 = *((void *)v19 + 2);
  if (v20 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  sub_187625D58(v19, 0LL, a1);
  sub_18768158C(a3);
  sub_187625D58((char *)*v4, a2, v20);
  *size_t v4 = v18;
  return swift_release();
}

uint64_t sub_1876818C0(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  uint64_t v5 = v4;
  int64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }

  BOOL v13 = __OFSUB__(*v10, v12);
  int64_t v14 = *v10 - v12;
  if (v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v15 = v14 + a4;
  if (__OFADD__(v14, a4))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_187681B64(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }

  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v20 = (const void *)result;
  uint64_t v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  sub_187625D58(v21, 0LL, a1);
  sub_187681654(a3, a4);
  sub_187625D58((char *)*v5, a2, v22);
  *uint64_t v5 = v20;
  return swift_release();
}

size_t sub_187681A68(int64_t a1, int64_t a2, size_t a3)
{
  int64_t v7 = v3 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v10 = v3[2];
  int64_t v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  int64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1LL))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v13 = __OFSUB__(1LL, v9);
  uint64_t v14 = 1 - v9;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_1876279A8(a2, v10, v14);
  size_t result = sub_187681D6C(a3, a1);
  uint64_t v15 = v3[2];
  uint64_t v16 = v15 + v14;
  if (!__OFADD__(v15, v14))
  {
    size_t result = swift_beginAccess();
    *int64_t v7 = v16;
    return result;
  }

size_t sub_187681B64(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  int64_t v9 = v4 + 2;
  size_t result = swift_beginAccess();
  int64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v12 = v4[2];
  int64_t v13 = v12 - v11;
  if (__OFSUB__(v12, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  int64_t v14 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v15 = __OFSUB__(a4, v11);
  uint64_t v16 = a4 - v11;
  if (v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v12 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_1876279A8(a2, v12, v16);
  size_t result = (size_t)sub_187681DDC(a3, a4, a1);
  uint64_t v17 = v4[2];
  uint64_t v18 = v17 + v16;
  if (!__OFADD__(v17, v16))
  {
    size_t result = swift_beginAccess();
    *int64_t v9 = v18;
    return result;
  }

size_t sub_187681C6C(uint64_t a1)
{
  size_t result = swift_beginAccess();
  size_t v3 = *(void *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
  }

  else
  {
    size_t v4 = (const void *)(a1 + 32);
    if ((_DWORD)v3)
    {
      unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
      int v7 = v6 | HIWORD(v6);
      if (v7 == -1) {
        uint64_t v8 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v8 = (v7 + 1);
      }
    }

    else
    {
      uint64_t v8 = 1LL;
    }

    type metadata accessor for SecureBytes.Backing();
    int64_t v9 = (void *)swift_allocObject();
    v9[2] = 0LL;
    v9[3] = v8;
    _swift_stdlib_malloc_size(v9);
    memcpy(v9 + 4, v4, v3);
    swift_beginAccess();
    v9[2] = v3;
    size_t result = _swift_stdlib_malloc_size(v9);
  }

  __break(1u);
  return result;
}

size_t sub_187681D6C(size_t result, int64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  int64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1LL))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  char v5 = result;
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v4 >= a2)
  {
    size_t result = _swift_stdlib_malloc_size(v2);
    *((_BYTE *)v2 + a2 + 32) = v5;
    return result;
  }

void *sub_187681DDC(void *result, size_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v6 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  int v7 = v3;
  uint64_t v8 = result;
  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if ((uint64_t)result - 32 < v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v6 < a3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if (v8)
  {
    if ((a2 & 0x8000000000000000LL) == 0) {
      return memmove(&v7[a3 + 32], v8, a2);
    }
    goto LABEL_13;
  }

  return result;
}

uint64_t sub_187681E84()
{
  uint64_t result = cckem_kyber768();
  if (result) {
    qword_18C6DA510 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v7 = cckem_sizeof_pub_ctx();
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v8 = sub_187683120(v10, sub_187681FC0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t sub_187681F80(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = *a1;
  if (result) {
    return sub_1876820AC(result, a3, a2, a4, a5, a6, &v7);
  }
  __break(1u);
  return result;
}

uint64_t sub_187681FC0(uint64_t *a1, void *a2)
{
  return sub_187681F80(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_187681FDC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  cckem_pub_ctx_init();
  uint64_t result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    int v7 = result;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    *a3 = a4;
  }

  return result;
}

uint64_t sub_1876820AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v11 = cckem_pub_ctx_init();
  MEMORY[0x1895F8858](v11);
  uint64_t result = sub_187699ED8();
  if (v7) {
    *a7 = v7;
  }
  else {
    *a3 = a4;
  }
  return result;
}

uint64_t sub_1876821A0(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_18C6D97C8 == -1)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = swift_once();
  if (!v1) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    int v2 = result;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = v2;
    *(_BYTE *)(v3 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  v3[3] = *MEMORY[0x1895F89C0];
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v0 = cckem_pubkey_nbytes_info();
  v3[0] = sub_187644164(v0);
  v3[1] = v1;
  sub_187670F74((uint64_t)v3);
  sub_187683218((uint64_t)v3);
  return v3[0];
}

uint64_t Kyber768.PublicKey.encapsulate()()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v1 = sub_18769A214();
  MEMORY[0x1895F8858](v1);
  int v12 = 0;
  if (!ccrng()) {
LABEL_19:
  }
    __break(1u);
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v2 = cckem_shared_key_nbytes_info();
  if (qword_18C4C70B0 != -1) {
    swift_once();
  }
  uint64_t v3 = off_18C4C70D0;
  *(void *)&__int128 v10 = off_18C4C70D0;
  if (!v2)
  {
    swift_retain();
    goto LABEL_12;
  }

  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  swift_retain();
  do
  {
    swift_beginAccess();
    sub_187681724(*(void *)(v10 + 16), *(void *)(v10 + 16), 0LL);
    --v2;
  }

  while (v2);
  uint64_t v3 = (void *)v10;
LABEL_12:
  uint64_t v4 = cckem_encapsulated_key_nbytes_info();
  *(void *)&__int128 v10 = sub_187644164(v4);
  *((void *)&v10 + 1) = v5;
  sub_187670F74((uint64_t)&v10);
  __int128 v11 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_187681C6C((uint64_t)v3);
    swift_release();
  }

  swift_beginAccess();
  sub_1876834FC((uint64_t)&v11);
  if (v0)
  {
    swift_release();
    unint64_t v7 = *((void *)&v11 + 1);
    uint64_t v6 = v11;
  }

  else
  {
    sub_187628144();
    swift_retain();
    sub_18769A208();
    unsigned __int128 v8 = v11;
    sub_187623A28(v11, *((unint64_t *)&v11 + 1));
    sub_18769A2B0();
    swift_release();
    unint64_t v7 = v8 >> 64;
    uint64_t v6 = v8;
  }

  return sub_187623C58(v6, v7);
}

uint64_t sub_1876825B4()
{
  return Kyber768.PublicKey.encapsulate()();
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v9 = cckem_sizeof_full_ctx();
  v12[2] = a2;
  v12[3] = a3;
  void v12[4] = a1;
  unint64_t v13 = MEMORY[0x1895F8858](v9);
  unint64_t v10 = sub_187628BA0(v13, (uint64_t (*)(void *, uint64_t *))sub_187683CF4, (uint64_t)v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v4) {
    *a4 = v10;
  }
  return result;
}

void *sub_1876826A0(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (*result)
  {
    uint64_t result = (void *)sub_187699ED8();
    if (!v4) {
      *a2 = a4;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_187682710(uint64_t a1, uint64_t a2)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_privkey_nbytes_info();
  uint64_t result = cckem_pubkey_nbytes_info();
  uint64_t v6 = v4 + result;
  if (__OFADD__(v4, result))
  {
    __break(1u);
    goto LABEL_16;
  }

  if (!a1)
  {
    if (v6) {
      goto LABEL_9;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v6 != a2 - a1)
  {
LABEL_9:
    sub_18762D1DC();
    swift_allocError();
    char v10 = 1;
    *(_DWORD *)uint64_t v9 = 1;
    goto LABEL_10;
  }

  int v7 = cckem_import_privkey();
  if (v7)
  {
    int v8 = v7;
    sub_18762D1DC();
    swift_allocError();
    char v10 = 0;
    *(_DWORD *)uint64_t v9 = v8;
LABEL_10:
    *(_BYTE *)(v9 + 4) = v10;
    return swift_willThrow();
  }

  uint64_t result = cckem_public_ctx();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    int v11 = result;
    sub_18762D1DC();
    swift_allocError();
    char v10 = 0;
    *(_DWORD *)uint64_t v9 = v11;
    goto LABEL_10;
  }

  return result;
}

uint64_t Kyber768.PrivateKey.dataRepresentation.getter()
{
  v4[3] = *MEMORY[0x1895F89C0];
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v0 = cckem_privkey_nbytes_info();
  uint64_t v1 = cckem_pubkey_nbytes_info();
  if (__OFADD__(v0, v1)) {
    __break(1u);
  }
  v4[0] = sub_187644164(v0 + v1);
  v4[1] = v2;
  sub_187670F74((uint64_t)v4);
  sub_187683804((uint64_t)v4);
  return v4[0];
}

unint64_t static Kyber768.PrivateKey.generate()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = ccrng();
  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = v2;
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_sizeof_full_ctx();
  unint64_t result = sub_187628AB8(v4, v3, v4);
  *a1 = result;
  return result;
}

void Kyber768.PrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v3 = cckem_shared_key_nbytes_info();
  if (qword_18C4C70B0 != -1) {
    swift_once();
  }
  uint64_t v4 = off_18C4C70D0;
  uint64_t v5 = off_18C4C70D0;
  if (v3)
  {
    if (v3 < 0)
    {
      __break(1u);
      JUMPOUT(0x187682E84LL);
    }

    swift_retain();
    do
    {
      swift_beginAccess();
      sub_187681724(v5[2], v5[2], 0LL);
      --v3;
    }

    while (v3);
    uint64_t v4 = v5;
  }

  else
  {
    swift_retain();
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_187681C6C((uint64_t)v4);
    swift_release();
  }

  swift_beginAccess();
  __asm { BR              X10 }

uint64_t Kyber768.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v2 = cckem_sizeof_pub_ctx();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = sub_18769A550();
    *(void *)(v4 + 16) = v3;
  }

  else
  {
    uint64_t v4 = MEMORY[0x18961AFE8];
  }

  if (!cckem_public_ctx()) {
LABEL_12:
  }
    __break(1u);
  if (cckem_export_pubkey())
  {
LABEL_11:
    __break(1u);
    __break(1u);
    goto LABEL_12;
  }

  *(void *)(v4 + 16) = v3;
  uint64_t v5 = cckem_sizeof_pub_ctx();
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  uint64_t v6 = sub_187683120(v8, sub_187683D10);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

unint64_t sub_187683040@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = ccrng();
  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = v2;
  if (qword_18C6D97C8 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_sizeof_full_ctx();
  unint64_t result = sub_187628AB8(v4, v3, v4);
  *a1 = result;
  return result;
}

void sub_187683108(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_187683120(uint64_t result, uint64_t (*a2)(void *, uint64_t *))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = sub_18769A550();
    *(void *)(v5 + 16) = v4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
  }

  uint64_t v6 = v5 + 32;
  v7[1] = v4;
  uint64_t v8 = 0LL;
  v7[0] = v5 + 32;
  unint64_t result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }

      if (v6 == v7[0])
      {
        *(void *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }

      goto LABEL_17;
    }

LABEL_21:
  __break(1u);
  return result;
}

void sub_187683218(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_187683278@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  unsigned __int8 v5 = BYTE4(a1);
  unsigned __int8 v6 = BYTE5(a1);
  unsigned __int8 v7 = BYTE6(a1);
  uint64_t result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x1876834C4LL);
  }

  *uint64_t v2 = v1;
  v2[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

void sub_1876834FC(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_187683564()
{
  uint64_t v7 = v1;
  LOWORD(v8) = v0;
  BYTE2(v8) = BYTE2(v0);
  HIBYTE(v8) = BYTE3(v0);
  unsigned __int8 v9 = BYTE4(v0);
  unsigned __int8 v10 = BYTE5(v0);
  unsigned __int8 v11 = BYTE6(v0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x1876837E8LL);
  }

  uint64_t result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    int v5 = result;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = v5;
    *(_BYTE *)(v6 + 4) = 0;
    uint64_t result = swift_willThrow();
  }

  *uint64_t v2 = v7;
  v2[1] = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  return result;
}

void sub_187683804(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_187683868()
{
  uint64_t v6 = v1;
  LOWORD(v7) = v0;
  BYTE2(v7) = BYTE2(v0);
  HIBYTE(v7) = BYTE3(v0);
  unsigned __int8 v8 = BYTE4(v0);
  unsigned __int8 v9 = BYTE5(v0);
  unsigned __int8 v10 = BYTE6(v0);
  if (cckem_export_privkey())
  {
    __break(1u);
    JUMPOUT(0x187683A98LL);
  }

  if (__OFSUB__(v4, *v3))
  {
    __break(1u);
    JUMPOUT(0x187683AA4LL);
  }

  if (!cckem_public_ctx())
  {
    __break(1u);
    JUMPOUT(0x187683AC4LL);
  }

  uint64_t result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x187683AB0LL);
  }

  *uint64_t v2 = v6;
  v2[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

uint64_t sub_187683AE0(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_187699F20();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_187699E90();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_187699EB4();
  if (__OFSUB__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_187699EA8();
  if (!a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    int v7 = result;
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_187683BE0(int *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (a1[1] < (int)v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (!sub_187699E90())
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (__OFSUB__(v7, sub_187699EB4())) {
    goto LABEL_10;
  }
  sub_187699EA8();
  if (cckem_export_privkey())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (__OFSUB__(a4, *a3))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!cckem_public_ctx()) {
    goto LABEL_15;
  }
  uint64_t result = cckem_export_pubkey();
  if ((_DWORD)result) {
    goto LABEL_13;
  }
  return result;
}

void *sub_187683CF4(void *a1, void *a2)
{
  return sub_1876826A0(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_187683D10(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  if (result) {
    return sub_187681FDC(result, **(void **)(v2 + 16), a2, *(void *)(v2 + 24));
  }
  __break(1u);
  return result;
}

unint64_t sub_187683D40()
{
  unint64_t result = qword_18C6DA518[0];
  if (!qword_18C6DA518[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for Kyber768.PublicKey,  &type metadata for Kyber768.PublicKey);
    atomic_store(result, qword_18C6DA518);
  }

  return result;
}

ValueMetadata *type metadata accessor for Kyber768()
{
  return &type metadata for Kyber768;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey()
{
  return &type metadata for Kyber768.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey()
{
  return &type metadata for Kyber768.PrivateKey;
}

size_t sub_187683DB4()
{
  size_t v1 = _swift_stdlib_malloc_size(v0) - 32;
  size_t result = swift_beginAccess();
  int64_t v3 = v0[2];
  if (__OFSUB__(v1, v3))
  {
    __break(1u);
    goto LABEL_6;
  }

  if (((v1 - v3) & 0x8000000000000000LL) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  size_t result = _swift_stdlib_malloc_size(v0);
  if ((uint64_t)(result - 32) >= v3)
  {
    v0[2] = v3;
    return result;
  }

size_t sub_187683E34(int64_t a1, int64_t a2)
{
  int v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }

  int64_t v8 = v2[2];
  if (__OFSUB__(v8, v7))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v8 - v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v9 = __OFSUB__(0LL, v7);
  uint64_t v10 = a1 - a2;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v8 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  size_t result = sub_1876279A8(a2, v8, v10);
  if (a1 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  uint64_t v11 = v2[2];
  uint64_t v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
  {
    size_t result = swift_beginAccess();
    *int v5 = v12;
    return result;
  }

uint64_t sub_187683F38(int64_t a1, int64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = (char *)*v2 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v9 = *v6 - v8;
  if (__OFSUB__(*v6, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v3);
    if (result - 32 >= v9)
    {
      if (a2 >= a1) {
        return sub_187683E34(a1, a2);
      }
      goto LABEL_24;
    }
  }

  if (v9 < 0) {
    goto LABEL_20;
  }
  if (HIDWORD(v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((_DWORD)v9)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    int v12 = v11 | HIWORD(v11);
    if (v12 == -1) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = (v12 + 1);
    }
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v13;
  if (a1 < 0) {
    goto LABEL_22;
  }
  int64_t v14 = (const void *)result;
  BOOL v15 = (char *)*v3;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *((void *)v15 + 2);
  if (v16 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }

  sub_187625D58(v15, 0LL, a1);
  sub_187683DB4();
  sub_187625D58((char *)*v3, a2, v16);
  *int64_t v3 = v14;
  return swift_release();
}

uint64_t sub_1876840B4(uint64_t a1, uint64_t a2)
{
  return sub_187682710(a1, a2);
}

uint64_t sub_1876840CC(uint64_t a1)
{
  return sub_1876821A0(a1);
}

uint64_t sub_1876840E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proof(319LL, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_187684198(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 & 0xF8 | 7LL;
  uint64_t v11 = v4 + v10;
  unint64_t v12 = (v4 + v10 + ((v6 + (v6 & ~(unint64_t)v5)) & ~(unint64_t)v5)) & ~v10;
  uint64_t v13 = *(void *)(v8 + 64) + 7LL;
  int v14 = (v9 | v5) & 0x100000;
  if ((v10 | v5) != 7 || v14 != 0 || (v13 & 0xFFFFFFFFFFFFFFF8LL) + v12 + 8 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v20 = (uint64_t *)(v17 + (((v10 | v5) + 16) & ~(v10 | v5)));
    swift_retain();
  }

  else
  {
    unint64_t v18 = ~(unint64_t)v5;
    uint64_t v26 = ~v10;
    uint64_t v27 = v7;
    uint64_t v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16);
    uint64_t v20 = a1;
    v19(a1, a2, AssociatedTypeWitness);
    unint64_t v21 = ((unint64_t)a2 + v6) & v18;
    v19((uint64_t *)(((unint64_t)a1 + v6) & v18), (uint64_t *)v21, AssociatedTypeWitness);
    unint64_t v22 = (v6 + (((unint64_t)a1 + v6) & v18)) & v18;
    unint64_t v23 = (v6 + v21) & v18;
    v19((uint64_t *)v22, (uint64_t *)v23, AssociatedTypeWitness);
    unint64_t v24 = (v23 + v11) & v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v22 + v11) & v26, v24, v27);
    *(void *)((v13 + ((v22 + v11) & v26)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v13 + v24) & 0xFFFFFFFFFFFFF8LL);
    sub_18769A52C();
  }

  return v20;
}

uint64_t sub_1876843C0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v5 + v6 + a1) & ~v6;
  v4(v7, AssociatedTypeWitness);
  uint64_t v8 = (v5 + v6 + v7) & ~v6;
  v4(v8, AssociatedTypeWitness);
  uint64_t v9 = v8 + v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7LL;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))((v9 + v12) & ~v12, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_187684528(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v9) & ~v8;
  uint64_t v12 = (v7 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7LL;
  uint64_t v16 = (v7 + v15 + v11) & ~v15;
  uint64_t v17 = (v7 + v15 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  *(void *)((*(void *)(v14 + 64) + 7LL + v16) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v14 + 64) + 7LL + v17) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  return a1;
}

uint64_t sub_1876846E0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v9) & ~v8;
  uint64_t v12 = (v7 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7LL;
  uint64_t v16 = (v7 + v15 + v11) & ~v15;
  uint64_t v17 = (v7 + v15 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(v16, v17, v13);
  *(void *)((*(void *)(v14 + 64) + 7LL + v16) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v14 + 64)
                                                                                       + 7LL
                                                                                       + v17) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1876848A4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v9) & ~v8;
  uint64_t v12 = (v7 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7LL;
  uint64_t v16 = (v7 + v15 + v11) & ~v15;
  uint64_t v17 = (v7 + v15 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v17, v13);
  *(void *)((*(void *)(v14 + 64) + 7LL + v16) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v14 + 64) + 7LL + v17) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_187684A58(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v7 + v8 + a1) & ~v8;
  uint64_t v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v7 + v8 + v9) & ~v8;
  uint64_t v12 = (v7 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7LL;
  uint64_t v16 = (v7 + v15 + v11) & ~v15;
  uint64_t v17 = (v7 + v15 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v16, v17, v13);
  *(void *)((*(void *)(v14 + 64) + 7LL + v16) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v14 + 64)
                                                                                       + 7LL
                                                                                       + v17) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187684C14(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = v7;
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = v13 + v14;
  uint64_t v16 = *(_DWORD *)(v8 + 80) & 0xF8 | 7LL;
  uint64_t v17 = v13 + v16;
  uint64_t v18 = *(void *)(v8 + 64) + 7LL;
  if (v11 < a2)
  {
    if ((((v18 & 0xFFFFFFFFFFFFFFF8LL) + ((v17 + ((v15 + (v15 & ~v14)) & ~v14)) & ~v16) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = a2 - v11 + 1;
    }
    if (v19 >= 0x10000) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 0x100) {
      unsigned int v20 = 1;
    }
    if (v19 >= 2) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0LL;
    }
    __asm { BR              X4 }
  }

  if (v6 >= v10)
  {
    unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v23 = a1;
    uint64_t v9 = v6;
    uint64_t v12 = AssociatedTypeWitness;
    return v24(v23, v9, v12);
  }

  uint64_t v23 = (v17 + ((v15 + ((v15 + a1) & ~v14)) & ~v14)) & ~v16;
  if (v9 >= 0x7FFFFFFF)
  {
    unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v24(v23, v9, v12);
  }

  unint64_t v25 = *(void *)((v18 + v23) & 0xFFFFFFFFFFFFF8LL);
  if (v25 >= 0xFFFFFFFF) {
    LODWORD(v25) = -1;
  }
  return (v25 + 1);
}

void sub_187684E8C(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((*(void *)(v6 + 64)
        + (*(_DWORD *)(v8 + 80) & 0xF8LL | 7)
        + ((*(void *)(v6 + 64) + v11 + ((*(void *)(v6 + 64) + v11) & ~v11)) & ~v11)) & ~(*(_DWORD *)(v8 + 80) & 0xF8LL | 7))
      + ((*(void *)(v8 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL)
      + 8;
  if (v10 >= a3)
  {
    int v15 = 0u;
    if (a2 <= v10) {
      goto LABEL_20;
    }
  }

  else
  {
    if ((_DWORD)v12) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a3 - v10 + 1;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (a2 <= v10) {
LABEL_20:
    }
      __asm { BR              X17 }
  }

  if ((_DWORD)v12)
  {
    unsigned int v16 = ~v10 + a2;
    bzero(a1, v12);
    *a1 = v16;
  }

  __asm { BR              X10 }

void sub_187685078()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x187685150LL);
}

void sub_187685080()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x187685088LL);
  }
  JUMPOUT(0x187685150LL);
}

void sub_1876850FC()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x187685150LL);
}

void sub_187685104()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x187685150LL);
}

uint64_t sub_18768510C(uint64_t a1, size_t a2)
{
  *(_WORD *)(v11 + v14) = 0;
  if (!(_DWORD)v10) {
    goto LABEL_7;
  }
  if (v13 < v5)
  {
    uint64_t v2 = (_DWORD *)((v7 + ((v6 + ((v6 + v11) & v9)) & v9)) & v8);
    if ((_DWORD)a2)
    {
      int v3 = ~v5 + v10;
      bzero(v2, a2);
      *uint64_t v2 = v3;
    }

uint64_t _s14KeyCommitmentsVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s14KeyCommitmentsVMn);
}

uint64_t sub_18768517C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && (uint64_t v4 = *(void *)(a2 + 16)) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    sub_18769A52C();
    sub_18769A52C();
    uint64_t v7 = 0LL;
    uint64_t v8 = MEMORY[0x18961AFE8];
    while (1)
    {
      uint64_t v9 = *(void *)(a2 + 8 * v7 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9BA8);
      uint64_t result = swift_initStackObject();
      *(_OWORD *)(result + 16) = xmmword_18769CCC0;
      *(void *)(result + 32) = v6;
      uint64_t v11 = (_OWORD *)(result + 32);
      *(void *)(result + 40) = v9;
      int64_t v12 = *(void *)(v8 + 16);
      int64_t v13 = v12 + 2;
      if (__OFADD__(v12, 2LL)) {
        break;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)result || (int64_t v14 = *(void *)(v8 + 24) >> 1, v14 < v13))
      {
        if (v12 <= v13) {
          int64_t v15 = v12 + 2;
        }
        else {
          int64_t v15 = v12;
        }
        uint64_t result = (uint64_t)sub_18765B250((char *)result, v15, 1, (char *)v8);
        uint64_t v8 = result;
        int64_t v14 = *(void *)(result + 24) >> 1;
      }

      uint64_t v16 = *(void *)(v8 + 16);
      if (v14 - v16 < 2) {
        goto LABEL_19;
      }
      *(_OWORD *)(v8 + 8 * v16 + 32) = *v11;
      if (__OFADD__(v16, 2LL)) {
        goto LABEL_20;
      }
      *(void *)(v8 + 16) = v16 + 2;
      swift_bridgeObjectRelease();
      if (v2 - 1 != v7)
      {
        uint64_t v6 = *(void *)(a1 + 8 * v7++ + 40);
        if (v4 != v7) {
          continue;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t sub_187685308(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = v6;
  int64_t v11 = a1;
  uint64_t v12 = 0LL;
  int64_t v13 = a1;
  while (1)
  {
    BOOL v14 = v13 <= a2;
    if (a3 > 0) {
      BOOL v14 = v13 >= a2;
    }
    if (v14) {
      break;
    }
    BOOL v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15) {
      int64_t v13 = (v13 >> 63) ^ 0x8000000000000000LL;
    }
    BOOL v15 = __OFADD__(v12++, 1LL);
    if (v15)
    {
      __break(1u);
      break;
    }
  }

  uint64_t v26 = (void *)MEMORY[0x18961AFE8];
  uint64_t v16 = &v26;
  uint64_t result = sub_18769A640();
  if (!v12) {
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v18 = v11 <= a2;
    if (a3 > 0) {
      BOOL v18 = v11 >= a2;
    }
    if (v18) {
      break;
    }
    uint64_t v23 = v11;
    char v24 = 0;
    sub_187686A80(&v23, a4, a5, a6, &v22, &v25);
    if (v7)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v16;
    }

    uint64_t v7 = 0LL;
    if (__OFADD__(v11, a3)) {
      int64_t v11 = ((v11 + a3) >> 63) ^ 0x8000000000000000LL;
    }
    else {
      v11 += a3;
    }
    sub_18769A628();
    sub_18769A64C();
    sub_18769A658();
    uint64_t v16 = &v26;
    uint64_t result = sub_18769A634();
    if (!--v12)
    {
      while (1)
      {
LABEL_25:
        BOOL v19 = v11 <= a2;
        if (a3 > 0) {
          BOOL v19 = v11 >= a2;
        }
        if (v19) {
          break;
        }
        uint64_t v23 = v11;
        sub_187686A80(&v23, a4, a5, a6, &v22, &v25);
        if (v7) {
          goto LABEL_29;
        }
        uint64_t v7 = 0LL;
        if (__OFADD__(v11, a3)) {
          int64_t v11 = ((v11 + a3) >> 63) ^ 0x8000000000000000LL;
        }
        else {
          v11 += a3;
        }
        sub_18769A628();
        sub_18769A64C();
        sub_18769A658();
        uint64_t v16 = &v26;
        sub_18769A634();
      }

      uint64_t v16 = v26;
      swift_bridgeObjectRelease();
      return (uint64_t)v16;
    }
  }

  __break(1u);
  return result;
}

void *sub_187685514(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    int v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AC8);
      uint64_t v4 = (void *)sub_18769A550();
      unsigned int v5 = v4;
      v4[2] = a2;
      void v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            sub_18769A52C();
            --v6;
          }

          while (v6);
        }

        sub_18769A52C();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x18961AFE8];
    }

    return v5;
  }

  return result;
}

uint64_t PIR.IndexPirClient.init(pirParams:secretKey:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  char v6 = a1[1];
  int v25 = a1[2];
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v21 = *((void *)a1 + 2);
  uint64_t v22 = *((void *)a1 + 1);
  uint64_t v19 = *((void *)a1 + 5);
  uint64_t v20 = *((void *)a1 + 4);
  uint64_t v18 = *((void *)a1 + 6);
  int v24 = a1[56];
  char v8 = a1[57];
  uint64_t v10 = *a2;
  unint64_t v9 = a2[1];
  LOBYTE(v23[0]) = v5;
  BYTE1(v23[0]) = v6;
  _s12ParamContextCMa();
  swift_allocObject();
  sub_18769A52C();
  sub_1876496B8((uint64_t)v23);
  if (v3)
  {
    sub_187623C58(v10, v9);
    return swift_bridgeObjectRelease_n();
  }

  else
  {
    uint64_t v13 = v11;
    char v17 = v8;
    char v14 = v25;
    v23[0] = v10;
    v23[1] = v9;
    swift_retain_n();
    sub_18767B524((uint64_t)v23, v13);
    uint64_t v16 = v15;
    sub_18769A52C();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease_n();
    *(_BYTE *)a3 = v5;
    *(_BYTE *)(a3 + 1) = v6;
    *(_BYTE *)(a3 + 2) = v14;
    *(void *)(a3 + 8) = v22;
    *(void *)(a3 + 16) = v21;
    *(void *)(a3 + 24) = v7;
    *(void *)(a3 + 32) = v20;
    *(void *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v18;
    *(_BYTE *)(a3 + 56) = v24;
    *(_BYTE *)(a3 + 57) = v17;
    *(void *)(a3 + 64) = v13;
    *(void *)(a3 + 72) = v16;
  }

  return result;
}

unint64_t PIR.IndexPirClient.generateGaloisKey()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1;
  int v5 = *(unsigned __int8 *)(v1 + 2);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v3 + 72);
  if (v5 == 2)
  {
    uint64_t v8 = *(void *)(v3 + 40);
    if (v8 >= 0) {
      uint64_t v9 = *(void *)(v3 + 40);
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    uint64_t v10 = v9 >> 1;
    if (v8 == 1) {
      unint64_t v11 = 1LL;
    }
    else {
      unint64_t v11 = v10;
    }
    if ((v11 & 0x8000000000000000LL) == 0)
    {
      if (!HIDWORD(v11))
      {
        char v12 = *(_BYTE *)(v3 + 57);
        unint64_t result = sub_1876498C0();
        if (!v2)
        {
          int v14 = result;
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9AB0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_18769C700;
          *(_DWORD *)(inited + 32) = v14;
          if ((v12 & 1) != 0)
          {
            int v22 = sub_18764997C();
            uint64_t inited = (uint64_t)sub_18765B574((char *)1, 2LL, 1, (char *)inited);
            *(void *)(inited + 16) = 2LL;
            *(_DWORD *)(inited + 36) = v22;
          }

          swift_retain();
          swift_retain();
          return sub_18768BC4C(v6, inited, v7, a1);
        }

        return result;
      }

uint64_t PIR.IndexPirClient.generateRelinKey()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 72);
  swift_retain();
  swift_retain();
  return sub_18768B768(v3, a1);
}

void *PIR.IndexPirClient.query(indices:)(void *a1)
{
  if (*(_BYTE *)(v1 + 2) == 2) {
    return sub_187685E28(a1);
  }
  uint64_t v3 = sub_18769A52C();
  return (void *)sub_187686240(v3);
}

uint64_t PIR.IndexPirClient.decryptVectorizedPirReply(reply:indices:)(uint64_t result, uint64_t a2)
{
  __int128 v5 = v2[1];
  v20[0] = *v2;
  v20[1] = v5;
  __int128 v6 = v2[3];
  __int128 v21 = v2[2];
  __int128 v22 = v6;
  __int128 v23 = v2[4];
  if (BYTE2(v20[0]) != 2) {
    goto LABEL_9;
  }
  if ((BYTE8(v22) & 1) != 0) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = v22;
  }
  if (!v4)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v7 = result;
  if (*((void *)&v21 + 1) == 0x8000000000000000LL && v4 == -1) {
    goto LABEL_24;
  }
  uint64_t v8 = *((void *)&v21 + 1) / v4;
  uint64_t v9 = *(void *)(a2 + 16);
  if (*((void *)&v21 + 1) / v4 < v9)
  {
LABEL_9:
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 5;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return v4;
  }

  if (v21 >= 0) {
    uint64_t v11 = *((void *)&v21 + 1);
  }
  else {
    uint64_t v11 = *((void *)&v21 + 1) + 1LL;
  }
  uint64_t v12 = v11 >> 1;
  if (*((void *)&v21 + 1) == 1LL) {
    uint64_t v13 = 1LL;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = sub_187686D14(a2, v13);
  if (v3) {
    return v4;
  }
  uint64_t v15 = v14;
  if (v13 >= v4) {
    uint64_t v16 = v13 / v4;
  }
  else {
    uint64_t v16 = 1LL;
  }
  uint64_t v24 = v16;
  sub_187688438((uint64_t)v20);
  uint64_t v17 = sub_1876881B4(v7, (uint64_t)v20);
  sub_18768847C((uint64_t)v20);
  sub_187688438((uint64_t)v20);
  uint64_t v18 = sub_187688680(v17, (uint64_t)v20);
  sub_18768847C((uint64_t)v20);
  swift_bridgeObjectRelease();
  unint64_t result = cche_encryption_params_polynomial_degree();
  if (v13)
  {
    uint64_t v19 = result >> 1;
    sub_187688438((uint64_t)v20);
    uint64_t v4 = (uint64_t)sub_187688930(0LL, v9, v15, v19 / v13, v19, v18, v8, v4, (uint64_t)v20, v13, v24);
    sub_18768847C((uint64_t)v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }

LABEL_25:
  __break(1u);
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    unint64_t result = (void *)sub_18769A52C();
  }

  __int128 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  __int128 v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    __break(1u);
    return result;
  }

  swift_retain();
LABEL_17:
  uint64_t v17 = (uint64_t)v8;
  uint64_t v15 = 0;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v11 = sub_187681C6C(v9);
    swift_release();
    uint64_t v9 = v11;
  }

  swift_beginAccess();
  swift_retain();
  sub_187699440(&v17, v6, &v15);
  swift_release_n();
  uint64_t v12 = v15;
  if (v15)
  {
    sub_187699520();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    return swift_release();
  }

  else
  {
    unint64_t result = swift_release();
    uint64_t v14 = v17;
    *a3 = a2;
    a3[1] = v9;
    a3[2] = v14;
  }

  return result;
}

_OWORD *PIR.IndexPirClient.decrypt(reply:index:)(void *a1, uint64_t a2)
{
  if (*(_BYTE *)(v2 + 2) == 2)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 5;
    *(_BYTE *)(v4 + 4) = 1;
    return (_OWORD *)swift_willThrow();
  }

  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 16);
  unint64_t result = sub_187686768(a1);
  if (!v3)
  {
    if (v7)
    {
      if (a2 == 0x8000000000000000LL && v7 == -1)
      {
LABEL_14:
        __break(1u);
        JUMPOUT(0x187685E0CLL);
      }

      uint64_t v10 = a2 % v7 * v8;
      if ((unsigned __int128)(a2 % v7 * (__int128)v8) >> 64 == v10 >> 63)
      {
        if (!__OFADD__(v10, v8)) {
          __asm { BR              X10 }
        }

        goto LABEL_13;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return result;
}

void *sub_187685E28(void *result)
{
  __int128 v3 = v1[3];
  __int128 v4 = v1[4];
  __int128 v49 = v1[2];
  __int128 v50 = v3;
  __int128 v51 = v4;
  __int128 v5 = v1[1];
  __int128 v47 = *v1;
  __int128 v48 = v5;
  *(_OWORD *)&v54[10] = *(_OWORD *)((char *)v1 + 42);
  __int128 v53 = v5;
  *(_OWORD *)char v54 = v49;
  __int128 v52 = v47;
  if (v54[24]) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = *(void *)&v54[16];
  }
  if (!v6)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  uint64_t v7 = v2;
  uint64_t v8 = result;
  if (*(void *)&v54[8] == 0x8000000000000000LL && v6 == -1) {
    goto LABEL_57;
  }
  uint64_t v9 = result[2];
  uint64_t v44 = *(void *)&v54[8] / v6;
  if (*(void *)&v54[8] / v6 < v9)
  {
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 5;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return v1;
  }

  unsigned int v11 = cche_encryption_params_polynomial_degree();
  if (v11)
  {
    unsigned int v12 = v11;
    uint64_t v13 = v9;
    uint64_t v14 = v11;
    uint64_t v1 = (_OWORD *)sub_18769A550();
    *((void *)v1 + 2) = v14;
    uint64_t v9 = v13;
    bzero(v1 + 2, 8LL * v12);
  }

  else
  {
    uint64_t v1 = (_OWORD *)MEMORY[0x18961AFE8];
  }

  uint64_t v41 = *((void *)&v53 + 1);
  unint64_t result = sub_187685514(v1, *(void *)(*((void *)&v53 + 1) + 16LL));
  uint64_t v15 = result;
  if (!v9)
  {
LABEL_45:
    sub_187688438((uint64_t)&v47);
    uint64_t isUniquelyReferenced_nonNull_native = sub_187687D20((uint64_t)v15, (uint64_t)&v47);
    if (v7)
    {
      sub_18768847C((uint64_t)&v47);
      swift_bridgeObjectRelease();
    }

    else
    {
LABEL_50:
      uint64_t v1 = (_OWORD *)isUniquelyReferenced_nonNull_native;
      sub_18768847C((uint64_t)&v47);
      swift_bridgeObjectRelease();
    }

    return v1;
  }

  if ((v6 & 0x8000000000000000LL) == 0)
  {
    uint64_t v37 = v2;
    uint64_t v16 = *((void *)&v53 + 1);
    uint64_t v38 = *((void *)&v53 + 1) + 32LL;
    uint64_t v39 = v8 + 4;
    sub_18769A52C();
    uint64_t v45 = 0LL;
    uint64_t v42 = v6;
LABEL_16:
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = v39[v45];
      sub_187689174((uint64_t)&v52);
      unint64_t result = sub_18765B244(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
      uint64_t v19 = (char *)result;
      uint64_t v20 = (uint64_t *)v38;
      while (1)
      {
        uint64_t v22 = *v20++;
        uint64_t v21 = v22;
        if (!v22) {
          break;
        }
        if (v18 == 0x8000000000000000LL && v21 == -1) {
          goto LABEL_55;
        }
        unint64_t v24 = *((void *)v19 + 2);
        unint64_t v23 = *((void *)v19 + 3);
        if (v24 >= v23 >> 1)
        {
          unint64_t result = sub_18765B244((char *)(v23 > 1), v24 + 1, 1, v19);
          uint64_t v19 = (char *)result;
        }

        *((void *)v19 + 2) = v24 + 1;
        *(void *)&v19[8 * v24 + 32] = v18 % v21;
        v18 /= v21;
        if (!--v17)
        {
          int v25 = v19;
          sub_18768919C((uint64_t)&v52);
          unint64_t result = v25;
          goto LABEL_26;
        }
      }

      __break(1u);
    }

    else
    {
      unint64_t result = (void *)MEMORY[0x18961AFE8];
LABEL_26:
      uint64_t v26 = 0LL;
      uint64_t v40 = v45 + 1;
      uint64_t v43 = result;
      while (v26 != v6)
      {
        v46[2] = v49;
        v46[3] = v50;
        v46[4] = v51;
        v46[0] = v47;
        v46[1] = v48;
        uint64_t v27 = v26 * v44;
        uint64_t v28 = v45 + v27;
        if (__OFADD__(v45, v27)) {
          goto LABEL_54;
        }
        int v29 = (char *)result;
        sub_18769A52C();
        uint64_t v1 = v46;
        int v30 = sub_187686520(v28, v29);
        uint64_t v31 = *((void *)v30 + 2);
        uint64_t v55 = v30;
        if (v31)
        {
          unint64_t v32 = 0LL;
          unint64_t v33 = v30 + 32;
          while (1)
          {
            unint64_t v34 = *(void *)&v33[8 * v32];
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_18763201C(v15);
              uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
            }

            if (v32 >= v15[2]) {
              break;
            }
            uint64_t v1 = &v15[v32];
            uint64_t v36 = *((void *)v1 + 4);
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *((void *)v1 + 4) = v36;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v34 & 0x8000000000000000LL) != 0) {
                goto LABEL_48;
              }
            }

            else
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_187632008(v36);
              uint64_t v36 = isUniquelyReferenced_nonNull_native;
              *((void *)v1 + 4) = isUniquelyReferenced_nonNull_native;
              if ((v34 & 0x8000000000000000LL) != 0) {
                goto LABEL_48;
              }
            }

            if (v34 >= *(void *)(v36 + 16)) {
              goto LABEL_49;
            }
            ++v32;
            *(void *)(v36 + 8 * v34 + 32) = 1LL;
            if (v31 == v32) {
              goto LABEL_27;
            }
          }

          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }

uint64_t sub_187686240(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v29 = v1[8];
  uint64_t v28 = v1[9];
  if (!v2)
  {
    uint64_t v6 = MEMORY[0x18961AFE8];
    uint64_t v7 = MEMORY[0x18961AFE8];
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_18767C0E8(v7, v29, v28, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v27;
  }

  uint64_t v3 = v1[4];
  if (!v3) {
    goto LABEL_47;
  }
  uint64_t v4 = v1[3];
  __int128 v5 = (uint64_t *)(result + 32);
  uint64_t v6 = MEMORY[0x18961AFE8];
  uint64_t v7 = MEMORY[0x18961AFE8];
  uint64_t v30 = v1[4];
  while (1)
  {
    uint64_t v9 = *v5++;
    uint64_t v8 = v9;
    if (v9 == 0x8000000000000000LL && v3 == -1) {
      break;
    }
    unint64_t result = (uint64_t)sub_18765C780((char *)(v8 / v3));
    uint64_t v11 = *(void *)(result + 16);
    int64_t v12 = *(void *)(v7 + 16);
    int64_t v13 = v12 + v11;
    if (__OFADD__(v12, v11))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      break;
    }

    uint64_t v14 = result;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v13 <= *(void *)(v7 + 24) >> 1)
    {
      if (*(void *)(v14 + 16)) {
        goto LABEL_14;
      }
    }

    else
    {
      if (v12 <= v13) {
        int64_t v19 = v12 + v11;
      }
      else {
        int64_t v19 = v12;
      }
      unint64_t result = (uint64_t)sub_18765B244((char *)result, v19, 1, (char *)v7);
      uint64_t v7 = result;
      if (*(void *)(v14 + 16))
      {
LABEL_14:
        uint64_t v15 = *(void *)(v7 + 16);
        if ((*(void *)(v7 + 24) >> 1) - v15 < v11) {
          goto LABEL_42;
        }
        unint64_t result = (uint64_t)memcpy((void *)(v7 + 8 * v15 + 32), (const void *)(v14 + 32), 8 * v11);
        if (v11)
        {
          uint64_t v16 = *(void *)(v7 + 16);
          BOOL v17 = __OFADD__(v16, v11);
          uint64_t v18 = v16 + v11;
          if (v17) {
            goto LABEL_45;
          }
          *(void *)(v7 + 16) = v18;
        }

        goto LABEL_23;
      }
    }

    if (v11) {
      goto LABEL_40;
    }
LABEL_23:
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v4 + 16);
    int64_t v21 = *(void *)(v6 + 16);
    int64_t v22 = v21 + v20;
    if (__OFADD__(v21, v20)) {
      goto LABEL_41;
    }
    sub_18769A52C();
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v22 <= *(void *)(v6 + 24) >> 1)
    {
      if (!*(void *)(v4 + 16)) {
        goto LABEL_4;
      }
    }

    else
    {
      if (v21 <= v22) {
        int64_t v23 = v21 + v20;
      }
      else {
        int64_t v23 = v21;
      }
      unint64_t result = (uint64_t)sub_18765B244((char *)result, v23, 1, (char *)v6);
      uint64_t v6 = result;
      if (!*(void *)(v4 + 16))
      {
LABEL_4:
        if (v20) {
          goto LABEL_39;
        }
        goto LABEL_5;
      }
    }

    uint64_t v24 = *(void *)(v6 + 16);
    if ((*(void *)(v6 + 24) >> 1) - v24 < v20) {
      goto LABEL_43;
    }
    unint64_t result = (uint64_t)memcpy((void *)(v6 + 8 * v24 + 32), (const void *)(v4 + 32), 8 * v20);
    if (v20)
    {
      uint64_t v25 = *(void *)(v6 + 16);
      BOOL v17 = __OFADD__(v25, v20);
      uint64_t v26 = v25 + v20;
      if (v17) {
        goto LABEL_46;
      }
      *(void *)(v6 + 16) = v26;
    }

char *sub_187686520(uint64_t a1, char *a2)
{
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = (char *)&unk_18769EC40;
  if (v5 >= 2)
  {
    uint64_t v7 = a1 >= 0 ? a1 & 1 : -(a1 & 1);
    unsigned int v8 = cche_encryption_params_polynomial_degree();
    uint64_t v9 = *((void *)a2 + 2);
    if (v9)
    {
      uint64_t v10 = v7 * v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = sub_187631FF4((uint64_t)a2);
      }
      uint64_t v11 = 0LL;
      uint64_t v12 = v10 / v5;
      do
      {
        int64_t v13 = &a2[8 * v11];
        uint64_t v14 = *((void *)v13 + 4);
        BOOL v15 = __OFADD__(v14, v12);
        uint64_t v16 = v14 + v12;
        if (v15) {
          goto LABEL_61;
        }
        ++v11;
        *((void *)v13 + 4) = v16;
      }

      while (v9 != v11);
    }
  }

  if (v5 >= 0) {
    uint64_t v17 = v5;
  }
  else {
    uint64_t v17 = v5 + 1;
  }
  uint64_t v18 = v17 >> 1;
  if (v5 == 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v18;
  }
  unsigned int v19 = cche_encryption_params_polynomial_degree();
  if (!v5) {
    goto LABEL_68;
  }
  uint64_t v20 = v19 / v5;
  if (v20 >= 0) {
    uint64_t v21 = v19 / v5;
  }
  else {
    uint64_t v21 = v20 + 1;
  }
  uint64_t v6 = (char *)*((void *)a2 + 2);
  if (!v6) {
    goto LABEL_69;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a2 = sub_187631FF4((uint64_t)a2);
  }
  int64_t v22 = 0LL;
  uint64_t v23 = v21 >> 1;
  unint64_t v24 = v20 + 1;
  unint64_t v25 = v20 + 3;
  do
  {
    uint64_t v26 = &a2[8 * (void)v22];
    uint64_t v28 = *((void *)v26 + 4);
    uint64_t v27 = *((void *)v26 + 5);
    BOOL v15 = __OFADD__(v28, v27);
    uint64_t v29 = v28 + v27;
    char v30 = v15;
    if (v28 >= v23)
    {
      if ((v30 & 1) != 0) {
        goto LABEL_63;
      }
      if (v24 < 3) {
        goto LABEL_65;
      }
      if (v29 == 0x8000000000000000LL && v25 < 2) {
        goto LABEL_67;
      }
      uint64_t v32 = v29 % v23 + v23;
    }

    else
    {
      if ((v30 & 1) != 0) {
        goto LABEL_62;
      }
      if (v24 < 3) {
        goto LABEL_64;
      }
      if (v29 == 0x8000000000000000LL && v25 < 2)
      {
        while (1)
        {
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          a2 = sub_187631FF4((uint64_t)a2);
LABEL_50:
          unint64_t v34 = 0LL;
          if (a1 >= 0) {
            uint64_t v35 = a1;
          }
          else {
            uint64_t v35 = a1 + 1;
          }
          uint64_t v36 = v35 >> 1;
          while (1)
          {
            uint64_t v37 = &a2[8 * (void)v34];
            uint64_t v38 = *((void *)v37 + 4);
            uint64_t v39 = v38 * v5;
            *((void *)v37 + 4) = v39;
            BOOL v15 = __OFADD__(v39, v36);
            uint64_t v40 = v39 + v36;
            if (v15) {
              goto LABEL_59;
            }
            ++v34;
            *((void *)v37 + 4) = v40;
            if (v6 == v34) {
              return a2;
            }
          }

          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
      }

      uint64_t v32 = v29 % v23;
    }

    *((void *)v26 + 5) = v32;
    ++v22;
  }

  while (v6 - 1 != v22);
  uint64_t v6 = (char *)*((void *)a2 + 2);
  if (v6)
  {
LABEL_49:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_50;
    }
    goto LABEL_70;
  }

  return a2;
}

_OWORD *sub_187686768(void *a1)
{
  __int128 v4 = v1[1];
  v10[0] = *v1;
  v10[1] = v4;
  __int128 v5 = v1[3];
  v10[2] = v1[2];
  void v10[3] = v5;
  v10[4] = v1[4];
  if (BYTE2(v10[0]))
  {
    if (BYTE2(v10[0]) != 1)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = 5;
      *(_BYTE *)(v8 + 4) = 1;
      swift_willThrow();
      return v1;
    }

    sub_187688438((uint64_t)v10);
    uint64_t v1 = (_OWORD *)sub_1876881B4((uint64_t)a1, (uint64_t)v10);
    sub_18768847C((uint64_t)v10);
    if (!v2) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v6 = sub_18768689C(a1);
    if (!v2)
    {
      uint64_t v1 = (_OWORD *)v6;
LABEL_7:
      sub_187688438((uint64_t)v10);
      unint64_t v7 = sub_187688E58((uint64_t)v1, (uint64_t)v10);
      sub_18768847C((uint64_t)v10);
      swift_bridgeObjectRelease();
      uint64_t v1 = (_OWORD *)sub_187644200(v7);
      swift_bridgeObjectRelease();
    }
  }

  return v1;
}

uint64_t sub_18768689C(void *a1)
{
  __int128 v4 = v1[3];
  __int128 v22 = v1[2];
  __int128 v23 = v4;
  __int128 v24 = v1[4];
  __int128 v5 = v1[1];
  __int128 v20 = *v1;
  __int128 v21 = v5;
  uint64_t v19 = MEMORY[0x18961AFE8];
  if (a1[2])
  {
    uint64_t v6 = a1[5];
    if ((v6 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = a1[6];
      uint64_t v8 = a1[4];
      unint64_t v9 = v6 & 0xDFFFFFFFFFFFFFFFLL;
      sub_187623A28(v8, v6 & 0xDFFFFFFFFFFFFFFFLL);
      sub_18769A52C();
      sub_187623C58(v8, v9);
      uint64_t v19 = v7;
    }
  }

  sub_187688438((uint64_t)&v20);
  uint64_t v10 = sub_1876881B4((uint64_t)a1, (uint64_t)&v20);
  uint64_t result = sub_18768847C((uint64_t)&v20);
  if (v2) {
    goto LABEL_11;
  }
  if (!*(void *)(v10 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v12 = *(void *)(v10 + 32);
  swift_retain();
  uint64_t v13 = sub_18769A52C();
  uint64_t v14 = sub_18766ADD0(v13, v12);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(*((void *)&v21 + 1) + 16LL);
  if (v15)
  {
    uint64_t v16 = v15 - 1;
    if (v15 != 1)
    {
      while (v16)
      {
        sub_187688438((uint64_t)&v20);
        uint64_t v17 = sub_1876884C0(v10, (uint64_t)&v20);
        sub_18768847C((uint64_t)&v20);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v14) {
          goto LABEL_13;
        }
        int64_t v18 = *(void *)(v17 + 16);
        sub_18769A52C();
        uint64_t v10 = sub_187685308(0LL, v18, (uint64_t)v14, (uint64_t)v14, v17, &v19);
        uint64_t result = swift_bridgeObjectRelease();
        if (!--v16) {
          goto LABEL_11;
        }
      }

      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }

uint64_t sub_187686A80@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *a1;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v10 = a3;
  if (*(void *)(a3 + 16) >= *a1 + a2) {
    uint64_t v11 = *a1 + a2;
  }
  else {
    uint64_t v11 = *(void *)(a3 + 16);
  }
  if (v11 < v12) {
    goto LABEL_18;
  }
  if (v12 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1876285C4(v10, v10 + 32, v12, (2 * v11) | 1);
    uint64_t v15 = v19;
    goto LABEL_12;
  }

  uint64_t v6 = a5;
  uint64_t v8 = v7;
  unint64_t v9 = a4;
  __int128 v20 = a6;
  sub_18769A6E8();
  sub_18769A52C();
  swift_unknownObjectRetain_n();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x18961AFE8];
  }

  uint64_t v14 = *(void *)(v13 + 16);
  swift_release();
  if (v14 != v11 - v12) {
    goto LABEL_20;
  }
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x18961AFE8];
  }

void sub_187686C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 < 0) {
    goto LABEL_21;
  }
  if (a6)
  {
    uint64_t v12 = sub_18769A550();
    *(void *)(v12 + 16) = a6;
    bzero((void *)(v12 + 32), 8 * a6);
    if (!a4)
    {
LABEL_22:
      __break(1u);
      return;
    }

    uint64_t v13 = 0LL;
    unint64_t v14 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v15 = v13 * a5;
      BOOL v16 = __OFADD__(a2, v15);
      uint64_t v17 = a2 + v15;
      if (v16) {
        goto LABEL_17;
      }
      if (v17 == 0x8000000000000000LL && a4 == -1) {
        goto LABEL_20;
      }
      uint64_t v19 = v17 % a4;
      BOOL v16 = __OFADD__(a3, v19);
      unint64_t v20 = a3 + v19;
      if (v16) {
        goto LABEL_18;
      }
      if (v20 >= v14) {
        goto LABEL_19;
      }
      *(void *)(v12 + 8 * v13++ + 32) = *(void *)(a1 + 32 + 8 * v20);
      if (a6 == v13) {
        return;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

uint64_t sub_187686D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = sub_18769A550();
    *(void *)(v7 + 16) = v3;
    uint64_t v26 = v7 + 32;
    bzero((void *)(v7 + 32), 8 * v3);
    uint64_t v8 = 0LL;
    uint64_t v25 = v7;
    uint64_t v23 = v3;
    uint64_t v24 = a2;
    while (1)
    {
      uint64_t v9 = *(void *)(v6 + 16);
      if (v9) {
        break;
      }
      uint64_t v12 = MEMORY[0x18961AFE8];
LABEL_13:
      unint64_t v17 = v8;
      int64_t v18 = sub_187686520(v8, (char *)v12);
      uint64_t v19 = *((void *)v18 + 2);
      if (!v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v22 = 5;
        *(_BYTE *)(v22 + 4) = 1;
        swift_willThrow();
        return v7;
      }

      uint64_t v20 = *(void *)&v18[8 * v19 + 24];
      uint64_t result = swift_bridgeObjectRelease();
      if (!a2) {
        goto LABEL_27;
      }
      if (v20 == 0x8000000000000000LL && a2 == -1) {
        goto LABEL_29;
      }
      if (v17 >= *(void *)(v7 + 16)) {
        goto LABEL_28;
      }
      *(void *)(v26 + 8 * v17) = v20 / a2;
      uint64_t v8 = v17 + 1;
      if (v17 + 1 == v3) {
        return v7;
      }
    }

    uint64_t v27 = v8;
    uint64_t v10 = *(void *)(a1 + 32 + 8 * v8);
    sub_18769A52C();
    uint64_t result = (uint64_t)sub_18765B244(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    uint64_t v12 = result;
    uint64_t v13 = 0LL;
    while (1)
    {
      uint64_t v14 = *(void *)(v6 + 8 * v13 + 32);
      if (!v14) {
        break;
      }
      if (v10 == 0x8000000000000000LL && v14 == -1) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v15 = *(void *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = (uint64_t)sub_18765B244((char *)(v15 > 1), v16 + 1, 1, (char *)v12);
        uint64_t v12 = result;
      }

      ++v13;
      *(void *)(v12 + 16) = v16 + 1;
      *(void *)(v12 + 8 * v16 + 32) = v10 % v14;
      v10 /= v14;
      if (v9 == v13)
      {
        swift_bridgeObjectRelease();
        a2 = v24;
        uint64_t v7 = v25;
        uint64_t v3 = v23;
        uint64_t v8 = v27;
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

char *sub_187686FD8@<X0>( char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void *a12)
{
  unint64_t v13 = *(void *)result;
  if ((*(void *)result & 0x8000000000000000LL) != 0) {
    goto LABEL_36;
  }
  uint64_t v14 = a2;
  unint64_t v15 = a9;
  if (v13 >= *(void *)(a2 + 16))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (*(void *)(a2 + 8 * v13 + 32) >= a3) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = 0LL;
  }
  uint64_t v40 = a4 - v16;
  uint64_t v41 = v16;
  if (__OFSUB__(a4, v16)) {
    goto LABEL_38;
  }
  uint64_t v17 = v12;
  uint64_t v39 = *(void *)(a5 + 16);
  if (v39)
  {
    uint64_t v46 = v17;
    sub_18769A52C();
    uint64_t v19 = 0LL;
    uint64_t v20 = MEMORY[0x18961AFE8];
    while (1)
    {
      v48[0] = *(void *)(a5 + 8 * v19 + 32);
      sub_18769A52C();
      uint64_t v21 = v14;
      unint64_t v22 = v13;
      sub_1876872A8(v48, a6, a7, a8, v14, v13, a10, v41, &v47, a4, a11, v40);
      uint64_t result = (char *)swift_bridgeObjectRelease();
      uint64_t v23 = v47;
      uint64_t v24 = *(void *)(v47 + 16);
      int64_t v25 = *(void *)(v20 + 16);
      int64_t v26 = v25 + v24;
      if (__OFADD__(v25, v24))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }

      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v26 <= *(void *)(v20 + 24) >> 1)
      {
        if (*(void *)(v23 + 16)) {
          goto LABEL_20;
        }
      }

      else
      {
        if (v25 <= v26) {
          int64_t v27 = v25 + v24;
        }
        else {
          int64_t v27 = v25;
        }
        uint64_t result = sub_18765B250(result, v27, 1, (char *)v20);
        uint64_t v20 = (uint64_t)result;
        if (*(void *)(v23 + 16))
        {
LABEL_20:
          uint64_t v28 = *(void *)(v20 + 16);
          if ((*(void *)(v20 + 24) >> 1) - v28 < v24) {
            goto LABEL_34;
          }
          uint64_t result = (char *)memcpy((void *)(v20 + 8 * v28 + 32), (const void *)(v23 + 32), 8 * v24);
          if (v24)
          {
            uint64_t v29 = *(void *)(v20 + 16);
            BOOL v30 = __OFADD__(v29, v24);
            uint64_t v31 = v29 + v24;
            if (v30) {
              goto LABEL_35;
            }
            *(void *)(v20 + 16) = v31;
          }

          goto LABEL_10;
        }
      }

      if (v24) {
        goto LABEL_33;
      }
LABEL_10:
      ++v19;
      swift_bridgeObjectRelease();
      uint64_t v14 = v21;
      unint64_t v13 = v22;
      if (v39 == v19)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = a9;
        uint64_t v17 = v46;
        goto LABEL_26;
      }
    }
  }

  uint64_t v20 = MEMORY[0x18961AFE8];
LABEL_26:
  v48[2] = v20;
  unint64_t v32 = *(void *)(a8 + 16);
  uint64_t result = (char *)cche_encryption_params_plaintext_modulus();
  if (!result) {
    goto LABEL_39;
  }
  uint64_t v33 = sub_187699944(__clz((unint64_t)result) ^ 0x3F);
  if (v17)
  {
    uint64_t result = (char *)swift_bridgeObjectRelease();
    *a12 = v17;
    return result;
  }

  uint64_t v34 = v33;
  uint64_t result = (char *)swift_bridgeObjectRelease();
  if ((v32 & 0x8000000000000000LL) != 0) {
    goto LABEL_40;
  }
  if (*(void *)(v34 + 16) >= v32)
  {
    uint64_t v35 = sub_187645CE0(v34, v34 + 32, 0LL, (2 * v32) | 1);
    uint64_t v37 = v36;
    uint64_t result = (char *)swift_bridgeObjectRelease();
    *unint64_t v15 = v35;
    v15[1] = v37;
    return result;
  }

LABEL_41:
  __break(1u);
  return result;
}

void sub_1876872A8( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = *a1;
  if (a2 == 1 && a3 >= 2)
  {
    if ((a6 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)(a5 + 16) > a6)
    {
      uint64_t v16 = a5 + 32;
      uint64_t v17 = *(void *)(a5 + 32 + 8 * a6);
      uint64_t v18 = v17 * a7;
      if ((unsigned __int128)(v17 * (__int128)a7) >> 64 == (v17 * a7) >> 63)
      {
        unint64_t v19 = a6 >> 1;
        if (!__OFADD__(v18, a6 >> 1))
        {
          sub_187686C08(v15, v18 + (a6 >> 1), a8, a10, a11, a10);
          uint64_t v21 = *(void *)(v16 + 8 * a6);
          uint64_t v22 = v21 * a7;
          if ((unsigned __int128)(v21 * (__int128)a7) >> 64 == (v21 * a7) >> 63)
          {
            if (!__OFADD__(v22, v19))
            {
              uint64_t v23 = v20;
              sub_187686C08(v15, v22 + v19, a12, a10, a11, a10);
              uint64_t v25 = sub_18768517C(v23, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_20:
              *a9 = v25;
              return;
            }

            goto LABEL_30;
          }

          goto LABEL_25;
        }

uint64_t sub_1876874C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!sub_187699E90()) {
    goto LABEL_10;
  }
  if (__OFSUB__(a1, sub_187699EB4()))
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_187699EA8();
  if ((a7 & 0x8000000000000000LL) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (HIDWORD(a7))
  {
LABEL_9:
    __break(1u);
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (!ccrng()) {
    goto LABEL_11;
  }
  return cche_encrypt_symmetric();
}

void sub_1876875D4(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_187687640@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    JUMPOUT(0x187687950LL);
  }

  if (HIDWORD(v2))
  {
    __break(1u);
    JUMPOUT(0x187687958LL);
  }

  if (!ccrng())
  {
    __break(1u);
    JUMPOUT(0x187687978LL);
  }

  uint64_t result = cche_encrypt_symmetric();
  *uint64_t v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

uint64_t sub_18768798C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_187699E90();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t result = sub_187699EB4();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_7;
  }

  if (__OFSUB__(a2, a1))
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_187699EA8();
  if (*(void *)(a4 + 24)) {
    return cche_serialize_seeded_ciphertext_coeff();
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_187687A20(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_187687A7C@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  if (!*(void *)(v2 + 24))
  {
    __break(1u);
    JUMPOUT(0x187687D10LL);
  }

  uint64_t result = cche_serialize_seeded_ciphertext_coeff();
  *uint64_t v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

uint64_t sub_187687D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x18961AFE8];
  if (!v4) {
    return v5;
  }
  uint64_t v47 = MEMORY[0x18961AFE8];
  sub_18762C3B0(0LL, v4, 0);
  uint64_t v5 = v47;
  unsigned __int8 v8 = (void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 64);
  type metadata accessor for HE.ObjectStorage();
  uint64_t v39 = a2;
  while (1)
  {
    uint64_t v40 = v8;
    int64_t v41 = v4;
    uint64_t v10 = *v8;
    uint64_t v11 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v9;
    sub_18769A52C();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v11;
    if (HIDWORD(*(void *)(v10 + 16))) {
      break;
    }
    int v14 = cche_encode_simd_uint64();
    if (v14)
    {
      int v34 = v14;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v35 = v34;
      *(_BYTE *)(v35 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v5;
    }

    uint64_t v42 = v5;
    uint64_t v43 = v3;
    uint64_t v44 = *(void *)(a2 + 72);
    uint64_t v5 = cche_param_ctx_ciphertext_ctx_nmoduli();
    uint64_t v15 = cche_ciphertext_sizeof();
    uint64_t v16 = (void *)swift_initStackObject();
    v16[2] = v9;
    swift_retain();
    uint64_t v17 = swift_slowAlloc();
    _OWORD v16[3] = v17;
    v16[4] = v17 + v15;
    uint64_t result = cche_rng_seed_sizeof();
    if (result)
    {
      unint64_t v18 = result;
      if (result < 15)
      {
        if (result < 0) {
          goto LABEL_35;
        }
        uint64_t result = 0LL;
        unint64_t v20 = (unint64_t)v18 << 48;
      }

      else
      {
        sub_187699ECC();
        swift_allocObject();
        uint64_t v19 = sub_187699E9C();
        if (v18 >= 0x7FFFFFFF)
        {
          sub_187699F38();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0LL;
          *(void *)(result + 24) = v18;
          unint64_t v20 = v19 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t result = v18 << 32;
          unint64_t v20 = v19 | 0x4000000000000000LL;
        }
      }
    }

    else
    {
      unint64_t v20 = 0xC000000000000000LL;
    }

    *(void *)&__int128 v46 = result;
    *((void *)&v46 + 1) = v20;
    if (!*(void *)(v44 + 24)) {
      goto LABEL_37;
    }
    swift_retain();
    sub_1876875D4((uint64_t)&v46);
    int v22 = v21;
    swift_release();
    if (v22)
    {
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = v22;
      *(_BYTE *)(v36 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_187623C58(v46, *((unint64_t *)&v46 + 1));
LABEL_32:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v5;
    }

    unint64_t v24 = *((void *)&v46 + 1);
    uint64_t v23 = v46;
    uint64_t result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      unint64_t v25 = result;
      a2 = v39;
      if (result <= 14)
      {
        if (result < 0) {
          goto LABEL_36;
        }
        uint64_t result = 0LL;
        unint64_t v28 = (unint64_t)v25 << 48;
      }

      else
      {
        uint64_t v26 = v23;
        sub_187699ECC();
        swift_allocObject();
        uint64_t v27 = sub_187699E9C();
        if (v25 >= 0x7FFFFFFF)
        {
          sub_187699F38();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0LL;
          *(void *)(result + 24) = v25;
          unint64_t v28 = v27 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t result = v25 << 32;
          unint64_t v28 = v27 | 0x4000000000000000LL;
        }

        uint64_t v23 = v26;
      }
    }

    else
    {
      unint64_t v28 = 0xC000000000000000LL;
      a2 = v39;
    }

    *(void *)&__int128 v46 = result;
    *((void *)&v46 + 1) = v28;
    sub_187687A20((uint64_t)&v46);
    uint64_t v5 = v42;
    if (v29)
    {
      int v37 = v29;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v38 = v37;
      *(_BYTE *)(v38 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_187623C58(v23, v24);
      sub_187623C58(v46, *((unint64_t *)&v46 + 1));
      goto LABEL_32;
    }

    uint64_t v3 = v43;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __int128 v30 = v46;
    uint64_t v47 = v42;
    unint64_t v32 = *(void *)(v42 + 16);
    unint64_t v31 = *(void *)(v42 + 24);
    if (v32 >= v31 >> 1)
    {
      __int128 v45 = v46;
      sub_18762C3B0((char *)(v31 > 1), v32 + 1, 1);
      __int128 v30 = v45;
      uint64_t v5 = v47;
    }

    *(void *)(v5 + 16) = v32 + 1;
    uint64_t v33 = v5 + 32 * v32;
    *(_OWORD *)(v33 + 32) = v30;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v24;
    unsigned __int8 v8 = v40 + 1;
    int64_t v4 = v41 - 1;
    if (v41 == 1) {
      return v5;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1876881B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x18961AFE8];
  if (v3)
  {
    uint64_t v20 = MEMORY[0x18961AFE8];
    sub_18769A640();
    uint64_t v16 = *(void *)(*(void *)(a2 + 64) + 32LL);
    uint64_t v17 = *(void *)(a2 + 64);
    unsigned __int8 v6 = (unint64_t *)(a1 + 56);
    while (1)
    {
      uint64_t v7 = *(v6 - 3);
      unint64_t v8 = *(v6 - 2);
      uint64_t v10 = *(v6 - 1);
      unint64_t v9 = *v6;
      sub_18762DE94(v7, v8, v10, *v6);
      sub_18762DE94(v7, v8, v10, v9);
      uint64_t v11 = qword_18C6D9758;
      uint64_t result = swift_retain();
      if (v11 != -1) {
        uint64_t result = swift_once();
      }
      if (qword_18C6DEDE0 < 0) {
        break;
      }
      if (HIDWORD(qword_18C6DEDE0)) {
        goto LABEL_13;
      }
      uint64_t v18 = v3;
      uint64_t v12 = cche_ciphertext_sizeof();
      type metadata accessor for HE.ObjectStorage();
      unint64_t v13 = (void *)swift_allocObject();
      void v13[2] = v17;
      swift_retain();
      uint64_t v14 = swift_slowAlloc();
      void v13[3] = v14;
      v13[4] = v14 + v12;
      swift_retain();
      sub_18766A10C(v16, v7, v8, v10);
      swift_release();
      sub_18762DEDC(v7, v8, v10, v9);
      if (v19)
      {
        sub_18762D1DC();
        swift_allocError();
        *(_DWORD *)uint64_t v15 = v19;
        *(_BYTE *)(v15 + 4) = 0;
        swift_willThrow();
        swift_release();
        swift_release();
        sub_18762DEDC(v7, v8, v10, v9);
        return swift_release();
      }

      v6 += 4;
      swift_release();
      sub_18762DEDC(v7, v8, v10, v9);
      sub_18769A628();
      sub_18769A64C();
      sub_18769A658();
      sub_18769A634();
      uint64_t v3 = v18 - 1;
      if (v18 == 1) {
        return v20;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
  }

  return result;
}

uint64_t sub_187688438(uint64_t a1)
{
  return a1;
}

uint64_t sub_18768847C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1876884C0(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  uint64_t v18 = MEMORY[0x18961AFE8];
  sub_18762C480(0LL, v2, 0);
  uint64_t v3 = v18;
  unsigned __int8 v6 = (uint64_t *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = cche_plaintext_sizeof();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v7;
    swift_retain();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    void v10[3] = result;
    v10[4] = result + v9;
    if (!*(void *)(v8 + 24)) {
      break;
    }
    if (!*(void *)(v17 + 24)) {
      goto LABEL_13;
    }
    int v12 = cche_decrypt();
    if (v12)
    {
      int v15 = v12;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v16 = v15;
      *(_BYTE *)(v16 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      return v3;
    }

    swift_release();
    unint64_t v14 = *(void *)(v18 + 16);
    unint64_t v13 = *(void *)(v18 + 24);
    if (v14 >= v13 >> 1) {
      sub_18762C480((char *)(v13 > 1), v14 + 1, 1);
    }
    *(void *)(v18 + 16) = v14 + 1;
    *(void *)(v18 + 8 * v14 + 32) = v10;
    ++v6;
    if (!--v2) {
      return v3;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_187688680(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  uint64_t v23 = MEMORY[0x18961AFE8];
  sub_18762C55C(0LL, v2, 0);
  uint64_t v3 = v23;
  unsigned __int8 v6 = (uint64_t *)(a1 + 32);
  uint64_t v21 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 64);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v22;
    swift_retain();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v8;
    if (!*(void *)(v7 + 24)) {
      goto LABEL_20;
    }
    if (!*(void *)(v21 + 24)) {
      goto LABEL_21;
    }
    int v11 = cche_decrypt();
    if (v11)
    {
      int v17 = v11;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v18 = v17;
      *(_BYTE *)(v18 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_17:
      swift_release();
      swift_release();
      return v3;
    }

    unsigned int v12 = cche_param_ctx_polynomial_degree();
    swift_retain();
    if (v12)
    {
      uint64_t v13 = sub_18769A550();
      *(void *)(v13 + 16) = v12;
    }

    else
    {
      uint64_t v13 = MEMORY[0x18961AFE8];
    }

    int v14 = cche_decode_simd_uint64();
    if (v14)
    {
      int v19 = v14;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v20 = v19;
      *(_BYTE *)(v20 + 4) = 0;
      swift_willThrow();
      *(void *)(v13 + 16) = 0LL;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }

    uint64_t result = cche_param_ctx_polynomial_degree();
    *(void *)(v13 + 16) = result;
    swift_release();
    swift_release();
    swift_release();
    unint64_t v16 = *(void *)(v23 + 16);
    unint64_t v15 = *(void *)(v23 + 24);
    if (v16 >= v15 >> 1) {
      sub_18762C55C((void *)(v15 > 1), v16 + 1, 1);
    }
    *(void *)(v23 + 16) = v16 + 1;
    *(void *)(v23 + 8 * v16 + 32) = v13;
    ++v6;
    if (!--v2) {
      return v3;
    }
  }

  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

char *sub_187688930( char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v13 = v11;
  uint64_t v14 = MEMORY[0x18961AFE8];
  if (!v12) {
    return (char *)v14;
  }
  unint64_t v16 = result;
  uint64_t v32 = MEMORY[0x18961AFE8];
  uint64_t result = sub_18762C540(0LL, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000LL) == 0)
  {
    uint64_t v14 = v32;
    else {
      int v17 = (char *)a2;
    }
    uint64_t v18 = v16;
    while ((char *)a2 != v18)
    {
      __int128 v30 = v18;
      uint64_t result = sub_187686FD8((char *)&v30, a3, a4, a5, a6, a7, a8, a9, &v31, a10, a11, &v29);
      if (v13)
      {
        swift_release();
        return (char *)v14;
      }

      uint64_t v13 = 0LL;
      __int128 v19 = v31;
      uint64_t v32 = v14;
      unint64_t v21 = *(void *)(v14 + 16);
      unint64_t v20 = *(void *)(v14 + 24);
      if (v21 >= v20 >> 1)
      {
        __int128 v22 = v31;
        uint64_t result = sub_18762C540((char *)(v20 > 1), v21 + 1, 1);
        __int128 v19 = v22;
        uint64_t v14 = v32;
      }

      *(void *)(v14 + 16) = v21 + 1;
      *(_OWORD *)(v14 + 16 * v21 + 32) = v19;
      if (v17 == v18) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

uint64_t _s14IndexPirClientVwxx()
{
  return swift_release();
}

uint64_t _s14IndexPirClientVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  sub_18769A52C();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s14IndexPirClientVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s14IndexPirClientVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t _s14IndexPirClientVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14IndexPirClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PIR.IndexPirClient()
{
  return &type metadata for PIR.IndexPirClient;
}

uint64_t sub_187688D58(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v3 = result;
  if (result)
  {
    uint64_t result = sub_18769A550();
    *(void *)(result + 16) = v3;
    if (*(void *)(a2 + 24))
    {
      if (!HIDWORD(v3))
      {
        uint64_t v4 = result;
LABEL_8:
        int v5 = cche_decode_poly_uint64();
        if (v5)
        {
          int v6 = v5;
          sub_18762D1DC();
          swift_allocError();
          *(_DWORD *)uint64_t v7 = v6;
          *(_BYTE *)(v7 + 4) = 0;
          swift_willThrow();
          *(void *)(v4 + 16) = 0LL;
          swift_bridgeObjectRelease();
          return v4;
        }

        uint64_t result = cche_param_ctx_polynomial_degree();
        if (result <= v3)
        {
          *(void *)(v4 + 16) = result;
          return v4;
        }

        goto LABEL_15;
      }

unint64_t sub_187688E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v28 = *(void *)(a1 + 16);
  if (!v28) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v29 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(v5 + 32);
  type metadata accessor for HE.ObjectStorage();
  sub_18769A52C();
  uint64_t v7 = 0LL;
  unint64_t v30 = MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
    uint64_t v9 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v5;
    swift_retain();
    swift_retain();
    unint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v9;
    if (!*(void *)(v8 + 24)) {
      goto LABEL_32;
    }
    if (!*(void *)(v29 + 24)) {
      goto LABEL_33;
    }
    int v12 = cche_decrypt();
    if (v12)
    {
      int v26 = v12;
      sub_18762D1DC();
      swift_allocError();
      *(_DWORD *)uint64_t v27 = v26;
      *(_BYTE *)(v27 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }

    uint64_t v13 = cche_param_ctx_polynomial_degree();
    swift_retain();
    sub_187688D58(v13, (uint64_t)inited);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_release();
    }

    uint64_t v14 = v5;
    swift_release();
    uint64_t v15 = v6;
    unint64_t result = cche_param_ctx_plaintext_modulus();
    if (!result) {
      break;
    }
    uint64_t v16 = sub_187699944(__clz(result) ^ 0x3F);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    int64_t v17 = *(void *)(v16 + 16);
    unint64_t result = v30;
    int64_t v18 = *(void *)(v30 + 16);
    int64_t v19 = v18 + v17;
    if (__OFADD__(v18, v17)) {
      goto LABEL_28;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = v30;
    if ((result & 1) == 0 || v19 > *(void *)(v30 + 24) >> 1)
    {
      if (v18 <= v19) {
        int64_t v21 = v18 + v17;
      }
      else {
        int64_t v21 = v18;
      }
      unint64_t result = (unint64_t)sub_18765AF3C((char *)result, v21, 1, (char *)v30);
      unint64_t v20 = result;
    }

    unint64_t v30 = v20;
    if (*(void *)(v16 + 16))
    {
      uint64_t v22 = *(void *)(v20 + 16);
      if ((*(void *)(v20 + 24) >> 1) - v22 < v17) {
        goto LABEL_30;
      }
      unint64_t result = (unint64_t)memcpy((void *)(v20 + v22 + 32), (const void *)(v16 + 32), v17);
      if (v17)
      {
        uint64_t v23 = *(void *)(v30 + 16);
        BOOL v24 = __OFADD__(v23, v17);
        uint64_t v25 = v23 + v17;
        if (v24) {
          goto LABEL_31;
        }
        *(void *)(v30 + 16) = v25;
      }
    }

    else if (v17)
    {
      goto LABEL_29;
    }

    ++v7;
    swift_bridgeObjectRelease();
    uint64_t v6 = v15;
    uint64_t v5 = v14;
    if (v28 == v7)
    {
      swift_bridgeObjectRelease();
      return v30;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_187689174(uint64_t a1)
{
  return a1;
}

uint64_t sub_18768919C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1876891C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5 = v4;
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t result = _s13ServerSecretsVMa(319LL, v6, v7, v8);
  if (v11 <= 0x3F)
  {
    uint64_t result = _s14KeyCommitmentsVMa(319LL, v2, v1, v10);
    if (v12 <= 0x3F)
    {
      if (v5 > 0x3F)
      {
        return AssociatedTypeWitness;
      }

      else
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *sub_18768934C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = v6;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v6 | 7LL;
  uint64_t v12 = v11 | v10;
  BOOL v13 = (v11 | v10) == 7 && ((*(_DWORD *)(v9 + 80) | v6) & 0x100000) == 0;
  if (v13
    && (uint64_t v14 = v5 + v6,
        uint64_t v15 = ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7) + v5,
        uint64_t v16 = *(void *)(v9 + 64),
        uint64_t v17 = v16 + v10,
        uint64_t v18 = v5 + 7,
        unint64_t v19 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v16 + v11 + ((v16 + v10 + ((v16 + v10) & ~v10)) & ~v10)) & ~v11) + 8,
        ((v16 + v10 + ((v10 + 8 + v19 + ((v15 + v12) & ~v12)) & ~v10)) & ~v10) + v16 <= 0x18))
  {
    uint64_t v47 = a1;
    uint64_t v20 = ~v7;
    uint64_t v21 = ~v10;
    uint64_t v41 = v16 + v11;
    uint64_t v42 = ~v11;
    uint64_t v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    uint64_t v39 = ~v12;
    uint64_t v40 = v8;
    uint64_t v38 = v15;
    unint64_t v44 = v19;
    uint64_t v45 = v10 + 8;
    uint64_t v43 = v18;
    v22(v47, a2, AssociatedTypeWitness);
    v22( (uint64_t *)(((unint64_t)v47 + v14) & v20),  (uint64_t *)(((unint64_t)a2 + v14) & v20),  AssociatedTypeWitness);
    unint64_t v23 = (v14 + (((unint64_t)v47 + v14) & ~v7)) & ~v7;
    unint64_t v24 = (v14 + (((unint64_t)a2 + v14) & ~v7)) & ~v7;
    v22((uint64_t *)v23, (uint64_t *)v24, AssociatedTypeWitness);
    unint64_t v25 = (v14 + v23) & v20;
    unint64_t v26 = (v14 + v24) & v20;
    v22((uint64_t *)v25, (uint64_t *)v26, AssociatedTypeWitness);
    v22((uint64_t *)((v14 + v25) & v20), (uint64_t *)((v14 + v26) & v20), AssociatedTypeWitness);
    uint64_t v27 = ((unint64_t)v47 + v38 + 7) & v39;
    uint64_t v28 = ((unint64_t)a2 + v38 + 7) & v39;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v29(v27, v28, v40);
    v29((v17 + v27) & v21, (v17 + v28) & v21, v40);
    uint64_t v30 = (v17 + ((v17 + v28) & v21)) & v21;
    v29((v17 + ((v17 + v27) & v21)) & v21, v30, v40);
    uint64_t v31 = (v41 + v30) & v42;
    v22((uint64_t *)((v41 + ((v17 + ((v17 + v27) & v21)) & v21)) & v42), (uint64_t *)v31, AssociatedTypeWitness);
    *(void *)((v43 + ((v41 + ((v17 + ((v17 + v27) & v21)) & v21)) & v42)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v43 + v31) & 0xFFFFFFFFFFFFF8LL);
    unint64_t v32 = v28 + v44;
    *(void *)(v27 + v44) = *(void *)(v28 + v44);
    uint64_t v33 = (v45 + v27 + v44) & v21;
    unint64_t v34 = (v45 + v32) & v21;
    sub_18769A52C();
    v29(v33, v34, v40);
    v29((v17 + v33) & v21, (v17 + v34) & v21, v40);
    return v47;
  }

  else
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    uint64_t v35 = v36 + ((v12 + 16) & ~v12);
    swift_retain();
  }

  return (uint64_t *)v35;
}

uint64_t sub_1876896FC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  v4((v5 + v6 + a1) & ~v6, AssociatedTypeWitness);
  uint64_t v7 = (v5 + v6 + ((v5 + v6 + a1) & ~v6)) & ~v6;
  v4(v7, AssociatedTypeWitness);
  uint64_t v8 = (v5 + v6 + v7) & ~v6;
  v4(v8, AssociatedTypeWitness);
  v4((v5 + v6 + v8) & ~v6, AssociatedTypeWitness);
  uint64_t v9 = (v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6)) & ~v6;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  v6 |= 7uLL;
  unint64_t v13 = (v5 + a1 + (v6 | v12) + v9) & ~(v6 | v12);
  uint64_t v20 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  v20(v13, v10);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v15 = v14 + v12;
  v20((v14 + v12 + v13) & ~v12, v10);
  unint64_t v16 = (v14 + v12 + ((v14 + v12 + v13) & ~v12)) & ~v12;
  v20(v16, v10);
  uint64_t v17 = v14 + v6;
  v4((v17 + v16) & ~v6, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  unint64_t v18 = (v13 + v12 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v17 + ((v15 + (v15 & ~v12)) & ~v12)) & ~v6) + 16) & ~v12;
  v20(v18, v10);
  return ((uint64_t (*)(unint64_t, uint64_t))v20)((v15 + v18) & ~v12, v10);
}

uint64_t sub_187689974(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v46 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = v9 + v10;
  uint64_t v44 = v9;
  uint64_t v45 = v6;
  uint64_t v12 = v7;
  uint64_t v47 = v7;
  uint64_t v13 = (v9 + v10 + v7) & ~v10;
  uint64_t v14 = (v9 + v10 + v8) & ~v10;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v9 + v10 + v13) & ~v10;
  uint64_t v16 = (v9 + v10 + v14) & ~v10;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = (v9 + v10 + v15) & ~v10;
  uint64_t v18 = (v9 + v10 + v16) & ~v10;
  v6(v17, v18, AssociatedTypeWitness);
  v6((v11 + v17) & ~v10, (v11 + v18) & ~v10, AssociatedTypeWitness);
  uint64_t v19 = (v11 + ((v11 + ((v11 + (v11 & ~v10)) & ~v10)) & ~v10)) & ~v10;
  uint64_t v20 = swift_checkMetadataState();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v10 | 7;
  uint64_t v24 = v10 | 7 | v22;
  uint64_t v25 = v19 + v9 + v24;
  uint64_t v26 = (v25 + v12) & ~v24;
  uint64_t v43 = v26;
  uint64_t v27 = (v25 + v46) & ~v24;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v28(v26, v27, v20);
  uint64_t v29 = *(void *)(v21 + 64);
  uint64_t v30 = v29 + v22;
  uint64_t v31 = (v29 + v22 + v26) & ~v22;
  v28(v31, (v29 + v22 + v27) & ~v22, v20);
  uint64_t v32 = (v29 + v22 + v31) & ~v22;
  uint64_t v33 = (v29 + v22 + ((v29 + v22 + v27) & ~v22)) & ~v22;
  v28(v32, v33, v20);
  uint64_t v34 = v29 + v23;
  uint64_t v35 = (v34 + v32) & ~v23;
  uint64_t v36 = (v34 + v33) & ~v23;
  v45(v35, v36, AssociatedTypeWitness);
  *(void *)((v44 + 7 + v35) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v44 + 7 + v36) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v37 = ((v44 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v34 + ((v30 + (v30 & ~v22)) & ~v22)) & ~v23) + 8;
  uint64_t v38 = (void *)(v37 + v43);
  uint64_t v39 = (void *)(v37 + v27);
  *uint64_t v38 = *v39;
  uint64_t v40 = ((unint64_t)v38 + v22 + 8) & ~v22;
  uint64_t v41 = ((unint64_t)v39 + v22 + 8) & ~v22;
  sub_18769A52C();
  v28(v40, v41, v20);
  v28((v30 + v40) & ~v22, (v30 + v41) & ~v22, v20);
  return v47;
}

uint64_t sub_187689C9C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v44 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v46 = a1;
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = v9 + v10;
  uint64_t v42 = v9;
  uint64_t v12 = v7;
  uint64_t v13 = (v9 + v10 + v7) & ~v10;
  uint64_t v14 = (v9 + v10 + v8) & ~v10;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v9 + v10 + v13) & ~v10;
  uint64_t v16 = (v9 + v10 + v14) & ~v10;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = (v9 + v10 + v15) & ~v10;
  uint64_t v18 = (v9 + v10 + v16) & ~v10;
  v6(v17, v18, AssociatedTypeWitness);
  v6((v11 + v17) & ~v10, (v11 + v18) & ~v10, AssociatedTypeWitness);
  uint64_t v19 = (v11 + ((v11 + ((v11 + (v11 & ~v10)) & ~v10)) & ~v10)) & ~v10;
  uint64_t v20 = swift_checkMetadataState();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v10 | 7;
  uint64_t v24 = v10 | 7 | v22;
  uint64_t v25 = v19 + v9 + v24;
  uint64_t v26 = (v25 + v12) & ~v24;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24);
  uint64_t v43 = v26;
  uint64_t v45 = (v25 + v44) & ~v24;
  v27(v26, v45, v20);
  uint64_t v28 = *(void *)(v21 + 64);
  uint64_t v29 = v28 + v22;
  uint64_t v30 = (v28 + v22 + v26) & ~v22;
  v27(v30, (v28 + v22 + v45) & ~v22, v20);
  uint64_t v31 = (v28 + v22 + v30) & ~v22;
  uint64_t v32 = (v28 + v22 + ((v28 + v22 + v45) & ~v22)) & ~v22;
  v27(v31, v32, v20);
  uint64_t v33 = v28 + v23;
  uint64_t v34 = (v33 + v31) & ~v23;
  uint64_t v35 = (v33 + v32) & ~v23;
  v6(v34, v35, AssociatedTypeWitness);
  *(void *)((v42 + 7 + v34) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((v42 + 7 + v35) & 0xFFFFFFFFFFFFF8LL);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  unint64_t v36 = ((v42 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v33 + ((v29 + (v29 & ~v22)) & ~v22)) & ~v23) + 8;
  unint64_t v37 = (void *)(v36 + v43);
  uint64_t v38 = (void *)(v36 + v45);
  *unint64_t v37 = *v38;
  uint64_t v39 = ((unint64_t)v37 + v22 + 8) & ~v22;
  uint64_t v40 = ((unint64_t)v38 + v22 + 8) & ~v22;
  v27(v39, v40, v20);
  v27((v29 + v39) & ~v22, (v29 + v40) & ~v22, v20);
  return v46;
}

uint64_t sub_187689FD0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v46 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = v9 + v10;
  uint64_t v44 = v9;
  uint64_t v45 = v6;
  uint64_t v12 = v7;
  uint64_t v47 = v7;
  uint64_t v13 = (v9 + v10 + v7) & ~v10;
  uint64_t v14 = (v9 + v10 + v8) & ~v10;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v9 + v10 + v13) & ~v10;
  uint64_t v16 = (v9 + v10 + v14) & ~v10;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = (v9 + v10 + v15) & ~v10;
  uint64_t v18 = (v9 + v10 + v16) & ~v10;
  v6(v17, v18, AssociatedTypeWitness);
  v6((v11 + v17) & ~v10, (v11 + v18) & ~v10, AssociatedTypeWitness);
  uint64_t v19 = (v11 + ((v11 + ((v11 + (v11 & ~v10)) & ~v10)) & ~v10)) & ~v10;
  uint64_t v20 = swift_checkMetadataState();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v10 | 7;
  uint64_t v24 = v10 | 7 | v22;
  uint64_t v25 = v19 + v9 + v24;
  uint64_t v26 = (v25 + v12) & ~v24;
  uint64_t v43 = v26;
  uint64_t v27 = (v25 + v46) & ~v24;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v28(v26, v27, v20);
  uint64_t v29 = *(void *)(v21 + 64);
  uint64_t v30 = v29 + v22;
  uint64_t v31 = (v29 + v22 + v26) & ~v22;
  v28(v31, (v29 + v22 + v27) & ~v22, v20);
  uint64_t v32 = (v29 + v22 + v31) & ~v22;
  uint64_t v33 = (v29 + v22 + ((v29 + v22 + v27) & ~v22)) & ~v22;
  v28(v32, v33, v20);
  uint64_t v34 = v29 + v23;
  uint64_t v35 = (v34 + v32) & ~v23;
  uint64_t v36 = (v34 + v33) & ~v23;
  v45(v35, v36, AssociatedTypeWitness);
  *(void *)((v44 + 7 + v35) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v44 + 7 + v36) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v37 = ((v44 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v34 + ((v30 + (v30 & ~v22)) & ~v22)) & ~v23) + 8;
  uint64_t v38 = (void *)(v37 + v43);
  uint64_t v39 = (void *)(v37 + v27);
  *uint64_t v38 = *v39;
  uint64_t v40 = ((unint64_t)v38 + v22 + 8) & ~v22;
  uint64_t v41 = ((unint64_t)v39 + v22 + 8) & ~v22;
  v28(v40, v41, v20);
  v28((v30 + v40) & ~v22, (v30 + v41) & ~v22, v20);
  return v47;
}

uint64_t sub_18768A2F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v46 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v45 = v6;
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = v9 + v10;
  uint64_t v43 = v9;
  uint64_t v12 = v7;
  uint64_t v47 = v7;
  uint64_t v13 = (v9 + v10 + v7) & ~v10;
  uint64_t v14 = (v9 + v10 + v8) & ~v10;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v9 + v10 + v13) & ~v10;
  uint64_t v16 = (v9 + v10 + v14) & ~v10;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = (v9 + v10 + v15) & ~v10;
  uint64_t v18 = (v9 + v10 + v16) & ~v10;
  v6(v17, v18, AssociatedTypeWitness);
  v6((v11 + v17) & ~v10, (v11 + v18) & ~v10, AssociatedTypeWitness);
  uint64_t v19 = (v11 + ((v11 + ((v11 + (v11 & ~v10)) & ~v10)) & ~v10)) & ~v10;
  uint64_t v20 = swift_checkMetadataState();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v10 | 7;
  uint64_t v24 = v10 | 7 | v22;
  uint64_t v25 = v19 + v9 + v24;
  uint64_t v26 = (v25 + v12) & ~v24;
  uint64_t v44 = v26;
  uint64_t v27 = (v25 + v46) & ~v24;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
  v28(v26, v27, v20);
  uint64_t v29 = *(void *)(v21 + 64);
  uint64_t v30 = v29 + v22;
  uint64_t v31 = (v29 + v22 + v26) & ~v22;
  v28(v31, (v29 + v22 + v27) & ~v22, v20);
  uint64_t v32 = (v29 + v22 + v31) & ~v22;
  uint64_t v33 = (v29 + v22 + ((v29 + v22 + v27) & ~v22)) & ~v22;
  v28(v32, v33, v20);
  uint64_t v34 = v29 + v23;
  uint64_t v35 = (v34 + v32) & ~v23;
  uint64_t v36 = (v34 + v33) & ~v23;
  v45(v35, v36, AssociatedTypeWitness);
  *(void *)((v43 + 7 + v35) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((v43 + 7 + v36) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  unint64_t v37 = ((v43 + 7) & 0xFFFFFFFFFFFFFFF8LL) + ((v34 + ((v30 + (v30 & ~v22)) & ~v22)) & ~v23) + 8;
  uint64_t v38 = (void *)(v37 + v44);
  uint64_t v39 = (void *)(v37 + v27);
  *uint64_t v38 = *v39;
  uint64_t v40 = ((unint64_t)v38 + v22 + 8) & ~v22;
  uint64_t v41 = ((unint64_t)v39 + v22 + 8) & ~v22;
  v28(v40, v41, v20);
  v28((v30 + v40) & ~v22, (v30 + v41) & ~v22, v20);
  return v47;
}

uint64_t sub_18768A624(unint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v7;
  uint64_t v14 = *(void *)(v5 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = (v14 + v15 + ((v14 + v15 + ((v14 + v15 + ((v14 + v15) & ~v15)) & ~v15)) & ~v15)) & ~v15;
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = v15 | 7;
  uint64_t v19 = v18 | v17;
  uint64_t v20 = v16 + v14 + (v18 | v17);
  uint64_t v21 = *(void *)(v8 + 64);
  uint64_t v22 = v21 + v17;
  uint64_t v23 = v18 + v21;
  uint64_t v24 = v14 + 7;
  unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8LL) + v17 + ((v18 + v21 + ((v21 + v17 + ((v21 + v17) & ~v17)) & ~v17)) & ~v18) + 16;
  if (a2 > v12)
  {
    uint64_t v26 = ((v22 + ((v25 + (v20 & ~v19)) & ~v17)) & ~v17) + v21;
    char v27 = 8 * v26;
    unsigned int v30 = ((a2 - v12 + ~(-1 << v27)) >> v27) + 1;
    if (HIWORD(v30))
    {
      int v28 = *(_DWORD *)(a1 + v26);
      if (!v28) {
        goto LABEL_32;
      }
      goto LABEL_23;
    }

    if (v30 > 0xFF)
    {
      int v28 = *(unsigned __int16 *)(a1 + v26);
      if (!*(_WORD *)(a1 + v26)) {
        goto LABEL_32;
      }
      goto LABEL_23;
    }

    if (v30 >= 2)
    {
LABEL_15:
      int v28 = *(unsigned __int8 *)(a1 + v26);
      if (!*(_BYTE *)(a1 + v26)) {
        goto LABEL_32;
      }
LABEL_23:
      int v31 = (v28 - 1) << v27;
      if ((_DWORD)v26)
      {
        else {
          int v32 = 4;
        }
        __asm { BR              X12 }
      }

      return v12 + v31 + 1;
    }
  }

void sub_18768A964(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_checkMetadataState() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v7;
  }
  if (v10 <= v9) {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v9 > v12) {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  size_t v17 = ((v16
        + v15
        + ((v15
          + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL)
          + 8
          + (((v14 | 7) + v16 + ((v16 + v15 + ((v16 + v15) & ~v15)) & ~v15)) & ~(v14 | 7))
          + 8
          + ((((v13 + v14 + ((v13 + v14 + ((v13 + v14 + ((v13 + v14) & ~v14)) & ~v14)) & ~v14)) & ~v14)
            + v13
            + (v14 | 7 | v15)) & ~(v14 | 7 | v15))) & ~v15)) & ~v15)
      + v16;
  if (a3 <= v12)
  {
    unsigned int v18 = 0u;
  }

  else if (v17 <= 3)
  {
    unsigned int v20 = ((a3 - v12 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v20))
    {
      unsigned int v18 = 4u;
    }

    else if (v20 >= 0x100)
    {
      unsigned int v18 = 2;
    }

    else
    {
      unsigned int v18 = v20 > 1;
    }
  }

  else
  {
    unsigned int v18 = 1u;
  }

  if (v12 < a2)
  {
    int v19 = ~v12 + a2;
    if (v17 < 4)
    {
      if ((_DWORD)v17)
      {
        int v21 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if ((_DWORD)v17 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }

        else if ((_DWORD)v17 == 2)
        {
          *(_WORD *)a1 = v21;
        }

        else
        {
          *a1 = v21;
        }
      }
    }

    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X7 }

uint64_t _s6ServerVMa_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ServerVMn_1);
}

uint64_t _s13ServerSecretsVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s13ServerSecretsVMn);
}

uint64_t sub_18768AD64()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_18768ADD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }

  else
  {
    uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(void *)(a3 + 16));
    unint64_t v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    unint64_t v17 = (v10 + v16) & v9;
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v17, v5);
    unint64_t v18 = (v10 + v17) & v9;
    v15((uint64_t *)((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9), (uint64_t *)v18, v5);
    v15( (uint64_t *)((v10 + ((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9)) & v9),  (uint64_t *)((v10 + v18) & v9),  v5);
  }

  return v4;
}

uint64_t sub_18768AF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unsigned int v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v12(a1, v3);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = (v5 + v6 + a1) & ~v6;
  v12(v8, v3);
  uint64_t v9 = (v7 + v8) & ~v6;
  v12(v9, v3);
  uint64_t v10 = (v7 + v9) & ~v6;
  v12(v10, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)((v7 + v10) & ~v6, v3);
}

uint64_t sub_18768AFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_18768B090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_18768B164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_18768B238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_18768B30C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8) + v7;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v6 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v12 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_18;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v5 + v13 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_18768B3E4 + 4 * byte_18769EC96[(v9 - 1)]))();
}

void sub_18768B434(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9) + v8;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v15 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v15))
      {
        unsigned int v13 = 4u;
      }

      else if (v15 >= 0x100)
      {
        unsigned int v13 = 2;
      }

      else
      {
        unsigned int v13 = v15 > 1;
      }
    }

    else
    {
      unsigned int v13 = 1u;
    }
  }

  else
  {
    unsigned int v13 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }

        else if ((_DWORD)v10 == 2)
        {
          *a1 = v16;
        }

        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }

    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void *sub_18768B60C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v8 = v6;
  uint64_t v9 = MEMORY[0x18961AFE8];
  if (!v7) {
    return (void *)v9;
  }
  uint64_t v12 = (uint64_t)result;
  uint64_t v28 = MEMORY[0x18961AFE8];
  uint64_t result = sub_18762C3B0(0LL, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = v28;
    if (a2 <= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v14 = v12;
    while (a2 != v14)
    {
      uint64_t v25 = v14;
      uint64_t result = sub_18768BAE4(&v25, a3, a4, a5, a6, &v26);
      if (v8)
      {
        swift_release();
        return (void *)v9;
      }

      uint64_t v8 = 0LL;
      __int128 v15 = v26;
      __int128 v16 = v27;
      uint64_t v28 = v9;
      unint64_t v18 = *(void *)(v9 + 16);
      unint64_t v17 = *(void *)(v9 + 24);
      if (v18 >= v17 >> 1)
      {
        __int128 v20 = v27;
        __int128 v21 = v26;
        uint64_t result = sub_18762C3B0((char *)(v17 > 1), v18 + 1, 1);
        __int128 v16 = v20;
        __int128 v15 = v21;
        uint64_t v9 = v28;
      }

      *(void *)(v9 + 16) = v18 + 1;
      uint64_t v19 = v9 + 32 * v18;
      *(_OWORD *)(v19 + 32) = v15;
      *(_OWORD *)(v19 + 48) = v16;
      if (a2 < v12) {
        goto LABEL_19;
      }
      if (v13 == v14) {
        goto LABEL_20;
      }
      if (a2 == ++v14) {
        return (void *)v9;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

uint64_t sub_18768B768@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  v28[1] = *MEMORY[0x1895F89C0];
  cche_relin_key_sizeof();
  uint64_t v4 = cche_param_ctx_key_ctx_poly_nbytes();
  uint64_t v5 = cche_rng_seed_sizeof();
  unsigned int v6 = cche_param_ctx_key_ctx_nmoduli();
  uint64_t v7 = v6 - 1LL;
  unint64_t v8 = v7 * v4;
  if ((unsigned __int128)(v7 * (__int128)v4) >> 64 != (v7 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = v5;
  int64_t v10 = v7 * v5;
  uint64_t v26 = v9;
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != v10 >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if ((v8 & 0x8000000000000000LL) != 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  unsigned int v25 = v6;
  if (v8)
  {
    uint64_t v11 = sub_18769A550();
    *(void *)(v11 + 16) = v8;
    bzero((void *)(v11 + 32), v7 * v4);
    v28[0] = v11;
    if ((v10 & 0x8000000000000000LL) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v11 = MEMORY[0x18961AFE8];
  v28[0] = MEMORY[0x18961AFE8];
  if (v10 < 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v24 = a2;
  uint64_t v23 = v4;
  if (v10)
  {
    uint64_t v12 = sub_18769A550();
    *(void *)(v12 + 16) = v10;
    bzero((void *)(v12 + 32), v10);
    goto LABEL_11;
  }

uint64_t HE.SerializedRelinKey.relinKey.getter()
{
  return sub_18769A52C();
}

uint64_t HE.SerializedRelinKey.init(relinKey:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedRelinKey()
{
  return &type metadata for HE.SerializedRelinKey;
}

void *sub_18768BAE4@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = *result;
  uint64_t v7 = *result + 1LL;
  if (__OFADD__(*result, 1LL))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v9 = v6 * a2;
  if ((unsigned __int128)(v6 * (__int128)a2) >> 64 != (v6 * a2) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v10 = v7 * a2;
  if ((unsigned __int128)(v7 * (__int128)a2) >> 64 != (v7 * a2) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v11 = v6 * a3;
  if ((unsigned __int128)(v6 * (__int128)a3) >> 64 != (v6 * a3) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v12 = v7 * a3;
  if ((unsigned __int128)(v7 * (__int128)a3) >> 64 != (v7 * a3) >> 63)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v10 < v9 || v12 < v11) {
    goto LABEL_22;
  }
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v14 = *a4;
  unint64_t v15 = *(void *)(*a4 + 16);
  uint64_t v17 = (2 * v10) | 1;
  uint64_t v18 = sub_18769A52C();
  int v19 = sub_187645CE0(v18, v14 + 32, v9, v17);
  uint64_t v21 = v20;
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v11 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v22 = *a5;
  unint64_t v23 = *(void *)(v22 + 16);
  if (v23 >= v11 && (uint64_t)v23 >= v12)
  {
    uint64_t v24 = sub_18769A52C();
    unsigned int v25 = sub_187645CE0(v24, v22 + 32, v11, (2 * v12) | 1);
    uint64_t v27 = v26;
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *a6 = v19;
    a6[1] = v21;
    a6[2] = v25;
    a6[3] = v27;
    return result;
  }

uint64_t sub_18768BC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  unint64_t v89 = *(void *)(a2 + 16);
  if (HIDWORD(v89))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  uint64_t v6 = cche_galois_key_sizeof();
  uint64_t v7 = cche_param_ctx_key_ctx_poly_nbytes();
  uint64_t v8 = cche_rng_seed_sizeof();
  unsigned int v9 = cche_param_ctx_key_ctx_nmoduli();
  uint64_t v10 = v9 - 1LL;
  uint64_t v11 = v89 * v10;
  if ((unsigned __int128)((uint64_t)v89 * (__int128)v10) >> 64 != (uint64_t)(v89 * v10) >> 63)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  uint64_t v92 = v9 - 1LL;
  size_t v12 = v11 * v7;
  if ((unsigned __int128)(v11 * (__int128)v7) >> 64 != (v11 * v7) >> 63)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }

  size_t v13 = v11 * v8;
  if ((unsigned __int128)(v11 * (__int128)v8) >> 64 != (v11 * v8) >> 63)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }

  if ((v12 & 0x8000000000000000LL) != 0)
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  unsigned int v82 = v9;
  uint64_t v86 = a1;
  uint64_t v80 = a4;
  if (v12)
  {
    uint64_t v14 = sub_18769A550();
    *(void *)(v14 + 16) = v12;
    bzero((void *)(v14 + 32), v12);
    if ((v13 & 0x8000000000000000LL) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v14 = MEMORY[0x18961AFE8];
  if ((v13 & 0x8000000000000000LL) != 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!v13)
  {
LABEL_12:
    uint64_t v15 = MEMORY[0x18961AFE8];
    goto LABEL_13;
  }

  uint64_t v15 = sub_18769A550();
  *(void *)(v15 + 16) = v13;
  bzero((void *)(v15 + 32), v13);
LABEL_13:
  type metadata accessor for HE.ObjectStorage();
  uint64_t inited = (void *)swift_initStackObject();
  inited[2] = v86;
  swift_retain();
  uint64_t v93 = swift_slowAlloc();
  inited[3] = v93;
  inited[4] = v93 + v6;
  if (!*(void *)(a3 + 24))
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }

  if (HIDWORD(v13)) {
    goto LABEL_98;
  }
  uint64_t v91 = v8;
  uint64_t v95 = v15;
  LODWORD(v99[0]) = 0;
  if (!ccrng()) {
    goto LABEL_106;
  }
  int v17 = cche_galois_key_generate();
  if (v17)
  {
    int v18 = v17;
LABEL_21:
    swift_bridgeObjectRelease();
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v18;
    *(_BYTE *)(v20 + 4) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_setDeallocating();
    swift_retain();
    MEMORY[0x1895AB038](v93, -1LL, -1LL);
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  if (HIDWORD(v12)) {
    goto LABEL_102;
  }
  int v19 = cche_galois_key_save();
  if (v19)
  {
    int v18 = v19;
    goto LABEL_21;
  }

  uint64_t v22 = MEMORY[0x18961AFE8];
  unint64_t v23 = sub_18764B1C4(MEMORY[0x18961AFE8]);
  uint64_t v24 = a2;
  uint64_t v78 = *(void *)(a2 + 16);
  if (!v78)
  {
    id v74 = (void *)v23;
    swift_release();
    swift_release();
    goto LABEL_79;
  }

  uint64_t v88 = v14 + 32;
  if (!v82) {
    goto LABEL_104;
  }
  unint64_t v25 = 0LL;
  uint64_t v94 = v14;
  int64_t v26 = v92;
  uint64_t v87 = v7;
  do
  {
    if (v25 >= *(void *)(v24 + 16)) {
      goto LABEL_99;
    }
    unsigned int v83 = *(_DWORD *)(a2 + 32 + 4 * v25);
    unint64_t v81 = v25;
    if (v26)
    {
      unint64_t v79 = v23;
      uint64_t v98 = v22;
      sub_18762C3B0(0LL, v26, 0);
      int64_t v90 = v25 * v26;
      if ((unsigned __int128)((uint64_t)v25 * (__int128)v26) >> 64 != (uint64_t)(v25 * v26) >> 63)
      {
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }

      uint64_t v28 = 0LL;
      while (1)
      {
        uint64_t v29 = v90 + v28;
        if (__OFADD__(v90, v28)) {
          break;
        }
        uint64_t v30 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_81;
        }
        uint64_t v31 = v29 * v7;
        uint64_t v32 = v30 * v7;
        uint64_t v33 = v29 * v8;
        uint64_t v34 = v30 * v8;
        if (v32 < v31 || v34 < v33) {
          goto LABEL_86;
        }
        if (v31 < 0) {
          goto LABEL_87;
        }
        uint64_t v35 = *(void *)(v14 + 16);
        uint64_t v36 = (2 * v32) | 1;
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9D88);
        uint64_t v100 = v37;
        unint64_t v38 = sub_18768CA28();
        unint64_t v101 = v38;
        uint64_t v39 = (void *)swift_allocObject();
        v99[0] = v39;
        v39[2] = v14;
        v39[3] = v88;
        v39[4] = v31;
        void v39[5] = v36;
        uint64_t v40 = __swift_project_boxed_opaque_existential_1(v99, v37);
        uint64_t v41 = v40[2];
        uint64_t v42 = v40[3] >> 1;
        uint64_t v43 = v42 - v41;
        if (__OFSUB__(v42, v41)) {
          goto LABEL_89;
        }
        if (v43)
        {
          uint64_t v44 = (const void *)(v40[1] + v41);
          if (v43 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v97 = v42 - v41;
            memcpy(__dst, v44, v42 - v41);
            uint64_t v47 = *(void *)__dst;
            unint64_t v48 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v97 << 48);
            swift_bridgeObjectRetain_n();
          }

          else
          {
            sub_187699ECC();
            swift_allocObject();
            swift_bridgeObjectRetain_n();
            uint64_t v45 = sub_187699E84();
            uint64_t v46 = v45;
            if ((unint64_t)v43 >= 0x7FFFFFFF)
            {
              sub_187699F38();
              uint64_t v47 = swift_allocObject();
              *(void *)(v47 + 16) = 0LL;
              *(void *)(v47 + 24) = v43;
              unint64_t v48 = v46 | 0x8000000000000000LL;
            }

            else
            {
              uint64_t v47 = v43 << 32;
              unint64_t v48 = v45 | 0x4000000000000000LL;
            }
          }
        }

        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v47 = 0LL;
          unint64_t v48 = 0xC000000000000000LL;
        }

        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        if (v33 < 0) {
          goto LABEL_90;
        }
        uint64_t v49 = *(void *)(v95 + 16);
        uint64_t v100 = v37;
        unint64_t v101 = v38;
        __int128 v50 = (void *)swift_allocObject();
        v99[0] = v50;
        v50[2] = v95;
        v50[3] = v95 + 32;
        v50[4] = v33;
        void v50[5] = (2 * v34) | 1;
        __int128 v51 = __swift_project_boxed_opaque_existential_1(v99, v37);
        uint64_t v52 = v51[2];
        uint64_t v53 = v51[3] >> 1;
        uint64_t v54 = v53 - v52;
        if (__OFSUB__(v53, v52)) {
          goto LABEL_92;
        }
        if (v54)
        {
          uint64_t v55 = (const void *)(v51[1] + v52);
          if (v54 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v97 = v53 - v52;
            memcpy(__dst, v55, v53 - v52);
            uint64_t v58 = *(void *)__dst;
            unint64_t v59 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v97 << 48);
            swift_bridgeObjectRetain_n();
          }

          else
          {
            sub_187699ECC();
            swift_allocObject();
            swift_bridgeObjectRetain_n();
            uint64_t v56 = sub_187699E84();
            uint64_t v57 = v56;
            if ((unint64_t)v54 >= 0x7FFFFFFF)
            {
              sub_187699F38();
              uint64_t v58 = swift_allocObject();
              *(void *)(v58 + 16) = 0LL;
              *(void *)(v58 + 24) = v54;
              unint64_t v59 = v57 | 0x8000000000000000LL;
            }

            else
            {
              uint64_t v58 = v54 << 32;
              unint64_t v59 = v56 | 0x4000000000000000LL;
            }
          }
        }

        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v58 = 0LL;
          unint64_t v59 = 0xC000000000000000LL;
        }

        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        uint64_t v60 = v98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_18762C3B0(0LL, *(void *)(v60 + 16) + 1LL, 1);
          uint64_t v60 = v98;
        }

        unint64_t v62 = *(void *)(v60 + 16);
        unint64_t v61 = *(void *)(v60 + 24);
        if (v62 >= v61 >> 1)
        {
          sub_18762C3B0((char *)(v61 > 1), v62 + 1, 1);
          uint64_t v60 = v98;
        }

        ++v28;
        *(void *)(v60 + 16) = v62 + 1;
        uint64_t v63 = (void *)(v60 + 32 * v62);
        v63[4] = v47;
        v63[5] = v48;
        v63[6] = v58;
        v63[7] = v59;
        uint64_t v14 = v94;
        uint64_t v7 = v87;
        uint64_t v8 = v91;
        if (v92 == v28)
        {
          uint64_t v22 = MEMORY[0x18961AFE8];
          unint64_t v23 = v79;
          goto LABEL_68;
        }
      }

      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }

    uint64_t v60 = v22;
LABEL_68:
    unint64_t v64 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v99[0] = v64;
    unint64_t v67 = sub_187663C2C(v83);
    uint64_t v68 = *(void *)(v64 + 16);
    BOOL v69 = (v66 & 1) == 0;
    uint64_t v70 = v68 + v69;
    if (__OFADD__(v68, v69)) {
      goto LABEL_100;
    }
    char v71 = v66;
    if (*(void *)(v64 + 24) >= v70)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_18768C884();
      }
    }

    else
    {
      sub_18768C5D4(v70, isUniquelyReferenced_nonNull_native);
      unint64_t v72 = sub_187663C2C(v83);
      if ((v71 & 1) != (v73 & 1))
      {
        uint64_t result = sub_18769A700();
        __break(1u);
        return result;
      }

      unint64_t v67 = v72;
    }

    uint64_t v8 = v91;
    id v74 = (void *)v99[0];
    if ((v71 & 1) != 0)
    {
      uint64_t v27 = *(void *)(v99[0] + 56LL);
      swift_bridgeObjectRelease();
      *(void *)(v27 + 8 * v67) = v60;
    }

    else
    {
      *(void *)(v99[0] + 8 * (v67 >> 6) + 64) |= 1LL << v67;
      *(_DWORD *)(v74[6] + 4 * v67) = v83;
      *(void *)(v74[7] + 8 * v67) = v60;
      uint64_t v75 = v74[2];
      BOOL v76 = __OFADD__(v75, 1LL);
      uint64_t v77 = v75 + 1;
      if (v76) {
        goto LABEL_103;
      }
      v74[2] = v77;
    }

    unint64_t v25 = v81 + 1;
    swift_bridgeObjectRelease();
    uint64_t v24 = a2;
    int64_t v26 = v92;
    unint64_t v23 = (unint64_t)v74;
  }

  while (v81 + 1 != v78);
  swift_release();
  swift_release();
LABEL_79:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v80 = v74;
  return result;
}

uint64_t HE.SerializedGaloisKey.galoisKey.getter()
{
  return sub_18769A52C();
}

uint64_t HE.SerializedGaloisKey.init(galoisKey:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedGaloisKey()
{
  return &type metadata for HE.SerializedGaloisKey;
}

uint64_t sub_18768C5D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9F08);
  uint64_t result = sub_18769A6AC();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0LL;
    unsigned int v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v29 = -1LL << v10;
    uint64_t v30 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }

      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  *unsigned int v9 = v29;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            int64_t v8 = v22;
          }
        }

void *sub_18768C884()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9F08);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18769A6A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_29;
  }

unint64_t sub_18768CA28()
{
  unint64_t result = qword_18C6D9D90;
  if (!qword_18C6D9D90)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6D9D88);
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189607380], v1);
    atomic_store(result, (unint64_t *)&qword_18C6D9D90);
  }

  return result;
}

uint64_t sub_18768CA74()
{
  return swift_deallocObject();
}

uint64_t sub_18768CA98@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  unsigned __int8 v15 = *a3;
  *(void *)&__int128 v28 = *a2;
  *((void *)&v28 + 1) = v14;
  unsigned __int8 v33 = v15;
  unint64_t v16 = swift_retain();
  sub_1876329C0(v16, (uint64_t *)&v28, &v33, a4, a6, (uint64_t)&v29);
  if (v7)
  {
    swift_release();
    return swift_release();
  }

  else
  {
    uint64_t v27 = v13;
    __int128 v18 = v29;
    uint64_t v19 = v30;
    uint64_t v20 = v31;
    sub_18769A52C();
    swift_retain();
    uint64_t v26 = sub_18768CE74(v20, v18, *((uint64_t *)&v18 + 1), v19, v20, a5);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (*(void *)(v20 + 16))
    {
      uint64_t v21 = *(void *)(*(void *)(v20 + 32) + 16LL);
      unsigned __int8 v22 = *(_BYTE *)(v21 + 40);
      LOBYTE(v21) = *(_BYTE *)(v21 + 41);
      unsigned __int8 v33 = v22;
      char v34 = v21;
      __int128 v28 = v18;
      unsigned __int8 v32 = v19;
      PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)( &v33,  (uint64_t *)&v28,  &v32,  v26,  (uint64_t)&v29);
      swift_bridgeObjectRelease();
      char v23 = *(_BYTE *)(a1 + 41);
      unsigned __int8 v33 = *(_BYTE *)(a1 + 40);
      char v34 = v23;
      *(void *)&__int128 v28 = v27;
      *((void *)&v28 + 1) = v14;
      unsigned __int8 v32 = v15;
      PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)( &v33,  (uint64_t *)&v28,  &v32,  v31,  (uint64_t)&v29);
      swift_release();
      uint64_t result = swift_release();
      unsigned __int8 v24 = v30;
      uint64_t v25 = v31;
      *(_OWORD *)a7 = v29;
      *(_BYTE *)(a7 + 16) = v24;
      *(void *)(a7 + 24) = v25;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)@<X0>( _BYTE *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!*(void *)(a4 + 16)) {
    goto LABEL_6;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unsigned __int8 v10 = *a3;
  char v11 = a1[1];
  v16[0] = *a1;
  v16[1] = v11;
  v15[0] = v8;
  v15[1] = v9;
  unsigned __int8 v14 = v10;
  uint64_t result = sub_187633558((uint64_t)v16, v15, &v14);
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  if (*(void *)(a4 + 16) == result)
  {
    *(void *)a5 = v8;
    *(void *)(a5 + 8) = v9;
    *(_BYTE *)(a5 + 16) = v10;
    *(void *)(a5 + 24) = a4;
  }

  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

void PEC.SerializedCiphertextCoeffMatrix.packing.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.ciphertexts.getter()
{
  return sub_18769A52C();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.rowCount.getter()
{
  return *(void *)v0;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.colCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_18769A52C();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PEC.SerializedCiphertextCoeffMatrix()
{
  return &type metadata for PEC.SerializedCiphertextCoeffMatrix;
}

uint64_t sub_18768CE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x18961AFE8];
  if (!v6) {
    return v7;
  }
  uint64_t v41 = MEMORY[0x18961AFE8];
  sub_18762C3B0(0LL, v6, 0);
  uint64_t v36 = *(void *)(a5 + 32);
  uint64_t result = cche_rng_seed_sizeof();
  if (!*(void *)(a5 + 16)) {
    goto LABEL_34;
  }
  char v11 = (uint64_t *)(a1 + 32);
  uint64_t v7 = v41;
  uint64_t v12 = result;
  unint64_t v35 = (unint64_t)result << 48;
  type metadata accessor for HE.ObjectStorage();
  uint64_t v38 = v12;
  uint64_t v34 = v12 << 32;
  while (1)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = *(void *)(v36 + 16);
    cche_param_ctx_ciphertext_ctx_nmoduli();
    uint64_t v15 = cche_ciphertext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v14;
    swift_retain_n();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v15;
    if (!v38)
    {
      uint64_t result = 0LL;
      unint64_t v19 = 0xC000000000000000LL;
      goto LABEL_12;
    }

    if (v38 < 15) {
      break;
    }
    sub_187699ECC();
    swift_allocObject();
    uint64_t v17 = sub_187699E9C();
    uint64_t v18 = v17;
    if ((unint64_t)v38 >= 0x7FFFFFFF)
    {
      sub_187699F38();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = 0LL;
      *(void *)(result + 24) = v38;
      unint64_t v19 = v18 | 0x8000000000000000LL;
    }

    else
    {
      unint64_t v19 = v17 | 0x4000000000000000LL;
      uint64_t result = v34;
    }

uint64_t sub_18768D270()
{
  uint64_t v0 = HE.RlweParams.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == HE.RlweParams.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_18769A6DC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_18768D304(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 5654338LL;
  }
  else {
    uint64_t v2 = 5654082LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 5654338LL;
  }
  else {
    uint64_t v3 = 5654082LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_18769A6DC();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_18768D36C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x316D75746E617571LL;
  }
  else {
    uint64_t v3 = 0x656B636568636E75LL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000064LL;
  }
  else {
    unint64_t v4 = 0xEA00000000003832LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x316D75746E617571LL;
  }
  else {
    uint64_t v5 = 0x656B636568636E75LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA00000000003832LL;
  }
  else {
    unint64_t v6 = 0xE900000000000064LL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_18769A6DC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_18768D41C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  unint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

BOOL sub_18768D490(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  unint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

uint64_t HE.RlweParams.plaintextModulus.getter()
{
  return cche_encryption_params_plaintext_modulus();
}

uint64_t HE.RlweParams.init(inParams:plaintextModulus:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = 0LL;
  char v23 = *a1;
  while (1)
  {
    char v5 = *((_BYTE *)&unk_18A0800E8 + v4 + 32);
    int v6 = cche_encryption_params_polynomial_degree();
    if (v6 != cche_encryption_params_polynomial_degree()
      || cche_encryption_params_plaintext_modulus() != v3)
    {
      goto LABEL_3;
    }

    uint64_t result = cche_encryption_params_coefficient_nmoduli();
    if (result < 0)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = sub_18769A550();
      *(void *)(v9 + 16) = v8;
    }

    else
    {
      uint64_t v9 = MEMORY[0x18961AFE8];
    }

    cche_encryption_params_coefficient_moduli();
    *(void *)(v9 + 16) = v8;
    uint64_t result = cche_encryption_params_coefficient_nmoduli();
    if (result < 0) {
      goto LABEL_43;
    }
    uint64_t v10 = result;
    if (result)
    {
      uint64_t v11 = sub_18769A550();
      *(void *)(v11 + 16) = v10;
    }

    else
    {
      uint64_t v11 = MEMORY[0x18961AFE8];
    }

    uint64_t result = cche_encryption_params_coefficient_moduli();
    *(void *)(v11 + 16) = v10;
    if (*(void *)(v9 + 16) != v10)
    {
LABEL_2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = a2;
      goto LABEL_3;
    }

    if (v10 && v9 != v11)
    {
      if (*(void *)(v9 + 32) != *(void *)(v11 + 32)) {
        goto LABEL_2;
      }
      uint64_t v12 = v10 - 1;
      if (v10 != 1) {
        break;
      }
    }

_BYTE *HE.EncryptionParams.init(rlweParams:scheme:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t HE.RlweParams.encodeSimdColCount.getter()
{
  return cche_encryption_params_polynomial_degree() >> 1;
}

uint64_t HE.RlweParams.encodeSimdRowCount.getter()
{
  return 2LL;
}

uint64_t HE.RlweParams.polynomialDegree.getter()
{
  return cche_encryption_params_polynomial_degree();
}

void HE.EncryptionParams.rlweParams.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

void HE.EncryptionParams.scheme.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

void *static HE.RlweParams.allCases.getter()
{
  return &unk_18A0800E8;
}

uint64_t HE.RlweParams.coefficientModuli.getter()
{
  uint64_t result = cche_encryption_params_coefficient_nmoduli();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v1 = result;
    if (result)
    {
      uint64_t v2 = sub_18769A550();
      *(void *)(v2 + 16) = v1;
    }

    else
    {
      uint64_t v2 = MEMORY[0x18961AFE8];
    }

    cche_encryption_params_coefficient_moduli();
    *(void *)(v2 + 16) = v1;
    return v2;
  }

  return result;
}

void HE.RlweParams.securityLevel.getter(_BYTE *a1@<X8>)
{
  *a1 = byte_18769F2B0[*v1];
}

BOOL HE.RlweParams.supportsEvaluationKey.getter()
{
  unint64_t v0 = *(void *)(HE.RlweParams.coefficientModuli.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 > 1;
}

uint64_t HE.RlweParams.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_18769A6F4();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 17;
  if (v2 < 0x11) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t HE.RlweParams.rawValue.getter()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18768DA20
                                                                     + 4 * asc_18769ED70[*v0]))( 0xD00000000000001DLL,  0x800000018769FCC0LL);
}

uint64_t sub_18768DA20@<X0>(uint64_t a1@<X8>)
{
  return a1 + 4;
}

uint64_t sub_18768DB20()
{
  return sub_18768D270();
}

uint64_t sub_18768DB2C()
{
  return sub_18769A778();
}

uint64_t sub_18768DB90()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18768DBE0()
{
  return sub_18769A778();
}

uint64_t sub_18768DC40@<X0>(char *a1@<X8>)
{
  return HE.RlweParams.init(rawValue:)(a1);
}

uint64_t sub_18768DC4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HE.RlweParams.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_18768DC70(void *a1@<X8>)
{
  *a1 = &unk_18A0800E8;
}

uint64_t sub_18768DC80()
{
  return sub_18769A4FC();
}

uint64_t sub_18768DCDC()
{
  return sub_18769A4F0();
}

uint64_t sub_18768DD28()
{
  return sub_18769A508();
}

uint64_t sub_18768DD68()
{
  return sub_18769A514();
}

uint64_t HE.SecurityLevel.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_18768E168(a1);
}

void *static HE.SecurityLevel.allCases.getter()
{
  return &unk_18A0803A8;
}

uint64_t HE.SecurityLevel.rawValue.getter()
{
  if (*v0) {
    return 0x316D75746E617571LL;
  }
  else {
    return 0x656B636568636E75LL;
  }
}

uint64_t sub_18768DE2C(char *a1, char *a2)
{
  return sub_18768D36C(*a1, *a2);
}

uint64_t sub_18768DE38()
{
  return sub_18769A778();
}

uint64_t sub_18768DEC0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18768DF24()
{
  return sub_18769A778();
}

uint64_t sub_18768DFA8@<X0>(char *a1@<X8>)
{
  return HE.SecurityLevel.init(rawValue:)(a1);
}

void sub_18768DFB4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656B636568636E75LL;
  if (*v1) {
    uint64_t v2 = 0x316D75746E617571LL;
  }
  unint64_t v3 = 0xE900000000000064LL;
  if (*v1) {
    unint64_t v3 = 0xEA00000000003832LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_18768DFFC(void *a1@<X8>)
{
  *a1 = &unk_18A0803D0;
}

uint64_t sub_18768E00C()
{
  return sub_18769A4FC();
}

uint64_t sub_18768E068()
{
  return sub_18769A4F0();
}

uint64_t sub_18768E0B4()
{
  return sub_18769A508();
}

uint64_t sub_18768E0F4()
{
  return sub_18769A514();
}

uint64_t HE.Scheme.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_18768E168(a1);
}

uint64_t sub_18768E168@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_18769A6C4();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void *static HE.Scheme.allCases.getter()
{
  return &unk_18A080448;
}

uint64_t HE.Scheme.rawValue.getter()
{
  if (*v0) {
    return 5654338LL;
  }
  else {
    return 5654082LL;
  }
}

uint64_t sub_18768E1F0(char *a1, char *a2)
{
  return sub_18768D304(*a1, *a2);
}

uint64_t sub_18768E1FC()
{
  return sub_18769A778();
}

uint64_t sub_18768E25C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18768E290()
{
  return sub_18769A778();
}

uint64_t sub_18768E2EC@<X0>(char *a1@<X8>)
{
  return HE.Scheme.init(rawValue:)(a1);
}

void sub_18768E2F8(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = 5654338LL;
  }
  else {
    uint64_t v2 = 5654082LL;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000LL;
}

void sub_18768E31C(void *a1@<X8>)
{
  *a1 = &unk_18A080470;
}

uint64_t sub_18768E32C()
{
  return sub_18769A4FC();
}

uint64_t sub_18768E388()
{
  return sub_18769A4F0();
}

uint64_t sub_18768E3D4()
{
  return sub_18769A508();
}

uint64_t sub_18768E414()
{
  return sub_18769A514();
}

uint64_t _s16CryptoKitPrivate2HEO16EncryptionParamsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  int v3 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v4 = HE.RlweParams.rawValue.getter();
  uint64_t v6 = v5;
  if (v4 == HE.RlweParams.rawValue.getter() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v9 = sub_18769A6DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = 0;
    if ((v9 & 1) == 0) {
      return v10 & 1;
    }
  }

  if (v2) {
    uint64_t v11 = 5654338LL;
  }
  else {
    uint64_t v11 = 5654082LL;
  }
  if (v3) {
    uint64_t v12 = 5654338LL;
  }
  else {
    uint64_t v12 = 5654082LL;
  }
  if (v11 == v12) {
    char v10 = 1;
  }
  else {
    char v10 = sub_18769A6DC();
  }
  swift_bridgeObjectRelease_n();
  return v10 & 1;
}

unint64_t sub_18768E584()
{
  unint64_t result = qword_18C6DA6A0;
  if (!qword_18C6DA6A0)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&protocol conformance descriptor for HE.RlweParams, &type metadata for HE.RlweParams);
    atomic_store(result, (unint64_t *)&qword_18C6DA6A0);
  }

  return result;
}

uint64_t sub_18768E5C8()
{
  return sub_18768E6C4(&qword_18C6DA6A8, &qword_18C6DA6B0);
}

unint64_t sub_18768E5F0()
{
  unint64_t result = qword_18C4C7728;
  if (!qword_18C4C7728)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for HE.SecurityLevel,  &type metadata for HE.SecurityLevel);
    atomic_store(result, (unint64_t *)&qword_18C4C7728);
  }

  return result;
}

uint64_t sub_18768E634()
{
  return sub_18768E6C4(&qword_18C6DA6B8, &qword_18C6DA6C0);
}

unint64_t sub_18768E65C()
{
  unint64_t result = qword_18C6DA6C8;
  if (!qword_18C6DA6C8)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&protocol conformance descriptor for HE.Scheme, &type metadata for HE.Scheme);
    atomic_store(result, (unint64_t *)&qword_18C6DA6C8);
  }

  return result;
}

uint64_t sub_18768E6A0()
{
  return sub_18768E6C4(&qword_18C6DA6D0, &qword_18C6DA6D8);
}

uint64_t sub_18768E6C4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189618488], v4);
    atomic_store(result, a1);
  }

  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s16EncryptionParamsVwet(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

uint64_t _s16EncryptionParamsVwst(_WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18768E7F0 + 4 * byte_18769ED86[v4]))();
  }
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_18768E824 + 4 * byte_18769ED81[v4]))();
}

uint64_t sub_18768E824(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_18768E82C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x18768E834LL);
  }
  return result;
}

uint64_t sub_18768E840(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x18768E848LL);
  }
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_18768E84C(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18768E854(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HE.EncryptionParams()
{
  return &type metadata for HE.EncryptionParams;
}

uint64_t _s10RlweParamsOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }

uint64_t _s10RlweParamsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEF) {
    return ((uint64_t (*)(void))((char *)&loc_18768E94C + 4 * byte_18769ED90[v4]))();
  }
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_18768E980 + 4 * byte_18769ED8B[v4]))();
}

uint64_t sub_18768E980(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18768E988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18768E990LL);
  }
  return result;
}

uint64_t sub_18768E99C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18768E9A4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 16;
  return result;
}

uint64_t sub_18768E9A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18768E9B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HE.RlweParams()
{
  return &type metadata for HE.RlweParams;
}

ValueMetadata *type metadata accessor for HE.SecurityLevel()
{
  return &type metadata for HE.SecurityLevel;
}

uint64_t _s6SchemeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18768EA30 + 4 * byte_18769ED9A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18768EA64 + 4 * byte_18769ED95[v4]))();
}

uint64_t sub_18768EA64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18768EA6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18768EA74LL);
  }
  return result;
}

uint64_t sub_18768EA80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18768EA88LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18768EA8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18768EA94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HE.Scheme()
{
  return &type metadata for HE.Scheme;
}

unint64_t sub_18768EAB0()
{
  unint64_t result = qword_18C4C7730;
  if (!qword_18C4C7730)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&protocol conformance descriptor for HE.Scheme, &type metadata for HE.Scheme);
    atomic_store(result, (unint64_t *)&qword_18C4C7730);
  }

  return result;
}

unint64_t sub_18768EAF4()
{
  unint64_t result = qword_18C4C7738;
  if (!qword_18C4C7738)
  {
    unint64_t result = MEMORY[0x1895AAF9C]( &protocol conformance descriptor for HE.SecurityLevel,  &type metadata for HE.SecurityLevel);
    atomic_store(result, (unint64_t *)&qword_18C4C7738);
  }

  return result;
}

unint64_t sub_18768EB38()
{
  unint64_t result = qword_18C4C7740;
  if (!qword_18C4C7740)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&protocol conformance descriptor for HE.RlweParams, &type metadata for HE.RlweParams);
    atomic_store(result, (unint64_t *)&qword_18C4C7740);
  }

  return result;
}

uint64_t _s20SerializedCiphertextOwxx(uint64_t a1)
{
  return sub_18762DEDC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *_s20SerializedCiphertextOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_18762DE94(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *_s20SerializedCiphertextOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_18762DE94(*a2, v4, v5, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_18762DEDC(v7, v8, v9, v10);
  return a1;
}

uint64_t *_s20SerializedCiphertextOwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  __int128 v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_18762DEDC(v3, v5, v4, v6);
  return a1;
}

uint64_t _s20SerializedCiphertextOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 3 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000LL) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s20SerializedCiphertextOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 3) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 3) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
      *(void *)(result + 16) = 0LL;
      *(void *)(result + 24) = 0LL;
    }
  }

  return result;
}

uint64_t sub_18768ED28(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1LL;
}

uint64_t sub_18768ED34(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_18768ED44(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedCiphertext()
{
  return &type metadata for HE.SerializedCiphertext;
}

char *sub_18768ED6C( void *(*a1)(void *__return_ptr, int *, uint64_t *), uint64_t a2, unint64_t a3)
{
  int v4 = a3;
  unint64_t v28 = HIDWORD(a3);
  else {
    uint64_t v5 = (HIDWORD(a3) - a3);
  }
  uint64_t v6 = MEMORY[0x18961AFE8];
  uint64_t v7 = v5 + 1;
  if (v5 == -1) {
    return (char *)v6;
  }
  uint64_t v39 = MEMORY[0x18961AFE8];
  int64_t v8 = v7 & ~(v7 >> 63);
  unint64_t result = sub_18762C5A4(0LL, v8, 0);
  if (v5 >= -1)
  {
    BOOL v10 = 0;
    uint64_t v6 = v39;
    while (v8)
    {
      if (v10) {
        goto LABEL_23;
      }
      int v31 = v4;
      unint64_t result = (char *)a1(v32, &v31, &v30);
      if (v3)
      {
        swift_release();
        return (char *)v6;
      }

      uint64_t v11 = v32[0];
      uint64_t v12 = v32[1];
      char v13 = v33;
      __int128 v14 = v34;
      __int128 v15 = v35;
      __int128 v16 = v36;
      __int128 v17 = v37;
      __int128 v18 = v38;
      unint64_t v20 = *(void *)(v6 + 16);
      unint64_t v19 = *(void *)(v6 + 24);
      uint64_t v39 = v6;
      if (v20 >= v19 >> 1)
      {
        __int128 v26 = v35;
        __int128 v27 = v34;
        __int128 v24 = v37;
        __int128 v25 = v36;
        __int128 v23 = v38;
        unint64_t result = sub_18762C5A4((char *)(v19 > 1), v20 + 1, 1);
        __int128 v18 = v23;
        __int128 v17 = v24;
        __int128 v16 = v25;
        __int128 v15 = v26;
        __int128 v14 = v27;
        uint64_t v6 = v39;
      }

      *(void *)(v6 + 16) = v20 + 1;
      uint64_t v21 = v6 + 104 * v20;
      *(void *)(v21 + 32) = v11;
      *(void *)(v21 + 40) = v12;
      *(_BYTE *)(v21 + 48) = v13;
      *(_OWORD *)(v21 + 56) = v14;
      *(_OWORD *)(v21 + 72) = v15;
      *(_OWORD *)(v21 + 88) = v16;
      *(_OWORD *)(v21 + 104) = v17;
      *(_OWORD *)(v21 + 120) = v18;
      BOOL v10 = v4 == (_DWORD)v28;
      if (v4 == (_DWORD)v28)
      {
        int v4 = 0;
      }

      else if (__CFADD__(v4++, 1))
      {
        goto LABEL_21;
      }

      --v8;
      if (!--v7) {
        return (char *)v6;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
  }

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_18768EF24@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result = a4 - a3;
  if (a3) {
    uint64_t v8 = a4 - a3;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (a1)
  {
    if (v8 == a2 - a1)
    {
      if (a3)
      {
        uint64_t result = cc_cmp_safe();
        BOOL v9 = (_DWORD)result == 0;
LABEL_10:
        *a5 = v9;
        return result;
      }

      goto LABEL_12;
    }

uint64_t sub_18768EF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v5 = sub_187699F14();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0LL;
  *(_WORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_18769C9B0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = xmmword_18769C9B0;
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  sub_18769A010();
  uint64_t v37 = 0LL;
  int v9 = ccss_sizeof_shamir_share_generator_serialization();
  char v10 = v9;
  if (!v9)
  {
    unint64_t v16 = 0xD00000000000003ALL;
    unint64_t v17 = 0x80000001876A03C0LL;
    int v15 = -7;
    uint64_t v18 = 49LL;
    goto LABEL_5;
  }

  v32[1] = v2;
  uint64_t v33 = v6;
  uint64_t v11 = swift_slowAlloc();
  uint64_t v12 = v37;
  int v13 = ccss_shamir_share_generator_serialize();
  if (v13)
  {
    int v14 = v13;
    MEMORY[0x1895AB038](v11, -1LL, -1LL);
    unint64_t v35 = 0LL;
    unint64_t v36 = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    int v34 = v14;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    int v15 = 0;
    unint64_t v16 = v35;
    unint64_t v17 = v36;
    uint64_t v18 = 56LL;
LABEL_5:
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v19 = 3;
    *(_DWORD *)(v19 + 4) = v15;
    *(_BYTE *)(v19 + 8) = v10;
    *(_DWORD *)(v19 + 12) = 0;
    *(_WORD *)(v19 + 16) = 256;
    *(void *)(v19 + 24) = v18;
    *(void *)(v19 + 32) = 0x293A5F2874696E69LL;
    *(void *)(v19 + 40) = 0xE800000000000000LL;
    *(void *)(v19 + 48) = 0xD00000000000006BLL;
    *(void *)(v19 + 56) = 0x80000001876A1900LL;
    *(void *)(v19 + 64) = v16;
    *(void *)(v19 + 72) = v17;
    swift_willThrow();
    swift_release();
    return sub_18765E614(a2, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  }

  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v8, *MEMORY[0x189606B28], v5);
  sub_187699F08();
  if (v12)
  {
    sub_187699ECC();
    swift_allocObject();
    swift_retain();
    uint64_t v21 = sub_187699E78();
    uint64_t v22 = sub_187696BE4(v21, v12);
    unint64_t v24 = v23;
    swift_release();
  }

  else
  {
    __int128 v25 = (void (*)(uint64_t, void))sub_187699F08();
    v25(v11, 0LL);
    swift_release();
    swift_release();
    uint64_t v22 = 0LL;
    unint64_t v24 = 0xC000000000000000LL;
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v5);
  *(_DWORD *)a2 = 1;
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 17);
  uint64_t v26 = *(void *)(a1 + 32);
  *(_DWORD *)(a2 + 20) = *(void *)(a1 + 24);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 16);
  unint64_t v27 = *(void *)(a1 + 40);
  if (v27 >> 60 == 15) {
    uint64_t v28 = 0LL;
  }
  else {
    uint64_t v28 = v26;
  }
  if (v27 >> 60 == 15) {
    unint64_t v29 = 0xC000000000000000LL;
  }
  else {
    unint64_t v29 = *(void *)(a1 + 40);
  }
  uint64_t v30 = *(void *)(a2 + 32);
  unint64_t v31 = *(void *)(a2 + 40);
  sub_18764642C(v26, v27);
  sub_187623C58(v30, v31);
  *(void *)(a2 + 32) = v28;
  *(void *)(a2 + 40) = v29;
  LOBYTE(v30) = *(_BYTE *)(a1 + 18);
  swift_release();
  *(_BYTE *)(a2 + 48) = v30;
  uint64_t result = sub_187623C58(*(void *)(a2 + 56), *(void *)(a2 + 64));
  *(void *)(a2 + 56) = v22;
  *(void *)(a2 + 64) = v24;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_18768F378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_18769A214();
  uint64_t v30 = *(void *)(v32 - 8);
  MEMORY[0x1895F8858](v32);
  unint64_t v29 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_OWORD *)(a2 + 8) = xmmword_18769C9B0;
  uint64_t v11 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0LL);
  sub_18769A010();
  uint64_t v12 = a2 + *(int *)(v11 + 28);
  int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v13(v12, 1LL, 1LL, v7);
  uint64_t v14 = a2 + *(int *)(v11 + 32);
  int v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  uint64_t v16 = v34;
  unint64_t v31 = v15;
  v15(v14, 1LL, 1LL, v3);
  *(_DWORD *)a2 = 1;
  uint64_t v17 = swift_retain();
  uint64_t v18 = v35;
  sub_18768EF9C(v17, (uint64_t)v10);
  if (v18)
  {
    sub_18765E614(v16, (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator);
    uint64_t v19 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization;
    uint64_t v20 = a2;
  }

  else
  {
    sub_18764D2EC(v12, &qword_18C6DA100);
    sub_187662464((uint64_t)v10, v12, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    v13(v12, 0LL, 1LL, v7);
    uint64_t v21 = type metadata accessor for CKSecretSharing.HybridGenerator();
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    uint64_t v24 = v32;
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v16 + *(int *)(v21 + 20), v32);
    MEMORY[0x1895F8858](v25);
    *(&v29 - 2) = (char *)a2;
    sub_18769A1FC();
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v22, v24);
    MEMORY[0x1895F8858](v26);
    *(&v29 - 2) = (char *)v16;
    sub_187639840( &qword_18C6DA188,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox,  (uint64_t)&unk_18769DB2C);
    uint64_t v27 = (uint64_t)v33;
    sub_18769A100();
    sub_18764D2EC(v14, &qword_18C6DA108);
    sub_187662464( v27,  v14,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    v31(v14, 0LL, 1LL, v3);
    uint64_t v20 = v16;
    uint64_t v19 = (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator;
  }

  return sub_18765E614(v20, v19);
}

uint64_t sub_18768F6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v16[3] = MEMORY[0x1896181D0];
  v16[4] = MEMORY[0x1896071B0];
  v16[0] = a1;
  v16[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v16, MEMORY[0x1896181D0]);
  uint64_t v5 = (_BYTE *)*v4;
  if (*v4 && (uint64_t v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_187696980(v5, v6);
      unint64_t v9 = v14 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_187696A40((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v15 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v8 = sub_187696AB8((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x4000000000000000LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t v10 = *(void *)(a3 + 8);
  unint64_t v11 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v9;
  return sub_187623C58(v10, v11);
}

uint64_t sub_18768F774(uint64_t a1)
{
  uint64_t v2 = sub_18769A268();
  uint64_t v3 = (uint64_t (*)(uint64_t))MEMORY[0x189605A80];
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for CKSecretSharing.HybridGenerator();
  uint64_t v7 = sub_18769A274();
  uint64_t v9 = v8;
  sub_187623C58(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v9;
  uint64_t v10 = sub_18769A280();
  uint64_t v12 = v11;
  sub_187623C58(*(void *)(a1 + 32), *(void *)(a1 + 40));
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v12;
  sub_18769A298();
  uint64_t v19 = v2;
  uint64_t v20 = sub_187639840(&qword_18C6DA6E8, v3, MEMORY[0x189605A68]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, char *, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v6, v2);
  __swift_project_boxed_opaque_existential_1(v18, v19);
  sub_187699ED8();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  uint64_t v14 = v17[1];
  uint64_t v15 = v17[2];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  uint64_t result = sub_187623C58(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_18768F8EC( int64_t a1, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, char a7)
{
  uint64_t v8 = v7;
  *(_WORD *)(v8 + 16) = 257;
  *(_BYTE *)(v8 + 18) = 0;
  sub_187622B80(v8 + 48);
  sub_187622B80((uint64_t)&v30);
  unint64_t v15 = a3;
  int64_t v16 = v30;
  int64_t v17 = v31;
  *(_BYTE *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 17) = a5;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = v15;
  if (v17 < v16)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  BOOL v18 = v16 > a1 || v17 < a1;
  char v19 = v18;
  char v29 = v19;
  if (v18)
  {
    unint64_t v30 = 0LL;
    unint64_t v31 = 0xE000000000000000LL;
    unint64_t v20 = v15;
    sub_18764642C(a2, v15);
    sub_18769A5E0();
    swift_bridgeObjectRelease();
    unint64_t v30 = 0xD000000000000016LL;
    unint64_t v31 = 0x80000001876A0650LL;
    int64_t v32 = v16;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A490();
    int64_t v32 = v17;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A490();
    unint64_t v21 = v30;
    unint64_t v22 = v31;
    sub_187635F00();
    swift_allocError();
    int v24 = 0;
    *(_BYTE *)uint64_t v23 = 1;
    uint64_t v25 = 141LL;
LABEL_17:
    *(_DWORD *)(v23 + 4) = v24;
    *(_BYTE *)(v23 + 8) = v29;
    *(_WORD *)(v23 + 16) = 256;
    *(_DWORD *)(v23 + 12) = 0;
    *(void *)(v23 + 24) = v25;
    *(void *)(v23 + 32) = 0xD00000000000007FLL;
    *(void *)(v23 + 40) = 0x80000001876A2070LL;
    *(void *)(v23 + 48) = 0xD00000000000006BLL;
    *(void *)(v23 + 56) = 0x80000001876A1900LL;
    *(void *)(v23 + 64) = v21;
    *(void *)(v23 + 72) = v22;
    swift_willThrow();
    sub_1876482B4(a2, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1876482B4(*(void *)(v8 + 32), *(void *)(v8 + 40));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
    swift_deallocPartialClassInstance();
    return;
  }

  if ((a7 & 1) == 0) {
    *(_BYTE *)(v8 + 18) = 1;
  }
  unint64_t v20 = v15;
  sub_18764642C(a2, v15);
  ccss_sizeof_parameters_fix();
  uint64_t v26 = swift_slowAlloc();
  *(void *)(v8 + 144) = v26;
  if (a1 < 0) {
    goto LABEL_20;
  }
  if (HIDWORD(a1))
  {
LABEL_21:
    __break(1u);
    return;
  }

  uint64_t v27 = v26;
  int v28 = ccss_shamir_parameters_init();
  if (v28)
  {
    int v24 = v28;
    MEMORY[0x1895AB038](v27, -1LL, -1LL);
    unint64_t v30 = 0LL;
    unint64_t v31 = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    LODWORD(v32) = v24;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    unint64_t v21 = v30;
    unint64_t v22 = v31;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v23 = 3;
    uint64_t v25 = 156LL;
    goto LABEL_17;
  }

  ccss_sizeof_share();
  *(void *)(v8 + 152) = swift_slowAlloc();
  ccss_sizeof_generator();
  *(void *)(v8 + 160) = swift_slowAlloc();
  ccss_shamir_share_init();
  sub_1876482B4(a2, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_18768FCF0()
{
  __int16 v1 = (void *)v0[20];
  memset_s(v1, 8uLL, 0, 8uLL);
  MEMORY[0x1895AB038](v1, -1LL, -1LL);
  sub_1876482B4(v0[4], v0[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CKSecretSharing.HybridGenerator.init(threshold:secret:associatedData:includeADInShares:includeThresholdInShares:ciphersuite:insecureToChangeIncludeMessageEntropy:)@<X0>( int64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, void *a8@<X8>, unsigned __int8 a9)
{
  uint64_t v66 = a2;
  LODWORD(v64) = a7;
  LODWORD(v63) = a6;
  unint64_t v67 = a3;
  unint64_t v61 = a8;
  LODWORD(v62) = a9;
  uint64_t v83 = *MEMORY[0x1895F89C0];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA6E0);
  MEMORY[0x1895F8858](v12);
  __int128 v51 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_18769A2A4();
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v55 = v14;
  MEMORY[0x1895F8858](v14);
  __int128 v50 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = sub_18769A268();
  uint64_t v53 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v56 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_18769A214();
  uint64_t v59 = *(void *)(v17 - 8);
  uint64_t v60 = v17;
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v57 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  unint64_t v22 = (char *)v47 - v21;
  MEMORY[0x1895F8858](v20);
  int v24 = (char *)v47 - v23;
  sub_187699FBC();
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  swift_allocObject();
  sub_18764642C(a4, a5);
  unint64_t v25 = a5;
  uint64_t v26 = v65;
  sub_18768F8EC(a1, a4, a5, v63, v64, v27, v62);
  if (v26)
  {
    sub_1876482B4(a4, a5);
    return sub_187623C58(v66, v67);
  }

  uint64_t v48 = v28;
  int64_t v49 = a1;
  v47[5] = v24;
  v47[6] = v22;
  uint64_t v52 = a4;
  *unint64_t v61 = v28;
  sub_187622B80((uint64_t)&v73);
  int64_t v30 = v73;
  int64_t v31 = v74;
  v47[0] = v76;
  uint64_t v32 = v78;
  v47[1] = v79;
  _DWORD v47[2] = v75;
  uint64_t v33 = v80;
  v47[3] = v81;
  v47[4] = v77;
  uint64_t v62 = v82;
  if (v25 >> 60 != 15) {
    __asm { BR              X10 }
  }

  if (__OFADD__(4LL, 1LL))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v65 = 0LL;
  uint64_t v71 = sub_187696EB8(5LL);
  unint64_t v72 = v34;
  if (qword_18C4C70B0 != -1) {
LABEL_18:
  }
    swift_once();
  v69[0] = off_18C4C70D0;
  v69[1] = off_18C4C70D0;
  if (v31 < v30)
  {
    __break(1u);
    JUMPOUT(0x187691348LL);
  }

  unint64_t v63 = v25;
  uint64_t v64 = v33;
  v47[7] = v32;
  if (v30 <= v49 && v31 >= v49)
  {
    unsigned int v68 = bswap32(v49);
    swift_retain_n();
    uint64_t v35 = sub_18763B6D8((uint64_t)&v68, (uint64_t)v69);
    unint64_t v37 = v36;
    sub_18763CF30(v35, v36);
    sub_187623C58(v35, v37);
    if (v25 >> 60 != 15)
    {
      uint64_t v38 = v52;
      unint64_t v39 = v63;
      sub_187623A28(v52, v63);
      sub_18763CF30(v38, v39);
      sub_1876482B4(v38, v39);
    }

    if (*(_BYTE *)(v48 + 18)) {
      __int128 v40 = &unk_18A080498;
    }
    else {
      __int128 v40 = &unk_18A0804C0;
    }
    uint64_t v41 = sub_187644200((uint64_t)v40);
    unint64_t v43 = v42;
    sub_187623A28(v41, v42);
    sub_18763CF30(v41, v43);
    sub_187623C58(v41, v43);
    sub_187623C58(v41, v43);
    __asm { BR              X10 }
  }

  unint64_t v73 = 0LL;
  unint64_t v74 = 0xE000000000000000LL;
  swift_retain_n();
  sub_18769A5E0();
  swift_bridgeObjectRelease();
  unint64_t v73 = 0xD000000000000016LL;
  unint64_t v74 = 0x80000001876A0650LL;
  int64_t v70 = v30;
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_18769A490();
  int64_t v70 = v31;
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_18769A490();
  unint64_t v44 = v73;
  unint64_t v45 = v74;
  sub_187635F00();
  swift_allocError();
  *(_BYTE *)uint64_t v46 = 1;
  *(_DWORD *)(v46 + 4) = 0;
  *(_BYTE *)(v46 + 8) = 1;
  *(_DWORD *)(v46 + 12) = 0;
  *(_WORD *)(v46 + 16) = 256;
  *(_OWORD *)(v46 + 24) = xmmword_18769F310;
  *(void *)(v46 + 40) = 0x80000001876A1870LL;
  *(void *)(v46 + 48) = 0xD00000000000006BLL;
  *(void *)(v46 + 56) = 0x80000001876A1900LL;
  *(void *)(v46 + 64) = v44;
  *(void *)(v46 + 72) = v45;
  swift_willThrow();
  sub_1876482B4(v52, v63);
  sub_187623C58(v66, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_187623C58(v71, v72);
  return swift_release();
}

uint64_t type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState()
{
  return objc_opt_self();
}

uint64_t sub_187691404()
{
  return sub_1876961B0();
}

uint64_t sub_187691418@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2 - result;
  if (!result) {
    uint64_t v3 = 0LL;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_18769142C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (!ccrng())
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }

  if (!a1) {
    goto LABEL_5;
  }
  uint64_t result = ccss_shamir_share_generator_init();
  *a2 = result;
  return result;
}

uint64_t CKSecretSharing.HybridGenerator.init(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v130 = a3;
  uint64_t v101 = sub_18769A2A4();
  uint64_t v100 = *(void *)(v101 - 8);
  MEMORY[0x1895F8858](v101);
  unint64_t v107 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = sub_18769A268();
  uint64_t v109 = *(void *)(v106 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v106);
  uint64_t v108 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v113 = (char *)&v95 - v8;
  uint64_t v9 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0LL);
  uint64_t v134 = *(void *)(v9 - 8);
  uint64_t v135 = v9;
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  id v126 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  unint64_t v122 = (char *)&v95 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  v118 = (char *)&v95 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  id v114 = (char *)&v95 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  unint64_t v105 = (char *)&v95 - v19;
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v104 = (char *)&v95 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  unint64_t v112 = (char *)&v95 - v23;
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  unint64_t v117 = (char *)&v95 - v25;
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  unint64_t v121 = (char *)&v95 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  v125 = (char *)&v95 - v29;
  MEMORY[0x1895F8858](v28);
  v128 = (char *)&v95 - v30;
  uint64_t v133 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0LL);
  uint64_t v136 = *(void *)(v133 - 8);
  MEMORY[0x1895F8858](v133);
  int64_t v129 = (_DWORD *)((char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA108);
  uint64_t v33 = MEMORY[0x1895F8858](v32);
  uint64_t v132 = (uint64_t)&v95 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = MEMORY[0x1895F8858](v33);
  id v124 = (char *)&v95 - v36;
  uint64_t v37 = MEMORY[0x1895F8858](v35);
  uint64_t v120 = (char *)&v95 - v38;
  uint64_t v39 = MEMORY[0x1895F8858](v37);
  id v116 = (char *)&v95 - v40;
  uint64_t v41 = MEMORY[0x1895F8858](v39);
  unint64_t v111 = (char *)&v95 - v42;
  uint64_t v43 = MEMORY[0x1895F8858](v41);
  int v103 = (char *)&v95 - v44;
  uint64_t v45 = MEMORY[0x1895F8858](v43);
  uint64_t v102 = (char *)&v95 - v46;
  uint64_t v47 = MEMORY[0x1895F8858](v45);
  uint64_t v110 = (char *)&v95 - v48;
  uint64_t v49 = MEMORY[0x1895F8858](v47);
  v115 = (char *)&v95 - v50;
  uint64_t v51 = MEMORY[0x1895F8858](v49);
  int64_t v119 = (char *)&v95 - v52;
  uint64_t v53 = MEMORY[0x1895F8858](v51);
  uint64_t v123 = (char *)&v95 - v54;
  uint64_t v55 = MEMORY[0x1895F8858](v53);
  unint64_t v127 = (char *)&v95 - v56;
  MEMORY[0x1895F8858](v55);
  uint64_t v131 = (uint64_t)&v95 - v57;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA100);
  uint64_t v59 = MEMORY[0x1895F8858](v58);
  unint64_t v61 = (char *)&v95 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = MEMORY[0x1895F8858](v59);
  uint64_t v64 = (char *)&v95 - v63;
  MEMORY[0x1895F8858](v62);
  uint64_t v66 = (char *)&v95 - v65;
  uint64_t v67 = sub_18769A034();
  MEMORY[0x1895F8858](v67);
  uint64_t v68 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0LL);
  MEMORY[0x1895F8858](v68);
  int64_t v70 = (int *)((char *)&v95 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v141 = 0LL;
  __int128 v139 = 0u;
  __int128 v140 = 0u;
  sub_187623A28(a1, a2);
  sub_18769A028();
  sub_187639840( &qword_18C6DA1A8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization,  (uint64_t)&unk_18769DCCC);
  unint64_t v71 = v137;
  sub_18769A0D0();
  if (v71) {
    return sub_187623C58(a1, a2);
  }
  uint64_t v98 = v61;
  uint64_t v73 = v136;
  uint64_t v99 = a1;
  unint64_t v137 = a2;
  int v74 = *v70;
  uint64_t v75 = (uint64_t)v70;
  if (*v70 == 1)
  {
    uint64_t v97 = 0LL;
    uint64_t v76 = (uint64_t)v70 + *(int *)(v68 + 28);
    sub_187662420(v76, (uint64_t)v66, &qword_18C6DA100);
    uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
    uint64_t v78 = v133;
    int v79 = v77(v66, 1LL, v133);
    sub_18764D2EC((uint64_t)v66, &qword_18C6DA100);
    if (v79 != 1)
    {
      uint64_t v136 = v75 + *(int *)(v68 + 32);
      uint64_t v80 = v131;
      sub_187662420(v136, v131, &qword_18C6DA108);
      uint64_t v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
      int v81 = v96(v80, 1LL, v135);
      sub_18764D2EC(v80, &qword_18C6DA108);
      if (v81 != 1)
      {
        sub_187662420(v76, (uint64_t)v64, &qword_18C6DA100);
        int v89 = v77(v64, 1LL, v78);
        uint64_t v90 = v97;
        uint64_t v91 = v129;
        if (v89 == 1)
        {
          *int64_t v129 = 0;
          *((void *)v91 + 1) = 0LL;
          *((_WORD *)v91 + 8) = 1;
          v91[5] = 0;
          *((_BYTE *)v91 + 24) = 0;
          *((_OWORD *)v91 + 2) = xmmword_18769C9B0;
          *((_BYTE *)v91 + 48) = 0;
          *(_OWORD *)(v91 + 14) = xmmword_18769C9B0;
          sub_18769A010();
          sub_18764D2EC((uint64_t)v64, &qword_18C6DA100);
        }

        else
        {
          sub_187662464( (uint64_t)v64,  (uint64_t)v129,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
        }

        unint64_t v92 = v137;
        uint64_t v93 = sub_18769727C((uint64_t)v91);
        if (!v90)
        {
          *uint64_t v130 = v93;
          uint64_t v94 = *(void *)(v75 + 16);
          uint64_t v134 = v75;
          __asm { BR              X9 }
        }

        sub_187638084(v75 + 8);
        uint64_t v87 = v99;
        unint64_t v88 = v92;
        goto LABEL_9;
      }
    }

    *(void *)&__int128 v139 = 0LL;
    *((void *)&v139 + 1) = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    uint64_t v82 = (uint64_t)v98;
    sub_187662420(v76, (uint64_t)v98, &qword_18C6DA100);
    v77((char *)v82, 1LL, v78);
    sub_18764D2EC(v82, &qword_18C6DA100);
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_18769A490();
    uint64_t v83 = v132;
    sub_187662420(v75 + *(int *)(v68 + 32), v132, &qword_18C6DA108);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v83, 1LL, v135);
    sub_18764D2EC(v83, &qword_18C6DA108);
    sub_18769A490();
    swift_bridgeObjectRelease();
    uint64_t v85 = *((void *)&v139 + 1);
    uint64_t v84 = v139;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v86 = 17;
    *(_DWORD *)(v86 + 4) = 0;
    *(_BYTE *)(v86 + 8) = 1;
    *(_DWORD *)(v86 + 12) = 0;
    *(_WORD *)(v86 + 16) = 256;
    *(_OWORD *)(v86 + 24) = xmmword_18769F390;
    *(void *)(v86 + 40) = 0xE800000000000000LL;
    *(void *)(v86 + 48) = 0xD00000000000006BLL;
  }

  else
  {
    *(void *)&__int128 v139 = 0LL;
    *((void *)&v139 + 1) = 0xE000000000000000LL;
    sub_18769A5E0();
    sub_18769A490();
    int v138 = v74;
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    uint64_t v85 = *((void *)&v139 + 1);
    uint64_t v84 = v139;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v86 = 17;
    *(_DWORD *)(v86 + 4) = 0;
    *(_BYTE *)(v86 + 8) = 1;
    *(_DWORD *)(v86 + 12) = 0;
    *(_WORD *)(v86 + 16) = 256;
    *(_OWORD *)(v86 + 24) = xmmword_18769F320;
    *(void *)(v86 + 40) = 0xE800000000000000LL;
    *(void *)(v86 + 48) = 0xD00000000000006BLL;
  }

  *(void *)(v86 + 56) = 0x80000001876A1900LL;
  *(void *)(v86 + 64) = v84;
  *(void *)(v86 + 72) = v85;
  swift_willThrow();
  sub_187638084(v75 + 8);
  uint64_t v87 = v99;
  unint64_t v88 = v137;
LABEL_9:
  sub_187623C58(v87, v88);
  return sub_18765E614(v75, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
}

uint64_t sub_187691FB8()
{
  uint64_t v6 = *(void *)(v0 + 72);
  *(void *)(v5 - 192) = v6;
  if (BYTE6(v2) == v6)
  {
    *(void *)(v5 - 480) = v1;
    *(void *)(v5 - 128) = v3;
    *(void *)(v5 - 120) = v2;
    uint64_t v7 = v0;
    *(void *)(v5 - 208) = type metadata accessor for CKSecretSharing.HybridGenerator();
    *(void *)(v5 - 200) = v7;
    swift_retain();
    sub_187623A28(v3, v2);
    sub_18769A208();
    uint64_t v8 = *(void *)(v5 - 240);
    sub_187662420(*(void *)(v5 - 168), v8, &qword_18C6DA108);
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v5 - 488))(v8, 1LL, *(void *)(v5 - 176)) == 1)
    {
      uint64_t v9 = *(void *)(v5 - 232);
      *(_OWORD *)uint64_t v9 = xmmword_18769C9B0;
      *(_OWORD *)(v9 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v9 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v10 = sub_18764D2EC(v8, &qword_18C6DA108);
    }

    else
    {
      uint64_t v9 = *(void *)(v5 - 232);
      uint64_t v10 = sub_187662464( v8,  v9,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_18769214C + dword_18769332C[*(void *)(v9 + 8) >> 62]))(v10);
  }

  else
  {
    *(void *)(v5 - 128) = 0LL;
    *(void *)(v5 - 120) = 0xE000000000000000LL;
    sub_18769A5E0();
    uint64_t v11 = *(void *)(v5 - 120);
    *(void *)(v5 - 128) = *(void *)(v5 - 128);
    *(void *)(v5 - 120) = v11;
    uint64_t v12 = sub_18769A490();
    return ((uint64_t (*)(uint64_t))((char *)&loc_187692108 + dword_18769331C[v4]))(v12);
  }

uint64_t sub_18769215C()
{
  uint64_t v5 = BYTE6(v0);
  uint64_t v6 = *(void *)(*(void *)(v4 - 200) + 88LL);
  sub_18765E614( *(void *)(v4 - 232),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v5 == v6)
  {
    uint64_t v7 = *(void *)(v4 - 272);
    sub_187662420(v3, v7, &qword_18C6DA108);
    if (v2(v7, 1LL, v1) == 1)
    {
      uint64_t v8 = *(void *)(v4 - 256);
      *(_OWORD *)uint64_t v8 = xmmword_18769C9B0;
      *(_OWORD *)(v8 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v8 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v9 = sub_18764D2EC(v7, &qword_18C6DA108);
    }

    else
    {
      uint64_t v8 = *(void *)(v4 - 256);
      uint64_t v9 = sub_187662464( v7,  v8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_1876923A8 + dword_18769334C[*(void *)(v8 + 8) >> 62]))(v9);
  }

  else
  {
    *(void *)(v4 - 128) = 0LL;
    *(void *)(v4 - 120) = 0xE000000000000000LL;
    sub_18769A5E0();
    uint64_t v10 = *(void *)(v4 - 120);
    *(void *)(v4 - 128) = *(void *)(v4 - 128);
    *(void *)(v4 - 120) = v10;
    sub_18769A490();
    uint64_t v11 = *(void *)(v4 - 264);
    sub_187662420(v3, v11, &qword_18C6DA108);
    if (v2(v11, 1LL, v1) == 1)
    {
      uint64_t v12 = *(void *)(v4 - 248);
      *(_OWORD *)uint64_t v12 = xmmword_18769C9B0;
      *(_OWORD *)(v12 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v12 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v13 = sub_18764D2EC(v11, &qword_18C6DA108);
    }

    else
    {
      uint64_t v12 = *(void *)(v4 - 248);
      uint64_t v13 = sub_187662464( v11,  v12,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_1876923F0 + dword_18769333C[*(void *)(v12 + 8) >> 62]))(v13);
  }

uint64_t sub_1876923B8()
{
  uint64_t v5 = BYTE6(v0);
  uint64_t v6 = *(void *)(*(void *)(v4 - 200) + 88LL);
  sub_18765E614( *(void *)(v4 - 256),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v5 == v6)
  {
    uint64_t v7 = *(void *)(v4 - 304);
    sub_187662420(v3, v7, &qword_18C6DA108);
    if (v2(v7, 1LL, v1) == 1)
    {
      uint64_t v8 = *(void *)(v4 - 288);
      *(_OWORD *)uint64_t v8 = xmmword_18769C9B0;
      *(_OWORD *)(v8 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v8 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v9 = sub_18764D2EC(v7, &qword_18C6DA108);
    }

    else
    {
      uint64_t v8 = *(void *)(v4 - 288);
      uint64_t v9 = sub_187662464( v7,  v8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_18769269C + dword_18769336C[*(void *)(v8 + 40) >> 62]))(v9);
  }

  else
  {
    *(void *)(v4 - 128) = 0LL;
    *(void *)(v4 - 120) = 0xE000000000000000LL;
    sub_18769A5E0();
    uint64_t v10 = *(void *)(v4 - 120);
    *(void *)(v4 - 128) = *(void *)(v4 - 128);
    *(void *)(v4 - 120) = v10;
    sub_18769A490();
    uint64_t v11 = *(void *)(v4 - 296);
    sub_187662420(v3, v11, &qword_18C6DA108);
    if (v2(v11, 1LL, v1) == 1)
    {
      uint64_t v12 = *(void *)(v4 - 280);
      *(_OWORD *)uint64_t v12 = xmmword_18769C9B0;
      *(_OWORD *)(v12 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v12 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v13 = sub_18764D2EC(v11, &qword_18C6DA108);
    }

    else
    {
      uint64_t v12 = *(void *)(v4 - 280);
      uint64_t v13 = sub_187662464( v11,  v12,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_1876926E8 + dword_18769335C[*(void *)(v12 + 8) >> 62]))(v13);
  }

void sub_187692400()
{
  *(void *)(v2 - 152) = BYTE6(v0);
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_18765E614( *(void *)(v2 - 248),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_18769A490();
  uint64_t v3 = *(void *)(*(void *)(v2 - 200) + 88LL);
  swift_release();
  *(void *)(v2 - 152) = v3;
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_187635F00();
  swift_allocError();
  *(_BYTE *)uint64_t v4 = 17;
  *(_DWORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = 0;
  *(_WORD *)(v4 + 16) = 256;
  *(_OWORD *)(v4 + 24) = xmmword_18769F340;
  *(void *)(v4 + 40) = 0xE800000000000000LL;
  *(void *)(v4 + 48) = v1;
  JUMPOUT(0x187692EFCLL);
}

uint64_t sub_1876926AC()
{
  uint64_t v5 = BYTE6(v0);
  uint64_t v6 = *(void *)(*(void *)(v4 - 200) + 96LL);
  sub_18765E614( *(void *)(v4 - 288),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v5 == v6)
  {
    uint64_t v7 = *(void *)(v4 - 336);
    sub_187662420(v3, v7, &qword_18C6DA108);
    if (v2(v7, 1LL, v1) == 1)
    {
      uint64_t v8 = *(void *)(v4 - 320);
      *(_OWORD *)uint64_t v8 = xmmword_18769C9B0;
      *(_OWORD *)(v8 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v8 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v9 = sub_18764D2EC(v7, &qword_18C6DA108);
    }

    else
    {
      uint64_t v8 = *(void *)(v4 - 320);
      uint64_t v9 = sub_187662464( v7,  v8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_18769299C + dword_18769338C[*(void *)(v8 + 40) >> 62]))(v9);
  }

  else
  {
    *(void *)(v4 - 128) = 0LL;
    *(void *)(v4 - 120) = 0xE000000000000000LL;
    sub_18769A5E0();
    uint64_t v10 = *(void *)(v4 - 120);
    *(void *)(v4 - 128) = *(void *)(v4 - 128);
    *(void *)(v4 - 120) = v10;
    sub_18769A490();
    uint64_t v11 = *(void *)(v4 - 328);
    sub_187662420(v3, v11, &qword_18C6DA108);
    if (v2(v11, 1LL, v1) == 1)
    {
      uint64_t v12 = *(void *)(v4 - 312);
      *(_OWORD *)uint64_t v12 = xmmword_18769C9B0;
      *(_OWORD *)(v12 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v12 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      uint64_t v13 = sub_18764D2EC(v11, &qword_18C6DA108);
    }

    else
    {
      uint64_t v12 = *(void *)(v4 - 312);
      uint64_t v13 = sub_187662464( v11,  v12,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    return ((uint64_t (*)(uint64_t))((char *)&loc_1876929E8 + dword_18769337C[*(void *)(v12 + 40) >> 62]))(v13);
  }

void sub_1876926F8()
{
  *(void *)(v2 - 152) = BYTE6(v0);
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_18765E614( *(void *)(v2 - 280),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_18769A490();
  uint64_t v3 = *(void *)(*(void *)(v2 - 200) + 88LL);
  swift_release();
  *(void *)(v2 - 152) = v3;
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_187635F00();
  swift_allocError();
  *(_BYTE *)uint64_t v4 = 17;
  *(_DWORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = 0;
  *(_WORD *)(v4 + 16) = 256;
  *(_OWORD *)(v4 + 24) = xmmword_18769F350;
  *(void *)(v4 + 40) = 0xE800000000000000LL;
  *(void *)(v4 + 48) = v1;
  JUMPOUT(0x187692EFCLL);
}

uint64_t sub_1876929AC()
{
  uint64_t v6 = BYTE6(v0);
  uint64_t v7 = *(void *)(*(void *)(v5 - 200) + 96LL);
  sub_18765E614( *(void *)(v5 - 320),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v6 == v7)
  {
    *(void *)(v5 - 192) = v2;
    swift_release();
    uint64_t v8 = *(void *)(v5 - 168);
    uint64_t v9 = *(void *)(v5 - 376);
    sub_187662420(v8, v9, &qword_18C6DA108);
    if (v3(v9, 1LL, v1) == 1)
    {
      uint64_t v10 = *(void *)(v5 - 360);
      *(_OWORD *)uint64_t v10 = xmmword_18769C9B0;
      *(_OWORD *)(v10 + 16) = xmmword_18769C9B0;
      *(_OWORD *)(v10 + 32) = xmmword_18769C9B0;
      sub_18769A010();
      sub_18764D2EC(v9, &qword_18C6DA108);
    }

    else
    {
      uint64_t v10 = *(void *)(v5 - 360);
      sub_187662464( v9,  v10,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }

    uint64_t v15 = *(void *)(v5 - 352);
    uint64_t v16 = *(void *)v10;
    unint64_t v17 = *(void *)(v10 + 8);
    sub_187623A28(*(void *)v10, v17);
    sub_18765E614( v10,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    *(void *)(v5 - 128) = v16;
    *(void *)(v5 - 120) = v17;
    sub_18764D2A8();
    uint64_t v18 = *(void **)(v5 - 480);
    sub_18769A25C();
    if (!v18)
    {
      uint64_t v19 = v8;
      uint64_t v20 = *(void *)(v5 - 408);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v5 - 384) + 16LL))(*(void *)(v5 - 392), v15, v20);
      uint64_t v21 = v19;
      uint64_t v22 = *(void *)(v5 - 440);
      sub_187662420(v21, v22, &qword_18C6DA108);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 - 488))(v22, 1LL, v1) == 1)
      {
        uint64_t v23 = *(_OWORD **)(v5 - 424);
        *uint64_t v23 = xmmword_18769C9B0;
        v23[1] = xmmword_18769C9B0;
        void v23[2] = xmmword_18769C9B0;
        sub_18769A010();
        sub_18764D2EC(v22, &qword_18C6DA108);
      }

      else
      {
        uint64_t v23 = *(_OWORD **)(v5 - 424);
        sub_187662464( v22,  (uint64_t)v23,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      }

      uint64_t v25 = (uint64_t)v23;
      uint64_t v26 = *((void *)v23 + 2);
      unint64_t v27 = *(void *)(v25 + 24);
      sub_187623A28(v26, v27);
      sub_18765E614( v25,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      *(void *)(v5 - 128) = v26;
      *(void *)(v5 - 120) = v27;
      uint64_t v28 = *(void *)(v5 - 432);
      sub_187662420(*(void *)(v5 - 168), v28, &qword_18C6DA108);
      if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v5 - 488))(v28, 1LL, *(void *)(v5 - 176)) == 1)
      {
        uint64_t v29 = *(void *)(v5 - 416);
        *(_OWORD *)uint64_t v29 = xmmword_18769C9B0;
        *(_OWORD *)(v29 + 16) = xmmword_18769C9B0;
        *(_OWORD *)(v29 + 32) = xmmword_18769C9B0;
        sub_18769A010();
        sub_18764D2EC(v28, &qword_18C6DA108);
      }

      else
      {
        uint64_t v29 = *(void *)(v5 - 416);
        sub_187662464( v28,  v29,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      }

      uint64_t v30 = *(void *)(v5 - 384);
      uint64_t v31 = *(void *)(v29 + 32);
      unint64_t v32 = *(void *)(v29 + 40);
      sub_187623A28(v31, v32);
      sub_18765E614( v29,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      *(void *)(v5 - 152) = v31;
      *(void *)(v5 - 144) = v32;
      uint64_t v33 = *(void *)(v5 - 400);
      sub_18769A28C();
      (*(void (**)(void, uint64_t))(v30 + 8))(*(void *)(v5 - 352), v20);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v5 - 456) + 32LL))( v4 + *(int *)(*(void *)(v5 - 208) + 24LL),  v33,  *(void *)(v5 - 448));
      sub_187638084(*(void *)(v5 - 192));
      sub_187623C58(*(void *)(v5 - 464), *(void *)(v5 - 160));
      JUMPOUT(0x187691E84LL);
    }

    *(void *)(v5 - 128) = v18;
    id v34 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CE8);
    if (swift_dynamicCast())
    {
      *(void *)(v5 - 152) = v18;
      id v35 = v18;
      swift_dynamicCast();
      int v36 = *(_DWORD *)(v5 - 136);
      int v37 = *(unsigned __int8 *)(v5 - 132);
      sub_187635F00();
      swift_allocError();
      *(_BYTE *)uint64_t v38 = 17;
      *(_DWORD *)(v38 + 4) = 0;
      *(_BYTE *)(v38 + 8) = 1;
      *(_BYTE *)(v38 + 16) = v37 != 0;
      *(_DWORD *)(v38 + 12) = v36;
      *(_BYTE *)(v38 + 17) = 0;
      *(_OWORD *)(v38 + 24) = xmmword_18769F380;
      *(void *)(v38 + 40) = 0xE800000000000000LL;
      *(void *)(v38 + 48) = 0xD00000000000006BLL;
      *(void *)(v38 + 56) = 0x80000001876A1900LL;
      *(void *)(v38 + 64) = 0xD00000000000002CLL;
      *(void *)(v38 + 72) = 0x80000001876A1BA0LL;
      swift_willThrow();
    }

    else
    {

      swift_willThrow();
    }

    uint64_t v39 = *(void *)(v5 - 184);
    sub_187638084(*(void *)(v5 - 192));
    sub_187623C58(*(void *)(v5 - 464), *(void *)(v5 - 160));
    sub_18765E614(v39, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
    swift_release();
    JUMPOUT(0x187692F58LL);
  }

  *(void *)(v5 - 128) = 0LL;
  *(void *)(v5 - 120) = 0xE000000000000000LL;
  sub_18769A5E0();
  uint64_t v11 = *(void *)(v5 - 120);
  *(void *)(v5 - 128) = *(void *)(v5 - 128);
  *(void *)(v5 - 120) = v11;
  sub_18769A490();
  uint64_t v12 = *(void *)(v5 - 368);
  sub_187662420(*(void *)(v5 - 168), v12, &qword_18C6DA108);
  if (v3(v12, 1LL, v1) == 1)
  {
    uint64_t v13 = *(void *)(v5 - 344);
    *(_OWORD *)uint64_t v13 = xmmword_18769C9B0;
    *(_OWORD *)(v13 + 16) = xmmword_18769C9B0;
    *(_OWORD *)(v13 + 32) = xmmword_18769C9B0;
    sub_18769A010();
    uint64_t v14 = sub_18764D2EC(v12, &qword_18C6DA108);
  }

  else
  {
    uint64_t v13 = *(void *)(v5 - 344);
    uint64_t v14 = sub_187662464( v12,  v13,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_187692DC4 + dword_18769339C[*(void *)(v13 + 40) >> 62]))(v14);
}

void sub_1876929F8()
{
  *(void *)(v2 - 152) = BYTE6(v0);
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_18765E614( *(void *)(v2 - 312),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_18769A490();
  uint64_t v3 = *(void *)(*(void *)(v2 - 200) + 96LL);
  swift_release();
  *(void *)(v2 - 152) = v3;
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_187635F00();
  swift_allocError();
  *(_BYTE *)uint64_t v4 = 17;
  *(_DWORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = 0;
  *(_WORD *)(v4 + 16) = 256;
  *(_OWORD *)(v4 + 24) = xmmword_18769F360;
  *(void *)(v4 + 40) = 0xE800000000000000LL;
  *(void *)(v4 + 48) = v1;
  JUMPOUT(0x187692EFCLL);
}

void sub_187692DD4()
{
  *(void *)(v1 - 152) = BYTE6(v0);
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_18765E614( *(void *)(v1 - 344),  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_18769A490();
  uint64_t v2 = *(void *)(*(void *)(v1 - 200) + 96LL);
  swift_release();
  *(void *)(v1 - 152) = v2;
  sub_18769A6D0();
  sub_18769A490();
  swift_bridgeObjectRelease();
  sub_187635F00();
  swift_allocError();
  *(_BYTE *)uint64_t v3 = 17;
  *(_DWORD *)(v3 + 4) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_DWORD *)(v3 + 12) = 0;
  *(_WORD *)(v3 + 16) = 256;
  JUMPOUT(0x187692EE8LL);
}

id sub_1876933AC(int a1)
{
  if (!a1)
  {
    sub_187635F00();
    swift_allocError();
    int v6 = 0;
    *(_BYTE *)uint64_t v7 = 1;
    unint64_t v9 = 0x80000001876A0440LL;
    uint64_t v10 = 360LL;
    unint64_t v8 = 0xD000000000000022LL;
    goto LABEL_5;
  }

  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 152);
  int share = ccss_shamir_share_generator_generate_share();
  if (share)
  {
    int v6 = share;
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v7 = 3;
    unint64_t v8 = 0xD000000000000041LL;
    unint64_t v9 = 0x80000001876A04A0LL;
    uint64_t v10 = 364LL;
LABEL_5:
    *(_DWORD *)(v7 + 4) = v6;
    *(_BYTE *)(v7 + 8) = a1 == 0;
    *(_WORD *)(v7 + 16) = 256;
    *(_DWORD *)(v7 + 12) = 0;
    *(void *)(v7 + 24) = v10;
    *(void *)(v7 + 32) = 0xD000000000000029LL;
    *(void *)(v7 + 40) = 0x80000001876A1F20LL;
    *(void *)(v7 + 48) = 0xD00000000000006BLL;
    *(void *)(v7 + 56) = 0x80000001876A1900LL;
    *(void *)(v7 + 64) = v8;
    *(void *)(v7 + 72) = v9;
    return (id)swift_willThrow();
  }

  return objc_msgSend(objc_allocWithZone(MEMORY[0x18960F080]), sel_initWithParams_share_, *(void *)(v3 + 144), v4);
}

void CKSecretSharing.HybridGenerator.generateShare(shareIndex:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_18769A268();
  uint64_t v55 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CKSecretSharing.HybridGenerator();
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)v2;
  uint64_t v14 = *(void *)(*(void *)v2 + 64LL);
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (a1 < 1 || v14 < a1)
  {
    uint64_t v58 = 0LL;
    unint64_t v59 = 0xE000000000000000LL;
    sub_18769A5E0();
    swift_bridgeObjectRelease();
    uint64_t v58 = 0xD00000000000002ALL;
    unint64_t v59 = 0x80000001876A1BD0LL;
    id v56 = *(id *)(v13 + 64);
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    uint64_t v19 = v58;
    unint64_t v20 = v59;
    sub_187635F00();
    uint64_t v4 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v21 = 1;
    *(_DWORD *)(v21 + 4) = 0;
    *(_BYTE *)(v21 + 8) = 1;
    *(_DWORD *)(v21 + 12) = 0;
    *(_WORD *)(v21 + 16) = 256;
    *(_OWORD *)(v21 + 24) = xmmword_18769F3A0;
    *(void *)(v21 + 40) = 0x80000001876A0170LL;
    *(void *)(v21 + 48) = 0xD00000000000006BLL;
    *(void *)(v21 + 56) = 0x80000001876A1900LL;
    *(void *)(v21 + 64) = v19;
    *(void *)(v21 + 72) = v20;
    swift_willThrow();
    goto LABEL_11;
  }

  if (HIDWORD(a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  id v15 = sub_1876933AC(a1);
  if (!v3)
  {
    uint64_t v16 = v15;
    int v17 = *(unsigned __int8 *)(v13 + 17);
    int v54 = v17;
    if (v17 != 1)
    {
      uint64_t v50 = 0LL;
      goto LABEL_20;
    }

    unint64_t v18 = *(void *)(v13 + 24);
    if ((v18 & 0x8000000000000000LL) == 0)
    {
      if (!HIDWORD(v18))
      {
        uint64_t v50 = *(void *)(v13 + 24);
LABEL_20:
        int v29 = *(unsigned __int8 *)(v13 + 16);
        sub_1876976B4(v2, (uint64_t)v12);
        if (v29 == 1 && *(void *)(*(void *)v12 + 40LL) >> 60 != 15LL)
        {
          sub_18765E614( (uint64_t)v12,  (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator);
          uint64_t v30 = *(void *)(*(void *)v2 + 32LL);
          unint64_t v52 = *(void *)(*(void *)v2 + 40LL);
          uint64_t v53 = v30;
          sub_18764642C(v30, v52);
        }

        else
        {
          sub_18765E614( (uint64_t)v12,  (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator);
          unint64_t v52 = 0xF000000000000000LL;
          uint64_t v53 = 0LL;
        }

        unsigned int v51 = objc_msgSend(v16, sel_x);
        id v31 = objc_msgSend(v16, sel_y);
        if (v31)
        {
          unint64_t v32 = v31;
          v54 ^= 1u;
          uint64_t v33 = sub_187699F98();
          uint64_t v48 = v34;
          uint64_t v49 = v33;

          sub_18769A298();
          uint64_t v60 = v7;
          uint64_t v61 = sub_187639840( &qword_18C6DA6E8,  (uint64_t (*)(uint64_t))MEMORY[0x189605A80],  MEMORY[0x189605A68]);
          id v35 = __swift_allocate_boxed_opaque_existential_1(&v58);
          uint64_t v36 = v55;
          (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 16))(v35, v9, v7);
          __swift_project_boxed_opaque_existential_1(&v58, v60);
          sub_187699ED8();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
          id v37 = v56;
          uint64_t v38 = v57;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
          uint64_t v39 = sub_18769A274();
          uint64_t v41 = v40;
          uint64_t v42 = sub_18769A280();
          uint64_t v44 = v43;

          *(void *)a2 = 1LL;
          int v45 = v50;
          *(_DWORD *)(a2 + 8) = v51;
          *(_DWORD *)(a2 + 12) = v45;
          *(_BYTE *)(a2 + 16) = v54;
          uint64_t v46 = v48;
          *(void *)(a2 + 24) = v49;
          *(void *)(a2 + 32) = v46;
          *(void *)(a2 + 40) = v37;
          *(void *)(a2 + 48) = v38;
          *(void *)(a2 + 56) = v39;
          *(void *)(a2 + 64) = v41;
          *(void *)(a2 + 72) = v42;
          *(void *)(a2 + 80) = v44;
          unint64_t v47 = v52;
          *(void *)(a2 + 88) = v53;
          *(void *)(a2 + 96) = v47;
          return;
        }

        goto LABEL_30;
      }

LABEL_29:
      __break(1u);
LABEL_30:
      sub_1876482B4(v53, v52);
      __break(1u);
      return;
    }

__n128 CKSecretSharing.HybridSecretShare.init(shareNumber:threshold:shamirSecretShare:nonce:Ciphertext:Tag:authenticatedData:)@<Q0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10, uint64_t a11, uint64_t a12)
{
  __n128 result = a10;
  *(void *)a9 = 1LL;
  *(_DWORD *)(a9 + 8) = a1;
  *(_DWORD *)(a9 + 12) = a2;
  *(_BYTE *)(a9 + 16) = BYTE4(a2) & 1;
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 56) = a7;
  *(void *)(a9 + 64) = a8;
  *(__n128 *)(a9 + 72) = a10;
  *(void *)(a9 + 88) = a11;
  *(void *)(a9 + 96) = a12;
  return result;
}

void CKSecretSharing.HybridGenerator.generateShares(_:)(uint64_t a1)
{
  if (*(void *)(*(void *)v1 + 24LL) > a1)
  {
    sub_187635F00();
    uint64_t v4 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v3 = 5;
    *(_DWORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 16) = 256;
    __int128 v5 = xmmword_18769F3E0;
LABEL_5:
    *(_OWORD *)(v3 + 24) = v5;
    *(void *)(v3 + 40) = 0x80000001876A0200LL;
    *(void *)(v3 + 48) = 0xD00000000000006BLL;
    *(void *)(v3 + 56) = 0x80000001876A1900LL;
    *(void *)(v3 + 64) = 0LL;
    *(void *)(v3 + 72) = 0xE000000000000000LL;
    swift_willThrow();
LABEL_6:
    id v21 = v4;
    id v6 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CE8);
    if (swift_dynamicCast())
    {

      int v7 = v19;
      if (v20 == 1)
      {
        if (v19 == 1)
        {
          sub_187635F00();
          swift_allocError();
          *(_BYTE *)uint64_t v8 = 1;
          *(_DWORD *)(v8 + 4) = 0;
          *(_BYTE *)(v8 + 8) = 1;
          *(_DWORD *)(v8 + 12) = 0;
          *(_WORD *)(v8 + 16) = 256;
          *(_OWORD *)(v8 + 24) = xmmword_18769F400;
          *(void *)(v8 + 40) = 0x80000001876A0200LL;
          *(void *)(v8 + 48) = 0xD00000000000006BLL;
          *(void *)(v8 + 56) = 0x80000001876A1900LL;
          *(void *)(v8 + 64) = 0xD000000000000049LL;
          *(void *)(v8 + 72) = 0x80000001876A0220LL;
        }

        else
        {
          sub_18762D1DC();
          swift_allocError();
          *(_DWORD *)uint64_t v13 = v7;
          *(_BYTE *)(v13 + 4) = 1;
        }
      }

      else
      {
        uint64_t v17 = 0LL;
        unint64_t v18 = 0xE000000000000000LL;
        sub_18769A5E0();
        sub_18769A490();
        int v15 = v7;
        char v16 = 0;
        sub_18769A664();
        sub_18769A490();
        uint64_t v10 = v17;
        unint64_t v11 = v18;
        sub_187635F00();
        swift_allocError();
        *(_BYTE *)uint64_t v12 = 3;
        *(_DWORD *)(v12 + 4) = v7;
        *(_BYTE *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 12) = 0;
        *(_WORD *)(v12 + 16) = 256;
        *(_OWORD *)(v12 + 24) = xmmword_18769F3F0;
        *(void *)(v12 + 40) = 0x80000001876A0200LL;
        *(void *)(v12 + 48) = 0xD00000000000006BLL;
        *(void *)(v12 + 56) = 0x80000001876A1900LL;
        *(void *)(v12 + 64) = v10;
        *(void *)(v12 + 72) = v11;
      }

      swift_willThrow();
    }

    return;
  }

  if (*(void *)(*(void *)v1 + 64LL) < a1)
  {
    sub_187635F00();
    uint64_t v4 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v3 = 6;
    *(_DWORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 16) = 256;
    __int128 v5 = xmmword_18769F3D0;
    goto LABEL_5;
  }

  if (!(_DWORD)a1)
  {
    __break(1u);
    return;
  }

  uint64_t v9 = MEMORY[0x1895F8858](a1);
  __int128 v14[2] = v1;
  sub_18768ED6C( (void *(*)(void *__return_ptr, int *, uint64_t *))sub_1876976F8,  (uint64_t)v14,  (v9 << 32) | 1);
  uint64_t v4 = v2;
  if (v2) {
    goto LABEL_6;
  }
}

uint64_t CKSecretSharing.HybridGenerator.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for CKSecretSharing.HybridGenerator();
  MEMORY[0x1895F8858](v3);
  __int128 v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1876976B4(v2, (uint64_t)v5);
  sub_18768F378((uint64_t)v5, (uint64_t)v8);
  if (!v1)
  {
    sub_187639840( &qword_18C6DA1A8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization,  (uint64_t)&unk_18769DCCC);
    uint64_t v6 = sub_18769A0DC();
    sub_187638084((uint64_t)(v8 + 8));
    sub_18765E614( (uint64_t)v8,  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  }

  return v6;
}

void CKSecretSharing.HybridReconstructor.init(threshold:associatedData:includeADInShares:includeThresholdInShares:cipherSuite:insecureToChangeIncludeMessageEntropy:)( int64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W6>, void *a7@<X8>)
{
  uint64_t v15 = swift_allocObject();
  sub_18768F8EC(a1, a2, a3, a4, a5, v15, a6);
  if (!v7) {
    *a7 = v16;
  }
}

uint64_t sub_1876940E8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = sub_18769A214();
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  unint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  int64_t v13 = *(void *)(*v2 + 24);
  if (a1 >> 62)
  {
    uint64_t v16 = v8;
    uint64_t v4 = v9;
    sub_18769A52C();
    uint64_t v17 = sub_18769A688();
    swift_bridgeObjectRelease();
    uint64_t v9 = v4;
    uint64_t v8 = v16;
    if (v17 < v13) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10) < v13)
  {
LABEL_3:
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v14 = 1;
    *(_DWORD *)(v14 + 4) = 0;
    *(_BYTE *)(v14 + 8) = 1;
    *(_DWORD *)(v14 + 12) = 0;
    *(_WORD *)(v14 + 16) = 256;
    *(_OWORD *)(v14 + 24) = xmmword_18769F420;
    *(void *)(v14 + 40) = 0x80000001876A1E90LL;
    *(void *)(v14 + 48) = 0xD00000000000006BLL;
    *(void *)(v14 + 56) = 0x80000001876A1900LL;
    *(void *)(v14 + 64) = 0xD00000000000002DLL;
    *(void *)(v14 + 72) = 0x80000001876A1D40LL;
    return swift_willThrow();
  }

  uint64_t v30 = v9;
  uint64_t v31 = v8;
  uint64_t v32 = a2;
  ccss_sizeof_share_bag();
  uint64_t v39 = swift_slowAlloc();
  ccss_shamir_share_bag_init();
  uint64_t v18 = *(void *)(v12 + 24);
  if (v18 < 0) {
    goto LABEL_27;
  }
  uint64_t v33 = v12;
  uint64_t v34 = v11;
  int64_t v35 = v3;
  if (v18)
  {
    unint64_t v19 = 0LL;
    int64_t v13 = a1 & 0xC000000000000001LL;
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    while (v18 != v19)
    {
      if (v13)
      {
        id v20 = (id)MEMORY[0x1895AA3E4](v19, a1);
      }

      else
      {
        if (v19 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_26;
        }
        id v20 = *(id *)(a1 + 8 * v19 + 32);
      }

      id v21 = v20;
      objc_msgSend(v20, sel_share);

      int v22 = ccss_shamir_share_bag_add_share();
      if (v22)
      {
        int v25 = v22;
        uint64_t v36 = 0LL;
        unint64_t v37 = 0xE000000000000000LL;
        sub_18769A5E0();
        sub_18769A490();
        int v38 = v25;
        sub_18769A6D0();
        sub_18769A490();
        swift_bridgeObjectRelease();
        uint64_t v26 = v36;
        unint64_t v27 = v37;
        sub_187635F00();
        swift_allocError();
        *(_BYTE *)uint64_t v28 = 3;
        *(_DWORD *)(v28 + 4) = v25;
        *(_BYTE *)(v28 + 8) = 0;
        *(_DWORD *)(v28 + 12) = 0;
        *(_WORD *)(v28 + 16) = 256;
        *(_OWORD *)(v28 + 24) = xmmword_18769F410;
        *(void *)(v28 + 40) = 0x80000001876A1E90LL;
        *(void *)(v28 + 48) = 0xD00000000000006BLL;
        *(void *)(v28 + 56) = 0x80000001876A1900LL;
        *(void *)(v28 + 64) = v26;
        *(void *)(v28 + 72) = v27;
        swift_willThrow();
        return MEMORY[0x1895AB038](v39, -1LL, -1LL);
      }

      if (v18 == ++v19) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
    goto LABEL_19;
  }

uint64_t sub_187694504(uint64_t result)
{
  if (result)
  {
    int v1 = ccss_shamir_share_bag_recover_secret();
    if (v1)
    {
      int v2 = v1;
      sub_18769A5E0();
      sub_18769A490();
      sub_18769A6D0();
      sub_18769A490();
      swift_bridgeObjectRelease();
      sub_187635F00();
      swift_allocError();
      *(_BYTE *)uint64_t v3 = 3;
      *(_DWORD *)(v3 + 4) = v2;
      *(_BYTE *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 12) = 0;
      *(_WORD *)(v3 + 16) = 256;
      *(_OWORD *)(v3 + 24) = xmmword_18769F430;
      *(void *)(v3 + 40) = 0x80000001876A1E90LL;
      *(void *)(v3 + 48) = 0xD00000000000006BLL;
      *(void *)(v3 + 56) = 0x80000001876A1900LL;
      *(void *)(v3 + 64) = 0LL;
      *(void *)(v3 + 72) = 0xE000000000000000LL;
      return swift_willThrow();
    }

    else
    {
      return sub_18769A208();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void CKSecretSharing.HybridReconstructor.recoverSecret(shares:)(uint64_t a1)
{
  uint64_t v161 = *MEMORY[0x1895F89C0];
  uint64_t v3 = sub_18769A16C();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v154 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v120 - v8;
  MEMORY[0x1895F8858](v7);
  id v155 = (char *)&v120 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6DA6E0);
  MEMORY[0x1895F8858](v11);
  int64_t v13 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_18769A268();
  uint64_t v147 = *(void *)(v14 - 8);
  uint64_t v148 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  unint64_t v149 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v120 - v17;
  uint64_t v19 = sub_18769A2A4();
  uint64_t v150 = *(void *)(v19 - 8);
  uint64_t v151 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v146 = (uint64_t)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v152 = (uint64_t)&v120 - v22;
  uint64_t v23 = sub_18769A214();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v26 = MEMORY[0x1895F8858](v25);
  uint64_t v27 = MEMORY[0x1895F8858](v26);
  uint64_t v28 = MEMORY[0x1895F8858](v27);
  uint64_t v29 = MEMORY[0x1895F8858](v28);
  int64_t v35 = (char *)&v120 - v34;
  uint64_t v36 = *v1;
  uint64_t v37 = *(void *)(a1 + 16);
  if (*(void *)(*v1 + 56) < v37)
  {
    sub_187635F00();
    int v38 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v39 = 6;
    *(_DWORD *)(v39 + 4) = 0;
    *(_BYTE *)(v39 + 8) = 1;
    *(_DWORD *)(v39 + 12) = 0;
    *(_WORD *)(v39 + 16) = 256;
    *(_OWORD *)(v39 + 24) = xmmword_18769F480;
    *(void *)(v39 + 40) = 0x80000001876A1C20LL;
    *(void *)(v39 + 48) = 0xD00000000000006BLL;
    *(void *)(v39 + 56) = 0x80000001876A1900LL;
    *(void *)(v39 + 64) = 0LL;
    *(void *)(v39 + 72) = 0xE000000000000000LL;
    swift_willThrow();
    goto LABEL_25;
  }

  uint64_t v40 = *(void *)(v36 + 24);
  if (v37 < v40)
  {
    sub_187635F00();
    int v38 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v41 = 5;
    *(_DWORD *)(v41 + 4) = 0;
    *(_BYTE *)(v41 + 8) = 1;
    *(_DWORD *)(v41 + 12) = 0;
    *(_WORD *)(v41 + 16) = 256;
    *(_OWORD *)(v41 + 24) = xmmword_18769F470;
    *(void *)(v41 + 40) = 0x80000001876A1C20LL;
    *(void *)(v41 + 48) = 0xD00000000000006BLL;
    *(void *)(v41 + 56) = 0x80000001876A1900LL;
    *(void *)(v41 + 64) = 0xD00000000000002DLL;
    unint64_t v42 = 0x80000001876A1D40LL;
LABEL_5:
    *(void *)(v41 + 72) = v42;
    swift_willThrow();
    goto LABEL_25;
  }

  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v36 + 72);
  uint64_t v44 = *(void *)(v36 + 80);
  uint64_t v45 = *(void *)(v36 + 88);
  uint64_t v46 = *(void *)(v36 + 112);
  uint64_t v47 = *(void *)(v36 + 120);
  uint64_t v49 = *(void *)(v36 + 128);
  unint64_t v48 = *(void *)(v36 + 136);
  unsigned int v156 = bswap32(v40);
  if (!v37)
  {
    __break(1u);
    goto LABEL_41;
  }

  if ((*(_BYTE *)(a1 + 48) & 1) == 0 && v40 != *(_DWORD *)(a1 + 44))
  {
    sub_187635F00();
    int v38 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v41 = 4;
    *(_DWORD *)(v41 + 4) = 0;
    *(_BYTE *)(v41 + 8) = 1;
    *(_DWORD *)(v41 + 12) = 0;
    *(_WORD *)(v41 + 16) = 256;
    *(_OWORD *)(v41 + 24) = xmmword_18769F440;
    *(void *)(v41 + 40) = 0x80000001876A1C20LL;
    *(void *)(v41 + 48) = 0xD00000000000006BLL;
    *(void *)(v41 + 56) = 0x80000001876A1900LL;
    *(void *)(v41 + 64) = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    goto LABEL_5;
  }

  uint64_t v128 = v47;
  uint64_t v129 = v46;
  uint64_t v130 = v43;
  unint64_t v131 = v48;
  uint64_t v132 = v49;
  uint64_t v133 = v45;
  uint64_t v135 = v30;
  uint64_t v139 = v24;
  uint64_t v127 = v44;
  uint64_t v142 = v3;
  uint64_t v136 = v33;
  uint64_t v134 = v32;
  uint64_t v137 = v31;
  __int128 v140 = v35;
  uint64_t v138 = v29;
  uint64_t v144 = sub_18763B6D8((uint64_t)&v156, (uint64_t)&v157);
  unint64_t v145 = v50;
  unint64_t v51 = *(void *)(a1 + 128);
  uint64_t v52 = *(void *)(v36 + 32);
  unint64_t v53 = *(void *)(v36 + 40);
  unint64_t v143 = v9;
  if (v51 >> 60 == 15)
  {
    uint64_t v141 = v4;
    v125 = v13;
    if (v53 >> 60 == 15)
    {
      uint64_t v54 = 0LL;
      unint64_t v53 = 0xC000000000000000LL;
    }

    else
    {
      uint64_t v54 = v52;
      sub_187623A28(v52, v53);
    }
  }

  else
  {
    uint64_t v54 = *(void *)(a1 + 120);
    if (v53 >> 60 == 15)
    {
      v125 = v13;
      uint64_t v141 = v4;
      sub_187623A28(v54, v51);
      unint64_t v53 = v51;
    }

    else
    {
      sub_18764642C(*(void *)(a1 + 120), v51);
      sub_18764642C(v52, v53);
      sub_187638644(v54, v51);
      if ((v55 & 1) == 0)
      {
        sub_187635F00();
        int v38 = (void *)swift_allocError();
        *(_BYTE *)uint64_t v78 = 13;
        *(_DWORD *)(v78 + 4) = 0;
        *(_BYTE *)(v78 + 8) = 1;
        *(_DWORD *)(v78 + 12) = 0;
        *(_WORD *)(v78 + 16) = 256;
        *(_OWORD *)(v78 + 24) = xmmword_18769F450;
        *(void *)(v78 + 40) = 0x80000001876A1C20LL;
        *(void *)(v78 + 48) = 0xD00000000000006BLL;
        *(void *)(v78 + 56) = 0x80000001876A1900LL;
        *(void *)(v78 + 64) = 0LL;
        *(void *)(v78 + 72) = 0xE000000000000000LL;
        swift_willThrow();
        sub_187623C58(v144, v145);
        sub_1876482B4(v52, v53);
        sub_1876482B4(v54, v51);
        uint64_t v9 = v143;
        goto LABEL_24;
      }

      v125 = v13;
      uint64_t v141 = v4;
      sub_1876482B4(v54, v51);
      uint64_t v54 = v52;
    }
  }

  unint64_t v56 = v145;
  __int128 v126 = xmmword_18769C9B0;
  __int128 v160 = xmmword_18769C9B0;
  uint64_t v57 = v144;
  sub_187623A28(v144, v145);
  sub_18763CF30(v57, v56);
  sub_187623C58(v57, v56);
  sub_187623A28(v54, v53);
  sub_18763CF30(v54, v53);
  sub_187623C58(v54, v53);
  if (*(_BYTE *)(v36 + 18)) {
    uint64_t v58 = &unk_18A0804E8;
  }
  else {
    uint64_t v58 = &unk_18A080510;
  }
  uint64_t v59 = v54;
  uint64_t v60 = sub_187644200((uint64_t)v58);
  unint64_t v62 = v61;
  sub_187623A28(v60, v61);
  sub_18763CF30(v60, v62);
  sub_187623C58(v60, v62);
  sub_187623C58(v60, v62);
  sub_18769A52C();
  swift_retain();
  unint64_t v63 = v153;
  uint64_t v64 = sub_187696CC8(a1, a1, v36);
  int v38 = (void *)v63;
  if (v63)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_187623C58(v57, v145);
    sub_187623C58(v59, v53);
    sub_187623C58(v160, *((unint64_t *)&v160 + 1));
    uint64_t v4 = v141;
    uint64_t v9 = v143;
LABEL_24:
    uint64_t v3 = v142;
    goto LABEL_25;
  }

  unint64_t v65 = v64;
  uint64_t v124 = v59;
  unint64_t v153 = v53;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)&__int128 v159 = v36;
  sub_1876940E8(v65, (uint64_t)v140);
  swift_bridgeObjectRelease();
  unint64_t v79 = *(void *)(a1 + 80);
  *(void *)&__int128 v159 = *(void *)(a1 + 72);
  *((void *)&v159 + 1) = v79;
  sub_187623A28(v159, v79);
  unint64_t v80 = sub_18764D2A8();
  sub_18769A25C();
  uint64_t v3 = v142;
  unint64_t v81 = *(void *)(a1 + 96);
  *(void *)&__int128 v159 = *(void *)(a1 + 88);
  *((void *)&v159 + 1) = v81;
  uint64_t v82 = *(void *)(a1 + 104);
  unint64_t v83 = *(void *)(a1 + 112);
  *(void *)&__int128 v158 = v82;
  *((void *)&v158 + 1) = v83;
  sub_187623A28(v159, v81);
  sub_187623A28(v82, v83);
  unint64_t v123 = v80;
  sub_18769A28C();
  __int128 v84 = v160;
  __int128 v159 = v160;
  sub_187623A28(v160, *((unint64_t *)&v160 + 1));
  uint64_t v85 = sub_18769A238();
  unint64_t v87 = v86;
  uint64_t v88 = v85;
  sub_187623C58(v84, *((unint64_t *)&v84 + 1));
  __int128 v159 = v126;
  sub_187623A28(v84, *((unint64_t *)&v84 + 1));
  sub_18763CF30(v84, *((uint64_t *)&v84 + 1));
  sub_187623C58(v84, *((unint64_t *)&v84 + 1));
  sub_187623A28(v88, v87);
  sub_18763CF30(v88, v87);
  *(void *)&__int128 v126 = v88;
  unint64_t v122 = (char *)v87;
  sub_187623C58(v88, v87);
  __int128 v158 = v159;
  sub_187623A28(v159, *((unint64_t *)&v159 + 1));
  sub_18769A208();
  unint64_t v89 = v128;
  sub_18769A52C();
  uint64_t v90 = v129;
  uint64_t v121 = sub_18763B1DC(v129, v89);
  unint64_t v120 = v91;
  *(void *)&__int128 v158 = v121;
  *((void *)&v158 + 1) = v91;
  sub_18769A52C();
  uint64_t v92 = sub_18763B1DC(v90, v89);
  unint64_t v94 = v93;
  *(void *)&__int128 v157 = v92;
  *((void *)&v157 + 1) = v93;
  uint64_t v129 = sub_18769A3C4();
  uint64_t v128 = sub_187639840( (unint64_t *)&qword_18C6D9A88,  (uint64_t (*)(uint64_t))MEMORY[0x189605DF8],  MEMORY[0x189605DE8]);
  uint64_t v95 = v135;
  sub_18769A2BC();
  sub_187623C58(v92, v94);
  sub_187623C58(v121, v120);
  uint64_t v130 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
  uint64_t v96 = v138;
  v130(v95, v138);
  __int128 v158 = v159;
  sub_187623A28(v159, *((unint64_t *)&v159 + 1));
  sub_18769A208();
  unint64_t v97 = v131;
  sub_18769A52C();
  uint64_t v98 = v132;
  uint64_t v121 = sub_18763B1DC(v132, v97);
  unint64_t v120 = v99;
  *(void *)&__int128 v158 = v121;
  *((void *)&v158 + 1) = v99;
  sub_18769A52C();
  uint64_t v100 = sub_18763B1DC(v98, v97);
  unint64_t v102 = v101;
  *(void *)&__int128 v157 = v100;
  *((void *)&v157 + 1) = v101;
  sub_18769A2BC();
  unint64_t v103 = v102;
  uint64_t v104 = v130;
  sub_187623C58(v100, v103);
  sub_187623C58(v121, v120);
  v104(v95, v96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v95, v137, v96);
  sub_187639840(&qword_18C6DA6F8, (uint64_t (*)(uint64_t))MEMORY[0x1896059B0], MEMORY[0x189605998]);
  sub_18769A208();
  uint64_t v106 = v148;
  unint64_t v105 = v149;
  sub_18769A1FC();
  *(void *)&__int128 v158 = v126;
  *((void *)&v158 + 1) = v122;
  uint64_t v107 = v147;
  uint64_t v108 = (uint64_t)v125;
  (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v125, v105, v106);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v108, 0LL, 1LL, v106);
  __int128 v109 = v160;
  __int128 v157 = v160;
  sub_187623A28(v160, *((unint64_t *)&v160 + 1));
  sub_18769A244();
  uint64_t v4 = v141;
  uint64_t v9 = v143;
  uint64_t v18 = v122;
  sub_187623C58(v109, *((unint64_t *)&v109 + 1));
  sub_18764D2EC(v108, &qword_18C6DA6E0);
  a1 = v146;
  if ((sub_187696FA0(v146, v152) & 1) == 0)
  {
LABEL_41:
    sub_187635F00();
    int v38 = (void *)swift_allocError();
    *(_BYTE *)uint64_t v110 = 10;
    *(_DWORD *)(v110 + 4) = 0;
    *(_BYTE *)(v110 + 8) = 1;
    *(_DWORD *)(v110 + 12) = 0;
    *(_WORD *)(v110 + 16) = 256;
    *(_OWORD *)(v110 + 24) = xmmword_18769F460;
    *(void *)(v110 + 40) = 0x80000001876A1C20LL;
    *(void *)(v110 + 48) = 0xD00000000000006BLL;
    *(void *)(v110 + 56) = 0x80000001876A1900LL;
    *(void *)(v110 + 64) = 0xD000000000000043LL;
    *(void *)(v110 + 72) = 0x80000001876A1CF0LL;
    swift_willThrow();
    sub_187623C58(v144, v145);
    sub_187623C58(v126, (unint64_t)v18);
    sub_187623C58(v124, v153);
    unint64_t v111 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
    uint64_t v112 = a1;
    uint64_t v113 = v151;
    v111(v112, v151);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v148);
    uint64_t v114 = v138;
    v115 = v130;
    v130(v136, v138);
    v115(v134, v114);
    v115(v137, v114);
    sub_187623C58(v159, *((unint64_t *)&v159 + 1));
    v111(v152, v113);
    v115((uint64_t)v140, v114);
    sub_187623C58(v160, *((unint64_t *)&v160 + 1));
LABEL_25:
    *(void *)&__int128 v159 = v38;
    id v66 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6D9CE8);
    uint64_t v67 = v155;
    if (swift_dynamicCast())
    {

      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v67, v3);
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      uint64_t v69 = (int *)v154;
      v68(v154, v9, v3);
      int v70 = (*(uint64_t (**)(int *, uint64_t))(v4 + 88))(v69, v3);
      if (v70 == *MEMORY[0x189605850])
      {
        (*(void (**)(int *, uint64_t))(v4 + 96))(v69, v3);
        int v71 = *v69;
        *(void *)&__int128 v160 = 0LL;
        *((void *)&v160 + 1) = 0xE000000000000000LL;
        sub_18769A5E0();
        sub_18769A490();
        sub_18769A664();
        sub_18769A490();
        __int128 v72 = v160;
        sub_187635F00();
        swift_allocError();
        *(_BYTE *)uint64_t v73 = 3;
        *(_DWORD *)(v73 + 4) = v71;
        *(_BYTE *)(v73 + 8) = 0;
        *(_DWORD *)(v73 + 12) = 0;
        *(_WORD *)(v73 + 16) = 256;
        *(_OWORD *)(v73 + 24) = xmmword_18769F4B0;
        *(void *)(v73 + 40) = 0x80000001876A1C20LL;
        *(void *)(v73 + 48) = 0xD00000000000006BLL;
        *(void *)(v73 + 56) = 0x80000001876A1900LL;
        *(_OWORD *)(v73 + 64) = v72;
      }

      else
      {
        if (v70 == *MEMORY[0x189605860])
        {
          sub_187635F00();
          swift_allocError();
          *(_BYTE *)uint64_t v74 = 1;
          *(_DWORD *)(v74 + 4) = 0;
          *(_BYTE *)(v74 + 8) = 1;
          *(_DWORD *)(v74 + 12) = 0;
          *(_WORD *)(v74 + 16) = 256;
          *(_OWORD *)(v74 + 24) = xmmword_18769F4A0;
          *(void *)(v74 + 40) = 0x80000001876A1C20LL;
          *(void *)(v74 + 48) = 0xD00000000000006BLL;
          *(void *)(v74 + 56) = 0x80000001876A1900LL;
          *(void *)(v74 + 64) = 0xD000000000000048LL;
          uint64_t v75 = "Underlying CryptoKit call had incorrect parameter size in recoverSecret?";
        }

        else
        {
          if (v70 != *MEMORY[0x189605858])
          {
            sub_187639840(&qword_18C6DA6F0, (uint64_t (*)(uint64_t))MEMORY[0x189605868], MEMORY[0x189605870]);
            swift_allocError();
            v68(v76, v9, v3);
            swift_willThrow();
            uint64_t v77 = *(void (**)(char *, uint64_t))(v4 + 8);
            v77(v9, v3);
            v77((char *)v69, v3);
            goto LABEL_34;
          }

          sub_187635F00();
          swift_allocError();
          *(_BYTE *)uint64_t v74 = 2;
          *(_DWORD *)(v74 + 4) = 0;
          *(_BYTE *)(v74 + 8) = 1;
          *(_DWORD *)(v74 + 12) = 0;
          *(_WORD *)(v74 + 16) = 256;
          *(_OWORD *)(v74 + 24) = xmmword_18769F490;
          *(void *)(v74 + 40) = 0x80000001876A1C20LL;
          *(void *)(v74 + 48) = 0xD00000000000006BLL;
          *(void *)(v74 + 56) = 0x80000001876A1900LL;
          *(void *)(v74 + 64) = 0xD00000000000005DLL;
          uint64_t v75 = "Error with Authentication in opening  GCM sealed box contained in ciphertext in recoverSecret";
        }

        *(void *)(v74 + 72) = (unint64_t)(v75 - 32) | 0x8000000000000000LL;
      }

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }

void sub_187695D60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    unint64_t v9 = *(void *)(a1 + 32);
    char v10 = *(_BYTE *)(a1 + 16);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
    uint64_t v13 = *(void *)a1;
    char v14 = *(_BYTE *)(a2 + 48);
    uint64_t v34 = *(void *)(a2 + 32);
    int v23 = *(void *)(a2 + 40);
    unint64_t v35 = *(void *)(a2 + 40);
    char v36 = v14;
    __int128 v37 = *(_OWORD *)(a2 + 56);
    __int128 v38 = *(_OWORD *)(a2 + 72);
    __int128 v39 = *(_OWORD *)(a2 + 88);
    __int128 v40 = *(_OWORD *)(a2 + 104);
    __int128 v41 = *(_OWORD *)(a2 + 120);
    uint64_t v24 = v13;
    int v25 = v12;
    int v26 = v11;
    char v27 = v10;
    uint64_t v28 = v8;
    unint64_t v29 = v9;
    __int128 v30 = *(_OWORD *)(a1 + 40);
    __int128 v31 = *(_OWORD *)(a1 + 56);
    __int128 v32 = *(_OWORD *)(a1 + 72);
    __int128 v33 = *(_OWORD *)(a1 + 88);
    if (sub_187696028(&v24))
    {
      uint64_t v15 = *(void *)(a3 + 144);
      id v16 = objc_allocWithZone(MEMORY[0x18960F080]);
      sub_187623A28(v8, v9);
      uint64_t v17 = (void *)sub_187699F80();
      id v18 = objc_msgSend(v16, sel_initWithParams_x_y_, v15, v12, v17);
      sub_187623C58(v8, v9);

      *a5 = v18;
    }

    else
    {
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      sub_18769A5E0();
      sub_18769A490();
      LODWORD(v24) = v23;
      sub_18769A6D0();
      sub_18769A490();
      swift_bridgeObjectRelease();
      sub_18769A490();
      LODWORD(v24) = v12;
      sub_18769A6D0();
      sub_18769A490();
      swift_bridgeObjectRelease();
      sub_18769A490();
      uint64_t v19 = v34;
      unint64_t v20 = v35;
      sub_187635F00();
      uint64_t v21 = swift_allocError();
      *(_BYTE *)uint64_t v22 = 9;
      *(_DWORD *)(v22 + 4) = 0;
      *(_BYTE *)(v22 + 8) = 1;
      *(_DWORD *)(v22 + 12) = 0;
      *(_WORD *)(v22 + 16) = 256;
      *(_OWORD *)(v22 + 24) = xmmword_18769F4C0;
      *(void *)(v22 + 40) = 0x80000001876A1C20LL;
      *(void *)(v22 + 48) = 0xD00000000000006BLL;
      *(void *)(v22 + 56) = 0x80000001876A1900LL;
      *(void *)(v22 + 64) = v19;
      *(void *)(v22 + 72) = v20;
      swift_willThrow();
      *a4 = v21;
    }
  }

  else
  {
    __break(1u);
  }

BOOL sub_187696028(uint64_t *a1)
{
  uint64_t v19 = *a1;
  uint64_t v3 = a1[11];
  unint64_t v2 = a1[12];
  uint64_t v4 = *v1;
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = v1[9];
  uint64_t v10 = v1[10];
  uint64_t v12 = v1[11];
  unint64_t v11 = v1[12];
  sub_187638644(v5, v6);
  if ((v13 & 1) == 0) {
    return 0LL;
  }
  sub_187638644(v7, v8);
  if ((v14 & 1) == 0) {
    return 0LL;
  }
  sub_187638644(v9, v10);
  if ((v15 & 1) == 0) {
    return 0LL;
  }
  if (v11 >> 60 == 15)
  {
    if (v2 >> 60 == 15) {
      return v4 == v19;
    }
    goto LABEL_8;
  }

  if (v2 >> 60 == 15)
  {
LABEL_8:
    sub_18764642C(v12, v11);
    sub_18764642C(v3, v2);
    sub_1876482B4(v12, v11);
    sub_1876482B4(v3, v2);
    return 0LL;
  }

  sub_18764642C(v12, v11);
  sub_18764642C(v3, v2);
  sub_187638644(v12, v11);
  char v18 = v17;
  sub_1876482B4(v3, v2);
  sub_1876482B4(v12, v11);
  if ((v18 & 1) == 0) {
    return 0LL;
  }
  return v4 == v19;
}

uint64_t sub_1876961B0()
{
  return sub_18769A25C();
}

uint64_t CKSecretSharing.HybridSecretShare.version.getter()
{
  return *(void *)v0;
}

uint64_t CKSecretSharing.HybridSecretShare.init(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_18769A034();
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = 0LL;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  sub_187623A28(a1, a2);
  sub_18769A028();
  sub_187639840( &qword_18C6DA4E0,  (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare,  (uint64_t)&unk_18769E8F0);
  sub_18769A0D0();
  if (v3) {
    return sub_187623C58(a1, a2);
  }
  if (*(_DWORD *)v10 == 1)
  {
    sub_187623C58(a1, a2);
    uint64_t v12 = *(int *)(v8 + 48);
    char v13 = &v10[*(int *)(v8 + 44)];
    int v14 = *(_DWORD *)v13;
    LODWORD(v13) = v13[4];
    int v40 = v14;
    int v41 = (int)v13;
    unint64_t v15 = *(void *)&v10[v12 + 8];
    uint64_t v35 = *(void *)&v10[v12];
    unint64_t v36 = v15;
    int v34 = *((_DWORD *)v10 + 1);
    uint64_t v16 = *((void *)v10 + 1);
    unint64_t v32 = *((void *)v10 + 2);
    unint64_t v17 = v32;
    uint64_t v33 = v16;
    uint64_t v18 = *((void *)v10 + 3);
    uint64_t v20 = *((void *)v10 + 5);
    unint64_t v19 = *((void *)v10 + 6);
    uint64_t v22 = *((void *)v10 + 7);
    unint64_t v21 = *((void *)v10 + 8);
    unint64_t v30 = *((void *)v10 + 4);
    unint64_t v31 = v21;
    sub_18764642C(v35, v15);
    sub_187623A28(v16, v17);
    unint64_t v23 = v30;
    sub_187623A28(v18, v30);
    sub_187623A28(v20, v19);
    unint64_t v24 = v31;
    sub_187623A28(v22, v31);
    uint64_t result = sub_18765E614( (uint64_t)v10,  (uint64_t (*)(void))type metadata accessor for CryptoKitSecretSharing_SecretShare);
    *(void *)a3 = 1LL;
    int v25 = v40;
    *(_DWORD *)(a3 + 8) = v34;
    *(_DWORD *)(a3 + 12) = v25;
    *(_BYTE *)(a3 + 16) = v41;
    unint64_t v26 = v32;
    *(void *)(a3 + 24) = v33;
    *(void *)(a3 + 32) = v26;
    *(void *)(a3 + 40) = v18;
    *(void *)(a3 + 48) = v23;
    *(void *)(a3 + 56) = v20;
    *(void *)(a3 + 64) = v19;
    *(void *)(a3 + 72) = v22;
    *(void *)(a3 + 80) = v24;
    unint64_t v27 = v36;
    *(void *)(a3 + 88) = v35;
    *(void *)(a3 + 96) = v27;
  }

  else
  {
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v28 = 15;
    *(_DWORD *)(v28 + 4) = 0;
    *(_BYTE *)(v28 + 8) = 1;
    *(_DWORD *)(v28 + 12) = 0;
    *(_WORD *)(v28 + 16) = 256;
    *(_OWORD *)(v28 + 24) = xmmword_18769F4D0;
    *(void *)(v28 + 40) = 0xE800000000000000LL;
    *(void *)(v28 + 48) = 0xD00000000000006BLL;
    *(void *)(v28 + 56) = 0x80000001876A1900LL;
    *(void *)(v28 + 64) = 0LL;
    *(void *)(v28 + 72) = 0xE000000000000000LL;
    swift_willThrow();
    sub_187623C58(a1, a2);
    return sub_18765E614( (uint64_t)v10,  (uint64_t (*)(void))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  }

  return result;
}

unint64_t Data.init(secretShare:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v5 = *(_DWORD *)(a1 + 8);
  int v31 = *(_DWORD *)(a1 + 12);
  int v32 = v5;
  int v33 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  uint64_t v36 = *(void *)(a1 + 56);
  unint64_t v37 = v8;
  uint64_t v10 = *(void *)(a1 + 72);
  unint64_t v35 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 88);
  unint64_t v41 = *(void *)(a1 + 80);
  unint64_t v12 = *(void *)(a1 + 96);
  *(_OWORD *)(v4 + 24) = xmmword_18769C9B0;
  *(_OWORD *)(v4 + 40) = xmmword_18769C9B0;
  *(_OWORD *)(v4 + 56) = xmmword_18769C9B0;
  sub_18769A010();
  unint64_t v13 = v7;
  uint64_t v14 = v6;
  unint64_t v15 = &v4[*(int *)(v2 + 44)];
  *(_DWORD *)unint64_t v15 = 0;
  void v15[4] = 1;
  uint64_t v38 = v2;
  uint64_t v16 = &v4[*(int *)(v2 + 48)];
  *(_DWORD *)uint64_t v4 = 1;
  *((_DWORD *)v4 + 1) = v32;
  *((void *)v4 + 1) = v6;
  *((void *)v4 + 2) = v7;
  if ((v33 & 1) == 0)
  {
    *(_DWORD *)unint64_t v15 = v31;
    void v15[4] = 0;
  }

  unint64_t v40 = v12;
  if (v12 >> 60 == 15) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = v11;
  }
  uint64_t v34 = v11;
  unint64_t v18 = 0xC000000000000000LL;
  if (v12 >> 60 != 15) {
    unint64_t v18 = v12;
  }
  *(void *)uint64_t v16 = v17;
  *((void *)v16 + 1) = v18;
  uint64_t v20 = v36;
  unint64_t v19 = v37;
  *((void *)v4 + 3) = v9;
  *((void *)v4 + 4) = v19;
  unint64_t v21 = v35;
  *((void *)v4 + 5) = v20;
  *((void *)v4 + 6) = v21;
  unint64_t v22 = v41;
  *((void *)v4 + 7) = v10;
  *((void *)v4 + 8) = v22;
  unint64_t v23 = v13;
  sub_187623A28(v14, v13);
  sub_18764642C(v11, v40);
  sub_187623A28(v9, v19);
  sub_187623A28(v20, v21);
  unint64_t v24 = v41;
  sub_187623A28(v10, v41);
  sub_187623C58(v14, v23);
  sub_187623C58(v9, v19);
  sub_187623C58(v20, v21);
  sub_187623C58(v10, v24);
  sub_1876482B4(v34, v40);
  sub_187639840( &qword_18C6DA4E0,  (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare,  (uint64_t)&unk_18769E8F0);
  uint64_t v25 = v39;
  uint64_t v26 = sub_18769A0DC();
  if (!v25)
  {
    sub_18763AF34(v26, v27);
    unint64_t v19 = v28;
  }

  sub_18765E614( (uint64_t)v4,  (uint64_t (*)(void))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  return v19;
}

_BYTE *sub_187696720@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_187696980(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_187696A40((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_187696AB8((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

BOOL _s16CryptoKitPrivate15CKSecretSharingO17HybridSecretShareV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (*(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    char v7 = *(_BYTE *)(a2 + 16);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 16)) {
        return 0LL;
      }
    }

    else
    {
      if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
        char v7 = 1;
      }
      if ((v7 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v20 = *(void *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v16 = *(void *)(a2 + 88);
    uint64_t v17 = *(void *)(a1 + 88);
    unint64_t v18 = *(void *)(a2 + 96);
    unint64_t v19 = *(void *)(a1 + 96);
    sub_187638644(*(void *)(a1 + 24), *(void *)(a1 + 32));
    if ((v8 & 1) == 0) {
      return 0LL;
    }
    sub_187638644(v4, v3);
    if ((v9 & 1) == 0) {
      return 0LL;
    }
    sub_187638644(v5, v6);
    if ((v10 & 1) == 0) {
      return 0LL;
    }
    sub_187638644(v21, v20);
    if ((v11 & 1) == 0) {
      return 0LL;
    }
    if (v19 >> 60 == 15)
    {
      unint64_t v12 = v18;
      if (v18 >> 60 == 15) {
        return 1LL;
      }
    }

    else
    {
      unint64_t v12 = v18;
      if (v18 >> 60 != 15)
      {
        sub_18764642C(v17, v19);
        sub_18764642C(v16, v18);
        sub_187638644(v17, v19);
        char v14 = v13;
        sub_1876482B4(v16, v18);
        sub_1876482B4(v17, v19);
        return (v14 & 1) != 0;
      }
    }

    sub_18764642C(v17, v19);
    sub_18764642C(v16, v12);
    sub_1876482B4(v17, v19);
    sub_1876482B4(v16, v12);
    return 0LL;
  }

  return v2;
}

uint64_t sub_187696980(_BYTE *__src, _BYTE *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_187696A40(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_187699ECC();
  swift_allocObject();
  uint64_t result = sub_187699E84();
  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    sub_187699F38();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v2;
  }

  return result;
}

uint64_t sub_187696AB8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_187699ECC();
  swift_allocObject();
  uint64_t result = sub_187699E84();
  if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_187696B38( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_187699E90();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_187699EB4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v11 = sub_187699EA8();
  if (v8)
  {
    if (v11 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = v8;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
  }

  a4(&v14, v13, v12);
  return 0LL;
}

uint64_t sub_187696BE4(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0LL;
  }

  if (a2 > 14)
  {
    sub_187699F38();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0LL;
    *(void *)(v3 + 24) = a2;
    return v3;
  }

  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = (_BYTE *)sub_187699E90();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_187699EA8();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      char v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0LL;
      }
      uint64_t v3 = sub_187696980(v4, v8);
      swift_release();
      return v3;
    }

    uint64_t result = sub_187699EB4();
    if (!__OFSUB__(0LL, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_187696CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x18961AFE8];
  if (v4)
  {
    uint64_t v36 = MEMORY[0x18961AFE8];
    sub_18769A640();
    for (unint64_t i = (unint64_t *)(a1 + 64); ; i += 13)
    {
      uint64_t v18 = v4;
      char v7 = *((_BYTE *)i - 16);
      uint64_t v9 = *(i - 1);
      unint64_t v8 = *i;
      uint64_t v11 = i[1];
      unint64_t v10 = i[2];
      uint64_t v13 = i[3];
      unint64_t v12 = i[4];
      uint64_t v14 = i[5];
      uint64_t v15 = i[7];
      unint64_t v19 = i[6];
      unint64_t v20 = i[8];
      v23[0] = *(i - 4);
      v23[1] = *(i - 3);
      char v24 = v7;
      uint64_t v25 = v9;
      unint64_t v26 = v8;
      uint64_t v27 = v11;
      unint64_t v28 = v10;
      uint64_t v29 = v13;
      unint64_t v30 = v12;
      uint64_t v31 = v14;
      unint64_t v32 = v19;
      uint64_t v33 = v15;
      unint64_t v34 = v20;
      sub_187623A28(v9, v8);
      sub_187623A28(v11, v10);
      sub_187623A28(v13, v12);
      sub_187623A28(v14, v19);
      sub_18764642C(v15, v20);
      sub_187695D60((uint64_t)v23, a2, a3, &v22, &v35);
      if (v21) {
        break;
      }
      uint64_t v21 = 0LL;
      sub_187623C58(v9, v8);
      sub_187623C58(v11, v10);
      sub_187623C58(v13, v12);
      sub_187623C58(v14, v19);
      sub_1876482B4(v15, v20);
      sub_18769A628();
      sub_18769A64C();
      sub_18769A658();
      sub_18769A634();
      uint64_t v4 = v18 - 1;
      if (v18 == 1) {
        return v36;
      }
    }

    sub_187623C58(v9, v8);
    sub_187623C58(v11, v10);
    sub_187623C58(v13, v12);
    sub_187623C58(v14, v19);
    sub_1876482B4(v15, v20);
    return swift_release();
  }

  return result;
}

uint64_t sub_187696EB8(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0LL;
    }

    else
    {
      sub_187699ECC();
      swift_allocObject();
      sub_187699EC0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_187699F38();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = 0LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for CKSecretSharing.HybridGenerator()
{
  uint64_t result = qword_18C6DA700;
  if (!qword_18C6DA700) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_187696F88@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_18769142C(a1, a2);
}

uint64_t sub_187696FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v3 = sub_18769A2A4();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  unint64_t v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v47 = (char *)&v44 - v8;
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v44 = (char *)&v44 - v10;
  MEMORY[0x1895F8858](v9);
  unint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = sub_18769A268();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)&v44 - v18;
  sub_18769A298();
  sub_18769A298();
  unint64_t v50 = v17;
  sub_18769A250();
  int v20 = v51;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v17, v13);
  v21(v19, v13);
  uint64_t v45 = v4;
  uint64_t v46 = a1;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  unint64_t v23 = v44;
  v22(v12, a1, v3);
  v22(v23, v49, v3);
  if (v20 == 1)
  {
    uint64_t v24 = sub_18769A274();
    unint64_t v26 = v25;
    uint64_t v27 = sub_18769A274();
    unint64_t v29 = v28;
    sub_187638644(v24, v26);
    char v31 = v30;
    sub_187623C58(v27, v29);
    sub_187623C58(v24, v26);
  }

  else
  {
    char v31 = 0;
  }

  unint64_t v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v23, v3);
  v32(v12, v3);
  uint64_t v33 = v47;
  v22(v47, v46, v3);
  unint64_t v34 = v48;
  v22(v48, v49, v3);
  if ((v31 & 1) != 0)
  {
    uint64_t v35 = sub_18769A280();
    unint64_t v37 = v36;
    uint64_t v38 = sub_18769A280();
    unint64_t v40 = v39;
    sub_187638644(v35, v37);
    char v42 = v41;
    sub_187623C58(v38, v40);
    sub_187623C58(v35, v37);
  }

  else
  {
    char v42 = 0;
  }

  v32(v34, v3);
  v32(v33, v3);
  return v42 & 1;
}

uint64_t sub_18769727C(uint64_t a1)
{
  if (*(_DWORD *)a1 != 1)
  {
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v4 = 17;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_18769F4E0;
    *(void *)(v4 + 40) = 0xEF293A6675626F74LL;
    *(void *)(v4 + 48) = 0xD00000000000006BLL;
    *(void *)(v4 + 56) = 0x80000001876A1900LL;
    *(void *)(v4 + 64) = 0xD00000000000004BLL;
    uint64_t v5 = "Unsupported Version in Protobuf Deserialized HybridSecretSharingSharedState";
    goto LABEL_6;
  }

  uint64_t v2 = v1;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0 && *(void *)(a1 + 8))
  {
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v4 = 17;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_18769F4F0;
    *(void *)(v4 + 40) = 0xEF293A6675626F74LL;
    *(void *)(v4 + 48) = 0xD00000000000006BLL;
    *(void *)(v4 + 56) = 0x80000001876A1900LL;
    *(void *)(v4 + 64) = 0xD000000000000066LL;
    uint64_t v5 = "Unsupported ciphersuite in Protobuf Deserialized HybridSecretSharingSharedState. Must be .aesGcm256128";
LABEL_6:
    *(void *)(v4 + 72) = (unint64_t)(v5 - 32) | 0x8000000000000000LL;
    swift_willThrow();
    goto LABEL_8;
  }

  int64_t v6 = *(unsigned int *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  char v9 = *(_BYTE *)(a1 + 24);
  char v10 = *(_BYTE *)(a1 + 17);
  char v11 = *(_BYTE *)(a1 + 48);
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  swift_allocObject();
  sub_187623A28(v7, v8);
  sub_18768F8EC(v6, v7, v8, v9, v10, v12, v11);
  if (!v1) {
    __asm { BR              X12 }
  }

void sub_1876974B0()
{
  uint64_t v1 = (void *)swift_slowAlloc();
  ccss_shamir_share_init();
  sub_187699FD4();
  swift_release();
  int v2 = ccss_shamir_share_generator_deserialize();
  if (v2)
  {
    int v3 = v2;
    sub_18769A5E0();
    sub_18769A490();
    sub_18769A6D0();
    sub_18769A490();
    swift_bridgeObjectRelease();
    sub_187635F00();
    swift_allocError();
    *(_BYTE *)uint64_t v4 = 3;
    *(_DWORD *)(v4 + 4) = v3;
    *(_BYTE *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_18769F500;
    *(void *)(v4 + 40) = 0xEF293A6675626F74LL;
    *(void *)(v4 + 48) = 0xD00000000000006BLL;
    *(void *)(v4 + 56) = 0x80000001876A1900LL;
    *(void *)(v4 + 64) = 0LL;
    *(void *)(v4 + 72) = 0xE000000000000000LL;
    swift_willThrow();
    memset_s(v1, 8uLL, 0, 8uLL);
    MEMORY[0x1895AB038](v1, -1LL, -1LL);
    sub_18765E614(v0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    swift_release();
  }

  else
  {
    memset_s(v1, 8uLL, 0, 8uLL);
    MEMORY[0x1895AB038](v1, -1LL, -1LL);
    sub_18765E614(v0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  }

  JUMPOUT(0x187697460LL);
}

uint64_t sub_1876976B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKSecretSharing.HybridGenerator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1876976F8(unsigned int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (v3) {
    *a2 = v3;
  }
}

ValueMetadata *type metadata accessor for CKSecretSharing()
{
  return &type metadata for CKSecretSharing;
}

uint64_t *initializeBufferWithCopyOfBuffer for CKSecretSharing.HybridGenerator( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    char v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = sub_18769A214();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_18769A2A4();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return v7;
}

uint64_t destroy for CKSecretSharing.HybridGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_18769A214();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_18769A2A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

void *initializeWithCopy for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18769A214();
  char v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_18769A2A4();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  return a1;
}

void *assignWithCopy for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18769A214();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18769A2A4();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

void *initializeWithTake for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18769A214();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18769A2A4();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  return a1;
}

void *assignWithTake for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18769A214();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18769A2A4();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CKSecretSharing.HybridGenerator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187697B1C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_18769A214();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_18769A2A4();
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t storeEnumTagSinglePayload for CKSecretSharing.HybridGenerator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_187697BC8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_18769A214();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_18769A2A4();
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t sub_187697C64()
{
  uint64_t result = sub_18769A214();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_18769A2A4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridReconstructor()
{
  return &type metadata for CKSecretSharing.HybridReconstructor;
}

uint64_t destroy for CKSecretSharing.HybridSecretShare(void *a1)
{
  uint64_t result = sub_187623C58(a1[9], a1[10]);
  unint64_t v3 = a1[12];
  if (v3 >> 60 != 15) {
    return sub_187623C58(a1[11], v3);
  }
  return result;
}

uint64_t initializeWithCopy for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_187623A28(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  sub_187623A28(v7, v8);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  unint64_t v10 = *(void *)(a2 + 64);
  sub_187623A28(v9, v10);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 72);
  unint64_t v12 = *(void *)(a2 + 80);
  sub_187623A28(v11, v12);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = (uint64_t *)(a2 + 88);
  unint64_t v14 = *(void *)(a2 + 96);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  }

  else
  {
    uint64_t v15 = *v13;
    sub_187623A28(*v13, v14);
    *(void *)(a1 + 88) = v15;
    *(void *)(a1 + 96) = v14;
  }

  return a1;
}

uint64_t assignWithCopy for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_187623A28(v5, v6);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  sub_187623C58(v7, v8);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  sub_187623A28(v9, v10);
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  sub_187623C58(v11, v12);
  uint64_t v13 = *(void *)(a2 + 56);
  unint64_t v14 = *(void *)(a2 + 64);
  sub_187623A28(v13, v14);
  uint64_t v15 = *(void *)(a1 + 56);
  unint64_t v16 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  sub_187623C58(v15, v16);
  uint64_t v17 = *(void *)(a2 + 72);
  unint64_t v18 = *(void *)(a2 + 80);
  sub_187623A28(v17, v18);
  uint64_t v19 = *(void *)(a1 + 72);
  unint64_t v20 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v18;
  sub_187623C58(v19, v20);
  uint64_t v21 = (uint64_t *)(a2 + 88);
  unint64_t v22 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = *v21;
      sub_187623A28(*v21, v22);
      uint64_t v25 = *(void *)(a1 + 88);
      unint64_t v26 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v24;
      *(void *)(a1 + 96) = v22;
      sub_187623C58(v25, v26);
      return a1;
    }

    sub_18767FD8C(a1 + 88);
    goto LABEL_6;
  }

  if (v22 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v21;
    return a1;
  }

  uint64_t v23 = *v21;
  sub_187623A28(*v21, v22);
  *(void *)(a1 + 88) = v23;
  *(void *)(a1 + 96) = v22;
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_187623C58(v5, v6);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_187623C58(v7, v8);
  uint64_t v9 = *(void *)(a1 + 56);
  unint64_t v10 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_187623C58(v9, v10);
  uint64_t v11 = *(void *)(a1 + 72);
  unint64_t v12 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_187623C58(v11, v12);
  uint64_t v13 = (void *)(a2 + 88);
  unint64_t v14 = *(void *)(a1 + 96);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = *(void *)(a2 + 96);
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v13;
      *(void *)(a1 + 96) = v15;
      sub_187623C58(v16, v14);
      return a1;
    }

    sub_18767FD8C(a1 + 88);
  }

  *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for CKSecretSharing.HybridSecretShare(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CKSecretSharing.HybridSecretShare( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0LL;
      *(void *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridSecretShare()
{
  return &type metadata for CKSecretSharing.HybridSecretShare;
}

uint64_t sub_187698138()
{
  return sub_18769A250();
}

uint64_t sub_187698178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_18768EF24(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

unint64_t sub_187698190()
{
  unint64_t result = qword_18C6DA710;
  if (!qword_18C6DA710)
  {
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x1896071A8], MEMORY[0x1896181D0]);
    atomic_store(result, (unint64_t *)&qword_18C6DA710);
  }

  return result;
}

uint64_t sub_1876981D4(uint64_t a1, uint64_t a2)
{
  return sub_18768F6A4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1876981EC(uint64_t a1)
{
  return sub_18768F774(a1);
}

uint64_t sub_187698204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18769821C(a1, a2, a3) & 1;
}

uint64_t sub_18769821C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a2 - a1;
  if (a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v7 != *(void *)(a3 + 16)) {
    return 0LL;
  }
  if (a1) {
    return cc_cmp_safe() == 0;
  }
  __break(1u);
  return result;
}

uint64_t SymmetricKey.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_187628980();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  return *(void *)v0;
}

void static SymmetricKeySize.bits128.getter(void *a1@<X8>)
{
  *a1 = 128LL;
}

CryptoKitPrivate::SymmetricKeySize __swiftcall SymmetricKeySize.init(bitCount:)( CryptoKitPrivate::SymmetricKeySize bitCount)
{
  if (bitCount.bitCount < 1 || (bitCount.bitCount & 7) != 0) {
    __break(1u);
  }
  else {
    v1->bitCount = bitCount.bitCount;
  }
  return bitCount;
}

void static SymmetricKeySize.bits192.getter(void *a1@<X8>)
{
  *a1 = 192LL;
}

void static SymmetricKeySize.bits256.getter(void *a1@<X8>)
{
  *a1 = 256LL;
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1876273F8(a1, a2, *v2);
}

uint64_t SymmetricKey.init(size:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if ((unint64_t)(*a1 + 7) > 0xE)
  {
    if (v3 < 0) {
      uint64_t v3 = *a1 + 7;
    }
    uint64_t result = sub_187628DAC(v3 >> 3);
  }

  else
  {
    if (qword_18C4C70B0 != -1) {
      swift_once();
    }
    uint64_t result = swift_retain();
  }

  *a2 = result;
  return result;
}

uint64_t SymmetricKey.bitCount.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 16);
  if (!(v3 >> 60)) {
    return 8 * v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_18769841C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SymmetricKey.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t static SymmetricKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_18769821C(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

uint64_t sub_187698490(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_18769821C(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

ValueMetadata *type metadata accessor for SymmetricKeySize()
{
  return &type metadata for SymmetricKeySize;
}

ValueMetadata *type metadata accessor for SymmetricKey()
{
  return &type metadata for SymmetricKey;
}

uint64_t _s6ClientVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ClientVMn);
}

void sub_18769851C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_18C4C7850);
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

uint64_t sub_1876985AC()
{
  uint64_t v4 = sub_187623C58(v3, v1);
  return ((uint64_t (*)(uint64_t))((char *)sub_18769861C + 4 * byte_18769F6F4[v0 >> 62]))(v4);
}

char *sub_18769861C()
{
  char v5 = *(_BYTE *)(v4 - 65);
  *(void *)(v4 - 96) = v1;
  uint64_t v6 = (char *)MEMORY[0x18961AFE8];
  if ((v5 & 1) == 0)
  {
    do
    {
      char v8 = *(_BYTE *)(v4 - 66);
      sub_18769A5C8();
      if ((*(_BYTE *)(v4 - 67) & 1) != 0) {
        break;
      }
      char v9 = *(_BYTE *)(v4 - 68);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_18765AF3C(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
      }
      unint64_t v11 = *((void *)v6 + 2);
      unint64_t v10 = *((void *)v6 + 3);
      if (v11 >= v10 >> 1) {
        uint64_t v6 = sub_18765AF3C((char *)(v10 > 1), v11 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v11 + 1;
      v6[v11 + 32] = v9 ^ v8;
      sub_18769A5C8();
    }

    while ((*(_BYTE *)(v4 - 65) & 1) == 0);
  }

  *(_BYTE *)(v2 + *(int *)(*(void *)(v4 - 96) + 56LL)) = 1;
  sub_187698900(v2);
  return v6;
}

void sub_187698788(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1876987D0()
{
  return ((uint64_t (*)(void))((char *)&loc_187698808 + *((int *)qword_1876988F0 + (v0 >> 62))))();
}

uint64_t sub_187698818@<X0>(uint64_t a1@<X8>)
{
  if (a1 != BYTE6(v1))
  {
    __break(1u);
    JUMPOUT(0x1876988D0LL);
  }

  sub_187623A28(v4, v3);
  sub_187623A28(v2, v1);
  sub_18769851C(v4, v3);
  uint64_t v6 = v5;
  sub_187623C58(v4, v3);
  sub_187623C58(v2, v1);
  uint64_t v7 = sub_187644200(v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_187698900(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_18C4C7850);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Hash2FieldErrors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_187698980 + 4 * byte_18769F6F8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1876989A0 + 4 * byte_18769F6FD[v4]))();
  }
}

_BYTE *sub_187698980(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1876989A0(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1876989A8(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1876989B0(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1876989B8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1876989C0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Hash2FieldErrors()
{
  return &type metadata for Hash2FieldErrors;
}

unint64_t sub_1876989E0()
{
  unint64_t result = qword_18C6DA718;
  if (!qword_18C6DA718)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769F764, &type metadata for Hash2FieldErrors);
    atomic_store(result, (unint64_t *)&qword_18C6DA718);
  }

  return result;
}

void HE.EvaluationKeyConfig.encryptionParams.getter(_BYTE *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t HE.EvaluationKeyConfig.galoisElements.getter()
{
  return sub_18769A52C();
}

uint64_t HE.EvaluationKeyConfig.hasRelinKey.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

_BYTE *HE.EvaluationKeyConfig.init(encryptionParams:galoisElements:hasRelinKey:)@<X0>( _BYTE *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = result[1];
  *(_BYTE *)a4 = *result;
  *(_BYTE *)(a4 + 1) = v4;
  *(void *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

uint64_t _s19EvaluationKeyConfigVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19EvaluationKeyConfigVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  sub_18769A52C();
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_18769A52C();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19EvaluationKeyConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HE.EvaluationKeyConfig()
{
  return &type metadata for HE.EvaluationKeyConfig;
}

ValueMetadata *type metadata accessor for OPRF()
{
  return &type metadata for OPRF;
}

uint64_t *sub_187698BFC@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for OPRF.Errors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_187698C54 + 4 * asc_18769F800[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_187698C74 + 4 * byte_18769F805[v4]))();
  }
}

_BYTE *sub_187698C54(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_187698C74(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_187698C7C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_187698C84(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_187698C8C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_187698C94(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OPRF.Errors()
{
  return &type metadata for OPRF.Errors;
}

uint64_t type metadata accessor for OPRF.Ciphersuite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OPRF.Ciphersuite);
}

uint64_t storeEnumTagSinglePayload for OPRF.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_187698D08 + 4 * byte_18769F80F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187698D3C + 4 * byte_18769F80A[v4]))();
}

uint64_t sub_187698D3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187698D44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187698D4CLL);
  }
  return result;
}

uint64_t sub_187698D58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187698D60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_187698D64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187698D6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OPRF.Mode()
{
  return &type metadata for OPRF.Mode;
}

unint64_t sub_187698D8C()
{
  unint64_t result = qword_18C6DA720;
  if (!qword_18C6DA720)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6DA728);
    unint64_t result = MEMORY[0x1895AAF9C](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6DA720);
  }

  return result;
}

void sub_187698DD8(void *a1@<X8>)
{
  *a1 = &unk_18A080538;
}

unint64_t sub_187698DEC()
{
  unint64_t result = qword_18C6DA730;
  if (!qword_18C6DA730)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769F928, &type metadata for OPRF.Mode);
    atomic_store(result, (unint64_t *)&qword_18C6DA730);
  }

  return result;
}

unint64_t sub_187698E34()
{
  unint64_t result = qword_18C6DA738;
  if (!qword_18C6DA738)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769F990, &type metadata for OPRF.Errors);
    atomic_store(result, (unint64_t *)&qword_18C6DA738);
  }

  return result;
}

BOOL sub_187698E78(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 4) == *(unsigned __int8 *)(a1 + 4) && *(_DWORD *)a1 == *(_DWORD *)a2;
}

uint64_t sub_187698E98()
{
  return sub_18769A778();
}

uint64_t sub_187698EF4()
{
  return sub_18769A76C();
}

uint64_t sub_187698F30()
{
  return sub_18769A778();
}

uint64_t LubyRackoff.AES256Encryptor.init(key:blockSizeInBits:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_187698FD0(a1, a2, a3);
}

void LubyRackoff.AES256Encryptor.encrypt(_:)(uint64_t a1, uint64_t a2)
{
}

uint64_t LubyRackoff.AES256Decryptor.init(key:blockSizeInBits:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_187698FD0(a1, a2, a3);
}

uint64_t sub_187698FD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  swift_beginAccess();
  if (a2 > 128 || (a2 & 7) != 0 || *(void *)(v6 + 16) != 32LL)
  {
    __break(1u);
  }

  else
  {
    ccaes_ecb_encrypt_mode();
    uint64_t result = MEMORY[0x1895AABB8]();
    uint64_t v3 = result;
    if (qword_18C4C70B0 == -1) {
      goto LABEL_5;
    }
  }

  uint64_t result = swift_once();
LABEL_5:
  char v8 = off_18C4C70D0;
  uint64_t v16 = off_18C4C70D0;
  if (v3)
  {
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_25;
    }

    swift_retain();
    do
    {
      swift_beginAccess();
      sub_187681724(v16[2], v16[2], 0LL);
      --v3;
    }

    while (v3);
    uint64_t v9 = (uint64_t)v16;
  }

  else
  {
    swift_retain();
    uint64_t v9 = (uint64_t)v8;
  }

  uint64_t result = AESLubyRackoffContextSize();
  if (result)
  {
    uint64_t v10 = result;
    if ((result & 0x8000000000000000LL) == 0)
    {
      swift_retain();
      do
      {
        swift_beginAccess();
        sub_187681724(v8[2], v8[2], 0LL);
        --v10;
      }

      while (v10);
      goto LABEL_17;
    }

void LubyRackoff.AES256Decryptor.decrypt(_:)(uint64_t a1, uint64_t a2)
{
}

void sub_187699268(uint64_t a1, uint64_t a2)
{
  if (!__OFADD__(*v2, 7LL)) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x187699428LL);
}

uint64_t sub_187699440(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *a1 = sub_187681C6C(*a1);
    swift_release();
  }

  swift_beginAccess();
  swift_beginAccess();
  uint64_t result = ccecb_init();
  *a3 = result;
  if (!(_DWORD)result)
  {
    uint64_t result = cclr_aes_init();
    *a3 = result;
  }

  return result;
}

unint64_t sub_187699520()
{
  unint64_t result = qword_18C6DA740;
  if (!qword_18C6DA740)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769FAAC, &type metadata for LubyRackoffError);
    atomic_store(result, (unint64_t *)&qword_18C6DA740);
  }

  return result;
}

uint64_t sub_187699564()
{
  return sub_18769959C();
}

uint64_t sub_187699580()
{
  return sub_18769959C();
}

uint64_t sub_18769959C()
{
  return sub_187699F8C();
}

ValueMetadata *type metadata accessor for LubyRackoff()
{
  return &type metadata for LubyRackoff;
}

ValueMetadata *type metadata accessor for LubyRackoff.AES256Encryptor()
{
  return &type metadata for LubyRackoff.AES256Encryptor;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwxx_0()
{
  return swift_release();
}

void *_s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *_s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_187699780(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LubyRackoff.AES256Decryptor()
{
  return &type metadata for LubyRackoff.AES256Decryptor;
}

uint64_t getEnumTagSinglePayload for LubyRackoffError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LubyRackoffError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_18769985C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_187699864(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LubyRackoffError()
{
  return &type metadata for LubyRackoffError;
}

unint64_t sub_187699880()
{
  unint64_t result = qword_18C6DA748;
  if (!qword_18C6DA748)
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769FA84, &type metadata for LubyRackoffError);
    atomic_store(result, (unint64_t *)&qword_18C6DA748);
  }

  return result;
}

uint64_t sub_1876998C4(uint64_t a1)
{
  return sub_1876998FC(a1, MEMORY[0x1895FA058]);
}

uint64_t sub_1876998E0(uint64_t a1)
{
  return sub_1876998FC(a1, MEMORY[0x1895FA060]);
}

uint64_t sub_1876998FC(uint64_t a1, uint64_t (*a2)(void, void, uint64_t, void))
{
  unsigned int v3 = (_DWORD *)v2[2];
  uint64_t result = a2(v2[3], v2[4], a1, v2[5]);
  *unsigned int v3 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE()
{
  return &type metadata for HE;
}

uint64_t sub_187699944(uint64_t result)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
  uint64_t v3 = result * v2;
  if ((unsigned __int128)(result * (__int128)v2) >> 64 != (result * v2) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v3 > 0)
  {
    uint64_t v4 = sub_18769A550();
    uint64_t v5 = v4;
    *(void *)(v4 + 16) = ((unint64_t)(v3 - 1) >> 3) + 1;
    *(_BYTE *)(v4 + 32) = 0;
    goto LABEL_7;
  }

  if ((unint64_t)(v3 + 7) >= 8)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v5 = MEMORY[0x18961AFE8];
LABEL_7:
  int v6 = cche_coeffs_to_bytes();
  if (v6)
  {
    int v7 = v6;
    swift_bridgeObjectRelease();
    sub_18762D1DC();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    swift_willThrow();
  }

  return v5;
}

uint64_t sub_187699A5C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  if (v1) {
    MEMORY[0x1895AB038](v1, -1LL, -1LL);
  }
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HE.ObjectStorage()
{
  return objc_opt_self();
}

uint64_t sub_187699AE4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    memset_s(*(void **)(v0 + 24), *(void *)(v0 + 32) - v1, 0, *(void *)(v0 + 32) - v1);
    swift_retain();
    MEMORY[0x1895AB038](v1, -1LL, -1LL);
    swift_release();
    swift_release();
    return v0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_187699B58()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HE.ObjectStorageWithZeroize()
{
  return objc_opt_self();
}

char *sub_187699B98(char *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  unint64_t v7 = a5;
  int64_t v10 = *((void *)result + 2);
  size_t v11 = (char *)MEMORY[0x18961AFE8];
  if (v10)
  {
    int v12 = result;
    uint64_t v21 = (char *)MEMORY[0x18961AFE8];
    uint64_t result = sub_18762C588(0LL, v10, 0);
    size_t v11 = v21;
    uint64_t v13 = v12 + 32;
    while (1)
    {
      uint64_t v14 = *(void *)(*(void *)v13 + 24LL);
      if (!v14) {
        break;
      }
      uint64_t v21 = v11;
      unint64_t v16 = *((void *)v11 + 2);
      unint64_t v15 = *((void *)v11 + 3);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = sub_18762C588((char *)(v15 > 1), v16 + 1, 1);
        size_t v11 = v21;
      }

      *((void *)v11 + 2) = v16 + 1;
      *(void *)&v11[8 * v16 + 32] = v14;
      v13 += 8;
      if (!--v10)
      {
        uint64_t v6 = a6;
        unint64_t v7 = a5;
        goto LABEL_8;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_8:
    uint64_t v21 = v11;
    if (*(void *)(*(void *)a2 + 24LL))
    {
      swift_retain();
      sub_18766ACD8(&v21, v7, v6, a3, a3 + 32, &v20);
      uint64_t v17 = v20;
      swift_release();
      swift_bridgeObjectRelease();
      return (char *)v17;
    }
  }

  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ATHM()
{
  return &type metadata for ATHM;
}

uint64_t storeEnumTagSinglePayload for ATHM.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_187699D5C + 4 * byte_18769FB65[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_187699D90 + 4 * asc_18769FB60[v4]))();
}

uint64_t sub_187699D90(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187699D98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x187699DA0LL);
  }
  return result;
}

uint64_t sub_187699DAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x187699DB4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_187699DB8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187699DC0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ATHM.Errors()
{
  return &type metadata for ATHM.Errors;
}

unint64_t sub_187699DE0()
{
  unint64_t result = qword_18C6DA750[0];
  if (!qword_18C6DA750[0])
  {
    unint64_t result = MEMORY[0x1895AAF9C](&unk_18769FBC0, &type metadata for ATHM.Errors);
    atomic_store(result, qword_18C6DA750);
  }

  return result;
}

uint64_t type metadata accessor for ATHM.Ciphersuite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ATHM.Ciphersuite);
}

uint64_t sub_187699E30()
{
  return MEMORY[0x189606160]();
}

uint64_t sub_187699E3C()
{
  return MEMORY[0x189606168]();
}

uint64_t sub_187699E48()
{
  return MEMORY[0x189606170]();
}

uint64_t sub_187699E54()
{
  return MEMORY[0x189606178]();
}

uint64_t sub_187699E60()
{
  return MEMORY[0x189606180]();
}

uint64_t sub_187699E6C()
{
  return MEMORY[0x189606188]();
}

uint64_t sub_187699E78()
{
  return MEMORY[0x1896061F0]();
}

uint64_t sub_187699E84()
{
  return MEMORY[0x189606200]();
}

uint64_t sub_187699E90()
{
  return MEMORY[0x189606208]();
}

uint64_t sub_187699E9C()
{
  return MEMORY[0x189606218]();
}

uint64_t sub_187699EA8()
{
  return MEMORY[0x189606230]();
}

uint64_t sub_187699EB4()
{
  return MEMORY[0x189606240]();
}

uint64_t sub_187699EC0()
{
  return MEMORY[0x189606248]();
}

uint64_t sub_187699ECC()
{
  return MEMORY[0x189606260]();
}

uint64_t sub_187699ED8()
{
  return MEMORY[0x189606318]();
}

uint64_t sub_187699EE4()
{
  return MEMORY[0x189606398]();
}

uint64_t sub_187699EF0()
{
  return MEMORY[0x189606928]();
}

uint64_t sub_187699EFC()
{
  return MEMORY[0x189606AF8]();
}

uint64_t sub_187699F08()
{
  return MEMORY[0x189606B20]();
}

uint64_t sub_187699F14()
{
  return MEMORY[0x189606B48]();
}

uint64_t sub_187699F20()
{
  return MEMORY[0x189606B60]();
}

uint64_t sub_187699F2C()
{
  return MEMORY[0x189606B90]();
}

uint64_t sub_187699F38()
{
  return MEMORY[0x189606BA8]();
}

uint64_t sub_187699F44()
{
  return MEMORY[0x189606BD0]();
}

uint64_t sub_187699F50()
{
  return MEMORY[0x189606BF0]();
}

uint64_t sub_187699F5C()
{
  return MEMORY[0x189606C18]();
}

uint64_t sub_187699F68()
{
  return MEMORY[0x189606C30]();
}

uint64_t sub_187699F74()
{
  return MEMORY[0x189606C38]();
}

uint64_t sub_187699F80()
{
  return MEMORY[0x189606C58]();
}

uint64_t sub_187699F8C()
{
  return MEMORY[0x189606C70]();
}

uint64_t sub_187699F98()
{
  return MEMORY[0x189606CA0]();
}

uint64_t sub_187699FA4()
{
  return MEMORY[0x189606CF8]();
}

uint64_t sub_187699FB0()
{
  return MEMORY[0x189606D00]();
}

uint64_t sub_187699FBC()
{
  return MEMORY[0x189606D08]();
}

uint64_t sub_187699FC8()
{
  return MEMORY[0x189606D28]();
}

uint64_t sub_187699FD4()
{
  return MEMORY[0x189606D38]();
}

uint64_t sub_187699FE0()
{
  return MEMORY[0x18961B560]();
}

uint64_t sub_187699FEC()
{
  return MEMORY[0x18961B568]();
}

uint64_t sub_187699FF8()
{
  return MEMORY[0x18961B580]();
}

uint64_t sub_18769A004()
{
  return MEMORY[0x1896100E8]();
}

uint64_t sub_18769A010()
{
  return MEMORY[0x1896100F0]();
}

uint64_t sub_18769A01C()
{
  return MEMORY[0x189610108]();
}

uint64_t sub_18769A028()
{
  return MEMORY[0x189610138]();
}

uint64_t sub_18769A034()
{
  return MEMORY[0x189610148]();
}

uint64_t sub_18769A040()
{
  return MEMORY[0x189610158]();
}

uint64_t sub_18769A04C()
{
  return MEMORY[0x189610160]();
}

uint64_t sub_18769A058()
{
  return MEMORY[0x189610178]();
}

uint64_t sub_18769A064()
{
  return MEMORY[0x189610188]();
}

uint64_t sub_18769A070()
{
  return MEMORY[0x189610190]();
}

uint64_t sub_18769A07C()
{
  return MEMORY[0x1896101A0]();
}

uint64_t sub_18769A088()
{
  return MEMORY[0x1896101B0]();
}

uint64_t sub_18769A094()
{
  return MEMORY[0x1896101C0]();
}

uint64_t sub_18769A0A0()
{
  return MEMORY[0x1896101E0]();
}

uint64_t sub_18769A0AC()
{
  return MEMORY[0x1896101E8]();
}

uint64_t sub_18769A0B8()
{
  return MEMORY[0x189610200]();
}

uint64_t sub_18769A0C4()
{
  return MEMORY[0x189610210]();
}

uint64_t sub_18769A0D0()
{
  return MEMORY[0x189610218]();
}

uint64_t sub_18769A0DC()
{
  return MEMORY[0x189610228]();
}

uint64_t sub_18769A0E8()
{
  return MEMORY[0x189610240]();
}

uint64_t sub_18769A0F4()
{
  return MEMORY[0x189610250]();
}

uint64_t sub_18769A100()
{
  return MEMORY[0x189610258]();
}

uint64_t sub_18769A10C()
{
  return MEMORY[0x189610260]();
}

uint64_t sub_18769A118()
{
  return MEMORY[0x189610268]();
}

uint64_t sub_18769A124()
{
  return MEMORY[0x189610288]();
}

uint64_t sub_18769A130()
{
  return MEMORY[0x1896102A8]();
}

uint64_t sub_18769A13C()
{
  return MEMORY[0x1896102C0]();
}

uint64_t sub_18769A148()
{
  return MEMORY[0x1896102E8]();
}

uint64_t sub_18769A154()
{
  return MEMORY[0x189610308]();
}

uint64_t sub_18769A160()
{
  return MEMORY[0x189610310]();
}

uint64_t sub_18769A16C()
{
  return MEMORY[0x189605868]();
}

uint64_t sub_18769A178()
{
  return MEMORY[0x1896058E0]();
}

uint64_t sub_18769A184()
{
  return MEMORY[0x1896058E8]();
}

uint64_t sub_18769A190()
{
  return MEMORY[0x1896058F0]();
}

uint64_t sub_18769A19C()
{
  return MEMORY[0x1896058F8]();
}

uint64_t sub_18769A1A8()
{
  return MEMORY[0x189605908]();
}

uint64_t sub_18769A1B4()
{
  return MEMORY[0x189605918]();
}

uint64_t sub_18769A1C0()
{
  return MEMORY[0x189605920]();
}

uint64_t sub_18769A1CC()
{
  return MEMORY[0x189605930]();
}

uint64_t sub_18769A1D8()
{
  return MEMORY[0x189605948]();
}

uint64_t sub_18769A1E4()
{
  return MEMORY[0x189605958]();
}

uint64_t sub_18769A1F0()
{
  return MEMORY[0x189605970]();
}

uint64_t sub_18769A1FC()
{
  return MEMORY[0x1896059A0]();
}

uint64_t sub_18769A208()
{
  return MEMORY[0x1896059A8]();
}

uint64_t sub_18769A214()
{
  return MEMORY[0x1896059B0]();
}

uint64_t sub_18769A220()
{
  return MEMORY[0x189605A30]();
}

uint64_t sub_18769A22C()
{
  return MEMORY[0x189605A40]();
}

uint64_t sub_18769A238()
{
  return MEMORY[0x189605A58]();
}

uint64_t sub_18769A244()
{
  return MEMORY[0x189605A60]();
}

uint64_t sub_18769A250()
{
  return MEMORY[0x189605A70]();
}

uint64_t sub_18769A25C()
{
  return MEMORY[0x189605A78]();
}

uint64_t sub_18769A268()
{
  return MEMORY[0x189605A80]();
}

uint64_t sub_18769A274()
{
  return MEMORY[0x189605A98]();
}

uint64_t sub_18769A280()
{
  return MEMORY[0x189605AA0]();
}

uint64_t sub_18769A28C()
{
  return MEMORY[0x189605AA8]();
}

uint64_t sub_18769A298()
{
  return MEMORY[0x189605AB0]();
}

uint64_t sub_18769A2A4()
{
  return MEMORY[0x189605AB8]();
}

uint64_t sub_18769A2B0()
{
  return MEMORY[0x189605AD8]();
}

uint64_t sub_18769A2BC()
{
  return MEMORY[0x189605AF0]();
}

uint64_t sub_18769A2C8()
{
  return MEMORY[0x189605CB8]();
}

uint64_t sub_18769A2D4()
{
  return MEMORY[0x189605CC0]();
}

uint64_t sub_18769A2E0()
{
  return MEMORY[0x189605CC8]();
}

uint64_t sub_18769A2EC()
{
  return MEMORY[0x189605CF8]();
}

uint64_t sub_18769A2F8()
{
  return MEMORY[0x189605D00]();
}

uint64_t sub_18769A304()
{
  return MEMORY[0x189605D08]();
}

uint64_t sub_18769A310()
{
  return MEMORY[0x189605D10]();
}

uint64_t sub_18769A31C()
{
  return MEMORY[0x189605D18]();
}

uint64_t sub_18769A328()
{
  return MEMORY[0x189605D20]();
}

uint64_t sub_18769A334()
{
  return MEMORY[0x189605D30]();
}

uint64_t sub_18769A340()
{
  return MEMORY[0x189605D38]();
}

uint64_t sub_18769A34C()
{
  return MEMORY[0x189605D40]();
}

uint64_t sub_18769A358()
{
  return MEMORY[0x189605D48]();
}

uint64_t sub_18769A364()
{
  return MEMORY[0x189605D50]();
}

uint64_t sub_18769A370()
{
  return MEMORY[0x189605D58]();
}

uint64_t sub_18769A37C()
{
  return MEMORY[0x189605D70]();
}

uint64_t sub_18769A388()
{
  return MEMORY[0x189605DC0]();
}

uint64_t sub_18769A394()
{
  return MEMORY[0x189605DD0]();
}

uint64_t sub_18769A3A0()
{
  return MEMORY[0x189605DD8]();
}

uint64_t sub_18769A3AC()
{
  return MEMORY[0x189605DE0]();
}

uint64_t sub_18769A3B8()
{
  return MEMORY[0x189605DF0]();
}

uint64_t sub_18769A3C4()
{
  return MEMORY[0x189605DF8]();
}

uint64_t sub_18769A3D0()
{
  return MEMORY[0x189605E10]();
}

uint64_t sub_18769A3DC()
{
  return MEMORY[0x189607050]();
}

uint64_t sub_18769A3E8()
{
  return MEMORY[0x189607060]();
}

uint64_t sub_18769A3F4()
{
  return MEMORY[0x189607078]();
}

uint64_t sub_18769A400()
{
  return MEMORY[0x189617A00]();
}

uint64_t sub_18769A40C()
{
  return MEMORY[0x189617B80]();
}

uint64_t sub_18769A418()
{
  return MEMORY[0x189617B88]();
}

uint64_t sub_18769A424()
{
  return MEMORY[0x189617C20]();
}

uint64_t sub_18769A430()
{
  return MEMORY[0x1896070D8]();
}

uint64_t sub_18769A43C()
{
  return MEMORY[0x189607118]();
}

uint64_t sub_18769A448()
{
  return MEMORY[0x189607150]();
}

uint64_t sub_18769A454()
{
  return MEMORY[0x189607160]();
}

uint64_t sub_18769A460()
{
  return MEMORY[0x189607170]();
}

uint64_t sub_18769A46C()
{
  return MEMORY[0x189607178]();
}

uint64_t sub_18769A478()
{
  return MEMORY[0x189617D78]();
}

uint64_t sub_18769A484()
{
  return MEMORY[0x189617DD8]();
}

uint64_t sub_18769A490()
{
  return MEMORY[0x189617E70]();
}

uint64_t sub_18769A49C()
{
  return MEMORY[0x189617EB0]();
}

uint64_t sub_18769A4A8()
{
  return MEMORY[0x189617EB8]();
}

uint64_t sub_18769A4B4()
{
  return MEMORY[0x189617ED0]();
}

uint64_t sub_18769A4C0()
{
  return MEMORY[0x189617EE0]();
}

uint64_t sub_18769A4CC()
{
  return MEMORY[0x189617F48]();
}

uint64_t sub_18769A4D8()
{
  return MEMORY[0x189618080]();
}

uint64_t sub_18769A4E4()
{
  return MEMORY[0x1896180A8]();
}

uint64_t sub_18769A4F0()
{
  return MEMORY[0x189618248]();
}

uint64_t sub_18769A4FC()
{
  return MEMORY[0x1896182A8]();
}

uint64_t sub_18769A508()
{
  return MEMORY[0x1896182F0]();
}

uint64_t sub_18769A514()
{
  return MEMORY[0x1896182F8]();
}

uint64_t sub_18769A520()
{
  return MEMORY[0x189618308]();
}

uint64_t sub_18769A52C()
{
  return MEMORY[0x1896071F0]();
}

uint64_t sub_18769A538()
{
  return MEMORY[0x189618320]();
}

uint64_t sub_18769A544()
{
  return MEMORY[0x189618358]();
}

uint64_t sub_18769A550()
{
  return MEMORY[0x189618390]();
}

uint64_t sub_18769A55C()
{
  return MEMORY[0x1896183C8]();
}

uint64_t sub_18769A568()
{
  return MEMORY[0x189607210]();
}

uint64_t sub_18769A574()
{
  return MEMORY[0x189607250]();
}

uint64_t sub_18769A580()
{
  return MEMORY[0x189618848]();
}

uint64_t sub_18769A58C()
{
  return MEMORY[0x1896189B8]();
}

uint64_t sub_18769A598()
{
  return MEMORY[0x1896189C8]();
}

uint64_t sub_18769A5A4()
{
  return MEMORY[0x18961BAE0]();
}

uint64_t sub_18769A5B0()
{
  return MEMORY[0x18961BAF0]();
}

uint64_t sub_18769A5BC()
{
  return MEMORY[0x189618AC0]();
}

uint64_t sub_18769A5C8()
{
  return MEMORY[0x189618CB0]();
}

uint64_t sub_18769A5D4()
{
  return MEMORY[0x189618D38]();
}

uint64_t sub_18769A5E0()
{
  return MEMORY[0x1896191E8]();
}

uint64_t sub_18769A5EC()
{
  return MEMORY[0x1896191F0]();
}

uint64_t sub_18769A5F8()
{
  return MEMORY[0x1896192F0]();
}

uint64_t sub_18769A604()
{
  return MEMORY[0x189619300]();
}

uint64_t sub_18769A610()
{
  return MEMORY[0x189619308]();
}

uint64_t sub_18769A61C()
{
  return MEMORY[0x189619440]();
}

uint64_t sub_18769A628()
{
  return MEMORY[0x1896194A0]();
}

uint64_t sub_18769A634()
{
  return MEMORY[0x1896194C0]();
}

uint64_t sub_18769A640()
{
  return MEMORY[0x1896194D8]();
}

uint64_t sub_18769A64C()
{
  return MEMORY[0x1896194F8]();
}

uint64_t sub_18769A658()
{
  return MEMORY[0x189619500]();
}

uint64_t sub_18769A664()
{
  return MEMORY[0x189619660]();
}

uint64_t sub_18769A670()
{
  return MEMORY[0x189619888]();
}

uint64_t sub_18769A67C()
{
  return MEMORY[0x1896198A8]();
}

uint64_t sub_18769A688()
{
  return MEMORY[0x189619930]();
}

uint64_t sub_18769A694()
{
  return MEMORY[0x189619938]();
}

uint64_t sub_18769A6A0()
{
  return MEMORY[0x189619948]();
}

uint64_t sub_18769A6AC()
{
  return MEMORY[0x189619950]();
}

uint64_t sub_18769A6B8()
{
  return MEMORY[0x189619960]();
}

uint64_t sub_18769A6C4()
{
  return MEMORY[0x189619A40]();
}

uint64_t sub_18769A6D0()
{
  return MEMORY[0x189619CC8]();
}

uint64_t sub_18769A6DC()
{
  return MEMORY[0x18961A050]();
}

uint64_t sub_18769A6E8()
{
  return MEMORY[0x18961A120]();
}

uint64_t sub_18769A6F4()
{
  return MEMORY[0x18961A2C8]();
}

uint64_t sub_18769A700()
{
  return MEMORY[0x18961A3A0]();
}

uint64_t sub_18769A70C()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t sub_18769A718()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t sub_18769A724()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t sub_18769A730()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t sub_18769A73C()
{
  return MEMORY[0x18961A668]();
}

uint64_t sub_18769A748()
{
  return MEMORY[0x18961A670]();
}

uint64_t sub_18769A754()
{
  return MEMORY[0x18961A680]();
}

uint64_t sub_18769A760()
{
  return MEMORY[0x18961A690]();
}

uint64_t sub_18769A76C()
{
  return MEMORY[0x18961A6A8]();
}

uint64_t sub_18769A778()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t AESLubyRackoffContextSize()
{
  return MEMORY[0x18960F068]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1895F82D0](data, *(void *)&len, md);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1896030F0](cf);
}

uint64_t SPAKE2Alishaz0Size()
{
  return MEMORY[0x18960F090]();
}

uint64_t SPAKE2CtxSize()
{
  return MEMORY[0x18960F098]();
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x18960B420](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x18960B430](key, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x18960B4C8](keyData, attributes, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x18960B5F8](rnd, count, bytes);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x18961B058]();
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1895F9750]();
}

uint64_t ccaes_ecb_encrypt_mode()
{
  return MEMORY[0x1895F9788]();
}

uint64_t ccapsic_client_check_intersect_response()
{
  return MEMORY[0x1895F97B0]();
}

uint64_t ccapsic_client_generate_match_response()
{
  return MEMORY[0x1895F97B8]();
}

uint64_t ccapsic_client_init()
{
  return MEMORY[0x1895F97C0]();
}

uint64_t ccapsic_client_state_sizeof()
{
  return MEMORY[0x1895F97C8]();
}

uint64_t ccder_decode_rsa_pub()
{
  return MEMORY[0x1895F9948]();
}

uint64_t ccder_decode_rsa_pub_n()
{
  return MEMORY[0x1895F9950]();
}

uint64_t ccder_encode_rsa_pub()
{
  return MEMORY[0x1895F99B0]();
}

uint64_t ccder_encode_rsa_pub_size()
{
  return MEMORY[0x1895F99B8]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1895F9AE0]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1895F9AE8]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1895F9B10]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1895F9B18]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1895F9B20]();
}

uint64_t ccec_validate_pub()
{
  return MEMORY[0x1895F9C38]();
}

uint64_t ccec_x963_import_pub()
{
  return MEMORY[0x1895F9C68]();
}

uint64_t ccecb_init()
{
  return MEMORY[0x1895F9C80]();
}

uint64_t cche_ciphertext_coeff_compose()
{
  return MEMORY[0x1895F9DA8]();
}

uint64_t cche_ciphertext_coeff_decompose_nptexts()
{
  return MEMORY[0x1895F9DB0]();
}

uint64_t cche_ciphertext_fresh_correction_factor()
{
  return MEMORY[0x1895F9DB8]();
}

uint64_t cche_ciphertext_fresh_npolys()
{
  return MEMORY[0x1895F9DC0]();
}

uint64_t cche_ciphertext_galois_elt_rotate_rows_right()
{
  return MEMORY[0x1895F9DC8]();
}

uint64_t cche_ciphertext_galois_elt_swap_columns()
{
  return MEMORY[0x1895F9DD0]();
}

uint64_t cche_ciphertext_sizeof()
{
  return MEMORY[0x1895F9DD8]();
}

uint64_t cche_coeffs_to_bytes()
{
  return MEMORY[0x1895F9DE0]();
}

uint64_t cche_crt_compose()
{
  return MEMORY[0x1895F9DE8]();
}

uint64_t cche_decode_poly_uint64()
{
  return MEMORY[0x1895F9DF0]();
}

uint64_t cche_decode_simd_int64()
{
  return MEMORY[0x1895F9DF8]();
}

uint64_t cche_decode_simd_uint64()
{
  return MEMORY[0x1895F9E00]();
}

uint64_t cche_decrypt()
{
  return MEMORY[0x1895F9E08]();
}

uint64_t cche_deserialize_ciphertext_coeff()
{
  return MEMORY[0x1895F9E10]();
}

uint64_t cche_deserialize_seeded_ciphertext_coeff()
{
  return MEMORY[0x1895F9E18]();
}

uint64_t cche_encode_poly_uint64()
{
  return MEMORY[0x1895F9E20]();
}

uint64_t cche_encode_simd_int64()
{
  return MEMORY[0x1895F9E28]();
}

uint64_t cche_encode_simd_reduced_int64()
{
  return MEMORY[0x1895F9E30]();
}

uint64_t cche_encode_simd_uint64()
{
  return MEMORY[0x1895F9E38]();
}

uint64_t cche_encrypt_symmetric()
{
  return MEMORY[0x1895F9E40]();
}

uint64_t cche_encryption_params_coefficient_moduli()
{
  return MEMORY[0x1895F9E48]();
}

uint64_t cche_encryption_params_coefficient_nmoduli()
{
  return MEMORY[0x1895F9E50]();
}

uint64_t cche_encryption_params_plaintext_modulus()
{
  return MEMORY[0x1895F9E58]();
}

uint64_t cche_encryption_params_polynomial_degree()
{
  return MEMORY[0x1895F9E60]();
}

uint64_t cche_galois_key_generate()
{
  return MEMORY[0x1895F9E68]();
}

uint64_t cche_galois_key_save()
{
  return MEMORY[0x1895F9E70]();
}

uint64_t cche_galois_key_sizeof()
{
  return MEMORY[0x1895F9E78]();
}

uint64_t cche_param_ctx_ciphertext_ctx_nmoduli()
{
  return MEMORY[0x1895F9E80]();
}

uint64_t cche_param_ctx_init()
{
  return MEMORY[0x1895F9E88]();
}

uint64_t cche_param_ctx_key_ctx_nmoduli()
{
  return MEMORY[0x1895F9E90]();
}

uint64_t cche_param_ctx_key_ctx_poly_nbytes()
{
  return MEMORY[0x1895F9E98]();
}

uint64_t cche_param_ctx_plaintext_modulus()
{
  return MEMORY[0x1895F9EA0]();
}

uint64_t cche_param_ctx_plaintext_modulus_inverse()
{
  return MEMORY[0x1895F9EA8]();
}

uint64_t cche_param_ctx_polynomial_degree()
{
  return MEMORY[0x1895F9EB0]();
}

uint64_t cche_param_ctx_sizeof()
{
  return MEMORY[0x1895F9EB8]();
}

uint64_t cche_plaintext_sizeof()
{
  return MEMORY[0x1895F9EC0]();
}

uint64_t cche_relin_key_generate()
{
  return MEMORY[0x1895F9EC8]();
}

uint64_t cche_relin_key_save()
{
  return MEMORY[0x1895F9ED0]();
}

uint64_t cche_relin_key_sizeof()
{
  return MEMORY[0x1895F9ED8]();
}

uint64_t cche_rng_seed_sizeof()
{
  return MEMORY[0x1895F9EE0]();
}

uint64_t cche_secret_key_generate_from_seed()
{
  return MEMORY[0x1895F9EE8]();
}

uint64_t cche_secret_key_sizeof()
{
  return MEMORY[0x1895F9EF0]();
}

uint64_t cche_serialize_seeded_ciphertext_coeff()
{
  return MEMORY[0x1895F9EF8]();
}

uint64_t cche_serialize_seeded_ciphertext_coeff_nbytes()
{
  return MEMORY[0x1895F9F00]();
}

uint64_t cchkdf()
{
  return MEMORY[0x1895F9F08]();
}

uint64_t cckem_decapsulate()
{
  return MEMORY[0x1895F9FA0]();
}

uint64_t cckem_encapsulate()
{
  return MEMORY[0x1895F9FA8]();
}

uint64_t cckem_encapsulated_key_nbytes_info()
{
  return MEMORY[0x1895F9FB8]();
}

uint64_t cckem_export_privkey()
{
  return MEMORY[0x1895F9FC0]();
}

uint64_t cckem_export_pubkey()
{
  return MEMORY[0x1895F9FC8]();
}

uint64_t cckem_full_ctx_init()
{
  return MEMORY[0x1895F9FD0]();
}

uint64_t cckem_generate_key()
{
  return MEMORY[0x1895F9FD8]();
}

uint64_t cckem_import_privkey()
{
  return MEMORY[0x1895F9FE0]();
}

uint64_t cckem_import_pubkey()
{
  return MEMORY[0x1895F9FE8]();
}

uint64_t cckem_kyber768()
{
  return MEMORY[0x1895F9FF8]();
}

uint64_t cckem_privkey_nbytes_info()
{
  return MEMORY[0x1895FA008]();
}

uint64_t cckem_pub_ctx_init()
{
  return MEMORY[0x1895FA010]();
}

uint64_t cckem_pubkey_nbytes_info()
{
  return MEMORY[0x1895FA020]();
}

uint64_t cckem_public_ctx()
{
  return MEMORY[0x1895FA028]();
}

uint64_t cckem_shared_key_nbytes_info()
{
  return MEMORY[0x1895FA038]();
}

uint64_t cckem_sizeof_full_ctx()
{
  return MEMORY[0x1895FA040]();
}

uint64_t cckem_sizeof_pub_ctx()
{
  return MEMORY[0x1895FA048]();
}

uint64_t cclr_aes_init()
{
  return MEMORY[0x1895FA050]();
}

uint64_t ccrng()
{
  return MEMORY[0x1895FA118]();
}

uint64_t ccrng_generate_bridge()
{
  return MEMORY[0x18960F0A0]();
}

uint64_t ccrsa_ctx_public()
{
  return MEMORY[0x1895FA138]();
}

uint64_t ccrsa_generate_key()
{
  return MEMORY[0x1895FA1A8]();
}

uint64_t ccrsabssa_blind_message()
{
  return MEMORY[0x1895FA228]();
}

uint64_t ccrsabssa_sign_blinded_message()
{
  return MEMORY[0x1895FA248]();
}

uint64_t ccrsabssa_unblind_signature()
{
  return MEMORY[0x1895FA250]();
}

uint64_t ccscrypt()
{
  return MEMORY[0x1895FA258]();
}

uint64_t ccscrypt_storage_size()
{
  return MEMORY[0x1895FA260]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t ccspake_cp_256()
{
  return MEMORY[0x1895FA2A0]();
}

uint64_t ccspake_cp_256_rfc()
{
  return MEMORY[0x1895FA2A8]();
}

uint64_t ccspake_generate_L()
{
  return MEMORY[0x1895FA2B0]();
}

uint64_t ccspake_kex_generate()
{
  return MEMORY[0x1895FA2B8]();
}

uint64_t ccspake_kex_process()
{
  return MEMORY[0x1895FA2C0]();
}

uint64_t ccspake_mac_compute()
{
  return MEMORY[0x1895FA2C8]();
}

uint64_t ccspake_mac_hkdf_cmac_aes128_sha256()
{
  return MEMORY[0x1895FA2D0]();
}

uint64_t ccspake_mac_hkdf_hmac_sha256()
{
  return MEMORY[0x1895FA2D8]();
}

uint64_t ccspake_mac_verify_and_get_session_key()
{
  return MEMORY[0x1895FA2E0]();
}

uint64_t ccspake_prover_init()
{
  return MEMORY[0x1895FA2E8]();
}

uint64_t ccspake_prover_initialize()
{
  return MEMORY[0x1895FA2F0]();
}

uint64_t ccspake_reduce_w()
{
  return MEMORY[0x1895FA2F8]();
}

uint64_t ccspake_sizeof_ctx()
{
  return MEMORY[0x1895FA300]();
}

uint64_t ccspake_sizeof_point()
{
  return MEMORY[0x1895FA308]();
}

uint64_t ccspake_sizeof_w()
{
  return MEMORY[0x1895FA310]();
}

uint64_t ccspake_verifier_initialize()
{
  return MEMORY[0x1895FA320]();
}

uint64_t ccss_shamir_parameters_init()
{
  return MEMORY[0x1895FA3D0]();
}

uint64_t ccss_shamir_share_bag_add_share()
{
  return MEMORY[0x1895FA3D8]();
}

uint64_t ccss_shamir_share_bag_init()
{
  return MEMORY[0x1895FA3E0]();
}

uint64_t ccss_shamir_share_bag_recover_secret()
{
  return MEMORY[0x1895FA3E8]();
}

uint64_t ccss_shamir_share_generator_deserialize()
{
  return MEMORY[0x1895FA3F8]();
}

uint64_t ccss_shamir_share_generator_generate_share()
{
  return MEMORY[0x1895FA400]();
}

uint64_t ccss_shamir_share_generator_init()
{
  return MEMORY[0x1895FA408]();
}

uint64_t ccss_shamir_share_generator_init_with_secrets_less_than_prime()
{
  return MEMORY[0x1895FA410]();
}

uint64_t ccss_shamir_share_generator_serialize()
{
  return MEMORY[0x1895FA418]();
}

uint64_t ccss_shamir_share_init()
{
  return MEMORY[0x1895FA428]();
}

uint64_t ccss_sizeof_generator()
{
  return MEMORY[0x1895FA438]();
}

uint64_t ccss_sizeof_parameters_fix()
{
  return MEMORY[0x18960F0A8]();
}

uint64_t ccss_sizeof_shamir_share_generator_serialization()
{
  return MEMORY[0x1895FA448]();
}

uint64_t ccss_sizeof_share()
{
  return MEMORY[0x1895FA450]();
}

uint64_t ccss_sizeof_share_bag()
{
  return MEMORY[0x1895FA458]();
}

void free(void *a1)
{
}

uint64_t getContextSizeForECBMode()
{
  return MEMORY[0x18960F0B8]();
}

uint64_t getccec_pub_ctx_size()
{
  return MEMORY[0x18960F0D8]();
}

double log2(double a1)
{
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1895FBE68](__s, __smax, *(void *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1896165B8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x189616820](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x189616828](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x18961B0C0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x18961B0F8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x18961B160]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x18961B188]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x18961B1B0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x18961B1D8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x18961B1F0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B258]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x18961B270]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x18961B330]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x18961B3A0]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x18961B3E8]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x18961B410]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B438]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x18961B450]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x18961B4D0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}

uint64_t objc_msgSend_initWithBlindingInverse_blindedMessage_tokenContent_tokenBlinder_ciphersuite_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_initWithBlindingInverse_blindedMessage_tokenContent_tokenBlinder_ciphersuite_);
}