id sub_100002BEC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "amsd_recordZoneNames"));
  v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

LABEL_6:
  v8 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v8) {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = AMSLogKey();
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v13 = objc_opt_class(self, v12);
    v14 = v13;
    if (v11)
    {
      v15 = AMSLogKey();
      v3 = objc_claimAutoreleasedReturnValue(v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v14,  v3));
    }

    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v13));
    }

    v18 = AMSHashIfNeeded(v5);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    *(_DWORD *)buf = 138543618;
    v26 = v16;
    v27 = 2114;
    v28 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@Removing an iTunes account because it has no home users. account = %{public}@",  buf,  0x16u);
    if (v11)
    {

      v16 = (void *)v3;
    }
  }

  v17 = objc_alloc_init(&OBJC_CLASS___AMSBinaryPromise);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  v21 = (void *)objc_claimAutoreleasedReturnValue([v17 completionHandlerAdapter]);
  [v20 removeAccount:v5 withCompletionHandler:v21];

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100002EE4;
  v24[3] = &unk_1000D5AB0;
  v24[4] = self;
  [v17 addSuccessBlock:v24];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_100003044;
  v23[3] = &unk_1000D5AD8;
  v23[4] = self;
  [v17 addErrorBlock:v23];
LABEL_18:

  return v17;
}

void sub_100002EE4(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v2) {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = AMSLogKey();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v8 = v7;
    if (v5)
    {
      uint64_t v9 = AMSLogKey();
      a1 = objc_claimAutoreleasedReturnValue(v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v8,  a1));
    }

    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v7));
    }

    *(_DWORD *)buf = 138543362;
    v12 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@Successfully removed the account.",  buf,  0xCu);
    if (v5)
    {

      v10 = (void *)a1;
    }
  }
}

void sub_100003044(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = AMSLogKey();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v10 = v9;
    if (v7)
    {
      uint64_t v11 = AMSLogKey();
      a1 = objc_claimAutoreleasedReturnValue(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v10,  a1));
    }

    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v9));
    }

    uint64_t v13 = AMSLogableError(v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138543618;
    v16 = v12;
    __int16 v17 = 2114;
    v18 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@Error removing account: %{public}@",  buf,  0x16u);
    if (v7)
    {

      v12 = (void *)a1;
    }
  }
}

AMSMutablePromise *sub_100003474(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v2) {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v6 = AMSLogKey();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
    uint64_t v9 = AMSHashIfNeeded(v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    *(_DWORD *)buf = 138543874;
    uint64_t v29 = v5;
    __int16 v30 = 2114;
    v31 = v7;
    __int16 v32 = 2114;
    v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Accepting a home cloud share. share = %{public}@",  buf,  0x20u);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
  v12 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudDataManager]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
  v14 = (void *)objc_claimAutoreleasedReturnValue([v13 containerIdentifier]);
  v15 = (void *)objc_claimAutoreleasedReturnValue([v12 containerWithContainerIdentifier:v14]);

  v16 = objc_alloc_init(&OBJC_CLASS___AMSMutablePromise);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
  v18 = (void *)objc_claimAutoreleasedReturnValue([v17 URL]);
  v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
  v20 = (void *)objc_claimAutoreleasedReturnValue([v19 token]);
  v21 = (void *)objc_claimAutoreleasedReturnValue([v15 acceptShareURL:v18 withToken:v20]);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_1000036EC;
  v26[3] = &unk_1000D5B28;
  v26[4] = *(void *)(a1 + 32);
  v22 = v16;
  v27 = v22;
  [v21 resultWithCompletion:v26];

  v23 = v27;
  v24 = v22;

  return v24;
}

void sub_1000036EC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsMultiUserConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsMultiUserConfig"));
  uint64_t v7 = (void *)v6;
  if ((a2 & 1) != 0)
  {
    if (!v6) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
      uint64_t v11 = AMSLogKey();
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v10;
      __int16 v26 = 2114;
      v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully accepted the share invitation.",  buf,  0x16u);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _generateInviteCode]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100003934;
    v22[3] = &unk_1000D5B00;
    v14 = *(void **)(a1 + 40);
    v22[4] = *(void *)(a1 + 32);
    id v23 = v14;
    [v13 resultWithCompletion:v22];
  }

  else
  {
    if (!v6) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = objc_opt_class(*(void *)(a1 + 32), v16);
      uint64_t v18 = AMSLogKey();
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      uint64_t v20 = AMSHashIfNeeded(v5);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      *(_DWORD *)buf = 138543874;
      uint64_t v25 = v17;
      __int16 v26 = 2114;
      v27 = v19;
      __int16 v28 = 2114;
      uint64_t v29 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to accept the share. error = %{public}@",  buf,  0x20u);
    }

    [*(id *)(a1 + 40) finishWithError:v5];
  }
}

void sub_100003934(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 40) finishWithResult:a2];
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v6) {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
      uint64_t v10 = AMSLogKey();
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      uint64_t v12 = AMSHashIfNeeded(v5);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      int v14 = 138543874;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v11;
      __int16 v18 = 2114;
      v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to generate a muInviteCode. error = %{public}@",  (uint8_t *)&v14,  0x20u);
    }

    [*(id *)(a1 + 40) finishWithError:v5];
  }
}

id sub_100003C4C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_100003C58(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AMSAuthenticateOptions amsd_createAppProvidedDataWithMultiUserAction:home:]( &OBJC_CLASS___AMSAuthenticateOptions,  "amsd_createAppProvidedDataWithMultiUserAction:home:",  @"invite_sent",  a2));
  id v4 = [v3 copy];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSAuthenticateOptions amsd_multiUserAuthenticateOptionsWithAppProvidedData:]( &OBJC_CLASS___AMSAuthenticateOptions,  "amsd_multiUserAuthenticateOptionsWithAppProvidedData:",  v4));

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _performAuthKitUpdateTaskWithOptions:v5]);
  return v6;
}

id sub_100003CE0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

void sub_100003CEC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 authenticationResults]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"AKIDMSToken"]);

  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0) {
    id v13 = v4;
  }
  else {
    id v13 = 0LL;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"muInviteCode"]);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
  if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0) {
    id v10 = v7;
  }
  else {
    id v10 = 0LL;
  }

  if ([v10 length])
  {
    [*(id *)(a1 + 32) finishWithResult:v10];
  }

  else
  {
    uint64_t v11 = AMSError( 0LL,  @"Unknown AuthKit Error",  @"The IdMS call was successful, but the result was missing a valid muInviteCode.",  0LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [*(id *)(a1 + 32) finishWithError:v12];
  }
}

void sub_100004030(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0LL, v4);
  }

  else
  {
    (*(void (**)(void))(v3 + 16))(*(void *)(a1 + 32));
  }
}

void sub_100004150(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v2 + 16))(*(void *)(a1 + 32), 1LL, 0LL);
  }

uint64_t sub_100004278(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000435C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v2 + 16))(*(void *)(a1 + 32), 1LL, 0LL);
  }

void sub_10000447C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v2 + 16))(*(void *)(a1 + 32), 1LL, 0LL);
  }

void sub_10000459C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v2 + 16))(*(void *)(a1 + 32), 1LL, 0LL);
  }

void sub_100004804(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
      uint64_t v8 = AMSLogKey();
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138544130;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      int v14 = v9;
      __int16 v15 = 2114;
      uint64_t v16 = v10;
      __int16 v17 = 2114;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Error during sign-out in amsaccountsd for: %{public}@ is %{public}@",  (uint8_t *)&v11,  0x2Au);
    }
  }
}

BOOL sub_100005778(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
  if (!v5) {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (void *)objc_opt_class(*(void *)(a1 + 32), v7);
    id v9 = v8;
    uint64_t v10 = AMSLogKey();
    int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_DSID"));
    uint64_t v13 = AMSHashIfNeeded(v12);
    int v14 = a2;
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138543874;
    v91 = v8;
    __int16 v92 = 2114;
    uint64_t v93 = (uint64_t)v11;
    __int16 v94 = 2114;
    uint64_t v95 = (uint64_t)v15;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Performing token update. DSID: %{public}@",  buf,  0x20u);

    a2 = v14;
  }

  uint64_t v16 = *(void **)(a1 + 32);
  id v89 = 0LL;
  unsigned __int8 v17 = [v16 _isSupported:&v89];
  id v18 = v89;
  if ((v17 & 1) != 0)
  {
    v19 = *(void **)(a1 + 32);
    id v88 = v18;
    unsigned __int8 v20 = [v19 _canAttemptTokenUpdate:&v88];
    id v21 = v88;

    if ((v20 & 1) != 0)
    {
      id v18 = v21;
LABEL_9:
      v22 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
      id v24 = +[AMSBiometrics stateForAccount:](&OBJC_CLASS___AMSBiometrics, "stateForAccount:", v23);

      uint64_t v87 = (uint64_t)v24;
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
      if (!v25) {
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue([v25 OSLogObject]);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v84 = a2;
        uint64_t v27 = AMSLogKey();
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        uint64_t v30 = objc_opt_class(*(void *)(a1 + 32), v29);
        uint64_t v31 = v30;
        if (v28)
        {
          uint64_t v32 = AMSLogKey();
          uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v31,  v2));
        }

        else
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v30));
        }

        *(_DWORD *)buf = 138543618;
        v91 = v33;
        __int16 v92 = 2048;
        uint64_t v93 = (uint64_t)v24;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%{public}@Current biometrics state = %ld",  buf,  0x16u);
        a2 = v84;
        if (v28)
        {

          v33 = v2;
        }

        v22 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
      }

      v53 = *(void **)(a1 + 32);
      id v86 = v18;
      [v53 _presentConfirmation:&v86 currentBiometricsState:&v87];
      id v54 = v86;

      if (!v54 && v87 != 2)
      {
        uint64_t v87 = 1LL;
        +[AMSDefaults setDeviceBiometricsState:](&OBJC_CLASS___AMSDefaults, "setDeviceBiometricsState:", 1LL);
      }

      v55 = *(void **)(a1 + 32);
      id v85 = v54;
      [v55 _updateTokens:&v85 currentBiometricsState:&v87];
      id v56 = v85;

      uint64_t v57 = v87;
      v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
      id v59 = +[AMSBiometrics setState:forAccount:](&OBJC_CLASS___AMSBiometrics, "setState:forAccount:", v57, v58);

      v60 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
      if (!v60) {
        v60 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      v61 = (os_log_s *)objc_claimAutoreleasedReturnValue([v60 OSLogObject]);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v62 = AMSLogKey();
        v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        uint64_t v65 = objc_opt_class(*(void *)(a1 + 32), v64);
        uint64_t v66 = v65;
        if (v63)
        {
          uint64_t v67 = AMSLogKey();
          v22 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v66,  v22));
        }

        else
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v65));
        }

        *(_DWORD *)buf = 138543618;
        v91 = v68;
        __int16 v92 = 2048;
        uint64_t v93 = v87;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "%{public}@Set biometrics state = %ld",  buf,  0x16u);
        if (v63)
        {

          v68 = v22;
        }
      }

      BOOL v43 = v56 == 0LL;
      uint64_t v69 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
      v70 = (void *)v69;
      if (v56)
      {
        if (!v69) {
          v70 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        v71 = (os_log_s *)objc_claimAutoreleasedReturnValue([v70 OSLogObject]);
        if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
          goto LABEL_53;
        }
        v73 = (void *)objc_opt_class(*(void *)(a1 + 32), v72);
        id v74 = v73;
        uint64_t v75 = AMSLogKey();
        v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        *(_DWORD *)buf = 138543874;
        v91 = v73;
        __int16 v92 = 2114;
        uint64_t v93 = (uint64_t)v76;
        __int16 v94 = 2114;
        uint64_t v95 = (uint64_t)v56;
        v77 = "%{public}@: [%{public}@] Completed with error: %{public}@";
        v78 = v71;
        os_log_type_t v79 = OS_LOG_TYPE_ERROR;
      }

      else
      {
        if (!v69) {
          v70 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        v71 = (os_log_s *)objc_claimAutoreleasedReturnValue([v70 OSLogObject]);
        if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_53;
        }
        v81 = (void *)objc_opt_class(*(void *)(a1 + 32), v80);
        id v74 = v81;
        uint64_t v82 = AMSLogKey();
        v76 = (void *)objc_claimAutoreleasedReturnValue(v82);
        *(_DWORD *)buf = 138543874;
        v91 = v81;
        __int16 v92 = 2114;
        uint64_t v93 = (uint64_t)v76;
        __int16 v94 = 2048;
        uint64_t v95 = v87;
        v77 = "%{public}@: [%{public}@] Completed token update task with biometricsState: %lu";
        v78 = v71;
        os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
      }

      _os_log_impl((void *)&_mh_execute_header, v78, v79, v77, buf, 0x20u);

LABEL_53:
      [*(id *)(a1 + 32) _sendMetricsForUpdate];
      id v42 = v56;
      id v18 = v42;
      goto LABEL_54;
    }

    v44 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
    if (!v44) {
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    v45 = (os_log_s *)objc_claimAutoreleasedReturnValue([v44 OSLogObject]);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = AMSLogKey();
      v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
      uint64_t v49 = objc_opt_class(*(void *)(a1 + 32), v48);
      uint64_t v50 = v49;
      if (v47)
      {
        uint64_t v51 = AMSLogKey();
        a1 = objc_claimAutoreleasedReturnValue(v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v50,  a1));
      }

      else
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v49));
      }

      *(_DWORD *)buf = 138543362;
      v91 = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%{public}@We did not attempt to create a new token.",  buf,  0xCu);
      if (v47)
      {

        v52 = (void *)a1;
      }
    }

    if (!a2)
    {
      BOOL v43 = 0LL;
      id v18 = v21;
      goto LABEL_55;
    }

    v41 = v21;
LABEL_20:
    id v42 = v41;
    id v18 = v42;
    BOOL v43 = 0LL;
LABEL_54:
    *a2 = v42;
    goto LABEL_55;
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
  if (!v34) {
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([v34 OSLogObject]);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    v37 = (void *)objc_opt_class(*(void *)(a1 + 32), v36);
    id v38 = v37;
    uint64_t v39 = AMSLogKey();
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    *(_DWORD *)buf = 138543874;
    v91 = v37;
    __int16 v92 = 2114;
    uint64_t v93 = (uint64_t)v40;
    __int16 v94 = 2114;
    uint64_t v95 = (uint64_t)v18;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@]Biometrics Update Failed with error: %{public}@",  buf,  0x20u);
  }

  if (a2)
  {
    v41 = v18;
    goto LABEL_20;
  }

  BOOL v43 = 0LL;
LABEL_55:

  return v43;
}

LABEL_33:
LABEL_34:
  if (a3) {
    *a3 = v8;
  }

  return v8 == 0LL;
}

      if (*(void *)(a1 + 16) && (id v24 = sub_10008D974(v18, v17), (v25 & 1) != 0))
      {
        sub_1000585E0(*(void *)(a1 + 56) + 40 * v24, (uint64_t)v52);
      }

      else
      {
        v53 = 0LL;
        memset(v52, 0, sizeof(v52));
      }

      swift_bridgeObjectRelease(v17);
      sub_1000585E0((uint64_t)v54, (uint64_t)v51);
      sub_1000587D0((uint64_t)v52, (uint64_t)&v47);
      sub_1000587D0((uint64_t)v51, (uint64_t)&v48[24]);
      if (*(void *)&v48[8])
      {
        sub_1000587D0((uint64_t)&v47, (uint64_t)v46);
        if (!*((void *)&v49 + 1))
        {
          sub_100055D80((uint64_t)v51);
          sub_100055D80((uint64_t)v52);
          sub_1000587B0();
          sub_100058670((uint64_t)v46);
          goto LABEL_44;
        }

        v44[0] = *(_OWORD *)&v48[24];
        v44[1] = v49;
        v45 = v50;
        __int16 v26 = static AnyHashable.== infix(_:_:)(v46, v44);
        sub_100058670((uint64_t)v44);
        sub_100055D80((uint64_t)v51);
        sub_100055D80((uint64_t)v52);
        sub_1000587B0();
        sub_100058670((uint64_t)v46);
        sub_100055D80((uint64_t)&v47);
        if ((v26 & 1) == 0) {
          goto LABEL_45;
        }
      }

      else
      {
        sub_100055D80((uint64_t)v51);
        sub_100055D80((uint64_t)v52);
        sub_1000587B0();
        if (*((void *)&v49 + 1))
        {
LABEL_44:
          sub_100054CE0((uint64_t)&v47, &qword_1000F03E8);
LABEL_45:
          if (__CFADD__(v40++, 1LL)) {
            goto LABEL_67;
          }
        }

        else
        {
          sub_100055D80((uint64_t)&v47);
        }
      }
    }
  }

  int v14 = v42 + 1;
  if (__OFADD__(v42, 1LL))
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }

  if (v14 >= v39)
  {
LABEL_24:
    uint64_t v7 = 0LL;
    memset(v48, 0, sizeof(v48));
    v47 = 0u;
    goto LABEL_25;
  }

  __int16 v15 = *(void *)(v38 + 8 * v14);
  if (v15)
  {
LABEL_10:
    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v14 << 6);
    id v42 = v14;
    goto LABEL_6;
  }

  uint64_t v16 = v42 + 2;
  ++v42;
  if (v14 + 1 >= v39) {
    goto LABEL_24;
  }
  __int16 v15 = *(void *)(v38 + 8 * v16);
  if (v15) {
    goto LABEL_13;
  }
  id v42 = v14 + 1;
  if (v14 + 2 >= v39) {
    goto LABEL_24;
  }
  __int16 v15 = *(void *)(v38 + 8 * (v14 + 2));
  if (v15)
  {
    v14 += 2LL;
    goto LABEL_10;
  }

  uint64_t v16 = v14 + 3;
  id v42 = v14 + 2;
  if (v14 + 3 >= v39) {
    goto LABEL_24;
  }
  __int16 v15 = *(void *)(v38 + 8 * v16);
  if (v15)
  {
LABEL_13:
    int v14 = v16;
    goto LABEL_10;
  }

  while (1)
  {
    int v14 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v14 >= v39)
    {
      id v42 = v39 - 1;
      goto LABEL_24;
    }

    __int16 v15 = *(void *)(v38 + 8 * v14);
    ++v16;
    if (v15) {
      goto LABEL_10;
    }
  }

void sub_100006D1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100006D44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100006D54(uint64_t a1)
{
}

void sub_100006D5C(double *a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:*((void *)a1 + 4)]);
  uint64_t v6 = v5;
  if (v5 && (double v7 = a1[8], [v5 doubleValue], v7 - v8 < 15.0))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
    if (!v9) {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v14 = objc_opt_class(*((void *)a1 + 5), v13);
      uint64_t v15 = v14;
      if (v12)
      {
        uint64_t v16 = AMSLogKey();
        uint64_t v2 = objc_claimAutoreleasedReturnValue(v16);
        unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v15,  v2));
      }

      else
      {
        unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v14));
      }

      uint64_t v30 = *((void *)a1 + 8);
      uint64_t v31 = *((void *)a1 + 4);
      [v6 doubleValue];
      *(_DWORD *)buf = 138544386;
      v41 = v17;
      __int16 v42 = 2048;
      uint64_t v43 = v30;
      __int16 v44 = 2114;
      uint64_t v45 = v31;
      __int16 v46 = 2048;
      uint64_t v47 = 0x402E000000000000LL;
      __int16 v48 = 2048;
      uint64_t v49 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%{public}@Unable to take token update lock. Current uptime (%f) for %{public}@ is within %f seconds of existing lock uptime, %f.",  buf,  0x34u);
      if (v12)
      {

        unsigned __int8 v17 = (void *)v2;
      }
    }

    *(_BYTE *)(*(void *)(*((void *)a1 + 6) + 8LL) + 24LL) = 0;
    uint64_t v33 = AMSErrorDomain;
    id v38 = @"errorIsResultOfLockTimeout";
    uint64_t v39 = &__kCFBooleanTrue;
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    uint64_t v34 = AMSCustomError(v33, 11LL, @"Token Update Error", @"Unable to take token update lock", v29, 0LL);
    uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
    uint64_t v36 = *(void *)(*((void *)a1 + 7) + 8LL);
    v37 = *(void **)(v36 + 40);
    *(void *)(v36 + 40) = v35;
  }

  else
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
    if (!v18) {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18 OSLogObject]);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = AMSLogKey();
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v23 = objc_opt_class(*((void *)a1 + 5), v22);
      uint64_t v24 = v23;
      if (v21)
      {
        uint64_t v25 = AMSLogKey();
        uint64_t v2 = objc_claimAutoreleasedReturnValue(v25);
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v24,  v2));
      }

      else
      {
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v23));
      }

      uint64_t v27 = *((void *)a1 + 4);
      uint64_t v28 = *((void *)a1 + 8);
      *(_DWORD *)buf = 138543874;
      v41 = v26;
      __int16 v42 = 2114;
      uint64_t v43 = v27;
      __int16 v44 = 2048;
      uint64_t v45 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}@Updated lock uptime for %{public}@ to %f.",  buf,  0x20u);
      if (v21)
      {

        __int16 v26 = (void *)v2;
      }
    }

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a1[8]));
    [v4 setObject:v29 forKeyedSubscript:*((void *)a1 + 4)];
  }
}

id sub_100007B38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSProcessInfo currentProcess](&OBJC_CLASS___AMSProcessInfo, "currentProcess"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDBag defaultBag](&OBJC_CLASS___AMSDBag, "defaultBag"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration ams_configurationWithProcessInfo:bag:]( &OBJC_CLASS___NSURLSessionConfiguration,  "ams_configurationWithProcessInfo:bag:",  v4,  v5));

  double v7 = -[AMSURLSession initWithConfiguration:](objc_alloc(&OBJC_CLASS___AMSURLSession), "initWithConfiguration:", v6);
  [*(id *)(a1 + 32) setSession:v7];

  double v8 = *(void **)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 session]);
  [v9 setDelegate:v8];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) session]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 dataTaskPromiseWithRequest:v3]);

  return v11;
}

void sub_100007E18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100007E44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
  if (!v8) {
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)objc_opt_class(WeakRetained, v10);
    id v12 = v11;
    uint64_t v13 = AMSLogKey();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v15 = 138544130;
    uint64_t v16 = v11;
    __int16 v17 = 2114;
    id v18 = v14;
    __int16 v19 = 2114;
    id v20 = v5;
    __int16 v21 = 2114;
    id v22 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Recevied dialog result from delegate. Result: %{public}@, error: %{public}@",  (uint8_t *)&v15,  0x2Au);
  }

  [*(id *)(a1 + 32) finishWithResult:v5 error:v6];
}

void sub_100008224( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100008250(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedBiometricsConfig](&OBJC_CLASS___AMSLogConfig, "sharedBiometricsConfig"));
  if (!v8) {
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)objc_opt_class(WeakRetained, v10);
    id v18 = v11;
    uint64_t v12 = AMSLogKey();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v14 = AMSHashIfNeeded(v5);
    int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = AMSLogableError(v6);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    *(_DWORD *)buf = 138544130;
    id v20 = v11;
    __int16 v21 = 2114;
    id v22 = v13;
    __int16 v23 = 2114;
    uint64_t v24 = v15;
    __int16 v25 = 2114;
    __int16 v26 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Received authenticate result from delegate. Result: %{public}@, error: %{public}@",  buf,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100008490(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100008664(id a1)
{
  v1 = objc_alloc_init(&OBJC_CLASS___AMSThreadSafeDictionary);
  uint64_t v2 = (void *)qword_1000F1F68;
  qword_1000F1F68 = (uint64_t)v1;
}

uint64_t sub_1000087DC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  id v4 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), a2), "_sharedTokenLock");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v5 lock];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
  id v74 = (void *)objc_claimAutoreleasedReturnValue([v6 base64EncodedStringWithOptions:0]);

  double v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v7) {
    double v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
    uint64_t v11 = AMSLogKey();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    v73 = v2;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ams_DSID"));
    uint64_t v15 = AMSHashIfNeeded(v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
    uint64_t v18 = AMSHashIfNeeded(v74);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    *(_DWORD *)buf = 138544386;
    uint64_t v78 = v10;
    __int16 v79 = 2114;
    uint64_t v80 = v12;
    __int16 v81 = 2114;
    id v82 = v16;
    __int16 v83 = 2114;
    v84 = v17;
    __int16 v85 = 2114;
    id v86 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Performing token registration. (account: %{public}@; environment: %{public}@; token: %{public}@)",
      buf,
      0x34u);

    uint64_t v2 = v73;
  }

  uint64_t v20 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
  if (!v20
    || (__int16 v21 = (void *)v20,
        id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]),
        v22,
        v21,
        !v22))
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    uint64_t v26 = AMSErrorWithFormat(2LL, @"Push Register Failed", @"Invalid parameters. hasBag: %@ hasToken: %@");
    id v27 = (id)objc_claimAutoreleasedReturnValue(v26);

    if (v27) {
      goto LABEL_11;
    }
  }

  uint64_t v28 = objc_opt_class(*(void *)(a1 + 32), v23);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
  LOBYTE(v2_Block_object_dispose((const void *)(v11 - 80), 8) = [(id)v28 shouldPerformForAccount:v29 environment:v30 token:v31];

  if ((v28 & 1) == 0)
  {
    uint64_t v32 = AMSError(11LL, @"Push Register Failed", @"Not able to perform register task", 0LL);
    uint64_t v33 = objc_claimAutoreleasedReturnValue(v32);
    if (v33)
    {
      id v27 = (id)v33;
LABEL_11:
      int v34 = 0;
      uint64_t v35 = 0LL;
      goto LABEL_17;
    }
  }

  uint64_t v36 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice serialNumber](&OBJC_CLASS___AMSDevice, "serialNumber"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v36, "setObject:forKeyedSubscript:", v37, @"serial-number");

  -[NSMutableDictionary setObject:forKeyedSubscript:](v36, "setObject:forKeyedSubscript:", v74, @"token");
  id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
  v40 = (void *)objc_claimAutoreleasedReturnValue([v38 URLForKey:@"registerHardwareAsset" account:v39]);

  id v41 = objc_alloc(&OBJC_CLASS___AMSURLRequestEncoder);
  __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  id v43 = [v41 initWithBag:v42];

  [v43 setRequestEncoding:3];
  __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
  [v43 setAccount:v44];

  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v43 requestWithMethod:4 bagURL:v40 parameters:v36]);
  id v76 = 0LL;
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v45 resultWithError:&v76]);
  id v27 = v76;

  if (!v27 && v35)
  {
    __int16 v46 = (void *)objc_claimAutoreleasedReturnValue(+[AMSURLSession defaultSession](&OBJC_CLASS___AMSURLSession, "defaultSession"));
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 dataTaskPromiseWithRequest:v35]);

    id v75 = 0LL;
    id v48 = [v47 resultWithError:&v75];
    id v27 = v75;
  }

  if (!v27)
  {
    id v59 = *(void **)(a1 + 32);
    v60 = (void *)objc_claimAutoreleasedReturnValue([v59 token]);
    [v59 _updateCachedCriteriaWithToken:v60];

    v61 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v61) {
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue([v61 OSLogObject]);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v64 = objc_opt_class(*(void *)(a1 + 32), v63);
      uint64_t v65 = AMSLogKey();
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
      *(_DWORD *)buf = 138543618;
      uint64_t v78 = v64;
      __int16 v79 = 2114;
      uint64_t v80 = v66;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Token registration succeeded",  buf,  0x16u);
    }

    id v56 = 0LL;
    uint64_t v57 = 1LL;
    goto LABEL_28;
  }

  int v34 = 1;
LABEL_17:
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v49) {
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue([v49 OSLogObject]);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    uint64_t v52 = objc_opt_class(*(void *)(a1 + 32), v51);
    uint64_t v53 = AMSLogKey();
    id v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
    *(_DWORD *)buf = 138543874;
    uint64_t v78 = v52;
    __int16 v79 = 2114;
    uint64_t v80 = v54;
    __int16 v81 = 2114;
    id v82 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Token registration failed. %{public}@",  buf,  0x20u);
  }

  id v56 = v27;
  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  void *v2 = v56;
  if (v34)
  {
LABEL_28:
    uint64_t v67 = (void *)objc_opt_class(*(void *)(a1 + 32), v55);
    v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
    [v67 _updateThrottleForAccount:v68 environment:v69];

    uint64_t v58 = v57;
  }

  id v70 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v55), "_sharedTokenLock");
  v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
  [v71 unlock];

  return v58;
}

void sub_100009400(id a1)
{
  v1 = objc_alloc_init(&OBJC_CLASS___NSLock);
  uint64_t v2 = (void *)qword_1000F1F78;
  qword_1000F1F78 = (uint64_t)v1;
}

void sub_100009A74(_Unwind_Exception *a1)
{
}

void sub_100009A98(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v6) {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = AMSLogKey();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v11 = objc_opt_class(WeakRetained, v10);
    uint64_t v12 = v11;
    if (v9)
    {
      uint64_t v13 = AMSLogKey();
      uint64_t v2 = objc_claimAutoreleasedReturnValue(v13);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v12,  v2));
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v11));
    }

    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@Starting cert task",  (uint8_t *)&buf,  0xCu);
    if (v9)
    {

      uint64_t v14 = (void *)v2;
    }
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v23 = 0x3032000000LL;
  uint64_t v24 = sub_100009D34;
  __int16 v25 = sub_100009D44;
  id v26 = 0LL;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained options]);
  uint64_t v16 = (id *)(*((void *)&buf + 1) + 40LL);
  id obj = *(id *)(*((void *)&buf + 1) + 40LL);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _baaOptionsWithOptions:v15 error:&obj]);
  objc_storeStrong(v16, obj);

  if (*(void *)(*((void *)&buf + 1) + 40LL))
  {
    objc_msgSend(v4, "finishWithError:");
  }

  else
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100009D4C;
    v18[3] = &unk_1000D5DC8;
    p___int128 buf = &buf;
    v18[4] = WeakRetained;
    id v19 = v4;
    DeviceIdentityIssueClientCertificateWithCompletion(0LL, v17, v18);
  }

  _Block_object_dispose(&buf, 8);
}

void sub_100009D14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100009D34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100009D44(uint64_t a1)
{
}

void sub_100009D4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a4);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v9) {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (void *)objc_opt_class(*(void *)(a1 + 32), v11);
    id v13 = v12;
    uint64_t v14 = AMSLogKey();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    *(_DWORD *)__int128 buf = 138544130;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v61[0]) = a2 != 0;
    WORD2(v61[0]) = 2048;
    *(void *)((char *)v61 + 6) = [v7 count];
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Received certs. (hasRefKey: %d; certCount: %ld)",
      buf,
      0x26u);
  }

  uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (!(a2 | v16))
  {
    uint64_t v17 = AMSError(600LL, @"DeviceIdentity Error", @"No reference key", 0LL);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  }

  if (!v16 && ![v7 count])
  {
    uint64_t v21 = AMSError(600LL, @"DeviceIdentity Error", @"No certificate chain", 0LL);
    uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
    uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v22;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    __int16 v25 = 0LL;
LABEL_14:
    int v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig", v49));
    if (!v34) {
      int v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([v34 OSLogObject]);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v37 = (void *)objc_opt_class(*(void *)(a1 + 32), v36);
      id v38 = v37;
      uint64_t v39 = AMSLogKey();
      v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138543874;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v40;
      *(_WORD *)&buf[22] = 2114;
      v61[0] = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Cert task finished with error: %{public}@",  buf,  0x20u);
    }

    uint64_t v28 = 0LL;
    goto LABEL_19;
  }

  uint64_t v26 = AMSSetLogKeyIfNeeded();
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  id v49 = v8;
  *(void *)__int128 buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  v61[0] = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v57 = &v56;
  uint64_t v58 = 0x2020000000LL;
  uint64_t v59 = 0LL;
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_10000A2AC;
  v51[3] = &unk_1000D5DA0;
  id v54 = buf;
  uint64_t v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v52 = v28;
  uint64_t v55 = &v56;
  id v29 = v27;
  id v53 = v29;
  [v7 enumerateObjectsUsingBlock:v51];
  uint64_t v30 = *(void *)(*(void *)&buf[8] + 24LL);
  uint64_t v31 = v57[3];
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) options]);
  uint64_t v33 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v33 + 40);
  +[AMSKeychain storePrimaryCert:intermediateCert:privateKey:options:error:]( &OBJC_CLASS___AMSKeychain,  "storePrimaryCert:intermediateCert:privateKey:options:error:",  v30,  v31,  a2,  v32,  &obj);
  objc_storeStrong((id *)(v33 + 40), obj);
  id v8 = v49;

  _Block_object_dispose(&v56, 8);
  _Block_object_dispose(buf, 8);

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    __int16 v25 = v28;
    goto LABEL_14;
  }

  __int16 v25 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v25) {
    __int16 v25 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  int v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray OSLogObject](v25, "OSLogObject", v49));
  if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = (void *)objc_opt_class(*(void *)(a1 + 32), v44);
    id v46 = v45;
    uint64_t v47 = AMSLogKey();
    id v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    *(_DWORD *)__int128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v45;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v48;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v34,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Cert task finished successfully",  buf,  0x16u);
  }

LABEL_19:
  __int16 v42 = *(void **)(a1 + 40);
  id v43 = -[NSMutableArray copy](v28, "copy");
  [v42 finishWithResult:v43 error:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

void sub_10000A280( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10000A2AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3 == 1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v5;
    uint64_t v7 = *(void *)(a1 + 56);
    goto LABEL_5;
  }

  if (!a3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v5;
    uint64_t v7 = *(void *)(a1 + 48);
LABEL_5:
    CFDataRef v8 = SecCertificateCopyData(*(SecCertificateRef *)(*(void *)(v7 + 8) + 24LL));
    [*(id *)(a1 + 32) addObject:v8];
    goto LABEL_11;
  }

  CFDataRef v8 = (CFDataRef)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAttestationConfig](&OBJC_CLASS___AMSLogConfig, "sharedAttestationConfig"));
  if (!v8) {
    CFDataRef v8 = (CFDataRef)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[__CFData OSLogObject](v8, "OSLogObject"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
    int v12 = 138543618;
    uint64_t v13 = v10;
    __int16 v14 = 2114;
    uint64_t v15 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "AMSClientCertificateTask: [%{public}@] Processing more certificates than expected: %{public}@",  (uint8_t *)&v12,  0x16u);
  }

LABEL_11:
}

id sub_10000AC08(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "amsd_isCKChangeTokenExpiredError"))
    {
      uint64_t v3 = 2LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKManateeUnavailable"))
    {
      uint64_t v3 = 9LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKMissingManateeIdentity"))
    {
      uint64_t v3 = 1LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKPartialFailureError"))
    {
      uint64_t v3 = 4LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKServerRecordChangedError"))
    {
      uint64_t v3 = 5LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKThrottledError"))
    {
      uint64_t v3 = 6LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKUnknownItemError"))
    {
      uint64_t v3 = 7LL;
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v8);
    if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0) {
      id v10 = v7;
    }
    else {
      id v10 = 0LL;
    }

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ams_mapWithTransform:", &stru_1000D5E30));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v11,  @"AMSDCloudDataPartialFailureErrorsKey");
    }

    int v12 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber, v14);
    if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0) {
      id v16 = v13;
    }
    else {
      id v16 = 0LL;
    }

    if (v16) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v16,  @"AMSDCloudDataRetryAfterKey");
    }
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_title"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_message"));
    uint64_t v19 = AMSCustomError(@"AMSDCloudDataErrorDomain", v3, v17, v18, v5, v2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v19);
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

AMSPair *__cdecl sub_10000AE60(id a1, id a2, NSError *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = objc_alloc(&OBJC_CLASS___AMSPair);
  id v7 = sub_10000AC08(v4);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  uint64_t v9 = -[AMSPair initWithFirst:second:](v6, "initWithFirst:second:", v5, v8);
  return v9;
}

id sub_10000AFA8(void *a1, const char *a2)
{
  return objc_msgSend(a1, "ams_anyWithTest:", &stru_1000D5E88);
}

BOOL sub_10000AFB4(id a1, NSError *a2)
{
  return sub_10000AFBC(a2);
}

uint64_t sub_10000AFBC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 1LL;
  if ((objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 1) & 1) == 0)
  {
    if ((objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 3) & 1) != 0
      || (objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 5) & 1) != 0)
    {
      uint64_t v2 = 1LL;
    }

    else
    {
      uint64_t v2 = (uint64_t)objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 6);
    }
  }

  return v2;
}

AMSMutablePromise *sub_10000B15C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v2) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v6 = AMSLogKey();
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifiers]);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v39 = v5;
    __int16 v40 = 2114;
    uint64_t v41 = v7;
    __int16 v42 = 2048;
    id v43 = [v8 count];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fetching changed records using %lu zone identifiers.",  buf,  0x20u);
  }

  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifiers]);
  uint64_t v11 = (char *)[v10 count];

  if (v11)
  {
    uint64_t v12 = 0LL;
    do
    {
      uint64_t v13 = (char *)[*(id *)(a1 + 32) batchSize];
      id v14 = (uint64_t)v13 >= (uint64_t)v11 ? v11 : v13;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifiers]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "subarrayWithRange:", v12, v14));

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 fetchChangedRecordsInRecordZonesWithRecordZoneIdentifiers:v16]);

      -[NSMutableArray addObject:](v9, "addObject:", v18);
      v11 -= (unint64_t)v14;
      v12 += (uint64_t)v14;
    }

    while (v11);
  }

  if ([*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v19) {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 OSLogObject]);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = objc_opt_class(*(void *)(a1 + 32), v21);
      uint64_t v23 = AMSLogKey();
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v39 = v22;
      __int16 v40 = 2114;
      uint64_t v41 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Task ended early while batching.",  buf,  0x16u);
    }

    uint64_t v25 = AMSError( 6LL,  @"Early Cancellation",  @"The task was cancelled while making batched fetch operations for changed records.",  0LL);
    uint64_t v26 = (AMSMutablePromise *)objc_claimAutoreleasedReturnValue(v25);
    id v27 = (AMSMutablePromise *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v26));
  }

  else
  {
    uint64_t v28 = objc_alloc_init(&OBJC_CLASS___AMSMutablePromise);
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithAll:](&OBJC_CLASS___AMSPromise, "promiseWithAll:", v9));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10000B4EC;
    v34[3] = &unk_1000D5EB0;
    uint64_t v30 = v28;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v35 = v30;
    uint64_t v36 = v31;
    v37 = v9;
    [v29 addFinishBlock:v34];

    uint64_t v32 = v37;
    uint64_t v26 = v30;

    id v27 = v26;
  }

  return v27;
}

void sub_10000B4EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    [*(id *)(a1 + 32) finishWithError:a3];
  }

  else if ([v5 count] == (id)1)
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    [v7 finishWithResult:v8];
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v9) {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class(*(void *)(a1 + 40), v11);
      uint64_t v13 = AMSLogKey();
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      id v15 = [*(id *)(a1 + 48) count];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v43 = v12;
      __int16 v44 = 2114;
      uint64_t v45 = v14;
      __int16 v46 = 2048;
      id v47 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Processing changes with %lu batches.",  buf,  0x20u);
    }

    uint64_t v35 = a1;

    id v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    uint64_t v36 = v6;
    id v20 = v6;
    id v21 = [v20 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v38;
      do
      {
        for (i = 0LL; i != v22; i = (char *)i + 1)
        {
          if (*(void *)v38 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)i);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "changedRecords", v35));

          if (v26)
          {
            id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 changedRecords]);
            -[NSMutableDictionary addEntriesFromDictionary:](v16, "addEntriesFromDictionary:", v27);
          }

          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v25 deletedRecords]);

          if (v28)
          {
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v25 deletedRecords]);
            -[NSMutableDictionary addEntriesFromDictionary:](v17, "addEntriesFromDictionary:", v29);
          }

          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v25 errors]);

          if (v30)
          {
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v25 errors]);
            -[NSMutableDictionary addEntriesFromDictionary:](v18, "addEntriesFromDictionary:", v31);
          }

          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v25 changeTokens]);

          if (v32)
          {
            uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v25 changeTokens]);
            -[NSMutableDictionary addEntriesFromDictionary:](v19, "addEntriesFromDictionary:", v33);
          }
        }

        id v22 = [v20 countByEnumeratingWithState:&v37 objects:v41 count:16];
      }

      while (v22);
    }

    int v34 = -[AMSDCloudDataChangedRecordsResult initWithChangedRecords:deletedRecords:errors:changeTokens:]( objc_alloc(&OBJC_CLASS___AMSDCloudDataChangedRecordsResult),  "initWithChangedRecords:deletedRecords:errors:changeTokens:",  v16,  v17,  v18,  v19);
    [*(id *)(v35 + 32) finishWithResult:v34];

    uint64_t v6 = v36;
  }
}

id sub_10000BBC0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) second]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

LABEL_25:
  return v26;
}

  __break(1u);
}

      id v10 = 0LL;
      memset(v39, 0, sizeof(v39));
      __int128 v38 = 0u;
    }

    uint64_t v19 = *(void *)(v37 + 8 * v20);
    if (v19)
    {
LABEL_14:
      uint64_t v18 = v20;
LABEL_11:
      id v10 = (v19 - 1) & v19;
      id v14 = __clz(__rbit64(v19)) + (v18 << 6);
      uint64_t v12 = v18;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v18 >= v11)
    {
      uint64_t v12 = v11 - 1;
      goto LABEL_25;
    }

    uint64_t v19 = *(void *)(v37 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_11;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

id sub_10000C0B4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ams_setNullableObject:forKey:", *(void *)(a1 + 32), *(void *)(a1 + 40));
}

id sub_10000CD9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id obj = v3;
  id v23 = [obj countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v23)
  {
    uint64_t v22 = *(void *)v34;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v34 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = v5;
        uint64_t v6 = *(void **)(*((void *)&v33 + 1) + 8 * v5);
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        id v7 = v6;
        id v8 = [v7 countByEnumeratingWithState:&v29 objects:v38 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v30;
          do
          {
            uint64_t v11 = 0LL;
            do
            {
              if (*(void *)v30 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)v11);
              __int128 v25 = 0u;
              __int128 v26 = 0u;
              __int128 v27 = 0u;
              __int128 v28 = 0u;
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _uniqueIdentifiersForAccount:v12 error:0]);
              id v14 = [v13 countByEnumeratingWithState:&v25 objects:v37 count:16];
              if (v14)
              {
                id v15 = v14;
                uint64_t v16 = *(void *)v26;
                do
                {
                  uint64_t v17 = 0LL;
                  do
                  {
                    if (*(void *)v26 != v16) {
                      objc_enumerationMutation(v13);
                    }
                    -[NSMutableSet addObject:](v4, "addObject:", *(void *)(*((void *)&v25 + 1) + 8LL * (void)v17));
                    uint64_t v17 = (char *)v17 + 1;
                  }

                  while (v15 != v17);
                  id v15 = [v13 countByEnumeratingWithState:&v25 objects:v37 count:16];
                }

                while (v15);
              }

              uint64_t v11 = (char *)v11 + 1;
            }

            while (v11 != v9);
            id v9 = [v7 countByEnumeratingWithState:&v29 objects:v38 count:16];
          }

          while (v9);
        }

        uint64_t v5 = v24 + 1;
      }

      while ((id)(v24 + 1) != v23);
      id v23 = [obj countByEnumeratingWithState:&v33 objects:v39 count:16];
    }

    while (v23);
  }

  id v18 = -[NSMutableSet copy](v4, "copy");
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v18));

  return v19;
}

void sub_10000EFAC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AMSDCookieService);
  uint64_t v2 = (void *)qword_1000F1F88;
  qword_1000F1F88 = (uint64_t)v1;
}

void sub_10000F1C4(uint64_t a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsCookiesConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsCookiesConfig"));
  if (!v3) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 OSLogObject]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = AMSLogKey();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v8 = objc_opt_class(*(void *)(a1 + 32), v7);
    uint64_t v9 = v8;
    if (v6)
    {
      uint64_t v10 = AMSLogKey();
      uint64_t v1 = objc_claimAutoreleasedReturnValue(v10);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v9,  v1));
    }

    else
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v8));
    }

    uint64_t v12 = NSStringFromSelector(*(SEL *)(a1 + 40));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    *(_DWORD *)__int128 buf = 138543618;
    __int128 v26 = v11;
    __int16 v27 = 2114;
    __int128 v28 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}@%{public}@ - performing block",  buf,  0x16u);
    if (v6)
    {

      uint64_t v11 = (void *)v1;
    }
  }

  [*(id *)(a1 + 32) _clearAllCachedCookieProperties];
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsCookiesConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsCookiesConfig"));
  if (!v14) {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 OSLogObject]);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = AMSLogKey();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v19 = objc_opt_class(*(void *)(a1 + 32), v18);
    uint64_t v20 = v19;
    if (v17)
    {
      uint64_t v21 = AMSLogKey();
      uint64_t v1 = objc_claimAutoreleasedReturnValue(v21);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v20,  v1));
    }

    else
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v19));
    }

    id v23 = NSStringFromSelector(*(SEL *)(a1 + 40));
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    *(_DWORD *)__int128 buf = 138543618;
    __int128 v26 = v22;
    __int16 v27 = 2114;
    __int128 v28 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}@%{public}@ - finishing block",  buf,  0x16u);
    if (v17)
    {

      uint64_t v22 = (void *)v1;
    }
  }
}

AMSMutablePromise *sub_10000F574(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___AMSMutablePromise);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10000F668;
  v11[3] = &unk_1000D5F98;
  id v12 = a1[5];
  id v13 = v3;
  uint64_t v6 = v4;
  id v14 = v6;
  id v15 = a1[6];
  id v7 = v3;
  dispatch_async(v5, v11);

  uint64_t v8 = v15;
  uint64_t v9 = v6;

  return v9;
}

void sub_10000F668(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSCookieDatabase cleanUpCookieDatabasesWithValidIdentifiers:fileManager:]( &OBJC_CLASS___AMSCookieDatabase,  "cleanUpCookieDatabasesWithValidIdentifiers:fileManager:",  v3,  v4));

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000F744;
  v6[3] = &unk_1000D5B28;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [v5 addFinishBlock:v6];
}

id sub_10000F744(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  [v5 finishWithResult:v7 error:v6];

  return +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  *(void *)(a1 + 40));
}

void sub_10000F850(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "ams_sanitizedForSecureCoding"));
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

void sub_10000F978(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v9 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _cookieDatabaseForAccount:v3 error:&v9]);
  id v5 = v9;
  uint64_t v6 = a1[6];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 dbPath]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_sanitizedForSecureCoding"));
  (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v7, v8);
}

void sub_10000FC2C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsCookiesConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsCookiesConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    uint64_t v6 = AMSLogKey(v4, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v11 = v9;
    if (v7)
    {
      uint64_t v12 = AMSLogKey(v9, v10);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v11,  v13));
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v9));
      id v13 = v14;
    }

    id v15 = NSStringFromSelector(*(SEL *)(a1 + 56));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)__int128 buf = 138543618;
    __int128 v29 = v14;
    __int16 v30 = 2114;
    __int128 v31 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}@%{public}@ - performing block",  buf,  0x16u);
    if (v7) {
  }
    }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10000FE98;
  v27[3] = &unk_1000D5F70;
  uint64_t v17 = *(void *)(a1 + 56);
  v27[4] = *(void *)(a1 + 32);
  v27[5] = v17;
  uint64_t v18 = objc_retainBlock(v27);
  uint64_t v19 = *(void **)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 64);
  id v26 = 0LL;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v19 getCookiePropertiesForAccount:v20 cookieDatabaseOnly:v21 error:&v26]);
  id v23 = v26;
  uint64_t v24 = *(void *)(a1 + 48);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "ams_sanitizedForSecureCoding"));
  (*(void (**)(uint64_t, void *, void *))(v24 + 16))(v24, v22, v25);

  ((void (*)(void *))v18[2])(v18);
}

void sub_10000FE70(_Unwind_Exception *a1)
{
}

void sub_10000FE98(uint64_t a1)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsCookiesConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsCookiesConfig"));
  if (!v3) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 OSLogObject]);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
    uint64_t v12 = v10;
    if (v8)
    {
      uint64_t v13 = AMSLogKey(v10, v11);
      uint64_t v1 = objc_claimAutoreleasedReturnValue(v13);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v12,  v1));
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v10));
    }

    id v15 = NSStringFromSelector(*(SEL *)(a1 + 40));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v18 = v14;
    __int16 v19 = 2114;
    uint64_t v20 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}@%{public}@ - finishing block",  buf,  0x16u);
    if (v8)
    {

      id v14 = (void *)v1;
    }
  }
}

LABEL_49:
  return v12;
}

    BOOL v4 = 0;
    goto LABEL_50;
  }

  if (v6 != 45)
  {
    uint64_t v13 = (v6 - 48);
    if (v9 != 1)
    {
      sub_10008D294();
      if (!v19 && v18) {
        goto LABEL_34;
      }
      uint64_t v13 = 10LL * v13 + v28;
      if (v27 != 2)
      {
        while (1)
        {
          sub_10008D2A4();
          if (!v19 && v18) {
            goto LABEL_34;
          }
          if (!is_mul_ok(v13, v29)) {
            goto LABEL_34;
          }
          uint64_t v18 = __CFADD__(10 * v13, v30);
          uint64_t v13 = 10 * v13 + v30;
          if (v18) {
            goto LABEL_34;
          }
          sub_10008D2B4();
          if (v19) {
            goto LABEL_50;
          }
        }
      }
    }

    goto LABEL_49;
  }

  if (v9)
  {
    if (v9 != 1)
    {
      sub_10008D294();
      if (v19 || !v18)
      {
        uint64_t v13 = 0LL;
        uint64_t v18 = v17 == 0LL;
        uint64_t v20 = -(uint64_t)v17;
        if (!v18) {
          goto LABEL_35;
        }
        if (v16 == 2)
        {
          BOOL v4 = 0;
          uint64_t v13 = v20;
          goto LABEL_50;
        }

        __int128 v31 = v15 - 48;
        if ((v15 - 48) <= 9u && is_mul_ok(v20, 0xAuLL))
        {
          __int128 v32 = 10 * v20;
          uint64_t v13 = v32 - v31;
          if (v32 >= v31)
          {
            if (v16 == 3) {
              goto LABEL_49;
            }
            while (1)
            {
              sub_10008D2A4();
              if (!v19 && v18) {
                break;
              }
              if (!is_mul_ok(v13, v36)) {
                break;
              }
              uint64_t v18 = 10 * v13 >= v37;
              uint64_t v13 = 10 * v13 - v37;
              if (!v18) {
                break;
              }
              sub_10008D2B4();
              if (v19) {
                goto LABEL_50;
              }
            }
          }
        }
      }
    }

void sub_100010A54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_100010A80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100010A90(uint64_t a1)
{
}

void sub_100010A98(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsCookiesConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsCookiesConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    uint64_t v6 = AMSLogKey(v4, v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v11 = v9;
    if (v7)
    {
      uint64_t v12 = AMSLogKey(v9, v10);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v11,  v13));
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v9));
      uint64_t v13 = v14;
    }

    id v15 = NSStringFromSelector(*(SEL *)(a1 + 80));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)__int128 buf = 138543618;
    __int128 v39 = v14;
    __int16 v40 = 2114;
    uint64_t v41 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}@%{public}@ - performing block",  buf,  0x16u);
    if (v7) {
  }
    }

  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100010D78;
  v37[3] = &unk_1000D5F70;
  uint64_t v17 = *(void *)(a1 + 80);
  v37[4] = *(void *)(a1 + 32);
  v37[5] = v17;
  uint64_t v18 = objc_retainBlock(v37);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  BOOL v20 = v19 == 0LL;

  if (!v20)
  {
    uint64_t v21 = *(void **)(a1 + 32);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    [v21 _cacheCookieProperties:0 forIdentifier:v22];
  }

  id v23 = *(void **)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 40);
  id v36 = 0LL;
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v23 _cookieDatabaseForAccount:v24 error:&v36]);
  id v26 = v36;
  __int16 v27 = v26;
  if (v25)
  {
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v29 = *(void *)(a1 + 56);
    id v35 = v26;
    unsigned __int8 v30 = [v25 updateCookiesWithCookiePropertiesToAdd:v28 cookiePropertiesToRemove:v29 error:&v35];
    id v31 = v35;

    __int16 v27 = v31;
  }

  else
  {
    unsigned __int8 v30 = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v30;
  uint64_t v32 = *(void *)(*(void *)(a1 + 72) + 8LL);
  __int128 v33 = *(void **)(v32 + 40);
  *(void *)(v32 + 40) = v27;
  id v34 = v27;

  ((void (*)(void *))v18[2])(v18);
}

void sub_100010D48(_Unwind_Exception *a1)
{
}

void sub_100010D78(uint64_t a1)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsCookiesConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsCookiesConfig"));
  if (!v3) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 OSLogObject]);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
    uint64_t v12 = v10;
    if (v8)
    {
      uint64_t v13 = AMSLogKey(v10, v11);
      uint64_t v1 = objc_claimAutoreleasedReturnValue(v13);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v12,  v1));
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v10));
    }

    id v15 = NSStringFromSelector(*(SEL *)(a1 + 40));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v18 = v14;
    __int16 v19 = 2114;
    BOOL v20 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}@%{public}@ - finishing block",  buf,  0x16u);
    if (v8)
    {

      id v14 = (void *)v1;
    }
  }
}

void sub_100010F00(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1[6] + 8) + 40), "ams_sanitizedForSecureCoding"));
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

void sub_100011710(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connections]);
  [v2 removeObject:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
}

void sub_100011760(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connections]);
  [v2 removeObject:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
}

void sub_100011988(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  uint64_t v8 = (void *)v7;
  if (a2)
  {
    if (!v7) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      uint64_t v12 = AMSLogKey(v10, v11);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      uint64_t v15 = objc_opt_class(*(void *)(a1 + 32), v14);
      uint64_t v17 = v15;
      if (v13)
      {
        uint64_t v18 = AMSLogKey(v15, v16);
        uint64_t v3 = objc_claimAutoreleasedReturnValue(v18);
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v17,  v3));
      }

      else
      {
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v15));
      }

      *(_DWORD *)__int128 buf = 138543362;
      __int128 v33 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@Successfully cleared dangling cookie databases",  buf,  0xCu);
      if (v13)
      {

        __int16 v19 = (void *)v3;
      }
    }
  }

  else
  {
    if (!v7) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    BOOL v20 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (v20)
    {
      uint64_t v22 = AMSLogKey(v20, v21);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      uint64_t v25 = objc_opt_class(*(void *)(a1 + 32), v24);
      uint64_t v27 = v25;
      if (v23)
      {
        uint64_t v28 = AMSLogKey(v25, v26);
        uint64_t v3 = objc_claimAutoreleasedReturnValue(v28);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v27,  v3));
      }

      else
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v25));
      }

      uint64_t v30 = AMSLogableError(v6);
      id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)__int128 buf = 138543618;
      __int128 v33 = v29;
      __int16 v34 = 2114;
      id v35 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}@Error clearing dangling cookie databases: %{public}@",  buf,  0x16u);
      if (v23)
      {

        uint64_t v29 = (void *)v3;
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100011D7C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___AMSDataMigratorOptions);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice buildVersion](&OBJC_CLASS___AMSDevice, "buildVersion"));
  [v2 setCurrentBuildVersion:v3];

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _previousBuildVersion]);
  [v2 setPreviousBuildVersion:v4];

  [v2 setScenario:4];
  +[AMSDataMigrator performMigrationWithOptions:](&OBJC_CLASS___AMSDataMigrator, "performMigrationWithOptions:", v2);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100011F04;
  v14[3] = &unk_1000D5AB0;
  v14[4] = *(void *)(a1 + 32);
  BOOL v5 = v14;
  uint64_t v7 = AMSLogKey(v5, v6);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  BOOL v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100013630;
  block[3] = &unk_1000D6208;
  id v16 = v8;
  id v17 = v5;
  id v11 = v8;
  dispatch_async(v10, block);

  uint64_t v12 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100011F0C;
  v13[3] = &unk_1000D5AB0;
  v13[4] = v12;
  [v12 _clearDanglingCookieDatabasesWithCompletion:v13];
}

id sub_100011F04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setupMultiUser];
}

id sub_100011F0C(uint64_t a1)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v3) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 OSLogObject]);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
    uint64_t v12 = v10;
    if (v8)
    {
      uint64_t v13 = AMSLogKey(v10, v11);
      uint64_t v1 = objc_claimAutoreleasedReturnValue(v13);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v12,  v1));
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v10));
    }

    *(_DWORD *)__int128 buf = 138543362;
    __int16 v19 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Complete cookie database cleanup and start XPC",  buf,  0xCu);
    if (v8)
    {

      uint64_t v14 = (void *)v1;
    }
  }

  [*(id *)(a1 + 32) _setupNotifications];
  [*(id *)(a1 + 32) _setupPollJobs];
  id v15 = +[AMSDDeviceMessengerService sharedService](&OBJC_CLASS___AMSDDeviceMessengerService, "sharedService");
  id v16 = +[AMSDPushService sharedService](&OBJC_CLASS___AMSDPushService, "sharedService");
  [*(id *)(a1 + 32) _startXPC];
  [*(id *)(a1 + 32) _setupAccountDataSync];
  return [*(id *)(a1 + 32) _updateRegulatoryEligibility];
}

AMSPromise *__cdecl sub_100012150(id a1, ACAccount *a2)
{
  id v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[ACAccount ams_cookies](v2, "ams_cookies"));
  unsigned int v4 = objc_msgSend(v3, "ams_anyWithTest:", &stru_1000D6158);

  if (v4)
  {
    BOOL v5 = (AMSDSecurityService *)objc_claimAutoreleasedReturnValue( +[AMSBinaryPromise promiseWithSuccess]( &OBJC_CLASS___AMSBinaryPromise,  "promiseWithSuccess"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDSecurityService promiseAdapter](v5, "promiseAdapter"));
  }

  else
  {
    BOOL v5 = objc_alloc_init(&OBJC_CLASS___AMSDSecurityService);
    id v7 = objc_alloc_init(&OBJC_CLASS___AMSBinaryPromise);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 completionHandlerAdapter]);
    -[AMSDSecurityService performBiometricTokenUpdateWithAccount:clientInfo:additionalDialogMetrics:shouldGenerateKeysOnly:shouldRequestConfirmation:userInitiated:completion:]( v5,  "performBiometricTokenUpdateWithAccount:clientInfo:additionalDialogMetrics:shouldGenerateKeysOnly:shouldRequestConf irmation:userInitiated:completion:",  v2,  0LL,  0LL,  0LL,  0LL,  0LL,  v8);

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 promiseAdapter]);
  }

  return (AMSPromise *)v6;
}

BOOL sub_10001223C(id a1, NSHTTPCookie *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSHTTPCookie name](a2, "name"));
  unsigned __int8 v3 = [v2 hasPrefix:@"mt-tid-"];

  return v3;
}

void sub_100012840(id a1, NSNumber *a2)
{
  if (-[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue") >= 2)
  {
    unsigned int v4 = -[AMSDRefreshMultiUserOptions initWithReason:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions),  "initWithReason:",  @"Subscribing to private database changes initially failed.");
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDMultiUserController sharedController]( &OBJC_CLASS___AMSDMultiUserController,  "sharedController"));
    id v3 = [v2 refreshWithOptions:v4];
  }

void sub_1000128C8(id a1, NSNumber *a2)
{
  if (-[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue") >= 2)
  {
    unsigned int v4 = -[AMSDRefreshMultiUserOptions initWithReason:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions),  "initWithReason:",  @"Subscribing to shared database changes initially failed.");
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDMultiUserController sharedController]( &OBJC_CLASS___AMSDMultiUserController,  "sharedController"));
    id v3 = [v2 refreshWithOptions:v4];
  }

void sub_1000129D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey(0LL);
  string = (char *)xpc_dictionary_get_string(v3, _xpc_event_key_name);

  if (string) {
    string = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", string);
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v6) {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v11 = AMSLogKey(v9, v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v60 = v9;
    __int16 v61 = 2114;
    uint64_t v62 = v12;
    __int16 v63 = 2114;
    uint64_t v64 = string;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Received a Darwin notification. notification = %{public}@",  buf,  0x20u);
  }

  if ([string isEqualToString:@"com.apple.ams.provision-biometrics"])
  {
    [*(id *)(a1 + 32) _handleBiometricsProvisioningNotification];
    goto LABEL_12;
  }

  if (([string isEqualToString:@"AppleLanguagePreferencesChangedNotification"] & 1) != 0
    || [string isEqualToString:@"com.apple.language.changed"])
  {
    [*(id *)(a1 + 32) _handleDeviceLanguageChangeNotification:0];
    goto LABEL_12;
  }

  uint64_t v13 = &OBJC_CLASS___AMSMultiUserService_ptr;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "com.apple.mobile.keybagd.lock_status"));
  unsigned int v15 = [string isEqualToString:v14];

  if (!v15)
  {
    if ([string isEqualToString:@"com.apple.StoreServices.SSAccountStore.activeaccountchanged"])
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[AMSRegulatoryEligibilityTask sharedInstance]( &OBJC_CLASS___AMSRegulatoryEligibilityTask,  "sharedInstance"));
      [v16 setOverride:0];
LABEL_18:

LABEL_19:
      [*(id *)(a1 + 32) _updateRegulatoryEligibility];
      goto LABEL_12;
    }

    if ([string isEqualToString:AMSAccountCachedServerDataUpdatedNotification])
    {
      [*(id *)(a1 + 32) _handleCachedDataUpdate];
      goto LABEL_12;
    }

    if ([string isEqualToString:@"com.apple.AppleMediaServices.eligibilityoverridechanged"]) {
      goto LABEL_19;
    }
    if ([string isEqualToString:@"com.apple.os-eligibility-domain.input-needed"])
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedRegulatoryEligibilityConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedRegulatoryEligibilityConfig"));
      if (!v16) {
        id v16 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([v16 OSLogObject]);
      BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        uint64_t v20 = AMSLogKey(v18, v19);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        uint64_t v23 = objc_opt_class(*(void *)(a1 + 32), v22);
        uint64_t v25 = v23;
        if (v21)
        {
          uint64_t v26 = AMSLogKey(v23, v24);
          uint64_t v13 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v26);
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v25,  v13));
        }

        else
        {
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v23));
        }

        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v60 = (uint64_t)v27;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}@Eligibility engine is requesting input.",  buf,  0xCu);
        if (v21)
        {

          uint64_t v27 = v13;
        }
      }

      goto LABEL_18;
    }

    if ([string isEqualToString:@"com.apple.ams.privateListeningChanged"])
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v28) {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 OSLogObject]);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = objc_opt_class(*(void *)(a1 + 32), v30);
        uint64_t v33 = AMSLogKey(v31, v32);
        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v60 = v31;
        __int16 v61 = 2114;
        uint64_t v62 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Private listening setting changed.",  buf,  0x16u);
      }

      id v35 = objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions);
      id v36 = @"Private listening setting changed.";
    }

    else
    {
      if (![string isEqualToString:@"com.apple.homed.multi-user-status-changed"])
      {
        if (([string isEqualToString:@"com.apple.homed.user-cloud-share.wake.com.apple.applemediaservices.multiuser"] & 1) == 0 && !objc_msgSend( string,  "isEqualToString:",  @"com.apple.homed.user-cloud-share.wake.com.apple.applemediaservices.multiuser.qa"))
        {
          goto LABEL_12;
        }

        id v47 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
        if (!v47) {
          id v47 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue([v47 OSLogObject]);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v50 = objc_opt_class(*(void *)(a1 + 32), v49);
          uint64_t v52 = AMSLogKey(v50, v51);
          id v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v60 = v50;
          __int16 v61 = 2114;
          uint64_t v62 = v53;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Registering with HomeKit to receive CloudKit shares.",  buf,  0x16u);
        }

        __int16 v44 = (AMSDRefreshMultiUserOptions *)objc_claimAutoreleasedReturnValue( +[AMSDMultiUserController sharedController]( &OBJC_CLASS___AMSDMultiUserController,  "sharedController"));
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDRefreshMultiUserOptions homeManager](v44, "homeManager"));
        id v54 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDMultiUserController sharedController]( &OBJC_CLASS___AMSDMultiUserController,  "sharedController"));
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v54 cloudContainer]);
        uint64_t v58 = v55;
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v58, 1LL));
        [v45 registerToAcceptCloudSharesForContainers:v56];

LABEL_49:
        goto LABEL_12;
      }

      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v37) {
        __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue([v37 OSLogObject]);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = objc_opt_class(*(void *)(a1 + 32), v39);
        uint64_t v42 = AMSLogKey(v40, v41);
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v60 = v40;
        __int16 v61 = 2114;
        uint64_t v62 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Multi-user status changed.",  buf,  0x16u);
      }

      id v35 = objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions);
      id v36 = @"Multi-user status changed.";
    }

    __int16 v44 = -[AMSDRefreshMultiUserOptions initWithReason:](v35, "initWithReason:", v36);
    -[AMSDRefreshMultiUserOptions setShouldUseCloudData:](v44, "setShouldUseCloudData:", 0LL);
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDMultiUserController sharedController]( &OBJC_CLASS___AMSDMultiUserController,  "sharedController"));
    id v46 = [v45 refreshWithOptions:v44];
    goto LABEL_49;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000130C4;
  block[3] = &unk_1000D5AB0;
  void block[4] = *(void *)(a1 + 32);
  if (qword_1000F1F90 != -1) {
    dispatch_once(&qword_1000F1F90, block);
  }
LABEL_12:
}

id sub_1000130C4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedRegulatoryEligibilityConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedRegulatoryEligibilityConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v10 = 138543618;
    uint64_t v11 = v5;
    __int16 v12 = 2114;
    uint64_t v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Acting on first device unlock notification",  (uint8_t *)&v10,  0x16u);
  }

  return [*(id *)(a1 + 32) _updateRegulatoryEligibility];
}

id sub_1000132BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: Received SIGTERM...",  (uint8_t *)&v7,  0xCu);
  }

  [*(id *)(a1 + 32) _tearDownMultiUser];
  return +[AMSDTransactionStore flushAllKeepAliveTransactions]( &OBJC_CLASS___AMSDTransactionStore,  "flushAllKeepAliveTransactions");
}

uint64_t sub_100013630(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000136A4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AMSDDeviceMessengerService);
  id v2 = (void *)qword_1000F1FA0;
  qword_1000F1FA0 = (uint64_t)v1;
}

id sub_100013A68(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cleanupSavedMessages];
}

void sub_100013B08(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegates]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithWeakObject:](&OBJC_CLASS___NSValue, "valueWithWeakObject:", *(void *)(a1 + 40)));
  [v3 addObject:v2];
}

void sub_100013D40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getSavedMessages]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100013F34(void *a1)
{
  id v3 = (void *)a1[4];
  id v2 = (void *)a1[5];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100013FC0;
  v7[3] = &unk_1000D6278;
  v7[4] = v3;
  id v8 = v2;
  id v4 = [v3 _sendMessage:v8 withReplyHandler:v7];
  (*(void (**)(void, id, void, uint64_t, uint64_t))(a1[6] + 16LL))(a1[6], v4, 0LL, v5, v6);
}

void sub_100013FC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  id v8 = (void *)v7;
  if (v6)
  {
    if (!v7) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class(*(void *)(a1 + 32), v10);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      int v17 = 138543874;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2114;
      id v22 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Error sending message. Error: %{public}@",  (uint8_t *)&v17,  0x20u);
LABEL_10:
    }
  }

  else
  {
    if (!v7) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = objc_opt_class(*(void *)(a1 + 32), v13);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v5 origin]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
      int v17 = 138544130;
      uint64_t v18 = v14;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2114;
      id v22 = v5;
      __int16 v23 = 2114;
      uint64_t v24 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Received reply for: %{public}@ from: %{public}@",  (uint8_t *)&v17,  0x2Au);

      goto LABEL_10;
    }
  }
}

void sub_100014600(id a1, AMSDeviceMessengerClientInterface *a2)
{
}

LABEL_22:
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}
          }

          continue;
        }
      }

      uint64_t v11 = [v9 countByEnumeratingWithState:&v46 objects:v56 count:16];
    }

    while (v11);
  }

  if (-[NSMutableArray count](v41, "count"))
  {
    if (!+[NSJSONSerialization isValidJSONObject:](&OBJC_CLASS___NSJSONSerialization, "isValidJSONObject:", v41))
    {
      uint64_t v26 = (id)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      if (!v26) {
        uint64_t v26 = (id)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue([v26 OSLogObject]);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        id v35 = objc_opt_class(v42, v34);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v51 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%{public}@: Failed to save messages. (not JSON)",  buf,  0xCu);
      }

      goto LABEL_47;
    }

    __int16 v44 = 0LL;
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v41,  0LL,  &v44));
    uint64_t v26 = v44;
    if (v25)
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDDeviceMessengerService _saveLocation](v42, "_saveLocation"));
      uint64_t v43 = v26;
      [v25 writeToURL:v27 options:0 error:&v43];
      uint64_t v28 = (os_log_s *)v26;
      uint64_t v26 = v43;
    }

    else
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      if (!v27) {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v27 OSLogObject]);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        __int128 v37 = objc_opt_class(v42, v36);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v51 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%{public}@: Failed to save messages. (no JSONData)",  buf,  0xCu);
      }
    }
  }

  else
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDDeviceMessengerService _saveLocation](v42, "_saveLocation"));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 path]);
    uint64_t v32 = [v29 fileExistsAtPath:v31];

    if (!v32) {
      goto LABEL_48;
    }
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDDeviceMessengerService _saveLocation](v42, "_saveLocation"));
    uint64_t v45 = 0LL;
    [v25 removeItemAtURL:v27 error:&v45];
    uint64_t v26 = v45;
  }

  if (v26)
  {
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v33) {
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s OSLogObject](v33, "OSLogObject"));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = objc_opt_class(v42, v39);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v51 = v40;
      uint64_t v52 = 2114;
      id v53 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%{public}@: Failed to save messages. Error: %{public}@",  buf,  0x16u);
    }

LABEL_47:
  }

      if (!--v4)
      {
        swift_bridgeObjectRelease(v3);
        return v19;
      }
    }
  }

  swift_bridgeObjectRelease(v3);
  return &_swiftEmptySetSingleton;
}

      uint64_t v7 = (v13 - 1) & v13;
      uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      uint64_t v9 = v14;
    }

    id v22 = *(void *)(v2 + 48);
    __int16 v23 = (void *)(v22 + 16 * v21);
    uint64_t v24 = v23[1];
    uint64_t v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      uint64_t v43 = a1;
      __int16 v44 = v41;
      uint64_t v45 = v39;
      id v46 = v9;
      id v47 = v7;
    }

    else
    {
      uint64_t v26 = ~v20;
      do
      {
        __int16 v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        uint64_t v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        uint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      uint64_t v43 = a1;
      __int16 v44 = v41;
      uint64_t v45 = v39;
      id v46 = v9;
      id v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }

    uint64_t v31 = *(_BYTE *)(v2 + 32);
    uint64_t v32 = v31 & 0x3F;
    uint64_t v33 = (1LL << v31) + 63;
    __int16 v34 = v33 >> 6;
    id v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      id v36 = sub_100056E10((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_100057374(v43);
    }

    else
    {
      __int128 v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      id v36 = sub_100056E10((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_100057374(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __int16 v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  void *v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

uint64_t sub_100014F30(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

id sub_100015018(uint64_t a1, void *a2)
{
  return _[a2 deviceMessengerDidReceiveMessage:*(void *)(a1 + 32)];
}

uint64_t sub_100015278(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

id sub_10001528C(uint64_t a1, void *a2)
{
  return _[a2 deviceMessengerDidReceiveReply:*(void *)(a1 + 32)];
}

LABEL_5:
  uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if ([v6 isReply])
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 messageID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v14,  IDSSendMessageOptionPeerResponseIdentifierKey);
  }

  else if (v7)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionExpectsPeerResponseKey);
  }

  int v17 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDDeviceMessengerService service](self, "service", v37));
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  uint64_t v18 = [v17 sendProtobuf:v12 toDestinations:v8 priority:200 options:v13 identifier:&v41 error:&v40];
  __int16 v19 = v41;
  id v16 = v40;

  if (v18 && !v16)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v20) {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v20 OSLogObject]);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v23 = objc_opt_class(self, v22);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v6 logKey]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v43 = v23;
      __int16 v44 = 2114;
      uint64_t v45 = v24;
      id v46 = 2114;
      id v47 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully sent message: %{public}@",  buf,  0x20u);
    }

    if (([v6 isReply] & 1) == 0)
    {
      uint64_t v25 = [v6 copy];
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      [v25 setReceiptDate:v26];

      if (!-[AMSDDeviceMessengerService _attemptAutomaticHandleForMessage:]( self,  "_attemptAutomaticHandleForMessage:",  v25)) {
        -[AMSDDeviceMessengerService _saveMessage:](self, "_saveMessage:", v25);
      }
    }

    if (v7)
    {
      uint64_t v27 = [v7 copy];
      uint64_t v28 = objc_retainBlock(v27);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDDeviceMessengerService outgoingMessageReplyHandlers](self, "outgoingMessageReplyHandlers"));
      [v29 setObject:v28 forKeyedSubscript:v19];
    }

    id v16 = 0LL;
    LOBYTE(v1_Block_object_dispose((const void *)(v31 - 176), 8) = 1;
    goto LABEL_32;
  }

  *a3 = result;
  a3[1] = v5;
  return result;
}

LABEL_26:
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig", v37));
  if (!v31) {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v31 OSLogObject]);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    __int16 v34 = objc_opt_class(self, v33);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v6 logKey]);
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v43 = v34;
    __int16 v44 = 2114;
    uint64_t v45 = v35;
    id v46 = 2114;
    id v47 = v6;
    id v48 = 2114;
    uint64_t v49 = v39;
    uint64_t v50 = 2114;
    uint64_t v51 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to send message: %{public}@ to: %{public}@ error: %{public}@",  buf,  0x34u);
  }

  if (v7) {
    (*((void (**)(id, void, id))v7 + 2))(v7, 0LL, v16);
  }
LABEL_32:

  return v18;
}

    sub_100055EF8();
  }

  sub_1000561CC();
  if (v60 != v61)
  {
    if (!*(void *)(v64 + 8 * v66))
    {
      while (1)
      {
        id v53 = v66 + 1;
        if (__OFADD__(v66, 1LL)) {
          goto LABEL_44;
        }
        if (v53 >= v65) {
          goto LABEL_36;
        }
        ++v66;
        if (*(void *)(v64 + 8 * v53)) {
          goto LABEL_26;
        }
      }
    }

    id v53 = v66;
    goto LABEL_26;
  }

    uint64_t v58 = &qword_1000F0528;
    uint64_t v59 = v67;
    goto LABEL_27;
  }

  id v70 = v135;
  sub_100054CB4(v67, v135, &qword_1000F02A8);
  sub_1000641FC(v69);
  if (v71)
  {
    sub_1000643B4(v138);
    sub_1000643B4(v139);
    sub_100064740();
    sub_100064754(v70, v72);
    goto LABEL_26;
  }

  v73 = v140;
  id v74 = v136;
  sub_100064584(v136, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 32));
  sub_100055290( &qword_1000F0530,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  id v75 = sub_1000643D8(v70, v74);
  id v76 = v70;
  v77 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v77(v74, v54);
  sub_100055D80(v138);
  sub_100055D80(v139);
  v77(v76, v54);
  uint64_t v65 = v143;
  sub_100055D80(v137);
  if ((v75 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_30:
  if ((static Date.== infix(_:_:)(v6 + v63[7], v65 + v63[7]) & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v78 = sub_1000646EC(v63[8]);
  if (v55)
  {
    uint64_t v26 = v132;
    __int16 v81 = v133;
    id v82 = v134;
    if (v80 != 3) {
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v26 = v132;
    __int16 v81 = v133;
    id v82 = v134;
    if (v80 == 3 || (sub_10005D288(v78, v79) & 1) == 0) {
      goto LABEL_28;
    }
  }

  sub_1000642B4(v6 + v63[9], v82);
  sub_1000642B4(v65 + v63[9], v81);
  sub_10006475C();
  v84 = (uint64_t)&v26[v83];
  sub_1000642B4(v82, (uint64_t)v26);
  sub_1000642B4(v81, v84);
  sub_1000641FC((uint64_t)v26);
  if (v55)
  {
    sub_100055D80(v81);
    sub_100055D80(v82);
    sub_1000641FC(v84);
    if (v55)
    {
      sub_100054CE0((uint64_t)v26, &qword_1000F02A8);
      goto LABEL_46;
    }

    goto LABEL_16;
  }

  __int16 v85 = v131;
  sub_100054CB4((uint64_t)v26, v131, &qword_1000F02A8);
  sub_1000641FC(v84);
  if (v86)
  {
    sub_1000643B4(v133);
    sub_1000643B4(v134);
    sub_100064740();
    uint64_t v57 = v85;
    goto LABEL_15;
  }

  uint64_t v87 = sub_100064850();
  v88(v87, v84, v54);
  sub_100055290( &qword_1000F0530,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  id v89 = sub_1000643D8(v85, (uint64_t)v26);
  sub_1000645A0((uint64_t)v26);
  sub_100055D80(v133);
  sub_100055D80(v134);
  sub_1000645A0(v85);
  __int16 v63 = v120;
  sub_100055D80((uint64_t)v132);
  if ((v89 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_46:
  v90 = sub_1000646EC(v63[10]);
  if (v55)
  {
    uint64_t v93 = v130;
    __int16 v94 = v119;
    if (v92 != 3) {
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v93 = v130;
    __int16 v94 = v119;
    if (v92 == 3 || (sub_10005D288(v90, v91) & 1) == 0) {
      goto LABEL_28;
    }
  }

  sub_1000642B4(v6 + v63[11], v93);
  uint64_t v95 = v65 + v63[11];
  v96 = v128;
  sub_1000642B4(v95, v128);
  sub_10006475C();
  v97 = v129;
  v99 = v129 + v98;
  sub_1000642B4(v93, v129);
  v100 = v97;
  sub_100054CB4(v96, v99, &qword_1000F02A8);
  sub_1000641FC(v97);
  if (v55)
  {
    sub_100055D80(v96);
    v100 = v129;
    sub_100054CE0(v93, &qword_1000F02A8);
    sub_1000641FC(v99);
    if (v55)
    {
      sub_100054CE0(v100, &qword_1000F02A8);
LABEL_62:
      v107 = v120;
      if (*(void *)(v6 + v120[12]) != *(void *)(v65 + v120[12])) {
        goto LABEL_28;
      }
      v108 = v6 + v120[13];
      v109 = v126;
      sub_1000642B4(v108, (uint64_t)v126);
      v110 = v125;
      sub_1000642B4(v65 + v107[13], v125);
      v111 = v94 + *(int *)(v122 + 48);
      sub_1000642B4((uint64_t)v109, v94);
      sub_1000642B4(v110, v111);
      v112 = v123;
      sub_100064248(v94, 1LL, v123);
      if (v55)
      {
        sub_100055D80(v110);
        sub_100055D80((uint64_t)v109);
        sub_100064248(v111, 1LL, v112);
        if (v55)
        {
          sub_100054CE0(v94, &qword_1000F02F0);
          goto LABEL_28;
        }

        v114 = &qword_1000F0520;
      }

      else
      {
        sub_100054CB4(v94, (uint64_t)v124, &qword_1000F02F0);
        sub_100064248(v111, 1LL, v112);
        if (v113)
        {
          v114 = &qword_1000F0520;
        }

        else
        {
          v115 = v121;
          sub_100054E20(v111, (uint64_t)v121, type metadata accessor for CachedServerDataSyncAttempt);
          if (*v124 == *v115)
          {
            v116 = v124;
            static Date.== infix(_:_:)(&v124[*(int *)(v123 + 20)], &v115[*(int *)(v123 + 20)]);
            sub_10006438C((uint64_t)v115);
            sub_100064808(v125);
            sub_100064808((uint64_t)v126);
            sub_10006438C((uint64_t)v116);
            sub_100064808(v94);
            goto LABEL_28;
          }

          sub_100054F80((uint64_t)v115, type metadata accessor for CachedServerDataSyncAttempt);
          v114 = &qword_1000F02F0;
        }

        sub_100055D80(v125);
        sub_100055D80((uint64_t)v126);
        sub_100054F80((uint64_t)v124, type metadata accessor for CachedServerDataSyncAttempt);
      }

      uint64_t v59 = v94;
      uint64_t v58 = v114;
      goto LABEL_27;
    }

    goto LABEL_60;
  }

  v101 = v97;
  v102 = v127;
  sub_100054CB4(v101, v127, &qword_1000F02A8);
  sub_1000641FC(v99);
  if (v103)
  {
    sub_1000643B4(v128);
    sub_1000643B4(v130);
    sub_100064740();
    sub_100064754(v102, v104);
LABEL_60:
    uint64_t v58 = &qword_1000F0528;
    uint64_t v59 = v100;
    goto LABEL_27;
  }

  v105 = sub_100064850();
  sub_100064584(v105, v106);
  sub_100055290( &qword_1000F0530,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  LODWORD(v142) = sub_1000643D8(v102, v93);
  sub_1000645A0(v93);
  sub_100055D80(v128);
  sub_100055D80(v130);
  sub_1000645A0(v102);
  sub_100055D80(v100);
  if ((v142 & 1) != 0) {
    goto LABEL_62;
  }
LABEL_28:
  sub_1000642E8();
}

id sub_100015E94(uint64_t a1, void *a2)
{
  return _[a2 deviceMessengerDidClearMessage:*(void *)(a1 + 32)];
}

LABEL_48:
  -[AMSDDeviceMessengerService setCachedMessages:](v42, "setCachedMessages:", 0LL);
}

LABEL_13:
    goto LABEL_28;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDDeviceMessengerService _getSavedMessages](self, "_getSavedMessages"));
  uint64_t v9 = [v8 mutableCopy];
  uint64_t v10 = v9;
  if (v9) {
    uint64_t v11 = (NSMutableArray *)v9;
  }
  else {
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  }
  __int16 v12 = v11;

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  if (v18)
  {
    __int16 v19 = -[NSMutableArray count](v12, "count");
    if ((uint64_t)v19 - 1 >= 0)
    {
      __int16 v21 = (uint64_t)v19;
      *(void *)&uint64_t v20 = 138543874LL;
      uint64_t v31 = v20;
      while (1)
      {
        id v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v12, "objectAtIndexedSubscript:", --v21, v31));
        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 identifier]);
        if (![v23 length]) {
          goto LABEL_25;
        }
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 identifier]);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
        uint64_t v26 = [v24 isEqualToString:v25];

        if (v26) {
          break;
        }
LABEL_26:

        if (v21 <= 0) {
          goto LABEL_27;
        }
      }

      -[NSMutableArray removeObjectAtIndex:](v12, "removeObjectAtIndex:", v21);
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      if (!v23) {
        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue([v23 OSLogObject]);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = objc_opt_class(self, v28);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v4 logKey]);
        *(_DWORD *)__int128 buf = v31;
        uint64_t v33 = v29;
        __int16 v34 = 2114;
        id v35 = v30;
        id v36 = 2114;
        __int128 v37 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Removing duplicate message: %{public}@",  buf,  0x20u);
      }

LABEL_25:
      goto LABEL_26;
    }
  }

LABEL_27:
  -[NSMutableArray addObject:](v12, "addObject:", v4);
  -[AMSDDeviceMessengerService _overwriteSavedMessages:](self, "_overwriteSavedMessages:", v12);
LABEL_28:
}
}

  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "users", v45));
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_10004218C;
  v46[3] = &unk_1000D7D28;
  uint64_t v42 = *(void *)(a1 + 32);
  uint64_t v43 = *(void **)(a1 + 40);
  id v47 = v3;
  id v48 = v42;
  uint64_t v49 = v43;
  __int16 v44 = v3;
  [v41 enumerateObjectsUsingBlock:v46];
}

  __break(1u);
  return result;
}

    id v8 = (v13 - 1) & v13;
  }

  uint64_t v20 = v19 + 5;
  if (v20 >= v27)
  {
LABEL_32:
    swift_release(a3);
    return;
  }

  uint64_t v13 = *(void *)(v26 + 8 * v20);
  if (v13)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    sub_10008D2D0();
    if (v14 == v15) {
      goto LABEL_32;
    }
    sub_10008D2C4();
    uint64_t v20 = v21 + 1;
    if (v13) {
      goto LABEL_27;
    }
  }

void sub_100016EE4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AMSDDismissQRDialogService);
  id v2 = (void *)qword_1000F1FB0;
  qword_1000F1FB0 = (uint64_t)v1;
}

void sub_100016FE4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    id v6 = v5;
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = *(void *)(a1 + 40);
    int v13 = 138543874;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    id v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] QR code dialog start listening for push notifications with identifier: %@",  (uint8_t *)&v13,  0x20u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  id v11 = objc_retainBlock(*(id *)(a1 + 48));
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dismissalCompletionQueue]);
  [v12 setObject:v11 forKeyedSubscript:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
}

uint64_t sub_100017228(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    id v6 = v5;
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = *(void *)(a1 + 40);
    int v13 = 138543874;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    id v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] QR code dialog stop listening for push notifications with identifier: %@",  (uint8_t *)&v13,  0x20u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dismissalCompletionQueue]);
  [v11 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10001743C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    id v6 = v5;
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = *(void *)(a1 + 40);
    int v15 = 138543874;
    id v16 = v5;
    __int16 v17 = 2114;
    uint64_t v18 = v9;
    __int16 v19 = 2112;
    uint64_t v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] QR code dialog notified for dismissal with identifier: %@",  (uint8_t *)&v15,  0x20u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dismissalCompletionQueue]);
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  int v13 = (void (**)(void))[v12 copy];

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dismissalCompletionQueue]);
  [v14 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  if (v13) {
    v13[2](v13);
  }
}

id sub_100017808(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v56 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v8 = AMSLogKey(v56, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) home]);
    uint64_t v11 = AMSHashIfNeeded(v10);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) user]);
    uint64_t v14 = AMSHashIfNeeded(v13);
    uint64_t v58 = a2;
    int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    uint64_t v17 = AMSHashIfNeeded(v16);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    unsigned int v19 = [*(id *)(a1 + 32) createIfMissing];
    *(_DWORD *)__int128 buf = 138544642;
    uint64_t v20 = @"false";
    uint64_t v63 = v56;
    __int16 v64 = 2114;
    if (v19) {
      uint64_t v20 = @"true";
    }
    uint64_t v65 = v9;
    __int16 v66 = 2114;
    uint64_t v67 = v12;
    __int16 v68 = 2114;
    uint64_t v69 = v15;
    __int16 v70 = 2114;
    uint64_t v71 = (uint64_t)v18;
    __int16 v72 = 2114;
    v73 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}@: [%{public}@] Fetching a record zone. home = %{public}@ | user = %{public}@ | database = %{public}@ | c reateIfMissing = %{public}@",  buf,  0x3Eu);

    a2 = v58;
  }

  [*(id *)(a1 + 32) enqueBeginMetrics];
  __int16 v21 = *(void **)(a1 + 32);
  id v61 = 0LL;
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 _fetchRecordZoneWithError:&v61]);
  id v23 = v61;
  uint64_t v24 = v23;
  if (v22)
  {
    id v25 = v22;
    goto LABEL_31;
  }

  if (objc_msgSend(v23, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7))
  {
    if ([*(id *)(a1 + 32) createIfMissing])
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      unsigned __int8 v27 = [v26 isPrivateDatabase];

      if ((v27 & 1) != 0)
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v28) {
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 OSLogObject]);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v31 = objc_opt_class(*(void *)(a1 + 32), v30);
          uint64_t v33 = AMSLogKey(v31, v32);
          __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v63 = v31;
          __int16 v64 = 2114;
          uint64_t v65 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}@: [%{public}@] The record zone doesn't exist. Creating it.",  buf,  0x16u);
        }

        id v35 = *(void **)(a1 + 32);
        id v60 = 0LL;
        id v25 = (id)objc_claimAutoreleasedReturnValue([v35 _createRecordZoneWithError:&v60]);
        id v36 = v60;
        __int128 v37 = v36;
        if (v36)
        {
          if (a2) {
            *a2 = v36;
          }
          [*(id *)(a1 + 32) enqueFailedMetrics:v37];
        }

        goto LABEL_31;
      }
    }
  }

  else
  {
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v38) {
      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue([v38 OSLogObject]);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v54 = objc_opt_class(*(void *)(a1 + 32), v40);
      uint64_t v42 = AMSLogKey(v54, v41);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) home]);
      uint64_t v44 = AMSHashIfNeeded(v57);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) user]);
      uint64_t v46 = AMSHashIfNeeded(v55);
      id v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
      id v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      uint64_t v49 = AMSHashIfNeeded(v48);
      uint64_t v50 = objc_claimAutoreleasedReturnValue(v49);
      uint64_t v59 = a2;
      uint64_t v51 = (void *)v50;
      *(_DWORD *)__int128 buf = 138544642;
      uint64_t v52 = @"true";
      uint64_t v63 = v54;
      __int16 v64 = 2114;
      if (!v24) {
        uint64_t v52 = @"false";
      }
      uint64_t v65 = v43;
      __int16 v66 = 2114;
      uint64_t v67 = v45;
      __int16 v68 = 2114;
      uint64_t v69 = v47;
      __int16 v70 = 2114;
      uint64_t v71 = v50;
      __int16 v72 = 2114;
      v73 = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to fetch a record zone. home = %{public}@ | user = %{public}@ | database = %{pub lic}@ | error = %{public}@",  buf,  0x3Eu);

      a2 = v59;
    }
  }

  if (a2) {
    *a2 = v24;
  }
  objc_msgSend(*(id *)(a1 + 32), "enqueFailedMetrics:", v24, v54);
  id v25 = 0LL;
LABEL_31:

  return v25;
}

id sub_100018B08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isDefaultRecordZone])
  {
    id v4 = 0LL;
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDHomeManager identifiersForRecordZone:inDatabase:qualityOfService:]( AMSDHomeManager,  "identifiersForRecordZone:inDatabase:qualityOfService:",  v3,  v5,  [*(id *)(a1 + 32) qualityOfService]));
    id v25 = 0LL;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 resultWithError:&v25]);
    id v8 = v25;

    if (v7)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) home]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 first]);
      if ([v10 isEqual:v11])
      {
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) user]);
        int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 second]);
        id v4 = [v13 isEqual:v14];
      }

      else
      {
        id v4 = 0LL;
      }
    }

    else
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v9) {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = objc_opt_class(*(void *)(a1 + 32), v15);
        uint64_t v18 = AMSLogKey(v16, v17);
        unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        uint64_t v20 = AMSHashIfNeeded(v3);
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        uint64_t v22 = AMSHashIfNeeded(v8);
        id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v27 = v16;
        __int16 v28 = 2114;
        uint64_t v29 = v19;
        __int16 v30 = 2114;
        uint64_t v31 = v21;
        __int16 v32 = 2114;
        uint64_t v33 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to fetch home/home user identifiers for a record zone. recordZone = %{public}@ | error = %{public}@",  buf,  0x2Au);
      }

      id v4 = 0LL;
    }
  }

  return v4;
}

id sub_10001916C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = AMSSetLogKeyIfNeeded(a1, a2, a3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  if (!v6) {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138543874;
    id v36 = v9;
    __int16 v37 = 2114;
    __int128 v38 = v5;
    __int16 v39 = 2112;
    uint64_t v40 = v10;
    id v11 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Running fraud report blinding message task. (transactionId: %@)",  buf,  0x20u);
  }

  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 URLForKey:AMSBagKeyFraudReportPKSService]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 valuePromise]);

  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_100019410;
  v31[3] = &unk_1000D6378;
  id v15 = *(id *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 32);
  id v32 = v15;
  uint64_t v33 = v16;
  id v17 = v5;
  id v34 = v17;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 continueWithBlock:v31]);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_100019624;
  v29[3] = &unk_1000D63A0;
  v29[4] = *(void *)(a1 + 32);
  id v19 = v17;
  id v30 = v19;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 continueWithBlock:v29]);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10001978C;
  v25[3] = &unk_1000D63C8;
  __int16 v21 = *(void **)(a1 + 40);
  v25[4] = *(void *)(a1 + 32);
  id v26 = v19;
  id v27 = v21;
  id v28 = *(id *)(a1 + 48);
  id v22 = v19;
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v20 continueWithBlock:v25]);

  return v23;
}

id sub_100019410(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByAppendingPathComponent:"));

      id v5 = (id)v8;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
    if (!v9) {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = (void *)objc_opt_class(*(void *)(a1 + 40), v11);
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v24 = v12;
      __int16 v25 = 2114;
      uint64_t v26 = v13;
      id v14 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fraud report blinding message - obtaining keys",  buf,  0x16u);
    }

    id v15 = objc_alloc(&OBJC_CLASS___AMSURLRequestEncoder);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bag]);
    id v17 = [v15 initWithBag:v16];

    [v17 setDialogOptions:1];
    [v17 setRequestEncoding:1];
    [v17 setUrlKnownToBeTrusted:1];
    [v17 setLogUUID:*(void *)(a1 + 48)];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 requestWithMethod:2 URL:v5 parameters:0]);
  }

  else
  {
    id v22 = v6;
    uint64_t v19 = AMSErrorWithFormat( 2LL,  @"Fraud report blinding message failed",  @"Invalid parameters (bag url missing)");
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v20, v22));
  }

  return v18;
}

id sub_100019624(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSURLSession defaultSession](&OBJC_CLASS___AMSURLSession, "defaultSession"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 dataTaskPromiseWithRequest:v5]);
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
    if (!v9) {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = objc_opt_class(*(void *)(a1 + 32), v11);
      uint64_t v13 = *(void *)(a1 + 40);
      int v15 = 138543874;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      id v20 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%{public}@ [%{public}@] Error fraud report blinding message, cannot create request: %{public}@",  (uint8_t *)&v15,  0x20u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v6));
  }

  return v8;
}

id sub_10001978C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  uint64_t v8 = (void *)v7;
  if (v5)
  {
    if (!v7) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (void *)objc_opt_class(a1[4], v10);
      uint64_t v12 = a1[5];
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v28 = (uint64_t)v11;
      __int16 v29 = 2114;
      uint64_t v30 = v12;
      id v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fraud report blinding message - obtaining keys success",  buf,  0x16u);
    }

    uint64_t v14 = a1[6];
    int v15 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    uint64_t v16 = a1[7];
    id v26 = 0LL;
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDFraudReportPrivacyTask _blindedTransactionWithTransactionID:pks:keyID:error:]( &OBJC_CLASS___AMSDFraudReportPrivacyTask,  "_blindedTransactionWithTransactionID:pks:keyID:error:",  v14,  v15,  v16,  &v26));
    id v18 = v26;

    if (v17) {
      uint64_t v19 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v17));
    }
    else {
      uint64_t v19 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v18));
    }
    uint64_t v24 = (void *)v19;
  }

  else
  {
    if (!v7) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = objc_opt_class(a1[4], v21);
      uint64_t v23 = a1[5];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v28 = v22;
      __int16 v29 = 2114;
      uint64_t v30 = v23;
      __int16 v31 = 2114;
      id v32 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%{public}@ [%{public}@] Error fraud report blinding message, cannot fetch the pks key: %{public}@",  buf,  0x20u);
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v6));
  }

  return v24;
}

void sub_10001A148(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  if (!v7) {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_opt_class(*(void *)(a1 + 32), v9);
    id v11 = v10;
    uint64_t v13 = AMSLogKey(v11, v12);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v56 = v10;
    __int16 v57 = 2114;
    uint64_t v58 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Finished blinding transaction.",  buf,  0x16u);
  }

  if (v5)
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fsrData]);
    id v54 = 0LL;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDFraudReportService _reportedScoreFromFSRDataString:error:]( &OBJC_CLASS___AMSDFraudReportService,  "_reportedScoreFromFSRDataString:error:",  v15,  &v54));
    id v17 = v54;

    if (v16)
    {
      id v18 = objc_alloc(&OBJC_CLASS___AMSDFraudReportServiceRequest);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nameSpace]);
      id v20 = [v16 unsignedCharValue];
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 blindedMessage]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v5 keyID]);
      uint64_t v23 = -[AMSDFraudReportServiceRequest initWithNameSpace:reportedScore:blindedMessage:keyID:authenticationTokenType:shouldIncludeODIAssessment:]( v18,  "initWithNameSpace:reportedScore:blindedMessage:keyID:authenticationTokenType:shouldIncludeODIAssessment:",  v19,  v20,  v21,  v22,  [*(id *)(a1 + 40) authenticationTokenType],  0);

      uint64_t v24 = objc_alloc(&OBJC_CLASS___AMSDFraudReportServiceTask);
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) account]);
      id v26 = -[AMSDFraudReportServiceTask initWithAccount:bag:](v24, "initWithAccount:bag:", v25, *(void *)(a1 + 48));

      id v27 = (void *)objc_claimAutoreleasedReturnValue( -[AMSDFraudReportServiceTask performReceiveFraudReportForServiceRequest:]( v26,  "performReceiveFraudReportForServiceRequest:",  v23));
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_10001A664;
      v51[3] = &unk_1000D6418;
      id v53 = *(id *)(a1 + 56);
      id v52 = v5;
      [v27 resultWithCompletion:v51];
    }

    else
    {
      unsigned int v29 = +[AMSUnitTests isRunningUnitTests](&OBJC_CLASS___AMSUnitTests, "isRunningUnitTests");
      uint64_t v30 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
      __int16 v31 = (void *)v30;
      if (v29)
      {
        if (!v30) {
          __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v31 OSLogObject]);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          id v34 = (void *)objc_opt_class(*(void *)(a1 + 32), v33);
          id v49 = v34;
          uint64_t v36 = AMSLogKey(v49, v35);
          __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          uint64_t v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ams_title"));
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v56 = v34;
          __int16 v57 = 2114;
          uint64_t v58 = v37;
          __int16 v59 = 2114;
          uint64_t v60 = v38;
          __int16 v39 = (void *)v38;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to parse reported score from fsrData: %{public}@",  buf,  0x20u);
        }

        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedFraudReportConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedFraudReportConfig"));
        [v31 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v40 userInfo:0];
      }

      else
      {
        if (!v30) {
          __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue([v31 OSLogObject]);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
        {
          uint64_t v42 = (void *)objc_opt_class(*(void *)(a1 + 32), v41);
          id v50 = v42;
          uint64_t v44 = AMSLogKey(v50, v43);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ams_title"));
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v56 = v42;
          __int16 v57 = 2114;
          uint64_t v58 = v45;
          __int16 v59 = 2114;
          uint64_t v60 = (uint64_t)v46;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "%{public}@: [%{public}@] Unable to parse reported score from fsrData: %{public}@",  buf,  0x20u);
        }
      }

      uint64_t v47 = *(void *)(a1 + 56);
      uint64_t v48 = AMSError(7LL, @"Reported score not found", @"Unable to find reported score in fsrData", v17);
      uint64_t v23 = (AMSDFraudReportServiceRequest *)objc_claimAutoreleasedReturnValue(v48);
      (*(void (**)(uint64_t, void, AMSDFraudReportServiceRequest *))(v47 + 16))(v47, 0LL, v23);
    }
  }

  else
  {
    uint64_t v28 = *(void *)(a1 + 56);
    id v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, id))(v28 + 16))(v28, 0LL, v17);
  }
}

void sub_10001A664(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tdmToken]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pks]);
    id v13 = 0LL;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDFraudReportPrivacyTask performUnBlindingFraudReportForResponse:tdmToken:pks:error:]( &OBJC_CLASS___AMSDFraudReportPrivacyTask,  "performUnBlindingFraudReportForResponse:tdmToken:pks:error:",  v5,  v6,  v7,  &v13));
    id v9 = v13;

    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void *, void *))(v10 + 16))(v10, v8, v11);
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v8);
  }
}

LABEL_12:
    id v9 = 0LL;
    goto LABEL_14;
  }

  if (!a4) {
    goto LABEL_12;
  }
  uint64_t v7 = @"Reported score key not found in fsrData string";
LABEL_11:
  uint64_t v8 = AMSError(7LL, v7, 0LL, 0LL);
  id v9 = 0LL;
  *a4 = (id)objc_claimAutoreleasedReturnValue(v8);
LABEL_14:

  return v9;
}

  *(double *)&result = 0.0;
  return result;
}

            uint64_t v35 = v37;
LABEL_9:
            unsigned int v29 = (v36 - 1) & v36;
            __int16 v31 = __clz(__rbit64(v36)) + (v35 << 6);
            id v86 = v35;
            goto LABEL_5;
          }
        }
      }
    }

  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  int v15 = *(void *)(v14 + 48) + 40 * a2;
  uint64_t v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)int v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(void *)(v15 + 32) = *(void *)(v6 + 32);
  id v17 = *(void *)(v14 + 16);
  id v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v14 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10001ACB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

AMSPromise *__cdecl sub_10001ACD4(id a1, ACAccount *a2, NSString *a3)
{
  uint64_t v4 = a3;
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[ACAccount accountStore](v5, "accountStore"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_fetchGrandSlamTokenForAccount:withIdentifier:", v5, v4));

  return (AMSPromise *)v7;
}

AMSPromise *__cdecl sub_10001AD38(id a1, ACAccount *a2, NSString *a3)
{
  return (AMSPromise *)+[AMSDFraudReportServiceTask performSilentAuthAndFetchTokenForAccount:tokenIdentifier:]( &OBJC_CLASS___AMSDFraudReportServiceTask,  "performSilentAuthAndFetchTokenForAccount:tokenIdentifier:",  a2,  a3);
}

AMSDFraudReportODIAssessmentProvider *__cdecl sub_10001AD4C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  if (!v1) {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue([v1 OSLogObject]);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = (void *)objc_opt_class(&OBJC_CLASS___AMSDFraudReportServiceTask, v3);
    id v5 = v4;
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v10 = 138543618;
    id v11 = v4;
    __int16 v12 = 2114;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Platform does not support ODI assessments, but an ODI assessment provider was requested.",  (uint8_t *)&v10,  0x16u);
  }

  return 0LL;
}

id sub_10001AE64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained bag]);
    uint64_t v10 = AMSFraudReportAddDeviceIdentityCertificateAndSignatureToRequest(v5, v6, v9);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  }

  else
  {
    uint64_t v12 = AMSError(0LL, @"self should not be nil", 0LL, 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v9));
  }

  id v13 = (void *)v11;

  return v13;
}

id sub_10001AFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = AMSSetLogKeyIfNeeded(a1, a2, a3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  if (!v6) {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_opt_class(*(void *)(a1 + 32), v8);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v28 = v9;
    __int16 v29 = 2114;
    uint64_t v30 = v5;
    id v10 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Running fraud report service request.",  buf,  0x16u);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 URLForKey:AMSBagKeyFraudReportService]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDFraudReportServiceTask grandSlamTokenIdentifierForAuthenticationTokenType:]( AMSDFraudReportServiceTask,  "grandSlamTokenIdentifierForAuthenticationTokenType:",  [*(id *)(a1 + 40) authenticationTokenType]));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDFraudReportServiceTask determineAccountForAccount:]( &OBJC_CLASS___AMSDFraudReportServiceTask,  "determineAccountForAccount:",  v14));

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10001B1D4;
  v22[3] = &unk_1000D6620;
  uint64_t v16 = *(void **)(a1 + 40);
  v22[4] = *(void *)(a1 + 32);
  id v23 = v12;
  id v24 = v13;
  id v25 = v16;
  id v26 = v5;
  id v17 = v5;
  id v18 = v13;
  id v19 = v12;
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v15 thenWithBlock:v22]);

  return v20;
}

id sub_10001B1D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestEncoderWithAccount:v3]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 requestWithMethod:4 bagURL:*(void *)(a1 + 40) parameters:0]);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10001B348;
  v19[3] = &unk_1000D6530;
  v19[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v20 = v6;
  id v21 = *(id *)(a1 + 48);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 thenWithBlock:v19]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10001B35C;
  v13[3] = &unk_1000D65F8;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = *(id *)(a1 + 48);
  id v10 = v6;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 thenWithBlock:v13]);

  return v11;
}

id sub_10001B348(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) appendTokenIfNeededToRequest:a2 forAccount:*(void *)(a1 + 40) tokenIdentifier:*(void *)(a1 + 48)];
}

id sub_10001B35C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AADeviceInfo currentInfo](&OBJC_CLASS___AADeviceInfo, "currentInfo"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 clientInfoHeader]);

  [v3 setValue:v5 forHTTPHeaderField:AMSHTTPHeaderMMeClientInfo];
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x3032000000LL;
  uint64_t v35 = sub_10001B5D0;
  uint64_t v36 = sub_10001B5E0;
  unsigned int v6 = [*(id *)(a1 + 32) shouldIncludeODIAssessment];
  uint64_t v7 = 0LL;
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 40) + 32LL) + 16LL))();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v8);
  }

  id v37 = v7;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDFraudReportServiceTask requestBodyParametersForRequest:odiAssessmentProvider:]( &OBJC_CLASS___AMSDFraudReportServiceTask,  "requestBodyParametersForRequest:odiAssessmentProvider:",  *(void *)(a1 + 32),  v33[5]));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_10001B5E8;
  v30[3] = &unk_1000D6558;
  v30[4] = *(void *)(a1 + 40);
  id v10 = v3;
  id v31 = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 thenWithBlock:v30]);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10001B604;
  v25[3] = &unk_1000D65A8;
  id v12 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 40);
  id v26 = v12;
  uint64_t v27 = v13;
  id v28 = *(id *)(a1 + 56);
  id v29 = *(id *)(a1 + 64);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 thenWithBlock:v25]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10001B770;
  v20[3] = &unk_1000D65D0;
  id v24 = &v32;
  id v15 = *(id *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = *(void **)(a1 + 48);
  id v21 = v15;
  uint64_t v22 = v16;
  id v23 = v17;
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v14 continueWithBlock:v20]);

  _Block_object_dispose(&v32, 8);
  return v18;
}

void sub_10001B5B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B5D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001B5E0(uint64_t a1)
{
}

uint64_t sub_10001B5E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24LL) + 16LL))();
}

id sub_10001B604(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSURLSession defaultSession](&OBJC_CLASS___AMSURLSession, "defaultSession"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dataTaskPromiseWithRequest:v3]);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10001B6FC;
  v12[3] = &unk_1000D6580;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void **)(a1 + 48);
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = v3;
  id v16 = v8;
  id v17 = *(id *)(a1 + 56);
  id v9 = v3;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 continueWithBlock:v12]);

  return v10;
}

id sub_10001B6FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = (id)AMSSetLogKey(v5);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) handleExpiredAuthenticationTokenErrorWithResult:v7 error:v6 forRequest:*(void *)(a1 + 48) account:*(void *)(a1 + 56) tokenIdentifier:*(void *)(a1 + 64)]);

  return v9;
}

id sub_10001B770(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) provideFeedbackWithOutcome:0];
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0LL;

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 object]);
    id v10 = v9;
    if (v9)
    {
      id v11 = v9;
      uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary, v12);
      if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0) {
        id v14 = v11;
      }
      else {
        id v14 = 0LL;
      }

      if (v14)
      {
        id v28 = objc_alloc(&OBJC_CLASS___AMSFraudReportResponse);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nameSpace]);
        id v30 = [*(id *)(a1 + 32) reportedScore];
        id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyID]);
        id v60 = 0LL;
        id v32 = [v28 initWithResponseDictionary:v14 expectedNamespace:v29 expectedReportedScore:v30 keyID:v31 error:&v60];
        id v33 = v60;

        if (v32)
        {
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
          if (!v34) {
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
          }
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([v34 OSLogObject]);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            id v37 = (void *)objc_opt_class(*(void *)(a1 + 40), v36);
            uint64_t v38 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138543618;
            uint64_t v62 = v37;
            __int16 v63 = 2114;
            uint64_t v64 = v38;
            id v39 = v37;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fraud report received service result",  buf,  0x16u);
          }

          id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v32));
        }

        else
        {
          unsigned int v42 = +[AMSUnitTests isRunningUnitTests](&OBJC_CLASS___AMSUnitTests, "isRunningUnitTests");
          uint64_t v43 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
          uint64_t v44 = (void *)v43;
          if (v42)
          {
            if (!v43) {
              uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
            }
            uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue([v44 OSLogObject]);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              uint64_t v47 = (void *)objc_opt_class(*(void *)(a1 + 40), v46);
              uint64_t v56 = *(void *)(a1 + 48);
              id v58 = v47;
              uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "ams_title"));
              *(_DWORD *)__int128 buf = 138543874;
              uint64_t v62 = v47;
              __int16 v63 = 2114;
              uint64_t v64 = v56;
              __int16 v65 = 2114;
              __int16 v66 = v48;
              _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to parse fraud report response: %{public}@",  buf,  0x20u);
            }

            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
            id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedFraudReportConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedFraudReportConfig"));
            [v44 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v49 userInfo:0];
          }

          else
          {
            if (!v43) {
              uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
            }
            id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue([v44 OSLogObject]);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
            {
              uint64_t v51 = (void *)objc_opt_class(*(void *)(a1 + 40), v50);
              uint64_t v57 = *(void *)(a1 + 48);
              id v59 = v51;
              id v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "ams_title"));
              *(_DWORD *)__int128 buf = 138543874;
              uint64_t v62 = v51;
              __int16 v63 = 2114;
              uint64_t v64 = v57;
              __int16 v65 = 2114;
              __int16 v66 = v52;
              _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_FAULT,  "%{public}@: [%{public}@] Failed to parse fraud report response: %{public}@",  buf,  0x20u);
            }
          }

          uint64_t v53 = AMSError(4LL, @"Failed to create fraud score report response", 0LL, v33);
          id v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v54));
        }
      }

      else
      {
        uint64_t v40 = AMSError(4LL, @"Decoded fraud score report response body was not a dictionary", 0LL, 0LL);
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v41));
      }
    }

    else
    {
      uint64_t v26 = AMSError(4LL, @"No object could be decoded from the fraud score report response body", 0LL, 0LL);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v27));
    }
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
    if (!v15) {
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v15 OSLogObject]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v18 = (void *)objc_opt_class(*(void *)(a1 + 40), v17);
      uint64_t v19 = *(void *)(a1 + 48);
      id v20 = v18;
      uint64_t v21 = AMSLogableError(v6);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v62 = v18;
      __int16 v63 = 2114;
      uint64_t v64 = v19;
      __int16 v65 = 2114;
      __int16 v66 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Fraud report request failed with error: %{public}@",  buf,  0x20u);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) provideFeedbackWithOutcome:1];
    uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = 0LL;

    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v6));
  }

  return v25;
}

LABEL_9:
  id v29 = AMSSetLogKeyIfNeeded(v24, v25, v26);
  id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  if (!v31) {
    id v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v31 OSLogObject]);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v45 = (id)objc_opt_class(self, v33);
    uint64_t v46 = 2114;
    uint64_t v47 = v30;
    uint64_t v34 = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fraud report request failed, server reports authentication token as expired. Attempting silent auth.",  buf,  0x16u);
  }

  uint64_t v35 = (*((uint64_t (**)(void))self->_authTokenRefreshProvider + 2))();
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_10001C074;
  v40[3] = &unk_1000D6670;
  v40[4] = self;
  uint64_t v41 = v30;
  unsigned int v42 = v13;
  uint64_t v43 = v14;
  id v37 = v30;
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v36 continueWithBlock:v40]);

LABEL_16:
  return v38;
}

id sub_10001C074(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  id v8 = (void *)v7;
  if (v5)
  {
    if (!v7) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v11 = (void *)objc_opt_class(*(void *)(a1 + 32), v10);
      uint64_t v12 = *(void *)(a1 + 40);
      int v25 = 138543618;
      uint64_t v26 = v11;
      __int16 v27 = 2114;
      uint64_t v28 = v12;
      id v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Retrieved new authentication token after silent auth, retrying fraud report request.",  (uint8_t *)&v25,  0x16u);
    }

    id v14 = [*(id *)(a1 + 56) mutableCopy];
    [v14 setValue:v5 forHTTPHeaderField:AMSHTTPHeaderAuthorization];
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[AMSURLSession defaultSession](&OBJC_CLASS___AMSURLSession, "defaultSession"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 dataTaskPromiseWithRequest:v14]);
  }

  else
  {
    if (!v7) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = (void *)objc_opt_class(*(void *)(a1 + 32), v18);
      uint64_t v20 = *(void *)(a1 + 40);
      id v21 = v19;
      uint64_t v22 = AMSLogableError(v6);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      int v25 = 138543874;
      uint64_t v26 = v19;
      __int16 v27 = 2114;
      uint64_t v28 = v20;
      __int16 v29 = 2114;
      id v30 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to retrieve updated authentication token after silent auth, not retrying request . Error: %{public}@.",  (uint8_t *)&v25,  0x20u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", *(void *)(a1 + 48)));
  }

  return v16;
}

id sub_10001C3D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  id v6 = (void *)v5;
  if (v4)
  {
    if (!v5) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = AMSSetLogKeyIfNeeded(v8, v9, v10);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      int v24 = 138543874;
      uint64_t v25 = v11;
      __int16 v26 = 2114;
      __int16 v27 = v13;
      __int16 v28 = 2114;
      id v29 = v4;
      id v14 = "%{public}@: [%{public}@] No iTunes account found for the given account | error = %{public}@";
      id v15 = v7;
      uint32_t v16 = 32;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v24, v16);
    }
  }

  else
  {
    if (!v5) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    BOOL v17 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = AMSSetLogKeyIfNeeded(v17, v18, v19);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v21);
      int v24 = 138543618;
      uint64_t v25 = v20;
      __int16 v26 = 2114;
      __int16 v27 = v13;
      id v14 = "%{public}@: [%{public}@] iTunes backing account for given account found.";
      id v15 = v7;
      uint32_t v16 = 22;
      goto LABEL_10;
    }
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", *(void *)(a1 + 32)));
  return v22;
}

AMSPromise *sub_10001C98C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setValue:a2 forHTTPHeaderField:AMSHTTPHeaderAuthorization];
    [*(id *)(a1 + 32) setValue:*(void *)(a1 + 40) forHTTPHeaderField:@"X-Apple-Auth-Token-Identifier"];
  }

  return +[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", *(void *)(a1 + 32));
}

id sub_10001CAE4(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[5];
      uint64_t v8 = a1[6];
      int v13 = 138543874;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      uint64_t v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Token with identifier '%{public}@' found without authentication",  (uint8_t *)&v13,  0x20u);
    }

    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v3));
  }

  else
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1[4] + 16LL) + 16LL))();
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v10);
  }

  uint64_t v11 = (void *)v9;

  return v11;
}

id sub_10001CE40(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountStore]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_fetchGrandSlamTokenForAccount:withIdentifier:", a1[4], a1[5]));

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10001CF14;
  v6[3] = &unk_1000D6710;
  id v7 = a1[4];
  id v8 = a1[6];
  id v9 = a1[5];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 catchWithBlock:v6]);

  return v4;
}

id sub_10001CF14(uint64_t a1)
{
  id v2 = [[AMSAuthKitUpdateTask alloc] initWithAccount:*(void *)(a1 + 32) options:*(void *)(a1 + 40)];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 performAuthKitUpdate]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10001CFC4;
  v6[3] = &unk_1000D66E8;
  id v7 = *(id *)(a1 + 48);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 thenWithBlock:v6]);

  return v4;
}

id sub_10001CFC4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 authenticationResults]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:AKAuthenticationIDMSTokenKey]);

  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0) {
    id v7 = v4;
  }
  else {
    id v7 = 0LL;
  }

  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:*(void *)(a1 + 32)]);
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString, v9);
    if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0) {
      id v11 = v8;
    }
    else {
      id v11 = 0LL;
    }

    if (!v11)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v15 = AMSErrorWithFormat( 7LL,  @"Token not found",  @"Token with identifier '%@' is missing in the IDMS tokens dictionary");
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v16, v18));

      goto LABEL_13;
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v11));
  }

  else
  {
    uint64_t v12 = AMSError(7LL, @"IDMS tokens dictionary is missing", 0LL, 0LL);
    id v11 = (id)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v11));
  }

  uint64_t v14 = (void *)v13;
LABEL_13:

  return v14;
}

void sub_10001D4B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedFraudReportConfig](&OBJC_CLASS___AMSLogConfig, "sharedFraudReportConfig"));
  id v8 = (void *)v7;
  if (a2)
  {
    if (!v7) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 32);
      int v18 = 138543618;
      uint64_t v19 = v10;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] ODI assessment successfully obtained.",  (uint8_t *)&v18,  0x16u);
    }
  }

  else
  {
    if (!v7) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (void *)objc_opt_class(*(void *)(a1 + 56), v12);
      uint64_t v14 = *(void *)(a1 + 32);
      id v15 = v13;
      uint64_t v16 = AMSLogableError(v5);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      int v18 = 138543874;
      uint64_t v19 = v13;
      __int16 v20 = 2114;
      uint64_t v21 = v14;
      __int16 v22 = 2114;
      uint64_t v23 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to obtain ODI assessment, proceeding without one: %{public}@.",  (uint8_t *)&v18,  0x20u);
    }
  }

  [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:@"odiAssessment"];
  [*(id *)(a1 + 48) finishWithResult:*(void *)(a1 + 40)];
}

void sub_10001D8B8(_Unwind_Exception *a1)
{
}

void *sub_10001D8D4(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = objc_alloc_init(&OBJC_CLASS___AMSDMultiUserMetrics);
  [WeakRetained setMetrics:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
  id v6 = [v5 enqueueGenerateMultiUserTokenBeginEvent];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_activeiCloudAccount"));

  unsigned int v9 = [WeakRetained tokenNeedsRegeneration];
  uint64_t v10 = @"accept";
  if (v9) {
    uint64_t v10 = @"tokenRefresh";
  }
  v182 = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v11) {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11 OSLogObject]);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = objc_opt_class(WeakRetained, v13);
    uint64_t v16 = AMSLogKey(v14, v15);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = AMSHashIfNeeded(v8);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v180 = a2;
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained account]);
    uint64_t v21 = AMSHashIfNeeded(v20);
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    uint64_t v23 = objc_claimAutoreleasedReturnValue([WeakRetained home]);
    id v177 = WeakRetained;
    int v24 = v8;
    uint64_t v25 = (void *)v23;
    uint64_t v26 = AMSHashIfNeeded(v23);
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    *(_DWORD *)__int128 buf = 138544642;
    uint64_t v190 = v14;
    __int16 v191 = 2114;
    v192 = v17;
    __int16 v193 = 2114;
    v194 = v182;
    __int16 v195 = 2114;
    v196 = v19;
    __int16 v197 = 2114;
    v198 = v22;
    __int16 v199 = 2114;
    v200 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Generating a multi-user token. action = %{public}@ | iCloudAccount = %{public}@ | iTunesA ccount = %{public}@ | home = %{public}@",  buf,  0x3Eu);

    id v8 = v24;
    id WeakRetained = v177;

    a2 = v180;
  }

  if (v8)
  {
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained home]);
    unsigned int v29 = [v28 isCurrentUserRestrictedGuest];

    if (v29)
    {
      uint64_t v30 = AMSError( 12LL,  @"Multi-User Unavailable",  @"Current user is restricted guest, unable to generate multi-user token.",  0LL);
      id v31 = (__CFString *)objc_claimAutoreleasedReturnValue(v30);
      id v32 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v32) {
        id v32 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue([v32 OSLogObject]);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = objc_opt_class(WeakRetained, v34);
        uint64_t v37 = AMSLogKey(v35, v36);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v190 = v35;
        __int16 v191 = 2114;
        v192 = v38;
        __int16 v193 = 2114;
        v194 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Restricted Guest Error: %{public}@",  buf,  0x20u);
      }

      if (a2) {
        *a2 = v31;
      }

      a2 = 0LL;
      goto LABEL_87;
    }

    v178 = v8;
    id v49 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained controller]);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 cloudContainer]);
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 privateDatabase]);

    id v52 = objc_alloc(&OBJC_CLASS___AMSDFetchMultiUserRecordZoneTask);
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained home]);
    id v54 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained home]);
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v54 currentUser]);
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
    uint64_t v57 = -[AMSDFetchMultiUserRecordZoneTask initWithHome:homeUser:database:metrics:]( v52,  "initWithHome:homeUser:database:metrics:",  v53,  v55,  v51,  v56);

    v175 = v57;
    id v58 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDFetchMultiUserRecordZoneTask performTask](v57, "performTask"));
    id v187 = 0LL;
    id v59 = (void *)objc_claimAutoreleasedReturnValue([v58 resultWithError:&v187]);
    id v60 = v187;

    v176 = v51;
    if (!v59)
    {
      __int16 v70 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v70) {
        __int16 v70 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue([v70 OSLogObject]);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        uint64_t v73 = objc_opt_class(WeakRetained, v72);
        uint64_t v75 = AMSLogKey(v73, v74);
        id v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        uint64_t v77 = AMSHashIfNeeded(v60);
        uint64_t v78 = (__CFString *)objc_claimAutoreleasedReturnValue(v77);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v190 = v73;
        __int16 v191 = 2114;
        v192 = v76;
        __int16 v193 = 2114;
        v194 = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to generate a multi-user token. We couldn't fetch the record zone. error = %{public}@",  buf,  0x20u);
      }

      id v8 = v178;
      if (a2)
      {
        uint64_t v79 = AMSError( 108LL,  @"Multi-User Token Generation Failure",  @"We failed to fetch the record zone.",  v60);
        *a2 = (id)objc_claimAutoreleasedReturnValue(v79);
      }

      __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
      id v80 = [v63 enqueueGenerateMultiUserTokenFailedEventWithError:v60];
      a2 = 0LL;
      goto LABEL_86;
    }

    id v61 = (void *)objc_claimAutoreleasedReturnValue([v59 identifier]);
    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v51 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v61]);
    id v186 = v60;
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v62 resultWithError:&v186]);
    id v64 = v186;

    if (!v63)
    {
      v97 = a2;
      v98 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      id v8 = v178;
      if (!v98) {
        v98 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      v99 = (os_log_s *)objc_claimAutoreleasedReturnValue([v98 OSLogObject]);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
        uint64_t v101 = objc_opt_class(WeakRetained, v100);
        uint64_t v103 = AMSLogKey(v101, v102);
        v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
        uint64_t v105 = AMSHashIfNeeded(v64);
        v106 = (__CFString *)objc_claimAutoreleasedReturnValue(v105);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v190 = v101;
        __int16 v191 = 2114;
        v192 = v104;
        __int16 v193 = 2114;
        v194 = v106;
        _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to generate a multi-user token. We couldn't fetch the home participant. error = %{public}@",  buf,  0x20u);

        id v8 = v178;
      }

      if (v97)
      {
        uint64_t v107 = AMSError( 108LL,  @"Multi-User Token Generation Failure",  @"We failed to fetch the home participant.",  v64);
        void *v97 = (id)objc_claimAutoreleasedReturnValue(v107);
      }

      uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
      id v108 = [v69 enqueueGenerateMultiUserTokenFailedEventWithError:v64];
      a2 = 0LL;
      goto LABEL_85;
    }

    __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
    id v66 = [v65 enqueueCloudKitFetchSuccessEvent];

    id v8 = v178;
    if (([WeakRetained tokenNeedsRegeneration] & 1) != 0
      || ![WeakRetained _shouldGenerateInviteToken])
    {
      uint64_t v69 = 0LL;
    }

    else
    {
      id v185 = 0LL;
      uint64_t v67 = objc_claimAutoreleasedReturnValue([WeakRetained _shareRecord:v63 withError:&v185]);
      id v68 = v185;
      uint64_t v69 = v68;
      if (!v67)
      {
        v174 = v59;
        v155 = a2;
        v156 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v156) {
          v156 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        v157 = (os_log_s *)objc_claimAutoreleasedReturnValue([v156 OSLogObject]);
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
        {
          uint64_t v159 = objc_opt_class(WeakRetained, v158);
          uint64_t v161 = AMSLogKey(v159, v160);
          v162 = v69;
          v163 = (void *)objc_claimAutoreleasedReturnValue(v161);
          uint64_t v164 = AMSHashIfNeeded(v162);
          v165 = (__CFString *)objc_claimAutoreleasedReturnValue(v164);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v190 = v159;
          __int16 v191 = 2114;
          v192 = v163;
          __int16 v193 = 2114;
          v194 = v165;
          _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to generate a multi-user token. We couldn't generate an invite token. error = %{public}@",  buf,  0x20u);

          id v8 = v178;
          uint64_t v69 = v162;
        }

        if (v155) {
          void *v155 = v69;
        }
        id v81 = (id)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
        id v166 = [v81 enqueueGenerateMultiUserTokenFailedEventWithError:v69];
        a2 = 0LL;
        id v59 = v174;
        goto LABEL_84;
      }

      uint64_t v69 = (void *)v67;
    }

    id v184 = v64;
    id v81 = (id)objc_claimAutoreleasedReturnValue( [WeakRetained _generateMultiUserTokenWithAction:v182 iCloudAccount:v178 inviteToken:v69 error:&v184]);
    id v82 = v184;

    uint64_t v83 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsMultiUserConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsMultiUserConfig"));
    v84 = (void *)v83;
    v181 = a2;
    if (v81)
    {
      if (!v83) {
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue([v84 OSLogObject]);
      v170 = v63;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v87 = objc_opt_class(WeakRetained, v86);
        uint64_t v89 = AMSLogKey(v87, v88);
        v90 = v69;
        v91 = (void *)objc_claimAutoreleasedReturnValue(v89);
        uint64_t v92 = AMSHashIfNeeded(v81);
        uint64_t v93 = (__CFString *)objc_claimAutoreleasedReturnValue(v92);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v190 = v87;
        __int16 v191 = 2114;
        v192 = v91;
        __int16 v193 = 2114;
        v194 = v93;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully generated a multi-user token. Saving it. token = %{public}@",  buf,  0x20u);

        id v8 = v178;
        uint64_t v69 = v90;
        __int16 v63 = v170;
      }

      id v183 = v82;
      unsigned __int8 v94 = [WeakRetained _saveMultiUserToken:v81 forHomeParticipant:v63 iCloudAccount:v8 error:&v183];
      id v64 = v183;

      if ((v94 & 1) != 0)
      {
        uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
        id v96 = [v95 enqueueGenerateMultiUserTokenSuccessEvent];

        id v81 = v81;
        a2 = v81;
      }

      else
      {
        id v124 = v81;
        v125 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v125) {
          v125 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        v126 = (os_log_s *)objc_claimAutoreleasedReturnValue([v125 OSLogObject]);
        if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
        {
          uint64_t v128 = objc_opt_class(WeakRetained, v127);
          uint64_t v130 = AMSLogKey(v128, v129);
          v172 = v69;
          v131 = (void *)objc_claimAutoreleasedReturnValue(v130);
          uint64_t v132 = AMSLogableError(v64);
          v133 = (__CFString *)objc_claimAutoreleasedReturnValue(v132);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v190 = v128;
          __int16 v191 = 2114;
          v192 = v131;
          __int16 v193 = 2114;
          v194 = v133;
          _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to save the multi-user token. error = %{public}@",  buf,  0x20u);

          id v8 = v178;
          uint64_t v69 = v172;
        }

        if (v181)
        {
          uint64_t v134 = AMSError( 108LL,  @"Multi-User Token Generation Failure",  @"We failed to save the multi-user token.",  v64);
          void *v181 = (id)objc_claimAutoreleasedReturnValue(v134);
        }

        v135 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
        id v136 = [v135 enqueueGenerateMultiUserTokenFailedEventWithError:v64];

        a2 = 0LL;
        id v81 = v124;
        __int16 v63 = v170;
      }
    }

    else
    {
      if (!v83) {
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      v109 = (os_log_s *)objc_claimAutoreleasedReturnValue([v84 OSLogObject]);
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        id v111 = v82;
        uint64_t v112 = objc_opt_class(WeakRetained, v110);
        uint64_t v114 = AMSLogKey(v112, v113);
        v171 = v69;
        v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
        uint64_t v116 = AMSLogableError(v111);
        v117 = (__CFString *)objc_claimAutoreleasedReturnValue(v116);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v190 = v112;
        id v82 = v111;
        __int16 v191 = 2114;
        v192 = v115;
        __int16 v193 = 2114;
        v194 = v117;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to generate a multi-user token. error = %{public}@",  buf,  0x20u);

        id v8 = v178;
        uint64_t v69 = v171;
      }

      id v179 = v82;
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "ams_underlyingErrorWithDomain:", @"com.apple.AppleIDAuthSupport"));
      v119 = (void *)objc_claimAutoreleasedReturnValue([v118 userInfo]);
      v120 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:@"Status"]);

      uint64_t v122 = objc_opt_class(&OBJC_CLASS___NSDictionary, v121);
      if ((objc_opt_isKindOfClass(v120, v122) & 1) != 0) {
        id v123 = v120;
      }
      else {
        id v123 = 0LL;
      }

      v137 = (void *)objc_claimAutoreleasedReturnValue([v123 objectForKeyedSubscript:@"ec"]);
      uint64_t v139 = objc_opt_class(&OBJC_CLASS___NSNumber, v138);
      v169 = v123;
      if ((objc_opt_isKindOfClass(v137, v139) & 1) != 0) {
        id v140 = v137;
      }
      else {
        id v140 = 0LL;
      }

      if (v140 && [v140 integerValue] == (id)-26091)
      {
        v141 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v141) {
          v141 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        v173 = v69;
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue([v141 OSLogObject]);
        if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
        {
          log = v142;
          uint64_t v144 = objc_opt_class(WeakRetained, v143);
          uint64_t v146 = AMSLogKey(v144, v145);
          v147 = (void *)objc_claimAutoreleasedReturnValue(v146);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v190 = v144;
          v142 = log;
          __int16 v191 = 2114;
          v192 = v147;
          _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] The user isn't part of the home. Deleting the record zone.",  buf,  0x16u);
        }

        v148 = (void *)objc_claimAutoreleasedReturnValue([v59 identifier]);
        v188 = v148;
        v149 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v188,  1LL));
        id v150 = [v176 deleteRecordZonesWithRecordZoneIdentifiers:v149];

        uint64_t v69 = v173;
      }

      v151 = v140;
      id v64 = v179;
      if (v181)
      {
        uint64_t v152 = AMSError( 108LL,  @"Multi-User Token Generation Failure",  @"We failed to generate or save the multi-user token.",  v179);
        void *v181 = (id)objc_claimAutoreleasedReturnValue(v152);
      }

      v153 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained metrics]);
      id v154 = [v153 enqueueGenerateMultiUserTokenFailedEventWithError:v179];

      a2 = 0LL;
    }

LABEL_84:
LABEL_85:
    id v60 = v64;
LABEL_86:

    goto LABEL_87;
  }

  id v39 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v39) {
    id v39 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue([v39 OSLogObject]);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    uint64_t v42 = objc_opt_class(WeakRetained, v41);
    uint64_t v44 = AMSLogKey(v42, v43);
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v190 = v42;
    __int16 v191 = 2114;
    v192 = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to generate a multi-user token. There's no active iCloud account.",  buf,  0x16u);
  }

  if (a2)
  {
    uint64_t v46 = AMSError( 103LL,  @"No iCloud Account",  @"The user must be signed into iCloud in order to generate a multi-user token.",  0LL);
    id v47 = (id)objc_claimAutoreleasedReturnValue(v46);
    uint64_t v48 = a2;
    a2 = 0LL;
    *uint64_t v48 = v47;
  }

LABEL_87:
  return a2;
}

id sub_10001EF4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));
  }
  id v5 = (void *)v4;

  return v5;
}

id sub_10001EFBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    id v4 = 0LL;
  }

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 participants]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_firstObjectPassingTest:", &stru_1000D67C8));

    if (v6 && [v6 participantStatus] == (id)1)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v7) {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
        uint64_t v12 = AMSLogKey(v10, v11);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        int v18 = 138543618;
        uint64_t v19 = v10;
        __int16 v20 = 2114;
        uint64_t v21 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Removing the home owner as a share participant.",  (uint8_t *)&v18,  0x16u);
      }

      [v4 removeParticipant:v6];
      uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _saveRecord:v4 database:*(void *)(a1 + 40)]);
    }

    else
    {
      uint64_t v14 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
    }
  }

  else
  {
    uint64_t v15 = AMSCustomError( @"AMSDCloudDataErrorDomain",  0LL,  @"Unknown Cloud Data Error",  @"Created share is of the wrong type.",  0LL,  0LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v14 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v6));
  }

  uint64_t v16 = (void *)v14;

  return v16;
}

BOOL sub_10001F1D4(id a1, AMSDCloudDataShareParticipant *a2)
{
  return -[AMSDCloudDataShareParticipant participantRole](a2, "participantRole") != (id)1;
}

id sub_10001F1F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    id v4 = 0LL;
  }

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 homeManager]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudContainer]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) home]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 sendCloudShare:v4 inContainer:v8 toOwnerOfHome:v9]);
  }

  else
  {
    uint64_t v11 = AMSCustomError( @"AMSDCloudDataErrorDomain",  0LL,  @"Unknown Cloud Data Error",  @"Updated share is of the wrong type.",  0LL,  0LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v5));
  }

  return v10;
}

AMSPromise *__cdecl sub_10001F438(id a1, AMSAuthKitUpdateResult *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[AMSAuthKitUpdateResult authenticationResults](a2, "authenticationResults"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"AKIDMSToken"]);

  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0) {
    id v6 = v3;
  }
  else {
    id v6 = 0LL;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"com.apple.gs.itunes.mu.idmsws"]);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
  if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0) {
    id v10 = v7;
  }
  else {
    id v10 = 0LL;
  }

  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v10));
  }

  else
  {
    uint64_t v12 = AMSError( 101LL,  @"Token Generation Failed",  @"The silent AuthKit authentication was successful, but the result was missing the multi-user token.",  0LL);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v13));
  }

  return (AMSPromise *)v11;
}

void sub_10001F7E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
  id v5 = [v4 enqueueCloudKitSaveRecordFinishEventWithError:v6];
}

void sub_10001FAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001FB9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id sub_10001FBC0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001FC6C;
  v8[3] = &unk_1000D68A8;
  v8[4] = WeakRetained;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_mapWithTransform:", v8));

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v5));
  return v6;
}

AMSDHomeKitHome *sub_10001FC6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[AMSDHomeKitHome initWithHome:dataSource:]( objc_alloc(&OBJC_CLASS___AMSDHomeKitHome),  "initWithHome:dataSource:",  v3,  *(void *)(a1 + 32));

  return v4;
}

id sub_10001FEE8(uint64_t a1, void *a2)
{
  return [a2 setDelegate:*(void *)(a1 + 32)];
}

id sub_1000201F4(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000202D4;
  v8[3] = &unk_1000D6920;
  id v9 = *(id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_firstObjectPassingTest:", v8));
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v3));
  }

  else
  {
    uint64_t v5 = AMSError(7LL, 0LL, 0LL, 0LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v6));
  }

  return v4;
}

id sub_1000202D4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id sub_1000204F4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

BOOL sub_100020860(id a1, HMAccessory *a2)
{
  return -[HMAccessory isCurrentAccessory](a2, "isCurrentAccessory");
}

void sub_100020A20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

id sub_100020A44(id a1, AMSDCloudDataContainer *a2)
{
  return -[AMSDCloudDataContainer identifier](a2, "identifier");
}

void sub_100020A4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  if (!v3)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v7) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      uint64_t v17 = objc_opt_class(WeakRetained, v16);
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t v19 = 138543618;
      *(void *)&v19[4] = v17;
      *(_WORD *)&v19[12] = 2114;
      *(void *)&v19[14] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully registered to receive CloudKit shares via HomeKit.",  v19,  0x16u);
    }

    goto LABEL_14;
  }

  *(void *)uint64_t v19 = 0LL;
  *(void *)&v19[8] = v19;
  *(void *)&v19[16] = 0x2020000000LL;
  id v5 = (void *)qword_1000F1FD0;
  uint64_t v20 = qword_1000F1FD0;
  if (!qword_1000F1FD0)
  {
    id v6 = (void *)sub_10002308C();
    id v5 = dlsym(v6, "HMErrorDomain");
    *(void *)(*(void *)&v19[8] + 24LL) = v5;
    qword_1000F1FD0 = (uint64_t)v5;
  }

  _Block_object_dispose(v19, 8);
  if (!v5) {
    sub_100097AC0();
  }
  if ((objc_msgSend(v3, "ams_hasDomain:code:", *v5, 1, *(void *)v19) & 1) == 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v7) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = objc_loadWeakRetained((id *)(a1 + 40));
      uint64_t v11 = objc_opt_class(v9, v10);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = AMSLogableError(v3);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)uint64_t v19 = 138543874;
      *(void *)&v19[4] = v11;
      *(_WORD *)&v19[12] = 2114;
      *(void *)&v19[14] = v12;
      *(_WORD *)&v19[22] = 2114;
      uint64_t v20 = (uint64_t)v14;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to register to accept CloudKit shares. error = %{public}@",  v19,  0x20u);
    }

LABEL_14:
  }
}

void sub_100020CA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100021030( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

id sub_100021050(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 finishWithError:a2];
  }
  else {
    return [v2 finishWithSuccess];
  }
}

void sub_100021064(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v2) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v9 = 138543618;
    uint64_t v10 = v5;
    __int16 v11 = 2114;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully sent the cloud share repair request.",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_100021164(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v4) {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = AMSHashIfNeeded(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = 138543874;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    uint64_t v16 = v10;
    __int16 v17 = 2114;
    uint64_t v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to send the cloud share repair request. error = %{public}@",  (uint8_t *)&v13,  0x20u);
  }
}

AMSMutablePromise *sub_100021544(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___AMSMutablePromise);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000215E8;
  v9[3] = &unk_1000D6A18;
  uint64_t v7 = v4;
  uint64_t v10 = v7;
  [v3 establishShareWithHomeOwner:v6 container:v5 completionHandler:v9];

  return v7;
}

void sub_1000215E8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v10)
  {
    [v7 finishWithResult:v10];
  }

  else if (v5)
  {
    [v7 finishWithError:v5];
  }

  else
  {
    uint64_t v8 = AMSError(0LL, @"HomeKit Error", @"An unknown HomeKit error occurred.", 0LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    [v7 finishWithError:v9];
  }
}

AMSPromise *__cdecl sub_100021694(id a1, HMHomeCloudShareResponse *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[HMHomeCloudShareResponse clientInfo](a2, "clientInfo"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 accountAuthToken]);

  if (v3)
  {
    uint64_t v4 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v3, 4LL);
    if (!v4)
    {
      uint64_t v8 = AMSError(0LL, @"HomeKit Error", @"The share response doesn't contain a valid muInviteCode.", 0LL);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v9));

      goto LABEL_7;
    }

    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  else
  {
    uint64_t v6 = AMSError(0LL, @"HomeKit Error", @"The share response doesn't contain a muInviteCode.", 0LL);
    uint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v4));
  }

  uint64_t v7 = (void *)v5;
LABEL_7:

  return (AMSPromise *)v7;
}

id sub_100021B7C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_1000222CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 dataUsingEncoding:4]);
    uint64_t v12 = 0LL;
    int v13 = &v12;
    uint64_t v14 = 0x2050000000LL;
    uint64_t v8 = (void *)qword_1000F1FE0;
    uint64_t v15 = qword_1000F1FE0;
    if (!qword_1000F1FE0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100023190;
      v11[3] = &unk_1000D6B98;
      void v11[4] = &v12;
      sub_100023190((uint64_t)v11);
      uint64_t v8 = (void *)v13[3];
    }

    uint64_t v9 = v8;
    _Block_object_dispose(&v12, 8);
    id v10 = [[v9 alloc] initWithAccountAuthToken:v7];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1000223FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000228B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_100022900(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v4) {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v8 = objc_opt_class(WeakRetained, v7);
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = AMSLogableError(v3);
    int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v14 = 138543874;
    uint64_t v15 = v8;
    __int16 v16 = 2114;
    __int16 v17 = v11;
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@ [%{public}@] Failed to fetch the device's homes. error = %{public}@",  (uint8_t *)&v14,  0x20u);
  }

  [*(id *)(a1 + 32) finishWithError:v3];
}

void sub_100022A50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained homeManager]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 homes]);

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100022AF8;
  v5[3] = &unk_1000D6B20;
  v5[4] = WeakRetained;
  [v3 enumerateObjectsUsingBlock:v5];
  [*(id *)(a1 + 32) finishWithResult:v3];
}

id sub_100022AF8(uint64_t a1, void *a2)
{
  return [a2 setDelegate:*(void *)(a1 + 32)];
}

LABEL_11:
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v18) {
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18 OSLogObject]);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = objc_opt_class(self, v20);
    uint64_t v23 = AMSLogKey(v21, v22);
    int v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = AMSHashIfNeeded(v13);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v35 = v21;
    uint64_t v36 = 2114;
    uint64_t v37 = v24;
    uint64_t v38 = 2114;
    id v39 = v6;
    uint64_t v40 = 2114;
    uint64_t v41 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fetched a HomeKit setting. keyPath = %{public}@ | setting = %{public}@",  buf,  0x2Au);
  }

  return v13;
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v16 + v8, v9 - v8);
  }

id sub_100022F74(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 keyPath]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

Class sub_100023038(uint64_t a1)
{
  Class result = objc_getClass("HMHomeManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100097AE0();
  }
  qword_1000F1FC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_10002308C()
{
  id v3 = 0LL;
  if (!qword_1000F1FC8)
  {
    __int128 v4 = off_1000D6BB8;
    uint64_t v5 = 0LL;
    qword_1000F1FC8 = _sl_dlopen(&v4, &v3);
  }

  uint64_t v0 = qword_1000F1FC8;
  uint64_t v1 = v3;
  if (!qword_1000F1FC8)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_7;
  }

  if (v3) {
LABEL_7:
  }
    free(v1);
  return v0;
}

Class sub_10002313C(uint64_t a1)
{
  Class result = objc_getClass("HMUserCloudShareRepairInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100097B04();
  }
  qword_1000F1FD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_100023190(uint64_t a1)
{
  Class result = objc_getClass("HMUserCloudShareClientInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100097B28();
  }
  qword_1000F1FE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

id sub_100023700(id a1, HMUser *a2)
{
  uint64_t v2 = a2;
  id v3 = -[AMSDHomeKitHomeUser initWithUser:](objc_alloc(&OBJC_CLASS___AMSDHomeKitHomeUser), "initWithUser:", v2);

  return v3;
}

id sub_100023A3C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100023B40(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id sub_100023CC0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100024570(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) homeForRecord:a2];
}

id sub_1000246CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeIdentifierForRecord:v3]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 hashedDescription]);
    uint64_t v7 = AMSErrorWithFormat( 7LL,  @"Missing Home Identifier",  @"Failed to extract the home identifier from the record zone's HomeParticipant record. record = %@");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v8, v6));
  }

  return v5;
}

id sub_1000248EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeUserIdentifierForRecord:v3]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 hashedDescription]);
    uint64_t v7 = AMSErrorWithFormat( 7LL,  @"Missing Home User Identifier",  @"Failed to extract the home user identifier from the record zone's HomeParticipant record. record = %@");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v8, v6));
  }

  return v5;
}

id sub_100024B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifiersForRecord:v3]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 hashedDescription]);
    uint64_t v7 = AMSErrorWithFormat( 7LL,  @"Missing Home Identifiers",  @"Failed to extract the home and/or home user identifiers from the record zone's HomeParticipant record. record = %@");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v8, v6));
  }

  return v5;
}

AMSPromise *__cdecl sub_100025010(id a1, NSArray *a2)
{
  return +[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", a2);
}

id sub_10002516C(uint64_t a1, void *a2)
{
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  uint64_t v12 = sub_100025280;
  int v13 = &unk_1000D6C78;
  id v14 = *(id *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_firstObjectPassingTest:", &v10));
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There's no home with the specified home identifier. homeIdentifier = %@",  *(void *)(a1 + 32),  v10,  v11,  v12,  v13));
    uint64_t v7 = AMSError(7LL, @"Invalid Home Identifier", v6, 0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v8));
  }

  return v5;
}

id sub_100025280(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100025830(_Unwind_Exception *a1)
{
}

BOOL sub_10002584C(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_activeiCloudAccount"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v6) {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = objc_opt_class(WeakRetained, v8);
    uint64_t v11 = AMSLogKey(v9, v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = AMSHashIfNeeded(v5);
    id v14 = a2;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v13);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained homeIdentifier]);
    uint64_t v17 = AMSHashIfNeeded(v16);
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v62 = v9;
    __int16 v63 = 2114;
    id v64 = v12;
    __int16 v65 = 2114;
    id v66 = v15;
    __int16 v67 = 2114;
    id v68 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Leaving a home. iCloudAccount = %{public}@ | homeIdentiifer = %{public}@",  buf,  0x2Au);

    a2 = v14;
  }

  if (v5)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _generateAppProvidedData]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[AMSAuthenticateOptions amsd_multiUserAuthenticateOptionsWithAppProvidedData:]( &OBJC_CLASS___AMSAuthenticateOptions,  "amsd_multiUserAuthenticateOptionsWithAppProvidedData:",  v19));

    id v21 = [[AMSAuthKitUpdateTask alloc] initWithAccount:v5 options:v20];
    [v21 setRunMode:1];
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 performAuthKitUpdate]);
    id v60 = 0LL;
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 resultWithError:&v60]);
    id v59 = v60;

    int v24 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ams_iTunesAccountForAccount:", v5));

    BOOL v26 = v23 != 0LL;
    uint64_t v27 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsMultiUserConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsMultiUserConfig"));
    __int16 v28 = (void *)v27;
    if (v23)
    {
      if (!v27) {
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      unsigned int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 OSLogObject]);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = objc_opt_class(WeakRetained, v30);
        uint64_t v33 = AMSLogKey(v31, v32);
        id v57 = WeakRetained;
        uint64_t v34 = v20;
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v33);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v62 = v31;
        __int16 v63 = 2114;
        id v64 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully left the home.",  buf,  0x16u);

        uint64_t v20 = v34;
        id WeakRetained = v57;
      }

      uint64_t v36 = v59;
    }

    else
    {
      if (!v27) {
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 OSLogObject]);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        uint64_t v47 = objc_opt_class(WeakRetained, v46);
        id v58 = WeakRetained;
        uint64_t v48 = v20;
        uint64_t v49 = v47;
        uint64_t v51 = AMSLogKey(v47, v50);
        id v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
        uint64_t v53 = AMSHashIfNeeded(v59);
        uint64_t v56 = a2;
        id v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v62 = v49;
        uint64_t v20 = v48;
        id WeakRetained = v58;
        __int16 v63 = 2114;
        id v64 = v52;
        __int16 v65 = 2114;
        id v66 = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to leave the home. error = %{public}@",  buf,  0x20u);

        a2 = v56;
        BOOL v26 = v23 != 0LL;
      }

      uint64_t v36 = v59;
      if (a2) {
        *a2 = v59;
      }
    }
  }

  else
  {
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v37) {
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue([v37 OSLogObject]);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = objc_opt_class(WeakRetained, v39);
      uint64_t v42 = AMSLogKey(v40, v41);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v62 = v40;
      __int16 v63 = 2114;
      id v64 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to leave the home. There's no active iCloud account.",  buf,  0x16u);
    }

    if (a2)
    {
      uint64_t v44 = AMSError( 103LL,  @"No iCloud Account",  @"The user must be signed into iCloud in order to leave a home.",  0LL);
      BOOL v26 = 0LL;
      *a2 = (id)objc_claimAutoreleasedReturnValue(v44);
    }

    else
    {
      BOOL v26 = 0LL;
    }
  }

  return v26;
}

void sub_100025F34(uint64_t a1)
{
  uint64_t v2 = -[AMSDBackgroundActivityScheduler initWithIdentifier:]( objc_alloc(&OBJC_CLASS___AMSDBackgroundActivityScheduler),  "initWithIdentifier:",  @"com.apple.amsaccountsd.refresh");
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _scheduledRefreshActivityBlock]);
  -[AMSDBackgroundActivityScheduler setActivityBlock:](v2, "setActivityBlock:", v3);

  -[AMSDBackgroundActivityScheduler checkIn](v2, "checkIn");
  id v4 = objc_alloc_init(&OBJC_CLASS___AMSDCloudKitDataSource);
  id v5 = -[AMSDCloudDataManager initWithDataSource:]( objc_alloc(&OBJC_CLASS___AMSDCloudDataManager),  "initWithDataSource:",  v4);
  id v6 = objc_alloc_init(&OBJC_CLASS___AMSDHomeKitDataSource);
  uint64_t v7 = -[AMSDHomeManager initWithDataSource:](objc_alloc(&OBJC_CLASS___AMSDHomeManager), "initWithDataSource:", v6);
  id v8 = [objc_alloc(*(Class *)(a1 + 32)) initWithCloudDataManager:v5 homeManager:v7];
  -[AMSDCloudKitDataSource setDelegate:](v4, "setDelegate:", v8);
  -[AMSDHomeKitDataSource setDelegate:](v6, "setDelegate:", v8);

  uint64_t v9 = (void *)qword_1000F1FF0;
  qword_1000F1FF0 = (uint64_t)v8;
}

LABEL_8:
    uint64_t v17 = 0LL;
    goto LABEL_9;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDMultiUserController cloudContainer](self, "cloudContainer"));
  __int16 v16 = objc_claimAutoreleasedReturnValue([v15 privateDatabase]);
LABEL_7:
  uint64_t v17 = (void *)v16;

LABEL_9:
  return v17;
}

  sub_100055744();
}

id sub_10002630C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100026570(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(a1 + 32)];
}

id sub_10002657C(uint64_t a1, void *a2)
{
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10002672C;
  v21[3] = &unk_1000D6C78;
  id v22 = *(id *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_firstObjectPassingTest:", v21));
  id v5 = v4;
  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 users]);
    __int16 v16 = _NSConcreteStackBlock;
    uint64_t v17 = 3221225472LL;
    __int16 v18 = sub_10002678C;
    uint64_t v19 = &unk_1000D5ED8;
    id v20 = *(id *)(a1 + 40);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_firstObjectPassingTest:", &v16));

    if (v7)
    {
      id v8 = objc_alloc(&OBJC_CLASS___AMSPair);
      uint64_t v9 = -[AMSPair initWithFirst:second:](v8, "initWithFirst:second:", v5, v7, v16, v17, v18, v19);
      uint64_t v10 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v9));
    }

    else
    {
      uint64_t v14 = AMSError( 7LL,  @"Invalid Home User Identifier",  @"Failed to find a home user matching the given home user identifier.",  0LL);
      uint64_t v9 = (AMSPair *)objc_claimAutoreleasedReturnValue(v14);
      uint64_t v10 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v9, v16, v17, v18, v19));
    }

    uint64_t v13 = (void *)v10;

    uint64_t v12 = v20;
  }

  else
  {
    uint64_t v11 = AMSError( 7LL,  @"Invalid Home Identifier",  @"Failed to find a home matching the account's home identifier.",  0LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v12));
  }

  return v13;
}

id sub_10002672C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_homeIdentifier"));
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_10002678C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100026CBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_100026CF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v8 = objc_opt_class(WeakRetained, v7);
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = AMSLogableError(v3);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v15 = 138543874;
    uint64_t v16 = v8;
    __int16 v17 = 2114;
    __int16 v18 = v11;
    __int16 v19 = 2114;
    id v20 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to authenticate the iTunes account for the HomeParticipant. error = %{public}@",  (uint8_t *)&v15,  0x20u);
  }

  if (objc_msgSend(v3, "ams_recursiveHasDomain:code:", AMSServerErrorDomain, -5000))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _sendCloudDataRepairRequestForHomeParticipant:*(void *)(a1 + 40)]);
    [v14 resultWithError:0];
  }
}

void sub_100026E6C(id *a1, void *a2)
{
  id v30 = a2;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v2) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 6);
    uint64_t v6 = objc_opt_class(WeakRetained, v5);
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v30 account]);
    uint64_t v11 = AMSHashIfNeeded(v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v35 = v6;
    __int16 v36 = 2114;
    uint64_t v37 = v9;
    __int16 v38 = 2114;
    uint64_t v39 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully authenticated the iTunes account for the HomeParticipant. Associating the ac count with the HomeParticipant's record zone. account = %{public}@",  buf,  0x20u);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v30 account]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDHomeManager homeUserIdentifierForRecord:]( &OBJC_CLASS___AMSDHomeManager,  "homeUserIdentifierForRecord:",  a1[4]));
  int v15 = (void *)objc_claimAutoreleasedReturnValue([a1[5] homeManager]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 homeForRecord:a1[4]]);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 resultWithError:0]);

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 userWithIdentifier:v14]);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 owner]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 identifier]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 UUIDString]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);
  unsigned int v23 = [v21 isEqualToString:v22];

  objc_msgSend(v13, "ams_setIsSecondaryHomeUser:", v23 ^ 1);
  id v24 = [v17 mediaProfileEnabledForUser:v18];
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] identifier]);
  BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneIdentifier]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 name]);
  objc_msgSend(v13, "amsd_addRecordZoneName:homeUserIdentifier:showProfile:", v27, v14, v24 == (id)2);

  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "ams_saveAccount:verifyCredentials:", v13, 0));

  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_1000271C0;
  v32[3] = &unk_1000D6D60;
  objc_copyWeak(&v33, a1 + 6);
  [v29 addErrorBlock:v32];
  objc_destroyWeak(&v33);
}

void sub_1000271A4(_Unwind_Exception *a1)
{
}

void sub_1000271C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v8 = objc_opt_class(WeakRetained, v7);
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = AMSHashIfNeeded(v3);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v14 = 138543874;
    uint64_t v15 = v8;
    __int16 v16 = 2114;
    __int16 v17 = v11;
    __int16 v18 = 2114;
    __int16 v19 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to associate the account with the record zone. error = %{public}@",  (uint8_t *)&v14,  0x20u);
  }
}

void sub_1000277C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1000277F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v5) {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = objc_opt_class(WeakRetained, v7);
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = AMSLogableError(v3);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v14 = 138543874;
    uint64_t v15 = v8;
    __int16 v16 = 2114;
    __int16 v17 = v11;
    __int16 v18 = 2114;
    __int16 v19 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to authenticate the iTunes account for the exported token. error = %{public}@",  (uint8_t *)&v14,  0x20u);
  }
}

void sub_100027940(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v5) {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_opt_class(WeakRetained, v7);
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 account]);
    uint64_t v13 = AMSHashIfNeeded(v12);
    int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v15 = 138543874;
    uint64_t v16 = v8;
    __int16 v17 = 2114;
    __int16 v18 = v11;
    __int16 v19 = 2114;
    id v20 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully authenticated the iTunes account for the exported token. account = %{public}@",  (uint8_t *)&v15,  0x20u);
  }
}

void sub_100027DB4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.amsaccountsd.AMSDMultiUserController.refresh", v4);
  id v3 = (void *)qword_1000F2000;
  qword_1000F2000 = (uint64_t)v2;
}

void sub_100027E04(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _isRefreshThrottlingDisabledWithOptions:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 promiseAdapter]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100027F3C;
  v15[3] = &unk_1000D6DF8;
  v15[4] = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 thenWithBlock:v15]);

  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  uint64_t v10 = sub_100027F78;
  uint64_t v11 = &unk_1000D6E20;
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v5;
  id v14 = *(id *)(a1 + 48);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 thenWithBlock:&v8]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "promiseWithTimeout:", 300.0, v8, v9, v10, v11, v12));

  [v7 waitUntilFinished];
  [*(id *)(a1 + 56) finishWithPromise:v7];
}

id sub_100027F3C(uint64_t a1)
{
  dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeManager]);
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allHomes]);

  return v2;
}

id sub_100027F78(uint64_t a1, void *a2)
{
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10002823C;
  v25[3] = &unk_1000D6C78;
  void v25[4] = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_filterUsingTest:", v25));
  id v4 = [*(id *)(a1 + 40) copy];
  if (([v4 shouldUseCloudData] & 1) == 0)
  {
    objc_msgSend( v4,  "setShouldUseCloudData:",  objc_msgSend(*(id *)(a1 + 32), "_refreshShouldUseCloudDataWithHomes:", v3));
    if ([v4 shouldUseCloudData])
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v5) {
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = objc_opt_class(*(void *)(a1 + 32), v7);
        uint64_t v10 = AMSLogKey(v8, v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v27 = v8;
        __int16 v28 = 2114;
        unsigned int v29 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Overriding shouldUseCloudData with true.",  buf,  0x16u);
      }
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _isCloudDataAvailable]);
  unsigned __int8 v13 = [v12 resultWithError:0];

  if ([v4 shouldUseCloudData] && (v13 & 1) == 0)
  {
    [v4 setShouldUseCloudData:0];
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v14) {
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 OSLogObject]);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = objc_opt_class(*(void *)(a1 + 32), v16);
      uint64_t v19 = AMSLogKey(v17, v18);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v27 = v17;
      __int16 v28 = 2114;
      unsigned int v29 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Overriding shouldUseCloudData with false. isCloudDataAvailable = false",  buf,  0x16u);
    }
  }

  id v21 = -[AMSDRefreshMultiUserTask initWithMultiUserController:homes:options:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserTask),  "initWithMultiUserController:homes:options:",  *(void *)(a1 + 32),  v3,  v4);
  id v22 = v21;
  if (*(void *)(a1 + 48)) {
    -[AMSDRefreshMultiUserTask setMetrics:](v21, "setMetrics:");
  }
  unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDRefreshMultiUserTask performTask](v22, "performTask"));

  return v23;
}

uint64_t sub_10002823C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isMultiUserEnabled] & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v17 = objc_opt_class(*(void *)(a1 + 32), v16);
    uint64_t v19 = AMSLogKey(v17, v18);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v20 = AMSHashIfNeeded(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v20);
    int v28 = 138543874;
    uint64_t v29 = v17;
    __int16 v30 = 2114;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    id v33 = v12;
    unsigned __int8 v13 = "%{public}@: [%{public}@] Skipping a home. Multi-User isn't enabled. home = %{public}@";
LABEL_18:
    id v14 = v5;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_19;
  }

  if (+[AMSDMultiUserController deviceSupportsMultipleUsers]( &OBJC_CLASS___AMSDMultiUserController,  "deviceSupportsMultipleUsers")
    && ([v3 isCurrentDeviceAccessory] & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v23 = objc_opt_class(*(void *)(a1 + 32), v22);
    uint64_t v25 = AMSLogKey(v23, v24);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v26 = AMSHashIfNeeded(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v26);
    int v28 = 138543874;
    uint64_t v29 = v23;
    __int16 v30 = 2114;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    id v33 = v12;
    unsigned __int8 v13 = "%{public}@: [%{public}@] Skipping a home. The current device isn't an accessory of it. home = %{public}@";
    goto LABEL_18;
  }

  if ([v3 isCurrentUserRestrictedGuest])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = AMSHashIfNeeded(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v28 = 138543874;
    uint64_t v29 = v7;
    __int16 v30 = 2114;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    id v33 = v12;
    unsigned __int8 v13 = "%{public}@: [%{public}@] Current user is Restricted Guest in home, not updating multi-user token for home = %{public}@";
    id v14 = v5;
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v28, 0x20u);

LABEL_20:
    uint64_t v21 = 0LL;
    goto LABEL_21;
  }

  uint64_t v21 = 1LL;
LABEL_21:

  return v21;
}

id sub_100028500(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsMultiUserConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsMultiUserConfig"));
  uint64_t v8 = (void *)v7;
  if (v5)
  {
    if (!v7) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = objc_opt_class(*(void *)(a1 + 32), v10);
      uint64_t v13 = AMSLogKey(v11, v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      uint64_t v15 = AMSHashIfNeeded(v5);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      *(_DWORD *)id v54 = 138543874;
      *(void *)&v54[4] = v11;
      *(_WORD *)&v54[12] = 2114;
      *(void *)&v54[14] = v14;
      *(_WORD *)&v54[22] = 2114;
      uint64_t v55 = v16;
      uint64_t v17 = "%{public}@: [%{public}@] The refresh finished. result = %{public}@";
      uint64_t v18 = v9;
      os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, v54, 0x20u);
    }
  }

  else
  {
    if (!v7) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = objc_opt_class(*(void *)(a1 + 32), v20);
      uint64_t v23 = AMSLogKey(v21, v22);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v23);
      uint64_t v24 = AMSHashIfNeeded(v6);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v24);
      *(_DWORD *)id v54 = 138543874;
      *(void *)&v54[4] = v21;
      *(_WORD *)&v54[12] = 2114;
      *(void *)&v54[14] = v14;
      *(_WORD *)&v54[22] = 2114;
      uint64_t v55 = v16;
      uint64_t v17 = "%{public}@: [%{public}@] The refresh failed. error = %{public}@";
      uint64_t v18 = v9;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
      goto LABEL_10;
    }
  }

  if (v6
    || (uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v5 errors]),
        id v26 = [v25 count],
        v25,
        v26))
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "errors", *(_OWORD *)v54, *(void *)&v54[16], v55));
    int v28 = (AMSDBackgroundActivityScheduler *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "ams_firstObjectPassingTest:", &stru_1000D6E40));

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDBackgroundActivityScheduler userInfo](v28, "userInfo"));
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:@"AMSDCloudDataRetryAfterKey"]);

    uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSNumber, v31);
    if ((objc_opt_isKindOfClass(v30, v32) & 1) != 0) {
      id v33 = v30;
    }
    else {
      id v33 = 0LL;
    }

    [v33 doubleValue];
    double v35 = v34;

    if (v35 == 0.0) {
      double v35 = 86400.0;
    }
    __int16 v36 = -[AMSDRefreshMultiUserOptions initWithReason:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions),  "initWithReason:",  @"A previous refresh failed.");
    -[AMSDRefreshMultiUserOptions setSchedulingInterval:](v36, "setSchedulingInterval:", v35);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v5 errors]);
    unsigned int v39 = sub_10000AFA8(v37, v38);

    if (v39)
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v40) {
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue([v40 OSLogObject]);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = objc_opt_class(*(void *)(a1 + 32), v42);
        uint64_t v45 = AMSLogKey(v43, v44);
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        *(_DWORD *)id v54 = 138543618;
        *(void *)&v54[4] = v43;
        *(_WORD *)&v54[12] = 2114;
        *(void *)&v54[14] = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] The refresh encountered a fatal cloud data error.",  v54,  0x16u);
      }

      +[AMSStorage _setValue:forKey:]( &OBJC_CLASS___AMSStorage,  "_setValue:forKey:",  0LL,  @"AMSDLastMultiUserRefresh");
    }

    id v47 = [*(id *)(a1 + 32) refreshWithOptions:v36];

    goto LABEL_25;
  }

  uint64_t v51 = *(void **)(a1 + 32);
  id v52 = (void *)objc_claimAutoreleasedReturnValue([v5 homes]);
  [v51 _setLastSuccessfulRefreshDateWithHomes:v52];

  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
  LODWORD(v52) = [v53 shouldUseCloudData];

  if ((_DWORD)v52)
  {
    int v28 = -[AMSDBackgroundActivityScheduler initWithIdentifier:]( objc_alloc(&OBJC_CLASS___AMSDBackgroundActivityScheduler),  "initWithIdentifier:",  @"com.apple.amsaccountsd.refresh");
    -[AMSDBackgroundActivityScheduler invalidate](v28, "invalidate");
LABEL_25:
  }

  if (v5) {
    uint64_t v48 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v5));
  }
  else {
    uint64_t v48 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v6));
  }
  uint64_t v49 = (void *)v48;

  return v49;
}

BOOL sub_100028974(id a1, NSError *a2)
{
  return -[NSError ams_hasDomain:code:]( a2,  "ams_hasDomain:code:",  @"AMSDCloudDataErrorDomain",  6LL);
}

void sub_100028BC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = AMSHashIfNeeded(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = 138543874;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    uint64_t v16 = v10;
    __int16 v17 = 2114;
    uint64_t v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to fetch a cloud container's status. error = %{public}@",  (uint8_t *)&v13,  0x20u);
  }
}

void sub_100028CF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) previousCloudContainerStatus]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100028D94;
  v7[3] = &unk_1000D6E90;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = v5;
  id v8 = v3;
  id v6 = v3;
  [v4 readWrite:v7];
}

id sub_100028D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (!v3 || !v4) {
    goto LABEL_9;
  }
  if (([v4 isEqual:v3] & 1) == 0)
  {
    id v4 = *(void **)(a1 + 32);
LABEL_9:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cloud data manager changed. changeType = %lu | previousCloudContainerStatus = %@ | cloudContainerStatus = %@",  *(void *)(a1 + 48),  v3,  v4));
    id v6 = -[AMSDRefreshMultiUserOptions initWithReason:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions),  "initWithReason:",  v5);
    -[AMSDRefreshMultiUserOptions setShouldUseCloudData:](v6, "setShouldUseCloudData:", 1LL);
    id v15 = [*(id *)(a1 + 40) refreshWithOptions:v6];
    goto LABEL_10;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v5) {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v6 = (AMSDRefreshMultiUserOptions *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_opt_class(*(void *)(a1 + 40), v7);
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = *(void *)(a1 + 48);
    id v13 = [v3 unsignedLongValue];
    id v14 = [*(id *)(a1 + 32) unsignedLongValue];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v19 = v8;
    __int16 v20 = 2114;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v12;
    __int16 v24 = 2048;
    id v25 = v13;
    __int16 v26 = 2048;
    id v27 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Ignoring a cloud data manager change. changeType = %lu | previousCloudContainerStatus = % lu | cloudContainerStatus = %lu",  buf,  0x34u);
  }

LABEL_10:
  id v16 = *(id *)(a1 + 32);
  return v16;
}

    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    *(void *)(v19[6] + 8 * v12) = v9;
    *(void *)(v19[7] + 8 * v12) = v10;
    __int16 v20 = v19[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    __int16 v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v19[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(v29, 2LL);
    }
  }

  sub_10006606C(v15, a2 & 1);
  __int16 v17 = sub_10008D9D8((uint64_t)v9);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  uint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow();
  uint64_t v32 = v23;
  swift_errorRetain(v23);
  __int16 v24 = sub_10005489C(&qword_1000F0288);
  if ((swift_dynamicCast(v24, &v32, v24, &type metadata for _MergeError, 0LL) & 1) == 0)
  {

    swift_bridgeObjectRelease_n(v29, 2LL);
    return swift_errorRelease(v32);
  }

  swift_storeEnumTagMultiPayload(v16, v17, v23);
  return sub_1000892B0();
}

uint64_t sub_100029304(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100029410(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) previousCloudContainerStatus]);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100029730;
    v31[3] = &unk_1000D6EE0;
    id v8 = v5;
    id v32 = v8;
    [v7 readWrite:v31];

    id v9 = [v8 unsignedIntegerValue];
    if (v9 == (id)1)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v10) {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 OSLogObject]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = objc_opt_class(*(void *)(a1 + 32), v12);
        uint64_t v15 = AMSLogKey(v13, v14);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v34 = v13;
        __int16 v35 = 2114;
        __int16 v36 = v16;
        __int16 v37 = 2048;
        uint64_t v38 = 1LL;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Cloud data is available. status = %ld",  buf,  0x20u);
      }

      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[AMSPromise promiseWithResult:]( &OBJC_CLASS___AMSPromise,  "promiseWithResult:",  &__kCFBooleanTrue));
      goto LABEL_14;
    }
  }

  else
  {
    id v9 = 0LL;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v18) {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18 OSLogObject]);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = objc_opt_class(*(void *)(a1 + 32), v20);
    uint64_t v23 = AMSLogKey(v21, v22);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = AMSHashIfNeeded(v6);
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v34 = v21;
    __int16 v35 = 2114;
    __int16 v36 = v24;
    __int16 v37 = 2048;
    uint64_t v38 = (uint64_t)v9;
    __int16 v39 = 2114;
    uint64_t v40 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Cloud data is unavailable. status = %ld | error = %{public}@",  buf,  0x2Au);
  }

  id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cloud data is unavailable. status = %ld",  v9));
  uint64_t v28 = AMSCustomError(@"AMSDCloudDataErrorDomain", 8LL, @"Cloud Data Unavailable", v27, 0LL, v6);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v29));

LABEL_14:
  return v17;
}

id sub_100029730(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100029AE0(id a1, AMSDHome *a2)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDHome identifier](a2, "identifier"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);

  return v3;
}

id sub_100029EEC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userWithIdentifier:*(void *)(a1 + 32)]);
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) homeManager]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudContainer]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 sendCloudDataRepairRequestToHomeUser:v3 inContainer:v5]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 promiseAdapter]);
  }

  else
  {
    uint64_t v8 = AMSError(0LL, 0LL, 0LL, 0LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v4));
  }

  return v7;
}

id sub_10002A084(id a1, AMSDHome *a2)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDHome identifier](a2, "identifier"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);

  return v3;
}

void sub_10002A160(id a1, id a2)
{
  id v2 = a2;
  id v3 = (id)AMSSetLogKey(0LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    uint64_t v8 = AMSLogKey(v6, v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *(_DWORD *)__int128 buf = 138543362;
    __int16 v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "AMSDMultiUserController: [%{public}@] Scheduled refresh fired.",  buf,  0xCu);
  }

  uint64_t v10 = -[AMSDRefreshMultiUserOptions initWithReason:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserOptions),  "initWithReason:",  @"Scheduled Refresh");
  -[AMSDRefreshMultiUserOptions setIgnoreThrottling:](v10, "setIgnoreThrottling:", 1LL);
  -[AMSDRefreshMultiUserOptions setShouldUseCloudData:](v10, "setShouldUseCloudData:", 0LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserController sharedController](&OBJC_CLASS___AMSDMultiUserController, "sharedController"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 refreshWithOptions:v10]);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10002A30C;
  v14[3] = &unk_1000D6FF8;
  id v15 = v2;
  id v13 = v2;
  [v12 addFinishBlock:v14];
}

uint64_t sub_10002A30C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10002A66C(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002A824(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v9 = 138543618;
    uint64_t v10 = v5;
    __int16 v11 = 2114;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}@: [%{public}@] Flushing Multi-User Metrics",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10002B834(id a1)
{
  dispatch_queue_attr_t v1 = (void *)qword_1000F2010;
  qword_1000F2010 = (uint64_t)@"Accounts";
}

void sub_10002B88C(id a1)
{
  dispatch_queue_attr_t v1 = (void *)qword_1000F2020;
  qword_1000F2020 = (uint64_t)@"1";
}

void sub_10002BFD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) finishWithError:a3];
  }

  else if ([*(id *)(a1 + 40) _isTopicDefined:v5])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsConfig"));
    if (!v6) {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = objc_opt_class(*(void *)(a1 + 40), v8);
      uint64_t v11 = AMSLogKey(v9, v10);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v25 = v9;
      __int16 v26 = 2114;
      id v27 = v12;
      __int16 v28 = 2114;
      id v29 = v5;
      __int16 v30 = 2114;
      uint64_t v31 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}@: [%{public}@] Queue Metrics Event for topic = %{public}@ | userId namespace %{public}@",  buf,  0x2Au);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _userIdForBagNamespace:*(void *)(a1 + 48)]);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10002C1F4;
    v20[3] = &unk_1000D7088;
    int8x16_t v19 = *(int8x16_t *)(a1 + 32);
    id v15 = (id)v19.i64[0];
    int8x16_t v21 = vextq_s8(v19, v19, 8uLL);
    id v22 = *(id *)(a1 + 56);
    id v23 = v5;
    [v14 resultWithCompletion:v20];
  }

  else
  {
    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = AMSError(2LL, @"Topic string not found", 0LL, 0LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    [v16 finishWithError:v18];
  }
}

void sub_10002C1F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsConfig"));
    if (!v14) {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 OSLogObject]);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = objc_opt_class(*(void *)(a1 + 32), v16);
      uint64_t v19 = AMSLogKey(v17, v18);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      uint64_t v21 = AMSLogableError(v6);
      id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      int v26 = 138543874;
      uint64_t v27 = v17;
      __int16 v28 = 2114;
      id v29 = v20;
      __int16 v30 = 2114;
      uint64_t v31 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to create metrics event due to an error while fetching userId. error = %{public}@",  (uint8_t *)&v26,  0x20u);
    }

    id v23 = *(void **)(a1 + 40);
    uint64_t v24 = AMSError( 2LL,  @"Unable to enqueue event",  @"Failed to create event, userId key not found in store",  v6);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    [v23 finishWithError:v25];
  }

  else
  {
    objc_msgSend(*(id *)(a1 + 48), "ams_setNullableObject:forKey:", a2, @"userId");
    uint64_t v7 = *(void **)(a1 + 48);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _eventTime]);
    objc_msgSend(v7, "ams_setNullableObject:forKey:", v8, @"eventTime");

    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v9 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = [*(id *)(a1 + 48) copy];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 _enqueueEventWithTopic:v11 properties:v12]);
    [v9 finishWithPromise:v13];
  }
}

void sub_10002C7B0(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc(&OBJC_CLASS___AMSDMultiUserService);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserController sharedController](&OBJC_CLASS___AMSDMultiUserController, "sharedController"));
  id v2 = -[AMSDMultiUserService initWithMultiUserController:](v1, "initWithMultiUserController:", v4);
  id v3 = (void *)qword_1000F2030;
  qword_1000F2030 = (uint64_t)v2;
}

id sub_10002CBCC(uint64_t a1, void *a2)
{
  id v2 = a2;
  int v26 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndexedSubscript:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndexedSubscript:1]);
  uint64_t v27 = v2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndexedSubscript:2]);
  id v5 = objc_opt_new(&OBJC_CLASS___NSMutableString);
  -[NSMutableString appendString:](v5, "appendString:", @"Private Record Zones:\n");
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
  id v7 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v40;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v40 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v39 + 1) + 8 * (void)v10) name]);
        -[NSMutableString appendFormat:](v5, "appendFormat:", @"  %@\n", v11);

        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }

    while (v8);
  }

  -[NSMutableString appendString:](v5, "appendString:", @"\n");
  -[NSMutableString appendString:](v5, "appendString:", @"Shared Record Zones:\n");
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 results]);
  id v13 = [v12 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v36;
    do
    {
      uint64_t v16 = 0LL;
      do
      {
        if (*(void *)v36 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v35 + 1) + 8 * (void)v16) name]);
        -[NSMutableString appendFormat:](v5, "appendFormat:", @"  %@\n", v17);

        uint64_t v16 = (char *)v16 + 1;
      }

      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v35 objects:v43 count:16];
    }

    while (v14);
  }

  -[NSMutableString appendString:](v5, "appendString:", @"\n");
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_10002CF54;
  v30[3] = &unk_1000D7198;
  id v31 = v3;
  id v32 = *(id *)(a1 + 32);
  id v33 = v4;
  id v34 = *(id *)(a1 + 40);
  id v18 = v4;
  id v19 = v3;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "ams_mapWithTransform:", v30));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithAll:](&OBJC_CLASS___AMSPromise, "promiseWithAll:", v20));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10002DB38;
  v28[3] = &unk_1000D5F28;
  id v29 = v5;
  id v22 = v5;
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 thenWithBlock:v28]);

  return v23;
}

id sub_10002CF54(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new(&OBJC_CLASS___NSMutableString);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"%@:\n", v5);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"  identifier-> %@\n", v7);

  else {
    id v8 = @"false";
  }
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"  isCurrentDeviceAccessory-> %@\n", v8);
  unsigned int v34 = [v3 isCurrentUserOwner];
  if (v34) {
    uint64_t v9 = @"true";
  }
  else {
    uint64_t v9 = @"false";
  }
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"  isCurrentUserOwner-> %@\n", v9);
  else {
    uint64_t v10 = @"false";
  }
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"  isMultiUserEnabled-> %@\n", v10);
  else {
    uint64_t v11 = @"false";
  }
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"  isPrimary-> %@\n", v11);
  -[NSMutableString appendFormat:](v4, "appendFormat:", @"  Record Zones:\n");
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] results]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 allValues]);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_10002D35C;
  v47[3] = &unk_1000D70D0;
  id v48 = a1[5];
  id v14 = v3;
  id v49 = v14;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ams_filterUsingTest:", v47));
  id v16 = [v15 mutableCopy];
  uint64_t v17 = v16;
  if (v16) {
    id v18 = (NSMutableArray *)v16;
  }
  else {
    id v18 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  }
  id v19 = v18;

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1[6] results]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 allValues]);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472LL;
  v44[2] = sub_10002D3D8;
  v44[3] = &unk_1000D70D0;
  id v45 = a1[7];
  id v22 = v14;
  id v46 = v22;
  uint64_t v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "ams_filterUsingTest:", v44));
  uint64_t v24 = (void *)v23;
  if (v23) {
    uint64_t v25 = (void *)v23;
  }
  else {
    uint64_t v25 = &__NSArray0__struct;
  }
  -[NSMutableArray addObjectsFromArray:](v19, "addObjectsFromArray:", v25);

  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_10002D454;
  v42[3] = &unk_1000D70F8;
  int v26 = v4;
  uint64_t v43 = v26;
  -[NSMutableArray enumerateObjectsUsingBlock:](v19, "enumerateObjectsUsingBlock:", v42);
  -[NSMutableString appendFormat:](v26, "appendFormat:", @"  Users:\n");
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v22 users]);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_10002D4B0;
  v37[3] = &unk_1000D7170;
  id v38 = v22;
  char v41 = v34;
  id v39 = a1[5];
  id v40 = a1[7];
  id v28 = v22;
  id v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "ams_mapWithTransform:", v37));

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithAll:](&OBJC_CLASS___AMSPromise, "promiseWithAll:", v29));
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_10002DA30;
  v35[3] = &unk_1000D5F28;
  __int128 v36 = v26;
  id v31 = v26;
  id v32 = (void *)objc_claimAutoreleasedReturnValue([v30 thenWithBlock:v35]);

  return v32;
}

id sub_10002D35C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDHomeManager homeIdentifierForRecordZone:inDatabase:]( &OBJC_CLASS___AMSDHomeManager,  "homeIdentifierForRecordZone:inDatabase:",  a2,  *(void *)(a1 + 32)));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 resultWithError:0]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  id v6 = [v5 isEqual:v4];

  return v6;
}

id sub_10002D3D8(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDHomeManager homeIdentifierForRecordZone:inDatabase:]( &OBJC_CLASS___AMSDHomeManager,  "homeIdentifierForRecordZone:inDatabase:",  a2,  *(void *)(a1 + 32)));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 resultWithError:0]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  id v6 = [v5 isEqual:v4];

  return v6;
}

void sub_10002D454(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 name]);
  [v2 appendFormat:@"    %@\n", v3];
}

id sub_10002D4B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentUser]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  unsigned int v7 = [v5 isEqual:v6];

  id v8 = objc_opt_new(&OBJC_CLASS___NSMutableString);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
  -[NSMutableString appendFormat:](v8, "appendFormat:", @"    %@:\n", v9);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
  -[NSMutableString appendFormat:](v8, "appendFormat:", @"      identifier-> %@\n", v11);

  id v12 = @"false";
  if (v7) {
    id v12 = @"true";
  }
  -[NSMutableString appendFormat:](v8, "appendFormat:", @"      isCurrentUser-> %@\n", v12);
  if ((v7 & 1) != 0)
  {
    id v13 = (id *)(a1 + 40);
  }

  else
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v8));
      goto LABEL_9;
    }

    id v13 = (id *)(a1 + 48);
  }

  id v14 = *v13;
  uint64_t v15 = -[AMSDFetchMultiUserRecordZoneTask initWithHome:homeUser:database:metrics:]( objc_alloc(&OBJC_CLASS___AMSDFetchMultiUserRecordZoneTask),  "initWithHome:homeUser:database:metrics:",  *(void *)(a1 + 32),  v3,  v14,  0LL);
  -[AMSDFetchMultiUserRecordZoneTask setCreateIfMissing:](v15, "setCreateIfMissing:", 0LL);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDFetchMultiUserRecordZoneTask performTask](v15, "performTask"));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10002D728;
  v24[3] = &unk_1000D7120;
  id v25 = v14;
  uint64_t v17 = v8;
  int v26 = v17;
  id v18 = v14;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 thenWithBlock:v24]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10002DA1C;
  v22[3] = &unk_1000D7148;
  uint64_t v23 = v17;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 catchWithBlock:v22]);

LABEL_9:
  return v20;
}

id sub_10002D728(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v5]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10002D80C;
  v10[3] = &unk_1000D67F0;
  id v11 = *(id *)(a1 + 40);
  id v12 = v3;
  id v7 = v3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 thenWithBlock:v10]);

  return v8;
}

AMSPromise *sub_10002D80C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
  [v3 appendFormat:@"      recordZoneName-> %@\n", v7];

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_iCloudAltDSID"]);
  [v8 appendFormat:@"      iCloudAltDSID-> %@\n", v9];

  uint64_t v10 = *(void **)(a1 + 32);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_iCloudDSID"]);
  [v10 appendFormat:@"      iCloudDSID-> %@\n", v11];

  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_iTunesAltDSID"]);
  [v12 appendFormat:@"      iTunesAltDSID-> %@\n", v13];

  id v14 = *(void **)(a1 + 32);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_iTunesDSID"]);
  [v14 appendFormat:@"      iTunesDSID-> %@\n", v15];

  id v16 = *(void **)(a1 + 32);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_iTunesUsername"]);
  [v16 appendFormat:@"      iTunesUsername-> %@\n", v17];

  id v18 = *(void **)(a1 + 32);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_MultiUserToken"]);
  [v18 appendFormat:@"      token-> %@\n", v19];

  uint64_t v20 = *(void **)(a1 + 32);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_MultiUserTokenInvalid"]);

  [v20 appendFormat:@"      tokenIsInvalid-> %@\n", v21];
  return +[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", *(void *)(a1 + 32));
}

AMSPromise *sub_10002DA1C(uint64_t a1)
{
  return +[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", *(void *)(a1 + 32));
}

id sub_10002DA30(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) appendString:*(void *)(*((void *)&v10 + 1) + 8 * (void)v7)];
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", *(void *)(a1 + 32)));

  return v8;
}

id sub_10002DB38(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 componentsJoinedByString:@"\n"]);
  [v3 appendString:v4];

  id v5 = [*(id *)(a1 + 32) copy];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v5));

  return v6;
}

id sub_10002DBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    (*(void (**)(void, uint64_t, void))(v3 + 16))(*(void *)(a1 + 40), a2, 0LL);
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:"));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);
  }

  return +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  *(void *)(a1 + 32));
}

void sub_10002E5E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(void, id, void))(v7 + 16))(*(void *)(a1 + 40), v5, 0LL);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:", v6));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    __int128 v10 = v9;
    if (v9)
    {
      __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
    }

    else
    {
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12 OSLogObject]);
    }

    os_signpost_id_t v13 = *(void *)(a1 + 48);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      id v14 = NSStringFromSelector(*(SEL *)(a1 + 56));
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      int v16 = 138543362;
      uint64_t v17 = v15;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v13,  "importMultiUserToken",  "%{public}@",  (uint8_t *)&v16,  0xCu);
    }
  }

  +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  *(void *)(a1 + 32));
}

id sub_10002EB40(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 homeManager]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 second]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudContainer]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 sendCloudDataRepairRequestToHomeUser:v6 inContainer:v7]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 promiseAdapter]);

  return v9;
}

void sub_10002EBE4(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___AMSDMultiUserMetrics);
    id v7 =  -[AMSDMultiUserMetrics enqueueHomeKitRepairRequestSentEventForAccount:]( v6,  "enqueueHomeKitRepairRequestSentEventForAccount:",  a1[4]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v8) {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v10);
      uint64_t v13 = AMSLogKey(v11, v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      int v25 = 138543618;
      uint64_t v26 = v11;
      __int16 v27 = 2114;
      id v28 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully sent the multi-user token invalidated message.",  (uint8_t *)&v25,  0x16u);
    }

    (*(void (**)(void, uint64_t, void))(a1[6] + 16LL))(a1[6], 1LL, 0LL);
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v15) {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v15 OSLogObject]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v17);
      uint64_t v20 = AMSLogKey(v18, v19);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v22 = AMSHashIfNeeded(v5);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      int v25 = 138543874;
      uint64_t v26 = v18;
      __int16 v27 = 2114;
      id v28 = v21;
      __int16 v29 = 2114;
      __int16 v30 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to send the multi-user token invalidated message. error = %{public}@",  (uint8_t *)&v25,  0x20u);
    }

    uint64_t v24 = a1[6];
    id v6 = (AMSDMultiUserMetrics *)objc_claimAutoreleasedReturnValue( +[AMSDMultiUserService _sanitizeError:]( &OBJC_CLASS___AMSDMultiUserService,  "_sanitizeError:",  v5));
    (*(void (**)(uint64_t, void, AMSDMultiUserMetrics *))(v24 + 16))(v24, 0LL, v6);
  }

  +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  a1[5]);
}

void sub_10002F400(void *a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  id v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  if (v16)
  {
    id v8 = [v6 enqueueMultiUserAuthenticationTokenFetchSuccessEventForAccount:v7];
    (*(void (**)(void))(a1[7] + 16LL))();
  }

  else
  {
    id v9 = [v6 enqueueMultiUserAuthenticationTokenFetchFailedEventForAccount:v7 error:v5];
    if (objc_msgSend(v5, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 6))
    {
      uint64_t v10 = a1[7];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:", v5));
      uint64_t v12 = AMSError( 308LL,  @"Request was throttled",  @"The multi-uer request was throttled by CloudKit and we were unable to recover",  v11);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v13);
    }

    uint64_t v14 = a1[7];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:", v5));
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);
  }

  +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  a1[6]);
}

void sub_10002FA88(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = a1[5];
  if (v5)
  {
    id v9 = [v7 enqueueMultiUserAuthenticationTokenFetchSuccessEventForAccount:v8];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v10) {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 OSLogObject]);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = objc_opt_class(a1[6], v12);
      uint64_t v15 = AMSLogKey(v13, v14);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      int v24 = 138543618;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      __int16 v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Multi-user token located in CloudKit.",  (uint8_t *)&v24,  0x16u);
    }

    (*(void (**)(void))(a1[8] + 16LL))();
  }

  else
  {
    id v17 = [v7 enqueueMultiUserAuthenticationTokenFetchFailedEventForAccount:v8 error:v6];
    if (objc_msgSend(v6, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 6))
    {
      uint64_t v18 = a1[8];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:", v6));
      uint64_t v20 = AMSError( 308LL,  @"Request was throttled",  @"The multi-uer request was throttled by CloudKit and we were unable to recover",  v19);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v21);
    }

    uint64_t v22 = a1[8];
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:", v6));
    (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v23);
  }

  +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  a1[7]);
}

id sub_1000304B0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id sub_1000304F0(uint64_t a1)
{
  return +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  *(void *)(a1 + 32));
}

id sub_100030524(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:"));
  }

  else
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v5]);
  }

  return v3;
}

void sub_1000305A0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = a1[4];
  if (v6)
  {
    id v8 = [v7 enqueueCloudKitFetchFailedEventWithError:v6];
    (*((void (**)(void))a1[7] + 2))();
    +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  a1[5]);
  }

  else
  {
    id v9 = [v7 enqueueCloudKitFetchSuccessEvent];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1[6] multiUserController]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] metricsIdentifier]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 performAuthenticationForHomeParticipantRecord:v5 metricsIdentifier:v11]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000306E0;
    v13[3] = &unk_1000D72B0;
    id v15 = a1[7];
    id v14 = a1[5];
    [v12 resultWithCompletion:v13];
  }
}

id sub_1000306E0(uint64_t a1)
{
  return +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  *(void *)(a1 + 32));
}

id sub_100030940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    (*(void (**)(void, uint64_t, void))(v3 + 16))(*(void *)(a1 + 40), 1LL, 0LL);
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDMultiUserService _sanitizeError:](&OBJC_CLASS___AMSDMultiUserService, "_sanitizeError:"));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);
  }

  return +[AMSDTransactionStore releaseKeepAliveTransaction:]( &OBJC_CLASS___AMSDTransactionStore,  "releaseKeepAliveTransaction:",  *(void *)(a1 + 32));
}

id sub_100030BE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 users]);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_10003102C;
    v43[3] = &unk_1000D5ED8;
    id v44 = *(id *)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_firstObjectPassingTest:", v43));

    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databaseForHome:v5 user:v8]);
      if (!v9)
      {
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v33) {
          id v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        unsigned int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v33 OSLogObject]);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v35);
          uint64_t v38 = AMSLogKey(v36, v37);
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v46 = v36;
          __int16 v47 = 2114;
          id v48 = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. Failed to find a valid database.",  buf,  0x16u);
        }

        uint64_t v40 = AMSError( 2LL,  @"Invalid Home/Home User",  @"There's no valid database for the home/home user.",  0LL);
        char v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v41));

        goto LABEL_21;
      }

      uint64_t v10 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) _multiUserTokenForHomeuser:v8 home:v5 database:v9 metrics:*(void *)(a1 + 56) qualityOfService:*(void *)(a1 + 64)]);
    }

    else
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v23) {
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v23 OSLogObject]);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v25);
        uint64_t v28 = AMSLogKey(v26, v27);
        __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v30 = AMSHashIfNeeded(*(void *)(a1 + 32));
        id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v46 = v26;
        __int16 v47 = 2114;
        id v48 = v29;
        __int16 v49 = 2114;
        uint64_t v50 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. Failed to find a home user matching the given i dentifier. homeUserIdentifier = %{public}@",  buf,  0x20u);
      }

      uint64_t v32 = AMSError( 2LL,  @"Invalid Home User Identifier",  @"No home user exists with the given home user identifier.",  0LL);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v32);
      uint64_t v10 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v9));
    }

    uint64_t v22 = (void *)v10;
LABEL_21:

    uint64_t v21 = v44;
    goto LABEL_22;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v11) {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11 OSLogObject]);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v13);
    uint64_t v16 = AMSLogKey(v14, v15);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = AMSHashIfNeeded(v6);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v46 = v14;
    __int16 v47 = 2114;
    id v48 = v17;
    __int16 v49 = 2114;
    uint64_t v50 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. Failed to find a home matching the given identifier . error = %{public}@",  buf,  0x20u);
  }

  uint64_t v20 = AMSError(2LL, @"Invalid Home Identifier", @"No home exists with the given home identifier.", v6);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v21));
LABEL_22:

  return v22;
}

id sub_10003102C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10003106C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
LABEL_13:
    v7();
    goto LABEL_14;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"AMSDCloudDataRetryAfterKey"]);

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSNumber, v10);
  id v12 = (objc_opt_isKindOfClass(v9, v11) & 1) != 0 ? v9 : 0LL;

  [v12 doubleValue];
  double v14 = v13;

  if (v14 <= 0.0)
  {
LABEL_8:
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v15) {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v15 OSLogObject]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v17);
      uint64_t v20 = AMSLogKey(v18, v19);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v43 = v18;
      __int16 v44 = 2114;
      id v45 = v21;
      __int16 v46 = 2114;
      double v47 = *(double *)&v6;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. Failed with an error while contacting CloudKit. e rror = %{public}@",  buf,  0x20u);
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
    goto LABEL_13;
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v22) {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue([v22 OSLogObject]);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = objc_opt_class(*(void *)(a1 + 32), v24);
    uint64_t v27 = AMSLogKey(v25, v26);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v43 = v25;
    __int16 v44 = 2114;
    id v45 = v28;
    __int16 v46 = 2048;
    double v47 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Received a throttling error while fetching multi-user token. Queuing another attempt. retry delay = %f",  buf,  0x20u);
  }

  dispatch_time_t v29 = dispatch_time(0LL, (uint64_t)(v14 * 1000000000.0));
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v31 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_1000313D4;
  v36[3] = &unk_1000D7378;
  uint64_t v32 = *(void **)(a1 + 40);
  v36[4] = *(void *)(a1 + 32);
  id v37 = v32;
  id v38 = *(id *)(a1 + 48);
  id v33 = *(id *)(a1 + 56);
  uint64_t v35 = *(void **)(a1 + 64);
  uint64_t v34 = *(void *)(a1 + 72);
  id v39 = v33;
  uint64_t v41 = v34;
  id v40 = v35;
  dispatch_after(v29, v31, v36);

LABEL_14:
}

id sub_1000313D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _multiUserTokenForHomeIdentifier:*(void *)(a1 + 40) homeUserIdentifier:*(void *)(a1 + 48) metrics:*(void *)(a1 + 56) qualityOfService:*(void *)(a1 + 72) completion:*(void *)(a1 + 64)];
}

id sub_10003151C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [v6 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v7 qualityOfService:*(void *)(a1 + 48)]);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100031730;
    v23[3] = &unk_1000D73C8;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    id v24 = v9;
    uint64_t v25 = v10;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 continueWithBlock:v23]);
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v12) {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    double v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12 OSLogObject]);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v14);
      uint64_t v17 = AMSLogKey(v15, v16);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      uint64_t v19 = AMSHashIfNeeded(v5);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v27 = v15;
      __int16 v28 = 2114;
      dispatch_time_t v29 = v18;
      __int16 v30 = 2114;
      id v31 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. Failed to fetch the home's record zone. error = %{public}@",  buf,  0x20u);
    }

    id v21 = [*(id *)(a1 + 32) enqueueCloudKitFetchFailedEventWithError:v5];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v5));
  }

  return v11;
}

id sub_100031730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5 || (objc_msgSend(v6, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7) & 1) != 0)
  {
    id v8 = [*(id *)(a1 + 32) enqueueCloudKitFetchSuccessEvent];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"AMSHomeParticipant_MultiUserToken"]);
    if (v10)
    {
      uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString, v9);
      if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v10));
LABEL_40:

        goto LABEL_41;
      }

      if (os_variant_has_internal_content("com.apple.AppleMediaServices"))
      {
        unsigned int v23 = +[AMSUnitTests isRunningUnitTests](&OBJC_CLASS___AMSUnitTests, "isRunningUnitTests");
        id v24 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
        uint64_t v25 = objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        uint64_t v26 = (void *)v25;
        if (v23)
        {
          if (!v25) {
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
          }
          uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue([v26 OSLogObject]);
          BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
          if (v28)
          {
            uint64_t v30 = AMSLogKey(v28, v29);
            id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
            uint64_t v33 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v32);
            uint64_t v35 = v33;
            if (v31)
            {
              uint64_t v36 = AMSLogKey(v33, v34);
              uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);
              id v38 = NSStringFromSelector(*(SEL *)(a1 + 40));
              a1 = objc_claimAutoreleasedReturnValue(v38);
              uint64_t v77 = (void *)v37;
              uint64_t v76 = v37;
              id v24 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
              id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] %@ ",  v35,  v76,  a1));
            }

            else
            {
              __int16 v65 = NSStringFromSelector(*(SEL *)(a1 + 40));
              uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v65);
              id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: %@ ",  v35,  v77));
            }

            id v66 = (objc_class *)objc_opt_class(v10, v39);
            __int16 v67 = NSStringFromClass(v66);
            id v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
            *(_DWORD *)__int128 buf = 138543618;
            uint64_t v79 = (uint64_t)v40;
            __int16 v80 = 2114;
            id v81 = v68;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%{public}@Unexpected type found when retrieving multi-user token. Expected NSString, got %{public}@.",  buf,  0x16u);
            if (v31)
            {

              id v40 = (void *)a1;
            }
          }

          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
          uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue([v24[507] sharedAccountsMultiUserConfig]);
          [v26 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v51 userInfo:0];
        }

        else
        {
          if (!v25) {
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
          }
          uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue([v26 OSLogObject]);
          BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_FAULT);
          if (v52)
          {
            uint64_t v54 = AMSLogKey(v52, v53);
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
            uint64_t v57 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v56);
            uint64_t v59 = v57;
            if (v55)
            {
              uint64_t v60 = AMSLogKey(v57, v58);
              id v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
              uint64_t v62 = NSStringFromSelector(*(SEL *)(a1 + 40));
              a1 = objc_claimAutoreleasedReturnValue(v62);
              id v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] %@ ",  v59,  v61,  a1));
            }

            else
            {
              uint64_t v69 = NSStringFromSelector(*(SEL *)(a1 + 40));
              id v61 = (void *)objc_claimAutoreleasedReturnValue(v69);
              id v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: %@ ",  v59,  v61));
            }

            __int16 v70 = (objc_class *)objc_opt_class(v10, v63);
            uint64_t v71 = NSStringFromClass(v70);
            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
            *(_DWORD *)__int128 buf = 138543618;
            uint64_t v79 = (uint64_t)v64;
            __int16 v80 = 2114;
            id v81 = v72;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_FAULT,  "%{public}@Unexpected type found when retrieving multi-user token. Expected NSString, got %{public}@.",  buf,  0x16u);
            if (v55)
            {

              id v64 = (void *)a1;
            }
          }
        }
      }

      uint64_t v20 = @"Invalid Multi-User Token";
      id v21 = @"A multi-user token was found of the wrong class.";
      uint64_t v22 = 2LL;
    }

    else
    {
      double v13 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v13) {
        double v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v15);
        uint64_t v18 = AMSLogKey(v16, v17);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v79 = v16;
        __int16 v80 = 2114;
        id v81 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. The home participant has no multi-user token.",  buf,  0x16u);
      }

      uint64_t v20 = @"No Multi-User Token";
      id v21 = @"The home participant has no multi-user token.";
      uint64_t v22 = 7LL;
    }

    uint64_t v73 = AMSError(v22, v20, v21, 0LL);
    uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v74));

    goto LABEL_40;
  }

  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v41) {
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue([v41 OSLogObject]);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
  {
    uint64_t v44 = objc_opt_class(&OBJC_CLASS___AMSDMultiUserService, v43);
    uint64_t v46 = AMSLogKey(v44, v45);
    double v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
    uint64_t v48 = AMSHashIfNeeded(v7);
    __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v79 = v44;
    __int16 v80 = 2114;
    id v81 = v47;
    __int16 v82 = 2114;
    uint64_t v83 = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to fetch the multi-user token. Failed to fetch the homeParticipant record. error = %{public}@",  buf,  0x20u);
  }

  id v50 = [*(id *)(a1 + 32) enqueueCloudKitFetchFailedEventWithError:v7];
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v7));
LABEL_41:

  return v12;
}

void sub_1000320F4(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___AMSDPaymentValidationService);
  id v2 = (void *)qword_1000F2040;
  qword_1000F2040 = (uint64_t)v1;
}

void sub_10003215C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.AppleMediaServices.AMSDPaymentValidationService", v4);
  uint64_t v3 = (void *)qword_1000F2050;
  qword_1000F2050 = (uint64_t)v2;
}

void sub_1000322D0(uint64_t a1)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2050000000LL;
  dispatch_queue_t v2 = (void *)qword_1000F2058;
  uint64_t v12 = qword_1000F2058;
  if (!qword_1000F2058)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100032728;
    v8[3] = &unk_1000D6B98;
    void v8[4] = &v9;
    sub_100032728((uint64_t)v8);
    dispatch_queue_t v2 = (void *)v10[3];
  }

  uint64_t v3 = v2;
  _Block_object_dispose(&v9, 8);
  id v4 = objc_alloc_init(v3);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000323E4;
  v6[3] = &unk_1000D74B0;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v4 paymentHardwareStatusWithType:1 completion:v6];
}

void sub_1000323CC(_Unwind_Exception *a1)
{
}

void sub_1000323E4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = [a2 canMakeLocalPayments];
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedPurchaseConfig](&OBJC_CLASS___AMSLogConfig, "sharedPurchaseConfig"));
    if (!v5) {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      uint64_t v9 = AMSLogKey(v7, v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v12 = objc_opt_class(*(void *)(a1 + 32), v11);
      uint64_t v14 = v12;
      if (v10)
      {
        uint64_t v15 = AMSLogKey(v12, v13);
        uint64_t v2 = objc_claimAutoreleasedReturnValue(v15);
        uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: [%@] ", v14, v2));
      }

      else
      {
        uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v12));
      }

      uint64_t v18 = (void *)v16;
      uint64_t v29 = AMSLogKey(v16, v17);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
      *(_DWORD *)__int128 buf = 138543874;
      id v38 = v18;
      __int16 v39 = 2114;
      id v40 = v30;
      __int16 v41 = 2114;
      __int128 v42 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Get payment hardware status. canUseApplePay = %{public}@",  buf,  0x20u);

      if (v10)
      {

        uint64_t v18 = (void *)v2;
      }
    }

    uint64_t v32 = objc_claimAutoreleasedReturnValue( +[AMSDPaymentValidationService paymentHardwareType]( &OBJC_CLASS___AMSDPaymentValidationService,  "paymentHardwareType"));
    BOOL v28 = (void *)v32;
    uint64_t v33 = @"false";
    if ((_DWORD)v4) {
      uint64_t v33 = @"true";
    }
    v35[0] = AMSHTTPHeaderPaymentHardwareStatus;
    v35[1] = AMSHTTPHeaderPaymentHardwareType;
    v36[0] = v33;
    v36[1] = v32;
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v36,  v35,  2LL));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedPurchaseConfig](&OBJC_CLASS___AMSLogConfig, "sharedPurchaseConfig"));
    if (!v19) {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 OSLogObject]);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = (void *)objc_opt_class(*(void *)(a1 + 32), v21);
      id v23 = v22;
      uint64_t v25 = AMSLogKey(v23, v24);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      *(_DWORD *)__int128 buf = 138543618;
      id v38 = v22;
      __int16 v39 = 2114;
      id v40 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to get paymentHardwareStatus",  buf,  0x16u);
    }

    uint64_t v27 = AMSError(500LL, @"Payment Hardware Status Error", @"Failed to get paymentHardwareStatus", 0LL);
    BOOL v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

Class sub_100032728(uint64_t a1)
{
  uint64_t v3 = 0LL;
  if (!qword_1000F2060)
  {
    __int128 v4 = off_1000D74D0;
    uint64_t v5 = 0LL;
    qword_1000F2060 = _sl_dlopen(&v4, &v3);
    if (!qword_1000F2060)
    {
      abort_report_np("%s", (const char *)v3);
LABEL_8:
      sub_100097B4C();
    }

    if (v3) {
      free(v3);
    }
  }

  Class result = objc_getClass("PKInAppPaymentService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    goto LABEL_8;
  }
  qword_1000F2058 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10003285C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AMSDPaymentViewService);
  uint64_t v2 = (void *)qword_1000F2070;
  qword_1000F2070 = (uint64_t)v1;
}

void sub_100032ABC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedPurchaseConfig](&OBJC_CLASS___AMSLogConfig, "sharedPurchaseConfig"));
    if (!v7) {
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_opt_class(*(void *)(a1 + 32), v9);
      uint64_t v12 = AMSLogKey(v10, v11);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      int v22 = 138543874;
      uint64_t v23 = v10;
      __int16 v24 = 2114;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      id v27 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Encountered an error while performing payment view provider session. Error = %{public}@",  (uint8_t *)&v22,  0x20u);
LABEL_10:
    }
  }

  else
  {
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v7) {
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = objc_opt_class(*(void *)(a1 + 32), v14);
      uint64_t v17 = AMSLogKey(v15, v16);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v17);
      uint64_t v18 = AMSHashIfNeeded(v5);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      int v22 = 138543874;
      uint64_t v23 = v15;
      __int16 v24 = 2114;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      id v27 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Payment confirmation in amsaccountsd finished with result: %{public}@",  (uint8_t *)&v22,  0x20u);

      goto LABEL_10;
    }
  }

  uint64_t v20 = *(void *)(a1 + 40);
  if (v20)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, id, void *))(v20 + 16))(v20, v5, v21);
  }
}

void sub_100032F94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100032FB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100032FC4(uint64_t a1)
{
}

void sub_100032FCC(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_class(a1[4], a2), "_fdsResultCache");
  id v7 = (id)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:a1[5]]);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100033234(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[6];
  id v4 = objc_msgSend((id)objc_opt_class(a1[4], a2), "_fdsResultCache");
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  [v5 setObject:v3 forKeyedSubscript:a1[5]];
}

void sub_100033BD4(id a1)
{
  uint64_t v1 = -[AMSLRUCache initWithMaxSize:](objc_alloc(&OBJC_CLASS___AMSLRUCache), "initWithMaxSize:", 5LL);
  uint64_t v2 = (void *)qword_1000F2080;
  qword_1000F2080 = (uint64_t)v1;
}

void sub_100033C44(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.AMSDPurchaseService.FDSConsumedCache", v4);
  uint64_t v3 = (void *)qword_1000F2090;
  qword_1000F2090 = (uint64_t)v2;
}

void sub_100033CD4(id a1)
{
  dispatch_queue_attr_t v1 = -[AMSLRUCache initWithMaxSize:](objc_alloc(&OBJC_CLASS___AMSLRUCache), "initWithMaxSize:", 5LL);
  dispatch_queue_t v2 = (void *)qword_1000F20A0;
  qword_1000F20A0 = (uint64_t)v1;
}

void sub_100033D44(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.AMSDPurchaseService.FDSEvaluatorCache", v4);
  uint64_t v3 = (void *)qword_1000F20B0;
  qword_1000F20B0 = (uint64_t)v2;
}

void sub_100033DD4(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  dispatch_queue_t v2 = (void *)qword_1000F20C0;
  qword_1000F20C0 = (uint64_t)v1;
}

void sub_100033E3C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.AMSDPurchaseService.FDSResultCache", v4);
  uint64_t v3 = (void *)qword_1000F20D0;
  qword_1000F20D0 = (uint64_t)v2;
}

void sub_100033ECC(id a1)
{
  dispatch_queue_attr_t v1 = -[AMSLRUCache initWithMaxSize:](objc_alloc(&OBJC_CLASS___AMSLRUCache), "initWithMaxSize:", 5LL);
  dispatch_queue_t v2 = (void *)qword_1000F20E0;
  qword_1000F20E0 = (uint64_t)v1;
}

void sub_100033F3C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.AMSDPurchaseService.ODISessionCache", 0LL);
  dispatch_queue_t v2 = (void *)qword_1000F20F0;
  qword_1000F20F0 = (uint64_t)v1;
}

void sub_100034C10(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsConfig"));
  if (!v6) {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v11 = AMSLogKey(v9, v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = 138544130;
    uint64_t v14 = v9;
    __int16 v15 = 2114;
    uint64_t v16 = v12;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 2114;
    id v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Data cache update result: %d error: %{public}@",  (uint8_t *)&v13,  0x26u);
  }
}

void sub_100034D3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsConfig"));
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
      uint64_t v9 = AMSLogKey(v7, v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      int v11 = 138543874;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      id v16 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Account data sync returned error: %{public}@",  (uint8_t *)&v11,  0x20u);
    }
  }
}

LABEL_37:
}

id sub_10003562C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v2) {
    dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v6 = AMSLogKey(v4, v5);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
    uint64_t v11 = v9;
    __int16 v41 = (void *)v7;
    if (v7)
    {
      uint64_t v12 = AMSLogKey(v9, v10);
      uint64_t v39 = objc_claimAutoreleasedReturnValue(v12);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v11,  v39));
    }

    else
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v9));
    }

    id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "ams_DSID"));
    uint64_t v15 = AMSHashIfNeeded(v14);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
    int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 base64EncodedStringWithOptions:0]);
    uint64_t v20 = AMSHashIfNeeded(v19);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v45 = v13;
    __int16 v46 = 2114;
    double v47 = v16;
    __int16 v48 = 2114;
    __int16 v49 = v17;
    __int16 v50 = 2114;
    uint64_t v51 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@Performing token registration. account: %{public}@ | environment: %{public}@ | token: %{public}@",  buf,  0x2Au);

    if (v41)
    {

      __int16 v13 = (void *)v39;
    }
  }

  uint64_t v22 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
  if (v22
    && (uint64_t v23 = (void *)v22,
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]),
        v24,
        v23,
        v24))
  {
    __int16 v26 = (void *)objc_opt_class(*(void *)(a1 + 32), v25);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    BOOL v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v26 shouldPerformForAccount:v27 environment:v28 token:v29]);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_1000359B8;
    v42[3] = &unk_1000D7748;
    void v42[4] = *(void *)(a1 + 32);
    char v43 = 0;
    id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 thenWithBlock:v42]);
  }

  else
  {
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
    if (v32) {
      uint64_t v33 = @"true";
    }
    else {
      uint64_t v33 = @"false";
    }
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    if (v34) {
      uint64_t v35 = @"true";
    }
    else {
      uint64_t v35 = @"false";
    }
    id v38 = v35;
    uint64_t v36 = AMSErrorWithFormat(2LL, @"Push Register Failed", @"Invalid parameters. hasBag: %@ | hasToken: %@");
    id v27 = (void *)objc_claimAutoreleasedReturnValue(v36);

    id v31 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v27, v33, v38));
  }

  return v31;
}

id sub_1000359B8(uint64_t a1, void *a2)
{
  if ([a2 BOOLValue])
  {
    id v3 = objc_alloc(&OBJC_CLASS___AMSPushRegisterTask);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
    id v8 = [v3 initWithAccount:v4 token:v5 environment:v6 bag:v7];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 performTask]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100035B7C;
    v16[3] = &unk_1000D5AD8;
    v16[4] = *(void *)(a1 + 32);
    [v9 addErrorBlock:v16];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100035D10;
    v15[3] = &unk_1000D76F8;
    v15[4] = *(void *)(a1 + 32);
    [v9 addSuccessBlock:v15];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100035E94;
    v13[3] = &unk_1000D7720;
    char v14 = *(_BYTE *)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    [v9 addFinishBlock:v13];
  }

  else
  {
    uint64_t v10 = AMSError(11LL, @"Push Register Failed", @"Not able to perform register task", 0LL);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v11));
  }

  return v9;
}

void sub_100035B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v4) {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v11 = objc_opt_class(*(void *)(a1 + 32), v10);
    uint64_t v13 = v11;
    if (v9)
    {
      uint64_t v14 = AMSLogKey(v11, v12);
      a1 = objc_claimAutoreleasedReturnValue(v14);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v13,  a1));
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v11));
    }

    uint64_t v16 = AMSLogableError(v3);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    *(_DWORD *)__int128 buf = 138543618;
    __int16 v19 = v15;
    __int16 v20 = 2114;
    uint64_t v21 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@Token registration failed with error: %{public}@",  buf,  0x16u);
    if (v9)
    {

      uint64_t v15 = (void *)a1;
    }
  }
}

void sub_100035D10(uint64_t a1)
{
  uint64_t v1 = a1;
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 token]);
  [v2 _updateCachedCriteriaWithToken:v3];

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v4) {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v11 = objc_opt_class(*(void *)(v1 + 32), v10);
    uint64_t v13 = v11;
    if (v9)
    {
      uint64_t v14 = AMSLogKey(v11, v12);
      uint64_t v1 = objc_claimAutoreleasedReturnValue(v14);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v13,  v1));
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v11));
    }

    *(_DWORD *)__int128 buf = 138543362;
    __int16 v17 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}@Token registration succeeded",  buf,  0xCu);
    if (v9)
    {

      uint64_t v15 = (void *)v1;
    }
  }
}

void sub_100035E94(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    id v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
    [v3 _updateThrottleForAccount:v5 environment:v4];
  }

id sub_1000362F0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (([v4 BOOLValue] & 1) == 0)
  {
    __int16 v17 = v4;
LABEL_21:
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v17));
    goto LABEL_22;
  }

  if ([*(id *)(a1 + 56) _shouldThrottleForAccount:*(void *)(a1 + 32) environment:*(void *)(a1 + 40)])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v5) {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      uint64_t v9 = AMSLogKey(v7, v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v12 = objc_opt_class(*(void *)(a1 + 56), v11);
      uint64_t v14 = v12;
      if (v10)
      {
        uint64_t v15 = AMSLogKey(v12, v13);
        uint64_t v2 = objc_claimAutoreleasedReturnValue(v15);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v14,  v2));
      }

      else
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v12));
      }

      uint64_t v34 = AMSHashIfNeeded(*(void *)(a1 + 32));
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      uint64_t v36 = AMSHashIfNeeded(*(void *)(a1 + 40));
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v40 = (uint64_t)v16;
      __int16 v41 = 2114;
      __int128 v42 = v35;
      __int16 v43 = 2114;
      uint64_t v44 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@Throttling registration. account: %{public}@ | environment: %{public}@",  buf,  0x20u);
      if (v10)
      {

        uint64_t v16 = (void *)v2;
      }
    }

    __int16 v17 = &__kCFBooleanFalse;
    goto LABEL_21;
  }

  int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _createCriteriaWithToken:*(void *)(a1 + 48)]);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_registerSuccessCriteria"));
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  unsigned int v21 = [v20 isEqualToString:v18];
  if (v21)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v22) {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue([v22 OSLogObject]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = objc_opt_class(*(void *)(a1 + 56), v24);
      uint64_t v27 = AMSLogKey(v25, v26);
      BOOL v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
      uint64_t v30 = AMSHashIfNeeded(v29);
      id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v40 = v25;
      __int16 v41 = 2114;
      __int128 v42 = v28;
      __int16 v43 = 2114;
      uint64_t v44 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Already posted registration for %{public}@",  buf,  0x20u);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v21 ^ 1));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v32));

LABEL_22:
  return v33;
}

void sub_100037094(_Unwind_Exception *a1)
{
}

void sub_1000370D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceNameChanged];
}

id sub_1000370FC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _startConnectionWithEnvironment:a2];
}

void sub_1000371A8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AMSDPushService);
  uint64_t v2 = (void *)qword_1000F2100;
  qword_1000F2100 = (uint64_t)v1;
}

id sub_1000375A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateDeviceAccountPrivacyIfNeeded];
}

AMSPromise *__cdecl sub_1000388A0(id a1, NSArray *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[NSArray count](a2, "count") != 0));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return (AMSPromise *)v3;
}

AMSPromise *__cdecl sub_100038904(id a1, NSArray *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[NSArray count](a2, "count") != 0));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return (AMSPromise *)v3;
}

id sub_100038968(uint64_t a1, void *a2)
{
  if ([a2 BOOLValue])
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDBag defaultBag](&OBJC_CLASS___AMSDBag, "defaultBag"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 _pushEnvironmentFromBag:v4]);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5 thenWithBlock:&stru_1000D7888]);
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSOptional optionalWithNil](&OBJC_CLASS___AMSOptional, "optionalWithNil"));
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  return v6;
}

AMSPromise *__cdecl sub_100038A18(id a1, NSString *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSOptional optionalWithValue:](&OBJC_CLASS___AMSOptional, "optionalWithValue:", a2));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return (AMSPromise *)v3;
}

id sub_100038A6C(uint64_t a1, void *a2)
{
  if ([a2 BOOLValue])
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDBag bagForMediaType:]( &OBJC_CLASS___AMSDBag,  "bagForMediaType:",  AMSAccountMediaTypeAppStoreSandbox));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 _pushEnvironmentFromBag:v4]);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5 thenWithBlock:&stru_1000D78A8]);
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSOptional optionalWithNil](&OBJC_CLASS___AMSOptional, "optionalWithNil"));
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v4));
  }

  return v6;
}

AMSPromise *__cdecl sub_100038B28(id a1, NSString *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSOptional optionalWithValue:](&OBJC_CLASS___AMSOptional, "optionalWithValue:", a2));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return (AMSPromise *)v3;
}

AMSPromise *__cdecl sub_100038B7C(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  id v3 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSArray count](v2, "count"));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = v2;
  id v5 = -[NSArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v8), "value", (void)v14));
        -[NSMutableArray ams_addNullableObject:](v3, "ams_addNullableObject:", v9);

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = -[NSArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
    }

    while (v6);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v11));

  return (AMSPromise *)v12;
}

id sub_100038D04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v3 count]);
  os_unfair_lock_assert_not_owner((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allKeys]);
  id v6 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v30;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
        if (([v3 containsObject:v10] & 1) == 0)
        {
          uint64_t v11 = *(id **)(a1 + 32);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11[4] objectForKeyedSubscript:v10]);
          [v11 _shutDownConnection:v12 forEnvironment:v10];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
    }

    while (v7);
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v13 = v3;
  id v14 = [v13 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v26;
    do
    {
      for (j = 0LL; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)j);
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v18]);

        if (!v19) {
          -[NSMutableArray addObject:](v4, "addObject:", v18);
        }
      }

      id v15 = [v13 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }

    while (v15);
  }

  os_unfair_lock_assert_owner((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  if (-[NSMutableArray count](v4, "count"))
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100038FFC;
    v24[3] = &unk_1000D78F0;
    void v24[4] = *(void *)(a1 + 32);
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ams_mapWithTransform:", v24));
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithAll:](&OBJC_CLASS___AMSPromise, "promiseWithAll:", v20));
  }

  else
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AMSBinaryPromise promiseWithSuccess](&OBJC_CLASS___AMSBinaryPromise, "promiseWithSuccess"));
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v22 promiseAdapter]);
  }

  return v21;
}

id sub_100038FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _startConnectionWithEnvironment:a2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 promiseAdapter]);

  return v3;
}

LABEL_7:
  uint64_t v8 = APSEnvironmentProduction;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 stringForKey:@"push-notifications/environment"]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valuePromise]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000391FC;
  v15[3] = &unk_1000D5AD8;
  v15[4] = self;
  [v10 addErrorBlock:v15];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10003932C;
  v13[3] = &unk_1000D7148;
  uint64_t v8 = v8;
  id v14 = v8;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 catchWithBlock:v13]);

LABEL_10:
  return v11;
}

  uint64_t v16 = 0;
LABEL_69:

  return v16;
}

  uint64_t v12 = sub_10008C85C(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

void sub_1000391FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v4) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = AMSHashIfNeeded(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = 138543874;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    uint64_t v16 = v10;
    __int16 v17 = 2114;
    uint64_t v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to determine the push environment. error = %{public}@",  (uint8_t *)&v13,  0x20u);
  }
}

AMSPromise *sub_10003932C(uint64_t a1)
{
  return +[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", *(void *)(a1 + 32));
}

BOOL sub_1000396AC(id a1, ACAccount *a2)
{
  return -[ACAccount ams_isLocalAccount](a2, "ams_isLocalAccount") ^ 1;
}

id sub_1000396C8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_filterUsingTest:", *(void *)(a1 + 32)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return v3;
}

id sub_100039718(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ams_filterUsingTest:", *(void *)(a1 + 32)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return v3;
}

AMSPromise *__cdecl sub_100039768(id a1, ACAccount *a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v3, v6));

  return (AMSPromise *)v4;
}

AMSPromise *__cdecl sub_100039810(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 0LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 1LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 arrayByAddingObjectsFromArray:v4]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 2LL));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 arrayByAddingObjectsFromArray:v6]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v7));

  return (AMSPromise *)v8;
}

id sub_1000398D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _registerAccounts:a2 withOptions:*(void *)(a1 + 40)];
}

void sub_1000398E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v4) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = AMSLogableError(v3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = 138543874;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    uint64_t v16 = v10;
    __int16 v17 = 2114;
    uint64_t v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to post push tokens. %{public}@",  (uint8_t *)&v13,  0x20u);
  }
}

id sub_100039BC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pushEnvironmentForAccount:v3]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100039C70;
  v9[3] = &unk_1000D7A10;
  uint64_t v5 = *(void *)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v5;
  id v6 = v3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 thenWithBlock:v9]);

  return v7;
}

id sub_100039C70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _connectionForEnvironment:v3]);

  if (v4)
  {
    uint64_t v37 = 0LL;
    id v38 = &v37;
    uint64_t v39 = 0x3032000000LL;
    uint64_t v40 = sub_10003A018;
    __int16 v41 = sub_10003A028;
    id v42 = 0LL;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registerTaskQueue]);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10003A030;
    v32[3] = &unk_1000D79E8;
    id v6 = *(void **)(a1 + 40);
    void v32[4] = *(void *)(a1 + 32);
    id v33 = v6;
    id v34 = v3;
    uint64_t v35 = &v37;
    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v7 = v32;
    uint64_t v8 = v5;
    uint64_t v10 = AMSLogKey(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(void *)block = _NSConcreteStackBlock;
    *(void *)&block[8] = 3221225472LL;
    *(void *)&block[16] = sub_10003AF08;
    uint64_t v44 = &unk_1000D6208;
    id v45 = v11;
    id v46 = v7;
    id v12 = v11;
    dispatch_sync(v8, block);

    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v13) {
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_opt_class(*(void *)(a1 + 32), v15);
      uint64_t v18 = AMSLogKey(v16, v17);
      id v19 = (id)objc_claimAutoreleasedReturnValue(v18);
      uint64_t v20 = AMSHashIfNeeded(v38[5]);
      unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      *(_DWORD *)block = 138543874;
      *(void *)&void block[4] = v16;
      *(_WORD *)&block[12] = 2114;
      *(void *)&block[14] = v19;
      *(_WORD *)&block[22] = 2114;
      uint64_t v44 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Task promise: %{public}@",  block,  0x20u);
    }

    id v22 = (id)v38[5];
    _Block_object_dispose(&v37, 8);
  }

  else
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v23) {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v23 OSLogObject]);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = objc_opt_class(*(void *)(a1 + 32), v25);
      uint64_t v28 = AMSLogKey(v26, v27);
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      *(_DWORD *)block = 138543874;
      *(void *)&void block[4] = v26;
      *(_WORD *)&block[12] = 2114;
      *(void *)&block[14] = v29;
      *(_WORD *)&block[22] = 2114;
      uint64_t v44 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] No active connection for this environment. Starting connection. environment = %{public}@",  block,  0x20u);
    }

    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _startConnectionWithEnvironment:v3]);
    id v22 = (id)objc_claimAutoreleasedReturnValue([v30 promiseAdapter]);
  }

  return v22;
}

void sub_100039FEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10003A018(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003A028(uint64_t a1)
{
}

void sub_10003A030(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v2) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = AMSHashIfNeeded(*(void *)(a1 + 40));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t v79 = 138544130;
    *(void *)&v79[4] = v5;
    *(_WORD *)&v79[12] = 2114;
    *(void *)&v79[14] = v8;
    *(_WORD *)&v79[22] = 2114;
    __int16 v80 = v10;
    __int16 v81 = 2114;
    uint64_t v82 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Starting push registration. account = %{public}@ | environment = %{public}@",  v79,  0x2Au);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pushTokenForEnvironment:*(void *)(a1 + 48)]);
  if (!v12 || !*(void *)(a1 + 48))
  {
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v13) {
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    uint64_t v16 = objc_opt_class(*(void *)(a1 + 32), v15);
    uint64_t v18 = AMSLogKey(v16, v17);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    uint64_t v20 = AMSHashIfNeeded(v12);
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    uint64_t v22 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t v79 = 138544130;
    *(void *)&v79[4] = v16;
    *(_WORD *)&v79[12] = 2114;
    *(void *)&v79[14] = v19;
    *(_WORD *)&v79[22] = 2114;
    __int16 v80 = v21;
    __int16 v81 = 2114;
    uint64_t v82 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Either the token or environment is nil. token = %{public}@ | environment = %{public}@",  v79,  0x2Au);

    goto LABEL_14;
  }

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v27) {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v27 OSLogObject]);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = objc_opt_class(*(void *)(a1 + 32), v29);
      uint64_t v32 = AMSLogKey(v30, v31);
      id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      *(_DWORD *)uint64_t v79 = 138543618;
      *(void *)&v79[4] = v30;
      *(_WORD *)&v79[12] = 2114;
      *(void *)&v79[14] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Checking to see if we should perform push registration.",  v79,  0x16u);
    }

    if ((objc_msgSend(*(id *)(a1 + 40), "ams_isLocalAccount") & 1) == 0)
    {
      BOOL v52 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDPushRegisterTask shouldPerformForAccount:environment:token:]( &OBJC_CLASS___AMSDPushRegisterTask,  "shouldPerformForAccount:environment:token:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v12));

      uint64_t v53 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
      int v13 = (void *)v53;
      if (v52)
      {
        if (!v53) {
          int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          uint64_t v56 = objc_opt_class(*(void *)(a1 + 32), v55);
          uint64_t v58 = AMSLogKey(v56, v57);
          uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
          *(_DWORD *)uint64_t v79 = 138543618;
          *(void *)&v79[4] = v56;
          *(_WORD *)&v79[12] = 2114;
          *(void *)&v79[14] = v59;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] We should perform push registration.",  v79,  0x16u);
        }

LABEL_44:
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _bagForAccount:*(void *)(a1 + 40)]);
        uint64_t v26 = -[AMSDPushRegisterTask initWithAccount:token:environment:bag:]( objc_alloc(&OBJC_CLASS___AMSDPushRegisterTask),  "initWithAccount:token:environment:bag:",  *(void *)(a1 + 40),  v12,  *(void *)(a1 + 48),  v23);
        __int16 v49 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
        if (!v49) {
          __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue([v49 OSLogObject]);
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_INFO)) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }

      if (!v53) {
        int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
        goto LABEL_15;
      }
      uint64_t v71 = objc_opt_class(*(void *)(a1 + 32), v70);
      uint64_t v73 = AMSLogKey(v71, v72);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v73);
      *(_DWORD *)uint64_t v79 = 138543618;
      *(void *)&v79[4] = v71;
      *(_WORD *)&v79[12] = 2114;
      *(void *)&v79[14] = v19;
      uint64_t v74 = "%{public}@: [%{public}@] We should not perform push registration. Returning success.";
      goto LABEL_57;
    }
  }

  else if ((objc_msgSend(*(id *)(a1 + 40), "ams_isLocalAccount") & 1) == 0)
  {
    goto LABEL_44;
  }

  if (!_os_feature_enabled_impl("AppleMediaServices", "Metcalf")
    || !+[AMSDevice deviceIsBundle](&OBJC_CLASS___AMSDevice, "deviceIsBundle"))
  {
    goto LABEL_16;
  }

  id v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v34) {
    id v34 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([v34 OSLogObject]);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    uint64_t v37 = objc_opt_class(*(void *)(a1 + 32), v36);
    uint64_t v39 = AMSLogKey(v37, v38);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    *(_DWORD *)uint64_t v79 = 138543618;
    *(void *)&v79[4] = v37;
    *(_WORD *)&v79[12] = 2114;
    *(void *)&v79[14] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Checking to see if we should perform bundle push registration.",  v79,  0x16u);
  }

  unsigned int v41 = +[AMSDBundlePushRegisterTask shouldPerformForAccount:environment:token:]( &OBJC_CLASS___AMSDBundlePushRegisterTask,  "shouldPerformForAccount:environment:token:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v12);
  uint64_t v42 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  int v13 = (void *)v42;
  if (v41)
  {
    if (!v42) {
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      uint64_t v45 = objc_opt_class(*(void *)(a1 + 32), v44);
      uint64_t v47 = AMSLogKey(v45, v46);
      __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      *(_DWORD *)uint64_t v79 = 138543618;
      *(void *)&v79[4] = v45;
      *(_WORD *)&v79[12] = 2114;
      *(void *)&v79[14] = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] We should perform bundle push registration.",  v79,  0x16u);
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _bagForAccount:*(void *)(a1 + 40)]);
    uint64_t v26 = -[AMSDBundlePushRegisterTask initWithAccount:token:environment:bag:]( objc_alloc(&OBJC_CLASS___AMSDBundlePushRegisterTask),  "initWithAccount:token:environment:bag:",  *(void *)(a1 + 40),  v12,  *(void *)(a1 + 48),  v23);
    __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v49) {
      __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue([v49 OSLogObject]);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_INFO)) {
      goto LABEL_48;
    }
LABEL_47:
    uint64_t v60 = objc_opt_class(*(void *)(a1 + 32), v51);
    uint64_t v62 = AMSLogKey(v60, v61);
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    uint64_t v64 = AMSHashIfNeeded(v26);
    __int16 v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
    *(_DWORD *)uint64_t v79 = 138543874;
    *(void *)&v79[4] = v60;
    *(_WORD *)&v79[12] = 2114;
    *(void *)&v79[14] = v63;
    *(_WORD *)&v79[22] = 2114;
    __int16 v80 = v65;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Created task: %{public}@",  v79,  0x20u);

LABEL_48:
    id v66 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDPushRegisterTask perform](v26, "perform"));
    uint64_t v67 = objc_claimAutoreleasedReturnValue([v66 promiseAdapter]);
    uint64_t v68 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v69 = *(void **)(v68 + 40);
    *(void *)(v68 + 40) = v67;

    goto LABEL_17;
  }

  if (!v42) {
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v76 = objc_opt_class(*(void *)(a1 + 32), v75);
    uint64_t v78 = AMSLogKey(v76, v77);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v78);
    *(_DWORD *)uint64_t v79 = 138543618;
    *(void *)&v79[4] = v76;
    *(_WORD *)&v79[12] = 2114;
    *(void *)&v79[14] = v19;
    uint64_t v74 = "%{public}@: [%{public}@] We should not perform bundle push registration. Returning success.";
LABEL_57:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v74, v79, 0x16u);
LABEL_14:
  }

LABEL_15:
LABEL_16:
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[AMSBinaryPromise promiseWithSuccess]( &OBJC_CLASS___AMSBinaryPromise,  "promiseWithSuccess",  *(_OWORD *)v79,  *(void *)&v79[16]));
  uint64_t v24 = objc_claimAutoreleasedReturnValue([v23 promiseAdapter]);
  uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v26 = *(AMSDPushRegisterTask **)(v25 + 40);
  *(void *)(v25 + 40) = v24;
LABEL_17:
}

  if (v9)
  {
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDServiceConnection retainer](self, "retainer"));
    [v28 addObject:v9];
  }

  ((void (**)(id, id, void *))v10)[2](v10, v8, 0LL);
LABEL_18:
}

uint64_t sub_10003AF08(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

AMSDRefreshMultiUserDatabaseResult *sub_10003B0B8(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v4) {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = objc_opt_class(*(void *)(a1 + 32), v6);
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    uint64_t v12 = AMSHashIfNeeded(v11);
    int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v45 = v7;
    __int16 v46 = 2114;
    uint64_t v47 = v10;
    __int16 v48 = 2114;
    __int16 v49 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Checking a database for Multi-User changes. database = %{public}@",  buf,  0x20u);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 fetchChangedRecordZones]);
  id v43 = 0LL;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 resultWithError:&v43]);
  id v17 = v43;

  if (v16)
  {
    uint64_t v18 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v19 = *(void **)(a1 + 32);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 changedRecordZones]);
    [v19 _handleChangedRecordZones:v20 withErrors:v18];

    unsigned int v21 = *(void **)(a1 + 32);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v16 deletedRecordZones]);
    [v21 _handleDeletedRecordZones:v22 withErrors:v18];

    if (!-[NSMutableArray count](v18, "count"))
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v16 changeToken]);
      [v23 persistChangedRecordZonesChangeToken:v24];
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v25) {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue([v25 OSLogObject]);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = objc_opt_class(*(void *)(a1 + 32), v27);
      uint64_t v30 = AMSLogKey(v28, v29);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v45 = v28;
      __int16 v46 = 2114;
      uint64_t v47 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Finished checking the database for changes.",  buf,  0x16u);
    }

    uint64_t v32 = -[AMSDRefreshMultiUserDatabaseResult initWithErrors:]( objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserDatabaseResult),  "initWithErrors:",  v18);
  }

  else
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v33) {
      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v33 OSLogObject]);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = objc_opt_class(*(void *)(a1 + 32), v35);
      uint64_t v38 = AMSLogKey(v36, v37);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      uint64_t v40 = AMSHashIfNeeded(v17);
      unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v45 = v36;
      __int16 v46 = 2114;
      uint64_t v47 = v39;
      __int16 v48 = 2114;
      __int16 v49 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to fetch the changed record zones. error = %{public}@",  buf,  0x20u);
    }

    uint64_t v32 = 0LL;
    if (a2) {
      *a2 = v17;
    }
  }

  return v32;
}

void sub_10003BC84(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 database]);
  +[AMSDCloudDataManager handleRecordZoneFetchFailed:inDatabase:withError:]( &OBJC_CLASS___AMSDCloudDataManager,  "handleRecordZoneFetchFailed:inDatabase:withError:",  v4,  v5,  *(void *)(a1 + 40));
}

void sub_10003BCF0(id *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (([a1[4] isCancelled] & 1) != 0 || sub_10000AFA8(a1[5], v9))
  {
    *a4 = 1;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000LL;
    char v17 = 1;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10003BE0C;
    v11[3] = &unk_1000D7A88;
    id v10 = a1[5];
    void v11[4] = a1[4];
    int v13 = &v14;
    id v12 = v10;
    [v8 enumerateObjectsUsingBlock:v11];
    if (*((_BYTE *)v15 + 24)) {
      [a1[6] addObject:v7];
    }

    _Block_object_dispose(&v14, 8);
  }
}

void sub_10003BDF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003BE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 type]);
  unsigned int v5 = [v4 isEqualToString:@"AMSHomeParticipant"];

  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v6) {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
      uint64_t v11 = AMSLogKey(v9, v10);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v13 = AMSHashIfNeeded(v3);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v28 = v9;
      __int16 v29 = 2114;
      uint64_t v30 = v12;
      __int16 v31 = 2114;
      uint64_t v32 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] A record changed. record = %{public}@",  buf,  0x20u);
    }

    uint64_t v15 = *(void **)(a1 + 32);
    id v26 = 0LL;
    unsigned __int8 v16 = [v15 _handleAccountChangeInChangedRecord:v3 withError:&v26];
    id v17 = v26;
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (*(_BYTE *)(v18 + 24)) {
      unsigned __int8 v19 = v16;
    }
    else {
      unsigned __int8 v19 = 0;
    }
    *(_BYTE *)(v18 + 24) = v19;
    objc_msgSend(*(id *)(a1 + 40), "ams_addNullableObject:", v17);

    uint64_t v20 = *(void **)(a1 + 32);
    id v25 = 0LL;
    unsigned __int8 v21 = [v20 _reconcileiTunesAccountForChangedRecord:v3 withError:&v25];
    id v22 = v25;
    uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (*(_BYTE *)(v23 + 24)) {
      unsigned __int8 v24 = v21;
    }
    else {
      unsigned __int8 v24 = 0;
    }
    *(_BYTE *)(v23 + 24) = v24;
    objc_msgSend(*(id *)(a1 + 40), "ams_addNullableObject:", v22);
  }
}

void sub_10003C004(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) containsObject:v7])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
    [v6 persistChangedRecordsChangeToken:v5 forRecordZoneIdentifier:v7];
  }
}

void sub_10003C0F0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  if (([*(id *)(a1 + 32) isCancelled] & 1) != 0
    || sub_10000AFA8(*(void **)(a1 + 40), v7))
  {
    *a4 = 1;
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v8) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = objc_opt_class(*(void *)(a1 + 32), v10);
      uint64_t v13 = AMSLogKey(v11, v12);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      uint64_t v15 = AMSHashIfNeeded(v6);
      unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v27 = v11;
      __int16 v28 = 2114;
      __int16 v29 = v14;
      __int16 v30 = 2114;
      __int16 v31 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] A record zone was deleted. zoneIdentifier = %{public}@",  buf,  0x20u);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ams_iTunesAccounts"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10003C32C;
    v24[3] = &unk_1000D5A88;
    id v19 = v6;
    id v25 = v19;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ams_filterUsingTest:", v24));

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10003C38C;
    v21[3] = &unk_1000D7B00;
    void v21[4] = *(void *)(a1 + 32);
    id v22 = v19;
    id v23 = *(id *)(a1 + 40);
    [v20 enumerateObjectsUsingBlock:v21];
  }
}

id sub_10003C32C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "amsd_recordZoneNames"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  id v5 = [v3 containsObject:v4];

  return v5;
}

void sub_10003C38C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 database]);
  [v5 persistChangedRecordsChangeToken:0 forRecordZoneIdentifier:*(void *)(a1 + 40)];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
  objc_msgSend(v4, "amsd_removeRecordZoneName:", v6);

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "amsd_saveMultiUserManagedAccount:", v4));

  id v19 = 0LL;
  LOBYTE(v4) = [v8 resultWithError:&v19];
  id v9 = v19;

  if ((v4 & 1) == 0)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v10) {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 OSLogObject]);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = objc_opt_class(*(void *)(a1 + 32), v12);
      uint64_t v15 = AMSLogKey(v13, v14);
      unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      uint64_t v17 = AMSHashIfNeeded(v9);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      id v23 = v16;
      __int16 v24 = 2114;
      id v25 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to disassociate an account. error = %{public}@",  buf,  0x20u);
    }

    [*(id *)(a1 + 48) addObject:v9];
  }
}

BOOL sub_10003CAB4(id a1, AMSDCloudDataRecordZoneIdentifier *a2, NSError *a3)
{
  return -[NSError ams_hasDomain:code:]( a3,  "ams_hasDomain:code:",  @"AMSDCloudDataErrorDomain",  2LL);
}

void sub_10003CACC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 database]);
  [v4 persistChangedRecordsChangeToken:0 forRecordZoneIdentifier:v3];
}

id sub_10003CB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKeyedSubscript:a2];
}

id sub_10003CB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKeyedSubscript:a2];
}

id sub_10003CB34(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setObject:0 forKeyedSubscript:a2];
}

id sub_10003CB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKeyedSubscript:a2];
}

id sub_10003CB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKeyedSubscript:a2];
}

LABEL_46:
LABEL_49:
        goto LABEL_50;
      }
    }

    id v26 = 1;
    goto LABEL_49;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v18) {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18 OSLogObject]);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = objc_opt_class(self, v20);
    id v23 = AMSLogKey(v21, v22);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v71 = v21;
    uint64_t v72 = 2114;
    uint64_t v73 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Reconcile account record failed. Multi-User status unknown.",  buf,  0x16u);
  }

  if (a4)
  {
    id v25 = AMSError( 0LL,  @"Unknown Home Error",  @"Reconcile account record failed. Multi-User status unknown.",  0LL);
    id v26 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v25);
  }

  else
  {
    id v26 = 0;
  }

LABEL_50:
  return v26;
}

                __break(1u);
              }

              uint64_t v14 = v9 + 5;
            }
          }
        }
      }

void sub_10003D6EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

AMSDRefreshMultiUserResult *sub_10003DA24(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v7 = AMSLogKey(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homes]);
    uint64_t v10 = AMSHashIfNeeded(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) options]);
    uint64_t v13 = AMSHashIfNeeded(v12);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v39 = 138544130;
    uint64_t v40 = v5;
    __int16 v41 = 2114;
    uint64_t v42 = v8;
    __int16 v43 = 2114;
    uint64_t v44 = v11;
    __int16 v45 = 2114;
    __int16 v46 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Starting a Multi-User refresh. homes = %{public}@ | options = %{public}@",  (uint8_t *)&v39,  0x2Au);
  }

  uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);

  if (!v16)
  {
    uint64_t v17 = objc_alloc_init(&OBJC_CLASS___AMSDMultiUserMetrics);
    [*(id *)(a1 + 32) setMetrics:v17];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) options]);
  id v20 = [v18 enqueueMultiUserRefreshBeginEventWithOptions:v19];

  [*(id *)(a1 + 32) _createMultiUserTokensWithErrors:v15];
  [*(id *)(a1 + 32) _reconcileiTunesAccountsWithErrors:v15];
  [*(id *)(a1 + 32) _reconcileRecordZonesWithErrors:v15];
  [*(id *)(a1 + 32) _refreshCloudDatabasesWithErrors:v15];
  [*(id *)(a1 + 32) _configurePreferredMediaUser:v15];
  [*(id *)(a1 + 32) _transferHomeSettingsToAccountsWithErrors:v15];
  if (-[NSMutableArray count](v15, "count"))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v21) {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([v21 OSLogObject]);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = objc_opt_class(*(void *)(a1 + 32), v23);
      uint64_t v26 = AMSLogKey(v24, v25);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = AMSLogableErrors(v15);
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      int v39 = 138543874;
      uint64_t v40 = v24;
      __int16 v41 = 2114;
      uint64_t v42 = v27;
      __int16 v43 = 2114;
      uint64_t v44 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] The refresh failed. errors = %{public}@",  (uint8_t *)&v39,  0x20u);

LABEL_16:
    }
  }

  else
  {
    [*(id *)(a1 + 32) _removeRenewCredentialsFollowUp];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v21) {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([v21 OSLogObject]);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = objc_opt_class(*(void *)(a1 + 32), v30);
      uint64_t v33 = AMSLogKey(v31, v32);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v33);
      int v39 = 138543618;
      uint64_t v40 = v31;
      __int16 v41 = 2114;
      uint64_t v42 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] The refresh succeeded.",  (uint8_t *)&v39,  0x16u);
      goto LABEL_16;
    }
  }

  id v34 = objc_alloc(&OBJC_CLASS___AMSDRefreshMultiUserResult);
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homes]);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) options]);
  uint64_t v37 = -[AMSDRefreshMultiUserResult initWithHomes:options:](v34, "initWithHomes:options:", v35, v36);

  -[AMSDRefreshMultiUserResult setErrors:](v37, "setErrors:", v15);
  return v37;
}

LABEL_80:
}

        __break(1u);
        goto LABEL_81;
      }
    }

LABEL_51:
    uint64_t v87 = v123;
LABEL_67:

    id v34 = v118;
    uint64_t v33 = v119;
LABEL_68:

    goto LABEL_69;
  }

  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v54) {
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue([v54 OSLogObject]);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    uint64_t v57 = objc_opt_class(self, v56);
    uint64_t v59 = AMSLogKey(v57, v58);
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v128 = v57;
    uint64_t v129 = 2114;
    uint64_t v130 = v60;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to generate a multi-user token for the home. There's no active iTunes account.",  buf,  0x16u);
  }

  if (a4)
  {
    uint64_t v61 = AMSError( 103LL,  @"No Active Account",  @"Unable to generate a multi-user token. There's no active account.",  0LL);
    unsigned __int8 v16 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v61);
    goto LABEL_69;
  }

void sub_10003F514(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void **)(a1 + 32);
  id v9 = 0LL;
  [v6 _createMultiUserTokenForHome:a2 error:&v9];
  id v7 = v9;
  objc_msgSend(*(id *)(v5 + 40), "ams_addNullableObject:", v7);
  LODWORD(v5) = sub_10000AFA8(*(void **)(v5 + 40), v8);

  if ((_DWORD)v5) {
    *a4 = 1;
  }
}

void sub_10003F6D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homes]);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472LL;
  v52[2] = sub_10003FB64;
  v52[3] = &unk_1000D6C78;
  id v5 = v3;
  id v53 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_firstObjectPassingTest:", v52));

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 users]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_mapWithTransform:", &stru_1000D7C60));
    id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_homeUserAllIdentifiers"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));

    if (([v9 intersectsSet:v11] & 1) == 0)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v12) {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12 OSLogObject]);
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        uint64_t v16 = AMSLogKey(v14, v15);
        uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
        uint64_t v19 = objc_opt_class(*(void *)(a1 + 32), v18);
        uint64_t v21 = v19;
        __int16 v49 = (void *)v17;
        uint64_t v47 = a1;
        if (v17)
        {
          uint64_t v22 = AMSLogKey(v19, v20);
          uint64_t v46 = objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v21,  v46));
        }

        else
        {
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v19));
        }

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
        uint64_t v37 = AMSHashIfNeeded(v36);
        uint64_t v38 = objc_claimAutoreleasedReturnValue(v37);
        int v39 = (void *)objc_claimAutoreleasedReturnValue([v11 description]);
        uint64_t v40 = AMSHash();
        uint64_t v41 = objc_claimAutoreleasedReturnValue(v40);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v55 = (uint64_t)v23;
        __int16 v56 = 2114;
        __int16 v48 = (void *)v38;
        uint64_t v57 = v38;
        uint64_t v42 = (void *)v41;
        __int16 v58 = 2114;
        uint64_t v59 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}@This home’s users does not contain any of this user’s identifiers. Removing the user. homeIdentifier s = %{public}@ | userIdentifiers = %{public}@",  buf,  0x20u);

        if (v49)
        {

          uint64_t v23 = (void *)v46;
        }

        a1 = v47;
      }

      objc_msgSend(v5, "amsd_removeAllRecordZoneNames");
      __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "amsd_saveMultiUserManagedAccount:", v5));
      id v50 = 0LL;
      [v44 resultWithError:&v50];
      id v45 = v50;

      objc_msgSend(*(id *)(a1 + 40), "ams_addNullableObject:", v45);
    }
  }

  else
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v24) {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue([v24 OSLogObject]);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = objc_opt_class(*(void *)(a1 + 32), v26);
      uint64_t v29 = AMSLogKey(v27, v28);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      uint64_t v31 = AMSHashIfNeeded(v5);
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v55 = v27;
      __int16 v56 = 2114;
      uint64_t v57 = (uint64_t)v30;
      __int16 v58 = 2114;
      uint64_t v59 = (uint64_t)v32;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Found an iTunes account that's associated with a non-existent home. account = %{public}@",  buf,  0x20u);
    }

    objc_msgSend(v5, "amsd_removeAllRecordZoneNames");
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    objc_msgSend(v33, "ams_setMultiUserToken:forAccount:error:", 0, v5, 0);

    id v34 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "amsd_saveMultiUserManagedAccount:", v5));
    id v51 = 0LL;
    [v35 resultWithError:&v51];
    id v9 = v51;

    objc_msgSend(*(id *)(a1 + 40), "ams_addNullableObject:", v9);
  }
}

id sub_10003FB64(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_homeIdentifier"));
  id v5 = [v3 isEqual:v4];

  return v5;
}

NSUUID *__cdecl sub_10003FBC4(id a1, AMSDHomeUser *a2)
{
  return (NSUUID *)-[AMSDHomeUser identifier](a2, "identifier");
}

void sub_10003FBCC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
  if (!v5) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    uint64_t v9 = AMSLogKey(v7, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v12 = objc_opt_class(*(void *)(a1 + 32), v11);
    uint64_t v14 = v12;
    if (v10)
    {
      uint64_t v15 = AMSLogKey(v12, v13);
      uint64_t v2 = objc_claimAutoreleasedReturnValue(v15);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v14,  v2));
    }

    else
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v12));
    }

    uint64_t v17 = AMSHashIfNeeded(v4);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v4 users]);
    uint64_t v20 = AMSHashIfNeeded(v19);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v32 = v16;
    __int16 v33 = 2114;
    id v34 = v18;
    __int16 v35 = 2114;
    uint64_t v36 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@Updating home user iTunes Accounts. home = %{public}@ | users = %{public}@",  buf,  0x20u);

    if (v10)
    {

      uint64_t v16 = (void *)v2;
    }
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 users]);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_10003FE1C;
  v26[3] = &unk_1000D7CB0;
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = *(void **)(a1 + 40);
  id v27 = v4;
  uint64_t v28 = v23;
  id v29 = v24;
  id v30 = *(id *)(a1 + 48);
  id v25 = v4;
  [v22 enumerateObjectsUsingBlock:v26];
}

void sub_10003FE1C(id *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  unint64_t v7 = +[AMSDHomeManager multiUserStatusForHomeUser:inHome:]( &OBJC_CLASS___AMSDHomeManager,  "multiUserStatusForHomeUser:inHome:",  v6,  a1[4]);
  if (v7)
  {
    unint64_t v8 = v7;
    uint64_t v143 = a4;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_iTunesAccountWithHomeUserIdentifier:", v10));

    if (v8 == 2)
    {
      if (v11)
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ams_homeUserHiddenIdentifiers"));
        BOOL v13 = [v12 count] != 0;
      }

      else
      {
        BOOL v13 = 1;
      }
    }

    else
    {
      BOOL v13 = 0;
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([a1[5] controller]);
    unsigned int v29 = [v28 isDeviceOdeonConfigured];

    if (v11) {
      int v30 = 1;
    }
    else {
      int v30 = v13;
    }
    if (v30) {
      unsigned int v31 = v13;
    }
    else {
      unsigned int v31 = v29;
    }
    v148 = v11;
    if (v8 == 1)
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ams_homeUserIdentifiers"));
      BOOL v149 = [v32 count] != 0;
    }

    else
    {
      BOOL v149 = 0;
    }

    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v33) {
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v33 OSLogObject]);
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (v35)
    {
      unsigned int v146 = v31;
      id v37 = v6;
      uint64_t v38 = AMSLogKey(v35, v36);
      int v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      uint64_t v41 = objc_opt_class(a1[5], v40);
      uint64_t v43 = v41;
      if (v39)
      {
        uint64_t v44 = AMSLogKey(v41, v42);
        uint64_t v140 = objc_claimAutoreleasedReturnValue(v44);
        id v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v43,  v140));
      }

      else
      {
        id v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v41));
      }

      uint64_t v46 = AMSHashIfNeeded(v37);
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
      uint64_t v48 = AMSHashIfNeeded(v148);
      uint64_t v49 = objc_claimAutoreleasedReturnValue(v48);
      id v50 = (void *)v49;
      id v51 = @"false";
      *(_DWORD *)__int128 buf = 138544898;
      uint64_t v158 = (uint64_t)v45;
      __int16 v159 = 2114;
      if (v29) {
        BOOL v52 = @"true";
      }
      else {
        BOOL v52 = @"false";
      }
      uint64_t v160 = v47;
      if (v146) {
        id v53 = @"true";
      }
      else {
        id v53 = @"false";
      }
      __int16 v161 = 2114;
      if (v149) {
        id v51 = @"true";
      }
      uint64_t v162 = v49;
      __int16 v163 = 2048;
      unint64_t v164 = v8;
      __int16 v165 = 2114;
      id v166 = v52;
      __int16 v167 = 2114;
      v168 = v53;
      __int16 v169 = 2114;
      v170 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}@Processing home user's iTunes account. user = %{public}@ | account = %{public}@ | AMSDMultiUserStatus = %lu | externalAudioOutput = %{public}@ | becameEnabled = %{public}@ | becameDisabled = %{public}@",  buf,  0x48u);
      if (v39)
      {

        id v45 = (void *)v140;
      }

      id v6 = v37;
      unsigned int v31 = v146;
    }

    if ((v31 | v149) == 1)
    {
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([a1[5] options]);
      unsigned __int8 v55 = [v54 shouldUseCloudData];

      if ((v55 & 1) == 0)
      {
        __int16 v56 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v56) {
          __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue([v56 OSLogObject]);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          uint64_t v59 = objc_opt_class(a1[5], v58);
          uint64_t v61 = AMSLogKey(v59, v60);
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v158 = v59;
          __int16 v159 = 2114;
          uint64_t v160 = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Ignoring the value of 'shouldUseCloudData'.",  buf,  0x16u);
        }
      }

      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([a1[4] currentUser]);
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 identifier]);
      __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      unsigned __int8 v66 = [v64 isEqual:v65];
      uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([a1[5] controller]);
      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v67 cloudContainer]);
      uint64_t v69 = v68;
      if ((v66 & 1) != 0) {
        uint64_t v70 = objc_claimAutoreleasedReturnValue([v68 privateDatabase]);
      }
      else {
        uint64_t v70 = objc_claimAutoreleasedReturnValue([v68 sharedDatabase]);
      }
      v147 = (__CFString *)v70;

      uint64_t v71 = objc_alloc(&OBJC_CLASS___AMSDFetchMultiUserRecordZoneTask);
      id v72 = a1[4];
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([a1[5] metrics]);
      uint64_t v74 = -[AMSDFetchMultiUserRecordZoneTask initWithHome:homeUser:database:metrics:]( v71,  "initWithHome:homeUser:database:metrics:",  v72,  v6,  v147,  v73);

      -[AMSDFetchMultiUserRecordZoneTask setRunMode:](v74, "setRunMode:", 1LL);
      -[AMSDFetchMultiUserRecordZoneTask setCreateIfMissing:](v74, "setCreateIfMissing:", 0LL);
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDFetchMultiUserRecordZoneTask performTask](v74, "performTask"));
      id v156 = 0LL;
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v75 resultWithError:&v156]);
      id v77 = v156;
      objc_msgSend(a1[6], "ams_addNullableObject:", v77);
      if (sub_10000AFA8(a1[6], v78))
      {
        uint64_t v79 = v74;
        id v80 = v77;
        __int16 v81 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v81) {
          __int16 v81 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue([v81 OSLogObject]);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          v84 = v76;
          uint64_t v85 = objc_opt_class(a1[5], v83);
          uint64_t v87 = AMSLogKey(v85, v86);
          id v150 = v6;
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
          uint64_t v89 = AMSLogableErrors(a1[6]);
          v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v158 = v85;
          uint64_t v76 = v84;
          __int16 v159 = 2114;
          uint64_t v160 = v88;
          __int16 v161 = 2114;
          uint64_t v162 = (uint64_t)v90;
          _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to reconcile iTunes accounts. %{public}@",  buf,  0x20u);

          id v6 = v150;
        }

        *uint64_t v143 = 1;
        id v77 = v80;
        uint64_t v74 = v79;
      }

      else if (v76)
      {
        if (v31)
        {
          v91 = v74;
          uint64_t v92 = v77;
          uint64_t v144 = v76;
          uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v76 identifier]);
          unsigned __int8 v94 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString fetchRecordWithName:zoneIdentifier:]( v147,  "fetchRecordWithName:zoneIdentifier:",  @"AMSHomeParticipant",  v93));
          id v155 = v92;
          uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v94 resultWithError:&v155]);
          id v141 = v155;

          id v96 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
          if (!v96) {
            id v96 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
          }
          v97 = (os_log_s *)objc_claimAutoreleasedReturnValue([v96 OSLogObject]);
          uint64_t v74 = v91;
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v99 = objc_opt_class(a1[5], v98);
            uint64_t v101 = AMSLogKey(v99, v100);
            uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
            uint64_t v103 = AMSHashIfNeeded(v6);
            id v151 = v6;
            v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
            uint64_t v105 = AMSHashIfNeeded(v95);
            v106 = (void *)objc_claimAutoreleasedReturnValue(v105);
            *(_DWORD *)__int128 buf = 138544130;
            uint64_t v158 = v99;
            __int16 v159 = 2114;
            uint64_t v160 = v102;
            __int16 v161 = 2114;
            uint64_t v162 = (uint64_t)v104;
            __int16 v163 = 2114;
            unint64_t v164 = (unint64_t)v106;
            _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] A user enabled Multi-User. user = %{public}@ | record = %{public}@",  buf,  0x2Au);

            id v6 = v151;
          }

          if (v95)
          {
            uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([a1[5] controller]);
            id v108 = (void *)objc_claimAutoreleasedReturnValue([v107 performAuthenticationForHomeParticipantRecord:v95]);
            [v108 waitUntilFinished];
          }

          id v77 = v141;
          uint64_t v76 = v144;
        }

        else if (v149)
        {
          id v153 = v6;
          uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
          if (!v122) {
            uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
          }
          id v145 = v77;
          id v123 = (os_log_s *)objc_claimAutoreleasedReturnValue([v122 OSLogObject]);
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v142 = objc_opt_class(a1[5], v124);
            uint64_t v126 = AMSLogKey(v142, v125);
            uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue(v126);
            uint64_t v128 = AMSHashIfNeeded(v153);
            uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue(v128);
            uint64_t v130 = AMSHashIfNeeded(v148);
            v131 = (void *)objc_claimAutoreleasedReturnValue(v130);
            uint64_t v132 = AMSHashIfNeeded(v76);
            v133 = v76;
            uint64_t v134 = (__CFString *)objc_claimAutoreleasedReturnValue(v132);
            *(_DWORD *)__int128 buf = 138544386;
            uint64_t v158 = v142;
            __int16 v159 = 2114;
            uint64_t v160 = v127;
            __int16 v161 = 2114;
            uint64_t v162 = (uint64_t)v129;
            __int16 v163 = 2114;
            unint64_t v164 = (unint64_t)v131;
            __int16 v165 = 2114;
            id v166 = v134;
            _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] A user disabled Multi-User. user = %{public}@ | account = %{public}@ | recordZone = %{public}@",  buf,  0x34u);

            uint64_t v76 = v133;
          }

          v135 = (void *)objc_claimAutoreleasedReturnValue([v76 identifier]);
          id v136 = v76;
          v137 = (void *)objc_claimAutoreleasedReturnValue([v135 name]);
          objc_msgSend(v148, "amsd_markRecordZoneNameHidden:", v137);

          uint64_t v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "amsd_saveMultiUserManagedAccount:", v148));
          id v154 = 0LL;
          [v138 resultWithError:&v154];
          id v139 = v154;

          objc_msgSend(a1[6], "ams_addNullableObject:", v139);
          uint64_t v76 = v136;
          id v6 = v153;
          id v77 = v145;
        }
      }

      else
      {
        id v152 = v6;
        v109 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v109) {
          v109 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue([v109 OSLogObject]);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
        {
          uint64_t v112 = v74;
          id v113 = v77;
          uint64_t v114 = objc_opt_class(a1[5], v111);
          uint64_t v116 = AMSLogKey(v114, v115);
          v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
          uint64_t v118 = AMSHashIfNeeded(a1[4]);
          v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
          uint64_t v120 = AMSHashIfNeeded(v152);
          uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
          *(_DWORD *)__int128 buf = 138544386;
          uint64_t v158 = v114;
          id v77 = v113;
          uint64_t v74 = v112;
          __int16 v159 = 2114;
          uint64_t v160 = v117;
          __int16 v161 = 2114;
          uint64_t v162 = (uint64_t)v119;
          __int16 v163 = 2114;
          unint64_t v164 = (unint64_t)v121;
          __int16 v165 = 2114;
          id v166 = v147;
          _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to locate record zone for home = %{public}@\n User = %{public}@\n In Database: %{public}@",  buf,  0x34u);

          uint64_t v76 = 0LL;
        }

        id v6 = v152;
      }
    }

    id v27 = v148;
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v14) {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 OSLogObject]);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = objc_opt_class(a1[5], v16);
      uint64_t v19 = AMSLogKey(v17, v18);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      uint64_t v21 = AMSHashIfNeeded(a1[4]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      uint64_t v23 = AMSHashIfNeeded(v6);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v158 = v17;
      __int16 v159 = 2114;
      uint64_t v160 = v20;
      __int16 v161 = 2114;
      uint64_t v162 = (uint64_t)v22;
      __int16 v163 = 2114;
      unint64_t v164 = (unint64_t)v24;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Unable to determine if Multi-User is on or off. home = %{public}@ | user = %{public}@",  buf,  0x2Au);
    }

    id v25 = a1[6];
    uint64_t v26 = AMSError(0LL, @"Unknown Home Error", @"Unable to determine if Multi-User is on or off.", 0LL);
    id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    [v25 addObject:v27];
  }
}

void sub_100040C18(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6 = a3;
  if (([v6 isDefaultRecordZone] & 1) == 0)
  {
    v91 = a4;
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDHomeManager identifiersForRecordZone:inDatabase:]( &OBJC_CLASS___AMSDHomeManager,  "identifiersForRecordZone:inDatabase:",  v6,  *(void *)(a1 + 32)));
    id v99 = 0LL;
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 resultWithError:&v99]);
    id v9 = v99;

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v10) {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 OSLogObject]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = objc_opt_class(*(void *)(a1 + 40), v12);
        uint64_t v15 = AMSLogKey(v13, v14);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        uint64_t v17 = AMSHashIfNeeded(v6);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        uint64_t v19 = AMSLogableError(v9);
        uint64_t v20 = v8;
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v19);
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v102 = v13;
        __int16 v103 = 2114;
        v104 = v16;
        __int16 v105 = 2114;
        v106 = v18;
        __int16 v107 = 2114;
        id v108 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to fetch a home/user identifiers from a record zone. recordZone = %{public}@ | error = %{public}@",  buf,  0x2Au);

        unint64_t v8 = v20;
      }

      if (objc_msgSend(v9, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7))
      {
        if (!v8) {
          goto LABEL_30;
        }
        id v92 = v9;
        int v22 = 1;
LABEL_13:
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v8 first]);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 second]);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) homes]);
        v97[0] = _NSConcreteStackBlock;
        v97[1] = 3221225472LL;
        v97[2] = sub_100041430;
        v97[3] = &unk_1000D6C78;
        id v26 = v23;
        id v98 = v26;
        id v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_firstObjectPassingTest:", v97));

        if (v26 && v27)
        {
          uint64_t v89 = v8;
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 users]);
          v95[0] = _NSConcreteStackBlock;
          v95[1] = 3221225472LL;
          v95[2] = sub_100041470;
          v95[3] = &unk_1000D5ED8;
          id v29 = v24;
          id v96 = v29;
          unsigned __int8 v30 = objc_msgSend(v28, "ams_anyWithTest:", v95);

          if ((v30 & 1) == 0)
          {
            unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) options]);
            id v32 = [v31 reasonType];

            if (v32)
            {
              __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
              if (!v33) {
                __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
              }
              id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v33 OSLogObject]);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v85 = objc_opt_class(*(void *)(a1 + 40), v35);
                uint64_t v37 = AMSLogKey(v85, v36);
                uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(v37);
                uint64_t v38 = AMSHashIfNeeded(v26);
                int v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
                uint64_t v40 = AMSHashIfNeeded(v29);
                uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
                uint64_t v42 = AMSHashIfNeeded(v6);
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
                *(_DWORD *)__int128 buf = 138544386;
                uint64_t v102 = v85;
                __int16 v103 = 2114;
                v104 = v87;
                __int16 v105 = 2114;
                v106 = v39;
                __int16 v107 = 2114;
                id v108 = v41;
                __int16 v109 = 2114;
                uint64_t v110 = v43;
                _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Remove record zone, user not found in home. homeIdentifier = %{public}@ | use rIdentifier = %{public}@ | recordZone = %{public}@",  buf,  0x34u);
              }

              int v22 = 1;
            }
          }

          unint64_t v8 = v89;
          goto LABEL_29;
        }

        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v44) {
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue([v44 OSLogObject]);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          int v88 = v22;
          uint64_t v47 = v24;
          uint64_t v48 = v8;
          uint64_t v49 = objc_opt_class(*(void *)(a1 + 40), v46);
          uint64_t v51 = AMSLogKey(v49, v50);
          uint64_t v86 = a1;
          BOOL v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
          uint64_t v53 = AMSHashIfNeeded(v26);
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          uint64_t v55 = AMSHashIfNeeded(v6);
          v90 = v27;
          __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
          *(_DWORD *)__int128 buf = 138544130;
          uint64_t v102 = v49;
          unint64_t v8 = v48;
          uint64_t v24 = v47;
          int v22 = v88;
          __int16 v103 = 2114;
          v104 = v52;
          __int16 v105 = 2114;
          v106 = v54;
          __int16 v107 = 2114;
          id v108 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] A record zone is associated with a non-existent home. homeIdentifier = %{public}@ | recordZone = %{public}@",  buf,  0x2Au);

          id v27 = v90;
          a1 = v86;
        }

        if (!v26)
        {
LABEL_29:

          id v9 = v92;
          if (v22) {
            goto LABEL_30;
          }
LABEL_41:
          id v74 = v9;
LABEL_42:

          goto LABEL_43;
        }

        uint64_t v57 = -[AMSDLeaveMultiUserHomeTask initWithHomeIdentifier:]( objc_alloc(&OBJC_CLASS___AMSDLeaveMultiUserHomeTask),  "initWithHomeIdentifier:",  v26);
        -[AMSDLeaveMultiUserHomeTask setRunMode:](v57, "setRunMode:", 1LL);
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDLeaveMultiUserHomeTask performTask](v57, "performTask"));
        id v94 = 0LL;
        [v58 resultWithError:&v94];
        id v59 = v94;

        objc_msgSend(*(id *)(a1 + 48), "ams_addNullableObject:", v59);
        id v9 = v92;
LABEL_30:
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
        if (!v60) {
          uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue([v60 OSLogObject]);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v63 = objc_opt_class(*(void *)(a1 + 40), v62);
          uint64_t v65 = AMSLogKey(v63, v64);
          unsigned __int8 v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
          uint64_t v67 = AMSHashIfNeeded(v6);
          uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v102 = v63;
          __int16 v103 = 2114;
          v104 = v66;
          __int16 v105 = 2114;
          v106 = v68;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Removing the record zone. recordZone = %{public}@",  buf,  0x20u);
        }

        uint64_t v69 = *(void **)(a1 + 32);
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
        uint64_t v100 = v70;
        uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v100, 1LL));
        id v72 = (void *)objc_claimAutoreleasedReturnValue([v69 deleteRecordZonesWithRecordZoneIdentifiers:v71]);
        id v93 = v9;
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v72 resultWithError:&v93]);
        id v74 = v93;

        if (!v73)
        {
          uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
          if (!v75) {
            uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
          }
          uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue([v75 OSLogObject]);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v78 = objc_opt_class(*(void *)(a1 + 40), v77);
            uint64_t v80 = AMSLogKey(v78, v79);
            __int16 v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
            uint64_t v82 = AMSLogableError(v74);
            uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
            *(_DWORD *)__int128 buf = 138543874;
            uint64_t v102 = v78;
            __int16 v103 = 2114;
            v104 = v81;
            __int16 v105 = 2114;
            v106 = v83;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to remove the record zone. error = %{public}@",  buf,  0x20u);
          }

          objc_msgSend(*(id *)(a1 + 48), "ams_addNullableObject:", v74);
        }

        goto LABEL_42;
      }

      [*(id *)(a1 + 48) addObject:v9];
    }

    if (!v8) {
      goto LABEL_41;
    }
    id v92 = v9;
    int v22 = 0;
    goto LABEL_13;
  }

LABEL_43:
}

id sub_100041430(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id sub_100041470(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100041D00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isCurrentDeviceAccessory])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_fetchLocaliTunesAccount"));
    id v51 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 resultWithError:&v51]);
    id v7 = v51;

    if (v7)
    {
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v8) {
        unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 OSLogObject]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = objc_opt_class(*(void *)(a1 + 32), v10);
        uint64_t v13 = AMSLogKey(v11, v12);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        uint64_t v15 = AMSLogableError(v7);
        uint64_t v16 = (__CFString *)objc_claimAutoreleasedReturnValue(v15);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v53 = v11;
        __int16 v54 = 2114;
        uint64_t v55 = (uint64_t)v14;
        __int16 v56 = 2114;
        uint64_t v57 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to create/fetch the local account. error = %{public}@",  buf,  0x20u);
      }
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 owner]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 listeningHistoryUpdateEnabledForUser:v17]);

    if (v18)
    {
      uint64_t v19 = [v18 BOOLValue] ^ 1;
    }

    else
    {
      if (objc_msgSend(v6, "ams_isPrivateListeningEnabled"))
      {
LABEL_26:

        goto LABEL_27;
      }

      uint64_t v19 = 1LL;
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
    if (!v20) {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v20 OSLogObject]);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = (uint64_t)v18;
      uint64_t v23 = objc_opt_class(*(void *)(a1 + 32), v22);
      uint64_t v25 = AMSLogKey(v23, v24);
      uint64_t v26 = objc_claimAutoreleasedReturnValue(v25);
      id v27 = (void *)v26;
      uint64_t v28 = @"false";
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v53 = v23;
      if ((_DWORD)v19) {
        uint64_t v28 = @"true";
      }
      __int16 v54 = 2114;
      uint64_t v55 = v26;
      __int16 v56 = 2112;
      uint64_t v57 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] The value for device-wide isPrivateListeningEnabled changed. newValue = %@",  buf,  0x20u);
    }

    objc_msgSend(v6, "amsd_setPrivateListeningEnabled:", v19);
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "ams_saveAccount:verifyCredentials:", v6, 0));
    id v50 = 0LL;
    unsigned __int8 v31 = [v30 resultWithError:&v50];
    id v32 = v50;

    if ((v31 & 1) == 0)
    {
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v33) {
        __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "OSLogObject", v45));
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = objc_opt_class(*(void *)(a1 + 32), v35);
        uint64_t v37 = AMSLogKey(v45, v36);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        uint64_t v39 = AMSLogableError(v32);
        uint64_t v40 = (__CFString *)objc_claimAutoreleasedReturnValue(v39);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v53 = v45;
        __int16 v54 = 2114;
        uint64_t v55 = (uint64_t)v38;
        __int16 v56 = 2114;
        uint64_t v57 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to save the account. error = %{public}@",  buf,  0x20u);
      }

      objc_msgSend(*(id *)(a1 + 40), "ams_addNullableObject:", v32);
    }

    goto LABEL_26;
  }

void sub_10004218C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_iTunesAccountWithHomeUserIdentifier:", v5));

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) listeningHistoryUpdateEnabledForUser:v3]);
    unint64_t v8 = v7;
    if (v7) {
      uint64_t v9 = [v7 BOOLValue] ^ 1;
    }
    else {
      uint64_t v9 = 1LL;
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    int v11 = v9 ^ objc_msgSend(v6, "ams_isPrivateListeningEnabledForHomeUserIdentifier:", v10);

    if (v11 == 1)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v12) {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12 OSLogObject]);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = objc_opt_class(*(void *)(a1 + 40), v14);
        uint64_t v17 = AMSLogKey(v15, v16);
        __int16 v56 = v8;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        uint64_t v19 = AMSHashIfNeeded(v6);
        uint64_t v55 = a1;
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        uint64_t v21 = AMSHashIfNeeded(v3);
        uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v23 = (void *)v22;
        *(_DWORD *)__int128 buf = 138544386;
        uint64_t v24 = @"false";
        uint64_t v60 = v15;
        __int16 v61 = 2114;
        if ((_DWORD)v9) {
          uint64_t v24 = @"true";
        }
        uint64_t v62 = v18;
        __int16 v63 = 2114;
        uint64_t v64 = v20;
        __int16 v65 = 2114;
        uint64_t v66 = v22;
        __int16 v67 = 2112;
        uint64_t v68 = v24;

        a1 = v55;
        unint64_t v8 = v56;
      }

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
      objc_msgSend(v6, "ams_setPrivateListeningEnabled:forHomeUserIdentifier:", v9, v25);
    }

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) owner]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 identifier]);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    unsigned __int8 v29 = [v27 isEqual:v28];

    if (v29 & 1) != 0 || (objc_msgSend(v6, "ams_isSecondaryHomeUser"))
    {
      if (!v11)
      {
LABEL_29:

        goto LABEL_30;
      }
    }

    else
    {
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v30) {
        unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      unsigned __int8 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue([v30 OSLogObject]);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = objc_opt_class(*(void *)(a1 + 40), v32);
        uint64_t v35 = AMSLogKey(v33, v34);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        uint64_t v37 = AMSHashIfNeeded(v6);
        uint64_t v57 = v8;
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        uint64_t v39 = AMSHashIfNeeded(v3);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v60 = v33;
        __int16 v61 = 2114;
        uint64_t v62 = v36;
        __int16 v63 = 2114;
        uint64_t v64 = v38;
        __int16 v65 = 2114;
        uint64_t v66 = (uint64_t)v40;

        unint64_t v8 = v57;
      }

      objc_msgSend(v6, "ams_setIsSecondaryHomeUser:", 1);
    }

    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "ams_saveAccount:verifyCredentials:", v6, 0));
    id v58 = 0LL;
    unsigned __int8 v43 = [v42 resultWithError:&v58];
    id v44 = v58;

    if ((v43 & 1) == 0)
    {
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsMultiUserConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsMultiUserConfig"));
      if (!v45) {
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue([v45 OSLogObject]);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        uint64_t v48 = objc_opt_class(*(void *)(a1 + 40), v47);
        uint64_t v50 = AMSLogKey(v48, v49);
        id v51 = v8;
        BOOL v52 = (void *)objc_claimAutoreleasedReturnValue(v50);
        uint64_t v53 = AMSLogableError(v44);
        __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v60 = v48;
        __int16 v61 = 2114;
        uint64_t v62 = v52;
        __int16 v63 = 2114;
        uint64_t v64 = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to save the account. error = %{public}@",  buf,  0x20u);

        unint64_t v8 = v51;
      }

      [*(id *)(a1 + 48) addObject:v44];
    }

    goto LABEL_29;
  }

LABEL_30:
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_100042768(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.AppleMediaServices.AMSDSecurityService", v4);
  id v3 = (void *)qword_1000F2110;
  qword_1000F2110 = (uint64_t)v2;
}

void sub_1000428F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "ams_sanitizedForSecureCoding"));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100043358(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v2) {
    dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    id v6 = v5;
    uint64_t v8 = AMSLogKey(v6, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v41 = v5;
    __int16 v42 = 2114;
    unsigned __int8 v43 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Running biometric token update",  buf,  0x16u);
  }

  if ((objc_msgSend(*(id *)(a1 + 40), "ams_isSandboxAccount") & 1) == 0)
  {
    uint64_t v12 = -[AMSDBiometricsTokenUpdateTask initWithAccount:]( objc_alloc(&OBJC_CLASS___AMSDBiometricsTokenUpdateTask),  "initWithAccount:",  *(void *)(a1 + 40));
    -[AMSDBiometricsTokenUpdateTask setAdditionalDialogMetrics:]( v12,  "setAdditionalDialogMetrics:",  *(void *)(a1 + 48));
    -[AMSDBiometricsTokenUpdateTask setClientInfo:](v12, "setClientInfo:", *(void *)(a1 + 56));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    -[AMSDBiometricsTokenUpdateTask setDelegate:](v12, "setDelegate:", v21);

    -[AMSDBiometricsTokenUpdateTask setShouldGenerateKeysOnly:]( v12,  "setShouldGenerateKeysOnly:",  *(unsigned __int8 *)(a1 + 72));
    -[AMSDBiometricsTokenUpdateTask setShouldRequestConfirmation:]( v12,  "setShouldRequestConfirmation:",  *(unsigned __int8 *)(a1 + 73));
    -[AMSDBiometricsTokenUpdateTask setUserInitiated:](v12, "setUserInitiated:", *(unsigned __int8 *)(a1 + 74));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDBiometricsTokenUpdateTask performUpdate](v12, "performUpdate"));
    id v39 = 0LL;
    id v20 = [v22 resultWithError:&v39];
    id v11 = v39;

    uint64_t v23 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    uint64_t v13 = (void *)v23;
    if (v11)
    {
      if (!v23) {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      uint64_t v26 = (void *)objc_opt_class(*(void *)(a1 + 32), v25);
      id v27 = v26;
      uint64_t v29 = AMSLogKey(v27, v28);
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      uint64_t v31 = AMSLogableError(v11);
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v41 = v26;
      __int16 v42 = 2114;
      unsigned __int8 v43 = v30;
      __int16 v44 = 2114;
      uint64_t v45 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Biometrics token update failed with error: %{public}@",  buf,  0x20u);
    }

    else
    {
      if (!v23) {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 OSLogObject]);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      uint64_t v34 = (void *)objc_opt_class(*(void *)(a1 + 32), v33);
      id v27 = v34;
      uint64_t v36 = AMSLogKey(v27, v35);
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(v36);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v41 = v34;
      __int16 v42 = 2114;
      unsigned __int8 v43 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Biometrics token update completed successfully.",  buf,  0x16u);
    }

LABEL_21:
    goto LABEL_22;
  }

  uint64_t v10 = AMSError(2LL, @"Token Update Error", @"Cannot update token using a sandbox account", 0LL);
  id v11 = (id)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = (AMSDBiometricsTokenUpdateTask *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  if (!v12) {
    uint64_t v12 = (AMSDBiometricsTokenUpdateTask *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDBiometricsTokenUpdateTask OSLogObject](v12, "OSLogObject"));
  if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = (void *)objc_opt_class(*(void *)(a1 + 32), v14);
    id v16 = v15;
    uint64_t v18 = AMSLogKey(v16, v17);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v41 = v15;
    __int16 v42 = 2114;
    unsigned __int8 v43 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Skipping biometric token update for sandbox account",  buf,  0x16u);
  }

  id v20 = 0LL;
LABEL_22:

  uint64_t v37 = *(void *)(a1 + 64);
  if (v37)
  {
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, id, void *))(v37 + 16))(v37, v20, v38);
  }
}

void sub_1000440EC(uint64_t a1)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDBag defaultBag](&OBJC_CLASS___AMSDBag, "defaultBag"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100044194;
  v6[3] = &unk_1000D7DC0;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v2 _absintheHeadersForRequest:v3 bag:v4 buyParams:v5 completion:v6];
}

void sub_100044194(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "ams_sanitizedForSecureCoding"));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000442C8(uint64_t a1)
{
  id v2 = [[AMSBiometricsSignatureTask alloc] initWithRequest:*(void *)(a1 + 32)];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 performSignatureFromService]);
  id v8 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 resultWithTimeout:&v8 error:60.0]);
  id v5 = v8;

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v4, v7);
  }
}

void sub_100044548(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v7) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_opt_class(a1[4], v9);
      uint64_t v11 = a1[5];
      int v31 = 138543874;
      uint64_t v32 = v10;
      __int16 v33 = 2114;
      uint64_t v34 = v11;
      __int16 v35 = 2114;
      id v36 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Silent-enrollment payment session failed with error: %{public}@",  (uint8_t *)&v31,  0x20u);
    }

    id v12 = v6;
    id v13 = 0LL;
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 object]);
    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSDictionary, v15);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v16);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    uint64_t v19 = (void *)v18;
    if ((isKindOfClass & 1) != 0)
    {
      if (!v18) {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 OSLogObject]);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = objc_opt_class(a1[4], v21);
        uint64_t v23 = a1[5];
        int v31 = 138543618;
        uint64_t v32 = v22;
        __int16 v33 = 2114;
        uint64_t v34 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Silent-enrollment payment session completed successfully",  (uint8_t *)&v31,  0x16u);
      }

      id v13 = v14;
      id v12 = 0LL;
    }

    else
    {
      if (!v18) {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 OSLogObject]);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = objc_opt_class(a1[4], v25);
        uint64_t v27 = a1[5];
        int v31 = 138543618;
        uint64_t v32 = v26;
        __int16 v33 = 2114;
        uint64_t v34 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Silent-enrollment payment session failed to deserialize JSON response",  (uint8_t *)&v31,  0x16u);
      }

      uint64_t v28 = AMSError(301LL, @"Silent Enrollment Error", @"Failed to deserialize JSON response", 0LL);
      id v12 = (id)objc_claimAutoreleasedReturnValue(v28);
      id v13 = 0LL;
    }
  }

  uint64_t v29 = a1[6];
  if (v29)
  {
    unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ams_sanitizedForSecureCoding"));
    (*(void (**)(uint64_t, id, void *))(v29 + 16))(v29, v13, v30);
  }
}

uint64_t sub_100044984(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004545C(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v2 = (void *)qword_1000F2120;
  qword_1000F2120 = (uint64_t)v1;
}

void sub_1000454C4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.amsaccountsd.AMSDTransactionStore.transactions", v4);
  uint64_t v3 = (void *)qword_1000F2130;
  qword_1000F2130 = (uint64_t)v2;
}

void sub_100045570(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___NSCountedSet);
  dispatch_queue_t v2 = (void *)qword_1000F2140;
  qword_1000F2140 = (uint64_t)v1;
}

void sub_100045604(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v2) {
    dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = objc_opt_class(*(void *)(a1 + 32), v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactions]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v10 = v5;
    __int16 v11 = 2114;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%{public}@: Flush all keep alive transaction. remaining transactions = %{public}@",  buf,  0x16u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactions]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100045768;
  v8[3] = &unk_1000D7E90;
  void v8[4] = *(void *)(a1 + 32);
  [v7 enumerateKeysAndObjectsUsingBlock:v8];

  qword_1000EFCD8 = 0LL;
}

void sub_100045768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionsCount]);
  id v5 = [v4 countForObject:v3];

  if (!v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v6) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = objc_opt_class(*(void *)(a1 + 32), v8);
      uint64_t v11 = AMSLogKey(v9, v10);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      int v14 = 138543874;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      id v19 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Releasing a keep alive transaction. transactionID = %{public}@",  (uint8_t *)&v14,  0x20u);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactions]);
    [v13 setObject:0 forKeyedSubscript:v3];
  }
}

void sub_1000458FC(id a1)
{
  qword_1000EFCD8 = 0x4014000000000000LL;
}

void sub_100045A80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100045A94(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionsCount]);
  [v2 removeObject:*(void *)(a1 + 32)];
}

void sub_100045AD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transactionsCount]);
  id v5 = [v4 countForObject:*(void *)(a1 + 40)];

  if (!v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v6) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 OSLogObject]);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = objc_opt_class(WeakRetained, v8);
      uint64_t v11 = AMSLogKey(v9, v10);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v13 = *(void *)(a1 + 40);
      int v15 = 138543874;
      uint64_t v16 = v9;
      __int16 v17 = 2114;
      __int16 v18 = v12;
      __int16 v19 = 2114;
      uint64_t v20 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Releasing a keep alive transaction. transactionID = %{public}@",  (uint8_t *)&v15,  0x20u);
    }

    int v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transactions]);
    [v14 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

void sub_100045CE4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionsCount]);
  [v2 addObject:*(void *)(a1 + 32)];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionsCount]);
  id v4 = [v3 countForObject:*(void *)(a1 + 32)];

  if (v4 == (id)1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v5) {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = objc_opt_class(*(void *)(a1 + 40), v7);
      uint64_t v10 = AMSLogKey(v8, v9);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      uint64_t v12 = *(void *)(a1 + 32);
      int v15 = 138543874;
      uint64_t v16 = v8;
      __int16 v17 = 2114;
      __int16 v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%{public}@: [%{public}@] Taking a keep alive transaction. transactionID = %{public}@",  (uint8_t *)&v15,  0x20u);
    }

    uint64_t v13 = (void *)os_transaction_create([*(id *)(a1 + 32) UTF8String]);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactions]);
    [v14 setObject:v13 forKeyedSubscript:*(void *)(a1 + 32)];
  }

void sub_10004600C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  id v3 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  objc_autoreleasePoolPop(v3);
  [WeakRetained releaseKeepAliveTransaction:*(void *)(a1 + 40)];
}

void sub_1000461B8(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  id v3 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  objc_autoreleasePoolPop(v3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100046280;
  v7[3] = &unk_1000D7F28;
  id v4 = *(dispatch_queue_s **)(a1 + 40);
  id v8 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v10 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v4, v7);
}

id sub_100046280(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  id v3 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  objc_autoreleasePoolPop(v3);
  return [*(id *)(a1 + 56) releaseKeepAliveTransaction:*(void *)(a1 + 40)];
}

void sub_1000463B4(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  id v3 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_10004644C(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 OSLogObject]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    id v6 = v5;
    uint64_t v8 = AMSLogKey(v6, v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v70 = (uint64_t)v5;
    __int16 v71 = 2114;
    id v72 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Starting update device language task",  buf,  0x16u);
  }

  uint64_t v78 = AMSAccountMediaTypeProduction;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v78,  1LL));
  id v11 = [v10 countByEnumeratingWithState:&v65 objects:v77 count:16];
  if (!v11)
  {

    int v14 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
    goto LABEL_34;
  }

  id v12 = v11;
  uint64_t v13 = 0LL;
  uint64_t v61 = *(void *)v66;
  int v14 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
  id obj = v10;
  do
  {
    int v15 = 0LL;
    do
    {
      if (*(void *)v66 != v61) {
        objc_enumerationMutation(obj);
      }
      uint64_t v16 = *(void **)(*((void *)&v65 + 1) + 8LL * (void)v15);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedAccountsDaemonConfig]);
      if (!v17) {
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedConfig]);
      }
      __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 OSLogObject]);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = (void *)objc_opt_class(*(void *)(a1 + 32), v19);
        id v21 = v20;
        uint64_t v23 = AMSLogKey(v21, v22);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v70 = (uint64_t)v20;
        __int16 v71 = 2114;
        id v72 = v24;
        __int16 v73 = 2114;
        id v74 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Updating language code. mediaType = %{public}@",  buf,  0x20u);
      }

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStoreForMediaType:]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStoreForMediaType:",  v16));
      uint64_t v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_activeiTunesAccount"));
      if (v26)
      {
        uint64_t v27 = (void *)v26;
LABEL_18:
        unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _updateLanguageForAccount:v27 mediaType:v16]);
        id v63 = v13;
        [v30 resultWithError:&v63];
        id v31 = v63;

        uint64_t v13 = v31;
        int v14 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
        goto LABEL_19;
      }

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_fetchLocaliTunesAccount"));
      id v64 = v13;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v28 resultWithError:&v64]);
      id v29 = v64;

      if (v27)
      {
        uint64_t v13 = v29;
        goto LABEL_18;
      }

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedAccountsDaemonConfig]);
      if (!v27) {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedConfig]);
      }
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue([v27 OSLogObject]);
      if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = objc_opt_class(*(void *)(a1 + 32), v32);
        uint64_t v35 = AMSLogKey(v33, v34);
        id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        uint64_t v37 = AMSLogableError(v29);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v70 = v33;
        __int16 v71 = 2114;
        id v72 = v36;
        __int16 v73 = 2114;
        id v74 = v16;
        __int16 v75 = 2114;
        uint64_t v76 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to fetch either the active or local accounts. mediaType = %{public}@ | error = %{public}@",  buf,  0x2Au);

        int v14 = &_s10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlFTj_ptr;
      }

      uint64_t v13 = v29;
LABEL_19:

      int v15 = (char *)v15 + 1;
    }

    while (v12 != v15);
    id v10 = obj;
    id v39 = [obj countByEnumeratingWithState:&v65 objects:v77 count:16];
    id v12 = v39;
  }

  while (v39);

  if (v13)
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedAccountsDaemonConfig]);
    if (!v40) {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedConfig]);
    }
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue([v40 OSLogObject]);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v43 = (void *)objc_opt_class(*(void *)(a1 + 32), v42);
      id v44 = v43;
      uint64_t v46 = AMSLogKey(v44, v45);
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
      uint64_t v48 = AMSLogableError(v13);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v70 = (uint64_t)v43;
      __int16 v71 = 2114;
      id v72 = v47;
      __int16 v73 = 2114;
      id v74 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to send the network request in response to the device's language code changing. Error = %{public}@",  buf,  0x20u);

      id v10 = obj;
    }

    uint64_t v50 = 0LL;
    goto LABEL_39;
  }

LABEL_34:
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedAccountsDaemonConfig]);
  if (!v40) {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v14[507] sharedConfig]);
  }
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue([v40 OSLogObject]);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v52 = (void *)objc_opt_class(*(void *)(a1 + 32), v51);
    id v53 = v52;
    uint64_t v55 = AMSLogKey(v53, v54);
    id v56 = v10;
    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v55);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v70 = (uint64_t)v52;
    __int16 v71 = 2114;
    id v72 = v57;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully sent network request in response to the device's language code changing",  buf,  0x16u);

    id v10 = v56;
  }

  uint64_t v13 = 0LL;
  uint64_t v50 = 1LL;
LABEL_39:

  if (a2) {
    *a2 = v13;
  }

  return v50;
}

              sub_100057374(v30);
              return (unint64_t)v3;
            }
          }
        }
      }
    }

    uint64_t v13 = 0LL;
LABEL_35:
    uint64_t v4 = 1;
    goto LABEL_50;
  }

  __break(1u);
LABEL_65:
  __break(1u);
}

  __break(1u);
}

AMSPromise *__cdecl sub_100046C68(id a1, AMSURLRequest *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AMSURLSession defaultSession](&OBJC_CLASS___AMSURLSession, "defaultSession"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dataTaskPromiseWithRequest:v2]);

  return (AMSPromise *)v4;
}

void sub_100046CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3)
  {
    uint64_t v4 = AMSError(0LL, @"Failed to update device language", 0LL, a3);
    id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    [v3 finishWithError:v5];
  }

  else
  {
    [*(id *)(a1 + 32) finishWithSuccess];
  }

void sub_100046DF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100046E14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setPasscodeStringPromise:0];
}

void sub_100047084(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 info]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForSetting:1]);

  if ([v4 length])
  {
    [*(id *)(a1 + 32) finishWithResult:v4];
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 error]);
    uint64_t v6 = AMSError(7LL, @"Passcode not found", @"Passcode was not retrieved via the prompt", v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    [*(id *)(a1 + 32) finishWithError:v7];
  }
}

void sub_100047510(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityIdentifier]);
  id v5 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"com.apple.amsaccountsd.registerActivity.%@", v4));
  id v6 = [v5 UTF8String];

  uint64_t v7 = (void *)os_transaction_create(v6);
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  if (!v9) {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
  }
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 OSLogObject]);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = objc_opt_class(*(void *)(a1 + 40), v11);
    uint64_t v14 = AMSLogKey(v12, v13);
    int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityIdentifier]);
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v49 = v12;
    __int16 v50 = 2114;
    uint64_t v51 = v15;
    __int16 v52 = 2114;
    id v53 = v16;
    __int16 v54 = 2048;
    xpc_activity_state_t v55 = state;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Fetched state for %{public}@: %li",  buf,  0x2Au);
  }

  if (state == 2)
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v27) {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v27 OSLogObject]);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = objc_opt_class(*(void *)(a1 + 40), v29);
      uint64_t v32 = AMSLogKey(v30, v31);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityIdentifier]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v49 = v30;
      __int16 v50 = 2114;
      uint64_t v51 = v33;
      __int16 v52 = 2114;
      id v53 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Running activity %{public}@",  buf,  0x20u);
    }

    [*(id *)(a1 + 32) runActivityQueuedByScheduler:*(void *)(a1 + 40)];
  }

  else
  {
    if (state)
    {
      xpc_object_t v17 = (xpc_object_t)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v17) {
        xpc_object_t v17 = (xpc_object_t)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 OSLogObject]);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = objc_opt_class(*(void *)(a1 + 40), v35);
        uint64_t v38 = AMSLogKey(v36, v37);
        id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityIdentifier]);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v49 = v36;
        __int16 v50 = 2114;
        uint64_t v51 = v39;
        __int16 v52 = 2114;
        id v53 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Unknown state for %{public}@",  buf,  0x20u);
      }
    }

    else
    {
      xpc_object_t v17 = xpc_activity_copy_criteria(v3);
      uint64_t v18 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
      uint64_t v19 = (os_log_s *)v18;
      if (v17)
      {
        if (!v18) {
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s OSLogObject](v19, "OSLogObject"));
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = objc_opt_class(*(void *)(a1 + 40), v21);
          uint64_t v24 = AMSLogKey(v22, v23);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityIdentifier]);
          *(_DWORD *)__int128 buf = 138544130;
          uint64_t v49 = v22;
          __int16 v50 = 2114;
          uint64_t v51 = v25;
          __int16 v52 = 2114;
          id v53 = v26;
          __int16 v54 = 2114;
          xpc_activity_state_t v55 = (xpc_activity_state_t)v17;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] checkin found criteria for %{public}@: %{public}@",  buf,  0x2Au);
        }
      }

      else
      {
        if (!v18) {
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
        }
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s OSLogObject](v19, "OSLogObject"));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v43 = objc_opt_class(*(void *)(a1 + 40), v42);
          uint64_t v45 = AMSLogKey(v43, v44);
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityIdentifier]);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v49 = v43;
          __int16 v50 = 2114;
          uint64_t v51 = v46;
          __int16 v52 = 2114;
          id v53 = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Setting criteria for %{public}@",  buf,  0x20u);
        }

        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) criteria]);
        xpc_activity_set_criteria(v3, v19);
      }
    }
  }
}

BOOL sub_100047C64(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v14 = 16LL;
LABEL_21:
        uint64_t v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t String = PBReaderReadString(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
    uint64_t v14 = 8LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000481C4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _acceptShareWithShareMetadata:a2];
}

void sub_100048250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "finishWithError:");
  }

  else
  {
    else {
      uint64_t v3 = qword_1000A48C0[a2 - 1];
    }
    char v4 = *(void **)(a1 + 32);
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3));
    [v4 finishWithResult:v5];
  }

id sub_1000483F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v4, "finishWithResult:");
  }
  else {
    return [v4 finishWithError:a4];
  }
}

id sub_1000485DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v4, "finishWithResult:");
  }
  else {
    return [v4 finishWithError:a4];
  }
}

void sub_10004899C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  id v6 = a4;
  id v7 = [v11 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *__cdecl sub_100048A5C(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100048BD0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  id v6 = a4;
  id v7 = [v11 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 finishWithResult:v11];
  }

  else if (v6)
  {
    [v8 finishWithError:v6];
  }

  else
  {
    uint64_t v9 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v8 finishWithError:v10];
  }
}

AMSPromise *__cdecl sub_100048C80(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

id sub_100048D78(id a1, AMSDCloudDataRecordZoneIdentifier *a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CKRecordZoneID, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0) {
    id v5 = v2;
  }
  else {
    id v5 = 0LL;
  }

  return v5;
}

id sub_100048DD4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v6 = (void *)objc_opt_class(v3, v5);
  id v7 = [*(id *)(a1 + 32) scope];
  char v8 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 _fetchChangeTokenWithDatabaseScope:v7 recordZoneName:v8]);
  return v9;
}

id sub_100048F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "amsd_isCKChangeTokenExpiredError"))
  {
    [*(id *)(a1 + 32) persistChangedRecordZonesChangeToken:0];
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchChangedRecordZonesWithServerChangeToken:0]);
  }

  else
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));
  }

  uint64_t v5 = (void *)v4;

  return v5;
}

AMSPromise *__cdecl sub_100048F88(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100049364(uint64_t a1, void *a2, void *a3)
{
  id v19 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  if (v5)
  {
    [*(id *)(a1 + 40) finishWithResult:v5];
  }

  else
  {
    id v6 = v19;
    if (objc_msgSend(v6, "amsd_isCKPartialFailureError"))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      char v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDictionary, v9);
      if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0) {
        id v11 = v8;
      }
      else {
        id v11 = 0LL;
      }

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:*(void *)(a1 + 32)]);
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSError, v13);
      if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0) {
        id v15 = v12;
      }
      else {
        id v15 = 0LL;
      }

      id v6 = v15;
    }

    uint64_t v16 = *(void **)(a1 + 40);
    if (v6)
    {
      [v16 finishWithError:v6];
    }

    else
    {
      uint64_t v17 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      [v16 finishWithError:v18];
    }
  }
}

AMSPromise *__cdecl sub_1000494E4(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100049784(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = sub_10000AC08(a3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v6 && !objc_msgSend(v6, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 4))
  {
    [*(id *)(a1 + 32) finishWithError:v7];
  }

  else
  {
    char v8 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"AMSDCloudDataPartialFailureErrorsKey"]);

    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary, v10);
    if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0) {
      id v12 = v9;
    }
    else {
      id v12 = 0LL;
    }

    uint64_t v13 = objc_alloc(&OBJC_CLASS___AMSDCloudDataFetchResult);
    if (v16) {
      uint64_t v14 = v16;
    }
    else {
      uint64_t v14 = &__NSDictionary0__struct;
    }
    id v15 = -[AMSDCloudDataFetchResult initWithResults:failures:](v13, "initWithResults:failures:", v14, v12);
    [*(id *)(a1 + 32) finishWithResult:v15];
  }
}

void sub_1000498A0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 failures]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100049914;
  v4[3] = &unk_1000D7BB8;
  v4[4] = *(void *)(a1 + 32);
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
}

id sub_100049914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[AMSDCloudDataManager handleRecordZoneFetchFailed:inDatabase:withError:]( &OBJC_CLASS___AMSDCloudDataManager,  "handleRecordZoneFetchFailed:inDatabase:withError:",  a2,  *(void *)(a1 + 32),  a3);
}

void sub_10004A2E8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [v11 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *__cdecl sub_10004A3A8(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_10004A578(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [v11 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *__cdecl sub_10004A638(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_10004A99C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [v11 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSMutablePromise *sub_10004AA5C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  id v7 = (void *)v6;
  if (a2)
  {
    if (!v6) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class(a1[4], v9);
      uint64_t v12 = AMSLogKey(v10, v11);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v56 = v10;
      __int16 v57 = 2114;
      id v58 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully setup the database subscription.",  buf,  0x16u);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  a1[6] + 1LL));
    id v15 = (AMSMutablePromise *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v14));
  }

  else
  {
    if (!v6) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = objc_opt_class(a1[4], v17);
      uint64_t v20 = AMSLogKey(v18, v19);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v22 = AMSLogableError(v5);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v56 = v18;
      __int16 v57 = 2114;
      id v58 = v21;
      __int16 v59 = 2114;
      double v60 = *(double *)&v23;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to setup the database subscription. error = %{public}@",  buf,  0x20u);
    }

    unint64_t v24 = a1[6];
    if (v24 > 9)
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v42) {
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue([v42 OSLogObject]);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = objc_opt_class(a1[4], v44);
        uint64_t v47 = AMSLogKey(v45, v46);
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v56 = v45;
        __int16 v57 = 2114;
        id v58 = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Attempted to setup the database subscription too many times. Refusing to try again.",  buf,  0x16u);
      }

      id v15 = (AMSMutablePromise *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v5));
    }

    else
    {
      unint64_t v25 = v24 + 1;
      double v26 = exp2((double)(v24 + 1));
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v27) {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v27 OSLogObject]);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = objc_opt_class(a1[4], v29);
        uint64_t v32 = AMSLogKey(v30, v31);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v56 = v30;
        __int16 v57 = 2114;
        id v58 = v33;
        __int16 v59 = 2048;
        double v60 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Scheduling another attempt to setup the database subscription. timeInterval = %f",  buf,  0x20u);
      }

      uint64_t v34 = objc_alloc_init(&OBJC_CLASS___AMSMutablePromise);
      dispatch_time_t v35 = dispatch_time(0LL, (uint64_t)(v26 * 1000000000.0));
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      uint64_t v37 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_10004AEBC;
      v50[3] = &unk_1000D82E0;
      uint64_t v38 = v34;
      uint64_t v39 = a1[4];
      uint64_t v40 = (void *)a1[5];
      uint64_t v51 = v38;
      uint64_t v52 = v39;
      id v53 = v40;
      unint64_t v54 = v25;
      dispatch_after(v35, v37, v50);

      uint64_t v41 = v53;
      id v15 = v38;
    }
  }

  return v15;
}

void sub_10004AEBC(uint64_t a1)
{
  dispatch_queue_attr_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _subscribeWithIdentifier:*(void *)(a1 + 48) attempt:*(void *)(a1 + 56)]);
  [v1 finishWithPromise:v2];
}

id sub_10004B124(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_10004B130(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10004B13C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (a4)
  {
    [*(id *)(a1 + 32) finishWithError:a4];
  }

  else
  {
    uint64_t v6 = -[AMSDCloudDataChangedRecordZonesResult initWithChangedRecordZones:deletedRecordZones:changeToken:]( objc_alloc(&OBJC_CLASS___AMSDCloudDataChangedRecordZonesResult),  "initWithChangedRecordZones:deletedRecordZones:changeToken:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v7);
    [*(id *)(a1 + 32) finishWithResult:v6];
  }
}

void sub_10004B4FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

CKFetchRecordZoneChangesConfiguration *sub_10004B51C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___CKFetchRecordZoneChangesConfiguration);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);

  -[CKFetchRecordZoneChangesConfiguration setPreviousServerChangeToken:](v4, "setPreviousServerChangeToken:", v5);
  return v4;
}

void sub_10004B588(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    if (!v11) {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11 OSLogObject]);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      uint64_t v15 = AMSLogKey(v13, v14);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      uint64_t v18 = objc_opt_class(*(void *)(a1 + 32), v17);
      uint64_t v20 = v18;
      if (v16)
      {
        uint64_t v21 = AMSLogKey(v18, v19);
        uint64_t v4 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: [%@] ",  v20,  v4));
      }

      else
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@: ", v18));
      }

      uint64_t v23 = AMSLogableError(v10);
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v31 = v22;
      __int16 v32 = 2114;
      uint64_t v33 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%{public}@Error passed to recordWasChangedBlock: %{public}@",  buf,  0x16u);
      if (v16)
      {

        uint64_t v22 = (void *)v4;
      }
    }
  }

  if (v9)
  {
    unint64_t v25 = *(void **)(a1 + 40);
    double v26 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);
    uint64_t v27 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v26]);

    if (!v27)
    {
      uint64_t v27 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v28 = *(void **)(a1 + 40);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);
      [v28 setObject:v27 forKeyedSubscript:v29];
    }

    -[NSMutableArray addObject:](v27, "addObject:", v9);
  }
}

void sub_10004B7C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v9 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneID]);
  uint64_t v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (!v6)
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = *(void **)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
    [v7 setObject:v6 forKeyedSubscript:v8];
  }

  -[NSMutableArray addObject:](v6, "addObject:", v9);
}

void sub_10004B870(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v15 = a6;
  if (v15)
  {
    id v9 = *(void **)(a1 + 40);
    id v10 = a2;
    [v9 setObject:0 forKeyedSubscript:v10];
    [*(id *)(a1 + 48) setObject:0 forKeyedSubscript:v10];
    uint64_t v11 = *(void **)(a1 + 56);
    id v12 = v15;
    id v13 = v10;
  }

  else
  {
    uint64_t v14 = *(void **)(a1 + 32);
    id v13 = a2;
    uint64_t v11 = v14;
    id v12 = a3;
  }

  [v11 setObject:v12 forKeyedSubscript:v13];
}

void sub_10004B90C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  if ([*(id *)(a1 + 40) count]
    || [*(id *)(a1 + 48) count]
    || [*(id *)(a1 + 56) count]
    || (id v17 = [*(id *)(a1 + 64) count], !v3)
    || v17)
  {
    if (v3)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v5) {
        id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
        uint64_t v9 = objc_opt_class(WeakRetained, v8);
        uint64_t v11 = AMSLogKey(v9, v10);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        uint64_t v13 = AMSHashIfNeeded(v3);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        int v18 = 138543874;
        uint64_t v19 = v9;
        __int16 v20 = 2114;
        uint64_t v21 = v12;
        __int16 v22 = 2114;
        uint64_t v23 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Received both valid data and an error when fetching record zone changes. error = %{public}@",  (uint8_t *)&v18,  0x20u);
      }
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ams_mapWithTransform:", &stru_1000D8410));
    id v16 = -[AMSDCloudDataChangedRecordsResult initWithChangedRecords:deletedRecords:errors:changeTokens:]( objc_alloc(&OBJC_CLASS___AMSDCloudDataChangedRecordsResult),  "initWithChangedRecords:deletedRecords:errors:changeTokens:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v15,  *(void *)(a1 + 64));
    [*(id *)(a1 + 72) finishWithResult:v16];
  }

  else
  {
    [*(id *)(a1 + 72) finishWithError:v3];
  }
}

AMSPair *__cdecl sub_10004BAF4(id a1, CKRecordZoneID *a2, NSError *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_alloc(&OBJC_CLASS___AMSPair);
  id v7 = sub_10000AC08(v4);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  uint64_t v9 = -[AMSPair initWithFirst:second:](v6, "initWithFirst:second:", v5, v8);
  return v9;
}

AMSPromise *__cdecl sub_10004BB70(id a1, NSError *a2)
{
  id v2 = sub_10000AC08(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_10004C1F0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = AMSHashIfNeeded(v4);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) encryptedValues]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v4]);

  uint64_t v8 = AMSHashIfNeeded(v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  [v3 appendFormat:@"\n  %@ = %@,", v10, v9];
}

uint64_t start()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  if ((_set_user_dir_suffix("com.apple.amsaccountsd") & 1) == 0)
  {
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v1) {
      dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue([v1 OSLogObject]);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = NSTemporaryDirectory();
      id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      int v7 = 138543362;
      uint64_t v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "_set_user_dir_suffix() seems to have failed. NSTemporaryDirectory() = %{public}@",  (uint8_t *)&v7,  0xCu);
    }
  }

  uint64_t v5 = objc_opt_new(&OBJC_CLASS___AMSDDaemonRunLoop);
  -[AMSDDaemonRunLoop runUntilIdleExit](v5, "runUntilIdleExit");

  objc_autoreleasePoolPop(v0);
  return 0LL;
}

uint64_t sub_10004CBB8()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = sub_10005489C(&qword_1000F02A8);
  uint64_t v5 = __chkstk_darwin(v4);
  int v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v17[-v8 - 8];
  id v10 = (int *)type metadata accessor for AccountDataState(0LL);
  sub_100054950((uint64_t)v10, qword_1000F8CD0);
  uint64_t v11 = sub_1000548DC((uint64_t)v10, (uint64_t)qword_1000F8CD0);
  sub_100054990(v17);
  ((void (*)(void))static Date.distantPast.getter)();
  sub_100054998((uint64_t)v9, 0LL, 1LL, v0);
  uint64_t v12 = sub_100054998((uint64_t)v7, 1LL, 1LL, v0);
  static Date.distantPast.getter(v12);
  sub_100054998(v11 + v10[9], 1LL, 1LL, v0);
  sub_100054998(v11 + v10[11], 1LL, 1LL, v0);
  uint64_t v13 = v11 + v10[13];
  uint64_t v14 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  sub_100054998(v13, 1LL, 1LL, v14);
  sub_100054A6C((uint64_t)v17, v11, &qword_1000F02B0);
  sub_100054A6C((uint64_t)v9, v11 + v10[5], &qword_1000F02A8);
  sub_100054A6C((uint64_t)v7, v11 + v10[6], &qword_1000F02A8);
  uint64_t result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v1 + 32))(v11 + v10[7], v3, v0);
  *(_WORD *)(v11 + v10[8]) = 3;
  *(_WORD *)(v11 + v10[10]) = 3;
  *(void *)(v11 + v10[12]) = 0LL;
  return result;
}

uint64_t sub_10004CDB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v143 = v23;
  uint64_t v144 = v24;
  uint64_t v25 = v19;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v126 = v30;
  uint64_t v127 = v31;
  uint64_t v142 = v32;
  uint64_t v34 = v33;
  uint64_t v137 = a18;
  uint64_t v138 = v20;
  uint64_t v135 = a16;
  uint64_t v136 = a17;
  uint64_t v134 = a15;
  uint64_t v132 = v35;
  uint64_t v133 = a14;
  uint64_t v130 = v36;
  uint64_t v131 = a13;
  uint64_t v128 = a11;
  uint64_t v129 = a12;
  uint64_t v124 = a9;
  uint64_t v125 = a10;
  uint64_t v117 = type metadata accessor for FileStoreError(0LL);
  sub_1000552EC();
  __chkstk_darwin(v37);
  sub_100055360();
  uint64_t v116 = v38;
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v113 = *(void *)(v114 - 8);
  sub_100055428();
  __chkstk_darwin(v39);
  sub_100055360();
  uint64_t v112 = v40;
  uint64_t v121 = sub_100055CF0();
  uint64_t v120 = *(void *)(v121 - 8);
  sub_100055428();
  __chkstk_darwin(v41);
  sub_100055528();
  sub_100055634();
  __chkstk_darwin(v42);
  uint64_t v118 = (char *)&v110 - v43;
  uint64_t v115 = sub_1000559B0();
  sub_1000552EC();
  __chkstk_darwin(v44);
  uint64_t v45 = sub_100055CFC();
  uint64_t v46 = type metadata accessor for AccountIdentity(v45);
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  sub_100055840();
  ((void (*)(uint64_t))swift_defaultActor_initialize)(v25);
  uint64_t v48 = sub_100054838(v34, v34[3]);
  uint64_t v122 = v47;
  uint64_t v49 = *(void (**)(void))(v47 + 16);
  ((void (*)(uint64_t, void *, uint64_t))v49)(v21, v48, v46);
  uint64_t v111 = v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  uint64_t v139 = v46;
  v119 = v49;
  v49();
  id v123 = v34;
  uint64_t v110 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  sub_10005485C((uint64_t)v34, v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  __int16 v50 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics);
  sub_10005485C((uint64_t)v142, v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics);
  uint64_t v51 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_store);
  *uint64_t v51 = v29;
  v51[1] = v27;
  uint64_t v52 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_requester);
  uint64_t v53 = v127;
  void *v52 = v126;
  v52[1] = v53;
  unint64_t v54 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_scheduler);
  uint64_t v55 = v132;
  *unint64_t v54 = v130;
  v54[1] = v55;
  uint64_t v56 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_notifier);
  uint64_t v57 = v125;
  *uint64_t v56 = v124;
  v56[1] = v57;
  id v58 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountFinder);
  uint64_t v59 = v129;
  void *v58 = v128;
  v58[1] = v59;
  double v60 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_transactionStore);
  uint64_t v61 = v133;
  void *v60 = v131;
  v60[1] = v61;
  uint64_t v62 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_deviceInformation);
  uint64_t v63 = v135;
  *uint64_t v62 = v134;
  v62[1] = v63;
  id v64 = (void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_defaults);
  uint64_t v65 = v137;
  *id v64 = v136;
  v64[1] = v65;
  uint64_t v66 = OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag;
  *(void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag) = a19;
  __int128 v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 8);
  uint64_t v137 = a19;
  swift_unknownObjectRetain(a19);
  uint64_t v136 = v21;
  uint64_t v68 = v138;
  v67(v21, v29, v27);
  if (!v68)
  {
    uint64_t v138 = 0LL;
    sub_100054E20( v22,  v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state,  type metadata accessor for AccountDataState);
    sub_100055D88();
    sub_10005489C((uint64_t *)&unk_1000F0290);
    sub_100055858();
    sub_100056190();
    uint64_t v87 = sub_100055F7C(v86 & ~v85, v85);
    *(_OWORD *)(v87 + 16) = xmmword_1000A4930;
    uint64_t v141 = sub_100054418();
    v140[0] = v25;
    uint64_t v88 = sub_10005599C();
    id v90 = (id)AMSLogKey(v88, v89);
    if (v90)
    {
      v91 = v90;
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      uint64_t v94 = v93;
    }

    else
    {
      uint64_t v92 = 0LL;
      uint64_t v94 = 0LL;
    }

    static LogInterpolation.prefix(_:_:)(v140, v92, v94);
    sub_1000556B4();
    sub_100054930(v140);
    sub_100055D20(29LL, 0x80000001000ACD90LL);
    v106 = sub_100056204();
    sub_100055AF0((uint64_t)v106);
    sub_100055F50((uint64_t)v140);
    sub_100054CE0((uint64_t)v140, &qword_1000F1E60);
    sub_100055DF0(v87);
    sub_100055FBC();
    sub_100055778();
LABEL_16:
    sub_100054930(v142);
    uint64_t v107 = sub_100055ED4();
    v108(v107, v121);
    sub_100055FDC(v94, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
    goto LABEL_17;
  }

  v140[0] = v68;
  swift_errorRetain(v68);
  uint64_t v69 = sub_10005489C(&qword_1000F0288);
  uint64_t v70 = v116;
  uint64_t v71 = v117;
  if ((swift_dynamicCast(v116, v140, v69, v117, 0LL) & 1) == 0)
  {
LABEL_8:
    swift_errorRelease(v140[0]);
    if (qword_1000F00A0 != -1) {
      swift_once(&qword_1000F00A0, sub_10004CBB8);
    }
    uint64_t v95 = sub_1000548DC(v115, (uint64_t)qword_1000F8CD0);
    sub_100054F44( v95,  v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state,  type metadata accessor for AccountDataState);
    sub_100055D88();
    sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v96 = *(void *)(*(void *)(sub_100055858() - 8) + 72LL);
    sub_100055F88();
    uint64_t v98 = sub_100055F7C(a19 + 3 * v96, v97);
    *(_OWORD *)(v98 + 16) = xmmword_1000A4930;
    uint64_t v141 = sub_100054418();
    v140[0] = v25;
    uint64_t v99 = sub_10005599C();
    id v101 = (id)AMSLogKey(v99, v100);
    if (v101)
    {
      uint64_t v102 = v101;
      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
      uint64_t v104 = v103;
    }

    else
    {
      uint64_t v94 = 0LL;
      uint64_t v104 = 0LL;
    }

    static LogInterpolation.prefix(_:_:)(v140, v94, v104);
    sub_100055948();
    sub_100054930(v140);
    sub_100055620(0xD00000000000001FLL);
    __int16 v105 = sub_100056204();
    sub_100055AF0((uint64_t)v105);
    sub_100055F50((uint64_t)v140);
    sub_100054CE0((uint64_t)v140, &qword_1000F1E60);
    sub_100055DF0(v98);
    sub_100055778();
    swift_errorRelease(v68);
    sub_100055FBC();
    goto LABEL_16;
  }

  uint64_t v72 = sub_100055DC8();
  if (swift_getEnumCaseMultiPayload(v72, v73) != 2)
  {
    sub_100054F80(v70, type metadata accessor for FileStoreError);
    goto LABEL_8;
  }

  swift_errorRelease(v68);
  uint64_t v74 = v113;
  uint64_t v75 = v112;
  uint64_t v76 = v114;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v112, v70, v114);
  sub_100055290(&qword_1000F02A0, type metadata accessor for FileStoreError, (uint64_t)&unk_1000A7B64);
  swift_allocError(v71, v77, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v78, v75, v76);
  uint64_t v79 = sub_100055DC8();
  uint64_t v81 = swift_storeEnumTagMultiPayload(v79, v80, 2LL);
  swift_willThrow(v81);
  sub_100055FDC(v75, *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8));
  uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
  uint64_t v83 = v139;
  v82(v136, v139);
  swift_errorRelease(v140[0]);
  v82(v111, v83);
  sub_100054930(v110);
  sub_100054930(v50);
  swift_unknownObjectRelease(*(void *)(v25 + v66));
  uint64_t v84 = sub_100054418();
  swift_defaultActor_destroy(v25);
  sub_100055FBC();
  sub_100054930(v142);
  ((void (*)(uint64_t, uint64_t, void, void))swift_deallocPartialClassInstance)( v25,  v84,  *(unsigned int *)(*(void *)v25 + 48LL),  *(unsigned __int16 *)(*(void *)v25 + 52LL));
LABEL_17:
  sub_100054930(v123);
  return v25;
}

void sub_10004D534( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v139 = v25;
  a10 = v26;
  uint64_t v28 = v27;
  uint64_t v29 = sub_1000559FC();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v131 = v29;
  uint64_t v132 = v30;
  __chkstk_darwin(v29);
  uint64_t v127 = v31;
  uint64_t v129 = (uint64_t)v118 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005489C(&qword_1000F0300);
  sub_1000552EC();
  __chkstk_darwin(v32);
  sub_100055360();
  uint64_t v128 = v33;
  sub_10005489C(&qword_1000F02F0);
  sub_1000552EC();
  __chkstk_darwin(v34);
  sub_100055360();
  uint64_t v124 = v35;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v36);
  sub_100055528();
  sub_100055634();
  __chkstk_darwin(v37);
  sub_100055EC4((uint64_t)v118 - v38);
  sub_1000552EC();
  __chkstk_darwin(v39);
  sub_100055528();
  sub_100055634();
  __chkstk_darwin(v40);
  sub_10005616C();
  uint64_t v122 = v41;
  uint64_t v119 = sub_100055CF0();
  uint64_t v125 = *(void *)(v119 - 8);
  sub_100055428();
  __chkstk_darwin(v42);
  sub_100055360();
  uint64_t v133 = v43;
  uint64_t v44 = (int *)sub_1000559B0();
  sub_1000552EC();
  __chkstk_darwin(v45);
  uint64_t v46 = sub_100055CFC();
  uint64_t v47 = (int *)type metadata accessor for CachedServerDataSyncTaskScheduleInput(v46);
  sub_1000552EC();
  __chkstk_darwin(v48);
  sub_100055840();
  uint64_t v140 = v20;
  uint64_t v49 = v20 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  sub_100055BEC(v49, (uint64_t)&v144);
  uint64_t v141 = v49;
  sub_100054F44(v49, (uint64_t)v22, type metadata accessor for AccountDataState);
  uint64_t v51 = *v28;
  uint64_t v50 = v28[1];
  uint64_t v52 = v28[2];
  uint64_t v138 = v28[3];
  uint64_t v53 = v28[4];
  uint64_t v134 = v50;
  uint64_t v135 = v53;
  uint64_t v130 = v28;
  uint64_t v54 = v28[5];
  uint64_t v136 = v52;
  uint64_t v137 = v54;
  uint64_t v55 = sub_100056114();
  uint64_t v56 = sub_10008834C((uint64_t)v55);
  uint64_t v58 = v57;
  uint64_t v59 = sub_100056114();
  double v60 = (char *)v21 + v47[5];
  uint64_t v61 = sub_100055AE0();
  uint64_t v62 = *(void (**)(void, void))(*(void *)(v61 - 8) + 16LL);
  uint64_t v121 = (void *)v61;
  uint64_t v120 = v62;
  v62(v60, v59);
  sub_100055800((uint64_t)&v22[v44[5]], (uint64_t)v21 + v47[13]);
  sub_100055800((uint64_t)&v22[v44[6]], (uint64_t)v21 + v47[14]);
  sub_100055800((uint64_t)&v22[v44[9]], (uint64_t)v21 + v47[15]);
  sub_100055800((uint64_t)&v22[v44[11]], (uint64_t)v21 + v47[16]);
  uint64_t v63 = *(void *)&v22[v44[12]];
  sub_100054CB4((uint64_t)&v22[v44[13]], (uint64_t)v21 + v47[18], &qword_1000F02F0);
  sub_1000560C8();
  uint64_t *v21 = v56;
  v21[1] = v58;
  *(uint64_t *)((char *)v21 + v47[6]) = v51;
  *(uint64_t *)((char *)v21 + v47[7]) = v134;
  *(uint64_t *)((char *)v21 + v47[8]) = v136;
  *(uint64_t *)((char *)v21 + v47[9]) = v135;
  *((_BYTE *)v21 + v47[10]) = 8;
  *(uint64_t *)((char *)v21 + v47[11]) = v137;
  *(uint64_t *)((char *)v21 + v47[12]) = v138;
  *(uint64_t *)((char *)v21 + v47[17]) = v63;
  *((_BYTE *)v21 + v47[19]) = v64;
  sub_100054F80((uint64_t)v22, type metadata accessor for AccountDataState);
  sub_100089A1C((uint64_t)v21, a10);
  if (v65 != 11)
  {
    LODWORD(v13_Block_object_dispose(&a9, 8) = v65;
    static Log.accountsDataSync.getter(v65);
    uint64_t v66 = sub_10005489C((uint64_t *)&unk_1000F0290);
    sub_100055858();
    sub_100055D58();
    uint64_t v69 = swift_allocObject(v66, v51 + 4 * v67, v68 | 7);
    *(_OWORD *)(v69 + 16) = xmmword_1000A4940;
    uint64_t v137 = v69;
    uint64_t v70 = v69 + v51;
    uint64_t v143 = (void *)sub_100054418();
    v142[0] = v140;
    uint64_t v71 = swift_retain(v140);
    id v73 = (id)AMSLogKey(v71, v72);
    if (v73)
    {
      uint64_t v74 = sub_100056234((uint64_t)v73);
      uint64_t v76 = v75;
    }

    else
    {
      uint64_t v74 = 0LL;
      uint64_t v76 = 0LL;
    }

    uint64_t v77 = v126;
    static LogInterpolation.prefix(_:_:)(v142, v74, v76);
    sub_10005547C();
    sub_100054930(v142);
    uint64_t v78 = v122;
    sub_1000557F8(38LL);
    sub_100056008();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v79);
    uint64_t v143 = &unk_1000D9C98;
    LOBYTE(v142[0]) = v138;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v142);
    sub_100055BF8();
    v80._countAndFlagsBits = sub_100055A38();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v80);
    LogInterpolation.init(stringInterpolation:)(v78);
    uint64_t v136 = v70;
    uint64_t v143 = v121;
    sub_100055D98();
    sub_100055BB0((uint64_t)&a10);
    sub_100055F50((uint64_t)v142);
    sub_100055BF8();
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(64LL, 5LL);
    v81._countAndFlagsBits = sub_100056014();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v81);
    uint64_t v82 = v141;
    uint64_t v83 = *(void *)(v141 + v44[12]);
    uint64_t v143 = &type metadata for UInt;
    v142[0] = v83;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v142);
    sub_100055BF8();
    v84._countAndFlagsBits = sub_100055884();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v84);
    uint64_t v85 = v123;
    sub_100054CB4(v82 + v44[6], v123, &qword_1000F02A8);
    uint64_t v86 = v131;
    if (sub_100054CA8(v85, 1LL, v131) == 1)
    {
      sub_100054CE0(v85, &qword_1000F02A8);
      sub_100055F58();
    }

    else
    {
      uint64_t v143 = (void *)v86;
      uint64_t v87 = sub_100055D98();
      sub_100055C2C((uint64_t)v87, v85, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 32));
    }

    uint64_t v88 = sub_10005590C();
    sub_100055DA0(v88, &qword_1000F1E60);
    v89._countAndFlagsBits = sub_100055B40();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v89);
    uint64_t v90 = v124;
    sub_100054CB4(v82 + v44[13], v124, &qword_1000F02F0);
    uint64_t v91 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    if (sub_100054CA8(v90, 1LL, v91) == 1)
    {
      sub_100054CE0(v90, &qword_1000F02F0);
      sub_100055F58();
    }

    else
    {
      uint64_t v143 = (void *)v91;
      uint64_t v92 = sub_100055D98();
      sub_100054E20(v90, (uint64_t)v92, type metadata accessor for CachedServerDataSyncAttempt);
    }

    uint64_t v93 = v118[1];
    uint64_t v94 = sub_10005590C();
    sub_100055DA0(v94, &qword_1000F1E60);
    v95._countAndFlagsBits = sub_1000558A8();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v95);
    sub_1000560D4();
    if (v97)
    {
      sub_100055F58();
    }

    else
    {
      uint64_t v143 = &unk_1000D8D98;
      LOWORD(v142[0]) = v96;
    }

    uint64_t v98 = sub_10005590C();
    sub_100055DA0(v98, &qword_1000F1E60);
    v99._countAndFlagsBits = sub_100055B5C();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v99);
    sub_100054CB4(v82 + v44[5], v93, &qword_1000F02A8);
    if (sub_100054CA8(v93, 1LL, v86) == 1)
    {
      uint64_t v100 = v133;
      sub_100054CE0(v93, &qword_1000F02A8);
      sub_100055F58();
      uint64_t v101 = v132;
    }

    else
    {
      uint64_t v100 = v133;
      uint64_t v143 = (void *)v86;
      uint64_t v102 = sub_100055D98();
      uint64_t v101 = v132;
      sub_100055C2C((uint64_t)v102, v93, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 32));
    }

    uint64_t v103 = sub_10005590C();
    sub_100055DA0(v103, &qword_1000F1E60);
    sub_100055A04();
    LogInterpolation.init(stringInterpolation:)(v77);
    Log.default(_:)(v137);
    sub_10005547C();
    sub_100055FDC(v100, *(uint64_t (**)(uint64_t, uint64_t))(v125 + 8));
    uint64_t v104 = type metadata accessor for TaskPriority(0LL);
    uint64_t v105 = v128;
    sub_100055F64(v128, v106, v107, v104);
    uint64_t v108 = v129;
    sub_100055C2C(v129, a10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 16));
    sub_100055290(&qword_1000F0310, type metadata accessor for AccountDataAccessActor, (uint64_t)&unk_1000A4A20);
    uint64_t v110 = v109;
    uint64_t v111 = *(unsigned __int8 *)(v101 + 80);
    uint64_t v112 = (v111 + 96) & ~v111;
    uint64_t v113 = swift_allocObject(&unk_1000D8960, v112 + v127, v111 | 7);
    uint64_t v114 = v140;
    *(void *)(v113 + 16) = v140;
    *(void *)(v113 + 24) = v110;
    *(void *)(v113 + 32) = v114;
    *(_BYTE *)(v113 + 40) = v138;
    uint64_t v115 = v130;
    __int128 v116 = *((_OWORD *)v130 + 1);
    *(_OWORD *)(v113 + 4_Block_object_dispose(&a9, 8) = *(_OWORD *)v130;
    *(_OWORD *)(v113 + 64) = v116;
    *(_OWORD *)(v113 + 80) = *((_OWORD *)v115 + 2);
    sub_100055C2C(v113 + v112, v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 32));
    swift_retain_n(v114, 2LL);
    uint64_t v117 = sub_10008122C(v105, (uint64_t)&unk_1000F0330, v113);
    swift_release(v117);
  }

  sub_100054F80((uint64_t)v21, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  sub_100054F44(v141, v139, type metadata accessor for AccountDataState);
  sub_1000554F4();
}

uint64_t sub_10004DD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  *(_BYTE *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a4;
  return swift_task_switch(sub_10004DDB0, a4, 0LL);
}

uint64_t sub_10004DDB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004DE04()
{
  uint64_t v108 = v1;
  uint64_t v120 = v3;
  uint64_t v5 = v4;
  int v114 = v6;
  uint64_t v115 = type metadata accessor for CachedServerDataSyncTaskSchedule(0LL);
  sub_1000552EC();
  __chkstk_darwin(v7);
  sub_100055360();
  sub_100055EC4(v8);
  sub_1000552EC();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for Log(0LL);
  uint64_t v113 = *(void *)(v127 - 8);
  sub_100055428();
  __chkstk_darwin(v12);
  sub_100055528();
  sub_100055634();
  __chkstk_darwin(v13);
  sub_100056184();
  sub_100055634();
  __chkstk_darwin(v14);
  sub_100056184();
  sub_100055634();
  __chkstk_darwin(v15);
  sub_100056184();
  sub_100055634();
  __chkstk_darwin(v16);
  sub_10005616C();
  uint64_t v125 = v17;
  int v18 = (int *)sub_1000559B0();
  sub_1000552EC();
  __chkstk_darwin(v19);
  sub_100055840();
  uint64_t v20 = (int *)type metadata accessor for CachedServerDataSyncTaskScheduleInput(0LL);
  sub_1000552EC();
  __chkstk_darwin(v21);
  uint64_t v23 = (void *)((char *)v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v144 = v0;
  sub_100055BEC(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, (uint64_t)&v130);
  uint64_t v24 = sub_100055DC8();
  sub_100054F44(v24, v25, type metadata accessor for AccountDataState);
  uint64_t v117 = *v5;
  uint64_t v121 = v5[1];
  uint64_t v123 = v5[2];
  uint64_t v126 = v5[3];
  uint64_t v122 = v5[4];
  v106[3] = v5;
  uint64_t v124 = v5[5];
  uint64_t v26 = sub_1000560E8();
  uint64_t v27 = sub_10008834C((uint64_t)v26);
  *(void *)&__int128 v116 = v28;
  uint64_t v29 = sub_1000560E8();
  sub_100055AE0();
  uint64_t v30 = sub_100056080();
  uint64_t v107 = v31;
  v106[4] = v32;
  v32(v30, v29);
  sub_100055800(v2 + v18[5], (uint64_t)v23 + v20[13]);
  sub_100055800(v2 + v18[6], (uint64_t)v23 + v20[14]);
  sub_100055800(v2 + v18[9], (uint64_t)v23 + v20[15]);
  sub_100055800(v2 + v18[11], (uint64_t)v23 + v20[16]);
  uint64_t v33 = *(void **)(v2 + v18[12]);
  sub_100054CB4(v2 + v18[13], (uint64_t)v23 + v20[18], &qword_1000F02F0);
  sub_1000560C8();
  uint64_t v34 = v116;
  uint64_t *v23 = v27;
  v23[1] = v34;
  sub_100055C48();
  sub_100055C48();
  sub_100055C48();
  sub_100055C48();
  *((_BYTE *)v23 + v20[10]) = v114;
  sub_100055C48();
  sub_100055C48();
  *(uint64_t *)((char *)v23 + v20[17]) = (uint64_t)v33;
  *((_BYTE *)v23 + v20[19]) = v35;
  sub_100054F80(v2, type metadata accessor for AccountDataState);
  sub_100055D88();
  uint64_t v36 = sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100055858();
  sub_100055D58();
  uint64_t v126 = v37;
  uint64_t v123 = v36;
  uint64_t v117 = v27 + 2 * v37;
  uint64_t v121 = v38 | 7;
  uint64_t v39 = swift_allocObject(v36, v117, v38 | 7);
  __int128 v116 = xmmword_1000A4950;
  *(_OWORD *)(v39 + 16) = xmmword_1000A4950;
  uint64_t v124 = v27;
  uint64_t v122 = sub_100054418();
  uint64_t v129 = (void *)v122;
  v128[0] = v144;
  uint64_t v40 = swift_retain(v144);
  id v42 = (id)AMSLogKey(v40, v41);
  if (v42)
  {
    uint64_t v43 = sub_100055CE8((uint64_t)v42);
    uint64_t v45 = v44;
  }

  else
  {
    uint64_t v43 = 0LL;
    uint64_t v45 = 0LL;
  }

  uint64_t v46 = v120;
  static LogInterpolation.prefix(_:_:)(v128, v43, v45);
  swift_bridgeObjectRelease(v45);
  sub_100054930(v128);
  sub_1000557F8(6LL);
  v145._countAndFlagsBits = 0x207475706E49LL;
  v145._object = (void *)0xE600000000000000LL;
  sub_10005606C(v145);
  uint64_t v129 = v20;
  uint64_t v47 = sub_100055DF8();
  sub_100054F44((uint64_t)v23, (uint64_t)v47, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  uint64_t v48 = sub_100056094();
  sub_100055C24(v48, &qword_1000F1E60);
  sub_100055A04();
  LogInterpolation.init(stringInterpolation:)(v11);
  sub_100055DF0(v39);
  sub_100055778();
  uint64_t v49 = sub_100055ED4();
  uint64_t v125 = v50;
  v50(v49, v127);
  uint64_t v51 = v119;
  sub_100089B30(v23, v46, v119);
  sub_100055D88();
  uint64_t v52 = sub_10005596C();
  *(_OWORD *)(v52 + 16) = v116;
  uint64_t v53 = v52 + v124;
  uint64_t v54 = sub_1000554CC();
  id v56 = (id)AMSLogKey(v54, v55);
  if (v56)
  {
    sub_100055CE8((uint64_t)v56);
    sub_100055878();
  }

  else
  {
    sub_1000561E0();
  }

  uint64_t v57 = v112;
  sub_1000555C4();
  sub_100055778();
  sub_100054930(v128);
  sub_1000557F8(13LL);
  v146._countAndFlagsBits = 0x656863536B736174LL;
  v146._object = (void *)0xED000020656C7564LL;
  sub_10005606C(v146);
  uint64_t v58 = v115;
  uint64_t v129 = (void *)v115;
  uint64_t v59 = sub_100055DF8();
  sub_100054F44(v51, (uint64_t)v59, type metadata accessor for CachedServerDataSyncTaskSchedule);
  uint64_t v60 = sub_100056094();
  sub_100055C24(v60, &qword_1000F1E60);
  sub_100055A04();
  sub_100055FF0();
  sub_100055DF0(v52);
  sub_10005547C();
  sub_1000555D8(v53);
  uint64_t v61 = v51 + *(int *)(v58 + 20);
  uint64_t v62 = sub_1000559FC();
  sub_100055290( &qword_1000F0320,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)(v120, v61, v62, v63);
  if ((v64 & 1) != 0)
  {
    double v65 = Date.distance(to:)(v61);
    sub_10008A1E4((uint64_t)v131, v65);
    uint64_t v66 = v132;
    uint64_t v118 = v135;
    uint64_t v113 = v136;
    uint64_t v112 = v137;
    unint64_t v110 = v131[0] | ((unint64_t)v131[1] << 8);
    unint64_t v111 = v133 | ((unint64_t)v134 << 8);
    if (v140) {
      int v67 = 0x10000;
    }
    else {
      int v67 = 0;
    }
    int v68 = v138 | (v139 << 8) | v67;
    if (v141) {
      int v69 = 0x1000000;
    }
    else {
      int v69 = 0;
    }
    int v109 = v68 | v69;
  }

  else
  {
    uint64_t v66 = 0LL;
    unint64_t v111 = 0LL;
    uint64_t v118 = 0LL;
    uint64_t v113 = 0LL;
    uint64_t v112 = 0LL;
    int v109 = 0;
    unint64_t v110 = 2LL;
  }

  static Log.accountsDataSync.getter(v64);
  uint64_t v70 = sub_10005596C();
  *(_OWORD *)(v70 + 16) = v116;
  uint64_t v71 = sub_1000554CC();
  id v73 = (id)AMSLogKey(v71, v72);
  if (v73)
  {
    sub_100055CE8((uint64_t)v73);
    sub_100055878();
  }

  else
  {
    sub_1000561E0();
  }

  uint64_t v74 = v126;
  uint64_t v117 = 2 * v126;
  sub_1000555C4();
  sub_100055778();
  sub_100054930(v128);
  sub_1000557F8(7LL);
  v147._countAndFlagsBits = 0x206E6F69746361LL;
  v147._object = (void *)0xE700000000000000LL;
  sub_10005606C(v147);
  uint64_t v129 = &unk_1000D9B78;
  uint64_t v75 = (void *)swift_allocObject(&unk_1000D8938, 72LL, 7LL);
  v128[0] = v75;
  char v76 = v110;
  v75[2] = v110;
  v75[3] = v66;
  uint64_t v77 = v118;
  v75[4] = v111;
  v75[5] = v77;
  sub_100056058();
  *(void *)(v78 + 4_Block_object_dispose(&a9, 8) = v80;
  *(void *)(v78 + 56) = v79;
  *(_DWORD *)(v78 + 64) = v109;
  uint64_t v81 = sub_100056094();
  sub_100055C24(v81, &qword_1000F1E60);
  sub_100055A04();
  sub_100055FF0();
  Log.default(_:)(v70);
  sub_10005547C();
  uint64_t v82 = sub_1000555D8(v57);
  if (v76 == 2LL)
  {
    uint64_t v83 = v106[1];
    static Log.accountsDataSync.getter(v82);
    uint64_t v84 = sub_1000559F0(v123, v124 + 3 * v74);
    *(_OWORD *)(v84 + 16) = xmmword_1000A4930;
    uint64_t v85 = sub_1000554CC();
    id v87 = (id)AMSLogKey(v85, v86);
    if (v87)
    {
      sub_100055CE8((uint64_t)v87);
      sub_100055878();
    }

    else
    {
      sub_1000561E0();
    }

    uint64_t v93 = v119;
    sub_1000555C4();
    sub_100055778();
    sub_100054930(v128);
    sub_100055620(0xD00000000000001CLL);
    uint64_t v129 = v107;
    sub_100055DF8();
    sub_100055BB0((uint64_t)&v132);
    uint64_t v94 = sub_100055F50((uint64_t)v128);
    sub_100055C24(v94, &qword_1000F1E60);
    Log.default(_:)(v84);
    sub_10005547C();
    sub_1000555D8(v83);
    sub_10004E960();
  }

  else
  {
    uint64_t v88 = v106[2];
    static Log.accountsDataSync.getter(v82);
    uint64_t v89 = sub_1000559F0(v123, v124 + 4 * v74);
    *(_OWORD *)(v89 + 16) = xmmword_1000A4940;
    uint64_t v90 = sub_1000554CC();
    id v92 = (id)AMSLogKey(v90, v91);
    v106[0] = v66;
    if (v92)
    {
      sub_100055CE8((uint64_t)v92);
      sub_100055878();
    }

    else
    {
      sub_1000561E0();
    }

    sub_1000555C4();
    sub_100055778();
    sub_100054930(v128);
    sub_100055620(0xD00000000000001ALL);
    uint64_t v129 = v107;
    sub_100055DF8();
    sub_100055BB0((uint64_t)&v132);
    uint64_t v95 = static LogInterpolation.traceableSensitive(_:)(v128);
    sub_100055C24(v95, &qword_1000F1E60);
    sub_100055F28();
    sub_100055D20(20LL, v96);
    Log.default(_:)(v89);
    sub_10005547C();
    sub_1000555D8(v88);
    uint64_t v97 = *(void *)(v144 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_scheduler);
    uint64_t v98 = *(void *)(v144 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_scheduler + 8);
    uint64_t v93 = v119;
    Swift::String v99 = (uint64_t *)(v119 + *(int *)(v115 + 32));
    uint64_t v100 = *v99;
    uint64_t v101 = v99[1];
    v142[0] = v110 & 0xFFFFFFFFFFFFFF01LL;
    v142[1] = v106[0];
    v142[2] = v111 & 0xFFFFFFFFFFFFFF01LL;
    void v142[3] = v118;
    sub_100056058();
    v142[4] = v103;
    v142[5] = v102;
    int v143 = v104;
    uint64_t v105 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v98 + 8);
    swift_bridgeObjectRetain(v101);
    v105(v93, v100, v101, v142, v97, v98);
    sub_100055778();
  }

  sub_100054F80(v93, type metadata accessor for CachedServerDataSyncTaskSchedule);
  sub_100054F80((uint64_t)v23, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  sub_1000554F4();
}

void sub_10004E960()
{
  char v2 = v1;
  uint64_t v24 = type metadata accessor for Log(0LL);
  uint64_t v3 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((dispatch thunk of static DeviceInformation.deviceIsRunningInternalBuild()() & 1) != 0
    && (uint64_t v6 = dispatch thunk of static Defaults.autoSyncDisabledForAccountData.getter(), (v6 & 1) != 0)
    && (v2 & 1) == 0)
  {
    v20[1] = v6;
    static Log.accountsDataSync.getter(v6);
    uint64_t v7 = (void *)sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v8 = *(void *)(sub_100055858() - 8);
    uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
         + 9LL * *(void *)(v8 + 72),
           *(unsigned __int8 *)(v8 + 80) | 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_1000A4960;
    uint64_t v21 = v9;
    uint64_t v23 = (void *)sub_100054418();
    v22[0] = v0;
    uint64_t v10 = swift_retain(v0);
    id v12 = (id)AMSLogKey(v10, v11);
    if (v12)
    {
      uint64_t v13 = sub_100056234((uint64_t)v12);
      uint64_t v15 = v14;
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v15 = 0LL;
    }

    static LogInterpolation.prefix(_:_:)(v22, v13, v15);
    swift_bridgeObjectRelease(v15);
    sub_100054930(v22);
    sub_100055F28();
    sub_100055D20(17LL, v16);
    uint64_t v17 = v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
    uint64_t v18 = sub_100055AE0();
    uint64_t v23 = (void *)v18;
    uint64_t v19 = sub_1000548F4(v22);
    sub_100055C2C((uint64_t)v19, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL));
    static LogInterpolation.traceableSensitive(_:)(v22);
    sub_1000559A4();
    sub_100055620(0xD000000000000018LL);
    uint64_t v23 = &type metadata for Bool;
    sub_100056108();
    sub_1000559A4();
    sub_100055620(0xD000000000000015LL);
    uint64_t v23 = &type metadata for Bool;
    sub_100056108();
    sub_1000559A4();
    LogInterpolation.init(stringLiteral:)(0x6C61756E616D202CLL, 0xEE003A636E797320LL);
    uint64_t v23 = &type metadata for Bool;
    LOBYTE(v22[0]) = 0;
    static LogInterpolation.safe(_:)(v22);
    sub_1000559A4();
    Log.default(_:)(v21);
    sub_1000556B4();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v24);
  }

  else
  {
    sub_10004EC34();
  }

  sub_1000554F4();
}

void sub_10004EC34()
{
  uint64_t v156 = v1;
  char v2 = v0;
  v176 = v0;
  uint64_t v159 = v3;
  v157 = v4;
  int v162 = v5;
  uint64_t v137 = sub_1000559FC();
  uint64_t v132 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v131 = v6;
  unsigned __int8 v136 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005489C(&qword_1000F0300);
  sub_1000552EC();
  __chkstk_darwin(v7);
  sub_100055360();
  uint64_t v135 = v8;
  uint64_t v126 = type metadata accessor for AccountDataServerRequest(0LL);
  uint64_t v128 = *(void *)(v126 - 8);
  uint64_t v9 = __chkstk_darwin(v126);
  uint64_t v129 = v10;
  uint64_t v130 = (uint64_t)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  sub_10005616C();
  uint64_t v134 = v11;
  sub_10005489C(&qword_1000F02F0);
  sub_1000552EC();
  __chkstk_darwin(v12);
  sub_100055360();
  uint64_t v148 = v13;
  uint64_t v14 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0LL);
  sub_1000552EC();
  __chkstk_darwin(v15);
  sub_100055360();
  unsigned __int8 v138 = v16;
  uint64_t v149 = sub_1000559B0();
  sub_1000552EC();
  __chkstk_darwin(v17);
  sub_100055528();
  uint64_t v133 = v18;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v123 - v21;
  __chkstk_darwin(v20);
  sub_10005616C();
  uint64_t v163 = v23;
  uint64_t v161 = sub_100055CF0();
  uint64_t v158 = *(char **)(v161 - 8);
  sub_100055428();
  __chkstk_darwin(v24);
  sub_100055528();
  uint64_t v127 = v25;
  __chkstk_darwin(v26);
  sub_100056184();
  uint64_t v155 = v27;
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v123 - v30;
  static Log.accountsDataSync.getter(v29);
  uint64_t v32 = sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100055858();
  sub_1000561A4();
  uint64_t v35 = v34 & ~v33;
  uint64_t v164 = v36;
  uint64_t v154 = v32;
  uint64_t v140 = v35 + 3 * v36;
  uint64_t v152 = v33 | 7;
  uint64_t v37 = swift_allocObject(v32, v140, v33 | 7);
  __int128 v139 = xmmword_1000A4930;
  *(_OWORD *)(v37 + 16) = xmmword_1000A4930;
  uint64_t v153 = v35;
  uint64_t v151 = sub_100054418();
  uint64_t v167 = v151;
  v166[0] = v2;
  uint64_t v38 = swift_retain(v2);
  id v40 = (id)AMSLogKey(v38, v39);
  Swift::String v147 = (int *)v14;
  uint64_t v160 = v22;
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    uint64_t v44 = v43;
  }

  else
  {
    uint64_t v42 = 0LL;
    uint64_t v44 = 0LL;
  }

  uint64_t v45 = v157;
  uint64_t v46 = (uint64_t)v158;
  static LogInterpolation.prefix(_:_:)(v166, v42, v44);
  sub_100055948();
  sub_100054930(v166);
  sub_100055F28();
  sub_100055D20(21LL, v47);
  uint64_t v158 = &v176[OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID];
  uint64_t v48 = sub_100055AE0();
  uint64_t v167 = v48;
  sub_1000548F4(v166);
  sub_100055FE4();
  char v141 = v49;
  v49();
  static LogInterpolation.traceableSensitive(_:)(v166);
  sub_100054CE0((uint64_t)v166, &qword_1000F1E60);
  Log.default(_:)(v37);
  swift_bridgeObjectRelease(v37);
  id v150 = *(void (**)(char *, uint64_t))(v46 + 8);
  v150(v31, v161);
  uint64_t v50 = (uint64_t)&v176[OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state];
  sub_100055BEC((uint64_t)&v176[OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state], (uint64_t)&v168);
  uint64_t v51 = (uint64_t)v160;
  sub_100054F44(v50, (uint64_t)v160, type metadata accessor for AccountDataState);
  uint64_t v52 = v45[1];
  uint64_t v142 = *v45;
  uint64_t v143 = v52;
  uint64_t v53 = v45[2];
  uint64_t v54 = v45[3];
  uint64_t v144 = v45[4];
  uint64_t v145 = v53;
  uint64_t v146 = v45[5];
  uint64_t v55 = v163;
  sub_100069CA0();
  sub_100054F80(v51, type metadata accessor for AccountDataState);
  uint64_t v56 = v156;
  uint64_t v57 = sub_100051554((uint64_t)v158, v55);
  if (v56)
  {
    uint64_t v58 = v55;
  }

  else
  {
    uint64_t v123 = 0LL;
    uint64_t v124 = v48;
    uint64_t v156 = v54;
    uint64_t v59 = 2 * v164;
    static Log.accountsDataSync.getter(v57);
    uint64_t v60 = swift_allocObject(v154, v140, v152);
    *(_OWORD *)(v60 + 16) = v139;
    uint64_t v61 = sub_100055B20();
    id v63 = (id)AMSLogKey(v61, v62);
    uint64_t v125 = v50;
    if (v63)
    {
      sub_100056234((uint64_t)v63);
    }

    uint64_t v64 = v138;
    uint64_t v65 = v163;
    uint64_t v66 = (uint64_t)v160;
    sub_100055BCC();
    sub_100055948();
    sub_100054930(v166);
    sub_100055620(0xD00000000000001ELL);
    uint64_t v140 = v59;
    int v67 = (int *)v149;
    uint64_t v167 = v149;
    int v68 = sub_1000548F4(v166);
    uint64_t v69 = v65;
    uint64_t v70 = v67;
    sub_100054F44(v69, (uint64_t)v68, type metadata accessor for AccountDataState);
    static LogInterpolation.sensitive(_:)(v166);
    sub_100054CE0((uint64_t)v166, &qword_1000F1E60);
    uint64_t v71 = v155;
    Log.default(_:)(v60);
    swift_bridgeObjectRelease(v60);
    sub_100055FC4(v71);
    sub_100054F44(v125, v66, type metadata accessor for AccountDataState);
    uint64_t v72 = sub_100056248();
    uint64_t v155 = sub_10008834C((uint64_t)v72);
    uint64_t v74 = v73;
    uint64_t v75 = sub_100056248();
    char v76 = v147;
    ((void (*)(char *, void *, uint64_t))v141)((char *)v64 + v147[5], v75, v124);
    sub_100054CB4(v66 + v67[5], (uint64_t)v64 + v76[13], &qword_1000F02A8);
    sub_100055D4C(v66 + v67[6], v76[14]);
    sub_100055D4C(v66 + v67[9], v76[15]);
    sub_100055D4C(v66 + v67[11], v76[16]);
    uint64_t v77 = *(void *)(v66 + v67[12]);
    uint64_t v78 = (char *)v64 + v76[18];
    sub_1000560FC(v66 + v70[13]);
    sub_1000560C8();
    *uint64_t v64 = v155;
    v64[1] = v74;
    *(uint64_t *)((char *)v64 + v76[6]) = v142;
    *(uint64_t *)((char *)v64 + v76[7]) = v143;
    *(uint64_t *)((char *)v64 + v76[8]) = v145;
    *(uint64_t *)((char *)v64 + v76[9]) = v144;
    *((_BYTE *)v64 + v76[10]) = v162;
    *(uint64_t *)((char *)v64 + v76[11]) = v146;
    *(uint64_t *)((char *)v64 + v76[12]) = v156;
    *(uint64_t *)((char *)v64 + v76[17]) = v77;
    *((_BYTE *)v64 + v76[19]) = v79;
    sub_100054F80(v66, type metadata accessor for AccountDataState);
    uint64_t v80 = (uint64_t)v78;
    uint64_t v81 = v148;
    sub_1000560FC(v80);
    uint64_t v82 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    LODWORD(v76) = sub_100054CA8(v81, 1LL, v82);
    sub_100054CE0(v81, &qword_1000F02F0);
    if ((_DWORD)v76 == 1)
    {
      uint64_t v84 = v176;
      (*(void (**)(uint64_t))(*(void *)&v176[OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_transactionStore
                                                       + 8]
                                      + 8LL))(5LL);
      uint64_t v85 = v133;
      sub_100054F44(v125, v133, type metadata accessor for AccountDataState);
      __int16 v87 = *(_WORD *)(v85 + v70[10]);
      uint64_t v88 = v134;
      if (v87 == 3
        || (sub_100054A6C(v85, (uint64_t)v165, &qword_1000F02B0),
            sub_100054A6C((uint64_t)v165, (uint64_t)v166, &qword_1000F02B0),
            uint64_t v86 = sub_1000549A4((uint64_t)v166),
            (_DWORD)v86 == 1))
      {
        AccountIdentity.dsid.getter(v86);
        uint64_t v89 = v88;
        uint64_t v90 = v126;
        uint64_t v91 = 1LL;
      }

      else
      {
        uint64_t v99 = v166[2];
        AccountIdentity.dsid.getter(v86);
        uint64_t v100 = type metadata accessor for AccountDataServerRequest.Put(0LL);
        *(void *)(v88 + *(int *)(v100 + 20)) = v99;
        *(_WORD *)(v88 + *(int *)(v100 + objc_destroyWeak((id *)(v2 - 24)) = v87;
        uint64_t v85 = v133;
        uint64_t v84 = v176;
        uint64_t v89 = v88;
        uint64_t v90 = v126;
        uint64_t v91 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v89, v90, v91);
      sub_100054F80(v85, type metadata accessor for AccountDataState);
      uint64_t v101 = &v84[OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics];
      sub_1000576F0(v88, v162);
      uint64_t v102 = *((void *)v101 + 3);
      uint64_t v103 = *((void *)v101 + 4);
      int v104 = (void *)sub_100055DC8();
      sub_100054838(v104, v105);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v103 + 8))(v169, v102, v103);
      __int128 v175 = v169[0];
      sub_100054D08((uint64_t)&v175);
      __int128 v174 = v169[1];
      sub_100054D08((uint64_t)&v174);
      uint64_t v173 = v170;
      sub_100054D30(&v173);
      uint64_t v172 = v171;
      sub_100054D30(&v172);
      uint64_t v106 = type metadata accessor for TaskPriority(0LL);
      sub_100055F64(v135, v107, v108, v106);
      uint64_t v109 = v130;
      sub_100054F44(v88, v130, type metadata accessor for AccountDataServerRequest);
      uint64_t v110 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v136, v159, v137);
      sub_100055290(&qword_1000F0310, type metadata accessor for AccountDataAccessActor, (uint64_t)&unk_1000A4A20);
      uint64_t v112 = v111;
      uint64_t v113 = *(unsigned __int8 *)(v128 + 80);
      uint64_t v114 = (v113 + 40) & ~v113;
      unint64_t v115 = (v129 + v114 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v116 = *(unsigned __int8 *)(v110 + 80);
      uint64_t v117 = (v116 + v115 + 48) & ~v116;
      uint64_t v118 = (char *)swift_allocObject(&unk_1000D8910, v117 + v131, v113 | v116 | 7);
      *((void *)v118 + 2) = v176;
      *((void *)v118 + 3) = v112;
      *((void *)v118 + 4) = v176;
      sub_100054E20(v109, (uint64_t)&v118[v114], type metadata accessor for AccountDataServerRequest);
      uint64_t v119 = &v118[v115];
      uint64_t v120 = v157;
      __int128 v121 = *((_OWORD *)v157 + 1);
      *(_OWORD *)uint64_t v119 = *(_OWORD *)v157;
      *((_OWORD *)v119 + 1) = v121;
      *((_OWORD *)v119 + 2) = *((_OWORD *)v120 + 2);
      (*(void (**)(char *, char *, uint64_t))(v110 + 32))(&v118[v117], v136, v137);
      swift_retain_n(v176, 2LL);
      uint64_t v122 = sub_100094F7C(v135, (uint64_t)&unk_1000F0318, (uint64_t)v118);
      swift_release(v122);
      sub_100054F80(v134, type metadata accessor for AccountDataServerRequest);
      uint64_t v98 = v163;
    }

    else
    {
      uint64_t v92 = v127;
      static Log.accountsDataSync.getter(v83);
      uint64_t v93 = swift_allocObject(v154, v153 + v140, v152);
      *(_OWORD *)(v93 + 16) = xmmword_1000A4950;
      uint64_t v94 = sub_100055B20();
      id v96 = (id)AMSLogKey(v94, v95);
      if (v96)
      {
        uint64_t v97 = v96;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      }

      sub_100055BCC();
      sub_100055948();
      sub_100054930(v166);
      sub_100055620(0xD00000000000003CLL);
      Log.default(_:)(v93);
      sub_1000556B4();
      sub_100055FC4(v92);
      uint64_t v98 = v163;
    }

    sub_100054F80((uint64_t)v64, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
    uint64_t v58 = v98;
  }

  sub_100054F80(v58, type metadata accessor for AccountDataState);
  sub_1000554F4();
}

uint64_t sub_10004F698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a4;
  uint64_t v9 = (void *)swift_task_alloc(dword_1000F0104);
  *(void *)(v6 + 24) = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_10004F700;
  return sub_10004F7A0(a5, a6);
}

uint64_t sub_10004F700()
{
  uint64_t v2 = *(void *)(*v1 + 24);
  uint64_t v3 = *v1;
  *(void *)(v3 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return sub_100055354();
  }
  else {
    return sub_100055794(*(uint64_t (**)(void))(v3 + 8));
  }
}

uint64_t sub_10004F760()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10005564C(*(void *)(v0 + 16));
  swift_errorRelease(v1);
  return sub_100055794(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004F7A0(uint64_t a1, uint64_t a2)
{
  v3[2] = a2;
  v3[3] = v2;
  uint64_t v6 = sub_1000559FC();
  v3[4] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[5] = v7;
  v3[6] = sub_100055374(v7);
  uint64_t v8 = sub_10005489C(&qword_1000F02F8);
  uint64_t v9 = sub_100055374(*(void *)(v8 - 8));
  v3[7] = v9;
  uint64_t v10 = (void *)swift_task_alloc(dword_1000F010C);
  v3[8] = v10;
  void *v10 = v3;
  v10[1] = sub_10004F83C;
  return sub_10004F9CC(v9, a1, a2);
}

uint64_t sub_10004F83C()
{
  return sub_1000552CC();
}

uint64_t sub_10004F874()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000F0114);
  v0[9] = (uint64_t)v1;
  uint64_t *v1 = v0;
  v1[1] = (uint64_t *)sub_10004F8CC;
  return sub_10004FE00(v0[7], v0[2], v0[6]);
}

uint64_t sub_10004F8CC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v6 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_10004F990;
  }
  else {
    uint64_t v7 = sub_10004F958;
  }
  return swift_task_switch(v7, *(void *)(v2 + 24), 0LL);
}

uint64_t sub_10004F958(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return sub_100055A58(v1);
}

uint64_t sub_10004F990(uint64_t a1)
{
  return sub_100055A58(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10004F9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  uint64_t v5 = sub_100055F10();
  v4[22] = sub_100055374(*(void *)(v5 - 8));
  uint64_t v6 = sub_100055D18();
  v4[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[24] = v7;
  v4[25] = sub_1000552D8(v7);
  v4[26] = sub_1000552FC();
  sub_10005570C();
  return sub_100055354();
}

uint64_t sub_10004FA2C()
{
  uint64_t v2 = *(void *)(v0 + 168);
  static Log.accountsDataSync.getter(v3);
  *(void *)(v0 + 216) = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v4 = *(void *)(sub_100055858() - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  *(void *)(v0 + 224) = v5;
  *(_DWORD *)(v0 + 256) = *(_DWORD *)(v4 + 80);
  sub_100055F88();
  uint64_t v7 = sub_100055B34(v1 + 2 * v5, v6);
  *(_OWORD *)(v7 + 16) = xmmword_1000A4950;
  uint64_t v8 = sub_100054418();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 232) = v8;
  *(void *)(v0 + 40) = v8;
  uint64_t v9 = sub_100055DDC();
  id v11 = (id)AMSLogKey(v9, v10);
  if (v11)
  {
    sub_1000557E0((uint64_t)v11);
    sub_10005603C();
  }

  else
  {
    sub_1000561F8();
  }

  uint64_t v22 = *(void *)(v0 + 208);
  uint64_t v23 = *(void *)(v0 + 192);
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v12 = *(void *)(v0 + 152);
  sub_100055960(v0 + 16);
  sub_100055694();
  sub_100055F20();
  sub_1000557F8(17LL);
  sub_100056008();
  v13._countAndFlagsBits = 0xD000000000000011LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v13);
  *(void *)(v0 + 72) = sub_1000561C4();
  uint64_t v14 = sub_1000548F4((void *)(v0 + 48));
  sub_1000560F4(v12, (uint64_t)v14);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0 + 48);
  sub_100054CE0(v0 + 48, &qword_1000F1E60);
  sub_100055A04();
  sub_100055664();
  Log.default(_:)(v7);
  sub_10005547C();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  *(void *)(v0 + 240) = v15;
  v15(v22, v24);
  uint64_t v17 = *(void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_requester);
  uint64_t v16 = *(void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_requester + 8);
  uint64_t v18 = *(void *)(v25 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag);
  uint64_t v19 = *(int **)(v16 + 8);
  uint64_t v26 = (int *)((char *)v19 + *v19);
  uint64_t v20 = (void *)swift_task_alloc(v19[1]);
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v20;
  void *v20 = v0;
  v20[1] = sub_10004FC28;
  return ((uint64_t (*)(void, void, void, uint64_t, uint64_t, uint64_t))v26)( *(void *)(v0 + 144),  *(void *)(v0 + 152),  *(void *)(v0 + 160),  v18,  v17,  v16);
}

uint64_t sub_10004FC28()
{
  return sub_1000552CC();
}

uint64_t sub_10004FC60()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 256);
  uint64_t v4 = *(void **)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v3 + 32) & ~v3;
  static Log.accountsDataSync.getter(v8);
  uint64_t v9 = swift_allocObject(v4, v7 + 3 * v2, v6);
  *(void *)(v0 + 80) = v5;
  *(_OWORD *)(v9 + 16) = xmmword_1000A4930;
  *(void *)(v0 + 104) = v1;
  uint64_t v10 = sub_100055830();
  id v12 = (id)AMSLogKey(v10, v11);
  if (v12)
  {
    uint64_t v13 = sub_1000557E0((uint64_t)v12);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 184);
  uint64_t v23 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 144);
  static LogInterpolation.prefix(_:_:)(v0 + 80, v13, v15);
  swift_bridgeObjectRelease(v15);
  sub_100054930((void *)(v0 + 80));
  LogInterpolation.init(stringLiteral:)(0x7073657220746F47LL, 0xED00003A65736E6FLL);
  *(void *)(v0 + 136) = sub_10005489C(&qword_1000F02F8);
  uint64_t v18 = sub_1000548F4((void *)(v0 + 112));
  sub_100055D28(v17, (uint64_t)v18);
  static LogInterpolation.sensitive(_:)(v0 + 112);
  sub_100054CE0(v0 + 112, &qword_1000F1E60);
  sub_100055E50();
  sub_10005547C();
  v22(v16, v20);
  swift_task_dealloc(v21);
  sub_1000555BC();
  swift_task_dealloc(v23);
  return sub_100055728(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004FE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[93] = v3;
  v4[92] = a3;
  v4[91] = a2;
  v4[90] = a1;
  uint64_t v5 = sub_10005489C(&qword_1000F02F0);
  v4[94] = sub_100055374(*(void *)(v5 - 8));
  uint64_t v6 = sub_10005489C(&qword_1000F02A8);
  v4[95] = sub_1000552D8(*(void *)(v6 - 8));
  v4[96] = sub_1000552FC();
  uint64_t v7 = sub_100055F10();
  v4[97] = sub_1000552D8(*(void *)(v7 - 8));
  v4[98] = sub_1000552FC();
  uint64_t v8 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0LL);
  v4[99] = v8;
  v4[100] = sub_100055374(*(void *)(v8 - 8));
  uint64_t v9 = sub_100055D18();
  v4[101] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[102] = v10;
  v4[103] = sub_1000552D8(v10);
  v4[104] = sub_1000552FC();
  v4[105] = sub_1000552FC();
  v4[106] = sub_1000552FC();
  uint64_t v11 = sub_100055F18();
  v4[107] = v11;
  v4[108] = sub_1000552D8(*(void *)(v11 - 8));
  v4[109] = sub_1000552FC();
  v4[110] = sub_1000552FC();
  v4[111] = sub_1000552FC();
  sub_10005570C();
  return sub_100055354();
}

uint64_t sub_10004FEFC()
{
  uint64_t v1 = *(void *)(v0 + 888);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 872);
  uint64_t v4 = *(void *)(v0 + 744);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = v4 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  sub_100055BEC(v4 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, v0 + 696);
  sub_1000560F4(v6, v1);
  sub_1000560F4(v6, v3);
  sub_100069F38();
  sub_100054F80(v3, type metadata accessor for AccountDataState);
  sub_1000573D4(v5, v1, v2, (void *)(v4 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics));
  uint64_t v7 = OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  *(void *)(v0 + 896) = OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  uint64_t v8 = v4 + v7;
  uint64_t v9 = sub_100056164(v4 + v7, v2);
  if (v3)
  {
    sub_100054F80(*(void *)(v0 + 880), type metadata accessor for AccountDataState);
    uint64_t v10 = sub_100055DE4();
LABEL_34:
    sub_100054F80(v10, v11);
    uint64_t v216 = *(void *)(v0 + 776);
    uint64_t v219 = *(void *)(v0 + 768);
    uint64_t v222 = *(void *)(v0 + 760);
    uint64_t v225 = *(void *)(v0 + 752);
    swift_task_dealloc(*(void *)(v0 + 888));
    sub_1000555BC();
    sub_100055558();
    sub_10005562C();
    sub_10005575C();
    sub_100055870();
    sub_100055988();
    sub_1000560A4();
    sub_100056048();
    sub_10005566C();
    swift_task_dealloc(v216);
    swift_task_dealloc(v219);
    swift_task_dealloc(v222);
    swift_task_dealloc(v225);
    uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }

  uint64_t v217 = v8;
  uint64_t v220 = v6;
  v210 = (void *)(v0 + 248);
  id v12 = *(void **)(v0 + 744);
  static Log.accountsDataSync.getter(v9);
  uint64_t v13 = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v223 = *(void *)(*(void *)(sub_100055858() - 8) + 72LL);
  sub_100055D58();
  uint64_t v187 = v15 | 7;
  uint64_t v191 = v13;
  uint64_t v171 = v4 + 3 * v14;
  uint64_t v175 = 3 * v14;
  __int128 v162 = xmmword_1000A4930;
  *(_OWORD *)(swift_allocObject(v13, v171, v15 | 7) + 16) = xmmword_1000A4930;
  uint64_t v195 = v4;
  uint64_t v183 = sub_100054418();
  *(void *)(v0 + 272) = v183;
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v12;
  uint64_t v16 = sub_100055830();
  id v18 = (id)AMSLogKey(v16, v17);
  if (v18)
  {
    uint64_t v19 = sub_1000558F8((uint64_t)v18);

    uint64_t v20 = v19;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = *(void *)(v0 + 872);
  uint64_t v22 = *(int **)(v0 + 856);
  uint64_t v197 = *(void *)(v0 + 880);
  uint64_t v23 = *(void **)(v0 + 800);
  uint64_t v24 = *(int **)(v0 + 792);
  uint64_t v226 = *(void *)(v0 + 736);
  uint64_t v25 = *(uint64_t **)(v0 + 728);
  sub_100055C04((uint64_t)v210, v20);
  sub_100055948();
  sub_100054930(v210);
  sub_100055D20(29LL, 0x80000001000AD0F0LL);
  uint64_t v179 = 2 * v223;
  *(void *)(v0 + 304) = v22;
  uint64_t v26 = sub_100055DD4();
  sub_100054F44(v197, (uint64_t)v26, type metadata accessor for AccountDataState);
  uint64_t v27 = static LogInterpolation.sensitive(_:)(v0 + 280);
  sub_100055764(v27, &qword_1000F1E60);
  sub_100055F94();
  sub_1000556B4();
  uint64_t v28 = sub_100055ED4();
  v198 = v29;
  ((void (*)(uint64_t))v29)(v28);
  sub_100054F44(v220, v21, type metadata accessor for AccountDataState);
  uint64_t v200 = *v25;
  uint64_t v202 = v25[1];
  uint64_t v208 = v25[2];
  uint64_t v214 = v25[3];
  uint64_t v206 = v25[4];
  uint64_t v211 = v25[5];
  uint64_t v30 = sub_100056254();
  uint64_t v31 = sub_10008834C((uint64_t)v30);
  uint64_t v33 = v32;
  uint64_t v34 = sub_100056254();
  uint64_t v35 = (char *)v23 + v24[5];
  uint64_t v36 = sub_100055AE0();
  uint64_t v37 = *(void (**)(char *, void *, uint64_t))(*(void *)(v36 - 8) + 16LL);
  uint64_t v38 = v35;
  uint64_t v39 = v36;
  v37(v38, v34, v36);
  sub_100055D28(v21 + v22[5], (uint64_t)v23 + v24[13]);
  sub_100055D28(v21 + v22[6], (uint64_t)v23 + v24[14]);
  sub_100055D28(v21 + v22[9], (uint64_t)v23 + v24[15]);
  sub_100055D28(v21 + v22[11], (uint64_t)v23 + v24[16]);
  uint64_t v40 = *(void *)(v21 + v22[12]);
  sub_100054CB4(v21 + v22[13], (uint64_t)v23 + v24[18], &qword_1000F02F0);
  sub_1000560C8();
  void *v23 = v31;
  v23[1] = v33;
  *(void *)((char *)v23 + v24[6]) = v200;
  *(void *)((char *)v23 + v24[7]) = v202;
  *(void *)((char *)v23 + v24[8]) = v208;
  *(void *)((char *)v23 + v24[9]) = v206;
  *((_BYTE *)v23 + v24[10]) = 8;
  *(void *)((char *)v23 + v24[11]) = v211;
  *(void *)((char *)v23 + v24[12]) = v214;
  uint64_t v41 = v24[17];
  *(void *)((char *)v23 + v41) = v40;
  *((_BYTE *)v23 + v24[19]) = v42;
  sub_100054F80(v21, type metadata accessor for AccountDataState);
  sub_100089A1C((uint64_t)v23, v226);
  if (v43 != 11)
  {
    char v213 = v43;
    uint64_t v148 = v41;
    v228 = v22;
    uint64_t v153 = (uint64_t)v23;
    uint64_t v203 = v0 + 632;
    uint64_t v47 = *(void *)(v0 + 744);
    static Log.accountsDataSync.getter(v43);
    uint64_t v48 = swift_allocObject(v191, v195 + 4 * v223, v187);
    *(_OWORD *)(v48 + 16) = xmmword_1000A4940;
    uint64_t v209 = v48;
    *(void *)(v0 + 400) = v183;
    *(void *)(v0 + 376) = v47;
    uint64_t v49 = sub_100055DDC();
    id v51 = (id)AMSLogKey(v49, v50);
    uint64_t v158 = v39;
    if (v51)
    {
      sub_1000557E0((uint64_t)v51);
      sub_10005614C();
    }

    else
    {
      uint64_t v23 = 0LL;
    }

    uint64_t v201 = *(void *)(v0 + 768);
    sub_100055C04(v0 + 376, (uint64_t)v23);
    sub_100055948();
    sub_100054930((void *)(v0 + 376));
    sub_1000557F8(41LL);
    sub_100056008();
    v66._countAndFlagsBits = 0xD00000000000001DLL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v66);
    *(void *)(v0 + 432) = &unk_1000D9C98;
    *(_BYTE *)(v0 + 40_Block_object_dispose(&a9, 8) = v213;
    sub_100055E00();
    sub_100055644(v0 + 408);
    v67._countAndFlagsBits = sub_100055A38();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v67);
    sub_100055664();
    *(void *)(v0 + 464) = v39;
    int v68 = (char *)sub_1000548F4((void *)(v0 + 440));
    v37(v68, (void *)v217, v39);
    sub_100056228();
    sub_100055644(v0 + 440);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(64LL, 5LL);
    sub_100056008();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v69);
    uint64_t v70 = *(void *)(v220 + v22[12]);
    *(void *)(v0 + 656) = &type metadata for UInt;
    *(void *)(v0 + 632) = v70;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v203);
    sub_100055644(v203);
    v71._countAndFlagsBits = sub_100055884();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v71);
    sub_100054CB4(v220 + v22[6], v201, &qword_1000F02A8);
    uint64_t v72 = sub_1000559FC();
    uint64_t v73 = sub_100055F70(v201);
    if ((_DWORD)v73 == 1)
    {
      sub_100055764(v73, &qword_1000F02A8);
      *(_OWORD *)(v0 + 504) = 0u;
      *(_OWORD *)(v0 + 520) = 0u;
    }

    else
    {
      *(void *)(v0 + 52_Block_object_dispose(&a9, 8) = v72;
      uint64_t v74 = sub_1000548F4((void *)(v0 + 504));
      sub_100055C34((uint64_t)v74);
    }

    uint64_t v75 = *(void *)(v0 + 752);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0 + 504);
    sub_100054CE0(v0 + 504, &qword_1000F1E60);
    v76._countAndFlagsBits = sub_100055B40();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v76);
    sub_100054CB4(v220 + v22[13], v75, &qword_1000F02F0);
    uint64_t v77 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    uint64_t v78 = sub_100054CA8(v75, 1LL, v77);
    uint64_t v79 = *(void *)(v0 + 752);
    if ((_DWORD)v78 == 1)
    {
      sub_100055764(v78, &qword_1000F02F0);
      *(_OWORD *)(v0 + 536) = 0u;
      *(_OWORD *)(v0 + 552) = 0u;
    }

    else
    {
      *(void *)(v0 + 560) = v77;
      uint64_t v80 = sub_100055CAC();
      sub_100054E20(v79, (uint64_t)v80, type metadata accessor for CachedServerDataSyncAttempt);
    }

    v204 = (void *)(v0 + 16);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0 + 536);
    sub_100054CE0(v0 + 536, &qword_1000F1E60);
    v81._countAndFlagsBits = sub_1000558A8();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v81);
    sub_1000560D4();
    if (v83)
    {
      *(_OWORD *)(v0 + 56_Block_object_dispose(&a9, 8) = 0u;
      *(_OWORD *)(v0 + 584) = 0u;
    }

    else
    {
      *(void *)(v0 + 592) = &unk_1000D8D98;
      *(_WORD *)(v0 + 56_Block_object_dispose(&a9, 8) = v82;
    }

    uint64_t v84 = *(void *)(v0 + 760);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0 + 568);
    sub_100054CE0(v0 + 568, &qword_1000F1E60);
    v85._countAndFlagsBits = sub_100055B5C();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v85);
    sub_100054CB4(v220 + v228[5], v84, &qword_1000F02A8);
    uint64_t v86 = sub_100055F70(v84);
    uint64_t v207 = v77;
    if ((_DWORD)v86 == 1)
    {
      sub_100055764(v86, &qword_1000F02A8);
      *(_OWORD *)(v0 + 600) = 0u;
      *(_OWORD *)(v0 + 616) = 0u;
    }

    else
    {
      *(void *)(v0 + 624) = v72;
      __int16 v87 = sub_100055E08();
      sub_100055C34((uint64_t)v87);
    }

    uint64_t v88 = *(void *)(v0 + 872);
    uint64_t v89 = *(void *)(v0 + 864);
    uint64_t v90 = *(void *)(v0 + 856);
    uint64_t v91 = *(void *)(v0 + 840);
    uint64_t v92 = *(void *)(v0 + 808);
    uint64_t v93 = sub_100055E00();
    sub_10005609C(v93, &qword_1000F1E60);
    sub_100055A04();
    sub_100055664();
    Log.default(_:)(v209);
    sub_10005547C();
    sub_100056050( v91,  v92,  v94,  v95,  v96,  v97,  v98,  v99,  v143,  v148,  v153,  v158,  3LL,  6LL,  v167,  v171,  v175,  v179,  v183,  v187,  v191,  v195,  v198);
    sub_100054F44(v220, v88, type metadata accessor for AccountDataState);
    sub_100054A6C(v88, (uint64_t)v204, &qword_1000F02B0);
    uint64_t v100 = v228;
    sub_100055D90(v88 + v228[5], v89 + v228[5]);
    sub_100055D90(v88 + v100[6], v89 + v100[6]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16LL))( v89 + *(int *)(v90 + 28),  v88 + *(int *)(v90 + 28),  v72);
    LOWORD(v91) = *(_WORD *)(v88 + v228[8]);
    sub_100055D90(v88 + v100[9], v89 + v100[9]);
    __int16 v101 = *(_WORD *)(v88 + *(int *)(v90 + 40));
    sub_100055D90(v88 + v100[11], v89 + v100[11]);
    uint64_t v102 = *(void *)(v88 + v228[12]);
    sub_100054998(v89 + v228[13], 1LL, 1LL, v207);
    sub_100054A6C((uint64_t)v204, v89, &qword_1000F02B0);
    *(_WORD *)(v89 + v228[8]) = v91;
    *(_WORD *)(v89 + *(int *)(v90 + 40)) = v101;
    *(void *)(v89 + v228[12]) = v102;
    sub_100054B84( v204,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100054BF8);
    sub_100054F80(v88, type metadata accessor for AccountDataState);
    uint64_t v103 = sub_100056164(v217, v89);
    if (v89)
    {
      uint64_t v140 = *(void *)(v0 + 888);
      uint64_t v141 = *(void *)(v0 + 880);
      uint64_t v142 = *(void *)(v0 + 800);
      sub_100054F80(*(void *)(v0 + 864), type metadata accessor for AccountDataState);
      sub_100054F80(v142, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
      sub_100054F80(v141, type metadata accessor for AccountDataState);
      uint64_t v10 = v140;
      uint64_t v11 = type metadata accessor for AccountDataState;
      goto LABEL_34;
    }

    uint64_t v40 = v0 + 664;
    uint64_t v104 = *(void *)(v0 + 744);
    uint64_t v105 = static Log.accountsDataSync.getter(v103);
    uint64_t v113 = sub_10005612C( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v145,  v150,  v155,  v160,  v164,  v166,  v169,  v173,  v177,  v181,  v185,  v189,  v193);
    *(_OWORD *)(v113 + 16) = v165;
    *(void *)(v0 + 68_Block_object_dispose(&a9, 8) = v186;
    *(void *)(v0 + 664) = v104;
    uint64_t v114 = sub_100055DDC();
    id v116 = (id)AMSLogKey(v114, v115);
    if (v116)
    {
      sub_1000557E0((uint64_t)v116);
      sub_10005614C();
    }

    else
    {
      uint64_t v100 = 0LL;
    }

    uint64_t v37 = *(void (**)(char *, void *, uint64_t))(v0 + 864);
    uint64_t v130 = *(void *)(v0 + 856);
    uint64_t v131 = *(void *)(v0 + 832);
    uint64_t v205 = *(void *)(v0 + 808);
    sub_100055C04(v0 + 664, (uint64_t)v100);
    sub_100055948();
    sub_100054930((void *)(v0 + 664));
    sub_100055620(0xD00000000000001ELL);
    *(void *)(v0 + 496) = v130;
    uint64_t v132 = sub_100055E08();
    sub_100054F44((uint64_t)v37, (uint64_t)v132, type metadata accessor for AccountDataState);
    uint64_t v133 = static LogInterpolation.sensitive(_:)(v0 + 472);
    sub_10005609C(v133, &qword_1000F1E60);
    sub_100055E50();
    sub_10005547C();
    sub_100056050( v131,  v205,  v134,  v135,  v136,  v137,  v138,  v139,  v146,  v151,  v156,  v161,  v165,  *((uint64_t *)&v165 + 1),  v170,  v174,  v178,  v182,  v186,  v190,  v194,  v196,  v199);
    sub_10004DE04();
    sub_100054F80(*(void *)(v0 + 864), type metadata accessor for AccountDataState);
    uint64_t v41 = v147;
    uint64_t v23 = (void *)v152;
  }

  if (*(void *)((char *)v23 + v41))
  {
    sub_10005579C();
    uint64_t v212 = v45;
    uint64_t v215 = v44;
    uint64_t v218 = *(void *)(v0 + 776);
    uint64_t v221 = *(void *)(v0 + 768);
    uint64_t v224 = *(void *)(v0 + 760);
    uint64_t v227 = *(void *)(v0 + 752);
    sub_10005564C(*(void *)(v0 + 744));
    sub_100054F80((uint64_t)v37, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
    sub_100055E10(v40);
    sub_100055E10(v41);
    sub_10005562C();
    sub_10005575C();
    sub_100055870();
    sub_1000560A4();
    sub_10005566C();
    sub_100055558();
    sub_100056048();
    swift_task_dealloc(v212);
    sub_100055988();
    swift_task_dealloc(v215);
    swift_task_dealloc(v218);
    swift_task_dealloc(v221);
    swift_task_dealloc(v224);
    swift_task_dealloc(v227);
    uint64_t v46 = (uint64_t (*)(void))sub_100056158();
    return v46();
  }

  uint64_t v52 = *(void **)(v0 + 744);
  uint64_t v53 = static Log.accountsDataSync.getter(v43);
  uint64_t v61 = sub_10005612C( v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v143,  v147,  v152,  v157,  v162,  *((uint64_t *)&v162 + 1),  v167,  v171,  v175,  v179,  v183,  v187,  v191);
  *(_OWORD *)(v61 + 16) = v163;
  *(void *)(v0 + 336) = v184;
  *(void *)(v0 + 312) = v52;
  uint64_t v62 = sub_100055830();
  id v64 = (id)AMSLogKey(v62, v63);
  if (v64)
  {
    uint64_t v65 = sub_1000558F8((uint64_t)v64);
  }

  else
  {
    uint64_t v65 = 0LL;
  }

  uint64_t v117 = *(void *)(v0 + 856);
  uint64_t v118 = *(void *)(v0 + 824);
  uint64_t v119 = *(void *)(v0 + 808);
  sub_100055C04(v0 + 312, v65);
  sub_100055948();
  sub_100054930((void *)(v0 + 312));
  sub_100055620(0xD000000000000020LL);
  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v117;
  uint64_t v120 = sub_100055E08();
  sub_100054F44(v220, (uint64_t)v120, type metadata accessor for AccountDataState);
  uint64_t v121 = static LogInterpolation.sensitive(_:)(v0 + 344);
  sub_10005609C(v121, &qword_1000F1E60);
  Log.default(_:)(v61);
  sub_10005547C();
  sub_100056050( v118,  v119,  v122,  v123,  v124,  v125,  v126,  v127,  v144,  v149,  v154,  v159,  v163,  *((uint64_t *)&v163 + 1),  v168,  v172,  v176,  v180,  v184,  v188,  v192,  v195,  v198);
  sub_100055CB4(OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_notifier);
  uint64_t v128 = (void *)swift_task_alloc(dword_1000F0124);
  *(void *)(v0 + 904) = v128;
  *uint64_t v128 = v0;
  v128[1] = sub_100050CB4;
  return sub_100051640(v217, *(void *)(v0 + 880));
}

uint64_t sub_100050CB4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (*v0)[112];
  uint64_t v3 = (*v0)[93];
  uint64_t v6 = *v0;
  swift_task_dealloc((*v0)[113]);
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_1000F012C);
  v1[114] = (uint64_t)v4;
  *uint64_t v4 = v6;
  v4[1] = (uint64_t *)sub_100050D38;
  return sub_100051F7C(v3 + v2, v1[110], v1[92]);
}

uint64_t sub_100050D38()
{
  return sub_1000552CC();
}

uint64_t sub_100050D70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v33 = v23;
  uint64_t v34 = v22;
  uint64_t v35 = v18[97];
  uint64_t v36 = v18[96];
  uint64_t v37 = v18[95];
  uint64_t v38 = v18[94];
  sub_10005564C(v18[93]);
  sub_100054F80(v21, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  sub_100055E10(v20);
  sub_100055E10(v19);
  sub_10005562C();
  sub_10005575C();
  sub_100055870();
  sub_1000560A4();
  sub_10005566C();
  sub_100055558();
  sub_100056048();
  swift_task_dealloc(v33);
  sub_100055988();
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  sub_100056158();
  sub_100055F34();
  return v24(v24, v25, v26, v27, v28, v29, v30, v31, a9, v33, v34, v35, v36, v37, v38, a16, a17, a18);
}

uint64_t sub_100050E48(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 480) = a5;
  *(void *)(v6 + 48_Block_object_dispose(&a9, 8) = v5;
  *(_BYTE *)(v6 + 569) = a3;
  *(void *)(v6 + 464) = a2;
  *(void *)(v6 + 472) = a4;
  *(_BYTE *)(v6 + 56_Block_object_dispose(&a9, 8) = a1;
  uint64_t v7 = sub_100055F18();
  *(void *)(v6 + 496) = v7;
  *(void *)(v6 + 504) = sub_1000552D8(*(void *)(v7 - 8));
  *(void *)(v6 + 512) = sub_1000552FC();
  uint64_t v8 = sub_100055F10();
  *(void *)(v6 + 520) = sub_100055374(*(void *)(v8 - 8));
  uint64_t v9 = sub_100055D18();
  *(void *)(v6 + 52_Block_object_dispose(&a9, 8) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 536) = v10;
  *(void *)(v6 + 544) = sub_1000552D8(v10);
  *(void *)(v6 + 552) = sub_1000552FC();
  sub_10005570C();
  return sub_100055354();
}

uint64_t sub_100050ECC(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 488);
  static Log.accountsDataSync.getter(a1);
  uint64_t v3 = sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100055858();
  sub_1000561A4();
  uint64_t v68 = v6;
  uint64_t v7 = (v5 & ~v4) + 3 * v6;
  uint64_t v8 = v4 | 7;
  uint64_t v9 = swift_allocObject(v3, v7, v4 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1000A4930;
  uint64_t v10 = sub_100054418();
  *(void *)(v1 + 400) = v10;
  *(void *)(v1 + 376) = v2;
  uint64_t v11 = sub_100055DDC();
  id v13 = (id)AMSLogKey(v11, v12);
  uint64_t v59 = v3;
  uint64_t v58 = v8;
  uint64_t v57 = v10;
  Swift::String v67 = (void *)(v1 + 16);
  uint64_t v63 = v9;
  if (v13)
  {
    uint64_t v14 = sub_1000557E0((uint64_t)v13);
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  uint64_t v17 = *(void *)(v1 + 504);
  uint64_t v18 = *(void *)(v1 + 512);
  uint64_t v19 = *(int **)(v1 + 496);
  uint64_t v69 = *(void *)(v1 + 488);
  __int16 v60 = *(unsigned __int8 *)(v1 + 569);
  uint64_t v61 = *(void *)(v1 + 464);
  char v20 = *(_BYTE *)(v1 + 568);
  char v62 = v20;
  static LogInterpolation.prefix(_:_:)(v1 + 376, v14, v16);
  sub_100055694();
  sub_100055F20();
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(17LL, 2LL);
  v21._countAndFlagsBits = 0x676E69676E616843LL;
  v21._object = (void *)0xE900000000000020LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v21);
  *(void *)(v1 + 272) = &unk_1000D8C00;
  *(_BYTE *)(v1 + 24_Block_object_dispose(&a9, 8) = v20 & 1;
  sub_100056138();
  sub_100055D80(v1 + 248);
  v22._countAndFlagsBits = 544175136LL;
  v22._object = (void *)0xE400000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v22);
  *(void *)(v1 + 304) = &type metadata for Bool;
  *(_BYTE *)(v1 + 280) = v60;
  sub_100056138();
  sub_100054CE0(v1 + 280, &qword_1000F1E60);
  v23._countAndFlagsBits = 1919903264LL;
  v23._object = (void *)0xE400000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v23);
  sub_100055664();
  uint64_t v24 = sub_100055AE0();
  *(void *)(v1 + 336) = v24;
  uint64_t v25 = sub_100056210();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))(v25, v61, v24);
  sub_10005621C();
  sub_100055940(v68);
  Log.default(_:)(v63);
  sub_100055C88();
  uint64_t v26 = sub_100055ED4();
  uint64_t v65 = v27;
  ((void (*)(uint64_t))v27)(v26);
  uint64_t v28 = v69 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  sub_100055BEC(v69 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, v1 + 440);
  uint64_t v66 = v28;
  uint64_t v29 = sub_100055DE4();
  sub_100054F44(v29, v30, v31);
  if ((v62 & 1) != 0) {
    char v32 = 2;
  }
  else {
    char v32 = v60;
  }
  if ((v62 & 1) != 0) {
    __int16 v33 = v60;
  }
  else {
    __int16 v33 = 2;
  }
  unsigned int v34 = *(unsigned __int16 *)(v17 + v19[8]);
  int v35 = *(_WORD *)(v17 + v19[8]);
  unsigned int v36 = v34 >> 8;
  if ((v62 & 1) != 0) {
    LOWORD(v36) = v60;
  }
  else {
    LOBYTE(v34) = v60;
  }
  if (v35 == 3) {
    unsigned __int8 v37 = v32;
  }
  else {
    unsigned __int8 v37 = v34;
  }
  if (v35 == 3) {
    __int16 v38 = v33;
  }
  else {
    __int16 v38 = v36;
  }
  sub_100054A6C(v17, (uint64_t)v67, &qword_1000F02B0);
  sub_100055800(v17 + v19[5], v18 + v19[5]);
  sub_100055800(v17 + v19[6], v18 + v19[6]);
  uint64_t v39 = v17 + v19[7];
  sub_1000559FC();
  uint64_t v40 = sub_100056080();
  v41(v40, v39);
  sub_100055800(v17 + v19[9], v18 + v19[9]);
  LOWORD(v39) = *(_WORD *)(v17 + v19[10]);
  sub_100055800(v17 + v19[11], v18 + v19[11]);
  uint64_t v42 = *(void *)(v17 + v19[12]);
  sub_100054CB4(v17 + v19[13], v18 + v19[13], &qword_1000F02F0);
  sub_100054A6C((uint64_t)v67, v18, &qword_1000F02B0);
  *(_WORD *)(v18 + v19[8]) = v37 | (unsigned __int16)(v38 << 8);
  *(_WORD *)(v18 + v19[10]) = v39;
  *(void *)(v18 + v19[12]) = v42;
  sub_100054B84( v67,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100054BF8);
  sub_100054F80(v17, type metadata accessor for AccountDataState);
  uint64_t v43 = v69 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  sub_100056164(v69 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID, v18);
  if (v1 == -16)
  {
    sub_10004DE04();
    uint64_t v46 = *(void *)(v1 + 488);
    static Log.accountsDataSync.getter(v44);
    uint64_t v47 = swift_allocObject(v59, v7, v58);
    *(_OWORD *)(v47 + 16) = xmmword_1000A4930;
    *(void *)(v1 + 432) = v57;
    *(void *)(v1 + 40_Block_object_dispose(&a9, 8) = v46;
    uint64_t v48 = sub_100055E18();
    id v50 = (id)AMSLogKey(v48, v49);
    if (v50)
    {
      id v51 = v50;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    }

    else
    {
      uint64_t v52 = 0LL;
    }

    uint64_t v53 = *(void *)(v1 + 544);
    uint64_t v64 = *(void *)(v1 + 528);
    uint64_t v54 = *(void *)(v1 + 496);
    sub_100055E38(v1 + 408, v52);
    sub_100055868();
    sub_100054930((void *)(v1 + 408));
    sub_100055D20(31LL, 0x80000001000AD0D0LL);
    *(void *)(v1 + 36_Block_object_dispose(&a9, 8) = v54;
    uint64_t v55 = sub_1000548F4((void *)(v1 + 344));
    sub_100054F44(v66, (uint64_t)v55, type metadata accessor for AccountDataState);
    static LogInterpolation.sensitive(_:)(v1 + 344);
    sub_100054CE0(v1 + 344, &qword_1000F1E60);
    Log.default(_:)(v47);
    sub_100055C88();
    v65(v53, v64);
    sub_100055CB4(OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_notifier);
    uint64_t v56 = (void *)swift_task_alloc(dword_1000F0124);
    *(void *)(v1 + 560) = v56;
    *uint64_t v56 = v1;
    v56[1] = sub_1000514B0;
    return sub_100051640(v43, *(void *)(v1 + 512));
  }

  else
  {
    sub_100054F80(*(void *)(v1 + 512), type metadata accessor for AccountDataState);
    sub_1000555BC();
    sub_100055558();
    sub_10005562C();
    sub_10005575C();
    sub_100055870();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_1000514B0()
{
  return sub_1000552CC();
}

uint64_t sub_1000514E8()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return v1();
}

uint64_t sub_100051554(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2
                                                                   + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_store
                                                                   + 8)
                                                       + 16LL))( a2,  a1);
  if (!v3)
  {
    uint64_t v6 = v2 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
    swift_beginAccess(v2 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, v7, 33LL, 0LL);
    sub_100054B40(a2, v6);
    return swift_endAccess(v7);
  }

  return result;
}

uint64_t sub_1000515E8(void *a1)
{
  uint64_t v2 = sub_100054838(a1, a1[3]);
  uint64_t v3 = sub_10008834C((uint64_t)v2);
  return sub_100055778();
}

uint64_t sub_100051640(uint64_t a1, uint64_t a2)
{
  v3[165] = v2;
  v3[164] = a2;
  v3[163] = a1;
  uint64_t v4 = sub_100055D18();
  v3[166] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[167] = v5;
  v3[168] = sub_1000552D8(v5);
  v3[169] = sub_1000552FC();
  v3[170] = sub_1000552FC();
  v3[171] = sub_1000552FC();
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
  v3[172] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[173] = v7;
  v3[174] = sub_100055374(v7);
  sub_10005570C();
  return sub_100055354();
}

uint64_t sub_1000516C0()
{
  uint64_t v2 = *(void *)(v0 + 1392);
  uint64_t v3 = *(void *)(v0 + 1384);
  uint64_t v4 = *(void *)(v0 + 1376);
  uint64_t v5 = (uint64_t *)(*(void *)(v0 + 1320) + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountFinder);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  AccountIdentity.dsid.getter(v8);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v6, v7);
  *(void *)(v0 + 1400) = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v9)
  {
    id v11 = sub_100055E48(v10, "accountStore");
    *(void *)(v0 + 140_Block_object_dispose(&a9, 8) = v11;
    if (v11)
    {
      uint64_t v12 = v11;
      sub_100055AB8(*(void *)(v0 + 1312), v0 + 80);
      sub_100055F18();
      sub_10005AA98();
      sub_100055AB8(v0 + 776, v0 + 544);
      uint64_t v13 = sub_100055A7C();
      if (!v14)
      {
        memcpy((void *)(v0 + 312), (const void *)(v0 + 544), 0xE8uLL);
        uint64_t v45 = sub_10006486C();
        sub_1000546B8((uint64_t)v45, v9);
        uint64_t v46 = *(void *)(v0 + 312);
        uint64_t v47 = *(void *)(v0 + 320);
        sub_10005568C();
        sub_100054770(v46, v47, v9);
        sub_100055694();
        uint64_t v48 = *(void *)(v0 + 368);
        uint64_t v49 = *(void *)(v0 + 376);
        sub_10005568C();
        sub_100054B84( (void *)(v0 + 776),  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000549BC);
        sub_1000547B4(v48, v49, v9);
        sub_100055694();
        id v50 = objc_msgSend(v12, "ams_saveAccount:", v9);
        *(void *)(v0 + 1416) = v50;
        *(void *)(v0 + 56) = v0 + 1432;
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_100051CDC;
        *(void *)(v0 + 1040) = swift_continuation_init(v0 + 16, 1LL);
        *(void *)(v0 + 100_Block_object_dispose(&a9, 8) = _NSConcreteStackBlock;
        *(void *)(v0 + 1016) = 0x40000000LL;
        *(void *)(v0 + 1024) = sub_100051F40;
        *(void *)(v0 + 1032) = &unk_1000D88E8;
        [v50 resultWithCompletion:v0 + 1008];
        return swift_continuation_await(v0 + 16);
      }

      uint64_t v15 = *(void *)(v0 + 1320);
      static Log.accountsDataSync.getter(v13);
      uint64_t v16 = sub_10005489C((uint64_t *)&unk_1000F0290);
      sub_100055858();
      sub_1000559CC();
      uint64_t v19 = swift_allocObject(v16, v17, v18);
      *(_OWORD *)(v19 + 16) = xmmword_1000A4930;
      *(void *)(v0 + 1136) = sub_100054418();
      *(void *)(v0 + 1112) = v15;
      uint64_t v20 = swift_retain(v15);
      id v22 = (id)AMSLogKey(v20, v21);
      if (v22)
      {
        Swift::String v23 = v22;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v26 = v25;
      }

      else
      {
        uint64_t v24 = 0LL;
        uint64_t v26 = 0LL;
      }

      uint64_t v61 = *(void *)(v0 + 1304);
      static LogInterpolation.prefix(_:_:)(v0 + 1112, v24, v26);
      swift_bridgeObjectRelease(v26);
      sub_100055F20();
      sub_100055F28();
      sub_100055D20(59LL, v62);
      uint64_t v63 = sub_100055AE0();
      *(void *)(v0 + 116_Block_object_dispose(&a9, 8) = v63;
      uint64_t v64 = sub_100055DD4();
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16LL))(v64, v61, v63);
      uint64_t v65 = sub_100055928();
      sub_100055764(v65, &qword_1000F1E60);
      Log.default(_:)(v19);
      sub_100055948();

      uint64_t v66 = sub_100055ED4();
      v68(v66, v67);
    }

    else
    {
      uint64_t v35 = *(void *)(v0 + 1320);
      static Log.accountsDataSync.getter(0LL);
      uint64_t v36 = sub_10005489C((uint64_t *)&unk_1000F0290);
      sub_100055858();
      sub_100056190();
      uint64_t v39 = swift_allocObject(v36, (v38 & ~v37) + 3 * v1, v37 | 7);
      *(_OWORD *)(v39 + 16) = xmmword_1000A4930;
      *(void *)(v0 + 1072) = sub_100054418();
      *(void *)(v0 + 104_Block_object_dispose(&a9, 8) = v35;
      uint64_t v40 = swift_retain(v35);
      id v42 = (id)AMSLogKey(v40, v41);
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      }

      else
      {
        uint64_t v44 = 0LL;
      }

      sub_100055E38(v0 + 1048, v44);
      sub_100055868();
      sub_100054930((void *)(v0 + 1048));
      uint64_t v55 = sub_100055620(0xD00000000000004DLL);
      id v56 = sub_100055E48(v55, "identifier");
      if (v56)
      {
        id v57 = v56;
        *(void *)(v0 + 1104) = sub_100054B08(0LL, &qword_1000F02D8, &OBJC_CLASS___NSString_ptr);
        *(void *)(v0 + 1080) = v57;
      }

      else
      {
        *(_OWORD *)(v0 + 1080) = 0u;
        *(_OWORD *)(v0 + 1096) = 0u;
      }

      uint64_t v58 = *(void *)(v0 + 1360);
      uint64_t v59 = *(void *)(v0 + 1336);
      uint64_t v60 = *(void *)(v0 + 1328);
      static LogInterpolation.traceableSensitive(_:)(v0 + 1080);
      sub_100054CE0(v0 + 1080, &qword_1000F1E60);
      ((void (*)(uint64_t))Log.fault(_:))(v39);
      sub_100055C88();

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
    }
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 1320);
    static Log.accountsDataSync.getter(v10);
    sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v28 = *(void *)(*(void *)(sub_100055858() - 8) + 72LL);
    sub_100055F88();
    uint64_t v30 = sub_100055B34(v4 + 3 * v28, v29);
    *(_OWORD *)(v30 + 16) = xmmword_1000A4930;
    *(void *)(v0 + 1264) = sub_100054418();
    *(void *)(v0 + 1240) = v27;
    uint64_t v31 = swift_retain(v27);
    id v33 = (id)AMSLogKey(v31, v32);
    if (v33)
    {
      unsigned int v34 = v33;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    }

    else
    {
      sub_1000561F8();
    }

    uint64_t v52 = *(void *)(v0 + 1352);
    uint64_t v69 = *(void *)(v0 + 1336);
    uint64_t v70 = *(void *)(v0 + 1328);
    sub_100055960(v0 + 1240);
    sub_100055694();
    sub_100054930((void *)(v0 + 1240));
    sub_100055620(0xD000000000000044LL);
    *(void *)(v0 + 1232) = sub_100055AE0();
    sub_100055DD4();
    sub_100055FE4();
    v53();
    uint64_t v54 = sub_100055928();
    sub_100055764(v54, &qword_1000F1E60);
    Log.default(_:)(v30);
    sub_10005547C();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v52, v70);
  }

  sub_100055674();
  sub_1000555BC();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  return sub_100055728(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100051CDC()
{
  *(void *)(v0 + 1424) = v1;
  return sub_1000552CC();
}

uint64_t sub_100051D20()
{
  uint64_t v1 = *(void **)(v0 + 1416);
  uint64_t v2 = *(void **)(v0 + 1400);

  sub_100055674();
  sub_1000555BC();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  return sub_100055794(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100051D78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v48 = v18 + 159;
  uint64_t v19 = (void *)v18[178];
  uint64_t v20 = (void *)v18[177];
  uint64_t v21 = v18[165];
  swift_willThrow();

  sub_100055AE8();
  uint64_t v22 = sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100055858();
  sub_1000559CC();
  uint64_t v25 = swift_allocObject(v22, v23, v24);
  *(_OWORD *)(v25 + 16) = xmmword_1000A4930;
  v18[162] = sub_100054418();
  v18[159] = v21;
  uint64_t v26 = sub_100055E18();
  id v28 = (id)AMSLogKey(v26, v27);
  if (v28)
  {
    sub_1000558F8((uint64_t)v28);
  }

  else
  {
    sub_1000561F8();
  }

  uint64_t v29 = v18[178];
  uint64_t v44 = (void *)v18[175];
  uint64_t v45 = (void *)v18[176];
  uint64_t v46 = v18[167];
  uint64_t v47 = v18[166];
  sub_100055960((uint64_t)v48);
  sub_100055694();
  sub_100054930(v48);
  sub_100055D20(31LL, 0x80000001000AD0B0LL);
  uint64_t v30 = (void *)_convertErrorToNSError(_:)(v29);
  id v31 = (id)AMSLogableError(v30);

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  v18[150] = &type metadata for String;
  v18[147] = v32;
  v18[148] = v34;
  static LogInterpolation.safe(_:)(v18 + 147);
  sub_100054CE0((uint64_t)(v18 + 147), &qword_1000F1E60);
  Log.error(_:)(v25);

  swift_errorRelease(v29);
  sub_10005547C();
  sub_1000561B8(v46);
  sub_100055674();
  sub_1000555BC();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_100055F34();
  return v35(v35, v36, v37, v38, v39, v40, v41, v42, a9, v44, v45, v46, v47, v48, a15, a16, a17, a18);
}

uint64_t sub_100051F40(uint64_t a1, char a2, void *a3)
{
  if (a3) {
    return sub_100070E60(*(void *)(a1 + 32), a3);
  }
  else {
    return sub_100070EB4(*(void *)(a1 + 32), a2);
  }
}

uint64_t sub_100051F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[307] = v3;
  v4[306] = a3;
  v4[305] = a2;
  v4[304] = a1;
  v4[308] = *v3;
  uint64_t v5 = sub_100055F10();
  v4[309] = sub_100055374(*(void *)(v5 - 8));
  uint64_t v6 = sub_100055D18();
  v4[310] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[311] = v7;
  v4[312] = sub_1000552D8(v7);
  v4[313] = sub_1000552FC();
  v4[314] = sub_1000552FC();
  v4[315] = sub_1000552FC();
  v4[316] = sub_1000552FC();
  v4[317] = sub_1000552FC();
  sub_10005570C();
  return sub_100055354();
}

uint64_t sub_10005200C()
{
  uint64_t v32 = (void *)(v0 + 1008);
  id v31 = (const void *)(v0 + 1240);
  uint64_t v2 = *(void **)(v0 + 2456);
  static Log.accountsDataSync.getter(v3);
  uint64_t v4 = sub_10005489C((uint64_t *)&unk_1000F0290);
  *(void *)(v0 + 2544) = v4;
  uint64_t v5 = *(void *)(sub_100055858() - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  *(void *)(v0 + 2552) = v6;
  *(_DWORD *)(v0 + 2704) = *(_DWORD *)(v5 + 80);
  sub_100055F88();
  uint64_t v8 = swift_allocObject(v4, v1 + 3 * v6, v7 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_1000A4930;
  uint64_t v9 = sub_100054418();
  *(void *)(v0 + 2560) = v9;
  *(void *)(v0 + 176_Block_object_dispose(&a9, 8) = v9;
  *(void *)(v0 + 1744) = v2;
  uint64_t v10 = sub_10005599C();
  id v12 = (id)AMSLogKey(v10, v11);
  if (v12)
  {
    uint64_t v13 = sub_100055E68((uint64_t)v12);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = *(void *)(v0 + 2536);
  uint64_t v29 = *(void *)(v0 + 2488);
  uint64_t v30 = *(void *)(v0 + 2480);
  uint64_t v15 = *(void *)(v0 + 2440);
  sub_100055C04(v0 + 1744, v13);
  sub_100055948();
  sub_100054930((void *)(v0 + 1744));
  sub_100055F28();
  sub_100055D20(63LL, v16);
  uint64_t v17 = sub_100055AE0();
  *(void *)(v0 + 256_Block_object_dispose(&a9, 8) = v17;
  *(void *)(v0 + 1800) = v17;
  sub_100055DD4();
  sub_100055FE4();
  *(void *)(v0 + 2576) = v18;
  sub_100055FD0(v19, v18);
  uint64_t v20 = sub_100055928();
  sub_100055764(v20, &qword_1000F1E60);
  Log.default(_:)(v8);
  sub_1000556B4();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  *(void *)(v0 + 2584) = v21;
  v21(v14, v30);
  sub_100054B08(0LL, &qword_1000F02B8, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  *(void *)(v0 + 2592) = sub_100053F48(0x644972657375LL, 0xE600000000000000LL, 1, 0);
  sub_100054A6C(v15, v0 + 312, &qword_1000F02B0);
  uint64_t v22 = sub_100055F18();
  *(void *)(v0 + 2600) = v22;
  *(_DWORD *)(v0 + 270_Block_object_dispose(&a9, 8) = *(_DWORD *)(v22 + 32);
  *(_DWORD *)(v0 + 2712) = *(_DWORD *)(v22 + 40);
  sub_10005AA98();
  sub_100054A6C((uint64_t)v32, (uint64_t)v31, &qword_1000F02B0);
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (sub_1000549A4((uint64_t)v31) != 1)
  {
    memcpy((void *)(v0 + 80), v31, 0xE8uLL);
    sub_100054A6C(v0 + 128, v0 + 2408, &qword_1000F02D0);
    sub_100054A98((void *)(v0 + 2408));
    sub_100054B84( v32,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000549BC);
    uint64_t v24 = sub_100055DE4();
    sub_100054A6C(v24, v25, &qword_1000F02D0);
    if (*(void *)(v0 + 2424)) {
      uint64_t v23 = *(void **)(v0 + 2424);
    }
  }

  *(void *)(v0 + 260_Block_object_dispose(&a9, 8) = v23;
  *(void *)(v0 + 2616) = *(void *)(*(void *)(v0 + 2456)
                                     + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag);
  uint64_t v26 = (void *)swift_task_alloc(dword_1000F02C4);
  *(void *)(v0 + 2624) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1000522FC;
  sub_100055F34();
  return sub_100053FC0(v27);
}

uint64_t sub_1000522FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2624LL);
  *(void *)(*(void *)v1 + 2632LL) = a1;
  swift_task_dealloc(v2);
  sub_10005570C();
  return sub_1000552CC();
}

#error "1000524E0: call analysis failed (funcsize=272)"
uint64_t sub_1000527B0()
{
  void *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  sub_1000557E8();
  *(_BYTE *)(v2 + 2392) = v1;
  *(void *)(v2 + 2384) = v3;
  *(void *)(v2 + 2376) = v0;
  uint64_t v4 = *(void *)(v2 + 2680);
  uint64_t *v5 = *v0;
  *(_BYTE *)(v2 + 2717) = v1;
  swift_task_dealloc(v4);
  sub_10005570C();
  return sub_1000552CC();
}

void sub_100052800(uint64_t a1)
{
  if ((*(_BYTE *)(v1 + 2717) & 1) == 0)
  {
    uint64_t v157 = (void *)(v1 + 1904);
    uint64_t v2 = *(void *)(v1 + 2384);
    uint64_t v3 = *(void *)(v1 + 2560);
    uint64_t v4 = *(unsigned __int8 *)(v1 + 2704);
    uint64_t v5 = *(void **)(v1 + 2544);
    uint64_t v6 = *(void *)(v1 + 2456);
    uint64_t v7 = (v4 + 32) & ~v4;
    uint64_t v8 = v7 + 3LL * *(void *)(v1 + 2552);
    uint64_t v9 = v4 | 7;
    static Log.accountsDataSync.getter(a1);
    uint64_t v10 = swift_allocObject(v5, v8, v9);
    *(_OWORD *)(v10 + 16) = xmmword_1000A4930;
    *(void *)(v1 + 192_Block_object_dispose(&a9, 8) = v3;
    *(void *)(v1 + 1904) = v6;
    uint64_t v11 = sub_10005599C();
    id v13 = (id)AMSLogKey(v11, v12);
    if (v13)
    {
      uint64_t v14 = sub_1000557E0((uint64_t)v13);
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    uint64_t v29 = v10 + v7;
    uint64_t v137 = *(void *)(v1 + 2672);
    uint64_t v30 = *(void *)(v1 + 2664);
    uint64_t v167 = v10;
    uint64_t v179 = *(void *)(v1 + 2592);
    uint64_t v182 = *(void *)(v1 + 2616);
    *(void *)&__int128 v151 = *(void *)(v1 + 2568);
    uint64_t v31 = *(void *)(v1 + 2552);
    __int128 v162 = *(void (**)(void *, uint64_t, void))(v1 + 2576);
    uint64_t v165 = *(void *)(v1 + 2520);
    uint64_t v172 = *(void *)(v1 + 2480);
    uint64_t v177 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 2584);
    uint64_t v155 = *(void *)(v1 + 2432);
    sub_100055E38((uint64_t)v157, v14);
    sub_100055868();
    sub_100054930(v157);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(62LL, 2LL);
    sub_1000558EC(0xD000000000000022LL, (uint64_t)"Sunsetting metrics identifier for ");
    *(void *)(v1 + 1960) = &type metadata for String;
    *(void *)(v1 + 1936) = v30;
    *(void *)(v1 + 1944) = v137;
    sub_10005568C();
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v1 + 1936);
    sub_1000561D8(v1 + 1936);
    v32._countAndFlagsBits = sub_100056014();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v32);
    *(void *)(v1 + 2120) = &type metadata for Double;
    *(void *)(v1 + 2096) = v2;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v1 + 2096);
    sub_1000561D8(v1 + 2096);
    sub_100055A10(0x202Eu);
    sub_100055664();
    *(void *)(v1 + 2024) = v151;
    uint64_t v33 = sub_100055E08();
    uint64_t v34 = (void *)v155;
    v162(v33, v155, v151);
    static LogInterpolation.traceableSensitive(_:)(v1 + 2000);
    sub_1000561D8(v1 + 2000);
    sub_100055E50();
    uint64_t v35 = sub_10005547C();
    sub_100055C0C( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v120,  (uint64_t)v124,  v127,  v130,  v133,  v137,  v2,  v144,  v147,  v1 + 2096,  v151,  *((uint64_t *)&v151 + 1),  v155,  v29 + v31,  (uint64_t)v162,  v165,  v167,  v172,  v177);
    uint64_t v43 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    NSString v44 = sub_10005576C();
    AccountIdentity.amsAccountIdentity()(v44);
    Class isa = sub_100055CDC().super.isa;
    id v46 =  [v43 _applyExpiryForKey:v179 inNamespace:v44 accountID:v34 bag:v182 at:isa consumerIDResetInterval:*(double *)&v2];
    *(void *)(v1 + 268_Block_object_dispose(&a9, 8) = v46;

    *(void *)(v1 + 56) = v1 + 2416;
    *(void *)(v1 + 1736) = sub_1000559BC((uint64_t)sub_100053270);
    *(void *)(v1 + 1704) = _NSConcreteStackBlock;
    *(void *)(v1 + 1712) = 0x40000000LL;
    *(void *)(v1 + 1720) = sub_100054330;
    *(void *)(v1 + 172_Block_object_dispose(&a9, 8) = &unk_1000D88A0;
    [v46 resultWithCompletion:v1 + 1704];
    swift_continuation_await(v1 + 16);
    return;
  }

  uint64_t v161 = (void *)(v1 + 776);
  uint64_t v164 = v1 + 544;
  uint64_t v158 = v1 + 1472;
  uint64_t v183 = (void *)(v1 + 1808);
  uint64_t v184 = v1 + 1840;
  uint64_t v185 = v1 + 1872;
  sub_1000557C8();
  uint64_t v154 = v1 + 2256;
  uint64_t v149 = (void *)(v1 + 2320);
  *(void *)&__int128 v151 = v1 + 2288;
  uint64_t v15 = *(void *)(v1 + 2560);
  uint64_t v16 = *(void **)(v1 + 2544);
  uint64_t v17 = *(void *)(v1 + 2456);
  uint64_t v18 = *(unsigned __int8 *)(v1 + 2704) | 7LL;
  static Log.accountsDataSync.getter(v19);
  uint64_t v20 = sub_100055DE4();
  uint64_t v22 = swift_allocObject(v20, v21, v18);
  __int128 v141 = xmmword_1000A4930;
  *(_OWORD *)(v22 + 16) = xmmword_1000A4930;
  uint64_t v181 = v22;
  *(void *)(v1 + 1832) = v15;
  *(void *)(v1 + 180_Block_object_dispose(&a9, 8) = v17;
  uint64_t v23 = sub_100055830();
  id v25 = (id)AMSLogKey(v23, v24);
  if (v25)
  {
    uint64_t v26 = sub_1000557E0((uint64_t)v25);
    uint64_t v28 = v27;
  }

  else
  {
    uint64_t v26 = 0LL;
    uint64_t v28 = 0LL;
  }

  uint64_t v47 = *(void *)(v1 + 2672);
  uint64_t v48 = *(void *)(v1 + 2664);
  uint64_t v49 = *(void *)(v1 + 2568);
  uint64_t v173 = *(void (**)(void *, uint64_t, uint64_t))(v1 + 2576);
  uint64_t v178 = *(void **)(v1 + 2512);
  uint64_t v168 = *(void *)(v1 + 2432);
  static LogInterpolation.prefix(_:_:)(v183, v26, v28);
  swift_bridgeObjectRelease(v28);
  sub_100054930(v183);
  sub_1000557F8(92LL);
  sub_1000558EC(0xD000000000000029LL, (uint64_t)"Failed sunsetting metrics identifier for ");
  *(void *)(v1 + 1864) = &type metadata for String;
  *(void *)(v1 + 1840) = v48;
  *(void *)(v1 + 184_Block_object_dispose(&a9, 8) = v47;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v184);
  sub_100054CE0(v184, &qword_1000F1E60);
  sub_1000558EC(0xD000000000000033LL, (uint64_t)", could not get consumerIdResetInterval. identity =");
  sub_100055664();
  *(void *)(v1 + 1896) = v49;
  id v50 = sub_100055CAC();
  v173(v50, v168, v49);
  sub_100055838();
  sub_100054CE0(v185, &qword_1000F1E60);
  id v51 = v178;
  Log.error(_:)(v181);
  sub_10005547C();
  sub_100056074();
  uint64_t v52 = *(void **)(v1 + 2656);
  uint64_t v53 = *(void *)(v1 + 2648);
  sub_100055FFC();
  uint64_t v134 = 0x80000001000ACF00LL;
  uint64_t v138 = v54;
  if (!v52) {
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v55 = sub_100055C90();
  while (1)
  {
    sub_100055808(v55, v56);
    uint64_t v68 = *(void *)(v67 + 8);
    *(void *)(v1 + 2672) = v68;
    sub_100055E40((uint64_t)v51, v164);
    sub_10005AA98();
    sub_100055E40((uint64_t)v161, v158);
    sub_100055A7C();
    if (v69)
    {
      sub_1000560AC();
LABEL_35:
      uint64_t v107 = (void *)swift_task_alloc(dword_1000F02CC);
      *(void *)(v1 + 2680) = v107;
      uint64_t v108 = sub_100055D68(v107, (uint64_t)sub_1000527B0);
      sub_10005569C(v108, v109, v68);
      return;
    }

    char v70 = *(_BYTE *)(v1 + 1632);
    sub_1000560AC();
    Swift::String v71 = sub_100054B84( v161,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000549BC);
    if ((v70 & 1) == 0) {
      goto LABEL_35;
    }
    uint64_t v184 = (uint64_t)v52;
    uint64_t v185 = v53;
    uint64_t v72 = *(void *)(v1 + 2544);
    static Log.accountsDataSync.getter(v71);
    uint64_t v74 = sub_100055930();
    uint64_t v82 = sub_1000555A0(v74, v75, v76, v77, v78, v79, v80, v81, v120, (uint64_t)v124, v127, v130, v134, v138, v141);
    id v84 = (id)AMSLogKey(v82, v83);
    if (v84)
    {
      sub_100055E68((uint64_t)v84);
      sub_100055BE0();
    }

    else
    {
      uint64_t v52 = 0LL;
      unint64_t v73 = 0LL;
    }

    uint64_t v181 = *(void *)(v1 + 2584);
    uint64_t v183 = *(void **)(v1 + 2616);
    uint64_t v174 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 2576);
    uint64_t v85 = *(void *)(v1 + 2568);
    uint64_t v169 = *(void *)(v1 + 2432);
    static LogInterpolation.prefix(_:_:)(v149, v52, v73);
    sub_1000556B4();
    sub_100054930(v149);
    sub_10005574C();
    v86._countAndFlagsBits = 0xD000000000000020LL;
    v86._object = v139;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v86);
    *(void *)(v1 + 2312) = &type metadata for String;
    *(void *)(v1 + 228_Block_object_dispose(&a9, 8) = v28;
    *(void *)(v1 + 2296) = v68;
    sub_1000560AC();
    sub_100056138();
    sub_100055940(v151);
    v87._countAndFlagsBits = 0xD00000000000002CLL;
    v87._object = v135;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v87);
    sub_100055664();
    *(void *)(v1 + 2280) = v85;
    uint64_t v88 = v154;
    uint64_t v89 = sub_100055CAC();
    sub_100055950( (uint64_t)v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v121,  v125,  v128,  v131,  (uint64_t)v135,  (uint64_t)v139,  v142,  v145,  v147,  (uint64_t)v149,  v151,  *((uint64_t *)&v151 + 1),  v154,  v158,  (uint64_t)v161,  v164,  v169,  v174);
    sub_100055838();
    sub_100055940(v88);
    sub_100055918( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v122,  v126,  v129,  v132,  v136,  v140,  v143,  v146,  v148,  v150,  v152,  v153,  v156,  v159,  v163,  v166,  v170,  v175,  v72);
    sub_10005547C();
    sub_100055C18();
    uint64_t v105 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    NSString v106 = String._bridgeToObjectiveC()();
    sub_100055948();
    id v51 = (void *)sub_100055FB4();
    sub_100055C54(v105, "_removeStoreForNamespace:accountID:bag:", (uint64_t)v106);

    uint64_t v52 = (void *)v184;
    if (v184) {
      goto LABEL_10;
    }
LABEL_11:
    if (__OFADD__(v53, 1LL))
    {
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }

    uint64_t v57 = sub_10005553C();
    if (v60 == v61) {
      goto LABEL_36;
    }
    uint64_t v62 = v57 + 56;
    uint64_t v53 = v59;
    if (!*(void *)(v57 + 56 + 8 * v59))
    {
      int64_t v63 = v58 >> 6;
      uint64_t v53 = v59 + 1;
      if (v59 + 1 >= v63) {
        goto LABEL_36;
      }
      if (!*(void *)(v62 + 8 * v53))
      {
        uint64_t v53 = v59 + 2;
        if (v59 + 2 >= v63) {
          goto LABEL_36;
        }
        if (!*(void *)(v62 + 8 * v53)) {
          break;
        }
      }
    }

LABEL_36:
  sub_100055E20(v57);
  if (v51[2])
  {
    sub_100055AA8();
    uint64_t v160 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    uint64_t v110 = v51 + 7;
    sub_100055A94();
    do
    {
      sub_100055484();
      sub_100055860();
      sub_100055AE8();
      *(_OWORD *)(sub_1000556FC() + 16) = v151;
      uint64_t v111 = sub_1000556EC(v181);
      id v113 = (id)AMSLogKey(v111, v112);
      if (v113)
      {
        sub_1000558F8((uint64_t)v113);
        sub_100055900();
      }

      else
      {
        sub_1000561EC();
      }

      uint64_t v180 = *(void *)(v1 + 2592);
      uint64_t v181 = *(void *)(v1 + 2616);
      uint64_t v114 = *(void **)(v1 + 2552);
      uint64_t v171 = *(void *)(v1 + 2480);
      uint64_t v176 = *(void (**)(uint64_t, uint64_t))(v1 + 2584);
      sub_100055718();
      sub_10005547C();
      sub_100054930(v124);
      LogInterpolation.init(stringLiteral:)(0xD00000000000002DLL, v149);
      *(void *)(v1 + 2056) = &type metadata for String;
      uint64_t v52 = (void *)v184;
      sub_1000556DC();
      sub_100055838();
      sub_100055644(v127);
      sub_100055304();
      *(void *)(v1 + 1992) = &type metadata for String;
      *(void *)(v1 + 196_Block_object_dispose(&a9, 8) = v183;
      *(void *)(v1 + 1976) = v53;
      sub_10005568C();
      sub_100055928();
      sub_100055644(v130);
      sub_100055F94();
      sub_1000556B4();
      v176(v130, v171);
      sub_10005576C();
      NSString v115 = sub_1000556CC();
      sub_100055694();
      uint64_t v116 = sub_100055868();
      AccountIdentity.amsAccountIdentity()(v116);
      Class v117 = sub_100055CDC().super.isa;
      Class v123 = Date._bridgeToObjectiveC()().super.isa;
      sub_1000556BC( v160,  "_setConsumerIdentifier:forKey:inNamespace:accountID:bag:at:serverProvidedAt:",  (uint64_t)v183,  v180,  v118,  v119,  v181);

      v110 += 4;
    }

    while (v185 != 1);
  }

  sub_10005532C();

  sub_1000555BC();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_10005575C();
  sub_100055870();
  sub_100055988();
  sub_1000556A8(*(uint64_t (**)(void))(v1 + 8));
}

  swift_release(v21);
  uint64_t v3 = v47;
LABEL_38:
  if ((v51 & 1) != 0)
  {
    id v46 = 1LL << *(_BYTE *)(v50 + 32);
    if (v46 >= 64) {
      sub_10008F148(0LL, (unint64_t)(v46 + 63) >> 6, v25);
    }
    else {
      *id v25 = -1LL << v46;
    }
    uint64_t v45 = v50;
    *(void *)(v50 + 16) = 0LL;
  }

  else
  {
    uint64_t v45 = v50;
  }

uint64_t sub_100053270()
{
  *(void *)(v0 + 2696) = v1;
  if (!v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 2672));
  }
  return sub_1000552CC();
}

#error "100053420: call analysis failed (funcsize=259)"
void sub_1000536F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  void *v53;
  void *v54;
  NSString v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  NSString v66;
  uint64_t v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  Class v71;
  uint64_t v72;
  void (*v73)(void *, uint64_t, uint64_t);
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void (*v84)(void *, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  void (*v88)(void *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v79 = (void *)(v0 + 776);
  uint64_t v89 = v0 + 2160;
  uint64_t v94 = (void *)(v0 + 2224);
  uint64_t v77 = v0 + 2288;
  uint64_t v78 = (void *)(v0 + 2256);
  uint64_t v76 = (void *)(v0 + 2320);
  uint64_t v93 = (void *)(v0 + 2352);
  uint64_t v91 = v0 + 2400;
  uint64_t v1 = *(void **)(v0 + 2688);
  uint64_t v2 = *(void *)(v0 + 2560);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 2704);
  uint64_t v4 = *(void *)(v0 + 2544);
  uint64_t v5 = *(void *)(v0 + 2456);
  uint64_t v6 = ((v3 + 32) & ~v3) + 5LL * *(void *)(v0 + 2552);
  uint64_t v7 = v3 | 7;
  swift_willThrow();

  sub_100055AE8();
  uint64_t v8 = swift_allocObject(v4, v6, v7);
  *(_OWORD *)(v8 + 16) = xmmword_1000A4970;
  uint64_t v92 = (void *)v8;
  *(void *)(v0 + 2152) = v2;
  *(void *)(v0 + 212_Block_object_dispose(&a9, 8) = v5;
  uint64_t v9 = sub_100055E18();
  uint64_t v11 = (id)AMSLogKey(v9, v10);
  if (v11)
  {
    sub_1000557E0((uint64_t)v11);
    sub_10005603C();
  }

  else
  {
    sub_1000561F8();
  }

  uint64_t v75 = *(void *)(v0 + 2696);
  uint64_t v12 = *(void *)(v0 + 2672);
  id v13 = *(void *)(v0 + 2664);
  uint64_t v88 = *(void (**)(void *, uint64_t))(v0 + 2584);
  unint64_t v73 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 2576);
  uint64_t v14 = *(void *)(v0 + 2568);
  uint64_t v15 = *(void **)(v0 + 2552);
  uint64_t v83 = *(void **)(v0 + 2496);
  Swift::String v86 = *(void *)(v0 + 2480);
  uint64_t v72 = *(void *)(v0 + 2432);
  sub_100055960(v0 + 2128);
  sub_100055694();
  sub_100055F20();
  sub_1000557F8(53LL);
  sub_1000558EC(0xD000000000000029LL, (uint64_t)"Failed sunsetting metrics identifier for ");
  *(void *)(v0 + 2184) = &type metadata for String;
  *(void *)(v0 + 2160) = v13;
  *(void *)(v0 + 216_Block_object_dispose(&a9, 8) = v12;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v89);
  sub_100055D80(v89);
  sub_100055A10(0x202Cu);
  sub_100055664();
  *(void *)(v0 + 2216) = v14;
  uint64_t v16 = sub_100056210();
  v73(v16, v72, v14);
  sub_10005621C();
  sub_100055D80(v89);
  LogInterpolation.init(stringLiteral:)(0x3A726F727265LL, 0xE600000000000000LL);
  swift_getErrorValue(v75, v91, v93);
  *(void *)(v0 + 224_Block_object_dispose(&a9, 8) = *(void *)(v0 + 2360);
  sub_1000548F4(v94);
  sub_100055FE4();
  sub_100055FD0(v17, v18);
  static LogInterpolation.safe(_:)(v94);
  sub_100055D80((uint64_t)v94);
  uint64_t v19 = v83;
  Log.error(_:)(v92);
  sub_10005547C();
  swift_errorRelease(v75);
  v88(v83, v86);
  uint64_t v20 = *(void **)(v0 + 2656);
  uint64_t v21 = *(void *)(v0 + 2648);
  sub_100055FFC();
  uint64_t v74 = v22;
  if (!v20) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v23 = sub_100055C90();
  while (1)
  {
    sub_100055808(v23, v24);
    uint64_t v36 = *(void *)(v35 + 8);
    *(void *)(v0 + 2672) = v36;
    sub_100055E40((uint64_t)v19, v0 + 544);
    sub_10005AA98();
    sub_100055E40((uint64_t)v79, v0 + 1472);
    sub_100055A7C();
    if (v37)
    {
      sub_100055FA0();
LABEL_30:
      uint64_t v57 = (void *)swift_task_alloc(dword_1000F02CC);
      *(void *)(v0 + 2680) = v57;
      unint64_t v58 = sub_100055D68(v57, (uint64_t)sub_1000527B0);
      sub_100054174(v58, v59, v36);
      return;
    }

    uint64_t v38 = *(_BYTE *)(v0 + 1632);
    sub_100055FA0();
    uint64_t v39 = sub_100054B84( v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000549BC);
    if ((v38 & 1) == 0) {
      goto LABEL_30;
    }
    uint64_t v92 = v15;
    uint64_t v94 = (void *)v21;
    uint64_t v40 = *(void *)(v0 + 2560);
    uint64_t v41 = *(void *)(v0 + 2456);
    uint64_t v42 = *(unsigned __int8 *)(v0 + 2704) | 7LL;
    static Log.accountsDataSync.getter(v39);
    uint64_t v43 = sub_100055DE4();
    *(_OWORD *)(swift_allocObject(v43, v44, v42) + 16) = xmmword_1000A4930;
    *(void *)(v0 + 2344) = v40;
    *(void *)(v0 + 2320) = v41;
    uint64_t v45 = sub_100055E18();
    uint64_t v47 = (id)AMSLogKey(v45, v46);
    uint64_t v93 = v20;
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    }

    else
    {
      uint64_t v49 = 0LL;
    }

    uint64_t v91 = *(void *)(v0 + 2616);
    id v84 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 2576);
    id v50 = *(void *)(v0 + 2568);
    uint64_t v81 = *(void *)(v0 + 2432);
    sub_100055E38((uint64_t)v76, v49);
    sub_100055868();
    sub_100054930(v76);
    sub_10005574C();
    v51._countAndFlagsBits = 0xD000000000000020LL;
    v51._object = v74;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v51);
    *(void *)(v0 + 2312) = &type metadata for String;
    *(void *)(v0 + 228_Block_object_dispose(&a9, 8) = v92;
    *(void *)(v0 + 2296) = v36;
    sub_100055FA0();
    uint64_t v15 = (void *)(v0 + 2288);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v77);
    sub_100054CE0(v77, &qword_1000F1E60);
    v52._countAndFlagsBits = 0xD00000000000002CLL;
    v52._object = (void *)0x80000001000ACF00LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v52);
    sub_100055664();
    *(void *)(v0 + 2280) = v50;
    uint64_t v53 = sub_1000548F4(v78);
    v84(v53, v81, v50);
    sub_100056228();
    sub_100054CE0((uint64_t)v78, &qword_1000F1E60);
    sub_100055E50();
    sub_10005547C();
    sub_100056074();
    uint64_t v54 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    uint64_t v55 = String._bridgeToObjectiveC()();
    uint64_t v56 = sub_1000556B4();
    uint64_t v19 = (void *)AccountIdentity.amsAccountIdentity()(v56);
    [v54 _removeStoreForNamespace:v55 accountID:v19 bag:v91];

    uint64_t v21 = (uint64_t)v94;
    if (v20) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }

    id v25 = sub_10005553C();
    if (v28 == v29) {
      goto LABEL_31;
    }
    uint64_t v30 = v25 + 56;
    uint64_t v21 = v27;
    if (!*(void *)(v25 + 56 + 8 * v27))
    {
      uint64_t v31 = v26 >> 6;
      uint64_t v21 = v27 + 1;
      if (v27 + 1 >= v31) {
        goto LABEL_31;
      }
      if (!*(void *)(v30 + 8 * v21))
      {
        uint64_t v21 = v27 + 2;
        if (v27 + 2 >= v31) {
          goto LABEL_31;
        }
        if (!*(void *)(v30 + 8 * v21)) {
          break;
        }
      }
    }

LABEL_21:
    sub_100055EF8();
  }

  sub_1000561CC();
  if (v28 != v29)
  {
    if (!*(void *)(v32 + 8 * v34))
    {
      while (1)
      {
        uint64_t v21 = v34 + 1;
        if (__OFADD__(v34, 1LL)) {
          goto LABEL_39;
        }
        if (v21 >= v33) {
          goto LABEL_31;
        }
        ++v34;
        if (*(void *)(v32 + 8 * v21)) {
          goto LABEL_21;
        }
      }
    }

    uint64_t v21 = v34;
    goto LABEL_21;
  }

    uint64_t v6 = (v12 - 1) & v12;
  }

  id v13 = v11 + 4;
  if (v13 >= v7) {
    return swift_release(v2);
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release(v2);
    }
    uint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

    uint64_t v11 = (v19 - 1) & v19;
  }

  uint64_t v20 = v17 + 2;
  if (v20 < v39)
  {
    uint64_t v19 = *(void *)(v40 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        uint64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_45;
        }
        if (v14 >= v39) {
          goto LABEL_35;
        }
        uint64_t v19 = *(void *)(v40 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_21;
        }
      }
    }

    uint64_t v14 = v20;
    goto LABEL_21;
  }

      uint64_t v11 = (v20 - 1) & v20;
    }

    swift_release(v5);
    uint64_t v3 = v35;
    uint64_t v19 = (void *)(v5 + 64);
    if ((a2 & 1) == 0) {
      goto LABEL_42;
    }
LABEL_38:
    uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
    if (v34 >= 64) {
      sub_10008F148(0LL, (unint64_t)(v34 + 63) >> 6, v19);
    }
    else {
      void *v19 = -1LL << v34;
    }
    *(void *)(v5 + 16) = 0LL;
  }

    uint64_t v8 = (v12 - 1) & v12;
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

      uint64_t v11 = 1;
      return v11 & 1;
    }

    goto LABEL_14;
  }

  uint64_t v5 = v24[2];
  uint64_t v6 = v24[3];
  sub_10008D27C(a2, (uint64_t)&v19);
  if (v23 != 1)
  {
LABEL_14:
    uint64_t v11 = 0;
    return v11 & 1;
  }

  uint64_t v7 = v21;
  uint64_t v8 = v22;
  uint64_t v9 = v3 == v19 && v4 == v20;
  if (v9 || (uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v19, v20, 0LL), v11 = 0, (v10 & 1) != 0))
  {
    if (v5 != v7 || v6 != v8)
    {
      id v13 = v5;
      uint64_t v14 = v6;
      uint64_t v15 = v7;
      uint64_t v16 = v8;
LABEL_20:
      uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL);
      return v11 & 1;
    }

    goto LABEL_21;
  }

  return v11 & 1;
}

              swift_release(v3);
              return v18;
            }
          }
        }
      }
    }

              swift_release(v3);
              return v19;
            }
          }
        }
      }
    }

  JUMPOUT(0x100096F3CLL);
}

LABEL_31:
  sub_100055E20(v25);
  if (v19[2])
  {
    sub_100055AA8();
    uint64_t v80 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    char v60 = v19 + 7;
    do
    {
      sub_100055484();
      sub_100055860();
      sub_100055AE8();
      char v61 = sub_1000556FC();
      *(_OWORD *)(v61 + 16) = xmmword_1000A4970;
      uint64_t v62 = sub_1000556EC(v91);
      uint64_t v64 = (id)AMSLogKey(v62, v63);
      if (v64)
      {
        sub_1000558F8((uint64_t)v64);
        sub_100055900();
      }

      else
      {
        sub_1000561EC();
      }

      uint64_t v90 = *(void *)(v0 + 2592);
      uint64_t v91 = *(void *)(v0 + 2616);
      Swift::String v87 = *(void (**)(uint64_t, uint64_t))(v0 + 2584);
      uint64_t v65 = *(void **)(v0 + 2552);
      uint64_t v82 = *(void *)(v0 + 2504);
      uint64_t v85 = *(void *)(v0 + 2480);
      sub_100055718();
      sub_10005547C();
      sub_100054930((void *)(v0 + 2064));
      LogInterpolation.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001000ACF30LL);
      *(void *)(v0 + 2056) = &type metadata for String;
      uint64_t v20 = v93;
      sub_1000556DC();
      sub_100055838();
      sub_100055644(v0 + 2032);
      sub_100055304();
      *(void *)(v0 + 1992) = &type metadata for String;
      *(void *)(v0 + 196_Block_object_dispose(&a9, 8) = v92;
      *(void *)(v0 + 1976) = v21;
      sub_10005568C();
      sub_100055928();
      sub_100055644(v0 + 1968);
      Log.default(_:)(v61);
      sub_1000556B4();
      v87(v82, v85);
      sub_10005576C();
      uint64_t v66 = sub_1000556CC();
      sub_100055694();
      uint64_t v67 = sub_100055868();
      AccountIdentity.amsAccountIdentity()(v67);
      Class isa = sub_100055CDC().super.isa;
      Swift::String v71 = Date._bridgeToObjectiveC()().super.isa;
      sub_1000556BC( v80,  "_setConsumerIdentifier:forKey:inNamespace:accountID:bag:at:serverProvidedAt:",  (uint64_t)v92,  v90,  v69,  v70,  v91);

      v60 += 4;
    }

    while (v94 != (void *)1);
  }

  sub_10005532C();

  sub_1000555BC();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_10005575C();
  sub_100055870();
  sub_100055988();
  (*(void (**)(void))(v0 + 8))();
}

  sub_100077FD0();
  Swift::String v32 = *((void *)&v80[0] + 1);
  uint64_t v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  uint64_t v34 = [v71 URLFromURLString:v33];

  uint64_t v4 = v26;
  uint64_t v8 = (char *)v25;
  if (v34)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v34);

    uint64_t v35 = sub_10006BF90();
    uint64_t v36 = v25;
    uint64_t v37 = 0LL;
  }

  else
  {
    uint64_t v35 = sub_10006BF90();
    uint64_t v36 = v25;
    uint64_t v37 = 1LL;
  }

  sub_100054998(v36, v37, 1LL, v35);
  uint64_t v45 = (uint64_t)v72;
  sub_100077934(v25, (uint64_t)v72, v26);
  sub_10006BF90();
  if (sub_100054CA8(v45, 1LL, v35) == 1)
  {
    id v46 = sub_100077EC0();
    sub_100077978(v46, v47);
    sub_100077A28();
    uint64_t v48 = sub_100077E74();
    id v50 = v49;
    sub_1000573CC();
    if ((v50 & 1) != 0)
    {
      id v51 = sub_100077B98();
      *(void *)&v80[0] = v11;
      uint64_t v52 = v11[3];
      sub_10005489C((uint64_t *)&unk_1000F0E00);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v51, v52);
      uint64_t v11 = *(void **)&v80[0];
      sub_100077CFC(*(void *)(*(void *)&v80[0] + 48LL) + 16 * v48);
      sub_100077924((_OWORD *)(v11[7] + 32 * v48), &v81);
      _NativeDictionary._delete(at:)(v48, v11);
      sub_100077BA0();
    }

    else
    {
      uint64_t v81 = 0u;
      uint64_t v82 = 0u;
    }

    swift_bridgeObjectRelease(v24);
    sub_100077978((uint64_t)&v81, &qword_1000F1E60);
    goto LABEL_44;
  }

  *((void *)&v82 + 1) = v35;
  uint64_t v53 = sub_1000548F4(&v81);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32LL))(v53, v45, v35);
  sub_100077924(&v81, v80);
  sub_100077B98();
  uint64_t v79 = v11;
  sub_100077E74();
  sub_100077FF4();
  if (v39) {
    goto LABEL_79;
  }
  uint64_t v55 = v54;
  sub_10005489C((uint64_t *)&unk_1000F0E00);
  uint64_t v4 = v26;
  uint64_t v8 = (char *)v25;
  if (sub_100077FE8())
  {
    sub_100077E74();
    if ((v55 & 1) != (v56 & 1)) {
      goto LABEL_82;
    }
  }

  uint64_t v11 = v79;
  if ((v55 & 1) != 0)
  {
    sub_100077F88();
    uint64_t v42 = v80;
    goto LABEL_40;
  }

  sub_100077E08();
  sub_100077D0C(v80, v66);
  if (!v39)
  {
LABEL_42:
    v11[2] = v44;
    swift_bridgeObjectRetain(v24);
    goto LABEL_43;
  }

  __break(1u);
LABEL_75:
  swift_release(v75);
  return (uint64_t)v11;
}

  __break(1u);
}

id sub_100053F48(uint64_t a1, uint64_t a2, char a3, char a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v9 =  [(id)swift_getObjCClassFromMetadata(v4) keyWithName:v8 crossDeviceSync:a3 & 1 isActiveITunesAccountRequired:a4 & 1];

  return v9;
}

uint64_t sub_100053FC0(uint64_t a1)
{
  *(void *)(v1 + 12_Block_object_dispose(&a9, 8) = a1;
  return sub_100055A2C((uint64_t)sub_100053FD0);
}

uint64_t sub_100053FD0()
{
  NSString v1 = sub_100055BB8();
  id v2 = sub_100056140((uint64_t)v1, "dictionaryForKey:");

  v0[17] = sub_100055E48(v3, "valuePromise");
  v0[7] = v0 + 15;
  uint64_t v4 = sub_1000559BC((uint64_t)sub_100054098);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100070ED4;
  v5[3] = &unk_1000D88D0;
  v5[4] = v4;
  sub_100056120(v4, "resultWithCompletion:");
  return sub_1000558DC();
}

uint64_t sub_100054098()
{
  *(void *)(v0 + 144) = v1;
  return sub_1000552CC();
}

uint64_t sub_1000540DC()
{
  uint64_t v1 = *(void **)(v0 + 120);

  id v2 = sub_10005654C(v1);
  return (*(uint64_t (**)(void *))(v0 + 8))(v2);
}

uint64_t sub_100054124()
{
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  swift_willThrow();

  swift_errorRelease(v2);
  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
}

uint64_t sub_100054174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return sub_100055A2C((uint64_t)sub_100054188);
}

uint64_t sub_100054188()
{
  NSString v1 = sub_100055BB8();
  id v2 = sub_100056140((uint64_t)v1, "dictionaryForKey:");

  v0[19] = sub_100055E48(v3, "valuePromise");
  v0[7] = v0 + 15;
  uint64_t v4 = sub_1000559BC((uint64_t)sub_100054250);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100070ED4;
  v5[3] = &unk_1000D88B8;
  v5[4] = v4;
  sub_100056120(v4, "resultWithCompletion:");
  return sub_1000558DC();
}

uint64_t sub_100054250()
{
  *(void *)(v0 + 160) = v1;
  return sub_1000552CC();
}

uint64_t sub_100054294()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);

  uint64_t v4 = sub_100056360(v3, v2, v1);
  LOBYTE(v2) = v5;

  return sub_1000558CC(v4, v2 & 1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000542EC()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  swift_willThrow();

  swift_errorRelease(v2);
  return sub_1000558CC(0LL, 1LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054330(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_100070E60(v3, a3);
  }
  if (a2)
  {
    swift_unknownObjectRetain(a2);
    return sub_1000779B4(v3, a2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100054384()
{
  uint64_t v1 = sub_100055AE0();
  sub_100055780(v1);
  sub_100054930((void *)(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account));
  sub_100054930((void *)(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics));
  swift_unknownObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag));
  swift_defaultActor_destroy(v0);
  sub_100055744();
}

uint64_t sub_100054400()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100054418()
{
  return type metadata accessor for AccountDataAccessActor(0LL);
}

uint64_t type metadata accessor for AccountDataAccessActor(uint64_t a1)
{
  uint64_t result = qword_1000F00F0;
  if (!qword_1000F00F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountDataAccessActor);
  }
  return result;
}

uint64_t sub_100054458(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountDataState(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AccountIdentity(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = &unk_1000A49D0;
      v5[4] = &unk_1000A49D0;
      void v5[5] = &unk_1000A49E8;
      v5[6] = &unk_1000A49E8;
      v5[7] = &unk_1000A49E8;
      v5[8] = &unk_1000A49E8;
      v5[9] = &unk_1000A49E8;
      v5[10] = &unk_1000A49E8;
      v5[11] = &unk_1000A49E8;
      v5[12] = &unk_1000A49E8;
      v5[13] = &unk_1000A4A00;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 14LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100054518()
{
  return v0;
}

uint64_t sub_100054524()
{
  return sub_100054518();
}

void sub_10005453C()
{
}

NSString sub_100054564@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  NSString result = sub_100055228(a1);
  *a2 = result;
  return result;
}

void sub_100054588()
{
}

uint64_t sub_1000545A8(uint64_t a1)
{
  return sub_1000547F8(a1, *v1);
}

Swift::Int sub_1000545B0(uint64_t a1)
{
  return sub_100066D08(a1, *v1);
}

uint64_t sub_1000545B8(uint64_t *a1, uint64_t *a2)
{
  return sub_10008DFA0(*a1, *a2);
}

uint64_t sub_1000545C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100054608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100054634(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100055290( &qword_1000F0358,  (uint64_t (*)(uint64_t))type metadata accessor for AMSAccountFlag,  (uint64_t)&unk_1000A4AEC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_1000546B8(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, "ams_setAccountFlags:", isa);
}

void sub_100054770(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setUsername:v4];
}

void sub_1000547B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "ams_setCreditsString:", v4);
}

uint64_t sub_1000547F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

void *sub_100054838(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void sub_10005485C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100055744();
}

uint64_t sub_10005489C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000548DC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *sub_1000548F4(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_100054930(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *sub_100054950(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void sub_100054990(void *a1)
{
}

uint64_t sub_100054998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1000549A4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000549BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a16);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a20);
    swift_bridgeObjectRelease(a23);
    swift_bridgeObjectRelease(a27);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a7);
  }

  return result;
}

void sub_100054A6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100055DA8(a1, a2, a3);
  sub_100055990(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100055744();
}

void *sub_100054A98(void *a1)
{
  return a1;
}

void type metadata accessor for AMSAccountFlag()
{
  if (!qword_1000F0338)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1000D8988);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1000F0338);
    }
  }

uint64_t sub_100054B08(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100054B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void *sub_100054B84( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100054BF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a20);
    swift_bridgeObjectRetain(a23);
    swift_bridgeObjectRetain(a27);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a6);
  }

  return result;
}

uint64_t sub_100054CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

void sub_100054CB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100055DA8(a1, a2, a3);
  sub_100055990(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100055744();
}

void sub_100054CE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_10005489C(a2);
  sub_100055780(v2);
  sub_100055744();
}

uint64_t sub_100054D08(uint64_t a1)
{
  return a1;
}

void *sub_100054D30(void *a1)
{
  return a1;
}

uint64_t sub_100054D58()
{
  uint64_t v1 = *(void *)(sub_1000561C4() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = sub_1000559FC();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
  sub_1000561B8(*(void *)(v7 - 8));
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))( v0 + ((((v3 + ((v2 + 40) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL) + v6 + 48) & ~v6),  v4);
  uint64_t v8 = sub_100055DC8();
  return swift_deallocObject(v8, v9, v2 | v6 | 7);
}

void sub_100054E20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100055DB8(a1, a2, a3);
  sub_100055990(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100055744();
}

uint64_t sub_100054E4C()
{
  uint64_t v2 = *(void *)(sub_1000561C4() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000559FC();
  uint64_t v5 = (void *)swift_task_alloc(dword_1000F030C);
  *(void *)(v1 + 16) = v5;
  uint64_t v6 = sub_100055B94(v5);
  return sub_10004F698(v6, v7, v8, v9, v0 + v3, v0 + v4);
}

uint64_t sub_100054F08()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100054F44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100055DB8(a1, a2, a3);
  sub_100055990(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100055744();
}

uint64_t sub_100054F70()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100054F80(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_100055780(v2);
  sub_100055744();
}

uint64_t sub_100054FA8()
{
  uint64_t v1 = sub_1000559FC();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100055020()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_1000559FC() - 8) + 80LL);
  uint64_t v3 = v0 + 48;
  uint64_t v4 = v0 + ((v2 + 96) & ~v2);
  char v5 = *(_BYTE *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc(dword_1000F032C);
  *(void *)(v1 + 16) = v6;
  uint64_t v7 = sub_100055B94(v6);
  return sub_10004DD90(v7, v8, v9, v10, v5, v3, v4);
}

void sub_1000550B4()
{
}

void sub_1000550E0()
{
}

void sub_10005510C()
{
}

uint64_t sub_100055138(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000551B4(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

NSString sub_100055228(uint64_t a1)
{
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  return v3;
}

void sub_10005525C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  a2(v3);
  swift_bridgeObjectRelease(v5);
  sub_100055744();
}

void sub_100055290(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100055744();
}

uint64_t sub_1000552CC()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000552D8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t sub_1000552FC()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100055304()
{
  return LogInterpolation.init(stringLiteral:)(0x6D75736E6F43202CLL, 0xEE003A4449207265LL);
}

uint64_t sub_10005532C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 2608));
}

uint64_t sub_100055354()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

  ;
}

uint64_t sub_100055374@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100055384( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21 = v17[327];
  *(void *)(v20 - 120) = v17[323];
  *(void *)(v20 - 112) = v21;
  uint64_t v22 = v17[310];
  *(void *)(v20 - 136) = v17[316];
  *(void *)(v20 - 12_Block_object_dispose(&a9, 8) = v22;
  return static LogInterpolation.prefix(_:_:)(a17, v19, v18);
}

uint64_t sub_1000553D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = v11[327];
  *(void *)(v13 - 120) = v11[324];
  *(void *)(v13 - 112) = v14;
  uint64_t v15 = v11[306];
  *(void *)(v13 - 136) = v11[304];
  *(void *)(v13 - 12_Block_object_dispose(&a9, 8) = v15;
  return static LogInterpolation.prefix(_:_:)(a10, v12, v10);
}

  ;
}

uint64_t sub_100055434()
{
  *(void *)(v3 - 8_Block_object_dispose(&a9, 8) = v1;
  uint64_t v4 = *(void *)(v2 - 24);
  uint64_t v5 = *(void *)(v2 - 16);
  *(void *)(v3 - 112) = *(void *)(v0 + 2560);
  *(void *)(v3 - 104) = v4;
  *(void *)(v3 - 96) = *(void *)(v2 - 8);
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_10005547C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100055484()
{
  *(void *)(v3 - 96) = v1;
  uint64_t v4 = *(void *)(v2 - 24);
  uint64_t v5 = *(void *)(v2 - 16);
  *(void *)(v3 - 120) = *(void *)(v0 + 2560);
  *(void *)(v3 - 112) = v4;
  *(void *)(v3 - 104) = *(void *)(v2 - 8);
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_1000554CC()
{
  *(void *)(v0 - 232) = *(void *)(v0 - 304);
  *(void *)(v0 - 256) = *(void *)(v0 - 72);
  return swift_retain();
}

uint64_t sub_1000554E4()
{
  *(void *)(v1 - _Block_object_dispose(&a9, 8) = *v0;
  return swift_task_dealloc();
}

  ;
}

void sub_10005550C()
{
  uint64_t v2 = (void *)(v1 - 8);
  void *v2 = *v0;
  void *v2 = *v0;
}

  ;
}

uint64_t sub_10005553C()
{
  return *(void *)(v0 + 2640);
}

uint64_t sub_100055558()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100055560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[332] = v4;
  v2[331] = v3;
  uint64_t v6 = v2[305];
  uint64_t v7 = (uint64_t *)(*(void *)(a1 + 48) + 16 * a2);
  uint64_t v8 = *v7;
  *(void *)(v5 - 8_Block_object_dispose(&a9, 8) = *v7;
  v2[333] = v8;
  v2[334] = v7[1];
  return v6;
}

uint64_t sub_1000555A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15)
{
  *(_OWORD *)(a1 + 16) = a15;
  *(void *)(v16 + 2344) = v17;
  *(void *)(v16 + 2320) = v15;
  return swift_retain(v15);
}

uint64_t sub_1000555BC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000555C4()
{
  return static LogInterpolation.prefix(_:_:)(v2 - 256, v1, v0);
}

uint64_t sub_1000555D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 280))(a1, *(void *)(v1 - 264));
}

uint64_t sub_1000555EC()
{
  *(void *)(v2 - 104) = v1;
  *(void *)(v2 - 96) = v0;
  return static Log.accountsDataSync.getter();
}

uint64_t sub_100055620(uint64_t a1)
{
  return LogInterpolation.init(stringLiteral:)(a1, (v1 - 32) | 0x8000000000000000LL);
}

uint64_t sub_10005562C()
{
  return swift_task_dealloc(v0);
}

void sub_100055634()
{
  *(void *)(v1 - 256) = v0;
}

void sub_100055644(uint64_t a1)
{
}

uint64_t sub_10005564C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + v1 + 8) + 16LL))(5LL);
}

uint64_t sub_100055664()
{
  return LogInterpolation.init(stringInterpolation:)(v0);
}

uint64_t sub_10005566C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100055674()
{
  return swift_task_dealloc(*(void *)(v0 + 1392));
}

uint64_t sub_10005568C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100055694()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10005569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054174(a1, a2, a3);
}

uint64_t sub_1000556A8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000556B4()
{
  return swift_bridgeObjectRelease(v0);
}

id sub_1000556BC(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend(a1, a2, a3, a4, v7, v8, a7, v9);
}

NSString sub_1000556CC()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000556DC()
{
  *(void *)(v0 + 2032) = v2;
  *(void *)(v0 + 2040) = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000556EC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 208_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 2064) = v1;
  return swift_retain(v1);
}

uint64_t sub_1000556FC()
{
  return swift_allocObject(v0, v1, v2);
}

  ;
}

uint64_t sub_100055718()
{
  return static LogInterpolation.prefix(_:_:)(v1, v2, v0);
}

uint64_t sub_100055728(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_10005574C()
{
  return LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(76LL, 1LL);
}

uint64_t sub_10005575C()
{
  return swift_task_dealloc(v0);
}

void sub_100055764(uint64_t a1, uint64_t *a2)
{
}

NSString sub_10005576C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100055778()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100055780(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100055794(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

  ;
}

uint64_t sub_1000557E0(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_1000557E8()
{
  *(void *)(v1 - _Block_object_dispose(&a9, 8) = *v0;
}

uint64_t sub_1000557F8(uint64_t a1)
{
  return LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(a1, 1LL);
}

void sub_100055800(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100055808@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[332] = v4;
  v2[331] = v3;
  v2[333] = *(void *)(*(void *)(result + 48) + 16 * a2);
  return result;
}

uint64_t sub_100055830()
{
  return swift_retain(v0);
}

uint64_t sub_100055838()
{
  return static LogInterpolation.traceableSensitive(_:)(v0);
}

  ;
}

uint64_t sub_100055858()
{
  return type metadata accessor for LogInterpolation(0LL);
}

uint64_t sub_100055860()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100055868()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100055870()
{
  return swift_task_dealloc(v0);
}

void sub_100055878()
{
}

uint64_t sub_100055884()
{
  return 0x2D7972746572202CLL;
}

uint64_t sub_1000558A8()
{
  return 0x206C61636F6C202CLL;
}

uint64_t sub_1000558CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000558DC()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

void sub_1000558EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000558F8(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_100055900()
{
}

uint64_t sub_10005590C()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0 - 144);
}

uint64_t sub_100055918( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  return Log.default(_:)(a27);
}

uint64_t sub_100055928()
{
  return static LogInterpolation.traceableSensitive(_:)(v0);
}

uint64_t sub_100055930()
{
  return swift_allocObject(v0, v1, v2);
}

void sub_100055940(uint64_t a1)
{
}

uint64_t sub_100055948()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100055950( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t (*a26)(uint64_t, uint64_t, uint64_t))
{
  return a26(a1, a25, v26);
}

uint64_t sub_100055960(uint64_t a1)
{
  return static LogInterpolation.prefix(_:_:)(a1, v2, v1);
}

uint64_t sub_10005596C()
{
  return swift_allocObject(*(void *)(v0 - 296), *(void *)(v0 - 344), *(void *)(v0 - 312));
}

uint64_t sub_100055988()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100055990@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10005599C()
{
  return swift_retain(v0);
}

void sub_1000559A4()
{
}

uint64_t sub_1000559B0()
{
  return type metadata accessor for AccountDataState(0LL);
}

uint64_t sub_1000559BC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

  ;
}

uint64_t sub_1000559F0(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, *(void *)(v2 - 312));
}

uint64_t sub_1000559FC()
{
  return type metadata accessor for Date(0LL);
}

void sub_100055A04()
{
  v0._countAndFlagsBits = 0LL;
  v0._object = (void *)0xE000000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v0);
}

void sub_100055A10(unsigned __int16 a1)
{
  v1._countAndFlagsBits = a1 | 0x69746E6564690000LL;
  v1._object = (void *)0xEC0000003D207974LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v1);
}

uint64_t sub_100055A2C(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_100055A38()
{
  return 0x636E7973206F7420LL;
}

uint64_t sub_100055A58(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100055A64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return LogInterpolation.init(stringLiteral:)(0xD00000000000002DLL, a18);
}

uint64_t sub_100055A7C()
{
  return sub_1000549A4(v0);
}

  ;
}

  ;
}

void sub_100055AB8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100055AC0@<X0>(uint64_t a1@<X8>)
{
  v2[289] = a1;
  v2[286] = *(void *)(v3 - 88);
  v2[287] = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_100055AD8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100055AE0()
{
  return type metadata accessor for AccountIdentity(0LL);
}

uint64_t sub_100055AE8()
{
  return static Log.accountsDataSync.getter();
}

uint64_t sub_100055AF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 - 296))(a1, *(void *)(v2 - 152), v1);
}

  ;
}

uint64_t sub_100055B20()
{
  v0[75] = v0[29];
  uint64_t v2 = *(void *)(v1 - 72);
  v0[72] = v2;
  return swift_retain(v2);
}

uint64_t sub_100055B34@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_100055B40()
{
  return 0x706D65747461202CLL;
}

uint64_t sub_100055B5C()
{
  return 0x797269707865202CLL;
}

uint64_t sub_100055B78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 2616);
}

uint64_t sub_100055B94(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100055BB0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

NSString sub_100055BB8()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100055BCC()
{
  return static LogInterpolation.prefix(_:_:)(v0 + 576, v1, v2);
}

void sub_100055BE0()
{
}

uint64_t sub_100055BEC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

void sub_100055BF8()
{
}

uint64_t sub_100055C04(uint64_t a1, uint64_t a2)
{
  return static LogInterpolation.prefix(_:_:)(a1, a2, v2);
}

uint64_t sub_100055C0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t (*a27)(uint64_t, uint64_t))
{
  return a27(v27, a26);
}

uint64_t sub_100055C18()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 120))(v0, *(void *)(v1 - 128));
}

void sub_100055C24(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100055C2C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100055C34(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

void sub_100055C48()
{
  *(void *)(v2 + sub_100054CE0(v1 - 144, v0) = *(void *)(v1 - 256);
}

id sub_100055C54(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, v3, *(void *)(v4 - 112));
}

void *sub_100055C60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  *(void *)(v19 + 2280) = v20;
  return sub_1000548F4(a19);
}

void sub_100055C74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  v13._countAndFlagsBits = 0xD00000000000002CLL;
  v13._object = a13;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v13);
}

uint64_t sub_100055C88()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100055C90()
{
  return *(void *)(v0 + 2640);
}

void *sub_100055CAC()
{
  return sub_1000548F4(v0);
}

uint64_t sub_100055CB4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(*(void *)(v1 + a1 + 8) + 8LL))();
}

void sub_100055CC8()
{
}

NSDate sub_100055CDC()
{
  return Date._bridgeToObjectiveC()();
}

uint64_t sub_100055CE8(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100055CF0()
{
  return type metadata accessor for Log(0LL);
}

uint64_t sub_100055CFC()
{
  return 0LL;
}

uint64_t sub_100055D18()
{
  return type metadata accessor for Log(0LL);
}

uint64_t sub_100055D20(uint64_t a1, uint64_t a2)
{
  return LogInterpolation.init(stringLiteral:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

void sub_100055D28(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100055D30()
{
  return *(void *)(v0 + 2640);
}

void sub_100055D4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

  ;
}

uint64_t sub_100055D68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 2616);
}

void sub_100055D80(uint64_t a1)
{
}

uint64_t sub_100055D88()
{
  return static Log.accountsDataSync.getter();
}

void sub_100055D90(uint64_t a1, uint64_t a2)
{
}

void *sub_100055D98()
{
  return sub_1000548F4((void *)(v0 - 144));
}

void sub_100055DA0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100055DA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10005489C(a3);
}

uint64_t sub_100055DB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t sub_100055DC8()
{
  return v0;
}

void *sub_100055DD4()
{
  return sub_1000548F4(v0);
}

uint64_t sub_100055DDC()
{
  return swift_retain(v0);
}

uint64_t sub_100055DE4()
{
  return v0;
}

uint64_t sub_100055DF0(uint64_t a1)
{
  return Log.default(_:)(a1);
}

void *sub_100055DF8()
{
  return sub_1000548F4((void *)(v0 - 256));
}

uint64_t sub_100055E00()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0);
}

void *sub_100055E08()
{
  return sub_1000548F4(v0);
}

void sub_100055E10(uint64_t a1)
{
}

uint64_t sub_100055E18()
{
  return swift_retain(v0);
}

uint64_t sub_100055E20(uint64_t a1)
{
  return swift_release(a1);
}

void sub_100055E28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  v14._countAndFlagsBits = 0xD000000000000020LL;
  v14._object = a14;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v14);
}

uint64_t sub_100055E38(uint64_t a1, uint64_t a2)
{
  return static LogInterpolation.prefix(_:_:)(a1, a2, v2);
}

void sub_100055E40(uint64_t a1, uint64_t a2)
{
}

id sub_100055E48(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100055E50()
{
  return Log.default(_:)(v0);
}

NSString sub_100055E58()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100055E68(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100055EC4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for LogInterpolation.StringInterpolation(0LL);
}

uint64_t sub_100055ED4()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_100055F10()
{
  return type metadata accessor for LogInterpolation.StringInterpolation(0LL);
}

uint64_t sub_100055F18()
{
  return type metadata accessor for AccountDataState(0LL);
}

uint64_t sub_100055F20()
{
  return sub_100054930(v0);
}

  ;
}

  ;
}

uint64_t sub_100055F50(uint64_t a1)
{
  return static LogInterpolation.traceableSensitive(_:)(a1);
}

double sub_100055F58()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_OWORD *)(v0 - 12_Block_object_dispose(&a9, 8) = 0u;
  return result;
}

uint64_t sub_100055F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054998(a1, 1LL, 1LL, a4);
}

uint64_t sub_100055F70(uint64_t a1)
{
  return sub_100054CA8(a1, 1LL, v1);
}

uint64_t sub_100055F7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

  ;
}

uint64_t sub_100055F94()
{
  return Log.default(_:)(v0);
}

uint64_t sub_100055FA0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100055FA8()
{
  return Log.default(_:)(v0);
}

uint64_t sub_100055FB4()
{
  return AccountIdentity.amsAccountIdentity()();
}

uint64_t sub_100055FBC()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 144));
}

uint64_t sub_100055FC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 224))(a1, *(void *)(v1 + 312));
}

uint64_t sub_100055FD0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_100055FDC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

uint64_t sub_100055FF0()
{
  return LogInterpolation.init(stringInterpolation:)(v0);
}

  ;
}

  ;
}

unint64_t sub_100056014()
{
  return 0xD000000000000010LL;
}

  ;
}

void sub_10005603C()
{
}

uint64_t sub_100056048()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100056050( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(void))
{
  return a23();
}

  ;
}

void sub_10005606C(Swift::String a1)
{
}

uint64_t sub_100056074()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 128))(v0, *(void *)(v1 - 136));
}

uint64_t sub_100056080()
{
  return v0;
}

uint64_t sub_100056094()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0 - 256);
}

void sub_10005609C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000560A4()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000560AC()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

  ;
}

void *sub_1000560E8()
{
  return sub_100054838(v0, v0[3]);
}

void sub_1000560F4(uint64_t a1, uint64_t a2)
{
}

void sub_1000560FC(uint64_t a1)
{
}

uint64_t sub_100056108()
{
  *(_BYTE *)(v1 - 112) = v0;
  return static LogInterpolation.safe(_:)(v1 - 112);
}

void *sub_100056114()
{
  return sub_100054838(v0, v0[3]);
}

id sub_100056120(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10005612C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_allocObject(a21, a16, a20);
}

uint64_t sub_100056138()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)(v0);
}

id sub_100056140(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void sub_10005614C()
{
}

uint64_t sub_100056158()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100056164(uint64_t a1, uint64_t a2)
{
  return sub_100051554(a1, a2);
}

  ;
}

NSDate sub_100056178()
{
  return Date._bridgeToObjectiveC()();
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000561B8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000561C4()
{
  return type metadata accessor for AccountDataServerRequest(0LL);
}

  ;
}

void sub_1000561D8(uint64_t a1)
{
}

  ;
}

  ;
}

  ;
}

void *sub_100056204()
{
  *(void *)(v1 - 96) = v0;
  return sub_1000548F4((void *)(v1 - 120));
}

void *sub_100056210()
{
  return sub_1000548F4(*(void **)(v0 - 128));
}

uint64_t sub_10005621C()
{
  return static LogInterpolation.traceableSensitive(_:)(v0);
}

uint64_t sub_100056228()
{
  return static LogInterpolation.traceableSensitive(_:)(v0);
}

uint64_t sub_100056234(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

NSDate sub_10005623C()
{
  return Date._bridgeToObjectiveC()();
}

void *sub_100056248()
{
  return sub_100054838(v0, v0[3]);
}

void *sub_100056254()
{
  return sub_100054838(v0, v0[3]);
}

unint64_t *sub_100056260(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100090C2C(0LL, v3, 0);
    uint64_t v5 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v5);
      if (v8 >= v9 >> 1) {
        sub_100090C2C((void *)(v9 > 1), v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage[2 * v8];
      *((void *)v10 + 4) = v7;
      *((void *)v10 + 5) = v6;
      v5 += 4;
      --v3;
    }

    while (v3);
  }

  uint64_t v11 = sub_10008E434((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = sub_1000567B8(v11, a2);
  sub_1000573CC();
  return v12;
}

uint64_t sub_100056360(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v10[0] = a2;
  *((void *)&v10[0] + 1) = a3;
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v10, &type metadata for String);
  id v5 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v10, v5);
    swift_unknownObjectRelease(v5);
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  sub_1000564C4((uint64_t)v10, (uint64_t)&v11);
  if (!v12)
  {
    sub_10005547C();
LABEL_10:
    sub_10005650C((uint64_t)&v11);
    goto LABEL_12;
  }

  uint64_t v6 = sub_10005489C(&qword_1000F03C0);
  if ((sub_1000573B8((uint64_t)&v9, (uint64_t)&v11, (uint64_t)&type metadata for Any + 8, v6) & 1) == 0)
  {
    sub_10005547C();
    goto LABEL_12;
  }

  uint64_t v7 = v9;
  sub_10005547C();
  sub_10008D2E8(0xD000000000000010LL, 0x80000001000AD320LL, v7, &v11);
  sub_1000573CC();
  if (!v12) {
    goto LABEL_10;
  }
  if ((sub_1000573B8((uint64_t)v10, (uint64_t)&v11, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int) & 1) != 0)
  {
    *(double *)&uint64_t result = (double)*(uint64_t *)&v10[0];
    return result;
  }

uint64_t sub_1000564C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F1E60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005650C(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F1E60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10005654C(void *a1)
{
  uint64_t v19 = &_swiftEmptySetSingleton;
  id v2 = [a1 allKeys];
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    for (uint64_t i = v3 + 32; ; i += 32LL)
    {
      sub_10005737C(i, (uint64_t)&v17);
      if ((sub_1000573B8( (uint64_t)v16,  (uint64_t)&v17,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        __int128 v6 = v16[0];
        swift_bridgeObjectRetain_n(*((void *)&v16[0] + 1), 2LL);
        uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v16, &type metadata for String);
        id v8 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v7);
        swift_unknownObjectRelease(v7);
        if (v8)
        {
          _bridgeAnyObjectToAny(_:)(v16, v8);
          swift_unknownObjectRelease(v8);
        }

        else
        {
          memset(v16, 0, sizeof(v16));
        }

        sub_1000564C4((uint64_t)v16, (uint64_t)&v17);
        if (!*((void *)&v18 + 1))
        {
          sub_1000573C0();
LABEL_19:
          sub_10005650C((uint64_t)&v17);
          goto LABEL_22;
        }

        uint64_t v9 = sub_10005489C(&qword_1000F03C0);
        if ((sub_1000573B8((uint64_t)&v15, (uint64_t)&v17, (uint64_t)&type metadata for Any + 8, v9) & 1) != 0)
        {
          uint64_t v10 = v15;
          swift_bridgeObjectRelease(*((void *)&v6 + 1));
          if (*(void *)(v10 + 16)
            && (unint64_t v11 = sub_10008D974(0xD000000000000010LL, 0x80000001000AD320LL), (v12 & 1) != 0))
          {
            sub_10005737C(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v17);
          }

          else
          {
            __int128 v17 = 0u;
            __int128 v18 = 0u;
          }

          sub_1000573CC();
          if (*((void *)&v18 + 1))
          {
            if ((sub_1000573B8( (uint64_t)v16,  (uint64_t)&v17,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int) & 1) != 0)
            {
              sub_10008F2DC((uint64_t *)&v17, v6, *((uint64_t *)&v6 + 1));
              uint64_t v13 = *((void *)&v17 + 1);
            }

            else
            {
              uint64_t v13 = *((void *)&v6 + 1);
            }

            swift_bridgeObjectRelease(v13);
            goto LABEL_22;
          }

          swift_bridgeObjectRelease(*((void *)&v6 + 1));
          goto LABEL_19;
        }

        sub_1000573C0();
      }

unint64_t *sub_1000567B8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_1000569A0(a1, a2);
  }
  sub_100056808(a1);
  return (unint64_t *)a2;
}

uint64_t sub_100056808(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    Swift::String v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_10008F5B0(v15, v16);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v16);
    uint64_t result = swift_bridgeObjectRelease(v18);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      return swift_release(v2);
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

unint64_t *sub_1000569A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease(v17);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_50;
      }

      if (v12 >= v40) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v40) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v40) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v40) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_100057374(a1);
                return (unint64_t *)v2;
              }

              unint64_t v13 = *(void *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    break;
                  }
                  if (v14 >= v40) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v41 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }

unint64_t *sub_100056E10( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  int64_t v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v42 = a3 + 56;
  while (2)
  {
    uint64_t v39 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }

        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            goto LABEL_46;
          }

          int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_44;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_44;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }

            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_44;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }

              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_44;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v18 = v9 + 5;
                  while (v18 < v14)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_20;
                    }
                  }

                  int64_t v15 = v14 - 1;
LABEL_44:
                  a5[3] = v15;
                  a5[4] = 0LL;
                  swift_retain(a3);
                  return (unint64_t *)sub_1000570E8(v40, a2, v39, a3);
                }
              }
            }
          }

LABEL_20:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }

        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v42 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_38:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      uint64_t v29 = v28[1];
      BOOL v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) == 0)
      {
        uint64_t v32 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v34 + 1)
        {
          unint64_t v34 = i & v32;
          size_t v35 = (void *)(v27 + 16 * v34);
          uint64_t v36 = v35[1];
          BOOL v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
            unint64_t v25 = v34 >> 6;
            uint64_t v26 = 1LL << v34;
            goto LABEL_28;
          }
        }

        goto LABEL_38;
      }

      uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_28:
      unint64_t v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    uint64_t v8 = v39 - 1;
    if (__OFSUB__(v39, 1LL))
    {
LABEL_46:
      __break(1u);
      return result;
    }

    if (v39 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  BOOL v30 = 0LL;
  unint64_t v31 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v26._object = (void *)0x80000001000AD650LL;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  type metadata accessor for AMSAccountFlag();
  _print_unlocked<A, B>(_:_:)( &v33,  &v30,  v27,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v28._countAndFlagsBits = 39LL;
  v28._object = (void *)0xE100000000000000LL;
  String.append(_:)(v28);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

    int64_t v18 = (v26 - 1) & v26;
  }

  uint64_t v27 = v24 + 2;
  if (v27 < v48)
  {
    uint64_t v26 = v49[v27];
    if (!v26)
    {
      while (1)
      {
        uint64_t v20 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_47;
        }
        if (v20 >= v48) {
          goto LABEL_36;
        }
        uint64_t v26 = v49[v20];
        ++v27;
        if (v26) {
          goto LABEL_20;
        }
      }
    }

    uint64_t v20 = v27;
    goto LABEL_20;
  }

    __break(1u);
    JUMPOUT(0x100071D68LL);
  }

  sub_100054930((void *)(*(void *)(v33 + 56) + 32 * v21));
  unint64_t v34 = (_OWORD *)sub_100077EC0();
  sub_100077924(v34, v35);
LABEL_15:
  int64_t v40 = *(void *)(v12 + 1024);
  uint64_t v41 = *(void *)(v12 + 1016);
  sub_100077BA0();
  sub_100077F60(v41, v40);

  sub_100077F60(v41, v40);
LABEL_16:
  uint64_t v42 = *(void *)(v12 + 1008) + 1LL;
  if (v42 == *(void *)(v12 + 992))
  {
    sub_100077D24();
    sub_100077D64();
    sub_100077B8C();
    uint64_t v43 = sub_100077D78();
    return sub_100077AD8(v43, v44);
  }

  else
  {
    sub_100077E80(v42);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, Swift::Int, uint64_t, uint64_t, uint64_t))((char *)&loc_1000718B4 + *((int *)qword_100071D68 + v45)))( v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  a9,  a10,  a11,  a12);
  }

    __break(1u);
    JUMPOUT(0x100073C94LL);
  }

  uint64_t v36 = (void *)(*(void *)(v35 + 56) + 32 * v14);
  sub_100054930(v36);
  sub_100077924((_OWORD *)(v13 + 504), v36);
LABEL_15:
  uint64_t v41 = *(void *)(v13 + 1024);
  uint64_t v42 = *(void *)(v13 + 1016);
  sub_100077BA0();
  sub_100078024(v42, v41);

  unint64_t v33 = v42;
  unint64_t v34 = v41;
LABEL_16:
  sub_100077B28(v33, v34, 5u);
  if (v25)
  {
    sub_100077D24();
    sub_100077D64();
    sub_100077B8C();
    uint64_t v44 = sub_100077D78();
    return sub_100077AD8(v44, v45);
  }

  else
  {
    sub_100077E80(v43);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1000737E8 + dword_100073C94[v46]))( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  a9,  a10,  a11,  a12);
  }

    uint64_t v7 = (v11 - 1) & v11;
    int64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v4 = v12;
LABEL_21:
    sub_1000585E0(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v25);
    unint64_t v24 = v26;
    v23[0] = v25[0];
    v23[1] = v25[1];
    int64_t v14 = *v2;
    if (*(void *)(*v2 + 16)
      && (int64_t v15 = AnyHashable._rawHashValue(seed:)(*(void *)(v14 + 40)),
          uint64_t v16 = -1LL << *(_BYTE *)(v14 + 32),
          unint64_t v17 = v15 & ~v16,
          ((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0))
    {
      int64_t v18 = ~v16;
      while (1)
      {
        sub_1000585E0(*(void *)(v14 + 48) + 40 * v17, (uint64_t)v22);
        Swift::Int v19 = static AnyHashable.== infix(_:_:)(v22, v23);
        sub_100058670((uint64_t)v22);
        if ((v19 & 1) != 0) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v18;
        if (((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
          goto LABEL_26;
        }
      }

      sub_10008F450((uint64_t)v23, (uint64_t)v22);
      sub_100091638((uint64_t)v22);
      uint64_t result = sub_100058670((uint64_t)v23);
    }

    else
    {
LABEL_26:
      sub_10008F164((uint64_t)v22, (uint64_t)v23);
      uint64_t result = sub_100058670((uint64_t)v22);
    }
  }

  int64_t v13 = v4 + 4;
  if (v4 + 4 >= v20) {
    return sub_100057374(v3);
  }
  uint64_t v11 = *(void *)(v21 + 8 * v13);
  if (v11)
  {
    unint64_t v12 = v4 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v20) {
      return sub_100057374(v3);
    }
    uint64_t v11 = *(void *)(v21 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_20;
    }
  }

Swift::Int sub_1000570E8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10005489C(&qword_1000F03C8);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (_BYTE *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    Swift::Int result = Hasher._finalize()();
    uint64_t v20 = -1LL << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    uint64_t v38 = sub_100066E30();
    sub_100054998((uint64_t)v16, 1LL, 1LL, v38);
    uint64_t v29 = 0LL;
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v89);
  __break(1u);
}

    unint64_t v15 = 0LL;
    memset(v84, 0, sizeof(v84));
    uint64_t v83 = 0u;
  }
    }
  }

  else
  {
    sub_10005650C((uint64_t)&v49);
  }

      uint64_t v10 = (v18 - 1) & v18;
    }
  }

  Swift::Int result = swift_release(v3);
  void *v2 = v6;
  return result;
}

      unint64_t v9 = (v17 - 1) & v17;
    }
  }

  Swift::Int result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v10 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_35:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v14 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

    uint64_t v10 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    unint64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100057374(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005737C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000573B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t sub_1000573C0()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000573CC()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000573D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_10005489C(&qword_1000F02F8);
  sub_1000552EC();
  __chkstk_darwin(v13);
  sub_10005878C();
  uint64_t v16 = (uint64_t *)(v15 - v14);
  sub_10005863C(a1, v15 - v14, &qword_1000F02F8);
  if (swift_getEnumCaseMultiPayload(v16, v12) == 1)
  {
    uint64_t v17 = *v16;
    uint64_t v18 = a4[3];
    uint64_t v19 = a4[4];
    sub_100054838(a4, v18);
    uint64_t v20 = sub_10005489C(&qword_1000F03D0);
    uint64_t inited = swift_initStackObject(v20, v32);
    *(_OWORD *)(inited + 16) = xmmword_1000A4950;
    sub_1000587B8();
    *(void *)(v22 + 32) = 0xD000000000000012LL;
    *(void *)(v22 + 40) = v23;
    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_100057A54(a2, a3);
    *(void *)(inited + 72) = &type metadata for UInt;
    *(void *)(inited + 80) = 0xD000000000000012LL;
    sub_1000587B8();
    *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v24;
    char v25 = sub_1000587C4(a2);
    *(void *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = v25 & 1;
    uint64_t v26 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    if (qword_1000F00A8 != -1) {
      swift_once(&qword_1000F00A8, sub_1000576DC);
    }
    uint64_t v27 = qword_1000F8D50;
    swift_errorRetain(v17);
    uint64_t v28 = sub_1000916C4(v17, v26);
    swift_errorRelease(v17);
    strcpy((char *)&v37, "xp_amp_ams_log");
    HIBYTE(v37) = -18;
    *(void *)&__int128 v38 = 0xD000000000000019LL;
    *((void *)&v38 + 1) = 0x80000001000AD3A0LL;
    uint64_t v39 = v28;
    uint64_t v40 = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v19 + 8))(&v37, v18, v19);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v28);
    swift_errorRelease(v17);
  }

  else
  {
    sub_1000586E8((uint64_t)v16, v11, type metadata accessor for AccountDataServerResponse);
    uint64_t v29 = a4[3];
    uint64_t v30 = a4[4];
    unint64_t v31 = sub_100054838(a4, v29);
    sub_100057934((uint64_t)v31, a2, a3);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v30 + 8))(&v37, v29, v30);
    __int128 v36 = v37;
    sub_100054D08((uint64_t)&v36);
    __int128 v35 = v38;
    sub_100054D08((uint64_t)&v35);
    uint64_t v34 = v39;
    sub_100054D30(&v34);
    uint64_t v33 = v40;
    sub_100054D30(&v33);
    sub_100054F80(v11, type metadata accessor for AccountDataServerResponse);
  }

void sub_1000576DC()
{
  qword_1000F8D50 = (uint64_t)&off_1000D8540;
}

uint64_t sub_1000576F0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F03D0);
  uint64_t inited = swift_initStackObject(v4, v13);
  *(_OWORD *)(inited + 16) = xmmword_1000A4950;
  sub_1000587B8();
  *(void *)(v6 + 32) = 0xD000000000000012LL;
  *(void *)(v6 + 40) = v7;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_100057830(a1);
  *(void *)(inited + 72) = &type metadata for UInt;
  strcpy((char *)(inited + 80), "requestReason");
  *(_WORD *)(inited + 94) = -4864;
  char v12 = a2;
  uint64_t v8 = String.init<A>(describing:)(&v12, &unk_1000D9C98);
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v8;
  *(void *)(inited + 104) = v9;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (qword_1000F00A8 != -1) {
    swift_once(&qword_1000F00A8, sub_1000576DC);
  }
  sub_100058728();
  return sub_100058750(v10, 0xD000000000000018LL);
}

BOOL sub_100057830(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountDataServerRequest.Put(0LL);
  sub_1000552EC();
  __chkstk_darwin();
  sub_10005878C();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for AccountDataServerRequest(0LL);
  sub_1000552EC();
  __chkstk_darwin();
  sub_10005878C();
  uint64_t v9 = v8 - v7;
  sub_1000586A4(a1, v8 - v7);
  if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
  {
    sub_100054F80(v9, type metadata accessor for AccountDataServerRequest);
    return 0LL;
  }

  else
  {
    sub_1000586E8(v9, v5, type metadata accessor for AccountDataServerRequest.Put);
    uint64_t v11 = (unsigned __int8 *)(v5 + *(int *)(v2 + 24));
    int v12 = *v11;
    int v13 = v11[1];
    sub_100054F80(v5, type metadata accessor for AccountDataServerRequest.Put);
    uint64_t v14 = 1LL;
    if (v12 != 2) {
      uint64_t v14 = 2LL;
    }
    if (v13 == 2) {
      return v12 != 2;
    }
    else {
      return v14;
    }
  }

void sub_100057934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10005489C(&qword_1000F03D0);
  uint64_t inited = swift_initStackObject(v5, &v12);
  *(_OWORD *)(inited + 16) = xmmword_1000A4950;
  sub_1000587B8();
  *(void *)(v7 + 32) = 0xD000000000000012LL;
  *(void *)(v7 + 40) = v8;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_100057A54(a2, a3);
  *(void *)(inited + 72) = &type metadata for UInt;
  *(void *)(inited + 80) = 0xD000000000000012LL;
  sub_1000587B8();
  *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v9;
  char v10 = sub_1000587C4(a2);
  *(void *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = v10 & 1;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (qword_1000F00A8 != -1) {
    swift_once(&qword_1000F00A8, sub_1000576DC);
  }
  sub_100058728();
  sub_100058750(v11, 0xD000000000000019LL);
  sub_10005879C();
}

uint64_t sub_100057A54(uint64_t a1, uint64_t a2)
{
  if (sub_1000549A4((uint64_t)__src) == 1)
  {
    uint64_t v3 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AnyHashable,  &protocol witness table for String);
  }

  else
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_10005861C((uint64_t)v15, (uint64_t)v13, &qword_1000F02B0);
    sub_1000584C0(v13);
    uint64_t v3 = sub_10008AAE8();
    sub_100058570(v15);
  }

  sub_10005861C(a2, (uint64_t)v11, &qword_1000F02B0);
  sub_10005861C((uint64_t)v11, (uint64_t)v12, &qword_1000F02B0);
  if (sub_1000549A4((uint64_t)v12) == 1)
  {
    uint64_t v4 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AnyHashable,  &protocol witness table for String);
  }

  else
  {
    memcpy(v13, v12, sizeof(v13));
    sub_10005861C((uint64_t)v11, (uint64_t)v10, &qword_1000F02B0);
    sub_1000584C0(v10);
    uint64_t v4 = sub_10008AAE8();
    sub_100058570(v11);
  }

  uint64_t v5 = sub_10005489C((uint64_t *)&unk_1000F1BF0);
  uint64_t v6 = swift_allocObject(v5, 48LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1000A4BE0;
  *(void *)(v6 + 32) = 0xD000000000000013LL;
  *(void *)(v6 + 40) = 0x80000001000AD3C0LL;
  sub_100058014(v3, v4, (void *)v6);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v3);
  swift_setDeallocating(v6);
  sub_100058490();
  swift_bridgeObjectRelease(v4);
  return v8;
}

uint64_t sub_100057C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v14[-v10];
  uint64_t v12 = type metadata accessor for AccountDataState(0LL);
  sub_10005863C(a1 + *(int *)(v12 + 20), (uint64_t)v11, &qword_1000F02A8);
  uint64_t v16 = a3;
  LODWORD(a1) = sub_100057EC8((void (*)(uint64_t *__return_ptr, char *))sub_100058714);
  sub_100054CE0((uint64_t)v11, &qword_1000F02A8);
  LODWORD(v11) = (a1 == 2) | a1;
  sub_10005863C(a2 + *(int *)(v12 + 20), (uint64_t)v9, &qword_1000F02A8);
  uint64_t v15 = a3;
  LODWORD(a1) = sub_100057EC8((void (*)(uint64_t *__return_ptr, char *))sub_100058458);
  sub_100054CE0((uint64_t)v9, &qword_1000F02A8);
  return (v11 ^ ((a1 == 2) | a1)) & 1;
}

void sub_100057DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10005489C(&qword_1000F03D0);
  uint64_t inited = swift_initStackObject(v8, &v11);
  *(_OWORD *)(inited + 16) = xmmword_1000A4950;
  *(void *)(inited + 32) = 0x656C6174537369LL;
  *(void *)(inited + 40) = 0xE700000000000000LL;
  *(_BYTE *)(inited + 4_Block_object_dispose(&a9, 8) = static Date.< infix(_:_:)(a1, a4) & 1;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 80) = 7368801LL;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 8_Block_object_dispose(&a9, 8) = 0xE300000000000000LL;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  swift_bridgeObjectRetain(a3);
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (qword_1000F00A8 != -1) {
    swift_once(&qword_1000F00A8, sub_1000576DC);
  }
  sub_100058728();
  sub_100058750(v10, 0xD000000000000018LL);
  sub_10005879C();
}

uint64_t sub_100057EC8(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10005489C(&qword_1000F02A8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005863C(v1, (uint64_t)v10, &qword_1000F02A8);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  a1(&v13, v7);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

void sub_100058014(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = a2 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v39 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  uint64_t v40 = 0LL;
  int64_t v42 = 0LL;
  uint64_t v43 = a3;
  __int128 v37 = a3 + 9;
  uint64_t v8 = &unk_1000F03E0;
  while (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v42 << 6);
LABEL_6:
    uint64_t v11 = *(void *)(a2 + 56);
    uint64_t v12 = (void *)(*(void *)(a2 + 48) + 16 * v10);
    uint64_t v13 = v12[1];
    *(void *)&__int128 v47 = *v12;
    *((void *)&v47 + 1) = v13;
    sub_1000585E0(v11 + 40 * v10, (uint64_t)v48);
    swift_bridgeObjectRetain(v13);
LABEL_25:
    sub_10005861C((uint64_t)&v47, (uint64_t)&v56, &qword_1000F03D8);
    uint64_t v17 = v57;
    if (!v57)
    {
      swift_release(a2);
      return;
    }

    uint64_t v18 = v56;
    v54[0] = v58;
    v54[1] = v59;
    uint64_t v55 = v60;
    uint64_t v19 = v43[2];
    if (!v19) {
      goto LABEL_33;
    }
    uint64_t v20 = v8;
    uint64_t v21 = v43[4];
    uint64_t v22 = v43[5];
    BOOL v23 = v21 == v56 && v22 == v57;
    if (v23 || (sub_100058764(v21, v22) & 1) != 0)
    {
LABEL_53:
      sub_1000587B0();
      swift_bridgeObjectRelease(v17);
      uint64_t v8 = v20;
    }

    else
    {
      if (v19 != 1)
      {
        uint64_t v28 = v43[6];
        uint64_t v29 = v43[7];
        BOOL v30 = v28 == v18 && v29 == v17;
        if (!v30 && (sub_100058764(v28, v29) & 1) == 0)
        {
          if (v19 != 2)
          {
            unint64_t v31 = v37;
            uint64_t v32 = 2LL;
            while (1)
            {
              uint64_t v33 = v32 + 1;
              if (__OFADD__(v32, 1LL)) {
                goto LABEL_68;
              }
              uint64_t v34 = *(v31 - 1);
              uint64_t v35 = *v31;
              BOOL v36 = v34 == v18 && v35 == v17;
              if (v36 || (sub_100058764(v34, v35) & 1) != 0) {
                goto LABEL_53;
              }
              v31 += 2;
              ++v32;
              BOOL v23 = v33 == v19;
              uint64_t v8 = v20;
              if (v23) {
                goto LABEL_33;
              }
            }
          }

          goto LABEL_33;
        }

        goto LABEL_53;
      }

LABEL_69:
  __break(1u);
}

uint64_t sub_100058458@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = static Date.> infix(_:_:)(*(void *)(v2 + 16), a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100058490()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void *sub_1000584C0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[15];
  uint64_t v7 = a1[17];
  uint64_t v8 = a1[19];
  uint64_t v9 = a1[22];
  uint64_t v10 = a1[26];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *sub_100058570(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000585E0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10005861C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100055DA8(a1, a2, a3);
  sub_100058774(v3);
  sub_100055744();
}

void sub_10005863C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100055DA8(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_100055744();
}

uint64_t sub_100058670(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000586A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1000586E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_100058774(v3);
  sub_100055744();
}

uint64_t sub_100058714@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100058458(a1, a2);
}

void sub_100058728()
{
  v0[15] = -18;
}

uint64_t sub_100058750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v3[2] = a2;
  v3[3] = (v2 - 32) | 0x8000000000000000LL;
  v3[4] = v4;
  v3[5] = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100058764(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_100058774(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

  ;
}

  ;
}

uint64_t sub_1000587B0()
{
  return sub_100058670(v0 - 192);
}

  ;
}

uint64_t sub_1000587C4(uint64_t a1)
{
  return sub_100057C48(a1, v2, v1);
}

void sub_1000587D0(uint64_t a1, uint64_t a2)
{
}

void *sub_1000587D8(void *__dst, void *__src, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *__src;
    *__dst = *__src;
    __dst = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = __src[1];
    if (v7)
    {
      *__dst = *__src;
      __dst[1] = v7;
      __dst[2] = __src[2];
      *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
      uint64_t v8 = __src[5];
      __dst[4] = __src[4];
      __dst[5] = v8;
      uint64_t v9 = __src[7];
      uint64_t v43 = __src[6];
      __dst[6] = v43;
      __dst[7] = v9;
      uint64_t v10 = __src[9];
      uint64_t v42 = __src[8];
      __dst[8] = v42;
      __dst[9] = v10;
      uint64_t v11 = __src[10];
      __dst[10] = v11;
      *((_DWORD *)__dst + 22) = *((_DWORD *)__src + 22);
      __dst[12] = __src[12];
      *((_DWORD *)__dst + 26) = *((_DWORD *)__src + 26);
      *((_WORD *)__dst + 54) = *((_WORD *)__src + 54);
      uint64_t v12 = __src[15];
      __dst[14] = __src[14];
      __dst[15] = v12;
      uint64_t v13 = __src[17];
      __dst[16] = __src[16];
      __dst[17] = v13;
      uint64_t v14 = __src[19];
      __dst[18] = __src[18];
      __dst[19] = v14;
      *((_WORD *)__dst + 80) = *((_WORD *)__src + 80);
      uint64_t v15 = __src[22];
      __dst[21] = __src[21];
      __dst[22] = v15;
      __dst[23] = __src[23];
      *((_WORD *)__dst + 96) = *((_WORD *)__src + 96);
      *((_BYTE *)__dst + 194) = *((_BYTE *)__src + 194);
      uint64_t v16 = __src[26];
      __dst[25] = __src[25];
      __dst[26] = v16;
      *((_BYTE *)__dst + 216) = *((_BYTE *)__src + 216);
      __dst[28] = __src[28];
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
    }

    else
    {
      memcpy(__dst, __src, 0xE8uLL);
    }

    uint64_t v18 = a3[5];
    uint64_t v19 = (char *)__dst + v18;
    uint64_t v20 = (char *)__src + v18;
    uint64_t v21 = type metadata accessor for Date(0LL);
    if (sub_100054CA8((uint64_t)v20, 1LL, v21))
    {
      uint64_t v22 = sub_10005489C(&qword_1000F02A8);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
      sub_100054998((uint64_t)v19, 0LL, 1LL, v21);
    }

    uint64_t v23 = a3[6];
    unint64_t v24 = (char *)__dst + v23;
    char v25 = (char *)__src + v23;
    if (sub_100054CA8((uint64_t)__src + v23, 1LL, v21))
    {
      uint64_t v26 = sub_10005489C(&qword_1000F02A8);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL);
    }

    else
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL);
      v27(v24, v25, v21);
      sub_100054998((uint64_t)v24, 0LL, 1LL, v21);
    }

    v27((char *)__dst + a3[7], (char *)__src + a3[7], v21);
    uint64_t v28 = a3[9];
    *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
    uint64_t v29 = (char *)__dst + v28;
    BOOL v30 = (char *)__src + v28;
    if (sub_100054CA8((uint64_t)__src + v28, 1LL, v21))
    {
      uint64_t v31 = sub_10005489C(&qword_1000F02A8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      v27(v29, v30, v21);
      sub_100054998((uint64_t)v29, 0LL, 1LL, v21);
    }

    uint64_t v32 = a3[11];
    *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
    uint64_t v33 = (char *)__dst + v32;
    uint64_t v34 = (char *)__src + v32;
    if (sub_100054CA8((uint64_t)__src + v32, 1LL, v21))
    {
      uint64_t v35 = sub_10005489C(&qword_1000F02A8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      v27(v33, v34, v21);
      sub_100054998((uint64_t)v33, 0LL, 1LL, v21);
    }

    uint64_t v36 = a3[13];
    *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
    __int128 v37 = (char *)__dst + v36;
    uint64_t v38 = (char *)__src + v36;
    uint64_t v39 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    if (sub_100054CA8((uint64_t)v38, 1LL, v39))
    {
      uint64_t v40 = sub_10005489C(&qword_1000F02F0);
      memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      _BYTE *v37 = *v38;
      v27(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v21);
      sub_100054998((uint64_t)v37, 0LL, 1LL, v39);
    }
  }

  return __dst;
}

uint64_t sub_100058BE4(void *a1, int *a2)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[8]);
    swift_bridgeObjectRelease(a1[10]);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[26]);
  }

  uint64_t v5 = (uint64_t)a1 + a2[5];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = (uint64_t)a1 + a2[6];
  int v8 = sub_100054CA8(v7, 1LL, v6);
  uint64_t v9 = *(void (**)(void, void))(*(void *)(v6 - 8) + 8LL);
  uint64_t v15 = v9;
  if (!v8)
  {
    v9(v7, v6);
    uint64_t v9 = v15;
  }

  v9((char *)a1 + a2[7], v6);
  uint64_t v10 = (uint64_t)a1 + a2[9];
  uint64_t v11 = (uint64_t)a1 + a2[11];
  uint64_t v12 = (uint64_t)a1 + a2[13];
  uint64_t v13 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  uint64_t result = sub_100054CA8(v12, 1LL, v13);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v12 + *(int *)(v13 + 20), v6);
  }
  return result;
}

void *sub_100058D94(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = __src[1];
  if (v6)
  {
    *__dst = *__src;
    __dst[1] = v6;
    __dst[2] = __src[2];
    *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
    uint64_t v7 = __src[5];
    __dst[4] = __src[4];
    __dst[5] = v7;
    uint64_t v8 = __src[7];
    uint64_t v41 = __src[6];
    __dst[6] = v41;
    __dst[7] = v8;
    uint64_t v9 = __src[9];
    uint64_t v40 = __src[8];
    __dst[8] = v40;
    __dst[9] = v9;
    uint64_t v10 = __src[10];
    __dst[10] = v10;
    *((_DWORD *)__dst + 22) = *((_DWORD *)__src + 22);
    __dst[12] = __src[12];
    *((_DWORD *)__dst + 26) = *((_DWORD *)__src + 26);
    *((_WORD *)__dst + 54) = *((_WORD *)__src + 54);
    uint64_t v11 = __src[15];
    __dst[14] = __src[14];
    __dst[15] = v11;
    uint64_t v12 = __src[17];
    __dst[16] = __src[16];
    __dst[17] = v12;
    uint64_t v13 = __src[19];
    __dst[18] = __src[18];
    __dst[19] = v13;
    *((_WORD *)__dst + 80) = *((_WORD *)__src + 80);
    uint64_t v14 = __src[22];
    __dst[21] = __src[21];
    __dst[22] = v14;
    __dst[23] = __src[23];
    *((_WORD *)__dst + 96) = *((_WORD *)__src + 96);
    *((_BYTE *)__dst + 194) = *((_BYTE *)__src + 194);
    uint64_t v15 = __src[26];
    __dst[25] = __src[25];
    __dst[26] = v15;
    *((_BYTE *)__dst + 216) = *((_BYTE *)__src + 216);
    __dst[28] = __src[28];
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
  }

  else
  {
    memcpy(__dst, __src, 0xE8uLL);
  }

  uint64_t v16 = a3[5];
  uint64_t v17 = (char *)__dst + v16;
  uint64_t v18 = (char *)__src + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  if (sub_100054CA8((uint64_t)v18, 1LL, v19))
  {
    uint64_t v20 = sub_10005489C(&qword_1000F02A8);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
    sub_100054998((uint64_t)v17, 0LL, 1LL, v19);
  }

  uint64_t v21 = a3[6];
  uint64_t v22 = (char *)__dst + v21;
  uint64_t v23 = (char *)__src + v21;
  if (sub_100054CA8((uint64_t)__src + v21, 1LL, v19))
  {
    uint64_t v24 = sub_10005489C(&qword_1000F02A8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    char v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL);
  }

  else
  {
    char v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL);
    v25(v22, v23, v19);
    sub_100054998((uint64_t)v22, 0LL, 1LL, v19);
  }

  v25((char *)__dst + a3[7], (char *)__src + a3[7], v19);
  uint64_t v26 = a3[9];
  *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
  uint64_t v27 = (char *)__dst + v26;
  uint64_t v28 = (char *)__src + v26;
  if (sub_100054CA8((uint64_t)__src + v26, 1LL, v19))
  {
    uint64_t v29 = sub_10005489C(&qword_1000F02A8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    v25(v27, v28, v19);
    sub_100054998((uint64_t)v27, 0LL, 1LL, v19);
  }

  uint64_t v30 = a3[11];
  *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
  uint64_t v31 = (char *)__dst + v30;
  uint64_t v32 = (char *)__src + v30;
  if (sub_100054CA8((uint64_t)__src + v30, 1LL, v19))
  {
    uint64_t v33 = sub_10005489C(&qword_1000F02A8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    v25(v31, v32, v19);
    sub_100054998((uint64_t)v31, 0LL, 1LL, v19);
  }

  uint64_t v34 = a3[13];
  *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
  uint64_t v35 = (char *)__dst + v34;
  uint64_t v36 = (char *)__src + v34;
  uint64_t v37 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  if (sub_100054CA8((uint64_t)v36, 1LL, v37))
  {
    uint64_t v38 = sub_10005489C(&qword_1000F02F0);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    _BYTE *v35 = *v36;
    v25(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v19);
    sub_100054998((uint64_t)v35, 0LL, 1LL, v37);
  }

  return __dst;
}

void *sub_100059174(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = __dst[1];
  uint64_t v7 = __src[1];
  if (v6)
  {
    if (v7)
    {
      *__dst = *__src;
      uint64_t v8 = __src[1];
      __dst[1] = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6);
      __dst[2] = __src[2];
      *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
      __dst[4] = __src[4];
      uint64_t v9 = __src[5];
      uint64_t v10 = __dst[5];
      __dst[5] = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      uint64_t v11 = __dst[6];
      uint64_t v12 = __src[6];
      __dst[6] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v11);
      __dst[7] = __src[7];
      uint64_t v13 = __src[8];
      uint64_t v14 = __dst[8];
      __dst[8] = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
      __dst[9] = __src[9];
      uint64_t v15 = __src[10];
      uint64_t v16 = __dst[10];
      __dst[10] = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *((_BYTE *)__dst + 8_Block_object_dispose(&a9, 8) = *((_BYTE *)__src + 88);
      *((_BYTE *)__dst + 89) = *((_BYTE *)__src + 89);
      *((_BYTE *)__dst + 90) = *((_BYTE *)__src + 90);
      *((_BYTE *)__dst + 91) = *((_BYTE *)__src + 91);
      __dst[12] = __src[12];
      *((_BYTE *)__dst + 104) = *((_BYTE *)__src + 104);
      *((_BYTE *)__dst + 105) = *((_BYTE *)__src + 105);
      *((_BYTE *)__dst + 106) = *((_BYTE *)__src + 106);
      *((_BYTE *)__dst + 107) = *((_BYTE *)__src + 107);
      *((_BYTE *)__dst + 10_Block_object_dispose(&a9, 8) = *((_BYTE *)__src + 108);
      *((_BYTE *)__dst + 109) = *((_BYTE *)__src + 109);
      __dst[14] = __src[14];
      uint64_t v17 = __src[15];
      uint64_t v18 = __dst[15];
      __dst[15] = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      __dst[16] = __src[16];
      uint64_t v19 = __src[17];
      uint64_t v20 = __dst[17];
      __dst[17] = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
      __dst[18] = __src[18];
      uint64_t v21 = __src[19];
      uint64_t v22 = __dst[19];
      __dst[19] = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
      *((_BYTE *)__dst + 160) = *((_BYTE *)__src + 160);
      *((_BYTE *)__dst + 161) = *((_BYTE *)__src + 161);
      __dst[21] = __src[21];
      uint64_t v23 = __src[22];
      uint64_t v24 = __dst[22];
      __dst[22] = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease(v24);
      uint64_t v25 = __src[23];
      *((_BYTE *)__dst + 192) = *((_BYTE *)__src + 192);
      __dst[23] = v25;
      *((_BYTE *)__dst + 193) = *((_BYTE *)__src + 193);
      *((_BYTE *)__dst + 194) = *((_BYTE *)__src + 194);
      __dst[25] = __src[25];
      uint64_t v26 = __src[26];
      uint64_t v27 = __dst[26];
      __dst[26] = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      *((_BYTE *)__dst + 216) = *((_BYTE *)__src + 216);
      __dst[28] = __src[28];
      goto LABEL_8;
    }

    sub_100059970(__dst);
  }

  else if (v7)
  {
    *__dst = *__src;
    uint64_t v28 = __src[1];
    __dst[1] = v28;
    __dst[2] = __src[2];
    *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
    __dst[4] = __src[4];
    uint64_t v29 = __src[5];
    __dst[5] = v29;
    uint64_t v75 = __src[6];
    __dst[6] = v75;
    __dst[7] = __src[7];
    uint64_t v74 = __src[8];
    __dst[8] = v74;
    __dst[9] = __src[9];
    uint64_t v30 = __src[10];
    __dst[10] = v30;
    *((_BYTE *)__dst + 8_Block_object_dispose(&a9, 8) = *((_BYTE *)__src + 88);
    *((_BYTE *)__dst + 89) = *((_BYTE *)__src + 89);
    *((_BYTE *)__dst + 90) = *((_BYTE *)__src + 90);
    *((_BYTE *)__dst + 91) = *((_BYTE *)__src + 91);
    __dst[12] = __src[12];
    *((_BYTE *)__dst + 104) = *((_BYTE *)__src + 104);
    *((_BYTE *)__dst + 105) = *((_BYTE *)__src + 105);
    *((_BYTE *)__dst + 106) = *((_BYTE *)__src + 106);
    *((_BYTE *)__dst + 107) = *((_BYTE *)__src + 107);
    *((_BYTE *)__dst + 10_Block_object_dispose(&a9, 8) = *((_BYTE *)__src + 108);
    *((_BYTE *)__dst + 109) = *((_BYTE *)__src + 109);
    __dst[14] = __src[14];
    uint64_t v31 = __src[15];
    __dst[15] = v31;
    __dst[16] = __src[16];
    uint64_t v32 = __src[17];
    __dst[17] = v32;
    __dst[18] = __src[18];
    uint64_t v33 = __src[19];
    __dst[19] = v33;
    *((_BYTE *)__dst + 160) = *((_BYTE *)__src + 160);
    *((_BYTE *)__dst + 161) = *((_BYTE *)__src + 161);
    __dst[21] = __src[21];
    uint64_t v34 = __src[22];
    __dst[22] = v34;
    uint64_t v35 = __src[23];
    *((_BYTE *)__dst + 192) = *((_BYTE *)__src + 192);
    __dst[23] = v35;
    *((_BYTE *)__dst + 193) = *((_BYTE *)__src + 193);
    *((_BYTE *)__dst + 194) = *((_BYTE *)__src + 194);
    __dst[25] = __src[25];
    uint64_t v36 = __src[26];
    __dst[26] = v36;
    *((_BYTE *)__dst + 216) = *((_BYTE *)__src + 216);
    __dst[28] = __src[28];
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v36);
    goto LABEL_8;
  }

  memcpy(__dst, __src, 0xE8uLL);
LABEL_8:
  uint64_t v37 = a3[5];
  uint64_t v38 = (char *)__dst + v37;
  uint64_t v39 = (char *)__src + v37;
  uint64_t v40 = type metadata accessor for Date(0LL);
  int v41 = sub_100054CA8((uint64_t)v38, 1LL, v40);
  int v42 = sub_100054CA8((uint64_t)v39, 1LL, v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v38, v39, v40);
      sub_100054998((uint64_t)v38, 0LL, 1LL, v40);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  uint64_t v43 = *(void *)(v40 - 8);
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v40);
LABEL_13:
    uint64_t v44 = sub_10005489C(&qword_1000F02A8);
    memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_14;
  }

  (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v38, v39, v40);
LABEL_14:
  uint64_t v45 = a3[6];
  int64_t v46 = (char *)__dst + v45;
  __int128 v47 = (char *)__src + v45;
  int v48 = sub_100054CA8((uint64_t)__dst + v45, 1LL, v40);
  int v49 = sub_100054CA8((uint64_t)v47, 1LL, v40);
  if (v48)
  {
    if (v49)
    {
      uint64_t v50 = sub_10005489C(&qword_1000F02A8);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
      uint64_t v51 = *(void *)(v40 - 8);
    }

    else
    {
      uint64_t v51 = *(void *)(v40 - 8);
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v46, v47, v40);
      sub_100054998((uint64_t)v46, 0LL, 1LL, v40);
    }
  }

  else
  {
    uint64_t v51 = *(void *)(v40 - 8);
    if (v49)
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v40);
      uint64_t v52 = sub_10005489C(&qword_1000F02A8);
      memcpy(v46, v47, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 24))(v46, v47, v40);
    }
  }

  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v51 + 24);
  v53((char *)__dst + a3[7], (char *)__src + a3[7], v40);
  *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
  uint64_t v54 = a3[9];
  uint64_t v55 = (char *)__dst + v54;
  uint64_t v56 = (char *)__src + v54;
  int v57 = sub_100054CA8((uint64_t)__dst + v54, 1LL, v40);
  int v58 = sub_100054CA8((uint64_t)v56, 1LL, v40);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v55, v56, v40);
      sub_100054998((uint64_t)v55, 0LL, 1LL, v40);
      goto LABEL_28;
    }

    goto LABEL_27;
  }

  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v55, v40);
LABEL_27:
    uint64_t v59 = sub_10005489C(&qword_1000F02A8);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_28;
  }

  v53(v55, v56, v40);
LABEL_28:
  *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
  uint64_t v60 = a3[11];
  char v61 = (char *)__dst + v60;
  uint64_t v62 = (char *)__src + v60;
  int v63 = sub_100054CA8((uint64_t)__dst + v60, 1LL, v40);
  int v64 = sub_100054CA8((uint64_t)v62, 1LL, v40);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v61, v62, v40);
      sub_100054998((uint64_t)v61, 0LL, 1LL, v40);
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v61, v40);
LABEL_33:
    uint64_t v65 = sub_10005489C(&qword_1000F02A8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_34;
  }

  v53(v61, v62, v40);
LABEL_34:
  *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
  uint64_t v66 = a3[13];
  uint64_t v67 = (char *)__dst + v66;
  uint64_t v68 = (char *)__src + v66;
  uint64_t v69 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  int v70 = sub_100054CA8((uint64_t)v67, 1LL, v69);
  int v71 = sub_100054CA8((uint64_t)v68, 1LL, v69);
  if (!v70)
  {
    if (!v71)
    {
      *uint64_t v67 = *v68;
      v53(&v67[*(int *)(v69 + 20)], &v68[*(int *)(v69 + 20)], v40);
      return __dst;
    }

    sub_100054F80((uint64_t)v67, type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_39;
  }

  if (v71)
  {
LABEL_39:
    uint64_t v72 = sub_10005489C(&qword_1000F02F0);
    memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64LL));
    return __dst;
  }

  *uint64_t v67 = *v68;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v51 + 16))( &v67[*(int *)(v69 + 20)],  &v68[*(int *)(v69 + 20)],  v40);
  sub_100054998((uint64_t)v67, 0LL, 1LL, v69);
  return __dst;
}

void *sub_100059970(void *a1)
{
  return a1;
}

char *sub_10005999C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  if (sub_100054CA8((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_10005489C(&qword_1000F02A8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100054998((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if (sub_100054CA8((uint64_t)&a2[v11], 1LL, v9))
  {
    uint64_t v14 = sub_10005489C(&qword_1000F02A8);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  }

  else
  {
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
    v15(v12, v13, v9);
    sub_100054998((uint64_t)v12, 0LL, 1LL, v9);
  }

  v15(&a1[a3[7]], &a2[a3[7]], v9);
  uint64_t v16 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (sub_100054CA8((uint64_t)&a2[v16], 1LL, v9))
  {
    uint64_t v19 = sub_10005489C(&qword_1000F02A8);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    v15(v17, v18, v9);
    sub_100054998((uint64_t)v17, 0LL, 1LL, v9);
  }

  uint64_t v20 = a3[11];
  *(_WORD *)&a1[a3[10]] = *(_WORD *)&a2[a3[10]];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  if (sub_100054CA8((uint64_t)&a2[v20], 1LL, v9))
  {
    uint64_t v23 = sub_10005489C(&qword_1000F02A8);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    v15(v21, v22, v9);
    sub_100054998((uint64_t)v21, 0LL, 1LL, v9);
  }

  uint64_t v24 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  if (sub_100054CA8((uint64_t)v26, 1LL, v27))
  {
    uint64_t v28 = sub_10005489C(&qword_1000F02F0);
    memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    *uint64_t v25 = *v26;
    v15(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v9);
    sub_100054998((uint64_t)v25, 0LL, 1LL, v27);
  }

  return a1;
}

void *sub_100059C54(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = __dst[1];
  if (v6)
  {
    uint64_t v7 = __src[1];
    if (v7)
    {
      *__dst = *__src;
      __dst[1] = v7;
      swift_bridgeObjectRelease(v6);
      __dst[2] = __src[2];
      *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
      uint64_t v8 = __src[5];
      uint64_t v9 = __dst[5];
      __dst[4] = __src[4];
      __dst[5] = v8;
      swift_bridgeObjectRelease(v9);
      uint64_t v10 = __dst[6];
      __dst[6] = __src[6];
      swift_bridgeObjectRelease(v10);
      uint64_t v11 = __src[8];
      uint64_t v12 = __dst[8];
      __dst[7] = __src[7];
      __dst[8] = v11;
      swift_bridgeObjectRelease(v12);
      uint64_t v13 = __src[10];
      uint64_t v14 = __dst[10];
      __dst[9] = __src[9];
      __dst[10] = v13;
      swift_bridgeObjectRelease(v14);
      *((_BYTE *)__dst + 8_Block_object_dispose(&a9, 8) = *((_BYTE *)__src + 88);
      *((_BYTE *)__dst + 89) = *((_BYTE *)__src + 89);
      *((_BYTE *)__dst + 90) = *((_BYTE *)__src + 90);
      *((_BYTE *)__dst + 91) = *((_BYTE *)__src + 91);
      __dst[12] = __src[12];
      *((_BYTE *)__dst + 104) = *((_BYTE *)__src + 104);
      *((_BYTE *)__dst + 105) = *((_BYTE *)__src + 105);
      *((_BYTE *)__dst + 106) = *((_BYTE *)__src + 106);
      *((_BYTE *)__dst + 107) = *((_BYTE *)__src + 107);
      *((_BYTE *)__dst + 10_Block_object_dispose(&a9, 8) = *((_BYTE *)__src + 108);
      *((_BYTE *)__dst + 109) = *((_BYTE *)__src + 109);
      uint64_t v15 = __src[15];
      uint64_t v16 = __dst[15];
      __dst[14] = __src[14];
      __dst[15] = v15;
      swift_bridgeObjectRelease(v16);
      uint64_t v17 = __src[17];
      uint64_t v18 = __dst[17];
      __dst[16] = __src[16];
      __dst[17] = v17;
      swift_bridgeObjectRelease(v18);
      uint64_t v19 = __src[19];
      uint64_t v20 = __dst[19];
      __dst[18] = __src[18];
      __dst[19] = v19;
      swift_bridgeObjectRelease(v20);
      *((_BYTE *)__dst + 160) = *((_BYTE *)__src + 160);
      *((_BYTE *)__dst + 161) = *((_BYTE *)__src + 161);
      uint64_t v21 = __src[22];
      uint64_t v22 = __dst[22];
      __dst[21] = __src[21];
      __dst[22] = v21;
      swift_bridgeObjectRelease(v22);
      __dst[23] = __src[23];
      *((_BYTE *)__dst + 192) = *((_BYTE *)__src + 192);
      *((_BYTE *)__dst + 193) = *((_BYTE *)__src + 193);
      *((_BYTE *)__dst + 194) = *((_BYTE *)__src + 194);
      uint64_t v23 = __src[26];
      uint64_t v24 = __dst[26];
      __dst[25] = __src[25];
      __dst[26] = v23;
      swift_bridgeObjectRelease(v24);
      *((_BYTE *)__dst + 216) = *((_BYTE *)__src + 216);
      __dst[28] = __src[28];
      goto LABEL_6;
    }

    sub_100059970(__dst);
  }

  memcpy(__dst, __src, 0xE8uLL);
LABEL_6:
  uint64_t v25 = a3[5];
  uint64_t v26 = (char *)__dst + v25;
  uint64_t v27 = (char *)__src + v25;
  uint64_t v28 = type metadata accessor for Date(0LL);
  int v29 = sub_100054CA8((uint64_t)v26, 1LL, v28);
  int v30 = sub_100054CA8((uint64_t)v27, 1LL, v28);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v26, v27, v28);
      sub_100054998((uint64_t)v26, 0LL, 1LL, v28);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  uint64_t v31 = *(void *)(v28 - 8);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v28);
LABEL_11:
    uint64_t v32 = sub_10005489C(&qword_1000F02A8);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_12;
  }

  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v26, v27, v28);
LABEL_12:
  uint64_t v33 = a3[6];
  uint64_t v34 = (char *)__dst + v33;
  uint64_t v35 = (char *)__src + v33;
  int v36 = sub_100054CA8((uint64_t)__dst + v33, 1LL, v28);
  int v37 = sub_100054CA8((uint64_t)v35, 1LL, v28);
  if (v36)
  {
    if (v37)
    {
      uint64_t v38 = sub_10005489C(&qword_1000F02A8);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
      uint64_t v39 = *(void *)(v28 - 8);
    }

    else
    {
      uint64_t v39 = *(void *)(v28 - 8);
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v34, v35, v28);
      sub_100054998((uint64_t)v34, 0LL, 1LL, v28);
    }
  }

  else
  {
    uint64_t v39 = *(void *)(v28 - 8);
    if (v37)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v28);
      uint64_t v40 = sub_10005489C(&qword_1000F02A8);
      memcpy(v34, v35, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v34, v35, v28);
    }
  }

  int v41 = *(void (**)(char *, char *, uint64_t))(v39 + 40);
  v41((char *)__dst + a3[7], (char *)__src + a3[7], v28);
  uint64_t v42 = a3[9];
  *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
  uint64_t v43 = (char *)__dst + v42;
  uint64_t v44 = (char *)__src + v42;
  int v45 = sub_100054CA8((uint64_t)__dst + v42, 1LL, v28);
  int v46 = sub_100054CA8((uint64_t)v44, 1LL, v28);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v44, v28);
      sub_100054998((uint64_t)v43, 0LL, 1LL, v28);
      goto LABEL_26;
    }

    goto LABEL_25;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v28);
LABEL_25:
    uint64_t v47 = sub_10005489C(&qword_1000F02A8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_26;
  }

  v41(v43, v44, v28);
LABEL_26:
  uint64_t v48 = a3[11];
  *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
  int v49 = (char *)__dst + v48;
  uint64_t v50 = (char *)__src + v48;
  int v51 = sub_100054CA8((uint64_t)__dst + v48, 1LL, v28);
  int v52 = sub_100054CA8((uint64_t)v50, 1LL, v28);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v49, v50, v28);
      sub_100054998((uint64_t)v49, 0LL, 1LL, v28);
      goto LABEL_32;
    }

    goto LABEL_31;
  }

  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v49, v28);
LABEL_31:
    uint64_t v53 = sub_10005489C(&qword_1000F02A8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_32;
  }

  v41(v49, v50, v28);
LABEL_32:
  uint64_t v54 = a3[13];
  *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
  uint64_t v55 = (char *)__dst + v54;
  uint64_t v56 = (char *)__src + v54;
  uint64_t v57 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  int v58 = sub_100054CA8((uint64_t)v55, 1LL, v57);
  int v59 = sub_100054CA8((uint64_t)v56, 1LL, v57);
  if (!v58)
  {
    if (!v59)
    {
      _BYTE *v55 = *v56;
      v41(&v55[*(int *)(v57 + 20)], &v56[*(int *)(v57 + 20)], v28);
      return __dst;
    }

    sub_100054F80((uint64_t)v55, type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_37;
  }

  if (v59)
  {
LABEL_37:
    uint64_t v60 = sub_10005489C(&qword_1000F02F0);
    memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64LL));
    return __dst;
  }

  _BYTE *v55 = *v56;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 32))( &v55[*(int *)(v57 + 20)],  &v56[*(int *)(v57 + 20)],  v28);
  sub_100054998((uint64_t)v55, 0LL, 1LL, v57);
  return __dst;
}

uint64_t sub_10005A208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A214);
}

void sub_10005A214(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    sub_10006483C();
    sub_100064370();
  }

  else
  {
    uint64_t v6 = sub_10005489C(&qword_1000F02A8);
    if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a3[5];
    }

    else
    {
      uint64_t v9 = sub_1000559FC();
      if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
      {
        uint64_t v7 = v9;
        uint64_t v8 = a3[7];
      }

      else
      {
        uint64_t v7 = sub_10005489C(&qword_1000F02F0);
        uint64_t v8 = a3[13];
      }
    }

    sub_100064300(a1 + v8, a2, v7);
  }

uint64_t sub_10005A2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A2D0);
}

void sub_10005A2D0()
{
  if (v3 == 2147483646)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v0;
    sub_100064370();
  }

  else
  {
    uint64_t v4 = v2;
    sub_10005489C(&qword_1000F02A8);
    sub_100064684();
    if (v8)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v4[5];
    }

    else
    {
      sub_1000559FC();
      sub_100064684();
      if (v8)
      {
        uint64_t v6 = v9;
        uint64_t v7 = v4[7];
      }

      else
      {
        uint64_t v6 = sub_10005489C(&qword_1000F02F0);
        uint64_t v7 = v4[13];
      }
    }

    sub_1000642A8(v1 + v7, v0, v0, v6);
  }

uint64_t type metadata accessor for AccountDataState(uint64_t a1)
{
  return sub_100063CAC(a1, (uint64_t *)&unk_1000F0448, (uint64_t)&nominal type descriptor for AccountDataState);
}

void sub_10005A37C(uint64_t a1)
{
  v9[0] = &unk_1000A4C58;
  sub_10005A464(319LL, &qword_1000F0458, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v9[1] = v4;
    v9[2] = v4;
    uint64_t v5 = type metadata accessor for Date(319LL);
    if (v6 <= 0x3F)
    {
      v9[3] = *(void *)(v5 - 8) + 64LL;
      void v9[4] = &unk_1000A4C70;
      void v9[5] = v4;
      v9[6] = &unk_1000A4C70;
      v9[7] = v4;
      v9[8] = (char *)&value witness table for Builtin.Int64 + 64;
      sub_10005A464(319LL, (unint64_t *)&unk_1000F0460, type metadata accessor for CachedServerDataSyncAttempt);
      if (v8 <= 0x3F)
      {
        v9[9] = *(void *)(v7 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 10LL, v9, a1 + 16);
      }
    }
  }

void sub_10005A464(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_10005A4B0(void *a1)
{
  return swift_bridgeObjectRelease(a1[26]);
}

uint64_t sub_10005A518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v6;
  *(void *)(a1 + 56) = v5;
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v9;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_WORD *)(a2 + 108);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v14;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10005A654(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 120);
  uint64_t v15 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(a2 + 136);
  uint64_t v17 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v18 = *(void *)(a2 + 152);
  uint64_t v19 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  uint64_t v20 = *(void *)(a2 + 176);
  uint64_t v21 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v22;
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v23 = *(void *)(a2 + 208);
  uint64_t v24 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

void *sub_10005A860(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE8uLL);
}

uint64_t sub_10005A868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v6 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  uint64_t v11 = *(void *)(a2 + 120);
  uint64_t v12 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 136);
  uint64_t v14 = *(void *)(a1 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 152);
  uint64_t v16 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  uint64_t v17 = *(void *)(a2 + 176);
  uint64_t v18 = *(void *)(a1 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v17;
  swift_bridgeObjectRelease(v18);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  uint64_t v19 = *(void *)(a2 + 208);
  uint64_t v20 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v19;
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

uint64_t sub_10005A9D4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 232))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10005AA14(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 232) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AccountDataPayload()
{
}

void sub_10005AA98()
{
  unsigned int v1 = v0;
  __int16 v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100064784(v4, (uint64_t)v56);
  sub_100064784((uint64_t)v56, (uint64_t)v91);
  sub_100064784(v5, (uint64_t)&v57);
  if (sub_1000549A4((uint64_t)&v57) != 1)
  {
    uint64_t v9 = v64;
    v8.i32[0] = v67;
    int16x8_t v12 = (int16x8_t)vmovl_u8(v8);
    v8.i32[0] = v69;
    int16x8_t v13 = (int16x8_t)vmovl_u8(v8);
    uint64_t v10 = v77;
    uint64_t v11 = v81;
    v12.i64[0] &= 0xFF01FF01FF01FF01LL;
    v13.i64[0] &= 0xFF01FF01FF01FF01LL;
    uint64_t v14 = v87;
    if (v3 == 3 || v3 == 2)
    {
      int v16 = v1;
      else {
        char v18 = v1 & 1;
      }
    }

    else
    {
      char v18 = v3 & 1;
    }

    if (HIBYTE(v3) != 2)
    {
      LOBYTE(v19) = HIBYTE(v3) & 1;
      uint64_t v23 = v62;
      uint64_t v20 = v58;
      goto LABEL_23;
    }

    int v16 = v1;
LABEL_17:
    LOBYTE(v19) = v84 & 1;
    uint64_t v20 = v58;
    if (v16 != 3)
    {
      uint64_t v22 = v59;
      uint64_t v21 = v57;
      if ((v1 & 0xFF00) != 0x200) {
        int v19 = (v1 >> 8) & 1;
      }
      uint64_t v23 = v62;
      goto LABEL_24;
    }

    uint64_t v23 = v62;
LABEL_23:
    uint64_t v22 = v59;
    uint64_t v21 = v57;
LABEL_24:
    v25[0] = v21;
    v25[1] = v20;
    v25[2] = v22;
    char v26 = v18;
    uint64_t v27 = v61;
    uint64_t v28 = v23;
    __int128 v29 = v63;
    uint64_t v30 = v64;
    uint64_t v31 = v65;
    uint64_t v32 = v66;
    unsigned __int32 v33 = vmovn_s16(v12).u32[0];
    uint64_t v34 = v68;
    unsigned __int32 v35 = vmovn_s16(v13).u32[0];
    char v36 = v70 & 1;
    char v37 = v71 & 1;
    uint64_t v38 = v72;
    uint64_t v39 = v73;
    uint64_t v40 = v74;
    uint64_t v41 = v75;
    uint64_t v42 = v76;
    uint64_t v43 = v77;
    char v44 = v78 & 1;
    char v45 = v79;
    uint64_t v46 = v80;
    uint64_t v47 = v81;
    uint64_t v48 = v82;
    char v49 = v83 & 1;
    char v50 = v19;
    char v51 = v85 & 1;
    uint64_t v52 = v86;
    uint64_t v53 = v87;
    char v54 = v88 & 1;
    uint64_t v55 = v89;
    uint64_t v24 = v63;
    nullsub_1(v25);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v9);
    sub_1000642E0();
    sub_10006482C();
    sub_10005568C();
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    sub_100055AD8();
    swift_bridgeObjectRetain(v23);
    sub_100054A6C((uint64_t)v25, (uint64_t)v90, &qword_1000F02B0);
    goto LABEL_25;
  }

  sub_100054A6C((uint64_t)v91, (uint64_t)v90, &qword_1000F02B0);
LABEL_25:
  sub_100054A6C((uint64_t)v90, v7, &qword_1000F02B0);
  sub_1000642E8();
}

void sub_10005AD70()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v35 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  sub_1000552EC();
  __chkstk_darwin(v6);
  sub_100055360();
  uint64_t v31 = (unsigned __int8 *)v7;
  sub_10005489C(&qword_1000F02F0);
  sub_1000552EC();
  __chkstk_darwin(v8);
  sub_100064534(v9, v30);
  uint64_t v10 = sub_1000559FC();
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100064630();
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v11);
  unsigned __int32 v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100064284();
  __chkstk_darwin(v13);
  sub_100056184();
  uint64_t v32 = v14;
  sub_100064284();
  __chkstk_darwin(v15);
  sub_1000644A8();
  __chkstk_darwin(v16);
  char v18 = (char *)&v30 - v17;
  sub_10006435C(v0, (uint64_t)v39);
  sub_10006435C((uint64_t)v39, (uint64_t)v40);
  if (sub_1000549A4((uint64_t)v40) == 1)
  {
    sub_10006427C(0);
  }

  else
  {
    sub_100054A6C((uint64_t)v39, (uint64_t)v37, &qword_1000F02B0);
    sub_100064400(&v38, v37);
    sub_10006427C(1u);
    sub_1000584C0(v37);
    sub_10005E6CC(v5);
    sub_100054B84( v39,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000549BC);
  }

  int v19 = (int *)type metadata accessor for AccountDataState(0LL);
  sub_100054CB4(v0 + v19[5], (uint64_t)v18, &qword_1000F02A8);
  sub_100064248((uint64_t)v18, 1LL, v10);
  if (v20)
  {
    sub_10006427C(0);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v2, v18, v10);
    sub_10006427C(1u);
    sub_100055290( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_100064550(v21);
    sub_100064324();
  }

  sub_100054CB4(v0 + v19[6], v1, &qword_1000F02A8);
  sub_100064248(v1, 1LL, v10);
  if (v20)
  {
    sub_10006427C(0);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v2, v1, v10);
    sub_10006427C(1u);
    sub_100055290( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_100064550(v22);
    sub_100064324();
  }

  sub_100055290( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  sub_1000643E4(v5);
  if (*(_WORD *)(v0 + v19[8]) == 3)
  {
    sub_10006427C(0);
  }

  else
  {
    sub_10006427C(1u);
    sub_10005D22C();
  }

  uint64_t v24 = v32;
  sub_100064864(v3 + v19[9], v23, &qword_1000F02A8);
  sub_100064248(v24, 1LL, v10);
  if (v20)
  {
    sub_10006427C(0);
  }

  else
  {
    sub_10006445C();
    sub_10006427C(1u);
    sub_1000643E4(v5);
    sub_100064324();
  }

  if (*(_WORD *)(v3 + v19[10]) == 3)
  {
    sub_10006427C(0);
  }

  else
  {
    sub_10006427C(1u);
    sub_10005D22C();
  }

  uint64_t v26 = (uint64_t)v33;
  sub_100064864(v3 + v19[11], v25, &qword_1000F02A8);
  sub_100064248(v26, 1LL, v10);
  if (v20)
  {
    sub_10006427C(0);
  }

  else
  {
    sub_10006445C();
    sub_10006427C(1u);
    sub_1000643E4(v5);
    sub_100064324();
  }

  Hasher._combine(_:)(*(void *)(v3 + v19[12]));
  uint64_t v27 = v34;
  sub_100064864(v3 + v19[13], v28, &qword_1000F02F0);
  sub_100064248(v27, 1LL, v35);
  if (v20)
  {
    sub_10006427C(0);
  }

  else
  {
    __int128 v29 = v31;
    sub_100054E20(v27, (uint64_t)v31, type metadata accessor for CachedServerDataSyncAttempt);
    sub_10006427C(1u);
    Hasher._combine(_:)(*v29);
    sub_1000643E4(v5);
    sub_100054F80((uint64_t)v29, type metadata accessor for CachedServerDataSyncAttempt);
  }

  sub_1000642E8();
}

void sub_10005B1E4()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v123 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  sub_1000552EC();
  __chkstk_darwin(v7);
  sub_100055360();
  uint64_t v121 = (unsigned __int8 *)v8;
  uint64_t v122 = sub_10005489C(&qword_1000F0520);
  sub_1000552EC();
  __chkstk_darwin(v9);
  sub_100064630();
  sub_10005489C(&qword_1000F02F0);
  sub_1000552EC();
  __chkstk_darwin(v10);
  sub_100055528();
  uint64_t v124 = v11;
  sub_100064284();
  __chkstk_darwin(v12);
  sub_100056184();
  uint64_t v125 = v13;
  sub_100064284();
  __chkstk_darwin(v14);
  uint64_t v126 = &v117[-v15];
  uint64_t v16 = sub_1000559FC();
  uint64_t v140 = *(void *)(v16 - 8);
  uint64_t v141 = v16;
  __chkstk_darwin(v16);
  sub_100055360();
  uint64_t v136 = v17;
  uint64_t v142 = sub_10005489C(&qword_1000F0528);
  sub_1000552EC();
  __chkstk_darwin(v18);
  sub_100055528();
  uint64_t v129 = v19;
  sub_100064284();
  __chkstk_darwin(v20);
  sub_100056184();
  uint64_t v132 = (_BYTE *)v21;
  sub_100064284();
  __chkstk_darwin(v22);
  sub_100056184();
  uint64_t v137 = v23;
  sub_100064284();
  __chkstk_darwin(v24);
  uint64_t v26 = &v117[-v25];
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v27);
  sub_100055528();
  uint64_t v127 = v28;
  sub_100064284();
  __chkstk_darwin(v29);
  sub_100056184();
  uint64_t v128 = v30;
  sub_100064284();
  __chkstk_darwin(v31);
  sub_100056184();
  uint64_t v130 = v32;
  sub_100064284();
  __chkstk_darwin(v33);
  sub_100056184();
  uint64_t v131 = v34;
  sub_100064284();
  __chkstk_darwin(v35);
  sub_100056184();
  uint64_t v133 = v36;
  sub_100064284();
  __chkstk_darwin(v37);
  sub_100056184();
  uint64_t v134 = v38;
  sub_100064284();
  __chkstk_darwin(v39);
  sub_100056184();
  uint64_t v135 = v40;
  sub_100064284();
  __chkstk_darwin(v41);
  sub_100056184();
  uint64_t v138 = v42;
  sub_100064284();
  __chkstk_darwin(v43);
  sub_100056184();
  uint64_t v139 = v44;
  sub_100064284();
  __chkstk_darwin(v45);
  sub_1000647D4();
  __chkstk_darwin(v46);
  sub_1000644A8();
  __chkstk_darwin(v47);
  char v49 = &v117[-v48];
  sub_10006435C(v6, (uint64_t)v150);
  uint64_t v143 = v4;
  sub_10006435C(v4, (uint64_t)v151);
  sub_10006435C((uint64_t)v150, (uint64_t)v152);
  if (sub_1000549A4((uint64_t)v152) == 1)
  {
    sub_100054A6C((uint64_t)v151, (uint64_t)v147, &qword_1000F02B0);
LABEL_5:
    sub_10006435C((uint64_t)v150, (uint64_t)v147);
    sub_10006435C((uint64_t)v151, (uint64_t)&v148);
    sub_100054B84( v150,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100054BF8);
    sub_100054B84( v151,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100054BF8);
    sub_100061658((uint64_t)v147);
    goto LABEL_28;
  }

  sub_100054A6C((uint64_t)v151, (uint64_t)v146, &qword_1000F02B0);
  sub_10006435C((uint64_t)v150, (uint64_t)v144);
  sub_100064400(v149, v144);
  sub_10006435C((uint64_t)v151, (uint64_t)v145);
  sub_100064400(v147, v145);
  sub_10005E894((uint64_t)v149, (uint64_t)v147);
  if ((v50 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  uint64_t v119 = v2;
  uint64_t v51 = type metadata accessor for AccountDataState(0LL);
  sub_1000645A8(v6 + *(int *)(v51 + 20), (uint64_t)v49);
  uint64_t v120 = (int *)v51;
  sub_1000645A8(v143 + *(int *)(v51 + 20), v1);
  sub_10006475C();
  uint64_t v53 = (uint64_t)&v26[v52];
  sub_1000645A8((uint64_t)v49, (uint64_t)v26);
  sub_1000645A8(v1, v53);
  uint64_t v54 = v141;
  sub_100064248((uint64_t)v26, 1LL, v141);
  if (v55)
  {
    sub_100054CE0(v1, &qword_1000F02A8);
    sub_100054CE0((uint64_t)v49, &qword_1000F02A8);
    sub_1000641FC(v53);
    if (!v55) {
      goto LABEL_16;
    }
    sub_100054CE0((uint64_t)v26, &qword_1000F02A8);
  }

  else
  {
    sub_100054CB4((uint64_t)v26, v0, &qword_1000F02A8);
    sub_1000641FC(v53);
    if (v55)
    {
      sub_1000643B4(v1);
      sub_1000643B4((uint64_t)v49);
      sub_100064740();
      uint64_t v57 = v0;
LABEL_15:
      sub_100064754(v57, v56);
LABEL_16:
      uint64_t v58 = &qword_1000F0528;
      uint64_t v59 = (uint64_t)v26;
LABEL_27:
      sub_100054CE0(v59, v58);
      goto LABEL_28;
    }

    uint64_t v60 = v140;
    uint64_t v61 = v136;
    sub_100064584(v136, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 32));
    sub_100055290( &qword_1000F0530,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    int v118 = sub_1000643D8(v0, v61);
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v62(v61, v54);
    sub_100064738(v1);
    sub_100064738((uint64_t)v49);
    v62(v0, v54);
    sub_100064738((uint64_t)v26);
    if ((v118 & 1) == 0) {
      goto LABEL_28;
    }
  }

  __int128 v63 = v120;
  uint64_t v64 = v139;
  sub_1000642B4(v6 + v120[6], v139);
  uint64_t v65 = v143;
  uint64_t v66 = v138;
  sub_1000642B4(v143 + v63[6], v138);
  sub_10006475C();
  uint64_t v67 = v137;
  uint64_t v69 = v137 + v68;
  sub_1000642B4(v64, v137);
  sub_1000642B4(v66, v69);
  sub_1000641FC(v67);
  if (v55)
  {
    sub_100055D80(v66);
    sub_100055D80(v64);
    sub_1000641FC(v69);
    if (v55)
    {
      sub_100054CE0(v67, &qword_1000F02A8);
      goto LABEL_30;
    }

BOOL sub_10005BDA0(char a1, char a2)
{
  return a1 == a2;
}

void sub_10005BDB0(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_10005BDD4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F6C796150776172LL && a2 == 0xEA00000000006461LL)
  {
    unint64_t v5 = 0xEA00000000006461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C796150776172LL, 0xEA00000000006461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4173657269707865LL && a2 == 0xE900000000000074LL)
  {
    unint64_t v8 = 0xE900000000000074LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4173657269707865LL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x7466417972746572LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v10 = 0xEA00000000007265LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7466417972746572LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v11 = 0x80000001000AD400LL;
    if (a2 == 0x80000001000AD400LL) {
      goto LABEL_29;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001000AD400LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3LL;
  }

  if (a1 == 0x6168436C61636F6CLL && a2 == 0xEB0000000065676ELL)
  {
    unint64_t v13 = 0xEB0000000065676ELL;
    goto LABEL_37;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6168436C61636F6CLL, 0xEB0000000065676ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4LL;
  }

  if (a1 == 0x4274736575716572LL && a2 == 0xEE0074416E616765LL)
  {
    unint64_t v15 = 0xEE0074416E616765LL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4274736575716572LL, 0xEE0074416E616765LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5LL;
  }

  if (a1 == 0x746867696C666E69LL && a2 == 0xEE0065676E616843LL)
  {
    unint64_t v17 = 0xEE0065676E616843LL;
    goto LABEL_53;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696C666E69LL, 0xEE0065676E616843LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v17);
    return 6LL;
  }

  if (a1 == 0x6C6961467473616CLL && a2 == 0xED00007441657275LL)
  {
    unint64_t v19 = 0xED00007441657275LL;
    goto LABEL_61;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6961467473616CLL, 0xED00007441657275LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v19);
    return 7LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x80000001000AD420LL)
  {
    unint64_t v20 = 0x80000001000AD420LL;
LABEL_67:
    swift_bridgeObjectRelease(v20);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001000AD420LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
    goto LABEL_67;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001000AD440LL)
  {
    swift_bridgeObjectRelease(0x80000001000AD440LL);
    return 9LL;
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001000AD440LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t sub_10005C24C()
{
  return 10LL;
}

uint64_t sub_10005C254()
{
  return 0LL;
}

uint64_t sub_10005C260(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005C298 + 4 * byte_1000A4BF0[a1]))( 0x6F6C796150776172LL,  0xEA00000000006461LL);
}

uint64_t sub_10005C298()
{
  return 0x4173657269707865LL;
}

uint64_t sub_10005C2B4()
{
  return 0x7466417972746572LL;
}

unint64_t sub_10005C2CC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10005C2E8()
{
  return 0x6168436C61636F6CLL;
}

uint64_t sub_10005C308()
{
  return 0x4274736575716572LL;
}

uint64_t sub_10005C32C()
{
  return 0x746867696C666E69LL;
}

uint64_t sub_10005C350()
{
  return 0x6C6961467473616CLL;
}

unint64_t sub_10005C374()
{
  return 0xD000000000000017LL;
}

BOOL sub_10005C3AC(char *a1, char *a2)
{
  return sub_10005BDA0(*a1, *a2);
}

void sub_10005C3B8()
{
}

void sub_10005C3D0(uint64_t a1)
{
}

uint64_t sub_10005C3DC()
{
  return sub_10005C260(*v0);
}

uint64_t sub_10005C3E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10005BDD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C408()
{
  return sub_10005C254();
}

uint64_t sub_10005C424@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10005C24C();
  *a1 = result;
  return result;
}

uint64_t sub_10005C448(uint64_t a1)
{
  unint64_t v2 = sub_10006152C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C470(uint64_t a1)
{
  unint64_t v2 = sub_10006152C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005C498( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v26;
  a23 = v27;
  uint64_t v28 = v23;
  uint64_t v30 = v29;
  uint64_t v31 = sub_10005489C(&qword_1000F04F8);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100064660();
  uint64_t v33 = v30[3];
  uint64_t v34 = v30[4];
  sub_100054838(v30, v33);
  unint64_t v35 = sub_10006152C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccountDataState.CodingKeys,  &type metadata for AccountDataState.CodingKeys,  v35,  v33,  v34);
  sub_10006435C(v28, (uint64_t)v49);
  sub_10006435C((uint64_t)v49, (uint64_t)v48);
  a13 = 0;
  unint64_t v36 = sub_1000615E0();
  sub_1000642BC((uint64_t)v48, (uint64_t)&a13, v31, (uint64_t)&unk_1000D8AC8, v36);
  if (!v24)
  {
    uint64_t v47 = (int *)type metadata accessor for AccountDataState(0LL);
    uint64_t v37 = v28 + v47[5];
    LOBYTE(v48[0]) = 1;
    type metadata accessor for Date(0LL);
    sub_100055290( &qword_1000F0508,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_100064290(v37, (uint64_t)v48);
    uint64_t v38 = v28 + v47[6];
    LOBYTE(v48[0]) = 2;
    sub_100064290(v38, (uint64_t)v48);
    uint64_t v39 = v28 + v47[7];
    LOBYTE(v48[0]) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v39, v48, v31);
    v48[0] = *(_WORD *)(v28 + v47[8]);
    a13 = 4;
    unint64_t v46 = sub_10006161C();
    sub_1000642BC((uint64_t)v48, (uint64_t)&a13, v31, (uint64_t)&unk_1000D8D98, v46);
    uint64_t v40 = v28 + v47[9];
    LOBYTE(v48[0]) = 5;
    sub_100064290(v40, (uint64_t)v48);
    v48[0] = *(_WORD *)(v28 + v47[10]);
    a13 = 6;
    sub_1000642BC((uint64_t)v48, (uint64_t)&a13, v31, (uint64_t)&unk_1000D8D98, v46);
    uint64_t v41 = v28 + v47[11];
    LOBYTE(v48[0]) = 7;
    sub_100064290(v41, (uint64_t)v48);
    uint64_t v42 = *(void *)(v28 + v47[12]);
    LOBYTE(v48[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v42, v48, v31);
    uint64_t v43 = v28 + v47[13];
    LOBYTE(v48[0]) = 9;
    uint64_t v44 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    sub_100055290(&qword_1000F0518, type metadata accessor for CachedServerDataSyncAttempt, (uint64_t)&unk_1000A6580);
    sub_1000642BC(v43, (uint64_t)v48, v31, v44, v45);
  }

  sub_100064694(v25, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_1000554F4();
}

void sub_10005C790( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v27;
  a23 = v28;
  uint64_t v82 = v23;
  uint64_t v30 = v29;
  uint64_t v73 = v31;
  sub_10005489C(&qword_1000F02F0);
  sub_1000552EC();
  __chkstk_darwin(v32);
  sub_100055360();
  uint64_t v74 = v33;
  uint64_t v34 = type metadata accessor for Date(0LL);
  uint64_t v79 = *(void *)(v34 - 8);
  uint64_t v80 = v34;
  __chkstk_darwin(v34);
  sub_100064534(v35, v72);
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v36);
  char v75 = (char *)&v72 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100064284();
  __chkstk_darwin(v38);
  sub_1000647D4();
  __chkstk_darwin(v39);
  sub_1000644A8();
  __chkstk_darwin(v40);
  uint64_t v78 = sub_10005489C(&qword_1000F04C8);
  uint64_t v41 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  sub_100064618();
  uint64_t v83 = (int *)type metadata accessor for AccountDataState(0LL);
  sub_1000552EC();
  __chkstk_darwin(v42);
  sub_100055360();
  uint64_t v84 = v43;
  uint64_t v44 = v30[3];
  uint64_t v45 = v30[4];
  uint64_t v81 = v30;
  sub_100054838(v30, v44);
  unint64_t v46 = sub_10006152C();
  uint64_t v77 = v26;
  uint64_t v47 = v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccountDataState.CodingKeys,  &type metadata for AccountDataState.CodingKeys,  v46,  v44,  v45);
  if (v47)
  {
    sub_100064794();
  }

  else
  {
    uint64_t v48 = v25;
    uint64_t v82 = v24;
    uint64_t v72 = v41;
    a13 = 0;
    unint64_t v49 = sub_100061568();
    uint64_t v50 = v78;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1000D8AC8, &a13, v78, &unk_1000D8AC8, v49);
    sub_100054A6C((uint64_t)&v86, (uint64_t)v85, &qword_1000F02B0);
    sub_100054A6C((uint64_t)v85, v84, &qword_1000F02B0);
    LOBYTE(a11) = 1;
    sub_100055290( &qword_1000F04E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v51 = v80;
    uint64_t v53 = sub_1000644C4(v52, (uint64_t)&a11);
    uint64_t v54 = v83;
    sub_10006477C(v53, v84 + v83[5], &qword_1000F02A8);
    sub_100064768(2);
    sub_1000644C4(v55, v56);
    sub_100054A6C(v48, v84 + v54[6], &qword_1000F02A8);
    sub_100064768(3);
    uint64_t v57 = v54;
    uint64_t v58 = v76;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v59, v50, v51);
    uint64_t v60 = v84;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v84 + v57[7], v58, v51);
    a12 = 4;
    sub_1000615A4();
    sub_1000643BC((uint64_t)&unk_1000D8D98);
    *(_WORD *)(v60 + v57[8]) = a11;
    sub_100064768(5);
    uint64_t v63 = sub_1000644EC(v61, v62);
    sub_10006477C(v63, v60 + v83[9], &qword_1000F02A8);
    a12 = 6;
    sub_1000643BC((uint64_t)&unk_1000D8D98);
    uint64_t v64 = v83;
    *(_WORD *)(v60 + v83[10]) = a11;
    sub_100064768(7);
    uint64_t v67 = sub_1000644EC(v65, v66);
    sub_10006477C(v67, v60 + v64[11], &qword_1000F02A8);
    LOBYTE(a11) = 8;
    uint64_t v68 = KeyedDecodingContainer.decode(_:forKey:)(&a11, v50);
    *(void *)(v60 + v83[12]) = v68;
    uint64_t v69 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    LOBYTE(a11) = 9;
    sub_100055290(&qword_1000F04F0, type metadata accessor for CachedServerDataSyncAttempt, (uint64_t)&unk_1000A65A8);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v69, &a11, v50, v69, v70);
    sub_1000645E8();
    uint64_t v71 = v84;
    sub_100054A6C(v74, v84 + v83[13], &qword_1000F02F0);
    sub_100054F44(v71, v73, type metadata accessor for AccountDataState);
    sub_100064794();
    sub_100054F80(v71, type metadata accessor for AccountDataState);
  }

  sub_1000554F4();
}

void sub_10005CD8C()
{
}

void sub_10005CDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

#error "10005CDC0: call analysis failed (funcsize=5)"
#error "10005CDD4: call analysis failed (funcsize=5)"
uint64_t sub_10005CDE4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6C616E6F73726570LL;
  }
  else {
    return 0x79616C506F747561LL;
  }
}

void sub_10005CE28(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D8618, v2);
  sub_10005547C();
  sub_100055744();
}

void sub_10005CE74(char *a1, char *a2)
{
}

Swift::Int sub_10005CE80()
{
  return sub_10005CE88(*v0);
}

Swift::Int sub_10005CE88(char a1)
{
  return sub_10005CF84(0LL, a1 & 1);
}

void sub_10005CE94()
{
}

void sub_10005CEA0(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100064270(a1);
  uint64_t v2 = sub_100078230(v1);
  sub_100064454((uint64_t)v3, v2);
  sub_10005547C();
  sub_1000642C8();
  sub_100064218();
}

void sub_10005CEE4()
{
}

void sub_10005CF04()
{
}

void sub_10005CF20(uint64_t a1)
{
  unsigned __int8 v1 = sub_100064270(a1);
  sub_100064424((uint64_t)v1);
  sub_1000642C8();
  sub_100064218();
}

void sub_10005CF4C(uint64_t a1)
{
  unsigned __int8 v1 = sub_100064270(a1);
  sub_1000647E8((uint64_t)v1);
  sub_1000642C8();
  sub_100064218();
}

uint64_t sub_10005CF74(uint64_t a1)
{
  return sub_100096520(a1, *v1);
}

Swift::Int sub_10005CF7C(uint64_t a1)
{
  return sub_10005CF84(a1, *v1);
}

Swift::Int sub_10005CF84(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6C616E6F73726570LL;
  }
  else {
    uint64_t v3 = 0x79616C506F747561LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0xEF6E6F6974617A69LL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10005D00C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_100078230(a2);
  sub_100064454((uint64_t)v4, v3);
  sub_10005547C();
  sub_1000642C8();
  sub_100064218();
}

void sub_10005D050(uint64_t a1)
{
}

void sub_10005D070(uint64_t a1)
{
}

void sub_10005D08C(uint64_t a1)
{
  unsigned __int8 v1 = sub_1000644BC(a1);
  sub_100064424((uint64_t)v1);
  sub_1000642C8();
  sub_100064218();
}

void sub_10005D0B8(uint64_t a1)
{
  unsigned __int8 v1 = sub_1000644BC(a1);
  sub_1000647E8((uint64_t)v1);
  sub_1000642C8();
  sub_100064218();
}

void sub_10005D0E0(uint64_t a1)
{
}

void sub_10005D140(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_10005D16C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005CDE4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005D194()
{
  return sub_10005CDE4(*v0);
}

uint64_t sub_10005D19C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10005CE70(a1);
  *a2 = result;
  return result;
}

void sub_10005D1C0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10005D1CC(uint64_t a1)
{
  unint64_t v2 = sub_100063C20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D1F4(uint64_t a1)
{
  unint64_t v2 = sub_100063C20();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005D21C(void *a1@<X8>)
{
  *a1 = &off_1000D8668;
}

void sub_10005D22C()
{
  if (v1 == 2)
  {
    Swift::UInt8 v2 = 0;
  }

  else
  {
    sub_100064488();
    Swift::UInt8 v2 = v0 & 1;
  }

  Hasher._combine(_:)(v2);
  if ((v0 & 0xFF00) == 0x200)
  {
    LOBYTE(v3) = 0;
  }

  else
  {
    sub_100064488();
    int v3 = (v0 >> 8) & 1;
  }

  Hasher._combine(_:)(v3);
}

uint64_t sub_10005D288(__int16 a1, int a2)
{
  if (a1 == 2)
  {
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if ((a1 & 0xFF00) == 0x200)
  {
    if (BYTE1(a2) != 2) {
      return 0LL;
    }
  }

  else if (BYTE1(a2) == 2 || ((((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8)) & 1) == 0)
  {
    return 0LL;
  }

  return 1LL;
}

void sub_10005D30C(void *a1, uint64_t a2)
{
  uint64_t v7 = sub_10005489C(&qword_1000F0870);
  sub_1000644DC();
  __chkstk_darwin(v8);
  sub_100055840();
  sub_100054838(a1, a1[3]);
  unint64_t v9 = sub_100063C20();
  sub_1000645F8((uint64_t)&unk_1000D8C00, v10, v9);
  char v13 = 0;
  sub_1000646BC(a2, (uint64_t)&v13);
  if (!v2)
  {
    sub_10006472C();
    sub_1000646BC(v11, (uint64_t)&v12);
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
  sub_100064570();
}

void sub_10005D3D0(uint64_t a1)
{
}

uint64_t sub_10005D400(void *a1)
{
  uint64_t v6 = a1[3];
  sub_100054838(a1, v6);
  unint64_t v7 = sub_100063C20();
  sub_10006471C((uint64_t)&unk_1000D8C00, (uint64_t)&unk_1000D8C00, v7, v6);
  if (v1)
  {
    sub_100054930(a1);
  }

  else
  {
    char v12 = 0;
    unsigned __int8 v8 = sub_10006469C((uint64_t)&v12);
    sub_10006472C();
    int v9 = sub_10006469C((uint64_t)&v11);
    sub_100064694(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_100054930(a1);
    return v8 | (v9 << 8);
  }

  return v6;
}

void sub_10005D510()
{
  uint64_t v1 = sub_100064354();
  sub_100055290( &qword_1000F0890,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID,  (uint64_t)&protocol conformance descriptor for AccountIdentity.DSID);
  uint64_t v2 = sub_100064678();
  dispatch thunk of Hashable.hash(into:)(v2, v1, v3);
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0LL);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v4 + 20)));
  uint64_t v5 = (unsigned __int8 *)(v0 + *(int *)(v4 + 24));
  int v6 = *v5;
  int v7 = v5[1];
  if (v6 == 2)
  {
    Swift::UInt8 v8 = 0;
  }

  else
  {
    Swift::UInt8 v8 = v6 & 1;
    sub_1000643AC(1u);
  }

  sub_1000643AC(v8);
  if (v7 == 2)
  {
    Swift::UInt8 v9 = 0;
  }

  else
  {
    Swift::UInt8 v9 = v7 & 1;
    sub_1000643AC(1u);
  }

  sub_1000643AC(v9);
  sub_100064370();
}

void sub_10005D5D4(uint64_t a1, uint64_t a2)
{
  if ((static AccountIdentity.DSID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0LL),
        *(void *)(a1 + *(int *)(v4 + 20)) == *(void *)(a2 + *(int *)(v4 + 20))))
  {
    sub_10005D288(*(_WORD *)(a1 + *(int *)(v4 + 24)), *(unsigned __int16 *)(a2 + *(int *)(v4 + 24)));
  }

  else
  {
    sub_100055744();
  }

uint64_t sub_10005D630()
{
  uint64_t v0 = sub_100064354();
  sub_100055290( &qword_1000F0890,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID,  (uint64_t)&protocol conformance descriptor for AccountIdentity.DSID);
  uint64_t v1 = sub_100064678();
  return dispatch thunk of Hashable.hash(into:)(v1, v0, v2);
}

void sub_10005D684(uint64_t a1)
{
  uint64_t v1 = sub_100064354();
  sub_100055290( &qword_1000F0890,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID,  (uint64_t)&protocol conformance descriptor for AccountIdentity.DSID);
  dispatch thunk of Hashable.hash(into:)(v3, v1, v2);
  sub_1000642C8();
  sub_100064218();
}

void sub_10005D6D8()
{
  uint64_t v4 = sub_100064408();
  sub_1000552EC();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100064518();
  uint64_t v7 = type metadata accessor for AccountDataServerRequest(v6);
  sub_1000552EC();
  __chkstk_darwin(v8);
  sub_100064394();
  sub_100054F44(v0, v0, v9);
  if (swift_getEnumCaseMultiPayload(v0, v7) == 1)
  {
    sub_1000647FC(v0);
    sub_1000647F4(1uLL);
    uint64_t v10 = sub_100064354();
    sub_100055290( &qword_1000F0890,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID,  (uint64_t)&protocol conformance descriptor for AccountIdentity.DSID);
    uint64_t v11 = sub_100064678();
    dispatch thunk of Hashable.hash(into:)(v11, v10, v12);
    uint64_t v13 = v2;
    uint64_t v14 = type metadata accessor for AccountDataServerRequest.Get;
  }

  else
  {
    sub_100054E20(v0, v1, type metadata accessor for AccountDataServerRequest.Put);
    sub_1000647F4(0LL);
    uint64_t v15 = sub_100064354();
    sub_100055290( &qword_1000F0890,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID,  (uint64_t)&protocol conformance descriptor for AccountIdentity.DSID);
    uint64_t v16 = sub_100064678();
    dispatch thunk of Hashable.hash(into:)(v16, v15, v17);
    Hasher._combine(_:)(*(void *)(v1 + *(int *)(v4 + 20)));
    uint64_t v18 = (unsigned __int8 *)(v1 + *(int *)(v4 + 24));
    int v19 = *v18;
    int v20 = v18[1];
    if (v19 == 2)
    {
      Swift::UInt8 v21 = 0;
    }

    else
    {
      Swift::UInt8 v21 = v19 & 1;
      sub_1000643AC(1u);
    }

    sub_1000643AC(v21);
    if (v20 == 2)
    {
      Swift::UInt8 v22 = 0;
    }

    else
    {
      Swift::UInt8 v22 = v20 & 1;
      sub_1000643AC(1u);
    }

    sub_1000643AC(v22);
    uint64_t v14 = type metadata accessor for AccountDataServerRequest.Put;
    uint64_t v13 = v1;
  }

  sub_100054F80(v13, v14);
}

void sub_10005D8AC()
{
  uint64_t v24 = v2;
  uint64_t v4 = v3;
  type metadata accessor for AccountDataServerRequest.Get(0LL);
  sub_1000552EC();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100064408();
  sub_1000552EC();
  __chkstk_darwin(v7);
  sub_100064394();
  type metadata accessor for AccountDataServerRequest(0LL);
  sub_1000552EC();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - v12;
  sub_10005489C(&qword_1000F0898);
  sub_1000552EC();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_100054F44(v4, (uint64_t)v17, type metadata accessor for AccountDataServerRequest);
  sub_100054F44(v24, v18, type metadata accessor for AccountDataServerRequest);
  if (sub_100064724((uint64_t)v17) == 1)
  {
    sub_100054F44((uint64_t)v17, (uint64_t)v11, type metadata accessor for AccountDataServerRequest);
    if (sub_100064724(v18) == 1)
    {
      sub_1000647FC(v18);
      static AccountIdentity.DSID.== infix(_:_:)(v11, v1);
      sub_10006438C(v1);
      sub_10006438C((uint64_t)v11);
      sub_100064810(v19, type metadata accessor for AccountDataServerRequest);
      goto LABEL_12;
    }

    int v20 = type metadata accessor for AccountDataServerRequest.Get;
    uint64_t v21 = (uint64_t)v11;
LABEL_7:
    sub_100054F80(v21, v20);
    sub_100054CE0((uint64_t)v17, &qword_1000F0898);
    goto LABEL_12;
  }

  sub_100054F44((uint64_t)v17, (uint64_t)v13, type metadata accessor for AccountDataServerRequest);
  if (sub_100064724(v18) == 1)
  {
    int v20 = type metadata accessor for AccountDataServerRequest.Put;
    uint64_t v21 = (uint64_t)v13;
    goto LABEL_7;
  }

  sub_100054E20(v18, v0, type metadata accessor for AccountDataServerRequest.Put);
  if ((static AccountIdentity.DSID.== infix(_:_:)(v13, v0) & 1) != 0
    && *(void *)&v13[*(int *)(v6 + 20)] == *(void *)(v0 + *(int *)(v6 + 20)))
  {
    sub_10005D288(*(_WORD *)&v13[*(int *)(v6 + 24)], *(unsigned __int16 *)(v0 + *(int *)(v6 + 24)));
  }

  sub_10006438C(v0);
  sub_10006438C((uint64_t)v13);
  sub_100064810(v22, type metadata accessor for AccountDataServerRequest);
LABEL_12:
  sub_1000642E8();
}

void sub_10005DB20(void (*a1)(_BYTE *))
{
}

void sub_10005DB4C()
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000559FC();
  sub_1000644DC();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_100064518();
  type metadata accessor for AccountDataServerResponse.Errors(v10);
  sub_1000552EC();
  __chkstk_darwin(v11);
  sub_100055840();
  sub_10005489C(&qword_1000F08A0);
  sub_1000552EC();
  __chkstk_darwin(v12);
  sub_100064394();
  uint64_t v14 = v0 + *(int *)(v13 + 48);
  sub_100054F44(v7, v0, type metadata accessor for AccountDataServerResponse.Errors);
  sub_100054F44(v5, v14, type metadata accessor for AccountDataServerResponse.Errors);
  uint64_t v15 = sub_10005489C(&qword_1000F06B8);
  sub_100064248(v0, 1LL, v15);
  if (!v16)
  {
    sub_100054F44(v0, v2, type metadata accessor for AccountDataServerResponse.Errors);
    sub_100064248(v14, 1LL, v15);
    if (!v16)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v14, v8);
      static Date.== infix(_:_:)(v2, v1);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v17(v1, v8);
      v17(v2, v8);
      sub_100054F80(v0, type metadata accessor for AccountDataServerResponse.Errors);
      goto LABEL_10;
    }

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v8);
LABEL_9:
    sub_100054CE0(v0, &qword_1000F08A0);
    goto LABEL_10;
  }

  sub_100064248(v14, 1LL, v15);
  if (!v16) {
    goto LABEL_9;
  }
  sub_100054F80(v0, type metadata accessor for AccountDataServerResponse.Errors);
LABEL_10:
  sub_1000642E8();
}

void sub_10005DCEC()
{
}

void sub_10005DCF4()
{
}

Swift::Int sub_10005DCFC()
{
  return Hasher._finalize()();
}

uint64_t sub_10005DD3C@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_10005D400(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_10005DD64(void *a1)
{
}

uint64_t sub_10005DD7C(__int16 *a1, unsigned __int16 *a2)
{
  return sub_10005D288(*a1, *a2);
}

void sub_10005DD88()
{
}

void sub_10005DDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

Swift::Int sub_10005DDC0()
{
  uint64_t v0 = type metadata accessor for AccountIdentity.DSID(0LL);
  sub_100055290( &qword_1000F0890,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID,  (uint64_t)&protocol conformance descriptor for AccountIdentity.DSID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

void sub_10005DE2C()
{
}

void sub_10005DE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10005DE58(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
}

uint64_t sub_10005DE98(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AccountDataServerResponse(0LL);
  sub_1000559FC();
  sub_100055290( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  sub_1000646AC();
  sub_1000647F4(*(void *)&v1[*(int *)(v3 + 24)]);
  return sub_1000646AC();
}

void sub_10005DF58(char *a1, char *a2)
{
  if ((v4 & 1) != 0
    && (uint64_t v5 = (int *)type metadata accessor for AccountDataServerResponse(0LL),
        (static Date.== infix(_:_:)(&a1[v5[5]], &a2[v5[5]]) & 1) != 0)
    && *(void *)&a1[v5[6]] == *(void *)&a2[v5[6]])
  {
    static Date.== infix(_:_:)(&a1[v5[7]], &a2[v5[7]]);
  }

  else
  {
    sub_100064370();
  }

Swift::Int sub_10005E000()
{
  uint64_t v1 = type metadata accessor for AccountDataServerResponse(0LL);
  sub_1000559FC();
  sub_100055290( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  sub_100064590(v2, v3, v4, v5, v6, v7, v8, v9, v19[0]);
  Hasher._combine(_:)(*(void *)&v0[*(int *)(v1 + 24)]);
  sub_100064590(v10, v11, v12, v13, v14, v15, v16, v17, v19[0]);
  return Hasher._finalize()();
}

Swift::Int sub_10005E0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  sub_100055290( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v6 = v5;
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  Hasher._combine(_:)(*(void *)&v2[*(int *)(a2 + 24)]);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v6);
  return Hasher._finalize()();
}

uint64_t sub_10005E1BC@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  else {
    char v3 = a1 & 1;
  }
  if ((a1 & 0xFF00) == 0x200) {
    char v4 = *(_BYTE *)(v2 + 193);
  }
  else {
    char v4 = HIBYTE(a1) & 1;
  }
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v7 = *(void *)(v2 + 72);
  char v8 = *(_BYTE *)(v2 + 88);
  char v33 = *(_BYTE *)(v2 + 192);
  char v9 = *(_BYTE *)(v2 + 89);
  *(void *)(a2 + 16) = *(void *)(v2 + 16);
  char v10 = *(_BYTE *)(v2 + 90);
  *(_BYTE *)(a2 + 24) = v3;
  char v11 = *(_BYTE *)(v2 + 91);
  *(void *)(a2 + 32) = v5;
  uint64_t v12 = *(void *)(v2 + 96);
  *(void *)(a2 + 72) = v7;
  LOBYTE(v7) = *(_BYTE *)(v2 + 104);
  *(_BYTE *)(a2 + 8_Block_object_dispose(&a9, 8) = v8;
  char v13 = *(_BYTE *)(v2 + 105);
  *(_BYTE *)(a2 + 89) = v9;
  char v14 = *(_BYTE *)(v2 + 106);
  *(_BYTE *)(a2 + 90) = v10;
  char v15 = *(_BYTE *)(v2 + 107);
  *(_BYTE *)(a2 + 91) = v11;
  char v16 = *(_BYTE *)(v2 + 108);
  *(void *)(a2 + 96) = v12;
  LOBYTE(v12) = *(_BYTE *)(v2 + 109);
  *(_BYTE *)(a2 + 104) = v7;
  *(_BYTE *)(a2 + 105) = v13;
  uint64_t v17 = *(void *)(v2 + 112);
  uint64_t v18 = *(void *)(v2 + 120);
  *(_BYTE *)(a2 + 106) = v14;
  *(_BYTE *)(a2 + 107) = v15;
  uint64_t v19 = *(void *)(v2 + 128);
  uint64_t v20 = *(void *)(v2 + 136);
  *(_BYTE *)(a2 + 10_Block_object_dispose(&a9, 8) = v16;
  *(_BYTE *)(a2 + 109) = v12;
  uint64_t v21 = *(void *)(v2 + 144);
  uint64_t v22 = *(void *)(v2 + 152);
  *(void *)(a2 + 112) = v17;
  LOBYTE(v12) = *(_BYTE *)(v2 + 160);
  *(void *)(a2 + 12_Block_object_dispose(&a9, 8) = v19;
  LOBYTE(v17) = *(_BYTE *)(v2 + 161);
  *(void *)(a2 + 144) = v21;
  *(_BYTE *)(a2 + 160) = v12;
  uint64_t v23 = *(void *)(v2 + 168);
  uint64_t v24 = *(void *)(v2 + 176);
  *(_BYTE *)(a2 + 161) = v17;
  uint64_t v25 = *(void *)(v2 + 184);
  *(void *)(a2 + 16_Block_object_dispose(&a9, 8) = v23;
  LOBYTE(v23) = *(_BYTE *)(v2 + 194);
  *(void *)(a2 + 184) = v25;
  *(_BYTE *)(a2 + 192) = v33;
  *(_BYTE *)(a2 + 193) = v4 & 1;
  uint64_t v26 = *(void *)(v2 + 200);
  uint64_t v27 = *(void *)(v2 + 208);
  *(_BYTE *)(a2 + 194) = v23;
  LOBYTE(v23) = *(_BYTE *)(v2 + 216);
  *(void *)(a2 + 200) = v26;
  *(void *)(a2 + 20_Block_object_dispose(&a9, 8) = v27;
  uint64_t v28 = *(void *)(v2 + 224);
  *(_BYTE *)(a2 + 216) = v23;
  *(void *)(a2 + 224) = v28;
  uint64_t v29 = *(void *)(v2 + 8);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v29;
  *(void *)(a2 + 64) = *(void *)(v2 + 64);
  __int128 v30 = *(_OWORD *)(v2 + 48);
  uint64_t v31 = *(void *)(v2 + 80);
  *(void *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = v30;
  *(void *)(a2 + 80) = v31;
  *(void *)(a2 + 120) = v18;
  *(void *)(a2 + 136) = v20;
  *(void *)(a2 + 152) = v22;
  *(void *)(a2 + 176) = v24;
  swift_bridgeObjectRetain(v29);
  sub_100064818();
  sub_10006482C();
  sub_10005568C();
  swift_bridgeObjectRetain(v31);
  sub_100055AD8();
  sub_1000642E0();
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  return swift_bridgeObjectRetain(v27);
}

uint64_t sub_10005E378()
{
  uint64_t v6 = sub_10008AAE8();
  uint64_t v5 = 0LL;
  __int128 v3 = 0u;
  __int128 v4 = 0u;
  sub_1000645B0((uint64_t)&v3);
  uint64_t v2 = sub_10008AAE8();
  uint64_t v5 = 0LL;
  __int128 v3 = 0u;
  __int128 v4 = 0u;
  sub_1000645B0((uint64_t)&v3);
  char v0 = sub_10005E420(v6, v2);
  sub_10005547C();
  swift_bridgeObjectRelease(v2);
  return v0 & 1;
}

uint64_t sub_10005E420(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v21 = result + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v22 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
LABEL_8:
      uint64_t v10 = *(void *)(v3 + 56);
      char v11 = (void *)(*(void *)(v3 + 48) + 16 * v9);
      uint64_t v12 = v11[1];
      *(void *)&__int128 v24 = *v11;
      *((void *)&v24 + 1) = v12;
      sub_1000585E0(v10 + 40 * v9, (uint64_t)&v25);
      swift_bridgeObjectRetain(v12);
      goto LABEL_30;
    }

    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v13 < v22)
    {
      unint64_t v14 = *(void *)(v21 + 8 * v13);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v4 + 2;
      ++v4;
      if (v13 + 1 < v22)
      {
        unint64_t v14 = *(void *)(v21 + 8 * v15);
        if (v14) {
          goto LABEL_15;
        }
        int64_t v4 = v13 + 1;
        if (v13 + 2 < v22)
        {
          unint64_t v14 = *(void *)(v21 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2LL;
            goto LABEL_12;
          }

          int64_t v4 = v13 + 2;
          if (v13 + 3 < v22)
          {
            unint64_t v14 = *(void *)(v21 + 8 * (v13 + 3));
            if (v14)
            {
              v13 += 3LL;
              goto LABEL_12;
            }

            int64_t v15 = v13 + 4;
            int64_t v4 = v13 + 3;
            if (v13 + 4 < v22) {
              break;
            }
          }
        }
      }
    }

LABEL_29:
    unint64_t v7 = 0LL;
    uint64_t v27 = 0LL;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v24 = 0u;
LABEL_30:
    sub_100054A6C((uint64_t)&v24, (uint64_t)&v28, &qword_1000F03D8);
    uint64_t v16 = v29;
    if (!v29) {
      return 1LL;
    }
    __int128 v24 = v30;
    __int128 v25 = v31;
    *(void *)&__int128 v26 = v32;
    unint64_t v17 = sub_10008D974(v28, v29);
    char v19 = v18;
    swift_bridgeObjectRelease(v16);
    if ((v19 & 1) == 0)
    {
      sub_100058670((uint64_t)&v24);
      return 0LL;
    }

    sub_1000585E0(*(void *)(a2 + 56) + 40 * v17, (uint64_t)v23);
    char v20 = static AnyHashable.== infix(_:_:)(v23, &v24);
    sub_100058670((uint64_t)v23);
    uint64_t result = sub_100058670((uint64_t)&v24);
    if ((v20 & 1) == 0) {
      return 0LL;
    }
  }

  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v15;
LABEL_12:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v4 = v13;
    goto LABEL_8;
  }

  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v22)
    {
      int64_t v4 = v22 - 1;
      goto LABEL_29;
    }

    unint64_t v14 = *(void *)(v21 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_12;
    }
  }

    unint64_t v17 = 0LL;
    uint64_t v23 = 1LL;
    int64_t v15 = v33;
    goto LABEL_5;
  }

  unint64_t v17 = 0LL;
  uint64_t v23 = 1LL;
  v15 += 3LL;
LABEL_5:
  __int128 v24 = 1LL;
  sub_100054998((uint64_t)v11, v23, 1LL, v3);
  __int128 v25 = v38;
  char *v1 = v13;
  v1[1] = v25;
  v1[2] = v37;
  v1[3] = v15;
  v1[4] = v17;
  __int128 v26 = (void (*)(uint64_t))v1[5];
  sub_100088D5C((uint64_t)v11, (uint64_t)v9, &qword_1000F0960);
  if (sub_100054CA8((uint64_t)v9, 1LL, v3) != 1)
  {
    uint64_t v27 = (uint64_t)v36;
    sub_100088D5C((uint64_t)v9, (uint64_t)v36, &qword_1000F0980);
    v26(v27);
    sub_100066CD0(v27, &qword_1000F0980);
    __int128 v24 = 0LL;
  }

  uint64_t v28 = sub_10005489C(&qword_1000F17C0);
  return sub_100054998(a1, v24, 1LL, v28);
}

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_10005E6CC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  Hasher._combine(_:)(*(void *)(v2 + 16));
  sub_1000642D0(*(_BYTE *)(v2 + 24));
  if (*(void *)(v2 + 40))
  {
    sub_100064488();
    sub_100055AD8();
    sub_100064564(a1);
    sub_100055C88();
  }

  else
  {
    sub_10006478C();
  }

  uint64_t v4 = *(void *)(v2 + 48);
  if (v4)
  {
    sub_100064488();
    sub_100055AD8();
    sub_100061480(a1, v4);
    sub_100055C88();
  }

  else
  {
    sub_10006478C();
  }

  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  sub_1000642D0(*(_BYTE *)(v2 + 88));
  sub_1000642D0(*(_BYTE *)(v2 + 89));
  sub_1000642D0(*(_BYTE *)(v2 + 90));
  sub_1000642D0(*(_BYTE *)(v2 + 91));
  Hasher._combine(_:)(*(void *)(v2 + 96));
  sub_1000642D0(*(_BYTE *)(v2 + 104));
  sub_1000642D0(*(_BYTE *)(v2 + 105));
  sub_1000642D0(*(_BYTE *)(v2 + 106));
  sub_1000642D0(*(_BYTE *)(v2 + 107));
  sub_1000642D0(*(_BYTE *)(v2 + 108));
  sub_1000642D0(*(_BYTE *)(v2 + 109));
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  sub_1000642D0(*(_BYTE *)(v2 + 160));
  int v5 = *(unsigned __int8 *)(v2 + 161);
  if (v5 == 2)
  {
    Swift::UInt8 v6 = 0;
  }

  else
  {
    Swift::UInt8 v6 = v5 & 1;
    sub_100064488();
  }

  Hasher._combine(_:)(v6);
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  if (*(_BYTE *)(v2 + 192) == 1)
  {
    sub_10006478C();
  }

  else
  {
    Swift::UInt64 v7 = *(void *)(v2 + 184);
    sub_100064488();
    Hasher._combine(_:)(v7);
  }

  sub_1000642D0(*(_BYTE *)(v2 + 193));
  sub_1000642D0(*(_BYTE *)(v2 + 194));
  sub_1000642E0();
  sub_100064224();
  sub_100055778();
  sub_1000642D0(*(_BYTE *)(v2 + 216));
  Hasher._combine(_:)(*(void *)(v2 + 224));
  sub_100064370();
}

void sub_10005E894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = v4 == *(void *)a2 && v5 == v6;
  if (v7 || (sub_10006434C(v4, v5, *(void *)a2, v6), sub_100064364(), (v8 & 1) != 0))
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16)
      && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a2 + 40);
      if (v9)
      {
        if (!v10) {
          goto LABEL_8;
        }
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a2 + 32);
        if (v11 != v12 || v9 != v10)
        {
          sub_10006434C(v11, v9, v12, v10);
          sub_100064364();
          if ((v14 & 1) == 0) {
            goto LABEL_8;
          }
        }
      }

      else if (v10)
      {
        goto LABEL_8;
      }

      int64_t v15 = *(void **)(a1 + 48);
      uint64_t v16 = *(void **)(a2 + 48);
      if (v15)
      {
        if (!v16 || (sub_100061334(v15, v16) & 1) == 0) {
          goto LABEL_8;
        }
      }

      else if (v16)
      {
        goto LABEL_8;
      }

      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 64);
      uint64_t v19 = *(void *)(a2 + 56);
      uint64_t v20 = *(void *)(a2 + 64);
      BOOL v21 = v17 == v19 && v18 == v20;
      if (v21 || (sub_10006434C(v17, v18, v19, v20), sub_100064364(), (v22 & 1) != 0))
      {
        uint64_t v23 = *(void *)(a1 + 72);
        uint64_t v24 = *(void *)(a1 + 80);
        uint64_t v25 = *(void *)(a2 + 72);
        uint64_t v26 = *(void *)(a2 + 80);
        BOOL v27 = v23 == v25 && v24 == v26;
        if (v27 || (sub_10006434C(v23, v24, v25, v26), sub_100064364(), (v28 & 1) != 0))
        {
          if (((*(unsigned __int8 *)(a1 + 88) ^ *(unsigned __int8 *)(a2 + 88)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 89) ^ *(unsigned __int8 *)(a2 + 89)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 90) ^ *(unsigned __int8 *)(a2 + 90)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 91) ^ *(unsigned __int8 *)(a2 + 91)) & 1) == 0
            && *(void *)(a1 + 96) == *(void *)(a2 + 96)
            && ((*(unsigned __int8 *)(a1 + 104) ^ *(unsigned __int8 *)(a2 + 104)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 105) ^ *(unsigned __int8 *)(a2 + 105)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 106) ^ *(unsigned __int8 *)(a2 + 106)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 107) ^ *(unsigned __int8 *)(a2 + 107)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 108) ^ *(unsigned __int8 *)(a2 + 108)) & 1) == 0
            && ((*(unsigned __int8 *)(a1 + 109) ^ *(unsigned __int8 *)(a2 + 109)) & 1) == 0)
          {
            uint64_t v29 = *(void *)(a1 + 112);
            uint64_t v30 = *(void *)(a1 + 120);
            uint64_t v31 = *(void *)(a2 + 112);
            uint64_t v32 = *(void *)(a2 + 120);
            BOOL v33 = v29 == v31 && v30 == v32;
            if (v33 || (sub_10006434C(v29, v30, v31, v32), sub_100064364(), (v34 & 1) != 0))
            {
              uint64_t v35 = *(void *)(a1 + 128);
              uint64_t v36 = *(void *)(a1 + 136);
              uint64_t v37 = *(void *)(a2 + 128);
              uint64_t v38 = *(void *)(a2 + 136);
              BOOL v39 = v35 == v37 && v36 == v38;
              if (v39 || (sub_10006434C(v35, v36, v37, v38), sub_100064364(), (v40 & 1) != 0))
              {
                uint64_t v41 = *(void *)(a1 + 144);
                uint64_t v42 = *(void *)(a1 + 152);
                uint64_t v43 = *(void *)(a2 + 144);
                uint64_t v44 = *(void *)(a2 + 152);
                BOOL v45 = v41 == v43 && v42 == v44;
                if (v45 || (sub_10006434C(v41, v42, v43, v44), sub_100064364(), (v46 & 1) != 0))
                {
                  if (((*(unsigned __int8 *)(a1 + 160) ^ *(unsigned __int8 *)(a2 + 160)) & 1) == 0)
                  {
                    int v47 = *(unsigned __int8 *)(a1 + 161);
                    int v48 = *(unsigned __int8 *)(a2 + 161);
                    if (v47 == 2)
                    {
                      if (v48 != 2) {
                        goto LABEL_8;
                      }
                    }

                    else
                    {
                      BOOL v49 = (v47 & 1) == 0;
                      if (v48 == 2 || ((v49 ^ v48) & 1) == 0) {
                        goto LABEL_8;
                      }
                    }

                    uint64_t v50 = *(void *)(a1 + 168);
                    uint64_t v51 = *(void *)(a1 + 176);
                    uint64_t v52 = *(void *)(a2 + 168);
                    uint64_t v53 = *(void *)(a2 + 176);
                    BOOL v54 = v50 == v52 && v51 == v53;
                    if (v54 || (sub_10006434C(v50, v51, v52, v53), sub_100064364(), (v55 & 1) != 0))
                    {
                      char v56 = *(_BYTE *)(a2 + 192);
                      if ((*(_BYTE *)(a1 + 192) & 1) != 0)
                      {
                        if (!*(_BYTE *)(a2 + 192)) {
                          goto LABEL_8;
                        }
                        goto LABEL_76;
                      }

                      if (*(void *)(a1 + 184) != *(void *)(a2 + 184)) {
                        char v56 = 1;
                      }
                      if ((v56 & 1) == 0)
                      {
LABEL_76:
                        if (((*(unsigned __int8 *)(a1 + 193) ^ *(unsigned __int8 *)(a2 + 193)) & 1) == 0
                          && ((*(unsigned __int8 *)(a1 + 194) ^ *(unsigned __int8 *)(a2 + 194)) & 1) == 0)
                        {
                          uint64_t v57 = *(void *)(a1 + 200);
                          uint64_t v58 = *(void *)(a1 + 208);
                          uint64_t v59 = *(void *)(a2 + 200);
                          uint64_t v60 = *(void *)(a2 + 208);
                          if (v57 != v59 || v58 != v60)
                          {
                            sub_10006434C(v57, v58, v59, v60);
                            sub_100064364();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_10005EB94(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E756F6363416361LL && a2 == 0xED0000656D614E74LL)
  {
    unint64_t v5 = 0xED0000656D614E74LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F6363416361LL, 0xED0000656D614E74LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v7 = 0x80000001000AD3C0LL;
    if (a2 == 0x80000001000AD3C0LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001000AD3C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x79616C506F747561LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
    goto LABEL_21;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C506F747561LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v10 = 0x80000001000AD460LL;
    if (a2 == 0x80000001000AD460LL) {
      goto LABEL_26;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000AD460LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_26:
    swift_bridgeObjectRelease(v10);
    return 3LL;
  }

  if (a1 == 0x72656D75736E6F63LL && a2 == 0xEE007473694C6449LL)
  {
    unint64_t v12 = 0xEE007473694C6449LL;
    goto LABEL_34;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656D75736E6F63LL, 0xEE007473694C6449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v12);
    return 4LL;
  }

  if (a1 == 0x6142746964657263LL && a2 == 0xED000065636E616CLL)
  {
    unint64_t v14 = 0xED000065636E616CLL;
    goto LABEL_42;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6142746964657263LL, 0xED000065636E616CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v14);
    return 5LL;
  }

  if (a1 == 0x6D614E7473726966LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v16 = 0xE900000000000065LL;
    goto LABEL_50;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E7473726966LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v16);
    return 6LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x80000001000AD480LL)
  {
    unint64_t v17 = 0x80000001000AD480LL;
LABEL_56:
    swift_bridgeObjectRelease(v17);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001000AD480LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_56;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v18 = 0x80000001000AD4A0LL;
    if (a2 == 0x80000001000AD4A0LL) {
      goto LABEL_61;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001000AD4A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v18);
    return 8LL;
  }

  if (a1 == 0xD000000000000023LL && a2 == 0x80000001000AD4C0LL)
  {
    unint64_t v19 = 0x80000001000AD4C0LL;
LABEL_67:
    swift_bridgeObjectRelease(v19);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x80000001000AD4C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
    goto LABEL_67;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x80000001000AD4F0LL)
  {
    unint64_t v20 = 0x80000001000AD4F0LL;
LABEL_73:
    swift_bridgeObjectRelease(v20);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001000AD4F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
    goto LABEL_73;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v21 = 0x80000001000AD510LL;
    if (a2 == 0x80000001000AD510LL) {
      goto LABEL_78;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000AD510LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_78:
    swift_bridgeObjectRelease(v21);
    return 11LL;
  }

  if (a1 == 0x426F546B73417369LL && a2 == 0xEA00000000007975LL)
  {
    unint64_t v23 = 0xEA00000000007975LL;
    goto LABEL_86;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x426F546B73417369LL, 0xEA00000000007975LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v23);
    return 12LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000001000AD530LL)
  {
    unint64_t v24 = 0x80000001000AD530LL;
LABEL_92:
    swift_bridgeObjectRelease(v24);
    return 13LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001000AD530LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
    goto LABEL_92;
  }

  if (a1 == 0x436461426E497369LL && a2 == 0xED00007469646572LL)
  {
    unint64_t v26 = 0xED00007469646572LL;
    goto LABEL_100;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x436461426E497369LL, 0xED00007469646572LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
LABEL_100:
    swift_bridgeObjectRelease(v26);
    return 14LL;
  }

  if (a1 == 0x696D61466E497369LL && a2 == 0xEA0000000000796CLL)
  {
    unint64_t v28 = 0xEA0000000000796CLL;
    goto LABEL_108;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696D61466E497369LL, 0xEA0000000000796CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
LABEL_108:
    swift_bridgeObjectRelease(v28);
    return 15LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v29 = 0x80000001000AD550LL;
    if (a2 == 0x80000001000AD550LL) {
      goto LABEL_113;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000AD550LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
LABEL_113:
    swift_bridgeObjectRelease(v29);
    return 16LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v30 = 0x80000001000AD570LL;
    if (a2 == 0x80000001000AD570LL) {
      goto LABEL_118;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001000AD570LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
LABEL_118:
    swift_bridgeObjectRelease(v30);
    return 17LL;
  }

  if (a1 == 0x746E756F436F7369LL && a2 == 0xEE0065646F437972LL)
  {
    unint64_t v32 = 0xEE0065646F437972LL;
    goto LABEL_126;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F436F7369LL, 0xEE0065646F437972LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v32 = a2;
LABEL_126:
    swift_bridgeObjectRelease(v32);
    return 18LL;
  }

  if (a1 == 0x6E756F43326F7369LL && a2 == 0xEF65646F43797274LL)
  {
    unint64_t v34 = 0xEF65646F43797274LL;
    goto LABEL_134;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F43326F7369LL, 0xEF65646F43797274LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v34 = a2;
LABEL_134:
    swift_bridgeObjectRelease(v34);
    return 19LL;
  }

  if (a1 == 0x6E756F43336F7369LL && a2 == 0xEF65646F43797274LL)
  {
    unint64_t v36 = 0xEF65646F43797274LL;
    goto LABEL_142;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F43336F7369LL, 0xEF65646F43797274LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v36 = a2;
LABEL_142:
    swift_bridgeObjectRelease(v36);
    return 20LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v37 = 0x80000001000AD590LL;
    if (a2 == 0x80000001000AD590LL) {
      goto LABEL_147;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001000AD590LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v37 = a2;
LABEL_147:
    swift_bridgeObjectRelease(v37);
    return 21LL;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x80000001000AD5B0LL)
  {
    unint64_t v38 = 0x80000001000AD5B0LL;
LABEL_153:
    swift_bridgeObjectRelease(v38);
    return 22LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x80000001000AD5B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v38 = a2;
    goto LABEL_153;
  }

  if (a1 == 0x656D614E7473616CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v40 = 0xE800000000000000LL;
    goto LABEL_161;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E7473616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v40 = a2;
LABEL_161:
    swift_bridgeObjectRelease(v40);
    return 23LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v41 = 0x80000001000AD5D0LL;
    if (a2 == 0x80000001000AD5D0LL) {
      goto LABEL_166;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000AD5D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v41 = a2;
LABEL_166:
    swift_bridgeObjectRelease(v41);
    return 24LL;
  }

  if (a1 == 0x6C616E6F73726570LL && a2 == 0xEF6E6F6974617A69LL)
  {
    unint64_t v43 = 0xEF6E6F6974617A69LL;
    goto LABEL_174;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E6F73726570LL, 0xEF6E6F6974617A69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v43 = a2;
LABEL_174:
    swift_bridgeObjectRelease(v43);
    return 25LL;
  }

  if (a1 == 0x65446C6961746572LL && a2 == 0xEA00000000006F6DLL)
  {
    unint64_t v45 = 0xEA00000000006F6DLL;
    goto LABEL_182;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65446C6961746572LL, 0xEA00000000006F6DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v45 = a2;
LABEL_182:
    swift_bridgeObjectRelease(v45);
    return 26LL;
  }

  if (a1 == 0x6F726665726F7473LL && a2 == 0xEC0000006449746ELL)
  {
    unint64_t v47 = 0xEC0000006449746ELL;
    goto LABEL_190;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F726665726F7473LL, 0xEC0000006449746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v47 = a2;
LABEL_190:
    swift_bridgeObjectRelease(v47);
    return 27LL;
  }

  if (a1 == 0x6968547265646E75LL && a2 == 0xED00006E65657472LL)
  {
    unint64_t v49 = 0xED00006E65657472LL;
    goto LABEL_198;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6968547265646E75LL, 0xED00006E65657472LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v49 = a2;
LABEL_198:
    swift_bridgeObjectRelease(v49);
    return 28LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x80000001000AD5F0LL)
  {
    swift_bridgeObjectRelease(0x80000001000AD5F0LL);
    return 29LL;
  }

  else
  {
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001000AD5F0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v50 & 1) != 0) {
      return 29LL;
    }
    else {
      return 30LL;
    }
  }

uint64_t sub_10005F824()
{
  return 30LL;
}

void sub_10005F82C(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100064270(a1);
  Hasher._combine(_:)(v1);
  sub_1000642C8();
  sub_100064218();
}

uint64_t sub_10005F85C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005F89C + 4 * byte_1000A4BFA[a1]))( 0x6E756F6363416361LL,  0xED0000656D614E74LL);
}

unint64_t sub_10005F89C()
{
  return 0xD000000000000013LL;
}

void sub_10005FBA4()
{
  uint64_t v4 = v0;
  uint64_t v5 = sub_10005489C(&qword_1000F0560);
  sub_1000644DC();
  __chkstk_darwin(v6);
  sub_100064660();
  unint64_t v7 = sub_10006479C();
  sub_1000645F8((uint64_t)&type metadata for AccountDataPayload.CodingKeys, v8, v7);
  uint64_t v9 = *v0;
  uint64_t v10 = v0[1];
  v15[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, v10, v15, v5);
  if (!v1)
  {
    sub_10006430C(v0[2], 1);
    sub_100064190(*((unsigned __int8 *)v0 + 24), 2);
    sub_100064704(3);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10006435C((uint64_t)(v0 + 6), (uint64_t)v16);
    sub_10006435C((uint64_t)v16, (uint64_t)v15);
    char v14 = 4;
    uint64_t v11 = sub_10005489C(&qword_1000F0548);
    uint64_t v12 = sub_100061928( &qword_1000F0568,  (void (*)(void))sub_100061990,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v14, v5, v11, v12);
    sub_1000641E4(v4[7], v4[8], 5);
    sub_1000641E4(v4[9], v4[10], 6);
    sub_100064190(*((unsigned __int8 *)v4 + 88), 7);
    sub_100064190(*((unsigned __int8 *)v4 + 89), 8);
    sub_100064190(*((unsigned __int8 *)v4 + 90), 9);
    sub_100064190(*((unsigned __int8 *)v4 + 91), 10);
    sub_10006430C(v4[12], 11);
    sub_100064190(*((unsigned __int8 *)v4 + 104), 12);
    sub_100064190(*((unsigned __int8 *)v4 + 105), 13);
    sub_100064190(*((unsigned __int8 *)v4 + 106), 14);
    sub_100064190(*((unsigned __int8 *)v4 + 107), 15);
    sub_100064190(*((unsigned __int8 *)v4 + 108), 16);
    sub_100064190(*((unsigned __int8 *)v4 + 109), 17);
    sub_1000641E4(v4[14], v4[15], 18);
    sub_1000641E4(v4[16], v4[17], 19);
    sub_1000641E4(v4[18], v4[19], 20);
    sub_100064190(*((unsigned __int8 *)v4 + 160), 21);
    uint64_t v13 = *((unsigned __int8 *)v4 + 161);
    v15[0] = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v15, v5);
    sub_1000641E4(v4[21], v4[22], 23);
    sub_100064704(24);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100064190(*((unsigned __int8 *)v4 + 193), 25);
    sub_100064190(*((unsigned __int8 *)v4 + 194), 26);
    sub_1000641E4(v4[25], v4[26], 27);
    sub_100064190(*((unsigned __int8 *)v4 + 216), 28);
    sub_10006430C(v4[28], 29);
  }

  sub_100064694(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100064570();
}

void sub_10005FF14(uint64_t a1)
{
}

void sub_10005FF3C()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10005489C(&qword_1000F0538);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100064618();
  uint64_t v8 = *(void *)(v3 + 24);
  unint64_t v9 = sub_10006479C();
  sub_10006471C( (uint64_t)&type metadata for AccountDataPayload.CodingKeys,  (uint64_t)&type metadata for AccountDataPayload.CodingKeys,  v9,  v8);
  if (v0)
  {
    sub_10006474C();
  }

  else
  {
    uint64_t v76 = v5;
    LOBYTE(v78[0]) = 0;
    uint64_t v10 = sub_1000643F0();
    uint64_t v12 = v11;
    sub_100064504(v11, 1);
    uint64_t v71 = v12;
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v78, v6);
    LOBYTE(v78[0]) = 2;
    char v64 = sub_10006433C();
    uint64_t v65 = v13;
    LOBYTE(v78[0]) = 3;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v78, v6);
    uint64_t v16 = v15;
    uint64_t v63 = v14;
    uint64_t v17 = sub_10005489C(&qword_1000F0548);
    LOBYTE(v77[0]) = 4;
    uint64_t v18 = sub_100061928( &qword_1000F0550,  (void (*)(void))sub_10006183C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10005568C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, v77, v6, v17, v18);
    uint64_t v70 = v16;
    uint64_t v19 = v78[0];
    LOBYTE(v78[0]) = 5;
    sub_1000642E0();
    uint64_t v20 = sub_1000643F0();
    uint64_t v69 = v19;
    uint64_t v22 = v21;
    uint64_t v62 = v20;
    sub_100064504(v21, 6);
    uint64_t v23 = sub_1000643F0();
    uint64_t v68 = v22;
    uint64_t v25 = v24;
    uint64_t v61 = v23;
    sub_100064504(v24, 7);
    uint64_t v67 = v25;
    char v60 = sub_10006433C();
    LOBYTE(v78[0]) = 8;
    char v59 = sub_10006433C();
    LOBYTE(v78[0]) = 9;
    LOBYTE(v22) = sub_10006433C();
    char v58 = sub_1000641A8(10);
    LOBYTE(v78[0]) = 11;
    uint64_t v26 = sub_100064474();
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)(v26, v27);
    char v57 = sub_1000641A8(12);
    char v56 = sub_1000641A8(13);
    char v55 = sub_1000641A8(14);
    char v54 = sub_1000641A8(15);
    char v53 = sub_1000641A8(16);
    char v52 = sub_1000641A8(17);
    LOBYTE(v78[0]) = 18;
    uint64_t v29 = sub_10006425C();
    uint64_t v75 = v30;
    uint64_t v31 = v29;
    LOBYTE(v78[0]) = 19;
    swift_bridgeObjectRetain(v30);
    uint64_t v51 = sub_10006425C();
    uint64_t v74 = v32;
    LOBYTE(v78[0]) = 20;
    swift_bridgeObjectRetain(v32);
    uint64_t v50 = sub_10006425C();
    uint64_t v73 = v33;
    LOBYTE(v78[0]) = 21;
    swift_bridgeObjectRetain(v33);
    char v49 = sub_1000641C0();
    LOBYTE(v78[0]) = 22;
    uint64_t v34 = sub_100064474();
    char v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v35);
    LOBYTE(v78[0]) = 23;
    uint64_t v47 = sub_10006425C();
    uint64_t v72 = v36;
    LOBYTE(v78[0]) = 24;
    swift_bridgeObjectRetain(v36);
    uint64_t v37 = sub_100064474();
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v37);
    char v46 = v38;
    char v124 = v38 & 1;
    char v44 = sub_1000641A8(25);
    char v43 = sub_1000641A8(26);
    LOBYTE(v78[0]) = 27;
    uint64_t v42 = sub_10006425C();
    uint64_t v66 = v39;
    LOBYTE(v78[0]) = 28;
    swift_bridgeObjectRetain(v39);
    char v41 = sub_1000641C0();
    char v122 = 29;
    uint64_t v40 = KeyedDecodingContainer.decode(_:forKey:)(&v122, v6);
    v59 &= 1u;
    v55 &= 1u;
    v56 &= 1u;
    v52 &= 1u;
    v54 &= 1u;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
    LOBYTE(v77[24]) = v46 & 1;
    v77[0] = v10;
    v77[1] = v71;
    v77[2] = v65;
    LOBYTE(v77[3]) = v64 & 1;
    v77[4] = v63;
    v77[5] = v70;
    v77[6] = v69;
    v77[7] = v62;
    v77[8] = v68;
    v77[9] = v61;
    v77[10] = v67;
    LOBYTE(v77[11]) = v60 & 1;
    BYTE1(v77[11]) = v59;
    BYTE2(v77[11]) = v22 & 1;
    BYTE3(v77[11]) = v58 & 1;
    v77[12] = v28;
    LOBYTE(v77[13]) = v57 & 1;
    BYTE1(v77[13]) = v56;
    BYTE2(v77[13]) = v55;
    BYTE3(v77[13]) = v54;
    BYTE4(v77[13]) = v53 & 1;
    BYTE5(v77[13]) = v52;
    v77[14] = v31;
    v77[15] = v75;
    v77[16] = v51;
    v77[17] = v74;
    v77[18] = v50;
    v77[19] = v73;
    LOBYTE(v77[20]) = v49 & 1;
    BYTE1(v77[20]) = v48;
    v77[21] = v47;
    v77[22] = v72;
    v77[23] = v45;
    BYTE1(v77[24]) = v44 & 1;
    BYTE2(v77[24]) = v43 & 1;
    v77[25] = v42;
    v77[26] = v66;
    LOBYTE(v77[27]) = v41 & 1;
    v77[28] = v40;
    sub_1000584C0(v77);
    swift_bridgeObjectRelease(v71);
    sub_100064834();
    sub_100064834();
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v67);
    sub_10006443C();
    sub_100055868();
    sub_100055694();
    sub_1000556B4();
    sub_100055778();
    sub_10006474C();
    v78[0] = v10;
    v78[1] = v71;
    v78[2] = v65;
    char v79 = v64 & 1;
    uint64_t v81 = v63;
    uint64_t v82 = v70;
    uint64_t v83 = v69;
    uint64_t v84 = v62;
    uint64_t v85 = v68;
    uint64_t v86 = v61;
    *(_DWORD *)uint64_t v80 = v127[0];
    *(_DWORD *)&v80[3] = *(_DWORD *)((char *)v127 + 3);
    uint64_t v87 = v67;
    char v88 = v60 & 1;
    char v89 = v59;
    char v90 = v22 & 1;
    char v91 = v58 & 1;
    uint64_t v92 = v28;
    char v93 = v57 & 1;
    char v94 = v56;
    char v95 = v55;
    char v96 = v54;
    char v97 = v53 & 1;
    char v98 = v52;
    uint64_t v99 = v31;
    uint64_t v100 = v75;
    uint64_t v101 = v51;
    uint64_t v102 = v74;
    uint64_t v103 = v50;
    uint64_t v104 = v73;
    char v105 = v49 & 1;
    char v106 = v48;
    int v107 = v125;
    __int16 v108 = v126;
    uint64_t v109 = v47;
    uint64_t v110 = v72;
    uint64_t v111 = v45;
    char v112 = v124;
    char v113 = v44 & 1;
    char v114 = v43 & 1;
    int v115 = *(_DWORD *)&v123[7];
    char v116 = v123[11];
    uint64_t v117 = v42;
    uint64_t v118 = v66;
    char v119 = v41 & 1;
    *(_DWORD *)&v120[3] = *(_DWORD *)&v123[3];
    *(_DWORD *)uint64_t v120 = *(_DWORD *)v123;
    uint64_t v121 = v40;
    sub_100061878(v78);
    memcpy(v76, v77, 0xE8uLL);
  }

  sub_1000554F4();
}

uint64_t sub_1000609FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease(a5);
}

void sub_100060A60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if ((v12 || (sub_10006434C(a1, a2, a5, a6), sub_100064364(), (v13 & 1) != 0))
    && (a3 == a7 ? (BOOL v14 = a4 == a8) : (BOOL v14 = 0), !v14))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0LL);
  }

  else
  {
    sub_100064370();
  }

BOOL sub_100060ADC(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100060AEC(uint64_t a1, char a2)
{
}

uint64_t sub_100060B10(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x72656D75736E6F63LL && a2 == 0xEA00000000006449LL)
  {
    unint64_t v5 = 0xEA00000000006449LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656D75736E6F63LL, 0xEA00000000006449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x63617073656D616ELL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x63617073656D616ELL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100060C14()
{
  return 2LL;
}

Swift::Int sub_100060C1C(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100060C60(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x63617073656D616ELL;
  }
  else {
    return 0x72656D75736E6F63LL;
  }
}

void sub_100060CA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  uint64_t v39 = v26;
  uint64_t v40 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = sub_10005489C(&qword_1000F0888);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_100064648();
  uint64_t v37 = v33[3];
  uint64_t v36 = v33[4];
  sub_100054838(v33, v37);
  unint64_t v38 = sub_100063C5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ConsumerIDPayload.CodingKeys,  &type metadata for ConsumerIDPayload.CodingKeys,  v38,  v37,  v36);
  HIBYTE(a12) = 0;
  sub_1000646DC(v31, v29, (uint64_t)&a12 + 1);
  if (!v22)
  {
    sub_10006472C();
    sub_1000646DC(v39, v40, (uint64_t)&a12);
  }

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v23, v34);
  sub_1000554F4();
}

Swift::Int sub_100060D80(uint64_t a1)
{
  uint64_t v1 = sub_100064818();
  sub_100064424(v1);
  sub_10005547C();
  return sub_1000642C8();
}

uint64_t sub_100060DDC()
{
  uint64_t v12 = v1;
  uint64_t v13 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = sub_10005489C(&qword_1000F0878);
  __chkstk_darwin(v5);
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  sub_100054838(v4, v6);
  unint64_t v8 = sub_100063C5C();
  sub_10006471C( (uint64_t)&type metadata for ConsumerIDPayload.CodingKeys,  (uint64_t)&type metadata for ConsumerIDPayload.CodingKeys,  v8,  v6);
  if (v0)
  {
    sub_100064774();
  }

  else
  {
    HIBYTE(v11) = 0;
    uint64_t v7 = sub_1000646CC((uint64_t)&v11 + 1);
    sub_10006472C();
    swift_bridgeObjectRetain(v10);
    sub_1000646CC((uint64_t)&v11);
    sub_100064444();
    sub_10006482C();
    sub_100064774();
    sub_100064834();
    sub_1000556B4();
  }

  return v7;
}

void sub_100060F1C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  sub_1000644BC(a1);
  Hasher._combine(_:)(v2);
  sub_1000642C8();
  sub_100064218();
}

uint64_t sub_100060F4C()
{
  return sub_10005F85C(*v0);
}

uint64_t sub_100060F54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10005EB94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100060F78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10005F824();
  *a1 = result;
  return result;
}

uint64_t sub_100060F9C(uint64_t a1)
{
  unint64_t v2 = sub_1000617BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060FC4(uint64_t a1)
{
  unint64_t v2 = sub_1000617BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100060FEC(void *a1@<X8>)
{
  if (!v1) {
    memcpy(a1, __src, 0xE8uLL);
  }
}

void sub_10006103C()
{
}

Swift::Int sub_100061094()
{
  return Hasher._finalize()();
}

unint64_t sub_1000610D4()
{
  unint64_t result = qword_1000F04B0;
  if (!qword_1000F04B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4CA4, &unk_1000D8AC8);
    atomic_store(result, (unint64_t *)&qword_1000F04B0);
  }

  return result;
}

void sub_100061110()
{
}

BOOL sub_10006113C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100060ADC(*a1, *a2);
}

Swift::Int sub_100061148()
{
  return sub_100060C1C(*v0);
}

void sub_100061150(uint64_t a1)
{
}

Swift::Int sub_100061158()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100061198()
{
  return sub_100060C60(*v0);
}

uint64_t sub_1000611A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100060B10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000611C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100060C14();
  *a1 = result;
  return result;
}

uint64_t sub_1000611E8(uint64_t a1)
{
  unint64_t v2 = sub_100063C5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061210(uint64_t a1)
{
  unint64_t v2 = sub_100063C5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100061238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100060DDC();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }

  return result;
}

#error "100061274: call analysis failed (funcsize=7)"
Swift::Int sub_100061280()
{
  uint64_t *v0;
  return sub_100060D80(*v0);
}

uint64_t sub_10006128C(uint64_t a1)
{
  return sub_1000609FC(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_100061298()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)(v6);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_100061318(uint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_100061334(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t result = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[7];
  BOOL v13 = result == v9 && v6 == v10;
  if (v13
    || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v6, v9, v10, 0LL), result = 0LL, (v14 & 1) != 0))
  {
    BOOL v15 = v7 == v11 && v8 == v12;
    if (v15 || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0LL), result = 0LL, (v16 & 1) != 0))
    {
      if (v2 == 1) {
        return 1LL;
      }
      uint64_t v17 = a2 + 11;
      uint64_t v18 = a1 + 11;
      unint64_t v19 = 1LL;
      while (v19 < v2)
      {
        uint64_t v20 = *(v18 - 3);
        uint64_t v21 = *(v18 - 2);
        uint64_t v22 = *(v18 - 1);
        uint64_t v23 = *v18;
        uint64_t v24 = *(v17 - 3);
        uint64_t v25 = *(v17 - 2);
        uint64_t v26 = *(v17 - 1);
        uint64_t v27 = *v17;
        BOOL v28 = v20 == v24 && v21 == v25;
        if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v24, v25, 0LL) & 1) == 0) {
          return 0LL;
        }
        BOOL v29 = v22 == v26 && v23 == v27;
        if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v26, v27, 0LL) & 1) == 0) {
          return 0LL;
        }
        ++v19;
        v17 += 4;
        v18 += 4;
        uint64_t result = 1LL;
        if (v2 == v19) {
          return result;
        }
      }

      __break(1u);
    }
  }

  return result;
}

void sub_100061480(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a2 + 56);
    do
    {
      uint64_t v6 = *(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v8 = *(v5 - 1);
      uint64_t v9 = *v5;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v8, v9);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease_n(v9, 2LL);
      v5 += 4;
      --v4;
    }

    while (v4);
  }

unint64_t sub_10006152C()
{
  unint64_t result = qword_1000F04D0;
  if (!qword_1000F04D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5568, &type metadata for AccountDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F04D0);
  }

  return result;
}

unint64_t sub_100061568()
{
  unint64_t result = qword_1000F04D8;
  if (!qword_1000F04D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4D44, &unk_1000D8AC8);
    atomic_store(result, (unint64_t *)&qword_1000F04D8);
  }

  return result;
}

unint64_t sub_1000615A4()
{
  unint64_t result = qword_1000F04E8;
  if (!qword_1000F04E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5540, &unk_1000D8D98);
    atomic_store(result, (unint64_t *)&qword_1000F04E8);
  }

  return result;
}

unint64_t sub_1000615E0()
{
  unint64_t result = qword_1000F0500;
  if (!qword_1000F0500)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4D1C, &unk_1000D8AC8);
    atomic_store(result, (unint64_t *)&qword_1000F0500);
  }

  return result;
}

unint64_t sub_10006161C()
{
  unint64_t result = qword_1000F0510;
  if (!qword_1000F0510)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5518, &unk_1000D8D98);
    atomic_store(result, (unint64_t *)&qword_1000F0510);
  }

  return result;
}

uint64_t sub_100061658(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 232);
  uint64_t v3 = *(void *)(a1 + 240);
  uint64_t v4 = *(void *)(a1 + 248);
  uint64_t v5 = *(void *)(a1 + 256);
  uint64_t v6 = *(void *)(a1 + 264);
  uint64_t v7 = *(void *)(a1 + 272);
  uint64_t v8 = *(void *)(a1 + 280);
  uint64_t v9 = *(void *)(a1 + 288);
  __int128 v19 = *(_OWORD *)(a1 + 312);
  __int128 v20 = *(_OWORD *)(a1 + 296);
  __int128 v17 = *(_OWORD *)(a1 + 344);
  __int128 v18 = *(_OWORD *)(a1 + 328);
  __int128 v15 = *(_OWORD *)(a1 + 376);
  __int128 v16 = *(_OWORD *)(a1 + 360);
  __int128 v14 = *(_OWORD *)(a1 + 392);
  __int128 v12 = *(_OWORD *)(a1 + 424);
  __int128 v13 = *(_OWORD *)(a1 + 408);
  __int128 v11 = *(_OWORD *)(a1 + 440);
  sub_1000549BC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208));
  sub_1000549BC( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v20,  *((uint64_t *)&v20 + 1),  v19,  *((uint64_t *)&v19 + 1),  v18,  *((uint64_t *)&v18 + 1),  v17,  *((uint64_t *)&v17 + 1),  v16,  *((uint64_t *)&v16 + 1),  v15,  *((uint64_t *)&v15 + 1),  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v11);
  return a1;
}

unint64_t sub_1000617BC()
{
  unint64_t result = qword_1000F0540;
  if (!qword_1000F0540)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A54C8, &type metadata for AccountDataPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0540);
  }

  return result;
}

uint64_t sub_1000617F8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10006183C()
{
  unint64_t result = qword_1000F0558;
  if (!qword_1000F0558)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A54A0, &unk_1000D8E18);
    atomic_store(result, (unint64_t *)&qword_1000F0558);
  }

  return result;
}

void *sub_100061878(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[15];
  uint64_t v8 = a1[17];
  uint64_t v9 = a1[19];
  uint64_t v10 = a1[22];
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100061928(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000617F8(&qword_1000F0548);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100061990()
{
  unint64_t result = qword_1000F0570;
  if (!qword_1000F0570)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5478, &unk_1000D8E18);
    atomic_store(result, (unint64_t *)&qword_1000F0570);
  }

  return result;
}

uint64_t *sub_1000619D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(_WORD *)((char *)a1 + v_Block_object_dispose(&a9, 8) = *(_WORD *)((char *)a2 + v8);
  }

  return a1;
}

uint64_t sub_100061A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100061AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (_BYTE *)(a1 + v7);
  uint64_t v9 = (_BYTE *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  return a1;
}

uint64_t sub_100061B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100061BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100061C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061C14);
}

void sub_100061C14(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(sub_100064354() - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v3 = sub_100064678();
    sub_100064300(v3, a2, v4);
  }

  else
  {
    sub_100064370();
  }

uint64_t sub_100061C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100061C9C);
}

void sub_100061C9C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (v7)
  {
    uint64_t v8 = sub_1000647C0();
    sub_1000642A8(v8, v9, v10, v11);
  }

  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + objc_destroyWeak((id *)(v2 - 24)) = a2 + 2;
    sub_100064370();
  }

uint64_t type metadata accessor for AccountDataServerRequest.Put(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F05D0, (uint64_t)&nominal type descriptor for AccountDataServerRequest.Put);
}

uint64_t sub_100061CFC(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountIdentity.DSID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_1000A4E28;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100061D7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v8 = type metadata accessor for AccountIdentity.DSID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v13 = type metadata accessor for AccountDataServerRequest.Put(0LL);
      *(uint64_t *)((char *)a1 + *(int *)(v13 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v13 + 20));
      *(_WORD *)((char *)a1 + *(int *)(v13 + objc_destroyWeak((id *)(v2 - 24)) = *(_WORD *)((char *)a2 + *(int *)(v13 + 24));
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

uint64_t sub_100061E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v9 = type metadata accessor for AccountDataServerRequest.Put(0LL);
    uint64_t v8 = 0LL;
    *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
    *(_WORD *)(a1 + *(int *)(v9 + objc_destroyWeak((id *)(v2 - 24)) = *(_WORD *)(a2 + *(int *)(v9 + 24));
  }

  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_100061EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100054F80(a1, type metadata accessor for AccountDataServerRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v9 = type metadata accessor for AccountDataServerRequest.Put(0LL);
      uint64_t v8 = 0LL;
      *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
      *(_WORD *)(a1 + *(int *)(v9 + objc_destroyWeak((id *)(v2 - 24)) = *(_WORD *)(a2 + *(int *)(v9 + 24));
    }

    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }

  return a1;
}

uint64_t type metadata accessor for AccountDataServerRequest(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F0680, (uint64_t)&nominal type descriptor for AccountDataServerRequest);
}

uint64_t sub_100061FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v9 = type metadata accessor for AccountDataServerRequest.Put(0LL);
    uint64_t v8 = 0LL;
    *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
    *(_WORD *)(a1 + *(int *)(v9 + objc_destroyWeak((id *)(v2 - 24)) = *(_WORD *)(a2 + *(int *)(v9 + 24));
  }

  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_10006205C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100054F80(a1, type metadata accessor for AccountDataServerRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v9 = type metadata accessor for AccountDataServerRequest.Put(0LL);
      uint64_t v8 = 0LL;
      *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
      *(_WORD *)(a1 + *(int *)(v9 + objc_destroyWeak((id *)(v2 - 24)) = *(_WORD *)(a2 + *(int *)(v9 + 24));
    }

    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }

  return a1;
}

uint64_t sub_100062120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100062130(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountDataServerRequest.Put(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AccountIdentity.DSID(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1000621B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = sub_10005489C(&qword_1000F06B8);
    if (sub_100054CA8((uint64_t)a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      sub_100054998((uint64_t)a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_100062274(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F06B8);
  uint64_t result = sub_100054CA8(a1, 1LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_1000622D4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10005489C(&qword_1000F06B8);
  if (sub_100054CA8((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    sub_100054998((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_100062374(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10005489C(&qword_1000F06B8);
  int v7 = sub_100054CA8((uint64_t)a1, 1LL, v6);
  int v8 = sub_100054CA8((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Date(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 24LL))(a1, a2, v11);
      return a1;
    }

    sub_100054CE0((uint64_t)a1, &qword_1000F06B8);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
  sub_100054998((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

void *sub_10006246C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10005489C(&qword_1000F06B8);
  if (sub_100054CA8((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    sub_100054998((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_10006250C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10005489C(&qword_1000F06B8);
  int v7 = sub_100054CA8((uint64_t)a1, 1LL, v6);
  int v8 = sub_100054CA8((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Date(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 40LL))(a1, a2, v11);
      return a1;
    }

    sub_100054CE0((uint64_t)a1, &qword_1000F06B8);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
  sub_100054998((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_100062604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062610);
}

void sub_100062610()
{
  uint64_t v2 = sub_10005489C(&qword_1000F06B8);
  sub_100054CA8(v1, v0, v2);
  sub_100055744();
}

uint64_t sub_100062650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006265C);
}

uint64_t sub_10006265C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_10005489C(&qword_1000F06B8);
  return sub_1000642A8(a1, v5, a3, v6);
}

uint64_t sub_1000626A0(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F06B8);
  return sub_100054CA8(a1, 1LL, v2);
}

uint64_t sub_1000626D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F06B8);
  return sub_100054998(a1, a2, 1LL, v4);
}

uint64_t type metadata accessor for AccountDataServerResponse.Errors(uint64_t a1)
{
  return sub_100063CAC( a1,  (uint64_t *)&unk_1000F0730,  (uint64_t)&nominal type descriptor for AccountDataServerResponse.Errors);
}

uint64_t sub_100062724(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

void *sub_100062778(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v27 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v27;
    *(void *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v23 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v23;
    uint64_t v7 = a2[7];
    uint64_t v25 = a2[6];
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v25;
    *(void *)(a1 + 56) = v7;
    uint64_t v8 = a2[9];
    uint64_t v24 = a2[8];
    *(void *)(a1 + 64) = v24;
    *(void *)(a1 + 72) = v8;
    uint64_t v26 = a2[10];
    *(void *)(a1 + 80) = v26;
    *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *((_DWORD *)a2 + 22);
    *(void *)(a1 + 96) = a2[12];
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_WORD *)(a1 + 10_Block_object_dispose(&a9, 8) = *((_WORD *)a2 + 54);
    uint64_t v9 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v9;
    uint64_t v10 = a2[17];
    *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = a2[16];
    *(void *)(a1 + 136) = v10;
    uint64_t v11 = a2[19];
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = v11;
    *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
    uint64_t v12 = a2[22];
    *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = a2[21];
    *(void *)(a1 + 176) = v12;
    *(void *)(a1 + 184) = a2[23];
    *(_WORD *)(a1 + 192) = *((_WORD *)a2 + 96);
    *(_BYTE *)(a1 + 194) = *((_BYTE *)a2 + 194);
    uint64_t v13 = a2[25];
    uint64_t v14 = a2[26];
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    *(void *)(a1 + 224) = a2[28];
    uint64_t v15 = a3[5];
    uint64_t v21 = (uint64_t)a2 + v15;
    uint64_t v22 = a1 + v15;
    *(void *)(a1 + 200) = v13;
    *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v14;
    uint64_t v16 = type metadata accessor for Date(0LL);
    __int128 v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    v17(v22, v21, v16);
    uint64_t v18 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v17((uint64_t)v4 + v18, (uint64_t)a2 + v18, v16);
  }

  return v4;
}

uint64_t sub_100062954(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v7(v4, v5);
  return ((uint64_t (*)(char *, uint64_t))v7)((char *)a1 + *(int *)(a2 + 28), v5);
}

uint64_t sub_100062A14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v25 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v25;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v23 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v23;
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v7;
  uint64_t v24 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v24;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_WORD *)(a2 + 108);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  uint64_t v12 = *(void *)(a2 + 200);
  uint64_t v13 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v14 = a3[5];
  uint64_t v19 = a2 + v14;
  uint64_t v20 = a1 + v14;
  *(void *)(a1 + 200) = v12;
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v13;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  v16(v20, v19, v15);
  uint64_t v17 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v16(a1 + v17, a2 + v17, v15);
  return a1;
}

uint64_t sub_100062BC4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 120);
  uint64_t v17 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  uint64_t v18 = *(void *)(a2 + 136);
  uint64_t v19 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 152);
  uint64_t v21 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  uint64_t v22 = *(void *)(a2 + 176);
  uint64_t v23 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v24;
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v25 = *(void *)(a2 + 208);
  uint64_t v26 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v27 = a3[5];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 24LL);
  v31(v28, v29, v30);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v31(a1 + a3[7], a2 + a3[7], v30);
  return a1;
}

char *sub_100062E34(char *a1, char *a2, int *a3)
{
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  return a1;
}

uint64_t sub_100062EC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v16 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a2 + 136);
  uint64_t v18 = *(void *)(a1 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v17;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a2 + 152);
  uint64_t v20 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v19;
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  uint64_t v21 = *(void *)(a2 + 176);
  uint64_t v22 = *(void *)(a1 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v21;
  swift_bridgeObjectRelease(v22);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  uint64_t v23 = *(void *)(a2 + 208);
  uint64_t v24 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v25 = a3[5];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 40LL);
  v29(v26, v27, v28);
  uint64_t v30 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v29(a1 + v30, a2 + v30, v28);
  return a1;
}

uint64_t sub_10006309C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000630A8);
}

void sub_1000630A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10006483C();
    sub_100064370();
  }

  else
  {
    uint64_t v6 = sub_1000559FC();
    sub_100064300(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_1000630FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063108);
}

void sub_100063108()
{
  if (v3 == 0x7FFFFFFF)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = (v0 - 1);
    sub_100064370();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_1000559FC();
    sub_1000642A8(v1 + *(int *)(v4 + 20), v0, v0, v5);
  }

uint64_t type metadata accessor for AccountDataServerResponse(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F0798, (uint64_t)&nominal type descriptor for AccountDataServerResponse);
}

uint64_t sub_100063170(uint64_t a1)
{
  uint64_t v4 = &unk_1000A4E80;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v7 = v5;
    swift_initStructMetadata(a1, 256LL, 4LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for AccountDataPayload.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_10006320C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100063214(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for AccountDataChange.CodingKeys()
{
}

uint64_t getEnumTagSinglePayload for AccountDataPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE3)
  {
    if (a2 + 29 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 29) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 30;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v5 = v6 - 30;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2) {
    int v5 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v5 = -2;
  }
  if (v5 < 0) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountDataPayload.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE2) {
    return ((uint64_t (*)(void))((char *)&loc_100063300 + 4 * byte_1000A4C1D[v4]))();
  }
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_100063334 + 4 * byte_1000A4C18[v4]))();
}

uint64_t sub_100063334(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006333C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100063344LL);
  }
  return result;
}

uint64_t sub_100063350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100063358LL);
  }
  *(_BYTE *)uint64_t result = a2 + 29;
  return result;
}

uint64_t sub_10006335C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063364(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountDataPayload.CodingKeys()
{
  return &type metadata for AccountDataPayload.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccountDataState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AccountDataState.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100063454 + 4 * byte_1000A4C27[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100063488 + 4 * byte_1000A4C22[v4]))();
}

uint64_t sub_100063488(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100063498LL);
  }
  return result;
}

uint64_t sub_1000634A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000634ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_1000634B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000634B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000634C4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccountDataState.CodingKeys()
{
  return &type metadata for AccountDataState.CodingKeys;
}

_WORD *sub_1000634DC(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1000634E8(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 65282 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65282 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (v4) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v3 == 2)
      {
        int v4 = a1[1];
        if (!a1[1]) {
          goto LABEL_17;
        }
LABEL_15:
        int v5 = (*a1 | (v4 << 16)) - 65283;
        return (v5 + 1);
      }

      int v4 = *((unsigned __int8 *)a1 + 2);
      if (*((_BYTE *)a1 + 2)) {
        goto LABEL_15;
      }
    }
  }

uint64_t sub_100063590(_WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000635DC + 4 * byte_1000A4C31[v4]))();
  }
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_100063610 + 4 * byte_1000A4C2C[v4]))();
}

uint64_t sub_100063610(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100063618(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x100063620LL);
  }
  return result;
}

uint64_t sub_10006362C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x100063634LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100063638(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100063640(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

void type metadata accessor for AccountDataChange()
{
}

uint64_t initializeBufferWithCopyOfBuffer for AccountDataNetworkingBag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for AccountDataNetworkingBag(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for AccountDataNetworkingBag(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for AccountDataNetworkingBag(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AccountDataNetworkingBag(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AccountDataNetworkingBag(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountDataNetworkingBag(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountDataNetworkingBag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ConsumerIDPayload()
{
}

unint64_t sub_100063838()
{
  unint64_t result = qword_1000F07D8;
  if (!qword_1000F07D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4EE4, &unk_1000D8E18);
    atomic_store(result, (unint64_t *)&qword_1000F07D8);
  }

  return result;
}

unint64_t sub_100063878()
{
  unint64_t result = qword_1000F07E0;
  if (!qword_1000F07E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4F5C, &unk_1000D8D98);
    atomic_store(result, (unint64_t *)&qword_1000F07E0);
  }

  return result;
}

unint64_t sub_1000638B8()
{
  unint64_t result = qword_1000F07E8;
  if (!qword_1000F07E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5054, &type metadata for AccountDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F07E8);
  }

  return result;
}

unint64_t sub_1000638F8()
{
  unint64_t result = qword_1000F07F0;
  if (!qword_1000F07F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A510C, &type metadata for AccountDataPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F07F0);
  }

  return result;
}

unint64_t sub_100063938()
{
  unint64_t result = qword_1000F07F8;
  if (!qword_1000F07F8)
  {
    uint64_t v1 = sub_1000617F8(&qword_1000F0800);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000F07F8);
  }

  return result;
}

unint64_t sub_10006397C(uint64_t a1)
{
  unint64_t result = sub_1000639A0();
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

unint64_t sub_1000639A0()
{
  unint64_t result = qword_1000F0808;
  if (!qword_1000F0808)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5134, &unk_1000D8C00);
    atomic_store(result, (unint64_t *)&qword_1000F0808);
  }

  return result;
}

unint64_t sub_1000639E0()
{
  unint64_t result = qword_1000F0810;
  if (!qword_1000F0810)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A516C, &unk_1000D8C00);
    atomic_store(result, (unint64_t *)&qword_1000F0810);
  }

  return result;
}

unint64_t sub_100063A20()
{
  unint64_t result = qword_1000F0818;
  if (!qword_1000F0818)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5194, &unk_1000D8C00);
    atomic_store(result, (unint64_t *)&qword_1000F0818);
  }

  return result;
}

unint64_t sub_100063A60()
{
  unint64_t result = qword_1000F0820;
  if (!qword_1000F0820)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A52A0, &unk_1000D8C00);
    atomic_store(result, (unint64_t *)&qword_1000F0820);
  }

  return result;
}

void sub_100063A9C()
{
}

void sub_100063AC8()
{
}

void sub_100063AF4()
{
}

unint64_t sub_100063B24()
{
  unint64_t result = qword_1000F0840;
  if (!qword_1000F0840)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A507C, &type metadata for AccountDataPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0840);
  }

  return result;
}

unint64_t sub_100063B64()
{
  unint64_t result = qword_1000F0848;
  if (!qword_1000F0848)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A50A4, &type metadata for AccountDataPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0848);
  }

  return result;
}

unint64_t sub_100063BA4()
{
  unint64_t result = qword_1000F0850;
  if (!qword_1000F0850)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4FC4, &type metadata for AccountDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0850);
  }

  return result;
}

unint64_t sub_100063BE4()
{
  unint64_t result = qword_1000F0858;
  if (!qword_1000F0858)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A4FEC, &type metadata for AccountDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0858);
  }

  return result;
}

unint64_t sub_100063C20()
{
  unint64_t result = qword_1000F0868;
  if (!qword_1000F0868)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A51D8, &unk_1000D8C00);
    atomic_store(result, (unint64_t *)&qword_1000F0868);
  }

  return result;
}

unint64_t sub_100063C5C()
{
  unint64_t result = qword_1000F0880;
  if (!qword_1000F0880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A56DC, &type metadata for ConsumerIDPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0880);
  }

  return result;
}

uint64_t type metadata accessor for AccountDataServerRequest.Get(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F0900, (uint64_t)&nominal type descriptor for AccountDataServerRequest.Get);
}

uint64_t sub_100063CAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccountDataNetworkingBag.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t _s12amsaccountsd17ConsumerIDPayloadV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100063DB0 + 4 * byte_1000A4C3B[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100063DE4 + 4 * byte_1000A4C36[v4]))();
}

uint64_t sub_100063DE4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063DEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100063DF4LL);
  }
  return result;
}

uint64_t sub_100063E00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100063E08LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100063E0C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063E14(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConsumerIDPayload.CodingKeys()
{
  return &type metadata for ConsumerIDPayload.CodingKeys;
}

uint64_t sub_100063E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100063E6C(uint64_t a1)
{
  uint64_t v2 = sub_100064354();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_100063E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100063EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100063F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100063F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100063FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063FB8);
}

uint64_t sub_100063FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100064354();
  return sub_100054CA8(a1, a2, v4);
}

uint64_t sub_100063FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063FF4);
}

uint64_t sub_100063FF4()
{
  uint64_t v0 = sub_1000647C0();
  return sub_100054998(v0, v1, v2, v3);
}

uint64_t sub_10006401C(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountIdentity.DSID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_100064084()
{
}

unint64_t sub_1000640B4()
{
  unint64_t result = qword_1000F0940;
  if (!qword_1000F0940)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A56B4, &type metadata for ConsumerIDPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0940);
  }

  return result;
}

unint64_t sub_1000640F4()
{
  unint64_t result = qword_1000F0948;
  if (!qword_1000F0948)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5624, &type metadata for ConsumerIDPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0948);
  }

  return result;
}

unint64_t sub_100064134()
{
  unint64_t result = qword_1000F0950;
  if (!qword_1000F0950)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A564C, &type metadata for ConsumerIDPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0950);
  }

  return result;
}

uint64_t sub_100064190@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 80) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 80, v2);
}

uint64_t sub_1000641A8@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 + 544) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 + 544, v2);
}

uint64_t sub_1000641C0()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 544, v1);
}

uint64_t sub_1000641D4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000641E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 80) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_1000641FC(uint64_t a1)
{
  return sub_100054CA8(a1, 1LL, v1);
}

  ;
}

uint64_t sub_100064224()
{
  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_100064234()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 8LL))(v1, v2);
}

uint64_t sub_100064248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054CA8(a1, a2, a3);
}

uint64_t sub_10006425C()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 544, v1);
}

void *sub_100064270(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

void sub_10006427C(Swift::UInt8 a1)
{
}

  ;
}

uint64_t sub_100064290(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v2, v4, v3);
}

uint64_t sub_1000642A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054998(a1, a2, a3, a4);
}

void sub_1000642B4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000642BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

Swift::Int sub_1000642C8()
{
  return Hasher._finalize()();
}

void sub_1000642D0(char a1@<W8>)
{
}

uint64_t sub_1000642D8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 248));
}

uint64_t sub_1000642E0()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_100064300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054CA8(a1, a2, a3);
}

uint64_t sub_10006430C@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 80) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 80, v2);
}

uint64_t sub_100064324()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100064334()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 240));
}

uint64_t sub_10006433C()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 544, v1);
}

uint64_t sub_10006434C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_100064354()
{
  return type metadata accessor for AccountIdentity.DSID(0LL);
}

void sub_10006435C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100064364()
{
  return 0LL;
}

  ;
}

uint64_t sub_10006437C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 232));
}

uint64_t sub_100064384()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 256));
}

void sub_10006438C(uint64_t a1)
{
}

  ;
}

void sub_1000643AC(Swift::UInt8 a1)
{
}

void sub_1000643B4(uint64_t a1)
{
}

uint64_t sub_1000643BC(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v3 - 66, v1, a1, v2);
}

uint64_t sub_1000643D8(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

uint64_t sub_1000643E4(uint64_t a1)
{
  return dispatch thunk of Hashable.hash(into:)(a1, v1, v2);
}

uint64_t sub_1000643F0()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 544, v1);
}

void *sub_100064400(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE8uLL);
}

uint64_t sub_100064408()
{
  return type metadata accessor for AccountDataServerRequest.Put(0LL);
}

uint64_t sub_100064424(uint64_t a1, ...)
{
  return String.hash(into:)(va, v2, v1);
}

uint64_t sub_100064434()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 224));
}

uint64_t sub_10006443C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 288));
}

uint64_t sub_100064444()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100064454(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10006445C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 48) + 32LL))(v3, v1, v2);
}

uint64_t sub_100064474()
{
  return v0 + 544;
}

void sub_100064488()
{
}

  ;
}

  ;
}

void *sub_1000644BC(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000644C4(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, a2, v4, v2, v3);
}

  ;
}

uint64_t sub_1000644EC(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, a2, v4, v2, v3);
}

uint64_t sub_100064504@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(v2 + 544) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100064510()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 280));
}

uint64_t sub_100064518()
{
  return 0LL;
}

void sub_100064534(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 + 32) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100064550(uint64_t a1)
{
  return dispatch thunk of Hashable.hash(into:)(v1, v2, a1);
}

uint64_t sub_100064564(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

  ;
}

uint64_t sub_100064584@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_100064590( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return dispatch thunk of Hashable.hash(into:)(&a9, v9, v10);
}

uint64_t sub_1000645A0(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1000645A8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000645B0(uint64_t a1)
{
  return sub_10008A994(a1);
}

uint64_t sub_1000645C0()
{
  return sub_100054930(*(void **)(v0 + 72));
}

uint64_t sub_1000645E8()
{
  return (*(uint64_t (**)(void, void))(*v0 + 8LL))(v0[5], v0[6]);
}

uint64_t sub_1000645F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

  ;
}

uint64_t sub_100064610()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 272));
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100064678()
{
  return v0;
}

  ;
}

uint64_t sub_100064694@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10006469C(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1000646AC()
{
  return dispatch thunk of Hashable.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000646BC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000646CC(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000646DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000646EC@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int16 *)(v1 + a1);
}

void sub_100064704(char a1@<W8>)
{
  *(_BYTE *)(v1 - 80) = a1;
}

uint64_t sub_10006471C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, a4, v4);
}

uint64_t sub_100064724(uint64_t a1)
{
  return swift_getEnumCaseMultiPayload(a1, v1);
}

void sub_10006472C()
{
  *(_BYTE *)(v0 - 66) = 1;
}

void sub_100064738(uint64_t a1)
{
}

  ;
}

uint64_t sub_10006474C()
{
  return sub_100054930(*(void **)(v0 + 296));
}

uint64_t sub_100064754@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

void sub_100064768(char a1@<W8>)
{
  *(_BYTE *)(v1 - 6_Block_object_dispose(&a9, 8) = a1;
}

uint64_t sub_100064774()
{
  return sub_100054930(v0);
}

void sub_10006477C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100064784(uint64_t a1, uint64_t a2)
{
}

void sub_10006478C()
{
}

uint64_t sub_100064794()
{
  return sub_100054930(*(void **)(v0 + 72));
}

unint64_t sub_10006479C()
{
  return sub_1000617BC();
}

uint64_t sub_1000647B8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 264));
}

uint64_t sub_1000647C0()
{
  return v0;
}

  ;
}

void sub_1000647E8(uint64_t a1, ...)
{
}

void sub_1000647F4(Swift::UInt a1)
{
}

void sub_1000647FC(uint64_t a1)
{
}

void sub_100064808(uint64_t a1)
{
}

void sub_100064810(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_100064818()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_10006482C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100064834()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100064850()
{
  return *(void *)(v0 + 144);
}

void sub_100064864(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void *sub_10006486C()
{
  uint64_t v1 = sub_100064CF0();
  uint64_t v2 = sub_100064968(v1);
  swift_bridgeObjectRelease(v1);
  uint64_t v3 = sub_10005489C(&qword_1000F09A0);
  uint64_t inited = swift_initStackObject(v3, v15);
  *(_OWORD *)(inited + 16) = xmmword_1000A4BE0;
  int v5 = (void *)AMSAccountFlagAgeVerificationExpiration;
  uint64_t v6 = *(void *)(v0 + 224);
  *(void *)(inited + 32) = AMSAccountFlagAgeVerificationExpiration;
  *(void *)(inited + 40) = v6;
  type metadata accessor for AMSAccountFlag();
  uint64_t v8 = v7;
  sub_100055290( &qword_1000F02E8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSAccountFlag,  (uint64_t)&unk_1000A4B98);
  uint64_t v10 = v9;
  id v11 = v5;
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)(inited, v8, &type metadata for UInt64, v10);
  uint64_t v13 = sub_100064B2C(v12);
  sub_1000573CC();
  sub_100065CDC(v13);
  return sub_100064F2C(v2);
}

uint64_t sub_100064968(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_100090BF8(0LL, v1, 0);
  uint64_t result = sub_100066D78(a1);
  if ((result & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = result;
    if (result < 1LL << *(_BYTE *)(a1 + 32))
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      uint64_t v13 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v14 = v1;
        id v15 = *(id *)(*(void *)(a1 + 48) + 8 * v5);
        uint64_t result = (uint64_t)Bool._bridgeToObjectiveC()().super.super.isa;
        uint64_t v8 = result;
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          uint64_t result = (uint64_t)sub_100090BF8((void *)(v9 > 1), v10 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        id v11 = &_swiftEmptyArrayStorage[2 * v10];
        void v11[4] = v15;
        void v11[5] = v8;
        uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
        uint64_t v7 = a1 + 64;
        if ((*(void *)(v13 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
          goto LABEL_20;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v5, v13, ~v12);
        --v1;
        if (v14 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_22;
      }

      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }

uint64_t sub_100064B2C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_100090BF8(0LL, v1, 0);
  uint64_t result = sub_100066D78(a1);
  if ((result & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = result;
    if (result < 1LL << *(_BYTE *)(a1 + 32))
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      uint64_t v13 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v14 = v1;
        id v15 = *(id *)(*(void *)(a1 + 48) + 8 * v5);
        uint64_t result = (uint64_t)UInt64._bridgeToObjectiveC()().super.super.isa;
        uint64_t v8 = result;
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          uint64_t result = (uint64_t)sub_100090BF8((void *)(v9 > 1), v10 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        id v11 = &_swiftEmptyArrayStorage[2 * v10];
        void v11[4] = v15;
        void v11[5] = v8;
        uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
        uint64_t v7 = a1 + 64;
        if ((*(void *)(v13 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
          goto LABEL_20;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v5, v13, ~v12);
        --v1;
        if (v14 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_22;
      }

      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }

uint64_t sub_100064CF0()
{
  uint64_t v1 = sub_10005489C(&qword_1000F09B8);
  uint64_t inited = swift_initStackObject(v1, v34);
  *(_OWORD *)(inited + 16) = xmmword_1000A5730;
  uint64_t v33 = (void *)AMSAccountFlagAutoPlay;
  *(void *)(inited + 32) = AMSAccountFlagAutoPlay;
  *(_BYTE *)(inited + 40) = v0[24];
  uint64_t v32 = (void *)AMSAccountFlagIsDisabledAccount;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = AMSAccountFlagIsDisabledAccount;
  *(_BYTE *)(inited + 56) = v0[105];
  uint64_t v31 = (void *)AMSAccountFlagPersonalization;
  *(void *)(inited + 64) = AMSAccountFlagPersonalization;
  *(_BYTE *)(inited + 72) = v0[193];
  uint64_t v30 = (void *)AMSAccountFlagHasAgreedToTerms;
  *(void *)(inited + 80) = AMSAccountFlagHasAgreedToTerms;
  *(_BYTE *)(inited + 8_Block_object_dispose(&a9, 8) = v0[89];
  uint64_t v29 = (void *)AMSAccountFlagHasAgreedToAppClipTerms;
  *(void *)(inited + 96) = AMSAccountFlagHasAgreedToAppClipTerms;
  *(_BYTE *)(inited + 104) = v0[88];
  uint64_t v3 = (void *)AMSAccountFlagHasFamilySharingEnabled;
  *(void *)(inited + 112) = AMSAccountFlagHasFamilySharingEnabled;
  *(_BYTE *)(inited + 120) = v0[90];
  int v4 = (void *)AMSAccountFlagIsInBadCredit;
  *(void *)(inited + 12_Block_object_dispose(&a9, 8) = AMSAccountFlagIsInBadCredit;
  *(_BYTE *)(inited + 136) = v0[106];
  unint64_t v5 = (void *)AMSAccountFlagHasiCloudFamily;
  *(void *)(inited + 144) = AMSAccountFlagHasiCloudFamily;
  *(_BYTE *)(inited + 152) = v0[107];
  int v6 = (void *)AMSAccountFlagIsInRestrictedRegion;
  *(void *)(inited + 160) = AMSAccountFlagIsInRestrictedRegion;
  *(_BYTE *)(inited + 16_Block_object_dispose(&a9, 8) = v0[108];
  uint64_t v7 = (void *)AMSAccountFlagIsManagedAccount;
  *(void *)(inited + 176) = AMSAccountFlagIsManagedAccount;
  *(_BYTE *)(inited + 184) = v0[109];
  uint64_t v8 = (void *)AMSAccountFlagIsRestrictedAccount;
  *(void *)(inited + 192) = AMSAccountFlagIsRestrictedAccount;
  *(_BYTE *)(inited + 200) = v0[160];
  unint64_t v9 = (void *)AMSAccountFlagRetailDemo;
  *(void *)(inited + 20_Block_object_dispose(&a9, 8) = AMSAccountFlagRetailDemo;
  *(_BYTE *)(inited + 216) = v0[194];
  unint64_t v10 = (void *)AMSAccountFlagUnderThirteen;
  *(void *)(inited + 224) = AMSAccountFlagUnderThirteen;
  *(_BYTE *)(inited + 232) = v0[216];
  type metadata accessor for AMSAccountFlag();
  uint64_t v28 = v11;
  sub_100055290( &qword_1000F02E8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSAccountFlag,  (uint64_t)&unk_1000A4B98);
  uint64_t v13 = v12;
  id v14 = v33;
  id v15 = v32;
  id v16 = v31;
  id v17 = v30;
  id v18 = v29;
  id v19 = v3;
  id v20 = v4;
  id v21 = v5;
  id v22 = v6;
  id v23 = v7;
  id v24 = v8;
  id v25 = v9;
  id v26 = v10;
  return Dictionary.init(dictionaryLiteral:)(inited, v28, &type metadata for Bool, v13);
}

void *sub_100064F2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10005489C(&qword_1000F09A8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  int v6 = v3;
  uint64_t v4 = swift_bridgeObjectRetain(a1);
  sub_100065DB4(v4, 1, &v6);
  swift_bridgeObjectRelease(a1);
  return v6;
}

void sub_100064FD4(uint64_t a1)
{
  uint64_t v80 = a1;
  type metadata accessor for AccountDataState(0LL);
  sub_100055428();
  __chkstk_darwin(v2);
  sub_100055360();
  uint64_t v77 = v3;
  uint64_t v85 = sub_10005489C(&qword_1000F0958);
  uint64_t v79 = *(void *)(v85 - 8);
  sub_100055428();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v72 - v8;
  uint64_t v10 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v74 = *(void *)(v10 - 8);
  sub_100055428();
  __chkstk_darwin(v11);
  sub_100055360();
  uint64_t v90 = v12;
  sub_10005489C(&qword_1000F0960);
  sub_100055428();
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  id v18 = (char *)&v72 - v17;
  id v19 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) init];
  uint64_t v20 = sub_100054B08(0LL, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
  uint64_t v21 = sub_100054B08(0LL, &qword_1000F0970, &OBJC_CLASS___AMSAccountCachedServerDataAccountResult_ptr);
  unint64_t v22 = sub_1000656BC();
  id v91 = v19;
  uint64_t v23 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v20, v21, v22);
  uint64_t v88 = v21;
  uint64_t v89 = v20;
  unint64_t v87 = v22;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  [v91 setAllAccountResults:isa];

  int64_t v86 = 0LL;
  uint64_t v25 = v74;
  uint64_t v26 = *(void *)(v80 + 64);
  uint64_t v75 = v80 + 64;
  uint64_t v27 = 1LL << *(_BYTE *)(v80 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v76 = (unint64_t)(v27 + 63) >> 6;
  int64_t v73 = v76 - 1;
  uint64_t v83 = v9;
  uint64_t v84 = v7;
  uint64_t v81 = v16;
  uint64_t v82 = v10;
  uint64_t v78 = v18;
  if ((v28 & v26) == 0) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v30 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  unint64_t v31 = v30 | (v86 << 6);
LABEL_5:
  uint64_t v32 = v80;
  (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))( v16,  *(void *)(v80 + 48) + *(void *)(v25 + 72) * v31,  v10);
  uint64_t v33 = *(void *)(v32 + 56) + *(void *)(v79 + 72) * v31;
  uint64_t v34 = sub_100066E30();
  sub_100054CB4(v33, (uint64_t)&v16[*(int *)(v34 + 48)], &qword_1000F0958);
  sub_100054998((uint64_t)v16, 0LL, 1LL, v34);
  id v18 = v78;
  while (1)
  {
    sub_100054A6C((uint64_t)v16, (uint64_t)v18, &qword_1000F0960);
    uint64_t v39 = sub_100066E30();
    if (sub_100054CA8((uint64_t)v18, 1LL, v39) == 1)
    {

      swift_release(v80);
      sub_1000642E8();
      return;
    }

    uint64_t v40 = (uint64_t)&v18[*(int *)(v39 + 48)];
    uint64_t v41 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v90, v18, v10);
    sub_100054A6C(v40, (uint64_t)v9, &qword_1000F0958);
    char v43 = (void *)AccountIdentity.amsAccountIdentity()(v42);
    id v44 = [objc_allocWithZone(AMSAccountCachedServerDataAccountResult) init];
    sub_100054CB4((uint64_t)v9, (uint64_t)v7, &qword_1000F0958);
    if (swift_getEnumCaseMultiPayload(v7, v85) == 1)
    {
      uint64_t v45 = *v7;
      char v46 = (void *)_convertErrorToNSError(_:)(*v7);
      sub_100066E50(v44, "setError:");

      swift_errorRelease(v45);
    }

    else
    {
      uint64_t v47 = v77;
      sub_100066C50((uint64_t)v7, v77);
      sub_10006570C(v47);
      char v49 = v48;
      [v44 setFields:v48];

      sub_100066C94(v47);
    }

    id v50 = v43;
    id v51 = v44;
    id v52 = [v91 allAccountResults];
    Swift::Int v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, v89, v88, v87);

    if ((v53 & 0xC000000000000001LL) != 0)
    {
      if (v53 >= 0) {
        v53 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v54 = __CocoaDictionary.count.getter(v53);
      if (__OFADD__(v54, 1LL)) {
        goto LABEL_45;
      }
      Swift::Int v53 = sub_100066A14(v53, v54 + 1);
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
    uint64_t v92 = (void *)v53;
    unint64_t v56 = sub_10008DA58((uint64_t)v50);
    uint64_t v58 = *(void *)(v53 + 16);
    BOOL v59 = (v57 & 1) == 0;
    Swift::Int v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      break;
    }
    unint64_t v61 = v56;
    char v62 = v57;
    sub_10005489C(&qword_1000F0988);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v60))
    {
      unint64_t v63 = sub_10008DA58((uint64_t)v50);
      if ((v62 & 1) != (v64 & 1)) {
        goto LABEL_49;
      }
      unint64_t v61 = v63;
    }

    uint64_t v65 = v92;
    if ((v62 & 1) != 0)
    {
      uint64_t v66 = v92[7];

      *(void *)(v66 + 8 * v61) = v51;
    }

    else
    {
      v92[(v61 >> 6) + 8] |= 1LL << v61;
      *(void *)(v65[6] + 8 * v61) = v50;
      *(void *)(v65[7] + 8 * v61) = v51;
      uint64_t v67 = v65[2];
      BOOL v68 = __OFADD__(v67, 1LL);
      uint64_t v69 = v67 + 1;
      if (v68) {
        goto LABEL_46;
      }
      v65[2] = v69;
      id v70 = v50;
    }

    swift_bridgeObjectRelease(0x8000000000000000LL);
    Class v71 = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1000573CC();
    sub_100066E50(v91, "setAllAccountResults:");

    unint64_t v9 = v83;
    sub_100066CD0((uint64_t)v83, &qword_1000F0958);
    uint64_t v25 = v41;
    uint64_t v10 = v82;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v90, v82);
    uint64_t v7 = v84;
    id v16 = v81;
    if (v29) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v35 = v86 + 1;
    if (__OFADD__(v86, 1LL)) {
      goto LABEL_47;
    }
    if (v35 < v76)
    {
      unint64_t v36 = *(void *)(v75 + 8 * v35);
      if (v36) {
        goto LABEL_9;
      }
      int64_t v37 = v86 + 2;
      ++v86;
      if (v35 + 1 < v76)
      {
        unint64_t v36 = *(void *)(v75 + 8 * v37);
        if (v36) {
          goto LABEL_12;
        }
        int64_t v86 = v35 + 1;
        if (v35 + 2 < v76)
        {
          unint64_t v36 = *(void *)(v75 + 8 * (v35 + 2));
          if (v36)
          {
            v35 += 2LL;
            goto LABEL_9;
          }

          int64_t v37 = v35 + 3;
          int64_t v86 = v35 + 2;
          if (v35 + 3 < v76)
          {
            unint64_t v36 = *(void *)(v75 + 8 * v37);
            if (!v36)
            {
              while (1)
              {
                int64_t v35 = v37 + 1;
                if (__OFADD__(v37, 1LL)) {
                  goto LABEL_48;
                }
                if (v35 >= v76)
                {
                  int64_t v86 = v73;
                  goto LABEL_23;
                }

                unint64_t v36 = *(void *)(v75 + 8 * v35);
                ++v37;
                if (v36) {
                  goto LABEL_9;
                }
              }
            }

unint64_t sub_1000656BC()
{
  unint64_t result = qword_1000F0978;
  if (!qword_1000F0978)
  {
    uint64_t v1 = sub_100054B08(255LL, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000F0978);
  }

  return result;
}

void sub_10006570C(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10005878C();
  uint64_t v10 = v9 - v8;
  id v11 = [objc_allocWithZone(AMSAccountCachedServerDataFields) init];
  uint64_t v12 = type metadata accessor for AccountDataState(0LL);
  sub_100054CB4(a1 + *(int *)(v12 + 20), v5, &qword_1000F02A8);
  uint64_t v13 = sub_100054CA8(v5, 1LL, v6);
  if ((_DWORD)v13 == 1)
  {
    static Date.distantPast.getter(v13);
    sub_100066CD0(v5, &qword_1000F02A8);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v5, v6);
  }

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  sub_100066DF8(v15, "setExpiration:");

  sub_100054A6C(a1, (uint64_t)&v69, &qword_1000F02B0);
  sub_10005AA98();
  sub_100054A6C((uint64_t)v52, (uint64_t)v53, &qword_1000F02B0);
  if (sub_1000549A4((uint64_t)v53) != 1)
  {
    char v16 = v53[24];
    uint64_t v17 = v54;
    char v48 = v55;
    char v47 = v56;
    uint64_t v50 = v57;
    char v45 = v59;
    char v46 = v58;
    char v49 = v60;
    char v18 = v61;
    char v19 = v62;
    char v20 = v63;
    char v21 = v64;
    int v51 = v65;
    uint64_t v42 = v66;
    char v44 = v68;
    char v43 = v67;
    NSString v22 = String._bridgeToObjectiveC()();
    sub_100066E50(v11, "setAcAccountName:");

    sub_100066E38(v23, "setAccountFlagsVersion:");
    id v24 = [v11 setAutoPlayEnabled:v16 & 1];
    if (v17)
    {
      swift_bridgeObjectRetain(v17);
      NSString v25 = String._bridgeToObjectiveC()();
      id v24 = (id)sub_1000573CC();
    }

    else
    {
      NSString v25 = 0LL;
    }

    sub_100066E04((uint64_t)v24, "setCombinedStoreFrontID:");

    NSString v26 = String._bridgeToObjectiveC()();
    sub_100066E04((uint64_t)v26, "setCreditBalance:");

    NSString v27 = String._bridgeToObjectiveC()();
    sub_100066E04((uint64_t)v27, "setFirstName:");

    id v28 = sub_100056120((uint64_t)[v11 setHasAgreedToAppClipTerms:v48 & 1], "setHasAgreedToTerms:");
    sub_100066E44((uint64_t)v28, "setHasSubscriptionFamilySharingEnabled:");
    [v11 setHasHardwareWatchOffer:v47 & 1];
    [v11 setIdentityLastVerified:v50];
    [v11 setIsAskToBuy:v46 & 1];
    [v11 setIsDisabledAccount:v45 & 1];
    [v11 setIsInBadCredit:v49 & 1];
    [v11 setIsInFamily:v18 & 1];
    [v11 setIsManagedAccount:v20 & 1];
    [v11 setIsRestrictedAccount:v21 & 1];
    id v29 = [v11 setIsInRestrictedRegion:v19 & 1];
    char v30 = v51;
    if (v51 == 2)
    {
      unint64_t v31 = 0LL;
    }

    else
    {
      id v29 = [objc_allocWithZone(NSNumber) initWithBool:v30 & 1];
      unint64_t v31 = v29;
    }

    sub_100066DF8((uint64_t)v29, "setIsU18OrCountrysEquivalent:");

    NSString v32 = String._bridgeToObjectiveC()();
    sub_100066DF8((uint64_t)v32, "setIsoCountryCode:");

    NSString v33 = String._bridgeToObjectiveC()();
    sub_100066DF8((uint64_t)v33, "setIso2CountryCode:");

    NSString v34 = String._bridgeToObjectiveC()();
    sub_100066DF8((uint64_t)v34, "setIso3CountryCode:");

    NSString v35 = String._bridgeToObjectiveC()();
    sub_100066DF8((uint64_t)v35, "setLastName:");

    if ((v43 & 1) != 0)
    {
      int64_t v37 = 0LL;
    }

    else
    {
      id v36 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:v42];
      int64_t v37 = v36;
    }

    sub_100066DF8((uint64_t)v36, "setOneAccountLinkedDSID:");

    sub_100066E44(v38, "setPersonalization:");
    [v11 setRetailDemo:v44 & 1];
    NSString v39 = String._bridgeToObjectiveC()();
    sub_100066DF8((uint64_t)v39, "setStorefrontId:");

    id v41 = sub_100056120(v40, "setUnderThirteen:");
    sub_100066E38((uint64_t)v41, "setVerifiedExpirationDate:");
    sub_100058570(v52);
  }

  sub_1000642E8();
}

void sub_100065CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_10006DED8(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  sub_10006EBFC(a1 + 32, v2);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    uint64_t *v1 = v3;
    return;
  }

  uint64_t v10 = *(void *)(v3 + 16);
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    *(void *)(v3 + 16) = v12;
    goto LABEL_14;
  }

LABEL_18:
  __break(1u);
}

    uint64_t v50 = (v22 - 1) & v22;
    int v51 = v23;
  }

  id v24 = v10 + 4;
  if (v10 + 4 >= v37) {
    return;
  }
  NSString v22 = *(void *)(v36 + 8 * v24);
  if (v22)
  {
    uint64_t v23 = v10 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v23 >= v37) {
      return;
    }
    NSString v22 = *(void *)(v36 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_18;
    }
  }

      sub_10008B7B4((uint64_t)&v97, v2[7] + 40 * v27);
LABEL_40:
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_41:
      char v18 = sub_100077978((uint64_t)v103, &qword_1000F1898);
      goto LABEL_42;
    }

    swift_bridgeObjectRelease(v6);
    sub_10006F5F8(&v94, (uint64_t)&v97);
    NSString v32 = *((void *)&v98 + 1);
    NSString v33 = v99;
    sub_100054838(&v97, *((uint64_t *)&v98 + 1));
    *(void *)&char v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
    NSString v34 = sub_10005489C(&qword_1000F0CC8);
    NSString v35 = sub_10008B7F0(&qword_1000F18D0, &qword_1000F0CC8, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    AnyHashable.init<A>(_:)(&v100, &v94, v34, v35);
    char v94 = v100;
    char v95 = v101;
    char v96 = v102;
    id v36 = swift_isUniquelyReferenced_nonNull_native(v2);
    int64_t v37 = sub_10008D974(v7, v6);
    NSString v39 = v2[2];
    uint64_t v40 = (v38 & 1) == 0;
    id v41 = v39 + v40;
    if (__OFADD__(v39, v40)) {
      goto LABEL_61;
    }
    uint64_t v42 = v37;
    char v43 = v38;
    sub_10005489C(&qword_1000F18D8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v36, v41))
    {
      char v44 = sub_10008D974(v7, v6);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_65;
      }
      uint64_t v42 = v44;
    }

    if ((v43 & 1) != 0)
    {
      sub_10008B7B4((uint64_t)&v94, v2[7] + 40 * v42);
    }

    else
    {
      v2[(v42 >> 6) + 8] |= 1LL << v42;
      uint64_t v69 = (uint64_t *)(v2[6] + 16 * v42);
      *uint64_t v69 = v7;
      v69[1] = v6;
      id v70 = v2[7] + 40 * v42;
      Class v71 = v94;
      uint64_t v72 = v95;
      *(void *)(v70 + 32) = v96;
      *(_OWORD *)id v70 = v71;
      *(_OWORD *)(v70 + 16) = v72;
      int64_t v73 = v2[2];
      int v51 = __OFADD__(v73, 1LL);
      uint64_t v74 = v73 + 1;
      if (v51) {
        goto LABEL_64;
      }
      v2[2] = v74;
      swift_bridgeObjectRetain(v6);
    }

    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100077978((uint64_t)v103, &qword_1000F1898);
    char v18 = sub_100054930(&v97);
LABEL_42:
    dispatch thunk of _AnyIteratorBoxBase.next()(&v105, v18);
    if (!v108) {
      goto LABEL_57;
    }
  }

  swift_bridgeObjectRelease(v6);
  char v97 = v94;
  char v98 = v95;
  uint64_t v99 = v96;
  sub_1000585E0((uint64_t)&v97, (uint64_t)&v100);
  uint64_t v8 = swift_isUniquelyReferenced_nonNull_native(v2);
  *(void *)&char v94 = v2;
  uint64_t v9 = sub_10008D974(v7, v6);
  BOOL v11 = v2[2];
  uint64_t v12 = (v10 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (!__OFADD__(v11, v12))
  {
    uint64_t v14 = v9;
    uint64_t v15 = v10;
    sub_10005489C(&qword_1000F18D8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v8, v13))
    {
      char v16 = sub_10008D974(v7, v6);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_65;
      }
      uint64_t v14 = v16;
    }

    uint64_t v2 = (void *)v94;
    if ((v15 & 1) != 0)
    {
      sub_10008B7B4((uint64_t)&v100, *(void *)(v94 + 56) + 40 * v14);
    }

    else
    {
      *(void *)(v94 + 8 * (v14 >> 6) + 64) |= 1LL << v14;
      char v46 = (uint64_t *)(v2[6] + 16 * v14);
      *char v46 = v7;
      v46[1] = v6;
      char v47 = v2[7] + 40 * v14;
      char v48 = v100;
      char v49 = v101;
      *(void *)(v47 + 32) = v102;
      *(_OWORD *)char v47 = v48;
      *(_OWORD *)(v47 + 16) = v49;
      uint64_t v50 = v2[2];
      int v51 = __OFADD__(v50, 1LL);
      id v52 = v50 + 1;
      if (v51) {
        goto LABEL_60;
      }
      v2[2] = v52;
      swift_bridgeObjectRetain(v6);
    }

    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100058670((uint64_t)&v97);
    goto LABEL_41;
  }

  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v5 = v12;
  }

  __break(1u);
  return result;
}

    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v5 = v12;
  }

  __break(1u);
  return result;
}

uint64_t sub_100065DB4(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v29 = swift_bridgeObjectRetain(a1);
  for (unint64_t i = (void **)(v29 + 40); ; i += 2)
  {
    uint64_t v7 = *i;
    id v33 = *(i - 1);
    uint64_t v8 = (void *)*a3;
    id v9 = v33;
    id v10 = v7;
    unint64_t v12 = sub_10008D9D8((uint64_t)v9);
    uint64_t v13 = v8[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      type metadata accessor for AMSAccountFlag();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }

    char v16 = v11;
    if (v8[3] < v15) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      sub_10005489C(&qword_1000F09B0);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0) {
        goto LABEL_14;
      }
    }

uint64_t sub_10006606C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10005489C(&qword_1000F09A8);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v38 = v3;
  int64_t v39 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    BOOL v21 = *(void **)(*(void *)(v5 + 48) + 8 * i);
    uint64_t v22 = *(void **)(*(void *)(v5 + 56) + 8 * i);
    if ((v41 & 1) == 0)
    {
      id v23 = v21;
      id v24 = v22;
    }

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v27 = v26;
    Hasher.init(_seed:)(v42);
    String.hash(into:)(v42, v25, v27);
    Swift::Int v28 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease(v27);
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) == 0)
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v29) >> 6;
      while (++v31 != v34 || (v33 & 1) == 0)
      {
        BOOL v35 = v31 == v34;
        if (v31 == v34) {
          unint64_t v31 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v12 + 8 * v31);
        if (v36 != -1)
        {
          unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    unint64_t v32 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v32;
    *(void *)(*(void *)(v8 + 48) + 8 * v32) = v21;
    *(void *)(*(void *)(v8 + 56) + 8 * v32) = v22;
    ++*(void *)(v8 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_44;
    }
    if (v17 >= v39)
    {
      swift_release(v5);
      uint64_t v3 = v38;
      char v18 = (void *)(v5 + 64);
      goto LABEL_37;
    }

    char v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v40 + 8 * v17);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v39) {
        goto LABEL_35;
      }
      unint64_t v19 = *(void *)(v40 + 8 * v14);
      if (!v19) {
        break;
      }
    }

LABEL_35:
  swift_release(v5);
  uint64_t v3 = v38;
LABEL_37:
  if ((v41 & 1) != 0)
  {
    uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
    if (v37 >= 64) {
      sub_10008F148(0LL, (unint64_t)(v37 + 63) >> 6, v18);
    }
    else {
      void *v18 = -1LL << v37;
    }
    *(void *)(v5 + 16) = 0LL;
  }

    sub_100077FD0();
    sub_100077B98();
    *(void *)&v80[0] = v11;
    sub_100077E74();
    sub_100077FF4();
    if (v39)
    {
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }

    uint64_t v40 = v38;
    sub_10005489C((uint64_t *)&unk_1000F0E00);
    uint64_t v4 = v26;
    uint64_t v8 = (char *)v25;
    if (sub_100077FE8())
    {
      sub_100077E74();
      if ((v40 & 1) != (v41 & 1)) {
        goto LABEL_82;
      }
    }

    unint64_t v11 = *(void **)&v80[0];
    if ((v40 & 1) == 0)
    {
      sub_100077E08();
      sub_100077D0C(&v81, v43);
      if (v39) {
        goto LABEL_78;
      }
      goto LABEL_42;
    }

    sub_100077F88();
    uint64_t v42 = &v81;
LABEL_40:
    sub_100077924(v42, v27);
LABEL_43:
    swift_bridgeObjectRelease(v24);
    sub_100077BA0();
LABEL_44:
    sub_100054930(&v83);
    if (v15) {
      goto LABEL_4;
    }
LABEL_6:
    BOOL v21 = v77 + 1;
    if (__OFADD__(v77, 1LL)) {
      goto LABEL_77;
    }
    if (v21 < v73)
    {
      uint64_t v22 = *(void *)(v70 + 8 * v21);
      if (v22) {
        goto LABEL_9;
      }
      id v23 = v77 + 2;
      ++v77;
      if (v21 + 1 < v73)
      {
        uint64_t v22 = *(void *)(v70 + 8 * v23);
        if (v22) {
          goto LABEL_12;
        }
        uint64_t v77 = v21 + 1;
        if (v21 + 2 < v73)
        {
          uint64_t v22 = *(void *)(v70 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2LL;
            goto LABEL_9;
          }

          id v23 = v21 + 3;
          uint64_t v77 = v21 + 2;
          if (v21 + 3 < v73)
          {
            uint64_t v22 = *(void *)(v70 + 8 * v23);
            if (v22)
            {
LABEL_12:
              BOOL v21 = v23;
LABEL_9:
              unint64_t v15 = (v22 - 1) & v22;
              int64_t v17 = __clz(__rbit64(v22)) + (v21 << 6);
              uint64_t v77 = v21;
              goto LABEL_5;
            }

            while (1)
            {
              BOOL v21 = v23 + 1;
              if (__OFADD__(v23, 1LL)) {
                break;
              }
              if (v21 >= v73)
              {
                uint64_t v77 = v68;
                goto LABEL_23;
              }

              uint64_t v22 = *(void *)(v70 + 8 * v21);
              ++v23;
              if (v22) {
                goto LABEL_9;
              }
            }

LABEL_42:
  uint64_t result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

  uint64_t result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

Swift::Int sub_100066380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10005489C(&qword_1000F0990);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    BOOL v35 = v3;
    uint64_t v36 = v5 + 64;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v15 << 6))
    {
      uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * i);
      id v23 = *(void **)(*(void *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
      {
        id v24 = v22;
        id v25 = v23;
      }

      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v13 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }

      unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v13 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
      *(void *)(*(void *)(v8 + 48) + 8 * v29) = v22;
      *(void *)(*(void *)(v8 + 56) + 8 * v29) = v23;
      ++*(void *)(v8 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_44;
      }
      if (v18 >= v12) {
        break;
      }
      unint64_t v19 = (void *)(v5 + 64);
      unint64_t v20 = *(void *)(v36 + 8 * v18);
      ++v15;
      if (!v20)
      {
        int64_t v15 = v18 + 1;
        if (v18 + 1 >= v12) {
          goto LABEL_35;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v15);
        if (!v20)
        {
          int64_t v21 = v18 + 2;
          if (v21 >= v12)
          {
LABEL_35:
            swift_release(v5);
            uint64_t v3 = v35;
            if ((a2 & 1) == 0) {
              goto LABEL_42;
            }
            goto LABEL_38;
          }

          unint64_t v20 = *(void *)(v36 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v15 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_45;
              }
              if (v15 >= v12) {
                goto LABEL_35;
              }
              unint64_t v20 = *(void *)(v36 + 8 * v15);
              ++v21;
              if (v20) {
                goto LABEL_21;
              }
            }
          }

          int64_t v15 = v21;
        }
      }

void sub_100066640(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10005489C(&qword_1000F0958);
  sub_100055428();
  __chkstk_darwin(v6);
  sub_100055360();
  uint64_t v52 = v7;
  uint64_t v8 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10005878C();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10005489C(&qword_1000F0998);
  char v51 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t v45 = v13;
    goto LABEL_44;
  }

  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  char v49 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & *(void *)(v13 + 64);
  char v47 = v2;
  int64_t v48 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = v14 + 64;
  swift_retain(v13);
  int64_t v20 = 0LL;
  uint64_t v21 = v13;
  uint64_t v50 = v13;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v22 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v20 << 6))
  {
    uint64_t v28 = *(void *)(v9 + 72);
    uint64_t v29 = *(void *)(v21 + 48) + v28 * i;
    if ((v51 & 1) != 0)
    {
      sub_100066E28(v12, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
      uint64_t v30 = sub_100066E10();
      sub_100054A6C(v30, v31, &qword_1000F0958);
    }

    else
    {
      sub_100066E28(v12, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
      uint64_t v32 = sub_100066E10();
      sub_100054CB4(v32, v33, &qword_1000F0958);
    }

    uint64_t v34 = *(void *)(v15 + 40);
    sub_100055290( (unint64_t *)&qword_1000F1EC0,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
    uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    uint64_t v37 = -1LL << *(_BYTE *)(v15 + 32);
    unint64_t v38 = v36 & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) == 0)
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v37) >> 6;
      while (++v39 != v42 || (v41 & 1) == 0)
      {
        BOOL v43 = v39 == v42;
        if (v39 == v42) {
          unint64_t v39 = 0LL;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v19 + 8 * v39);
        if (v44 != -1)
        {
          unint64_t v40 = __clz(__rbit64(~v44)) + (v39 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return;
    }

    unint64_t v40 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v19 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v40;
    sub_100066E28( *(void *)(v15 + 48) + v28 * v40,  v12,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    sub_100054A6C(v52, *(void *)(v15 + 56) + v21 * v40, &qword_1000F0958);
    ++*(void *)(v15 + 16);
    uint64_t v21 = v50;
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      goto LABEL_46;
    }
    if (v24 >= v48)
    {
      swift_release(v21);
      uint64_t v3 = v47;
      id v25 = v49;
      goto LABEL_38;
    }

    id v25 = v49;
    unint64_t v26 = v49[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v48) {
        goto LABEL_36;
      }
      unint64_t v26 = v49[v20];
      if (!v26) {
        break;
      }
    }

LABEL_44:
  swift_release(v45);
  uint64_t *v3 = v15;
}

Swift::Int sub_100066A14(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  sub_10005489C(&qword_1000F0990);
  uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
  uint64_t v29 = v4;
  uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
  uint64_t v6 = __CocoaDictionary.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = sub_100054B08(0LL, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
  while (1)
  {
    uint64_t v27 = v8;
    swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
    uint64_t v26 = v9;
    uint64_t v11 = sub_100054B08(0LL, &qword_1000F0970, &OBJC_CLASS___AMSAccountCachedServerDataAccountResult_ptr);
    swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v11, 7LL);
    uint64_t v4 = v29;
    unint64_t v12 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v12)
    {
      sub_100066380(v12 + 1, 1LL);
      uint64_t v4 = v29;
    }

    uint64_t v14 = v27;
    uint64_t v13 = v28;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v16 = v4 + 64;
    uint64_t v17 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v4 + 64 + 8 * (v18 >> 6))) == 0) {
      break;
    }
    unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v4 + 64 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(void *)(*(void *)(v4 + 48) + 8 * v20) = v13;
    *(void *)(*(void *)(v4 + 56) + 8 * v20) = v14;
    ++*(void *)(v4 + 16);
    uint64_t v8 = __CocoaDictionary.Iterator.next()();
    uint64_t v9 = v25;
    if (!v8) {
      goto LABEL_16;
    }
  }

  char v21 = 0;
  unint64_t v22 = (unint64_t)(63 - v17) >> 6;
  while (++v19 != v22 || (v21 & 1) == 0)
  {
    BOOL v23 = v19 == v22;
    if (v19 == v22) {
      unint64_t v19 = 0LL;
    }
    v21 |= v23;
    uint64_t v24 = *(void *)(v16 + 8 * v19);
    if (v24 != -1)
    {
      unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100066C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066C94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountDataState(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_100066CD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10005489C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100055744();
}

Swift::Int sub_100066D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_100066D78(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

id sub_100066DF8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id sub_100066E04(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100066E10()
{
  return *(void *)(v1 + 56) + *(void *)(*(void *)(v2 - 112) + 72LL) * v0;
}

uint64_t sub_100066E28@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100066E30()
{
  return sub_10005489C(v0);
}

id sub_100066E38(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id sub_100066E44(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id sub_100066E50(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

ValueMetadata *type metadata accessor for AccountDataNetworking()
{
  return &type metadata for AccountDataNetworking;
}

uint64_t sub_100066E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[18] = a1;
  v4[19] = a2;
  uint64_t v5 = type metadata accessor for AccountDataServerResponse(0LL);
  v4[22] = v5;
  v4[23] = sub_100055374(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for IndexSet(0LL);
  v4[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[25] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[26] = swift_task_alloc(v8);
  v4[27] = swift_task_alloc(v8);
  uint64_t v9 = sub_10005489C(&qword_1000F02F8);
  v4[28] = v9;
  v4[29] = sub_100055374(*(void *)(v9 - 8));
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100066F04()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for MetricsActivity(0LL));
  v0[30] = MetricsActivity.init(label:)(2LL);
  dispatch thunk of MetricsActivity.activate()();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1000F09D4);
  v0[31] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_100066F78;
  return sub_10006741C(v0[19], v0[21]);
}

uint64_t sub_100066F78(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 248);
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc(v4);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100066FD8()
{
  uint64_t v1 = v0[24];
  id v2 = sub_1000685E0(objc_allocWithZone(&OBJC_CLASS___AMSURLResponseDecoder));
  sub_100055290( &qword_1000F09D8,  (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet,  (uint64_t)&protocol conformance descriptor for IndexSet);
  uint64_t v4 = v3;
  dispatch thunk of SetAlgebra.init()(v1, v3);
  for (uint64_t i = 200LL; i != 300; ++i)
  {
    uint64_t v6 = v0[24];
    v0[16] = i;
    dispatch thunk of SetAlgebra.insert(_:)(v0 + 15, v0 + 16, v6, v4);
  }

  uint64_t v7 = v0 + 2;
  unint64_t v8 = (void *)v0[32];
  uint64_t v9 = v0[27];
  uint64_t v10 = v0[24];
  uint64_t v11 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v9, v0[26], v10);
  IndexSet.insert(_:)(304LL);
  IndexSet.insert(_:)(409LL);
  IndexSet.insert(_:)(429LL);
  IndexSet._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  [v2 setAllowedStatusCodes:v14];

  id v15 = sub_1000685E0(objc_allocWithZone(&OBJC_CLASS___AMSURLSession));
  v0[34] = v15;
  [v15 setResponseDecoder:v2];

  id v16 = objc_allocWithZone((Class)type metadata accessor for AuthURLDelegate());
  id v17 = sub_1000685E0(v16);
  v0[35] = v17;
  [v15 setDelegate:v17];
  id v18 = v8;
  uint64_t v19 = dispatch thunk of MetricsActivity.nwActivity.getter();
  id v20 = [v15 dataTaskPromiseWithRequest:v18 activity:v19];
  v0[36] = v20;
  swift_unknownObjectRelease(v19);

  v0[7] = v0 + 17;
  v0[2] = v0;
  v0[3] = sub_10006721C;
  uint64_t v21 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  unint64_t v22 = v0 + 10;
  v22[1] = 0x40000000LL;
  v22[2] = sub_1000678F8;
  void v22[3] = &unk_1000D9058;
  void v22[4] = v21;
  [v20 resultWithCompletion:v22];
  return swift_continuation_await(v7);
}

uint64_t sub_10006721C()
{
  *(void *)(*(void *)v0 + 296LL) = *(void *)(*(void *)v0 + 48LL);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100067270()
{
  uint64_t v1 = *(void *)(v0 + 264);
  id v2 = *(char **)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 136);

  sub_100067944(v4, v3, v2);
  uint64_t v6 = *(void **)(v0 + 272);
  uint64_t v5 = *(void **)(v0 + 280);
  uint64_t v7 = *(void **)(v0 + 256);
  if (v1)
  {

    uint64_t v9 = *(void *)(v0 + 224);
    unint64_t v8 = *(void **)(v0 + 232);
    *unint64_t v8 = v1;
    swift_storeEnumTagMultiPayload(v8, v9, 1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 184);

    sub_1000683C0(v12, v10);
    swift_storeEnumTagMultiPayload(v10, v11, 0LL);
  }

  sub_100068558();
  sub_10006856C(v13, v14);
  sub_100068584();

  sub_100068578();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_10005575C();
  return sub_10006852C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006734C()
{
  sub_100068578();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_10005575C();
  return sub_10006852C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000673A4()
{
  uint64_t v1 = *(void **)(v0 + 288);
  uint64_t v3 = *(void **)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v4 = *(void **)(v0 + 256);
  swift_willThrow(v5);

  sub_10006859C(*(void *)(v0 + 296));
  sub_100068558();
  sub_10006856C(v6, v7);
  sub_100068584();

  sub_100068578();
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_10005575C();
  return sub_10006852C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006741C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = sub_100055374(v4);
  uint64_t v5 = type metadata accessor for AccountDataServerRequest(0LL);
  v2[15] = v5;
  v2[16] = sub_100055374(*(void *)(v5 - 8));
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_10006747C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  id v2 = [objc_allocWithZone(AMSURLRequestEncoder) initWithBag:*(void *)(v0 + 88)];
  *(void *)(v0 + 136) = v2;
  [v2 setRequestEncoding:3];
  id v3 = sub_100067E04(v1);
  *(void *)(v0 + 144) = 0LL;
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  [v2 setAccount:v3];

  sub_1000586A4(v8, v5);
  *(_DWORD *)(v0 + 216) = swift_getEnumCaseMultiPayload(v5, v6);
  id v9 = v2;
  sub_1000684F0(v5);
  uint64_t ObjectType = swift_getObjectType(v7);
  uint64_t v13 = sub_100068804(ObjectType, v11, v12);
  *(void *)(v0 + 152) = v13;
  uint64_t v14 = (void *)swift_task_alloc(dword_1000F0E14);
  *(void *)(v0 + 160) = v14;
  void *v14 = v0;
  v14[1] = sub_1000675BC;
  return sub_100070EE0(v13);
}

uint64_t sub_1000675BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100067614()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_10006891C(*(void *)(v0 + 80), *(void *)(v0 + 168), *(void *)(v0 + 112));
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 136);

    sub_1000685E8();
    sub_1000555BC();
    return sub_100068544(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    int v4 = *(_DWORD *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 80);

    if (v4 == 1) {
      uint64_t v6 = 2LL;
    }
    else {
      uint64_t v6 = 5LL;
    }
    uint64_t v7 = sub_1000685F4(v5);
    *(void *)(v0 + 176) = v7;
    uint64_t v8 = sub_10005489C(&qword_1000F09F0);
    uint64_t inited = swift_initStackObject(v8, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1000A4BE0;
    *(void *)(inited + 32) = 0x646975472D58LL;
    *(void *)(inited + 40) = 0xE600000000000000LL;
    id v10 = [(id)objc_opt_self(AMSDevice) deviceGUID];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v11;
    *(void *)(inited + 56) = v13;
    uint64_t v14 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    *(void *)(v0 + 184) = v14;
    id v15 = (void *)swift_task_alloc(dword_1000F1CC4);
    *(void *)(v0 + 192) = v15;
    void *v15 = v0;
    v15[1] = sub_100067794;
    return sub_1000917B0(v6, *(void *)(v0 + 112), v14, v7);
  }

uint64_t sub_100067794(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 192);
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(*(void *)(v4 + 184));
  if (!v1) {
    *(void *)(v4 + 20_Block_object_dispose(&a9, 8) = a1;
  }
  sub_100068590();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_10006780C()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000555BC();
  sub_100055558();
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 208));
}

uint64_t sub_100067880()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(*(void *)(v0 + 128));
  sub_100055558();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000678F8(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_100070E60(v3, a3);
  }
  if (a2) {
    return sub_100070EC4(v3, (uint64_t)a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100067944@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v6 = sub_10005489C(&qword_1000F02A8);
  __chkstk_darwin(v6);
  sub_100055528();
  sub_100055634();
  __chkstk_darwin(v7);
  uint64_t v57 = (uint64_t)&v48 - v8;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100055528();
  sub_100055634();
  __chkstk_darwin(v11);
  sub_100055634();
  __chkstk_darwin(v12);
  sub_100055634();
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v48 - v15;
  __chkstk_darwin(v14);
  sub_100055634();
  uint64_t v18 = __chkstk_darwin(v17);
  id v20 = (char *)&v48 - v19;
  static Date.now.getter(v18);
  uint64_t v21 = sub_100068404(a1);
  if (!v21 || (v22 = v21, unint64_t v23 = sub_100067F68(v21), v24 = swift_bridgeObjectRelease(v22), !v23))
  {
    unint64_t v23 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    uint64_t v24 = swift_bridgeObjectRelease(0LL);
  }

  id v25 = sub_1000685D0(v24, "responseStatusCode");
  sub_100068CBC((uint64_t)v25, v23);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
    return sub_1000556B4();
  }

  else
  {
    int64_t v48 = a3;
    uint64_t v49 = v9;
    id v27 = sub_1000685D0(v26, "data");
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    sub_100068E50(v28, v30, __src);
    sub_1000685C4();
    uint64_t v32 = v57;
    sub_10008BCD0(0xD00000000000001CLL, 0x80000001000AD6A0LL, v23, v57);
    unint64_t v33 = *(void *)(v51 + 32);
    uint64_t v34 = v32;
    uint64_t v35 = v52;
    sub_1000684B0(v34, v52, &qword_1000F02A8);
    uint64_t v36 = v49;
    uint64_t v51 = *(void *)(v10 + 16);
    ((void (*)(char *, char *, uint64_t))v51)(v16, v20, v49);
    if (sub_100054CA8(v35, 1LL, v36) == 1)
    {
      v37.n128_f64[0] = (double)v33;
      Date.addingTimeInterval(_:)(v37, v38);
      sub_100068550((uint64_t)v16);
      sub_100066CD0(v35, &qword_1000F02A8);
    }

    else
    {
      sub_100068550((uint64_t)v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v55, v35, v36);
    }

    uint64_t v39 = v53;
    sub_10008BFA0(1702125892LL, 0xE400000000000000LL, v23, v53);
    uint64_t v40 = v54;
    sub_1000685D8(v54, v39);
    sub_1000556B4();
    uint64_t v41 = v55;
    uint64_t v42 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v51)(v50, v55, v36);
    unint64_t v43 = (unint64_t)sub_1000685D0(v42, "responseStatusCode");
    if ((v43 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      __break(1u);
    }

    else
    {
      uint64_t v44 = v40;
      unint64_t v45 = v43;
      sub_100068550(v41);
      sub_100066CD0(v57, &qword_1000F02A8);
      sub_100068550((uint64_t)v20);
      uint64_t v46 = (int *)type metadata accessor for AccountDataServerResponse(0LL);
      char v47 = v48;
      sub_1000685D8((uint64_t)&v48[v46[7]], v44);
      memcpy(v47, __src, 0xE8uLL);
      uint64_t result = sub_1000685D8((uint64_t)&v47[v46[5]], v50);
      *(void *)&v47[v46[6]] = v45;
    }
  }

  return result;
}

id sub_100067E04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountIdentity.DSID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100068BB0(a1, (uint64_t)v5);
  id v6 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  AccountIdentity.DSID.value.getter(v6);
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  id v8 = objc_msgSend(v6, "ams_iTunesAccountWithDSID:", isa);

  if (!v8)
  {
    uint64_t v9 = type metadata accessor for AccountDataNetworkingCore.Errors(0LL);
    sub_100055290( &qword_1000F09F8,  type metadata accessor for AccountDataNetworkingCore.Errors,  (uint64_t)&unk_1000A58B4);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v12 = v11;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v11, v5, v2);
    uint64_t v13 = swift_storeEnumTagMultiPayload(v12, v9, 0LL);
    swift_willThrow(v13);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

unint64_t sub_100067F68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10005489C(&qword_1000F09E0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  sub_100091010(v36, a1);
  int64_t v4 = v36[3];
  unint64_t v5 = v36[4];
  int64_t v28 = (unint64_t)(v36[2] + 64LL) >> 6;
  uint64_t v29 = v36[1];
  uint64_t v30 = v36[0];
  unint64_t result = swift_bridgeObjectRetain(a1);
  uint64_t v7 = &type metadata for String;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v8 = (v5 - 1) & v5;
  unint64_t v9 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v9 = __clz(__rbit64(v12)) + (i << 6))
  {
    sub_1000585E0(*(void *)(v30 + 48) + 40 * v9, (uint64_t)__src);
    sub_10005737C(*(void *)(v30 + 56) + 32 * v9, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1000585E0((uint64_t)__dst, (uint64_t)v33);
    if (!swift_dynamicCast(&v31, v33, &type metadata for AnyHashable, v7, 6LL))
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      sub_100066CD0((uint64_t)__dst, &qword_1000F09E8);
LABEL_33:
      swift_bridgeObjectRelease(v32);
      sub_100057374(v30);
      swift_release(v3);
      return 0LL;
    }

    uint64_t v14 = v31;
    uint64_t v15 = v32;
    sub_10005737C((uint64_t)&__dst[40], (uint64_t)v33);
    sub_100066CD0((uint64_t)__dst, &qword_1000F09E8);
    if ((swift_dynamicCast(&v31, v33, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      swift_bridgeObjectRelease(v15);
      goto LABEL_33;
    }

    id v16 = v7;
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    unint64_t result = sub_10008D974(v14, v15);
    unint64_t v19 = result;
    if ((v20 & 1) != 0)
    {
      uint64_t v21 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v21[1]);
      uint64_t *v21 = v14;
      v21[1] = v15;
      uint64_t v22 = (uint64_t *)(v3[7] + 16 * v19);
      unint64_t result = swift_bridgeObjectRelease(v22[1]);
      uint64_t *v22 = v17;
      v22[1] = v18;
      goto LABEL_29;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v23 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v23 = v14;
    v23[1] = v15;
    uint64_t v24 = (uint64_t *)(v3[7] + 16 * result);
    uint64_t *v24 = v17;
    v24[1] = v18;
    uint64_t v25 = v3[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_37;
    }
    v3[2] = v27;
LABEL_29:
    int64_t v4 = i;
    unint64_t v5 = v8;
    uint64_t v7 = v16;
    if (v8) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_38;
    }
    if (v11 >= v28) {
      goto LABEL_34;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t i = v4 + 1;
    if (!v12)
    {
      int64_t i = v4 + 2;
      if (v4 + 2 >= v28) {
        goto LABEL_34;
      }
      unint64_t v12 = *(void *)(v29 + 8 * i);
      if (!v12)
      {
        int64_t i = v4 + 3;
        if (v4 + 3 >= v28) {
          goto LABEL_34;
        }
        unint64_t v12 = *(void *)(v29 + 8 * i);
        if (!v12)
        {
          int64_t i = v4 + 4;
          if (v4 + 4 >= v28) {
            goto LABEL_34;
          }
          unint64_t v12 = *(void *)(v29 + 8 * i);
          if (!v12)
          {
            int64_t i = v4 + 5;
            if (v4 + 5 >= v28) {
              goto LABEL_34;
            }
            unint64_t v12 = *(void *)(v29 + 8 * i);
            if (!v12)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v28)
              {
                unint64_t v12 = *(void *)(v29 + 8 * v13++);
                if (v12)
                {
                  int64_t i = v13 - 1;
                  goto LABEL_21;
                }
              }

uint64_t sub_100068308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = (void *)swift_task_alloc(dword_1000F09CC);
  *(void *)(v4 + 16) = v9;
  *unint64_t v9 = v4;
  v9[1] = sub_100068378;
  return sub_100066E68(a1, a2, a3, a4);
}

uint64_t sub_100068378()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000683C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataServerResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100068404(void *a1)
{
  id v1 = [a1 responseHeaders];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_10006846C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_1000684B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10005489C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_100055744();
}

uint64_t sub_1000684F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountDataServerRequest(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006852C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100068544(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100068550(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

void sub_10006856C(uint64_t a1, uint64_t a2)
{
}

void sub_100068578()
{
}

uint64_t sub_100068584()
{
  return dispatch thunk of MetricsActivity.complete<A>(with:)(v0, v1);
}

  ;
}

uint64_t sub_10006859C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 224);
  uint64_t v2 = *(void **)(v1 + 232);
  void *v2 = a1;
  return swift_storeEnumTagMultiPayload(v2, v3, 1LL);
}

  ;
}

uint64_t sub_1000685C4()
{
  return sub_10006846C(v1, v0);
}

id sub_1000685D0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000685D8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

id sub_1000685E0(void *a1)
{
  return [a1 *(SEL *)(v1 + 3016)];
}

uint64_t sub_1000685E8()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

uint64_t sub_1000685F4(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0LL);
  sub_1000552EC();
  __chkstk_darwin(v5);
  sub_100069C50();
  uint64_t v6 = type metadata accessor for AccountDataServerRequest(0LL);
  sub_1000552EC();
  __chkstk_darwin(v7);
  sub_100064394();
  sub_1000586A4(a1, v2);
  if (swift_getEnumCaseMultiPayload(v2, v6) == 1)
  {
    sub_100054F80(v2, type metadata accessor for AccountDataServerRequest);
    return 0LL;
  }

  else
  {
    sub_100069540(v2, v1, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    uint64_t v9 = sub_10005489C(&qword_1000F0A08);
    uint64_t v10 = swift_allocObject(v9, 96LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1000A4BE0;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 32) = 0xD000000000000013LL;
    *(void *)(v10 + 40) = 0x80000001000AD3C0LL;
    uint64_t v11 = *(void *)(v1 + *(int *)(v4 + 20));
    *(void *)(v10 + 8_Block_object_dispose(&a9, 8) = &type metadata for UInt64;
    *(void *)(v10 + 64) = v11;
    sub_100068F08();
    uint64_t v8 = NSDictionary.init(dictionaryLiteral:)(v10);
    unint64_t v12 = (_BYTE *)(v1 + *(int *)(v4 + 24));
    if (*v12 != 2)
    {
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v18 = 0x79616C506F747561LL;
      unint64_t v19 = 0xE800000000000000LL;
      uint64_t v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v18, &type metadata for String);
      sub_100069C2C(v14);

      swift_unknownObjectRelease(a1);
    }

    if (v12[1] != 2)
    {
      Class v15 = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v18 = 0x6C616E6F73726570LL;
      unint64_t v19 = 0xEF6E6F6974617A69LL;
      uint64_t v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v18, &type metadata for String);
      sub_100069C2C(v16);

      swift_unknownObjectRelease(a1);
    }

    sub_100054F80(v1, type metadata accessor for AccountDataServerRequest.Put);
  }

  return v8;
}

uint64_t sub_100068804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v7 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  unint64_t v8 = v7 + 1;
  if (v7 >= v6 >> 1)
  {
    sub_100069C80(v6 > 1, v7 + 1, v4, v3);
    uint64_t v5 = v14;
  }

  *(void *)(v5 + 16) = v8;
  uint64_t v9 = v5 + 24 * v7;
  *(void *)(v9 + 32) = 0xD000000000000013LL;
  *(void *)(v9 + 40) = 0x80000001000ACB50LL;
  *(_BYTE *)(v9 + 4_Block_object_dispose(&a9, 8) = 4;
  unint64_t v10 = *(void *)(v5 + 24);
  uint64_t v11 = v7 + 2;
  if (v8 >= v10 >> 1)
  {
    sub_100069C80(v10 > 1, v11, v4, v5);
    uint64_t v5 = v15;
  }

  *(void *)(v5 + 16) = v11;
  uint64_t v12 = v5 + 24 * v8;
  *(void *)(v12 + 32) = 0xD000000000000013LL;
  *(void *)(v12 + 40) = 0x80000001000ACB70LL;
  *(_BYTE *)(v12 + 4_Block_object_dispose(&a9, 8) = 4;
  return v5;
}

void sub_10006891C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  int64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = type metadata accessor for AccountDataServerRequest(0LL);
  sub_1000552EC();
  __chkstk_darwin(v15);
  sub_100069C50();
  id v16 = sub_10008134C(a2);
  if (!v4)
  {
    id v20 = v16;
    uint64_t v21 = v18;
    uint64_t v35 = a3;
    uint64_t v36 = v19;
    uint64_t v37 = v17;
    sub_1000586A4(a1, v3);
    if (swift_getEnumCaseMultiPayload(v3, v14) == 1)
    {
      uint64_t v22 = v37;
      URL.init(string:)(v20, v37);
      uint64_t v23 = type metadata accessor for URL(0LL);
      if (sub_100054CA8((uint64_t)v13, 1LL, v23) != 1)
      {
        swift_bridgeObjectRelease(v36);
        sub_1000556B4();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v35, v13, v23);
        goto LABEL_10;
      }

      sub_100054CE0((uint64_t)v13, (uint64_t *)&unk_1000F0DF0);
      uint64_t v24 = type metadata accessor for AccountDataNetworkingCore.Errors(0LL);
      sub_100055290( &qword_1000F09F8,  type metadata accessor for AccountDataNetworkingCore.Errors,  (uint64_t)&unk_1000A58B4);
      sub_100069C44(v24, v25);
      *BOOL v26 = v20;
      v26[1] = v22;
      uint64_t v27 = sub_100069C88((uint64_t)v26);
      swift_willThrow(v27);
      uint64_t v28 = v36;
    }

    else
    {
      uint64_t v29 = v36;
      URL.init(string:)(v21, v36);
      uint64_t v30 = type metadata accessor for URL(0LL);
      if (sub_100054CA8((uint64_t)v11, 1LL, v30) != 1)
      {
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(v37);
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v35, v11, v30);
        goto LABEL_10;
      }

      sub_100054CE0((uint64_t)v11, (uint64_t *)&unk_1000F0DF0);
      uint64_t v31 = type metadata accessor for AccountDataNetworkingCore.Errors(0LL);
      sub_100055290( &qword_1000F09F8,  type metadata accessor for AccountDataNetworkingCore.Errors,  (uint64_t)&unk_1000A58B4);
      sub_100069C44(v31, v32);
      void *v33 = v21;
      v33[1] = v29;
      sub_100069C88((uint64_t)v33);
      uint64_t v34 = swift_bridgeObjectRetain(v29);
      swift_willThrow(v34);
      swift_bridgeObjectRelease(v29);
      uint64_t v28 = v37;
    }

    swift_bridgeObjectRelease(v28);
LABEL_10:
    sub_100054F80(v3, type metadata accessor for AccountDataServerRequest);
  }

  sub_1000554F4();
}

uint64_t sub_100068BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for AccountDataServerRequest(0LL);
  sub_1000552EC();
  __chkstk_darwin(v12);
  sub_100055840();
  sub_1000586A4(a1, v3);
  if (swift_getEnumCaseMultiPayload(v3, v11) == 1)
  {
    sub_100069540(v3, v10, (void (*)(void))type metadata accessor for AccountDataServerRequest.Get);
    uint64_t v13 = type metadata accessor for AccountIdentity.DSID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(a2, v10, v13);
  }

  else
  {
    sub_100069540(v3, v2, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    type metadata accessor for AccountIdentity.DSID(0LL);
    uint64_t v15 = sub_100069C68();
    return v18(v15, v16, v17);
  }

void sub_100068CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100055840();
  if (a1 == 429)
  {
    sub_10008BCD0(0x66612D7972746572LL, 0xEB00000000726574LL, a2, v8);
    if (sub_100054CA8(v8, 1LL, v9) == 1)
    {
      sub_100054CE0(v8, &qword_1000F02A8);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v2, v8, v9);
      uint64_t v11 = type metadata accessor for AccountDataServerResponse.Errors(0LL);
      sub_100055290( &qword_1000F0A00,  type metadata accessor for AccountDataServerResponse.Errors,  (uint64_t)&unk_1000A5358);
      sub_100069C44(v11, v12);
      uint64_t v14 = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v2, v9);
      uint64_t v15 = sub_10005489C(&qword_1000F06B8);
      uint64_t v16 = sub_100054998(v14, 0LL, 1LL, v15);
      swift_willThrow(v16);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
    }
  }

void *sub_100068E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = JSONDecoder.init()();
  unint64_t v9 = sub_100061568();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(__src, &unk_1000D8AC8, a1, a2, &unk_1000D8AC8, v9);
  unint64_t result = (void *)swift_release(v8);
  if (!v3) {
    return memcpy(a3, __src, 0xE8uLL);
  }
  return result;
}

unint64_t sub_100068F08()
{
  unint64_t result = qword_1000F0A10;
  if (!qword_1000F0A10)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSMutableDictionary);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000F0A10);
  }

  return result;
}

uint64_t type metadata accessor for AccountDataNetworkingCore.Errors(uint64_t a1)
{
  uint64_t result = qword_1000F0A88;
  if (!qword_1000F0A88) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountDataNetworkingCore.Errors);
  }
  return result;
}

unint64_t sub_100068F7C()
{
  return sub_100069C10();
}

uint64_t sub_100068F98(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D86B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100068FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease(a5);
}

uint64_t sub_100069054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0LL), result = 0LL, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0LL);
    }
  }

  return result;
}

void sub_1000690E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10005489C(&qword_1000F0AD8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10005878C();
  uint64_t v13 = v12 - v11;
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100054838(a1, v15);
  unint64_t v16 = sub_100069A00();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccountDataNetworkingBag.CodingKeys,  &type metadata for AccountDataNetworkingBag.CodingKeys,  v16,  v15,  v14);
  char v20 = 0;
  sub_1000646DC(a2, a3, (uint64_t)&v20);
  if (!v5)
  {
    char v19 = 1;
    sub_1000646DC(a4, a5, (uint64_t)&v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  sub_1000554F4();
}

Swift::Int sub_1000691D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

uint64_t sub_100069250(void *a1)
{
  uint64_t v3 = sub_10005489C(&qword_1000F0AC8);
  __chkstk_darwin(v3);
  sub_10005878C();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100054838(a1, v4);
  unint64_t v6 = sub_100069A00();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccountDataNetworkingBag.CodingKeys,  &type metadata for AccountDataNetworkingBag.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_100064774();
  }

  else
  {
    char v12 = 0;
    uint64_t v5 = sub_1000646CC((uint64_t)&v12);
    char v11 = 1;
    swift_bridgeObjectRetain(v8);
    sub_1000646CC((uint64_t)&v11);
    uint64_t v10 = v9;
    sub_100064444();
    swift_bridgeObjectRetain(v10);
    sub_100064774();
    swift_bridgeObjectRelease(v10);
    sub_1000556B4();
  }

  return v5;
}

void sub_1000693A0(char *a1, char *a2)
{
}

void sub_1000693AC()
{
}

uint64_t sub_1000693B4(uint64_t a1)
{
  return sub_100096430(a1, *v1);
}

void sub_1000693BC(uint64_t a1)
{
}

uint64_t sub_1000693C4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100068F98(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000693F0@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_100068F7C();
  *a1 = 0xD000000000000013LL;
  a1[1] = v3;
  return result;
}

unint64_t sub_100069420()
{
  return 0xD000000000000013LL;
}

uint64_t sub_100069440@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100068FE8(a1);
  *a2 = result;
  return result;
}

void sub_100069464(void *a1@<X8>)
{
  *a1 = &off_1000D8690;
}

uint64_t sub_100069474(uint64_t a1)
{
  unint64_t v2 = sub_100069A00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006949C(uint64_t a1)
{
  unint64_t v2 = sub_100069A00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000694C4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100069250(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

void sub_1000694F0(void *a1)
{
}

Swift::Int sub_10006950C()
{
  return sub_1000691D4(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_100069518(uint64_t a1)
{
  return sub_100068FEC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100069524(uint64_t *a1, uint64_t *a2)
{
  return sub_100069054(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void sub_100069540(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3 = sub_100069C68();
  v4(v3);
  sub_100055744();
}

ValueMetadata *type metadata accessor for AccountDataNetworkingBag()
{
  return &type metadata for AccountDataNetworkingBag;
}

uint64_t *sub_100069580(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v13);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain(v14);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = type metadata accessor for AccountIdentity.DSID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_100069654(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1) {
    return swift_bridgeObjectRelease(*(void *)(a1 + 8));
  }
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for AccountIdentity.DSID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_1000696B4(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    swift_bridgeObjectRetain(v11);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_100069760(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100054F80((uint64_t)a1, type metadata accessor for AccountDataNetworkingCore.Errors);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v11 = a2[1];
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for AccountIdentity.DSID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

void *sub_10006982C(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_1000698B4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100054F80((uint64_t)a1, type metadata accessor for AccountDataNetworkingCore.Errors);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for AccountIdentity.DSID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100069954(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountIdentity.DSID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000A57C0;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

unint64_t sub_1000699C4()
{
  unint64_t result = qword_1000F0AC0;
  if (!qword_1000F0AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A57FC, &type metadata for AccountDataNetworkingBag);
    atomic_store(result, (unint64_t *)&qword_1000F0AC0);
  }

  return result;
}

unint64_t sub_100069A00()
{
  unint64_t result = qword_1000F0AD0;
  if (!qword_1000F0AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5A38, &type metadata for AccountDataNetworkingBag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0AD0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccountDataNetworkingBag.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100069A88 + 4 * byte_1000A5795[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100069ABC + 4 * byte_1000A5790[v4]))();
}

uint64_t sub_100069ABC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069AC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100069ACCLL);
  }
  return result;
}

uint64_t sub_100069AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100069AE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100069AE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069AEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountDataNetworkingBag.CodingKeys()
{
  return &type metadata for AccountDataNetworkingBag.CodingKeys;
}

unint64_t sub_100069B0C()
{
  unint64_t result = qword_1000F0AE0;
  if (!qword_1000F0AE0)
  {
    uint64_t v1 = sub_1000617F8(&qword_1000F0AE8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000F0AE0);
  }

  return result;
}

unint64_t sub_100069B54()
{
  unint64_t result = qword_1000F0AF0;
  if (!qword_1000F0AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5A10, &type metadata for AccountDataNetworkingBag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0AF0);
  }

  return result;
}

unint64_t sub_100069B94()
{
  unint64_t result = qword_1000F0AF8;
  if (!qword_1000F0AF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5900, &type metadata for AccountDataNetworkingBag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0AF8);
  }

  return result;
}

unint64_t sub_100069BD4()
{
  unint64_t result = qword_1000F0B00;
  if (!qword_1000F0B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5928, &type metadata for AccountDataNetworkingBag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F0B00);
  }

  return result;
}

unint64_t sub_100069C10()
{
  return 0xD000000000000013LL;
}

id sub_100069C2C(uint64_t a1)
{
  return objc_msgSend(v1, *(SEL *)(v3 + 832), v2, a1);
}

uint64_t sub_100069C44(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

  ;
}

uint64_t sub_100069C68()
{
  return v0;
}

void sub_100069C80(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100069C88(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 1LL);
}

uint64_t sub_100069C94(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

void sub_100069CA0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin();
  sub_10005878C();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_1000559FC();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  sub_10005878C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = (int *)sub_100055F18();
  sub_10006AFB8(v1 + v12[9], v6);
  if (sub_100054CA8(v6, 1LL, v7) == 1)
  {
    sub_100054CE0(v6, &qword_1000F02A8);
    __int16 v13 = *(_WORD *)(v1 + v12[8]);
    if (v13 == 3)
    {
      sub_10005861C(v1, (uint64_t)v29, &qword_1000F02B0);
      sub_10005861C((uint64_t)v29, (uint64_t)v30, &qword_1000F02B0);
      if (sub_1000549A4((uint64_t)v30) == 1 || v30[194] != 1)
      {
        uint64_t v21 = sub_10006B0F4();
        sub_10006AFB8(v21, v22);
        sub_10006AFB8(v1 + v12[6], v3 + v12[6]);
        sub_10006AFF4();
        sub_10006AFDC();
        sub_10006AF70();
        uint64_t v23 = *(void *)(v1 + v12[12]);
        uint64_t v24 = v6 + v12[13];
        uint64_t v25 = sub_10006B024();
        sub_100055F64(v24, v26, v27, v25);
        sub_10005861C((uint64_t)v29, v6, &qword_1000F02B0);
        *(_WORD *)(v6 + v12[8]) = 3;
        *(_WORD *)(v6 + v12[10]) = v13;
        *(void *)(v6 + v12[12]) = v23;
        sub_10006A7C4(v29);
      }

      else
      {
        uint64_t v14 = sub_10006B0F4();
        sub_10006AFB8(v14, v15);
        sub_10006AFB8(v1 + v12[6], v3 + v12[6]);
        sub_10006AFF4();
        sub_10006AFDC();
        sub_10006AF70();
        uint64_t v16 = *(void *)(v1 + v12[12]);
        uint64_t v17 = v6 + v12[13];
        uint64_t v18 = sub_10006B024();
        sub_100055F64(v17, v19, v20, v18);
        sub_10006B0B0((uint64_t)v29, v6);
        *(_WORD *)(v6 + v12[8]) = v13;
        *(_WORD *)(v6 + v12[10]) = 3;
        *(void *)(v6 + v12[12]) = v16;
        sub_10006B0B0((uint64_t)v29, (uint64_t)v28);
        sub_1000584C0(v28);
      }
    }

    else
    {
      sub_10006AD8C();
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v6, v7);
    sub_10006A834();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }

  sub_1000642E8();
}

void sub_100069F38()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_10006B110();
  sub_1000552EC();
  __chkstk_darwin(v8);
  sub_10005878C();
  uint64_t v11 = (const void *)(v10 - v9);
  uint64_t v12 = sub_10005489C(&qword_1000F02F8);
  sub_1000552EC();
  __chkstk_darwin(v13);
  sub_10006B0C8();
  sub_10005863C(v4, (uint64_t)v0, &qword_1000F02F8);
  if (swift_getEnumCaseMultiPayload(v0, v12) == 1)
  {
    uint64_t v14 = *v0;
    sub_10006A14C();
    swift_errorRelease(v14);
  }

  else
  {
    sub_1000586E8((uint64_t)v0, (uint64_t)v11, type metadata accessor for AccountDataServerResponse);
    uint64_t v15 = sub_100055F18();
    if (*(_WORD *)(v2 + *(int *)(v15 + 40)) == 3)
    {
      uint64_t v16 = (int *)v15;
      __int16 v20 = *(_WORD *)(v2 + *(int *)(v15 + 40));
      sub_100064400(v21, v11);
      sub_100064400(v22, v11);
      nullsub_1(v22);
      uint64_t v17 = v6 + v16[5];
      uint64_t v18 = (uint64_t)v11 + *(int *)(v7 + 20);
      sub_1000559FC();
      sub_10006B0A8(v17, v18);
      sub_10006AF1C(v17, 0LL);
      sub_10006AF1C(v6 + v16[6], 1LL);
      sub_10006B0A8(v6 + v16[7], (uint64_t)v11 + *(int *)(v7 + 28));
      __int16 v19 = *(_WORD *)(v2 + v16[8]);
      sub_10006AF1C(v6 + v16[9], 1LL);
      sub_10006AF1C(v6 + v16[11], 1LL);
      sub_10005863C(v2 + v16[13], v6 + v16[13], &qword_1000F02F0);
      sub_10005861C((uint64_t)v22, v6, &qword_1000F02B0);
      *(_WORD *)(v6 + v16[8]) = v19;
      *(_WORD *)(v6 + v16[10]) = v20;
      *(void *)(v6 + v16[12]) = 0LL;
      sub_1000584C0(v21);
    }

    else
    {
      sub_10006A48C();
    }

    sub_100054F80((uint64_t)v11, type metadata accessor for AccountDataServerResponse);
  }

  sub_1000642E8();
}

void sub_10006A14C()
{
  uint64_t v46 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_10005489C(&qword_1000F0B08);
  sub_1000552EC();
  __chkstk_darwin(v9);
  sub_10006B0C8();
  uint64_t v10 = type metadata accessor for AccountDataServerResponse.Errors(0LL);
  sub_1000552EC();
  __chkstk_darwin(v11);
  sub_10006B054();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v45 - v13;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v15);
  sub_10005878C();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = sub_100055F18();
  uint64_t v21 = (int *)v19;
  unsigned int v22 = *(unsigned __int16 *)(v4 + *(int *)(v19 + 32));
  unsigned int v23 = *(unsigned __int16 *)(v4 + *(int *)(v19 + 40));
  unsigned int v24 = v23 >> 8;
  int v25 = *(_WORD *)(v4 + *(int *)(v19 + 32));
  unsigned int v26 = v22 >> 8;
  if (v25 == 2) {
    __int16 v27 = *(_WORD *)(v4 + *(int *)(v19 + 40));
  }
  else {
    __int16 v27 = *(_WORD *)(v4 + *(int *)(v19 + 32));
  }
  if (v26 == 2) {
    unsigned int v26 = v23 >> 8;
  }
  if (v25 != 3)
  {
    unsigned int v24 = v26;
    LOBYTE(v23) = v27;
  }

  int v28 = v23 | (v24 << 8);
  HIDWORD(v45) = v22;
  sub_10006B118(v19, v20, &qword_1000F02A8);
  v47[0] = v6;
  swift_errorRetain(v6);
  uint64_t v29 = sub_10005489C(&qword_1000F0288);
  if ((swift_dynamicCast(v1, v47, v29, v10, 6LL) & 1) != 0)
  {
    sub_10006B070(v1, 0LL);
    sub_100054CE0(v18, &qword_1000F02A8);
    sub_1000586E8(v1, (uint64_t)v14, type metadata accessor for AccountDataServerResponse.Errors);
    sub_1000586E8((uint64_t)v14, v0, type metadata accessor for AccountDataServerResponse.Errors);
    uint64_t v30 = sub_10005489C(&qword_1000F06B8);
    uint64_t v31 = sub_100054CA8(v0, 1LL, v30);
    if ((_DWORD)v31 == 1)
    {
      sub_10006B118(v31, v32, &qword_1000F02A8);
      sub_100054F80(v0, type metadata accessor for AccountDataServerResponse.Errors);
    }

    else
    {
      uint64_t v33 = sub_1000559FC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL))(v18, v0, v33);
      sub_100054998(v18, 0LL, 1LL, v33);
    }
  }

  else
  {
    sub_10006B070(v1, 1LL);
    sub_100054CE0(v1, &qword_1000F0B08);
  }

  sub_10005861C(v4, (uint64_t)v47, &qword_1000F02B0);
  uint64_t v34 = sub_10006B07C(v21[5]);
  sub_10005863C(v34, v35, &qword_1000F02A8);
  uint64_t v36 = v21[7];
  uint64_t v37 = v4 + v36;
  uint64_t v38 = v8 + v36;
  uint64_t v39 = sub_1000559FC();
  sub_10006B00C(v38, v37);
  sub_100054998(v8 + v21[9], 1LL, 1LL, v39);
  uint64_t v40 = v8 + v21[11];
  sub_10006B00C(v40, v46);
  sub_10006AFA8(v40);
  uint64_t v41 = *(void *)(v4 + v21[12]);
  uint64_t v42 = v41 + 1;
  if (v41 == -1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v43 = sub_10006B07C(v21[13]);
    sub_10005863C(v43, v44, &qword_1000F02F0);
    sub_10005861C((uint64_t)v47, v8, &qword_1000F02B0);
    sub_10005861C(v18, v8 + v21[6], &qword_1000F02A8);
    *(_WORD *)(v8 + v21[8]) = WORD2(v45);
    *(_WORD *)(v8 + v21[10]) = 3;
    *(void *)(v8 + v21[12]) = v42;
    sub_10006B0A0();
    sub_1000642E8();
  }

void sub_10006A48C()
{
  uint64_t v1 = v0;
  int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000559FC();
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10005878C();
  uint64_t v11 = v10 - v9;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v12);
  sub_10006B0B8();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v46 = v1;
  sub_10006AFA0(v1, (uint64_t)v53);
  sub_10006AFA0((uint64_t)v53, (uint64_t)v54);
  if (sub_1000549A4((uint64_t)v54) != 1)
  {
    sub_100064400(&v52, v54);
    HIDWORD(v44) = v3;
    sub_10005E1BC(v3, (uint64_t)v50);
    sub_100064400(v51, v5);
    sub_100064400(v49, v5);
    char v19 = sub_10005E378();
    sub_100061878(v50);
    if ((v19 & 1) != 0)
    {
      sub_100064400(v48, v49);
      nullsub_1(v48);
      uint64_t v20 = (int *)sub_100055F18();
      uint64_t v21 = v7 + v20[5];
      uint64_t v22 = sub_10006B110();
      unsigned int v23 = &v5[*(int *)(v22 + 20)];
      unsigned int v24 = v5;
      uint64_t v25 = v46;
      unsigned int v26 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 16);
      v26(v21, v23, v8);
      sub_10006AF1C(v21, 0LL);
      sub_10006AF1C(v7 + v20[6], 1LL);
      v26(v7 + v20[7], &v24[*(int *)(v22 + 28)], v8);
      LOWORD(v26) = *(_WORD *)(v25 + v20[8]);
      uint64_t v27 = sub_10006AF28(v7 + v20[9]);
      sub_10005863C(v27, v28, &qword_1000F02F0);
      sub_10006B124(v29, v30, &qword_1000F02B0);
      *(_WORD *)(v7 + v20[8]) = (_WORD)v26;
      sub_10006B088();
      uint64_t v31 = v51;
      goto LABEL_16;
    }

    LOWORD(sub_10006856C(v2, v3) = WORD2(v44);
  }

  uint64_t v32 = v11;
  HIDWORD(v44) = BYTE1(v3);
  sub_100064400(v49, v5);
  uint64_t v33 = sub_10006B110();
  sub_10006B0A8((uint64_t)v18, (uint64_t)&v5[*(int *)(v33 + 20)]);
  sub_10006AF1C((uint64_t)v18, 0LL);
  uint64_t v45 = v15;
  sub_10006AF1C(v15, 1LL);
  sub_10006B0A8(v11, (uint64_t)&v5[*(int *)(v33 + 28)]);
  uint64_t v34 = (int *)sub_100055F18();
  unsigned int v35 = *(unsigned __int16 *)(v46 + v34[8]);
  int v36 = *(_WORD *)(v46 + v34[8]);
  unsigned int v37 = v35 >> 8;
  if (v36 == 2) {
    LOBYTE(v35) = v3;
  }
  if (v37 == 2) {
    LOWORD(v37) = WORD2(v44);
  }
  if (v36 == 3) {
    __int16 v38 = WORD2(v44);
  }
  else {
    __int16 v38 = v37;
  }
  if (v36 == 3) {
    unsigned __int8 v39 = v3;
  }
  else {
    unsigned __int8 v39 = v35;
  }
  sub_100064400(v48, v49);
  nullsub_1(v48);
  uint64_t v40 = sub_10006AF28(v7 + v34[9]);
  sub_10005863C(v40, v41, &qword_1000F02F0);
  sub_10006B124(v42, v43, &qword_1000F02B0);
  sub_10005861C((uint64_t)v18, v7 + v34[5], &qword_1000F02A8);
  sub_10005861C(v45, v7 + v34[6], &qword_1000F02A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v7 + v34[7], v32, v8);
  *(_WORD *)(v7 + v34[8]) = v39 | (unsigned __int16)(v38 << 8);
  sub_10006B088();
  uint64_t v31 = v49;
LABEL_16:
  sub_1000584C0(v31);
  sub_1000642E8();
}

uint64_t *sub_10006A7C4(uint64_t *a1)
{
  return a1;
}

void sub_10006A834()
{
  int v62 = v1;
  uint64_t v3 = v2;
  unint64_t v67 = v4;
  uint64_t v65 = v5;
  uint64_t v7 = v6;
  uint64_t v63 = v8;
  uint64_t v64 = sub_1000559FC();
  uint64_t v66 = *(void *)(v64 - 8);
  __chkstk_darwin();
  sub_10005878C();
  uint64_t v11 = v10 - v9;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin();
  sub_10006B0B8();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)v61 - v15;
  uint64_t v17 = (int *)sub_100055F18();
  sub_1000552EC();
  __chkstk_darwin();
  sub_10006B054();
  __chkstk_darwin();
  char v19 = (char *)v61 - v18;
  sub_10005489C(&qword_1000F02F0);
  sub_1000552EC();
  __chkstk_darwin();
  sub_10006B0B8();
  uint64_t v22 = v20 - v21;
  __chkstk_darwin();
  unsigned int v24 = (char *)v61 - v23;
  v61[1] = v7;
  double v25 = Date.timeIntervalSince(_:)(v3);
  if (v25 <= (double)v67)
  {
    uint64_t v40 = v65;
    sub_10006AF68(v65 + v17[13], (uint64_t)v24);
    sub_10006AF68((uint64_t)v24, v22);
    uint64_t v41 = sub_10006B024();
    int v42 = sub_100054CA8(v22, 1LL, v41);
    sub_100054CE0(v22, &qword_1000F02F0);
    if (v42 == 1)
    {
      sub_100054CE0((uint64_t)v24, &qword_1000F02F0);
      sub_10006B014();
      v43();
      _BYTE *v24 = v62;
      sub_100054998((uint64_t)v24, 0LL, 1LL, v41);
    }

    sub_10006AFA0(v40, (uint64_t)v68);
    uint64_t v44 = v63;
    sub_10006AF68(v40 + v17[5], v63 + v17[5]);
    sub_10006AF68(v40 + v17[6], v44 + v17[6]);
    sub_10006B014();
    v45();
    __int16 v46 = *(_WORD *)(v40 + v17[8]);
    sub_10006AF68(v40 + v17[9], v44 + v17[9]);
    __int16 v47 = *(_WORD *)(v40 + v17[10]);
    sub_10006AF68(v40 + v17[11], v44 + v17[11]);
    uint64_t v48 = *(void *)(v40 + v17[12]);
    sub_10006AFA0((uint64_t)v68, v44);
    *(_WORD *)(v44 + v17[8]) = v46;
    *(_WORD *)(v44 + v17[10]) = v47;
    *(void *)(v44 + v17[12]) = v48;
    sub_10005861C((uint64_t)v24, v44 + v17[13], &qword_1000F02F0);
    sub_10006B0A0();
  }

  else
  {
    uint64_t v26 = (uint64_t)v19;
    v61[0] = (uint64_t)v16;
    uint64_t v27 = v65;
    unsigned int v28 = *(unsigned __int16 *)(v65 + v17[10]);
    if (*(_WORD *)(v65 + v17[10]) == 3)
    {
      sub_10006AFA0(v65, (uint64_t)v68);
      sub_10006AF68(v27 + v17[5], v0 + v17[5]);
      sub_10006AF68(v27 + v17[6], v0 + v17[6]);
      sub_10006B014();
      uint64_t v29 = v64;
      v31(v30);
      __int16 v32 = *(_WORD *)(v27 + v17[8]);
      sub_100054998(v0 + v17[9], 1LL, 1LL, v29);
      sub_10006AF68(v27 + v17[11], v0 + v17[11]);
      uint64_t v33 = *(void *)(v27 + v17[12]);
      uint64_t v34 = v0 + v17[13];
      uint64_t v35 = sub_10006B024();
      sub_100055F64(v34, v36, v37, v35);
      sub_10006AFA0((uint64_t)v68, v0);
      *(_WORD *)(v0 + v17[8]) = v32;
      *(_WORD *)(v0 + v17[10]) = v28;
      *(void *)(v0 + v17[12]) = v33;
      sub_10006B0A0();
      uint64_t v38 = sub_10006B0E0();
      sub_10006B02C(v38, v0);
      uint64_t v39 = v0;
    }

    else
    {
      unsigned int v49 = v28 >> 8;
      sub_10005861C(v65, (uint64_t)v68, &qword_1000F02B0);
      sub_10006B108(v27 + v17[5], v61[0]);
      sub_10006B108(v27 + v17[6], v14);
      sub_10006B014();
      uint64_t v50 = v64;
      v51(v11);
      unsigned int v52 = *(unsigned __int16 *)(v27 + v17[8]);
      int v53 = *(_WORD *)(v27 + v17[8]);
      if (v53 != 3)
      {
        if (v53 != 2) {
          LOBYTE(v2_Block_object_dispose(&a9, 8) = *(_WORD *)(v27 + v17[8]);
        }
        if (v52 >> 8 != 2) {
          unsigned int v49 = v52 >> 8;
        }
      }

      __int16 v54 = v28 | (unsigned __int16)((_WORD)v49 << 8);
      sub_10006B070(v26 + v17[9], 1LL);
      sub_10006B108(v27 + v17[11], v26 + v17[11]);
      uint64_t v55 = *(void *)(v27 + v17[12]);
      uint64_t v56 = v26 + v17[13];
      uint64_t v57 = sub_10006B024();
      sub_100055F64(v56, v58, v59, v57);
      sub_10005861C((uint64_t)v68, v26, &qword_1000F02B0);
      sub_10006AFA0(v61[0], v26 + v17[5]);
      sub_10006AFA0(v14, v26 + v17[6]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v26 + v17[7], v11, v50);
      *(_WORD *)(v26 + v17[8]) = v54;
      *(_WORD *)(v26 + v17[10]) = 3;
      *(void *)(v26 + v17[12]) = v55;
      sub_10006B0A0();
      uint64_t v60 = sub_10006B0E0();
      sub_10006B02C(v60, v26);
      uint64_t v39 = v26;
    }

    sub_100054F80(v39, type metadata accessor for AccountDataState);
  }

  sub_1000642E8();
}

void sub_10006AD8C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10006B0B0(v0, (uint64_t)v24);
  sub_10006B0B0((uint64_t)v24, (uint64_t)v25);
  if (sub_1000549A4((uint64_t)v25) == 1 || v25[194] != 1)
  {
    uint64_t v6 = (int *)sub_100055F18();
    uint64_t v13 = sub_10006B07C(v6[5]);
    sub_10005863C(v13, v14, &qword_1000F02A8);
    sub_10006B040();
    uint64_t v15 = sub_1000559FC();
    sub_10006AFC0(v15);
    uint64_t v16 = v5 + v6[9];
    sub_10006B00C(v16, v3);
    sub_10006AFA8(v16);
    __int16 v12 = *(_WORD *)(v1 + v6[8]);
    __int16 v10 = 3;
  }

  else
  {
    uint64_t v6 = (int *)sub_100055F18();
    uint64_t v7 = sub_10006B07C(v6[5]);
    sub_10005863C(v7, v8, &qword_1000F02A8);
    sub_10006B040();
    uint64_t v9 = sub_1000559FC();
    sub_10006AFC0(v9);
    __int16 v10 = *(_WORD *)(v1 + v6[8]);
    uint64_t v11 = v5 + v6[9];
    sub_10006B00C(v11, v3);
    sub_10006AFA8(v11);
    __int16 v12 = 3;
  }

  uint64_t v17 = sub_10006B07C(v6[11]);
  sub_10005863C(v17, v18, &qword_1000F02A8);
  uint64_t v19 = *(void *)(v1 + v6[12]);
  uint64_t v20 = v5 + v6[13];
  uint64_t v21 = sub_10006B024();
  sub_100055F64(v20, v22, v23, v21);
  sub_10005861C((uint64_t)v24, v5, &qword_1000F02B0);
  *(_WORD *)(v5 + v6[8]) = v10;
  *(_WORD *)(v5 + v6[10]) = v12;
  *(void *)(v5 + v6[12]) = v19;
  sub_10006A7C4(v24);
  sub_1000642E8();
}

uint64_t sub_10006AF1C(uint64_t a1, uint64_t a2)
{
  return sub_100054998(a1, a2, 1LL, v2);
}

uint64_t sub_10006AF28(uint64_t a1)
{
  return v3 + *(int *)(v1 + 52);
}

void sub_10006AF68(uint64_t a1, uint64_t a2)
{
}

void sub_10006AF70()
{
}

void sub_10006AFA0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006AFA8(uint64_t a1)
{
  return sub_100054998(a1, 0LL, 1LL, v1);
}

void sub_10006AFB8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006AFC0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v2, v1, a1);
}

uint64_t sub_10006AFDC()
{
  return v0(v3 + *(int *)(v1 + 36), v4, v2);
}

uint64_t sub_10006AFF4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))( v4 + *(int *)(v2 + 28),  v1 + *(int *)(v2 + 28),  v3);
}

uint64_t sub_10006B00C(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

uint64_t sub_10006B024()
{
  return type metadata accessor for CachedServerDataSyncAttempt(0LL);
}

uint64_t sub_10006B02C(uint64_t a1, uint64_t a2)
{
  return sub_100069CA0(a1, a2, *(void *)(v2 - 328), *(unsigned int *)(v2 - 364));
}

void sub_10006B040()
{
}

  ;
}

uint64_t sub_10006B070(uint64_t a1, uint64_t a2)
{
  return sub_100054998(a1, a2, 1LL, v2);
}

uint64_t sub_10006B07C@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

void sub_10006B088()
{
  *(_WORD *)(v1 + *(int *)(v0 + 40)) = 3;
  *(void *)(v1 + *(int *)(v0 + 48)) = 0LL;
}

uint64_t *sub_10006B0A0()
{
  return sub_10006A7C4((uint64_t *)(v0 - 320));
}

uint64_t sub_10006B0A8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void sub_10006B0B0(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

uint64_t sub_10006B0E0()
{
  return *(void *)(v0 - 376);
}

uint64_t sub_10006B0F4()
{
  return v0 + *(int *)(v1 + 20);
}

void sub_10006B108(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006B110()
{
  return type metadata accessor for AccountDataServerResponse(0LL);
}

void sub_10006B118(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10006B124(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10006B130(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10006BF90();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10006B0C8();
  sub_10005489C((uint64_t *)&unk_1000F0DF0);
  sub_1000552EC();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v22 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v22 - v12;
  id v14 = objc_msgSend((id)objc_opt_self(NSURL), "ams_dataVaultDirectory");
  if (v14)
  {
    uint64_t v15 = v14;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = 1LL;
  }

  sub_10006BF78((uint64_t)v8, v16);
  sub_10006BB34((uint64_t)v8, (uint64_t)v11);
  if (sub_100054CA8((uint64_t)v11, 1LL, v3) == 1)
  {
    sub_100054CE0((uint64_t)v11, (uint64_t *)&unk_1000F0DF0);
    sub_10006BF78((uint64_t)v13, 1LL);
  }

  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000010LL, 0x80000001000AD730LL, 1LL);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v11, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x44746E756F636341LL, 0xEB00000000617461LL, 1LL);
    v17(v1, v3);
    sub_10006BF78((uint64_t)v13, 0LL);
    if (sub_100054CA8((uint64_t)v13, 1LL, v3) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v13, v3);
      goto LABEL_9;
    }
  }

  sub_100054CE0((uint64_t)v13, (uint64_t *)&unk_1000F0DF0);
  uint64_t v18 = sub_10006BF98();
  sub_100055290(&qword_1000F0B18, type metadata accessor for AccountDataFileSystemStore.Errors, (uint64_t)&unk_1000A5AFC);
  sub_100069C44(v18, v19);
  void *v20 = 0xD000000000000016LL;
  v20[1] = 0x80000001000AD710LL;
  uint64_t v21 = swift_storeEnumTagMultiPayload(v20, v18, 0LL);
  swift_willThrow(v21);
LABEL_9:
  sub_1000554F4();
}

void sub_10006B3A0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AccountDataStoreFilesystemCore(0LL);
  sub_1000552EC();
  __chkstk_darwin(v5);
  sub_10005878C();
  uint64_t v8 = (char *)(v7 - v6);
  sub_10005489C(&qword_1000F0B10);
  sub_1000552EC();
  __chkstk_darwin(v9);
  sub_10006B0C8();
  uint64_t v10 = type metadata accessor for AMPAccount(0LL);
  sub_1000552EC();
  __chkstk_darwin(v11);
  sub_10005878C();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_10006BF90();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10005878C();
  uint64_t v19 = v18 - v17;
  sub_10006B130(v18 - v17);
  if (!v2)
  {
    uint64_t v20 = AccountIdentity.altDSID.getter();
    sub_10006F844(v20, v21, v3);
    if (sub_100054CA8(v3, 1LL, v10) == 1)
    {
      sub_100054CE0(v3, &qword_1000F0B10);
      uint64_t v22 = sub_10006BF98();
      sub_100055290( &qword_1000F0B18,  type metadata accessor for AccountDataFileSystemStore.Errors,  (uint64_t)&unk_1000A5AFC);
      sub_100069C44(v22, v23);
      uint64_t v25 = v24;
      uint64_t v26 = type metadata accessor for AccountIdentity(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))(v25, a1, v26);
      uint64_t v27 = swift_storeEnumTagMultiPayload(v25, v22, 1LL);
      swift_willThrow(v27);
      uint64_t v28 = v15;
    }

    else
    {
      sub_10006BAAC(v3, v14);
      id v29 = [(id)objc_opt_self(NSFileManager) defaultManager];
      *((void *)v8 + 3) = &type metadata for LiveFileStore;
      *((void *)v8 + 4) = &off_1000DA6D0;
      *(void *)uint64_t v8 = v29;
      uint64_t v28 = v15;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(&v8[*(int *)(v4 + 20)], v19, v15);
      uint64_t v30 = &v8[*(int *)(v4 + 24)];
      *((void *)v30 + 3) = v10;
      *((void *)v30 + 4) = &off_1000D9450;
      uint64_t v31 = sub_1000548F4(v30);
      sub_10006BAF0(v14, (uint64_t)v31);
      sub_10006BFA0(a2);
      sub_100054F80((uint64_t)v8, type metadata accessor for AccountDataStoreFilesystemCore);
      sub_100054F80(v14, type metadata accessor for AMPAccount);
    }

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v28);
  }

  sub_1000554F4();
}

void sub_10006B60C(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = a1;
  uint64_t v61 = type metadata accessor for AccountDataStoreFilesystemCore(0LL);
  sub_1000552EC();
  __chkstk_darwin(v3);
  sub_10005878C();
  uint64_t v63 = (void *)(v5 - v4);
  uint64_t v6 = sub_10006BF90();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v57 - v14;
  sub_10005489C(&qword_1000F0B10);
  sub_1000552EC();
  __chkstk_darwin(v16);
  sub_10005878C();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for AMPAccount(0LL);
  sub_1000552EC();
  __chkstk_darwin(v21);
  sub_10005878C();
  uint64_t v24 = v23 - v22;
  uint64_t v65 = a2;
  uint64_t v25 = AccountIdentity.altDSID.getter();
  sub_10006F844(v25, v26, v19);
  if (sub_100054CA8(v19, 1LL, v20) == 1)
  {
    sub_100054CE0(v19, &qword_1000F0B10);
    uint64_t v27 = sub_10006BF98();
    sub_100055290( &qword_1000F0B18,  type metadata accessor for AccountDataFileSystemStore.Errors,  (uint64_t)&unk_1000A5AFC);
    sub_100069C44(v27, v28);
    uint64_t v30 = v29;
    uint64_t v31 = type metadata accessor for AccountIdentity(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16LL))(v30, v65, v31);
    uint64_t v32 = swift_storeEnumTagMultiPayload(v30, v27, 1LL);
    swift_willThrow(v32);
  }

  else
  {
    uint64_t v58 = v10;
    uint64_t v59 = v13;
    uint64_t v33 = v63;
    uint64_t v60 = v7;
    uint64_t v34 = v6;
    sub_10006BAAC(v19, v24);
    uint64_t v35 = v64;
    sub_10006B130((uint64_t)v15);
    uint64_t v36 = v24;
    if (v35)
    {
      uint64_t v37 = v24;
    }

    else
    {
      id v38 = [(id)objc_opt_self(NSFileManager) defaultManager];
      uint64_t v39 = (uint64_t)v33;
      v33[3] = &type metadata for LiveFileStore;
      v33[4] = &off_1000DA6D0;
      void *v33 = v38;
      uint64_t v40 = v61;
      uint64_t v41 = (char *)v33 + *(int *)(v61 + 20);
      int v42 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      uint64_t v64 = v15;
      v42(v41, v15, v6);
      uint64_t v43 = (void *)((char *)v33 + *(int *)(v40 + 24));
      v43[3] = v20;
      void v43[4] = &off_1000D9450;
      uint64_t v44 = sub_1000548F4(v43);
      uint64_t v61 = v36;
      sub_10006BAF0(v36, (uint64_t)v44);
      uint64_t v45 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
      uint64_t v46 = JSONEncoder.init()();
      uint64_t v47 = type metadata accessor for AccountDataState(0LL);
      sub_100055290(&qword_1000F0B20, type metadata accessor for AccountDataState, (uint64_t)&unk_1000A4D94);
      uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)(v62, v47, v48);
      uint64_t v51 = v50;
      swift_release(v46);
      unsigned int v52 = (void **)sub_100054838(v33, v33[3]);
      uint64_t v53 = (uint64_t)v59;
      sub_10006C0BC((uint64_t)v59);
      sub_10008D5B8(v53, 1, *v52);
      uint64_t v54 = v53;
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
      v55(v54, v34);
      uint64_t v56 = (uint64_t)v58;
      sub_10006C1F0((uint64_t)v58);
      Data.write(to:options:)(v56, 1073741825LL, v49, v51);
      v55(v56, v34);
      sub_10006BF84();
      sub_100054F80(v39, type metadata accessor for AccountDataStoreFilesystemCore);
      v55((uint64_t)v64, v34);
      uint64_t v37 = v61;
    }

    sub_100054F80(v37, type metadata accessor for AMPAccount);
  }

  sub_1000554F4();
}

void sub_10006BA4C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_10006BA60(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for AccountDataFileSystemStore.Errors(uint64_t a1)
{
  uint64_t result = qword_1000F0B98;
  if (!qword_1000F0B98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountDataFileSystemStore.Errors);
  }
  return result;
}

uint64_t sub_10006BAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMPAccount(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMPAccount(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C((uint64_t *)&unk_1000F0DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10006BB7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for AccountIdentity(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_10006BC38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AccountIdentity(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

void *sub_10006BC88(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    swift_bridgeObjectRetain(v10);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

void *sub_10006BD18(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100054F80((uint64_t)a1, type metadata accessor for AccountDataFileSystemStore.Errors);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
    }

    else
    {
      *a1 = *a2;
      uint64_t v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }

  return a1;
}

void *sub_10006BDC8(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_10006BE54(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100054F80((uint64_t)a1, type metadata accessor for AccountDataFileSystemStore.Errors);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10006BEF8(uint64_t a1)
{
  v4[0] = &unk_1000A5AC8;
  uint64_t result = type metadata accessor for AccountIdentity(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccountDataFileSystemStore()
{
  return &type metadata for AccountDataFileSystemStore;
}

uint64_t sub_10006BF78(uint64_t a1, uint64_t a2)
{
  return sub_100054998(a1, a2, 1LL, v2);
}

uint64_t sub_10006BF84()
{
  return sub_10006846C(v1, v0);
}

uint64_t sub_10006BF90()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_10006BF98()
{
  return type metadata accessor for AccountDataFileSystemStore.Errors(0LL);
}

uint64_t sub_10006BFA0@<X0>(void *a1@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v4);
  sub_10005878C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = (void **)sub_100054838(v1, v1[3]);
  sub_10006C1F0(v7);
  uint64_t v9 = sub_10008D3C0(v7, *v8);
  if (v2) {
    return sub_10006C9BC();
  }
  uint64_t v12 = v9;
  unint64_t v13 = v10;
  sub_10006C9BC();
  uint64_t v14 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = JSONDecoder.init()();
  uint64_t v16 = type metadata accessor for AccountDataState(0LL);
  unint64_t v17 = sub_10006C340();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, v16, v12, v13, v16, v17);
  sub_10006846C(v12, v13);
  return swift_release(v15);
}

uint64_t sub_10006C0BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10005878C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for AccountDataStoreFilesystemCore(0LL);
  uint64_t v9 = v1 + *(int *)(v8 + 20);
  uint64_t v10 = sub_10006BF90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, v9, v10);
  uint64_t v11 = sub_100054838((void *)(v1 + *(int *)(v8 + 24)), *(void *)(v1 + *(int *)(v8 + 24) + 24));
  char v12 = objc_msgSend( *(id *)((char *)v11 + *(int *)(type metadata accessor for AMPAccount(0) + 20)),  "ams_isSandboxAccount");
  uint64_t v13 = sub_10006D3E8((uint64_t)v11, v12);
  uint64_t v15 = v14;
  v18[0] = v13;
  v18[1] = v14;
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v7,  enum case for URL.DirectoryHint.inferFromPath(_:),  v3);
  unint64_t v16 = sub_10006C2CC();
  URL.append<A>(component:directoryHint:)(v18, v7, &type metadata for String, v16);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_10006C1F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10005878C();
  uint64_t v6 = v5 - v4;
  sub_10006C0BC(a1);
  uint64_t v9 = 0x6F736A2E61746164LL;
  unint64_t v10 = 0xE90000000000006ELL;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v6,  enum case for URL.DirectoryHint.inferFromPath(_:),  v2);
  unint64_t v7 = sub_10006C2CC();
  URL.append<A>(component:directoryHint:)(&v9, v6, &type metadata for String, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  return swift_bridgeObjectRelease(v10);
}

unint64_t sub_10006C2CC()
{
  unint64_t result = qword_1000F0BD0;
  if (!qword_1000F0BD0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000F0BD0);
  }

  return result;
}

uint64_t type metadata accessor for AccountDataStoreFilesystemCore(uint64_t a1)
{
  uint64_t result = qword_1000F0C38;
  if (!qword_1000F0C38) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountDataStoreFilesystemCore);
  }
  return result;
}

unint64_t sub_10006C340()
{
  unint64_t result = qword_1000F0BD8;
  if (!qword_1000F0BD8)
  {
    uint64_t v1 = type metadata accessor for AccountDataState(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000A4DBC, v1);
    atomic_store(result, (unint64_t *)&qword_1000F0BD8);
  }

  return result;
}

void *sub_10006C380(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    __int128 v13 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)v4 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
  }

  return v4;
}

uint64_t sub_10006C454(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return sub_100054930((void *)((char *)a1 + *(int *)(a2 + 24)));
}

uint64_t sub_10006C4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  __int128 v12 = *(_OWORD *)(a2 + v11 + 24);
  *(_OWORD *)(a1 + v11 + 24) = v12;
  (**(void (***)(void))(v12 - 8))();
  return a1;
}

void *sub_10006C54C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  sub_10006C5C4((void *)((char *)a1 + *(int *)(a3 + 24)), (void *)((char *)a2 + *(int *)(a3 + 24)));
  return a1;
}

void *sub_10006C5C4(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t sub_10006C72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  __int128 v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_10006C7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_100054930((void *)(a1 + v11));
  __int128 v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_10006C858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C864);
}

uint64_t sub_10006C864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10006BF90();
    return sub_100054CA8(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_10006C8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C8E0);
}

uint64_t sub_10006C8E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10006BF90();
    return sub_100054998(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t sub_10006C948(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = "(";
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10006C9BC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_10006C9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v88 = a3;
  uint64_t v90 = a2;
  uint64_t v91 = a1;
  sub_10006D014(a4, (uint64_t)v93);
  unint64_t v73 = v93[0];
  uint64_t v74 = v93[1];
  unint64_t v75 = v93[2];
  uint64_t v77 = v93[3];
  uint64_t v78 = v93[4];
  uint64_t v79 = v93[5];
  unsigned int v80 = v94;
  uint64_t v5 = sub_100055AE0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v84 = v7;
  uint64_t v85 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LogInterpolation.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  sub_100055528();
  uint64_t v76 = v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v68 - v11;
  uint64_t v89 = type metadata accessor for Log(0LL);
  uint64_t v81 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  sub_100055528();
  uint64_t v83 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v68 - v16;
  static Log.accountsDataSync.getter(v15);
  uint64_t v18 = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v19 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v82 = v20;
  uint64_t v72 = (void (*)(uint64_t, uint64_t))v18;
  uint64_t v70 = v22 + 2 * v20;
  uint64_t v69 = v21 | 7;
  uint64_t v23 = swift_allocObject(v18, v70, v21 | 7);
  __int128 v68 = xmmword_1000A4950;
  *(_OWORD *)(v23 + 16) = xmmword_1000A4950;
  uint64_t v71 = v22;
  id v26 = (id)AMSSetLogKeyIfNeeded(v23, v24, v25);
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  sub_10006D37C((uint64_t)&type metadata for AccountDataSyncDASScheduler, v27, v29);
  swift_bridgeObjectRelease(v29);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(17LL, 2LL);
  v30._countAndFlagsBits = 0x696C756465686353LL;
  v30._object = (void *)0xEF20726F6620676ELL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v30);
  *((void *)&v98 + 1) = v5;
  uint64_t v31 = (char *)sub_1000548F4(&v97);
  uint64_t v86 = v6;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v87 = v5;
  v32(v31, v91, v5);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(&v97);
  sub_10005650C((uint64_t)&v97);
  v33._countAndFlagsBits = 8250LL;
  v33._object = (void *)0xE200000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v33);
  sub_10006D014(v4, (uint64_t)&v97);
  if (v97 == 2LL)
  {
    __int128 v95 = 0u;
    __int128 v96 = 0u;
  }

  else
  {
    *((void *)&v96 + 1) = &unk_1000DA9C8;
    uint64_t v34 = sub_10006D370((uint64_t)&unk_1000D9358);
    *(void *)&__int128 v95 = v34;
    __int128 v35 = v98;
    *(_OWORD *)(v34 + 16) = v97;
    *(_OWORD *)(v34 + 32) = v35;
    *(_OWORD *)(v34 + 4_Block_object_dispose(&a9, 8) = v99;
    *(_DWORD *)(v34 + 64) = v100;
  }

  uint64_t v36 = v82;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(&v95);
  sub_10005650C((uint64_t)&v95);
  sub_100055A04();
  LogInterpolation.init(stringInterpolation:)(v12);
  Log.default(_:)(v23);
  swift_bridgeObjectRelease(v23);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v81 + 8);
  v37(v17, v89);
  uint64_t v38 = sub_10006D014(v4, (uint64_t)&v95);
  uint64_t v39 = v88;
  if (v95 != 2LL)
  {
    static Log.accountsDataSync.getter(v38);
    uint64_t v40 = swift_allocObject(v72, v70, v69);
    uint64_t v81 = v4;
    uint64_t v41 = v40;
    *(_OWORD *)(v40 + 16) = v68;
    uint64_t v42 = v40 + v71;
    id v45 = (id)AMSSetLogKeyIfNeeded(v40, v43, v44);
    uint64_t v72 = (void (*)(uint64_t, uint64_t))v37;
    id v46 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v49 = v48;

    sub_10006D37C((uint64_t)&type metadata for AccountDataSyncDASScheduler, v47, v49);
    swift_bridgeObjectRelease(v49);
    uint64_t v82 = v42 + v36;
    uint64_t v50 = v76;
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(69LL, 1LL);
    v51._object = (void *)0x80000001000AD750LL;
    v51._countAndFlagsBits = 0xD000000000000045LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v51);
    unint64_t v52 = v73;
    unint64_t v53 = v73 >> 8;
    uint64_t v54 = v39;
    char v55 = v75;
    unint64_t v56 = v75 >> 8;
    v92[3] = &unk_1000DA9C8;
    LODWORD(v49) = v80;
    unsigned int v57 = v80 >> 8;
    uint64_t v58 = sub_10006D370((uint64_t)&unk_1000D9358);
    v92[0] = v58;
    *(_BYTE *)(v58 + 16) = v52 & 1;
    *(_BYTE *)(v58 + 17) = v53;
    *(void *)(v58 + 24) = v74;
    char v59 = v55 & 1;
    uint64_t v39 = v54;
    *(_BYTE *)(v58 + 32) = v59;
    *(_BYTE *)(v58 + 33) = v56;
    *(void *)(v58 + 40) = v77;
    *(_BYTE *)(v58 + 4_Block_object_dispose(&a9, 8) = v78 & 1;
    *(void *)(v58 + 56) = v79;
    *(_BYTE *)(v58 + 64) = v49 & 1;
    *(_BYTE *)(v58 + 65) = v57;
    *(_BYTE *)(v58 + 66) = BYTE2(v49) & 1;
    *(_BYTE *)(v58 + 67) = BYTE3(v49) & 1;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v92);
    sub_10005650C((uint64_t)v92);
    sub_100055A04();
    LogInterpolation.init(stringInterpolation:)(v50);
    uint64_t v60 = v83;
    Log.default(_:)(v41);
    uint64_t v4 = v81;
    swift_bridgeObjectRelease(v41);
    v72(v60, v89);
    uint64_t v61 = String.utf8CString.getter(v90, v39);
    sub_10006D364(v61);
    swift_release(v52 >> 8);
  }

  uint64_t v62 = v85;
  uint64_t v63 = v87;
  v32(v85, v91, v87);
  uint64_t v64 = v86;
  uint64_t v65 = *(unsigned __int8 *)(v86 + 80);
  uint64_t v66 = (v65 + 16) & ~v65;
  uint64_t v67 = swift_allocObject(&unk_1000D9330, v66 + v84, v65 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v67 + v66, v62, v63);
  sub_1000950B8(v90, v39, v4, (uint64_t)&unk_1000F0C88, v67);
  swift_release(v67);
  sub_1000642E8();
}

uint64_t sub_10006D014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F0C78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006D05C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = String.utf8CString.getter(a1, a2);
  sub_10006D364(v3);
  return swift_release(v2);
}

uint64_t sub_10006D080(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_10006D098, 0LL, 0LL);
}

uint64_t sub_10006D098()
{
  return sub_10006D358(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006D0C0()
{
  uint64_t v1 = sub_100055AE0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006D11C()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100055AE0() - 8) + 80LL);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1000F0C84);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10006D17C;
  return sub_10006D080(v3);
}

uint64_t sub_10006D17C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return sub_10006D358(*(uint64_t (**)(void))(v2 + 8));
}

void sub_10006D1BC()
{
  uint64_t v0 = type metadata accessor for Log(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Log.accountsDataSync.getter(v2);
  uint64_t v5 = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v6 = type metadata accessor for LogInterpolation(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1000A4950;
  id v10 = (id)AMSSetLogKeyIfNeeded(v7, v8, v9);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  sub_10006D37C((uint64_t)&type metadata for AccountDataSyncDASScheduler, v11, v13);
  swift_bridgeObjectRelease(v13);
  LogInterpolation.init(stringLiteral:)(0xD000000000000010LL, 0x80000001000AD7A0LL);
  Log.default(_:)(v7);
  swift_bridgeObjectRelease(v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_1000F00B0 != -1) {
    swift_once(&qword_1000F00B0, sub_1000818FC);
  }
  sub_1000815D4();
  sub_1000642E8();
}

uint64_t sub_10006D330()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

ValueMetadata *type metadata accessor for AccountDataSyncDASScheduler()
{
  return &type metadata for AccountDataSyncDASScheduler;
}

uint64_t sub_10006D358(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10006D364(uint64_t a1)
{
}

uint64_t sub_10006D370(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t sub_10006D37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static LogInterpolation.prefix<A>(_:_:)(a1, a2, a3, a1);
}

ValueMetadata *type metadata accessor for AccountDataUpdateDarwinNotifier()
{
  return &type metadata for AccountDataUpdateDarwinNotifier;
}

void sub_10006D394()
{
  uint64_t v0 = CFNotificationCenterGetDarwinNotifyCenter();
  if (AMSAccountCachedServerDataUpdatedNotification)
  {
    uint64_t v1 = v0;
    CFNotificationCenterPostNotification(v0, AMSAccountCachedServerDataUpdatedNotification, 0LL, 0LL, 1u);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10006D3E8(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for AccountIdentity.DSID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = AccountIdentity.dsid.getter(v5);
  uint64_t v9 = AccountIdentity.DSID.value.getter(v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v17 = v9;
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v12 = v11;
  if ((a2 & 1) != 0)
  {
    uint64_t v17 = v10;
    unint64_t v18 = v11;
    swift_bridgeObjectRetain(v11);
    v13._countAndFlagsBits = 0x786F62646E61732ELL;
    v13._object = (void *)0xE800000000000000LL;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v12);
    uint64_t v10 = v17;
    unint64_t v12 = v18;
  }

  sub_10006D4F0(v10, v12);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(v12);
  return v15;
}

void sub_10006D4F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA512(0LL);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v5 = type metadata accessor for SHA512Digest(0LL);
  v11[2] = *(void *)(v5 - 8);
  v11[3] = v5;
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  __chkstk_darwin(v6);
  v11[1] = (char *)v11 - v7;
  swift_bridgeObjectRetain(a2);
  sub_10006D924(a1, a2);
  uint64_t v9 = v8;
  uint64_t v10 = sub_10006F3C4( &qword_1000F0C90,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA512,  (uint64_t)&protocol conformance descriptor for SHA512);
  dispatch thunk of HashFunction.init()(v4, v10);
  __asm { BR              X10 }

uint64_t sub_10006D618()
{
  uint64_t v8 = *(void *)(v7 - 152);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v1, v6);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v1);
  sub_10006F73C();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v7 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 144) + 16LL))(v2, v9, v10);
  uint64_t v11 = sub_10006F3C4( &qword_1000F0C98,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA512Digest,  (uint64_t)&protocol conformance descriptor for SHA512Digest);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of Sequence.makeIterator())(v10, v11);
  uint64_t v12 = *(void *)(v7 - 104);
  uint64_t v13 = *(void *)(v7 - 96);
  uint64_t v14 = *(void *)(v12 + 16);
  if (v13 != v14)
  {
    if (v13 < v14)
    {
      uint64_t v15 = _swiftEmptyArrayStorage;
      *(_OWORD *)(v7 - 12_Block_object_dispose(&a9, 8) = xmmword_1000A4BE0;
      unint64_t v20 = v13;
      while ((v13 & 0x8000000000000000LL) == 0)
      {
        if (v20 >= *(void *)(v12 + 16)) {
          goto LABEL_15;
        }
        char v21 = *(_BYTE *)(v12 + 32 + v20);
        uint64_t v22 = sub_10005489C(&qword_1000F0CA0);
        uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
        *(_OWORD *)(v23 + 16) = *(_OWORD *)(v7 - 128);
        *(void *)(v23 + 56) = &type metadata for UInt8;
        *(void *)(v23 + 64) = &protocol witness table for UInt8;
        *(_BYTE *)(v23 + 32) = v21;
        uint64_t v24 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))( 2016555045LL,  0xE400000000000000LL,  v23);
        uint64_t v26 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
        {
          sub_10006DEF4( 0,  v15[2] + 1LL,  1,  (uint64_t)v15,  (uint64_t *)&unk_1000F1BF0,  (void (*)(void, uint64_t, void *, uint64_t))sub_10006E200,  (void (*)(uint64_t, uint64_t, void *))sub_10006E740);
          uint64_t v15 = v30;
        }

        unint64_t v28 = v15[2];
        unint64_t v27 = v15[3];
        if (v28 >= v27 >> 1)
        {
          sub_10006DEF4( v27 > 1,  v28 + 1,  1,  (uint64_t)v15,  (uint64_t *)&unk_1000F1BF0,  (void (*)(void, uint64_t, void *, uint64_t))sub_10006E200,  (void (*)(uint64_t, uint64_t, void *))sub_10006E740);
          uint64_t v15 = v31;
        }

        ++v20;
        v15[2] = v28 + 1;
        uint64_t v29 = &v15[2 * v28];
        v29[4] = v24;
        void v29[5] = v26;
        if (v14 == v20) {
          goto LABEL_3;
        }
      }

      __break(1u);
LABEL_15:
      __break(1u);
    }

    __break(1u);
    JUMPOUT(0x10006D910LL);
  }

  uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_3:
  swift_bridgeObjectRelease(v12);
  *(void *)(v7 - 104) = v15;
  uint64_t v16 = sub_10005489C(&qword_1000F0CA8);
  unint64_t v17 = sub_10006F404();
  uint64_t v18 = ((uint64_t (*)(void, unint64_t, uint64_t, unint64_t))BidirectionalCollection<>.joined(separator:))( 0LL,  0xE000000000000000LL,  v16,  v17);
  swift_bridgeObjectRelease(v15);
  (*(void (**)(void, void))(*(void *)(v7 - 144) + 8LL))(*(void *)(v7 - 152), *(void *)(v7 - 136));
  return v18;
}

uint64_t sub_10006D924(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v2 = sub_10005489C(&qword_1000F0CB8);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
    sub_10006F558((uint64_t)v17);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v20;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter();
      }

      if (v5) {
        uint64_t v7 = (char *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (void *)v5;
    }

    uint64_t v9 = Data._Representation.init(_:)(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(void *)&v17[0] = v9;
      *((void *)&v17[0] + 1) = v11;
      return *(void *)&v17[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v17[0] = Data._Representation.init(count:)(v12);
    *((void *)&v17[0] + 1) = v13;
    __chkstk_darwin();
    sub_10006EDD8();
    __asm { BR              X12 }
  }

  sub_10006F5F8(v17, (uint64_t)v20);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_100054838(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v19,  sub_10006F078,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_100054930(v20);
  return *(void *)&v17[0];
}

void sub_10006DE0C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10006DE28(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10006F710();
    if (v7 != v8)
    {
      sub_10006F7A0();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_10006F700();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10005489C(&qword_1000F0CD0);
    Swift::Int v12 = (char *)sub_10006F758(v11);
    size_t v13 = j__malloc_size(v12);
    sub_10006F790(v13 - 32);
  }

  else
  {
    Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_10006E7F0((char *)(a4 + 32), v9, v12 + 32);
    sub_10006F6F4();
  }

  else
  {
    uint64_t v14 = sub_10006F768();
    sub_10006E2F4(v14, v15, v16, v17);
  }

  sub_10006F6E4();
}

void sub_10006DED8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10006DEF4( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if ((a3 & 1) != 0)
  {
    sub_10006F710();
    if (v12 != v13)
    {
      sub_10006F7A0();
      if (v12)
      {
        __break(1u);
        return;
      }

      sub_10006F700();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_10005489C(a5);
    uint64_t v17 = (void *)swift_allocObject(v16, 16 * v15 + 32, 7LL);
    size_t v18 = j__malloc_size(v17);
    __int128 v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 16);
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  __int128 v19 = v17 + 4;
  if ((a1 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    sub_10006F6F4();
  }

  else
  {
    a6(0LL, v14, v19, a4);
  }

  sub_10006F6E4();
}

uint64_t sub_10006DFC4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10006F710();
    if (v7 != v8)
    {
      sub_10006F7A0();
      if (v7)
      {
        __break(1u);
LABEL_23:
        sub_10006F66C();
        uint64_t v26 = "Division by zero";
        uint64_t v27 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v26,  v27,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_10006F700();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (!v10)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v11 = sub_10005489C(&qword_1000F0CD8);
  uint64_t v12 = *(void *)(type metadata accessor for AMPAccount(0LL) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = (void *)swift_allocObject(v11, v15 + v13 * v10, v14 | 7);
  size_t v17 = j__malloc_size(v16);
  if (!v13) {
    goto LABEL_23;
  }
  if (v17 - v15 == 0x8000000000000000LL && v13 == -1)
  {
    sub_10006F66C();
    uint64_t v26 = "Division results in an overflow";
    uint64_t v27 = 31LL;
    goto LABEL_25;
  }

  sub_10006F790(v17 - v15);
LABEL_18:
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AMPAccount(0LL) - 8) + 80LL);
  uint64_t v20 = (v19 + 32) & ~v19;
  if ((a1 & 1) != 0)
  {
    sub_10006E930(a4 + v20, v9, (unint64_t)v16 + v20);
    sub_10006F6F4();
  }

  else
  {
    uint64_t v21 = sub_10006F768();
    sub_10006E504(v21, v22, v23, v24);
  }

  return (uint64_t)v16;
}

void sub_10006E150(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10006F710();
    if (v7 != v8)
    {
      sub_10006F7A0();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_10006F700();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10005489C(&qword_1000F0CE8);
    uint64_t v12 = (char *)sub_10006F758(v11);
    size_t v13 = j__malloc_size(v12);
    sub_10006F790(v13 - 32);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_10006E8D0((char *)(a4 + 32), v9, v12 + 32);
    sub_10006F6F4();
  }

  else
  {
    uint64_t v14 = sub_10006F768();
    sub_10006E624(v14, v15, v16, v17);
  }

  sub_10006F6E4();
}

uint64_t sub_10006E200(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006E2F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006E3F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_10005489C(&qword_1000F0CF0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006E504(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for AMPAccount(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006E624(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_10005489C(&qword_1000F0CE0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10006E740(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    uint64_t result = (char *)sub_10006F690( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10006F680(a3, result);
  }

  return result;
}

char *sub_10006E798(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    uint64_t result = (char *)sub_10006F690( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10006F680(a3, result);
  }

  return result;
}

char *sub_10006E7F0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_10006E878(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    uint64_t result = (char *)sub_10006F690( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10006F680(a3, result);
  }

  return result;
}

char *sub_10006E8D0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    uint64_t result = (char *)sub_10006F690( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10006F680(a3, result);
  }

  return result;
}

uint64_t sub_10006E930(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    char v8 = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v8,  1046LL,  0);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = type metadata accessor for AMPAccount(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    uint64_t v7 = type metadata accessor for AMPAccount(0LL);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }

  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3, a1, a2, result);
  }

  return result;
}

uint64_t sub_10006EA2C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    sub_10006F6D4();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return sub_10006F734(a3);
    }
    sub_10006F66C();
    sub_10006F6C4();
  }

  uint64_t result = sub_10006F6A8(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10006EAC4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    sub_10006F6D4();
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return sub_10006F734(a3);
    }
    sub_10006F66C();
    sub_10006F6C4();
  }

  uint64_t result = sub_10006F6A8(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10006EB60(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    sub_10006F6D4();
  }

  else
  {
    sub_10006F748();
    unint64_t v5 = v3 + 8 * v4;
    if (v2 + 8 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_10005489C(&qword_1000F0CC8);
      uint64_t v8 = sub_10006F720();
      return sub_10006F6B4(v8);
    }

    sub_10006F66C();
    sub_10006F6C4();
  }

  uint64_t result = sub_10006F6A8(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10006EBFC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    sub_10006F6D4();
  }

  else
  {
    sub_10006F748();
    unint64_t v5 = v3 + 16 * v4;
    if (v2 + 16 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_10005489C(&qword_1000F0CF0);
      uint64_t v8 = sub_10006F720();
      return sub_10006F6B4(v8);
    }

    sub_10006F66C();
    sub_10006F6C4();
  }

  uint64_t result = sub_10006F6A8(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10006EC98(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10006F66C();
    sub_10006F6D4();
  }

  else
  {
    sub_10006F748();
    unint64_t v5 = v3 + 40 * v4;
    if (v2 + 40 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_10005489C(&qword_1000F0CE0);
      uint64_t v8 = sub_10006F720();
      return sub_10006F6B4(v8);
    }

    sub_10006F66C();
    sub_10006F6C4();
  }

  uint64_t result = sub_10006F6A8(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10006ED38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v9 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    sub_10006F778(v9);
    return v10 | 4;
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    sub_10006F778(v6);
    return v7 | 8;
  }

void *sub_10006ED90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  void v5[2] = v6;
  return sub_10006F16C( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10006F650,  (uint64_t)v5,  a1,  a2);
}

void sub_10006EDD8()
{
  __asm { BR              X11 }

void *sub_10006EE38@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v_Block_object_dispose(&a9, 8) = a1;
  BYTE2(v_Block_object_dispose(&a9, 8) = BYTE2(a1);
  HIBYTE(v_Block_object_dispose(&a9, 8) = BYTE3(a1);
  uint64_t v9 = BYTE4(a1);
  uint64_t v10 = BYTE5(a1);
  uint64_t v11 = BYTE6(a1);
  uint64_t result = sub_10006F278((uint64_t)&v7, v3, v2, BYTE6(a1));
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  void *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_10006F078@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_10006F0EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    uint64_t result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10006F16C( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_10006F1CC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  char v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_10006F278( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_10006F2BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA512(0LL);
  uint64_t v13 = sub_10006F3C4( &qword_1000F0C90,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA512,  (uint64_t)&protocol conformance descriptor for SHA512);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10006F380(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10006F3C4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10006F404()
{
  unint64_t result = qword_1000F0CB0;
  if (!qword_1000F0CB0)
  {
    uint64_t v1 = sub_1000617F8(&qword_1000F0CA8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000F0CB0);
  }

  return result;
}

uint64_t sub_10006F448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  uint64_t v3 = (char *)&v7 + a3;
  char v12 = BYTE5(a2);
  uint64_t v4 = type metadata accessor for SHA512(0LL);
  uint64_t v5 = sub_10006F3C4( &qword_1000F0C90,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA512,  (uint64_t)&protocol conformance descriptor for SHA512);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

uint64_t sub_10006F558(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F0CC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10006F598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = sub_10006ED90(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

void *sub_10006F5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10006F598(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_10006F5E4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10006846C(result, a2);
  }
  return result;
}

uint64_t sub_10006F5F8(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10006F610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_10006F0EC(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_10006F650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10006F610(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

  ;
}

void *sub_10006F680@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10006F690( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_10006F6A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_10006F6B4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10006F6F4()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

uint64_t sub_10006F720()
{
  return v0;
}

uint64_t sub_10006F734(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_10006F73C()
{
  return sub_10006846C(v0, v1);
}

  ;
}

uint64_t sub_10006F758(uint64_t a1)
{
  return swift_allocObject(a1, v1 * v2 + 32, 7LL);
}

uint64_t sub_10006F768()
{
  return 0LL;
}

unint64_t sub_10006F778(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

void sub_10006F790(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * (a1 / v3);
}

  ;
}

uint64_t sub_10006F7AC()
{
  return sub_10006F380(v0, v1);
}

uint64_t sub_10006F7B8(uint64_t a1, uint64_t a2)
{
  return sub_10006F2BC(a1, a2);
}

id sub_10006F7C4()
{
  id v0 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  AccountIdentity.DSID.value.getter();
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  id v2 = objc_msgSend(v0, "ams_iTunesAccountWithDSID:", isa);

  return v2;
}

void sub_10006F844(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_1000708BC();
  sub_100055428();
  __chkstk_darwin(v12);
  sub_100064648();
  id v13 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = objc_msgSend(v13, "ams_iTunesAccountWithAltDSID:", v14);

  if (v15)
  {
    id v16 = objc_msgSend(v15, "ams_DSID");
    if (v16)
    {
      uint64_t v17 = v16;
      id v18 = [v16 unsignedLongLongValue];

      *(void *)(v3 + *(int *)(v11 + 20)) = v15;
      id v19 = v15;
      AccountIdentity.DSID.init(_:)(v18);
      AccountIdentity.init(altDSID:dsid:)(a1, a2, v10);

      sub_10006BAAC(v3, a3);
      sub_100054998(a3, 0LL, 1LL, v11);
      sub_1000642E8();
      return;
    }
  }

  swift_bridgeObjectRelease(a2);
  sub_100070868(a3, 1LL, 1LL, v11);
}

uint64_t type metadata accessor for AMPAccount(uint64_t a1)
{
  uint64_t result = qword_1000F0D60;
  if (!qword_1000F0D60) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AMPAccount);
  }
  return result;
}

uint64_t sub_10006FA04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100064354();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100064648();
  sub_10005489C(&qword_1000F0B10);
  sub_100055428();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  sub_10006FB48(v2, (uint64_t)v12);
  sub_10006FCF8((uint64_t)v12, (uint64_t)v10);
  uint64_t v13 = sub_1000708BC();
  if (sub_100054CA8((uint64_t)v10, 1LL, v13) == 1)
  {
    sub_10006FD40((uint64_t)v12);
    uint64_t result = sub_10006FD40((uint64_t)v10);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 32) = 0LL;
  }

  else
  {
    *(void *)(a2 + 24) = v13;
    *(void *)(a2 + 32) = &off_1000D9450;
    id v15 = sub_1000548F4((void *)a2);
    sub_10006BAAC((uint64_t)v10, (uint64_t)v15);
    return sub_10006FD40((uint64_t)v12);
  }

  return result;
}

void sub_10006FB48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100064354();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = sub_100055CFC();
  uint64_t v7 = type metadata accessor for AccountIdentity(v6);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  sub_100055428();
  __chkstk_darwin(v8);
  sub_10005878C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_1000708BC();
  sub_100055428();
  __chkstk_darwin(v13);
  sub_10005878C();
  uint64_t v16 = v15 - v14;
  id v17 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  AccountIdentity.DSID.value.getter(v17);
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  id v19 = objc_msgSend(v17, "ams_iTunesAccountWithDSID:", isa);

  if (v19)
  {
    uint64_t v20 = sub_1000703F4(v19);
    if (v21)
    {
      uint64_t v22 = v20;
      uint64_t v23 = v21;
      *(void *)(v16 + *(int *)(v12 + 20)) = v19;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, a1, v4);
      AccountIdentity.init(altDSID:dsid:)(v22, v23, v2);
      sub_100070880();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v16, v11, v25);
      sub_10006BAAC(v16, a2);
      sub_100054998(a2, 0LL, 1LL, v12);
      sub_1000642E8();
      return;
    }

    sub_100070880();
  }

  else
  {
    sub_100070880();
  }

  sub_100070868(a2, 1LL, 1LL, v12);
}

uint64_t sub_10006FCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F0B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006FD40(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F0B10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10006FD84(char a1, uint64_t a2)
{
  uint64_t v5 = sub_100055AE0();
  uint64_t v78 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  sub_100055428();
  __chkstk_darwin(v6);
  sub_10005878C();
  uint64_t v77 = v8 - v7;
  uint64_t v9 = sub_100064354();
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  sub_100055428();
  __chkstk_darwin(v10);
  sub_100055528();
  uint64_t v76 = v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v72 - v13;
  sub_10005489C(&qword_1000F0B10);
  sub_100055428();
  __chkstk_darwin(v15);
  uint64_t v16 = sub_100055CFC();
  uint64_t v87 = type metadata accessor for AMPAccount(v16);
  uint64_t v82 = *(void *)(v87 - 8);
  sub_100055428();
  __chkstk_darwin(v17);
  sub_100055528();
  uint64_t v86 = v18;
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v75 = (char *)&v72 - v21;
  __chkstk_darwin(v20);
  uint64_t v81 = (uint64_t)&v72 - v22;
  id v80 = (id)objc_opt_self(&OBJC_CLASS___ACAccountStore);
  id v72 = objc_msgSend(v80, "ams_sharedAccountStore");
  id v23 = objc_msgSend(v72, "ams_iTunesAccounts");
  unint64_t v24 = sub_100070454();
  unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if ((a1 & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v90 = _swiftEmptyArrayStorage;
  if (v25 >> 62)
  {
    if ((v25 & 0x8000000000000000LL) != 0LL) {
      uint64_t v33 = v25;
    }
    else {
      uint64_t v33 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v25);
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v33);
    sub_1000708A4();
    if (v26) {
      goto LABEL_4;
    }
LABEL_18:
    sub_1000708A4();
    unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v26) {
    goto LABEL_18;
  }
LABEL_4:
  if (v26 < 1)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  LODWORD(v89) = a2;
  uint64_t v27 = 0LL;
  unint64_t v28 = v25 & 0xC000000000000001LL;
  unint64_t v29 = v25;
  do
  {
    if (v28) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
    }
    else {
      id v30 = sub_1000708D4(v25 + 8 * v27);
    }
    uint64_t v31 = v30;
    if (objc_msgSend(v30, "ams_isLocalAccount"))
    {
    }

    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_1000708C4();
      uint64_t v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)( _swiftEmptyArrayStorage,  v31);
      specialized ContiguousArray._endMutation()(v32);
    }

    ++v27;
    unint64_t v25 = v29;
  }

  while (v26 != v27);
  sub_1000708A4();
  unint64_t v25 = (unint64_t)v90;
  a2 = v89;
LABEL_19:
  id v34 = v80;
  if ((a2 & 1) != 0) {
    goto LABEL_34;
  }
  uint64_t v90 = _swiftEmptyArrayStorage;
  if (v25 >> 62)
  {
    sub_100070890();
    a2 = _CocoaArrayWrapper.endIndex.getter(a2);
    sub_1000708A4();
    if (a2) {
      goto LABEL_22;
    }
LABEL_33:
    sub_1000708A4();
    unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_34;
  }

  a2 = *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!a2) {
    goto LABEL_33;
  }
LABEL_22:
  if (a2 < 1)
  {
LABEL_64:
    __break(1u);
    return;
  }

  uint64_t v35 = 0LL;
  unint64_t v36 = v25;
  unint64_t v37 = v25 & 0xC000000000000001LL;
  do
  {
    if (v37) {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v36);
    }
    else {
      id v38 = sub_1000708D4(v36 + 8 * v35);
    }
    uint64_t v39 = v38;
    if (objc_msgSend(v38, "ams_isSandboxAccount"))
    {
    }

    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_1000708C4();
      uint64_t v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)( _swiftEmptyArrayStorage,  v39);
      specialized ContiguousArray._endMutation()(v40);
    }

    ++v35;
  }

  while (a2 != v35);
  swift_bridgeObjectRelease(v36);
  unint64_t v25 = (unint64_t)v90;
  id v34 = v80;
LABEL_34:
  if (v25 >> 62)
  {
    sub_100070890();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(a2);
    if (v41) {
      goto LABEL_36;
    }
  }

  else
  {
    uint64_t v41 = *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v25);
    if (v41)
    {
LABEL_36:
      if (v41 >= 1)
      {
        uint64_t v42 = 0LL;
        unint64_t v83 = v25 & 0xC000000000000001LL;
        uint64_t v88 = _swiftEmptyArrayStorage;
        uint64_t v73 = v41;
        unint64_t v74 = v25;
        while (1)
        {
          id v43 = v83 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v25) : sub_1000708D4(v25 + 8 * v42);
          id v89 = v43;
          id v44 = objc_msgSend(v43, "ams_DSID");
          if (v44)
          {
            id v45 = v44;
            id v46 = [v44 unsignedLongLongValue];
          }

          else
          {
            id v46 = 0LL;
          }

          AccountIdentity.DSID.init(_:)(v46);
          id v47 = objc_msgSend(v34, "ams_sharedAccountStore");
          AccountIdentity.DSID.value.getter(v47);
          Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
          id v49 = objc_msgSend(v47, "ams_iTunesAccountWithDSID:", isa);

          if (!v49) {
            break;
          }
          uint64_t v50 = sub_1000703F4(v49);
          if (!v51)
          {
            sub_1000708AC();

            goto LABEL_49;
          }

          uint64_t v52 = v50;
          uint64_t v53 = v51;
          uint64_t v54 = v75;
          *(void *)&v75[*(int *)(v87 + 20)] = v49;
          char v55 = v14;
          uint64_t v56 = v84;
          uint64_t v57 = v85;
          uint64_t v58 = v2;
          uint64_t v59 = v76;
          (*(void (**)(uint64_t, char *, uint64_t))(v84 + 16))(v76, v55, v85);
          uint64_t v60 = v77;
          uint64_t v61 = v59;
          uint64_t v2 = v58;
          id v34 = v80;
          AccountIdentity.init(altDSID:dsid:)(v52, v53, v61);
          uint64_t v62 = *(void (**)(char *, uint64_t))(v56 + 8);
          uint64_t v14 = v55;
          uint64_t v63 = v57;
          uint64_t v41 = v73;
          v62(v55, v63);
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v54, v60, v79);
          uint64_t v64 = (uint64_t)v54;
          unint64_t v25 = v74;
          sub_10006BAAC(v64, v2);
          uint64_t v65 = 0LL;
LABEL_50:
          uint64_t v66 = v87;
          sub_100054998(v2, v65, 1LL, v87);

          if (sub_100054CA8(v2, 1LL, v66) == 1)
          {
            sub_10006FD40(v2);
          }

          else
          {
            uint64_t v67 = v81;
            sub_10006BAAC(v2, v81);
            sub_10006BAAC(v67, v86);
            if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0) {
              uint64_t v88 = (void *)sub_10006DFC4(0, v88[2] + 1LL, 1, (uint64_t)v88);
            }
            unint64_t v69 = v88[2];
            unint64_t v68 = v88[3];
            if (v69 >= v68 >> 1) {
              uint64_t v88 = (void *)sub_10006DFC4(v68 > 1, v69 + 1, 1, (uint64_t)v88);
            }
            uint64_t v70 = v88;
            v88[2] = v69 + 1;
            sub_10006BAAC( v86,  (uint64_t)v70 + ((*(unsigned __int8 *)(v82 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))
            + *(void *)(v82 + 72) * v69);
          }

          if (v41 == ++v42) {
            goto LABEL_61;
          }
        }

        sub_1000708AC();
LABEL_49:
        uint64_t v65 = 1LL;
        goto LABEL_50;
      }

      __break(1u);
      goto LABEL_63;
    }
  }

  uint64_t v88 = _swiftEmptyArrayStorage;
LABEL_61:
  swift_bridgeObjectRelease_n(v25, 2LL);
  uint64_t v71 = v88;
  sub_10008E604((uint64_t)v88);
  swift_bridgeObjectRelease(v71);
}

uint64_t sub_1000703F4(void *a1)
{
  id v1 = objc_msgSend(a1, "ams_altDSID");
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_100070454()
{
  unint64_t result = qword_1000F0D00;
  if (!qword_1000F0D00)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ACAccount);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000F0D00);
  }

  return result;
}

uint64_t *sub_100070490(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for AccountIdentity(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v_Block_object_dispose(&a9, 8) = (uint64_t)v9;
    id v10 = v9;
  }

  return a1;
}

void sub_10007051C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t sub_100070560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1000705C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_100070628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100070684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1000706E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000706F4);
}

uint64_t sub_1000706F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100055AE0();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100054CA8(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v_Block_object_dispose(&a9, 8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100070768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070774);
}

uint64_t sub_100070774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100055AE0();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100054998(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000707E4(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountIdentity(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccountsFrameworkFinder()
{
  return &type metadata for AccountsFrameworkFinder;
}

uint64_t sub_100070868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054998(a1, a2, a3, a4);
}

uint64_t sub_100070880()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100070890()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000708A4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000708AC()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 144) + 8LL))(v0, *(void *)(v1 - 136));
}

uint64_t sub_1000708BC()
{
  return type metadata accessor for AMPAccount(0LL);
}

uint64_t sub_1000708C4()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)(v0 - 96)
                                                                                               + 16LL));
}

id sub_1000708D4@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

id sub_1000708DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id sub_100070930()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AuthURLDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd15AuthURLDelegate);
}

uint64_t sub_100070984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 12_Block_object_dispose(&a9, 8) = a3;
  return swift_task_switch(sub_10007099C, 0LL, 0LL);
}

uint64_t sub_10007099C()
{
  uint64_t v1 = v0 + 2;
  id v2 = [objc_allocWithZone(AMSAuthenticateTask) initWithRequest:v0[16]];
  v0[17] = v2;
  id v3 = [v2 performAuthentication];
  v0[18] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100070A74;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  int v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_100070B5C;
  void v5[3] = &unk_1000D94D8;
  v5[4] = v4;
  [v3 resultWithCompletion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_100070A74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 152LL) = v1;
  if (v1) {
    id v2 = sub_100070B14;
  }
  else {
    id v2 = sub_100070AD4;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100070AD4()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v2 = *(void *)(v0 + 120);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100070B14()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100070B5C(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_100070E60(v3, a3);
  }
  if (a2) {
    return sub_1000779B4(v3, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100070C2C(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  v5[4] = a3;
  void v5[5] = a5;
  void v5[2] = a1;
  void v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  uint64_t v10 = dword_1000F0DDC;
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a5;
  uint64_t v15 = (void *)swift_task_alloc(v10);
  v5[7] = v15;
  void *v15 = v5;
  v15[1] = sub_100070CC0;
  return sub_100070984((uint64_t)v15, v16, (uint64_t)v13);
}

uint64_t sub_100070CC0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 56);
  uint64_t v7 = *(void **)(*v2 + 32);
  uint64_t v6 = *(void **)(*v2 + 40);
  id v9 = *(void **)(*v2 + 16);
  unint64_t v8 = *(void **)(*v2 + 24);
  uint64_t v10 = *v2;
  swift_task_dealloc(v5);

  id v11 = *(void (***)(void, void, void))(v10 + 48);
  if (v3)
  {
    id v12 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v11)[2](v11, 0LL, v12);

    _Block_release(v11);
  }

  else
  {
    ((void (**)(void, void *, void))v11)[2](v11, a1, 0LL);
    _Block_release(v11);
  }

  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_100070D9C()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100070DE0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000F0DCC);
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100068378;
  return ((uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_1000F0DC8 + dword_1000F0DC8))( v2,  v3,  v4,  v5,  v6);
}

uint64_t sub_100070E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F0288);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_100070EB4(uint64_t a1, char a2)
{
  **(_BYTE **)(*(void *)(a1 + 64) + 40LL) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_100070EC4(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40LL) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_100070ED4(uint64_t a1, void *a2, void *a3)
{
  return sub_100076820(a1, a2, a3, (uint64_t (*)(uint64_t, void *))sub_1000779B4);
}

uint64_t sub_100070EE0(uint64_t a1)
{
  *(void *)(v2 + 984) = v1;
  *(void *)(v2 + 976) = a1;
  sub_100068590();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_100070F00()
{
  uint64_t v1 = *(void *)(v0 + 976);
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v0 + 992) = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 976);
    *(void *)(v0 + 100_Block_object_dispose(&a9, 8) = 0LL;
    *(void *)(v0 + 1000) = v2;
    *(void *)(v0 + 1016) = *(void *)(v4 + 32);
    *(void *)(v0 + 1024) = *(void *)(v4 + 40);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 48);
    swift_bridgeObjectRetain(v4);
    __asm { BR              X9 }
  }

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  return (*(uint64_t (**)(Class))(v0 + 8))(isa);
}

uint64_t sub_10007107C()
{
  uint64_t v4 = sub_100077D84();
  sub_100077DC8(v4, v5, 1u);
  NSString v6 = sub_100077D4C();
  id v7 = sub_100077D38((uint64_t)v6, "BOOLForKey:");
  sub_100077F44();
  id v9 = sub_100077A40(v8, "valuePromise");
  v2[131] = v9;

  v2[7] = v3;
  v2[2] = v2;
  v2[3] = sub_100071484;
  v2[62] = sub_1000779CC();
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95D0;
  [v9 resultWithCompletion:v0];
  return swift_continuation_await(v2 + 2);
}

uint64_t sub_100071110()
{
  uint64_t v4 = sub_100077D84();
  sub_100077DC8(v4, v5, 2u);
  NSString v6 = sub_100077D4C();
  id v7 = sub_100077D38((uint64_t)v6, "doubleForKey:");
  sub_100077F44();
  id v9 = sub_100077A40(v8, "valuePromise");
  v2[133] = v9;

  v2[39] = v3;
  v2[34] = v2;
  v2[35] = sub_1000714C4;
  v2[62] = sub_1000779CC();
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95B8;
  [v9 resultWithCompletion:v0];
  return swift_continuation_await(v2 + 34);
}

uint64_t sub_1000711A4()
{
  uint64_t v4 = sub_100077D84();
  sub_100077DC8(v4, v5, 3u);
  NSString v6 = sub_100077D4C();
  id v7 = sub_100077D38((uint64_t)v6, "integerForKey:");
  sub_100077F44();
  id v9 = sub_100077A40(v8, "valuePromise");
  v2[135] = v9;

  v2[55] = v3;
  v2[50] = v2;
  v2[51] = sub_100071508;
  v2[62] = sub_1000779CC();
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95A0;
  [v9 resultWithCompletion:v0];
  return swift_continuation_await(v2 + 50);
}

uint64_t sub_100071238()
{
  uint64_t v4 = sub_100077D84();
  sub_100077DC8(v4, v5, 4u);
  NSString v6 = sub_100077D4C();
  id v7 = sub_100077D38((uint64_t)v6, "stringForKey:");
  sub_100077F44();
  id v9 = sub_100077A40(v8, "valuePromise");
  v2[137] = v9;

  v2[23] = v3;
  v2[18] = v2;
  v2[19] = sub_10007154C;
  v2[62] = sub_1000779CC();
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D9588;
  [v9 resultWithCompletion:v0];
  return swift_continuation_await(v2 + 18);
}

uint64_t sub_1000712CC()
{
  uint64_t v4 = sub_100077D84();
  sub_100077DC8(v4, v5, 5u);
  NSString v6 = sub_100077D4C();
  id v7 = sub_100077D38((uint64_t)v6, "URLForKey:");
  sub_100077F44();
  id v9 = sub_100077A40(v8, "valuePromise");
  v2[139] = v9;

  v2[47] = v3;
  v2[42] = v2;
  v2[43] = sub_100071590;
  v2[62] = sub_1000779CC();
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D9570;
  [v9 resultWithCompletion:v0];
  return swift_continuation_await(v2 + 42);
}

void sub_100071360()
{
  uint64_t v3 = sub_100077D84();
  sub_100077DC8(v3, v4, 6u);
  NSString v5 = sub_100077D4C();
  id v6 = sub_100077D38((uint64_t)v5, "dictionaryForKey:");
  sub_100077F44();
  v1[141] = sub_100077A40(v7, "valuePromise");

  v1[15] = v2;
  v1[10] = v1;
  v1[11] = sub_1000715D4;
  v1[62] = sub_1000779CC();
  v1[58] = _NSConcreteStackBlock;
  v1[59] = 0x40000000LL;
  JUMPOUT(0x1000713F0LL);
}

uint64_t sub_100071440()
{
  *(void *)(v0 + 1040) = *(void *)(v0 + 240);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100071484()
{
  *(void *)(v0 + 1056) = v1;
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_1000714C4()
{
  *(void *)(v0 + 1072) = *(void *)(v0 + 304);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100071508()
{
  *(void *)(v0 + 108_Block_object_dispose(&a9, 8) = *(void *)(v0 + 432);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_10007154C()
{
  *(void *)(v0 + 1104) = *(void *)(v0 + 176);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100071590()
{
  *(void *)(v0 + 1120) = *(void *)(v0 + 368);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_1000715D4()
{
  *(void *)(v0 + 1136) = *(void *)(v0 + 112);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100071618( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, Swift::Int a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v13 = *(void **)(v12 + 504);

  Swift::Int v15 = *(void *)(v12 + 1000);
  if (!v13)
  {
    sub_100077A28();
    unint64_t v28 = sub_100078008();
    char v30 = v29;
    sub_1000573CC();
    if ((v30 & 1) != 0)
    {
      sub_100077B80();
      a9 = v15;
      sub_10005489C((uint64_t *)&unk_1000F0E00);
      sub_100077F74();
      sub_100077CFC(*(void *)(v15 + 48) + 16 * v28);
      sub_100077924((_OWORD *)(*(void *)(v15 + 56) + 32 * v28), (_OWORD *)(v12 + 504));
      sub_10007804C();
      sub_100077BA0();
    }

    else
    {
      *(_OWORD *)(v12 + 504) = 0u;
      *(_OWORD *)(v12 + 520) = 0u;
    }

    uint64_t v31 = *(void *)(v12 + 1024);
    uint64_t v32 = *(void *)(v12 + 1016);
    sub_100077F60(v32, v31);
    sub_100077978(v12 + 504, &qword_1000F1E60);
    sub_100077F60(v32, v31);
    goto LABEL_16;
  }

  *(void *)(v12 + 48_Block_object_dispose(&a9, 8) = sub_100077EEC(v14, &qword_1000F0E28, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v12 + 464) = v13;
  sub_100077924((_OWORD *)(v12 + 464), (_OWORD *)(v12 + 664));
  id v16 = v13;
  char v17 = sub_100077B98();
  *(void *)(v12 + 96_Block_object_dispose(&a9, 8) = v15;
  sub_100078008();
  sub_100077CAC();
  if (v20)
  {
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v21 = v18;
  char v22 = v19;
  sub_10005489C((uint64_t *)&unk_1000F0E00);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v17, v15))
  {
    uint64_t v23 = sub_100077F4C();
    unint64_t v25 = sub_10008D974(v23, v24);
    if ((v22 & 1) != (v26 & 1)) {
      return sub_100077AF4();
    }
    unint64_t v21 = v25;
  }

  uint64_t v33 = *(void *)(v12 + 968);
  if ((v22 & 1) == 0)
  {
    uint64_t v36 = *(void *)(v12 + 1024);
    uint64_t v37 = *(void *)(v12 + 1016);
    *(void *)(v33 + 8 * (v21 >> 6) + 64) |= 1LL << v21;
    id v38 = (void *)(*(void *)(v33 + 48) + 16 * v21);
    *id v38 = v37;
    v38[1] = v36;
    sub_100077D0C((_OWORD *)(v12 + 664), (_OWORD *)(*(void *)(v33 + 56) + 32 * v21));
    if (!v20)
    {
      sub_100077D58(v39);
      goto LABEL_15;
    }

#error "100071E6C: call analysis failed (funcsize=109)"
#error "100072478: call analysis failed (funcsize=109)"
#error "100072A84: call analysis failed (funcsize=109)"
#error "100073090: call analysis failed (funcsize=109)"
uint64_t sub_1000735B4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  sub_100077CE0();
  sub_100077F58(*(void **)(v13 + 1112));
  sub_100077E64();
  if (!v16)
  {
    sub_100077A28();
    uint64_t v27 = sub_100077BD8();
    char v29 = v28;
    sub_1000573CC();
    if ((v29 & 1) != 0)
    {
      sub_100077B80();
      a9 = v12;
      sub_10005489C((uint64_t *)&unk_1000F0E00);
      sub_100077F74();
      sub_100077CFC(*(void *)(v12 + 48) + 16 * v27);
      sub_100077FDC(*(void *)(v12 + 56));
      sub_10007804C();
      sub_100077BA0();
    }

    else
    {
      sub_100077BE4();
    }

    char v30 = sub_100077DBC();
    uint64_t v32 = sub_100078024(v30, v31);
    sub_100077D44(v32, &qword_1000F1E60);
    uint64_t v33 = sub_100077DBC();
    goto LABEL_16;
  }

  *(void *)(v13 + 624) = sub_100077EEC(v17, &qword_1000F0E20, &OBJC_CLASS___NSURL_ptr);
  *(void *)(v13 + 600) = v16;
  unint64_t v18 = (_OWORD *)sub_100077EB4();
  sub_100077924(v18, v19);
  char v20 = v16;
  sub_100077B98();
  *(void *)(v13 + 952) = v12;
  sub_100077BD8();
  sub_100077CAC();
  if (v21)
  {
    __break(1u);
    goto LABEL_20;
  }

  sub_100077F68();
  sub_10005489C((uint64_t *)&unk_1000F0E00);
  if (sub_100077C1C())
  {
    char v22 = sub_100077F4C();
    sub_10008D974(v22, v23);
    sub_100077E54();
    if (!v25) {
      return sub_100077AF4();
    }
    uint64_t v14 = v24;
  }

  uint64_t v35 = *(void *)(v13 + 952);
  if ((v15 & 1) == 0)
  {
    uint64_t v37 = *(void *)(v13 + 1024);
    id v38 = *(void *)(v13 + 1016);
    *(void *)(v35 + 8 * (v14 >> 6) + 64) |= 1LL << v14;
    uint64_t v39 = (void *)(*(void *)(v35 + 48) + 16 * v14);
    *uint64_t v39 = v38;
    v39[1] = v37;
    sub_100077D0C((_OWORD *)(v13 + 504), (_OWORD *)(*(void *)(v35 + 56) + 32 * v14));
    if (!v21)
    {
      sub_100077D58(v40);
      goto LABEL_15;
    }

#error "100073D98: call analysis failed (funcsize=109)"
uint64_t sub_1000742BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  char v7;
  Swift::Int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  Class isa;
  uint64_t v19;
  sub_100077DA4();
  uint64_t v1 = *(void **)(v0 + 1032);
  sub_100077EAC();
  sub_100077ECC();

  uint64_t v2 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  swift_bridgeObjectRetain(*(void *)(v0 + 1000));
  uint64_t v4 = sub_10008D974(v3, v2);
  id v6 = v5;
  sub_1000556B4();
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = sub_100077B80();
    uint64_t v8 = v6[3];
    sub_10005489C((uint64_t *)&unk_1000F0E00);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v7, v8);
    id v9 = v6;
    sub_100077CFC(v6[6] + 16 * v4);
    sub_100077FDC(v6[7]);
    uint64_t v10 = sub_100077EB4();
    _NativeDictionary._delete(at:)(v10, v11);
    sub_100077BA0();
  }

  else
  {
    *(_OWORD *)(v0 + 504) = 0u;
    *(_OWORD *)(v0 + 520) = 0u;
    id v9 = *(void **)(v0 + 1000);
  }

  uint64_t v12 = *(void *)(v0 + 1024);
  id v13 = *(void *)(v0 + 1016);
  uint64_t v14 = sub_100077F60(v13, v12);
  sub_100077D44(v14, &qword_1000F1E60);
  Swift::Int v15 = sub_100077B28(v13, v12, 0);
  if (v17)
  {
    sub_100077D24();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100055C88();
    return sub_100077AA4((uint64_t)isa, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    *(void *)(v0 + 100_Block_object_dispose(&a9, 8) = v16;
    *(void *)(v0 + 1000) = v9;
    char v19 = *(void *)(v0 + 976) + 24 * v16;
    *(void *)(v0 + 1016) = *(void *)(v19 + 32);
    *(void *)(v0 + 1024) = *(void *)(v19 + 40);
    return ((uint64_t (*)(uint64_t))((char *)&loc_100074440 + dword_10007487C[*(unsigned __int8 *)(v19 + 48)]))(v15);
  }

uint64_t sub_100074450()
{
  uint64_t v3 = sub_100077D94();
  sub_100077DDC(v3, v4, 0);
  NSString v5 = sub_100077D2C();
  id v6 = sub_100077D6C((uint64_t)v5, "arrayForKey:");
  sub_100077ED4();
  id v8 = sub_100077C08(v7, "valuePromise");
  sub_100078058((uint64_t)v8);
  v2[31] = v0;
  v2[26] = v2;
  v2[27] = sub_100071440;
  v2[62] = sub_1000779F0((uint64_t)(v2 + 26));
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  [v8 resultWithCompletion:v1];
  return sub_100077B10();
}

#error "1000748F8: call analysis failed (funcsize=61)"
uint64_t sub_100074998()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  sub_1000779B8(v1, v0, 0);
  uint64_t v4 = sub_1000779E4();
  NSString v5 = sub_1000779D8((uint64_t)v4, "arrayForKey:");
  sub_100077A48();
  uint64_t v7 = sub_100077A40(v6, "valuePromise");
  sub_100077C60((uint64_t)v7);
  v2[31] = v3;
  v2[26] = v2;
  v2[27] = sub_100071440;
  id v8 = sub_1000779CC();
  v2[62] = v8;
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  sub_100077BCC(v8, "resultWithCompletion:");
  return sub_100077B10();
}

#error "100074E38: call analysis failed (funcsize=61)"
uint64_t sub_100074ED8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  sub_1000779B8(v1, v0, 0);
  uint64_t v4 = sub_1000779E4();
  NSString v5 = sub_1000779D8((uint64_t)v4, "arrayForKey:");
  sub_100077A48();
  uint64_t v7 = sub_100077A40(v6, "valuePromise");
  sub_100077C60((uint64_t)v7);
  v2[31] = v3;
  v2[26] = v2;
  v2[27] = sub_100071440;
  id v8 = sub_1000779CC();
  v2[62] = v8;
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  sub_100077BCC(v8, "resultWithCompletion:");
  return sub_100077B10();
}

#error "100075378: call analysis failed (funcsize=61)"
uint64_t sub_100075418()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  sub_1000779B8(v1, v0, 0);
  uint64_t v4 = sub_1000779E4();
  NSString v5 = sub_1000779D8((uint64_t)v4, "arrayForKey:");
  sub_100077A48();
  uint64_t v7 = sub_100077A40(v6, "valuePromise");
  sub_100077C60((uint64_t)v7);
  v2[31] = v3;
  v2[26] = v2;
  v2[27] = sub_100071440;
  id v8 = sub_1000779CC();
  v2[62] = v8;
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  sub_100077BCC(v8, "resultWithCompletion:");
  return sub_100077B10();
}

#error "1000758B8: call analysis failed (funcsize=61)"
uint64_t sub_100075958()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  sub_1000779B8(v1, v0, 0);
  uint64_t v4 = sub_1000779E4();
  NSString v5 = sub_1000779D8((uint64_t)v4, "arrayForKey:");
  sub_100077A48();
  uint64_t v7 = sub_100077A40(v6, "valuePromise");
  sub_100077C60((uint64_t)v7);
  v2[31] = v3;
  v2[26] = v2;
  v2[27] = sub_100071440;
  id v8 = sub_1000779CC();
  v2[62] = v8;
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  sub_100077BCC(v8, "resultWithCompletion:");
  return sub_100077B10();
}

#error "100075DF8: call analysis failed (funcsize=63)"
uint64_t sub_100075EA0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  sub_1000779B8(v1, v0, 0);
  uint64_t v4 = sub_1000779E4();
  NSString v5 = sub_1000779D8((uint64_t)v4, "arrayForKey:");
  sub_100077A48();
  uint64_t v7 = sub_100077A40(v6, "valuePromise");
  sub_100077C60((uint64_t)v7);
  v2[31] = v3;
  v2[26] = v2;
  v2[27] = sub_100071440;
  id v8 = sub_1000779CC();
  v2[62] = v8;
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  sub_100077BCC(v8, "resultWithCompletion:");
  return sub_100077B10();
}

#error "100076340: call analysis failed (funcsize=61)"
uint64_t sub_1000763E0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  sub_1000779B8(v1, v0, 0);
  uint64_t v4 = sub_1000779E4();
  NSString v5 = sub_1000779D8((uint64_t)v4, "arrayForKey:");
  sub_100077A48();
  uint64_t v7 = sub_100077A40(v6, "valuePromise");
  sub_100077C60((uint64_t)v7);
  v2[31] = v3;
  v2[26] = v2;
  v2[27] = sub_100071440;
  id v8 = sub_1000779CC();
  v2[62] = v8;
  v2[58] = _NSConcreteStackBlock;
  v2[59] = 0x40000000LL;
  v2[60] = sub_100070ED4;
  v2[61] = &unk_1000D95E8;
  sub_100077BCC(v8, "resultWithCompletion:");
  return sub_100077B10();
}

uint64_t sub_100076820(uint64_t result, void *a2, void *a3, uint64_t (*a4)(uint64_t, void *))
{
  uint64_t v4 = *(void *)(result + 32);
  if (a3) {
    return sub_100070E64(v4, (uint64_t)a3);
  }
  if (a2) {
    return a4(v4, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100076884(uint64_t a1)
{
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = v1;
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_1000768DC()
{
  uint64_t v1 = v0[18];
  v0[16] = [(id)objc_opt_self(AMSBag) uninitializedToken];
  id v2 = [objc_allocWithZone(AMSMutablePromise) init];
  v0[20] = v2;
  uint64_t v3 = swift_allocObject(&unk_1000D9500, 24LL, 7LL);
  id v21 = v2;
  v0[21] = v3;
  uint64_t v22 = v3;
  *(void *)(v3 + 16) = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = v0[18];
    id v5 = v2;
    swift_bridgeObjectRetain(v4);
    __asm { BR              X8 }
  }

  id v6 = v2;
  v0[22] = _swiftEmptyArrayStorage;
  uint64_t v7 = (void *)v0[19];
  v0[23] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_10008E434((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  sub_1000573CC();
  v0[14] = sub_100077134;
  v0[15] = v22;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_100077154;
  v0[13] = &unk_1000D9518;
  id v9 = _Block_copy(v0 + 10);
  uint64_t v10 = v0[15];
  swift_retain(v22);
  swift_release(v10);
  id v11 = [v7 cachedValuesForKeys:isa observationToken:v0 + 16 updateHandler:v9];
  _Block_release(v9);

  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (*(void *)(v12 + 16))
  {
    id v13 = (void *)v0[19];
    sub_1000556B4();
    [v13 removeObserverWithToken:v0[16]];
    Class v14 = sub_100077FC0().super.isa;
    [v21 finishWithResult:v14];

    uint64_t v16 = v0[21];
    Swift::Int v15 = (void *)v0[22];
    char v17 = (void *)v0[20];
    uint64_t v18 = sub_1000771C0(v15, v12);
    sub_100055C88();
    swift_bridgeObjectRelease(v15);
    Class v19 = sub_100077FC0().super.isa;
    swift_release(v16);

    swift_bridgeObjectRelease(v18);
    return ((uint64_t (*)(Class))v0[1])(v19);
  }

  else
  {
    sub_100055C88();
    v0[7] = v0 + 17;
    v0[2] = v0;
    v0[3] = sub_100076E30;
    v0[14] = sub_1000779F0((uint64_t)(v0 + 2));
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000LL;
    v0[12] = sub_100070ED4;
    v0[13] = &unk_1000D9540;
    [v21 resultWithCompletion:v0 + 10];
    return swift_continuation_await(v0 + 2);
  }

uint64_t sub_100076E30()
{
  *(void *)(v0 + 192) = v1;
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100076EB4()
{
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v10 = 0LL;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v1,  &v10,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  if (v10) {
    sub_100055C88();
  }
  [*(id *)(v0 + 152) removeObserverWithToken:*(void *)(v0 + 128)];
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v4 = *(void **)(v0 + 160);
  id v5 = (void *)sub_100077EB4();
  uint64_t v7 = sub_1000771C0(v5, v6);
  sub_100055C88();
  swift_bridgeObjectRelease(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release(v3);

  swift_bridgeObjectRelease(v7);
  return (*(uint64_t (**)(Class))(v0 + 8))(isa);
}

uint64_t sub_100076FDC()
{
  uint64_t v1 = *(void *)(v0 + 184);
  [*(id *)(v0 + 152) removeObserverWithToken:*(void *)(v0 + 128)];
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 160);
  sub_1000771C0(*(void **)(v0 + 176), v1);
  swift_bridgeObjectRelease(v1);
  sub_100055C88();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release(v2);

  sub_1000556B4();
  return sub_100077AA4((uint64_t)isa, *(uint64_t (**)(void))(v0 + 8));
}

void sub_1000770B0(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [a2 finishWithResult:isa];
}

uint64_t sub_100077110()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100077134(uint64_t a1)
{
}

uint64_t sub_10007713C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 6u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100077154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000771C0(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)&unk_1000F0DF0;
  uint64_t v5 = sub_10005489C((uint64_t *)&unk_1000F0DF0);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v68 - v9;
  id v11 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v70 = a2 + 64;
  uint64_t v13 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  unint64_t v74 = v84;
  uint64_t v76 = &v87;
  int64_t v73 = (unint64_t)(v13 + 63) >> 6;
  int64_t v68 = v73 - 1;
  uint64_t v75 = a2;
  swift_bridgeObjectRetain(a2);
  int64_t v77 = 0LL;
  uint64_t v78 = a1;
  unint64_t v69 = a1 + 9;
  id v72 = v10;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  unint64_t v17 = v16 | (v77 << 6);
LABEL_5:
  uint64_t v18 = *(void *)(v75 + 56);
  Class v19 = (void *)(*(void *)(v75 + 48) + 16 * v17);
  uint64_t v20 = v19[1];
  *(void *)&__int128 v83 = *v19;
  *((void *)&v83 + 1) = v20;
  sub_10005737C(v18 + 32 * v17, (uint64_t)v74);
  swift_bridgeObjectRetain(v20);
  while (1)
  {
    sub_100077934((uint64_t)&v83, (uint64_t)&v85, &qword_1000F1BB0);
    uint64_t v24 = v86;
    if (!v86) {
      goto LABEL_75;
    }
    uint64_t v25 = (uint64_t)v8;
    char v26 = v4;
    uint64_t v27 = v85;
    sub_100077924(v76, &v83);
    uint64_t v28 = v78[2];
    if (!v28) {
      goto LABEL_35;
    }
    uint64_t v29 = v78[4];
    uint64_t v30 = v78[5];
    BOOL v31 = (_OWORD *)v29 == v27 && v30 == v24;
    if (v31 || (sub_100077EDC(v29, v30) & 1) != 0) {
      break;
    }
    if (v28 != 1)
    {
      uint64_t v57 = v78[6];
      uint64_t v58 = v78[7];
      BOOL v59 = (_OWORD *)v57 == v27 && v58 == v24;
      if (v59 || (sub_100077EDC(v57, v58) & 1) != 0) {
        break;
      }
      if (v28 != 2)
      {
        uint64_t v60 = v69;
        uint64_t v61 = 2LL;
        while (1)
        {
          uint64_t v62 = v61 + 1;
          if (__OFADD__(v61, 1LL)) {
            break;
          }
          uint64_t v63 = *(v60 - 1);
          uint64_t v64 = *v60;
          BOOL v65 = (_OWORD *)v63 == v27 && v64 == v24;
          if (v65 || (sub_100077EDC(v63, v64) & 1) != 0) {
            goto LABEL_31;
          }
          v60 += 2;
          ++v61;
          if (v62 == v28) {
            goto LABEL_35;
          }
        }

LABEL_81:
            __break(1u);
LABEL_82:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
        }
      }
    }

uint64_t sub_1000778F4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 6u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10007790C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007791C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

_OWORD *sub_100077924(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100077934(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10005489C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100077978(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10005489C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000779B8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1000779CC()
{
  return swift_continuation_init(v0, 1LL);
}

id sub_1000779D8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

NSString sub_1000779E4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000779F0(uint64_t a1)
{
  return swift_continuation_init(a1, 1LL);
}

void sub_1000779F8(uint64_t a1@<X8>)
{
  v2[126] = a1;
  v2[125] = v1;
  uint64_t v3 = v2[122] + 24 * a1;
  v2[127] = *(void *)(v3 + 32);
  v2[128] = *(void *)(v3 + 40);
}

uint64_t sub_100077A28()
{
  return swift_bridgeObjectRetain(v0);
}

NSString sub_100077A30()
{
  return String._bridgeToObjectiveC()();
}

id sub_100077A38(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

id sub_100077A40(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_100077A48()
{
}

_OWORD *sub_100077A50()
{
  uint64_t v4 = *(void *)(v1 + 1024);
  uint64_t v5 = *(void *)(v1 + 1016);
  *(void *)(v0 + 8 * (v3 >> 6) + 64) |= 1LL << v3;
  uint64_t v6 = (void *)(*(void *)(v0 + 48) + 16 * v3);
  *uint64_t v6 = v5;
  v6[1] = v4;
  return sub_100077924(v2, (_OWORD *)(*(void *)(v0 + 56) + 32 * v3));
}

uint64_t sub_100077AA4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100077ABC()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100077AD8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100077AF4()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_100077B10()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100077B28(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_1000778F4(a1, a2, a3);
}

uint64_t sub_100077B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a9 + 48) + 16 * v9 + 8));
}

BOOL sub_100077B5C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

_OWORD *sub_100077B70()
{
  return sub_100077924((_OWORD *)(*(void *)(v1 + 56) + 32 * v2), v0);
}

uint64_t sub_100077B80()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 1000));
}

uint64_t sub_100077B8C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100077B98()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100077BA0()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

_OWORD *sub_100077BA8()
{
  unint64_t v3 = (void *)(*(void *)(v0 + 56) + 32 * v2);
  sub_100054930(v3);
  return sub_100077924(v1, v3);
}

id sub_100077BCC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

unint64_t sub_100077BD8()
{
  return sub_10008D974(v1, v0);
}

double sub_100077BE4()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_100077BF4()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 1000));
}

id sub_100077C08(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100077C10()
{
  return _NativeDictionary._delete(at:)(v1, v0);
}

BOOL sub_100077C1C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

void sub_100077C30(uint64_t a1)
{
  *(void *)(v2 + 1064) = a1;
}

void sub_100077C3C(uint64_t a1)
{
  *(void *)(v2 + 112_Block_object_dispose(&a9, 8) = a1;
}

void sub_100077C48(uint64_t a1)
{
  *(void *)(v2 + 1080) = a1;
}

void sub_100077C54(uint64_t a1)
{
  *(void *)(v2 + 1096) = a1;
}

void sub_100077C60(uint64_t a1)
{
  *(void *)(v2 + 1032) = a1;
}

void sub_100077C6C(uint64_t a1)
{
  *(void *)(v2 + 104_Block_object_dispose(&a9, 8) = a1;
}

void sub_100077C78(uint64_t a1)
{
  *(void *)(v2 + 1112) = a1;
}

void sub_100077C84()
{
  uint64_t v2 = (void *)(v1 - 8);
  void *v2 = *v0;
  void *v2 = *v0;
}

  ;
}

  ;
}

uint64_t sub_100077CC0()
{
  return swift_bridgeObjectRelease(v0);
}

unint64_t sub_100077CD0()
{
  return sub_10008D974(v1, v0);
}

  ;
}

uint64_t sub_100077CFC@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void sub_100077D04()
{
}

_OWORD *sub_100077D0C(_OWORD *a1, _OWORD *a2)
{
  return sub_100077924(a1, a2);
}

uint64_t sub_100077D24()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 976));
}

NSString sub_100077D2C()
{
  return String._bridgeToObjectiveC()();
}

id sub_100077D38(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100077D44(uint64_t a1, uint64_t *a2)
{
  return sub_100077978(v2, a2);
}

NSString sub_100077D4C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100077D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 1024);
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRetain(v3);
}

NSDictionary sub_100077D64()
{
  return Dictionary._bridgeToObjectiveC()();
}

id sub_100077D6C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100077D78()
{
  return v0;
}

uint64_t sub_100077D84()
{
  return v0;
}

uint64_t sub_100077D94()
{
  return v0;
}

  ;
}

uint64_t sub_100077DBC()
{
  return v0;
}

uint64_t sub_100077DC8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100077DDC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return swift_bridgeObjectRetain(v3);
}

id sub_100077DF0()
{
  return v2;
}

void sub_100077E08()
{
  *(void *)(v0 + 8 * (v2 >> 6) + 64) |= 1LL << v2;
  uint64_t v4 = (void *)(*(void *)(v0 + 48) + 16 * v2);
  *uint64_t v4 = v1;
  v4[1] = v3;
}

void sub_100077E3C()
{
}

  ;
}

  ;
}

unint64_t sub_100077E74()
{
  return sub_10008D974(v0, v1);
}

void sub_100077E80(uint64_t a1@<X8>)
{
  v2[126] = a1;
  v2[125] = v1;
  uint64_t v3 = v2[122] + 24 * a1;
  v2[127] = *(void *)(v3 + 32);
  v2[128] = *(void *)(v3 + 40);
}

uint64_t sub_100077EAC()
{
  return swift_willThrow();
}

uint64_t sub_100077EB4()
{
  return v0;
}

uint64_t sub_100077EC0()
{
  return v0;
}

uint64_t sub_100077ECC()
{
  return swift_errorRelease(v0);
}

void sub_100077ED4()
{
}

uint64_t sub_100077EDC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_100077EEC(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_100054B08(0LL, a2, a3);
}

uint64_t sub_100077EF4()
{
  return sub_1000778F4(v1, v0, 2u);
}

uint64_t sub_100077F04()
{
  return sub_1000778F4(v1, v0, 3u);
}

uint64_t sub_100077F14()
{
  return sub_1000778F4(v1, v0, 4u);
}

uint64_t sub_100077F24()
{
  return sub_1000778F4(v1, v0, 6u);
}

uint64_t sub_100077F34()
{
  return sub_1000778F4(v1, v0, 1u);
}

void sub_100077F44()
{
}

uint64_t sub_100077F4C()
{
  return *(void *)(v0 + 1016);
}

void sub_100077F58(void *a1@<X8>)
{
}

uint64_t sub_100077F60(uint64_t a1, uint64_t a2)
{
  return sub_1000778F4(a1, a2, 0);
}

  ;
}

BOOL sub_100077F74()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

uint64_t sub_100077F88()
{
  return sub_100054930((void *)(*(void *)(v0 + 56) + 32 * v1));
}

uint64_t sub_100077F98()
{
  return sub_10007713C(v0, v1, 5u);
}

BOOL sub_100077FA8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

NSDictionary sub_100077FC0()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100077FD0()
{
  return sub_10005737C(v0 - 192, v0 - 224);
}

_OWORD *sub_100077FDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100077924((_OWORD *)(a1 + 32 * v2), v1);
}

BOOL sub_100077FE8()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

  ;
}

unint64_t sub_100078008()
{
  return sub_10008D974(v1, v0);
}

void sub_100078014(uint64_t a1)
{
  *(void *)(v1 + 112_Block_object_dispose(&a9, 8) = a1;
}

void sub_10007801C(uint64_t a1)
{
  *(void *)(v1 + 1112) = a1;
}

uint64_t sub_100078024(uint64_t a1, uint64_t a2)
{
  return sub_1000778F4(a1, a2, 5u);
}

void sub_10007802C(uint64_t a1)
{
  *(void *)(v1 + 1096) = a1;
}

void sub_100078034(uint64_t a1)
{
  *(void *)(v1 + 1080) = a1;
}

void sub_10007803C(uint64_t a1)
{
  *(void *)(v1 + 1064) = a1;
}

void sub_100078044(uint64_t a1)
{
  *(void *)(v1 + 104_Block_object_dispose(&a9, 8) = a1;
}

uint64_t sub_10007804C()
{
  return _NativeDictionary._delete(at:)(v1, v0);
}

void sub_100078058(uint64_t a1)
{
  *(void *)(v1 + 1032) = a1;
}

  ;
}

uint64_t sub_10007806C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_100078074(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
}

uint64_t destroy for BagValueType(uint64_t a1)
{
  return sub_1000778F4(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12amsaccountsd12BagValueTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_10007713C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for BagValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_10007713C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000778F4(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for BagValueType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for BagValueType(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000778F4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BagValueType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BagValueType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100078210(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100078218(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BagValueType()
{
  return &type metadata for BagValueType;
}

uint64_t sub_100078230(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007826C + 4 * byte_1000A5D50[a1]))( 0xD000000000000020LL,  0x80000001000ACB90LL);
}

void sub_10007826C()
{
}

unint64_t sub_1000782AC()
{
  return 0xD000000000000018LL;
}

unint64_t sub_1000782C8(Swift::String string)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D8730, v3);
  sub_100079AE8();
  if (v1 >= 6) {
    return 6LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10007830C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100078348 + 4 * byte_1000A5D56[a1]))( 0xD000000000000020LL,  0x80000001000ACB90LL);
}

void sub_100078348()
{
}

unint64_t sub_100078388()
{
  return 0xD000000000000018LL;
}

void sub_1000783A4()
{
}

BOOL sub_1000783F0(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x30uLL) == 0;
}

void sub_100078410()
{
  uint64_t v3 = sub_10005489C(&qword_1000F0F58);
  sub_1000644DC();
  __chkstk_darwin(v4);
  unsigned __int8 v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100079990();
  unint64_t v7 = sub_100079630();
  sub_1000645F8((uint64_t)&unk_1000D99E0, v8, v7);
  uint64_t v9 = *v0;
  char v21 = 0;
  sub_1000798E8(v9, (uint64_t)&v21);
  if (!v1)
  {
    uint64_t v10 = v0[1];
    char v20 = 1;
    sub_1000798E8(v10, (uint64_t)&v20);
    uint64_t v11 = v0[2];
    char v19 = 2;
    sub_1000798E8(v11, (uint64_t)&v19);
    uint64_t v12 = v0[3];
    char v18 = 3;
    sub_1000798E8(v12, (uint64_t)&v18);
    uint64_t v13 = v0[4];
    char v17 = 4;
    sub_1000798E8(v13, (uint64_t)&v17);
    uint64_t v14 = v0[5];
    char v16 = 5;
    sub_1000798E8(v14, (uint64_t)&v16);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v3);
  sub_100064570();
}

Swift::Int sub_100078548(uint64_t a1)
{
  return sub_1000642C8();
}

void sub_1000785A4(uint64_t *a1@<X8>)
{
  unint64_t v6 = sub_100079630();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000D99E0, &unk_1000D99E0, v6, v2, v3);
  if (v1)
  {
    sub_100079AC0();
  }

  else
  {
    char v18 = 0;
    uint64_t v7 = sub_1000798F8((uint64_t)&v18);
    char v17 = 1;
    uint64_t v8 = sub_1000798F8((uint64_t)&v17);
    char v16 = 2;
    uint64_t v12 = sub_1000798F8((uint64_t)&v16);
    char v15 = 3;
    uint64_t v11 = sub_1000798F8((uint64_t)&v15);
    char v14 = 4;
    uint64_t v10 = sub_1000798F8((uint64_t)&v14);
    char v13 = 5;
    uint64_t v9 = sub_1000798F8((uint64_t)&v13);
    sub_100079AB0();
    sub_100079AC0();
    *a1 = v7;
    a1[1] = v8;
    a1[2] = v12;
    a1[3] = v11;
    a1[4] = v10;
    a1[5] = v9;
  }

  sub_1000554F4();
}

void sub_100078718(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_100078724()
{
}

uint64_t sub_10007872C(uint64_t a1)
{
  return sub_1000964E4(a1, *v1);
}

void sub_100078734(uint64_t a1)
{
}

unint64_t sub_10007873C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000782C8(*a1);
  *a2 = result;
  return result;
}

void sub_100078768(uint64_t *a1@<X8>)
{
  *a1 = sub_100078230(*v1);
  a1[1] = v3;
  sub_100055744();
}

uint64_t sub_10007878C()
{
  return sub_10007830C(*v0);
}

uint64_t sub_100078794@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100078308(a1);
  *a2 = result;
  return result;
}

void sub_1000787B8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void sub_1000787C4(void *a1@<X8>)
{
  *a1 = &off_1000D8708;
}

uint64_t sub_1000787D4(uint64_t a1)
{
  unint64_t v2 = sub_100079630();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000787FC(uint64_t a1)
{
  unint64_t v2 = sub_100079630();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100078824@<D0>(_OWORD *a1@<X8>)
{
  if (!v1)
  {
    __int128 v4 = v5[1];
    *a1 = v5[0];
    a1[1] = v4;
    double result = *(double *)&v6;
    a1[2] = v6;
  }

  return result;
}

void sub_100078864()
{
}

Swift::Int sub_100078880()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Swift::UInt v6 = v0[5];
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL sub_100078920(Swift::String a1)
{
  v1._rawValue = &off_1000D8808;
  return sub_100078D84(a1, v1);
}

void sub_10007893C()
{
}

uint64_t sub_100078978(void *a1, void *a2)
{
  if (*a1 == *a2
    && (sub_100079910((uint64_t)a1, (uint64_t)a2), (v4 & 1) != 0)
    && *(void *)(v2 + 40) == *(void *)(v3 + 40))
  {
    return sub_100079A90();
  }

  else
  {
    return sub_1000791CC();
  }

void sub_1000789B0()
{
  unint64_t v1 = sub_100079310();
  sub_1000645F8((uint64_t)&unk_1000D98B0, v2, v1);
  sub_100079AC8();
  unint64_t v3 = sub_100079388();
  sub_100079A00(v3, v4);
  sub_100079A28();
  sub_100064570();
}

void sub_100078A54(uint64_t a1)
{
}

void sub_100078AB0()
{
  unint64_t v2 = sub_100079310();
  sub_1000799C8((uint64_t)&unk_1000D98B0, v3, v2);
  if (v0)
  {
    sub_100079AC0();
  }

  else
  {
    sub_10007934C();
    sub_100079978((uint64_t)&unk_1000D9928, v4);
    sub_100079A14();
    sub_100079944();
  }

  sub_1000554F4();
}

BOOL sub_100078B78@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1000D8808;
  BOOL result = sub_100078D84(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100078BB4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_100078BD8()
{
  return 0x5F746E756F636361LL;
}

BOOL sub_100078BF8@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100078920(a1);
  *a2 = result;
  return result;
}

void sub_100078C24(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_100078C30(void *a1@<X8>)
{
  *a1 = &off_1000D87E0;
}

uint64_t sub_100078C40(uint64_t a1)
{
  unint64_t v2 = sub_100079310();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100078C68(uint64_t a1)
{
  unint64_t v2 = sub_100079310();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100078C90@<D0>(_OWORD *a1@<X8>)
{
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
  }

  return result;
}

void sub_100078CD0()
{
}

uint64_t sub_100078CF0()
{
  uint64_t v1 = v0;
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if (v3 >= v2 >> 1)
  {
    sub_10006DE28(v2 > 1, v3 + 1, 1, v0);
    uint64_t v1 = v6;
  }

  *(void *)(v1 + 16) = v3 + 1;
  unint64_t v4 = v1 + 24 * v3;
  *(void *)(v4 + 32) = 0xD000000000000012LL;
  *(void *)(v4 + 40) = 0x80000001000ACC80LL;
  *(_BYTE *)(v4 + 4_Block_object_dispose(&a9, 8) = 6;
  return v1;
}

BOOL sub_100078D84(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  sub_100079AE8();
  return v2 != 0;
}

BOOL sub_100078DBC(Swift::String a1)
{
  v1._rawValue = &off_1000D8868;
  return sub_100078D84(a1, v1);
}

unint64_t sub_100078DD8()
{
  return sub_100079A50();
}

void sub_100078DE4()
{
  unint64_t v1 = sub_10007910C();
  sub_1000645F8((uint64_t)&unk_1000D9790, v2, v1);
  sub_100079AC8();
  unint64_t v3 = sub_100079184();
  sub_100079A00(v3, v4);
  sub_100079A28();
  sub_100064570();
}

void sub_100078E88()
{
  unint64_t v2 = sub_10007910C();
  sub_1000799C8((uint64_t)&unk_1000D9790, v3, v2);
  if (v0)
  {
    sub_100079AC0();
  }

  else
  {
    sub_100079148();
    sub_100079978((uint64_t)&unk_1000D9808, v4);
    sub_100079A14();
    sub_100079944();
  }

  sub_1000554F4();
}

BOOL sub_100078F4C@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1000D8868;
  BOOL result = sub_100078D84(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100078F88(void *a1@<X8>)
{
  *a1 = 0xD000000000000012LL;
  a1[1] = v2;
  sub_100055744();
}

unint64_t sub_100078FB0()
{
  return 0xD000000000000012LL;
}

BOOL sub_100078FCC@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100078DBC(a1);
  *a2 = result;
  return result;
}

void sub_100078FF8(void *a1@<X8>)
{
  *a1 = &off_1000D8840;
}

uint64_t sub_100079008(uint64_t a1)
{
  unint64_t v2 = sub_10007910C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079030(uint64_t a1)
{
  unint64_t v2 = sub_10007910C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100079058@<D0>(_OWORD *a1@<X8>)
{
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
  }

  return result;
}

void sub_100079098()
{
}

__n128 sub_1000790AC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CachedServerDataBag()
{
}

unint64_t sub_1000790D0()
{
  unint64_t result = qword_1000F0E90;
  if (!qword_1000F0E90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5D84, &unk_1000D96F8);
    atomic_store(result, (unint64_t *)&qword_1000F0E90);
  }

  return result;
}

unint64_t sub_10007910C()
{
  unint64_t result = qword_1000F0EA0;
  if (!qword_1000F0EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A605C, &unk_1000D9790);
    atomic_store(result, (unint64_t *)&qword_1000F0EA0);
  }

  return result;
}

unint64_t sub_100079148()
{
  unint64_t result = qword_1000F0EA8;
  if (!qword_1000F0EA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6034, &unk_1000D9808);
    atomic_store(result, (unint64_t *)&qword_1000F0EA8);
  }

  return result;
}

unint64_t sub_100079184()
{
  unint64_t result = qword_1000F0EB8;
  if (!qword_1000F0EB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A600C, &unk_1000D9808);
    atomic_store(result, (unint64_t *)&qword_1000F0EB8);
  }

  return result;
}

uint64_t sub_1000791CC()
{
  return 0LL;
}

void type metadata accessor for CachedServerDataBag.CodingKeys()
{
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner()
{
}

unint64_t sub_1000791F0()
{
  unint64_t result = qword_1000F0EC0;
  if (!qword_1000F0EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5E6C, &unk_1000D9808);
    atomic_store(result, (unint64_t *)&qword_1000F0EC0);
  }

  return result;
}

uint64_t sub_10007922C()
{
  return sub_1000797E0(&qword_1000F0EC8, &qword_1000F0ED0);
}

unint64_t sub_100079254()
{
  unint64_t result = qword_1000F0ED8;
  if (!qword_1000F0ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5FE4, &unk_1000D9790);
    atomic_store(result, (unint64_t *)&qword_1000F0ED8);
  }

  return result;
}

unint64_t sub_100079294()
{
  unint64_t result = qword_1000F0EE0;
  if (!qword_1000F0EE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5ED4, &unk_1000D9790);
    atomic_store(result, (unint64_t *)&qword_1000F0EE0);
  }

  return result;
}

unint64_t sub_1000792D4()
{
  unint64_t result = qword_1000F0EE8;
  if (!qword_1000F0EE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5EFC, &unk_1000D9790);
    atomic_store(result, (unint64_t *)&qword_1000F0EE8);
  }

  return result;
}

unint64_t sub_100079310()
{
  unint64_t result = qword_1000F0EF8;
  if (!qword_1000F0EF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A62A8, &unk_1000D98B0);
    atomic_store(result, (unint64_t *)&qword_1000F0EF8);
  }

  return result;
}

unint64_t sub_10007934C()
{
  unint64_t result = qword_1000F0F00;
  if (!qword_1000F0F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6280, &unk_1000D9928);
    atomic_store(result, (unint64_t *)&qword_1000F0F00);
  }

  return result;
}

unint64_t sub_100079388()
{
  unint64_t result = qword_1000F0F10;
  if (!qword_1000F0F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6258, &unk_1000D9928);
    atomic_store(result, (unint64_t *)&qword_1000F0F10);
  }

  return result;
}

uint64_t sub_1000793C4(unsigned int *a1, int a2)
{
  if (!a2) {
    return sub_1000791CC();
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100079410(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100079450 + 4 * byte_1000A5D5C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100079470 + 4 * byte_1000A5D61[v4]))();
  }
}

_BYTE *sub_100079450(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100079470(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100079478(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100079480(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100079488(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100079490(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner.CodingKeys()
{
}

uint64_t sub_1000794A8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000794C8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4_Block_object_dispose(&a9, 8) = v3;
  return result;
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner.AccountData()
{
}

unint64_t sub_100079510()
{
  unint64_t result = qword_1000F0F18;
  if (!qword_1000F0F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A60B8, &unk_1000D9928);
    atomic_store(result, (unint64_t *)&qword_1000F0F18);
  }

  return result;
}

uint64_t sub_10007954C()
{
  return sub_1000797E0(&qword_1000F0F20, &qword_1000F0F28);
}

unint64_t sub_100079574()
{
  unint64_t result = qword_1000F0F30;
  if (!qword_1000F0F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6230, &unk_1000D98B0);
    atomic_store(result, (unint64_t *)&qword_1000F0F30);
  }

  return result;
}

unint64_t sub_1000795B4()
{
  unint64_t result = qword_1000F0F38;
  if (!qword_1000F0F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6120, &unk_1000D98B0);
    atomic_store(result, (unint64_t *)&qword_1000F0F38);
  }

  return result;
}

unint64_t sub_1000795F4()
{
  unint64_t result = qword_1000F0F40;
  if (!qword_1000F0F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6148, &unk_1000D98B0);
    atomic_store(result, (unint64_t *)&qword_1000F0F40);
  }

  return result;
}

unint64_t sub_100079630()
{
  unint64_t result = qword_1000F0F50;
  if (!qword_1000F0F50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6430, &unk_1000D99E0);
    atomic_store(result, (unint64_t *)&qword_1000F0F50);
  }

  return result;
}

uint64_t sub_10007966C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t sub_1000796F4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100079740 + 4 * byte_1000A5D6B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100079774 + 4 * byte_1000A5D66[v4]))();
}

uint64_t sub_100079774(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007977C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100079784LL);
  }
  return result;
}

uint64_t sub_100079790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100079798LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10007979C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000797A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner.AccountData.CodingKeys()
{
}

uint64_t sub_1000797BC()
{
  return sub_1000797E0(&qword_1000F0F60, &qword_1000F0F68);
}

uint64_t sub_1000797E0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000617F8(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100079824()
{
  unint64_t result = qword_1000F0F70;
  if (!qword_1000F0F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6408, &unk_1000D99E0);
    atomic_store(result, (unint64_t *)&qword_1000F0F70);
  }

  return result;
}

unint64_t sub_100079864()
{
  unint64_t result = qword_1000F0F78;
  if (!qword_1000F0F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A62F8, &unk_1000D99E0);
    atomic_store(result, (unint64_t *)&qword_1000F0F78);
  }

  return result;
}

unint64_t sub_1000798A4()
{
  unint64_t result = qword_1000F0F80;
  if (!qword_1000F0F80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6320, &unk_1000D99E0);
    atomic_store(result, (unint64_t *)&qword_1000F0F80);
  }

  return result;
}

uint64_t sub_1000798E8(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000798F8(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

void sub_100079908(Swift::UInt a1)
{
}

unsigned __int16 sub_100079910@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return vminv_u16((uint16x4_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)),  (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))),  0xFuLL)));
}

__n128 sub_100079944()
{
  __int128 v3 = *(_OWORD *)(v2 - 128);
  *(_OWORD *)(v2 - 160) = *(_OWORD *)(v2 - 112);
  *(_OWORD *)(v2 - 144) = v3;
  uint64_t v4 = *(void *)(v2 - 96);
  uint64_t v5 = *(void *)(v2 - 88);
  sub_100054930(v0);
  __n128 result = *(__n128 *)(v2 - 160);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v2 - 144);
  *(__n128 *)(v1 + 16) = result;
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  return result;
}

uint64_t sub_100079978(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

void *sub_100079990()
{
  return sub_100054838(v0, v0[3]);
}

void sub_1000799B0()
{
}

uint64_t sub_1000799C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void *sub_1000799E0()
{
  return sub_100054838(v0, v0[3]);
}

uint64_t sub_100079A00(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 112, a2, v2);
}

uint64_t sub_100079A14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100079A28()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

unint64_t sub_100079A50()
{
  return 0xD000000000000012LL;
}

  ;
}

void sub_100079A78()
{
}

void sub_100079A80()
{
}

void sub_100079A88()
{
}

uint64_t sub_100079A90()
{
  return 1LL;
}

  ;
}

void sub_100079AA8()
{
}

uint64_t sub_100079AB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100079AC0()
{
  return sub_100054930(v0);
}

__n128 sub_100079AC8()
{
  __int128 v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 - 112) = *(_OWORD *)v0;
  *(_OWORD *)(v1 - 96) = v2;
  __n128 result = *(__n128 *)(v0 + 32);
  *(__n128 *)(v1 - 80) = result;
  return result;
}

void sub_100079ADC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100079AE8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t *sub_100079AF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unsigned int v6 = (char *)a1 + v5;
    BOOL v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_100079B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

_BYTE *sub_100079BB4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

_BYTE *sub_100079C10(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

_BYTE *sub_100079C6C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

_BYTE *sub_100079CC8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_100079D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100079D30);
}

void sub_100079D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 245)
  {
    sub_100064370();
  }

  else
  {
    uint64_t v6 = sub_1000559FC();
    sub_100064300(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_100079D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100079D94);
}

void sub_100079D94(_BYTE *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 245)
  {
    *a1 = a2 + 10;
    sub_100064370();
  }

  else
  {
    uint64_t v7 = sub_1000559FC();
    sub_1000642A8((uint64_t)&a1[*(int *)(a4 + 20)], a2, a2, v7);
  }

uint64_t type metadata accessor for CachedServerDataSyncAttempt(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F0FE0, (uint64_t)&nominal type descriptor for CachedServerDataSyncAttempt);
}

uint64_t sub_100079DFC(uint64_t a1)
{
  v4[0] = &unk_1000A6500;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_100079E70()
{
  if (v1[0] == 2LL)
  {
    sub_1000647F4(0LL);
  }

  else
  {
    char v12 = v1[0] & 1;
    char v13 = v1[1];
    uint64_t v14 = v2;
    char v15 = v3;
    char v16 = v4;
    uint64_t v17 = v5;
    char v18 = v6;
    uint64_t v19 = v7;
    char v20 = v8;
    char v21 = v9;
    char v22 = v10;
    char v23 = v11;
    sub_1000647F4(1uLL);
    sub_100096E10();
  }

uint64_t sub_100079F30(__int128 *a1, __int128 *a2)
{
  __int16 v3 = v26[0];
  if (LOBYTE(v26[0]) == 2LL)
  {
    sub_10007FC80(a2, (uint64_t)v46);
    char v4 = LOBYTE(v46[0]) == 2LL;
  }

  else
  {
    double v5 = *(double *)&v26[1];
    char v6 = v27;
    char v7 = v28;
    uint64_t v8 = v29;
    char v9 = v30;
    uint64_t v10 = v31;
    char v11 = v32;
    char v12 = v33;
    char v14 = v35;
    char v15 = v34;
    sub_10007FC80(a2, (uint64_t)v16);
    if (LOBYTE(v16[0]) == 2LL)
    {
      char v4 = 0;
    }

    else
    {
      LOWORD(v36[0]) = v3 & 0xFF01;
      v36[1] = v5;
      char v37 = v6;
      char v38 = v7;
      uint64_t v39 = v8;
      char v40 = v9;
      uint64_t v41 = v10;
      char v42 = v11;
      char v43 = v12;
      char v44 = v15;
      char v45 = v14;
      LOWORD(v46[0]) = v16[0] & 0xFF01;
      v46[1] = *(double *)&v16[1];
      char v47 = v17;
      char v48 = v18;
      uint64_t v49 = v19;
      char v50 = v20;
      uint64_t v51 = v21;
      char v52 = v22;
      char v53 = v23;
      char v54 = v24;
      char v55 = v25;
      char v4 = sub_100096EF4(v36, v46);
    }
  }

  return v4 & 1;
}

Swift::Int sub_10007A0A8(uint64_t a1)
{
  if (v3[0] == 2LL)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    char v14 = v3[0] & 1;
    char v15 = v3[1];
    uint64_t v16 = v4;
    char v17 = v5;
    char v18 = v6;
    uint64_t v19 = v7;
    char v20 = v8;
    uint64_t v21 = v9;
    char v22 = v10;
    char v23 = v11;
    char v24 = v12;
    char v25 = v13;
    Hasher._combine(_:)(1uLL);
    sub_100096E10();
  }

  return sub_1000642C8();
}

void sub_10007A174(uint64_t a1)
{
  uint64_t v3 = sub_1000559FC();
  uint64_t v4 = sub_10006F3C4( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  sub_100064370();
}

uint64_t sub_10007A1E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for CachedServerDataSyncAttempt(0LL) + 20);
  return static Date.== infix(_:_:)(&a1[v4], &a2[v4]);
}

uint64_t sub_10007A238(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x72656767697274LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656767697274LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6572656767697274LL && a2 == 0xEB00000000744164LL)
  {
    swift_bridgeObjectRelease(0xEB00000000744164LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572656767697274LL, 0xEB00000000744164LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10007A33C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6572656767697274LL;
  }
  else {
    return 0x72656767697274LL;
  }
}

void sub_10007A37C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10005489C(&qword_1000F1038);
  sub_1000644DC();
  __chkstk_darwin(v6);
  sub_100054838(a1, a1[3]);
  unint64_t v7 = sub_10007D480();
  sub_100080FB8((uint64_t)&type metadata for CachedServerDataSyncAttempt.CodingKeys, v8, v7);
  char v12 = *v3;
  char v11 = 0;
  sub_10007D53C();
  sub_100080F14((uint64_t)&v12, (uint64_t)&v11, v5);
  if (!v2)
  {
    uint64_t v9 = (uint64_t)&v3[*(int *)(type metadata accessor for CachedServerDataSyncAttempt(0LL) + 20)];
    char v10 = 1;
    sub_1000559FC();
    sub_10006F3C4( &qword_1000F0508,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_100080F14(v9, (uint64_t)&v10, v5);
  }

  sub_100081084();
  sub_100064570();
}

void sub_10007A4A0(uint64_t a1)
{
  uint64_t v2 = sub_1000559FC();
  uint64_t v3 = sub_10006F3C4( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v4, v2, v3);
  sub_1000642C8();
  sub_100064218();
}

void sub_10007A514( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  char v30 = v29;
  uint64_t v47 = v31;
  uint64_t v46 = sub_1000559FC();
  uint64_t v44 = *(void *)(v46 - 8);
  sub_100055428();
  __chkstk_darwin(v32);
  sub_100081004(v33, v43);
  uint64_t v48 = sub_10005489C(&qword_1000F1020);
  sub_1000644DC();
  __chkstk_darwin(v34);
  sub_10006B0C8();
  uint64_t v35 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  sub_100055428();
  __chkstk_darwin(v36);
  sub_10005878C();
  uint64_t v39 = (_BYTE *)(v38 - v37);
  uint64_t v41 = v30[3];
  uint64_t v40 = v30[4];
  sub_100054838(v30, v41);
  unint64_t v42 = sub_10007D480();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CachedServerDataSyncAttempt.CodingKeys,  &type metadata for CachedServerDataSyncAttempt.CodingKeys,  v42,  v41,  v40);
  if (!v24)
  {
    a13 = 0;
    sub_10007D4BC();
    sub_1000810E4((uint64_t)&unk_1000D9C98, (uint64_t)&a13, v48, (uint64_t)&unk_1000D9C98);
    *uint64_t v39 = a14;
    a12 = 1;
    sub_10006F3C4( &qword_1000F04E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_1000810E4(v46, (uint64_t)&a12, v48, v46);
    sub_100055FDC(v25, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v44 + 32))(&v39[*(int *)(v35 + 20)], v45, v46);
    sub_10007D4F8((uint64_t)v39, v47);
  }

  sub_100054930(v30);
  sub_1000554F4();
}

uint64_t sub_10007A6FC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x80000001000ADAD0LL;
    if (a2 == 0x80000001000ADAD0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001000ADAD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x6970784561746164LL && a2 == 0xEB00000000646572LL)
  {
    unint64_t v7 = 0xEB00000000646572LL;
    goto LABEL_13;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6970784561746164LL, 0xEB00000000646572LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x6168436C61636F6CLL && a2 == 0xEB0000000065676ELL)
  {
    unint64_t v9 = 0xEB0000000065676ELL;
    goto LABEL_21;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6168436C61636F6CLL, 0xEB0000000065676ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2LL;
  }

  if (a1 == 0x4674736575716572LL && a2 == 0xED000064656C6961LL)
  {
    unint64_t v11 = 0xED000064656C6961LL;
    goto LABEL_29;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4674736575716572LL, 0xED000064656C6961LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3LL;
  }

  if (a1 == 0x70556D6574737973LL && a2 == 0xEC00000065746164LL)
  {
    unint64_t v13 = 0xEC00000065746164LL;
    goto LABEL_37;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70556D6574737973LL, 0xEC00000065746164LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4LL;
  }

  if (a1 == 0x676E696C6C6F70LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v15 = 0xE700000000000000LL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E696C6C6F70LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000001000ADAF0LL)
  {
    unint64_t v16 = 0x80000001000ADAF0LL;
LABEL_51:
    swift_bridgeObjectRelease(v16);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001000ADAF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_51;
  }

  if (a1 == 0x646563726F66LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v18 = 0xE600000000000000LL;
    goto LABEL_59;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646563726F66LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v18);
    return 7LL;
  }

  if (a1 == 0x6C6F486563616C70LL && a2 == 0xEB00000000726564LL)
  {
    unint64_t v20 = 0xEB00000000726564LL;
    goto LABEL_67;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F486563616C70LL, 0xEB00000000726564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v20);
    return 8LL;
  }

  if (a1 == 0x79536C61756E616DLL && a2 == 0xEA0000000000636ELL)
  {
    unint64_t v22 = 0xEA0000000000636ELL;
    goto LABEL_75;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79536C61756E616DLL, 0xEA0000000000636ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v22);
    return 9LL;
  }

  if (a1 == 0x41746E756F636361LL && a2 == 0xEB00000000687475LL)
  {
    swift_bridgeObjectRelease(0xEB00000000687475LL);
    return 10LL;
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x41746E756F636361LL, 0xEB00000000687475LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v24 & 1) != 0) {
      return 10LL;
    }
    else {
      return 11LL;
    }
  }

uint64_t sub_10007ABE4()
{
  return 11LL;
}

uint64_t sub_10007ABEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007AC24 + 4 * byte_1000A6480[a1]))( 0xD000000000000010LL,  0x80000001000ADAD0LL);
}

uint64_t sub_10007AC24()
{
  return 0x6970784561746164LL;
}

uint64_t sub_10007AC44()
{
  return 0x6168436C61636F6CLL;
}

uint64_t sub_10007AC64()
{
  return 0x4674736575716572LL;
}

uint64_t sub_10007AC88()
{
  return 0x70556D6574737973LL;
}

uint64_t sub_10007ACA8()
{
  return 0x676E696C6C6F70LL;
}

uint64_t sub_10007ACC0(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_10007ACD8()
{
  return 0x646563726F66LL;
}

uint64_t sub_10007ACEC()
{
  return 0x79536C61756E616DLL;
}

uint64_t sub_10007AD08()
{
  return 0x41746E756F636361LL;
}

uint64_t sub_10007AD28()
{
  return 0x6C6F486563616C70LL;
}

void sub_10007AD48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  char v50 = v22;
  char v24 = v23;
  sub_10005489C(&qword_1000F12A8);
  sub_100055428();
  __chkstk_darwin(v25);
  sub_100080F38(v26, v47);
  sub_10005489C(&qword_1000F12B0);
  sub_100055428();
  __chkstk_darwin(v27);
  sub_100080FE8(v28, v48);
  sub_10005489C(&qword_1000F12B8);
  sub_100055428();
  __chkstk_darwin(v29);
  sub_100055360();
  sub_100081140(v30);
  sub_10005489C(&qword_1000F12C0);
  sub_100055428();
  __chkstk_darwin(v31);
  sub_100055360();
  sub_10005489C(&qword_1000F12C8);
  sub_100055428();
  __chkstk_darwin(v32);
  sub_100055360();
  sub_10005489C(&qword_1000F12D0);
  sub_100055428();
  __chkstk_darwin(v33);
  sub_100055360();
  uint64_t v34 = sub_10005489C(&qword_1000F12D8);
  sub_1000810A0(v34, (uint64_t)&a18);
  sub_100055428();
  __chkstk_darwin(v35);
  sub_100055360();
  sub_100081140(v36);
  uint64_t v37 = sub_10005489C(&qword_1000F12E0);
  sub_1000810A0(v37, (uint64_t)&a15);
  sub_100055428();
  __chkstk_darwin(v38);
  sub_100055360();
  sub_100081140(v39);
  sub_10005489C(&qword_1000F12E8);
  sub_100055428();
  __chkstk_darwin(v40);
  sub_100055360();
  sub_100081140(v41);
  uint64_t v49 = sub_10005489C(&qword_1000F12F0);
  __chkstk_darwin(v49);
  sub_10005878C();
  uint64_t v42 = sub_10005489C(&qword_1000F12F8);
  __chkstk_darwin(v42);
  sub_100080F20();
  sub_10005489C(&qword_1000F1300);
  sub_100055428();
  __chkstk_darwin(v43);
  sub_10005878C();
  uint64_t v45 = v24[3];
  uint64_t v44 = v24[4];
  sub_100054838(v24, v45);
  unint64_t v46 = sub_10007F9B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CachedServerDataSyncTrigger.CodingKeys,  &type metadata for CachedServerDataSyncTrigger.CodingKeys,  v46,  v45,  v44);
  __asm { BR              X10 }

void sub_10007B024()
{
  *(_BYTE *)(v5 - 91) = 0;
  sub_10007FC44();
  sub_100080EC4((uint64_t)&type metadata for CachedServerDataSyncTrigger.PushNotificationCodingKeys, v5 - 91);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 136) + 8LL))(v1, v0);
  sub_1000554F4();
}

void sub_10007B224( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  sub_10005489C(&qword_1000F11E0);
  sub_100055428();
  __chkstk_darwin(v26);
  sub_100081020(v27, v70);
  sub_10005489C(&qword_1000F11E8);
  sub_100055428();
  __chkstk_darwin(v28);
  sub_100080F38(v29, v71);
  sub_10005489C(&qword_1000F11F0);
  sub_100055428();
  __chkstk_darwin(v30);
  sub_100081058(v31, v72);
  sub_10005489C(&qword_1000F11F8);
  sub_100055428();
  __chkstk_darwin(v32);
  sub_100080ED4(v33, v73);
  sub_10005489C(&qword_1000F1200);
  sub_100055428();
  __chkstk_darwin(v34);
  sub_10008103C(v35, v74);
  uint64_t v36 = sub_10005489C(&qword_1000F1208);
  sub_1000810A0(v36, (uint64_t)&a16);
  sub_100055428();
  __chkstk_darwin(v37);
  sub_100055360();
  uint64_t v38 = sub_10005489C(&qword_1000F1210);
  sub_1000810A0(v38, (uint64_t)&a14);
  sub_100055428();
  __chkstk_darwin(v39);
  sub_100080FCC(v40, v75);
  sub_10005489C(&qword_1000F1218);
  sub_100055428();
  __chkstk_darwin(v41);
  sub_100080FE8(v42, v76);
  uint64_t v43 = sub_10005489C(&qword_1000F1220);
  sub_1000810A0(v43, (uint64_t)&a10);
  sub_100055428();
  __chkstk_darwin(v44);
  sub_100055360();
  sub_10005489C(&qword_1000F1228);
  sub_100055428();
  __chkstk_darwin(v45);
  sub_100055360();
  uint64_t v46 = sub_10005489C(&qword_1000F1230);
  __chkstk_darwin(v46);
  sub_100055840();
  uint64_t v47 = sub_10005489C(&qword_1000F1238);
  uint64_t v48 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  sub_100080F20();
  uint64_t v50 = v25[3];
  uint64_t v49 = v25[4];
  sub_100054838(v25, v50);
  unint64_t v51 = sub_10007F9B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CachedServerDataSyncTrigger.CodingKeys,  &type metadata for CachedServerDataSyncTrigger.CodingKeys,  v51,  v50,  v49);
  if (v20)
  {
    char v52 = v25;
  }

  else
  {
    uint64_t v77 = v47;
    uint64_t v53 = KeyedDecodingContainer.allKeys.getter(v47);
    uint64_t v54 = *(void *)(v53 + 16);
    uint64_t v78 = v21;
    if (v54)
    {
      uint64_t v55 = *(unsigned __int8 *)(v53 + 32);
      uint64_t v56 = v53;
      sub_1000807EC(1LL, v54, v53, v53 + 32, 0LL, (2 * v54) | 1);
      uint64_t v58 = v57;
      unint64_t v60 = v59;
      swift_bridgeObjectRelease(v56);
      if (v58 == v60 >> 1) {
        __asm { BR              X9 }
      }

      char v52 = v25;
      uint64_t v61 = v77;
      uint64_t v62 = v48;
    }

    else
    {
      char v52 = v25;
      uint64_t v61 = v47;
      uint64_t v62 = v48;
    }

    uint64_t v63 = type metadata accessor for DecodingError(0LL);
    sub_100069C44(v63, (uint64_t)&protocol witness table for DecodingError);
    BOOL v65 = v64;
    sub_10005489C(&qword_1000F1248);
    *BOOL v65 = &unk_1000D9C98;
    uint64_t v66 = KeyedDecodingContainer.codingPath.getter(v61);
    uint64_t v68 = sub_100081074(v66, v67, 0x80000001000ADAA0LL);
    uint64_t v69 = sub_100080F9C(v68, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v69);
    sub_100081138();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v78, v61);
  }

  sub_100054930(v52);
  sub_1000554F4();
}

void sub_10007B6C0()
{
  if (!v2)
  {
    uint64_t v5 = sub_100080F64();
    v6(v5, *(void *)(v4 - 344));
    swift_unknownObjectRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
    JUMPOUT(0x10007B80CLL);
  }

  swift_unknownObjectRelease(v1);
  JUMPOUT(0x10007B94CLL);
}

void sub_10007B814()
{
  if (v1)
  {
    swift_unknownObjectRelease(v0);
    JUMPOUT(0x10007B94CLL);
  }

  JUMPOUT(0x10007B7ECLL);
}

void sub_10007B854()
{
  if (!v0)
  {
    uint64_t v2 = sub_100080F54();
    v3(v2, *(void *)(v1 - 248));
    JUMPOUT(0x10007B7F4LL);
  }

  JUMPOUT(0x10007B93CLL);
}

void sub_10007B884()
{
  uint64_t v4 = *(void *)(v3 - 360);
  sub_100080EB4((uint64_t)&type metadata for CachedServerDataSyncTrigger.PlaceHolderCodingKeys, v3 - 67, v4);
  if (v1)
  {
    swift_unknownObjectRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v4);
    JUMPOUT(0x10007B4D0LL);
  }

  uint64_t v5 = sub_100081094();
  v6(v5);
  swift_unknownObjectRelease(v0);
  JUMPOUT(0x10007B804LL);
}

void sub_10007B8D0()
{
  if (v1)
  {
    swift_unknownObjectRelease(v0);
    JUMPOUT(0x10007B94CLL);
  }

  JUMPOUT(0x10007B7ECLL);
}

void sub_10007B90C()
{
  if (v0) {
    JUMPOUT(0x10007B938LL);
  }
  JUMPOUT(0x10007B7ECLL);
}

uint64_t sub_10007B9D8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x647261646E617473LL && a2 == 0xEC000000636E7953LL)
  {
    unint64_t v5 = 0xEC000000636E7953LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x647261646E617473LL, 0xEC000000636E7953LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4974706D65747461LL && a2 == 0xEF746867696C666ELL)
  {
    unint64_t v8 = 0xEF746867696C666ELL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4974706D65747461LL, 0xEF746867696C666ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x526572756C696166LL && a2 == 0xEC00000079727465LL)
  {
    unint64_t v10 = 0xEC00000079727465LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x526572756C696166LL, 0xEC00000079727465LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x676E696C6C6F70LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v12 = 0xE700000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E696C6C6F70LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0x797469726F697270LL && a2 == 0xEC000000636E7953LL)
  {
    swift_bridgeObjectRelease(0xEC000000636E7953LL);
    return 4LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270LL, 0xEC000000636E7953LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10007BC4C()
{
  return 5LL;
}

uint64_t sub_10007BC54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007BC90 + 4 * byte_1000A64A1[a1]))( 0x647261646E617473LL,  0xEC000000636E7953LL);
}

uint64_t sub_10007BC90()
{
  return 0x4974706D65747461LL;
}

uint64_t sub_10007BCB4()
{
  return 0x526572756C696166LL;
}

uint64_t sub_10007BCD4()
{
  return 0x676E696C6C6F70LL;
}

uint64_t sub_10007BCEC()
{
  return 0x797469726F697270LL;
}

uint64_t sub_10007BD00(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t sub_10007BD1C()
{
  return 0LL;
}

void sub_10007BD28()
{
  char v18 = v0;
  uint64_t v2 = v1;
  sub_10005489C(&qword_1000F1498);
  sub_100055428();
  __chkstk_darwin(v3);
  sub_100080ED4(v4, v15);
  sub_10005489C(&qword_1000F14A0);
  sub_100055428();
  __chkstk_darwin(v5);
  sub_100081020(v6, v16);
  sub_10005489C(&qword_1000F14A8);
  sub_100055428();
  __chkstk_darwin(v7);
  sub_100080FCC(v8, v17);
  sub_10005489C(&qword_1000F14B0);
  sub_100055428();
  __chkstk_darwin(v9);
  sub_100080F20();
  uint64_t v10 = sub_10005489C(&qword_1000F14B8);
  __chkstk_darwin(v10);
  sub_100069C50();
  sub_10005489C(&qword_1000F14C0);
  sub_100055428();
  __chkstk_darwin(v11);
  sub_10005878C();
  uint64_t v13 = v2[3];
  uint64_t v12 = v2[4];
  sub_100054838(v2, v13);
  unint64_t v14 = sub_1000807B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CachedServerDataSyncReason.CodingKeys,  &type metadata for CachedServerDataSyncReason.CodingKeys,  v14,  v13,  v12);
  __asm { BR              X10 }

void sub_10007BEA0()
{
  *(_BYTE *)(v5 - sub_100080E84((uint64_t)&type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys, v2 - 69) = 0;
  sub_100080954();
  sub_100080EF0((uint64_t)&type metadata for CachedServerDataSyncReason.StandardSyncCodingKeys, v5 - 69);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 88) + 8LL))(v2, v1);
  sub_1000554F4();
}

void sub_10007BF9C()
{
  uint64_t v3 = v2;
  sub_10005489C(&qword_1000F1438);
  sub_100055428();
  __chkstk_darwin(v4);
  sub_100081004(v5, v33);
  sub_10005489C(&qword_1000F1440);
  sub_100055428();
  __chkstk_darwin(v6);
  sub_100081058(v7, v34);
  sub_10005489C(&qword_1000F1448);
  sub_100055428();
  __chkstk_darwin(v8);
  sub_100080ED4(v9, v35);
  sub_10005489C(&qword_1000F1450);
  sub_100055428();
  __chkstk_darwin(v10);
  sub_10008103C(v11, v36);
  uint64_t v12 = sub_10005489C(&qword_1000F1458);
  __chkstk_darwin(v12);
  sub_10006B0C8();
  uint64_t v13 = sub_10005489C(&qword_1000F1460);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100055840();
  uint64_t v15 = v3[3];
  uint64_t v16 = v3[4];
  sub_100054838(v3, v15);
  unint64_t v17 = sub_1000807B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CachedServerDataSyncReason.CodingKeys,  &type metadata for CachedServerDataSyncReason.CodingKeys,  v17,  v15,  v16);
  if (!v0)
  {
    uint64_t v38 = v14;
    uint64_t v37 = v1;
    uint64_t v18 = KeyedDecodingContainer.allKeys.getter(v13);
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)(v18 + 16);
    if (v20)
    {
      uint64_t v21 = *(unsigned __int8 *)(v18 + 32);
      sub_1000807EC(1LL, v20, v18, v18 + 32, 0LL, (2 * v20) | 1);
      uint64_t v23 = v22;
      unint64_t v25 = v24;
      swift_bridgeObjectRelease(v19);
      if (v23 == v25 >> 1) {
        __asm { BR              X9 }
      }
    }

    uint64_t v26 = type metadata accessor for DecodingError(0LL);
    sub_100069C44(v26, (uint64_t)&protocol witness table for DecodingError);
    uint64_t v28 = v27;
    sub_10005489C(&qword_1000F1248);
    *uint64_t v28 = &unk_1000D9FA8;
    uint64_t v29 = KeyedDecodingContainer.codingPath.getter(v13);
    uint64_t v31 = sub_100081074(v29, v30, 0x80000001000ADAA0LL);
    uint64_t v32 = sub_100080F9C(v31, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v32);
    sub_100081194();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v13);
  }

  sub_100054930(v3);
  sub_1000554F4();
}

void sub_10007C28C()
{
  if (!v1)
  {
    sub_100081094();
    JUMPOUT(0x10007C374LL);
  }

  sub_100081194();
  sub_100055FDC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  JUMPOUT(0x10007C274LL);
}

void sub_10007C2BC()
{
  if (!v1) {
    JUMPOUT(0x10007C2E8LL);
  }
  sub_100081194();
  sub_100055FDC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  JUMPOUT(0x10007C274LL);
}

void sub_10007C2F0()
{
  if (!v1)
  {
    (*(void (**)(uint64_t, void))(*(void *)(v4 - 160) + 8LL))(v3, *(void *)(v4 - 152));
    sub_100081194();
    sub_100055FDC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_100054930(*(void **)(v4 - 96));
    JUMPOUT(0x10007C278LL);
  }

  sub_100081194();
  sub_100055FDC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  JUMPOUT(0x10007C274LL);
}

void sub_10007C324()
{
  if (v0) {
    JUMPOUT(0x10007C34CLL);
  }
  JUMPOUT(0x10007C374LL);
}

uint64_t sub_10007C398(uint64_t a1)
{
  uint64_t v3 = sub_100055AE0();
  uint64_t v4 = sub_10006F3C4( (unint64_t *)&qword_1000F1EC0,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  uint64_t v5 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(0LL);
  uint64_t v6 = sub_1000559FC();
  uint64_t v7 = sub_10006F3C4( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  sub_1000647F4(*(unsigned __int8 *)(v1 + v5[6]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v5[7]));
  uint64_t v8 = (uint64_t *)(v1 + v5[8]);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v9, v10);
  return swift_bridgeObjectRelease(v10);
}

void sub_10007C484(uint64_t a1, uint64_t a2)
{
  if ((static AccountIdentity.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(0LL),
        (static Date.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && *(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6])
    && *(unsigned __int8 *)(a1 + v4[7]) == *(unsigned __int8 *)(a2 + v4[7])
    && ((uint64_t v5 = v4[8],
         uint64_t v6 = *(void *)(a1 + v5),
         uint64_t v7 = *(void *)(a1 + v5 + 8),
         uint64_t v8 = (void *)(a2 + v5),
         uint64_t v9 = v8[1],
         v6 == *v8)
      ? (BOOL v10 = v7 == v9)
      : (BOOL v10 = 0),
        !v10))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0LL);
  }

  else
  {
    sub_100064370();
  }

uint64_t sub_10007C534(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x49746E756F636361LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x636E79537478656ELL && a2 == 0xEA00000000007441LL)
  {
    unint64_t v8 = 0xEA00000000007441LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E79537478656ELL, 0xEA00000000007441LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x72656767697274LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v10 = 0xE700000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656767697274LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x6E6F73616572LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v12 = 0xE600000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0x44496B736174LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 4LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496B736174LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10007C750(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007C788 + 4 * byte_1000A64B0[a1]))( 0x49746E756F636361LL,  0xE900000000000044LL);
}

uint64_t sub_10007C788()
{
  return 0x636E79537478656ELL;
}

uint64_t sub_10007C7A4()
{
  return 0x72656767697274LL;
}

uint64_t sub_10007C7BC()
{
  return 0x6E6F73616572LL;
}

uint64_t sub_10007C7D0()
{
  return 0x44496B736174LL;
}

void sub_10007C7E4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10005489C(&qword_1000F1330);
  sub_1000644DC();
  __chkstk_darwin(v6);
  sub_100054838(a1, a1[3]);
  unint64_t v7 = sub_10007FCA0();
  sub_100080FB8((uint64_t)&type metadata for CachedServerDataSyncTaskSchedule.CodingKeys, v8, v7);
  LOBYTE(v14[0]) = 0;
  type metadata accessor for AccountIdentity(0LL);
  sub_10006F3C4( &qword_1000F1338,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
  sub_100080F14(v3, (uint64_t)v14, v5);
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(0LL);
    uint64_t v10 = v3 + v9[5];
    LOBYTE(v14[0]) = 1;
    sub_1000559FC();
    sub_10006F3C4( &qword_1000F0508,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_100080F14(v10, (uint64_t)v14, v5);
    LOBYTE(v14[0]) = *(_BYTE *)(v3 + v9[6]);
    char v15 = 2;
    sub_10007D53C();
    sub_100080F14((uint64_t)v14, (uint64_t)&v15, v5);
    LOBYTE(v14[0]) = *(_BYTE *)(v3 + v9[7]);
    char v15 = 3;
    sub_10007FDD0();
    sub_100080F14((uint64_t)v14, (uint64_t)&v15, v5);
    uint64_t v11 = (uint64_t *)(v3 + v9[8]);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    v14[0] = v13;
    v14[1] = v12;
    char v15 = 4;
    sub_10007FE0C();
    sub_100080F14((uint64_t)v14, (uint64_t)&v15, v5);
  }

  sub_100081084();
  sub_100064570();
}

void sub_10007C9DC(uint64_t a1)
{
}

void sub_10007CA04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v28 = v27;
  uint64_t v45 = v29;
  uint64_t v30 = sub_1000559FC();
  uint64_t v47 = *(void *)(v30 - 8);
  uint64_t v48 = v30;
  sub_100055428();
  __chkstk_darwin(v31);
  sub_100080F38(v32, v43);
  uint64_t v49 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v33 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  sub_100080ED4(v34, v44);
  uint64_t v51 = sub_10005489C(&qword_1000F1308);
  uint64_t v35 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  sub_100069C50();
  uint64_t v36 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(0LL);
  sub_100055428();
  __chkstk_darwin(v37);
  sub_100080F20();
  uint64_t v39 = v28[3];
  uint64_t v38 = v28[4];
  sub_100054838(v28, v39);
  unint64_t v40 = sub_10007FCA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys,  &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys,  v40,  v39,  v38);
  if (v23)
  {
    sub_100054930(v28);
  }

  else
  {
    LOBYTE(v52[0]) = 0;
    sub_10006F3C4( &qword_1000F1318,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
    sub_100080FB0(v49, (uint64_t)v52, v51, v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v24, v50, v49);
    LOBYTE(v52[0]) = 1;
    sub_10006F3C4( &qword_1000F04E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_100080FB0(v48, (uint64_t)v52, v51, v48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v24 + v36[5], v46, v48);
    a13 = 2;
    sub_10007D4BC();
    sub_100080FB0((uint64_t)&unk_1000D9C98, (uint64_t)&a13, v51, (uint64_t)&unk_1000D9C98);
    *(_BYTE *)(v24 + v36[6]) = v52[0];
    a13 = 3;
    sub_10007FCDC();
    sub_100080F74((uint64_t)&unk_1000D9FA8);
    *(_BYTE *)(v24 + v36[7]) = v52[0];
    a13 = 4;
    sub_10007FD18();
    sub_100080F74((uint64_t)&unk_1000DACA8);
    sub_1000810D8(v35);
    uint64_t v41 = v52[1];
    uint64_t v42 = (void *)(v24 + v36[8]);
    *uint64_t v42 = v52[0];
    v42[1] = v41;
    sub_10007FD54(v24, v45);
    sub_100054930(v28);
    sub_10007FD98(v24, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskSchedule);
  }

  sub_1000554F4();
}

Swift::Int sub_10007CD68()
{
  uint64_t v1 = sub_10007FC80(v0, (uint64_t)v3);
  return sub_10007A0A8(v1);
}

void sub_10007CD9C()
{
}

Swift::Int sub_10007CDD8()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  int v7 = *((_DWORD *)v0 + 12);
  Hasher.init(_seed:)(v9);
  if (v2 == 2LL)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    __int16 v10 = v2 & 0xFF01;
    uint64_t v11 = v1;
    __int16 v12 = v4 & 0xFF01;
    uint64_t v13 = v3;
    char v14 = v6 & 1;
    uint64_t v15 = v5;
    __int16 v16 = v7 & 0xFF01;
    char v17 = BYTE2(v7) & 1;
    char v18 = HIBYTE(v7) & 1;
    Hasher._combine(_:)(1uLL);
    sub_100096E10();
  }

  return Hasher._finalize()();
}

uint64_t sub_10007CEB8(__int128 *a1, __int128 *a2)
{
  return sub_100079F30(v4, v5) & 1;
}

uint64_t sub_10007CF00()
{
  return sub_10007A33C(*v0);
}

uint64_t sub_10007CF08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007A238(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007CF2C(uint64_t a1)
{
  unint64_t v2 = sub_10007D480();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007CF54(uint64_t a1)
{
  unint64_t v2 = sub_10007D480();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "10007CF84: call analysis failed (funcsize=5)"
void sub_10007CF90(void *a1)
{
  sub_10007A37C(a1);
}

Swift::Int sub_10007CFAC()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = sub_10006F3C4( &qword_1000F04C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10007D03C()
{
  return sub_10006F3C4( &qword_1000F1018,  type metadata accessor for CachedServerDataSyncAttempt,  (uint64_t)&unk_1000A6518);
}

uint64_t sub_10007D06C(uint64_t a1)
{
  unint64_t v2 = sub_10007F9EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D094(uint64_t a1)
{
  unint64_t v2 = sub_10007F9EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D0C0()
{
  return sub_10007ABEC(*v0);
}

uint64_t sub_10007D0C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007A6FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007D0EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10007ABE4();
  *a1 = result;
  return result;
}

uint64_t sub_10007D110(uint64_t a1)
{
  unint64_t v2 = sub_10007F9B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D138(uint64_t a1)
{
  unint64_t v2 = sub_10007F9B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D160(uint64_t a1)
{
  unint64_t v2 = sub_10007FC08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D188(uint64_t a1)
{
  unint64_t v2 = sub_10007FC08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D1B0(uint64_t a1)
{
  unint64_t v2 = sub_10007FAA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D1D8(uint64_t a1)
{
  unint64_t v2 = sub_10007FAA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D200(uint64_t a1)
{
  unint64_t v2 = sub_10007FBCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D228(uint64_t a1)
{
  unint64_t v2 = sub_10007FBCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D250(uint64_t a1)
{
  unint64_t v2 = sub_10007FA28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D278(uint64_t a1)
{
  unint64_t v2 = sub_10007FA28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D2A0(uint64_t a1)
{
  unint64_t v2 = sub_10007FA64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D2C8(uint64_t a1)
{
  unint64_t v2 = sub_10007FA64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D2F0(uint64_t a1)
{
  unint64_t v2 = sub_10007FB18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D318(uint64_t a1)
{
  unint64_t v2 = sub_10007FB18();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D340(uint64_t a1)
{
  unint64_t v2 = sub_10007FC44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D368(uint64_t a1)
{
  unint64_t v2 = sub_10007FC44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D390(uint64_t a1)
{
  unint64_t v2 = sub_10007FB90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D3B8(uint64_t a1)
{
  unint64_t v2 = sub_10007FB90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D3E0(uint64_t a1)
{
  unint64_t v2 = sub_10007FADC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D408(uint64_t a1)
{
  unint64_t v2 = sub_10007FADC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D430(uint64_t a1)
{
  unint64_t v2 = sub_10007FB54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D458(uint64_t a1)
{
  unint64_t v2 = sub_10007FB54();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10007D480()
{
  unint64_t result = qword_1000F1028;
  if (!qword_1000F1028)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A695C, &type metadata for CachedServerDataSyncAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1028);
  }

  return result;
}

unint64_t sub_10007D4BC()
{
  unint64_t result = qword_1000F1030;
  if (!qword_1000F1030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6934, &unk_1000D9C98);
    atomic_store(result, (unint64_t *)&qword_1000F1030);
  }

  return result;
}

uint64_t sub_10007D4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007D53C()
{
  unint64_t result = qword_1000F1040;
  if (!qword_1000F1040)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A690C, &unk_1000D9C98);
    atomic_store(result, (unint64_t *)&qword_1000F1040);
  }

  return result;
}

__n128 sub_10007D578(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10007D594(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && a1[52]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10007D5E8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 4_Block_object_dispose(&a9, 8) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 52) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 52) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 2;
    }
  }

  return result;
}

uint64_t sub_10007D638(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

double sub_10007D654(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(void *)(a1 + 40) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = 0u;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)a1 = a2 - 255;
  }

  else if (a2)
  {
    *(_BYTE *)a1 = a2 + 1;
  }

  return result;
}

void type metadata accessor for CachedServerDataSyncScheduleAction()
{
}

void *sub_10007D698(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for AccountIdentity(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    __int16 v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    uint64_t v13 = a3[8];
    char v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain(v16);
  }

  return a1;
}

uint64_t sub_10007D774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_10007D7E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + sub_100079ADC(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_10007D898(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_10007D960(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + sub_100079ADC(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = *(_BYTE *)(a2 + v11);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10007DA04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + sub_100079ADC(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_10007DAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007DAC4);
}

void sub_10007DAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
  }

  else
  {
    sub_1000559FC();
    sub_100080F8C();
    if (!v9)
    {
      sub_1000810B8(*(void *)(a1 + *(int *)(a3 + 32) + 8));
      sub_100064370();
      return;
    }

    uint64_t v7 = v10;
    uint64_t v8 = a1 + *(int *)(a3 + 20);
  }

  sub_100064300(v8, a2, v7);
}

uint64_t sub_10007DB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007DB40);
}

void sub_10007DB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (v10)
  {
    uint64_t v8 = v7;
    uint64_t v9 = a1;
  }

  else
  {
    sub_1000559FC();
    sub_100064684();
    if (!v10)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + _Block_object_dispose(&a9, 8) = (a2 - 1);
      sub_100064370();
      return;
    }

    uint64_t v8 = v11;
    uint64_t v9 = a1 + *(int *)(a4 + 20);
  }

  sub_1000642A8(v9, a2, a2, v8);
}

uint64_t type metadata accessor for CachedServerDataSyncTaskSchedule(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F10A0, (uint64_t)&nominal type descriptor for CachedServerDataSyncTaskSchedule);
}

uint64_t sub_10007DBCC(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccountIdentity(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      _OWORD v5[2] = &unk_1000A6500;
      __int128 v5[3] = &unk_1000A6628;
      v5[4] = &unk_1000A6640;
      swift_initStructMetadata(a1, 256LL, 5LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void *sub_10007DC6C(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for AccountIdentity(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *(void *)((char *)v4 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v15 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *(void *)((char *)v4 + v15) = *(void *)((char *)a2 + v15);
    uint64_t v16 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    uint64_t v17 = (char *)v4 + v16;
    char v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Date(0LL);
    if (sub_100054CA8((uint64_t)v18, 1LL, v19))
    {
      uint64_t v20 = sub_10005489C(&qword_1000F02A8);
      memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      sub_100054998((uint64_t)v17, 0LL, 1LL, v19);
    }

    uint64_t v22 = a3[14];
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    if (sub_100054CA8((uint64_t)a2 + v22, 1LL, v19))
    {
      uint64_t v25 = sub_10005489C(&qword_1000F02A8);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v23, v24, v19);
      sub_100054998((uint64_t)v23, 0LL, 1LL, v19);
    }

    uint64_t v26 = a3[15];
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    if (sub_100054CA8((uint64_t)a2 + v26, 1LL, v19))
    {
      uint64_t v29 = sub_10005489C(&qword_1000F02A8);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v27, v28, v19);
      sub_100054998((uint64_t)v27, 0LL, 1LL, v19);
    }

    uint64_t v30 = a3[16];
    uint64_t v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    if (sub_100054CA8((uint64_t)a2 + v30, 1LL, v19))
    {
      uint64_t v33 = sub_10005489C(&qword_1000F02A8);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v31, v32, v19);
      sub_100054998((uint64_t)v31, 0LL, 1LL, v19);
    }

    uint64_t v34 = a3[18];
    *(void *)((char *)v4 + a3[17]) = *(void *)((char *)a2 + a3[17]);
    uint64_t v35 = (char *)v4 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
    if (sub_100054CA8((uint64_t)v36, 1LL, v37))
    {
      uint64_t v38 = sub_10005489C(&qword_1000F02F0);
      memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      _BYTE *v35 = *v36;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 16LL))( &v35[*(int *)(v37 + 20)],  &v36[*(int *)(v37 + 20)],  v19);
      sub_100054998((uint64_t)v35, 0LL, 1LL, v37);
    }

    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  }

  return v4;
}

uint64_t sub_10007DFC4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + a2[13];
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = a1 + a2[14];
  uint64_t v9 = a1 + a2[15];
  uint64_t v10 = a1 + a2[16];
  uint64_t v11 = a1 + a2[18];
  uint64_t v12 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  uint64_t result = sub_100054CA8(v11, 1LL, v12);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v11 + *(int *)(v12 + 20), v7);
  }
  return result;
}

void *sub_10007E130(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  if (sub_100054CA8((uint64_t)v17, 1LL, v18))
  {
    uint64_t v19 = sub_10005489C(&qword_1000F02A8);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    sub_100054998((uint64_t)v16, 0LL, 1LL, v18);
  }

  uint64_t v20 = a3[14];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  if (sub_100054CA8((uint64_t)a2 + v20, 1LL, v18))
  {
    uint64_t v23 = sub_10005489C(&qword_1000F02A8);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v21, v22, v18);
    sub_100054998((uint64_t)v21, 0LL, 1LL, v18);
  }

  uint64_t v24 = a3[15];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  if (sub_100054CA8((uint64_t)a2 + v24, 1LL, v18))
  {
    uint64_t v27 = sub_10005489C(&qword_1000F02A8);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v25, v26, v18);
    sub_100054998((uint64_t)v25, 0LL, 1LL, v18);
  }

  uint64_t v28 = a3[16];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  if (sub_100054CA8((uint64_t)a2 + v28, 1LL, v18))
  {
    uint64_t v31 = sub_10005489C(&qword_1000F02A8);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v29, v30, v18);
    sub_100054998((uint64_t)v29, 0LL, 1LL, v18);
  }

  uint64_t v32 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  if (sub_100054CA8((uint64_t)v34, 1LL, v35))
  {
    uint64_t v36 = sub_10005489C(&qword_1000F02F0);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    _BYTE *v33 = *v34;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 16LL))( &v33[*(int *)(v35 + 20)],  &v34[*(int *)(v35 + 20)],  v18);
    sub_100054998((uint64_t)v33, 0LL, 1LL, v35);
  }

  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  return a1;
}

void *sub_10007E45C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v12 = a3[13];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  int v16 = sub_100054CA8((uint64_t)v13, 1LL, v15);
  int v17 = sub_100054CA8((uint64_t)v14, 1LL, v15);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
      sub_100054998((uint64_t)v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = sub_10005489C(&qword_1000F02A8);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = a3[14];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  int v23 = sub_100054CA8((uint64_t)a1 + v20, 1LL, v15);
  int v24 = sub_100054CA8((uint64_t)v22, 1LL, v15);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v21, v22, v15);
      sub_100054998((uint64_t)v21, 0LL, 1LL, v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v25 = *(void *)(v15 - 8);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v15);
LABEL_12:
    uint64_t v26 = sub_10005489C(&qword_1000F02A8);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v21, v22, v15);
LABEL_13:
  uint64_t v27 = a3[15];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  int v30 = sub_100054CA8((uint64_t)a1 + v27, 1LL, v15);
  int v31 = sub_100054CA8((uint64_t)v29, 1LL, v15);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v28, v29, v15);
      sub_100054998((uint64_t)v28, 0LL, 1LL, v15);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v32 = *(void *)(v15 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v15);
LABEL_18:
    uint64_t v33 = sub_10005489C(&qword_1000F02A8);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v28, v29, v15);
LABEL_19:
  uint64_t v34 = a3[16];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  int v37 = sub_100054CA8((uint64_t)a1 + v34, 1LL, v15);
  int v38 = sub_100054CA8((uint64_t)v36, 1LL, v15);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v35, v36, v15);
      sub_100054998((uint64_t)v35, 0LL, 1LL, v15);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  uint64_t v39 = *(void *)(v15 - 8);
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v15);
LABEL_24:
    uint64_t v40 = sub_10005489C(&qword_1000F02A8);
    memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v35, v36, v15);
LABEL_25:
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  uint64_t v41 = a3[18];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  int v45 = sub_100054CA8((uint64_t)v42, 1LL, v44);
  int v46 = sub_100054CA8((uint64_t)v43, 1LL, v44);
  if (!v45)
  {
    if (!v46)
    {
      *uint64_t v42 = *v43;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 24LL))( &v42[*(int *)(v44 + 20)],  &v43[*(int *)(v44 + 20)],  v15);
      goto LABEL_31;
    }

    sub_10007FD98((uint64_t)v42, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_30;
  }

  if (v46)
  {
LABEL_30:
    uint64_t v47 = sub_10005489C(&qword_1000F02F0);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_31;
  }

  *uint64_t v42 = *v43;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 16LL))( &v42[*(int *)(v44 + 20)],  &v43[*(int *)(v44 + 20)],  v15);
  sub_100054998((uint64_t)v42, 0LL, 1LL, v44);
LABEL_31:
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  return a1;
}

_OWORD *sub_10007E91C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + sub_100079ADC(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  if (sub_100054CA8((uint64_t)v15, 1LL, v16))
  {
    uint64_t v17 = sub_10005489C(&qword_1000F02A8);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
    sub_100054998((uint64_t)v14, 0LL, 1LL, v16);
  }

  uint64_t v18 = a3[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  if (sub_100054CA8((uint64_t)a2 + v18, 1LL, v16))
  {
    uint64_t v21 = sub_10005489C(&qword_1000F02A8);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v19, v20, v16);
    sub_100054998((uint64_t)v19, 0LL, 1LL, v16);
  }

  uint64_t v22 = a3[15];
  int v23 = (char *)a1 + v22;
  int v24 = (char *)a2 + v22;
  if (sub_100054CA8((uint64_t)a2 + v22, 1LL, v16))
  {
    uint64_t v25 = sub_10005489C(&qword_1000F02A8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v23, v24, v16);
    sub_100054998((uint64_t)v23, 0LL, 1LL, v16);
  }

  uint64_t v26 = a3[16];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  if (sub_100054CA8((uint64_t)a2 + v26, 1LL, v16))
  {
    uint64_t v29 = sub_10005489C(&qword_1000F02A8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v27, v28, v16);
    sub_100054998((uint64_t)v27, 0LL, 1LL, v16);
  }

  uint64_t v30 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  int v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  if (sub_100054CA8((uint64_t)v32, 1LL, v33))
  {
    uint64_t v34 = sub_10005489C(&qword_1000F02F0);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    _BYTE *v31 = *v32;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v16 - 8) + 32LL))( &v31[*(int *)(v33 + 20)],  &v32[*(int *)(v33 + 20)],  v16);
    sub_100054998((uint64_t)v31, 0LL, 1LL, v33);
  }

  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  return a1;
}

void *sub_10007EC3C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  int v19 = sub_100054CA8((uint64_t)v16, 1LL, v18);
  int v20 = sub_100054CA8((uint64_t)v17, 1LL, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
      sub_100054998((uint64_t)v16, 0LL, 1LL, v18);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v21 = *(void *)(v18 - 8);
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
LABEL_6:
    uint64_t v22 = sub_10005489C(&qword_1000F02A8);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
LABEL_7:
  uint64_t v23 = a3[14];
  int v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  int v26 = sub_100054CA8((uint64_t)a1 + v23, 1LL, v18);
  int v27 = sub_100054CA8((uint64_t)v25, 1LL, v18);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v24, v25, v18);
      sub_100054998((uint64_t)v24, 0LL, 1LL, v18);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v28 = *(void *)(v18 - 8);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v18);
LABEL_12:
    uint64_t v29 = sub_10005489C(&qword_1000F02A8);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v24, v25, v18);
LABEL_13:
  uint64_t v30 = a3[15];
  int v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  int v33 = sub_100054CA8((uint64_t)a1 + v30, 1LL, v18);
  int v34 = sub_100054CA8((uint64_t)v32, 1LL, v18);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v31, v32, v18);
      sub_100054998((uint64_t)v31, 0LL, 1LL, v18);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v35 = *(void *)(v18 - 8);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v18);
LABEL_18:
    uint64_t v36 = sub_10005489C(&qword_1000F02A8);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v31, v32, v18);
LABEL_19:
  uint64_t v37 = a3[16];
  int v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  int v40 = sub_100054CA8((uint64_t)a1 + v37, 1LL, v18);
  int v41 = sub_100054CA8((uint64_t)v39, 1LL, v18);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v38, v39, v18);
      sub_100054998((uint64_t)v38, 0LL, 1LL, v18);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  uint64_t v42 = *(void *)(v18 - 8);
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v18);
LABEL_24:
    uint64_t v43 = sub_10005489C(&qword_1000F02A8);
    memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v38, v39, v18);
LABEL_25:
  uint64_t v44 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  int v45 = (char *)a1 + v44;
  int v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  int v48 = sub_100054CA8((uint64_t)v45, 1LL, v47);
  int v49 = sub_100054CA8((uint64_t)v46, 1LL, v47);
  if (!v48)
  {
    if (!v49)
    {
      _BYTE *v45 = *v46;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 40LL))( &v45[*(int *)(v47 + 20)],  &v46[*(int *)(v47 + 20)],  v18);
      goto LABEL_31;
    }

    sub_10007FD98((uint64_t)v45, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_30;
  }

  if (v49)
  {
LABEL_30:
    uint64_t v50 = sub_10005489C(&qword_1000F02F0);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64LL));
    goto LABEL_31;
  }

  _BYTE *v45 = *v46;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 32LL))( &v45[*(int *)(v47 + 20)],  &v46[*(int *)(v47 + 20)],  v18);
  sub_100054998((uint64_t)v45, 0LL, 1LL, v47);
LABEL_31:
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  return a1;
}

uint64_t sub_10007F0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007F0E4);
}

void sub_10007F0E4(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000810B8(*(void *)(a1 + 8));
    sub_100064370();
  }

  else
  {
    sub_100055AE0();
    sub_100080F8C();
    if (v9)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a3[5];
    }

    else
    {
      sub_10005489C(&qword_1000F02A8);
      sub_100080F8C();
      if (v9)
      {
        uint64_t v7 = v10;
        uint64_t v8 = a3[13];
      }

      else
      {
        uint64_t v7 = sub_10005489C(&qword_1000F02F0);
        uint64_t v8 = a3[18];
      }
    }

    sub_100064300(a1 + v8, a2, v7);
  }

uint64_t sub_10007F178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007F184);
}

void sub_10007F184(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = (a2 - 1);
    sub_100064370();
  }

  else
  {
    sub_100055AE0();
    sub_100064684();
    if (v10)
    {
      uint64_t v8 = v7;
      uint64_t v9 = a4[5];
    }

    else
    {
      sub_10005489C(&qword_1000F02A8);
      sub_100064684();
      if (v10)
      {
        uint64_t v8 = v11;
        uint64_t v9 = a4[13];
      }

      else
      {
        uint64_t v8 = sub_10005489C(&qword_1000F02F0);
        uint64_t v9 = a4[18];
      }
    }

    sub_1000642A8(a1 + v9, a2, a2, v8);
  }

uint64_t type metadata accessor for CachedServerDataSyncTaskScheduleInput(uint64_t a1)
{
  return sub_100063CAC(a1, qword_1000F1140, (uint64_t)&nominal type descriptor for CachedServerDataSyncTaskScheduleInput);
}

void sub_10007F234(uint64_t a1)
{
  v8[0] = &unk_1000A6640;
  uint64_t v2 = type metadata accessor for AccountIdentity(319LL);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
    void v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[6] = &unk_1000A6500;
    v8[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[8] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10005A464(319LL, &qword_1000F0458, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = v9;
      uint64_t v11 = v9;
      uint64_t v12 = v9;
      uint64_t v13 = (char *)&value witness table for Builtin.Int64 + 64;
      sub_10005A464(319LL, (unint64_t *)&unk_1000F0460, type metadata accessor for CachedServerDataSyncAttempt);
      if (v7 <= 0x3F)
      {
        uint64_t v14 = *(void *)(v6 - 8) + 64LL;
        uint64_t v15 = &unk_1000A6688;
        swift_initStructMetadata(a1, 256LL, 16LL, v8, a1 + 16);
      }
    }
  }

uint64_t storeEnumTagSinglePayload for CachedServerDataSyncAttempt.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10007F37C + 4 * byte_1000A64BA[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007F3B0 + 4 * byte_1000A64B5[v4]))();
}

uint64_t sub_10007F3B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F3B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007F3C0LL);
  }
  return result;
}

uint64_t sub_10007F3CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007F3D4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10007F3D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F3E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncAttempt.CodingKeys()
{
  return &type metadata for CachedServerDataSyncAttempt.CodingKeys;
}

void type metadata accessor for CachedServerDataSyncTrigger()
{
}

unint64_t sub_10007F414()
{
  unint64_t result = qword_1000F11B0;
  if (!qword_1000F11B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A670C, &unk_1000D9C98);
    atomic_store(result, (unint64_t *)&qword_1000F11B0);
  }

  return result;
}

unint64_t sub_10007F454()
{
  unint64_t result = qword_1000F11B8;
  if (!qword_1000F11B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A67C4, &type metadata for CachedServerDataSyncAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F11B8);
  }

  return result;
}

#error "10007F4A0: call analysis failed (funcsize=10)"
#error "10007F4C4: call analysis failed (funcsize=6)"
uint64_t sub_10007F4D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v2 = sub_100080918();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F4F8(uint64_t a1)
{
  unint64_t v2 = sub_100080918();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007F520()
{
  return sub_10007BC54(*v0);
}

uint64_t sub_10007F528@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007B9D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007F54C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10007BC4C();
  *a1 = result;
  return result;
}

uint64_t sub_10007F570(uint64_t a1)
{
  unint64_t v2 = sub_1000807B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F598(uint64_t a1)
{
  unint64_t v2 = sub_1000807B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007F5C0(uint64_t a1)
{
  unint64_t v2 = sub_1000808DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F5E8(uint64_t a1)
{
  unint64_t v2 = sub_1000808DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007F610(uint64_t a1)
{
  unint64_t v2 = sub_1000808A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F638(uint64_t a1)
{
  unint64_t v2 = sub_1000808A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007F660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007BD00(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10007F688()
{
  return sub_10005C254();
}

uint64_t sub_10007F6A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100079A90();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10007F6C8(uint64_t a1)
{
  unint64_t v2 = sub_100080864();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F6F0(uint64_t a1)
{
  unint64_t v2 = sub_100080864();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007F718(uint64_t a1)
{
  unint64_t v2 = sub_100080954();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F740(uint64_t a1)
{
  unint64_t v2 = sub_100080954();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10007F768(_BYTE *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
}

void sub_10007F790()
{
}

void sub_10007F7A8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  sub_1000642C8();
  sub_100064218();
}

uint64_t sub_10007F7DC()
{
  return sub_10007C750(*v0);
}

uint64_t sub_10007F7E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007C534(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007F808(uint64_t a1)
{
  unint64_t v2 = sub_10007FCA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F830(uint64_t a1)
{
  unint64_t v2 = sub_10007FCA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10007F860()
{
  return Hasher._finalize()();
}

#error "10007F8A0: call analysis failed (funcsize=5)"
void sub_10007F8AC(void *a1)
{
  sub_10007C7E4(a1);
}

uint64_t sub_10007F8C4()
{
  return sub_10006F3C4( &qword_1000F11C0,  type metadata accessor for CachedServerDataSyncTaskSchedule,  (uint64_t)&unk_1000A67EC);
}

unint64_t sub_10007F8F4()
{
  unint64_t result = qword_1000F11C8;
  if (!qword_1000F11C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A68A4, &unk_1000D9B78);
    atomic_store(result, (unint64_t *)&qword_1000F11C8);
  }

  return result;
}

unint64_t sub_10007F934()
{
  unint64_t result = qword_1000F11D0;
  if (!qword_1000F11D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6734, &type metadata for CachedServerDataSyncAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F11D0);
  }

  return result;
}

unint64_t sub_10007F974()
{
  unint64_t result = qword_1000F11D8;
  if (!qword_1000F11D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A675C, &type metadata for CachedServerDataSyncAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F11D8);
  }

  return result;
}

unint64_t sub_10007F9B0()
{
  unint64_t result = qword_1000F1240;
  if (!qword_1000F1240)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7484, &type metadata for CachedServerDataSyncTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1240);
  }

  return result;
}

unint64_t sub_10007F9EC()
{
  unint64_t result = qword_1000F1250;
  if (!qword_1000F1250)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7434, &type metadata for CachedServerDataSyncTrigger.AccountAuthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1250);
  }

  return result;
}

unint64_t sub_10007FA28()
{
  unint64_t result = qword_1000F1258;
  if (!qword_1000F1258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A73E4, &type metadata for CachedServerDataSyncTrigger.ManualSyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1258);
  }

  return result;
}

unint64_t sub_10007FA64()
{
  unint64_t result = qword_1000F1260;
  if (!qword_1000F1260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7394, &type metadata for CachedServerDataSyncTrigger.PlaceHolderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1260);
  }

  return result;
}

unint64_t sub_10007FAA0()
{
  unint64_t result = qword_1000F1268;
  if (!qword_1000F1268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7344, &type metadata for CachedServerDataSyncTrigger.ForcedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1268);
  }

  return result;
}

unint64_t sub_10007FADC()
{
  unint64_t result = qword_1000F1270;
  if (!qword_1000F1270)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A72F4,  &type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1270);
  }

  return result;
}

unint64_t sub_10007FB18()
{
  unint64_t result = qword_1000F1278;
  if (!qword_1000F1278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A72A4, &type metadata for CachedServerDataSyncTrigger.PollingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1278);
  }

  return result;
}

unint64_t sub_10007FB54()
{
  unint64_t result = qword_1000F1280;
  if (!qword_1000F1280)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A7254,  &type metadata for CachedServerDataSyncTrigger.SystemUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1280);
  }

  return result;
}

unint64_t sub_10007FB90()
{
  unint64_t result = qword_1000F1288;
  if (!qword_1000F1288)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A7204,  &type metadata for CachedServerDataSyncTrigger.RequestFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1288);
  }

  return result;
}

unint64_t sub_10007FBCC()
{
  unint64_t result = qword_1000F1290;
  if (!qword_1000F1290)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A71B4, &type metadata for CachedServerDataSyncTrigger.LocalChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1290);
  }

  return result;
}

unint64_t sub_10007FC08()
{
  unint64_t result = qword_1000F1298;
  if (!qword_1000F1298)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7164, &type metadata for CachedServerDataSyncTrigger.DataExpiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1298);
  }

  return result;
}

unint64_t sub_10007FC44()
{
  unint64_t result = qword_1000F12A0;
  if (!qword_1000F12A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A7114,  &type metadata for CachedServerDataSyncTrigger.PushNotificationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F12A0);
  }

  return result;
}

uint64_t sub_10007FC80(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[2];
  *(_DWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = *((_DWORD *)a1 + 12);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_10007FCA0()
{
  unint64_t result = qword_1000F1310;
  if (!qword_1000F1310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A70C4, &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1310);
  }

  return result;
}

unint64_t sub_10007FCDC()
{
  unint64_t result = qword_1000F1320;
  if (!qword_1000F1320)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A709C, &unk_1000D9FA8);
    atomic_store(result, (unint64_t *)&qword_1000F1320);
  }

  return result;
}

unint64_t sub_10007FD18()
{
  unint64_t result = qword_1000F1328;
  if (!qword_1000F1328)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A81F4, &unk_1000DACA8);
    atomic_store(result, (unint64_t *)&qword_1000F1328);
  }

  return result;
}

uint64_t sub_10007FD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedServerDataSyncTaskSchedule(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007FD98(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = sub_100081094();
  v4(v3);
  return a1;
}

unint64_t sub_10007FDD0()
{
  unint64_t result = qword_1000F1340;
  if (!qword_1000F1340)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7074, &unk_1000D9FA8);
    atomic_store(result, (unint64_t *)&qword_1000F1340);
  }

  return result;
}

unint64_t sub_10007FE0C()
{
  unint64_t result = qword_1000F1348;
  if (!qword_1000F1348)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A81CC, &unk_1000DACA8);
    atomic_store(result, (unint64_t *)&qword_1000F1348);
  }

  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTaskSchedule.CodingKeys()
{
  return &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys;
}

uint64_t _s12amsaccountsd27CachedServerDataSyncTriggerO10CodingKeysOwet_0( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }

uint64_t _s12amsaccountsd27CachedServerDataSyncTriggerO10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_10007FF34 + 4 * byte_1000A64C4[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10007FF68 + 4 * byte_1000A64BF[v4]))();
}

uint64_t sub_10007FF68(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007FF70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007FF78LL);
  }
  return result;
}

uint64_t sub_10007FF84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007FF8CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_10007FF90(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007FF98(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.CodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.PushNotificationCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.PushNotificationCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.DataExpiredCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.DataExpiredCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.LocalChangeCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.LocalChangeCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.RequestFailedCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.RequestFailedCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.SystemUpdateCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.SystemUpdateCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.PollingCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.PollingCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.ForcedCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.ForcedCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.PlaceHolderCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.PlaceHolderCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.ManualSyncCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.ManualSyncCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.AccountAuthCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.AccountAuthCodingKeys;
}

void type metadata accessor for CachedServerDataSyncReason()
{
}

unint64_t sub_100080074()
{
  unint64_t result = qword_1000F1350;
  if (!qword_1000F1350)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6B6C, &unk_1000D9FA8);
    atomic_store(result, (unint64_t *)&qword_1000F1350);
  }

  return result;
}

unint64_t sub_1000800B4()
{
  unint64_t result = qword_1000F1358;
  if (!qword_1000F1358)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6F94, &type metadata for CachedServerDataSyncTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1358);
  }

  return result;
}

unint64_t sub_1000800F4()
{
  unint64_t result = qword_1000F1360;
  if (!qword_1000F1360)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A704C, &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1360);
  }

  return result;
}

unint64_t sub_100080134()
{
  unint64_t result = qword_1000F1368;
  if (!qword_1000F1368)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6FBC, &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1368);
  }

  return result;
}

unint64_t sub_100080174()
{
  unint64_t result = qword_1000F1370;
  if (!qword_1000F1370)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6FE4, &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1370);
  }

  return result;
}

unint64_t sub_1000801B4()
{
  unint64_t result = qword_1000F1378;
  if (!qword_1000F1378)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6EB4,  &type metadata for CachedServerDataSyncTrigger.PushNotificationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1378);
  }

  return result;
}

unint64_t sub_1000801F4()
{
  unint64_t result = qword_1000F1380;
  if (!qword_1000F1380)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6EDC,  &type metadata for CachedServerDataSyncTrigger.PushNotificationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1380);
  }

  return result;
}

unint64_t sub_100080234()
{
  unint64_t result = qword_1000F1388;
  if (!qword_1000F1388)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6E64, &type metadata for CachedServerDataSyncTrigger.DataExpiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1388);
  }

  return result;
}

unint64_t sub_100080274()
{
  unint64_t result = qword_1000F1390;
  if (!qword_1000F1390)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6E8C, &type metadata for CachedServerDataSyncTrigger.DataExpiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1390);
  }

  return result;
}

unint64_t sub_1000802B4()
{
  unint64_t result = qword_1000F1398;
  if (!qword_1000F1398)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6E14, &type metadata for CachedServerDataSyncTrigger.LocalChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1398);
  }

  return result;
}

unint64_t sub_1000802F4()
{
  unint64_t result = qword_1000F13A0;
  if (!qword_1000F13A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6E3C, &type metadata for CachedServerDataSyncTrigger.LocalChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13A0);
  }

  return result;
}

unint64_t sub_100080334()
{
  unint64_t result = qword_1000F13A8;
  if (!qword_1000F13A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6DC4,  &type metadata for CachedServerDataSyncTrigger.RequestFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13A8);
  }

  return result;
}

unint64_t sub_100080374()
{
  unint64_t result = qword_1000F13B0;
  if (!qword_1000F13B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6DEC,  &type metadata for CachedServerDataSyncTrigger.RequestFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13B0);
  }

  return result;
}

unint64_t sub_1000803B4()
{
  unint64_t result = qword_1000F13B8;
  if (!qword_1000F13B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6D74,  &type metadata for CachedServerDataSyncTrigger.SystemUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13B8);
  }

  return result;
}

unint64_t sub_1000803F4()
{
  unint64_t result = qword_1000F13C0;
  if (!qword_1000F13C0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6D9C,  &type metadata for CachedServerDataSyncTrigger.SystemUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13C0);
  }

  return result;
}

unint64_t sub_100080434()
{
  unint64_t result = qword_1000F13C8;
  if (!qword_1000F13C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6D24, &type metadata for CachedServerDataSyncTrigger.PollingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13C8);
  }

  return result;
}

unint64_t sub_100080474()
{
  unint64_t result = qword_1000F13D0;
  if (!qword_1000F13D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6D4C, &type metadata for CachedServerDataSyncTrigger.PollingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13D0);
  }

  return result;
}

unint64_t sub_1000804B4()
{
  unint64_t result = qword_1000F13D8;
  if (!qword_1000F13D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6CD4,  &type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13D8);
  }

  return result;
}

unint64_t sub_1000804F4()
{
  unint64_t result = qword_1000F13E0;
  if (!qword_1000F13E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A6CFC,  &type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13E0);
  }

  return result;
}

unint64_t sub_100080534()
{
  unint64_t result = qword_1000F13E8;
  if (!qword_1000F13E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6C84, &type metadata for CachedServerDataSyncTrigger.ForcedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13E8);
  }

  return result;
}

unint64_t sub_100080574()
{
  unint64_t result = qword_1000F13F0;
  if (!qword_1000F13F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6CAC, &type metadata for CachedServerDataSyncTrigger.ForcedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13F0);
  }

  return result;
}

unint64_t sub_1000805B4()
{
  unint64_t result = qword_1000F13F8;
  if (!qword_1000F13F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6C34, &type metadata for CachedServerDataSyncTrigger.PlaceHolderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F13F8);
  }

  return result;
}

unint64_t sub_1000805F4()
{
  unint64_t result = qword_1000F1400;
  if (!qword_1000F1400)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6C5C, &type metadata for CachedServerDataSyncTrigger.PlaceHolderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1400);
  }

  return result;
}

unint64_t sub_100080634()
{
  unint64_t result = qword_1000F1408;
  if (!qword_1000F1408)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6BE4, &type metadata for CachedServerDataSyncTrigger.ManualSyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1408);
  }

  return result;
}

unint64_t sub_100080674()
{
  unint64_t result = qword_1000F1410;
  if (!qword_1000F1410)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6C0C, &type metadata for CachedServerDataSyncTrigger.ManualSyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1410);
  }

  return result;
}

unint64_t sub_1000806B4()
{
  unint64_t result = qword_1000F1418;
  if (!qword_1000F1418)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6B94, &type metadata for CachedServerDataSyncTrigger.AccountAuthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1418);
  }

  return result;
}

unint64_t sub_1000806F4()
{
  unint64_t result = qword_1000F1420;
  if (!qword_1000F1420)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6BBC, &type metadata for CachedServerDataSyncTrigger.AccountAuthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1420);
  }

  return result;
}

unint64_t sub_100080734()
{
  unint64_t result = qword_1000F1428;
  if (!qword_1000F1428)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6F04, &type metadata for CachedServerDataSyncTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1428);
  }

  return result;
}

unint64_t sub_100080774()
{
  unint64_t result = qword_1000F1430;
  if (!qword_1000F1430)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A6F2C, &type metadata for CachedServerDataSyncTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1430);
  }

  return result;
}

unint64_t sub_1000807B0()
{
  unint64_t result = qword_1000F1468;
  if (!qword_1000F1468)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7930, &type metadata for CachedServerDataSyncReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1468);
  }

  return result;
}

uint64_t sub_1000807EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100080864()
{
  unint64_t result = qword_1000F1470;
  if (!qword_1000F1470)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A78E0, &type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1470);
  }

  return result;
}

unint64_t sub_1000808A0()
{
  unint64_t result = qword_1000F1478;
  if (!qword_1000F1478)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7890, &type metadata for CachedServerDataSyncReason.PollingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1478);
  }

  return result;
}

unint64_t sub_1000808DC()
{
  unint64_t result = qword_1000F1480;
  if (!qword_1000F1480)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7840, &type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1480);
  }

  return result;
}

unint64_t sub_100080918()
{
  unint64_t result = qword_1000F1488;
  if (!qword_1000F1488)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A77F0,  &type metadata for CachedServerDataSyncReason.AttemptInflightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1488);
  }

  return result;
}

unint64_t sub_100080954()
{
  unint64_t result = qword_1000F1490;
  if (!qword_1000F1490)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A77A0, &type metadata for CachedServerDataSyncReason.StandardSyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1490);
  }

  return result;
}

uint64_t _s12amsaccountsd32CachedServerDataSyncTaskScheduleV10CodingKeysOwet_0( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t _s12amsaccountsd32CachedServerDataSyncTaskScheduleV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100080A64 + 4 * byte_1000A64CE[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100080A98 + 4 * byte_1000A64C9[v4]))();
}

uint64_t sub_100080A98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100080AA8LL);
  }
  return result;
}

uint64_t sub_100080AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100080ABCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100080AC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080AC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.CodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.CodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.StandardSyncCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.StandardSyncCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.AttemptInflightCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.AttemptInflightCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.FailureRetryCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.PollingCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.PollingCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.PrioritySyncCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys;
}

unint64_t sub_100080B38()
{
  unint64_t result = qword_1000F14C8;
  if (!qword_1000F14C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7778, &type metadata for CachedServerDataSyncReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14C8);
  }

  return result;
}

unint64_t sub_100080B78()
{
  unint64_t result = qword_1000F14D0;
  if (!qword_1000F14D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7698, &type metadata for CachedServerDataSyncReason.StandardSyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14D0);
  }

  return result;
}

unint64_t sub_100080BB8()
{
  unint64_t result = qword_1000F14D8;
  if (!qword_1000F14D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A76C0, &type metadata for CachedServerDataSyncReason.StandardSyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14D8);
  }

  return result;
}

unint64_t sub_100080BF8()
{
  unint64_t result = qword_1000F14E0;
  if (!qword_1000F14E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A7648,  &type metadata for CachedServerDataSyncReason.AttemptInflightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14E0);
  }

  return result;
}

unint64_t sub_100080C38()
{
  unint64_t result = qword_1000F14E8;
  if (!qword_1000F14E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000A7670,  &type metadata for CachedServerDataSyncReason.AttemptInflightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14E8);
  }

  return result;
}

unint64_t sub_100080C78()
{
  unint64_t result = qword_1000F14F0;
  if (!qword_1000F14F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A75F8, &type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14F0);
  }

  return result;
}

unint64_t sub_100080CB8()
{
  unint64_t result = qword_1000F14F8;
  if (!qword_1000F14F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7620, &type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F14F8);
  }

  return result;
}

unint64_t sub_100080CF8()
{
  unint64_t result = qword_1000F1500;
  if (!qword_1000F1500)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A75A8, &type metadata for CachedServerDataSyncReason.PollingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1500);
  }

  return result;
}

unint64_t sub_100080D38()
{
  unint64_t result = qword_1000F1508;
  if (!qword_1000F1508)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A75D0, &type metadata for CachedServerDataSyncReason.PollingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1508);
  }

  return result;
}

unint64_t sub_100080D78()
{
  unint64_t result = qword_1000F1510;
  if (!qword_1000F1510)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7558, &type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1510);
  }

  return result;
}

unint64_t sub_100080DB8()
{
  unint64_t result = qword_1000F1518;
  if (!qword_1000F1518)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7580, &type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1518);
  }

  return result;
}

unint64_t sub_100080DF8()
{
  unint64_t result = qword_1000F1520;
  if (!qword_1000F1520)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A76E8, &type metadata for CachedServerDataSyncReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1520);
  }

  return result;
}

unint64_t sub_100080E38()
{
  unint64_t result = qword_1000F1528;
  if (!qword_1000F1528)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7710, &type metadata for CachedServerDataSyncReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1528);
  }

  return result;
}

uint64_t sub_100080E84(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 360), a1);
}

uint64_t sub_100080EA0(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 120), a1);
}

uint64_t sub_100080EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_100080EC4(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 120), a1);
}

void sub_100080ED4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 12_Block_object_dispose(&a9, 8) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100080EF0(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_100080F00(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_100080F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3);
}

  ;
}

void sub_100080F38(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100080F54()
{
  return v0;
}

uint64_t sub_100080F64()
{
  return v0;
}

uint64_t sub_100080F74(uint64_t a1)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v1 - 65, *(void *)(v1 - 120), a1);
}

  ;
}

uint64_t sub_100080F9C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

uint64_t sub_100080FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_100080FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_100080FCC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_100080FE8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_100081004(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_100081020(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_10008103C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_100081058(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100081074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(a1, 0xD00000000000002BLL, a3, 0LL);
}

uint64_t sub_100081084()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100081094()
{
  return v0;
}

uint64_t sub_1000810A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

unint64_t sub_1000810AC()
{
  *(_BYTE *)(v0 - sub_100080E84((uint64_t)&type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys, v2 - 69) = 6;
  return sub_10007FADC();
}

uint64_t sub_1000810B8@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

unint64_t sub_1000810CC()
{
  *(_BYTE *)(v0 - 70) = 5;
  return sub_10007FB18();
}

uint64_t sub_1000810D8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(v1 - 112), *(void *)(v1 - 120));
}

uint64_t sub_1000810E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

unint64_t sub_1000810F0()
{
  *(_BYTE *)(v0 - 71) = 4;
  return sub_10007FB54();
}

unint64_t sub_1000810FC()
{
  *(_BYTE *)(v0 - sub_100080F00((uint64_t)&type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys, v1 - 65) = 4;
  return sub_100080864();
}

unint64_t sub_100081108()
{
  *(_BYTE *)(v0 - sub_100080E84((uint64_t)&type metadata for CachedServerDataSyncTrigger.DataExpiredCodingKeys, v4 - 90) = 1;
  return sub_10007FC08();
}

unint64_t sub_100081114()
{
  *(_BYTE *)(v0 - 6_Block_object_dispose(&a9, 8) = 1;
  return sub_100080918();
}

unint64_t sub_100081120()
{
  *(_BYTE *)(v0 - sub_100080F00((uint64_t)&type metadata for CachedServerDataSyncReason.PollingCodingKeys, v4 - 66) = 3;
  return sub_1000808A0();
}

unint64_t sub_10008112C()
{
  *(_BYTE *)(v0 - 72) = 3;
  return sub_10007FB90();
}

uint64_t sub_100081138()
{
  return swift_unknownObjectRelease(v0);
}

void sub_100081140(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

unint64_t sub_10008114C()
{
  *(_BYTE *)(v0 - 89) = 2;
  return sub_10007FBCC();
}

unint64_t sub_100081158()
{
  *(_BYTE *)(v0 - sub_100080F00((uint64_t)&type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys, v3 - 67) = 2;
  return sub_1000808DC();
}

unint64_t sub_100081164()
{
  *(_BYTE *)(v0 - sub_100080F00((uint64_t)&type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys, v3 - 67) = 8;
  return sub_10007FA64();
}

unint64_t sub_100081170()
{
  *(_BYTE *)(v0 - sub_100080F00((uint64_t)&type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys, v1 - 65) = 10;
  return sub_10007F9EC();
}

unint64_t sub_10008117C()
{
  *(_BYTE *)(v0 - sub_100080F00((uint64_t)&type metadata for CachedServerDataSyncReason.PollingCodingKeys, v4 - 66) = 9;
  return sub_10007FA28();
}

unint64_t sub_100081188()
{
  *(_BYTE *)(v0 - 6_Block_object_dispose(&a9, 8) = 7;
  return sub_10007FAA0();
}

uint64_t sub_100081194()
{
  return swift_unknownObjectRelease(v0);
}

id sub_10008119C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [(id)swift_getObjCClassFromMetadata(v4) bagForProfile:v7 profileVersion:v8];

  return v9;
}

uint64_t sub_10008122C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000899FC();
  uint64_t v7 = sub_100054CA8(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100089274(v7, &qword_1000F0300);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  if (v15 | v13)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    void v18[2] = v13;
    v18[3] = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
}

id sub_10008134C(uint64_t a1)
{
  id v13 = 0LL;
  id v2 =  [(id)objc_opt_self(NSJSONSerialization) dataWithJSONObject:a1 options:0 error:&v13];
  id v3 = v13;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v6 = v5;

    uint64_t v7 = type metadata accessor for JSONDecoder(0LL);
    sub_100089964(v7);
    uint64_t v8 = JSONDecoder.init()();
    unint64_t v9 = sub_100088D88();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v13,  &type metadata for AccountDataNetworkingBag,  v4,  v6,  &type metadata for AccountDataNetworkingBag,  v9);
    sub_10006846C(v4, v6);
    id result = (id)swift_release(v8);
    if (!v1) {
      return v13;
    }
  }

  else
  {
    uint64_t v11 = v3;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow(v12);
  }

  return result;
}

uint64_t sub_100081480@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&v17[0] = 0LL;
  id v4 =  [(id)objc_opt_self(NSJSONSerialization) dataWithJSONObject:a1 options:0 error:v17];
  id v5 = *(id *)&v17[0];
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v8 = v7;

    uint64_t v9 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    uint64_t v10 = JSONDecoder.init()();
    unint64_t v11 = sub_100087E64();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v17, &unk_1000D96F8, v6, v8, &unk_1000D96F8, v11);
    sub_10006846C(v6, v8);
    uint64_t result = swift_release(v10);
    if (!v2)
    {
      __int128 v13 = v17[1];
      __int128 v14 = v17[2];
      *a2 = v17[0];
      a2[1] = v13;
      a2[2] = v14;
    }
  }

  else
  {
    uint64_t v15 = v5;
    _convertNSErrorToError(_:)(v5);

    return swift_willThrow(v16);
  }

  return result;
}

void sub_1000815D4()
{
  uint64_t v23 = v1;
  uint64_t v2 = sub_100089114();
  uint64_t v24 = sub_100064354();
  uint64_t v22 = *(void *)(v24 - 8);
  sub_100055428();
  __chkstk_darwin(v3);
  id v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100055D18();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000895CC();
  uint64_t v8 = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v9 = *(void *)(sub_100055858() - 8);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 2LL * *(void *)(v9 + 72),
          *(unsigned __int8 *)(v9 + 80) | 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1000A4950;
  uint64_t v25 = v2;
  v28[3] = v2;
  v28[0] = v0;
  id v21 = v0;
  id v12 = (id)AMSLogKey(v21, v11);
  if (v12)
  {
    __int128 v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  static LogInterpolation.prefix(_:_:)(v28, v14, v16);
  sub_1000708A4();
  sub_100054930(v28);
  sub_100055620(0xD000000000000015LL);
  Log.default(_:)(v10);
  sub_100055694();
  sub_1000898F4((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  uint64_t v17 = sub_1000898EC(28LL, 0x80000001000ADF40LL);
  AccountIdentity.dsid.getter(v17);
  sub_100083F7C();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v24);
  if (v27)
  {
    sub_10006F5F8(&v26, (uint64_t)v28);
    uint64_t v18 = sub_10005489C(&qword_1000F0CE8);
    uint64_t v19 = sub_100089544(v18, 72LL);
    *(_OWORD *)(v19 + 16) = xmmword_1000A4BE0;
    sub_10005485C((uint64_t)v28, v19 + 32);
    sub_100085D70();
    sub_10005547C();
    sub_100054930(v28);
  }

  else
  {
    sub_100066CD0((uint64_t)&v26, &qword_1000F1698);
  }

  sub_1000894C0(28LL, 0x80000001000ADF40LL);
  sub_1000642E8();
}

uint64_t sub_10008183C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000899FC();
  sub_100089880(v7, v8, v9, v7);
  uint64_t v10 = (void *)sub_100089544((uint64_t)&unk_1000DA1D0, 48LL);
  _OWORD v10[2] = 0LL;
  v10[3] = 0LL;
  void v10[4] = a1;
  v10[5] = a2;
  uint64_t v11 = (void *)sub_100089544((uint64_t)&unk_1000DA1F8, 48LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  void v11[4] = &unk_1000F1668;
  void v11[5] = v10;
  uint64_t v12 = sub_100087764((uint64_t)v6, (uint64_t)&unk_1000F1678, (uint64_t)v11);
  return swift_release(v12);
}

id sub_1000818FC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CachedServerDataService()) init];
  qword_1000F8D58 = (uint64_t)result;
  return result;
}

id sub_100081928()
{
  if (qword_1000F00B0 != -1) {
    swift_once(&qword_1000F00B0, sub_1000818FC);
  }
  return (id)qword_1000F8D58;
}

id sub_10008197C()
{
  uint64_t v40 = v2;
  uint64_t v41 = v3;
  uint64_t v4 = (objc_class *)sub_100089114();
  uint64_t v5 = sub_100055D18();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AccountDataCollection();
  uint64_t v10 = swift_allocObject(v9, 120LL, 15LL);
  uint64_t v11 = v0;
  ((void (*)(uint64_t))swift_defaultActor_initialize)(v10);
  uint64_t v12 = sub_100055AE0();
  uint64_t v13 = type metadata accessor for AccountDataAccessActor(0LL);
  unint64_t v14 = sub_100088508();
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v12, v13, v14);
  *(void *)(v10 + 112) = v15;
  *(void *)&v11[OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_accountDataActors] = v10;
  sub_100077EEC(v15, &qword_1000F1648, &OBJC_CLASS___AMSBag_ptr);
  uint64_t v16 = sub_10008964C();
  id v20 = sub_10008119C(v16, v17, v18, v19);
  *(void *)&v11[OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_bag] = v20;
  uint64_t v21 = type metadata accessor for MetricsOnInternalBuilds();
  uint64_t v22 = sub_100089544(v21, 32LL);
  *(void *)(v22 + 16) = v20;
  *(void *)(v22 + 24) =  [(id)objc_opt_self(AMSMetrics) internalInstanceUsingBag:v20];
  uint64_t v23 = (uint64_t *)&v11[OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics];
  v23[3] = v21;
  void v23[4] = (uint64_t)&off_1000DA720;
  uint64_t *v23 = v22;

  v39.receiver = v11;
  v39.super_class = v4;
  id v24 = objc_msgSendSuper2(&v39, "init");
  static Log.accountsDataSync.getter(v24);
  uint64_t v25 = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v26 = *(void *)(*(void *)(sub_100055858() - 8) + 72LL);
  sub_10008981C();
  uint64_t v28 = swift_allocObject(v25, v1 + 2 * v26, v27 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_1000A4950;
  v38[3] = v4;
  v38[0] = v24;
  id v29 = v24;
  id v31 = (id)AMSLogKey(v29, v30);
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v35 = v34;
  }

  else
  {
    uint64_t v33 = 0LL;
    uint64_t v35 = 0LL;
  }

  static LogInterpolation.prefix(_:_:)(v38, v33, v35);
  sub_1000573CC();
  sub_100054930(v38);
  sub_100055F28();
  sub_100055D20(34LL, v36);
  Log.default(_:)(v28);
  sub_100055948();

  sub_100089970((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  return v29;
}

uint64_t sub_100081C14(uint64_t a1)
{
  v2[40] = a1;
  v2[41] = v1;
  v2[42] = sub_100089114();
  uint64_t v3 = sub_100055AE0();
  v2[43] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[44] = v4;
  v2[45] = sub_100055374(v4);
  uint64_t v5 = sub_1000559FC();
  v2[46] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[47] = v6;
  v2[48] = sub_100055374(v6);
  uint64_t v7 = type metadata accessor for AccountDataState(0LL);
  v2[49] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[50] = v8;
  v2[51] = sub_1000893F8(v8);
  v2[52] = sub_100089644();
  uint64_t v9 = sub_100055D18();
  v2[53] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[54] = v10;
  v2[55] = sub_1000893F8(v10);
  v2[56] = sub_100089644();
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100081CBC()
{
  uint64_t v2 = *(void **)(v0 + 328);
  uint64_t v1 = *(void **)(v0 + 336);
  static Log.accountsDataSync.getter(v3);
  *(void *)(v0 + 456) = sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v4 = *(void *)(sub_100055858() - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  *(void *)(v0 + 464) = v5;
  LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 560) = v4;
  uint64_t v6 = sub_100055F7C( ((v4 + 32LL) & ~(unint64_t)v4) + 3 * v5,  v4);
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v2;
  *(_OWORD *)(v6 + 16) = xmmword_1000A4930;
  *(void *)(v0 + 272) = v1;
  id v7 = v2;
  id v9 = (id)AMSLogKey(v7, v8);
  if (v9)
  {
    sub_100056234((uint64_t)v9);
    sub_100089950();
  }

  else
  {
    sub_1000561F8();
  }

  uint64_t v10 = *(void *)(v0 + 448);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v22 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 320);
  sub_100055960(v0 + 248);
  sub_100055694();
  sub_100054930((void *)(v0 + 248));
  sub_100055620(0xD000000000000024LL);
  *(void *)(v0 + 176) = sub_10005489C(&qword_1000F16D8);
  *(void *)(v0 + 152) = v11;
  swift_bridgeObjectRetain(v11);
  uint64_t v12 = sub_100055928();
  sub_100089274(v12, &qword_1000F1E60);
  Log.default(_:)(v6);
  sub_10005547C();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  *(void *)(v0 + 472) = v13;
  v13(v10, v22);
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  uint64_t v14 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 328);
  sub_1000898EC(16LL, 0x80000001000ADEE0LL);
  unint64_t v17 = sub_100088508();
  *(void *)(v0 + 480) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v15, v14, v17);
  uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_bag);
  uint64_t v19 = (void *)swift_task_alloc(dword_1000F16B4);
  *(void *)(v0 + 48_Block_object_dispose(&a9, 8) = v19;
  void *v19 = v0;
  v19[1] = sub_100081EE0;
  return sub_1000828E0(v0 + 64, v18);
}

uint64_t sub_100081EE0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 488);
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v2 + 480));
  }
  sub_100068590();
  return sub_100055354();
}

uint64_t sub_100081F40()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 504) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 480);
    *(void *)(v0 + 520) = 0LL;
    *(void *)(v0 + 512) = v3;
    uint64_t v4 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    sub_10005485C(v4, v0 + 112);
    uint64_t v5 = (void *)swift_task_alloc(dword_1000F16AC);
    *(void *)(v0 + 52_Block_object_dispose(&a9, 8) = v5;
    void *v5 = v0;
    v5[1] = sub_100082044;
    return sub_100082A00(v0 + 112);
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 480);
    uint64_t v8 = *(void *)(v0 + 384);
    sub_10008911C((uint64_t)"accountDataFetch");
    sub_10005566C();
    sub_10005562C();
    sub_10005575C();
    sub_100055870();
    swift_task_dealloc(v8);
    sub_1000560A4();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }

uint64_t sub_100082044(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 528LL);
  v3[67] = a1;
  v3[68] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[40]);
    sub_1000573CC();
  }

  sub_100068590();
  return sub_100055354();
}

uint64_t sub_1000820B8(uint64_t a1)
{
  return sub_1000552CC();
}

#error "100082118: call analysis failed (funcsize=31)"
void sub_100082170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(uint64_t, void *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  sub_100077CE0();
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = sub_100054838((void *)(v0 + 112), *(void *)(v0 + 136));
  uint64_t v8 = *(void (**)(uint64_t, void *, uint64_t))(v5 + 16);
  v8(v4, v7, v6);
  sub_100088548(v2, v3, type metadata accessor for AccountDataState);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(void *)(v0 + 312) = v1;
  uint64_t v10 = sub_10008DA88(v4);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = (v11 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v15 = v10;
  uint64_t v16 = v11;
  sub_10005489C(&qword_1000F16F8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14))
  {
    unint64_t v17 = sub_10008DA88(*(void *)(v0 + 360));
    if ((v16 & 1) != (v18 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(void *)(v0 + 344));
      return;
    }

    uint64_t v15 = v17;
  }

  uint64_t v19 = *(void **)(v0 + 312);
  uint64_t v21 = *(void *)(v0 + 400);
  id v20 = *(void *)(v0 + 408);
  if ((v16 & 1) != 0)
  {
    sub_10008857C(*(void *)(v0 + 408), v19[7] + *(void *)(v21 + 72) * v15);
    goto LABEL_10;
  }

  uint64_t v23 = *(void *)(v0 + 352);
  uint64_t v22 = *(void **)(v0 + 360);
  id v24 = *(void *)(v0 + 344);
  v19[(v15 >> 6) + 8] |= 1LL << v15;
  v8(v19[6] + *(void *)(v23 + 72) * v15, v22, v24);
  sub_100088CF4(v20, v19[7] + *(void *)(v21 + 72) * v15, type metadata accessor for AccountDataState);
  uint64_t v25 = v19[2];
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_14:
    __break(1u);
    return;
  }

  v19[2] = v27;
  uint64_t v19 = *(void **)(v0 + 312);
LABEL_10:
  uint64_t v28 = *(void *)(v0 + 536);
  id v29 = *(void *)(v0 + 520);
  uint64_t v30 = *(void *)(v0 + 504);
  id v31 = *(void *)(v0 + 416);
  uint64_t v33 = *(void *)(v0 + 352);
  uint64_t v32 = *(void *)(v0 + 360);
  sub_100077BA0();
  sub_1000898F4(v32, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  swift_release(v28);
  sub_100066C94(v31);
  sub_100054930((void *)(v0 + 112));
  if (v29 + 1 == v30)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 320));
    uint64_t v34 = *(void *)(v0 + 384);
    sub_10008911C((uint64_t)"accountDataFetch");
    sub_100055558();
    sub_10005562C();
    sub_10005575C();
    sub_100055870();
    swift_task_dealloc(v34);
    sub_1000560A4();
    sub_1000896D4((uint64_t)v19, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v35 = *(void *)(v0 + 520) + 1LL;
    *(void *)(v0 + 520) = v35;
    *(void *)(v0 + 512) = v19;
    sub_10005485C(*(void *)(v0 + 320) + 40 * v35 + 32, v0 + 112);
    uint64_t v36 = (void *)swift_task_alloc(dword_1000F16AC);
    *(void *)(v0 + 52_Block_object_dispose(&a9, 8) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_100082044;
    uint64_t v37 = sub_100089708();
    sub_100082A00(v37);
  }

#error "1000824D4: call analysis failed (funcsize=93)"
#error "100082668: call analysis failed (funcsize=95)"
#error "100082804: call analysis failed (funcsize=97)"
uint64_t sub_1000828E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return sub_100089240((uint64_t)sub_1000828F4, 0LL);
}

uint64_t sub_1000828F4()
{
  *(void *)(v0 + 80) = sub_100078CF0();
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F0DE4);
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v1;
  void *v1 = v0;
  v1[1] = sub_100082948;
  uint64_t v2 = sub_100089708();
  return sub_100076884(v2);
}

uint64_t sub_100082948(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = a1;
  swift_task_dealloc(v2);
  sub_1000573CC();
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_10008299C()
{
  uint64_t v1 = *(void **)(v0 + 96);
  sub_100081480((uint64_t)v1, (_OWORD *)(v0 + 16));

  uint64_t v2 = *(_OWORD **)(v0 + 64);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  v2[1] = *(_OWORD *)(v0 + 32);
  v2[2] = v4;
  _OWORD *v2 = v3;
  uint64_t v5 = (uint64_t (*)(void))sub_100056158();
  return sub_100089264(v5);
}

uint64_t sub_100082A00(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100089240((uint64_t)sub_100082A14, 0LL);
}

uint64_t sub_100082A14()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_accountDataActors);
  uint64_t v2 = OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics;
  v0[4] = v1;
  v0[5] = v2;
  return sub_100089240((uint64_t)sub_100082A3C, v1);
}

uint64_t sub_100082A3C()
{
  uint64_t v1 = sub_1000873A0(*(void **)(v0 + 16), *(void *)(v0 + 24) + *(void *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100082A90(char a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v4 + 409) = a3;
  *(void *)(v4 + 240) = a2;
  *(void *)(v4 + 24_Block_object_dispose(&a9, 8) = v3;
  *(_BYTE *)(v4 + 40_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v4 + 256) = sub_100089114();
  uint64_t v5 = sub_1000559FC();
  *(void *)(v4 + 264) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 272) = v6;
  *(void *)(v4 + 280) = sub_100055374(v6);
  uint64_t v7 = sub_100055AE0();
  *(void *)(v4 + 28_Block_object_dispose(&a9, 8) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 296) = v8;
  *(void *)(v4 + 304) = sub_100055374(v8);
  uint64_t v9 = sub_100055F10();
  *(void *)(v4 + 312) = sub_100055374(*(void *)(v9 - 8));
  uint64_t v10 = sub_100055D18();
  *(void *)(v4 + 320) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v4 + 32_Block_object_dispose(&a9, 8) = v11;
  *(void *)(v4 + 336) = sub_100055374(v11);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100082B24(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = (void *)v1[31];
  uint64_t v5 = v1[32];
  static Log.accountsDataSync.getter(a1);
  sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100089020();
  sub_10008982C();
  uint64_t v9 = sub_100055F7C(v2 + 3 * v7, v8);
  v1[14] = v6;
  uint64_t v10 = v1 + 14;
  uint64_t v27 = (uint64_t)(v10 + 8);
  id v29 = v10 + 12;
  *(_OWORD *)(v9 + 16) = xmmword_1000A4930;
  v10[3] = v5;
  id v11 = v6;
  id v13 = (id)AMSLogKey(v11, v12);
  if (v13)
  {
    uint64_t v14 = sub_1000557E0((uint64_t)v13);
    sub_100089948();
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v3 = 0LL;
  }

  uint64_t v28 = v4[41];
  uint64_t v25 = v4[36];
  uint64_t v26 = v4[37];
  char v24 = *((_BYTE *)v4 + 409);
  uint64_t v15 = (void *)v4[30];
  char v16 = v4[51] & 1;
  static LogInterpolation.prefix(_:_:)(v10, v14, v3);
  sub_100055694();
  sub_100054930(v10);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(25LL, 2LL);
  v17._countAndFlagsBits = 0x20676E6974746553LL;
  v17._object = (void *)0xE800000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v17);
  v4[21] = &unk_1000D8C00;
  *((_BYTE *)v4 + 144) = v16;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v10 + 4);
  sub_1000899B8((uint64_t)(v10 + 4));
  v18._countAndFlagsBits = 544175136LL;
  v18._object = (void *)0xE400000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v18);
  v4[25] = &type metadata for Bool;
  *((_BYTE *)v4 + 176) = v24;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v27);
  sub_1000899B8(v27);
  sub_100089130();
  sub_1000895F8();
  uint64_t v19 = sub_100054838(v15, v15[3]);
  v4[29] = v25;
  sub_100088424(v29);
  id v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  v4[43] = v20;
  sub_100066E28(v21, (uint64_t)v19, v20);
  static LogInterpolation.traceableSensitive(_:)(v29);
  sub_1000899B8((uint64_t)v29);
  Log.default(_:)(v9);
  sub_10005547C();
  sub_10008961C(v28);
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  sub_1000898EC(22LL, 0x80000001000AE0A0LL);
  uint64_t v22 = (void *)swift_task_alloc(dword_1000F16AC);
  v4[44] = v22;
  void *v22 = v4;
  v22[1] = sub_100082DC4;
  return sub_100082A00(v4[30]);
}

uint64_t sub_100082DC4(uint64_t a1)
{
  return sub_1000552CC();
}

uint64_t sub_100082E00()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F16B4);
  *(void *)(v0 + 376) = v1;
  uint64_t v2 = sub_1000893BC(v1);
  return sub_100089154(v2, v3);
}

uint64_t sub_100082E50()
{
  return sub_1000552CC();
}

uint64_t sub_100082E8C()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, void *, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  char v4 = *(_BYTE *)(v0 + 408);
  uint64_t v5 = sub_100054838(*(void **)(v0 + 240), *(void *)(*(void *)(v0 + 240) + 24LL));
  uint64_t v6 = v1(v2, v5, v3);
  static Date.now.getter(v6);
  uint64_t v7 = (void *)swift_task_alloc(dword_1000F011C);
  *(void *)(v0 + 392) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100082F34;
  return sub_100050E48(v4 & 1, *(void *)(v0 + 304), *(_BYTE *)(v0 + 409), v0 + 64, *(void *)(v0 + 280));
}

uint64_t sub_100082F34()
{
  uint64_t v3 = v2[49];
  *char v4 = *v1;
  v2[50] = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[37];
  sub_100089700(v2[34]);
  sub_10008952C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_100068590();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_100082FB0()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return v1();
}

#error "1000830F4: call analysis failed (funcsize=60)"
#error "1000831FC: call analysis failed (funcsize=62)"
#error "100083304: call analysis failed (funcsize=62)"
uint64_t sub_100083338(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  v2[22] = a1;
  v2[23] = v1;
  v2[24] = sub_100089114();
  uint64_t v3 = sub_1000559FC();
  v2[25] = v3;
  char v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = sub_100055374(v4);
  uint64_t v5 = sub_100055D18();
  v2[28] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[29] = v6;
  v2[30] = sub_100055374(v6);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_10008339C()
{
  uint64_t v2 = (void *)v0[23];
  uint64_t v1 = v0[24];
  static Log.accountsDataSync.getter(v3);
  sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v4 = *(void *)(sub_100089020() - 8);
  uint64_t v5 = sub_100055F7C( ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + 3LL * *(void *)(v4 + 72),
         *(unsigned __int8 *)(v4 + 80));
  v0[14] = v2;
  *(_OWORD *)(v5 + 16) = xmmword_1000A4930;
  v0[17] = v1;
  id v6 = v2;
  id v8 = (id)AMSLogKey(v6, v7);
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    sub_100089950();
  }

  else
  {
    sub_1000561F8();
  }

  uint64_t v17 = v0[29];
  sub_100055960((uint64_t)(v0 + 14));
  sub_100055694();
  sub_100054930(v0 + 14);
  sub_100055F28();
  sub_100055D20(46LL, v10);
  uint64_t v11 = sub_10008947C();
  sub_10008980C(v11);
  sub_100089468(v12);
  uint64_t v13 = sub_100055928();
  sub_100089274(v13, &qword_1000F1E60);
  Log.default(_:)(v5);
  sub_10005547C();
  sub_1000561B8(v17);
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  sub_100089444();
  uint64_t v14 = (void *)swift_task_alloc(dword_1000F16AC);
  v0[31] = v14;
  uint64_t v15 = sub_10008989C(v14, (uint64_t)sub_100083514);
  return sub_100088EA8(v15);
}

uint64_t sub_100083514(uint64_t a1)
{
  return sub_1000552CC();
}

uint64_t sub_100083550()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F16B4);
  *(void *)(v0 + 272) = v1;
  uint64_t v2 = sub_1000893BC(v1);
  return sub_100089154(v2, v3);
}

uint64_t sub_1000835A0()
{
  return sub_1000552CC();
}

uint64_t sub_1000835DC()
{
  return sub_1000552CC();
}

uint64_t sub_100083608()
{
  *(void *)(v1 + 28_Block_object_dispose(&a9, 8) = v0;
  sub_100089700(*(void *)(v1 + 208));
  sub_100068590();
  return sub_100088EFC(v2, v3, v4);
}

uint64_t sub_100083664()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return sub_100089264(v1);
}

uint64_t sub_1000836AC(uint64_t a1)
{
  v2[30] = a1;
  v2[31] = v1;
  v2[32] = sub_100089114();
  uint64_t v3 = sub_10005489C(&qword_1000F0958);
  v2[33] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[34] = v4;
  v2[35] = sub_1000893F8(v4);
  v2[36] = sub_100089644();
  uint64_t v5 = sub_100055AE0();
  v2[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[38] = v6;
  v2[39] = sub_100055374(v6);
  uint64_t v7 = sub_100064354();
  v2[40] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[41] = v8;
  v2[42] = sub_100055374(v8);
  uint64_t v9 = sub_100055D18();
  v2[43] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[44] = v10;
  v2[45] = sub_100055374(v10);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100083750(uint64_t a1)
{
  uint64_t v3 = (void *)v1[31];
  uint64_t v2 = v1[32];
  static Log.accountsDataSync.getter(a1);
  sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v4 = sub_100089020();
  uint64_t v5 = sub_100055F7C( ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL));
  v1[22] = v3;
  uint64_t v6 = (char *)(v1 + 22);
  *(_OWORD *)(v5 + 16) = xmmword_1000A4930;
  v1[25] = v2;
  id v7 = v3;
  id v9 = (id)AMSLogKey(v7, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  }

  else
  {
    sub_1000896AC();
  }

  uint64_t v74 = v1[44];
  uint64_t v77 = v1[33];
  uint64_t v79 = v1[37];
  unint64_t v11 = v1[30];
  sub_100089234((uint64_t)(v1 + 22));
  sub_100055868();
  sub_100089A04();
  sub_100055620(0xD00000000000002BLL);
  v1[29] = sub_10005489C(&qword_1000F17A8);
  v1[26] = v11;
  swift_bridgeObjectRetain(v11);
  uint64_t v12 = sub_100055928();
  sub_100089274(v12, &qword_1000F1E60);
  Log.default(_:)(v5);
  sub_10005547C();
  sub_1000899C8(v74);
  unint64_t v13 = sub_100088508();
  uint64_t v68 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v79, v77, v13);
  id v14 = (id)v1[30];
  if (v11 >> 62) {
    goto LABEL_33;
  }
  uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  for (uint64_t i = swift_bridgeObjectRetain(v14); v15; uint64_t i = v1[30])
  {
    uint64_t v17 = 0LL;
    Swift::String v18 = (__int128 *)(v6 - 120);
    uint64_t v75 = (uint64_t)(v6 - 80);
    uint64_t v76 = v6 - 160;
    uint64_t v66 = v1[38];
    uint64_t v67 = (__int128 *)(v6 - 40);
    uint64_t v71 = v1[41];
    unint64_t v72 = v11 & 0xC000000000000001LL;
    id v80 = _swiftEmptyArrayStorage;
    sub_1000587B8();
    uint64_t v65 = v19;
    sub_1000587B8();
    uint64_t v64 = v20;
    uint64_t v69 = v15;
    uint64_t v70 = (__int128 *)(v6 - 120);
    while (1)
    {
      id v14 = v72
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v1[30])
          : *(id *)(v65 + 8 * v17);
      uint64_t v6 = (char *)(v17 + 1);
      if (__OFADD__(v17, 1LL)) {
        break;
      }
      uint64_t v21 = v1[42];
      uint64_t v22 = v1[40];
      uint64_t v23 = v14;
      id v24 = objc_msgSend(v14, "dsid", v64);
      id v25 = [v24 unsignedLongLongValue];

      AccountIdentity.DSID.init(_:)(v25);
      sub_100083F7C();
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v21, v22);
      uint64_t v78 = v17 + 1;
      if (v1[10])
      {
        uint64_t v73 = v23;
        sub_10006F5F8(v18, (uint64_t)v76);
        sub_10005485C((uint64_t)v76, v75);
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
        {
          sub_10006E150(0, v80[2] + 1LL, 1, (uint64_t)v80);
          id v80 = v58;
        }

        unint64_t v27 = v80[2];
        unint64_t v26 = v80[3];
        if (v27 >= v26 >> 1)
        {
          sub_10006E150(v26 > 1, v27 + 1, 1, (uint64_t)v80);
          uint64_t v28 = v59;
        }

        else
        {
          uint64_t v28 = v80;
        }

        uint64_t v29 = v1[15];
        uint64_t v30 = sub_100088CCC(v75, v29);
        unint64_t v11 = *(void *)(v29 - 8);
        uint64_t v31 = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
        sub_100066E28(v31, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
        v1[20] = sub_1000708BC();
        v1[21] = &off_1000D9450;
        sub_100088424(v67);
        sub_100088CF4(v31, v32, type metadata accessor for AMPAccount);
        v28[2] = v27 + 1;
        id v80 = v28;
        sub_10006F5F8(v67, (uint64_t)&v28[5 * v27 + 4]);
        sub_100089A04();
        sub_1000560A4();

        sub_100054930(v76);
      }

      else
      {
        uint64_t v33 = v1[39];
        uint64_t v34 = v1[35];
        uint64_t v35 = (unint64_t *)v1[36];
        uint64_t v36 = v1[33];
        sub_100066CD0((uint64_t)v18, &qword_1000F1698);
        uint64_t v6 = v23;
        AccountIdentity.init(amsAccountID:)();
        NSString v37 = String._bridgeToObjectiveC()();
        NSString v38 = String._bridgeToObjectiveC()();
        unint64_t v11 = (unint64_t)(id)AMSError(7LL, v37, v38, 0LL);

        unint64_t *v35 = v11;
        swift_storeEnumTagMultiPayload(v35, v36, 1LL);
        sub_100088D5C((uint64_t)v35, v34, &qword_1000F0958);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
        id v14 = (id)sub_10008DA88(v33);
        uint64_t v41 = *(void *)(v68 + 16);
        BOOL v42 = (v40 & 1) == 0;
        Swift::Int v43 = v41 + v42;
        if (__OFADD__(v41, v42)) {
          goto LABEL_31;
        }
        unint64_t v44 = (unint64_t)v14;
        char v45 = v40;
        sub_10005489C(&qword_1000F17B0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43))
        {
          unint64_t v46 = sub_10008DA88(v1[39]);
          if ((v45 & 1) != (v47 & 1)) {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v1[37]);
          }
          unint64_t v44 = v46;
        }

        if ((v45 & 1) != 0)
        {
          sub_100089904();
          sub_100088C84(v48, v49);
        }

        else
        {
          uint64_t v50 = v1[39];
          uint64_t v51 = v1[37];
          uint64_t v52 = v1[35];
          *(void *)(v68 + 8 * (v44 >> 6) + 64) |= 1LL << v44;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 16))( *(void *)(v68 + 48) + *(void *)(v66 + 72) * v44,  v50,  v51);
          sub_100089904();
          sub_100088D5C(v52, v53, &qword_1000F0958);
          uint64_t v54 = *(void *)(v68 + 16);
          BOOL v55 = __OFADD__(v54, 1LL);
          uint64_t v56 = v54 + 1;
          if (v55) {
            goto LABEL_32;
          }
          *(void *)(v68 + 16) = v56;
        }

        uint64_t v57 = v1[39];
        sub_100077BA0();
        sub_100089970(v57, *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8));
      }

      Swift::String v18 = v70;
      ++v17;
      if (v78 == v69)
      {
        uint64_t i = v1[30];
        goto LABEL_38;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    else {
      uint64_t v61 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v61);
  }

  id v80 = _swiftEmptyArrayStorage;
LABEL_38:
  v1[46] = v68;
  v1[47] = v80;
  swift_bridgeObjectRelease(i);
  sub_100064818();
  uint64_t v62 = (void *)sub_100089644();
  v1[48] = v62;
  *uint64_t v62 = v1;
  v62[1] = sub_100083DA8;
  uint64_t v63 = sub_100089708();
  return sub_100081C14(v63);
}

uint64_t sub_100083DA8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 384);
  *(void *)(*v2 + 392) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 376);
  if (v1)
  {
    swift_bridgeObjectRelease_n(v6, 2LL);
    sub_1000573CC();
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    *(void *)(v4 + 400) = a1;
  }

  sub_100068590();
  return sub_100088EFC(v7, v8, v9);
}

uint64_t sub_100083E28()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 368);
  sub_100087F14(*(void *)(v0 + 400));
  uint64_t v4 = v3;
  sub_1000573CC();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  uint64_t v11 = v2;
  sub_100087930(v4, (uint64_t)sub_1000882F0, 0LL, isUniquelyReferenced_nonNull_native, &v11);
  if (v1) {
    return swift_bridgeObjectRelease(0x8000000000000000LL);
  }
  uint64_t v7 = v11;
  sub_100077BA0();
  uint64_t v8 = sub_1000573CC();
  sub_100077EEC(v8, &qword_1000F17B8, &OBJC_CLASS___AMSAccountCachedServerDataResponse_ptr);
  sub_100064FD4(v7);
  uint64_t v10 = v9;
  sub_100055558();
  sub_10005566C();
  sub_10005562C();
  sub_10005575C();
  sub_100055870();
  return sub_1000896D4(v10, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100083F24()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100083F7C()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100055D18();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100064660();
  sub_10006FA04(v3, (uint64_t)&v21);
  if (v22)
  {
    sub_100089614(&v21);
  }

  else
  {
    sub_100066CD0((uint64_t)&v21, &qword_1000F1698);
    static Log.accountsDataSync.getter(v8);
    sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v20 = v7;
    uint64_t v9 = *(void *)(*(void *)(sub_100055858() - 8) + 72LL);
    sub_10008982C();
    uint64_t v11 = sub_100089928(v1 + 3 * v9, v10);
    *(_OWORD *)(v11 + 16) = xmmword_1000A4930;
    id v14 = (id)AMSSetLogKeyIfNeeded(v11, v12, v13);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    static LogInterpolation.prefix<A>(_:_:)(v0, v15, v17, v0);
    sub_1000708A4();
    sub_100055D20(33LL, 0x80000001000ADDB0LL);
    uint64_t v18 = sub_100064354();
    uint64_t v22 = v18;
    sub_100088424(&v21);
    sub_100066E28(v19, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL));
    static LogInterpolation.traceableSensitive(_:)(&v21);
    sub_100066CD0((uint64_t)&v21, &qword_1000F1E60);
    Log.error(_:)(v11);
    sub_1000556B4();
    sub_1000897D4(v20);
    *(void *)(v5 + 32) = 0LL;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
  }

  sub_1000642E8();
}

uint64_t sub_100084120(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = sub_100054B08(0LL, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v6);
  v3[4] = v7;
  uint64_t v8 = dword_1000F17A4;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000841C0;
  return sub_1000836AC(v7);
}

uint64_t sub_1000841C0()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_10008969C();
  uint64_t v6 = (void *)v2[2];
  uint64_t v7 = *v1;
  sub_1000894C8(v2[5], v8);

  sub_10005547C();
  uint64_t v9 = (void (**)(void, void, void))v2[3];
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    sub_10005570C();
    v11();
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_100084274(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 28_Block_object_dispose(&a9, 8) = a2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v2;
  *(void *)(v3 + 20_Block_object_dispose(&a9, 8) = sub_100089114();
  uint64_t v4 = sub_100064354();
  *(void *)(v3 + 216) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 224) = v5;
  *(void *)(v3 + 232) = sub_100055374(v5);
  uint64_t v6 = sub_100055F10();
  *(void *)(v3 + 240) = sub_100055374(*(void *)(v6 - 8));
  uint64_t v7 = sub_100055D18();
  *(void *)(v3 + 24_Block_object_dispose(&a9, 8) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 256) = v8;
  *(void *)(v3 + 264) = sub_100055374(v8);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_1000842EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20 = *(void *)(sub_100089020() - 8);
  __int128 v21 = (__n128 *)sub_100055F7C( ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
                  + 3LL * *(void *)(v20 + 72),
                    *(unsigned __int8 *)(v20 + 80));
  v18[12] = v19;
  id v22 = sub_100089420(v21, (__n128)xmmword_1000A4930);
  id v24 = (id)AMSLogKey(v22, v23);
  if (v24)
  {
    sub_1000557E0((uint64_t)v24);
    sub_100089948();
  }

  else
  {
    sub_1000561F8();
  }

  sub_1000890CC();
  sub_100055694();
  sub_100054930(v18 + 12);
  sub_1000557F8(40LL);
  sub_1000898E4(27LL, 0x80000001000AE0C0LL);
  sub_100089860((uint64_t)&type metadata for Bool);
  sub_100089804(v17);
  sub_100089130();
  uint64_t v25 = sub_1000895F8();
  uint64_t v26 = sub_100077EEC(v25, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
  id v27 = sub_100089978(v26);
  sub_100055928();
  sub_100089804(a14);
  sub_100089998();
  sub_100055948();
  sub_10008961C(a11);
  objc_msgSend(objc_msgSend(v27, "dsid"), "unsignedLongLongValue");
  sub_100077A48();
  sub_10008983C();
  sub_1000896E0();
  uint64_t v28 = sub_1000561B8(a17);
  if (v18[10])
  {
    sub_100089614((__int128 *)v21);
    uint64_t v29 = (void *)swift_task_alloc(dword_1000F1774);
    v18[34] = v29;
    sub_1000898B0(v29, (uint64_t)sub_1000844C0);
    return sub_100089308(0, (uint64_t)(v18 + 2), v30);
  }

  else
  {
    sub_1000899A4(v28, &qword_1000F1698);
    sub_10008979C();
    sub_1000555BC();
    sub_100055558();
    uint64_t v32 = (uint64_t (*)(void))sub_100056158();
    return sub_100089078(v32);
  }

uint64_t sub_1000844C0()
{
  return sub_1000552CC();
}

uint64_t sub_1000844FC()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return sub_100055794(v1);
}

uint64_t sub_100084534()
{
  return sub_100089264(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008458C(void *a1, char a2, void *aBlock, void *a4)
{
  void v4[2] = a1;
  __int128 v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v8 = dword_1000F178C;
  id v9 = a1;
  a4;
  uint64_t v10 = (void *)swift_task_alloc(v8);
  void v4[5] = v10;
  void *v10 = v4;
  v10[1] = sub_100088DC4;
  return sub_100084274((uint64_t)v9, a2);
}

uint64_t sub_100084610(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 28_Block_object_dispose(&a9, 8) = a2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v2;
  *(void *)(v3 + 20_Block_object_dispose(&a9, 8) = sub_100089114();
  uint64_t v4 = sub_100064354();
  *(void *)(v3 + 216) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 224) = v5;
  *(void *)(v3 + 232) = sub_100055374(v5);
  uint64_t v6 = sub_100055F10();
  *(void *)(v3 + 240) = sub_100055374(*(void *)(v6 - 8));
  uint64_t v7 = sub_100055D18();
  *(void *)(v3 + 24_Block_object_dispose(&a9, 8) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 256) = v8;
  *(void *)(v3 + 264) = sub_100055374(v8);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100084688( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20 = *(void *)(sub_100089020() - 8);
  __int128 v21 = (__n128 *)sub_100055F7C( ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
                  + 3LL * *(void *)(v20 + 72),
                    *(unsigned __int8 *)(v20 + 80));
  v18[12] = v19;
  id v22 = sub_100089420(v21, (__n128)xmmword_1000A4930);
  id v24 = (id)AMSLogKey(v22, v23);
  if (v24)
  {
    sub_1000557E0((uint64_t)v24);
    sub_100089948();
  }

  else
  {
    sub_1000561F8();
  }

  sub_1000890CC();
  sub_100055694();
  sub_100054930(v18 + 12);
  sub_1000557F8(47LL);
  sub_1000898E4(34LL, 0x80000001000AE070LL);
  sub_100089860((uint64_t)&type metadata for Bool);
  sub_100089804(v17);
  sub_100089130();
  uint64_t v25 = sub_1000895F8();
  uint64_t v26 = sub_100077EEC(v25, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
  id v27 = sub_100089978(v26);
  sub_100055928();
  sub_100089804(a14);
  sub_100089998();
  sub_100055948();
  sub_10008961C(a11);
  objc_msgSend(objc_msgSend(v27, "dsid"), "unsignedLongLongValue");
  sub_100077A48();
  sub_10008983C();
  sub_1000896E0();
  uint64_t v28 = sub_1000561B8(a17);
  if (v18[10])
  {
    sub_100089614((__int128 *)v21);
    uint64_t v29 = (void *)swift_task_alloc(dword_1000F1774);
    v18[34] = v29;
    sub_1000898B0(v29, (uint64_t)sub_10008485C);
    return sub_100089308(1, (uint64_t)(v18 + 2), v30);
  }

  else
  {
    sub_1000899A4(v28, &qword_1000F1698);
    sub_10008979C();
    sub_1000555BC();
    sub_100055558();
    uint64_t v32 = (uint64_t (*)(void))sub_100056158();
    return sub_100089078(v32);
  }

uint64_t sub_10008485C()
{
  return sub_1000552CC();
}

uint64_t sub_1000848AC(void *a1, int a2, void *a3, char a4, void *aBlock, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = sub_10008951C();
  uint64_t v15 = swift_allocObject(v12, v13, v14);
  *(void *)(v15 + 16) = a3;
  *(_BYTE *)(v15 + 24) = a4;
  *(void *)(v15 + 32) = v11;
  *(void *)(v15 + 40) = a1;
  id v16 = a3;
  id v17 = a1;
  return sub_1000895E8(a7, v15);
}

uint64_t sub_100084910(void *a1, char a2, void *aBlock, void *a4)
{
  void v4[2] = a1;
  __int128 v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v8 = dword_1000F176C;
  id v9 = a1;
  a4;
  uint64_t v10 = (void *)swift_task_alloc(v8);
  void v4[5] = v10;
  void *v10 = v4;
  v10[1] = sub_100088DC4;
  return sub_100084610((uint64_t)v9, a2);
}

uint64_t sub_100084994(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  v2[34] = sub_100089114();
  uint64_t v3 = sub_1000559FC();
  v2[35] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[36] = v4;
  v2[37] = sub_100055374(v4);
  uint64_t v5 = sub_100064354();
  v2[38] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[39] = v6;
  v2[40] = sub_100055374(v6);
  uint64_t v7 = sub_100055D18();
  v2[41] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[42] = v8;
  v2[43] = sub_100055374(v8);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100084A10()
{
  uint64_t v3 = (void *)v1[33];
  uint64_t v2 = v1[34];
  static Log.accountsDataSync.getter(v4);
  sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100089020();
  sub_1000896C0();
  uint64_t v7 = sub_100055F7C((v6 & ~v5) + 3 * v0, v5);
  v1[24] = v3;
  id v22 = (__int128 *)(v1 + 19);
  *(_OWORD *)(v7 + 16) = xmmword_1000A4930;
  v1[27] = v2;
  id v8 = v3;
  id v10 = (id)AMSLogKey(v8, v9);
  if (v10)
  {
    uint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  }

  else
  {
    sub_1000896AC();
  }

  uint64_t v21 = v1[42];
  uint64_t v12 = v1[32];
  sub_100089234((uint64_t)(v1 + 24));
  sub_100055868();
  sub_100054930(v1 + 24);
  sub_100055620(0xD00000000000002FLL);
  v1[31] = &type metadata for UInt64;
  v1[28] = v12;
  uint64_t v13 = sub_100055928();
  sub_100089274(v13, &qword_1000F1E60);
  Log.default(_:)(v7);
  sub_100055948();
  sub_1000899C8(v21);
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  uint64_t v14 = v1[39];
  uint64_t v15 = v1[40];
  uint64_t v16 = v1[32];
  sub_100092088(0xD00000000000001BLL, 0x80000001000AE050LL);
  AccountIdentity.DSID.init(_:)(v16);
  sub_100083F7C();
  sub_1000898F4(v15, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  if (v1[22])
  {
    sub_100089614(v22);
    id v17 = (void *)swift_task_alloc(dword_1000F16AC);
    v1[44] = v17;
    *id v17 = v1;
    v17[1] = sub_100084C48;
    uint64_t v18 = sub_100089708();
    return sub_100088EA8(v18);
  }

  else
  {
    sub_100066CD0((uint64_t)v22, &qword_1000F1698);
    sub_100092234(0xD00000000000001BLL, 0x80000001000AE050LL);
    sub_100055558();
    sub_10005566C();
    sub_10005575C();
    uint64_t v20 = (uint64_t (*)(void))sub_100056158();
    return sub_100088E4C(v20);
  }

uint64_t sub_100084C48(uint64_t a1)
{
  return sub_1000552CC();
}

uint64_t sub_100084C84()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F16B4);
  *(void *)(v0 + 376) = v1;
  uint64_t v2 = sub_1000893BC(v1);
  return sub_100089154(v2, v3);
}

uint64_t sub_100084CD4()
{
  return sub_1000552CC();
}

uint64_t sub_100084D10(uint64_t a1)
{
  return sub_1000552CC();
}

uint64_t sub_100084D44()
{
  uint64_t v1 = v0[48];
  sub_10004DE04();
  v0[49] = v1;
  sub_100089700(v0[36]);
  sub_100068590();
  return sub_100088EFC(v2, v3, v4);
}

uint64_t sub_100084DAC()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100056158();
  return sub_100055794(v0);
}

#error "100084EF0: call analysis failed (funcsize=62)"
#error "100084FF8: call analysis failed (funcsize=62)"
#error "100085100: call analysis failed (funcsize=62)"
void __cdecl -[CachedServerDataService scheduleSyncFromPushWithDsid:completionHandler:]( _TtC12amsaccountsd23CachedServerDataService *self,  SEL a2,  unint64_t a3,  id a4)
{
  void *v6;
  void *v7;
  _TtC12amsaccountsd23CachedServerDataService *v8;
  uint64_t v6 = _Block_copy(a4);
  uint64_t v7 = (void *)swift_allocObject(&unk_1000DA2E8, 40LL, 7LL);
  v7[2] = a3;
  v7[3] = v6;
  void v7[4] = self;
  id v8 = self;
  sub_10008183C((uint64_t)&unk_1000F1748, (uint64_t)v7);
}

uint64_t sub_100085194(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_1000F1754;
  a3;
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100085208;
  return sub_100084994(a1);
}

uint64_t sub_100085208()
{
  uint64_t v4 = *(void **)(v3 + 16);
  uint64_t v5 = *v2;
  sub_1000894C8(*(void *)(v3 + 32), v6);

  uint64_t v7 = *(void *)(v3 + 24);
  if (v0)
  {
    sub_1000899F4();
    sub_100089790();
    sub_10008952C(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16));
  }

  else
  {
    sub_100089590();
  }

  _Block_release(*(const void **)(v3 + 24));
  return sub_100089670(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_100085270(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  v2[22] = sub_100089114();
  uint64_t v3 = sub_100064354();
  v2[23] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[24] = v4;
  v2[25] = sub_100055374(v4);
  uint64_t v5 = sub_100055D18();
  v2[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[27] = v6;
  v2[28] = sub_100055374(v6);
  sub_100068590();
  return sub_1000552CC();
}

#error "1000853C0: call analysis failed (funcsize=89)"
uint64_t sub_100085454()
{
  sub_1000891A8();
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100085490()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return sub_10006D358(v1);
}

uint64_t sub_1000854C0()
{
  return sub_100055794(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100085500(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  v2[18] = sub_100089114();
  uint64_t v3 = sub_100055D18();
  v2[19] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[20] = v4;
  v2[21] = sub_100055374(v4);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_10008554C()
{
  uint64_t v3 = (void *)v1[17];
  uint64_t v2 = v1[18];
  static Log.accountsDataSync.getter(v4);
  sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100089020();
  sub_1000896C0();
  uint64_t v7 = sub_100055F7C((v6 & ~v5) + 3 * v0, v5);
  _BYTE v1[8] = v3;
  *(_OWORD *)(v7 + 16) = xmmword_1000A4930;
  v1[11] = v2;
  id v8 = v3;
  id v10 = (id)AMSLogKey(v8, v9);
  if (v10)
  {
    sub_1000557E0((uint64_t)v10);
    sub_1000895A0();
  }

  else
  {
    sub_1000896AC();
  }

  uint64_t v16 = v1[20];
  sub_100089234((uint64_t)(v1 + 8));
  sub_100055868();
  sub_100054930(v1 + 8);
  sub_100055F28();
  sub_100055D20(26LL, v11);
  v1[15] = sub_10008947C();
  sub_100088424(v1 + 12);
  sub_100089468(v12);
  uint64_t v13 = static LogInterpolation.traceableSensitive(_:)(v1 + 12);
  sub_1000899A4(v13, &qword_1000F1E60);
  Log.default(_:)(v7);
  sub_10005547C();
  sub_10008961C(v16);
  uint64_t v14 = (void *)swift_task_alloc(dword_1000F16AC);
  v1[22] = v14;
  void *v14 = v1;
  v14[1] = sub_100085694;
  return sub_100088EA8(v1[16]);
}

uint64_t sub_100085694(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 176);
  *(void *)(v4 + 184) = a1;
  *(void *)(v4 + 192) = v1;
  swift_task_dealloc(v5);
  return sub_100055354();
}

uint64_t sub_1000856F8()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_1000515E8(*(void **)(v0 + 128));
  *(void *)(v0 + 200) = v1;
  sub_100068590();
  return sub_100088EFC(v2, v3, v4);
}

uint64_t sub_100085748()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 136) + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_accountDataActors);
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v1;
  return sub_100089240((uint64_t)sub_100085768, v1);
}

uint64_t sub_100085768()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = sub_100054838(*(void **)(v0 + 128), *(void *)(*(void *)(v0 + 128) + 24LL));
  sub_1000889DC((uint64_t)v2, v1);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_1000857A8()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100056158();
  return sub_10006D358(v1);
}

uint64_t sub_1000857D8()
{
  if (qword_1000F00A8 != -1) {
    swift_once(&qword_1000F00A8, sub_1000576DC);
  }
  sub_100089284();
  sub_100089890();
  sub_10008927C();
  *(void *)(v0 + 16) = 0x615F706D615F7078LL;
  sub_10008902C();
  sub_100089628(v2);
  sub_100055868();
  sub_100089014(v0 + 16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 8));
  sub_100064834();
  sub_100055694();
  sub_1000892B0();
  sub_10005575C();
  uint64_t v3 = (uint64_t (*)(void))sub_100089324();
  return sub_100089368(v3);
}

uint64_t sub_1000858CC()
{
  if (qword_1000F00A8 != -1) {
    swift_once(&qword_1000F00A8, sub_1000576DC);
  }
  sub_100089284();
  sub_100089890();
  sub_10008927C();
  v0[2] = 0x615F706D615F7078LL;
  sub_10008902C();
  sub_100089628(v2);
  sub_100055868();
  sub_100089014((uint64_t)(v0 + 2), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 8));
  sub_100064834();
  sub_100055694();
  sub_1000892B0();
  sub_10005575C();
  uint64_t v3 = (uint64_t (*)(void))sub_100089324();
  return sub_100089368(v3);
}

uint64_t sub_1000859DC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1000F1734;
  id v7 = a1;
  a3;
  id v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_100085A58;
  return sub_100085270((uint64_t)v7);
}

uint64_t sub_100085A58()
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v3 = *(void **)(v2 + 24);
  uint64_t v5 = *v1;
  sub_1000894C8(*(void *)(v2 + 40), v6);

  uint64_t v7 = *(void *)(v2 + 32);
  if (v0)
  {
    sub_1000899F4();
    sub_100089790();
    sub_10008952C(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16));
  }

  else
  {
    sub_100089590();
  }

  _Block_release(*(const void **)(v2 + 32));
  return sub_100089670(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_100085AC4(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  v2[22] = sub_100089114();
  uint64_t v3 = sub_100064354();
  v2[23] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[24] = v4;
  v2[25] = sub_100055374(v4);
  uint64_t v5 = sub_100055D18();
  v2[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[27] = v6;
  v2[28] = sub_100055374(v6);
  sub_100068590();
  return sub_1000552CC();
}

#error "100085C10: call analysis failed (funcsize=88)"
uint64_t sub_100085CA4()
{
  sub_1000891A8();
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100085CF4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1000F1714;
  id v7 = a1;
  a3;
  id v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_100088DC4;
  return sub_100085AC4((uint64_t)v7);
}

void sub_100085D70()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100089114();
  sub_10005489C(&qword_1000F0300);
  sub_100055428();
  __chkstk_darwin(v5);
  uint64_t v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100055F10();
  sub_100055428();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100055D18();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  sub_100055428();
  __chkstk_darwin(v9);
  sub_100064660();
  static Log.accountsDataSync.getter(v10);
  uint64_t v11 = sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100055858();
  sub_1000896C0();
  uint64_t v14 = swift_allocObject(v11, (v13 & ~v12) + 2 * v1, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000A4950;
  uint64_t v31 = v4;
  v30[0] = v0;
  id v15 = v0;
  id v17 = (id)AMSLogKey(v15, v16);
  if (v17)
  {
    uint64_t v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    sub_100089950();
  }

  else
  {
    sub_1000561F8();
  }

  sub_100055960((uint64_t)v30);
  sub_100055694();
  sub_100054930(v30);
  sub_1000557F8(24LL);
  sub_1000898E4(24LL, 0x80000001000ADE90LL);
  uint64_t v31 = sub_10005489C(&qword_1000F16D8);
  v30[0] = v3;
  sub_100064818();
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v30);
  sub_100066CD0((uint64_t)v30, &qword_1000F1E60);
  sub_100055A04();
  sub_1000895F8();
  Log.default(_:)(v14);
  sub_100055868();
  sub_1000897D4(v27);
  uint64_t v19 = sub_1000899FC();
  uint64_t v20 = (uint64_t)v29;
  sub_100089880(v19, v21, v22, v19);
  uint64_t v23 = (void *)sub_100089544((uint64_t)&unk_1000DA270, 48LL);
  v23[2] = 0LL;
  v23[3] = 0LL;
  void v23[4] = v15;
  v23[5] = v3;
  id v24 = v15;
  sub_100064818();
  uint64_t v25 = sub_10008122C(v20, (uint64_t)&unk_1000F16E8, (uint64_t)v23);
  swift_release(v25);
  sub_1000642E8();
}

uint64_t sub_100085F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1000F16F4);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100085FD8;
  return sub_100081C14(a5);
}

uint64_t sub_100085FD8()
{
  if (!v0) {
    sub_10005547C();
  }
  return sub_100055794(*(uint64_t (**)(void))(v1 + 8));
}

void sub_10008600C()
{
  uint64_t v2 = sub_100089114();
  uint64_t v3 = sub_100055AE0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_100064354();
  uint64_t v44 = *(void *)(v45 - 8);
  sub_100055428();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = sub_100055D18();
  unint64_t v41 = *(void *)(v43 - 8);
  sub_100055428();
  __chkstk_darwin(v10);
  sub_1000895CC();
  uint64_t v11 = (void *)sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100055858();
  sub_10008981C();
  uint64_t v40 = v12;
  uint64_t v14 = sub_100089928(v1 + 2 * v12, v13);
  *(_OWORD *)(v14 + 16) = xmmword_1000A4950;
  v57[0] = v2;
  uint64_t v55 = (uint64_t)v0;
  id v42 = v0;
  id v16 = (id)AMSLogKey(v42, v15);
  if (v16)
  {
    sub_100056234((uint64_t)v16);
  }

  else
  {
    sub_1000896AC();
  }

  sub_100089234((uint64_t)&v55);
  sub_100055868();
  sub_100054930(&v55);
  sub_100055620(0xD000000000000021LL);
  Log.default(_:)(v14);
  sub_100064834();
  (*(void (**)(void *, uint64_t))(v41 + 8))(v0, v43);
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  uint64_t v17 = qword_1000F8D68;
  uint64_t v18 = 0x80000001000ADE40LL;
  sub_100092088(0xD000000000000011LL, 0x80000001000ADE40LL);
  sub_10006FD84(0, 0LL);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    unint64_t v41 = 0x80000001000ADE40LL;
    uint64_t v55 = 2LL;
    __int128 v56 = 0u;
    uint64_t v21 = v19 + 32;
    memset(v57, 0, 28);
    uint64_t v40 = v19;
    swift_bridgeObjectRetain(v19);
    sub_1000587B8();
    uint64_t v43 = v22;
    do
    {
      sub_10005485C(v21, (uint64_t)v53);
      sub_1000891E8(v53, v54);
      uint64_t v23 = sub_1000708BC();
      uint64_t v51 = v23;
      uint64_t v52 = &off_1000D9450;
      sub_100088424(v50);
      sub_100088548(v17, v24, type metadata accessor for AMPAccount);
      uint64_t v48 = 0xD000000000000027LL;
      uint64_t v49 = v43;
      id v25 = objc_msgSend(*(id *)((char *)sub_1000891E8(v50, v51) + *(int *)(v23 + 20)), "ams_isSandboxAccount");
      LODWORD(v23) = (_DWORD)v25;
      uint64_t v26 = AccountIdentity.dsid.getter(v25);
      uint64_t v27 = AccountIdentity.DSID.value.getter(v26);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
      uint64_t v46 = v27;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      unint64_t v30 = v29;
      if ((_DWORD)v23)
      {
        uint64_t v46 = v28;
        unint64_t v47 = v29;
        swift_bridgeObjectRetain(v29);
        v31._countAndFlagsBits = 0x786F62646E61732ELL;
        v31._object = (void *)0xE800000000000000LL;
        String.append(_:)(v31);
        sub_100055694();
        uint64_t v28 = v46;
        unint64_t v30 = v47;
      }

      sub_10006D4F0(v28, v30);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      sub_100055694();
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      sub_1000708A4();
      uint64_t v17 = sub_10009657C(v48, v49);
      uint64_t v38 = v37;
      sub_100054930(v50);
      objc_super v39 = sub_100054838(v53, v54);
      (*(void (**)(char *, void *, uint64_t))(v4 + 16))(v6, v39, v3);
      sub_10006C9CC((uint64_t)v6, v17, v38, (uint64_t)&v55);
      sub_1000556B4();
      sub_100089970((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      sub_100054930(v53);
      v21 += 40LL;
      --v20;
    }

    while (v20);
    sub_1000708A4();
    uint64_t v18 = v41;
  }

  sub_100085D70();
  sub_1000708A4();
  sub_100092234(0xD000000000000011LL, v18);
  sub_1000642E8();
}

uint64_t sub_100086484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[28] = a3;
  v4[29] = v3;
  v4[26] = a1;
  v4[27] = a2;
  v4[30] = sub_100089114();
  uint64_t v5 = sub_1000559FC();
  v4[31] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[32] = v6;
  v4[33] = sub_100055374(v6);
  uint64_t v7 = sub_100055F10();
  v4[34] = sub_100055374(*(void *)(v7 - 8));
  uint64_t v8 = sub_100055D18();
  v4[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[36] = v9;
  v4[37] = sub_100055374(v9);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_1000864FC(uint64_t a1)
{
  uint64_t v4 = *(void **)(v1 + 232);
  uint64_t v3 = *(void *)(v1 + 240);
  static Log.accountsDataSync.getter(a1);
  sub_10005489C((uint64_t *)&unk_1000F0290);
  sub_100089020();
  sub_10008981C();
  uint64_t v7 = sub_100055F7C(v2 + 2 * v5, v6);
  *(void *)(v1 + 96) = v4;
  uint64_t v8 = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000A4950;
  *(void *)(v1 + 120) = v3;
  id v9 = v4;
  id v11 = (id)AMSLogKey(v9, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v29 = *(void *)(v1 + 296);
  uint64_t v16 = *(void *)(v1 + 272);
  uint64_t v30 = *(void *)(v1 + 288);
  uint64_t v31 = *(void *)(v1 + 280);
  uint64_t v33 = *(void *)(v1 + 264);
  uint64_t v17 = *(void *)(v1 + 248);
  uint64_t v34 = *(void *)(v1 + 256);
  uint64_t v32 = *(void *)(v1 + 232);
  uint64_t v26 = *(void *)(v1 + 216);
  uint64_t v27 = *(void *)(v1 + 224);
  uint64_t v28 = *(void *)(v1 + 208);
  static LogInterpolation.prefix(_:_:)(v1 + 96, v13, v15);
  sub_1000556B4();
  sub_1000897E0();
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 2LL);
  v18._object = (void *)0x80000001000ADDE0LL;
  v18._countAndFlagsBits = 0xD000000000000024LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v18);
  *(void *)(v1 + 152) = v17;
  sub_100088424((void *)(v1 + 128));
  (*(void (**)(void))(v34 + 16))();
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v1 + 128);
  sub_1000899AC();
  v19._countAndFlagsBits = 0x20726F6620LL;
  v19._object = (void *)0xE500000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v19);
  *(void *)(v1 + 8_Block_object_dispose(&a9, 8) = &type metadata for String;
  *(void *)(v1 + 64) = v26;
  *(void *)(v1 + 72) = v27;
  swift_bridgeObjectRetain(v27);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)(v1 + 64);
  sub_1000899AC();
  sub_100055A04();
  LogInterpolation.init(stringInterpolation:)(v16);
  Log.debug(_:)(v8);
  sub_100055694();
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  uint64_t v21 = (void *)(v32 + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics);
  static Date.now.getter(v20);
  sub_100057DA4(v28, v26, v27, v33);
  uint64_t v22 = v21[3];
  uint64_t v23 = v21[4];
  sub_1000891E8(v21, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 8))(v1 + 16, v22, v23);
  *(_OWORD *)(v1 + 176) = *(_OWORD *)(v1 + 16);
  sub_100054D08(v1 + 176);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(v1 + 32);
  sub_100054D08(v1 + 160);
  *(void *)(v1 + 192) = *(void *)(v1 + 48);
  sub_100054D30((void *)(v1 + 192));
  *(void *)(v1 + 200) = *(void *)(v1 + 56);
  sub_100054D30((void *)(v1 + 200));
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v17);
  sub_100055870();
  sub_10005566C();
  sub_100055558();
  uint64_t v24 = (uint64_t (*)(void))sub_100056158();
  return v24();
}

uint64_t sub_100086858(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  void v4[2] = a4;
  uint64_t v9 = type metadata accessor for Date(0LL);
  __int128 v4[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[4] = v10;
  uint64_t v11 = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v4[5] = v11;
  v4[6] = _Block_copy(a3);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v14 = v13;
  v4[7] = v13;
  uint64_t v15 = dword_1000F16D4;
  a4;
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v4[8] = v16;
  void *v16 = v4;
  v16[1] = sub_100086930;
  return sub_100086484(v11, v12, v14);
}

uint64_t sub_100086930()
{
  uint64_t v2 = *v1;
  uint64_t v10 = v2;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *v1;
  sub_1000894C8(*(void *)(v2 + 64), &v10);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);

  sub_10005547C();
  uint64_t v8 = *(void *)(v2 + 48);
  if (v0)
  {
    sub_1000899F4();
    sub_100089790();
    sub_10008952C(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16));
  }

  else
  {
    sub_100089590();
  }

  _Block_release(*(const void **)(v2 + 48));
  sub_1000555BC();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000869D8(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  v2[22] = sub_100089114();
  uint64_t v3 = sub_100064354();
  v2[23] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[24] = v4;
  v2[25] = sub_100055374(v4);
  uint64_t v5 = sub_100055D18();
  v2[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[27] = v6;
  v2[28] = sub_100055374(v6);
  sub_100068590();
  return sub_1000552CC();
}

#error "100086B24: call analysis failed (funcsize=88)"
uint64_t sub_100086BB8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  v2[22] = a1;
  v2[23] = v1;
  v2[24] = sub_100089114();
  uint64_t v3 = sub_1000559FC();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = sub_100055374(v4);
  uint64_t v5 = sub_100055D18();
  v2[28] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[29] = v6;
  v2[30] = sub_100055374(v6);
  sub_100068590();
  return sub_1000552CC();
}

uint64_t sub_100086C1C()
{
  uint64_t IsRunningInternal = static DeviceDetails.deviceIsRunningInternalBuild()();
  if ((IsRunningInternal & 1) != 0)
  {
    uint64_t v4 = (void *)v0[23];
    uint64_t v3 = v0[24];
    static Log.accountsDataSync.getter(IsRunningInternal);
    uint64_t v5 = sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v6 = *(void *)(*(void *)(sub_100055858() - 8) + 72LL);
    sub_10008982C();
    uint64_t v8 = swift_allocObject(v5, v1 + 3 * v6, v7 | 7);
    *(_OWORD *)(v8 + 16) = xmmword_1000A4930;
    v0[17] = v3;
    v0[14] = v4;
    id v9 = v4;
    id v11 = (id)AMSLogKey(v9, v10);
    if (v11)
    {
      uint64_t v12 = v11;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      sub_100089950();
    }

    else
    {
      sub_1000561F8();
    }

    uint64_t v21 = v0[29];
    sub_100055960((uint64_t)(v0 + 14));
    sub_100055694();
    sub_100089A04();
    sub_100055F28();
    sub_100055D20(40LL, v15);
    uint64_t v16 = sub_10008947C();
    sub_10008980C(v16);
    sub_100089468(v17);
    uint64_t v18 = sub_100055928();
    sub_100089274(v18, &qword_1000F1E60);
    Log.default(_:)(v8);
    sub_10005547C();
    sub_1000897D4(v21);
    if (qword_1000F00C0 != -1) {
      swift_once(&qword_1000F00C0, sub_100091DA8);
    }
    sub_100089444();
    Swift::String v19 = (void *)swift_task_alloc(dword_1000F16AC);
    v0[31] = v19;
    uint64_t v20 = sub_10008989C(v19, (uint64_t)sub_100086DB0);
    return sub_100088EA8(v20);
  }

  else
  {
    sub_10008993C();
    sub_1000555BC();
    uint64_t v13 = (uint64_t (*)(void))sub_100056158();
    return sub_100088E4C(v13);
  }

uint64_t sub_100086DB0(uint64_t a1)
{
  return sub_1000552CC();
}

uint64_t sub_100086DEC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F16B4);
  *(void *)(v0 + 272) = v1;
  uint64_t v2 = sub_1000893BC(v1);
  return sub_100089154(v2, v3);
}

uint64_t sub_100086E3C()
{
  return sub_1000552CC();
}

uint64_t sub_100086E78()
{
  return sub_1000552CC();
}

uint64_t sub_100086EA4()
{
  *(void *)(v1 + 28_Block_object_dispose(&a9, 8) = v0;
  sub_100089700(*(void *)(v1 + 208));
  sub_100068590();
  return sub_100088EFC(v2, v3, v4);
}

uint64_t sub_100086F04()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100056158();
  return sub_10006D358(v0);
}

#error "100087004: call analysis failed (funcsize=57)"
#error "1000870F8: call analysis failed (funcsize=58)"
#error "1000871EC: call analysis failed (funcsize=58)"
void __cdecl -[CachedServerDataService manualSyncFor:completionHandler:]( _TtC12amsaccountsd23CachedServerDataService *self,  SEL a2,  AMSAccountIdentity *a3,  id a4)
{
  sub_100087228(self, (int)a2, a3, a4, (uint64_t)&unk_1000DA1A8, (uint64_t)&unk_1000F1658);
}

uint64_t sub_100087228(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = (void *)sub_100089544(a5, 40LL);
  v11[2] = a3;
  v11[3] = v10;
  void v11[4] = a1;
  id v12 = a3;
  id v13 = a1;
  return sub_1000895E8(a6, (uint64_t)v11);
}

uint64_t sub_100087288(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1000F1694;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100088DC4;
  return sub_1000869D8((uint64_t)v7);
}

id sub_100087304()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_100089114();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CachedServerDataService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd23CachedServerDataService);
}

uint64_t sub_1000873A0(void *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v8);
  id v12 = &v32[-v11 - 8];
  id v13 = sub_100054838(a1, a1[3]);
  uint64_t v35 = *(void (**)(_BYTE *, void *, uint64_t))(v7 + 16);
  v35(v12, v13, v6);
  uint64_t v14 = v2 + 112;
  swift_beginAccess(v2 + 112, v34, 0LL, 0LL);
  uint64_t v15 = *(void *)(v2 + 112);
  if (*(void *)(v15 + 16))
  {
    swift_bridgeObjectRetain(v15);
    unint64_t v16 = sub_10008DA88((uint64_t)v12);
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_retain(v18);
      swift_bridgeObjectRelease(v15);
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
      return v18;
    }

    swift_bridgeObjectRelease(v15);
  }

  uint64_t v31 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v31(v12, v6);
  sub_10005485C((uint64_t)a1, (uint64_t)v33);
  sub_10005485C(a2, (uint64_t)v32);
  uint64_t v18 = type metadata accessor for LiveTransactionStore(0LL);
  uint64_t v19 = type metadata accessor for DeviceDetails(0LL);
  uint64_t v20 = sub_100054B08(0LL, &qword_1000F1640, &OBJC_CLASS___AMSDefaults_ptr);
  sub_100054B08(0LL, &qword_1000F1648, &OBJC_CLASS___AMSBag_ptr);
  uint64_t v21 = sub_10008964C();
  id v25 = sub_10008119C(v21, v22, v23, v24);
  uint64_t v26 = type metadata accessor for AccountDataAccessActor(0LL);
  sub_100089964(v26);
  uint64_t v27 = sub_10004CDB8( (uint64_t)v33,  (uint64_t)v32,  (uint64_t)&type metadata for AccountDataNetworking,  (uint64_t)&off_1000D9048,  (uint64_t)&type metadata for AccountDataFileSystemStore,  (uint64_t)&off_1000D92B0,  (uint64_t)&type metadata for AccountDataSyncDASScheduler,  (uint64_t)&off_1000D9390,  (uint64_t)&type metadata for AccountDataUpdateDarwinNotifier,  (uint64_t)&off_1000D93C8,  (uint64_t)&type metadata for AccountsFrameworkFinder,  (uint64_t)&off_1000D9420,  v18,  (uint64_t)&off_1000DA780,  v19,  (uint64_t)&protocol witness table for DeviceDetails,  v20,  (uint64_t)&protocol witness table for AMSDefaults,  (uint64_t)v25);
  if (!v3)
  {
    uint64_t v18 = v27;
    uint64_t v28 = sub_100054838(a1, a1[3]);
    v35(v10, v28, v6);
    swift_beginAccess(v14, v33, 33LL, 0LL);
    uint64_t v29 = swift_retain(v18);
    sub_100094590(v29, (uint64_t)v10);
    v31(v10, v6);
    swift_endAccess(v33);
  }

  return v18;
}

uint64_t sub_100087678()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AccountDataCollection()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd21AccountDataCollection);
}

uint64_t sub_1000876BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100088DD4;
  return v6();
}

uint64_t sub_100087710(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100088DD4;
  return v7();
}

uint64_t sub_100087764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_100054CA8(a1, 1LL, v6) == 1)
  {
    sub_100066CD0(a1, &qword_1000F0300);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_1000DA220, 32LL, 7LL);
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    unint64_t v16 = v18;
    void v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    unint64_t v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1000F1688, v15);
}

uint64_t sub_1000878A8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10008790C;
  return v6(a1);
}

uint64_t sub_10008790C()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100056158();
  return sub_10006D358(v0);
}

uint64_t sub_100087930(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v10 = sub_10005489C(&qword_1000F0958);
  uint64_t v40 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v42 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10005489C(&qword_1000F17C8);
  __chkstk_darwin(v15);
  char v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100088674(a1, a2, a3, v47);
  __int128 v43 = v47[0];
  __int128 v44 = v47[1];
  __int128 v45 = v47[2];
  uint64_t v46 = v48;
  uint64_t v38 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v39 = a3;
  swift_retain(a3);
  sub_1000886B0((uint64_t)v17);
  uint64_t v18 = sub_10005489C(&qword_1000F17C0);
  if (sub_100054CA8((uint64_t)v17, 1LL, v18) == 1)
  {
LABEL_2:
    swift_bridgeObjectRelease(v38);
    uint64_t v19 = v48;
    swift_release(v39);
    sub_100057374(v43);
    return swift_release(v19);
  }

  else
  {
    uint64_t v21 = &qword_1000F0958;
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    while (1)
    {
      uint64_t v23 = (uint64_t)&v17[*(int *)(v18 + 48)];
      v22(v14, v17, v42);
      uint64_t v24 = v21;
      sub_100088D5C(v23, v49, v21);
      id v25 = (void *)*a5;
      unint64_t v27 = sub_10008DA88((uint64_t)v14);
      uint64_t v28 = v25[2];
      BOOL v29 = (v26 & 1) == 0;
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        break;
      }
      char v31 = v26;
      if (v25[3] >= v30)
      {
        if ((a4 & 1) != 0)
        {
          if ((v26 & 1) != 0) {
            goto LABEL_15;
          }
        }

        else
        {
          sub_10005489C(&qword_1000F17B0);
          _NativeDictionary.copy()();
          if ((v31 & 1) != 0) {
            goto LABEL_15;
          }
        }
      }

      else
      {
        sub_100066640(v30, a4 & 1);
        unint64_t v32 = sub_10008DA88((uint64_t)v14);
        if ((v31 & 1) != (v33 & 1)) {
          goto LABEL_18;
        }
        unint64_t v27 = v32;
        if ((v31 & 1) != 0)
        {
LABEL_15:
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ELL,  0x80000001000AE190LL,  "amsaccountsd/CachedServerDataService.swift",  42LL,  2LL,  132LL,  0);
          __break(1u);
          break;
        }
      }

      uint64_t v34 = (void *)*a5;
      *(void *)(*a5 + 8 * (v27 >> 6) + 64) |= 1LL << v27;
      v22((char *)(v34[6] + *(void *)(v41 + 72) * v27), v14, v42);
      uint64_t v21 = v24;
      sub_100088D5C(v49, v34[7] + *(void *)(v40 + 72) * v27, v24);
      uint64_t v35 = v34[2];
      BOOL v36 = __OFADD__(v35, 1LL);
      uint64_t v37 = v35 + 1;
      if (v36) {
        goto LABEL_17;
      }
      v34[2] = v37;
      sub_1000886B0((uint64_t)v17);
      uint64_t v18 = sub_10005489C(&qword_1000F17C0);
      a4 = 1;
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
    __break(1u);
  }

  return result;
}

uint64_t sub_100087CB4()
{
  uint64_t v1 = (void *)sub_1000896F8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100088F18(v1, (uint64_t)sub_100088DD4);
  return sub_100088F08(v2, v3, v4, v5);
}

uint64_t sub_100087CF8()
{
  uint64_t v1 = (void *)sub_10008984C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008954C(v1, (uint64_t)sub_100088DD4);
  return sub_1000894E8(v2, v3, v4, v5, v6);
}

uint64_t sub_100087D40()
{
  uint64_t v1 = sub_10008951C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100087D64()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F1674);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100088DD4;
  uint64_t v2 = sub_10008972C();
  return v3(v2);
}

uint64_t sub_100087DD4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100087DF8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)sub_1000896F8();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100088DD0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000F1680 + dword_1000F1680))(a1, v4);
}

unint64_t sub_100087E64()
{
  unint64_t result = qword_1000F16B8;
  if (!qword_1000F16B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A5E14, &unk_1000D96F8);
    atomic_store(result, (unint64_t *)&qword_1000F16B8);
  }

  return result;
}

uint64_t sub_100087EA0()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_10008951C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100087ED0()
{
  uint64_t v1 = (void *)sub_10008984C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008954C(v1, (uint64_t)sub_100088DD4);
  return sub_1000894E8(v2, v3, v4, v5, v6);
}

void sub_100087F14(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F0958);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v46 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AccountDataState(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int128 v44 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v35 - v8;
  sub_10005489C(&qword_1000F0998);
  uint64_t v9 = static _DictionaryStorage.copy(original:)(a1);
  int64_t v10 = 0LL;
  uint64_t v49 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 - 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v36 = v12;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v38 = v9 + 64;
  uint64_t v39 = (void *)v9;
  uint64_t v17 = v41;
  uint64_t v18 = v42;
  uint64_t v19 = (uint64_t)v44;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v50 = (v16 - 1) & v16;
  int64_t v51 = v10;
  for (unint64_t i = __clz(__rbit64(v16)) | (v10 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = v49;
    uint64_t v26 = v43;
    unint64_t v27 = *(void *)(v43 + 72) * i;
    uint64_t v28 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v40, *(void *)(v49 + 48) + v27, v17);
    sub_100088548(*(void *)(v25 + 56) + *(void *)(v45 + 72) * i, v19, type metadata accessor for AccountDataState);
    BOOL v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v29(v18, v28, v17);
    uint64_t v30 = v46;
    sub_100088548(v19, v46, type metadata accessor for AccountDataState);
    swift_storeEnumTagMultiPayload(v30, v48, 0LL);
    sub_100066C94(v19);
    char v31 = v39;
    *(void *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    v29((char *)(v31[6] + v27), v18, v17);
    sub_100088D5C(v30, v31[7] + *(void *)(v47 + 72) * i, &qword_1000F0958);
    uint64_t v32 = v31[2];
    BOOL v33 = __OFADD__(v32, 1LL);
    uint64_t v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v31[2] = v34;
    int64_t v10 = v51;
    unint64_t v16 = v50;
    if (v50) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_24;
    }
    if (v21 >= v37) {
      return;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    int64_t v23 = v10 + 1;
    if (!v22)
    {
      int64_t v23 = v10 + 2;
      if (v10 + 2 >= v37) {
        return;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v10 + 3;
        if (v10 + 3 >= v37) {
          return;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }

uint64_t sub_100088298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a3, v8);
  return sub_100088D14(a4, a2);
}

uint64_t sub_1000882F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + *(int *)(sub_10005489C(&qword_1000F0980) + 48);
  uint64_t v5 = a2 + *(int *)(sub_10005489C(&qword_1000F17C0) + 48);
  return sub_100088298(a2, v5, a1, v4);
}

uint64_t sub_10008834C(uint64_t a1)
{
  uint64_t v2 = sub_1000708BC();
  uint64_t v13 = v2;
  uint64_t v14 = &off_1000D9450;
  sub_100088424(v12);
  sub_100088548(a1, v3, type metadata accessor for AMPAccount);
  sub_1000587B8();
  uint64_t v10 = v5;
  uint64_t v11 = v4;
  uint64_t v6 = sub_100054838(v12, v13);
  v7._countAndFlagsBits = sub_10006D3E8( (uint64_t)v6,  (char)objc_msgSend(*(id *)((char *)v6 + *(int *)(v2 + 20)), "ams_isSandboxAccount"));
  String.append(_:)(v7);
  sub_10005547C();
  uint64_t v8 = sub_10009657C(v10, v11);
  sub_100054930(v12);
  return v8;
}

void sub_100088424(void *a1)
{
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0) {
    *a1 = swift_allocBox();
  }
  sub_100055744();
}

uint64_t sub_10008845C()
{
  uint64_t v1 = sub_10008951C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100088484()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000F16E4);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000884E4;
  uint64_t v2 = sub_10008972C();
  return sub_100085F84(v2, v3, v4, v5, v6);
}

uint64_t sub_1000884E4()
{
  return sub_10006D358(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_100088508()
{
  unint64_t result = qword_1000F1EC0;
  if (!qword_1000F1EC0)
  {
    uint64_t v1 = type metadata accessor for AccountIdentity(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AccountIdentity, v1);
    atomic_store(result, (unint64_t *)&qword_1000F1EC0);
  }

  return result;
}

void sub_100088548(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_100055DB8(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_100055744();
}

uint64_t sub_10008857C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000885C4()
{
  uint64_t v1 = (void *)sub_1000896F8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100088F18(v1, (uint64_t)sub_100088DD4);
  return sub_100088F08(v2, v3, v4, v5);
}

uint64_t sub_100088608()
{
  uint64_t v1 = (void *)sub_1000896F8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100088F18(v1, (uint64_t)sub_100088648);
  return sub_100088F08(v2, v3, v4, v5);
}

uint64_t sub_100088648()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100088674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1000886B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10005489C(&qword_1000F0980);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10005489C(&qword_1000F0960);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v14 = v1[2];
  int64_t v15 = v1[3];
  unint64_t v16 = v1[4];
  uint64_t v36 = v5;
  uint64_t v37 = v14;
  uint64_t v38 = v12;
  if (v16)
  {
    uint64_t v5 = (char *)a1;
    uint64_t v17 = (v16 - 1) & v16;
    unint64_t v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_3:
    uint64_t v19 = *(void *)(v13 + 48);
    uint64_t v20 = type metadata accessor for AccountIdentity(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))( v11,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  v20);
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = sub_10005489C(&qword_1000F0958);
    sub_100088D14(v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v18, (uint64_t)&v11[*(int *)(v3 + 48)]);
    uint64_t v23 = 0LL;
LABEL_4:
    a1 = (uint64_t)v5;
    goto LABEL_5;
  }

  int64_t v30 = v15 + 1;
  if (__OFADD__(v15, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  int64_t v31 = (unint64_t)(v14 + 64) >> 6;
  if (v30 >= v31)
  {
    uint64_t v17 = 0LL;
    uint64_t v23 = 1LL;
    goto LABEL_5;
  }

  unint64_t v32 = *(void *)(v12 + 8 * v30);
  if (v32)
  {
    uint64_t v5 = (char *)a1;
LABEL_12:
    uint64_t v17 = (v32 - 1) & v32;
    unint64_t v18 = __clz(__rbit64(v32)) + (v30 << 6);
    int64_t v15 = v30;
    goto LABEL_3;
  }

  int64_t v33 = v15 + 2;
  if (v15 + 2 >= v31)
  {
    uint64_t v17 = 0LL;
    uint64_t v23 = 1LL;
    ++v15;
    goto LABEL_5;
  }

  unint64_t v32 = *(void *)(v12 + 8 * v33);
  if (v32)
  {
LABEL_16:
    uint64_t v5 = (char *)a1;
    int64_t v30 = v33;
    goto LABEL_12;
  }

  if (v15 + 3 >= v31) {
    goto LABEL_29;
  }
  unint64_t v32 = *(void *)(v12 + 8 * (v15 + 3));
  if (v32)
  {
    uint64_t v5 = (char *)a1;
    int64_t v30 = v15 + 3;
    goto LABEL_12;
  }

  int64_t v33 = v15 + 4;
  if (v15 + 4 < v31)
  {
    unint64_t v32 = *(void *)(v12 + 8 * v33);
    if (v32) {
      goto LABEL_16;
    }
    int64_t v30 = v15 + 5;
    if (v15 + 5 < v31)
    {
      uint64_t v5 = (char *)a1;
      unint64_t v32 = *(void *)(v12 + 8 * v30);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v30 = v31 - 1;
      int64_t v34 = v15 + 6;
      while (v34 < v31)
      {
        unint64_t v32 = *(void *)(v12 + 8 * v34++);
        if (v32)
        {
          int64_t v30 = v34 - 1;
          goto LABEL_12;
        }
      }

LABEL_32:
      uint64_t v17 = 0LL;
      uint64_t v23 = 1LL;
      int64_t v15 = v30;
      goto LABEL_4;
    }

uint64_t sub_1000889DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for AMPAccount(0LL);
  int64_t v15 = &off_1000D9450;
  sub_100088424(v13);
  sub_100088548(a1, v8, type metadata accessor for AMPAccount);
  uint64_t v9 = sub_100054838(v13, v14);
  (*(void (**)(_BYTE *, void *, uint64_t))(v5 + 16))(v7, v9, v4);
  swift_beginAccess(a2 + 112, v12, 33LL, 0LL);
  uint64_t v10 = sub_1000941E4((uint64_t)v7);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_endAccess(v12);
  swift_release(v10);
  return sub_100054930(v13);
}

uint64_t sub_100088AEC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100088B14()
{
  uint64_t v1 = (void *)sub_1000896F8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100088F18(v1, (uint64_t)sub_100088DD4);
  return sub_100088F08(v2, v3, v4, v5);
}

uint64_t sub_100088B58()
{
  uint64_t v1 = (void *)sub_10008984C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008954C(v1, (uint64_t)sub_100088DD4);
  return sub_1000894E8(v2, v3, v4, v5, v6);
}

uint64_t sub_100088BA4()
{
  uint64_t v1 = sub_10008951C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100088BCC()
{
  uint64_t v1 = (void *)sub_10008984C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008954C(v1, (uint64_t)sub_100088DD4);
  return sub_1000894E8(v2, v3, v4, v5, v6);
}

uint64_t sub_100088C18()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100088C44()
{
  uint64_t v1 = (void *)sub_1000896F8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100088F18(v1, (uint64_t)sub_100088DD4);
  return sub_100088F08(v2, v3, v4, v5);
}

uint64_t sub_100088C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F0958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100088CCC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

void sub_100088CF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100055DB8(a1, a2, a3);
  sub_100058774(v3);
  sub_100055744();
}

uint64_t sub_100088D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F0958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100088D5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10005489C(a3);
  sub_100058774(v3);
  sub_100055744();
}

unint64_t sub_100088D88()
{
  unint64_t result = qword_1000F17D0;
  if (!qword_1000F17D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A588C, &type metadata for AccountDataNetworkingBag);
    atomic_store(result, (unint64_t *)&qword_1000F17D0);
  }

  return result;
}

uint64_t sub_100088DEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return static LogInterpolation.prefix(_:_:)(a17, v18, v17);
}

uint64_t sub_100088E4C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100088E68()
{
  return sub_100092234(0x44746E756F636361LL, 0xEF636E7953617461LL);
}

void *sub_100088E8C(void *a1)
{
  return sub_100054838(a1, a1[3]);
}

uint64_t sub_100088EA8(uint64_t a1)
{
  return sub_100082A00(a1);
}

uint64_t sub_100088EC4()
{
  return static LogInterpolation.prefix(_:_:)(v0, v2, v1);
}

uint64_t sub_100088EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100088F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100088F18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_100088F38()
{
  *(void *)(v0 + 16) = 0x615F706D615F7078LL;
}

void sub_100088F6C()
{
  *(void *)(v0 + 16) = 0x615F706D615F7078LL;
}

void sub_100088FA0()
{
  *(void *)(v0 + 16) = 0x615F706D615F7078LL;
}

uint64_t sub_100088FD4()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - _Block_object_dispose(&a9, 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - _Block_object_dispose(&a9, 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100088FF4()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 272);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 280) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100089014@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_100089020()
{
  return type metadata accessor for LogInterpolation(0LL);
}

  ;
}

  ;
}

uint64_t sub_100089078(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100089094(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_1000890CC()
{
  return static LogInterpolation.prefix(_:_:)(v0, v2, v1);
}

uint64_t sub_100089114()
{
  return swift_getObjectType(v0);
}

uint64_t sub_10008911C@<X0>(uint64_t a1@<X8>)
{
  return sub_100092234(0xD000000000000010LL, (a1 - 32) | 0x8000000000000000LL);
}

void sub_100089130()
{
  v0._countAndFlagsBits = 0x63636120726F6620LL;
  v0._object = (void *)0xED00003A746E756FLL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_100089154(uint64_t a1, uint64_t a2)
{
  return sub_1000828E0(a1, a2);
}

void sub_100089160()
{
  *(_BYTE *)(v0 + 31) = -18;
}

uint64_t sub_100089188@<X0>(uint64_t a1@<X8>)
{
  v3[4] = 0xD000000000000010LL;
  v3[5] = (a1 - 32) | 0x8000000000000000LL;
  v3[6] = v2;
  v3[7] = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000891A8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 232);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 240) = v0;
  return swift_task_dealloc(v5);
}

id sub_1000891C8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v2 + 24) = v3;
  return v4;
}

void *sub_1000891E8(void *a1, uint64_t a2)
{
  return sub_100054838(a1, a2);
}

uint64_t sub_1000891FC@<X0>(uint64_t a1@<X8>)
{
  v2[3] = a1;
  v2[4] = v5;
  v2[5] = (v1 - 32) | 0x8000000000000000LL;
  v2[6] = v4;
  v2[7] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100089218@<X0>(uint64_t a1@<X8>)
{
  v2[3] = a1;
  v2[4] = v4;
  v2[5] = (v1 - 32) | 0x8000000000000000LL;
  v2[6] = v3;
  v2[7] = v5;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_100089234(uint64_t a1)
{
  return static LogInterpolation.prefix(_:_:)(a1, v2, v1);
}

uint64_t sub_100089240(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0LL);
}

uint64_t sub_100089248@<X0>(uint64_t a1@<X8>)
{
  v3[3] = a1;
  v3[4] = v1;
  v3[5] = (v2 - 32) | 0x8000000000000000LL;
  v3[6] = v5;
  v3[7] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100089264(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100089274(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10008927C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100089284()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10008928C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_getErrorValue(a18, a9, v18);
}

uint64_t sub_1000892A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100092234(a1, (a2 - 32) | 0x8000000000000000LL);
}

uint64_t sub_1000892B0()
{
  return swift_willThrow();
}

uint64_t sub_1000892B8(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  *(void *)(v3 - _Block_object_dispose(&a9, 8) = *v2;
  uint64_t v5 = v4[44];
  *(void *)(v3 - _Block_object_dispose(&a9, 8) = *v2;
  v4[45] = a1;
  v4[46] = v1;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000892E0(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  *(void *)(v3 - _Block_object_dispose(&a9, 8) = *v2;
  uint64_t v5 = v4[31];
  *(void *)(v3 - _Block_object_dispose(&a9, 8) = *v2;
  v4[32] = a1;
  v4[33] = v1;
  return swift_task_dealloc(v5);
}

uint64_t sub_100089308(char a1, uint64_t a2, char a3)
{
  return sub_100082A90(a1, a2, a3);
}

uint64_t sub_100089324()
{
  return *(void *)(v0 + 8);
}

  ;
}

  ;
}

uint64_t sub_100089368(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100089384( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

void sub_10008938C()
{
}

uint64_t sub_1000893A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t sub_1000893A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_1000893BC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

id sub_1000893D0( __n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a1[1] = a2;
  *(void *)(v16 + 20_Block_object_dispose(&a9, 8) = a16;
  *(void *)(v16 + 184) = v17;
  return v17;
}

uint64_t sub_1000893E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 8))(a16, v16, v17);
}

uint64_t sub_1000893F8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10008940C()
{
  return swift_errorRelease(v0);
}

id sub_100089420(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v2 + 24) = v3;
  return v4;
}

uint64_t sub_100089444()
{
  return sub_100092088(0x44746E756F636361LL, 0xEF636E7953617461LL);
}

uint64_t sub_100089468(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_10008947C()
{
  return type metadata accessor for AccountIdentity(0LL);
}

unint64_t sub_10008949C()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000894C0(uint64_t a1, uint64_t a2)
{
  return sub_100092234(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

uint64_t sub_1000894C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

  ;
}

uint64_t sub_1000894E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1000894FC()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 376);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 384) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10008951C()
{
  return v0;
}

uint64_t sub_10008952C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100089538()
{
  return swift_task_dealloc(*(void *)(v0 + 224));
}

uint64_t sub_100089544(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_10008954C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100089570( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a13 + 8))(v14, a14);
}

void sub_100089580()
{
  *(void *)(v1 + 240) = *(void *)(v1 + 288);
  sub_100088424(v0);
}

uint64_t sub_100089590()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 16))(v0, 0LL);
}

void sub_1000895A0()
{
}

uint64_t sub_1000895AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_allocObject(a14, v15, v14);
}

uint64_t sub_1000895BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 8))(v10, a10);
}

uint64_t sub_1000895CC()
{
  return static Log.accountsDataSync.getter();
}

uint64_t sub_1000895E8(uint64_t a1, uint64_t a2)
{
  return sub_10008183C(a1, a2);
}

uint64_t sub_1000895F8()
{
  return LogInterpolation.init(stringInterpolation:)(v0);
}

uint64_t sub_100089604()
{
  return sub_10006F5F8(v1, v0 - 80);
}

uint64_t sub_100089614(__int128 *a1)
{
  return sub_10006F5F8(a1, v1);
}

uint64_t sub_10008961C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100089628@<X0>(uint64_t a1@<X8>)
{
  v3[3] = a1;
  v3[4] = v1;
  v3[5] = (v2 - 32) | 0x8000000000000000LL;
  v3[6] = v5;
  v3[7] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100089644()
{
  return swift_task_alloc(v0);
}

uint64_t sub_10008964C()
{
  return 0x73746E756F636341LL;
}

uint64_t sub_100089670(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100089680@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100089694( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

void sub_10008969C()
{
  *(void *)(v1 - _Block_object_dispose(&a9, 8) = *v0;
}

  ;
}

uint64_t sub_1000896B8(uint64_t a1)
{
  return sub_1000916C4(a1, v1);
}

  ;
}

uint64_t sub_1000896D4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1000896E0()
{
}

uint64_t sub_1000896F8()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100089700@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_100089708()
{
  return v0;
}

uint64_t sub_100089714()
{
  return swift_release(*(void *)(v0 + 360));
}

uint64_t sub_100089720()
{
  return sub_1000916C4(v0, v1);
}

uint64_t sub_10008972C()
{
  return v0;
}

uint64_t sub_100089748()
{
  return sub_1000916C4(v0, v1);
}

id sub_100089754(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = v1;
  return v1;
}

uint64_t sub_100089760()
{
  return AccountIdentity.DSID.init(_:)(v0);
}

uint64_t sub_10008976C()
{
  return static LogInterpolation.safe(_:)(v0);
}

uint64_t sub_100089778( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t))
{
  return a11(v11, a10);
}

void sub_100089784()
{
}

uint64_t sub_100089790()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10008979C()
{
  return swift_task_dealloc(*(void *)(v0 + 264));
}

  ;
}

uint64_t sub_1000897BC()
{
  return Log.error(_:)(v0);
}

uint64_t sub_1000897C8()
{
  return Log.default(_:)(v0);
}

uint64_t sub_1000897D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000897E0()
{
  return sub_100054930(v0);
}

uint64_t sub_1000897E8()
{
  return static Log.accountsDataSync.getter();
}

  ;
}

void sub_100089804(uint64_t a1)
{
}

void sub_10008980C(uint64_t a1)
{
  *(void *)(v2 + 16_Block_object_dispose(&a9, 8) = a1;
  sub_100088424(v1);
}

  ;
}

  ;
}

uint64_t sub_10008983C()
{
  return AccountIdentity.DSID.init(_:)(v0);
}

uint64_t sub_10008984C()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

  ;
}

uint64_t sub_100089860@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 152) = a1;
  *(_BYTE *)(v2 + 12_Block_object_dispose(&a9, 8) = v3;
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)(v1);
}

void sub_100089870()
{
  *(void *)(v0 + 96) = v1;
}

uint64_t sub_100089880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054998(v4, 1LL, 1LL, a4);
}

uint64_t sub_100089890()
{
  return sub_1000916C4(v0, v1);
}

uint64_t sub_10008989C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 176);
}

void *sub_1000898B0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000898C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

uint64_t sub_1000898CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_1000898D4()
{
  return swift_willThrow();
}

uint64_t sub_1000898DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

void sub_1000898E4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_1000898EC(uint64_t a1, uint64_t a2)
{
  return sub_100092088(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

uint64_t sub_1000898F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

id sub_1000898FC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_100089918( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_100089920()
{
  return static Log.accountsDataSync.getter();
}

uint64_t sub_100089928@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_100089934( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

uint64_t sub_10008993C()
{
  return swift_task_dealloc(*(void *)(v0 + 240));
}

void sub_100089948()
{
}

  ;
}

void sub_10008995C()
{
}

uint64_t sub_100089964(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_100089970@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

id sub_100089978(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  *(void *)(v1 + 160) = v2;
  return v2;
}

uint64_t sub_100089984()
{
  return static Log.accountsDataSync.getter();
}

void sub_100089990()
{
}

uint64_t sub_100089998()
{
  return Log.default(_:)(v0);
}

void sub_1000899A4(uint64_t a1, uint64_t *a2)
{
}

void sub_1000899AC()
{
}

void sub_1000899B8(uint64_t a1)
{
}

uint64_t sub_1000899C0()
{
  return swift_release(*(void *)(v0 + 256));
}

uint64_t sub_1000899C8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

  ;
}

uint64_t sub_1000899E8()
{
  return static Date.now.getter();
}

uint64_t sub_1000899F4()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_1000899FC()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_100089A04()
{
  return sub_100054930(v0);
}

uint64_t sub_100089A0C()
{
  return swift_errorRetain(v0);
}

void sub_100089A14(uint64_t a1, uint64_t *a2)
{
}

void sub_100089A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = sub_100064518();
  uint64_t v8 = type metadata accessor for CachedServerDataSyncAttempt(v7);
  sub_1000552EC();
  __chkstk_darwin(v9);
  sub_100055840();
  uint64_t v10 = (int *)sub_10008A41C();
  sub_10008A42C(a1 + v10[18]);
  if (sub_100054CA8(v2, 1LL, v8) == 1)
  {
    sub_100054CE0(v2, &qword_1000F02F0);
    if ((*(_BYTE *)(a1 + v10[19]) & 1) == 0 && !*(void *)(a1 + v10[17])) {
      sub_10008A234(a1 + v10[13], a2);
    }
  }

  else
  {
    sub_10007D4F8(v2, v3);
    sub_100054F80(v3, type metadata accessor for CachedServerDataSyncAttempt);
  }

  sub_100079A64();
}

void sub_100089B30(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = v7;
  uint64_t v8 = type metadata accessor for CachedServerDataSyncAttempt(0LL);
  sub_1000552EC();
  __chkstk_darwin(v9);
  sub_100055360();
  uint64_t v38 = v10;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v11);
  sub_10005878C();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10005878C();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = (int *)sub_10008A41C();
  sub_1000684B0((uint64_t)a1 + v20[14], v14, &qword_1000F02A8);
  if (sub_100054CA8(v14, 1LL, v15) == 1)
  {
    sub_100054CE0(v14, &qword_1000F02A8);
    uint64_t v21 = a2;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v19, v14, v15);
    if ((static Date.> infix(_:_:)(v19, a2) & 1) != 0)
    {
      uint64_t v22 = sub_10008A3E0();
      sub_10008A3AC(v22);
      uint64_t v23 = (int *)sub_10008A404();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a3 + v23[5], v19, v15);
      *(_BYTE *)(a3 + v23[6]) = *((_BYTE *)a1 + v20[10]);
      *(_BYTE *)(a3 + v23[7]) = 2;
      uint64_t v24 = a1[1];
      uint64_t v25 = (void *)(a3 + v23[8]);
      *uint64_t v25 = *a1;
      v25[1] = v24;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      swift_bridgeObjectRetain(v24);
      v26(v19, v15);
      goto LABEL_14;
    }

    uint64_t v21 = a2;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
  }

  if (sub_100089E04((uint64_t)a1))
  {
    uint64_t v27 = sub_10008A3E0();
    sub_10008A3AC(v27);
    uint64_t v28 = sub_10008A404();
    sub_10008A3C4(v28);
    uint64_t v29 = sub_10008A3F0(*((_BYTE *)a1 + v20[10]));
    *(_BYTE *)(a3 + v30) = 4;
  }

  else
  {
    if (*(void *)((char *)a1 + v20[17]))
    {
      sub_100089E98(a1, v21, a3);
      goto LABEL_14;
    }

    sub_1000684B0((uint64_t)a1 + v20[18], v39, &qword_1000F02F0);
    if (sub_100054CA8(v39, 1LL, v8) != 1)
    {
      sub_10007D4F8(v39, (uint64_t)v38);
      uint64_t v34 = sub_10008A3E0();
      sub_10008A3AC(v34);
      uint64_t v35 = sub_10008A404();
      sub_10008A3C4(v35);
      uint64_t v36 = sub_10008A3F0(*v38);
      *(_BYTE *)(a3 + v37) = 1;
      sub_10008A40C(v36);
      sub_100054F80((uint64_t)v38, type metadata accessor for CachedServerDataSyncAttempt);
      goto LABEL_14;
    }

    sub_100054CE0(v39, &qword_1000F02F0);
    uint64_t v31 = sub_10008A3E0();
    sub_10008A3AC(v31);
    uint64_t v32 = sub_10008A404();
    sub_10008A3C4(v32);
    uint64_t v29 = sub_10008A3F0(*((_BYTE *)a1 + v20[10]));
    *(_BYTE *)(a3 + v33) = 0;
  }

  sub_10008A40C(v29);
LABEL_14:
  sub_1000642E8();
}

BOOL sub_100089E04(uint64_t a1)
{
  uint64_t v2 = sub_10008A41C();
  sub_1000552EC();
  __chkstk_darwin(v3);
  sub_10005878C();
  uint64_t v6 = v5 - v4;
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(v7 + 40));
  sub_10008A368(a1, v5 - v4);
  BOOL v9 = v8 == 10 || *(_BYTE *)(v6 + *(int *)(v2 + 40)) == 0;
  sub_100054F80(v6, type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  return v9;
}

void sub_100089E98(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v40 = a3;
  sub_10005489C(&qword_1000F02A8);
  sub_1000552EC();
  __chkstk_darwin(v4);
  sub_10005878C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (NSDecimal *)((char *)&v37 - v15);
  uint64_t v17 = (int *)sub_10008A41C();
  uint64_t v18 = v17[7];
  Swift::UInt v37 = *(void *)((char *)a1 + v17[8]);
  Swift::UInt v19 = *(void *)((char *)a1 + v17[6]);
  unint64_t v20 = *(void *)((char *)a1 + v17[17]);
  unint64_t v21 = *(void *)((char *)a1 + v18);
  sub_1000684B0((uint64_t)a1 + v17[16], v7, &qword_1000F02A8);
  if (sub_100054CA8(v7, 1LL, v8) == 1)
  {
    static Date.distantPast.getter();
    sub_100054CE0(v7, &qword_1000F02A8);
  }

  else
  {
    sub_10008A424((uint64_t)v14, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  }

  sub_10008A0D8(v37, v19, v20, v21, v16);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v14, v8);
  uint64_t v23 = v38;
  char v24 = static Date.> infix(_:_:)(v16, v38);
  uint64_t v25 = (uint64_t)v39;
  if ((v24 & 1) != 0)
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    uint64_t v27 = (uint64_t)v39;
    uint64_t v28 = (uint64_t)v16;
  }

  else
  {
    v22((char *)v16, v8);
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    uint64_t v27 = v25;
    uint64_t v28 = v23;
  }

  sub_10008A424(v27, v28, v26);
  uint64_t v29 = (char *)a1 + v17[5];
  uint64_t v30 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v31 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v40, v29, v30);
  char v32 = *((_BYTE *)a1 + v17[10]);
  uint64_t v34 = *a1;
  uint64_t v33 = a1[1];
  uint64_t v35 = (int *)sub_10008A404();
  sub_10008A424(v31 + v35[5], v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  *(_BYTE *)(v31 + v35[6]) = v32;
  *(_BYTE *)(v31 + v35[7]) = 2;
  uint64_t v36 = (void *)(v31 + v35[8]);
  *uint64_t v36 = v34;
  v36[1] = v33;
  swift_bridgeObjectRetain(v33);
  sub_1000642E8();
}

void sub_10008A0D8( Swift::UInt a1@<X0>, Swift::UInt a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, NSDecimal *a5@<X8>)
{
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    pow(_:_:)(v11, v9, v10);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    NSDecimal.init(_:)(v18, a1);
    static NSDecimal.* infix(_:_:)(v13, v15, v17, v19, v20, v21);
    NSDecimal._bridgeToObjectiveC()(v22);
    char v24 = v23;
    [v23 doubleValue];
    double v26 = v25;

    v28.n128_f64[0] = (double)a4;
    if ((~*(void *)&v26 & 0x7FF0000000000000LL) != 0 || (*(void *)&v26 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      if (v26 <= v28.n128_f64[0]) {
        v27.n128_f64[0] = v26;
      }
      else {
        v27.n128_f64[0] = (double)a4;
      }
    }

    else
    {
      v27.n128_u64[0] = 0LL;
      if (a3 < 2)
      {
LABEL_6:
        Date.addingTimeInterval(_:)(v27, v28);
        return;
      }
    }

    v27.n128_f64[0] = (double)a4;
    goto LABEL_6;
  }

  __break(1u);
}

void sub_10008A1E4(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_WORD *)a1 = 1;
  *(double *)(a1 + _Block_object_dispose(&a9, 8) = a2;
  if (a2 >= 1800.0) {
    double v2 = 300.0;
  }
  else {
    double v2 = 60.0;
  }
  *(_WORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0LL;
  *(_BYTE *)(a1 + 4_Block_object_dispose(&a9, 8) = 1;
  *(_WORD *)(a1 + 49) = 257;
  *(_BYTE *)(a1 + 51) = 0;
}

void sub_10008A234(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = sub_100064518();
  uint64_t v8 = type metadata accessor for Date(v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100055840();
  sub_10008A42C(a1);
  if (sub_100054CA8(v2, 1LL, v8) == 1)
  {
    sub_100054CE0(v2, &qword_1000F02A8);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v3, v2, v8);
    unint64_t v10 = sub_10008A328();
    dispatch thunk of static Comparable.< infix(_:_:)(a2, v3, v8, v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v8);
  }

  sub_100079A64();
}

unint64_t sub_10008A328()
{
  unint64_t result = qword_1000F0320;
  if (!qword_1000F0320)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, &qword_1000F0320);
  }

  return result;
}

uint64_t sub_10008A368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008A3AC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

uint64_t sub_10008A3C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1 + *(int *)(a1 + 20), v4, v2);
}

uint64_t sub_10008A3E0()
{
  return type metadata accessor for AccountIdentity(0LL);
}

uint64_t sub_10008A3F0@<X0>(char a1@<W8>)
{
  uint64_t result = *(void *)(v2 + 8);
  *(_BYTE *)(v1 + *(int *)(v3 + _Block_release(*(const void **)(v0 + 24)) = a1;
  return result;
}

uint64_t sub_10008A404()
{
  return type metadata accessor for CachedServerDataSyncTaskSchedule(0LL);
}

uint64_t sub_10008A40C(uint64_t a1)
{
  uint64_t v4 = (void *)(v2 + *(int *)(v3 + 32));
  *uint64_t v4 = v1;
  v4[1] = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10008A41C()
{
  return type metadata accessor for CachedServerDataSyncTaskScheduleInput(0LL);
}

uint64_t sub_10008A424@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_10008A42C(uint64_t a1)
{
}

BOOL sub_10008A438(unint64_t a1, unint64_t a2)
{
  BOOL result = (a1 | a2) == 0;
  if (a1)
  {
    if (a2)
    {
      sub_10008A7CC();
      id v5 = (id)a1;
      id v6 = (id)a2;
      char v7 = static NSObject.== infix(_:_:)(v5, v6);

      return v7 & 1;
    }
  }

  return result;
}

BOOL sub_10008A4B0(unint64_t *a1, unint64_t *a2)
{
  return sub_10008A438(*a1, *a2);
}

id sub_10008A4BC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DeviceAccountPrivacyUpdater()) init];
  qword_1000F8D60 = (uint64_t)result;
  return result;
}

id sub_10008A4E8()
{
  if (qword_1000F00B8 != -1) {
    swift_once(&qword_1000F00B8, sub_10008A4BC);
  }
  return (id)qword_1000F8D60;
}

id sub_10008A53C()
{
  uint64_t v1 = OBJC_IVAR____TtC12amsaccountsd27DeviceAccountPrivacyUpdater_stateTracker;
  uint64_t v2 = sub_10005489C(qword_1000F1810);
  uint64_t v3 = swift_allocObject(v2, 120LL, 15LL);
  uint64_t v4 = v0;
  swift_defaultActor_initialize(v3);
  *(void *)(v3 + 112) = 0LL;
  *(void *)&v0[v1] = v3;

  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for DeviceAccountPrivacyUpdater();
  return objc_msgSendSuper2(&v6, "init");
}

id sub_10008A5DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceAccountPrivacyUpdater();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceAccountPrivacyUpdater()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd27DeviceAccountPrivacyUpdater);
}

void **initializeBufferWithCopyOfBuffer for DeviceAccountPrivacyUpdater.State(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for DeviceAccountPrivacyUpdater.State(id *a1)
{
}

void **assignWithCopy for DeviceAccountPrivacyUpdater.State(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *initializeWithTake for DeviceAccountPrivacyUpdater.State(void *result, void *a2)
{
  *id result = *a2;
  return result;
}

void **assignWithTake for DeviceAccountPrivacyUpdater.State(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceAccountPrivacyUpdater.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DeviceAccountPrivacyUpdater.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)id result = 0LL;
    *(_DWORD *)id result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + _Block_object_dispose(&a9, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + _Block_object_dispose(&a9, 8) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }

  return result;
}

uint64_t sub_10008A784(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10008A79C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *id result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceAccountPrivacyUpdater.State()
{
  return &type metadata for DeviceAccountPrivacyUpdater.State;
}

unint64_t sub_10008A7CC()
{
  unint64_t result = qword_1000F1808;
  if (!qword_1000F1808)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000F1808);
  }

  return result;
}

uint64_t sub_10008A810(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10008A88C()
{
  return v0;
}

uint64_t sub_10008A8C4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StateTracker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10008A8E8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateTracker);
}

uint64_t sub_10008A8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10008A914(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100077924((_OWORD *)a1, v2);
    sub_100094530();
    return sub_10005547C();
  }

  else
  {
    sub_10008B8B8(a1);
    sub_1000940B0();
    sub_10005547C();
    return sub_10008B8B8((uint64_t)v2);
  }

uint64_t sub_10008A994(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    __int128 v1 = *(_OWORD *)(a1 + 16);
    v3[0] = *(_OWORD *)a1;
    v3[1] = v1;
    uint64_t v4 = *(void *)(a1 + 32);
    sub_100094560();
    return sub_10005547C();
  }

  else
  {
    sub_10008B8B8(a1);
    sub_100094144();
    sub_10005547C();
    return sub_10008B8B8((uint64_t)v3);
  }

uint64_t sub_10008AA1C()
{
  uint64_t v1 = type metadata accessor for Mirror(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10[3] = type metadata accessor for AccountDataServerRequest.Put(0LL);
  id v5 = sub_1000548F4(v10);
  sub_10008B848(v0, (uint64_t)v5);
  uint64_t v6 = Mirror.init(reflecting:)(v10);
  uint64_t v7 = Mirror.children.getter(v6);
  uint64_t v8 = sub_10008AD8C(v7);
  swift_release(v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t sub_10008AAE8()
{
  uint64_t v1 = type metadata accessor for Mirror(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v9[3] = &unk_1000D8AC8;
  v9[0] = swift_allocObject(&unk_1000DA520, 248LL, 7LL);
  memcpy((void *)(v9[0] + 16LL), v0, 0xE8uLL);
  sub_1000584C0(v0);
  uint64_t v5 = Mirror.init(reflecting:)(v9);
  uint64_t v6 = Mirror.children.getter(v5);
  uint64_t v7 = sub_10008AD8C(v6);
  swift_release(v6);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v7;
}

uint64_t sub_10008ABD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _OWORD v17[3] = &unk_1000D8E18;
  uint64_t v12 = (void *)swift_allocObject(&unk_1000DA548, 48LL, 7LL);
  v17[0] = v12;
  v12[2] = a1;
  void v12[3] = a2;
  void v12[4] = a3;
  v12[5] = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  uint64_t v13 = Mirror.init(reflecting:)(v17);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = sub_10008AD8C(v14);
  swift_release(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v15;
}

uint64_t sub_10008ACDC()
{
  return sub_10008AAE8();
}

uint64_t sub_10008AD14()
{
  return swift_deallocObject(v0, 248LL, 7LL);
}

uint64_t sub_10008AD80()
{
  return sub_10008ABD4(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_10008AD8C(uint64_t a1)
{
  uint64_t v2 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AnyHashable,  &protocol witness table for String);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = dispatch thunk of _AnySequenceBox._makeIterator()(v3);
  swift_release(a1);
  uint64_t v5 = swift_retain(v4);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v105, v5);
  if (!v108)
  {
LABEL_57:
    swift_release_n(v4, 2LL);
    return (uint64_t)v2;
  }

  uint64_t v93 = v4;
  while (1)
  {
    uint64_t v7 = v105;
    uint64_t v6 = v106;
    v103[0] = v105;
    v103[1] = v106;
    sub_100077924(&v107, v104);
    *(void *)&__int128 v100 = v7;
    *((void *)&v100 + 1) = v6;
    sub_10005737C((uint64_t)v104, (uint64_t)&v101);
    if (!v6)
    {
      sub_100077978((uint64_t)v103, &qword_1000F1898);
      uint64_t v18 = sub_100054930(&v101);
      goto LABEL_42;
    }

    swift_bridgeObjectRetain_n(v6, 2LL);
    sub_100054930(&v101);
    *(void *)&__int128 v100 = v7;
    *((void *)&v100 + 1) = v6;
    sub_10005737C((uint64_t)v104, (uint64_t)&v101);
    uint64_t v96 = 0LL;
    __int128 v94 = 0u;
    __int128 v95 = 0u;
    sub_100077978((uint64_t)&v94, &qword_1000F03E0);
    *(void *)&__int128 v100 = v7;
    *((void *)&v100 + 1) = v6;
    sub_10005737C((uint64_t)v104, (uint64_t)&v101);
    uint64_t v19 = sub_10005489C(&qword_1000F18A0);
    if ((swift_dynamicCast(&v97, &v101, (char *)&type metadata for Any + 8, v19, 6LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(v6);
      uint64_t v20 = sub_10008B7F0(&qword_1000F18E0, &qword_1000F18A0, (uint64_t)&protocol conformance descriptor for <A> [A]);
      AnyHashable.init<A>(_:)(&v100, &v97, v19, v20);
      __int128 v97 = v100;
      __int128 v98 = v101;
      uint64_t v99 = v102;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      *(void *)&__int128 v94 = v2;
      unint64_t v22 = sub_10008D974(v7, v6);
      uint64_t v24 = v2[2];
      BOOL v25 = (v23 & 1) == 0;
      Swift::Int v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        goto LABEL_59;
      }
      unint64_t v27 = v22;
      char v28 = v23;
      sub_10005489C(&qword_1000F18D8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
      {
        unint64_t v29 = sub_10008D974(v7, v6);
        if ((v28 & 1) != (v30 & 1)) {
          goto LABEL_65;
        }
        unint64_t v27 = v29;
      }

      uint64_t v2 = (void *)v94;
      if ((v28 & 1) != 0) {
        goto LABEL_18;
      }
      *(void *)(v94 + 8 * (v27 >> 6) + 64) |= 1LL << v27;
      uint64_t v63 = (uint64_t *)(v2[6] + 16 * v27);
      uint64_t *v63 = v7;
      v63[1] = v6;
      uint64_t v64 = v2[7] + 40 * v27;
      __int128 v65 = v97;
      __int128 v66 = v98;
      *(void *)(v64 + 32) = v99;
      *(_OWORD *)uint64_t v64 = v65;
      *(_OWORD *)(v64 + 16) = v66;
      uint64_t v67 = v2[2];
      BOOL v51 = __OFADD__(v67, 1LL);
      uint64_t v68 = v67 + 1;
      if (v51) {
        goto LABEL_62;
      }
LABEL_39:
      _OWORD v2[2] = v68;
      swift_bridgeObjectRetain(v6);
      goto LABEL_40;
    }

    *(void *)&__int128 v100 = v7;
    *((void *)&v100 + 1) = v6;
    sub_10005737C((uint64_t)v104, (uint64_t)&v101);
    uint64_t v31 = sub_10005489C(&qword_1000F18A8);
    if (!swift_dynamicCast(&v94, &v101, (char *)&type metadata for Any + 8, v31, 6LL))
    {
      uint64_t v96 = 0LL;
      __int128 v94 = 0u;
      __int128 v95 = 0u;
      sub_100077978((uint64_t)&v94, &qword_1000F18B0);
      *(void *)&__int128 v100 = v7;
      *((void *)&v100 + 1) = v6;
      sub_10005737C((uint64_t)v104, (uint64_t)&v101);
      swift_bridgeObjectRelease(v6);
      uint64_t v53 = sub_10005489C(&qword_1000F18B8);
      if ((swift_dynamicCast(&v97, &v101, (char *)&type metadata for Any + 8, v53, 6LL) & 1) == 0)
      {
        swift_bridgeObjectRelease(v6);
        uint64_t v18 = sub_100077978((uint64_t)v103, &qword_1000F1898);
        goto LABEL_42;
      }

      uint64_t v54 = v97;
      int64_t v55 = *(void *)(v97 + 16);
      if (v55)
      {
        *(void *)&__int128 v97 = _swiftEmptyArrayStorage;
        sub_100090BDC(0LL, v55, 0);
        uint64_t v92 = v54;
        uint64_t v56 = v54 + 32;
        uint64_t v57 = (void *)v97;
        do
        {
          sub_10008B6F4(v56, (uint64_t)&v100);
          uint64_t v58 = *((void *)&v101 + 1);
          uint64_t v59 = v102;
          sub_100054838(&v100, *((uint64_t *)&v101 + 1));
          uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v58, v59);
          sub_100054930(&v100);
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
          {
            sub_100090BDC(0LL, v57[2] + 1LL, 1);
            uint64_t v57 = (void *)v97;
          }

          unint64_t v62 = v57[2];
          unint64_t v61 = v57[3];
          if (v62 >= v61 >> 1)
          {
            sub_100090BDC((char *)(v61 > 1), v62 + 1, 1);
            uint64_t v57 = (void *)v97;
          }

          v57[2] = v62 + 1;
          v57[v62 + 4] = v60;
          v56 += 40LL;
          --v55;
        }

        while (v55);
        swift_bridgeObjectRelease(v92);
      }

      else
      {
        swift_bridgeObjectRelease(v97);
        uint64_t v57 = _swiftEmptyArrayStorage;
      }

      *(void *)&__int128 v97 = v57;
      uint64_t v75 = sub_10005489C(&qword_1000F18C0);
      unint64_t v76 = sub_10008B738();
      AnyHashable.init<A>(_:)(&v100, &v97, v75, v76);
      __int128 v97 = v100;
      __int128 v98 = v101;
      uint64_t v99 = v102;
      char v77 = swift_isUniquelyReferenced_nonNull_native(v2);
      *(void *)&__int128 v94 = v2;
      unint64_t v78 = sub_10008D974(v7, v6);
      uint64_t v80 = v2[2];
      BOOL v81 = (v79 & 1) == 0;
      Swift::Int v82 = v80 + v81;
      uint64_t v4 = v93;
      if (__OFADD__(v80, v81)) {
        goto LABEL_63;
      }
      unint64_t v27 = v78;
      char v83 = v79;
      sub_10005489C(&qword_1000F18D8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v77, v82))
      {
        unint64_t v84 = sub_10008D974(v7, v6);
        if ((v83 & 1) != (v85 & 1)) {
          goto LABEL_65;
        }
        unint64_t v27 = v84;
      }

      uint64_t v2 = (void *)v94;
      if ((v83 & 1) == 0)
      {
        *(void *)(v94 + 8 * (v27 >> 6) + 64) |= 1LL << v27;
        uint64_t v86 = (uint64_t *)(v2[6] + 16 * v27);
        *uint64_t v86 = v7;
        v86[1] = v6;
        uint64_t v87 = v2[7] + 40 * v27;
        __int128 v88 = v97;
        __int128 v89 = v98;
        *(void *)(v87 + 32) = v99;
        *(_OWORD *)uint64_t v87 = v88;
        *(_OWORD *)(v87 + 16) = v89;
        uint64_t v90 = v2[2];
        BOOL v51 = __OFADD__(v90, 1LL);
        uint64_t v68 = v90 + 1;
        if (v51)
        {
          __break(1u);
          goto LABEL_57;
        }

        goto LABEL_39;
      }

uint64_t sub_10008B6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10008B738()
{
  unint64_t result = qword_1000F18C8;
  if (!qword_1000F18C8)
  {
    uint64_t v1 = sub_1000617F8(&qword_1000F18C0);
    sub_10008B7F0(&qword_1000F18D0, &qword_1000F0CC8, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000F18C8);
  }

  return result;
}

uint64_t sub_10008B7B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10008B7F0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000617F8(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10008B848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008B88C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10008B8B8(uint64_t a1)
{
  return sub_100077978(a1, v1);
}

uint64_t *sub_10008B8C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      unint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      unint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v14 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      unint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

uint64_t sub_10008B9C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 2)
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

uint64_t sub_10008BA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

uint64_t sub_10008BA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008BB04(a1);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }

  return a1;
}

uint64_t sub_10008BB04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FileStoreError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FileStoreError(uint64_t a1)
{
  uint64_t result = qword_1000F1958;
  if (!qword_1000F1958) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FileStoreError);
  }
  return result;
}

uint64_t sub_10008BB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

uint64_t sub_10008BBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008BB04(a1);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }

  return a1;
}

uint64_t sub_10008BC68(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

void sub_10008BCD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!v7) {
    goto LABEL_60;
  }
  uint64_t v8 = v7;
  uint64_t v9 = HIBYTE(v7) & 0xF;
  uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000LL) != 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_60;
  }

  if ((v8 & 0x1000000000000000LL) != 0)
  {
    unint64_t v13 = (unint64_t)sub_10008C778(v6, v8, 10LL);
    char v4 = v39;
    goto LABEL_50;
  }

  if ((v8 & 0x2000000000000000LL) == 0)
  {
    if ((v6 & 0x1000000000000000LL) != 0) {
      uint64_t v12 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v8);
    }
    unint64_t v13 = (unint64_t)sub_10008C85C(v12, v10, 10LL);
    char v4 = v14 & 1;
LABEL_50:
    swift_bridgeObjectRelease(v8);
    if ((v4 & 1) == 0)
    {
      v33.n128_f64[0] = (double)v13;
      Date.addingTimeInterval(_:)(v33, v34);
      uint64_t v35 = 0LL;
LABEL_61:
      uint64_t v38 = type metadata accessor for Date(0LL);
      sub_100054998(a4, v35, 1LL, v38);
      return;
    }

LABEL_60:
    uint64_t v35 = 1LL;
    goto LABEL_61;
  }

  if (v6 == 43)
  {
    if (!v9) {
      goto LABEL_65;
    }
    if (v9 == 1) {
      goto LABEL_34;
    }
    sub_10008D294();
    if (!v19 && v18) {
      goto LABEL_34;
    }
    unint64_t v13 = v22;
    if (v21 != 2)
    {
      sub_10008D294();
      if (!v19 && v18) {
        goto LABEL_34;
      }
      unint64_t v13 = 10LL * v13 + v24;
      if (v23 != 3)
      {
        while (1)
        {
          sub_10008D2A4();
          if (!v19 && v18) {
            goto LABEL_34;
          }
          if (!is_mul_ok(v13, v25)) {
            goto LABEL_34;
          }
          BOOL v18 = __CFADD__(10 * v13, v26);
          unint64_t v13 = 10 * v13 + v26;
          if (v18) {
            goto LABEL_34;
          }
          sub_10008D2B4();
          if (v19) {
            goto LABEL_50;
          }
        }
      }
    }

void sub_10008BFA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v63 = type metadata accessor for Date(0LL);
  uint64_t v56 = *(void *)(v63 - 8);
  sub_100055428();
  __chkstk_darwin(v7);
  sub_100055360();
  uint64_t v55 = v8;
  sub_10005489C(&qword_1000F02A8);
  sub_100055428();
  __chkstk_darwin(v9);
  sub_100055360();
  uint64_t v62 = v10;
  uint64_t v11 = type metadata accessor for Calendar.Identifier(0LL);
  uint64_t v59 = *(void *)(v11 - 8);
  uint64_t v60 = v11;
  sub_100055428();
  __chkstk_darwin(v12);
  sub_10005878C();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for Calendar(0LL);
  uint64_t v57 = *(void *)(v16 - 8);
  uint64_t v58 = v16;
  sub_100055428();
  __chkstk_darwin(v17);
  sub_10005878C();
  uint64_t v20 = v19 - v18;
  sub_10005489C(&qword_1000F1990);
  sub_100055428();
  __chkstk_darwin(v21);
  sub_10005878C();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = type metadata accessor for Locale(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_10005878C();
  uint64_t v29 = v28 - v27;
  sub_10008C520(a1, a2, a3);
  uint64_t v61 = v31;
  if (v30)
  {
    uint64_t v32 = v30;
    uint64_t v53 = a1;
    uint64_t v54 = a2;
    id v33 = [objc_allocWithZone(NSDateFormatter) init];
    Locale.init(identifier:)(0x4F505F53555F6E65LL, 0xEB00000000584953LL);
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
    [v33 setLocale:isa];

    TimeZone.init(secondsFromGMT:)(0LL);
    uint64_t v35 = type metadata accessor for TimeZone(0LL);
    uint64_t v36 = sub_100054CA8(v24, 1LL, v35);
    Class v37 = 0LL;
    if ((_DWORD)v36 != 1)
    {
      Class v37 = TimeZone._bridgeToObjectiveC()().super.isa;
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8LL))(v24, v35);
    }

    sub_10008D2DC(v36, "setTimeZone:");

    sub_10008CF98(0xD00000000000001BLL, 0x80000001000AE270LL, v33);
    (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))( v15,  enum case for Calendar.Identifier.gregorian(_:),  v60);
    Calendar.init(identifier:)(v15);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v15, v60);
    Class v38 = Calendar._bridgeToObjectiveC()().super.isa;
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v20, v58);
    sub_10008D2DC(v39, "setCalendar:");

    uint64_t v40 = v32;
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [v33 dateFromString:v41];

    if (v42)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

      char v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
      v43(v62, v55, v63);
      sub_100054998(v62, 0LL, 1LL, v63);
      uint64_t v45 = v53;
      uint64_t v44 = v54;
      if (sub_100054CA8(v62, 1LL, v63) != 1)
      {
        swift_bridgeObjectRelease(v40);

        v43(a4, v62, v63);
        return;
      }
    }

    else
    {
      sub_100054998(v62, 1LL, 1LL, v63);
      uint64_t v45 = v53;
      uint64_t v44 = v54;
    }

    sub_10008CFE8(v62);
    unint64_t v49 = sub_10008C73C();
    sub_100069C44((uint64_t)&type metadata for HTTPHelpers.Errors, v49);
    *(void *)uint64_t v50 = v45;
    *(void *)(v50 + _Block_object_dispose(&a9, 8) = v44;
    *(void *)(v50 + 16) = v61;
    *(void *)(v50 + 24) = v40;
    *(_BYTE *)(v50 + 32) = 1;
    uint64_t v51 = swift_bridgeObjectRetain(v44);
    swift_willThrow(v51);
  }

  else
  {
    unint64_t v46 = sub_10008C73C();
    sub_100069C44((uint64_t)&type metadata for HTTPHelpers.Errors, v46);
    *(void *)uint64_t v47 = a1;
    *(void *)(v47 + _Block_object_dispose(&a9, 8) = a2;
    *(void *)(v47 + 16) = 0LL;
    *(void *)(v47 + 24) = 0LL;
    *(_BYTE *)(v47 + 32) = 0;
    uint64_t v48 = swift_bridgeObjectRetain(a2);
    swift_willThrow(v48);
  }

uint64_t sub_10008C3DC(__int128 *a1, __int128 *a2)
{
  uint64_t v3 = v24[0];
  uint64_t v4 = v24[1];
  if ((v25 & 1) == 0)
  {
    sub_10008D27C(a2, (uint64_t)&v19);
    if ((v23 & 1) == 0)
    {
      uint64_t v15 = v19;
      uint64_t v16 = v20;
      if (v3 != v19 || v4 != v20)
      {
        uint64_t v13 = v3;
        uint64_t v14 = v4;
        goto LABEL_20;
      }

uint64_t sub_10008C4D8(__int128 *a1, __int128 *a2)
{
  return sub_10008C3DC(v4, v5) & 1;
}

void sub_10008C520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  int64_t v9 = 0LL;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v22 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    v28[2] = *v22;
    v28[3] = v23;
    v28[0] = a1;
    v28[1] = a2;
    unint64_t v25 = sub_10006C2CC();
    swift_bridgeObjectRetain(v23);
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)( v28,  &type metadata for String,  &type metadata for String,  v25,  v25))
    {
      sub_10008D334(v24, v23, a3);
      swift_release(a3);
      swift_bridgeObjectRelease(v23);
      return;
    }

    swift_bridgeObjectRelease(v23);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v12 >= v27) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v26 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      sub_10008D2D0();
      if (v14 == v15) {
        goto LABEL_32;
      }
      sub_10008D2C4();
      if (!v13)
      {
        int64_t v9 = v16 + 2;
        sub_10008D2D0();
        if (v14 == v15) {
          goto LABEL_32;
        }
        sub_10008D2C4();
        if (!v13)
        {
          int64_t v9 = v17 + 3;
          sub_10008D2D0();
          if (v14 == v15) {
            goto LABEL_32;
          }
          sub_10008D2C4();
          if (!v13)
          {
            int64_t v9 = v18 + 4;
            sub_10008D2D0();
            if (v14 == v15) {
              goto LABEL_32;
            }
            sub_10008D2C4();
            if (!v13) {
              break;
            }
          }
        }
      }
    }

unint64_t sub_10008C73C()
{
  unint64_t result = qword_1000F1998;
  if (!qword_1000F1998)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7BE0, &type metadata for HTTPHelpers.Errors);
    atomic_store(result, (unint64_t *)&qword_1000F1998);
  }

  return result;
}

unsigned __int8 *sub_10008C778(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_10008CAD8(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v7);
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    unint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

unsigned __int8 *sub_10008C85C(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v17 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v18 = a3 + 48;
        unsigned __int8 v19 = a3 + 55;
        unsigned __int8 v20 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = 58;
        }

        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }

        if (result)
        {
          unint64_t v9 = 0LL;
          uint64_t v21 = result + 1;
          do
          {
            unsigned int v22 = *v21;
            if (v22 < 0x30 || v22 >= v18)
            {
              if (v22 < 0x41 || v22 >= v19)
              {
                uint64_t v13 = 0LL;
                if (v22 < 0x61 || v22 >= v20) {
                  return (unsigned __int8 *)v13;
                }
                char v23 = -87;
              }

              else
              {
                char v23 = -55;
              }
            }

            else
            {
              char v23 = -48;
            }

            if (!is_mul_ok(v9, a3)) {
              return 0LL;
            }
            unint64_t v24 = v9 * a3;
            unsigned __int8 v25 = v22 + v23;
            BOOL v16 = __CFADD__(v24, v25);
            unint64_t v9 = v24 + v25;
            if (v16) {
              return 0LL;
            }
            ++v21;
            --v17;
          }

          while (v17);
          return (unsigned __int8 *)v9;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v26 = a3 + 48;
        unsigned __int8 v27 = a3 + 55;
        unsigned __int8 v28 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = 58;
        }

        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }

        if (result)
        {
          unint64_t v29 = 0LL;
          do
          {
            unsigned int v30 = *result;
            if (v30 < 0x30 || v30 >= v26)
            {
              if (v30 < 0x41 || v30 >= v27)
              {
                uint64_t v13 = 0LL;
                if (v30 < 0x61 || v30 >= v28) {
                  return (unsigned __int8 *)v13;
                }
                char v31 = -87;
              }

              else
              {
                char v31 = -55;
              }
            }

            else
            {
              char v31 = -48;
            }

            if (!is_mul_ok(v29, a3)) {
              return 0LL;
            }
            unint64_t v32 = v29 * a3;
            unsigned __int8 v33 = v30 + v31;
            BOOL v16 = __CFADD__(v32, v33);
            unint64_t v29 = v32 + v33;
            if (v16) {
              return 0LL;
            }
            ++result;
            --v3;
          }

          while (v3);
          return (unsigned __int8 *)v29;
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }

        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }

        if (result)
        {
          unint64_t v9 = 0LL;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0LL;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }

              else
              {
                char v12 = -55;
              }
            }

            else
            {
              char v12 = -48;
            }

            if (!is_mul_ok(v9, a3)) {
              return 0LL;
            }
            unint64_t v14 = v9 * a3;
            unsigned __int8 v15 = v11 + v12;
            BOOL v16 = v14 >= v15;
            unint64_t v9 = v14 - v15;
            if (!v16) {
              return 0LL;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10008CAD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_10008CB34((uint64_t)sub_10008CB30, 0LL, a1, a2);
  unint64_t v4 = v3;
  uint64_t v7 = sub_10008CB68(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_10008CB34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16));
}

uint64_t sub_10008CB68(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_10008CCAC(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      sub_100093E3C(v12, 0LL);
      unint64_t v8 = (unint64_t)v13;
      unint64_t v5 = sub_10008CD98((unint64_t)v16, (uint64_t)(v13 + 4), v9, a1, a2, v5, a4);
      uint64_t v14 = v16[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v14);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v15 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v15;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_10008CCAC( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v_Block_object_dispose(&a9, 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    unint64_t result = sub_10006ED38(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_10006ED38(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_10008CD98( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      unint64_t result = sub_10006ED38(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
      }

      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
      }
    }

    if ((v12 & 0xC) == v15)
    {
      unint64_t result = sub_10006ED38(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + sub_100079ADC(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_10008CF98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setDateFormat:v5];
}

uint64_t sub_10008CFE8(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F02A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10008D028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = a2;
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = a4;
  }

  return swift_bridgeObjectRetain(v5);
}

uint64_t destroy for HTTPHelpers.Errors(uint64_t a1)
{
  return sub_10008D068( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_10008D068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease(a2);
  if ((a5 & 1) != 0) {
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t initializeWithCopy for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10008D028(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10008D028(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(_BYTE *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_10008D068(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(_BYTE *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_10008D068(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHelpers.Errors(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHelpers.Errors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10008D258(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_10008D260(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPHelpers.Errors()
{
  return &type metadata for HTTPHelpers.Errors;
}

uint64_t sub_10008D27C(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

id sub_10008D2DC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

double sub_10008D2E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10008E124(a1, a2), (v7 & 1) != 0))
  {
    sub_10005737C(*(void *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t sub_10008D334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_10008E124(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  unint64_t v6 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

uint64_t sub_10008D384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_10008E124(a1, a2), (v5 & 1) != 0)) {
    return swift_retain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10008D3C0(uint64_t a1, void *a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a2 contentsAtPath:v4];

  if (v5)
  {
    sub_100055948();
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

    return v6;
  }

  NSString v8 = String._bridgeToObjectiveC()();
  sub_100055948();
  unsigned int v9 = [a2 fileExistsAtPath:v8];

  if (v9)
  {
    char v10 = static DeviceDetails.deviceUnlockedSinceBoot()();
    if (v10 == 2)
    {
      uint64_t v11 = sub_10008E11C();
      uint64_t v12 = sub_10006F3C4(&qword_1000F02A0, type metadata accessor for FileStoreError, (uint64_t)&unk_1000A7B64);
      sub_100069C44(v11, v12);
      uint64_t v14 = v13;
      uint64_t v15 = sub_10006BF90();
      sub_10008E0CC(v15);
      uint64_t v16 = v14;
      uint64_t v17 = v11;
LABEL_9:
      uint64_t v23 = 1LL;
      goto LABEL_10;
    }

    char v24 = v10;
    uint64_t v25 = sub_10008E11C();
    uint64_t v26 = sub_10006F3C4(&qword_1000F02A0, type metadata accessor for FileStoreError, (uint64_t)&unk_1000A7B64);
    sub_100069C44(v25, v26);
    uint64_t v28 = v27;
    uint64_t v29 = sub_10006BF90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v28, a1, v29);
    uint64_t v16 = v28;
    uint64_t v17 = v25;
    if ((v24 & 1) != 0) {
      goto LABEL_9;
    }
    uint64_t v23 = 2LL;
  }

  else
  {
    uint64_t v18 = sub_10008E11C();
    uint64_t v19 = sub_10006F3C4(&qword_1000F02A0, type metadata accessor for FileStoreError, (uint64_t)&unk_1000A7B64);
    sub_100069C44(v18, v19);
    uint64_t v21 = v20;
    uint64_t v22 = sub_10006BF90();
    sub_10008E0CC(v22);
    uint64_t v16 = v21;
    uint64_t v17 = v18;
    uint64_t v23 = 0LL;
  }

uint64_t sub_10008D5B8(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = type metadata accessor for URLResourceValues(0LL);
  v45[2] = *(void *)(v6 - 8);
  v45[3] = v6;
  __chkstk_darwin(v6);
  NSString v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10006BF90();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.relativePath.getter(v11);
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  *(void *)&__int128 v49 = 0LL;
  unsigned int v17 = [a3 createDirectoryAtPath:v16 withIntermediateDirectories:a2 & 1 attributes:0 error:&v49];

  uint64_t v18 = (void *)v49;
  if (v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
    URLResourceValues.init()(v18);
    URLResourceValues.isExcludedFromBackup.setter(1LL);
    uint64_t v19 = v45[1];
    URL.setResourceValues(_:)(v8);
    if (!v19)
    {
      sub_10008E0F4();
      return sub_10008E0E4();
    }

    sub_10008E0F4();
    sub_10008E0E4();
    uint64_t v20 = v19;
  }

  else
  {
    id v21 = (id)v49;
    uint64_t v20 = _convertNSErrorToError(_:)(v18);

    sub_1000892B0();
  }

  uint64_t v48 = v20;
  swift_errorRetain(v20);
  uint64_t v22 = sub_10005489C(&qword_1000F0288);
  uint64_t v23 = sub_100054B08(0LL, &qword_1000F19A0, &OBJC_CLASS___NSError_ptr);
  uint64_t v24 = swift_errorRelease(v20);
  uint64_t v25 = v47;
  id v26 = sub_100055E48(v24, "userInfo");
  uint64_t v27 = (char *)&type metadata for Any + 8;
  uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v26,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  uint64_t v31 = v30;
  sub_10008D2E8(v29, v30, v28, &v49);
  swift_bridgeObjectRelease(v31);
  sub_100055868();
  if (v50)
  {
    uint64_t v32 = swift_dynamicCast(&v46, &v49, (char *)&type metadata for Any + 8, v23, 6LL);
    if ((v32 & 1) != 0)
    {
      unsigned __int8 v33 = v46;
      id v34 = sub_100055E48(v32, "domain");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      sub_10008E110();
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
      if (v31 == v35 && v27 == (char *)v36)
      {
        uint64_t v38 = sub_10008E104();
      }

      else
      {
        uint64_t v31 = sub_10008E0B0(v35, v36);
        sub_100055948();
        uint64_t v38 = sub_100055868();
        if ((v31 & 1) == 0) {
          goto LABEL_23;
        }
      }

      if (sub_100055E48(v38, "code") == (id)516)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)([v33 domain]);
        sub_10008E110();
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
        if (v31 == v40 && v27 == (char *)v41)
        {
          sub_10008E104();
        }

        else
        {
          char v43 = sub_10008E0B0(v40, v41);
          sub_100055948();
          sub_100055868();
          if ((v43 & 1) == 0) {
            goto LABEL_23;
          }
        }

        id v44 = [v33 code];

        if (v44 == (id)17)
        {

          return swift_errorRelease(v48);
        }

        goto LABEL_24;
      }

LABEL_24:
  sub_1000892B0();
  return swift_errorRelease(v48);
}

    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v11 = v16;
  }

  unsigned int v17 = v11 + 5;
  if (v11 + 5 >= v8)
  {
LABEL_36:
    swift_release(v3);
    sub_100057374(a1);
    return (Swift::Int)v3;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v17);
  if (v15)
  {
    NSString v16 = v11 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    NSString v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v8) {
      goto LABEL_36;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_24;
    }
  }

unint64_t sub_10008D974(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10008DAF4(a1, a2, v4);
}

unint64_t sub_10008D9D8(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_10008DBD4(a1, v5);
}

unint64_t sub_10008DA58(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10008DD48(a1, v4);
}

unint64_t sub_10008DA88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v6 = sub_10006F3C4( (unint64_t *)&qword_1000F1EC0,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10008DE60(a1, v7);
}

unint64_t sub_10008DAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10008DBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_10008DD48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100054B08(0LL, &qword_1000F0968, &OBJC_CLASS___AMSAccountIdentity_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10008DE60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a1;
  uint64_t v5 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_10006F3C4( &qword_1000F19A8,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v17, v5);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

uint64_t sub_10008DFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t getEnumTagSinglePayload for LiveFileStore(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 8))
    {
      LODWORD(sub_100054998(v4, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_100054998(v4, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveFileStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + _Block_object_dispose(&a9, 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiveFileStore()
{
  return &type metadata for LiveFileStore;
}

uint64_t sub_10008E0B0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

uint64_t sub_10008E0CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v2, v1, a1);
}

uint64_t sub_10008E0E4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10008E0F4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 160) + 8LL))(v0, *(void *)(v1 - 152));
}

uint64_t sub_10008E104()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

void sub_10008E110()
{
}

uint64_t sub_10008E11C()
{
  return type metadata accessor for FileStoreError(0LL);
}

unint64_t sub_10008E124(uint64_t a1, uint64_t a2)
{
  return sub_10008D974(a1, a2);
}

uint64_t sub_10008E12C(uint64_t a1)
{
  uint64_t v18 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t result = sub_100091014(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v20;
  int64_t v7 = (unint64_t)(v19[2] + 64LL) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    char v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_10008F2DC(v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease(v17[1]);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10008E2A8(uint64_t a1)
{
  uint64_t v19 = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t result = sub_100091014(a1, v20);
  uint64_t v3 = v20[0];
  uint64_t v4 = v20[1];
  int64_t v5 = v20[3];
  unint64_t v6 = v21;
  int64_t v7 = (unint64_t)(v20[2] + 64LL) >> 6;
  if (!v21) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    sub_1000585E0(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v17);
    v14[0] = v17[0];
    v14[1] = v17[1];
    uint64_t v15 = v18;
    sub_10008F164((uint64_t)v16, (uint64_t)v14);
    uint64_t result = sub_100058670((uint64_t)v16);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10008E434(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      sub_1000642E0();
      sub_10008F2DC(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease(a1);
  }

  return v7;
}

void *sub_10008E4E0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    sub_100090BC0(0LL, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000585E0(v4, (uint64_t)v8);
      swift_dynamicCast(v9, v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100090BC0(0LL, v2[2] + 1LL, 1);
        uint64_t v2 = v10;
      }

      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100090BC0((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v10;
      }

      _OWORD v2[2] = v6 + 1;
      sub_100077924(v9, &v2[4 * v6 + 4]);
      v4 += 40LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_10008E604(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_100090C60(0LL, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = type metadata accessor for AMPAccount(0LL);
    uint64_t v5 = 0LL;
    uint64_t v17 = *(void *)(v4 - 8);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    do
    {
      uint64_t v22 = v4;
      uint64_t v23 = &off_1000D9450;
      unint64_t v6 = sub_1000548F4(v21);
      sub_10006BAF0(v16 + *(void *)(v17 + 72) * v5, (uint64_t)v6);
      uint64_t v24 = v2;
      unint64_t v8 = v2[2];
      unint64_t v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_100090C60((char *)(v7 > 1), v8 + 1, 1);
        uint64_t v2 = v24;
      }

      ++v5;
      uint64_t v9 = sub_100088CCC((uint64_t)v21, v22);
      __chkstk_darwin(v9);
      unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v12 + 16))(v11);
      uint64_t v19 = v4;
      unint64_t v20 = &off_1000D9450;
      int64_t v13 = sub_1000548F4(&v18);
      sub_10006BAAC((uint64_t)v11, (uint64_t)v13);
      _OWORD v2[2] = v8 + 1;
      sub_10006F5F8(&v18, (uint64_t)&v2[5 * v8 + 4]);
      sub_100054930(v21);
    }

    while (v1 != v5);
  }

  return v2;
}

void sub_10008E7A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  sub_1000642E0();
  id v4 = sub_10008EB9C(v2, v3);
  sub_1000913A4(a1[2], a1[3], v4);
  [v4 setSuppressEngagement:1];
  NSString v5 = [(id)objc_opt_self(AMSDevice) operatingSystem];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v5 = String._bridgeToObjectiveC()();
    sub_100055778();
  }

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setProperty:v5 forBodyKey:v6];

  uint64_t v7 = a1[4];
  uint64_t v36 = a1;
  uint64_t v37 = v7 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(v7 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(v7);
  int64_t v12 = 0LL;
  if (!v10) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v14 = v13 | (v12 << 6);
  while (2)
  {
    uint64_t v15 = *(void *)(v7 + 56);
    uint64_t v16 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    uint64_t v17 = v16[1];
    *(void *)&__int128 v38 = *v16;
    *((void *)&v38 + 1) = v17;
    sub_10005737C(v15 + 32 * v14, (uint64_t)v39);
    swift_bridgeObjectRetain(v17);
    while (1)
    {
      sub_1000913E8((uint64_t)&v38, (uint64_t)&v40);
      uint64_t v21 = v41;
      if (!v41)
      {
        swift_release(v7);
        uint64_t v26 = swift_bridgeObjectRetain(v7);
        uint64_t v27 = sub_10008E12C(v26);
        uint64_t v28 = swift_bridgeObjectRetain(v36[5]);
        uint64_t v29 = sub_10008EC0C(v28, v27);
        id v30 = [v4 underlyingDictionary];
        uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v30,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

        uint64_t v32 = sub_10008E2A8(v31);
        Swift::Int v33 = sub_10008ECA4(v29);
        sub_1000573CC();
        uint64_t v40 = v32;
        sub_10009112C(v33);
        id v34 = sub_10009104C(v40);
        sub_1000573CC();
        sub_10008E4E0((uint64_t)v34);
        swift_release(v34);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        sub_1000573CC();
        [v4 removePropertiesForKeys:isa];

        return;
      }

      sub_100077924(&v42, &v38);
      uint64_t v22 = *((void *)&v39[0] + 1);
      uint64_t v23 = sub_100054838(&v38, *((uint64_t *)&v39[0] + 1));
      uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)(v23, v22);
      sub_100054930(&v38);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
      [v4 setProperty:v24 forBodyKey:v25];
      swift_unknownObjectRelease(v24);

      if (v10) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v18 = v12 + 1;
      if (__OFADD__(v12, 1LL))
      {
        __break(1u);
        goto LABEL_31;
      }

      if (v18 < v11)
      {
        unint64_t v19 = *(void *)(v37 + 8 * v18);
        if (v19) {
          goto LABEL_11;
        }
        int64_t v20 = v12 + 2;
        ++v12;
        if (v18 + 1 < v11)
        {
          unint64_t v19 = *(void *)(v37 + 8 * v20);
          if (v19) {
            goto LABEL_14;
          }
          int64_t v12 = v18 + 1;
          if (v18 + 2 < v11)
          {
            unint64_t v19 = *(void *)(v37 + 8 * (v18 + 2));
            if (v19)
            {
              v18 += 2LL;
              goto LABEL_11;
            }

            int64_t v20 = v18 + 3;
            int64_t v12 = v18 + 2;
            if (v18 + 3 < v11) {
              break;
            }
          }
        }
      }

id sub_10008EB9C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithTopic:v5];

  return v6;
}

uint64_t sub_10008EC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10008F2DC(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }

  else
  {
    uint64_t v7 = a2;
    swift_bridgeObjectRelease(a1);
  }

  return v7;
}

Swift::Int sub_10008ECA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10005489C((uint64_t *)&unk_1000F1BD0);
    uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }

  uint64_t v4 = a1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  uint64_t v9 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  Swift::Int result = swift_retain(v3);
  int64_t v11 = 0LL;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v13 = v12 | (v11 << 6);
  while (1)
  {
    int64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    *(void *)&__int128 v29 = *v18;
    *((void *)&v29 + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(v32, &v29, &type metadata for String, &type metadata for AnyHashable, 7LL);
    __int128 v29 = v32[0];
    __int128 v30 = v32[1];
    uint64_t v31 = v33;
    Swift::Int result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v20 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)&v9[8 * (v21 >> 6)]) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v9[8 * v22];
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)&v9[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)&v9[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v23;
    uint64_t v28 = v3[6] + 40 * v23;
    *(_OWORD *)uint64_t v28 = v29;
    *(_OWORD *)(v28 + 16) = v30;
    *(void *)(v28 + 32) = v31;
    ++v3[2];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_38;
    }
    if (v14 >= v8) {
      goto LABEL_36;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    int64_t v16 = v11 + 1;
    if (!v15)
    {
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v8) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v11 + 3;
        if (v11 + 3 >= v8) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v11 + 4;
          if (v11 + 4 >= v8) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_10008EF90()
{
  return v0;
}

uint64_t sub_10008EFB4()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for MetricsCommon()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd13MetricsCommon);
}

void sub_10008EFF4(uint64_t *a1)
{
  if ((static DeviceDetails.deviceIsRunningInternalBuild()() & 1) != 0)
  {
    sub_10008E7A0(a1);
    id v4 = v3;
    [*(id *)(v1 + 24) enqueueEvent:v3];
  }

uint64_t type metadata accessor for MetricsOnInternalBuilds()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd23MetricsOnInternalBuilds);
}

void sub_10008F074(uint64_t *a1)
{
}

void sub_10008F094(uint64_t *a1)
{
  id v3 = v2;
  [*(id *)(v1 + 24) enqueueEvent:v2];
}

uint64_t type metadata accessor for MetricsOnAllBuilds()
{
  return objc_opt_self(&OBJC_CLASS____TtC12amsaccountsd18MetricsOnAllBuilds);
}

void sub_10008F0EC(uint64_t *a1)
{
}

unint64_t sub_10008F10C()
{
  unint64_t result = qword_1000F1BA8;
  if (!qword_1000F1BA8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMetricsEvent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000F1BA8);
  }

  return result;
}

uint64_t sub_10008F148(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_10008F164(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40LL);
  swift_bridgeObjectRetain(v6);
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_1000585E0(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      char v12 = static AnyHashable.== infix(_:_:)(v18, a2);
      sub_100058670((uint64_t)v18);
      if ((v12 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease(v6);
    sub_100058670(a2);
    sub_1000585E0(*(void *)(*v3 + 48LL) + 40 * v10, a1);
    return 0LL;
  }

  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_1000585E0(a2, (uint64_t)v18);
    uint64_t v17 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1000908C0((uint64_t)v18, v10, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    void *v3 = v17;
    swift_bridgeObjectRelease(v14);
    __int128 v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1LL;
  }

uint64_t sub_10008F2DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v26);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10009169C();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    unint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_10009168C(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_100055778();
      swift_bridgeObjectRelease(v7);
      int64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_10009169C();
      if ((v20 & 1) == 0) {
        break;
      }
      unint64_t v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_10009168C(*v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  sub_1000642E0();
  sub_100090A28(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  void *v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_10008F450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t v6 = *v3;
  Swift::Int v7 = *(void *)(*v3 + 40LL);
  swift_bridgeObjectRetain(*v3);
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_1000585E0(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)(v19, a1);
      sub_100058670((uint64_t)v19);
      if ((v12 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    v19[0] = *v3;
    void *v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10008FC9C();
      uint64_t v15 = v19[0];
    }

    uint64_t v16 = *(void *)(v15 + 48) + 40 * v10;
    __int128 v17 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v16;
    *(_OWORD *)(a2 + 16) = v17;
    *(void *)(a2 + 32) = *(void *)(v16 + 32);
    sub_10009054C(v10);
    uint64_t v18 = *v3;
    void *v3 = v19[0];
    return swift_bridgeObjectRelease(v18);
  }

  else
  {
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease(v6);
    *(void *)(a2 + 32) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t sub_10008F5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v24);
  sub_1000642E0();
  String.hash(into:)(v24, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_1000916B0();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    sub_100055778();
    return 0LL;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
  uint64_t v12 = v11[1];
  BOOL v13 = *v11 == a1 && v12 == a2;
  if (!v13 && (sub_10009167C(*v11, v12) & 1) == 0)
  {
    uint64_t v18 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v18;
      sub_1000916B0();
      if ((v19 & 1) == 0) {
        goto LABEL_18;
      }
      char v20 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v21 = v20[1];
      BOOL v22 = *v20 == a1 && v21 == a2;
    }

    while (!v22 && (sub_10009167C(*v20, v21) & 1) == 0);
  }

  sub_100055778();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v15 = *v2;
  v24[0] = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10008FE68();
    uint64_t v15 = v24[0];
  }

  uint64_t v16 = *(void *)(*(void *)(v15 + 48) + 16 * v8);
  sub_100090708(v8);
  uint64_t v17 = *v2;
  void *v2 = v24[0];
  swift_bridgeObjectRelease(v17);
  return v16;
}

Swift::Int sub_10008F700(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10005489C((uint64_t *)&unk_1000F1BD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    unint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(v3 + 48) + 40 * i;
      __int128 v32 = *(_OWORD *)v20;
      __int128 v33 = *(_OWORD *)(v20 + 16);
      uint64_t v34 = *(void *)(v20 + 32);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      uint64_t v29 = *(void *)(v6 + 48) + 40 * v24;
      *(_OWORD *)uint64_t v29 = v32;
      *(_OWORD *)(v29 + 16) = v33;
      *(void *)(v29 + 32) = v34;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v31;
              uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
              if (v30 > 63) {
                sub_10008F148(0LL, (unint64_t)(v30 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *unint64_t v8 = -1LL << v30;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

Swift::Int sub_10008F9C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10005489C(&qword_1000F03C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    __int128 v32 = v2;
    __int128 v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *uint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_10008F148(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                void *v33 = -1LL << v31;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void *sub_10008FC9C()
{
  uint64_t v1 = v0;
  sub_10005489C((uint64_t *)&unk_1000F1BD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = 5 * i;
    Swift::Int result = (void *)sub_1000585E0(*(void *)(v2 + 48) + 40 * i, (uint64_t)v24);
    uint64_t v21 = *(void *)(v4 + 48) + 8 * v20;
    __int128 v22 = v24[0];
    __int128 v23 = v24[1];
    *(void *)(v21 + 32) = v25;
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void *sub_10008FE68()
{
  uint64_t v1 = v0;
  sub_10005489C(&qword_1000F03C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    __int128 v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v22 = *v20;
    v22[1] = v21;
    Swift::Int result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_100090018(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10005489C((uint64_t *)&unk_1000F1BD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v31 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    sub_1000585E0(*(void *)(v3 + 48) + 40 * i, (uint64_t)v32);
    Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
    uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = *(void *)(v6 + 48) + 40 * v23;
    __int128 v29 = v32[0];
    __int128 v30 = v32[1];
    *(void *)(v28 + 32) = v33;
    *(_OWORD *)uint64_t v28 = v29;
    *(_OWORD *)(v28 + 16) = v30;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_39;
    }
    if (v17 >= v11) {
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_1000902A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10005489C(&qword_1000F03C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    __int128 v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *__int128 v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

unint64_t sub_10009054C(unint64_t result)
{
  uint64_t v2 = v1;
  int64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1 + 56LL;
  uint64_t v6 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1LL << v7) & *(void *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    swift_retain(*v1);
    uint64_t v9 = _HashTable.previousHole(before:)(v3, v5, v8);
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1LL << v7)) != 0)
    {
      unint64_t v10 = (v9 + 1) & v8;
      do
      {
        sub_1000585E0(*(void *)(v4 + 48) + 40 * v7, (uint64_t)v25);
        Swift::Int v11 = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
        sub_100058670((uint64_t)v25);
        Swift::Int v12 = v11 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v12 >= v10 && v3 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v4 + 48);
            unint64_t v16 = v15 + 40 * v3;
            unint64_t v17 = (__int128 *)(v15 + 40 * v7);
            BOOL v18 = v3 != v7 || v16 >= (unint64_t)v17 + 40;
            int64_t v3 = v7;
            if (v18)
            {
              __int128 v19 = *v17;
              __int128 v20 = v17[1];
              *(void *)(v16 + 32) = *((void *)v17 + 4);
              *(_OWORD *)unint64_t v16 = v19;
              *(_OWORD *)(v16 + 16) = v20;
              int64_t v3 = v7;
            }
          }
        }

        else if (v12 >= v10 || v3 >= v12)
        {
          goto LABEL_15;
        }

        unint64_t v7 = (v7 + 1) & v8;
      }

      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
    }

    *(void *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v3) - 1;
    Swift::Int result = swift_release(v4);
  }

  else
  {
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *v2;
  uint64_t v22 = *(void *)(*v2 + 16LL);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }

  return result;
}

unint64_t sub_100090708(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            BOOL v18 = (_OWORD *)(v17 + 16 * v2);
            __int128 v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              _OWORD *v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Swift::Int result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1000908C0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10008F700(v9);
  }

  else
  {
    if (v8 > v7)
    {
      Swift::Int result = (uint64_t)sub_10008FC9C();
      goto LABEL_12;
    }

    sub_100090018(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = ~v11;
    do
    {
      sub_1000585E0(*(void *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      char v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      Swift::Int result = sub_100058670((uint64_t)v20);
      if ((v13 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v12;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_100090A28(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10008F9C4(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_10008FE68();
      goto LABEL_22;
    }

    sub_1000902A4(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    __int128 v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

char *sub_100090BC0(char *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100090C7C(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_100090BDC(char *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100090D5C(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_100090BF8(void *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100090E3C( a1,  a2,  a3,  *v3,  &qword_1000F0CF8,  (void (*)(uint64_t, uint64_t, void *))sub_10006E740,  (void (*)(uint64_t, uint64_t, void *))sub_10006EBFC);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_100090C2C(void *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100090E3C( a1,  a2,  a3,  *v3,  (uint64_t *)&unk_1000F1BF0,  (void (*)(uint64_t, uint64_t, void *))sub_10006E740,  (void (*)(uint64_t, uint64_t, void *))sub_10006EA2C);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_100090C60(char *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100090F28(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_100090C7C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10005489C(&qword_1000F1BB8);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10006E798(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10006EAC4((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

char *sub_100090D5C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10005489C((uint64_t *)&unk_1000F1BE0);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10006E878(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10006EB60((uint64_t)v13, v8);
  }

  swift_release(a4);
  return v11;
}

void *sub_100090E3C( void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v12 = a2;
  }

  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = sub_10005489C(a5);
    __int128 v16 = (void *)swift_allocObject(v15, 16 * v14 + 32, 7LL);
    size_t v17 = j__malloc_size(v16);
    void v16[2] = v13;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 16);
  }

  else
  {
    __int128 v16 = &_swiftEmptyArrayStorage;
  }

  BOOL v18 = v16 + 4;
  uint64_t v19 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v19, v13, v18);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    a7(v19, v13, v18);
  }

  swift_release(a4);
  return v16;
}

char *sub_100090F28(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10005489C(&qword_1000F0CE8);
    unint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10006E8D0(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10006EC98((uint64_t)v13, v8);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_100091014@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

void *sub_10009104C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10005489C((uint64_t *)&unk_1000F1BC0);
  uint64_t v4 = (void *)swift_allocObject(v3, 40 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size(v4);
  __int128 v4[2] = v1;
  void v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  uint64_t v6 = sub_100091430((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100057374(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_10009112C(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  int64_t v4 = 0LL;
  uint64_t v21 = result + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(result + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v20 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_21;
    }

    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v10 >= v20) {
      return sub_100057374(v3);
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v20) {
        return sub_100057374(v3);
      }
      unint64_t v11 = *(void *)(v21 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v20) {
          return sub_100057374(v3);
        }
        unint64_t v11 = *(void *)(v21 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }

void sub_1000913A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setEventType:v4];
}

uint64_t sub_1000913E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005489C(&qword_1000F1BB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
LABEL_36:
    void *v5 = a4;
    v5[1] = v6;
    __int128 v5[2] = ~v7;
    __int128 v5[3] = v12;
    v5[4] = v9;
    return v13;
  }

  if (!a3)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v22 = -1LL << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    uint64_t result = sub_1000585E0(*(void *)(a4 + 48) + 40 * v16, (uint64_t)v23);
    uint64_t v20 = v24;
    __int128 v21 = v23[1];
    *(_OWORD *)uint64_t v11 = v23[0];
    *(_OWORD *)(v11 + 16) = v21;
    *(void *)(v11 + 32) = v20;
    v11 += 40LL;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v22;
      goto LABEL_36;
    }
  }

  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v17 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2LL;
    goto LABEL_22;
  }

  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3LL;
    goto LABEL_22;
  }

  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0LL;
    goto LABEL_35;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v17 = v19;
LABEL_22:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

uint64_t sub_100091638(uint64_t a1)
{
  uint64_t v2 = sub_10005489C(&qword_1000F03E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009167C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10009168C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

  ;
}

  ;
}

uint64_t sub_1000916C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)_convertErrorToNSError(_:)(a1);
  id v4 = [v3 code];
  int64_t v12 = sub_10009179C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v25, (char)v4);
  sub_10008A914((uint64_t)v12);
  id v13 = [v3 domain];
  char v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  uint64_t v23 = sub_10009179C(v15, v16, v17, v18, v19, v20, v21, v22, v26, v14);
  sub_10008A914((uint64_t)v23);

  return a2;
}

char *sub_10009179C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t sub_1000917B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return swift_task_switch(sub_1000917D0, 0LL, 0LL);
}

uint64_t sub_1000917D0@<X0>(NSURL *a1@<X8>)
{
  Class isa = *(Class *)(v1 + 144);
  URL._bridgeToObjectiveC()(a1);
  uint64_t v4 = v3;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v5 = v1 + 16;
  id v6 =  [*(id *)(v1 + 160) requestWithMethod:*(void *)(v1 + 128) URL:v4 headers:isa parameters:*(void *)(v1 + 152)];
  *(void *)(v1 + 16_Block_object_dispose(&a9, 8) = v6;

  *(void *)(v1 + 56) = v1 + 120;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_1000918D4;
  uint64_t v7 = swift_continuation_init(v1 + 16, 1LL);
  *(void *)(v1 + 80) = _NSConcreteStackBlock;
  uint64_t v8 = (void *)(v1 + 80);
  v8[1] = 0x40000000LL;
  v8[2] = sub_100070B5C;
  v8[3] = &unk_1000DA760;
  void v8[4] = v7;
  [v6 resultWithCompletion:v8];
  return swift_continuation_await(v5);
}

uint64_t sub_1000918D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 176LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100091970;
  }
  else {
    uint64_t v2 = sub_100091934;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100091934()
{
  uint64_t v1 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100091970()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Date.utcGregorianTimestamp(year:month:day:hour:minute:second:millisecond:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = sub_10005489C(&qword_1000F1990);
  __chkstk_darwin(v7);
  sub_10005878C();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_10005489C((uint64_t *)&unk_1000F1CD0);
  __chkstk_darwin(v11);
  sub_10005878C();
  uint64_t v14 = v13 - v12;
  uint64_t v42 = type metadata accessor for DateComponents(0LL);
  uint64_t v15 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_10005878C();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for Calendar.Identifier(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_10005878C();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = type metadata accessor for Calendar(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_10005878C();
  uint64_t v28 = v27 - v26;
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v23,  enum case for Calendar.Identifier.gregorian(_:),  v19);
  Calendar.init(identifier:)(v23);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v19);
  sub_10006AF1C(v14, 1LL);
  uint64_t v29 = type metadata accessor for TimeZone(0LL);
  sub_100054998(v10, 1LL, 1LL, v29);
  char v41 = 1;
  char v40 = 1;
  char v39 = 1;
  char v38 = 1;
  char v37 = 1;
  char v36 = 1;
  char v35 = 1;
  char v34 = 1;
  char v33 = 1;
  char v32 = 1;
  char v31 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v14,  v10,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  v31,  0LL,  v32,  0LL,  v33,  0LL,  v34,  0LL,  v35,  0LL,  v36,  0LL,  v37,  0LL,  v38,  0LL,  v39,  0LL,  v40,  0LL,  v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v14, v28, v24);
  sub_10006AF1C(v14, 0LL);
  DateComponents.calendar.setter(v14);
  TimeZone.init(secondsFromGMT:)(0LL);
  DateComponents.timeZone.setter(v10);
  DateComponents.year.setter(a1, 0LL);
  DateComponents.month.setter(a2, 0LL);
  DateComponents.day.setter(a3, 0LL);
  DateComponents.hour.setter(a4, 0LL);
  DateComponents.minute.setter(a5, 0LL);
  uint64_t result = DateComponents.second.setter(a6, 0LL);
  if ((unsigned __int128)(a7 * (__int128)1000LL) >> 64 == (1000 * a7) >> 63)
  {
    uint64_t result = 1000000 * a7;
    if ((unsigned __int128)(1000 * a7 * (__int128)1000LL) >> 64 == (1000000 * a7) >> 63)
    {
      DateComponents.nanosecond.setter();
      Calendar.date(from:)(v18);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v42);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v28, v24);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100091CD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100091D10
                                                                     + 4 * asc_1000A7D40[a1]))( 0xD000000000000011LL,  0x80000001000ADE40LL);
}

unint64_t sub_100091D10()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100091D2C()
{
  return v0 + 6;
}

uint64_t sub_100091D64()
{
  return 0x44746E756F636361LL;
}

uint64_t sub_100091D88()
{
  return 0x7669746341736164LL;
}

void sub_100091DA8()
{
  uint64_t v0 = type metadata accessor for LiveTransactionStore(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_100091DE4(5LL);
  qword_1000F8D68 = v1;
  sub_100055744();
}

uint64_t sub_100091DE4(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v39 = *(void *)(type metadata accessor for Log(0LL) - 8);
  sub_100055428();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100094EA0();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(v6);
  sub_100055428();
  __chkstk_darwin(v8);
  sub_10005878C();
  uint64_t v11 = v10 - v9;
  type metadata accessor for DispatchQoS(0LL);
  sub_100055428();
  __chkstk_darwin(v12);
  sub_10005878C();
  uint64_t v15 = v14 - v13;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  sub_100094F60();
  __chkstk_darwin(v16);
  sub_10005878C();
  uint64_t v19 = v18 - v17;
  sub_100094644();
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 104))( v19,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v3);
  static DispatchQoS.unspecified.getter(v20);
  char v41 = _swiftEmptyArrayStorage;
  sub_100055290( &qword_1000F1E88,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = v21;
  uint64_t v23 = sub_10005489C(&qword_1000F1E90);
  sub_100094680(&qword_1000F1E98, &qword_1000F1E90);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v23, v24, v7, v22);
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000027LL,  0x80000001000AE470LL,  v15,  v11,  v19,  0LL);
  *(void *)(v4 + 16) = v25;
  uint64_t v26 = static Log.accountsDaemon.getter(v25);
  uint64_t v27 = Log.osLog.getter(v26);
  sub_1000897D4(v39);
  OSSignposter.init(logHandle:)(v27);
  uint64_t v28 = OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSet;
  *(void *)(v4 + v2_Block_object_dispose(&a9, 8) = [objc_allocWithZone(NSCountedSet) init];
  uint64_t v29 = OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore;
  uint64_t v30 = type metadata accessor for OSSignpostIntervalState(0LL);
  *(void *)(v4 + v29) = sub_100094F14(v30, v31, v30);
  uint64_t v32 = OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionStore;
  uint64_t v33 = sub_10005489C(&qword_1000F1E78);
  *(void *)(v4 + v32) = sub_100094F14(v33, v34, v33);
  uint64_t v35 = v4 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_holdTime;
  *(void *)(v4 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_holdTime) = a1;
  uint64_t v36 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v37 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104LL))(v35, v36, v37);
  return v4;
}

uint64_t sub_100092088(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = (dispatch_queue_s *)v3[2];
  uint64_t v8 = (void *)sub_100089544((uint64_t)&unk_1000DA7F8, 48LL);
  v8[2] = v3;
  v8[3] = a1;
  void v8[4] = a2;
  void v8[5] = v6;
  uint64_t v9 = sub_100089544((uint64_t)&unk_1000DA820, 32LL);
  *(void *)(v9 + 16) = sub_1000946EC;
  *(void *)(v9 + 24) = v8;
  void v13[4] = sub_100094708;
  uint64_t v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  v13[2] = sub_100092E0C;
  void v13[3] = &unk_1000DA838;
  uint64_t v10 = _Block_copy(v13);
  uint64_t v11 = v14;
  swift_retain(v3);
  swift_bridgeObjectRetain(a2);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 99LL, 93LL, 20LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  return result;
}

uint64_t sub_1000921C8(unsigned __int8 a1, void (*a2)(uint64_t))
{
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  uint64_t v4 = sub_100091CD4(a1);
  uint64_t v6 = v5;
  a2(v4);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100092234(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2;
  v34[0] = *v6;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v9 - 8);
  sub_100055428();
  __chkstk_darwin(v10);
  sub_10005878C();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v14 - 8);
  uint64_t v36 = v14;
  sub_100055428();
  __chkstk_darwin(v15);
  uint64_t v16 = sub_100094EA0();
  type metadata accessor for DispatchTime(v16);
  sub_100094F60();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)v34 - v22;
  v34[1] = v6[2];
  static DispatchTime.now()(v21);
  + infix(_:_:)(v20, (char *)v6 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_holdTime);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v20, v5);
  uint64_t v25 = (void *)sub_100089544((uint64_t)&unk_1000DA7A8, 48LL);
  _OWORD v25[2] = v6;
  void v25[3] = a1;
  uint64_t v26 = v34[0];
  void v25[4] = a2;
  void v25[5] = v26;
  aBlock[4] = sub_10009392C;
  char v40 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100093734;
  aBlock[3] = &unk_1000DA7C0;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain(v6);
  uint64_t v28 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v28);
  char v38 = _swiftEmptyArrayStorage;
  sub_100055290( &qword_1000F1E40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v30 = v29;
  uint64_t v31 = sub_10005489C(&qword_1000F1E48);
  sub_100094680((unint64_t *)&unk_1000F1E50, &qword_1000F1E48);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v31, v32, v9, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v23, v4, v13, v27);
  _Block_release(v27);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v13, v9);
  sub_1000897D4(v35);
  v24(v23, v5);
  return swift_release(v40);
}

uint64_t sub_100092490(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  char v114 = a4;
  uint64_t v7 = type metadata accessor for LogInterpolation.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for Log(0LL);
  uint64_t v112 = *(void *)(v115 - 8);
  uint64_t v10 = __chkstk_darwin(v115);
  uint64_t v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v109 = (char *)&v101 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v101 - v15;
  uint64_t v17 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v116 = v17;
  uint64_t v117 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v108 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v101 - v21;
  uint64_t v23 = *(void **)(a1 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSet);
  NSString v24 = String._bridgeToObjectiveC()();
  [v23 addObject:v24];

  uint64_t v25 = a1 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_signposter;
  NSString v26 = String._bridgeToObjectiveC()();
  uint64_t v111 = v25;
  uint64_t v27 = OSSignposter.logHandle.getter(v26);
  OSSignpostID.init(log:object:)(v27, v26);
  uint64_t v113 = a2;
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v23 countForObject:v28];

  if (v29 == (id)1)
  {
    static Log.accountsDaemon.getter(v30);
    uint64_t v31 = sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v32 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
    uint64_t v33 = *(void *)(v32 + 72);
    uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
    uint64_t v35 = (v34 + 32) & ~v34;
    uint64_t v105 = v31;
    uint64_t v102 = v34 | 7;
    uint64_t v103 = v35 + 2 * v33;
    uint64_t v36 = swift_allocObject(v31, v103, v34 | 7);
    __int128 v101 = xmmword_1000A4950;
    *(_OWORD *)(v36 + 16) = xmmword_1000A4950;
    uint64_t v104 = v35;
    uint64_t v121 = v114;
    uint64_t v119 = a1;
    uint64_t v107 = a1;
    uint64_t v37 = swift_retain(a1);
    id v39 = (id)AMSLogKey(v37, v38);
    uint64_t v110 = v22;
    if (v39)
    {
      char v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v43 = v42;
    }

    else
    {
      uint64_t v41 = 0LL;
      uint64_t v43 = 0LL;
    }

    uint64_t v55 = v112;
    static LogInterpolation.prefix(_:_:)(&v119, v41, v43);
    swift_bridgeObjectRelease(v43);
    sub_100054930(&v119);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(22LL, 1LL);
    v56._countAndFlagsBits = 0xD000000000000016LL;
    v56._object = (void *)0x80000001000AE4C0LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v56);
    uint64_t v121 = &type metadata for String;
    uint64_t v57 = v113;
    uint64_t v119 = v113;
    unint64_t v120 = a3;
    swift_bridgeObjectRetain(a3);
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)(&v119);
    sub_10005650C((uint64_t)&v119);
    v58._countAndFlagsBits = 0LL;
    v58._object = (void *)0xE000000000000000LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v58);
    LogInterpolation.init(stringInterpolation:)(v9);
    Log.info(_:)(v36);
    swift_bridgeObjectRelease(v36);
    uint64_t v112 = *(void *)(v55 + 8);
    ((void (*)(char *, uint64_t))v112)(v16, v115);
    uint64_t v59 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v60 = (os_log_s *)OSSignposter.logHandle.getter(v59);
    os_signpost_type_t v61 = static os_signpost_type_t.begin.getter();
    char v62 = OS_os_log.signpostsEnabled.getter();
    uint64_t v106 = v33;
    if ((v62 & 1) != 0)
    {
      uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
      uint64_t v64 = v108;
      v63(v108, v110, v116);
      __int128 v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v119 = v66;
      *(_DWORD *)__int128 v65 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v118 = sub_100093950(v57, a3, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v65 + 4, v65 + 12);
      uint64_t v67 = swift_bridgeObjectRelease_n(a3, 3LL);
      os_signpost_id_t v68 = OSSignpostID.rawValue.getter(v67);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, v61, v68, "Transaction", "%s", v65, 0xCu);
      swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v69 = v66;
      uint64_t v70 = v116;
      swift_slowDealloc(v69, -1LL, -1LL);
      __int128 v71 = v110;
      swift_slowDealloc(v65, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v117 + 8))(v64, v70);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);

      uint64_t v70 = v116;
      uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
      __int128 v71 = v110;
      uint64_t v64 = v108;
    }

    v63(v64, v71, v70);
    uint64_t v72 = type metadata accessor for OSSignpostIntervalState(0LL);
    swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
    uint64_t v73 = OSSignpostIntervalState.init(id:isOpen:)(v64, 1LL);
    uint64_t v74 = v107;
    uint64_t v75 = (uint64_t *)(v107 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore);
    swift_beginAccess( v107 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore,  &v119,  32LL,  0LL);
    uint64_t v76 = *v75;
    swift_bridgeObjectRetain(a3);
    uint64_t v77 = sub_10008D384(v57, a3, v76);
    swift_endAccess(&v119);
    swift_bridgeObjectRelease(a3);
    uint64_t v78 = swift_release(v77);
    if (v77)
    {
      static Log.accountsDaemon.getter(v78);
      uint64_t v79 = swift_allocObject(v105, v103, v102);
      *(_OWORD *)(v79 + 16) = v101;
      uint64_t v121 = v114;
      uint64_t v119 = v74;
      uint64_t v80 = swift_retain(v74);
      id v82 = (id)AMSLogKey(v80, v81);
      if (v82)
      {
        char v83 = v82;
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        uint64_t v86 = v85;
      }

      else
      {
        uint64_t v84 = 0LL;
        uint64_t v86 = 0LL;
      }

      static LogInterpolation.prefix(_:_:)(&v119, v84, v86);
      swift_bridgeObjectRelease(v86);
      sub_100054930(&v119);
      LogInterpolation.init(stringLiteral:)(0xD000000000000059LL, 0x80000001000AE4E0LL);
      __int128 v95 = v109;
      Log.fault(_:)(v79);
      swift_bridgeObjectRelease(v79);
      ((void (*)(char *, uint64_t))v112)(v95, v115);
      uint64_t v70 = v116;
      uint64_t v74 = v107;
    }

    uint64_t v96 = String.utf8CString.getter(v57, a3);
    swift_bridgeObjectRetain(a3);
    uint64_t v97 = os_transaction_create(v96 + 32);
    swift_release(v96);
    swift_beginAccess(v74 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionStore, &v119, 33LL, 0LL);
    if (v97)
    {
      sub_1000945E4(v97, v57, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100094B3C);
      swift_bridgeObjectRelease(a3);
    }

    else
    {
      uint64_t v98 = sub_100094424(v57, a3);
      swift_bridgeObjectRelease(a3);
      swift_unknownObjectRelease(v98);
    }

    swift_endAccess(&v119);
    swift_beginAccess(v75, &v119, 33LL, 0LL);
    swift_bridgeObjectRetain(a3);
    uint64_t v99 = swift_retain(v73);
    sub_1000945E4(v99, v57, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100094A28);
    swift_endAccess(&v119);
    swift_release(v73);
    swift_bridgeObjectRelease(a3);
    uint64_t v93 = v110;
  }

  else
  {
    static Log.accountsDaemon.getter(v30);
    uint64_t v44 = sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v45 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
    uint64_t v46 = swift_allocObject( v44,  ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
          + 2LL * *(void *)(v45 + 72),
            *(unsigned __int8 *)(v45 + 80) | 7LL);
    *(_OWORD *)(v46 + 16) = xmmword_1000A4950;
    uint64_t v121 = v114;
    uint64_t v119 = a1;
    uint64_t v47 = swift_retain(a1);
    id v49 = (id)AMSLogKey(v47, v48);
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = v22;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      uint64_t v54 = v53;
    }

    else
    {
      uint64_t v51 = v22;
      uint64_t v52 = 0LL;
      uint64_t v54 = 0LL;
    }

    static LogInterpolation.prefix(_:_:)(&v119, v52, v54);
    swift_bridgeObjectRelease(v54);
    sub_100054930(&v119);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
    v87._object = (void *)0x80000001000AE4A0LL;
    v87._countAndFlagsBits = 0xD000000000000014LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v87);
    uint64_t v121 = &type metadata for String;
    uint64_t v119 = v113;
    unint64_t v120 = a3;
    swift_bridgeObjectRetain(a3);
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)(&v119);
    sub_10005650C((uint64_t)&v119);
    v88._countAndFlagsBits = 0LL;
    v88._object = (void *)0xE000000000000000LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v88);
    LogInterpolation.init(stringInterpolation:)(v9);
    Log.info(_:)(v46);
    swift_bridgeObjectRelease(v46);
    uint64_t v89 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v12, v115);
    uint64_t v90 = (os_log_s *)OSSignposter.logHandle.getter(v89);
    os_signpost_type_t v91 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v92 = 0;
      uint64_t v93 = v51;
      os_signpost_id_t v94 = ((uint64_t (*)(void))OSSignpostID.rawValue.getter)();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v90,  v91,  v94,  "Transaction",  "Transaction joined",  v92,  2u);
      swift_slowDealloc(v92, -1LL, -1LL);

      uint64_t v70 = v116;
    }

    else
    {

      uint64_t v70 = v116;
      uint64_t v93 = v51;
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v93, v70);
}

uint64_t sub_100092E0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100092E2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v120 = a4;
  uint64_t v7 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v111 = *(void *)(v7 - 8);
  uint64_t v112 = v7;
  __chkstk_darwin(v7);
  uint64_t v110 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v114 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v113 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v104 - v12;
  uint64_t v14 = type metadata accessor for LogInterpolation.StringInterpolation(0LL);
  __chkstk_darwin(v14);
  uint64_t v117 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = type metadata accessor for Log(0LL);
  uint64_t v116 = *(void *)(v121 - 8);
  uint64_t v16 = __chkstk_darwin(v121);
  uint64_t v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v104 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v104 - v22;
  NSString v24 = *(void **)(a1 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSet);
  NSString v25 = String._bridgeToObjectiveC()();
  [v24 removeObject:v25];

  uint64_t v122 = a3;
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v24 countForObject:v26];

  uint64_t v118 = a2;
  uint64_t v119 = a1;
  uint64_t v115 = v9;
  if (v27)
  {
    static Log.accountsDaemon.getter(v28);
    uint64_t v29 = sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v30 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
    uint64_t v31 = swift_allocObject( v29,  ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
          + 2LL * *(void *)(v30 + 72),
            *(unsigned __int8 *)(v30 + 80) | 7LL);
    *(_OWORD *)(v31 + 16) = xmmword_1000A4950;
    int v125 = v120;
    uint64_t v123 = a1;
    uint64_t v32 = swift_retain(a1);
    id v34 = (id)AMSLogKey(v32, v33);
    uint64_t v35 = v18;
    if (v34)
    {
      uint64_t v36 = v34;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v39 = v38;
    }

    else
    {
      uint64_t v37 = 0LL;
      uint64_t v39 = 0LL;
    }

    uint64_t v53 = v117;
    static LogInterpolation.prefix(_:_:)(&v123, v37, v39);
    swift_bridgeObjectRelease(v39);
    sub_100054930(&v123);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(18LL, 1LL);
    v54._object = (void *)0x80000001000AE3D0LL;
    v54._countAndFlagsBits = 0xD000000000000012LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v54);
    int v125 = &type metadata for String;
    uint64_t v123 = v118;
    uint64_t v124 = v122;
    swift_bridgeObjectRetain(v122);
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)(&v123);
    sub_10005650C((uint64_t)&v123);
    v55._countAndFlagsBits = 0LL;
    v55._object = (void *)0xE000000000000000LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v55);
    LogInterpolation.init(stringInterpolation:)(v53);
    Log.info(_:)(v31);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v35, v121);
    NSString v56 = String._bridgeToObjectiveC()();
    uint64_t v57 = OSSignposter.logHandle.getter(v56);
    Swift::String v58 = v113;
    uint64_t v59 = OSSignpostID.init(log:object:)(v57, v56);
    uint64_t v60 = (os_log_s *)OSSignposter.logHandle.getter(v59);
    os_signpost_type_t v61 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      char v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v62 = 0;
      os_signpost_id_t v63 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v60,  v61,  v63,  "Transaction",  "Transaction left",  v62,  2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v58, v115);
  }

  else
  {
    uint64_t v109 = v21;
    uint64_t v113 = v23;
    ((void (*)(void))static Log.accountsDaemon.getter)();
    uint64_t v40 = sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v41 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
    uint64_t v42 = *(void *)(v41 + 72);
    uint64_t v43 = *(unsigned __int8 *)(v41 + 80);
    uint64_t v44 = (v43 + 32) & ~v43;
    uint64_t v108 = v40;
    uint64_t v106 = v44 + 2 * v42;
    uint64_t v105 = v43 | 7;
    uint64_t v45 = swift_allocObject(v40, v106, v43 | 7);
    __int128 v104 = xmmword_1000A4950;
    *(_OWORD *)(v45 + 16) = xmmword_1000A4950;
    uint64_t v107 = v44;
    int v125 = v120;
    uint64_t v123 = a1;
    uint64_t v46 = swift_retain(a1);
    id v48 = (id)AMSLogKey(v46, v47);
    if (v48)
    {
      id v49 = v48;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      uint64_t v52 = v51;
    }

    else
    {
      uint64_t v50 = 0LL;
      uint64_t v52 = 0LL;
    }

    __int128 v65 = v13;
    uint64_t v67 = v117;
    uint64_t v66 = v118;
    static LogInterpolation.prefix(_:_:)(&v123, v50, v52);
    swift_bridgeObjectRelease(v52);
    sub_100054930(&v123);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(19LL, 1LL);
    v68._countAndFlagsBits = 0xD000000000000013LL;
    v68._object = (void *)0x80000001000AE3F0LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v68);
    int v125 = &type metadata for String;
    uint64_t v69 = v122;
    uint64_t v123 = v66;
    uint64_t v124 = v122;
    swift_bridgeObjectRetain(v122);
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)(&v123);
    sub_10005650C((uint64_t)&v123);
    v70._countAndFlagsBits = 0LL;
    v70._object = (void *)0xE000000000000000LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v70);
    LogInterpolation.init(stringInterpolation:)(v67);
    __int128 v71 = v113;
    Log.info(_:)(v45);
    swift_bridgeObjectRelease(v45);
    uint64_t v72 = *(void (**)(char *, uint64_t))(v116 + 8);
    v72(v71, v121);
    uint64_t v73 = v119;
    uint64_t v74 = (uint64_t *)(v119 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore);
    swift_beginAccess( v119 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore,  &v123,  32LL,  0LL);
    uint64_t v75 = *v74;
    swift_bridgeObjectRetain(v69);
    uint64_t v76 = sub_10008D384(v66, v69, v75);
    swift_bridgeObjectRelease(v69);
    if (v76)
    {
      uint64_t v77 = swift_endAccess(&v123);
      uint64_t v78 = (os_log_s *)OSSignposter.logHandle.getter(v77);
      uint64_t v79 = OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v80 = static os_signpost_type_t.end.getter(v79);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        uint64_t v81 = swift_retain(v76);
        id v82 = v110;
        checkForErrorAndConsumeState(state:)(v81);
        swift_release(v76);
        uint64_t v84 = v111;
        uint64_t v83 = v112;
        if ((*(unsigned int (**)(char *, uint64_t))(v111 + 88))(v82, v112) == enum case for OSSignpostError.doubleEnd(_:))
        {
          uint64_t v85 = "[Error] Interval already ended";
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v84 + 8))(v82, v83);
          uint64_t v85 = "";
        }

        uint64_t v96 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v96 = 0;
        os_signpost_id_t v97 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v78, v80, v97, "Transaction", v85, v96, 2u);
        swift_slowDealloc(v96, -1LL, -1LL);
        uint64_t v73 = v119;
      }

      (*(void (**)(char *, uint64_t))(v114 + 8))(v65, v115);
      swift_release(v76);
      swift_beginAccess(v73 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionStore, &v123, 33LL, 0LL);
      uint64_t v98 = v122;
      uint64_t v99 = sub_100094424(v66, v122);
      swift_endAccess(&v123);
      swift_unknownObjectRelease(v99);
      swift_beginAccess(v74, &v123, 33LL, 0LL);
      uint64_t v100 = sub_10009431C(v66, v98);
      swift_endAccess(&v123);
      return swift_release(v100);
    }

    else
    {
      uint64_t v86 = v66;
      uint64_t v87 = swift_endAccess(&v123);
      static Log.accountsDaemon.getter(v87);
      uint64_t v88 = swift_allocObject(v108, v106, v105);
      *(_OWORD *)(v88 + 16) = v104;
      int v125 = v120;
      uint64_t v123 = v73;
      uint64_t v89 = swift_retain(v73);
      id v91 = (id)AMSLogKey(v89, v90);
      if (v91)
      {
        uint64_t v92 = v91;
        uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
        uint64_t v95 = v94;
      }

      else
      {
        uint64_t v93 = 0LL;
        uint64_t v95 = 0LL;
      }

      static LogInterpolation.prefix(_:_:)(&v123, v93, v95);
      swift_bridgeObjectRelease(v95);
      sub_100054930(&v123);
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(68LL, 1LL);
      v101._countAndFlagsBits = 0xD000000000000038LL;
      v101._object = (void *)0x80000001000AE410LL;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v101);
      int v125 = &type metadata for String;
      uint64_t v123 = v86;
      uint64_t v124 = v122;
      swift_bridgeObjectRetain(v122);
      LogInterpolation.StringInterpolation.appendInterpolation(safe:)(&v123);
      sub_10005650C((uint64_t)&v123);
      v102._countAndFlagsBits = 0x6361736E61727420LL;
      v102._object = (void *)0xEC0000006E6F6974LL;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v102);
      LogInterpolation.init(stringInterpolation:)(v67);
      uint64_t v103 = v109;
      Log.fault(_:)(v88);
      swift_bridgeObjectRelease(v88);
      return ((uint64_t (*)(char *, uint64_t))v72)(v103, v121);
    }
  }

uint64_t sub_100093734(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100093760()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  sub_100055780(v1);
  uint64_t v2 = type metadata accessor for OSSignposter(0LL);
  sub_100055780(v2);

  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionStore));
  sub_100055744();
}

uint64_t sub_1000937E0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100093804()
{
  return type metadata accessor for LiveTransactionStore(0LL);
}

uint64_t type metadata accessor for LiveTransactionStore(uint64_t a1)
{
  uint64_t result = qword_1000F1D30;
  if (!qword_1000F1D30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiveTransactionStore);
  }
  return result;
}

uint64_t sub_100093844(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for OSSignposter(319LL);
    if (v4 <= 0x3F)
    {
      __int128 v5[2] = *(void *)(result - 8) + 64LL;
      __int128 v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      void v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1000938F0(unsigned __int8 a1)
{
  return sub_1000921C8(a1, (void (*)(uint64_t))sub_100092088);
}

uint64_t sub_10009390C(unsigned __int8 a1)
{
  return sub_1000921C8(a1, (void (*)(uint64_t))sub_100092234);
}

uint64_t sub_10009392C()
{
  return sub_100092E2C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100093938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100093948(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100093950(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100093A20(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10005737C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10005737C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100054930(v12);
  return v7;
}

void *sub_100093A20(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100093B74((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_100093C38(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100093B74(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100093C38(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_100093CCC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_100093E98(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100093E98((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  _OWORD v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100093CCC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  sub_100093E3C(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 32, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return (void *)v6;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

void sub_100093E3C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    uint64_t v4 = sub_10005489C((uint64_t *)&unk_1000F1EA0);
    uint64_t v5 = (void *)sub_100089544(v4, v2 + 32);
    size_t v6 = j__malloc_size(v5);
    __int128 v5[2] = a1;
    __int128 v5[3] = 2 * v6 - 64;
  }

  sub_100055744();
}

char *sub_100093E98(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10005489C((uint64_t *)&unk_1000F1EA0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100094030(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100093F6C(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100093F6C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_100094030(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

void sub_1000940B0()
{
  if ((v1 & 1) != 0)
  {
    sub_100094F74();
    sub_100094ED0();
    int v4 = sub_10005489C((uint64_t *)&unk_1000F0E00);
    BOOL v12 = sub_100094E64(v4, v5, v6, v7, v8, v9, v10, v11, v21, v23);
    sub_100094EBC(v12, v13, v14, v15, v16, v17, v18, v19, v22, v24);
    sub_100077924((_OWORD *)(*(void *)(v1 + 56) + 32 * v3), v2);
    sub_100094F54();
    uint64_t v20 = *v0;
    *uint64_t v0 = v1;
    sub_100094DB0(v20);
  }

  else
  {
    _OWORD *v2 = 0u;
    v2[1] = 0u;
    sub_100094E8C();
  }

void sub_100094144()
{
  if ((v1 & 1) != 0)
  {
    sub_100094F74();
    sub_100094ED0();
    int v4 = sub_10005489C(&qword_1000F18D8);
    BOOL v12 = sub_100094E64(v4, v5, v6, v7, v8, v9, v10, v11, v23, v25);
    sub_100094EBC(v12, v13, v14, v15, v16, v17, v18, v19, v24, v26);
    uint64_t v20 = *(void *)(v1 + 56) + 40 * v3;
    __int128 v21 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v20;
    *(_OWORD *)(v2 + 16) = v21;
    *(void *)(v2 + 32) = *(void *)(v20 + 32);
    sub_100094F54();
    uint64_t v22 = *v0;
    *uint64_t v0 = v1;
    sub_100094DB0(v22);
  }

  else
  {
    *(void *)(v2 + 32) = 0LL;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    sub_100094E8C();
  }

uint64_t sub_1000941E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10008DA88(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  char v7 = sub_100094F74();
  uint64_t v15 = *v2;
  uint64_t v8 = *v2;
  void *v2 = 0x8000000000000000LL;
  Swift::Int v9 = *(void *)(v8 + 24);
  sub_10005489C((uint64_t *)&unk_1000F1EB0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(v7, v9);
  uint64_t v10 = *(void *)(v15 + 48);
  uint64_t v11 = type metadata accessor for AccountIdentity(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v5,  v11);
  uint64_t v12 = *(void *)(*(void *)(v15 + 56) + 8 * v5);
  type metadata accessor for AccountDataAccessActor(0LL);
  sub_100055290( (unint64_t *)&qword_1000F1EC0,  (uint64_t (*)(uint64_t))&type metadata accessor for AccountIdentity,  (uint64_t)&protocol conformance descriptor for AccountIdentity);
  _NativeDictionary._delete(at:)(v5, v15);
  uint64_t v13 = *v2;
  void *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_10009431C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10008D974(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v15 = *v3;
  uint64_t v10 = *v3;
  void *v3 = 0x8000000000000000LL;
  Swift::Int v11 = *(void *)(v10 + 24);
  sub_10005489C(&qword_1000F1E68);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
  swift_bridgeObjectRelease(*(void *)(*(void *)(v15 + 48) + 16 * v7 + 8));
  uint64_t v12 = *(void *)(*(void *)(v15 + 56) + 8 * v7);
  type metadata accessor for OSSignpostIntervalState(0LL);
  _NativeDictionary._delete(at:)(v7, v15);
  uint64_t v13 = *v3;
  void *v3 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_100094424(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10008D974(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v15 = *v3;
  uint64_t v10 = *v3;
  void *v3 = 0x8000000000000000LL;
  Swift::Int v11 = *(void *)(v10 + 24);
  sub_10005489C(&qword_1000F1E70);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
  swift_bridgeObjectRelease(*(void *)(*(void *)(v15 + 48) + 16 * v7 + 8));
  uint64_t v12 = *(void *)(*(void *)(v15 + 56) + 8 * v7);
  sub_10005489C(&qword_1000F1E78);
  _NativeDictionary._delete(at:)(v7, v15);
  uint64_t v13 = *v3;
  void *v3 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_100094530()
{
  uint64_t v0 = (_OWORD *)sub_100094E08();
  uint64_t v3 = sub_100094724(v0, v1, v2);
  uint64_t v11 = sub_100094F44((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100094DB0(v11);
}

uint64_t sub_100094560()
{
  uint64_t v0 = sub_100094E08();
  uint64_t v3 = sub_100094808(v0, v1, v2);
  uint64_t v11 = sub_100094F44(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100094DB0(v11);
}

uint64_t sub_100094590(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_1000948E4(a1, a2, v5);
  uint64_t v14 = sub_100094F44(v6, v7, v8, v9, v10, v11, v12, v13, v16, v17);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1000945E4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  *uint64_t v4 = v11;
  return sub_100094DB0(v9);
}

unint64_t sub_100094644()
{
  unint64_t result = qword_1000F1E80;
  if (!qword_1000F1E80)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000F1E80);
  }

  return result;
}

void sub_100094680(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1000617F8(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_100055744();
}

uint64_t sub_1000946C0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000946EC()
{
  return sub_100092490(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000946F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100094708()
{
}

_OWORD *sub_100094724(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10005489C((uint64_t *)&unk_1000F0E00);
  if (!sub_100094E78()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10008D974(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if ((v11 & 1) != 0)
  {
    uint64_t v15 = (void *)(*(void *)(v14 + 56) + 32 * v10);
    sub_100054930(v15);
    return sub_100077924(a1, v15);
  }

  else
  {
    sub_100094C50(v10, a2, a3, (uint64_t)a1, v14);
    return (_OWORD *)sub_100094DC4(a3);
  }

uint64_t sub_100094808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10005489C(&qword_1000F18D8);
  if (!sub_100094E78()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10008D974(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if ((v11 & 1) != 0) {
    return sub_10008B7B4(a1, *(void *)(v14 + 56) + 40 * v10);
  }
  sub_100094C8C(v10, a2, a3, a1, v14);
  return sub_100094DC4(a3);
}

uint64_t sub_1000948E4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for AccountIdentity(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_10008DA88(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_10005489C((uint64_t *)&unk_1000F1EB0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10008DA88(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release(*(void *)(v23 + 8 * v18));
    *(void *)(v23 + 8 * v1_Block_object_dispose(&a9, 8) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100094CC8(v18, (uint64_t)v11, a1, v22);
  }

  return result;
}

uint64_t sub_100094A28(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10008D974(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10005489C(&qword_1000F1E68);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10008D974(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_release(*(void *)(v21 + 8 * v16));
    *(void *)(v21 + 8 * v16) = a1;
  }

  else
  {
    sub_100094D60(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_100094B3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10008D974(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10005489C(&qword_1000F1E70);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10008D974(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_unknownObjectRelease(*(void *)(v21 + 8 * v16));
    *(void *)(v21 + 8 * v16) = a1;
  }

  else
  {
    sub_100094D60(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

void sub_100094C50(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = sub_100094DD8(a1, a2, a3, a4, a5);
  sub_100077924(v8, (_OWORD *)(v7 + 32 * v6));
  uint64_t v9 = *(void *)(a5 + 16);
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a5 + 16) = v11;
    sub_100055744();
  }

unint64_t sub_100094C8C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100094DD8(a1, a2, a3, a4, a5);
  uint64_t v8 = v7 + 40 * result;
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = *(void *)(v6 + 16);
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v13;
  }
  return result;
}

uint64_t sub_100094CC8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for AccountIdentity(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_100094D60(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  char v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100094DB0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100094DC4(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

unint64_t sub_100094DD8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  char v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100094E08()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_100094E30()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100094E4C()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

BOOL sub_100094E64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_100094E78()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

  ;
}

uint64_t sub_100094EA0()
{
  return 0LL;
}

uint64_t sub_100094EBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

void sub_100094ED0()
{
  *Swift::Int v0 = 0x8000000000000000LL;
}

void sub_100094EEC()
{
  *Swift::Int v0 = 0x8000000000000000LL;
}

uint64_t sub_100094F04()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100094F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

unint64_t sub_100094F24()
{
  return sub_10008D974(v1, v0);
}

unint64_t sub_100094F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008D974(a2, a3);
}

uint64_t sub_100094F44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t sub_100094F54()
{
  return _NativeDictionary._delete(at:)(v1, v0);
}

  ;
}

uint64_t sub_100094F74()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100094F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_100054CA8(a1, 1LL, v6) == 1)
  {
    sub_100077978(a1, &qword_1000F0300);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    sub_10009627C();
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = sub_100089544((uint64_t)&unk_1000DA8E8, 32LL);
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    unint64_t v16 = v18;
    void v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    unint64_t v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1000F1EE8, v15);
}

void sub_1000950B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100089544((uint64_t)&unk_1000DA870, 84LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  sub_100077934(a3, v10 + 32, &qword_1000F0C78);
  void v14[4] = sub_100095638;
  uint64_t v15 = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  _OWORD v14[2] = sub_100095CC4;
  v14[3] = &unk_1000DA888;
  Swift::Int v11 = _Block_copy(v14);
  uint64_t v12 = v15;
  swift_retain(a5);
  swift_release(v12);
  uint64_t v13 = String.utf8CString.getter(a1, a2);
  xpc_activity_register((const char *)(v13 + 32), XPC_ACTIVITY_CHECK_IN, v11);
  swift_release(v13);
  _Block_release(v11);
}

xpc_activity_state_t sub_1000951C4(_xpc_activity_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10005489C(&qword_1000F0300);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LogInterpolation.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Log(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_activity_state_t result = xpc_activity_get_state(a1);
  if (result)
  {
    if (result == 2)
    {
      uint64_t v46 = a2;
      uint64_t v47 = a3;
      static Log.dasActivity.getter();
      uint64_t v19 = sub_10005489C((uint64_t *)&unk_1000F0290);
      uint64_t v20 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
      uint64_t v48 = v14;
      uint64_t v49 = v15;
      uint64_t v21 = swift_allocObject( v19,  ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
            + 2LL * *(void *)(v20 + 72),
              *(unsigned __int8 *)(v20 + 80) | 7LL);
      *(_OWORD *)(v21 + 16) = xmmword_1000A4950;
      id v24 = (id)AMSSetLogKeyIfNeeded(v21, v22, v23);
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      static LogInterpolation.prefix<A>(_:_:)(&type metadata for XPCActivity, v25, v27, &type metadata for XPCActivity);
      swift_bridgeObjectRelease(v27);
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
      v28._object = (void *)0x80000001000AE7A0LL;
      v28._countAndFlagsBits = 0xD000000000000014LL;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t ObjectType = swift_getObjectType(a1);
      v50[0] = a1;
      swift_unknownObjectRetain(a1);
      LogInterpolation.StringInterpolation.appendInterpolation(_:)(v50);
      sub_100077978((uint64_t)v50, &qword_1000F1E60);
      v29._countAndFlagsBits = 0LL;
      v29._object = (void *)0xE000000000000000LL;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v29);
      LogInterpolation.init(stringInterpolation:)(v13);
      Log.default(_:)(v21);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v17, v48);
      if (qword_1000F00C0 != -1) {
        swift_once(&qword_1000F00C0, sub_100091DA8);
      }
      sub_100092088(0x7669746341736164LL, 0xEB00000000797469LL);
      uint64_t v30 = type metadata accessor for TaskPriority(0LL);
      sub_100054998((uint64_t)v10, 1LL, 1LL, v30);
      uint64_t v31 = (void *)swift_allocObject(&unk_1000DA8C0, 48LL, 7LL);
      v31[2] = 0LL;
      v31[3] = 0LL;
      void v31[4] = v46;
      uint64_t v32 = v47;
      v31[5] = v47;
      swift_retain(v32);
      uint64_t v33 = sub_100094F7C((uint64_t)v10, (uint64_t)&unk_1000F1ED8, (uint64_t)v31);
      return swift_release(v33);
    }
  }

  else
  {
    static Log.dasActivity.getter();
    uint64_t v34 = sub_10005489C((uint64_t *)&unk_1000F0290);
    uint64_t v49 = v15;
    uint64_t v35 = v34;
    uint64_t v36 = *(void *)(type metadata accessor for LogInterpolation(0LL) - 8);
    uint64_t v48 = v14;
    uint64_t v37 = swift_allocObject( v35,  ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
          + 2LL * *(void *)(v36 + 72),
            *(unsigned __int8 *)(v36 + 80) | 7LL);
    *(_OWORD *)(v37 + 16) = xmmword_1000A4950;
    id v40 = (id)AMSSetLogKeyIfNeeded(v37, v38, v39);
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    uint64_t v43 = v42;

    static LogInterpolation.prefix<A>(_:_:)(&type metadata for XPCActivity, v41, v43, &type metadata for XPCActivity);
    swift_bridgeObjectRelease(v43);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
    v44._countAndFlagsBits = 0xD000000000000015LL;
    v44._object = (void *)0x80000001000AE780LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v44);
    uint64_t ObjectType = swift_getObjectType(a1);
    v50[0] = a1;
    swift_unknownObjectRetain(a1);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)(v50);
    sub_100077978((uint64_t)v50, &qword_1000F1E60);
    v45._countAndFlagsBits = 0LL;
    v45._object = (void *)0xE000000000000000LL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v45);
    LogInterpolation.init(stringInterpolation:)(v13);
    Log.default(_:)(v37);
    swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v17, v48);
    return sub_100095740(a4, a1);
  }

  return result;
}

uint64_t sub_100095614()
{
  return swift_deallocObject(v0, 84LL, 7LL);
}

xpc_activity_state_t sub_100095638(_xpc_activity_s *a1)
{
  return sub_1000951C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_100095644(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100095698;
  return v7();
}

uint64_t sub_100095698()
{
  return swift_task_switch(sub_1000956D0, 0LL, 0LL);
}

uint64_t sub_1000956D0()
{
  if (qword_1000F00C0 != -1) {
    swift_once(&qword_1000F00C0, sub_100091DA8);
  }
  sub_100092234(0x7669746341736164LL, 0xEB00000000797469LL);
  return sub_10006D358(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100095740(uint64_t a1, _xpc_activity_s *a2)
{
  uint64_t v6 = type metadata accessor for LogInterpolation.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Log(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_object_t v13 = xpc_activity_copy_criteria(a2);
  uint64_t v60 = v10;
  if (v13)
  {
    sub_100077934(a1, (uint64_t)&v67, &qword_1000F0C78);
    if (v67 != 2LL)
    {
      sub_100096254();
      sub_10005489C((uint64_t *)&unk_1000F0290);
      uint64_t v14 = sub_100055858();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v59 = v9;
      uint64_t v16 = sub_100096268( v14,  ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
            + 2LL * *(void *)(v15 + 72),
              *(unsigned __int8 *)(v15 + 80) | 7LL);
      *(_OWORD *)(v16 + 16) = xmmword_1000A4950;
      id v19 = (id)AMSSetLogKeyIfNeeded(v16, v17, v18);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      sub_10009625C();
      sub_10006D37C((uint64_t)&type metadata for XPCActivity, v2, v3);
      swift_bridgeObjectRelease(v3);
      sub_1000557F8(23LL);
      sub_100096244(0xD000000000000017LL, (uint64_t)"Found criteria in DAS: ");
      *((void *)&v64 + 1) = swift_getObjectType(v13);
      *(void *)&__int128 v63 = v13;
      swift_unknownObjectRetain(v13);
      LogInterpolation.StringInterpolation.appendInterpolation(_:)(&v63);
      sub_100077978((uint64_t)&v63, &qword_1000F1E60);
      sub_100055A04();
      sub_100096270();
      sub_100096224(v16);
      sub_10009627C();
      swift_bridgeObjectRelease(v16);
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v12, v59);
    }
  }

  else
  {
    sub_100077934(a1, (uint64_t)&v63, &qword_1000F0C78);
    if (v63 != 2LL)
    {
      __int128 v67 = v63;
      __int128 v68 = v64;
      __int128 v69 = v65;
      int v70 = v66;
      sub_100096254();
      uint64_t v58 = sub_10005489C((uint64_t *)&unk_1000F0290);
      uint64_t v29 = sub_100055858();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(void *)(v30 + 72);
      uint64_t v32 = *(unsigned __int8 *)(v30 + 80);
      uint64_t v57 = ((v32 + 32) & ~v32) + 2 * v31;
      uint64_t v33 = (v32 + 32) & ~v32;
      uint64_t v55 = v33;
      v53[1] = v31;
      uint64_t v56 = v32 | 7;
      uint64_t v34 = sub_100096268(v29, v57, v32 | 7);
      uint64_t v59 = v9;
      uint64_t v35 = v34;
      __int128 v54 = xmmword_1000A4950;
      *(_OWORD *)(v34 + 16) = xmmword_1000A4950;
      uint64_t v36 = v34 + v33;
      id v39 = (id)AMSSetLogKeyIfNeeded(v34, v37, v38);
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v42 = v41;

      sub_10006D37C((uint64_t)&type metadata for XPCActivity, v40, v42);
      swift_bridgeObjectRelease(v42);
      sub_1000557F8(30LL);
      sub_100096244(0xD00000000000001ELL, (uint64_t)"Creating new activity in DAS: ");
      uint64_t ObjectType = &unk_1000DA9C8;
      uint64_t v43 = sub_100089544((uint64_t)&unk_1000DA910, 72LL);
      v61[0] = v43;
      __int128 v44 = v68;
      *(_OWORD *)(v43 + 16) = v67;
      *(_OWORD *)(v43 + 32) = v44;
      *(_OWORD *)(v43 + 4_Block_object_dispose(&a9, 8) = v69;
      *(_DWORD *)(v43 + 64) = v70;
      LogInterpolation.StringInterpolation.appendInterpolation(_:)(v61);
      sub_100077978((uint64_t)v61, &qword_1000F1E60);
      sub_100055A04();
      LogInterpolation.init(stringInterpolation:)(v8);
      sub_100096224(v35);
      swift_bridgeObjectRelease(v35);
      uint64_t v45 = v59;
      uint64_t v60 = *(void *)(v60 + 8);
      ((void (*)(char *, uint64_t))v60)(v12, v59);
      sub_100095DC8((uint64_t)&v67);
      uint64_t v47 = v46;
      sub_100096254();
      uint64_t v48 = swift_allocObject(v58, v57, v56);
      *(_OWORD *)(v48 + 16) = v54;
      id v51 = (id)AMSSetLogKeyIfNeeded(v48, v49, v50);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      sub_10009625C();
      sub_10006D37C((uint64_t)&type metadata for XPCActivity, v31, v36 + v31);
      swift_bridgeObjectRelease(v36 + v31);
      sub_1000557F8(22LL);
      v52._object = (void *)0x80000001000AE810LL;
      v52._countAndFlagsBits = 0xD000000000000016LL;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v52);
      uint64_t ObjectType = (void *)swift_getObjectType(v47);
      v61[0] = v47;
      swift_unknownObjectRetain(v47);
      LogInterpolation.StringInterpolation.appendInterpolation(_:)(v61);
      sub_100077978((uint64_t)v61, &qword_1000F1E60);
      sub_100055A04();
      sub_100096270();
      sub_100096224(v48);
      swift_bridgeObjectRelease(v48);
      ((void (*)(char *, uint64_t))v60)(v12, v45);
      xpc_activity_set_criteria(a2, v47);
      return swift_unknownObjectRelease(v47);
    }
  }

  sub_100096254();
  sub_10005489C((uint64_t *)&unk_1000F0290);
  uint64_t v21 = sub_100055858();
  uint64_t v22 = sub_100096268( v21,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v21 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_1000A4950;
  id v25 = (id)AMSSetLogKeyIfNeeded(v22, v23, v24);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  sub_10006D37C((uint64_t)&type metadata for XPCActivity, v26, v28);
  swift_bridgeObjectRelease(v28);
  LogInterpolation.init(stringLiteral:)(0xD000000000000022LL, 0x80000001000AE7C0LL);
  sub_100096224(v22);
  sub_10009627C();
  swift_bridgeObjectRelease(v22);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v12, v9);
}

uint64_t sub_100095CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100095D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100095D1C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100095D24()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100095D50(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000F1ED4);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000884E4;
  return sub_100095644(a1, v4, v5, v6);
}

void sub_100095DC8(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v3 = v2;
  if (*(_BYTE *)(a1 + 50)) {
    uint64_t v4 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  }
  else {
    uint64_t v4 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  }
  xpc_dictionary_set_string(v2, XPC_ACTIVITY_PRIORITY, *v4);
  if (*(_BYTE *)(a1 + 49))
  {
    if (*(_BYTE *)(a1 + 49) != 1) {
      goto LABEL_12;
    }
    if (XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
    {
      sub_1000961FC(v5, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
      uint64_t v6 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
      if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
      {
        BOOL v7 = 0;
LABEL_11:
        xpc_dictionary_set_BOOL(v3, v6, v7);
LABEL_12:
        __asm { BR              X10 }
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else if (XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    BOOL v7 = 1;
    sub_1000961FC(v5, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
    uint64_t v6 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
    if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY) {
      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
    JUMPOUT(0x1000960A8LL);
  }

  __break(1u);
  goto LABEL_16;
}

uint64_t sub_1000960BC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100096120;
  return v6(a1);
}

uint64_t sub_100096120()
{
  return sub_10006D358(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100096148()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10009616C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000F1EE4);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000884E4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000F1EE0 + dword_1000F1EE0))(a1, v4);
}

uint64_t sub_1000961DC()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

ValueMetadata *type metadata accessor for XPCActivity()
{
  return &type metadata for XPCActivity;
}

void sub_1000961FC(uint64_t a1, const char *a2)
{
}

void sub_100096208(double a1, uint64_t a2, const char *a3)
{
}

  ;
}

uint64_t sub_100096224(uint64_t a1)
{
  return Log.default(_:)(a1);
}

  ;
}

uint64_t sub_10009623C(uint64_t a1, uint64_t a2)
{
  return sub_100077934(a1, a2, v2);
}

void sub_100096244(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100096254()
{
  return static Log.dasActivity.getter();
}

void sub_10009625C()
{
}

uint64_t sub_100096268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocObject(v3, a2, a3);
}

uint64_t sub_100096270()
{
  return LogInterpolation.init(stringInterpolation:)(v0);
}

uint64_t sub_10009627C()
{
  return swift_unknownObjectRelease(v0);
}

void sub_100096284(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 0x80000001000ACB70LL;
  }
  else {
    uint64_t v2 = 0x80000001000ACB50LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0x80000001000ACB70LL;
  }
  else {
    unint64_t v3 = 0x80000001000ACB50LL;
  }
  if (v2 != v3) {
    sub_100097AB4(0xD000000000000013LL, v2, 0xD000000000000013LL);
  }
  sub_10005547C();
  sub_1000573CC();
  sub_100064370();
}

BOOL sub_100096308(char a1, char a2)
{
  return dbl_1000A8338[a1] == dbl_1000A8338[a2];
}

void sub_100096330(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_100078230(a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_100078230(a2);
  if (v3 != v6 || v5 != v7) {
    sub_100097AB4(v3, v5, v6);
  }
  sub_10005547C();
  sub_1000573CC();
  sub_100064370();
}

void sub_10009639C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6C616E6F73726570LL;
  }
  else {
    uint64_t v3 = 0x79616C506F747561LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xEF6E6F6974617A69LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6C616E6F73726570LL;
  }
  else {
    uint64_t v5 = 0x79616C506F747561LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEF6E6F6974617A69LL;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_100097AB4(v3, v4, v5);
  }
  sub_10005547C();
  sub_1000573CC();
  sub_100064370();
}

uint64_t sub_100096430(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v2 = 0x80000001000ACB70LL;
  }
  else {
    uint64_t v2 = 0x80000001000ACB50LL;
  }
  sub_100064454(a1, 0xD000000000000013LL);
  return sub_100097AAC(v2);
}

void sub_10009647C(uint64_t a1, char a2)
{
}

uint64_t sub_1000964A8(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000012LL, 0x80000001000ACC80LL);
}

uint64_t sub_1000964C4(uint64_t a1)
{
  return String.hash(into:)(a1, 0x5F746E756F636361LL, 0xEC00000061746164LL);
}

uint64_t sub_1000964E4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_100078230(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return sub_100097AAC(v5);
}

uint64_t sub_100096520(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6C616E6F73726570LL;
  }
  else {
    uint64_t v3 = 0x79616C506F747561LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xEF6E6F6974617A69LL;
  }
  sub_100064454(a1, v3);
  return sub_100097AAC(v4);
}

uint64_t sub_10009657C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ((uint64_t (*)(void))String.utf8CString.getter)();
  unint64_t v5 = *(void *)(v4 + 16);
  swift_release(v4);
  if (v5 < 0x81) {
    return a1;
  }
  uint64_t v6 = String.count.getter(a1, a2);
  unint64_t v7 = 0xE000000000000000LL;
  uint64_t v8 = 0LL;
  if (String.count.getter(0LL, 0xE000000000000000LL))
  {
LABEL_12:
    sub_10005547C();
    return v8;
  }

  if (v6 >= 127) {
    uint64_t v6 = 127LL;
  }
  while (1)
  {
    uint64_t v9 = String.index(_:offsetBy:)(15LL, v6, a1, a2);
    swift_bridgeObjectRetain(a2);
    uint64_t v10 = String.subscript.getter(15LL, v9);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    sub_10005547C();
    uint64_t v17 = static String._fromSubstring(_:)(v10, v12, v14, v16);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease(v16);
    uint64_t v20 = String.utf8CString.getter(v17, v19);
    unint64_t v21 = *(void *)(v20 + 16);
    swift_release(v20);
    unint64_t v22 = v21 <= 0x80 ? v7 : v19;
    uint64_t result = swift_bridgeObjectRelease(v22);
    if (__OFSUB__(v6--, 1LL)) {
      break;
    }
    if (v21 <= 0x80)
    {
      unint64_t v7 = v19;
      uint64_t v8 = v17;
    }

    if (String.count.getter(v8, v7)) {
      goto LABEL_12;
    }
  }

  __break(1u);
  return result;
}

double sub_1000966CC(char a1)
{
  return dbl_1000A8338[a1];
}

uint64_t sub_1000966E0(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[52])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10009672C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(_DWORD *)(result + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 52) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 52) = 0;
    }
    if (a2) {
      *(_BYTE *)uint64_t result = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for XPCActivityCriteria()
{
}

uint64_t sub_10009678C(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1000967BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_100096800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return sub_100079A90();
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

void sub_100096818()
{
}

uint64_t sub_10009683C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

Swift::Int sub_1000968B8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000968F8()
{
  return 0x65756C6176LL;
}

uint64_t sub_10009690C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10005489C(&qword_1000F1F38);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100054838(a1, v10);
  unint64_t v12 = sub_1000978BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for XPCActivityTaskID.CodingKeys,  &type metadata for XPCActivityTaskID.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, v13, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1000969FC(uint64_t a1, uint64_t a2)
{
}

void *sub_100096A3C(void *a1)
{
  uint64_t v3 = sub_10005489C(&qword_1000F1F28);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100054838(a1, v7);
  unint64_t v10 = sub_1000978BC();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for XPCActivityTaskID.CodingKeys,  &type metadata for XPCActivityTaskID.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100054930(a1);
  return v9;
}

Swift::Int sub_100096B50()
{
  return Hasher._finalize()();
}

uint64_t sub_100096B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10009683C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100096BB8(uint64_t a1)
{
  unint64_t v2 = sub_1000978BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100096BE0(uint64_t a1)
{
  unint64_t v2 = sub_1000978BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100096C08()
{
}

uint64_t sub_100096C10(uint64_t a1)
{
  return sub_1000967BC(a1, *v1, v1[1]);
}

Swift::Int sub_100096C18()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100096C6C()
{
  return sub_10009678C(*v0, v0[1]);
}

void *sub_100096C74@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100096A3C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_100096C9C(void *a1)
{
  return sub_10009690C(a1, *v1, v1[1]);
}

uint64_t sub_100096CB4(uint64_t *a1, uint64_t *a2)
{
  return sub_100096800(*a1, a1[1], *a2, a2[1]);
}

void sub_100096CC8(uint64_t a1, char a2)
{
}

void sub_100096CE8(uint64_t a1)
{
  char v1 = a1;
  sub_100064270(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_1000642C8();
  sub_100064218();
}

void sub_100096D18(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_100096D38(double a1)
{
  if (a1 == 60.0) {
    return 0LL;
  }
  if (a1 == 300.0) {
    return sub_100079A90();
  }
  if (a1 == 900.0) {
    return 2LL;
  }
  if (a1 == 1800.0) {
    return 3LL;
  }
  if (a1 == 3600.0) {
    return 4LL;
  }
  if (a1 == 14400.0) {
    return 5LL;
  }
  if (a1 == 28800.0) {
    return 6LL;
  }
  if (a1 == 86400.0) {
    return 7LL;
  }
  if (a1 == 604800.0) {
    return 8LL;
  }
  return 9LL;
}

void sub_100096E10()
{
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_10006478C();
  }

  else
  {
    Swift::UInt64 v1 = *(void *)(v0 + 8);
    sub_100064488();
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0LL;
    }
    Hasher._combine(_:)(v2);
  }

  Hasher._combine(_:)(qword_1000A8380[*(char *)(v0 + 17)]);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    sub_10006478C();
  }

  else
  {
    Swift::UInt64 v3 = *(void *)(v0 + 24);
    sub_100064488();
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0LL;
    }
    Hasher._combine(_:)(v4);
  }

  if (*(_BYTE *)(v0 + 48) == 1)
  {
    sub_10006478C();
  }

  else
  {
    Swift::UInt64 v5 = *(void *)(v0 + 40);
    sub_100064488();
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0LL;
    }
    Hasher._combine(_:)(v6);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 49));
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 50));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 51) & 1);
}

uint64_t sub_100096EF4(double *a1, double *a2)
{
  if (((*(unsigned __int8 *)a1 ^ *(unsigned __int8 *)a2) & 1) != 0
    || *((unsigned __int8 *)a1 + 1) != *((unsigned __int8 *)a2 + 1))
  {
LABEL_9:
    char v2 = 0;
    return v2 & 1;
  }

  char v2 = *((_BYTE *)a2 + 16);
  if (((_BYTE)a1[2] & 1) == 0)
  {
    if (a1[1] != a2[1]) {
      char v2 = 1;
    }
    if ((v2 & 1) == 0) {
      return ((uint64_t (*)(void))((char *)sub_100096F68 + 4 * byte_1000A7E50[*((unsigned __int8 *)a2 + 17)]))();
    }
    goto LABEL_9;
  }

  if (!*((_BYTE *)a2 + 16)) {
    return v2 & 1;
  }
  return ((uint64_t (*)(void))((char *)sub_100096F68 + 4 * byte_1000A7E50[*((unsigned __int8 *)a2 + 17)]))();
}

void sub_100096F68(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  if (a3) {
    goto LABEL_21;
  }
  char v3 = *(_BYTE *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32)) {
      goto LABEL_22;
    }
  }

  else
  {
    if ((v3 & 1) != 0) {
      goto LABEL_21;
    }
  }

  char v4 = *(_BYTE *)(a2 + 48);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 48)) {
      goto LABEL_22;
    }
  }

  else
  {
    if ((v4 & 1) != 0) {
      goto LABEL_21;
    }
  }

  if (*(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49)
    && *(unsigned __int8 *)(a1 + 50) == *(unsigned __int8 *)(a2 + 50))
  {
LABEL_22:
    JUMPOUT(0x100096F40LL);
  }

void sub_100097054(uint64_t a1)
{
}

void sub_10009707C()
{
}

void sub_100097084(uint64_t a1)
{
}

void sub_10009708C(uint64_t a1)
{
}

BOOL sub_100097094(char *a1, char *a2)
{
  return sub_100096308(*a1, *a2);
}

void sub_1000970A0()
{
}

void sub_1000970A8(uint64_t a1)
{
}

void sub_1000970B0(uint64_t a1)
{
}

uint64_t sub_1000970B8@<X0>(double *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100096D38(*a1);
  *a2 = result;
  return result;
}

void sub_1000970E0(double *a1@<X8>)
{
  *a1 = sub_1000966CC(*v1);
}

Swift::Int sub_100097110()
{
  return Hasher._finalize()();
}

unint64_t sub_100097150()
{
  unint64_t result = qword_1000F1EF8;
  if (!qword_1000F1EF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7EA4, &unk_1000DA9C8);
    atomic_store(result, (unint64_t *)&qword_1000F1EF8);
  }

  return result;
}

uint64_t sub_10009718C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000971D8 + 4 * byte_1000A7E5E[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009720C + 4 * byte_1000A7E59[v4]))();
}

uint64_t sub_10009720C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_100097214(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10009721CLL);
  }
  return result;
}

uint64_t sub_100097228(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100097230LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100097234(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_10009723C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

void type metadata accessor for XPCActivityCriteria.Priority()
{
}

uint64_t sub_100097254(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t sub_1000972DC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100097328 + 4 * byte_1000A7E68[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009735C + 4 * byte_1000A7E63[v4]))();
}

uint64_t sub_10009735C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_100097364(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10009736CLL);
  }
  return result;
}

uint64_t sub_100097378(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100097380LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100097384(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_10009738C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

void type metadata accessor for XPCActivityCriteria.NetworkRequirement()
{
}

uint64_t sub_1000973A4(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }

uint64_t sub_10009742C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100097478 + 4 * byte_1000A7E72[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000974AC + 4 * byte_1000A7E6D[v4]))();
}

uint64_t sub_1000974AC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_1000974B4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000974BCLL);
  }
  return result;
}

uint64_t sub_1000974C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000974D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1000974D4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_1000974DC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

void type metadata accessor for XPCActivityCriteria.Interval()
{
}

uint64_t sub_1000974F4(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t sub_10009757C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = 1;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000975C8 + 4 * byte_1000A7E7C[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000975FC + 4 * byte_1000A7E77[v4]))();
}

uint64_t sub_1000975FC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_100097604(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10009760CLL);
  }
  return result;
}

uint64_t sub_100097618(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100097620LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100097624(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

uint64_t sub_10009762C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(*(_BYTE *)v0 & 1) = v1;
  return result;
}

void type metadata accessor for DataClass()
{
}

void *sub_100097644(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100097670(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *sub_100097678(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 sub_1000976B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_1000976C4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000976F4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(sub_100054998(v4, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_100054998(v4, 0LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_100054998(v4, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100097734(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for XPCActivityTaskID()
{
}

unint64_t sub_100097780()
{
  unint64_t result = qword_1000F1F00;
  if (!qword_1000F1F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A7F64, &unk_1000DACA8);
    atomic_store(result, (unint64_t *)&qword_1000F1F00);
  }

  return result;
}

unint64_t sub_1000977C0()
{
  unint64_t result = qword_1000F1F08;
  if (!qword_1000F1F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A8034, &unk_1000DAC30);
    atomic_store(result, (unint64_t *)&qword_1000F1F08);
  }

  return result;
}

unint64_t sub_100097800()
{
  unint64_t result = qword_1000F1F10;
  if (!qword_1000F1F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A80D4, &unk_1000DABA0);
    atomic_store(result, (unint64_t *)&qword_1000F1F10);
  }

  return result;
}

unint64_t sub_100097840()
{
  unint64_t result = qword_1000F1F18;
  if (!qword_1000F1F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A813C, &unk_1000DAB10);
    atomic_store(result, (unint64_t *)&qword_1000F1F18);
  }

  return result;
}

unint64_t sub_100097880()
{
  unint64_t result = qword_1000F1F20;
  if (!qword_1000F1F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A81A4, &unk_1000DAA80);
    atomic_store(result, (unint64_t *)&qword_1000F1F20);
  }

  return result;
}

unint64_t sub_1000978BC()
{
  unint64_t result = qword_1000F1F30;
  if (!qword_1000F1F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A82E0, &type metadata for XPCActivityTaskID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1F30);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for XPCActivityTaskID.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for XPCActivityTaskID.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100054998(v2 + *(int *)(v1 + 44), 1LL, 1LL, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100097988 + 4 * byte_1000A7E81[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000979A8 + 4 * byte_1000A7E86[v4]))();
  }
}

_BYTE *sub_100097988(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000979A8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000979B0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000979B8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000979C0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000979C8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityTaskID.CodingKeys()
{
  return &type metadata for XPCActivityTaskID.CodingKeys;
}

unint64_t sub_1000979E8()
{
  unint64_t result = qword_1000F1F40;
  if (!qword_1000F1F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A82B8, &type metadata for XPCActivityTaskID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1F40);
  }

  return result;
}

unint64_t sub_100097A28()
{
  unint64_t result = qword_1000F1F48;
  if (!qword_1000F1F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A8228, &type metadata for XPCActivityTaskID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1F48);
  }

  return result;
}

unint64_t sub_100097A68()
{
  unint64_t result = qword_1000F1F50;
  if (!qword_1000F1F50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A8250, &type metadata for XPCActivityTaskID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000F1F50);
  }

  return result;
}

uint64_t sub_100097AAC(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100097AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

void sub_100097AC0()
{
  uint64_t v0 = dlerror();
  uint64_t v1 = abort_report_np("%s", v0);
  sub_100097AE0(v1);
}

void sub_100097AE0()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "HMHomeManager");
  sub_100097B04(v0);
}

void sub_100097B04()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "HMUserCloudShareRepairInfo");
  sub_100097B28(v0);
}

void sub_100097B28()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "HMUserCloudShareClientInfo");
  sub_100097B4C(v0);
}

void sub_100097B4C()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "PKInAppPaymentService");
  sub_100097B70(v0);
}

void sub_100097B70()
{
  __assert_rtn("-[AMSXDProtoMessage writeTo:]", "AMSXDProtoMessage.m", 87, "nil != self->_messageData");
}

id objc_msgSend_ACLVersionForAccessControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ACLVersionForAccessControl:");
}

id objc_msgSend_JSONDictionary(void *a1, const char *a2, ...)
{
  return _[a1 JSONDictionary];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_OSLogObject(void *a1, const char *a2, ...)
{
  return _[a1 OSLogObject];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForDirectory:inDomain:appropriateForURL:create:error:");
}

id objc_msgSend_URLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForKey:");
}

id objc_msgSend_URLForKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForKey:account:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__absintheHeadersForRequest_bag_buyParams_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_absintheHeadersForRequest:bag:buyParams:completion:");
}

id objc_msgSend__accountIsSecondaryHomeUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountIsSecondaryHomeUser:");
}

id objc_msgSend__allHomeKitHomes(void *a1, const char *a2, ...)
{
  return _[a1 _allHomeKitHomes];
}

id objc_msgSend__alliTunesAccountIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _alliTunesAccountIdentifiers];
}

id objc_msgSend__attemptAutomaticHandleForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptAutomaticHandleForMessage:");
}

id objc_msgSend__baaOptionsWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baaOptionsWithOptions:error:");
}

id objc_msgSend__bagForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bagForAccount:");
}

id objc_msgSend__blindedTransactionWithTransactionID_pks_keyID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_blindedTransactionWithTransactionID:pks:keyID:error:");
}

id objc_msgSend__buildRequestBodyWithStyle_primaryCerts_extendedCerts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildRequestBodyWithStyle:primaryCerts:extendedCerts:");
}

id objc_msgSend__buildRequestWithBody_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildRequestWithBody:bag:");
}

id objc_msgSend__cacheCookieDatabase_withPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheCookieDatabase:withPath:");
}

id objc_msgSend__cacheCookieProperties_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheCookieProperties:forIdentifier:");
}

id objc_msgSend__cachedCookieDatabaseForPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedCookieDatabaseForPath:");
}

id objc_msgSend__cachedCookiePropertiesForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedCookiePropertiesForIdentifier:");
}

id objc_msgSend__canAttemptTokenUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canAttemptTokenUpdate:");
}

id objc_msgSend__changeTokenKeyForDatabaseScope_recordZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeTokenKeyForDatabaseScope:recordZoneName:");
}

id objc_msgSend__clampTimeStampValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clampTimeStampValue:");
}

id objc_msgSend__clearAllCachedCookieProperties(void *a1, const char *a2, ...)
{
  return _[a1 _clearAllCachedCookieProperties];
}

id objc_msgSend__clearDanglingCookieDatabasesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearDanglingCookieDatabasesWithCompletion:");
}

id objc_msgSend__clearMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearMessage:");
}

id objc_msgSend__configurePreferredMediaUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurePreferredMediaUser:");
}

id objc_msgSend__connectionForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectionForEnvironment:");
}

id objc_msgSend__cookieDatabaseForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cookieDatabaseForAccount:error:");
}

id objc_msgSend__createCriteriaWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCriteriaWithToken:");
}

id objc_msgSend__createGenerateMultiUserTokenTaskForAccount_withController_home_multiUserTokenExists_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createGenerateMultiUserTokenTaskForAccount:withController:home:multiUserTokenExists:");
}

id objc_msgSend__createMultiUserTokenForHome_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMultiUserTokenForHome:error:");
}

id objc_msgSend__createMultiUserTokensWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMultiUserTokensWithErrors:");
}

id objc_msgSend__createRecordZoneWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createRecordZoneWithError:");
}

id objc_msgSend__dataCacheService(void *a1, const char *a2, ...)
{
  return _[a1 _dataCacheService];
}

id objc_msgSend__determineDestinationsForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineDestinationsForMessage:");
}

id objc_msgSend__determineDeviceTypeFromDeviceID_devices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineDeviceTypeFromDeviceID:devices:");
}

id objc_msgSend__deviceNameChanged(void *a1, const char *a2, ...)
{
  return _[a1 _deviceNameChanged];
}

id objc_msgSend__durationSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_durationSinceDate:");
}

id objc_msgSend__enqueueEventWithTopic_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueEventWithTopic:properties:");
}

id objc_msgSend__enqueueEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueEvents:");
}

id objc_msgSend__enqueueProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueProperties:");
}

id objc_msgSend__enqueueProperties_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueProperties:account:");
}

id objc_msgSend__enumerateDelegatesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateDelegatesWithBlock:");
}

id objc_msgSend__establishConnectionsAndPostPushTokens(void *a1, const char *a2, ...)
{
  return _[a1 _establishConnectionsAndPostPushTokens];
}

id objc_msgSend__establishConnectionsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _establishConnectionsIfNeeded];
}

id objc_msgSend__eventTime(void *a1, const char *a2, ...)
{
  return _[a1 _eventTime];
}

id objc_msgSend__eventWithTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventWithTopic:");
}

id objc_msgSend__fdsResultCache(void *a1, const char *a2, ...)
{
  return _[a1 _fdsResultCache];
}

id objc_msgSend__fdsResultCacheAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 _fdsResultCacheAccessQueue];
}

id objc_msgSend__fetchChangeTokenWithDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangeTokenWithDatabaseScope:");
}

id objc_msgSend__fetchChangeTokenWithDatabaseScope_recordZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangeTokenWithDatabaseScope:recordZoneName:");
}

id objc_msgSend__fetchChangedRecordZonesWithServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangedRecordZonesWithServerChangeToken:");
}

id objc_msgSend__fetchChangedRecordsInRecordZonesWithWithRecordZoneIDs_changeTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangedRecordsInRecordZonesWithWithRecordZoneIDs:changeTokens:");
}

id objc_msgSend__fetchRecordZoneWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordZoneWithError:");
}

id objc_msgSend__fetchShareMetadataForURL_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchShareMetadataForURL:withToken:");
}

id objc_msgSend__generateAppProvidedData(void *a1, const char *a2, ...)
{
  return _[a1 _generateAppProvidedData];
}

id objc_msgSend__generateAppProvidedDataWithAction_inviteToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateAppProvidedDataWithAction:inviteToken:");
}

id objc_msgSend__generateInviteCode(void *a1, const char *a2, ...)
{
  return _[a1 _generateInviteCode];
}

id objc_msgSend__generateMultiUserTokenWithAction_iCloudAccount_inviteToken_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateMultiUserTokenWithAction:iCloudAccount:inviteToken:error:");
}

id objc_msgSend__getSavedMessages(void *a1, const char *a2, ...)
{
  return _[a1 _getSavedMessages];
}

id objc_msgSend__handleAccountChangeInChangedRecord_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccountChangeInChangedRecord:withError:");
}

id objc_msgSend__handleBiometricsProvisioningNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handleBiometricsProvisioningNotification];
}

id objc_msgSend__handleCachedDataUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _handleCachedDataUpdate];
}

id objc_msgSend__handleChangedRecordZones_withErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleChangedRecordZones:withErrors:");
}

id objc_msgSend__handleDeletedRecordZones_withErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeletedRecordZones:withErrors:");
}

id objc_msgSend__handleDeviceLanguageChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeviceLanguageChangeNotification:");
}

id objc_msgSend__handleDialogRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDialogRequest:");
}

id objc_msgSend__handleErrorForIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleErrorForIdentifier:error:");
}

id objc_msgSend__handleExpiredChangeTokensInChangedRecordsResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleExpiredChangeTokensInChangedRecordsResult:");
}

id objc_msgSend__handleIncomingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIncomingMessage:");
}

id objc_msgSend__handleIncomingReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIncomingReply:");
}

id objc_msgSend__isCloudDataAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _isCloudDataAvailable];
}

id objc_msgSend__isRefreshThrottlingDisabledWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRefreshThrottlingDisabledWithOptions:");
}

id objc_msgSend__isSupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSupported:");
}

id objc_msgSend__isSupportedMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSupportedMediaType:");
}

id objc_msgSend__isTopicDefined_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTopicDefined:");
}

id objc_msgSend__keychainOptionWithPurpose_style_regenerate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keychainOptionWithPurpose:style:regenerate:");
}

id objc_msgSend__logFaultIfExcessiveChangeTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logFaultIfExcessiveChangeTokens:");
}

id objc_msgSend__lookupAttestationForOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lookupAttestationForOption:");
}

id objc_msgSend__messageWithProtobuf_fromID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageWithProtobuf:fromID:context:");
}

id objc_msgSend__metricsInstanceWithBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_metricsInstanceWithBag:");
}

id objc_msgSend__multiUserTokenForHomeIdentifier_homeUserIdentifier_metrics_qualityOfService_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_multiUserTokenForHomeIdentifier:homeUserIdentifier:metrics:qualityOfService:completion:");
}

id objc_msgSend__multiUserTokenForHomeuser_home_database_metrics_qualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_multiUserTokenForHomeuser:home:database:metrics:qualityOfService:");
}

id objc_msgSend__overwriteSavedMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overwriteSavedMessages:");
}

id objc_msgSend__passcodeStringPromise(void *a1, const char *a2, ...)
{
  return _[a1 _passcodeStringPromise];
}

id objc_msgSend__performAuthKitUpdateTaskWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAuthKitUpdateTaskWithOptions:");
}

id objc_msgSend__performStartup(void *a1, const char *a2, ...)
{
  return _[a1 _performStartup];
}

id objc_msgSend__postPushTokensIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _postPushTokensIfNeeded];
}

id objc_msgSend__postPushTokensWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postPushTokensWithOptions:");
}

id objc_msgSend__presentConfirmation_currentBiometricsState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentConfirmation:currentBiometricsState:");
}

id objc_msgSend__previousBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 _previousBuildVersion];
}

id objc_msgSend__productionPushAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _productionPushAccounts];
}

id objc_msgSend__provideService_delegate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_provideService:delegate:withReply:");
}

id objc_msgSend__pushEnvironmentForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushEnvironmentForAccount:");
}

id objc_msgSend__pushEnvironmentFromBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushEnvironmentFromBag:");
}

id objc_msgSend__pushTokenForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushTokenForEnvironment:");
}

id objc_msgSend__reconcileRecordZonesWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reconcileRecordZonesWithErrors:");
}

id objc_msgSend__reconcileiTunesAccountForChangedRecord_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reconcileiTunesAccountForChangedRecord:withError:");
}

id objc_msgSend__reconcileiTunesAccountsWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reconcileiTunesAccountsWithErrors:");
}

id objc_msgSend__refreshCloudDatabasesWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshCloudDatabasesWithErrors:");
}

id objc_msgSend__refreshShouldUseCloudDataWithHomes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshShouldUseCloudDataWithHomes:");
}

id objc_msgSend__refreshThrottlingDate(void *a1, const char *a2, ...)
{
  return _[a1 _refreshThrottlingDate];
}

id objc_msgSend__registerAccounts_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerAccounts:withOptions:");
}

id objc_msgSend__removeRenewCredentialsFollowUp(void *a1, const char *a2, ...)
{
  return _[a1 _removeRenewCredentialsFollowUp];
}

id objc_msgSend__replyForIncomingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replyForIncomingMessage:");
}

id objc_msgSend__reportedScoreFromFSRDataString_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportedScoreFromFSRDataString:error:");
}

id objc_msgSend__runConfirmationDialogWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runConfirmationDialogWithError:");
}

id objc_msgSend__runUpdateRequestWithStyle_primaryCerts_extendedCerts_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runUpdateRequestWithStyle:primaryCerts:extendedCerts:error:");
}

id objc_msgSend__sandboxPushAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _sandboxPushAccounts];
}

id objc_msgSend__sanitizeError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizeError:");
}

id objc_msgSend__saveLocation(void *a1, const char *a2, ...)
{
  return _[a1 _saveLocation];
}

id objc_msgSend__saveMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveMessage:");
}

id objc_msgSend__saveMultiUserToken_forHomeParticipant_iCloudAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveMultiUserToken:forHomeParticipant:iCloudAccount:error:");
}

id objc_msgSend__saveRecord_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveRecord:database:");
}

id objc_msgSend__scheduleRefreshWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleRefreshWithOptions:");
}

id objc_msgSend__scheduledRefreshActivityBlock(void *a1, const char *a2, ...)
{
  return _[a1 _scheduledRefreshActivityBlock];
}

id objc_msgSend__sendCloudDataRepairRequestForHomeParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCloudDataRepairRequestForHomeParticipant:");
}

id objc_msgSend__sendMessage_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:withReplyHandler:");
}

id objc_msgSend__sendMetricsForDialog(void *a1, const char *a2, ...)
{
  return _[a1 _sendMetricsForDialog];
}

id objc_msgSend__sendMetricsForUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _sendMetricsForUpdate];
}

id objc_msgSend__setAdditionalXPCActivityProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdditionalXPCActivityProperties:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setFinalizedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFinalizedElement:");
}

id objc_msgSend__setLastSuccessfulRefreshDateWithHomes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLastSuccessfulRefreshDateWithHomes:");
}

id objc_msgSend__setRefreshThrottlingDateWithTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRefreshThrottlingDateWithTimeInterval:");
}

id objc_msgSend__setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setValue:forKey:");
}

id objc_msgSend__settingForKeyPath_user_home_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingForKeyPath:user:home:");
}

id objc_msgSend__settingForKeyPath_withSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingForKeyPath:withSettings:");
}

id objc_msgSend__setupAccountDataSync(void *a1, const char *a2, ...)
{
  return _[a1 _setupAccountDataSync];
}

id objc_msgSend__setupNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _setupNotifications];
}

id objc_msgSend__setupPollJobs(void *a1, const char *a2, ...)
{
  return _[a1 _setupPollJobs];
}

id objc_msgSend__setupSignalHandlers(void *a1, const char *a2, ...)
{
  return _[a1 _setupSignalHandlers];
}

id objc_msgSend__shareRecord_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareRecord:withError:");
}

id objc_msgSend__sharedTokenLock(void *a1, const char *a2, ...)
{
  return _[a1 _sharedTokenLock];
}

id objc_msgSend__shouldCreateCertsWithOption_forCerts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldCreateCertsWithOption:forCerts:");
}

id objc_msgSend__shouldGenerateInviteToken(void *a1, const char *a2, ...)
{
  return _[a1 _shouldGenerateInviteToken];
}

id objc_msgSend__shouldThrottleForAccount_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldThrottleForAccount:environment:");
}

id objc_msgSend__shouldThrottleForAccount_environment_currentTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldThrottleForAccount:environment:currentTimestamp:");
}

id objc_msgSend__shutDownConnection_forEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shutDownConnection:forEnvironment:");
}

id objc_msgSend__startConnectionWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startConnectionWithEnvironment:");
}

id objc_msgSend__startXPC(void *a1, const char *a2, ...)
{
  return _[a1 _startXPC];
}

id objc_msgSend__stringForDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForDatabaseScope:");
}

id objc_msgSend__stringForQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForQualityOfService:");
}

id objc_msgSend__stringForRefreshType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForRefreshType:");
}

id objc_msgSend__subscribeWithIdentifier_attempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subscribeWithIdentifier:attempt:");
}

id objc_msgSend__tearDownMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 _tearDownMultiUser];
}

id objc_msgSend__topicFromBag(void *a1, const char *a2, ...)
{
  return _[a1 _topicFromBag];
}

id objc_msgSend__transferHomeSettingsToAccountsWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferHomeSettingsToAccountsWithErrors:");
}

id objc_msgSend__uniqueIdentifiersForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uniqueIdentifiersForAccount:error:");
}

id objc_msgSend__updateCachedCriteriaWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCachedCriteriaWithToken:");
}

id objc_msgSend__updateDeviceAccountPrivacyIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateDeviceAccountPrivacyIfNeeded];
}

id objc_msgSend__updateLanguageForAccount_mediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLanguageForAccount:mediaType:");
}

id objc_msgSend__updateRegulatoryEligibility(void *a1, const char *a2, ...)
{
  return _[a1 _updateRegulatoryEligibility];
}

id objc_msgSend__updateThrottleForAccount_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateThrottleForAccount:environment:");
}

id objc_msgSend__updateThrottleForAccount_environment_throttleTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateThrottleForAccount:environment:throttleTime:");
}

id objc_msgSend__updateTokens_currentBiometricsState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTokens:currentBiometricsState:");
}

id objc_msgSend__userIdForBagNamespace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userIdForBagNamespace:");
}

id objc_msgSend__valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:");
}

id objc_msgSend_acceptShareURL_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptShareURL:withToken:");
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return _[a1 acceptanceStatus];
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _[a1 accessories];
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_accountAuthSyncFor_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountAuthSyncFor:completionHandler:");
}

id objc_msgSend_accountAuthToken(void *a1, const char *a2, ...)
{
  return _[a1 accountAuthToken];
}

id objc_msgSend_accountIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accountIdentifier];
}

id objc_msgSend_accountIsEligibleForPushNotifications_accountStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIsEligibleForPushNotifications:accountStore:");
}

id objc_msgSend_accountMediaType(void *a1, const char *a2, ...)
{
  return _[a1 accountMediaType];
}

id objc_msgSend_accountPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertyForKey:");
}

id objc_msgSend_accountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusWithCompletionHandler:");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _[a1 accountStore];
}

id objc_msgSend_actionWithTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:");
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_activityBlock(void *a1, const char *a2, ...)
{
  return _[a1 activityBlock];
}

id objc_msgSend_activityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 activityIdentifier];
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addErrorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addErrorBlock:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addPropertiesWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPropertiesWithDictionary:");
}

id objc_msgSend_addSuccessBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSuccessBlock:");
}

id objc_msgSend_allHomes(void *a1, const char *a2, ...)
{
  return _[a1 allHomes];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allUsersInHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allUsersInHome:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowBattery(void *a1, const char *a2, ...)
{
  return _[a1 allowBattery];
}

id objc_msgSend_altDSIDHashCache(void *a1, const char *a2, ...)
{
  return _[a1 altDSIDHashCache];
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_ams_accountFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_accountFlags");
}

id objc_msgSend_ams_activeiCloudAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiCloudAccount");
}

id objc_msgSend_ams_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiTunesAccount");
}

id objc_msgSend_ams_activeiTunesAccountForMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiTunesAccountForMediaType:");
}

id objc_msgSend_ams_addNullableObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_addNullableObject:");
}

id objc_msgSend_ams_addObjectsFromNullableArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_addObjectsFromNullableArray:");
}

id objc_msgSend_ams_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_altDSID");
}

id objc_msgSend_ams_anyWithTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_anyWithTest:");
}

id objc_msgSend_ams_cachesDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_cachesDirectory");
}

id objc_msgSend_ams_configurationWithProcessInfo_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_configurationWithProcessInfo:bag:");
}

id objc_msgSend_ams_cookies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_cookies");
}

id objc_msgSend_ams_cookiesByMergingProperties_intoProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_cookiesByMergingProperties:intoProperties:");
}

id objc_msgSend_ams_dictionaryByAddingEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_dictionaryByAddingEntriesFromDictionary:");
}

id objc_msgSend_ams_fetchGrandSlamTokenForAccount_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_fetchGrandSlamTokenForAccount:withIdentifier:");
}

id objc_msgSend_ams_fetchGrandSlamTokenForAccount_withIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_fetchGrandSlamTokenForAccount:withIdentifier:error:");
}

id objc_msgSend_ams_fetchLocaliTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_fetchLocaliTunesAccount");
}

id objc_msgSend_ams_fetchiTunesAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_fetchiTunesAccounts");
}

id objc_msgSend_ams_fetchiTunesSandboxAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_fetchiTunesSandboxAccounts");
}

id objc_msgSend_ams_filterUsingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_filterUsingTest:");
}

id objc_msgSend_ams_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_firstObjectPassingTest:");
}

id objc_msgSend_ams_hasDomain_code_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_hasDomain:code:");
}

id objc_msgSend_ams_homeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_homeIdentifier");
}

id objc_msgSend_ams_homeUserAllIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_homeUserAllIdentifiers");
}

id objc_msgSend_ams_homeUserHiddenIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_homeUserHiddenIdentifiers");
}

id objc_msgSend_ams_homeUserIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_homeUserIdentifiers");
}

id objc_msgSend_ams_iTunesAccountForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountForAccount:");
}

id objc_msgSend_ams_iTunesAccountForAccount_forMediaType_createIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountForAccount:forMediaType:createIfNeeded:");
}

id objc_msgSend_ams_iTunesAccountWithHomeUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountWithHomeUserIdentifier:");
}

id objc_msgSend_ams_iTunesAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccounts");
}

id objc_msgSend_ams_iTunesAccountsForMediaTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountsForMediaTypes:");
}

id objc_msgSend_ams_iTunesAccountsWithHomeUserIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountsWithHomeUserIdentifiers");
}

id objc_msgSend_ams_invertedDictionaryUsingTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_invertedDictionaryUsingTransform:");
}

id objc_msgSend_ams_invertedDictionaryUsingTransformIgnoresNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_invertedDictionaryUsingTransformIgnoresNil:");
}

id objc_msgSend_ams_isLocalAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isLocalAccount");
}

id objc_msgSend_ams_isPrivateListeningEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isPrivateListeningEnabled");
}

id objc_msgSend_ams_isPrivateListeningEnabledForHomeUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isPrivateListeningEnabledForHomeUserIdentifier:");
}

id objc_msgSend_ams_isSandboxAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isSandboxAccount");
}

id objc_msgSend_ams_isSecondaryHomeUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isSecondaryHomeUser");
}

id objc_msgSend_ams_mapWithTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_mapWithTransform:");
}

id objc_msgSend_ams_mapWithTransformIgnoresNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_mapWithTransformIgnoresNil:");
}

id objc_msgSend_ams_mergePrivacyAcknowledgement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_mergePrivacyAcknowledgement:");
}

id objc_msgSend_ams_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_message");
}

id objc_msgSend_ams_multiUserTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_multiUserTokenForAccount:");
}

id objc_msgSend_ams_privacyAcknowledgement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_privacyAcknowledgement");
}

id objc_msgSend_ams_propertiesForCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_propertiesForCookies:");
}

id objc_msgSend_ams_pushRegistrationThrottleMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_pushRegistrationThrottleMap");
}

id objc_msgSend_ams_recursiveHasDomain_code_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_recursiveHasDomain:code:");
}

id objc_msgSend_ams_registerSuccessCriteria(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_registerSuccessCriteria");
}

id objc_msgSend_ams_sanitizedForSecureCoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sanitizedForSecureCoding");
}

id objc_msgSend_ams_saveAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_saveAccount:");
}

id objc_msgSend_ams_saveAccount_verifyCredentials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_saveAccount:verifyCredentials:");
}

id objc_msgSend_ams_setAccountFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setAccountFlags:");
}

id objc_msgSend_ams_setDisableAccountFlagsSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setDisableAccountFlagsSync:");
}

id objc_msgSend_ams_setDisablePrivacyAcknowledgementSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setDisablePrivacyAcknowledgementSync:");
}

id objc_msgSend_ams_setInUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setInUse:");
}

id objc_msgSend_ams_setIsSecondaryHomeUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setIsSecondaryHomeUser:");
}

id objc_msgSend_ams_setMultiUserToken_forAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setMultiUserToken:forAccount:error:");
}

id objc_msgSend_ams_setNullableObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setNullableObject:forKey:");
}

id objc_msgSend_ams_setPrivateListeningEnabled_forHomeUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setPrivateListeningEnabled:forHomeUserIdentifier:");
}

id objc_msgSend_ams_setPushRegistrationThrottleMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setPushRegistrationThrottleMap:");
}

id objc_msgSend_ams_setRegisterSuccessCriteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setRegisterSuccessCriteria:");
}

id objc_msgSend_ams_sha512HashStringUsingEncoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sha512HashStringUsingEncoding:error:");
}

id objc_msgSend_ams_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sharedAccountStore");
}

id objc_msgSend_ams_sharedAccountStoreForMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sharedAccountStoreForMediaType:");
}

id objc_msgSend_ams_storefrontForMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_storefrontForMediaType:");
}

id objc_msgSend_ams_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_title");
}

id objc_msgSend_ams_underlyingError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_underlyingError");
}

id objc_msgSend_ams_underlyingErrorWithDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_underlyingErrorWithDomain:");
}

id objc_msgSend_amsa_allDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsa_allDevices");
}

id objc_msgSend_amsd_addRecordZoneName_homeUserIdentifier_showProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_addRecordZoneName:homeUserIdentifier:showProfile:");
}

id objc_msgSend_amsd_createAppProvidedDataWithMultiUserAction_home_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_createAppProvidedDataWithMultiUserAction:home:");
}

id objc_msgSend_amsd_createAppProvidedDataWithMultiUserAction_homeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_createAppProvidedDataWithMultiUserAction:homeIdentifier:");
}

id objc_msgSend_amsd_isCKChangeTokenExpiredError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKChangeTokenExpiredError");
}

id objc_msgSend_amsd_isCKManateeUnavailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKManateeUnavailable");
}

id objc_msgSend_amsd_isCKMissingManateeIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKMissingManateeIdentity");
}

id objc_msgSend_amsd_isCKPartialFailureError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKPartialFailureError");
}

id objc_msgSend_amsd_isCKServerRecordChangedError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKServerRecordChangedError");
}

id objc_msgSend_amsd_isCKThrottledError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKThrottledError");
}

id objc_msgSend_amsd_isCKUnknownItemError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKUnknownItemError");
}

id objc_msgSend_amsd_markRecordZoneNameHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_markRecordZoneNameHidden:");
}

id objc_msgSend_amsd_multiUserAuthenticateOptionsWithAppProvidedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_multiUserAuthenticateOptionsWithAppProvidedData:");
}

id objc_msgSend_amsd_processName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_processName");
}

id objc_msgSend_amsd_recordZoneNames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_recordZoneNames");
}

id objc_msgSend_amsd_removeAllRecordZoneNames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_removeAllRecordZoneNames");
}

id objc_msgSend_amsd_removeRecordZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_removeRecordZoneName:");
}

id objc_msgSend_amsd_saveMultiUserManagedAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_saveMultiUserManagedAccount:");
}

id objc_msgSend_amsd_setPrivateListeningEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_setPrivateListeningEnabled:");
}

id objc_msgSend_amsd_setPushRegistrationThrottleMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_setPushRegistrationThrottleMap:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_aps(void *a1, const char *a2, ...)
{
  return _[a1 aps];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assessmentWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assessmentWithCompletion:");
}

id objc_msgSend_attestationWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attestationWithOptions:error:");
}

id objc_msgSend_authenticationResults(void *a1, const char *a2, ...)
{
  return _[a1 authenticationResults];
}

id objc_msgSend_authenticationTokenType(void *a1, const char *a2, ...)
{
  return _[a1 authenticationTokenType];
}

id objc_msgSend_bag(void *a1, const char *a2, ...)
{
  return _[a1 bag];
}

id objc_msgSend_bagForMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForMediaType:");
}

id objc_msgSend_bagForProfile_profileVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForProfile:profileVersion:");
}

id objc_msgSend_bagForProfile_profileVersion_processInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForProfile:profileVersion:processInfo:");
}

id objc_msgSend_bagSubProfile(void *a1, const char *a2, ...)
{
  return _[a1 bagSubProfile];
}

id objc_msgSend_bagSubProfileVersion(void *a1, const char *a2, ...)
{
  return _[a1 bagSubProfileVersion];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_batchSize(void *a1, const char *a2, ...)
{
  return _[a1 batchSize];
}

id objc_msgSend_binaryPromiseAdapter(void *a1, const char *a2, ...)
{
  return _[a1 binaryPromiseAdapter];
}

id objc_msgSend_blindedElement(void *a1, const char *a2, ...)
{
  return _[a1 blindedElement];
}

id objc_msgSend_blindedMessage(void *a1, const char *a2, ...)
{
  return _[a1 blindedMessage];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _[a1 buildVersion];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_cachedMessages(void *a1, const char *a2, ...)
{
  return _[a1 cachedMessages];
}

id objc_msgSend_canMakeLocalPayments(void *a1, const char *a2, ...)
{
  return _[a1 canMakeLocalPayments];
}

id objc_msgSend_canRunOnBattery(void *a1, const char *a2, ...)
{
  return _[a1 canRunOnBattery];
}

id objc_msgSend_catchWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catchWithBlock:");
}

id objc_msgSend_certificateChainStringsForOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificateChainStringsForOptions:error:");
}

id objc_msgSend_changeAutoPlayFor_to_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeAutoPlayFor:to:completionHandler:");
}

id objc_msgSend_changePersonalizationFor_to_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changePersonalizationFor:to:completionHandler:");
}

id objc_msgSend_changeToken(void *a1, const char *a2, ...)
{
  return _[a1 changeToken];
}

id objc_msgSend_changeTokens(void *a1, const char *a2, ...)
{
  return _[a1 changeTokens];
}

id objc_msgSend_changedRecordZones(void *a1, const char *a2, ...)
{
  return _[a1 changedRecordZones];
}

id objc_msgSend_changedRecords(void *a1, const char *a2, ...)
{
  return _[a1 changedRecords];
}

id objc_msgSend_checkIn(void *a1, const char *a2, ...)
{
  return _[a1 checkIn];
}

id objc_msgSend_classConsumers(void *a1, const char *a2, ...)
{
  return _[a1 classConsumers];
}

id objc_msgSend_cleanUpCookieDatabasesWithValidIdentifiers_fileManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpCookieDatabasesWithValidIdentifiers:fileManager:");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearDanglingCookieDatabases(void *a1, const char *a2, ...)
{
  return _[a1 clearDanglingCookieDatabases];
}

id objc_msgSend_clearDanglingCookieDatabasesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDanglingCookieDatabasesWithCompletion:");
}

id objc_msgSend_clientInfo(void *a1, const char *a2, ...)
{
  return _[a1 clientInfo];
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _[a1 clientInfoHeader];
}

id objc_msgSend_cloudContainer(void *a1, const char *a2, ...)
{
  return _[a1 cloudContainer];
}

id objc_msgSend_cloudDataManager(void *a1, const char *a2, ...)
{
  return _[a1 cloudDataManager];
}

id objc_msgSend_cloudDataManagerDataSource_didChangeWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudDataManagerDataSource:didChangeWithType:");
}

id objc_msgSend_cloudKitFetchBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitFetchBeginDate];
}

id objc_msgSend_cloudKitSaveBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitSaveBeginDate];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionHandlerAdapter(void *a1, const char *a2, ...)
{
  return _[a1 completionHandlerAdapter];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_confirmationDialogRequestForBiometricsType_clientInfo_acceptActionIdentifier_declineActionIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "confirmationDialogRequestForBiometricsType:clientInfo:acceptActionIdentifier:declineActionIdentifier:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectionQueue(void *a1, const char *a2, ...)
{
  return _[a1 connectionQueue];
}

id objc_msgSend_connections(void *a1, const char *a2, ...)
{
  return _[a1 connections];
}

id objc_msgSend_containerID(void *a1, const char *a2, ...)
{
  return _[a1 containerID];
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 containerIdentifier];
}

id objc_msgSend_containerWithContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithContainerIdentifier:");
}

id objc_msgSend_containerWithContainerIdentifier_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithContainerIdentifier:options:");
}

id objc_msgSend_containers(void *a1, const char *a2, ...)
{
  return _[a1 containers];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_continueWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueWithBlock:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_cookieDatabaseCache(void *a1, const char *a2, ...)
{
  return _[a1 cookieDatabaseCache];
}

id objc_msgSend_cookieDatabaseForIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cookieDatabaseForIdentifiers:error:");
}

id objc_msgSend_cookiePropertiesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cookiePropertiesWithError:");
}

id objc_msgSend_cookiePropertyCache(void *a1, const char *a2, ...)
{
  return _[a1 cookiePropertyCache];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAccessControlRefWithAccount_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAccessControlRefWithAccount:options:error:");
}

id objc_msgSend_copyPublicKeyForOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPublicKeyForOptions:error:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_createAccessControlRefWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAccessControlRefWithOptions:error:");
}

id objc_msgSend_createBagForSubProfile(void *a1, const char *a2, ...)
{
  return _[a1 createBagForSubProfile];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createIfMissing(void *a1, const char *a2, ...)
{
  return _[a1 createIfMissing];
}

id objc_msgSend_createProtoMessage(void *a1, const char *a2, ...)
{
  return _[a1 createProtoMessage];
}

id objc_msgSend_createRecordWithRecordName_recordType_recordZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRecordWithRecordName:recordType:recordZone:");
}

id objc_msgSend_createRecordZoneWithRecordZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRecordZoneWithRecordZoneName:");
}

id objc_msgSend_criteria(void *a1, const char *a2, ...)
{
  return _[a1 criteria];
}

id objc_msgSend_currentAccessory(void *a1, const char *a2, ...)
{
  return _[a1 currentAccessory];
}

id objc_msgSend_currentDeviceIsAccessoryForHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDeviceIsAccessoryForHome:");
}

id objc_msgSend_currentHome(void *a1, const char *a2, ...)
{
  return _[a1 currentHome];
}

id objc_msgSend_currentInfo(void *a1, const char *a2, ...)
{
  return _[a1 currentInfo];
}

id objc_msgSend_currentProcess(void *a1, const char *a2, ...)
{
  return _[a1 currentProcess];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _[a1 dataSource];
}

id objc_msgSend_dataTaskPromiseWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskPromiseWithRequest:");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithAccounts_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithAccounts:completionHandler:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_databaseForHome_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseForHome:user:");
}

id objc_msgSend_databasePathForIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databasePathForIdentifiers:error:");
}

id objc_msgSend_databaseScope(void *a1, const char *a2, ...)
{
  return _[a1 databaseScope];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_dbPath(void *a1, const char *a2, ...)
{
  return _[a1 dbPath];
}

id objc_msgSend_defaultBag(void *a1, const char *a2, ...)
{
  return _[a1 defaultBag];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultRecordZone(void *a1, const char *a2, ...)
{
  return _[a1 defaultRecordZone];
}

id objc_msgSend_defaultSession(void *a1, const char *a2, ...)
{
  return _[a1 defaultSession];
}

id objc_msgSend_delay(void *a1, const char *a2, ...)
{
  return _[a1 delay];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegates(void *a1, const char *a2, ...)
{
  return _[a1 delegates];
}

id objc_msgSend_deleteAllKeysWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllKeysWithError:");
}

id objc_msgSend_deleteRecordWithRecordIdentifier_missingEncryptionIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordWithRecordIdentifier:missingEncryptionIdentity:");
}

id objc_msgSend_deleteRecordZonesWithRecordZoneIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordZonesWithRecordZoneIdentifiers:");
}

id objc_msgSend_deletedRecordZones(void *a1, const char *a2, ...)
{
  return _[a1 deletedRecordZones];
}

id objc_msgSend_deletedRecords(void *a1, const char *a2, ...)
{
  return _[a1 deletedRecords];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _[a1 destination];
}

id objc_msgSend_determineAccountForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineAccountForAccount:");
}

id objc_msgSend_deviceCanManageMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 deviceCanManageMultiUser];
}

id objc_msgSend_deviceFromIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceFromIdentifier:");
}

id objc_msgSend_deviceIsAppleTV(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsAppleTV];
}

id objc_msgSend_deviceIsAppleWatch(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsAppleWatch];
}

id objc_msgSend_deviceIsAudioAccessory(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsAudioAccessory];
}

id objc_msgSend_deviceIsBundle(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsBundle];
}

id objc_msgSend_deviceIsiPad(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsiPad];
}

id objc_msgSend_deviceIsiPhone(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsiPhone];
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _[a1 deviceName];
}

id objc_msgSend_deviceNameChangedToken(void *a1, const char *a2, ...)
{
  return _[a1 deviceNameChangedToken];
}

id objc_msgSend_deviceSupportsMultipleUsers(void *a1, const char *a2, ...)
{
  return _[a1 deviceSupportsMultipleUsers];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dismissalCompletionQueue(void *a1, const char *a2, ...)
{
  return _[a1 dismissalCompletionQueue];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_dsidHashCache(void *a1, const char *a2, ...)
{
  return _[a1 dsidHashCache];
}

id objc_msgSend_enabledActionTypes(void *a1, const char *a2, ...)
{
  return _[a1 enabledActionTypes];
}

id objc_msgSend_enabledThrottling(void *a1, const char *a2, ...)
{
  return _[a1 enabledThrottling];
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValues];
}

id objc_msgSend_enqueBeginMetrics(void *a1, const char *a2, ...)
{
  return _[a1 enqueBeginMetrics];
}

id objc_msgSend_enqueFailedMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueFailedMetrics:");
}

id objc_msgSend_enqueueCloudKitFetchBeganEvent(void *a1, const char *a2, ...)
{
  return _[a1 enqueueCloudKitFetchBeganEvent];
}

id objc_msgSend_enqueueCloudKitFetchFailedEventWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueCloudKitFetchFailedEventWithError:");
}

id objc_msgSend_enqueueCloudKitFetchSuccessEvent(void *a1, const char *a2, ...)
{
  return _[a1 enqueueCloudKitFetchSuccessEvent];
}

id objc_msgSend_enqueueCloudKitSaveReceivedEvent(void *a1, const char *a2, ...)
{
  return _[a1 enqueueCloudKitSaveReceivedEvent];
}

id objc_msgSend_enqueueCloudKitSaveRecordFinishEventWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueCloudKitSaveRecordFinishEventWithError:");
}

id objc_msgSend_enqueueGenerateMultiUserTokenBeginEvent(void *a1, const char *a2, ...)
{
  return _[a1 enqueueGenerateMultiUserTokenBeginEvent];
}

id objc_msgSend_enqueueGenerateMultiUserTokenFailedEventWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueGenerateMultiUserTokenFailedEventWithError:");
}

id objc_msgSend_enqueueGenerateMultiUserTokenSuccessEvent(void *a1, const char *a2, ...)
{
  return _[a1 enqueueGenerateMultiUserTokenSuccessEvent];
}

id objc_msgSend_enqueueHomeKitChangedReceivedEvent(void *a1, const char *a2, ...)
{
  return _[a1 enqueueHomeKitChangedReceivedEvent];
}

id objc_msgSend_enqueueHomeKitRepairRequestSentEventForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueHomeKitRepairRequestSentEventForAccount:");
}

id objc_msgSend_enqueueMultiUserAuthenticationTokenFetchBeginEventForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueMultiUserAuthenticationTokenFetchBeginEventForAccount:");
}

id objc_msgSend_enqueueMultiUserAuthenticationTokenFetchFailedEventForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueMultiUserAuthenticationTokenFetchFailedEventForAccount:error:");
}

id objc_msgSend_enqueueMultiUserAuthenticationTokenFetchSuccessEventForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueMultiUserAuthenticationTokenFetchSuccessEventForAccount:");
}

id objc_msgSend_enqueueMultiUserRefreshBeginEventWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueMultiUserRefreshBeginEventWithOptions:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _[a1 errors];
}

id objc_msgSend_establishShareWithHomeOwner_container_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "establishShareWithHomeOwner:container:completionHandler:");
}

id objc_msgSend_evaluatedElementData(void *a1, const char *a2, ...)
{
  return _[a1 evaluatedElementData];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_failures(void *a1, const char *a2, ...)
{
  return _[a1 failures];
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return _[a1 familyName];
}

id objc_msgSend_fetchAllRecordZonesOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllRecordZonesOperation];
}

id objc_msgSend_fetchChangedRecordZones(void *a1, const char *a2, ...)
{
  return _[a1 fetchChangedRecordZones];
}

id objc_msgSend_fetchChangedRecordsInRecordZonesWithRecordZoneIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchChangedRecordsInRecordZonesWithRecordZoneIdentifiers:");
}

id objc_msgSend_fetchHomeHomeUserPairForAccount_homeUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHomeHomeUserPairForAccount:homeUserIdentifier:");
}

id objc_msgSend_fetchRecordWithName_zoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithName:zoneIdentifier:");
}

id objc_msgSend_fetchRecordWithName_zoneIdentifier_qualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithName:zoneIdentifier:qualityOfService:");
}

id objc_msgSend_fetchRecordWithRecordIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithRecordIdentifier:");
}

id objc_msgSend_fetchRecordWithRecordIdentifier_qualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithRecordIdentifier:qualityOfService:");
}

id objc_msgSend_fetchRecordZones(void *a1, const char *a2, ...)
{
  return _[a1 fetchRecordZones];
}

id objc_msgSend_fetchRecordZonesWithQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZonesWithQualityOfService:");
}

id objc_msgSend_fetchTokenForAccount_tokenIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTokenForAccount:tokenIdentifier:");
}

id objc_msgSend_fieldForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fieldForKey:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_finalizeWithEvaluatedElement_proof_publicKey_fsr_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeWithEvaluatedElement:proof:publicKey:fsr:error:");
}

id objc_msgSend_finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithError:");
}

id objc_msgSend_finishWithPromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithPromise:");
}

id objc_msgSend_finishWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:");
}

id objc_msgSend_finishWithResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:error:");
}

id objc_msgSend_finishWithSuccess(void *a1, const char *a2, ...)
{
  return _[a1 finishWithSuccess];
}

id objc_msgSend_first(void *a1, const char *a2, ...)
{
  return _[a1 first];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_flushAllKeepAliveTransactions(void *a1, const char *a2, ...)
{
  return _[a1 flushAllKeepAliveTransactions];
}

id objc_msgSend_fsrData(void *a1, const char *a2, ...)
{
  return _[a1 fsrData];
}

id objc_msgSend_getCookiePropertiesForAccount_cookieDatabaseOnly_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCookiePropertiesForAccount:cookieDatabaseOnly:error:");
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _[a1 givenName];
}

id objc_msgSend_gracePeriod(void *a1, const char *a2, ...)
{
  return _[a1 gracePeriod];
}

id objc_msgSend_grandSlamTokenIdentifierForAuthenticationTokenType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grandSlamTokenIdentifierForAuthenticationTokenType:");
}

id objc_msgSend_groups(void *a1, const char *a2, ...)
{
  return _[a1 groups];
}

id objc_msgSend_handleAuthenticateRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAuthenticateRequest:completion:");
}

id objc_msgSend_handleCachedDataUpdate(void *a1, const char *a2, ...)
{
  return _[a1 handleCachedDataUpdate];
}

id objc_msgSend_handleDialogRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDialogRequest:completion:");
}

id objc_msgSend_handleExpiredAuthenticationTokenErrorWithResult_error_forRequest_account_tokenIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleExpiredAuthenticationTokenErrorWithResult:error:forRequest:account:tokenIdentifier:");
}

id objc_msgSend_handleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotification:");
}

id objc_msgSend_handlePushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePushNotification:");
}

id objc_msgSend_handleRecordZoneFetchFailed_inDatabase_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRecordZoneFetchFailed:inDatabase:withError:");
}

id objc_msgSend_handleResponse_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponse:bag:");
}

id objc_msgSend_hasKeysForAccount_forSignaturePurpose_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKeysForAccount:forSignaturePurpose:withError:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashedDescription(void *a1, const char *a2, ...)
{
  return _[a1 hashedDescription];
}

id objc_msgSend_headersForRequest_buyParams_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headersForRequest:buyParams:bag:");
}

id objc_msgSend_home(void *a1, const char *a2, ...)
{
  return _[a1 home];
}

id objc_msgSend_homeAccessControlForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeAccessControlForUser:");
}

id objc_msgSend_homeForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeForRecord:");
}

id objc_msgSend_homeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 homeIdentifier];
}

id objc_msgSend_homeIdentifierForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeIdentifierForRecord:");
}

id objc_msgSend_homeIdentifierForRecordZone_inDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeIdentifierForRecordZone:inDatabase:");
}

id objc_msgSend_homeKitRepairRequestBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 homeKitRepairRequestBeginDate];
}

id objc_msgSend_homeManager(void *a1, const char *a2, ...)
{
  return _[a1 homeManager];
}

id objc_msgSend_homeManagerDataSource_didChangeWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeManagerDataSource:didChangeWithType:");
}

id objc_msgSend_homeManagerDataSource_didReceiveCloudShare_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeManagerDataSource:didReceiveCloudShare:completion:");
}

id objc_msgSend_homeUserIdentifierForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeUserIdentifierForRecord:");
}

id objc_msgSend_homeWithHomeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeWithHomeIdentifier:");
}

id objc_msgSend_homeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeWithIdentifier:");
}

id objc_msgSend_homes(void *a1, const char *a2, ...)
{
  return _[a1 homes];
}

id objc_msgSend_homesUpdatedPromise(void *a1, const char *a2, ...)
{
  return _[a1 homesUpdatedPromise];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierForAccount_bag_bagNamespace_keyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierForAccount:bag:bagNamespace:keyName:");
}

id objc_msgSend_identifiers(void *a1, const char *a2, ...)
{
  return _[a1 identifiers];
}

id objc_msgSend_identifiersForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersForRecord:");
}

id objc_msgSend_identifiersForRecordZone_inDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersForRecordZone:inDatabase:");
}

id objc_msgSend_identifiersForRecordZone_inDatabase_qualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersForRecordZone:inDatabase:qualityOfService:");
}

id objc_msgSend_ignoreThrottling(void *a1, const char *a2, ...)
{
  return _[a1 ignoreThrottling];
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 incomingResponseIdentifier];
}

id objc_msgSend_inexpensiveNetworkConnection(void *a1, const char *a2, ...)
{
  return _[a1 inexpensiveNetworkConnection];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:");
}

id objc_msgSend_initWithAccount_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:bag:");
}

id objc_msgSend_initWithAccount_bag_initialAuthTokenProvider_authTokenRefreshProvider_odiAssessmentProvider_deviceIdentitySigningProvider_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithAccount:bag:initialAuthTokenProvider:authTokenRefreshProvider:odiAssessmentProvider:deviceIdentitySigningProvider:");
}

id objc_msgSend_initWithAccount_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:options:");
}

id objc_msgSend_initWithAccount_token_environment_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:token:environment:bag:");
}

id objc_msgSend_initWithAccountAuthToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountAuthToken:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBag:");
}

id objc_msgSend_initWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBlock:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChangedRecordZones_deletedRecordZones_changeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangedRecordZones:deletedRecordZones:changeToken:");
}

id objc_msgSend_initWithChangedRecords_deletedRecords_errors_changeTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangedRecords:deletedRecords:errors:changeTokens:");
}

id objc_msgSend_initWithCloudDataManager_homeManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudDataManager:homeManager:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConfiguration_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:bag:");
}

id objc_msgSend_initWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:");
}

id objc_msgSend_initWithContainerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:");
}

id objc_msgSend_initWithContainerID_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:bag:");
}

id objc_msgSend_initWithContainerID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:options:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithController_account_home_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:account:home:");
}

id objc_msgSend_initWithController_cloudShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudShare:");
}

id objc_msgSend_initWithController_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:database:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataSource:");
}

id objc_msgSend_initWithEnabledActionTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnabledActionTypes:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithErrors:");
}

id objc_msgSend_initWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirst:second:");
}

id objc_msgSend_initWithHome_dataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHome:dataSource:");
}

id objc_msgSend_initWithHome_homeUser_database_metrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHome:homeUser:database:metrics:");
}

id objc_msgSend_initWithHomeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHomeIdentifier:");
}

id objc_msgSend_initWithHomes_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHomes:options:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_destination_purpose_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:destination:purpose:object:");
}

id objc_msgSend_initWithInfo_responder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInfo:responder:");
}

id objc_msgSend_initWithJSONDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithJSONDictionary:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMaxSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxSize:");
}

id objc_msgSend_initWithMultiUserController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMultiUserController:");
}

id objc_msgSend_initWithMultiUserController_homes_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMultiUserController:homes:options:");
}

id objc_msgSend_initWithNameSpace_reportedScore_blindedMessage_keyID_authenticationTokenType_shouldIncludeODIAssessment_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithNameSpace:reportedScore:blindedMessage:keyID:authenticationTokenType:shouldIncludeODIAssessment:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreviousServerChangeToken:");
}

id objc_msgSend_initWithProtobufData_type_isResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtobufData:type:isResponse:");
}

id objc_msgSend_initWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneID:");
}

id objc_msgSend_initWithRecordZoneIDs_configurationsByRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:configurationsByRecordZoneID:");
}

id objc_msgSend_initWithRecordZoneIdentifiers_inDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIdentifiers:inDatabase:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:");
}

id objc_msgSend_initWithResponseDictionary_expectedNamespace_expectedReportedScore_keyID_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponseDictionary:expectedNamespace:expectedReportedScore:keyID:error:");
}

id objc_msgSend_initWithResults_failures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResults:failures:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceName_viewControllerClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:viewControllerClassName:");
}

id objc_msgSend_initWithSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSetting:");
}

id objc_msgSend_initWithShareInvitation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareInvitation:");
}

id objc_msgSend_initWithShareMetadatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareMetadatas:");
}

id objc_msgSend_initWithShareURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareURLs:");
}

id objc_msgSend_initWithShareURLs_invitationTokensByShareURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareURLs:invitationTokensByShareURL:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSubscriptionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionID:");
}

id objc_msgSend_initWithSubscriptionsToSave_subscriptionIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionsToSave:subscriptionIDsToDelete:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTDMToken_pks_keyID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTDMToken:pks:keyID:");
}

id objc_msgSend_initWithTID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTID:");
}

id objc_msgSend_initWithTitle_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:message:");
}

id objc_msgSend_initWithTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUser:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_instanceConsumers(void *a1, const char *a2, ...)
{
  return _[a1 instanceConsumers];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_intersectsSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectsSet:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _[a1 interval];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_isActionSupported_withAccessControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActionSupported:withAccessControl:");
}

id objc_msgSend_isActionSupportedForType_account_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActionSupportedForType:account:options:error:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _[a1 isAtEnd];
}

id objc_msgSend_isAvailableForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAvailableForAccount:");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isConnectionEntitled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectionEntitled:");
}

id objc_msgSend_isCurrentDeviceAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentDeviceAccessory];
}

id objc_msgSend_isCurrentUserOwner(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentUserOwner];
}

id objc_msgSend_isCurrentUserRestrictedGuest(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentUserRestrictedGuest];
}

id objc_msgSend_isDefaultRecordZone(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultRecordZone];
}

id objc_msgSend_isDeviceInBiometricLockout(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceInBiometricLockout];
}

id objc_msgSend_isDeviceOdeonConfigured(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceOdeonConfigured];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpired(void *a1, const char *a2, ...)
{
  return _[a1 isExpired];
}

id objc_msgSend_isIdentityMapValid(void *a1, const char *a2, ...)
{
  return _[a1 isIdentityMapValid];
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return _[a1 isLocallyPaired];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMultiUserEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isMultiUserEnabled];
}

id objc_msgSend_isPrimary(void *a1, const char *a2, ...)
{
  return _[a1 isPrimary];
}

id objc_msgSend_isPrivateDatabase(void *a1, const char *a2, ...)
{
  return _[a1 isPrivateDatabase];
}

id objc_msgSend_isReply(void *a1, const char *a2, ...)
{
  return _[a1 isReply];
}

id objc_msgSend_isRestrictedGuest(void *a1, const char *a2, ...)
{
  return _[a1 isRestrictedGuest];
}

id objc_msgSend_isRestrictedGuestUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestrictedGuestUserIdentifier:");
}

id objc_msgSend_isRunningUnitTests(void *a1, const char *a2, ...)
{
  return _[a1 isRunningUnitTests];
}

id objc_msgSend_isScheduled(void *a1, const char *a2, ...)
{
  return _[a1 isScheduled];
}

id objc_msgSend_isSharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 isSharedDatabase];
}

id objc_msgSend_isUserInitiated(void *a1, const char *a2, ...)
{
  return _[a1 isUserInitiated];
}

id objc_msgSend_isValidEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidEnvironment:");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_keyID(void *a1, const char *a2, ...)
{
  return _[a1 keyID];
}

id objc_msgSend_keyIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 keyIdentifier];
}

id objc_msgSend_keyPath(void *a1, const char *a2, ...)
{
  return _[a1 keyPath];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedDevicesWithRelationship:");
}

id objc_msgSend_listeningHistoryUpdateEnabledForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeningHistoryUpdateEnabledForUser:");
}

id objc_msgSend_listeningHistoryUpdateEnabledForUser_home_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeningHistoryUpdateEnabledForUser:home:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockUptimeDictionary(void *a1, const char *a2, ...)
{
  return _[a1 lockUptimeDictionary];
}

id objc_msgSend_logKey(void *a1, const char *a2, ...)
{
  return _[a1 logKey];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_machServiceName(void *a1, const char *a2, ...)
{
  return _[a1 machServiceName];
}

id objc_msgSend_manualSyncFor_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualSyncFor:completionHandler:");
}

id objc_msgSend_mediaContentProfileAccessControlForHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaContentProfileAccessControlForHome:");
}

id objc_msgSend_mediaProfileEnabledForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaProfileEnabledForUser:");
}

id objc_msgSend_mediaProfileEnabledForUser_home_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaProfileEnabledForUser:home:");
}

id objc_msgSend_messageFromProtoMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageFromProtoMessage:");
}

id objc_msgSend_messageID(void *a1, const char *a2, ...)
{
  return _[a1 messageID];
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _[a1 metrics];
}

id objc_msgSend_metricsIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 metricsIdentifier];
}

id objc_msgSend_multiUserAuthBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 multiUserAuthBeginDate];
}

id objc_msgSend_multiUserContainerID(void *a1, const char *a2, ...)
{
  return _[a1 multiUserContainerID];
}

id objc_msgSend_multiUserController(void *a1, const char *a2, ...)
{
  return _[a1 multiUserController];
}

id objc_msgSend_multiUserGenerateTokenBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 multiUserGenerateTokenBeginDate];
}

id objc_msgSend_multiUserStatus(void *a1, const char *a2, ...)
{
  return _[a1 multiUserStatus];
}

id objc_msgSend_multiUserStatusForHomeUser_inHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiUserStatusForHomeUser:inHome:");
}

id objc_msgSend_multiUserStatusForRecord_withHomeManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiUserStatusForRecord:withHomeManager:");
}

id objc_msgSend_multiUserTokenForAccount_homeUserIdentifier_qualityOfService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiUserTokenForAccount:homeUserIdentifier:qualityOfService:completion:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameComponents(void *a1, const char *a2, ...)
{
  return _[a1 nameComponents];
}

id objc_msgSend_nameSpace(void *a1, const char *a2, ...)
{
  return _[a1 nameSpace];
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_newScore(void *a1, const char *a2, ...)
{
  return _[a1 newScore];
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_notifyDismissDialogWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDismissDialogWithIdentifier:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForSetting:");
}

id objc_msgSend_optionalWithNil(void *a1, const char *a2, ...)
{
  return _[a1 optionalWithNil];
}

id objc_msgSend_optionalWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionalWithValue:");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_outgoingMessageReplyHandlers(void *a1, const char *a2, ...)
{
  return _[a1 outgoingMessageReplyHandlers];
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResponseIdentifier];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_ownerName(void *a1, const char *a2, ...)
{
  return _[a1 ownerName];
}

id objc_msgSend_participantRole(void *a1, const char *a2, ...)
{
  return _[a1 participantRole];
}

id objc_msgSend_participantStatus(void *a1, const char *a2, ...)
{
  return _[a1 participantStatus];
}

id objc_msgSend_participants(void *a1, const char *a2, ...)
{
  return _[a1 participants];
}

id objc_msgSend_passcodeStringPromise(void *a1, const char *a2, ...)
{
  return _[a1 passcodeStringPromise];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_paymentHardwareStatusWithType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paymentHardwareStatusWithType:completion:");
}

id objc_msgSend_paymentHardwareType(void *a1, const char *a2, ...)
{
  return _[a1 paymentHardwareType];
}

id objc_msgSend_perform(void *a1, const char *a2, ...)
{
  return _[a1 perform];
}

id objc_msgSend_performAuthKitUpdate(void *a1, const char *a2, ...)
{
  return _[a1 performAuthKitUpdate];
}

id objc_msgSend_performAuthentication(void *a1, const char *a2, ...)
{
  return _[a1 performAuthentication];
}

id objc_msgSend_performAuthenticationForHomeParticipantRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthenticationForHomeParticipantRecord:");
}

id objc_msgSend_performAuthenticationForHomeParticipantRecord_metricsIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthenticationForHomeParticipantRecord:metricsIdentifier:");
}

id objc_msgSend_performAuthenticationWithExportedToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthenticationWithExportedToken:");
}

id objc_msgSend_performBinaryTaskWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBinaryTaskWithBlock:");
}

id objc_msgSend_performBiometricTokenUpdateWithAccount_clientInfo_additionalDialogMetrics_shouldGenerateKeysOnly_shouldRequestConfirmation_userInitiated_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "performBiometricTokenUpdateWithAccount:clientInfo:additionalDialogMetrics:shouldGenerateKeysOnly:shouldReques tConfirmation:userInitiated:completion:");
}

id objc_msgSend_performBlindingWithTransactionID_keyID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlindingWithTransactionID:keyID:");
}

id objc_msgSend_performClientCertChainRequest(void *a1, const char *a2, ...)
{
  return _[a1 performClientCertChainRequest];
}

id objc_msgSend_performFetch(void *a1, const char *a2, ...)
{
  return _[a1 performFetch];
}

id objc_msgSend_performMigrationWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithOptions:");
}

id objc_msgSend_performOnStartup(void *a1, const char *a2, ...)
{
  return _[a1 performOnStartup];
}

id objc_msgSend_performReceiveFraudReportForServiceRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performReceiveFraudReportForServiceRequest:");
}

id objc_msgSend_performSession(void *a1, const char *a2, ...)
{
  return _[a1 performSession];
}

id objc_msgSend_performSignatureFromService(void *a1, const char *a2, ...)
{
  return _[a1 performSignatureFromService];
}

id objc_msgSend_performTask(void *a1, const char *a2, ...)
{
  return _[a1 performTask];
}

id objc_msgSend_performTaskWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTaskWithBlock:");
}

id objc_msgSend_performTaskWithPromiseBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTaskWithPromiseBlock:");
}

id objc_msgSend_performUnBlindingFraudReportForResponse_tdmToken_pks_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUnBlindingFraudReportForResponse:tdmToken:pks:error:");
}

id objc_msgSend_performUpdate(void *a1, const char *a2, ...)
{
  return _[a1 performUpdate];
}

id objc_msgSend_persistChangedRecordZonesChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistChangedRecordZonesChangeToken:");
}

id objc_msgSend_persistChangedRecordsChangeToken_forRecordZoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistChangedRecordsChangeToken:forRecordZoneIdentifier:");
}

id objc_msgSend_pks(void *a1, const char *a2, ...)
{
  return _[a1 pks];
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_preferredAttestationStyle(void *a1, const char *a2, ...)
{
  return _[a1 preferredAttestationStyle];
}

id objc_msgSend_preferredMediaUser(void *a1, const char *a2, ...)
{
  return _[a1 preferredMediaUser];
}

id objc_msgSend_previousCloudContainerStatus(void *a1, const char *a2, ...)
{
  return _[a1 previousCloudContainerStatus];
}

id objc_msgSend_primaryUser(void *a1, const char *a2, ...)
{
  return _[a1 primaryUser];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateDatabase(void *a1, const char *a2, ...)
{
  return _[a1 privateDatabase];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_promiseAdapter(void *a1, const char *a2, ...)
{
  return _[a1 promiseAdapter];
}

id objc_msgSend_promiseForEnqueueingEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseForEnqueueingEvents:");
}

id objc_msgSend_promiseWithAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithAll:");
}

id objc_msgSend_promiseWithAll_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithAll:timeout:");
}

id objc_msgSend_promiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithError:");
}

id objc_msgSend_promiseWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithResult:");
}

id objc_msgSend_promiseWithSuccess(void *a1, const char *a2, ...)
{
  return _[a1 promiseWithSuccess];
}

id objc_msgSend_promiseWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithTimeout:");
}

id objc_msgSend_proofData(void *a1, const char *a2, ...)
{
  return _[a1 proofData];
}

id objc_msgSend_provideFeedbackWithOutcome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideFeedbackWithOutcome:");
}

id objc_msgSend_purpose(void *a1, const char *a2, ...)
{
  return _[a1 purpose];
}

id objc_msgSend_pushEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 pushEnvironment];
}

id objc_msgSend_pushHandler(void *a1, const char *a2, ...)
{
  return _[a1 pushHandler];
}

id objc_msgSend_pushNotificationTopic(void *a1, const char *a2, ...)
{
  return _[a1 pushNotificationTopic];
}

id objc_msgSend_pushTopic(void *a1, const char *a2, ...)
{
  return _[a1 pushTopic];
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfService];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queueMetricsEventFor_appID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueMetricsEventFor:appID:completionHandler:");
}

id objc_msgSend_readWrite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readWrite:");
}

id objc_msgSend_reasonDescription(void *a1, const char *a2, ...)
{
  return _[a1 reasonDescription];
}

id objc_msgSend_reasonType(void *a1, const char *a2, ...)
{
  return _[a1 reasonType];
}

id objc_msgSend_recordZoneEncryption(void *a1, const char *a2, ...)
{
  return _[a1 recordZoneEncryption];
}

id objc_msgSend_refreshWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWithOptions:");
}

id objc_msgSend_refreshWithOptions_metrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWithOptions:metrics:");
}

id objc_msgSend_regenerateKeys(void *a1, const char *a2, ...)
{
  return _[a1 regenerateKeys];
}

id objc_msgSend_registerForContainerIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForContainerIDs:completion:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registerTaskQueue(void *a1, const char *a2, ...)
{
  return _[a1 registerTaskQueue];
}

id objc_msgSend_registerToAcceptCloudSharesForContainers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerToAcceptCloudSharesForContainers:");
}

id objc_msgSend_releaseKeepAliveTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseKeepAliveTransaction:");
}

id objc_msgSend_remoteConnection(void *a1, const char *a2, ...)
{
  return _[a1 remoteConnection];
}

id objc_msgSend_removeAccount_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAccount:withCompletionHandler:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeDataFor_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDataFor:completionHandler:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipant:");
}

id objc_msgSend_repeating(void *a1, const char *a2, ...)
{
  return _[a1 repeating];
}

id objc_msgSend_repeats(void *a1, const char *a2, ...)
{
  return _[a1 repeats];
}

id objc_msgSend_reportedScore(void *a1, const char *a2, ...)
{
  return _[a1 reportedScore];
}

id objc_msgSend_requestBodyParametersForRequest_odiAssessmentProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestBodyParametersForRequest:odiAssessmentProvider:");
}

id objc_msgSend_requestEncoderWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestEncoderWithAccount:");
}

id objc_msgSend_requestWithMethod_URL_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithMethod:URL:parameters:");
}

id objc_msgSend_requestWithMethod_bagURL_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithMethod:bagURL:parameters:");
}

id objc_msgSend_requireInexpensiveNetworkConnection(void *a1, const char *a2, ...)
{
  return _[a1 requireInexpensiveNetworkConnection];
}

id objc_msgSend_requireNetworkConnection(void *a1, const char *a2, ...)
{
  return _[a1 requireNetworkConnection];
}

id objc_msgSend_requiresNetwork(void *a1, const char *a2, ...)
{
  return _[a1 requiresNetwork];
}

id objc_msgSend_responderWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responderWithHandler:");
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return _[a1 response];
}

id objc_msgSend_resultWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithCompletion:");
}

id objc_msgSend_resultWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithError:");
}

id objc_msgSend_resultWithTimeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithTimeout:error:");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _[a1 results];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retainer(void *a1, const char *a2, ...)
{
  return _[a1 retainer];
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_rootGroup(void *a1, const char *a2, ...)
{
  return _[a1 rootGroup];
}

id objc_msgSend_runActivityQueuedByScheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runActivityQueuedByScheduler:");
}

id objc_msgSend_runUntilIdleExit(void *a1, const char *a2, ...)
{
  return _[a1 runUntilIdleExit];
}

id objc_msgSend_saveIdentityMap(void *a1, const char *a2, ...)
{
  return _[a1 saveIdentityMap];
}

id objc_msgSend_saveRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecord:");
}

id objc_msgSend_saveRecordZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecordZone:");
}

id objc_msgSend_scanLocation(void *a1, const char *a2, ...)
{
  return _[a1 scanLocation];
}

id objc_msgSend_scanUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUnsignedLongLong:");
}

id objc_msgSend_scanUpToString_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUpToString:intoString:");
}

id objc_msgSend_schedule(void *a1, const char *a2, ...)
{
  return _[a1 schedule];
}

id objc_msgSend_scheduleSyncFromPushWithDsid_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleSyncFromPushWithDsid:completionHandler:");
}

id objc_msgSend_scheduleWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleWithBlock:");
}

id objc_msgSend_schedulingInterval(void *a1, const char *a2, ...)
{
  return _[a1 schedulingInterval];
}

id objc_msgSend_scope(void *a1, const char *a2, ...)
{
  return _[a1 scope];
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_selectedActionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 selectedActionIdentifier];
}

id objc_msgSend_sendClientShareRepairRequest_containerID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendClientShareRepairRequest:containerID:completion:");
}

id objc_msgSend_sendCloudDataRepairRequestToHomeUser_inContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudDataRepairRequestToHomeUser:inContainer:");
}

id objc_msgSend_sendCloudShare_inContainer_toOwnerOfHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudShare:inContainer:toOwnerOfHome:");
}

id objc_msgSend_sendProtobuf_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProtobuf:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_serverTimeFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverTimeFromDate:");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceInterface(void *a1, const char *a2, ...)
{
  return _[a1 serviceInterface];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountMediaType:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActivityBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityBlock:");
}

id objc_msgSend_setAdditionalDialogMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalDialogMetrics:");
}

id objc_msgSend_setAllowBattery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowBattery:");
}

id objc_msgSend_setAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltDSID:");
}

id objc_msgSend_setAppProvidedContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppProvidedContext:");
}

id objc_msgSend_setAppProvidedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppProvidedData:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setButtonActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonActions:");
}

id objc_msgSend_setCachedMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedMessages:");
}

id objc_msgSend_setCanMakeAccountActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanMakeAccountActive:");
}

id objc_msgSend_setCanaryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanaryIdentifier:");
}

id objc_msgSend_setCheckDiagnosticsAndUsageSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckDiagnosticsAndUsageSetting:");
}

id objc_msgSend_setClientInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientInfo:");
}

id objc_msgSend_setCloudKitFetchBeginDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitFetchBeginDate:");
}

id objc_msgSend_setCloudKitSaveBeginDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitSaveBeginDate:");
}

id objc_msgSend_setCreateIfMissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateIfMissing:");
}

id objc_msgSend_setCurrentBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentBuildVersion:");
}

id objc_msgSend_setDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDSID:");
}

id objc_msgSend_setDebugReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugReason:");
}

id objc_msgSend_setDefaultValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultValue:forKey:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestination:");
}

id objc_msgSend_setDeviceBiometricsState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceBiometricsState:");
}

id objc_msgSend_setDialogOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDialogOptions:");
}

id objc_msgSend_setEnabledThrottling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledThrottling:");
}

id objc_msgSend_setErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrors:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFetchDatabaseChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchDatabaseChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZoneChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZoneChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZonesCompletionBlock:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setField_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setField:forKey:");
}

id objc_msgSend_setHomeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeIdentifier:");
}

id objc_msgSend_setHomeKitRepairRequestBeginDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitRepairRequestBeginDate:");
}

id objc_msgSend_setHomeManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeManager:");
}

id objc_msgSend_setHomeUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeUserIdentifier:");
}

id objc_msgSend_setIgnoreAccountConversion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreAccountConversion:");
}

id objc_msgSend_setIgnoreThrottling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreThrottling:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsReply:");
}

id objc_msgSend_setLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogKey:");
}

id objc_msgSend_setLogUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogUUID:");
}

id objc_msgSend_setMarkAsParticipantNeedsNewInvitationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkAsParticipantNeedsNewInvitationToken:");
}

id objc_msgSend_setMessageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageData:");
}

id objc_msgSend_setMessageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageID:");
}

id objc_msgSend_setMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetrics:");
}

id objc_msgSend_setMetricsIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetricsIdentifier:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setModifySubscriptionsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifySubscriptionsCompletionBlock:");
}

id objc_msgSend_setMultiUserAuthBeginDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultiUserAuthBeginDate:");
}

id objc_msgSend_setMultiUserGenerateTokenBeginDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultiUserGenerateTokenBeginDate:");
}

id objc_msgSend_setMultiUserToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultiUserToken:");
}

id objc_msgSend_setNotificationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationInfo:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrigin:");
}

id objc_msgSend_setOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverride:");
}

id objc_msgSend_setPasscodeStringPromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeStringPromise:");
}

id objc_msgSend_setPaymentContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaymentContext:");
}

id objc_msgSend_setPerShareCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareCompletionBlock:");
}

id objc_msgSend_setPerShareMetadataBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareMetadataBlock:");
}

id objc_msgSend_setPreregistered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreregistered:");
}

id objc_msgSend_setPreviousBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousBuildVersion:");
}

id objc_msgSend_setPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousServerChangeToken:");
}

id objc_msgSend_setPurpose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurpose:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setReasonDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReasonDescription:");
}

id objc_msgSend_setReasonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReasonType:");
}

id objc_msgSend_setReceiptDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceiptDate:");
}

id objc_msgSend_setRecordWasChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWasChangedBlock:");
}

id objc_msgSend_setRecordWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWithIDWasDeletedBlock:");
}

id objc_msgSend_setRecordZoneEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneEncryption:");
}

id objc_msgSend_setRecordZoneFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneFetchCompletionBlock:");
}

id objc_msgSend_setRecordZoneWithIDChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDChangedBlock:");
}

id objc_msgSend_setRecordZoneWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDWasDeletedBlock:");
}

id objc_msgSend_setRegenerateKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegenerateKeys:");
}

id objc_msgSend_setRepeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeats:");
}

id objc_msgSend_setRequestEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestEncoding:");
}

id objc_msgSend_setRequireNetworkConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequireNetworkConnection:");
}

id objc_msgSend_setRunMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunMode:");
}

id objc_msgSend_setScanLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanLocation:");
}

id objc_msgSend_setScenario_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScenario:");
}

id objc_msgSend_setScheduled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduled:");
}

id objc_msgSend_setSchedulingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchedulingInterval:");
}

id objc_msgSend_setServiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceIdentifier:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setShouldGenerateKeysOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldGenerateKeysOnly:");
}

id objc_msgSend_setShouldRequestConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRequestConfirmation:");
}

id objc_msgSend_setShouldSendContentAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendContentAvailable:");
}

id objc_msgSend_setShouldUseCloudData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseCloudData:");
}

id objc_msgSend_setState_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:forAccount:");
}

id objc_msgSend_setStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyle:");
}

id objc_msgSend_setThrottlingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThrottlingInterval:");
}

id objc_msgSend_setTokenNeedsRegeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenNeedsRegeneration:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUrlKnownToBeTrusted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrlKnownToBeTrusted:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInitiated:");
}

id objc_msgSend_setUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsername:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setting(void *a1, const char *a2, ...)
{
  return _[a1 setting];
}

id objc_msgSend_settingForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settingForKeyPath:");
}

id objc_msgSend_settingForKeyPath_user_home_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settingForKeyPath:user:home:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_share(void *a1, const char *a2, ...)
{
  return _[a1 share];
}

id objc_msgSend_shareForRecordZoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareForRecordZoneIdentifier:");
}

id objc_msgSend_shareInvitation(void *a1, const char *a2, ...)
{
  return _[a1 shareInvitation];
}

id objc_msgSend_shareToken(void *a1, const char *a2, ...)
{
  return _[a1 shareToken];
}

id objc_msgSend_shareURL(void *a1, const char *a2, ...)
{
  return _[a1 shareURL];
}

id objc_msgSend_sharedAccountsConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountsConfig];
}

id objc_msgSend_sharedAccountsCookiesConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountsCookiesConfig];
}

id objc_msgSend_sharedAccountsDaemonConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountsDaemonConfig];
}

id objc_msgSend_sharedAccountsMultiUserConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountsMultiUserConfig];
}

id objc_msgSend_sharedAttestationConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAttestationConfig];
}

id objc_msgSend_sharedBiometricsConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedBiometricsConfig];
}

id objc_msgSend_sharedConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedConfig];
}

id objc_msgSend_sharedConfigOversize(void *a1, const char *a2, ...)
{
  return _[a1 sharedConfigOversize];
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _[a1 sharedController];
}

id objc_msgSend_sharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedDatabase];
}

id objc_msgSend_sharedFraudReportConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedFraudReportConfig];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedPerformQueue(void *a1, const char *a2, ...)
{
  return _[a1 sharedPerformQueue];
}

id objc_msgSend_sharedPurchaseConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedPurchaseConfig];
}

id objc_msgSend_sharedPushNotificationConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedPushNotificationConfig];
}

id objc_msgSend_sharedQueue(void *a1, const char *a2, ...)
{
  return _[a1 sharedQueue];
}

id objc_msgSend_sharedRegulatoryEligibilityConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedRegulatoryEligibilityConfig];
}

id objc_msgSend_sharedService(void *a1, const char *a2, ...)
{
  return _[a1 sharedService];
}

id objc_msgSend_shouldEnablePushTopic(void *a1, const char *a2, ...)
{
  return _[a1 shouldEnablePushTopic];
}

id objc_msgSend_shouldGenerateKeysOnly(void *a1, const char *a2, ...)
{
  return _[a1 shouldGenerateKeysOnly];
}

id objc_msgSend_shouldHandleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleNotification:");
}

id objc_msgSend_shouldIncludeODIAssessment(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeODIAssessment];
}

id objc_msgSend_shouldPerformForAccount_environment_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPerformForAccount:environment:token:");
}

id objc_msgSend_shouldRequestConfirmation(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestConfirmation];
}

id objc_msgSend_shouldUseCloudData(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseCloudData];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_stateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateForAccount:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_storePrimaryCert_intermediateCert_privateKey_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storePrimaryCert:intermediateCert:privateKey:options:error:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subscribeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeWithIdentifier:");
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return _[a1 systemUptime];
}

id objc_msgSend_takeKeepAliveTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeKeepAliveTransaction:");
}

id objc_msgSend_takeKeepAliveTransaction_whilePerformingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeKeepAliveTransaction:whilePerformingBlock:");
}

id objc_msgSend_takeKeepAliveTransaction_withQueue_postActionQueue_whilePerformingBlockOnQueue_postAction_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeKeepAliveTransaction:withQueue:postActionQueue:whilePerformingBlockOnQueue:postAction:");
}

id objc_msgSend_takeKeepAliveTransaction_withQueue_whilePerformingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeKeepAliveTransaction:withQueue:whilePerformingBlock:");
}

id objc_msgSend_takeKeepAliveTransaction_withQueue_whilePerformingSyncBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeKeepAliveTransaction:withQueue:whilePerformingSyncBlock:");
}

id objc_msgSend_taskQueue(void *a1, const char *a2, ...)
{
  return _[a1 taskQueue];
}

id objc_msgSend_tdmToken(void *a1, const char *a2, ...)
{
  return _[a1 tdmToken];
}

id objc_msgSend_teardownMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 teardownMultiUser];
}

id objc_msgSend_thenWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thenWithBlock:");
}

id objc_msgSend_throttlingInterval(void *a1, const char *a2, ...)
{
  return _[a1 throttlingInterval];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tokenNeedsRegeneration(void *a1, const char *a2, ...)
{
  return _[a1 tokenNeedsRegeneration];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_transactionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 transactionIdentifier];
}

id objc_msgSend_transactions(void *a1, const char *a2, ...)
{
  return _[a1 transactions];
}

id objc_msgSend_transactionsAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 transactionsAccessQueue];
}

id objc_msgSend_transactionsCount(void *a1, const char *a2, ...)
{
  return _[a1 transactionsCount];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_update(void *a1, const char *a2, ...)
{
  return _[a1 update];
}

id objc_msgSend_updateCacheForAccountDSID_withCacheTypeIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCacheForAccountDSID:withCacheTypeIDs:");
}

id objc_msgSend_updateCookiesWithCookiePropertiesToAdd_cookiePropertiesToRemove_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCookiesWithCookiePropertiesToAdd:cookiePropertiesToRemove:error:");
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userCloudShareManager(void *a1, const char *a2, ...)
{
  return _[a1 userCloudShareManager];
}

id objc_msgSend_userIdentity(void *a1, const char *a2, ...)
{
  return _[a1 userIdentity];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userListeningHistoryUpdateControlForHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userListeningHistoryUpdateControlForHome:");
}

id objc_msgSend_userSettingsForHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userSettingsForHome:");
}

id objc_msgSend_userWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userWithIdentifier:");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _[a1 username];
}

id objc_msgSend_users(void *a1, const char *a2, ...)
{
  return _[a1 users];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valuePromise(void *a1, const char *a2, ...)
{
  return _[a1 valuePromise];
}

id objc_msgSend_valueWithWeakObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithWeakObject:");
}

id objc_msgSend_waitUntilFinished(void *a1, const char *a2, ...)
{
  return _[a1 waitUntilFinished];
}

id objc_msgSend_weakObjectValue(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectValue];
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 zoneIdentifier];
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _[a1 zoneName];
}