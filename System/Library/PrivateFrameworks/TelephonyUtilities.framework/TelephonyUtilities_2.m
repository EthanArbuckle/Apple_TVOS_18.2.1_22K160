void sub_100226D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_s *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  __int128 v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  char v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  uint8_t *v67;
  uint64_t v68;
  id v69;
  id v70;
  char *v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint8_t *v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  __int128 v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint8_t *v107;
  void *v108;
  uint64_t v109;
  void *v110[2];
  sub_1001B0F10();
  v1 = v0;
  sub_1001AFF14(&qword_100447EA0);
  sub_1001B0E88();
  __chkstk_darwin(v2);
  sub_1001BB4B4();
  v97 = v3;
  sub_1001BB5CC();
  __chkstk_darwin(v4);
  v6 = (char *)&v91 - v5;
  v7 = sub_1001F86B8();
  v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v95 = (uint64_t)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BB5CC();
  __chkstk_darwin(v10);
  sub_10022D1EC();
  v105 = v11;
  sub_1001BB5CC();
  __chkstk_darwin(v12);
  sub_10022D1EC();
  v100 = v13;
  sub_1001BB5CC();
  __chkstk_darwin(v14);
  sub_10022D1EC();
  v101 = v15;
  sub_1001BB5CC();
  __chkstk_darwin(v16);
  sub_10022D1EC();
  v96 = v17;
  sub_1001BB5CC();
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t)&v91 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (uint64_t)&v91 - v23;
  Date.init(timeIntervalSinceNow:)(v22, -32832000.0);
  if (qword_100446930 != -1) {
LABEL_104:
  }
    swift_once(&qword_100446930, sub_100258A18);
  v25 = sub_1001B0E98();
  v26 = sub_1001B0D98(v25, (uint64_t)qword_1004541B0);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v92 = v24;
  v28 = v27(v21, v24, v7);
  v106 = v26;
  v31 = (os_log_s *)Logger.logObject.getter(v28, v29, v30);
  v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)sub_1001B0E78(12LL);
    v108 = (void *)sub_1001B0E78(32LL);
    v110[0] = v108;
    v107 = v33;
    *(_DWORD *)v33 = 136315138;
    v104 = (uint64_t)(v33 + 4);
    sub_1001A9F18( &qword_100449980,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v7, v34);
    v109 = sub_10022D244(v35, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v104, v33 + 12);
    sub_1001AA9C8();
    sub_10022CF58();
    v37 = v107;
    sub_1001B0FD8((void *)&_mh_execute_header, v31, v32, "Links deletion date must be before %s", v107);
    v38 = (uint64_t)v108;
    sub_1001B0F64((uint64_t)v108);
    sub_1001B0E60(v38);
    sub_1001B0E60((uint64_t)v37);
  }

  else
  {
    sub_10022CF58();
  }

  v39 = v92;
  sub_10022D198(v96);
  sub_10022D198(v101);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      v90 = v1;
    }
    else {
      v90 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001EE280();
    v40 = (uint8_t *)_CocoaArrayWrapper.endIndex.getter(v90);
    if (!v40) {
      goto LABEL_109;
    }
  }

  else
  {
    v40 = *(uint8_t **)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1001EE280();
    if (!v40) {
      goto LABEL_109;
    }
  }

  v24 = 0LL;
  v108 = (void *)(v1 & 0xC000000000000001LL);
  v91 = v1 + 32;
  v107 = v40;
  while (1)
  {
    if (v108)
    {
      sub_1001EE280();
      v41 = sub_10022CE88(v24);
      sub_1001B0EB8();
    }

    else
    {
      v41 = (uint64_t)*(id *)(v1 + 8 * v24 + 32);
    }

    v110[0] = (void *)v41;
    v21 = sub_1002276B8(v110, v101);

    if ((v21 & 1) != 0) {
      break;
    }
    v43 = (uint8_t *)(v24 + 1);
    if (__OFADD__(v24, 1LL)) {
      goto LABEL_97;
    }
    ++v24;
    v21 = (uint64_t)v107;
    if (v43 == v107)
    {
      v24 = (uint64_t)v107;
      goto LABEL_16;
    }
  }

  v21 = (uint64_t)v107;
LABEL_16:
  if (v21 >= v24)
  {
    if (v24 == v21) {
      goto LABEL_109;
    }
    v44 = 1LL;
    v93 = v21;
  }

  else
  {
    v44 = -1LL;
    v93 = v24;
    v24 = v21;
  }

  v45 = 0LL;
  v104 = v1 & 0xFFFFFFFFFFFFFF8LL;
  *(void *)&v42 = 138412290LL;
  v102 = v42;
  v46 = v44;
  v103 = v8;
  v94 = v44;
  do
  {
    v47 = __OFADD__(v45, v44);
    v48 = v45 + v44;
    if (v47) {
      goto LABEL_94;
    }
    if (v24 == v21)
    {
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }

    if (__OFADD__(v24, 1LL)) {
      goto LABEL_96;
    }
    v98 = v46;
    v99 = v48;
    v49 = v21;
    if (v24 + 1 != v21)
    {
      v50 = v24 + 5;
      while (1)
      {
        v49 = v50 - 4;
        if (v108)
        {
          sub_1001EE280();
          v24 = sub_10022CE88(v50 - 4);
          sub_1001B0EB8();
        }

        else
        {
          if ((v49 & 0x8000000000000000LL) != 0) {
            goto LABEL_90;
          }
          if (v49 >= *(void *)(v104 + 16)) {
            goto LABEL_91;
          }
          v24 = (uint64_t)*(id *)(v1 + 8 * v50);
        }

        v51 = objc_msgSend((id)v24, "deletionDate", v91);
        if (!v51) {
          break;
        }
        v52 = v51;
        v53 = v105;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

        v41 = *(void *)(v8 + 32);
        sub_10022D0BC((uint64_t)v6, v53);
        sub_10022CE2C();
        if (v54) {
          goto LABEL_36;
        }
        v55 = v100;
        sub_10022D0BC((uint64_t)v100, (uint64_t)v6);
        LOBYTE(v41) = static Date.< infix(_:_:)(v55, v101);
        sub_10022D1D8((uint64_t)v55);

        if ((v41 & 1) != 0) {
          goto LABEL_43;
        }
LABEL_40:
        v63 = v50 - 3;
        if (__OFADD__(v49, 1LL))
        {
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }

        ++v50;
        if (v63 == v21)
        {
          v49 = v21;
LABEL_43:
          v39 = v92;
          goto LABEL_44;
        }
      }

      sub_10022CFB0();
LABEL_36:
      sub_1002011C8((uint64_t)v6, &qword_100447EA0);
      v56 = (id)v24;
      v24 = v106;
      Logger.logObject.getter(v56, v57, v58);
      v59 = sub_1001B105C();
      if (sub_10022CC50(v59))
      {
        v60 = sub_1001B0E78(12LL);
        v61 = (void *)sub_1001B0E78(8LL);
        *(_DWORD *)v60 = v102;
        *(void *)(v60 + 4) = v56;
        *v61 = v56;
        sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)v24,  (os_log_type_t)v41,  "getDeletedPseudonyms: no deleted descriptors for %@",  (uint8_t *)v60);
        sub_1001AFF14(&qword_100447E80);
        sub_1001B0F64((uint64_t)v61);
        v62 = (uint64_t)v61;
        v8 = v103;
        sub_1001B0E60(v62);
        sub_1001B0E60(v60);
      }

      else
      {

        v24 = (uint64_t)v56;
      }

      v21 = (uint64_t)v107;
      goto LABEL_40;
    }

uint64_t sub_1002276B8(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = *a1;
  id v15 = [v14 deletionDate];
  if (v15)
  {
    v16 = v15;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v17(v6, v11, v7);
    sub_1001A9670((uint64_t)v6, 0LL, 1LL, v7);
    if (sub_1001AB0AC((uint64_t)v6, 1LL, v7) != 1)
    {
      v17(v13, v6, v7);
      char v18 = static Date.< infix(_:_:)(v13, a2);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return v18 & 1;
    }
  }

  else
  {
    sub_1001A9670((uint64_t)v6, 1LL, 1LL, v7);
  }

  sub_1002011C8((uint64_t)v6, &qword_100447EA0);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v19, (uint64_t)qword_1004541B0);
  id v20 = v14;
  v23 = (os_log_s *)Logger.logObject.getter(v20, v21, v22);
  os_log_type_t v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v26 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v25 = 138412290;
    id v30 = v20;
    id v27 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 12);
    void *v26 = v20;

    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "getDeletedPseudonyms: no deleted descriptors for %@",  v25,  0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v26, 1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
  }

  char v18 = 0;
  return v18 & 1;
}

BOOL sub_1002279A8()
{
  uint64_t v1 = sub_1001F86B8();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10022D034();
  id v3 = [objc_allocWithZone(NSDate) init];
  id v4 = sub_1001D92AC((uint64_t)v3, "properties");
  id v5 = [v4 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v5);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  sub_1001D924C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  id v7 = [v3 compare:isa];

  return v7 == (id)1;
}

void sub_100227A98(uint64_t a1, uint64_t a2)
{
}

double sub_100227AF4()
{
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  if (_TUIsInternalInstall())
  {
    id v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "tu_defaults");
    NSString v4 = sub_10022D0CC();
    id v5 = [v3 objectForKey:v4];

    if (v5)
    {
      _bridgeAnyObjectToAny(_:)(v12, v5);
      swift_unknownObjectRelease(v5);
      sub_1002011C8((uint64_t)v12, (uint64_t *)&unk_1004474B0);
      id v7 = sub_1001D8F3C(v6, "tu_defaults");
      NSString v8 = sub_10022D0CC();
      [v7 doubleForKey:v8];
      double v10 = v9;

      if (v10 > 0.0) {
        return v10;
      }
    }

    else
    {
      memset(v12, 0, sizeof(v12));
      sub_1002011C8((uint64_t)v12, (uint64_t *)&unk_1004474B0);
    }
  }

  return (double)(unint64_t)[*(id *)(v0 + OBJC_IVAR___CSDConversationLinkManager_serverBag) linkPseudonymExpiry];
}

double sub_100227C48()
{
  return (double)(unint64_t)[*(id *)(v0 + OBJC_IVAR___CSDConversationLinkManager_serverBag) inactiveLinkPseudonymExpiry];
}

unint64_t sub_100227C74()
{
  unint64_t result = (unint64_t)[*(id *)(v0 + OBJC_IVAR___CSDConversationLinkManager_serverBag) inactiveLinkCacheLimit];
  if ((result & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  return result;
}

id sub_100227CA4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationLinkManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationLinkManager()
{
  return objc_opt_self(&OBJC_CLASS___CSDConversationLinkManager);
}

void sub_100227D80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_log_s *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  uint64_t v29 = v26;
  uint64_t v31 = v30;
  v32 = *(void **)(v26 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v33 = sub_1001B4C00(v28, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  a13 = 0LL;
  unsigned int v35 = [v32 addOrUpdateConversationLinkDescriptors:isa error:&a13];

  v36 = a13;
  if (v35)
  {
    uint64_t v37 = qword_100446930;
    v38 = a13;
    if (v37 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v39 = sub_1001B0E98();
    uint64_t v40 = sub_10022CD78(v39, (uint64_t)qword_1004541B0);
    Logger.logObject.getter(v40, v41, v42);
    os_log_type_t v43 = sub_1001B105C();
    if (sub_10022CF8C())
    {
      v44 = (uint8_t *)sub_1001B0E78(12LL);
      v45 = (os_log_s *)sub_1001B0E78(32LL);
      a13 = v45;
      *(_DWORD *)v44 = 136315138;
      uint64_t v46 = sub_1001EE280();
      uint64_t v47 = Array.description.getter(v46, v33);
      unint64_t v49 = v48;
      sub_1001B0EB8();
      a11 = sub_1001D7CF0(v47, v49, (uint64_t *)&a13);
      sub_10022D140((uint64_t)&a11, (uint64_t)&a12);
      sub_10022CCA4(v31);
      sub_1001B0F5C();
      sub_1001B0FD8( (void *)&_mh_execute_header,  v36,  v43,  "ConversationLinkSync: Finished persisting to data source {acquiredLinks: %s}",  v44);
      sub_1001B0F64((uint64_t)v45);
      sub_1001B0E60((uint64_t)v45);
      sub_1001B0E60((uint64_t)v44);
    }

    else
    {

      sub_10022CCA4(v31);
    }

    sub_100276BCC(v31);
    v67 = *(void **)(v29 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v67)
    {
      sub_10022D308();
      Class v68 = Array._bridgeToObjectiveC()().super.isa;
      [v67 linkManager:v29 updatedLinkDescriptorsFromSync:v68];

      swift_unknownObjectRelease(v67);
    }
  }

  else
  {
    v50 = a13;
    uint64_t v51 = _convertNSErrorToError(_:)(v36);

    swift_willThrow(v52);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v53 = sub_1001B0E98();
    v54 = (os_log_s *)sub_1001B0D98(v53, (uint64_t)qword_1004541B0);
    sub_1001EE280();
    sub_10022CFF4();
    sub_1001EE280();
    uint64_t v55 = sub_10022CFF4();
    Logger.logObject.getter(v55, v56, v57);
    os_log_type_t v58 = sub_1001E0A4C();
    if (os_log_type_enabled(v54, v58))
    {
      uint64_t v59 = sub_1001B0E78(22LL);
      v60 = (void *)sub_1001B0E78(8LL);
      v61 = (os_log_s *)sub_1001B0E78(32LL);
      a13 = v61;
      *(_DWORD *)uint64_t v59 = 136315394;
      uint64_t v62 = sub_1001EE280();
      uint64_t v63 = Array.description.getter(v62, v33);
      unint64_t v65 = v64;
      sub_1001B0EB8();
      a11 = sub_1001D7CF0(v63, v65, (uint64_t *)&a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v59 + 4, v59 + 12);
      sub_10022CCA4(v31);
      sub_1001B1200();
      *(_WORD *)(v59 + 12) = 2112;
      sub_10022CFF4();
      uint64_t v66 = _swift_stdlib_bridgeErrorToNSError(v51);
      a11 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v59 + 14, v59 + 22);
      void *v60 = v66;
      sub_10022CCF0();
      sub_10022CCF0();
      sub_1001D9094( (void *)&_mh_execute_header,  v54,  v58,  "ConversationLinkSync: Failed to persist links %s {error: %@)}",  (uint8_t *)v59);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v60);
      sub_1001B0E60((uint64_t)v60);
      sub_1001B0F64((uint64_t)v61);
      sub_1001B0E60((uint64_t)v61);
      sub_1001B0E60(v59);

      sub_10022CCF0();
    }

    else
    {
      sub_10022CCF0();
      sub_10022CCA4(v31);
      sub_10022CCF0();
      sub_10022CCF0();
    }
  }

  sub_1001E9024();
}

uint64_t sub_100228194()
{
  objc_super v2 = v0;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v3 = sub_1001B0E98();
  sub_10022CC30(v3, (uint64_t)qword_1004541B0);
  os_log_type_t v4 = sub_1001B105C();
  if (sub_10022CC50(v4))
  {
    id v5 = (uint8_t *)sub_1001B0E78(2LL);
    *(_WORD *)id v5 = 0;
    sub_10022CC9C( (void *)&_mh_execute_header,  v0,  v1,  "Informed by IDS that pseudonym was removed. Purging link from data source.",  v5);
    sub_1001B0E60((uint64_t)v5);
  }

  id v7 = sub_1001B115C(v6, "URI");
  id v8 = [v7 prefixedURI];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  uint64_t v12 = (void *)sub_1001C7370((uint64_t)&unk_1003E18C0, 40LL);
  _OWORD v12[2] = v9;
  v12[3] = v11;
  v12[4] = v2;
  sub_1001B9234();
  uint64_t v13 = v2;
  uint64_t v14 = sub_10022D2FC();
  sub_100220BDC(v14);
  sub_1001B0F5C();
  return sub_10022CE0C((uint64_t)v12);
}

void sub_1002282C8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a1)
  {
    uint64_t v9 = (void *)swift_allocObject(&unk_1003E18E8, 48LL, 7LL);
    v9[2] = a3;
    v9[3] = a4;
    v9[4] = a5;
    v9[5] = a1;
    id v10 = a1;
    swift_bridgeObjectRetain(a4);
    id v11 = v10;
    id v12 = a5;
    sub_100220DA4();

    swift_release(v9);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v14, (uint64_t)qword_1004541B0);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v15 = swift_errorRetain(a2);
    oslog = (os_log_s *)Logger.logObject.getter(v15, v16, v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(oslog, v18);
    if (os_log_type_enabled(oslog, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v22;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v25 = sub_1001D7CF0(a3, a4, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v20 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v25 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 14, v20 + 22);
      }

      else
      {
        uint64_t v25 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 14, v20 + 22);
        uint64_t v23 = 0LL;
      }

      *uint64_t v21 = v23;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v19,  "Removal of invalid conversation link with pseudonym %s failed, unable to find link with error %@)",  (uint8_t *)v20,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

void sub_100228638(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (NSNotFound.getter(a1) == a1)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v11, (uint64_t)qword_1004541B0);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v12 = swift_errorRetain(a2);
    oslog = (os_log_s *)Logger.logObject.getter(v12, v13, v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(oslog, v15);
    if (os_log_type_enabled(oslog, v16))
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v18 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v19;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v34 = sub_1001D7CF0(a3, a4, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v17 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v34 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14, v17 + 22);
      }

      else
      {
        uint64_t v34 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14, v17 + 22);
        uint64_t v20 = 0LL;
      }

      *uint64_t v18 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v16,  "Removal of invalid conversation link with pseudonym %s failed with error %@",  (uint8_t *)v17,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v18, 1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_arrayDestroy(v19, 1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  else
  {
    uint64_t v21 = *(void **)(a5 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v21)
    {
      uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v23 = swift_allocObject(v22, 40LL, 7LL);
      *(_OWORD *)(v23 + 16) = xmmword_10037B200;
      *(void *)(v23 + 32) = a6;
      uint64_t v35 = v23;
      specialized Array._endMutation()(v23, v24, v25, v26, v27, v28, v29, v30);
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      swift_unknownObjectRetain(v21);
      id v31 = a6;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v35);
      [v21 linkManager:a5 removedLinkDescriptorsFromIDSSignal:isa];

      swift_unknownObjectRelease(v21);
    }
  }

uint64_t sub_100228A58(uint64_t a1, void *a2)
{
  os_log_type_t v4 = v2;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v6 = sub_1001B0E98();
  sub_10022CC30(v6, (uint64_t)qword_1004541B0);
  os_log_type_t v7 = sub_1001B105C();
  if (sub_10022CC50(v7))
  {
    id v8 = (uint8_t *)sub_1001B0E78(2LL);
    *(_WORD *)id v8 = 0;
    sub_10022CC9C( (void *)&_mh_execute_header,  v2,  (os_log_type_t)v3,  "Informed by IDS that pseudonym was updated.  Updating expiration date in database.",  v8);
    sub_1001B0E60((uint64_t)v8);
  }

  uint64_t v10 = *(void *)((char *)v2 + OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask);
  if (v10)
  {
    uint64_t v11 = swift_retain(*(void *)((char *)v4 + OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask));
    dispatch thunk of DispatchWorkItem.cancel()(v11);
    uint64_t v9 = swift_release(v10);
  }

  id v12 = objc_msgSend(sub_1001B115C(v9, "URI"), "prefixedURI");
  sub_10022D294();
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v15 = v14;

  os_log_type_t v16 = (void *)sub_1001C7370((uint64_t)&unk_1003E1848, 48LL);
  v16[2] = v13;
  v16[3] = v15;
  v16[4] = a2;
  v16[5] = v4;
  swift_bridgeObjectRetain(v15);
  id v17 = a2;
  uint64_t v18 = v4;
  sub_100220BDC(v13);
  swift_bridgeObjectRelease(v15);
  return sub_10022CE0C((uint64_t)v16);
}

void sub_100228BBC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, char *a6)
{
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v53 = a6;
    id v16 = a1;
    id v17 = [v16 mutableCopy];
    _bridgeAnyObjectToAny(_:)(aBlock, v17);
    swift_unknownObjectRelease(v17);
    uint64_t v18 = sub_1001B4B94(0LL, (unint64_t *)&unk_100449970, &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr);
    if ((swift_dynamicCast(&v54, aBlock, (char *)&type metadata for Any + 8, v18, 6LL) & 1) != 0)
    {
      uint64_t v19 = (void *)v54;
      id v20 = [a5 properties];
      id v21 = [v20 expirationDate];

      static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      [v19 setExpirationDate:isa];

      sub_10021611C();
      uint64_t v23 = v53;
      uint64_t v24 = *(void **)&v53[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
      *(_OWORD *)(v26 + 16) = xmmword_10037B200;
      *(void *)(v26 + 32) = v19;
      aBlock[0] = v26;
      specialized Array._endMutation()(v26, v27, v28, v29, v30, v31, v32, v33);
      uint64_t v34 = aBlock[0];
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      id v35 = v19;
      v36.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v34);
      uint64_t v37 = (void *)swift_allocObject(&unk_1003E1870, 40LL, 7LL);
      v37[2] = a5;
      v37[3] = v23;
      v37[4] = v16;
      aBlock[4] = (uint64_t)sub_100229654;
      uint64_t v56 = v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1002130EC;
      aBlock[3] = (uint64_t)&unk_1003E1888;
      v38 = _Block_copy(aBlock);
      uint64_t v39 = v56;
      id v40 = v16;
      id v41 = a5;
      id v42 = v23;
      swift_release(v39);
      [v24 addOrUpdateConversationLinkDescriptors:v36.super.isa completion:v38];
      _Block_release(v38);

      goto LABEL_13;
    }
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v43 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v43, (uint64_t)qword_1004541B0);
  swift_bridgeObjectRetain(a4);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a4);
  uint64_t v44 = swift_errorRetain(a2);
  v36.super.Class isa = (Class)Logger.logObject.getter(v44, v45, v46);
  os_log_type_t v47 = static os_log_type_t.default.getter(v36.super.isa);
  if (os_log_type_enabled((os_log_t)v36.super.isa, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    unint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v50;
    *(_DWORD *)uint64_t v48 = 136315394;
    swift_bridgeObjectRetain(a4);
    uint64_t v54 = sub_1001D7CF0(a3, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, aBlock, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v48 + 12) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v54 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, aBlock, v48 + 14, v48 + 22);
    }

    else
    {
      uint64_t v54 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, aBlock, v48 + 14, v48 + 22);
      uint64_t v51 = 0LL;
    }

    *unint64_t v49 = v51;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v36.super.isa,  v47,  "Updating expiration of conversation link with pseudonym %s failed, unable to find link with error %@)",  (uint8_t *)v48,  0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v49, 1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_arrayDestroy(v50, 1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

void sub_1002290C8(char a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v6 = *(void **)(a4 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v6)
    {
      uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
      *(_OWORD *)(v9 + 16) = xmmword_10037B200;
      *(void *)(v9 + 32) = a5;
      uint64_t v34 = v9;
      specialized Array._endMutation()(v9, v10, v11, v12, v13, v14, v15, v16);
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      swift_unknownObjectRetain(v6);
      id v17 = a5;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v34);
      [v6 linkManager:a4 updatedLinkDescriptorsFromIDSSignal:isa];

      swift_unknownObjectRelease(v6);
    }

    sub_100285E64();
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v21, (uint64_t)qword_1004541B0);
    id v22 = a3;
    swift_errorRetain(a2);
    id v23 = v22;
    uint64_t v24 = swift_errorRetain(a2);
    oslog = (os_log_s *)Logger.logObject.getter(v24, v25, v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(oslog, v27);
    if (os_log_type_enabled(oslog, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v29 = 138412546;
      uint64_t v34 = (uint64_t)v23;
      id v31 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v29 + 4, v29 + 12);
      *uint64_t v30 = v23;

      *(_WORD *)(v29 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v34 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v29 + 14, v29 + 22);
      }

      else
      {
        uint64_t v34 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v29 + 14, v29 + 22);
        uint64_t v32 = 0LL;
      }

      v30[1] = v32;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v28,  "Saving expiration date for pseudonym %@ failed with error %@)",  (uint8_t *)v29,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v30, 2LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

void sub_1002294D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    swift_bridgeObjectRetain(v0);
    uint64_t v3 = (uint64_t *)(v2 + 64);
    do
    {
      os_log_type_t v4 = (void *)*(v3 - 4);
      id v5 = (void *)*(v3 - 3);
      uint64_t v6 = (void *)*(v3 - 2);
      uint64_t v7 = *v3;
      v3 += 5;
      id v8 = v4;
      id v9 = v5;
      id v10 = v6;
      swift_retain(v7);
      sub_10021F1E0();
      sub_10022CDC8();

      --v1;
    }

    while (v1);
    sub_10022CCC8(v2);
  }

  else
  {
    sub_1001B0FF8();
  }

id sub_100229570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  id v10 = [v4 initWithDomain:v8 code:a3 userInfo:v9.super.isa];

  return v10;
}

uint64_t sub_10022961C()
{
  return sub_10022BF74((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100229628(void *a1, uint64_t a2)
{
}

uint64_t sub_100229634()
{
  uint64_t v0 = sub_10022CD00();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100229654(char a1, uint64_t a2)
{
}

uint64_t sub_100229660(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100229670(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100229678()
{
  uint64_t v0 = sub_10022CD00();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100229694(void *a1, uint64_t a2)
{
}

uint64_t sub_1002296A0()
{
  return sub_10022BF74((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1002296AC(uint64_t a1, uint64_t a2)
{
}

void sub_1002296B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10022A4A0(v2);
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100229720(v5);
  *a1 = v2;
}

void sub_100229720(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_100229D84(0LL, v3, 1LL, a1);
      }
      return;
    }

LABEL_145:
    __break(1u);
    goto LABEL_146;
  }

  Swift::Int v5 = v4;
  sub_10023BC70(v3 / 2);
  uint64_t v107 = v6;
  uint64_t v108 = v3;
  v109 = v7;
  v105 = a1;
  if (v3 > 0)
  {
    Swift::Int v106 = v5;
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v104 = *a1 + 8;
    v110 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::Int v10 = v8++;
      if (v8 >= v3) {
        goto LABEL_32;
      }
      uint64_t v11 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (void *)(v9 + 16 * v10);
      uint64_t v15 = v14[1];
      if (v12 == *v14 && v13 == v15) {
        break;
      }
      int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 < v3) {
        goto LABEL_13;
      }
LABEL_23:
      Swift::Int v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      if (v18 < v10) {
        goto LABEL_149;
      }
      if (v10 < v18)
      {
        uint64_t v26 = 16 * v18;
        uint64_t v27 = 16 * v10;
        Swift::Int v28 = v18;
        Swift::Int v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9) {
              goto LABEL_153;
            }
            uint64_t v30 = v9 + v26;
            uint64_t v31 = *(void *)(v9 + v27);
            uint64_t v32 = *(void *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(void *)(v30 - 16) = v31;
            *(void *)(v30 - 8) = v32;
          }

          ++v29;
          v26 -= 16LL;
          v27 += 16LL;
        }

        while (v29 < v28);
      }

LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

LABEL_122:
  swift_bridgeObjectRelease(v110);
  if (v3 < -1) {
    goto LABEL_150;
  }
  *(void *)(v107 + 16) = 0LL;
  swift_bridgeObjectRelease(v107);
}

uint64_t sub_100229D84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      unint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        unint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_100229E48(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_10024F1F0(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_10024F1F0(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      int v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    int v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

void sub_100229FEC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1001AFF14(&qword_100449990);
    uint64_t v11 = (char *)sub_1001C7370(v10, 16 * v9 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  sub_1001B0EB8();
  sub_10010B978();
}

void sub_10022A0D0(uint64_t a1)
{
}

uint64_t sub_10022A0E4( uint64_t a1, void (*a2)(uint64_t *__return_ptr, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  (*(void (**)(void *__return_ptr, uint64_t *))(a4 + 24))(v6, &v7);
  a2(&v8, v6);
  swift_bridgeObjectRelease(v6[1]);
  return v8;
}

void sub_10022A144(void *a1)
{
}

void sub_10022A150(void *a1)
{
  id v1 = [a1 invitedMemberHandles];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);
  }

  sub_10010B978();
}

void sub_10022A1E0(uint64_t a1, void *a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setInvitedHandles:isa];
}

void sub_10022A284(uint64_t a1, void *a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  [a2 setInvitedHandles:isa];
}

void sub_10022A320(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    sub_10022D0F0((uint64_t)v2);
    sub_10022D2E8();
  }

  sub_1001D907C();
  sub_10010B978();
}

void sub_10022A364(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setName:v4];
}

void sub_10022A3A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setLinkName:v4];
}

void sub_10022A3EC(void *a1)
{
  id v1 = [a1 conversationMessageBytes];
  if (v1)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    sub_10022D2E8();
  }

  sub_1001D907C();
  sub_10010B978();
}

void sub_10022A438(uint64_t a1, unint64_t a2, void *a3, SEL *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001BB39C(a1, a2);
  objc_msgSend(a3, *a4, isa);
  sub_10022CE1C(isa);
}

void sub_10022A48C()
{
}

void sub_10022A4A0(uint64_t a1)
{
}

void sub_10022A4B4(uint64_t *a1)
{
  void (*v30)(uint64_t *__return_ptr, id *);
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v1 = *a1;
  id v2 = (uint64_t (*)(id *))a1[1];
  uint64_t v39 = v1;
  uint64_t v3 = a1[2];
  uint64_t v30 = (void (*)(uint64_t *__return_ptr, id *))a1[3];
  uint64_t v4 = a1[4];
  if ((unint64_t)v1 >> 62)
  {
LABEL_39:
    if (v1 < 0) {
      uint64_t v28 = v1;
    }
    else {
      uint64_t v28 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10022C2E4(&v39);
    swift_retain(v3);
    swift_retain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v28);
  }

  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10022C2E4(&v39);
    swift_retain(v3);
    swift_retain(v4);
  }

  uint64_t v34 = v4;
  Swift::Int v33 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v6 = 0LL;
    unint64_t v35 = 0LL;
    uint64_t v31 = &_swiftEmptyArrayStorage[4];
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
    while (1)
    {
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v1);
      }

      else
      {
        if ((v6 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }

        if (v6 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_37;
        }
        id v7 = *(id *)(v1 + 8 * v6 + 32);
      }

      uint64_t v8 = v7;
      unint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_38;
      }
      v38 = v7;
      if ((v2(&v38) & 1) != 0)
      {
        v38 = v8;
        v30(&v37, &v38);

        uint64_t v11 = v35;
        uint64_t v10 = v37;
        if (!v35)
        {
          unint64_t v36 = v37;
          size_t v12 = v33;
          unint64_t v13 = v33[3];
          int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
          if (v14 <= 1) {
            uint64_t v15 = 1LL;
          }
          else {
            uint64_t v15 = v14;
          }
          uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          int v17 = (void *)swift_allocObject(v16, 8 * v15 + 32, 7LL);
          uint64_t v18 = (uint64_t)(j__malloc_size(v17) - 32) / 8;
          v17[2] = v15;
          v17[3] = (2 * v18) | 1;
          unint64_t v19 = (unint64_t)(v17 + 4);
          unint64_t v20 = v33[3];
          unint64_t v21 = v20 >> 1;
          if (v33[2])
          {
            if (v17 != v33 || v19 >= (unint64_t)&v33[v21 + 4])
            {
              uint64_t v32 = v18;
              unint64_t v29 = v33[3];
              memmove(v17 + 4, v33 + 4, 8 * v21);
              unint64_t v19 = (unint64_t)(v17 + 4);
              unint64_t v20 = v29;
              uint64_t v18 = v32;
            }

            size_t v12 = v33;
            v33[2] = 0LL;
          }

          uint64_t v31 = (void *)(v19 + 8 * v21);
          uint64_t v11 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - (v20 >> 1);
          swift_release(v12);
          Swift::Int v33 = v17;
          uint64_t v10 = v36;
        }

        BOOL v23 = __OFSUB__(v11, 1LL);
        uint64_t v24 = v11 - 1;
        if (v23)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v35 = v24;
        *v31++ = v10;
        unint64_t v6 = v9;
      }

      else
      {

        ++v6;
      }

      if (v9 == v5) {
        goto LABEL_32;
      }
    }
  }

  unint64_t v35 = 0LL;
LABEL_32:
  sub_10022C30C(&v39);
  swift_release(v34);
  swift_release(v3);
  unint64_t v25 = v33[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    BOOL v23 = __OFSUB__(v26, v35);
    unint64_t v27 = v26 - v35;
    if (v23)
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
    }

    else
    {
      v33[2] = v27;
    }
  }

uint64_t sub_10022A760(uint64_t a1, uint64_t (*a2)(id *), uint64_t a3)
{
  if ((unint64_t)a1 >> 62)
  {
LABEL_39:
    if (a1 < 0) {
      uint64_t v31 = a1;
    }
    else {
      uint64_t v31 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    swift_retain(a3);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v31);
  }

  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    swift_retain(a3);
  }

  unint64_t v37 = (char *)_swiftEmptyArrayStorage;
  if (v6)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v34 = (char *)&_swiftEmptyArrayStorage[4];
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
      }

      else
      {
        if ((v7 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }

        if (v7 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_37;
        }
        id v9 = *(id *)(a1 + 8 * v7 + 32);
      }

      uint64_t v10 = v9;
      unint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_38;
      }
      id v38 = v9;
      uint64_t result = a2(&v38);
      if ((result & 1) != 0)
      {
        if (!v8)
        {
          unint64_t v13 = v37;
          unint64_t v14 = *((void *)v37 + 3);
          int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1) {
            uint64_t v16 = 1LL;
          }
          else {
            uint64_t v16 = v15;
          }
          uint64_t v35 = v16;
          uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          uint64_t v18 = (char *)swift_allocObject(v17, 8 * v16 + 32, 7LL);
          size_t v19 = j__malloc_size(v18);
          unint64_t v20 = v18;
          uint64_t v21 = (uint64_t)(v19 - 32) / 8;
          *((void *)v18 + 2) = v35;
          *((void *)v18 + 3) = (2 * v21) | 1;
          uint64_t v22 = v18 + 32;
          unint64_t v23 = *((void *)v37 + 3);
          unint64_t v24 = v23 >> 1;
          Swift::Int v33 = v20;
          if (*((void *)v37 + 2))
          {
            if (v20 != v37 || v22 >= &v37[8 * v24 + 32])
            {
              unint64_t v26 = v22;
              uint64_t v32 = (uint64_t)(v19 - 32) / 8;
              unint64_t v36 = *((void *)v37 + 3);
              memmove(v22, v37 + 32, 8 * v24);
              uint64_t v22 = v26;
              unint64_t v23 = v36;
              uint64_t v21 = v32;
            }

            unint64_t v13 = v37;
            *((void *)v37 + 2) = 0LL;
          }

          uint64_t v34 = &v22[8 * v24];
          uint64_t v8 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - (v23 >> 1);
          uint64_t result = swift_release(v13);
          unint64_t v37 = v33;
        }

        BOOL v27 = __OFSUB__(v8--, 1LL);
        if (v27)
        {
          __break(1u);
          goto LABEL_44;
        }

        *(void *)uint64_t v34 = v10;
        v34 += 8;
        unint64_t v7 = v11;
      }

      else
      {

        ++v7;
      }

      if (v11 == v6) {
        goto LABEL_32;
      }
    }
  }

  uint64_t v8 = 0LL;
LABEL_32:
  swift_release(a3);
  swift_bridgeObjectRelease(a1);
  uint64_t result = (uint64_t)v37;
  unint64_t v28 = *((void *)v37 + 3);
  if (v28 >= 2)
  {
    unint64_t v29 = v28 >> 1;
    BOOL v27 = __OFSUB__(v29, v8);
    unint64_t v30 = v29 - v8;
    if (v27)
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
    }

    else
    {
      *((void *)v37 + 2) = v30;
    }
  }

  return result;
}

char *sub_10022A9C8(void *a1, void *a2, void *a3)
{
  uint64_t v5 = qword_1004468F8;
  id v6 = a1;
  id v7 = a3;
  if (v5 != -1) {
    swift_once(&qword_1004468F8, sub_100252428);
  }
  uint64_t v8 = sub_10022AAE0((uint64_t)v6, v7, (id)qword_10044A6C8);
  id v9 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationLinkManager());
  id v10 = v6;
  id v11 = v7;
  id v12 = a2;
  swift_retain(v8);
  unint64_t v13 = sub_10022ADD4(v10, v12, v11, (uint64_t)v8, v9);
  unint64_t v14 = *(void **)&v13[OBJC_IVAR___CSDConversationLinkManager_service];
  int64_t v15 = v13;
  id v16 = v14;
  [v16 setDelegate:v15];

  swift_release(v8);
  return v15;
}

void *sub_10022AAE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v37[3] = &type metadata for ConversationLinkDataSourceTUWrapper;
  v37[4] = &off_1003DDFA8;
  v37[0] = a1;
  uint64_t v14 = sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v14);
  v36[0] = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = v15;
  uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001B90A8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(v36, v17, v18, v8, v16);
  uint64_t v19 = (*(uint64_t (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v4);
  uint64_t v20 = static OS_dispatch_queue.main.getter(v19);
  uint64_t v21 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100372450LL,  v13,  v10,  v7,  v20);
  uint64_t v22 = type metadata accessor for ConversationLinkSyncMessageQueue();
  swift_allocObject(v22, 48LL, 7LL);
  unint64_t v23 = sub_1001B6D2C((uint64_t)v21, (uint64_t)sub_1002859FC, 0LL);
  sub_1001BA03C((uint64_t)v37, (uint64_t)v36);
  uint64_t v24 = qword_100446990;
  id v25 = v21;
  if (v24 != -1) {
    swift_once(&qword_100446990, sub_1002A2AB0);
  }
  uint64_t v26 = qword_1004542B8;
  uint64_t v27 = sub_1001BA188((uint64_t)v36, v36[3]);
  __chkstk_darwin(v27);
  unint64_t v29 = (uint64_t *)((char *)&v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v29;
  swift_retain(v26);
  uint64_t v32 = sub_10022B150(v31, v25, v34, (uint64_t)v23, v35, v26);
  sub_1001B0438(v36);
  sub_1001B0438(v37);
  return v32;
}

char *sub_10022ADD4(void *a1, void *a2, void *a3, uint64_t a4, char *a5)
{
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v36 = *(void *)(v10 - 8);
  uint64_t v37 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask] = 0LL;
  uint64_t v19 = (uint64_t (**)())&a5[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  *uint64_t v19 = variable initialization expression of LetMeInRequestorKeyAgreement.localKey;
  v19[1] = 0LL;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_delegate] = 0LL;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_dataSource] = a1;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_service] = a2;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_serverBag] = a3;
  *(void *)&a5[OBJC_IVAR___CSDConversationLinkManager_linkSyncManager] = a4;
  v35[1] = sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v20 = a5;
  id v39 = a1;
  id v38 = a2;
  id v21 = a3;
  uint64_t v22 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v22);
  v42[0] = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v24 = v23;
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001B90A8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v25, v26, v13, v24);
  (*(void (**)(char *, void, uint64_t))(v36 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v37);
  uint64_t v27 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000033LL,  0x8000000100372410LL,  v18,  v15,  v12,  0LL);
  uint64_t v28 = type metadata accessor for LetMeInRecoveryManager();
  uint64_t v29 = swift_allocObject(v28, 88LL, 7LL);
  *(void *)(v29 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)(v29 + 24) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(void *)(v29 + 80) = 0LL;
  *(void *)(v29 + 32) = v27;
  *(void *)(v29 + 40) = v21;
  *(void *)&v20[OBJC_IVAR___CSDConversationLinkManager_lmiRecoveryManager] = v29;
  swift_unknownObjectRetain(v21);

  uint64_t v30 = (objc_class *)type metadata accessor for ConversationLinkManager();
  v43.receiver = v20;
  v43.super_class = v30;
  uint64_t v31 = (char *)objc_msgSendSuper2(&v43, "init");
  uint64_t v32 = *(void *)&v31[OBJC_IVAR___CSDConversationLinkManager_lmiRecoveryManager];
  v42[3] = v30;
  v42[4] = &off_1003E1810;
  v42[0] = v31;
  sub_10022C8A8((uint64_t)v42, (uint64_t)v41);
  swift_beginAccess(v32 + 48, v40, 33LL, 0LL);
  Swift::Int v33 = v31;
  swift_retain(v32);
  sub_10022C8F0((uint64_t)v41, v32 + 48);
  swift_endAccess(v40);
  swift_release(v32);
  *(void *)(a4 + 24) = &off_1003E1828;
  swift_unknownObjectWeakAssign(a4 + 16, v33);
  sub_1002861F8();
  swift_release(a4);

  return v33;
}

void *sub_10022B150(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  v20[3] = &type metadata for ConversationLinkDataSourceTUWrapper;
  v20[4] = &off_1003DDFA8;
  v20[0] = a1;
  uint64_t v11 = type metadata accessor for ConversationLinkSyncManager();
  uint64_t v12 = (void *)swift_allocObject(v11, 136LL, 7LL);
  uint64_t v13 = sub_1001BA188((uint64_t)v20, (uint64_t)&type metadata for ConversationLinkDataSourceTUWrapper);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)&v20[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_10022B248(*v15, a2, a3, a4, a5, a6, v12);
  sub_1001B0438(v20);
  return v17;
}

void *sub_10022B248(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  v33[3] = &type metadata for ConversationLinkDataSourceTUWrapper;
  v33[4] = &off_1003DDFA8;
  v33[0] = a1;
  a7[3] = 0LL;
  swift_unknownObjectWeakInit(a7 + 2, 0LL);
  a7[16] = 0LL;
  sub_1001BA03C((uint64_t)v33, (uint64_t)(a7 + 4));
  a7[15] = a2;
  a7[13] = a4;
  a7[10] = a5;
  uint64_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationLinkSyncIDSInteractor());
  uint64_t v14 = a2;
  swift_retain(a4);
  id v15 = a5;
  uint64_t v16 = a3;
  uint64_t v17 = sub_10022B504(v16, v14, v13);
  a7[9] = v17;
  a7[14] = a6;
  swift_retain(a6);
  unint64_t v18 = (unint64_t)[v15 linkSyncRecoverFailureLimit];
  if ((v18 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v31 = a4;
  uint64_t v32 = a6;
  uint64_t v19 = v16;
  uint64_t v20 = v14;
  uint64_t v14 = &OBJC_CLASS___IDSMessageContext_ptr;
  uint64_t v16 = &selRef_setMockRingtoneSuppressedRemotely_;
  uint64_t result = objc_msgSend( objc_allocWithZone(IDSRateLimiter),  "initWithLimit:timeLimit:",  v18,  (double)(unint64_t)objc_msgSend(v15, "linkSyncRecoverTimeLimit"));
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }

  a7[11] = result;
  unint64_t v22 = (unint64_t)[v15 linkSyncRecoverFailureLimit];
  if ((v22 & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = objc_msgSend( objc_allocWithZone(IDSRateLimiter),  "initWithLimit:timeLimit:",  v22,  (double)(unint64_t)objc_msgSend(v15, "linkSyncRecoverTimeLimit"));
  if (!result)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  a7[12] = result;
  uint64_t v23 = &v17[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate];
  *((void *)v23 + 1) = &off_1003E5958;
  swift_unknownObjectWeakAssign(v23, a7);
  uint64_t v14 = v20;
  uint64_t v16 = v19;
  if (qword_100446930 != -1) {
LABEL_11:
  }
    swift_once(&qword_100446930, sub_100258A18);
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_1001B0D98(v24, (uint64_t)qword_1004541B0);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v25, v26, v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "ConversationLinkSync: ConversationLinkSyncManager init",  v30,  2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  sub_1002889BC();
  sub_10028BF50();

  swift_release(v31);
  swift_release(v32);
  sub_1001B0438(v33);
  return a7;
}

char *sub_10022B504(void *a1, void *a2, char *a3)
{
  uint64_t v6 = &a3[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate];
  *((void *)v6 + 1) = 0LL;
  swift_unknownObjectWeakInit(v6, 0LL);
  *(void *)&a3[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service] = a1;
  *(void *)&a3[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_knownDestinations] = &_swiftEmptySetSingleton;
  v12.receiver = a3;
  v12.super_class = (Class)type metadata accessor for ConversationLinkSyncIDSInteractor();
  swift_unknownObjectRetain(a1);
  id v7 = (char *)objc_msgSendSuper2(&v12, "init");
  uint64_t v8 = *(void *)&v7[OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service];
  uint64_t v9 = v7;
  uint64_t v10 = (void *)swift_unknownObjectRetain(v8);
  objc_msgSend(v10, "addServiceDelegate:queue:", v9, a2, v12.receiver, v12.super_class);
  swift_unknownObjectRelease(v8);

  return v9;
}

uint64_t sub_10022B5EC(uint64_t a1, uint64_t (*a2)(id *), uint64_t a3)
{
  if ((unint64_t)a1 >> 62)
  {
LABEL_13:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v7 = 0LL;
  if (v6)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        swift_bridgeObjectRetain(a1);
        swift_retain(a3);
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
        swift_bridgeObjectRelease(a1);
      }

      else
      {
        uint64_t v9 = *(void **)(a1 + 8 * v7 + 32);
        swift_retain(a3);
        id v8 = v9;
      }

      id v14 = v8;
      char v10 = a2(&v14);

      swift_release(a3);
      if ((v10 & 1) != 0) {
        break;
      }
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1LL))
      {
        __break(1u);
        goto LABEL_13;
      }

      ++v7;
      if (v11 == v6) {
        return v6;
      }
    }
  }

  return v7;
}

uint64_t sub_10022B700(char *a1, char *a2, uint64_t a3, uint64_t (*a4)(char **), uint64_t a5)
{
  id v8 = a2;
  if ((uint64_t)a2 < (uint64_t)a1)
  {
    uint64_t v9 = -1LL;
    char v10 = a1;
    if (a3 < 0) {
      goto LABEL_33;
    }
    goto LABEL_7;
  }

  if (a1 != a2)
  {
    uint64_t v9 = 1LL;
    char v10 = a2;
    id v8 = a1;
    if (a3 < 0) {
      goto LABEL_33;
    }
LABEL_7:
    if ((a3 & 0x4000000000000000LL) == 0)
    {
      uint64_t v21 = a3 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v12 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_9;
    }

    while (1)
    {
LABEL_33:
      uint64_t v21 = a3 & 0xFFFFFFFFFFFFFF8LL;
      if (a3 < 0) {
        uint64_t v18 = a3;
      }
      else {
        uint64_t v18 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a3);
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease(a3);
LABEL_9:
      uint64_t v11 = 0LL;
      uint64_t v19 = v10;
      uint64_t v20 = v9;
      while (1)
      {
        BOOL v13 = __OFADD__(v11, v9);
        v11 += v9;
        if (v13) {
          goto LABEL_30;
        }
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_32;
        }
        unint64_t v14 = v12;
LABEL_25:
        id v8 = (char *)v14;
      }

      char v10 = v8 + 5;
      while (1)
      {
        unint64_t v14 = (unint64_t)(v10 - 4);
        if ((a3 & 0xC000000000000001LL) != 0)
        {
          swift_retain(a5);
          swift_bridgeObjectRetain(a3);
          id v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a3);
          swift_bridgeObjectRelease(a3);
        }

        else
        {
          if ((v14 & 0x8000000000000000LL) != 0) {
            goto LABEL_28;
          }
          if (v14 >= *(void *)(v21 + 16)) {
            goto LABEL_29;
          }
          id v15 = *(void **)(a3 + 8LL * (void)v10);
          swift_retain(a5);
          id v8 = v15;
        }

        unint64_t v22 = v8;
        uint64_t v9 = a4(&v22);

        swift_release(a5);
        if ((v9 & 1) != 0) {
          goto LABEL_24;
        }
        uint64_t v16 = v10 - 3;
        if (__OFADD__(v14, 1LL)) {
          break;
        }
        ++v10;
        if (v16 == (char *)v12)
        {
          unint64_t v14 = v12;
LABEL_24:
          char v10 = v19;
          uint64_t v9 = v20;
          goto LABEL_25;
        }
      }

      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
  }

  return 0LL;
}

void sub_10022B8BC(unint64_t *a1, unint64_t *a2, void *a3)
{
  if (!*a1)
  {
    uint64_t v4 = sub_1001B4B94(255LL, a2, a3);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4), a1);
  }

  sub_1001AA978();
}

unint64_t sub_10022B8F8()
{
  unint64_t result = qword_100449988;
  if (!qword_100449988)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CDBC, &type metadata for ConversationLinkManagerErrorType);
    atomic_store(result, (unint64_t *)&qword_100449988);
  }

  return result;
}

uint64_t sub_10022B934()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1001F86B8() - 8) + 80LL);
  sub_1001C73EC();
  sub_1001C74F4();
  sub_10022CCB8();
  if (*(void *)(v0 + 40)) {
    swift_release(*(void *)(v0 + 48));
  }
  sub_10022CCAC(v0 + ((v1 + 56) & ~v1));
  uint64_t v2 = sub_100207114();
  return sub_100207058(v2, v3, v4);
}

uint64_t sub_10022B99C()
{
  return sub_100225860( *(void **)(v0 + 16),  *(void **)(v0 + 24),  *(void **)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  v0 + v1);
}

uint64_t sub_10022B9C4()
{
  if (*(void *)(v0 + 16)) {
    sub_10022CCF8();
  }
  sub_10022CCB8();
  sub_10022CCE0();
  sub_10022CEEC();
  uint64_t v1 = sub_10022CE78();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10022B9F0(char a1, uint64_t a2, uint64_t a3)
{
}

void sub_10022BA04()
{
}

uint64_t sub_10022BA10()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1001F86B8() - 8) + 80LL);
  sub_1001C73EC();
  if (*(void *)(v0 + 24)) {
    sub_10022CE60();
  }
  sub_10022CCE0();
  sub_10022CCAC(v0 + ((v1 + 48) & ~v1));
  uint64_t v2 = sub_100207114();
  return sub_100207028(v2, v3, v4);
}

void sub_10022BA74()
{
  uint64_t v0 = (void *)sub_1001B1244();
  sub_1002259B4(v0, v1, v2, v3, v4, v5);
}

uint64_t sub_10022BAC0()
{
  return sub_10022C0F8(48LL);
}

void sub_10022BAC8(char a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10022BAD8()
{
  uint64_t v1 = *(void *)(sub_1001F86B8() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1001C73EC();
  sub_10022CCAC(v0 + v3);
  if (*(void *)(v0 + v4)) {
    sub_10022D25C(v0 + v4);
  }
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v5 + 8;

  return sub_100207058(v0, v6, v2 | 7);
}

void sub_10022BB5C()
{
}

void sub_10022BB68()
{
}

uint64_t sub_10022BBCC(uint64_t a1)
{
  return sub_100223870(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10022BBD8()
{
  uint64_t v1 = *(void *)(sub_1001AFF14(&qword_100449998) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10022CF50();
  sub_10022CCAC(v0 + v2);

  uint64_t v4 = sub_100207114();
  return sub_100207028(v4, v5, v6);
}

void sub_10022BC48()
{
  uint64_t v0 = (void *)sub_1001B1244();
  sub_10022398C(v0, v1, v2, v3, v4, v5);
}

uint64_t sub_10022BC90()
{
  uint64_t v1 = *(void *)(sub_1001AFF14(&qword_100449998) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_1001F86B8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v2 | v7 | 7;
  sub_1001D924C(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  uint64_t v10 = sub_10022D2FC();
  return sub_10020F444(v10, v11, v9);
}

uint64_t sub_10022BD20(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1001AFF14(&qword_100449998) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(sub_1001F86B8() - 8) + 80LL);
  return sub_100223E6C(a1, a2, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8));
}

uint64_t sub_10022BD98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10022BDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022BE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022BE64()
{
  return sub_10022BF74((void (*)(void))&_swift_release);
}

uint64_t sub_10022BE70(char a1, uint64_t a2)
{
  return sub_1002235FC( a1,  a2,  *(uint64_t (**)(id, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32));
}

void sub_10022BE7C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10022BE98(uint64_t a1, uint64_t a2)
{
  return sub_10022C708( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_10021F400);
}

uint64_t sub_10022BEA4()
{
  if (*(void *)(v0 + 24)) {
    sub_10022CE60();
  }
  sub_10022CCE0();
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10022BEDC(uint64_t a1, uint64_t a2)
{
  return sub_10022C708( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_10021D27C);
}

uint64_t sub_10022BEE8()
{
  if (*(void *)(v0 + 24)) {
    sub_10022CE60();
  }
  sub_10022CCE0();
  sub_10022CEEC();
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10022BF24(char a1, uint64_t a2)
{
}

uint64_t sub_10022BF54()
{
  return sub_10022C0AC(56LL);
}

uint64_t sub_10022BF5C(uint64_t a1, uint64_t a2)
{
  return sub_10022C400( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_10021BF98);
}

uint64_t sub_10022BF68()
{
  return sub_10022BF74((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10022BF74(void (*a1)(void))
{
  return swift_deallocObject(v1, 48LL, 7LL);
}

void sub_10022BFA4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10022BFB0()
{
  uint64_t v0 = sub_1001E91E4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10022BFCC(char a1, uint64_t a2)
{
}

uint64_t sub_10022BFD4()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1001F86B8() - 8) + 80LL);
  sub_10022CF50();
  if (*(void *)(v0 + 32)) {
    sub_10022D2F4();
  }
  sub_10022CEEC();
  sub_10022CCAC(v0 + ((v1 + 56) & ~v1));
  uint64_t v2 = sub_100207114();
  return sub_100207028(v2, v3, v4);
}

void sub_10022C038()
{
  uint64_t v0 = (void *)sub_1001B1244();
  sub_10021BAC4(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10022C07C()
{
  if (*(void *)(v0 + 16)) {
    sub_10022CCF8();
  }
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10022C09C(uint64_t a1, uint64_t a2)
{
  return sub_10021B8C8(a1, a2, *(uint64_t (**)(BOOL, uint64_t))(v2 + 16));
}

uint64_t sub_10022C0A4()
{
  return sub_10022C0AC(64LL);
}

uint64_t sub_10022C0AC(uint64_t a1)
{
  if (*(void *)(v1 + 32)) {
    sub_10022D2F4();
  }
  sub_10022CEEC();
  return sub_1001C74AC(v1, a1, 7LL);
}

uint64_t sub_10022C0E4(uint64_t a1, uint64_t a2)
{
  return sub_10022C708( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_10021ADE4);
}

uint64_t sub_10022C0F0()
{
  return sub_10022C0F8(56LL);
}

uint64_t sub_10022C0F8(uint64_t a1)
{
  if (*(void *)(v1 + 16)) {
    sub_10022CCF8();
  }
  sub_10022CCB8();
  sub_10022CCE0();
  return sub_1001C74AC(v1, a1, 7LL);
}

uint64_t sub_10022C130(uint64_t a1, uint64_t a2)
{
  return sub_10022C400( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_10021B424);
}

uint64_t sub_10022C13C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10022C15C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10022C164()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  sub_10022D288(v6);
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_10022C1A4(id *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_1001F86B8() - 8) + 80LL);
  return sub_10021A63C(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10022C1DC(id *a1)
{
  return sub_10021A87C(a1, *(void *)(v1 + 16));
}

uint64_t sub_10022C1E4@<X0>( uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a1;
  __int128 v7 = *(_OWORD *)(a4 + 16);
  v9[0] = *(_OWORD *)a4;
  v9[1] = v7;
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t result = sub_10022A0E4(v6, a2, a3, (uint64_t)v9);
  *a5 = result;
  return result;
}

uint64_t sub_10022C228()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10022C260@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10022C1E4( a1,  *(void (**)(uint64_t *__return_ptr, void *))(v2 + 16),  *(void *)(v2 + 24),  v2 + 32,  a2);
}

#error "10022C288: call analysis failed (funcsize=8)"
uint64_t sub_10022C298()
{
  uint64_t v0;
  sub_1001C73EC();
  sub_10022CF50();
  sub_10022D2F4();
  return swift_deallocObject(v0, 48LL, 7LL);
}

#error "10022C2D8: call analysis failed (funcsize=8)"
void *sub_10022C2E4(void *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

void *sub_10022C30C(void *a1)
{
  return a1;
}

uint64_t sub_10022C334()
{
  uint64_t v0 = sub_1001E91E4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10022C34C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10022C354()
{
  uint64_t v0 = sub_10022CD00();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10022C370(int64_t a1, uint64_t a2)
{
}

void sub_10022C384(int64_t a1, uint64_t a2)
{
}

void sub_10022C38C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1001D907C();
  v4(v3);
  sub_1001AA978();
}

uint64_t sub_10022C3C8()
{
  if (*(void *)(v0 + 24)) {
    sub_10022CE60();
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  uint64_t v1 = sub_10022CE78();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10022C3F4(uint64_t a1, uint64_t a2)
{
  return sub_10022C400( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_100216868);
}

uint64_t sub_10022C400( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_10022C414()
{
  if (*(void *)(v0 + 16)) {
    sub_10022CCF8();
  }
  sub_10022CCB8();
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  uint64_t v1 = sub_10022CE78();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10022C440(uint64_t a1, uint64_t a2)
{
  return sub_10022C400( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_100216BAC);
}

uint64_t sub_10022C44C(uint64_t a1, uint64_t a2)
{
  return sub_1002164BC(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10022C454()
{
  uint64_t v0 = sub_10022CE78();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10022C474(uint64_t a1, uint64_t a2)
{
  return sub_100215084( a1,  a2,  *(void **)(v2 + 16),  *(void (**)(void, uint64_t))(v2 + 24),  *(void *)(v2 + 32),  *(unsigned __int8 *)(v2 + 40),  *(void *)(v2 + 48));
}

uint64_t sub_10022C488()
{
  uint64_t v0 = sub_10022CD00();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10022C4A4(char a1, uint64_t a2)
{
}

uint64_t sub_10022C4B0()
{
  uint64_t v2 = v1 | 7;
  unint64_t v5 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10022D288(v9);
  sub_10022D25C(v0 + v5);

  swift_bridgeObjectRelease(*(void *)(v0 + v8));
  return sub_100207028(v0, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v2);
}

void sub_10022C53C()
{
  uint64_t v10 = *(void *)(v0
                  + (((((((v1 & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v2 = sub_1001B1244();
  sub_1002143E0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10022C5C4(uint64_t a1, uint64_t a2)
{
  return sub_100213D54(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10022C5CC()
{
  uint64_t v1 = sub_10022CD00();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10022C5F0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  unint64_t v4 = (void *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc(dword_1004499E4);
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_10022C65C;
  return ((uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1004499E0 + dword_1004499E0))( v2,  v3,  v4);
}

uint64_t sub_10022C65C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10022C6A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10022C6C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
}

uint64_t sub_10022C6D4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10022C708( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

void sub_10022C71C(uint64_t a1, uint64_t a2)
{
}

void sub_10022C734(char a1, uint64_t a2, void *a3)
{
}

void sub_10022C73C(char a1, uint64_t a2)
{
}

void sub_10022C744(objc_class *a1, uint64_t a2)
{
}

uint64_t sub_10022C750()
{
  uint64_t v1 = *(void *)(sub_1001B1234() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v3 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10022D0C4();
  sub_10022D04C();
  sub_10022CCF8();
  sub_10022CCB8();
  sub_10022CCE0();
  sub_10022CCAC(v0 + v2);
  sub_1001BB39C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v5));
  uint64_t v6 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  sub_100201554(v6);
  uint64_t v7 = sub_100207114();
  return sub_10020F444(v7, v8, v9);
}

#error "10022C894: call analysis failed (funcsize=38)"
void sub_10022C8A0(objc_class *a1, uint64_t a2)
{
  uint64_t v2;
  sub_100213FEC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10022C8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100449A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022C8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100449A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ConversationLinkManagerErrorType()
{
  return &type metadata for ConversationLinkManagerErrorType;
}

unint64_t sub_10022C950()
{
  unint64_t result = qword_100449A10;
  if (!qword_100449A10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CCA4, &type metadata for ConversationLinkManagerErrorType);
    atomic_store(result, (unint64_t *)&qword_100449A10);
  }

  return result;
}

unint64_t sub_10022C990()
{
  unint64_t result = qword_100449A18;
  if (!qword_100449A18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CD54, &type metadata for ConversationLinkManagerErrorType);
    atomic_store(result, (unint64_t *)&qword_100449A18);
  }

  return result;
}

unint64_t sub_10022C9D0()
{
  unint64_t result = qword_100449A20;
  if (!qword_100449A20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CD1C, &type metadata for ConversationLinkManagerErrorType);
    atomic_store(result, (unint64_t *)&qword_100449A20);
  }

  return result;
}

unint64_t sub_10022CA10()
{
  unint64_t result = qword_100449A28;
  if (!qword_100449A28)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100449A28);
  }

  return result;
}

unint64_t sub_10022CA50()
{
  unint64_t result = qword_100449A30;
  if (!qword_100449A30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CD94, &type metadata for ConversationLinkManagerErrorType);
    atomic_store(result, (unint64_t *)&qword_100449A30);
  }

  return result;
}

unint64_t sub_10022CA8C()
{
  unint64_t result = qword_100449A38;
  if (!qword_100449A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CCD4, &type metadata for ConversationLinkManagerErrorType);
    atomic_store(result, (unint64_t *)&qword_100449A38);
  }

  return result;
}

  ;
}

uint64_t sub_10022CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001B0D98(a1, a2);
  return Logger.logObject.getter(v2, v3, v4);
}

void *sub_10022CC44@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

BOOL sub_10022CC50(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

id sub_10022CC60(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 0, 0, v3);
}

void sub_10022CC70(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

void sub_10022CC9C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10022CCA4(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_10022CCAC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1, v1);
}

void sub_10022CCB8()
{
}

BOOL sub_10022CCC0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10022CCC8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_10022CCE0()
{
}

uint64_t sub_10022CCE8()
{
  return swift_release(v0);
}

uint64_t sub_10022CCF0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10022CCF8()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_10022CD00()
{
  return v0;
}

void sub_10022CD10()
{
}

BOOL sub_10022CD18(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

id sub_10022CD28()
{
  return sub_10023D8E4(v0);
}

  ;
}

  ;
}

uint64_t sub_10022CD70()
{
  return swift_retain(v0);
}

uint64_t sub_10022CD78(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain_n(v2, 2LL);
}

id sub_10022CD94(float a1)
{
  *uint64_t v2 = a1;
  return v1;
}

  ;
}

uint64_t sub_10022CDB8()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_10022CDC8()
{
  return swift_release(v0);
}

uint64_t sub_10022CDD0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v3, v5, v4);
}

uint64_t sub_10022CDEC()
{
  return v1(0LL, v0);
}

uint64_t sub_10022CDFC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10022CE0C(uint64_t a1)
{
  return swift_release(a1);
}

void sub_10022CE1C(id a1)
{
}

uint64_t sub_10022CE2C()
{
  return sub_1001AB0AC(v1, 1LL, v0);
}

uint64_t sub_10022CE60()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t sub_10022CE68(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_10022CE70()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10022CE78()
{
  return v0;
}

uint64_t sub_10022CE88(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

  ;
}

  ;
}

void sub_10022CEC8(uint64_t a1)
{
}

  ;
}

void sub_10022CEEC()
{
}

uint64_t sub_10022CEF4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 128) + 8LL))(v0, *(void *)(v1 - 144));
}

uint64_t sub_10022CF08()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_10022CF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 88, v5 + 8, v4, a4);
}

uint64_t sub_10022CF28(uint64_t a1, uint64_t a2)
{
  return sub_1001B0D98(a1, a2);
}

  ;
}

uint64_t sub_10022CF50()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_10022CF58()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v3 - 184) = v4;
  return v4(v1, v0);
}

uint64_t sub_10022CF6C()
{
  return swift_bridgeObjectRetain(v0);
}

id sub_10022CF80()
{
  return v0;
}

BOOL sub_10022CF8C()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_10022CF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v4, v5, a4);
}

id sub_10022CFA4(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 0, 0);
}

uint64_t sub_10022CFB0()
{
  return sub_1001A9670(v1, 1LL, 1LL, v0);
}

uint64_t sub_10022CFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 104, v5, v4, a4);
}

void sub_10022CFD4()
{
}

uint64_t sub_10022CFDC(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

os_log_s *sub_10022CFE4()
{
  return sub_1002137FC(v0);
}

uint64_t sub_10022CFF4()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10022CFFC()
{
  return swift_errorRelease(v0);
}

void sub_10022D004()
{
}

uint64_t sub_10022D014()
{
  return swift_errorRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10022D058( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a1;
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

  ;
}

id sub_10022D078(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_10022D080(float a1)
{
  *uint64_t v1 = a1;
}

id sub_10022D090(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1);
}

uint64_t sub_10022D098()
{
  return Logger.logObject.getter();
}

id sub_10022D0A0()
{
  return v0;
}

  ;
}

uint64_t sub_10022D0BC(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_10022D0C4()
{
  return type metadata accessor for ConversationLinkKeyAgreement(0LL);
}

NSString sub_10022D0CC()
{
  return String._bridgeToObjectiveC()();
}

_WORD *sub_10022D0DC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_10022D0E8()
{
  return Logger.logObject.getter();
}

uint64_t sub_10022D0F0(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

uint64_t sub_10022D110(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return sub_1001D7CF0(v4, v3, (uint64_t *)va);
}

void sub_10022D120()
{
}

uint64_t sub_10022D130()
{
  return swift_release(v0);
}

uint64_t sub_10022D138(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10022D140(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_10022D14C(uint64_t a1)
{
  return sub_1001BB464(a1, v1);
}

uint64_t sub_10022D154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, v11, a3, a4);
}

uint64_t sub_10022D160(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_10022D16C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10022D178()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

id sub_10022D184(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10022D190()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_10022D198(uint64_t a1)
{
  return v2(a1, v3, v1);
}

uint64_t sub_10022D1A4()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, v0);
}

uint64_t sub_10022D1B0()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10022D1B8()
{
  return swift_errorRetain(v0);
}

void sub_10022D1C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = v10;
}

uint64_t sub_10022D1CC(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_10022D1D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 184))(a1, v1);
}

uint64_t sub_10022D1E4(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

  ;
}

uint64_t sub_10022D20C(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_10022D214()
{
  return String.init<A>(reflecting:)(v1 - 88, v0);
}

id sub_10022D220(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_10022D22C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10022D238()
{
  return Logger.logObject.getter();
}

uint64_t sub_10022D244(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 - 96));
}

  ;
}

uint64_t sub_10022D25C@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 + 8));
}

void sub_10022D264()
{
}

uint64_t sub_10022D26C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10022D274()
{
  return Logger.logObject.getter();
}

void sub_10022D280()
{
}

uint64_t sub_10022D288@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

void sub_10022D294()
{
}

  ;
}

void sub_10022D2B0()
{
}

  ;
}

id sub_10022D2D0()
{
  return v0;
}

void sub_10022D2DC()
{
}

void sub_10022D2E8()
{
}

uint64_t sub_10022D2F4()
{
  return swift_release(*(void *)(v0 + 40));
}

uint64_t sub_10022D2FC()
{
  return v0;
}

uint64_t sub_10022D308()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10022D310()
{
  return swift_retain(v0);
}

uint64_t sub_10022D318@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

unint64_t sub_10022D320(unint64_t result)
{
  if (result > 5) {
    return 0LL;
  }
  return result;
}

unint64_t sub_10022D330()
{
  return 0xD000000000000021LL;
}

void sub_10022D34C()
{
}

uint64_t sub_10022D354(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100231590();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

void sub_10022D38C(uint64_t a1)
{
}

unint64_t sub_10022D394@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10022D320(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10022D3C4(uint64_t a1)
{
  unint64_t v2 = sub_100231590();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_10022D3EC(uint64_t a1)
{
  unint64_t v2 = sub_100231590();
  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_10022D414()
{
  return 0xD000000000000021LL;
}

uint64_t sub_10022D430(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100231590();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10022D470(uint64_t a1)
{
  uint64_t result = 0xD000000000000014LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
    case 3LL:
      uint64_t result = 0xD000000000000015LL;
      break;
    case 2LL:
      uint64_t result = 0xD000000000000020LL;
      break;
    case 4LL:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 5LL:
      uint64_t result = 0xD000000000000020LL;
      break;
    default:
      v6[1] = v1;
      void v6[2] = v2;
      v6[0] = a1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for VoucherManagerError,  v6,  &type metadata for VoucherManagerError,  &type metadata for Int);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_10022D540()
{
  return sub_10022D470(*v0);
}

id sub_10022D548(void *a1)
{
  uint64_t v3 = (objc_class *)sub_1001B5DB8();
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___IDSPushHandler);
  id v9 = a1;
  id result = [v8 sharedInstance];
  if (result)
  {
    uint64_t v11 = (uint64_t)result;
    id v12 = [objc_allocWithZone(TUVouchingEnablementImpl) init];
    *uint64_t v7 = 10LL;
    (*(void (**)(void *, void, uint64_t))(v5 + 104))( v7,  enum case for DispatchTimeInterval.seconds(_:),  v4);
    id v13 = sub_100231090((uint64_t)v9, v11, v12, (uint64_t)v7, (char *)objc_allocWithZone(v3));

    uint64_t v14 = sub_1001B5DB8();
    swift_deallocPartialClassInstance( v1,  v14,  *(unsigned int *)((swift_isaMask & *v1) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v1) + 0x34LL));
    return v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10022D6B8( uint64_t a1, unint64_t a2, void *a3, char *a4, void (**a5)(void, void, void))
{
  uint64_t v67 = a1;
  unint64_t v68 = a2;
  uint64_t v66 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v65 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v71 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v70 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v69 - 8);
  uint64_t v13 = __chkstk_darwin(v69);
  uint64_t v15 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v57 - v16;
  uint64_t v18 = swift_allocObject(&unk_1003E2B80, 24LL, 7LL);
  *(void *)(v18 + 16) = a5;
  uint64_t v19 = *(void **)&a4[OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement];
  _Block_copy(a5);
  if ([v19 isEnabled])
  {
    uint64_t v20 = swift_allocObject(&unk_1003E2BA8, 32LL, 7LL);
    uint64_t v60 = v12;
    uint64_t v21 = v20;
    unint64_t v22 = (void *)swift_allocObject(&unk_1003E2BD0, 64LL, 7LL);
    uint64_t v23 = v18;
    uint64_t v24 = v67;
    os_log_type_t v58 = v15;
    uint64_t v59 = v17;
    unint64_t v25 = v68;
    v22[2] = v67;
    v22[3] = v25;
    v22[4] = sub_100230F1C;
    v22[5] = v23;
    uint64_t v26 = a3;
    uint64_t v27 = v23;
    uint64_t v61 = v23;
    uint64_t v62 = v8;
    v22[6] = a4;
    v22[7] = v26;
    *(void *)(v21 + 16) = sub_100230F84;
    *(void *)(v21 + 24) = v22;
    uint64_t v28 = v21;
    uint64_t v63 = v10;
    uint64_t v29 = *(void *)&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 24];
    uint64_t v30 = *(void *)&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 32];
    v57[1] = sub_1001B204C(&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService], v29);
    uint64_t v31 = swift_allocObject(&unk_1003E2BF8, 32LL, 7LL);
    *(void *)(v31 + 16) = a4;
    *(void *)(v31 + 24) = v28;
    unint64_t v64 = a5;
    uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t (*)(uint64_t, unint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v30 + 16);
    Swift::Int v33 = a4;
    sub_1001BB31C(v24, v25);
    swift_retain(v27);
    id v34 = v26;
    uint64_t v35 = v28;
    swift_retain(v28);
    v32(v24, v25, 3LL, sub_100230FD0, v31, v29, v30);
    uint64_t v36 = swift_release(v31);
    unint64_t v68 = *(void *)&v33[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue];
    uint64_t v37 = v58;
    static DispatchTime.now()(v36);
    id v38 = v59;
    + infix(_:_:)(v37, &v33[OBJC_IVAR___CSDVoucherManagerImpl_timeout]);
    id v39 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v40 = v69;
    v39(v37, v69);
    aBlock[4] = sub_100230FD8;
    uint64_t v74 = v35;
    uint64_t v41 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    aBlock[3] = &unk_1003E2C10;
    uint64_t v42 = _Block_copy(aBlock);
    uint64_t v43 = swift_retain(v35);
    char v44 = v70;
    static DispatchQoS.unspecified.getter(v43);
    uint64_t v72 = _swiftEmptyArrayStorage;
    sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v46 = v45;
    uint64_t v47 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    uint64_t v48 = v65;
    uint64_t v49 = v47;
    uint64_t v50 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v49, v51, v66, v46);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v38, v44, v48, v42);
    _Block_release(v42);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v50);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v44, v63);
    v39(v38, v40);
    uint64_t v52 = v74;
    swift_release(v61);
    swift_release(v41);
    swift_release(v52);
    _Block_release(v64);
  }

  else
  {
    unint64_t v53 = sub_100230DD8();
    uint64_t v54 = swift_allocError(&type metadata for VoucherManagerError, v53, 0LL, 0LL);
    *uint64_t v55 = 3LL;
    uint64_t v56 = (void *)_convertErrorToNSError(_:)(v54);
    ((void (**)(void, void, void *))a5)[2](a5, 0LL, v56);

    swift_errorRelease(v54);
    swift_release(v18);
    _Block_release(a5);
  }

uint64_t sub_10022DB50( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(id, uint64_t), uint64_t a7, uint64_t a8, void *a9)
{
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_100446910 != -1) {
      swift_once(&qword_100446910, sub_100258988);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v13, (uint64_t)qword_100454150);
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    uint64_t v14 = sub_1001BB31C(a4, a5);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v14, v15, v16);
    os_log_type_t v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v66 = v21;
      *(_DWORD *)uint64_t v20 = 134218242;
      uint64_t v65 = Data.hashValue.getter(a4, a5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v20 + 4, v20 + 12);
      sub_1001BB39C(a4, a5);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v65 = a3;
      swift_errorRetain(a3);
      uint64_t v22 = sub_1001AFF14(&qword_100447B70);
      uint64_t v23 = String.init<A>(describing:)(&v65, v22);
      unint64_t v25 = v24;
      uint64_t v65 = sub_1001D7CF0(v23, v24, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v19,  "Failed to sign data (%ld) due to error %s.",  (uint8_t *)v20,  0x16u);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      sub_1001BB39C(a4, a5);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    swift_errorRetain(a3);
    a6(0LL, a3);
    swift_errorRelease(a3);
    uint64_t v35 = a3;
    return swift_errorRelease(v35);
  }

  if (a2 >> 60 == 15)
  {
    if (qword_100446910 != -1) {
      swift_once(&qword_100446910, sub_100258988);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v27, (uint64_t)qword_100454150);
    uint64_t v28 = sub_1001BB31C(a4, a5);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v28, v29, v30);
    os_log_type_t v33 = static os_log_type_t.error.getter(v31, v32);
    if (os_log_type_enabled(v31, v33))
    {
      id v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)id v34 = 134217984;
      uint64_t v66 = Data.hashValue.getter(a4, a5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v34 + 4, v34 + 12);
      sub_1001BB39C(a4, a5);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v33,  "Failed to sign data (%ld) because encrypted data was missing from response (without an error).",  v34,  0xCu);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_1001BB39C(a4, a5);
    }

    unint64_t v58 = sub_100230DD8();
    uint64_t v59 = swift_allocError(&type metadata for VoucherManagerError, v58, 0LL, 0LL);
    void *v60 = 2LL;
    a6(0LL, v59);
    uint64_t v35 = v59;
    return swift_errorRelease(v35);
  }

  uint64_t v37 = *(void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler + 24);
  uint64_t v38 = *(void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler + 32);
  sub_1001B204C((void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler), v37);
  id v39 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
  sub_1001BB31C(a1, a2);
  uint64_t v40 = v39(v37, v38);
  unint64_t v42 = v41;
  sub_10022E1E4((uint64_t)a9);
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  sub_1001BB39C(v40, v42);
  objc_allocWithZone(&OBJC_CLASS___TUVoucher);
  sub_1001BB31C(a4, a5);
  sub_1001E07F4(a1, a2);
  id v47 = sub_100230CDC(a9, v44, v46, a4, a5, a1, a2);
  if (qword_100446910 != -1) {
    swift_once(&qword_100446910, sub_100258988);
  }
  uint64_t v48 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v48, (uint64_t)qword_100454150);
  sub_1001BB31C(a4, a5);
  id v49 = v47;
  sub_1001BB31C(a4, a5);
  id v50 = v49;
  unint64_t v53 = (os_log_s *)Logger.logObject.getter(v50, v51, v52);
  os_log_type_t v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v55 = 134218242;
    uint64_t v56 = Data.hashValue.getter(a4, a5);
    sub_1001BB39C(a4, a5);
    uint64_t v66 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v55 + 4, v55 + 12);
    sub_1001BB39C(a4, a5);
    *(_WORD *)(v55 + 12) = 2112;
    uint64_t v66 = (uint64_t)v50;
    id v57 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v55 + 14, v55 + 22);
    *uint64_t v63 = v50;

    _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "Successfully signed data (%ld) into %@.",  (uint8_t *)v55,  0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v63, 1LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {
    sub_1001BB39C(a4, a5);
    sub_1001BB39C(a4, a5);
  }

  id v62 = v50;
  a6(v50, 0LL);

  return sub_1001BB464(a1, a2);
}

void sub_10022E1E4(uint64_t a1)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = (id)TUCopyIDSFromIDForHandle(a1);
  uint64_t v4 = (void *)IDSCopyIDForTokenWithID(isa, v3);

  if (v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10022E268(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(a4 + OBJC_IVAR___CSDVoucherManagerImpl_completionQueue);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003E2C48, 48LL, 7LL);
  v16[2] = a5;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_100231024;
  uint64_t v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  aBlock[3] = &unk_1003E2C60;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain(a5);
  sub_1001E07F4(a1, a2);
  uint64_t v18 = swift_errorRetain(a3);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = v19;
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v25);
  return swift_release(v29);
}

uint64_t sub_10022E484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    swift_retain(v10);
    v9(a2, a3, a4);
    sub_1001B5D3C((uint64_t)v9, v10);
  }

  swift_beginAccess(v8, &v14, 1LL, 0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  return sub_1001B5D3C(v11, v12);
}

uint64_t sub_10022E538(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  id v3 = *(void (**)(void, unint64_t, uint64_t))(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    unint64_t v5 = sub_100230DD8();
    uint64_t v6 = swift_allocError(&type metadata for VoucherManagerError, v5, 0LL, 0LL);
    *uint64_t v7 = 0LL;
    swift_retain(v4);
    v3(0LL, 0xF000000000000000LL, v6);
    sub_1001B5D3C((uint64_t)v3, v4);
    swift_errorRelease(v6);
  }

  swift_beginAccess(v2, &v11, 1LL, 0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return sub_1001B5D3C(v8, v9);
}

void sub_10022E6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_10022E708(void *a1, void *a2, const void *a3)
{
  uint64_t v178 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v8 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v176 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  v175 = (char *)&v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  v177 = (char *)&v167 - v16;
  uint64_t v17 = swift_allocObject(&unk_1003E2A18, 24LL, 7LL);
  *(void *)(v17 + 16) = a3;
  v181 = a2;
  v182 = a3;
  uint64_t v18 = *(void **)((char *)a2 + OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement);
  _Block_copy(a3);
  id v179 = v18;
  if (![v18 isEnabled])
  {
    unint64_t v33 = sub_100230DD8();
    uint64_t v34 = swift_allocError(&type metadata for VoucherManagerError, v33, 0LL, 0LL);
    *uint64_t v35 = 3LL;
    uint64_t v36 = (void *)_convertErrorToNSError(_:)(v34);
    uint64_t v37 = v182;
    (*((void (**)(const void *, void, void *))v182 + 2))(v182, 0LL, v36);

    swift_errorRelease(v34);
    swift_release(v17);
    _Block_release(v37);
    return;
  }

  uint64_t v19 = v17;
  uint64_t v168 = v13;
  v169 = v12;
  if (qword_100446910 != -1) {
    swift_once(&qword_100446910, sub_100258988);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_1001B0D98(v20, (uint64_t)qword_100454150);
  uint64_t v22 = a1;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v22, v23, v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = "ts";
  uint64_t v180 = v19;
  uint64_t v173 = v6;
  v172 = v8;
  uint64_t v171 = v9;
  uint64_t v170 = v10;
  uint64_t v174 = v21;
  if (v27)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v29 = 138412290;
    aBlock = v22;
    uint64_t v31 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v187, v29 + 4, v29 + 12);
    *uint64_t v30 = v22;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requested to verify %@.", v29, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v30, 1LL);
    uint64_t v32 = v30;
    uint64_t v19 = v180;
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v38 = v181;
  id v39 = (void **)((char *)v181 + OBJC_IVAR___CSDVoucherManagerImpl_verificationCache);
  swift_beginAccess((char *)v181 + OBJC_IVAR___CSDVoucherManagerImpl_verificationCache, &aBlock, 32LL, 0LL);
  uint64_t v40 = *v39;
  unint64_t v41 = v22;
  uint64_t v42 = sub_10022F6B0(v41, v40);
  unsigned __int8 v44 = v43;
  LODWORD(v40) = ~v43;

  if ((_DWORD)v40)
  {
    uint64_t v45 = swift_endAccess(&aBlock);
    if ((v44 & 1) == 0)
    {
      uint64_t v48 = v42 & 1;
      id v49 = (os_log_s *)Logger.logObject.getter(v45, v46, v47);
      os_log_type_t v50 = static os_log_type_t.default.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v51 = 67109120;
        LODWORD(aBlock) = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v51 + 4, v51 + 8);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Retrieved previously verified voucher: %{BOOL}d.", v51, 8u);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      uint64_t v52 = v182;
      (*((void (**)(const void *, uint64_t, void))v182 + 2))(v182, v48, 0LL);
      swift_release(v19);
      unint64_t v53 = v52;
      goto LABEL_35;
    }

    uint64_t v68 = swift_allocObject(&unk_1003E2B08, 32LL, 7LL);
    *(void *)(v68 + 16) = sub_10022C73C;
    *(void *)(v68 + 24) = v19;
    uint64_t v69 = v41;
    swift_retain(v19);
    sub_100230EB0(v42, v44);
    swift_retain(v68);
    uint64_t v70 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
    {
      sub_1002B03D4();
      uint64_t v70 = v165;
    }

    unint64_t v71 = *(void *)(v70 + 16);
    if (v71 >= *(void *)(v70 + 24) >> 1)
    {
      sub_1002B03D4();
      uint64_t v70 = v166;
    }

    *(void *)(v70 + 16) = v71 + 1;
    uint64_t v72 = v70 + 16 * v71;
    *(void *)(v72 + 32) = sub_100231600;
    *(void *)(v72 + 40) = v68;
    swift_release(v68);
    swift_beginAccess(v39, &aBlock, 33LL, 0LL);
    uint64_t v73 = *v39;
    uint64_t v74 = (objc_class *)sub_1001AFF14(&qword_100449C38);
    v75 = (char *)objc_allocWithZone(v74);
    uint64_t v76 = &v75[*(void *)((swift_isaMask & *(void *)v75) + 0x68LL)];
    *(void *)uint64_t v76 = v70;
    v76[8] = 1;
    v184.receiver = v75;
    v184.super_class = v74;
    swift_bridgeObjectRetain_n(v70, 2LL);
    id v77 = objc_msgSendSuper2(&v184, "init");
    uint64_t v78 = (objc_class *)sub_1001AFF14(&qword_100449C40);
    unint64_t v79 = (char *)objc_allocWithZone(v78);
    *(void *)&v79[*(void *)((swift_isaMask & *(void *)v79) + 0x68LL)] = v69;
    v183.receiver = v79;
    v183.super_class = v78;
    v80 = v69;
    id v81 = objc_msgSendSuper2(&v183, "init");
    [v73 setObject:v77 forKey:v81];
    swift_endAccess(&aBlock);

    swift_bridgeObjectRelease_n(v70, 2LL);
    sub_100230EC8(v42, v44);
    goto LABEL_28;
  }

  swift_endAccess(&aBlock);
  id v54 = [v41 handle];
  id v55 = (id)TUCopyIDSFromIDForHandle(v54);

  if (!v55) {
    goto LABEL_30;
  }
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  NSString v59 = [v41 tokenPrefixedURI];
  if (!v59)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v61 = v60;
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v61);
  }

  id v62 = (void *)IDSCopyAddressDestinationForDestination(v59);

  if (!v62)
  {
    swift_bridgeObjectRelease(v58);
    uint64_t v28 = "ts";
    goto LABEL_30;
  }

  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  uint64_t v65 = v64;

  if (v56 == v63 && v58 == v65)
  {
    swift_bridgeObjectRelease_n(v58, 2LL);
    uint64_t v19 = v180;
    goto LABEL_37;
  }

  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v63, v65, 0LL);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v65);
  uint64_t v19 = v180;
  uint64_t v28 = "_TtC13callservicesd13CSDAVCMoments" + 32;
  if ((v67 & 1) == 0)
  {
LABEL_30:
    v82 = v41;
    v85 = (os_log_s *)Logger.logObject.getter(v82, v83, v84);
    os_log_type_t v87 = static os_log_type_t.error.getter(v85, v86);
    if (os_log_type_enabled(v85, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      Swift::Int v89 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v88 = *((void *)v28 + 392);
      aBlock = v82;
      v90 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v187, v88 + 4, v88 + 12);
      *Swift::Int v89 = v82;

      uint64_t v19 = v180;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  v87,  "Failed to verify %@ because the token prefixed URI did not come from the handle.",  v88,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v89, 1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    else
    {

      v85 = (os_log_s *)v82;
    }

    unint64_t v91 = sub_100230DD8();
    uint64_t v92 = swift_allocError(&type metadata for VoucherManagerError, v91, 0LL, 0LL);
    uint64_t v94 = v92;
    uint64_t v95 = 4LL;
    goto LABEL_34;
  }

uint64_t sub_10022F6B0(void *a1, void *a2)
{
  uint64_t v4 = (objc_class *)sub_1001AFF14(&qword_100449C40);
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[*(void *)((swift_isaMask & *(void *)v5) + 0x68LL)] = a1;
  v12.receiver = v5;
  v12.super_class = v4;
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v12, "init");
  uint64_t v8 = objc_msgSend(a2, "objectForKey:", v7, v12.receiver, v12.super_class);

  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68LL);
  uint64_t v10 = *(void *)v9;
  sub_100230B58(*(void *)v9, v9[8]);

  return v10;
}

void sub_10022F798(uint64_t a1, unsigned __int8 a2, void *a3)
{
  if (a2 == 0xFF)
  {
    uint64_t v16 = *v3;
    uint64_t v17 = (objc_class *)sub_1001AFF14(&qword_100449C40);
    uint64_t v18 = (char *)objc_allocWithZone(v17);
    *(void *)&v18[*(void *)((swift_isaMask & *(void *)v18) + 0x68LL)] = a3;
    v23.receiver = v18;
    v23.super_class = v17;
    id v19 = a3;
    id v20 = objc_msgSendSuper2(&v23, "init");
    [v16 removeObjectForKey:v20];
  }

  else
  {
    id v7 = *v3;
    uint64_t v8 = (objc_class *)sub_1001AFF14(&qword_100449C38);
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = (char *)v9 + *(void *)((swift_isaMask & *v9) + 0x68LL);
    *(void *)uint64_t v10 = a1;
    v10[8] = a2 & 1;
    sub_100230B58(a1, a2 & 1);
    sub_100230B58(a1, a2 & 1);
    v22.receiver = v9;
    v22.super_class = v8;
    id v11 = objc_msgSendSuper2(&v22, "init");
    objc_super v12 = (objc_class *)sub_1001AFF14(&qword_100449C40);
    uint64_t v13 = (char *)objc_allocWithZone(v12);
    *(void *)&v13[*(void *)((swift_isaMask & *(void *)v13) + 0x68LL)] = a3;
    v21.receiver = v13;
    v21.super_class = v12;
    id v14 = a3;
    id v15 = objc_msgSendSuper2(&v21, "init");
    objc_msgSend(v7, "setObject:forKey:", v11, v15, v21.receiver, v21.super_class);

    sub_100230EC8(a1, a2);
    sub_100230EC8(a1, a2);
  }

id sub_10022F958(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithPrefixedURI:v5];

  return v6;
}

uint64_t sub_10022F9C8(unsigned __int8 a1, uint64_t a2, void *a3, uint64_t a4)
{
  unsigned __int8 v7 = a1;
  if ((a1 & 1) == 0)
  {
    if (qword_100446910 != -1) {
      swift_once(&qword_100446910, sub_100258988);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v17, (uint64_t)qword_100454150);
    id v18 = a3;
    swift_errorRetain(a2);
    id v19 = v18;
    uint64_t v20 = swift_errorRetain(a2);
    objc_super v12 = (os_log_s *)Logger.logObject.getter(v20, v21, v22);
    os_log_type_t v24 = static os_log_type_t.error.getter(v12, v23);
    if (!os_log_type_enabled(v12, v24))
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
      goto LABEL_13;
    }

    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    unsigned __int8 v52 = v7;
    os_log_type_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v54 = (uint64_t)v19;
    uint64_t v55 = v48;
    *(_DWORD *)uint64_t v25 = 138412546;
    uint64_t v51 = a3;
    id v27 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v25 + 4, v25 + 12);
    void *v26 = v19;

    *(_WORD *)(v25 + 12) = 2080;
    uint64_t v54 = a2;
    swift_errorRetain(a2);
    uint64_t v28 = sub_1001AFF14(&qword_100449C48);
    uint64_t v29 = String.init<A>(describing:)(&v54, v28);
    unint64_t v31 = v30;
    uint64_t v54 = sub_1001D7CF0(v29, v30, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v25 + 14, v25 + 22);
    unint64_t v32 = v31;
    a3 = v51;
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v12, v24, "Failed to verify %@ with error %s", (uint8_t *)v25, 0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v26, 1LL);
    unint64_t v33 = v26;
    unsigned __int8 v7 = v52;
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_arrayDestroy(v48, 1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
    uint64_t v16 = v25;
LABEL_10:
    swift_slowDealloc(v16, -1LL, -1LL);
LABEL_13:

    goto LABEL_14;
  }

  if (qword_100446910 != -1) {
    swift_once(&qword_100446910, sub_100258988);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v8, (uint64_t)qword_100454150);
  id v9 = a3;
  objc_super v12 = (os_log_s *)Logger.logObject.getter(v9, v10, v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v49 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v14 = 138412290;
    uint64_t v55 = (uint64_t)v9;
    os_log_type_t v50 = a3;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v14 + 4, v14 + 12);
    *id v49 = v9;

    a3 = v50;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully verified %@.", v14, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v49, 1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v16 = (uint64_t)v14;
    goto LABEL_10;
  }

LABEL_14:
  uint64_t v34 = (void **)(a4 + OBJC_IVAR___CSDVoucherManagerImpl_verificationCache);
  swift_beginAccess(v34, &v55, 32LL, 0LL);
  uint64_t v35 = *v34;
  id v36 = a3;
  uint64_t v37 = sub_10022F6B0(v36, v35);
  unsigned __int8 v39 = v38;
  LODWORD(v35) = ~v38;

  if ((_DWORD)v35 && (v39 & 1) != 0)
  {
    swift_endAccess(&v55);
    uint64_t v40 = *(void *)(v37 + 16);
    if (v40)
    {
      unsigned __int8 v53 = v7;
      char v41 = v7 & 1;
      uint64_t v42 = (uint64_t *)(v37 + 40);
      do
      {
        unsigned __int8 v44 = (void (*)(uint64_t *, uint64_t *))*(v42 - 1);
        uint64_t v43 = *v42;
        LOBYTE(v54) = v41;
        uint64_t v55 = a2;
        swift_retain(v43);
        v44(&v54, &v55);
        swift_release(v43);
        v42 += 2;
        --v40;
      }

      while (v40);
      sub_100230EC8(v37, v39);
      unsigned __int8 v7 = v53;
    }

    else
    {
      sub_100230EC8(v37, v39);
    }
  }

  else
  {
    swift_endAccess(&v55);
  }

  swift_beginAccess(v34, &v55, 33LL, 0LL);
  id v45 = v36;
  if (a2) {
    unsigned __int8 v46 = -1;
  }
  else {
    unsigned __int8 v46 = 0;
  }
  sub_10022F798((a2 == 0) & v7, v46, v45);
  return swift_endAccess(&v55);
}

uint64_t sub_10022FE9C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_1003E2B30, 40LL, 7LL);
  *(void *)(v14 + 16) = a4;
  *(_BYTE *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = a2;
  aBlock[4] = sub_100230F0C;
  uint64_t v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  aBlock[3] = &unk_1003E2B48;
  id v15 = _Block_copy(aBlock);
  swift_retain(a4);
  uint64_t v16 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = v17;
  uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v25);
}

uint64_t sub_1002300A8(uint64_t a1, char a2, uint64_t a3)
{
  id v6 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t v7 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    swift_retain(v8);
    v7(a2 & 1, a3);
    sub_1001B5D3C((uint64_t)v7, v8);
  }

  swift_beginAccess(v6, &v12, 1LL, 0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  void *v6 = 0LL;
  v6[1] = 0LL;
  return sub_1001B5D3C(v9, v10);
}

uint64_t sub_10023014C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  id v3 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    unint64_t v5 = sub_100230DD8();
    uint64_t v6 = swift_allocError(&type metadata for VoucherManagerError, v5, 0LL, 0LL);
    *uint64_t v7 = 0LL;
    swift_retain(v4);
    v3(0LL, v6);
    sub_1001B5D3C((uint64_t)v3, v4);
    swift_errorRelease(v6);
  }

  swift_beginAccess(v2, &v11, 1LL, 0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return sub_1001B5D3C(v8, v9);
}

void sub_100230280()
{
}

void sub_1002302B8()
{
  v1.receiver = v0;
  v1.super_class = (Class)sub_1001B5DB8();
  objc_msgSendSuper2(&v1, "dealloc");
  sub_1000117DC();
}

uint64_t sub_100230374(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1002303A4();

  return v2;
}

uint64_t sub_1002303A4()
{
  return dispatch thunk of Hashable.hashValue.getter( *(void *)((swift_isaMask & *v0) + 0x50LL),  *(void *)((swift_isaMask & *v0) + 0x60LL));
}

uint64_t sub_1002303E0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = swift_isaMask;
  sub_1001B2A2C(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_1001B14E8((uint64_t)v12);
    goto LABEL_5;
  }

  uint64_t v4 = v3 & v2;
  uint64_t v5 = *(void *)((v3 & v2) + 0x50);
  uint64_t v6 = *(void *)(v4 + 96);
  uint64_t v7 = type metadata accessor for CountLimitCache.WrappedKey(0LL, v5, *(void *)(v4 + 88), v6);
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
LABEL_5:
    char v9 = 0;
    return v9 & 1;
  }

  uint64_t v8 = v11;
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)( (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x68),  (char *)v11 + *(void *)((*v11 & swift_isaMask) + 0x68LL),  v5,  *(void *)(v6 + 8));

  return v9 & 1;
}

uint64_t sub_1002304C4(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v5 = a1;
    uint64_t v6 = swift_unknownObjectRetain(a3);
    _bridgeAnyObjectToAny(_:)(v10, v6);
    swift_unknownObjectRelease(a3);
  }

  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }

  char v8 = sub_1002303E0((uint64_t)v10);

  sub_1001B14E8((uint64_t)v10);
  return v8 & 1;
}

void sub_100230538()
{
}

void sub_100230564()
{
}

  ;
}

void sub_100230584()
{
}

uint64_t sub_100230590(char *a1)
{
}

void sub_1002305BC()
{
}

void sub_1002305E8()
{
}

  ;
}

void sub_100230608()
{
}

void sub_100230614(uint64_t (*a1)(void, void, void, void))
{
  uint64_t v2 = (objc_class *)a1( 0LL,  *(void *)((swift_isaMask & *v1) + 0x50LL),  *(void *)((swift_isaMask & *v1) + 0x58LL),  *(void *)((swift_isaMask & *v1) + 0x60LL));
  v3.receiver = v1;
  v3.super_class = v2;
  objc_msgSendSuper2(&v3, "dealloc");
  sub_1000117DC();
}

uint64_t sub_100230664(char *a1)
{
}

uint64_t sub_100230690( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1002306B0(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1002306B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  v17[4] = a7;
  uint64_t v18 = a8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  v17[2] = sub_1002130EC;
  v17[3] = &unk_1003E2CB0;
  id v15 = _Block_copy(v17);
  swift_retain(a8);
  [v8 verifySignedData:isa matchesExpectedData:v14 withTokenURI:a5 forAlgorithm:a6 completion:v15];
  _Block_release(v15);

  return swift_release(v18);
}

uint64_t sub_100230798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1002307B8(a1, a2, a3, a4, a5);
}

uint64_t sub_1002307B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v12[4] = a4;
  uint64_t v13 = a5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  _OWORD v12[2] = sub_100230870;
  v12[3] = &unk_1003E2C88;
  uint64_t v10 = _Block_copy(v12);
  swift_retain(a5);
  [v5 signData:isa withAlgorithm:a3 completion:v10];
  _Block_release(v10);

  return swift_release(v13);
}

uint64_t sub_100230870(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    swift_retain(v5);
    id v7 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v9 = v8;
  }

  else
  {
    swift_retain(v5);
    unint64_t v9 = 0xF000000000000000LL;
  }

  id v10 = a3;
  v6(v4, v9, a3);

  sub_1001BB464((uint64_t)v4, v9);
  return swift_release(v5);
}

uint64_t sub_100230904()
{
  uint64_t result = sub_100231030(v0);
  if (v2 >> 60 == 15) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10023092C()
{
  return sub_100230904();
}

uint64_t sub_10023094C()
{
  return type metadata accessor for VoucherManagerImpl(0LL);
}

uint64_t type metadata accessor for VoucherManagerImpl(uint64_t a1)
{
  uint64_t result = qword_100449A98;
  if (!qword_100449A98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VoucherManagerImpl);
  }
  return result;
}

uint64_t sub_10023098C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_10037CE80;
  v4[3] = &unk_10037CE80;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100230A1C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CountLimitCache.WrappedKey( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountLimitCache.WrappedKey);
}

uint64_t sub_100230A98(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 88));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CountLimitCache.WrappedValue( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountLimitCache.WrappedValue);
}

uint64_t initializeBufferWithCopyOfBuffer for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100230B58(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_100230B58(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t destroy for VoucherManagerImpl.VerificationQuery(uint64_t a1)
{
  return sub_100230B74(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_100230B74(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t assignWithCopy for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100230B58(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100230B74(v5, v6);
  return a1;
}

uint64_t initializeWithTake for VoucherManagerImpl.VerificationQuery(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100230B74(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoucherManagerImpl.VerificationQuery(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoucherManagerImpl.VerificationQuery( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100230CA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100230CAC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for VoucherManagerImpl.VerificationQuery()
{
  return &type metadata for VoucherManagerImpl.VerificationQuery;
}

uint64_t sub_100230CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t type metadata accessor for CountLimitCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountLimitCache);
}

id sub_100230CDC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v16 = Data._bridgeToObjectiveC()().super.isa;
  id v17 = [v7 initWithHandle:a1 tokenPrefixedURI:v14 data:isa encryptedData:v16];
  sub_1001BB39C(a6, a7);
  sub_1001BB39C(a4, a5);

  return v17;
}

uint64_t sub_100230DB4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_100230DD8()
{
  unint64_t result = qword_100449C28;
  if (!qword_100449C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D0FC, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_100449C28);
  }

  return result;
}

uint64_t sub_100230E14(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100230E40()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100230E64(unsigned __int8 a1, uint64_t a2)
{
  return sub_10022F9C8(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100230E70(char a1, uint64_t a2)
{
  return sub_10022FE9C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100230E78()
{
  return sub_10023014C(v0);
}

uint64_t sub_100230E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100230E90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100230E98()
{
  uint64_t v0 = sub_1001E91E4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100230EB0(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100230B58(result, a2 & 1);
  }
  return result;
}

uint64_t sub_100230EC8(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100230B74(result, a2 & 1);
  }
  return result;
}

uint64_t sub_100230EE0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100230F0C()
{
  return sub_1002300A8(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_100230F1C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100230F28()
{
  if (*(void *)(v0 + 16)) {
    sub_10022CCF8();
  }
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100230F48()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100230F84(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_100230FB0()
{
  sub_10022CCF8();
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100230FD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10022E268(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_100230FD8()
{
  return sub_10022E538(v0);
}

uint64_t sub_100230FE0()
{
  unint64_t v1 = v0[4];
  if (v1 >> 60 != 15) {
    sub_1001BB39C(v0[3], v1);
  }
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100231024()
{
  return sub_10022E484(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100231030(void *a1)
{
  id v1 = [a1 pushToken];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_100231090(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char *a5)
{
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  ObjectType = (objc_class *)swift_getObjectType(a5);
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  id v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v14);
  Class v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v48[3] = sub_1001B4B94(0LL, &qword_100449C50, &OBJC_CLASS___IDSService_ptr);
  v48[4] = &off_1003E27E0;
  v48[0] = a1;
  v47[3] = sub_1001B4B94(0LL, &qword_100449C58, &OBJC_CLASS___IDSPushHandler_ptr);
  v47[4] = &off_1003E27F8;
  v47[0] = a2;
  uint64_t v17 = OBJC_IVAR___CSDVoucherManagerImpl_verificationCache;
  id v18 = objc_allocWithZone(&OBJC_CLASS___NSCache);
  uint64_t v19 = a5;
  id v20 = [v18 init];
  [v20 setCountLimit:32];
  *(void *)&a5[v17] = v20;
  if (qword_100446910 != -1) {
    swift_once(&qword_100446910, sub_100258988);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_1001B0D98(v21, (uint64_t)qword_100454150);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v22, v23, v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Initializing VoucherManager.", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v28 = sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v28);
  unsigned __int8 v46 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v30 = v29;
  uint64_t v31 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001B90A8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v31, v32, v11, v30);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v41);
  *(void *)&v19[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000032LL,  0x8000000100372670LL,  v16,  v13,  v10,  0LL);
  sub_1001F8064((uint64_t)v48, (uint64_t)&v19[OBJC_IVAR___CSDVoucherManagerImpl_idsService]);
  sub_1001F8064((uint64_t)v47, (uint64_t)&v19[OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler]);
  unint64_t v33 = v43;
  *(void *)&v19[OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement] = v43;
  uint64_t v34 = &v19[OBJC_IVAR___CSDVoucherManagerImpl_timeout];
  uint64_t v35 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v44, v35);
  swift_unknownObjectRetain(v33);

  v45.receiver = v19;
  v45.super_class = ObjectType;
  id v38 = objc_msgSendSuper2(&v45, "init");

  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v35);
  sub_1001B0438(v47);
  sub_1001B0438(v48);
  return v38;
}

ValueMetadata *type metadata accessor for VoucherManagerError()
{
  return &type metadata for VoucherManagerError;
}

unint64_t sub_100231494()
{
  unint64_t result = qword_100449C60;
  if (!qword_100449C60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037CFE4, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_100449C60);
  }

  return result;
}

unint64_t sub_1002314D4()
{
  unint64_t result = qword_100449C68;
  if (!qword_100449C68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D094, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_100449C68);
  }

  return result;
}

unint64_t sub_100231514()
{
  unint64_t result = qword_100449C70;
  if (!qword_100449C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D05C, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_100449C70);
  }

  return result;
}

unint64_t sub_100231554()
{
  unint64_t result = qword_100449C78;
  if (!qword_100449C78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D0D4, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_100449C78);
  }

  return result;
}

unint64_t sub_100231590()
{
  unint64_t result = qword_100449C80;
  if (!qword_100449C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D014, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_100449C80);
  }

  return result;
}

id FTServerBag.isMomentsDisabled.getter()
{
  id v2 = sub_1001B1440(0xD000000000000010LL, 0x8000000100372700LL, v1);
  if (v2)
  {
    sub_100231800((uint64_t)v2, v3, v4);
    id v2 = (id)swift_unknownObjectRelease(v0);
  }

  sub_1002317F4((uint64_t)v2, v3);
  if (!v11)
  {
    sub_1001B14E8((uint64_t)v10);
    return 0LL;
  }

  unint64_t v5 = sub_1001B1528();
  id v6 = [v9 BOOLValue];

  return v6;
}

double FTServerBag.momentsRequestTimeout.getter()
{
  id v2 = sub_1001B1440(0xD000000000000017LL, 0x8000000100372720LL, v1);
  if (v2)
  {
    sub_100231800((uint64_t)v2, v3, v4);
    id v2 = (id)swift_unknownObjectRelease(v0);
  }

  sub_1002317F4((uint64_t)v2, v3);
  if (!v12)
  {
    sub_1001B14E8((uint64_t)v11);
    return 300.0;
  }

  unint64_t v5 = sub_1001B1528();
  [v10 doubleValue];
  double v7 = v6;

  return v7;
}

uint64_t sub_1002317E0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, a2 + 8, a1, 6LL);
}

uint64_t sub_1002317F4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  return sub_1001B14A0((uint64_t)va, (uint64_t)va1);
}

void *sub_100231800(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return _bridgeAnyObjectToAny(_:)((uint64_t *)va, a1);
}

uint64_t sub_10023180C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100231870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002318D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100231938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10023199C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100231A00(void *a1, void *a2)
{
  uint64_t v4 = v2;
  v247 = a2;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v246 = type metadata accessor for URL(0LL);
  uint64_t v240 = *(void *)(v246 - 8);
  sub_1001C7334();
  __chkstk_darwin(v7);
  sub_1001D9040();
  uint64_t v238 = v8;
  sub_1001AFF14((uint64_t *)&unk_100447DE0);
  sub_1001C7334();
  __chkstk_darwin(v9);
  sub_1001BB4B4();
  uint64_t v245 = v10;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v217 - v13;
  __chkstk_darwin(v12);
  v244 = (char *)&v217 - v15;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001C7334();
  __chkstk_darwin(v16);
  sub_1001BB4B4();
  sub_1002354EC();
  __chkstk_darwin(v17);
  uint64_t v233 = (uint64_t)&v217 - v18;
  uint64_t v232 = type metadata accessor for UUID(0LL);
  uint64_t v227 = *(void *)(v232 - 8);
  sub_1001C7334();
  __chkstk_darwin(v19);
  sub_1001D9040();
  uint64_t v226 = v20;
  sub_1001AFF14(&qword_100447EA0);
  sub_1001C7334();
  __chkstk_darwin(v21);
  sub_1001BB4B4();
  sub_1002354EC();
  __chkstk_darwin(v22);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v23);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v24);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v25);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v26);
  v235 = (char *)&v217 - v27;
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_1001BB4B4();
  sub_1002354EC();
  __chkstk_darwin(v30);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v31);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v32);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v33);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v34);
  sub_10022D1EC();
  sub_1002354EC();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v217 - v36;
  id v38 = (double *)&v4[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeStart];
  double *v38 = 0.0;
  v218 = v38;
  *((_BYTE *)v38 + 8) = 1;
  unsigned __int8 v39 = (double *)&v4[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeEnd];
  *unsigned __int8 v39 = 0.0;
  v220 = v39;
  *((_BYTE *)v39 + 8) = 1;
  *(void *)&v4[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges] = 0LL;
  uint64_t v40 = (uint64_t *)&v4[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_CID];
  *uint64_t v40 = 0LL;
  v40[1] = 0LL;
  v225 = v40;
  v4[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSignedIntoiCloud] = 2;
  uint64_t v41 = v4;
  id v42 = sub_1001B115C((uint64_t)v41, "callUUID");
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  unsigned __int8 v46 = (uint64_t *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_callUUID];
  *unsigned __int8 v46 = v43;
  v46[1] = v45;
  id v48 = sub_1001B115C(v47, "disconnectedReason");
  *(_DWORD *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endReason] = (_DWORD)v48;
  id v49 = sub_1001B115C((uint64_t)v48, "providerErrorCode");
  *(void *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerErrorCode] = v49;
  id v50 = sub_1001B115C((uint64_t)v49, "providerEndedReason");
  *(void *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerEndedReason] = v50;
  id v51 = sub_1001B115C((uint64_t)v50, "isIncoming");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_incoming] = (_BYTE)v51;
  id v52 = sub_1001B115C((uint64_t)v51, "isConnecting");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_connected] = (_BYTE)v52;
  id v53 = sub_1001B115C((uint64_t)v52, "isConferenced");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_currentlyGrouped] = (_BYTE)v53;
  uint64_t v54 = (uint64_t)sub_1001B115C((uint64_t)v53, "isHostedOnCurrentDevice");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relay] = v54 ^ 1;
  id v55 = sub_1001B115C(v54, "isConversation");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isConversation] = (_BYTE)v55;
  id v56 = sub_1001B115C((uint64_t)v55, "joinedFromLink");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_fromLink] = (_BYTE)v56;
  *(_DWORD *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_userScore] = -1;
  id v57 = sub_1001B115C((uint64_t)v56, "liveVoicemailStatus");
  *(void *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_liveVoicemailStatus] = v57;
  id v58 = sub_1001B115C((uint64_t)v57, "originatingUIType");
  *(_DWORD *)&v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_originatingUIType] = (_DWORD)v58;
  id v59 = sub_1001B115C((uint64_t)v58, "startAsOneToOneMode");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtStart] = (_BYTE)v59;
  id v60 = sub_1001B115C((uint64_t)v59, "isOneToOneModeEnabled");
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtEnd] = (_BYTE)v60;
  Date.init()(v60);
  uint64_t v239 = v29;
  uint64_t v61 = *(uint64_t (**)(void))(v29 + 32);
  v223 = &v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_timebase];
  v237 = v37;
  v236 = v61;
  uint64_t v62 = v61();
  uint64_t v252 = 0LL;
  v253 = 0LL;
  id v63 = sub_1001B115C(v62, "callCenter");
  v243 = (objc_class *)ObjectType;
  v229 = v14;
  if (v63)
  {
    uint64_t v64 = v63;
    uint64_t v65 = (dispatch_queue_s *)[v63 queue];
    uint64_t v66 = sub_1001DBDC4((uint64_t)&unk_1003E2DF8);
    *(void *)(v66 + 16) = &v252;
    *(void *)(v66 + 24) = v64;
    uint64_t v67 = sub_1001DBDC4((uint64_t)&unk_1003E2E20);
    *(void *)(v67 + 16) = sub_100235254;
    *(void *)(v67 + 24) = v66;
    uint64_t v242 = v66;
    v249 = sub_1001C7040;
    uint64_t v250 = v67;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100275F14;
    aBlock[3] = &unk_1003E2E38;
    uint64_t v68 = _Block_copy(aBlock);
    uint64_t v69 = v250;
    id v70 = v64;
    swift_retain(v67);
    swift_release(v69);
    dispatch_sync(v65, v68);

    _Block_release(v68);
    LOBYTE(v65) = swift_isEscapingClosureAtFileLocation(v67, "", 104LL, 118LL, 35LL, 1LL);
    swift_release(v67);
    if ((v65 & 1) != 0)
    {
      __break(1u);
      goto LABEL_107;
    }

    v241 = sub_100235254;
    uint64_t v71 = v252;
    id v63 = v253;
  }

  else
  {
    uint64_t v71 = 0LL;
    v241 = 0LL;
    uint64_t v242 = 0LL;
  }

  uint64_t v72 = &v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_audioRoute];
  *uint64_t v72 = v71;
  v72[1] = v63;
  uint64_t v73 = swift_bridgeObjectRetain(v63);
  id v74 = sub_1001B115C(v73, "provider");
  unsigned __int8 v75 = [v74 isTelephonyProvider];

  uint64_t v76 = &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_replace;
  id v77 = &unk_10037B000;
  if ((v75 & 1) == 0)
  {
    sub_10023569C(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_bucketedDuration);
    sub_100235574();
    sub_1002355DC();
    if (!v216)
    {
      if (v93 > -9.22337204e18)
      {
        sub_1002355CC();
        if (!v96) {
          goto LABEL_109;
        }
        uint64_t v97 = &v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs];
        *(void *)uint64_t v97 = (uint64_t)v95;
        v97[8] = 0;
        id v98 = sub_1001B115C(v94, "startAsHandoff");
        v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_startAsHandoff] = (_BYTE)v98;
        id v99 = sub_1001B115C((uint64_t)v98, "endDueToHandoff");
        v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endDueToHandoff] = (_BYTE)v99;
        id v100 = sub_1001B115C((uint64_t)v99, "remoteDoesHandoff");
        v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_remoteDoesHandoff] = (_BYTE)v100;
        id v101 = sub_1001B115C((uint64_t)v100, "dateSentInvitation");
        if (v101)
        {
          id v102 = v101;
          uint64_t v103 = (uint64_t)v237;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

          id v77 = v235;
          ((void (*)(char *, uint64_t, uint64_t))v236)(v235, v103, v28);
          uint64_t v104 = sub_1002354A8();
          v85 = v247;
          if (!v216)
          {
            uint64_t v105 = v224;
            uint64_t v106 = sub_100235580(v224, (uint64_t)v77);
            id v107 = sub_1001B115C(v106, "dateCreated");
            sub_100235588();

            uint64_t v76 = (uint64_t *)v105;
            Date.timeIntervalSince(_:)(v103);
            sub_1002355EC();
            sub_100235600(v103);
            sub_100235600(v105);
            sub_1002355DC();
            if (v216)
            {
LABEL_113:
              __break(1u);
              goto LABEL_114;
            }

            if (v108 <= -9.22337204e18)
            {
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
              goto LABEL_116;
            }

            sub_1002355CC();
            if (!v96) {
              goto LABEL_115;
            }
            char v111 = 0;
            uint64_t v112 = (uint64_t)v110;
LABEL_31:
            id v116 = &v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_setupTimeMs];
            *(void *)id v116 = v112;
            v116[8] = v111;
            uint64_t v117 = &selRef_chat_outputFrequencyLevelChangedTo_;
            if (sub_1001B115C(v109, "dateConnected"))
            {
              sub_100235588();

              sub_100235560((uint64_t)&v254);
              uint64_t v118 = sub_1002354A8();
              if (!v216)
              {
                uint64_t v119 = sub_100235580((uint64_t)v228, (uint64_t)v77);
                if (sub_1001B115C(v119, "dateStartedConnecting"))
                {
                  sub_100235588();

                  sub_100235560((uint64_t)&v251);
                  sub_1002354A8();
                  if (!v216)
                  {
                    uint64_t v120 = v222;
                    sub_100235580(v222, (uint64_t)v77);
                    uint64_t v76 = v228;
                    Date.timeIntervalSince(_:)(v120);
                    sub_1002355EC();
                    sub_100235600(v120);
                    sub_100235600((uint64_t)v76);
                    sub_1002355DC();
                    if (v216)
                    {
LABEL_116:
                      __break(1u);
                      goto LABEL_117;
                    }

                    if (v121 <= -9.22337204e18)
                    {
LABEL_117:
                      __break(1u);
LABEL_118:
                      __break(1u);
                      return;
                    }

                    sub_1002355CC();
                    uint64_t v117 = &selRef_chat_outputFrequencyLevelChangedTo_;
                    if (!v96) {
                      goto LABEL_118;
                    }
                    char v124 = 0;
                    uint64_t v125 = (uint64_t)v123;
LABEL_46:
                    uint64_t v128 = (char *)p_class_meths[423] + (void)v41;
                    *(void *)uint64_t v128 = v125;
                    v128[8] = v124;
                    if (v85)
                    {
                      id v129 = [v85 timebase];
                      sub_100235588();

                      uint64_t v130 = v234;
                      sub_100235580(v234, v103);
                      sub_100235544(v130, 0LL);
                      if (sub_1001AB0AC(v130, 1LL, v28) != 1)
                      {
                        uint64_t v131 = v230;
                        sub_100235580(v230, v130);
                        v132 = v223;
                        swift_beginAccess(v223, aBlock, 33LL, 0LL);
                        (*(void (**)(void *, uint64_t, uint64_t))(v239 + 24))(v132, v131, v28);
                        uint64_t v133 = swift_endAccess(aBlock);
                        if (sub_1001B115C(v133, v117[381]))
                        {
                          sub_100235588();

                          sub_100235560((uint64_t)&v249);
                          uint64_t v134 = sub_1002354A8();
                          if (!v216)
                          {
                            v132 = v219;
                            sub_100235580((uint64_t)v219, v131);
                            double v3 = Date.timeIntervalSince(_:)(v230);
                            sub_10023568C();
                            uint64_t v136 = sub_100235674((uint64_t)v132, v135);
                            uint64_t v137 = v218;
                            double *v218 = v3;
                            *((_BYTE *)v137 + 8) = 0;
                            goto LABEL_57;
                          }
                        }

                        else
                        {
                          uint64_t v134 = sub_1002354FC((uint64_t)&v249);
                        }

                        sub_100235640(v134, &qword_100447EA0);
LABEL_57:
                        uint64_t v139 = v231;
                        if (sub_1001B115C(v136, "dateEnded"))
                        {
                          sub_100235588();

                          sub_100235560((uint64_t)&v250);
                          sub_1002354A8();
                          if (!v216)
                          {
                            uint64_t v140 = v221;
                            sub_100235580(v221, v131);
                            uint64_t v141 = v230;
                            Date.timeIntervalSince(_:)(v230);
                            sub_1002355EC();
                            sub_100235600(v140);
                            sub_100235600(v141);
                            unint64_t v142 = v220;
                            double *v220 = v3;
                            *((_BYTE *)v142 + 8) = 0;
LABEL_62:
                            uint64_t v138 = v233;
                            uint64_t v28 = v232;
                            goto LABEL_63;
                          }
                        }

                        else
                        {
                          sub_1002354FC((uint64_t)&v250);
                        }

                        sub_10023568C();
                        uint64_t v144 = sub_100235674(v230, v143);
                        sub_100235640(v144, &qword_100447EA0);
                        goto LABEL_62;
                      }
                    }

                    else
                    {
                      uint64_t v130 = v234;
                      sub_100235544(v234, 1LL);
                    }

                    sub_1001C6CE4(v130, &qword_100447EA0);
                    if (!v85)
                    {
                      uint64_t v138 = v233;
                      sub_1001A9670(v233, 1LL, 1LL, v232);
                      goto LABEL_67;
                    }

                    uint64_t v138 = v233;
                    uint64_t v28 = v232;
                    uint64_t v139 = v231;
LABEL_63:
                    id v145 = [v85 conversationID];
                    if (v145)
                    {
                      v146 = v145;
                      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v145);

                      uint64_t v147 = 0LL;
                    }

                    else
                    {
                      uint64_t v147 = 1LL;
                    }

                    sub_100235544(v139, v147);
                    sub_1001F7DD4(v139, v138, (uint64_t *)&unk_10044A400);
                    if (sub_1001AB0AC(v138, 1LL, v28) != 1)
                    {
                      uint64_t v148 = v227;
                      uint64_t v149 = v226;
                      uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v227 + 32))(v226, v138, v28);
                      uint64_t v151 = UUID.uuidString.getter(v150);
                      uint64_t v153 = v152;
                      sub_100235674(v149, *(uint64_t (**)(uint64_t, uint64_t))(v148 + 8));
                      v154 = v225;
                      uint64_t v155 = v225[1];
                      uint64_t *v225 = v151;
                      v154[1] = v153;
                      uint64_t v89 = swift_bridgeObjectRelease(v155);
                      goto LABEL_73;
                    }

LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }

LABEL_107:
    __break(1u);
    goto LABEL_108;
  }

  uint64_t v28 = (uint64_t)&OBJC_PROTOCOL___OS_nw_activity.class_meths;
  sub_10023569C(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_setupTimeMs);
  unint64_t v79 = &v41[*(void *)(v78 + 3384)];
  *(void *)unint64_t v79 = 0LL;
  v79[8] = v80;
  id v81 = &v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs];
  *(void *)id v81 = 0LL;
  v81[8] = v80;
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_startAsHandoff] = 0;
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endDueToHandoff] = 0;
  v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_remoteDoesHandoff] = 0;
  sub_100235574();
  double v83 = v82;
  sub_100235574();
  if (v83 <= 10.0)
  {
    sub_1002355DC();
    if (!v216)
    {
      v85 = v247;
      if (v113 > -9.22337204e18)
      {
        sub_1002355CC();
        if (v96)
        {
          v115 = &v41[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_bucketedDuration];
          *(void *)v115 = (uint64_t)v114;
          v115[8] = 0;
          goto LABEL_73;
        }

        goto LABEL_112;
      }

LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }

LABEL_110:
    __break(1u);
    goto LABEL_111;
  }

  if (v84 <= 30.0)
  {
    sub_100235668();
    *(void *)uint64_t v126 = 30LL;
    *(_BYTE *)(v126 + 8) = 0;
    v85 = v247;
  }

  else
  {
    sub_100235574();
    v85 = v247;
    if (v86 <= 60.0)
    {
      sub_100235668();
      uint64_t v92 = 60LL;
    }

    else
    {
      sub_100235574();
      if (v87 <= 300.0)
      {
        sub_100235668();
        uint64_t v92 = 300LL;
      }

      else
      {
        sub_100235574();
        if (v88 <= 1800.0)
        {
          sub_100235668();
          uint64_t v92 = 1800LL;
        }

        else
        {
          sub_100235574();
          sub_100235668();
          if (v91 <= 3600.0) {
            uint64_t v92 = 3600LL;
          }
          else {
            uint64_t v92 = 10000LL;
          }
        }
      }
    }

    *(void *)uint64_t v90 = v92;
    *(_BYTE *)(v90 + 8) = 0;
  }

            sub_1001B4B8C(v129);
            a1 = v365;
            uint64_t v94 = v373;
            double v121 = (unint64_t)v366;
            goto LABEL_111;
          }
        }
      }
    }

void sub_100232D9C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = xmmword_10037D150;
  swift_bridgeObjectRelease(v4);
  id v5 = [a2 routeController];
  id v6 = [v5 pickedRoute];

  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(_OWORD *)a1 = xmmword_10037D160;
    swift_bridgeObjectRelease(v7);
    if ([v6 isBluetooth])
    {
      __int128 v8 = xmmword_10037D170;
LABEL_8:
      __int128 v12 = v8;
LABEL_9:

      __int128 v9 = v12;
LABEL_10:
      uint64_t v10 = *(void *)(a1 + 8);
      *(_OWORD *)a1 = v9;
      swift_bridgeObjectRelease(v10);
      return;
    }

    if ([v6 isSpeaker])
    {
      __int128 v8 = xmmword_10037D180;
      goto LABEL_8;
    }

    if ([v6 isReceiver])
    {
      __int128 v8 = xmmword_10037D190;
      goto LABEL_8;
    }

    __int128 v12 = xmmword_10037D1A0;
    if (([v6 isWiredHeadset] & 1) != 0
      || ([v6 isWiredHeadphones] & 1) != 0)
    {
      goto LABEL_9;
    }

    unsigned __int8 v11 = [v6 isAuxiliary];

    if ((v11 & 1) != 0)
    {
      __int128 v9 = xmmword_10037D1B0;
      goto LABEL_10;
    }
  }

void sub_100232F10()
{
}

uint64_t sub_100232F48(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x444955556C6C6163LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444955556C6C6163LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F697461727564LL && a2 == 0xEA0000000000734DLL)
  {
    unint64_t v8 = 0xEA0000000000734DLL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564LL, 0xEA0000000000734DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x65766974616C6572LL && a2 == 0xED00007472617453LL)
  {
    unint64_t v10 = 0xED00007472617453LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65766974616C6572LL, 0xED00007472617453LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x65766974616C6572LL && a2 == 0xEB00000000646E45LL)
  {
    unint64_t v12 = 0xEB00000000646E45LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65766974616C6572LL, 0xEB00000000646E45LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v13 = 0x80000001003727E0LL;
    if (a2 == 0x80000001003727E0LL) {
      goto LABEL_37;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001003727E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4LL;
  }

  if (a1 == 0x6F73616552646E65LL && a2 == 0xE90000000000006ELL)
  {
    unint64_t v15 = 0xE90000000000006ELL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F73616552646E65LL, 0xE90000000000006ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v16 = 0x8000000100372800LL;
    if (a2 == 0x8000000100372800LL) {
      goto LABEL_50;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100372800LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v16);
    return 6LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v17 = 0x8000000100372820LL;
    if (a2 == 0x8000000100372820LL) {
      goto LABEL_55;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100372820LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v17);
    return 7LL;
  }

  if (a1 == 0x6D69547075746573LL && a2 == 0xEB00000000734D65LL)
  {
    unint64_t v19 = 0xEB00000000734D65LL;
    goto LABEL_63;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D69547075746573LL, 0xEB00000000734D65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_63:
    swift_bridgeObjectRelease(v19);
    return 8LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v20 = 0x8000000100372840LL;
    if (a2 == 0x8000000100372840LL) {
      goto LABEL_68;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100372840LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_68:
    swift_bridgeObjectRelease(v20);
    return 9LL;
  }

  if (a1 == 0x79616C6572LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v22 = 0xE500000000000000LL;
    goto LABEL_76;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C6572LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_76:
    swift_bridgeObjectRelease(v22);
    return 10LL;
  }

  if (a1 == 0x676E696D6F636E69LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v24 = 0xE800000000000000LL;
    goto LABEL_84;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E696D6F636E69LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
LABEL_84:
    swift_bridgeObjectRelease(v24);
    return 11LL;
  }

  if (a1 == 0x657463656E6E6F63LL && a2 == 0xE900000000000064LL)
  {
    unint64_t v26 = 0xE900000000000064LL;
    goto LABEL_92;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657463656E6E6F63LL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
LABEL_92:
    swift_bridgeObjectRelease(v26);
    return 12LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v27 = 0x8000000100372870LL;
    if (a2 == 0x8000000100372870LL) {
      goto LABEL_97;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100372870LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v27 = a2;
LABEL_97:
    swift_bridgeObjectRelease(v27);
    return 13LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x8000000100372890LL)
  {
    unint64_t v28 = 0x8000000100372890LL;
LABEL_103:
    swift_bridgeObjectRelease(v28);
    return 14LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000100372890LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
    goto LABEL_103;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v29 = 0x80000001003728B0LL;
    if (a2 == 0x80000001003728B0LL) {
      goto LABEL_108;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001003728B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
LABEL_108:
    swift_bridgeObjectRelease(v29);
    return 15LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v30 = 0x80000001003728D0LL;
    if (a2 == 0x80000001003728D0LL) {
      goto LABEL_113;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001003728D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
LABEL_113:
    swift_bridgeObjectRelease(v30);
    return 16LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v31 = 0x80000001003728F0LL;
    if (a2 == 0x80000001003728F0LL) {
      goto LABEL_118;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001003728F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v31 = a2;
LABEL_118:
    swift_bridgeObjectRelease(v31);
    return 17LL;
  }

  if (a1 == 0x6D754E6E774F7369LL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v33 = 0xEB00000000726562LL;
    goto LABEL_126;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E6E774F7369LL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v33 = a2;
LABEL_126:
    swift_bridgeObjectRelease(v33);
    return 18LL;
  }

  if (a1 == 0x7265766E6F437369LL && a2 == 0xEE006E6F69746173LL)
  {
    unint64_t v35 = 0xEE006E6F69746173LL;
    goto LABEL_134;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265766E6F437369LL, 0xEE006E6F69746173LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v35 = a2;
LABEL_134:
    swift_bridgeObjectRelease(v35);
    return 19LL;
  }

  if (a1 == 4475203 && a2 == 0xE300000000000000LL)
  {
    unint64_t v37 = 0xE300000000000000LL;
    goto LABEL_142;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(4475203LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v37 = a2;
LABEL_142:
    swift_bridgeObjectRelease(v37);
    return 20LL;
  }

  if (a1 == 0x6B6E694C6D6F7266LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v39 = 0xE800000000000000LL;
    goto LABEL_150;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6E694C6D6F7266LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v39 = a2;
LABEL_150:
    swift_bridgeObjectRelease(v39);
    return 21LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v40 = 0x8000000100372930LL;
    if (a2 == 0x8000000100372930LL) {
      goto LABEL_155;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100372930LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v40 = a2;
LABEL_155:
    swift_bridgeObjectRelease(v40);
    return 22LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v41 = 0x8000000100372950LL;
    if (a2 == 0x8000000100372950LL) {
      goto LABEL_160;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100372950LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v41 = a2;
LABEL_160:
    swift_bridgeObjectRelease(v41);
    return 23LL;
  }

  if (a1 == 0x64656E7275746572LL && a2 == 0xEC0000006C6C6143LL)
  {
    unint64_t v43 = 0xEC0000006C6C6143LL;
    goto LABEL_168;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656E7275746572LL, 0xEC0000006C6C6143LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v43 = a2;
LABEL_168:
    swift_bridgeObjectRelease(v43);
    return 24LL;
  }

  if (a1 == 0x65736162656D6974LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v45 = 0xE800000000000000LL;
    goto LABEL_176;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736162656D6974LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v45 = a2;
LABEL_176:
    swift_bridgeObjectRelease(v45);
    return 25LL;
  }

  if (a1 == 0x4873417472617473LL && a2 == 0xEE0066666F646E61LL)
  {
    unint64_t v47 = 0xEE0066666F646E61LL;
    goto LABEL_184;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4873417472617473LL, 0xEE0066666F646E61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v47 = a2;
LABEL_184:
    swift_bridgeObjectRelease(v47);
    return 26LL;
  }

  if (a1 == 0x6F54657544646E65LL && a2 == 0xEF66666F646E6148LL)
  {
    unint64_t v49 = 0xEF66666F646E6148LL;
    goto LABEL_192;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F54657544646E65LL, 0xEF66666F646E6148LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v49 = a2;
LABEL_192:
    swift_bridgeObjectRelease(v49);
    return 27LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v50 = 0x80000001003729A0LL;
    if (a2 == 0x80000001003729A0LL) {
      goto LABEL_197;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001003729A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v50 = a2;
LABEL_197:
    swift_bridgeObjectRelease(v50);
    return 28LL;
  }

  if (a1 == 0x7553697269537369LL && a2 == 0xEF64657473656767LL)
  {
    unint64_t v52 = 0xEF64657473656767LL;
    goto LABEL_205;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7553697269537369LL, 0xEF64657473656767LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v52 = a2;
LABEL_205:
    swift_bridgeObjectRelease(v52);
    return 29LL;
  }

  if (a1 == 0x436E776F6E4B7369LL && a2 == 0xEE00746361746E6FLL)
  {
    unint64_t v54 = 0xEE00746361746E6FLL;
    goto LABEL_213;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x436E776F6E4B7369LL, 0xEE00746361746E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v54 = a2;
LABEL_213:
    swift_bridgeObjectRelease(v54);
    return 30LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v55 = 0x80000001003729E0LL;
    if (a2 == 0x80000001003729E0LL) {
      goto LABEL_218;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001003729E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v55 = a2;
LABEL_218:
    swift_bridgeObjectRelease(v55);
    return 31LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v56 = 0x8000000100372A00LL;
    if (a2 == 0x8000000100372A00LL) {
      goto LABEL_223;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100372A00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v56 = a2;
LABEL_223:
    swift_bridgeObjectRelease(v56);
    return 32LL;
  }

  if (a1 == 0x666E6F436B6E756ALL && a2 == 0xEE0065636E656469LL)
  {
    unint64_t v58 = 0xEE0065636E656469LL;
    goto LABEL_231;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666E6F436B6E756ALL, 0xEE0065636E656469LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v58 = a2;
LABEL_231:
    swift_bridgeObjectRelease(v58);
    return 33LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x8000000100372A30LL)
  {
    unint64_t v59 = 0x8000000100372A30LL;
LABEL_237:
    swift_bridgeObjectRelease(v59);
    return 34LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000100372A30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v59 = a2;
    goto LABEL_237;
  }

  if (a1 == 0x436E776F6E4B7369LL && a2 == 0xED000072656C6C61LL)
  {
    unint64_t v61 = 0xED000072656C6C61LL;
    goto LABEL_245;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x436E776F6E4B7369LL, 0xED000072656C6C61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v61 = a2;
LABEL_245:
    swift_bridgeObjectRelease(v61);
    return 35LL;
  }

  if (a1 == 0x726F635372657375LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v63 = 0xE900000000000065LL;
    goto LABEL_253;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F635372657375LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v63 = a2;
LABEL_253:
    swift_bridgeObjectRelease(v63);
    return 36LL;
  }

  if (a1 == 0x436465646E617262LL && a2 == 0xEB000000006C6C61LL)
  {
    unint64_t v65 = 0xEB000000006C6C61LL;
    goto LABEL_261;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x436465646E617262LL, 0xEB000000006C6C61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v65 = a2;
LABEL_261:
    swift_bridgeObjectRelease(v65);
    return 37LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v66 = 0x8000000100372A70LL;
    if (a2 == 0x8000000100372A70LL) {
      goto LABEL_266;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100372A70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v66 = a2;
LABEL_266:
    swift_bridgeObjectRelease(v66);
    return 38LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v67 = 0x8000000100372A90LL;
    if (a2 == 0x8000000100372A90LL) {
      goto LABEL_271;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100372A90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v67 = a2;
LABEL_271:
    swift_bridgeObjectRelease(v67);
    return 39LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v68 = 0x8000000100372AB0LL;
    if (a2 == 0x8000000100372AB0LL) {
      goto LABEL_276;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100372AB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v68 = a2;
LABEL_276:
    swift_bridgeObjectRelease(v68);
    return 40LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v69 = 0x8000000100372AD0LL;
    if (a2 == 0x8000000100372AD0LL) {
      goto LABEL_281;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100372AD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v69 = a2;
LABEL_281:
    swift_bridgeObjectRelease(v69);
    return 41LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v70 = 0x8000000100372AF0LL;
    if (a2 == 0x8000000100372AF0LL) {
      goto LABEL_286;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100372AF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v70 = a2;
LABEL_286:
    swift_bridgeObjectRelease(v70);
    return 42LL;
  }

  if (a1 == 0x756F526F69647561LL && a2 == 0xEA00000000006574LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006574LL);
    return 43LL;
  }

  else
  {
    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F526F69647561LL, 0xEA00000000006574LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v72 & 1) != 0) {
      return 43LL;
    }
    else {
      return 44LL;
    }
  }

uint64_t sub_10023409C()
{
  return 44LL;
}

Swift::Int sub_1002340A4(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1002340E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10023411C + 4 * word_10037D1C0[a1]))( 0x444955556C6C6163LL,  0xE800000000000000LL);
}

uint64_t sub_10023411C()
{
  return 0x6E6F697461727564LL;
}

uint64_t sub_10023413C()
{
  return 0x65766974616C6572LL;
}

unint64_t sub_100234170()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100234540()
{
  return 0x756F526F69647561LL;
}

Swift::Int sub_10023455C()
{
  return sub_1002340A4(*v0);
}

uint64_t sub_100234564()
{
  return sub_1002340E8(*v0);
}

uint64_t sub_10023456C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100232F48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100234590()
{
  return variable initialization expression of CSDConversationSpatialPersonaResolver.localParticipantID();
}

uint64_t sub_1002345AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10023409C();
  *a1 = result;
  return result;
}

uint64_t sub_1002345D0(uint64_t a1)
{
  unint64_t v2 = sub_100235178();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002345F8(uint64_t a1)
{
  unint64_t v2 = sub_100235178();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002346AC()
{
  return type metadata accessor for RTCCSDCallInfo(0LL);
}

uint64_t type metadata accessor for RTCCSDCallInfo(uint64_t a1)
{
  uint64_t result = qword_100449DE0;
  if (!qword_100449DE0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RTCCSDCallInfo);
  }
  return result;
}

uint64_t sub_1002346EC(uint64_t a1)
{
  v4[0] = &unk_10037D328;
  v4[1] = &unk_10037D340;
  v4[2] = &unk_10037D340;
  v4[3] = &unk_10037D340;
  v4[4] = &unk_10037D340;
  v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
  void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_10037D340;
  v4[9] = &unk_10037D340;
  v4[10] = &unk_10037D358;
  v4[11] = &unk_10037D358;
  v4[12] = &unk_10037D358;
  v4[13] = &unk_10037D358;
  v4[14] = &unk_10037D370;
  v4[15] = &unk_10037D388;
  v4[16] = &unk_10037D340;
  v4[17] = &unk_10037D3A0;
  v4[18] = &unk_10037D3A0;
  v4[19] = &unk_10037D3A0;
  v4[20] = &unk_10037D3B8;
  v4[21] = &unk_10037D358;
  v4[22] = &unk_10037D358;
  v4[23] = &unk_10037D358;
  v4[24] = &unk_10037D3A0;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[25] = *(void *)(result - 8) + 64LL;
    v4[26] = &unk_10037D358;
    v4[27] = &unk_10037D358;
    v4[28] = &unk_10037D358;
    v4[29] = &unk_10037D3A0;
    v4[30] = &unk_10037D3A0;
    v4[31] = &unk_10037D3A0;
    v4[32] = &unk_10037D3A0;
    v4[33] = &unk_10037D340;
    v4[34] = &unk_10037D340;
    v4[35] = &unk_10037D358;
    v4[36] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[37] = &unk_10037D358;
    v4[38] = &unk_10037D358;
    v4[39] = &unk_10037D358;
    v4[40] = &unk_10037D358;
    v4[41] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[42] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[43] = &unk_10037D3B8;
    return swift_updateClassMetadata2(a1, 256LL, 44LL, v4, a1 + 80);
  }

  return result;
}

uint64_t sub_100234814(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v70 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  id v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001AFF14(&qword_100449DF0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1001B204C(a1, v9);
  unint64_t v11 = sub_100235178();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RTCCSDCallInfo.CodingKeys,  &type metadata for RTCCSDCallInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_callUUID);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_callUUID + 8);
  LOBYTE(v73) = 0;
  uint64_t v14 = v71;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v73, v7);
  if (v14)
  {
    unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return sub_1002356B0(v15);
  }

  uint64_t v71 = v6;
  uint64_t v16 = v70;
  uint64_t v17 = v8;
  uint64_t v18 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_durationMs);
  LOBYTE(v73) = 1;
  sub_100235514(v18, v19, (uint64_t)&v73);
  uint64_t v20 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeStart);
  sub_100235620(v20, v21, 2);
  uint64_t v22 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relativeEnd);
  sub_100235620(v22, v23, 3);
  uint64_t v24 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_bucketedDuration);
  LOBYTE(v73) = 4;
  sub_100235514(v24, v25, (uint64_t)&v73);
  LODWORD(v73) = *(_DWORD *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endReason);
  LOBYTE(v75) = 5;
  type metadata accessor for TUCallDisconnectedReason(0LL);
  sub_1001A9F18( &qword_100449E00,  (uint64_t (*)(uint64_t))type metadata accessor for TUCallDisconnectedReason,  (uint64_t)&protocol conformance descriptor for TUCallDisconnectedReason);
  sub_100235594((uint64_t)&v73, (uint64_t)&v75);
  sub_100235608(*(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerErrorCode), 6);
  sub_100235608(*(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_providerEndedReason), 7);
  uint64_t v26 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_setupTimeMs);
  LOBYTE(v73) = 8;
  sub_100235514(v26, v27, (uint64_t)&v73);
  uint64_t v28 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_connectionTimeMs);
  LOBYTE(v73) = 9;
  sub_100235514(v28, v29, (uint64_t)&v73);
  uint64_t v30 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relay);
  LOBYTE(v73) = 10;
  sub_100235498(v30, (uint64_t)&v73);
  uint64_t v31 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_incoming);
  LOBYTE(v73) = 11;
  sub_100235498(v31, (uint64_t)&v73);
  uint64_t v32 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_connected);
  LOBYTE(v73) = 12;
  sub_100235498(v32, (uint64_t)&v73);
  uint64_t v33 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_currentlyGrouped);
  LOBYTE(v73) = 13;
  sub_100235498(v33, (uint64_t)&v73);
  uint64_t v73 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges);
  LOBYTE(v75) = 14;
  sub_1001AFF14(&qword_100449E08);
  unint64_t v34 = sub_1002351B4();
  sub_100235524(v34);
  char v35 = *(_BYTE *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_filteredOutReason + 4);
  LODWORD(v73) = *(_DWORD *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_filteredOutReason);
  BYTE4(v73) = v35;
  LOBYTE(v75) = 15;
  type metadata accessor for TUCallFilteredOutReason(0LL);
  sub_1001A9F18( &qword_100449E20,  (uint64_t (*)(uint64_t))type metadata accessor for TUCallFilteredOutReason,  (uint64_t)&protocol conformance descriptor for TUCallFilteredOutReason);
  sub_100235524(v36);
  char v37 = *(_BYTE *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_verficationStatus + 8);
  uint64_t v73 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_verficationStatus);
  char v74 = v37;
  LOBYTE(v75) = 16;
  type metadata accessor for TUCallVerificationStatus(0LL);
  sub_1001A9F18( &qword_100449E28,  (uint64_t (*)(uint64_t))type metadata accessor for TUCallVerificationStatus,  (uint64_t)&protocol conformance descriptor for TUCallVerificationStatus);
  sub_100235524(v38);
  uint64_t v39 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_knownCallerStatus);
  LOBYTE(v73) = 17;
  sub_1002354DC(v39, (uint64_t)&v73);
  uint64_t v40 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isOwnNumber);
  LOBYTE(v73) = 18;
  sub_1002354DC(v40, (uint64_t)&v73);
  uint64_t v41 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isConversation);
  LOBYTE(v73) = 19;
  sub_1002354DC(v41, (uint64_t)&v73);
  uint64_t v43 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_CID);
  uint64_t v44 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_CID + 8);
  LOBYTE(v73) = 20;
  swift_bridgeObjectRetain(v44);
  sub_10023567C(v43, v44, (uint64_t)&v73);
  if (!v43)
  {
    swift_bridgeObjectRelease(v44);
    uint64_t v45 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_fromLink);
    LOBYTE(v73) = 21;
    sub_100235498(v45, (uint64_t)&v73);
    uint64_t v46 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtStart);
    LOBYTE(v73) = 22;
    sub_100235498(v46, (uint64_t)&v73);
    uint64_t v47 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_uPlusOneModeAtEnd);
    LOBYTE(v73) = 23;
    sub_100235498(v47, (uint64_t)&v73);
    uint64_t v48 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_returnedCall);
    LOBYTE(v73) = 24;
    sub_1002354DC(v48, (uint64_t)&v73);
    uint64_t v49 = v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_timebase;
    swift_beginAccess(v2 + OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_timebase, &v73, 0LL, 0LL);
    unint64_t v50 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v71, v49, v16);
    LOBYTE(v75) = 25;
    sub_1001A9F18( &qword_100449E30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v50, &v75, v7, v16);
    sub_100235648();
    uint64_t v51 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_startAsHandoff;
    LOBYTE(v75) = 26;
    sub_100235498(v51, (uint64_t)&v75);
    uint64_t v52 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_endDueToHandoff;
    LOBYTE(v75) = 27;
    sub_100235498(v52, (uint64_t)&v75);
    uint64_t v53 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_remoteDoesHandoff;
    LOBYTE(v75) = 28;
    sub_100235498(v53, (uint64_t)&v75);
    uint64_t v54 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSiriSuggested;
    LOBYTE(v75) = 29;
    sub_1002354DC(v54, (uint64_t)&v75);
    uint64_t v55 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isKnownContact;
    LOBYTE(v75) = 30;
    sub_1002354DC(v55, (uint64_t)&v75);
    uint64_t v56 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isVerifiedAppleCare;
    LOBYTE(v75) = 31;
    sub_1002354DC(v56, (uint64_t)&v75);
    uint64_t v57 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isSignedIntoiCloud;
    LOBYTE(v75) = 32;
    sub_1002354DC(v57, (uint64_t)&v75);
    uint64_t v58 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_junkConfidence);
    LOBYTE(v75) = 33;
    sub_100235514(v58, v59, (uint64_t)&v75);
    uint64_t v60 = sub_100235550(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_identificationCategory);
    LOBYTE(v75) = 34;
    sub_100235514(v60, v61, (uint64_t)&v75);
    uint64_t v62 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_isKnownCaller;
    LOBYTE(v75) = 35;
    sub_100235498(v62, (uint64_t)&v75);
    uint64_t v63 = *(unsigned int *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_userScore;
    LOBYTE(v75) = 36;
    KeyedEncodingContainer.encode(_:forKey:)(v63, &v75, v7);
    uint64_t v64 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCall;
    LOBYTE(v75) = 37;
    sub_100235498(v64, (uint64_t)&v75);
    uint64_t v65 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_brandedCallWithImage;
    LOBYTE(v75) = 38;
    sub_100235498(v65, (uint64_t)&v75);
    uint64_t v66 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_screenedThenAnswered;
    LOBYTE(v75) = 39;
    sub_100235498(v66, (uint64_t)&v75);
    uint64_t v67 = *(unsigned __int8 *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_screenedUnanswered;
    LOBYTE(v75) = 40;
    sub_100235498(v67, (uint64_t)&v75);
    uint64_t v75 = *(void *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_liveVoicemailStatus;
    char v72 = 41;
    type metadata accessor for CSDLiveVoicemailStatus(0LL);
    sub_1001A9F18( &qword_100449E38,  (uint64_t (*)(uint64_t))type metadata accessor for CSDLiveVoicemailStatus,  (uint64_t)&protocol conformance descriptor for CSDLiveVoicemailStatus);
    sub_100235594((uint64_t)&v75, (uint64_t)&v72);
    LODWORD(v75) = *(_DWORD *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_originatingUIType;
    char v72 = 42;
    type metadata accessor for TUCallOriginatingUIType(0LL);
    sub_1001A9F18( &qword_100449E40,  (uint64_t (*)(uint64_t))type metadata accessor for TUCallOriginatingUIType,  (uint64_t)&protocol conformance descriptor for TUCallOriginatingUIType);
    sub_100235594((uint64_t)&v75, (uint64_t)&v72);
    uint64_t v68 = *(void *)OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_audioRoute;
    uint64_t v69 = *(void *)(OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_audioRoute + 8);
    LOBYTE(v75) = 43;
    sub_10023567C(v68, v69, (uint64_t)&v75);
    unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    return sub_1002356B0(v15);
  }

  sub_1002356B0(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  return swift_bridgeObjectRelease(v44);
}

uint64_t sub_10023511C(void *a1)
{
  return sub_100234814(a1);
}

void sub_10023513C(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

unint64_t sub_100235178()
{
  unint64_t result = qword_100449DF8;
  if (!qword_100449DF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D4D8, &type metadata for RTCCSDCallInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100449DF8);
  }

  return result;
}

unint64_t sub_1002351B4()
{
  unint64_t result = qword_100449E10;
  if (!qword_100449E10)
  {
    uint64_t v1 = sub_1001B0504(&qword_100449E08);
    sub_1001A9F18( (unint64_t *)&qword_100449E18,  (uint64_t (*)(uint64_t))type metadata accessor for RTCCSDRelayDeviceRoute,  (uint64_t)&unk_10037E1D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100449E10);
  }

  return result;
}

uint64_t sub_100235230()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100235254()
{
}

uint64_t sub_10023525C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10023526C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10023527C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t getEnumTagSinglePayload for RTCCSDCallInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xD5)
  {
    if (a2 + 43 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 43) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 44;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RTCCSDCallInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 43 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 43) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xD5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD4) {
    return ((uint64_t (*)(void))((char *)&loc_100235358 + 4 * byte_10037D21D[v4]))();
  }
  *a1 = a2 + 43;
  return ((uint64_t (*)(void))((char *)sub_10023538C + 4 * byte_10037D218[v4]))();
}

uint64_t sub_10023538C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100235394(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10023539CLL);
  }
  return result;
}

uint64_t sub_1002353A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002353B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 43;
  return result;
}

uint64_t sub_1002353B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002353BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RTCCSDCallInfo.CodingKeys()
{
  return &type metadata for RTCCSDCallInfo.CodingKeys;
}

unint64_t sub_1002353DC()
{
  unint64_t result = qword_100449E70;
  if (!qword_100449E70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D4B0, &type metadata for RTCCSDCallInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100449E70);
  }

  return result;
}

unint64_t sub_10023541C()
{
  unint64_t result = qword_100449E78;
  if (!qword_100449E78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D420, &type metadata for RTCCSDCallInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100449E78);
  }

  return result;
}

unint64_t sub_10023545C()
{
  unint64_t result = qword_100449E80;
  if (!qword_100449E80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D448, &type metadata for RTCCSDCallInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100449E80);
  }

  return result;
}

uint64_t sub_100235498(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1002354A8()
{
  return sub_1001AB0AC(v0, 1LL, v1);
}

uint64_t sub_1002354DC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v2);
}

void sub_1002354EC()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1002354FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001A9670(*(void *)(a1 - 256), 1LL, 1LL, v1);
}

uint64_t sub_100235514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100235524(uint64_t a1)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 104, v3 - 72, v2, v1, a1);
}

uint64_t sub_100235544(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

uint64_t sub_100235550@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_100235560@<X0>(uint64_t a1@<X8>)
{
  return v3(*(void *)(a1 - 256), v2, v1);
}

id sub_100235574()
{
  return [v0 *(SEL *)(v1 + 3168)];
}

uint64_t sub_100235580(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_100235588()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100235594(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v3, v2);
}

id sub_1002355A8()
{
  return [v0 *(SEL *)(v1 + 2744)];
}

uint64_t sub_1002355B4(uint64_t a1, uint64_t a2)
{
  return sub_1001CA024(a1, a2, v2);
}

uint64_t sub_1002355C0()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100235600(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100235608@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 104) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 104, v2);
}

uint64_t sub_100235620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 104) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 104, v3);
}

uint64_t sub_100235638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, a2, v4, a4);
}

void sub_100235640(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100235648()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v2 - 120), v1);
}

uint64_t sub_100235658@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + a2;
  *(void *)uint64_t v3 = result;
  *(_BYTE *)(v3 + 8) = 0;
  return result;
}

  ;
}

uint64_t sub_100235674@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10023567C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

  ;
}

void sub_10023569C(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + a1;
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
}

uint64_t sub_1002356B0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1002356BC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100235708()
{
  return swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_delegate);
}

uint64_t sub_100235764(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

id sub_100235798()
{
  uint64_t v1 = OBJC_IVAR___CSDScreenSharingActivityManager_featureFlags;
  id result = [*(id *)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_featureFlags) expanseEnabled];
  if ((_DWORD)result) {
    return [*(id *)(v0 + v1) supportsScreenSharing];
  }
  return result;
}

uint64_t sub_1002357FC()
{
  return swift_unknownObjectRetain(*(void *)(v0
                                             + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes));
}

uint64_t sub_100235858(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes);
  *(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes) = a1;
  return swift_unknownObjectRelease(v2);
}

void sub_100235890()
{
  id v1 = *(id *)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale);
  sub_1001AA978();
}

void sub_100235900(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale);
  *(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale) = a1;
  id v3 = a1;

  sub_100235944();
}

void sub_100235944()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes);
  if (!v1)
  {
    if (qword_100446928 != -1) {
      swift_once(&qword_100446928, sub_1002589F8);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_1001B0D98(v3, (uint64_t)qword_100454198);
    oslog = (os_log_s *)Logger.logObject.getter(v4, v5, v6);
    os_log_type_t v7 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "No latest remote attributes", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    goto LABEL_12;
  }

  uint64_t v2 = objc_opt_self(&OBJC_CLASS___TUCallScreenShareAttributes);
  if (!swift_dynamicCastObjCClass(v1, v2))
  {
    uint64_t v9 = qword_100446928;
    swift_unknownObjectRetain(v1);
    if (v9 != -1) {
      swift_once(&qword_100446928, sub_1002589F8);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_1001B0D98(v10, (uint64_t)qword_100454198);
    oslog = (os_log_s *)Logger.logObject.getter(v11, v12, v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(oslog, v14);
    if (!os_log_type_enabled(oslog, v15))
    {

      goto LABEL_14;
    }

    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Could not cast to TUCallScreenShareAttributes", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_unknownObjectRelease(v1);
LABEL_12:

    return;
  }

  swift_unknownObjectRetain(v1);
  ScreenSharingActivityManager.broadcastAttributes(_:)();
LABEL_14:
  swift_unknownObjectRelease(v1);
}

void ScreenSharingActivityManager.broadcastAttributes(_:)()
{
  uint64_t v4 = v3;
  uint64_t v13 = *(void *)(sub_1001C7360() - 8);
  sub_1001C7334();
  __chkstk_darwin(v5);
  sub_1001C7290();
  sub_100239230();
  __chkstk_darwin(v6);
  sub_1001B10F0();
  uint64_t v7 = sub_1001C7370((uint64_t)&unk_1003E2FA0, 24LL);
  swift_unknownObjectWeakInit(v7 + 16, v0);
  uint64_t v8 = sub_1001C7370((uint64_t)&unk_1003E2FC8, 32LL);
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v4;
  v14[5] = sub_100236E74;
  v14[6] = v8;
  v14[1] = _NSConcreteStackBlock;
  v14[2] = 1107296256LL;
  uint64_t v9 = sub_1001E2064((uint64_t)sub_1002356BC);
  sub_10023929C();
  id v10 = v4;
  sub_1001C7348();
  v14[0] = _swiftEmptyArrayStorage;
  sub_1002392E4((unint64_t *)&qword_100447CB0);
  uint64_t v11 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1002392A4((uint64_t)v14, v11, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1);
  _Block_release(v9);
  sub_1001E91BC(v13);
  sub_100239220();
  sub_100239264();
  sub_100207134();
  sub_1001B0FF8();
}

uint64_t sub_100235CC0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

char *sub_100235CE4()
{
  uint64_t v35 = v3;
  uint64_t v36 = v4;
  uint64_t v5 = v0;
  uint64_t v31 = v6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_1001D91F4();
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_1001C7334();
  __chkstk_darwin(v9);
  sub_1001BB560();
  type metadata accessor for DispatchQoS(0LL);
  sub_1001C7334();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR___CSDScreenSharingActivityManager_delegate], 0LL);
  *(void *)&v5[OBJC_IVAR___CSDScreenSharingActivityManager_subscriptions] = &_swiftEmptySetSingleton;
  *(void *)&v5[OBJC_IVAR___CSDScreenSharingActivityManager_messenger] = 0LL;
  *(void *)&v5[OBJC_IVAR___CSDScreenSharingActivityManager_observer] = 0LL;
  *(void *)&v5[OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes] = 0LL;
  *(void *)&v5[OBJC_IVAR___CSDScreenSharingActivityManager_session] = 0LL;
  *(void *)&v5[OBJC_IVAR___CSDScreenSharingActivityManager_systemRootLayerScale] = 0LL;
  sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v13 = v5;
  ((void (*)(void))static DispatchQoS.userInitiated.getter)();
  unint64_t v34 = _swiftEmptyArrayStorage;
  sub_100238B68( (unint64_t *)&unk_100449280,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v15 = v14;
  uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001C6AE8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v16, v17, v8, v15);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v1,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v30);
  *(void *)&v13[OBJC_IVAR___CSDScreenSharingActivityManager_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000047LL,  0x8000000100372D00LL,  v12,  v2,  v1,  0LL);
  uint64_t v18 = v31;
  *(void *)&v13[OBJC_IVAR___CSDScreenSharingActivityManager_featureFlags] = v31;
  id v19 = v18;
  uint64_t v20 = static OS_dispatch_queue.main.getter(v19);
  id v21 = objc_allocWithZone((Class)((uint64_t (*)(void))type metadata accessor for CPCarPlayObserver)(0LL));
  *(void *)&v13[OBJC_IVAR___CSDScreenSharingActivityManager_carPlayObserver] = ((uint64_t (*)(uint64_t))CPCarPlayObserver.init(queue:))(v20);

  v33.receiver = v13;
  v33.super_class = ObjectType;
  uint64_t v22 = (char *)objc_msgSendSuper2(&v33, "init");
  uint64_t v23 = *(void **)&v22[OBJC_IVAR___CSDScreenSharingActivityManager_carPlayObserver];
  sub_100238B68( &qword_100449F90,  v24,  (uint64_t (*)(uint64_t))type metadata accessor for ScreenSharingActivityManager);
  uint64_t v26 = v25;
  uint64_t v27 = v22;
  id v28 = v23;
  ((void (*)(char *, uint64_t))dispatch thunk of CPCarPlayObserver.delegate.setter)(v22, v26);

  ScreenSharingActivityManager.startObservingSessions()();
  return v27;
}

Swift::Void __swiftcall ScreenSharingActivityManager.startObservingSessions()()
{
  if ((sub_100239270() & 1) != 0)
  {
    uint64_t v2 = sub_1001C7370((uint64_t)&unk_1003E2FA0, 24LL);
    sub_100239288(v2);
    uint64_t v3 = sub_1001E2064((uint64_t)sub_1002356BC);
    sub_10023929C();
    sub_1001C7348();
    sub_100238B68( (unint64_t *)&qword_100447CB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1001C7340();
    sub_1001C7368((unint64_t *)&qword_100447CC0);
    sub_100239244(v4);
    uint64_t v5 = sub_1002392D0();
    OS_dispatch_queue.async(group:qos:flags:execute:)(v5, v6, v7);
    _Block_release(v3);
    sub_1001E91BC(v8);
    sub_100239220();
    sub_100239264();
    sub_100207134();
  }

  sub_1001B0FF8();
}

uint64_t sub_10023616C()
{
  uint64_t v12 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)&v0[OBJC_IVAR___CSDScreenSharingActivityManager_queue];
  uint64_t v2 = sub_1001C7370((uint64_t)&unk_1003E3110, 32LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v2 + 24) = &v12;
  uint64_t v3 = sub_1001C7370((uint64_t)&unk_1003E3138, 32LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100238AC4;
  *(void *)(v3 + 24) = v2;
  void aBlock[4] = sub_1001C7040;
  uint64_t v11 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100275F14;
  aBlock[3] = &unk_1003E3150;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v11;
  uint64_t v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 107LL, 133LL, 20LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = v12;
    sub_100207134();
    return v9;
  }

  return result;
}

uint64_t sub_100236298(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + OBJC_IVAR___CSDScreenSharingActivityManager_session);
  if (v2)
  {
    uint64_t v4 = swift_retain(*(void *)(result + OBJC_IVAR___CSDScreenSharingActivityManager_session));
    if ((GroupSession.isLocallyInitiated.getter(v4) & 1) != 0)
    {
      return swift_release(v2);
    }

    else
    {
      GroupSession.activity.getter(v8);
      uint64_t v5 = (void *)v8[2];
      swift_bridgeObjectRelease(v8[1]);
      if (v5)
      {
        id v6 = [objc_allocWithZone(TUScreenShareAttributes) initWithAttributes:v5];

        swift_release(v2);
        uint64_t v7 = *a2;
        *a2 = (uint64_t)v6;
        return swift_unknownObjectRelease(v7);
      }

      else
      {
        return swift_release(v2);
      }
    }
  }

  return result;
}

void sub_100236354(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1002363A4();
  }

void sub_1002363A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001AFF14(&qword_100449FB8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = OBJC_IVAR___CSDScreenSharingActivityManager_observer;
    if (!*(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_observer)
      && (sub_100235798() & 1) != 0)
    {
      unint64_t v14 = sub_100238B18();
      GroupSessionObserver.init(for:queue:)( &type metadata for ScreenSharingActivity,  v11,  &type metadata for ScreenSharingActivity,  v14);
      uint64_t v15 = swift_allocObject(&unk_1003E2FA0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v15 + 16, v1);
      sub_1001C6AE8(&qword_100449FC0, &qword_100449FB8);
      uint64_t v17 = Publisher<>.sink(receiveValue:)(sub_100238B54, v15, v2, v16);
      swift_release(v15);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v18 = *(void *)(v1 + v13);
      *(void *)(v1 + v13) = v17;
      swift_release(v18);
      id v19 = sub_1001704C4();
      uint64_t v20 = static os_log_type_t.default.getter(v19);
      os_log(_:dso:log:type:_:)( "Started observer for screen sharing activity sessions",  53LL,  2LL,  &_mh_execute_header,  v19,  v20,  _swiftEmptyArrayStorage);
    }
  }

  else
  {
    __break(1u);
  }

void ScreenSharingActivityManager.startActivitySession(for:with:)()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1001C7360();
  sub_1002392B4();
  __chkstk_darwin(v7);
  sub_1001C7290();
  sub_100239230();
  __chkstk_darwin(v8);
  if ((sub_100239270() & 1) != 0)
  {
    ScreenSharingActivityManager.startObservingSessions()();
    uint64_t v9 = sub_1001C7370((uint64_t)&unk_1003E2FA0, 24LL);
    sub_100239288(v9);
    uint64_t v10 = (void *)sub_1001C7370((uint64_t)&unk_1003E3040, 40LL);
    _OWORD v10[2] = v2;
    v10[3] = v4;
    v10[4] = v6;
    void v17[5] = sub_100236ECC;
    v17[6] = v10;
    v17[1] = _NSConcreteStackBlock;
    v17[2] = 1107296256LL;
    id v11 = sub_1001E2064((uint64_t)sub_1002356BC);
    id v12 = v4;
    id v13 = v6;
    sub_10023929C();
    sub_1001C7348();
    v17[0] = _swiftEmptyArrayStorage;
    sub_100238B68( (unint64_t *)&qword_100447CB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v14 = sub_1001C7340();
    sub_1001C7368((unint64_t *)&qword_100447CC0);
    sub_1002392A4((uint64_t)v17, v14, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0);
    _Block_release(v11);
    sub_1001E91BC(v16);
    sub_100239220();
    sub_100239264();
    sub_100207134();
  }

  sub_1001B0FF8();
}

void sub_100236778(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes);
    *(void *)(Strong + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes) = a2;
    id v9 = a2;
    swift_unknownObjectRelease(v8);
    if (a2) {
      id v10 = [objc_allocWithZone((Class)type metadata accessor for CodableRemoteScreenShareAttributes()) initWithAttributes:v9];
    }
    else {
      id v10 = 0LL;
    }
    id v11 = sub_1001704C4();
    uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    v28[0] = a3;
    uint64_t v14 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    a3;
    uint64_t v15 = String.init<A>(reflecting:)(v28, v14);
    uint64_t v17 = v16;
    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v18 = sub_1001B2330();
    *(void *)(v13 + 64) = v18;
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    if (v10)
    {
      v28[0] = v10;
      uint64_t v19 = type metadata accessor for CodableRemoteScreenShareAttributes();
      id v20 = v10;
      uint64_t v21 = String.init<A>(reflecting:)(v28, v19);
    }

    else
    {
      unint64_t v22 = 0xE300000000000000LL;
      uint64_t v21 = 7104878LL;
    }

    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v18;
    *(void *)(v13 + 72) = v21;
    *(void *)(v13 + 80) = v22;
    uint64_t v23 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:type:_:)( "Starting screen sharing activity for handle %@ with initial attributes %@",  73LL,  2LL,  &_mh_execute_header,  v11,  v23,  v13);

    swift_bridgeObjectRelease(v13);
    uint64_t v24 = sub_100236984();
    uint64_t v26 = v25;
    v28[0] = v24;
    v28[1] = v25;
    v28[2] = v10;
    sub_100238B18();
    id v27 = v10;
    GroupActivity.activate()();
    swift_bridgeObjectRelease(v26);
  }

uint64_t sub_100236984()
{
  if (v2) {
    return v1;
  }
  id v4 = [v0 value];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v3;
}

Swift::Void __swiftcall ScreenSharingActivityManager.stopActivitySession()()
{
  uint64_t v8 = *(void *)(sub_1001C7360() - 8);
  sub_1001C7334();
  __chkstk_darwin(v0);
  sub_1001C7290();
  sub_100239230();
  __chkstk_darwin(v1);
  sub_1001B10F0();
  uint64_t v2 = sub_1001C7370((uint64_t)&unk_1003E2FA0, 24LL);
  swift_unknownObjectWeakInit(v2 + 16);
  uint64_t v3 = sub_1001E2064((uint64_t)sub_1002356BC);
  sub_10023929C();
  sub_1001C7348();
  sub_1002392E4((unint64_t *)&qword_100447CB0);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_100239244(v4);
  uint64_t v5 = sub_1002392D0();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v5, v6, v7);
  _Block_release(v3);
  sub_1001E91BC(v8);
  sub_100239220();
  sub_100239264();
  sub_100207134();
  sub_1001B0FF8();
}

void sub_100236BAC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100236C00();
  }

uint64_t sub_100236C00()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  sub_1002392B4();
  __chkstk_darwin(v5);
  sub_1001D91F4();
  uint64_t v6 = *(void **)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v1 = v6;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v4);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v1);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v1, v4);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_session);
    if (v9)
    {
      uint64_t v10 = swift_retain(*(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_session));
      if ((GroupSession.isLocallyInitiated.getter(v10) & 1) != 0) {
        sub_1002373C4();
      }
      return swift_release(v9);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100236D18(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Participants(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v9 = (char *)Strong;
    if ([a2 style] && (sub_100235798() & 1) != 0)
    {
      uint64_t v10 = *(void *)&v9[OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes];
      *(void *)&v9[OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes] = a2;
      swift_unknownObjectRelease(v10);
      id v11 = [objc_allocWithZone((Class)type metadata accessor for CodableRemoteScreenShareAttributes()) initWithAttributes:a2];
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Participants.all(_:), v4);
      sub_100236EE0(v11, (uint64_t)v7);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    else
    {
    }
  }

uint64_t sub_100236E54()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100236E74()
{
}

uint64_t sub_100236E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100236E8C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100236E94()
{
}

uint64_t sub_100236E9C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100236ECC()
{
}

void sub_100236ED8()
{
}

uint64_t sub_100236EE0(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v64 - v9;
  uint64_t v10 = type metadata accessor for Participants(0LL);
  uint64_t v68 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_10044A010);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v20 = *(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_session);
  if (v20)
  {
    uint64_t v67 = a2;
    uint64_t v21 = swift_retain(v20);
    if ((GroupSession.isLocallyInitiated.getter(v21) & 1) != 0)
    {
      GroupSession.state.getter();
      (*(void (**)(char *, void, uint64_t))(v14 + 104))( v17,  enum case for GroupSession.State.joined<A>(_:),  v13);
      unint64_t v22 = sub_100238B18();
      char v23 = static GroupSession.State.== infix(_:_:)(v19, v17, &type metadata for ScreenSharingActivity, v22);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
      v24(v17, v13);
      v24(v19, v13);
      if ((v23 & 1) != 0)
      {
        if (*(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger))
        {
          uint64_t v66 = *(void *)(v3 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger);
          swift_retain(v66);
          id v64 = sub_1001704C4();
          uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
          uint64_t v26 = swift_allocObject(v25, 152LL, 7LL);
          *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
          id v73 = a1;
          uint64_t v27 = type metadata accessor for CodableRemoteScreenShareAttributes();
          uint64_t v65 = v27;
          id v28 = a1;
          uint64_t v29 = String.init<A>(reflecting:)(&v73, v27);
          uint64_t v31 = v30;
          *(void *)(v26 + 56) = &type metadata for String;
          unint64_t v32 = sub_1001B2330();
          *(void *)(v26 + 64) = v32;
          *(void *)(v26 + 32) = v29;
          *(void *)(v26 + 40) = v31;
          (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v12, v67, v10);
          uint64_t v33 = String.init<A>(reflecting:)(v12, v10);
          *(void *)(v26 + 96) = &type metadata for String;
          *(void *)(v26 + 104) = v32;
          *(void *)(v26 + 72) = v33;
          *(void *)(v26 + 80) = v34;
          uint64_t v35 = v70;
          GroupSession.id.getter();
          uint64_t v37 = v71;
          uint64_t v36 = v72;
          uint64_t v38 = v69;
          (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v69, v35, v72);
          uint64_t v39 = String.init<A>(reflecting:)(v38, v36);
          uint64_t v41 = v40;
          uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v35, v36);
          *(void *)(v26 + 136) = &type metadata for String;
          *(void *)(v26 + 144) = v32;
          *(void *)(v26 + 112) = v39;
          *(void *)(v26 + 120) = v41;
          uint64_t v43 = static os_log_type_t.default.getter(v42);
          uint64_t v44 = v64;
          os_log(_:dso:log:type:_:)( "Sending remote attributes %@ to %@ (screen sharing activity session id: %@)",  75LL,  2LL,  &_mh_execute_header,  v64,  v43,  v26);

          swift_bridgeObjectRelease(v26);
          id v73 = v28;
          uint64_t v45 = swift_allocObject(&unk_1003E3200, 24LL, 7LL);
          *(void *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
          sub_100238B68( &qword_100449FE8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
          uint64_t v47 = v46;
          sub_100238B68( &qword_100449FF0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
          uint64_t v49 = v48;
          id v50 = v28;
          uint64_t v51 = v47;
          uint64_t v52 = v66;
          GroupSessionMessenger.send<A>(_:to:completion:)(&v73, v67, sub_10023911C, v45, v65, v51, v49);
          swift_release(v45);
          swift_release(v52);
          return swift_release(v20);
        }
      }
    }

    swift_release(v20);
  }

  id v54 = sub_1001704C4();
  uint64_t v56 = static os_log_type_t.error.getter(v54, v55);
  uint64_t v57 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
  *(_OWORD *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  id v73 = a1;
  uint64_t v59 = type metadata accessor for CodableRemoteScreenShareAttributes();
  id v60 = a1;
  uint64_t v61 = String.init<A>(reflecting:)(&v73, v59);
  uint64_t v63 = v62;
  *(void *)(v58 + 56) = &type metadata for String;
  *(void *)(v58 + 64) = sub_1001B2330();
  *(void *)(v58 + 32) = v61;
  *(void *)(v58 + 40) = v63;
  os_log(_:dso:log:type:_:)( "Unable to send updated attributes %@ over screen sharing activity",  65LL,  2LL,  &_mh_execute_header,  v54,  v56,  v58);

  return swift_bridgeObjectRelease(v58);
}

void sub_1002373C4()
{
  uint64_t v2 = v0;
  int v40 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1001BB560();
  uint64_t v15 = *(void **)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v1 = v15;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v13);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v1);
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v1, v13);
  if ((v15 & 1) != 0)
  {
    if ((GroupSession.isLocallyInitiated.getter(v17) & 1) != 0 && (sub_100235798() & 1) != 0)
    {
      id v18 = sub_1001704C4();
      uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v20 = sub_1001C7370(v19, 72LL);
      __int128 v39 = xmmword_10037B290;
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
      GroupSession.id.getter();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      uint64_t v21 = String.init<A>(reflecting:)(v10, v6);
      uint64_t v23 = v22;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      *(void *)(v20 + 56) = &type metadata for String;
      unint64_t v24 = sub_1001B2330();
      *(void *)(v20 + 64) = v24;
      *(void *)(v20 + 32) = v21;
      *(void *)(v20 + 40) = v23;
      uint64_t v25 = static os_log_type_t.default.getter(v24);
      os_log(_:dso:log:type:_:)( "End screen sharing activity session (id: %@)",  44LL,  2LL,  &_mh_execute_header,  v18,  v25,  v20);

      swift_bridgeObjectRelease(v20);
      GroupSession.end()();
      uint64_t v26 = *(void *)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes);
      *(void *)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes) = 0LL;
      swift_unknownObjectRelease(v26);
      sub_1002392C4(OBJC_IVAR___CSDScreenSharingActivityManager_session);
      sub_1002392C4(OBJC_IVAR___CSDScreenSharingActivityManager_messenger);
      if ((v40 & 1) != 0)
      {
        id v27 = sub_1001704C4();
        uint64_t v28 = sub_1001C7370(v19, 72LL);
        *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
        uint64_t v41 = v5;
        swift_retain(v5);
        uint64_t v29 = sub_1001AFF14(&qword_100449F98);
        uint64_t v30 = String.init<A>(reflecting:)(&v41, v29);
        *(void *)(v28 + 56) = &type metadata for String;
        *(void *)(v28 + 64) = v24;
        *(void *)(v28 + 32) = v30;
        *(void *)(v28 + 40) = v31;
        uint64_t v32 = static os_log_type_t.default.getter(v30);
        os_log(_:dso:log:type:_:)( "Screen sharing activity manager notifying delegate of session %@ ending",  71LL,  2LL,  &_mh_execute_header,  v27,  v32,  v28);

        swift_bridgeObjectRelease(v28);
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_delegate);
        if (Strong)
        {
          uint64_t v34 = (void *)Strong;
          unint64_t v35 = sub_100238ADC();
          uint64_t v36 = swift_allocError(&type metadata for ScreenSharingActivityManagerErrors, v35, 0LL, 0LL);
          uint64_t v37 = (void *)_convertErrorToNSError(_:)(v36);
          uint64_t v38 = swift_errorRelease(v36);
          [v34 screenSharingActivityManager:v2 invalidatedSessionWithReason:v37 wasLocallySharing:GroupSession.isLocallyInitiated.getter(v38) & 1];

          swift_unknownObjectRelease(v34);
        }
      }
    }

    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

void sub_1002376F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_100237748(v2);
  }

void sub_100237748(uint64_t a1)
{
  uint64_t v3 = sub_1001AFF14(&qword_100449FC8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001AFF14(&qword_100449FD0);
  __chkstk_darwin(v7);
  uint64_t v68 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1001AFF14(&qword_100449FD8);
  uint64_t v72 = *(void *)(v9 - 8);
  uint64_t v73 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v16 = *(void **)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    uint64_t v70 = v6;
    uint64_t v71 = v4;
    uint64_t v69 = v3;
    id v18 = sub_1001704C4();
    uint64_t v67 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v19 = swift_allocObject(v67, 112LL, 7LL);
    __int128 v66 = xmmword_10037B1B0;
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    *(void *)&__int128 v76 = a1;
    swift_retain(a1);
    uint64_t v20 = sub_1001AFF14(&qword_100449F98);
    uint64_t v21 = String.init<A>(reflecting:)(&v76, v20);
    uint64_t v23 = v22;
    *(void *)(v19 + 56) = &type metadata for String;
    unint64_t v24 = sub_1001B2330();
    *(void *)(v19 + 64) = v24;
    *(void *)(v19 + 32) = v21;
    *(void *)(v19 + 40) = v23;
    uint64_t v25 = v1;
    GroupSession.activity.getter(&v76);
    __int128 v74 = v76;
    uint64_t v75 = v77;
    uint64_t v26 = String.init<A>(reflecting:)(&v74, &type metadata for ScreenSharingActivity);
    *(void *)(v19 + 96) = &type metadata for String;
    *(void *)(v19 + 104) = v24;
    *(void *)(v19 + 72) = v26;
    *(void *)(v19 + 80) = v27;
    uint64_t v28 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:type:_:)( "Received new screen sharing activity session %@ with activity %@",  64LL,  2LL,  &_mh_execute_header,  v18,  v28,  v19);

    uint64_t v29 = swift_bridgeObjectRelease(v19);
    if ((GroupSession.isLocallyInitiated.getter(v29) & 1) != 0
      && !*(void *)(v1 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes))
    {
      id v59 = sub_1001704C4();
      uint64_t v60 = swift_allocObject(v67, 112LL, 7LL);
      *(_OWORD *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = v66;
      *(void *)&__int128 v76 = a1;
      swift_retain(a1);
      uint64_t v61 = String.init<A>(reflecting:)(&v76, v20);
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v24;
      *(void *)(v60 + 32) = v61;
      *(void *)(v60 + 40) = v62;
      GroupSession.activity.getter(&v76);
      __int128 v74 = v76;
      uint64_t v75 = v77;
      uint64_t v63 = String.init<A>(reflecting:)(&v74, &type metadata for ScreenSharingActivity);
      *(void *)(v60 + 96) = &type metadata for String;
      *(void *)(v60 + 104) = v24;
      *(void *)(v60 + 72) = v63;
      *(void *)(v60 + 80) = v64;
      uint64_t v65 = static os_log_type_t.default.getter(v63);
      os_log(_:dso:log:type:_:)( "Ending local screen sharing session since no active screen share attributes",  75LL,  2LL,  &_mh_execute_header,  v59,  v65,  v60);

      swift_bridgeObjectRelease(v60);
      GroupSession.end()();
    }

    else
    {
      GroupSession.$state.getter();
      uint64_t v30 = swift_allocObject(&unk_1003E2FA0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v30 + 16, v25);
      uint64_t v31 = swift_allocObject(&unk_1003E3188, 32LL, 7LL);
      *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
      *(void *)(v31 + 24) = a1;
      sub_1001C6AE8(&qword_100449FE0, &qword_100449FD8);
      uint64_t v33 = v32;
      swift_retain(a1);
      uint64_t v34 = v73;
      uint64_t v35 = Publisher<>.sink(receiveValue:)(sub_100238B60, v31, v73, v33);
      swift_release(v31);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v34);
      uint64_t v36 = v25 + OBJC_IVAR___CSDScreenSharingActivityManager_subscriptions;
      swift_beginAccess(v25 + OBJC_IVAR___CSDScreenSharingActivityManager_subscriptions, &v76, 33LL, 0LL);
      AnyCancellable.store(in:)(v36);
      swift_endAccess(&v76);
      swift_release(v35);
      GroupSession.activity.getter(&v76);
      uint64_t v37 = v77;
      swift_bridgeObjectRelease(*((void *)&v76 + 1));
      if (v37)
      {
        id v38 = [objc_allocWithZone(TUCallScreenShareAttributes) initWithAttributes:v37];
        uint64_t v39 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
        uint64_t v40 = v68;
        sub_1001A9670(v68, 1LL, 1LL, v39);
        sub_100238BEC((uint64_t)v38, v40, a1, v25);

        sub_100239070(v40);
      }

      uint64_t v42 = v70;
      uint64_t v41 = v71;
      uint64_t v43 = type metadata accessor for GroupSessionMessenger(0LL);
      swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
      uint64_t v44 = swift_retain(a1);
      uint64_t v45 = GroupSessionMessenger.init<A>(session:)(v44);
      GroupSession.join()();
      uint64_t v46 = type metadata accessor for CodableRemoteScreenShareAttributes();
      sub_100238B68( &qword_100449FE8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
      uint64_t v48 = v47;
      sub_100238B68( &qword_100449FF0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes);
      GroupSessionMessenger.receive<A>(_:)(v46, v46, v48, v49);
      uint64_t v50 = swift_allocObject(&unk_1003E2FA0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v50 + 16, v25);
      uint64_t v51 = swift_allocObject(&unk_1003E31B0, 32LL, 7LL);
      *(void *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v50;
      *(void *)(v51 + 24) = a1;
      uint64_t v52 = swift_allocObject(&unk_1003E31D8, 32LL, 7LL);
      *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100238BC0;
      *(void *)(v52 + 24) = v51;
      sub_1001C6AE8(&qword_100449FF8, &qword_100449FC8);
      uint64_t v54 = v53;
      swift_retain(a1);
      uint64_t v55 = v69;
      uint64_t v56 = Publisher<>.sink(receiveValue:)(sub_100238BE4, v52, v69, v54);
      swift_release(v52);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v55);
      swift_beginAccess(v36, &v76, 33LL, 0LL);
      AnyCancellable.store(in:)(v36);
      swift_endAccess(&v76);
      swift_release(v56);
      uint64_t v57 = *(void *)(v25 + OBJC_IVAR___CSDScreenSharingActivityManager_session);
      *(void *)(v25 + OBJC_IVAR___CSDScreenSharingActivityManager_session) = a1;
      swift_release(v57);
      uint64_t v58 = *(void *)(v25 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger);
      *(void *)(v25 + OBJC_IVAR___CSDScreenSharingActivityManager_messenger) = v45;
      swift_retain(a1);
      swift_release(v58);
    }
  }

  else
  {
    __break(1u);
  }

void sub_100237DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_100237E48(a1, a3);
  }

uint64_t sub_100237E48(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a2;
  uint64_t v86 = type metadata accessor for UUID(0LL);
  uint64_t v88 = *(void *)(v86 - 8);
  uint64_t v4 = __chkstk_darwin(v86);
  double v87 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v81 - v6;
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_10044A010);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  double v84 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v81 - v12);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (uint64_t *)((char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v85 = v2;
  id v18 = *(void **)(v2 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  *id v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    uint64_t v21 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v21(v13, a1, v8);
    int v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v13, v8);
    if (v22 == enum case for GroupSession.State.invalidated<A>(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v13, v8);
      uint64_t v23 = *v13;
      id v24 = sub_1001704C4();
      uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v26 = swift_allocObject(v25, 112LL, 7LL);
      *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      GroupSession.id.getter();
      uint64_t v27 = v87;
      uint64_t v28 = v88;
      uint64_t v29 = v86;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v87, v7, v86);
      uint64_t v30 = String.init<A>(reflecting:)(v27, v29);
      uint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
      *(void *)(v26 + 56) = &type metadata for String;
      unint64_t v33 = sub_1001B2330();
      *(void *)(v26 + 64) = v33;
      *(void *)(v26 + 32) = v30;
      *(void *)(v26 + 40) = v32;
      uint64_t v90 = v23;
      swift_errorRetain(v23);
      uint64_t v34 = sub_1001AFF14(&qword_100447B70);
      uint64_t v35 = String.init<A>(reflecting:)(&v90, v34);
      *(void *)(v26 + 96) = &type metadata for String;
      *(void *)(v26 + 104) = v33;
      *(void *)(v26 + 72) = v35;
      *(void *)(v26 + 80) = v36;
      uint64_t v37 = static os_log_type_t.default.getter(v35);
      os_log(_:dso:log:type:_:)( "Screen sharing activity session (id: %@) invalidated with reason: %@",  68LL,  2LL,  &_mh_execute_header,  v24,  v37,  v26);

      swift_bridgeObjectRelease(v26);
      uint64_t v38 = v85;
      sub_10023864C();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v38 + OBJC_IVAR___CSDScreenSharingActivityManager_delegate);
      if (Strong)
      {
        uint64_t v40 = (void *)Strong;
        uint64_t v41 = (void *)_convertErrorToNSError(_:)(v23);
        [v40 screenSharingActivityManager:v38 invalidatedSessionWithReason:v41 wasLocallySharing:GroupSession.isLocallyInitiated.getter(v41) & 1];
        swift_errorRelease(v23);

        return swift_unknownObjectRelease(v40);
      }

      return swift_errorRelease(v23);
    }

    else
    {
      int v42 = v22;
      if (v22 == enum case for GroupSession.State.waiting<A>(_:))
      {
        id v43 = sub_1001704C4();
        uint64_t v44 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v45 = swift_allocObject(v44, 72LL, 7LL);
        *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        GroupSession.id.getter();
        uint64_t v46 = v87;
        uint64_t v47 = v88;
        uint64_t v48 = v86;
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v87, v7, v86);
        uint64_t v49 = String.init<A>(reflecting:)(v46, v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v48);
        *(void *)(v45 + 56) = &type metadata for String;
        unint64_t v52 = sub_1001B2330();
        *(void *)(v45 + 64) = v52;
        *(void *)(v45 + 32) = v49;
        *(void *)(v45 + 40) = v51;
        uint64_t v53 = static os_log_type_t.default.getter(v52);
        os_log(_:dso:log:type:_:)( "Screen sharing activity session (id: %@) waiting",  48LL,  2LL,  &_mh_execute_header,  v43,  v53,  v45);

        return swift_bridgeObjectRelease(v45);
      }

      else
      {
        int v54 = enum case for GroupSession.State.joined<A>(_:);
        id v55 = sub_1001704C4();
        if (v42 == v54)
        {
          uint64_t v56 = sub_1001AFF14((uint64_t *)&unk_100447E30);
          uint64_t v57 = swift_allocObject(v56, 72LL, 7LL);
          *(_OWORD *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
          GroupSession.id.getter();
          uint64_t v58 = v87;
          uint64_t v59 = v88;
          uint64_t v60 = v86;
          (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v87, v7, v86);
          uint64_t v61 = String.init<A>(reflecting:)(v58, v60);
          uint64_t v63 = v62;
          (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v60);
          *(void *)(v57 + 56) = &type metadata for String;
          unint64_t v64 = sub_1001B2330();
          *(void *)(v57 + 64) = v64;
          *(void *)(v57 + 32) = v61;
          *(void *)(v57 + 40) = v63;
          uint64_t v65 = static os_log_type_t.default.getter(v64);
          os_log(_:dso:log:type:_:)( "Screen sharing activity session (id: %@) joined",  47LL,  2LL,  &_mh_execute_header,  v55,  v65,  v57);

          uint64_t v66 = swift_bridgeObjectRelease(v57);
          uint64_t result = GroupSession.isLocallyInitiated.getter(v66);
          if ((result & 1) != 0)
          {
            uint64_t v40 = *(void **)(v85 + OBJC_IVAR___CSDScreenSharingActivityManager_localScreenShareAttributes);
            if (v40)
            {
              uint64_t v67 = objc_opt_self(&OBJC_CLASS___TUCallScreenShareAttributes);
              uint64_t result = swift_dynamicCastObjCClass(v40, v67);
              if (result)
              {
                swift_unknownObjectRetain(v40);
                ScreenSharingActivityManager.broadcastAttributes(_:)();
                return swift_unknownObjectRelease(v40);
              }
            }
          }
        }

        else
        {
          unsigned int v83 = static os_log_type_t.fault.getter();
          uint64_t v68 = sub_1001AFF14((uint64_t *)&unk_100447E30);
          uint64_t v69 = swift_allocObject(v68, 112LL, 7LL);
          *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
          GroupSession.id.getter();
          uint64_t v70 = v88;
          uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
          uint64_t v81 = a1;
          id v82 = v55;
          uint64_t v72 = v86;
          uint64_t v73 = v87;
          v71(v87, v7, v86);
          double v87 = (char *)String.init<A>(reflecting:)(v73, v72);
          uint64_t v75 = v74;
          (*(void (**)(char *, uint64_t))(v70 + 8))(v7, v72);
          *(void *)(v69 + 56) = &type metadata for String;
          unint64_t v76 = sub_1001B2330();
          *(void *)(v69 + 64) = v76;
          *(void *)(v69 + 32) = v87;
          *(void *)(v69 + 40) = v75;
          id v77 = v84;
          v21((uint64_t *)v84, v81, v8);
          uint64_t v78 = String.init<A>(reflecting:)(v77, v8);
          *(void *)(v69 + 96) = &type metadata for String;
          *(void *)(v69 + 104) = v76;
          *(void *)(v69 + 72) = v78;
          *(void *)(v69 + 80) = v79;
          char v80 = v82;
          os_log(_:dso:log:type:_:)( "Screen sharing activity session (id: %@) reached unknown state %@",  65LL,  2LL,  &_mh_execute_header,  v82,  v83,  v69);

          swift_bridgeObjectRelease(v69);
          sub_10023864C();
          return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v13, v8);
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002384E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1001AFF14(&qword_100449FD0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a3 += 16LL;
  swift_beginAccess(a3, v16, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    uint64_t v12 = (void *)result;
    id v13 = [objc_allocWithZone(TUCallScreenShareAttributes) initWithAttributes:a1];
    uint64_t v14 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v10, a2, v14);
    sub_1001A9670((uint64_t)v10, 0LL, 1LL, v14);
    sub_100238BEC((uint64_t)v13, (uint64_t)v10, a4, (uint64_t)v12);

    return sub_100239070((uint64_t)v10);
  }

  return result;
}

uint64_t sub_100238600(char *a1, uint64_t (*a2)(uint64_t, char *))
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = sub_1001AFF14(&qword_10044A008);
  return a2(v4, &a1[*(int *)(v5 + 48)]);
}

void sub_10023864C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR___CSDScreenSharingActivityManager_queue);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    if ((GroupSession.isLocallyInitiated.getter(v14) & 1) != 0)
    {
      id v15 = sub_1001704C4();
      uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
      *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
      GroupSession.id.getter();
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
      uint64_t v18 = String.init<A>(reflecting:)(v5, v1);
      uint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      *(void *)(v17 + 56) = &type metadata for String;
      unint64_t v21 = sub_1001B2330();
      *(void *)(v17 + 64) = v21;
      *(void *)(v17 + 32) = v18;
      *(void *)(v17 + 40) = v20;
      uint64_t v22 = static os_log_type_t.default.getter(v21);
      os_log(_:dso:log:type:_:)( "Transitioned to non-joined from joined state for locally-initiated screen sharing activity, ending (id: %@)",  107LL,  2LL,  &_mh_execute_header,  v15,  v22,  v17);

      swift_bridgeObjectRelease(v17);
      sub_1002373C4();
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100238850(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t ObjectType = swift_getObjectType(a2);
    swift_errorRetain(v3);
    id v5 = sub_1001704C4();
    uint64_t v7 = static os_log_type_t.error.getter(v5, v6);
    uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
    *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    uint64_t v18 = (uint64_t)a2;
    id v10 = a2;
    uint64_t v11 = String.init<A>(reflecting:)(&v18, ObjectType);
    uint64_t v13 = v12;
    *(void *)(v9 + 56) = &type metadata for String;
    unint64_t v14 = sub_1001B2330();
    *(void *)(v9 + 64) = v14;
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    uint64_t v18 = v3;
    swift_errorRetain(v3);
    uint64_t v15 = sub_1001AFF14(&qword_100447B70);
    uint64_t v16 = String.init<A>(reflecting:)(&v18, v15);
    *(void *)(v9 + 96) = &type metadata for String;
    *(void *)(v9 + 104) = v14;
    *(void *)(v9 + 72) = v16;
    *(void *)(v9 + 80) = v17;
    os_log(_:dso:log:type:_:)( "Failed to send attributes %@ for screen sharing activity with error %@",  70LL,  2LL,  &_mh_execute_header,  v5,  v7,  v9);

    swift_bridgeObjectRelease(v9);
    return swift_errorRelease(v3);
  }

  return result;
}

void ScreenSharingActivityManager.init()()
{
}

void sub_100238A60()
{
}

uint64_t type metadata accessor for ScreenSharingActivityManager()
{
  return objc_opt_self(&OBJC_CLASS___CSDScreenSharingActivityManager);
}

uint64_t sub_100238AA8()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100238AC4()
{
  return sub_100236298(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100238ACC()
{
  uint64_t v0 = sub_1001E91E4();
  return swift_deallocObject(v0, v1, v2);
}

unint64_t sub_100238ADC()
{
  unint64_t result = qword_100449FA0;
  if (!qword_100449FA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D67C, &type metadata for ScreenSharingActivityManagerErrors);
    atomic_store(result, (unint64_t *)&qword_100449FA0);
  }

  return result;
}

unint64_t sub_100238B18()
{
  unint64_t result = qword_100449FB0;
  if (!qword_100449FB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DE08, &type metadata for ScreenSharingActivity);
    atomic_store(result, (unint64_t *)&qword_100449FB0);
  }

  return result;
}

void sub_100238B54(uint64_t *a1)
{
}

void sub_100238B60(uint64_t a1)
{
}

void sub_100238B68(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_1001C7514(v4), a1);
  }

  sub_1001AA978();
}

uint64_t sub_100238BA0()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100238BC0(uint64_t a1, uint64_t a2)
{
  return sub_1002384E4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100238BC8()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100238BE4(char *a1)
{
  return sub_100238600(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 16));
}

uint64_t sub_100238BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v68 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v62 - v10;
  uint64_t v12 = type metadata accessor for Participant(0LL);
  uint64_t v65 = *(void *)(v12 - 8);
  uint64_t v66 = v12;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1001AFF14(&qword_100449FD0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1002390B0(a2, (uint64_t)v17);
  int v22 = sub_1001AB0AC((uint64_t)v17, 1LL, v18);
  uint64_t v67 = a1;
  if (v22 == 1)
  {
    sub_100239070((uint64_t)v17);
    id v23 = sub_1001704C4();
    uint64_t v24 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v25 = swift_allocObject(v24, 112LL, 7LL);
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    uint64_t v71 = a1;
    swift_unknownObjectRetain(a1);
    uint64_t v26 = sub_1001AFF14(&qword_10044A000);
    uint64_t v27 = String.init<A>(reflecting:)(&v71, v26);
    uint64_t v29 = v28;
    *(void *)(v25 + 56) = &type metadata for String;
    unint64_t v30 = sub_1001B2330();
    *(void *)(v25 + 64) = v30;
    *(void *)(v25 + 32) = v27;
    *(void *)(v25 + 40) = v29;
    GroupSession.id.getter(v30);
    uint64_t v31 = v68;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v68, v11, v6);
    uint64_t v32 = String.init<A>(reflecting:)(v31, v6);
    uint64_t v34 = v33;
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    *(void *)(v25 + 96) = &type metadata for String;
    *(void *)(v25 + 104) = v30;
    *(void *)(v25 + 72) = v32;
    *(void *)(v25 + 80) = v34;
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    os_log(_:dso:log:type:_:)( "Received initial remote attributes %@ from screen sharing activity (id: %@)",  75LL,  2LL,  &_mh_execute_header,  v23,  v36,  v25);

    swift_bridgeObjectRelease(v25);
  }

  else
  {
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v62 = v21;
    v37(v21, v17, v18);
    id v64 = sub_1001704C4();
    uint64_t v38 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v39 = swift_allocObject(v38, 152LL, 7LL);
    *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
    uint64_t v71 = a1;
    swift_unknownObjectRetain(a1);
    uint64_t v40 = sub_1001AFF14(&qword_10044A000);
    uint64_t v41 = String.init<A>(reflecting:)(&v71, v40);
    uint64_t v63 = v19;
    uint64_t v43 = v42;
    *(void *)(v39 + 56) = &type metadata for String;
    unint64_t v44 = sub_1001B2330();
    *(void *)(v39 + 64) = v44;
    *(void *)(v39 + 32) = v41;
    *(void *)(v39 + 40) = v43;
    uint64_t v45 = GroupSessionMessenger.MessageContext.source.getter();
    Participant.id.getter(v45);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v66);
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v47 = v68;
    v46(v68, v11, v6);
    uint64_t v48 = String.init<A>(reflecting:)(v47, v6);
    uint64_t v50 = v49;
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v52 = v51(v11, v6);
    *(void *)(v39 + 96) = &type metadata for String;
    *(void *)(v39 + 104) = v44;
    *(void *)(v39 + 72) = v48;
    *(void *)(v39 + 80) = v50;
    GroupSession.id.getter(v52);
    v46(v47, v11, v6);
    uint64_t v53 = String.init<A>(reflecting:)(v47, v6);
    uint64_t v55 = v54;
    uint64_t v56 = v51(v11, v6);
    *(void *)(v39 + 136) = &type metadata for String;
    *(void *)(v39 + 144) = v44;
    *(void *)(v39 + 112) = v53;
    *(void *)(v39 + 120) = v55;
    uint64_t v57 = static os_log_type_t.default.getter(v56);
    uint64_t v58 = v64;
    os_log(_:dso:log:type:_:)( "Received remote attributes message %@ from sender %@ for screen sharing activity (id: %@)",  89LL,  2LL,  &_mh_execute_header,  v64,  v57,  v39);

    swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v18);
  }

  uint64_t result = swift_unknownObjectWeakLoadStrong(v70 + OBJC_IVAR___CSDScreenSharingActivityManager_delegate);
  if (result)
  {
    uint64_t v60 = (void *)result;
    char v61 = GroupSession.isLocallyInitiated.getter(result);
    [v60 screenSharingActivityManager:v70 receivedUpdatedRemoteAttributes:v67 isLocallySharing:v61 & 1];
    return swift_unknownObjectRelease(v60);
  }

  return result;
}

uint64_t sub_100239070(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100449FD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1002390B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100449FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002390F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10023911C(uint64_t a1)
{
  return sub_100238850(a1, *(void **)(v1 + 16));
}

uint64_t storeEnumTagSinglePayload for ScreenSharingActivityManagerErrors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100239164 + 4 * byte_10037D530[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100239184 + 4 * byte_10037D535[v4]))();
  }
}

_BYTE *sub_100239164(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_100239184(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10023918C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100239194(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10023919C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1002391A4(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingActivityManagerErrors()
{
  return &type metadata for ScreenSharingActivityManagerErrors;
}

unint64_t sub_1002391C4()
{
  unint64_t result = qword_10044A020;
  if (!qword_10044A020)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037D654, &type metadata for ScreenSharingActivityManagerErrors);
    atomic_store(result, (unint64_t *)&qword_10044A020);
  }

  return result;
}

uint64_t sub_100239220()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_100239244(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_100239264()
{
  return swift_release(v0);
}

id sub_100239270()
{
  return sub_100235798();
}

uint64_t sub_100239288(uint64_t a1)
{
  *(void *)(v3 - 152) = v2;
  return swift_unknownObjectWeakInit(a1 + 16, v1);
}

uint64_t sub_10023929C()
{
  return swift_retain(v0);
}

uint64_t sub_1002392A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v3, v4);
}

  ;
}

uint64_t sub_1002392C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + a1);
  *(void *)(v1 + a1) = 0LL;
  return swift_release(v2);
}

uint64_t sub_1002392D0()
{
  return 0LL;
}

void sub_1002392E4(unint64_t *a1)
{
}

id sub_1002392F0(void *a1)
{
  uint64_t v4 = OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache;
  sub_10023A500();
  id v5 = (char *)sub_10023A544();
  *(void *)(v1 + v4) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v2,  &protocol witness table for String);
  *(void *)&v5[OBJC_IVAR___CSDApplicationInstallationObserver_uninstalledApplicationCache] = &_swiftEmptySetSingleton;
  *(void *)&v5[OBJC_IVAR___CSDApplicationInstallationObserver_queue] = a1;
  id v6 = a1;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for ApplicationInstallationObserver();
  objc_msgSendSuper2(&v9, "init");
  objc_opt_self(&OBJC_CLASS___LSApplicationWorkspace);
  sub_10023A544();
  id result = [v2 defaultWorkspace];
  if (result)
  {
    id v8 = sub_10023A544();
    [v2 addObserver:v8];

    return v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100239430(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B10F0();
  id v8 = *(void **)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_queue);
  *uint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v3);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = (uint64_t *)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache);
    sub_1001B0E80(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache, (uint64_t)v29, 0LL);
    uint64_t v12 = *v11;
    sub_1001EE280();
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = (void *)sub_1001CA024(a1, a2, v12);
    sub_1001B0EB8();
    swift_bridgeObjectRelease(v12);
    if (!v13)
    {
      unint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_uninstalledApplicationCache);
      sub_1001B0E80(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_uninstalledApplicationCache, (uint64_t)v28, 0LL);
      uint64_t v15 = *v14;
      swift_bridgeObjectRetain(*v14);
      sub_10026110C(a1, a2, v15);
      char v17 = v16;
      swift_bridgeObjectRelease(v15);
      if ((v17 & 1) == 0)
      {
        id v18 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
        sub_1001EE280();
        id v19 = sub_10023A390(a1, a2, 1);
        uint64_t v13 = v19;
        if (v19)
        {
          sub_1001B0E80((uint64_t)v11, (uint64_t)v26, 33LL);
          sub_1001EE280();
          id v20 = v13;
          sub_1001FE604((uint64_t)v20, a1, a2, v21, v22, v23, v24, v25, v26[0], v26[1]);
          swift_endAccess(v26);
          sub_1001B0EB8();
        }

        else
        {
          sub_1001B0E80((uint64_t)v14, (uint64_t)v26, 33LL);
          sub_1001EE280();
          sub_10024AA5C(&v27, a1, a2);
          swift_endAccess(v26);
          sub_1001B0EB8();
          return 0LL;
        }
      }
    }

    return (uint64_t)v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100239698(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B10F0();
  id v8 = *(void **)(v2 + OBJC_IVAR___CSDApplicationInstallationObserver_queue);
  *uint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v3);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = (void *)sub_100239430(a1, a2);
    uint64_t v12 = v11;
    if (v11) {

    }
    return v12 != 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1002397D0()
{
}

id sub_100239808()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationInstallationObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ApplicationInstallationObserver()
{
  return objc_opt_self(&OBJC_CLASS___CSDApplicationInstallationObserver);
}

void sub_1002398A0(void *a1, uint64_t a2)
{
  if (qword_100446908 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v3, (uint64_t)qword_100454138);
    uint64_t v4 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v4, v5, v6);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      v52[0] = v10;
      *(_DWORD *)id v9 = 136315138;
      uint64_t v11 = swift_bridgeObjectRetain(a1);
      uint64_t v12 = Array.description.getter(v11, (char *)&type metadata for Any + 8);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease(a1);
      uint64_t v51 = sub_1001D7CF0(v12, v14, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "applicationsDidUninstall: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    uint64_t v15 = (uint64_t)sub_10028F5AC((uint64_t)a1);
    if (!v15)
    {
      unint64_t v30 = (os_log_s *)Logger.logObject.getter(0LL, v16, v17);
      os_log_type_t v32 = static os_log_type_t.error.getter(v30, v31);
      if (os_log_type_enabled(v30, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  v32,  "Failed to convert notifications' appProxies to LSApplicationProxy",  v33,  2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      return;
    }

    uint64_t v18 = v15;
    uint64_t v19 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v19) {
      goto LABEL_27;
    }
LABEL_8:
    v52[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100250050(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }

    uint64_t v20 = 0LL;
    a1 = (void *)v52[0];
    while (v19 != v20)
    {
      if ((v18 & 0xC000000000000001LL) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      }
      else {
        id v21 = *(id *)(v18 + 8 * v20 + 32);
      }
      uint64_t v22 = v21;
      uint64_t v23 = sub_10023A468(v21);
      if (!v24) {
        goto LABEL_36;
      }
      uint64_t v25 = v23;
      uint64_t v26 = v24;

      v52[0] = (uint64_t)a1;
      unint64_t v28 = a1[2];
      unint64_t v27 = a1[3];
      if (v28 >= v27 >> 1)
      {
        sub_100250050(v27 > 1, v28 + 1, 1);
        a1 = (void *)v52[0];
      }

      ++v20;
      a1[2] = v28 + 1;
      uint64_t v29 = &a1[2 * v28];
      v29[4] = v25;
      v29[5] = v26;
      if (v19 == v20)
      {
        swift_bridgeObjectRelease(v18);
        goto LABEL_28;
      }
    }

    __break(1u);
LABEL_23:
    swift_once(&qword_100446908, sub_100258908);
  }

  if (v15 >= 0) {
    v15 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (v19) {
    goto LABEL_8;
  }
LABEL_27:
  swift_bridgeObjectRelease(v18);
  a1 = _swiftEmptyArrayStorage;
LABEL_28:
  uint64_t v34 = a1[2];
  if (v34)
  {
    uint64_t v35 = (uint64_t *)(a2 + OBJC_IVAR___CSDApplicationInstallationObserver_applicationRecordCache);
    uint64_t v36 = a1 + 5;
    do
    {
      uint64_t v37 = *(v36 - 1);
      uint64_t v38 = *v36;
      swift_beginAccess(v35, v52, 33LL, 0LL);
      uint64_t v39 = *v35;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      unint64_t v40 = sub_1001D7094(v37, v38);
      LOBYTE(v37) = v41;
      swift_bridgeObjectRelease(v39);
      if ((v37 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
        uint64_t v51 = *v35;
        uint64_t v43 = v51;
        *uint64_t v35 = 0x8000000000000000LL;
        Swift::Int v44 = *(void *)(v43 + 24);
        sub_1001AFF14(&qword_100448F28);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v44);
        uint64_t v45 = v51;
        swift_bridgeObjectRelease(*(void *)(*(void *)(v51 + 48) + 16 * v40 + 8));
        uint64_t v46 = *(void **)(*(void *)(v45 + 56) + 8 * v40);
        unint64_t v47 = sub_10023A500();
        _NativeDictionary._delete(at:)(v40, v45, &type metadata for String, v47, &protocol witness table for String);
        uint64_t v48 = *v35;
        *uint64_t v35 = v45;

        swift_bridgeObjectRelease(v38);
        uint64_t v49 = v48;
      }

      else
      {
        uint64_t v49 = v38;
      }

      swift_bridgeObjectRelease(v49);
      v36 += 2;
      swift_endAccess(v52);
      --v34;
    }

    while (v34);
  }

  swift_bridgeObjectRelease(a1);
}

uint64_t sub_100239D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_1001B10F0();
  unint64_t v14 = *(void **)&v4[OBJC_IVAR___CSDApplicationInstallationObserver_queue];
  uint64_t v15 = swift_allocObject(a2, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v15 + 24) = v4;
  void aBlock[4] = a3;
  uint64_t v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  aBlock[3] = a4;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v14;
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v4);
  uint64_t v25 = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_1001E8E70();
  uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v20 = sub_1001C94D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v10, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v5, v12);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v5, v23);
  return swift_release(v27);
}

void sub_100239F08(void *a1, uint64_t a2)
{
  if (qword_100446908 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v3, (uint64_t)qword_100454138);
    uint64_t v4 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v4, v5, v6);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      v43[0] = v10;
      *(_DWORD *)id v9 = 136315138;
      uint64_t v11 = swift_bridgeObjectRetain(a1);
      uint64_t v12 = Array.description.getter(v11, (char *)&type metadata for Any + 8);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease(a1);
      uint64_t v42 = sub_1001D7CF0(v12, v14, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "applicationsDidInstall: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    uint64_t v15 = (uint64_t)sub_10028F5AC((uint64_t)a1);
    if (!v15)
    {
      unint64_t v30 = (os_log_s *)Logger.logObject.getter(0LL, v16, v17);
      os_log_type_t v32 = static os_log_type_t.error.getter(v30, v31);
      if (os_log_type_enabled(v30, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  v32,  "Failed to convert notifications' appProxies to LSApplicationProxy",  v33,  2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      return;
    }

    uint64_t v18 = v15;
    uint64_t v19 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v19) {
      goto LABEL_27;
    }
LABEL_8:
    v43[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100250050(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return;
    }

    uint64_t v20 = 0LL;
    a1 = (void *)v43[0];
    while (v19 != v20)
    {
      if ((v18 & 0xC000000000000001LL) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      }
      else {
        id v21 = *(id *)(v18 + 8 * v20 + 32);
      }
      uint64_t v22 = v21;
      uint64_t v23 = sub_10023A468(v21);
      if (!v24) {
        goto LABEL_33;
      }
      uint64_t v25 = v23;
      uint64_t v26 = v24;

      v43[0] = (uint64_t)a1;
      unint64_t v28 = a1[2];
      unint64_t v27 = a1[3];
      if (v28 >= v27 >> 1)
      {
        sub_100250050(v27 > 1, v28 + 1, 1);
        a1 = (void *)v43[0];
      }

      ++v20;
      a1[2] = v28 + 1;
      uint64_t v29 = &a1[2 * v28];
      v29[4] = v25;
      v29[5] = v26;
      if (v19 == v20)
      {
        swift_bridgeObjectRelease(v18);
        goto LABEL_28;
      }
    }

    __break(1u);
LABEL_23:
    swift_once(&qword_100446908, sub_100258908);
  }

  if (v15 >= 0) {
    v15 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (v19) {
    goto LABEL_8;
  }
LABEL_27:
  swift_bridgeObjectRelease(v18);
  a1 = _swiftEmptyArrayStorage;
LABEL_28:
  uint64_t v34 = a1[2];
  if (v34)
  {
    uint64_t v35 = a2 + OBJC_IVAR___CSDApplicationInstallationObserver_uninstalledApplicationCache;
    uint64_t v36 = a1 + 5;
    do
    {
      uint64_t v37 = *(v36 - 1);
      uint64_t v38 = *v36;
      swift_beginAccess(v35, v43, 33LL, 0LL);
      swift_bridgeObjectRetain(v38);
      sub_10028D89C(v37, v38);
      uint64_t v40 = v39;
      swift_endAccess(v43);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v40);
      v36 += 2;
      --v34;
    }

    while (v34);
  }

  swift_bridgeObjectRelease(a1);
}

uint64_t sub_10023A2F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, (char *)&type metadata for Any + 8);
  id v11 = a1;
  sub_100239D4C(v10, a4, a5, a6);

  return swift_bridgeObjectRelease(v10);
}

void sub_10023A370()
{
}

uint64_t sub_10023A378(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10023A388(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_10023A390(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t sub_10023A468(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10023A4CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10023A4F8()
{
}

unint64_t sub_10023A500()
{
  unint64_t result = qword_10044A0D0;
  if (!qword_10044A0D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LSApplicationRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10044A0D0);
  }

  return result;
}

id sub_10023A544()
{
  return v0;
}

id sub_10023A57C()
{
  return [v0 isGuest];
}

id sub_10023A59C()
{
  return [v0 canReceiveRelayedCalls];
}

id sub_10023A604(void *a1)
{
  id v3 = [v1 destinationURIs];
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for String,  &protocol witness table for String);

  sub_1001E7ACC();
  NSString v6 = v5;
  swift_bridgeObjectRelease(v4);
  if (v6[2])
  {
    uint64_t v7 = v6[4];
    uint64_t v8 = v6[5];
    swift_bridgeObjectRetain(v8);
    swift_release(v6);
    id v9 = [a1 service];
    id v10 = sub_10023A724(v7, v8, v9);

    return v10;
  }

  else
  {
    swift_release(v6);
    return 0LL;
  }

id sub_10023A724(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 deviceForFromID:v5];

  return v6;
}

id sub_10023A7B4()
{
  return [(id)objc_opt_self(TUMomentsController) isFaceTimePhotosEnabled];
}

id sub_10023A80C()
{
  return [(id)objc_opt_self(TUMomentsController) isFaceTimePhotosRestricted];
}

id sub_10023A834()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for MomentsControllerLocalCapabilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDMomentsControllerLocalCapabilities);
}

void type metadata accessor for BackgroundBluetoothAccessValidator()
{
}

uint64_t sub_10023A8BC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t sub_10023A8F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

uint64_t sub_10023A8F8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_10023A938(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release(v3);
  return a1;
}

void type metadata accessor for DonatedIntentValidator()
{
}

uint64_t sub_10023A984(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void sub_10023A9B8(uint64_t a1)
{
}

uint64_t sub_10023A9C0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

uint64_t sub_10023A9FC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t sub_10023AA34(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10023AA74(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ApplicationStateValidator()
{
}

uint64_t sub_10023AABC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10023AB08 + 4 * byte_10037D725[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10023AB3C + 4 * asc_10037D720[v4]))();
}

uint64_t sub_10023AB3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023AB44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10023AB4CLL);
  }
  return result;
}

uint64_t sub_10023AB58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10023AB60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10023AB64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023AB6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PrivateAPIValidator()
{
}

void *sub_10023AB84(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_10023AC0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_10023AC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10023AC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10023ACF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10023AD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10023ADB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023ADBC);
}

uint64_t sub_10023ADBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_1001AB0AC(a1, a2, v6);
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 2) {
    return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10023AE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023AE50);
}

uint64_t sub_10023AE50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_1001A9670(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for MediaRemoteStateValidator(uint64_t a1)
{
  uint64_t result = qword_10044A1C8;
  if (!qword_10044A1C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MediaRemoteStateValidator);
  }
  return result;
}

uint64_t sub_10023AEFC(uint64_t a1)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10037D800;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10023AF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1001AFF14(&qword_100447E10);
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v37 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v31 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10023BD54(a1, v41);
  uint64_t v38 = v41[0];
  int64_t v39 = v41[3];
  unint64_t v17 = v41[4];
  uint64_t v32 = a2;
  uint64_t v18 = (void (**)(uint64_t))(a2 + qword_10044B878);
  uint64_t v35 = v41[1];
  int64_t v36 = (unint64_t)(v41[2] + 64LL) >> 6;
  uint64_t v33 = v5;
  uint64_t v34 = v4;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v39 << 6);
      goto LABEL_20;
    }

    int64_t v21 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      break;
    }
    if (v21 >= v36) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v21);
    int64_t v23 = v39 + 1;
    if (!v22)
    {
      int64_t v23 = v39 + 2;
      if (v39 + 2 >= v36) {
        goto LABEL_27;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v39 + 3;
        if (v39 + 3 >= v36) {
          goto LABEL_27;
        }
        unint64_t v22 = *(void *)(v35 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v39 + 4;
          if (v39 + 4 >= v36) {
            goto LABEL_27;
          }
          unint64_t v22 = *(void *)(v35 + 8 * v23);
          if (!v22)
          {
            int64_t v23 = v39 + 5;
            if (v39 + 5 >= v36) {
              goto LABEL_27;
            }
            unint64_t v22 = *(void *)(v35 + 8 * v23);
            if (!v22)
            {
              int64_t v24 = v39 + 6;
              while (v24 < v36)
              {
                unint64_t v22 = *(void *)(v35 + 8 * v24++);
                if (v22)
                {
                  int64_t v23 = v24 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_10023B2C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_100250050(0, v1, 0);
    uint64_t v4 = a1 + 32;
    do
    {
      sub_1001B22C0(v4, (uint64_t)v30);
      sub_1001BA03C((uint64_t)v30, (uint64_t)&v26);
      uint64_t v5 = v28;
      uint64_t v6 = sub_1001B204C(&v26, v28);
      uint64_t DynamicType = swift_getDynamicType(v6, v5, 1LL);
      uint64_t v8 = v29;
      sub_1001B0438(&v26);
      v25[0] = DynamicType;
      v25[1] = v8;
      uint64_t v9 = sub_1001AFF14(&qword_10044A210);
      uint64_t v10 = String.init<A>(describing:)(v25, v9);
      uint64_t v12 = v11;
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v26 = v10;
      uint64_t v27 = v12;
      v13._countAndFlagsBits = 8250LL;
      v13._object = (void *)0xE200000000000000LL;
      String.append(_:)(v13);
      LOBYTE(v25[0]) = v31;
      v14._countAndFlagsBits = String.init<A>(reflecting:)(v25, &type metadata for Bool);
      object = v14._object;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(object);
      uint64_t v16 = v26;
      uint64_t v17 = v27;
      sub_1001B22FC(v30);
      uint64_t v2 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      {
        sub_100250050(0, v2[2] + 1LL, 1);
        uint64_t v2 = v32;
      }

      unint64_t v19 = v2[2];
      unint64_t v18 = v2[3];
      if (v19 >= v18 >> 1)
      {
        sub_100250050(v18 > 1, v19 + 1, 1);
        uint64_t v2 = v32;
      }

      v2[2] = v19 + 1;
      unint64_t v20 = &v2[2 * v19];
      v20[4] = v16;
      void v20[5] = v17;
      v4 += 48LL;
      --v1;
    }

    while (v1);
  }

  v30[0] = v2;
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  unint64_t v22 = sub_1001B04C0();
  uint64_t v23 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v21, v22);
  swift_bridgeObjectRelease(v2);
  return v23;
}

uint64_t sub_10023B4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  uint64_t v9 = sub_1001B236C((void *)a4);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v9, v4, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, a2, a3);
  *(_BYTE *)(a4 + 40) = result & 1;
  return result;
}

id sub_10023B52C(void *a1)
{
  return [a1 isPermittedToUsePrivateAPI];
}

uint64_t sub_10023B548()
{
  return *v0;
}

id sub_10023B550(void *a1)
{
  return sub_10023B52C(a1);
}

BOOL sub_10023B558(void *a1)
{
  uint64_t v1 = sub_1001E72E8(a1);
  uint64_t v2 = sub_10023BD8C(v1);
  swift_bridgeObjectRelease(v1);
  unint64_t v3 = v2[2];
  swift_release(v2);
  return v3 != 0;
}

BOOL sub_10023B5B4(void *a1)
{
  return sub_10023B558(a1);
}

uint64_t sub_10023B5C0(void *a1)
{
  id v2 = [a1 identifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  LOBYTE(v2) = sub_10023BA14(v3, v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v7 = sub_10023A468(a1);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  char v10 = sub_10023BA14(v7, v8);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10023B668(void *a1)
{
  return sub_10023B5C0(a1);
}

id sub_10023B674(void *a1)
{
  return [a1 isPermittedToUseBluetoothAccessories];
}

id sub_10023B690(void *a1)
{
  return sub_10023B674(a1);
}

uint64_t sub_10023B698(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_10023B6A4()
{
  uint64_t v1 = sub_1001AFF14(&qword_100447E10);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1001AFF14(&qword_100447588);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)(v0 + 16);
  swift_beginAccess(v0 + 16, v49, 0LL, 0LL);
  uint64_t v8 = *(void *)(v0 + 16);
  swift_retain(v0);
  uint64_t v9 = swift_bridgeObjectRetain(v8);
  uint64_t v10 = sub_10023AF6C(v9, v0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v45 = v2;
  if (v12)
  {
    uint64_t v43 = (void *)(v0 + 16);
    v48[0] = _swiftEmptyArrayStorage;
    sub_100250050(0, v12, 0);
    uint64_t v13 = *(unsigned __int8 *)(v2 + 80);
    uint64_t v42 = v11;
    uint64_t v14 = v11 + ((v13 + 32) & ~v13);
    uint64_t v15 = *(void *)(v2 + 72);
    uint64_t v16 = (void *)v48[0];
    uint64_t v44 = v15;
    do
    {
      sub_10023C780(v14, (uint64_t)v4);
      uint64_t v17 = v1;
      unint64_t v18 = &v4[*(int *)(v1 + 44)];
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *((void *)v18 + 1);
      swift_bridgeObjectRetain(v20);
      sub_1001BB478((uint64_t)v4, &qword_100447E10);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_100250050(0, v16[2] + 1LL, 1);
        uint64_t v15 = v44;
        uint64_t v16 = (void *)v48[0];
      }

      unint64_t v22 = v16[2];
      unint64_t v21 = v16[3];
      if (v22 >= v21 >> 1)
      {
        sub_100250050(v21 > 1, v22 + 1, 1);
        uint64_t v15 = v44;
        uint64_t v16 = (void *)v48[0];
      }

      v16[2] = v22 + 1;
      uint64_t v23 = &v16[2 * v22];
      v23[4] = v19;
      v23[5] = v20;
      v14 += v15;
      --v12;
      uint64_t v1 = v17;
    }

    while (v12);
    swift_bridgeObjectRelease(v42);
    uint64_t v7 = v43;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  uint64_t v24 = v16[2];
  uint64_t v25 = (uint64_t)v46;
  if (v24)
  {
    swift_bridgeObjectRetain(v16);
    uint64_t v26 = v16 + 5;
    do
    {
      uint64_t v27 = *(v26 - 1);
      uint64_t v28 = *v26;
      swift_beginAccess(v7, v48, 33LL, 0LL);
      uint64_t v29 = *v7;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      unint64_t v30 = sub_1001D7094(v27, v28);
      char v32 = v31;
      swift_bridgeObjectRelease(v29);
      if ((v32 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
        uint64_t v47 = *v7;
        uint64_t v34 = v47;
        *uint64_t v7 = 0x8000000000000000LL;
        Swift::Int v35 = *(void *)(v34 + 24);
        sub_1001AFF14(&qword_100448E90);
        Swift::Int v36 = v35;
        uint64_t v25 = (uint64_t)v46;
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v36);
        uint64_t v37 = v47;
        swift_bridgeObjectRelease(*(void *)(*(void *)(v47 + 48) + 16 * v30 + 8));
        sub_10023C6F8(*(void *)(v37 + 56) + *(void *)(v45 + 72) * v30, v25);
        _NativeDictionary._delete(at:)(v30, v37, &type metadata for String, v1, &protocol witness table for String);
        uint64_t v38 = *v7;
        *uint64_t v7 = v37;
        swift_bridgeObjectRelease(v38);
        uint64_t v39 = 0LL;
      }

      else
      {
        uint64_t v39 = 1LL;
      }

      v26 += 2;
      sub_1001A9670(v25, v39, 1LL, v1);
      sub_1001BB478(v25, &qword_100447588);
      swift_endAccess(v48);
      swift_bridgeObjectRelease(v28);
      --v24;
    }

    while (v24);
    swift_bridgeObjectRelease(v16);
  }

  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_10023BA14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v28 = a2;
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1001AFF14(&qword_100447588);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = sub_1001AFF14(&qword_100447E10);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v3 + 16, v30, 0LL, 0LL);
  uint64_t v17 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain(v17);
  uint64_t v27 = a1;
  uint64_t v18 = a1;
  uint64_t v19 = v28;
  sub_1001CA318(v18, v28, v17, (uint64_t)v13);
  swift_bridgeObjectRelease(v17);
  if (sub_1001AB0AC((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_1001BB478((uint64_t)v13, &qword_100447588);
LABEL_5:
    sub_1001A9670((uint64_t)v11, 1LL, 1LL, v14);
    swift_beginAccess(v3 + 16, v29, 33LL, 0LL);
    swift_bridgeObjectRetain(v19);
    sub_1001FC16C((uint64_t)v11);
    swift_endAccess(v29);
    uint64_t v23 = 0LL;
    goto LABEL_6;
  }

  uint64_t v20 = sub_10023C6F8((uint64_t)v13, (uint64_t)v16);
  (*(void (**)(uint64_t))(v3 + qword_10044B878))(v20);
  unint64_t v21 = sub_10023C740();
  char v22 = dispatch thunk of static Comparable.< infix(_:_:)(v7, v16, v5, v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  sub_1001BB478((uint64_t)v16, &qword_100447E10);
  if ((v22 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v23 = 1LL;
LABEL_6:
  sub_10023B6A4();
  return v23;
}

void sub_10023BC70(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10023CAB4();
    sub_10023CA9C( (uint64_t)"Fatal error",  v1,  v2,  (uint64_t)"Can't construct Array with count < 0",  v3,  v4,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String) + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    }
    sub_10004351C();
  }

void sub_10023BCDC(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10023CAB4();
    sub_10023CA9C( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_1001AFF14(&qword_10044A218);
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    }

    sub_10004351C();
  }

uint64_t sub_10023BD54@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

unint64_t *sub_10023BD8C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v8 = (unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_10024772C(0LL, v6, v8);
    uint64_t v9 = sub_10023BEE8(v8, v6, (uint64_t)v2);
    if (v1) {
      swift_willThrow(v9);
    }
    else {
      return v9;
    }
  }

  else
  {
    uint64_t v10 = (unint64_t *)swift_slowAlloc(v7, -1LL);
    sub_10024772C(0LL, v6, v10);
    uint64_t v2 = sub_10023BEE8(v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v2;
}

unint64_t *sub_10023BEE8(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }

    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v13 >= v10) {
      return (unint64_t *)sub_10023C258(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_10023C258(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_10023C258(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }

void sub_10023C030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  sub_10023CB28();
  if (v7)
  {
    swift_retain(v3);
    return;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v5;
  sub_1001AFF14((uint64_t *)&unk_100448ED0);
  uint64_t v10 = sub_10023CACC();
  uint64_t v11 = v10;
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  if (v8 < 1) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = *v9;
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      sub_10023CAEC();
      uint64_t v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }

    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_40;
    }
    if (v17 >= v35) {
      return;
    }
    ++v13;
    if (!v34[v17])
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v35) {
        return;
      }
      if (!v34[v13])
      {
        uint64_t v13 = v17 + 2;
        if (v17 + 2 >= v35) {
          return;
        }
        if (!v34[v13]) {
          break;
        }
      }
    }

uint64_t sub_10023C258(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_1001AFF14(&qword_10044A208);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v9 = result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v29[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v29[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v29[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v29[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v17;
          }
        }
      }

void sub_10023C4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  sub_10023CB28();
  if (v7)
  {
    swift_retain(v3);
    return;
  }

  uint64_t v8 = v6;
  uint64_t v9 = v5;
  sub_1001AFF14((uint64_t *)&unk_10044CA40);
  uint64_t v10 = sub_10023CACC();
  uint64_t v11 = v10;
  uint64_t v31 = v9;
  if (v8 < 1) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = *v9;
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      sub_10023CAEC();
      uint64_t v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }

    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_40;
    }
    if (v17 >= v8) {
      return;
    }
    ++v13;
    if (!v31[v17])
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v8) {
        return;
      }
      if (!v31[v13])
      {
        uint64_t v13 = v17 + 2;
        if (v17 + 2 >= v8) {
          return;
        }
        if (!v31[v13]) {
          break;
        }
      }
    }

uint64_t sub_10023C6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10023C740()
{
  unint64_t result = qword_10044A200;
  if (!qword_10044A200)
  {
    uint64_t v1 = type metadata accessor for DispatchTime(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchTime, v1);
    atomic_store(result, (unint64_t *)&qword_10044A200);
  }

  return result;
}

uint64_t sub_10023C780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023C7CC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sub_10023C810(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

void *sub_10023C840(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 sub_10023C9A8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t sub_10023C9BC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sub_10023C9FC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10023CA3C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for UserIntentValidationResult()
{
}

uint64_t sub_10023CA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

  ;
}

uint64_t sub_10023CACC()
{
  return static _DictionaryStorage.allocate(capacity:)(v0);
}

  ;
}

  ;
}

void sub_10023CB00()
{
}

  ;
}

  ;
}

uint64_t sub_10023CB5C()
{
  return *(void *)(v0 + OBJC_IVAR___CSDMomentsNotification_streamToken);
}

uint64_t sub_10023CBA4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDMomentsNotification_requesterID);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___CSDMomentsNotification_requesterID + 8));
  return v1;
}

id sub_10023CBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  *(void *)&v3[OBJC_IVAR___CSDMomentsNotification_streamToken] = a1;
  int v8 = &v3[OBJC_IVAR___CSDMomentsNotification_requesterID];
  *(void *)int v8 = a2;
  *((void *)v8 + 1) = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void sub_10023CC88()
{
}

uint64_t type metadata accessor for MomentsNotification()
{
  return objc_opt_self(&OBJC_CLASS___CSDMomentsNotification);
}

void sub_10023CCF4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
    sub_10022B8BC(&qword_10044A3F8, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v47, v3, v4, v5);
    uint64_t v1 = v47[0];
    uint64_t v44 = v47[1];
    uint64_t v7 = v47[2];
    int64_t v8 = v47[3];
    unint64_t v9 = v47[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v44 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t v6 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v8 = 0LL;
  }

  uint64_t v42 = v7;
  int64_t v43 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()(v6);
    if (!v16) {
      goto LABEL_47;
    }
    uint64_t v17 = v16;
    uint64_t v45 = v16;
    uint64_t v18 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v46, &v45, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
    id v19 = v46;
    swift_unknownObjectRelease(v17);
    int64_t v15 = v8;
    uint64_t v13 = v9;
    if (!v19) {
      goto LABEL_47;
    }
LABEL_29:
    NSString v22 = objc_msgSend(v19, "value", v42);
    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v24 = v23;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
    }

    id v25 = [(id)objc_opt_self(TUHandle) normalizedHandleWithDestinationID:v22];

    if (!v25)
    {

      goto LABEL_40;
    }

    id v26 = v25;
    sub_10024D128(v26, (SEL *)&selRef_normalizedValue);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v27);
    if (!v28 || [v26 type] == (id)1)
    {

      goto LABEL_40;
    }

    id v29 = v26;
    sub_10024B2FC(&v46, v29, (uint64_t)&qword_10044A410, (uint64_t)&OBJC_CLASS___TUHandle_ptr, (uint64_t)&qword_10044A430);

    id v30 = [objc_allocWithZone(TUConversationMember) initWithHandle:v29];
    int64_t v8 = v15;
    unint64_t v9 = v13;
    if (v30)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      unint64_t v32 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v31 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v32 >= v31 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
      }
      uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      uint64_t v6 = (void *)specialized Array._endMutation()(v33, v34, v35, v36, v37, v38, v39, v40);
LABEL_40:
      int64_t v8 = v15;
      unint64_t v9 = v13;
    }
  }

  if (v9)
  {
    uint64_t v13 = (v9 - 1) & v9;
    unint64_t v14 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v15 = v8;
LABEL_28:
    id v19 = *(id *)(*(void *)(v1 + 48) + 8 * v14);
    if (!v19) {
      goto LABEL_47;
    }
    goto LABEL_29;
  }

  int64_t v15 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v15 >= v43) {
      goto LABEL_47;
    }
    unint64_t v20 = *(void *)(v44 + 8 * v15);
    if (!v20)
    {
      int64_t v21 = v8 + 2;
      if (v8 + 2 >= v43) {
        goto LABEL_47;
      }
      unint64_t v20 = *(void *)(v44 + 8 * v21);
      if (v20) {
        goto LABEL_26;
      }
      int64_t v21 = v8 + 3;
      if (v8 + 3 >= v43) {
        goto LABEL_47;
      }
      unint64_t v20 = *(void *)(v44 + 8 * v21);
      if (v20) {
        goto LABEL_26;
      }
      int64_t v21 = v8 + 4;
      if (v8 + 4 >= v43) {
        goto LABEL_47;
      }
      unint64_t v20 = *(void *)(v44 + 8 * v21);
      if (v20)
      {
LABEL_26:
        int64_t v15 = v21;
      }

      else
      {
        int64_t v15 = v8 + 5;
        if (v8 + 5 >= v43) {
          goto LABEL_47;
        }
        unint64_t v20 = *(void *)(v44 + 8 * v15);
        if (!v20)
        {
          int64_t v41 = v8 + 6;
          while (v41 < v43)
          {
            unint64_t v20 = *(void *)(v44 + 8 * v41++);
            if (v20)
            {
              int64_t v15 = v41 - 1;
              goto LABEL_27;
            }
          }

BOOL sub_10023D150(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_10023D17C(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_10023D18C(uint64_t result)
{
  *v1 &= result;
  return result;
}

void sub_10023D19C(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    int64_t v8 = Set.Iterator.init(_cocoa:)(v29, v5, v6, v7);
    uint64_t v3 = v29[0];
    uint64_t v27 = v29[1];
    uint64_t v9 = v29[2];
    int64_t v10 = v29[3];
    unint64_t v11 = v29[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    int64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  int64_t v26 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    int64_t v15 = v10;
    if ((v3 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v18 = __CocoaSet.Iterator.next()(v8);
    uint64_t v19 = v18;
    if (!v18) {
      goto LABEL_35;
    }
    uint64_t v28 = v18;
    uint64_t v20 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    id v21 = v30;
    swift_unknownObjectRelease(v19);
    if (!v21) {
      goto LABEL_35;
    }
LABEL_34:
    unsigned int v25 = [v21 isEquivalentToHandle:a2];

    if (v25) {
      goto LABEL_35;
    }
  }

  if (v11)
  {
    unint64_t v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_33:
    id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    if (!v21) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  int64_t v22 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v22 >= v26) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v15 + 2;
      if (v15 + 2 >= v26) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v10);
      if (!v23)
      {
        int64_t v10 = v15 + 3;
        if (v15 + 3 >= v26) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v27 + 8 * v10);
        if (!v23)
        {
          int64_t v10 = v15 + 4;
          if (v15 + 4 >= v26) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v27 + 8 * v10);
          if (!v23)
          {
            int64_t v10 = v15 + 5;
            if (v15 + 5 >= v26) {
              goto LABEL_35;
            }
            unint64_t v23 = *(void *)(v27 + 8 * v10);
            if (!v23)
            {
              int64_t v24 = v15 + 6;
              while (v24 < v26)
              {
                unint64_t v23 = *(void *)(v27 + 8 * v24++);
                if (v23)
                {
                  int64_t v10 = v24 - 1;
                  goto LABEL_32;
                }
              }

uint64_t sub_10023D49C(uint64_t a1, char *a2)
{
  uint64_t v3 = a2;
  uint64_t v5 = _swiftEmptyArrayStorage;
  int64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (uint64_t *)&a2[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers];
  uint64_t result = swift_beginAccess( &a2[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers],  v40,  0LL,  0LL);
  uint64_t v33 = v6;
  if (v6)
  {
    v32[0] = v3;
    v32[1] = v2;
    unint64_t v9 = 0LL;
    uint64_t v10 = a1 + 32;
    uint64_t v11 = v33;
    while (v9 < *(void *)(a1 + 16))
    {
      sub_1001F8064(v10, (uint64_t)&v37);
      uint64_t v12 = *v7;
      uint64_t v13 = v38;
      uint64_t v14 = v39;
      sub_1001B204C(&v37, v38);
      int64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
      swift_bridgeObjectRetain(v12);
      uint64_t v16 = v15(v13, v14);
      uint64_t v18 = v17;
      sub_10026110C(v16, v17, v12);
      LOBYTE(v13) = v19;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v12);
      sub_1001F8064((uint64_t)&v37, (uint64_t)v34);
      if ((v13 & 1) != 0
        && (uint64_t v20 = v35,
            uint64_t v21 = v36,
            sub_1001B204C(v34, v35),
            (int64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21)) != 0LL))
      {

        sub_1001B0438(v34);
        sub_1001D700C(&v37, (uint64_t)v34);
        unint64_t v23 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          sub_100250138(0LL, v23[2] + 1LL, 1);
          unint64_t v23 = v41;
        }

        unint64_t v25 = v23[2];
        unint64_t v24 = v23[3];
        if (v25 >= v24 >> 1) {
          sub_100250138((char *)(v24 > 1), v25 + 1, 1);
        }
        uint64_t v26 = v35;
        uint64_t v27 = v36;
        uint64_t v28 = sub_1001BA188((uint64_t)v34, v35);
        __chkstk_darwin(v28);
        id v30 = (char *)v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v31 + 16))(v30);
        sub_10024D4FC(v25, (uint64_t)v30, (uint64_t *)&v41, v26, v27);
        uint64_t result = sub_1001B0438(v34);
        uint64_t v11 = v33;
      }

      else
      {
        sub_1001B0438(v34);
        uint64_t result = sub_1001B0438(&v37);
      }

      ++v9;
      v10 += 40LL;
      if (v11 == v9)
      {
        uint64_t v5 = v41;
        uint64_t v3 = (void *)v32[0];
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_14:

    swift_bridgeObjectRelease(a1);
    return (uint64_t)v5;
  }

  return result;
}

uint64_t sub_10023D700(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    int64_t v8 = (uint64_t (*)(__int128 *))result;
    unint64_t v9 = 0LL;
    uint64_t v10 = a3 + 32;
    unint64_t v23 = (uint64_t (*)(__int128 *))result;
    uint64_t v24 = a3;
    uint64_t v22 = v6;
    while (v9 < *(void *)(v4 + 16))
    {
      sub_1001F8064(v10, (uint64_t)v28);
      uint64_t v5 = a2;
      char v11 = v8(v28);
      if (v3)
      {
        sub_1001B0438(v28);
        swift_bridgeObjectRelease(v4);
        swift_release(v29);
        return (uint64_t)v5;
      }

      if ((v11 & 1) != 0)
      {
        sub_1001D700C(v28, (uint64_t)v25);
        uint64_t v12 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_100250138(0LL, v12[2] + 1LL, 1);
          uint64_t v12 = v29;
        }

        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          sub_100250138((char *)(v13 > 1), v14 + 1, 1);
        }
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        uint64_t v17 = sub_1001BA188((uint64_t)v25, v26);
        __chkstk_darwin(v17);
        char v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v20 + 16))(v19);
        sub_10024D4FC(v14, (uint64_t)v19, (uint64_t *)&v29, v15, v16);
        uint64_t result = sub_1001B0438(v25);
        int64_t v8 = v23;
        uint64_t v4 = v24;
        uint64_t v6 = v22;
      }

      else
      {
        uint64_t result = sub_1001B0438(v28);
      }

      ++v9;
      v10 += 40LL;
      if (v6 == v9)
      {
        uint64_t v5 = v29;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return (uint64_t)v5;
  }

  return result;
}

id sub_10023D8E4(uint64_t a1)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  id v3 = [(id)swift_getObjCClassFromMetadata(v1) andPredicateWithSubpredicates:isa];

  return v3;
}

void sub_10023D95C()
{
}

void sub_10023D970()
{
  id v3 = v2;
  uint64_t v4 = v0;
  if ((v0 & 0xC000000000000001LL) != 0)
  {
    if (v0 >= 0) {
      v0 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v5 = __CocoaSet.startIndex.getter(v0);
    uint64_t v7 = v6;
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v5 = v1(v0);
    uint64_t v7 = v9;
    uint64_t v8 = v10 & 1;
  }

  uint64_t v11 = sub_10024D1E4(v4);
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  char v16 = sub_10024D234(v5, v7, v8, v11, v12, v14 & 1);
  sub_1001D8CA0(v11, v13, v15);
  if ((v16 & 1) == 0) {
    v3(v5, v7, v8, v4);
  }
  sub_10024D8BC();
  sub_1001B0FF8();
}

double sub_10023DA44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    sub_1001F8064(a1 + 32, a2);
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + ++*(void *)(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_10023DA7C(uint64_t a1)
{
  uint64_t result = sub_10024D32C(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  else {
    return sub_10024D2B0(result, v3, 0LL, a1);
  }
}

void sub_10023DAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  NSString v9 = String._bridgeToObjectiveC()();
  uint64_t v10 = swift_bridgeObjectRelease(a2);
  sub_1001B4C00(v10, (unint64_t *)&unk_100447E40, &OBJC_CLASS___UNNotificationAction_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001D9020();
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  sub_1001B0F5C();
  id v13 =  [(id)swift_getObjCClassFromMetadata(v6) categoryWithIdentifier:v9 actions:isa intentIdentifiers:v12 options:a5];
  sub_1001D9294();

  sub_1001B0F4C();
}

void sub_10023DB9C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  sub_1001B0F5C();
  id v8 = [(id)swift_getObjCClassFromMetadata(v4) requestWithIdentifier:v7 content:a3 trigger:a4];
  sub_10024DA3C();

  sub_1001B0F4C();
}

BOOL sub_10023DC08(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v1 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v1 = *(void *)(a1 + 16);
  }

  return v1 == 0;
}

id sub_10023DC40(uint64_t a1)
{
  return [v1 callCountWithPredicate:a1];
}

void sub_10023DC54(uint64_t a1)
{
  id v2 = sub_10024D9C4(v1, "callsWithPredicate:limit:offset:batchSize:", a1, 0LL);
  uint64_t v3 = sub_1001B4C00((uint64_t)v2, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
  sub_10024DAA8(v3);
  sub_1001D9294();
  sub_1001E5E30((unint64_t)v1);
  sub_1001AA9C8();
  sub_1001AA978();
}

void sub_10023DCBC(uint64_t a1, uint64_t a2)
{
  id v3 = sub_10024D9C4(v2, "callsWithPredicate:limit:offset:batchSize:", a1, a2);
  uint64_t v4 = sub_1001B4C00((uint64_t)v3, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
  sub_10024DAA8(v4);
  sub_1001D9294();
  sub_1001E5E30((unint64_t)v2);
  sub_1001AA9C8();
  sub_1001AA978();
}

id sub_10023DD24(uint64_t a1)
{
  return sub_10023DC40(a1);
}

void sub_10023DD44(uint64_t a1)
{
}

void sub_10023DD64(uint64_t a1, uint64_t a2)
{
}

void sub_10023DD84()
{
  id v1 = [v0 uniqueId];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  sub_10010B978();
}

id sub_10023DDD0(void *a1)
{
  return [a1 providerForRecentCall:v1];
}

void sub_10023DDF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12)
{
  uint64_t v13 = sub_10024D7E4();
  if (!v13) {
    goto LABEL_23;
  }
  if ((v13 & 0xC000000000000001LL) == 0)
  {
    sub_10024C678(v13, (uint64_t)sub_10024C78C);
    goto LABEL_23;
  }

  sub_10024D7A4(v13);
  uint64_t v14 = sub_10024DA44();
  if (!v14)
  {
LABEL_20:
    sub_100207134();
LABEL_23:
    sub_10024D5EC();
    return;
  }

  uint64_t v15 = sub_1001B4C00(v14, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
  while (1)
  {
    uint64_t v16 = sub_10024D6E8(v15);
    id v17 = sub_1001DCF70(v16, "value");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    sub_10024D968();
    swift_bridgeObjectRelease(v12);
    sub_10024D93C();
    if (v19)
    {
      id v20 = sub_1001DCF70(v18, "type");
    }

LABEL_19:
    uint64_t v15 = __CocoaSet.Iterator.next()(v23);
    if (!v15) {
      goto LABEL_20;
    }
  }

  if (*(void *)(a12 + 24) <= *(void *)(a12 + 16)) {
    sub_10024A5EC();
  }
  sub_10024D924();
  sub_10024D6B4();
  if (!v21)
  {
    sub_10024D77C();
LABEL_18:
    sub_10024D608(v22);
    goto LABEL_19;
  }

  sub_10024D8F4();
  while (v25 + 1 != v26 || (v24 & 1) == 0)
  {
    sub_10024D7EC();
    if (!v21)
    {
      sub_10024D790();
      goto LABEL_18;
    }
  }

  __break(1u);
}

void sub_10023DF78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12)
{
  uint64_t v13 = sub_10024D7E4();
  if (!v13) {
    goto LABEL_22;
  }
  if ((v13 & 0xC000000000000001LL) == 0)
  {
    sub_10024C678(v13, (uint64_t)sub_10024C9C8);
    goto LABEL_22;
  }

  sub_10024D7A4(v13);
  uint64_t v14 = sub_10024DA44();
  if (!v14)
  {
LABEL_19:
    sub_100207134();
LABEL_22:
    sub_10024D5EC();
    return;
  }

  uint64_t v15 = sub_1001B4C00(v14, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
  while (1)
  {
    uint64_t v16 = sub_10024D6E8(v15);
    id v17 = sub_1001DCF70(v16, "value");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    sub_10024D968();
    swift_bridgeObjectRelease(v12);
    sub_10024D93C();
    if (v19)
    {
      id v20 = sub_1001DCF70(v18, "value");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v20);

      NSString v21 = String._bridgeToObjectiveC()();
      sub_1001E43E0();
      unsigned __int8 v22 = [v21 destinationIdIsTemporary];

      if ((v22 & 1) == 0) {
        break;
      }
    }

LABEL_18:
    uint64_t v15 = __CocoaSet.Iterator.next()(v23);
    if (!v15) {
      goto LABEL_19;
    }
  }

  if (*(void *)(a12 + 24) <= *(void *)(a12 + 16)) {
    sub_10024A5EC();
  }
  sub_10024D924();
  sub_10024D6B4();
  if (!v24)
  {
    sub_10024D77C();
LABEL_17:
    sub_10024D608(v25);
    goto LABEL_18;
  }

  sub_10024D8F4();
  while (v27 + 1 != v28 || (v26 & 1) == 0)
  {
    sub_10024D7EC();
    if (!v24)
    {
      sub_10024D790();
      goto LABEL_17;
    }
  }

  __break(1u);
}

uint64_t sub_10023E130@<X0>(uint64_t a1@<X8>)
{
  return sub_10023E430( (const char **)&selRef_date,  (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:),  (uint64_t (*)(void))&type metadata accessor for Date,  a1);
}

void sub_10023E168()
{
}

id sub_10023E188()
{
  return sub_10023E1A8();
}

id sub_10023E1A8()
{
  return [v0 interaction];
}

unint64_t sub_10023E1CC()
{
  return (unint64_t)sub_10023E1F0() & 1;
}

id sub_10023E1F0()
{
  if ((sub_1002473C4() & 1) != 0) {
    return [v0 callerIdIsBlocked];
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10023E220()
{
  return sub_10023E240();
}

uint64_t sub_10023E240()
{
  id v1 = [v0 notificationThreadIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void sub_10023E294()
{
}

void sub_10023E2B4()
{
}

void sub_10023E2D4()
{
}

void sub_10023E2F4()
{
}

unint64_t sub_10023E314()
{
  return (unint64_t)sub_10023E338() & 1;
}

id sub_10023E338()
{
  return [v0 isJunk];
}

void sub_10023E358()
{
}

void sub_10023E378()
{
}

void sub_10023E398( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10023E3B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_10023E3D8()
{
  return sub_10023E12C();
}

uint64_t sub_10023E3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10023E430( (const char **)&selRef_participantGroupUUID,  (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:),  (uint64_t (*)(void))&type metadata accessor for UUID,  a1);
}

uint64_t sub_10023E430@<X0>( const char **a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  id v7 = sub_1001DCF70((uint64_t)a1, *a1);
  if (v7)
  {
    uint64_t v8 = v7;
    a2();

    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  uint64_t v10 = a3(0LL);
  return sub_1001D8F30(a4, v9, 1LL, v10);
}

id sub_10023E49C()
{
  return sub_10023E4BC();
}

id sub_10023E4BC()
{
  return [v0 mediaType];
}

id sub_10023E4CC(void *a1)
{
  return sub_10023DDD0(a1);
}

uint64_t sub_10023E4EC()
{
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

void sub_10023E520()
{
  id v1 = [v0 filteredOutReason];
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 intValue];
  }

  sub_1001D9410();
}

void sub_10023E590()
{
}

void sub_10023E5B0()
{
}

void sub_10023E5D0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCD18, v2);
  sub_1001B0EB8();
  sub_1001AA978();
}

BOOL sub_10023E610()
{
  unint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  id v1 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, 0LL);

  return AppBooleanValue == 0;
}

uint64_t sub_10023E698@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType);
  uint64_t v4 = type metadata accessor for BadgeCountCategory(0LL);
  uint64_t v5 = (unsigned int *)&enum case for BadgeCountCategory.missedTelephonyCalls(_:);
  if (!v3) {
    uint64_t v5 = (unsigned int *)&enum case for BadgeCountCategory.missedFaceTimeCalls(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104LL))(a1, *v5, v4);
  return sub_1001D8F30(a1, 0LL, 1LL, v4);
}

id sub_10023E70C()
{
  return [(id)objc_opt_self(TUCallCapabilities) supportsDisplayingFaceTimeAudioCalls];
}

void sub_10023E734()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001D91F4();
  URL._bridgeToObjectiveC()(v5);
  id v7 = v6;
  id v28 = 0LL;
  char v8 = TUOpenURLWithError(v6, 0LL, 1LL, &v28);

  id v31 = v28;
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = qword_100446950;
    id v10 = v28;
    if (v9 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v11 = sub_1001B0E98();
    sub_1001B0D98(v11, (uint64_t)qword_100454210);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v0, v2, v3);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v12, v13, v14);
    os_log_type_t v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = sub_1001B0E78(22LL);
      uint64_t v18 = (void *)sub_1001B0E78(8LL);
      uint64_t v19 = sub_1001B0E78(32LL);
      uint64_t v30 = v19;
      *(_DWORD *)uint64_t v17 = 136315394;
      sub_1001A9F18( (unint64_t *)&qword_100447E00,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v3, v20);
      id v28 = (id)sub_1001D7CF0(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 4, v17 + 12);
      sub_1001AA9C8();
      sub_10024D7B8(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      *(_WORD *)(v17 + 12) = 2112;
      sub_1001B0E80((uint64_t)&v31, (uint64_t)&v28, 0LL);
      id v23 = v31;
      if (v31)
      {
        id v27 = v31;
        id v24 = v31;
        uint64_t v25 = v17 + 14;
        uint64_t v26 = v17 + 22;
      }

      else
      {
        uint64_t v26 = v17 + 22;
        id v27 = 0LL;
        uint64_t v25 = v17 + 14;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25, v26);
      *uint64_t v18 = v23;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to open URL %s#. Error %@", (uint8_t *)v17, 0x16u);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v18);
      sub_1001B0E60((uint64_t)v18);
      sub_1001B0F64(v19);
      sub_1001B0E60(v19);
      sub_1001B0E60(v17);
    }

    else
    {
      sub_10024D7B8(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    }
  }

  sub_1001B0FF8();
}

void sub_10023E9DC(uint64_t a1)
{
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_1001B1234();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001B0F00();
  uint64_t v9 = v8 - v7;
  sub_10020F1FC(a1, (uint64_t)v4, (uint64_t *)&unk_10044A400);
  if (sub_1001AB0AC((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_1001C6CE4((uint64_t)v4, (uint64_t *)&unk_10044A400);
  }

  else
  {
    sub_10024D9B0(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    id v10 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
    id v11 = [v10 conversationManager];

    id v12 = [v11 activatedConversationLinks];
    uint64_t v13 = sub_1001B4B94(0LL, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    sub_10022B8BC((unint64_t *)&unk_1004499F8, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v13, v14);

    __chkstk_darwin(v16);
    *(void *)&v17[-16] = v9;
    sub_10023EEF0(sub_10024D294, (uint64_t)&v17[-32], v15);
    sub_1001B0F5C();
    sub_1001D924C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

  sub_1001B1064();
}

uint64_t sub_10023EBBC(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447EC0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v30 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v30 - v17;
  id v19 = [*a1 groupUUID];
  if (v19)
  {
    uint64_t v20 = v19;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v21 = 1LL;
  }

  sub_1001A9670((uint64_t)v18, v21, 1LL, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a2, v4);
  sub_1001A9670((uint64_t)v16, 0LL, 1LL, v4);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10020F1FC((uint64_t)v18, (uint64_t)v9, (uint64_t *)&unk_10044A400);
  sub_10020F1FC((uint64_t)v16, v22, (uint64_t *)&unk_10044A400);
  if (sub_1001AB0AC((uint64_t)v9, 1LL, v4) == 1)
  {
    sub_1001C6CE4((uint64_t)v16, (uint64_t *)&unk_10044A400);
    sub_1001C6CE4((uint64_t)v18, (uint64_t *)&unk_10044A400);
    int v23 = sub_1001AB0AC(v22, 1LL, v4);
    if (v23 == 1) {
      id v24 = (uint64_t *)&unk_10044A400;
    }
    else {
      id v24 = (uint64_t *)&unk_100447EC0;
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }

  else
  {
    sub_10020F1FC((uint64_t)v9, (uint64_t)v13, (uint64_t *)&unk_10044A400);
    if (sub_1001AB0AC(v22, 1LL, v4) == 1)
    {
      sub_1001C6CE4((uint64_t)v16, (uint64_t *)&unk_10044A400);
      sub_1001C6CE4((uint64_t)v18, (uint64_t *)&unk_10044A400);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      char v25 = 0;
      id v24 = (uint64_t *)&unk_100447EC0;
    }

    else
    {
      uint64_t v26 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v31, v22, v4);
      sub_1001A9F18( (unint64_t *)&qword_10044AE20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v26, v4, v27);
      id v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v26, v4);
      id v24 = (uint64_t *)&unk_10044A400;
      sub_1001C6CE4((uint64_t)v16, (uint64_t *)&unk_10044A400);
      sub_1001C6CE4((uint64_t)v18, (uint64_t *)&unk_10044A400);
      v28(v13, v4);
    }
  }

  sub_1001C6CE4((uint64_t)v9, v24);
  return v25 & 1;
}

void sub_10023EEF0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_1001B4B94(0LL, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    sub_10022B8BC((unint64_t *)&unk_1004499F8, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    uint64_t v5 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v12 = v33[2];
    int64_t v13 = v33[3];
    unint64_t v14 = v33[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v31 = a3 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a3 + 56);
    uint64_t v11 = (void *)swift_bridgeObjectRetain(a3);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v14)
  {
    uint64_t v19 = (v14 - 1) & v14;
    unint64_t v20 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v21 = v13;
    goto LABEL_27;
  }

  int64_t v21 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v21 < v30)
    {
      unint64_t v26 = *(void *)(v31 + 8 * v21);
      if (v26)
      {
LABEL_26:
        uint64_t v19 = (v26 - 1) & v26;
        unint64_t v20 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_27:
        id v25 = *(id *)(*(void *)(v5 + 48) + 8 * v20);
        if (v25)
        {
          while (1)
          {
            id v34 = v25;
            char v28 = a1(&v34);
            if (v4) {
              break;
            }
            if ((v28 & 1) != 0) {
              goto LABEL_39;
            }

            int64_t v13 = v21;
            unint64_t v14 = v19;
            if ((v5 & 0x8000000000000000LL) == 0) {
              goto LABEL_11;
            }
LABEL_13:
            uint64_t v22 = __CocoaSet.Iterator.next()(v11);
            if (v22)
            {
              uint64_t v23 = v22;
              uint64_t v32 = v22;
              uint64_t v24 = sub_1001B4B94(0LL, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
              swift_unknownObjectRetain(v23);
              swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
              id v25 = v34;
              swift_unknownObjectRelease(v23);
              int64_t v21 = v13;
              uint64_t v19 = v14;
              if (v25) {
                continue;
              }
            }

            goto LABEL_39;
          }
        }

        goto LABEL_39;
      }

      int64_t v27 = v13 + 2;
      if (v13 + 2 < v30)
      {
        unint64_t v26 = *(void *)(v31 + 8 * v27);
        if (v26) {
          goto LABEL_25;
        }
        int64_t v27 = v13 + 3;
        if (v13 + 3 >= v30) {
          goto LABEL_39;
        }
        unint64_t v26 = *(void *)(v31 + 8 * v27);
        if (v26)
        {
LABEL_25:
          int64_t v21 = v27;
          goto LABEL_26;
        }

        int64_t v27 = v13 + 4;
        if (v13 + 4 < v30)
        {
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26) {
            goto LABEL_25;
          }
          int64_t v21 = v13 + 5;
          if (v13 + 5 < v30)
          {
            unint64_t v26 = *(void *)(v31 + 8 * v21);
            if (!v26)
            {
              int64_t v29 = v13 + 6;
              while (v29 < v30)
              {
                unint64_t v26 = *(void *)(v31 + 8 * v29++);
                if (v26)
                {
                  int64_t v21 = v29 - 1;
                  goto LABEL_26;
                }
              }

              goto LABEL_39;
            }

            goto LABEL_26;
          }
        }
      }
    }

void sub_10023F220()
{
}

void sub_10023F23C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001AFF14(&qword_100447EA0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v50 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  void *v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    uint64_t v51 = v5;
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_1001B0D98(v17, (uint64_t)qword_100454210);
  int64_t v21 = (os_log_s *)Logger.logObject.getter(v18, v19, v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v53[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v52 = sub_1001D7CF0(0xD00000000000001ALL, 0x8000000100373740LL, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v23 + 4, v23 + 12);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v25 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24];
  uint64_t v26 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32];
  sub_1001B204C(&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource], v25);
  id v27 = sub_100243318();
  uint64_t v28 = (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v26 + 24))(v27, 1LL, v25, v26);

  sub_10023DA44(v28, (uint64_t)v53);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = v54;
  if (v54)
  {
    uint64_t v30 = v55;
    sub_1001B204C(v53, v54);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
    sub_1001B0438(v53);
    uint64_t v31 = type metadata accessor for Date(0LL);
    uint64_t v32 = sub_1001AB0AC((uint64_t)v8, 1LL, v31);
    if ((_DWORD)v32 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32LL))(v10, v8, v31);
      goto LABEL_10;
    }
  }

  else
  {
    sub_1001C6CE4((uint64_t)v53, (uint64_t *)&unk_10044A3A0);
    uint64_t v33 = type metadata accessor for Date(0LL);
    uint64_t v32 = sub_1001A9670((uint64_t)v8, 1LL, 1LL, v33);
  }

  Date.init()(v32);
  sub_1001C6CE4((uint64_t)v8, &qword_100447EA0);
LABEL_10:
  uint64_t v34 = type metadata accessor for Date(0LL);
  sub_1001A9670((uint64_t)v10, 0LL, 1LL, v34);
  uint64_t v35 = (uint64_t)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  swift_beginAccess( &v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate],  v53,  33LL,  0LL);
  sub_10024D488((uint64_t)v10, v35, &qword_100447EA0);
  swift_endAccess(v53);
  uint64_t v36 = v1;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v36, v37, v38);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    v53[0] = v50;
    *(_DWORD *)uint64_t v41 = 136315394;
    uint64_t v43 = (uint64_t)v51;
    sub_10020F1FC(v35, (uint64_t)v51, &qword_100447EA0);
    sub_1001AEC88(v43);
    uint64_t v45 = v44;
    unint64_t v47 = v46;
    sub_1001C6CE4(v43, &qword_100447EA0);
    uint64_t v52 = sub_1001D7CF0(v45, v47, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v41 + 4, v41 + 12);

    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v41 + 12) = 2112;
    uint64_t v52 = (uint64_t)v36;
    unint64_t v48 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v41 + 14, v41 + 22);
    *uint64_t v42 = v36;

    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Most recent call date is now %s for notification provider %@",  (uint8_t *)v41,  0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v42, 1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v49 = v50;
    swift_arrayDestroy(v50, 1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
  }

void sub_10023F804()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001BB560();
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001C7334();
  __chkstk_darwin(v7);
  sub_1001B0F00();
  uint64_t v10 = v9 - v8;
  v2 += 16LL;
  sub_1001B0E80(v2, (uint64_t)&v52, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v12 = (char *)Strong;
    sub_1001F8064((uint64_t)v4, (uint64_t)&v48);
    uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_10044CD80);
    uint64_t v14 = sub_1001B4C00(v13, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
    if ((swift_dynamicCast(&v51, &v48, v13, v14, 6LL) & 1) != 0)
    {
      uint64_t v15 = v51;
      id v16 = *(uint64_t (**)(uint64_t))&v12[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink];
      if (v16)
      {
        uint64_t v46 = v5;
        unint64_t v47 = v12;
        uint64_t v17 = *(void *)&v12[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink + 8];
        uint64_t v18 = v51;
        uint64_t v19 = v4[3];
        uint64_t v20 = v4[4];
        sub_1001B204C(v4, v19);
        int64_t v21 = *(void (**)(uint64_t, uint64_t))(v20 + 112);
        swift_retain(v17);
        uint64_t v22 = v19;
        uint64_t v15 = v18;
        uint64_t v12 = v47;
        v21(v22, v20);
        uint64_t v23 = (void *)v16(v10);
        uint64_t v24 = v17;
        uint64_t v5 = v46;
        sub_1001B5D3C((uint64_t)v16, v24);
        sub_1001C6CE4(v10, (uint64_t *)&unk_10044A400);
      }

      else
      {
        uint64_t v23 = 0LL;
      }

      uint64_t v25 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager;
      id v26 = *(id *)&v12[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager];
      id v27 = sub_10023FC3C(v26, v23);

      if (v27)
      {
        uint64_t v29 = *(void (**)(uint64_t))&v12[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL];
        uint64_t v28 = *(void *)&v12[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL + 8];
        swift_retain(v28);
        id v30 = [v27 URL];
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v30);

        v29(v0);
        swift_release(v28);
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
        if (qword_100446950 != -1) {
          swift_once(&qword_100446950, sub_100258A88);
        }
        uint64_t v31 = sub_1001B0E98();
        uint64_t v32 = (os_log_s *)sub_1001B0D98(v31, (uint64_t)qword_100454210);
        uint64_t v33 = (void **)v27;
        Logger.logObject.getter(v33, v34, v35);
        os_log_type_t v36 = sub_1001B105C();
        if (sub_10022CD18(v36))
        {
          uint64_t v37 = (uint8_t *)sub_1001B0E78(12LL);
          uint64_t v38 = (void *)sub_1001B0E78(8LL);
          *(_DWORD *)uint64_t v37 = 138412290;
          unint64_t v48 = v33;
          uint64_t v39 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v37 + 4, v37 + 12);
          void *v38 = v27;

          _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v30,  "Performed join conversation request: %@",  v37,  0xCu);
          sub_1001AFF14(&qword_100447E80);
          sub_1001B0F64((uint64_t)v38);
          sub_1001B0E60((uint64_t)v38);
          sub_1001B0E60((uint64_t)v37);

          goto LABEL_17;
        }
      }

      else
      {
        *(id *)&v12[v25];
        sub_10023FE20();
        sub_10024DA3C();
        if (v15)
        {
          os_log_type_t v40 = *(void **)&v12[v25];
          uint64_t v41 = sub_1001C7370((uint64_t)&unk_1003E3878, 24LL);
          *(void *)(v41 + ++*(void *)(v0 + 16) = v15;
          v49[3] = sub_10024D28C;
          uint64_t v50 = v41;
          unint64_t v48 = _NSConcreteStackBlock;
          v49[0] = 1107296256LL;
          v49[1] = sub_100240708;
          v49[2] = &unk_1003E3890;
          uint64_t v42 = _Block_copy(&v48);
          uint64_t v43 = v50;
          id v44 = v40;
          id v45 = v15;
          swift_release(v43);
          [v44 launchAppForDialRequest:v45 completion:v42];

          _Block_release(v42);
          goto LABEL_17;
        }
      }

      goto LABEL_17;
    }
  }

id sub_10023FC3C(void *a1, void *a2)
{
  id v4 = [a1 providerForRecentCall:v2];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  if (![v4 isFaceTimeProvider])
  {

    return 0LL;
  }

  uint64_t v6 = sub_10024D7E4();
  id v7 = (id)v6;
  if (!v6)
  {

    return v7;
  }

  if (sub_10024E694(v6) <= 1)
  {

    sub_1001AA9C8();
    return 0LL;
  }

  sub_10023CCF4((uint64_t)v7);
  uint64_t v9 = v8;
  sub_1001AA9C8();
  sub_10024E96C(v9);
  uint64_t v11 = v10;
  if (!a2)
  {
LABEL_17:
    id v20 = objc_allocWithZone(&OBJC_CLASS___TUJoinConversationRequest);
    id v7 = sub_10024761C(v11, (uint64_t)&_swiftEmptySetSingleton, 23LL);
    goto LABEL_18;
  }

  id v12 = a2;
  id v13 = [v12 originatorHandle];
  if (!v13)
  {
LABEL_16:

    goto LABEL_17;
  }

  uint64_t v14 = v13;
  if (([v12 isLocallyCreated] & 1) == 0)
  {
    id v15 = v14;
    uint64_t v16 = sub_1001C7478();
    sub_10023D19C(v16, v15);
    char v18 = v17;
    sub_1001E43E0();
    if ((v18 & 1) == 0)
    {

      id v12 = v15;
      goto LABEL_16;
    }
  }

  sub_1001AA9C8();
  id v7 = objc_allocWithZone(&OBJC_CLASS___TUJoinConversationRequest);
  sub_1002474D8(v12, (uint64_t)&_swiftEmptySetSingleton, 0);
  sub_10024DA3C();
LABEL_18:
  if (v7)
  {
    [v7 setWantsStagingArea:1];
    id v21 = v7;
    [v21 setVideoEnabled:1];
  }

  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  return v7;
}

void sub_10023FE20()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1001B1234();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B0F00();
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001C7334();
  __chkstk_darwin(v8);
  sub_1001D91F4();
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v9 = sub_1001B0E98();
  uint64_t v10 = (os_log_s *)sub_1001B0D98(v9, (uint64_t)qword_100454210);
  Logger.logObject.getter(v10, v11, v12);
  os_log_type_t v13 = sub_1001B105C();
  if (sub_10022CD18(v13))
  {
    uint64_t v57 = (uint64_t)v3;
    uint64_t v14 = v1;
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    char v17 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v18 = sub_1001B0E78(32LL);
    uint64_t v59 = v18;
    *(_DWORD *)char v17 = 136315138;
    uint64_t v58 = sub_1001D7CF0(0xD000000000000012LL, 0x8000000100373720LL, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v2, "%s", v17, 0xCu);
    sub_1001B0F64(v18);
    sub_1001B0E60(v18);
    uint64_t v19 = (uint64_t)v17;
    uint64_t v7 = v16;
    uint64_t v6 = v15;
    uint64_t v1 = v14;
    uint64_t v3 = (void *)v57;
    sub_1001B0E60(v19);
  }

  id v20 = [v5 providerForRecentCall:v3];
  if (v20)
  {
    uint64_t v28 = v20;
    sub_10023DDF4((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v52, v53, v55, v57);
    if (v29 && (sub_10023D970(), uint64_t v31 = v30, sub_1001AA9C8(), v31))
    {
      id v32 = [objc_allocWithZone(TUDialRequest) initWithProvider:v28];
      id v33 = [v31 type];
      if (v33 == (id)2)
      {
        LOBYTE(v59) = 0;
        NSString v34 = [v31 value];
        if (!v34)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
          NSString v34 = String._bridgeToObjectiveC()();
          sub_1001D9020();
        }

        sub_10024D128(v3, (SEL *)&selRef_isoCountryCode);
        uint64_t v56 = v7;
        if (v35)
        {
          NSString v54 = String._bridgeToObjectiveC()();
          sub_1001B1200();
        }

        else
        {
          NSString v54 = 0LL;
        }

        uint64_t v38 = sub_1001AFF14((uint64_t *)&unk_100447BA0);
        uint64_t inited = swift_initStackObject(v38, &v60);
        *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_10037B290;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TUNumberToDialOptionsSuppressLocalAssistKey);
        *(void *)(inited + 40) = v40;
        *(void *)(inited + 72) = &type metadata for Bool;
        *(_BYTE *)(inited + 48) = 1;
        Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        sub_1001D9020();
        id v42 = (id)TUNumberToDial(v34, v54, 0LL, isa, &v59);

        uint64_t v7 = v56;
        if (v42)
        {
          [v32 setDialAssisted:v59];
          sub_10024D128(v3, (SEL *)&selRef_isoCountryCode);
          if (v43)
          {
            NSString v44 = String._bridgeToObjectiveC()();
            sub_1001B92A4();
          }

          else
          {
            NSString v44 = 0LL;
          }

          id v45 =  [(id)objc_opt_self(TUHandle) normalizedPhoneNumberHandleForValue:v42 isoCountryCode:v44];

          [v32 setHandle:v45];
        }
      }

      else
      {
        id v36 = sub_100247240((uint64_t)v33);
        sub_10024D950((uint64_t)v36, "setHandle:");
      }

      uint64_t v46 = (objc_class *)sub_1001D8F3C(v37, "outgoingLocalParticipantUUID");
      Class v47 = v46;
      if (v46)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

        sub_10024D864(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
        sub_1001D9394(v1, 0LL);
        uint64_t v48 = sub_1001AB0AC(v1, 1LL, v6);
        if ((_DWORD)v48 == 1)
        {
          Class v47 = 0LL;
        }

        else
        {
          Class v47 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v48 = sub_10024D7B8(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
        }
      }

      else
      {
        uint64_t v48 = sub_1001D9394(v1, 1LL);
      }

      sub_10024D950(v48, "setLocalSenderIdentityAccountUUID:");

      id v50 = sub_10024D95C(v49, "setPerformDialAssist:");
      sub_10024D95C((uint64_t)v50, "setPerformLocalDialAssist:");
      sub_100247484();
      objc_msgSend( v32,  "setVideo:",  sub_1001D8F3C((uint64_t)objc_msgSend(v32, "setTtyType:", v51), "mediaType") == (id)2);
      [v32 setOriginatingUIType:8];
    }

    else
    {
    }
  }

  sub_1001B0FF8();
}

void sub_100240388(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v4, (uint64_t)qword_100454210);
    id v5 = a2;
    swift_errorRetain(a1);
    id v6 = v5;
    uint64_t v7 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v7, v8, v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(oslog, v10);
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v13 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v12 = 138412546;
      uint64_t v25 = (uint64_t)v6;
      id v14 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 4, v12 + 12);
      void *v13 = v6;

      *(_WORD *)(v12 + 12) = 2112;
      swift_errorRetain(a1);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v25 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 14, v12 + 22);
      v13[1] = v15;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v11,  "Performing dial request: %@ ended in error: %@",  (uint8_t *)v12,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v13, 2LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      return;
    }

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v16, (uint64_t)qword_100454210);
    oslog = a2;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(oslog, v17, v18);
    os_log_type_t v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v21 = 138412290;
      uint64_t v25 = (uint64_t)oslog;
      uint64_t v23 = oslog;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v21 + 4, v21 + 12);
      *uint64_t v22 = oslog;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Performed dial request: %@", v21, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      return;
    }
  }
}

void sub_100240708(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_10024075C()
{
  uint64_t v1 = (void (**)(uint64_t))(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles + 8);
  *uint64_t v1 = sub_1002451B4;
  v1[1] = 0LL;
  return sub_1001B5D3C(v2, v3);
}

void sub_10024077C()
{
  uint64_t v1 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callInteractionManager;
  *(void *)&v0[v1] = [objc_allocWithZone(CHCallInteractionManager) init];
  uint64_t v2 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager;
  *(void *)&v0[v2] = [objc_allocWithZone(TUCallProviderManager) init];
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers] = &_swiftEmptySetSingleton;
  uint64_t v3 = (uint64_t)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  uint64_t v4 = type metadata accessor for Date(0LL);
  sub_1001A9670(v3, 1LL, 1LL, v4);
  id v5 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  id v6 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink];
  *(void *)id v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  uint64_t v7 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles];
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  uint64_t v8 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  uint64_t v9 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_replace];
  *(void *)uint64_t v9 = 0LL;
  *((void *)v9 + 1) = 0LL;
  uint64_t v10 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_removeNotification];
  *(void *)uint64_t v10 = 0LL;
  *((void *)v10 + 1) = 0LL;
  os_log_type_t v11 = &v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue];
  *(void *)os_log_type_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "callservicesd/CallHistoryNotificationProvider.swift",  51LL,  2LL,  262LL,  0);
  __break(1u);
}

uint64_t sub_1002408D4(void *a1)
{
  id v3 =  [*(id *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager) providerForRecentCall:a1];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  id v5 = [objc_allocWithZone(CNContactStoreConfiguration) init];
  id v6 = [v4 assumedIdentity];
  [v5 setAssumedIdentity:v6];
  swift_unknownObjectRelease(v6);
  id v7 = [objc_allocWithZone(CNContactStore) initWithConfiguration:v5];
  id v8 = [objc_allocWithZone(CHContactProvider) initWithDataSource:v7];
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + ++*(void *)(v0 + 16) = xmmword_10037B200;
  id v11 = [(id)objc_opt_self(CNContactFormatter) descriptorForRequiredKeysForStyle:0];
  *(void *)(v10 + 32) = v11;
  specialized Array._endMutation()(v11, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v19 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v19 + ++*(void *)(v0 + 16) = xmmword_10037B200;
  *(void *)(v19 + 32) = a1;
  id v41 = (id)v19;
  specialized Array._endMutation()(v19, v20, v21, v22, v23, v24, v25, v26);
  sub_1001B4B94(0LL, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
  id v27 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  sub_1001AFF14((uint64_t *)&unk_100449820);
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  id v41 = 0LL;
  id v30 = [v8 contactsByHandleForCalls:isa keyDescriptors:v29 error:&v41];

  id v31 = v41;
  if (!v30)
  {
    id v37 = v41;
    uint64_t v38 = _convertNSErrorToError(_:)(v31);

    swift_willThrow(v39);
    swift_errorRelease(v38);
    return 0LL;
  }

  uint64_t v32 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
  uint64_t v33 = sub_1001AFF14(&qword_10044AC20);
  sub_10022B8BC(&qword_10044A3F8, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
  uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v30, v32, v33, v34);
  id v36 = v31;

  return v35;
}

void *sub_100240BEC(uint64_t a1)
{
  v370 = (uint8_t *)type metadata accessor for URL(0LL);
  uint64_t v362 = *((void *)v370 - 1);
  __chkstk_darwin(v370);
  id v3 = (char *)v350 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v354 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v353 = *(void *)(v354 - 8);
  __chkstk_darwin(v354);
  v361 = (char *)v350 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v356 = type metadata accessor for URLComponents(0LL);
  uint64_t v355 = *(void *)(v356 - 8);
  __chkstk_darwin(v356);
  v363 = (char *)v350 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  id v8 = (char *)v350 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  uint64_t v10 = __chkstk_darwin(v9);
  v357 = (char *)v350 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  v351 = (char *)v350 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v352 = (uint64_t)v350 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v360 = (uint64_t)v350 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v359 = (char *)v350 - v19;
  __chkstk_darwin(v18);
  uint64_t v369 = (uint64_t)v350 - v20;
  uint64_t v21 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v350 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 32);
  sub_1001B204C((void *)a1, v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v24, v25);
  v358 = v3;
  v366 = v8;
  if (!v26)
  {
    uint64_t v372 = 0LL;
    uint64_t v37 = 0LL;
    unint64_t v44 = 0LL;
    unint64_t v43 = 0LL;
    Class v29 = 0LL;
    goto LABEL_19;
  }

  uint64_t v27 = v26;
  sub_10023D970();
  Class v29 = v28;
  swift_bridgeObjectRelease(v27);
  if (!v29) {
    goto LABEL_17;
  }
  sub_1001F8064(a1, (uint64_t)v381);
  id v30 = v29;
  uint64_t v31 = sub_1001AFF14((uint64_t *)&unk_10044CD80);
  uint64_t v32 = sub_1001B4B94(0LL, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
  if (!swift_dynamicCast(&v378, v381, v31, v32, 6LL)
    || (uint64_t v33 = (void *)v378, v34 = sub_1002408D4((void *)v378), v33, !v34))
  {

LABEL_17:
    uint64_t v372 = 0LL;
    uint64_t v37 = 0LL;
LABEL_18:
    unint64_t v44 = 0LL;
    unint64_t v43 = 0LL;
    goto LABEL_19;
  }

  id v35 = v30;
  sub_1001CA3A8((uint64_t)v35, v34);
  uint64_t v37 = v36;

  if (!v37)
  {
    swift_bridgeObjectRelease(v34);

    uint64_t v372 = 0LL;
    goto LABEL_18;
  }

  if (!((unint64_t)v37 >> 62))
  {
    if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_8;
    }
    goto LABEL_182;
  }

  if (v37 >= 0) {
    uint64_t v348 = v37 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v348 = v37;
  }
  swift_bridgeObjectRetain(v37);
  uint64_t v349 = _CocoaArrayWrapper.endIndex.getter(v348);
  swift_bridgeObjectRelease(v37);
  if (!v349)
  {
LABEL_182:
    swift_bridgeObjectRelease(v34);

    swift_bridgeObjectRelease(v37);
    goto LABEL_17;
  }

LABEL_99:
    id v94 = (id)((v162 - 1) & v162);
    unint64_t v155 = __clz(__rbit64(v162)) + (v156 << 6);
LABEL_100:
    id v160 = *(id *)(*(void *)(v129 + 48) + 8 * v155);
    if (!v160) {
      goto LABEL_110;
    }
    while (1)
    {
      uint64_t v164 = sub_1002A1268(v160);
      if (v165)
      {
        uint64_t v166 = v164;
        uint64_t v167 = v165;
      }

      else
      {
        id v168 = [v160 value];
        uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
        uint64_t v167 = v169;
      }

      if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
      {
        sub_1002B00EC();
        v154 = v171;
      }

      unint64_t v121 = v154[2];
      if (v121 >= v154[3] >> 1)
      {
        sub_1002B00EC();
        v154 = v172;
      }

      v154[2] = v121 + 1;
      uint64_t v170 = &v154[2 * v121];
      v170[4] = v166;
      v170[5] = v167;

      uint64_t v149 = v156;
      a1 = (uint64_t)v94;
      if ((v129 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_83:
      uint64_t v157 = __CocoaSet.Iterator.next()(v143);
      if (v157)
      {
        uint64_t v158 = v157;
        *(void *)&__int128 v376 = v157;
        uint64_t v159 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
        swift_unknownObjectRetain(v158);
        swift_dynamicCast(&v378, &v376, v368, v159, 7LL);
        id v160 = (id)v378;
        swift_unknownObjectRelease(v158);
        uint64_t v156 = v149;
        id v94 = (id)a1;
        if (v160) {
          continue;
        }
      }

      goto LABEL_110;
    }
  }

  __break(1u);
LABEL_177:
  swift_once(&qword_100446950, sub_100258A88);
LABEL_148:
  uint64_t v253 = type metadata accessor for Logger(0LL);
  uint64_t v254 = (char *)sub_1001B0D98(v253, (uint64_t)qword_100454210);
  sub_1001F8064(a1, (uint64_t)&v378);
  v258 = (os_log_s *)Logger.logObject.getter(v255, v256, v257);
  os_log_type_t v259 = static os_log_type_t.default.getter(v258);
  v260 = "ts";
  if (os_log_type_enabled(v258, v259))
  {
    v261 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v262 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v376 = v262;
    v374 = v254;
    *(_DWORD *)v261 = 136315138;
    uint64_t v264 = *((void *)&v379 + 1);
    uint64_t v263 = v380;
    sub_1001B204C(&v378, *((uint64_t *)&v379 + 1));
    v265 = *(uint64_t (**)(uint64_t, uint64_t))(v263 + 16);
    uint64_t v266 = v263;
    v260 = "_TtC13callservicesd13CSDAVCMoments" + 32;
    uint64_t v267 = v265(v264, v266);
    unint64_t v269 = v268;
    uint64_t v375 = sub_1001D7CF0(v267, v268, (uint64_t *)&v376);
    id v94 = v373;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v375, &v376, v261 + 4, v261 + 12);
    swift_bridgeObjectRelease(v269);
    sub_1001B0438(&v378);
    _os_log_impl( (void *)&_mh_execute_header,  v258,  v259,  "Retrieved interaction; retrieving intent for call with identifier %s",
      v261,
      0xCu);
    swift_arrayDestroy(v262, 1LL);
    swift_slowDealloc(v262, -1LL, -1LL);
    swift_slowDealloc(v261, -1LL, -1LL);
  }

  else
  {
    sub_1001B0438(&v378);
  }

  id v287 = [(id)v121 intent];
  uint64_t v288 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
  uint64_t v289 = swift_dynamicCastObjCClass(v287, v288);
  if (v289)
  {
    uint64_t v290 = v289;
    a1 = v365;
    sub_1001F8064(v365, (uint64_t)&v378);
    v294 = (os_log_s *)Logger.logObject.getter(v291, v292, v293);
    os_log_type_t v295 = static os_log_type_t.default.getter(v294);
    if (os_log_type_enabled(v294, v295))
    {
      v296 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v374 = (char *)swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v376 = v374;
      uint64_t v297 = *((void *)v260 + 430);
      v371 = v296;
      *(_DWORD *)v296 = v297;
      v370 = v296 + 4;
      id v298 = v287;
      uint64_t v300 = *((void *)&v379 + 1);
      uint64_t v299 = v380;
      sub_1001B204C(&v378, *((uint64_t *)&v379 + 1));
      uint64_t v301 = v300;
      id v287 = v298;
      uint64_t v302 = (*(uint64_t (**)(uint64_t, uint64_t))(v299 + 16))(v301, v299);
      unint64_t v304 = v303;
      uint64_t v375 = sub_1001D7CF0(v302, v303, (uint64_t *)&v376);
      v260 = "_TtC13callservicesd13CSDAVCMoments" + 32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v375, &v376, v370, v296 + 12);
      swift_bridgeObjectRelease(v304);
      sub_1001B0438(&v378);
      v305 = v371;
      _os_log_impl( (void *)&_mh_execute_header,  v294,  v295,  "Retrieved start call intent; updating notification content for call with identifier %s",
        v371,
        0xCu);
      v306 = v374;
      swift_arrayDestroy(v374, 1LL);
      swift_slowDealloc(v306, -1LL, -1LL);
      a1 = v365;
      swift_slowDealloc(v305, -1LL, -1LL);
    }

    else
    {
      sub_1001B0438(&v378);
    }

    v315 = v367;
    *(void *)&__int128 v378 = 0LL;
    id v94 = v373;
    id v316 = [v373 contentByUpdatingWithProvider:v290 error:&v378];
    uint64_t v317 = v378;
    if (v316)
    {
      id v318 = v316;
      id v319 = (id)v378;

      goto LABEL_172;
    }

    id v320 = (id)v378;
    uint64_t v321 = _convertNSErrorToError(_:)(v317);

    swift_willThrow(v322);
    sub_1001F8064(a1, (uint64_t)&v378);
    v326 = (os_log_s *)Logger.logObject.getter(v323, v324, v325);
    os_log_type_t v327 = static os_log_type_t.default.getter(v326);
    if (os_log_type_enabled(v326, v327))
    {
      v374 = (char *)v121;
      uint64_t v328 = swift_slowAlloc(12LL, -1LL);
      v371 = (uint8_t *)v287;
      v329 = (uint8_t *)v328;
      uint64_t v330 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v376 = v330;
      *(_DWORD *)v329 = *((void *)v260 + 430);
      uint64_t v331 = v321;
      uint64_t v333 = *((void *)&v379 + 1);
      uint64_t v332 = v380;
      sub_1001B204C(&v378, *((uint64_t *)&v379 + 1));
      uint64_t v334 = v333;
      id v94 = v373;
      uint64_t v335 = (*(uint64_t (**)(uint64_t, uint64_t))(v332 + 16))(v334, v332);
      unint64_t v337 = v336;
      uint64_t v375 = sub_1001D7CF0(v335, v336, (uint64_t *)&v376);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v375, &v376, v329 + 4, v329 + 12);
      swift_bridgeObjectRelease(v337);
      sub_1001B0438(&v378);
      _os_log_impl( (void *)&_mh_execute_header,  v326,  v327,  "Could not update notification content; using original notification content for call with identifier %s",
        v329,
        0xCu);
      swift_arrayDestroy(v330, 1LL);
      uint64_t v338 = v330;
      v315 = v367;
      swift_slowDealloc(v338, -1LL, -1LL);
      swift_slowDealloc(v329, -1LL, -1LL);
      swift_errorRelease(v331);
    }

    else
    {

      sub_1001B0438(&v378);
      swift_errorRelease(v321);
    }
  }

  else
  {

    id v307 = (id)v121;
    v310 = (os_log_s *)Logger.logObject.getter(v307, v308, v309);
    os_log_type_t v311 = static os_log_type_t.default.getter(v310);
    if (os_log_type_enabled(v310, v311))
    {
      v312 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v313 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v312 = 138412290;
      id v314 = [v307 intent];
      *(void *)&__int128 v378 = v314;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v378, (char *)&v378 + 8, v312 + 4, v312 + 12);
      void *v313 = v314;

      _os_log_impl((void *)&_mh_execute_header, v310, v311, "Cound not retrieve start call intent from %@", v312, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v313, 1LL);
      swift_slowDealloc(v313, -1LL, -1LL);
      swift_slowDealloc(v312, -1LL, -1LL);
    }

    else
    {

      v310 = (os_log_s *)v307;
    }

    v315 = v367;
  }

  id v318 = v94;
  a1 = v365;
LABEL_172:
  sub_1001B4B94(0LL, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
  uint64_t v339 = *(void *)(a1 + 24);
  uint64_t v340 = *(void *)(a1 + 32);
  sub_1001B204C((void *)a1, v339);
  uint64_t v341 = (*(uint64_t (**)(uint64_t, uint64_t))(v340 + 16))(v339, v340);
  uint64_t v343 = v342;
  id v344 = v318;
  sub_10023DB9C(v341, v343, v344, 0LL);
  v346 = v345;
  [v345 setDestinations:6];
  if ((_DWORD)v372) {
    objc_msgSend(v346, "setDestinations:", (unint64_t)objc_msgSend(v346, "destinations") | 1);
  }

  swift_bridgeObjectRelease(v364);
  return v346;
}

NSBundle *sub_100242E28(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_1001B204C(a1, v3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4) & 0x1FFFFFFFFLL) == 2)
  {
    uint64_t v5 = 0x4445434E454C4953LL;
    uint64_t v6 = (void *)0xED00004C4C41435FLL;
    return sub_1001F88F0(v5, v6);
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1001B204C(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 144))(v8, v9);
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    uint64_t v14 = sub_1001F88F0(0x4B434F4C425F4025LL, (void *)0xED000059425F4445LL);
    uint64_t v16 = v15;
    uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + ++*(void *)(v0 + 16) = xmmword_10037B290;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_1001B2330();
    *(void *)(v18 + 32) = v12;
    *(void *)(v18 + 40) = v13;
    uint64_t v19 = String.init(format:_:)(v14, v16, v18);
    swift_bridgeObjectRelease(v16);
    return (NSBundle *)v19;
  }

  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  sub_1001B204C(a1, v20);
  uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager);
  uint64_t v23 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 128))(v22, v20, v21);
  id v24 = [v22 faceTimeProvider];
  uint64_t v25 = v24;
  if (!v23)
  {
    if (!v24) {
      goto LABEL_11;
    }
LABEL_16:

    return sub_1001F88F0(0x435F44455353494DLL, (void *)0xEB000000004C4C41LL);
  }

  if (!v24)
  {
    uint64_t v25 = v23;
    goto LABEL_16;
  }

  sub_1001B4B94(0LL, &qword_10044A480, &OBJC_CLASS___TUCallProvider_ptr);
  id v26 = v23;
  char v27 = static NSObject.== infix(_:_:)(v26, v25);

  if ((v27 & 1) == 0) {
    return sub_1001F88F0(0x435F44455353494DLL, (void *)0xEB000000004C4C41LL);
  }
LABEL_11:
  uint64_t v28 = a1[3];
  uint64_t v29 = a1[4];
  sub_1001B204C(a1, v28);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 120))(v28, v29);
  if (!v30) {
    return sub_1001F88F0(0xD000000000000013LL, (void *)0x80000001003738E0LL);
  }
  uint64_t v31 = v30;
  if (v30 == 2)
  {
    uint64_t v5 = 0xD00000000000001ALL;
    uint64_t v32 = "MISSED_FACETIME_VIDEO_CALL";
    goto LABEL_20;
  }

  if (v30 == 1)
  {
    uint64_t v5 = 0xD00000000000001ALL;
    uint64_t v32 = "MISSED_FACETIME_AUDIO_CALL";
LABEL_20:
    uint64_t v6 = (void *)((unint64_t)(v32 - 32) | 0x8000000000000000LL);
    return sub_1001F88F0(v5, v6);
  }

  uint64_t v33 = sub_1001F88F0(0xD000000000000013LL, (void *)0x80000001003738E0LL);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_1001B0D98(v34, (uint64_t)qword_100454210);
  id v38 = (os_log_s *)Logger.logObject.getter(v35, v36, v37);
  os_log_type_t v39 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v38, v39))
  {
    id v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v31;
    uint64_t v47 = v41;
    *(_DWORD *)id v40 = 136315138;
    type metadata accessor for CHRecentCallMediaType(0LL);
    uint64_t v43 = String.init<A>(reflecting:)(&v46, v42);
    unint64_t v45 = v44;
    uint64_t v46 = sub_1001D7CF0(v43, v44, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Encountered undefined FaceTime media type %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  return v33;
}

uint64_t sub_100243268()
{
  v8[0] = sub_1001B5DB8();
  uint64_t v1 = sub_1001AFF14(&qword_10044A3D8);
  uint64_t v2 = String.init<A>(describing:)(v8, v1);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType)) {
    uint64_t v4 = 0x656E6F6850LL;
  }
  else {
    uint64_t v4 = 0x656D695465636146LL;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType)) {
    uint64_t v5 = (void *)0xE500000000000000LL;
  }
  else {
    uint64_t v5 = (void *)0xE800000000000000LL;
  }
  v8[0] = v2;
  v8[1] = v3;
  swift_bridgeObjectRetain(v3);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  sub_1001B0EB8();
  sub_1001B0F5C();
  return v8[0];
}

id sub_100243318()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v3 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v3 + ++*(void *)(v0 + 16) = xmmword_10037B210;
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CHRecentCall);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 predicateForCallsWithAnyServiceProviders:isa];

  *(void *)(v3 + 32) = v6;
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportedMediaTypes);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    id v40 = v4;
    swift_bridgeObjectRetain(v7);
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    uint64_t v9 = 0LL;
    do
    {
      uint64_t v10 = v9 + 1;
      id v11 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v7 + 8 * v9 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      uint64_t v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      specialized ContiguousArray._endMutation()(v13);
      uint64_t v9 = v10;
    }

    while (v8 != v10);
    swift_bridgeObjectRelease(v7);
    uint64_t v4 = v40;
  }

  sub_1001B4B94(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  Class v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  id v15 = [v4 predicateForCallsWithAnyMediaTypes:v14];

  *(void *)(v3 + 40) = v15;
  specialized Array._endMutation()(v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = v1 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportsDisplayingFaceTimeAudioCalls;
  uint64_t v25 = *(uint64_t (**)(uint64_t))(v1
                                          + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportsDisplayingFaceTimeAudioCalls);
  uint64_t v26 = *(void *)(v24 + 8);
  uint64_t v27 = swift_retain(v26);
  LOBYTE(v25) = v25(v27);
  swift_release(v26);
  if ((v25 & 1) == 0)
  {
    id v28 = [v4 predicateForFilteringOutFaceTimeAudioCalls];
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
    unint64_t v30 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v29 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v30 >= v29 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
    }
    uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
    specialized Array._endMutation()(v31, v32, v33, v34, v35, v36, v37, v38);
  }

  sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  return sub_10023D8E4(v3);
}

id sub_1002435B8()
{
  uint64_t v0 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + ++*(void *)(v0 + 16) = xmmword_10037B210;
  *(void *)(v1 + 32) = sub_100243318();
  id v2 = [(id)objc_opt_self(CHRecentCall) predicateForCallsWithStatusRead:0];
  *(void *)(v1 + 40) = v2;
  specialized Array._endMutation()(v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  return sub_10023D8E4(v1);
}

id sub_100243664(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v7 = swift_allocObject(v6, 48LL, 7LL);
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_10037B210;
  *(void *)(v7 + 32) = sub_1002435B8();
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___CHRecentCall);
  static Date.+ infix(_:_:)(a1, 0.001);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = [v8 predicateForCallsBetweenStartDate:isa endDate:0];

  *(void *)(v7 + 40) = v10;
  uint64_t v22 = v7;
  specialized Array._endMutation()(v11, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v19 = v22;
  sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  return sub_10023D8E4(v19);
}

void sub_1002437A8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v7, (uint64_t)qword_100454210);
  uint64_t v8 = v0;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v8, v9, v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v21 = v8;
    uint64_t v15 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4, v13 + 12);
    NSBundle *v14 = v8;

    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Updating call history badge count for notification provider %@",  v13,  0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v14, 1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    uint64_t v11 = (os_log_s *)v8;
  }

  uint64_t v16 = &v8[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue];
  uint64_t v17 = *(void (**)(uint64_t))&v8[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue];
  if (v17)
  {
    uint64_t v18 = *((void *)v16 + 1);
    uint64_t v19 = swift_retain(v18);
    v17(v19);
    sub_1001B5D3C((uint64_t)v17, v18);
  }

void sub_1002439F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v125 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v126 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_1001B0D98(v13, (uint64_t)qword_100454210);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v14, v15, v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v127 = v5;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v140 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)&v139[0] = sub_1001D7CF0(0xD00000000000001BLL, 0x80000001003737C0LL, &v140);
    uint64_t v5 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v139, (char *)v139 + 8, v20 + 4, v20 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s", v20, 0xCu);
    swift_arrayDestroy(v21, 1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v22 = (uint64_t)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  swift_beginAccess( &v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate],  v145,  0LL,  0LL);
  sub_10020F1FC(v22, (uint64_t)v4, &qword_100447EA0);
  if (sub_1001AB0AC((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_1001C6CE4((uint64_t)v4, &qword_100447EA0);
    uint64_t v23 = v1;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v23, v24, v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v29 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v28 = 138412290;
      uint64_t v140 = (uint64_t)v23;
      unint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v28 + 4, v28 + 12);
      *unint64_t v29 = v23;

      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Could not retrieve date of most recent call for notification provider %@",  v28,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v29, 1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      uint64_t v26 = (os_log_s *)v23;
    }

    sub_10023F23C();
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v126, v4, v5);
    uint64_t v144 = _swiftEmptyArrayStorage;
    uint64_t v31 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24];
    uint64_t v32 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32];
    id v135 = &v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource];
    sub_1001B204C(&v1[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource], v31);
    id v33 = sub_1002435B8();
    uint64_t v34 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v32 + 16))(v33, v31, v32);

    uint64_t v134 = v1;
    uint64_t v35 = sub_10023D49C(v34, v134);
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)(v35 + 16);
    uint64_t v132 = v14;
    if (v37)
    {
      uint64_t v38 = swift_bridgeObjectRetain(v35);
      sub_1002906E4(v38);
      uint64_t v39 = *(void *)(v36 + 16);
      if (v39)
      {
        *(void *)&v139[0] = _swiftEmptyArrayStorage;
        sub_100250050(0, v39, 0);
        uint64_t v40 = v36 + 32;
        uint64_t v41 = *(void **)&v139[0];
        do
        {
          sub_1001F8064(v40, (uint64_t)&v140);
          uint64_t v42 = v142;
          uint64_t v43 = v143;
          sub_1001B204C(&v140, v142);
          uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);
          uint64_t v46 = v45;
          sub_1001B0438(&v140);
          if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
          {
            sub_100250050(0, v41[2] + 1LL, 1);
            uint64_t v41 = *(void **)&v139[0];
          }

          unint64_t v48 = v41[2];
          unint64_t v47 = v41[3];
          if (v48 >= v47 >> 1)
          {
            sub_100250050(v47 > 1, v48 + 1, 1);
            uint64_t v41 = *(void **)&v139[0];
          }

          v41[2] = v48 + 1;
          uint64_t v49 = &v41[2 * v48];
          void v49[4] = v44;
          v49[5] = v46;
          v40 += 40LL;
          --v39;
        }

        while (v39);
        swift_bridgeObjectRelease(v36);
      }

      else
      {
        swift_bridgeObjectRelease(v36);
        uint64_t v41 = _swiftEmptyArrayStorage;
      }

      unint64_t v50 = v134;
      unint64_t v51 = &v134[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers];
      swift_beginAccess( &v134[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers],  &v140,  33LL,  0LL);
      uint64_t v5 = v127;
      if (*(void *)(*(void *)v51 + 16LL))
      {
        uint64_t v52 = v41[2];
        if (v52)
        {
          swift_bridgeObjectRetain(v41);
          uint64_t v53 = v41 + 5;
          do
          {
            uint64_t v54 = *(v53 - 1);
            uint64_t v55 = *v53;
            swift_bridgeObjectRetain(*v53);
            sub_10028D89C(v54, v55);
            uint64_t v57 = v56;
            swift_bridgeObjectRelease(v55);
            swift_bridgeObjectRelease(v57);
            v53 += 2;
            --v52;
          }

          while (v52);
          swift_bridgeObjectRelease(v41);
          uint64_t v5 = v127;
        }
      }

      swift_endAccess(&v140);
      swift_bridgeObjectRelease(v41);
    }

    else
    {
      swift_bridgeObjectRelease(v35);
      unint64_t v50 = v134;
    }

    uint64_t v58 = *((void *)v135 + 3);
    uint64_t v59 = *((void *)v135 + 4);
    sub_1001B204C(v135, v58);
    uint64_t v60 = v126;
    id v61 = sub_100243664(v126);
    uint64_t v62 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v59 + 16))(v61, v58, v59);

    __chkstk_darwin(v63);
    *(&v123 - 2) = v60;
    *(&v123 - 1) = (uint64_t)v50;
    uint64_t v64 = (char *)sub_10023D700((uint64_t)sub_10024D46C, &v123 - 4, v62);
    uint64_t v65 = v50;
    swift_bridgeObjectRetain_n(v64, 2LL);
    uint64_t v66 = v65;
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v66, v67, v68);
    os_log_type_t v70 = static os_log_type_t.default.getter(v69);
    BOOL v71 = os_log_type_enabled(v69, v70);
    uint64_t v133 = v66;
    if (v71)
    {
      uint64_t v72 = swift_slowAlloc(22LL, -1LL);
      unint64_t v73 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
      uint64_t v140 = v74;
      *(_DWORD *)uint64_t v72 = 138412546;
      *(void *)&v139[0] = v66;
      id v75 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v139, (char *)v139 + 8, v72 + 4, v72 + 12);
      *unint64_t v73 = v133;

      *(_WORD *)(v72 + 12) = 2080;
      swift_bridgeObjectRetain(v64);
      uint64_t v76 = sub_1001AFF14((uint64_t *)&unk_10044CD80);
      uint64_t v77 = Array.description.getter(v64, v76);
      unint64_t v79 = v78;
      swift_bridgeObjectRelease(v64);
      *(void *)&v139[0] = sub_1001D7CF0(v77, v79, &v140);
      uint64_t v66 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v139, (char *)v139 + 8, v72 + 14, v72 + 22);
      swift_bridgeObjectRelease_n(v64, 2LL);
      swift_bridgeObjectRelease(v79);
      _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "Notifiction provider %@ found missed calls %s",  (uint8_t *)v72,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v73, 1LL);
      char v80 = v73;
      uint64_t v5 = v127;
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_arrayDestroy(v74, 1LL);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v64, 2LL);
    }

    uint64_t v81 = *((void *)v64 + 2);
    if (v81)
    {
      sub_10023F23C();
      unint64_t v82 = &v66[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers];
      id v135 = v64;
      uint64_t v83 = (uint64_t)(v64 + 32);
      do
      {
        sub_1001F8064(v83, (uint64_t)&v140);
        sub_1001F8064((uint64_t)&v140, (uint64_t)v139);
        uint64_t v84 = sub_1001AFF14((uint64_t *)&unk_10044CD80);
        uint64_t v85 = sub_1001B4B94(0LL, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
        if ((swift_dynamicCast(&v136, v139, v84, v85, 6LL) & 1) == 0
          || (v86 = v136, sub_10023E520(), uint64_t v88 = v87, v86, (v88 & 0x1FFFFFFFFLL) != 4))
        {
          uint64_t v89 = v142;
          uint64_t v90 = v143;
          sub_1001B204C(&v140, v142);
          uint64_t v91 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v90 + 24))(v89, v90);

          if (v91)
          {
            sub_1001F8064((uint64_t)&v140, (uint64_t)v139);
            uint64_t v92 = v144;
            if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0)
            {
              sub_1002B0498();
              uint64_t v92 = v99;
            }

            unint64_t v93 = v92[2];
            if (v93 >= v92[3] >> 1)
            {
              sub_1002B0498();
              uint64_t v92 = v100;
            }

            v92[2] = v93 + 1;
            sub_1001D700C(v139, (uint64_t)&v92[5 * v93 + 4]);
            uint64_t v144 = v92;
          }

          else
          {
            uint64_t v94 = v142;
            uint64_t v95 = v143;
            sub_1001B204C(&v140, v142);
            uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 16))(v94, v95);
            uint64_t v98 = v97;
            swift_beginAccess(v82, v139, 33LL, 0LL);
            sub_10024AA5C((uint64_t *)&v136, v96, v98);
            swift_endAccess(v139);
            swift_bridgeObjectRelease(v137);
          }
        }

        sub_1001B0438(&v140);
        v83 += 40LL;
        --v81;
      }

      while (v81);
      swift_bridgeObjectRelease(v135);
      uint64_t v5 = v127;
      uint64_t v66 = v133;
    }

    else
    {
      swift_bridgeObjectRelease(v64);
    }

    uint64_t v102 = v144[2];
    if (v102)
    {
      uint64_t v103 = &v66[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
      uint64_t v124 = v144;
      uint64_t v104 = (uint64_t)(v144 + 4);
      uint64_t v130 = &v137;
      *(void *)&__int128 v101 = 138412546LL;
      __int128 v129 = v101;
      uint64_t v128 = (char *)&type metadata for Any + 8;
      uint64_t v131 = &v66[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
      do
      {
        sub_1001F8064(v104, (uint64_t)&v140);
        uint64_t v105 = sub_100240BEC((uint64_t)&v140);
        sub_1001F8064((uint64_t)&v140, (uint64_t)v139);
        id v106 = v105;
        uint64_t v109 = (char *)Logger.logObject.getter(v106, v107, v108);
        os_log_type_t v110 = static os_log_type_t.default.getter(v109);
        if (os_log_type_enabled((os_log_t)v109, v110))
        {
          uint64_t v111 = swift_slowAlloc(22LL, -1LL);
          NSString v112 = (void *)swift_slowAlloc(8LL, -1LL);
          id v135 = (char *)swift_slowAlloc(32LL, -1LL);
          uint64_t v138 = v135;
          *(_DWORD *)uint64_t v111 = v129;
          uint64_t v134 = v109;
          id v136 = v106;
          id v113 = v106;
          uint64_t v114 = v130;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v130, v111 + 4, v111 + 12);
          *NSString v112 = v106;

          *(_WORD *)(v111 + 12) = 2080;
          sub_1001F8064((uint64_t)v139, (uint64_t)&v136);
          uint64_t v115 = sub_1001AFF14((uint64_t *)&unk_10044CD80);
          uint64_t v116 = String.init<A>(reflecting:)(&v136, v115);
          unint64_t v118 = v117;
          id v136 = (id)sub_1001D7CF0(v116, v117, (uint64_t *)&v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v114, v111 + 14, v111 + 22);
          swift_bridgeObjectRelease(v118);
          sub_1001B0438(v139);
          uint64_t v109 = v134;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v134,  v110,  "Adding notification request %@ for missed call %s",  (uint8_t *)v111,  0x16u);
          sub_1001AFF14(&qword_100447E80);
          swift_arrayDestroy(v112, 1LL);
          swift_slowDealloc(v112, -1LL, -1LL);
          uint64_t v119 = v135;
          swift_arrayDestroy(v135, 1LL);
          swift_slowDealloc(v119, -1LL, -1LL);
          uint64_t v120 = v111;
          uint64_t v103 = v131;
          swift_slowDealloc(v120, -1LL, -1LL);
        }

        else
        {

          sub_1001B0438(v139);
        }

        swift_beginAccess(v103, v139, 32LL, 0LL);
        unint64_t v121 = *(void (**)(id))v103;
        if (*(void *)v103)
        {
          uint64_t v122 = *((void *)v103 + 1);
          swift_endAccess(v139);
          swift_retain(v122);
          v121(v106);
          sub_1001B5D3C((uint64_t)v121, v122);

          sub_1001B0438(&v140);
        }

        else
        {
          sub_1001B0438(&v140);
          swift_endAccess(v139);
        }

        v104 += 40LL;
        --v102;
      }

      while (v102);
      swift_bridgeObjectRelease(v124);
      uint64_t v5 = v127;
    }

    else
    {
      swift_bridgeObjectRelease(v144);
    }

    [(id)objc_opt_self(INSchema) _resetCache];
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v126, v5);
  }

uint64_t sub_10024485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1001F8064(a1, (uint64_t)v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = v34;
  uint64_t v14 = v35;
  sub_1001B204C(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  if (sub_1001AB0AC((uint64_t)v8, 1LL, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_1001C6CE4((uint64_t)v8, &qword_100447EA0);
    sub_1001B0438(v33);
    sub_1001F8064(a1, (uint64_t)v30);
LABEL_5:
    char v26 = 0;
    goto LABEL_6;
  }

  uint64_t v15 = Date.compare(_:)(v12);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  v16(v8, v9);
  sub_1001B0438(v33);
  sub_1001F8064(a1, (uint64_t)v30);
  if (v15 != 1) {
    goto LABEL_5;
  }
  uint64_t v17 = (uint64_t *)(a3 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers);
  swift_beginAccess( a3 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers,  v29,  0LL,  0LL);
  uint64_t v18 = *v17;
  uint64_t v19 = v31;
  uint64_t v20 = v32;
  sub_1001B204C(v30, v31);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
  swift_bridgeObjectRetain(v18);
  uint64_t v22 = v21(v19, v20);
  uint64_t v24 = v23;
  sub_10026110C(v22, v23, v18);
  LOBYTE(v19) = v25;
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v18);
  char v26 = v19 ^ 1;
LABEL_6:
  sub_1001B0438(v30);
  return v26 & 1;
}

uint64_t sub_100244A88()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType);
}

void *sub_100244A98()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10024C2E4( (uint64_t)_swiftEmptyArrayStorage,  &qword_10044A3D0,  (unint64_t *)&unk_10044A3C0,  &OBJC_CLASS___UNNotificationCategory_ptr);
  }

  else
  {
    uint64_t v1 = &_swiftEmptySetSingleton;
  }

  uint64_t v91 = v1;
  BOOL v2 = sub_10023E610();
  uint64_t v3 = v2;
  sub_1001B4C00(v2, (unint64_t *)&unk_100447E40, &OBJC_CLASS___UNNotificationAction_ptr);
  uint64_t v4 = sub_1001F88F0(0xD000000000000016LL, (void *)0x8000000100373660LL);
  uint64_t v6 = v5;
  sub_1001B4C00((uint64_t)v4, &qword_10044A3B8, &OBJC_CLASS___UNNotificationActionIcon_ptr);
  id v7 = sub_10024D91C(0x656E6F6870LL, 0xE500000000000000LL);
  id v8 = sub_10024DAC0(0x6B6361426C6C6163LL, 0xE800000000000000LL, (uint64_t)v4, v6, v3, v7);
  uint64_t v9 = sub_10024D7C4((uint64_t)"ACTION_TITLE_SEND_MESSAGE");
  uint64_t v11 = v10;
  id v12 = sub_10024D91C(0x6567617373656DLL, 0xE700000000000000LL);
  id v13 = sub_10024DAC0(0x7373654D646E6573LL, 0xEB00000000656761LL, (uint64_t)v9, v11, 1LL, v12);
  uint64_t v14 = sub_10024D7C4((uint64_t)"ACTION_TITLE_BLOCK_CALLER");
  uint64_t v16 = v15;
  id v17 = sub_10024D91C(0x6961722E646E6168LL, 0xEB00000000646573LL);
  id v18 = sub_10024DAC0(0x6C61436B636F6C62LL, 0xEB0000000072656CLL, (uint64_t)v14, v16, 3LL, v17);
  unsigned int v19 = [*(id *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_featureFlags) silencedCallNotificationBlockAndReportEnabled];
  uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  if (v19)
  {
    uint64_t v21 = sub_1001C7370(v20, 56LL);
    *(_OWORD *)(v21 + ++*(void *)(v0 + 16) = xmmword_10037CBF0;
    *(void *)(v21 + 32) = v8;
    *(void *)(v21 + 40) = v13;
    *(void *)(v21 + 48) = v18;
    sub_10024DAB4(v21, v22, v23, v24, v25, v26, v27, v28, v81);
    uint64_t v29 = (uint64_t)v90;
    id v30 = v18;
  }

  else
  {
    uint64_t v31 = sub_1001C7370(v20, 48LL);
    *(_OWORD *)(v31 + ++*(void *)(v0 + 16) = xmmword_10037B210;
    *(void *)(v31 + 32) = v8;
    *(void *)(v31 + 40) = v13;
    sub_10024DAB4(v31, v32, v33, v34, v35, v36, v37, v38, v81);
    uint64_t v29 = (uint64_t)v90;
  }

  sub_1001B4B94(0LL, (unint64_t *)&unk_10044A3C0, &OBJC_CLASS___UNNotificationCategory_ptr);
  uint64_t v39 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v40 = sub_1001C7370(v39, 48LL);
  *(_OWORD *)(v40 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  *(void *)(v40 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(INStartCallIntentIdentifier);
  *(void *)(v40 + 40) = v41;
  id v42 = v8;
  id v43 = v13;
  uint64_t v44 = sub_10024DA88(0x65776F6C6C61LL);
  sub_10024DA7C(v44, v45, v29, v40);
  id v47 = v46;
  uint64_t v48 = sub_10024D6D8(&v90, v47);
  sub_10024DA60(v48, v49, v50, v51, v52, v53, v54, v55, 1LL, 2LL, v85, (uint64_t)v18, v90);
  id v56 = v47;
  uint64_t v57 = sub_10024D6D8(&v90, v56);
  sub_10024DA60(v57, v58, v59, v60, v61, v62, v63, v64, v82, v84, v86, v88, v90);
  uint64_t v65 = sub_1001C7370(v39, 48LL);
  *(_OWORD *)(v65 + ++*(void *)(v0 + 16) = v83;
  *(void *)(v65 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(INStartCallIntentIdentifier);
  *(void *)(v65 + 40) = v66;
  uint64_t v67 = sub_10024DA88(0x656B636F6C62LL);
  sub_10024DA7C(v67, v68, v69, v65);
  id v71 = v70;
  sub_10024D6D8(&v90, v71);

  sub_10024DA60(v72, v73, v74, v75, v76, v77, v78, v79, v83, *((uint64_t *)&v83 + 1), v87, (uint64_t)v89, v90);
  return v91;
}

id sub_100244E68(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) iconWithSystemImageName:v4];

  return v5;
}

id sub_100244EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v13 =  [(id)swift_getObjCClassFromMetadata(v6) actionWithIdentifier:v11 title:v12 options:a5 icon:a6];

  return v13;
}

uint64_t sub_100244F74()
{
  uint64_t v20 = v1;
  uint64_t v21 = v2;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24];
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32];
  sub_1001B204C(&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource], v4);
  id v6 = sub_1002435B8();
  uint64_t v7 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v5 + 8))(v6, v4, v5);

  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v8 = sub_1001B0E98();
  uint64_t v9 = (os_log_s *)sub_1001B0D98(v8, (uint64_t)qword_100454210);
  id v10 = v3;
  Logger.logObject.getter(v10, v11, v12);
  os_log_type_t v13 = sub_1001B105C();
  if (os_log_type_enabled(v9, v13))
  {
    uint64_t v14 = sub_1001B0E78(28LL);
    uint64_t v15 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v14 = 138412802;
    uint64_t v18 = (uint64_t)v10;
    id v16 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v14 + 4, v14 + 12);
    *uint64_t v15 = v10;

    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v18 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 1024;
    LODWORD(v18) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v14 + 24, v14 + 28);
    _os_log_impl((void *)&_mh_execute_header, v9, v13, "%@ count: %ld isAmbiguous: %{BOOL}d", (uint8_t *)v14, 0x1Cu);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v15);
    sub_1001B0E60((uint64_t)v15);
    sub_1001B0E60(v14);
  }

  else
  {
  }

  return v7;
}

uint64_t sub_10024515C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add);
  sub_1001B0E80((uint64_t)v5, (uint64_t)v9, 1LL);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_1001B5D3C(v6, v7);
}

void sub_1002451B4(uint64_t a1)
{
  if (!a1)
  {
    if (qword_100446908 != -1) {
      goto LABEL_76;
    }
    goto LABEL_8;
  }

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v2 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
    sub_10022B8BC(&qword_10044A3F8, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v122, v3, v4, v5);
    uint64_t v1 = v122[0];
    os_log_t oslog = (os_log_t)v122[1];
    uint64_t v7 = v122[2];
    int64_t v8 = v122[3];
    unint64_t v9 = v122[4];
  }

  else
  {
    uint64_t v17 = -1LL << *(_BYTE *)(a1 + 32);
    os_log_t oslog = (os_log_t)(a1 + 56);
    uint64_t v18 = ~v17;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1LL << v19);
    }
    else {
      uint64_t v20 = -1LL;
    }
    unint64_t v9 = v20 & *(void *)(a1 + 56);
    uint64_t v6 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v7 = v18;
    int64_t v8 = 0LL;
  }

  int64_t v117 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v21 = &selRef_sharedPrivacyManager;
  uint64_t v116 = v1;
  while (v1 < 0)
  {
    uint64_t v25 = __CocoaSet.Iterator.next()(v6);
    if (!v25) {
      goto LABEL_74;
    }
    uint64_t v26 = v25;
    id v120 = (id)v25;
    uint64_t v27 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
    swift_unknownObjectRetain(v26);
    swift_dynamicCast(&v121, &v120, (char *)&type metadata for Swift.AnyObject + 8, v27, 7LL);
    id v28 = v121;
    swift_unknownObjectRelease(v26);
    int64_t v24 = v8;
    uint64_t v22 = v9;
    if (!v28)
    {
LABEL_74:
      sub_1001B4B8C(v1);
      return;
    }

void sub_100245DA0()
{
  uint64_t v4 = sub_10024DAC8();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = sub_1001C7290();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B10F0();
  sub_1001F8064(v3, (uint64_t)v18);
  uint64_t v8 = sub_1001C7370((uint64_t)&unk_1003E3828, 64LL);
  sub_1001D700C(v18, v8 + 16);
  *(void *)(v8 + 56) = v0;
  v16[4] = sub_100247070;
  uint64_t v17 = v8;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  v16[2] = sub_1002356BC;
  v16[3] = &unk_1003E3840;
  unint64_t v9 = _Block_copy(v16);
  static DispatchQoS.unspecified.getter(v0);
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v11 = v10;
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001C94D0();
  sub_1001E91F4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v12, v13, v14, v15, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1);
  _Block_release(v9);
  sub_1001D924C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  swift_release(v17);
  sub_1001B0FF8();
}

void sub_100245F30(void *a1, uint64_t a2)
{
  uint64_t v82 = a2;
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  __chkstk_darwin(v3);
  unint64_t v81 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v80 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v79 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_1001B0D98(v7, (uint64_t)qword_100454210);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v8, v9, v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v86[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)&__int128 v84 = sub_1001D7CF0(0xD000000000000020LL, 0x8000000100373630LL, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_1001B204C(a1, v15);
  v89._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  sub_10023E5D0(v89);
  if (v17 == 3)
  {
    if (qword_100446908 != -1) {
      swift_once(&qword_100446908, sub_100258908);
    }
    uint64_t v18 = sub_1001B0D98(v7, (uint64_t)qword_100454138);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v18, v19, v20);
    os_log_type_t v23 = static os_log_type_t.error.getter(v21, v22);
    if (!os_log_type_enabled(v21, v23)) {
      goto LABEL_27;
    }
    int64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Unknown notification response received", v24, 2u);
    goto LABEL_21;
  }

  char v25 = v17;
  uint64_t v78 = v5;
  uint64_t v26 = *(void *)(v82 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 24);
  uint64_t v27 = *(void *)(v82 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource + 32);
  sub_1001B204C( (void *)(v82 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource),  v26);
  id v28 = (void *)objc_opt_self(&OBJC_CLASS___CHRecentCall);
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_1001B204C(a1, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
  uint64_t v32 = v31;
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  id v34 = [v28 predicateForCallsWithUniqueID:v33];

  uint64_t v35 = (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v27 + 24))(v34, 1LL, v26, v27);
  sub_10023DA44(v35, (uint64_t)&v84);
  swift_bridgeObjectRelease(v35);
  if (!v85)
  {
    sub_1001C6CE4((uint64_t)&v84, (uint64_t *)&unk_10044A3A0);
    if (qword_100446908 != -1) {
      swift_once(&qword_100446908, sub_100258908);
    }
    sub_1001B0D98(v7, (uint64_t)qword_100454138);
    sub_1001F8064((uint64_t)a1, (uint64_t)v86);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v54, v55, v56);
    os_log_type_t v58 = static os_log_type_t.error.getter(v21, v57);
    if (!os_log_type_enabled(v21, v58))
    {
      sub_1001B0438(v86);
      goto LABEL_27;
    }

    int64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = v59;
    *(_DWORD *)int64_t v24 = 136315138;
    uint64_t v60 = v87;
    uint64_t v61 = v88;
    sub_1001B204C(v86, v87);
    *(void *)&__int128 v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 16))(v60, v61);
    *((void *)&v84 + 1) = v62;
    uint64_t v63 = String.init<A>(reflecting:)(&v84, &type metadata for String);
    unint64_t v65 = v64;
    *(void *)&__int128 v84 = sub_1001D7CF0(v63, v64, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v65);
    sub_1001B0438(v86);
    _os_log_impl((void *)&_mh_execute_header, v21, v58, "Could not find recent call with identifier: %s", v24, 0xCu);
    swift_arrayDestroy(v59, 1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
LABEL_21:
    swift_slowDealloc(v24, -1LL, -1LL);
LABEL_27:

    return;
  }

  sub_1001D700C(&v84, (uint64_t)v86);
  if (v25)
  {
    uint64_t v36 = v82;
    if (v25 == 1)
    {
      uint64_t v37 = v87;
      uint64_t v38 = v88;
      sub_1001B204C(v86, v87);
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 96))(v37, v38);
      if (v39)
      {
        uint64_t v40 = v39;
        sub_10023D970();
        uint64_t v42 = v41;
        swift_bridgeObjectRelease(v40);
        if (v42)
        {
          uint64_t v43 = sub_1001AFF14((uint64_t *)&unk_100447E30);
          uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
          *(_OWORD *)(v44 + ++*(void *)(v0 + 16) = xmmword_10037B290;
          id v45 = [v42 value];
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
          uint64_t v48 = v47;

          *(void *)(v44 + 56) = &type metadata for String;
          *(void *)(v44 + 64) = sub_1001B2330();
          *(void *)(v44 + 32) = v46;
          *(void *)(v44 + 40) = v48;
          uint64_t v49 = String.init(format:_:)(0x40253A736D73LL, 0xE600000000000000LL, v44);
          uint64_t v51 = v50;
          uint64_t v52 = (uint64_t)v81;
          URL.init(string:)(v49);
          swift_bridgeObjectRelease(v51);
          uint64_t v53 = v78;
          if (sub_1001AB0AC(v52, 1LL, v78) == 1)
          {

            sub_1001C6CE4(v52, (uint64_t *)&unk_100447DE0);
          }

          else
          {
            os_log_type_t v75 = v79;
            uint64_t v74 = v80;
            (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v79, v52, v53);
            uint64_t v76 = *(void (**)(char *))(v36
                                                + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL);
            uint64_t v77 = *(void *)(v36 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL + 8);
            swift_retain(v77);
            v76(v75);
            swift_release(v77);

            (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v53);
          }
        }
      }
    }

    else
    {
      uint64_t v68 = *(void (**)(void))(v82 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles);
      if (v68)
      {
        uint64_t v69 = *(void *)(v82 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles + 8);
        uint64_t v70 = v87;
        uint64_t v71 = v88;
        sub_1001B204C(v86, v87);
        uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t))(v71 + 80);
        swift_retain(v69);
        uint64_t v73 = v72(v70, v71);
        v68();
        sub_1001B5D3C((uint64_t)v68, v69);
        swift_bridgeObjectRelease(v73);
      }
    }
  }

  else
  {
    uint64_t v66 = *(void (**)(uint64_t *))(v82
                                           + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall);
    if (v66)
    {
      uint64_t v67 = *(void *)(v82 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall + 8);
      swift_retain(v67);
      v66(v86);
      sub_1001B5D3C((uint64_t)v66, v67);
    }
  }

  sub_1001B0438(v86);
}

uint64_t sub_1002467C0()
{
  return type metadata accessor for CallHistoryNotificationProvider(0LL);
}

uint64_t type metadata accessor for CallHistoryNotificationProvider(uint64_t a1)
{
  uint64_t result = qword_10044A2C8;
  if (!qword_10044A2C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CallHistoryNotificationProvider);
  }
  return result;
}

void sub_100246800(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = "(";
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1002468D0(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(v2 - 8) + 64LL;
    v4[8] = (char *)&value witness table for () + 64;
    v4[9] = (char *)&value witness table for () + 64;
    v4[10] = &unk_10037D968;
    v4[11] = &unk_10037D968;
    v4[12] = &unk_10037D968;
    v4[13] = &unk_10037D980;
    v4[14] = &unk_10037D998;
    v4[15] = &unk_10037D968;
    v4[16] = &unk_10037D968;
    v4[17] = &unk_10037D968;
    v4[18] = &unk_10037D968;
    swift_updateClassMetadata2(a1, 256LL, 19LL, v4, a1 + 80);
  }

void sub_1002468D0(uint64_t a1)
{
  if (!qword_10044B5A0)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10044B5A0);
    }
  }

uint64_t sub_100246930()
{
  return sub_100244F74();
}

uint64_t sub_100246950(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58(a1, a2, &OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_replace, sub_1001D8ED8);
}

uint64_t sub_100246974(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58( a1,  a2,  &OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_removeNotification,  sub_1001D8ED8);
}

uint64_t sub_100246998(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58( a1,  a2,  &OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue,  sub_1001B5D3C);
}

void sub_1002469C0()
{
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v0 = sub_1001B0E98();
  uint64_t v1 = (os_log_s *)sub_1001B0D98(v0, (uint64_t)qword_100454210);
  Logger.logObject.getter(v1, v2, v3);
  os_log_type_t v4 = sub_1001B105C();
  if (os_log_type_enabled(v1, v4))
  {
    uint64_t v5 = (uint8_t *)sub_1001B0E78(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v4, "Call interactions changed", v5, 2u);
    sub_1001B0E60((uint64_t)v5);
  }

  sub_1002439F4();
}

void sub_100246AC8()
{
  uint64_t v23 = *(void *)(sub_10024DAC8() - 8);
  sub_1001C7334();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1001C7290();
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = v5;
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_1001B10F0();
  uint64_t v7 = sub_1001C9578();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  v20[1] = *(void *)&v0[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), v3, v7);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_1003E38C8, v11 + v9, v10 | 7);
  *(void *)(v12 + ++*(void *)(v0 + 16) = v0;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v12 + v11,  (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  v25[4] = sub_10024D440;
  uint64_t v26 = v12;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256LL;
  void v25[2] = sub_1002356BC;
  void v25[3] = &unk_1003E38E0;
  uint64_t v13 = _Block_copy(v25);
  static DispatchQoS.unspecified.getter(v0);
  int64_t v24 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = v14;
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001C94D0();
  sub_1001E91F4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v16, v17, v18, v19, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1);
  _Block_release(v13);
  sub_1001D924C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v2, v22);
  swift_release(v26);
  sub_1001B0FF8();
}

void sub_100246CAC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v8, (uint64_t)qword_100454210);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  id v9 = a1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v9, v10, v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(8LL, -1LL);
    int v26 = v14;
    uint64_t v17 = (void *)v16;
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = (uint64_t)v9;
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v15 = 138412546;
    os_log_t v25 = v12;
    id v18 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 4, v15 + 12);
    *uint64_t v17 = v9;

    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v28 = Notification.name.getter();
    type metadata accessor for Name(0LL);
    uint64_t v20 = String.init<A>(reflecting:)(&v28, v19);
    unint64_t v22 = v21;
    uint64_t v28 = sub_1001D7CF0(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = v25;
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v26, "%@ is handling %s", (uint8_t *)v15, 0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v17, 1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
    uint64_t v23 = v27;
    swift_arrayDestroy(v27, 1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  sub_1002437A8();
}

uint64_t sub_100247044()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100247070()
{
}

uint64_t sub_10024707C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10024708C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100247094()
{
  uint64_t v1 = sub_1001B5DB8();
  uint64_t v62 = _typeName(_:qualified:)(v1, 0LL);
  v2._countAndFlagsBits = 40LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  _StringGuts.grow(_:)(21LL);
  uint64_t v11 = sub_10024D8EC(v3, v4, v5, v6, v7, v8, v9, v10, v52, v57, 0LL, 0xE000000000000000LL);
  LOBYTE(v58) = *(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType);
  v63._countAndFlagsBits = sub_10024DA0C(v11, (uint64_t)&type metadata for NotificationType, v12);
  sub_1001B1054(v63);
  sub_1001B2428();
  sub_1001E4378();
  sub_10024D8CC(v13, v14, v15, v16, v17, v18, v19, v20, v53, v58, 0xD000000000000012LL, (void *)0x8000000100373760LL);
  sub_1001B2428();
  _StringGuts.grow(_:)(24LL);
  sub_10024D8EC(v21, v22, v23, v24, v25, v26, v27, v28, v54, v59, 0LL, 0xE000000000000000LL);
  sub_10024D9A4(OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportedMediaTypes);
  uint64_t v29 = sub_1001AFF14(&qword_10044A478);
  v64._countAndFlagsBits = sub_10024DA0C(v29, v29, v30);
  sub_1001B1054(v64);
  sub_1001B2428();
  sub_1001E4378();
  sub_10024D8CC(v31, v32, v33, v34, v35, v36, v37, v38, v55, v60, 0xD000000000000015LL, (void *)0x8000000100373780LL);
  sub_1001B2428();
  _StringGuts.grow(_:)(23LL);
  sub_10024D8EC(v39, v40, v41, v42, v43, v44, v45, v46, v56, v61, 0LL, 0xE000000000000000LL);
  sub_10024D9A4(OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportedProviders);
  uint64_t v47 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  v65._countAndFlagsBits = sub_10024DA0C(v47, v47, v48);
  sub_1001B1054(v65);
  sub_1001B0EB8();
  sub_1001E4378();
  v49._countAndFlagsBits = 0xD000000000000014LL;
  v49._object = (void *)0x80000001003737A0LL;
  String.append(_:)(v49);
  sub_1001B0EB8();
  v50._countAndFlagsBits = 41LL;
  v50._object = (void *)0xE100000000000000LL;
  String.append(_:)(v50);
  return v62;
}

id sub_100247240(uint64_t a1)
{
  id v1 = sub_1001DCF70(a1, "value");
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  uint64_t v5 = String.count.getter(v2, v4);
  uint64_t v6 = sub_1001B0F5C();
  if (v5 < 1) {
    return 0LL;
  }
  uint64_t v7 = (uint64_t)sub_1001DCF70(v6, "type");
  if ((unint64_t)v7 >= 4)
  {
    type metadata accessor for CHHandleType(0LL);
    id result = (id)sub_10024D974(v15, v16, v17, (uint64_t)&type metadata for Int, v18);
    __break(1u);
  }

  else
  {
    uint64_t v8 = qword_10037D9C8[v7];
    uint64_t v9 = sub_1001B4C00(v7, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    id v10 = sub_1001DCF70(v9, "value");
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    return sub_10024734C(v8, v11, v13);
  }

  return result;
}

id sub_10024734C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v8 = [v6 initWithType:a1 value:v7];

  return v8;
}

uint64_t sub_1002473C4()
{
  uint64_t v0 = sub_10024D7E4();
  if (v0)
  {
    uint64_t v1 = sub_10024E694(v0);
    sub_1001B0EB8();
    if (!v1) {
      return 1LL;
    }
  }

  uint64_t result = sub_10024D7E4();
  if (result)
  {
    uint64_t v3 = (void *)result;
    sub_10023D970();
    uint64_t v5 = v4;
    uint64_t v6 = sub_1001AA9C8();
    if (v5)
    {
      id v7 = sub_1001D8F3C(v6, "value");
      sub_1001D9294();
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      uint64_t v10 = v9;

      uint64_t v11 = String.count.getter(v8, v10);
      sub_1001B2428();
      return v11 == 0;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_100247484()
{
  if ((unint64_t)[v0 ttyType] >= 3)
  {
    type metadata accessor for CHRecentCallTTYType(0LL);
    sub_10024D974(v1, v2, v3, (uint64_t)&type metadata for Int, v4);
    __break(1u);
  }

  else
  {
    sub_1001D9410();
  }

void sub_1002474D8(void *a1, uint64_t a2, char a3)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  sub_1001B2428();
  [v3 initWithConversationLink:a1 otherInvitedHandles:isa sendLetMeInRequest:a3 & 1];

  sub_1001B1064();
}

id sub_100247580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v7 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v8 = 0LL;
    goto LABEL_6;
  }

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v9 = [v4 initWithDigits:v7 countryCode:v8];

  return v9;
}

id sub_10024761C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
  sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
  Class v8 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v9 = [v3 initWithRemoteMembers:isa otherInvitedHandles:v8 originatingUIType:a3];

  return v9;
}

uint64_t sub_10024772C(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void sub_100247748()
{
  uint64_t v3 = v0;
  sub_1001AFF14((uint64_t *)&unk_10044A460);
  uint64_t v4 = sub_10024D730();
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    sub_1001B1164();
    *uint64_t v3 = v4;
    sub_10010B978();
    return;
  }

  uint64_t v5 = (void *)sub_10024D588();
  if (v8) {
    BOOL v9 = (unint64_t)v5 >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    sub_10024D7D8(v5, v6);
  }
  int64_t v10 = 0LL;
  *(void *)(v4 + ++*(void *)(v0 + 16) = *(void *)(v1 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v1 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  if (!v13) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v10 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v1 + 48) + 8 * i);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

void sub_10024789C()
{
  uint64_t v6 = v0;
  sub_1001AFF14((uint64_t *)&unk_10044A3E8);
  uint64_t v7 = sub_10024D730();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    sub_1001B1164();
    uint64_t *v6 = v7;
    sub_1001B1064();
    return;
  }

  char v8 = (void *)sub_10024D588();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    sub_10024D7D8(v8, v9);
  }
  sub_10024D5B0();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_10024D8A4();
  while (1)
  {
    uint64_t v16 = (void *)(*(void *)(v1 + 48) + 16 * v13);
    uint64_t v17 = v16[1];
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v13);
    *unint64_t v18 = *v16;
    v18[1] = v17;
    swift_bridgeObjectRetain(v17);
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v14 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*(void *)(v2 + 8 * v14))
    {
      uint64_t v4 = v14 + 1;
      if (v14 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*(void *)(v2 + 8 * v4))
      {
        uint64_t v4 = v14 + 2;
        if (v14 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*(void *)(v2 + 8 * v4)) {
          break;
        }
      }
    }

void *sub_1002479B0()
{
  uint64_t v1 = v0;
  sub_1001AFF14(&qword_10044A3E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + ++*(void *)(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * i) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

id sub_100247B44()
{
  uint64_t v1 = v0;
  sub_1001AFF14(&qword_10044A470);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + ++*(void *)(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = 56 * i;
    uint64_t v21 = *(void *)(v2 + 48) + v20;
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 24);
    uint64_t v25 = *(void *)(v21 + 32);
    char v26 = *(_BYTE *)(v21 + 40);
    uint64_t v27 = *(void **)(v21 + 48);
    uint64_t v28 = *(void *)(v4 + 48) + v20;
    *(void *)uint64_t v28 = *(void *)v21;
    *(void *)(v28 + 8) = v22;
    *(void *)(v28 + ++*(void *)(v0 + 16) = v23;
    *(void *)(v28 + 24) = v24;
    *(void *)(v28 + 32) = v25;
    *(_BYTE *)(v28 + 40) = v26;
    *(void *)(v28 + 48) = v27;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    id result = v27;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void sub_100247D30()
{
}

void sub_100247D3C()
{
}

void *sub_100247D48()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001AFF14((uint64_t *)&unk_10044A498);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release(v6);
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }

  char v26 = v1;
  id result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + ++*(void *)(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = *(void *)(v6 + 56);
  uint64_t v16 = -1LL;
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  unint64_t v17 = v16 & v15;
  int64_t v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    unint64_t v24 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v24, v2);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v8 + 48) + v24,  v5,  v2);
    if (v17) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v21 >= v18) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }

void *sub_100247F70()
{
  uint64_t v1 = v0;
  sub_1001AFF14(&qword_10044A438);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + ++*(void *)(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void sub_100248104(uint64_t *a1)
{
  unint64_t v7 = v1;
  sub_1001AFF14(a1);
  uint64_t v8 = sub_10024D730();
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    sub_1001B1164();
    *unint64_t v7 = v8;
    sub_1001B1064();
    return;
  }

  int64_t v9 = (void *)sub_10024D588();
  if (v12) {
    BOOL v13 = (unint64_t)v9 >= v11;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    sub_10024D7D8(v9, v10);
  }
  sub_10024D5B0();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_9:
  sub_10024D8A4();
  while (1)
  {
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    *(void *)(*(void *)(v8 + 48) + 8 * v14) = v17;
    id v18 = v17;
    if (v6) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v15 >= v4) {
      goto LABEL_26;
    }
    ++v5;
    if (!*(void *)(v3 + 8 * v15))
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v4) {
        goto LABEL_26;
      }
      if (!*(void *)(v3 + 8 * v5))
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v4) {
          goto LABEL_26;
        }
        if (!*(void *)(v3 + 8 * v5)) {
          break;
        }
      }
    }

uint64_t sub_100248208(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14((uint64_t *)&unk_10044A460);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v19);
    uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v6 + 48) + 8 * v23) = v19;
    ++*(void *)(v6 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v12) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_100248464(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14((uint64_t *)&unk_10044A3E8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10024870C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14(&qword_10044A3E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  BOOL v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    unsigned int v19 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * i);
    uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v19, 4LL);
    uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(_DWORD *)(*(void *)(v6 + 48) + 4 * v23) = v19;
    ++*(void *)(v6 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v12) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_10024896C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14(&qword_10044A470);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v37 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v38 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  uint64_t v39 = v3;
  if (!v9) {
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v40 = (v9 - 1) & v9;
  int64_t v41 = v12;
  for (unint64_t i = __clz(__rbit64(v9)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    uint64_t v18 = *(void *)(v3 + 48) + 56 * i;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    Swift::UInt v23 = *(void *)(v18 + 32);
    Swift::UInt8 v24 = *(_BYTE *)(v18 + 40);
    unint64_t v25 = *(void **)(v18 + 48);
    Hasher.init(_seed:)(v42, *(void *)(v6 + 40));
    swift_bridgeObjectRetain_n(v20, 2LL);
    swift_bridgeObjectRetain(v22);
    id v26 = v25;
    String.hash(into:)(v42, v19, v20);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v42, v21, v22);
    swift_bridgeObjectRelease(v22);
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v24);
    id v27 = v26;
    NSObject.hash(into:)(v42);

    Swift::Int result = Hasher._finalize()();
    uint64_t v28 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) == 0)
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      while (++v30 != v33 || (v32 & 1) == 0)
      {
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v10 + 8 * v30);
        if (v35 != -1)
        {
          unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v10 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    uint64_t v36 = *(void *)(v6 + 48) + 56 * v31;
    *(void *)uint64_t v36 = v19;
    *(void *)(v36 + 8) = v20;
    *(void *)(v36 + ++*(void *)(v0 + 16) = v21;
    *(void *)(v36 + 24) = v22;
    *(void *)(v36 + 32) = v23;
    *(_BYTE *)(v36 + 40) = v24;
    *(void *)(v36 + 48) = v27;
    ++*(void *)(v6 + 16);
    uint64_t v3 = v39;
    unint64_t v9 = v40;
    int64_t v12 = v41;
    if (v40) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v14 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v38) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v37 + 8 * v14);
    int64_t v16 = v12 + 1;
    if (!v15)
    {
      int64_t v16 = v12 + 2;
      if (v12 + 2 >= v38) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(v37 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v12 + 3;
        if (v12 + 3 >= v38) {
          goto LABEL_35;
        }
        unint64_t v15 = *(void *)(v37 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }

void sub_100248CDC()
{
}

uint64_t sub_100248CE8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1001AFF14((uint64_t *)&unk_10044A498);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
LABEL_36:
    *uint64_t v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v2;
  uint64_t v36 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v23 * i, v4);
    uint64_t v24 = *(void *)(v10 + 40);
    sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v4, v25);
    uint64_t v26 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v10 + 48) + v29 * v23,  v7,  v4);
    ++*(void *)(v10 + 16);
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      goto LABEL_38;
    }
    if (v20 >= v37) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_34;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_10024900C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14(&qword_10044A438);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    Swift::UInt v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v19);
    Swift::Int result = Hasher._finalize()();
    uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v6 + 48) + 8 * v23) = v19;
    ++*(void *)(v6 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v12) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

void sub_100249280()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10024D854(v3, v4);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v2, v0, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_35:
    *uint64_t v1 = v6;
    sub_1001E90C0();
    return;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v8 = v2 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  uint64_t v10 = v9 & *(void *)(v2 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  swift_retain(v2);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  sub_10024D9D0();
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    Swift::Int v19 = *(void *)(v6 + 40);
    *(id *)(*(void *)(v2 + 48) + 8 * i);
    NSObject._rawHashValue(seed:)(v19);
    sub_10024D998();
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * v20)) == 0)
    {
      sub_100201674();
      while (1)
      {
        sub_10024D980();
        if (v25)
        {
          if ((v22 & 1) != 0) {
            break;
          }
        }

        if (v23 == v24) {
          uint64_t v23 = 0LL;
        }
        if (*(void *)(v12 + 8 * v23) != -1LL)
        {
          sub_100201660();
          goto LABEL_31;
        }
      }

      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    sub_100201688();
LABEL_31:
    sub_10023CAD8();
    *(void *)(v12 + v26) |= v27;
    sub_10024D874(v28);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_37;
    }
    if (v16 >= v11) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10024946C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14((uint64_t *)&unk_10044A460);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v9 = (uint64_t *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v29 = -1LL << v10;
    char v30 = v2;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & v8;
    uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 56;
    if ((v11 & v8) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v14 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v12) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v13) {
        goto LABEL_35;
      }
      unint64_t v18 = v9[v17];
      ++v7;
      if (!v18)
      {
        int64_t v7 = v17 + 1;
        if (v17 + 1 >= v13) {
          goto LABEL_35;
        }
        unint64_t v18 = v9[v7];
        if (!v18)
        {
          int64_t v7 = v17 + 2;
          if (v17 + 2 >= v13) {
            goto LABEL_35;
          }
          unint64_t v18 = v9[v7];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v13)
            {
LABEL_35:
              if (v31 > 63) {
                sub_10024772C(0LL, v13, (void *)(v3 + 56));
              }
              else {
                *uint64_t v9 = v29;
              }
              uint64_t v2 = v30;
              *(void *)(v3 + ++*(void *)(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v9[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v7 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v7 >= v13) {
                  goto LABEL_35;
                }
                unint64_t v18 = v9[v7];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v7 = v19;
          }
        }
      }

Swift::Int sub_1002496EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14((uint64_t *)&unk_10044A3E8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    BOOL v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      char v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *char v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_10024772C(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + ++*(void *)(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void sub_1002499C4()
{
}

uint64_t sub_1002499D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14(&qword_10044A3E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    unint64_t v9 = (uint64_t *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v29 = -1LL << v10;
    char v30 = v2;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & v8;
    uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 56;
    if ((v11 & v8) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
    {
      unsigned int v20 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * i);
      uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 4LL);
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v14 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(_DWORD *)(*(void *)(v6 + 48) + 4 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v12) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v13) {
        goto LABEL_35;
      }
      unint64_t v18 = v9[v17];
      ++v7;
      if (!v18)
      {
        int64_t v7 = v17 + 1;
        if (v17 + 1 >= v13) {
          goto LABEL_35;
        }
        unint64_t v18 = v9[v7];
        if (!v18)
        {
          int64_t v7 = v17 + 2;
          if (v17 + 2 >= v13) {
            goto LABEL_35;
          }
          unint64_t v18 = v9[v7];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v13)
            {
LABEL_35:
              if (v31 > 63) {
                sub_10024772C(0LL, v13, (void *)(v3 + 56));
              }
              else {
                *unint64_t v9 = v29;
              }
              uint64_t v2 = v30;
              *(void *)(v3 + ++*(void *)(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v9[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v7 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v7 >= v13) {
                  goto LABEL_35;
                }
                unint64_t v18 = v9[v7];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v7 = v19;
          }
        }
      }

Swift::Int sub_100249C54(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14(&qword_10044A470);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v38 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v12 = 0LL;
    uint64_t v39 = v3;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v40 = (v9 - 1) & v9;
    int64_t v41 = v12;
    for (unint64_t i = __clz(__rbit64(v9)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v16 << 6))
    {
      uint64_t v18 = *(void *)(v3 + 48) + 56 * i;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      uint64_t v21 = *(void *)(v18 + 16);
      uint64_t v22 = *(void *)(v18 + 24);
      Swift::UInt v23 = *(void *)(v18 + 32);
      Swift::UInt8 v24 = *(_BYTE *)(v18 + 40);
      char v25 = *(void **)(v18 + 48);
      Hasher.init(_seed:)(v42, *(void *)(v6 + 40));
      swift_bridgeObjectRetain(v20);
      String.hash(into:)(v42, v19, v20);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v42, v21, v22);
      swift_bridgeObjectRelease(v22);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      id v26 = v25;
      NSObject.hash(into:)(v42);

      Swift::Int result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v10 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v10 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
      uint64_t v35 = *(void *)(v6 + 48) + 56 * v30;
      *(void *)uint64_t v35 = v19;
      *(void *)(v35 + 8) = v20;
      *(void *)(v35 + ++*(void *)(v0 + 16) = v21;
      *(void *)(v35 + 24) = v22;
      *(void *)(v35 + 32) = v23;
      *(_BYTE *)(v35 + 40) = v24;
      *(void *)(v35 + 48) = v26;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v39;
      unint64_t v9 = v40;
      int64_t v12 = v41;
      if (v40) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v14 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_41;
      }
      if (v14 >= v37) {
        goto LABEL_35;
      }
      unint64_t v15 = v38[v14];
      int64_t v16 = v12 + 1;
      if (!v15)
      {
        int64_t v16 = v12 + 2;
        if (v12 + 2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v15 = v38[v16];
        if (!v15)
        {
          int64_t v16 = v12 + 3;
          if (v12 + 3 >= v37) {
            goto LABEL_35;
          }
          unint64_t v15 = v38[v16];
          if (!v15)
          {
            uint64_t v17 = v12 + 4;
            if (v12 + 4 >= v37)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v1;
              uint64_t v36 = 1LL << *(_BYTE *)(v3 + 32);
              if (v36 > 63) {
                sub_10024772C(0LL, (unint64_t)(v36 + 63) >> 6, v38);
              }
              else {
                void *v38 = -1LL << v36;
              }
              *(void *)(v3 + ++*(void *)(v0 + 16) = 0LL;
              break;
            }

            unint64_t v15 = v38[v17];
            if (!v15)
            {
              while (1)
              {
                int64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_42;
                }
                if (v16 >= v37) {
                  goto LABEL_35;
                }
                unint64_t v15 = v38[v16];
                ++v17;
                if (v15) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v16 = v12 + 4;
          }
        }
      }

uint64_t sub_100249FE0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1001AFF14((uint64_t *)&unk_10044A498);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_38;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = v2;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain(v7);
  int64_t v16 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v7;
    uint64_t v23 = *(void *)(v7 + 48);
    uint64_t v24 = *(void *)(v40 + 72);
    char v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v25(v6, v23 + v24 * i, v4);
    uint64_t v26 = *(void *)(v9 + 40);
    sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    uint64_t v28 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) == 0)
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      while (++v30 != v33 || (v32 & 1) == 0)
      {
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v30);
        if (v35 != -1)
        {
          unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    unint64_t v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v14 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v9 + 48) + v31 * v24, v6, v4);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v22;
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      goto LABEL_40;
    }
    if (v19 >= v38) {
      goto LABEL_34;
    }
    unint64_t v20 = v39[v19];
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v20 = v39[v16];
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v38) {
          goto LABEL_34;
        }
        unint64_t v20 = v39[v16];
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_10024A348(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1001AFF14(&qword_10044A438);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    unint64_t v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
    {
      Swift::UInt v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v19);
      Swift::Int result = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
      *(void *)(*(void *)(v6 + 48) + 8 * v23) = v19;
      ++*(void *)(v6 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = v8[v16];
      ++v7;
      if (!v17)
      {
        int64_t v7 = v16 + 1;
        if (v16 + 1 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = v8[v7];
        if (!v17)
        {
          int64_t v7 = v16 + 2;
          if (v16 + 2 >= v12) {
            goto LABEL_35;
          }
          unint64_t v17 = v8[v7];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
              if (v28 > 63) {
                sub_10024772C(0LL, (unint64_t)(v28 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *uint64_t v8 = -1LL << v28;
              }
              uint64_t v2 = v29;
              *(void *)(v3 + ++*(void *)(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v7 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v7 >= v12) {
                  goto LABEL_35;
                }
                unint64_t v17 = v8[v7];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v7 = v18;
          }
        }
      }

void sub_10024A5EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10024D854(v3, v4);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v2, v0, 1LL);
  Swift::Int v6 = (void *)v5;
  if (*(void *)(v2 + 16))
  {
    unint64_t v29 = v0;
    uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
    uint64_t v8 = (void *)(v2 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    uint64_t v10 = v9 & *(void *)(v2 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    swift_retain(v2);
    int64_t v13 = 0LL;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    sub_10024D908();
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      NSObject._rawHashValue(seed:)(v6[5]);
      sub_10024D998();
      if (((-1LL << v21) & ~*(void *)(v12 + 8 * v20)) == 0)
      {
        sub_100201674();
        while (1)
        {
          sub_10024D980();
          if (v26)
          {
            if ((v23 & 1) != 0) {
              break;
            }
          }

          if (v24 == v25) {
            uint64_t v24 = 0LL;
          }
          if (*(void *)(v12 + 8 * v24) != -1LL)
          {
            sub_100201660();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

      sub_100201688();
LABEL_31:
      *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
      *(void *)(v6[6] + 8 * v22) = v19;
      ++v6[2];
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_39;
      }
      if (v16 >= v11) {
        goto LABEL_33;
      }
      unint64_t v17 = v8[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v11) {
          goto LABEL_33;
        }
        unint64_t v17 = v8[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v11) {
            goto LABEL_33;
          }
          unint64_t v17 = v8[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v11)
            {
LABEL_33:
              sub_1001B1164();
              uint64_t v1 = v29;
              uint64_t v27 = 1LL << *(_BYTE *)(v2 + 32);
              if (v27 > 63)
              {
                sub_10024772C(0LL, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }

              else
              {
                sub_10024D7FC();
                *uint64_t v8 = v28;
              }

              *(void *)(v2 + ++*(void *)(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_40;
                }
                if (v13 >= v11) {
                  goto LABEL_33;
                }
                unint64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void sub_10024A80C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v24;
  a24 = v30;
  uint64_t v31 = v25;
  if (!v26)
  {
    swift_unknownObjectRelease(v25);
    goto LABEL_16;
  }

  char v32 = v29;
  unint64_t v33 = v28;
  uint64_t v34 = v26;
  sub_1001AFF14(v27);
  a12 = static _SetStorage.convert(_:capacity:)(v31, v34);
  __CocoaSet.makeIterator()(v31);
  uint64_t v35 = sub_10024DA44();
  if (!v35)
  {
LABEL_14:
    sub_1001B1164();
LABEL_16:
    sub_10024D5EC();
    return;
  }

  uint64_t v36 = v35;
  uint64_t v37 = sub_1001B4B94(0LL, v33, v32);
  while (1)
  {
    a10 = v36;
    swift_dynamicCast(&a11, &a10, (char *)&type metadata for Swift.AnyObject + 8, v37, 7LL);
    uint64_t v38 = a12;
    if (*(void *)(a12 + 24) <= *(void *)(a12 + 16))
    {
      sub_10024A5EC();
      uint64_t v38 = a12;
    }

    uint64_t v39 = a11;
    Swift::Int v40 = NSObject._rawHashValue(seed:)(*(void *)(v38 + 40));
    uint64_t v41 = -1LL << *(_BYTE *)(v38 + 32);
    unint64_t v42 = v40 & ~v41;
    unint64_t v43 = v42 >> 6;
    if (((-1LL << v42) & ~*(void *)(v38 + 56 + 8 * (v42 >> 6))) == 0) {
      break;
    }
    sub_10024D77C();
LABEL_13:
    *(void *)(v44 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v45;
    *(void *)(*(void *)(v38 + 48) + 8 * v45) = v39;
    ++*(void *)(v38 + 16);
    uint64_t v36 = __CocoaSet.Iterator.next()();
    if (!v36) {
      goto LABEL_14;
    }
  }

  char v46 = 0;
  unint64_t v47 = (unint64_t)(63 - v41) >> 6;
  while (v43 + 1 != v47 || (v46 & 1) == 0)
  {
    sub_10024D7EC();
    if (!v48)
    {
      sub_10024D790();
      goto LABEL_13;
    }
  }

  __break(1u);
}

void sub_10024A9B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
}

void sub_10024A9CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
}

void sub_10024A9E8(uint64_t a1, void *a2)
{
  unint64_t v6 = _HashTable.nextHole(atOrAfter:)(v4 & ~v5, a2 + 7, ~v5);
  *(void *)((char *)a2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 56) |= 1LL << v6;
  *(void *)(a2[6] + 8 * v6) = a1;
  ++a2[2];
  sub_10010B978();
}

uint64_t sub_10024AA5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_10024DA14(*(void *)(*v3 + 40LL), a2);
  sub_1001C7478();
  sub_10024D9F8((uint64_t)v25);
  Swift::Int v8 = sub_1001B926C();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10024DA4C();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = sub_10024D98C(v12 + 16 * v10);
    BOOL v15 = v15 && v14 == a3;
    if (v15 || (sub_10024D63C(v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_1001B0F5C();
      sub_1001E43E0();
      int64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_10024DA4C();
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = sub_10024D98C(v12 + 16 * v10);
      BOOL v23 = v15 && v22 == a3;
      if (v23 || (sub_10024D63C(v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_1001E43E0();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v25[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_10024B55C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  sub_10024DA30(v25[0]);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_10024ABA8(void *a1, void *a2)
{
  return sub_10024B2FC(a1, a2, (uint64_t)&unk_10044A440, (uint64_t)&OBJC_CLASS___CXHandle_ptr, (uint64_t)&unk_10044A448);
}

uint64_t sub_10024ABC4(void *a1, void *a2)
{
  return sub_10024B2FC( a1,  a2,  (uint64_t)&unk_10044A3C0,  (uint64_t)&OBJC_CLASS___UNNotificationCategory_ptr,  (uint64_t)&unk_10044A3D0);
}

void sub_10024ABE0(_DWORD *a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), a2, 4LL);
  sub_10024D684();
  if ((v7 & 1) != 0)
  {
    if (*(_DWORD *)(*(void *)(v6 + 48) + 4 * v3) == (_DWORD)a2) {
      goto LABEL_7;
    }
    while (1)
    {
      sub_10024D668();
      if ((v9 & 1) == 0) {
        break;
      }
      if (*(_DWORD *)(v8 + 4 * v3) == (_DWORD)a2) {
        goto LABEL_7;
      }
    }
  }

  sub_10024DA04();
  sub_10024D64C();
  uint64_t v11 = sub_10024B838(a2, v3, v10);
  sub_10024D704(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
LABEL_7:
  *a1 = a2;
  sub_100201430();
}

uint64_t sub_10024AC78()
{
  uint64_t v4 = sub_10024D808();
  Hasher.init(_seed:)(v39, v4);
  swift_bridgeObjectRetain(v3);
  sub_1001B98E0((uint64_t)v39);
  Hasher._finalize()();
  sub_10024D7FC();
  unint64_t v7 = v6 & ~v5;
  uint64_t v37 = v3 + 56;
  uint64_t v38 = v3;
  uint64_t v34 = v2;
  uint64_t v35 = v0;
  if (((*(void *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    uint64_t v36 = ~v5;
    uint64_t v8 = *(void *)v1;
    uint64_t v9 = *(void *)(v1 + 8);
    while (1)
    {
      uint64_t v10 = *(void *)(v38 + 48) + 56 * v7;
      uint64_t v11 = *(void *)(v10 + 16);
      uint64_t v12 = *(void *)(v10 + 24);
      uint64_t v13 = *(void *)(v10 + 32);
      int v14 = *(unsigned __int8 *)(v10 + 40);
      uint64_t v15 = *(void **)(v10 + 48);
      BOOL v16 = *(void *)v10 == v8 && *(void *)(v10 + 8) == v9;
      if (v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v10, *(void *)(v10 + 8), v8, v9, 0LL) & 1) != 0)
      {
        uint64_t v17 = *(void *)(v1 + 16);
        uint64_t v18 = *(void *)(v1 + 24);
        BOOL v19 = v11 == v17 && v12 == v18;
        if ((v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v17, v18, 0LL) & 1) != 0)
          && v13 == *(void *)(v1 + 32)
          && ((v14 ^ *(unsigned __int8 *)(v1 + 40)) & 1) == 0)
        {
          sub_1001B4B94(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
          sub_10024DAEC();
          swift_bridgeObjectRetain(v12);
          id v20 = v15;
          char v21 = sub_10024D9BC((uint64_t)v20);

          sub_1001B1200();
          sub_1001B92A4();
          if ((v21 & 1) != 0) {
            break;
          }
        }
      }

      unint64_t v7 = (v7 + 1) & v36;
      if (((*(void *)(v37 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
        goto LABEL_17;
      }
    }

    swift_bridgeObjectRelease(v38);
    sub_1001E87D4(v1);
    uint64_t v26 = *(void *)(*v34 + 48LL) + 56 * v7;
    uint64_t v27 = *(void *)(v26 + 8);
    uint64_t v28 = *(void *)(v26 + 16);
    uint64_t v29 = *(void *)(v26 + 24);
    uint64_t v30 = *(void *)(v26 + 32);
    char v31 = *(_BYTE *)(v26 + 40);
    char v32 = *(void **)(v26 + 48);
    *(void *)uint64_t v35 = *(void *)v26;
    *(void *)(v35 + 8) = v27;
    *(void *)(v35 + ++*(void *)(v0 + 16) = v28;
    *(void *)(v35 + 24) = v29;
    *(void *)(v35 + 32) = v30;
    *(_BYTE *)(v35 + 40) = v31;
    *(void *)(v35 + 48) = v32;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    id v33 = v32;
    return 0LL;
  }

  else
  {
LABEL_17:
    swift_bridgeObjectRelease(v38);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
    v39[0] = *v34;
    *uint64_t v34 = 0x8000000000000000LL;
    sub_1001E8790((void *)v1);
    sub_10024B95C(v1, v7, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = *v34;
    *uint64_t v34 = v39[0];
    swift_bridgeObjectRelease(v23);
    __int128 v24 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v1;
    *(_OWORD *)(v35 + ++*(void *)(v0 + 16) = v24;
    *(_OWORD *)(v35 + 32) = *(_OWORD *)(v1 + 32);
    *(void *)(v35 + 48) = *(void *)(v1 + 48);
    return 1LL;
  }

uint64_t sub_10024AEE8(void *a1, void *a2)
{
  return sub_10024B2FC(a1, a2, (uint64_t)&qword_100447CE0, (uint64_t)off_1003D5D70, (uint64_t)&unk_10044A4A8);
}

uint64_t sub_10024AF04(void *a1, void *a2)
{
  return sub_10024B2FC( a1,  a2,  (uint64_t)&unk_100447E20,  (uint64_t)&OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&qword_10044A428);
}

uint64_t sub_10024AF20(void *a1, void *a2)
{
  return sub_10024B2FC(a1, a2, (uint64_t)&qword_10044A410, (uint64_t)&OBJC_CLASS___TUHandle_ptr, (uint64_t)&unk_10044A430);
}

void sub_10024AF3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  sub_10024D684();
  if ((v7 & 1) != 0)
  {
    if (*(void *)(*(void *)(v6 + 48) + 8 * v3) == a2) {
      goto LABEL_7;
    }
    while (1)
    {
      sub_10024D668();
      if ((v9 & 1) == 0) {
        break;
      }
      if (*(void *)(v8 + 8 * v3) == a2) {
        goto LABEL_7;
      }
    }
  }

  sub_10024DA04();
  sub_10024D64C();
  sub_10024BBAC(a2, v3, v10);
  sub_10024D704(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
LABEL_7:
  *a1 = a2;
  sub_100201430();
}

uint64_t sub_10024AFCC()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001B1234();
  uint64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001BB560();
  uint64_t v9 = *v2;
  uint64_t v10 = *(void *)(*v2 + 40LL);
  sub_1001A9F18((unint64_t *)&qword_100447E50, v11, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain(v9);
  uint64_t v33 = v4;
  dispatch thunk of Hashable._rawHashValue(seed:)(v10, v7, v13);
  sub_10024D7FC();
  unint64_t v16 = v15 & ~v14;
  uint64_t v17 = v9;
  uint64_t v18 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v30 = v2;
    uint64_t v31 = v6;
    uint64_t v32 = ~v14;
    uint64_t v19 = v8[9];
    uint64_t v20 = (void (*)(void, void, void))v8[2];
    while (1)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v20;
      v20(v1, *(void *)(v17 + 48) + v19 * v16, v7);
      sub_1001A9F18( (unint64_t *)&qword_10044AE20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v1, v33, v7, v23);
      uint64_t v25 = (void (*)(uint64_t, uint64_t))v8[1];
      v25(v1, v7);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v32;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v2 = v30;
        uint64_t v26 = v8;
        goto LABEL_7;
      }
    }

    sub_1001B1200();
    v25(v33, v7);
    v22(v31, *(void *)(*v30 + 48LL) + v19 * v16, v7);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v9);
    uint64_t v20 = (void (*)(void, void, void))v8[2];
    uint64_t v26 = v8;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v20(v1, v33, v7);
    uint64_t v34 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_10024BCCC(v1, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v2;
    *uint64_t v2 = v34;
    swift_bridgeObjectRelease(v28);
    sub_10024D864((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26[4]);
    return 1LL;
  }

uint64_t sub_10024B1F8(void *a1, void *a2)
{
  return sub_10024B2FC( a1,  a2,  (uint64_t)&qword_1004499F0,  (uint64_t)&OBJC_CLASS___TUConversationLink_ptr,  (uint64_t)&unk_10044A488);
}

uint64_t sub_10024B214()
{
  uint64_t v4 = sub_10024D808();
  sub_10024DA14(v4, v5);
  Hasher._combine(_:)(v1);
  unint64_t v6 = sub_1001B926C() & ~(-1LL << *(_BYTE *)(v3 + 32));
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0)
  {
LABEL_6:
    sub_10024DA04();
    sub_10024D64C();
    uint64_t v11 = sub_10024BED0(v1, v6, v10);
    sub_10024D704(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
    uint64_t result = 1LL;
    goto LABEL_7;
  }

  if (*(void *)(*(void *)(v3 + 48) + 8 * v6) != v1)
  {
    do
    {
      sub_10024D668();
      if ((v8 & 1) == 0) {
        goto LABEL_6;
      }
    }

    while (*(void *)(v7 + 8 * v6) != v1);
  }

  uint64_t result = 0LL;
  Swift::UInt v1 = *(void *)(*(void *)(*(void *)v2 + 48LL) + 8 * v6);
LABEL_7:
  *uint64_t v0 = v1;
  return result;
}

uint64_t sub_10024B2E0(void *a1, void *a2)
{
  return sub_10024B2FC(a1, a2, (uint64_t)&qword_100448780, (uint64_t)&OBJC_CLASS___NSNumber_ptr, (uint64_t)&unk_10044A4B0);
}

uint64_t sub_10024B2FC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001C7478();
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      sub_1001E43E0();

      uint64_t v45 = v15;
      uint64_t v16 = sub_10024D8DC();
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(v46, &v45, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      *a1 = v46[0];
      swift_unknownObjectRelease(v15);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    sub_10024A80C( v13,  result + 1,  a5,  a3,  a4,  v31,  v32,  v33,  v40,  v41,  v42,  v43,  v45,  v46[0],  v46[1],  v46[2],  v46[3],  v46[4],  v46[5],  v46[6],  v46[7],  v46[8],  v46[9],  v46[10]);
    v46[0] = v34;
    if (*(void *)(v34 + 24) <= *(void *)(v34 + 16))
    {
      id v38 = v14;
      sub_10024A5EC();
      uint64_t v35 = (void *)v46[0];
    }

    else
    {
      uint64_t v35 = (void *)v34;
      id v36 = v14;
    }

    sub_10024A9E8((uint64_t)v14, v35);
    uint64_t v39 = *v9;
    *uint64_t v9 = v35;
    swift_bridgeObjectRelease(v39);
    *a1 = v14;
  }

  else
  {
    Swift::Int v17 = *(void *)(v12 + 40);
    sub_1001C7478();
    Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
    uint64_t v19 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v20 = v18 & ~v19;
    sub_10024DA68();
    if ((v21 & 1) != 0)
    {
      sub_10024D8DC();
      id v22 = sub_10024DAD4();
      char v23 = sub_10024D820((uint64_t)v22);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        sub_1001E43E0();
        uint64_t v28 = *(void **)(*(void *)(*v9 + 48LL) + 8 * v20);
        *a1 = v28;
        id v29 = v28;
        return 0LL;
      }

      uint64_t v24 = ~v19;
      while (1)
      {
        uint64_t v20 = (v20 + 1) & v24;
        sub_10024DA68();
        if ((v25 & 1) == 0) {
          break;
        }
        id v26 = sub_10024DAD4();
        char v27 = sub_10024D820((uint64_t)v26);

        if ((v27 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    sub_1001E43E0();
    swift_isUniquelyReferenced_nonNull_native(*v9);
    v46[0] = *v9;
    *uint64_t v9 = 0x8000000000000000LL;
    id v37 = a2;
    sub_10024B6F4();
    sub_10024DA30(v46[0]);
    *a1 = v37;
  }

  return 1LL;
}

void sub_10024B55C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1002496EC(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_10024789C();
      goto LABEL_22;
    }

    sub_100248464(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    Swift::Int v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        char v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void sub_10024B6F4()
{
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v7 = v0;
  unint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v12 = *(void *)(*v0 + 16);
  unint64_t v13 = *(void *)(*v0 + 24);
  if (v13 > v12 && (v1 & 1) != 0) {
    goto LABEL_14;
  }
  if ((v1 & 1) != 0)
  {
    sub_10024A5EC();
  }

  else
  {
    if (v13 > v12)
    {
      sub_100248104(v2);
      goto LABEL_14;
    }

    sub_100249280();
  }

  uint64_t v14 = *v0;
  Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(*v0 + 40));
  uint64_t v16 = -1LL << *(_BYTE *)(v14 + 32);
  unint64_t v9 = v15 & ~v16;
  sub_10024DA1C();
  if ((v17 & 1) != 0)
  {
    uint64_t v18 = sub_1001B4B94(0LL, v6, v4);
    id v19 = sub_10024DAE0();
    char v20 = sub_10024D9BC((uint64_t)v19);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }

    else
    {
      uint64_t v21 = ~v16;
      while (1)
      {
        unint64_t v9 = (v9 + 1) & v21;
        sub_10024DA1C();
        if ((v22 & 1) == 0) {
          break;
        }
        id v23 = sub_10024DAE0();
        char v24 = sub_10024D9BC((uint64_t)v23);

        if ((v24 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10024B838(uint64_t result, unint64_t a2, char a3)
{
  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002499D0(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1002479B0();
      goto LABEL_14;
    }

    sub_10024870C(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(*v3 + 40), v5, 4LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(_DWORD *)(v11 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v11 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10024B95C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_24;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100249C54(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100247B44();
      goto LABEL_24;
    }

    sub_10024896C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v37, *(void *)(*v3 + 40));
  sub_1001B98E0((uint64_t)v37);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  uint64_t v35 = v9 + 56;
  uint64_t v36 = v9;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v34 = ~v10;
    uint64_t v11 = *(void *)v5;
    uint64_t v12 = *(void *)(v5 + 8);
    do
    {
      uint64_t v13 = *(void *)(v36 + 48) + 56 * a2;
      uint64_t result = *(void *)v13;
      uint64_t v14 = *(void *)(v13 + 8);
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = *(void *)(v13 + 24);
      uint64_t v17 = *(void *)(v13 + 32);
      int v18 = *(unsigned __int8 *)(v13 + 40);
      id v19 = *(void **)(v13 + 48);
      BOOL v20 = *(void *)v13 == v11 && v14 == v12;
      if (v20
        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, *(void *)(v13 + 8), v11, v12, 0LL),
            (result & 1) != 0))
      {
        uint64_t v21 = *(void *)(v5 + 16);
        uint64_t v22 = *(void *)(v5 + 24);
        BOOL v23 = v15 == v21 && v16 == v22;
        if (v23 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v21, v22, 0LL), (result & 1) != 0))
        {
          if (v17 == *(void *)(v5 + 32) && ((v18 ^ *(unsigned __int8 *)(v5 + 40)) & 1) == 0)
          {
            sub_1001B4B94(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
            uint64_t v24 = *(void *)(v5 + 48);
            swift_bridgeObjectRetain(v14);
            swift_bridgeObjectRetain(v16);
            id v25 = v19;
            char v26 = static NSObject.== infix(_:_:)(v25, v24);

            swift_bridgeObjectRelease(v16);
            uint64_t result = swift_bridgeObjectRelease(v14);
            if ((v26 & 1) != 0) {
              goto LABEL_27;
            }
          }
        }
      }

      a2 = (a2 + 1) & v34;
    }

    while (((*(void *)(v35 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_10024BBAC(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10024946C(v8);
  }

  else
  {
    if (v7 > v6)
    {
      sub_100247748();
      goto LABEL_14;
    }

    sub_100248208(v8);
  }

  uint64_t v9 = *v3;
  uint64_t v10 = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), a1);
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = *(void *)(v9 + 48);
    if (*(void *)(v12 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }

    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v12 + 8 * a2) == a1) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10024BCCC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  __int128 v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100249FE0(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_100247D48();
      goto LABEL_12;
    }

    sub_100248CE8(v12);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      sub_1001A9F18( (unint64_t *)&qword_10044AE20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10024BED0(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10024A348(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100247F70();
      goto LABEL_14;
    }

    sub_10024900C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for HandleType(0LL);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_10024C01C(uint64_t a1)
{
}

uint64_t sub_10024C038(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }

  sub_1001AFF14((uint64_t *)&unk_10044A3E8);
  uint64_t result = sub_10024D740();
  uint64_t v3 = (void *)result;
  uint64_t v26 = *(void *)(a1 + 16);
  if (!v26)
  {
LABEL_25:
    sub_1001B0EB8();
    return (uint64_t)v3;
  }

  unint64_t v4 = 0LL;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    unint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)(v27, v3[5]);
    swift_bridgeObjectRetain(v7);
    sub_10024D9F8((uint64_t)v27);
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1LL << v10;
    if (((1LL << v10) & v12) != 0)
    {
      uint64_t v14 = v3[6];
      uint64_t v15 = sub_10024D98C(v14 + 16 * v10);
      BOOL v17 = v17 && v16 == v7;
      if (v17 || (uint64_t result = sub_10024D63C(v15, v16), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = sub_1001B0F5C();
        goto LABEL_22;
      }

      uint64_t v18 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v18;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1LL << v10;
        if ((v12 & (1LL << v10)) == 0) {
          break;
        }
        uint64_t v19 = sub_10024D98C(v14 + 16 * v10);
        if (!v17 || v20 != v7)
        {
          uint64_t result = sub_10024D63C(v19, v20);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_11;
      }
    }

    *(void *)(v5 + 8 * v11) = v13 | v12;
    char v22 = (void *)(v3[6] + 16 * v10);
    *char v22 = v8;
    v22[1] = v7;
    uint64_t v23 = v3[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_27;
    }
    v3[2] = v25;
LABEL_22:
    if (++v4 == v26) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_10024C1C8()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 16)
    && (sub_1001AFF14(&qword_10044A3E0), v2 = sub_10024D740(), v3 = v2, (uint64_t v4 = *(void *)(v1 + 16)) != 0))
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = v2 + 56;
    uint64_t v7 = *(void *)(v2 + 40);
    sub_10024D7FC();
    uint64_t v9 = ~v8;
    while (v5 < *(void *)(v1 + 16))
    {
      unsigned int v10 = *(_DWORD *)(v1 + 32 + 4 * v5);
      uint64_t v11 = static Hasher._hash(seed:bytes:count:)(v7, v10, 4LL);
      uint64_t v12 = v11 & v9;
      unint64_t v13 = (v11 & (unint64_t)v9) >> 6;
      uint64_t v14 = *(void *)(v6 + 8 * v13);
      uint64_t v15 = 1LL << (v11 & v9);
      uint64_t v16 = *(void *)(v3 + 48);
      if ((v15 & v14) != 0)
      {
        while (*(_DWORD *)(v16 + 4 * v12) != v10)
        {
          sub_10024D9E4();
          if (v17) {
            goto LABEL_9;
          }
        }
      }

      else
      {
LABEL_9:
        *(void *)(v6 + 8 * v13) = v15 | v14;
        *(_DWORD *)(v16 + 4 * v12) = v10;
        uint64_t v18 = *(void *)(v3 + 16);
        BOOL v19 = __OFADD__(v18, 1LL);
        uint64_t v20 = v18 + 1;
        if (v19) {
          goto LABEL_14;
        }
        *(void *)(v3 + ++*(void *)(v0 + 16) = v20;
      }

      if (++v5 == v4) {
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
LABEL_12:
    sub_1001B0EB8();
    sub_1001B0FF8();
  }

void sub_10024C2C8(uint64_t a1)
{
}

void sub_10024C2E4(uint64_t a1, uint64_t *a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = a1;
  unint64_t v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10024DAEC();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    sub_1001B92A4();
    if (v7)
    {
LABEL_3:
      sub_1001AFF14(a2);
      uint64_t v8 = (void *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
  }

  uint64_t v8 = &_swiftEmptySetSingleton;
  if (!v6)
  {
LABEL_4:
    uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v9)
    {
LABEL_31:
      sub_1001B92A4();
      return;
    }

    goto LABEL_15;
  }

void sub_10024C504(uint64_t a1)
{
}

void sub_10024C520(uint64_t a1)
{
}

void sub_10024C53C(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (sub_1001AFF14(&qword_10044A438), v2 = sub_10024D740(), uint64_t v4 = v2, (v5 = *(void *)(a1 + 16)) == 0))
  {
LABEL_13:
    sub_1001B0EB8();
    return;
  }

  unint64_t v6 = 0LL;
  uint64_t v7 = v2 + 56;
  while (v6 < *(void *)(a1 + 16))
  {
    Swift::UInt v8 = *(void *)(a1 + 32 + 8 * v6);
    sub_10024DA14(*(void *)(v4 + 40), v3);
    Hasher._combine(_:)(v8);
    unint64_t v9 = sub_1001B926C() & ~(-1LL << *(_BYTE *)(v4 + 32));
    unint64_t v10 = v9 >> 6;
    uint64_t v11 = *(void *)(v7 + 8 * (v9 >> 6));
    uint64_t v12 = 1LL << v9;
    uint64_t v13 = *(void *)(v4 + 48);
    if (((1LL << v9) & v11) != 0)
    {
      if (*(void *)(v13 + 8 * v9) == v8) {
        goto LABEL_12;
      }
      while (1)
      {
        sub_10024D9E4();
        if (v14) {
          break;
        }
        if (*(void *)(v13 + 8 * v9) == v8) {
          goto LABEL_12;
        }
      }
    }

    *(void *)(v7 + 8 * v10) = v12 | v11;
    *(void *)(v13 + 8 * v9) = v8;
    uint64_t v15 = *(void *)(v4 + 16);
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_15;
    }
    *(void *)(v4 + ++*(void *)(v0 + 16) = v17;
LABEL_12:
    if (++v6 == v5) {
      goto LABEL_13;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
}

uint64_t sub_10024C678(uint64_t isStackAllocationSafe, uint64_t a2)
{
  char v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_10024D750();
    uint64_t v8 = sub_10024D828();
    if (a2) {
      swift_willThrow(v8);
    }
  }

  else
  {
    uint64_t v9 = swift_slowAlloc(v7, -1LL);
    sub_10024D750();
    sub_10024D828();
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v2;
}

void sub_10024C78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_20:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = [v14 value];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    unint64_t v18 = v17;

    swift_bridgeObjectRelease(v18);
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      if ([v14 type] == (id)3)
      {

LABEL_28:
        *(void *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
        if (__OFADD__(v23++, 1LL))
        {
          __break(1u);
LABEL_31:
          swift_retain(a3);
          sub_10024CC40();
          return;
        }
      }

      else
      {
        id v20 = [v14 type];

        if (v20 == (id)2) {
          goto LABEL_28;
        }
      }
    }

    else
    {
    }
  }

  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_33;
  }

  if (v11 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_19:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_20;
  }

  int64_t v13 = v11 + 3;
  if (v13 >= v24) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v24) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }

void sub_10024C9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
LABEL_4:
  uint64_t v25 = v4;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v5 << 6);
LABEL_18:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = [v14 value];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    unint64_t v18 = v17;

    swift_bridgeObjectRelease(v18);
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      NSString v20 = [v14 value];
      if (!v20)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v22 = v21;
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v22);
      }

      unsigned __int8 v23 = [v20 destinationIdIsTemporary];

      if ((v23 & 1) == 0)
      {
        *(void *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
        uint64_t v4 = v25 + 1;
        if (!__OFADD__(v25, 1LL)) {
          goto LABEL_4;
        }
        __break(1u);
LABEL_33:
        swift_retain(a3);
        sub_10024CC40();
        return;
      }
    }

    else
    {
    }
  }

  if (__OFADD__(v5++, 1LL))
  {
    __break(1u);
    goto LABEL_35;
  }

  if (v5 >= v27) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v26 + 8 * v5);
  if (v12)
  {
LABEL_17:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
    goto LABEL_18;
  }

  int64_t v13 = v5 + 1;
  if (v5 + 1 >= v27) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v26 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v5 + 2;
  if (v5 + 2 >= v27) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v26 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v5 + 3;
  if (v5 + 3 >= v27) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v26 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v5 = v13;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v5 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v5 >= v27) {
      goto LABEL_33;
    }
    unint64_t v12 = *(void *)(v26 + 8 * v5);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }

void sub_10024CC34()
{
}

void sub_10024CC40()
{
  uint64_t v5 = v3;
  if (!v2)
  {
LABEL_36:
    sub_100207134();
    return;
  }

  uint64_t v6 = v2;
  if (*(void *)(v3 + 16) == v2) {
    return;
  }
  uint64_t v7 = v1;
  unint64_t v8 = v0;
  sub_1001AFF14(v4);
  uint64_t v9 = static _SetStorage.allocate(capacity:)(v6);
  uint64_t v10 = v9;
  uint64_t v30 = v8;
  if (v7 < 1) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = *v8;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = v9 + 56;
  while (1)
  {
    if (v11)
    {
      sub_10024D9D0();
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }

    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_40;
    }
    if (v16 >= v7) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= v7) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= v7) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }

void sub_10024CE2C()
{
  uint64_t v4 = v3;
  if (!v2)
  {
LABEL_36:
    sub_100207134();
    goto LABEL_37;
  }

  uint64_t v5 = v2;
  if (*(void *)(v3 + 16) == v2)
  {
LABEL_37:
    sub_1001B0FF8();
    return;
  }

  uint64_t v6 = v1;
  uint64_t v7 = v0;
  sub_1001AFF14((uint64_t *)&unk_10044A460);
  uint64_t v8 = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v9 = (void *)v8;
  if (v6 < 1) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *v7;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = v8 + 56;
  while (1)
  {
    if (v10)
    {
      sub_10024D908();
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_40;
    }
    if (v15 >= v6) {
      goto LABEL_36;
    }
    unint64_t v16 = v7[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v6) {
        goto LABEL_36;
      }
      unint64_t v16 = v7[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v6) {
          goto LABEL_36;
        }
        unint64_t v16 = v7[v11];
        if (!v16) {
          break;
        }
      }
    }

void sub_10024D004()
{
  NSString v8 = String._bridgeToObjectiveC()();
  int v0 = sub_1001AA9C8();
  sub_10024DA9C(v0, "setNotificationProviderIdentifier:", v1, v2, v3, v4, v5, v6, v7, (uint64_t)v8);
  sub_1001D9088(v9);
}

void sub_10024D040()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  int v0 = sub_1001AA9C8();
  sub_10024DA9C(v0, "setRemoteParticipantHandles:", v1, v2, v3, v4, v5, v6, v7, (uint64_t)isa);
  sub_1001D9088(v9);
}

void sub_10024D084(void *a1)
{
}

uint64_t sub_10024D090(void *a1)
{
  id v1 = [a1 remoteParticipantHandles];
  if (!v1) {
    return 0LL;
  }
  int v2 = v1;
  uint64_t v3 = sub_1001B4B94(0LL, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
  sub_10022B8BC(&qword_10044A3F8, &qword_100447E60, &OBJC_CLASS___CHHandle_ptr);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  return v5;
}

void sub_10024D128(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  sub_10010B978();
}

void sub_10024D17C(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  [a4 setBlockIncomingCommunication:a1 & 1 forEmailAddress:v7];
}

uint64_t sub_10024D1E4(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return 1LL << *(_BYTE *)(a1 + 32);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaSet.endIndex.getter(a1);
}

uint64_t sub_10024D234(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0) {
      return static __CocoaSet.Index.== infix(_:_:)(result, a2, a4, a5);
    }
  }

  else if ((a6 & 1) == 0)
  {
    if ((_DWORD)a2 == (_DWORD)a5) {
      return result == a4;
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10024D268()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10024D28C(uint64_t a1)
{
}

uint64_t sub_10024D294(id *a1)
{
  return sub_10023EBBC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10024D2B0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = (uint64_t *)(*(void *)(a4 + 48) + 16 * result);
    uint64_t v5 = *v4;
    swift_bridgeObjectRetain(v4[1]);
    return v5;
  }

uint64_t sub_10024D32C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 192LL;
  for (uint64_t i = 12LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10024D3D4()
{
  uint64_t v1 = *(void *)(sub_1001C9578() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  sub_1001D924C(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

void sub_10024D440()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1001C9578() - 8) + 80LL);
  sub_100246CAC(*(void **)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10024D46C(uint64_t a1)
{
  return sub_10024485C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

void sub_10024D488(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10020F574(a1, a2, a3);
  sub_1001DBE58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_1001AA978();
}

uint64_t sub_10024D4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024D4FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  NSString v8 = sub_1001B236C(&v11);
  sub_10024D9B0((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL));
  uint64_t v9 = *a3;
  *(void *)(v9 + ++*(void *)(v0 + 16) = a1 + 1;
  return sub_1001D700C(&v11, v9 + 40 * a1 + 32);
}

uint64_t sub_10024D588()
{
  return v0 + 56;
}

void sub_10024D5B0()
{
  *(void *)(v0 + ++*(void *)(v0 + 16) = *(void *)(v1 + 16);
}

  ;
}

void sub_10024D608(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
  *(void *)(*(void *)(v3 + 48) + 8 * sub_1001A9670(v0, 0LL, 1LL, v1) = v2;
  ++*(void *)(v3 + 16);
}

uint64_t sub_10024D63C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

void sub_10024D64C()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

  ;
}

  ;
}

uint64_t sub_10024D6AC(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

  ;
}

uint64_t sub_10024D6D8(void *a1, void *a2)
{
  return sub_10024B2FC(a1, a2, v2, v3, v4);
}

uint64_t sub_10024D6E8(uint64_t a1, ...)
{
  uint64_t v5 = v1;
  return swift_dynamicCast(va1, (uint64_t *)va, v3, v2, 7LL);
}

uint64_t sub_10024D704( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *v10;
  *uint64_t v10 = a10;
  return swift_bridgeObjectRelease(v11);
}

  ;
}

uint64_t sub_10024D730()
{
  return static _SetStorage.copy(original:)(*v0);
}

uint64_t sub_10024D740()
{
  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_10024D750()
{
  return v1(v3, v2, v0);
}

  ;
}

  ;
}

uint64_t sub_10024D7A4(uint64_t a1)
{
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaSet.makeIterator()(a1);
}

uint64_t sub_10024D7B8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

NSBundle *sub_10024D7C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F88F0(0xD000000000000019LL, (void *)((a1 - 32) | 0x8000000000000000LL));
}

void *sub_10024D7D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return memmove(a1, v2, 8 * a2);
}

uint64_t sub_10024D7E4()
{
  return sub_10024D090(v0);
}

  ;
}

  ;
}

uint64_t sub_10024D808()
{
  return *(void *)(*(void *)v0 + 40LL);
}

uint64_t sub_10024D820(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_10024D828()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_10024D854(uint64_t a1, uint64_t *a2)
{
  return sub_1001AFF14(a2);
}

uint64_t sub_10024D864@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v3, v1);
}

void sub_10024D874(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v2 + 48) + 8 * a1) = v1;
  ++*(void *)(v2 + 16);
}

  ;
}

  ;
}

uint64_t sub_10024D8BC()
{
  return sub_1001D8CA0(v0, v1, v2);
}

void sub_10024D8CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t sub_10024D8DC()
{
  return sub_1001B4B94(0LL, v1, v0);
}

uint64_t sub_10024D8EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_bridgeObjectRelease(a12);
}

  ;
}

  ;
}

id sub_10024D91C(uint64_t a1, uint64_t a2)
{
  return sub_100244E68(a1, a2);
}

Swift::Int sub_10024D924()
{
  return NSObject._rawHashValue(seed:)(*(void *)(v0 + 40));
}

id sub_10024D930()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

  ;
}

id sub_10024D950(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id sub_10024D95C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

void sub_10024D968()
{
}

uint64_t sub_10024D974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(a1, va, a1, a4);
}

  ;
}

uint64_t sub_10024D98C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

  ;
}

uint64_t sub_10024D9A4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1));
}

uint64_t sub_10024D9B0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_10024D9BC(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

id sub_10024D9C4(id a1, SEL a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, a2, a3, a4, 0, 0);
}

  ;
}

  ;
}

uint64_t sub_10024D9F8(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_10024DA04()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10024DA0C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(reflecting:)(va, a2);
}

void *sub_10024DA14(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

  ;
}

uint64_t sub_10024DA30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *uint64_t v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

void sub_10024DA3C()
{
}

uint64_t sub_10024DA44()
{
  return __CocoaSet.Iterator.next()();
}

  ;
}

void sub_10024DA60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

  ;
}

void sub_10024DA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10024DA88(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x4364000000000000LL;
}

id sub_10024DA9C( int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(v10, a2, a10);
}

uint64_t sub_10024DAA8(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_10024DAB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

id sub_10024DAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return sub_100244EC8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10024DAC8()
{
  return type metadata accessor for DispatchWorkItemFlags(0LL);
}

id sub_10024DAD4()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

id sub_10024DAE0()
{
  return *(id *)(*(void *)(v1 + 48) + 8 * v0);
}

uint64_t sub_10024DAEC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10024DAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10024DB30(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_10024DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10024DBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10024DBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10024DC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10024DC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024DC80);
}

uint64_t sub_10024DC80()
{
  uint64_t v2 = sub_10024E66C();
  return sub_1001AB0AC(v1, v0, v2);
}

uint64_t sub_10024DCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024DCB4);
}

uint64_t sub_10024DCB4()
{
  uint64_t v2 = sub_10024E66C();
  return sub_1001A9670(v1, v0, v0, v2);
}

uint64_t type metadata accessor for ConversationLinkKeyAgreement(uint64_t a1)
{
  uint64_t result = qword_10044A578;
  if (!qword_10044A578) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationLinkKeyAgreement);
  }
  return result;
}

uint64_t sub_10024DD18(uint64_t a1)
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10024DD80(uint64_t a1, unint64_t a2)
{
  if (Data.count.getter() > 27)
  {
    sub_1001BB31C(a1, a2);
    sub_1002593F4(a1, a2);
    AES.GCM.SealedBox.init(combined:)();
  }

  else
  {
    uint64_t v4 = type metadata accessor for CryptoKitError(0LL);
    unint64_t v5 = sub_10024E5FC();
    sub_1001BB4C8(v4, v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104LL))( v6,  enum case for CryptoKitError.incorrectParameterSize(_:),  v4);
    swift_willThrow(v7);
  }

  return sub_10024E688();
}

os_log_s *sub_10024DE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (os_log_s *)&qword_100447A40;
  sub_1001AFF14(&qword_100447A40);
  sub_1001C7334();
  __chkstk_darwin(v8);
  sub_1001B0F00();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for AES.GCM.SealedBox(0LL);
  __chkstk_darwin(v12);
  sub_1001B0F00();
  v30[0] = a1;
  v30[1] = a2;
  uint64_t v13 = type metadata accessor for AES.GCM.Nonce(0LL);
  sub_1001A9670(v11, 1LL, 1LL, v13);
  unint64_t v14 = sub_1001BB428();
  static AES.GCM.seal<A>(_:using:nonce:)(v30, a3, v11, &type metadata for Data, v14);
  uint64_t v15 = sub_1001BB478(v11, &qword_100447A40);
  if (!v3)
  {
    AES.GCM.SealedBox.combined.getter(v15);
    sub_10024E67C();
    if (!v18 & v17)
    {
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v19 = type metadata accessor for Logger(0LL);
      uint64_t v20 = sub_1001B0D98(v19, (uint64_t)qword_1004541B0);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v20, v21, v22);
      os_log_type_t v24 = static os_log_type_t.error.getter(v7, v23);
      if (os_log_type_enabled(v7, v24))
      {
        uint64_t v25 = (uint8_t *)sub_1001BB5EC();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  v24,  "Failed to retrieve combined data from encrypted LMI response",  v25,  2u);
        sub_1001B0E60((uint64_t)v25);
      }

      unint64_t v26 = sub_1001BB360();
      uint64_t v27 = sub_1001BB4C8((uint64_t)&type metadata for ConversationLinkCryptoErrorType, v26);
      *uint64_t v28 = 3;
      swift_willThrow(v27);
      sub_10024E64C();
    }

    else
    {
      uint64_t v7 = v16;
      sub_10024E64C();
    }
  }

  return v7;
}

void sub_10024E038(char *a1, void *a2)
{
  Swift::String v50 = a1;
  uint64_t v5 = type metadata accessor for AES.GCM.SealedBox(0LL);
  v47[0] = *(void *)(v5 - 8);
  v47[1] = v5;
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_1001B0F00();
  uint64_t v48 = v8 - v7;
  uint64_t v49 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v51 = *(void *)(v49 - 8);
  sub_1001C7334();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v47 - v14;
  __chkstk_darwin(v13);
  uint64_t v53 = (char *)v47 - v16;
  sub_1001AFF14(&qword_100447A30);
  sub_1001C7334();
  __chkstk_darwin(v17);
  sub_1001BB560();
  uint64_t v18 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_1001B0F00();
  uint64_t v22 = v21 - v20;
  sub_10024E59C(a2);
  sub_10024E67C();
  if (!v26 & v25)
  {
    __break(1u);
    goto LABEL_14;
  }

  v52[0] = v23;
  v52[1] = v24;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)( v52,  &type metadata for Data,  &protocol witness table for Data);
  if (!v2)
  {
    sub_1001BB544(v3, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v3, v18);
    sub_100258CFC((uint64_t)v15, (uint64_t)v12, v22);
    id v38 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    uint64_t v39 = v49;
    v38(v53, v15, v49);
    v38(v50, v12, v39);
    sub_10022A3EC(a2);
    sub_10024E67C();
    if (!(!v26 & v25))
    {
      uint64_t v42 = v48;
      sub_10024DD80(v40, v41);
      uint64_t v43 = static AES.GCM.open(_:using:)(v42, v53);
      unint64_t v45 = v44;
      id v46 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingConversationMessage);
      sub_1001BB31C(v43, v45);
      if (sub_10024E530())
      {
        sub_1001BB39C(v43, v45);
        sub_10024E65C();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v49);
        sub_10024E63C();
        return;
      }

      goto LABEL_15;
    }

uint64_t sub_10024E42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B0F00();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  sub_1001C7334();
  __chkstk_darwin(v13);
  sub_1001BB560();
  v15[0] = a1;
  v15[1] = a2;
  P256.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)( v15,  &type metadata for Data,  &protocol witness table for Data);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v3, v11, v7);
  sub_10022BE1C(v3, a3);
  return sub_1001A9670(a3, 0LL, 1LL, v12);
}

id sub_10024E530()
{
  if (!v4 & v3)
  {
    v7.super.Class isa = 0LL;
  }

  else
  {
    unint64_t v5 = v2;
    uint64_t v6 = v1;
    v7.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(v6, v5);
  }

  id v8 = [v0 initWithData:v7.super.isa];

  return v8;
}

uint64_t sub_10024E59C(void *a1)
{
  id v1 = [a1 publicKey];
  if (!v1) {
    return 0LL;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_10024E5FC()
{
  unint64_t result = qword_10044A5B0;
  if (!qword_10044A5B0)
  {
    uint64_t v1 = type metadata accessor for CryptoKitError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CryptoKitError, v1);
    atomic_store(result, (unint64_t *)&qword_10044A5B0);
  }

  return result;
}

uint64_t sub_10024E63C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10024E64C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10024E65C()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 144) + 8LL))(v0, *(void *)(v1 - 136));
}

uint64_t sub_10024E66C()
{
  return type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
}

  ;
}

uint64_t sub_10024E688()
{
  return sub_1001BB39C(v1, v0);
}

uint64_t sub_10024E698(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return *(void *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaSet.count.getter(a1);
}

uint64_t sub_10024E6B8(uint64_t a1)
{
  uint64_t v2 = sub_10025118C(a1);
  uint64_t v3 = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v9 = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    unint64_t v5 = (void *)(v1 + 40);
    do
    {
      swift_bridgeObjectRetain(*v5);
      sub_100251174(v8);
      swift_bridgeObjectRelease(v8[1]);
      v5 += 2;
      --v4;
    }

    while (v4);
    sub_1001B0EB8();
    return v9;
  }

  else
  {
    uint64_t v6 = v3;
    sub_1001B0EB8();
  }

  return v6;
}

void sub_10024E754(uint64_t a1)
{
}

void *sub_10024E778(uint64_t a1)
{
  uint64_t v1 = sub_10025118C(a1);
  uint64_t v15 = Set.init(minimumCapacity:)(v1, &type metadata for String, &protocol witness table for String);
  unint64_t result = sub_10023BD50(v16);
  uint64_t v3 = v16[0];
  uint64_t v4 = v16[1];
  int64_t v5 = v16[3];
  unint64_t v6 = v17;
  int64_t v7 = (unint64_t)(v16[2] + 64LL) >> 6;
  if (!v17) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    swift_bridgeObjectRetain(*(void *)(*(void *)(v3 + 48) + 16 * v9 + 8));
    sub_100251174(v14);
    unint64_t result = (void *)swift_bridgeObjectRelease(v14[1]);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10024E8E4(uint64_t a1)
{
  uint64_t v2 = sub_10025118C(a1);
  uint64_t v3 = Set.init(minimumCapacity:)(v2, &type metadata for Int32, &protocol witness table for Int32);
  uint64_t v10 = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      uint64_t v6 = *(unsigned int *)(v1 + 4 * i + 32);
      sub_10024ABE0(&v9, v6);
    }

    sub_1001B0EB8();
    return v10;
  }

  else
  {
    uint64_t v7 = v3;
    sub_1001B0EB8();
  }

  return v7;
}

void sub_10024E96C(uint64_t a1)
{
}

void sub_10024E990(uint64_t a1)
{
}

void sub_10024E9B4( uint64_t a1, unint64_t *a2, void *a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001EE280();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v19);
    sub_1001B0EB8();
  }

  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  sub_1001D8EA0(0LL, a2, a3);
  uint64_t v13 = v12;
  uint64_t v14 = sub_100250F70(a4, a2, a3);
  v20[1] = (id)Set.init(minimumCapacity:)(v11, v13, v14);
  if (!v10)
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v15) {
      goto LABEL_5;
    }
LABEL_16:
    sub_1001B0EB8();
LABEL_17:
    sub_1001C73F4();
    return;
  }

  if (a1 < 0) {
    uint64_t v18 = a1;
  }
  else {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1001EE280();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v18);
  sub_1001B0EB8();
  if (!v15) {
    goto LABEL_16;
  }
LABEL_5:
  if (v15 >= 1)
  {
    for (uint64_t i = 0LL; i != v15; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else {
        id v17 = *(id *)(a1 + 8 * i + 32);
      }
      a5(v20, v17);
    }

    sub_1001B0EB8();
    goto LABEL_17;
  }

  __break(1u);
}

void sub_10024EAFC(uint64_t a1)
{
  uint64_t v1 = sub_10025118C(a1);
  v13[1] = Set.init(minimumCapacity:)(v1, &type metadata for UInt64, &protocol witness table for UInt64);
  sub_10023BD50(v14);
  uint64_t v2 = v14[0];
  uint64_t v3 = v14[1];
  int64_t v4 = v14[3];
  unint64_t v5 = v15;
  int64_t v6 = (unint64_t)(v14[2] + 64LL) >> 6;
  if (!v15) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v8 = v7 | (v4 << 6);
  while (1)
  {
    sub_10024AF3C(v13, *(void *)(*(void *)(v2 + 48) + 8 * v8));
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v9 >= v6) {
      goto LABEL_21;
    }
    unint64_t v10 = *(void *)(v3 + 8 * v9);
    int64_t v11 = v4 + 1;
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(v3 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        unint64_t v10 = *(void *)(v3 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          unint64_t v10 = *(void *)(v3 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            unint64_t v10 = *(void *)(v3 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v4 + 6;
              while (v12 < v6)
              {
                unint64_t v10 = *(void *)(v3 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10024EC4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for HandleType(0LL);
  uint64_t v4 = v3;
  unint64_t v5 = sub_100250FB0();
  uint64_t v6 = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v11 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
      sub_10024B214();
    swift_bridgeObjectRelease(a1);
    return v11;
  }

  else
  {
    uint64_t v9 = v6;
    swift_bridgeObjectRelease(a1);
  }

  return v9;
}

uint64_t sub_10024ECEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  sub_1001D8EA0(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v8 = v7;
  uint64_t v9 = sub_100250F70(&qword_10044A5B8, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v10 = Set.init(minimumCapacity:)(v6, v8, v9);
  uint64_t v20 = v10;
  sub_1002509B0(a1, a2, a3, v21);
  __int128 v16 = v21[0];
  __int128 v17 = v21[1];
  __int128 v18 = v21[2];
  uint64_t v19 = v22;
  uint64_t v11 = sub_1002509EC();
  if (v11)
  {
    int64_t v12 = (void *)v11;
    do
    {
      sub_10024B2E0(&v15, v12);

      int64_t v12 = (void *)sub_1002509EC();
    }

    while (v12);
    uint64_t v10 = v20;
  }

  uint64_t v13 = v22;
  sub_1001B4B8C(v16);
  swift_release(v13);
  return v10;
}

uint64_t CXProviderConfiguration.supportedHandleTypes.getter()
{
  id v1 = [v0 supportedHandleTypes];
  sub_1001D8EA0(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v3 = v2;
  uint64_t v4 = sub_100250F70(&qword_10044A5B8, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v3, v4);

  uint64_t v6 = sub_10024E698(v5);
  if (!v6)
  {
    sub_1001B0EB8();
    int64_t v12 = _swiftEmptyArrayStorage;
    return sub_10024EC4C((uint64_t)v12);
  }

  uint64_t v7 = v6;
  unint64_t v47 = _swiftEmptyArrayStorage;
  sub_100250154(0LL, v6 & ~(v6 >> 63), 0);
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    if (v5 < 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaSet.startIndex.getter(v8);
    char v11 = 1;
  }

  else
  {
    uint64_t result = sub_100250EF0(v5);
    char v11 = v13 & 1;
  }

  uint64_t v44 = result;
  uint64_t v45 = v10;
  char v46 = v11;
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    uint64_t v14 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v5 < 0) {
      uint64_t v14 = v5;
    }
    uint64_t v42 = v14;
    do
    {
      uint64_t v16 = v44;
      uint64_t v15 = v45;
      char v17 = v46;
      uint64_t v18 = sub_100251118();
      sub_100250C4C(v18, v19, v20, v21, &qword_100448780);
      uint64_t v23 = v22;
      id v24 = [v22 integerValue];

      char v25 = v47;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v47);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100250154(0LL, v25[2] + 1LL, 1);
        char v25 = v47;
      }

      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        uint64_t result = (uint64_t)sub_100250154((char *)(v26 > 1), v27 + 1, 1);
        char v25 = v47;
      }

      void v25[2] = v27 + 1;
      v25[v27 + 4] = v24;
      if ((v5 & 0xC000000000000001LL) != 0)
      {
        if ((v17 & 1) == 0) {
          goto LABEL_28;
        }
        uint64_t v28 = __CocoaSet.Index.handleBitPattern.getter(v16, v15);
        if (v28) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v39 = sub_1001AFF14(&qword_10044A5C0);
        uint64_t v40 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v43, v39);
        __CocoaSet.formIndex(after:isUnique:)(v41, isUniquelyReferenced_nonNull_native, v42);
        v40(v43, 0LL);
      }

      else
      {
        int64_t v30 = sub_100251118();
        int64_t v34 = sub_100250B40(v30, v31, v32, v33);
        uint64_t v36 = v35;
        char v38 = v37;
        sub_1001D8CA0(v16, v15, v17);
        uint64_t v44 = v34;
        uint64_t v45 = v36;
        char v46 = v38 & 1;
      }

      --v7;
    }

    while (v7);
    sub_1001D8CA0(v44, v45, v46);
    sub_1001B0EB8();
    int64_t v12 = v47;
    return sub_10024EC4C((uint64_t)v12);
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void CXProviderConfiguration.supportedHandleTypes.setter(uint64_t a1)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  [v1 setSupportedHandleTypes:isa];
}

NSNumber sub_10024F158@<X0>(NSNumber *a1@<X8>)
{
  result.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  a1->super.super.Class isa = result.super.super.isa;
  return result;
}

void CXProviderConfiguration.supportedHandleTypes.modify(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = CXProviderConfiguration.supportedHandleTypes.getter();
  sub_1001AA978();
}

void sub_10024F1B0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = sub_1001EE280();
    CXProviderConfiguration.supportedHandleTypes.setter(v3);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    CXProviderConfiguration.supportedHandleTypes.setter(*a1);
  }

char *sub_10024F1F0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    NSNumber result = (char *)sub_100251004( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10025101C(a3, result);
  }

  return result;
}

char *sub_10024F248(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_10024F2D4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    NSNumber result = (char *)sub_100251004( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10025101C(a3, result);
  }

  return result;
}

char *sub_10024F32C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    NSNumber result = (char *)sub_100251004( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10025101C(a3, result);
  }

  return result;
}

void sub_10024F38C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251004( (uint64_t)"Fatal error",  v6,  v7,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v8,  v9,  (uint64_t)"Swift/UnsafePointer.swift",  v10,  v11,  v12,  v13);
    __break(1u);
  }

  else
  {
    sub_100251160();
    if (v4 && (type metadata accessor for URLQueryItem(0LL), sub_100251138(), !v5 & v4))
    {
      if (v3 == v2)
      {
        sub_100021D74();
      }

      else
      {
        sub_100251098();
        sub_1002510B4();
      }
    }

    else
    {
      type metadata accessor for URLQueryItem(0LL);
      sub_100251098();
      sub_1002510C4();
    }
  }

char *sub_10024F414(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_10024F4A0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    NSNumber result = (char *)sub_100251004( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10025101C(a3, result);
  }

  return result;
}

char *sub_10024F500(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

char *sub_10024F584(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    NSNumber result = (char *)sub_100251004( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10025101C(a3, result);
  }

  return result;
}

void sub_10024F5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10024F5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10024F5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251004( (uint64_t)"Fatal error",  v9,  v10,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v11,  v12,  (uint64_t)"Swift/UnsafePointer.swift",  v13,  v14,  v15,  v16);
    __break(1u);
  }

  else
  {
    sub_100251160();
    if (v7 && (sub_1001AFF14(a4), sub_100251138(), !v8 & v7))
    {
      if (v5 == v4)
      {
        sub_100021D74();
      }

      else
      {
        sub_100251098();
        sub_1002510B4();
      }
    }

    else
    {
      sub_1001AFF14(a4);
      sub_100251098();
      sub_1002510C4();
    }
  }

uint64_t sub_10024F680(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return sub_1002510AC(a3, a1);
    }
    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void *sub_10024F718(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[24 * a2] <= __src || &__src[24 * a2] <= __dst) {
      return memcpy(__dst, __src, 24 * a2);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_10024F7E4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[32 * a2] <= __src || &__src[32 * a2] <= __dst) {
      return memcpy(__dst, __src, 32 * a2);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10024F8AC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    if (a3 + 48 * a2 <= a1 || a1 + 48 * a2 <= a3) {
      return sub_1002510AC(a3, a1);
    }
    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10024F948(uint64_t a1, uint64_t a2)
{
  return sub_10024FB88(a1, a2);
}

uint64_t sub_10024F954(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return sub_1002510AC(a3, a1);
    }
    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10024F9F0(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FA04(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    sub_10025107C();
    if (!v7 && v6)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_1001D8EA0(0LL, v3, v4);
      uint64_t v8 = sub_100251068();
      return sub_100251038(v8, v9);
    }

    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10024FA98(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FAAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3, a1);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10024FB7C(uint64_t a1, uint64_t a2)
{
  return sub_10024FB88(a1, a2);
}

uint64_t sub_10024FB88(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    sub_10025107C();
    if (!v6 & v5) {
      BOOL v7 = v4 > v2;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      v3(0LL);
      uint64_t v8 = sub_100251068();
      return sub_100251038(v8, v9);
    }

    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10024FC14(uint64_t a1, uint64_t a2)
{
  return sub_10024FB88(a1, a2);
}

uint64_t sub_10024FC20(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FC34(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)(sub_1001AFF14(&qword_100447E10) - 8) + 72LL) * a2;
    unint64_t v6 = a3 + v5;
    unint64_t v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3) {
      return swift_arrayInitWithCopy(a3, a1);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10024FD2C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    unint64_t v3 = a1 + 40 * a2;
    if (a3 + 40 * a2 > a1)
    {
      BOOL v4 = v3 >= a3;
      BOOL v5 = v3 == a3;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1001AFF14((uint64_t *)&unk_10044CD80);
      uint64_t v6 = sub_100251068();
      return sub_100251038(v6, v7);
    }

    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

void *sub_10024FDD4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst) {
      return memcpy(__dst, __src, 8 * a2);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10024FE9C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    sub_10025107C();
    if (!v6 && v5)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5)
    {
      sub_1001AFF14(v3);
      uint64_t v7 = sub_100251068();
      return sub_100251038(v7, v8);
    }

    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10024FF28(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FF3C(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FF50(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FF64(uint64_t a1, uint64_t a2)
{
  return sub_10024FA04(a1, a2);
}

uint64_t sub_10024FF78(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100250FF0();
    sub_100251058();
  }

  else
  {
    unint64_t v3 = a1 + 16 * a2;
    if (a3 + 16 * a2 > a1)
    {
      BOOL v4 = v3 >= a3;
      BOOL v5 = v3 == a3;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1001AFF14((uint64_t *)&unk_10044CD30);
      uint64_t v6 = sub_100251068();
      return sub_100251038(v6, v7);
    }

    sub_100250FF0();
    sub_100251048();
  }

  uint64_t result = sub_10025102C(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

void sub_10025001C()
{
  *unint64_t v0 = v1;
}

void sub_100250050(char a1, uint64_t a2, char a3)
{
  *unint64_t v3 = v4;
}

char *sub_10025006C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100250294(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100250088()
{
  *unint64_t v0 = v1;
}

void sub_1002500BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *unint64_t v3 = v4;
}

void sub_1002500E8()
{
  *unint64_t v0 = v1;
}

size_t sub_10025011C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1002504F8(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_100250138(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10025064C(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_100250154(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100250734(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100250170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *unint64_t v3 = v4;
}

char *sub_10025019C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1002508D0(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1002501B8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1002510E4();
    if (v7 != v8)
    {
      sub_10025112C();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1002510D4();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t v12 = (char *)sub_1001E909C(v11, 16 * v10);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  uint64_t v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_10024F1F0(v15, v9, v14);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024F680((unint64_t)v15, v9, (unint64_t)v14);
  }

  sub_100207134();
}

void sub_100250278()
{
}

char *sub_100250294(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_10044CDA0);
    uint64_t v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10024F32C(v14, v8, v13);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024F8AC((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

void sub_10025037C()
{
  if ((v6 & 1) != 0)
  {
    sub_1002510E4();
    if (v10 != v11)
    {
      sub_10025112C();
      if (v10)
      {
        __break(1u);
        return;
      }

      sub_1002510D4();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    uint64_t v14 = sub_100251198(v4, v5, v6, v7, v8);
    uint64_t v15 = (void *)sub_1001E909C(v14, 32 * v13);
    size_t v16 = j__malloc_size(v15);
    void v15[2] = v12;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 32);
  }

  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }

  int v17 = v15 + 4;
  uint64_t v18 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v18, v12, v17);
    *(void *)(v0 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v18, v12, v17);
  }

  sub_100207134();
  sub_1001B0F4C();
}

void sub_10025042C()
{
  if ((v6 & 1) != 0)
  {
    sub_1002510E4();
    if (v10 != v11)
    {
      sub_10025112C();
      if (v10)
      {
        __break(1u);
        return;
      }

      sub_1002510D4();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    uint64_t v14 = sub_100251198(v4, v5, v6, v7, v8);
    uint64_t v15 = (void *)swift_allocObject(v14, 24 * v13 + 32, 7LL);
    size_t v16 = j__malloc_size(v15);
    void v15[2] = v12;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
  }

  else
  {
    uint64_t v15 = &_swiftEmptyArrayStorage;
  }

  int v17 = v15 + 4;
  uint64_t v18 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v18, v12, v17);
    *(void *)(v0 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v18, v12, v17);
  }

  sub_100207134();
}

size_t sub_1002504F8(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1001AFF14(&qword_10044A5C8);
  uint64_t v11 = *(void *)(sub_1001AFF14(&qword_100447E10) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(sub_1001AFF14(&qword_100447E10) - 8) + 80LL);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (unint64_t)v15 + v18;
  unint64_t v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_10024F5F4(v20, v8, v19, &qword_100447E10);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024FC34(v20, v8, v19);
  }

  swift_release(a4);
  return (size_t)v15;
}

char *sub_10025064C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1001AFF14(&qword_10044A5F8);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10024F4A0(v14, v8, v13);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024FD2C((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

char *sub_100250734(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1001AFF14(&qword_10044A620);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10024F500(v14, v8, v13);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024FDD4(v14, v8, v13);
  }

  swift_release(a4);
  return v11;
}

void sub_100250814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1002510E4();
    if (v8 != v9)
    {
      sub_10025112C();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_1002510D4();
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_100251198(a1, a2, a3, a4, a5);
    uint64_t v13 = (char *)sub_1001E909C(v12, 8 * v11);
    size_t v14 = j__malloc_size(v13);
    *((void *)v13 + 2) = v10;
    *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 8);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v15 = (char *)(a4 + 32);
  if ((v6 & 1) != 0)
  {
    sub_10024F584(v15, v10, v13 + 32);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024FE9C((uint64_t)v15, v10);
  }

  sub_100207134();
  sub_1001B0F4C();
}

char *sub_1002508D0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1001AFF14(&qword_10044A5D0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  size_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10024F1F0(v14, v8, v13);
    *(void *)(a4 + ++*(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10024FF78((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_1002509B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t result = a1 + 56;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1002509EC()
{
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v2 = v0[3];
  unint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (v1)
  {
    uint64_t v4 = (v1 - 1) & v1;
    unint64_t v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    uint64_t v6 = *(void *)(*(void *)(*v0 + 48LL) + 8 * v5);
    v0[3] = v3;
    v0[4] = v4;
    uint64_t v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    size_t v16 = v6;
    v7(&v15, &v16);
    return v15;
  }

  uint64_t v9 = v2 + 1;
  if (__OFADD__(v2, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = (unint64_t)(v0[2] + 64LL) >> 6;
    if (v9 < v10)
    {
      uint64_t v11 = v0[1];
      size_t v12 = *(void *)(v11 + 8 * v9);
      if (v12)
      {
LABEL_7:
        uint64_t v4 = (v12 - 1) & v12;
        unint64_t v5 = __clz(__rbit64(v12)) + (v9 << 6);
        int64_t v3 = v9;
        goto LABEL_3;
      }

      uint64_t v13 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v10)
      {
        size_t v12 = *(void *)(v11 + 8 * v13);
        if (v12)
        {
LABEL_10:
          uint64_t v9 = v13;
          goto LABEL_7;
        }

        int64_t v3 = v2 + 2;
        if (v2 + 3 < v10)
        {
          size_t v12 = *(void *)(v11 + 8 * (v2 + 3));
          if (v12)
          {
            uint64_t v9 = v2 + 3;
            goto LABEL_7;
          }

          uint64_t v13 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v10)
          {
            size_t v12 = *(void *)(v11 + 8 * v13);
            if (v12) {
              goto LABEL_10;
            }
            uint64_t v9 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v10)
            {
              size_t v12 = *(void *)(v11 + 8 * v9);
              if (v12) {
                goto LABEL_7;
              }
              int64_t v3 = v10 - 1;
              size_t v14 = v2 + 6;
              while (v14 < v10)
              {
                size_t v12 = *(void *)(v11 + 8 * v14++);
                if (v12)
                {
                  uint64_t v9 = v14 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v3;
    v0[4] = 0LL;
  }

  return result;
}

int64_t sub_100250B40(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

void sub_100250C24(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100250C38(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100250C4C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v14 = __CocoaSet.Index.element.getter(v9, a2);
        sub_1002510F4();
        uint64_t v16 = v15;
        swift_unknownObjectRetain(v14);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
        a5 = v28;
        swift_unknownObjectRelease(v14);
        Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v18 = -1LL << *(_BYTE *)(a4 + 32);
        uint64_t v9 = v17 & ~v18;
        sub_10025114C();
        if ((v19 & 1) != 0)
        {
          id v20 = sub_100251180();
          char v21 = sub_100251108((uint64_t)v20);

          if ((v21 & 1) == 0)
          {
            uint64_t v22 = ~v18;
            do
            {
              uint64_t v9 = (v9 + 1) & v22;
              sub_10025114C();
              if ((v23 & 1) == 0) {
                goto LABEL_24;
              }
              id v24 = sub_100251180();
              char v25 = sub_100251108((uint64_t)v24);
            }

            while ((v25 & 1) == 0);
          }

LABEL_20:
          id v26 = *(id *)(*(void *)(a4 + 48) + 8 * v9);
          return;
        }

void sub_100250E38(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2)
  {
    swift_bridgeObjectRetain(*(void *)(*(void *)(a4 + 48) + 16 * a1 + 8));
    sub_1001AA978();
    return;
  }

void sub_100250EB0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100250EC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100250ED8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_100250EF0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100250F70(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1001D8EA0(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100250FB0()
{
  unint64_t result = qword_10044A618;
  if (!qword_10044A618)
  {
    type metadata accessor for HandleType(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10037A828, v1);
    atomic_store(result, (unint64_t *)&qword_10044A618);
  }

  return result;
}

  ;
}

uint64_t sub_100251004( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

void *sub_10025101C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10025102C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_100251038(uint64_t a1, uint64_t a2)
{
  return swift_arrayInitWithCopy(a1, a2);
}

  ;
}

  ;
}

uint64_t sub_100251068()
{
  return v0;
}

  ;
}

uint64_t sub_100251098()
{
  return v0;
}

uint64_t sub_1002510AC(uint64_t a1, uint64_t a2)
{
  return swift_arrayInitWithCopy(a1, a2);
}

uint64_t sub_1002510B4()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_1002510C4()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

  ;
}

  ;
}

void sub_1002510F4()
{
}

uint64_t sub_100251108(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_100251118()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100251174(uint64_t *a1)
{
  return sub_10024AA5C(a1, v1, v2);
}

id sub_100251180()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

uint64_t sub_10025118C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_100251198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1001AFF14(a5);
}

  ;
}

void *sub_1002511B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    unint64_t v7 = (void *)a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *((_BYTE *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    id v12 = v7;
    if (sub_1001AB0AC((uint64_t)v10, 1LL, v11))
    {
      uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_10044A400);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_1001A9670((uint64_t)v9, 0LL, 1LL, v11);
    }

    *((_BYTE *)v4 + *(int *)(a3 + 36)) = *((_BYTE *)a2 + *(int *)(a3 + 36));
  }

  return v4;
}

uint64_t sub_1002512C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t result = sub_1001AB0AC(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t sub_100251330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  id v11 = v6;
  if (sub_1001AB0AC((uint64_t)v9, 1LL, v10))
  {
    uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100251414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  unsigned int v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (void *)(a1 + v9);
  id v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  int v13 = sub_1001AB0AC((uint64_t)v10, 1LL, v12);
  int v14 = sub_1001AB0AC((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  sub_1001A9670((uint64_t)v10, 0LL, 1LL, v12);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100251550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 32);
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  if (sub_1001AB0AC((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100251628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;

  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  int v12 = sub_1001AB0AC((uint64_t)v9, 1LL, v11);
  int v13 = sub_1001AB0AC((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  sub_1001A9670((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100251758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100251764);
}

uint64_t sub_100251764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    return sub_1001AB0AC(a1 + *(int *)(a3 + 32), a2, v8);
  }

uint64_t sub_1002517DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002517E8);
}

uint64_t sub_1002517E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    return sub_1001A9670(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for SoundDescriptor(uint64_t a1)
{
  uint64_t result = qword_10044A680;
  if (!qword_10044A680) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundDescriptor);
  }
  return result;
}

void sub_100251890(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = &unk_10037DA28;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1001B0298(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(v2 - 8) + 64LL;
    v4[5] = &unk_10037DA28;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t sub_100251920@<X0>(id a1@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X8>)
{
  id v8 = [a1 provider];
  unsigned __int8 v9 = [a1 isVideo];
  id v10 = [a1 soundRegion];

  uint64_t v11 = sub_10020F520();
  uint64_t v12 = a4 + *(int *)(v11 + 32);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t result = sub_1001A9670(v12, 1LL, 1LL, v13);
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + ++*(void *)(v0 + 16) = v9;
  *(void *)(a4 + 24) = v10;
  *(_BYTE *)(a4 + *(int *)(v11 + 36)) = a3;
  return result;
}

uint64_t sub_1002519E8(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = type metadata accessor for UUID(0LL);
  uint64_t v76 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  sub_1001D9040();
  uint64_t v75 = v4;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v5);
  sub_1001D9040();
  uint64_t v78 = v6;
  uint64_t v77 = sub_1001AFF14((uint64_t *)&unk_100447EC0);
  sub_1001B0E88();
  __chkstk_darwin(v7);
  sub_1001D9040();
  uint64_t v79 = v8;
  uint64_t v81 = sub_10020F520();
  sub_1001B0E88();
  __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BB5CC();
  __chkstk_darwin(v11);
  sub_10022D1EC();
  uint64_t v85 = v12;
  sub_1001BB5CC();
  __chkstk_darwin(v13);
  sub_10022D1EC();
  uint64_t v87 = v14;
  sub_1001BB5CC();
  __chkstk_darwin(v15);
  sub_10022D1EC();
  uint64_t v84 = v16;
  sub_1001BB5CC();
  __chkstk_darwin(v17);
  sub_10022D1EC();
  uint64_t v83 = v18;
  sub_1001BB5CC();
  __chkstk_darwin(v19);
  sub_10022D1EC();
  uint64_t v82 = v20;
  sub_1001BB5CC();
  uint64_t v22 = __chkstk_darwin(v21);
  id v24 = (char *)&v74 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v74 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  int64_t v30 = (char *)&v74 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v74 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (uint64_t *)((char *)&v74 - v35);
  __chkstk_darwin(v34);
  char v38 = (uint64_t *)((char *)&v74 - v37);
  sub_100252240(a1, (uint64_t)&v74 - v37);
  sub_100252240(a2, (uint64_t)v36);
  uint64_t v39 = *v38;
  uint64_t v40 = *v36;
  sub_100252284((uint64_t)v36);
  uint64_t v41 = (uint64_t)v38;
  uint64_t v42 = a2;
  sub_100252284(v41);
  sub_100252240(a1, (uint64_t)v33);
  sub_100252240(a2, (uint64_t)v30);
  if (v39 != v40)
  {
    sub_100252284((uint64_t)v33);
    sub_100252390();
    sub_100252388(a1);
    sub_100252378(a2);
    uint64_t v44 = a1;
    goto LABEL_9;
  }

  sub_1001B9D8C();
  char v43 = static NSObject.== infix(_:_:)(*((void *)v33 + 1), *((void *)v30 + 1));
  sub_100252284((uint64_t)v33);
  sub_100252390();
  sub_100252388(a1);
  sub_100252378(a2);
  uint64_t v44 = a1;
  if ((v43 & 1) == 0)
  {
LABEL_9:
    sub_100252348();
    sub_100252370();
    sub_100252368(v44);
    sub_100252388(a2);
    uint64_t v50 = v85;
    goto LABEL_10;
  }

  int v45 = v27[16];
  sub_100252370();
  int v46 = v24[16];
  sub_100252348();
  uint64_t v47 = v82;
  sub_100252368(a1);
  uint64_t v48 = v83;
  sub_100252388(v42);
  uint64_t v50 = v85;
  uint64_t v49 = v86;
  if (v45 != v46)
  {
LABEL_10:
    sub_100252370();
    sub_100252380();
    sub_100252378(v44);
    sub_100252368(v42);
    goto LABEL_11;
  }

  uint64_t v51 = *(void *)(v47 + 24);
  uint64_t v52 = *(void *)(v48 + 24);
  sub_100252370();
  sub_100252380();
  uint64_t v53 = v84;
  sub_100252378(v44);
  uint64_t v54 = v87;
  sub_100252368(v42);
  if (v51 != v52)
  {
LABEL_11:
    sub_100252380();
    sub_100252348();
LABEL_12:
    sub_10025235C();
    sub_100252350();
    goto LABEL_13;
  }

  uint64_t v55 = v81;
  uint64_t v56 = *(int *)(v81 + 32);
  uint64_t v57 = v54 + v56;
  uint64_t v58 = v79;
  uint64_t v59 = v79 + *(int *)(v77 + 48);
  sub_1002522C0(v53 + v56, v79);
  sub_1002522C0(v57, v59);
  uint64_t v60 = v80;
  if (sub_1001AB0AC(v58, 1LL, v80) == 1)
  {
    sub_100252380();
    sub_100252348();
    uint64_t v61 = sub_1001AB0AC(v59, 1LL, v60);
    if ((_DWORD)v61 == 1)
    {
      sub_1002523B0(v61, (uint64_t *)&unk_10044A400);
      sub_10025235C();
      sub_100252350();
LABEL_19:
      uint64_t v72 = v55;
      char v73 = *(_BYTE *)(v50 + *(int *)(v55 + 36));
      sub_100252284(v50);
      LOBYTE(v72) = v49[*(int *)(v72 + 36)];
      sub_100252390();
      char v62 = v73 ^ v72 ^ 1;
      return v62 & 1;
    }

    goto LABEL_17;
  }

  uint64_t v64 = v78;
  sub_1002522C0(v58, v78);
  int v65 = sub_1001AB0AC(v59, 1LL, v60);
  uint64_t v66 = v76;
  if (v65 == 1)
  {
    sub_100252284(v87);
    sub_100252348();
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v64, v60);
LABEL_17:
    sub_1002523B0(v61, (uint64_t *)&unk_100447EC0);
    goto LABEL_12;
  }

  uint64_t v67 = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v75, v59, v60);
  unint64_t v68 = sub_100252308();
  char v69 = dispatch thunk of static Equatable.== infix(_:_:)(v78, v67, v60, v68);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
  v70(v67, v60);
  sub_100252284(v87);
  sub_100252348();
  uint64_t v71 = ((uint64_t (*)(uint64_t, uint64_t))v70)(v78, v60);
  sub_1002523B0(v71, (uint64_t *)&unk_10044A400);
  sub_10025235C();
  sub_100252350();
  uint64_t v55 = v81;
  if ((v69 & 1) != 0) {
    goto LABEL_19;
  }
LABEL_13:
  sub_100252390();
  sub_100252284(v50);
  char v62 = 0;
  return v62 & 1;
}

uint64_t sub_100251F18()
{
  uint64_t v1 = v0;
  uint64_t v42 = *(void *)v0;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v2);
  sub_1001D9020();
  sub_1001E4378();
  v3._countAndFlagsBits = 0x707954646E756F73LL;
  v3._object = (void *)0xEA00000000003D65LL;
  String.append(_:)(v3);
  sub_1001D9020();
  id v4 = *(id *)(v0 + 8);
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease(v8);
  sub_1001E4378();
  int v10 = sub_1002523A8();
  sub_100252398(v10, v11, v12, v13, v14, v15, v16, v17, v40, v42, 16);
  sub_1001D9020();
  swift_bridgeObjectRelease(0xE90000000000003DLL);
  if (*(_BYTE *)(v1 + 16)) {
    uint64_t v18 = 1702195828LL;
  }
  else {
    uint64_t v18 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v1 + 16)) {
    unint64_t v19 = 0xE400000000000000LL;
  }
  else {
    unint64_t v19 = 0xE500000000000000LL;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease(v19);
  sub_1001E4378();
  int v21 = sub_1002523A8();
  sub_100252398(v21, v22, v23, v24, v25, v26, v27, v28, v41, v43, v44);
  sub_1001D9020();
  swift_bridgeObjectRelease(0xE800000000000000LL);
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v29._object;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(object);
  sub_1001E4378();
  sub_1002523A8();
  v31._countAndFlagsBits = 0x3D6E6F69676572LL;
  v31._object = (void *)0xE700000000000000LL;
  String.append(_:)(v31);
  sub_1001D9020();
  swift_bridgeObjectRelease(0xE700000000000000LL);
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v32 = sub_10020F520();
  BOOL v33 = *(_BYTE *)(v1 + *(int *)(v32 + 36)) == 0;
  else {
    uint64_t v34 = 0x65736C6166LL;
  }
  if (v33) {
    unint64_t v35 = 0xE500000000000000LL;
  }
  else {
    unint64_t v35 = 0xE400000000000000LL;
  }
  unint64_t v36 = v35;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease(v35);
  sub_1001E4378();
  swift_bridgeObjectRetain(0x8000000100373980LL);
  v37._countAndFlagsBits = 0xD000000000000019LL;
  v37._object = (void *)0x80000001003739A0LL;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(0x8000000100373980LL);
  swift_bridgeObjectRelease(0x80000001003739A0LL);
  swift_bridgeObjectRetain(0x8000000100373980LL);
  v38._countAndFlagsBits = 41LL;
  v38._object = (void *)0xE100000000000000LL;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(0x8000000100373980LL);
  return *(void *)v45;
}

uint64_t sub_100252240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptor(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100252284(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SoundDescriptor(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1002522C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100252308()
{
  unint64_t result = qword_10044AE20;
  if (!qword_10044AE20)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10044AE20);
  }

  return result;
}

uint64_t sub_100252348()
{
  return sub_100252284(v0);
}

uint64_t sub_100252350()
{
  return sub_100252240(v1, v0);
}

uint64_t sub_10025235C()
{
  return sub_100252240(v0, v1);
}

uint64_t sub_100252368(uint64_t a1)
{
  return sub_100252240(a1, v1);
}

uint64_t sub_100252370()
{
  return sub_100252284(v0);
}

uint64_t sub_100252378(uint64_t a1)
{
  return sub_100252240(a1, v1);
}

uint64_t sub_100252380()
{
  return sub_100252284(v0);
}

uint64_t sub_100252388(uint64_t a1)
{
  return sub_100252240(a1, v1);
}

uint64_t sub_100252390()
{
  return sub_100252284(v0);
}

void sub_100252398( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t sub_1002523A8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1002523B0(uint64_t a1, uint64_t *a2)
{
  return sub_1001BB478(v2, a2);
}

id sub_1002523B8(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithName:v5];

  return v6;
}

id sub_100252428()
{
  id result = sub_1002523B8(0xD000000000000025LL, 0x8000000100373A10LL);
  qword_10044A6C8 = (uint64_t)result;
  return result;
}

id sub_100252480()
{
  if (qword_1004468F8 != -1) {
    swift_once(&qword_1004468F8, sub_100252428);
  }
  return (id)qword_10044A6C8;
}

id sub_1002524C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for FaceTimeSyncIDSService();
  id v9 = objc_msgSendSuper2(&v11, "initWithName:service:queryController:", v8, a3, a4);

  return v9;
}

id sub_1002525AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeSyncIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeSyncIDSService()
{
  return objc_opt_self(&OBJC_CLASS___CSDFaceTimeSyncIDSService);
}

id sub_100252600()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_super v2 = &v0[OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler];
  *objc_super v2 = 0LL;
  v2[1] = 0LL;
  v0[OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor] = 1;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for HoldMusicProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd17HoldMusicProvider);
}

void *destroy for HoldMusicProvider.SpeechSynthesizerEvent(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release(result[1]);
  }
  return result;
}

uint64_t _s13callservicesd17HoldMusicProviderC22SpeechSynthesizerEventOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain(v3);
  }

  return a1;
}

unint64_t *assignWithCopy for HoldMusicProvider.SpeechSynthesizerEvent( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      swift_retain(v7);
      return a1;
    }

unint64_t *assignWithTake for HoldMusicProvider.SpeechSynthesizerEvent( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      return a1;
    }

uint64_t getEnumTagSinglePayload for HoldMusicProvider.SpeechSynthesizerEvent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HoldMusicProvider.SpeechSynthesizerEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)id result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)id result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + ++*(void *)(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + ++*(void *)(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)id result = a2 + 1;
    }
  }

  return result;
}

void *sub_1002528CC(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *id result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HoldMusicProvider.SpeechSynthesizerEvent()
{
  return &type metadata for HoldMusicProvider.SpeechSynthesizerEvent;
}

void sub_1002528FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor) == 1)
  {
    unsigned int v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler + 8);
    *unsigned int v4 = a1;
    v4[1] = a2;
    sub_1001B5D70(a1, a2);
    sub_1001B5D3C(v5, v6);
    *(_BYTE *)(v2 + sub_10024772C(0LL, v2, v3) = 0;
  }

  else
  {
    id v8 = sub_100170614();
    uint64_t v7 = static os_log_type_t.default.getter(v8);
    os_log(_:dso:log:type:_:)( "Asked to begin or update playback of hold music but new descriptor is equal to activeDescriptor so doing nothing",  112LL,  2LL,  &_mh_execute_header,  v8,  v7,  _swiftEmptyArrayStorage);
  }

uint64_t sub_1002529B8()
{
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor) = 1;
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_speechSynthesizerEventHandler + 8);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  return sub_1001B5D3C(v2, v3);
}

uint64_t sub_1002529E0(int a1)
{
  unint64_t v1 = 0xE700000000000000LL;
  uint64_t v2 = 0x64656C62616E65LL;
  unint64_t v3 = 0xE700000000000000LL;
  uint64_t v4 = 0x6E776F6E6B6E75LL;
  if (!a1)
  {
    uint64_t v4 = 0x64656C6261736964LL;
    unint64_t v3 = 0xE800000000000000LL;
  }

  if (a1 != 1)
  {
    uint64_t v2 = v4;
    unint64_t v1 = v3;
  }

  BOOL v5 = a1 == 2;
  if (a1 == 2) {
    uint64_t v6 = 0x646573756170LL;
  }
  else {
    uint64_t v6 = v2;
  }
  if (v5) {
    unint64_t v7 = 0xE600000000000000LL;
  }
  else {
    unint64_t v7 = v1;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  return swift_bridgeObjectRelease(v7);
}

uint64_t AVCSessionMediaState.description.getter(int a1)
{
  uint64_t v1 = 0x64656C62616E65LL;
  uint64_t v2 = 0x6E776F6E6B6E75LL;
  if (!a1) {
    uint64_t v2 = 0x64656C6261736964LL;
  }
  if (a1 != 1) {
    uint64_t v1 = v2;
  }
  if (a1 == 2) {
    return 0x646573756170LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100252AE8()
{
  return AVCSessionMediaState.description.getter(*v0);
}

uint64_t AVCSessionMediaType.description.getter(int a1)
{
  uint64_t v1 = 0x7065526E696F63LL;
  uint64_t v2 = 0x6E776F6E6B6E75LL;
  if (a1 == 6) {
    uint64_t v2 = 0x6F576172656D6163LL;
  }
  if (a1 != 8) {
    uint64_t v1 = v2;
  }
  if (a1 == 1) {
    return 0x6172656D6163LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100252B68()
{
  return AVCSessionMediaType.description.getter(*v0);
}

uint64_t sub_100252B70(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v2 = sub_1001D7048(1LL);
  if ((v3 & 1) == 0) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * v2);
  sub_1001C9E74(6LL, a1);
  if ((v5 & 0x100000000LL) != 0) {
    return 0LL;
  }
  int v6 = v5;
  sub_1001C9E74(8LL, a1);
  if ((v7 & 0x100000000LL) == 0)
  {
    int v8 = v7;
    _StringGuts.grow(_:)(56LL);
    v9._countAndFlagsBits = 0x6361736E6172745BLL;
    v9._object = (void *)0xEF3A44496E6F6974LL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    object = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(object);
    v12._countAndFlagsBits = sub_1002536BC();
    v12._object = (void *)0xE90000000000003ALL;
    String.append(_:)(v12);
    sub_1002529E0(v4);
    v13._countAndFlagsBits = sub_1002536BC();
    v13._object = (void *)0xED00003A666C6F57LL;
    String.append(_:)(v13);
    sub_1002529E0(v6);
    v14._countAndFlagsBits = 0x65526E696F632E20LL;
    v14._object = (void *)0xEA00000000003A70LL;
    String.append(_:)(v14);
    sub_1002529E0(v8);
    v15._countAndFlagsBits = 93LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
  }

  return 0LL;
}

uint64_t sub_100252CF4(unint64_t a1, int a2, uint64_t a3, int a4)
{
  return sub_100252E68(a1, a3) & (a2 == a4);
}

uint64_t sub_100252D28(uint64_t a1, uint64_t a2)
{
  return sub_100252CF4(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

uint64_t sub_100252D44()
{
  return sub_100252B70(*v0);
}

unint64_t sub_100252D50()
{
  unint64_t v1 = 0xD000000000000012LL;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_session);

  if (Strong) {
    return 0xD00000000000001ALL;
  }
  uint64_t v3 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_remoteParticipant);
  if (v3)
  {
    int v4 = (void *)v3;
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    [v4 participantID];
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._countAndFlagsBits = 14889LL;
    v7._object = (void *)0xE200000000000000LL;
    String.append(_:)(v7);

    return 0xD00000000000001FLL;
  }

  return v1;
}

unint64_t sub_100252E68(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1LL;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }

void sub_100252FE4(void *a1, void *a2)
{
  if (a1 == a2 || a1[2] != a2[2]) {
    return;
  }
  int64_t v4 = 0LL;
  unint64_t v5 = a1 + 8;
  sub_1002536A0();
  unint64_t v8 = v7 & v6;
  int64_t v10 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v13 >= v10) {
      return;
    }
    unint64_t v14 = v5[v13];
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v10) {
        return;
      }
      unint64_t v14 = v5[v4];
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v10) {
          return;
        }
        unint64_t v14 = v5[v4];
        if (!v14)
        {
          int64_t v4 = v13 + 3;
          if (v13 + 3 >= v10) {
            return;
          }
          unint64_t v14 = v5[v4];
          if (!v14) {
            break;
          }
        }
      }
    }

void sub_10025314C(void *a1, void *a2)
{
  if (a1 == a2 || a1[2] != a2[2]) {
    return;
  }
  int64_t v4 = 0LL;
  unint64_t v5 = a1 + 8;
  sub_1002536A0();
  unint64_t v8 = v7 & v6;
  int64_t v10 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v13 >= v10) {
      return;
    }
    unint64_t v14 = v5[v13];
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v10) {
        return;
      }
      unint64_t v14 = v5[v4];
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v10) {
          return;
        }
        unint64_t v14 = v5[v4];
        if (!v14)
        {
          int64_t v4 = v13 + 3;
          if (v13 + 3 >= v10) {
            return;
          }
          unint64_t v14 = v5[v4];
          if (!v14) {
            break;
          }
        }
      }
    }

void *sub_10025331C()
{
  unint64_t v1 = (char *)v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_1001C954C((uint64_t)v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_delegate);

  swift_unknownObjectWeakDestroy((char *)v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_session);
  swift_unknownObjectWeakDestroy((char *)v0 + OBJC_IVAR____TtC13callservicesd30CSDAVCSessionMediaStateManager_remoteParticipant);
  return v0;
}

uint64_t sub_1002533C0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1002533E4()
{
  return type metadata accessor for CSDAVCSessionMediaStateManager(0LL);
}

uint64_t type metadata accessor for CSDAVCSessionMediaStateManager(uint64_t a1)
{
  uint64_t result = qword_10044A788;
  if (!qword_10044A788) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CSDAVCSessionMediaStateManager);
  }
  return result;
}

uint64_t sub_100253424(uint64_t a1)
{
  v4[0] = &unk_10037DC00;
  v4[1] = &unk_10037DC18;
  void v4[2] = &unk_10037DC18;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = &unk_10037DC30;
    void v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_10037DC48;
    v4[8] = &unk_10037DC48;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MediaStateTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for MediaStateTransaction(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for MediaStateTransaction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t initializeWithTake for MediaStateTransaction(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for MediaStateTransaction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaStateTransaction(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 12))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaStateTransaction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MediaStateTransaction()
{
  return &type metadata for MediaStateTransaction;
}

unint64_t sub_100253640()
{
  return sub_100252D50();
}

unint64_t sub_100253660()
{
  unint64_t result = qword_10044CAD0;
  if (!qword_10044CAD0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TURoute);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10044CAD0);
  }

  return result;
}

  ;
}

uint64_t sub_1002536BC()
{
  return 0x6172656D61632E20LL;
}

uint64_t sub_1002536D4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v4 = 0x8000000100373C70LL;
    if (a2 == 0x8000000100373C70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100373C70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x8000000100373C90LL)
  {
    swift_bridgeObjectRelease(0x8000000100373C90LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000100373C90LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1002537BC()
{
  return 2LL;
}

unint64_t sub_1002537C4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000017LL;
  }
  else {
    return 0xD000000000000011LL;
  }
}

unint64_t sub_100253800()
{
  return sub_1002537C4(*v0);
}

uint64_t sub_100253808@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002536D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10025382C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1002537BC();
  *a1 = result;
  return result;
}

uint64_t sub_100253850(uint64_t a1)
{
  unint64_t v2 = sub_100254BD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100253878(uint64_t a1)
{
  unint64_t v2 = sub_100254BD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002538A0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(TUGroupActivityIdentifierScreenSharing);
  qword_100454128 = result;
  unk_100454130 = v1;
  return result;
}

uint64_t *sub_1002538CC()
{
  if (qword_100446900 != -1) {
    swift_once(&qword_100446900, sub_1002538A0);
  }
  return &qword_100454128;
}

uint64_t sub_10025390C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SceneAssociationBehavior(0LL);
  __chkstk_darwin(v5);
  sub_1001D91F4();
  uint64_t v6 = type metadata accessor for GroupActivityMetadata.ActivityType(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = GroupActivityMetadata.init()(v7);
  static GroupActivityMetadata.ActivityType.screenSharing.getter(v10);
  GroupActivityMetadata.type.setter(v9);
  unint64_t v11 = sub_1001F88F0(0x535F4E4545524353LL, (void *)0xEE00474E49524148LL);
  GroupActivityMetadata.localizedTitle.setter(v11);
  swift_bridgeObjectRetain(a2);
  GroupActivityMetadata.localizedSubtitle.setter(a1, a2);
  uint64_t v12 = GroupActivityMetadata.supportsContinuationOnTV.setter(0LL);
  static SceneAssociationBehavior.none.getter(v12);
  return GroupActivityMetadata.sceneAssociationBehavior.setter(v2);
}

uint64_t sub_100253A08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1001AFF14(&qword_10044A9A8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001D91F4();
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1001B204C(a1, v10);
  unint64_t v12 = sub_100254BD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ScreenSharingActivity.CodingKeys,  &type metadata for ScreenSharingActivity.CodingKeys,  v12,  v10,  v11);
  char v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v20, v8);
  if (!v4)
  {
    uint64_t v18 = a4;
    char v19 = 1;
    uint64_t v13 = type metadata accessor for CodableRemoteScreenShareAttributes();
    uint64_t v15 = sub_100254E04( &qword_100449FF0,  v14,  (uint64_t (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes,  (uint64_t)&unk_10037DD68);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v19, v8, v13, v15);
  }

  return sub_1002553CC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
}

uint64_t sub_100253B4C(void *a1)
{
  uint64_t v3 = sub_1001AFF14(&qword_10044A998);
  __chkstk_darwin(v3);
  sub_1001D920C();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_1001B204C(a1, v4);
  unint64_t v6 = sub_100254BD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ScreenSharingActivity.CodingKeys,  &type metadata for ScreenSharingActivity.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_1001B0438(a1);
    sub_1001D9020();
  }

  else
  {
    char v16 = 0;
    uint64_t v5 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    uint64_t v9 = v8;
    uint64_t v10 = type metadata accessor for CodableRemoteScreenShareAttributes();
    char v14 = 1;
    uint64_t v12 = sub_100254E04( &qword_100449FE8,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for CodableRemoteScreenShareAttributes,  (uint64_t)&unk_10037DD90);
    swift_bridgeObjectRetain(v9);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, &v14, v3, v10, v12);
    sub_100255370();
    id v13 = v15;
    sub_1001B0438(a1);

    sub_1001D9020();
  }

  return v5;
}

uint64_t sub_100253CD8()
{
  uint64_t v0 = qword_100454128;
  swift_bridgeObjectRetain(unk_100454130);
  return v0;
}

uint64_t sub_100253D10()
{
  return sub_100254BCC(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t sub_100253D50(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCD80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA) {
    return 10LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100253D9C()
{
  uint64_t v0 = sub_100255348();
  return ((uint64_t (*)(uint64_t))((char *)sub_100253DC0 + 4 * byte_10037DCF0[v1]))(v0);
}

unint64_t sub_100253DC0()
{
  return sub_1002552F4();
}

void sub_100253DD4()
{
}

uint64_t sub_100253DF4()
{
  return sub_1001B11D8();
}

uint64_t sub_100253E1C()
{
  return 0x776F646E69577369LL;
}

uint64_t sub_100253E38()
{
  uint64_t v0 = sub_100255348();
  return ((uint64_t (*)(uint64_t))((char *)sub_100253E5C + 4 * byte_10037DCFA[v1]))(v0);
}

unint64_t sub_100253E5C()
{
  return sub_1002552F4();
}

void sub_100253E70()
{
}

uint64_t sub_100253E90()
{
  return sub_1001B11D8();
}

uint64_t sub_100253EB8()
{
  return 0x776F646E69577369LL;
}

uint64_t sub_100253ED4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100253B4C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_100253F00(void *a1)
{
  return sub_100253A08(a1, *v1, v1[1], v1[2]);
}

void sub_100253F1C(char *a1)
{
}

void sub_100253F28()
{
}

void sub_100253F30(uint64_t a1)
{
}

void sub_100253F38(uint64_t a1)
{
}

unint64_t sub_100253F40@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100253D50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100253F6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100253D9C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100253F94()
{
  return sub_100253E38();
}

uint64_t sub_100253F9C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100253D98(a1);
  *a2 = result;
  return result;
}

void sub_100253FC0(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100253FCC(uint64_t a1)
{
  unint64_t v2 = sub_100254C10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100253FF4(uint64_t a1)
{
  unint64_t v2 = sub_100254C10();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_10025401C()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_1001B5DB8();
  return objc_msgSendSuper2(&v2, "init");
}

void sub_10025406C(void *a1)
{
  v9.receiver = v1;
  v9.super_class = (Class)sub_1001B5DB8();
  sub_100255380((uint64_t)v9.super_class, "initWithCoder:", v3, v4, v5, v6, v7, v8, v9);

  sub_1001D9410();
}

void sub_1002540CC(uint64_t a1)
{
  v9.receiver = v1;
  v9.super_class = (Class)sub_1001B5DB8();
  sub_100255380((uint64_t)v9.super_class, "initWithAttributes:", v3, v4, v5, v6, v7, v8, v9);
  swift_unknownObjectRelease(a1);
  sub_1001D9410();
}

id sub_10025413C(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10025417C(a1);
}

id sub_10025417C(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v4 = sub_1001AFF14(&qword_10044AA00);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1001D920C();
  v44.receiver = v1;
  v44.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v44, "init");
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v36 = a1;
  sub_1001B204C(a1, v7);
  unint64_t v9 = sub_100254C10();
  id v10 = v6;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CodableRemoteScreenShareAttributes.CodingKeys,  &type metadata for CodableRemoteScreenShareAttributes.CodingKeys,  v9,  v7,  v8);
  if (v37)
  {
  }

  else
  {
    LOBYTE(v39) = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v4);
    sub_1001D92AC(v11, "setDeviceFamily:");
    uint64_t v12 = sub_10025523C(1);
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12);
    if ((v14 & 1) == 0) {
      sub_1001D92AC(v13, "setDeviceHomeButtonType:");
    }
    uint64_t v15 = sub_10025523C(2);
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(v15, v16);
    sub_1001D92AC(v17, "setStyle:");
    sub_100255204(3);
    if ((v18 & 1) == 0)
    {
      sub_100255314();
      Class isa = sub_100255308().super.super.isa;
      sub_100255230((uint64_t)isa, "setDisplayScale:");
    }

    sub_100255204(5);
    if ((v20 & 1) == 0)
    {
      sub_100255314();
      Class v21 = sub_100255308().super.super.isa;
      sub_100255230((uint64_t)v21, "setScaleFactor:");
    }

    char v45 = 7;
    sub_100254DC8();
    sub_100255274((uint64_t)&type metadata for CGFloat);
    if ((BYTE8(v39) & 1) == 0)
    {
      double v32 = *(double *)&v39;
      char v45 = 8;
      sub_100255274((uint64_t)&type metadata for CGFloat);
      if ((BYTE8(v39) & 1) == 0)
      {
        id v34 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithRect:", 0.0, 0.0, v32, *(double *)&v39);
        sub_100255230((uint64_t)v34, "setOriginalResolution:");
      }
    }

    sub_100255204(6);
    if ((v22 & 1) == 0)
    {
      sub_100255314();
      Class v23 = sub_100255308().super.super.isa;
      sub_100255230((uint64_t)v23, "setCornerRadius:");
    }

    type metadata accessor for CGAffineTransform(0LL);
    uint64_t v25 = v24;
    char v45 = 4;
    uint64_t v26 = sub_100254E04( &qword_10044AA10,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform,  (uint64_t)&protocol conformance descriptor for CGAffineTransform);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, &v45, v4, v25, v26);
    if ((v43 & 1) == 0)
    {
      uint64_t v28 = v41;
      uint64_t v27 = v42;
      __int128 v38 = v40;
      __int128 v35 = v39;
      Swift::String v29 = (void *)objc_opt_self(&OBJC_CLASS___NSValue);
      __int128 v39 = v35;
      __int128 v40 = v38;
      uint64_t v41 = v28;
      uint64_t v42 = v27;
      id v30 = objc_msgSend(v29, "bs_valueWithCGAffineTransform:", &v39);
      sub_100255230((uint64_t)v30, "setSystemRootLayerTransform:");
    }

    uint64_t v31 = sub_10025523C(9);
    [v10 setWindowed:KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v31) & 1];

    sub_100255398(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  }

  sub_1001B0438(v36);
  return v10;
}

uint64_t sub_100254560(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_1001AFF14(&qword_10044A9B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001D91F4();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1001B204C(a1, v7);
  unint64_t v9 = sub_100254C10();
  uint64_t v10 = dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CodableRemoteScreenShareAttributes.CodingKeys,  &type metadata for CodableRemoteScreenShareAttributes.CodingKeys,  v9,  v7,  v8);
  id v11 = sub_10022D078(v10, "deviceFamily");
  LOBYTE(v34) = 0;
  uint64_t v12 = sub_10025521C((uint64_t)v11);
  if (!v2)
  {
    LOBYTE(v34) = 2;
    id v13 = sub_10022D078(v12, "deviceHomeButtonType");
    uint64_t v14 = sub_10025521C((uint64_t)v13);
    id v15 = sub_10022D078(v14, "style");
    uint64_t v16 = sub_10025521C((uint64_t)v15);
    if (sub_10022D078(v16, "displayScale"))
    {
      sub_1002552E8();
      sub_1002553D8();
    }

    sub_1002552D4();
    char v38 = 3;
    sub_1001AFF14(&qword_10044A9C0);
    sub_100254C4C();
    uint64_t v17 = sub_1002551E4();
    if (sub_10022D078(v17, "scaleFactor"))
    {
      sub_1002552E8();
      sub_1002553D8();
    }

    sub_1002552D4();
    char v38 = 5;
    uint64_t v18 = sub_1002551E4();
    id v19 = sub_10022D078(v18, "systemRootLayerTransform");
    char v20 = v19;
    if (v19)
    {
      objc_msgSend(v19, "bs_CGAffineTransformValue");

      __int128 v22 = v36;
      __int128 v21 = v35;
      __int128 v23 = v34;
    }

    else
    {
      __int128 v23 = 0uLL;
      __int128 v21 = 0uLL;
      __int128 v22 = 0uLL;
    }

    __int128 v34 = v23;
    __int128 v35 = v21;
    __int128 v36 = v22;
    BOOL v37 = v20 == 0LL;
    char v38 = 4;
    uint64_t v24 = sub_1001AFF14(&qword_10044A9D0);
    sub_100254CA8();
    uint64_t v25 = KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v38, v5, v24);
    if (sub_10022D078(v25, "cornerRadius"))
    {
      sub_1002552E8();
      sub_1002553D8();
    }

    sub_1002552D4();
    char v38 = 6;
    uint64_t v26 = sub_1002551E4();
    id v27 = sub_10022D078(v26, "originalResolution");
    if (v27)
    {
      [v27 rectValue];
      sub_100255320();
      v39.origin.x = sub_1002553A4();
      double Width = CGRectGetWidth(v39);
    }

    else
    {
      double Width = 0.0;
    }

    sub_1002553B8(Width);
    char v38 = 7;
    sub_1001AFF14(&qword_10044A9E8);
    sub_100254D28();
    uint64_t v29 = sub_1002551E4();
    id v30 = sub_10022D078(v29, "originalResolution");
    if (v30)
    {
      [v30 rectValue];
      sub_100255320();
      v40.origin.x = sub_1002553A4();
      double Height = CGRectGetHeight(v40);
    }

    else
    {
      double Height = 0.0;
    }

    sub_1002553B8(Height);
    char v38 = 8;
    sub_1002551E4();
    id v32 = [v3 isWindowed];
    LOBYTE(v34) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v32, &v34, v5);
  }

  return sub_1002553CC(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

uint64_t type metadata accessor for CodableRemoteScreenShareAttributes()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd34CodableRemoteScreenShareAttributes);
}

void destroy for ScreenSharingActivity(uint64_t a1)
{
}

void *_s13callservicesd21ScreenSharingActivityVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  return a1;
}

void *assignWithCopy for ScreenSharingActivity(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a1[2];
  uint64_t v7 = (void *)a2[2];
  a1[2] = v7;
  id v8 = v7;

  return a1;
}

void *assignWithTake for ScreenSharingActivity(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingActivity(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(sub_10024772C(0LL, v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingActivity( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingActivity()
{
  return &type metadata for ScreenSharingActivity;
}

id sub_100254B04@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_10025413C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100254B2C(void *a1)
{
  return sub_100254560(a1);
}

unint64_t sub_100254B50()
{
  unint64_t result = qword_10044A980;
  if (!qword_10044A980)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DDE0, &type metadata for ScreenSharingActivity);
    atomic_store(result, (unint64_t *)&qword_10044A980);
  }

  return result;
}

unint64_t sub_100254B90()
{
  unint64_t result = qword_10044A988;
  if (!qword_10044A988)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DDB8, &type metadata for ScreenSharingActivity);
    atomic_store(result, (unint64_t *)&qword_10044A988);
  }

  return result;
}

uint64_t sub_100254BCC(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_100254BD4()
{
  unint64_t result = qword_10044A9A0;
  if (!qword_10044A9A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E054, &type metadata for ScreenSharingActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044A9A0);
  }

  return result;
}

unint64_t sub_100254C10()
{
  unint64_t result = qword_10044A9B8;
  if (!qword_10044A9B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E004, &type metadata for CodableRemoteScreenShareAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044A9B8);
  }

  return result;
}

unint64_t sub_100254C4C()
{
  unint64_t result = qword_10044A9C8;
  if (!qword_10044A9C8)
  {
    uint64_t v1 = sub_1001B0504(&qword_10044A9C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10044A9C8);
  }

  return result;
}

unint64_t sub_100254CA8()
{
  unint64_t result = qword_10044A9D8;
  if (!qword_10044A9D8)
  {
    uint64_t v1 = sub_1001B0504(&qword_10044A9D0);
    sub_100254E04( &qword_10044A9E0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform,  (uint64_t)&protocol conformance descriptor for CGAffineTransform);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10044A9D8);
  }

  return result;
}

unint64_t sub_100254D28()
{
  unint64_t result = qword_10044A9F0;
  if (!qword_10044A9F0)
  {
    uint64_t v1 = sub_1001B0504(&qword_10044A9E8);
    sub_100254D8C();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10044A9F0);
  }

  return result;
}

unint64_t sub_100254D8C()
{
  unint64_t result = qword_10044A9F8;
  if (!qword_10044A9F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10044A9F8);
  }

  return result;
}

unint64_t sub_100254DC8()
{
  unint64_t result = qword_10044AA08;
  if (!qword_10044AA08)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10044AA08);
  }

  return result;
}

uint64_t sub_100254E04(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CodableRemoteScreenShareAttributes.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CodableRemoteScreenShareAttributes.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100254F18 + 4 * byte_10037DD09[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100254F4C + 4 * byte_10037DD04[v4]))();
}

uint64_t sub_100254F4C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100254F54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100254F5CLL);
  }
  return result;
}

uint64_t sub_100254F68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100254F70LL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_100254F74(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100254F7C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodableRemoteScreenShareAttributes.CodingKeys()
{
  return &type metadata for CodableRemoteScreenShareAttributes.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ScreenSharingActivity.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100254FE4 + 4 * byte_10037DD13[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100255018 + 4 * byte_10037DD0E[v4]))();
}

uint64_t sub_100255018(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100255020(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100255028LL);
  }
  return result;
}

uint64_t sub_100255034(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10025503CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100255040(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100255048(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingActivity.CodingKeys()
{
  return &type metadata for ScreenSharingActivity.CodingKeys;
}

unint64_t sub_100255068()
{
  unint64_t result = qword_10044AA18;
  if (!qword_10044AA18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DEEC, &type metadata for ScreenSharingActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA18);
  }

  return result;
}

unint64_t sub_1002550A8()
{
  unint64_t result = qword_10044AA20;
  if (!qword_10044AA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DFDC, &type metadata for CodableRemoteScreenShareAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA20);
  }

  return result;
}

unint64_t sub_1002550E8()
{
  unint64_t result = qword_10044AA28;
  if (!qword_10044AA28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DF14, &type metadata for CodableRemoteScreenShareAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA28);
  }

  return result;
}

unint64_t sub_100255128()
{
  unint64_t result = qword_10044AA30;
  if (!qword_10044AA30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DF3C, &type metadata for CodableRemoteScreenShareAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA30);
  }

  return result;
}

unint64_t sub_100255168()
{
  unint64_t result = qword_10044AA38;
  if (!qword_10044AA38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DE5C, &type metadata for ScreenSharingActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA38);
  }

  return result;
}

unint64_t sub_1002551A8()
{
  unint64_t result = qword_10044AA40;
  if (!qword_10044AA40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037DE84, &type metadata for ScreenSharingActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA40);
  }

  return result;
}

uint64_t sub_1002551E4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v2 - 176, v2 - 65, v0, v1);
}

uint64_t sub_100255204@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 168) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 168, v1);
}

uint64_t sub_10025521C(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v2 - 176, v1);
}

id sub_100255230(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_10025523C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t sub_100255254()
{
  return 0x615272656E726F63LL;
}

uint64_t sub_100255274(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v3 - 65, v2, a1, v1);
}

uint64_t sub_100255294()
{
  return 0x636146656C616373LL;
}

uint64_t sub_1002552B4()
{
  return 0x5379616C70736964LL;
}

void sub_1002552D4()
{
  *(void *)(v1 - 176) = v2;
  *(_BYTE *)(v1 - 168) = v0 == 0;
}

id sub_1002552E8()
{
  return [v0 *(SEL *)(v1 + 96)];
}

unint64_t sub_1002552F4()
{
  return 0xD000000000000014LL;
}

NSNumber sub_100255308()
{
  return NSNumber.init(floatLiteral:)(v0);
}

unint64_t sub_100255314()
{
  return sub_1001B1528();
}

double sub_100255320()
{
  return result;
}

uint64_t sub_100255334()
{
  return 0x656C797473LL;
}

uint64_t sub_100255348()
{
  return 0x6146656369766564LL;
}

uint64_t sub_100255370()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

id sub_100255380( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2, v9);
}

  ;
}

uint64_t sub_100255398@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

double sub_1002553A4()
{
  return v0;
}

void sub_1002553B8(double a1)
{
  *(double *)(v2 - 176) = a1;
  *(_BYTE *)(v2 - 168) = v1 == 0;
}

uint64_t sub_1002553CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

double sub_1002553D8()
{
  return result;
}

void sub_1002553E4(uint64_t a1)
{
}

void sub_1002553F0(char a1)
{
}

void sub_1002553FC(uint64_t a1)
{
}

void sub_100255410(uint64_t a1)
{
}

void sub_100255424(uint64_t a1, uint64_t (*a2)(void *))
{
  v12[9] = a1;
  uint64_t v3 = Hasher.init(_seed:)(v12, 0LL);
  uint64_t v4 = a2(v3);
  sub_1002560BC(v4, v5, v6, v7, v8, v9, v10, v11, v12[0]);
  Hasher._finalize()();
  sub_1001B9210();
}

Swift::Int sub_100255464(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_1002554AC(uint64_t a1)
{
}

void sub_1002554D4(uint64_t a1)
{
  uint64_t v1 = sub_100253D9C();
  sub_1002560A4(v1, v2, v3);
  sub_1001B0EB8();
  sub_1001B926C();
  sub_1001B9210();
}

void sub_100255508(uint64_t a1)
{
  int v1 = sub_1001B9298(a1);
  sub_1002560DC(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1001B926C();
  sub_1001B9210();
}

void sub_100255530(uint64_t a1)
{
  int v1 = sub_1001B9298(a1);
  sub_1002560E8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1001B926C();
  sub_1001B9210();
}

void sub_10025555C(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100256098(a1, a2);
  if ((v2 & 1) != 0) {
    uint64_t v5 = 0x656E6F6850LL;
  }
  else {
    uint64_t v5 = 0x656D695465636146LL;
  }
  sub_1002560D0((uint64_t)v3, v5, v4);
  sub_1001B0EB8();
  sub_1001B926C();
  sub_1001B9210();
}

void sub_1002555B4(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_1002555C8(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

void sub_10025560C(uint64_t a1)
{
}

void sub_100255638(uint64_t a1, uint64_t a2)
{
}

void sub_10025564C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  v13[9] = a2;
  uint64_t v4 = Hasher.init(_seed:)(v13, a1);
  uint64_t v5 = a3(v4);
  sub_1002560BC(v5, v6, v7, v8, v9, v10, v11, v12, v13[0]);
  Hasher._finalize()();
  sub_1001B9210();
}

void sub_100255688(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100253D9C();
  sub_1002560A4(v2, v3, v4);
  sub_1001B0EB8();
  sub_1001B926C();
  sub_1001B9210();
}

void sub_1002556B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100256098(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      uint64_t v5 = 0x6C65536E496C6C61LL;
    }
    else {
      uint64_t v5 = 0x636E4F6E496C6C61LL;
    }
  }

  else
  {
    uint64_t v5 = 0x6C6C416E496C6C61LL;
  }

  sub_1002560D0((uint64_t)v3, v5, v4);
  sub_1001B0EB8();
  sub_1001B926C();
  sub_1001B9210();
}

void sub_100255748(uint64_t a1)
{
  int v1 = Hasher.init(_seed:)(v10, a1);
  sub_1002560DC(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  sub_1001B926C();
  sub_1001B9210();
}

void sub_100255774(uint64_t a1, uint64_t a2)
{
  int v2 = sub_100256098(a1, a2);
  sub_1002560E8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_1001B926C();
  sub_1001B9210();
}

uint64_t sub_100255798(unint64_t a1)
{
  if (a1 >= 7) {
    return 6LL;
  }
  else {
    return (0x5040302010006uLL >> (8 * a1));
  }
}

uint64_t sub_1002557C0(unsigned __int8 a1)
{
  return a1 + 1LL;
}

Swift::Int sub_1002557CC()
{
  return sub_100255464(*v0);
}

void sub_1002557D4(uint64_t a1)
{
}

Swift::Int sub_1002557DC(uint64_t a1)
{
  return sub_1002555C8(a1, *v1);
}

uint64_t sub_1002557E4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100255798(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10025580C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002557C0(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100255834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100255ED0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

id sub_100255880(void *a1)
{
  int v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  v2[OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_failed] = 2;
  int v5 = v2;
  unint64_t v6 = [a1 deviceType];
  else {
    char v7 = byte_10037E32A[(void)(v6 - 6)];
  }
  v5[OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_type] = v7;

  v10.receiver = v5;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, "init");

  return v8;
}

void sub_100255934()
{
}

uint64_t sub_10025596C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64656C696166LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656C696166LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100255A40(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64656C696166LL;
  }
  else {
    return 1701869940LL;
  }
}

uint64_t sub_100255A6C()
{
  return sub_100255A40(*v0);
}

uint64_t sub_100255A74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10025596C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100255A98(uint64_t a1)
{
  unint64_t v2 = sub_100255E58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100255AC0(uint64_t a1)
{
  unint64_t v2 = sub_100255E58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t type metadata accessor for RTCCSDRelayDeviceRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd22RTCCSDRelayDeviceRoute);
}

uint64_t getEnumTagSinglePayload for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100255BDC + 4 * byte_10037E0B5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100255C10 + 4 * byte_10037E0B0[v4]))();
}

uint64_t sub_100255C10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100255C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100255C20LL);
  }
  return result;
}

uint64_t sub_100255C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100255C34LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100255C38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100255C40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType()
{
  return &type metadata for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType;
}

unint64_t sub_100255C60()
{
  unint64_t result = qword_10044AA80;
  if (!qword_10044AA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E1A8, &type metadata for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType);
    atomic_store(result, (unint64_t *)&qword_10044AA80);
  }

  return result;
}

uint64_t sub_100255C9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1001AFF14(&qword_10044AA88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1001B204C(a1, v9);
  unint64_t v11 = sub_100255E58();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RTCCSDRelayDeviceRoute.CodingKeys,  &type metadata for RTCCSDRelayDeviceRoute.CodingKeys,  v11,  v9,  v10);
  char v18 = *(_BYTE *)(v3 + OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_type);
  char v17 = 0;
  unint64_t v12 = sub_100255E94();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v18,  &v17,  v5,  &type metadata for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType,  v12);
  if (!v2)
  {
    uint64_t v13 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_failed);
    char v16 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, &v16, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100255DD8(void *a1)
{
  return sub_100255C9C(a1);
}

unint64_t sub_100255DF8(uint64_t a1)
{
  unint64_t result = sub_100255E1C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100255E1C()
{
  unint64_t result = qword_100449E18;
  if (!qword_100449E18)
  {
    uint64_t v1 = type metadata accessor for RTCCSDRelayDeviceRoute();
    unint64_t result = swift_getWitnessTable(&unk_10037E1D0, v1);
    atomic_store(result, (unint64_t *)&qword_100449E18);
  }

  return result;
}

unint64_t sub_100255E58()
{
  unint64_t result = qword_10044AA90;
  if (!qword_10044AA90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E2D8, &type metadata for RTCCSDRelayDeviceRoute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AA90);
  }

  return result;
}

unint64_t sub_100255E94()
{
  unint64_t result = qword_10044AA98;
  if (!qword_10044AA98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E108, &type metadata for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType);
    atomic_store(result, (unint64_t *)&qword_10044AA98);
  }

  return result;
}

unint64_t sub_100255ED0()
{
  unint64_t result = qword_10044AAA0;
  if (!qword_10044AAA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E130, &type metadata for RTCCSDRelayDeviceRoute.RTCCSDAudioRouteType);
    atomic_store(result, (unint64_t *)&qword_10044AAA0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RTCCSDRelayDeviceRoute.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100255F58 + 4 * byte_10037E0BF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100255F8C + 4 * byte_10037E0BA[v4]))();
}

uint64_t sub_100255F8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100255F94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100255F9CLL);
  }
  return result;
}

uint64_t sub_100255FA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100255FB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100255FB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100255FBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RTCCSDRelayDeviceRoute.CodingKeys()
{
  return &type metadata for RTCCSDRelayDeviceRoute.CodingKeys;
}

unint64_t sub_100255FDC()
{
  unint64_t result = qword_10044AAA8;
  if (!qword_10044AAA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E2B0, &type metadata for RTCCSDRelayDeviceRoute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AAA8);
  }

  return result;
}

unint64_t sub_10025601C()
{
  unint64_t result = qword_10044AAB0;
  if (!qword_10044AAB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E220, &type metadata for RTCCSDRelayDeviceRoute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AAB0);
  }

  return result;
}

unint64_t sub_10025605C()
{
  unint64_t result = qword_10044AAB8;
  if (!qword_10044AAB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E248, &type metadata for RTCCSDRelayDeviceRoute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10044AAB8);
  }

  return result;
}

void *sub_100256098(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

uint64_t sub_1002560A4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a1, a2);
}

uint64_t sub_1002560BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return dispatch thunk of Hashable.hash(into:)(&a9, v9, a1);
}

uint64_t sub_1002560D0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a2, v3);
}

void sub_1002560DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1002560E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1002560F4()
{
}

uint64_t sub_100256124()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___CSDMomentsControllerSession_moments));
}

uint64_t sub_100256218()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CSDMomentsControllerSession_isRegistered);
}

uint64_t sub_10025624C(uint64_t result)
{
  *(_BYTE *)(v1 + OBJC_IVAR___CSDMomentsControllerSession_isRegistered) = result;
  return result;
}

uint64_t sub_1002562C0(void *a1)
{
  uint64_t v2 = (void *)(v1 + *a1);
  sub_1001B0E80((uint64_t)v2, (uint64_t)v4, 0LL);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t sub_100256374(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  sub_1001B0E80((uint64_t)v4, (uint64_t)v7, 1LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

unint64_t sub_100256410()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001B5DB8();
  uint64_t v25 = _typeName(_:qualified:)(v2, 0LL);
  unint64_t v26 = v3;
  v4._countAndFlagsBits = 40LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  uint64_t v6 = v25;
  unint64_t v5 = v26;
  uint64_t v25 = 0x3D73746E656D6F6DLL;
  unint64_t v26 = 0xE800000000000000LL;
  v22[0] = *(void *)(v0 + OBJC_IVAR___CSDMomentsControllerSession_moments);
  swift_unknownObjectRetain(v22[0]);
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_10044AB78);
  v8._countAndFlagsBits = String.init<A>(reflecting:)(v22, v7);
  String.append(_:)(v8);
  sub_1001B0F5C();
  sub_1001B0F6C();
  uint64_t v25 = v6;
  unint64_t v26 = v5;
  swift_bridgeObjectRetain(v5);
  sub_1002571DC();
  sub_1001B2428();
  sub_1001D9020();
  uint64_t v25 = 0LL;
  unint64_t v26 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(v26);
  v22[0] = 0xD000000000000016LL;
  v22[1] = 0x8000000100373EE0LL;
  uint64_t v9 = (unint64_t *)(v0 + OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations);
  sub_1001B0E80((uint64_t)v9, (uint64_t)&v25, 0LL);
  unint64_t v23 = *v9;
  swift_bridgeObjectRetain(v23);
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100447B90);
  v27._countAndFlagsBits = String.init<A>(reflecting:)(&v23, v10);
  sub_1002571F8(v27);
  sub_1001B0F5C();
  sub_1001B0F6C();
  sub_1002571E8();
  sub_1002571DC();
  sub_1001B2428();
  sub_1001D9020();
  v22[0] = 0LL;
  v22[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(v22[1]);
  strcpy((char *)v22, "isRegistered=");
  HIWORD(v22[1]) = -4864;
  LOBYTE(v23) = *(_BYTE *)(v1 + OBJC_IVAR___CSDMomentsControllerSession_isRegistered);
  v28._countAndFlagsBits = String.init<A>(reflecting:)(&v23, &type metadata for Bool);
  sub_1002571F8(v28);
  sub_1001B0F5C();
  sub_1001B0F6C();
  sub_1002571E8();
  sub_1002571DC();
  sub_1001B2428();
  sub_1001D9020();
  unint64_t v12 = v22[0];
  unint64_t v11 = v22[1];
  v22[0] = 0LL;
  v22[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(v22[1]);
  unint64_t v23 = 0xD00000000000001ELL;
  unint64_t v24 = 0x8000000100373F00LL;
  uint64_t v13 = (uint64_t *)(v1 + OBJC_IVAR___CSDMomentsControllerSession_activeRequestsByTransactionID);
  sub_1001B0E80((uint64_t)v13, (uint64_t)v22, 0LL);
  uint64_t v21 = *v13;
  swift_bridgeObjectRetain(v21);
  uint64_t v14 = sub_1001AFF14(&qword_10044AB88);
  v15._countAndFlagsBits = String.init<A>(reflecting:)(&v21, v14);
  String.append(_:)(v15);
  sub_1001B0EB8();
  sub_1001B0F6C();
  uint64_t v16 = v23;
  char v17 = (void *)v24;
  unint64_t v23 = v12;
  unint64_t v24 = v11;
  swift_bridgeObjectRetain(v11);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  sub_1001B2428();
  sub_1001B0F5C();
  sub_1001EE280();
  v19._countAndFlagsBits = 41LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  sub_1001B0EB8();
  return v23;
}

id sub_1002566E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (objc_class *)sub_1001B5DB8();
  v3[OBJC_IVAR___CSDMomentsControllerSession_isRegistered] = 1;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_activeRequestsByTransactionID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_moments] = a1;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations] = a2;
  *(void *)&v3[OBJC_IVAR___CSDMomentsControllerSession_callCenterObserver] = a3;
  v9.receiver = v3;
  v9.super_class = v7;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_1002567F0(uint64_t a1, uint64_t a2)
{
  char v25 = 0;
  id v5 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  uint64_t v6 = (dispatch_queue_s *)[v5 queue];

  uint64_t v7 = (void *)swift_allocObject(&unk_1003E3F50, 48LL, 7LL);
  v7[2] = v2;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = &v25;
  uint64_t v8 = swift_allocObject(&unk_1003E3F78, 32LL, 7LL);
  *(void *)(v8 + ++*(void *)(v0 + 16) = sub_100257164;
  *(void *)(v8 + 24) = v7;
  void aBlock[4] = sub_1001C7040;
  uint64_t v24 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100275F14;
  aBlock[3] = &unk_1003E3F90;
  objc_super v9 = _Block_copy(aBlock);
  uint64_t v10 = v24;
  swift_bridgeObjectRetain(a2);
  swift_retain(v8);
  unint64_t v11 = v2;
  swift_release(v10);
  dispatch_sync(v6, v9);

  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 103LL, 39LL, 40LL, 1LL);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((v25 & 1) != 0)
    {
      id v14 = sub_1001704C4();
      uint64_t v15 = static os_log_type_t.default.getter(v14);
      if (a2)
      {
        os_log(_:dso:log:type:_:)( "MomentsControllerSession: GroupFaceTime",  39LL,  2LL,  &_mh_execute_header,  v14,  v15,  _swiftEmptyArrayStorage);

        uint64_t v16 = (uint64_t *)&v11[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations];
        swift_beginAccess(&v11[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations], aBlock, 32LL, 0LL);
        uint64_t v17 = *v16;
        swift_bridgeObjectRetain(a2);
        sub_1001CA18C(a1, a2, v17);
        uint64_t v19 = v18;
        swift_endAccess(aBlock);
        swift_release(v7);
        swift_bridgeObjectRelease(a2);
      }

      else
      {
        os_log(_:dso:log:type:_:)( "MomentsControllerSession: FaceTime 1:1",  38LL,  2LL,  &_mh_execute_header,  v14,  v15,  _swiftEmptyArrayStorage);

        __int128 v22 = (uint64_t *)&v11[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations];
        swift_beginAccess(&v11[OBJC_IVAR___CSDMomentsControllerSession_remoteIDSDestinations], aBlock, 0LL, 0LL);
        uint64_t v19 = sub_10023DA7C(*v22);
        swift_release(v7);
      }
    }

    else
    {
      id v20 = sub_1001704C4();
      uint64_t v21 = static os_log_type_t.default.getter(v20);
      os_log(_:dso:log:type:_:)( "MomentsControllerSession: no streamtoken found",  46LL,  2LL,  &_mh_execute_header,  v20,  v21,  _swiftEmptyArrayStorage);
      swift_release(v7);

      return 0LL;
    }

    return v19;
  }

  return result;
}

uint64_t sub_100256AEC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  id v31 = *(id *)(a1 + OBJC_IVAR___CSDMomentsControllerSession_callCenterObserver);
  uint64_t v6 = (uint64_t)[v31 callContainer];
  void aBlock[4] = sub_100256100;
  uint64_t v36 = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100268458;
  aBlock[3] = &unk_1003E3FB8;
  uint64_t v7 = _Block_copy(aBlock);
  swift_release(v36);
  id v8 = [(id)v6 callsPassingTest:v7];
  swift_unknownObjectRelease(v6);
  _Block_release(v7);
  if ((swift_isEscapingClosureAtFileLocation(0LL, "", 103LL, 40LL, 82LL, 1LL) & 1) != 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    if (v6 < 0) {
      uint64_t v29 = v6;
    }
    else {
      uint64_t v29 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v6);
    if (v10) {
      goto LABEL_4;
    }
    return swift_bridgeObjectRelease(v6);
  }

  unint64_t v9 = sub_100257198();
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v10)
  {
LABEL_4:
    unint64_t v11 = v6 & 0xC000000000000001LL;
    uint64_t v33 = OBJC_IVAR___CSDMomentsControllerSession_moments;
    for (uint64_t i = 4LL; ; ++i)
    {
      if (v11) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v6);
      }
      else {
        id v13 = *(id *)(v6 + 8 * i);
      }
      id v14 = v13;
      uint64_t v15 = i - 3;
      if (__OFADD__(i - 4, 1LL))
      {
        __break(1u);
        goto LABEL_26;
      }

      if (a3)
      {
        id v16 = [v31 activeConversationForCall:v13];
        if (!v16)
        {

          if ((*a4 & 1) != 0 || v15 == v10) {
            return swift_bridgeObjectRelease(v6);
          }
          continue;
        }

        uint64_t v17 = v16;
        id v32 = [v16 avcSessionToken];
        unint64_t v18 = v11;
        uint64_t v19 = v10;
        uint64_t v20 = v6;
        uint64_t v21 = a3;
        __int128 v22 = a4;
        id v23 = [*(id *)(a1 + v33) streamToken];

        BOOL v24 = v32 == v23;
        a4 = v22;
        a3 = v21;
        uint64_t v6 = v20;
        uint64_t v10 = v19;
        unint64_t v11 = v18;
      }

      else
      {
        id v25 = [v13 videoStreamToken];
        id v26 = [*(id *)(a1 + v33) streamToken];

        BOOL v24 = v25 == v26;
      }

      char v27 = v24;
      *a4 = v27;
      if (v24 || v15 == v10) {
        return swift_bridgeObjectRelease(v6);
      }
    }
  }

  return swift_bridgeObjectRelease(v6);
}

id sub_100256D9C(void *a1)
{
  id result = [a1 isVideo];
  if ((_DWORD)result)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100256E08(void *a1, SEL *a2)
{
  if (a1 && (id v2 = [a1 *a2]) != 0)
  {
    unint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = sub_1002567F0(v4, v6);
  sub_1001B0EB8();
  return v7;
}

id sub_100256E8C(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v6 = a1;
  uint64_t v7 = (void *)swift_unknownObjectRetain(a3);
  sub_100256E08(v7, a4);
  uint64_t v9 = v8;
  swift_unknownObjectRelease(a3);

  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    sub_1001B0EB8();
  }

  else
  {
    NSString v10 = 0LL;
  }

  return v10;
}

void sub_100256F08(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = a1;
  sub_1001FE618((uint64_t)v7, a2, a3, v8, v9, v10, v11, v12, v13, v14[0]);
  swift_endAccess(v14);
  sub_1001B0EB8();
  sub_100021D74();
}

void sub_100256FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = v11;
  swift_endAccess(v14);
  sub_1001B0EB8();

  sub_100021D74();
}

void sub_100257088()
{
}

uint64_t type metadata accessor for MomentsControllerSession()
{
  return objc_opt_self(&OBJC_CLASS___CSDMomentsControllerSession);
}

uint64_t sub_100257138()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100257164()
{
  return sub_100256AEC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(char **)(v0 + 40));
}

uint64_t sub_100257170()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100257180(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100257190(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100257198()
{
  unint64_t result = qword_10044AB70;
  if (!qword_10044AB70)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TUCall);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10044AB70);
  }

  return result;
}

void sub_1002571DC()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1002571E8()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_1002571F8(Swift::String a1)
{
}

id sub_100257204(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  sub_1001AFF14((uint64_t *)&unk_100449820);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v5 = [v3 initWithKeysToFetch:isa];

  return v5;
}

uint64_t sub_10025727C(void *a1)
{
  id v4 = [a1 remoteHandle];
  if (v4)
  {
    id v5 = v4;
    id v6 = [v4 value];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      String._bridgeToObjectiveC()();
      sub_1002588FC();
    }

    id v7 =  [(id)objc_opt_self(TUSuggestionsMetadataCacheDataProvider) suggestedNamesForDestinationID:v6 onlySignificant:1 supportsInfoLookup:0 error:0];

    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);
    uint64_t v9 = *(void *)(v8 + 16);
    sub_1001B2428();
    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t v11 = sub_1001C7370(v10, 48LL);
    *(_OWORD *)(v11 + ++*(void *)(v0 + 16) = xmmword_10037B290;
    uint64_t v130 = v5;
    uint64_t v12 = sub_1001D909C(v11, "value");
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    *(void *)(v11 + 32) = v13;
    *(void *)(v11 + 40) = v15;
    sub_100257AB8(v11);
    sub_1002588FC();
    if (v12)
    {
      uint64_t v16 = v12[2];
      sub_1001B2428();
      BOOL v17 = v16 == 0;
    }

    else
    {
      BOOL v17 = 1;
    }

    uint64_t v136 = v9;
    BOOL v26 = !v17;
    BOOL v135 = !v17;
    sub_100257D70(a1);
    char v133 = v27;
    sub_100257EB0((uint64_t)a1);
    char v138 = v28;
    id v29 = sub_1001F0E20(v28, "silencingUserInfo");
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallMetricsKnownContact");
    uint64_t v32 = v31;
    id v33 = [objc_allocWithZone(NSNumber) initWithBool:v26];
    v139[0] = v30;
    v139[1] = v32;
    uint64_t v34 = swift_bridgeObjectRetain(v32);
    uint64_t v42 = sub_10025885C(v34, v35, v36, v37, v38, v39, v40, v41);
    objc_msgSend(v29, "__swift_setObject:forKeyedSubscript:", v33, v42);
    sub_1001D9020();

    uint64_t v43 = swift_unknownObjectRelease(v42);
    id v44 = sub_1001F0E20(v43, "silencingUserInfo");
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallMetricsSiriSuggested");
    id v45 = [objc_allocWithZone(NSNumber) initWithBool:v9 != 0];
    uint64_t v46 = sub_1002588BC();
    objc_msgSend( v44,  "__swift_setObject:forKeyedSubscript:",  v45,  sub_10025885C(v46, v47, v48, v49, v50, v51, v52, v53));
    sub_1001B92A4();

    uint64_t v54 = sub_1002588EC();
    id v55 = sub_1001F0E20(v54, "silencingUserInfo");
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallMetricsVerifiedAppleCare");
    id v56 = objc_msgSend(objc_allocWithZone(NSNumber), "initWithBool:");
    uint64_t v57 = sub_1002588BC();
    uint64_t v65 = sub_10025885C(v57, v58, v59, v60, v61, v62, v63, v64);
    sub_100258870(v65);
    sub_1001B92A4();

    uint64_t v66 = sub_1002588EC();
    uint64_t v131 = a1;
    id v67 = sub_1001F0E20(v66, "silencingUserInfo");
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallMetricsCarrierNumber");
    char v68 = 1;
    id v69 = [objc_allocWithZone(NSNumber) initWithBool:(v138 & 1) == 0];
    uint64_t v70 = sub_1002588BC();
    uint64_t v78 = sub_10025885C(v70, v71, v72, v73, v74, v75, v76, v77);
    sub_100258870(v78);
    sub_1001B92A4();

    sub_1002588EC();
    if (!v135) {
      char v68 = (v136 != 0) | v133 | v138;
    }
    char v134 = v68;
    id v79 = sub_1001704C4();
    uint64_t v137 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v80 = (__n128 *)sub_1001C7370(v137, 232LL);
    uint64_t v132 = sub_100258868(v80, (__n128)xmmword_10037B130);
    unint64_t v81 = sub_1002588D8(v132);
    v80[4].n128_u64[0] = v81;
    v80[2].n128_u64[0] = (unint64_t)v1;
    id v82 = v1;
    uint64_t v90 = sub_10025889C((uint64_t)v82, v83, v84, v85, v86, v87, v88, v89);
    unint64_t v92 = v91;
    v80[6].n128_u64[0] = (unint64_t)&type metadata for String;
    unint64_t v93 = sub_1001B2330();
    v80[6].n128_u64[1] = v93;
    v80[4].n128_u64[1] = v90;
    v80[5].n128_u64[0] = v92;
    uint64_t v101 = sub_10025889C(v93, v94, v95, v96, v97, v98, v99, v100);
    v80[8].n128_u64[1] = (unint64_t)&type metadata for String;
    v80[9].n128_u64[0] = v93;
    v80[7].n128_u64[0] = v101;
    v80[7].n128_u64[1] = v102;
    uint64_t v109 = sub_10025889C(v101, v102, v103, v104, v105, v106, v107, v108);
    v80[11].n128_u64[0] = (unint64_t)&type metadata for String;
    v80[11].n128_u64[1] = v93;
    v80[9].n128_u64[1] = v109;
    v80[10].n128_u64[0] = v110;
    LOBYTE(v139[0]) = v138 & 1;
    uint64_t v111 = String.init<A>(reflecting:)(v139, &type metadata for Bool);
    v80[13].n128_u64[1] = (unint64_t)&type metadata for String;
    v80[14].n128_u64[0] = v93;
    v80[12].n128_u64[0] = v111;
    v80[12].n128_u64[1] = v112;
    uint64_t v113 = static os_log_type_t.default.getter(v111);
    os_log(_:dso:log:type:_:)( "%@ Found contact (%@) or suggested contact (%@) or isVerifiedAppleCare (%@) or isCarrierBundlePhoneNumber (%@)",  110LL,  2LL,  &_mh_execute_header,  v79,  v113,  v80);

    sub_1001D9020();
    id v114 = sub_1001704C4();
    uint64_t v115 = sub_1001C7370(v137, 112LL);
    uint64_t v116 = (void *)v115;
    *(_OWORD *)(v115 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
    *(void *)(v115 + 56) = v132;
    *(void *)(v115 + 64) = v81;
    *(void *)(v115 + 32) = v82;
    if ((v134 & 1) != 0)
    {
      v139[0] = v131;
      uint64_t v117 = sub_1001B4C00(v115, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
      id v118 = v82;
      id v119 = v131;
      uint64_t v120 = String.init<A>(reflecting:)(v139, v117);
      v116[12] = &type metadata for String;
      v116[13] = v93;
      v116[9] = v120;
      v116[10] = v121;
      uint64_t v122 = static os_log_type_t.default.getter(v120);
      sub_1002588C8((uint64_t)"%@ call filter will allow call %@", 33LL, v123, (uint64_t)&_mh_execute_header, v124, v122);

      sub_1001E43E0();
      return 0LL;
    }

    *(void *)(v115 + 96) = sub_1001B4C00(v115, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    v116[13] = sub_10025880C();
    v116[9] = v131;
    id v126 = v82;
    uint64_t v127 = static os_log_type_t.default.getter(v131);
    sub_1002588C8( (uint64_t)"%@ Did not find contact or suggested contact; call filter will not allow call %@",
      80LL,
      v128,
      (uint64_t)&_mh_execute_header,
      v129,
      v127);

    sub_1001E43E0();
  }

  else
  {
    id v18 = sub_1001704C4();
    sub_1002588F4();
    uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v20 = (__n128 *)sub_1001C7370(v19, 112LL);
    uint64_t v21 = sub_100258868(v20, (__n128)xmmword_10037B1B0);
    unint64_t v22 = sub_1002588D8(v21);
    v20[4].n128_u64[0] = v22;
    v20[2].n128_u64[0] = (unint64_t)v1;
    v20[6].n128_u64[0] = sub_1001B4C00(v22, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    v20[6].n128_u64[1] = sub_10025880C();
    v20[4].n128_u64[1] = (unint64_t)a1;
    id v23 = v1;
    id v24 = a1;
    sub_1002588A8( (uint64_t)"%@ null update handle, should not reach here: update=%@",  55LL,  v25,  (uint64_t)&_mh_execute_header);

    sub_1001D9020();
  }

  return 1LL;
}

void sub_100257930(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a4) {
    goto LABEL_6;
  }
  uint64_t v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t v10 = sub_1001C7370(v9, 64LL);
    *(_OWORD *)(v10 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
    *(void *)(v10 + 48) = a3;
    *(void *)(v10 + 56) = a4;
    swift_bridgeObjectRetain(a4);
  }

  else
  {
LABEL_6:
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t v10 = sub_1001C7370(v11, 48LL);
    *(_OWORD *)(v10 + ++*(void *)(v0 + 16) = xmmword_10037B290;
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
  }

  sub_1001EE280();
  uint64_t v12 = sub_100257AB8(v10);
  sub_1001D9020();
  if (v12) {
    sub_1001B0EB8();
  }
  sub_1001B0F4C();
}

uint64_t sub_100257AB8(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  sub_1001B4C00(a1, (unint64_t *)&unk_10044AC08, &OBJC_CLASS___CNContactFetchRequest_ptr);
  uint64_t v2 = sub_1001EE280();
  id v3 = sub_100257204(v2);
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___CNContact);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 predicateForContactsMatchingHandleStrings:isa];

  [v3 setPredicate:v6];
  id v7 = *(void **)&v1[OBJC_IVAR___CSDContactsCallFilter_contactStore];
  id v29 = 0LL;
  id v8 = [v7 executeFetchRequest:v3 error:&v29];
  id v9 = v29;
  if (!v8)
  {
    id v14 = v29;
    uint64_t v15 = (void *)_convertNSErrorToError(_:)(v9);

    swift_willThrow(v16);
    id v17 = sub_1001704C4();
    uint64_t v18 = sub_1002588F4();
    uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v20 = (__n128 *)sub_1001C7370(v19, 112LL);
    v20[3].n128_u64[1] = sub_100258868(v20, (__n128)xmmword_10037B1B0);
    v20[4].n128_u64[0] = sub_100258770();
    v20[2].n128_u64[0] = (unint64_t)v1;
    id v29 = v15;
    uint64_t v21 = v1;
    swift_errorRetain(v15);
    uint64_t v22 = sub_1001AFF14(&qword_100447B70);
    uint64_t v23 = String.init<A>(reflecting:)(&v29, v22);
    unint64_t v25 = v24;
    v20[6].n128_u64[0] = (unint64_t)&type metadata for String;
    v20[6].n128_u64[1] = sub_1001B2330();
    v20[4].n128_u64[1] = v23;
    v20[5].n128_u64[0] = v25;
    os_log(_:dso:log:type:_:)( "%@ Contact fetch failed with the following error %@",  51LL,  2LL,  &_mh_execute_header,  v15,  v18,  v20);
    swift_errorRelease(v15);

    sub_1001E43E0();
    return 0LL;
  }

  uint64_t v10 = v8;
  id v11 = v29;
  id v29 = [v10 value];
  uint64_t v12 = sub_1001AFF14(&qword_10044AC18);
  if (swift_dynamicCast(&v28, &v29, (char *)&type metadata for Swift.AnyObject + 8, v12, 6LL))
  {
    uint64_t v13 = v28;
  }

  else
  {
    uint64_t v26 = sub_1001AFF14(&qword_10044AC20);
    uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v26,  &protocol witness table for String);
  }

  return v13;
}

void sub_100257D70(void *a1)
{
  id v4 = [a1 remoteHandle];
  if (v4 && (id v5 = v4, v2 = [v4 tuHandle], v5, v2))
  {
    if ([a1 verificationStatus] == (id)1) {
      [*(id *)&v1[OBJC_IVAR___CSDContactsCallFilter_appleCareHandles] contains:v2];
    }
  }

  else
  {
    id v6 = sub_1001704C4();
    sub_1002588F4();
    uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    id v8 = (__n128 *)sub_1001C7370(v7, 112LL);
    uint64_t v9 = sub_100258868(v8, (__n128)xmmword_10037B1B0);
    unint64_t v10 = sub_1002588D8(v9);
    v8[4].n128_u64[0] = v10;
    v8[2].n128_u64[0] = (unint64_t)v1;
    v8[6].n128_u64[0] = sub_1001B4C00(v10, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    v8[6].n128_u64[1] = sub_10025880C();
    v8[4].n128_u64[1] = (unint64_t)a1;
    id v11 = v1;
    id v12 = a1;
    sub_1002588A8( (uint64_t)"%@ null call handle, should not reach here: call=%@",  51LL,  v13,  (uint64_t)&_mh_execute_header);

    sub_1001D9020();
  }

  sub_1001B0F4C();
}

void sub_100257EB0(uint64_t a1)
{
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v3);
  uint64_t v75 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v83 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v80 = (char *)v71 - v10;
  __chkstk_darwin(v9);
  id v12 = (char *)v71 - v11;
  unint64_t v81 = (void *)v1;
  id v73 = *(id *)(v1 + OBJC_IVAR___CSDContactsCallFilter_carrierBundleController);
  id v13 = [v73 serviceProviders];
  uint64_t v72 = sub_1001B4C00((uint64_t)v13, (unint64_t *)&unk_10044ABD8, off_1003D5D80);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v72);
  sub_1001D9294();
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v38 = v1;
    }
    else {
      uint64_t v38 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v38);
    sub_1001AA9C8();
    if (v14) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t v37 = sub_1001AA9C8();
    goto LABEL_15;
  }

  uint64_t v14 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v14) {
    goto LABEL_14;
  }
LABEL_3:
  if (v14 < 1)
  {
    __break(1u);
    return;
  }

  v71[1] = a1;
  uint64_t v74 = v8;
  uint64_t v82 = v5;
  uint64_t v15 = 0LL;
  unint64_t v77 = v1 & 0xC000000000000001LL;
  __n128 v76 = (__n128)xmmword_10037B6E0;
  uint64_t v78 = v14;
  uint64_t v79 = v1;
  uint64_t v16 = v83;
  do
  {
    if (v77) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v1);
    }
    else {
      id v17 = *(id *)(v1 + 8 * v15 + 32);
    }
    uint64_t v18 = v17;
    ++v15;
    id v19 = sub_1001704C4();
    uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v21 = (__n128 *)sub_1001C7370(v20, 152LL);
    v21[3].n128_u64[1] = sub_100258868(v21, v76);
    v21[4].n128_u64[0] = sub_100258770();
    uint64_t v22 = v81;
    v21[2].n128_u64[0] = (unint64_t)v81;
    id v23 = v22;
    id v24 = [v18 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    unint64_t v25 = v80;
    uint64_t v26 = v82;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v80, v12, v82);
    uint64_t v27 = String.init<A>(reflecting:)(v25, v26);
    unint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v26);
    v21[6].n128_u64[0] = (unint64_t)&type metadata for String;
    unint64_t v30 = sub_1001B2330();
    v21[6].n128_u64[1] = v30;
    v21[4].n128_u64[1] = v27;
    v21[5].n128_u64[0] = v29;
    id v31 = [v18 carrierPhoneNumbers];
    uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String);

    uint64_t v84 = v32;
    uint64_t v33 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
    uint64_t v34 = String.init<A>(reflecting:)(&v84, v33);
    v21[8].n128_u64[1] = (unint64_t)&type metadata for String;
    v21[9].n128_u64[0] = v30;
    v21[7].n128_u64[0] = v34;
    v21[7].n128_u64[1] = v35;
    uint64_t v36 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:type:_:)( "%@ serviceProviderUUID: %@ carrierPhoneNumbers: %@",  50LL,  2LL,  &_mh_execute_header,  v19,  v36,  v21);

    sub_1001B0EB8();
    uint64_t v1 = v79;
  }

  while (v78 != v15);
  uint64_t v37 = sub_1001AA9C8();
  uint64_t v5 = v82;
  id v8 = v74;
LABEL_15:
  id v39 = sub_1001D909C(v37, "localSenderIdentityUUID");
  if (!v39)
  {
    uint64_t v42 = v75;
    sub_1002588E0((uint64_t)v75, 1LL);
    goto LABEL_30;
  }

  uint64_t v40 = v39;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
  uint64_t v42 = v75;
  v41(v75, v12, v5);
  sub_1002588E0((uint64_t)v42, 0LL);
  if (sub_1001AB0AC((uint64_t)v42, 1LL, v5) == 1)
  {
LABEL_30:
    sub_1001AFF54((uint64_t)v42);
    return;
  }

  v41(v8, v42, v5);
  id v43 = [v73 serviceProviders];
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v72);
  sub_1001D9294();
  __chkstk_darwin(v44);
  v71[-2] = v8;
  id v45 = sub_1001CC7B0(sub_1002587AC, (uint64_t)&v71[-4], (uint64_t)v42);
  sub_1001AA9C8();
  if (v45)
  {
    id v46 = [v45 carrierPhoneNumbers];
    sub_1001D9294();
    uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, &type metadata for String);

    id v49 = sub_1001D909C(v48, "remoteHandle");
    if (!v49
      || (v50 = v49, id v51 = [v49 tuHandle], v50, !v51))
    {
      sub_1001B2428();
      sub_100258888();
      return;
    }

    id v52 = sub_1001704C4();
    uint64_t v53 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v54 = (__n128 *)sub_1001C7370(v53, 112LL);
    uint64_t v55 = sub_100258868(v54, (__n128)xmmword_10037B1B0);
    v54[4].n128_u64[0] = sub_1002588D8(v55);
    id v56 = v81;
    v54[2].n128_u64[0] = (unint64_t)v81;
    v54[6].n128_u64[0] = sub_1001AFF14((uint64_t *)&unk_100447EE0);
    v54[6].n128_u64[1] = sub_1002587C8();
    v54[4].n128_u64[1] = v47;
    id v57 = v56;
    uint64_t v58 = swift_bridgeObjectRetain(v47);
    uint64_t v59 = static os_log_type_t.default.getter(v58);
    os_log(_:dso:log:type:_:)("%@ carrierBundleNumbers=%@", 26LL, 2LL, &_mh_execute_header, v52, v59, v54);

    sub_1001D9020();
    uint64_t v60 = *(void *)(v47 + 16);
    if (v60)
    {
      uint64_t v74 = v8;
      uint64_t v82 = v5;
      swift_bridgeObjectRetain(v47);
      uint64_t v61 = (uint64_t *)(v47 + 40);
      while (1)
      {
        uint64_t v63 = *(v61 - 1);
        uint64_t v62 = *v61;
        sub_1001EE280();
        id v64 = [v51 value];
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        uint64_t v67 = v66;

        if (v63 == v65 && v62 == v67)
        {

          sub_1001B2428();
          uint64_t v70 = v62;
          goto LABEL_35;
        }

        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v62, v65, v67, 0LL);
        swift_bridgeObjectRelease(v67);
        if ((v69 & 1) != 0) {
          break;
        }
        v61 += 2;
        sub_1001B0EB8();
        if (!--v60)
        {

          swift_bridgeObjectRelease_n(v47, 2LL);
          goto LABEL_36;
        }
      }

      uint64_t v70 = v47;
LABEL_35:
      swift_bridgeObjectRelease(v70);
      sub_1001B0EB8();
      sub_1001B2428();
    }

    else
    {
      sub_1001B2428();
    }
  }

uint64_t sub_100258534(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

id sub_1002585F4()
{
  uint64_t v1 = OBJC_IVAR___CSDContactsCallFilter_contactStore;
  id v2 = (void *)objc_opt_self(&OBJC_CLASS___CNContactStore);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 storeWithOptions:3];
  uint64_t v4 = OBJC_IVAR___CSDContactsCallFilter_appleCareHandles;
  *(void *)&v3[v4] = [objc_allocWithZone(TUContactsDataProviderAppleCareHandles) init];
  uint64_t v5 = OBJC_IVAR___CSDContactsCallFilter_carrierBundleController;
  *(void *)&v3[v5] = [objc_allocWithZone((Class)CSDCarrierBundleProviderController) init];

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for ContactsCallFilter();
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1002586D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContactsCallFilter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ContactsCallFilter()
{
  return objc_opt_self(&OBJC_CLASS___CSDContactsCallFilter);
}

unint64_t sub_100258770()
{
  unint64_t result = qword_10044ABE8;
  if (!qword_10044ABE8)
  {
    uint64_t v1 = type metadata accessor for ContactsCallFilter();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044ABE8);
  }

  return result;
}

uint64_t sub_1002587AC(id *a1)
{
  return sub_100258534(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t sub_1002587C8()
{
  unint64_t result = qword_10044ABF0;
  if (!qword_10044ABF0)
  {
    uint64_t v1 = sub_1001B0504((uint64_t *)&unk_100447EE0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10044ABF0);
  }

  return result;
}

unint64_t sub_10025880C()
{
  unint64_t result = qword_10044AC00;
  if (!qword_10044AC00)
  {
    uint64_t v1 = sub_1001B4B94(255LL, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044AC00);
  }

  return result;
}

uint64_t sub_10025885C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(va, v8);
}

uint64_t sub_100258868(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for ContactsCallFilter();
}

id sub_100258870(uint64_t a1)
{
  return objc_msgSend(v1, *(SEL *)(v2 + 304), v3, a1);
}

uint64_t sub_100258888()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 104) + 8LL))(v1, v0);
}

uint64_t sub_10025889C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return String.init<A>(reflecting:)(va, v8);
}

uint64_t sub_1002588A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v4, v5, v6);
}

uint64_t sub_1002588BC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1002588C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v6, a6, v7);
}

unint64_t sub_1002588D8(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return sub_100258770();
}

uint64_t sub_1002588E0(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

uint64_t sub_1002588EC()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1002588F4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1002588FC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100258908()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001B0DB0(v0, qword_100454138);
  sub_1001B0D98(v0, (uint64_t)qword_100454138);
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  return Logger.init(_:)((id)qword_100454018);
}

uint64_t sub_100258988(uint64_t a1)
{
  return sub_100258AB4(a1, qword_100454150, 0x4D72656863756F56LL, 0xEE00726567616E61LL);
}

uint64_t sub_1002589B4(uint64_t a1)
{
  return sub_100258CEC(a1, qword_100454168, 26LL, 0x80000001003741C0LL);
}

uint64_t sub_1002589D4(uint64_t a1)
{
  return sub_100258AB4(a1, qword_100454180, 0x636974796C616E41LL, 0xE900000000000073LL);
}

uint64_t sub_1002589F8(uint64_t a1)
{
  return sub_100258CEC(a1, qword_100454198, 26LL, 0x8000000100374210LL);
}

uint64_t sub_100258A18(uint64_t a1)
{
  return sub_100258CF4(a1, qword_1004541B0, 0x736B6E696CLL);
}

uint64_t sub_100258A30(uint64_t a1)
{
  return sub_100258CEC(a1, qword_1004541C8, 16LL, 0x8000000100374230LL);
}

uint64_t sub_100258A50(uint64_t a1)
{
  return sub_100258CF4(a1, qword_1004541E0, 0x6F69647541LL);
}

uint64_t sub_100258A68(uint64_t a1)
{
  return sub_100258CEC(a1, qword_1004541F8, 33LL, 0x80000001003741E0LL);
}

uint64_t sub_100258A88(uint64_t a1)
{
  return sub_100258AB4(a1, qword_100454210, 0x6163696669746F4ELL, 0xED0000736E6F6974LL);
}

uint64_t sub_100258AB4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_1001B0DB0(v7, a2);
  sub_1001B0D98(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x80000001003741A0LL, a3, a4);
}

uint64_t sub_100258B28()
{
  uint64_t result = static os_log_type_t.error.getter();
  static os_log_type_t.errorWithState = result | 0x80;
  return result;
}

char *os_log_type_t.errorWithState.unsafeMutableAddressor()
{
  if (qword_100446958 != -1) {
    swift_once(&qword_100446958, sub_100258B28);
  }
  return &static os_log_type_t.errorWithState;
}

uint64_t static os_log_type_t.errorWithState.getter()
{
  if (qword_100446958 != -1) {
    swift_once(&qword_100446958, sub_100258B28);
  }
  sub_1001B0E80((uint64_t)&static os_log_type_t.errorWithState, (uint64_t)v1, 0LL);
  return static os_log_type_t.errorWithState;
}

uint64_t static os_log_type_t.errorWithState.setter(char a1)
{
  if (qword_100446958 != -1) {
    swift_once(&qword_100446958, sub_100258B28);
  }
  uint64_t result = sub_1001B0E80((uint64_t)&static os_log_type_t.errorWithState, (uint64_t)v3, 1LL);
  static os_log_type_t.errorWithState = a1;
  return result;
}

uint64_t (*static os_log_type_t.errorWithState.modify(uint64_t a1))(void)
{
  if (qword_100446958 != -1) {
    swift_once(&qword_100446958, sub_100258B28);
  }
  sub_1001B0E80((uint64_t)&static os_log_type_t.errorWithState, a1, 33LL);
  return j__swift_endAccess;
}

char *sub_100258CC0(char *__src, char *__dst, uint64_t a3)
{
  if (__dst) {
    return strncpy(__dst, __src, a3 - (void)__dst);
  }
  __break(1u);
  return __src;
}

uint64_t sub_100258CEC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100258AB4(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a4);
}

uint64_t sub_100258CF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100258AB4(a1, a2, a3, 0xE500000000000000LL);
}

uint64_t sub_100258CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SharedSecret(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(a3);
  if (!v3)
  {
    uint64_t v20 = a2;
    type metadata accessor for SHA256(0LL);
    __int128 v17 = xmmword_10037E3A0;
    __int128 v19 = xmmword_10037E3A0;
    if (qword_100446960 != -1) {
      swift_once(&qword_100446960, sub_10025962C);
    }
    __int128 v18 = xmmword_10044AC28;
    sub_100259DE4();
    unint64_t v11 = sub_1001BB428();
    uint64_t v14 = sub_10025A02C(v11, (uint64_t)&v19, (uint64_t)&v18, v12, v13, (uint64_t)&type metadata for Data);
    __int128 v19 = v17;
    if (qword_100446968 != -1) {
      uint64_t v14 = swift_once(&qword_100446968, sub_100259664);
    }
    __int128 v18 = xmmword_10044AC38;
    sub_10025A02C(v14, (uint64_t)&v19, (uint64_t)&v18, v15, v16, (uint64_t)&type metadata for Data);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return result;
}

void *sub_100258E9C( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100258EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100259574(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100258F0C(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v2 = sub_1001AFF14(&qword_10044AC50);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
    sub_100259E24((uint64_t)v17);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v20;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (char *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (void *)v5;
    }

    uint64_t v9 = Data._Representation.init(_:)(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(void *)&v17[0] = v9;
      *((void *)&v17[0] + 1) = v11;
      return *(void *)&v17[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v17[0] = Data._Representation.init(count:)(v12);
    *((void *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(void *)&v17[0]);
    sub_1002596E4();
    __asm { BR              X12 }
  }

  sub_1001D700C(v17, (uint64_t)v20);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_1001B204C(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v19,  sub_100259984,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_1001B0438(v20);
  return *(void *)&v17[0];
}

void sub_1002593F4(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_100259448 + dword_100259564[sub_1001B204C(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_100259458()
{
  uint64_t v4 = v6;
  sub_1001B0438(&v7);
  return v4;
}

uint64_t sub_100259574(uint64_t a1, uint64_t a2)
{
  void v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_1001B204C(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2 && (uint64_t v4 = v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = Data.InlineData.init(_:)(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = Data.LargeSlice.init(_:)();
    }

    else
    {
      uint64_t v6 = Data.InlineSlice.init(_:)();
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_1001B0438(v8);
  return v6;
}

uint64_t sub_10025962C()
{
  uint64_t result = sub_100258F0C(0xD000000000000011LL, 0x8000000100374270LL);
  *(void *)&xmmword_10044AC28 = result;
  *((void *)&xmmword_10044AC28 + 1) = v1;
  return result;
}

uint64_t sub_100259664()
{
  uint64_t result = sub_100258F0C(0xD000000000000012LL, 0x8000000100374250LL);
  *(void *)&xmmword_10044AC38 = result;
  *((void *)&xmmword_10044AC38 + 1) = v1;
  return result;
}

void *sub_10025969C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  uint64_t v5[2] = v6;
  return sub_100259A78( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100259E7C,  (uint64_t)v5,  a1,  a2);
}

void sub_1002596E4()
{
  __asm { BR              X11 }

void *sub_100259744@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  uint64_t v9 = BYTE4(a1);
  unint64_t v10 = BYTE5(a1);
  unint64_t v11 = BYTE6(a1);
  uint64_t result = sub_100258E9C((uint64_t)&v7, v3, v2, BYTE6(a1));
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_100259984@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_1002599F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    uint64_t result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_100259A78( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_100259AD8(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  char v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_100259B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_10025969C(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_100259BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1002599F8(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_100259BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v7 += a1 - result;
  }

  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return sub_100259984(v7, v13, a3);
}

uint64_t sub_100259C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v12 = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  if (a3)
  {
    if (a3 <= 14)
    {
      uint64_t result = Data.InlineData.init(_:)(&v12, (char *)&v12 + a3);
      unint64_t v9 = v10 & 0xFFFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
      uint64_t v7 = __DataStorage.init(bytes:length:)(&v12, a3);
      if ((unint64_t)a3 >= 0x7FFFFFFF)
      {
        uint64_t v11 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v11, 32LL, 7LL);
        *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
        *(void *)(result + 24) = a3;
        unint64_t v9 = v7 | 0x8000000000000000LL;
      }

      else
      {
        uint64_t result = a3 << 32;
        unint64_t v9 = v7 | 0x4000000000000000LL;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  *a4 = result;
  a4[1] = v9;
  return result;
}

unint64_t sub_100259DE4()
{
  unint64_t result = qword_10044AC48;
  if (!qword_10044AC48)
  {
    uint64_t v1 = type metadata accessor for SHA256(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SHA256, v1);
    atomic_store(result, (unint64_t *)&qword_10044AC48);
  }

  return result;
}

uint64_t sub_100259E24(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_10044AC58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100259E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100259B84(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_100259E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100259BB8(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t getEnumTagSinglePayload for ConversationLinkCryptoErrorType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ConversationLinkCryptoErrorType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100259F6C + 4 * byte_10037E3B5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100259FA0 + 4 * byte_10037E3B0[v4]))();
}

uint64_t sub_100259FA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100259FA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100259FB0LL);
  }
  return result;
}

uint64_t sub_100259FBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100259FC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100259FC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100259FD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationLinkCryptoErrorType()
{
  return &type metadata for ConversationLinkCryptoErrorType;
}

unint64_t sub_100259FF0()
{
  unint64_t result = qword_10044AC60;
  if (!qword_10044AC60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E420, &type metadata for ConversationLinkCryptoErrorType);
    atomic_store(result, (unint64_t *)&qword_10044AC60);
  }

  return result;
}

uint64_t sub_10025A02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)( v6,  a2,  a3,  32LL,  v6,  a6,  a6,  v7);
}

uint64_t sub_10025A048()
{
  return sub_1001BB31C(v1, v0);
}

void sub_10025A054(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
  sub_10022CE1C(v5);
}

uint64_t sub_10025A0A4()
{
  uint64_t v1 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = v0;
  id v5 = [v4 effectiveIdentifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  unint64_t v8 = v7;

  swift_bridgeObjectRelease(v8);
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if ([v4 flags])
  {
    id v10 = v4;
    if (([v10 flags] & 4) != 0)
    {

      goto LABEL_12;
    }

    unsigned __int8 v11 = [v10 flags];

    if ((v11 & 8) != 0)
    {
LABEL_12:
      unsigned int v16 = [v4 flags];

      return (v16 >> 9) & 1;
    }
  }

  sub_10025E9D8((uint64_t)v3);

  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = 1LL;
  int v14 = sub_1001AB0AC((uint64_t)v3, 1LL, v12);
  sub_1001AFF54((uint64_t)v3);
  if (v14 != 1)
  {
    id v15 = v4;
    goto LABEL_12;
  }

  return v13;
}

void sub_10025A218()
{
  if (v2) {
    sub_1001B9AF0(v1, v2);
  }
  else {
    [v0 flags];
  }
}

BOOL sub_10025A260()
{
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  v3._countAndFlagsBits = 0x5654656C707041LL;
  v3._object = (void *)0xE700000000000000LL;
  Swift::Bool v4 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease(v2);
  return v4;
}

uint64_t sub_10025A2C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + qword_1004487F8);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  sub_1001E76C8(v4, a1);
  LOBYTE(a1) = v5;
  uint64_t result = swift_bridgeObjectRelease(v3);
  if ((a1 & 1) == 0)
  {
    unint64_t v7 = *(void (**)(uint64_t))(v1 + qword_1004487A0);
    if (v7)
    {
      uint64_t v8 = *(void *)(v1 + qword_1004487A0 + 8);
      uint64_t v9 = swift_retain(v8);
      v7(v9);
      return sub_1001B5D3C((uint64_t)v7, v8);
    }
  }

  return result;
}

uint64_t sub_10025A358(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_1004487F8);
  *(void *)(v1 + qword_1004487F8) = a1;
  sub_10025A2C8(v2);
  return swift_bridgeObjectRelease(v2);
}

char *sub_10025A38C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone((Class)type metadata accessor for CallCenterObserver());
  id v7 = a1;
  id v8 = [v6 init];
  sub_1001D8EA0(0LL, &qword_1004488E8, off_1003D5E10);
  id v10 = [(id)swift_getObjCClassFromMetadata(v9) sharedInstance];
  unsigned __int8 v11 = sub_100260524(v7, (uint64_t)v10, v8, a2, objc_allocWithZone(v3));

  return v11;
}

void sub_10025A44C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10025A4A0();
  }

uint64_t sub_10025A4A0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v155 = v0;
  char v5 = *(void **)(v0 + qword_1004487D0);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1004468F0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
LABEL_90:
    __break(1u);
  }

  swift_once(&qword_1004468F0, sub_100208418);
LABEL_3:
  uint64_t v7 = qword_100454018;
  uint64_t v152 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v8 = swift_allocObject(v152, 72LL, 7LL);
  __int128 v150 = xmmword_10037B290;
  *(_OWORD *)(v8 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  uint64_t v9 = v155;
  v182[0] = sub_10025EAF4();
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_10044AD30);
  uint64_t v11 = String.init<A>(reflecting:)(v182, v10);
  uint64_t v13 = v12;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v14 = sub_1001B2330();
  unint64_t v151 = v14;
  *(void *)(v8 + 64) = v14;
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  os_log(_:dso:log:type:_:)( "Updating nearby device routes using devices: %@",  47LL,  2LL,  &_mh_execute_header,  v7,  v15,  v8);
  swift_bridgeObjectRelease(v8);
  uint64_t v159 = &_swiftEmptySetSingleton;
  char v17 = *(uint64_t (**)(uint64_t))(v9 + qword_1004487B8);
  uint64_t v16 = *(void *)(v9 + qword_1004487B8 + 8);
  uint64_t v18 = swift_retain(v16);
  unsigned __int8 v19 = v17(v18);
  swift_release(v16);
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v9 + qword_1004487C0);
  uint64_t v21 = *(void *)(v9 + qword_1004487C0 + 8);
  uint64_t v22 = swift_retain(v21);
  char v23 = v20(v22);
  swift_release(v21);
  char v24 = *(_BYTE *)(v9 + qword_100448810) ^ 1;
  unint64_t v25 = &selRef_payload;
  if ((v24 & 1) != 0 || ((v19 ^ 1) & 1) != 0 || (v23 & 1) == 0)
  {
    uint64_t v109 = qword_100454018;
    uint64_t v27 = swift_allocObject(v152, 112LL, 7LL);
    *(_OWORD *)(v27 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
    LOBYTE(v182[0]) = v24 & 1;
    uint64_t v110 = String.init<A>(reflecting:)(v182, &type metadata for Bool);
    unint64_t v111 = v151;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = v111;
    *(void *)(v27 + 32) = v110;
    *(void *)(v27 + 40) = v112;
    LOBYTE(v182[0]) = (v19 ^ 1) & 1;
    uint64_t v113 = String.init<A>(reflecting:)(v182, &type metadata for Bool);
    *(void *)(v27 + 96) = &type metadata for String;
    *(void *)(v27 + 104) = v111;
    *(void *)(v27 + 72) = v113;
    *(void *)(v27 + 80) = v114;
    uint64_t v115 = static os_log_type_t.default.getter(v113);
    os_log(_:dso:log:type:_:)( "Current calls do not support nearby devices (%@) or device doesn't support primary calling (%@)",  95LL,  2LL,  &_mh_execute_header,  v109,  v115,  v27);
    goto LABEL_58;
  }

  uint64_t result = (uint64_t)sub_10025EAF4();
  uint64_t v27 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
    uint64_t v28 = result;
    if (result) {
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v28 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v28)
    {
LABEL_8:
      if (v28 < 1)
      {
        __break(1u);
        goto LABEL_97;
      }

      uint64_t v29 = 0LL;
      uint64_t v30 = v155 + qword_1004487C8;
      uint64_t v149 = v155 + qword_1004487E8;
      uint64_t v153 = qword_100448808;
      unint64_t v154 = v27 & 0xC000000000000001LL;
      uint64_t v147 = qword_100448800;
      uint64_t v140 = v28;
      while (1)
      {
        id v31 = v154
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v27)
            : *(id *)(v27 + 8 * v29 + 32);
        uint64_t v32 = v31;
        if (*(_BYTE *)(v155 + v153) == 1)
        {
          sub_10024D128(v31, (SEL *)&selRef_idsDeviceIdentifier);
          if (!v34) {
            break;
          }
          uint64_t v35 = v33;
          uint64_t v36 = v34;
          uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))v30;
          uint64_t v37 = *(void *)(v30 + 8);
          swift_retain(v37);
          id v39 = (void *)v38(v35, v36);
          swift_bridgeObjectRelease(v36);
          swift_release(v37);
          if (!v39) {
            break;
          }
          unsigned int v40 = [v39 canReceiveRelayedGFTCalls];

          if (!v40) {
            break;
          }
        }

        sub_10024D128(v32, (SEL *)&selRef_idsDeviceIdentifier);
        if (v42)
        {
          uint64_t v43 = v41;
          uint64_t v44 = v42;
          id v46 = *(uint64_t (**)(uint64_t, uint64_t))v30;
          uint64_t v45 = *(void *)(v30 + 8);
          swift_retain(v45);
          uint64_t v47 = (void *)v46(v43, v44);
          swift_bridgeObjectRelease(v44);
          swift_release(v45);
          if (v47)
          {
            unsigned __int8 v48 = [v47 canReceiveRelayedCalls];

            if ((v48 & 1) == 0)
            {
LABEL_29:

              goto LABEL_30;
            }
          }
        }

        if (sub_10025A260())
        {
          uint64_t v49 = qword_100454018;
          uint64_t v50 = swift_allocObject(v152, 72LL, 7LL);
          *(_OWORD *)(v50 + ++*(void *)(v0 + 16) = v150;
          id v175 = v32;
          sub_1001D8EA0(0LL, &qword_100448F18, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
          uint64_t v52 = v51;
          id v53 = v32;
          uint64_t v54 = String.init<A>(reflecting:)(&v175, v52);
          unint64_t v55 = v151;
          *(void *)(v50 + 56) = &type metadata for String;
          *(void *)(v50 + 64) = v55;
          *(void *)(v50 + 32) = v54;
          *(void *)(v50 + 40) = v56;
          uint64_t v57 = static os_log_type_t.default.getter(v54);
          os_log(_:dso:log:type:_:)("filtering out device: %@", 24LL, 2LL, &_mh_execute_header, v49, v57, v50);
          goto LABEL_23;
        }

        sub_1001F8064(v149, (uint64_t)&v175);
        id v65 = sub_10025B3DC(&v175);
        sub_1001B0438(&v175);
        if (!v65) {
          goto LABEL_29;
        }
        id v66 = v32;
        id v67 = v65;
        sub_10025FF4C((uint64_t)v66, v67, v166);
        uint64_t v68 = sub_1001BA1B0((uint64_t)v166, (uint64_t)&v167);
        uint64_t v70 = v168;
        if (!v168)
        {
          id v148 = v67;
          uint64_t v72 = qword_100454018;
          uint64_t v73 = static os_log_type_t.error.getter(v68, v69);
          uint64_t v50 = swift_allocObject(v152, 72LL, 7LL);
          *(_OWORD *)(v50 + ++*(void *)(v0 + 16) = v150;
          id v175 = v66;
          sub_1001D8EA0(0LL, &qword_100448F18, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
          uint64_t v75 = v74;
          id v76 = v66;
          uint64_t v77 = String.init<A>(reflecting:)(&v175, v75);
          unint64_t v78 = v151;
          *(void *)(v50 + 56) = &type metadata for String;
          *(void *)(v50 + 64) = v78;
          *(void *)(v50 + 32) = v77;
          *(void *)(v50 + 40) = v79;
          os_log(_:dso:log:type:_:)( "Could not convert NearbyDevice to NearbyDeviceRoute: %@",  55LL,  2LL,  &_mh_execute_header,  v72,  v73,  v50);

          goto LABEL_24;
        }

        uint64_t v71 = v170;
        char v174 = v172;
        if (v171 != 13)
        {
          uint64_t v142 = v167;
          uint64_t v143 = v169;
          uint64_t v144 = v171;
          uint64_t v145 = v170;
          id v148 = v67;
          uint64_t v80 = *(void **)(v155 + v147);
          id v146 = v66;
          id v141 = v173;
          if (!v80)
          {
            id v95 = v173;
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v71);
            goto LABEL_49;
          }

          id v139 = v173;
          swift_bridgeObjectRetain(v70);
          swift_bridgeObjectRetain(v71);
          id v81 = [v80 remoteDevice];
          if (!v81)
          {
LABEL_49:
            uint64_t v97 = v70;
            char v98 = v174;
            uint64_t v99 = *(void **)(v155 + v147);
            if (v99 && (id v100 = [v99 remoteDestination]) != 0)
            {
              uint64_t v101 = v100;
              sub_1001D8EA0(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
              id v102 = v141;
              char v103 = static NSObject.== infix(_:_:)(v141, v101);

              id v104 = v102;
              v98 |= v103;
            }

            else
            {
              id v104 = v141;
            }

            goto LABEL_56;
          }

          uint64_t v82 = v81;
          sub_10024D128(v66, (SEL *)&selRef_idsDeviceIdentifier);
          uint64_t v137 = v83;
          uint64_t v85 = v84;
          id v86 = [v82 uniqueIDOverride];
          if (v86)
          {
            uint64_t v87 = v86;
            uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
            uint64_t v138 = v88;

            if (v85)
            {
              uint64_t v89 = v85;
              uint64_t v90 = v138;
              if (v138)
              {
                if (v137 != v136 || v89 != v138)
                {
                  char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v137, v89, v136, v138, 0LL);
                  uint64_t v93 = v89;
                  char v94 = v92;
                  swift_bridgeObjectRelease(v93);
                  swift_bridgeObjectRelease(v90);

                  if ((v94 & 1) != 0)
                  {
LABEL_55:
                    uint64_t v97 = v70;

                    char v98 = 1;
                    id v104 = v141;
LABEL_56:
                    v182[0] = v142;
                    v182[1] = v97;
                    uint64_t v105 = v145;
                    v182[2] = v143;
                    v182[3] = v145;
                    v182[4] = v144;
                    char v183 = v98 & 1;
                    id v184 = v104;
                    sub_10024AC78();

                    uint64_t v106 = v176;
                    uint64_t v107 = v178;
                    uint64_t v108 = v181;

                    swift_bridgeObjectRelease(v105);
                    swift_bridgeObjectRelease(v97);

                    swift_bridgeObjectRelease(v107);
                    swift_bridgeObjectRelease(v106);
                    uint64_t v28 = v140;
                    goto LABEL_30;
                  }

                  goto LABEL_49;
                }

                swift_bridgeObjectRelease(v89);
                swift_bridgeObjectRelease(v90);
LABEL_54:

                goto LABEL_55;
              }

LABEL_97:
  __break(1u);
  return result;
}

void sub_10025B050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    char v5 = (void *)Strong;
    id v6 = [*(id *)(Strong + qword_1004487D8) callContainer];
    id v7 = [v6 frontmostAudioOrVideoCall];
    swift_unknownObjectRelease(v6);
    if (v7)
    {
      uint64_t v8 = objc_opt_self(&OBJC_CLASS___CSDCall);
      uint64_t v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
      if (v9) {
        id v10 = v7;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    sub_10025B128(v9);
  }

uint64_t sub_10025B128(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [a1 relayClientTransport];
  uint64_t v26 = v7;
  uint64_t v27 = v4;
  if (a1)
  {
    id v12 = a1;
    if ([v12 isHostedOnCurrentDevice]
      && [v12 hasRelaySupport:2])
    {
      id v13 = [v12 provider];
      unsigned __int8 v14 = [v13 isSystemProvider];
    }

    else
    {
      unsigned __int8 v14 = 0;
    }

    unsigned __int8 v15 = [v12 needsConversationOrVideoRelaySupport];
  }

  else
  {
    unsigned __int8 v15 = 0;
    unsigned __int8 v14 = 0;
  }

  uint64_t v16 = swift_allocObject(&unk_1003E44A8, 40LL, 7LL);
  *(void *)(v16 + ++*(void *)(v0 + 16) = v1;
  *(_BYTE *)(v16 + 24) = v14;
  *(_BYTE *)(v16 + 25) = v15;
  *(void *)(v16 + 32) = v11;
  void aBlock[4] = sub_1002608EC;
  uint64_t v30 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  aBlock[3] = &unk_1003E44C0;
  char v17 = _Block_copy(aBlock);
  id v18 = v1;
  id v19 = v11;
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v28 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v21 = v20;
  uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v3, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v26);
  return swift_release(v30);
}

id sub_10025B3DC(void *a1)
{
  uint64_t v2 = v1;
  sub_10024D128(v2, (SEL *)&selRef_idsDeviceIdentifier);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    sub_1001B204C(a1, v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v6, v7, v8, v9);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  sub_10024D128(v2, (SEL *)&selRef_publicIdentifier);
  if (v12)
  {
    uint64_t v13 = v12;
    if (v10)
    {
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      uint64_t v14 = v11;
      sub_1001D8EA0(0LL, &qword_1004488D0, &OBJC_CLASS___IDSDestination_ptr);
      return sub_10025B688(v14, v13);
    }
  }

  return (id)v10;
}

uint64_t sub_10025B4C4(uint64_t a1, char a2, char a3, void *a4)
{
  *(_BYTE *)(a1 + qword_100448810) = a2;
  *(_BYTE *)(a1 + qword_100448808) = a3;
  uint64_t v6 = qword_100448800;
  uint64_t v7 = *(void **)(a1 + qword_100448800);
  if (v7)
  {
    if (a4)
    {
      sub_1001D8EA0(0LL, (unint64_t *)&unk_1004488D8, off_1003D5DB8);
      id v8 = a4;
      id v9 = v7;
      char v10 = static NSObject.== infix(_:_:)(v9, v8);

      if ((v10 & 1) != 0) {
        return sub_10025A4A0();
      }
    }
  }

  else if (!a4)
  {
    return sub_10025A4A0();
  }

  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v11 = qword_100454018;
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  if (a4)
  {
    uint64_t v25 = a4;
    sub_1001D8EA0(0LL, (unint64_t *)&unk_1004488D8, off_1003D5DB8);
    uint64_t v15 = v14;
    id v16 = a4;
    uint64_t v17 = String.init<A>(reflecting:)(&v25, v15);
    unint64_t v19 = v18;
  }

  else
  {
    unint64_t v19 = 0xE300000000000000LL;
    uint64_t v17 = 7104878LL;
  }

  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v20 = sub_1001B2330();
  *(void *)(v13 + 64) = v20;
  *(void *)(v13 + 32) = v17;
  *(void *)(v13 + 40) = v19;
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  os_log(_:dso:log:type:_:)("Updating activeRelayClientTransport to %@", 41LL, 2LL, &_mh_execute_header, v11, v21, v13);
  swift_bridgeObjectRelease(v13);
  uint64_t v22 = *(void **)(a1 + v6);
  *(void *)(a1 + v6) = a4;
  id v23 = a4;

  return sub_10025A4A0();
}

id sub_10025B688(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) destinationWithRapportPublicIdentifier:v4];

  return v5;
}

uint64_t sub_10025B758()
{
  return v1;
}

uint64_t sub_10025B7C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a2 = *v3;
  return swift_bridgeObjectRetain(v4);
}

void sub_10025B83C()
{
}

void sub_10025B910()
{
}

void sub_10025B9E8()
{
}

void sub_10025BABC()
{
}

id sub_10025BB74(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  swift_getObjectType(v3);
  *(void *)&v3[OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier] = &_swiftEmptyDictionarySingleton;
  sub_100260B10(OBJC_IVAR___CSDRouteController_routesDidChangeHandler);
  sub_100260B10(OBJC_IVAR___CSDRouteController_pickedRouteDidChangeHandler);
  sub_100260B10(OBJC_IVAR___CSDRouteController_routeWasPickedHandler);
  sub_100260B10(OBJC_IVAR___CSDRouteController_timedOutPickingRouteHandler);
  uint64_t v6 = &v3[OBJC_IVAR___CSDRouteController_pendingRouteContext];
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  *(void *)uint64_t v6 = 0LL;
  sub_100260B10(OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier);
  *(void *)&v3[OBJC_IVAR___CSDRouteController_pendingPickedRouteTimeout] = 30LL;
  *(void *)&v3[OBJC_IVAR___CSDRouteController_queue] = a2;
  *(void *)&v3[OBJC_IVAR___CSDRouteController_routeProviders] = a1;
  v22.receiver = v3;
  v22.super_class = v7;
  id v8 = a2;
  swift_bridgeObjectRetain(a1);
  id v9 = objc_msgSendSuper2(&v22, "init");
  id v10 = v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    unint64_t v19 = v8;
    id v20 = v9;
    uint64_t v21 = a1;
    uint64_t v12 = (__int128 *)(a1 + 32);
    id v8 = v9;
    do
    {
      __int128 v13 = *v12++;
      uint64_t ObjectType = swift_getObjectType(v13);
      uint64_t v15 = sub_1001C7370((uint64_t)&unk_1003E4408, 24LL);
      swift_unknownObjectWeakInit(v15 + 16);
      uint64_t v16 = sub_1001C7370((uint64_t)&unk_1003E4430, 40LL);
      *(void *)(v16 + ++*(void *)(v0 + 16) = v15;
      *(_OWORD *)(v16 + 24) = v13;
      uint64_t v17 = *(void (**)(void (*)(), uint64_t, uint64_t, void))(*((void *)&v13 + 1) + 24LL);
      swift_unknownObjectRetain_n(v13, 2LL);
      swift_retain(v15);
      v17(sub_10025FF40, v16, ObjectType, *((void *)&v13 + 1));
      swift_unknownObjectRelease(v13);
      swift_release(v15);
      --v11;
    }

    while (v11);

    id v10 = v20;
    a1 = v21;
  }

  swift_bridgeObjectRelease(a1);
  return v10;
}

void sub_10025BD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    id v9 = (char *)Strong;
    id v10 = *(void **)(Strong + OBJC_IVAR___CSDRouteController_queue);
    *(void *)uint64_t v7 = v10;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
    id v11 = v10;
    LOBYTE(v10) = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v10 & 1) != 0)
    {
      uint64_t v12 = &v9[OBJC_IVAR___CSDRouteController_pendingRouteContext];
      __int128 v13 = *(void **)&v9[OBJC_IVAR___CSDRouteController_pendingRouteContext];
      if (v13)
      {
        uint64_t v14 = *((void *)v12 + 1);
        if (v14 == a2)
        {
          *(void *)uint64_t v12 = 0LL;
          *((void *)v12 + 1) = 0LL;
          *((void *)v12 + 2) = 0LL;
          sub_10025E68C(v13, v14);
        }
      }

      sub_10025BE84();
    }

    else
    {
      __break(1u);
    }
  }

void sub_10025BE84()
{
  unint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void (***)(uint64_t, void, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR___CSDRouteController_queue);
  *(void *)uint64_t v6 = v7;
  v4[13](v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  uint64_t v9 = _dispatchPreconditionTest(_:)(v6);
  ((void (*)(uint64_t, uint64_t))v4[1])(v6, v3);
  if ((v9 & 1) != 0)
  {
    uint64_t v1 = (uint64_t *)(v2 + OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier);
    swift_beginAccess(v2 + OBJC_IVAR___CSDRouteController__routesByUniqueIdentifier, v109, 0LL, 0LL);
    uint64_t v9 = *v1;
    swift_beginAccess(v1, v108, 33LL, 0LL);
    swift_bridgeObjectRetain(v9);
    sub_1001AFF14(&qword_10044ACE8);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    swift_endAccess(v108);
    uint64_t v99 = OBJC_IVAR___CSDRouteController_pendingRouteContext;
    LODWORD(v4) = *(void *)(v2 + OBJC_IVAR___CSDRouteController_pendingRouteContext) != 0LL;
    uint64_t v6 = sub_10025D7A8();
    if (!((unint64_t)v6 >> 62))
    {
      uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  else
  {
LABEL_60:
    __break(1u);
  }

  if (v6 < 0) {
    uint64_t v93 = v6;
  }
  else {
    uint64_t v93 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v93);
  swift_bridgeObjectRelease(v6);
LABEL_4:
  id v95 = (void *)v9;
  if (v10)
  {
    int v100 = (int)v4;
    id v11 = 0LL;
    unint64_t v103 = v6 & 0xC000000000000001LL;
    uint64_t v9 = 4LL;
    uint64_t v101 = v10;
    id v102 = (char *)&type metadata for Any + 8;
    uint64_t v12 = &selRef_sharedPrivacyManager;
    unint64_t v96 = v2;
    uint64_t v98 = v6;
    while (1)
    {
      if (v103) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6);
      }
      else {
        id v13 = *(id *)(v6 + 8 * v9);
      }
      uint64_t v14 = v13;
      uint64_t v4 = (void (**)(uint64_t, void, uint64_t))(v9 - 3);
      if (__OFADD__(v9 - 4, 1LL))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }

      id v15 = [v13 mutableCopy];
      _bridgeAnyObjectToAny(_:)(v108, v15);
      swift_unknownObjectRelease(v15);
      sub_1001D8EA0(0LL, &qword_10044ACF0, &OBJC_CLASS___TUMutableRoute_ptr);
      if (!swift_dynamicCast(&v107, v108, v102, v16, 6LL))
      {

        goto LABEL_38;
      }

      id v105 = v14;
      uint64_t v106 = (void (**)(uint64_t, void, uint64_t))(v9 - 3);
      uint64_t v17 = v12[359];
      id v104 = v107;
      id v18 = [v107 v17];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v21 = v20;

      objc_super v22 = *(void **)(v2 + v99);
      if (v22)
      {
        id v23 = [v22 v12[359]];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        uint64_t v26 = v25;

        if (v19 == v24 && v21 == v26)
        {
          swift_bridgeObjectRelease_n(v21, 2LL);
          uint64_t v10 = v101;
          uint64_t v12 = &selRef_sharedPrivacyManager;
LABEL_23:

          id v29 = v105;
          id v31 = v105;
          id v30 = v104;
          [v104 setCurrentlyPicked:1];
          id v11 = v29;
LABEL_24:
          uint64_t v4 = v106;
          goto LABEL_25;
        }

        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v24, v26, 0LL);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v26);
        uint64_t v10 = v101;
        uint64_t v12 = &selRef_sharedPrivacyManager;
        if ((v28 & 1) != 0) {
          goto LABEL_23;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v21);
      }

      id v30 = v104;
      id v29 = v105;
      if ((v100 & 1) != 0)
      {
        [v104 setCurrentlyPicked:0];
        int v100 = 1;
        goto LABEL_24;
      }

      unsigned int v50 = [v104 isCurrentlyPicked];
      uint64_t v4 = v106;
      if (v50)
      {

        id v51 = v29;
        int v100 = 1;
        id v11 = v29;
      }

      else
      {
        int v100 = 0;
      }

void sub_10025C710()
{
  uint64_t v4 = sub_100260A94(v3);
  sub_100260B1C(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t v5 = (void *)sub_100260ABC(63LL, 0x80000001003746D0LL);
  uint64_t v6 = sub_1001AFF14(&qword_10044AD10);
  uint64_t v7 = sub_1001C7370(v6, 64LL);
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
  sub_1001AFF14(&qword_10044AD18);
  id v8 = objc_allocWithZone(&OBJC_CLASS___RPCompanionLinkClient);
  id v9 = v5;
  *(void *)(v7 + 32) = sub_10025A38C([v8 init], v9);
  *(void *)(v7 + 40) = &off_1003E0170;
  type metadata accessor for LocalAudioRouteProvider();
  id v10 = v9;
  *(void *)(v7 + 48) = sub_100280CA8(v10);
  *(void *)(v7 + 56) = &off_1003E56B0;
  objc_allocWithZone(v11);
  sub_10025BB74(v7, v10);
  sub_1001B0FF8();
}

void sub_10025C8F0()
{
  uint64_t v4 = sub_100260A94(v3);
  sub_100260B1C(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t v5 = (void *)sub_100260ABC(74LL, 0x8000000100374680LL);
  uint64_t v6 = sub_1001AFF14(&qword_10044AD10);
  uint64_t v7 = sub_1001C7370(v6, 48LL);
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  objc_allocWithZone((Class)type metadata accessor for PairedHostDeviceRouteProvider());
  id v8 = v5;
  *(void *)(v7 + 32) = sub_100272CC4((uint64_t)v8);
  *(void *)(v7 + 40) = &off_1003E4D40;
  objc_allocWithZone(v9);
  sub_10025BB74(v7, v8);
  sub_1001B0FF8();
}

void sub_10025CA88()
{
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1001C7360();
  uint64_t v17 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v9);
  sub_1001B10F0();
  uint64_t v10 = sub_1001C7370((uint64_t)&unk_1003E4200, 41LL);
  *(void *)(v10 + ++*(void *)(v0 + 16) = v0;
  *(void *)(v10 + 24) = v7;
  *(void *)(v10 + 32) = v5;
  *(_BYTE *)(v10 + 40) = v3;
  id v11 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v12 = v0;
  swift_bridgeObjectRetain(v5);
  sub_1001C7348();
  sub_100260B2C((unint64_t *)&qword_100447CB0);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72F8(v13);
  uint64_t v14 = sub_100260B34();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v14, v15, v16);
  _Block_release(v11);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_10025CBEC(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v94) = a4;
  uint64_t v96 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v93 = (void *)v6;
  __chkstk_darwin(v6);
  unint64_t v91 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v79 - v20;
  uint64_t v95 = a2;
  objc_super v22 = sub_10025D250(a2, v96);
  if (v22)
  {
    uint64_t v25 = v22;
    uint64_t v94 = v23;
    uint64_t v27 = (void **)v95;
    uint64_t v26 = v96;
    char v28 = &a1[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier];
    if (*(void *)&a1[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8])
    {
      uint64_t v92 = v24;
      if (qword_1004468F0 != -1) {
        swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v93 = v25;
      uint64_t v29 = qword_100454018;
      uint64_t v30 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v31 = swift_allocObject(v30, 112LL, 7LL);
      *(_OWORD *)(v31 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
      uint64_t v32 = *((void *)v28 + 1);
      if (v32)
      {
        aBlock = *(void ***)v28;
        uint64_t v99 = v32;
        swift_bridgeObjectRetain(v32);
        uint64_t v33 = String.init<A>(reflecting:)(&aBlock, &type metadata for String);
        unint64_t v35 = v34;
      }

      else
      {
        unint64_t v35 = 0xE300000000000000LL;
        uint64_t v33 = 7104878LL;
      }

      *(void *)(v31 + 56) = &type metadata for String;
      unint64_t v73 = sub_1001B2330();
      *(void *)(v31 + 64) = v73;
      *(void *)(v31 + 32) = v33;
      *(void *)(v31 + 40) = v35;
      aBlock = v27;
      uint64_t v99 = v26;
      swift_bridgeObjectRetain(v26);
      uint64_t v74 = String.init<A>(reflecting:)(&aBlock, &type metadata for String);
      *(void *)(v31 + 96) = &type metadata for String;
      *(void *)(v31 + 104) = v73;
      *(void *)(v31 + 72) = v74;
      *(void *)(v31 + 80) = v75;
      uint64_t v76 = static os_log_type_t.default.getter(v74);
      os_log(_:dso:log:type:_:)( "Clearing out pickWhenAvailable route identifier %@ because user is picking available route %@",  93LL,  2LL,  &_mh_execute_header,  v29,  v76,  v31);
      swift_bridgeObjectRelease(v31);
      uint64_t v77 = *((void *)v28 + 1);
      *(void *)char v28 = 0LL;
      *((void *)v28 + 1) = 0LL;
      swift_bridgeObjectRelease(v77);
      uint64_t v24 = v92;
      uint64_t v25 = v93;
    }

    uint64_t v78 = v94;
    sub_10025D514(v25, v94, v24);
    swift_unknownObjectRelease(v78);
  }

  else
  {
    uint64_t v80 = v19;
    uint64_t v81 = v16;
    uint64_t v82 = v14;
    uint64_t v83 = v12;
    uint64_t v84 = v11;
    unint64_t v85 = v21;
    uint64_t v86 = v15;
    uint64_t v87 = v10;
    id v36 = sub_1001704C4();
    uint64_t v37 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v38 = swift_allocObject(v37, 112LL, 7LL);
    *(_OWORD *)(v38 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
    *(void *)(v38 + 56) = &type metadata for String;
    unint64_t v39 = sub_1001B2330();
    *(void *)(v38 + 64) = v39;
    uint64_t v41 = (void **)v95;
    uint64_t v40 = v96;
    *(void *)(v38 + 32) = v95;
    *(void *)(v38 + 40) = v40;
    swift_bridgeObjectRetain(v40);
    uint64_t v88 = a1;
    uint64_t v42 = sub_10025D7A8();
    *(void *)(v38 + 96) = sub_1001AFF14(&qword_10044A5F0);
    sub_1001C6AE8(&qword_10044ACE0, &qword_10044A5F0);
    *(void *)(v38 + 104) = v43;
    *(void *)(v38 + 72) = v42;
    uint64_t v44 = static os_log_type_t.default.getter(v43);
    os_log(_:dso:log:type:_:)( "Could not find route to pick with unique identifier %@. All routes: %@",  70LL,  2LL,  &_mh_execute_header,  v36,  v44,  v38);

    swift_bridgeObjectRelease(v38);
    if ((v94 & 1) != 0)
    {
      uint64_t v45 = v40;
      if (qword_1004468F0 != -1) {
        swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v46 = qword_100454018;
      uint64_t v47 = swift_allocObject(v37, 72LL, 7LL);
      *(_OWORD *)(v47 + ++*(void *)(v0 + 16) = xmmword_10037B290;
      aBlock = v41;
      uint64_t v99 = v45;
      swift_bridgeObjectRetain(v45);
      uint64_t v48 = String.init<A>(reflecting:)(&aBlock, &type metadata for String);
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = v39;
      *(void *)(v47 + 32) = v48;
      *(void *)(v47 + 40) = v49;
      uint64_t v50 = static os_log_type_t.default.getter(v48);
      os_log(_:dso:log:type:_:)( "Will pick route identifier %@ when it becomes available to pick",  63LL,  2LL,  &_mh_execute_header,  v46,  v50,  v47);
      swift_bridgeObjectRelease(v47);
      id v51 = v88;
      uint64_t v52 = (void ***)&v88[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier];
      uint64_t v53 = *(void *)&v88[OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8];
      *uint64_t v52 = v41;
      v52[1] = (void **)v45;
      swift_bridgeObjectRelease(v53);
      uint64_t v54 = swift_bridgeObjectRetain(v45);
      unint64_t v55 = v80;
      static DispatchWallTime.now()(v54);
      uint64_t v56 = v82;
      void *v82 = 30LL;
      uint64_t v58 = v83;
      uint64_t v57 = v84;
      (*(void (**)(void *, void, uint64_t))(v83 + 104))( v56,  enum case for DispatchTimeInterval.seconds(_:),  v84);
      uint64_t v59 = v85;
      + infix(_:_:)(v55, v56);
      (*(void (**)(void *, uint64_t))(v58 + 8))(v56, v57);
      char v60 = *(void (**)(char *, uint64_t))(v81 + 8);
      uint64_t v61 = v86;
      v60(v55, v86);
      uint64_t v62 = swift_allocObject(&unk_1003E4250, 24LL, 7LL);
      *(void *)(v62 + ++*(void *)(v0 + 16) = v51;
      id v102 = sub_10025E684;
      uint64_t v103 = v62;
      aBlock = _NSConcreteStackBlock;
      uint64_t v99 = 1107296256LL;
      int v100 = sub_1002356BC;
      uint64_t v101 = &unk_1003E4268;
      uint64_t v63 = _Block_copy(&aBlock);
      id v64 = v51;
      uint64_t v65 = v87;
      static DispatchQoS.unspecified.getter(v64);
      id v97 = _swiftEmptyArrayStorage;
      sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v67 = v66;
      uint64_t v68 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
      sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
      uint64_t v69 = v91;
      uint64_t v70 = v68;
      uint64_t v71 = v93;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v70, v72, v93, v67);
      OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)(v59, v65, v69, v63);
      _Block_release(v63);
      (*(void (**)(char *, void *))(v92 + 8))(v69, v71);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v65, v90);
      v60(v59, v61);
      swift_release(v103);
    }
  }

void *sub_10025D250(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___CSDRouteController_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
LABEL_32:
    __break(1u);
    return result;
  }

  uint64_t v11 = *(void *)(v2 + OBJC_IVAR___CSDRouteController_routeProviders);
  uint64_t v33 = *(void *)(v11 + 16);
  if (v33)
  {
    uint64_t v36 = v11 + 32;
    uint64_t result = (void *)swift_bridgeObjectRetain(v11);
    unint64_t v12 = 0LL;
    unint64_t v35 = result;
    while (v12 < result[2])
    {
      unint64_t v37 = v12;
      uint64_t v13 = (void *)(v36 + 16 * v12);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t ObjectType = swift_getObjectType(*v13);
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
      swift_unknownObjectRetain(v14);
      uint64_t v38 = v14;
      uint64_t v34 = v15;
      uint64_t v18 = v17(ObjectType, v15);
      uint64_t v19 = v18;
      if ((unint64_t)v18 >> 62)
      {
        if (v18 < 0) {
          uint64_t v31 = v18;
        }
        else {
          uint64_t v31 = v18 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain_n(v18, 2LL);
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v31);
        swift_bridgeObjectRelease(v19);
        if (v20)
        {
LABEL_7:
          uint64_t v21 = 4LL;
          while (1)
          {
            uint64_t result = (v19 & 0xC000000000000001LL) != 0
                   ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, v19)
                   : *(id *)(v19 + 8 * v21);
            objc_super v22 = result;
            uint64_t v23 = v21 - 3;
            if (__OFADD__(v21 - 4, 1LL)) {
              break;
            }
            id v24 = [result uniqueIdentifier];
            uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            uint64_t v27 = v26;

            uint64_t v28 = v39;
            if (v25 == a1 && v27 == v39)
            {
              swift_bridgeObjectRelease(v19);
LABEL_27:
              swift_bridgeObjectRelease(v19);
              swift_bridgeObjectRelease(v28);
              swift_bridgeObjectRelease(v35);
              return v22;
            }

            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, a1, v39, 0LL);
            swift_bridgeObjectRelease(v27);
            if ((v30 & 1) != 0)
            {
              uint64_t v28 = v19;
              goto LABEL_27;
            }

            ++v21;
            if (v23 == v20) {
              goto LABEL_18;
            }
          }

          __break(1u);
          break;
        }
      }

      else
      {
        uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v18);
        if (v20) {
          goto LABEL_7;
        }
      }

uint64_t sub_10025D514(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (id *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v12 = *(void **)&v4[OBJC_IVAR___CSDRouteController_queue];
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    uint64_t ObjectType = swift_getObjectType(a2);
    (*(void (**)(void *, uint64_t, uint64_t))(a3 + 40))(a1, ObjectType, a3);
    uint64_t v16 = &v4[OBJC_IVAR___CSDRouteController_pendingRouteContext];
    uint64_t v17 = *(void **)&v4[OBJC_IVAR___CSDRouteController_pendingRouteContext];
    uint64_t v18 = *(void *)&v4[OBJC_IVAR___CSDRouteController_pendingRouteContext + 8];
    *(void *)uint64_t v16 = a1;
    *((void *)v16 + 1) = a2;
    *((void *)v16 + 2) = a3;
    sub_10025E68C(v17, v18);
    id v19 = a1;
    uint64_t v20 = swift_unknownObjectRetain(a2);
    sub_10025BE84(v20);
    uint64_t v21 = *(void *)&v4[OBJC_IVAR___CSDRouteController_routeProviders];
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      id v39 = v19;
      uint64_t v40 = ObjectType;
      uint64_t v41 = a3;
      uint64_t v42 = v4;
      swift_bridgeObjectRetain(v21);
      uint64_t v23 = 32LL;
      do
      {
        uint64_t v24 = *(void *)(v21 + v23);
        uint64_t v25 = swift_getObjectType(v24);
        uint64_t v26 = sub_10020EBC0(v24, v25, (uint64_t)&protocol descriptor for DeselectableRouteProvider);
        if (v26) {
          BOOL v28 = v26 == a2;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          uint64_t v29 = v27;
          uint64_t v30 = swift_getObjectType(v26);
          uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
          swift_unknownObjectRetain(v24);
          v31(v30, v29);
          swift_unknownObjectRelease(v24);
        }

        v23 += 16LL;
        --v22;
      }

      while (v22);
      swift_bridgeObjectRelease(v21);
      a3 = v41;
      uint64_t v4 = v42;
      id v19 = v39;
      uint64_t ObjectType = v40;
    }

    uint64_t v32 = type metadata accessor for LocalAudioRouteProvider();
    uint64_t result = swift_dynamicCastClass(a2, v32);
    if (!result
      || *(void *)(result + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) <= 1uLL)
    {
      uint64_t v33 = (void *)swift_allocObject(&unk_1003E42A0, 48LL, 7LL);
      v33[2] = v4;
      void v33[3] = v19;
      v33[4] = a2;
      void v33[5] = a3;
      uint64_t v34 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(a3 + 48);
      id v35 = v19;
      swift_unknownObjectRetain(a2);
      uint64_t v36 = v4;
      v34(sub_10025E6E8, v33, ObjectType, a3);
      uint64_t result = swift_release(v33);
    }

    unint64_t v37 = *(void (**)(id))&v4[OBJC_IVAR___CSDRouteController_routeWasPickedHandler];
    if (v37)
    {
      uint64_t v38 = *(void *)&v4[OBJC_IVAR___CSDRouteController_routeWasPickedHandler + 8];
      swift_retain(v38);
      v37(v19);
      return sub_1001B5D3C((uint64_t)v37, v38);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10025D7A8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CSDRouteController_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR___CSDRouteController_routeProviders);
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v9)
    {
      uint64_t v31 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v8);
      sub_100250170(0LL, v9, 0LL);
      uint64_t v10 = v31;
      uint64_t v11 = (uint64_t *)(v8 + 40);
      do
      {
        uint64_t v12 = *(v11 - 1);
        uint64_t v13 = *v11;
        uint64_t ObjectType = swift_getObjectType(v12);
        uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
        swift_unknownObjectRetain(v12);
        uint64_t v16 = v15(ObjectType, v13);
        swift_unknownObjectRelease(v12);
        uint64_t v31 = v10;
        unint64_t v18 = v10[2];
        unint64_t v17 = v10[3];
        if (v18 >= v17 >> 1)
        {
          sub_100250170(v17 > 1, v18 + 1, 1LL);
          uint64_t v10 = v31;
        }

        _OWORD v10[2] = v18 + 1;
        v10[v18 + 4] = v16;
        v11 += 2;
        --v9;
      }

      while (v9);
      swift_bridgeObjectRelease(v8);
    }

    uint64_t v19 = v10[2];
    if (v19)
    {
      swift_bridgeObjectRetain(v10);
      uint64_t v20 = 0LL;
      uint64_t v21 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v22 = v10[v20++ + 4];
        uint64_t v31 = v21;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v21);
        sub_1002907BC(v22, v23, v24, v25, v26, v27, v28, v29, v30);
        swift_bridgeObjectRelease(v21);
        uint64_t v21 = v31;
      }

      while (v19 != v20);
      swift_bridgeObjectRelease(v10);
    }

    else
    {
      uint64_t v21 = _swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease(v10);
    return (uint64_t)v21;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10025D9B8(uint64_t result)
{
  uint64_t v1 = (void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier);
  if (*(void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8))
  {
    if (qword_1004468F0 != -1) {
      swift_once(&qword_1004468F0, sub_100208418);
    }
    uint64_t v2 = qword_100454018;
    uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v4 = swift_allocObject(v3, 112LL, 7LL);
    *(_OWORD *)(v4 + ++*(void *)(v0 + 16) = xmmword_10037B1B0;
    uint64_t v5 = v1[1];
    if (v5)
    {
      v14[0] = *v1;
      v14[1] = v5;
      swift_bridgeObjectRetain(v5);
      uint64_t v6 = String.init<A>(reflecting:)(v14, &type metadata for String);
      unint64_t v8 = v7;
    }

    else
    {
      unint64_t v8 = 0xE300000000000000LL;
      uint64_t v6 = 7104878LL;
    }

    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v9 = sub_1001B2330();
    *(void *)(v4 + 64) = v9;
    *(void *)(v4 + 32) = v6;
    *(void *)(v4 + 40) = v8;
    v14[0] = 30LL;
    uint64_t v10 = String.init<A>(reflecting:)(v14, &type metadata for Int);
    *(void *)(v4 + 96) = &type metadata for String;
    *(void *)(v4 + 104) = v9;
    *(void *)(v4 + 72) = v10;
    *(void *)(v4 + 80) = v11;
    uint64_t v12 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:type:_:)( "Route identifier %@ did not become available in %@ seconds",  58LL,  2LL,  &_mh_execute_header,  v2,  v12,  v4);
    swift_bridgeObjectRelease(v4);
    uint64_t v13 = v1[1];
    *uint64_t v1 = 0LL;
    v1[1] = 0LL;
    return swift_bridgeObjectRelease(v13);
  }

  return result;
}

void sub_10025DB6C()
{
  uint64_t v2 = sub_1001C7360();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v4);
  sub_1001B10F0();
  uint64_t v5 = sub_1001C7370((uint64_t)&unk_1003E41B0, 24LL);
  *(void *)(v5 + ++*(void *)(v0 + 16) = v0;
  v15[5] = sub_10025E644;
  v15[6] = v5;
  v15[1] = _NSConcreteStackBlock;
  void v15[2] = 1107296256LL;
  uint64_t v6 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v7 = v0;
  sub_1001C7348();
  v15[0] = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v9 = v8;
  uint64_t v10 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v15, v10, v11, v2, v9);
  uint64_t v12 = sub_1002392D0();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v12, v13, v14);
  _Block_release(v6);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_10025DCCC(uint64_t result)
{
  uint64_t v1 = (void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier);
  if (*(void *)(result + OBJC_IVAR___CSDRouteController_pickWhenAvailableRouteIdentifier + 8))
  {
    if (qword_1004468F0 != -1) {
      swift_once(&qword_1004468F0, sub_100208418);
    }
    uint64_t v2 = qword_100454018;
    uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
    *(_OWORD *)(v4 + ++*(void *)(v0 + 16) = xmmword_10037B290;
    uint64_t v5 = v1[1];
    if (v5)
    {
      v12[0] = *v1;
      v12[1] = v5;
      swift_bridgeObjectRetain(v5);
      uint64_t v6 = String.init<A>(reflecting:)(v12, &type metadata for String);
      unint64_t v8 = v7;
    }

    else
    {
      unint64_t v8 = 0xE300000000000000LL;
      uint64_t v6 = 7104878LL;
    }

    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v9 = sub_1001B2330();
    *(void *)(v4 + 64) = v9;
    *(void *)(v4 + 32) = v6;
    *(void *)(v4 + 40) = v8;
    uint64_t v10 = static os_log_type_t.default.getter(v9);
    os_log(_:dso:log:type:_:)( "Stopping waiting for route identifier %@ to become available",  60LL,  2LL,  &_mh_execute_header,  v2,  v10,  v4);
    swift_bridgeObjectRelease(v4);
    uint64_t v11 = v1[1];
    *uint64_t v1 = 0LL;
    v1[1] = 0LL;
    return swift_bridgeObjectRelease(v11);
  }

  return result;
}

void sub_10025DE30()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001C7360();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v6);
  sub_1001B10F0();
  uint64_t v7 = sub_1001C7370((uint64_t)&unk_1003E4160, 32LL);
  *(void *)(v7 + ++*(void *)(v0 + 16) = v0;
  *(void *)(v7 + 24) = v3;
  unint64_t v8 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v9 = v0;
  swift_bridgeObjectRetain(v3);
  sub_1001C7348();
  sub_100260B2C((unint64_t *)&qword_100447CB0);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72F8(v10);
  uint64_t v11 = sub_100260B34();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v11, v12, v13);
  _Block_release(v8);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_10025DF7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + OBJC_IVAR___CSDRouteController_routeProviders);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(*(void *)(result + OBJC_IVAR___CSDRouteController_routeProviders));
    uint64_t v5 = 32LL;
    do
    {
      uint64_t v6 = *(void *)(v2 + v5);
      uint64_t ObjectType = swift_getObjectType(v6);
      if (sub_10020EBC0(v6, ObjectType, (uint64_t)&protocol descriptor for PairedHostDeviceRouteTrackingRouteProvider))
      {
        swift_unknownObjectRetain(v6);
        sub_100273350(a2);
        swift_unknownObjectRelease(v6);
      }

      v5 += 16LL;
      --v3;
    }

    while (v3);
    return swift_bridgeObjectRelease(v2);
  }

  return result;
}

void sub_10025E09C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  id v9 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)(v5 + OBJC_IVAR___CSDRouteController_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, void *))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, void *))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = v5 + OBJC_IVAR___CSDRouteController_pendingRouteContext;
  uint64_t v15 = *(void **)(v5 + OBJC_IVAR___CSDRouteController_pendingRouteContext);
  if (!v15) {
    return;
  }
  id v9 = v15;
  if ([a1 isEqualToRouteIgnoringIsRecommended:v9])
  {
    uint64_t ObjectType = swift_getObjectType(a2);
    unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    a2 = v17;
    id v41 = a1;
    if (!(v17 >> 62))
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v17);
      if (v18) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }

void sub_10025E3DC()
{
}

uint64_t type metadata accessor for RouteController()
{
  return objc_opt_self(&OBJC_CLASS___CSDRouteController);
}

uint64_t initializeBufferWithCopyOfBuffer for RouteController.PendingRouteContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v6;
  id v4 = v3;
  swift_unknownObjectRetain(v6);
  return a1;
}

uint64_t destroy for RouteController.PendingRouteContext(uint64_t a1)
{
  return swift_unknownObjectRelease(*(void *)(a1 + 8));
}

uint64_t assignWithCopy for RouteController.PendingRouteContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v9);
  *(void *)(a1 + ++*(void *)(v0 + 16) = v8;
  return a1;
}

uint64_t assignWithTake for RouteController.PendingRouteContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease(v5);
  *(void *)(a1 + ++*(void *)(v0 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for RouteController.PendingRouteContext()
{
  return &type metadata for RouteController.PendingRouteContext;
}

uint64_t sub_10025E604()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10025E624()
{
  return sub_10025DF7C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10025E62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10025E63C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10025E644()
{
  return sub_10025DCCC(*(void *)(v0 + 16));
}

uint64_t sub_10025E64C()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

void sub_10025E674()
{
}

uint64_t sub_10025E684()
{
  return sub_10025D9B8(*(void *)(v0 + 16));
}

void *sub_10025E68C(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_unknownObjectRelease(a2);
  }

  return result;
}

uint64_t sub_10025E6B8()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10025E6E8()
{
}

id sub_10025E710()
{
  return [v0 localDevice];
}

void sub_10025E734(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
  sub_10022CE1C(v5);
}

void sub_10025E778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  if (a1)
  {
    v8[4] = a1;
    uint64_t v9 = a2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256LL;
    uint64_t v8[2] = a3;
    void v8[3] = a4;
    uint64_t v7 = _Block_copy(v8);
    swift_release(v9);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  objc_msgSend(v5, *a5, v7);
  _Block_release(v7);
}

void sub_10025E7FC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_10025E858(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v6[4] = a1;
    uint64_t v7 = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256LL;
    void v6[2] = sub_100240708;
    void v6[3] = &unk_1003E44E8;
    uint64_t v4 = _Block_copy(v6);
    uint64_t v5 = v7;
    swift_retain(a2);
    swift_release(v5);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  [v2 activateWithCompletion:v4];
  _Block_release(v4);
}

void sub_10025E8FC()
{
  id v1 = [v0 effectiveIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  sub_10010B978();
}

void sub_10025E948()
{
}

void sub_10025E968()
{
}

void sub_10025E988()
{
}

id sub_10025E9A8()
{
  return [v0 flags];
}

void sub_10025E9B8()
{
}

uint64_t sub_10025E9D8@<X0>(uint64_t a1@<X8>)
{
  id v3 = [v1 mediaSystemIdentifier];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  uint64_t v6 = type metadata accessor for UUID(0LL);
  return sub_1001A9670(a1, v5, 1LL, v6);
}

void sub_10025EA44()
{
}

uint64_t sub_10025EA64(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x70LL));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *id v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

void sub_10025EA94()
{
  id v1 = (char *)v0 + *(void *)((swift_isaMask & *v0) + 0x70LL);
  uint64_t v2 = *(void (**)(uint64_t))v1;
  if (*(void *)v1)
  {
    uint64_t v3 = *((void *)v1 + 1);
    uint64_t v4 = swift_retain(v3);
    v2(v4);
    sub_1001B5D3C((uint64_t)v2, v3);
  }

void *sub_10025EAF4()
{
  id v1 = (id *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68LL));
  swift_beginAccess(v1, v27, 0LL, 0LL);
  id v2 = [*v1 localDevice];
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned int v4 = [v2 flags];

    int v5 = (v4 >> 5) & 1;
  }

  else
  {
    int v5 = 0;
  }

  uint64_t v6 = (void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x78LL));
  swift_beginAccess(v6, v26, 0LL, 0LL);
  uint64_t v7 = *v6;
  sub_10023BD50(v28);
  uint64_t v8 = (void *)v28[0];
  uint64_t v9 = v28[1];
  int64_t v10 = v28[3];
  unint64_t v11 = v28[4];
  int64_t v12 = (unint64_t)(v28[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(v7);
  while (v11)
  {
    unint64_t v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v14 = v13 | (v10 << 6);
LABEL_25:
    id v19 = *(id *)(v8[7] + 8 * v14);
    id v20 = [v19 flags];
    if ((v20 & v5 & 1) != 0)
    {
    }

    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
      specialized ContiguousArray._endMutation()(v22);
    }
  }

  int64_t v15 = v10 + 1;
  if (__OFADD__(v10, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v15 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v15);
  int64_t v17 = v10 + 1;
  if (v16) {
    goto LABEL_24;
  }
  int64_t v17 = v10 + 2;
  if (v10 + 2 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v17);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v17 = v10 + 3;
  if (v10 + 3 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v17);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v17 = v10 + 4;
  if (v10 + 4 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v17);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v17 = v10 + 5;
  if (v10 + 5 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v17);
  if (v16) {
    goto LABEL_24;
  }
  int64_t v17 = v10 + 6;
  if (v10 + 6 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v17);
  if (v16)
  {
LABEL_24:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    int64_t v10 = v17;
    goto LABEL_25;
  }

  int64_t v18 = v10 + 7;
  while (v18 < v12)
  {
    unint64_t v16 = *(void *)(v9 + 8 * v18++);
    if (v16)
    {
      int64_t v17 = v18 - 1;
      goto LABEL_24;
    }
  }

void *sub_10025ED6C(void *a1, void *a2)
{
  unsigned int v4 = (void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x70LL));
  *unsigned int v4 = 0LL;
  v4[1] = 0LL;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x78LL)) = &_swiftEmptyDictionarySingleton;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60LL)) = a2;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x68LL)) = a1;
  id v5 = a1;
  id v6 = a2;
  v20.receiver = v2;
  v20.super_class = (Class)sub_1001AFF14(&qword_10044AD28);
  uint64_t v7 = objc_msgSendSuper2(&v20, "init");
  uint64_t v8 = swift_allocObject(&unk_1003E4520, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16);
  uint64_t v9 = (id *)((char *)v7 + *(void *)((swift_isaMask & *v7) + 0x68LL));
  swift_beginAccess(v9, v19, 33LL, 0LL);
  uint64_t v10 = swift_allocObject(&unk_1003E4548, 32LL, 7LL);
  *(void *)(v10 + ++*(void *)(v0 + 16) = sub_100260900;
  *(void *)(v10 + 24) = v8;
  unint64_t v11 = v7;
  swift_retain(v8);
  sub_10025E778( (uint64_t)sub_100260924,  v10,  (uint64_t)sub_10025B930,  (uint64_t)&unk_1003E4740,  (SEL *)&selRef_setLocalDeviceUpdatedHandler_);
  swift_endAccess(v19);
  swift_release(v8);
  uint64_t v12 = swift_allocObject(&unk_1003E4520, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16);
  swift_beginAccess(v9, v19, 33LL, 0LL);
  uint64_t v13 = swift_allocObject(&unk_1003E4570, 32LL, 7LL);
  *(void *)(v13 + ++*(void *)(v0 + 16) = sub_10026094C;
  *(void *)(v13 + 24) = v12;
  swift_retain(v12);
  sub_10025E778( (uint64_t)sub_1002609EC,  v13,  (uint64_t)sub_10025B930,  (uint64_t)&unk_1003E46C8,  (SEL *)&selRef_setDeviceFoundHandler_);
  swift_endAccess(v19);
  swift_release(v12);
  uint64_t v14 = swift_allocObject(&unk_1003E4520, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16);
  swift_beginAccess(v9, v19, 33LL, 0LL);
  uint64_t v15 = swift_allocObject(&unk_1003E4598, 32LL, 7LL);
  *(void *)(v15 + ++*(void *)(v0 + 16) = sub_100260954;
  *(void *)(v15 + 24) = v14;
  swift_retain(v14);
  sub_10025E778( (uint64_t)sub_1002609EC,  v15,  (uint64_t)sub_10025B930,  (uint64_t)&unk_1003E4650,  (SEL *)&selRef_setDeviceLostHandler_);
  swift_endAccess(v19);
  swift_release(v14);
  uint64_t v16 = swift_allocObject(&unk_1003E4520, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16);
  swift_beginAccess(v9, v19, 33LL, 0LL);
  uint64_t v17 = swift_allocObject(&unk_1003E45C0, 32LL, 7LL);
  *(void *)(v17 + ++*(void *)(v0 + 16) = sub_10026095C;
  *(void *)(v17 + 24) = v16;
  swift_retain(v16);
  sub_10025E778( (uint64_t)sub_100260924,  v17,  (uint64_t)sub_10025E7FC,  (uint64_t)&unk_1003E45D8,  (SEL *)&selRef_setDeviceChangedHandler_);
  swift_endAccess(v19);
  swift_release(v16);
  swift_beginAccess(v9, v19, 33LL, 0LL);
  objc_msgSend(*v9, "setFlags:", objc_msgSend(*v9, "flags") | 1);
  swift_endAccess(v19);

  return v11;
}

void *sub_10025F12C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v23, 0LL, 0LL);
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v12 = result;
    v19[1] = *(id *)((char *)result + *(void *)((swift_isaMask & *result) + 0x60LL));
    uint64_t v13 = swift_allocObject(&unk_1003E4778, 24LL, 7LL);
    *(void *)(v13 + ++*(void *)(v0 + 16) = v12;
    void aBlock[4] = sub_1002609C0;
    uint64_t v22 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    aBlock[3] = &unk_1003E4790;
    uint64_t v14 = _Block_copy(aBlock);
    v19[0] = v12;
    static DispatchQoS.unspecified.getter(v19[0]);
    objc_super v20 = _swiftEmptyArrayStorage;
    sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v16 = v15;
    uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v3, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

    return (void *)swift_release(v22);
  }

  return result;
}

uint64_t sub_10025F35C(uint64_t a1)
{
  id v1 = (void *)a1;
  if (qword_1004468F0 != -1) {
    a1 = swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v2 = qword_100454018;
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  uint64_t result = os_log(_:dso:log:type:_:)( "Local device updated",  20LL,  2LL,  &_mh_execute_header,  v2,  v3,  _swiftEmptyArrayStorage);
  uint64_t v5 = (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x70LL);
  id v6 = *(void (**)(uint64_t))v5;
  if (*(void *)v5)
  {
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t v8 = swift_retain(v7);
    v6(v8);
    return sub_1001B5D3C((uint64_t)v6, v7);
  }

  return result;
}

void sub_10025F420(void *a1, void *a2)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v4 = qword_100454018;
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  v30[0] = a1;
  sub_1001D8EA0(0LL, &qword_100448F18, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
  uint64_t v8 = v7;
  id v9 = a1;
  uint64_t v10 = String.init<A>(reflecting:)(v30, v8);
  uint64_t v12 = v11;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v13 = sub_1001B2330();
  *(void *)(v6 + 64) = v13;
  *(void *)(v6 + 32) = v10;
  *(void *)(v6 + 40) = v12;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("Found nearby device: %@", 23LL, 2LL, &_mh_execute_header, v4, v14, v6);
  swift_bridgeObjectRelease(v6);
  id v15 = [v9 effectiveIdentifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000LL) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v19
    && (objc_super v20 = (void *)((char *)a2 + *(void *)((swift_isaMask & *a2) + 0x78LL)),
        swift_beginAccess(v20, v30, 0LL, 0LL),
        uint64_t v21 = *v20,
        swift_bridgeObjectRetain(*v20),
        uint64_t v22 = (void *)sub_1001CA024(v16, v18, v21),
        swift_bridgeObjectRelease(v21),
        v22,
        !v22))
  {
    swift_beginAccess(v20, v29, 33LL, 0LL);
    id v23 = v9;
    sub_1001FE4E8((uint64_t)v23, v16, v18, v24, v25, v26, v27, v28, v29[0], v29[1]);
    swift_endAccess(v29);
    swift_bridgeObjectRelease(v18);
    sub_10025EA94();
  }

  else
  {
    swift_bridgeObjectRelease(v18);
  }

void sub_10025F62C()
{
  uint64_t v24 = v0;
  uint64_t v25 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1001C7360();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = sub_1001C7290();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1001B10F0();
  v5 += 16LL;
  swift_beginAccess(v5, &v30, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    unint64_t v13 = (void *)Strong;
    if ((sub_10025A0A4() & 1) != 0)
    {
      uint64_t v14 = sub_1001C7370(v3, 32LL);
      *(void *)(v14 + ++*(void *)(v0 + 16) = v7;
      *(void *)(v14 + 24) = v13;
      v28[4] = v24;
      uint64_t v29 = v14;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 1107296256LL;
      __int128 v28[2] = sub_1002356BC;
      void v28[3] = v25;
      id v15 = _Block_copy(v28);
      id v16 = v7;
      id v26 = v13;
      sub_1001C7348();
      uint64_t v27 = _swiftEmptyArrayStorage;
      sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v18 = v17;
      uint64_t v19 = sub_1001C7340();
      sub_1001C7368((unint64_t *)&qword_100447CC0);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v19, v20, v8, v18);
      uint64_t v21 = sub_1002392D0();
      OS_dispatch_queue.async(group:qos:flags:execute:)(v21, v22, v23);
      _Block_release(v15);
      sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));

      swift_release(v29);
    }

    else
    {
    }
  }

  sub_1001B0FF8();
}

void sub_10025F7FC(void *a1, void *a2)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v4 = qword_100454018;
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  v25[0] = a1;
  sub_1001D8EA0(0LL, &qword_100448F18, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
  uint64_t v8 = v7;
  id v9 = a1;
  uint64_t v10 = String.init<A>(reflecting:)(v25, v8);
  uint64_t v12 = v11;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v13 = sub_1001B2330();
  *(void *)(v6 + 64) = v13;
  *(void *)(v6 + 32) = v10;
  *(void *)(v6 + 40) = v12;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("Lost nearby device: %@", 22LL, 2LL, &_mh_execute_header, v4, v14, v6);
  swift_bridgeObjectRelease(v6);
  id v15 = [v9 effectiveIdentifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000LL) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v19
    && (uint64_t v20 = (void *)((char *)a2 + *(void *)((swift_isaMask & *a2) + 0x78LL)),
        swift_beginAccess(v20, v25, 0LL, 0LL),
        uint64_t v21 = *v20,
        swift_bridgeObjectRetain(*v20),
        uint64_t v22 = (void *)sub_1001CA024(v16, v18, v21),
        swift_bridgeObjectRelease(v21),
        v22,
        v22))
  {
    swift_beginAccess(v20, v24, 33LL, 0LL);
    uint64_t v23 = (void *)sub_1001FDA88(v16, v18);
    swift_endAccess(v24);
    swift_bridgeObjectRelease(v18);

    sub_10025EA94();
  }

  else
  {
    swift_bridgeObjectRelease(v18);
  }

void *sub_10025FA04(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v28, 0LL, 0LL);
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    uint64_t v14 = result;
    v24[1] = *(id *)((char *)result + *(void *)((swift_isaMask & *result) + 0x60LL));
    uint64_t v15 = swift_allocObject(&unk_1003E4610, 32LL, 7LL);
    *(void *)(v15 + ++*(void *)(v0 + 16) = a1;
    *(void *)(v15 + 24) = v14;
    void aBlock[4] = sub_100260964;
    uint64_t v27 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    aBlock[3] = &unk_1003E4628;
    uint64_t v16 = v6;
    unint64_t v17 = _Block_copy(aBlock);
    id v18 = a1;
    v24[0] = v14;
    static DispatchQoS.unspecified.getter(v24[0]);
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v19 = v9;
    uint64_t v21 = v20;
    uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v22, v23, v5, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v19);

    return (void *)swift_release(v27);
  }

  return result;
}

void sub_10025FC44(void *a1, void *a2)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v4 = qword_100454018;
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + ++*(void *)(v0 + 16) = xmmword_10037B290;
  v30[0] = (uint64_t)a1;
  sub_1001D8EA0(0LL, &qword_100448F18, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
  uint64_t v8 = v7;
  id v9 = a1;
  uint64_t v10 = String.init<A>(reflecting:)(v30, v8);
  uint64_t v12 = v11;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v13 = sub_1001B2330();
  *(void *)(v6 + 64) = v13;
  *(void *)(v6 + 32) = v10;
  *(void *)(v6 + 40) = v12;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("Device changed: %@", 18LL, 2LL, &_mh_execute_header, v4, v14, v6);
  swift_bridgeObjectRelease(v6);
  id v15 = [v9 effectiveIdentifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000LL) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
    char v20 = sub_10025A0A4();
    uint64_t v21 = *(void *)((swift_isaMask & *a2) + 0x78LL);
    if ((v20 & 1) != 0)
    {
      swift_beginAccess((char *)a2 + v21, v30, 33LL, 0LL);
      id v22 = v9;
      sub_1001FE4E8((uint64_t)v22, v16, v18, v23, v24, v25, v26, v27, v29, v30[0]);
      swift_endAccess(v30);
      swift_bridgeObjectRelease(v18);
    }

    else
    {
      swift_beginAccess((char *)a2 + v21, v30, 33LL, 0LL);
      uint64_t v28 = (void *)sub_1001FDA88(v16, v18);
      swift_endAccess(v30);
      swift_bridgeObjectRelease(v18);
    }

    sub_10025EA94();
  }

  else
  {
    swift_bridgeObjectRelease(v18);
  }

void sub_10025FE48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (id *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x68LL));
  swift_beginAccess(v5, v7, 0LL, 0LL);
  id v6 = *v5;
  sub_10025E858(a1, a2);
}

uint64_t sub_10025FEC4()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10025FEE0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10025B7C0(*(void *)(v1 + 16), a1);
}

uint64_t sub_10025FEF8()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10025FF14()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10025FF40()
{
}

uint64_t sub_10025FF4C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001D8EA0(0LL, &qword_100448F18, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
  v32[3] = v9;
  v32[4] = &off_1003E5858;
  v32[0] = a1;
  if ((sub_10025A0A4() & 1) == 0) {
    goto LABEL_11;
  }
  sub_10025E9D8((uint64_t)v8);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  int v11 = sub_1001AB0AC((uint64_t)v8, 1LL, v10);
  sub_1001AFF54((uint64_t)v8);
  if (v11 == 1)
  {
    sub_1001F8064((uint64_t)v32, (uint64_t)v36);
    uint64_t v12 = sub_1001BA188((uint64_t)v36, v37);
    __chkstk_darwin(v12);
    uint64_t v14 = (void **)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(void **))(v15 + 16))(v14);
    sub_1002601FC(*v14, a2, v33);
    goto LABEL_8;
  }

  sub_10025A218();
  if (v16 > 0x1B || ((1LL << v16) & 0x8400040) == 0)
  {
    sub_1001F8064((uint64_t)v32, (uint64_t)v31);
    sub_1001B0438(v31);
    goto LABEL_11;
  }

  sub_1001F8064((uint64_t)v32, (uint64_t)v31);
  unsigned __int16 v17 = (unsigned __int16)objc_msgSend((id)*sub_1001B204C(v31, v31[3]), "flags");
  sub_1001B0438(v31);
  if ((v17 & 0x200) == 0)
  {
LABEL_11:

    goto LABEL_12;
  }

  sub_1001F8064((uint64_t)v32, (uint64_t)v36);
  uint64_t v18 = sub_1001BA188((uint64_t)v36, v37);
  __chkstk_darwin(v18);
  char v20 = (void **)((char *)v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(void **))(v21 + 16))(v20);
  sub_1002602B8(*v20, a2, v33);
LABEL_8:
  uint64_t v22 = v33[0];
  uint64_t v23 = v33[1];
  uint64_t v24 = v33[2];
  uint64_t v25 = v33[3];
  uint64_t v26 = v33[4];
  char v27 = v34;
  uint64_t v28 = v35;
  sub_1001B0438(v36);
  sub_1001BA1B0((uint64_t)v33, (uint64_t)v36);
  if (!v36[1])
  {
LABEL_12:
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v28 = 0LL;
    goto LABEL_13;
  }

  uint64_t v29 = v27 & 1;
LABEL_13:
  uint64_t result = sub_1001B0438(v32);
  *a3 = v22;
  a3[1] = v23;
  a3[2] = v24;
  a3[3] = v25;
  a3[4] = v26;
  a3[5] = v29;
  a3[6] = v28;
  return result;
}

void sub_1002601FC(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = v6;
    id v10 = [a1 effectiveIdentifier];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    sub_10025A218();
    uint64_t v15 = v14;
  }

  else
  {

    uint64_t v11 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v15 = 0LL;
    a2 = 0LL;
  }

  *a3 = v11;
  a3[1] = v13;
  a3[2] = v9;
  a3[3] = v8;
  a3[4] = v15;
  a3[5] = 0LL;
  a3[6] = (uint64_t)a2;
}

void sub_1002602B8(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10025E9D8((uint64_t)v8);
  if (sub_1001AB0AC((uint64_t)v8, 1LL, v9) == 1)
  {

    sub_1001AFF54((uint64_t)v8);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
LABEL_9:
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    goto LABEL_14;
  }

  id v25 = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  sub_10024D128(a1, (SEL *)&selRef_mediaSystemName);
  uint64_t v16 = v18;
  if (!v18)
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    goto LABEL_9;
  }

  uint64_t v15 = v17;
  uint64_t v13 = UUID.uuidString.getter(v17);
  uint64_t v14 = v19;
  sub_10025A218();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

  switch(v21)
  {
    case 6LL:
      uint64_t v22 = 14LL;
      break;
    case 22LL:
      uint64_t v22 = 23LL;
      break;
    case 27LL:
      uint64_t v22 = 28LL;
      break;
    default:
      uint64_t v22 = 0LL;
      break;
  }

  uint64_t v23 = (uint64_t)v25;
LABEL_14:
  *a3 = v13;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  a3[4] = v22;
  a3[5] = 0LL;
  a3[6] = v23;
}

void *sub_10026049C(uint64_t *a1, uint64_t a2)
{
  return sub_10025F12C(*a1, a2);
}

void sub_1002604A4()
{
}

void sub_1002604D4()
{
}

void *sub_100260504(void **a1, uint64_t a2, uint64_t a3)
{
  return sub_10025FA04(*a1, a2, a3);
}

void sub_10026050C(void **a1, void *a2)
{
}

void sub_100260514(void **a1, void *a2)
{
}

void sub_10026051C(void **a1, void *a2)
{
}

char *sub_100260524(void *a1, uint64_t a2, void *a3, void *a4, _BYTE *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  sub_1001D8EA0(0LL, &qword_10044AD20, off_1003D5DB0);
  uint64_t v11 = &a5[qword_1004487A0];
  void *v11 = 0LL;
  v11[1] = 0LL;
  *(void *)&a5[qword_1004487F8] = &_swiftEmptySetSingleton;
  v40[3] = v12;
  v40[4] = &off_1003E00A8;
  v40[0] = a2;
  *(void *)&a5[qword_100448800] = 0LL;
  a5[qword_100448808] = 0;
  a5[qword_100448810] = 1;
  *(void *)&a5[qword_1004487D0] = a4;
  id v13 = objc_allocWithZone((Class)sub_1001AFF14(&qword_10044AD28));
  id v14 = a4;
  id v15 = a1;
  uint64_t v16 = a5;
  *(void *)&v16[qword_1004487E0] = sub_10025ED6C(v15, v14);
  sub_1001F8064((uint64_t)v40, (uint64_t)&v16[qword_1004487E8]);
  *(void *)&v16[qword_1004487D8] = a3;
  id v17 = objc_allocWithZone(&OBJC_CLASS___TUConversationManager);
  swift_unknownObjectRetain(a3);
  id v18 = [v17 init];
  *(void *)&v16[qword_1004487F0] = v18;
  uint64_t v19 = (void (**)())&v16[qword_1004487A8];
  *uint64_t v19 = sub_1001EEA38;
  v19[1] = 0LL;
  uint64_t v20 = (void (**)())&v16[qword_1004487B0];
  *uint64_t v20 = sub_1001EEBF0;
  v20[1] = 0LL;
  uint64_t v21 = (id (**)())&v16[qword_1004487B8];
  *uint64_t v21 = sub_1001EED64;
  v21[1] = 0LL;
  uint64_t v22 = (BOOL (**)(uint64_t))&v16[qword_1004487C0];
  *uint64_t v22 = sub_1001EED8C;
  v22[1] = 0LL;
  uint64_t v23 = (void (**)(uint64_t))&v16[qword_1004487C8];
  void *v23 = sub_1001EEE1C;
  v23[1] = 0LL;

  v39.receiver = v16;
  v39.super_class = ObjectType;
  uint64_t v24 = (char *)objc_msgSendSuper2(&v39, "init");
  id v25 = *(void **)&v24[qword_1004487F0];
  uint64_t v26 = *(void *)&v24[qword_1004487D0];
  char v27 = v24;
  [v25 addDelegate:v27 queue:v26];
  uint64_t v28 = qword_1004487E0;
  uint64_t v29 = *(void **)&v27[qword_1004487E0];
  uint64_t v30 = swift_allocObject(&unk_1003E4458, 24LL, 7LL);
  swift_unknownObjectWeakInit(v30 + 16);
  id v31 = v29;
  swift_retain(v30);
  sub_10025EA64((uint64_t)sub_1002608B4, v30);

  swift_release(v30);
  id v32 = *(id *)&v27[v28];
  sub_10025FE48((uint64_t)sub_1001EFA48, 0LL);

  id v33 = *(void **)&v27[qword_1004487D8];
  [v33 setTriggers:33];
  uint64_t v34 = swift_allocObject(&unk_1003E4458, 24LL, 7LL);
  swift_unknownObjectWeakInit(v34 + 16);
  void aBlock[4] = sub_1002608BC;
  uint64_t v38 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10025A054;
  aBlock[3] = &unk_1003E4470;
  uint64_t v35 = _Block_copy(aBlock);
  swift_release(v38);
  [v33 setCallChanged:v35];

  _Block_release(v35);
  sub_1001B0438(v40);

  return v27;
}

void sub_1002608B4()
{
}

void sub_1002608BC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002608C4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002608EC()
{
  return sub_10025B4C4(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25), *(void **)(v0 + 32));
}

void *sub_100260900(uint64_t *a1)
{
  return sub_10026049C(a1, v1);
}

uint64_t sub_100260908()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100260924(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t *))(v1 + 16);
  uint64_t v3 = a1;
  v2(&v3);
  sub_1001D9410();
}

void sub_10026094C()
{
}

void sub_100260954()
{
}

void *sub_10026095C(void **a1, uint64_t a2)
{
  return sub_100260504(a1, a2, v2);
}

void sub_100260964()
{
}

uint64_t sub_100260970()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100260990()
{
}

void sub_10026099C()
{
}

uint64_t sub_1002609A8()
{
  uint64_t v0 = sub_1001B5DA8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1002609C0()
{
  return sub_10025F35C(*(void *)(v0 + 16));
}

uint64_t sub_100260A94(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 88, v3, a1, v1, v2);
}

uint64_t sub_100260AB0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100260ABC(uint64_t a1, uint64_t a2)
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL,  a2,  v4,  v3,  v2,  0LL);
}

uint64_t sub_100260AD8()
{
  return type metadata accessor for OS_dispatch_queue.Attributes(0LL);
}

uint64_t sub_100260AF4()
{
  return type metadata accessor for DispatchQoS(0LL);
}

void sub_100260B10(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t sub_100260B1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v3, a2, v4);
}

void sub_100260B2C(unint64_t *a1)
{
}

uint64_t sub_100260B34()
{
  return 0LL;
}

uint64_t sub_100260B48()
{
  *(void *)(v1 - 96) = v0;
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
}

  ;
}

uint64_t sub_100260B68()
{
  return static DispatchQoS.unspecified.getter();
}

void sub_100260B74(uint64_t a1, uint64_t (*a2)(uint64_t, id, uint64_t, uint64_t))
{
  uint64_t v4 = v29[0];
  uint64_t v28 = v29[1];
  int64_t v5 = v29[3];
  unint64_t v6 = v29[4];
  int64_t v30 = (unint64_t)(v29[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  char v27 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v5 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v9 >= v30) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v28 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v30) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v28 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v5 + 3;
        if (v5 + 3 >= v30) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v28 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v5 + 4;
          if (v5 + 4 >= v30) {
            goto LABEL_29;
          }
          unint64_t v10 = *(void *)(v28 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v5 + 5;
            if (v5 + 5 >= v30) {
              goto LABEL_29;
            }
            unint64_t v10 = *(void *)(v28 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v5 + 6;
              while (v12 < v30)
              {
                unint64_t v10 = *(void *)(v28 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }

void sub_100260DC4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v4 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), a1) & ~(-1LL << *(_BYTE *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0
      && *(void *)(*(void *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_100264258();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(void *)(v5 + 8 * v6) == a1) {
            break;
          }
          sub_100264258();
        }

        while ((v8 & 1) != 0);
      }
    }
  }

uint64_t sub_100260E64(void *a1, uint64_t a2)
{
  return sub_100260E8C(a1, a2, (unint64_t *)&qword_100447CE0, off_1003D5D70);
}

uint64_t sub_100260E78(void *a1, uint64_t a2)
{
  return sub_100260E8C(a1, a2, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
}

uint64_t sub_100260E8C(void *a1, uint64_t a2, unint64_t *a3, void *a4)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    return v7 & 1;
  }

  if (!*(void *)(a2 + 16)
    || (Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v12 = -1LL << *(_BYTE *)(a2 + 32),
        Swift::Int v13 = v11 & ~v12,
        sub_10026423C(),
        (v14 & 1) == 0))
  {
LABEL_11:
    char v17 = 0;
    return v17 & 1;
  }

  sub_1001D8EA0(0LL, a3, a4);
  id v15 = sub_1002642BC();
  char v16 = static NSObject.== infix(_:_:)(v15, a1);

  if ((v16 & 1) == 0)
  {
    uint64_t v18 = ~v12;
    uint64_t v19 = (v13 + 1) & v18;
    sub_10026423C();
    if ((v20 & 1) != 0)
    {
      do
      {
        id v21 = sub_1002642BC();
        char v17 = static NSObject.== infix(_:_:)(v21, a1);

        if ((v17 & 1) != 0) {
          break;
        }
        uint64_t v19 = (v19 + 1) & v18;
        sub_10026423C();
      }

      while ((v22 & 1) != 0);
      return v17 & 1;
    }

    goto LABEL_11;
  }

  char v17 = 1;
  return v17 & 1;
}

uint64_t sub_100260FB4()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1001B1234();
  uint64_t v18 = *(void *)(v5 - 8);
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_1001B10F0();
  if (*(void *)(v2 + 16)
    && (uint64_t v7 = *(void *)(v2 + 40),
        sub_1001C6B98( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID),  uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v5, v8),  v10 = -1LL << *(_BYTE *)(v2 + 32),  v11 = v9 & ~v10,  ((*(void *)(v2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v18 + 72);
    char v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
    do
    {
      v14(v0, *(void *)(v2 + 48) + v13 * v11, v5);
      sub_1001C6B98( (unint64_t *)&qword_10044AE20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v0, v4, v5, v15);
      sub_100264284(v18);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

void sub_10026110C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_10024DA4C();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_1002642A4(*v11, v12) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_10024DA4C();
        if ((v16 & 1) != 0)
        {
          do
          {
            char v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_1002642A4(*v17, v18) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_10024DA4C();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

uint64_t sub_100261204(uint64_t a1, char *a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v29 = v2;
  int64_t v30 = a2;
  objc_super v39 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v7);
  uint64_t result = sub_1001B4B08(a1);
  if (result < 0 || (unint64_t v10 = result, result >= 1LL << *(_BYTE *)(a1 + 32)))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    uint64_t v28 = v39;

    return (uint64_t)v28;
  }

  uint64_t v11 = a1 + 64;
  id v32 = &v30[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID];
  uint64_t v33 = a1;
  uint64_t v31 = a1 + 64;
  uint64_t v12 = (uint64_t)v34;
  while ((*(void *)(v11 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
  {
    if ((_DWORD)v9 != *(_DWORD *)(a1 + 36)) {
      goto LABEL_18;
    }
    uint64_t v37 = v7;
    uint64_t v38 = v9;
    uint64_t v13 = *(void *)(a1 + 56) + 24 * v10;
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v12, v32, v36);
    id v16 = v14;
    id v17 = [v16 value];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    id v21 = objc_allocWithZone(&OBJC_CLASS___IDSGroupSessionActiveParticipant);
    id v22 = sub_100263F2C(v12, v15, 1, v18, v20, 0LL, 0xF000000000000000LL);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
    uint64_t v24 = v39[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
    uint64_t v25 = v24;
    a1 = v33;
    uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
    uint64_t result = specialized ContiguousArray._endMutation()(v26);
    uint64_t v27 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v11 = v31;
    if ((*(void *)(v31 + 8 * (v10 >> 6)) & (1LL << v10)) == 0) {
      goto LABEL_20;
    }
    if ((_DWORD)v38 != *(_DWORD *)(a1 + 36)) {
      goto LABEL_21;
    }
    uint64_t result = _HashTable.occupiedBucket(after:)(v10, v31, ~v27);
    uint64_t v7 = v37 - 1;
    if (v37 == 1) {
      goto LABEL_14;
    }
    unint64_t v10 = result;
    if ((result & 0x8000000000000000LL) == 0)
    {
      uint64_t v9 = *(unsigned int *)(a1 + 36);
      if (result < 1LL << *(_BYTE *)(a1 + 32)) {
        continue;
      }
    }

    goto LABEL_13;
  }

  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void sub_10026148C(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10023BD50(v58);
  int64_t v8 = v58[3];
  unint64_t v9 = v58[4];
  uint64_t v52 = &a3[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID];
  id v48 = a3;
  uint64_t v49 = &a3[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate];
  uint64_t v50 = v58[1];
  int64_t v56 = (unint64_t)(v58[2] + 64LL) >> 6;
  uint64_t v57 = v58[0];
  unint64_t v10 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  unint64_t v51 = a2 + 56;
  unint64_t v47 = a2;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_15;
    }

    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v13 >= v56) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v50 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v56) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v50 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v8 + 3;
      if (v8 + 3 >= v56) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v50 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v8 + 4;
      if (v8 + 4 >= v56) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v50 + 8 * v15);
      if (v14)
      {
LABEL_13:
        int64_t v13 = v15;
      }

      else
      {
        int64_t v13 = v8 + 5;
        if (v8 + 5 >= v56) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v50 + 8 * v13);
        if (!v14)
        {
          int64_t v45 = v8 + 6;
          while (v45 < v56)
          {
            unint64_t v14 = *(void *)(v50 + 8 * v45++);
            if (v14)
            {
              int64_t v13 = v45 - 1;
              goto LABEL_14;
            }
          }

void sub_10026191C()
{
}

uint64_t sub_100261950(uint64_t a1, uint64_t a2)
{
  return sub_10026289C(a1, a2, &OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_clientUUIDString);
}

id sub_10026195C()
{
  uint64_t v29 = v2;
  uint64_t v30 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v27 = v10;
  uint64_t v12 = v11;
  uint64_t v13 = sub_1001B1234();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100264224();
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupSessionSubscription] = 0LL;
  *(_DWORD *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_endedReason] = 0;
  int64_t v15 = &v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_destination];
  *(void *)int64_t v15 = 0LL;
  *((void *)v15 + 1) = 0xE000000000000000LL;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate]);
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredCapabilities] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredLackOfCapabilities] = 0LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( &v0[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID],  v12,  v13);
  uint64_t v16 = v0;
  uint64_t v17 = UUID.init()(v16);
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  id v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v21(v1, v13);
  id v22 = (uint64_t *)&v16[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_clientUUIDString];
  *id v22 = v18;
  v22[1] = v20;
  *(void *)&v16[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_queue] = v7;
  *(void *)&v16[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_simulatedConversationManager] = v5;
  id v23 = v7;
  id v24 = v5;

  v28.receiver = v16;
  v28.super_class = (Class)type metadata accessor for SimulatedIDSGroupSessionProvider(0LL);
  id v25 = objc_msgSendSuper2(&v28, "init");
  sub_100202FC0();

  swift_bridgeObjectRelease(v27);
  v21(v12, v13);
  return v25;
}

void sub_100261BE0()
{
  uint64_t v4 = v0;
  unint64_t v51 = v5;
  uint64_t v50 = sub_1001B1234();
  unint64_t v6 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  sub_1001B10F0();
  sub_1001AFF14((uint64_t *)&unk_100449200);
  sub_1001C7334();
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)sub_100264274();
  sub_1001C7334();
  __chkstk_darwin(v11);
  sub_1001D91F4();
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10022D01C();
  uint64_t v14 = *(void **)&v4[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_queue];
  *(void *)uint64_t v3 = v14;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v12);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v3);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v3, v12);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v6 + 1, 1LL);
    goto LABEL_5;
  }

  uint64_t v17 = (uint64_t)&v4[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID];
  sub_1002021AC();
  sub_1002642B4(v17);
  sub_1001AA9C8();
  if (sub_1001AB0AC((uint64_t)v9, 1LL, (uint64_t)v10) == 1)
  {
    sub_1001C6CE4((uint64_t)v9, (uint64_t *)&unk_100449200);
    goto LABEL_10;
  }

  sub_100206928((uint64_t)v9, v1);
  id v18 = sub_100170684();
  uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v20 = sub_1001C7370(v19, 72LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v21 = sub_1002626B4();
  *(void *)(v20 + 56) = sub_1001AFF14(&qword_10044ADA0);
  sub_1001C6AE8((unint64_t *)&unk_10044ADA8, &qword_10044ADA0);
  *(void *)(v20 + 64) = v22;
  *(void *)(v20 + 32) = v21;
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)( "Updating delegate with active participants %@",  45LL,  2LL,  &_mh_execute_header,  v18,  v23,  v20);

  swift_bridgeObjectRelease(v20);
  unint64_t v9 = *(char **)(v1 + v10[6]);
  uint64_t v3 = v4;
  uint64_t v24 = swift_bridgeObjectRetain(v9);
  uint64_t v25 = sub_100261204(v24, v3);
  sub_1001E43E0();
  uint64_t v52 = v25;
  (*(void (**)(id, uint64_t, uint64_t))(v6 + 16))(v2, v17, v50);
  uint64_t v26 = *(void *)(v1 + v10[8]);
  uint64_t v27 = sub_10026417C((id *)(v1 + v10[7]));
  uint64_t v29 = v28;
  id v30 = objc_allocWithZone(&OBJC_CLASS___IDSGroupSessionActiveParticipant);
  id v2 = sub_100263F2C((uint64_t)v2, v26, 1, v27, v29, 0LL, 0xF000000000000000LL);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  unint64_t v6 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v16 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v6 >= v16 >> 1) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v2);
  specialized Array._endMutation()(v31, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v39 = &v3[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate]);
  if (Strong)
  {
    unint64_t v41 = (void *)Strong;
    uint64_t v42 = v52;
    sub_1001D8FE8(Strong, &qword_10044AE08, &OBJC_CLASS___IDSGroupSessionActiveParticipant_ptr);
    swift_bridgeObjectRetain(v42);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1001B0EB8();
    [v41 sessionProvider:v3 didReceiveActiveParticipants:isa success:1];

    swift_unknownObjectRelease(v41);
  }

  uint64_t v44 = swift_unknownObjectWeakLoadStrong(v39);
  if (v44)
  {
    int64_t v45 = (void *)v44;
    sub_1001D8FE8(v44, &qword_10044AE08, &OBJC_CLASS___IDSGroupSessionActiveParticipant_ptr);
    Class v46 = Array._bridgeToObjectiveC()().super.isa;
    [v45 sessionProvider:v3 didReceiveActiveLightweightParticipants:v46 success:1];

    swift_unknownObjectRelease(v45);
  }

  unint64_t v47 = v3;
  swift_bridgeObjectRetain(v9);
  unint64_t v48 = v51;
  sub_100264194(v51);
  sub_10026148C((uint64_t)v9, v48, v47);
  sub_1001E43E0();
  swift_bridgeObjectRelease(v52);
  sub_1002069DC(v1);
LABEL_10:
  sub_1001B0FF8();
}

unint64_t sub_100262008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100264274();
  uint64_t v5 = swift_bridgeObjectRetain(*(void *)(a1 + *(int *)(v4 + 24)));
  sub_10024EAFC(v5);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + *(int *)(v4 + 24));
  uint64_t v9 = swift_bridgeObjectRetain(v8);
  sub_10024EAFC(v9);
  uint64_t v11 = v10;
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_100264890(v7, v11);
  uint64_t v13 = sub_100264890(v11, v7);
  sub_1001E43E0();
  uint64_t v14 = swift_bridgeObjectRetain(v8);
  sub_100260B74(v14, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))sub_10026415C);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v8);
  if (v12[2])
  {
    sub_1001B0F5C();
  }

  else
  {
    uint64_t v17 = v13[2];
    sub_1001B0F5C();
    if (!v17 && !*(void *)(v16 + 16))
    {
      sub_1001B0EB8();
      return swift_bridgeObjectRelease(v16);
    }
  }

  if (v12[2] || *(void *)(v16 + 16))
  {
    unint64_t v18 = sub_1001E5CA4(v16, (uint64_t)v12);
  }

  else
  {
    swift_bridgeObjectRelease(v16);
    sub_1001B0EB8();
    unint64_t v18 = 1LL;
  }

  sub_100261BE0();
  return sub_10026416C(v18);
}

uint64_t sub_100262148(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + *(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL) + 24));
  if (!*(void *)(v8 + 16)) {
    return 0LL;
  }
  unint64_t v9 = sub_1001D711C(a3);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  uint64_t v11 = *(void *)(v8 + 56) + 24 * v9;
  uint64_t v12 = *(void **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  int v14 = *(unsigned __int8 *)(v11 + 16);
  int v15 = a4 & 0x101;
  if (*(_BYTE *)(v11 + 17)) {
    int v16 = 256;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = v16 | v14;
  id v18 = v12;
  BOOL v19 = sub_100204644(a2, a3, v15, (uint64_t)v18, v13, v17);

  if (v19) {
    return 0LL;
  }
  else {
    return a3;
  }
}

uint64_t sub_100262218(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupSessionSubscription);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupSessionSubscription) = a1;
  return swift_release(v2);
}

void sub_100262230()
{
  uint64_t v5 = sub_1001AFF14(&qword_10044ADC8);
  uint64_t v22 = *(void *)(v5 - 8);
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_10022D01C();
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_10044ADD0);
  uint64_t v23 = *(void *)(v7 - 8);
  sub_1001C7334();
  __chkstk_darwin(v8);
  sub_1001D91F4();
  id v24 = (id)sub_1002023C8();
  uint64_t v9 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&unk_10044ADE0);
  Publisher.dropFirst(_:)(1LL, v9, v10);
  swift_release(v24);
  id v24 = *(id *)(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_queue);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v12 = sub_1001A9670(v2, 1LL, 1LL, v11);
  sub_1001D8FE8(v12, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v14 = v13;
  sub_1001C6AE8(&qword_10044ADF0, &qword_10044ADC8);
  uint64_t v16 = v15;
  unint64_t v17 = sub_1002640E0();
  id v18 = v24;
  Publisher.receive<A>(on:options:)(&v24, v2, v5, v14, v16, v17);
  sub_1001C6CE4(v2, &qword_10044ADC0);

  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v3, v5);
  uint64_t v19 = sub_1001C7370((uint64_t)&unk_1003E4868, 24LL);
  swift_unknownObjectWeakInit(v19 + 16);
  sub_1001C6AE8(&qword_10044AE00, (uint64_t *)&unk_10044ADD0);
  uint64_t v21 = Publisher<>.sink(receiveValue:)(sub_100264154, v19, v7, v20);
  swift_release(v19);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v1, v7);
  sub_100262218(v21);
  sub_1001B0FF8();
}

void sub_100262474(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v23[-v8 - 8];
  uint64_t v10 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v11);
  uint64_t v15 = &v23[-v14 - 8];
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  a2 += 16LL;
  swift_beginAccess(a2, v23, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v19 = (void *)Strong;
    uint64_t v20 = Strong + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID;
    sub_1001CA250(Strong + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID, v17);
    if (sub_1001AB0AC((uint64_t)v9, 1LL, v10) == 1)
    {

      uint64_t v21 = (uint64_t)v9;
LABEL_6:
      sub_1001C6CE4(v21, (uint64_t *)&unk_100449200);
      return;
    }

    sub_100206928((uint64_t)v9, (uint64_t)v15);
    sub_1001CA250(v20, v16);
    if (sub_1001AB0AC((uint64_t)v7, 1LL, v10) == 1)
    {
      sub_1002069DC((uint64_t)v15);

      uint64_t v21 = (uint64_t)v7;
      goto LABEL_6;
    }

    sub_100206928((uint64_t)v7, (uint64_t)v13);
    sub_100262008((uint64_t)v15, (uint64_t)v13);

    sub_1002069DC((uint64_t)v13);
    sub_1002069DC((uint64_t)v15);
  }

#error "100262778: call analysis failed (funcsize=56)"
unsigned int __cdecl -[SimulatedIDSGroupSessionProvider endedReason]( _TtC13callservicesd32SimulatedIDSGroupSessionProvider *self,  SEL a2)
{
  return sub_1002627BC();
}

uint64_t sub_1002627BC()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_endedReason);
}

id sub_1002627D8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  NSString v3 = String._bridgeToObjectiveC()();
  sub_1001B0EB8();
  return sub_100264250(v3);
}

void sub_100262808()
{
}

void sub_10026283C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);
  sub_10022CE1C(v9);
}

uint64_t sub_100262890(uint64_t a1, uint64_t a2)
{
  return sub_10026289C(a1, a2, &OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_destination);
}

uint64_t sub_10026289C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  uint64_t v5 = v4[1];
  *uint64_t v4 = a1;
  v4[1] = a2;
  return sub_10026421C(v5);
}

void sub_100262904(uint64_t a1)
{
}

uint64_t sub_100262948()
{
  return swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate);
}

uint64_t sub_1002629A4(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

void sub_100262A0C()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  sub_1001C7334();
  __chkstk_darwin(v5);
  sub_1001D9040();
  uint64_t v34 = v6;
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  sub_1001C7334();
  __chkstk_darwin(v8);
  sub_1001D9040();
  uint64_t v31 = v9;
  uint64_t v10 = sub_100264274();
  sub_1001C7334();
  __chkstk_darwin(v11);
  sub_100264224();
  sub_1001AFF14((uint64_t *)&unk_100449200);
  sub_1001C7334();
  __chkstk_darwin(v12);
  sub_10022D01C();
  id v13 = sub_100170684();
  uint64_t v14 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v15 = sub_1001C7370(v14, 72LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v17 = (id)TULoggableStringForObject(isa);

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v21 = sub_1001B2330();
    *(void *)(v15 + 64) = v21;
    *(void *)(v15 + 32) = v18;
    *(void *)(v15 + 40) = v20;
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:type:_:)("Join with options %@", 20LL, 2LL, &_mh_execute_header, v13, v22, v15);

    sub_1001B0F5C();
    uint64_t v23 = (uint64_t)v3 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID;
    sub_1002021AC();
    sub_1002642B4(v23);
    sub_1001AA9C8();
    if (sub_1001AB0AC(v2, 1LL, v10))
    {
      sub_1001C6CE4(v2, (uint64_t *)&unk_100449200);
    }

    else
    {
      sub_10020696C(v2, v1);
      sub_1001C6CE4(v2, (uint64_t *)&unk_100449200);
      uint64_t v24 = *(void *)(v1 + *(int *)(v10 + 32));
      sub_1002069DC(v1);
      sub_100262230();
      uint64_t v25 = sub_1001C7370((uint64_t)&unk_1003E4818, 32LL);
      *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
      *(void *)(v25 + 24) = v24;
      void v37[5] = sub_1002640D8;
      uint64_t v38 = v25;
      v37[1] = _NSConcreteStackBlock;
      _OWORD v37[2] = 1107296256LL;
      uint64_t v26 = sub_1001E2064((uint64_t)sub_1002356BC);
      static DispatchQoS.unspecified.getter(v3);
      v37[0] = _swiftEmptyArrayStorage;
      sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v28 = v27;
      uint64_t v29 = sub_1001C7340();
      sub_1001C7368((unint64_t *)&qword_100447CC0);
      dispatch thunk of SetAlgebra.init<A>(_:)(v37, v29, v30, v36, v28);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v31, v34);
      _Block_release(v26);
      sub_100264284(v35);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      swift_release(v38);
    }

    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

void sub_100262D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100449200);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate);
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    uint64_t v12 = sub_1001AFF14(&qword_10044ADB8);
    uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v12,  &protocol witness table for String);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    [v11 sessionProvider:a1 didJoinGroupWithParticipantIdentifiers:isa localParticipantIdentifier:a2 error:0];

    swift_unknownObjectRelease(v11);
  }

  uint64_t v15 = a1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID;
  uint64_t v16 = sub_1002021AC();
  sub_1001CA250(v15, v16);
  swift_bridgeObjectRelease(v16);
  if (sub_1001AB0AC((uint64_t)v9, 1LL, v4))
  {
    sub_1001C6CE4((uint64_t)v9, (uint64_t *)&unk_100449200);
  }

  else
  {
    sub_10020696C((uint64_t)v9, (uint64_t)v6);
    sub_1001C6CE4((uint64_t)v9, (uint64_t *)&unk_100449200);
    char v17 = v6[*(int *)(v4 + 36)];
    sub_1002069DC((uint64_t)v6);
    if ((v17 & 1) != 0)
    {
      sub_100203928();
      return;
    }
  }

  sub_100261BE0();
}

void sub_100262F5C()
{
}

void sub_100263008()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001B1234();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1001B0EA0();
  id v6 = sub_100170684();
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v8 = sub_1001C7370(v7, 72LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v8 + 56) = sub_1001AFF14(&qword_10044ADA0);
  sub_1001C6AE8((unint64_t *)&unk_10044ADA8, &qword_10044ADA0);
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 32) = v3;
  uint64_t v10 = swift_bridgeObjectRetain(v3);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:type:_:)("Update participant destination IDs %@", 37LL, 2LL, &_mh_execute_header, v6, v11, v8);

  swift_bridgeObjectRelease(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))( v1,  v0 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID,  v4);
  uint64_t v12 = sub_100202354(v22);
  uint64_t v13 = sub_10029A2F8(v21);
  uint64_t v15 = v14;
  uint64_t v16 = sub_100264274();
  if (!sub_1001AB0AC(v15, 1LL, v16))
  {
    uint64_t v17 = swift_bridgeObjectRetain(v3);
    uint64_t v18 = sub_100203400(v17);
    uint64_t v19 = *(int *)(v16 + 20);
    uint64_t v20 = *(void *)(v15 + v19);
    *(void *)(v15 + v19) = v18;
    swift_bridgeObjectRelease(v20);
  }

  ((void (*)(void *, void))v13)(v21, 0LL);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  v12(v22, 0);
  sub_100203928();
  sub_1001B0FF8();
}

void sub_1002633AC()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v4 - 8);
  sub_1001C7334();
  __chkstk_darwin(v5);
  sub_1001B0EA0();
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  sub_1001C7334();
  __chkstk_darwin(v7);
  sub_1001B10F0();
  id v8 = sub_100170684();
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v10 = sub_1001C7370(v9, 72LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v12 = (id)TULoggableStringForObject(isa);

  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v16 = sub_1001B2330();
    *(void *)(v10 + 64) = v16;
    *(void *)(v10 + 32) = v13;
    *(void *)(v10 + 40) = v15;
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)("Leave with options %@", 21LL, 2LL, &_mh_execute_header, v8, v17, v10);

    sub_1001E43E0();
    sub_100262218(0LL);
    sub_100203608((uint64_t)v3 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_groupUUID);
    uint64_t v18 = sub_1001C7370((uint64_t)&unk_1003E47C8, 24LL);
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    v27[5] = sub_100263F0C;
    uint64_t v28 = v18;
    v27[1] = _NSConcreteStackBlock;
    v27[2] = 1107296256LL;
    uint64_t v19 = sub_1001E2064((uint64_t)sub_1002356BC);
    static DispatchQoS.unspecified.getter(v3);
    v27[0] = _swiftEmptyArrayStorage;
    sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v21 = v20;
    uint64_t v22 = sub_1001C7340();
    sub_1001C7368((unint64_t *)&qword_100447CC0);
    dispatch thunk of SetAlgebra.init<A>(_:)(v27, v22, v23, v4, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1);
    _Block_release(v19);
    sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v25);
    swift_release(v28);
    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

void *sub_10026363C(uint64_t a1)
{
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_delegate);
  if (result)
  {
    uint64_t v3 = result;
    [result sessionProvider:a1 didLeaveGroupWithError:0];
    return (void *)swift_unknownObjectRelease(v3);
  }

  return result;
}

uint64_t sub_1002636A0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  id v7 = a1;
  a4(v6);

  return swift_bridgeObjectRelease(v6);
}

void sub_10026376C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  id v7 = sub_100170684();
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1001B2330();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  uint64_t v10 = swift_bridgeObjectRetain(a2);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:type:_:)("Request data cryptor for topic %@", 33LL, 2LL, &_mh_execute_header, v7, v11, v9);

  swift_bridgeObjectRelease(v9);
  id v12 = [objc_allocWithZone((Class)type metadata accessor for SimulatedDataCryptor(0)) init];
  ((void (**)(void, id))a4)[2](a4, v12);

  _Block_release(a4);
}

void sub_100263A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
}

uint64_t sub_100263AFC()
{
  return sub_10026427C(OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredCapabilities);
}

uint64_t sub_100263B14(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredCapabilities);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredCapabilities) = a1;
  return sub_10026421C(v2);
}

id sub_100263B34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (!a3()) {
    return sub_100264250(0LL);
  }
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  return sub_100264250(isa);
}

uint64_t sub_100263B80()
{
  return sub_10026427C(OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredLackOfCapabilities);
}

void sub_100263B98(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a3) {
    uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for String,  &protocol witness table for String);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = a1;
  a4(v6);
  sub_10022CE1C(v7);
}

uint64_t sub_100263C04(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredLackOfCapabilities);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd32SimulatedIDSGroupSessionProvider_requiredLackOfCapabilities) = a1;
  return sub_10026421C(v2);
}

void sub_100263CCC()
{
}

id sub_100263D04()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedIDSGroupSessionProvider(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100263DF8()
{
  return type metadata accessor for SimulatedIDSGroupSessionProvider(0LL);
}

uint64_t type metadata accessor for SimulatedIDSGroupSessionProvider(uint64_t a1)
{
  uint64_t result = qword_10044AD88;
  if (!qword_10044AD88) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SimulatedIDSGroupSessionProvider);
  }
  return result;
}

uint64_t sub_100263E38(uint64_t a1)
{
  v4[0] = &unk_10037E4E8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_10037E500;
    v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[6] = &unk_10037E4E8;
    v4[7] = &unk_10037E518;
    v4[8] = &unk_10037E500;
    void v4[9] = &unk_10037E500;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100263EE8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_100263F0C()
{
  return sub_10026363C(*(void *)(v0 + 16));
}

uint64_t sub_100263F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100263F24(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100263F2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  v15.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    NSString v16 = 0LL;
  }

  if (a7 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(a6, a7);
  }

  id v18 = [v8 initWithGroupUUID:v15.super.isa participantIdentifier:a2 isKnown:a3 & 1 participantURI:v16 pushToken:isa];

  uint64_t v19 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a1, v19);
  return v18;
}

id sub_100264034(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = [v4 initWithIdentifier:a1 handle:a2 avcData:isa];
  sub_1001BB39C(a3, a4);

  return v10;
}

uint64_t sub_1002640B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1002640D8()
{
}

unint64_t sub_1002640E0()
{
  unint64_t result = qword_10044ADF8;
  if (!qword_10044ADF8)
  {
    sub_1001D8EA0(255LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_10044ADF8);
  }

  return result;
}

uint64_t sub_100264130()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100264154(uint64_t *a1)
{
}

uint64_t sub_10026415C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return sub_100262148(a1, a2, a3, a4 & 0x101, *(void *)(v4 + 16));
}

unint64_t sub_10026416C(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10026417C(id *a1)
{
  return sub_1002641A4(*a1);
}

unint64_t sub_100264194(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_1002641A4(void *a1)
{
  id v2 = [a1 idsDestination];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_10026421C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(a1);
}

  ;
}

  ;
}

id sub_100264250(id a1)
{
  return a1;
}

  ;
}

uint64_t sub_100264274()
{
  return type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
}

uint64_t sub_10026427C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1));
}

uint64_t sub_100264284@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_100264294@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1 + 8));
}

uint64_t sub_1002642A4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1002642B4(uint64_t a1)
{
  return sub_1001CA250(a1, v1);
}

id sub_1002642BC()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

uint64_t sub_1002642C8(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_19:
    uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * v14);
    uint64_t result = a1(&v18);
    if (v3) {
      return swift_release(a3);
    }
  }

  if (__OFADD__(v12++, 1LL))
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v12 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_18:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_19;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_17:
    int64_t v12 = v17;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }

void sub_100264440(uint64_t a1, void (*a2)(char *, char *))
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_10044AF70);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10023BD50(v22);
  uint64_t v7 = v22[0];
  uint64_t v21 = v22[1];
  int64_t v8 = v22[3];
  unint64_t v9 = v22[4];
  int64_t v23 = (unint64_t)(v22[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v11 = v10 | (v8 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(v7 + 48);
    uint64_t v17 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))( v6,  v16 + *(void *)(*(void *)(v17 - 8) + 72LL) * v11,  v17);
    uint64_t v18 = *(void *)(v7 + 56);
    uint64_t v19 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_10020696C(v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v11, (uint64_t)&v6[*(int *)(v4 + 48)]);
    a2(v6, &v6[*(int *)(v4 + 48)]);
    sub_1001C6CE4((uint64_t)v6, (uint64_t *)&unk_10044AF70);
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v12 >= v23) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v21 + 8 * v12);
    int64_t v14 = v8 + 1;
    if (!v13)
    {
      int64_t v14 = v8 + 2;
      if (v8 + 2 >= v23) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v21 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v8 + 3;
        if (v8 + 3 >= v23) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v21 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v8 + 4;
          if (v8 + 4 >= v23) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v21 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v8 + 5;
            if (v8 + 5 >= v23) {
              goto LABEL_21;
            }
            unint64_t v13 = *(void *)(v21 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v8 + 6;
              while (v15 < v23)
              {
                unint64_t v13 = *(void *)(v21 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

void sub_10026466C(uint64_t a1, void (*a2)(uint64_t, id, uint64_t, uint64_t))
{
  uint64_t v4 = v22[0];
  uint64_t v21 = v22[1];
  int64_t v5 = v22[3];
  unint64_t v6 = v22[4];
  int64_t v23 = (unint64_t)(v22[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
    uint64_t v14 = *(void *)(v4 + 56) + 24 * v8;
    int64_t v15 = *(void **)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    unsigned int v17 = *(unsigned __int8 *)(v14 + 16);
    if (*(_BYTE *)(v14 + 17)) {
      int v18 = 256;
    }
    else {
      int v18 = 0;
    }
    uint64_t v19 = v18 | v17;
    id v20 = v15;
    a2(v13, v20, v16, v19);

    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v9 >= v23) {
      goto LABEL_24;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v23) {
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v21 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v5 + 3;
        if (v5 + 3 >= v23) {
          goto LABEL_24;
        }
        unint64_t v10 = *(void *)(v21 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v5 + 4;
          if (v5 + 4 >= v23) {
            goto LABEL_24;
          }
          unint64_t v10 = *(void *)(v21 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v5 + 5;
            if (v5 + 5 >= v23) {
              goto LABEL_24;
            }
            unint64_t v10 = *(void *)(v21 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v5 + 6;
              while (v12 < v23)
              {
                unint64_t v10 = *(void *)(v21 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_18;
                }
              }

void sub_100264838(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

void *sub_100264890(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_100267484(a1, a2);
  }
  sub_100267280(a1);
  return (void *)a2;
}

id sub_1002648E0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SimulatedIDSService()) init];
  qword_100454260 = (uint64_t)result;
  return result;
}

id sub_10026490C()
{
  if (qword_100446970 != -1) {
    swift_once(&qword_100446970, sub_1002648E0);
  }
  return (id)qword_100454260;
}

char *sub_100264960()
{
  uint64_t v1 = OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager;
  id v2 = objc_allocWithZone((Class)type metadata accessor for SimulatedConversationManager(0LL));
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  uint64_t v4 = OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues;
  *(void *)&v3[v4] = [(id)objc_opt_self(NSMapTable) weakToStrongObjectsMapTable];
  *(void *)&v3[OBJC_IVAR___CSDSimulatedIDSService_groupSessionSubscription] = 0LL;
  uint64_t v5 = OBJC_IVAR___CSDSimulatedIDSService_idsService;
  id v6 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  *(void *)&v3[v5] = sub_100266D54(0x6574616C756D6973LL, 0xE900000000000064LL);
  *(void *)&v3[OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account] = 1LL;

  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for SimulatedIDSService();
  unint64_t v7 = (char *)objc_msgSendSuper2(&v15, "init");
  uint64_t v14 = sub_1002023C8();
  uint64_t v8 = swift_allocObject(&unk_1003E4930, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16);
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_10044AF60);
  sub_100267B5C( (unint64_t *)&unk_10044ADE0,  (uint64_t *)&unk_10044AF60,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v11 = Publisher<>.sink(receiveValue:)(sub_100267B54, v8, v9, v10);
  swift_release(v8);

  swift_release(v14);
  uint64_t v12 = *(void *)&v7[OBJC_IVAR___CSDSimulatedIDSService_groupSessionSubscription];
  *(void *)&v7[OBJC_IVAR___CSDSimulatedIDSService_groupSessionSubscription] = v11;
  swift_release(v12);
  return v7;
}

void sub_100264B0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    id v6 = (void *)Strong;
    __chkstk_darwin(Strong);
    sub_100264440(v3, (void (*)(char *, char *))sub_100267B98);
    __chkstk_darwin(v7);
    sub_100264440(v2, (void (*)(char *, char *))sub_100267BA4);
  }

unint64_t sub_100264BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100449200);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = __chkstk_darwin(v10);
  objc_super v15 = (char *)&v17 - v14;
  if (*(void *)(a3 + 16) && (unint64_t result = sub_1001D7184(a2), (v16 & 1) != 0))
  {
    sub_10020696C(*(void *)(a3 + 56) + *(void *)(v9 + 72) * result, (uint64_t)v12);
    sub_100206928((uint64_t)v12, (uint64_t)v15);
    sub_10020696C(a2, (uint64_t)v7);
    sub_1001A9670((uint64_t)v7, 0LL, 1LL, v8);
    sub_100264EB4((uint64_t)v15, (uint64_t)v7);
    sub_1001C6CE4((uint64_t)v7, (uint64_t *)&unk_100449200);
    return sub_1002069DC((uint64_t)v15);
  }

  else if ((*(_BYTE *)(a2 + *(int *)(v8 + 36)) & 1) == 0)
  {
    return sub_100265340(a2);
  }

  return result;
}

void sub_100264D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - v10;
  if (*(void *)(a4 + 16) && (unint64_t v12 = sub_1001D7184(a2), (v13 & 1) != 0))
  {
    unint64_t v14 = v12;
    uint64_t v15 = *(void *)(a4 + 56);
    uint64_t v16 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_10020696C(v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v14, (uint64_t)v11);
    sub_1001A9670((uint64_t)v11, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v17 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_1001A9670((uint64_t)v11, 1LL, 1LL, v17);
    sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_100449200);
    sub_1001A9670((uint64_t)v9, 1LL, 1LL, v17);
    sub_100264EB4(a2, (uint64_t)v9);
    uint64_t v11 = v9;
  }

  sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_100449200);
}

uint64_t sub_100264EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  sub_1001C7334();
  __chkstk_darwin(v10);
  sub_1001B0EA0();
  sub_1001AFF14((uint64_t *)&unk_100449200);
  sub_1001C7334();
  __chkstk_darwin(v11);
  char v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1001B1234();
  sub_1001E20A0();
  __chkstk_darwin(v14);
  sub_1001B10F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, a1, v4);
  uint64_t v15 = swift_bridgeObjectRetain(*(void *)(a1 + *(int *)(v9 + 24)));
  sub_10024EAFC(v15);
  uint64_t v17 = v16;
  sub_100267A78(a2, (uint64_t)v13);
  if (sub_1001AB0AC((uint64_t)v13, 1LL, v9) == 1)
  {
    uint64_t v18 = &_swiftEmptySetSingleton;
  }

  else
  {
    sub_100206928((uint64_t)v13, v3);
    uint64_t v19 = swift_bridgeObjectRetain(*(void *)(v3 + *(int *)(v9 + 24)));
    sub_10024EAFC(v19);
    uint64_t v18 = v20;
    sub_1002069DC(v3);
  }

  uint64_t v21 = sub_100264890((uint64_t)v18, v17);
  uint64_t v22 = swift_bridgeObjectRelease(v18);
  __chkstk_darwin(v22);
  *(void *)&v24[-32] = a1;
  *(void *)&v24[-24] = v5;
  *(void *)&v24[-16] = v2;
  sub_1002642C8(sub_100267AC0, (uint64_t)&v24[-48], (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v4);
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_10026505C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v44 = a4;
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *a1;
  uint64_t result = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  uint64_t v19 = *(void *)(a2 + *(int *)(result + 24));
  if (*(void *)(v19 + 16))
  {
    uint64_t result = sub_1001D711C(v17);
    if ((v20 & 1) != 0)
    {
      uint64_t v43 = a3;
      uint64_t v21 = *(void **)(*(void *)(v19 + 56) + 24 * result);
      id v22 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingConversationParticipantDidLeaveContext);
      id v23 = v21;
      id v24 = [v22 init];
      uint64_t v25 = v24;
      if (v24) {
        [v24 setLeaveReason:0];
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v43, v13);
      uint64_t result = (uint64_t)(id)TUCopyIDSCanonicalAddressForHandle(v23);
      if (result)
      {
        uint64_t v26 = (void *)result;
        id v42 = v23;
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
        uint64_t v28 = v27;

        Date.init()(v29);
        id v41 = v25;
        if (v25)
        {
          sub_10028E3AC(v25);
          uint64_t v31 = v30;
          unint64_t v33 = v32;
        }

        else
        {
          uint64_t v31 = 0LL;
          unint64_t v33 = 0xF000000000000000LL;
        }

        sub_1001A9670((uint64_t)v9, 1LL, 1LL, v13);
        id v34 = objc_allocWithZone(&OBJC_CLASS___IDSGroupSessionParticipantUpdate);
        id v35 = sub_100266DB4( (uint64_t)v16,  0,  v17,  v43,  v28,  2LL,  0LL,  0,  (uint64_t)v12,  0LL,  0xF000000000000000LL,  v31,  v33,  0LL,  0LL,  (uint64_t)v9);
        id v36 = [objc_allocWithZone(IDSMessageContext) init];
        uint64_t v37 = (void *)swift_allocObject(&unk_1003E4908, 40LL, 7LL);
        uint64_t v38 = v44;
        _OWORD v37[2] = v44;
        v37[3] = v35;
        v37[4] = v36;
        v38;
        id v39 = v35;
        id v40 = v36;
        sub_100265AF4((uint64_t)sub_100267B14, (uint64_t)v37);

        return swift_release(v37);
      }

      else
      {
        __break(1u);
      }
    }
  }

  return result;
}

uint64_t sub_100265340(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL) + 24));
  uint64_t v2 = swift_bridgeObjectRetain(v1);
  sub_10026466C(v2, (void (*)(uint64_t, id, uint64_t, uint64_t))sub_100267470);
  return swift_bridgeObjectRelease(v1);
}

id sub_1002653B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char *a6, void *a7)
{
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v12);
  uint64_t v92 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v14);
  uint64_t v95 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v17 = *(v16 - 1);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v20 = &selRef_ignoresBluetoothDeviceUID;
  id v21 = [objc_allocWithZone((Class)CSDMessagingConversationParticipantDidJoinContext) init];
  uint64_t v96 = a6;
  uint64_t v93 = a3;
  uint64_t v94 = v19;
  if (v21)
  {
    uint64_t v88 = v17;
    uint64_t v90 = a2;
    unint64_t v91 = a7;
    uint64_t v22 = *(void *)&a5[*(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL) + 20)];
    unint64_t v99 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain_n(v22, 2LL);
    id v24 = v21;
LABEL_4:
    uint64_t v89 = a5;
    if (v23)
    {
      uint64_t v86 = v16;
      id v87 = v21;
      id v21 = 0LL;
      uint64_t v19 = (char *)(v22 & 0xC000000000000001LL);
      uint64_t v97 = v22 + 32;
      char v20 = (char **)&type metadata for String;
      uint64_t v25 = &selRef_chat_outputFrequencyLevelChangedTo_;
      uint64_t v16 = &protocol witness table for String;
      uint64_t v98 = v23;
      while (1)
      {
        if (v19)
        {
          a5 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v22);
        }

        else
        {
          a5 = *(char **)(v97 + 8LL * (void)v21);
          swift_unknownObjectRetain(a5);
        }

        BOOL v26 = __OFADD__(v21, 1LL);
        id v21 = (char *)v21 + 1;
        if (v26)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          if (v22 < 0) {
            uint64_t v84 = v22;
          }
          else {
            uint64_t v84 = v22 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain_n(v22, 2LL);
          id v85 = v21;
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v84);
          goto LABEL_4;
        }

        id v27 = [a5 v25[439]];
        uint64_t v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v27, v20, v16);

        char v29 = *(_BYTE *)(v28 + 32);
        uint64_t v30 = 1LL << v29;
        unint64_t v31 = *(void *)(v28 + 56);
        if (v31)
        {
          uint64_t v32 = 0LL;
        }

        else
        {
          unsigned int v55 = v29 & 0x3F;
          if (v55 < 7) {
            goto LABEL_32;
          }
          unint64_t v31 = *(void *)(v28 + 64);
          if (v31)
          {
            uint64_t v32 = 1LL;
          }

          else
          {
            if (v55 < 8) {
              goto LABEL_32;
            }
            unint64_t v31 = *(void *)(v28 + 72);
            if (!v31)
            {
              uint64_t v56 = 10LL;
              while (v56 - 7 < (unint64_t)(v30 + 63) >> 6)
              {
                unint64_t v31 = *(void *)(v28 + 8 * v56++);
                if (v31)
                {
                  uint64_t v32 = v56 - 8;
                  goto LABEL_12;
                }
              }

uint64_t sub_100265A50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t)[a1 respondsToSelector:"service:account:receivedGroupSessionParticipantUpdate:context:"];
  if ((result & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + OBJC_IVAR___CSDSimulatedIDSService_idsService);
    swift_unknownObjectRetain(a1);
    id v10 = sub_100265F0C();
    [a1 service:v9 account:v10 receivedGroupSessionParticipantUpdate:a3 context:a4];

    return swift_unknownObjectRelease(a1);
  }

  return result;
}

uint64_t sub_100265AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v31 - 8);
  sub_1001C7334();
  __chkstk_darwin(v4);
  sub_1001D9040();
  uint64_t v30 = v5;
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  sub_1001C7334();
  __chkstk_darwin(v7);
  sub_1001D9040();
  uint64_t v29 = v8;
  uint64_t v28 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v27 = *(void *)(v28 - 8);
  sub_1001C7334();
  __chkstk_darwin(v9);
  sub_1001B10F0();
  uint64_t v37 = OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues;
  uint64_t v38 = v2;
  id v10 = [*(id *)(v2 + OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues) keyEnumerator];
  NSEnumerator.makeIterator()();

  sub_100267BC0();
  if (v46)
  {
    uint64_t v11 = (uint64_t *)&unk_10044AF40;
    uint64_t v12 = (char *)&type metadata for Any + 8;
    do
    {
      sub_1001B03EC(&v45, &aBlock);
      uint64_t v13 = sub_1001AFF14(v11);
      if ((swift_dynamicCast(&v44, &aBlock, v12, v13, 6LL) & 1) != 0)
      {
        uint64_t v14 = v44;
        id v15 = [*(id *)(v38 + v37) objectForKey:v44];
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = (void *)swift_allocObject(&unk_1003E4890, 40LL, 7LL);
          __int128 v17[2] = a1;
          v17[3] = a2;
          v17[4] = v14;
          id v42 = sub_100267430;
          id v43 = v17;
          *(void *)&__int128 aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256LL;
          uint64_t v40 = sub_1002356BC;
          NSString v41 = &unk_1003E48A8;
          uint64_t v18 = v3;
          uint64_t v19 = v11;
          char v20 = _Block_copy(&aBlock);
          swift_retain(a2);
          uint64_t v21 = swift_unknownObjectRetain(v14);
          static DispatchQoS.unspecified.getter(v21);
          uint64_t v44 = _swiftEmptyArrayStorage;
          unint64_t v22 = sub_1001E8E70();
          uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
          sub_100267B5C( (unint64_t *)&qword_100447CC0,  (uint64_t *)&unk_1004478D0,  (uint64_t)&protocol conformance descriptor for [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v23, v24, v31, v22);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v30);
          uint64_t v25 = v20;
          uint64_t v11 = v19;
          uint64_t v3 = v18;
          uint64_t v12 = (char *)&type metadata for Any + 8;
          _Block_release(v25);
          swift_unknownObjectRelease(v14);

          (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v30, v31);
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v33);
          swift_release(v43);
        }

        else
        {
          swift_unknownObjectRelease(v14);
        }
      }

      sub_100267BC0();
    }

    while (v46);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v3, v28);
}

id sub_100265F0C()
{
  uint64_t v3 = v0;
  sub_1001B1234();
  sub_1001E20A0();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account;
  uint64_t v8 = *(void **)(v3 + OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account);
  id v9 = v8;
  if (v8 == (void *)1)
  {
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = swift_bridgeObjectRetain(v12);
    uint64_t v14 = UUID.init()(v13);
    uint64_t v15 = UUID.uuidString.getter(v14);
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    id v18 = objc_allocWithZone(&OBJC_CLASS___IDSAccount);
    id v9 = sub_100267010(v11, v12, v15, v17, 0x6574616C756D6973LL, 0xE900000000000064LL);
    uint64_t v19 = *(void **)(v3 + v7);
    *(void *)(v3 + v7) = v9;
    id v20 = v9;
    sub_1002673E4(v19);
  }

  sub_1002673F4(v8);
  return v9;
}

void sub_100266080(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account);
  *(void *)(v1 + OBJC_IVAR___CSDSimulatedIDSService____lazy_storage___account) = a1;
  sub_1002673E4(v2);
}

void sub_1002660E4()
{
  uint64_t v0 = sub_100266254();
  sub_1001E7ACC();
  swift_bridgeObjectRelease(v0);
  sub_1001AA978();
}

void *sub_100266168()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1002661B8()
{
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100266254()
{
  uint64_t v1 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v3 = (void *)(*(void *)(v0 + OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager)
                + OBJC_IVAR___CSDSimulatedConversationManager_localCallerID);
  uint64_t v4 = v3[1];
  *(void *)(inited + 32) = *v3;
  *(void *)(inited + 40) = v4;
  swift_bridgeObjectRetain(v4);
  return sub_10024C038(inited);
}

id sub_1002663A8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues) setObject:a2 forKey:a1];
}

id sub_100266438(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR___CSDSimulatedIDSService_delegatesToQueues) removeObjectForKey:a1];
}

void sub_1002665D0(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
}

id sub_100266674( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v16 = sub_1001B1234();
  id result = (id)sub_1001AB0AC(v10, 1LL, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    id v18 = *(void **)(v9 + OBJC_IVAR___CSDSimulatedIDSService_simulatedConversationManager);
    id v19 = objc_allocWithZone((Class)type metadata accessor for SimulatedIDSGroupSessionProvider(0LL));
    swift_bridgeObjectRetain(a3);
    id v20 = a9;
    id v21 = a7;
    id v22 = v18;
    return sub_10026195C();
  }

  return result;
}

id sub_100266868()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SimulatedIDSService()
{
  return objc_opt_self(&OBJC_CLASS___CSDSimulatedIDSService);
}

void sub_100266B40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class, void))a5)[2](a5, isa, 0LL);

  _Block_release(a5);
}

void sub_100266C24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void, void))
{
}

id sub_100266D54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithService:v4];

  return v5;
}

id sub_100266DB4( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  v18.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v20.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v37 = a1;
  if (a11 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(a10, a11);
  }

  if (a13 >> 60 == 15)
  {
    Class v22 = 0LL;
  }

  else
  {
    Class v22 = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(a12, a13);
  }

  if (a14)
  {
    sub_1001B4B94(0LL, (unint64_t *)&unk_10044AF50, &OBJC_CLASS___IDSURI_ptr);
    v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a14);
    if (a15)
    {
LABEL_9:
      v24.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(a15);
      goto LABEL_12;
    }
  }

  else
  {
    v23.super.Class isa = 0LL;
    if (a15) {
      goto LABEL_9;
    }
  }

  v24.super.Class isa = 0LL;
LABEL_12:
  uint64_t v25 = type metadata accessor for UUID(0LL);
  Class v26 = 0LL;
  if (sub_1001AB0AC(a16, 1LL, v25) != 1)
  {
    Class v26 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(a16, v25);
  }

  LOBYTE(v30) = a8 & 1;
  id v27 = [v34 initWithGroupUUID:v18.super.isa isInitiator:a2 & 1 participantIdentifier:a3 participantDestinationID:v19 participantUpdateType:a6 participant UpdateSubtype:a7 fromServer:v30 serverDate:v20.super.isa participantData:isa clientContextData:v22 members:v23.super.isa participantIDs:v24.super.isa relaySessionID:v26];

  uint64_t v28 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8LL))(a9, v28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v37, v25);
  return v27;
}

id sub_100267010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v11 = 0LL;
    if (a6) {
      goto LABEL_4;
    }
LABEL_7:
    NSString v12 = 0LL;
    goto LABEL_8;
  }

  NSString v10 = 0LL;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (!a6) {
    goto LABEL_7;
  }
LABEL_4:
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
LABEL_8:
  id v13 = [v6 initWithLoginID:v10 uniqueID:v11 serviceName:v12];

  return v13;
}

uint64_t sub_1002670E8(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  id result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_10028D89C(v15, v16);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v16);
    id result = swift_bridgeObjectRelease(v18);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      return swift_release(v2);
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_100267280(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  id result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    id result = sub_10028D7B0(*(void *)(*(void *)(v2 + 48) + 8 * i));
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      return swift_release(v2);
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

void sub_1002673E4(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_1002673F4(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_100267404()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100267430()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100267458(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100267468(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100267470(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return sub_1002653B4(a1, a2, a3, a4 & 0x101, *(char **)(v4 + 16), *(char **)(v4 + 24), *(void **)(v4 + 32));
}

void *sub_100267484(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1LL << *(_BYTE *)(a1 + 32);
    v35[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1LL << -(char)v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }

        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1LL))
          {
            __break(1u);
            goto LABEL_36;
          }

          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  uint64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    uint64_t v33 = swift_bridgeObjectRetain(a1);
                    sub_1001B4B8C(v33);
                    return (void *)v2;
                  }

                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1LL)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }

void sub_100267820(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    int64_t v11 = a5[3];
    unint64_t v12 = a5[4];
    if (!v12) {
      break;
    }
    uint64_t v13 = (v12 - 1) & v12;
    unint64_t v14 = __clz(__rbit64(v12)) | (v11 << 6);
LABEL_14:
    uint64_t v21 = *(void *)(*(void *)(*a5 + 48LL) + 8 * v14);
    a5[3] = v11;
    a5[4] = v13;
    uint64_t v22 = static Hasher._hash(seed:_:)(*(void *)(a3 + 40), v21);
    uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = 1LL << v24;
    if (((1LL << v24) & *(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v27 = *(void *)(a3 + 48);
      if (*(void *)(v27 + 8 * v24) == v21)
      {
LABEL_21:
        uint64_t v30 = *(void *)(a1 + 8 * v25);
        *(void *)(a1 + 8 * v25) = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v9--, 1LL)) {
            goto LABEL_36;
          }
          if (!v9) {
            return;
          }
        }
      }

      else
      {
        for (unint64_t i = v24 + 1; ; unint64_t i = v29 + 1)
        {
          unint64_t v29 = i & ~v23;
          if (((*(void *)(v10 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v29) & 1) == 0) {
            break;
          }
          if (*(void *)(v27 + 8 * v29) == v21)
          {
            unint64_t v25 = v29 >> 6;
            uint64_t v26 = 1LL << v29;
            goto LABEL_21;
          }
        }
      }
    }
  }

  int64_t v15 = v11 + 1;
  if (!__OFADD__(v11, 1LL))
  {
    int64_t v16 = (unint64_t)(a5[2] + 64LL) >> 6;
    int64_t v17 = a5[3];
    if (v15 >= v16) {
      goto LABEL_34;
    }
    uint64_t v18 = a5[1];
    unint64_t v19 = *(void *)(v18 + 8 * v15);
    if (v19) {
      goto LABEL_13;
    }
    int64_t v20 = v11 + 2;
    int64_t v17 = v11 + 1;
    if (v11 + 2 >= v16) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v20);
    if (!v19)
    {
      int64_t v17 = v11 + 2;
      if (v11 + 3 >= v16) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v18 + 8 * (v11 + 3));
      if (v19)
      {
        int64_t v15 = v11 + 3;
        goto LABEL_13;
      }

      int64_t v20 = v11 + 4;
      int64_t v17 = v11 + 3;
      if (v11 + 4 >= v16) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v20);
      if (!v19)
      {
        int64_t v15 = v11 + 5;
        int64_t v17 = v11 + 4;
        if (v11 + 5 >= v16) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v18 + 8 * v15);
        if (!v19)
        {
          int64_t v32 = v11 + 6;
          while (v32 < v16)
          {
            unint64_t v19 = *(void *)(v18 + 8 * v32++);
            if (v19)
            {
              int64_t v15 = v32 - 1;
              goto LABEL_13;
            }
          }

          int64_t v17 = v16 - 1;
LABEL_34:
          a5[3] = v17;
          a5[4] = 0LL;
          swift_retain(a3);
          sub_10024CE2C();
          return;
        }

        goto LABEL_13;
      }
    }

    int64_t v15 = v20;
LABEL_13:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
    int64_t v11 = v15;
    goto LABEL_14;
  }

  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_100267A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100449200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100267AC0(uint64_t *a1)
{
  return sub_10026505C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100267AE0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100267B14(void *a1)
{
  return sub_100265A50(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100267B30()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100267B54(uint64_t *a1)
{
}

void sub_100267B5C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_1001B0504(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_1001AA978();
}

unint64_t sub_100267B98(uint64_t a1, uint64_t a2)
{
  return sub_100264BE8(a1, a2, *(void *)(v2 + 16));
}

void sub_100267BA4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100267BC0()
{
  return NSFastEnumerationIterator.next()();
}

id sub_100267BCC(void *a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [v1 init];
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(ObjectType);
  id v10 = v8;
  UUID.init()(objc_msgSend(v10, "setDeviceFamily:", objc_msgSend(ObjCClassFromMetadata, "currentDeviceFamily")));
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100267FB8(v12, "setWindowUUID:");

  sub_1001B1528();
  Class v13 = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
  [a1 contentRect];
  id v18 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithRect:", v14, v15, v16, v17);
  [a1 pointPixelScale];
  Class v19 = Float._bridgeToObjectiveC()().super.super.isa;
  [v10 setResolutionAttributesWithContentScale:v13 contentRect:v18 displayScale:v19];

  id v20 = [a1 contentType];
  if (v20)
  {
    if (v20 == (id)1)
    {
      [v10 setStyle:2];
    }

    else
    {
      if (qword_100446908 != -1) {
        swift_once(&qword_100446908, sub_100258908);
      }
      uint64_t v21 = type metadata accessor for Logger(0LL);
      sub_1001B0D98(v21, (uint64_t)qword_100454138);
      id v22 = a1;
      unint64_t v25 = (os_log_s *)Logger.logObject.getter(v22, v23, v24);
      os_log_type_t v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        uint64_t v35 = v28;
        *(_DWORD *)uint64_t v27 = 136315138;
        id v34 = [v22 contentType];
        uint64_t v29 = String.init<A>(reflecting:)(&v34, &type metadata for Int);
        unint64_t v31 = v30;
        id v34 = (id)sub_1001D7CF0(v29, v30, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v27 + 4, v27 + 12);

        swift_bridgeObjectRelease(v31);
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Unknown AVCScreenCaptureAttributesContentType: %s",  v27,  0xCu);
        swift_arrayDestroy(v28, 1LL);
        sub_1001B0E60(v28);
        sub_1001B0E60((uint64_t)v27);
      }

      else
      {
      }
    }
  }

  else
  {
    [v10 setStyle:3];
  }

  objc_msgSend(v10, "setWindowed:", objc_msgSend(v10, "style") == (id)3);
  [a1 displayID];
  Class v32 = UInt32._bridgeToObjectiveC()().super.super.isa;
  sub_100267FB8((uint64_t)v32, "setDisplayID:");

  return v10;
}

id sub_100267FB8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id sub_100267FC4(void *a1)
{
  id v3 = v1;
  id v4 = sub_1001B2990(0xD000000000000017LL, 0x8000000100374E00LL);
  if (!v4) {
    id v4 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  }
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 stringForKey:v6];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0xD00000000000004BLL;
    uint64_t v10 = 0x8000000100374E20LL;
  }

  swift_getObjectType(v3);

  id v11 = sub_100268140(a1, v8, v10);
  uint64_t ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, ObjectType, 24LL, 7LL);
  return v11;
}

id sub_100268140(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR___CSDDemoModeCallFilter_regexAllowedHandleFormat];
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  v11.receiver = v7;
  v11.super_class = v3;
  id v9 = objc_msgSendSuper2(&v11, "initWithQueue:", a1);

  return v9;
}

uint64_t sub_1002681B0(void *a1)
{
  uint64_t v3 = sub_1001AFF14(&qword_100448D30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (uint64_t)[a1 remoteHandle];
  if (result)
  {
    id v7 = (void *)result;
    id v8 = [(id)result value];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;

    uint64_t v20 = v9;
    uint64_t v21 = v11;
    uint64_t v12 = *(void *)(v1 + OBJC_IVAR___CSDDemoModeCallFilter_regexAllowedHandleFormat);
    uint64_t v13 = *(void *)(v1 + OBJC_IVAR___CSDDemoModeCallFilter_regexAllowedHandleFormat + 8);
    uint64_t v18 = v12;
    uint64_t v19 = v13;
    uint64_t v14 = type metadata accessor for Locale(0LL);
    sub_1001A9670((uint64_t)v5, 1LL, 1LL, v14);
    unint64_t v15 = sub_1002683B8();
    swift_bridgeObjectRetain(v13);
    StringProtocol.range<A>(of:options:range:locale:)( &v18,  1024LL,  0LL,  0LL,  1LL,  v5,  &type metadata for String,  &type metadata for String,  v15,  v15);
    LOBYTE(v13) = v16;
    sub_1002683F4((uint64_t)v5);
    uint64_t v17 = v19;
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v17);
    if ((v13 & 1) != 0)
    {
      [a1 setFilteredOutReason:9];
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for DemoModeCallFilter()
{
  return objc_opt_self(&OBJC_CLASS___CSDDemoModeCallFilter);
}

unint64_t sub_1002683B8()
{
  unint64_t result = qword_10044CB80;
  if (!qword_10044CB80)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10044CB80);
  }

  return result;
}

uint64_t sub_1002683F4(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100448D30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100268434(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_100268458(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

uint64_t sub_100268494(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = sub_1001DBDC4((uint64_t)&unk_1003E4958);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = sub_1001DBDC4((uint64_t)&unk_1003E4980);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100268720;
  *(void *)(v7 + 24) = v6;
  void v14[4] = sub_10026872C;
  uint64_t v15 = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  void v14[2] = sub_100268458;
  uint64_t v14[3] = &unk_1003E4998;
  id v8 = _Block_copy(v14);
  uint64_t v9 = v15;
  swift_retain(v7);
  swift_release(v9);
  id v10 = [v3 callPassingTest:v8];
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v7, "", 106LL, 15LL, 36LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v10)
    {
      uint64_t v12 = objc_opt_self(&OBJC_CLASS___CSDCall);
      uint64_t v13 = swift_dynamicCastObjCClass(v10, v12);
      swift_release(v6);
      if (!v13) {
    }
      }

    else
    {
      swift_release(v6);
      return 0LL;
    }

    return v13;
  }

  return result;
}

uint64_t sub_1002685F8(void *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = objc_opt_self(&OBJC_CLASS___CSDCall);
  uint64_t v5 = swift_dynamicCastObjCClass(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = a1;
    char v8 = a2(v6);

    return v8 & 1;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    id v10 = [a1 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v13);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000017LL,  0x8000000100374EB0LL,  "callservicesd/TUCallContainerProtocol_CSD.swift",  47LL,  2LL,  17LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100268720(void *a1)
{
  return sub_1002685F8(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10026872C()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100268750(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100268760(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100268774()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TinCanIDSProviderDelegateCapabilities();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1002687C4()
{
  return sub_100268B48(type metadata accessor for TinCanIDSProviderDelegateCapabilities);
}

uint64_t type metadata accessor for TinCanIDSProviderDelegateCapabilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDTinCanIDSProviderDelegateCapabilities);
}

id sub_1002687F0()
{
  return sub_100268808((SEL *)&selRef_wiFiActiveAndReachable);
}

id sub_1002687FC()
{
  return sub_100268808((SEL *)&selRef_dataActiveAndReachable);
}

id sub_100268808(SEL *a1)
{
  id result = [(id)objc_opt_self(FTNetworkSupport) sharedInstance];
  if (result)
  {
    id v3 = result;
    id v4 = [result *a1];

    return v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100268864()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1001B0F00();
  uint64_t v4 = v3 - v2;
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_1001B0F00();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1001B0F00();
  uint64_t v13 = v12 - v11;
  v28.receiver = v0;
  v28.super_class = (Class)type metadata accessor for IDSProviderDelegateCapabilities();
  id v14 = objc_msgSendSuper2(&v28, "init");
  sub_1001FAC88();
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v13,  enum case for DispatchQoS.QoSClass.background(_:),  v9);
  id v15 = v14;
  char v16 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v17 = swift_allocObject(&unk_1003E49D0, 24LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  void aBlock[4] = sub_100268BBC;
  uint64_t v27 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  aBlock[3] = &unk_1003E49E8;
  uint64_t v18 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v18);
  unint64_t v25 = _swiftEmptyArrayStorage;
  unint64_t v19 = sub_1001E8E70();
  uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v21 = sub_1001C94D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v1, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4);
  _Block_release(v18);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v23);
  swift_release(v27);
  return v15;
}

id sub_100268B3C()
{
  return sub_100268B48(type metadata accessor for IDSProviderDelegateCapabilities);
}

id sub_100268B48(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for IDSProviderDelegateCapabilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDIDSProviderDelegateCapabilities);
}

uint64_t sub_100268B98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100268BBC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x68LL))();
}

uint64_t sub_100268BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100268C04(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100268C0C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  id result = [(id)objc_opt_self(FTDeviceSupport) sharedInstance];
  if (result)
  {
    id v4 = sub_100268C84(result);
    swift_deallocPartialClassInstance(v1, ObjectType, 16LL, 7LL);
    return v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100268C84(void *a1)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10024C520((uint64_t)_swiftEmptyArrayStorage);
    objc_super v3 = v7;
  }

  else
  {
    objc_super v3 = &_swiftEmptySetSingleton;
  }

  id v4 = (char *)objc_allocWithZone(v1);
  *(void *)&v4[OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences] = v3;
  v8.receiver = v4;
  v8.super_class = v1;
  id v5 = objc_msgSendSuper2(&v8, "init");

  return v5;
}

void sub_100268D40(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v36 = *(void *)(a2 + 16);
    if (v36)
    {
      uint64_t v4 = a2 + 32;
      id v5 = a3;
      uint64_t v34 = a2;
      swift_bridgeObjectRetain(a2);
      uint64_t v6 = 0LL;
      uint64_t v35 = a2 + 32;
LABEL_4:
      uint64_t v7 = v4 + 16 * v6;
      uint64_t v8 = *(void *)v7;
      char v38 = *(_BYTE *)(v7 + 8);
      if ((*(void *)v7 & 0xC000000000000001LL) != 0)
      {
        if (v8 < 0) {
          uint64_t v9 = *(void *)v7;
        }
        else {
          uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v8);
        uint64_t v10 = __CocoaSet.makeIterator()(v9);
        unint64_t v11 = sub_100269544();
        unint64_t v12 = sub_100269580();
        uint64_t v13 = Set.Iterator.init(_cocoa:)(v43, v10, v11, v12);
        uint64_t v8 = v43[0];
        uint64_t v40 = v43[1];
        uint64_t v14 = v43[2];
        int64_t v15 = v43[3];
        unint64_t v16 = v43[4];
      }

      else
      {
        uint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
        uint64_t v40 = v8 + 56;
        uint64_t v14 = ~v17;
        uint64_t v18 = -v17;
        if (v18 < 64) {
          uint64_t v19 = ~(-1LL << v18);
        }
        else {
          uint64_t v19 = -1LL;
        }
        unint64_t v16 = v19 & *(void *)(v8 + 56);
        uint64_t v13 = (void *)swift_bridgeObjectRetain(v8);
        int64_t v15 = 0LL;
      }

      uint64_t v37 = v6 + 1;
      int64_t v20 = (unint64_t)(v14 + 64) >> 6;
      while (1)
      {
        int64_t v21 = v15;
        if (v8 < 0)
        {
          uint64_t v24 = __CocoaSet.Iterator.next()(v13);
          if (!v24) {
            goto LABEL_41;
          }
          uint64_t v25 = v24;
          uint64_t v41 = v24;
          unint64_t v26 = sub_100269544();
          swift_unknownObjectRetain(v25);
          swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
          id v27 = v42;
          swift_unknownObjectRelease(v25);
          if (!v27) {
            goto LABEL_41;
          }
        }

        else
        {
          if (v16)
          {
            unint64_t v22 = __clz(__rbit64(v16));
            v16 &= v16 - 1;
            unint64_t v23 = v22 | (v15 << 6);
          }

          else
          {
            int64_t v28 = v15 + 1;
            if (__OFADD__(v15, 1LL))
            {
              __break(1u);
              return;
            }

            if (v28 >= v20) {
              goto LABEL_41;
            }
            unint64_t v29 = *(void *)(v40 + 8 * v28);
            ++v15;
            if (!v29)
            {
              int64_t v15 = v21 + 2;
              if (v21 + 2 >= v20) {
                goto LABEL_41;
              }
              unint64_t v29 = *(void *)(v40 + 8 * v15);
              if (!v29)
              {
                int64_t v15 = v21 + 3;
                if (v21 + 3 >= v20) {
                  goto LABEL_41;
                }
                unint64_t v29 = *(void *)(v40 + 8 * v15);
                if (!v29)
                {
                  int64_t v15 = v21 + 4;
                  if (v21 + 4 >= v20) {
                    goto LABEL_41;
                  }
                  unint64_t v29 = *(void *)(v40 + 8 * v15);
                  if (!v29)
                  {
                    int64_t v30 = v21 + 5;
                    while (v30 < v20)
                    {
                      unint64_t v29 = *(void *)(v40 + 8 * v30++);
                      if (v29)
                      {
                        int64_t v15 = v30 - 1;
                        goto LABEL_33;
                      }
                    }

void sub_100269138(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14(&qword_10044B090);
  uint64_t v14 = sub_100269710(v6, v7, v8, v9, v10, v11, v12, v13, v20);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences);
  *(void *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 40) = 0;
  swift_bridgeObjectRetain(v15);
  id v16 = [a1 invitationPreferences];
  unint64_t v17 = sub_1002696FC();
  unint64_t v18 = sub_100269580();
  uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

  *(void *)(v14 + 48) = v19;
  *(_BYTE *)(v14 + 56) = 0;
  sub_100269704(a3, v14);
  swift_setDeallocating(v14);
  sub_1001E7A0C();
  sub_1002696CC();
}

uint64_t sub_10026926C(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_1001AFF14(&qword_10044B090);
  uint64_t v15 = sub_100269710(v7, v8, v9, v10, v11, v12, v13, v14, v21);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
  uint64_t v16 = *(void *)(v3 + OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences);
  *(void *)(v15 + 32) = v16;
  *(_BYTE *)(v15 + 40) = 0;
  *(void *)(v15 + 48) = a3;
  *(_BYTE *)(v15 + 56) = 1;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(a3);
  id v17 = [a1 invitationPreferences];
  sub_1002696FC();
  unint64_t v18 = sub_100269580();
  uint64_t v19 = sub_1002696E0(v18);

  *(void *)(v15 + 64) = v19;
  *(_BYTE *)(v15 + 72) = 0;
  sub_100269704(4LL, v15);
  sub_1002696F0();
  sub_1001E7A0C();
  return a2 & 1;
}

void sub_1002693F0(void *a1, void *a2)
{
  uint64_t v5 = sub_1001AFF14(&qword_10044B090);
  uint64_t v13 = sub_100269710(v5, v6, v7, v8, v9, v10, v11, v12, v18);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR___CSDConversationInvitationResolver_deviceInvitationPreferences);
  *(void *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 40) = 0;
  swift_bridgeObjectRetain(v14);
  id v15 = [a1 invitationPreferences];
  sub_1002696FC();
  unint64_t v16 = sub_100269580();
  uint64_t v17 = sub_1002696E0(v16);

  *(void *)(v13 + 48) = v17;
  *(_BYTE *)(v13 + 56) = 0;
  sub_100268D40(8LL, v13, a2);
  sub_1002696F0();
  sub_1001E7A0C();
  sub_1002696CC();
}

uint64_t type metadata accessor for ConversationInvitationResolver()
{
  return objc_opt_self(&OBJC_CLASS___CSDConversationInvitationResolver);
}

unint64_t sub_100269544()
{
  unint64_t result = qword_100447EB0;
  if (!qword_100447EB0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TUConversationInvitationPreference);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100447EB0);
  }

  return result;
}

unint64_t sub_100269580()
{
  unint64_t result = qword_100447EB8;
  if (!qword_100447EB8)
  {
    unint64_t v1 = sub_100269544();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100447EB8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ConversationInvitationResolver.InvitationPreferencesPriority( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10026960C + 4 * byte_10037E625[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100269640 + 4 * asc_10037E620[v4]))();
}

uint64_t sub_100269640(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100269648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100269650LL);
  }
  return result;
}

uint64_t sub_10026965C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100269664LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100269668(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100269670(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationInvitationResolver.InvitationPreferencesPriority()
{
  return &type metadata for ConversationInvitationResolver.InvitationPreferencesPriority;
}

unint64_t sub_100269690()
{
  unint64_t result = qword_10044B098;
  if (!qword_10044B098)
  {
    unint64_t result = swift_getWitnessTable( &unk_10037E6B0,  &type metadata for ConversationInvitationResolver.InvitationPreferencesPriority);
    atomic_store(result, (unint64_t *)&qword_10044B098);
  }

  return result;
}

  ;
}

uint64_t sub_1002696E0(uint64_t a1)
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, a1);
}

uint64_t sub_1002696F0()
{
  return swift_setDeallocating(v0);
}

unint64_t sub_1002696FC()
{
  return sub_100269544();
}

void sub_100269704(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100269710( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_initStackObject(a1, &a9);
}

void sub_100269718(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for ActivitySession(0LL);
    sub_1001A9F18( (unint64_t *)&qword_10044B108,  (uint64_t (*)(uint64_t))&type metadata accessor for ActivitySession,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v39, v5, v6, v7);
    uint64_t v3 = v39[0];
    uint64_t v40 = v39[1];
    uint64_t v9 = v39[2];
    int64_t v10 = v39[3];
    unint64_t v11 = v39[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v40 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & v13;
    uint64_t v8 = (_OWORD *)swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  int64_t v35 = (unint64_t)(v9 + 64) >> 6;
  unint64_t v16 = _swiftEmptyArrayStorage;
  if (v3 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v11)
    {
      uint64_t v17 = (v11 - 1) & v11;
      unint64_t v18 = __clz(__rbit64(v11)) | (v10 << 6);
      int64_t v19 = v10;
      goto LABEL_32;
    }

    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v24 >= v35) {
      goto LABEL_45;
    }
    unint64_t v25 = *(void *)(v40 + 8 * v24);
    int64_t v19 = v10 + 1;
    if (!v25)
    {
      int64_t v19 = v10 + 2;
      if (v10 + 2 >= v35) {
        goto LABEL_45;
      }
      unint64_t v25 = *(void *)(v40 + 8 * v19);
      if (!v25)
      {
        int64_t v19 = v10 + 3;
        if (v10 + 3 >= v35) {
          goto LABEL_45;
        }
        unint64_t v25 = *(void *)(v40 + 8 * v19);
        if (!v25)
        {
          int64_t v19 = v10 + 4;
          if (v10 + 4 >= v35) {
            goto LABEL_45;
          }
          unint64_t v25 = *(void *)(v40 + 8 * v19);
          if (!v25)
          {
            int64_t v19 = v10 + 5;
            if (v10 + 5 >= v35) {
              goto LABEL_45;
            }
            unint64_t v25 = *(void *)(v40 + 8 * v19);
            if (!v25)
            {
              int64_t v26 = v10 + 6;
              while (v26 < v35)
              {
                unint64_t v25 = *(void *)(v40 + 8 * v26++);
                if (v25)
                {
                  int64_t v19 = v26 - 1;
                  goto LABEL_31;
                }
              }

void sub_100269B3C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001B9234();
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1001B4B94(0LL, (unint64_t *)&qword_100448F80, off_1003D5D90);
    sub_10022B8BC((unint64_t *)&qword_100448BE8, (unint64_t *)&qword_100448F80, off_1003D5D90);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    uint64_t v1 = v33[0];
    uint64_t v34 = v33[1];
    uint64_t v8 = v33[2];
    int64_t v7 = v33[3];
    unint64_t v9 = v33[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v34 = a1 + 56;
    uint64_t v8 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v9 = v13 & v11;
    uint64_t v6 = (void *)sub_1001B9234();
    int64_t v7 = 0LL;
  }

  int64_t v29 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v15 = (v9 - 1) & v9;
      unint64_t v16 = __clz(__rbit64(v9)) | (v7 << 6);
      int64_t v17 = v7;
      goto LABEL_32;
    }

    int64_t v22 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v22 >= v29) {
      goto LABEL_42;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v22);
    int64_t v17 = v7 + 1;
    if (!v23)
    {
      int64_t v17 = v7 + 2;
      if (v7 + 2 >= v29) {
        goto LABEL_42;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v7 + 3;
        if (v7 + 3 >= v29) {
          goto LABEL_42;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v17);
        if (!v23)
        {
          int64_t v17 = v7 + 4;
          if (v7 + 4 >= v29) {
            goto LABEL_42;
          }
          unint64_t v23 = *(void *)(v34 + 8 * v17);
          if (!v23)
          {
            int64_t v17 = v7 + 5;
            if (v7 + 5 >= v29) {
              goto LABEL_42;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v17);
            if (!v23)
            {
              int64_t v24 = v7 + 6;
              while (v24 < v29)
              {
                unint64_t v23 = *(void *)(v34 + 8 * v24++);
                if (v23)
                {
                  int64_t v17 = v24 - 1;
                  goto LABEL_31;
                }
              }

void sub_100269EF0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    sub_10022B8BC( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    uint64_t v1 = v33[0];
    uint64_t v34 = v33[1];
    uint64_t v8 = v33[2];
    int64_t v7 = v33[3];
    unint64_t v9 = v33[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v34 = a1 + 56;
    uint64_t v8 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v9 = v13 & v11;
    uint64_t v6 = (_OWORD *)swift_bridgeObjectRetain(a1);
    int64_t v7 = 0LL;
  }

  int64_t v29 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v15 = (v9 - 1) & v9;
      unint64_t v16 = __clz(__rbit64(v9)) | (v7 << 6);
      int64_t v17 = v7;
      goto LABEL_32;
    }

    int64_t v22 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v22 >= v29) {
      goto LABEL_42;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v22);
    int64_t v17 = v7 + 1;
    if (!v23)
    {
      int64_t v17 = v7 + 2;
      if (v7 + 2 >= v29) {
        goto LABEL_42;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v7 + 3;
        if (v7 + 3 >= v29) {
          goto LABEL_42;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v17);
        if (!v23)
        {
          int64_t v17 = v7 + 4;
          if (v7 + 4 >= v29) {
            goto LABEL_42;
          }
          unint64_t v23 = *(void *)(v34 + 8 * v17);
          if (!v23)
          {
            int64_t v17 = v7 + 5;
            if (v7 + 5 >= v29) {
              goto LABEL_42;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v17);
            if (!v23)
            {
              int64_t v24 = v7 + 6;
              while (v24 < v29)
              {
                unint64_t v23 = *(void *)(v34 + 8 * v24++);
                if (v23)
                {
                  int64_t v17 = v24 - 1;
                  goto LABEL_31;
                }
              }

void sub_10026A2BC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    sub_10022B8BC( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    uint64_t v1 = v33[0];
    uint64_t v34 = v33[1];
    uint64_t v8 = v33[2];
    int64_t v7 = v33[3];
    unint64_t v9 = v33[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v34 = a1 + 56;
    uint64_t v8 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v9 = v13 & v11;
    uint64_t v6 = (_OWORD *)swift_bridgeObjectRetain(a1);
    int64_t v7 = 0LL;
  }

  uint64_t v14 = _swiftEmptyArrayStorage;
  int64_t v29 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v15 = (v9 - 1) & v9;
      unint64_t v16 = __clz(__rbit64(v9)) | (v7 << 6);
      int64_t v17 = v7;
      goto LABEL_32;
    }

    int64_t v22 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v22 >= v29) {
      goto LABEL_44;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v22);
    int64_t v17 = v7 + 1;
    if (!v23)
    {
      int64_t v17 = v7 + 2;
      if (v7 + 2 >= v29) {
        goto LABEL_44;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v7 + 3;
        if (v7 + 3 >= v29) {
          goto LABEL_44;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v17);
        if (!v23)
        {
          int64_t v17 = v7 + 4;
          if (v7 + 4 >= v29) {
            goto LABEL_44;
          }
          unint64_t v23 = *(void *)(v34 + 8 * v17);
          if (!v23)
          {
            int64_t v17 = v7 + 5;
            if (v7 + 5 >= v29) {
              goto LABEL_44;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v17);
            if (!v23)
            {
              int64_t v24 = v7 + 6;
              while (v24 < v29)
              {
                unint64_t v23 = *(void *)(v34 + 8 * v24++);
                if (v23)
                {
                  int64_t v17 = v24 - 1;
                  goto LABEL_31;
                }
              }

void sub_10026A6B8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v34, v3, v4, v5);
    uint64_t v1 = v34[0];
    uint64_t v35 = v34[1];
    uint64_t v8 = v34[2];
    int64_t v7 = v34[3];
    unint64_t v9 = v34[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v35 = a1 + 56;
    uint64_t v8 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v9 = v13 & v11;
    uint64_t v6 = (_OWORD *)swift_bridgeObjectRetain(a1);
    int64_t v7 = 0LL;
  }

  int64_t v30 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v15 = (v9 - 1) & v9;
      unint64_t v16 = __clz(__rbit64(v9)) | (v7 << 6);
      int64_t v17 = v7;
      goto LABEL_32;
    }

    int64_t v22 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v22 >= v30) {
      goto LABEL_45;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v22);
    int64_t v17 = v7 + 1;
    if (!v23)
    {
      int64_t v17 = v7 + 2;
      if (v7 + 2 >= v30) {
        goto LABEL_45;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v7 + 3;
        if (v7 + 3 >= v30) {
          goto LABEL_45;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v17);
        if (!v23)
        {
          int64_t v17 = v7 + 4;
          if (v7 + 4 >= v30) {
            goto LABEL_45;
          }
          unint64_t v23 = *(void *)(v35 + 8 * v17);
          if (!v23)
          {
            int64_t v17 = v7 + 5;
            if (v7 + 5 >= v30) {
              goto LABEL_45;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v17);
            if (!v23)
            {
              int64_t v24 = v7 + 6;
              while (v24 < v30)
              {
                unint64_t v23 = *(void *)(v35 + 8 * v24++);
                if (v23)
                {
                  int64_t v17 = v24 - 1;
                  goto LABEL_31;
                }
              }

uint64_t sub_10026AA94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  BOOL v9 = v7 == a1 && v8 == a2;
  if (v9 || (sub_10026F2A8(v7, v8) & 1) != 0) {
    return 0LL;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = a3 + 7;
  uint64_t v13 = 1LL;
  while (1)
  {
    if (v3 == v13) {
      return 0LL;
    }
    ++v11;
    uint64_t v14 = *(v12 - 1);
    uint64_t v15 = *v12;
    if (v14 == a1 && v15 == a2) {
      break;
    }
    char v17 = sub_10026F2A8(v14, v15);
    uint64_t result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0) {
      return result;
    }
  }

  return v11;
}

uint64_t sub_10026AB60()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1001B0EA0();
  strcpy((char *)v10, "conversation-");
  HIWORD(v10[1]) = -4864;
  id v3 = [v0 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

  uint64_t v5 = UUID.uuidString.getter(v4);
  uint64_t v7 = v6;
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  sub_1001D9020();
  return v10[0];
}

id sub_10026AC34()
{
  uint64_t v107 = v2;
  uint64_t v108 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v7 = __chkstk_darwin(v6);
  BOOL v9 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v104 - v10;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10022D034();
  id v14 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)) init];
  id v15 = v14;
  if (v14)
  {
    uint64_t v105 = v0;
    id v16 = v14;
    id v17 = sub_1001B115C((uint64_t)v16, "UUID");
    sub_10026F328();

    uint64_t v19 = (void *)UUID.uuidString.getter(v18);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v21 = sub_10026F310();
    sub_10026F2B8(v21, v22, v23, (SEL *)&selRef_setUUIDString_);
    id v25 = sub_1001B115C(v24, "groupUUID");
    sub_10026F328();

    UUID.uuidString.getter(v26);
    uint64_t v27 = sub_10026F310();
    sub_10026F2B8(v27, v28, v29, (SEL *)&selRef_setGroupUUIDString_);
    id v31 = sub_1001B115C(v30, "messagesGroupUUID");
    if (v31)
    {
      __int128 v32 = v31;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      uint64_t v33 = 0LL;
    }

    else
    {
      uint64_t v33 = 1LL;
    }

    sub_1001A9670((uint64_t)v9, v33, 1LL, v12);
    sub_1001C6C08((uint64_t)v9, (uint64_t)v11);
    uint64_t v34 = sub_1001AB0AC((uint64_t)v11, 1LL, v12);
    if ((_DWORD)v34 == 1)
    {
      sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_10044A400);
      NSString v36 = 0LL;
    }

    else
    {
      UUID.uuidString.getter(v34);
      BOOL v9 = v37;
      v20(v11, v12);
      NSString v36 = String._bridgeToObjectiveC()();
      uint64_t v35 = sub_1001B0EC0();
    }

    sub_100255230(v35, "setMessagesGroupUUIDString:");

    uint64_t v38 = sub_1001B4B94(0LL, &qword_10044BF40, &OBJC_CLASS___NSMutableArray_ptr);
    id v39 = sub_1001B115C(v38, "activitySessions");
    uint64_t v40 = type metadata accessor for ActivitySession(0LL);
    sub_1001A9F18( (unint64_t *)&qword_10044B108,  (uint64_t (*)(uint64_t))&type metadata accessor for ActivitySession,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v42 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v39, v40, v41);

    id v43 = v5;
    sub_100269718(v42, v43);
    sub_10026F29C();
    id v44 = sub_10026F308();
    sub_10026F290((uint64_t)v44, "setActivitySessions:");

    id v46 = sub_10022D078(v45, "stagedActivitySession");
    if (v46)
    {
      uint64_t v47 = v46;
      BOOL v9 = (char *) [(id)objc_opt_self(CSDMessagingConversationActivitySession) activitySessionWithTUConversationActivitySession:v46 fromConversation:v43 forStorage:1];
      sub_10026F284((uint64_t)v9, "setStagedActivitySession:");
    }

    unint64_t v48 = (unint64_t)sub_10022D078((uint64_t)v46, "avMode");
    if (v48 >> 31)
    {
      __break(1u);
    }

    else
    {
      id v49 = sub_10022D078((uint64_t)[v16 setAvMode:v48], "localMember");
      id v50 =  [(id)objc_opt_self(CSDMessagingConversationMember) memberWithTUConversationMember:v49];
      sub_10026F378();
      sub_10026F284(v51, "setLocalMember:");

      id v52 =  sub_10022D078( (uint64_t)objc_msgSend(v16, "setLocallyCreated:", objc_msgSend(v43, "isLocallyCreated")),  "initiator");
      id v53 = [(id)objc_opt_self(CSDMessagingHandle) handleWithTUHandle:v52];
      sub_10026F378();
      sub_10026F284(v54, "setInitiator:");

      id v56 = sub_10022D078(v55, "activeRemoteParticipants");
      sub_10026F2D0();
      sub_10026F380((unint64_t *)&qword_100448BE8);
      uint64_t v57 = sub_10026F234((uint64_t)v56);

      sub_100269B3C(v57);
      sub_10026F31C();
      id v58 = sub_100285994();
      sub_10026F360((uint64_t)v58, "setActiveRemoteParticipants:");

      id v60 = sub_10022D078(v59, "activeLightweightParticipants");
      uint64_t v61 = sub_10026F234((uint64_t)v60);

      sub_100269B3C(v61);
      sub_10026F29C();
      id v62 = sub_10026F308();
      sub_10026F290((uint64_t)v62, "setActiveLightweightParticipants:");

      id v64 = sub_10022D078(v63, "remoteMembers");
      sub_10026F2D0();
      sub_10026F380((unint64_t *)&qword_10044A420);
      uint64_t v65 = sub_10026F234((uint64_t)v64);

      sub_100269EF0(v65);
      sub_10026F31C();
      id v66 = sub_100285994();
      sub_10026F360((uint64_t)v66, "setRemoteMembers:");

      id v68 = sub_10022D078(v67, "lightweightMembers");
      uint64_t v69 = sub_10026F234((uint64_t)v68);

      sub_10026A2BC(v69);
      sub_10026F29C();
      id v70 = sub_10026F308();
      sub_10026F290((uint64_t)v70, "setLightweightMembers:");

      id v72 = sub_10022D078(v71, "otherInvitedHandles");
      uint64_t v73 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      static Set._unconditionallyBridgeFromObjectiveC(_:)(v72, v73, v74);
      sub_10026F378();
      sub_10026A6B8((uint64_t)&qword_10044A410);
      sub_1001B0EC0();
      id v75 = sub_100285994();
      sub_100255230((uint64_t)v75, "setOtherInvitedHandles:");

      id v77 = sub_10022D078(v76, "report");
      id v78 = [objc_allocWithZone((Class)CSDMessagingConversationReport) initWithTUConversationReport:v77];

      sub_10026F36C(v79, "setReportData:");
      id v81 = sub_10022D078(v80, "link");
      if (v81)
      {
        id v82 = v81;
        id v83 =  [(id)objc_opt_self(CSDMessagingConversationLink) linkWithTUConversationLink:v81 includeGroupUUID:1];
        sub_10026F36C((uint64_t)v83, "setLink:");
      }

      id v84 = sub_10022D078((uint64_t)v81, "provider");
      id v85 = [v84 identifier];

      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      uint64_t v88 = v87;

      sub_10026EFFC(v86, v88, v16, (SEL *)&selRef_setConversationProviderIdentifier_);
      id v90 = sub_1001D92AC(v89, "hasUUIDString");
      if ((_DWORD)v90
        && (id v91 = sub_1001D92AC((uint64_t)v90, "hasGroupUUIDString"), (_DWORD)v91)
        && (id v92 = sub_1001D92AC((uint64_t)v91, "hasLocalMember"), (_DWORD)v92))
      {
        unsigned int v93 = sub_1001D92AC((uint64_t)v92, "hasInitiator");

        if (v93)
        {

          return v15;
        }
      }

      else
      {
      }

      if (qword_1004468F0 == -1)
      {
LABEL_21:
        uint64_t v96 = qword_100454018;
        uint64_t v97 = static os_log_type_t.error.getter(v94, v95);
        uint64_t v98 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v99 = sub_1001C7370(v98, 72LL);
        *(_OWORD *)(v99 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        id v106 = v16;
        uint64_t v100 = sub_1001F8884((uint64_t)&v106, v105);
        uint64_t v102 = v101;

        *(void *)(v99 + 56) = &type metadata for String;
        *(void *)(v99 + 64) = sub_1001B2330();
        *(void *)(v99 + 32) = v100;
        *(void *)(v99 + 40) = v102;
        os_log(_:dso:log:type:_:)( "Missing fields on conversation from cache %@. Returning a nil conversation.",  75LL,  2LL,  &_mh_execute_header,  v96,  v97,  v99);

        sub_1001D9020();
        return 0LL;
      }
    }

    uint64_t v94 = swift_once(&qword_1004468F0, sub_100208418);
    goto LABEL_21;
  }

  return v15;
}

void sub_10026B490(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___CSDConversationPersistenceController_lockStateObserver);
  *(void *)(v1 + OBJC_IVAR___CSDConversationPersistenceController_lockStateObserver) = a1;
}

char *sub_10026B4A4(void *a1, void *a2, char *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (uint64_t)&a3[OBJC_IVAR___CSDConversationPersistenceController_storage];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  *(void *)(v12 + 32) = 0LL;
  *(void *)&a3[OBJC_IVAR___CSDConversationPersistenceController_lockStateObserver] = 0LL;
  *(void *)&a3[OBJC_IVAR___CSDConversationPersistenceController_queue] = a1;
  sub_1001B4B94(0LL, (unint64_t *)&qword_1004475A0, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v13 = a3;
  id v14 = a1;
  sub_1001B2468((uint64_t)v14, aBlock);
  swift_beginAccess(v12, v39, 33LL, 0LL);
  sub_10026F104((uint64_t)aBlock, v12);
  swift_endAccess(v39);

  id v15 = (objc_class *)type metadata accessor for ConversationPersistenceController();
  v38.receiver = v13;
  v38.super_class = v15;
  id v16 = (char *)objc_msgSendSuper2(&v38, "init");
  uint64_t v17 = (uint64_t)&v16[OBJC_IVAR___CSDConversationPersistenceController_storage];
  swift_beginAccess(&v16[OBJC_IVAR___CSDConversationPersistenceController_storage], v39, 0LL, 0LL);
  sub_1001C6DC4(v17, (uint64_t)aBlock, &qword_10044B0E0);
  if (v35)
  {

    sub_1001C6CE4((uint64_t)aBlock, &qword_10044B0E0);
  }

  else
  {
    uint64_t v18 = v16;
    sub_1001C6CE4((uint64_t)aBlock, &qword_10044B0E0);
    uint64_t v19 = (void *)swift_allocObject(&unk_1003E4C50, 56LL, 7LL);
    id v19[2] = a2;
    v19[3] = v14;
    v19[4] = v18;
    v19[5] = sub_10026B9F0;
    v19[6] = 0LL;
    NSString v36 = sub_10026F184;
    uint64_t v37 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    uint64_t v35 = &unk_1003E4C68;
    uint64_t v20 = _Block_copy(aBlock);
    id v21 = a2;
    id v22 = v14;
    uint64_t v23 = v18;
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v25 = v24;
    uint64_t v26 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    unint64_t v27 = sub_1001C94D0();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v6, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8);

    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
    swift_release(v37);
  }

  return v16;
}

void sub_10026B7C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    id v8 = a1;
  }
  else {
    id v8 = [objc_allocWithZone((Class)CSDDeviceLockStateObserver) initWithQueue:a2];
  }
  uint64_t v9 = swift_allocObject(&unk_1003E4CA0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v9 + 16);
  uint64_t v10 = (void *)swift_allocObject(&unk_1003E4CC8, 40LL, 7LL);
  void v10[2] = v9;
  v10[3] = a4;
  v10[4] = a5;
  v15[4] = sub_10026F1DC;
  id v16 = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  void v15[2] = sub_1002356BC;
  v15[3] = &unk_1003E4CE0;
  uint64_t v11 = _Block_copy(v15);
  uint64_t v12 = v16;
  id v13 = a1;
  swift_retain(a5);
  swift_release(v12);
  [v8 performBlockAfterFirstUnlock:v11];
  _Block_release(v11);
  id v14 = v8;
  sub_10026B490((uint64_t)v8);
}

void sub_10026B904(uint64_t a1, void (*a2)(void *__return_ptr))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (char *)Strong;
    a2(v8);
    uint64_t v6 = (uint64_t)&v5[OBJC_IVAR___CSDConversationPersistenceController_storage];
    swift_beginAccess(&v5[OBJC_IVAR___CSDConversationPersistenceController_storage], v7, 33LL, 0LL);
    sub_10026F104((uint64_t)v8, v6);
    swift_endAccess(v7);
  }

void sub_10026B99C(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationPersistenceController());
  sub_10026B4A4(a1, 0LL, v3);
  uint64_t ObjectType = swift_getObjectType(v1);
  swift_deallocPartialClassInstance(v1, ObjectType, 64LL, 7LL);
  sub_1001AA978();
}

id sub_10026B9F0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_1001B4B94(0LL, (unint64_t *)&qword_1004475A0, &OBJC_CLASS___NSUserDefaults_ptr);
  return sub_1001B2468(v2, a1);
}

void sub_10026BA54()
{
}

void sub_10026BA70(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v50 - v10;
  if ((TUSimulatedModeEnabled(v9) & 1) == 0 && ([a1 isFromStorage] & 1) == 0)
  {
    id v12 = [a1 remoteMembers];
    uint64_t v13 = sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    sub_10022B8BC( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v13, v14);

    uint64_t v16 = sub_10024E694(v15);
    swift_bridgeObjectRelease(v15);
    if (v16 >= 2)
    {
      sub_1001B4B94(0LL, &qword_10044B0E8, off_1003D5DC0);
      id v17 = a1;
      id v18 = sub_10026AC34();
      if (v18)
      {
        uint64_t v20 = v18;
        if (qword_1004468F0 != -1) {
          swift_once(&qword_1004468F0, sub_100208418);
        }
        uint64_t v21 = qword_100454018;
        uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
        *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        id v24 = [v17 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, v4);
        uint64_t v25 = String.init<A>(reflecting:)(v8, v4);
        uint64_t v27 = v26;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
        *(void *)(v23 + 56) = &type metadata for String;
        unint64_t v28 = sub_1001B2330();
        *(void *)(v23 + 64) = v28;
        *(void *)(v23 + 32) = v25;
        *(void *)(v23 + 40) = v27;
        uint64_t v29 = static os_log_type_t.default.getter(v28);
        os_log(_:dso:log:type:_:)("Caching conversation with UUID: %@", 34LL, 2LL, &_mh_execute_header, v21, v29, v23);
        swift_bridgeObjectRelease(v23);
        uint64_t v30 = a2 + OBJC_IVAR___CSDConversationPersistenceController_storage;
        swift_beginAccess(a2 + OBJC_IVAR___CSDConversationPersistenceController_storage, v55, 0LL, 0LL);
        sub_1001C6DC4(v30, (uint64_t)v56, &qword_10044B0E0);
        if (v57)
        {
          sub_1001BA03C((uint64_t)v56, (uint64_t)v52);
          sub_1001C6CE4((uint64_t)v56, &qword_10044B0E0);
          uint64_t v31 = v53;
          uint64_t v32 = v54;
          sub_1001B204C(v52, v53);
          sub_10028E3AC(v20);
          if (v34 >> 60 == 15)
          {
            __int128 v50 = 0u;
            __int128 v51 = 0u;
          }

          else
          {
            *((void *)&v51 + 1) = &type metadata for Data;
            *(void *)&__int128 v50 = v33;
            *((void *)&v50 + 1) = v34;
          }

          uint64_t v43 = sub_10026AB60();
          uint64_t v45 = v44;
          (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 8))(&v50, v43, v44, v31, v32);
          swift_bridgeObjectRelease(v45);
          sub_1001C6CE4((uint64_t)&v50, (uint64_t *)&unk_1004474B0);
          sub_1001B0438(v52);
        }

        else
        {
          sub_1001C6CE4((uint64_t)v56, &qword_10044B0E0);
        }

        sub_10026AB60();
        uint64_t v47 = v46;
        sub_10026E364();
        swift_bridgeObjectRelease(v47);
        sub_1001C6DC4(v30, (uint64_t)v56, &qword_10044B0E0);
        if (v57)
        {
          sub_1001BA03C((uint64_t)v56, (uint64_t)v52);
          sub_1001C6CE4((uint64_t)v56, &qword_10044B0E0);
          uint64_t v48 = v53;
          uint64_t v49 = v54;
          sub_1001B204C(v52, v53);
          (*(void (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);

          sub_1001B0438(v52);
        }

        else
        {

          sub_1001C6CE4((uint64_t)v56, &qword_10044B0E0);
        }
      }

      else
      {
        if (qword_1004468F0 != -1) {
          id v18 = (id)swift_once(&qword_1004468F0, sub_100208418);
        }
        uint64_t v35 = qword_100454018;
        uint64_t v36 = static os_log_type_t.error.getter(v18, v19);
        uint64_t v37 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
        *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        id v39 = [v17 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, v4);
        uint64_t v40 = String.init<A>(reflecting:)(v8, v4);
        uint64_t v42 = v41;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
        *(void *)(v38 + 56) = &type metadata for String;
        *(void *)(v38 + 64) = sub_1001B2330();
        *(void *)(v38 + 32) = v40;
        *(void *)(v38 + 40) = v42;
        os_log(_:dso:log:type:_:)( "Error creating CSDMessagingConversation to cache from conversation with UUID: %@.",  81LL,  2LL,  &_mh_execute_header,  v35,  v36,  v38);
        swift_bridgeObjectRelease(v38);
      }
    }
  }

void sub_10026BFE4()
{
}

void sub_10026C000()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  id v8 = v7;
  uint64_t v9 = sub_1001C7360();
  uint64_t v22 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1001C7290();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1001B10F0();
  uint64_t v12 = sub_1001C7370(v6, 32LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *(void *)(v12 + 24) = v0;
  v23[5] = v4;
  v23[6] = v12;
  v23[1] = _NSConcreteStackBlock;
  v23[2] = 1107296256LL;
  v23[3] = sub_1002356BC;
  v23[4] = v2;
  uint64_t v13 = sub_1001C7350();
  id v14 = v8;
  id v15 = v0;
  sub_1001C7348();
  v23[0] = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = v16;
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v18 = sub_1001E2080();
  dispatch thunk of SetAlgebra.init<A>(_:)(v23, v0, v18, v9, v17);
  uint64_t v19 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v19, v20, v21);
  _Block_release(v13);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_10026C164(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v30 - v9;
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v11 = qword_100454018;
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  id v14 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  uint64_t v15 = String.init<A>(reflecting:)(v8, v4);
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1001B2330();
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)( "Removing conversation with UUID: %@ from cache.",  47LL,  2LL,  &_mh_execute_header,  v11,  v19,  v13);
  swift_bridgeObjectRelease(v13);
  uint64_t v20 = a2 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess(a2 + OBJC_IVAR___CSDConversationPersistenceController_storage, v34, 0LL, 0LL);
  sub_1001C6DC4(v20, (uint64_t)v35, &qword_10044B0E0);
  if (v36)
  {
    sub_1001BA03C((uint64_t)v35, (uint64_t)v31);
    sub_1001C6CE4((uint64_t)v35, &qword_10044B0E0);
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    sub_1001B204C(v31, v32);
    memset(v30, 0, sizeof(v30));
    uint64_t v23 = sub_10026AB60();
    uint64_t v25 = v24;
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(v30, v23, v24, v21, v22);
    swift_bridgeObjectRelease(v25);
    sub_1001C6CE4((uint64_t)v30, (uint64_t *)&unk_1004474B0);
    sub_1001B0438(v31);
  }

  else
  {
    sub_1001C6CE4((uint64_t)v35, &qword_10044B0E0);
  }

  sub_10026AB60();
  uint64_t v27 = v26;
  sub_10026E668();
  swift_bridgeObjectRelease(v27);
  sub_1001C6DC4(v20, (uint64_t)v35, &qword_10044B0E0);
  if (v36)
  {
    sub_1001BA03C((uint64_t)v35, (uint64_t)v31);
    sub_1001C6CE4((uint64_t)v35, &qword_10044B0E0);
    uint64_t v28 = v32;
    uint64_t v29 = v33;
    sub_1001B204C(v31, v32);
    (*(void (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
    sub_1001B0438(v31);
  }

  else
  {
    sub_1001C6CE4((uint64_t)v35, &qword_10044B0E0);
  }

void sub_10026C4C4()
{
  uint64_t v1 = sub_1001C7360();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = sub_1001C7290();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B10F0();
  *(void *)(sub_1001C7370((uint64_t)&unk_1003E4B38, 24LL) + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  uint64_t v5 = sub_1001C7350();
  id v6 = v0;
  sub_1001C7348();
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v7 = sub_1001E2080();
  sub_10026F214(v7);
  uint64_t v8 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v8, v9, v10);
  _Block_release(v5);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_10026C604(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess(a1 + OBJC_IVAR___CSDConversationPersistenceController_storage, v18, 0LL, 0LL);
  sub_1001C6DC4(v1, (uint64_t)v19, &qword_10044B0E0);
  if (!v20) {
    goto LABEL_12;
  }
  sub_1001BA03C((uint64_t)v19, (uint64_t)v15);
  sub_1001C6CE4((uint64_t)v19, &qword_10044B0E0);
  uint64_t v2 = v16;
  uint64_t v3 = v17;
  sub_1001B204C(v15, v16);
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))( v14,  v4,  0xD00000000000001ALL,  0x8000000100375040LL,  v4,  v2,  v3);
  uint64_t v5 = *(void *)&v14[0];
  sub_1001B0438(v15);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(v5);
    unint64_t v7 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v8 = *v7;
      sub_1001C6DC4(v1, (uint64_t)v19, &qword_10044B0E0);
      if (v20)
      {
        sub_1001BA03C((uint64_t)v19, (uint64_t)v15);
        swift_bridgeObjectRetain(v8);
        sub_1001C6CE4((uint64_t)v19, &qword_10044B0E0);
        uint64_t v10 = v16;
        uint64_t v11 = v17;
        sub_1001B204C(v15, v16);
        memset(v14, 0, sizeof(v14));
        (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v14, v9, v8, v10, v11);
        sub_1001C6CE4((uint64_t)v14, (uint64_t *)&unk_1004474B0);
        sub_1001B0438(v15);
      }

      else
      {
        swift_bridgeObjectRetain(v8);
        sub_1001C6CE4((uint64_t)v19, &qword_10044B0E0);
      }

      v7 += 2;
      sub_10026E668();
      swift_bridgeObjectRelease(v8);
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v5);
  }

  swift_bridgeObjectRelease(v5);
  sub_1001C6DC4(v1, (uint64_t)v19, &qword_10044B0E0);
  if (v20)
  {
    sub_1001BA03C((uint64_t)v19, (uint64_t)v15);
    sub_1001C6CE4((uint64_t)v19, &qword_10044B0E0);
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_1001B204C(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
    sub_1001B0438(v15);
  }

  else
  {
LABEL_12:
    sub_1001C6CE4((uint64_t)v19, &qword_10044B0E0);
  }

void sub_10026C8A8()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1001C7360();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_1001C7290();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v9 = (void *)sub_1001C7370((uint64_t)&unk_1003E4AE8, 40LL);
  _OWORD v9[2] = v0;
  v9[3] = v4;
  v9[4] = v2;
  uint64_t v10 = sub_1001C7350();
  id v11 = v0;
  swift_retain(v2);
  sub_1001C7348();
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v12 = sub_1001E2080();
  sub_10026F214(v12);
  uint64_t v13 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v13, v14, v15);
  _Block_release(v10);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_10026C9F8( uint64_t a1, void (*a2)(char *, char *, char *, void, id, id, void *, void *, uint64_t, uint64_t, id, id, uint64_t, void, uint64_t, id, uint64_t, BOOL), uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v236 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v236 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v236 - v13;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v253 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v252 = (char *)&v236 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v254 = (char *)&v236 - v18;
  sub_10026E954();
  uint64_t v19 = a1 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  swift_beginAccess(a1 + OBJC_IVAR___CSDConversationPersistenceController_storage, v268, 0LL, 0LL);
  uint64_t v262 = v19;
  sub_1001C6DC4(v19, (uint64_t)&v269, &qword_10044B0E0);
  if (!v271)
  {
    sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
    return;
  }

  sub_1001BA03C((uint64_t)&v269, (uint64_t)&v265);
  sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
  uint64_t v20 = v266;
  uint64_t v21 = v267;
  sub_1001B204C(&v265, v266);
  uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))( &v263,  v22,  0xD00000000000001ALL,  0x8000000100375040LL,  v22,  v20,  v21);
  uint64_t v23 = v263;
  sub_1001B0438(&v265);
  if (!v23) {
    return;
  }
  uint64_t v261 = *(void *)(v23 + 16);
  if (!v261)
  {
LABEL_173:
    swift_bridgeObjectRelease(v23);
    return;
  }

  uint64_t v251 = v15;
  uint64_t v250 = v14;
  Class v249 = v12;
  uint64_t v248 = v9;
  id v246 = a2;
  uint64_t v247 = a3;
  unint64_t v24 = 0LL;
  uint64_t v260 = v23 + 32;
  __int128 v258 = xmmword_10037B290;
  uint64_t v259 = v23;
  uint64_t v255 = a1;
  while (1)
  {
    if (v24 >= *(void *)(v23 + 16))
    {
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }

    uint64_t v25 = (uint64_t *)(v260 + 16 * v24);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    sub_1001C6DC4(v262, (uint64_t)&v269, &qword_10044B0E0);
    if (!v271)
    {
      swift_bridgeObjectRetain(v27);
      sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
LABEL_20:
      if (qword_1004468F0 != -1) {
        uint64_t v31 = swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v48 = qword_100454018;
      uint64_t v49 = static os_log_type_t.error.getter(v31, v32);
      uint64_t v50 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
      *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v258;
      uint64_t v269 = v26;
      uint64_t v270 = v27;
      uint64_t v52 = String.init<A>(reflecting:)(&v269, &type metadata for String);
      uint64_t v54 = v53;
      *(void *)(v51 + 56) = &type metadata for String;
      *(void *)(v51 + 64) = sub_1001B2330();
      *(void *)(v51 + 32) = v52;
      *(void *)(v51 + 40) = v54;
      os_log(_:dso:log:type:_:)( "Expected an active conversation for key %@ but found nothing. Cleaning up cached conversation.",  94LL,  2LL,  &_mh_execute_header,  v48,  v49,  v51);
      swift_bridgeObjectRelease(v51);
      goto LABEL_56;
    }

    sub_1001BA03C((uint64_t)&v269, (uint64_t)&v265);
    swift_bridgeObjectRetain(v27);
    sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
    uint64_t v28 = v266;
    uint64_t v29 = v267;
    sub_1001B204C(&v265, v266);
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v29 + 16))( &v263,  &type metadata for Data,  v26,  v27,  &type metadata for Data,  v28,  v29);
    __int128 v30 = v263;
    uint64_t v31 = sub_1001B0438(&v265);
    if (*((void *)&v30 + 1) >> 60 == 15LL) {
      goto LABEL_20;
    }
    id v33 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingConversation);
    sub_1001BB31C(v30, *((unint64_t *)&v30 + 1));
    uint64_t v257 = v30;
    id v34 = sub_1001E0784(v30, *((unint64_t *)&v30 + 1));
    if (!v34)
    {
      if (qword_1004468F0 != -1) {
        id v34 = (id)swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v55 = qword_100454018;
      uint64_t v56 = static os_log_type_t.error.getter(v34, v35);
      uint64_t v57 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
      *(_OWORD *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = v258;
      uint64_t v269 = v26;
      uint64_t v270 = v27;
      swift_bridgeObjectRetain(v27);
      uint64_t v59 = String.init<A>(reflecting:)(&v269, &type metadata for String);
      uint64_t v61 = v60;
      *(void *)(v58 + 56) = &type metadata for String;
      *(void *)(v58 + 64) = sub_1001B2330();
      *(void *)(v58 + 32) = v59;
      *(void *)(v58 + 40) = v61;
      os_log(_:dso:log:type:_:)( "Cannot create CSDMessagingConversation from data in cache for key: %@. Cleaning up cached conversation",  102LL,  2LL,  &_mh_execute_header,  v55,  v56,  v58);
      swift_bridgeObjectRelease(v58);
      sub_1001C6DC4(v262, (uint64_t)&v269, &qword_10044B0E0);
      if (v271)
      {
        sub_1001BA03C((uint64_t)&v269, (uint64_t)&v265);
        sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
        uint64_t v62 = v266;
        uint64_t v63 = v267;
        sub_1001B204C(&v265, v266);
        __int128 v263 = 0u;
        __int128 v264 = 0u;
        (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8))(&v263, v26, v27, v62, v63);
        sub_1001C6CE4((uint64_t)&v263, (uint64_t *)&unk_1004474B0);
        sub_1001B0438(&v265);
      }

      else
      {
        sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
      }

      uint64_t v64 = v257;
      a1 = v255;
      sub_10026E668();
      uint64_t v65 = v64;
      unint64_t v66 = *((void *)&v30 + 1);
      goto LABEL_55;
    }

    uint64_t v36 = v34;
    id v37 = [v34 hasUUIDString];
    if (!(_DWORD)v37) {
      goto LABEL_49;
    }
    id v37 = [v36 hasGroupUUIDString];
    if (!(_DWORD)v37) {
      goto LABEL_49;
    }
    id v37 = [v36 hasLocalMember];
    if (!(_DWORD)v37) {
      goto LABEL_49;
    }
    id v37 = [v36 hasInitiator];
    if (!(_DWORD)v37) {
      goto LABEL_49;
    }
    uint64_t v39 = sub_1001B9DC8(v36, (SEL *)&selRef_uUIDString);
    if (!v40) {
      goto LABEL_182;
    }
    uint64_t v41 = v40;
    uint64_t v42 = (uint64_t)v250;
    UUID.init(uuidString:)(v39, v40);
    swift_bridgeObjectRelease(v41);
    uint64_t v43 = v251;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v253 + 32);
    v44(v254, v42, v43);
    uint64_t v45 = sub_1001B9DC8(v36, (SEL *)&selRef_groupUUIDString);
    if (!v46) {
      goto LABEL_183;
    }
    uint64_t v47 = v46;
    uint64_t v42 = (uint64_t)v249;
    UUID.init(uuidString:)(v45, v46);
    swift_bridgeObjectRelease(v47);
    if (sub_1001AB0AC(v42, 1LL, v43) == 1)
    {
      (*(void (**)(char *, uint64_t))(v253 + 8))(v254, v43);
LABEL_18:
      sub_1001C6CE4(v42, (uint64_t *)&unk_10044A400);
      goto LABEL_49;
    }

    v44(v252, v42, v43);
    id v67 = [v36 localMember];
    if (!v67) {
      goto LABEL_184;
    }
    id v68 = v67;
    id v69 = [v67 tuConversationMember];

    if (!v69) {
      goto LABEL_48;
    }
    id v70 = [v36 initiator];
    if (!v70) {
      goto LABEL_185;
    }
    uint64_t v71 = v70;
    id v72 = [v70 tuHandle];

    id v243 = v72;
    if (!v72) {
      goto LABEL_47;
    }
    id v73 = [v36 remoteMembers];
    if (!v73
      || (uint64_t v74 = v73,
          uint64_t v269 = 0LL,
          uint64_t v75 = sub_1001B4B94(0LL, &qword_10044A5E0, off_1003D5DE0),
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(v74, &v269, v75),
          v74,
          (uint64_t v76 = v269) == 0))
    {

LABEL_47:
LABEL_48:
      id v90 = *(void (**)(char *, uint64_t))(v253 + 8);
      uint64_t v91 = v251;
      v90(v252, v251);
      id v37 = (id)((uint64_t (*)(char *, uint64_t))v90)(v254, v91);
LABEL_49:
      uint64_t v256 = *((void *)&v30 + 1);
      uint64_t v92 = a1;
      if (qword_1004468F0 != -1) {
        id v37 = (id)swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v93 = qword_100454018;
      uint64_t v94 = static os_log_type_t.error.getter(v37, v38);
      uint64_t v95 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v96 = swift_allocObject(v95, 72LL, 7LL);
      *(_OWORD *)(v96 + swift_unknownObjectWeakDestroy(v0 + 16) = v258;
      uint64_t v269 = (uint64_t)v36;
      uint64_t v97 = sub_1001B4B94(0LL, &qword_10044B0E8, off_1003D5DC0);
      id v98 = v36;
      uint64_t v99 = String.init<A>(reflecting:)(&v269, v97);
      uint64_t v101 = v100;
      *(void *)(v96 + 56) = &type metadata for String;
      *(void *)(v96 + 64) = sub_1001B2330();
      *(void *)(v96 + 32) = v99;
      *(void *)(v96 + 40) = v101;
      os_log(_:dso:log:type:_:)( "Missing fields on conversation from cache %@. Cleaning up cached conversation.",  78LL,  2LL,  &_mh_execute_header,  v93,  v94,  v96);
      swift_bridgeObjectRelease(v96);
      sub_1001C6DC4(v262, (uint64_t)&v269, &qword_10044B0E0);
      if (v271)
      {
        sub_1001BA03C((uint64_t)&v269, (uint64_t)&v265);
        sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
        uint64_t v102 = v266;
        uint64_t v103 = v267;
        sub_1001B204C(&v265, v266);
        __int128 v263 = 0u;
        __int128 v264 = 0u;
        (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 8))(&v263, v26, v27, v102, v103);
        sub_1001C6CE4((uint64_t)&v263, (uint64_t *)&unk_1004474B0);
        sub_1001B0438(&v265);
      }

      else
      {
        sub_1001C6CE4((uint64_t)&v269, &qword_10044B0E0);
      }

      a1 = v92;
      sub_10026E668();

      uint64_t v65 = v257;
      unint64_t v66 = v256;
LABEL_55:
      sub_1001BB464(v65, v66);
      swift_bridgeObjectRelease(v27);
      goto LABEL_56;
    }

    id v242 = v69;
    id v77 = [v36 activeRemoteParticipants];
    if (!v77
      || (id v78 = v77,
          uint64_t v269 = 0LL,
          uint64_t v245 = sub_1001B4B94(0LL, &qword_10044B0F0, off_1003D5DE8),
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(v78, &v269, v245),
          v78,
          !v269))
    {
      swift_bridgeObjectRelease(v76);

      goto LABEL_48;
    }

    uint64_t v256 = v269;
    swift_bridgeObjectRelease(v27);
    id v79 = [v36 lightweightMembers];
    if (!v79
      || (uint64_t v80 = v79,
          uint64_t v269 = 0LL,
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(v79, &v269, v75),
          v80,
          (uint64_t v81 = v269) == 0))
    {
      swift_bridgeObjectRelease(0LL);
      uint64_t v81 = (uint64_t)_swiftEmptyArrayStorage;
    }

    id v82 = [v36 activeLightweightParticipants];
    if (!v82
      || (id v83 = v82,
          uint64_t v269 = 0LL,
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(v82, &v269, v245),
          v83,
          (id v84 = (void *)v269) == 0LL))
    {
      swift_bridgeObjectRelease(0LL);
      id v84 = _swiftEmptyArrayStorage;
    }

    uint64_t v245 = (uint64_t)v84;
    sub_1001B9DC8(v36, (SEL *)&selRef_messagesGroupUUIDString);
    uint64_t v86 = v85;
    swift_bridgeObjectRelease(v85);
    if (v86)
    {
      uint64_t v87 = sub_1001B9DC8(v36, (SEL *)&selRef_messagesGroupUUIDString);
      if (!v88) {
        goto LABEL_186;
      }
      uint64_t v89 = v88;
      UUID.init(uuidString:)(v87, v88);
      swift_bridgeObjectRelease(v89);
    }

    else
    {
      sub_1001A9670((uint64_t)v248, 1LL, 1LL, v251);
    }

    unsigned int v241 = [v36 locallyCreated];
    uint64_t v269 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v76 >> 62)
    {
      if (v76 >= 0) {
        uint64_t v120 = v76 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v120 = v76;
      }
      swift_bridgeObjectRetain(v76);
      uint64_t v104 = _CocoaArrayWrapper.endIndex.getter(v120);
      if (!v104)
      {
LABEL_77:
        swift_bridgeObjectRelease(v76);
        uint64_t v240 = _swiftEmptyArrayStorage;
        goto LABEL_78;
      }
    }

    else
    {
      uint64_t v104 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v76);
      if (!v104) {
        goto LABEL_77;
      }
    }

    uint64_t v244 = (void *)v81;
    if (v104 < 1) {
      goto LABEL_177;
    }
    for (uint64_t i = 0LL; i != v104; ++i)
    {
      if ((v76 & 0xC000000000000001LL) != 0) {
        id v106 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v76);
      }
      else {
        id v106 = *(id *)(v76 + 8 * i + 32);
      }
      uint64_t v107 = v106;
      id v108 = [v106 tuConversationMember];

      if (v108)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v109);
        uint64_t v110 = *(void **)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v111 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if ((unint64_t)v110 >= v111 >> 1)
        {
          uint64_t v240 = *(void **)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v111 > 1,  (char *)v110 + 1,  1LL);
          uint64_t v110 = v240;
        }

        uint64_t v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v110, v108);
        specialized Array._endMutation()(v112, v113, v114, v115, v116, v117, v118, v119);
      }
    }

    swift_bridgeObjectRelease(v76);
    uint64_t v240 = (void *)v269;
    uint64_t v81 = (uint64_t)v244;
LABEL_78:
    swift_bridgeObjectRelease(v76);
    uint64_t v269 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v121 = *(void *)((v81 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v81);
    if (v121) {
      goto LABEL_80;
    }
LABEL_100:
    swift_bridgeObjectRelease(v81);
    uint64_t v244 = _swiftEmptyArrayStorage;
LABEL_101:
    swift_bridgeObjectRelease(v81);
    uint64_t v269 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v256 >> 62)
    {
      if (v256 >= 0) {
        uint64_t v159 = v256 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v159 = v256;
      }
      swift_bridgeObjectRetain(v256);
      uint64_t v139 = _CocoaArrayWrapper.endIndex.getter(v159);
      if (!v139)
      {
LABEL_118:
        uint64_t v157 = v256;
        swift_bridgeObjectRelease(v256);
        uint64_t v158 = _swiftEmptyArrayStorage;
        goto LABEL_119;
      }
    }

    else
    {
      uint64_t v139 = *(void *)((v256 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v256);
      if (!v139) {
        goto LABEL_118;
      }
    }

    uint64_t v140 = v256;
    if (v139 < 1) {
      goto LABEL_179;
    }
    uint64_t v141 = 0LL;
    unint64_t v142 = v256 & 0xC000000000000001LL;
    do
    {
      if (v142) {
        id v143 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v141, v140);
      }
      else {
        id v143 = *(id *)(v140 + 8 * v141 + 32);
      }
      uint64_t v144 = v143;
      id v145 = [v143 csdConversationParticipant];

      if (v145)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v146);
        unint64_t v148 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v147 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v148 >= v147 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v147 > 1, v148 + 1, 1LL);
        }
        uint64_t v149 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v148, v145);
        specialized Array._endMutation()(v149, v150, v151, v152, v153, v154, v155, v156);
      }

      ++v141;
      uint64_t v140 = v256;
    }

    while (v139 != v141);
    uint64_t v157 = v256;
    swift_bridgeObjectRelease(v256);
    uint64_t v158 = (void *)v269;
LABEL_119:
    swift_bridgeObjectRelease(v157);
    uint64_t v269 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v245 >> 62)
    {
      if (v245 < 0) {
        uint64_t v180 = v245;
      }
      else {
        uint64_t v180 = v245 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v245);
      uint64_t v160 = _CocoaArrayWrapper.endIndex.getter(v180);
      if (!v160)
      {
LABEL_136:
        uint64_t v178 = v245;
        swift_bridgeObjectRelease(v245);
        uint64_t v179 = _swiftEmptyArrayStorage;
        goto LABEL_137;
      }
    }

    else
    {
      uint64_t v160 = *(void *)((v245 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v245);
      if (!v160) {
        goto LABEL_136;
      }
    }

    uint64_t v161 = v245;
    if (v160 < 1) {
      goto LABEL_180;
    }
    uint64_t v162 = 0LL;
    unint64_t v163 = v245 & 0xC000000000000001LL;
    do
    {
      if (v163) {
        id v164 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v162, v161);
      }
      else {
        id v164 = *(id *)(v161 + 8 * v162 + 32);
      }
      uint64_t v165 = v164;
      id v166 = [v164 csdConversationParticipant];

      if (v166)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v167);
        unint64_t v168 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v169 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v168 >= v169 >> 1)
        {
          uint64_t v256 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v169 > 1, v168 + 1, 1LL);
          unint64_t v168 = v256;
        }

        uint64_t v170 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v168, v166);
        specialized Array._endMutation()(v170, v171, v172, v173, v174, v175, v176, v177);
      }

      ++v162;
      uint64_t v161 = v245;
    }

    while (v160 != v162);
    uint64_t v178 = v245;
    swift_bridgeObjectRelease(v245);
    uint64_t v179 = (void *)v269;
LABEL_137:
    swift_bridgeObjectRelease(v178);
    id v181 = [v36 otherInvitedHandles];
    id v239 = v158;
    if (v181)
    {
      uint64_t v182 = v181;
      uint64_t v269 = 0LL;
      uint64_t v183 = sub_1001B4B94(0LL, &qword_10044B100, off_1003D5DF0);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)(v182, &v269, v183);

      uint64_t v184 = v269;
      if (v269)
      {
        uint64_t v269 = (uint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v184 >> 62)
        {
          if (v184 >= 0) {
            uint64_t v204 = v184 & 0xFFFFFFFFFFFFFF8LL;
          }
          else {
            uint64_t v204 = v184;
          }
          swift_bridgeObjectRetain(v184);
          uint64_t v185 = _CocoaArrayWrapper.endIndex.getter(v204);
          if (v185) {
            goto LABEL_141;
          }
        }

        else
        {
          uint64_t v185 = *(void *)((v184 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          swift_bridgeObjectRetain(v184);
          if (v185)
          {
LABEL_141:
            uint64_t v245 = (uint64_t)v179;
            if (v185 < 1) {
              goto LABEL_181;
            }
            uint64_t v186 = 0LL;
            uint64_t v187 = v184;
            unint64_t v188 = v184 & 0xC000000000000001LL;
            uint64_t v189 = v185;
            do
            {
              if (v188) {
                id v190 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v186, v187);
              }
              else {
                id v190 = *(id *)(v187 + 8 * v186 + 32);
              }
              uint64_t v191 = v190;
              id v192 = [v190 tuHandle];

              if (v192)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v193);
                unint64_t v194 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                unint64_t v195 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                if (v194 >= v195 >> 1)
                {
                  uint64_t v256 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v195 > 1,  v194 + 1,  1LL);
                  unint64_t v194 = v256;
                }

                uint64_t v196 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v194, v192);
                specialized Array._endMutation()(v196, v197, v198, v199, v200, v201, v202, v203);
              }

              ++v186;
            }

            while (v189 != v186);
            uint64_t v184 = v187;
            swift_bridgeObjectRelease(v187);
            uint64_t v256 = v269;
            uint64_t v179 = (void *)v245;
            goto LABEL_158;
          }
        }

        swift_bridgeObjectRelease(v184);
        uint64_t v256 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_158:
        swift_bridgeObjectRelease(v184);
        goto LABEL_159;
      }
    }

    uint64_t v256 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_159:
    if ([v36 hasReportData])
    {
      id v205 = [v36 reportData];
      if (!v205) {
        goto LABEL_187;
      }
      uint64_t v206 = v205;
      id v238 = [v205 tuConversationReport];
    }

    else
    {
      id v238 = [objc_allocWithZone(TUConversationReport) init];
    }

    id v207 = [v36 tuConversationLink];
    id v208 = [v36 activitySessions];
    if (v208)
    {
      uint64_t v209 = v208;
      uint64_t v269 = 0LL;
      uint64_t v210 = sub_1001B4B94(0LL, &qword_10044B0F8, off_1003D5DC8);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)(v209, &v269, v210);

      uint64_t v211 = (void *)v269;
      if (!v269) {
        uint64_t v211 = _swiftEmptyArrayStorage;
      }
    }

    else
    {
      uint64_t v211 = _swiftEmptyArrayStorage;
    }

    uint64_t v245 = (uint64_t)v211;
    sub_1001B9DC8(v36, (SEL *)&selRef_conversationProviderIdentifier);
    uint64_t v213 = v212;
    if ([v36 hasAvMode])
    {
      unsigned int v221 = [v36 avMode];
      if ((v221 & 0x80000000) != 0) {
        goto LABEL_188;
      }
      uint64_t v222 = (uint64_t)v179;
      uint64_t v223 = v221;
    }

    else
    {
      uint64_t v222 = (uint64_t)v179;
      uint64_t v223 = 2LL;
    }

    uint64_t v269 = (uint64_t)v239;
    sub_1002908CC(v222, v214, v215, v216, v217, v218, v219, v220, v236);
    uint64_t v224 = v269;
    uint64_t v236 = v269;
    id v239 = [v36 stagedActivitySession];
    uint64_t v234 = v223;
    BOOL v235 = v223 == 0;
    uint64_t v237 = v213;
    uint64_t v233 = v213;
    uint64_t v225 = v238;
    id v232 = v207;
    uint64_t v226 = v207;
    id v227 = v243;
    uint64_t v228 = v240;
    unint64_t v229 = v244;
    v246(v254, v252, v248, v241, v242, v243, v240, v244, v256, v224, v232, v238, v245, v30, v233, v239, v234, v235);
    swift_bridgeObjectRelease(v229);
    swift_bridgeObjectRelease(v228);

    swift_bridgeObjectRelease(v236);
    swift_bridgeObjectRelease(v237);
    sub_1001BB464(v257, *((unint64_t *)&v30 + 1));
    swift_bridgeObjectRelease(v256);
    swift_bridgeObjectRelease(v245);
    sub_1001C6CE4((uint64_t)v248, (uint64_t *)&unk_10044A400);
    uint64_t v230 = *(void (**)(char *, uint64_t))(v253 + 8);
    uint64_t v231 = v251;
    v230(v252, v251);
    v230(v254, v231);
LABEL_56:
    ++v24;
    uint64_t v23 = v259;
    if (v24 == v261) {
      goto LABEL_173;
    }
  }

  if (v81 < 0) {
    uint64_t v138 = v81;
  }
  else {
    uint64_t v138 = v81 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v81);
  uint64_t v121 = _CocoaArrayWrapper.endIndex.getter(v138);
  if (!v121) {
    goto LABEL_100;
  }
LABEL_80:
  if (v121 >= 1)
  {
    uint64_t v122 = 0LL;
    uint64_t v244 = (void *)(v81 & 0xC000000000000001LL);
    while (1)
    {
      if (v244) {
        id v123 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v122, v81);
      }
      else {
        id v123 = *(id *)(v81 + 8 * v122 + 32);
      }
      unint64_t v124 = v123;
      id v125 = [v123 tuConversationMember];
      if ([v124 hasValidationSource]
        && [v124 validationSource] == 1)
      {
        if (v125)
        {
          [v125 setValidationSource:1];

LABEL_90:
          uint64_t v127 = v81;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v126);
          unint64_t v129 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v128 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v129 >= v128 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1LL);
          }
          uint64_t v130 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v125);
          specialized Array._endMutation()(v130, v131, v132, v133, v134, v135, v136, v137);
          uint64_t v81 = v127;
          goto LABEL_93;
        }
      }

      else
      {

        if (v125) {
          goto LABEL_90;
        }
      }

LABEL_93:
      if (v121 == ++v122)
      {
        swift_bridgeObjectRelease(v81);
        uint64_t v244 = (void *)v269;
        goto LABEL_101;
      }
    }
  }

void sub_10026E0EC( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  int v41 = a4;
  uint64_t v40 = a19;
  NSString v20 = a15;
  uint64_t v36 = a10;
  uint64_t v37 = a13;
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v38 = UUID._bridgeToObjectiveC()().super.isa;
  sub_1001C6DC4(a3, (uint64_t)v23, (uint64_t *)&unk_10044A400);
  uint64_t v24 = type metadata accessor for UUID(0LL);
  Class v25 = 0LL;
  if (sub_1001AB0AC((uint64_t)v23, 1LL, v24) != 1)
  {
    Class v25 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8LL))(v23, v24);
  }

  uint64_t v35 = a12;
  uint64_t v33 = a16;
  uint64_t v34 = a11;
  sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
  v26.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
  v28.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001B4B94(0LL, (unint64_t *)&qword_100448F80, off_1003D5D90);
  v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001B4B94(0LL, &qword_10044B0F8, off_1003D5DC8);
  v30.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a15) {
    NSString v20 = String._bridgeToObjectiveC()();
  }
  Class v32 = v38;
  Class v31 = isa;
  (*(void (**)(uint64_t, Class, Class, Class, void, uint64_t, uint64_t, Class, Class, Class, Class, uint64_t, uint64_t, Class, NSString, uint64_t, uint64_t, uint64_t))(v40 + 16))( v40,  isa,  v38,  v25,  v41 & 1,  v42,  v43,  v26.super.isa,  v27.super.isa,  v28.super.isa,  v29.super.isa,  v34,  v35,  v30.super.isa,  v20,  v33,  a17,  a18);
}

void sub_10026E364()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001B1098();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v9 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationPersistenceController_queue);
  *uint64_t v1 = v9;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v7);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v1);
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_1004468F0, sub_100208418);
    goto LABEL_9;
  }

  uint64_t v11 = sub_1001B0E6C((uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage, (uint64_t)&v34);
  sub_10026F2FC(v11, v12, &qword_10044B0E0);
  uint64_t v2 = "activeConversationsListKey";
  if (v36)
  {
    uint64_t v14 = sub_10026F254();
    sub_10026F24C(v14, &qword_10044B0E0);
    sub_1001B204C(v33, v33[3]);
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
    sub_10026F260(v15, v16, 0x8000000100375040LL);
    uint64_t v0 = (void *)v32[0];
    sub_10026F2E0();
    if (v32[0]) {
      goto LABEL_7;
    }
  }

  else
  {
    sub_10026F24C(v13, &qword_10044B0E0);
  }

  swift_bridgeObjectRelease(0LL);
  uint64_t v0 = _swiftEmptyArrayStorage;
LABEL_7:
  uint64_t isUniquelyReferenced_nonNull_native = sub_10028F48C(v6, v4, v0);
  if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
    goto LABEL_14;
  }
  if (qword_1004468F0 != -1) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v19 = qword_100454018;
  uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v21 = sub_1001C7370(v20, 72LL);
  *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  v35[0] = v6;
  v35[1] = v4;
  swift_bridgeObjectRetain(v4);
  uint64_t v22 = String.init<A>(reflecting:)(v35, &type metadata for String);
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v25 = sub_1001B2330();
  *(void *)(v21 + 64) = v25;
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  os_log(_:dso:log:type:_:)( "Adding active conversation with cache key: %@",  45LL,  2LL,  &_mh_execute_header,  v19,  v26,  v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRetain(v4);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10026F348();
    uint64_t v0 = (void *)isUniquelyReferenced_nonNull_native;
  }

  unint64_t v27 = v0[2];
  if (v27 >= v0[3] >> 1)
  {
    sub_10026F348();
    uint64_t v0 = (void *)isUniquelyReferenced_nonNull_native;
  }

  v0[2] = v27 + 1;
  NSArray v28 = &v0[2 * v27];
  v28[4] = v6;
  void v28[5] = v4;
LABEL_14:
  sub_10026F2FC(isUniquelyReferenced_nonNull_native, v18, &qword_10044B0E0);
  if (v36)
  {
    uint64_t v29 = sub_10026F254();
    sub_10026F24C(v29, &qword_10044B0E0);
    uint64_t v30 = v33[4];
    sub_10026F340(v33);
    v32[3] = sub_1001AFF14((uint64_t *)&unk_100447EE0);
    v32[0] = v0;
    sub_10026F334( (uint64_t)v32,  0xD00000000000001ALL,  (unint64_t)(v2 - 32) | 0x8000000000000000LL,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8));
    sub_1001C6CE4((uint64_t)v32, (uint64_t *)&unk_1004474B0);
    sub_10026F2E0();
  }

  else
  {
    uint64_t v31 = sub_1001AA9C8();
    sub_10026F24C(v31, &qword_10044B0E0);
  }

  sub_1001B0FF8();
}

void sub_10026E668()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001B1098();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B0EA0();
  uint64_t v9 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationPersistenceController_queue);
  *uint64_t v1 = v9;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v7);
  id v10 = v9;
  unint64_t v11 = _dispatchPreconditionTest(_:)(v1);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = sub_1001B0E6C((uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage, (uint64_t)&v43);
    sub_10026F2F0(v12, v13, &qword_10044B0E0);
    if (!v45) {
      goto LABEL_13;
    }
    uint64_t v15 = sub_10026F254();
    sub_10026F24C(v15, &qword_10044B0E0);
    uint64_t v16 = v41;
    uint64_t v17 = v42;
    sub_1001B204C(v40, v41);
    uint64_t v1 = (void *)sub_1001AFF14((uint64_t *)&unk_100447EE0);
    unint64_t v2 = (unint64_t)"lockStateObserver";
    (*(void (**)(void *__return_ptr, void *, unint64_t, unint64_t, void *, uint64_t, uint64_t))(v17 + 16))( v39,  v1,  0xD00000000000001ALL,  0x8000000100375040LL,  v1,  v16,  v17);
    uint64_t v0 = (void *)v39[0];
    sub_10026F2E0();
    if (!v0)
    {
LABEL_14:
      sub_1001B0FF8();
      return;
    }

    uint64_t v18 = sub_10026AA94(v6, v4, v0);
    if ((v19 & 1) != 0)
    {
      sub_1001AA9C8();
      goto LABEL_14;
    }

    unint64_t v11 = v18;
    if (qword_1004468F0 == -1) {
      goto LABEL_6;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1004468F0, sub_100208418);
LABEL_6:
  uint64_t v20 = qword_100454018;
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v22 = sub_1001C7370(v21, 72LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  v44[0] = v6;
  v44[1] = v4;
  sub_1001B9234();
  uint64_t v23 = String.init<A>(reflecting:)(v44, &type metadata for String);
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v26 = sub_1001B2330();
  *(void *)(v22 + 64) = v26;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  os_log(_:dso:log:type:_:)( "Removing active conversation with cache key: %@",  47LL,  2LL,  &_mh_execute_header,  v20,  v27,  v22);
  sub_1001B0EC0();
  if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0)
  {
    sub_1002B13F0();
    uint64_t v0 = v38;
  }

  unint64_t v28 = v0[2];
  if (v11 < v28)
  {
    unint64_t v29 = v28 - 1;
    uint64_t v30 = v28 - 1 - v11;
    uint64_t v31 = (char *)&v0[2 * v11];
    uint64_t v32 = *((void *)v31 + 5);
    sub_10024F1F0(v31 + 48, v30, v31 + 32);
    v0[2] = v29;
    uint64_t v33 = swift_bridgeObjectRelease(v32);
    sub_10026F2F0(v33, v34, &qword_10044B0E0);
    if (v45)
    {
      uint64_t v35 = sub_10026F254();
      sub_10026F24C(v35, &qword_10044B0E0);
      uint64_t v36 = v41;
      uint64_t v37 = v42;
      sub_10026F340(v40);
      v39[3] = v1;
      v39[0] = v0;
      (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v37 + 8))( v39,  0xD00000000000001ALL,  v2 | 0x8000000000000000LL,  v36,  v37);
      sub_1001C6CE4((uint64_t)v39, (uint64_t *)&unk_1004474B0);
      sub_10026F2E0();
      goto LABEL_14;
    }

    uint64_t v14 = sub_1001AA9C8();
LABEL_13:
    sub_10026F24C(v14, &qword_10044B0E0);
    goto LABEL_14;
  }

  __break(1u);
}

void sub_10026E954()
{
  uint64_t v1 = sub_1001B1098();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10022D034();
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationPersistenceController_queue);
  *uint64_t v0 = v3;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v0, enum case for DispatchPredicate.onQueue(_:), v1);
  id v4 = v3;
  LOBYTE(sub_10024772C(0LL, v2, v3) = _dispatchPreconditionTest(_:)(v0);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v0, v1);
  if ((v3 & 1) == 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  uint64_t v5 = (uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage;
  sub_1001B0E6C((uint64_t)v0 + OBJC_IVAR___CSDConversationPersistenceController_storage, (uint64_t)&v52);
  uint64_t v45 = v5;
  sub_1001C6DC4(v5, (uint64_t)v53, &qword_10044B0E0);
  if (!v54) {
    goto LABEL_36;
  }
  uint64_t v7 = sub_10026F240();
  sub_10026F2E8(v7, &qword_10044B0E0);
  sub_1001B204C(v49, v50);
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  sub_10026F260(v8, v9, 0x8000000100375040LL);
  uint64_t v10 = v46;
  sub_10026F2C8();
  if (!v46)
  {
LABEL_37:
    sub_1001B0FF8();
    return;
  }

  uint64_t v44 = v8;
  uint64_t v55 = v46;
  unint64_t v11 = *(char **)(v46 + 16);
  if (!v11)
  {
    int64_t v13 = 0LL;
    unint64_t v21 = 0LL;
LABEL_33:
    sub_10026EEB4((char *)v13, v21);
    sub_1001C6DC4(v45, (uint64_t)v53, &qword_10044B0E0);
    if (v54)
    {
      uint64_t v42 = sub_10026F240();
      sub_10026F2E8(v42, &qword_10044B0E0);
      uint64_t v43 = v51;
      sub_10026F340(v49);
      uint64_t v48 = v44;
      uint64_t v46 = v55;
      sub_10026F334( (uint64_t)&v46,  0xD00000000000001ALL,  0x8000000100375040LL,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 8));
      sub_1001C6CE4((uint64_t)&v46, (uint64_t *)&unk_1004474B0);
      sub_10026F2C8();
      goto LABEL_37;
    }

    uint64_t v6 = swift_bridgeObjectRelease(v55);
LABEL_36:
    sub_10026F2E8(v6, &qword_10044B0E0);
    goto LABEL_37;
  }

  v0;
  swift_bridgeObjectRetain(v46);
  uint64_t v12 = 0LL;
  int64_t v13 = 0LL;
  while (1)
  {
    uint64_t v14 = *(void *)(v10 + v12 + 32);
    uint64_t v15 = *(void *)(v10 + v12 + 40);
    sub_1001C6DC4(v45, (uint64_t)v53, &qword_10044B0E0);
    if (!v54)
    {
      sub_10026F2E8(v16, &qword_10044B0E0);
      sub_1001D9020();
      sub_10026F278();
      goto LABEL_13;
    }

    sub_10026F240();
    sub_10024DAEC();
    sub_1001C6CE4((uint64_t)v53, &qword_10044B0E0);
    uint64_t v18 = v50;
    uint64_t v17 = v51;
    sub_1001B204C(v49, v50);
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v17 + 16))( &v46,  &type metadata for Data,  v14,  v15,  &type metadata for Data,  v18,  v17);
    uint64_t v19 = v46;
    unint64_t v20 = v47;
    sub_10026F2C8();
    if (v20 >> 60 == 15) {
      break;
    }
    sub_1001BB464(v19, v20);
    sub_1001B92A4();
    ++v13;
    v12 += 16LL;
    if (v11 == (char *)v13)
    {
      sub_1001D9020();
      sub_10026F278();
      int64_t v13 = *(void *)(v10 + 16);
      unint64_t v21 = v13;
      goto LABEL_33;
    }
  }

  sub_1001D9020();
  sub_10026F278();
  sub_1001B92A4();
LABEL_13:
  unint64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1LL)) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v10 + 16);
  if (v21 != v22)
  {
    while (v21 < v22)
    {
      uint64_t v23 = v10 + v12;
      uint64_t v24 = *(void *)(v10 + v12 + 48);
      uint64_t v25 = *(void *)(v10 + v12 + 56);
      sub_1001C6DC4(v45, (uint64_t)v53, &qword_10044B0E0);
      if (v54)
      {
        sub_10026F240();
        sub_10024DAEC();
        sub_10026F38C();
        uint64_t v27 = v50;
        uint64_t v26 = v51;
        sub_1001B204C(v49, v50);
        (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v26 + 16))( &v46,  &type metadata for Data,  v24,  v25,  &type metadata for Data,  v27,  v26);
        uint64_t v28 = v46;
        unint64_t v29 = v47;
        sub_10026F2C8();
        sub_1001BB464(v28, v29);
        sub_1001B92A4();
        if (v29 >> 60 != 15)
        {
          if (v21 != v13)
          {
            if (v13 < 0) {
              goto LABEL_41;
            }
            unint64_t v30 = *(void *)(v10 + 16);
            if (v13 >= v30) {
              goto LABEL_42;
            }
            if (v21 >= v30) {
              goto LABEL_43;
            }
            uint64_t v31 = (uint64_t *)(v10 + 32 + 16 * v13);
            uint64_t v33 = *v31;
            uint64_t v32 = v31[1];
            uint64_t v35 = *(void *)(v23 + 48);
            uint64_t v34 = *(void *)(v23 + 56);
            swift_bridgeObjectRetain(v32);
            sub_10024DAEC();
            if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            {
              sub_1002B13F0();
              uint64_t v10 = v41;
            }

            uint64_t v36 = v10 + 16 * v13;
            uint64_t v37 = *(void *)(v36 + 40);
            *(void *)(v36 + 32) = v35;
            *(void *)(v36 + 40) = v34;
            swift_bridgeObjectRelease(v37);
            if (v21 >= *(void *)(v10 + 16)) {
              goto LABEL_44;
            }
            uint64_t v38 = v10 + v12;
            uint64_t v39 = *(void *)(v10 + v12 + 56);
            *(void *)(v38 + 48) = v33;
            *(void *)(v38 + 56) = v32;
            swift_bridgeObjectRelease(v39);
          }

          if (__OFADD__(v13++, 1LL)) {
            goto LABEL_40;
          }
        }
      }

      else
      {
        sub_10026F38C();
      }

      ++v21;
      unint64_t v22 = *(void *)(v10 + 16);
      v12 += 16LL;
      if (v21 == v22)
      {
        uint64_t v55 = v10;
        goto LABEL_32;
      }
    }

    __break(1u);
    goto LABEL_39;
  }

void sub_10026EDDC()
{
}

id sub_10026EE14()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationPersistenceController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationPersistenceController()
{
  return objc_opt_self(&OBJC_CLASS___CSDConversationPersistenceController);
}

char *sub_10026EEB4(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_1002B00EC();
    uint64_t v4 = v9;
  }

  uint64_t v10 = (char *)(v4 + 32 + 16LL * (void)v6);
  uint64_t result = (char *)swift_arrayDestroy(v10, v7);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = sub_10024F1F0((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
LABEL_13:
    *objc_super v2 = v4;
    return result;
  }

uint64_t sub_10026EFB0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10026EFD8()
{
}

uint64_t sub_10026EFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10026EFF4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10026EFFC(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, *a4, v7);
}

uint64_t sub_10026F054()
{
  uint64_t v0 = sub_1001B5DA8();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10026F06C()
{
}

void sub_10026F074()
{
}

uint64_t sub_10026F07C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10026F0A4()
{
}

uint64_t sub_10026F0AC()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

__n128 sub_10026F0C8( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return result;
}

uint64_t sub_10026F104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_10044B0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026F14C()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10026F184()
{
}

uint64_t sub_10026F194()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10026F1B0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10026F1DC()
{
  sub_10026B904(*(void *)(v0 + 16), *(void (**)(void *__return_ptr))(v0 + 24));
}

uint64_t sub_10026F214(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v2, a1, v1, v3);
}

uint64_t sub_10026F234(uint64_t a1)
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v1, v2);
}

uint64_t sub_10026F240()
{
  return sub_1001BA03C(v0 - 136, v0 - 200);
}

void sub_10026F24C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10026F254()
{
  return sub_1001BA03C(v0 - 120, v0 - 184);
}

uint64_t sub_10026F260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v3(a1, 0xD00000000000001ALL, a3, a1, v4, v5);
}

void sub_10026F278()
{
}

id sub_10026F284(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id sub_10026F290(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10026F29C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10026F2A8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

void sub_10026F2B8(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
}

uint64_t sub_10026F2C8()
{
  return sub_1001B0438((void *)(v0 - 200));
}

uint64_t sub_10026F2D0()
{
  return sub_1001B4B94(0LL, v0, v1);
}

uint64_t sub_10026F2E0()
{
  return sub_1001B0438((void *)(v0 - 184));
}

void sub_10026F2E8(uint64_t a1, uint64_t *a2)
{
}

void sub_10026F2F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10026F2FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

id sub_10026F308()
{
  return sub_100285994();
}

uint64_t sub_10026F310()
{
  return v0(v1, v2);
}

uint64_t sub_10026F31C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10026F328()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10026F334@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a4(a1, a2, a3, v4, v5);
}

void *sub_10026F340(void *a1)
{
  return sub_1001B204C(a1, v1);
}

void sub_10026F348()
{
}

void sub_10026F354()
{
}

id sub_10026F360(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id sub_10026F36C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void sub_10026F378()
{
}

void sub_10026F380(unint64_t *a1)
{
}

void sub_10026F38C()
{
}

void sub_10026F398(uint64_t a1)
{
  uint64_t v2 = a1;
  unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v6 = sub_1001BBBCC( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    id v7 = Set.Iterator.init(_cocoa:)(v65, v4, v5, v6);
    uint64_t v2 = v65[0];
    uint64_t v60 = v65[1];
    uint64_t v1 = v65[2];
    int64_t v8 = v65[3];
    unint64_t v9 = v65[4];
  }

  else
  {
    uint64_t v60 = a1 + 56;
    sub_10026FE20();
    unint64_t v9 = v10 & v11;
    id v7 = (void *)swift_bridgeObjectRetain(v2);
    int64_t v8 = 0LL;
  }

  int64_t v59 = (unint64_t)(v1 + 64) >> 6;
  while (v2 < 0)
  {
    uint64_t v15 = __CocoaSet.Iterator.next()(v7);
    if (!v15) {
      goto LABEL_54;
    }
    uint64_t v16 = v15;
    uint64_t v63 = v15;
    uint64_t v17 = sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    swift_unknownObjectRetain(v16);
    swift_dynamicCast(&v64, &v63, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
    id v18 = v64;
    swift_unknownObjectRelease(v16);
    int64_t v14 = v8;
    uint64_t v12 = v9;
    if (!v18) {
      goto LABEL_54;
    }
LABEL_31:
    uint64_t v61 = v12;
    id v22 = [v18 handles];
    uint64_t v23 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v24 = sub_1001BBBCC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v23, v24);

    unint64_t v26 = v25 & 0xC000000000000001LL;
    uint64_t v62 = v18;
    if ((v25 & 0xC000000000000001LL) != 0)
    {
      if (v25 < 0) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v25 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v28 = __CocoaSet.startIndex.getter(v27);
      uint64_t v30 = v29;
      uint64_t v31 = __CocoaSet.endIndex.getter(v27);
      int64_t v32 = v14;
      uint64_t v33 = v2;
      uint64_t v35 = v34;
      char v36 = static __CocoaSet.Index.== infix(_:_:)(v28, v30, v31, v34);
      uint64_t v37 = v35;
      uint64_t v2 = v33;
      int64_t v14 = v32;
      sub_1001D8CA0(v31, v37, 1);
      uint64_t v38 = v28;
      unint64_t v39 = v61;
      if ((v36 & 1) != 0) {
        goto LABEL_49;
      }
    }

    else
    {
      char v40 = *(_BYTE *)(v25 + 32);
      uint64_t v28 = 1LL << v40;
      unint64_t v41 = *(void *)(v25 + 56);
      if (v41)
      {
        uint64_t v42 = 0LL;
        unint64_t v39 = v61;
      }

      else
      {
        unint64_t v39 = v61;
        if ((v40 & 0x3Fu) < 7) {
          goto LABEL_48;
        }
        unint64_t v41 = *(void *)(v25 + 64);
        if (!v41)
        {
          uint64_t v46 = 9LL;
          while (v46 - 7 < (unint64_t)(v28 + 63) >> 6)
          {
            unint64_t v41 = *(void *)(v25 + 8 * v46++);
            if (v41)
            {
              uint64_t v42 = v46 - 8;
              goto LABEL_39;
            }
          }

uint64_t sub_10026F8B4(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10026F910(v2);
  char v5 = v4;
  swift_bridgeObjectRelease(v3);
  return v5 & 1;
}

void sub_10026F910(uint64_t a1)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = sub_1001B4B94(0LL, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
    uint64_t v6 = sub_1001BBBCC((unint64_t *)&unk_100447A80, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
    id v7 = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    uint64_t v2 = v32[0];
    uint64_t v29 = v32[1];
    uint64_t v1 = v32[2];
    int64_t v8 = v32[3];
    unint64_t v9 = v32[4];
  }

  else
  {
    uint64_t v29 = a1 + 56;
    sub_10026FE20();
    unint64_t v9 = v10 & v11;
    id v7 = (void *)swift_bridgeObjectRetain(v2);
    int64_t v8 = 0LL;
  }

  int64_t v28 = (unint64_t)(v1 + 64) >> 6;
  while (1)
  {
    int64_t v12 = v8;
    if (v2 < 0)
    {
      uint64_t v15 = __CocoaSet.Iterator.next()(v7);
      if (!v15) {
        goto LABEL_32;
      }
      uint64_t v16 = v15;
      uint64_t v30 = v15;
      uint64_t v17 = sub_1001B4B94(0LL, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
      swift_unknownObjectRetain(v16);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
      id v18 = v31;
      swift_unknownObjectRelease(v16);
      if (!v18) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }

    if (!v9) {
      break;
    }
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v8 << 6);
LABEL_28:
    id v18 = *(id *)(*(void *)(v2 + 48) + 8 * v14);
    if (!v18) {
      goto LABEL_32;
    }
LABEL_29:
    NSString v22 = [v18 value];
    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v24 = v23;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
    }

    uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___TUICFInterface);
    NSString v26 = String._bridgeToObjectiveC()();
    id v27 = [v25 allowCallForDestinationID:v22 providerIdentifier:v26];

    LODWORD(v26) = [v27 isFromBlockList];
    if ((_DWORD)v26) {
      goto LABEL_32;
    }
  }

  int64_t v19 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v19 >= v28) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v29 + 8 * v19);
    ++v8;
    if (!v20)
    {
      int64_t v8 = v12 + 2;
      if (v12 + 2 >= v28) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v29 + 8 * v8);
      if (!v20)
      {
        int64_t v8 = v12 + 3;
        if (v12 + 3 >= v28) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v29 + 8 * v8);
        if (!v20)
        {
          int64_t v8 = v12 + 4;
          if (v12 + 4 >= v28) {
            goto LABEL_32;
          }
          unint64_t v20 = *(void *)(v29 + 8 * v8);
          if (!v20)
          {
            int64_t v21 = v12 + 5;
            while (v21 < v28)
            {
              unint64_t v20 = *(void *)(v29 + 8 * v21++);
              if (v20)
              {
                int64_t v8 = v21 - 1;
                goto LABEL_27;
              }
            }

uint64_t type metadata accessor for BlocklistUtilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDBlocklistUtilities);
}

  ;
}

uint64_t sub_10026FE38(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v12 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v12);
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    id v7 = (void *)a2[1];
    int64_t v8 = (void *)a2[2];
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
    uint64_t v9 = a2[5];
    id v10 = v7;
    id v11 = v8;
    if (v9 == 1)
    {
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v4 + 33) = *(_OWORD *)((char *)a2 + 33);
    }

    else
    {
      *(_BYTE *)(v4 + 24) = *((_BYTE *)a2 + 24);
      *(_DWORD *)(v4 + 28) = *((_DWORD *)a2 + 7);
      *(void *)(v4 + 32) = a2[4];
      *(void *)(v4 + 40) = v9;
      *(_BYTE *)(v4 + 48) = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain(v9);
    }

    *(_BYTE *)(v4 + 49) = *((_BYTE *)a2 + 49);
    *(_DWORD *)(v4 + 50) = *(_DWORD *)((char *)a2 + 50);
    *(_BYTE *)(v4 + 54) = *((_BYTE *)a2 + 54);
    *(_WORD *)(v4 + 55) = *(_WORD *)((char *)a2 + 55);
    *(void *)(v4 + 64) = a2[8];
    *(_OWORD *)__dsta = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(v4 + 72) = *(_OWORD *)__dsta;
    *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 13);
    *(_BYTE *)(v4 + 120) = *((_BYTE *)a2 + 120);
    uint64_t v13 = a2[16];
    uint64_t v14 = a2[17];
    *(_WORD *)(v4 + 144) = *((_WORD *)a2 + 72);
    *(_DWORD *)(v4 + 148) = *((_DWORD *)a2 + 37);
    *(_BYTE *)(v4 + 152) = *((_BYTE *)a2 + 152);
    uint64_t v15 = a3[5];
    uint64_t v16 = (void *)(v4 + v15);
    uint64_t v17 = (char *)a2 + v15;
    *(void *)(v4 + 128) = v13;
    *(void *)(v4 + 136) = v14;
    uint64_t v18 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
    swift_unknownObjectRetain(__dsta[0]);
    swift_bridgeObjectRetain(v14);
    if (sub_1001AB0AC((uint64_t)v17, 1LL, v18))
    {
      uint64_t v19 = sub_1001AFF14(&qword_100447488);
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v20 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v16, v17, v20);
      sub_1001A9670((uint64_t)v16, 0LL, 1LL, v18);
    }

    uint64_t v21 = a3[6];
    NSString v22 = (void *)(v4 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = (int *)type metadata accessor for RingtoneDescriptor(0LL);
    if (sub_1001AB0AC((uint64_t)v23, 1LL, (uint64_t)v24))
    {
      uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
      memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v26 = v23[1];
      *NSString v22 = *v23;
      v22[1] = v26;
      uint64_t v27 = v24[5];
      int64_t v28 = (char *)v22 + v27;
      uint64_t v29 = (char *)v23 + v27;
      uint64_t v30 = type metadata accessor for URL(0LL);
      swift_bridgeObjectRetain(v26);
      if (sub_1001AB0AC((uint64_t)v29, 1LL, v30))
      {
        uint64_t v31 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
        memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
        sub_1001A9670((uint64_t)v28, 0LL, 1LL, v30);
      }

      uint64_t v32 = v24[6];
      uint64_t v33 = (void *)((char *)v22 + v32);
      uint64_t v34 = (void *)((char *)v23 + v32);
      uint64_t v35 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v35;
      *((_BYTE *)v22 + v24[7]) = *((_BYTE *)v23 + v24[7]);
      swift_bridgeObjectRetain(v35);
      sub_1001A9670((uint64_t)v22, 0LL, 1LL, (uint64_t)v24);
    }

    uint64_t v36 = a3[7];
    uint64_t v37 = (void *)(v4 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = sub_1001AFF14(&qword_100447FC0);
    if (sub_1001AB0AC((uint64_t)v38, 2LL, v39))
    {
      uint64_t v40 = type metadata accessor for SoundDescriptorAction(0LL);
      memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      unint64_t v41 = (void *)v38[1];
      *uint64_t v37 = *v38;
      v37[1] = v41;
      *((_BYTE *)v37 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)v38 + 16);
      v37[3] = v38[3];
      uint64_t v42 = type metadata accessor for SoundDescriptor(0LL);
      uint64_t v43 = *(int *)(v42 + 32);
      __dst = (char *)v37 + v43;
      uint64_t v44 = (char *)v38 + v43;
      uint64_t v45 = type metadata accessor for UUID(0LL);
      id v46 = v41;
      if (sub_1001AB0AC((uint64_t)v44, 1LL, v45))
      {
        uint64_t v47 = sub_1001AFF14((uint64_t *)&unk_10044A400);
        memcpy(__dst, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL))(__dst, v44, v45);
        sub_1001A9670((uint64_t)__dst, 0LL, 1LL, v45);
      }

      *((_BYTE *)v37 + *(int *)(v42 + 36)) = *((_BYTE *)v38 + *(int *)(v42 + 36));
      sub_1001A9670((uint64_t)v37, 0LL, 2LL, v39);
    }

    uint64_t v48 = a3[9];
    *(_BYTE *)(v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(_BYTE *)(v4 + v48) = *((_BYTE *)a2 + v48);
  }

  return v4;
}

uint64_t sub_10027026C(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != 1) {
    swift_bridgeObjectRelease(v4);
  }
  swift_unknownObjectRelease(*(void *)(a1 + 72));
  swift_bridgeObjectRelease(*(void *)(a1 + 136));
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  if (!sub_1001AB0AC(v5, 1LL, v6))
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v5, v7);
  }

  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = type metadata accessor for RingtoneDescriptor(0LL);
  if (!sub_1001AB0AC(v8, 1LL, v9))
  {
    swift_bridgeObjectRelease(*(void *)(v8 + 8));
    uint64_t v10 = v8 + *(int *)(v9 + 20);
    uint64_t v11 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v9 + 24) + 8));
  }

  uint64_t v12 = a1 + a2[7];
  uint64_t v13 = sub_1001AFF14(&qword_100447FC0);
  uint64_t result = sub_1001AB0AC(v12, 2LL, v13);
  if (!(_DWORD)result)
  {

    uint64_t v15 = v12 + *(int *)(type metadata accessor for SoundDescriptor(0LL) + 32);
    uint64_t v16 = type metadata accessor for UUID(0LL);
    uint64_t result = sub_1001AB0AC(v15, 1LL, v16);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
    }
  }

  return result;
}

uint64_t sub_10027040C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  id v9 = v6;
  id v10 = v7;
  if (v8 == 1)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }

  else
  {
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    swift_bridgeObjectRetain(v8);
  }

  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a2 + 50);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_WORD *)(a1 + 55) = *(_WORD *)(a2 + 55);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)__dsta = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)__dsta;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  uint64_t v13 = a3[5];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 136) = v12;
  uint64_t v16 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  swift_unknownObjectRetain(__dsta[0]);
  swift_bridgeObjectRetain(v12);
  if (sub_1001AB0AC((uint64_t)v15, 1LL, v16))
  {
    uint64_t v17 = sub_1001AFF14(&qword_100447488);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v14, v15, v18);
    sub_1001A9670((uint64_t)v14, 0LL, 1LL, v16);
  }

  uint64_t v19 = a3[6];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  NSString v22 = (int *)type metadata accessor for RingtoneDescriptor(0LL);
  if (sub_1001AB0AC((uint64_t)v21, 1LL, (uint64_t)v22))
  {
    uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
    memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v24 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v24;
    uint64_t v25 = v22[5];
    uint64_t v26 = (char *)v20 + v25;
    uint64_t v27 = (char *)v21 + v25;
    uint64_t v28 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain(v24);
    if (sub_1001AB0AC((uint64_t)v27, 1LL, v28))
    {
      uint64_t v29 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
      sub_1001A9670((uint64_t)v26, 0LL, 1LL, v28);
    }

    uint64_t v30 = v22[6];
    uint64_t v31 = (void *)((char *)v20 + v30);
    uint64_t v32 = (void *)((char *)v21 + v30);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    *((_BYTE *)v20 + v22[7]) = *((_BYTE *)v21 + v22[7]);
    swift_bridgeObjectRetain(v33);
    sub_1001A9670((uint64_t)v20, 0LL, 1LL, (uint64_t)v22);
  }

  uint64_t v34 = a3[7];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = sub_1001AFF14(&qword_100447FC0);
  if (sub_1001AB0AC((uint64_t)v36, 2LL, v37))
  {
    uint64_t v38 = type metadata accessor for SoundDescriptorAction(0LL);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    uint64_t v39 = (void *)v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v39;
    *((_BYTE *)v35 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)v36 + 16);
    void v35[3] = v36[3];
    uint64_t v40 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v41 = *(int *)(v40 + 32);
    __dst = (char *)v35 + v41;
    uint64_t v42 = (char *)v36 + v41;
    uint64_t v43 = type metadata accessor for UUID(0LL);
    id v44 = v39;
    if (sub_1001AB0AC((uint64_t)v42, 1LL, v43))
    {
      uint64_t v45 = sub_1001AFF14((uint64_t *)&unk_10044A400);
      memcpy(__dst, v42, *(void *)(*(void *)(v45 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16LL))(__dst, v42, v43);
      sub_1001A9670((uint64_t)__dst, 0LL, 1LL, v43);
    }

    *((_BYTE *)v35 + *(int *)(v40 + 36)) = *((_BYTE *)v36 + *(int *)(v40 + 36));
    sub_1001A9670((uint64_t)v35, 0LL, 2LL, v37);
  }

  uint64_t v46 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v46) = *(_BYTE *)(a2 + v46);
  return a1;
}

uint64_t sub_100270814(uint64_t a1, int *a2, int *a3)
{
  int v6 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v6;
  uint64_t v7 = (void *)*((void *)a2 + 1);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a1 + 16);
  uint64_t v11 = (void *)*((void *)a2 + 2);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  id v12 = v11;

  uint64_t v13 = (__int128 *)(a1 + 24);
  uint64_t v14 = (__int128 *)(a2 + 6);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *((void *)a2 + 5);
  if (v15 == 1)
  {
    if (v16 == 1)
    {
      __int128 v17 = *v14;
      *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)a2 + 33);
      __int128 *v13 = v17;
    }

    else
    {
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_DWORD *)(a1 + 28) = a2[7];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      uint64_t v19 = *((void *)a2 + 5);
      *(void *)(a1 + 40) = v19;
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain(v19);
    }
  }

  else if (v16 == 1)
  {
    sub_100270FCC(a1 + 24);
    __int128 v18 = *(_OWORD *)((char *)a2 + 33);
    __int128 *v13 = *v14;
    *(_OWORD *)(a1 + 33) = v18;
  }

  else
  {
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_DWORD *)(a1 + 28) = a2[7];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    uint64_t v20 = *((void *)a2 + 5);
    *(void *)(a1 + 40) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v15);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  }

  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_BYTE *)(a1 + 50) = *((_BYTE *)a2 + 50);
  *(_BYTE *)(a1 + 51) = *((_BYTE *)a2 + 51);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_BYTE *)(a1 + 53) = *((_BYTE *)a2 + 53);
  *(_BYTE *)(a1 + 54) = *((_BYTE *)a2 + 54);
  *(_BYTE *)(a1 + 55) = *((_BYTE *)a2 + 55);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  uint64_t v21 = *((void *)a2 + 9);
  uint64_t v22 = *((void *)a2 + 10);
  uint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v21;
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v23);
  *(void *)(a1 + 80) = v22;
  __int128 v24 = *(_OWORD *)(a2 + 22);
  __int128 v25 = *(_OWORD *)(a2 + 26);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v25;
  *(_OWORD *)(a1 + 88) = v24;
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  uint64_t v26 = *((void *)a2 + 17);
  uint64_t v27 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_BYTE *)(a1 + 145) = *((_BYTE *)a2 + 145);
  int v28 = a2[37];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_DWORD *)(a1 + 148) = v28;
  uint64_t v29 = a3[5];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  int v33 = sub_1001AB0AC((uint64_t)v30, 1LL, v32);
  int v34 = sub_1001AB0AC((uint64_t)v31, 1LL, v32);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v35 - 8) + 16LL))(v30, v31, v35);
      sub_1001A9670((uint64_t)v30, 0LL, 1LL, v32);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (v34)
  {
    sub_10020E8B0((uint64_t)v30, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
LABEL_13:
    uint64_t v36 = sub_1001AFF14(&qword_100447488);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_14;
  }

  uint64_t v50 = type metadata accessor for UUID(0LL);
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v50 - 8) + 24LL))(v30, v31, v50);
LABEL_14:
  uint64_t v37 = a3[6];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for RingtoneDescriptor(0LL);
  int v41 = sub_1001AB0AC((uint64_t)v38, 1LL, (uint64_t)v40);
  int v42 = sub_1001AB0AC((uint64_t)v39, 1LL, (uint64_t)v40);
  if (!v41)
  {
    if (v42)
    {
      sub_10020E8B0((uint64_t)v38, type metadata accessor for RingtoneDescriptor);
      goto LABEL_20;
    }

    void *v38 = *v39;
    uint64_t v51 = v39[1];
    uint64_t v52 = v38[1];
    v38[1] = v51;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRelease(v52);
    uint64_t v53 = v40[5];
    uint64_t v54 = (char *)v38 + v53;
    uint64_t v55 = (char *)v39 + v53;
    uint64_t v56 = type metadata accessor for URL(0LL);
    int v57 = sub_1001AB0AC((uint64_t)v54, 1LL, v56);
    int v58 = sub_1001AB0AC((uint64_t)v55, 1LL, v56);
    if (v57)
    {
      if (!v58)
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16LL))(v54, v55, v56);
        sub_1001A9670((uint64_t)v54, 0LL, 1LL, v56);
LABEL_30:
        uint64_t v65 = v40[6];
        unint64_t v66 = (void *)((char *)v38 + v65);
        id v67 = (void *)((char *)v39 + v65);
        *unint64_t v66 = *v67;
        uint64_t v68 = v67[1];
        uint64_t v69 = v66[1];
        v66[1] = v68;
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRelease(v69);
        *((_BYTE *)v38 + v40[7]) = *((_BYTE *)v39 + v40[7]);
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v63 = *(void *)(v56 - 8);
      if (!v58)
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 24))(v54, v55, v56);
        goto LABEL_30;
      }

      (*(void (**)(char *, uint64_t))(v63 + 8))(v54, v56);
    }

    uint64_t v64 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v54, v55, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_30;
  }

  if (v42)
  {
LABEL_20:
    uint64_t v49 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
    memcpy(v38, v39, *(void *)(*(void *)(v49 - 8) + 64LL));
    goto LABEL_31;
  }

  void *v38 = *v39;
  uint64_t v43 = v39[1];
  v38[1] = v43;
  uint64_t v44 = v40[5];
  uint64_t v45 = (char *)v38 + v44;
  uint64_t v46 = (char *)v39 + v44;
  uint64_t v47 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain(v43);
  if (sub_1001AB0AC((uint64_t)v46, 1LL, v47))
  {
    uint64_t v48 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16LL))(v45, v46, v47);
    sub_1001A9670((uint64_t)v45, 0LL, 1LL, v47);
  }

  uint64_t v59 = v40[6];
  uint64_t v60 = (void *)((char *)v38 + v59);
  uint64_t v61 = (void *)((char *)v39 + v59);
  void *v60 = *v61;
  uint64_t v62 = v61[1];
  v60[1] = v62;
  *((_BYTE *)v38 + v40[7]) = *((_BYTE *)v39 + v40[7]);
  swift_bridgeObjectRetain(v62);
  sub_1001A9670((uint64_t)v38, 0LL, 1LL, (uint64_t)v40);
LABEL_31:
  uint64_t v70 = a3[7];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = (uint64_t)a2 + v70;
  uint64_t v73 = sub_1001AFF14(&qword_100447FC0);
  int v74 = sub_1001AB0AC(v71, 2LL, v73);
  int v75 = sub_1001AB0AC(v72, 2LL, v73);
  if (!v74)
  {
    if (v75)
    {
      sub_1002011C8(v71, &qword_100447FC0);
      goto LABEL_37;
    }

    *(void *)uint64_t v71 = *(void *)v72;
    uint64_t v85 = *(void **)(v72 + 8);
    uint64_t v86 = *(void **)(v71 + 8);
    *(void *)(v71 + 8) = v85;
    id v87 = v85;

    *(_BYTE *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(v72 + 16);
    *(void *)(v71 + 24) = *(void *)(v72 + 24);
    uint64_t v88 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v89 = *(int *)(v88 + 32);
    id v90 = (void *)(v71 + v89);
    uint64_t v91 = (const void *)(v72 + v89);
    uint64_t v92 = type metadata accessor for UUID(0LL);
    int v93 = sub_1001AB0AC((uint64_t)v90, 1LL, v92);
    int v94 = sub_1001AB0AC((uint64_t)v91, 1LL, v92);
    if (v93)
    {
      if (!v94)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v92 - 8) + 16LL))(v90, v91, v92);
        sub_1001A9670((uint64_t)v90, 0LL, 1LL, v92);
LABEL_46:
        *(_BYTE *)(v71 + *(int *)(v88 + 36)) = *(_BYTE *)(v72 + *(int *)(v88 + 36));
        goto LABEL_47;
      }
    }

    else
    {
      uint64_t v95 = *(void *)(v92 - 8);
      if (!v94)
      {
        (*(void (**)(void *, const void *, uint64_t))(v95 + 24))(v90, v91, v92);
        goto LABEL_46;
      }

      (*(void (**)(void *, uint64_t))(v95 + 8))(v90, v92);
    }

    uint64_t v96 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v90, v91, *(void *)(*(void *)(v96 - 8) + 64LL));
    goto LABEL_46;
  }

  if (v75)
  {
LABEL_37:
    uint64_t v84 = type metadata accessor for SoundDescriptorAction(0LL);
    memcpy((void *)v71, (const void *)v72, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_47;
  }

  id v98 = a3;
  *(void *)uint64_t v71 = *(void *)v72;
  uint64_t v76 = *(void **)(v72 + 8);
  *(void *)(v71 + 8) = v76;
  *(_BYTE *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(v72 + 16);
  *(void *)(v71 + 24) = *(void *)(v72 + 24);
  uint64_t v77 = type metadata accessor for SoundDescriptor(0LL);
  uint64_t v78 = *(int *)(v77 + 32);
  id v79 = (void *)(v71 + v78);
  uint64_t v80 = (const void *)(v72 + v78);
  uint64_t v81 = type metadata accessor for UUID(0LL);
  id v82 = v76;
  if (sub_1001AB0AC((uint64_t)v80, 1LL, v81))
  {
    uint64_t v83 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v81 - 8) + 16LL))(v79, v80, v81);
    sub_1001A9670((uint64_t)v79, 0LL, 1LL, v81);
  }

  a3 = v98;
  *(_BYTE *)(v71 + *(int *)(v77 + 36)) = *(_BYTE *)(v72 + *(int *)(v77 + 36));
  sub_1001A9670(v71, 0LL, 2LL, v73);
LABEL_47:
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100270FCC(uint64_t a1)
{
  return a1;
}

char *sub_100271000(char *a1, char *a2, int *a3)
{
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  if (sub_1001AB0AC((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_1001AFF14(&qword_100447488);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v7, v8, v11);
    sub_1001A9670((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = (int *)type metadata accessor for RingtoneDescriptor(0LL);
  if (sub_1001AB0AC((uint64_t)v14, 1LL, (uint64_t)v15))
  {
    uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    uint64_t v17 = v15[5];
    __int128 v18 = &v13[v17];
    uint64_t v19 = &v14[v17];
    uint64_t v20 = type metadata accessor for URL(0LL);
    if (sub_1001AB0AC((uint64_t)v19, 1LL, v20))
    {
      uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v18, v19, v20);
      sub_1001A9670((uint64_t)v18, 0LL, 1LL, v20);
    }

    *(_OWORD *)&v13[v15[6]] = *(_OWORD *)&v14[v15[6]];
    v13[v15[7]] = v14[v15[7]];
    sub_1001A9670((uint64_t)v13, 0LL, 1LL, (uint64_t)v15);
  }

  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  __int128 v24 = &a2[v22];
  uint64_t v25 = sub_1001AFF14(&qword_100447FC0);
  if (sub_1001AB0AC((uint64_t)v24, 2LL, v25))
  {
    uint64_t v26 = type metadata accessor for SoundDescriptorAction(0LL);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    uint64_t v27 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v27;
    v23[16] = v24[16];
    *((void *)v23 + 3) = *((void *)v24 + 3);
    uint64_t v28 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v29 = *(int *)(v28 + 32);
    uint64_t v30 = &v23[v29];
    uint64_t v31 = &v24[v29];
    uint64_t v32 = type metadata accessor for UUID(0LL);
    if (sub_1001AB0AC((uint64_t)v31, 1LL, v32))
    {
      uint64_t v33 = sub_1001AFF14((uint64_t *)&unk_10044A400);
      memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
      sub_1001A9670((uint64_t)v30, 0LL, 1LL, v32);
    }

    v23[*(int *)(v28 + 36)] = v24[*(int *)(v28 + 36)];
    sub_1001A9670((uint64_t)v23, 0LL, 2LL, v25);
  }

  uint64_t v34 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v34] = a2[v34];
  return a1;
}

uint64_t sub_1002712F8(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 == 1) {
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9 == 1)
  {
    sub_100270FCC(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    goto LABEL_6;
  }

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
LABEL_6:
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 55);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_unknownObjectRelease(v12);
  *(void *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 136);
  uint64_t v14 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  uint64_t v15 = a3[5];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  int v19 = sub_1001AB0AC((uint64_t)v16, 1LL, v18);
  int v20 = sub_1001AB0AC((uint64_t)v17, 1LL, v18);
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v16, v17, v21);
      sub_1001A9670((uint64_t)v16, 0LL, 1LL, v18);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  if (v20)
  {
    sub_10020E8B0((uint64_t)v16, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
LABEL_11:
    uint64_t v22 = sub_1001AFF14(&qword_100447488);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_12;
  }

  uint64_t v35 = type metadata accessor for UUID(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v35 - 8) + 40LL))(v16, v17, v35);
LABEL_12:
  uint64_t v23 = a3[6];
  __int128 v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = (int *)type metadata accessor for RingtoneDescriptor(0LL);
  int v27 = sub_1001AB0AC((uint64_t)v24, 1LL, (uint64_t)v26);
  int v28 = sub_1001AB0AC((uint64_t)v25, 1LL, (uint64_t)v26);
  if (!v27)
  {
    if (v28)
    {
      sub_10020E8B0((uint64_t)v24, type metadata accessor for RingtoneDescriptor);
      goto LABEL_18;
    }

    uint64_t v36 = v25[1];
    uint64_t v37 = v24[1];
    *__int128 v24 = *v25;
    v24[1] = v36;
    swift_bridgeObjectRelease(v37);
    uint64_t v38 = v26[5];
    uint64_t v39 = (char *)v24 + v38;
    uint64_t v40 = (char *)v25 + v38;
    uint64_t v41 = type metadata accessor for URL(0LL);
    int v42 = sub_1001AB0AC((uint64_t)v39, 1LL, v41);
    int v43 = sub_1001AB0AC((uint64_t)v40, 1LL, v41);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32LL))(v39, v40, v41);
        sub_1001A9670((uint64_t)v39, 0LL, 1LL, v41);
LABEL_28:
        uint64_t v46 = v26[6];
        uint64_t v47 = (void *)((char *)v24 + v46);
        uint64_t v48 = (void *)((char *)v25 + v46);
        uint64_t v50 = *v48;
        uint64_t v49 = v48[1];
        uint64_t v51 = v47[1];
        *uint64_t v47 = v50;
        v47[1] = v49;
        swift_bridgeObjectRelease(v51);
        *((_BYTE *)v24 + v26[7]) = *((_BYTE *)v25 + v26[7]);
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v44 = *(void *)(v41 - 8);
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 40))(v39, v40, v41);
        goto LABEL_28;
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v41);
    }

    uint64_t v45 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v39, v40, *(void *)(*(void *)(v45 - 8) + 64LL));
    goto LABEL_28;
  }

  if (v28)
  {
LABEL_18:
    uint64_t v34 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
    memcpy(v24, v25, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_29;
  }

  *(_OWORD *)__int128 v24 = *(_OWORD *)v25;
  uint64_t v29 = v26[5];
  uint64_t v30 = (char *)v24 + v29;
  uint64_t v31 = (char *)v25 + v29;
  uint64_t v32 = type metadata accessor for URL(0LL);
  if (sub_1001AB0AC((uint64_t)v31, 1LL, v32))
  {
    uint64_t v33 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
    sub_1001A9670((uint64_t)v30, 0LL, 1LL, v32);
  }

  *(_OWORD *)((char *)v24 + v26[6]) = *(_OWORD *)((char *)v25 + v26[6]);
  *((_BYTE *)v24 + v26[7]) = *((_BYTE *)v25 + v26[7]);
  sub_1001A9670((uint64_t)v24, 0LL, 1LL, (uint64_t)v26);
LABEL_29:
  uint64_t v52 = a3[7];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  uint64_t v55 = sub_1001AFF14(&qword_100447FC0);
  int v56 = sub_1001AB0AC(v53, 2LL, v55);
  int v57 = sub_1001AB0AC(v54, 2LL, v55);
  if (!v56)
  {
    if (v57)
    {
      sub_1002011C8(v53, &qword_100447FC0);
      goto LABEL_35;
    }

    uint64_t v66 = *(void *)(v54 + 8);
    id v67 = *(void **)(v53 + 8);
    *(void *)uint64_t v53 = *(void *)v54;
    *(void *)(v53 + 8) = v66;

    *(_BYTE *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(v54 + 16);
    *(void *)(v53 + 24) = *(void *)(v54 + 24);
    uint64_t v68 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v69 = *(int *)(v68 + 32);
    uint64_t v70 = (void *)(v53 + v69);
    uint64_t v71 = (const void *)(v54 + v69);
    uint64_t v72 = type metadata accessor for UUID(0LL);
    int v73 = sub_1001AB0AC((uint64_t)v70, 1LL, v72);
    int v74 = sub_1001AB0AC((uint64_t)v71, 1LL, v72);
    if (v73)
    {
      if (!v74)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v72 - 8) + 32LL))(v70, v71, v72);
        sub_1001A9670((uint64_t)v70, 0LL, 1LL, v72);
LABEL_44:
        *(_BYTE *)(v53 + *(int *)(v68 + 36)) = *(_BYTE *)(v54 + *(int *)(v68 + 36));
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v75 = *(void *)(v72 - 8);
      if (!v74)
      {
        (*(void (**)(void *, const void *, uint64_t))(v75 + 40))(v70, v71, v72);
        goto LABEL_44;
      }

      (*(void (**)(void *, uint64_t))(v75 + 8))(v70, v72);
    }

    uint64_t v76 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v70, v71, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_44;
  }

  if (v57)
  {
LABEL_35:
    uint64_t v65 = type metadata accessor for SoundDescriptorAction(0LL);
    memcpy((void *)v53, (const void *)v54, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_45;
  }

  uint64_t v58 = *(void *)(v54 + 8);
  *(void *)uint64_t v53 = *(void *)v54;
  *(void *)(v53 + 8) = v58;
  *(_BYTE *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(v54 + 16);
  *(void *)(v53 + 24) = *(void *)(v54 + 24);
  uint64_t v59 = type metadata accessor for SoundDescriptor(0LL);
  uint64_t v60 = *(int *)(v59 + 32);
  uint64_t v61 = (void *)(v53 + v60);
  uint64_t v62 = (const void *)(v54 + v60);
  uint64_t v63 = type metadata accessor for UUID(0LL);
  if (sub_1001AB0AC((uint64_t)v62, 1LL, v63))
  {
    uint64_t v64 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v61, v62, *(void *)(*(void *)(v64 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v63 - 8) + 32LL))(v61, v62, v63);
    sub_1001A9670((uint64_t)v61, 0LL, 1LL, v63);
  }

  *(_BYTE *)(v53 + *(int *)(v59 + 36)) = *(_BYTE *)(v54 + *(int *)(v59 + 36));
  sub_1001A9670(v53, 0LL, 2LL, v55);
LABEL_45:
  uint64_t v77 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v77) = *(_BYTE *)(a2 + v77);
  return a1;
}

uint64_t sub_1002719C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002719CC);
}

uint64_t sub_1002719CC(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1001AFF14(&qword_100447488);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a3[5];
    }

    else
    {
      uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
      if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == (_DWORD)a2)
      {
        uint64_t v9 = v11;
        uint64_t v10 = a3[6];
      }

      else
      {
        uint64_t v9 = sub_1002728B8();
        uint64_t v10 = a3[7];
      }
    }

    return sub_1001AB0AC(a1 + v10, a2, v9);
  }

uint64_t sub_100271A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100271A98);
}

uint64_t sub_100271A98(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_1001AFF14(&qword_100447488);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a4[5];
    }

    else
    {
      uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
      if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
      {
        uint64_t v9 = v11;
        uint64_t v10 = a4[6];
      }

      else
      {
        uint64_t v9 = sub_1002728B8();
        uint64_t v10 = a4[7];
      }
    }

    return sub_1001A9670(v5 + v10, a2, a2, v9);
  }

  return result;
}

uint64_t type metadata accessor for AudioDescriptor(uint64_t a1)
{
  uint64_t result = qword_10044B190;
  if (!qword_10044B190) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudioDescriptor);
  }
  return result;
}

void sub_100271B8C(uint64_t a1)
{
  v8[0] = &unk_10037E738;
  sub_100271C68(319LL, &qword_10044B1A0, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    sub_100271C68(319LL, (unint64_t *)&unk_10044B1A8, type metadata accessor for RingtoneDescriptor);
    if (v5 <= 0x3F)
    {
      uint64_t v8[2] = *(void *)(v4 - 8) + 64LL;
      uint64_t v6 = type metadata accessor for SoundDescriptorAction(319LL);
      if (v7 <= 0x3F)
      {
        void v8[3] = *(void *)(v6 - 8) + 64LL;
        v8[4] = (char *)&value witness table for Builtin.Int8 + 64;
        void v8[5] = (char *)&value witness table for Builtin.Int8 + 64;
        swift_initStructMetadata(a1, 256LL, 6LL, v8, a1 + 16);
      }
    }
  }

void sub_100271C68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100271CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = type metadata accessor for RingtoneDescriptor(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v4);
  sub_1001D9040();
  uint64_t v82 = v5;
  sub_1001AFF14((uint64_t *)&unk_10044B7B0);
  sub_1001B0E88();
  __chkstk_darwin(v6);
  sub_1001D9040();
  uint64_t v83 = v7;
  uint64_t v85 = sub_1001AFF14(&qword_10044B1E8);
  sub_1001B0E88();
  __chkstk_darwin(v8);
  sub_1001D9040();
  uint64_t v90 = v9;
  uint64_t v89 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v10);
  sub_1001D9040();
  uint64_t v84 = v11;
  sub_1001AFF14(&qword_100447488);
  sub_1001B0E88();
  __chkstk_darwin(v12);
  sub_1001D9040();
  uint64_t v87 = v13;
  uint64_t v88 = sub_1001AFF14(&qword_10044B1F0);
  sub_1001B0E88();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = (int *)type metadata accessor for AudioDescriptor(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v17);
  uint64_t v97 = (uint64_t)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BB5CC();
  __chkstk_darwin(v19);
  sub_10022D1EC();
  uint64_t v96 = v20;
  sub_1001BB5CC();
  __chkstk_darwin(v21);
  sub_10022D1EC();
  uint64_t v95 = v22;
  sub_1001BB5CC();
  __chkstk_darwin(v23);
  sub_10022D1EC();
  uint64_t v94 = v24;
  sub_1001BB5CC();
  __chkstk_darwin(v25);
  sub_10022D1EC();
  uint64_t v92 = v26;
  sub_1001BB5CC();
  __chkstk_darwin(v27);
  sub_10022D1EC();
  uint64_t v93 = v28;
  sub_1001BB5CC();
  __chkstk_darwin(v29);
  sub_10022D1EC();
  uint64_t v98 = v30;
  sub_1001BB5CC();
  __chkstk_darwin(v31);
  sub_10022D1EC();
  uint64_t v99 = v32;
  sub_1001BB5CC();
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v81 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v81 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  int v42 = (char *)&v81 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v81 - v43;
  sub_1002727FC(a1, (uint64_t)&v81 - v43);
  sub_1002727FC(a2, (uint64_t)v42);
  sub_1001DEA74(v102, v44);
  sub_1001DEA74(v103, v42);
  char v45 = sub_1002956A4((uint64_t)v102, (uint64_t)v103);
  sub_1002727F4((uint64_t)v44);
  sub_1002727F4((uint64_t)v42);
  uint64_t v100 = a1;
  sub_1002727FC(a1, (uint64_t)v39);
  uint64_t v101 = a2;
  sub_1002727FC(a2, (uint64_t)v36);
  if ((v45 & 1) == 0)
  {
    sub_1002727F4((uint64_t)v36);
    sub_1002727F4((uint64_t)v39);
    uint64_t v54 = v93;
    uint64_t v53 = v94;
    uint64_t v55 = v92;
    uint64_t v49 = v98;
    uint64_t v51 = v99;
LABEL_11:
    sub_1002727FC(v100, v51);
    sub_1002727FC(v101, v49);
    uint64_t v52 = v95;
LABEL_12:
    sub_1002727F4(v49);
    sub_1002727F4(v51);
LABEL_13:
    sub_1002727FC(v100, v54);
    sub_1002727FC(v101, v55);
LABEL_14:
    sub_1002727F4(v55);
    sub_1002727F4(v54);
    sub_1002727FC(v100, v53);
    sub_1002727FC(v101, v52);
    goto LABEL_15;
  }

  uint64_t v46 = (uint64_t)&v16[*(int *)(v88 + 48)];
  sub_1002728AC((uint64_t)&v39[v91[5]]);
  sub_100272854();
  if (sub_1001AB0AC((uint64_t)v16, 1LL, v89) == 1)
  {
    sub_100272814((uint64_t)v36);
    sub_100272814((uint64_t)v39);
    uint64_t v47 = sub_10027282C();
    uint64_t v48 = v90;
    uint64_t v49 = v98;
    if (!v50) {
      goto LABEL_10;
    }
    sub_100272890(v47, &qword_100447488);
    uint64_t v51 = v99;
    sub_1002727FC(v100, v99);
    sub_1002727FC(v101, v49);
    uint64_t v53 = v94;
    uint64_t v52 = v95;
    uint64_t v55 = v92;
    uint64_t v54 = v93;
  }

  else
  {
    uint64_t v56 = v87;
    sub_1001B03C0((uint64_t)v16, v87, &qword_100447488);
    sub_10027282C();
    uint64_t v48 = v90;
    if (v50)
    {
      sub_1002727F4((uint64_t)v36);
      sub_1002727F4((uint64_t)v39);
      sub_10020E8B0(v56, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
      uint64_t v49 = v98;
LABEL_10:
      sub_100272890(v47, &qword_10044B1F0);
      uint64_t v54 = v93;
      uint64_t v53 = v94;
      uint64_t v55 = v92;
      uint64_t v51 = v99;
      goto LABEL_11;
    }

    uint64_t v60 = v84;
    sub_1001B0338(v46, v84, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
    char v61 = static UUID.== infix(_:_:)(v56, v60);
    sub_100272814(v60);
    sub_10020E8B0((uint64_t)v36, type metadata accessor for AudioDescriptor);
    sub_10020E8B0((uint64_t)v39, type metadata accessor for AudioDescriptor);
    sub_100272814(v56);
    sub_100272890(v62, &qword_100447488);
    uint64_t v51 = v99;
    sub_1001B036C(v100, v99, type metadata accessor for AudioDescriptor);
    uint64_t v49 = v98;
    sub_1001B036C(v101, v98, type metadata accessor for AudioDescriptor);
    uint64_t v53 = v94;
    uint64_t v52 = v95;
    uint64_t v55 = v92;
    uint64_t v54 = v93;
    if ((v61 & 1) == 0) {
      goto LABEL_12;
    }
  }

  uint64_t v63 = v48 + *(int *)(v85 + 48);
  sub_1002728AC(v51 + v91[6]);
  sub_100272854();
  uint64_t v64 = v86;
  if (sub_1001AB0AC(v48, 1LL, v86) == 1)
  {
    sub_100272814(v49);
    sub_100272814(v99);
    uint64_t v65 = sub_10027282C();
    if (!v50) {
      goto LABEL_26;
    }
    sub_100272898(v65, (uint64_t *)&unk_10044B7B0);
    sub_1002727FC(v100, v54);
    sub_1002727FC(v101, v55);
  }

  else
  {
    uint64_t v66 = v83;
    sub_1001B03C0(v48, v83, (uint64_t *)&unk_10044B7B0);
    if (sub_1001AB0AC(v63, 1LL, v64) == 1)
    {
      sub_1002727F4(v98);
      sub_1002727F4(v99);
      sub_10020E8B0(v66, type metadata accessor for RingtoneDescriptor);
LABEL_26:
      sub_100272898(v65, &qword_10044B1E8);
      goto LABEL_13;
    }

    uint64_t v67 = v63;
    uint64_t v68 = v82;
    sub_1001B0338(v67, v82, type metadata accessor for RingtoneDescriptor);
    char v69 = sub_1002741AC(v66, v68);
    sub_100272814(v68);
    sub_1002727F4(v98);
    sub_1002727F4(v99);
    sub_100272814(v66);
    sub_100272898(v70, (uint64_t *)&unk_10044B7B0);
    sub_1002727FC(v100, v54);
    sub_1002727FC(v101, v55);
    if ((v69 & 1) == 0) {
      goto LABEL_14;
    }
  }

  uint64_t v71 = v91;
  char v72 = sub_100208088(v54 + v91[7], v55 + v91[7]);
  sub_100272814(v55);
  sub_100272814(v54);
  sub_1001B036C(v100, v53, type metadata accessor for AudioDescriptor);
  sub_1001B036C(v101, v52, type metadata accessor for AudioDescriptor);
  if ((v72 & 1) != 0)
  {
    int v73 = v71;
    char v74 = *(_BYTE *)(v53 + v71[8]);
    sub_1002727F4(v53);
    char v75 = *(_BYTE *)(v52 + v73[8]);
    sub_1002727F4(v52);
    if ((v74 & 1) != 0)
    {
      if ((v75 & 1) == 0) {
        goto LABEL_16;
      }
    }

    else if ((v75 & 1) != 0)
    {
      goto LABEL_16;
    }

    uint64_t v76 = v96;
    sub_1002727FC(v100, v96);
    uint64_t v77 = v97;
    sub_1002727FC(v101, v97);
    uint64_t v78 = v91;
    char v79 = *(_BYTE *)(v76 + v91[9]);
    sub_1002727F4(v76);
    char v80 = *(_BYTE *)(v77 + v78[9]);
    sub_1002727F4(v77);
    if ((v79 & 1) != 0)
    {
      if ((v80 & 1) == 0) {
        return 0LL;
      }
    }

    else if ((v80 & 1) != 0)
    {
      return 0LL;
    }

    return 1LL;
  }

unint64_t sub_1002724D0()
{
  uint64_t v1 = 7104878LL;
  uint64_t v2 = sub_1002728B8();
  sub_1001B0E88();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v27 = 0xD000000000000010LL;
  unint64_t v28 = 0x80000001003753B0LL;
  uint64_t v29 = 0LL;
  unint64_t v30 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease(v30);
  v26._countAndFlagsBits = 0xD000000000000018LL;
  v26._object = (void *)0x80000001003753D0LL;
  sub_1001DEA74(&v29, v0);
  sub_1001DEA74(v25, v0);
  sub_1001DE884((uint64_t)&v29);
  v6._countAndFlagsBits = String.init<A>(reflecting:)(v25, &type metadata for AudioInterruptionDescriptor);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 32LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v9);
  sub_100272884();
  _StringGuts.grow(_:)(38LL);
  sub_10027284C();
  sub_10027281C(0xD000000000000023LL);
  uint64_t v10 = (int *)type metadata accessor for AudioDescriptor(0LL);
  sub_1001AEDA8((uint64_t)v0 + v10[5]);
  sub_1002728A0(v31);
  sub_1001B92A4();
  sub_100272804();
  sub_100272874();
  sub_1001B92A4();
  sub_100272884();
  _StringGuts.grow(_:)(23LL);
  sub_10027284C();
  sub_10027281C(0xD000000000000014LL);
  sub_1001AEDBC((uint64_t)v0 + v10[6]);
  sub_1002728A0(v32);
  sub_1001B92A4();
  sub_100272804();
  sub_100272874();
  sub_1001B92A4();
  sub_100272884();
  _StringGuts.grow(_:)(26LL);
  sub_10027284C();
  sub_10027281C(0xD000000000000017LL);
  sub_1001B036C((uint64_t)v0 + v10[7], (uint64_t)v5, type metadata accessor for SoundDescriptorAction);
  v11._countAndFlagsBits = String.init<A>(reflecting:)(v5, v2);
  String.append(_:)(v11);
  sub_1001B0F28();
  sub_100272804();
  sub_100272864();
  sub_1001B0F28();
  sub_100272884();
  _StringGuts.grow(_:)(24LL);
  sub_10027284C();
  sub_10027281C(0xD000000000000015LL);
  if ((*((_BYTE *)v0 + v10[8]) & 1) != 0)
  {
    unint64_t v13 = 0xE300000000000000LL;
    uint64_t v14 = 7104878LL;
  }

  else
  {
    uint64_t v14 = String.init<A>(reflecting:)(v12, &type metadata for HoldMusicDescriptor);
    unint64_t v13 = v15;
  }

  unint64_t v16 = v13;
  String.append(_:)(*(Swift::String *)&v14);
  sub_1001B0F28();
  sub_100272804();
  sub_100272864();
  sub_1001B0F28();
  sub_100272884();
  _StringGuts.grow(_:)(28LL);
  sub_10027284C();
  sub_10027281C(0xD000000000000019LL);
  if ((*((_BYTE *)v0 + v10[9]) & 1) != 0)
  {
    uint64_t v18 = (void *)0xE300000000000000LL;
  }

  else
  {
    uint64_t v1 = String.init<A>(reflecting:)(v17, &type metadata for DiscoveryModeDescriptor);
    uint64_t v18 = v19;
  }

  v20._countAndFlagsBits = v1;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v18);
  sub_100272804();
  uint64_t v21 = v25[0]._object;
  String.append(_:)(v25[0]);
  swift_bridgeObjectRelease(v21);
  v22._countAndFlagsBits = 41LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  return v27;
}

void sub_1002727F4(uint64_t a1)
{
}

void sub_1002727FC(uint64_t a1, uint64_t a2)
{
}

void sub_100272804()
{
  v0._countAndFlagsBits = 32LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

void sub_100272814(uint64_t a1)
{
}

void sub_10027281C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = (v1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_10027282C()
{
  return sub_1001AB0AC(v0, 1LL, v1);
}

uint64_t sub_10027284C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

void sub_100272854()
{
}

void sub_100272864()
{
}

void sub_100272874()
{
}

void sub_100272884()
{
  *(void *)(v0 + 8) = 0LL;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
}

void sub_100272890(uint64_t a1, uint64_t *a2)
{
}

void sub_100272898(uint64_t a1, uint64_t *a2)
{
}

void sub_1002728A0(Swift::String a1)
{
}

void sub_1002728AC(uint64_t a1)
{
}

uint64_t sub_1002728B8()
{
  return type metadata accessor for SoundDescriptorAction(0LL);
}

uint64_t sub_1002728C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      id v5 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      Swift::String v20 = v5;
      id v7 = [v5 uniqueIdentifier];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v10 = v9;

      id v11 = [a2 uniqueIdentifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      if (v8 == v12 && v10 == v14)
      {

        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v10);
LABEL_17:
        uint64_t v3 = (uint64_t)v20;
        swift_bridgeObjectRelease(v10);
        return v3;
      }

      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v12, v14, 0LL);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 1) != 0)
      {

        uint64_t v10 = a1;
        goto LABEL_17;
      }

      if (v6 == v3)
      {

        swift_bridgeObjectRelease(a1);
        return 0LL;
      }
    }

    __break(1u);
LABEL_19:
    if (a1 < 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_100272A94()
{
  uint64_t v1 = sub_1001B1098();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1001B0F00();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *(void *)(v4 - sub_10024772C(0LL, v2, v3) = v6;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v4 - v3,  enum case for DispatchPredicate.onQueue(_:),  v1);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0) {
    return swift_bridgeObjectRetain(*(void *)(v0
  }
                                              + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes));
  __break(1u);
  return result;
}

uint64_t sub_100272B50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

uint64_t sub_100272B70(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = *(void (**)(uint64_t))(v1
                                         + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler);
    if (v10)
    {
      uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler + 8);
      uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes);
      sub_1001B5D70((uint64_t)v10, v11);
      uint64_t v13 = swift_bridgeObjectRetain(v12);
      char v14 = sub_100283914(v13, a1);
      uint64_t v15 = swift_bridgeObjectRelease(v12);
      if ((v14 & 1) == 0) {
        v10(v15);
      }
      return sub_1001B5D3C((uint64_t)v10, v11);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100272C90(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes) = a1;
  sub_100272B70(v2);
  return swift_bridgeObjectRelease(v2);
}

id sub_100272CC4(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v4 = &v1[OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_routesDidChangeHandler];
  *(void *)uint64_t v4 = 0LL;
  *((void *)v4 + 1) = 0LL;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

void sub_100272D34(void *a1)
{
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *uint64_t v2 = v5;
  sub_1002737FC(v6, enum case for DispatchPredicate.onQueue(_:));
  id v7 = v5;
  _dispatchPreconditionTest(_:)(v2);
  sub_1002737E8();
  if ((v5 & 1) != 0)
  {
    if (qword_1004468F0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1004468F0, sub_100208418);
LABEL_3:
  uint64_t v8 = qword_100454018;
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v10 = sub_1001C7370(v9, 72LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  unint64_t v11 = sub_100253660();
  *(void *)(v10 + 56) = v11;
  uint64_t v12 = sub_1001F19E8((unint64_t *)&qword_1004488A0, (uint64_t (*)(uint64_t))sub_100253660);
  *(void *)(v10 + 64) = v12;
  *(void *)(v10 + 32) = a1;
  id v13 = a1;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("route: %@", 9LL, 2LL, &_mh_execute_header, v8, v14, v10);
  swift_bridgeObjectRelease(v10);
  uint64_t v15 = OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes;
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_pairedHostDeviceRoutes);
  id v17 = v13;
  uint64_t v18 = swift_bridgeObjectRetain(v16);
  uint64_t v19 = (void *)sub_1002728C0(v18, v17);
  swift_bridgeObjectRelease(v16);

  if (!v19)
  {
    uint64_t v22 = qword_100454018;
    uint64_t v23 = static os_log_type_t.error.getter(v20, v21);
    uint64_t v24 = sub_1001C7370(v9, 112LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    *(void *)(v24 + 56) = v11;
    *(void *)(v24 + 64) = v12;
    *(void *)(v24 + 32) = v17;
    uint64_t v25 = *(void *)(v1 + v15);
    *(void *)(v24 + 96) = sub_1001AFF14(&qword_10044A5F0);
    *(void *)(v24 + 104) = sub_1001F1A20(&qword_10044ACE0, &qword_10044A5F0);
    *(void *)(v24 + 72) = v25;
    id v26 = v17;
    swift_bridgeObjectRetain(v25);
    os_log(_:dso:log:type:_:)( "Could not find route to pick for %@. All paired host device routes: %@",  70LL,  2LL,  &_mh_execute_header,  v22,  v23,  v24);
    swift_bridgeObjectRelease(v24);
  }

  sub_1001B0FF8();
}

void sub_100272F60(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  __chkstk_darwin(v3);
  sub_1001D9040();
  uint64_t v44 = v4;
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  __chkstk_darwin(v5);
  sub_1001D9040();
  uint64_t v41 = v6;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B0F00();
  unint64_t v11 = (void *)(v10 - v9);
  uint64_t v40 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v12 = *(void *)(v40 - 8);
  uint64_t v13 = __chkstk_darwin(v40);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)v37 - v16;
  uint64_t v18 = sub_1001B1098();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_1001B0F00();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *(void *)(v21 - v20) = v23;
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v21 - v20,  enum case for DispatchPredicate.onQueue(_:),  v18);
  v37[1] = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) != 0)
  {
    uint64_t v25 = static DispatchWallTime.now()(v24);
    void *v11 = TUTransferTimeout(v25);
    (*(void (**)(void *, void, uint64_t))(v8 + 104))( v11,  enum case for DispatchTimeInterval.seconds(_:),  v7);
    + infix(_:_:)(v15, v11);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    id v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v27 = v40;
    v26(v15, v40);
    uint64_t v28 = v39;
    void aBlock[4] = v38;
    uint64_t v49 = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003E4D78;
    uint64_t v29 = _Block_copy(aBlock);
    uint64_t v30 = swift_retain(v28);
    uint64_t v31 = v41;
    static DispatchQoS.unspecified.getter(v30);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v32 = sub_1001F19E8( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v33 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    uint64_t v34 = sub_1001F1A20((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    uint64_t v35 = v44;
    uint64_t v36 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v33, v34, v46, v32);
    OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)(v17, v31, v35, v29);
    _Block_release(v29);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v31, v43);
    v26(v17, v27);
    swift_release(v49);
    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

void sub_100273284()
{
}

uint64_t type metadata accessor for PairedHostDeviceRouteProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd29PairedHostDeviceRouteProvider);
}

uint64_t sub_100273338(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100273348(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100273350(uint64_t a1)
{
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd29PairedHostDeviceRouteProvider_queue);
  *uint64_t v2 = v5;
  sub_1002737FC(v6, enum case for DispatchPredicate.onQueue(_:));
  id v7 = v5;
  _dispatchPreconditionTest(_:)(v2);
  sub_1002737E8();
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (qword_1004468F0 != -1) {
LABEL_5:
  }
    swift_once(&qword_1004468F0, sub_100208418);
  uint64_t v8 = qword_100454018;
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v10 = sub_1001C7370(v9, 72LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v10 + 56) = sub_1001AFF14(&qword_10044A5F0);
  *(void *)(v10 + 64) = sub_1001F1A20(&qword_10044ACE0, &qword_10044A5F0);
  *(void *)(v10 + 32) = a1;
  uint64_t v11 = swift_bridgeObjectRetain(a1);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("routes: %@", 10LL, 2LL, &_mh_execute_header, v8, v12, v10);
  swift_bridgeObjectRelease(v10);
  uint64_t v13 = swift_bridgeObjectRetain(a1);
  return sub_100272C90(v13);
}

unint64_t sub_1002734A4(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

void sub_1002734C8()
{
  uint64_t v1 = sub_10027378C();
  uint64_t v2 = sub_1002737BC((uint64_t)v1);
  sub_1002735E8(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10010B978();
}

void sub_1002734FC()
{
  uint64_t v1 = sub_10027378C();
  uint64_t v2 = (void *)sub_1002737BC((uint64_t)v1);
  *(void *)(v0 + 32) = sub_100273624(v2, v3, v4);
  sub_10010B978();
}

void sub_10027352C()
{
  uint64_t v1 = sub_10027378C();
  uint64_t v2 = sub_1002737BC((uint64_t)v1);
  sub_100273690(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10010B978();
}

void sub_10027355C()
{
  uint64_t v1 = sub_10027378C();
  uint64_t v2 = sub_1002737BC((uint64_t)v1);
  sub_1002736CC(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10010B978();
}

void sub_10027358C()
{
  uint64_t v1 = sub_10027378C();
  uint64_t v2 = (uint64_t *)sub_1002737BC((uint64_t)v1);
  *(void *)(v0 + 32) = sub_100273718(v2, v3, v4);
  sub_10010B978();
}

void sub_1002735BC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void sub_1002735E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v4) {
    uint64_t v5 = sub_1002737D0();
  }
  else {
    uint64_t v5 = (uint64_t)sub_1002737DC();
  }
  *unint64_t v3 = v5;
  sub_10010B978();
}

void (*sub_100273624(void *a1, unint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_1002734A4(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return j__s13callservicesd28SimulatedConversationManagerC20SimulatedParticipantVwxx;
}

void sub_100273690(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v4) {
    uint64_t v5 = sub_1002737D0();
  }
  else {
    uint64_t v5 = (uint64_t)sub_1002737DC();
  }
  *unint64_t v3 = v5;
  sub_10010B978();
}

void sub_1002736CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v6) {
    uint64_t v7 = sub_1002737D0();
  }
  else {
    uint64_t v7 = swift_retain(*(void *)(v4 + 8 * v5 + 32));
  }
  *unint64_t v3 = v7;
  sub_10010B978();
}

uint64_t sub_100273710(void *a1)
{
  return swift_release(*a1);
}

uint64_t (*sub_100273718(uint64_t *a1, unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_1002734A4(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    uint64_t v7 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
  }
  *a1 = v7;
  return sub_100273788;
}

void *sub_10027378C()
{
  return malloc(0x28uLL);
}

unint64_t sub_1002737A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1002734A4(a2, (a3 & 0xC000000000000001LL) == 0, a3);
}

uint64_t sub_1002737BC(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t sub_1002737D0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

id sub_1002737DC()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_1002737E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1002737FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

  ;
}

void *sub_100273820(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain(v7);
    if (sub_1001AB0AC((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_1001A9670((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (void *)((char *)v4 + v14);
    id v17 = (void *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    swift_bridgeObjectRetain(v18);
  }

  return v4;
}

uint64_t sub_100273938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

void *sub_1002739B0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain(v6);
  if (sub_1001AB0AC((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  swift_bridgeObjectRetain(v16);
  return a1;
}

void *sub_100273A9C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  int v12 = sub_1001AB0AC((uint64_t)v9, 1LL, v11);
  int v13 = sub_1001AB0AC((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  sub_1001A9670((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = a3[6];
  id v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *id v17 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_OWORD *sub_100273BF8(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  if (sub_1001AB0AC((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_1001A9670((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

void *sub_100273CC8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  int v12 = sub_1001AB0AC((uint64_t)v9, 1LL, v11);
  int v13 = sub_1001AB0AC((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  sub_1001A9670((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = a3[6];
  id v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v21 = v17[1];
  *id v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

uint64_t sub_100273E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100273E10);
}

uint64_t sub_100273E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    return sub_1001AB0AC(a1 + *(int *)(a3 + 20), a2, v9);
  }

uint64_t sub_100273E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100273EA0);
}

uint64_t sub_100273EA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }

  else
  {
    uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
    return sub_1001A9670(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for RingtoneDescriptor(uint64_t a1)
{
  uint64_t result = qword_10044B290;
  if (!qword_10044B290) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RingtoneDescriptor);
  }
  return result;
}

void sub_100273F48(uint64_t a1)
{
  v4[0] = &unk_10037E7F8;
  sub_100273FC8(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = &unk_10037E7F8;
    v4[3] = &unk_10037E810;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

void sub_100273FC8(uint64_t a1)
{
  if (!qword_10044B2A0)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10044B2A0);
    }
  }

uint64_t sub_10027401C@<X0>(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)sub_10020F510();
  uint64_t v10 = (uint64_t)a3 + v9[5];
  type metadata accessor for URL(0LL);
  sub_1001BB544(v10, 1LL);
  uint64_t v11 = (void *)((char *)a3 + v9[6]);
  void *v11 = 0LL;
  v11[1] = 0LL;
  uint64_t v12 = v9[7];
  *((_BYTE *)a3 + v12) = 0;
  id v13 = a1;
  uint64_t v14 = (void *)sub_100274A40(v13);
  int v24 = a2;
  if (v14)
  {
    uint64_t v15 = v14;
    if (v14[2])
    {
      uint64_t v16 = v14[4];
      uint64_t v17 = v14[5];
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v15);
      goto LABEL_6;
    }

    swift_bridgeObjectRelease(v14);
  }

  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
LABEL_6:
  *a3 = v16;
  a3[1] = v17;
  id v18 = [v13 provider];
  id v19 = [v18 ringtoneSoundURL];

  if (v19)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v20 = 0LL;
  }

  else
  {

    uint64_t v20 = 1LL;
  }

  char v21 = v24;
  sub_1001BB544((uint64_t)v8, v20);
  sub_100274AA0((uint64_t)v8, v10);
  uint64_t result = swift_bridgeObjectRelease(v11[1]);
  void *v11 = 0LL;
  v11[1] = 0LL;
  *((_BYTE *)a3 + v12) = v21 & 1;
  return result;
}

uint64_t sub_1002741AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  __chkstk_darwin(v4);
  sub_1001D9040();
  uint64_t v67 = v5;
  sub_1001AFF14((uint64_t *)&unk_100447DE0);
  sub_1001B0E88();
  __chkstk_darwin(v6);
  sub_1001D9040();
  uint64_t v68 = v7;
  uint64_t v8 = sub_1001AFF14(&qword_10044B2D8);
  sub_1001B0E88();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_10020F510();
  sub_1001B0E88();
  __chkstk_darwin(v12);
  char v75 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BB5CC();
  __chkstk_darwin(v14);
  char v74 = (char *)&v66 - v15;
  sub_1001BB5CC();
  __chkstk_darwin(v16);
  char v72 = (char *)&v66 - v17;
  sub_1001BB5CC();
  __chkstk_darwin(v18);
  int v73 = (char *)&v66 - v19;
  sub_1001BB5CC();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  id v26 = (char *)&v66 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (uint64_t *)((char *)&v66 - v28);
  __chkstk_darwin(v27);
  uint64_t v31 = (uint64_t *)((char *)&v66 - v30);
  sub_100274980(a1, (uint64_t)&v66 - v30);
  sub_100274980(a2, (uint64_t)v29);
  uint64_t v32 = v31[1];
  uint64_t v33 = v29[1];
  if (!v32)
  {
    swift_bridgeObjectRetain(v29[1]);
    sub_100274B54();
    sub_100274B4C();
    if (!v33) {
      goto LABEL_15;
    }
LABEL_12:
    swift_bridgeObjectRelease(v33);
    sub_100274B00();
    sub_100274AF0();
    goto LABEL_13;
  }

  if (!v33)
  {
    sub_1001B922C();
    sub_100274B54();
    sub_100274B4C();
    uint64_t v33 = v32;
    goto LABEL_12;
  }

  if (*v31 == *v29 && v32 == v33)
  {
    sub_1001B922C();
    sub_100274B54();
    sub_100274B4C();
    sub_1001B0F28();
LABEL_15:
    sub_100274B00();
    sub_100274AF0();
    goto LABEL_16;
  }

  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(*v31, v31[1], *v29, v29[1], 0LL);
  sub_1001B922C();
  sub_100274B54();
  sub_100274B4C();
  sub_1001B0F28();
  sub_100274B00();
  sub_100274AF0();
  if ((v35 & 1) == 0)
  {
LABEL_13:
    sub_100274AE8();
    sub_100274B10();
    uint64_t v36 = (uint64_t)v75;
LABEL_22:
    sub_100274B28((uint64_t)v31);
    sub_100274B6C(v32);
LABEL_23:
    sub_100274B44();
    sub_100274AE8();
LABEL_24:
    sub_100274B30((uint64_t)v31);
    sub_100274B38();
    goto LABEL_25;
  }

uint64_t sub_1002746EC()
{
  uint64_t v9 = v0[1];
  if (v9)
  {
    uint64_t v82 = *v0;
    uint64_t v90 = v0[1];
    uint64_t v10 = swift_bridgeObjectRetain(v9);
    uint64_t v17 = sub_100274B80(v10, (uint64_t)&type metadata for String, v11, v12, v13, v14, v15, v16, v82);
  }

  else
  {
    uint64_t v17 = 7104878LL;
  }

  sub_100274B74(v17);
  sub_1001B0F5C();
  sub_1001E4378();
  sub_100274B18();
  sub_100274B74(v18);
  sub_1001B0F5C();
  _StringGuts.grow(_:)(28LL);
  sub_10024D8EC(v19, v20, v21, v22, v23, v24, v25, v26, v81, v90, 0LL, 0xE000000000000000LL);
  sub_100274B18();
  uint64_t v27 = (int *)sub_10020F510();
  sub_1001AEDD0((uint64_t)v0 + v27[5]);
  String.append(_:)(v28);
  sub_1001B0F28();
  sub_1001E4378();
  swift_bridgeObjectRetain(0x8000000100375590LL);
  String.append(_:)(v95);
  swift_bridgeObjectRelease(0x8000000100375590LL);
  swift_bridgeObjectRelease(v95._object);
  _StringGuts.grow(_:)(26LL);
  sub_10024D8EC(v29, v30, v31, v32, v33, v34, v35, v36, v83, v91, 0LL, 0xE000000000000000LL);
  sub_100274B18();
  uint64_t v44 = (uint64_t *)((char *)v0 + v27[6]);
  uint64_t v45 = v44[1];
  if (v45)
  {
    uint64_t v85 = *v44;
    uint64_t v92 = v44[1];
    uint64_t v46 = swift_bridgeObjectRetain(v45);
    LODWORD(v45) = sub_100274B80(v46, (uint64_t)&type metadata for String, v47, v48, v49, v50, v51, v52, v85);
  }

  sub_100274B5C(v45, v37, v38, v39, v40, v41, v42, v43, v84, v92, v96);
  sub_1001B0F28();
  sub_1001E4378();
  int v53 = swift_bridgeObjectRetain(0x8000000100375590LL);
  sub_100274B5C(v53, v54, v55, v56, v57, v58, v59, v60, v86, v93, 18);
  swift_bridgeObjectRelease(0x8000000100375590LL);
  sub_1001B0F28();
  uint64_t v61 = *(void *)v97;
  _StringGuts.grow(_:)(23LL);
  sub_10024D8EC(v62, v63, v64, v65, v66, v67, v68, v69, v87, v94, 0LL, 0xE000000000000000LL);
  sub_100274B18();
  LOBYTE(v88) = *((_BYTE *)v0 + v27[7]);
  v77._countAndFlagsBits = sub_100274B80(v70, (uint64_t)&type metadata for Bool, v71, v72, v73, v74, v75, v76, v88);
  String.append(_:)(v77);
  sub_1001B0EB8();
  sub_1001E4378();
  swift_bridgeObjectRetain(0x8000000100375590LL);
  String.append(_:)(v98);
  swift_bridgeObjectRelease(0x8000000100375590LL);
  sub_1001B0F5C();
  sub_1001EE280();
  v78._countAndFlagsBits = 41LL;
  v78._object = (void *)0xE100000000000000LL;
  String.append(_:)(v78);
  sub_1001B0EB8();
  return v61;
}

uint64_t sub_100274980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RingtoneDescriptor(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002749C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RingtoneDescriptor(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100274A00()
{
  unint64_t result = qword_10044B2E0;
  if (!qword_10044B2E0)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_10044B2E0);
  }

  return result;
}

uint64_t sub_100274A40(void *a1)
{
  id v2 = [a1 contactIdentifiers];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  return v3;
}

uint64_t sub_100274AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100274AE8()
{
  return sub_1002749C4(v0);
}

uint64_t sub_100274AF0()
{
  return sub_100274980(v1, v0);
}

uint64_t sub_100274B00()
{
  return sub_100274980(v0, v1);
}

uint64_t sub_100274B10()
{
  return sub_1002749C4(v0);
}

  ;
}

uint64_t sub_100274B28(uint64_t a1)
{
  return sub_100274980(a1, v1);
}

uint64_t sub_100274B30(uint64_t a1)
{
  return sub_100274980(a1, v1);
}

uint64_t sub_100274B38()
{
  return sub_100274980(v1, v0);
}

uint64_t sub_100274B44()
{
  return sub_1002749C4(v0);
}

uint64_t sub_100274B4C()
{
  return sub_1002749C4(v0);
}

uint64_t sub_100274B54()
{
  return sub_1002749C4(v0);
}

void sub_100274B5C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t sub_100274B6C(uint64_t a1)
{
  return sub_100274980(a1, v1);
}

void sub_100274B74(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100274B80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return String.init<A>(reflecting:)(&a9, a2);
}

uint64_t sub_100274BB8()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CSDIDSPendingChat_isVideo);
}

id sub_100274BE8()
{
  return sub_100275164(OBJC_IVAR___CSDIDSPendingChat_handle);
}

void sub_100274BF4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = (objc_class *)sub_1001B5DB8();
  uint64_t v8 = &v3[OBJC_IVAR___CSDIDSPendingChat_uuid];
  uint64_t v9 = sub_1001B1234();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  v3[OBJC_IVAR___CSDIDSPendingChat_isVideo] = a2;
  *(void *)&v3[OBJC_IVAR___CSDIDSPendingChat_handle] = a3;
  v11.receiver = v3;
  v11.super_class = v7;
  objc_msgSendSuper2(&v11, "init");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  sub_1001C73F4();
}

void sub_100274D30()
{
}

uint64_t sub_100274D78()
{
  return type metadata accessor for IDSPendingChat(0LL);
}

uint64_t type metadata accessor for IDSPendingChat(uint64_t a1)
{
  return sub_100206810(a1, (uint64_t *)&unk_10044B310, (uint64_t)&nominal type descriptor for IDSPendingChat);
}

uint64_t sub_100274D94(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10037E890;
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

Class sub_100274E24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_1001B1234();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100274EB8(a3, (uint64_t)v7);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return isa;
}

uint64_t sub_100274EB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = sub_1001B1234();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

id sub_100274F14()
{
  return sub_100275164(OBJC_IVAR___CSDGroupIDSPendingChat_handle);
}

void sub_100274F20(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (objc_class *)sub_1001B5DB8();
  uint64_t v6 = &v2[OBJC_IVAR___CSDGroupIDSPendingChat_uuid];
  uint64_t v7 = sub_1001B1234();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(void *)&v2[OBJC_IVAR___CSDGroupIDSPendingChat_handle] = a2;
  v9.receiver = v2;
  v9.super_class = v5;
  objc_msgSendSuper2(&v9, "init");
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  sub_1001C73F4();
}

void sub_10027503C()
{
}

void sub_100275080(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a1 + *a3;
  uint64_t v7 = sub_1001B1234();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t sub_1002750D0()
{
  return type metadata accessor for GroupIDSPendingChat(0LL);
}

uint64_t type metadata accessor for GroupIDSPendingChat(uint64_t a1)
{
  return sub_100206810(a1, (uint64_t *)&unk_10044B348, (uint64_t)&nominal type descriptor for GroupIDSPendingChat);
}

uint64_t sub_1002750EC(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

id sub_100275164@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(v1 + a1);
}

uint64_t sub_10027516C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6LL, 0LL);
}

id sub_100275178(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v9 = [v6 isEqualToHandle:a2];

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }

      goto LABEL_17;
    }

    __break(1u);
LABEL_12:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  id v9 = 0LL;
LABEL_17:

  swift_bridgeObjectRelease(a1);
  return v9;
}

void sub_10027527C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = type metadata accessor for ActivitySession(0LL);
    unint64_t v10 = sub_100275EA4();
    objc_super v11 = Set.Iterator.init(_cocoa:)(v34, v8, v9, v10);
    uint64_t v6 = v34[0];
    uint64_t v31 = v34[1];
    uint64_t v12 = v34[2];
    int64_t v13 = v34[3];
    unint64_t v14 = v34[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a1 + 56);
    objc_super v11 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if (v6 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v14)
  {
    uint64_t v19 = (v14 - 1) & v14;
    unint64_t v20 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v21 = v13;
    goto LABEL_27;
  }

  int64_t v21 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v21 >= v30) {
      goto LABEL_38;
    }
    unint64_t v26 = *(void *)(v31 + 8 * v21);
    if (!v26)
    {
      int64_t v27 = v13 + 2;
      if (v13 + 2 >= v30) {
        goto LABEL_38;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v27);
      if (v26) {
        goto LABEL_25;
      }
      int64_t v27 = v13 + 3;
      if (v13 + 3 >= v30) {
        goto LABEL_38;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v27);
      if (v26) {
        goto LABEL_25;
      }
      int64_t v27 = v13 + 4;
      if (v13 + 4 >= v30) {
        goto LABEL_38;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v27);
      if (v26)
      {
LABEL_25:
        int64_t v21 = v27;
      }

      else
      {
        int64_t v21 = v13 + 5;
        if (v13 + 5 >= v30) {
          goto LABEL_38;
        }
        unint64_t v26 = *(void *)(v31 + 8 * v21);
        if (!v26)
        {
          int64_t v28 = v13 + 6;
          while (v28 < v30)
          {
            unint64_t v26 = *(void *)(v31 + 8 * v28++);
            if (v26)
            {
              int64_t v21 = v28 - 1;
              goto LABEL_26;
            }
          }

          goto LABEL_38;
        }
      }
    }

uint64_t sub_100275564()
{
  return dispatch thunk of ActivitySessionManager.requestTopicTermination(withTopicName:)();
}

id sub_100275584(void *a1)
{
  uint64_t v3 = (objc_class *)sub_1001B5DB8();
  v10[3] = type metadata accessor for ActivitySessionManager(0LL);
  v10[4] = &off_1003E4DD0;
  v10[0] = a1;
  id v4 = objc_allocWithZone(v3);
  sub_1001BA03C( (uint64_t)v10,  (uint64_t)v4 + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider);
  v9.receiver = v4;
  v9.super_class = v3;
  id v5 = a1;
  id v6 = objc_msgSendSuper2(&v9, "init");
  sub_1001B0438(v10);

  uint64_t v7 = sub_1001B5DB8();
  swift_deallocPartialClassInstance(v1, v7, 48LL, 7LL);
  return v6;
}

uint64_t sub_100275660(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  id v4 = [a1 activeRemoteParticipants];
  uint64_t v5 = sub_1001B4B94(0LL, (unint64_t *)&qword_100448F80, off_1003D5D90);
  unint64_t v6 = sub_100275E54();
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  uint64_t v8 = sub_10024E694(v7);
  if (!v8)
  {
    sub_1001B0F5C();
    unint64_t v14 = _swiftEmptyArrayStorage;
LABEL_22:
    id v44 = [v3 activitySessions];
    uint64_t v45 = type metadata accessor for ActivitySession(0LL);
    unint64_t v46 = sub_100275EA4();
    uint64_t v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v44, v45, v46);

    swift_bridgeObjectRetain(v14);
    sub_10027527C(v47, (uint64_t)v14, v2);
    swift_bridgeObjectRelease(v14);
    return sub_1001B0F5C();
  }

  uint64_t v9 = v8;
  int v54 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v8);
  if ((v7 & 0xC000000000000001LL) != 0)
  {
    if (v7 < 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaSet.startIndex.getter(v10);
    char v13 = 1;
  }

  else
  {
    uint64_t result = sub_100250EEC(v7);
    char v13 = v15 & 1;
  }

  uint64_t v51 = result;
  uint64_t v52 = v12;
  char v53 = v13;
  if ((v9 & 0x8000000000000000LL) == 0)
  {
    uint64_t v48 = v3;
    uint64_t v49 = v2;
    if (v7 < 0) {
      uint64_t v16 = v7;
    }
    else {
      uint64_t v16 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    do
    {
      uint64_t v17 = v51;
      uint64_t v18 = v52;
      char v19 = v53;
      uint64_t v20 = sub_100275EE4();
      sub_100250EB0(v20, v21, v22, v23);
      id v25 = v24;
      id v26 = [v24 handle];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      uint64_t v28 = v54[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      uint64_t v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      uint64_t result = specialized ContiguousArray._endMutation()(v29);
      if ((v7 & 0xC000000000000001LL) != 0)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_24;
        }
        uint64_t v30 = __CocoaSet.Index.handleBitPattern.getter(v17, v18);
        if (v30) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v41 = sub_1001AFF14(&qword_100448BF0);
        int v42 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v50, v41);
        __CocoaSet.formIndex(after:isUnique:)(v43, isUniquelyReferenced_nonNull_native, v16);
        v42(v50, 0LL);
      }

      else
      {
        uint64_t v32 = sub_100275EE4();
        uint64_t v36 = sub_100250B3C(v32, v33, v34, v35);
        uint64_t v38 = v37;
        char v40 = v39;
        sub_1001D8CA0(v17, v18, v19);
        uint64_t v51 = v36;
        uint64_t v52 = v38;
        char v53 = v40 & 1;
      }

      --v9;
    }

    while (v9);
    sub_1001D8CA0(v51, v52, v53);
    unint64_t v14 = v54;
    sub_1001B0F5C();
    uint64_t v3 = v48;
    uint64_t v2 = v49;
    goto LABEL_22;
  }

  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void sub_100275910(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [*a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  uint64_t v57 = UUID.uuidString.getter(v11);
  unint64_t v13 = v12;
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  char v15 = (void *)dispatch thunk of ActivitySession.activity.getter(v14);
  id v16 = [v15 originator];

  if (!v16)
  {
    swift_bridgeObjectRelease(v13);
    return;
  }

  uint64_t v18 = (void *)dispatch thunk of ActivitySession.activity.getter(v17);
  id v19 = [v18 metadata];

  if (!v19 || (id v20 = [v19 lifetimePolicy], v19, v20 != (id)1))
  {
    swift_bridgeObjectRelease(v13);

    return;
  }

  id v21 = v16;
  unsigned int v22 = sub_100275178(a2, v21);
  if (qword_100446948 != -1) {
    swift_once(&qword_100446948, sub_100258A68);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v23, (uint64_t)qword_1004541F8);
  id v24 = v21;
  swift_bridgeObjectRetain_n(v13, 2LL);
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v25 = v24;
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v25, v26, v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  int v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = swift_slowAlloc(38LL, -1LL);
    uint64_t v54 = swift_slowAlloc(96LL, -1LL);
    uint64_t v60 = v54;
    *(_DWORD *)uint64_t v31 = 136315906;
    unsigned int v55 = v22;
    uint64_t v58 = (uint64_t)v25;
    uint64_t v32 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    int v53 = v30;
    uint64_t v33 = v32;
    id v34 = v25;
    os_log_t v52 = v28;
    id v35 = v25;
    id v36 = v34;
    uint64_t v56 = a3;
    uint64_t v37 = String.init<A>(reflecting:)(&v58, v33);
    unint64_t v39 = v38;
    uint64_t v58 = sub_1001D7CF0(v37, v38, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v31 + 4, v31 + 12);

    id v25 = v35;
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain(v13);
    uint64_t v58 = sub_1001D7CF0(v57, v13, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v13, 3LL);
    *(_WORD *)(v31 + 22) = 2080;
    uint64_t v58 = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v40 = sub_1001AFF14(&qword_1004491E8);
    uint64_t v41 = String.init<A>(reflecting:)(&v58, v40);
    unint64_t v43 = v42;
    uint64_t v58 = sub_1001D7CF0(v41, v42, &v60);
    char v44 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v31 + 24, v31 + 32);
    swift_bridgeObjectRelease_n(a2, 2LL);
    unint64_t v45 = v43;
    a3 = v56;
    swift_bridgeObjectRelease(v45);
    *(_WORD *)(v31 + 32) = 1024;
    LODWORD(v58) = v44 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 4, v31 + 34, v31 + 38);
    os_log_t v46 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  (os_log_type_t)v53,  "Originator %s in conversation for activity %s with handles %s? %{BOOL}d",  (uint8_t *)v31,  0x26u);
    uint64_t v47 = v54;
    swift_arrayDestroy(v54, 3LL);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

    if ((v44 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  swift_bridgeObjectRelease_n(a2, 2LL);
  swift_bridgeObjectRelease_n(v13, 2LL);

  if ((v22 & 1) == 0)
  {
LABEL_12:
    uint64_t v48 = (void *)(a3
                   + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider);
    uint64_t v49 = *(void *)(a3
                    + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider
                    + 24);
    uint64_t v50 = *(void *)(a3
                    + OBJC_IVAR____TtC13callservicesd36CSDActivitySessionParticipantMonitor_topicTerminationRequestProvider
                    + 32);
    sub_1001B204C(v48, v49);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v50 + 8))(v57, v13, v49, v50);
  }

void sub_100275DEC()
{
}

uint64_t type metadata accessor for CSDActivitySessionParticipantMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd36CSDActivitySessionParticipantMonitor);
}

unint64_t sub_100275E54()
{
  unint64_t result = qword_100448BE8;
  if (!qword_100448BE8)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&qword_100448F80, off_1003D5D90);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100448BE8);
  }

  return result;
}

unint64_t sub_100275EA4()
{
  unint64_t result = qword_10044B108;
  if (!qword_10044B108)
  {
    uint64_t v1 = type metadata accessor for ActivitySession(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044B108);
  }

  return result;
}

uint64_t sub_100275EE4()
{
  return v0;
}

void sub_100275EF8(void (*a1)(void))
{
}

void sub_100275F14(uint64_t a1)
{
}

uint64_t sub_100275F30(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t v12 = *(dispatch_queue_s **)(v5 + 32);
  unint64_t v13 = (void *)swift_allocObject(&unk_1003E4EF0, 64LL, 7LL);
  uint64_t v13[2] = a2;
  v13[3] = a1;
  v13[4] = a3;
  v13[5] = a4;
  v13[6] = a5;
  v13[7] = v6;
  uint64_t v14 = sub_1001DBDC4((uint64_t)&unk_1003E4F18);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100277490;
  *(void *)(v14 + 24) = v13;
  char v15 = sub_10022CC44((uint64_t)sub_100275F14, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v20, v21);
  id v16 = a2;
  id v17 = a1;
  id v18 = a3;
  swift_retain(a5);
  swift_retain(v6);
  swift_retain(v14);
  swift_release(v14);
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v12) = sub_100207108(v14, (uint64_t)"", 118LL, 41LL);
  swift_release(v13);
  uint64_t result = swift_release(v14);
  return result;
}

uint64_t sub_100276080(void *a1, void *a2, id a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v112 = a6;
  uint64_t v109 = a4;
  uint64_t v104 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v102 = (unint64_t *)((char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v106 = type metadata accessor for DispatchTime(0LL);
  uint64_t v101 = *(void *)(v106 - 8);
  uint64_t v11 = __chkstk_darwin(v106);
  unint64_t v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v105 = (char *)&v98 - v14;
  uint64_t v107 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v107);
  id v108 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v16, (uint64_t)qword_1004541B0);
  id v17 = a1;
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v17, v18, v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v110 = v13;
  unint64_t v111 = (void *)a5;
  if (v22)
  {
    id v100 = a3;
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v24 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v23 = 138412290;
    __int128 aBlock = v17;
    id v25 = v17;
    a3 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v115, v23 + 4, v23 + 12);
    *id v24 = v17;

    a5 = (uint64_t)v111;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "LMI decryption failed so caching and triggering link recovery %@",  v23,  0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v24, 1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v26 = v17;
  id v27 = a2;
  id v28 = a3;
  swift_retain(a5);
  id v29 = [v26 value];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  uint64_t v33 = v112;
  uint64_t v34 = v112 + 16;
  swift_beginAccess(v112 + 16, v117, 0LL, 0LL);
  uint64_t v35 = *(void *)(v33 + 16);
  swift_bridgeObjectRetain(v35);
  uint64_t v36 = sub_1001C9FB8(v30, v32, v35);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v35);
  id v100 = v28;
  id v99 = v27;
  if (!v36)
  {
    id v44 = [v26 value];
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v36 = v46;

    uint64_t v47 = sub_1001AFF14(&qword_10044B4B0);
    uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
    *(_OWORD *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    *(void *)(v48 + 32) = v27;
    *(void *)(v48 + 40) = v26;
    uint64_t v49 = v109;
    *(void *)(v48 + 48) = v28;
    *(void *)(v48 + 56) = v49;
    *(void *)(v48 + 64) = a5;
    swift_beginAccess(v34, &aBlock, 33LL, 0LL);
    uint64_t v50 = v26;
    id v51 = v27;
    id v52 = v28;
    swift_retain(a5);
    sub_1001FE640(v48, v45, v36, v53, v54, v55, v56, v57, v98, (uint64_t)v99);
    swift_endAccess(&aBlock);
    id v39 = v110;
    unint64_t v43 = &selRef_sharedPrivacyManager;
    goto LABEL_12;
  }

  uint64_t v37 = v26;
  id v38 = v27;
  id v39 = v28;
  swift_retain(a5);
  if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v40 = *(void *)(v36 + 16);
    if (v40 >= *(void *)(v36 + 24) >> 1)
    {
      sub_1002B05EC();
      uint64_t v36 = v97;
    }

    *(void *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = v40 + 1;
    uint64_t v41 = (void *)(v36 + 40 * v40);
    v41[4] = v38;
    void v41[5] = v37;
    uint64_t v42 = v109;
    v41[6] = v39;
    v41[7] = v42;
    v41[8] = a5;
    id v39 = v110;
    unint64_t v43 = &selRef_sharedPrivacyManager;
LABEL_12:
    swift_bridgeObjectRelease(v36);
    uint64_t v58 = swift_allocObject(&unk_1003E4F68, 32LL, 7LL);
    uint64_t v59 = v112;
    *(void *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = v112;
    *(void *)(v58 + 24) = v26;
    v115[3] = sub_1002774D0;
    uint64_t v116 = v58;
    __int128 aBlock = _NSConcreteStackBlock;
    v115[0] = 1107296256LL;
    v115[1] = sub_1002356BC;
    v115[2] = &unk_1003E4F80;
    uint64_t v60 = _Block_copy(&aBlock);
    v113[0] = _swiftEmptyArrayStorage;
    unint64_t v61 = sub_1001E8E70();
    uint64_t v26 = v26;
    swift_retain(v59);
    uint64_t v62 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    unint64_t v63 = sub_1001C94D0();
    uint64_t v64 = v108;
    dispatch thunk of SetAlgebra.init<A>(_:)(v113, v62, v63, v107, v61);
    uint64_t v65 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    uint64_t v66 = DispatchWorkItem.init(flags:block:)(v64, v60);
    swift_release(v116);
    uint64_t v67 = v43;
    id v68 = [v26 v43[487]];
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    uint64_t v71 = v70;

    uint64_t v72 = v59 + 24;
    swift_beginAccess(v59 + 24, &aBlock, 0LL, 0LL);
    a5 = *(void *)(v59 + 24);
    swift_bridgeObjectRetain(a5);
    sub_1001CA40C(v69, v71, a5);
    uint64_t v74 = v73;
    swift_bridgeObjectRelease(v71);
    uint64_t v75 = swift_bridgeObjectRelease(a5);
    if (v74)
    {
      dispatch thunk of DispatchWorkItem.cancel()(v75);
      swift_release(v74);
    }

    id v76 = [v26 v67[487]];
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    uint64_t v79 = v78;

    swift_beginAccess(v72, v113, 33LL, 0LL);
    uint64_t v80 = swift_retain(v66);
    sub_1001FE62C(v80, v77, v79, v81, v82, v83, v84, v85, v98, (uint64_t)v99);
    swift_endAccess(v113);
    uint64_t v86 = swift_bridgeObjectRelease(v79);
    uint64_t v87 = v112;
    uint64_t v37 = *(void ***)(v112 + 32);
    static DispatchTime.now()(v86);
    unint64_t v88 = (unint64_t)[*(id *)(v87 + 40) letMeInRequestRecoveryTimeout];
    id v38 = v111;
    if ((v88 & 0x8000000000000000LL) == 0) {
      break;
    }
    __break(1u);
LABEL_17:
    sub_1002B05EC();
    uint64_t v36 = v96;
  }

  uint64_t v89 = v102;
  *uint64_t v102 = v88;
  uint64_t v90 = v103;
  uint64_t v91 = v104;
  (*(void (**)(unint64_t *, void, uint64_t))(v103 + 104))( v89,  enum case for DispatchTimeInterval.seconds(_:),  v104);
  uint64_t v92 = v105;
  + infix(_:_:)(v39, v89);
  (*(void (**)(unint64_t *, uint64_t))(v90 + 8))(v89, v91);
  uint64_t v93 = *(void (**)(id, uint64_t))(v101 + 8);
  uint64_t v94 = v106;
  v93(v39, v106);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v92, v66);
  swift_release(v38);

  swift_release(v66);
  return ((uint64_t (*)(char *, uint64_t))v93)(v92, v94);
}

uint64_t sub_1002767DC(uint64_t a1, void *a2)
{
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v4, (uint64_t)qword_1004541B0);
  swift_retain_n(a1, 2LL);
  id v5 = a2;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v5, v6, v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v49[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    id v12 = [v5 value];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    swift_beginAccess(a1 + 16, v47, 0LL, 0LL);
    uint64_t v16 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = sub_1001C9FB8(v13, v15, v16);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    if (v17)
    {
      uint64_t v50 = v17;
      uint64_t v18 = sub_1001AFF14(&qword_100448F08);
      uint64_t v19 = String.init<A>(reflecting:)(&v50, v18);
      unint64_t v21 = v20;
    }

    else
    {
      unint64_t v21 = 0xE300000000000000LL;
      uint64_t v19 = 7104878LL;
    }

    uint64_t v50 = sub_1001D7CF0(v19, v21, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v10 + 4, v10 + 12);

    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalidating LMI link recovery for cached LMI: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  id v22 = [v5 value];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  swift_beginAccess(a1 + 16, &v50, 0LL, 0LL);
  uint64_t v26 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(v26);
  uint64_t v27 = sub_1001C9FB8(v23, v25, v26);
  swift_bridgeObjectRelease(v25);
  uint64_t result = swift_bridgeObjectRelease(v26);
  if (v27)
  {
    id v29 = [v5 value];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    swift_beginAccess(a1 + 16, v49, 33LL, 0LL);
    uint64_t v33 = sub_1001FDF80(v30, v32);
    swift_endAccess(v49);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v33);
    id v34 = [v5 value];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v37 = v36;

    swift_beginAccess(a1 + 24, v49, 33LL, 0LL);
    sub_1001FDF6C(v35, v37, v38, v39, v40, v41, v42, v43, v47[0], v47[1]);
    uint64_t v45 = v44;
    swift_endAccess(v49);
    swift_bridgeObjectRelease(v37);
    swift_release(v45);
    uint64_t v46 = a1 + 48;
    swift_beginAccess(v46, v48, 0LL, 0LL);
    sub_1002773C4(v46, (uint64_t)v49);
    if (v49[3])
    {
      sub_10027740C((uint64_t)v49);
      return swift_bridgeObjectRelease(v27);
    }

    else
    {
      swift_bridgeObjectRelease(v27);
      return sub_10027740C((uint64_t)v49);
    }
  }

  return result;
}

uint64_t sub_100276BCC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(dispatch_queue_s **)(v1 + 32);
  uint64_t v5 = sub_1001DBDC4((uint64_t)&unk_1003E4E78);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = sub_1001DBDC4((uint64_t)&unk_1003E4EA0);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100277384;
  *(void *)(v6 + 24) = v5;
  uint64_t v7 = sub_10022CC44((uint64_t)sub_100275F14, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v9, v10);
  swift_bridgeObjectRetain(a1);
  swift_retain(v2);
  swift_retain(v6);
  swift_release(v6);
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = sub_100207108(v6, (uint64_t)"", 118LL, 75LL);
  swift_release(v5);
  uint64_t result = swift_release(v6);
  return result;
}

uint64_t sub_100276CE8(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v39 = a1;
    }
    else {
      uint64_t v39 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v39);
    uint64_t v4 = result;
    if (result) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease(a1);
  }

  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v4) {
    return swift_bridgeObjectRelease(a1);
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v6 = (uint64_t *)(a2 + 16);
    unint64_t v7 = a1 & 0xC000000000000001LL;
    swift_beginAccess(a2 + 16, v48, 0LL, 0LL);
    uint64_t v42 = (uint64_t *)(a2 + 24);
    swift_beginAccess(a2 + 24, v47, 0LL, 0LL);
    uint64_t v41 = a2 + 48;
    swift_beginAccess(a2 + 48, v46, 0LL, 0LL);
    uint64_t v8 = 0LL;
    while (1)
    {
      if (v7) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      id v11 = objc_msgSend(v9, "pseudonym", v40);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      uint64_t v15 = *v6;
      if (*(void *)(*v6 + 16))
      {
        swift_bridgeObjectRetain(*v6);
        unint64_t v16 = sub_1001D7094(v12, v14);
        if ((v17 & 1) != 0)
        {
          uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v15);
          id v19 = [v10 pseudonym];
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          uint64_t v22 = v21;

          uint64_t v23 = *v42;
          if (*(void *)(*v42 + 16))
          {
            swift_bridgeObjectRetain(*v42);
            unint64_t v24 = sub_1001D7094(v20, v22);
            if ((v25 & 1) != 0)
            {
              uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
              swift_retain(v26);
              swift_bridgeObjectRelease(v22);
              swift_bridgeObjectRelease(v23);
              if (qword_100446930 != -1) {
                swift_once(&qword_100446930, sub_100258A18);
              }
              uint64_t v27 = type metadata accessor for Logger(0LL);
              uint64_t v28 = sub_1001B0D98(v27, (uint64_t)qword_1004541B0);
              uint64_t v31 = (os_log_s *)Logger.logObject.getter(v28, v29, v30);
              os_log_type_t v32 = static os_log_type_t.default.getter(v31);
              if (os_log_type_enabled(v31, v32))
              {
                uint64_t v40 = v26;
                uint64_t v33 = a2;
                id v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)id v34 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Acquired link, proceeding to decrypt cached LMI",  v34,  2u);
                uint64_t v35 = v34;
                a2 = v33;
                uint64_t v26 = v40;
                swift_slowDealloc(v35, -1LL, -1LL);
              }

              dispatch thunk of DispatchWorkItem.cancel()(v36);
              sub_1002773C4(v41, (uint64_t)v44);
              if (v45)
              {
                sub_1001BA03C((uint64_t)v44, (uint64_t)v43);
                sub_10027740C((uint64_t)v44);
                sub_1001B204C(v43, v43[3]);
                sub_1002294D4();
                swift_bridgeObjectRelease(v18);
                swift_release(v26);

                sub_1001B0438(v43);
              }

              else
              {
                swift_bridgeObjectRelease(v18);
                swift_release(v26);

                sub_10027740C((uint64_t)v44);
              }

              goto LABEL_24;
            }

            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v22);
            uint64_t v38 = v23;
          }

          else
          {
            swift_bridgeObjectRelease(v18);
            uint64_t v38 = v22;
          }

          swift_bridgeObjectRelease(v38);

LABEL_24:
          unint64_t v7 = a1 & 0xC000000000000001LL;
          goto LABEL_25;
        }

        swift_bridgeObjectRelease(v14);
        uint64_t v37 = v15;
      }

      else
      {

        uint64_t v37 = v14;
      }

      swift_bridgeObjectRelease(v37);
LABEL_25:
      if (v4 == ++v8) {
        return swift_bridgeObjectRelease(a1);
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1002770B4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  sub_10027740C(v0 + 48);
  return v0;
}

uint64_t sub_1002770F0()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for LetMeInRecoveryManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd22LetMeInRecoveryManager);
}

uint64_t destroy for CachedLetMeInRequest(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(void *)(a1 + 32) = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = (id)v10;
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  __int128 v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  id v12 = v10;

  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v13;
  swift_retain(v13);
  swift_release(v15);
  return a1;
}

__n128 initializeWithTake for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CachedLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedLetMeInRequest(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(sub_1001B03C0(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_1001B03C0(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CachedLetMeInRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CachedLetMeInRequest()
{
  return &type metadata for CachedLetMeInRequest;
}

uint64_t sub_100277358()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100277384()
{
  return sub_100276CE8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100277390()
{
}

uint64_t sub_1002773AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002773BC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002773C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100449A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027740C(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100449A08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10027744C()
{
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100277490()
{
  return sub_100276080( *(void **)(v0 + 16),  *(void **)(v0 + 24),  *(id *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_1002774A4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002774D0()
{
  return sub_1002767DC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_1002774EC(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v22 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
  id v5 = a1;
  NSArray.makeIterator()();

  uint64_t v6 = sub_1001E1F68( &qword_10044B508,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&v26, v2, v6);
  while (v27)
  {
    sub_1001B03EC(&v26, v25);
    sub_1001B03FC((uint64_t)v25, (uint64_t)v23);
    uint64_t v7 = sub_1001B4B94(0LL, &qword_10044A5E0, off_1003D5DE0);
    uint64_t v8 = sub_1001B0438(v25);
    uint64_t v9 = v24;
    if (v24)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      unint64_t v11 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v10 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v11 >= v10 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
      }
      uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized Array._endMutation()(v12, v13, v14, v15, v16, v17, v18, v19);
    }

    dispatch thunk of IteratorProtocol.next()(&v26, v2, v6);
  }

  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
  return v28;
}

unint64_t sub_1002776C4(unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

uint64_t sub_1002776D4(uint64_t result)
{
  return result;
}

void sub_1002776DC()
{
}

void sub_1002776E4(uint64_t a1)
{
}

void sub_1002776EC(uint64_t a1)
{
}

unint64_t sub_1002776F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1002776C4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10027771C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002776D4(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100277744(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10027AE14();
  unint64_t v5 = sub_10022CA10();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_100277788(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002777C4 + 4 * byte_10037E9C0[a1]))( 0xD00000000000003BLL,  0x8000000100375950LL);
}

uint64_t sub_1002777C4()
{
  return v0 + 12;
}

unint64_t sub_1002777FC()
{
  return 0xD000000000000023LL;
}

uint64_t sub_100277818()
{
  return sub_100277788(*v0);
}

void sub_100277820()
{
  uint64_t v2 = (objc_class *)sub_10027AE58();
  sub_10027A948( [objc_allocWithZone(TUVouchingEnablementImpl) init],  v0,  objc_allocWithZone(v2));
  uint64_t v3 = sub_10027AE58();
  swift_deallocPartialClassInstance(v1, v3, 32LL, 7LL);
  sub_10010B978();
}

void sub_1002778C0(void *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v185 = *(v6 - 1);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v179 = (char *)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v178 = (char *)&v156 - v10;
  __chkstk_darwin(v9);
  uint64_t v184 = (char *)&v156 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v182 = *(void *)(v12 - 8);
  uint64_t v183 = v12;
  __chkstk_darwin(v12);
  id v181 = (char *)&v156 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v176 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_allocObject(&unk_1003E4FB8, 24LL, 7LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  uint64_t v177 = a2;
  uint64_t v22 = *(void **)(a2 + OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_vouchingEnablement);
  _Block_copy(a3);
  if (![v22 isEnabled])
  {
    (*((void (**)(char *, void *))a3 + 2))(a3, a1);
    swift_release(v21);
    _Block_release(a3);
    return;
  }

  uint64_t v169 = v19;
  uint64_t v23 = (uint64_t)a1;
  uint64_t v24 = sub_10027A6F0(a1, (SEL *)&selRef_clientContextData);
  if (v25 >> 60 == 15) {
    goto LABEL_12;
  }
  uint64_t v165 = v18;
  uint64_t v180 = v6;
  uint64_t v26 = v24;
  unint64_t v27 = v25;
  id v28 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingConversationParticipantDidJoinContext);
  sub_1001BB31C(v26, v27);
  uint64_t v166 = v26;
  uint64_t v29 = v26;
  uint64_t v6 = v180;
  unint64_t v167 = v27;
  sub_10027A67C(v29, v27);
  if (!v30)
  {
LABEL_11:
    sub_1001BB464(v166, v167);
LABEL_12:
    if (qword_100446918 != -1) {
LABEL_70:
    }
      swift_once(&qword_100446918, sub_1002589B4);
    sub_1001B0D98((uint64_t)v6, (uint64_t)qword_100454168);
    uint64_t v45 = (void **)(id)v23;
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v45, v46, v47);
    os_log_type_t v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = swift_slowAlloc(8LL, -1LL);
      uint64_t v170 = a3;
      id v52 = (void *)v51;
      *(_DWORD *)uint64_t v50 = 138412290;
      __int128 aBlock = v45;
      uint64_t v53 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v188, v50 + 4, v50 + 12);
      *id v52 = v45;

      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Unable to identify context from participant update %@.",  v50,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v52, 1LL);
      uint64_t v54 = v52;
      a3 = v170;
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
    }

    (*((void (**)(char *, void **))a3 + 2))(a3, v45);
    swift_release(v21);
    uint64_t v55 = a3;
    goto LABEL_17;
  }

  uint64_t v31 = v30;
  if ((sub_100278A18() & 1) == 0)
  {

    goto LABEL_11;
  }

  uint64_t v159 = v15;
  uint64_t v160 = v14;
  if (qword_100446918 != -1) {
    swift_once(&qword_100446918, sub_1002589B4);
  }
  uint64_t v32 = sub_1001B0D98((uint64_t)v6, (uint64_t)qword_100454168);
  uint64_t v33 = v31;
  uint64_t v171 = v32;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v33, v34, v35);
  os_log_type_t v37 = static os_log_type_t.default.getter(v36);
  BOOL v38 = os_log_type_enabled(v36, v37);
  unint64_t v168 = a1;
  uint64_t v170 = a3;
  uint64_t v158 = v17;
  if (v38)
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v175 = v39;
    *(_DWORD *)uint64_t v39 = 138412290;
    uint64_t v41 = v39 + 4;
    __int128 aBlock = v33;
    uint64_t v42 = v33;
    uint64_t v43 = v39 + 12;
    uint64_t v6 = v168;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v188, v41, v43);
    *uint64_t v40 = v31;

    uint64_t v44 = v175;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Starting sanitization of %@.", v175, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v40, 1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    uint64_t v6 = a1;
  }

  uint64_t v161 = v21;
  dispatch_group_t v163 = dispatch_group_create();
  uint64_t v56 = (uint64_t)sub_100278C54();
  uint64_t v23 = v56;
  a3 = v184;
  uint64_t v157 = v33;
  if ((unint64_t)v56 >> 62)
  {
    if (v56 < 0) {
      uint64_t v138 = v56;
    }
    else {
      uint64_t v138 = v56 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v56);
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v138);
    if (v57) {
      goto LABEL_21;
    }
    goto LABEL_75;
  }

  uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v56);
  if (!v57)
  {
LABEL_75:
    swift_bridgeObjectRelease(v23);
    uint64_t v139 = *(void *)(v177 + OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_completionQueue);
    uint64_t v140 = swift_allocObject(&unk_1003E4FE0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v140 + 16);
    uint64_t v141 = (void *)swift_allocObject(&unk_1003E5008, 64LL, 7LL);
    unint64_t v142 = v157;
    v141[2] = v140;
    v141[3] = v142;
    uint64_t v143 = v161;
    v141[4] = sub_1001FBB44;
    v141[5] = v143;
    v141[6] = v6;
    v141[7] = v23;
    uint64_t v191 = sub_10027A8A4;
    id v192 = v141;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v188 = 1107296256LL;
    uint64_t v189 = sub_1002356BC;
    id v190 = &unk_1003E5020;
    uint64_t v144 = _Block_copy(&aBlock);
    id v145 = v142;
    swift_retain(v140);
    swift_retain(v143);
    uint64_t v146 = v6;
    unint64_t v147 = v176;
    static DispatchQoS.unspecified.getter(v146);
    uint64_t v186 = _swiftEmptyArrayStorage;
    uint64_t v148 = sub_1001E1F68( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v149 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    uint64_t v150 = sub_10027AC40((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    uint64_t v151 = v158;
    uint64_t v152 = v149;
    uint64_t v153 = v160;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v186, v152, v150, v160, v148);
    dispatch_group_t v154 = v163;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v147, v151, v139, v144);
    _Block_release(v144);

    sub_1001BB464(v166, v167);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v151, v153);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v147, v165);
    uint64_t v155 = v192;
    swift_release(v143);
    swift_release(v140);
    swift_release(v155);
    uint64_t v55 = v170;
LABEL_17:
    _Block_release(v55);
    return;
  }

unint64_t sub_100278A18()
{
  unint64_t v1 = (unint64_t)[v0 participantUpdateType];
  if (v1 < 5) {
    return v1 & 1;
  }
  if (qword_100446918 != -1) {
    swift_once(&qword_100446918, sub_1002589B4);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v3, (uint64_t)qword_100454168);
  id v4 = v0;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v4, v5, v6);
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v15 = [v4 participantUpdateType];
    type metadata accessor for IDSGroupSessionMessageParticipantUpdateType(0LL);
    uint64_t v12 = String.init<A>(reflecting:)(&v15, v11);
    unint64_t v14 = v13;
    id v15 = (id)sub_1001D7CF0(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unknown participant update type: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  return 0LL;
}

id sub_100278BF4(void *a1)
{
  id result = [a1 validationSource];
  if ((_DWORD)result == 2) {
    return [a1 setValidationSource:0];
  }
  return result;
}

void *sub_100278C54()
{
  unint64_t v1 = v0;
  id v2 = [v0 members];
  if (v2)
  {
    id v3 = v2;
    id v4 = (void *)sub_1002774EC(v3);
  }

  else
  {
    id v4 = _swiftEmptyArrayStorage;
  }

  id v5 = [v1 lightweightMembers];
  if (v5)
  {
    id v13 = v5;
    unint64_t v14 = (void *)sub_1002774EC(v13);
  }

  else
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
  }

  sub_1002909DC((uint64_t)v14, v6, v7, v8, v9, v10, v11, v12, v53);
  id v15 = v4;
  id v16 = [v1 message];
  if (v16
    && (uint64_t v24 = v16, v25 = [v16 addedMembers], v24, v25))
  {
    id v26 = v25;
    unint64_t v27 = (void *)sub_1002774EC(v26);
  }

  else
  {
    unint64_t v27 = _swiftEmptyArrayStorage;
  }

  sub_1002909DC((uint64_t)v27, v17, v18, v19, v20, v21, v22, v23, v54);
  id v28 = [v1 message];
  if (v28
    && (uint64_t v36 = v28,
        id v37 = [v28 lightweightMembers],
        v36,
        v37))
  {
    id v38 = v37;
    uint64_t v39 = (void *)sub_1002774EC(v38);
  }

  else
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
  }

  sub_1002909DC((uint64_t)v39, v29, v30, v31, v32, v33, v34, v35, v55);
  id v40 = [v1 message];
  if (v40
    && (uint64_t v48 = v40, v49 = [v40 removedMembers], v48, v49))
  {
    id v50 = v49;
    uint64_t v51 = (void *)sub_1002774EC(v50);
  }

  else
  {
    uint64_t v51 = _swiftEmptyArrayStorage;
  }

  sub_1002909DC((uint64_t)v51, v41, v42, v43, v44, v45, v46, v47, v56);
  return v15;
}

void sub_100278E84(char a1, uint64_t a2, void *a3, void *a4, dispatch_group_s *a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    if (qword_100446918 != -1) {
      swift_once(&qword_100446918, sub_1002589B4);
    }
    sub_1001B0D98(v10, (uint64_t)qword_100454168);
    id v14 = a3;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v14, v15, v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v50 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v48 = (dispatch_group_s *)(v19 + 4);
      id v21 = [v14 handle];
      uint64_t v22 = a5;
      id v23 = [v21 value];

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      unint64_t v26 = v25;

      a5 = v22;
      uint64_t v49 = sub_1001D7CF0(v24, v26, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v48, v19 + 12);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Verified voucher on member %s.", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
    }

    goto LABEL_15;
  }

  if (qword_100446918 != -1) {
    swift_once(&qword_100446918, sub_1002589B4);
  }
  uint64_t v27 = sub_1001B0D98(v10, (uint64_t)qword_100454168);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v27, v10);
  id v28 = a4;
  swift_errorRetain(a2);
  id v29 = v28;
  uint64_t v30 = swift_errorRetain(a2);
  uint64_t v33 = (void *)Logger.logObject.getter(v30, v31, v32);
  os_log_type_t v35 = static os_log_type_t.error.getter(v33, v34);
  if (!os_log_type_enabled((os_log_t)v33, v35))
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_14;
  }

  uint64_t v48 = a5;
  uint64_t v36 = swift_slowAlloc(22LL, -1LL);
  uint64_t v37 = swift_slowAlloc(64LL, -1LL);
  uint64_t v50 = v37;
  *(_DWORD *)uint64_t v36 = 136315394;
  id v38 = [v29 handle];
  if (v38)
  {
    uint64_t v47 = v37;
    uint64_t v39 = sub_10027A7AC(v38);
    if (v40)
    {
      unint64_t v41 = v40;
      uint64_t v49 = sub_1001D7CF0(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 4, v36 + 12);

      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v49 = a2;
      swift_errorRetain(a2);
      uint64_t v42 = sub_1001AFF14(&qword_100449C48);
      uint64_t v43 = String.init<A>(describing:)(&v49, v42);
      unint64_t v45 = v44;
      uint64_t v49 = sub_1001D7CF0(v43, v44, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v45);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v33,  v35,  "Failed to validate verified voucher on member %s with error %s.",  (uint8_t *)v36,  0x16u);
      uint64_t v46 = v47;
      swift_arrayDestroy(v47, 2LL);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      a5 = v48;
LABEL_14:
      sub_100278BF4(v29);
LABEL_15:
      dispatch_group_leave(a5);
      return;
    }
  }

  else
  {
    swift_errorRelease(a2);

    __break(1u);
  }

  swift_errorRelease(a2);

  __break(1u);
}

void sub_100279320(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v129, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (!Strong)
  {
    if (qword_100446918 != -1) {
      swift_once(&qword_100446918, sub_1002589B4);
    }
    uint64_t v79 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v79, (uint64_t)qword_100454168);
    id v80 = a2;
    char v83 = (os_log_s *)Logger.logObject.getter(v80, v81, v82);
    os_log_type_t v84 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v86 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v85 = 138412290;
      uint64_t v128 = (uint64_t)v80;
      uint64_t v87 = a3;
      id v88 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v85 + 4, v85 + 12);
      void *v86 = v80;

      a3 = v87;
      _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "Could not finish sanitization of %@. Self was deallocated",  v85,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v86, 1LL);
      swift_slowDealloc(v86, -1LL, -1LL);
      swift_slowDealloc(v85, -1LL, -1LL);
    }

    else
    {

      char v83 = (os_log_s *)v80;
    }

    uint64_t v89 = sub_10027A6F0(v80, (SEL *)&selRef_data);
    unint64_t v91 = v90;
    id v92 = sub_10027A14C(v89, v90);
    sub_1001BB464(v89, v91);
    a3(v92);
    goto LABEL_88;
  }

  uint64_t v117 = (void (*)(id))a3;
  uint64_t v118 = (void *)Strong;
  unint64_t v121 = (unint64_t)a6 >> 62;
  if ((unint64_t)a6 >> 62)
  {
LABEL_78:
    if (a6 < 0) {
      uint64_t v93 = a6;
    }
    else {
      uint64_t v93 = a6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a6);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v93);
    if (v10) {
      goto LABEL_4;
    }
    goto LABEL_82;
  }

  uint64_t v10 = *(void *)((a6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a6);
  if (!v10)
  {
LABEL_82:
    swift_bridgeObjectRelease(a6);
    if (qword_100446918 != -1) {
      swift_once(&qword_100446918, sub_1002589B4);
    }
    uint64_t v94 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v94, (uint64_t)qword_100454168);
    id v95 = a2;
    uint64_t v98 = (os_log_s *)Logger.logObject.getter(v95, v96, v97);
    os_log_type_t v99 = static os_log_type_t.default.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v101 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v100 = 138412290;
      uint64_t v128 = (uint64_t)v95;
      id v102 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v100 + 4, v100 + 12);
      void *v101 = v95;

      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Finished sanitization of %@.", v100, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v101, 1LL);
      swift_slowDealloc(v101, -1LL, -1LL);
      swift_slowDealloc(v100, -1LL, -1LL);
    }

    else
    {

      uint64_t v98 = (os_log_s *)v95;
    }

    uint64_t v103 = sub_10027A6F0(v95, (SEL *)&selRef_data);
    unint64_t v105 = v104;
    id v92 = sub_10027A14C(v103, v104);
    sub_1001BB464(v103, v105);
    v117(v92);

LABEL_88:
    return;
  }

id sub_10027A14C(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  id v6 = [v3 dictionaryRepresentation];
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  uint64_t v12 = v7;
  *(void *)&__int128 v9 = 0xD000000000000034LL;
  *((void *)&v9 + 1) = 0x80000001003759C0LL;
  AnyHashable.init<A>(_:)(v11, &v9, &type metadata for String, &protocol witness table for String);
  if (a2 >> 60 == 15)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  else
  {
    *((void *)&v10 + 1) = &type metadata for Data;
    *(void *)&__int128 v9 = a1;
    *((void *)&v9 + 1) = a2;
  }

  sub_1001E07F4(a1, a2);
  sub_1001FC358((uint64_t)&v9, (uint64_t)v11);
  sub_1001B4B94(0LL, &qword_10044B500, &OBJC_CLASS___IDSGroupSessionParticipantUpdate_ptr);
  return sub_10027A5F8(v12);
}

uint64_t sub_10027A268(void *a1, void *a2, id a3)
{
  id v6 = [a3 association];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [a1 handle];
    id v9 = [a3 handle];
    unsigned int v10 = [v8 isEqualToHandle:v9];

    if (v10
      && (id v11 = [v7 handle],
          id v12 = [a2 handle],
          unsigned int v13 = [v11 isEqualToHandle:v12],
          v11,
          v12,
          v13))
    {
      id v14 = [a1 handle];
      id v15 = [v7 handle];
      unsigned __int8 v16 = [v14 isEqualToHandle:v15];

      if ((v16 & 1) != 0)
      {
        unint64_t v17 = sub_10027A90C();
        uint64_t v19 = swift_allocError(&type metadata for ParticipantUpdateSanitizerError, v17, 0LL, 0LL);
        char v20 = 3;
      }

      else if (([a1 isPrimary] & 1) != 0 || objc_msgSend(v7, "isPrimary"))
      {
        if (([a2 isLightweightMember] & 1) == 0
          || ([a3 isLightweightMember] & 1) == 0)
        {

          return 0LL;
        }

        unint64_t v25 = sub_10027A90C();
        uint64_t v19 = swift_allocError(&type metadata for ParticipantUpdateSanitizerError, v25, 0LL, 0LL);
        char v20 = 4;
      }

      else
      {
        unint64_t v26 = sub_10027A90C();
        uint64_t v19 = swift_allocError(&type metadata for ParticipantUpdateSanitizerError, v26, 0LL, 0LL);
        char v20 = 2;
      }
    }

    else
    {
      unint64_t v21 = sub_10027A90C();
      uint64_t v19 = swift_allocError(&type metadata for ParticipantUpdateSanitizerError, v21, 0LL, 0LL);
      char v20 = 1;
    }

    *os_log_type_t v18 = v20;
  }

  else
  {
    unint64_t v22 = sub_10027A90C();
    uint64_t v19 = swift_allocError(&type metadata for ParticipantUpdateSanitizerError, v22, 0LL, 0LL);
    _BYTE *v23 = 0;
  }

  return v19;
}

void sub_10027A558()
{
}

uint64_t type metadata accessor for ParticipantUpdateSanitizerImpl()
{
  return objc_opt_self(&OBJC_CLASS___CSDParticipantUpdateSanitizerImpl);
}

id sub_10027A5F8(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v5 = [v3 initWithDictionaryRepresentation:isa];

  return v5;
}

void sub_10027A67C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(a1, a2);
  }

  [v2 initWithData:isa];

  sub_10010B978();
}

uint64_t sub_10027A6E4(void *a1)
{
  return sub_10027A6F0(a1, (SEL *)&selRef_data);
}

uint64_t sub_10027A6F0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  id v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_10027A74C(void *a1)
{
  id v1 = [a1 conversationGroupUUIDString];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10027A7AC(void *a1)
{
  id v2 = [a1 value];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_10027A818()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10027A83C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10027A860()
{
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10027A8A4()
{
}

uint64_t sub_10027A8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10027A8C4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10027A8CC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10027A900(char a1, uint64_t a2)
{
}

unint64_t sub_10027A90C()
{
  unint64_t result = qword_10044B4F8;
  if (!qword_10044B4F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037EAF0, &type metadata for ParticipantUpdateSanitizerError);
    atomic_store(result, (unint64_t *)&qword_10044B4F8);
  }

  return result;
}

id sub_10027A948(void *a1, uint64_t a2, void *a3)
{
  uint64_t v34 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a3);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  unsigned int v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  unsigned int v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = qword_100446918;
  id v15 = a3;
  if (v14 != -1) {
    swift_once(&qword_100446918, sub_1002589B4);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_1001B0D98(v16, (uint64_t)qword_100454168);
  char v20 = (os_log_s *)Logger.logObject.getter(v17, v18, v19);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Initializing ParticipantUpdateSanitizer.", v22, 2u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  uint64_t v23 = sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v23);
  id v37 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_1001E1F68( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  uint64_t v26 = sub_10027AC40(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v25, v26, v8, v24);
  (*(void (**)(char *, void, uint64_t))(v32 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v33);
  *(void *)&v15[OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_completionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003ELL,  0x8000000100375A00LL,  v13,  v10,  v7,  0LL);
  unint64_t v27 = v34;
  *(void *)&v15[OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_vouchingEnablement] = v34;
  *(void *)&v15[OBJC_IVAR___CSDParticipantUpdateSanitizerImpl_voucherManager] = a2;
  id v28 = v27;
  swift_unknownObjectRetain(a2);

  v36.receiver = v15;
  v36.super_class = ObjectType;
  id v29 = objc_msgSendSuper2(&v36, "init");

  swift_unknownObjectRelease(a2);
  return v29;
}

uint64_t sub_10027AC40(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1001B0504(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ParticipantUpdateSanitizerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ParticipantUpdateSanitizerError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10027AD54 + 4 * byte_10037E9CA[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10027AD88 + 4 * byte_10037E9C5[v4]))();
}

uint64_t sub_10027AD88(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027AD90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10027AD98LL);
  }
  return result;
}

uint64_t sub_10027ADA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10027ADACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10027ADB0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027ADB8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticipantUpdateSanitizerError()
{
  return &type metadata for ParticipantUpdateSanitizerError;
}

unint64_t sub_10027ADD8()
{
  unint64_t result = qword_10044B510;
  if (!qword_10044B510)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037EAC8, &type metadata for ParticipantUpdateSanitizerError);
    atomic_store(result, (unint64_t *)&qword_10044B510);
  }

  return result;
}

unint64_t sub_10027AE14()
{
  unint64_t result = qword_10044B518;
  if (!qword_10044B518)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037EA50, &type metadata for ParticipantUpdateSanitizerError);
    atomic_store(result, (unint64_t *)&qword_10044B518);
  }

  return result;
}

uint64_t sub_10027AE58()
{
  return swift_getObjectType(v0);
}

uint64_t sub_10027AE64@<X0>(uint64_t a1@<X8>)
{
  if (v4 >> 60 != 15) {
    return sub_10024E42C(v3, v4, a1);
  }
  uint64_t v5 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  return sub_1001A9670(a1, 1LL, 1LL, v5);
}

uint64_t sub_10027AEF4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8));
  return v1;
}

uint64_t sub_10027AF88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10027AFC4()
{
  return *(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version);
}

uint64_t sub_10027AFF8(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version) = result;
  return result;
}

id sub_10027B008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = &v3[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + 1) = a2;
  *(void *)&v3[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for GeneratorDescriptor();
  return objc_msgSendSuper2(&v6, "init");
}

BOOL sub_10027B084(uint64_t a1)
{
  if (v14)
  {
    uint64_t v2 = type metadata accessor for GeneratorDescriptor();
    if ((swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, v2, 6LL) & 1) != 0)
    {
      uint64_t v3 = v12;
      uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier);
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8);
      uint64_t v6 = *(void *)&v12[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
      uint64_t v7 = *(void *)&v12[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
      BOOL v8 = v4 == v6 && v5 == v7;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL) & 1) != 0)
      {
        uint64_t v9 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version);
        uint64_t v10 = *(void *)&v3[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];

        return v9 == v10;
      }
    }
  }

  else
  {
    sub_1001B14E8((uint64_t)v13);
  }

  return 0LL;
}

Swift::Int sub_10027B1F0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(*(void *)(v0 + OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version));
  memcpy(__dst, v4, sizeof(__dst));
  return Hasher.finalize()();
}

void sub_10027B27C()
{
}

id sub_10027B2B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GeneratorDescriptor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GeneratorDescriptor()
{
  return objc_opt_self(&OBJC_CLASS___CSDConversationLinkGeneratorDescriptor);
}

void sub_10027B318(void *a1, uint64_t a2, int a3)
{
  int v30 = a3;
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for AudioDescriptor(0LL);
  __chkstk_darwin(v5);
  uint64_t v29 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001AFF14(&qword_10044B7A8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1001AFF14(&qword_100447498);
  uint64_t v11 = __chkstk_darwin(v10);
  unsigned int v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v28 - v18;
  __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v28 - v20;
  uint64_t v22 = v3 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor, v33, 0LL, 0LL);
  sub_10027D900(v22, (uint64_t)v21);
  sub_10027C610(a1, v31, (uint64_t)v19);
  uint64_t v23 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10027D900((uint64_t)v21, (uint64_t)v9);
  sub_10027D900((uint64_t)v19, v23);
  if (sub_1001AB0AC((uint64_t)v9, 1LL, v5) == 1)
  {
    if (sub_1001AB0AC(v23, 1LL, v5) == 1)
    {
      sub_1002011C8((uint64_t)v9, &qword_100447498);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_10027D900((uint64_t)v9, (uint64_t)v16);
  if (sub_1001AB0AC(v23, 1LL, v5) == 1)
  {
    sub_10020E8B0((uint64_t)v16, type metadata accessor for AudioDescriptor);
LABEL_6:
    sub_1002011C8((uint64_t)v9, &qword_10044B7A8);
    goto LABEL_9;
  }

  uint64_t v24 = v29;
  sub_1001DBCDC(v23, v29, type metadata accessor for AudioDescriptor);
  char v25 = sub_100271CB4((uint64_t)v16, v24);
  sub_10020E8B0(v24, type metadata accessor for AudioDescriptor);
  sub_10020E8B0((uint64_t)v16, type metadata accessor for AudioDescriptor);
  sub_1002011C8((uint64_t)v9, &qword_100447498);
  if ((v25 & 1) != 0)
  {
LABEL_8:
    if ((v30 & 1) == 0) {
      goto LABEL_11;
    }
  }

id sub_10027B64C()
{
  id v1 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v2 = [objc_allocWithZone((Class)CSDTTYProviderObserver) init];
  id v3 = [(id)objc_opt_self(TUAudioSystemController) sharedAudioSystemController];
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___FTDeviceSupport);
  id result = sub_10027E0A4(v4);
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result deviceType];

    unsigned __int8 v8 = sub_10027B9B4();
    uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter);
    id v10 = sub_10027E0A4(v9);
    id v11 = [v10 queue];

    uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___CSDRouteManager);
    id result = sub_10027E0A4(v12);
    if (v3)
    {
      unsigned int v13 = result;
      id v14 = objc_allocWithZone(&OBJC_CLASS___TUFeatureFlags);
      id v15 = v3;
      id v16 = [v14 init];
      uint64_t v17 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
      uint64_t v18 = sub_10027DA74(v1, v2, v8 & 1, v7 == (id)7, v11, v13, (uint64_t)v15, v16, v17);

      return (id)v18;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10027B7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    id v5 = sub_100170614();
    uint64_t v6 = static os_log_type_t.default.getter(v5);
    os_log(_:dso:log:type:_:)( "AudioResolver: refreshing resolution due to CSDRouteManagerRoutesChangedNotification",  84LL,  2LL,  &_mh_execute_header,  v5,  v6,  _swiftEmptyArrayStorage);

    sub_10027BA14(0);
    return swift_release(v4);
  }

  return result;
}

uint64_t sub_10027B894(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a3 += 16LL;
  swift_beginAccess(a3, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *(void **)(result + 16);
    *uint64_t v9 = v12;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
    id v13 = v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)(v9);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    if ((v12 & 1) != 0)
    {
      id v14 = a1;
      sub_10027B318(a1, a2, 0);

      return swift_release(v11);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

id sub_10027B9B4()
{
  id result = [(id)objc_opt_self(FTDeviceSupport) sharedInstance];
  if (result)
  {
    id v1 = result;
    id v2 = [result deviceType];

    return (id)(v2 != (id)7);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10027BA14(int a1)
{
  int v21 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10027E054();
  uint64_t v6 = type metadata accessor for DispatchQoS(v5);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10022D01C();
  uint64_t v12 = *(void **)(v1 + 16);
  *id v3 = v12;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))( v3,  enum case for DispatchPredicate.notOnQueue(_:),  v10);
  id v20 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v3);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v3, v10);
  if ((v12 & 1) != 0)
  {
    uint64_t v14 = swift_allocObject(&unk_1003E51E8, 25LL, 7LL);
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    *(_BYTE *)(v14 + 24) = v21 & 1;
    void aBlock[4] = sub_10027D8DC;
    uint64_t v25 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003E5200;
    id v15 = _Block_copy(aBlock);
    uint64_t v16 = swift_retain(v1);
    static DispatchQoS.unspecified.getter(v16);
    uint64_t v23 = _swiftEmptyArrayStorage;
    unint64_t v17 = sub_1001E8E70();
    uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    unint64_t v19 = sub_1001C94D0();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v4, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v2);
    _Block_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v2, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release(v25);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10027BC3C(uint64_t a1, int a2)
{
}

uint64_t sub_10027BC68(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v2 + 16);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      id v11 = a1;
      if ((sub_10027BD68((uint64_t)v11) & 1) == 0)
      {

        a1 = 0LL;
      }
    }

    uint64_t v12 = sub_10027BE18(*(void **)(v2 + 24), *(void **)(v2 + 32), a1, *(_BYTE *)(v2 + 88));

    return (uint64_t)v12;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10027BD68(uint64_t a1)
{
  uint64_t v2 = (uint64_t)[v1 callDuration];
  if (v3 <= 0.0)
  {
    uint64_t v2 = (uint64_t)sub_1001DCF70(v2, "isOutgoing");
    if ((v2 & 1) == 0)
    {
      uint64_t v2 = (uint64_t)sub_1001DCF70(v2, "disconnectedReason");
      if ((_DWORD)v2 != 14) {
        return 0LL;
      }
    }
  }

  uint64_t v4 = (uint64_t)sub_1001DCF70(v2, "hasAudioFinished");
  if ((v4 & 1) != 0) {
    return 0LL;
  }
  id v6 = sub_1001DCF70(v4, "provider");
  id v5 = [v6 isSystemProvider];

  return v5;
}

void *sub_10027BE18(void *a1, void *a2, void *a3, unsigned __int8 a4)
{
  id v5 = (void *)sub_10027E028((uint64_t)sub_10027C268);
  sub_10027E014();
  id v6 = sub_10027DFE8();
  sub_10027E030((uint64_t)v6);
  uint64_t v7 = (void *)sub_10027E028((uint64_t)sub_10027C314);
  sub_10027E014();
  id v8 = sub_10027DFE8();
  sub_10027E030((uint64_t)v8);
  id v9 = (void *)sub_10027E028((uint64_t)sub_10027C3C4);
  sub_10027E014();
  id v10 = sub_10027DFE8();
  sub_10027E030((uint64_t)v10);
  id v11 = (void *)sub_10027E028((uint64_t)sub_10027C420);
  sub_10027E014();
  id v12 = sub_10027DFE8();
  sub_10027E030((uint64_t)v12);
  uint64_t v13 = (void *)sub_10027E028((uint64_t)sub_10027C480);
  sub_10027E014();
  id v14 = sub_10027DFE8();
  sub_10027E030((uint64_t)v14);
  id v15 = (void *)sub_10027E028((uint64_t)sub_10027C4C8);
  sub_10027E014();
  id v16 = sub_10027DFE8();
  sub_10027E030((uint64_t)v16);
  uint64_t v128 = (void *)sub_10027E028((uint64_t)sub_10027C514);
  sub_10027E014();
  id v17 = v5;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v18);
  }
  uint64_t v20 = sub_10027E038();
  uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
  sub_10027E004(v21, v22, v23, v24, v25, v26, v27, v28, v119);
  id v29 = v7;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v30);
  }
  uint64_t v31 = sub_10027E038();
  uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
  sub_10027E004(v32, v33, v34, v35, v36, v37, v38, v39, v120);
  id v40 = v9;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v41);
  }
  uint64_t v42 = sub_10027E038();
  uint64_t v43 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v40);
  sub_10027E004(v43, v44, v45, v46, v47, v48, v49, v50, v121);
  id v51 = v11;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v52);
  }
  uint64_t v53 = sub_10027E038();
  uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
  sub_10027E004(v54, v55, v56, v57, v58, v59, v60, v61, v122);
  id v62 = v13;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v63);
  }
  int v64 = a4;
  uint64_t v65 = sub_10027E038();
  uint64_t v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v62);
  sub_10027E004(v66, v67, v68, v69, v70, v71, v72, v73, v123);
  id v74 = v15;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v75);
  }
  uint64_t v76 = sub_10027E038();
  uint64_t v77 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v76, v74);
  sub_10027E004(v77, v78, v79, v80, v81, v82, v83, v84, v124);
  if (v64 == 2)
  {
  }

  else if ((v64 & 1) == 0)
  {
    goto LABEL_20;
  }

  id v85 = v128;
  sub_10027E00C();
  sub_10027DFD8();
  if (v19) {
    sub_10027DFAC(v86);
  }
  uint64_t v87 = sub_10027E038();
  uint64_t v88 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v87, v85);
  sub_10027E004(v88, v89, v90, v91, v92, v93, v94, v95, v125);
LABEL_20:
  id v96 = a3;
  sub_10027E00C();
  unint64_t v98 = _swiftEmptyArrayStorage[2];
  unint64_t v97 = _swiftEmptyArrayStorage[3];
  if (v98 >= v97 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1LL);
  }
  uint64_t v99 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v96);
  sub_10027E004(v99, v100, v101, v102, v103, v104, v105, v106, v125);
  uint64_t v107 = _swiftEmptyArrayStorage[2];
  if (!v107)
  {
LABEL_26:

    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_32:

    unsigned int v114 = 0LL;
    uint64_t v115 = v128;
    goto LABEL_33;
  }

  uint64_t v108 = 0LL;
  while (1)
  {
    id v109 = (void *)_swiftEmptyArrayStorage[v108 + 4];
    if (v109) {
      break;
    }
    if (v107 == ++v108) {
      goto LABEL_26;
    }
  }

  id v110 = v109;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  id v111 = v110;
  uint64_t v112 = (uint64_t)[v111 isEndpointOnCurrentDevice];
  if ((v112 & 1) == 0
    || (id v113 = sub_1001DCF70(v112, "status"), (_DWORD)v113 != 4)
    && sub_1001DCF70((uint64_t)v113, "isTTY")
    && [a2 transportMethod] == (id)2)
  {

    id v74 = v62;
    id v62 = v51;
    id v51 = v40;
    id v40 = v29;
    id v29 = v17;
    goto LABEL_32;
  }

  id v117 = v111;
  unsigned int v118 = [v117 isScreening];

  if (v118) {
    uint64_t v115 = v117;
  }
  else {
    uint64_t v115 = v128;
  }
  if (v118) {
    unsigned int v114 = v128;
  }
  else {
    unsigned int v114 = v109;
  }
LABEL_33:

  return v114;
}

id sub_10027C268(void *a1)
{
  id v2 = [a1 provider];
  unsigned int v3 = [v2 isSystemProvider];

  if (v3 && [a1 status] == 1)
  {
    id result = [a1 isConnecting];
    if (!(_DWORD)result) {
      return result;
    }
  }

  return 0LL;
}

id sub_10027C314(void *a1)
{
  id v2 = [a1 provider];
  unsigned int v3 = [v2 isSystemProvider];

  if (v3 && [a1 status] == 1)
  {
    id result = [a1 isConnecting];
    if (!(_DWORD)result) {
      return result;
    }
  }

  return 0LL;
}

id sub_10027C3C4(void *a1)
{
  id result = [a1 isConnected];
  if ((_DWORD)result) {
    return [a1 isVideo];
  }
  return result;
}

id sub_10027C420(void *a1)
{
  id result = [a1 isConnected];
  if ((_DWORD)result) {
    return (id)([a1 isVideo] ^ 1);
  }
  return result;
}

id sub_10027C480(void *a1)
{
  else {
    return 0LL;
  }
}

uint64_t sub_10027C4C8(void *a1)
{
  else {
    return 0LL;
  }
}

uint64_t sub_10027C514(uint64_t a1)
{
  return sub_10027C538(a1) & 1;
}

uint64_t sub_10027C538(uint64_t a1)
{
  id v1 = sub_1001DCF70(a1, "provider");
  unsigned int v2 = [v1 supportsCurrentPlatform];

  if (!v2) {
    return 0LL;
  }
  id v4 = sub_1001DCF70(v3, "status");
  if ((_DWORD)v4 == 4) {
    return 1LL;
  }
  id v6 = sub_1001DCF70((uint64_t)v4, "provider");
  unsigned __int8 v7 = [v6 isSystemProvider];

  if ((v7 & 1) != 0) {
    return 0LL;
  }
  id v9 = sub_1001DCF70(v8, "status");
  if ((_DWORD)v9 != 1) {
    return 0LL;
  }
  uint64_t result = (uint64_t)sub_1001DCF70((uint64_t)v9, "isConnecting");
  if ((_DWORD)result) {
    return sub_1001DCF70(result, "isConnected") ^ 1;
  }
  return result;
}

void sub_10027C610(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3;
  uint64_t v210 = a3;
  sub_1001AFF14(&qword_100447EA0);
  sub_1001B0E88();
  __chkstk_darwin(v9);
  sub_1001D9040();
  uint64_t v201 = v10;
  uint64_t v205 = type metadata accessor for Date(0LL);
  uint64_t v199 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  sub_1001D9040();
  uint64_t v197 = v11;
  type metadata accessor for SoundDescriptor(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v12);
  sub_1001BB4B4();
  uint64_t v200 = (uint64_t *)v13;
  sub_1001BB5CC();
  __chkstk_darwin(v14);
  uint64_t v204 = (char *)&v188 - v15;
  sub_1001BB5CC();
  __chkstk_darwin(v16);
  uint64_t v203 = (char *)&v188 - v17;
  sub_1001BB5CC();
  __chkstk_darwin(v18);
  uint64_t v202 = (char *)&v188 - v19;
  sub_1001BB5CC();
  __chkstk_darwin(v20);
  uint64_t v206 = (uint64_t)&v188 - v21;
  type metadata accessor for SoundDescriptorAction(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v22);
  sub_1001BB4B4();
  uint64_t v208 = v23;
  sub_1001BB5CC();
  __chkstk_darwin(v24);
  uint64_t v207 = (uint64_t)&v188 - v25;
  sub_1001AFF14((uint64_t *)&unk_10044B7B0);
  sub_1001B0E88();
  __chkstk_darwin(v26);
  sub_1001D9040();
  uint64_t v198 = v27;
  sub_1001AFF14(&qword_100447488);
  sub_1001B0E88();
  __chkstk_darwin(v28);
  uint64_t v29 = sub_10027E054();
  uint64_t v211 = (int *)type metadata accessor for AudioDescriptor(v29);
  sub_1001B0E88();
  __chkstk_darwin(v30);
  sub_10022D01C();
  uint64_t v31 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v32 = *(v31 - 1);
  __chkstk_darwin(v31);
  uint64_t v34 = (uint64_t *)((char *)&v188 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = *(void **)(v6 + 16);
  *uint64_t v34 = v35;
  (*(void (**)(void *, void, void *))(v32 + 104))( v34,  enum case for DispatchPredicate.onQueue(_:),  v31);
  id v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v34);
  (*(void (**)(void *, void *))(v32 + 8))(v34, v31);
  if ((v35 & 1) == 0)
  {
    __break(1u);
    goto LABEL_73;
  }

  uint64_t v37 = sub_10027BC68(a1);
  if (!v37)
  {
LABEL_28:
    sub_10027E070(v210, v38, v39, (uint64_t)v211);
    return;
  }

  uint64_t v31 = (void *)v37;
  id v40 = *(void **)(v6 + 80);
  id v41 = [v40 hasInEarRouteInTipiWithCompanionWatch];
  if ((_DWORD)v41)
  {
    id v42 = sub_1001DCF70((uint64_t)v41, "provider");
    unsigned __int8 v43 = [v42 isSystemProvider];

    char v44 = v43 ^ 1;
  }

  else
  {
    char v44 = 0;
  }

  uint64_t v45 = v31;
  sub_100295A4C(v45, v44, (uint64_t)v219);
  sub_10027D948((uint64_t)v219, (uint64_t)v218);
  sub_10027D948((uint64_t)v219, (uint64_t)v220);
  if (sub_1001E42E0((uint64_t)v220) == 1)
  {
    if (qword_100446940 == -1)
    {
LABEL_8:
      uint64_t v46 = sub_1001B0E98();
      sub_1001B0D98(v46, (uint64_t)qword_1004541E0);
      id v47 = sub_10027E0CC();
      sub_10022D0E8();
      os_log_type_t v48 = sub_1001B105C();
      if (sub_1001BB5B0(v48))
      {
        uint64_t v49 = sub_1001B0E78(12LL);
        uint64_t v50 = sub_1001B0E78(32LL);
        uint64_t v216 = v50;
        sub_10027E0B8(4.8149e-34);
        id v52 = sub_1001B115C(v51, "uniqueProxyIdentifier");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        sub_10027E0AC();
        v221[0] = a2;
        v221[1] = 12LL;
        uint64_t v53 = String.init<A>(reflecting:)(v221, &type metadata for String);
        v221[0] = sub_1001D7CF0(v53, v54, &v216);
        sub_10027E098((uint64_t)v221, (uint64_t)&v221[1]);

        sub_1001B0EC0();
        sub_1002111C4( (void *)&_mh_execute_header,  v55,  v56,  "Unable to create interruption descriptor for call with proxy identifier %s");
        sub_1002111F8();
        sub_1001B0E60(v50);
        sub_1001B0E60(v49);

        goto LABEL_28;
      }

LABEL_27:
      goto LABEL_28;
    }

uint64_t sub_10027D588(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0 && a3 == a1) {
    return 1LL;
  }
  if (a3 == 17) {
    return (a2 & 1) == 0 && a1 == 13;
  }
  return a3 == 13 && (a2 & 1) == 0 && a1 == 17;
}

unint64_t sub_10027D5D0(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AudioDescriptor(0LL);
  __chkstk_darwin(v5);
  unsigned __int8 v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v2 + 88) == 1 && [a1 status] == 4)
  {
    unint64_t v8 = (unint64_t)[a1 shouldSuppressRingtone];
    sub_1001DBD08(a2, (uint64_t)v7, type metadata accessor for AudioDescriptor);
    if ((_DWORD)v8) {
      unint64_t v8 = v7[*(int *)(v5 + 32)];
    }
  }

  else
  {
    sub_1001DBD08(a2, (uint64_t)v7, type metadata accessor for AudioDescriptor);
    unint64_t v8 = 0LL;
  }

  sub_10020E8B0((uint64_t)v7, type metadata accessor for AudioDescriptor);
  return v8;
}

uint64_t sub_10027D6C4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  sub_1001B0438((void *)(v0 + 40));
  swift_unknownObjectRelease(*(void *)(v0 + 80));
  swift_unknownObjectRelease(*(void *)(v0 + 96));
  sub_1002011C8(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundDate, &qword_100447EA0);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_soundDescriptorActionResolver));
  sub_1002011C8(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor, &qword_100447498);
  sub_1001B5D3C( *(void *)(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler),  *(void *)(v0 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler + 8));
  return v0;
}

uint64_t sub_10027D75C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10027D780()
{
  return type metadata accessor for AudioResolver(0LL);
}

uint64_t type metadata accessor for AudioResolver(uint64_t a1)
{
  uint64_t result = qword_10044B590;
  if (!qword_10044B590) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudioResolver);
  }
  return result;
}

void sub_10027D7C0(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = "\b";
  void v6[2] = "\b";
  void v6[3] = &unk_10037EBE8;
  v6[4] = "\b";
  void v6[5] = &unk_10037EC00;
  v6[6] = "\b";
  sub_100271C68( 319LL,  (unint64_t *)&qword_10044B5A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v6[7] = *(void *)(v2 - 8) + 64LL;
    v6[8] = &unk_10037EC18;
    v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_100271C68(319LL, (unint64_t *)&unk_10044B5A8, type metadata accessor for AudioDescriptor);
    if (v5 <= 0x3F)
    {
      v6[10] = *(void *)(v4 - 8) + 64LL;
      v6[11] = &unk_10037EC30;
      swift_updateClassMetadata2(a1, 256LL, 12LL, v6, a1 + 80);
    }
  }

uint64_t sub_10027D8B8()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_10027D8DC()
{
}

uint64_t sub_10027D8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10027D8F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10027D900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027D948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_10044B7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027D990(uint64_t a1)
{
  return a1;
}

uint64_t sub_10027D9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_10027DA3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1001AFF14(a3);
  sub_1001DBE58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_1001AA978();
}

uint64_t sub_10027DA74( void *a1, void *a2, char a3, char a4, void *a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  void v49[3] = sub_10027DDEC();
  void v49[4] = &off_1003E09D0;
  v49[0] = a7;
  uint64_t v17 = a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundDate;
  uint64_t v18 = type metadata accessor for Date(0LL);
  sub_1001A9670(v17, 1LL, 1LL, v18);
  uint64_t v19 = a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_lastPlayedSoundType;
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  uint64_t v20 = a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolvedDescriptor;
  uint64_t v21 = type metadata accessor for AudioDescriptor(0LL);
  sub_1001A9670(v20, 1LL, 1LL, v21);
  uint64_t v22 = (void *)(a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  *uint64_t v22 = 0LL;
  v22[1] = 0LL;
  *(void *)(a9 + 24) = a1;
  *(void *)(a9 + 32) = a2;
  *(_BYTE *)(a9 + 88) = a3;
  *(void *)(a9 + 96) = a8;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  sub_1001BA03C((uint64_t)v49, a9 + 40);
  *(void *)(a9 + 80) = a6;
  uint64_t v23 = type metadata accessor for SoundDescriptorActionResolver();
  uint64_t v24 = swift_allocObject(v23, 25LL, 7LL);
  uint64_t v25 = 0LL;
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v24 + 24) = a4;
  *(void *)(a9 + OBJC_IVAR____TtC13callservicesd13AudioResolver_soundDescriptorActionResolver) = v24;
  uint64_t v26 = *(void **)(a9 + 24);
  uint64_t v27 = &stru_100000020;
  do
  {
    uint64_t v28 = *(uint64_t *)((char *)&off_1003DCC38 + v27);
    if ((v28 & ~v25) == 0) {
      uint64_t v28 = 0LL;
    }
    v25 |= v28;
    v27 += 8LL;
  }

  while (v27 != 224);
  id v29 = a1;
  id v30 = a2;
  id v42 = a8;
  id v31 = a5;
  id v32 = a6;
  [v26 setTriggers:v25];
  uint64_t v33 = *(void **)(a9 + 24);
  objc_msgSend(v33, "setTriggers:", (unint64_t)objc_msgSend(v33, "triggers") | 0x20000000);
  objc_msgSend(v33, "setTriggers:", (unint64_t)objc_msgSend(v33, "triggers") | 0x600000);
  id v34 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v35 = swift_allocObject(&unk_1003E5238, 24LL, 7LL);
  swift_weakInit(v35 + 16, a9);
  id v47 = sub_10027DE4C;
  uint64_t v48 = v35;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256LL;
  uint64_t v45 = sub_100209DB4;
  uint64_t v46 = &unk_1003E5250;
  id v36 = _Block_copy(&aBlock);
  swift_release(v48);
  id v37 =  [v34 addObserverForName:@"CSDRouteManagerRoutesChangedNotification" object:0 queue:0 usingBlock:v36];
  _Block_release(v36);
  swift_unknownObjectRelease(v37);

  uint64_t v38 = *(void **)(a9 + 24);
  uint64_t v39 = swift_allocObject(&unk_1003E5238, 24LL, 7LL);
  swift_weakInit(v39 + 16, a9);
  id v47 = sub_10027DE54;
  uint64_t v48 = v39;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256LL;
  uint64_t v45 = sub_10025A054;
  uint64_t v46 = &unk_1003E5278;
  id v40 = _Block_copy(&aBlock);
  swift_release(v48);
  [v38 setCallChanged:v40];
  _Block_release(v40);

  sub_1001B0438(v49);
  return a9;
}

unint64_t sub_10027DDEC()
{
  unint64_t result = qword_10044B7D0;
  if (!qword_10044B7D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TUAudioSystemController);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10044B7D0);
  }

  return result;
}

uint64_t sub_10027DE28()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10027DE4C(uint64_t a1)
{
  return sub_10027B7F8(a1, v1);
}

uint64_t sub_10027DE54(void *a1, uint64_t a2)
{
  return sub_10027B894(a1, a2, v2);
}

void *initializeBufferWithCopyOfBuffer for AudioResolver.Context(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for AudioResolver.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for AudioResolver.Context(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioResolver.Context(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(sub_1001B03C0(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_1001B03C0(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioResolver.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AudioResolver.Context()
{
  return &type metadata for AudioResolver.Context;
}

uint64_t sub_10027DFAC@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

uint64_t sub_10027DFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 2swift_weakDestroy(v0 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 216, v6 + 8, v5, a4);
}

  ;
}

id sub_10027DFE8()
{
  return [v0 *(SEL *)(v1 + 3048)];
}

uint64_t sub_10027DFF4()
{
  return String.init<A>(reflecting:)(v0 + 216, v1);
}

uint64_t sub_10027E004( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10027E00C()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_10027E014()
{
  return swift_unknownObjectRelease(v0);
}

void sub_10027E01C(uint64_t a1)
{
}

uint64_t sub_10027E028(uint64_t a1)
{
  return sub_100268494(a1, 0LL);
}

uint64_t sub_10027E030(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10027E038()
{
  return v0;
}

uint64_t sub_10027E044(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 + 240));
}

uint64_t sub_10027E04C()
{
  return sub_10027D990(v0 + 568);
}

uint64_t sub_10027E054()
{
  return 0LL;
}

uint64_t sub_10027E070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A9670(a1, 1LL, 1LL, a4);
}

uint64_t sub_10027E07C()
{
  return v0;
}

void sub_10027E08C(uint64_t a1)
{
}

uint64_t sub_10027E098(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, *(void *)(v2 + 168), v3);
}

id sub_10027E0A4(void *a1)
{
  return [a1 *(SEL *)(v1 + 4048)];
}

void sub_10027E0AC()
{
}

void sub_10027E0B8(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v1 + 168) = v2 + 1;
}

id sub_10027E0CC()
{
  return v0;
}

id sub_10027E104()
{
  return [(id)objc_opt_self(CSDMomentsController) isFaceTimePhotosAvailable];
}

uint64_t type metadata accessor for FaceTimeIDSProviderDelegateCapabilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDFaceTimeIDSProviderDelegateCapabilities);
}

uint64_t sub_10027E16C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for () + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10027E1F8()
{
  uint64_t v1 = v0 + qword_10044B870;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + qword_10044B878 + 8));
  return v0;
}

uint64_t sub_10027E258()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for Cache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cache);
}

uint64_t sub_10027E288(uint64_t a1)
{
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 0LL, 2LL, v5, a1 + 40);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_10027E310(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v7 + 64) + v10;
  int v13 = *(_DWORD *)(v7 + 80) | v10;
  uint64_t v14 = v13;
  int v15 = v13 & 0x100000;
  if (v14 > 7 || v15 != 0 || (v12 & (unint64_t)~v11) + *(void *)(v9 + 64) > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v14 + 16) & ~v14));
    swift_retain(v18);
  }

  else
  {
    uint64_t v19 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)a1 + v12) & v19,  ((unint64_t)a2 + v12) & v19,  v8);
  }

  return a1;
}

uint64_t sub_10027E3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((*(void *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

uint64_t sub_10027E44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10027E4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10027E544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10027E5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10027E63C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = v14 + v15;
  if (a2 <= v12) {
    goto LABEL_23;
  }
  uint64_t v17 = (v16 & ~v15) + *(void *)(v10 + 64);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v20 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      int v19 = *(_DWORD *)(a1 + v17);
      if (!v19) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v20 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v20 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
        {
          uint64_t v23 = a1;
          uint64_t v9 = v13;
        }

        else
        {
          uint64_t v23 = (v16 + a1) & ~v15;
          uint64_t v8 = v11;
        }

        return sub_1001AB0AC(v23, v8, v9);
      }

      return 0LL;
    }
  }

  int v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17)) {
    goto LABEL_23;
  }
LABEL_14:
  int v21 = (v19 - 1) << v18;
  if ((_DWORD)v17)
  {
    else {
      int v22 = 4;
    }
    __asm { BR              X12 }
  }

  return v12 + v21 + 1;
}

void sub_10027E7C4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for DispatchTime(0LL) - 8);
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  char v12 = 8 * v11;
  if (a3 <= v10)
  {
    unsigned int v13 = 0;
  }

  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = &dword_100000004;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }
  }

  else
  {
    unsigned int v13 = &_mh_execute_header.magic + 1;
  }

  if (v10 < a2)
  {
    unsigned int v14 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v16 = v14 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }

        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }

        else
        {
          *a1 = v16;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X14 }

uint64_t type metadata accessor for Cache.CacheItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cache.CacheItem);
}

uint64_t sub_10027E9D8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = sub_1001B4B08(v1);
    int v6 = v5;
    uint64_t result = sub_1001B4B94(0LL, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
    if (v4 < 0 || v4 >= 1LL << *(_BYTE *)(v1 + 32))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v7 = v1 + 64;
      uint64_t v23 = v1;
      while ((*(void *)(v7 + 8 * ((unint64_t)v4 >> 6)) & (1LL << v4)) != 0)
      {
        if (v6 != *(_DWORD *)(v1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v24 = v2;
        int v8 = v6;
        uint64_t v9 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v4);
        uint64_t v11 = *v9;
        uint64_t v10 = v9[1];
        char v12 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v4);
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        swift_bridgeObjectRetain_n(v14, 2LL);
        swift_bridgeObjectRetain(v10);
        id v15 = sub_10024734C(2LL, v13, v14);
        id v16 = objc_allocWithZone(&OBJC_CLASS___CXLabeledHandle);
        id v17 = sub_100280960(v15, v11, v10);
        uint64_t v18 = swift_bridgeObjectRelease(v14);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        uint64_t v19 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        uint64_t v20 = v19;
        uint64_t v1 = v23;
        uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
        uint64_t result = specialized ContiguousArray._endMutation()(v21);
        uint64_t v22 = -1LL << *(_BYTE *)(v23 + 32);
        if (v4 >= -v22) {
          goto LABEL_18;
        }
        if (v8 != *(_DWORD *)(v23 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v4, v7, ~v22);
        uint64_t v2 = v24 - 1;
        if (v24 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        uint64_t v4 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v6 = *(_DWORD *)(v23 + 36);
          if (result < 1LL << *(_BYTE *)(v23 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

double sub_10027EBEC()
{
  double result = sub_10027EC28(1.5);
  qword_10044B980 = *(void *)&result;
  return result;
}

float sub_10027EC28(float a1)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v3 = objc_msgSend(v2, "tu_defaults");
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v10, v5);
    swift_unknownObjectRelease(v5);
    sub_1001BB478((uint64_t)v10, (uint64_t *)&unk_1004474B0);
    id v6 = [v2 standardUserDefaults];
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 floatForKey:v7];
    a1 = v8;
  }

  else
  {
    memset(v10, 0, sizeof(v10));
    sub_1001BB478((uint64_t)v10, (uint64_t *)&unk_1004474B0);
  }

  return a1;
}

double sub_10027ED60()
{
  double result = sub_10027EC28(0.5);
  qword_10044B988 = *(void *)&result;
  return result;
}

uint64_t sub_10027ED9C()
{
  uint64_t result = sub_10027EDF0(0xD00000000000001FLL, 0x8000000100375F00LL, 0x313639383034312BLL, 0xEC00000032343339LL);
  qword_10044B990 = result;
  *(void *)algn_10044B998 = v1;
  return result;
}

uint64_t sub_10027EDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v7 = objc_msgSend(v6, "tu_defaults");
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 objectForKey:v8];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(v14, v9);
    swift_unknownObjectRelease(v9);
    sub_1001BB478((uint64_t)v14, (uint64_t *)&unk_1004474B0);
    id v10 = [v6 standardUserDefaults];
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 stringForKey:v11];

    if (v12)
    {
      a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    memset(v14, 0, sizeof(v14));
    sub_1001BB478((uint64_t)v14, (uint64_t *)&unk_1004474B0);
    swift_bridgeObjectRetain(a4);
  }

  return a3;
}

char *sub_10027EF64(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v4 = OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue;
  sub_1001B4C00((uint64_t)ObjectType, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v5 = v1;
  uint64_t v6 = static OS_dispatch_queue.main.getter(v5);
  *(void *)&v1[v4] = v6;
  *(_DWORD *)&v5[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingAudioCallNotifyToken] = 0;
  *(_DWORD *)&v5[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingVideoCallNotifyToken] = 0;
  sub_1001B4C00(v6, (unint64_t *)&unk_10044B9F0, &OBJC_CLASS___CXInProcessProvider_ptr);
  swift_getObjectType(v5);
  id v7 = sub_10027F0A4();
  id v8 = a1;
  id v9 = sub_10027F204(v7, v8);
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider] = v9;
  id v10 = v9;

  v15.receiver = v5;
  v15.super_class = ObjectType;
  NSString v11 = (char *)objc_msgSendSuper2(&v15, "init");
  uint64_t v12 = *(void *)&v11[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue];
  uint64_t v13 = v11;
  [v10 setDelegate:v13 queue:v12];
  sub_10027F25C();

  return v13;
}

id sub_10027F0A4()
{
  id v0 = [objc_allocWithZone(CXProviderConfiguration) init];
  [v0 setMaximumCallGroups:1];
  [v0 setMaximumCallsPerCallGroup:1];
  [v0 setSupportsAudioOnly:1];
  [v0 setSupportsVideo:1];
  [v0 setIncludesCallsInRecents:0];
  sub_10024C53C((uint64_t)&off_1003DCE90);
  CXProviderConfiguration.supportedHandleTypes.setter(v1);
  uint64_t v2 = sub_10027F424();
  sub_1001B4B94(0LL, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  [v0 setEmergencyHandles:isa];

  uint64_t v4 = sub_10027F650();
  sub_1001B4B94(0LL, &qword_10044BA00, &OBJC_CLASS___CXLabeledHandle_ptr);
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  [v0 setEmergencyLabeledHandles:v5];

  return v0;
}

id sub_10027F204(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithConfiguration:a1 callSource:a2];

  return v5;
}

void sub_10027F25C()
{
  uint64_t v1 = (int *)(v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingAudioCallNotifyToken);
  swift_beginAccess( v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingAudioCallNotifyToken,  v14,  33LL,  0LL);
  uint64_t v2 = *(dispatch_queue_s **)(v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue);
  uint64_t v3 = swift_allocObject(&unk_1003E54F8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v3 + 16);
  uint64_t v12 = sub_1002808B0;
  uint64_t v13 = v3;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256LL;
  id v10 = sub_1002808C8;
  NSString v11 = &unk_1003E5510;
  uint64_t v4 = _Block_copy(&aBlock);
  swift_release(v13);
  notify_register_dispatch("triggerIncomingSuperboxAudioCall", v1, v2, v4);
  swift_endAccess(v14);
  _Block_release(v4);
  id v5 = (int *)(v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingVideoCallNotifyToken);
  swift_beginAccess( v0 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_incomingVideoCallNotifyToken,  v14,  33LL,  0LL);
  uint64_t v6 = swift_allocObject(&unk_1003E54F8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v6 + 16);
  uint64_t v12 = sub_1002808B0;
  uint64_t v13 = v6;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256LL;
  id v10 = sub_1002808C8;
  NSString v11 = &unk_1003E5538;
  id v7 = _Block_copy(&aBlock);
  swift_release(v13);
  notify_register_dispatch("triggerIncomingSuperboxVideoCall", v5, v2, v7);
  swift_endAccess(v14);
  _Block_release(v7);
}

void *sub_10027F424()
{
  id v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "tu_defaults");
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 arrayForKey:v1];

  if (v2
    && (uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8),
        v2,
        uint64_t v4 = sub_10028F6D0(),
        swift_bridgeObjectRelease(v3),
        v4))
  {
    uint64_t v5 = v4[2];
    if (v5)
    {
      specialized ContiguousArray.reserveCapacity(_:)(v5);
      sub_1001B4B94(0LL, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
      uint64_t v6 = v4 + 5;
      do
      {
        uint64_t v7 = *(v6 - 1);
        uint64_t v8 = *v6;
        swift_bridgeObjectRetain(*v6);
        id v9 = sub_10024734C(2LL, v7, v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        uint64_t v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        v6 += 2;
        --v5;
      }

      while (v5);
      uint64_t v12 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v4);
    }

    else
    {
      swift_bridgeObjectRelease(v4);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
    uint64_t v14 = swift_allocObject(v13, 48LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_10037B210;
    sub_1001B4B94(0LL, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
    *(void *)(v14 + 32) = sub_10024734C(2LL, 3223865LL, 0xE300000000000000LL);
    id v15 = sub_10024734C(2LL, 3289393LL, 0xE300000000000000LL);
    *(void *)(v14 + 40) = v15;
    specialized Array._endMutation()(v15, v16, v17, v18, v19, v20, v21, v22);
    return (void *)v14;
  }

  return v12;
}

void *sub_10027F650()
{
  id v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "tu_defaults");
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 dictionaryForKey:v1];

  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  unint64_t v4 = sub_10027F758(v3);
  swift_bridgeObjectRelease(v3);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_10027E9D8(v4);
  swift_bridgeObjectRelease(v4);
  return (void *)v5;
}

unint64_t sub_10027F758(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1001AFF14(&qword_10044BA08);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  sub_10023BD50(v41);
  uint64_t v4 = v41[0];
  int64_t v5 = v41[3];
  unint64_t v6 = v41[4];
  int64_t v33 = (unint64_t)(v41[2] + 64LL) >> 6;
  uint64_t v34 = v41[1];
  uint64_t v7 = &v40;
  unint64_t result = swift_bridgeObjectRetain(a1);
  id v9 = (char *)&type metadata for Any + 8;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v10 = (v6 - 1) & v6;
  unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
  for (i = v5; ; unint64_t v11 = __clz(__rbit64(v14)) + (i << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_1001B03FC(*(void *)(v4 + 56) + 32 * v11, (uint64_t)v7);
    v39[0] = v18;
    v39[1] = v17;
    sub_1001B03FC((uint64_t)v7, (uint64_t)v38);
    swift_bridgeObjectRetain_n(v17, 2LL);
    sub_1001BB478((uint64_t)v39, (uint64_t *)&unk_10044BA10);
    if (!swift_dynamicCast(&v36, v38, v9, &type metadata for String, 6LL))
    {
      uint64_t v36 = 0LL;
      uint64_t v37 = 0LL;
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v37);
      sub_1001B4B8C(v4);
      swift_release(v3);
      return 0LL;
    }

    unint64_t v35 = v10;
    int64_t v19 = i;
    uint64_t v20 = v36;
    uint64_t v21 = v37;
    unint64_t result = sub_1001D7094(v18, v17);
    unint64_t v22 = result;
    if ((v23 & 1) != 0)
    {
      uint64_t v24 = v7;
      uint64_t v25 = v4;
      uint64_t v26 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v26[1]);
      uint64_t *v26 = v18;
      v26[1] = v17;
      uint64_t v27 = (void *)(v3[7] + 16 * v22);
      unint64_t result = swift_bridgeObjectRelease(v27[1]);
      *uint64_t v27 = v20;
      v27[1] = v21;
      uint64_t v4 = v25;
      uint64_t v7 = v24;
      id v9 = (char *)&type metadata for Any + 8;
      goto LABEL_28;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v28 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v28 = v18;
    v28[1] = v17;
    id v29 = (void *)(v3[7] + 16 * result);
    *id v29 = v20;
    v29[1] = v21;
    uint64_t v30 = v3[2];
    BOOL v31 = __OFADD__(v30, 1LL);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_34;
    }
    v3[2] = v32;
LABEL_28:
    int64_t v5 = v19;
    unint64_t v6 = v35;
    if (v35) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_35;
    }
    if (v13 >= v33) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v34 + 8 * v13);
    int64_t i = v5 + 1;
    if (!v14)
    {
      int64_t i = v5 + 2;
      if (v5 + 2 >= v33) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v34 + 8 * i);
      if (!v14)
      {
        int64_t i = v5 + 3;
        if (v5 + 3 >= v33) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v34 + 8 * i);
        if (!v14)
        {
          int64_t i = v5 + 4;
          if (v5 + 4 >= v33) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v34 + 8 * i);
          if (!v14)
          {
            int64_t i = v5 + 5;
            if (v5 + 5 >= v33) {
              goto LABEL_31;
            }
            unint64_t v14 = *(void *)(v34 + 8 * i);
            if (!v14)
            {
              int64_t v15 = v5 + 6;
              while (v15 < v33)
              {
                unint64_t v14 = *(void *)(v34 + 8 * v15++);
                if (v14)
                {
                  int64_t i = v15 - 1;
                  goto LABEL_21;
                }
              }

void sub_10027FA94()
{
}

uint64_t type metadata accessor for CSDSuperboxProviderDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd27CSDSuperboxProviderDelegate);
}

void sub_10027FB24(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001B0F00();
  uint64_t v8 = v7 - v6;
  uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_1001B10F0();
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  id v17 = [a2 fulfill];
  uint64_t v25 = *(void *)&v2[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue];
  static DispatchTime.now()(v17);
  if (qword_100446978 != -1) {
    swift_once(&qword_100446978, sub_10027EBEC);
  }
  + infix(_:_:)(v14, *(double *)&qword_10044B980);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v14, v10);
  uint64_t v19 = swift_allocObject(&unk_1003E54A8, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v19 + 24) = a2;
  void v28[5] = sub_100280884;
  uint64_t v29 = v19;
  v28[1] = _NSConcreteStackBlock;
  __int128 v28[2] = 1107296256LL;
  uint64_t v20 = sub_1001E2064((uint64_t)sub_1002356BC);
  uint64_t v21 = v2;
  static DispatchQoS.unspecified.getter(a2);
  v28[0] = _swiftEmptyArrayStorage;
  unint64_t v22 = sub_1001E8E70();
  uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v24 = sub_1001C94D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v28, v23, v24, v5, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v3, v8, v20);
  _Block_release(v20);
  sub_1001D924C(v8, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v26);
  v18(v16, v10);
  swift_release(v29);
  sub_1001B0FF8();
}

uint64_t sub_10027FD78(uint64_t a1, void *a2)
{
  v20[1] = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider);
  id v13 = [a2 callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v16 = v15(v11, v8);
  static Date.now.getter(v16);
  Class v17 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v12 reportOutgoingCallWithUUID:isa startedConnectingAtDate:v17];

  id v18 = [a2 callUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  sub_10027FF08((uint64_t)v11);
  return v15(v11, v8);
}

uint64_t sub_10027FF08(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v30 - v17;
  uint64_t v32 = *(void *)&v1[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_queue];
  static DispatchTime.now()(v16);
  if (qword_100446980 != -1) {
    swift_once(&qword_100446980, sub_10027ED60);
  }
  + infix(_:_:)(v15, *(double *)&qword_10044B988);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v31 = v11;
  v19(v15, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v33,  v7);
  uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = (v20 + 24) & ~v20;
  uint64_t v22 = swift_allocObject(&unk_1003E5458, v21 + v9, v20 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, v10, v7);
  void aBlock[4] = sub_100280814;
  uint64_t v41 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E5470;
  uint64_t v23 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  uint64_t v39 = _swiftEmptyArrayStorage;
  unint64_t v24 = sub_1001E8E70();
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v26 = sub_1001C94D0();
  uint64_t v27 = v34;
  uint64_t v28 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v25, v26, v38, v24);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v6, v27, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v36);
  v19(v18, v31);
  return swift_release(v41);
}

void sub_10028025C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001B1234();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001B0F00();
  uint64_t v6 = v5 - v4;
  if (qword_100446988 != -1) {
    swift_once(&qword_100446988, sub_10027ED9C);
  }
  uint64_t v7 = qword_10044B990;
  uint64_t v8 = *(void *)algn_10044B998;
  id v9 = objc_allocWithZone(&OBJC_CLASS___CXCallUpdate);
  swift_bridgeObjectRetain(v8);
  id v10 = [v9 init];
  [v10 setUsingBaseband:1];
  NSString v11 = String._bridgeToObjectiveC()();
  unsigned int v12 = [v11 destinationIdIsPhoneNumber];

  if (v12) {
    uint64_t v14 = 2LL;
  }
  else {
    uint64_t v14 = 3LL;
  }
  sub_1001B4C00(v13, &qword_10044A440, &OBJC_CLASS___CXHandle_ptr);
  id v15 = sub_10024734C(v14, v7, v8);
  [v10 setRemoteHandle:v15];

  sub_10026EFFC(0xD00000000000001FLL, 0x8000000100375EE0LL, v10, (SEL *)&selRef_setAudioCategory_);
  id v17 = sub_1002809EC(v16, "setSupportsHolding:");
  id v18 = sub_1002809EC((uint64_t)v17, "setSupportsGrouping:");
  id v19 = sub_1002809EC((uint64_t)v18, "setSupportsDTMF:");
  id v20 = sub_1002809EC((uint64_t)v19, "setSupportsUnambiguousMultiPartyState:");
  id v21 = sub_1002809EC((uint64_t)v20, "setSupportsAddCall:");
  sub_1002809EC((uint64_t)v21, "setSupportsSendingToVoicemail:");
  sub_10026EFFC(29557LL, 0xE200000000000000LL, v10, (SEL *)&selRef_setISOCountryCode_);
  id v23 = sub_1002809EC(v22, "setSupportsTTYWithVoice:");
  unint64_t v24 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider);
  UUID.init()(v23);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_1001D924C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  unint64_t v26 = sub_1001E2064((uint64_t)sub_100240708);
  objc_msgSend( v24,  "reportNewIncomingCallWithUUID:update:completion:",  isa,  v10,  v26,  _NSConcreteStackBlock,  1107296256);
  _Block_release(v26);

  sub_1001B0FF8();
}

void sub_1002804C8(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001B0F00();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_1001B1234();
  __chkstk_darwin(v10);
  sub_1001B10F0();
  [a2 fulfill];
  NSString v11 = *(void **)&v2[OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider];
  id v12 = [a2 callUUID];
  sub_1002809F8();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v14 = sub_100280A04();
  static Date.now.getter(v14);
  Class v15 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  [v11 reportOutgoingCallWithUUID:isa startedConnectingAtDate:v15];

  id v16 = [a2 callUUID];
  sub_1002809F8();

  sub_10027FF08(v3);
  sub_100280A04();
  sub_1001B0FF8();
}

id sub_100280674(int a1, id a2)
{
  return [a2 fulfill];
}

void sub_1002806E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd27CSDSuperboxProviderDelegate_provider);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  static Date.now.getter();
  Class v8 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v6 reportOutgoingCallWithUUID:isa connectedAtDate:v8];
}

uint64_t sub_1002807A8()
{
  uint64_t v1 = *(void *)(sub_1001B1234() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  sub_1001D924C(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

void sub_100280814()
{
}

uint64_t sub_100280840(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100280850(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100280858()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100280884()
{
  return sub_10027FD78(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10028088C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002808B0(uint64_t a1)
{
}

uint64_t sub_1002808C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_100280904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
  }

id sub_100280960(void *a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v7 = [v3 initWithHandle:a1 label:v6];

  return v7;
}

id sub_1002809EC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

uint64_t sub_1002809F8()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100280A04()
{
  return v0(v2, v1);
}

uint64_t sub_100280A10(uint64_t result)
{
  return result;
}

uint64_t sub_100280A24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100280A10(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100280A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1 - 1;
  uint64_t result = 0xD000000000000016LL;
  switch(v5)
  {
    case 0LL:
    case 4LL:
      return result;
    case 1LL:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 2LL:
      uint64_t result = 0xD000000000000011LL;
      break;
    case 3LL:
      uint64_t result = 0xD000000000000015LL;
      break;
    default:
      uint64_t result = sub_10024D974( (uint64_t)&type metadata for RTCConnectionSetupEventType,  0x8000000100376090LL,  a3,  (uint64_t)&type metadata for Int,  a5);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_100280B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0xD000000000000018LL;
  if (a1)
  {
    if (a1 == 2)
    {
      return 0xD00000000000001CLL;
    }

    else if (a1 == 1)
    {
      return 0xD000000000000027LL;
    }

    else
    {
      uint64_t result = sub_10024D974( (uint64_t)&type metadata for RTCConnectionSetupKey,  a2,  a3,  (uint64_t)&type metadata for Int,  a5);
      __break(1u);
    }
  }

  return result;
}

id sub_100280B90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t type metadata accessor for RTCConnectionSetup()
{
  return objc_opt_self(&OBJC_CLASS___CSDRTCConnectionSetup);
}

ValueMetadata *type metadata accessor for RTCConnectionSetupEventType()
{
  return &type metadata for RTCConnectionSetupEventType;
}

ValueMetadata *type metadata accessor for RTCConnectionSetupKey()
{
  return &type metadata for RTCConnectionSetupKey;
}

unint64_t sub_100280C2C()
{
  unint64_t result = qword_10044BAA8;
  if (!qword_10044BAA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037EE50, &type metadata for RTCConnectionSetupKey);
    atomic_store(result, (unint64_t *)&qword_10044BAA8);
  }

  return result;
}

unint64_t sub_100280C6C()
{
  unint64_t result = qword_10044BAB0;
  if (!qword_10044BAB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037EEF0, &type metadata for RTCConnectionSetupEventType);
    atomic_store(result, (unint64_t *)&qword_10044BAB0);
  }

  return result;
}

char *sub_100280CA8(void *a1)
{
  id v3 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v4 = [(id)objc_opt_self(TUAudioSystemController) sharedAudioSystemController];
  unint64_t result = (char *)[(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  if (v4) {
    return sub_100283CB8((uint64_t)v4, v3, result, a1, (char *)objc_allocWithZone(v1));
  }
  __break(1u);
  return result;
}

uint64_t sub_100280D5C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
    }
    else {
      uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v6 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044CAD0, &OBJC_CLASS___TURoute_ptr);
    sub_1001EE280();
    uint64_t v3 = _bridgeCocoaArray<A>(_:)(v5, v6);
  }

  else
  {
    uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v2);
    sub_1001B4B94(0LL, (unint64_t *)&qword_10044CAD0, &OBJC_CLASS___TURoute_ptr);
    uint64_t v3 = v1;
  }

  swift_bridgeObjectRelease(v1);
  return v3;
}

uint64_t sub_100280E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

void sub_100280E2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Class v8 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *id v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return;
  }

  id v10 = sub_100170614();
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v13 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes;
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  *(void *)(v12 + 56) = sub_1001AFF14(&qword_10044BB98);
  *(void *)(v12 + 64) = sub_1001F0B70( &qword_10044BBA0,  &qword_10044BB98,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v12 + 32) = v14;
  uint64_t v15 = swift_bridgeObjectRetain(v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("Updated audio routes: %@", 24LL, 2LL, &_mh_execute_header, v10, v16, v12);

  swift_bridgeObjectRelease(v12);
  uint64_t v17 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute;
  if (*(void *)(v2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute))
  {
    id v18 = sub_1002810FC();
    id v19 = *(void **)(v2 + v17);
    if (v18)
    {
      id v20 = v18;
      if (v19)
      {
        sub_1001B4B94(0LL, &qword_10044BBA8, &OBJC_CLASS___TUAudioRoute_ptr);
        id v21 = v19;
        char v22 = static NSObject.== infix(_:_:)(v20, v21);

        if ((v22 & 1) != 0) {
          goto LABEL_13;
        }
      }

      else
      {
      }

void *sub_1002810FC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8))
  {
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1)
         : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      if ([v4 isCurrentlyPicked])
      {
        swift_bridgeObjectRelease(v1);
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_14:
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
  }

uint64_t sub_1002811F4(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  if (([v1 isBluetooth] & 1) != 0
    || ([v1 isWiredHeadset] & 1) != 0)
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = (uint64_t)[v1 isWiredHeadphones];
  }

  return v2;
}

uint64_t sub_100281268(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes) = a1;
  sub_100280E2C(v2);
  return swift_bridgeObjectRelease(v2);
}

BOOL sub_1002812C0()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) == 1LL;
}

void sub_1002812D8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1001B0F00();
  uint64_t v8 = v7 - v6;
  id v9 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *(void *)(v7 - v6) = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v7 - v6,  enum case for DispatchPredicate.onQueue(_:),  v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    id v11 = sub_100170614();
    uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v13 = sub_1001C7370(v12, 72LL);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    uint64_t v14 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044CAD0, &OBJC_CLASS___TURoute_ptr);
    *(void *)(v13 + 56) = v14;
    uint64_t v15 = sub_100213094( (unint64_t *)&qword_1004488A0,  (unint64_t *)&qword_10044CAD0,  &OBJC_CLASS___TURoute_ptr);
    *(void *)(v13 + 64) = v15;
    *(void *)(v13 + 32) = v3;
    id v16 = v3;
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)("route: %@", 9LL, 2LL, &_mh_execute_header, v11, v17, v13);

    swift_bridgeObjectRelease(v13);
    uint64_t v18 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes;
    uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes);
    id v20 = v16;
    uint64_t v21 = swift_bridgeObjectRetain(v19);
    char v22 = (void *)sub_1002728C0(v21, v20);
    swift_bridgeObjectRelease(v19);
    if (v22)
    {
      uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 24);
      uint64_t v24 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 32);
      sub_1001B204C( (void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider),  v23);
      (*(void (**)(void *, uint64_t, uint64_t))(v24 + 40))(v22, v23, v24);
      uint64_t v31 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState;
      if (*(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState))
      {
        uint64_t v32 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
        *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute) = v22;
      }

      else
      {
        id v33 = sub_100170614();
        uint64_t v34 = sub_1001C7370(v12, 72LL);
        *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        *(void *)(v34 + 56) = sub_1001B4B94(0LL, &qword_10044BBA8, &OBJC_CLASS___TUAudioRoute_ptr);
        *(void *)(v34 + 64) = sub_100213094( (unint64_t *)&unk_10044BBB0,  &qword_10044BBA8,  &OBJC_CLASS___TUAudioRoute_ptr);
        *(void *)(v34 + 32) = v22;
        uint64_t v35 = static os_log_type_t.default.getter(v22);
        os_log(_:dso:log:type:_:)( "Call does not have audio interruption so setting prematurely selected audio route to %@",  87LL,  2LL,  &_mh_execute_header,  v33,  v35,  v34);

        swift_bridgeObjectRelease(v34);
        uint64_t v36 = *(void **)(v1 + v31);
        *(void *)(v1 + v31) = v22;
        sub_10028388C(v36);
      }
    }

    else
    {
      id v25 = sub_100170614();
      uint64_t v27 = static os_log_type_t.error.getter(v25, v26);
      uint64_t v28 = sub_1001C7370(v12, 112LL);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v28 + 56) = v14;
      *(void *)(v28 + 64) = v15;
      *(void *)(v28 + 32) = v20;
      uint64_t v29 = *(void *)(v1 + v18);
      *(void *)(v28 + 96) = sub_1001AFF14(&qword_10044BB98);
      *(void *)(v28 + 104) = sub_1001F0B70( &qword_10044BBA0,  &qword_10044BB98,  (uint64_t)&protocol conformance descriptor for [A]);
      *(void *)(v28 + 72) = v29;
      id v30 = v20;
      sub_1001EE280();
      sub_100283F7C( (uint64_t)"Could not find route to pick for %@. All audio routes: %@",  57LL,  2LL,  (uint64_t)&_mh_execute_header,  (uint64_t)v25,  v27);

      sub_1001B0F5C();
    }

    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

void sub_100281738()
{
  uint64_t v40 = v1;
  uint64_t v41 = v2;
  uint64_t v3 = sub_1001C7360();
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  sub_1001C7334();
  __chkstk_darwin(v4);
  sub_1001D9040();
  uint64_t v46 = v5;
  uint64_t v6 = sub_100283F90();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  sub_1001C7334();
  __chkstk_darwin(v7);
  uint64_t v9 = sub_100283F3C(v8, v39[0]);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1001B0F00();
  uint64_t v14 = (void *)(v13 - v12);
  uint64_t v42 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v15 = *(void *)(v42 - 8);
  uint64_t v16 = __chkstk_darwin(v42);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  id v20 = (char *)v39 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_1001B0F00();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *(void *)(v24 - v23) = v26;
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))( v24 - v23,  enum case for DispatchPredicate.onQueue(_:),  v21);
  v39[1] = (uint64_t)v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v25);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
  if ((v26 & 1) != 0)
  {
    static DispatchWallTime.now()(v27);
    void *v14 = 5LL;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))( v14,  enum case for DispatchTimeInterval.seconds(_:),  v10);
    + infix(_:_:)(v18, v14);
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v29 = v42;
    v28(v18, v42);
    uint64_t v30 = v41;
    void v49[5] = v40;
    v49[6] = v41;
    v49[1] = _NSConcreteStackBlock;
    v49[2] = 1107296256LL;
    uint64_t v31 = sub_1001E2064((uint64_t)sub_1002356BC);
    uint64_t v32 = swift_retain(v30);
    uint64_t v33 = v43;
    static DispatchQoS.unspecified.getter(v32);
    unint64_t v34 = sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v35 = sub_1001C7340();
    uint64_t v37 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v36, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v38 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)(v49, v35, v37, v48, v34);
    OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)(v20, v33, v38, v31);
    _Block_release(v31);
    sub_100283F5C(v47);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v33, v45);
    v28(v20, v29);
    sub_1001C7358();
    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1002819FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider);
    uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 24);
    uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 32);
    sub_1001B204C( (void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider),  v10);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11) & 1) != 0)
    {
      swift_getObjectType(v1);
      uint64_t v12 = v9[3];
      uint64_t v13 = v9[4];
      sub_1001B204C(v9, v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    }

    else
    {
      uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory + 8);
      if (v15)
      {
        uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory);
        uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode);
        uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode + 8);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v15);
        uint64_t v19 = sub_100281DA8(v16, v15, v17, v18);
        swift_bridgeObjectRelease(v18);
        uint64_t v20 = v15;
LABEL_8:
        swift_bridgeObjectRelease(v20);
        return sub_100281268(v19);
      }

      swift_getObjectType(v1);
      uint64_t v21 = v9[3];
      uint64_t v22 = v9[4];
      sub_1001B204C(v9, v21);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
    }

    uint64_t v23 = v14;
    uint64_t v19 = (uint64_t)sub_100281BC8(v14);
    uint64_t v20 = v23;
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

void *sub_100281BC8(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_1001B4B94(0LL, &qword_10044BBA8, &OBJC_CLASS___TUAudioRoute_ptr);
    swift_bridgeObjectRetain(a1);
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      uint64_t v5 = *(void *)(a1 + 8 * i + 32);
      swift_bridgeObjectRetain_n(v5, 2LL);
      id v6 = sub_100282B1C(v5);
      if (v6)
      {
        id v7 = v6;
        swift_bridgeObjectRelease(v5);
        id v8 = v7;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        unint64_t v10 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v9 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v10 >= v9 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1LL);
        }
        uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
        specialized Array._endMutation()(v11, v12, v13, v14, v15, v16, v17, v18);
      }

      else
      {
        id v19 = sub_100170614();
        uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
        *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        *(void *)(v21 + 56) = sub_1001AFF14(&qword_100447B60);
        uint64_t v22 = sub_1001F0B70( (unint64_t *)&qword_100447B68,  &qword_100447B60,  (uint64_t)&protocol conformance descriptor for [A : B]);
        *(void *)(v21 + 64) = v22;
        *(void *)(v21 + 32) = v5;
        uint64_t v23 = static os_log_type_t.default.getter(v22);
        os_log(_:dso:log:type:_:)( "Unable to create audio route from route dictionary: %@",  54LL,  2LL,  &_mh_execute_header,  v19,  v23,  v21);

        swift_bridgeObjectRelease(v21);
      }
    }

    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_100281DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void **)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)(v12);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    uint64_t v17 = swift_allocObject(&unk_1003E57C0, 24LL, 7LL);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
    dispatch_semaphore_t v18 = dispatch_semaphore_create(0LL);
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    uint64_t v19 = *(void *)&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 24];
    uint64_t v20 = *(void *)&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider + 32];
    uint64_t v26 = sub_1001B204C(&v4[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider], v19);
    uint64_t v21 = (void *)swift_allocObject(&unk_1003E57E8, 40LL, 7LL);
    v21[2] = v17;
    _OWORD v21[3] = v4;
    void v21[4] = v18;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, Swift::Int (*)(uint64_t), void *, uint64_t, uint64_t))(v20 + 32);
    swift_retain(v17);
    uint64_t v23 = v4;
    uint64_t v24 = v18;
    v22(v27, v28, a3, a4, sub_100283C00, v21, v19, v20);
    swift_release(v21);
    OS_dispatch_semaphore.wait()();

    swift_beginAccess(v17 + 16, v29, 0LL, 0LL);
    uint64_t v25 = *(void *)(v17 + 16);
    swift_bridgeObjectRetain(v25);
    swift_release(v17);
    return v25;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100281F78(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    return;
  }

  if (a1)
  {
    unsigned int v9 = [a1 hasAudioInterruption];
    uint64_t v10 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState;
    uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState);
    if (v9)
    {
      if ((unint64_t)v11 >= 2)
      {
        id v12 = v11;
        id v13 = sub_100170614();
        uint64_t v14 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
        *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        *(void *)(v15 + 56) = sub_1001B4B94(0LL, &qword_10044BBA8, &OBJC_CLASS___TUAudioRoute_ptr);
        *(void *)(v15 + 64) = sub_100213094( (unint64_t *)&unk_10044BBB0,  &qword_10044BBA8,  &OBJC_CLASS___TUAudioRoute_ptr);
        *(void *)(v15 + 32) = v12;
        uint64_t v16 = static os_log_type_t.default.getter(v12);
        os_log(_:dso:log:type:_:)( "Picking prematurely selected audio route now that audio interruption has begun: %@",  82LL,  2LL,  &_mh_execute_header,  v13,  v16,  v15);

        swift_bridgeObjectRelease(v15);
        sub_1002812D8();
        sub_10028388C(v11);
        uint64_t v11 = *(void **)(v1 + v10);
      }

      *(void *)(v1 + v10) = 1LL;
    }

    else
    {
      *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) = 0LL;
    }
  }

  else
  {
    uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState);
    *(void *)(v1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState) = 0LL;
  }

  sub_10028388C(v11);
}

Swift::Int sub_100282170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_getObjectType(a3);
  id v6 = sub_100281BC8(a1);
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1002821EC(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v8 = sub_1001B9DC8(a1, (SEL *)&selRef_audioCategory);
    uint64_t v39 = v9;
    uint64_t v40 = v8;
    uint64_t v10 = sub_1001B9DC8(a1, (SEL *)&selRef_audioMode);
    uint64_t v37 = v11;
    uint64_t v38 = v10;
    unsigned __int8 v12 = [a1 hasAudioInterruption];
  }

  else
  {
    unsigned __int8 v12 = 0;
    uint64_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
  }

  id v13 = sub_100170614();
  uint64_t v14 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  if (a1)
  {
    aBlock[0] = a1;
    uint64_t v16 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
    id v17 = a1;
    uint64_t v18 = String.init<A>(reflecting:)(aBlock, v16);
    unint64_t v20 = v19;
  }

  else
  {
    unint64_t v20 = 0xE300000000000000LL;
    uint64_t v18 = 7104878LL;
  }

  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v21 = sub_1001B2330();
  *(void *)(v15 + 64) = v21;
  *(void *)(v15 + 32) = v18;
  *(void *)(v15 + 40) = v20;
  LOBYTE(aBlock[0]) = v12;
  uint64_t v22 = String.init<A>(reflecting:)(aBlock, &type metadata for Bool);
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v21;
  *(void *)(v15 + 72) = v22;
  *(void *)(v15 + 80) = v23;
  uint64_t v24 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)( "Updating audio information using call: %@; callHasAudioInterruption: %@",
    71LL,
    2LL,
    &_mh_execute_header,
    v13,
    v24,
    v15);

  swift_bridgeObjectRelease(v15);
  uint64_t v25 = v41;
  uint64_t v26 = (void *)swift_allocObject(&unk_1003E5770, 64LL, 7LL);
  v26[2] = a1;
  uint64_t v26[3] = v25;
  uint64_t v27 = v39;
  v26[4] = v40;
  v26[5] = v27;
  uint64_t v28 = v37;
  v26[6] = v38;
  v26[7] = v28;
  void aBlock[4] = sub_100283904;
  uint64_t v48 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E5788;
  uint64_t v29 = _Block_copy(aBlock);
  id v30 = a1;
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v46 = _swiftEmptyArrayStorage;
  unint64_t v31 = sub_1001E8E70();
  uint64_t v32 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  uint64_t v33 = sub_1001F0B70( (unint64_t *)&qword_100447CC0,  (uint64_t *)&unk_1004478D0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v34 = v32;
  uint64_t v35 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v34, v33, v45, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v35);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v43);
  return swift_release(v48);
}

void sub_10028252C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (!a1)
  {
    unsigned __int8 v12 = *(void **)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
    *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute) = 0LL;
  }

  sub_100281F78(a1);
  char v13 = 0;
  uint64_t v14 = (void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory);
  uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory + 8);
  if (v15 && a4)
  {
    else {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a3, a4, 0LL);
    }
    char v13 = v17 ^ 1;
  }

  uint64_t v18 = (void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode);
  uint64_t v19 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode + 8);
  uint64_t v83 = a3;
  if (v19 && a6 && ((void *)*v18 == a5 ? (BOOL v20 = v19 == a6) : (BOOL v20 = 0), !v20))
  {
    if (!(v13 & 1 | ((_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a5, a6, 0LL) & 1) == 0)))
    {
LABEL_19:
      id v21 = sub_100170614();
      uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v23 = swift_allocObject(v22, 192LL, 7LL);
      *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B140;
      uint64_t v24 = v14[1];
      id v81 = v21;
      if (v24)
      {
        uint64_t v84 = (void *)*v14;
        uint64_t v85 = v24;
        swift_bridgeObjectRetain(v24);
        uint64_t v25 = String.init<A>(reflecting:)(&v84, &type metadata for String);
        unint64_t v27 = v26;
      }

      else
      {
        unint64_t v27 = 0xE300000000000000LL;
        uint64_t v25 = 7104878LL;
      }

      *(void *)(v23 + 56) = &type metadata for String;
      unint64_t v37 = sub_1001B2330();
      *(void *)(v23 + 64) = v37;
      *(void *)(v23 + 32) = v25;
      *(void *)(v23 + 40) = v27;
      if (a4)
      {
        uint64_t v84 = v83;
        uint64_t v85 = a4;
        swift_bridgeObjectRetain(a4);
        uint64_t v38 = String.init<A>(reflecting:)(&v84, &type metadata for String);
      }

      else
      {
        unint64_t v39 = 0xE300000000000000LL;
        uint64_t v38 = 7104878LL;
      }

      *(void *)(v23 + 96) = &type metadata for String;
      *(void *)(v23 + 104) = v37;
      *(void *)(v23 + 72) = v38;
      *(void *)(v23 + 80) = v39;
      uint64_t v43 = v18[1];
      if (v43)
      {
        uint64_t v84 = (void *)*v18;
        uint64_t v85 = v43;
        swift_bridgeObjectRetain(v43);
        uint64_t v44 = String.init<A>(reflecting:)(&v84, &type metadata for String);
      }

      else
      {
        unint64_t v45 = 0xE300000000000000LL;
        uint64_t v44 = 7104878LL;
      }

      *(void *)(v23 + 136) = &type metadata for String;
      *(void *)(v23 + 144) = v37;
      *(void *)(v23 + 112) = v44;
      *(void *)(v23 + 120) = v45;
      if (a6)
      {
        uint64_t v84 = a5;
        uint64_t v85 = a6;
        swift_bridgeObjectRetain(a6);
        uint64_t v50 = String.init<A>(reflecting:)(&v84, &type metadata for String);
      }

      else
      {
        unint64_t v51 = 0xE300000000000000LL;
        uint64_t v50 = 7104878LL;
      }

      *(void *)(v23 + 176) = &type metadata for String;
      *(void *)(v23 + 184) = v37;
      *(void *)(v23 + 152) = v50;
      *(void *)(v23 + 160) = v51;
      uint64_t v54 = static os_log_type_t.default.getter(v50);
      uint64_t v55 = v81;
      os_log(_:dso:log:type:_:)( "Audio category change from %@ -> %@ mode %@ -> %@ does not require route re-pick",  80LL,  2LL,  &_mh_execute_header,  v81,  v54,  v23);
      char v56 = 0;
      goto LABEL_49;
    }
  }

  else if ((v13 & 1) == 0)
  {
    goto LABEL_19;
  }

  uint64_t v28 = sub_1002810FC();
  char v29 = sub_1002811F4(v28);

  id v30 = sub_100170614();
  uint64_t v31 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v23 = swift_allocObject(v31, 272LL, 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037C090;
  uint64_t v32 = v14[1];
  id v82 = v30;
  uint64_t v80 = a5;
  char v33 = v29;
  if (v32)
  {
    uint64_t v84 = (void *)*v14;
    uint64_t v85 = v32;
    swift_bridgeObjectRetain(v32);
    uint64_t v34 = String.init<A>(reflecting:)(&v84, &type metadata for String);
    unint64_t v36 = v35;
  }

  else
  {
    unint64_t v36 = 0xE300000000000000LL;
    uint64_t v34 = 7104878LL;
  }

  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v40 = sub_1001B2330();
  *(void *)(v23 + 64) = v40;
  *(void *)(v23 + 32) = v34;
  *(void *)(v23 + 40) = v36;
  if (a4)
  {
    uint64_t v84 = v83;
    uint64_t v85 = a4;
    swift_bridgeObjectRetain(a4);
    uint64_t v41 = String.init<A>(reflecting:)(&v84, &type metadata for String);
  }

  else
  {
    unint64_t v42 = 0xE300000000000000LL;
    uint64_t v41 = 7104878LL;
  }

  char v46 = v33;
  a5 = v80;
  *(void *)(v23 + 96) = &type metadata for String;
  *(void *)(v23 + 104) = v40;
  *(void *)(v23 + 72) = v41;
  *(void *)(v23 + 80) = v42;
  uint64_t v47 = v18[1];
  if (v47)
  {
    uint64_t v84 = (void *)*v18;
    uint64_t v85 = v47;
    swift_bridgeObjectRetain(v47);
    uint64_t v48 = String.init<A>(reflecting:)(&v84, &type metadata for String);
  }

  else
  {
    unint64_t v49 = 0xE300000000000000LL;
    uint64_t v48 = 7104878LL;
  }

  *(void *)(v23 + 136) = &type metadata for String;
  *(void *)(v23 + 144) = v40;
  *(void *)(v23 + 112) = v48;
  *(void *)(v23 + 120) = v49;
  if (a6)
  {
    uint64_t v84 = v80;
    uint64_t v85 = a6;
    swift_bridgeObjectRetain(a6);
    uint64_t v52 = String.init<A>(reflecting:)(&v84, &type metadata for String);
  }

  else
  {
    unint64_t v53 = 0xE300000000000000LL;
    uint64_t v52 = 7104878LL;
  }

  char v56 = v46 ^ 1;
  *(void *)(v23 + 176) = &type metadata for String;
  *(void *)(v23 + 184) = v40;
  *(void *)(v23 + 152) = v52;
  *(void *)(v23 + 160) = v53;
  id v57 = sub_1002810FC();
  if (v57)
  {
    uint64_t v84 = v57;
    uint64_t v58 = sub_1001B4B94(0LL, &qword_10044BBA8, &OBJC_CLASS___TUAudioRoute_ptr);
    uint64_t v59 = String.init<A>(reflecting:)(&v84, v58);
  }

  else
  {
    unint64_t v60 = 0xE300000000000000LL;
    uint64_t v59 = 7104878LL;
  }

  *(void *)(v23 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(v23 + 224) = v40;
  *(void *)(v23 + 192) = v59;
  *(void *)(v23 + 200) = v60;
  LOBYTE(v84) = v56 & 1;
  uint64_t v61 = String.init<A>(reflecting:)(&v84, &type metadata for Bool);
  *(void *)(v23 + 256) = &type metadata for String;
  *(void *)(v23 + 264) = v40;
  *(void *)(v23 + 232) = v61;
  *(void *)(v23 + 240) = v62;
  uint64_t v63 = static os_log_type_t.default.getter(v61);
  uint64_t v55 = v82;
  os_log(_:dso:log:type:_:)( "Audio category change from %@ -> %@ mode %@ -> %@ currentlyPickedRoute: %@ shouldPickLastUserPickedRoute: %@",  108LL,  2LL,  &_mh_execute_header,  v82,  v63,  v23);
LABEL_49:

  swift_bridgeObjectRelease(v23);
  uint64_t v64 = v14[1];
  void *v14 = v83;
  v14[1] = a4;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v64);
  uint64_t v65 = v18[1];
  *uint64_t v18 = a5;
  v18[1] = a6;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRelease(v65);
  sub_1002819FC();
  uint64_t v66 = OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute;
  uint64_t v67 = *(void **)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
  if (v67 && (v56 & 1) != 0)
  {
    id v68 = v67;
    id v69 = sub_100170614();
    uint64_t v70 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v71 = swift_allocObject(v70, 72LL, 7LL);
    *(_OWORD *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    uint64_t v72 = *(void **)(a2 + v66);
    if (v72)
    {
      uint64_t v84 = *(void **)(a2 + v66);
      uint64_t v73 = sub_1001B4B94(0LL, &qword_10044BBA8, &OBJC_CLASS___TUAudioRoute_ptr);
      id v74 = v72;
      uint64_t v75 = String.init<A>(reflecting:)(&v84, v73);
      unint64_t v77 = v76;
    }

    else
    {
      unint64_t v77 = 0xE300000000000000LL;
      uint64_t v75 = 7104878LL;
    }

    *(void *)(v71 + 56) = &type metadata for String;
    unint64_t v78 = sub_1001B2330();
    *(void *)(v71 + 64) = v78;
    *(void *)(v71 + 32) = v75;
    *(void *)(v71 + 40) = v77;
    uint64_t v79 = static os_log_type_t.default.getter(v78);
    os_log(_:dso:log:type:_:)("Re-picking last user picked route: %@", 37LL, 2LL, &_mh_execute_header, v69, v79, v71);

    swift_bridgeObjectRelease(v71);
    sub_1002812D8();
  }

id sub_100282B1C(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v5 = [v3 initWithDictionary:isa];

  return v5;
}

void sub_100282BA0()
{
  v31[0] = v0;
  uint64_t v33 = sub_1001C7360();
  uint64_t v36 = *(void *)(v33 - 8);
  sub_1001C7334();
  __chkstk_darwin(v1);
  sub_1001D9040();
  uint64_t v32 = v2;
  uint64_t v3 = sub_100283F90();
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  sub_1001C7334();
  __chkstk_darwin(v4);
  uint64_t v6 = sub_100283F3C(v5, v0);
  uint64_t v7 = type metadata accessor for Notification(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  id v10 = sub_100170614();
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = sub_1001C7370(v11, 72LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  sub_100283F6C();
  uint64_t v13 = String.init<A>(reflecting:)((char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_1001B2330();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  sub_100283F7C((uint64_t)"notification: %@", 16LL, 2LL, (uint64_t)&_mh_execute_header, (uint64_t)v10, v17);

  sub_1001B0F5C();
  uint64_t v18 = (void *)v31[0];
  sub_100283F6C();
  uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  unint64_t v21 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_1003E5810, v21 + 8, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v22 + v20,  (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  *(void *)(v22 + v21) = v18;
  void v37[5] = sub_100283C7C;
  void v37[6] = v22;
  v37[1] = _NSConcreteStackBlock;
  void v37[2] = 1107296256LL;
  uint64_t v23 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v24 = v18;
  uint64_t v25 = v31[1];
  static DispatchQoS.unspecified.getter(v24);
  unint64_t v26 = sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = sub_1001C7340();
  uint64_t v29 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v28, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(v37, v27, v29, v33, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v25, v30);
  _Block_release(v23);
  sub_100283F5C(v36);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v25, v35);
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_100282E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3) {
    return sub_1002819FC();
  }
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory);
  if (!*(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory + 8)) {
    goto LABEL_7;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUAudioSystemCategoryKey);
  uint64_t v20 = v6;
  AnyHashable.init<A>(_:)(v21, &v19, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v21, v4, &v22);
  sub_1001D8504((uint64_t)v21);
  if (v23)
  {
    if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v7 = v19;
      uint64_t v8 = v20;
      uint64_t v9 = *v5;
      uint64_t v10 = v5[1];
      swift_bridgeObjectRetain(v10);
      LOBYTE(v7) = sub_100283038(v9, v10, v7, v8);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      if ((v7 & 1) == 0)
      {
        uint64_t v11 = v4;
        return swift_bridgeObjectRelease(v11);
      }
    }
  }

  else
  {
    sub_1001B14E8((uint64_t)&v22);
  }

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUAudioSystemModeKey);
  uint64_t v20 = v12;
  AnyHashable.init<A>(_:)(v21, &v19, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v21, v4, &v22);
  swift_bridgeObjectRelease(v4);
  sub_1001D8504((uint64_t)v21);
  if (!v23)
  {
    sub_1001B14E8((uint64_t)&v22);
    return sub_1002819FC();
  }

  if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v13 = v20;
    uint64_t v14 = (void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode);
    uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode + 8);
    if (!v15)
    {
      uint64_t v11 = v20;
      return swift_bridgeObjectRelease(v11);
    }

    if (*v14 != v19 || v15 != v20)
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, v19, v20, 0LL);
      uint64_t result = swift_bridgeObjectRelease(v13);
      if ((v17 & 1) == 0) {
        return result;
      }
      return sub_1002819FC();
    }

    uint64_t v3 = v20;
LABEL_7:
    swift_bridgeObjectRelease(v3);
  }

  return sub_1002819FC();
}

BOOL sub_100283038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return !a4;
  }
  if (!a4) {
    return 0LL;
  }
  BOOL v9 = a1 == a3 && a2 == a4;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1) != 0) {
    return 1LL;
  }
  uint64_t v10 = v4 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider;
  sub_1001BA03C(v4 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider, (uint64_t)v21);
  uint64_t v11 = v22;
  uint64_t v12 = sub_1001B204C(v21, v22);
  uint64_t DynamicType = swift_getDynamicType(v12, v11, 1LL);
  uint64_t v14 = v23;
  sub_1001B0438(v21);
  sub_1001BA03C(v10, (uint64_t)v21);
  uint64_t v15 = v22;
  unint64_t v16 = sub_1001B204C(v21, v22);
  uint64_t v17 = 1LL;
  uint64_t v18 = swift_getDynamicType(v16, v15, 1LL);
  uint64_t v19 = v23;
  sub_1001B0438(v21);
  return v17;
}

void sub_10028318C(uint64_t a1)
{
  uint64_t v3 = sub_1001C9578();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B10F0();
  id v5 = sub_100170614();
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v7 = sub_1001C7370(v6, 72LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, a1, v3);
  uint64_t v8 = String.init<A>(reflecting:)(v1, v3);
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_1001B2330();
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("notification: %@", 16LL, 2LL, &_mh_execute_header, v5, v12, v7);

  swift_bridgeObjectRelease(v7);
  uint64_t v13 = sub_1002832A4();
  sub_1002821EC(v13);
}

void *sub_1002832A4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callCenterObserver);
  uint64_t result = sub_10027BE18( v1,  *(void **)(v0 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_ttyProviderObserver),  0LL,  2u);
  if (!result)
  {
    id v3 = [v1 callContainer];
    id v4 = [v3 frontmostCall];
    swift_unknownObjectRelease(v3);
    if (v4
      || (id v5 = [v1 callContainer],
          id v4 = [v5 currentVideoCall],
          swift_unknownObjectRelease(v5),
          v4))
    {
      uint64_t v6 = objc_opt_self(&OBJC_CLASS___CSDCall);
      uint64_t result = (void *)swift_dynamicCastObjCClass(v4, v6);
      if (result) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1002833AC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = sub_1001C9578();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001B10F0();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v10 = a1;
  a4(v4);

  return sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
}

void sub_100283430()
{
}

uint64_t type metadata accessor for LocalAudioRouteProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd23LocalAudioRouteProvider);
}

void sub_10028354C()
{
  uint64_t v2 = sub_1001C7360();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001B0F00();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v9 = sub_1002832A4();

  if (!v9)
  {
    uint64_t v10 = sub_1001C7370((uint64_t)&unk_1003E5720, 24LL);
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
    void v17[5] = sub_1002838C0;
    v17[6] = v10;
    v17[1] = _NSConcreteStackBlock;
    __int128 v17[2] = 1107296256LL;
    uint64_t v11 = v3;
    uint64_t v12 = sub_1001E2064((uint64_t)sub_1002356BC);
    static DispatchQoS.unspecified.getter(v0);
    unint64_t v13 = sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = sub_1001C7340();
    uint64_t v16 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v15, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v17, v14, v16, v2, v13);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v6);
    _Block_release(v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v6, v2);
    sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    sub_1001C7358();
  }

  sub_1001B0FF8();
}

void sub_1002836D4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute);
  *(void *)(a1 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute) = 0LL;
}

void *initializeBufferWithCopyOfBuffer for LocalAudioRouteProvider.CallAudioInterruptionState( void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for LocalAudioRouteProvider.CallAudioInterruptionState(void **a1)
{
  uint64_t v1 = *a1;
}

void **assignWithCopy for LocalAudioRouteProvider.CallAudioInterruptionState(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }

void **assignWithTake for LocalAudioRouteProvider.CallAudioInterruptionState( void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }

  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for LocalAudioRouteProvider.CallAudioInterruptionState()
{
  return &type metadata for LocalAudioRouteProvider.CallAudioInterruptionState;
}

uint64_t sub_100283874(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100283884(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10028388C(id a1)
{
}

uint64_t sub_10028389C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002838C0()
{
}

uint64_t sub_1002838C8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100283904()
{
}

uint64_t sub_100283914(uint64_t a1, uint64_t a2)
{
  return sub_100283930( a1,  a2,  (void (*)(void, BOOL, uint64_t))sub_1002734A0,  (unint64_t *)&qword_10044CAD0,  &OBJC_CLASS___TURoute_ptr);
}

uint64_t sub_100283930( uint64_t a1, uint64_t a2, void (*a3)(void, BOOL, uint64_t), unint64_t *a4, void *a5)
{
  unint64_t v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
LABEL_39:
    if (a1 < 0) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v28 = a2;
    }
    else {
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001EE280();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v11 != v12) {
    goto LABEL_24;
  }
  if (v11)
  {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    if (!v10) {
      uint64_t v13 = (a1 & 0xFFFFFFFFFFFFFF8LL) + 32;
    }
    uint64_t v14 = a2 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFF8LL) + 32;
    if (a2 < 0) {
      uint64_t v14 = a2;
    }
    if (v13 != v15)
    {
      if (v11 < 0) {
        goto LABEL_48;
      }
      unint64_t v29 = a1 & 0xC000000000000001LL;
      if ((a1 & 0xC000000000000001LL) != 0) {
LABEL_49:
      }
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
      else {
        id v16 = *(id *)(a1 + 32);
      }
      uint64_t v17 = v16;
      a3(0LL, (a2 & 0xC000000000000001LL) == 0, a2);
      if ((a2 & 0xC000000000000001LL) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
      }
      else {
        id v18 = *(id *)(a2 + 32);
      }
      uint64_t v19 = v18;
      a5 = (void *)sub_1001B4B94(0LL, a4, a5);
      a4 = (unint64_t *)static NSObject.== infix(_:_:)(v17, v19);

      if ((a4 & 1) != 0)
      {
        if (v11 != 1)
        {
          unint64_t v10 = 2 - v11;
          uint64_t v22 = 5LL;
          while (1)
          {
            a3 = (void (*)(void, BOOL, uint64_t))(v22 - 4);
            if (v22 - 4 >= v11)
            {
              __break(1u);
              goto LABEL_39;
            }

            if (v29) {
              uint64_t v23 = (unint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, a1);
            }
            else {
              uint64_t v23 = (unint64_t *)*(id *)(a1 + 8 * v22);
            }
            a4 = v23;
            if ((a2 & 0xC000000000000001LL) != 0)
            {
              id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, a2);
            }

            else
            {
              if ((unint64_t)a3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
              {
                __break(1u);
LABEL_48:
                __break(1u);
                goto LABEL_49;
              }

              id v24 = *(id *)(a2 + 8 * v22);
            }

            uint64_t v25 = v24;
            char v20 = static NSObject.== infix(_:_:)(a4, v24);

            if ((v20 & 1) != 0)
            {
              unint64_t v26 = v10 + v22++;
              if (v26 != 5) {
                continue;
              }
            }

            return v20 & 1;
          }
        }

        goto LABEL_23;
      }

uint64_t sub_100283B90(void *a1)
{
  return sub_1001B9DC8(a1, (SEL *)&selRef_audioCategory);
}

uint64_t sub_100283B9C(void *a1)
{
  return sub_1001B9DC8(a1, (SEL *)&selRef_audioMode);
}

uint64_t sub_100283BA8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100283BCC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

Swift::Int sub_100283C00(uint64_t a1)
{
  return sub_100282170(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100283C0C()
{
  uint64_t v1 = sub_1001C9578();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100283C7C()
{
  uint64_t v1 = *(void *)(sub_1001C9578() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100282E1C(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

char *sub_100283CB8(uint64_t a1, void *a2, void *a3, void *a4, char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  uint64_t v11 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044B7D0, &OBJC_CLASS___TUAudioSystemController_ptr);
  uint64_t v12 = &a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_routesDidChangeHandler];
  *(void *)uint64_t v12 = 0LL;
  *((void *)v12 + 1) = 0LL;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_audioRoutes] = _swiftEmptyArrayStorage;
  uint64_t v29[3] = v11;
  v29[4] = &off_1003E09D0;
  uint64_t v13 = &a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioCategory];
  *(void *)uint64_t v13 = 0LL;
  *((void *)v13 + 1) = 0LL;
  uint64_t v14 = &a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioMode];
  *(void *)uint64_t v14 = 0LL;
  *((void *)v14 + 1) = 0LL;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_lastUserPickedRoute] = 0LL;
  v29[0] = a1;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callAudioInterruptionState] = 0LL;
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_queue] = a4;
  sub_1001BA03C( (uint64_t)v29,  (uint64_t)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider]);
  *(void *)&a5[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callCenterObserver] = a2;
  id v15 = objc_allocWithZone((Class)&OBJC_CLASS___CSDTTYProviderObserver);
  id v16 = a5;
  id v17 = a4;
  id v18 = a2;
  id v19 = [v15 init];
  *(void *)&v16[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_ttyProviderObserver] = v19;

  v28.receiver = v16;
  v28.super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v28, "init");
  sub_1001BA03C( (uint64_t)v20 + OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_localAudioSystemProvider,  (uint64_t)v27);
  unint64_t v21 = (char *)v20;
  uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_10044BBC0);
  if (swift_dynamicCast(&v26, v27, v22, v11, 6LL))
  {
    id v23 = v26;
    [v26 setDelegate:v21];
  }

  id v24 = *(void **)&v21[OBJC_IVAR____TtC13callservicesd23LocalAudioRouteProvider_callCenterObserver];
  [v24 setTriggers:3073];
  [v24 setDelegate:v21];
  [a3 addObserver:v21 selector:"audioRouteInformationChangedWithNotification:" name:TUAudioSystemAudioPickableRoutesChanged object:0];
  [a3 addObserver:v21 selector:"audioInterruptionPropertiesChangedWithNotification:" name:@"CSDCallAudioInterruptionPropertiesChangedNotification" object:0];

  sub_1001B0438(v29);
  return v21;
}

uint64_t sub_100283F3C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

uint64_t sub_100283F5C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_100283F6C()
{
  return v1(v3, v0, v2);
}

uint64_t sub_100283F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_100283F84@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_100283F90()
{
  return type metadata accessor for DispatchQoS(0LL);
}

_UNKNOWN **sub_100283F9C()
{
  return &off_1003E5858;
}

uint64_t sub_100283FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v51 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BB5CC();
  __chkstk_darwin(v10);
  unint64_t v53 = (char *)&v50 - v11;
  sub_1001BB5CC();
  __chkstk_darwin(v12);
  uint64_t v50 = (uint64_t)&v50 - v13;
  sub_1001BB5CC();
  __chkstk_darwin(v14);
  uint64_t v52 = (uint64_t)&v50 - v15;
  sub_1001BB5CC();
  uint64_t v17 = __chkstk_darwin(v16);
  id v19 = (char *)&v50 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v50 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v50 - v26;
  sub_100284B64((uint64_t)&v50 - v26, v3);
  objc_super v28 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v55 = a2;
  uint64_t v29 = v28(a1, a2);
  unint64_t v31 = v30;
  swift_bridgeObjectRelease(v30);
  if ((v31 & 0x2000000000000000LL) != 0) {
    uint64_t v32 = HIBYTE(v31) & 0xF;
  }
  else {
    uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
  }
  sub_100284B5C((uint64_t)v27);
  sub_100284B64((uint64_t)v25, v3);
  if (!v32)
  {
    sub_100284B5C((uint64_t)v25);
    sub_100284B64((uint64_t)v19, v3);
    uint64_t v40 = (uint64_t)v54;
    uint64_t v37 = v3;
    uint64_t v39 = (uint64_t)v53;
    uint64_t v36 = (uint64_t)v19;
    goto LABEL_16;
  }

  uint64_t v33 = (uint64_t)v19;
  uint64_t v34 = *(uint64_t (**)(uint64_t))(v55 + 40);
  char v35 = v34(a1);
  sub_100284B64((uint64_t)v22, (uint64_t)v25);
  if ((v35 & 1) == 0)
  {
    sub_100284B5C((uint64_t)v22);
    sub_100284B5C((uint64_t)v25);
    uint64_t v36 = v33;
    uint64_t v37 = v3;
    sub_100284B64(v33, v3);
    uint64_t v38 = v55;
    uint64_t v39 = (uint64_t)v53;
    goto LABEL_9;
  }

  uint64_t v38 = v55;
  char v41 = ((uint64_t (*)(uint64_t, uint64_t))v34)(a1, v55);
  sub_100284B5C((uint64_t)v22);
  sub_100284B5C((uint64_t)v25);
  uint64_t v36 = v33;
  uint64_t v37 = v3;
  sub_100284B64(v33, v3);
  uint64_t v39 = (uint64_t)v53;
  uint64_t v40 = (uint64_t)v54;
  if ((v41 & 2) == 0)
  {
LABEL_16:
    sub_100284B5C(v36);
    sub_100284B64(v39, v37);
    goto LABEL_17;
  }

id sub_1002843A4@<X0>(void *a1@<X8>)
{
  id result = sub_10025E710();
  *a1 = result;
  return result;
}

id sub_1002843CC()
{
  return sub_1002843EC();
}

id sub_1002843EC()
{
  return [v0 invalidate];
}

void sub_1002843FC()
{
}

void sub_100284418()
{
}

void sub_100284434()
{
}

void sub_100284450()
{
}

id sub_10028446C()
{
  return sub_10025E9A8();
}

void sub_10028448C()
{
}

uint64_t sub_1002844A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10025E9D8(a1);
}

void sub_1002844C8()
{
}

uint64_t sub_1002844E4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_10037F038;
    void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10028457C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(v3 + 0x68);
  sub_1001B0E6C(v4, (uint64_t)v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 16LL))(a1, v4);
}

uint64_t sub_1002845E8()
{
  uint64_t v1 = (void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x78LL));
  sub_1001B0E6C((uint64_t)v1, (uint64_t)v3);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100284638(uint64_t a1)
{
  uint64_t v2 = *(void *)((swift_isaMask & *v1) + 0x50LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t v7 = *(void *)(v6 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v7, v2, &unk_1003B8D04, &unk_1003B8D14);
  uint64_t v9 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  sub_10028457C((uint64_t)v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v2, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (sub_1001AB0AC((uint64_t)v12, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    LOBYTE(v13) = 0;
  }

  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v2,  AssociatedTypeWitness,  &unk_1003B8D04,  &unk_1003B8D0C);
    unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(v12, AssociatedTypeWitness);
    int v13 = (v15 >> 5) & 1;
  }

  uint64_t v16 = sub_1002845E8();
  uint64_t v17 = Dictionary.values.getter( v16,  &type metadata for String,  AssociatedTypeWitness,  &protocol witness table for String);
  uint64_t v18 = swift_bridgeObjectRelease(v16);
  uint64_t v25 = v17;
  __chkstk_darwin(v18);
  *(&v24 - 4) = v2;
  *(&v24 - 3) = v7;
  *((_BYTE *)&v24 - swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v19 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for String,  AssociatedTypeWitness,  &protocol witness table for String);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v19);
  uint64_t v25 = Sequence.filter(_:)(sub_100284B3C, &v24 - 6, v19, WitnessTable);
  uint64_t v21 = type metadata accessor for Array(0LL, AssociatedTypeWitness);
  uint64_t v22 = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  return Array.init<A>(_:)(&v25, AssociatedTypeWitness, v21, v22);
}

uint64_t sub_1002848B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, a4, a3, &unk_1003B8D04, &unk_1003B8D14);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &unk_1003B8D04,  &unk_1003B8D0C);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return ((v9(v10, AssociatedConformanceWitness) & 1) == 0) | ((a2 & 1) == 0);
}

id sub_100284970(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)(swift_isaMask & *v1);
  uint64_t v4 = v3[10];
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v13 - v6;
  uint64_t v8 = (uint64_t)v2 + v3[13];
  sub_1001B0E6C(v8, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = v3[11];
  (*(void (**)(uint64_t, uint64_t))(v9 + 160))(v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = (objc_class *)type metadata accessor for NearbyDeviceMonitor(0LL, v4, v9, v10);
  v14.receiver = v2;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, "dealloc");
}

id sub_100284A54(void *a1)
{
  return sub_100284970((uint64_t)a1);
}

uint64_t sub_100284A78(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;

  sub_100284B78();
  (*(void (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8LL) + 8LL))(&a1[*(void *)(v3 + 104)]);
  sub_100284B78();
  sub_1001B5D3C(*(void *)&a1[*(void *)(v4 + 112)], *(void *)&a1[*(void *)(v4 + 112) + 8]);
  sub_100284B78();
  return swift_bridgeObjectRelease(*(void *)&a1[*(void *)(v5 + 120)]);
}

void sub_100284AF8()
{
}

void sub_100284B24()
{
}

uint64_t type metadata accessor for NearbyDeviceMonitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyDeviceMonitor);
}

uint64_t sub_100284B3C(uint64_t a1)
{
  return sub_1002848B8(a1, *(_BYTE *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100284B5C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100284B64(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_100284B6C()
{
  return v2(v0, v1);
}

  ;
}

void *sub_100284B88(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      sub_10028A6B0();
      uint64_t v8 = v7;

      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v10 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v9 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v10 >= v9 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1LL);
        }
        uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
        specialized Array._endMutation()(v11, v12, v13, v14, v15, v16, v17, v18, v21);
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

void *sub_100284CE4(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      id v7 = [v4 tuHandle];

      if (v7)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v9 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v8 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v9 >= v8 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
        }
        uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
        specialized Array._endMutation()(v10, v11, v12, v13, v14, v15, v16, v17, v20);
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_100284E60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = sub_1001B4B08(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1LL << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }

    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v17 = v2;
        uint64_t v8 = v7;
        unint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
        objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
        sub_10024DAEC();
        id v13 = sub_10027B008(v10, v11, v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v14 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        uint64_t result = specialized ContiguousArray._endMutation()(v15);
        uint64_t v16 = -1LL << *(_BYTE *)(a1 + 32);
        if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v7 = v8;
        uint64_t result = _HashTable.occupiedBucket(after:)(v5, v8, ~v16);
        uint64_t v2 = v17 - 1;
        if (v17 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

Swift::Int sub_100285020(uint64_t a1)
{
  uint64_t v2 = v1;
  int v4 = &_swiftEmptyDictionarySingleton;
  unint64_t v60 = &_swiftEmptyDictionarySingleton;
  sub_10023BD50(v56);
  uint64_t v5 = v56[0];
  uint64_t v6 = v56[1];
  unint64_t v7 = v59;
  uint64_t v50 = v57;
  int64_t v53 = (unint64_t)(v57 + 64) >> 6;
  int64_t v54 = v58;
  Swift::Int result = swift_bridgeObjectRetain(a1);
  for (i = v6; ; uint64_t v6 = i)
  {
    while (1)
    {
      if (v7)
      {
        unint64_t v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v54 << 6);
      }

      else
      {
        int64_t v11 = v54 + 1;
        if (__OFADD__(v54, 1LL))
        {
          __break(1u);
          goto LABEL_59;
        }

        if (v11 >= v53) {
          goto LABEL_57;
        }
        unint64_t v12 = *(void *)(v6 + 8 * v11);
        int64_t v13 = v54 + 1;
        if (!v12)
        {
          int64_t v13 = v54 + 2;
          if (v54 + 2 >= v53) {
            goto LABEL_57;
          }
          unint64_t v12 = *(void *)(v6 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v54 + 3;
            if (v54 + 3 >= v53) {
              goto LABEL_57;
            }
            unint64_t v12 = *(void *)(v6 + 8 * v13);
            if (!v12)
            {
              int64_t v13 = v54 + 4;
              if (v54 + 4 >= v53) {
                goto LABEL_57;
              }
              unint64_t v12 = *(void *)(v6 + 8 * v13);
              if (!v12)
              {
                int64_t v13 = v54 + 5;
                if (v54 + 5 >= v53) {
                  goto LABEL_57;
                }
                unint64_t v12 = *(void *)(v6 + 8 * v13);
                if (!v12)
                {
                  int64_t v14 = v54 + 6;
                  while (v14 < v53)
                  {
                    unint64_t v12 = *(void *)(v6 + 8 * v14++);
                    if (v12)
                    {
                      int64_t v13 = v14 - 1;
                      goto LABEL_19;
                    }
                  }

uint64_t sub_100285430(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  if ((unint64_t)a1 >> 62)
  {
LABEL_23:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (v6) {
      goto LABEL_3;
    }
LABEL_27:
    swift_bridgeObjectRelease(a1);

    return swift_bridgeObjectRelease(a4);
  }

  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_27;
  }
LABEL_3:
  for (uint64_t i = 4LL; ; ++i)
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
    }
    else {
      id v8 = *(id *)(a1 + 8 * i);
    }
    unint64_t v9 = v8;
    if (__OFADD__(i - 4, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (a2) {
      [a2 addGeneratorDescriptors:v8];
    }
    if ((a3 & 1) == 0) {
      goto LABEL_18;
    }
    sub_10028E44C(v9, (SEL *)&selRef_generatorID);
    if (!v11) {
      break;
    }
    uint64_t v12 = v11;
    if (*(void *)(a4 + 16) && (unint64_t v13 = sub_1001D7094(v10, v11), (v14 & 1) != 0))
    {
      uint64_t v15 = *(void *)(*(void *)(a4 + 56) + 8 * v13);
      swift_bridgeObjectRelease(v12);
      if (v15 < 0) {
        goto LABEL_30;
      }
      if (a2)
      {
LABEL_16:
        sub_1001B4B94(0LL, &qword_10044BFD8, off_1003D5DF8);
        sub_1002877B8();
        uint64_t v17 = v16;
        [a2 addGenerateDescriptorInfos:v16];

        goto LABEL_19;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v12);
      if (a2) {
        goto LABEL_16;
      }
    }

uint64_t sub_100285650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&__src[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  __src[0] = 0LL;
  uint64_t v10 = (char *)[v8 dataWithPropertyList:isa format:200 options:0 error:__src];

  id v11 = __src[0];
  if (!v10)
  {
    uint64_t v21 = v11;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v22);
    return (uint64_t)v10;
  }

  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  unint64_t v14 = v13;

  uint64_t v15 = Data.count.getter(v12, v14);
  BOOL v16 = __OFADD__(v15, 200LL);
  size_t v17 = v15 + 200;
  if (v16) {
    __break(1u);
  }
  uint64_t v18 = (char *)malloc(v17);
  if (!v18)
  {
    LODWORD(__src[0]) = 12;
    unint64_t v23 = sub_10028D4E0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001A9F18( &qword_10044BF28,  (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError,  (uint64_t)&protocol conformance descriptor for POSIXError);
    uint64_t v25 = _BridgedStoredNSError.init(_:userInfo:)(__src, v23, v4, v24);
    POSIXError._nsError.getter(v25);
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow(v26);
    sub_1001BB39C(v12, v14);
    return (uint64_t)v10;
  }

  uint64_t v10 = v18;
  bzero((char *)__src + 4, 0xC4uLL);
  LODWORD(__src[0]) = 1;
  sub_10028E4D8(a1, a2, (char *)&__src[17], (uint64_t)&v32);
  unint64_t v19 = Data.count.getter(v12, v14);
  if ((v19 & 0x8000000000000000LL) != 0)
  {
    uint64_t v28 = "Negative value is not representable";
    uint64_t v29 = 35LL;
  }

  else
  {
    if (!HIDWORD(v19))
    {
      HIDWORD(__src[0]) = v19;
      memcpy(v10, __src, 0xC8uLL);
      uint64_t v20 = Data.count.getter(v12, v14);
      Data.copyBytes(to:count:)(v10 + 200, v20, v12, v14);
      sub_1001BB39C(v12, v14);
      return (uint64_t)v10;
    }

    uint64_t v28 = "Not enough bits to represent the passed value";
    uint64_t v29 = 45LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v28,  v29,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

id sub_100285994()
{
  id v0 = objc_allocWithZone((Class)sub_10028EF34());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  id v2 = [v0 initWithArray:isa];

  return v2;
}

double sub_1002859FC(uint64_t a1, char a2)
{
  return sub_100285A28(a2);
}

double sub_100285A28(char a1)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v37, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v37, 0, sizeof(v37));
  }

  sub_10028E61C((uint64_t)v37, (uint64_t)&v38, (uint64_t *)&unk_1004474B0);
  if (v39[2])
  {
    uint64_t v5 = swift_dynamicCast(&v36, &v38, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
    if ((v5 & 1) != 0)
    {
      double v13 = v36;
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v14 = type metadata accessor for Logger(0LL);
      uint64_t v15 = sub_1001B0D98(v14, (uint64_t)qword_1004541B0);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v15, v16, v17);
      os_log_type_t v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v20 = 134217984;
        double v38 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v20 + 4, v20 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "ConversationLinkSync: randomCheckInInterval: defaults overriding {overrideInterval: %f)}",  v20,  0xCu);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      return v13;
    }
  }

  else
  {
    sub_1001C6CE4((uint64_t)&v38, (uint64_t *)&unk_1004474B0);
  }

  if (a1)
  {
    if (a1 == 1)
    {
      double v21 = 1.0;
      double v22 = 4.0;
    }

    else
    {
      double v22 = 40.0;
      double v21 = 20.0;
    }

    sub_10028E20C(v21, v22, v5, v6, v7, v8, v9, v10, v11, v12);
    double v13 = v23;
  }

  else
  {
    double v13 = 0.01;
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_1001B0D98(v24, (uint64_t)qword_1004541B0);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v25, v26, v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    double v38 = *(double *)&v31;
    *(_DWORD *)uint64_t v30 = 134218242;
    *(double *)unint64_t v37 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, (char *)v37 + 8, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2080;
    LOBYTE(v37[0]) = a1;
    uint64_t v32 = String.init<A>(reflecting:)(v37, &unk_1003DE408);
    unint64_t v34 = v33;
    *(void *)&v37[0] = sub_1001D7CF0(v32, v33, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, (char *)v37 + 8, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease(v34);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "ConversationLinkSync: randomCheckInInterval: calculated {interval: %f, scheduleMode: %s}",  (uint8_t *)v30,  0x16u);
    swift_arrayDestroy(v31, 1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  return v13;
}

uint64_t sub_100285DC0()
{
  swift_unknownObjectRelease(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 104));
  swift_release(*(void *)(v0 + 112));

  return v0;
}

uint64_t sub_100285E24()
{
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t type metadata accessor for ConversationLinkSyncManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd27ConversationLinkSyncManager);
}

uint64_t sub_100285E64()
{
  uint64_t v0 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v1 = sub_1001C7370(v0, 48LL);
  *(_OWORD *)(v1 + sub_1001C954C(v0 + 16) = xmmword_10037B290;
  *(void *)(v1 + 32) = sub_1002A2B48();
  *(void *)(v1 + 40) = v2;
  sub_100285ED8();
  return swift_bridgeObjectRelease(v1);
}

void sub_100285ED8()
{
}

void sub_100285EF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

void sub_100285F1C()
{
}

void sub_100285F38()
{
  uint64_t v19 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  char v11 = v10;
  uint64_t v13 = v12;
  uint64_t v20 = *(void *)(sub_1001C7360() - 8);
  sub_1001C7334();
  __chkstk_darwin(v14);
  sub_1001C7290();
  sub_1001C74DC();
  __chkstk_darwin(v15);
  sub_1001B10F0();
  uint64_t v16 = sub_1001C7370(v8, 33LL);
  *(void *)(v16 + sub_1001C954C(v0 + 16) = v9;
  *(void *)(v16 + 24) = v13;
  *(_BYTE *)(v16 + 32) = v11;
  void v21[4] = v6;
  void v21[5] = v16;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = sub_1002356BC;
  void v21[3] = v19;
  uint64_t v17 = _Block_copy(v21);
  sub_10028EA80();
  sub_10028EE88();
  sub_1001C7348();
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v18 = sub_1001E2080();
  sub_10026F214(v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1);
  _Block_release(v17);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_100286088(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

void sub_1002860B0()
{
  char v4 = v3;
  sub_1001C7360();
  sub_1001C74DC();
  __chkstk_darwin(v5);
  sub_1001C7290();
  sub_10028EDFC();
  __chkstk_darwin(v6);
  sub_10028EC00();
  uint64_t v7 = sub_1001C7370((uint64_t)&unk_1003E5AD8, 25LL);
  *(void *)(v7 + sub_1001C954C(v0 + 16) = v0;
  *(_BYTE *)(v7 + 24) = v4;
  uint64_t v8 = sub_1001E2064((uint64_t)sub_1002356BC);
  sub_10028EE88();
  sub_1001C7348();
  sub_10028EE48( (unint64_t *)&qword_100447CB0,  v9,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v10 = sub_1001E2080();
  sub_10026F214(v10);
  sub_10028EBD4();
  _Block_release(v8);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1002861CC(uint64_t a1, unsigned int a2)
{
}

void sub_1002861F8()
{
  char v4 = sub_1001E2064((uint64_t)sub_1002356BC);
  sub_10028EE88();
  sub_1001C7348();
  sub_10028EE48( (unint64_t *)&qword_100447CB0,  v5,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v6 = sub_1001E2080();
  sub_10026F214(v6);
  sub_10028EBD4();
  _Block_release(v4);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1002862F8(uint64_t a1)
{
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1001B0D98(v2, (uint64_t)qword_1004541B0);
  unint64_t v6 = (os_log_s *)Logger.logObject.getter(v3, v4, v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ConversationLinkSync: scheduleCheckInIfNeeded called", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  sub_10028864C((char)objc_msgSend( *(id *)(*(void *)(a1 + 72)
                              + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service),
                        "hasActiveAccounts"));
}

void sub_1002863F0()
{
  uint64_t v5 = v4;
  sub_1001C7360();
  sub_10028EDFC();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_1001C7290();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v9 = sub_1001C7370((uint64_t)&unk_1003E5A60, 32LL);
  *(void *)(v9 + sub_1001C954C(v0 + 16) = v0;
  *(void *)(v9 + 24) = v5;
  unint64_t v10 = sub_1001E2064((uint64_t)sub_1002356BC);
  swift_retain(v0);
  sub_1001C7478();
  sub_1001C7348();
  sub_10028EE48( (unint64_t *)&qword_100447CB0,  v11,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v12 = sub_1001E2080();
  sub_10026F214(v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v10);
  _Block_release(v10);
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100260AB0(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_100286534(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1001DED98();
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v4, (uint64_t)qword_1004541B0);
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v5 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v5, v6, v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = swift_bridgeObjectRetain(v3);
    uint64_t v12 = Set.description.getter(v11, &type metadata for String, &protocol witness table for String);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(v3);
    uint64_t v21 = sub_1001D7CF0(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v3, 2LL);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v15 = swift_bridgeObjectRetain(a2);
    uint64_t v16 = Array.description.getter(v15, &type metadata for String);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease(a2);
    uint64_t v21 = sub_1001D7CF0(v16, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "ConversationLinkSync: scheduleRecover called {deviceDestinations: %s, pseudonyms: %s}",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v20, 2LL);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  sub_10028AC34(a2, v3);
  return swift_bridgeObjectRelease(v3);
}

void sub_1002867B4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v113 = (void *)(v4 + 32);
  sub_10028EC5C((void *)(v4 + 32));
  unint64_t v6 = v5;
  unint64_t v115 = v5 >> 62;
  if (v5 >> 62) {
    goto LABEL_99;
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_1001B922C();
  while (1)
  {
    unint64_t v123 = v6;
    if (!v7) {
      break;
    }
    unint64_t v118 = v6 & 0xC000000000000001LL;
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    unint64_t v3 = 4LL;
    uint64_t v116 = v7;
    while (1)
    {
      os_log_type_t v9 = v118
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      unint64_t v121 = v3 - 3;
      uint64_t v10 = *(void *)&v9[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
      uint64_t v11 = *(void *)&v9[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
      uint64_t v12 = v9;
      uint64_t v13 = *(void *)&v9[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
      sub_1001F859C();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      v124[0] = (uint64_t)v8;
      sub_1001D7094(v10, v11);
      sub_10028EC44();
      Swift::Int v19 = v17 + v18;
      if (__OFADD__(v17, v18)) {
        goto LABEL_92;
      }
      unint64_t v6 = v15;
      char v20 = v16;
      sub_1001AFF14(&qword_10044BEF8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
      {
        unint64_t v21 = sub_10028ED0C();
        if ((v20 & 1) != (v22 & 1)) {
          goto LABEL_116;
        }
        unint64_t v6 = v21;
      }

      uint64_t v8 = (void *)v124[0];
      if ((v20 & 1) != 0)
      {
        *(void *)(*(void *)(v124[0] + 56) + 8 * v6) = v13;
      }

      else
      {
        sub_10028EAE0(v124[0] + 8 * (v6 >> 6));
        double v23 = (uint64_t *)(v8[6] + 16 * v6);
        uint64_t *v23 = v10;
        v23[1] = v11;
        *(void *)(v8[7] + 8 * v6) = v13;
        uint64_t v24 = v8[2];
        BOOL v25 = __OFADD__(v24, 1LL);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_95;
        }
        uint64_t v8[2] = v26;
        sub_1001F859C();
      }

      sub_1001B1200();
      sub_10028EBCC();
      ++v3;
      unint64_t v6 = v123;
      if (v121 == v116) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    sub_10022CE68(v6);
    uint64_t v7 = sub_1001F8698();
    sub_1001B0F28();
  }

  uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_20:
  sub_1001B0F28();
  uint64_t v27 = (uint64_t *)[a2 generateDescriptorInfos];
  unint64_t v28 = (unint64_t)a1 >> 62;
  if (v27)
  {
    os_log_type_t v29 = v27;
    id v30 = [v27 count];
    if (v28)
    {
LABEL_104:
      unint64_t v3 = a1;
      if (a1 < 0) {
        uint64_t v110 = a1;
      }
      else {
        uint64_t v110 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_1001EE280();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v110);
      sub_1001B0EB8();
    }

    else
    {
      uint64_t v31 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v30 == (id)v31)
    {
      uint64_t v32 = (void **)sub_1001B204C(v113, *(void *)(v114 + 56));
      sub_10028EF88(v32);
      sub_1001D8FCC();
      goto LABEL_27;
    }
  }

  unint64_t v3 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
LABEL_27:
  unint64_t v119 = v3;
  unint64_t v3 = (unint64_t)&_swiftEmptySetSingleton;
  os_log_type_t v127 = &_swiftEmptySetSingleton;
  if (v115)
  {
    sub_1001B922C();
    uint64_t v33 = sub_1001F8698();
    sub_1001B0F28();
    if (v33) {
      goto LABEL_29;
    }
LABEL_40:
    sub_1001B0F28();
    BOOL v35 = _swiftEmptyArrayStorage;
    goto LABEL_41;
  }

  uint64_t v33 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v33) {
    goto LABEL_40;
  }
LABEL_29:
  v124[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100250050(0, v33 & ~(v33 >> 63), 0);
  if (v33 < 0)
  {
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  uint64_t v34 = 0LL;
  BOOL v35 = (void *)v124[0];
  unint64_t v36 = v6 & 0xC000000000000001LL;
  do
  {
    if (v33 == v34) {
      goto LABEL_93;
    }
    if (v36) {
      unint64_t v37 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v6);
    }
    else {
      unint64_t v37 = (char *)sub_10028EC34(v6 + 8 * v34);
    }
    double v38 = v37;
    uint64_t v40 = *(void *)&v37[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
    uint64_t v39 = *(void *)&v37[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
    sub_1001B922C();

    v124[0] = (uint64_t)v35;
    unint64_t v3 = v35[2];
    unint64_t v41 = v35[3];
    if (v3 >= v41 >> 1)
    {
      sub_100250050(v41 > 1, v3 + 1, 1);
      BOOL v35 = (void *)v124[0];
    }

    ++v34;
    void v35[2] = v3 + 1;
    unint64_t v42 = &v35[2 * v3];
    v42[4] = v40;
    void v42[5] = v39;
    unint64_t v6 = v123;
  }

  while (v33 != v34);
  sub_1001B0F28();
LABEL_41:
  uint64_t v43 = sub_10024E6B8((uint64_t)v35);
  uint64_t v125 = &_swiftEmptySetSingleton;
  uint64_t v126 = v43;
  unint64_t v44 = v119;
  if (v28)
  {
    swift_bridgeObjectRetain(a1);
    unint64_t v6 = sub_10028EAD8();
    if (v6) {
      goto LABEL_43;
    }
  }

  else
  {
    unint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v6)
    {
LABEL_43:
      uint64_t v45 = 0LL;
      unint64_t v46 = a1 & 0xC000000000000001LL;
      id v113 = &_swiftEmptyDictionarySingleton;
      unint64_t v114 = a1 & 0xC000000000000001LL;
      uint64_t v122 = &_swiftEmptyDictionarySingleton;
      unint64_t v115 = v6;
      while (1)
      {
        if (v46) {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, a1);
        }
        else {
          id v47 = sub_10028EC34(a1 + 8 * v45);
        }
        unint64_t v3 = (unint64_t)v47;
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_94;
        }
        unint64_t v123 = v45 + 1;
        sub_10028EA64();
        if (!v49) {
          goto LABEL_109;
        }
        if (!v8[2]) {
          break;
        }
        unint64_t v50 = sub_1001D7094(v48, v49);
        if ((v51 & 1) == 0) {
          break;
        }
        uint64_t v52 = *(void *)(v8[7] + 8 * v50);
        sub_1001B2428();
        if (v52 >= sub_10028EC1C())
        {
          if (v52 > sub_10028EC1C())
          {
            sub_10028EA64();
            if (!v70) {
              goto LABEL_114;
            }
            uint64_t v71 = v69;
            unint64_t v6 = v70;
            unsigned int v117 = sub_10028EC1C();
            char v72 = sub_10028EF6C();
            v124[0] = (uint64_t)v113;
            uint64_t v73 = v71;
            sub_10028EBEC();
            sub_10028EC44();
            id v30 = (id)(v76 + v77);
            if (__OFADD__(v76, v77)) {
              goto LABEL_97;
            }
            unint64_t v78 = v74;
            unint64_t v28 = v75;
            sub_1001AFF14(&qword_10044BEF8);
            os_log_type_t v29 = v124;
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v72, (Swift::Int)v30))
            {
              os_log_type_t v29 = (uint64_t *)v124[0];
              unint64_t v79 = sub_1001D7094(v73, v6);
              if ((v28 & 1) != (v80 & 1)) {
                goto LABEL_116;
              }
              unint64_t v78 = v79;
            }

            id v81 = (void *)v124[0];
            id v113 = (void *)v124[0];
            if ((v28 & 1) != 0)
            {
              *(void *)(*(void *)(v124[0] + 56) + 8 * v78) = v117;
              unint64_t v44 = v119;
            }

            else
            {
              *(void *)(v124[0] + 8 * (v78 >> 6) + 64) |= 1LL << v78;
              uint64_t v86 = (uint64_t *)(v81[6] + 16 * v78);
              uint64_t *v86 = v73;
              v86[1] = v6;
              *(void *)(v81[7] + 8 * v78) = v117;
              uint64_t v87 = v81[2];
              BOOL v25 = __OFADD__(v87, 1LL);
              uint64_t v88 = v87 + 1;
              unint64_t v44 = v119;
              if (v25)
              {
                __break(1u);
                goto LABEL_104;
              }

              v81[2] = v88;
              sub_1001B922C();
            }

            sub_1001B0F28();
            sub_10028EBCC();
            unint64_t v46 = a1 & 0xC000000000000001LL;
            unint64_t v6 = v115;
          }
        }

        else
        {
          sub_10028EA64();
          if (!v54) {
            goto LABEL_113;
          }
          uint64_t v55 = v53;
          unint64_t v6 = v54;
          char v56 = sub_10028EF6C();
          v124[0] = (uint64_t)v122;
          sub_10028EBEC();
          sub_10028EC44();
          Swift::Int v61 = v59 + v60;
          if (__OFADD__(v59, v60)) {
            goto LABEL_96;
          }
          unint64_t v62 = v57;
          char v63 = v58;
          sub_1001AFF14(&qword_10044BEF8);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v56, v61))
          {
            unint64_t v64 = sub_10028EBEC();
            if ((v63 & 1) != (v65 & 1)) {
              goto LABEL_116;
            }
            unint64_t v62 = v64;
          }

          uint64_t v122 = (void *)v124[0];
          if ((v63 & 1) != 0)
          {
            *(void *)(*(void *)(v124[0] + 56) + 8 * v62) = v52;
          }

          else
          {
            sub_10028EAE0(v124[0] + 8 * (v62 >> 6));
            uint64_t v83 = (void *)(v82[6] + 16 * v62);
            *uint64_t v83 = v55;
            v83[1] = v6;
            *(void *)(v82[7] + 8 * v62) = v52;
            uint64_t v84 = v82[2];
            BOOL v25 = __OFADD__(v84, 1LL);
            uint64_t v85 = v84 + 1;
            if (v25) {
              goto LABEL_98;
            }
            v82[2] = v85;
            sub_1001B922C();
          }

          sub_1001B0F28();
          sub_10028EBCC();
          unint64_t v44 = v119;
          unint64_t v46 = a1 & 0xC000000000000001LL;
          unint64_t v6 = v115;
        }

        sub_10028EA64();
        if (!v90) {
          goto LABEL_112;
        }
        uint64_t v91 = v90;
        if (!*(void *)(v44 + 16) || (unint64_t v92 = sub_1001D7094(v89, v90), (v93 & 1) == 0))
        {
          uint64_t v68 = v91;
          goto LABEL_85;
        }

        unint64_t v94 = *(void *)(*(void *)(v44 + 56) + 8 * v92);
        sub_1001B2428();
        id v95 = [a2 generateDescriptorInfosAtIndex:v45];
        if (v95)
        {
          id v96 = v95;
          id v97 = [v96 hasGenerateDescriptorVersionSum];
          if ((_DWORD)v97)
          {
            id v98 = sub_1001B115C((uint64_t)v97, "generateDescriptorVersionSum");
            if ((v94 & 0x8000000000000000LL) != 0 || (id)v94 != v98)
            {
              sub_10028EA64();
              if (!v102) {
                goto LABEL_115;
              }
              sub_10028EEC4(v124, v101, v102);

              goto LABEL_61;
            }
          }
        }

LABEL_86:
        sub_10028EA64();
        if (!v100) {
          goto LABEL_110;
        }
        sub_10028D89C(v99, v100);
        sub_1001B2428();

        sub_1001AA9C8();
        ++v45;
        if (v123 == v6) {
          goto LABEL_102;
        }
      }

      sub_1001B2428();
      sub_10028EA64();
      if (!v67) {
        goto LABEL_111;
      }
      sub_10028EEC4(v124, v66, v67);
LABEL_61:
      uint64_t v68 = v124[1];
LABEL_85:
      swift_bridgeObjectRelease(v68);
      goto LABEL_86;
    }
  }

  id v113 = &_swiftEmptyDictionarySingleton;
LABEL_102:
  swift_bridgeObjectRelease(a1);
  sub_1001B0F5C();
  uint64_t v103 = sub_1001B922C();
  uint64_t v104 = sub_100284E60(v103);
  sub_1001B0F28();
  uint64_t v105 = sub_1001B9234();
  uint64_t v106 = sub_100284E60(v105);
  sub_1001B0F28();
  sub_10022CCA4((uint64_t)v113);
  uint64_t v107 = v126;
  uint64_t v108 = (uint64_t)v127;
  uint64_t v109 = (uint64_t)v125;
  sub_1001D9020();
  *a3 = v107;
  a3[1] = v108;
  a3[2] = v109;
  a3[3] = v104;
  a3[4] = v106;
  sub_10028EB80();
}

void sub_100287064()
{
  uint64_t v1 = (void **)sub_10028EF14();
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t inited = swift_initStackObject(v2, v24);
  *(_OWORD *)(inited + sub_1001C954C(v0 + 16) = xmmword_10037B290;
  uint64_t v4 = *(os_log_s **)(v0 + 112);
  *(void *)(inited + 32) = sub_1002A2B48();
  *(void *)(inited + 40) = v5;
  unint64_t v6 = (unint64_t)sub_1001B4040((void *)inited, *v1);
  swift_setDeallocating(inited);
  sub_1001E79E4();
  if (!(v6 >> 62))
  {
    if (*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_13:
    sub_1001B0F5C();
    return;
  }

  sub_1001B9234();
  uint64_t v23 = sub_10028EAD8();
  sub_1001B0F5C();
  if (!v23) {
    goto LABEL_13;
  }
LABEL_3:
  sub_1002734A0(0LL, (v6 & 0xC000000000000001LL) == 0, v6);
  if ((v6 & 0xC000000000000001LL) != 0) {
    uint64_t v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v6);
  }
  else {
    uint64_t v7 = (char *)*(id *)(v6 + 32);
  }
  uint64_t v8 = v7;
  sub_1001B0F5C();
  os_log_type_t v9 = v4;
  sub_1002A2F08();
  uint64_t v10 = *(void *)&v8[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
  if (v11 >= v10)
  {

    return;
  }

  if (__OFADD__(v10, 10LL))
  {
    __break(1u);
  }

  else
  {
    os_log_type_t v9 = v4;
    sub_1002A2F8C(v10 + 10);
    if (qword_100446930 == -1) {
      goto LABEL_8;
    }
  }

  swift_once(&qword_100446930, sub_100258A18);
LABEL_8:
  uint64_t v12 = sub_1001B0E98();
  sub_10022CF28(v12, (uint64_t)qword_1004541B0);
  uint64_t v13 = v8;
  Logger.logObject.getter(v13, v14, v15);
  os_log_type_t v16 = sub_1001B105C();
  if (sub_1001BB5B0(v16))
  {
    uint64_t v17 = sub_1001B0E78(22LL);
    *(_DWORD *)uint64_t v17 = 134218240;
    uint64_t v20 = sub_10028EF4C(v17, v18, v17 + 4, v17 + 12, v19);
    *(_WORD *)(v17 + 12) = 2048;
    sub_10028EF4C(v20, v21, v17 + 14, v17 + 22, v22);

    sub_1001D9094( (void *)&_mh_execute_header,  v9,  (os_log_type_t)inited,  "ConversationLinkSync: scheduleCheckIn validation check failed, fixing local version {localVersion: %ld, localLatest.version: %ld}",  (uint8_t *)v17);
    sub_1001B0E60(v17);
  }

  else
  {
  }

void sub_10028728C(uint64_t a1, char a2, unsigned int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1001DED98();
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v9 = sub_1001B0E98();
  uint64_t v10 = (os_log_s *)sub_1001B0D98(v9, (uint64_t)qword_1004541B0);
  sub_1001FBB5C();
  sub_10028EB58();
  sub_1001FBB5C();
  uint64_t v11 = sub_10028EB58();
  Logger.logObject.getter(v11, v12, v13);
  os_log_type_t v14 = sub_1001B105C();
  if (os_log_type_enabled(v10, v14))
  {
    uint64_t v15 = sub_1001B0E78(32LL);
    uint64_t v26 = sub_1001B0E78(96LL);
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v15 = 136315650;
    LOBYTE(v28) = a3;
    unsigned int v27 = a3;
    uint64_t v16 = String.init<A>(reflecting:)(&v28, &unk_1003DE408);
    uint64_t v28 = sub_1001D7CF0(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 4, v15 + 12);
    sub_1001B0F5C();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v18 = sub_1001FBB5C();
    uint64_t v19 = Set.description.getter(v18, &type metadata for String, &protocol witness table for String);
    sub_1001B2428();
    uint64_t v28 = sub_1001B1278(v19, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 14, v15 + 22);
    sub_10022CCA4(v8);
    sub_1001B0EC0();
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v28 = a1;
    v29[0] = a2;
    sub_10028EB58();
    uint64_t v21 = String.init<A>(reflecting:)(&v28, &type metadata for ConversationLinkSyncManager.CheckInType);
    unint64_t v23 = v22;
    uint64_t v28 = sub_1001D7CF0(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 24, v15 + 32);
    unint64_t v24 = v23;
    a3 = v27;
    swift_bridgeObjectRelease(v24);
    sub_10028ED1C();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v14,  "ConversationLinkSync: scheduleCheckIn called {scheduleMode: %s, deviceDestinations: %s, type: %s}",  (uint8_t *)v15,  0x20u);
    swift_arrayDestroy(v26, 3LL);
    sub_1001B0E60(v26);
    sub_1001B0E60(v15);
  }

  else
  {
    sub_10022CCA4(v8);
    sub_10028ED1C();
  }

  uint64_t v25 = sub_1001C7370((uint64_t)&unk_1003E5A38, 33LL);
  *(void *)(v25 + sub_1001C954C(v0 + 16) = v4;
  *(void *)(v25 + 24) = a1;
  *(_BYTE *)(v25 + 32) = a2;
  sub_10028EB58();
  sub_10022CD70();
  sub_1001B6D44(v8, 2, a3, (uint64_t)sub_10028E6A8, v25);
  swift_release(v25);
  sub_1001B2428();
  sub_100287064();
  sub_1001E9024();
}

void sub_10028752C(void *a1, char a2)
{
  id v5 = [objc_allocWithZone((Class)CSDMessagingLinkSyncCheckInMessage) init];
  if (a1 == (void *)1)
  {
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v7 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
    if (v5) {
      [v5 setShouldCheckAllGenerators:1];
    }
  }

  else
  {
    uint64_t v8 = (void *)(v2 + 32);
    if (a1)
    {
      uint64_t v9 = (void **)sub_1001B204C(v8, *(void *)(v2 + 56));
      uint64_t v10 = sub_1001B4040(a1, *v9);
    }

    else
    {
      sub_10028EC5C(v8);
    }

    unint64_t v6 = (unint64_t)v10;
    if (v5) {
      [v5 setShouldCheckAllGenerators:a1 == 0];
    }
    if ((a2 & 1) != 0)
    {
      uint64_t v12 = (void **)sub_10028EF14();
      sub_10028EF88(v12);
    }

    else
    {
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
    }

    uint64_t v7 = v11;
  }

  uint64_t v13 = *(void *)(v7 + 16);
  if (!(v6 >> 62))
  {
    uint64_t v14 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v14) {
      goto LABEL_15;
    }
LABEL_27:
    sub_1001B2428();
    uint64_t v32 = (void *)v7;
LABEL_28:
    swift_bridgeObjectRelease(v32);
    sub_10024D5EC();
    return;
  }

  sub_1001FBB5C();
  uint64_t v14 = sub_1001F8698();
  sub_1001B2428();
  if (!v14) {
    goto LABEL_27;
  }
LABEL_15:
  uint64_t v15 = objc_opt_self(&OBJC_CLASS___CSDMessagingConversationLinkGeneratorDescriptor);
  if (v14 >= 1)
  {
    uint64_t v16 = (void *)v15;
    uint64_t v33 = v13;
    sub_1001FBB5C();
    for (uint64_t i = 0LL; i != v14; ++i)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v18 = sub_10028EE7C();
      }
      else {
        uint64_t v18 = (uint64_t)sub_10028EC34(v6 + 8 * i);
      }
      uint64_t v19 = (void *)v18;
      id v20 = objc_msgSend(v16, "generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:", v18, v33);

      if (v20)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v22 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v21 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v22 >= v21 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1LL);
        }
        uint64_t v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized Array._endMutation()(v23, v24, v25, v26, v27, v28, v29, v30, v33);
      }
    }

    sub_1001B2428();
    sub_1001B2428();
    id v31 = v5;
    sub_1001B9234();
    sub_100285430((uint64_t)_swiftEmptyArrayStorage, v5, v33 != 0, v7);
    sub_1001B0F5C();
    uint64_t v32 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }

  __break(1u);
}

void sub_1002877B8()
{
  id v0 = [objc_allocWithZone((Class)sub_10028EF34()) init];
  if (v0)
  {
    sub_10028EA98(v0, "setGenerateDescriptorVersionSum:");
    sub_1001AA978();
  }

  else
  {
    __break(1u);
  }

void sub_1002877FC(uint64_t a1, uint64_t a2, os_log_s *a3, char a4)
{
  id v5 = v4;
  id v10 = [objc_allocWithZone((Class)CSDMessagingLinkSyncMessage) init];
  uint64_t v11 = v10;
  if (v10)
  {
    [v10 setType:2];
    id v12 = v11;
    uint64_t v13 = a3;
    a3 = (os_log_s *)v5;
    sub_10028752C(v13, a4);
    uint64_t v15 = v14;
    sub_10028EA98(v12, "setCheckInMessage:");

    sub_10028E3AC(v12);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
  }

  else
  {
    uint64_t v17 = 0LL;
    unint64_t v19 = 0xF000000000000000LL;
  }

  uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t inited = swift_initStackObject(v20, v106);
  *(_OWORD *)(inited + sub_1001C954C(v0 + 16) = xmmword_10037B290;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  sub_1001FBB5C();
  uint64_t v22 = sub_10024C038(inited);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v23 = sub_1001B0E98();
  sub_10022CF28(v23, (uint64_t)qword_1004541B0);
  id v24 = v11;
  sub_10022CE68(v22);
  id v25 = v24;
  sub_10028EF40((uint64_t)v25, v26, v27);
  os_log_type_t v28 = sub_1001B105C();
  uint64_t v98 = v17;
  unint64_t v99 = v19;
  if (sub_10028ECCC(v28))
  {
    uint64_t v95 = (uint64_t)v5;
    uint64_t v29 = sub_1001B0E78(22LL);
    uint64_t v30 = (void *)sub_1001B0E78(8LL);
    uint64_t v91 = sub_1001B0E78(32LL);
    uint64_t v105 = v91;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v31 = sub_1001B922C();
    uint64_t v32 = Set.description.getter(v31, &type metadata for String, &protocol witness table for String);
    unint64_t v34 = v33;
    sub_1001B0F28();
    uint64_t v100 = sub_1001D7CF0(v32, v34, &v105);
    sub_10028EA70(v100, v35, v36, v29 + 12, v37, v38, v39, v40, v91, v95);
    sub_10022CCA4(v22);
    id v41 = (id)sub_1001E43E0();
    *(_WORD *)(v29 + 12) = 2112;
    if (v11) {
      id v41 = v24;
    }
    sub_10028EC88((uint64_t)v41, v42, v43, v44, v45, v46);
    *uint64_t v30 = v11;

    sub_1001D9094( (void *)&_mh_execute_header,  a3,  (os_log_type_t)a2,  "ConversationLinkSync: Performing check in {dest: %s, message: %@}",  (uint8_t *)v29);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v30);
    sub_1001B0E60((uint64_t)v30);
    a2 = v90;
    sub_1001B0F64(v90);
    sub_1001B0E60(v90);
    sub_1001B0E60(v29);

    uint64_t v17 = v98;
    unint64_t v19 = v99;
    id v5 = (os_log_s **)v94;
  }

  else
  {

    sub_10022CCA4(v22);
  }

  if (v19 >> 60 == 15) {
    __break(1u);
  }
  id v47 = v5[9];
  sub_1001BB31C(v17, v19);
  id v48 = sub_10028EF0C(v17, v19, v22);
  if (a2)
  {
    sub_1001BB464(v17, v19);
    sub_1002111A0();
    sub_1001B922C();
    sub_1002111A0();
    sub_10028EBF8();
    os_log_type_t v50 = sub_1001E0A4C();
    if (sub_10022CD18(v50))
    {
      uint64_t v51 = sub_1001B0E78(22LL);
      uint64_t v52 = (void *)sub_1001B0E78(8LL);
      uint64_t v53 = sub_1001B0E78(32LL);
      uint64_t v105 = v53;
      *(_DWORD *)uint64_t v51 = 136315394;
      uint64_t v54 = sub_1001B922C();
      uint64_t v55 = Set.description.getter(v54, &type metadata for String, &protocol witness table for String);
      sub_1001B0F28();
      uint64_t v101 = sub_10028ED3C(v55, v56, &v105);
      sub_10028EA70(v101, v57, v58, v51 + 12, v59, v60, v61, v62, v90, v94);
      sub_10022CCA4(v22);
      sub_1001B1200();
      *(_WORD *)(v51 + 12) = 2112;
      sub_1002111A0();
      uint64_t v102 = sub_10028EE34();
      sub_10028EA70(v102, v63, v64, v51 + 22, v65, v66, v67, v68, v92, v96);
      *uint64_t v52 = v102;
      sub_1001F8524();
      sub_1001F8524();
      sub_1001D9094( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v11,  "ConversationLinkSync: Failed sending check in! {dest: %s, error: %@}",  (uint8_t *)v51);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v52);
      sub_1001B0E60((uint64_t)v52);
      sub_1001B0F64(v53);
      sub_1001B0E60(v53);
      sub_1001B0E60(v51);

      sub_1001F8524();
LABEL_17:
      sub_1001BB464(v98, v99);

      return;
    }

    sub_1001BB464(v17, v19);
    sub_1001F8524();
    sub_10022CCA4(v22);
    sub_1001F8524();
    sub_1001F8524();
  }

  else
  {
    uint64_t v69 = (uint64_t)v48;
    uint64_t v70 = v49;
    sub_10028EF7C();
    sub_1001B922C();
    sub_10028EA80();
    sub_10028EBF8();
    os_log_type_t v71 = sub_1001B105C();
    if (sub_1001B1134(v71))
    {
      uint64_t v72 = sub_1001B0E78(22LL);
      uint64_t v73 = sub_1001B0E78(64LL);
      uint64_t v105 = v73;
      *(_DWORD *)uint64_t v72 = 136315394;
      uint64_t v74 = sub_1001B922C();
      uint64_t v75 = Set.description.getter(v74, &type metadata for String, &protocol witness table for String);
      sub_1001B0F28();
      uint64_t v103 = sub_10028ED3C(v75, v76, &v105);
      sub_10028EA70(v103, v77, v78, v72 + 12, v79, v80, v81, v82, v90, v94);
      sub_10022CCA4(v22);
      sub_1001B1200();
      *(_WORD *)(v72 + 12) = 2080;
      sub_10028EA80();
      uint64_t v104 = sub_1001B1278(v69, v83, &v105);
      sub_10028EA70(v104, v84, v85, v72 + 22, v86, v87, v88, v89, v93, v97);
      sub_10028EAF0(v70);
      sub_1001D9094( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v5,  "ConversationLinkSync: Sent check in {to: %s, idsIdentifier: %s}",  (uint8_t *)v72);
      sub_1001D9350(v73);
      sub_1001B0E60(v73);
      sub_1001B0E60(v72);

      goto LABEL_17;
    }

    sub_10028EF7C();
    sub_10022CCA4(v70);
    sub_10022CCA4(v22);
  }

void sub_100287DF4(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = v3;
  id v9 = [a1 generatorDescriptors];
  id v10 = v9;
  if (!v9)
  {
    sub_1001B4B94(0LL, &qword_10044BF40, &OBJC_CLASS___NSMutableArray_ptr);
    id v9 = (id)NSArray.init(arrayLiteral:)(_swiftEmptyArrayStorage);
    id v10 = v9;
  }

  uint64_t v198 = 0LL;
  uint64_t v11 = sub_1001B4C00((uint64_t)v9, &qword_10044BFD0, off_1003D5DD8);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v10, &v198, v11);

  id v12 = v198;
  if (!v198)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v14 = sub_1001B0E98();
    uint64_t v15 = (os_log_s *)sub_1001B0D98(v14, (uint64_t)qword_1004541B0);
    uint64_t v16 = sub_10022CE68(a3);
    Logger.logObject.getter(v16, v17, v18);
    os_log_type_t v19 = sub_1001E0A4C();
    if (sub_1001BB5B0(v19))
    {
      uint64_t v20 = a3;
      unint64_t v21 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v22 = sub_1001B0E78(32LL);
      uint64_t v198 = (void *)v22;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10028EA80();
      uint64_t v194 = (void *)sub_1001B1278(a2, v23, (uint64_t *)&v198);
      sub_1001B0F8C((uint64_t)&v194, (uint64_t)&v195);
      sub_10028EAF0(v20);
      sub_1001B0FD8( (void *)&_mh_execute_header,  v15,  v4,  "ConversationLinkSync: Processing check in, unable to convert descriptors -- dropping {from: %s}",  v21);
      sub_1001B0F64(v22);
      sub_1001B0E60(v22);
      sub_1001B0E60((uint64_t)v21);

      return;
    }

    uint64_t v65 = a3;
LABEL_32:
    sub_10022CCA4(v65);
    return;
  }

  else {
    LODWORD(v13) = 0;
  }
  sub_1002867B4((uint64_t)v12, a1, (uint64_t *)&v198);
  if (sub_100288590())
  {
    uint64_t v194 = v198;
    sub_10022C30C(&v194);
    uint64_t v191 = v199;
    sub_10022C30C(&v191);
    uint64_t v208 = v200;
    sub_10028EAD0();
    unint64_t v207 = v201;
    sub_10022C30C(&v207);
    unint64_t v206 = v202;
    sub_10028EAC8();
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v24 = sub_1001B0E98();
    sub_10022CF28(v24, (uint64_t)qword_1004541B0);
    uint64_t v25 = sub_1001B922C();
    Logger.logObject.getter(v25, v26, v27);
    os_log_type_t v28 = sub_1001B11C8();
    if (sub_1001E0A10(v28))
    {
      uint64_t v29 = (_DWORD *)sub_1001B0E78(12LL);
      uint64_t v30 = sub_1001B0E78(32LL);
      uint64_t v205 = (void *)v30;
      *uint64_t v29 = 136315138;
      uint64_t v31 = sub_1001B922C();
      uint64_t v32 = Array.description.getter(v31, v11);
      sub_1001B0F28();
      uint64_t v204 = sub_1001D92C8(v32, v33, (uint64_t *)&v205);
      sub_10028EEE4((uint64_t)&v204, (uint64_t)&v205, (uint64_t)(v29 + 1));
      sub_10022CCA4((uint64_t)v12);
      sub_1001B92A4();
      sub_10028EA50( (void *)&_mh_execute_header,  v34,  v35,  "ConversationLinkSync: Processing check in, no differences -- done {from: %%@, generatorDescriptors: %s}");
      sub_1001B0F64(v30);
      sub_1001B0E60(v30);
      sub_1001B0E60((uint64_t)v29);

      return;
    }

    uint64_t v65 = (uint64_t)v12;
    goto LABEL_32;
  }

  sub_1001B0F28();
  HIWORD(v197) = 0;
  uint64_t v208 = v199;
  if (*(void *)(v199 + 16)) {
    goto LABEL_19;
  }
  unint64_t v207 = v201;
  if (!(v201 >> 62))
  {
    if (!*(void *)((v201 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  sub_10028EDDC(v201);
  uint64_t v150 = sub_1001F8698();
  sub_10022C30C(&v207);
  if (v150) {
LABEL_19:
  }
    HIBYTE(v197) = 1;
LABEL_20:
  unint64_t v206 = v202;
  if (v202 >> 62)
  {
    sub_10028EDDC(v202);
    uint64_t v36 = sub_1001F8698();
    sub_10028EAC8();
    if (!v36)
    {
LABEL_22:
      if ((!(_DWORD)v13 || !v198[2]) && !*(void *)(v200 + 16)) {
        goto LABEL_26;
      }
    }
  }

  else
  {
    uint64_t v36 = *(void *)((v202 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v36) {
      goto LABEL_22;
    }
  }

  BYTE6(v197) = 1;
LABEL_26:
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v37 = sub_1001B0E98();
  sub_10022CF28(v37, (uint64_t)qword_1004541B0);
  int v38 = BYTE6(v197);
  uint64_t v39 = sub_10022CE68(a3);
  Logger.logObject.getter(v39, v40, v41);
  os_log_type_t v42 = sub_10028EFB0();
  uint64_t v175 = (uint64_t)v5;
  uint64_t v183 = a2;
  if (sub_1001D91E4(v42))
  {
    HIDWORD(v160) = HIBYTE(v197);
    uint64_t v43 = sub_1001B0E78(30LL);
    uint64_t v44 = a2;
    uint64_t v45 = sub_1001B0E78(32LL);
    uint64_t v194 = (void *)v45;
    *(_DWORD *)uint64_t v43 = 136315906;
    sub_1001B9234();
    uint64_t v191 = sub_10028EFEC(v44, v46, (uint64_t *)&v194);
    sub_10028EAB4((uint64_t)&v191, (uint64_t)&v192, v47, v43 + 12);
    uint64_t v48 = sub_10028EAF0(a3);
    *(_WORD *)(v43 + 12) = 1024;
    LODWORD(v191) = HIDWORD(v160);
    uint64_t v54 = sub_10028EF00(v48, v49, v43 + 14, v43 + 18, v50, v51, v52, v53, v151);
    *(_WORD *)(v43 + 18) = 1024;
    LODWORD(v191) = v38;
    sub_10028EF00(v54, v55, v43 + 20, v43 + 24, v56, v57, v58, v59, v152);
    *(_WORD *)(v43 + 24) = 1024;
    LODWORD(v191) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, (char *)&v191 + 4, v43 + 26, v43 + 30);
    sub_10028ED54();
    _os_log_impl(v60, v61, v62, v63, v64, 0x1Eu);
    sub_1001B0F64(v45);
    sub_1001B0E60(v45);
    sub_1001B0E60(v43);
  }

  else
  {

    sub_10022CCA4(a3);
  }

  uint64_t v204 = v200;
  uint64_t v205 = v198;
  unint64_t v203 = v201;
  sub_10028EEF8();
  sub_10028EEA8();
  sub_10028ECEC();
  uint64_t v66 = sub_10028EEA0();
  sub_10028EE98( (uint64_t)v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v151,  v160,  v36,  v175,  v183,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
  sub_10028EEF8();
  sub_10028EEA8();
  sub_10028ECEC();
  uint64_t v74 = sub_10028EEA0();
  sub_10028EE98( (uint64_t)v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v153,  v161,  v168,  v176,  v184,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
  sub_10028EBF8();
  os_log_type_t v82 = sub_10028EFB0();
  if (sub_1001D91E4(v82))
  {
    uint64_t v83 = (_DWORD *)sub_1001B0E78(12LL);
    uint64_t v84 = sub_1001B0E78(32LL);
    uint64_t v194 = (void *)v84;
    *uint64_t v83 = 136315138;
    sub_10028EEF8();
    sub_10028EEA8();
    sub_10028ECEC();
    uint64_t v85 = sub_10028EEA0();
    sub_10028EE98( (uint64_t)v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v154,  v162,  v169,  v177,  v185,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
    uint64_t v93 = sub_10028D224();
    char v94 = v13;
    unint64_t v13 = v95;
    sub_10028EBAC();
    sub_10028EAD0();
    uint64_t v96 = sub_10028EBA4();
    sub_10028EB9C( (uint64_t)v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v155,  v163,  v170,  v178,  v186,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
    sub_10028EAC8();
    uint64_t v191 = sub_1001D7CF0(v93, v13, (uint64_t *)&v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192, v83 + 1, v83 + 3);
    unint64_t v104 = v13;
    LOBYTE(v13) = v94;
    swift_bridgeObjectRelease(v104);
    sub_10028EBAC();
    sub_10028EAD0();
    uint64_t v105 = sub_10028EBA4();
    sub_10028EB9C( (uint64_t)v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v156,  v164,  v171,  v179,  v187,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
    sub_10028EAC8();
    sub_10028EBAC();
    sub_10028EAD0();
    id v113 = sub_10028EBA4();
    sub_10028EB9C( (uint64_t)v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v157,  v165,  v172,  v180,  v188,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
    sub_10028EAC8();
    sub_10028ED54();
    sub_1001B0FD8(v121, v122, v123, v124, v125);
    sub_1001B0F64(v84);
    sub_1001B0E60(v84);
    sub_1001B0E60((uint64_t)v83);
  }

  else
  {
    sub_10028EBAC();
    sub_10028EAD0();
    uint64_t v126 = sub_10028EBA4();
    sub_10028EB9C( (uint64_t)v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v154,  v162,  v169,  v177,  v185,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
    sub_10028EAC8();
    sub_10028EBAC();
    sub_10028EAD0();
    uint64_t v134 = sub_10028EBA4();
    sub_10028EB9C( (uint64_t)v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v159,  v167,  v174,  v182,  v190,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
    sub_10028EAC8();
  }

  sub_1001B0E6C((uint64_t)&v197 + 6, (uint64_t)&v194);
  if (BYTE6(v197) == 1) {
    sub_100288FD0(&v198, v189, a3, v13);
  }
  sub_10028EBAC();
  sub_10028EAD0();
  int v142 = sub_10028EBA4();
  sub_10028EB9C( (uint64_t)v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v158,  v166,  v173,  v181,  v189,  v191,  v192,  v193,  (uint64_t)v194,  v195,  v196,  v197,  (uint64_t)v198,  v199,  v200,  v201,  v202,  v203);
  sub_10028EAC8();
  sub_1001B0E6C((uint64_t)&v197 + 7, (uint64_t)&v191);
  if (HIBYTE(v197) == 1) {
    sub_10028728C(0LL, 0, 1u);
  }
}

BOOL sub_100288590()
{
  if (*(void *)(*v0 + 16LL) || *(void *)(v0[1] + 16LL)) {
    return 0LL;
  }
  unint64_t v1 = v0[3];
  unint64_t v7 = v1;
  if (v1 >> 62)
  {
    sub_10028EDEC(v1);
    uint64_t v4 = sub_10028EAD8();
    sub_10022C30C(&v7);
    if (v4) {
      return 0LL;
    }
  }

  else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    return 0LL;
  }

  unint64_t v2 = v0[4];
  unint64_t v6 = v2;
  if (v2 >> 62)
  {
    sub_10028EDEC(v2);
    uint64_t v5 = sub_10028EAD8();
    sub_10022C30C(&v6);
    if (v5) {
      return 0LL;
    }
  }

  else if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    return 0LL;
  }

  return *(void *)(v0[2] + 16LL) == 0LL;
}

void sub_10028864C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v5 = [v4 standardUserDefaults];
  NSString v6 = sub_10028EDBC();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v42, v7);
    swift_unknownObjectRelease(v7);
  }

  else
  {
    memset(v42, 0, sizeof(v42));
  }

  sub_10028E61C((uint64_t)v42, (uint64_t)&v43, (uint64_t *)&unk_1004474B0);
  if (*(void *)&v44[20])
  {
    if (sub_1001DCFEC( (uint64_t)&v41 + 7,  (uint64_t)&v43,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool))
    {
      int v8 = HIBYTE(v41);
      goto LABEL_9;
    }
  }

  else
  {
    sub_1001C6CE4((uint64_t)&v43, (uint64_t *)&unk_1004474B0);
  }

  int v8 = 0;
LABEL_9:
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v9 = sub_1001B0E98();
  id v10 = (os_log_s *)sub_1001B0D98(v9, (uint64_t)qword_1004541B0);
  Logger.logObject.getter(v10, v11, v12);
  os_log_type_t v13 = sub_1001B105C();
  if (sub_1001E0994(v13))
  {
    uint64_t v14 = sub_1001B0E78(14LL);
    *(_DWORD *)uint64_t v14 = 67109376;
    int v43 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v14 + 4, v14 + 8);
    *(_WORD *)(v14 + 8) = 1024;
    int v43 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v14 + 10, v14 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  (os_log_type_t)v6,  "ConversationLinkSync: checkAccountStateForCheckIn called {activeAccounts: %{BOOL}d, lastAccountsChangedState: %{BOOL}d}",  (uint8_t *)v14,  0xEu);
    sub_1001B0E60(v14);
  }

  if (v8 != (a1 & 1))
  {
    if ((a1 & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v15 = sub_10028EFC4();
    uint64_t v16 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease(v15);
    if (v16) {
      sub_10028728C(0LL, 0, 2u);
    }
    uint64_t v17 = sub_10028EFC4();
    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRelease(v17);
    if (v18)
    {
      uint64_t v19 = swift_retain_n(v2, 2LL);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
      os_log_type_t v23 = static os_log_type_t.default.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = sub_1001B0E78(14LL);
        *(_DWORD *)uint64_t v24 = 67109376;
        int v43 = 1;
        sub_10028EF98(v24, v25, v24 + 4, v24 + 8, v26, v27, v28, v29, v39, v41);
        *(_WORD *)(v24 + 8) = 1024;
        uint64_t v30 = *(void *)(sub_10028EFC4() + 16);
        swift_release(v2);
        uint64_t v31 = sub_1001AA9C8();
        int v43 = v30 == 0;
        sub_10028EF98(v31, v32, v24 + 10, v24 + 14, v33, v34, v35, v36, v40, v41);
        swift_release(v2);
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "ConversationLinkSync: missing devices, waiting until devices appear {activeAccounts: %{BOOL}d, interactor.devi ceDestinations.isEmpty: %{BOOL}d}",  (uint8_t *)v24,  0xEu);
        sub_1001B0E60(v24);
      }

      else
      {

        swift_release_n(v2, 2LL);
      }
    }

    else
    {
LABEL_20:
      id v37 = [v4 standardUserDefaults];
      NSString v38 = sub_10028EDBC();
      [v37 setBool:a1 & 1 forKey:v38];
    }
  }

  sub_10028EB64();
}

void sub_1002889BC()
{
  uint64_t v1 = sub_1001C7370((uint64_t)&unk_1003E5998, 24LL);
  sub_10028ED74(v1);
  uint64_t v2 = sub_10022CC44((uint64_t)sub_100288F88, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v3, v4);
  swift_release(v0);
  xpc_activity_register("ConversationLinkCheckInActivity", XPC_ACTIVITY_CHECK_IN, v2);
  _Block_release(v2);
  sub_10028EE0C();
}

void sub_100288A58(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    uint64_t v28 = a2 + 16;
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_1001B0D98(v29, (uint64_t)qword_1004541B0);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v30, v31, v32);
    os_log_type_t v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      uint64_t v48 = a2 + 16;
      uint64_t v36 = v35;
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ConversationLinkSync: check in activity fired", v35, 2u);
      id v37 = v36;
      uint64_t v28 = v48;
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    swift_beginAccess(v28, &v52, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v28);
    if (Strong)
    {
      uint64_t v39 = Strong;
      id v40 = *(id *)(Strong + 120);
      swift_release(v39);
      void aBlock[4] = (uint64_t)sub_10028E614;
      uint64_t v51 = a2;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1002356BC;
      void aBlock[3] = (uint64_t)&unk_1003E5A00;
      uint64_t v41 = _Block_copy(aBlock);
      uint64_t v42 = swift_retain(a2);
      static DispatchQoS.unspecified.getter(v42);
      uint64_t v49 = _swiftEmptyArrayStorage;
      sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v44 = v43;
      uint64_t v45 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
      unint64_t v46 = sub_1001C94D0();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v45, v46, v4, v44);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7);
      _Block_release(v41);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_release(v51);
    }
  }

  else if (!state)
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_int64(empty, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_7_DAYS);
    xpc_object_t v14 = xpc_activity_copy_criteria(a1);
    if (v14)
    {
      xpc_object_t v15 = v14;
      if (!xpc_equal(v14, empty)) {
        xpc_activity_set_criteria(a1, empty);
      }
      swift_unknownObjectRelease(v15);
    }

    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v16, (uint64_t)qword_1004541B0);
    uint64_t v17 = swift_unknownObjectRetain_n(empty, 2LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v17, v18, v19);
    os_log_type_t v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v52 = (uint64_t)empty;
      swift_unknownObjectRetain(empty);
      uint64_t v24 = sub_1001AFF14((uint64_t *)&unk_10044BFC0);
      uint64_t v25 = String.init<A>(reflecting:)(&v52, v24);
      unint64_t v27 = v26;
      uint64_t v52 = sub_1001D7CF0(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v22 + 4, v22 + 12);
      swift_unknownObjectRelease_n(empty, 2LL);
      swift_bridgeObjectRelease(v27);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "ConversationLinkSync: check in activity scheduled {criteria: %s}",  v22,  0xCu);
      swift_arrayDestroy(v23, 1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_unknownObjectRelease(empty);
    }

    else
    {

      swift_unknownObjectRelease_n(empty, 3LL);
    }
  }

uint64_t sub_100288F28(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_10028728C(0LL, 1, 2u);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100288F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_100288FD0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = (void *)a1[4];
  uint64_t v96 = v9;
  char v94 = v9;
  uint64_t v88 = v5;
  if ((a4 & 1) != 0)
  {
    uint64_t v10 = *a1;
    uint64_t v95 = v10;
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v93 = _swiftEmptyArrayStorage;
      sub_10022C2E4(&v96);
      sub_10028ECEC();
      specialized ContiguousArray.reserveCapacity(_:)(v11);
      uint64_t v12 = sub_100250EEC(v10);
      uint64_t v14 = v13;
      char v16 = v15 & 1;
      do
      {
        if (v12 < 0 || v12 >= 1LL << *(_BYTE *)(v10 + 32))
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }

        if (*(_DWORD *)(v10 + 36) != (_DWORD)v14) {
          goto LABEL_51;
        }
        uint64_t v17 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v12);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        id v20 = objc_allocWithZone((Class)sub_10028ED94());
        sub_1001B9234();
        id v21 = sub_10027B008(v18, v19, 0LL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v22 = v93[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v21);
        specialized ContiguousArray._endMutation()(v23);
        uint64_t v24 = sub_100250B3C(v12, v14, v16 & 1, v10);
        uint64_t v12 = v24;
        uint64_t v14 = v25;
        char v16 = v26 & 1;
        --v11;
      }

      while (v11);
      sub_1001D8CA0(v24, v25, v26 & 1);
      unint64_t v27 = v93;
      sub_10028EAD0();
      uint64_t v6 = a3;
      uint64_t v7 = a2;
      uint64_t v8 = a1;
    }

    else
    {
      sub_1001E927C();
      unint64_t v27 = _swiftEmptyArrayStorage;
    }

    sub_10028FEC4((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v85);
    uint64_t v9 = v94;
  }

  else
  {
    sub_1001E927C();
  }

  uint64_t v35 = v8[2];
  if (!*(void *)(v35 + 16))
  {
LABEL_47:
    uint64_t v79 = (void **)sub_1001B204C((void *)(v5 + 32), *(void *)(v5 + 56));
    sub_1001B3CD4(v9, *v79);
    uint64_t v81 = v80;
    sub_1001AA9C8();
    uint64_t v82 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t inited = swift_initStackObject(v82, v92);
    *(_OWORD *)(inited + sub_1001C954C(v0 + 16) = xmmword_10037B290;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v6;
    sub_1002523A8();
    uint64_t v84 = sub_10024C038(inited);
    sub_100289518(v81, v84);
    sub_1001B2428();
    sub_1001B0F5C();
    sub_10028EB80();
    return;
  }

  uint64_t v36 = sub_1001E927C();
  uint64_t v37 = sub_1001B3208(v36);
  NSString v38 = (void *)sub_100285020(v37);
  sub_1001AA9C8();
  sub_1001B0F5C();
  uint64_t v39 = v35 + 56;
  uint64_t v40 = 1LL << *(_BYTE *)(v35 + 32);
  uint64_t v41 = -1LL;
  if (v40 < 64) {
    uint64_t v41 = ~(-1LL << v40);
  }
  uint64_t v42 = v41 & *(void *)(v35 + 56);
  int64_t v91 = (unint64_t)(v40 + 63) >> 6;
  sub_1001B922C();
  int64_t v43 = 0LL;
  while (v42)
  {
    sub_1001E9268();
    unint64_t v45 = v44 | (v43 << 6);
LABEL_33:
    uint64_t v49 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v45);
    uint64_t v50 = *v49;
    uint64_t v51 = v49[1];
    uint64_t v52 = (objc_class *)sub_10028ED94();
    id v53 = objc_allocWithZone(v52);
    sub_10022CE68(v51);
    id v54 = sub_10027B008(v50, v51, 0LL);
    if (v54)
    {
      id v58 = v54;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
      uint64_t v93 = v38;
      sub_10028EC9C();
      char v89 = v60;
      sub_10028EC44();
      Swift::Int v64 = v62 + v63;
      if (__OFADD__(v62, v63)) {
        goto LABEL_53;
      }
      unint64_t v65 = v61;
      sub_1001AFF14(&qword_10044BF58);
      Swift::Bool v66 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v64);
      uint64_t v39 = v35 + 56;
      if (v66)
      {
        unint64_t v67 = sub_10028ED0C();
        if ((v89 & 1) != (v68 & 1)) {
          goto LABEL_55;
        }
        unint64_t v65 = v67;
      }

      NSString v38 = v93;
      if ((v89 & 1) != 0)
      {
        uint64_t v69 = v93[7];

        *(void *)(v69 + 8 * v65) = v58;
      }

      else
      {
        sub_10028EAE0((uint64_t)&v93[v65 >> 6]);
        uint64_t v74 = (uint64_t *)(v93[6] + 16 * v65);
        *uint64_t v74 = v50;
        v74[1] = v51;
        *(void *)(v38[7] + 8 * v65) = v58;
        uint64_t v75 = v38[2];
        BOOL v76 = __OFADD__(v75, 1LL);
        uint64_t v77 = v75 + 1;
        if (v76) {
          goto LABEL_54;
        }
        _OWORD v38[2] = v77;
        sub_1001F859C();
      }

void sub_100289518(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    sub_10028EA80();
    uint64_t v6 = sub_10028EAD8();
    sub_1001B0EC0();
  }

  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v6 < 1) {
    goto LABEL_36;
  }
  id v7 = [objc_allocWithZone((Class)CSDMessagingLinkSyncUpdateMessage) init];
  uint64_t v141 = (uint64_t)v2;
  uint64_t v142 = a2;
  if (v5)
  {
    if (a1 < 0) {
      uint64_t v2 = (void *)a1;
    }
    else {
      uint64_t v2 = (void *)(a1 & 0xFFFFFFFFFFFFFF8LL);
    }
    sub_10028EA80();
    uint64_t v9 = sub_1001F8698();
    uint64_t v8 = v9;
    if (!v9) {
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = sub_10028EA80();
    if (!v8) {
      goto LABEL_19;
    }
  }

  uint64_t v10 = sub_1001B4C00(v9, (unint64_t *)&unk_10044BF48, off_1003D5DD0);
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v2 = (void *)v10;
  for (uint64_t i = 0LL; i != v8; ++i)
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    }
    else {
      id v12 = sub_10028EC34(a1 + 8 * i);
    }
    id v13 = v12;
    sub_100289B84();
    char v15 = v14;
    if (v7)
    {
      id v16 = v7;
      [v16 addLink:v15];
    }
  }

void sub_100289B84()
{
  uint64_t v3 = v0;
  unint64_t v5 = v4;
  uint64_t v6 = sub_1001B1234();
  uint64_t v103 = *(void (***)(char *, int64_t))(v6 - 8);
  int64_t v104 = v6;
  sub_1001C7334();
  __chkstk_darwin(v7);
  uint64_t v102 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001AFF14(&qword_100447EA0);
  sub_1001C7334();
  __chkstk_darwin(v9);
  sub_1001D9030();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  char v15 = (char *)&v100 - v14;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v105 = *(void *)(v16 - 8);
  sub_1001C7334();
  __chkstk_darwin(v17);
  sub_1001D9030();
  uint64_t v101 = v18 - v19;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v100 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v100 - v24;
  id v26 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)) init];
  if (!v26)
  {
LABEL_53:
    __break(1u);
    return;
  }

  id v27 = v26;
  id v28 = sub_1001B115C((uint64_t)v27, "pseudonym");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  sub_10028EFCC();
  sub_10028E2F4(v1, v2, v27, (SEL *)&selRef_setPseudonym_);
  id v30 = sub_1001B115C(v29, "publicKey");
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
  sub_10028EFCC();
  uint64_t v106 = v27;
  sub_10028E288(v1, v2, v27);
  sub_10028E404(v5, (SEL *)&selRef_privateKey);
  if (v32 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    uint64_t v34 = v31;
    unint64_t v35 = v32;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(v34, v35);
  }

  sub_10028EA98(v106, "setPrivateKey:");

  id v37 = sub_1001B115C(v36, "creationDate");
  uint64_t v38 = v105;
  if (v37)
  {
    sub_10028EF28();

    Class isa = *(Class *)(v38 + 32);
    sub_10028ECF4((uint64_t)v15, (uint64_t)v23);
    sub_10028EB34((uint64_t)v15, 0LL);
    if (sub_1001AB0AC((uint64_t)v15, 1LL, v16) != 1)
    {
      uint64_t v39 = sub_10028ECF4((uint64_t)v25, (uint64_t)v15);
      Date.timeIntervalSince1970.getter(v39);
      objc_msgSend(v106, "setCreationDateEpochTime:");
      uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v25, v16);
      goto LABEL_10;
    }
  }

  else
  {
    sub_10028EB34((uint64_t)v15, 1LL);
  }

  sub_1001C6CE4((uint64_t)v15, &qword_100447EA0);
LABEL_10:
  if (!sub_1001B115C(v40, "expirationDate"))
  {
    sub_10028EB34(v12, 1LL);
    uint64_t v44 = v103;
    int64_t v43 = v104;
    uint64_t v45 = v102;
    goto LABEL_14;
  }

  sub_10028EF28();

  sub_10028ECF4(v12, (uint64_t)v23);
  sub_10028EB34(v12, 0LL);
  int v41 = sub_1001AB0AC(v12, 1LL, v16);
  uint64_t v42 = v38;
  uint64_t v44 = v103;
  int64_t v43 = v104;
  uint64_t v45 = v102;
  if (v41 == 1)
  {
LABEL_14:
    sub_1001C6CE4(v12, &qword_100447EA0);
    goto LABEL_15;
  }

  uint64_t v46 = v101;
  uint64_t v47 = sub_10028ECF4(v101, v12);
  Date.timeIntervalSince1970.getter(v47);
  objc_msgSend(v106, "setPseudonymExpirationDateEpochTime:");
  uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v46, v16);
LABEL_15:
  id v49 = sub_1001B115C(v48, "groupUUID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

  UUID.uuidString.getter(v50);
  id v52 = v51;
  v44[1](v45, v43);
  uint64_t v53 = sub_1001D907C();
  uint64_t v54 = v106;
  sub_10028E2F4(v53, v55, v106, v56);
  id v57 =  objc_msgSend(  sub_1001B115C( (uint64_t)objc_msgSend(v54, "setIsActivated:", objc_msgSend(v5, "isActivated")),  "originator"),  "identifier");
  sub_1001D9294();
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  uint64_t v60 = v59;

  id v62 = sub_1001B115C(v61, "originator");
  id v63 = [v62 revision];

  id v64 = objc_allocWithZone((Class)sub_10028ED94());
  id v65 = sub_10027B008(v58, v60, (uint64_t)v63);
  id v66 =  [(id)objc_opt_self(CSDMessagingConversationLinkGeneratorDescriptor) generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:v65];
  sub_1001D9294();
  [v54 setGeneratorDescriptor:v64];

  id v68 = sub_1001B115C(v67, "originator");
  id v69 = [v68 handle];
  sub_1001D9294();
  uint64_t v70 = (void *)objc_opt_self(&OBJC_CLASS___CSDMessagingHandle);
  id v71 = [v70 handleWithTUHandle:v64];
  sub_1001D8FCC();
  sub_10028EA98(v54, "setOriginatorHandle:");

  sub_10028E348(v5);
  if (v72)
  {
    uint64_t v73 = v72;
    uint64_t v102 = v5;
    if ((v72 & 0xC000000000000001LL) != 0)
    {
      if (v72 >= 0) {
        v72 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v74 = __CocoaSet.makeIterator()(v72);
      sub_1001B4C00(v74, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      sub_10028EF20();
      uint64_t v75 = sub_1001D907C();
      uint64_t v72 = (uint64_t)Set.Iterator.init(_cocoa:)(v78, v75, v76, v77);
      uint64_t v73 = v108[1];
      uint64_t v105 = v108[2];
      uint64_t v79 = v108[3];
      int64_t v80 = v108[4];
      unint64_t v81 = v108[5];
    }

    else
    {
      int64_t v80 = 0LL;
      uint64_t v82 = -1LL << *(_BYTE *)(v72 + 32);
      uint64_t v83 = *(void *)(v72 + 56);
      uint64_t v105 = v72 + 56;
      uint64_t v79 = ~v82;
      uint64_t v84 = -v82;
      if (v84 < 64) {
        uint64_t v85 = ~(-1LL << v84);
      }
      else {
        uint64_t v85 = -1LL;
      }
      unint64_t v81 = v85 & v83;
    }

    uint64_t v101 = v79;
    int64_t v104 = (unint64_t)(v79 + 64) >> 6;
    uint64_t v103 = (void (**)(char *, int64_t))((char *)&type metadata for Swift.AnyObject + 8);
    if (v73 < 0) {
      goto LABEL_27;
    }
    while (1)
    {
      if (v81)
      {
        uint64_t v86 = (v81 - 1) & v81;
        unint64_t v87 = __clz(__rbit64(v81)) | (v80 << 6);
        int64_t v88 = v80;
      }

      else
      {
        int64_t v93 = v80 + 1;
        if (__OFADD__(v80, 1LL))
        {
          __break(1u);
          goto LABEL_53;
        }

        if (v93 >= v104) {
          goto LABEL_47;
        }
        unint64_t v94 = *(void *)(v105 + 8 * v93);
        int64_t v88 = v80 + 1;
        if (!v94)
        {
          int64_t v88 = v80 + 2;
          if (v80 + 2 >= v104) {
            goto LABEL_47;
          }
          unint64_t v94 = *(void *)(v105 + 8 * v88);
          if (!v94)
          {
            int64_t v88 = v80 + 3;
            if (v80 + 3 >= v104) {
              goto LABEL_47;
            }
            unint64_t v94 = *(void *)(v105 + 8 * v88);
            if (!v94)
            {
              int64_t v88 = v80 + 4;
              if (v80 + 4 >= v104) {
                goto LABEL_47;
              }
              unint64_t v94 = *(void *)(v105 + 8 * v88);
              if (!v94)
              {
                int64_t v95 = v80 + 5;
                while (v95 < v104)
                {
                  unint64_t v94 = *(void *)(v105 + 8 * v95++);
                  if (v94)
                  {
                    int64_t v88 = v95 - 1;
                    goto LABEL_43;
                  }
                }

#error "10028A654: call analysis failed (funcsize=193)"
void sub_10028A6B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  Class isa;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSSet v64;
  Class v65;
  Class v66;
  id v67;
  NSString v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(uint64_t);
  void v72[2];
  uint64_t v73;
  id v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  sub_1001B0F10();
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v86 = *(void *)(v1 - 8);
  sub_1001C7334();
  __chkstk_darwin(v2);
  sub_1001D9030();
  unint64_t v5 = v3 - v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v72 - v7;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001C7334();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1001B1234();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1001D9030();
  uint64_t v16 = v14 - v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v72 - v19;
  sub_10028EF74(v18, (SEL *)&selRef_pseudonym);
  if (!v22) {
    goto LABEL_13;
  }
  uint64_t v23 = v22;
  uint64_t v85 = v21;
  sub_10028E404(v0, (SEL *)&selRef_publicKey);
  if (v25 >> 60 == 15)
  {
LABEL_12:
    sub_1001B1200();
LABEL_13:
    sub_1001B0FF8();
    return;
  }

  unint64_t v81 = v13;
  uint64_t v83 = v24;
  uint64_t v84 = v25;
  uint64_t v78 = v1;
  id v26 = sub_1001DCF70(v24, "originatorHandle");
  if (!v26)
  {
    __break(1u);
    goto LABEL_29;
  }

  id v27 = v26;
  id v28 = [v26 tuHandle];

  uint64_t v82 = v28;
  if (!v28)
  {
LABEL_11:
    sub_10028EE5C();
    goto LABEL_12;
  }

  int64_t v80 = v5;
  id v30 = sub_1001DCF70(v29, "generatorDescriptor");
  if (!v30)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v31 = v30;
  unint64_t v32 = (char *)[v30 csdConversationLinkGeneratorDescriptor];

  uint64_t v79 = v32;
  if (!v32)
  {
    sub_10028EE90();
    goto LABEL_11;
  }

  uint64_t v34 = v8;
  sub_10028EF74(v33, (SEL *)&selRef_groupUUIDString);
  if (v36)
  {
    UUID.init(uuidString:)(v35, v36);
    sub_1001B0EC0();
    if (sub_1001AB0AC((uint64_t)v11, 1LL, v12) == 1)
    {
      sub_10028EE90();
      sub_10028EE5C();

      sub_1001B1200();
      sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_10044A400);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v20, v11, v12);
      sub_10028E404(v0, (SEL *)&selRef_privateKey);
      uint64_t v73 = v37;
      uint64_t v77 = v38;
      Date.init(timeIntervalSince1970:)([v0 creationDateEpochTime]);
      Date.init(timeIntervalSince1970:)([v0 pseudonymExpirationDateEpochTime]);
      uint64_t v39 = [v0 isActivated];
      uint64_t v76 = v39;
      uint64_t v40 = sub_1001DCF70((uint64_t)v39, "invitedHandles");
      if (v40
        && (int v41 = v40,
            unint64_t v87 = 0LL,
            uint64_t v42 = sub_1001B4C00((uint64_t)v40, &qword_10044B100, off_1003D5DF0),
            static Array._conditionallyBridgeFromObjectiveC(_:result:)(v41, &v87, v42),
            v41,
            v87))
      {
        int64_t v43 = sub_100284CE4(v87);
        sub_1001B0EC0();
        sub_10024E990((uint64_t)v43);
        uint64_t v44 = v40;
      }

      else
      {
        uint64_t v44 = 0LL;
      }

      sub_10028EF74((uint64_t)v40, (SEL *)&selRef_linkName);
      v72[1] = v45;
      uint64_t v75 = v46;
      uint64_t v47 = *(void *)&v79[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
      uint64_t v48 = *(void *)&v79[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
      id v49 = *(void *)&v79[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
      uint64_t v50 = objc_allocWithZone(&OBJC_CLASS___TUConversationLinkOriginator);
      sub_10028EA80();
      uint64_t v74 = v82;
      uint64_t v51 = sub_10028D474(v47, v48, v49, v74);
      (*(void (**)(uint64_t, char *, uint64_t))(v81 + 16))(v16, v20, v12);
      id v52 = objc_allocWithZone(&OBJC_CLASS___TUMutableConversationLinkDescriptor);
      uint64_t v53 = v51;
      uint64_t v55 = v83;
      uint64_t v54 = v84;
      sub_1001E07F4(v83, v84);
      uint64_t v82 = v53;
      uint64_t v56 = (uint64_t)sub_10028D3A4(v16, v53, v85, v23, v55, v54);
      id v57 = (void *)v56;
      uint64_t v58 = v77;
      if (v77 >> 60 == 15)
      {
        Class isa = 0LL;
        uint64_t v60 = v78;
        uint64_t v61 = v73;
      }

      else
      {
        uint64_t v61 = v73;
        sub_1001BB31C(v73, v77);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v56 = sub_1001BB464(v61, v58);
        uint64_t v60 = v78;
      }

      sub_10028EABC(v56, "setPrivateKey:");

      id v63 = v80;
      if (v44)
      {
        sub_1001B4C00(v62, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
        sub_10028EF20();
        sub_1001D907C();
        v64.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
        id v62 = sub_1001B0EB8();
      }

      else
      {
        v64.super.Class isa = 0LL;
      }

      sub_10028EABC(v62, "setInvitedHandles:");

      id v65 = Date._bridgeToObjectiveC()().super.isa;
      sub_10028EABC((uint64_t)v65, "setCreationDate:");

      id v66 = Date._bridgeToObjectiveC()().super.isa;
      sub_10028EABC((uint64_t)v66, "setExpirationDate:");

      uint64_t v67 = [v57 setActivated:v76];
      if (v75)
      {
        id v68 = String._bridgeToObjectiveC()();
        uint64_t v67 = (id)sub_1001B0EC0();
      }

      else
      {
        id v68 = 0LL;
      }

      sub_10028EABC((uint64_t)v67, "setName:");

      sub_1001BB464(v61, v77);
      sub_10028EE5C();

      sub_10028EE90();
      id v69 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v69(v63, v60);
      v69((uint64_t)v34, v60);
      uint64_t v70 = sub_10028EE64();
      v71(v70);
    }

    goto LABEL_13;
  }

void sub_10028AC34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return;
  }
  uint64_t v4 = *(void **)(v2 + 88);
  uint64_t v193 = swift_bridgeObjectRetain(a1);
  unint64_t v5 = (void **)(v193 + 40);
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = &selRef_initWithConversationLink_otherInvitedHandles_sendLetMeInRequest_;
  uint64_t v208 = v4;
  do
  {
    NSString v8 = *(v5 - 1);
    uint64_t v9 = *v5;
    sub_1001FBB5C();
    NSString v10 = sub_10028ECAC();
    unsigned int v11 = objc_msgSend(v4, v7[83], v10);

    if (v11)
    {
      sub_1001FBB5C();
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_10028EB40();
        uint64_t v6 = v25;
      }

      unint64_t v12 = v6[2];
      uint64_t v13 = (os_log_s *)(v12 + 1);
      if (v12 >= v6[3] >> 1)
      {
        sub_10028EB40();
        uint64_t v6 = v26;
      }

      void v6[2] = v13;
      uint64_t v14 = &v6[2 * v12];
      void v14[4] = v8;
      void v14[5] = v9;
      NSString v8 = sub_10028ECAC();
      sub_1001B2428();
      sub_10028EA98(v4, "noteItem:");
    }

    else
    {
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v15 = sub_1001B0E98();
      uint64_t v13 = (os_log_s *)sub_1001B0D98(v15, (uint64_t)qword_1004541B0);
      uint64_t v16 = sub_1001FBB5C();
      Logger.logObject.getter(v16, v17, v18);
      os_log_type_t v19 = sub_1001B105C();
      if (sub_10022CD18(v19))
      {
        uint64_t v20 = v6;
        uint64_t v21 = v7;
        uint64_t v22 = sub_1001B0E78(12LL);
        uint64_t v23 = sub_1001B0E78(32LL);
        uint64_t v212 = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        sub_1001FBB5C();
        *(void *)(v22 + 4) = sub_1001D7CF0((uint64_t)v8, (unint64_t)v9, &v212);
        sub_10028EAF0((uint64_t)v9);
        sub_1001B0FD8( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "ConversationLinkSync: Excluding pseudonym from recover message as it is at rate limit {pseudonym: %s}",  (uint8_t *)v22);
        swift_arrayDestroy(v23, 1LL);
        sub_1001B0E60(v23);
        uint64_t v24 = v22;
        uint64_t v7 = v21;
        uint64_t v6 = v20;
        uint64_t v4 = v208;
        sub_1001B0E60(v24);
      }

      else
      {

        sub_10022CCA4((uint64_t)v9);
      }
    }

    v5 += 2;
    --v3;
  }

  while (v3);
  sub_1001B92A4();
  if (!v6[2])
  {
    sub_1001E43E0();
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v38 = sub_1001B0E98();
    sub_10022CF28(v38, (uint64_t)qword_1004541B0);
    uint64_t v39 = sub_10022CE68(v193);
    Logger.logObject.getter(v39, v40, v41);
    os_log_type_t v42 = sub_1001B11C8();
    if (sub_1001E0A10(v42))
    {
      int64_t v43 = (_DWORD *)sub_1001B0E78(12LL);
      uint64_t v44 = sub_1001B0E78(32LL);
      uint64_t v212 = v44;
      *int64_t v43 = 136315138;
      uint64_t v45 = sub_10024DAEC();
      uint64_t v46 = Array.description.getter(v45, &type metadata for String);
      sub_1001B92A4();
      sub_1001B1278(v46, v47, &v212);
      sub_10028EF58();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v49, v43 + 1, v43 + 3);
      sub_10022CCA4(v193);
      sub_1001B0EC0();
      sub_10028EA50( (void *)&_mh_execute_header,  v50,  v51,  "ConversationLinkSync: No pseudonyms remain after rate limiting, not sending message {pseudonyms: %s}");
      sub_1001B0F64(v44);
      sub_1001B0E60(v44);
      sub_1001B0E60((uint64_t)v43);

      return;
    }

    uint64_t v156 = v193;
LABEL_44:
    sub_10022CCA4(v156);
    return;
  }

  id v27 = [objc_allocWithZone((Class)CSDMessagingLinkSyncRecoverMessage) init];
  id v28 = v27;
  if (v27)
  {
    sub_1001B4C00((uint64_t)v27, &qword_10044BF40, &OBJC_CLASS___NSMutableArray_ptr);
    id v29 = v28;
    uint64_t v30 = sub_1001C7478();
    uint64_t v9 = sub_1001E5D18(v30);
    sub_1001E43E0();
    uint64_t v13 = (os_log_s *)sub_100285994();
    [v29 setPseudonyms:v13];
  }

  id v31 = [objc_allocWithZone((Class)CSDMessagingLinkSyncMessage) init];
  unint64_t v32 = v31;
  uint64_t v33 = a2;
  if (v31)
  {
    [v31 setType:3];
    [v32 setRecoverMessage:v28];
    sub_10028E3AC(v32);
    uint64_t v35 = v34;
    unint64_t v37 = v36;
  }

  else
  {
    [0 setRecoverMessage:v28];
    uint64_t v35 = 0LL;
    unint64_t v37 = 0xF000000000000000LL;
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v52 = sub_1001B0E98();
  sub_10022CF28(v52, (uint64_t)qword_1004541B0);
  id v53 = v28;
  sub_10022CE68(a2);
  id v54 = v53;
  sub_10028EF40((uint64_t)v54, v55, v56);
  os_log_type_t v57 = sub_1001B105C();
  uint64_t v194 = v32;
  unint64_t v209 = v37;
  uint64_t v210 = v53;
  if (sub_10028ECCC(v57))
  {
    uint64_t v58 = sub_1001B0E78(22LL);
    uint64_t v59 = (void *)sub_1001B0E78(8LL);
    uint64_t v172 = sub_1001B0E78(32LL);
    uint64_t v212 = v172;
    *(_DWORD *)uint64_t v58 = 136315394;
    uint64_t v60 = sub_1001B922C();
    uint64_t v61 = Set.description.getter(v60, &type metadata for String, &protocol witness table for String);
    sub_1001B0F28();
    uint64_t v211 = sub_1001D92C8(v61, v62, &v212);
    sub_10028EAB4((uint64_t)&v211, (uint64_t)&v212, v63, v58 + 12);
    sub_10022CCA4(a2);
    sub_1001B92A4();
    *(_WORD *)(v58 + 12) = 2112;
    if (v28 && (id v65 = [v210 pseudonyms]) != 0)
    {
      id v66 = v65;
      sub_10028EF58();
      sub_10028EAB4(v67, v68, v69, v70);
    }

    else
    {
      uint64_t v211 = 0LL;
      sub_10028EAB4((uint64_t)&v211, (uint64_t)&v212, v64, v58 + 22);
      id v66 = 0LL;
    }

    *uint64_t v59 = v66;

    sub_1001D9094( (void *)&_mh_execute_header,  v13,  (os_log_type_t)v9,  "ConversationLinkSync: Sending recover {to: %s, pseudonyms: %@}",  (uint8_t *)v58);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v59);
    sub_1001B0E60((uint64_t)v59);
    sub_1001B0F64(v172);
    sub_1001B0E60(v172);
    sub_1001B0E60(v58);

    uint64_t v33 = a2;
  }

  else
  {

    sub_10022CCA4(a2);
  }

  if (v37 >> 60 == 15)
  {
    __break(1u);
    return;
  }

  id v71 = *(os_log_s **)(v186 + 72);
  sub_1001BB31C(v35, v37);
  sub_1001E43E0();
  id v72 = sub_10028EF0C(v35, v37, v33);
  if (!v9)
  {
    uint64_t v103 = (uint64_t)v72;
    unint64_t v104 = v73;
    sub_1001BB464(v35, v37);
    sub_10022CE68(v33);
    sub_1001EE280();
    sub_10028EBF8();
    os_log_type_t v105 = sub_1001B105C();
    BOOL v106 = sub_1001B1134(v105);
    if (v106)
    {
      uint64_t v114 = sub_1001B0E78(22LL);
      uint64_t v115 = sub_1001B0E78(64LL);
      uint64_t v212 = v115;
      *(_DWORD *)uint64_t v114 = 136315394;
      uint64_t v116 = sub_1001B922C();
      uint64_t v117 = v33;
      uint64_t v118 = Set.description.getter(v116, &type metadata for String, &protocol witness table for String);
      sub_1001B1200();
      uint64_t v211 = sub_1001D92C8(v118, v119, &v212);
      sub_10028EA88(v211, v120, v121, v114 + 12, v122, v123, v124, v125, v165, v172, v179, v186, (uint64_t)v194, a2, v35);
      sub_10022CCA4(v117);
      sub_1001B92A4();
      *(_WORD *)(v114 + 12) = 2080;
      sub_1001EE280();
      uint64_t v211 = sub_1001D7CF0(v103, v104, &v212);
      sub_10028EA88(v211, v126, v127, v114 + 22, v128, v129, v130, v131, v168, v175, v182, v189, v197, v204, v207);
      sub_10028EAF0(v104);
      sub_1001D9094( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v6,  "ConversationLinkSync: Sent recover {to: %s, idsIdentifier: %s}",  (uint8_t *)v114);
      sub_1001D9350(v115);
      sub_1001B0E60(v115);
      sub_1001B0E60(v114);

      goto LABEL_40;
    }

    sub_10024DA60(v106, v107, v108, v109, v110, v111, v112, v113, v165, v172, v179, v186, v194);
    sub_1001D9028(v157, v158, v159, v160, v161, v162, v163, v164, v171, v178, v185, v192, v200, a2, v35, v37, v210);
    sub_10028EFB8();

    sub_10022CCA4(v104);
    uint64_t v156 = v33;
    goto LABEL_44;
  }

  sub_1001BB464(v35, v37);
  sub_1001B922C();
  sub_1002111A0();
  sub_1001B922C();
  sub_1002111A0();
  sub_10028EBF8();
  os_log_type_t v74 = sub_1001E0A4C();
  BOOL v75 = sub_1001B1134(v74);
  if (v75)
  {
    uint64_t v83 = sub_1001B0E78(22LL);
    uint64_t v84 = (void *)sub_1001B0E78(8LL);
    uint64_t v85 = sub_1001B0E78(32LL);
    uint64_t v212 = v85;
    *(_DWORD *)uint64_t v83 = 136315394;
    uint64_t v86 = sub_1001B922C();
    uint64_t v87 = v33;
    uint64_t v88 = Set.description.getter(v86, &type metadata for String, &protocol witness table for String);
    sub_1001B1200();
    uint64_t v211 = sub_1001D92C8(v88, v89, &v212);
    sub_10028EA88(v211, v90, v91, v83 + 12, v92, v93, v94, v95, v165, v172, v179, v186, (uint64_t)v194, a2, v35);
    sub_10022CCA4(v87);
    sub_1001B92A4();
    *(_WORD *)(v83 + 12) = 2112;
    sub_1002111A0();
    uint64_t v96 = sub_10028EE34();
    uint64_t v211 = v96;
    sub_10028EA88(v96, v97, v98, v83 + 22, v99, v100, v101, v102, v166, v173, v180, v187, v195, v202, v205);
    *uint64_t v84 = v96;
    sub_1001F8524();
    sub_1001F8524();
    sub_1001D9094( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v6,  "ConversationLinkSync: Failed sending recover! {to: %s, error: %@}",  (uint8_t *)v83);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v84);
    sub_1001B0E60((uint64_t)v84);
    sub_1001B0F64(v85);
    sub_1001B0E60(v85);
    sub_1001B0E60(v83);

    sub_1001F8524();
LABEL_40:
    uint64_t v132 = sub_1001BB464(v206, v209);
    sub_1001D9028(v132, v133, v134, v135, v136, v137, v138, v139, v167, v174, v181, v188, v196, v203, v206, v209, v210);
    sub_10024DA60(v140, v141, v142, v143, v144, v145, v146, v147, v169, v176, v183, v190, v198);
    return;
  }

  sub_10024DA60(v75, v76, v77, v78, v79, v80, v81, v82, v165, v172, v179, v186, v194);
  sub_1001D9028(v148, v149, v150, v151, v152, v153, v154, v155, v170, v177, v184, v191, v199, a2, v35, v37, v210);
  sub_10028EFB8();
  sub_1001F8524();
  sub_10022CCA4(v33);
  sub_1001F8524();
  sub_1001F8524();
}

void sub_10028B5C4(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = v3;
  id v9 = [a1 pseudonyms];
  if (!v9) {
    goto LABEL_9;
  }
  NSString v10 = v9;
  uint64_t v124 = 0LL;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v9, &v124, &type metadata for String);

  uint64_t v11 = v124;
  if (!v124) {
    goto LABEL_9;
  }
  if (!*(void *)(v124 + 16))
  {
    sub_1001B1200();
LABEL_9:
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v36 = sub_1001B0E98();
    unint64_t v37 = (os_log_s *)sub_1001B0D98(v36, (uint64_t)qword_1004541B0);
    sub_10022CE68(a3);
    uint64_t v122 = a1;
    Logger.logObject.getter(v122, v38, v39);
    os_log_type_t v40 = sub_1001B105C();
    if (sub_1001E0994(v40))
    {
      uint64_t v41 = sub_1001B0E78(22LL);
      os_log_type_t v42 = (void *)sub_1001B0E78(8LL);
      uint64_t v120 = sub_1001B0E78(32LL);
      uint64_t v124 = v120;
      *(_DWORD *)uint64_t v41 = 138412546;
      uint64_t v127 = v122;
      int64_t v43 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v41 + 4, v41 + 12);
      *os_log_type_t v42 = v122;

      *(_WORD *)(v41 + 12) = 2080;
      sub_1002523A8();
      uint64_t v127 = (void *)sub_1001D7CF0(a2, a3, &v124);
      sub_1001B112C((uint64_t)&v127, (uint64_t)&v128, v44, v41 + 22);
      sub_10028EAF0(a3);
      sub_1001D9094( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v4,  "ConversationLinkSync: No pseudonyms found in recover -- dropping {recover: %@, from: %s}",  (uint8_t *)v41);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v42);
      sub_1001B0E60((uint64_t)v42);
      sub_1001B0F64(v120);
      sub_1001B0E60(v120);
      sub_1001B0E60(v41);
    }

    else
    {

      sub_10022CCA4(a3);
    }

    return;
  }

  uint64_t v118 = a2;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v12 = sub_1001B0E98();
  sub_10022CF28(v12, (uint64_t)qword_1004541B0);
  sub_10022CE68(v11);
  uint64_t v13 = sub_10022CE68(a3);
  Logger.logObject.getter(v13, v14, v15);
  os_log_type_t v16 = sub_10028EFB0();
  id v121 = (id)v11;
  if (sub_1001D91E4(v16))
  {
    uint64_t v17 = v5;
    uint64_t v18 = sub_1001B0E78(22LL);
    uint64_t v19 = sub_1001B0E78(64LL);
    uint64_t v124 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v20 = sub_1001F859C();
    uint64_t v21 = Array.description.getter(v20, &type metadata for String);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v121);
    uint64_t v127 = (void *)sub_10028ED3C(v21, v24, &v124);
    sub_10028ECDC((uint64_t)v127, v25, v26, v18 + 12);
    sub_10022CCA4((uint64_t)v121);
    uint64_t v27 = v23;
    uint64_t v11 = (uint64_t)v121;
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v18 + 12) = 2080;
    sub_1002523A8();
    uint64_t v127 = (void *)sub_1001D7CF0(a2, a3, &v124);
    sub_10028ECDC((uint64_t)v127, v28, v29, v18 + 22);
    sub_10028EAF0(a3);
    sub_10028ED54();
    sub_1001D9094(v30, v31, v32, v33, v34);
    sub_1001D9350(v19);
    sub_1001B0E60(v19);
    uint64_t v35 = v18;
    unint64_t v5 = v17;
    sub_1001B0E60(v35);
  }

  else
  {

    sub_10022CCA4(a3);
    sub_10022CCA4(v11);
  }

  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v127 = _swiftEmptyArrayStorage;
  uint64_t v46 = *(void *)(v11 + 16);
  unint64_t v47 = (unint64_t)"ts";
  uint64_t v119 = v5;
  if (v46)
  {
    unint64_t v117 = a3;
    uint64_t v48 = (void *)v5[12];
    sub_1001F859C();
    uint64_t v49 = (uint64_t *)(v11 + 40);
    do
    {
      uint64_t v51 = *(v49 - 1);
      uint64_t v50 = *v49;
      sub_1001FBB5C();
      NSString v52 = sub_10028ECAC();
      unsigned int v53 = [v48 underLimitForItem:v52];

      if (v53)
      {
        id v54 = v127;
        sub_1001FBB5C();
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_10028EB40();
          id v54 = v68;
        }

        unint64_t v47 = v54[2];
        if (v47 >= v54[3] >> 1)
        {
          sub_10028EB40();
          id v54 = v69;
        }

        v54[2] = v47 + 1;
        uint64_t v55 = &v54[2 * v47];
        v55[4] = v51;
        v55[5] = v50;
        uint64_t v127 = v54;
        NSString v56 = sub_10028ECAC();
        sub_1001B2428();
        [v48 noteItem:v56];
      }

      else
      {
        sub_1001B2428();
        uint64_t v57 = sub_10022CE68(v11);
        uint64_t v60 = (os_log_s *)Logger.logObject.getter(v57, v58, v59);
        os_log_type_t v61 = static os_log_type_t.default.getter(v60);
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = sub_1001B0E78(12LL);
          uint64_t v63 = sub_1001B0E78(32LL);
          uint64_t v124 = v63;
          *(_DWORD *)uint64_t v62 = 136315138;
          uint64_t v64 = sub_1001F859C();
          uint64_t v65 = Array.description.getter(v64, &type metadata for String);
          unint64_t v47 = v66;
          swift_bridgeObjectRelease(v121);
          uint64_t v67 = v65;
          uint64_t v11 = (uint64_t)v121;
          *(void *)(v62 + 4) = sub_1001D7CF0(v67, v47, &v124);
          sub_10022CCA4((uint64_t)v121);
          sub_1001B0EB8();
          sub_1001B0FD8( (void *)&_mh_execute_header,  v60,  v61,  "ConversationLinkSync: Excluding pseudonym from recover response as it is at rate limit {pseudonym: %s}",  (uint8_t *)v62);
          swift_arrayDestroy(v63, 1LL);
          sub_1001B0E60(v63);
          sub_1001B0E60(v62);
        }

        else
        {

          sub_10022CCA4(v11);
        }
      }

      v49 += 2;
      --v46;
    }

    while (v46);
    sub_1001B1200();
    uint64_t v45 = v127;
    a3 = v117;
    unint64_t v5 = v119;
  }

  if (v45[2])
  {
    uint64_t v70 = v11;
    unint64_t v71 = a3;
    swift_bridgeObjectRelease(v70);
    unint64_t v47 = *sub_1001B204C(v5 + 4, v5[7]);
    uint64_t v72 = sub_1001B9234();
    uint64_t v73 = (uint64_t)sub_1001B3DC8(v72, (void *)v47);
    sub_1001B0F5C();
    if ((unint64_t)v73 >> 62)
    {
      if (v73 < 0) {
        unint64_t v47 = v73;
      }
      else {
        unint64_t v47 = v73 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_1002523A8();
      uint64_t v74 = sub_10028EAD8();
      sub_1001D9020();
    }

    else
    {
      uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v74 >= 1)
    {
      uint64_t v75 = sub_10022CE68(v73);
      Logger.logObject.getter(v75, v76, v77);
      os_log_type_t v78 = sub_1001B105C();
      if (sub_1001B1134(v78))
      {
        uint64_t v79 = sub_1001B0E78(22LL);
        uint64_t v80 = sub_1001B0E78(64LL);
        uint64_t v126 = v80;
        *(_DWORD *)uint64_t v79 = 136315394;
        uint64_t v81 = sub_1001B4C00(v80, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
        uint64_t v82 = sub_1002523A8();
        uint64_t v83 = Array.description.getter(v82, v81);
        sub_1001D9020();
        uint64_t v124 = sub_10028EFEC(v83, v84, &v126);
        sub_1001B112C((uint64_t)&v124, (uint64_t)&v125, v85, v79 + 12);
        sub_10022CCA4(v73);
        sub_1001B0F5C();
        *(_WORD *)(v79 + 12) = 2080;
        sub_1001B0E6C((uint64_t)&v127, (uint64_t)&v124);
        uint64_t v86 = sub_1001FBB5C();
        uint64_t v87 = Array.description.getter(v86, &type metadata for String);
        sub_1001B2428();
        sub_1001D92C8(v87, v88, &v126);
        sub_10028EEB0();
        sub_1001B112C(v89, v90, v91, v92);
        sub_1001B92A4();
        sub_1001D9094( (void *)&_mh_execute_header,  (os_log_s *)a1,  (os_log_type_t)v5,  "ConversationLinkSync: Found link descriptors for pseudonyms specified in recover -- sending update {linkDescri ptors: %s, pseudonyms: %s}",  (uint8_t *)v79);
        sub_1001D9350(v80);
        sub_1001B0E60(v80);
        sub_1001B0E60(v79);
      }

      else
      {

        sub_10022CCA4(v73);
      }

      uint64_t v114 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
      uint64_t inited = swift_initStackObject(v114, v123);
      *(_OWORD *)(inited + sub_1001C954C(v0 + 16) = xmmword_10037B290;
      *(void *)(inited + 32) = v118;
      *(void *)(inited + 40) = v71;
      swift_bridgeObjectRetain(v71);
      uint64_t v116 = sub_10024C038(inited);
      sub_100289518(v73, v116);
      sub_1001B0EB8();
      sub_1001D9020();
      goto LABEL_42;
    }

    uint64_t v105 = sub_1001D9020();
    Logger.logObject.getter(v105, v106, v107);
    os_log_type_t v108 = sub_1001B11C8();
    if (!sub_1001E0A10(v108))
    {
LABEL_39:

LABEL_42:
      swift_bridgeObjectRelease(v127);
      return;
    }

    uint64_t v97 = (_DWORD *)sub_1001B0E78(12LL);
    uint64_t v98 = sub_1001B0E78(32LL);
    uint64_t v126 = v98;
    *uint64_t v97 = 136315138;
    sub_1001B0E6C((uint64_t)&v127, (uint64_t)&v124);
    uint64_t v109 = sub_1001C7478();
    uint64_t v110 = Array.description.getter(v109, &type metadata for String);
    sub_1001E43E0();
    sub_1001D92C8(v110, v111, &v126);
    sub_10028EEB0();
    sub_10028EEE4(v112, v113, (uint64_t)(v97 + 1));
    sub_1001B92A4();
    unint64_t v104 = "ConversationLinkSync: Did not find link descriptors for pseudonyms -- nothing to send in response {pseudonyms: %s}";
LABEL_38:
    sub_10028EA50((void *)&_mh_execute_header, v102, v103, v104);
    sub_1001B0F64(v98);
    sub_1001B0E60(v98);
    sub_1001B0E60((uint64_t)v97);
    goto LABEL_39;
  }

  uint64_t v93 = sub_1001F859C();
  Logger.logObject.getter(v93, v94, v95);
  os_log_type_t v96 = sub_1001B11C8();
  if (sub_1001E0A10(v96))
  {
    uint64_t v97 = (_DWORD *)sub_1001B0E78(12LL);
    uint64_t v98 = sub_1001B0E78(32LL);
    uint64_t v124 = v98;
    *uint64_t v97 = 136315138;
    uint64_t v99 = sub_1001F859C();
    uint64_t v100 = Array.description.getter(v99, &type metadata for String);
    sub_1001B1200();
    uint64_t v126 = sub_1001D92C8(v100, v101, &v124);
    sub_1001B0F8C((uint64_t)&v126, (uint64_t)&v127);
    sub_10022CCA4(v11);
    sub_1001B92A4();
    unint64_t v104 = "ConversationLinkSync: No pseudonyms remain after rate limiting, not sending recover response {pseudonyms: %s}";
    goto LABEL_38;
  }

  sub_1001B0F5C();

  sub_10022CCA4(v11);
}

void sub_10028BF50()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = sub_1001C7370((uint64_t)&unk_1003E5998, 24LL);
  sub_10028ED74(v3);
  uint64_t v8 = v1;
  uint64_t v4 = sub_10022CC44((uint64_t)sub_10028C174, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v6, v7);
  swift_release(v8);
  uint64_t v5 = os_state_add_handler(v2, v4);
  _Block_release(v4);
  *(void *)(v0 + 128) = v5;
  sub_10028EE0C();
}

uint64_t sub_10028BFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v3);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v5 = Strong;
  if (*(_DWORD *)(a1 + 16) != 3)
  {
    swift_release(Strong);
    return 0LL;
  }

  uint64_t v6 = sub_10028C774(1);
  uint64_t v8 = sub_100285650(0xD000000000000020LL, 0x8000000100376760LL);
  swift_release(v5);
  swift_bridgeObjectRelease(v6);
  return v8;
}

uint64_t sub_10028C174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = v4(a2);
  swift_release(v3);
  return v5;
}

void sub_10028C1BC(char a1)
{
  uint64_t v80 = 0LL;
  v106[4] = 0LL;
  v106[5] = 0xE000000000000000LL;
  uint64_t v75 = sub_10028C774(a1) + 64;
  sub_10028ECB4();
  unint64_t v3 = v2 & v1;
  uint64_t v79 = v106;
  uint64_t v90 = &v99;
  uint64_t v91 = v103;
  int64_t v76 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v77 = v5;
  uint64_t v74 = v76 - 1;
  os_log_type_t v78 = (char *)&type metadata for Any + 8;
  if (!v3) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v81 = (v3 - 1) & v3;
  unint64_t v6 = __clz(__rbit64(v3)) | (v80 << 6);
LABEL_3:
  uint64_t v7 = *(void *)(v77 + 56);
  uint64_t v8 = (void *)(*(void *)(v77 + 48) + 16 * v6);
  uint64_t v9 = v8[1];
  *(void *)&__int128 v102 = *v8;
  *((void *)&v102 + 1) = v9;
  sub_1001B03FC(v7 + 32 * v6, (uint64_t)v91);
  sub_1001E927C();
  while (1)
  {
    sub_10028E61C((uint64_t)&v102, (uint64_t)&v104, (uint64_t *)&unk_100448E60);
    uint64_t v13 = v105;
    if (!v105)
    {
      swift_release(v77);
      return;
    }

    uint64_t v14 = v104;
    sub_1001B03EC(v79, v101);
    *(void *)&__int128 v102 = v14;
    *((void *)&v102 + 1) = v13;
    v15._countAndFlagsBits = 2618LL;
    v15._object = (void *)0xE200000000000000LL;
    String.append(_:)(v15);
    sub_10028ED44();
    uint64_t v16 = sub_1001E43E0();
    sub_10028EC50( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v74,  v75,  v76,  v77,  (uint64_t)v78,  (uint64_t)v79,  v80,  v81,  v83,  v84,  v85,  v86,  v88,  v89,  (uint64_t)v90,  (uint64_t)v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  *((uint64_t *)&v98 + 1),  v99,  *((uint64_t *)&v99 + 1),  v100,  *((uint64_t *)&v100 + 1),  v101[0]);
    uint64_t v24 = sub_1001AFF14(&qword_10044BF20);
    uint64_t v25 = sub_1001DCFEC((uint64_t)&v98, (uint64_t)&v102, (uint64_t)v78, v24);
    if (!(_DWORD)v25) {
      break;
    }
    uint64_t v33 = v98;
    uint64_t v34 = *(void *)(v98 + 16);
    if (v34)
    {
      uint64_t v35 = 0LL;
      do
      {
        ++v35;
        *(void *)&__int128 v102 = 2105376LL;
        *((void *)&v102 + 1) = 0xE300000000000000LL;
        uint64_t v36 = sub_1001E927C();
        uint64_t v37 = Array.description.getter(v36, (char *)&type metadata for Any + 8);
        uint64_t v39 = v38;
        sub_1001AA9C8();
        v40._countAndFlagsBits = v37;
        v40._object = v39;
        String.append(_:)(v40);
        sub_1001B1200();
        sub_10028EB4C();
        sub_10028ED44();
        sub_1001E43E0();
      }

      while (v34 != v35);
    }

    uint64_t v41 = v33;
LABEL_59:
    swift_bridgeObjectRelease(v41);
    sub_1001B0438(v101);
    unint64_t v3 = v82;
    if (v82) {
      goto LABEL_2;
    }
LABEL_4:
    int64_t v10 = v80 + 1;
    if (__OFADD__(v80, 1LL)) {
      goto LABEL_65;
    }
    if (v10 < v76)
    {
      unint64_t v11 = *(void *)(v75 + 8 * v10);
      if (v11) {
        goto LABEL_7;
      }
      uint64_t v12 = v80 + 2;
      ++v80;
      if (v10 + 1 < v76)
      {
        unint64_t v11 = *(void *)(v75 + 8 * v12);
        if (v11) {
          goto LABEL_10;
        }
        uint64_t v80 = v10 + 1;
        if (v10 + 2 < v76)
        {
          unint64_t v11 = *(void *)(v75 + 8 * (v10 + 2));
          if (v11)
          {
            v10 += 2LL;
            goto LABEL_7;
          }

          uint64_t v12 = v10 + 3;
          uint64_t v80 = v10 + 2;
          if (v10 + 3 < v76)
          {
            unint64_t v11 = *(void *)(v75 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t v10 = v12 + 1;
                if (__OFADD__(v12, 1LL)) {
                  goto LABEL_66;
                }
                if (v10 >= v76)
                {
                  uint64_t v80 = v74;
                  goto LABEL_21;
                }

                unint64_t v11 = *(void *)(v75 + 8 * v10);
                ++v12;
                if (v11) {
                  goto LABEL_7;
                }
              }
            }

uint64_t sub_10028C774(char a1)
{
  uint64_t v103 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v93 = v1;
  uint64_t v94 = (void *)(v1 + 32);
  sub_10028EC5C((void *)(v1 + 32));
  uint64_t v3 = v2;
  if (v2 >> 62)
  {
LABEL_21:
    sub_1001B9234();
    uint64_t v4 = sub_10028EAD8();
    sub_1001B0F5C();
    if (v4) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4)
    {
LABEL_3:
      unint64_t v98 = v3 & 0xC000000000000001LL;
      uint64_t v5 = &_swiftEmptyDictionarySingleton;
      uint64_t v6 = 4LL;
      uint64_t v96 = v3;
      uint64_t v95 = v4;
      do
      {
        if (v98) {
          uint64_t v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
        }
        else {
          uint64_t v7 = (char *)*(id *)(v3 + 8 * v6);
        }
        if (__OFADD__(v6 - 4, 1LL))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }

        uint64_t v100 = v6 - 3;
        uint64_t v8 = *(void *)&v7[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier];
        uint64_t v9 = *(void *)&v7[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_identifier + 8];
        int64_t v10 = v7;
        uint64_t v11 = *(void *)&v7[OBJC_IVAR___CSDConversationLinkGeneratorDescriptor_version];
        sub_10024DAEC();
        uint64_t v3 = sub_10028EF6C();
        v105[0] = v5;
        sub_10028EE3C();
        sub_10028EC44();
        Swift::Int v16 = v14 + v15;
        if (__OFADD__(v14, v15)) {
          goto LABEL_19;
        }
        unint64_t v17 = v12;
        char v18 = v13;
        sub_1001AFF14(&qword_10044BEF8);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3, v16))
        {
          unint64_t v19 = sub_10028EE3C();
          if ((v18 & 1) != (v20 & 1))
          {
LABEL_62:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }

          unint64_t v17 = v19;
        }

        uint64_t v5 = v105[0];
        if ((v18 & 1) != 0)
        {
          *(void *)(*((void *)v105[0] + 7) + 8 * v17) = v11;
        }

        else
        {
          sub_10028EAE0((uint64_t)v105[0] + 8 * (v17 >> 6));
          uint64_t v21 = (void *)(*((void *)v105[0] + 6) + 16 * v17);
          *uint64_t v21 = v8;
          v21[1] = v9;
          *(void *)(v5[7] + 8 * v17) = v11;
          uint64_t v22 = v5[2];
          BOOL v23 = __OFADD__(v22, 1LL);
          uint64_t v24 = v22 + 1;
          if (v23) {
            goto LABEL_20;
          }
          void v5[2] = v24;
          sub_10024DAEC();
        }

        sub_1001B92A4();
        sub_10028EBCC();
        ++v6;
        uint64_t v3 = v96;
      }

      while (v100 != v95);
    }
  }

  sub_1001B0F5C();
  uint64_t v25 = (char **)sub_1001AFF14(&qword_10044BF00);
  sub_10028EB18((uint64_t)"currentRevisions");
  sub_1002A2B48();
  v105[1] = v26;
  sub_10028EAA0(0xD000000000000018LL, (uint64_t)"localGeneratorIdentifier");
  sub_1002A2F08();
  uint64_t v106 = &type metadata for Int;
  v105[0] = v27;
  sub_10028EAA0(0xD00000000000001BLL, (uint64_t)"localLatestGeneratedVersion");
  uint64_t v28 = (void **)sub_1001B204C(v94, *(void *)(v93 + 56));
  sub_10028EF88(v28);
  uint64_t v106 = v25;
  v105[0] = v29;
  sub_10028EAA0(0xD00000000000001ELL, (uint64_t)"generatorDescriptorVersionSums");
  sub_1001BA03C((uint64_t)v94, (uint64_t)v105);
  uint64_t v30 = sub_1001AFF14(&qword_10044BF08);
  if ((sub_1001DCFEC( (uint64_t)&v102,  (uint64_t)v105,  v30,  (uint64_t)&type metadata for ConversationLinkDataSourceTUWrapper) & 1) != 0)
  {
    unint64_t v31 = (unint64_t)v102;
    v105[0] = 0LL;
    id v32 = [v102 conversationLinkDescriptorsWithPredicate:0 limit:0 offset:0 error:v105];
    id v33 = v105[0];
    if (v32)
    {
      uint64_t v34 = v32;
      uint64_t v35 = sub_1001B4C00((uint64_t)v32, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);
      id v37 = v33;

      if (v36 >> 62) {
        goto LABEL_54;
      }
      uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      while (v38)
      {
        unint64_t v88 = v31;
        uint64_t v89 = v25;
        if (v38 < 1) {
          __break(1u);
        }
        uint64_t v39 = 0LL;
        unint64_t v97 = v36 & 0xC000000000000001LL;
        Swift::String v40 = (char **)_swiftEmptyArrayStorage;
        uint64_t v41 = &_swiftEmptyDictionarySingleton;
        uint64_t v25 = &selRef_isPrimary;
        unint64_t v92 = v36;
        uint64_t v91 = v38;
        while (1)
        {
          if (v97) {
            uint64_t v42 = sub_10028EE7C();
          }
          else {
            uint64_t v42 = (uint64_t)sub_10028EC34(v36 + 8 * v39);
          }
          uint64_t v43 = (void *)v42;
          uint64_t v44 = sub_1001AFF14((uint64_t *)&unk_100447BA0);
          uint64_t inited = swift_initStackObject(v44, v104);
          *(_OWORD *)(inited + sub_1001C954C(v0 + 16) = xmmword_10037B6E0;
          *(void *)(inited + 32) = 0x796E6F6475657370LL;
          *(void *)(inited + 40) = 0xE90000000000006DLL;
          id v46 = sub_1001F8700(inited, "pseudonym");
          uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          uint64_t v49 = v48;

          *(void *)(inited + 48) = v47;
          *(void *)(inited + 56) = v49;
          *(void *)(inited + 72) = &type metadata for String;
          *(void *)(inited + 80) = 0xD000000000000012LL;
          *(void *)(inited + 88) = 0x80000001003766B0LL;
          id v51 = sub_1001F8700(v50, v25[448]);
          id v52 = [v51 revision];

          *(void *)(inited + 96) = v52;
          *(void *)(inited + 120) = &type metadata for Int;
          *(void *)(inited + 128) = 0xD000000000000014LL;
          *(void *)(inited + 136) = 0x80000001003766D0LL;
          uint64_t v101 = v43;
          id v54 = sub_1001F8700(v53, v25[448]);
          id v55 = [v54 identifier];

          uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
          uint64_t v58 = v57;

          *(void *)(inited + 168) = &type metadata for String;
          *(void *)(inited + 144) = v56;
          *(void *)(inited + 152) = v58;
          uint64_t v59 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
          if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
          {
            sub_10028EEEC();
            Swift::String v40 = v82;
          }

          unint64_t v60 = (unint64_t)v40[2];
          if (v60 >= (unint64_t)v40[3] >> 1)
          {
            sub_10028EEEC();
            Swift::String v40 = v83;
          }

          v40[2] = (char *)(v60 + 1);
          v40[v60 + 4] = (char *)v59;
          id v61 = sub_10028EE1C();
          id v62 = [v61 identifier];

          uint64_t v63 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          uint64_t v99 = v39;
          if (!v41[2]) {
            goto LABEL_38;
          }
          unint64_t v64 = sub_10028EE28((uint64_t)v63);
          if ((v65 & 1) != 0) {
            unint64_t v31 = *(void *)(v41[7] + 8 * v64);
          }
          else {
LABEL_38:
          }
            unint64_t v31 = 0LL;
          sub_1001B0EB8();
          id v66 = [sub_10028EE1C() identifier];
          sub_1001D9294();
          unint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          uint64_t v68 = v67;

          Swift::String v69 = (char *)(v31 + 1);
          if (__OFADD__(v31, 1LL)) {
            break;
          }
          uint64_t v25 = v40;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
          v105[0] = v41;
          sub_10028EE28(v36);
          sub_10028EC44();
          Swift::Int v75 = v73 + v74;
          if (__OFADD__(v73, v74)) {
            goto LABEL_52;
          }
          unint64_t v31 = v71;
          char v76 = v72;
          sub_1001AFF14(&qword_10044BEF8);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v75))
          {
            unint64_t v77 = sub_1001D7094(v36, v68);
            if ((v76 & 1) != (v78 & 1)) {
              goto LABEL_62;
            }
            unint64_t v31 = v77;
          }

          uint64_t v41 = v105[0];
          if ((v76 & 1) != 0)
          {
            *(void *)(*((void *)v105[0] + 7) + 8 * v31) = v69;
          }

          else
          {
            sub_10028EAE0((uint64_t)v105[0] + 8 * (v31 >> 6));
            uint64_t v79 = (unint64_t *)(v41[6] + 16 * v31);
            *uint64_t v79 = v36;
            v79[1] = v68;
            *(void *)(v41[7] + 8 * v31) = v69;
            uint64_t v80 = v41[2];
            BOOL v23 = __OFADD__(v80, 1LL);
            uint64_t v81 = v80 + 1;
            if (v23) {
              goto LABEL_53;
            }
            v41[2] = v81;
            sub_1001EE280();
          }

          uint64_t v39 = v99 + 1;

          sub_1001B0EB8();
          sub_10028EBCC();
          unint64_t v36 = v92;
          uint64_t v25 = &selRef_isPrimary;
          if (v91 == v99 + 1)
          {
            swift_unknownObjectRelease(v88);
            sub_1001B2428();
            uint64_t v25 = v89;
            goto LABEL_57;
          }
        }

        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        sub_1001FBB5C();
        uint64_t v38 = sub_10028EAD8();
        sub_1001B2428();
      }

      swift_unknownObjectRelease(v31);
      sub_1001B2428();
    }

    else
    {
      id v84 = v105[0];
      _convertNSErrorToError(_:)(v33);
      sub_1001D8FCC();
      swift_willThrow(v85);
      swift_unknownObjectRelease(v31);
      swift_errorRelease(v33);
    }
  }

  Swift::String v40 = (char **)_swiftEmptyArrayStorage;
  uint64_t v41 = &_swiftEmptyDictionarySingleton;
LABEL_57:
  if ((a1 & 1) != 0)
  {
    uint64_t v106 = (void *)sub_1001AFF14((uint64_t *)&unk_10044BF10);
    v105[0] = v40;
    sub_1001FC0F0((uint64_t)v105, 0x4C746E6572727563LL, 0xEF6F666E496B6E69LL);
  }

  else
  {
    sub_1001B1200();
  }

  uint64_t v106 = v25;
  v105[0] = v41;
  sub_10028EA80();
  sub_10028EB18((uint64_t)"countByGenerator");
  uint64_t v86 = v103;
  sub_1001B0EC0();
  return v86;
}

void sub_10028D014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v4 + 104);
  sub_1001B0E6C(v7 + 40, (uint64_t)v33);
  uint64_t v8 = sub_1001C9F1C(*(void *)(v7 + 40));
  sub_1001B7FF4(v8, v9);
  if (v8)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v10 = sub_1001B0E98();
    uint64_t v11 = (os_log_s *)sub_1001B0D98(v10, (uint64_t)qword_1004541B0);
    uint64_t v12 = sub_10022CE68(a2);
    Logger.logObject.getter(v12, v13, v14);
    os_log_type_t v15 = sub_1001B105C();
    if (sub_1001E0994(v15))
    {
      Swift::Int v16 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v17 = sub_1001B0E78(32LL);
      uint64_t v32 = v17;
      *(_DWORD *)Swift::Int v16 = 136315138;
      uint64_t v18 = sub_1001B9234();
      uint64_t v19 = Set.description.getter(v18, &type metadata for String, &protocol witness table for String);
      sub_1001B0F5C();
      uint64_t v21 = sub_1001D92C8(v19, v20, &v32);
      uint64_t v29 = sub_10028ECFC(v21, v22, v23, v24, v25, v26, v27, v28, (uint64_t)(v16 + 4), v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v31, v16 + 12);
      sub_10022CCA4(a2);
      sub_1001B92A4();
      sub_1001B0FD8( (void *)&_mh_execute_header,  v11,  v3,  "ConversationLinkSync: devices changed making sure we send a check in to them as well {deviceDestinations: %s}",  v16);
      sub_1001B0F64(v17);
      sub_1001B0E60(v17);
      sub_1001B0E60((uint64_t)v16);
    }

    else
    {

      sub_10022CCA4(a2);
    }

    sub_10022CD70();
    sub_1001B6D44(a2, 1, 2u, (uint64_t)sub_10028D21C, v4);
    swift_release(v4);
  }

  else
  {
    sub_10028864C((char)[*(id *)(a1 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) hasActiveAccounts]);
  }

  sub_1001E9024();
}

void sub_10028D1F4(uint64_t a1, uint64_t a2)
{
}

void sub_10028D21C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10028D224()
{
  v8._countAndFlagsBits = 0xD000000000000029LL;
  v8._object = (void *)0x8000000100376820LL;
  sub_10028EAF8(v8);
  uint64_t v0 = sub_1002523A8();
  v9._countAndFlagsBits = sub_10028EC28(v0);
  sub_10028EAF8(v9);
  sub_1001D9020();
  sub_1001B0F28();
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  v10._object = (void *)0x8000000100376850LL;
  sub_10028EAF8(v10);
  uint64_t v1 = sub_1002523A8();
  v11._countAndFlagsBits = sub_10028EC28(v1);
  sub_10028EAF8(v11);
  sub_1001D9020();
  sub_1001B0F28();
  sub_10028EBB4((uint64_t)"; localDescriptorsBehindRemote = ");
  uint64_t v2 = sub_10028ED94();
  uint64_t v3 = sub_1002523A8();
  v12._countAndFlagsBits = Array.description.getter(v3, v2);
  sub_10028EAF8(v12);
  sub_1001D9020();
  sub_1001E43E0();
  sub_10028EBB4((uint64_t)"; remoteDescriptorsBehindLocal = ");
  uint64_t v4 = sub_1002523A8();
  v13._countAndFlagsBits = Array.description.getter(v4, v2);
  sub_10028EAF8(v13);
  sub_1001D9020();
  sub_1001B0F28();
  v14._countAndFlagsBits = 0xD000000000000023LL;
  v14._object = (void *)0x80000001003768D0LL;
  sub_10028EAF8(v14);
  uint64_t v5 = sub_1001EE280();
  v15._countAndFlagsBits = sub_10028EC28(v5);
  sub_10028EAF8(v15);
  sub_1001B0EB8();
  sub_1001B2428();
  v6._countAndFlagsBits = 62LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0LL;
}

id sub_10028D3A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10028EE64();
  NSString v13 = String._bridgeToObjectiveC()();
  sub_1001B0F28();
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  id v15 = [v7 initWithGroupUUID:isa originator:a2 pseudonym:v13 publicKey:v14];

  sub_1001BB39C(a5, a6);
  uint64_t v16 = sub_1001B1234();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a1, v16);
  return v15;
}

id sub_10028D474(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  sub_1001B0F5C();
  id v8 = [v4 initWithIdentifier:v7 revision:a3 handle:a4];

  return v8;
}

unint64_t sub_10028D4E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1001AFF14(&qword_10044BF30);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10028E5C4(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10028D608(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    Swift::String v12 = (uint64_t *)(v4[6] + 16 * result);
    *Swift::String v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1001B03EC(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10028D608(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10028D66C(a1, a2, v5);
}

unint64_t sub_10028D66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    Swift::String v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_10028D7B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)(*(void *)(*v2 + 40), a1);
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v8 + 8 * v7) != a1);
  }

  sub_1002013CC();
  sub_1002018D4();
  if (!v11)
  {
    sub_100247748();
    uint64_t v10 = v23;
  }

  uint64_t v12 = *(void *)(*(void *)(v10 + 48) + 8 * v7);
  unint64_t v13 = sub_10028DCDC(v7);
  sub_10028ED84(v13, v14, v15, v16, v17, v18, v19, v20, v22, v23);
  return v12;
}

uint64_t sub_10028D89C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v32, *(void *)(*v2 + 40));
  sub_1001B9234();
  String.hash(into:)(v32, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_10028EED0();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    sub_1001B0F5C();
    return 0LL;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  int v11 = (uint64_t *)(v10 + 16 * v8);
  uint64_t v12 = v11[1];
  BOOL v13 = *v11 == a1 && v12 == a2;
  if (!v13 && (sub_10028ED64(*v11, v12) & 1) == 0)
  {
    uint64_t v25 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v25;
      sub_10028EED0();
      if ((v26 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v27 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v28 = v27[1];
      BOOL v29 = *v27 == a1 && v28 == a2;
    }

    while (!v29 && (sub_10028ED64(*v27, v28) & 1) == 0);
  }

  sub_1001B0F5C();
  sub_1002013CC();
  sub_1002018D4();
  if (!v15)
  {
    sub_10024789C();
    uint64_t v14 = v32[0];
  }

  uint64_t v16 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  unint64_t v17 = sub_10028DE50(v8);
  sub_10028ED84(v17, v18, v19, v20, v21, v22, v23, v24, v31, v32[0]);
  return v16;
}

uint64_t sub_10028D9D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  if ((*v1 & 0xC000000000000001LL) == 0)
  {
    Swift::Int v11 = *(void *)(v5 + 40);
    sub_1001FBB5C();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1LL << *(_BYTE *)(v5 + 32);
    unint64_t v14 = v12 & ~v13;
    sub_10024DA1C();
    if ((v16 & 1) != 0)
    {
      sub_1001B4C00(v15, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      id v17 = sub_10028EE50();
      char v18 = sub_10028EFA4((uint64_t)v17);

      if ((v18 & 1) != 0)
      {
LABEL_12:
        sub_1001B2428();
        sub_1002013CC();
        sub_1002018D4();
        if (!v24)
        {
          sub_100247D3C();
          uint64_t v23 = v26;
        }

        uint64_t v9 = *(void *)(*(void *)(v23 + 48) + 8 * v14);
        sub_10028E008(v14);
        uint64_t v10 = *v3;
        *uint64_t v3 = v26;
        goto LABEL_15;
      }

      uint64_t v19 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v19;
        sub_10024DA1C();
        if ((v20 & 1) == 0) {
          break;
        }
        id v21 = sub_10028EE50();
        char v22 = sub_10028EFA4((uint64_t)v21);

        if ((v22 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

#error "10028DB90: call analysis failed (funcsize=100)"
unint64_t sub_10028DCDC(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  uint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    id v7 = ~v5;
    sub_10022CD70();
    char v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        Swift::Int v11 = (void *)(v10 + 8 * v6);
        Swift::Int v12 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            char v16 = v2 != v6 || v15 >= v11 + 1;
            uint64_t v2 = v6;
            if (v16)
            {
              *uint64_t v15 = *v11;
              uint64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  id v17 = *(void *)(v3 + 16);
  char v18 = __OFSUB__(v17, 1LL);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + sub_1001C954C(v0 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_10028DE50(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            char v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              *char v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + sub_1001C954C(v0 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_10028E008(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_15:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            char v18 = (void *)(v16 + 8 * v6);
            BOOL v19 = v2 != v6 || v17 >= v18 + 1;
            int64_t v2 = v6;
            if (v19)
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + sub_1001C954C(v0 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_10028E19C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    unint64_t v8 = result;
    sub_10028ED9C(result, a2, a3, a4, a5, a6, a7, a8, v17, v19);
    unint64_t result = ((unint64_t)v20 * (unsigned __int128)v8) >> 64;
    if (v20 * v8 < v8)
    {
      unint64_t v16 = -(uint64_t)v8 % v8;
      if (v16 > v20 * v8)
      {
        do
          unint64_t result = sub_10028ED9C(result, v9, v10, v11, v12, v13, v14, v15, v18, v20);
        while (v16 > v20 * v8);
        return ((unint64_t)v20 * (unsigned __int128)v8) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10028E20C( double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000LL) != 0) {
    sub_10028E19C(0x20000000000001LL, a4, a5, a6, a7, a8, a9, a10);
  }
  else {
    __break(1u);
  }
}

void sub_10028E288(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001BB39C(a1, a2);
  [a3 setPublicKey:isa];
}

void sub_10028E2E8(void *a1)
{
}

void sub_10028E2F4(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  sub_1001B2428();
  objc_msgSend(a3, *a4, v6);
}

void sub_10028E348(void *a1)
{
  id v1 = [a1 invitedHandles];
  if (v1)
  {
    sub_1001B4C00((uint64_t)v1, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_10028EF20();
    uint64_t v2 = sub_1001D907C();
    static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);
    sub_1001D9294();
  }

  sub_1001AA978();
}

void sub_10028E3AC(void *a1)
{
  id v2 = [a1 data];

  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10022D2E8();
  }

  sub_1001D907C();
  sub_10010B978();
}

void sub_10028E404(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10022D2E8();
  }

  sub_1001D907C();
  sub_10010B978();
}

void sub_10028E44C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10022D2E8();
  }

  sub_1001D907C();
  sub_10010B978();
}

uint64_t sub_10028E494()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10028E4B8(uint64_t a1)
{
  return sub_10028BFE4(a1, v1);
}

uint64_t sub_10028E4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10028E4D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

char *sub_10028E4D8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v8[2] = __dst;
  void v8[3] = a4;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL)) {
    return (char *)_StringGuts._slowWithCString<A>(_:)(sub_10028E5AC, v8, a1, a2, (char *)&type metadata for () + 8);
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    *(void *)__src = a1;
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFFFLL;
    id v6 = __src;
  }

  else if ((a1 & 0x1000000000000000LL) != 0)
  {
    id v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    id v6 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
  }

  return sub_100258CC0(v6, __dst, a4);
}

char *sub_10028E5AC(char *a1)
{
  return sub_100258CC0(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10028E5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_10044BF38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10028E60C(_xpc_activity_s *a1)
{
}

uint64_t sub_10028E614()
{
  return sub_100288F28(v0);
}

void sub_10028E61C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1001D907C();
  v4(v3);
  sub_1001AA978();
}

uint64_t sub_10028E658(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_10028E668(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10028E678()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1 != 1) {
    swift_bridgeObjectRelease(v1);
  }
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_10028E6A8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10028E6D0()
{
  return sub_10028E728(32LL);
}

uint64_t sub_10028E6D8()
{
  return sub_100286534(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10028E6E0()
{
}

uint64_t sub_10028E6E8()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_10028E708()
{
}

void sub_10028E718()
{
}

uint64_t sub_10028E728(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

void sub_10028E75C()
{
}

unint64_t destroy for ConversationLinkSyncManager.CheckInType(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void _s13callservicesd27ConversationLinkSyncManagerC11CheckInTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((int)v4 - 1 < 0)
  {
    *(void *)a1 = v3;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    swift_bridgeObjectRetain(v3);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }

  sub_1001AA978();
}

uint64_t *assignWithCopy for ConversationLinkSyncManager.CheckInType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  LODWORD(v5) = -1;
  else {
    uint64_t v6 = *a1;
  }
  int v7 = v6 - 1;
  uint64_t v8 = *a2;
  int v9 = v5 - 1;
  if (v7 < 0)
  {
    if (v9 < 0)
    {
      *a1 = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v4);
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      return a1;
    }

    swift_bridgeObjectRelease(v4);
    goto LABEL_11;
  }

  if ((v9 & 0x80000000) == 0)
  {
LABEL_11:
    uint64_t v10 = *a2;
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    *a1 = v10;
    return a1;
  }

  *a1 = v8;
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithTake for ConversationLinkSyncManager.CheckInType(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void *)a1;
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (*a2 < 0xFFFFFFFF) {
      unint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *(void *)a1 = *a2;
      swift_bridgeObjectRelease(v4);
      goto LABEL_9;
    }

    swift_bridgeObjectRelease(v4);
  }

  *(void *)a1 = *a2;
LABEL_9:
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationLinkSyncManager.CheckInType(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 9)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ConversationLinkSyncManager.CheckInType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_10028E9B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10028E9DC(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    uint64_t v2 = a2 - 0x7FFFFFFF;
    *(_BYTE *)(result + 8) = 0;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = a2;
  }

  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationLinkSyncManager.CheckInType()
{
  return &type metadata for ConversationLinkSyncManager.CheckInType;
}

void sub_10028EA50(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10028EA64()
{
}

uint64_t sub_10028EA70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v11, v10, a4);
}

uint64_t sub_10028EA80()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10028EA88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v16, v15, a4);
}

id sub_10028EA98(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

void sub_10028EAA0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_10028EAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

id sub_10028EABC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void *sub_10028EAC8()
{
  return sub_10022C30C((void *)(v0 - 112));
}

void *sub_10028EAD0()
{
  return sub_10022C30C((void *)(v0 - 96));
}

uint64_t sub_10028EAD8()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_10028EAE0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t sub_10028EAF0(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

void sub_10028EAF8(Swift::String a1)
{
}

  ;
}

void sub_10028EB18(uint64_t a1@<X8>)
{
}

uint64_t sub_10028EB34(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

void sub_10028EB40()
{
}

void sub_10028EB4C()
{
  v0._countAndFlagsBits = 10LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_10028EB58()
{
  return sub_10028E658(v0);
}

  ;
}

  ;
}

void *sub_10028EB9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return sub_10022C30C(&a26);
}

void *sub_10028EBA4()
{
  return sub_10022C30C((void *)(v0 - 128));
}

void *sub_10028EBAC()
{
  return sub_10022C30C((void *)(v0 - 120));
}

void sub_10028EBB4(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v1);
}

uint64_t sub_10028EBCC()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_10028EBD4()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

unint64_t sub_10028EBEC()
{
  return sub_1001D7094(v0, v1);
}

uint64_t sub_10028EBF8()
{
  return Logger.logObject.getter();
}

  ;
}

id sub_10028EC1C()
{
  return [v0 *(SEL *)(v1 + 1648)];
}

uint64_t sub_10028EC28(uint64_t a1)
{
  return Set.description.getter(a1, v1, v2);
}

id sub_10028EC34@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_10028EC3C()
{
  return sub_10028E728(33LL);
}

  ;
}

uint64_t sub_10028EC50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  return sub_1001B03FC((uint64_t)&a37, v37 - 208);
}

void sub_10028EC5C(void *a1)
{
  uint64_t v2 = (void **)sub_1001B204C(a1, *(void *)(v1 + 56));
  sub_1001B2E7C(*v2);
}

uint64_t sub_10028EC74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a16 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a16, v17, v16, a4);
}

uint64_t sub_10028EC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v6, v8, v7);
}

unint64_t sub_10028EC9C()
{
  return sub_1001D7094(v0, v1);
}

NSString sub_10028ECAC()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

BOOL sub_10028ECCC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10028ECDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v5, v4, a4);
}

void *sub_10028ECEC()
{
  return sub_10022C2E4((void *)(v0 - 96));
}

uint64_t sub_10028ECF4(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

char *sub_10028ECFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

unint64_t sub_10028ED0C()
{
  return sub_1001D7094(v0, v1);
}

uint64_t sub_10028ED1C()
{
  return sub_10028E668(v0);
}

uint64_t sub_10028ED3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001D7CF0(a1, v3, a3);
}

void sub_10028ED44()
{
}

  ;
}

uint64_t sub_10028ED64(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10028ED74(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10028ED84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *v10;
  *uint64_t v10 = a10;
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_10028ED94()
{
  return type metadata accessor for GeneratorDescriptor();
}

uint64_t sub_10028ED9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0LL;
  return swift_stdlib_random(&a10, 8LL);
}

uint64_t sub_10028EDAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_1001D7CF0(v8, v9, (uint64_t *)va);
}

NSString sub_10028EDBC()
{
  return String._bridgeToObjectiveC()();
}

BOOL sub_10028EDCC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10028EDDC(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10028EDEC(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

  ;
}

  ;
}

id sub_10028EE1C()
{
  return [v1 *(SEL *)(v0 + 3584)];
}

unint64_t sub_10028EE28(uint64_t a1)
{
  return sub_1001D7094(a1, v1);
}

uint64_t sub_10028EE34()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

unint64_t sub_10028EE3C()
{
  return sub_1001D7094(v0, v1);
}

void sub_10028EE48(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

id sub_10028EE50()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

uint64_t sub_10028EE5C()
{
  return sub_1001BB464(*(void *)(v0 - 128), *(void *)(v0 - 120));
}

uint64_t sub_10028EE64()
{
  return v0;
}

uint64_t sub_10028EE70()
{
  return sub_1001BB464(v1, v0);
}

uint64_t sub_10028EE7C()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_10028EE88()
{
  return swift_retain(v0);
}

void sub_10028EE90()
{
}

void *sub_10028EE98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return sub_10022C2E4(&a26);
}

void *sub_10028EEA0()
{
  return sub_10022C2E4((void *)(v0 - 128));
}

void *sub_10028EEA8()
{
  return sub_10022C2E4((void *)(v0 - 120));
}

  ;
}

uint64_t sub_10028EEC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_10024AA5C(a1, a2, a3);
}

  ;
}

uint64_t sub_10028EEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

void sub_10028EEEC()
{
}

void *sub_10028EEF8()
{
  return sub_10022C2E4((void *)(v0 - 112));
}

uint64_t sub_10028EF00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v9, a3, a4);
}

id sub_10028EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001DEF68(a1, a2, a3);
}

void *sub_10028EF14()
{
  return sub_1001B204C((void *)(v0 + 32), *(void *)(v0 + 56));
}

unint64_t sub_10028EF20()
{
  return sub_1001E8F94();
}

uint64_t sub_10028EF28()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10028EF34()
{
  return swift_getObjCClassFromMetadata(v0);
}

uint64_t sub_10028EF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Logger.logObject.getter(a1, a2, a3);
}

uint64_t sub_10028EF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v5, a3, a4);
}

  ;
}

uint64_t sub_10028EF6C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_10028EF74(uint64_t a1, SEL *a2)
{
}

uint64_t sub_10028EF7C()
{
  return sub_1001BB464(v1, v0);
}

void sub_10028EF88(void **a1)
{
}

void sub_10028EF90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_10028EF98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v10, a3, a4);
}

uint64_t sub_10028EFA4(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_10028EFB0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10028EFB8()
{
  return sub_1001BB464(v0, v1);
}

uint64_t sub_10028EFC4()
{
  return sub_1001DED98();
}

void sub_10028EFCC()
{
}

void sub_10028EFD8(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10028EFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Logger.logObject.getter(a1, a2, a3);
}

uint64_t sub_10028EFEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001D7CF0(a1, v3, a3);
}

void sub_10028EFF4(uint64_t a1)
{
  uint64_t v2 = v28[0];
  uint64_t v18 = v28[1];
  int64_t v3 = v28[3];
  unint64_t v4 = v28[4];
  int64_t v29 = (unint64_t)(v28[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      unint64_t v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v7 = v6 | (v3 << 6);
      goto LABEL_20;
    }

    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      break;
    }
    if (v8 >= v29) {
      goto LABEL_27;
    }
    unint64_t v9 = *(void *)(v18 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v29) {
        goto LABEL_27;
      }
      unint64_t v9 = *(void *)(v18 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v29) {
          goto LABEL_27;
        }
        unint64_t v9 = *(void *)(v18 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v29) {
            goto LABEL_27;
          }
          unint64_t v9 = *(void *)(v18 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v29) {
              goto LABEL_27;
            }
            unint64_t v9 = *(void *)(v18 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v29)
              {
                unint64_t v9 = *(void *)(v18 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_19;
                }
              }

void *sub_10028F294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v21 = v2;
  uint64_t v16 = swift_bridgeObjectRetain(a1);
  uint64_t v5 = (uint64_t *)(v16 + 40);
  unint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = *v5;
    if (!a2)
    {
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      swift_bridgeObjectRetain(v7);
LABEL_12:
      sub_1001C6CE4((uint64_t)&v19, (uint64_t *)&unk_1004474B0);
LABEL_13:
      v18[0] = 0LL;
      goto LABEL_14;
    }

    v17[0] = *(v5 - 1);
    v17[1] = v7;
    swift_bridgeObjectRetain_n(v7, 2LL);
    AnyHashable.init<A>(_:)(v18, v17, &type metadata for String, &protocol witness table for String);
    if (*(void *)(a2 + 16) && (unint64_t v8 = sub_1001D70EC((uint64_t)v18), (v9 & 1) != 0))
    {
      sub_1001B03FC(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v19);
    }

    else
    {
      __int128 v19 = 0u;
      __int128 v20 = 0u;
    }

    sub_1001D8504((uint64_t)v18);
    if (!*((void *)&v20 + 1)) {
      goto LABEL_12;
    }
    uint64_t v10 = sub_1001AFF14(&qword_10044C048);
LABEL_14:
    swift_bridgeObjectRelease(v7);
    uint64_t v11 = v18[0];
    if (v18[0])
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_1002B06E4();
        unint64_t v6 = v13;
      }

      unint64_t v12 = v6[2];
      if (v12 >= v6[3] >> 1)
      {
        sub_1002B06E4();
        unint64_t v6 = v14;
      }

      void v6[2] = v12 + 1;
      v6[v12 + 4] = v11;
    }

    v5 += 2;
    --v4;
  }

  while (v4);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v16);
  return v6;
}

uint64_t sub_10028F48C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = sub_10026F2A8(v7, v8);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_10026F2A8(v14, v15) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10028F538(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 9LL; ; ++i)
  {
    uint64_t v5 = i - 7;
    if (__OFADD__(i - 8, 1LL)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }

  __break(1u);
  return result;
}

void *sub_10028F598(uint64_t a1)
{
  return sub_10028F5C0(a1, (unint64_t *)&qword_1004482E0, &OBJC_CLASS___IDSDevice_ptr);
}

void *sub_10028F5AC(uint64_t a1)
{
  return sub_10028F5C0(a1, &qword_10044C0E8, &OBJC_CLASS___LSApplicationProxy_ptr);
}

void *sub_10028F5C0(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v6);
  if (!v6) {
    return v15;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_1001B03FC(i, (uint64_t)v14);
    uint64_t v8 = sub_1001B4B94(0LL, a2, a3);
    id v9 = v13;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v10 = v15[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
    uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
    specialized ContiguousArray._endMutation()(v11);
    if (!--v6) {
      return v15;
    }
  }

  id v13 = 0LL;
  swift_release(v15);

  return 0LL;
}

void *sub_10028F6D0()
{
  uint64_t v17 = v0;
  uint64_t v18 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  BOOL v16 = _swiftEmptyArrayStorage;
  sub_100250050(0, v4, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    for (uint64_t i = v3 + 32; ; i += 32LL)
    {
      sub_1001B03FC(i, (uint64_t)v15);
      if (!swift_dynamicCast( &v13,  v15,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
        break;
      }
      uint64_t v7 = v13;
      uint64_t v8 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_100250050(0, v5[2] + 1LL, 1);
        uint64_t v5 = v16;
      }

      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_100250050(v9 > 1, v10 + 1, 1);
        uint64_t v5 = v16;
      }

      void v5[2] = v10 + 1;
      uint64_t v11 = &v5[2 * v10];
      v11[4] = v7;
      void v11[5] = v8;
      if (!--v4) {
        return v5;
      }
    }

    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    swift_release(v5);
    swift_bridgeObjectRelease(v14);
    return 0LL;
  }

  return v5;
}

void *sub_10028F808(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_100250050(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 40LL)
    {
      sub_1001D8A64(i, (uint64_t)v13);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_100250050(0, v3[2] + 1LL, 1);
        uint64_t v3 = v14;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_100250050(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v14;
      }

      v3[2] = v8 + 1;
      unint64_t v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0LL;
  }

  return v3;
}

uint64_t sub_10028F948(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v4 = 0LL;
  }
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

#error "10028FABC: call analysis failed (funcsize=317)"
void sub_10028FEC4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  sub_1002953CC();
  sub_100295340();
  if (v12)
  {
    sub_100295264();
    unint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_1002953A8();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    __int128 v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_10028FFD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v12)
  {
    sub_100295264();
    uint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_1002953A8();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    uint64_t v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_1002900E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v12)
  {
    sub_100295264();
    uint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_100294F00();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    uint64_t v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_1002901F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v12)
  {
    sub_100295264();
    uint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_100294F00();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    uint64_t v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_10029030C(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v7 < 0) {
      uint64_t v31 = *v1;
    }
    else {
      uint64_t v31 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001FBB5C();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
    goto LABEL_26;
  }

  unint64_t v10 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v10;
  uint64_t v12 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000LL) == 0
    && (v10 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_14;
    }
    uint64_t v12 = 1LL;
  }

  if (v10 >> 62)
  {
    sub_1001FBB5C();
    uint64_t v2 = sub_1002952D4();
    swift_bridgeObjectRelease(v10);
  }

  else
  {
    uint64_t v2 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v2 <= v9) {
    uint64_t v2 = v9;
  }
  sub_1001FBB5C();
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v2, 1LL, v10);
  swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = v14;
  uint64_t v13 = v14 & 0xFFFFFFFFFFFFFF8LL;
LABEL_14:
  uint64_t v15 = *(void *)(v13 + 16);
  uint64_t v16 = (*(void *)(v13 + 24) >> 1) - v15;
  sub_1001E8BFC((uint64_t)v48, v13 + 8 * v15 + 32, v16, a1);
  if (v17 < v6)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v17 < 1) {
    goto LABEL_18;
  }
  uint64_t v19 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v20 = __OFADD__(v19, v17);
  uint64_t v21 = v19 + v17;
  if (!v20)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v21;
LABEL_18:
    if (v17 != v16)
    {
      uint64_t v22 = v48[0];
LABEL_20:
      uint64_t v23 = sub_1001B4B8C(v22);
      specialized Array._endMutation()(v23, v24, v25, v26, v27, v28, v29, v30);
      return;
    }

void sub_1002906E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_1002B0498();
    uint64_t v3 = v6;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10024FD2C(a1 + 32, v2, v3 + 40 * v7 + 32);
  if (!v2)
  {
LABEL_11:
    sub_1001B0EB8();
    *uint64_t v1 = v3;
    return;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v10;
    goto LABEL_11;
  }

void sub_1002907BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v12)
  {
    sub_100295264();
    uint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_1002953A8();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    uint64_t v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_1002908CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v12)
  {
    sub_100295264();
    uint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_1002953A8();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    uint64_t v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_1002909DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v12)
  {
    sub_100295264();
    uint64_t v9 = sub_1001F8738();
    sub_1001B0EB8();
  }

  else
  {
    sub_100295388();
  }

  sub_10029537C();
  if (v13)
  {
    sub_10029523C();
    uint64_t v11 = sub_1002952D4();
    sub_1001B0F5C();
  }

  else
  {
    sub_1002952DC();
  }

  if (__OFADD__(v11, v9))
  {
    __break(1u);
    goto LABEL_21;
  }

  sub_1002952B4();
  sub_100295364();
  if (v14)
  {
    if ((v10 & 0x8000000000000000LL) == 0 && (v10 & 0x4000000000000000LL) == 0)
    {
      sub_1002952A4();
      if (v17 ^ v18 | v16) {
        goto LABEL_13;
      }
    }
  }

  if (v10 >> 62) {
    goto LABEL_22;
  }
  sub_1002952E8();
  while (1)
  {
    sub_1001B9234();
    sub_100295228();
    sub_1002952C0();
    sub_100295370();
LABEL_13:
    sub_100295278(v15);
    sub_1002953A8();
    if (v20 >= v9) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    sub_100295250();
    sub_1002952CC();
    sub_1001B0F5C();
  }

  if (v20 < 1) {
    goto LABEL_17;
  }
  sub_100295290();
  if (!v18)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
LABEL_17:
    uint64_t v23 = swift_bridgeObjectRelease(v19);
    sub_100295214(v23, v24, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  __break(1u);
}

void sub_100290AEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_1002B00EC();
    uint64_t v3 = v6;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10024F680(a1 + 32, v2, v3 + 16 * v7 + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v10;
    goto LABEL_11;
  }

void sub_100290BC4(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v22 = a1;
    }
    else {
      uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v23 = *v1;
    }
    else {
      uint64_t v23 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v8 <= v6) {
      uint64_t v8 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v8, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
LABEL_16:
    sub_100294DA8();
    if (v10 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v24 = v4;
    }
    else {
      uint64_t v24 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v4);
  }

  if (v10 < 1) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v12 = __OFADD__(v11, v10);
  uint64_t v13 = v11 + v10;
  if (!v12)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v13;
LABEL_20:
    uint64_t v14 = swift_bridgeObjectRelease(v9);
    specialized Array._endMutation()(v14, v15, v16, v17, v18, v19, v20, v21);
    return;
  }

  __break(1u);
}

uint64_t sub_100290D98()
{
  uint64_t v1 = OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___supportsConversationOneToOneModeEnabled;
  int v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___supportsConversationOneToOneModeEnabled);
  if (v2 == 2)
  {
    char v3 = sub_100290DE0(v0);
    *(_BYTE *)(v0 + sub_10028E44C(v0, v1) = v3 & 1;
  }

  else
  {
    char v3 = v2 & 1;
  }

  return v3 & 1;
}

uint64_t sub_100290DE0(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + OBJC_IVAR___CSDFaceTimeInviteDemuxer_featureFlags) conversationOneToOneModeEnabled];
  if ((_DWORD)result)
  {
    int v2 = (void *)objc_opt_self(&OBJC_CLASS___FTDeviceSupport);
    uint64_t result = (uint64_t)[v2 sharedInstance];
    if (result)
    {
      char v3 = (void *)result;
      unsigned int v4 = [(id)result multiwaySupported];

      if (v4)
      {
        id v5 = [v2 sharedInstance];
        if (v5)
        {
          uint64_t v6 = v5;
          unsigned int v7 = [v5 multiwayBlocked];

          return v7 ^ 1;
        }

        else
        {
          return 1LL;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100290EA4()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___pushTokenForSelf);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___pushTokenForSelf);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___pushTokenForSelf + 8);
  uint64_t v4 = v2;
  if (v3 == 1)
  {
    uint64_t v4 = (uint64_t)sub_100290F2C();
    uint64_t v5 = *v1;
    uint64_t v6 = v1[1];
    *uint64_t v1 = v4;
    v1[1] = v7;
    swift_bridgeObjectRetain(v7);
    sub_100295034(v5, v6);
  }

  sub_100295048(v2, v3);
  return v4;
}

id sub_100290F2C()
{
  id result = [(id)objc_opt_self(IDSPushHandler) sharedInstance];
  if (result)
  {
    uint64_t v1 = result;
    id v2 = [result pushToken];

    if (v2) {
      return (id)sub_100294B6C(v2, (SEL *)&selRef___imHexString);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100290FAC()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001B0F00();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  sub_1001B0F00();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v14 = v13 - v12;
  sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v15 = v1;
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v17 = v16;
  uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001C6AE8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v18, v19, v7, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000040LL,  0x8000000100376FD0LL,  v14,  v10,  v6,  0LL);
  if (TUSimulatedModeEnabled(v20))
  {
    id v21 = sub_100295460(objc_allocWithZone(&OBJC_CLASS___TUSimulatedIDSIDQueryController));
LABEL_4:

    id v23 = sub_100295460(objc_allocWithZone(&OBJC_CLASS___TUFeatureFlags));
    id v24 = objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag());
    id v25 = sub_100295460(v24);
    id v26 = sub_100295148(v20, (uint64_t)v21, (uint64_t)v23, (uint64_t)v25, objc_allocWithZone(ObjectType));
    uint64_t v27 = swift_getObjectType(v15);
    swift_deallocPartialClassInstance(v15, v27, 64LL, 7LL);
    return v26;
  }

  id result = [(id)objc_opt_self(IDSIDQueryController) sharedInstance];
  id v21 = result;
  if (result) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_10029125C(void *a1, int a2, uint64_t a3, uint64_t a4, char *a5, const void *a6)
{
  int v99 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v104 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v103 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v101 = *(void *)(v13 - 8);
  uint64_t v102 = v13;
  __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject(&unk_1003E5C60, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a6;
  uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v17 = swift_allocObject(v16, 48LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  _Block_copy(a6);
  NSString v18 = [a1 value];
  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v19 = v11;
    uint64_t v21 = v20;
    NSString v18 = String._bridgeToObjectiveC()();
    uint64_t v22 = v21;
    uint64_t v11 = v19;
    swift_bridgeObjectRelease(v22);
  }

  uint64_t v23 = sub_100294B6C(v18, (SEL *)&selRef_IDSFormattedDestinationID);
  if (v24)
  {
    *(void *)(v17 + 32) = v23;
    *(void *)(v17 + 40) = v24;
    char v25 = sub_100290D98();
    uint64_t v105 = v15;
    uint64_t v106 = a6;
    if ((v25 & 1) != 0
      && [*(id *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_serverBag] isModernGFTEnabled])
    {
      uint64_t v96 = v11;
      uint64_t v94 = a5;
      uint64_t v26 = sub_1001B4B94(0LL, (unint64_t *)&unk_10044AF50, &OBJC_CLASS___IDSURI_ptr);
      swift_bridgeObjectRetain(a4);
      id v27 = sub_100291AF0(a3, a4);
      if (qword_1004468F0 != -1) {
        swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v28 = qword_100454018;
      uint64_t v29 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v30 = swift_allocObject(v29, 112LL, 7LL);
      uint64_t v31 = (void *)v30;
      *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
      if (v27)
      {
        uint64_t v110 = (void *)v26;
        unint64_t v111 = sub_100294D34();
        *(void *)&__int128 aBlock = v27;
        sub_1001D700C(&aBlock, (uint64_t)(v31 + 4));
        id v32 = v27;
      }

      else
      {
        *(void *)(v30 + 56) = &type metadata for String;
        id v32 = 0LL;
        *(void *)(v30 + 64) = sub_1001B2330();
        v31[4] = 0LL;
        void v31[5] = 0xE000000000000000LL;
      }

      v31[12] = &type metadata for String;
      v31[13] = sub_1001B2330();
      v31[9] = a3;
      v31[10] = a4;
      swift_bridgeObjectRetain(a4);
      id v95 = v27;
      uint64_t v50 = static os_log_type_t.default.getter(v95);
      os_log(_:dso:log:type:_:)("set fromIDURI: %@, fromID: %@", 29LL, 2LL, &_mh_execute_header, v28, v50, v31);
      swift_bridgeObjectRelease(v31);
      uint64_t v51 = swift_allocObject(&unk_1003E5C88, 24LL, 7LL);
      *(void *)(v51 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
      uint64_t v97 = swift_allocObject(&unk_1003E5C88, 24LL, 7LL);
      *(void *)(v97 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
      uint64_t v93 = swift_allocObject(&unk_1003E5C88, 24LL, 7LL);
      *(void *)(v93 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
      uint64_t v52 = swift_allocObject(&unk_1003E5CB0, 24LL, 7LL);
      *(void *)(v52 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v53 = dispatch_group_create();
      dispatch_group_enter(v53);
      id v54 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(IDSServiceNameFaceTimeMulti);
      uint64_t v56 = v55;
      uint64_t v57 = (void *)swift_allocObject(&unk_1003E5CD8, 40LL, 7LL);
      uint64_t v98 = v51;
      void v57[2] = v51;
      v57[3] = v52;
      v57[4] = v53;
      swift_retain(v51);
      swift_retain(v52);
      uint64_t v58 = v53;
      uint64_t v59 = v32;
      unint64_t v60 = v32;
      id v61 = v94;
      sub_100291B60(v17, v54, v56, v60, (uint64_t)sub_100294C0C, (uint64_t)v57);
      swift_bridgeObjectRelease(v56);
      swift_release(v57);
      dispatch_group_enter(v58);
      id v62 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(IDSServiceNameQuickRelayFaceTime);
      uint64_t v64 = v63;
      char v65 = (void *)swift_allocObject(&unk_1003E5D00, 40LL, 7LL);
      uint64_t v66 = v97;
      v65[2] = v97;
      v65[3] = v52;
      v65[4] = v58;
      swift_retain(v52);
      uint64_t v67 = v58;
      swift_retain(v66);
      sub_100291B60(v17, v62, v64, v59, (uint64_t)sub_100294C38, (uint64_t)v65);
      swift_bridgeObjectRelease(v64);
      swift_release(v65);
      dispatch_group_enter(v67);
      uint64_t v68 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(IDSServiceNameFaceTime);
      uint64_t v70 = v69;
      unint64_t v71 = (void *)swift_allocObject(&unk_1003E5D28, 40LL, 7LL);
      uint64_t v72 = v93;
      void v71[2] = v93;
      v71[3] = v52;
      v71[4] = v67;
      swift_retain(v52);
      unint64_t v92 = v67;
      uint64_t v73 = v72;
      swift_retain(v72);
      sub_100291B60(v17, v68, v70, v59, (uint64_t)sub_100294C94, (uint64_t)v71);
      swift_bridgeObjectRelease(v70);
      swift_release(v71);
      swift_bridgeObjectRelease(v17);
      uint64_t v91 = *(void *)&v61[OBJC_IVAR___CSDFaceTimeInviteDemuxer_queue];
      uint64_t v74 = swift_allocObject(&unk_1003E5D50, 80LL, 7LL);
      uint64_t v76 = v97;
      uint64_t v75 = v98;
      *(void *)(v74 + swift_weakDestroy(v0 + 16) = v98;
      *(void *)(v74 + 24) = v61;
      *(_BYTE *)(v74 + 32) = v99 & 1;
      *(void *)(v74 + 40) = v76;
      *(void *)(v74 + 48) = v72;
      *(void *)(v74 + 56) = v52;
      *(void *)(v74 + 64) = sub_100294404;
      uint64_t v77 = v105;
      *(void *)(v74 + 72) = v105;
      unint64_t v111 = (unint64_t)sub_100294D04;
      uint64_t v112 = v74;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      uint64_t v109 = sub_1002356BC;
      uint64_t v110 = &unk_1003E5D68;
      char v78 = _Block_copy(&aBlock);
      swift_retain(v75);
      swift_retain(v52);
      swift_retain(v76);
      swift_retain(v73);
      uint64_t v79 = v61;
      uint64_t v80 = swift_retain(v77);
      uint64_t v81 = v100;
      static DispatchQoS.unspecified.getter(v80);
      uint64_t v107 = _swiftEmptyArrayStorage;
      sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v83 = v82;
      uint64_t v84 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
      sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
      uint64_t v85 = v103;
      uint64_t v86 = v84;
      uint64_t v87 = v96;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v107, v86, v88, v96, v83);
      uint64_t v89 = v92;
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v81, v85, v91, v78);
      _Block_release(v78);

      (*(void (**)(char *, uint64_t))(v104 + 8))(v85, v87);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v81, v102);
      uint64_t v90 = v112;
      swift_release(v77);
      swift_release(v98);
      swift_release(v76);
      swift_release(v73);
      swift_release(v52);
      swift_release(v90);
      uint64_t v49 = v106;
    }

    else
    {
      if (qword_1004468F0 != -1) {
        swift_once(&qword_1004468F0, sub_100208418);
      }
      uint64_t v33 = qword_100454018;
      uint64_t v34 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v35 = swift_allocObject(v34, 112LL, 7LL);
      *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
      LOBYTE(aBlock) = a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___supportsConversationOneToOneModeEnabled] & 1;
      uint64_t v36 = String.init<A>(reflecting:)(&aBlock, &type metadata for Bool);
      uint64_t v38 = v37;
      *(void *)(v35 + 56) = &type metadata for String;
      unint64_t v39 = sub_1001B2330();
      unint64_t v40 = a5;
      unint64_t v41 = v39;
      *(void *)(v35 + 64) = v39;
      *(void *)(v35 + 32) = v36;
      *(void *)(v35 + 40) = v38;
      LOBYTE(aBlock) = [*(id *)&v40[OBJC_IVAR___CSDFaceTimeInviteDemuxer_serverBag] isModernGFTEnabled];
      uint64_t v42 = String.init<A>(reflecting:)(&aBlock, &type metadata for Bool);
      *(void *)(v35 + 96) = &type metadata for String;
      *(void *)(v35 + 104) = v41;
      *(void *)(v35 + 72) = v42;
      *(void *)(v35 + 80) = v43;
      uint64_t v44 = static os_log_type_t.default.getter(v42);
      os_log(_:dso:log:type:_:)( "supportsConversationOneToOneModeEnabled: %@, serverBag.isModernGFTEnabled: %@",  77LL,  2LL,  &_mh_execute_header,  v33,  v44,  v35);
      swift_bridgeObjectRelease(v35);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      Class v46 = Array._bridgeToObjectiveC()().super.isa;
      Class v47 = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v48 = v106;
      (*((void (**)(const void *, Class, Class, Class, void))v106 + 2))(v106, isa, v46, v47, 0LL);
      swift_release(v105);
      swift_bridgeObjectRelease(v17);

      uint64_t v49 = v48;
    }

    _Block_release(v49);
  }

  else
  {
    _Block_release(a6);
    __break(1u);
  }

id sub_100291AF0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithUnprefixedURI:v5];

  return v6;
}

void sub_100291B60(uint64_t a1, void **a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v10 = qword_100454018;
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  __int128 aBlock = (void **)a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  uint64_t v14 = String.init<A>(reflecting:)(&aBlock, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1001B2330();
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  __int128 aBlock = a2;
  uint64_t v37 = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = String.init<A>(reflecting:)(&aBlock, &type metadata for String);
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 72) = v18;
  *(void *)(v12 + 80) = v19;
  uint64_t v20 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)( "endpointsForDestinationIDs: %@, service: %@",  43LL,  2LL,  &_mh_execute_header,  v10,  v20,  v12);
  swift_bridgeObjectRelease(v12);
  uint64_t v21 = *(void **)&v6[OBJC_IVAR___CSDFaceTimeInviteDemuxer_idsQueryController];
  swift_unknownObjectRetain(v21);
  uint64_t v22 = sub_1001E5D18(a1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  NSString v24 = String._bridgeToObjectiveC()();
  uint64_t v31 = (void *)TUBundleIdentifierCallServicesDaemon;
  uint64_t v32 = *(void *)&v6[OBJC_IVAR___CSDFaceTimeInviteDemuxer_queue];
  char v25 = (void *)swift_allocObject(&unk_1003E5DA0, 72LL, 7LL);
  _OWORD v25[2] = a2;
  void v25[3] = a3;
  v25[4] = a4;
  void v25[5] = v6;
  v25[6] = a5;
  v25[7] = a6;
  v25[8] = a1;
  unint64_t v40 = sub_100295098;
  unint64_t v41 = v25;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256LL;
  uint64_t v38 = sub_10028F948;
  unint64_t v39 = &unk_1003E5DB8;
  uint64_t v26 = _Block_copy(&aBlock);
  id v27 = v41;
  id v28 = a4;
  uint64_t v29 = v6;
  swift_retain(a6);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  id v30 = v31;
  swift_release(v27);
  [v21 currentIDStatusForDestinations:isa service:v24 preferredFromID:v28 listenerID:v30 queue:v32 completionBlock:v26];
  _Block_release(v26);
  swift_unknownObjectRelease(v21);
}

void sub_100291E00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v28;
  a28 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v48 = v34;
  uint64_t v49 = v35;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v42 = qword_100454018;
  uint64_t v43 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
  *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v44 + 56) = sub_1001AFF14(&qword_10044C048);
  sub_1001C6AE8((unint64_t *)&unk_10044C060, &qword_10044C048);
  *(void *)(v44 + 64) = v45;
  *(void *)(v44 + 32) = v41;
  uint64_t v46 = sub_1001B9234();
  uint64_t v47 = static os_log_type_t.default.getter(v46);
  os_log(_:dso:log:type:_:)(v33, v31, 2LL, &_mh_execute_header, v42, v47, v44);
  sub_1001B0EB8();
  sub_100295480(v39 + 16, (uint64_t)&a14);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = v41;
  sub_1001B9234();
  sub_1001B0EB8();
  sub_100295480(v37 + 16, (uint64_t)&a11);
  *(void *)(v37 + swift_weakDestroy(v0 + 16) = v48;
  dispatch_group_leave(v49);
  sub_100295300();
}

uint64_t sub_100291F2C( uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LOBYTE(v8) = a3;
  uint64_t v198 = 0LL;
  uint64_t v199 = 0LL;
  uint64_t v196 = 0LL;
  uint64_t v197 = 0LL;
  uint64_t v10 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v195, 0LL, 0LL);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v189 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain_n(v11, 2LL);
  while (1)
  {
    uint64_t v164 = v10;
    if (!v12) {
      break;
    }
    uint64_t v10 = 0LL;
    uint64_t v13 = 4LL;
    int v14 = v8 & 1;
    while (1)
    {
      id v15 = (v11 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11)
          : *(id *)(v11 + 8 * v13);
      uint64_t v8 = v15;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1LL)) {
        break;
      }
      id v184 = v15;
      sub_100292EB0(&v184, &v196, &v199, &v198, v14, &v197, &v182);

      id v18 = v182;
      if (v182)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        unint64_t v20 = *(void *)((v189 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v19 = *(void *)((v189 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v20 >= v19 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
        }
        uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
        specialized Array._endMutation()(v21, v22, v23, v24, v25, v26, v27, v28);
      }

      ++v13;
      if (v16 == v12)
      {
        swift_bridgeObjectRelease(v11);
        uint64_t v29 = v189;
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_44:
    if (v11 < 0) {
      uint64_t v61 = v11;
    }
    else {
      uint64_t v61 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v11, 2LL);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v61);
  }

  swift_bridgeObjectRelease(v11);
  uint64_t v10 = 0LL;
  uint64_t v29 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_16:
  swift_bridgeObjectRelease(v11);
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0) {
      uint64_t v62 = v29;
    }
    else {
      uint64_t v62 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v29);
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v62);
    if (v30) {
      goto LABEL_18;
    }
LABEL_52:
    swift_bridgeObjectRelease(v29);
    uint64_t v194 = 0LL;
    uint64_t v168 = _swiftEmptyArrayStorage;
    uint64_t v165 = _swiftEmptyArrayStorage;
    goto LABEL_53;
  }

  uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v29);
  if (!v30) {
    goto LABEL_52;
  }
LABEL_18:
  if (v30 < 1)
  {
    __break(1u);
    goto LABEL_150;
  }

  uint64_t v31 = 0LL;
  int64_t v11 = v29 & 0xC000000000000001LL;
  uint64_t v168 = _swiftEmptyArrayStorage;
  do
  {
    if (v11) {
      id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
    }
    else {
      id v32 = *(id *)(v29 + 8 * v31 + 32);
    }
    uint64_t v33 = v32;
    id v34 = [v32 pushToken];
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    unint64_t v37 = v36;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB39C(v35, v37);
    id v39 = [v33 URI];
    id v40 = [v39 prefixedURI];

    static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    uint64_t v42 = v41;

    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    uint64_t v44 = (void *)IDSCopyIDForTokenWithID(isa, v43);

    if (v44)
    {
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v47 = v46;

      if ((swift_isUniquelyReferenced_nonNull_native(v168) & 1) == 0)
      {
        sub_1002B00EC();
        uint64_t v168 = v50;
      }

      unint64_t v48 = v168[2];
      if (v48 >= v168[3] >> 1)
      {
        sub_1002B00EC();
        uint64_t v168 = v51;
      }

      v168[2] = v48 + 1;
      uint64_t v49 = &v168[2 * v48];
      void v49[4] = v45;
      void v49[5] = v47;
    }

    else
    {
    }

    ++v31;
  }

  while (v30 != v31);
  swift_bridgeObjectRelease(v29);
  uint64_t v194 = 0LL;
  swift_bridgeObjectRetain(v29);
  uint64_t v52 = 0LL;
  uint64_t v165 = _swiftEmptyArrayStorage;
  do
  {
    if (v11) {
      id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v29);
    }
    else {
      id v53 = *(id *)(v29 + 8 * v52 + 32);
    }
    id v54 = v53;
    id v184 = v53;
    sub_100293144(&v184, &v196, &v194, &v189);

    uint64_t v55 = v190;
    if (v190)
    {
      uint64_t v56 = v189;
      if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) == 0)
      {
        sub_1002B00EC();
        uint64_t v165 = v59;
      }

      unint64_t v57 = v165[2];
      if (v57 >= v165[3] >> 1)
      {
        sub_1002B00EC();
        uint64_t v165 = v60;
      }

      v165[2] = v57 + 1;
      uint64_t v58 = &v165[2 * v57];
      v58[4] = v56;
      void v58[5] = v55;
    }

    ++v52;
  }

  while (v30 != v52);
  swift_bridgeObjectRelease(v29);
LABEL_53:
  uint64_t v63 = a4 + 2;
  swift_bridgeObjectRelease(v29);
  uint64_t v192 = 0LL;
  uint64_t v193 = 0LL;
  uint64_t v191 = 0LL;
  swift_beginAccess(a4 + 2, &v189, 0LL, 0LL);
  uint64_t v163 = a4 + 2;
  uint64_t v64 = a4[2];
  if (!((unint64_t)v64 >> 62))
  {
    uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain_n(*v63, 2LL);
    if (v65) {
      goto LABEL_55;
    }
LABEL_72:
    uint64_t v30 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_73;
  }

  if (v64 < 0) {
    uint64_t v74 = *v63;
  }
  else {
    uint64_t v74 = v64 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v64, 2LL);
  uint64_t v65 = _CocoaArrayWrapper.endIndex.getter(v74);
  if (!v65) {
    goto LABEL_72;
  }
LABEL_55:
  if (v65 < 1)
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v66 = 0LL;
  uint64_t v30 = (uint64_t)_swiftEmptyArrayStorage;
  do
  {
    if ((v64 & 0xC000000000000001LL) != 0) {
      id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v64);
    }
    else {
      id v67 = *(id *)(v64 + 8 * v66 + 32);
    }
    uint64_t v68 = v67;
    id v182 = v67;
    sub_1002932E0(&v182, &v191, v168, &v193, a2, &v192, (uint64_t *)&v184);

    int64_t v11 = v185;
    if (v185)
    {
      id v69 = v184;
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
      {
        sub_1002B00EC();
        uint64_t v30 = v72;
      }

      unint64_t v70 = *(void *)(v30 + 16);
      if (v70 >= *(void *)(v30 + 24) >> 1)
      {
        sub_1002B00EC();
        uint64_t v30 = v73;
      }

      *(void *)(v30 + swift_weakDestroy(v0 + 16) = v70 + 1;
      uint64_t v71 = v30 + 16 * v70;
      *(void *)(v71 + 32) = v69;
      *(void *)(v71 + 40) = v11;
    }

    ++v66;
  }

  while (v65 != v66);
LABEL_73:
  uint64_t v75 = (uint64_t)(a5 + 2);
  swift_bridgeObjectRelease_n(v64, 2LL);
  uint64_t v187 = 0LL;
  uint64_t v188 = 0LL;
  uint64_t v186 = 0LL;
  swift_beginAccess(a5 + 2, &v184, 0LL, 0LL);
  a5 = (uint64_t *)v75;
  uint64_t v76 = *(void *)v75;
  if (!(*(void *)v75 >> 62))
  {
    uint64_t v77 = *(void *)((v76 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain_n(*(void *)v75, 2LL);
    if (v77) {
      goto LABEL_75;
    }
LABEL_92:
    a4 = _swiftEmptyArrayStorage;
    goto LABEL_93;
  }

  if (v76 < 0) {
    uint64_t v75 = *(void *)v75;
  }
  else {
    uint64_t v75 = v76 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v76, 2LL);
  uint64_t v77 = _CocoaArrayWrapper.endIndex.getter(v75);
  if (!v77) {
    goto LABEL_92;
  }
LABEL_75:
  if (v77 < 1)
  {
LABEL_151:
    __break(1u);
LABEL_152:
    uint64_t v103 = swift_once(&qword_1004468F0, sub_100208418);
    goto LABEL_120;
  }

  uint64_t v78 = 0LL;
  int64_t v11 = v76 & 0xC000000000000001LL;
  a4 = _swiftEmptyArrayStorage;
  do
  {
    if (v11) {
      id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v76);
    }
    else {
      id v79 = *(id *)(v76 + 8 * v78 + 32);
    }
    uint64_t v75 = (uint64_t)v79;
    v181[0] = v79;
    sub_1002934D4(v181, &v188, v168, (void *)v30, &v187, &v186, (uint64_t *)&v182);

    uint64_t v80 = v183;
    if (v183)
    {
      id v81 = v182;
      if ((swift_isUniquelyReferenced_nonNull_native(a4) & 1) == 0)
      {
        sub_1002B00EC();
        a4 = v84;
      }

      unint64_t v82 = a4[2];
      uint64_t v75 = v82 + 1;
      if (v82 >= a4[3] >> 1)
      {
        sub_1002B00EC();
        a4 = v85;
      }

      a4[2] = v75;
      uint64_t v83 = &a4[2 * v82];
      v83[4] = v81;
      v83[5] = v80;
    }

    ++v78;
  }

  while (v77 != v78);
LABEL_93:
  uint64_t v86 = (uint64_t *)(a6 + 16);
  swift_bridgeObjectRelease_n(v76, 2LL);
  uint64_t v87 = v168[2];
  uint64_t v10 = v164;
  if (!v87 && !*(void *)(v30 + 16) && !a4[2])
  {
    uint64_t v88 = v198 + v192;
    if (__OFADD__(v198, v192))
    {
      __break(1u);
    }

    else
    {
      BOOL v89 = __OFADD__(v88, v186);
      uint64_t v90 = v88 + v186;
      if (!v89)
      {
        if (v90)
        {
          sub_1001B4B94(0LL, (unint64_t *)&unk_10044C050, &OBJC_CLASS___OS_os_log_ptr);
          uint64_t v91 = (void *)static OS_os_log.default.getter();
          uint64_t v92 = static os_log_type_t.default.getter(v91);
          os_log(_:dso:log:type:_:)( "FaceTimeInviteDemuxer: no destinations because we were calling ourselves",  72LL,  2LL,  &_mh_execute_header,  v91,  v92,  _swiftEmptyArrayStorage);

          uint64_t v93 = v174;
          uint64_t v94 = 1LL;
LABEL_113:
          swift_beginAccess(v86, v93, 1LL, 0LL);
          uint64_t *v86 = v94;
          goto LABEL_114;
        }

        if (v197)
        {
          sub_1001B4B94(0LL, (unint64_t *)&unk_10044C050, &OBJC_CLASS___OS_os_log_ptr);
          id v95 = (void *)static OS_os_log.default.getter();
          uint64_t v96 = static os_log_type_t.default.getter(v95);
          uint64_t v94 = 2LL;
          os_log(_:dso:log:type:_:)( "FaceTimeInviteDemuxer: no destinations because we removed green tea devices",  75LL,  2LL,  &_mh_execute_header,  v95,  v96,  _swiftEmptyArrayStorage);

          uint64_t v93 = v174;
          goto LABEL_113;
        }

        swift_beginAccess(v86, v174, 0LL, 0LL);
        if (*v86 == 5)
        {
LABEL_112:
          uint64_t v93 = v170;
          uint64_t v94 = 3LL;
          goto LABEL_113;
        }

        swift_beginAccess(v164, v173, 0LL, 0LL);
        uint64_t v75 = *v164;
        if (!((unint64_t)*v164 >> 62))
        {
          uint64_t v97 = *(void *)((v75 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_105:
          swift_beginAccess(v163, v172, 0LL, 0LL);
          uint64_t v98 = *v163;
          if ((unint64_t)*v163 >> 62)
          {
            if (v98 < 0) {
              uint64_t v151 = *v163;
            }
            else {
              uint64_t v151 = v98 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v98);
            uint64_t v99 = _CocoaArrayWrapper.endIndex.getter(v151);
            swift_bridgeObjectRelease(v98);
          }

          else
          {
            uint64_t v99 = *(void *)((v98 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          uint64_t v100 = v97 + v99;
          if (__OFADD__(v97, v99))
          {
            __break(1u);
          }

          else
          {
            swift_beginAccess(a5, v171, 0LL, 0LL);
            uint64_t v98 = *a5;
            if (!((unint64_t)*a5 >> 62))
            {
              uint64_t v101 = *(char **)((v98 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              goto LABEL_110;
            }
          }

          if (v98 < 0) {
            uint64_t v152 = v98;
          }
          else {
            uint64_t v152 = v98 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v98);
          uint64_t v101 = (char *)_CocoaArrayWrapper.endIndex.getter(v152);
          swift_bridgeObjectRelease(v98);
LABEL_110:
          uint64_t v102 = &v101[v100];
          if (__OFADD__(v100, v101))
          {
            __break(1u);
            swift_bridgeObjectRelease(v11);

            uint64_t result = swift_bridgeObjectRelease(v189);
            __break(1u);
            return result;
          }

          uint64_t v10 = v164;
          if (!v102)
          {
            sub_1001B4B94(0LL, (unint64_t *)&unk_10044C050, &OBJC_CLASS___OS_os_log_ptr);
            uint64_t v144 = (void *)static OS_os_log.default.getter();
            uint64_t v145 = static os_log_type_t.default.getter(v144);
            os_log(_:dso:log:type:_:)( "No destinations returned for any endpoint",  41LL,  2LL,  &_mh_execute_header,  v144,  v145,  _swiftEmptyArrayStorage);

            uint64_t v93 = v170;
            uint64_t v94 = 4LL;
            goto LABEL_113;
          }

          goto LABEL_112;
        }

LABEL_155:
        if (v75 < 0) {
          uint64_t v150 = v75;
        }
        else {
          uint64_t v150 = v75 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v75);
        uint64_t v97 = _CocoaArrayWrapper.endIndex.getter(v150);
        swift_bridgeObjectRelease(v75);
        goto LABEL_105;
      }
    }

    __break(1u);
    goto LABEL_155;
  }

void sub_100292EB0( id *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X4>, int a5@<W5>, uint64_t *a6@<X6>, void *a7@<X8>)
{
  int v38 = a5;
  id v10 = *a1;
  id v11 = [*a1 pushToken];
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v14 = v13;

  v15.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001BB39C(v12, v14);
  id v16 = [v10 URI];
  NSString v17 = [v16 prefixedURI];

  if (!v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v19 = v18;
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
  }

  unint64_t v20 = (void *)IDSCopyIDForTokenWithID(v15.super.isa, v17);

  if (!v20) {
    goto LABEL_10;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  a2 = v22;

  id v23 = [v10 capabilities];
  id v24 = [v23 valueForCapability:IDSRegistrationPropertySupportsModernGFT];

  if (v24 != (id)1)
  {
    swift_bridgeObjectRelease(a2);
    if (!__OFADD__(*a3, 1LL))
    {
      ++*a3;
      goto LABEL_19;
    }

    goto LABEL_23;
  }

  uint64_t v25 = sub_100290EA4();
  if (!v26)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_15;
  }

  uint64_t v27 = v26;
  _OWORD v37[2] = v21;
  v37[3] = a2;
  v37[0] = v25;
  v37[1] = v26;
  unint64_t v28 = sub_1002683B8();
  char v29 = StringProtocol.contains<A>(_:)(v37, &type metadata for String, &type metadata for String, v28, v28);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v27);
  if ((v29 & 1) == 0)
  {
LABEL_15:
    if ((v38 & 1) != 0
      || (id v32 = [v10 capabilities],
          id v33 = [v32 valueForCapability:IDSRegistrationPropertyIsGreenTea],
          v32,
          v33 != (id)1))
    {
      *a7 = v10;
      id v34 = v10;
      return;
    }

    uint64_t v30 = a6;
    uint64_t v31 = *a6 + 1;
    if (!__OFADD__(*a6, 1LL)) {
      goto LABEL_18;
    }
LABEL_24:
    __break(1u);
    return;
  }

  uint64_t v30 = a4;
  uint64_t v31 = *a4 + 1;
  if (!__OFADD__(*a4, 1LL))
  {
LABEL_18:
    *uint64_t v30 = v31;
    goto LABEL_19;
  }

  __break(1u);
LABEL_10:
  if (__OFADD__(*a2, 1LL))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  ++*a2;
LABEL_19:
  *a7 = 0LL;
}

void sub_100293144(id *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = *a1;
  id v8 = [*a1 pushToken];
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  unint64_t v11 = v10;

  v12.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001BB39C(v9, v11);
  id v13 = [v7 URI];
  NSString v14 = [v13 prefixedURI];

  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v16 = v15;
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
  }

  NSString v17 = (void *)IDSCopyIDForTokenWithID(v12.super.isa, v14);

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    id v21 = [v7 capabilities];
    id v22 = [v21 valueForCapability:IDSRegistrationPropertySupportsSSRC];

    if (v22 == (id)1)
    {
      *a4 = v18;
      a4[1] = v20;
      return;
    }

    swift_bridgeObjectRelease(v20);
    if (!__OFADD__(*a3, 1LL))
    {
      ++*a3;
      goto LABEL_10;
    }
  }

  else
  {
    if (!__OFADD__(*a2, 1LL))
    {
      ++*a2;
LABEL_10:
      *a4 = 0LL;
      a4[1] = 0LL;
      return;
    }

    __break(1u);
  }

  __break(1u);
}

void sub_1002932E0( id *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  void v31[5] = a5;
  id v11 = *a1;
  id v12 = [*a1 pushToken];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v15 = v14;

  v16.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001BB39C(v13, v15);
  id v17 = [v11 URI];
  NSString v18 = [v17 prefixedURI];

  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v20 = v19;
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
  }

  id v21 = (void *)IDSCopyIDForTokenWithID(v16.super.isa, v18);

  if (!v21)
  {
    if (!__OFADD__(*a2, 1LL))
    {
      ++*a2;
      goto LABEL_13;
    }

    __break(1u);
    goto LABEL_17;
  }

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  if ((sub_10028F48C(v22, v24, a3) & 1) != 0)
  {
    swift_bridgeObjectRelease(v24);
    if (!__OFADD__(*a4, 1LL))
    {
      ++*a4;
LABEL_13:
      *a7 = 0LL;
      a7[1] = 0LL;
      return;
    }

void sub_1002934D4( id *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X6>, uint64_t *a7@<X8>)
{
  id v11 = *a1;
  id v12 = [*a1 pushToken];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v15 = v14;

  v16.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001BB39C(v13, v15);
  id v17 = [v11 URI];
  NSString v18 = [v17 prefixedURI];

  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v20 = v19;
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
  }

  id v21 = (void *)IDSCopyIDForTokenWithID(v16.super.isa, v18);

  if (!v21)
  {
    if (!__OFADD__(*a2, 1LL))
    {
      ++*a2;
      goto LABEL_10;
    }

    goto LABEL_18;
  }

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  if ((sub_10028F48C(v22, v24, a3) & 1) == 0 && (sub_10028F48C(v22, v24, a4) & 1) == 0)
  {
    uint64_t v25 = sub_100290EA4();
    if (!v26) {
      goto LABEL_16;
    }
    uint64_t v27 = v26;
    _OWORD v32[2] = v22;
    v32[3] = v24;
    v32[0] = v25;
    v32[1] = v26;
    unint64_t v28 = sub_1002683B8();
    char v29 = StringProtocol.contains<A>(_:)(v32, &type metadata for String, &type metadata for String, v28, v28);
    swift_bridgeObjectRelease(v27);
    if ((v29 & 1) == 0)
    {
LABEL_16:
      *a7 = v22;
      a7[1] = v24;
      return;
    }

    swift_bridgeObjectRelease(v24);
    if (!__OFADD__(*a6, 1LL))
    {
      ++*a6;
      goto LABEL_10;
    }

void sub_100293774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, Class, Class, uint64_t))(a5 + 16))(a5, isa, v8, v9, a4);
}

void sub_100293838( void **a1, void **a2, uint64_t a3, void **a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v12 = 7104878LL;
  uint64_t v46 = qword_100454018;
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v14 = swift_allocObject(v13, 152LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_10037B6E0;
  if (a1)
  {
    __int128 aBlock = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v15 = sub_1001AFF14(&qword_10044C070);
    uint64_t v16 = String.init<A>(reflecting:)(&aBlock, v15);
    unint64_t v18 = v17;
  }

  else
  {
    unint64_t v18 = 0xE300000000000000LL;
    uint64_t v16 = 7104878LL;
  }

  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1001B2330();
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  __int128 aBlock = a2;
  uint64_t v49 = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v20 = String.init<A>(reflecting:)(&aBlock, &type metadata for String);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 72) = v20;
  *(void *)(v14 + 80) = v21;
  if (a4)
  {
    __int128 aBlock = a4;
    uint64_t v22 = sub_1001B4B94(0LL, (unint64_t *)&unk_10044AF50, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v23 = a4;
    uint64_t v20 = String.init<A>(reflecting:)(&aBlock, v22);
    uint64_t v12 = v20;
  }

  else
  {
    unint64_t v24 = 0xE300000000000000LL;
  }

  *(void *)(v14 + 136) = &type metadata for String;
  *(void *)(v14 + 144) = v19;
  *(void *)(v14 + 112) = v12;
  *(void *)(v14 + 120) = v24;
  uint64_t v25 = static os_log_type_t.default.getter(v20);
  os_log(_:dso:log:type:_:)( "Current IDStatus results: %@ service: %@, fromIDURI: %@",  55LL,  2LL,  &_mh_execute_header,  v46,  v25,  v14);
  swift_bridgeObjectRelease(v14);
  if (a1)
  {
    uint64_t v26 = swift_bridgeObjectRetain(a1);
    uint64_t v27 = sub_10029440C(v26);
    swift_bridgeObjectRelease(a1);
    sub_10028EFF4(v27);
    uint64_t v29 = v28;
    swift_release(v27);
    uint64_t v30 = sub_10028F808(v29);
    swift_bridgeObjectRelease(v29);
    if (v30)
    {
      if (v30[2])
      {
        sub_100293BC4((uint64_t)v30, a2, a3, a4, a6, a7);
        swift_bridgeObjectRelease(v30);
        return;
      }

      swift_bridgeObjectRelease(v30);
    }
  }

  uint64_t v31 = *(void **)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_idsQueryController];
  swift_unknownObjectRetain(v31);
  id v32 = sub_1001E5D18(a8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = (void *)TUBundleIdentifierCallServicesDaemon;
  uint64_t v42 = *(void *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_queue];
  uint64_t v35 = (void *)swift_allocObject(&unk_1003E5DF0, 64LL, 7LL);
  void v35[2] = a2;
  void v35[3] = a3;
  v35[4] = a4;
  v35[5] = a6;
  v35[6] = a7;
  v35[7] = a5;
  uint64_t v52 = sub_1002950E4;
  id v53 = v35;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v49 = 1107296256LL;
  uint64_t v50 = sub_10028F948;
  uint64_t v51 = &unk_1003E5E08;
  unint64_t v36 = _Block_copy(&aBlock);
  unint64_t v37 = v53;
  int v38 = a4;
  id v39 = v34;
  swift_retain(a7);
  id v40 = a5;
  swift_bridgeObjectRetain(a3);
  swift_release(v37);
  [v31 requiredIDStatusForDestinations:isa service:v33 preferredFromID:v38 listenerID:v39 queue:v42 completionBlock:v36];
  _Block_release(v36);
  swift_unknownObjectRelease(v31);
}

void sub_100293BC4(uint64_t a1, void **a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v10 = qword_100454018;
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  __int128 aBlock = (void **)a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  uint64_t v14 = String.init<A>(reflecting:)(&aBlock, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1001B2330();
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  __int128 aBlock = a2;
  uint64_t v36 = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = String.init<A>(reflecting:)(&aBlock, &type metadata for String);
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 72) = v18;
  *(void *)(v12 + 80) = v19;
  uint64_t v20 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)( "Querying currentRemoteDevices %@ service: %@",  44LL,  2LL,  &_mh_execute_header,  v10,  v20,  v12);
  swift_bridgeObjectRelease(v12);
  uint64_t v21 = *(void **)(v6 + OBJC_IVAR___CSDFaceTimeInviteDemuxer_idsQueryController);
  swift_unknownObjectRetain(v21);
  uint64_t v22 = sub_1001E5D18(a1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  NSString v24 = String._bridgeToObjectiveC()();
  uint64_t v25 = (void *)TUBundleIdentifierCallServicesDaemon;
  uint64_t v31 = *(void *)(v6 + OBJC_IVAR___CSDFaceTimeInviteDemuxer_queue);
  uint64_t v26 = (void *)swift_allocObject(&unk_1003E5E40, 64LL, 7LL);
  v26[2] = a1;
  uint64_t v26[3] = a2;
  v26[4] = a3;
  v26[5] = a4;
  v26[6] = a5;
  v26[7] = a6;
  id v39 = sub_100295128;
  id v40 = v26;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256LL;
  unint64_t v37 = sub_10028F948;
  int v38 = &unk_1003E5E58;
  uint64_t v27 = _Block_copy(&aBlock);
  uint64_t v28 = v40;
  id v29 = a4;
  swift_retain(a6);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  id v30 = v25;
  swift_release(v28);
  [v21 currentRemoteDevicesForDestinations:isa service:v24 preferredFromID:v29 listenerID:v30 queue:v31 completionBlock:v27];
  _Block_release(v27);
  swift_unknownObjectRelease(v21);
}

uint64_t sub_100293E58( uint64_t a1, void **a2, uint64_t a3, void *a4, uint64_t (*a5)(void *, uint64_t), uint64_t a6)
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v10 = 7104878LL;
  uint64_t v36 = qword_100454018;
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = swift_allocObject(v11, 152LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10037B6E0;
  if (a1)
  {
    v37[0] = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v13 = sub_1001AFF14(&qword_10044C070);
    uint64_t v14 = String.init<A>(reflecting:)(v37, v13);
    unint64_t v16 = v15;
  }

  else
  {
    unint64_t v16 = 0xE300000000000000LL;
    uint64_t v14 = 7104878LL;
  }

  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1001B2330();
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  v37[0] = a2;
  v37[1] = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = String.init<A>(reflecting:)(v37, &type metadata for String);
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 72) = v18;
  *(void *)(v12 + 80) = v19;
  if (a4)
  {
    v37[0] = a4;
    uint64_t v20 = sub_1001B4B94(0LL, (unint64_t *)&unk_10044AF50, &OBJC_CLASS___IDSURI_ptr);
    id v21 = a4;
    uint64_t v18 = String.init<A>(reflecting:)(v37, v20);
    uint64_t v10 = v18;
  }

  else
  {
    unint64_t v22 = 0xE300000000000000LL;
  }

  *(void *)(v12 + 136) = &type metadata for String;
  *(void *)(v12 + 144) = v17;
  *(void *)(v12 + 112) = v10;
  *(void *)(v12 + 120) = v22;
  uint64_t v23 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)( "Required IDStatus results: %@ service: %@ fromID: %@",  52LL,  2LL,  &_mh_execute_header,  v36,  v23,  v12);
  swift_bridgeObjectRelease(v12);
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v24 = swift_bridgeObjectRetain(a1);
  uint64_t v25 = sub_10029440C(v24);
  swift_bridgeObjectRelease(a1);
  sub_10028EFF4(v25);
  uint64_t v27 = v26;
  swift_release(v25);
  uint64_t v28 = sub_10028F808(v27);
  swift_bridgeObjectRelease(v27);
  if (v28)
  {
    if (v28[2])
    {
      sub_100293BC4((uint64_t)v28, a2, a3, a4, (uint64_t)a5, a6);
      return swift_bridgeObjectRelease(v28);
    }

    swift_bridgeObjectRelease(v28);
  }

  uint64_t v30 = swift_bridgeObjectRetain(a1);
  uint64_t v31 = sub_100294530(v30);
  swift_bridgeObjectRelease(a1);
  uint64_t v32 = *(void *)(v31 + 16);
  swift_release(v31);
  if (!v32) {
    uint64_t v33 = 0LL;
  }
  else {
LABEL_15:
  }
    uint64_t v33 = 5LL;
  return a5(_swiftEmptyArrayStorage, v33);
}

uint64_t sub_1002940D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(void *, void))
{
  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v10 = 7104878LL;
  uint64_t v36 = qword_100454018;
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = swift_allocObject(v11, 192LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10037B140;
  if (a1)
  {
    v38[0] = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v13 = sub_1001AFF14(&qword_10044C070);
    uint64_t v14 = String.init<A>(reflecting:)(v38, v13);
    unint64_t v16 = v15;
  }

  else
  {
    unint64_t v16 = 0xE300000000000000LL;
    uint64_t v14 = 7104878LL;
  }

  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1001B2330();
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  v38[0] = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  uint64_t v19 = String.init<A>(reflecting:)(v38, v18);
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 72) = v19;
  *(void *)(v12 + 80) = v20;
  v38[0] = a3;
  v38[1] = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v21 = String.init<A>(reflecting:)(v38, &type metadata for String);
  *(void *)(v12 + 136) = &type metadata for String;
  *(void *)(v12 + 144) = v17;
  *(void *)(v12 + 112) = v21;
  *(void *)(v12 + 120) = v22;
  if (a5)
  {
    v38[0] = a5;
    uint64_t v23 = sub_1001B4B94(0LL, (unint64_t *)&unk_10044AF50, &OBJC_CLASS___IDSURI_ptr);
    id v24 = a5;
    uint64_t v21 = String.init<A>(reflecting:)(v38, v23);
    uint64_t v10 = v21;
  }

  else
  {
    unint64_t v25 = 0xE300000000000000LL;
  }

  *(void *)(v12 + 176) = &type metadata for String;
  *(void *)(v12 + 184) = v17;
  *(void *)(v12 + 152) = v10;
  *(void *)(v12 + 160) = v25;
  uint64_t v26 = static os_log_type_t.default.getter(v21);
  os_log(_:dso:log:type:_:)( "Current remote device results: %@ for destinationIDs: %@, service: %@, fromIDURI: %@",  84LL,  2LL,  &_mh_execute_header,  v36,  v26,  v12);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(a1);
  uint64_t v27 = sub_10028F294(a2, a1);
  uint64_t v28 = v27;
  v38[0] = _swiftEmptyArrayStorage;
  uint64_t v29 = v27[2];
  if (v29)
  {
    swift_bridgeObjectRetain(v27);
    for (uint64_t i = 0LL; i != v29; ++i)
    {
      uint64_t v31 = v28[i + 4];
      uint64_t v32 = swift_bridgeObjectRetain(v31);
      sub_100290BC4(v32);
    }

    swift_bridgeObjectRelease_n(v28, 2LL);
    uint64_t v33 = (void *)v38[0];
  }

  else
  {
    swift_bridgeObjectRelease(v27);
    uint64_t v33 = _swiftEmptyArrayStorage;
  }

  a6(v33, 0LL);
  return swift_bridgeObjectRelease(v33);
}

uint64_t type metadata accessor for FaceTimeInviteDemuxer()
{
  return objc_opt_self(&OBJC_CLASS___CSDFaceTimeInviteDemuxer);
}

uint64_t sub_1002943E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100294404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10029440C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_100295414();
    sub_100295394();
    if (v1) {
      swift_willThrow(v7);
    }
    else {
      return v7;
    }
  }

  else
  {
    uint64_t v8 = swift_slowAlloc(v6, -1LL);
    sub_100295414();
    sub_100295394();
    uint64_t v2 = v9;
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  return v2;
}

uint64_t sub_100294530(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_10024772C(0LL, v6, v8);
    sub_10029468C((uint64_t)v8, v6, v2);
    if (v1) {
      swift_willThrow(v9);
    }
    else {
      return v9;
    }
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v7, -1LL);
    sub_10024772C(0LL, v6, v10);
    sub_10029468C((uint64_t)v10, v6, v2);
    uint64_t v2 = v11;
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v2;
}

void sub_10029468C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v18 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_17:
    sub_1001D8A64(*(void *)(a3 + 48) + 40 * v10, (uint64_t)v26);
    sub_1001B03FC(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v25);
    sub_1001D8A64((uint64_t)v26, (uint64_t)v22);
    sub_1001B03FC((uint64_t)v25, (uint64_t)v24);
    v19[0] = v22[0];
    v19[1] = v22[1];
    uint64_t v20 = v23;
    sub_1001B03EC(v24, v21);
    if (swift_dynamicCast(&v27, v21, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL))
    {
      uint64_t v14 = v27;
      sub_1001D8504((uint64_t)v19);
      sub_1001B0438(v25);
      sub_1001D8504((uint64_t)v26);
      if (v14 == 2)
      {
        *(void *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
        BOOL v11 = __OFADD__(v17++, 1LL);
        if (v11) {
          goto LABEL_30;
        }
      }
    }

    else
    {
      sub_1001D8504((uint64_t)v19);
      sub_1001B0438(v25);
      sub_1001D8504((uint64_t)v26);
    }
  }

  BOOL v11 = __OFADD__(v4++, 1LL);
  if (v11)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v4 >= v18) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_16:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_17;
  }

  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v18) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v18) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v18)
  {
LABEL_27:
    sub_10023C4B8(a1, a2, v17);
    return;
  }

  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
LABEL_15:
    int64_t v4 = v13;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v18) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }

void sub_1002948FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v18 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_17:
    sub_1001D8A64(*(void *)(a3 + 48) + 40 * v10, (uint64_t)v26);
    sub_1001B03FC(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v25);
    sub_1001D8A64((uint64_t)v26, (uint64_t)v22);
    sub_1001B03FC((uint64_t)v25, (uint64_t)v24);
    v19[0] = v22[0];
    v19[1] = v22[1];
    uint64_t v20 = v23;
    sub_1001B03EC(v24, v21);
    if (swift_dynamicCast(&v27, v21, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL))
    {
      uint64_t v14 = v27;
      sub_1001D8504((uint64_t)v19);
      sub_1001B0438(v25);
      sub_1001D8504((uint64_t)v26);
      if (v14 == 1)
      {
        *(void *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
        BOOL v11 = __OFADD__(v17++, 1LL);
        if (v11) {
          goto LABEL_30;
        }
      }
    }

    else
    {
      sub_1001D8504((uint64_t)v19);
      sub_1001B0438(v25);
      sub_1001D8504((uint64_t)v26);
    }
  }

  BOOL v11 = __OFADD__(v4++, 1LL);
  if (v11)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v4 >= v18) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_16:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_17;
  }

  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v18) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v18) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v18)
  {
LABEL_27:
    sub_10023C4B8(a1, a2, v17);
    return;
  }

  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
LABEL_15:
    int64_t v4 = v13;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v18) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }

uint64_t sub_100294B6C(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t sub_100294BD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100294BF8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

#error "100294C28: call analysis failed (funcsize=9)"
#error "100294C54: call analysis failed (funcsize=9)"
uint64_t sub_100294C64()
{
  uint64_t v0;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  sub_10022CCB8();
  return swift_deallocObject(v0, 40LL, 7LL);
}

#error "100294CB0: call analysis failed (funcsize=9)"
uint64_t sub_100294CBC()
{
  uint64_t v0;
  swift_release(*(void *)(v0 + 16));

  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  sub_10029548C();
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100294D04()
{
  return sub_100291F2C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(_BYTE *)(v0 + 32),  *(void **)(v0 + 40),  *(uint64_t **)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72));
}

uint64_t sub_100294D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100294D2C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100294D34()
{
  unint64_t result = qword_10044C040;
  if (!qword_10044C040)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&unk_10044AF50, &OBJC_CLASS___IDSURI_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044C040);
  }

  return result;
}

void sub_100294D84()
{
}

void sub_100294DA8()
{
  if (v3)
  {
    if (v0 < 0) {
      uint64_t v25 = v0;
    }
    else {
      uint64_t v25 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001EE280();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_1001B0EB8();
    if (!v5) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v5 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v5)
    {
LABEL_17:
      sub_10024D5EC();
      return;
    }
  }

  if (v1)
  {
    if (v3)
    {
      sub_1001EE280();
      uint64_t v6 = sub_1002952CC();
      sub_1001B0EB8();
      if (v6 <= v4)
      {
        if (v5 >= 1)
        {
          sub_100295454();
          sub_1001EE280();
          do
          {
            uint64_t v7 = sub_1001AFF14(v2);
            sub_10029534C(v7, v8, v9, v10, v11, v12, v13, v14, v26);
            id v16 = *v15;
            sub_100295468((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23, v27);
            sub_100295440();
          }

          while (!v24);
          sub_1001B0EB8();
          goto LABEL_17;
        }

        goto LABEL_20;
      }
    }

    else
    {
      if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= v4)
      {
        sub_100295424(v0 & 0xFFFFFFFFFFFFFF8LL);
        goto LABEL_17;
      }

      __break(1u);
    }

    __break(1u);
LABEL_20:
    __break(1u);
  }

  __break(1u);
}

void sub_100294EB8()
{
}

void sub_100294EDC()
{
}

void sub_100294F00()
{
  if (v3)
  {
    if (v0 < 0) {
      uint64_t v25 = v0;
    }
    else {
      uint64_t v25 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001EE280();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_1001B0EB8();
    if (!v5) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v5 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v5)
    {
LABEL_17:
      sub_10024D5EC();
      return;
    }
  }

  if (v1)
  {
    if (v3)
    {
      sub_1001EE280();
      uint64_t v6 = sub_1002952CC();
      sub_1001B0EB8();
      if (v6 <= v4)
      {
        if (v5 >= 1)
        {
          sub_100295454();
          sub_1001EE280();
          do
          {
            uint64_t v7 = sub_1001AFF14(v2);
            sub_10029534C(v7, v8, v9, v10, v11, v12, v13, v14, v26);
            uint64_t v16 = swift_retain(*v15);
            sub_100295468(v16, v17, v18, v19, v20, v21, v22, v23, v27);
            sub_100295440();
          }

          while (!v24);
          sub_1001B0EB8();
          goto LABEL_17;
        }

        goto LABEL_20;
      }
    }

    else
    {
      if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= v4)
      {
        sub_100295424(v0 & 0xFFFFFFFFFFFFFF8LL);
        goto LABEL_17;
      }

      __break(1u);
    }

    __break(1u);
LABEL_20:
    __break(1u);
  }

  __break(1u);
}

void sub_100295010()
{
}

uint64_t sub_100295034(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100295048(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_10029505C()
{
  sub_10029548C();
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100295098(void **a1)
{
}

uint64_t sub_1002950AC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1002950E4(uint64_t a1)
{
  return sub_100295134( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100293E58);
}

uint64_t sub_1002950F0()
{
  sub_10029548C();
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100295128(uint64_t a1)
{
  return sub_100295134( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1002940D8);
}

uint64_t sub_100295134( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

id sub_100295148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___supportsConversationOneToOneModeEnabled] = 2;
  *(_OWORD *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer____lazy_storage___pushTokenForSelf] = xmmword_10037F160;
  *(void *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_queue] = a1;
  *(void *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_idsQueryController] = a2;
  *(void *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_featureFlags] = a3;
  *(void *)&a5[OBJC_IVAR___CSDFaceTimeInviteDemuxer_serverBag] = a4;
  v12.receiver = a5;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t sub_100295214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100295228()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v1, v2, 1LL, v0);
}

uint64_t sub_10029523C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100295250()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100295264()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100295278@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8LL * *(void *)(a1 + 16) + 32;
}

  ;
}

  ;
}

uint64_t sub_1002952B4()
{
  return swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
}

uint64_t sub_1002952C0()
{
  return swift_bridgeObjectRelease(*v0);
}

uint64_t sub_1002952CC()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1002952D4()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10029534C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return v10(&a9, v12, v9, a1, v11);
}

void sub_100295364()
{
  *uint64_t v0 = v1;
}

void sub_100295370()
{
  *uint64_t v0 = v1;
}

  ;
}

  ;
}

void sub_100295394()
{
}

void sub_1002953A8()
{
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100295414()
{
  return sub_10024772C(0LL, v0, v1);
}

uint64_t sub_100295424@<X0>(uint64_t a1@<X8>)
{
  return v3(a1 + 32, v2, v1);
}

void sub_100295434()
{
}

void sub_100295440()
{
  *(void *)(v0 + 8 * sub_10028E44C(v0, v1) = v2;
}

void sub_100295454()
{
}

id sub_100295460(void *a1)
{
  return [a1 *(SEL *)(v1 + 176)];
}

uint64_t sub_100295468( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return v9(&a9, 0LL);
}

  ;
}

uint64_t sub_100295480(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1LL, 0LL);
}

uint64_t sub_10029548C()
{
  return swift_release(*(void *)(v0 + 56));
}

uint64_t sub_100295494()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1002954A0(unint64_t a1, uint64_t a2)
{
  if ((a2 & 0x10000000000LL) != 0) {
    return (a1 >> 40) & 1;
  }
  if ((a1 & 0x10000000000LL) != 0) {
    return 0LL;
  }
  if ((a2 & 0x100000000LL) != 0)
  {
    return (a1 & 0x100000000LL) != 0;
  }

  else
  {
    if ((a1 & 0x100000000LL) != 0) {
      return 0LL;
    }
    return (_DWORD)a1 == (_DWORD)a2;
  }

void sub_1002954D8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v15 = swift_allocObject(&unk_1003E5F68, 41LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = v3;
  *(_BYTE *)(v15 + 40) = a1;
  void aBlock[4] = sub_10029728C;
  uint64_t v24 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E5F80;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = swift_unknownObjectRetain(v3);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_1001E8E70();
  uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v20 = sub_1001C94D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release(v24);
  sub_1001B0FF8();
}

uint64_t sub_1002956A4(uint64_t a1, uint64_t a2)
{
  if ((v49 & 1) != 0)
  {
    sub_10020EAC8(&v43, (uint64_t)&v44);
    char v6 = v46;
  }

  else
  {
    uint64_t v2 = v47;
    int v12 = v48;
    sub_10020EAC8(&v43, (uint64_t)&v44);
    if ((v46 & 1) != 0) {
      return 0LL;
    }
    char v6 = v45;
    if (!v12)
    {
      if (v44 != (_DWORD)v2) {
        char v6 = 1;
      }
      if ((v6 & 1) != 0) {
        return 0LL;
      }
      goto LABEL_4;
    }
  }

  if ((v6 & 1) == 0) {
    return 0LL;
  }
LABEL_4:
  uint64_t v7 = *(void **)(a1 + 8);
  id v40 = *(id *)(a2 + 8);
  id v41 = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v8 = sub_100297420();
  if (v3 == v8 && v2 == v9)
  {
    sub_1001DE9FC(&v41);
    sub_1001DE9FC(&v40);
    sub_100297494();
    sub_10020EAA0(&v40);
    sub_10020EAA0(&v41);
  }

  else
  {
    uint64_t v3 = sub_1002973B8(v8, v9);
    sub_1001DE9FC(&v41);
    sub_1001DE9FC(&v40);
    swift_bridgeObjectRelease(v2);
    sub_1001B0F5C();
    sub_10020EAA0(&v40);
    sub_10020EAA0(&v41);
    uint64_t result = 0LL;
    if ((v3 & 1) == 0) {
      return result;
    }
  }

  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a2 + 16);
  if (v13)
  {
    if (!v14) {
      return 0LL;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v15 = sub_100297420();
    if (v3 == v15 && v2 == v16)
    {
      sub_100297494();
    }

    else
    {
      char v18 = sub_1002973B8(v15, v16);
      swift_bridgeObjectRelease(v2);
      sub_1001B0F5C();
      uint64_t result = 0LL;
      if ((v18 & 1) == 0) {
        return result;
      }
    }
  }

  else if (v14)
  {
    return 0LL;
  }

  uint64_t v19 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) == 1LL)
  {
    if (v19 == 1) {
      goto LABEL_34;
    }
LABEL_32:
    uint64_t v20 = sub_100297454();
    sub_1001DE900(v20, v21, v22);
    uint64_t v23 = sub_100297468();
    sub_1001DE900(v23, v24, v25);
    uint64_t v26 = sub_100297454();
    sub_1001DE740(v26, v27, v28);
    uint64_t v29 = sub_100297468();
    sub_1001DE740(v29, v30, v31);
    return 0LL;
  }

  if (v19 == 1) {
    goto LABEL_32;
  }
  if ((sub_1001FD038( *(void *)(a1 + 24) & 0xFFFFFFFF00000001LL,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(_BYTE *)(a1 + 48) & 1,  *(void *)(a2 + 24) & 0xFFFFFFFF00000001LL,  *(void *)(a2 + 32),  *(void *)(a2 + 40)) & 1) == 0) {
    return 0LL;
  }
LABEL_34:
  if (*(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
    || ((*(unsigned __int8 *)(a1 + 50) ^ *(unsigned __int8 *)(a2 + 50)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 51) ^ *(unsigned __int8 *)(a2 + 51)) & 1) != 0
    || *(void *)(a1 + 64) != *(void *)(a2 + 64)
    || ((*(unsigned __int8 *)(a1 + 53) ^ *(unsigned __int8 *)(a2 + 53)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 54) ^ *(unsigned __int8 *)(a2 + 54)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 52) ^ *(unsigned __int8 *)(a2 + 52)) & 1) != 0)
  {
    return 0LL;
  }

  uint64_t v32 = *(void *)(a1 + 72);
  if (v32)
  {
    uint64_t v33 = objc_opt_self(&OBJC_CLASS___NSObject);
    id v34 = (void *)swift_dynamicCastObjCClass(v32, v33);
    if (v34) {
      swift_unknownObjectRetain(v32);
    }
  }

  else
  {
    id v34 = 0LL;
  }

  uint64_t v35 = *(void *)(a2 + 72);
  if (v35)
  {
    uint64_t v36 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t v37 = (void *)swift_dynamicCastObjCClass(v35, v36);
    if (v37) {
      swift_unknownObjectRetain(v35);
    }
  }

  else
  {
    unint64_t v37 = 0LL;
  }

  if (v34)
  {
    if (v37)
    {
      sub_1001B4B94(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
      id v38 = v34;
      char v39 = static NSObject.== infix(_:_:)(v38, v37);

      if ((v39 & 1) != 0) {
        goto LABEL_58;
      }
    }

    else
    {
    }

    return 0LL;
  }

  if (v37)
  {

    return 0LL;
  }

void sub_100295A4C(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  id v6 = sub_1002967E8(a1);
  if (v6)
  {
    id v7 = v6;
    unsigned int v8 = [a1 callSubType];
    id v9 = objc_allocWithZone(&OBJC_CLASS___TUFeatureFlags);
    id v177 = v7;
    id v10 = [v9 init];
    unint64_t v11 = sub_1002968AC(a1);
    id v192 = sub_1002969B4(a1);
    id v169 = v192;
    id v12 = a1;
    LODWORD(v153) = [v12 isOutgoing];
    id v13 = v12;
    uint64_t v183 = sub_100294B6C(v13, (SEL *)&selRef_sourceIdentifier);
    uint64_t v15 = v14;
    unsigned __int8 v191 = sub_1001DCF70(v183, "ignoresBluetoothDeviceUID");

    uint64_t v171 = v15;
    uint64_t v16 = swift_bridgeObjectRetain(v15);
    unsigned int v17 = sub_1001DCF70(v16, "wantsHoldMusic");
    uint64_t v190 = (v11 >> 40) & 1;
    unint64_t v180 = v11;
    uint64_t v18 = sub_100296A50(v13, v11 & 0xFFFFFFFFFFLL | (v190 << 40));
    char v19 = v18;
    id v165 = sub_1001DCF70(v18, "audioInterruptionOperationMode");
    if ((sub_10027C538((uint64_t)v165) & 1) != 0)
    {
      uint64_t v20 = 0LL;
      uint64_t v163 = 0LL;
    }

    else
    {
      swift_unknownObjectRetain(v13);
      uint64_t v163 = &off_1003E5E80;
      uint64_t v20 = (uint64_t)v13;
    }

    uint64_t v21 = swift_unknownObjectRetain(v20);
    HIDWORD(v158) = sub_1001DCF70(v21, "mixesVoiceWithMedia");
    id v22 = [v10 expanseBTSwitchingEnabled];
    uint64_t v147 = v10;
    if ((_DWORD)v22)
    {
      id v22 = sub_1001DCF70((uint64_t)v22, "bluetoothAudioFormat");
      LODWORD(v158) = v22 == (id)1;
    }

    else
    {
      LODWORD(v158) = 0;
    }

    id v23 = sub_1001DCF70((uint64_t)v22, "isConversation");
    HIDWORD(v156) = (_DWORD)v23;
    id v24 = sub_1001DCF70((uint64_t)v23, "mediaPlaybackOnExternalDevice");
    char v189 = (char)v24;
    uint64_t v25 = (uint64_t)sub_1001DCF70((uint64_t)v24, "prefersToPlayDuringWombat");
    char v188 = v25;
    uint64_t v161 = v20;
    if ((a2 & 1) != 0)
    {
      char v26 = 1;
    }

    else
    {
      uint64_t v25 = sub_10027C538(v25);
      char v26 = v25 ^ 1;
    }

    id v27 = sub_1001DCF70(v25, "screenShareAttributes");
    uint64_t v175 = a3;
    HIDWORD(v167) = v17;
    else {
      LOBYTE(v31) = 1;
    }
    char v179 = v31;
    id v32 = sub_1002973A4();
    unsigned int v33 = [v32 isSystemProvider];

    HIDWORD(v173) = v8;
    if (v33)
    {
      BSAuditTokenForCurrentProcess(v227);
      uint64_t v34 = v227[0];
      uint64_t v35 = v227[1];
      uint64_t v184 = v227[3];
      uint64_t v185 = v227[2];
      uint64_t v36 = objc_opt_self(&OBJC_CLASS___CSDRelayCall);
      uint64_t v37 = swift_dynamicCastObjCClass(v13, v36);
      uint64_t v186 = v35;
      uint64_t v187 = v34;
      if (v37)
      {
        id v38 = (void *)v37;
        id v39 = v13;
        id v40 = [v38 localProvider];
        if (v40
          && (id v41 = v40,
              id v42 = [v40 bundleIdentifier],
              v41,
              v42))
        {
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          uint64_t v193 = v44;
        }

        else
        {

          uint64_t v43 = 0LL;
          uint64_t v193 = 0LL;
        }
      }

      else
      {
        id v45 = sub_1002973A4();
        uint64_t v43 = sub_1002AB314(v45);
        uint64_t v193 = v46;
      }
    }

    else
    {
      uint64_t v43 = 0LL;
      uint64_t v193 = 0LL;
      uint64_t v186 = 0LL;
      uint64_t v187 = 0LL;
      uint64_t v184 = 0LL;
      uint64_t v185 = 0LL;
    }

    char v47 = v19 & 1;
    char v48 = v33 ^ 1;
    id v49 = sub_1002973A4();
    unsigned __int8 v50 = [v49 isFaceTimeProvider];

    if ((v50 & 1) != 0)
    {
      unsigned __int8 v51 = 1;
    }

    else
    {
      id v52 = sub_1002973A4();
      unsigned __int8 v51 = [v52 isTelephonyProvider];
    }

    id v53 = sub_1002973A4();
    unsigned int v54 = [v53 isFaceTimeProvider];

    unsigned __int8 v181 = v51;
    char v182 = v48;
    if (v54
      && (id v55 = sub_1001DCF70((uint64_t)v55, "isConversation"), (_DWORD)v55)
      && (id v63 = [(id)objc_opt_self(TUCallCenter) sharedInstance],
          id v64 = [v63 activeConversationForCall:v13],
          v63,
          v64))
    {
      char v65 = v47;
      id v66 = sub_1002973E4();
      unsigned __int8 v67 = [v66 isDefaultProvider];

      if ((v67 & 1) != 0
        || (id v68 = sub_1002973E4(),
            sub_100294B6C(v68, (SEL *)&selRef_bundleIdentifier),
            uint64_t v70 = v69,
            swift_bridgeObjectRelease(v69),
            !v70))
      {
        uint64_t v82 = v193;

        sub_100297408(v108, v109, v110, v111, v112, v113, v114, v115, v132, v137, v142, v147);
        sub_1002973F0( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v135,  v140,  v145,  v151,  v153,  v156,  v158,  v161,  (uint64_t)v163,  (uint64_t)v165,  v167,  (uint64_t)v169,  v171,  v173,  v175,  v177);
      }

      else
      {
        id v71 = sub_1002973E4();
        id v72 = [v71 bundleIdentifier];

        if (v72)
        {
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
          uint64_t v82 = v81;

          sub_100297408(v83, v84, v85, v86, v87, v88, v89, v90, v132, v137, v142, v147);
          sub_1002973F0( v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v133,  v138,  v143,  v148,  v153,  v156,  v158,  v161,  (uint64_t)v163,  (uint64_t)v165,  v167,  (uint64_t)v169,  v171,  v173,  v175,  v177);

          swift_bridgeObjectRelease(v193);
        }

        else
        {
          sub_100297408(v73, v74, v75, v76, v77, v78, v79, v80, v132, v137, v142, v147);

          sub_1002973F0( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v136,  v141,  v146,  v152,  v153,  v156,  v158,  v161,  (uint64_t)v163,  (uint64_t)v165,  v167,  (uint64_t)v169,  v171,  v173,  v175,  v177);
          swift_bridgeObjectRelease(v193);
          uint64_t v43 = 0LL;
          uint64_t v82 = 0LL;
        }
      }

      unsigned int v107 = v154;
      char v47 = v65;
    }

    else
    {
      uint64_t v82 = v193;
      sub_100297408((uint64_t)v55, v56, v57, v58, v59, v60, v61, v62, v132, v137, v142, v147);
      sub_1002973F0( v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v134,  v139,  v144,  v149,  v153,  v156,  v158,  v161,  (uint64_t)v163,  (uint64_t)v165,  v167,  (uint64_t)v169,  v171,  v173,  v175,  v177);

      unsigned int v107 = v155;
    }

    BYTE4(__src[0]) = BYTE4(v180);
    LODWORD(__src[0]) = v180;
    BYTE5(__src[0]) = v190;
    uint64_t v150 = v107;
    __src[1] = v178;
    __src[2] = v192;
    __src[3] = v107;
    __src[4] = v183;
    __src[5] = v172;
    LOBYTE(__src[6]) = v191;
    BYTE1(__src[6]) = v47;
    BYTE2(__src[6]) = v26 & 1;
    BYTE3(__src[6]) = v168;
    BYTE4(__src[6]) = v189;
    BYTE5(__src[6]) = v160;
    BYTE6(__src[6]) = v157;
    HIBYTE(__src[6]) = v188;
    LOBYTE(__src[7]) = v159;
    char __src[8] = v166;
    __src[9] = v162;
    __src[10] = v164;
    __src[11] = v187;
    __src[12] = v186;
    __src[13] = v185;
    __src[14] = v184;
    LOBYTE(__src[15]) = v182;
    __src[16] = v43;
    __src[17] = v82;
    LOBYTE(__src[18]) = v181;
    BYTE1(__src[18]) = v179;
    HIDWORD(__src[18]) = v174;
    LOBYTE(__src[19]) = 0;
    sub_1001DE884((uint64_t)__src);

    swift_bridgeObjectRelease(v172);
    swift_unknownObjectRelease(v162);
    memcpy(__dst, __src, 0x99uLL);
    ScreenSharingActivityManager.carPlayStartedConnectionAttempt()();
    char v197 = BYTE4(v180);
    int v196 = v180;
    char v198 = v190;
    uint64_t v199 = v178;
    id v200 = v192;
    uint64_t v201 = v150;
    uint64_t v202 = v183;
    uint64_t v203 = v172;
    unsigned __int8 v204 = v191;
    char v205 = v47;
    char v206 = v26 & 1;
    char v207 = v168;
    char v208 = v189;
    char v209 = v160;
    char v210 = v157;
    char v211 = v188;
    char v212 = v159;
    uint64_t v213 = v166;
    uint64_t v214 = v162;
    uint64_t v215 = v164;
    uint64_t v216 = v187;
    uint64_t v217 = v186;
    uint64_t v218 = v185;
    uint64_t v219 = v184;
    char v220 = v182;
    uint64_t v221 = v43;
    uint64_t v222 = v82;
    unsigned __int8 v223 = v181;
    char v224 = v179;
    int v225 = v174;
    char v226 = 0;
    sub_10020EB3C((uint64_t)&v196);
    sub_1001DEA24((uint64_t)__dst, (uint64_t)v227, (uint64_t *)&unk_10044B7C0);
    a3 = v176;
  }

  else
  {

    sub_1001DE6BC(&v196);
    sub_1001DEA24((uint64_t)&v196, (uint64_t)v227, (uint64_t *)&unk_10044B7C0);
  }

  sub_1001DEA24((uint64_t)v227, a3, (uint64_t *)&unk_10044B7C0);
  sub_1001B0FF8();
}

void sub_1002961F4(void *a1, Swift::Bool a2)
{
  Class isa = NSNumber.init(BOOLeanLiteral:)(a2).super.super.isa;
  [a1 handleAudioSessionActivationStateChangedTo:isa];
}

uint64_t destroy for AudioInterruptionDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != 1) {
    swift_bridgeObjectRelease(v2);
  }
  swift_unknownObjectRelease(*(void *)(a1 + 72));
  return swift_bridgeObjectRelease(*(void *)(a1 + 136));
}

uint64_t initializeWithCopy for AudioInterruptionDescriptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  id v7 = v4;
  id v8 = v5;
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }

  else
  {
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    swift_bridgeObjectRetain(v6);
  }

  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a2 + 50);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_WORD *)(a1 + 55) = *(_WORD *)(a2 + 55);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_unknownObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for AudioInterruptionDescriptor(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  id v7 = v5;

  id v8 = *(void **)(a1 + 16);
  __int128 v9 = (void *)*((void *)a2 + 2);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
  id v10 = v9;

  unint64_t v11 = (__int128 *)(a1 + 24);
  id v12 = (__int128 *)(a2 + 6);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *((void *)a2 + 5);
  if (v13 == 1)
  {
    if (v14 == 1)
    {
      __int128 v15 = *v12;
      *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)a2 + 33);
      __int128 *v11 = v15;
    }

    else
    {
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_DWORD *)(a1 + 28) = a2[7];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      uint64_t v17 = *((void *)a2 + 5);
      *(void *)(a1 + 40) = v17;
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain(v17);
    }
  }

  else if (v14 == 1)
  {
    sub_100270FCC(a1 + 24);
    __int128 v16 = *(_OWORD *)((char *)a2 + 33);
    __int128 *v11 = *v12;
    *(_OWORD *)(a1 + 33) = v16;
  }

  else
  {
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_DWORD *)(a1 + 28) = a2[7];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    uint64_t v18 = *((void *)a2 + 5);
    *(void *)(a1 + 40) = v18;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v13);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  }

  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_BYTE *)(a1 + 50) = *((_BYTE *)a2 + 50);
  *(_BYTE *)(a1 + 51) = *((_BYTE *)a2 + 51);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_BYTE *)(a1 + 53) = *((_BYTE *)a2 + 53);
  *(_BYTE *)(a1 + 54) = *((_BYTE *)a2 + 54);
  *(_BYTE *)(a1 + 55) = *((_BYTE *)a2 + 55);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  uint64_t v19 = *((void *)a2 + 9);
  uint64_t v20 = *((void *)a2 + 10);
  uint64_t v21 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v19;
  swift_unknownObjectRetain(v19);
  swift_unknownObjectRelease(v21);
  *(void *)(a1 + 80) = v20;
  __int128 v22 = *(_OWORD *)(a2 + 22);
  __int128 v23 = *(_OWORD *)(a2 + 26);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v23;
  *(_OWORD *)(a1 + 88) = v22;
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  uint64_t v24 = *((void *)a2 + 17);
  uint64_t v25 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_BYTE *)(a1 + 145) = *((_BYTE *)a2 + 145);
  int v26 = a2[37];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_DWORD *)(a1 + 148) = v26;
  return a1;
}

void *initializeWithTake for AudioInterruptionDescriptor(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x99uLL);
}

uint64_t assignWithTake for AudioInterruptionDescriptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  int v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6 != 1)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7 != 1)
    {
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease(v6);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      goto LABEL_6;
    }

    sub_100270FCC(a1 + 24);
  }

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
LABEL_6:
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 55);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_unknownObjectRelease(v10);
  *(void *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioInterruptionDescriptor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 153))
    {
      LODWORD(sub_1001B03C0(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_1001B03C0(v1, v0, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_1001B03C0(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioInterruptionDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 153) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AudioInterruptionDescriptor()
{
  return &type metadata for AudioInterruptionDescriptor;
}

id sub_1002967C4()
{
  return [v0 queue];
}

id sub_1002967E8(void *a1)
{
  if ((sub_10027C538((uint64_t)a1) & 1) != 0)
  {
    unint64_t v2 = (id *)&AVAudioSessionCategoryRingtone;
LABEL_10:
    id v5 = *v2;
    id v6 = *v2;
    return v5;
  }

  if ([a1 audioInterruptionProviderType] == (id)1 && objc_msgSend(a1, "isTTY"))
  {
    unint64_t v2 = (id *)&AVAudioSessionCategoryTTYCall;
    goto LABEL_10;
  }

  sub_100283B90(a1);
  if (!v3)
  {
    if ([a1 audioInterruptionProviderType] != (id)1) {
      return 0LL;
    }
    unint64_t v2 = (id *)&AVAudioSessionCategoryPhoneCall;
    goto LABEL_10;
  }

  uint64_t v4 = v3;
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1002968AC(void *a1)
{
  if ((sub_10027C538((uint64_t)a1) & 1) != 0)
  {
LABEL_2:
    unsigned __int8 v2 = 0;
    unint64_t v3 = (unint64_t)&_mh_execute_header;
    return v3 | ((unint64_t)v2 << 40);
  }

  id v4 = [a1 audioInterruptionProviderType];
  if (v4 == (id)2)
  {
    unint64_t v3 = 0LL;
    unsigned __int8 v2 = 1;
    return v3 | ((unint64_t)v2 << 40);
  }

  if (v4 == (id)1)
  {
    id v5 = [a1 provider];
    unsigned __int8 v6 = [v5 isTelephonyProvider];

    if ((v6 & 1) == 0)
    {
      id v7 = [a1 provider];
      unsigned int v8 = [v7 audioSessionID];

      unsigned __int8 v2 = 0;
      unint64_t v3 = v8;
      return v3 | ((unint64_t)v2 << 40);
    }

    goto LABEL_2;
  }

  id v10 = v4;
  type metadata accessor for CSDAudioInterruptionProviderType(0LL);
  id v12 = v10;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v11, &v12, v11, &type metadata for Int);
  __break(1u);
  return result;
}

id sub_1002969B4(void *a1)
{
  if ((sub_10027C538((uint64_t)a1) & 1) != 0)
  {
    unsigned __int8 v2 = (id *)&AVAudioSessionModeDefault;
LABEL_6:
    id v3 = *v2;
    id v4 = *v2;
    return v3;
  }

  if ([a1 wantsHoldMusic] && objc_msgSend(a1, "audioInterruptionProviderType") == (id)1)
  {
    unsigned __int8 v2 = (id *)&AVAudioSessionModeLocatePhone;
    goto LABEL_6;
  }

  sub_100283B9C(a1);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  id v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v3;
}

uint64_t sub_100296A50(void *a1, uint64_t a2)
{
  if ((a2 & 0x10100000000LL) != 0) {
    return 1LL;
  }
  else {
    return objc_msgSend(a1, "isOnHold", v2, v3) ^ 1;
  }
}

uint64_t sub_100296A84()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(16LL);
  sub_1002973B0(v2, v3, v4, v5, v6, v7, v8, v9, 0LL, 0xE000000000000000LL);
  strcpy((char *)v110, "providerType=");
  HIWORD(v110[1]) = -4864;
  sub_10020EAC8((int *)v0, (uint64_t)&v115);
  sub_10020EAC8(&v115, (uint64_t)v114);
  v10._countAndFlagsBits = String.init<A>(reflecting:)( v114,  &type metadata for AudioInterruptionDescriptor.ProviderType);
  String.append(_:)(v10);
  sub_1001B0F5C();
  sub_100297368();
  sub_1002973D4();
  v11._object = (void *)v110[1];
  String.append(_:)(v11);
  sub_1001B0F5C();
  v110[0] = 0LL;
  v110[1] = 0xE000000000000000LL;
  sub_1002974A0(0x79726F6765746163LL);
  v114[0] = *(void *)(v0 + 8);
  type metadata accessor for Category(0LL);
  sub_10029747C( v12,  v13,  v12,  (uint64_t)&type metadata for DefaultStringInterpolation,  (uint64_t)&protocol witness table for DefaultStringInterpolation,  v14,  v15,  v16,  0LL,  0xE000000000000000LL,  v111,  v112,  v113,  v114[0]);
  sub_100297368();
  sub_100297430();
  sub_100297410();
  sub_1001B0F5C();
  sub_1001B0F28();
  v110[0] = 0x3D65646F6DLL;
  v110[1] = 0xE500000000000000LL;
  uint64_t v17 = *(void **)(v0 + 16);
  if (v17)
  {
    v114[0] = *(void *)(v0 + 16);
    type metadata accessor for Mode(0LL);
    uint64_t v19 = v18;
    id v20 = v17;
    uint64_t v21 = String.init<A>(reflecting:)(v114, v19);
    unint64_t v23 = v22;
  }

  else
  {
    unint64_t v23 = 0xE300000000000000LL;
    uint64_t v21 = 7104878LL;
  }

  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v21);
  sub_1001D9020();
  sub_100297368();
  sub_100297430();
  sub_100297410();
  sub_1001B0F5C();
  sub_1001B0F28();
  uint64_t v26 = v110[0];
  uint64_t v25 = v110[1];
  _StringGuts.grow(_:)(21LL);
  sub_1002973B0(v27, v28, v29, v30, v31, v32, v33, v34, 0LL, 0xE000000000000000LL);
  v114[0] = 0xD000000000000012LL;
  v114[1] = 0x8000000100377040LL;
  uint64_t v35 = *(void *)(v1 + 40);
  if (v35 != 1)
  {
    uint64_t v36 = *(void *)(v1 + 32);
    uint64_t v37 = HIDWORD(*(void *)(v1 + 24));
    char v38 = *(_BYTE *)(v1 + 48) & 1;
    LOBYTE(v110[0]) = *(_BYTE *)(v1 + 24) & 1;
    HIDWORD(v110[0]) = v37;
    v110[1] = v36;
    uint64_t v111 = v35;
    LOBYTE(v112) = v38;
    swift_bridgeObjectRetain(v35);
    String.init<A>(reflecting:)(v110, &type metadata for AudioActivationContext);
  }

  sub_100297488();
  sub_1001D9020();
  v39._countAndFlagsBits = 32LL;
  v39._object = (void *)0xE100000000000000LL;
  String.append(_:)(v39);
  v110[0] = v26;
  v110[1] = v25;
  swift_bridgeObjectRetain(v25);
  sub_100297488();
  sub_1001B0F5C();
  sub_1001D9020();
  uint64_t v40 = v110[0];
  uint64_t v41 = v110[1];
  v110[0] = 0LL;
  v110[1] = 0xE000000000000000LL;
  sub_1002974A0(0x797469726F697270LL);
  sub_10029747C( v42,  v43,  (uint64_t)&type metadata for AudioInterruptionPriority,  (uint64_t)&type metadata for DefaultStringInterpolation,  (uint64_t)&protocol witness table for DefaultStringInterpolation,  v44,  v45,  v46,  v110[0],  v110[1],  v111,  v112,  v113,  *(_BYTE *)(v1 + 49));
  sub_100297368();
  v110[0] = v40;
  v110[1] = v41;
  swift_bridgeObjectRetain(v41);
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  v110[0] = 0LL;
  v110[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  sub_1002973B0(v47, v48, v49, v50, v51, v52, v53, v54, v110[0], v110[1]);
  sub_1002973D4();
  if ((*(_BYTE *)(v1 + 50) & 1) != 0) {
    uint64_t v55 = 1702195828LL;
  }
  else {
    uint64_t v55 = 0x65736C6166LL;
  }
  sub_100297398(v55);
  sub_1001B0F28();
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  sub_1002973F8();
  _StringGuts.grow(_:)(18LL);
  sub_1002973B0(v56, v57, v58, v59, v60, v61, v62, v63, v110[0], v110[1]);
  v110[0] = 0x6C6F4873746E6177LL;
  v110[1] = 0xEF3D636973754D64LL;
  if ((*(_BYTE *)(v1 + 51) & 1) != 0) {
    uint64_t v64 = 1702195828LL;
  }
  else {
    uint64_t v64 = 0x65736C6166LL;
  }
  sub_100297398(v64);
  sub_1001B0F28();
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  sub_1002973F8();
  _StringGuts.grow(_:)(17LL);
  v65._countAndFlagsBits = 0x6F6974617265706FLL;
  v65._object = (void *)0xEE003D65646F4D6ELL;
  String.append(_:)(v65);
  v114[0] = *(void *)(v1 + 64);
  type metadata accessor for CSDAudioInterruptionOperationMode(0LL);
  _print_unlocked<A, B>(_:_:)(v114, v110);
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  strcpy((char *)v110, "wantsA2DP=");
  BYTE3(v110[1]) = 0;
  HIDWORD(v110[1]) = -369098752;
  if ((*(_BYTE *)(v1 + 56) & 1) != 0) {
    uint64_t v66 = 1702195828LL;
  }
  else {
    uint64_t v66 = 0x65736C6166LL;
  }
  sub_100297398(v66);
  sub_1001B0F28();
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  sub_1002973F8();
  _StringGuts.grow(_:)(30LL);
  sub_1002973B0(v67, v68, v69, v70, v71, v72, v73, v74, v110[0], v110[1]);
  sub_1002973D4();
  if ((*(_BYTE *)(v1 + 54) & 1) != 0) {
    uint64_t v75 = 1702195828LL;
  }
  else {
    uint64_t v75 = 0x65736C6166LL;
  }
  sub_100297398(v75);
  sub_1001B0F28();
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  sub_100297440();
  _StringGuts.grow(_:)(33LL);
  sub_1002973B0(v76, v77, v78, v79, v80, v81, v82, v83, v110[0], v110[1]);
  v110[0] = 0xD00000000000001ELL;
  v110[1] = 0x80000001003770B0LL;
  if ((*(_BYTE *)(v1 + 52) & 1) != 0) {
    uint64_t v84 = 1702195828LL;
  }
  else {
    uint64_t v84 = 0x65736C6166LL;
  }
  sub_100297398(v84);
  sub_1001B0F28();
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  sub_100297440();
  _StringGuts.grow(_:)(34LL);
  sub_1002973B0(v85, v86, v87, v88, v89, v90, v91, v92, v110[0], v110[1]);
  sub_1002973D4();
  if ((*(_BYTE *)(v1 + 145) & 1) != 0) {
    uint64_t v93 = 1702195828LL;
  }
  else {
    uint64_t v93 = 0x65736C6166LL;
  }
  sub_100297398(v93);
  sub_1001B0F28();
  sub_100297368();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  v110[0] = 0LL;
  v110[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  sub_1002973B0(v94, v95, v96, v97, v98, v99, v100, v101, v110[0], v110[1]);
  v110[0] = 0xD00000000000001ELL;
  v110[1] = 0x80000001003770F0LL;
  if ((*(_BYTE *)(v1 + 55) & 1) != 0) {
    uint64_t v102 = 1702195828LL;
  }
  else {
    uint64_t v102 = 0x65736C6166LL;
  }
  sub_100297398(v102);
  sub_1001B0F28();
  sub_100297388();
  sub_100297378();
  sub_1001D9020();
  sub_1001E43E0();
  uint64_t v103 = v110[0];
  uint64_t v104 = v110[1];
  v110[0] = 0LL;
  v110[1] = 0xE000000000000000LL;
  v105._countAndFlagsBits = 0x546275536C6C6163LL;
  v105._object = (void *)0xEC0000003D657079LL;
  String.append(_:)(v105);
  sub_1001DEA24(v1 + 148, (uint64_t)v114, &qword_1004480C8);
  sub_1001DEA24((uint64_t)v114, (uint64_t)&v113, &qword_1004480C8);
  sub_1001AFF14(&qword_1004480C8);
  _print_unlocked<A, B>(_:_:)(&v113, v110);
  uint64_t v106 = v110[0];
  unsigned int v107 = (void *)v110[1];
  v110[0] = v103;
  v110[1] = v104;
  swift_bridgeObjectRetain(v104);
  v108._countAndFlagsBits = v106;
  v108._object = v107;
  String.append(_:)(v108);
  sub_1001D9020();
  swift_bridgeObjectRelease(v107);
  return v110[0];
}

uint64_t sub_100297198()
{
  return sub_100296A84();
}

uint64_t sub_1002971D0(void *__src, const void *a2)
{
  return sub_1002956A4((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t sub_100297224(unsigned int *a1, unsigned int *a2)
{
  return sub_1002954A0( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40));
}

uint64_t sub_100297268()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

void sub_10029728C()
{
}

uint64_t sub_10029729C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002972AC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t initializeBufferWithCopyOfBuffer for AudioInterruptionDescriptor.ProviderType( uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioInterruptionDescriptor.ProviderType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AudioInterruptionDescriptor.ProviderType( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 6) = v3;
  return result;
}

uint64_t sub_100297314(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100297330(uint64_t result, int a2)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 5) = v2;
  return result;
}

ValueMetadata *type metadata accessor for AudioInterruptionDescriptor.ProviderType()
{
  return &type metadata for AudioInterruptionDescriptor.ProviderType;
}

void sub_100297368()
{
  v0._countAndFlagsBits = 32LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

void sub_100297378()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100297388()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_100297398(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

id sub_1002973A4()
{
  return [v0 *(SEL *)(v1 + 1856)];
}

uint64_t sub_1002973B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

uint64_t sub_1002973B8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

  ;
}

id sub_1002973E4()
{
  return [v0 *(SEL *)(v1 + 1856)];
}

void sub_1002973F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
}

  ;
}

void sub_100297408( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_100297410()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100297420()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_100297430()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_100297454()
{
  return v0;
}

uint64_t sub_100297468()
{
  return v0;
}

uint64_t sub_10029747C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return _print_unlocked<A, B>(_:_:)(&a14, &a9);
}

void sub_100297488()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100297494()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

void sub_1002974A0(uint64_t a1)
{
  unint64_t v1 = 0xE90000000000003DLL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1002974AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_10044C1D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_10027E070((uint64_t)v6, v8, v9, v7);
  Swift::String v10 = (void *)sub_10029A254((uint64_t)&unk_1003E60A0);
  _OWORD v10[2] = 0LL;
  v10[3] = 0LL;
  v10[4] = a1;
  void v10[5] = a2;
  Swift::String v11 = (void *)sub_10029A254((uint64_t)&unk_1003E60C8);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = &unk_10044C1E0;
  void v11[5] = v10;
  uint64_t v12 = sub_100299B10((uint64_t)v6, (uint64_t)&unk_10044C1F0, (uint64_t)v11);
  return swift_release(v12);
}

id sub_100297570()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  Swift::String v2 = (void *)BlastDoorInstanceTypeKnownSender;
  uint64_t v3 = (objc_class *)type metadata accessor for MessagesBlastDoorInterface(0LL);
  objc_allocWithZone(v3);
  uint64_t v4 = v0;
  uint64_t v5 = MessagesBlastDoorInterface.init(with:)(v2);
  uint64_t v6 = (uint64_t *)&v4[OBJC_IVAR___CSDSecureImageTranscoder_blastDoor];
  void v6[3] = (uint64_t)v3;
  v6[4] = (uint64_t)&off_1003E6058;
  uint64_t *v6 = v5;

  v8.receiver = v4;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_100297634(uint64_t a1, uint64_t a2)
{
  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  uint64_t v4 = sub_1001AFF14(&qword_10044C1D0);
  v3[23] = sub_10029A17C(*(void *)(v4 - 8));
  uint64_t v5 = sub_10020F508();
  _BYTE v3[24] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[25] = v6;
  v3[26] = *(void *)(v6 + 64);
  v3[27] = sub_10029A244();
  v3[28] = sub_10029A244();
  v3[29] = sub_10029A244();
  sub_10029A1E8();
  return sub_10029A150();
}

uint64_t sub_1002976E0()
{
  if (qword_100446908 != -1) {
    swift_once(&qword_100446908, sub_100258908);
  }
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v0[30] = sub_1001B0D98(v5, (uint64_t)qword_100454138);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[31] = v6;
  uint64_t v7 = v6(v1, v2, v3);
  Swift::String v10 = (os_log_s *)Logger.logObject.getter(v7, v8, v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  BOOL v12 = sub_10029A20C(v11);
  uint64_t v13 = v0[28];
  if (v12)
  {
    uint64_t v14 = v0[27];
    uint64_t v15 = v0[24];
    uint64_t v25 = v0[25];
    uint64_t v16 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v17 = sub_1001B0E78(32LL);
    uint64_t v26 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    v6(v14, v13, v15);
    uint64_t v18 = String.init<A>(reflecting:)(v14, v15);
    unint64_t v20 = v19;
    v0[19] = sub_1001D7CF0(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v21(v13, v15);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  (os_log_type_t)v1,  "Attempting to generate preview of image after writing to URL: %s",  v16,  0xCu);
    swift_arrayDestroy(v17, 1LL);
    sub_1001B0E60(v17);
    sub_1001B0E60((uint64_t)v16);
  }

  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8LL);
    v21(v0[28], v0[24]);
  }

  v0[32] = v21;
  Data.write(to:options:)(v0[29], 0LL, v0[20], v0[21]);
  sub_1001B204C( (void *)(v0[22] + OBJC_IVAR___CSDSecureImageTranscoder_blastDoor),  *(void *)(v0[22] + OBJC_IVAR___CSDSecureImageTranscoder_blastDoor + 24));
  unint64_t v22 = (void *)swift_task_alloc(dword_10044C214);
  v0[33] = v22;
  *unint64_t v22 = v0;
  v22[1] = sub_100297A1C;
  sub_10029A18C();
  return sub_1002990A0(v23);
}

uint64_t sub_100297A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  void v4[10] = v3;
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = v2;
  uint64_t v5 = v4[33];
  v4[34] = v2;
  swift_task_dealloc(v5);
  sub_10029A1E8();
  return sub_10029A150();
}

uint64_t sub_100297AC0()
{
  id v1 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  *(void *)(v0 + 144) = 0LL;
  unsigned int v5 = sub_10029A1A8(v1, "removeItemAtURL:error:");

  id v6 = *(id *)(v0 + 144);
  if (!v5)
  {
    sub_1001B4C94();
    sub_1001D9294();
    sub_10029A24C();
    sub_10029A23C();
  }

  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 184);
  (*(void (**)(void, void))(v0 + 256))(*(void *)(v0 + 232), *(void *)(v0 + 192));
  sub_10029A1C8();
  sub_10029A1C0();
  sub_10029A280();
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v7);
}

void sub_100297BE0()
{
  if (!_TUIsInternalInstall())
  {
    id v19 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v20);
    unint64_t v22 = v21;
    *(void *)(v0 + 112) = 0LL;
    unsigned int v23 = sub_10029A1A8(v19, "removeItemAtURL:error:");

    uint64_t v16 = *(void **)(v0 + 112);
    if (!v23)
    {
LABEL_6:
      id v17 = v16;
      sub_1001B4C94();
      sub_1001D9294();
      sub_10029A24C();
      id v18 = (id)sub_10029A23C();
LABEL_9:
      swift_willThrow(v18);
LABEL_12:
      (*(void (**)(void, void))(v0 + 256))(*(void *)(v0 + 232), *(void *)(v0 + 192));
      sub_10029A21C();
      sub_10029A1C8();
      sub_10029A1C0();
      sub_10029A280();
      (*(void (**)(void))(v0 + 8))();
      return;
    }

uint64_t sub_100298010()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned __int8 v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1002995D8();
  uint64_t v9 = UUID.init()(v8);
  uint64_t v10 = UUID.uuidString.getter(v9);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  URL.appendingPathComponent(_:)(v10, v12);
  swift_bridgeObjectRelease(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100298118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[33] = a5;
  v6[34] = a6;
  v6[32] = a4;
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  v6[35] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  v6[36] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[37] = v9;
  v6[38] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  v6[39] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[40] = v11;
  v6[41] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002981F4, 0LL, 0LL);
}

uint64_t sub_1002981F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v1[32];
  sub_1001B4B94(0LL, &qword_10044C230, &OBJC_CLASS___IMUserNotificationCenter_ptr);
  uint64_t v4 = (void *)static IMUserNotificationCenter.shared.getter();
  v1[42] = v4;
  v1[7] = v1 + 28;
  v1[2] = v1;
  v1[3] = sub_1002982F8;
  uint64_t v5 = swift_continuation_init(v2, 0LL);
  v1[23] = _NSConcreteStackBlock;
  v1 += 23;
  v1[1] = 0x40000000LL;
  v1[2] = sub_100298B50;
  v1[3] = &unk_1003E6130;
  v1[4] = v5;
  [v4 addUserNotification:v3 listener:0 completionHandler:v1];
  return swift_continuation_await(v2);
}

uint64_t sub_1002982F8()
{
  return sub_10029A150();
}

id sub_100298354()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = *(void **)(v0 + 224);
  *(void *)(v0 + 344) = v2;

  if (!v2 || [v2 response])
  {
    id v3 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v4);
    uint64_t v6 = v5;
    *(void *)(v0 + 240) = 0LL;
    unsigned int v7 = sub_10029A1A8(v3, "removeItemAtURL:error:");

    id v8 = *(id *)(v0 + 240);
    if (v7)
    {
    }

    else
    {
      uint64_t v9 = v8;
      uint64_t v10 = _convertNSErrorToError(_:)(v8);

      swift_willThrow(v11);
      swift_errorRelease(v10);
    }

uint64_t sub_100298938()
{
  *uint64_t v1 = v0;
  *(void *)(v2 + 368) = *(void *)(v2 + 112);
  sub_10029A1E8();
  return sub_10029A150();
}

uint64_t sub_1002989C0()
{
  uint64_t v2 = *(void **)(v0 + 352);
  uint64_t v1 = *(void **)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 296);

  sub_10029A260(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1001B1264(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v5 = *(void *)(v0 + 232);

  swift_bridgeObjectRelease(v5);
  sub_10029A1D0();
  sub_10029A1E0();
  sub_10029A21C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100298A80(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 344);
  uint64_t v2 = *(void **)(v1 + 352);
  uint64_t v4 = *(void *)(v1 + 320);
  uint64_t v5 = *(void *)(v1 + 304);
  uint64_t v6 = *(void *)(v1 + 288);
  uint64_t v7 = *(void *)(v1 + 296);
  uint64_t v9 = *(void **)(v1 + 360);
  uint64_t v10 = *(void *)(v1 + 280);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  sub_1001B1264(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  sub_10029A1E0();
  sub_10029A1C0();
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100298B50(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  return sub_100298C60(v3, (uint64_t)a2, &qword_10044C240, (uint64_t (*)(uint64_t))&swift_continuation_resume);
}

uint64_t sub_100298B90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_100298C10(v3, (uint64_t)a3);
  }
  if (a2) {
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }
  return sub_100298C60(v3, a2, &qword_10044C238, (uint64_t (*)(uint64_t))&swift_continuation_throwingResume);
}

uint64_t sub_100298C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447B70);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  void *v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_100298C60(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = a2;
  sub_1001DEA24((uint64_t)&v7, *(void *)(*(void *)(a1 + 64) + 40LL), a3);
  return a4(a1);
}

uint64_t sub_100298CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_1001AB0AC(a1, 1LL, v6) == 1)
  {
    sub_1001BB478(a1, &qword_10044C1D0);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  if (v14 | v12)
  {
    v17[0] = 0LL;
    v17[1] = 0LL;
    unint64_t v15 = v17;
    void v17[2] = v12;
    v17[3] = v14;
  }

  else
  {
    unint64_t v15 = 0LL;
  }

  return swift_task_create(v7, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100298E34(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v9 = v8;

  v3[4] = v7;
  void v3[5] = v9;
  uint64_t v10 = (void *)swift_task_alloc(dword_10044C20C);
  v3[6] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_100298EC8;
  return sub_100297634(v7, v9);
}

uint64_t sub_100298EC8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(*v3 + 48);
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc(v7);

  sub_1001BB39C(*(void *)(v9 + 32), *(void *)(v9 + 40));
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    Class isa = 0LL;
    uint64_t v12 = (void *)v10;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB39C(a1, a2);
    uint64_t v10 = 0LL;
    uint64_t v12 = isa;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v9 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t type metadata accessor for SecureImageTranscoder()
{
  return objc_opt_self(&OBJC_CLASS___CSDSecureImageTranscoder);
}

uint64_t sub_100298FD4()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100299008()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10044C1C4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100299074;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10044C1C0 + dword_10044C1C0))(v2, v3, v4);
}

uint64_t sub_100299074()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002990A0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Image.Encoding(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  v2[9] = sub_10029A17C(v4);
  uint64_t v5 = sub_1001AFF14(&qword_10044C248);
  v2[10] = sub_10029A17C(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Image(0LL);
  v2[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[12] = v7;
  v2[13] = sub_10029A17C(v7);
  uint64_t v8 = sub_10020F508();
  v2[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[15] = v9;
  v2[16] = sub_10029A17C(v9);
  sub_10029A1E8();
  return sub_10029A150();
}

uint64_t sub_100299134()
{
  uint64_t v1 = (void *)dispatch thunk of MessagesBlastDoorInterface.generateImagePreview(for:maxPixelDimension:scale:)( *(void *)(v0 + 40),  300.0,  1.0);
  if (qword_100446908 != -1) {
    swift_once(&qword_100446908, sub_100258908);
  }
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v6, (uint64_t)qword_100454138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  id v7 = v1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v7, v8, v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 112);
  if (v12)
  {
    uint64_t v15 = sub_1001B0E78(22LL);
    uint64_t v54 = sub_1001B0E78(64LL);
    v58[0] = v54;
    *(_DWORD *)uint64_t v15 = 136315394;
    unint64_t v16 = sub_10029A054();
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    os_log_type_t type = v11;
    unint64_t v19 = v18;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1001D7CF0(v17, v18, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    sub_1001B1264(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v0 + 24) = v7;
    uint64_t v20 = type metadata accessor for _ObjCPreviewImageWrapper(0LL);
    id v21 = v7;
    uint64_t v22 = String.init<A>(reflecting:)(v0 + 24, v20);
    unint64_t v24 = v23;
    *(void *)(v0 + 32) = sub_1001D7CF0(v22, v23, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v24);

    _os_log_impl( (void *)&_mh_execute_header,  v10,  type,  "Generated preview from file: %s with result: %s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v54, 2LL);
    sub_1001B0E60(v54);
    sub_1001B0E60(v15);
  }

  else
  {
    sub_1001B1264(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  }

  uint64_t v25 = dispatch thunk of _ObjCPreviewImageWrapper.image.getter();
  os_log_type_t v26 = v25;
  uint64_t v27 = (void *)v25;
  _ObjCImageWrapper.cgImage.getter();
  sub_1001D9294();
  if (v27)
  {
    uint64_t v32 = *(void *)(v0 + 72);
    uint64_t v31 = *(void *)(v0 + 80);
    uint64_t v33 = *(void *)(v0 + 56);
    uint64_t v34 = *(void *)(v0 + 64);
    type metadata accessor for CGImage(0LL);
    v58[3] = v35;
    v58[4] = (uint64_t)&protocol witness table for CGImageRef;
    v58[0] = (uint64_t)v27;
    sub_1001A9670(v31, 1LL, 1LL, v33);
    id v36 = v27;
    Image.init(provider:maxPixelDimension:enforcedEncoding:)(v58, 0LL, 1LL, v31);
    ATXEncodingConfiguration.init(preTwiddled:lzfseCompression:)(0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v32, enum case for Image.Encoding.atx(_:), v33);
    uint64_t v44 = Image.data(using:)(v32);
    uint64_t v46 = v45;
    uint64_t v48 = *(void *)(v0 + 96);
    uint64_t v47 = *(void *)(v0 + 104);
    os_log_t log = *(os_log_t *)(v0 + 88);
    uint64_t v56 = *(void *)(v0 + 128);
    uint64_t v49 = *(void *)(v0 + 72);
    uint64_t v57 = *(void *)(v0 + 80);
    uint64_t v51 = *(void *)(v0 + 56);
    uint64_t v50 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    (*(void (**)(uint64_t, os_log_t))(v48 + 8))(v47, log);
    swift_task_dealloc(v56);
    sub_10029A1C8();
    swift_task_dealloc(v57);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v44, v46);
  }

  else
  {
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v28, v29, v30);
    os_log_type_t v39 = static os_log_type_t.error.getter(v37, v38);
    if (sub_10029A20C(v39))
    {
      uint64_t v40 = (uint8_t *)sub_1001B0E78(2LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v26, "Recevied empty image result from BlastDoor", v40, 2u);
      sub_1001B0E60((uint64_t)v40);
    }

    unint64_t v41 = sub_10029A018();
    uint64_t v42 = swift_allocError(&type metadata for BlastDoorError, v41, 0LL, 0LL);
    *uint64_t v43 = 0LL;
    swift_willThrow(v42);

    swift_task_dealloc(*(void *)(v0 + 128));
    sub_10029A21C();
    sub_10029A1C8();
    sub_10029A1C0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

void sub_1002995D8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = NSTemporaryDirectory();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  URL.init(fileURLWithPath:isDirectory:)(v5, v7, 1LL);
  swift_bridgeObjectRelease(v7);
  URL.appendingPathComponent(_:)(0xD000000000000017LL, 0x8000000100377380LL);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v8 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v9);
  os_log_type_t v11 = v10;
  id v33 = 0LL;
  LODWORD(sub_10024772C(0, v2, v3) = [v8 createDirectoryAtURL:v10 withIntermediateDirectories:1 attributes:0 error:&v33];

  if ((_DWORD)v3)
  {
    id v12 = v33;
  }

  else
  {
    id v30 = v33;
    id v13 = v33;
    uint64_t v14 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v15);
    if (qword_100446908 != -1) {
      swift_once(&qword_100446908, sub_100258908);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v16, (uint64_t)qword_100454138);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v17, v18, v19);
    os_log_type_t v22 = static os_log_type_t.error.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v24 = (void *)swift_slowAlloc(32LL, -1LL);
      id v33 = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      uint64_t v31 = v14;
      swift_errorRetain(v14);
      uint64_t v25 = sub_1001AFF14(&qword_100447B70);
      uint64_t v26 = String.init<A>(reflecting:)(&v31, v25);
      unint64_t v28 = v27;
      uint64_t v31 = sub_1001D7CF0(v26, v27, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Error creating temporary images directory: %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      swift_errorRelease(v14);
    }

    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }
  }

uint64_t sub_100299948(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10029A14C;
  return v6();
}

uint64_t sub_1002999A0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10044C1DC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10029A14C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10044C1D8 + dword_10044C1D8))(v2, v3, v4);
}

uint64_t sub_100299A18(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10029A14C;
  return v7();
}

uint64_t sub_100299A70()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100299A9C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10044C1EC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10029A14C;
  uint64_t v2 = sub_10029A224();
  return v3(v2);
}

uint64_t sub_100299B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_1001AB0AC(a1, 1LL, v6) == 1)
  {
    sub_1001BB478(a1, &qword_10044C1D0);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_1003E60F0, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    __int128 v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_10044C200, v15);
}

uint64_t sub_100299C54(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100299CB8;
  return v6(a1);
}

uint64_t sub_100299CB8()
{
  return sub_10029A1B4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100299CE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100299D04(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10044C1FC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10029A148;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10044C1F8 + dword_10044C1F8))(a1, v4);
}

id sub_100299D74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
  id v19 =  [a11 userNotificationWithIdentifier:a1 title:v15 message:v16 defaultButton:v17 alternateButton:v18 otherButton:a10];

  return v19;
}

uint64_t sub_100299E84()
{
  uint64_t v1 = sub_10020F508();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  swift_errorRelease(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100299F04()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_10020F508() - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = v0 + ((v2 + 48) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_10044C224);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100299F88;
  uint64_t v6 = sub_10029A224();
  return sub_100298118(v6, v7, v8, v9, v3, v4);
}

uint64_t sub_100299F88()
{
  return sub_10029A1B4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100299FAC(void *a1)
{
  id v2 = [a1 productBuildVersion];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

unint64_t sub_10029A018()
{
  unint64_t result = qword_10044C250;
  if (!qword_10044C250)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037F354, &type metadata for BlastDoorError);
    atomic_store(result, (unint64_t *)&qword_10044C250);
  }

  return result;
}

unint64_t sub_10029A054()
{
  unint64_t result = qword_100447E00;
  if (!qword_100447E00)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100447E00);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for BlastDoorError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for BlastDoorError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BlastDoorError()
{
  return &type metadata for BlastDoorError;
}

uint64_t sub_10029A150()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10029A15C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10029A17C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

id sub_10029A1A8(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, v3);
}

uint64_t sub_10029A1B4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10029A1C0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10029A1C8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10029A1D0()
{
  return swift_task_dealloc(*(void *)(v0 + 328));
}

uint64_t sub_10029A1E0()
{
  return swift_task_dealloc(v0);
}

  ;
}

void sub_10029A1F4()
{
  *(void *)(v1 - 8) = *v0;
}

BOOL sub_10029A20C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10029A21C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10029A224()
{
  return v0;
}

uint64_t sub_10029A23C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10029A244()
{
  return swift_task_alloc(v0);
}

uint64_t sub_10029A24C()
{
  return swift_willThrow();
}

uint64_t sub_10029A254(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

uint64_t sub_10029A260@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10029A26C()
{
  return 0x6E656E6F706D6F43LL;
}

uint64_t sub_10029A280()
{
  return swift_task_dealloc(v0);
}

id sub_10029A28C()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  NSString v2 = String._bridgeToObjectiveC()();
  sub_1001B0EB8();
  id v3 = [v1 initWithBundleIdentifier:v2];

  return v3;
}

void (*sub_10029A2F8(void *a1))(uint64_t *a1)
{
  NSString v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_10029E364(v2, (uint64_t)v5);
  return sub_10029A388;
}

void sub_10029A388(uint64_t *a1)
{
  id v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 40);
  sub_10029FFAC(*a1, *(uint64_t (**)(uint64_t, void))(*a1 + 56));
  sub_1002A000C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1002A0004();
  free(v1);
}

void (*sub_10029A3CC(void *a1, char a2))(uint64_t *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = sub_10029E480(v4, a2 & 1);
  return sub_10029A418;
}

void sub_10029A418(uint64_t *a1)
{
  id v1 = (void *)*a1;
  sub_10029FFAC(*a1, *(uint64_t (**)(uint64_t, void))(*a1 + 32));
  sub_10029FF3C(v1);
}

uint64_t sub_10029A444(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

id sub_10029A47C()
{
  return [v0 setWantsNotificationResponsesDelivered];
}

void sub_10029A490()
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  [v0 setNotificationCategories:isa];
}

void sub_10029A50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    void v8[4] = a2;
    uint64_t v9 = a3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256LL;
    uint64_t v8[2] = sub_100240708;
    void v8[3] = &unk_1003E6500;
    uint64_t v6 = _Block_copy(v8);
    uint64_t v7 = v9;
    swift_retain(a3);
    swift_release(v7);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  [v3 addNotificationRequest:a1 withCompletionHandler:v6];
  _Block_release(v6);
}

void sub_10029A5C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  NSString v10 = String._bridgeToObjectiveC()();
  if (a4)
  {
    v12[4] = a4;
    uint64_t v13 = a5;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256LL;
    void v12[2] = sub_100240708;
    v12[3] = &unk_1003E64D8;
    a4 = _Block_copy(v12);
    uint64_t v11 = v13;
    swift_retain(a5);
    swift_release(v11);
  }

  [v6 replaceContentForRequestWithIdentifier:v10 replacementContent:a3 completionHandler:a4];
  _Block_release(a4);
}

void sub_10029A68C()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v0 removeDeliveredNotificationsWithIdentifiers:isa];
}

void sub_10029A6CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR___CSDUserNotificationController_faceTimeNotificationCenter + 8);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + OBJC_IVAR___CSDUserNotificationController_faceTimeNotificationCenter));
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v5 = swift_unknownObjectRetain(a1);
  v4(v5, ObjectType, v2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR___CSDUserNotificationController_phoneNotificationCenter + 8);
  uint64_t v7 = swift_getObjectType(*(void *)(a1 + OBJC_IVAR___CSDUserNotificationController_phoneNotificationCenter));
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v9 = swift_unknownObjectRetain(a1);
  v8(v9, v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v7, v6);
  sub_10029B1F8();
  uint64_t v10 = sub_1001AFF14(&qword_10044C398);
  uint64_t inited = swift_initStackObject(v10, v131);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(_BYTE *)(inited + 32) = 0;
  *(void *)(inited + 40) = &_swiftEmptySetSingleton;
  *(_BYTE *)(inited + 48) = 1;
  *(void *)(inited + 56) = &_swiftEmptySetSingleton;
  uint64_t v12 = sub_1001AFF14(&qword_10044C3A0);
  unint64_t v13 = sub_10029FD1C();
  uint64_t v132 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for NotificationType, v12, v13);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR___CSDUserNotificationController_providers);
  uint64_t v15 = swift_beginAccess(a1 + OBJC_IVAR___CSDUserNotificationController_providers, v130, 0LL, 0LL);
  uint64_t v16 = *v14;
  uint64_t v124 = a1;
  uint64_t v116 = *(void *)(v16 + 16);
  if (!v116)
  {
LABEL_20:
    dispatch thunk of BadgeManager.startObservingForStoreBadgeCountUpdate()(v15);
    if (qword_100446950 == -1) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

  uint64_t v123 = (void *)(a1 + OBJC_IVAR___CSDUserNotificationController_providersByIdentifier);
  uint64_t v114 = TUBundleIdentifierMobilePhoneApplication;
  swift_bridgeObjectRetain(v16);
  uint64_t v17 = 0LL;
  uint64_t v115 = v16;
  while (1)
  {
    uint64_t v122 = v17;
    __int128 v125 = *(_OWORD *)(v16 + 16 * v17 + 32);
    uint64_t v18 = *(void *)(v16 + 16 * v17 + 32);
    uint64_t v19 = swift_getObjectType(v18);
    uint64_t v20 = *(uint64_t (**)(uint64_t, void))(*((void *)&v125 + 1) + 16LL);
    swift_unknownObjectRetain(v18);
    char v21 = v20(v19, *((void *)&v125 + 1));
    uint64_t v22 = sub_10029B78C(v21 & 1);
    uint64_t v119 = v23;
    uint64_t v120 = v20;
    uint64_t v121 = v22;
    if ((v20(v19, *((void *)&v125 + 1)) & 1) != 0)
    {
      swift_bridgeObjectRelease(0xE500000000000000LL);
    }

    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x656D695465636146LL,  0xE800000000000000LL,  0x656E6F6850LL,  0xE500000000000000LL,  0LL);
      uint64_t v25 = swift_bridgeObjectRelease(0xE800000000000000LL);
      if ((v24 & 1) == 0)
      {
        id v26 = (id)TUPreferredFaceTimeBundleIdentifier(v25);
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        uint64_t v117 = v28;
        uint64_t v118 = v27;

        goto LABEL_8;
      }
    }

    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    uint64_t v117 = v30;
    uint64_t v118 = v29;
LABEL_8:
    uint64_t v31 = v18;
    uint64_t v32 = v19;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, void))(*((void *)&v125 + 1) + 8LL))(v19, *((void *)&v125 + 1));
    uint64_t v35 = v34;
    swift_beginAccess(v123, &v127, 33LL, 0LL);
    uint64_t v36 = v31;
    swift_unknownObjectRetain(v31);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v123);
    uint64_t v129 = (void *)*v123;
    uint64_t v38 = v129;
    void *v123 = 0x8000000000000000LL;
    uint64_t v39 = v33;
    unint64_t v40 = sub_1001D7094(v33, v35);
    uint64_t v42 = v38[2];
    BOOL v43 = (v41 & 1) == 0;
    Swift::Int v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    unint64_t v45 = v40;
    char v46 = v41;
    sub_1001AFF14(&qword_10044C3B0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v44))
    {
      unint64_t v47 = sub_1001D7094(v39, v35);
      if ((v46 & 1) != (v48 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return;
      }

      unint64_t v45 = v47;
    }

    uint64_t v49 = v129;
    if ((v46 & 1) != 0)
    {
      uint64_t v50 = v129[7];
      swift_unknownObjectRelease(*(void *)(v50 + 16 * v45));
      *(_OWORD *)(v50 + 16 * v45) = v125;
    }

    else
    {
      v129[(v45 >> 6) + 8] |= 1LL << v45;
      uint64_t v51 = (uint64_t *)(v49[6] + 16 * v45);
      *uint64_t v51 = v39;
      v51[1] = v35;
      *(_OWORD *)(v49[7] + 16 * v45) = v125;
      uint64_t v52 = v49[2];
      BOOL v53 = __OFADD__(v52, 1LL);
      uint64_t v54 = v52 + 1;
      if (v53) {
        goto LABEL_54;
      }
      v49[2] = v54;
      swift_bridgeObjectRetain(v35);
    }

    uint64_t v55 = *v123;
    void *v123 = v49;
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v55);
    swift_endAccess(&v127);
    uint64_t v56 = swift_allocObject(&unk_1003E6358, 24LL, 7LL);
    swift_unknownObjectWeakInit(v56 + 16);
    uint64_t v57 = (void *)swift_allocObject(&unk_1003E6380, 56LL, 7LL);
    void v57[2] = v56;
    v57[3] = v118;
    v57[4] = v117;
    v57[5] = v121;
    v57[6] = v119;
    uint64_t v58 = *(void (**)(void (*)(uint64_t), void *, uint64_t, void))(*((void *)&v125 + 1) + 56LL);
    swift_retain(v56);
    swift_unknownObjectRetain(v121);
    v58(sub_10029FDA8, v57, v32, *((void *)&v125 + 1));
    swift_release(v56);
    uint64_t v59 = swift_allocObject(&unk_1003E6358, 24LL, 7LL);
    swift_unknownObjectWeakInit(v59 + 16);
    uint64_t v60 = (void *)swift_allocObject(&unk_1003E63A8, 40LL, 7LL);
    v60[2] = v59;
    v60[3] = v121;
    v60[4] = v119;
    swift_unknownObjectRetain(v121);
    swift_retain(v59);
    v61(sub_10029FDBC, v60, v32, *((void *)&v125 + 1));
    swift_release(v59);
    uint64_t v62 = swift_allocObject(&unk_1003E6358, 24LL, 7LL);
    swift_unknownObjectWeakInit(v62 + 16);
    uint64_t v63 = swift_allocObject(&unk_1003E63D0, 40LL, 7LL);
    *(void *)(v63 + swift_weakDestroy(v0 + 16) = v62;
    *(_OWORD *)(v63 + 24) = v125;
    uint64_t v64 = *(void (**)(void (*)(), uint64_t, uint64_t, void))(*((void *)&v125 + 1) + 128LL);
    swift_unknownObjectRetain(v36);
    swift_retain(v62);
    v64(sub_10029FDCC, v63, v32, *((void *)&v125 + 1));
    swift_release(v62);
    uint64_t v65 = swift_allocObject(&unk_1003E6358, 24LL, 7LL);
    swift_unknownObjectWeakInit(v65 + 16);
    uint64_t v66 = (void *)swift_allocObject(&unk_1003E63F8, 40LL, 7LL);
    v66[2] = v65;
    v66[3] = v121;
    v66[4] = v119;
    uint64_t v67 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t), void *, uint64_t, void))(*((void *)&v125 + 1) + 80LL);
    swift_unknownObjectRetain(v121);
    swift_retain(v65);
    v67(sub_10029FE08, v66, v32, *((void *)&v125 + 1));
    swift_release(v65);
    char v68 = v120(v32, *((void *)&v125 + 1));
    uint64_t v69 = sub_10029A3CC(&v127, v68 & 1);
    if (*v70)
    {
      uint64_t v71 = (*(uint64_t (**)(uint64_t, void))(*((void *)&v125 + 1) + 24LL))(v32, *((void *)&v125 + 1));
      sub_10029CC3C(v71);
    }

    ((void (*)(id *, void))v69)(&v127, 0LL);
    uint64_t v16 = v115;
    uint64_t v17 = v122 + 1;
    swift_unknownObjectRelease(v36);
    swift_unknownObjectRelease(v121);
    if (v116 == v122 + 1)
    {
      uint64_t v15 = swift_bridgeObjectRelease(v115);
      goto LABEL_20;
    }
  }

  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_once(&qword_100446950, sub_100258A88);
LABEL_21:
    uint64_t v72 = type metadata accessor for Logger(0LL);
    uint64_t v126 = sub_1001B0D98(v72, (uint64_t)qword_100454210);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v126, v73, v74);
    os_log_type_t v76 = static os_log_type_t.default.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Looking to merge badge count data", v77, 2u);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    dispatch thunk of BadgeManager.mergeBadgeCountData(_:)(1LL);
    int64_t v78 = 0LL;
    uint64_t v79 = v132;
    uint64_t v81 = v132 + 64;
    uint64_t v80 = *(void *)(v132 + 64);
    uint64_t v82 = 1LL << *(_BYTE *)(v132 + 32);
    uint64_t v83 = -1LL;
    if (v82 < 64) {
      uint64_t v83 = ~(-1LL << v82);
    }
    unint64_t v84 = v83 & v80;
    int64_t v85 = (unint64_t)(v82 + 63) >> 6;
    if ((v83 & v80) != 0)
    {
LABEL_26:
      unint64_t v86 = __clz(__rbit64(v84));
      v84 &= v84 - 1;
      unint64_t v87 = v86 | (v78 << 6);
      goto LABEL_41;
    }

void sub_10029B1F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR___CSDUserNotificationController_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v68 = sub_1001B0D98(v8, (uint64_t)qword_100454210);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v68, v9, v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Updating providers", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  id v14 = [objc_allocWithZone(CHManager) init];
  uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v16 = swift_allocObject(v15, 48LL, 7LL);
  __int128 v69 = xmmword_10037B290;
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCHServiceProviderFaceTime);
  *(void *)(v16 + 40) = v17;
  uint64_t v18 = swift_allocObject(v15, 48LL, 7LL);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = v69;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCHServiceProviderTelephony);
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v20;
  NSString v21 = (id)TUPreferredFaceTimeBundleIdentifier(v19);
  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v23 = v22;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
  }

  id v24 =  objc_msgSend( (id)objc_opt_self(CNContactStoreConfiguration),  "tu_contactStoreConfigurationForBundleIdentifier:",  v21);

  [v24 setIncludeLocalContacts:1];
  id v25 = [objc_allocWithZone(CNContactStore) initWithConfiguration:v24];
  id v26 = (objc_class *)type metadata accessor for CallHistoryNotificationProvider(0LL);
  uint64_t v27 = (char *)objc_allocWithZone(v26);
  id v28 = v7;
  id v29 = v14;
  uint64_t v30 = sub_10029F444(v28, (uint64_t)v29, (uint64_t)&off_1003DCEC0, v16, 0, v27);
  uint64_t v31 = (uint64_t *)(v1 + OBJC_IVAR___CSDUserNotificationController_providers);
  swift_beginAccess(v1 + OBJC_IVAR___CSDUserNotificationController_providers, v70, 33LL, 0LL);
  uint64_t v32 = v30;
  sub_10029E31C();
  uint64_t v33 = *(void *)(*v31 + 16);
  sub_1002AB2D8(v33);
  uint64_t v34 = *v31;
  *(void *)(v34 + swift_weakDestroy(v0 + 16) = v33 + 1;
  uint64_t v35 = v34 + 16 * v33;
  *(void *)(v35 + 32) = v32;
  *(void *)(v35 + 40) = &off_1003E3780;
  swift_endAccess(v70);

  id v36 = v28;
  id v37 = v25;
  uint64_t v38 = sub_10029EC6C(v36, v37);
  uint64_t v39 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v40 = v36;
  id v41 = v37;
  id v42 = [v39 defaultCenter];
  BOOL v43 = objc_allocWithZone((Class)type metadata accessor for FaceTimeNotificationProvider(0LL));
  Swift::Int v44 = sub_10029ED50(v40, v41, v42, v43);
  unint64_t v45 = (char *)objc_allocWithZone(v26);
  id v46 = v40;
  id v47 = v29;
  char v48 = sub_10029F444(v46, (uint64_t)v47, (uint64_t)&off_1003DCEF0, v18, 1, v45);
  swift_beginAccess(v31, v70, 33LL, 0LL);
  uint64_t v49 = *(void *)(*v31 + 16);
  if (__OFADD__(v49, 3LL))
  {
    __break(1u);
  }

  else
  {
    sub_10029EC08(v49 + 3);
    swift_unknownObjectRetain(v38);
    sub_10029E31C();
    uint64_t v50 = *(void *)(*v31 + 16);
    sub_1002AB2D8(v50);
    uint64_t v51 = *v31;
    *(void *)(v51 + swift_weakDestroy(v0 + 16) = v50 + 1;
    uint64_t v52 = v51 + 16 * v50;
    *(void *)(v52 + 32) = v38;
    *(void *)(v52 + 40) = &off_1003DF2F8;
    swift_unknownObjectRetain(v44);
    sub_10029E31C();
    uint64_t v53 = *(void *)(*v31 + 16);
    sub_1002AB2D8(v53);
    uint64_t v54 = *v31;
    *(void *)(v54 + swift_weakDestroy(v0 + 16) = v53 + 1;
    uint64_t v55 = v54 + 16 * v53;
    *(void *)(v55 + 32) = v44;
    *(void *)(v55 + 40) = &off_1003DFF48;
    swift_unknownObjectRetain(v48);
    sub_10029E31C();
    uint64_t v56 = *(void *)(*v31 + 16);
    sub_1002AB2D8(v56);
    uint64_t v57 = *v31;
    *(void *)(v57 + swift_weakDestroy(v0 + 16) = v56 + 1;
    uint64_t v58 = v57 + 16 * v56;
    *(void *)(v58 + 32) = v48;
    *(void *)(v58 + 40) = &off_1003E3780;
    swift_endAccess(v70);

    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v59, v60, v61);
    os_log_type_t v63 = static os_log_type_t.default.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Updated providers", v64, 2u);
      swift_slowDealloc(v64, -1LL, -1LL);
      uint64_t v65 = (os_log_s *)v24;
      uint64_t v66 = v47;
    }

    else
    {
      uint64_t v65 = v62;
      uint64_t v66 = v41;
      id v41 = v47;
      uint64_t v62 = (os_log_s *)v24;
    }
  }

uint64_t sub_10029B78C(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v7 = *(void **)(v1 + OBJC_IVAR___CSDUserNotificationController_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = &OBJC_IVAR___CSDUserNotificationController_faceTimeNotificationCenter;
    if ((a1 & 1) != 0) {
      uint64_t v10 = &OBJC_IVAR___CSDUserNotificationController_phoneNotificationCenter;
    }
    return swift_unknownObjectRetain(*(void *)(v1 + *v10));
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10029B874(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    id v5 = *(id *)(Strong + OBJC_IVAR___CSDUserNotificationController_callFilterController);
    uint64_t v6 = (os_log_s *)sub_1001DC81C(v5);

    if (v6)
    {
      sub_10029B9E0();

      goto LABEL_9;
    }
  }

  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_1001B0D98(v7, (uint64_t)qword_100454210);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v8, v9, v10);
  os_log_type_t v11 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v11,  "Not posting notification since it is restricted by the call filter",  v12,  2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

void sub_10029B9E0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001B1098();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B0F00();
  uint64_t v11 = v10 - v9;
  os_log_type_t v12 = *(void **)(v0 + OBJC_IVAR___CSDUserNotificationController_queue);
  *(void *)(v10 - v9) = v12;
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v10 - v9,  enum case for DispatchPredicate.onQueue(_:),  v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v14 = sub_1001B0E98();
  uint64_t v15 = (os_log_s *)sub_1001B0D98(v14, (uint64_t)qword_100454210);
  id v16 = v6;
  sub_10029FFB4(v4);
  id v17 = v16;
  Logger.logObject.getter(v17, v18, v19);
  os_log_type_t v20 = sub_1001B105C();
  if (os_log_type_enabled(v15, v20))
  {
    uint64_t v21 = sub_1001B0E78(22LL);
    uint64_t v22 = (void *)sub_1001B0E78(8LL);
    uint64_t v30 = sub_1001B0E78(32LL);
    uint64_t v31 = (uint64_t)v17;
    v32[1] = v30;
    *(_DWORD *)uint64_t v21 = 138412546;
    id v23 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v21 + 4, v21 + 12);
    *uint64_t v22 = v17;

    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v31 = v4;
    v32[0] = v2;
    swift_unknownObjectRetain(v4);
    uint64_t v24 = sub_1001AFF14((uint64_t *)&unk_10044C3F8);
    uint64_t v25 = String.init<A>(reflecting:)(&v31, v24);
    unint64_t v27 = v26;
    uint64_t v31 = sub_10029FFF0(v25, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v21 + 14, v21 + 22);
    sub_10029FFC8();
    swift_bridgeObjectRelease(v27);
    sub_1001D9094((void *)&_mh_execute_header, v15, v20, "Adding notification request %@ to %s", (uint8_t *)v21);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v22);
    sub_1001B0E60((uint64_t)v22);
    sub_1001B0F64(v30);
    sub_1001B0E60(v30);
    sub_1001B0E60(v21);
  }

  else
  {

    sub_10029FFC8();
  }

  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v29 = sub_1001C7370((uint64_t)&unk_1003E6448, 24LL);
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = v17;
  (*(void (**)(id, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v2 + 48))( v17,  sub_10029FEF4,  v29,  ObjectType,  v2);
  swift_release(v29);
  sub_1001B0FF8();
}

void sub_10029BCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    id v5 = (void *)Strong;
    sub_10029BD34();
  }

void sub_10029BD34()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_1001B1098();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1001D920C();
  os_log_type_t v12 = *(void **)(v0 + OBJC_IVAR___CSDUserNotificationController_queue);
  *uint64_t v1 = v12;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v10);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v11 + 8))(v1, v10);
  if ((v12 & 1) != 0)
  {
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v14 = sub_1001B0E98();
  uint64_t v15 = (os_log_s *)sub_1001B0D98(v14, (uint64_t)qword_100454210);
  sub_10022CE68(v7);
  uint64_t v16 = sub_10029FFB4(v5);
  Logger.logObject.getter(v16, v17, v18);
  os_log_type_t v19 = sub_1001B105C();
  if (os_log_type_enabled(v15, v19))
  {
    uint64_t v20 = sub_1001B0E78(22LL);
    uint64_t v21 = sub_1001B0E78(64LL);
    uint64_t v36 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain(v7);
    uint64_t v22 = sub_1001D7CF0(v9, v7, &v36);
    sub_10029FF84(v22, v23, v24, v20 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    *(_WORD *)(v20 + 12) = 2080;
    sub_10029FFBC();
    uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_10044C3F8);
    uint64_t v26 = sub_10029FFF8(v25);
    unint64_t v28 = v27;
    uint64_t v29 = sub_10029FFF0(v26, v27);
    sub_10029FF84(v29, v30, v31, v20 + 22);
    sub_10029FF60();
    swift_bridgeObjectRelease(v28);
    sub_1001D9094( (void *)&_mh_execute_header,  v15,  v19,  "Removing notification with identifier %s from %s",  (uint8_t *)v20);
    swift_arrayDestroy(v21, 2LL);
    sub_1001B0E60(v21);
    sub_1001B0E60(v20);
  }

  else
  {

    sub_10029FF60();
    sub_10022CCA4(v7);
  }

  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v33 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v34 = sub_1001C7370(v33, 48LL);
  *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v34 + 32) = v9;
  *(void *)(v34 + 40) = v7;
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 80);
  swift_bridgeObjectRetain(v7);
  v35(v34, ObjectType, v3);
  swift_bridgeObjectRelease(v34);
  sub_1001B0FF8();
}

void sub_10029BF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    unint64_t v7 = (void *)Strong;
    uint64_t ObjectType = swift_getObjectType(a2);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(ObjectType, a3);
    sub_10029C014();
  }

void sub_10029C014()
{
  char v5 = v4;
  sub_1001AFF14(&qword_10044C3B8);
  sub_1001B0E88();
  __chkstk_darwin(v6);
  sub_1001D920C();
  uint64_t v7 = sub_1001AFF14(&qword_10044C3C0);
  uint64_t v116 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001BB4B4();
  uint64_t v121 = v8;
  sub_1001BB5CC();
  __chkstk_darwin(v9);
  uint64_t v115 = (uint64_t)&v105 - v10;
  uint64_t v11 = type metadata accessor for BadgeCountCategory(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v122 = v11;
  uint64_t v123 = v12;
  __chkstk_darwin(v11);
  sub_1001BB4B4();
  uint64_t v114 = v13;
  sub_1001BB5CC();
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)&v105 - v15;
  uint64_t v112 = sub_1001AFF14(&qword_10044C3C8);
  sub_1001B0E88();
  __chkstk_darwin(v16);
  sub_10022D01C();
  sub_1001AFF14(&qword_10044C3D0);
  sub_1001B0E88();
  __chkstk_darwin(v17);
  sub_1001BB4B4();
  uint64_t v124 = v18;
  sub_1001BB5CC();
  __chkstk_darwin(v19);
  uint64_t v110 = (uint64_t)&v105 - v20;
  sub_1001BB5CC();
  __chkstk_darwin(v21);
  uint64_t v119 = (uint64_t)&v105 - v22;
  sub_1001BB5CC();
  __chkstk_darwin(v23);
  uint64_t v117 = (uint64_t)&v105 - v24;
  uint64_t v25 = sub_1001B1098();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_1001B0F00();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = *(void **)(v0 + OBJC_IVAR___CSDUserNotificationController_queue);
  *(void *)(v28 - v27) = v30;
  (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))( v28 - v27,  enum case for DispatchPredicate.onQueue(_:),  v25);
  id v31 = v30;
  uint64_t v32 = _dispatchPreconditionTest(_:)(v29);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_71;
  }

  uint64_t v111 = v2;
  uint64_t v120 = v7;
  uint64_t v106 = v1;
  uint64_t v107 = v0;
  uint64_t v33 = (uint64_t *)(v0 + OBJC_IVAR___CSDUserNotificationController_providers);
  swift_beginAccess(v33, &v127, 0LL, 0LL);
  uint64_t v34 = *v33;
  uint64_t v35 = *(void *)(*v33 + 16);
  if (!v35)
  {
    uint64_t v118 = 0LL;
    uint64_t v113 = 0LL;
    uint64_t v39 = _swiftEmptyArrayStorage;
    goto LABEL_47;
  }

  uint64_t v118 = v33;
  if ((v5 & 1) != 0) {
    uint64_t v36 = 0x656E6F6850LL;
  }
  else {
    uint64_t v36 = 0x656D695465636146LL;
  }
  if ((v5 & 1) != 0) {
    uint64_t v37 = 0xE500000000000000LL;
  }
  else {
    uint64_t v37 = 0xE800000000000000LL;
  }
  swift_bridgeObjectRetain(v34);
  uint64_t v38 = 0LL;
  uint64_t v39 = _swiftEmptyArrayStorage;
  do
  {
    id v40 = v39;
    __int128 v125 = *(_OWORD *)(v34 + 16 * v38 + 32);
    uint64_t v41 = v125;
    uint64_t v42 = sub_1001B5DB8();
    uint64_t v43 = *((void *)&v125 + 1);
    Swift::Int v44 = *(uint64_t (**)(uint64_t, uint64_t))(*((void *)&v125 + 1) + 16LL);
    sub_10022D308();
    char v45 = v44(v42, v43);
    BOOL v46 = (v45 & 1) == 0;
    if ((v45 & 1) != 0) {
      uint64_t v47 = 0x656E6F6850LL;
    }
    else {
      uint64_t v47 = 0x656D695465636146LL;
    }
    if (v46) {
      unint64_t v48 = 0xE800000000000000LL;
    }
    else {
      unint64_t v48 = 0xE500000000000000LL;
    }
    if (v47 == v36 && v48 == v37)
    {
      sub_10022CCA4(v37);
    }

    else
    {
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v36, v37, 0LL);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v37);
      if ((v50 & 1) == 0)
      {
        swift_unknownObjectRelease(v41);
        uint64_t v39 = v40;
        goto LABEL_28;
      }
    }

    uint64_t v39 = v40;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    uint64_t v126 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10025019C(0LL, v40[2] + 1LL, 1);
      uint64_t v39 = v126;
    }

    unint64_t v53 = v39[2];
    unint64_t v52 = v39[3];
    if (v53 >= v52 >> 1)
    {
      sub_10025019C((char *)(v52 > 1), v53 + 1, 1);
      uint64_t v39 = v126;
    }

    uint64_t v39[2] = v53 + 1;
    *(_OWORD *)&v39[2 * v53 + 4] = v125;
LABEL_28:
    ++v38;
  }

  while (v35 != v38);
  sub_1001B0EB8();
  uint64_t v54 = *v118;
  uint64_t v55 = *(void *)(*v118 + 16);
  uint64_t v56 = v122;
  if (!v55)
  {
    uint64_t v118 = 0LL;
    uint64_t v113 = 0LL;
    goto LABEL_47;
  }

  os_log_type_t v108 = v39;
  LODWORD(v125) = enum case for BadgeCountCategory.legacyVoicemail(_:);
  sub_10022CE68(v54);
  uint64_t v57 = v54;
  uint64_t v58 = (uint64_t *)(v54 + 40);
  while (2)
  {
    uint64_t v59 = (uint64_t *)*(v58 - 1);
    uint64_t v60 = *v58;
    uint64_t v61 = sub_1001B5DB8();
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v60 + 40);
    sub_10022D308();
    uint64_t v63 = v117;
    uint64_t v118 = v59;
    uint64_t v113 = v60;
    v62(v61, v60);
    uint64_t v64 = v119;
    (*(void (**)(uint64_t, void, uint64_t))(v123 + 104))(v119, v125, v56);
    sub_10028EB34(v64, 0LL);
    uint64_t v65 = v111;
    uint64_t v66 = v111 + *(int *)(v112 + 48);
    sub_10029FFDC(v63, v111);
    sub_10029FFDC(v64, v66);
    sub_10029FF44(v65);
    if (!v46)
    {
      uint64_t v67 = v110;
      sub_10029FFDC(v65, v110);
      sub_10029FF44(v66);
      if (!v68)
      {
        uint64_t v69 = v123;
        uint64_t v70 = v109;
        (*(void (**)(char *, uint64_t, uint64_t))(v123 + 32))(v109, v66, v56);
        sub_1001A9F18( (unint64_t *)&unk_10044C3D8,  (uint64_t (*)(uint64_t))&type metadata accessor for BadgeCountCategory,  (uint64_t)&protocol conformance descriptor for BadgeCountCategory);
        char v72 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v70, v56, v71);
        uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
        v73(v67, v56);
        v73((uint64_t)v70, v56);
        sub_10029FF9C(v65);
        sub_10029FF9C(v119);
        sub_10029FF9C(v117);
        if ((v72 & 1) != 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      }

      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v67, v56);
LABEL_39:
      sub_1001C6CE4(v65, &qword_10044C3C8);
      sub_10029FF9C(v119);
      sub_10029FF9C(v117);
LABEL_41:
      swift_unknownObjectRelease(v118);
      v58 += 2;
      if (!--v55)
      {
        sub_10022CCA4(v57);
        uint64_t v118 = 0LL;
        uint64_t v113 = 0LL;
        goto LABEL_46;
      }

      continue;
    }

    break;
  }

  sub_10029FF44(v66);
  if (!v46) {
    goto LABEL_39;
  }
  sub_10029FFD4(v65);
  sub_10029FFD4(v119);
  sub_10029FFD4(v117);
LABEL_45:
  sub_10022CCA4(v57);
LABEL_46:
  uint64_t v39 = v108;
LABEL_47:
  uint64_t v74 = v106;
  uint64_t v75 = v39[2];
  if (v75)
  {
    swift_retain(v39);
    os_log_type_t v108 = v39;
    os_log_type_t v76 = v39 + 5;
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v77 = *(v76 - 1);
      uint64_t v78 = *v76;
      uint64_t v79 = sub_1001B5DB8();
      uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v78 + 40);
      sub_10022D308();
      uint64_t v81 = v124;
      v80(v79, v78);
      uint64_t v82 = v81;
      uint64_t v83 = v122;
      if (sub_1001AB0AC(v82, 1LL, v122) == 1)
      {
        sub_1001C6CE4(v124, &qword_10044C3D0);
        uint64_t v84 = 1LL;
      }

      else
      {
        *(void *)&__int128 v125 = v3;
        uint64_t v85 = v123;
        uint64_t v86 = v74;
        uint64_t v87 = v114;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v114, v124, v83);
        uint64_t v119 = *(int *)(v120 + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v86, v87, v83);
        uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 32))(v79, v78);
        unint64_t v89 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
        uint64_t v3 = (void *)v125;
        uint64_t v90 = v87;
        uint64_t v74 = v86;
        v89(v90, v83);
        uint64_t v84 = 0LL;
        *(void *)(v86 + v119) = v88;
      }

      sub_10028EB34(v74, v84);
      swift_unknownObjectRelease(v77);
      sub_10029FF44(v74);
      if (v46)
      {
        sub_1001C6CE4(v74, &qword_10044C3B8);
      }

      else
      {
        uint64_t v91 = v115;
        sub_10029FE14(v74, v115);
        sub_10029FE14(v91, v121);
        char v92 = swift_isUniquelyReferenced_nonNull_native(v3);
        if ((v92 & 1) == 0) {
          uint64_t v3 = (void *)sub_10029FFE4();
        }
        unint64_t v93 = v3[2];
        if (v93 >= v3[3] >> 1) {
          uint64_t v3 = (void *)sub_10029FFE4();
        }
        v3[2] = v93 + 1;
        sub_10029FE14( v121,  (uint64_t)v3 + ((*(unsigned __int8 *)(v116 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))
        + *(void *)(v116 + 72) * v93);
      }

      v76 += 2;
      --v75;
    }

    while (v75);
    uint64_t v39 = v108;
    swift_release(v108);
  }

  else
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  swift_release(v39);
  uint64_t v32 = (uint64_t)v118;
  if (qword_100446950 != -1) {
LABEL_71:
  }
    swift_once(&qword_100446950, sub_100258A88);
  uint64_t v94 = sub_1001B0E98();
  uint64_t v95 = (os_log_s *)sub_1001B0D98(v94, (uint64_t)qword_100454210);
  Logger.logObject.getter(v95, v96, v97);
  os_log_type_t v98 = sub_1001B105C();
  if (os_log_type_enabled(v95, v98))
  {
    uint64_t v99 = (uint8_t *)sub_1001B0E78(2LL);
    *(_WORD *)uint64_t v99 = 0;
    _os_log_impl((void *)&_mh_execute_header, v95, v98, "We have a voicemail provider, so setting isAmbiguous", v99, 2u);
    sub_1001B0E60((uint64_t)v99);
  }

  if (v32)
  {
    uint64_t ObjectType = swift_getObjectType(v32);
    uint64_t v101 = v113;
    id v102 = *(void (**)(uint64_t, uint64_t))(v113 + 32);
    swift_unknownObjectRetain(v32);
    v102(ObjectType, v101);
    char v104 = v103;
    swift_unknownObjectRelease(v32);
  }

  else
  {
    char v104 = 0;
  }

  dispatch thunk of BadgeManager.setBadgeCounts(_:shouldForceUpdate:isAmbiguous:)(v3, 0LL, v104 & 1);
  swift_bridgeObjectRelease(v3);
  swift_unknownObjectRelease(v32);
  sub_1001B0FF8();
}

void sub_10029C938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 16;
  swift_beginAccess(a4 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    sub_10029C9C4();
  }

void sub_10029C9C4()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = sub_1001B1098();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100264224();
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR___CSDUserNotificationController_queue);
  *uint64_t v1 = v14;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v12);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v1, v12);
  if ((v14 & 1) != 0)
  {
    if (qword_100446950 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446950, sub_100258A88);
LABEL_3:
  uint64_t v16 = sub_1001B0E98();
  uint64_t v17 = (os_log_s *)sub_1001B0D98(v16, (uint64_t)qword_100454210);
  sub_10022CE68(v9);
  uint64_t v18 = sub_10029FFB4(v5);
  Logger.logObject.getter(v18, v19, v20);
  os_log_type_t v21 = sub_1001B105C();
  if (os_log_type_enabled(v17, v21))
  {
    uint64_t v22 = sub_1001B0E78(22LL);
    uint64_t v39 = v11;
    uint64_t v23 = sub_1001B0E78(64LL);
    uint64_t v40 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_bridgeObjectRetain(v9);
    uint64_t v24 = sub_1001D7CF0(v39, v9, &v40);
    sub_10029FF6C(v24, v25, v26, v22 + 12);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v22 + 12) = 2080;
    sub_10029FFBC();
    uint64_t v27 = sub_1001AFF14((uint64_t *)&unk_10044C3F8);
    uint64_t v28 = sub_10029FFF8(v27);
    unint64_t v30 = v29;
    uint64_t v31 = sub_10029FFF0(v28, v29);
    sub_10029FF6C(v31, v32, v33, v22 + 22);
    sub_10029FF60();
    swift_bridgeObjectRelease(v30);
    sub_1001D9094( (void *)&_mh_execute_header,  v17,  v21,  "Replacing notification with identifier %s from %s",  (uint8_t *)v22);
    swift_arrayDestroy(v23, 2LL);
    uint64_t v34 = v23;
    uint64_t v11 = v39;
    sub_1001B0E60(v34);
    sub_1001B0E60(v22);
  }

  else
  {

    sub_10029FF60();
    sub_10022CCA4(v9);
  }

  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v36 = sub_1001C7370((uint64_t)&unk_1003E6420, 32LL);
  *(void *)(v36 + swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v36 + 24) = v9;
  uint64_t v37 = v3;
  uint64_t v38 = *(void (**)(uint64_t, unint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain(v9);
  v38(v11, v9, v7, sub_10029FED0, v36, ObjectType, v37);
  swift_release(v36);
  sub_1001B0FF8();
}

void sub_10029CC3C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.makeIterator()(a1);
    uint64_t v3 = sub_1001B4B94(0LL, (unint64_t *)&unk_10044A3C0, &OBJC_CLASS___UNNotificationCategory_ptr);
    unint64_t v4 = sub_10029FE5C();
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    uint64_t v1 = v25[0];
    uint64_t v22 = v25[1];
    uint64_t v5 = v25[2];
    int64_t v6 = v25[3];
    unint64_t v7 = v25[4];
  }

  else
  {
    int64_t v6 = 0LL;
    uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
  }

  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      int64_t v14 = v6;
      goto LABEL_31;
    }

    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v19 >= v11) {
      goto LABEL_34;
    }
    unint64_t v20 = *(void *)(v22 + 8 * v19);
    int64_t v14 = v6 + 1;
    if (!v20)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v22 + 8 * v14);
      if (!v20)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_34;
        }
        unint64_t v20 = *(void *)(v22 + 8 * v14);
        if (!v20)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_34;
          }
          unint64_t v20 = *(void *)(v22 + 8 * v14);
          if (!v20)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v22 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v6 + 6;
              while (v21 < v11)
              {
                unint64_t v20 = *(void *)(v22 + 8 * v21++);
                if (v20)
                {
                  int64_t v14 = v21 - 1;
                  goto LABEL_30;
                }
              }

id sub_10029CED8()
{
  uint64_t v27 = v4;
  uint64_t v28 = v5;
  int64_t v6 = v0;
  uint64_t v25 = v7;
  id v24 = (objc_class *)sub_1001B5DB8();
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001B10F0();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v11);
  sub_100264224();
  type metadata accessor for DispatchQoS(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v12);
  sub_10022D01C();
  sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v13 = v6;
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = v14;
  uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001B90A8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v16, v17, v10, v15);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))( v1,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v8);
  id v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000045LL,  0x80000001003774A0LL,  v3,  v2,  v1,  0LL);

  sub_1001B4B94(0LL, (unint64_t *)&unk_100447F00, &OBJC_CLASS___UNUserNotificationCenter_ptr);
  id v19 = sub_10029A28C();
  id v20 = sub_10029A28C();
  id v21 = sub_10029F950(v19, v20, (uint64_t)_swiftEmptyArrayStorage, v25, v18, (char *)objc_allocWithZone(v24));
  uint64_t ObjectType = swift_getObjectType(v13);
  swift_deallocPartialClassInstance(v13, ObjectType, 88LL, 7LL);
  return v21;
}

id sub_10029D140()
{
  uint64_t v1 = (objc_class *)sub_1001B5DB8();
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v2 = sub_1001B0E98();
  uint64_t v3 = (os_log_s *)sub_1001B0D98(v2, (uint64_t)qword_100454210);
  id v4 = v0;
  uint64_t v5 = v3;
  Logger.logObject.getter(v4, v6, v7);
  os_log_type_t v8 = sub_1001B105C();
  if (os_log_type_enabled(v3, v8))
  {
    uint64_t v9 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v10 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    id v13 = v4;
    id v11 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4, v9 + 12);
    *uint64_t v10 = v4;

    _os_log_impl((void *)&_mh_execute_header, v5, v8, "Deallocating %@", v9, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v10);
    sub_1001B0E60((uint64_t)v10);
    sub_1001B0E60((uint64_t)v9);
  }

  else
  {
  }

  v14.receiver = v4;
  v14.super_class = v1;
  return objc_msgSendSuper2(&v14, "dealloc");
}

void sub_10029D384(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v3, (uint64_t)qword_100454210);
    swift_errorRetain(a1);
    uint64_t v4 = swift_errorRetain(a1);
    os_log_t oslog = (os_log_s *)Logger.logObject.getter(v4, v5, v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(oslog, v7);
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v9 = 138412290;
      swift_errorRetain(a1);
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v26 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v9 + 4, v9 + 12);
      *uint64_t v10 = v11;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Error while posting notification: %@", v9, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v10, 1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);

      swift_errorRelease(a1);
      return;
    }

    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v13, (uint64_t)qword_100454210);
    os_log_t oslog = a2;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(oslog, v14, v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v19;
      *(_DWORD *)id v18 = 136315138;
      id v20 = -[os_log_s identifier](oslog, "identifier");
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v23 = v22;

      uint64_t v25 = sub_1001D7CF0(v21, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4, v18 + 12);

      swift_bridgeObjectRelease(v23);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Successfully posted notification with identifier: %s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      return;
    }
  }
}

void sub_10029D6FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v4, (uint64_t)qword_100454210);
    swift_errorRetain(a1);
    uint64_t v5 = swift_errorRetain(a1);
    os_log_t oslog = (os_log_s *)Logger.logObject.getter(v5, v6, v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(oslog, v8);
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v10 = 138412290;
      swift_errorRetain(a1);
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v25 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 4, v10 + 12);
      uint64_t *v11 = v12;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Error while replacing notification: %@", v10, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v11, 1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

  else
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v15, (uint64_t)qword_100454210);
    uint64_t v16 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v16, v17, v18);
    os_log_type_t v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v24 = sub_1001D7CF0(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Successfully replaced notification with identifier: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }
  }

void sub_10029DA3C()
{
}

uint64_t type metadata accessor for UserNotificationController()
{
  return objc_opt_self(&OBJC_CLASS___CSDUserNotificationController);
}

void sub_10029DA94()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001B0F00();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1001B10F0();
  uint64_t v14 = (void *)sub_1001C7370((uint64_t)&unk_1003E62B8, 48LL);
  _OWORD v14[2] = v7;
  uint64_t v14[3] = v0;
  void v14[4] = v5;
  void v14[5] = v3;
  void v25[4] = sub_10029E2F8;
  uint64_t v26 = v14;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256LL;
  _OWORD v25[2] = sub_1002356BC;
  void v25[3] = &unk_1003E62D0;
  uint64_t v15 = _Block_copy(v25);
  id v16 = v7;
  id v17 = v0;
  uint64_t v18 = swift_retain(v3);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = v19;
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v11);
  _Block_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v11, v8);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v12);
  swift_release(v26);
  sub_1001B0FF8();
}

uint64_t sub_10029DC64(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v8, (uint64_t)qword_100454210);
  id v9 = a1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v9, v10, v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v42 = a3;
    uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v41 = a4;
    *(_DWORD *)uint64_t v14 = 138412290;
    id v43 = v9;
    uint64_t v16 = a2;
    id v17 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v14 + 4, v14 + 12);
    *uint64_t v15 = v9;

    a2 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received response %@", v14, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v15, 1LL);
    uint64_t v18 = v15;
    a3 = v42;
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  id v19 = objc_msgSend(v9, "notification", v41);
  id v20 = [v19 request];

  id v21 = [v20 content];
  uint64_t v22 = sub_10029EAE4(v21);
  if (v23)
  {
    uint64_t v25 = v22;
    uint64_t v26 = v23;
    uint64_t v27 = (uint64_t *)(a2 + OBJC_IVAR___CSDUserNotificationController_providersByIdentifier);
    swift_beginAccess(a2 + OBJC_IVAR___CSDUserNotificationController_providersByIdentifier, &v43, 32LL, 0LL);
    sub_1001CA410(v25, v26, *v27);
    if (v28)
    {
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      swift_endAccess(&v43);
      swift_bridgeObjectRelease(v26);
      uint64_t ObjectType = swift_getObjectType(v30);
      v44[2] = sub_1001B4B94(0LL, &qword_10044C390, &OBJC_CLASS___UNNotificationResponse_ptr);
      void v44[3] = &off_1003DF7D0;
      id v43 = v9;
      uint64_t v33 = *(void (**)(id *, uint64_t, uint64_t))(v31 + 144);
      id v34 = v9;
      v33(&v43, ObjectType, v31);
      swift_unknownObjectRelease(v30);
      uint64_t v35 = sub_1001B0438(&v43);
      return a3(v35);
    }

    swift_endAccess(&v43);
    uint64_t v22 = swift_bridgeObjectRelease(v26);
  }

  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v22, v23, v24);
  os_log_type_t v38 = static os_log_type_t.error.getter(v36, v37);
  if (os_log_type_enabled(v36, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v38, "Could not find notification provider for action", v39, 2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  return a3(v35);
}

void sub_10029E058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(void **)(a4 + OBJC_IVAR___CSDUserNotificationController_queue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    if ((a1 & 0x8000000000000000LL) == 0)
    {
      objc_allocWithZone((Class)type metadata accessor for MomentsNotification());
      swift_bridgeObjectRetain(a3);
      id v16 = sub_10023CBDC(a1, a2, a3);
      id v17 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      [v17 postNotificationName:@"CSDMomentsControllerStartedRemoteCaptureNotification" object:v16];

      a5[2](a5, 0LL);
      _Block_release(a5);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  _Block_release(a5);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
}

uint64_t sub_10029E2A0()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10029E2BC()
{
  return sub_10029FFA4(*(void *)(v0 + 16));
}

uint64_t sub_10029E2C4()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10029E2F8()
{
  return sub_10029DC64( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t (**)(void))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10029E304(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10029E314(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10029E31C()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002B079C();
    *uint64_t v0 = v3;
  }

void (*sub_10029E364(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x68uLL);
  *a1 = v5;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[9] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  v5[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_10029E87C(v5);
  v5[12] = sub_10029E534(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_10029E424;
}

void sub_10029E424(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 72LL);
  sub_10029FFAC(*(void *)a1 + 32LL, *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 96LL));
  sub_1002A000C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v2(v1, 0LL);
  sub_1002A0004();
  free(v1);
}

void (*sub_10029E480(void *a1, char a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_10029E8A8(v5);
  v5[9] = sub_10029E6D8((uint64_t)(v5 + 4), a2 & 1, isUniquelyReferenced_nonNull_native);
  return sub_10029E500;
}

void sub_10029E500(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64LL);
  sub_10029FFAC(*(void *)a1 + 32LL, *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 72LL));
  v2(v1, 0LL);
  sub_10029FF3C(v1);
}

void (*sub_10029E534(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  *uint64_t v8 = a2;
  v8[1] = v3;
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v10 = malloc(*(void *)(*(void *)(v9 - 8) + 64LL));
  uint64_t v8[2] = v10;
  uint64_t v11 = *v3;
  unint64_t v12 = sub_1001D7184(a2);
  *((_BYTE *)v8 + 32) = v13 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v17 = v12;
  char v18 = v13;
  sub_1001AFF14((uint64_t *)&unk_100448F40);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16))
  {
    unint64_t v19 = sub_1001D7184(a2);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }

void sub_10029E694(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[2];
  sub_10029E8C8(v2, *((unsigned __int8 *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_1001C6CE4(v2, (uint64_t *)&unk_100449200);
  sub_1002A0004();
  sub_10029FF3C(v1);
}

unint64_t (*sub_10029E6D8(uint64_t a1, char a2, char a3))(unint64_t result)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  char v7 = a2 & 1;
  uint64_t v8 = *v3;
  unint64_t v9 = sub_1001D72E8(a2 & 1);
  *(_BYTE *)(a1 + 25) = v10 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001AFF14(&qword_10044C3F0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
  {
    unint64_t v16 = sub_1001D72E8(v7);
    if ((v15 & 1) == (v17 & 1))
    {
      unint64_t v14 = v16;
      goto LABEL_5;
    }

unint64_t sub_10029E7D4(unint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = **(void ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0) {
      *(void *)(v2[7] + 8LL * *(void *)(result + _Block_release(*(const void **)(v0 + 16)) = v1;
    }
    else {
      return sub_100200EC8(*(void *)(result + 16), *(_BYTE *)(result + 24) & 1, v1, v2);
    }
  }

  else if ((*(_BYTE *)(result + 25) & 1) != 0)
  {
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v4 = **(void **)(result + 8);
    uint64_t v5 = sub_1001AFF14(&qword_10044C3A0);
    unint64_t v6 = sub_10029FD1C();
    return _NativeDictionary._delete(at:)(v3, v4, &type metadata for NotificationType, v5, v6);
  }

  return result;
}

uint64_t (*sub_10029E87C(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_10029E89C;
}

uint64_t sub_10029E89C(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*sub_10029E8A8(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_10029FF0C;
}

void sub_10029E8C8(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  unint64_t v27 = a4;
  int v28 = a2;
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100449200);
  __chkstk_darwin(v10);
  BOOL v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v25 - v18;
  sub_1001C6DC4(a1, (uint64_t)v12, (uint64_t *)&unk_100449200);
  if (sub_1001AB0AC((uint64_t)v12, 1LL, v13) == 1)
  {
    sub_1001C6CE4((uint64_t)v12, (uint64_t *)&unk_100449200);
    if ((v28 & 1) != 0)
    {
      uint64_t v21 = v26;
      unint64_t v20 = v27;
      swift_arrayDestroy(*(void *)(*a3 + 48) + *(void *)(v7 + 72) * v27, 1LL);
      uint64_t v22 = *a3;
      sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      _NativeDictionary._delete(at:)(v20, v22, v21, v13, v23);
    }
  }

  else
  {
    sub_100206928((uint64_t)v12, (uint64_t)v19);
    uint64_t v24 = *a3;
    if ((v28 & 1) != 0)
    {
      sub_100206928((uint64_t)v19, *(void *)(v24 + 56) + *(void *)(v14 + 72) * v27);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v26);
      sub_100206928((uint64_t)v19, (uint64_t)v17);
      sub_100200E08(v27, (uint64_t)v9, (uint64_t)v17, v24);
    }
  }

uint64_t sub_10029EAE4(void *a1)
{
  id v2 = [a1 notificationProviderIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_10029EB50(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *id v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    sub_1001B0EB8();
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *id v2 = result;
  return result;
}

void sub_10029EC08(uint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || a1 > *(void *)(v3 + 24) >> 1)
  {
    sub_1002B079C();
    *uint64_t v1 = v5;
  }

char *sub_10029EC6C(void *a1, void *a2)
{
  id v4 = [objc_allocWithZone(TUConversationManager) init];
  uint64_t result = (char *)[(id)objc_opt_self(FTNetworkSupport) sharedInstance];
  if (result)
  {
    unint64_t v6 = result;
    id v7 = [objc_allocWithZone((Class)type metadata accessor for ConversationInvitationResolver()) init];
    id v8 = [objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag()) init];
    uint64_t v9 = (char *)objc_allocWithZone((Class)type metadata accessor for GroupFaceTimeNotificationProvider());
    return sub_10029EFCC(a1, a2, v4, v6, v7, v8, 0LL, 0LL, v9);
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_10029ED50(void *a1, void *a2, void *a3, _BYTE *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a4);
  uint64_t v9 = &a4[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_updateBadgeValue];
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  uint64_t v10 = (uint64_t)&a4[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_badgeCategory];
  uint64_t v11 = type metadata accessor for BadgeCountCategory(0LL);
  sub_1001A9670(v10, 1LL, 1LL, v11);
  BOOL v12 = &a4[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_openURL];
  *BOOL v12 = 0LL;
  v12[1] = 0LL;
  a4[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType] = 0;
  uint64_t v13 = a4;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10024C01C((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v14 = &_swiftEmptySetSingleton;
  }

  *(void *)&v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_categories] = v14;
  uint64_t v15 = &v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_add];
  *(void *)uint64_t v15 = 0LL;
  *((void *)v15 + 1) = 0LL;
  uint64_t v16 = &v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_replace];
  *(void *)uint64_t v16 = 0LL;
  *((void *)v16 + 1) = 0LL;
  char v17 = &v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_removeNotification];
  *(void *)char v17 = 0LL;
  *((void *)v17 + 1) = 0LL;
  *(void *)&v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_queue] = a1;
  id v18 = objc_allocWithZone(&OBJC_CLASS___TUContactsDataProvider);
  id v19 = a1;
  id v20 = [v18 initWithContactsDataSource:a2];
  *(void *)&v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_contactsDataProvider] = v20;
  *(void *)&v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationCenter] = a3;
  uint64_t v21 = (uint64_t (**)(uint64_t, void *))&v13[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_localizeHandleName];
  *uint64_t v21 = sub_1001E9298;
  v21[1] = 0LL;
  id v22 = a3;

  v29.receiver = v13;
  v29.super_class = ObjectType;
  id v23 = objc_msgSendSuper2(&v29, "init");
  [v22 addObserver:v23 selector:"handlePendingMessageDidReceiveInviteNotification:" name:@"CSDIDSPendingMessageDidReceiveInviteNotification" object:0];
  uint64_t v24 = (char *)v23;
  [v22 addObserver:v24 selector:"handlePendingMessageDidReceiveCancelNotification:" name:@"CSDIDSPendingMessageDidReceiveCancelNotification" object:0];

  uint64_t v25 = (void (**)(NSURL *@<X8>))&v24[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_openURL];
  uint64_t v26 = *(void *)&v24[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_openURL];
  uint64_t v27 = *(void *)&v24[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_openURL + 8];
  void *v25 = sub_1001CC8C4;
  v25[1] = 0LL;
  sub_1001B5D3C(v26, v27);
  return v24;
}

char *sub_10029EFCC( void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a9);
  uint64_t v15 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags;
  id v16 = objc_allocWithZone(&OBJC_CLASS___TUFeatureFlags);
  char v17 = a9;
  *(void *)&a9[v15] = [v16 init];
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID] = &_swiftEmptyDictionarySingleton;
  uint64_t v18 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_faceTimeNotificationCenter;
  sub_1001B4B94(0LL, (unint64_t *)&unk_100447F00, &OBJC_CLASS___UNUserNotificationCenter_ptr);
  *(void *)&v17[v18] = sub_10029A28C();
  id v19 = (uint64_t *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_shouldDelayInviteNotification];
  *id v19 = (uint64_t)variable initialization expression of CSDConversationSpatialPersonaResolver.forceLocalParticipantState;
  v19[1] = 0LL;
  id v20 = &v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL];
  *(void *)id v20 = 0LL;
  *((void *)v20 + 1) = 0LL;
  uint64_t v21 = &v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL];
  *(void *)uint64_t v21 = 0LL;
  *((void *)v21 + 1) = 0LL;
  v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType] = 0;
  uint64_t v22 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_categories;
  *(void *)&v17[v22] = sub_1001CD608();
  id v23 = &v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add];
  *(void *)id v23 = 0LL;
  *((void *)v23 + 1) = 0LL;
  uint64_t v24 = &v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace];
  *(void *)uint64_t v24 = 0LL;
  *((void *)v24 + 1) = 0LL;
  uint64_t v25 = &v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification];
  *(void *)uint64_t v25 = 0LL;
  *((void *)v25 + 1) = 0LL;
  uint64_t v26 = &v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_updateBadgeValue];
  *(void *)uint64_t v26 = 0LL;
  *((void *)v26 + 1) = 0LL;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue] = a1;
  id v27 = objc_allocWithZone(&OBJC_CLASS___TUContactsDataProvider);
  id v57 = a1;
  id v28 = [v27 initWithContactsDataSource:a2];
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_contactsDataProvider] = v28;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager] = a3;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_ftNetworkSupport] = a4;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_invitationResolver] = a5;
  *(void *)&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationServerBag] = a6;
  if (a7)
  {
    uint64_t v29 = v19[1];
    *id v19 = a7;
    v19[1] = a8;
    sub_1001B5D70(a7, a8);
    id v30 = a3;
    id v31 = a4;
    id v32 = a5;
    id v33 = a6;
    swift_release(v29);
  }

  else
  {
    id v34 = a3;
    id v35 = a4;
    id v36 = a5;
    id v37 = a6;
  }

  os_log_type_t v38 = (void (**)(void *))&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName];
  char *v38 = sub_1001CA810;
  v38[1] = 0LL;
  uint64_t v39 = (void (**)())&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName];
  *uint64_t v39 = sub_1001CA84C;
  v39[1] = 0LL;
  uint64_t v40 = (uint64_t (**)())&v17[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation];
  *uint64_t v40 = sub_1001CA8CC;
  v40[1] = 0LL;

  v60.receiver = v17;
  v60.super_class = ObjectType;
  uint64_t v41 = (char *)objc_msgSendSuper2(&v60, "init");
  uint64_t v42 = *(void **)&v41[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager];
  id v43 = v41;
  [v42 addDelegate:v43 queue:v57];
  [v42 registerWithCompletionHandler:0];
  Swift::Int v44 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v45 = [v44 defaultCenter];
  [v45 addObserver:v43 selector:"momentsStartedRemoteCapture:" name:@"CSDMomentsControllerStartedRemoteCaptureNotification" object:0];

  id v46 = [v44 defaultCenter];
  uint64_t v47 = v43;
  [v46 addObserver:v47 selector:"handlePendingMessageDidReceiveInviteNotification:" name:@"CSDGroupIDSPendingMessageDidReceiveInviteNotification" object:0];
  sub_1001B5D3C(a7, a8);

  unint64_t v48 = (void (**)(NSURL *@<X8>))&v47[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL];
  uint64_t v49 = *(void *)&v47[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL];
  uint64_t v50 = *(void *)&v47[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL + 8];
  *unint64_t v48 = sub_1001CC8C4;
  v48[1] = 0LL;
  sub_1001B5D3C(v49, v50);
  uint64_t v51 = (uint64_t *)&v47[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL];
  swift_beginAccess( &v47[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL],  v59,  1LL,  0LL);
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  *uint64_t v51 = (uint64_t)sub_1001CC8F0;
  v51[1] = 0LL;
  sub_1001B5D3C(v52, v53);
  return v47;
}

char *sub_10029F444(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char *a6)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a6);
  char v10 = a5 & 1;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v58 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  __chkstk_darwin(v14);
  id v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v63[3] = sub_1001B4B94(0LL, &qword_10044C408, &OBJC_CLASS___CHManager_ptr);
  v63[4] = &off_1003E36C8;
  v63[0] = a2;
  uint64_t v17 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callInteractionManager;
  id v18 = objc_allocWithZone(&OBJC_CLASS___CHCallInteractionManager);
  id v19 = a6;
  *(void *)&a6[v17] = [v18 init];
  uint64_t v20 = OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callProviderManager;
  *(void *)&v19[v20] = [objc_allocWithZone(TUCallProviderManager) init];
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_pendingCallIdentifiers] = &_swiftEmptySetSingleton;
  uint64_t v21 = (uint64_t)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_mostRecentCallDate];
  uint64_t v22 = type metadata accessor for Date(0LL);
  sub_1001A9670(v21, 1LL, 1LL, v22);
  id v23 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall];
  *(void *)id v23 = 0LL;
  *((void *)v23 + 1) = 0LL;
  uint64_t v24 = (uint64_t *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_findConversationLink];
  *uint64_t v24 = 0LL;
  v24[1] = 0LL;
  uint64_t v25 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_blockHandles];
  *(void *)uint64_t v25 = 0LL;
  *((void *)v25 + 1) = 0LL;
  uint64_t v26 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_add];
  *(void *)uint64_t v26 = 0LL;
  *((void *)v26 + 1) = 0LL;
  id v27 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_replace];
  *(void *)id v27 = 0LL;
  *((void *)v27 + 1) = 0LL;
  id v28 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_removeNotification];
  *(void *)id v28 = 0LL;
  *((void *)v28 + 1) = 0LL;
  uint64_t v29 = &v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_updateBadgeValue];
  *(void *)uint64_t v29 = 0LL;
  *((void *)v29 + 1) = 0LL;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_queue] = a1;
  sub_1001BA03C( (uint64_t)v63,  (uint64_t)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callHistoryDataSource]);
  v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_notificationType] = v10;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportedMediaTypes] = v53;
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportedProviders] = v54;
  id v30 = (id (**)())&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_supportsDisplayingFaceTimeAudioCalls];
  *id v30 = sub_10023E70C;
  v30[1] = 0LL;
  id v31 = (void (**)())&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_openURL];
  *id v31 = sub_10023E734;
  v31[1] = 0LL;
  uint64_t v32 = *v24;
  uint64_t v33 = v24[1];
  *uint64_t v24 = (uint64_t)sub_10023E9DC;
  v24[1] = 0LL;
  id v34 = a1;
  sub_1001B5D3C(v32, v33);
  id v35 = [objc_allocWithZone(TUFeatureFlags) init];
  *(void *)&v19[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_featureFlags] = v35;

  v62.receiver = v19;
  v62.super_class = ObjectType;
  id v36 = (char *)objc_msgSendSuper2(&v62, "init");
  id v37 = *(void **)&v36[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_callInteractionManager];
  os_log_type_t v38 = v36;
  [v37 addDelegate:v38 queue:v34];
  uint64_t v39 = swift_allocObject(&unk_1003E6470, 24LL, 7LL);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = v38;
  void aBlock[4] = sub_10029FEFC;
  uint64_t v61 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E6488;
  uint64_t v40 = _Block_copy(aBlock);
  uint64_t v41 = v38;
  static DispatchQoS.unspecified.getter(v41);
  uint64_t v59 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v43 = v42;
  uint64_t v44 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v44, v45, v11, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13);
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v16, v57);
  swift_release(v61);
  uint64_t v46 = swift_allocObject(&unk_1003E64C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v46 + 16);
  uint64_t v47 = (void (**)())&v41[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall];
  uint64_t v48 = *(void *)&v41[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall];
  uint64_t v49 = *(void *)&v41[OBJC_IVAR____TtC13callservicesd31CallHistoryNotificationProvider_dialRecentCall + 8];
  *uint64_t v47 = sub_10029FF04;
  v47[1] = (void (*)())v46;
  sub_1001B5D3C(v48, v49);
  id v50 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v50 addObserver:v41 selector:"handleCallHistoryDatabaseChangedWithNotification:" name:kCallHistoryDatabaseChangedNotification object:0];

  sub_10024075C();
  sub_1001B0438(v63);
  return v41;
}

id sub_10029F950(void *a1, void *a2, uint64_t a3, void *a4, void *a5, char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a6);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v46 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&a6[OBJC_IVAR___CSDUserNotificationController_providersByIdentifier] = &_swiftEmptyDictionarySingleton;
  *(void *)&a6[OBJC_IVAR___CSDUserNotificationController_callFilterController] = a4;
  id v18 = &a6[OBJC_IVAR___CSDUserNotificationController_faceTimeNotificationCenter];
  *(void *)id v18 = a1;
  *((void *)v18 + 1) = &off_1003E6220;
  id v19 = &a6[OBJC_IVAR___CSDUserNotificationController_phoneNotificationCenter];
  *(void *)id v19 = a2;
  *((void *)v19 + 1) = &off_1003E6220;
  *(void *)&a6[OBJC_IVAR___CSDUserNotificationController_providers] = a3;
  *(void *)&a6[OBJC_IVAR___CSDUserNotificationController_queue] = a5;
  type metadata accessor for BadgeManager(0LL);
  id v20 = a5;
  uint64_t v21 = a6;
  id v43 = a4;
  id v42 = a1;
  id v22 = a2;
  *(void *)&v21[OBJC_IVAR___CSDUserNotificationController_badgeManager] = BadgeManager.__allocating_init(queue:)(a5);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_1001B0D98(v23, (uint64_t)qword_100454210);
  id v27 = (os_log_s *)Logger.logObject.getter(v24, v25, v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Creating XPC endpoint for User notifications", v29, 2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  id v30 = [objc_allocWithZone((Class)CSDClientManager) initWithSerialQueue:v20];
  *(void *)&v21[OBJC_IVAR___CSDUserNotificationController_clientManager] = v30;

  v50.receiver = v21;
  v50.super_class = ObjectType;
  id v31 = objc_msgSendSuper2(&v50, "init");
  uint64_t v32 = swift_allocObject(&unk_1003E6308, 24LL, 7LL);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31;
  void aBlock[4] = sub_10029FD14;
  uint64_t v49 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E6320;
  uint64_t v33 = _Block_copy(aBlock);
  id v34 = v31;
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v36 = v35;
  uint64_t v37 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v37, v38, v12, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14);

  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v45);
  swift_release(v49);
  return v34;
}

void sub_10029FD14()
{
}

unint64_t sub_10029FD1C()
{
  unint64_t result = qword_10044C3A8;
  if (!qword_10044C3A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037BA1C, &type metadata for NotificationType);
    atomic_store(result, (unint64_t *)&qword_10044C3A8);
  }

  return result;
}

uint64_t sub_10029FD58()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10029FD74()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10029FDA8(uint64_t a1)
{
}

void sub_10029FDBC(uint64_t a1, uint64_t a2)
{
}

void sub_10029FDCC()
{
}

uint64_t sub_10029FDDC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10029FE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10029FE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_10044C3C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10029FE5C()
{
  unint64_t result = qword_10044C3E8;
  if (!qword_10044C3E8)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&unk_10044A3C0, &OBJC_CLASS___UNNotificationCategory_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044C3E8);
  }

  return result;
}

uint64_t sub_10029FEAC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10029FED0(uint64_t a1)
{
}

uint64_t sub_10029FED8()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10029FEF4(uint64_t a1)
{
}

void sub_10029FEFC()
{
}

void sub_10029FF04()
{
}

void sub_10029FF3C(void *a1)
{
}

uint64_t sub_10029FF44(uint64_t a1)
{
  return sub_1001AB0AC(a1, 1LL, v1);
}

uint64_t sub_10029FF60()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_10029FF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, v5 - 96, v4, a4);
}

uint64_t sub_10029FF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, v5 - 96, v4, a4);
}

void sub_10029FF9C(uint64_t a1)
{
}

uint64_t sub_10029FFA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_10029FFAC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, 0LL);
}

uint64_t sub_10029FFB4(uint64_t a1)
{
  return swift_unknownObjectRetain_n(a1, 2LL);
}

uint64_t sub_10029FFBC()
{
  *(void *)(v2 - 104) = v1;
  *(void *)(v2 - 96) = v0;
  return swift_unknownObjectRetain(v1);
}

uint64_t sub_10029FFC8()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

void sub_10029FFD4(uint64_t a1)
{
}

void sub_10029FFDC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10029FFE4()
{
  return sub_1002B07B8();
}

uint64_t sub_10029FFF0(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_10029FFF8(uint64_t a1)
{
  return String.init<A>(reflecting:)(v1 - 104, a1);
}

void sub_1002A0004()
{
}

uint64_t sub_1002A000C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t type metadata accessor for DiscoveryModeProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd21DiscoveryModeProvider);
}

uint64_t sub_1002A0038()
{
  id v0 = sub_1001704C4();
  uint64_t v1 = static os_log_type_t.default.getter(v0);
  sub_1001E43F4( (uint64_t)"Starting discovery mode",  23LL,  v2,  (uint64_t)&_mh_execute_header,  v3,  v1,  (uint64_t)_swiftEmptyArrayStorage);

  return sub_1002A00E0();
}

uint64_t sub_1002A008C()
{
  id v0 = sub_1001704C4();
  uint64_t v1 = static os_log_type_t.default.getter(v0);
  sub_1001E43F4( (uint64_t)"Ending discovery mode",  21LL,  v2,  (uint64_t)&_mh_execute_header,  v3,  v1,  (uint64_t)_swiftEmptyArrayStorage);

  return sub_1002A00E0();
}

uint64_t sub_1002A00E0()
{
  return ((uint64_t (*)(void))MRMediaRemoteSetRouteDiscoveryMode)();
}

id sub_1002A00E8(uint64_t a1)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v4 = [(id)swift_getObjCClassFromMetadata(v1) orPredicateWithSubpredicates:isa];

  return v4;
}

id sub_1002A0164(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___CSDCallHistoryCallFilter_usTollFreePrefixes] = &off_1003DCF18;
  *(void *)&v1[OBJC_IVAR___CSDCallHistoryCallFilter_callHistoryManager] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CallHistoryCallFilter();
  return objc_msgSendSuper2(&v3, "init");
}

BOOL sub_1002A01E4(void *a1)
{
  if (v3)
  {
    id v4 = v3;
    id v5 = [v3 value];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    uint64_t v10 = sub_1002A1354(v9, (SEL *)&selRef_normalizedValue);
    unint64_t v12 = v11;
    BOOL v13 = sub_1002A0F34(v6, v8, v10, v11);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    id v14 = sub_1001704C4();
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v16 = (__n128 *)sub_1001C7370(v15, 112LL);
    v16[3].n128_u64[1] = sub_1002A135C(v16, (__n128)xmmword_10037B1B0);
    v16[4].n128_u64[0] = sub_1002A1180();
    v16[2].n128_u64[0] = (unint64_t)v1;
    v16[6].n128_u64[0] = sub_1001B4B94(0LL, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    v16[6].n128_u64[1] = sub_100213094( (unint64_t *)&qword_10044AC00,  &qword_10044C570,  &OBJC_CLASS___CXCallUpdate_ptr);
    v16[4].n128_u64[1] = (unint64_t)a1;
    id v17 = v1;
    id v18 = a1;
    uint64_t v19 = static os_log_type_t.default.getter(v18);
    if (v13) {
      os_log(_:dso:log:type:_:)( "%@ Did not find call history call; call filter will not allow update %@",
    }
        71LL,
        2LL,
        &_mh_execute_header,
        v14,
        v19,
        v16);
    else {
      os_log(_:dso:log:type:_:)( "%@ Found call history call; call filter will allow update %@",
    }
        60LL,
        2LL,
        &_mh_execute_header,
        v14,
        v19,
        v16);

    swift_bridgeObjectRelease(v16);
    id v25 = [v18 silencingUserInfo];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallMetricsReturnedCall");
    uint64_t v28 = v27;
    id v29 = [objc_allocWithZone(NSNumber) initWithBool:!v13];
    uint64_t v32 = v26;
    uint64_t v33 = v28;
    swift_bridgeObjectRetain(v28);
    uint64_t v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v32, &type metadata for String);
    objc_msgSend(v25, "__swift_setObject:forKeyedSubscript:", v29, v30, v32, v33);
    swift_bridgeObjectRelease(v28);

    swift_unknownObjectRelease(v30);
  }

  else
  {
    id v20 = sub_1001704C4();
    uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    id v22 = (__n128 *)sub_1001C7370(v21, 112LL);
    v22[3].n128_u64[1] = sub_1002A135C(v22, (__n128)xmmword_10037B1B0);
    v22[4].n128_u64[0] = sub_1002A1180();
    v22[2].n128_u64[0] = (unint64_t)v1;
    v22[6].n128_u64[0] = sub_1002A1318();
    v22[6].n128_u64[1] = sub_1002A137C((unint64_t *)&qword_10044AC00);
    v22[4].n128_u64[1] = (unint64_t)a1;
    id v23 = v1;
    uint64_t v24 = static os_log_type_t.default.getter(a1);
    os_log(_:dso:log:type:_:)( "%@ Could not create call history handle from update %@",  54LL,  2LL,  &_mh_execute_header,  v20,  v24,  v22);

    swift_bridgeObjectRelease(v22);
    return 0;
  }

  return v13;
}

void sub_1002A05D4(void *a1)
{
  id v2 = [a1 remoteHandle];
  objc_super v3 = v2;
  if (!v2) {
    goto LABEL_37;
  }
  id v4 = [v2 tuHandle];

  if (!v4) {
    goto LABEL_37;
  }
  uint64_t v6 = sub_1002A1354(v5, (SEL *)&selRef_isoCountryCode);
  uint64_t v8 = &_sSo13os_log_type_ta0A0E5faultABvgZ_ptr;
  if (v7)
  {
    if (v6 == 29557 && v7 == 0xE200000000000000LL)
    {
      uint64_t v6 = sub_1001B2428();
    }

    else
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 29557LL, 0xE200000000000000LL, 0LL);
      uint64_t v6 = sub_1001B2428();
      if ((v10 & 1) == 0) {
        goto LABEL_18;
      }
    }

    uint64_t v6 = (uint64_t)sub_1001D8F3C(v6, "type");
    if (v6 == 2)
    {
      uint64_t v11 = *(void *)(v1 + OBJC_IVAR___CSDCallHistoryCallFilter_usTollFreePrefixes);
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        swift_bridgeObjectRetain_n(v11, 2LL);
        BOOL v13 = (uint64_t *)(v11 + 40);
        while (1)
        {
          uint64_t v15 = *(v13 - 1);
          uint64_t v14 = *v13;
          uint64_t v16 = swift_bridgeObjectRetain(*v13);
          id v17 = sub_1001D8F3C(v16, "value");
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          uint64_t v20 = v19;

          uint64_t v21 = sub_1002A0998(v15, v14, v18, v20);
          swift_bridgeObjectRelease(v20);
          if ((v21 & 1) != 0) {
            break;
          }
          v13 += 2;
          sub_1001B2428();
          if (!--v12)
          {
            uint64_t v6 = sub_100297494();
            uint64_t v8 = &_sSo13os_log_type_ta0A0E5faultABvgZ_ptr;
            goto LABEL_18;
          }
        }

        sub_1001B2428();
        sub_100297494();
        uint64_t v8 = &_sSo13os_log_type_ta0A0E5faultABvgZ_ptr;
        id v39 = [(id)sub_1002A1304() handleTypeForTUHandle:v4];
        id v40 = sub_1001D8F3C((uint64_t)v39, "value");
        sub_10022D0F0((uint64_t)v40);
        sub_1002A1340();
        unint64_t v41 = sub_1002A0AF4(2uLL, v21, (unint64_t)v17);
        static String._fromSubstring(_:)(v41);
        uint64_t v42 = sub_1001B2428();
        id v43 = sub_1001D8F3C(v42, "value");
        sub_10022D0F0((uint64_t)v43);
        sub_1002A1364();
        id v44 = objc_allocWithZone(&OBJC_CLASS___CHHandle);
        if (sub_1002A12CC()) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
  }

uint64_t sub_1002A0998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    while (1)
    {
      Swift::String_optional v8 = String.Iterator.next()();
      if (!v8.value._object) {
        break;
      }
      if (countAndFlagsBits == v8.value._countAndFlagsBits && object == v8.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v8.value._object);
      }

      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)( countAndFlagsBits,  object,  v8.value._countAndFlagsBits,  v8.value._object,  0LL);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v8.value._object);
        if ((v10 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0LL;
        }
      }

      Swift::String_optional v11 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
      object = v11.value._object;
      if (!v11.value._object) {
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
LABEL_12:
    swift_bridgeObjectRelease(a4);
    uint64_t v12 = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease(a2);
    BOOL v13 = v12 == 0LL;
    swift_bridgeObjectRelease(v12);
  }

  return v13;
}

unint64_t sub_1002A0AF4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v5 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    unint64_t v7 = v6 | (v5 << 16);
    unint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v8 & 1) != 0) {
      unint64_t result = v7;
    }
    if (4 * v5 >= result >> 14)
    {
      uint64_t v9 = String.subscript.getter(result, v7, a2, a3);
      swift_bridgeObjectRelease(a3);
      return v9;
    }
  }

  __break(1u);
  return result;
}

void sub_1002A0BC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v7 = sub_1001C7370(v6, 56LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037CBF0;
  char v8 = (void *)objc_opt_self(&OBJC_CLASS___CHRecentCall);
  *(void *)(v7 + 32) = [v8 predicateForCallsWithStatusOriginated:1];
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v10 = sub_1001C7370(v9, 64LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(void *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCHServiceProviderFaceTime);
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCHServiceProviderTelephony);
  *(void *)(v10 + 56) = v12;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  id v14 = [v8 predicateForCallsWithAnyServiceProviders:isa];

  *(void *)(v7 + 40) = v14;
  id v15 = [v8 predicateForCallsWithRemoteParticipantCount:1];
  *(void *)(v7 + 48) = v15;
  uint64_t v76 = v7;
  sub_1002A134C((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v74);
  uint64_t v23 = sub_1001C7370(v6, 40LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v8 predicateForCallsWithRemoteParticipantHandleValue:v24];

  *(void *)(v23 + 32) = v25;
  uint64_t v75 = v23;
  uint64_t v34 = specialized Array._endMutation()(v26, v27, v28, v29, v30, v31, v32, v33);
  if (a4)
  {
    uint64_t v35 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000LL) == 0) {
      uint64_t v35 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v35)
    {
      NSString v36 = String._bridgeToObjectiveC()();
      id v37 = sub_1001D8FD4(v8, "predicateForCallsWithRemoteParticipantHandleNormalizedValue:");

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      sub_1002A1328();
      if (v40) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, a3 + 1, 1LL);
      }
      uint64_t v41 = sub_1002A130C();
      uint64_t v34 = specialized Array._endMutation()(v41, v42, v43, v44, v45, v46, v47, v48);
      uint64_t v23 = v75;
    }
  }

  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0) {
      uint64_t v60 = v23;
    }
    else {
      uint64_t v60 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001E927C();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v60);
    uint64_t v34 = sub_1001AA9C8();
    if (v61 >= 2)
    {
LABEL_10:
      sub_1001B4C00(v34, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
      sub_1002A00E8(v23);
      sub_1002A1370();
      sub_1002A1328();
      if (v40) {
        sub_1002A12EC(v50);
      }
      uint64_t v51 = sub_1002A130C();
      uint64_t v59 = sub_1002A134C(v51, v52, v53, v54, v55, v56, v57, v58, v75);
      goto LABEL_25;
    }

    sub_1001E927C();
    unint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v60);
    sub_1001AA9C8();
  }

  else
  {
    unint64_t v49 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v49 > 1) {
      goto LABEL_10;
    }
  }

  if (v49)
  {
    sub_1002734A0(0LL, (v23 & 0xC000000000000001LL) == 0, v23);
    if ((v23 & 0xC000000000000001LL) != 0) {
      id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v23);
    }
    else {
      id v62 = *(id *)(v23 + 32);
    }
    uint64_t v63 = v62;
    sub_1001AA9C8();
    id v64 = v63;
    sub_1002A1370();
    sub_1002A1328();
    if (v40) {
      sub_1002A12EC(v65);
    }
    uint64_t v66 = sub_1002A130C();
    sub_1002A134C(v66, v67, v68, v69, v70, v71, v72, v73, v75);
  }

  else
  {
    uint64_t v59 = sub_1001AA9C8();
  }

BOOL sub_1002A0F34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v5;
  id v7 = sub_1001704C4();
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v9 = (__n128 *)sub_1001C7370(v8, 112LL);
  v9[3].n128_u64[1] = sub_1002A135C(v9, (__n128)xmmword_10037B1B0);
  v9[4].n128_u64[0] = sub_1002A1180();
  v9[2].n128_u64[0] = (unint64_t)v4;
  v9[6].n128_u64[0] = sub_1002A1318();
  v9[6].n128_u64[1] = sub_1002A137C((unint64_t *)&unk_10044C520);
  v9[4].n128_u64[1] = (unint64_t)v6;
  uint64_t v10 = v4;
  id v11 = v6;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)( "%@ Fetching call history calls matching predicate %@",  52LL,  2LL,  &_mh_execute_header,  v7,  v12,  v9);

  swift_bridgeObjectRelease(v9);
  id v13 =  [*(id *)&v10[OBJC_IVAR___CSDCallHistoryCallFilter_callHistoryManager] callsWithPredicate:v11 limit:1 offset:0 batchSize:0];
  uint64_t v14 = sub_1001B4C00((uint64_t)v13, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001E927C();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v18);

    sub_100297494();
  }

  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1001AA9C8();
  }

  return v16 == 0;
}

void sub_1002A10C0()
{
}

id sub_1002A10F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallHistoryCallFilter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CallHistoryCallFilter()
{
  return objc_opt_self(&OBJC_CLASS___CSDCallHistoryCallFilter);
}

unint64_t sub_1002A1180()
{
  unint64_t result = qword_10044C510;
  if (!qword_10044C510)
  {
    uint64_t v1 = type metadata accessor for CallHistoryCallFilter();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044C510);
  }

  return result;
}

id sub_1002A11BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  if (a5)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    NSString v10 = 0LL;
  }

  id v11 = [v5 initWithType:a1 value:v9 normalizedValue:v10];

  return v11;
}

uint64_t sub_1002A125C(void *a1)
{
  return sub_1002A1274(a1, (SEL *)&selRef_isoCountryCode);
}

uint64_t sub_1002A1268(void *a1)
{
  return sub_1002A1274(a1, (SEL *)&selRef_normalizedValue);
}

uint64_t sub_1002A1274(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = sub_10022D0F0((uint64_t)v3);

  return v4;
}

id sub_1002A12CC()
{
  return sub_1002A11BC(v0, v1, v2, v3, v4);
}

uint64_t sub_1002A12EC@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

uint64_t sub_1002A1304()
{
  return objc_opt_self(*(void *)(v0 + 3288));
}

uint64_t sub_1002A130C()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_1002A1318()
{
  return sub_1001B4B94(0LL, v0, v1);
}

  ;
}

NSString sub_1002A1338()
{
  return String._bridgeToObjectiveC()();
}

void sub_1002A1340()
{
}

uint64_t sub_1002A134C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1002A1354(uint64_t a1, SEL *a2)
{
  return sub_1002A1274(v2, a2);
}

uint64_t sub_1002A135C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for CallHistoryCallFilter();
}

void sub_1002A1364()
{
}

uint64_t sub_1002A1370()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_1002A137C(unint64_t *a1)
{
  return sub_100213094(a1, v1, v2);
}

void *sub_1002A1388(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v32 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  id v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    v28[1] = v3;
    unint64_t v31 = a1 & 0xC000000000000001LL;
    uint64_t v9 = 4LL;
    while (1)
    {
      uint64_t v3 = v9 - 4;
      if (v31)
      {
        NSString v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1);
      }

      else
      {
        NSString v10 = *(void **)(a1 + 8 * v9);
        swift_unknownObjectRetain(v10);
      }

      uint64_t v11 = v9 - 3;
      if (__OFADD__(v3, 1LL)) {
        break;
      }
      id v12 = [v10 SIMIdentifier];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      id v16 = [v32 account];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v33 = v10;
        uint64_t v18 = a1;
        uint64_t v19 = v8;
        id v20 = [v16 UUID];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v21 = UUID.uuidString.getter();
        uint64_t v23 = v22;
        (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
        if (v13 == v21 && v15 == v23)
        {

          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v15);
LABEL_20:
          swift_bridgeObjectRelease(v15);
          return v33;
        }

        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v21, v23, 0LL);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v23);
        if ((v25 & 1) != 0)
        {

          uint64_t v15 = v18;
          goto LABEL_20;
        }

        swift_unknownObjectRelease(v33);
        uint64_t v8 = v19;
        a1 = v18;
      }

      else
      {
        swift_unknownObjectRelease(v10);
        swift_bridgeObjectRelease(v15);
      }

      ++v9;
      if (v11 == v8) {
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

id sub_1002A1610()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  id v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "tu_defaults");
  id v3 = [v2 silenceUnknownCallersEnabled];

  id v4 = sub_1001704C4();
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(void *)(v6 + 56) = ObjectType;
  *(void *)(v6 + 64) = sub_1002A1D04();
  *(void *)(v6 + 32) = v0;
  *(void *)(v6 + 96) = &type metadata for Bool;
  *(void *)(v6 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 72) = (_BYTE)v3;
  uint64_t v7 = static os_log_type_t.default.getter(v0);
  os_log(_:dso:log:type:_:)("%@ isSilenceUnknownCallersEnabled: %d", 37LL, 2LL, &_mh_execute_header, v4, v7, v6);

  swift_bridgeObjectRelease(v6);
  return v3;
}

uint64_t sub_1002A171C(void *a1)
{
  if ([a1 verificationStatus] == (id)1)
  {
    id v3 = sub_1001704C4();
    uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v5 = (__n128 *)sub_1002A1D50(v4);
    v5[4].n128_u64[0] = sub_1002A1D68(v5, (__n128)xmmword_10037B1B0);
    v5[2].n128_u64[0] = v1;
    v5[6].n128_u64[0] = sub_1001B4B94(0LL, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    unint64_t v6 = sub_10025880C();
    sub_1002A1D5C(v6);
    uint64_t v9 = static os_log_type_t.default.getter(a1);
    NSString v10 = "%@ call is verified; will allow call update %@";
    uint64_t v11 = 46LL;
  }

  else
  {
    char v12 = sub_1002A198C(a1);
    id v3 = sub_1001704C4();
    uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v5 = (__n128 *)sub_1002A1D50(v13);
    v5[4].n128_u64[0] = sub_1002A1D68(v5, (__n128)xmmword_10037B1B0);
    v5[2].n128_u64[0] = v1;
    v5[6].n128_u64[0] = sub_1001B4B94(0LL, &qword_10044C570, &OBJC_CLASS___CXCallUpdate_ptr);
    unint64_t v14 = sub_10025880C();
    sub_1002A1D5C(v14);
    id v15 = a1;
    uint64_t v9 = static os_log_type_t.default.getter(v15);
    if ((v12 & 1) != 0)
    {
      sub_1002A1D40( (uint64_t)"%@ Call is the same number as subscriber; OwnNumberCallFilter will not allow call %@",
        84LL,
        v7,
        (uint64_t)&_mh_execute_header,
        v8,
        v9);

      swift_bridgeObjectRelease(v5);
      [v15 setFilteredOutReason:2];
      uint64_t v16 = 1LL;
      goto LABEL_7;
    }

    NSString v10 = "%@ Call is not the same number as subscriber; OwnNumberCallFilter will allow call %@";
    uint64_t v11 = 84LL;
  }

  sub_1002A1D40((uint64_t)v10, v11, v7, (uint64_t)&_mh_execute_header, v8, v9);

  swift_bridgeObjectRelease(v5);
  uint64_t v16 = 0LL;
LABEL_7:
  id v17 = [a1 silencingUserInfo];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallMetricsOwnNumber");
  uint64_t v20 = v19;
  id v21 = [objc_allocWithZone(NSNumber) initWithBool:v16];
  uint64_t v25 = v18;
  uint64_t v26 = v20;
  swift_bridgeObjectRetain(v20);
  uint64_t v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v25, &type metadata for String);
  objc_msgSend(v17, "__swift_setObject:forKeyedSubscript:", v21, v22, v25, v26);
  swift_bridgeObjectRelease(v20);

  swift_unknownObjectRelease(v22);
  if ((_DWORD)v16) {
    unsigned __int8 v23 = sub_1002A1610();
  }
  else {
    unsigned __int8 v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_1002A198C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 remoteHandle];
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  id v6 = [a1 account];
  if (!v6 || (uint64_t v7 = v6, v8 = [v6 handle], v7, !v8))
  {

LABEL_7:
    char v9 = 0;
    return v9 & 1;
  }

  sub_1001B4B94(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(v8, v5) & 1) != 0)
  {

    char v9 = 1;
    return v9 & 1;
  }

  id v11 = [*(id *)(v2 + OBJC_IVAR___CSDOwnNumberCallFilter_idsCTAdapter) currentSIMsWithError:0];
  uint64_t v12 = sub_1001AFF14(&qword_10044C578);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  unint64_t v14 = sub_1002A1388(v13, a1);
  swift_bridgeObjectRelease(v13);
  if (v14)
  {
    id v15 = [v14 phoneNumber];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
  }

  id v19 = [v5 value];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  if (!v18)
  {
    swift_bridgeObjectRelease(v22);

    swift_unknownObjectRelease(v14);
    goto LABEL_7;
  }

  if (v16 == v20 && v18 == v22) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0LL);
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v22);

  swift_unknownObjectRelease(v14);
  return v9 & 1;
}

id sub_1002A1C10(void *a1)
{
  id v3 = (objc_class *)sub_1001B5DB8();
  uint64_t v4 = OBJC_IVAR___CSDOwnNumberCallFilter_idsCTAdapter;
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___IDSCTAdapter);
  id v6 = v1;
  *(void *)&v1[v4] = [v5 sharedInstance];

  v9.receiver = v6;
  v9.super_class = v3;
  id v7 = objc_msgSendSuper2(&v9, "initWithQueue:", a1);

  return v7;
}

uint64_t type metadata accessor for OwnNumberCallFilter()
{
  return objc_opt_self(&OBJC_CLASS___CSDOwnNumberCallFilter);
}

unint64_t sub_1002A1D04()
{
  unint64_t result = qword_10044C568;
  if (!qword_10044C568)
  {
    uint64_t v1 = type metadata accessor for OwnNumberCallFilter();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044C568);
  }

  return result;
}

uint64_t sub_1002A1D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v6, a6, v7);
}

uint64_t sub_1002A1D50(uint64_t a1)
{
  return swift_allocObject(a1, 112LL, 7LL);
}

id sub_1002A1D5C(uint64_t a1)
{
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 72) = v1;
  return v2;
}

unint64_t sub_1002A1D68(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  return sub_1002A1D04();
}

ValueMetadata *type metadata accessor for DiscoveryModeDescriptor()
{
  return &type metadata for DiscoveryModeDescriptor;
}

unint64_t sub_1002A1D84()
{
  return 0xD000000000000019LL;
}

unint64_t sub_1002A1DA0()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1002A1DBC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1002A1E04()
{
  return type metadata accessor for SoundProvider(0LL);
}

uint64_t type metadata accessor for SoundProvider(uint64_t a1)
{
  uint64_t result = qword_10044C5B0;
  if (!qword_10044C5B0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundProvider);
  }
  return result;
}

void sub_1002A1E44(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

void sub_1002A1EBC(uint64_t a1)
{
  if (!qword_10044C5C0)
  {
    uint64_t v2 = type metadata accessor for SoundDescriptor(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10044C5C0);
    }
  }

uint64_t sub_1002A1F10()
{
  uint64_t v1 = sub_10020F520();
  sub_1002A26B8(v1);
  uint64_t v2 = OBJC_IVAR____TtC13callservicesd13SoundProvider_player;
  *(void *)(v0 + sub_1001B03C0(v1, v0, v2) = [objc_allocWithZone(TUCallSoundPlayer) init];
  return v0;
}

void sub_1002A1F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a3;
  uint64_t v53 = a2;
  uint64_t v5 = sub_10020F520();
  sub_1001B0E88();
  __chkstk_darwin(v6);
  sub_1001B0F00();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_1001AFF14(&qword_10044C668);
  sub_1001B0E88();
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v14 = v13 - v12;
  sub_1001AFF14(&qword_100447490);
  sub_1001B0E88();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v51 - v20;
  __chkstk_darwin(v19);
  unsigned __int8 v23 = (char *)&v51 - v22;
  sub_100252240(a1, (uint64_t)&v51 - v22);
  sub_1002A26E8((uint64_t)v23);
  uint64_t v24 = v3 + OBJC_IVAR____TtC13callservicesd13SoundProvider_activeDescriptor;
  sub_1001B0E80(v3 + OBJC_IVAR____TtC13callservicesd13SoundProvider_activeDescriptor, (uint64_t)v56, 0LL);
  uint64_t v25 = v14 + *(int *)(v10 + 48);
  sub_1002A2428((uint64_t)v23, v14);
  sub_1002A2428(v24, v25);
  sub_1002A26CC(v14);
  if (v26)
  {
    sub_1001BB478((uint64_t)v23, &qword_100447490);
    sub_1002A26CC(v25);
    if (v26)
    {
      sub_1001BB478(v14, &qword_100447490);
LABEL_14:
      id v34 = sub_1001704C4();
      uint64_t v35 = static os_log_type_t.default.getter(v34);
      os_log(_:dso:log:type:_:)( "Asked to begin or update playback of sound but new descriptor is equal to activeDescriptor so doing nothing",  107LL,  2LL,  &_mh_execute_header,  v34,  v35,  _swiftEmptyArrayStorage);

      return;
    }

    goto LABEL_9;
  }

  sub_1002A2428(v14, (uint64_t)v21);
  sub_1002A26CC(v25);
  if (v26)
  {
    sub_1001BB478((uint64_t)v23, &qword_100447490);
    sub_100252284((uint64_t)v21);
LABEL_9:
    uint64_t v51 = v18;
    sub_1001BB478(v14, &qword_10044C668);
    goto LABEL_10;
  }

  uint64_t v51 = v18;
  sub_100208364(v25, v9);
  char v33 = sub_1002519E8((uint64_t)v21, v9);
  sub_100252284(v9);
  sub_1001BB478((uint64_t)v23, &qword_100447490);
  sub_100252284((uint64_t)v21);
  sub_1001BB478(v14, &qword_100447490);
  if ((v33 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_10:
  sub_1002A2470();
  id v27 = [objc_allocWithZone(TUCallSoundPlayerDescriptor) initWithSoundType:*(void *)a1 provider:*(void *)(a1 + 8) video:*(unsigned __int8 *)(a1 + 16) region:*(void *)(a1 + 24) audioPlayingWarmupNeeded:*(unsigned __int8 *)(a1 + *(int *)(v5 + 36))];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void **)(v3 + OBJC_IVAR____TtC13callservicesd13SoundProvider_player);
    if (v53)
    {
      uint64_t v30 = v52;
      void aBlock[4] = v53;
      uint64_t v55 = v52;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1002808C8;
      void aBlock[3] = &unk_1003E65B8;
      unint64_t v31 = _Block_copy(aBlock);
      uint64_t v32 = v55;
      swift_retain(v30);
      swift_release(v32);
    }

    else
    {
      unint64_t v31 = 0LL;
    }

    uint64_t v44 = (uint64_t)v51;
    unsigned int v45 = [v29 attemptToPlayDescriptor:v28 completion:v31];
    _Block_release(v31);
    if (v45)
    {

      sub_100252240(a1, v44);
      sub_1002A26E8(v44);
      sub_1001B0E80(v24, (uint64_t)aBlock, 33LL);
      sub_1002A2658(v44, v24);
      swift_endAccess(aBlock);
    }

    else
    {
      id v46 = sub_1001704C4();
      uint64_t v47 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v48 = sub_1001DEA68(v47);
      *(_OWORD *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
      *(void *)(v48 + 56) = sub_1002A25DC();
      *(void *)(v48 + 64) = sub_1002A2618();
      *(void *)(v48 + 32) = v28;
      id v49 = v28;
      uint64_t v50 = static os_log_type_t.default.getter(v49);
      os_log(_:dso:log:type:_:)( "Attempt to play call sound player descriptor %@ returned false",  62LL,  2LL,  &_mh_execute_header,  v46,  v50,  v48);

      swift_bridgeObjectRelease(v48);
    }
  }

  else
  {
    id v36 = sub_1001704C4();
    uint64_t v37 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v38 = sub_1001DEA68(v37);
    *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    sub_100252240(a1, v9);
    uint64_t v39 = String.init<A>(reflecting:)(v9, v5);
    uint64_t v41 = v40;
    *(void *)(v38 + 56) = &type metadata for String;
    unint64_t v42 = sub_1001B2330();
    *(void *)(v38 + 64) = v42;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v41;
    uint64_t v43 = static os_log_type_t.default.getter(v42);
    os_log(_:dso:log:type:_:)( "Asked to begin or update playback of sound with descriptor %@ but no TUCallSoundPlayerDescriptor could be determin ed, so not playing",  132LL,  2LL,  &_mh_execute_header,  v36,  v43,  v38);

    swift_bridgeObjectRelease(v38);
  }

uint64_t sub_1002A2428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A2470()
{
  uint64_t v4 = v3 - v2;
  id v5 = sub_1001704C4();
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v7 = sub_1001DEA68(v6);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v8 = v0 + OBJC_IVAR____TtC13callservicesd13SoundProvider_activeDescriptor;
  sub_1001B0E80(v0 + OBJC_IVAR____TtC13callservicesd13SoundProvider_activeDescriptor, (uint64_t)v18, 0LL);
  sub_1002A2428(v8, v4);
  sub_1001AEAC4(v4);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_1001BB478(v4, &qword_100447490);
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v13 = sub_1001B2330();
  *(void *)(v7 + 64) = v13;
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("Stopping sound playback for %@", 30LL, 2LL, &_mh_execute_header, v5, v14, v7);

  swift_bridgeObjectRelease(v7);
  [*(id *)(v0 + OBJC_IVAR____TtC13callservicesd13SoundProvider_player) stopPlaying];
  uint64_t v15 = sub_10020F520();
  sub_1002A26B8(v15);
  sub_1001B0E80(v8, (uint64_t)v17, 33LL);
  sub_1002A2658(v4, v8);
  return swift_endAccess(v17);
}

unint64_t sub_1002A25DC()
{
  unint64_t result = qword_10044C670;
  if (!qword_10044C670)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TUCallSoundPlayerDescriptor);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10044C670);
  }

  return result;
}

unint64_t sub_1002A2618()
{
  unint64_t result = qword_10044C678;
  if (!qword_10044C678)
  {
    unint64_t v1 = sub_1002A25DC();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044C678);
  }

  return result;
}

uint64_t sub_1002A2658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A26A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002A26B0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002A26B8(uint64_t a1)
{
  return sub_1001A9670(v1, 1LL, 1LL, a1);
}

uint64_t sub_1002A26CC(uint64_t a1)
{
  return sub_1001AB0AC(a1, 1LL, v1);
}

uint64_t sub_1002A26E8(uint64_t a1)
{
  return sub_1001A9670(a1, 0LL, 1LL, v1);
}

uint64_t sub_1002A26F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1002A2734(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1002A2768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002A27AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002A27F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002A2834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002A2878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A2884);
}

uint64_t sub_1002A2884()
{
  uint64_t v2 = sub_1002A2AA0();
  return sub_1001AB0AC(v1, v0, v2);
}

uint64_t sub_1002A28AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A28B8);
}

uint64_t sub_1002A28B8()
{
  uint64_t v2 = sub_1002A2AA0();
  return sub_1001A9670(v1, v0, v0, v2);
}

uint64_t type metadata accessor for AudioInterruptionDeferredEndDescriptor(uint64_t a1)
{
  uint64_t result = qword_10044C6D8;
  if (!qword_10044C6D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudioInterruptionDeferredEndDescriptor);
  }
  return result;
}

uint64_t sub_1002A291C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_1002A298C()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  unint64_t v1 = sub_1002A2A60();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  String.append(_:)(v2);
  sub_1001B0EB8();
  v3._uint64_t countAndFlagsBits = 32LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x444955556C6C6163LL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  sub_1001B0EB8();
  swift_bridgeObjectRetain(0x8000000100377A70LL);
  v5._uint64_t countAndFlagsBits = 41LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  sub_1001B0EB8();
  return 0xD000000000000027LL;
}

unint64_t sub_1002A2A60()
{
  unint64_t result = qword_100447E68;
  if (!qword_100447E68)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100447E68);
  }

  return result;
}

uint64_t sub_1002A2AA0()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_1002A2AB0()
{
  uint64_t v0 = type metadata accessor for ConversationLinkDescriptorManager();
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  uint64_t result = sub_1002A3D04();
  qword_1004542B8 = v1;
  return result;
}

void sub_1002A2AE8()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (!v1)
  {
    id v2 = [objc_allocWithZone(TUConversationLinkDescriptorXPCClientDataSource) init];
    Swift::String v3 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v2;
    id v4 = v2;

    uint64_t v1 = 0LL;
  }

  id v5 = v1;
  sub_10010B978();
}

uint64_t sub_1002A2B48()
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1002A3964();
  if (v6)
  {
    sub_1002A3E00();
    uint64_t v7 = qword_100446930;
    swift_bridgeObjectRetain(v8);
    if (v7 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v9 = sub_1001B0E98();
    uint64_t v10 = sub_1001B0D98(v9, (uint64_t)qword_1004541B0);
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v10, v11, v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)sub_1001B0E78(2LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ConversationLinkSync: Migrating local identifier", v15, 2u);
      sub_1001B0E60((uint64_t)v15);
    }

    uint64_t v16 = sub_1002A3DDC();
    char v17 = sub_1002A3200(v16);
    swift_bridgeObjectRelease(v1);
    if ((v17 & 1) != 0) {
      sub_1002A3C20();
    }
  }

  else
  {
    uint64_t v18 = sub_1002A3424();
    if (v19)
    {
      sub_1002A3E00();
    }

    else
    {
      uint64_t v20 = UUID.init()(v18);
      UUID.uuidString.getter(v20);
      sub_1002A3E00();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v21 = sub_1002A3DDC();
      char v22 = sub_1002A3200(v21);
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v23 = sub_1001B0E98();
      sub_1001B0D98(v23, (uint64_t)qword_1004541B0);
      uint64_t v24 = sub_1002A3DA4();
      id v27 = (os_log_s *)Logger.logObject.getter(v24, v25, v26);
      os_log_type_t v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = sub_1001B0E78(18LL);
        uint64_t v30 = sub_1001B0E78(32LL);
        uint64_t v33 = v30;
        *(_DWORD *)uint64_t v29 = 136315394;
        swift_bridgeObjectRetain(v1);
        uint64_t v32 = sub_1001D7CF0(v0, v1, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v29 + 4, v29 + 12);
        sub_10028EAF0(v1);
        *(_WORD *)(v29 + 12) = 1024;
        LODWORD(v32) = v22 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v29 + 14, v29 + 18);
        _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "ConversationLinkSync: localGeneratorIdentifier: No local generated identifier -- creating it now {locallyGener atedIdentifier: %s, success: %{BOOL}d}",  (uint8_t *)v29,  0x12u);
        sub_1001B0F64(v30);
        sub_1001B0E60(v30);
        sub_1001B0E60(v29);
      }

      else
      {

        sub_10022CCA4(v1);
      }
    }
  }

  return v0;
}