BOOL sub_10017A144(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  CSDMessagingHandle *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0LL;
    while (1)
    {
      v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0LL;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 56LL;
        goto LABEL_29;
      case 2u:
        v15 = objc_alloc_init(&OBJC_CLASS___CSDMessagingHandle);
        objc_storeStrong((id *)(a1 + 16), v15);
        if (PBReaderPlaceMark(a2, v22) && (sub_10004A748((uint64_t)v15, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v22);
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        v16 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v16);
        v14 = 32LL;
        goto LABEL_29;
      case 4u:
        v17 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v17);
        v14 = 48LL;
        goto LABEL_29;
      case 5u:
        v18 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v18);
        v14 = 8LL;
        goto LABEL_29;
      case 6u:
        v19 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v19);
        v14 = 40LL;
        goto LABEL_29;
      case 7u:
        v20 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v20);
        v14 = 24LL;
LABEL_29:
        v15 = *(CSDMessagingHandle **)(a1 + v14);
        *(void *)(a1 + v14) = v13;
        goto LABEL_30;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
          return 0LL;
        }
        goto LABEL_31;
    }
  }

void sub_10017BE1C(uint64_t a1)
{
  v1 = -[CSDReportingController initWithQueue:]( objc_alloc(&OBJC_CLASS___CSDReportingController),  "initWithQueue:",  *(void *)(a1 + 32));
  v2 = (void *)qword_10044D138;
  qword_10044D138 = (uint64_t)v1;
}

void sub_10017C08C(id a1, CSDClient *a2)
{
  v2 = a2;
  id v3 = sub_1001704C4();
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    v6 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "XPC connection interrupted from client %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10017C134(id a1, CSDClient *a2)
{
  v2 = a2;
  id v3 = sub_1001704C4();
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    v6 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "XPC connection invalidated from client %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10017C1DC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[TUCallCenter sharedInstance](&OBJC_CLASS___TUCallCenter, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue([v3 conversationManager]);
  [v2 addDelegate:*(void *)(a1 + 32) queue:*(void *)(a1 + 40)];
}

void sub_10017C420(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  id v3 = sub_1001704C4();
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v17 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Call screening changed for call: %@", buf, 0xCu);
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reporters", 0));
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v10, "reportingController:screeningChangedForCall:") & 1) != 0) {
          [v10 reportingController:*(void *)(a1 + 40) screeningChangedForCall:v2];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }
}

void sub_10017C640(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  id v3 = sub_1001704C4();
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Call status changed for call: %@", buf, 0xCu);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reporters", 0));
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v10, "reportingController:statusChangedForCall:totalCallCount:") & 1) != 0)
        {
          uint64_t v11 = *(void *)(a1 + 40);
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[TUCallCenter sharedInstance](&OBJC_CLASS___TUCallCenter, "sharedInstance"));
          objc_msgSend( v10,  "reportingController:statusChangedForCall:totalCallCount:",  v11,  v2,  objc_msgSend(v12, "currentAudioAndVideoCallCount"));
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_10017D83C(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "call: %@", buf, 0xCu);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) reporters]);
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v11 = sub_1001704C4();
        __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v19 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "reporter: %@", buf, 0xCu);
        }

        if ((objc_opt_respondsToSelector( v10,  "reportingController:createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:") & 1) != 0) {
          [v10 reportingController:*(void *)(a1 + 40) createOneToOneFTReportingSessionForCallWithUUID:*(void *)(a1 + 32) withReportingHierarchyToken:*(void *)(a1 + 48) withVideo:*(unsigned __int8 *)(a1 + 56)];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_10017DAB4(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v19 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "createConversationReportingSession using conversation: %@",  buf,  0xCu);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) reporters]);
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v11 = sub_1001704C4();
        __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v19 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "reporter: %@", buf, 0xCu);
        }

        if ((objc_opt_respondsToSelector(v10, "reportingController:createConversationReportingSessionForConversation:") & 1) != 0) {
          [v10 reportingController:*(void *)(a1 + 40) createConversationReportingSessionForConversation:*(void *)(a1 + 32)];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_100181308( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100181320(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

id sub_1001814E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) voiceOverObserver:*(void *)(a1 + 40) didChangeEnabled:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100181688(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateToQueue]);
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_100181740(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateToQueue]);
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_10018187C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEnabled];
}

void sub_1001819B4(_Unwind_Exception *a1)
{
}

void sub_100181A28(_Unwind_Exception *a1)
{
}

void sub_100181B24(_Unwind_Exception *a1)
{
}

id sub_100181B38(uint64_t a1, void *a2)
{
  return [a2 containsOutgoingRestrictedHandle:*(void *)(a1 + 32) forBundleIdentifier:*(void *)(a1 + 40) performSynchronously:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100181BFC(_Unwind_Exception *a1)
{
}

id sub_100181C10(uint64_t a1, void *a2)
{
  return _[a2 containsRecentsRestrictedHandle:*(void *)(a1 + 32)];
}

void sub_100181CD0(_Unwind_Exception *a1)
{
}

id sub_100181CE4(uint64_t a1, void *a2)
{
  return _[a2 containsRestrictedHandle:*(void *)(a1 + 32)];
}

void sub_100181E38(_Unwind_Exception *a1)
{
}

void sub_100181F60(_Unwind_Exception *a1)
{
}

id sub_100181F74(void *a1, void *a2)
{
  return [a2 isUnknownAddress:a1[4] normalizedAddress:a1[5] forBundleIdentifier:a1[6]];
}

void sub_100182038(_Unwind_Exception *a1)
{
}

id sub_10018204C(uint64_t a1, void *a2)
{
  return [a2 isUnknownCaller:*(void *)(a1 + 32)];
}

void sub_1001821F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10018220C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___CSDBlockedCallFilter, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    && [v3 shouldFilterIncomingCall:*(void *)(a1 + 32) from:*(void *)(a1 + 40)])
  {
    id v6 = sub_1001704C4();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
      int v11 = 138412546;
      id v12 = v3;
      __int16 v13 = 2112;
      __int128 v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@ reported blocked call with UUID %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

BOOL sub_10018231C(id a1, CSDCallFilter *a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CSDUnknownCallFilter, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  return isKindOfClass & 1;
}

uint64_t sub_100182364(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___CSDUnknownCallFilter, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    && ([v3 shouldFilterIncomingCall:*(void *)(a1 + 32) from:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v7 = sub_1001704C4();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
      int v11 = 138412546;
      id v12 = v3;
      __int16 v13 = 2112;
      __int128 v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@ reported known call update with UUID %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v6 = 1LL;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_10018255C(_Unwind_Exception *a1)
{
}

id sub_100182570(uint64_t a1, void *a2)
{
  return [a2 shouldRestrictAddresses:*(void *)(a1 + 32) forBundleIdentifier:*(void *)(a1 + 40) performSynchronously:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100182660(_Unwind_Exception *a1)
{
}

id sub_100182674(uint64_t a1, void *a2)
{
  return [a2 willRestrictAddresses:*(void *)(a1 + 32) forBundleIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_100182C28(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_41;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_43;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 24) = v14;
        goto LABEL_48;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0LL;
                goto LABEL_47;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0LL;
        }
LABEL_47:
        *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v20 != 0;
        goto LABEL_48;
      case 3u:
        v23 = objc_alloc_init(&OBJC_CLASS___CSDMessagingConversationLinkGeneratorDescriptor);
        [(id)a1 addGeneratorDescriptors:v23];
        goto LABEL_39;
      case 4u:
        v23 = objc_alloc_init(&OBJC_CLASS___CSDMessagingLinkSyncCheckInGeneratorDescriptorInfo);
        [(id)a1 addGenerateDescriptorInfos:v23];
        if (PBReaderPlaceMark(a2, v24) && (sub_10016F870((uint64_t)v23, a2) & 1) != 0)
        {
LABEL_39:
          PBReaderRecallMark(a2, v24);

LABEL_48:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

void sub_100183D5C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"outgoingLocalParticipantUUID == %@",  *(void *)(a1 + 32)));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chManager]);
  [v2 setOutgoingLocalParticipantUUID:*(void *)(a1 + 48) forRecentCallsMatchingPredicate:v3];
}

void sub_100183E90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if ((objc_opt_respondsToSelector(v5, "callHistoryManager:recentCallRequestedFor:withStartDate:avMode:") & 1) != 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100183F60;
    block[3] = &unk_1003D7D28;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    BOOL v9 = *(void **)(a1 + 40);
    id v13 = v7;
    uint64_t v14 = v8;
    id v15 = v9;
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    id v16 = v10;
    uint64_t v17 = v11;
    dispatch_async(v6, block);
  }
}

id sub_100183F60(uint64_t a1)
{
  return _[*(id *)(a1 + 32) callHistoryManager:*(void *)(a1 + 40) recentCallRequestedFor:*(void *)(a1 + 48) withStartDate:*(void *)(a1 + 56) avMode:*(void *)(a1 + 64)];
}

void sub_100184094(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if ((objc_opt_respondsToSelector(v5, "recentCallsDidChangeForCallHistoryManager:") & 1) != 0)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10018413C;
    v9[3] = &unk_1003D7758;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    dispatch_async(v6, v9);
  }
}

id sub_10018413C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recentCallsDidChangeForCallHistoryManager:*(void *)(a1 + 40)];
}

void sub_100184570(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v12 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 URI]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[TUHandle normalizedHandleWithDestinationID:]( &OBJC_CLASS___TUHandle,  "normalizedHandleWithDestinationID:",  v7));

    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v12 properties]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 expirationDate]);
    (*(void (**)(uint64_t, void *, void *, void))(v9 + 16))(v9, v8, v11, 0LL);
  }
}

uint64_t sub_100184728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100184CAC(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(v4 + 64);
    int v7 = 138412802;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@ initialized for service %@ with the following devices: %@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_100185B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100185B4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100185B5C(uint64_t a1)
{
}

void sub_100185B64(uint64_t a1)
{
}

void sub_1001862CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001862E4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_10018639C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001863B4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 9LL);
  return result;
}

void sub_1001864F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100186508(uint64_t a1)
{
}

void sub_1001865E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001865FC(uint64_t a1)
{
}

void sub_1001866D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001866F0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[9];
  if (!v3)
  {
    [v2 _update];
    id v3 = *(void **)(*(void *)(a1 + 32) + 72LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

void sub_100186B50(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = sub_1001704C4();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[WARN] IDS failed to retrieve pseudonym with error %@",  (uint8_t *)&v8,  0xCu);
    }

    int v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    int v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
}

void sub_1001870D8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    (*(void (**)(void, void, void, uint64_t))(v3 + 16))(*(void *)(a1 + 32), 0LL, 0LL, a3);
  }

  else
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([a2 properties]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 expirationDate]);
    (*(void (**)(uint64_t, uint64_t, void *, void))(v3 + 16))(v3, 1LL, v4, 0LL);
  }

uint64_t sub_100187294(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), a2 == 1);
}

uint64_t sub_1001874C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100187A34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_100187F7C(id a1)
{
  CFPropertyListRef v1 = CFPreferencesCopyAppValue(@"pairedDeviceUniqueIDOverride", TUBundleIdentifierTelephonyUtilitiesFramework);
  id v2 = (void *)qword_10044D148;
  qword_10044D148 = (uint64_t)v1;
}

void sub_1001885C8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  if (a3)
  {
    id v5 = a3;
    uint64_t v6 = -[CSDMessagingRelayMessage initWithData:]( objc_alloc(&OBJC_CLASS___CSDMessagingRelayMessage),  "initWithData:",  v5);

    int v7 = (void *)objc_claimAutoreleasedReturnValue(-[CSDMessagingRelayMessage inviteData](v6, "inviteData"));
    a3 = (void *)objc_claimAutoreleasedReturnValue([v7 relayInviteDictionary]);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10018A664(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, 1LL);
  }
  return result;
}

void sub_10018BA20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id location, char a29)
{
}

uint64_t sub_10018BA50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10018BA60(uint64_t a1)
{
}

void sub_10018BA68(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v2 = sub_1001704C4();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "... but we were told to ignore the invite",  v6,  2u);
    }
  }

  else
  {
    id v5 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10018BBA4;
    block[3] = &unk_1003DC230;
    objc_copyWeak(&v13, (id *)(a1 + 80));
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    dispatch_async(v5, block);

    objc_destroyWeak(&v13);
  }

void sub_10018BBA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    id v3 = sub_1001704C4();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "... so we are going to handle the session's message",  v13,  2u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifiersForSessionInvitationWithMessage:*(void *)(a1 + 40)]);
    uint64_t v6 = objc_alloc(&OBJC_CLASS___CSDIDSDualSessionProvider);
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[TUCallCenter sharedInstance](&OBJC_CLASS___TUCallCenter, "sharedInstance"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 queue]);
    id v10 = -[CSDIDSDualSessionProvider initWithSession:queue:](v6, "initWithSession:queue:", v7, v9);

    id v11 = -[CSDRelayIDSDualSession initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:]( [CSDRelayIDSDualSession alloc],  "initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:",  v10,  *(void *)(a1 + 56),  *(void *)(a1 + 64),  [*(id *)(a1 + 40) protocolVersion],  v5);
    objc_msgSend( v11,  "setInvitationTimeout:",  (double)(uint64_t)objc_msgSend(*(id *)(a1 + 32), "timeoutForInvitationWithMessage:", *(void *)(a1 + 40)));
    [v11 setDelegate:WeakRetained];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sessions]);
    [v12 addObject:v11];

    [*(id *)(a1 + 32) messenger:WeakRetained handledMessage:*(void *)(a1 + 40) fromDestination:*(void *)(a1 + 56) device:*(void *)(a1 + 64)];
  }
}

void sub_10018C76C(id *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[FTServerBag sharedInstance](&OBJC_CLASS___FTServerBag, "sharedInstance"));
  id v3 = a1[4];
  id v4 = (void *)v3[11];
  v3[11] = v2;

  id v5 = objc_alloc_init(&OBJC_CLASS___TUFeatureFlags);
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)v6[7];
  v6[7] = v5;

  id v8 = a1[4];
  id v9 = (void *)v8[12];
  v8[12] = &stru_1003DC2B0;

  objc_storeStrong((id *)a1[4] + 2, a1[5]);
  objc_msgSend(*((id *)a1[4] + 2), "setDelegate:");
  objc_storeStrong((id *)a1[4] + 3, a1[6]);
  uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v11 = a1[4];
  id v12 = (void *)v11[4];
  v11[4] = v10;

  uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToStrongObjectsMapTable"));
  uint64_t v14 = a1[4];
  id v15 = (void *)v14[5];
  v14[5] = v13;

  objc_storeStrong((id *)a1[4] + 6, a1[7]);
  id v16 = -[CSDClientManager initWithSerialQueue:]( objc_alloc(&OBJC_CLASS___CSDClientManager),  "initWithSerialQueue:",  *((void *)a1[4] + 8));
  uint64_t v17 = a1[4];
  char v18 = (void *)v17[10];
  v17[10] = v16;

  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientManager]);
  [v19 setRequiredConnectionCapability:@"access-moments"];

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[TUMomentsControllerXPCClient momentsControllerClientXPCInterface]( &OBJC_CLASS___TUMomentsControllerXPCClient,  "momentsControllerClientXPCInterface"));
  unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientManager]);
  [v21 setRemoteObjectInterface:v20];

  char v22 = (void *)objc_claimAutoreleasedReturnValue( +[TUMomentsControllerXPCClient momentsControllerServerXPCInterface]( &OBJC_CLASS___TUMomentsControllerXPCClient,  "momentsControllerServerXPCInterface"));
  v23 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientManager]);
  [v23 setExportedInterface:v22];

  id v24 = a1[4];
  v25 = (void *)objc_claimAutoreleasedReturnValue([v24 clientManager]);
  [v25 setExportedObject:v24];

  objc_initWeak(&location, a1[4]);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10018CB70;
  v32[3] = &unk_1003D83E8;
  objc_copyWeak(&v33, &location);
  v26 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientManager]);
  [v26 setInterruptionHandler:v32];

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_10018CC3C;
  v30[3] = &unk_1003D83E8;
  objc_copyWeak(&v31, &location);
  v27 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientManager]);
  [v27 setInvalidationHandler:v30];

  v28 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientManager]);
  v29 = (void *)objc_claimAutoreleasedReturnValue([v28 asynchronousExportedObjectProxy]);
  +[TUMomentsControllerXPCClient setAsynchronousServer:]( &OBJC_CLASS___TUMomentsControllerXPCClient,  "setAsynchronousServer:",  v29);

  objc_destroyWeak(&v31);
  objc_destroyWeak(&v33);
  objc_destroyWeak(&location);
}

void sub_10018CA3C(_Unwind_Exception *a1)
{
}

CSDAVCMoments *__cdecl sub_10018CA6C( id a1, int64_t a2, NSString *a3, CSDAVCMomentsDelegate *a4, OS_dispatch_queue *a5)
{
  id v8 = a5;
  id v9 = a4;
  uint64_t v10 = a3;
  id v11 = sub_1001704C4();
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 134217984;
    int64_t v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "videoStreamToken: %ld", (uint8_t *)&v15, 0xCu);
  }

  uint64_t v13 = -[CSDAVCMoments initWithStreamToken:requesterID:delegate:dispatchQueue:]( objc_alloc(&OBJC_CLASS____TtC13callservicesd13CSDAVCMoments),  "initWithStreamToken:requesterID:delegate:dispatchQueue:",  a2,  v10,  v9,  v8);
  return (CSDAVCMoments *)v13;
}

void sub_10018CB70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1001704C4();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Moments XPC connection interrupted from client %@",  (uint8_t *)&v7,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleClientDisconnected:v3];
}

void sub_10018CC3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1001704C4();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Moments XPC connection invalidated from client %@",  (uint8_t *)&v7,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleClientDisconnected:v3];
}

void sub_10018D02C(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v43 = v5;
    *(_WORD *)&v43[4] = 2048;
    *(void *)&v43[6] = v6;
    *(_WORD *)&v43[14] = 1024;
    *(_DWORD *)&v43[16] = TUAllowLocalVideoRecording(v4);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "mediaType: %d, token: %ld localVideoRecordingEnabled: %d",  buf,  0x18u);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverBag]);
  if ([v7 isMomentsDisabled])
  {

    goto LABEL_19;
  }

  unsigned int v9 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v8), "isFaceTimePhotosAvailable");

  if (!v9)
  {
LABEL_19:
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Asked to start moments request but moments is disabled by server bag"));
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    v35 = v13;
    v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
    id v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.callservicesdaemon.csdmomentscontroller",  1LL,  v25));

    id v26 = sub_1001704C4();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1002B9BE0();
    }
LABEL_21:
    char v18 = 0LL;
    goto LABEL_22;
  }

  unsigned int v10 = *(_DWORD *)(a1 + 64) - 1;
  if (v10 > 2)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Asked to start moments request with invalid media type %d",  *(unsigned int *)(a1 + 64)));
    NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
    v37 = v13;
    v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL));
    id v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.callservicesdaemon.csdmomentscontroller",  1LL,  v27));

    id v28 = sub_1001704C4();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1002B9BE0();
    }
    goto LABEL_21;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionsByToken]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v12]);

  if (v13)
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 moments]);
    else {
      uint64_t v15 = 2LL;
    }
    id v16 = -[os_log_s newRequestWithMediaType:mode:requesteeID:]( v14,  "newRequestWithMediaType:mode:requesteeID:",  (v10 + 1),  v15,  *(void *)(a1 + 40));
    uint64_t v17 = v16;
    if (v16)
    {
      char v18 = (void *)objc_claimAutoreleasedReturnValue([v16 transactionID]);
      unsigned int v19 = -[CSDMomentsRequest initWithAVCRequest:session:]( objc_alloc(&OBJC_CLASS___CSDMomentsRequest),  "initWithAVCRequest:session:",  v17,  v13);
      if ((TUAllowLocalVideoRecording([v13 setActiveRequest:v19 forTransactionID:v18]) & 1) == 0) {
        [*(id *)(a1 + 32) _startTimeoutForMomentsRequestWithTransactionID:v18];
      }
      id v33 = 0LL;
      unsigned int v20 = [v17 startWithError:&v33];
      id v21 = v33;
      id v22 = sub_1001704C4();
      v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      id v24 = v23;
      if (v20)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)v43 = v17;
          *(_WORD *)&v43[8] = 2112;
          *(void *)&v43[10] = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Successfully started AVCMomentsRequest: %@, transactionID %@",  buf,  0x16u);
        }

        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
        if ((objc_opt_respondsToSelector(v24, "momentsController:didStartRequestForStream:withTransactionID:") & 1) != 0) {
          -[os_log_s momentsController:didStartRequestForStream:withTransactionID:]( v24,  "momentsController:didStartRequestForStream:withTransactionID:",  *(void *)(a1 + 32),  *(void *)(a1 + 56),  v18);
        }
      }

      else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        sub_1002B9CA0();
      }
    }

    else
    {
      unsigned int v19 = (CSDMomentsRequest *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Could not start request for mediaType: %d streamToken: %ld. -[AVCMoments newRequestWithMediaType:] returned nil.",  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56)));
      NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
      v41 = v19;
      id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL));
      id v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.callservicesdaemon.csdmomentscontroller",  1LL,  v31));

      id v32 = sub_1001704C4();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1002B9C40();
      }
      char v18 = 0LL;
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Could not start request for mediaType: %d streamToken: %ld. No session has been registered for requested stream token.",  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56)));
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    v39 = v14;
    v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    id v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.callservicesdaemon.csdmomentscontroller",  1LL,  v29));

    id v30 = sub_1001704C4();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)v43 = v14;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v17, OS_LOG_TYPE_DEFAULT, "[WARN] %@", buf, 0xCu);
    }

    char v18 = 0LL;
  }

LABEL_22:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10018D714(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "transactionID: %@", buf, 0xCu);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionForTransactionID:*(void *)(a1 + 32)]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 activeRequestsByTransactionID]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:*(void *)(a1 + 32)]);

  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 avcRequest]);
    id v17 = 0LL;
    unsigned int v9 = [v8 endWithError:&v17];
    id v10 = v17;

    id v11 = sub_1001704C4();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = v12;
    if (v9)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Successfully ended request %@", buf, 0xCu);
      }
    }

    else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      sub_1002B9D08();
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Could not find request for transaction ID %@",  *(void *)(a1 + 32)));
    NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
    unsigned int v19 = v13;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.callservicesdaemon.csdmomentscontroller",  1LL,  v14));

    id v15 = sub_1001704C4();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1002B9BE0();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10018DAC0(uint64_t a1)
{
  uint64_t v2 = (uint64_t)[*(id *)(a1 + 32) availabilityWithRemoteAvailable:*(unsigned __int8 *)(a1 + 80)];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionsByToken]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 72)));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (v6)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 moments]);
    id v8 = sub_10018E060((char)[v7 capabilities]);
    unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);

    [v6 setRemoteIDSDestinations:*(void *)(a1 + 40)];
    id v10 = sub_1001704C4();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = *(os_log_s **)(a1 + 72);
      int v45 = 138412546;
      v46 = (os_log_s *)v6;
      __int16 v47 = 2048;
      v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "updating remoteIDSDestinations and returning registered session: %@ for streamToken: %ld",  (uint8_t *)&v45,  0x16u);
    }

    goto LABEL_28;
  }

  if ((_DWORD)v2 == 3)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = sub_1001704C4();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v16)
      {
        id v17 = *(os_log_s **)(a1 + 72);
        uint64_t v19 = *(void *)(a1 + 40);
        NSErrorUserInfoKey v18 = *(os_log_s **)(a1 + 48);
        int v45 = 134218498;
        v46 = v17;
        __int16 v47 = 2112;
        v48 = v18;
        __int16 v49 = 2112;
        uint64_t v50 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Registering stream token %ld, requesterID %@ and remoteIDSDestinations %@ with new moments object",  (uint8_t *)&v45,  0x20u);
      }

      unsigned int v20 = (uint64_t (**)(void, void, void, void, void))objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) momentsGenerator]);
      uint64_t v21 = *(void *)(a1 + 72);
      uint64_t v22 = *(void *)(a1 + 48);
      v23 = *(void **)(a1 + 32);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 queue]);
      uint64_t v25 = ((uint64_t (**)(void, uint64_t, uint64_t, void *, void *))v20)[2](v20, v21, v22, v23, v24);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);

      id v26 = sub_10018E060((char)-[os_log_s capabilities](v15, "capabilities"));
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);

      id v27 = sub_1001704C4();
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v45 = 138412546;
        v46 = v15;
        __int16 v47 = 2112;
        v48 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Registered new moments object %@ with supported media types: %@",  (uint8_t *)&v45,  0x16u);
      }

      if (-[os_log_s count](v9, "count") || TUAllowLocalVideoRecording(0LL))
      {
        v29 = objc_alloc(&OBJC_CLASS___CSDMomentsControllerSession);
        if ((TUAllowLocalVideoRecording(v29) & 1) != 0) {
          id v30 = &__NSDictionary0__struct;
        }
        else {
          id v30 = *(void **)(a1 + 40);
        }
        id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callCenterObserver]);
        id v33 = -[CSDMomentsControllerSession initWithMoments:remoteIDSDestinations:callCenterObserver:]( v29,  "initWithMoments:remoteIDSDestinations:callCenterObserver:",  v15,  v30,  v32);

        NSErrorUserInfoKey v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionsByToken]);
        v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(a1 + 72)));
        [v34 setObject:v33 forKeyedSubscript:v35];

        NSErrorUserInfoKey v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) streamTokensByCSDClient]);
        v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:*(void *)(a1 + 56)]);

        NSErrorUserInfoKey v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) streamTokensByCSDClient]);
        v39 = v38;
        if (v37)
        {
          NSErrorUserInfoKey v40 = (void *)objc_claimAutoreleasedReturnValue([v38 objectForKey:*(void *)(a1 + 56)]);
          v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(a1 + 72)));
          [v40 addObject:v41];
        }

        else
        {
          NSErrorUserInfoKey v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(a1 + 72)));
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v40));
          [v39 setObject:v41 forKey:*(void *)(a1 + 56)];
        }
      }

      else
      {
        id v43 = sub_1001704C4();
        id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = *(void *)(a1 + 72);
          int v45 = 138412802;
          v46 = v9;
          __int16 v47 = 2112;
          v48 = v15;
          __int16 v49 = 2048;
          uint64_t v50 = v44;
          _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "unexpected supportedMediaTypes: %@, moments: %@, streamToken: %ld",  (uint8_t *)&v45,  0x20u);
        }
      }

      uint64_t v2 = 3LL;
      goto LABEL_26;
    }

    if (v16)
    {
      int v45 = 67109120;
      LODWORD(v46) = 3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[WARN] FaceTime Photos availability is %d but remoteIDSDestination is nil so changing availability to Unavailabile",  (uint8_t *)&v45,  8u);
    }

    uint64_t v2 = 1LL;
  }

  else
  {
    id v31 = sub_1001704C4();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v45 = 67109120;
      LODWORD(v46) = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "FaceTime Photos is not available. Availability is %d",  (uint8_t *)&v45,  8u);
    }
  }

  unsigned int v9 = (os_log_s *)v3;
LABEL_26:

  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  if ((objc_opt_respondsToSelector(v11, "momentsController:registeredStream:withAvailability:") & 1) != 0) {
    -[os_log_s momentsController:registeredStream:withAvailability:]( v11,  "momentsController:registeredStream:withAvailability:",  *(void *)(a1 + 32),  *(void *)(a1 + 72),  v2);
  }
LABEL_28:

  id v42 = [[TUMomentsCapabilities alloc] initWithAvailability:v2 supportedMediaTypes:v9];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

id sub_10018E060(char a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v3 = v2;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    [v3 addObject:&off_1003F1828];
    if ((a1 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  [v2 addObject:&off_1003F1810];
  if ((a1 & 4) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((a1 & 2) != 0) {
LABEL_4:
  }
    [v3 addObject:&off_1003F1840];
LABEL_5:
  id v4 = [v3 copy];

  return v4;
}

void sub_10018E1E4(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    int v9 = 134217984;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Asked to unregister stream token: %ld",  (uint8_t *)&v9,  0xCu);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) streamTokensByCSDClient]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:*(void *)(a1 + 40)]);

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  [v6 removeObject:v7];

  if (![v6 count])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) streamTokensByCSDClient]);
    [v8 removeObjectForKey:*(void *)(a1 + 40)];
  }

  [*(id *)(a1 + 32) unregisterStreamToken:*(void *)(a1 + 56)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10018E3BC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientManager]);
  [v2 addLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10018E494(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientManager]);
  [v2 removeLocalClientObject:*(void *)(a1 + 40)];
}

void sub_10018E808(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a3;
  objc_msgSend(v5, "didUpdateCapabilities:forVideoStreamToken:", v3, objc_msgSend(v4, "streamToken"));
}

void sub_10018EB0C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 requesterID]);
  [v4 willCaptureRemoteRequestFromRequesterID:v5];
}

void sub_10018F6F4(uint64_t a1)
{
  id v2 = sub_1001704C4();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    int v6 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138413058;
    v66 = v4;
    __int16 v67 = 2112;
    id v68 = v5;
    __int16 v69 = 1024;
    *(_DWORD *)v70 = v6;
    *(_WORD *)&v70[4] = 2112;
    *(void *)&v70[6] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "url: %@ metadata: %@ isZipped: %d fromIDSDestination: %@",  buf,  0x26u);
  }

  id v8 = (id *)(a1 + 56);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) serverBag]);
  if ([v9 isMomentsDisabled])
  {

LABEL_17:
    id v30 = sub_1001704C4();
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_1002BA2C0(v31, v32, v33, v34, v35, v36, v37, v38);
    }

    [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
    return;
  }

  unsigned int v11 = objc_msgSend((id)objc_opt_class(*v8, v10), "isFaceTimePhotosAvailable");

  if (!v11) {
    goto LABEL_17;
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectForKeyedSubscript:@"CSDMomentsControllerMetadataKeyTransactionID"]);
  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*v8 sessionForTransactionID:v12]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 activeRequestsByTransactionID]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v12]);

    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v15 avcRequest]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 remoteRequesteeIDSDestinationFor:v16]);

    id v18 = sub_1001704C4();
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue([v15 avcRequest]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 requesterID]);
      *(_DWORD *)buf = 138412802;
      v66 = v13;
      __int16 v67 = 2112;
      id v68 = v21;
      __int16 v69 = 2112;
      *(void *)v70 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "session: %@ request: %@ remoteIDSDestination: %@",  buf,  0x20u);
    }

    if (v13 && v15 && v17)
    {
      id v64 = 0LL;
      id v22 = [v17 _stripPotentialTokenURIWithToken:&v64];
      id v23 = v64;
      id v24 = *(void **)(a1 + 48);
      id v63 = 0LL;
      id v25 = [v24 _stripPotentialTokenURIWithToken:&v63];
      id v26 = v63;
      id v27 = v26;
      if (v23 && v26)
      {
        if ([v23 isEqualToData:v26])
        {
          if (*(_BYTE *)(a1 + 64))
          {
            id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) fileTransferController]);
            v29 = *(void **)(a1 + 32);
            v57 = _NSConcreteStackBlock;
            uint64_t v58 = 3221225472LL;
            v59 = sub_10018FC80;
            v60 = &unk_1003DC3A0;
            uint64_t v61 = *(void *)(a1 + 56);
            id v62 = v29;
            [v28 unzipArchiveAtURL:v62 completion:&v57];
          }

          else
          {
            id v49 = sub_1001704C4();
            uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
              sub_1002BA354();
            }

            [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
          }

          objc_msgSend(v13, "removeActiveRequestForTransactionID:", v12, v57, v58, v59, v60, v61);
          id v51 = *v8;
          v52 = (void *)objc_claimAutoreleasedReturnValue([v13 moments]);
          [v51 cleanUpForMomentIfNecessary:v52];

          v53 = (void *)objc_claimAutoreleasedReturnValue([*v8 delegate]);
          if ((objc_opt_respondsToSelector(v53, "momentsController:didReceiveResultsForStream:withTransactionID:") & 1) != 0)
          {
            id v54 = *v8;
            v55 = (void *)objc_claimAutoreleasedReturnValue([v13 moments]);
            objc_msgSend( v53,  "momentsController:didReceiveResultsForStream:withTransactionID:",  v54,  objc_msgSend(v55, "streamToken"),  v12);
          }
        }

        else
        {
          id v47 = sub_1001704C4();
          v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
            sub_1002BA3B8((uint64_t *)(a1 + 48), v13, v48);
          }

          [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
        }
      }

      else
      {
        id v43 = (void *)objc_claimAutoreleasedReturnValue([v15 avcRequest]);
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v13 remoteRequesteeIDSDestinationFor:v43]);

        id v45 = sub_1001704C4();
        v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138413058;
          v66 = v44;
          __int16 v67 = 2112;
          id v68 = v23;
          __int16 v69 = 2112;
          *(void *)v70 = v56;
          *(_WORD *)&v70[8] = 2112;
          *(void *)&v70[10] = v27;
          _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "Could not convert remote IDS destination %@ (token=%@) and/or from IDS destination %@ (token=%@) to token data",  buf,  0x2Au);
        }

        [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
      }
    }

    else
    {
      id v41 = sub_1001704C4();
      id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        sub_1002BA44C((uint64_t)v12, (id *)(a1 + 56), v42);
      }

      [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
    }
  }

  else
  {
    id v39 = sub_1001704C4();
    NSErrorUserInfoKey v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
      sub_1002BA2F0();
    }

    [*(id *)(a1 + 56) deleteContentsAtURL:*(void *)(a1 + 32)];
  }
}

void sub_10018FC80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018FD2C;
  block[3] = &unk_1003D7828;
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

id sub_10018FD2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_1001704C4();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Unzipped resource to URL: %@",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(a1 + 40) _handleReceivedResourcesAtDirectoryURL:*(void *)(a1 + 32)];
  }

  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002BA4E0();
    }
  }

  return [*(id *)(a1 + 40) deleteContentsAtURL:*(void *)(a1 + 48)];
}

void sub_10019098C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[TUMomentDescriptor alloc] initWithPhotosAppAssetIdentifier:v3];

  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472LL;
  uint64_t v9 = sub_100190A50;
  uint64_t v10 = &unk_1003D7758;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v4;
  id v6 = v4;
  dispatch_async(v5, &v7);

  objc_msgSend(*(id *)(a1 + 32), "deleteContentsAtURL:", *(void *)(a1 + 40), v7, v8, v9, v10, v11);
}

id sub_100190A50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleRequestResultWithMomentDescriptor:*(void *)(a1 + 40)];
}

void sub_100190B84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[TUMomentDescriptor alloc] initWithPhotosAppAssetIdentifier:v3];

  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472LL;
  uint64_t v9 = sub_100190C48;
  uint64_t v10 = &unk_1003D7758;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v4;
  id v6 = v4;
  dispatch_async(v5, &v7);

  objc_msgSend(*(id *)(a1 + 32), "deleteContentsAtURL:", *(void *)(a1 + 40), v7, v8, v9, v10, v11);
}

id sub_100190C48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleRequestResultWithMomentDescriptor:*(void *)(a1 + 40)];
}

void sub_100190DEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_1001704C4();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002BA734();
    }
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v5);
  }
}

void sub_100190FDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_1001704C4();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002BA7A8();
    }
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v5);
  }
}

void sub_100191150(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionForTransactionID:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = sub_1001704C4();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v8 = 138412290;
      uint64_t v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[WARN] Timeout reached for active request for transaction ID %@",  (uint8_t *)&v8,  0xCu);
    }

    [v2 removeActiveRequestForTransactionID:*(void *)(a1 + 40)];
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 moments]);
    [v6 cleanUpForMomentIfNecessary:v7];
  }
}

id sub_1001914E4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 didReceiveLocallyRequestedMomentDescriptor:*(void *)(a1 + 32)];
}

void sub_100191598(id a1)
{
  if (!qword_10044D160)
  {
    CFPropertyListRef v1 = objc_alloc_init(&OBJC_CLASS___CSDMomentsControllerLocalCapabilities);
    uint64_t v2 = (void *)qword_10044D160;
    qword_10044D160 = (uint64_t)v1;
  }

void sub_1001916C0(id a1)
{
  if (CFPreferencesGetAppBooleanValue( @"PreserveFaceTimePhotosFiles",  TUBundleIdentifierTelephonyUtilitiesFramework,  &keyExistsAndHasValidFormat))
  {
    BOOL v1 = keyExistsAndHasValidFormat == 0;
  }

  else
  {
    BOOL v1 = 1;
  }

  char v2 = !v1;
  byte_10044D168 = v2;
}

void sub_100194514( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

TUICFQueryResult *__cdecl sub_100194530(id a1, NSString *a2, NSString *a3)
{
  return (TUICFQueryResult *)+[TUICFInterface allowCallForDestinationID:providerIdentifier:]( &OBJC_CLASS___TUICFInterface,  "allowCallForDestinationID:providerIdentifier:",  a2,  a3);
}

id sub_100194544(uint64_t a1, void *a2)
{
  char v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 recentsController]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 incomingCallFilter]);
  id v6 = [v5 callDirectoryAllowsCallFromSourceAddress:v3];

  return v6;
}

id sub_1001945A8(uint64_t a1, void *a2)
{
  char v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 recentsController]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 incomingCallFilter]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 blockedByExtension:v3]);

  return v6;
}

BOOL sub_100194610(id a1)
{
  return +[TUCallCapabilities supportsPrimaryCalling]( &OBJC_CLASS___TUCallCapabilities,  "supportsPrimaryCalling");
}

id sub_10019461C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 callCenter]);
  id v7 = [v6 shouldPreferRelayOverDirectSecondaryCallingForProvider:v5 isVideo:a3];

  return v7;
}

id sub_100194678(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained callFilterController]);
    id v10 = [v9 shouldFilterIncomingCall:v5 from:v6];
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

BOOL sub_100194704(id a1)
{
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  unsigned __int8 v2 = [v1 isLowPowerModeEnabled];

  return v2;
}

id sub_100197DB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v6.receiver = *(id *)(a1 + 64);
  v6.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v6, "answerCall:withRequest:whileDisconnectingCalls:andHoldingCalls:", v2, v3, v4, v1);
}

id sub_100197E9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "holdCalls:whileUnholdingCalls:", v2, v1);
}

id sub_100197F7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "groupCalls:withCalls:", v2, v1);
}

id sub_10019805C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "ungroupCall:fromOtherCallsInGroup:", v2, v1);
}

id sub_100198188(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v6.receiver = *(id *)(a1 + 64);
  v6.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2( &v6,  "disconnectCalls:whileHoldingCalls:andUnholdingCalls:andUngroupingCalls:",  v2,  v3,  v4,  v1);
}

id sub_100198248(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "setUplinkMuted:forCalls:", v1, v2);
}

id sub_100198304(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)&OBJC_CLASS___CSDProviderCallDataSource;
  return objc_msgSendSuper2(&v4, "setTTYType:forCalls:", v1, v2);
}

void sub_1001983B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callSourceManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) provider]);
  objc_super v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v10 = (id)objc_claimAutoreleasedReturnValue([v2 callSourceWithIdentifier:v4]);

  id v5 = objc_alloc_init(&OBJC_CLASS___CXSendMMIOrUSSDCodeAction);
  objc_super v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) handle]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 value]);
  [v5 setCode:v7];

  objc_msgSend(v5, "setTtyType:", sub_1000A15D8((uint64_t)objc_msgSend(*(id *)(a1 + 40), "ttyType")));
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localSenderIdentityUUID]);
  [v5 setSenderIdentityUUID:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callSourceManager]);
  [v9 addAction:v5 toUncommittedTransactionForCallSource:v10];
}

void sub_100198574(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CXHandoffContext providerIdentifierForHandoffActivityUserInfo:]( &OBJC_CLASS___CXHandoffContext,  "providerIdentifierForHandoffActivityUserInfo:",  *(void *)(a1 + 32)));
  objc_super v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) callSourceManager]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 callSourceWithIdentifier:v3]);

  objc_super v6 = -[CXHandoffContext initWithHandoffActivityUserInfo:]( objc_alloc(&OBJC_CLASS___CXHandoffContext),  "initWithHandoffActivityUserInfo:",  *v2);
  if (v6)
  {
    id v7 = -[CSDProviderCall initWithHandoffContext:backingCallSource:]( objc_alloc(&OBJC_CLASS___CSDProviderCall),  "initWithHandoffContext:backingCallSource:",  v6,  v5);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) callStateController]);
    [v8 setCallDelegatesIfNeeded:v7];

    id v9 = objc_alloc(&OBJC_CLASS___CXPullCallAction);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[CSDProviderCall uniqueProxyIdentifierUUID](v7, "uniqueProxyIdentifierUUID"));
    id v11 = [v9 initWithCallUUID:v10];

    [v11 setHandoffContext:v6];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) callSourceManager]);
    [v12 addAction:v11 toUncommittedTransactionForCallSource:v5];

    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___CSDPulledCallContext);
    -[CSDPulledCallContext setCall:](v13, "setCall:", v7);
    -[CSDPulledCallContext setCompletionHandler:](v13, "setCompletionHandler:", *(void *)(a1 + 48));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pendingPulledCallContexts]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[CSDProviderCall uniqueProxyIdentifierUUID](v7, "uniqueProxyIdentifierUUID"));
    [v14 setObject:v13 forKeyedSubscript:v15];
  }

  else
  {
    id v16 = sub_1001704C4();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1002BAE78(a1 + 32, v17, v18, v19, v20, v21, v22, v23);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100198B88(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      objc_super v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(a1 + 40),  "performCallAction:forCall:",  *(void *)(*((void *)&v7 + 1) + 8 * (void)v6),  *(void *)(a1 + 48),  (void)v7);
        objc_super v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_10019A8B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

uint64_t sub_10019A990(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10019A9A0(uint64_t a1)
{
}

void sub_10019A9A8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callContainer]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 callWithUniqueProxyIdentifier:v3]);

  if (*(_BYTE *)(a1 + 88) && v4)
  {
    [*(id *)(a1 + 48) updateFilteredOutReasonForCall:v4 WithError:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8LL);
    objc_super v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL) && *(_BYTE *)(a1 + 89))
  {
    id v7 = sub_1001704C4();
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[WARN] There is an error: %@, but we are still asked to report call to clients",  (uint8_t *)&v11,  0xCu);
    }

    id v10 = -[CSDProviderCall initIncomingWithBackingCallSource:UUID:update:]( objc_alloc(&OBJC_CLASS___CSDProviderCall),  "initIncomingWithBackingCallSource:UUID:update:",  *(void *)(a1 + 56),  *(void *)(a1 + 40),  *(void *)(a1 + 64));
    [v10 setDisconnectedReason:21];
    [v10 setSupportsRecents:*(unsigned __int8 *)(a1 + 90)];
    [v10 setLocalUserInHomeCountry:*(unsigned __int8 *)(a1 + 91)];
    [v10 setAnsweringMachineAvailable:*(unsigned __int8 *)(a1 + 92)];
    [v10 setIdentifiedSpamInCallerName:*(unsigned __int8 *)(a1 + 93)];
    [*(id *)(a1 + 32) setCallDelegatesIfNeeded:v10];
    [*(id *)(a1 + 48) updateFilteredOutReasonForCall:v10 WithError:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    [*(id *)(a1 + 32) propertiesChangedForCall:v10];
  }
}

id sub_10019B904(uint64_t a1)
{
  return [*(id *)(a1 + 32) callSource:*(void *)(a1 + 40) reportedCallWithUUID:*(void *)(a1 + 48) endedAtDate:*(void *)(a1 + 56) privateReason:*(void *)(a1 + 72) failureContext:*(void *)(a1 + 64)];
}

void sub_10019C930(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v48 = v4;
    __int16 v49 = 2112;
    uint64_t v50 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Call source manager %@ completed transaction group %@",  buf,  0x16u);
  }

  unsigned int v40 = [*(id *)(a1 + 48) _allowRevertingStateForCompletedTransactionGroup:*(void *)(a1 + 40)];
  id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) callStateController]);
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  objc_super v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allActions]);
  id v7 = [v6 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v7)
  {
    id v10 = v7;
    uint64_t v11 = *(void *)v43;
    *(void *)&__int128 v9 = 138412546LL;
    __int128 v39 = v9;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v43 != v11) {
          objc_enumerationMutation(v6);
        }
        uint64_t v13 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)v12);
        uint64_t v14 = objc_opt_class(&OBJC_CLASS___CXPullCallAction, v8);
        if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
        {
          id v16 = v13;
          id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) pendingPulledCallContexts]);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 callUUID]);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v18]);

          if (v19)
          {
            id v20 = [v16 state];
            id v21 = sub_1001704C4();
            uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            uint64_t v23 = v22;
            if (v20 == (id)1)
            {
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                id v48 = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Pull call action fulfilled: %@",  buf,  0xCu);
              }

              id v24 = (void *)objc_claimAutoreleasedReturnValue([v19 call]);
              id v25 = (void *)objc_claimAutoreleasedReturnValue([v16 dateConnected]);
              [v24 setDateConnected:v25];

              [v41 propertiesChangedForCall:v24];
            }

            else
            {
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                id v48 = v16;
                _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Pull call action failed: %@",  buf,  0xCu);
              }

              id v24 = 0LL;
            }

            uint64_t v34 = (void (**)(void, void))objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "completionHandler", v39));
            ((void (**)(void, void *))v34)[2](v34, v24);

            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) pendingPulledCallContexts]);
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v16 callUUID]);
            [v35 setObject:0 forKeyedSubscript:v36];

LABEL_27:
LABEL_28:

            goto LABEL_29;
          }

          id v32 = sub_1001704C4();
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v32);
          if (!os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR)) {
            goto LABEL_27;
          }
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) pendingPulledCallContexts]);
          *(_DWORD *)buf = v39;
          id v48 = v16;
          __int16 v49 = 2112;
          uint64_t v50 = v33;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  OS_LOG_TYPE_ERROR,  "Could not find pulled call context for completed pull call action %@. All contexts: %@",  buf,  0x16u);
          goto LABEL_33;
        }

        uint64_t v26 = objc_opt_class(&OBJC_CLASS___CXCallAction, v15);
        if ((objc_opt_isKindOfClass(v13, v26) & 1) != 0)
        {
          id v16 = v13;
          id v27 = *(void **)(a1 + 48);
          id v28 = (void *)objc_claimAutoreleasedReturnValue([v16 callUUID]);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v27 _callWithUUID:v28]);

          id v29 = sub_1001704C4();
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v29);
          BOOL v30 = os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEFAULT);
          if (v19)
          {
            if (v30)
            {
              *(_DWORD *)buf = 138412290;
              id v48 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  OS_LOG_TYPE_DEFAULT,  "Call action completed for call: %@",  buf,  0xCu);
            }

            [*(id *)(a1 + 48) _processCompletedCallAction:v16 forCall:v19 allowRevertingState:v40 isOnenessActive:0];
            goto LABEL_28;
          }

          if (!v30) {
            goto LABEL_27;
          }
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) calls]);
          *(_DWORD *)buf = v39;
          id v48 = v16;
          __int16 v49 = 2112;
          uint64_t v50 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  OS_LOG_TYPE_DEFAULT,  "[WARN] Could not find call for completed call action: %@. All calls: %@",  buf,  0x16u);
LABEL_33:

          goto LABEL_27;
        }

        id v31 = sub_1001704C4();
        id v16 = (id)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v48 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v16,  OS_LOG_TYPE_DEFAULT,  "Action completed: %@",  buf,  0xCu);
        }

void sub_10019CEE4(uint64_t a1)
{
  id v2 = sub_1001704C4();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callSourceManager]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 callSources]);
    *(_DWORD *)buf = 138412290;
    id v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Call sources changed: %@", buf, 0xCu);
  }

  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  objc_super v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) calls]);
  id v7 = [v6 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v25;
    *(void *)&__int128 v8 = 138412546LL;
    __int128 v23 = v8;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v25 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "backingCallSource", v23));
        uint64_t v14 = v13;
        if (v13 && ([v13 isConnected] & 1) == 0)
        {
          id v15 = sub_1001704C4();
          id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v12 backingCallSource]);
            *(_DWORD *)buf = v23;
            id v29 = v12;
            __int16 v30 = 2112;
            id v31 = v21;
            _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Ending call %@ since its backing call source %@ is no longer connected",  buf,  0x16u);
          }

          id v17 = objc_alloc_init(&OBJC_CLASS___CXCallFailureContext);
          -[CXCallFailureContext setFailureReason:](v17, "setFailureReason:", 3LL);
          uint64_t v18 = *(void **)(a1 + 32);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v12 backingCallSource]);
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueProxyIdentifierUUID]);
          [v18 callSource:v19 reportedCallWithUUID:v20 endedAtDate:0 privateReason:1 failureContext:v17];
        }
      }

      id v9 = [v6 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }

    while (v9);
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callSourceFetcher]);
  [v22 handleCallSourcesChanged];
}

void sub_10019D2EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1001704C4();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v12 = 138412546;
      id v13 = v3;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Using call source %@ for requested transaction %@",  (uint8_t *)&v12,  0x16u);
    }

    [*(id *)(a1 + 40) _processRequestedTransaction:*(void *)(a1 + 32) fromCallSource:v3 completion:*(void *)(a1 + 48)];
  }

  else
  {
    if (v6)
    {
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) callSourceManager]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 callSources]);
      int v12 = 138412290;
      id v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[WARN] Not allowing requested transaction because no call source was found. All call sources: %@",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError cx_requestTransactionErrorWithCode:]( &OBJC_CLASS___NSError,  "cx_requestTransactionErrorWithCode:",  2LL));
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
  }
}

uint64_t sub_10019E788(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10019F04C(uint64_t a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019F0F8;
  block[3] = &unk_1003DC640;
  objc_copyWeak(&v6, (id *)(a1 + 48));
  id v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v2, block);

  objc_destroyWeak(&v6);
}

void sub_10019F0F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    [WeakRetained invalidate];
    [*(id *)(a1 + 32) removeClient:v5];
    id v3 = v5;
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
      id v3 = v5;
    }
  }
}

id sub_10019F25C(uint64_t a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  dispatch_assert_queue_V2(v2);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exportedObject]);
  [*(id *)(a1 + 40) setTarget:v3];

  [*(id *)(a1 + 32) setLocalClientActive:1];
  [*(id *)(a1 + 40) invoke];
  return [*(id *)(a1 + 32) setLocalClientActive:0];
}

void sub_10019F45C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10019F47C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _xpcClientForConnection:*(void *)(a1 + 40)]);
  *(_BYTE *)(*(void *)(*(void *)(v2 + 16) + 8) + 24) = [*(id *)v2 isClientAllowed:v3];
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) + 8LL) + 24LL);
  id v5 = sub_1001704C4();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v2 machServiceName]);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      int v12 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Accepting XPC client for %@: %@",  (uint8_t *)&v9,  0x16u);
    }

    [*(id *)(a1 + 32) addClient:v3];
    [*(id *)(a1 + 40) resume];
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002BAF54((id *)v2, (uint64_t)v3, v7);
    }
  }
}

void sub_1001A1DE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1001A1DFC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isWaitingToJoinForConversationUUID:*(void *)(a1 + 40)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1001A2048( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001A2060(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001A2070(uint64_t a1)
{
}

void sub_1001A2078(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callUUIDsByConversationUUID]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001A2404( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001A241C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) conversationUUIDsByCallUUID]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1001A25B4(uint64_t a1)
{
  id v2 = sub_1001704C4();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received notification that AVAudioClient has been activated, notifying conversation",  v5,  2u);
  }

  [*(id *)(a1 + 32) setAudioSessionActive:1];
  return [*(id *)(a1 + 32) startAudioForConversationsIfNecessary];
}

id sub_1001A390C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 handle]);
  if ([v4 isEquivalentToHandle:*(void *)(a1 + 32)])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 association]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 handle]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localMember]);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 handle]);
    id v9 = [v6 isEquivalentToHandle:v8];
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

void sub_1001A39CC(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_1001704C4();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1002BB024((uint64_t)a1, (uint64_t)v3, v5);
    }
    goto LABEL_6;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] invitationResolver]);
  id v7 = a1[5];
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localMember]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 handle]);
  LODWORD(v7) = [v6 shouldStartRingingTimeoutForConversation:v7 handle:v9];

  if ((_DWORD)v7)
  {
    dispatch_time_t v10 = dispatch_time(0LL, 30000000000LL);
    __int16 v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001A3B24;
    block[3] = &unk_1003D7828;
    int v12 = (os_log_s *)a1[5];
    id v13 = a1[4];
    uint64_t v15 = v12;
    id v16 = v13;
    id v17 = a1[6];
    dispatch_after(v10, v11, block);

    id v5 = v15;
LABEL_6:
  }
}

void sub_1001A3B24(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) callUUIDsByConversationUUID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v2]);
  if (![v4 isEqual:*(void *)(a1 + 48)])
  {

LABEL_7:
    goto LABEL_8;
  }

  unsigned int v5 = [*(id *)(a1 + 40) _isWaitingToJoinForConversationUUID:v2];

  if (v5)
  {
    id v6 = sub_1001704C4();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Ending ringing call for conversation with UUID: %@",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(a1 + 40) leaveConversation:*(void *)(a1 + 32) withCallUUID:*(void *)(a1 + 48) reason:3];
    [*(id *)(a1 + 40) setWaitingToJoin:0 forConversationUUID:v2];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) provider]);
    [v3 reportCallWithUUID:*(void *)(a1 + 48) endedAtDate:0 reason:3];
    goto LABEL_7;
  }

void sub_1001A5D98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1001A5DC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    id v3 = sub_1001704C4();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
      uint64_t v6 = *(void *)(a1 + 40);
      int v28 = 138412546;
      id v29 = v5;
      __int16 v30 = 2112;
      uint64_t v31 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Checking whether to leave conversation with UUID %@: removedActiveParticipant %@.",  (uint8_t *)&v28,  0x16u);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) conversationsByUUID]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

    if (v9)
    {
      if (![*(id *)(a1 + 56) shouldAutomaticallyLeaveConversation:v9])
      {
LABEL_19:

        goto LABEL_20;
      }

      id v10 = sub_1001704C4();
      __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
        uint64_t v13 = *(void *)(a1 + 40);
        int v28 = 138412546;
        id v29 = v12;
        __int16 v30 = 2112;
        uint64_t v31 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Ending call since U+1 conversation with UUID %@: removedActiveParticipant %@.",  (uint8_t *)&v28,  0x16u);
      }

      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) callUUIDsByConversationUUID]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 UUID]);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);

      if (v16)
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained provider]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v17 reportCallWithUUID:v16 endedAtDate:v18 reason:2];

        [WeakRetained cleanupConversationWithCallUUID:v16];
      }

      else
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained featureFlags]);
        unsigned int v22 = [v21 avLessSharePlayEnabled];

        if (v22)
        {
          if ([*(id *)(a1 + 32) avMode])
          {
            id v23 = sub_1001704C4();
            __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v25 = *(void **)(a1 + 32);
              int v28 = 138412290;
              id v29 = v25;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[WARN] Couldn't find call to end for conversation %@. Falling back to leaving conversation directly.",  (uint8_t *)&v28,  0xCu);
            }
          }

          __int128 v26 = *(void **)(a1 + 48);
          __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v9 UUID]);
          [v26 leaveConversationWithUUID:v27];
        }
      }
    }

    else
    {
      id v19 = sub_1001704C4();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
        int v28 = 138412290;
        id v29 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "No conversation found in conversation manager with UUID %@ so we are not checking whether to end the call afte r a participant left",  (uint8_t *)&v28,  0xCu);
      }
    }

    goto LABEL_19;
  }

BOOL sub_1001A62C8(id a1, TUConversationMember *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[TUConversationMember association](v2, "association"));
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(-[TUConversationMember association](v2, "association"));
    unsigned __int8 v5 = [v4 isPrimary];
  }

  else
  {
    unsigned __int8 v5 = 1;
  }

  return v5;
}

int main(int argc, const char **argv, const char **envp)
{
  qword_100453F20 = 0LL;
  id v3 = objc_autoreleasePoolPush();
  id v4 = sub_1001704C4();
  uint64_t v5 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("callservicesd launched", 22LL, 2LL, &_mh_execute_header, v4, v5, &_swiftEmptyArrayStorage);

  id v6 = [objc_allocWithZone((Class)CSDDaemon) init];
  id v7 = (void *)qword_100453F20;
  qword_100453F20 = (uint64_t)v6;

  objc_autoreleasePoolPop(v3);
  int v8 = (void *)qword_100453F20;
  id v9 = (void *)objc_opt_self(&OBJC_CLASS___NSRunLoop);
  id v10 = v8;
  id v11 = [v9 currentRunLoop];
  [v11 run];

  exit(0);
}

uint64_t sub_1001A9558(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_1001A9560(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_1001A9568(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_1001A958C(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1001A95A4(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_1001A95B4(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1001A95BC(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1001A95C8(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_1001A95D4(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_1001A95E0(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_1001A95EC(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

void sub_1001A9600(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0LL;
    id v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0LL;
      }
      v2 |= v4;
      --v1;
    }

    while (v1);
  }

  swift_bridgeObjectRelease(a1);
  sub_1001AA978();
}

uint64_t variable initialization expression of CSDConversationSpatialPersonaResolver.groupUUID()
{
  uint64_t v0 = sub_1001AA9D0();
  return sub_1001AA9B0(v0, v1, v2, v3);
}

uint64_t sub_1001A9670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t variable initialization expression of CSDConversationSpatialPersonaResolver.localParticipantID()
{
  return 0LL;
}

void *variable initialization expression of CSDConversationSpatialPersonaResolver.participantState()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of CSDConversationSpatialPersonaResolver.forceLocalParticipantState()
{
  return 0LL;
}

void *variable initialization expression of CSDConversationSpatialPersonaResolver.initialParticipantIdentifiers()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of LetMeInRequestorKeyAgreement.localKey()
{
  return P256.KeyAgreement.PrivateKey.init(compactRepresentable:)(1LL);
}

uint64_t variable initialization expression of LetMeInRequestorKeyAgreement.requestKey()
{
  uint64_t v0 = sub_1001AA9D0();
  return sub_1001AA9B0(v0, v1, v2, v3);
}

uint64_t variable initialization expression of HandoffAudioController.pickedRouteUniqueIdentifier()
{
  return 0LL;
}

void type metadata accessor for TUCallSoundPlayerSoundType(uint64_t a1)
{
}

void type metadata accessor for IDSSessionEndedReason(uint64_t a1)
{
}

void type metadata accessor for CHRecentCallMediaType(uint64_t a1)
{
}

void type metadata accessor for TUMomentsAvailability(uint64_t a1)
{
}

__n128 sub_1001A973C(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001A9748(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for TUCallRemoteVideoPresentationState(uint64_t a1)
{
}

void type metadata accessor for Triggers(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void *sub_1001A97C4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_1001A97D0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001A97F0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + _Block_object_dispose(va, 8) = v3;
  return result;
}

void type metadata accessor for CTError(uint64_t a1)
{
}

void type metadata accessor for AVCSessionMediaType(uint64_t a1)
{
}

void type metadata accessor for AVCSessionMediaState(uint64_t a1)
{
}

void type metadata accessor for TUCallOriginatingUIType(uint64_t a1)
{
}

void type metadata accessor for TUCallDisconnectedReason(uint64_t a1)
{
}

void type metadata accessor for CSDLiveVoicemailStatus(uint64_t a1)
{
}

void type metadata accessor for TUCallVerificationStatus(uint64_t a1)
{
}

void type metadata accessor for TUCallFilteredOutReason(uint64_t a1)
{
}

void type metadata accessor for TUConversationState(uint64_t a1)
{
}

uint64_t sub_1001A98CC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001A98FC(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1001A98FC(uint64_t result)
{
  return result;
}

void sub_1001A9918()
{
  *uint64_t v0 = v1;
  sub_1001AA978();
}

BOOL sub_1001A9938(int *a1, int *a2)
{
  return sub_1001AC238(*a1, *a2);
}

void sub_1001A9944(uint64_t *a1@<X8>)
{
  *a1 = variable initialization expression of CSDConversationSpatialPersonaResolver.joinedGenerationCounter();
  sub_1001AA978();
}

uint64_t sub_1001A9964@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A9558(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_1001A9990(uint64_t a1)
{
  uint64_t v2 = sub_1001AA98C(a1);
  uint64_t *v1 = sub_10023D14C(v2, v3);
  sub_1001AA978();
}

uint64_t sub_1001A99B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A9560(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1001A99DC(uint64_t a1, void *a2)
{
  return sub_10024D56C(a1, *a2);
}

uint64_t sub_1001A99E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001A9568(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_1001A9A14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001A958C(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_1001A9A44(void *a1)
{
  return sub_10024D584(*a1);
}

uint64_t sub_1001A9A4C(void *a1)
{
  return sub_10024D570(*a1);
}

uint64_t sub_1001A9A54(uint64_t *a1)
{
  return sub_1001A95A4(*a1);
}

uint64_t sub_1001A9A5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A95B4(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1001A9A88(uint64_t *a1)
{
  return sub_1001A95BC(*a1, *v1);
}

BOOL sub_1001A9A94(uint64_t *a1)
{
  return sub_1001A95C8(*a1, *v1);
}

BOOL sub_1001A9AA0(uint64_t *a1)
{
  return sub_1001A95D4(*a1, *v1);
}

BOOL sub_1001A9AAC()
{
  return sub_1001A95E0(*v0);
}

uint64_t sub_1001A9AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A9ACC(uint64_t *a1)
{
  return sub_1001A95EC(*a1);
}

void sub_1001A9AD4()
{
  *uint64_t v0 = v1;
  sub_1001AA978();
}

uint64_t sub_1001A9AF4()
{
  return sub_1002553E0(*v0);
}

void sub_1001A9AFC(int a1)
{
}

uint64_t sub_1001A9B04(uint64_t a1)
{
  return sub_100255558(a1, *v1);
}

void sub_1001A9B0C()
{
}

uint64_t sub_1001A9B2C(uint64_t a1, id *a2)
{
  return sub_1001AA89C(a1, a2);
}

uint64_t sub_1001A9B40(uint64_t a1, id *a2)
{
  return sub_1001AA82C(a1, a2) & 1;
}

void sub_1001A9B58()
{
}

void sub_1001A9B78(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_1001AA9C8();
  sub_1001AA978();
}

uint64_t sub_1001A9BA8(uint64_t a1)
{
  return sub_1001A9BC0(a1, *v1);
}

uint64_t sub_1001A9BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001A9C00(uint64_t a1)
{
  return sub_1001D8BBC(a1, *v1);
}

Swift::Int sub_1001A9C08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

BOOL sub_1001A9C78(uint64_t *a1, uint64_t *a2)
{
  return sub_1001AC244(*a1, *a2);
}

void sub_1001A9C84(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v3 & 1;
}

void sub_1001A9CB4(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_1001A9CD8(uint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_1001A9CE4(uint64_t *a1, uint64_t *a2)
{
  return sub_1001E42F8(*a1, *a2);
}

void sub_1001A9CF0(void *a1@<X8>)
{
  *a1 = v2;
}

_DWORD *sub_1001A9D18@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

  ;
}

void sub_1001A9D30()
{
}

void sub_1001A9D38(int a1)
{
}

void sub_1001A9D40(uint64_t a1)
{
}

void sub_1001A9D4C()
{
  uint64_t v1 = sub_1001AA980();
  *uint64_t v0 = j_j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_1001AA978();
}

uint64_t sub_1001A9D6C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10037A8AC, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1001A9DA8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10037A8AC, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1001A9DF0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10037A8AC, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

void sub_1001A9E48(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_1001A9E6C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1001A9E78@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1001A9E88(uint64_t *a1, uint64_t *a2)
{
  return sub_1001D8C24(*a1, *a2);
}

void sub_1001A9E94()
{
  uint64_t v1 = sub_1001AA980();
  *uint64_t v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_1001AA978();
}

void *sub_1001A9EB4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1001A9EC0()
{
}

void sub_1001A9EEC()
{
}

void sub_1001A9F18(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_1001AA978();
}

void sub_1001A9F54()
{
}

void sub_1001A9F80()
{
}

void sub_1001A9FAC()
{
}

uint64_t sub_1001A9FD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10037A8AC, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1001AA024@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = sub_1001AA9C8();
  *a1 = v2;
  return result;
}

uint64_t sub_1001AA064@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001AA090(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_1001A9F18( &qword_100446E08,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_10037A67C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1001AA114(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_1001A9F18( &qword_100446E18,  (uint64_t (*)(uint64_t))type metadata accessor for Mode,  (uint64_t)&unk_10037A1D8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1001AA198(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_1001A9F18( &qword_100446E28,  (uint64_t (*)(uint64_t))type metadata accessor for Category,  (uint64_t)&unk_10037A098);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_1001AA21C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1001AA228(uint64_t a1)
{
  return sub_1001A9BC0(a1, *v1);
}

Swift::Int sub_1001AA230(uint64_t a1)
{
  return sub_1001A9C08(a1, *v1);
}

void type metadata accessor for CXCallFailureReason(uint64_t a1)
{
}

void type metadata accessor for TUCallStatus(uint64_t a1)
{
}

void type metadata accessor for CSDAudioInterruptionProviderType(uint64_t a1)
{
}

void type metadata accessor for TUConversationLinkDeletionReason(uint64_t a1)
{
}

void type metadata accessor for CSDMessagingConversationMessageType(uint64_t a1)
{
}

void type metadata accessor for TUConversationLinkLifetimeScope(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for RPDeviceChangeFlags(uint64_t a1)
{
}

void type metadata accessor for TUConversationPresentationMode(uint64_t a1)
{
}

void type metadata accessor for TUConversationAVMode(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionMessageParticipantUpdateType(uint64_t a1)
{
}

void type metadata accessor for HandleType(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CHRecentCallTTYType(uint64_t a1)
{
}

void type metadata accessor for CHHandleType(uint64_t a1)
{
}

void type metadata accessor for TUHandleType(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionServerErrorCode(uint64_t a1)
{
}

void type metadata accessor for TUCallFaceTimeTransportType(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

__n128 sub_1001AA3B4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1001AA3C8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001AA3E8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for TUCallSoundRegion(uint64_t a1)
{
}

void type metadata accessor for TURouteDeviceType(uint64_t a1)
{
}

void type metadata accessor for AXSDefaultRouteForCall(uint64_t a1)
{
}

__n128 initializeWithTake for CallInfoPendingScore(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1001AA47C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001AA49C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for TUTelephonyCallSubType(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AudioActivationContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_1001AA530(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001AA53C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for CSDAudioInterruptionOperationMode(uint64_t a1)
{
}

void type metadata accessor for Mode(uint64_t a1)
{
}

void type metadata accessor for Category(uint64_t a1)
{
}

void sub_1001AA5AC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void sub_1001AA5F0()
{
}

void sub_1001AA61C()
{
}

void sub_1001AA648()
{
}

void sub_1001AA674()
{
}

void sub_1001AA6A0()
{
}

void sub_1001AA6CC()
{
}

void sub_1001AA6F8()
{
}

void sub_1001AA724()
{
}

void sub_1001AA750()
{
}

void sub_1001AA77C()
{
}

void sub_1001AA7A8()
{
}

void sub_1001AA7D4()
{
}

void sub_1001AA800()
{
}

uint64_t sub_1001AA82C(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  void *v2 = v6;
  return v4 & 1;
}

uint64_t sub_1001AA89C(uint64_t a1, id *a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t result = sub_1001AA9C8();
  }

  else
  {
    NSString v5 = 0LL;
  }

  void *v2 = v5;
  return result;
}

void sub_1001AA900(uint64_t a1)
{
  uint64_t v2 = v1;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_1001AA978();
}

  ;
}

uint64_t sub_1001AA980()
{
  return *(void *)v0;
}

uint64_t sub_1001AA98C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _s13callservicesd37CSDConversationSpatialPersonaResolverC23joinedGenerationCounter33_06B9616770D716169D363C7FB0B2E32ALLs6UInt64Vvpfi_0()
{
  return 0LL;
}

uint64_t sub_1001AA9A4()
{
  return *v0;
}

uint64_t sub_1001AA9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A9670(a1, a2, a3, a4);
}

void sub_1001AA9B8(uint64_t a1, id *a2)
{
}

uint64_t sub_1001AA9C8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001AA9D0()
{
  return v0;
}

uint64_t sub_1001AA9E8(uint64_t a1)
{
  v4[0] = &unk_10037A960;
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 112);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001AAA70()
{
  return v0;
}

void *sub_1001AAA9C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease(v0[3]);
  uint64_t v2 = (char *)v0 + *(void *)(*v0 + 120LL);
  uint64_t v3 = type metadata accessor for Optional(0LL, *(void *)(v1 + 80));
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);

  return v0;
}

uint64_t sub_1001AAB08()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for Checksums(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Checksums);
}

uint64_t sub_1001AAB38()
{
  uint64_t v0 = sub_1001AAA70();
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for FileChecksum(uint64_t a1)
{
  uint64_t result = qword_100447178;
  if (!qword_100447178) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FileChecksum);
  }
  return result;
}

uint64_t sub_1001AAB8C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 160);
}

BOOL sub_1001AABC0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1001AABD0(uint64_t a1, char a2)
{
}

Swift::Int sub_1001AABF0(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1001AAC34(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001AABC0(*a1, *a2);
}

Swift::Int sub_1001AAC40()
{
  return sub_1001AABF0(*v0);
}

void sub_1001AAC48(uint64_t a1)
{
}

Swift::Int sub_1001AAC50(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001AAC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *(void *)(a3 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v10 = (char *)&v27 - v9;
  uint64_t v27 = v11;
  uint64_t v13 = type metadata accessor for AudioInterruptionProviderIdentifier(255LL, v12, v11, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v13, v13, 0LL, 0LL);
  uint64_t v15 = __chkstk_darwin(TupleTypeMetadata2);
  id v17 = (char *)&v27 - v16;
  uint64_t v18 = (char *)&v27 + *(int *)(v15 + 48) - v16;
  uint64_t v19 = *(void *)(v13 - 8);
  id v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20((char *)&v27 - v16, a1, v13);
  v20(v18, a2, v13);
  LODWORD(a2) = sub_1001AC110((uint64_t)v18);
  int v21 = sub_1001AC110((uint64_t)v17);
  if ((_DWORD)a2 != 1)
  {
    if (v21 != 1)
    {
      uint64_t v23 = v28;
      __int128 v24 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      v24(v10, v17, a3);
      v24(v8, v18, a3);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, a3, v27);
      __int128 v25 = *(void (**)(char *, uint64_t))(v23 + 8);
      v25(v8, a3);
      v25(v10, a3);
      return v22 & 1;
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, a3);
    goto LABEL_6;
  }

  if (v21 != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v13);
    char v22 = 0;
    return v22 & 1;
  }

  char v22 = 1;
  return v22 & 1;
}

uint64_t sub_1001AAE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AAC90(a1, a2, *(void *)(a3 + 16));
}

BOOL sub_1001AAE7C(uint64_t *a1)
{
  return sub_1001AA948(*a1, *v1);
}

void sub_1001AAE88(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_10023D14C(*a1, *v2);
  sub_1001AA978();
}

void sub_1001AAEB0(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_1001A9560(*a1, *v2);
  sub_1001AA978();
}

BOOL sub_1001AAED8(void *a1, uint64_t *a2)
{
  return sub_10023D150(a1, *a2);
}

uint64_t sub_1001AAEE0(uint64_t *a1)
{
  return sub_10023D17C(*a1);
}

uint64_t sub_1001AAEE8(uint64_t *a1)
{
  return sub_10023D18C(*a1);
}

uint64_t sub_1001AAEF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001A95FC();
  *a1 = result;
  return result;
}

void *sub_1001AAF14()
{
  return v0;
}

uint64_t sub_1001AAF50()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for AnyAudioInterruptionProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd28AnyAudioInterruptionProvider);
}

ValueMetadata *type metadata accessor for AudioInterruptionProviderSetActiveOptions()
{
  return &type metadata for AudioInterruptionProviderSetActiveOptions;
}

unint64_t sub_1001AAFA4()
{
  unint64_t result = qword_100447310;
  if (!qword_100447310)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037AB1C, &type metadata for AudioInterruptionProviderSetActiveOptions);
    atomic_store(result, (unint64_t *)&qword_100447310);
  }

  return result;
}

unint64_t sub_1001AAFE4()
{
  unint64_t result = qword_100447318;
  if (!qword_100447318)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037AAEC, &type metadata for AudioInterruptionProviderSetActiveOptions);
    atomic_store(result, (unint64_t *)&qword_100447318);
  }

  return result;
}

unint64_t sub_1001AB024()
{
  unint64_t result = qword_100447320;
  if (!qword_100447320)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037AB44, &type metadata for AudioInterruptionProviderSetActiveOptions);
    atomic_store(result, (unint64_t *)&qword_100447320);
  }

  return result;
}

unint64_t sub_1001AB064()
{
  unint64_t result = qword_100447328;
  if (!qword_100447328)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037AB7C, &type metadata for AudioInterruptionProviderSetActiveOptions);
    atomic_store(result, (unint64_t *)&qword_100447328);
  }

  return result;
}

uint64_t type metadata accessor for AudioInterruptionProviderIdentifier( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AudioInterruptionProviderIdentifier);
}

uint64_t sub_1001AB0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_1001AB0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t sub_1001AB0C0(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

void *sub_1001AB118(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 84);
  if (v8) {
    size_t v9 = *(void *)(v6 + 64);
  }
  else {
    size_t v9 = v7 + 1;
  }
  uint64_t v10 = *(_DWORD *)(v6 + 80);
  if (v10 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain(v13);
    return a1;
  }

  if (!v8)
  {
    if (!*((_BYTE *)a2 + v7)) {
      goto LABEL_26;
    }
    int v14 = (*((unsigned __int8 *)a2 + v7) - 1) << (8 * v7);
    if ((_DWORD)v7)
    {
      else {
        int v15 = 4;
      }
      __asm { BR              X11 }
    }

    if (v14 == -1) {
      goto LABEL_26;
    }
LABEL_25:
    memcpy(a1, a2, v9);
    return a1;
  }

uint64_t sub_1001AB26C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v5)
  {
    uint64_t result = sub_1001AB0AC(a1, v5, v3);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(v4 + 64);
    if (!*(_BYTE *)(a1 + v7)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    }
    int v8 = (*(unsigned __int8 *)(a1 + v7) - 1) << (8 * v7);
    if ((_DWORD)v7)
    {
      __asm { BR              X11 }
    }

    uint64_t result = (v8 + 1);
    if (v8 == -1) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    }
  }

  return result;
}

_BYTE *sub_1001AB34C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (v7)
  {
    if (!sub_1001AB0AC((uint64_t)a2, *(unsigned int *)(v6 + 84), *(void *)(a3 + 16)))
    {
LABEL_17:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
      if (!v7) {
        a1[v8] = 0;
      }
      return a1;
    }
  }

  else
  {
    if (!a2[v8]) {
      goto LABEL_17;
    }
    int v9 = (a2[v8] - 1) << (8 * v8);
    if ((_DWORD)v8)
    {
      else {
        int v10 = 4;
      }
      __asm { BR              X11 }
    }

    if (v9 == -1) {
      goto LABEL_17;
    }
  }

  if (v7) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v8 + 1;
  }
  memcpy(a1, a2, v11);
  return a1;
}

_BYTE *sub_1001AB460(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if ((_DWORD)v7)
  {
    int v9 = sub_1001AB0AC((uint64_t)a1, *(unsigned int *)(v6 + 84), *(void *)(a3 + 16));
    int v10 = sub_1001AB0AC((uint64_t)a2, v7, v5);
    if (v9)
    {
      if (!v10) {
        goto LABEL_33;
      }
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  char v11 = 8 * v8;
  if (!a1[v8]) {
    goto LABEL_16;
  }
  int v12 = (a1[v8] - 1) << v11;
  if ((_DWORD)v8)
  {
    else {
      int v13 = 4;
    }
    __asm { BR              X12 }
  }

  if (v12 == -1)
  {
LABEL_16:
    if (!a2[v8]) {
      goto LABEL_31;
    }
    int v14 = (a2[v8] - 1) << v11;
    if ((_DWORD)v8)
    {
      else {
        int v15 = 4;
      }
      __asm { BR              X11 }
    }

    int v10 = v14 + 1;
LABEL_25:
    if (v10)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_27;
    }

_BYTE *sub_1001AB6B4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (v7)
  {
    if (!sub_1001AB0AC((uint64_t)a2, *(unsigned int *)(v6 + 84), *(void *)(a3 + 16)))
    {
LABEL_17:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
      if (!v7) {
        a1[v8] = 0;
      }
      return a1;
    }
  }

  else
  {
    if (!a2[v8]) {
      goto LABEL_17;
    }
    int v9 = (a2[v8] - 1) << (8 * v8);
    if ((_DWORD)v8)
    {
      else {
        int v10 = 4;
      }
      __asm { BR              X11 }
    }

    if (v9 == -1) {
      goto LABEL_17;
    }
  }

  if (v7) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v8 + 1;
  }
  memcpy(a1, a2, v11);
  return a1;
}

_BYTE *sub_1001AB7C8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if ((_DWORD)v7)
  {
    int v9 = sub_1001AB0AC((uint64_t)a1, *(unsigned int *)(v6 + 84), *(void *)(a3 + 16));
    int v10 = sub_1001AB0AC((uint64_t)a2, v7, v5);
    if (v9)
    {
      if (!v10) {
        goto LABEL_33;
      }
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  char v11 = 8 * v8;
  if (!a1[v8]) {
    goto LABEL_16;
  }
  int v12 = (a1[v8] - 1) << v11;
  if ((_DWORD)v8)
  {
    else {
      int v13 = 4;
    }
    __asm { BR              X12 }
  }

  if (v12 == -1)
  {
LABEL_16:
    if (!a2[v8]) {
      goto LABEL_31;
    }
    int v14 = (a2[v8] - 1) << v11;
    if ((_DWORD)v8)
    {
      else {
        int v15 = 4;
      }
      __asm { BR              X11 }
    }

    int v10 = v14 + 1;
LABEL_25:
    if (v10)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_27;
    }

uint64_t sub_1001ABA1C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!(_DWORD)v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(void *)(v5 + 64);
  if (!(_DWORD)v6) {
    ++v8;
  }
  if (!a2) {
    return 0LL;
  }
  unsigned int v9 = a2 - v7;
  if (a2 > v7)
  {
    char v10 = 8 * v8;
    unsigned int v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)(a1 + v8);
      if (v11) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2) {
          goto LABEL_22;
        }
LABEL_8:
        int v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8)) {
          goto LABEL_22;
        }
LABEL_15:
        int v13 = (v11 - 1) << v10;
        if ((_DWORD)v8)
        {
          __asm { BR              X12 }
        }

        return v7 + v13 + 1;
      }

      int v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8)) {
        goto LABEL_15;
      }
    }
  }

void sub_1001ABB48(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  size_t v10 = *(void *)(v7 + 64);
  if (v8) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  char v12 = 8 * v11;
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        unsigned int v6 = &dword_100000004;
      }

      else if (v15 >= 0x100)
      {
        unsigned int v6 = 2;
      }

      else
      {
        unsigned int v6 = v15 > 1;
      }
    }

    else
    {
      unsigned int v6 = &_mh_execute_header.magic + 1;
    }
  }

  if (v9 < a2)
  {
    unsigned int v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }

        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }

        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void sub_1001ABD48()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1001ABD50()
{
  *(_WORD *)(v0 + v1) = v2;
}

void sub_1001ABD70()
{
  *uint64_t v0 = v1;
}

void sub_1001ABD78()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1001ABD88()
{
  *uint64_t v0 = v1;
}

uint64_t sub_1001ABD94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  if ((_DWORD)v4) {
    return sub_1001AB0AC(a1, v4, v2);
  }
  uint64_t v6 = *(void *)(v3 + 64);
  if (!*(_BYTE *)(a1 + v6)) {
    return 0LL;
  }
  int v7 = (*(unsigned __int8 *)(a1 + v6) - 1) << (8 * v6);
  if (!(_DWORD)v6) {
    return (v7 + 1);
  }
  return ((uint64_t (*)(void))((char *)&loc_1001ABDF4 + 4 * byte_10037AA0A[(v6 - 1)]))();
}

void sub_1001ABE2C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  size_t v7 = *(void *)(v5 + 64);
  if (v6 >= a2)
  {
    if ((_DWORD)v6)
    {
      if (!(_DWORD)a2) {
        return;
      }
    }

    else
    {
      a1[v7] = 0;
      if (!(_DWORD)a2) {
        return;
      }
    }

    sub_1001A9670((uint64_t)a1, a2, v6, v4);
    return;
  }

  unsigned int v8 = ~(_DWORD)v6 + a2;
  if (v7 >= 4)
  {
    bzero(a1, v7);
    *(_DWORD *)a1 = v8;
    LOBYTE(v9) = 1;
    if ((_DWORD)v6) {
      return;
    }
    goto LABEL_17;
  }

  int v9 = (v8 >> (8 * v7)) + 1;
  if (!(_DWORD)v7)
  {
LABEL_16:
    if ((_DWORD)v6) {
      return;
    }
    goto LABEL_17;
  }

  int v10 = v8 & ~(-1 << (8 * v7));
  bzero(a1, v7);
  if ((_DWORD)v7 == 3)
  {
    *(_WORD *)a1 = v10;
    a1[2] = BYTE2(v10);
    goto LABEL_16;
  }

  if ((_DWORD)v7 == 2)
  {
    *(_WORD *)a1 = v10;
    if ((_DWORD)v6) {
      return;
    }
    goto LABEL_17;
  }

  *a1 = v10;
  if (!(_DWORD)v6) {
LABEL_17:
  }
    a1[v7] = v9;
}

_BYTE *initializeBufferWithCopyOfBuffer for AudioInterruptionPriority(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioInterruptionPriority(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AudioInterruptionPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001AC010 + 4 * byte_10037AA13[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001AC044 + 4 * byte_10037AA0E[v4]))();
}

uint64_t sub_1001AC044(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AC04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001AC054LL);
  }
  return result;
}

uint64_t sub_1001AC060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001AC068LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001AC06C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AC074(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AC080(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1001AC088(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AudioInterruptionPriority()
{
  return &type metadata for AudioInterruptionPriority;
}

unint64_t sub_1001AC0A8()
{
  unint64_t result = qword_1004473D0;
  if (!qword_1004473D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037AD7C, &type metadata for AudioInterruptionPriority);
    atomic_store(result, (unint64_t *)&qword_1004473D0);
  }

  return result;
}

uint64_t sub_1001AC0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1001AC110(uint64_t a1)
{
  return sub_1001AB0AC(a1, 1LL, v1);
}

uint64_t TUConversationState.debugDescription.getter(uint64_t a1)
{
  uint64_t result = 0x64656E696F6A2ELL;
  switch(a1)
  {
    case 0LL:
      uint64_t v3 = 0x69746961772ELL;
      goto LABEL_7;
    case 1LL:
      return 0x697261706572702ELL;
    case 2LL:
      uint64_t v3 = 0x696E696F6A2ELL;
      goto LABEL_7;
    case 3LL:
      return result;
    case 4LL:
      uint64_t v3 = 0x697661656C2ELL;
LABEL_7:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x676E000000000000LL;
      break;
    default:
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v4._object;
      String.append(_:)(v4);
      swift_bridgeObjectRelease(object);
      v6._countAndFlagsBits = 41LL;
      v6._object = (void *)0xE100000000000000LL;
      String.append(_:)(v6);
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }

  return result;
}

uint64_t sub_1001AC230()
{
  return TUConversationState.debugDescription.getter(*v0);
}

BOOL sub_1001AC238(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_1001AC244(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_1001AC250(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  if (v3 != static String._unconditionallyBridgeFromObjectiveC(_:)(a2) || v5 != v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = sub_1001B1244();
    sub_1001B1144(v9, v10, v11, v8);
  }

  sub_1001B0EB8();
  sub_1001AA9C8();
  sub_10010B978();
}

uint64_t sub_1001AC2BC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB0000000074754FLL;
  uint64_t v3 = 0x6C6C416E496C6C61LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x6C65536E496C6C61LL;
    }
    else {
      uint64_t v5 = 0x636E4F6E496C6C61LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000074754F66LL;
    }
    else {
      unint64_t v6 = 0xE900000000000065LL;
    }
  }

  else
  {
    uint64_t v5 = 0x6C6C416E496C6C61LL;
    unint64_t v6 = 0xEB0000000074754FLL;
  }

  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x6C65536E496C6C61LL;
    }
    else {
      uint64_t v3 = 0x636E4F6E496C6C61LL;
    }
    if (a2 == 1) {
      unint64_t v2 = 0xEC00000074754F66LL;
    }
    else {
      unint64_t v2 = 0xE900000000000065LL;
    }
  }

  if (v5 == v3 && v6 == v2)
  {
    char v8 = 1;
    unint64_t v2 = v6;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_1001AC3E8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1001AC45C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1001AC55C + 4 * byte_10037AE1A[a2]))(0xD000000000000014LL);
}

void sub_1001AC55C(uint64_t a1)
{
  if (a1 != 0xD000000000000014LL || v2 != ((v1 - 32) | 0x8000000000000000LL)) {
    sub_1001B1144(a1, v2, 0xD000000000000014LL, (v1 - 32) | 0x8000000000000000LL);
  }
  sub_1001AA9C8();
  sub_1001B0EB8();
  sub_10010B978();
}

BOOL sub_1001AC67C(char a1, char a2)
{
  return a1 == a2;
}

void sub_1001AC68C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x656E6F6850LL;
  }
  else {
    uint64_t v3 = 0x656D695465636146LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE500000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x656E6F6850LL;
  }
  else {
    uint64_t v5 = 0x656D695465636146LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v6 = 0xE500000000000000LL;
  }
  else {
    uint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_1001B1144(v3, v4, v5, v6);
  }
  sub_1001B0EB8();
  sub_1001AA9C8();
  sub_10010B978();
}

uint64_t sub_1001AC714()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001B0DB0(v0, qword_1004473D8);
  sub_1001B0D98(v0, (uint64_t)qword_1004473D8);
  return Logger.init(subsystem:category:)( 0xD00000000000001CLL,  0x800000010036B100LL,  0xD000000000000019LL,  0x800000010036B120LL);
}

unint64_t sub_1001AC794(unint64_t result)
{
  if (result > 2) {
    return 0LL;
  }
  return result;
}

unint64_t sub_1001AC7A4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001AC794(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_1001AC7D4(uint64_t a1)
{
  switch(a1)
  {
    case 0LL:
      return 0x656E696665646E75LL;
    case 2LL:
      return 0x64656C6261736964LL;
    case 1LL:
      return 0x64656C62616E65LL;
  }

  v4[1] = v1;
  v4[2] = v2;
  v4[0] = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &unk_1003DDEA0,  v4,  &unk_1003DDEA0,  &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1001AC864()
{
  return sub_1001AC7D4(*v0);
}

uint64_t static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.< infix(_:_:)( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a2 == a5 && a1 < a4;
  return a2 < a5 || v6;
}

uint64_t CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8._countAndFlagsBits = sub_1001B10C8();
  sub_1001B1054(v8);
  sub_1001B0F28();
  v4._countAndFlagsBits = 0x3D44496E6567202CLL;
  v4._object = (void *)0xE800000000000000LL;
  String.append(_:)(v4);
  v9._countAndFlagsBits = sub_1001B10C8();
  object = v9._object;
  sub_1001B1054(v9);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0x3D6574617473202CLL;
  v6._object = (void *)0xE800000000000000LL;
  String.append(_:)(v6);
  v10._countAndFlagsBits = sub_1001AC7D4(a3);
  sub_1001B1054(v10);
  sub_1001B0EB8();
  sub_1001B0FB4(41LL);
  return 0x6963697472617028LL;
}

uint64_t sub_1001AC99C(char a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v8 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  Swift::String v9 = v7;
  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRetain(v7);
    uint64_t v10 = sub_1001ACB08(4LL, v8, (unint64_t)v9);
    if (a2 <= 0x7CF) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = 10911970LL;
    }
    if (a2 <= 0x7CF) {
      uint64_t v15 = 0xE000000000000000LL;
    }
    else {
      uint64_t v15 = 0xA300000000000000LL;
    }
    Swift::Int v8 = sub_1001ACBC4(v10, v11, v12, v13, v14, v15);
    int v17 = v16;
    sub_1001B0F5C();
    sub_1001AA9C8();
    sub_1001B0F28();
    Swift::String v9 = v17;
  }

  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v18._countAndFlagsBits = v8;
  v18._object = v9;
  String.append(_:)(v18);
  sub_1001B0F5C();
  sub_1001B10B4();
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v21._object;
  sub_1001B1054(v21);
  swift_bridgeObjectRelease(object);
  sub_1001B10A0();
  v22._countAndFlagsBits = sub_1001AC7D4(a4);
  sub_1001B1054(v22);
  sub_1001B0EB8();
  sub_1001B0FB4(41LL);
  return 0x3D64697028LL;
}

uint64_t sub_1001ACB08(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = a2;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = v6 | (v5 << 16);
    uint64_t v8 = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v9 & 1) != 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v8;
    }
    uint64_t v11 = String.subscript.getter(15LL, v10, a2, a3);
    swift_bridgeObjectRelease(a3);
    return v11;
  }

  return result;
}

Swift::Int sub_1001ACBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = 0LL;
  unint64_t v22 = 0xE000000000000000LL;
  uint64_t v12 = String.count.getter(a5, a6);
  uint64_t v13 = Substring.distance(from:to:)(a1, a2, a1, a2, a3, a4);
  BOOL v14 = __OFADD__(v12, v13);
  Swift::Int result = v12 + v13;
  if (v14)
  {
    __break(1u);
  }

  else
  {
    String.reserveCapacity(_:)(result);
    uint64_t v17 = a1;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    uint64_t v20 = a4;
    unint64_t v16 = sub_1001B0548();
    String.append<A>(contentsOf:)(&v17, &type metadata for Substring, v16);
    uint64_t v17 = a5;
    uint64_t v18 = a6;
    String.append<A>(contentsOf:)(&v17, &type metadata for String, &protocol witness table for String);
    return v21;
  }

  return result;
}

BOOL static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

uint64_t sub_1001ACCB8()
{
  return CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_1001ACCC4(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.< infix(_:_:)(*a1, a1[1], a3, *a2, a2[1]);
}

uint64_t sub_1001ACCD8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001ACD08( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_100207E58);
}

uint64_t sub_1001ACCE4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001ACD08( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_100207F94);
}

uint64_t sub_1001ACCF0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001ACD08( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10020806C);
}

uint64_t sub_1001ACCFC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001ACD08( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))static CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.__derived_struct_equals(_:_:));
}

uint64_t sub_1001ACD08( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional __swiftcall CSDConversationSpatialPersonaResolver.Mode.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DC848, v2);
  sub_1001B0EB8();
  if (v3 >= 3) {
    return (callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional)3;
  }
  else {
    return (callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional)v3;
  }
}

uint64_t CSDConversationSpatialPersonaResolver.Mode.rawValue.getter(char a1)
{
  if (!a1) {
    return sub_1001B1108();
  }
  if (a1 == 1) {
    return 0x6C65536E496C6C61LL;
  }
  return 0x636E4F6E496C6C61LL;
}

uint64_t sub_1001ACDD4(unsigned __int8 *a1, char *a2)
{
  return sub_1001AC2BC(*a1, *a2);
}

void sub_1001ACDE0()
{
}

uint64_t sub_1001ACDE8(uint64_t a1)
{
  return sub_1001B95D0(a1, *v1);
}

void sub_1001ACDF0(uint64_t a1)
{
}

callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional sub_1001ACDF8@<W0>( Swift::String *a1@<X0>, callservicesd::CSDConversationSpatialPersonaResolver::Mode_optional *a2@<X8>)
{
  result.value = CSDConversationSpatialPersonaResolver.Mode.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1001ACE24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CSDConversationSpatialPersonaResolver.Mode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001ACE6C()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter);
}

uint64_t sub_1001ACEA0(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter) = result;
  return result;
}

uint64_t sub_1001ACED0()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState);
}

uint64_t sub_1001ACF04(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState) = result;
  return result;
}

void sub_1001ACF14(uint64_t a1)
{
}

void sub_1001ACF20(uint64_t a1)
{
}

void sub_1001ACF2C(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  sub_1001B0E80((uint64_t)v4, (uint64_t)v6, 1LL);
  uint64_t v5 = *v4;
  uint64_t *v4 = a1;
  swift_bridgeObjectRelease(v5);
  sub_10004351C();
}

void sub_1001ACF6C(void *a1)
{
  unint64_t v3 = v1;
  id v4 = sub_1001B115C((uint64_t)v3, "tu_defaults");
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 stringForKey:v5];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    char v9 = v8;

    v10._countAndFlagsBits = v7;
    v10._object = v9;
    v11.callservicesd::CSDConversationSpatialPersonaResolver::Mode value = CSDConversationSpatialPersonaResolver.Mode.init(rawValue:)(v10).value;

    if (v11.value == callservicesd_CSDConversationSpatialPersonaResolver_Mode_unknownDefault) {
      callservicesd::CSDConversationSpatialPersonaResolver::Mode value = callservicesd_CSDConversationSpatialPersonaResolver_Mode_allInAllOut;
    }
    else {
      callservicesd::CSDConversationSpatialPersonaResolver::Mode value = v11.value;
    }
  }

  else
  {

    callservicesd::CSDConversationSpatialPersonaResolver::Mode value = callservicesd_CSDConversationSpatialPersonaResolver_Mode_allInOnce;
  }

  id v13 = objc_allocWithZone((Class)sub_1001B01D8());
  sub_1001AD0BC(a1, value);
  uint64_t ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance( v3,  ObjectType,  *(unsigned int *)((swift_isaMask & *v3) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v3) + 0x34LL));
  sub_1001B0F4C();
}

id sub_1001AD0BC(void *a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_1001B1234();
  sub_1001B116C(v6, v7, v8, v6);
  char v9 = &v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID];
  *(void *)char v9 = 0LL;
  v9[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState] = &_swiftEmptyDictionarySingleton;
  v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_initialParticipantIdentifiers] = &_swiftEmptySetSingleton;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue] = a1;
  v3[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode] = a2;
  uint64_t v10 = qword_1004466A0;
  id v11 = a1;
  if (v10 != -1) {
    swift_once(&qword_1004466A0, sub_1001AC714);
  }
  uint64_t v12 = sub_1001B0E98();
  id v13 = (os_log_s *)sub_1001B0D98(v12, (uint64_t)qword_1004473D8);
  Logger.logObject.getter(v13, v14, v15);
  os_log_type_t v16 = sub_1001B105C();
  if (os_log_type_enabled(v13, v16))
  {
    uint64_t v17 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v18 = sub_1001B0E78(32LL);
    uint64_t v25 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    if (a2)
    {
      if (a2 == 1) {
        uint64_t v19 = 0x6C65536E496C6C61LL;
      }
      else {
        uint64_t v19 = 0x636E4F6E496C6C61LL;
      }
      if (a2 == 1) {
        unint64_t v20 = 0xEC00000074754F66LL;
      }
      else {
        unint64_t v20 = 0xE900000000000065LL;
      }
    }

    else
    {
      unint64_t v20 = 0xEB0000000074754FLL;
      uint64_t v19 = sub_1001B1108();
    }

    uint64_t v24 = sub_1001D7CF0(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
    sub_1001B0F5C();
    sub_1001B0FD8((void *)&_mh_execute_header, v13, v16, "Initialized spatial persona resolver with mode=%s", v17);
    sub_1001B0F64(v18);
    sub_1001B0E60(v18);
    sub_1001B0E60((uint64_t)v17);
  }

  uint64_t v21 = (objc_class *)sub_1001B01D8();
  v26.receiver = v3;
  v26.super_class = v21;
  id v22 = objc_msgSendSuper2(&v26, "init");

  return v22;
}

void sub_1001AD320()
{
  unint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue];
  void *v1 = v3;
  sub_1001B10D8(v4, enum case for DispatchPredicate.onQueue(_:));
  id v5 = v3;
  sub_1001B123C();
  sub_1001B1010();
  if ((v3 & 1) != 0)
  {
    if ([v0 generationCounter] != (id)-1)
    {
      sub_1001B0F4C();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

id CSDConversationSpatialPersonaResolver.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void CSDConversationSpatialPersonaResolver.init()()
{
}

id CSDConversationSpatialPersonaResolver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_1001B01D8();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CSDConversationSpatialPersonaResolver(uint64_t a1)
{
  uint64_t result = qword_100447468;
  if (!qword_100447468) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CSDConversationSpatialPersonaResolver);
  }
  return result;
}

void sub_1001AD4F0()
{
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue);
  void *v1 = v3;
  sub_1001B10D8(v4, enum case for DispatchPredicate.onQueue(_:));
  id v5 = v3;
  sub_1001B123C();
  sub_1001B1010();
  if ((v3 & 1) != 0)
  {
    uint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState);
    sub_1001B0E6C( v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState,  (uint64_t)v18);
    uint64_t v7 = *v6;
    sub_10023BD50(&v19);
    unint64_t v8 = 0LL;
    int64_t v9 = v22;
    unint64_t v10 = v23;
    int64_t v11 = (unint64_t)(v21 + 64) >> 6;
    if (!v23) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v13 = v12 | (v9 << 6);
    while (1)
    {
      if (v8 <= *(void *)(*(void *)(v19 + 56) + 24 * v13 + 8)) {
        unint64_t v8 = *(void *)(*(void *)(v19 + 56) + 24 * v13 + 8);
      }
      if (v10) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v14 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        break;
      }
      if (v14 >= v11) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v14);
      int64_t v16 = v9 + 1;
      if (!v15)
      {
        int64_t v16 = v9 + 2;
        if (v9 + 2 >= v11) {
          goto LABEL_26;
        }
        unint64_t v15 = *(void *)(v20 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 3;
          if (v9 + 3 >= v11) {
            goto LABEL_26;
          }
          unint64_t v15 = *(void *)(v20 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v9 + 4;
            if (v9 + 4 >= v11) {
              goto LABEL_26;
            }
            unint64_t v15 = *(void *)(v20 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v9 + 5;
              if (v9 + 5 >= v11) {
                goto LABEL_26;
              }
              unint64_t v15 = *(void *)(v20 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v9 + 6;
                if (v9 + 6 >= v11) {
                  goto LABEL_26;
                }
                unint64_t v15 = *(void *)(v20 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v9 + 7;
                  while (v17 < v11)
                  {
                    unint64_t v15 = *(void *)(v20 + 8 * v17++);
                    if (v15)
                    {
                      int64_t v16 = v17 - 1;
                      goto LABEL_21;
                    }
                  }

void sub_1001AD6E4()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_1001B1098();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B0EA0();
  id v5 = *(void **)&v2[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue];
  void *v1 = v5;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v3);
  id v6 = v5;
  LOBYTE(v5) = sub_1001B123C();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v1, v3);
  if ((v5 & 1) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  if (v2[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] == 1) {
    goto LABEL_42;
  }
  uint64_t v7 = &v2[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState];
  if (v2[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode])
  {
    sub_1001B0E6C( (uint64_t)&v2[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState],  (uint64_t)&v48);
    uint64_t v8 = *v7;
    sub_10023BD50(v49);
    uint64_t v1 = (void *)v49[0];
    uint64_t v9 = v49[1];
    int64_t v10 = v49[3];
    unint64_t v11 = v49[4];
    int64_t v12 = (unint64_t)(v49[2] + 64LL) >> 6;
    swift_bridgeObjectRetain(v8);
    unint64_t v13 = &_swiftEmptyArrayStorage;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v10 << 6);
      }

      else
      {
        int64_t v16 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
          __break(1u);
          goto LABEL_45;
        }

        if (v16 >= v12) {
          goto LABEL_31;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v16);
        int64_t v18 = v10 + 1;
        if (!v17)
        {
          int64_t v18 = v10 + 2;
          if (v10 + 2 >= v12) {
            goto LABEL_31;
          }
          unint64_t v17 = *(void *)(v9 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v10 + 3;
            if (v10 + 3 >= v12) {
              goto LABEL_31;
            }
            unint64_t v17 = *(void *)(v9 + 8 * v18);
            if (!v17)
            {
              int64_t v18 = v10 + 4;
              if (v10 + 4 >= v12) {
                goto LABEL_31;
              }
              unint64_t v17 = *(void *)(v9 + 8 * v18);
              if (!v17)
              {
                int64_t v18 = v10 + 5;
                if (v10 + 5 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v17 = *(void *)(v9 + 8 * v18);
                if (!v17)
                {
                  int64_t v18 = v10 + 6;
                  if (v10 + 6 >= v12) {
                    goto LABEL_31;
                  }
                  unint64_t v17 = *(void *)(v9 + 8 * v18);
                  if (!v17)
                  {
                    int64_t v19 = v10 + 7;
                    while (v19 < v12)
                    {
                      unint64_t v17 = *(void *)(v9 + 8 * v19++);
                      if (v17)
                      {
                        int64_t v18 = v19 - 1;
                        goto LABEL_24;
                      }
                    }

void *sub_1001ADB14(uint64_t a1)
{
  uint64_t result = sub_10023BD50(&v25);
  if (!v29)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      goto LABEL_49;
    }
    int64_t v5 = (unint64_t)(v27 + 64) >> 6;
    if (v22 < v5)
    {
      unint64_t v23 = *(void *)(v26 + 8 * v22);
      int64_t v6 = v28 + 1;
      if (v23)
      {
LABEL_33:
        unint64_t v3 = (v23 - 1) & v23;
        unint64_t v4 = __clz(__rbit64(v23)) + (v6 << 6);
        goto LABEL_3;
      }

      int64_t v6 = v28 + 2;
      if (v28 + 2 < v5)
      {
        unint64_t v23 = *(void *)(v26 + 8 * v6);
        if (v23) {
          goto LABEL_33;
        }
        int64_t v6 = v28 + 3;
        if (v28 + 3 < v5)
        {
          unint64_t v23 = *(void *)(v26 + 8 * v6);
          if (v23) {
            goto LABEL_33;
          }
          int64_t v6 = v28 + 4;
          if (v28 + 4 < v5)
          {
            unint64_t v23 = *(void *)(v26 + 8 * v6);
            if (v23) {
              goto LABEL_33;
            }
            int64_t v6 = v28 + 5;
            if (v28 + 5 < v5)
            {
              unint64_t v23 = *(void *)(v26 + 8 * v6);
              if (!v23)
              {
                int64_t v24 = v28 + 6;
                do
                {
                  if (v24 >= v5) {
                    goto LABEL_46;
                  }
                  unint64_t v23 = *(void *)(v26 + 8 * v24++);
                }

                while (!v23);
                int64_t v6 = v24 - 1;
              }

              goto LABEL_33;
            }
          }
        }
      }
    }

unint64_t sub_1001ADD80(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0LL;
  }
  unint64_t result = a1[4];
  unint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v7 = a1 + 9;
    do
    {
      unint64_t v8 = *(v7 - 2);
      unint64_t v9 = *(v7 - 1);
      uint64_t v11 = *v7;
      v7 += 3;
      uint64_t v10 = v11;
      if (result <= v8) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = result;
      }
      if (result >= v8) {
        uint64_t v13 = v5;
      }
      else {
        uint64_t v13 = v10;
      }
      if (v4 != v9)
      {
        unint64_t v12 = result;
        uint64_t v13 = v5;
      }

      if (v4 >= v9) {
        unint64_t result = v12;
      }
      else {
        unint64_t result = v8;
      }
      if (v4 >= v9)
      {
        uint64_t v5 = v13;
      }

      else
      {
        unint64_t v4 = v9;
        uint64_t v5 = v10;
      }

      --v6;
    }

    while (v6);
  }

  return result;
}

void sub_1001ADDF0()
{
  if (qword_1004466A0 != -1) {
    swift_once(&qword_1004466A0, sub_1001AC714);
  }
  uint64_t v3 = sub_1001B0E98();
  unint64_t v4 = (os_log_s *)sub_1001B0D98(v3, (uint64_t)qword_1004473D8);
  uint64_t v5 = v0;
  uint64_t v6 = v4;
  Logger.logObject.getter(v5, v7, v8);
  os_log_type_t v9 = sub_1001B105C();
  if (os_log_type_enabled(v4, v9))
  {
    uint64_t v10 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v11 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    unint64_t v19 = v5;
    unint64_t v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
    *uint64_t v11 = v5;

    sub_1001B0FD8((void *)&_mh_execute_header, v6, v9, "[Reset] Resetting, %@", v10);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v11);
    sub_1001B0E60((uint64_t)v11);
    sub_1001B0E60((uint64_t)v10);
  }

  else
  {
  }

  uint64_t v13 = sub_1001B1234();
  sub_1001B116C(v13, v14, v15, v13);
  uint64_t v16 = (uint64_t)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
  sub_1001B0E80( (uint64_t)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID],  (uint64_t)&v19,  33LL);
  sub_1001B0DF0(v1, v16);
  swift_endAccess(&v19);
  int64_t v17 = &v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID];
  *(void *)int64_t v17 = 0LL;
  v17[8] = 1;
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter] = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = 0LL;
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for UInt64,  &type metadata for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter,  &protocol witness table for UInt64);
  sub_1001ACF14(v18);
  v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] = 0;
  sub_1001ACF20((uint64_t)&_swiftEmptySetSingleton);
  *(void *)&v5[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter] = 0LL;
  sub_1001B0FF8();
}

void sub_1001AE04C()
{
  uint64_t v41 = v2;
  uint64_t v42 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v10);
  sub_1001B1038();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8) != 1)
  {
    if (qword_1004466A0 != -1) {
      swift_once(&qword_1004466A0, sub_1001AC714);
    }
    uint64_t v28 = sub_1001B0E98();
    sub_1001B0D98(v28, (uint64_t)qword_1004473D8);
    id v37 = sub_1001B11D0();
    sub_1001B1224();
    os_log_type_t v29 = sub_1001B10E8();
    if (!os_log_type_enabled((os_log_t)v5, v29))
    {

      return;
    }

    int64_t v22 = (uint8_t *)sub_1001B0E78(12LL);
    __int16 v30 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)int64_t v22 = 138412290;
    id v39 = v37;
    id v31 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 4, v22 + 12);
    *__int16 v30 = v37;

    sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)v5,  v29,  "[Config] Bad API usage; localParticipantID is already set, %@",
      v22);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v30);
    uint64_t v32 = (uint64_t)v30;
    goto LABEL_16;
  }

  uint64_t v15 = v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID;
  sub_1001B0E6C(v0 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID, (uint64_t)&v39);
  sub_1001B03C0(v15, (uint64_t)v13, (uint64_t *)&unk_10044A400);
  uint64_t v16 = sub_1001B1234();
  int v17 = sub_1001AB0AC((uint64_t)v13, 1LL, v16);
  sub_1001AFF54((uint64_t)v13);
  if (v17 != 1)
  {
    if (qword_1004466A0 != -1) {
      swift_once(&qword_1004466A0, sub_1001AC714);
    }
    uint64_t v33 = sub_1001B0E98();
    sub_1001B0D98(v33, (uint64_t)qword_1004473D8);
    id v20 = sub_1001B11D0();
    sub_1001B1224();
    os_log_type_t v34 = sub_1001B10E8();
    if (sub_1001B0EC8(v34))
    {
      int64_t v22 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v23 = sub_1001B0E78(8LL);
      id v35 = sub_1001B0F98(5.7779e-34);
      sub_1001B0F8C((uint64_t)v38, v16);
      sub_1001B1270();

      uint64_t v27 = "[Config] Bad API usage; groupUUID is already set, %@";
      goto LABEL_15;
    }

void sub_1001AE52C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v26 = v20;
  char v28 = v27;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v29);
  sub_1001B0F00();
  uint64_t v79 = v31 - v30;
  uint64_t v32 = sub_1001B1098();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_1001B10F0();
  os_log_type_t v34 = *(void **)&v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue];
  *os_log_type_t v21 = v34;
  (*(void (**)(void *, void, uint64_t))(v33 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v32);
  id v35 = v34;
  LOBYTE(v34) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(void *, uint64_t))(v33 + 8))(v21, v32);
  if ((v34 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    swift_once(&qword_1004466A0, sub_1001AC714);
    goto LABEL_21;
  }

  p_opt_inst_meths = &OBJC_PROTOCOL___CSDCoreTelephonyClient.opt_inst_meths;
  uint64_t v23 = &unk_100447000;
  if (v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8] == 1)
  {
    if (qword_1004466A0 != -1) {
      swift_once(&qword_1004466A0, sub_1001AC714);
    }
    uint64_t v37 = sub_1001B0E98();
    sub_1001B0D98(v37, (uint64_t)qword_1004473D8);
    os_log_type_t v38 = v26;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v38, v39, v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (sub_1001B1134(v42))
    {
      uint64_t v43 = sub_1001B0E78(18LL);
      uint64_t v44 = sub_1001B0E78(32LL);
      v83 = (void *)v44;
      sub_1001B1208(1.5047e-36);
      int v80 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v46, v47);
      *(_WORD *)(v43 + _Block_object_dispose(va, 8) = 2080;
      uint64_t v48 = (uint64_t)&v38[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID];
      sub_1001B0E6C( (uint64_t)&v38[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID],  (uint64_t)&v80);
      sub_1001B03C0(v48, v79, (uint64_t *)&unk_10044A400);
      sub_1001B11F8(v79, (uint64_t (*)(void))&type metadata accessor for UUID);
      uint64_t v50 = v49;
      unint64_t v52 = v51;
      sub_1001AFF54(v79);
      uint64_t v53 = v50;
      uint64_t v23 = (void *)&unk_100447000;
      uint64_t v85 = sub_1001D7CF0(v53, v52, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &a9, v43 + 10, v43 + 18);

      sub_1001B1200();
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v22,  "Setting local-spatial-persona-enabled=%{BOOL}d without localParticipantID set groupUUID=%s",  (uint8_t *)v43,  0x12u);
      sub_1001B0F64(v44);
      sub_1001B0E60(v44);
      uint64_t v54 = v43;
      p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDCoreTelephonyClient + 40);
      sub_1001B0E60(v54);
    }

    else
    {
    }
  }

  if (!v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode])
  {
    uint64_t v55 = 0xEB0000000074754FLL;
    uint64_t v56 = sub_1001B1108();
    goto LABEL_12;
  }

  if (v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_mode] == 1)
  {
    uint64_t v55 = 0xEC00000074754F66LL;
    uint64_t v56 = 0x6C65536E496C6C61LL;
LABEL_12:
    char v57 = sub_1001B1144(v56, v55, 0x636E4F6E496C6C61LL, 0xE900000000000065LL);
    sub_1001AA9C8();
    if ((v57 & 1) == 0 || (v28 & 1) != 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

  swift_bridgeObjectRelease(0xE900000000000065LL);
  if ((v28 & 1) != 0) {
    goto LABEL_18;
  }
LABEL_16:
  if ([v26 conversationState] == (id)1) {
    v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_forceLocalParticipantState] = 1;
  }
LABEL_18:
  sub_1001AD320();
  os_log_type_t v21 = v58;
  *(void *)&v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter] = v58;
  uint64_t v59 = 1LL;
  if ((v28 & 1) == 0) {
    uint64_t v59 = 2LL;
  }
  *(void *)&v26[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState] = v59;
  if (p_opt_inst_meths[212] != (__objc2_meth_list *)-1LL) {
    goto LABEL_26;
  }
LABEL_21:
  uint64_t v60 = sub_1001B0E98();
  uint64_t v61 = (os_log_s *)sub_1001B0D98(v60, (uint64_t)qword_1004473D8);
  id v62 = v26;
  Logger.logObject.getter(v62, v63, v64);
  os_log_type_t v65 = sub_1001B105C();
  if (sub_1001B1134(v65))
  {
    uint64_t v66 = sub_1001B0E78(38LL);
    uint64_t v78 = sub_1001B0E78(64LL);
    uint64_t v85 = v78;
    sub_1001B1208(1.5048e-36);
    LODWORD(v83) = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v68, v69);
    *(_WORD *)(v66 + _Block_object_dispose(va, 8) = 2048;
    v83 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v66 + 10, v66 + 18);
    *(_WORD *)(v66 + 1_Block_object_dispose(va, 8) = 2080;
    id v70 = [v62 participantStateStrWithTruncate:1];
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);

    v83 = (void *)sub_1001B1278(v71, v72, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v66 + 20, v66 + 28);

    sub_1001B0EC0();
    *(_WORD *)(v66 + 2_Block_object_dispose(va, 8) = 2080;
    uint64_t v73 = (uint64_t)&v62[v23[128]];
    sub_1001B0E6C(v73, (uint64_t)&v83);
    sub_1001B03C0(v73, v79, (uint64_t *)&unk_10044A400);
    sub_1001AEC9C(v79, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_10044A400);
    uint64_t v75 = v74;
    sub_1001AFF54(v79);
    uint64_t v82 = sub_1001B1278(v75, v76, &v85);
    sub_1001B112C((uint64_t)&v82, (uint64_t)&v83, v77, v66 + 38);

    sub_1001B0EC0();
    _os_log_impl( (void *)&_mh_execute_header,  v61,  v22,  "Setting local-spatial-persona-enabled=%{BOOL}d, genID=%llu, participant-state=%s for groupUUID=%s",  (uint8_t *)v66,  0x26u);
    swift_arrayDestroy(v78, 2LL);
    sub_1001B0E60(v78);
    sub_1001B0E60(v66);
  }

  else
  {
  }

  sub_1001B0FF8();
}

void sub_1001AEAC4(uint64_t a1)
{
}

uint64_t sub_1001AEAD8(uint64_t a1)
{
  if (!v6) {
    return 7104878LL;
  }
  sub_1001B03EC(&v5, v4);
  sub_1001B03FC((uint64_t)v4, (uint64_t)v3);
  uint64_t v1 = String.init<A>(reflecting:)(v3, (char *)&type metadata for Any + 8);
  sub_1001B0438(v4);
  return v1;
}

void sub_1001AEB64(uint64_t a1)
{
}

void sub_1001AEB78(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v7 = sub_1001B122C(a1, a2);
  sub_1001B0E88();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v17 - v12;
  sub_1001AFF14(a3);
  sub_1001B0E88();
  __chkstk_darwin(v14);
  sub_1001B10F0();
  sub_1001B03C0(a1, v3, a3);
  if (sub_1001AB0AC(v3, 1LL, v7) != 1)
  {
    sub_1001B0338(v3, (uint64_t)v13, a2);
    sub_1001B036C((uint64_t)v13, (uint64_t)v11, a2);
    String.init<A>(reflecting:)(v11, v7);
    uint64_t v15 = sub_1001B1244();
    sub_1001B038C(v15, v16);
  }

  sub_1001B1064();
}

void sub_1001AEC88(uint64_t a1)
{
}

void sub_1001AEC9C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = sub_1001B122C(a1, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B1038();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - v9;
  sub_1001AFF14(a3);
  sub_1001B0E88();
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v14 = v13 - v12;
  sub_1001B03C0(a1, v13 - v12, a3);
  if (sub_1001AB0AC(v14, 1LL, v6) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v10, v14, v6);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v3, v10, v6);
    uint64_t v15 = sub_1001B1244();
    String.init<A>(reflecting:)(v15, v16);
    sub_1001B1264(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }

  sub_1001B1064();
}

void sub_1001AEDA8(uint64_t a1)
{
}

void sub_1001AEDBC(uint64_t a1)
{
}

void sub_1001AEDD0(uint64_t a1)
{
}

#error "1001AEE00: call analysis failed (funcsize=14)"
BOOL sub_1001AEE1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char **v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL result;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  os_log_s *v136;
  os_log_s *v137;
  uint64_t v138;
  uint64_t v139;
  os_log_type_t v140;
  os_log_type_t v141;
  id v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149[3];
  uint64_t v150;
  _BYTE v151[16];
  _BYTE v152[24];
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  sub_1001B0F10();
  v155 = v3;
  v156 = v4;
  __int128 v5 = v1;
  uint64_t v7 = v6;
  v148 = v8;
  uint64_t v10 = v9;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v14 = v13 - v12;
  sub_1001B1098();
  sub_1001B0FC4();
  __chkstk_darwin(v15);
  sub_1001B0F00();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = *(void **)(v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_queue);
  *(void *)(v17 - v16) = v19;
  (*(void (**)(uint64_t, void, void *))(v2 + 104))( v17 - v16,  enum case for DispatchPredicate.onQueue(_:),  v0);
  id v20 = v19;
  os_log_type_t v21 = _dispatchPreconditionTest(_:)(v18);
  sub_1001B1264(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }

  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8) & 1) == 0
    && *(void *)(v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID) == v10)
  {
    if (qword_1004466A0 != -1) {
      swift_once(&qword_1004466A0, sub_1001AC714);
    }
    os_log_type_t v22 = sub_1001B0E98();
    uint64_t v23 = sub_1001B0F78(v22, (uint64_t)qword_1004473D8);
    Logger.logObject.getter(v23, v24, v25);
    uint64_t v26 = sub_1001B10E8();
    if (sub_1001B0EC8(v26))
    {
      char v27 = sub_1001B0E78(12LL);
      char v28 = sub_1001B0E78(8LL);
      *(_DWORD *)char v27 = 138412290;
      v153 = v23;
      uint64_t v29 = v23;
      sub_1001B0F8C((uint64_t)&v153, (uint64_t)&v154);
      sub_1001B1270();

      sub_1001B0EEC((void *)&_mh_execute_header, v30, v31, "[Upsert] Bad API usage; localParticipantID used, %@");
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64(v28);
      uint64_t v32 = v28;
LABEL_29:
      sub_1001B0E60(v32);
      sub_1001B0E60(v27);

      return 0LL;
    }

    goto LABEL_30;
  }

  uint64_t v33 = (uint64_t *)(v5
                  + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_initialParticipantIdentifiers);
  sub_1001B0E6C( v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_initialParticipantIdentifiers,  (uint64_t)&v153);
  sub_100260DC4(v10, *v33);
  os_log_type_t v21 = v148;
  if ((v34 & 1) != 0)
  {
    if (*(void *)(v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter) < v148) {
      *(void *)(v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_joinedGenerationCounter) = v148;
    }
    sub_1001B0E80((uint64_t)v33, (uint64_t)v152, 33LL);
    sub_10028D7B0(v10);
    swift_endAccess(v152);
  }

  v147 = v14;
  uint64_t v2 = v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState;
  sub_1001B0E6C( v5 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState,  (uint64_t)v152);
  id v35 = sub_1001C9EC4(v10, *(void *)v2);
  os_log_type_t v38 = &selRef_setMockRingtoneSuppressedRemotely_;
  if ((v39 & 1) != 0)
  {
    uint64_t v19 = v7;
    if (qword_1004466A0 == -1)
    {
LABEL_20:
      id v62 = sub_1001B0E98();
      uint64_t v63 = sub_1001B0F78(v62, (uint64_t)qword_1004473D8);
      Logger.logObject.getter(v63, v64, v65);
      uint64_t v66 = sub_1001B11C8();
      if (!os_log_type_enabled((os_log_t)v0, v66))
      {

        uint64_t v7 = v19;
        os_log_type_t v38 = &selRef_setMockRingtoneSuppressedRemotely_;
        goto LABEL_38;
      }

      int v45 = sub_1001B0E78(32LL);
      v145 = sub_1001B0E78(96LL);
      v150 = v145;
      *(_DWORD *)int v45 = 136315650;
      v143 = v19;
      int v67 = CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v10, v21, (uint64_t)v19);
      uint64_t v69 = sub_1001B0FBC(v67, v68);
      sub_1001B119C(v69);
      sub_1001B11BC((uint64_t)v149, v70, v71, v72);
      sub_1001B0F28();
      *(_WORD *)(v45 + 12) = 2080;
      uint64_t v73 = sub_1001AC7D4((uint64_t)[v63 conversationState]);
      uint64_t v75 = sub_1001B0FBC(v73, v74);
      uint64_t v76 = sub_1001B114C(v75);
      sub_1001B11BC(v76, v77, v78, v79);

      sub_1001B0F28();
      *(_WORD *)(v45 + 22) = 2080;
      int v80 = (uint64_t)v63 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID;
      sub_1001B0E6C( (uint64_t)v63 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID,  (uint64_t)v149);
      sub_1001B03C0(v80, v147, (uint64_t *)&unk_10044A400);
      sub_1001AEC9C(v147, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_10044A400);
      uint64_t v82 = v81;
      v84 = v83;
      sub_1001AFF54(v147);
      uint64_t v85 = v82;
      os_log_type_t v38 = &selRef_setMockRingtoneSuppressedRemotely_;
      v86 = sub_1001D7CF0(v85, v84, &v150);
      v87 = sub_1001B0ED8(v86);
      ((void (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v87, v88, v89);

      v90 = v84;
      os_log_type_t v21 = v148;
      swift_bridgeObjectRelease(v90);
      v91 = v66;
      uint64_t v7 = v143;
      sub_1001B1078( (void *)&_mh_execute_header,  (os_log_s *)v0,  v91,  "[Upsert] Tracking new participant, state=%s, resolved-state=%s, groupUUID=%s");
      uint64_t v61 = v145;
      goto LABEL_22;
    }

void sub_1001AF8E0(uint64_t a1)
{
}

uint64_t sub_1001AF968(char a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState);
  sub_1001B0E6C( v1 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState,  (uint64_t)v22);
  swift_bridgeObjectRetain_n(*v3, 2LL);
  sub_1001E7A54();
  __int128 v5 = v4;
  sub_1001B0EB8();
  os_log_type_t v21 = v5;
  sub_1001B0458(&v21);
  sub_1001B0EB8();
  uint64_t v6 = v21;
  uint64_t v7 = v21[2];
  if (v7)
  {
    os_log_type_t v21 = _swiftEmptyArrayStorage;
    sub_100250050(0, v7, 0);
    uint64_t v8 = v21;
    uint64_t v9 = v6 + 7;
    char v10 = a1 & 1;
    do
    {
      uint64_t v11 = sub_1001AC99C(v10, *(v9 - 2), *(v9 - 1), *v9);
      uint64_t v13 = v12;
      os_log_type_t v21 = v8;
      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1)
      {
        sub_100250050(v14 > 1, v15 + 1, 1);
        uint64_t v8 = v21;
      }

      v9 += 4;
      v8[2] = v15 + 1;
      uint64_t v16 = &v8[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
      --v7;
    }

    while (v7);
    sub_1001B1164();
  }

  else
  {
    sub_1001B1164();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }

  os_log_type_t v21 = v8;
  uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  unint64_t v18 = sub_1001B04C0();
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v17, v18);
  sub_1001B0EB8();
  return v19;
}

uint64_t CSDConversationSpatialPersonaResolver.description.getter()
{
  uint64_t v38 = v1;
  uint64_t v39 = v2;
  uint64_t v3 = v0;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v4);
  sub_1001B0F00();
  uint64_t v7 = v6 - v5;
  _StringGuts.grow(_:)(17LL);
  uint64_t v8 = sub_1001B121C();
  id v9 = sub_1001B115C(v8, "conversationState");
  v10._countAndFlagsBits = sub_1001AC7D4((uint64_t)v9);
  String.append(_:)(v10);
  uint64_t v11 = sub_1001B0F5C();
  v33[0] = sub_1001B115C(v11, "generationCounter");
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v12);
  sub_1001B0F5C();
  _StringGuts.grow(_:)(47LL);
  sub_1001B121C();
  unint64_t v36 = 0xD00000000000001DLL;
  unint64_t v37 = 0x800000010036AE80LL;
  if ((v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID + 8] & 1) != 0)
  {
    unint64_t v13 = 0xE300000000000000LL;
    uint64_t v14 = 7104878LL;
  }

  else
  {
    v33[0] = *(void *)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantID];
    uint64_t v14 = String.init<A>(reflecting:)(v33, &type metadata for UInt64);
    unint64_t v13 = v15;
  }

  unint64_t v16 = v13;
  String.append(_:)(*(Swift::String *)&v14);
  sub_1001B0F28();
  sub_1001B10B4();
  v33[0] = *(void *)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localGenerationCounter];
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v17);
  sub_1001B0F28();
  sub_1001B10A0();
  v18._countAndFlagsBits = sub_1001AC7D4(*(void *)&v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_localParticipantState]);
  String.append(_:)(v18);
  sub_1001B0F28();
  sub_1001B0FB4(41LL);
  uint64_t v20 = v36;
  uint64_t v19 = (void *)v37;
  unint64_t v36 = 0LL;
  unint64_t v37 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  sub_1001B121C();
  v33[0] = 0xD000000000000012LL;
  v33[1] = 0x800000010036AEA0LL;
  os_log_type_t v21 = &v0[OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState];
  sub_1001B0E6C( (uint64_t)v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_participantState,  (uint64_t)&v36);
  if (*(void *)(*(void *)v21 + 16LL))
  {
    id v22 = [v3 participantStateStrWithTruncate:0];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  }

  sub_1001B11EC();
  sub_1001B0EC0();
  uint64_t v34 = 0x49555570756F7267LL;
  unint64_t v35 = 0xEA00000000003D44LL;
  uint64_t v23 = (uint64_t)v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID;
  sub_1001B0E6C( (uint64_t)v3 + OBJC_IVAR____TtC13callservicesd37CSDConversationSpatialPersonaResolver_groupUUID,  (uint64_t)v33);
  sub_1001B03C0(v23, v7, (uint64_t *)&unk_10044A400);
  sub_1001AEC9C(v7, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_10044A400);
  uint64_t v25 = v24;
  char v27 = v26;
  sub_1001AFF54(v7);
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  sub_1001B1200();
  uint64_t v34 = 0x6465766C6F736572LL;
  unint64_t v35 = 0xEF3D65746174732DLL;
  sub_1001B0F6C();
  v29._countAndFlagsBits = 0x3D44496E6567LL;
  v29._object = (void *)0xE600000000000000LL;
  String.append(_:)(v29);
  sub_1001B0F5C();
  sub_1001B0F6C();
  v30._countAndFlagsBits = v20;
  v30._object = v19;
  String.append(_:)(v30);
  sub_1001B0F28();
  sub_1001B0F6C();
  sub_1001B11EC();
  sub_1001B0EC0();
  sub_1001B0F6C();
  v31._countAndFlagsBits = sub_1001B1244();
  String.append(_:)(v31);
  sub_1001B0EB8();
  return v34;
}

uint64_t sub_1001AFF14(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1001AFF54(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1001AFF98()
{
  unint64_t result = qword_100447408;
  if (!qword_100447408)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter,  &type metadata for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter);
    atomic_store(result, (unint64_t *)&qword_100447408);
  }

  return result;
}

unint64_t sub_1001AFFD8()
{
  unint64_t result = qword_100447410;
  if (!qword_100447410)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CSDConversationSpatialPersonaResolver.Mode,  &type metadata for CSDConversationSpatialPersonaResolver.Mode);
    atomic_store(result, (unint64_t *)&qword_100447410);
  }

  return result;
}

__n128 initializeBufferWithCopyOfBuffer for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CSDConversationSpatialPersonaResolver.SpatialPersonaCounter()
{
}

uint64_t getEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.Mode( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CSDConversationSpatialPersonaResolver.Mode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001B0154 + 4 * byte_10037AE29[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001B0188 + 4 * byte_10037AE24[v4]))();
}

uint64_t sub_1001B0188(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B0190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001B0198LL);
  }
  return result;
}

uint64_t sub_1001B01A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001B01ACLL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_1001B01B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B01B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1001B01C4(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

void type metadata accessor for CSDConversationSpatialPersonaResolver.Mode()
{
}

uint64_t sub_1001B01D8()
{
  return type metadata accessor for CSDConversationSpatialPersonaResolver(0LL);
}

void sub_1001B01E0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_10037AFC8;
  sub_1001B0298(319LL);
  if (v3 <= 0x3F)
  {
    _OWORD v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_10037AFE0;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10037AFF8;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
  }

void sub_1001B0298(uint64_t a1)
{
  if (!qword_100447478)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100447478);
    }
  }

void type metadata accessor for SpatialPersonaState()
{
}

unint64_t sub_1001B02FC()
{
  unint64_t result = qword_100447480;
  if (!qword_100447480)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037B09C, &unk_1003DDEA0);
    atomic_store(result, (unint64_t *)&qword_100447480);
  }

  return result;
}

void sub_1001B0338(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_1001B118C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_1001AA978();
}

void sub_1001B036C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1001B118C(a1, a2, a3);
  sub_1001B0FE0(v3);
  sub_1001AA978();
}

void sub_1001B038C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = sub_1001B122C(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_1001AA978();
}

void sub_1001B03C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1001AFF14(a3);
  sub_1001B0FE0(v3);
  sub_1001AA978();
}

_OWORD *sub_1001B03EC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1001B03FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1001B0438(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_1001B0458(void *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10022A48C();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1001B0584(v5);
  *a1 = v2;
}

unint64_t sub_1001B04C0()
{
  unint64_t result = qword_1004474A0;
  if (!qword_1004474A0)
  {
    uint64_t v1 = sub_1001B0504((uint64_t *)&unk_100447EE0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004474A0);
  }

  return result;
}

uint64_t sub_1001B0504(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1001B0548()
{
  unint64_t result = qword_1004474A8;
  if (!qword_1004474A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1004474A8);
  }

  return result;
}

void sub_1001B0584(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1001B0B90(0LL, v3, 1LL, a1);
      }
      return;
    }

uint64_t sub_1001B0B90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 32 * a3 + 24;
    while (2)
    {
      unint64_t v6 = *(void *)(v4 + 32 * a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        uint64_t v9 = (__int128 *)(v8 - 56);
        if (v6 >= *(void *)(v8 - 56)) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }

        __int128 v11 = *v9;
        __int128 v10 = *(_OWORD *)(v8 - 40);
        *(void *)(v8 - 32) = *(void *)v8;
        v8 -= 32LL;
        __int128 v12 = *(_OWORD *)(v8 + 16);
        v9[2] = v11;
        v9[3] = v10;
        *(void *)(v8 - 24) = v6;
        *(_OWORD *)(v8 - 16) = v12;
        ++v7;
      }

      while (a3 != v7);
      ++a3;
      v5 += 32LL;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_1001B0C0C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 32;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 32;
  if (v9 >= v11)
  {
    sub_10024F2D4(a2, (uint64_t)(a3 - (void)a2) / 32, a4);
    __int128 v12 = &v4[32 * v11];
    if (v7 >= v6 || v10 < 32) {
      goto LABEL_35;
    }
    unint64_t v17 = (char *)(a3 - 32);
    while (1)
    {
      unint64_t v18 = v17 + 32;
      uint64_t v19 = v6 - 32;
      if (*((void *)v12 - 4) >= *((void *)v6 - 4))
      {
        BOOL v21 = v18 != v12 || v17 >= v12;
        uint64_t v19 = v12 - 32;
        v12 -= 32;
        if (!v21) {
          goto LABEL_31;
        }
      }

      else
      {
        BOOL v20 = v18 != v6 || v17 >= v6;
        v6 -= 32;
        if (!v20) {
          goto LABEL_31;
        }
      }

      __int128 v22 = *((_OWORD *)v19 + 1);
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v19;
      *((_OWORD *)v17 + 1) = v22;
LABEL_31:
      v17 -= 32;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_35;
      }
    }
  }

  sub_10024F2D4(a1, (a2 - a1) / 32, a4);
  __int128 v12 = &v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*(void *)v6 >= *(void *)v4)
    {
      uint64_t v13 = v4;
      BOOL v14 = v7 == v4;
      v4 += 32;
      if (!v14) {
        goto LABEL_9;
      }
LABEL_10:
      v7 += 32;
    }

    uint64_t v13 = v6;
    BOOL v14 = v7 == v6;
    v6 += 32;
    if (v14) {
      goto LABEL_10;
    }
LABEL_9:
    __int128 v15 = *((_OWORD *)v13 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    *((_OWORD *)v7 + 1) = v15;
    goto LABEL_10;
  }

uint64_t sub_1001B0D98(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_1001B0DB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_1001B0DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void *sub_1001B0E38(void *a1)
{
  return a1;
}

uint64_t sub_1001B0E60(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_1001B0E6C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_1001B0E78(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_1001B0E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

  ;
}

uint64_t sub_1001B0E98()
{
  return type metadata accessor for Logger(0LL);
}

  ;
}

uint64_t sub_1001B0EB8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B0EC0()
{
  return swift_bridgeObjectRelease(v0);
}

BOOL sub_1001B0EC8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1001B0ED8(uint64_t a1)
{
  *(void *)(v1 - 192) = a1;
  return v1 - 192;
}

void sub_1001B0EEC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

  ;
}

uint64_t sub_1001B0F28()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B0F30(float a1)
{
  float *v1 = a1;
  *(void *)(v5 - 216) = v1 + 1;
  return CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(v2, v3, v4);
}

  ;
}

uint64_t sub_1001B0F5C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B0F64(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

void sub_1001B0F6C()
{
  v0._countAndFlagsBits = 32LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

id sub_1001B0F78(uint64_t a1, uint64_t a2)
{
  return v2;
}

uint64_t sub_1001B0F8C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

id sub_1001B0F98(float a1)
{
  float *v1 = a1;
  *(void *)(v3 - 12_Block_object_dispose(va, 8) = v2;
  return v2;
}

void sub_1001B0FB4(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001B0FBC(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 - 160));
}

  ;
}

void sub_1001B0FD8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1001B0FE0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

  ;
}

uint64_t sub_1001B1010()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1001B1024()
{
  return sub_1001AFF54(v0);
}

  ;
}

void sub_1001B1054(Swift::String a1)
{
}

uint64_t sub_1001B105C()
{
  return static os_log_type_t.default.getter();
}

  ;
}

void sub_1001B1078(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void sub_1001B1084()
{
}

uint64_t sub_1001B1098()
{
  return type metadata accessor for DispatchPredicate(0LL);
}

void sub_1001B10A0()
{
  v0._countAndFlagsBits = 0x3D7473202CLL;
  v0._object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
}

void sub_1001B10B4()
{
  v0._countAndFlagsBits = 0x3D646967202CLL;
  v0._object = (void *)0xE600000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1001B10C8()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_1001B10D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1001B10E8()
{
  return static os_log_type_t.error.getter();
}

  ;
}

uint64_t sub_1001B1108()
{
  return 0x6C6C416E496C6C61LL;
}

uint64_t sub_1001B111C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B112C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

BOOL sub_1001B1134(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1001B1144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_1001B114C(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

id sub_1001B115C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001B1164()
{
  return swift_release(v0);
}

uint64_t sub_1001B116C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A9670(v4, 1LL, 1LL, a4);
}

uint64_t sub_1001B117C()
{
  return CSDConversationSpatialPersonaResolver.SpatialPersonaCounter.description.getter(*(void *)(v2 - 224), v0, v1);
}

uint64_t sub_1001B118C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t sub_1001B119C(uint64_t result)
{
  *(void *)(v1 - 184) = result;
  return result;
}

uint64_t sub_1001B11AC()
{
  return sub_1001D7CF0(v0, v1, (uint64_t *)(v2 - 160));
}

uint64_t sub_1001B11BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

uint64_t sub_1001B11C8()
{
  return static os_log_type_t.default.getter();
}

id sub_1001B11D0()
{
  return v0;
}

uint64_t sub_1001B11D8()
{
  return 0x6C616E696769726FLL;
}

void sub_1001B11EC()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1001B11F8(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1001B1200()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1001B1208(float a1)
{
  float *v1 = a1;
}

uint64_t sub_1001B121C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

uint64_t sub_1001B1224()
{
  return Logger.logObject.getter();
}

uint64_t sub_1001B122C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2(0LL);
}

uint64_t sub_1001B1234()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_1001B123C()
{
  return _dispatchPreconditionTest(_:)(v0);
}

uint64_t sub_1001B1244()
{
  return v0;
}

  ;
}

uint64_t sub_1001B1264@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1001B1270()
{
  void *v1 = v0;
}

uint64_t sub_1001B1278(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001D7CF0(a1, v3, a3);
}

  ;
}

BOOL FTServerBag.isQuickRelaySupported.getter()
{
  id v1 = (id)_IDSQuickRelayProtocolVersionNumber();
  if (v1)
  {
    id v2 = v1;
    id v3 = sub_1001B1440(0xD000000000000016LL, 0x800000010036B1B0LL, v0);
    if (v3)
    {
      id v4 = v3;
      _bridgeAnyObjectToAny(_:)(v13, v3);
      swift_unknownObjectRelease(v4);
    }

    else
    {
      memset(v13, 0, sizeof(v13));
    }

    sub_1001B14A0((uint64_t)v13, (uint64_t)v14);
    if (v15)
    {
      unint64_t v6 = sub_1001B1528();
      if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
      {
        uint64_t v7 = v12;
        id v8 = [v2 compare:v12];

        return v8 != (id)-1LL;
      }
    }

    else
    {
      sub_1001B14E8((uint64_t)v14);
    }

    id v10 = sub_1001704C4();
    uint64_t v11 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Server bag does not support quick relay since minimum version is unspecified",  76LL,  2LL,  &_mh_execute_header,  v10,  v11,  _swiftEmptyArrayStorage);
  }

  else
  {
    id v2 = sub_1001704C4();
    uint64_t v5 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Server bag does not support quick relay since current version is unspecified",  76LL,  2LL,  &_mh_execute_header,  v2,  v5,  _swiftEmptyArrayStorage);
  }

  return 0LL;
}

id sub_1001B1440(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 objectForKey:v5];

  return v6;
}

uint64_t sub_1001B14A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B14E8(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1001B1528()
{
  unint64_t result = qword_100448780;
  if (!qword_100448780)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100448780);
  }

  return result;
}

uint64_t sub_1001B1564()
{
  uint64_t v1 = v0 + OBJC_IVAR___CSDUserIntentManager____lazy_storage___applicationStateValidator;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___CSDUserIntentManager____lazy_storage___applicationStateValidator + 8);
  if (v2)
  {
    uint64_t v3 = *(_BYTE *)v1 & 1;
  }

  else
  {
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR___CSDUserIntentManager_queue);
    id v5 = objc_allocWithZone((Class)type metadata accessor for ProcessObserver());
    id v6 = v4;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v8 = [v5 initWithBundleIdentifiers:isa queue:v6];

    uint64_t v9 = *(void **)(v1 + 8);
    *(void *)uint64_t v1 = 0LL;
    *(void *)(v1 + _Block_object_dispose(va, 8) = v8;
    v8;

    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
  }

  id v10 = v2;
  return v3;
}

uint64_t sub_1001B1630()
{
  uint64_t v1 = sub_1001AFF14(&qword_100447590);
  uint64_t v2 = swift_allocObject(v1, 232LL, 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_10037B130;
  *(void *)(v2 + 56) = &unk_1003E35B8;
  *(void *)(v2 + 64) = &off_1003E35E8;
  *(_BYTE *)(v2 + 32) = 0;
  char v3 = sub_1001B1564();
  *(void *)(v2 + 96) = &unk_1003E3538;
  *(void *)(v2 + 104) = &off_1003E3600;
  *(_BYTE *)(v2 + 72) = v3 & 1;
  *(void *)(v2 + 80) = v4;
  char v5 = *(_BYTE *)(v0 + OBJC_IVAR___CSDUserIntentManager_donatedIntentValidator);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR___CSDUserIntentManager_donatedIntentValidator + 8);
  *(void *)(v2 + 136) = &unk_1003E34B8;
  *(void *)(v2 + 144) = &off_1003E3618;
  *(_BYTE *)(v2 + 112) = v5;
  *(void *)(v2 + 120) = v6;
  *(void *)(v2 + 176) = &unk_1003E3438;
  *(void *)(v2 + 184) = &off_1003E3630;
  *(_BYTE *)(v2 + 152) = 1;
  uint64_t v7 = v0 + OBJC_IVAR___CSDUserIntentManager_mediaRemoteStateValidator;
  *(void *)(v2 + 216) = type metadata accessor for MediaRemoteStateValidator(0LL);
  *(void *)(v2 + 224) = &off_1003E35D0;
  id v8 = sub_1001B236C((void *)(v2 + 192));
  sub_1001B23A8(v7, (uint64_t)v8);
  swift_retain(v6);
  return v2;
}

id sub_1001B1744(void *a1)
{
  v1[OBJC_IVAR___CSDUserIntentManager_privateAPIValidator] = 0;
  char v3 = &v1[OBJC_IVAR___CSDUserIntentManager____lazy_storage___applicationStateValidator];
  *char v3 = 0LL;
  v3[1] = 0LL;
  uint64_t v4 = &v1[OBJC_IVAR___CSDUserIntentManager_donatedIntentValidator];
  uint64_t v5 = sub_1001AFF14(&qword_100447598);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = v1;
  uint64_t v7 = sub_1001B2070(30LL, (uint64_t)&j___s8Dispatch0A4TimeV3nowACyFZ, 0LL);
  char *v4 = 0;
  *((void *)v4 + 1) = v7;
  v6[OBJC_IVAR___CSDUserIntentManager_backgroundBluetoothAccessValidator] = 1;
  id v8 = &v6[OBJC_IVAR___CSDUserIntentManager_mediaRemoteStateValidator];
  *(void *)&v6[OBJC_IVAR___CSDUserIntentManager_mediaRemoteStateValidator] = 5LL;
  uint64_t v9 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL))(v8, v9, v10);
  v8[*(int *)(type metadata accessor for MediaRemoteStateValidator(0LL) + 20)] = 1;
  *(void *)&v6[OBJC_IVAR___CSDUserIntentManager_queue] = a1;
  id v11 = a1;

  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for UserIntentManager(0LL);
  id v12 = objc_msgSendSuper2(&v14, "init");

  return v12;
}

uint64_t sub_1001B18A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR___CSDUserIntentManager_queue);
  *id v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  __break(1u);
  return result;
}

uint64_t sub_1001B19E0(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)&v60[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDUserIntentManager_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
LABEL_42:
    __break(1u);
    return result;
  }

  uint64_t v10 = sub_1001B1630();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 + 16);
  if (v12)
  {
    uint64_t v13 = (void *)(v10 + 32);
    objc_super v14 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v15 = v14[2];
      if (!v15 || LOBYTE(v14[6 * v15 + 3]) != 1)
      {
        uint64_t v16 = v13[3];
        uint64_t v17 = v13[4];
        sub_1001B204C(v13, v16);
        sub_10023B4B8((uint64_t)a1, v16, v17, (uint64_t)&v62);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        {
          sub_1001B245C();
          objc_super v14 = v22;
        }

        unint64_t v18 = v14[2];
        if (v18 >= v14[3] >> 1)
        {
          sub_1001B245C();
          objc_super v14 = v23;
        }

        v14[2] = v18 + 1;
        uint64_t v19 = &v14[6 * v18];
        __int128 v20 = v62;
        __int128 v21 = *(_OWORD *)v63;
        *(_OWORD *)((char *)v19 + 57) = *(_OWORD *)&v63[9];
        v19[2] = v20;
        v19[3] = v21;
      }

      v13 += 5;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    objc_super v14 = _swiftEmptyArrayStorage;
  }

  uint64_t v24 = v14[2];
  if (v24)
  {
    uint64_t v25 = (uint64_t)(v14 + 4);
    swift_bridgeObjectRetain(v14);
    uint64_t v26 = v24;
    while (1)
    {
      sub_1001B22C0(v25, (uint64_t)&v62);
      int v27 = v63[24];
      sub_1001B2430();
      if (v27 == 1) {
        break;
      }
      v25 += 48LL;
      if (!--v26)
      {
        sub_1001B2428();
        goto LABEL_21;
      }
    }

    sub_1001B2428();
    uint64_t v26 = 1LL;
  }

  else
  {
    uint64_t v26 = 0LL;
  }

void sub_1001B1EA4()
{
}

id sub_1001B1EDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UserIntentManager(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001B1F70()
{
  return type metadata accessor for UserIntentManager(0LL);
}

uint64_t type metadata accessor for UserIntentManager(uint64_t a1)
{
  uint64_t result = qword_100447578;
  if (!qword_100447578) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserIntentManager);
  }
  return result;
}

uint64_t sub_1001B1FB0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_10037B168;
  _OWORD v4[2] = &unk_10037B180;
  void v4[3] = &unk_10037B198;
  v4[4] = &unk_10037B168;
  uint64_t result = type metadata accessor for MediaRemoteStateValidator(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *sub_1001B204C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_1001B2070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1001AFF14(&qword_100447E10);
  *(void *)(v3 + 16) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v7,  &protocol witness table for String);
  uint64_t v8 = v3 + qword_10044B870;
  *(void *)(v3 + qword_10044B870) = a1;
  uint64_t v9 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL))(v8, v9, v10);
  uint64_t v11 = (void *)(v3 + qword_10044B878);
  *uint64_t v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t sub_1001B2124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v8);
  uint64_t v12 = &v22[-v11 - 8];
  uint64_t v13 = sub_1001AFF14(&qword_100447588);
  __chkstk_darwin(v13);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v16 = *(void (**)(uint64_t))(v2 + qword_10044B878);
  uint64_t v17 = swift_bridgeObjectRetain(a2);
  v16(v17);
  + infix(_:_:)(v10, v2 + qword_10044B870);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v18 = sub_1001AFF14(&qword_100447E10);
  uint64_t v19 = &v15[*(int *)(v18 + 44)];
  void *v19 = a1;
  v19[1] = a2;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v15, v12, v6);
  sub_1001A9670((uint64_t)v15, 0LL, 1LL, v18);
  swift_beginAccess(v3 + 16, v22, 33LL, 0LL);
  swift_bridgeObjectRetain(a2);
  sub_1001FC16C((uint64_t)v15);
  return swift_endAccess(v22);
}

uint64_t sub_1001B22C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1001B22FC(void *a1)
{
  return a1;
}

unint64_t sub_1001B2330()
{
  unint64_t result = qword_100447B40;
  if (!qword_100447B40)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100447B40);
  }

  return result;
}

void *sub_1001B236C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_1001B23A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaRemoteStateValidator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B23EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MediaRemoteStateValidator(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001B2428()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_1001B2430()
{
  return sub_1001B22FC((void *)(v0 - 128));
}

uint64_t sub_1001B2438()
{
  return String.init<A>(reflecting:)(v1 - 128, v0);
}

uint64_t sub_1001B2444()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1001B2450()
{
  return sub_1001B22C0(v0, v1 - 128);
}

void sub_1001B245C()
{
}

id sub_1001B2468@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_1004468F0 != -1) {
    a1 = swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v3 = qword_100454018;
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:type:_:)( "Enabling file protection class for conversation persistence storage",  67LL,  2LL,  &_mh_execute_header,  v3,  v4,  _swiftEmptyArrayStorage);
  _CFPreferencesSetFileProtectionClass( kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost,  0LL,  3LL);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUBundleIdentifierTelephonyUtilitiesFramework);
  uint64_t v7 = v6;
  id v8 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v9 = sub_1001B2990(v5, v7);
  id result = (id)sub_1001B29F0();
  a2[3] = result;
  a2[4] = &off_1003DDF58;
  if (!v9)
  {
    id result = [objc_allocWithZone(NSUserDefaults) init];
    id v9 = result;
  }

  *a2 = v9;
  return result;
}

uint64_t sub_1001B258C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Optional(0LL, a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v28 - v10;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v4 valueForKey:v12];

  if (!v13) {
    return sub_1001A9670(a3, 1LL, 1LL, a2);
  }
  _bridgeAnyObjectToAny(_:)(v28, v13);
  swift_unknownObjectRelease(v13);
  sub_1001B03EC(v28, v29);
  sub_1001B2A80();
  if (swift_dynamicCast(v11, v28, (char *)&type metadata for Any + 8, a2, 6LL))
  {
    sub_1001B2A74((uint64_t)v11, 0LL);
    sub_1001B0438(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, v11, a2);
    uint64_t v14 = a3;
    uint64_t v15 = 0LL;
  }

  else
  {
    sub_1001B2A74((uint64_t)v11, 1LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (qword_1004468F0 != -1) {
      swift_once(&qword_1004468F0, sub_100208418);
    }
    uint64_t v17 = qword_100454018;
    uint64_t v18 = static os_log_type_t.error.getter();
    uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_10037B1B0;
    sub_1001B2A80();
    uint64_t v21 = String.init<A>(reflecting:)(v28, (char *)&type metadata for Any + 8);
    uint64_t v23 = v22;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v24 = sub_1001B2330();
    *(void *)(v20 + 64) = v24;
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v23;
    *(void *)&v28[0] = a1;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a2);
    uint64_t v26 = sub_1001F8884((uint64_t)v28, MetatypeMetadata);
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v24;
    *(void *)(v20 + 72) = v26;
    *(void *)(v20 + 80) = v27;
    os_log(_:dso:log:type:_:)("Cannot cast value: %@ to type: %@", 33LL, 2LL, &_mh_execute_header, v17, v18, v20);
    swift_bridgeObjectRelease(v20);
    sub_1001B0438(v29);
    uint64_t v14 = a3;
    uint64_t v15 = 1LL;
  }

  return sub_1001B2A74(v14, v15);
}

id sub_1001B2818()
{
  return [v0 synchronize];
}

void sub_1001B2828(uint64_t a1)
{
}

void sub_1001B2848(uint64_t a1)
{
  uint64_t v2 = v10;
  if (v10)
  {
    uint64_t v3 = sub_1001B204C(v9, v10);
    uint64_t v4 = *(void *)(v2 - 8);
    __chkstk_darwin(v3);
    uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v4 + 16))(v6);
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
    sub_1001B0438(v9);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  NSString v8 = String._bridgeToObjectiveC()();
  [v1 setObject:v7 forKey:v8];
  swift_unknownObjectRelease(v7);
}

uint64_t sub_1001B2950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1001B258C(a1, a2, a3);
}

id sub_1001B2970()
{
  return sub_1001B2818();
}

id sub_1001B2990(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithSuiteName:v4];

  return v5;
}

unint64_t sub_1001B29F0()
{
  unint64_t result = qword_1004475A0;
  if (!qword_1004475A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004475A0);
  }

  return result;
}

uint64_t sub_1001B2A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B2A74(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

uint64_t sub_1001B2A80()
{
  return sub_1001B03FC(v0 - 112, v0 - 144);
}

uint64_t sub_1001B2A8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = sub_1001B4B0C(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1LL << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }

    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v17 = v2;
        uint64_t v8 = v7;
        uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
        objc_allocWithZone((Class)type metadata accessor for GeneratorDescriptor());
        swift_bridgeObjectRetain(v11);
        id v13 = sub_10027B008(v10, v11, v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v14 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        uint64_t result = specialized ContiguousArray._endMutation()(v15);
        uint64_t v16 = -1LL << *(_BYTE *)(a1 + 32);
        if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v7 = v8;
        uint64_t result = _HashTable.occupiedBucket(after:)(v5, v8, ~v16);
        uint64_t v2 = v17 - 1;
        if (v17 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

void *sub_1001B2C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_7:
        uint64_t v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_19;
        }
        id v9 = [v6 originator];
        id v10 = [v9 identifier];

        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        if (*(void *)(a2 + 16) && (unint64_t v14 = sub_1001D7094(v11, v13), (v15 & 1) != 0))
        {
          uint64_t v16 = *(void *)(*(void *)(a2 + 56) + 8 * v14);
          swift_bridgeObjectRelease(v13);
          if (([v7 isActivated] & 1) != 0
            && (id v17 = [v7 originator],
                id v18 = [v17 revision],
                v17,
                v16 < (uint64_t)v18))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v19 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
            uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v7);
            specialized ContiguousArray._endMutation()(v20);
          }

          else
          {
          }
        }

        else
        {

          swift_bridgeObjectRelease(v13);
        }

        ++v5;
        if (v8 == v4) {
          goto LABEL_24;
        }
      }

      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (a1 < 0) {
        uint64_t v21 = a1;
      }
      else {
        uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v4) {
        goto LABEL_24;
      }
    }

    id v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_7;
  }

void sub_1001B2E7C(void *a1)
{
  id v2 = sub_1001B4BE4(a1, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_1001B4C00((uint64_t)v2, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    sub_1001B4C24(v4);
    id v5 = 0LL;

    uint64_t v6 = sub_1001B4CA0();
    sub_1001B3494(v6);
    sub_1001B4C30();
    sub_1001B2A8C((uint64_t)v3);
    sub_1001B4BF4();
  }

  else
  {
    id v7 = 0LL;
    sub_1001B4C3C();

    sub_1001B4C78();
    sub_1001B4C80();
  }

  sub_100021D74();
}

#error "1001B3080: call analysis failed (funcsize=170)"
#error "1001B3304: call analysis failed (funcsize=161)"
Swift::Int sub_1001B3494(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  int64_t v4;
  unint64_t v5;
  Swift::Int result;
  uint64_t v7;
  unint64_t v8;
  int64_t i;
  unint64_t v10;
  char v11;
  char v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void v48[2];
  uint64_t *v49;
  int64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v3 = &_swiftEmptyDictionarySingleton;
  uint64_t v52 = &_swiftEmptyDictionarySingleton;
  sub_10023BD50(v48);
  uint64_t v43 = v48[1];
  uint64_t v44 = v48[0];
  uint64_t v4 = v50;
  id v5 = v51;
  char v41 = v49;
  id v42 = (unint64_t)(v49 + 8) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  id v7 = (v5 - 1) & v5;
  unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v8 = __clz(__rbit64(v10)) + (i << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v44 + 48) + 16 * v8);
    char v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v47 = *(void *)(*(void *)(v44 + 56) + 8 * v8);
    id v17 = v47;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    sub_1001B4248(&v47, (uint64_t)&v45);
    if (v1)
    {
      swift_release(v3);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v16);
      uint64_t v39 = v44;
      goto LABEL_42;
    }

    if ((v46 & 1) != 0)
    {
      swift_bridgeObjectRelease(v17);
      unint64_t v24 = v16;
      goto LABEL_32;
    }

    uint64_t v25 = v45;
    uint64_t v26 = v3[2];
    if (v3[3] <= v26)
    {
      sub_1001FE9F0(v26 + 1, 1LL, v18, v19, v20, v21, v22, v23, v40, v41, v42, v43, v44, SBYTE4(v44));
      uint64_t v3 = v52;
    }

    Hasher.init(_seed:)(&v45, v3[5]);
    String.hash(into:)(&v45, v15, v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = (char *)(v3 + 8);
    unint64_t v28 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~v3[(v29 >> 6) + 8]) == 0) {
      break;
    }
    uint64_t v31 = __clz(__rbit64((-1LL << v29) & ~v3[(v29 >> 6) + 8])) | v29 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_31:
    *(void *)&v27[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v31;
    __int128 v36 = (void *)(v3[6] + 16 * v31);
    *__int128 v36 = v15;
    v36[1] = v16;
    *(void *)(v3[7] + 8 * v31) = v25;
    ++v3[2];
    unint64_t v24 = v17;
LABEL_32:
    uint64_t result = swift_bridgeObjectRelease(v24);
    uint64_t v4 = i;
    id v5 = v7;
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    i = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_44;
    }
    if (i >= v42) {
      goto LABEL_41;
    }
    id v10 = *(void *)(v43 + 8 * i);
    if (!v10)
    {
      sub_1001B4C48();
      if (v11 == v12) {
        goto LABEL_41;
      }
      sub_1001B4C88();
      if (v10) {
        goto LABEL_15;
      }
      sub_1001B4C48();
      if (v11 == v12) {
        goto LABEL_41;
      }
      sub_1001B4C88();
      if (v10) {
        goto LABEL_15;
      }
      sub_1001B4C48();
      if (v11 == v12) {
        goto LABEL_41;
      }
      sub_1001B4C88();
      if (v10)
      {
LABEL_15:
        i = v13;
      }

      else
      {
        i = v4 + 5;
        if (v4 + 5 >= v42) {
          goto LABEL_41;
        }
        id v10 = *(void *)(v43 + 8 * i);
        if (!v10)
        {
          while (1)
          {
            sub_1001B4C48();
            if (v11 == v12) {
              break;
            }
            sub_1001B4C88();
            uint64_t v38 = v37 + 1;
            if (v10)
            {
              i = v38 - 1;
              goto LABEL_16;
            }
          }

Swift::Int sub_1001B37B8(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = &_swiftEmptyDictionarySingleton;
  __int128 v62 = &_swiftEmptyDictionarySingleton;
  sub_10023BD50(v58);
  uint64_t v6 = v58[0];
  uint64_t v5 = v58[1];
  unint64_t v7 = v61;
  uint64_t v52 = v59;
  int64_t v55 = (unint64_t)(v59 + 64) >> 6;
  int64_t v56 = v60;
  Swift::Int result = swift_bridgeObjectRetain(a1);
  uint64_t v53 = v5;
  while (1)
  {
    while (1)
    {
      if (v7)
      {
        unint64_t v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v56 << 6);
      }

      else
      {
        int64_t v11 = v56 + 1;
        if (__OFADD__(v56, 1LL))
        {
          __break(1u);
          goto LABEL_59;
        }

        if (v11 >= v55) {
          goto LABEL_57;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v11);
        int64_t v13 = v56 + 1;
        if (!v12)
        {
          int64_t v13 = v56 + 2;
          if (v56 + 2 >= v55) {
            goto LABEL_57;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v56 + 3;
            if (v56 + 3 >= v55) {
              goto LABEL_57;
            }
            unint64_t v12 = *(void *)(v5 + 8 * v13);
            if (!v12)
            {
              int64_t v13 = v56 + 4;
              if (v56 + 4 >= v55) {
                goto LABEL_57;
              }
              unint64_t v12 = *(void *)(v5 + 8 * v13);
              if (!v12)
              {
                int64_t v13 = v56 + 5;
                if (v56 + 5 >= v55) {
                  goto LABEL_57;
                }
                unint64_t v12 = *(void *)(v5 + 8 * v13);
                if (!v12)
                {
                  int64_t v14 = v56 + 6;
                  while (v14 < v55)
                  {
                    unint64_t v12 = *(void *)(v5 + 8 * v14++);
                    if (v12)
                    {
                      int64_t v13 = v14 - 1;
                      goto LABEL_19;
                    }
                  }

void sub_1001B3BE4(void *a1)
{
  id v2 = sub_1001B4BE4(a1, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_1001B4C00((uint64_t)v2, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    sub_1001B4C24(v4);
    id v5 = 0LL;

    uint64_t v6 = sub_1001B4CA0();
    sub_1001B4448(v6);
    sub_1001B4BF4();
  }

  else
  {
    id v7 = 0LL;
    sub_1001B4C3C();

    sub_1001B4C78();
    sub_1001B4C80();
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
  }

  sub_100021D74();
}

void sub_1001B3CD4(void *a1, void *a2)
{
  id v3 = sub_1001B4BE4(a2, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_1001B4C00((uint64_t)v3, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    uint64_t v6 = sub_1001B4C08(v5);
    id v7 = 0LL;

    uint64_t v8 = swift_bridgeObjectRetain(a1);
    uint64_t v9 = sub_1001B3208(v8);
    sub_1001B37B8(v9);
    sub_1001B4C30();
    sub_1001B2C50(v6, 0LL);
  }

  else
  {
    id v10 = 0LL;
    uint64_t v11 = sub_1001B4C94();

    swift_willThrow(v12);
    swift_errorRelease(v11);
  }

  sub_100021D74();
}

void *sub_1001B3DC8(uint64_t a1, void *a2)
{
  id v3 = _swiftEmptyArrayStorage;
  unint64_t v42 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
    swift_bridgeObjectRetain(v5);
    id v7 = (void *)(v5 + 40);
    do
    {
      uint64_t v8 = *v7;
      swift_bridgeObjectRetain(*v7);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
      id v10 = objc_msgSend(v6, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v9);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v12 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v11 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v12 >= v11 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
      }
      v7 += 2;
      uint64_t v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized Array._endMutation()(v13, v14, v15, v16, v17, v18, v19, v20, v40);
      --v4;
    }

    while (v4);
    a1 = swift_bridgeObjectRelease(v5);
    id v3 = (void *)v42;
  }

  sub_1001B4C00(a1, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v22 = swift_allocObject(v21, 48LL, 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_10037B210;
  *(void *)(v22 + 32) =  objc_msgSend( (id)objc_opt_self(NSPredicate),  "tu_predicateForConversationLinkDescriptorsWithActivated:",  1);
  id v23 = sub_1002A00E8((uint64_t)v3);
  *(void *)(v22 + 40) = v23;
  specialized Array._endMutation()(v23, v24, v25, v26, v27, v28, v29, v30, v40);
  id v31 = sub_10023D8E4(v22);
  id v41 = 0LL;
  id v32 = [a2 conversationLinkDescriptorsWithPredicate:v31 limit:0 offset:0 error:&v41];
  id v33 = v41;
  if (v32)
  {
    uint64_t v34 = v32;
    uint64_t v35 = sub_1001B4C00((uint64_t)v32, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    uint64_t v36 = (void *)sub_1001B4C08(v35);
    id v37 = v33;
  }

  else
  {
    id v38 = v41;
    _convertNSErrorToError(_:)(v33);

    sub_1001B4C78();
    sub_1001B4C80();
    uint64_t v36 = _swiftEmptyArrayStorage;
  }

  return v36;
}

void *sub_1001B4040(void *a1, void *a2)
{
  v14[6] = 0LL;
  id v3 = sub_1001B4BE4(a2, "conversationLinkDescriptorsWithPredicate:limit:offset:error:");
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_1001B4C00((uint64_t)v3, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    sub_1001B4C08(v5);
    id v6 = 0LL;

    uint64_t v7 = sub_1001B4CA0();
    uint64_t v8 = __chkstk_darwin(v7);
    v14[2] = a1;
    sub_1001B4794(v8, sub_1001B4BCC, (uint64_t)v14);
    sub_1001B4BF4();
    Swift::Int v9 = sub_1001B3494((uint64_t)a1);
    swift_release(a1);
    sub_1001B2A8C(v9);
    sub_1001B4BF4();
  }

  else
  {
    id v10 = 0LL;
    uint64_t v11 = sub_1001B4C94();

    swift_willThrow(v12);
    swift_errorRelease(v11);
    return _swiftEmptyArrayStorage;
  }

  return a1;
}

uint64_t sub_1001B4184(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[2];
  if (!v4) {
    return 0LL;
  }
  uint64_t v8 = a4[4];
  uint64_t v9 = a4[5];
  if (v8 == a1 && v9 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v4 == 1) {
    return 0LL;
  }
  uint64_t v12 = a4 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v14 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v15 = *(v12 - 1);
    uint64_t v16 = *v12;
    BOOL v17 = v15 == a1 && v16 == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v12 += 2;
    if (v14 == v4) {
      return result;
    }
  }

  __break(1u);
  return result;
}

void sub_1001B4248(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1001B4C60();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    sub_1001B4C54();
    id v9 = 0LL;
    char v10 = 1;
    goto LABEL_13;
  }

void sub_1001B4448(uint64_t a1)
{
  uint64_t v2 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)v2;
  int64_t v4 = 0LL;
  uint64_t v35 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v32 = v6;
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v34 = v2 + 64;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  uint64_t v12 = (v10 - 1) & v10;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    unint64_t v37 = v12;
    int64_t v38 = v4;
    uint64_t v17 = *(void *)(v35 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v35 + 48) + 16 * i);
    uint64_t v19 = v18[1];
    uint64_t v39 = *v18;
    unint64_t v40 = i;
    uint64_t v20 = *(void *)(v17 + 8 * i);
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0) {
        uint64_t v31 = *(void *)(v17 + 8 * i);
      }
      else {
        uint64_t v31 = v20 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*(void *)(v17 + 8 * i), 3LL);
      swift_bridgeObjectRetain(v19);
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v31);
    }

    else
    {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain_n(*(void *)(v17 + 8 * i), 3LL);
      swift_bridgeObjectRetain(v19);
    }

    if (v21)
    {
      unint64_t v22 = 0LL;
      uint64_t v41 = 0LL;
      while (1)
      {
        if ((v20 & 0xC000000000000001LL) != 0)
        {
          id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
        }

        else
        {
          if ((v22 & 0x8000000000000000LL) != 0) {
            goto LABEL_45;
          }
          if (v22 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_46;
          }
          id v23 = *(id *)(v20 + 8 * v22 + 32);
        }

        uint64_t v24 = v23;
        unint64_t v25 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          break;
        }
        if ([v23 isActivated])
        {
          id v26 = [v24 originator];
          id v36 = [v26 revision];

          if (__OFADD__(v41, v36)) {
            goto LABEL_48;
          }
          v41 += (uint64_t)v36;
          unint64_t v22 = v25;
        }

        else
        {

          ++v22;
        }

        if (v25 == v21) {
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    uint64_t v41 = 0LL;
LABEL_36:
    swift_bridgeObjectRelease_n(v20, 3LL);
    *(void *)(v34 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v40;
    uint64_t v27 = (void *)(v3[6] + 16 * v40);
    void *v27 = v39;
    v27[1] = v19;
    *(void *)(v3[7] + 8 * v40) = v41;
    uint64_t v28 = v3[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_47;
    }
    v3[2] = v30;
    unint64_t v10 = v37;
    int64_t v4 = v38;
    if (v37) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_49;
    }
    if (v14 >= v33) {
      return;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v33) {
        return;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v33) {
          return;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_1001B4794( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_10024772C(0LL, v10, v12);
    sub_1001B4910((uint64_t)v12, v10, v6, a2);
    if (v3) {
      swift_willThrow(v13);
    }
    else {
      return v13;
    }
  }

  else
  {
    int64_t v14 = (void *)swift_slowAlloc(v11, -1LL);
    sub_10024772C(0LL, v10, v14);
    sub_1001B4910((uint64_t)v14, v10, v6, a2);
    a3 = v15;
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return a3;
}

void sub_1001B4910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v23 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v12 >= v25) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v25) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v25) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v6);
        if (!v13) {
          break;
        }
      }
    }

uint64_t sub_1001B4B0C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1001B4B8C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001B4B94(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1001B4BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B4184(a1, a2, a3, *(void **)(v3 + 16));
}

ValueMetadata *type metadata accessor for ConversationLinkDataSourceTUWrapper()
{
  return &type metadata for ConversationLinkDataSourceTUWrapper;
}

id sub_1001B4BE4(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0, 0, 0);
}

uint64_t sub_1001B4BF4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B4C00(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_1001B4B94(0LL, a2, a3);
}

uint64_t sub_1001B4C08(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

unint64_t sub_1001B4C14()
{
  return sub_1001D7094(v1, v0);
}

uint64_t sub_1001B4C24(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_1001B4C30()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B4C3C()
{
  return _convertNSErrorToError(_:)(v0);
}

  ;
}

uint64_t sub_1001B4C54()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1001B4C60()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

id sub_1001B4C6C()
{
  return [v0 *(SEL *)(v1 + 2624)];
}

uint64_t sub_1001B4C78()
{
  return swift_willThrow();
}

uint64_t sub_1001B4C80()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t sub_1001B4C94()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1001B4CA0()
{
  return sub_1001B2F5C();
}

uint64_t sub_1001B4CD8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  int64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  __break(1u);
  return result;
}

uint64_t sub_1001B4E18()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
  sub_1001B5D70( v1,  *(void *)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange + 8));
  return v1;
}

uint64_t sub_1001B4EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

char *sub_1001B4EFC(void *a1)
{
  uint64_t v3 = (objc_class *)sub_1001B5DB8();
  id v4 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  uint64_t v5 = sub_1001B5AF4(v4, a1, objc_allocWithZone(v3));
  uint64_t v6 = sub_1001B5DB8();
  swift_deallocPartialClassInstance(v1, v6, 104LL, 7LL);
  return v5;
}

uint64_t sub_1001B4FA0(uint64_t a1)
{
  uint64_t v2 = TUCTServerConnection();
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = _CTServerConnectionCarrierSettingsCopyValue(v2, v3, a1);

  return v4;
}

uint64_t sub_1001B5008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v19 - v15;
  static DispatchWallTime.now()(v14);
  *uint64_t v8 = a1;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchTimeInterval.seconds(_:), v5);
  + infix(_:_:)(v13, v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  OS_dispatch_queue.asyncAfter(wallDeadline:execute:)(v16, a3);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v9);
}

uint64_t sub_1001B514C()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

void sub_1001B516C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v23, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v14 = (void *)Strong;
    if ([a1 isEmergency] && (id v15 = objc_msgSend(a1, "status"), (_DWORD)v15 == 6))
    {
      uint64_t v16 = static DispatchQoS.default.getter(v15);
      static DispatchWorkItemFlags.barrier.getter(v16);
      uint64_t v17 = swift_allocObject(&unk_1003DE038, 24LL, 7LL);
      *(void *)(v17 + 16) = v14;
      aBlock[4] = sub_1001B5D14;
      uint64_t v22 = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1002356BC;
      aBlock[3] = &unk_1003DE050;
      uint64_t v18 = _Block_copy(aBlock);
      id v19 = v14;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v18);
      _Block_release(v18);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

      swift_release(v22);
    }

    else
    {
    }
  }

uint64_t sub_1001B5348()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchPredicate.onQueueAsBarrier(_:),  v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    uint64_t v16 = sub_1001B56A8();
    id v17 = sub_1001704C4();
    uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + 16) = xmmword_10037B290;
    *(void *)(v19 + 56) = &type metadata for Int;
    *(void *)(v19 + 64) = &protocol witness table for Int;
    *(void *)(v19 + 32) = v16;
    static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:type:_:)( "Starting prevent detach after emergency call timer with timeout of %d seconds. Marking emergency callback possible",  LODWORD(aBlock[0]));

    uint64_t v20 = swift_bridgeObjectRelease(v19);
    v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible] = 1;
    uint64_t v21 = OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem;
    uint64_t v22 = *(void *)&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem];
    if (v22)
    {
      uint64_t v24 = *(void (**)(uint64_t))&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchCancelHandler];
      uint64_t v23 = *(void *)&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchCancelHandler + 8];
      swift_retain(*(void *)&v1[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem]);
      swift_retain(v23);
      v24(v22);
      swift_release(v22);
      uint64_t v20 = swift_release(v23);
    }

    uint64_t v25 = static DispatchQoS.default.getter(v20);
    static DispatchWorkItemFlags.barrier.getter(v25);
    uint64_t v26 = swift_allocObject(&unk_1003DE088, 24LL, 7LL);
    *(void *)(v26 + 16) = v1;
    aBlock[4] = sub_1001B5D34;
    uint64_t v38 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    aBlock[3] = &unk_1003DE0A0;
    uint64_t v27 = _Block_copy(aBlock);
    uint64_t v28 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    BOOL v29 = v1;
    uint64_t v30 = DispatchWorkItem.init(qos:flags:block:)(v7, v4, v27);
    swift_release(v38);
    uint64_t v31 = *(void *)&v1[v21];
    *(void *)&v1[v21] = v30;
    swift_retain(v30);
    swift_release(v31);
    uint64_t v32 = *(void (**)(uint64_t, id, uint64_t))&v29[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchAfterHandler];
    uint64_t v33 = *(void *)&v29[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchAfterHandler + 8];
    swift_retain(v33);
    v32(v16, v13, v30);
    swift_release(v33);
    uint64_t v34 = *(void (**)(uint64_t))&v29[OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange];
    if (v34)
    {
      uint64_t v35 = *(void *)&v29[OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange + 8];
      uint64_t v36 = swift_retain(v35);
      v34(v36);
      swift_release(v30);
      return sub_1001B5D3C((uint64_t)v34, v35);
    }

    else
    {
      return swift_release(v30);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001B56A8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))( v4,  enum case for DispatchPredicate.onQueueAsBarrier(_:),  v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v16 = 0LL;
  uint64_t v7 = *(uint64_t (**)(uint64_t *))(v0
                                           + OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutDeterminationHandler);
  uint64_t v8 = *(void *)(v0
                 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutDeterminationHandler
                 + 8);
  swift_retain(v8);
  uint64_t v9 = v7(&v16);
  swift_release(v8);
  if ((_DWORD)v9)
  {
    id v10 = sub_1001704C4();
    static os_log_type_t.error.getter();
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_10037B1B0;
    *(void *)(v12 + 56) = &type metadata for Int32;
    *(void *)(v12 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v12 + 32) = v9;
    *(void *)(v12 + 96) = &type metadata for Int32;
    *(void *)(v12 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v12 + 72) = HIDWORD(v9);
    os_log(_:dso:log:type:_:)("_CTServerConnectionCarrierSettingsCopyValue - encountered error %d %d", v14, v15);

    swift_bridgeObjectRelease(v12);
  }

  else if (v16)
  {
    uint64_t v15 = v16;
  }

  return 0LL;
}

uint64_t sub_1001B589C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v6 = *(void **)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))( v5,  enum case for DispatchPredicate.onQueueAsBarrier(_:),  v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    id v9 = sub_1001704C4();
    uint64_t v10 = static os_log_type_t.default.getter(v9);
    os_log(_:dso:log:type:_:)( "Prevent detach after emergency call timer fired. Marking emergency callback as no longer possible",  97LL,  2LL,  &_mh_execute_header,  v9,  v10,  _swiftEmptyArrayStorage);

    *(_BYTE *)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible) = 0;
    uint64_t v11 = *(void *)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem);
    *(void *)(a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem) = 0LL;
    uint64_t result = swift_release(v11);
    uint64_t v12 = a1 + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange;
    id v13 = *(void (**)(uint64_t))(a1
                                         + OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange);
    if (v13)
    {
      uint64_t v14 = *(void *)(v12 + 8);
      uint64_t v15 = swift_retain(v14);
      v13(v15);
      return sub_1001B5D3C((uint64_t)v13, v14);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1001B59EC()
{
}

id sub_1001B5A24()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_1001B5DB8();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for EmergencyCallbackCapabilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDEmergencyCallbackCapabilities);
}

char *sub_1001B5AF4(void *a1, void *a2, _BYTE *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a3);
  a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities__emergencyCallbackPossible] = 0;
  id v7 = &a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_emergencyCallbackCapabilitiesDidChange];
  *id v7 = 0LL;
  v7[1] = 0LL;
  *(void *)&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutWorkItem] = 0LL;
  *(void *)&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_queue] = a2;
  *(void *)&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_callCenterObserver] = a1;
  uint64_t v8 = (uint64_t (**)(uint64_t))&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_preventDetachAfterEmergencyCallTimeoutDeterminationHandler];
  *uint64_t v8 = sub_1001B4FA0;
  v8[1] = 0LL;
  id v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchAfterHandler];
  *id v9 = sub_1001B5008;
  v9[1] = 0LL;
  uint64_t v10 = (uint64_t (**)())&a3[OBJC_IVAR___CSDEmergencyCallbackCapabilities_dispatchCancelHandler];
  _BYTE *v10 = sub_1001B514C;
  v10[1] = 0LL;
  v22.receiver = a3;
  v22.super_class = ObjectType;
  id v11 = a2;
  id v12 = a1;
  id v13 = (char *)objc_msgSendSuper2(&v22, "init");
  uint64_t v14 = *(void **)&v13[OBJC_IVAR___CSDEmergencyCallbackCapabilities_callCenterObserver];
  uint64_t v15 = v13;
  [v14 setTriggers:1];
  uint64_t v16 = swift_allocObject(&unk_1003DDFE8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v15);
  v20[4] = sub_1001B5CD8;
  uint64_t v21 = v16;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256LL;
  v20[2] = sub_10025A054;
  v20[3] = &unk_1003DE000;
  id v17 = _Block_copy(v20);
  uint64_t v18 = v21;
  swift_unknownObjectRetain(v14);
  swift_release(v18);
  [v14 setCallChanged:v17];

  _Block_release(v17);
  swift_unknownObjectRelease(v14);
  return v15;
}

uint64_t sub_1001B5CBC()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1001B5CD8(void *a1, uint64_t a2)
{
}

uint64_t sub_1001B5CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B5CF0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001B5CF8()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001B5D14()
{
  return sub_1001B5348();
}

uint64_t sub_1001B5D34()
{
  return sub_1001B589C(*(void *)(v0 + 16));
}

uint64_t sub_1001B5D3C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1001B5D4C()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001B5D68()
{
  return sub_10029A288(*(void *)(v0 + 16));
}

uint64_t sub_1001B5D70(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_1001B5D9C@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1 + 8));
}

uint64_t sub_1001B5DA8()
{
  return v0;
}

uint64_t sub_1001B5DB8()
{
  return swift_getObjectType(v0);
}

uint64_t sub_1001B5DC0()
{
  return v0;
}

uint64_t sub_1001B5DEC()
{
  uint64_t v0 = sub_1001B5DC0();
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for OneShotCancellationBox()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesdP33_7D766AEB715565F6893650EFEF7EA3D422OneShotCancellationBox);
}

uint64_t *initializeBufferWithCopyOfBuffer for OneShotCancellationBox.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for OneShotCancellationBox.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for OneShotCancellationBox.State( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }

  return a1;
}

void *initializeWithTake for OneShotCancellationBox.State(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for OneShotCancellationBox.State( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for OneShotCancellationBox.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_1001B6024(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_1001B603C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for OneShotCancellationBox.State()
{
  return &type metadata for OneShotCancellationBox.State;
}

unint64_t sub_1001B606C(unint64_t result)
{
  if (result >= 2) {
    return swift_release(result);
  }
  return result;
}

void sub_1001B6080(uint64_t a1)
{
  unsigned int v2 = *(void **)(v1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
  *(void *)(v1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion) = a1;
}

uint64_t sub_1001B6094()
{
  id v1 = [objc_allocWithZone((Class)type metadata accessor for CallCenterObserver()) init];
  id v2 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v3 = [v2 routeController];

  unsigned int v4 = (char *)objc_allocWithZone((Class)type metadata accessor for PowerAssertionManager());
  uint64_t v5 = sub_1001B68E0(v1, v3, v4);
  uint64_t ObjectType = swift_getObjectType(v0);
  swift_deallocPartialClassInstance(v0, ObjectType, 80LL, 7LL);
  return v5;
}

uint64_t sub_1001B616C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertionDescription);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertionDescription + 8);
  id v4 = objc_allocWithZone(&OBJC_CLASS___IMPowerAssertion);
  swift_bridgeObjectRetain(v3);
  id v5 = sub_1001B6880(v2, v3);
  sub_1001B6080((uint64_t)v5);
  id v6 = sub_1001704C4();
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  id v9 = *(void **)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
  if (v9)
  {
    uint64_t v18 = *(void *)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
    uint64_t v10 = sub_1001B4B94(0LL, (unint64_t *)&unk_1004477A0, &OBJC_CLASS___IMPowerAssertion_ptr);
    id v11 = v9;
    uint64_t v12 = String.init<A>(reflecting:)(&v18, v10);
    unint64_t v14 = v13;
  }

  else
  {
    unint64_t v14 = 0xE300000000000000LL;
    uint64_t v12 = 7104878LL;
  }

  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v15 = sub_1001B2330();
  *(void *)(v8 + 64) = v15;
  *(void *)(v8 + 32) = v12;
  *(void *)(v8 + 40) = v14;
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("acquired PowerAssertion %@", 26LL, 2LL, &_mh_execute_header, v6, v16, v8);

  return swift_bridgeObjectRelease(v8);
}

void sub_1001B62B8(uint64_t a1)
{
  id v2 = sub_1001704C4();
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  id v5 = *(void **)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
  if (v5)
  {
    uint64_t v13 = *(void *)(a1 + OBJC_IVAR___CSDPowerAssertionManager_powerAssertion);
    uint64_t v6 = sub_1001B4B94(0LL, (unint64_t *)&unk_1004477A0, &OBJC_CLASS___IMPowerAssertion_ptr);
    id v7 = v5;
    uint64_t v8 = String.init<A>(reflecting:)(&v13, v6);
    unint64_t v10 = v9;
  }

  else
  {
    unint64_t v10 = 0xE300000000000000LL;
    uint64_t v8 = 7104878LL;
  }

  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v11 = sub_1001B2330();
  *(void *)(v4 + 64) = v11;
  *(void *)(v4 + 32) = v8;
  *(void *)(v4 + 40) = v10;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("releasing PowerAssertion %@", 27LL, 2LL, &_mh_execute_header, v2, v12, v4);

  swift_bridgeObjectRelease(v4);
  sub_1001B6080(0LL);
}

void sub_1001B63D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v29, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = (char *)Strong;
    id v7 = *(void **)(Strong + OBJC_IVAR___CSDPowerAssertionManager_routeController);
    if (v7)
    {
      id v8 = [v7 pickedRoute];
      if (!v8)
      {
LABEL_15:
        uint64_t v23 = *(void (**)(uint64_t))&v6[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
        if (v23)
        {
          uint64_t v24 = *(void *)&v6[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler + 8];
          uint64_t v25 = swift_retain(v24);
          v23(v25);
          sub_1001B5D3C((uint64_t)v23, v24);
        }

        unint64_t v9 = v6;
        goto LABEL_18;
      }

      unint64_t v9 = v8;
      if (![v8 isHomePodFamily])
      {
LABEL_14:

        goto LABEL_15;
      }

      unint64_t v10 = *(void **)&v6[OBJC_IVAR___CSDPowerAssertionManager_callCenterObserver];
      if (v10)
      {
        uint64_t v11 = (uint64_t)[v10 callContainer];
        aBlock[4] = sub_1001B67A8;
        uint64_t v28 = 0LL;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100268458;
        aBlock[3] = &unk_1003DE248;
        uint64_t v12 = _Block_copy(aBlock);
        swift_release(v28);
        id v13 = [(id)v11 callsPassingTest:v12];
        swift_unknownObjectRelease(v11);
        _Block_release(v12);
        if ((swift_isEscapingClosureAtFileLocation(0LL, "", 100LL, 46LL, 158LL, 1LL) & 1) != 0)
        {
          __break(1u);
        }

        else
        {
          uint64_t v14 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044AB70, &OBJC_CLASS___TUCall_ptr);
          uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

          if (!((unint64_t)v11 >> 62))
          {
            uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            goto LABEL_9;
          }
        }

        if (v11 < 0) {
          uint64_t v26 = v11;
        }
        else {
          uint64_t v26 = v11 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v11);
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v26);
        swift_bridgeObjectRelease(v11);
LABEL_9:
        swift_bridgeObjectRelease(v11);
        if (v15)
        {
          id v16 = sub_1001704C4();
          uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_100447E30);
          uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
          *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
          *(void *)(v18 + 56) = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
          *(void *)(v18 + 64) = sub_1001B6B98();
          *(void *)(v18 + 32) = a1;
          uint64_t v19 = static os_log_type_t.default.getter(a1);
          os_log(_:dso:log:type:_:)( "PowerAssertionManager: Call relayed to HomePod, call=%@",  55LL,  2LL,  &_mh_execute_header,  v16,  v19,  v18);

          swift_bridgeObjectRelease(v18);
          if (!*(void *)&v6[OBJC_IVAR___CSDPowerAssertionManager_powerAssertion])
          {
            uint64_t v20 = *(void (**)(uint64_t))&v6[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
            if (v20)
            {
              uint64_t v21 = *(void *)&v6[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler + 8];
              uint64_t v22 = swift_retain(v21);
              v20(v22);
              sub_1001B5D3C((uint64_t)v20, v21);
            }
          }

LABEL_18:
          return;
        }

        goto LABEL_14;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

uint64_t sub_1001B66D4(void *a1)
{
  id v2 = [a1 provider];
  unsigned __int8 v3 = [v2 isFaceTimeProvider];

  if (((v3 & 1) != 0
     || (id v4 = [a1 provider],
         unsigned int v5 = [v4 isTelephonyProvider],
         v4,
         v5)
     && ([a1 isUsingBaseband] & 1) == 0)
    && (sub_10028F538((uint64_t)[a1 status], (uint64_t)&off_1003DC900) & 1) != 0)
  {
    return [a1 isEndpointOnCurrentDevice] ^ 1;
  }

  else
  {
    return 0LL;
  }

id sub_1001B67AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PowerAssertionManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PowerAssertionManager()
{
  return objc_opt_self(&OBJC_CLASS___CSDPowerAssertionManager);
}

id sub_1001B6880(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithIdentifier:v4];

  return v5;
}

uint64_t sub_1001B68E0(void *a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR___CSDPowerAssertionManager_powerAssertion] = 0LL;
  id v5 = &a3[OBJC_IVAR___CSDPowerAssertionManager_powerAssertionDescription];
  *(void *)id v5 = 0xD000000000000037LL;
  *((void *)v5 + 1) = 0x800000010036B8A0LL;
  uint64_t v6 = &a3[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
  *(void *)uint64_t v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  id v7 = &a3[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
  *(void *)id v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  *(void *)&a3[OBJC_IVAR___CSDPowerAssertionManager_callCenterObserver] = a1;
  *(void *)&a3[OBJC_IVAR___CSDPowerAssertionManager_routeController] = a2;
  v28.receiver = a3;
  v28.super_class = (Class)type metadata accessor for PowerAssertionManager();
  id v8 = a1;
  id v9 = a2;
  unint64_t v10 = (char *)objc_msgSendSuper2(&v28, "init");
  uint64_t v11 = swift_allocObject(&unk_1003DE1B8, 24LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  uint64_t v12 = (uint64_t (**)())&v10[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
  uint64_t v13 = *(void *)&v10[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler];
  uint64_t v14 = *(void *)&v10[OBJC_IVAR___CSDPowerAssertionManager_acquirePowerAssertionHandler + 8];
  *uint64_t v12 = sub_1001B6B44;
  v12[1] = (uint64_t (*)())v11;
  uint64_t v15 = v10;
  sub_1001B5D3C(v13, v14);
  uint64_t v16 = swift_allocObject(&unk_1003DE1E0, 24LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  uint64_t v17 = (void (**)())&v15[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
  uint64_t v18 = *(void *)&v15[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler];
  uint64_t v19 = *(void *)&v15[OBJC_IVAR___CSDPowerAssertionManager_releasePowerAssertionHandler + 8];
  void *v17 = sub_1001B6B4C;
  v17[1] = (void (*)())v16;
  uint64_t v20 = v15;
  uint64_t result = sub_1001B5D3C(v18, v19);
  uint64_t v22 = *(void **)&v20[OBJC_IVAR___CSDPowerAssertionManager_callCenterObserver];
  if (v22)
  {
    [v22 setTriggers:33];
    uint64_t v23 = swift_allocObject(&unk_1003DE208, 24LL, 7LL);
    swift_unknownObjectWeakInit(v23 + 16, v20);
    v26[4] = sub_1001B6B78;
    uint64_t v27 = v23;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1107296256LL;
    v26[2] = sub_10025A054;
    v26[3] = &unk_1003DE220;
    uint64_t v24 = _Block_copy(v26);
    uint64_t v25 = v27;
    swift_unknownObjectRetain(v22);
    swift_release(v25);
    [v22 setCallChanged:v24];

    _Block_release(v24);
    swift_unknownObjectRelease(v22);
    return (uint64_t)v20;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001B6B20()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001B6B44()
{
  return sub_1001B616C(*(void *)(v0 + 16));
}

void sub_1001B6B4C()
{
}

uint64_t sub_1001B6B54()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001B6B78(void *a1, uint64_t a2)
{
}

uint64_t sub_1001B6B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B6B90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1001B6B98()
{
  unint64_t result = qword_100447798;
  if (!qword_100447798)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100447798);
  }

  return result;
}

void sub_1001B6BF4()
{
}

void sub_1001B6C18(uint64_t a1)
{
}

void sub_1001B6C3C(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1001B6C60(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_1001B9298(a1);
  Hasher._combine(_:)(v1);
  sub_1001B926C();
  sub_1001B9210();
}

uint64_t sub_1001B6C90()
{
  return 1LL;
}

void sub_1001B6CA0(uint64_t a1)
{
}

BOOL sub_1001B6CC8(char *a1, char *a2)
{
  return sub_1001AC67C(*a1, *a2);
}

void sub_1001B6CD4()
{
}

void sub_1001B6CEC(uint64_t a1)
{
}

void sub_1001B6CF8(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_1001B926C();
  sub_1001B9210();
}

void *sub_1001B6D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v3[5] = &_swiftEmptyDictionarySingleton;
  return v3;
}

void sub_1001B6D44(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v132 = a4;
  uint64_t v133 = a5;
  unsigned int v130 = a3;
  LODWORD(v134) = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B0F00();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1001B0F00();
  uint64_t v16 = v15 - v14;
  uint64_t v131 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  sub_1001B0F00();
  v128 = (void *)(v18 - v17);
  uint64_t v19 = type metadata accessor for DispatchTime(0LL);
  uint64_t v127 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  v126 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v110 - v22;
  uint64_t v24 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  __chkstk_darwin(v24);
  sub_1001B0F00();
  uint64_t v29 = v28 - v27;
  if (!*(void *)(a1 + 16)) {
    return;
  }
  uint64_t v113 = v29;
  uint64_t v114 = v26;
  uint64_t v115 = v25;
  uint64_t v118 = v16;
  uint64_t v119 = v13;
  uint64_t v120 = v12;
  uint64_t v121 = v11;
  uint64_t v122 = v8;
  uint64_t v123 = v7;
  uint64_t v30 = v5 + 40;
  sub_1001B0E80(v5 + 40, (uint64_t)v142, 0LL);
  uint64_t v117 = v5;
  double v31 = COERCE_DOUBLE(sub_1001C9F1C(*(void *)(v5 + 40)));
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = sub_1001B0D98(v36, (uint64_t)qword_1004541B0);
  sub_1001B922C();
  sub_1001B9200();
  sub_1001B922C();
  uint64_t v38 = sub_1001B9200();
  uint64_t v116 = v37;
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v38, v39, v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v124 = v30;
  v125 = (uint64_t (*)(uint64_t))v35;
  if (v43)
  {
    v111 = v23;
    uint64_t v112 = v19;
    uint64_t v44 = sub_1001B0E78(42LL);
    uint64_t v45 = sub_1001B0E78(128LL);
    uint64_t v110 = v45;
    uint64_t v135 = v45;
    *(_DWORD *)uint64_t v44 = 136315906;
    uint64_t v46 = String.init<A>(reflecting:)(v45, &unk_1003DE378);
    double aBlock = COERCE_DOUBLE(sub_1001B928C(v46, v47));
    sub_1001B923C(*(uint64_t *)&aBlock, v48, v49, v44 + 12);
    sub_1001B92A4();
    *(_WORD *)(v44 + 12) = 2080;
    uint64_t v50 = sub_1001B922C();
    uint64_t v51 = Set.description.getter(v50, &type metadata for String, &protocol witness table for String);
    unint64_t v53 = v52;
    sub_1001B0F28();
    double aBlock = COERCE_DOUBLE(sub_1001D7CF0(v51, v53, &v135));
    sub_1001B923C(*(uint64_t *)&aBlock, v54, v55, v44 + 22);
    sub_1001B9280();
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v44 + 22) = 2080;
    LOBYTE(aBlock) = (_BYTE)v134;
    uint64_t v56 = String.init<A>(reflecting:)(&aBlock, &unk_1003DE510);
    double aBlock = COERCE_DOUBLE(sub_1001B928C(v56, v57));
    sub_1001B924C(*(uint64_t *)&aBlock, v58, v59, v44 + 32);
    sub_1001B92A4();
    *(_WORD *)(v44 + 32) = 2080;
    if (v31 == 0.0)
    {
      unint64_t v63 = 0xE300000000000000LL;
      uint64_t v61 = 7104878LL;
      uint64_t v60 = (uint64_t)v125;
    }

    else
    {
      double aBlock = v31;
      uint64_t v137 = v33;
      uint64_t v60 = (uint64_t)v125;
      v138 = v125;
      swift_unknownObjectRetain(*(void *)&v31);
      sub_1001B9234();
      uint64_t v61 = String.init<A>(reflecting:)(&aBlock, &unk_1003DE2D8);
      unint64_t v63 = v62;
    }

    double aBlock = COERCE_DOUBLE(sub_1001D7CF0(v61, v63, &v135));
    sub_1001B924C(*(uint64_t *)&aBlock, v64, v65, v44 + 42);
    sub_1001B92A4();
    sub_1001B925C();
    sub_1001B925C();
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "ConversationLinkSync: enqueue action {messageType: %s, destinations: %s, mode: %s, hasExisting: %s}",  (uint8_t *)v44,  0x2Au);
    uint64_t v66 = v110;
    swift_arrayDestroy(v110, 4LL);
    sub_1001B0E60(v66);
    sub_1001B0E60(v44);

    uint64_t v35 = v60;
    uint64_t v19 = v112;
    uint64_t v23 = v111;
  }

  else
  {
    sub_1001B9280();
    sub_1001B921C();
    sub_1001B921C();
  }

  if ((_BYTE)v134)
  {
    if (v134 == 1)
    {
      if (v31 == 0.0)
      {
        uint64_t v112 = v33;
        sub_1001B922C();
        sub_1001E7ACC();
        v134 = v79;
        sub_1001B0F28();
        goto LABEL_20;
      }

      uint64_t v135 = a1;
      sub_1001B922C();
      sub_1001B9200();
      uint64_t v67 = sub_1001B9234();
      uint64_t v68 = sub_10024E6B8(v67);
      sub_1002670E8(v68);
      swift_bridgeObjectRelease(v68);
      double aBlock = COERCE_DOUBLE(sub_1001B7670(v35, v33));
      uint64_t v137 = v69;
      v138 = v70;
      v139 = v71;
      uint64_t v72 = v135;
      sub_1001B9234();
      sub_1001B76A4(v72);
      double v74 = aBlock;
      uint64_t v73 = v137;
      uint64_t v75 = (uint64_t)v138;
      unint64_t v76 = (unint64_t)v139;
      uint64_t v77 = swift_unknownObjectRetain(*(void *)&aBlock);
      v134 = sub_1001B7808(v77, v73, v75, v76);
      swift_unknownObjectRelease(*(void *)&v74);
      sub_1001B0F5C();
      swift_unknownObjectRelease(*(void *)&v31);
      goto LABEL_17;
    }

    if (v31 != 0.0)
    {
      sub_1001B921C();
      return;
    }
  }

  sub_1001B922C();
  sub_1001E7ACC();
  v134 = v78;
  sub_1001B0F28();
  if (v31 == 0.0)
  {
    uint64_t v112 = v33;
    goto LABEL_20;
  }

uint64_t sub_1001B7670(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }

  else if ((result & 0x8000000000000000LL) == 0)
  {
    return a2;
  }

  __break(1u);
  return result;
}

void sub_1001B76A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  sub_1001B80FC(v3);
  uint64_t v5 = v1[2];
  unint64_t v4 = v1[3];
  uint64_t v6 = (v4 >> 1) - v5;
  if (__OFSUB__(v4 >> 1, v5))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v7 = v1[1] + 16 * v5 + 16 * v6;
  if ((v4 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v8 = *v1;
  uint64_t v9 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v10 = swift_unknownObjectRetain(v8);
  uint64_t v11 = (void *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v8);
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  uint64_t v12 = v11[2];
  if ((void *)v7 != &v11[2 * v12 + 4])
  {
    swift_release(v11);
LABEL_7:
    uint64_t v13 = v6;
    goto LABEL_9;
  }

  unint64_t v14 = v11[3];
  swift_release(v11);
  uint64_t v15 = (v14 >> 1) - v12;
  BOOL v16 = __OFADD__(v6, v15);
  uint64_t v13 = v6 + v15;
  if (v16)
  {
LABEL_21:
    __break(1u);
    return;
  }

void *sub_1001B7808(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(a1);
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  uint64_t v14 = swift_release(v12);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v14 = a1;
  if (v13 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v14);
LABEL_2:
    sub_1001E7B38(a1, a2, a3, a4);
    uint64_t v9 = v8;
    goto LABEL_9;
  }

  uint64_t v9 = (void *)swift_dynamicCastClass(a1, v10);
  if (!v9)
  {
    swift_unknownObjectRelease(a1);
    uint64_t v9 = _swiftEmptyArrayStorage;
  }

uint64_t sub_1001B78EC@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t sub_1001B7934(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  swift_beginAccess(result + 40, v21, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 40);
  swift_bridgeObjectRetain(v6);
  swift_release(v5);
  uint64_t v7 = sub_1001C9F1C(v6);
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t result = swift_bridgeObjectRelease(v6);
  if (!v7) {
    return result;
  }
  if ((v11 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (v11 >= *(void *)(v9 + 16))
  {
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v12 = v9 + 16 * v11;
  uint64_t v13 = *(void *)(v12 + 32);
  uint64_t v14 = *(void *)(v12 + 40);
  swift_bridgeObjectRetain(v14);
  a2(v13, v14);
  swift_bridgeObjectRelease(v14);
  if (v11 + 1 == *(void *)(v9 + 16))
  {
    swift_beginAccess(v3, v20, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v3);
    if (Strong)
    {
      uint64_t v16 = Strong;
      sub_1001B7B9C();
      swift_release(v16);
    }
  }

  else
  {
    swift_beginAccess(v3, v20, 0LL, 0LL);
    uint64_t v17 = swift_weakLoadStrong(v3);
    if (v17)
    {
      uint64_t v18 = v17;
      swift_beginAccess(v17 + 40, v19, 33LL, 0LL);
      swift_unknownObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      sub_1001FE358(v7, v9, v11 + 1);
      swift_endAccess(v19);
      swift_bridgeObjectRelease(v9);
      swift_unknownObjectRelease(v7);
      return swift_release(v18);
    }
  }

  swift_bridgeObjectRelease(v9);
  return swift_unknownObjectRelease(v7);
}

uint64_t sub_1001B7AF0()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = _swiftEmptyArrayStorage;
  sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = v1;
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

uint64_t sub_1001B7B9C()
{
  uint64_t v1 = v0 + 40;
  uint64_t result = sub_1001B0E80(v0 + 40, (uint64_t)v10, 0LL);
  uint64_t v3 = *(void *)(v0 + 40);
  if (*(void *)(v3 + 16))
  {
    uint64_t result = sub_1001D714C(result);
    if ((v4 & 1) != 0)
    {
      uint64_t v5 = *(void *)(*(void *)(v3 + 56) + 24 * result);
      swift_getObjectType(v5);
      swift_unknownObjectRetain(v5);
      sub_1001B9234();
      OS_dispatch_source.cancel()();
      sub_1001B0E80(v1, (uint64_t)v9, 33LL);
      uint64_t v6 = sub_1001FD2DC();
      uint64_t v8 = v7;
      swift_endAccess(v9);
      sub_1001B7FF4(v6, v8);
      sub_1001B0F5C();
      return swift_unknownObjectRelease(v5);
    }
  }

  return result;
}

uint64_t sub_1001B7C70()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_1001B7C9C()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for ConversationLinkSyncMessageQueue()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd32ConversationLinkSyncMessageQueue);
}

uint64_t sub_1001B7CE0(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

void sub_1001B7D08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_1001AA978();
}

uint64_t *sub_1001B7D40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

void *sub_1001B7DA4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RouteController.PendingRouteContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RouteController.PendingRouteContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ConversationLinkSyncMessageQueue.Action()
{
}

uint64_t getEnumTagSinglePayload for ConversationLinkSyncIDSInteractor.IDSInteractorError( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_1001B7EC8(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001B7F08 + 4 * asc_10037B320[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001B7F28 + 4 * byte_10037B325[v4]))();
  }
}

_BYTE *sub_1001B7F08(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1001B7F28(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001B7F30(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001B7F38(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001B7F40(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001B7F48(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for ConversationLinkSyncMessageQueue.MessageType()
{
}

void type metadata accessor for ConversationLinkSyncMessageQueue.ScheduleMode()
{
}

unint64_t sub_1001B7F78()
{
  unint64_t result = qword_100447890;
  if (!qword_100447890)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037B3E0, &unk_1003DE408);
    atomic_store(result, (unint64_t *)&qword_100447890);
  }

  return result;
}

unint64_t sub_1001B7FB8()
{
  unint64_t result = qword_100447898;
  if (!qword_100447898)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037B448, &unk_1003DE378);
    atomic_store(result, (unint64_t *)&qword_100447898);
  }

  return result;
}

uint64_t sub_1001B7FF4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_unknownObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

uint64_t sub_1001B8020(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

unint64_t sub_1001B804C()
{
  unint64_t result = qword_1004478A0;
  if (!qword_1004478A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_source);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004478A0);
  }

  return result;
}

uint64_t sub_1001B8088()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001B80AC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001B80D8()
{
  return sub_1001B7934(*(void *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_1001B80E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B80F4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001B80FC(uint64_t result)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  uint64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = result;
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v8 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v9 = swift_unknownObjectRetain(v6);
  unint64_t v10 = (void *)swift_dynamicCastClass(v9, v8);
  if (!v10)
  {
    swift_unknownObjectRelease(v6);
    unint64_t v10 = _swiftEmptyArrayStorage;
  }

  uint64_t v11 = v10[2];
  if ((void *)(v7 + 16 * v3 + 16 * v4) != &v10[2 * v11 + 4])
  {
    swift_release(v10);
LABEL_7:
    uint64_t v12 = v4;
    goto LABEL_9;
  }

  unint64_t v13 = v10[3];
  unint64_t result = swift_release(v10);
  uint64_t v14 = (v13 >> 1) - v11;
  BOOL v15 = __OFADD__(v4, v14);
  uint64_t v12 = v4 + v14;
  if (!v15)
  {
LABEL_9:
    unint64_t result = v4 + v5;
    if (!__OFADD__(v4, v5))
    {
      if (v12 >= result) {
        return sub_1001B86CC(result);
      }
      if (v12 + 0x4000000000000000LL >= 0)
      {
        uint64_t v16 = 2 * v12;
        if (v16 > result) {
          unint64_t result = v16;
        }
        return sub_1001B86CC(result);
      }

      goto LABEL_17;
    }

void *sub_1001B81F0(void *result)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!v7) {
    return result;
  }
  uint64_t v8 = *v1;
  uint64_t v9 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v10 = swift_unknownObjectRetain(v8);
  unint64_t result = (void *)swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v8);
    unint64_t result = &_swiftEmptyArrayStorage;
  }

  uint64_t v11 = result[2];
  BOOL v5 = __OFADD__(v11, v7);
  uint64_t v12 = &v7[v11];
  if (v5) {
    goto LABEL_13;
  }
  result[2] = v12;
  unint64_t result = (void *)swift_release(result);
  unint64_t v13 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (((unint64_t)v13 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  v1[3] = v3 & 1 | (2LL * (void)v13);
  return result;
}

void *sub_1001B82A4(void *result)
{
  unint64_t v2 = v1[3];
  uint64_t v48 = v1[2];
  uint64_t v3 = (v2 >> 1) - v48;
  if (__OFSUB__(v2 >> 1, v48)) {
    goto LABEL_65;
  }
  __int128 v4 = *((_OWORD *)result + 1);
  __int128 v51 = *(_OWORD *)result;
  __int128 v52 = v4;
  unint64_t v53 = result[4];
  unint64_t result = (void *)sub_1001B8CCC();
  uint64_t v6 = v51;
  int64_t v7 = *((void *)&v52 + 1);
  unint64_t v8 = v53;
  if (!v5) {
    return (void *)sub_1001B4B8C(v6);
  }
  uint64_t v9 = result;
  uint64_t v10 = v5;
  int64_t v49 = (unint64_t)(v52 + 64) >> 6;
  unint64_t v11 = v2;
  uint64_t v42 = *((void *)&v51 + 1);
  uint64_t v44 = v1;
LABEL_4:
  if (!__OFADD__(v3, 1LL))
  {
    uint64_t v12 = sub_1001B888C((void *)v3, v3 + 1, *v1, v1[1], v48, v11);
    uint64_t v50 = v12;
    unint64_t v13 = sub_1001B8A88();
    uint64_t v15 = v14;
    sub_1001B8A98((uint64_t)&v50, v3, 0LL, (void (*)(uint64_t, uint64_t))v13);
    swift_release(v15);
    unint64_t result = (void *)swift_release(v12);
    unint64_t v16 = v1[3];
    uint64_t v48 = v1[2];
    if (__OFSUB__(v16 >> 1, v48)) {
      goto LABEL_59;
    }
    unint64_t v46 = v1[3];
    uint64_t v47 = (v16 >> 1) - v48;
    unint64_t v43 = v16 >> 1;
    uint64_t v17 = *v1;
    uint64_t v45 = v1[1];
    if ((v16 & 1) != 0)
    {
      uint64_t v18 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
      uint64_t v19 = swift_unknownObjectRetain(v17);
      uint64_t v20 = v17;
      uint64_t v21 = (void *)swift_dynamicCastClass(v19, v18);
      if (!v21)
      {
        swift_unknownObjectRelease(v17);
        uint64_t v21 = _swiftEmptyArrayStorage;
      }

      uint64_t v22 = v21[2];
      if ((void *)(v45 + 16 * v48 + 16 * v47) == &v21[2 * v22 + 4])
      {
        unint64_t v24 = v21[3];
        unint64_t result = (void *)swift_release(v21);
        uint64_t v25 = (v24 >> 1) - v22;
        uint64_t v23 = v47 + v25;
        if (__OFADD__(v47, v25)) {
          goto LABEL_64;
        }
      }

      else
      {
        unint64_t result = (void *)swift_release(v21);
        uint64_t v23 = v47;
      }

      uint64_t v17 = v20;
    }

    else
    {
      uint64_t v23 = (v16 >> 1) - v48;
    }

    if (v3 >= v23) {
      goto LABEL_45;
    }
    while (1)
    {
      uint64_t v26 = (void *)(v45 + 16 * v48 + 16 * v3);
      void *v26 = v9;
      v26[1] = v10;
      ++v3;
      if (v8)
      {
        unint64_t v27 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v28 = v27 | (v7 << 6);
        goto LABEL_26;
      }

      int64_t v29 = v7 + 1;
      if (__OFADD__(v7, 1LL))
      {
        __break(1u);
        break;
      }

      if (v29 >= v49)
      {
        uint64_t v9 = 0LL;
        uint64_t v10 = 0LL;
        unint64_t v8 = 0LL;
        goto LABEL_45;
      }

      unint64_t v30 = *(void *)(v42 + 8 * v29);
      if (!v30)
      {
        int64_t v31 = v7 + 2;
        if (v7 + 2 >= v49)
        {
          uint64_t v9 = 0LL;
          uint64_t v10 = 0LL;
          unint64_t v8 = 0LL;
          ++v7;
          goto LABEL_45;
        }

        unint64_t v30 = *(void *)(v42 + 8 * v31);
        if (!v30)
        {
          int64_t v32 = v7 + 3;
          if (v7 + 3 >= v49) {
            goto LABEL_42;
          }
          unint64_t v30 = *(void *)(v42 + 8 * v32);
          if (v30) {
            goto LABEL_24;
          }
          int64_t v31 = v7 + 4;
          if (v7 + 4 >= v49) {
            goto LABEL_43;
          }
          unint64_t v30 = *(void *)(v42 + 8 * v31);
          if (!v30)
          {
            int64_t v32 = v7 + 5;
            if (v7 + 5 >= v49)
            {
LABEL_42:
              uint64_t v9 = 0LL;
              uint64_t v10 = 0LL;
              unint64_t v8 = 0LL;
              int64_t v7 = v31;
              goto LABEL_45;
            }

            unint64_t v30 = *(void *)(v42 + 8 * v32);
            if (!v30)
            {
              int64_t v29 = v7 + 6;
              if (v7 + 6 >= v49)
              {
LABEL_43:
                uint64_t v9 = 0LL;
                uint64_t v10 = 0LL;
                unint64_t v8 = 0LL;
                int64_t v7 = v32;
                goto LABEL_45;
              }

              unint64_t v30 = *(void *)(v42 + 8 * v29);
              if (!v30)
              {
                int64_t v34 = v7 + 7;
                while (v34 < v49)
                {
                  unint64_t v30 = *(void *)(v42 + 8 * v34++);
                  if (v30)
                  {
                    int64_t v29 = v34 - 1;
                    goto LABEL_25;
                  }
                }

                uint64_t v9 = 0LL;
                uint64_t v10 = 0LL;
                unint64_t v8 = 0LL;
                int64_t v7 = v49 - 1;
LABEL_45:
                unint64_t v11 = v46;
                uint64_t v1 = v44;
                uint64_t v35 = v3 - v47;
                if (__OFSUB__(v3, v47)) {
                  goto LABEL_60;
                }
                if (!v35) {
                  goto LABEL_53;
                }
                uint64_t v36 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
                uint64_t v37 = swift_unknownObjectRetain(v17);
                unint64_t result = (void *)swift_dynamicCastClass(v37, v36);
                if (!result)
                {
                  swift_unknownObjectRelease(v17);
                  unint64_t result = _swiftEmptyArrayStorage;
                }

                uint64_t v38 = result[2];
                BOOL v39 = __OFADD__(v38, v35);
                uint64_t v40 = v38 + v35;
                if (v39) {
                  goto LABEL_61;
                }
                result[2] = v40;
                unint64_t result = (void *)swift_release(result);
                unint64_t v41 = v43 + v35;
                if (__OFADD__(v43, v35)) {
                  goto LABEL_62;
                }
                if ((v41 & 0x8000000000000000LL) != 0) {
                  goto LABEL_63;
                }
                unint64_t v11 = v46 & 1 | (2 * v41);
                uint64_t v1 = v44;
                v44[3] = v11;
LABEL_53:
                if (!v10) {
                  return (void *)sub_1001B4B8C(v6);
                }
                goto LABEL_4;
              }

              goto LABEL_25;
            }

uint64_t sub_1001B86CC(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = v1[3];
  __int128 v4 = (void *)*v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(*v1), void *v1 = v4, (result & 1) == 0))
  {
    unint64_t v13 = v4;
    goto LABEL_9;
  }

  uint64_t v6 = v1[2];
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v8 = v1[1];
  uint64_t v9 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v10 = swift_unknownObjectRetain(v4);
  unint64_t v11 = (void *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v4);
    unint64_t v11 = _swiftEmptyArrayStorage;
  }

  uint64_t v12 = v11[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v11[2 * v12 + 4])
  {
    unint64_t result = swift_release(v11);
LABEL_24:
    if (v7 >= v2) {
      goto LABEL_22;
    }
    unint64_t v13 = (void *)*v1;
LABEL_9:
    uint64_t v14 = v1[2];
    uint64_t v15 = v5 - v14;
    if (__OFSUB__(v5, v14))
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = v1[1];
      if (v15 <= v2) {
        uint64_t v17 = v2;
      }
      else {
        uint64_t v17 = v5 - v14;
      }
      if (v17)
      {
        uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
        __int128 v4 = (void *)swift_allocObject(v18, 16 * v17 + 32, 7LL);
        unint64_t result = j__malloc_size(v4);
        _OWORD v4[2] = v15;
        void v4[3] = 2 * ((result - 32) / 16);
      }

      else
      {
        __int128 v4 = _swiftEmptyArrayStorage;
      }

      if (v5 >= v14)
      {
        unint64_t result = sub_10024F680(v16 + 16 * v14, v5 - v14, (unint64_t)(v4 + 4));
        if (!__OFSUB__(0LL, v14))
        {
          uint64_t v19 = v4[2];
          uint64_t v20 = v14 + v19;
          if (!__OFADD__(v14, v19))
          {
            if (v20 >= v14)
            {
              unint64_t result = swift_unknownObjectRelease(v13);
              if ((v20 & 0x8000000000000000LL) == 0)
              {
                v1[1] = &v4[-2 * v14 + 4];
                v1[2] = v14;
                v1[3] = (2 * v20) | 1;
LABEL_22:
                void *v1 = v4;
                return result;
              }

              goto LABEL_31;
            }

void *sub_1001B888C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000LL >= 0)
    {
      v8 *= 2LL;
      goto LABEL_21;
    }

    __break(1u);
    goto LABEL_35;
  }

  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v12 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v13 = swift_unknownObjectRetain(a3);
  uint64_t v14 = (void *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  uint64_t v15 = v14[2];
  uint64_t v16 = a4 + 16 * a5 + 16 * v8;
  if ((void *)v16 == &v14[2 * v15 + 4])
  {
    unint64_t v18 = v14[3];
    unint64_t result = (void *)swift_release(v14);
    uint64_t v19 = (v18 >> 1) - v15;
    uint64_t v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }

  else
  {
    swift_release(v14);
    uint64_t v17 = v8;
  }

  uint64_t v20 = swift_unknownObjectRetain(a3);
  unint64_t v21 = (void *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      unint64_t v21 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = v21[2];
    if ((void *)v16 == &v21[2 * v22 + 4])
    {
      unint64_t v24 = v21[3];
      unint64_t result = (void *)swift_release(v21);
      uint64_t v25 = (v24 >> 1) - v22;
      BOOL v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }

    else
    {
      unint64_t result = (void *)swift_release(v21);
    }

    goto LABEL_18;
  }

  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    unint64_t v21 = _swiftEmptyArrayStorage;
  }

  uint64_t v23 = v21[2];
  if ((void *)v16 == &v21[2 * v23 + 4])
  {
    unint64_t v27 = v21[3];
    unint64_t result = (void *)swift_release(v21);
    uint64_t v28 = (v27 >> 1) - v23;
    BOOL v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
    return result;
  }

  swift_release(v21);
LABEL_21:
  if (v8 <= v7) {
    uint64_t v29 = v7;
  }
  else {
    uint64_t v29 = v8;
  }
  else {
    uint64_t v30 = v29;
  }
  if (!v30) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v31 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  int64_t v32 = (void *)swift_allocObject(v31, 16 * v30 + 32, 7LL);
  size_t v33 = j__malloc_size(v32);
  v32[2] = v6;
  v32[3] = 2 * ((uint64_t)(v33 - 32) / 16);
  return v32;
}

Swift::Void (__swiftcall *sub_1001B8A88())()
{
  return ScreenSharingActivityManager.carPlayStartedConnectionAttempt();
}

uint64_t sub_1001B8A98(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4[2];
  unint64_t v6 = (unint64_t)v4[3] >> 1;
  unint64_t v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)result;
  uint64_t v10 = *(void *)(*(void *)result + 16LL);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v13 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v14 = (char *)(v7 - a2);
  if (__OFSUB__(v7, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  BOOL v11 = __OFSUB__(v14, v13);
  uint64_t v15 = &v14[-v13];
  if (v11)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v16 = v4;
  uint64_t v38 = v15;
  unint64_t v18 = (char *)(v9 + 32);
  uint64_t v19 = v9 + 32 + 16 * a2;
  uint64_t v40 = (char *)(v19 + 16 * a3);
  unint64_t result = sub_1001B8E94((void *)v7);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v37 = v4[2];
    uint64_t v35 = a4;
    uint64_t v36 = v13;
    unint64_t v21 = (char *)(v4[1] + 16 * v37);
    uint64_t v22 = result + 32;
    swift_arrayDestroy(result + 32, (uint64_t)&v21[-result - 32] / 16);
    sub_10024F1F0(v21, a2, v18);
    swift_arrayDestroy(&v21[16 * a2], v38);
    v35(v19, a3);
    sub_10024F1F0(&v21[16 * a2 + 16 * (void)v38], v36, v40);
    uint64_t v23 = v22 + 16LL * *(void *)(v20 + 16);
    uint64_t v24 = v37;
    swift_arrayDestroy(&v21[16 * v7], (v23 - (uint64_t)&v21[16 * v7]) / 16);
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = 0LL;
    swift_release(v20);
LABEL_15:
    uint64_t v31 = *v16;
    swift_retain(v9);
    swift_unknownObjectRelease(v31);
    unint64_t result = sub_1001B8E4C(v9, v24);
    *uint64_t v16 = result;
    v16[1] = v32;
    v16[2] = v33;
    v16[3] = v34;
    return result;
  }

  uint64_t v24 = v4[2];
  uint64_t v25 = v24 + a2;
  if (__OFADD__(v24, a2)) {
    goto LABEL_21;
  }
  uint64_t v26 = a2;
  if (v25 < v24)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (__OFSUB__(v25, v24))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unint64_t v27 = (uint64_t (*)(char *, uint64_t))a4;
  uint64_t v28 = v16[1];
  swift_arrayInitWithCopy(v9 + 32, v28 + 16 * v24);
  unint64_t result = v27(&v18[16 * v26], a3);
  int64_t v29 = (int64_t)&v38[v25];
  if (__OFADD__(v25, v38))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v30 = (unint64_t)v16[3] >> 1;
  if (v30 < v29)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (!__OFSUB__(v30, v29))
  {
    swift_arrayInitWithCopy(v40, v28 + 16 * v29);
    goto LABEL_15;
  }

uint64_t sub_1001B8CCC()
{
  int64_t v2 = v0[3];
  unint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v3 = (v1 - 1) & v1;
    unint64_t v4 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    uint64_t v5 = (uint64_t *)(*(void *)(*v0 + 48LL) + 16 * v4);
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
LABEL_4:
    v0[3] = v2;
    v0[4] = v3;
    return v6;
  }

  int64_t v8 = v2 + 1;
  if (!__OFADD__(v2, 1LL))
  {
    int64_t v9 = (unint64_t)(v0[2] + 64LL) >> 6;
    if (v8 >= v9)
    {
      uint64_t v3 = 0LL;
      uint64_t v6 = 0LL;
      goto LABEL_4;
    }

    uint64_t v10 = v0[1];
    unint64_t v11 = *(void *)(v10 + 8 * v8);
    if (v11) {
      goto LABEL_8;
    }
    int64_t v12 = v2 + 2;
    if (v2 + 2 < v9)
    {
      unint64_t v11 = *(void *)(v10 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      if (v2 + 3 >= v9) {
        goto LABEL_25;
      }
      unint64_t v11 = *(void *)(v10 + 8 * (v2 + 3));
      if (v11)
      {
        int64_t v8 = v2 + 3;
        goto LABEL_8;
      }

      int64_t v12 = v2 + 4;
      if (v2 + 4 >= v9)
      {
        uint64_t v3 = 0LL;
        uint64_t v6 = 0LL;
        v2 += 3LL;
        goto LABEL_4;
      }

      unint64_t v11 = *(void *)(v10 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v8 = v12;
LABEL_8:
        uint64_t v3 = (v11 - 1) & v11;
        unint64_t v4 = __clz(__rbit64(v11)) + (v8 << 6);
        int64_t v2 = v8;
        goto LABEL_3;
      }

      int64_t v8 = v2 + 5;
      if (v2 + 5 >= v9)
      {
LABEL_25:
        uint64_t v3 = 0LL;
        uint64_t v6 = 0LL;
        int64_t v2 = v12;
        goto LABEL_4;
      }

      unint64_t v11 = *(void *)(v10 + 8 * v8);
      if (v11) {
        goto LABEL_8;
      }
      int64_t v8 = v9 - 1;
      int64_t v13 = v2 + 6;
      while (v13 < v9)
      {
        unint64_t v11 = *(void *)(v10 + 8 * v13++);
        if (v11)
        {
          int64_t v8 = v13 - 1;
          goto LABEL_8;
        }
      }
    }

    uint64_t v3 = 0LL;
    uint64_t v6 = 0LL;
    int64_t v2 = v8;
    goto LABEL_4;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001B8E4C(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(0LL, a2))
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v2 = *(void *)(result + 16);
  BOOL v3 = __OFADD__(a2, v2);
  uint64_t v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (v4 < a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t sub_1001B8E94(void *a1)
{
  isUniquelyReferenced_nonNull = (char *)swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull) {
    return 0LL;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v9 = *v1;
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain(v9);
  int64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    int64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v12[2 * v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    uint64_t v14 = v7;
    goto LABEL_10;
  }

  unint64_t v15 = v12[3];
  uint64_t result = swift_release(v12);
  uint64_t v17 = (v15 >> 1) - v13;
  BOOL v18 = __OFADD__(v7, v17);
  uint64_t v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    uint64_t v19 = *v1;
    uint64_t v20 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v21 = swift_unknownObjectRetain(v19);
    a1 = (void *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = (v8 + 16 * v6 - (uint64_t)a1 - 32) / 16;
    isUniquelyReferenced_nonNull = (char *)(v7 + v22);
    if (!__OFADD__(v7, v22))
    {
      uint64_t v4 = a1[2];
LABEL_19:
      sub_1001B8FFC(isUniquelyReferenced_nonNull, v4, 0LL);
      return (uint64_t)a1;
    }

char *sub_1001B8FFC(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 16LL * (void)result;
  uint64_t result = (char *)swift_arrayDestroy(v8, v4);
  BOOL v9 = __OFSUB__(a3, v4);
  uint64_t v10 = a3 - v4;
  if (v9)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v7 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_11;
  }
  uint64_t result = sub_10024F1F0((char *)(v7 + 32 + 16 * a2), v11 - a2, (char *)(v8 + 16 * a3));
  uint64_t v12 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v12, v10);
  uint64_t v13 = v12 + v10;
  if (v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v13;
LABEL_7:
  if (a3 > 0) {
LABEL_13:
  }
    __break(1u);
  return result;
}

void sub_1001B90A8(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1001B0504(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_1001AA978();
}

uint64_t sub_1001B90E4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001B9130 + 4 * byte_10037B32F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001B9164 + 4 * byte_10037B32A[v4]))();
}

uint64_t sub_1001B9164(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B916C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001B9174LL);
  }
  return result;
}

uint64_t sub_1001B9180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001B9188LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001B918C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B9194(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConversationLinkSyncMessageQueue.EnqueueMode()
{
}

unint64_t sub_1001B91B0()
{
  unint64_t result = qword_1004478E0;
  if (!qword_1004478E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037B4BC, &unk_1003DE510);
    atomic_store(result, (unint64_t *)&qword_1004478E0);
  }

  return result;
}

uint64_t sub_1001B9200()
{
  return sub_1001B8020(v1, v0);
}

  ;
}

uint64_t sub_1001B921C()
{
  return sub_1001B7FF4(v1, v0);
}

uint64_t sub_1001B922C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001B9234()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001B923C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 176, v5, v4, a4);
}

uint64_t sub_1001B924C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 176, v4, v5, a4);
}

uint64_t sub_1001B925C()
{
  return sub_1001B7FF4(v1, v0);
}

Swift::Int sub_1001B926C()
{
  return Hasher._finalize()();
}

void sub_1001B9274()
{
}

uint64_t sub_1001B9280()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1001B928C(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 - 184));
}

void *sub_1001B9298(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_1001B92A4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001B92AC()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for AudioInterruptionProviderFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd32AudioInterruptionProviderFactory);
}

_UNKNOWN **sub_1001B92DC()
{
  return &off_1003DF8F8;
}

_UNKNOWN **sub_1001B92E8()
{
  return &off_1003DFBF0;
}

uint64_t sub_1001B92F4(uint64_t a1)
{
  id v1 = [(id)objc_opt_self(AVAudioSession) retrieveSessionWithID:a1];
  uint64_t v2 = type metadata accessor for AVAudioSessionInterruptionProvider();
  swift_allocObject(v2, 217LL, 7LL);
  return sub_1001E20B4((uint64_t)v1, 0);
}

void destroy for NearbyDeviceRoute(uint64_t a1)
{
}

uint64_t initializeWithCopy for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void **)(a2 + 48);
  BOOL v9 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v8;
  id v10 = v8;

  return a1;
}

__n128 initializeWithTake for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NearbyDeviceRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyDeviceRoute(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyDeviceRoute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NearbyDeviceRoute()
{
  return &type metadata for NearbyDeviceRoute;
}

void sub_1001B9598(int a1, Swift::UInt32 a2)
{
}

void sub_1001B95B8(int a1, Swift::UInt a2)
{
}

uint64_t sub_1001B95D0(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x6C65536E496C6C61LL;
    }
    else {
      uint64_t v3 = 0x636E4F6E496C6C61LL;
    }
    if (v2 == 1) {
      uint64_t v4 = 0xEC00000074754F66LL;
    }
    else {
      uint64_t v4 = 0xE900000000000065LL;
    }
  }

  else
  {
    uint64_t v4 = 0xEB0000000074754FLL;
    uint64_t v3 = 0x6C6C416E496C6C61LL;
  }

  sub_1001BA4FC(a1, v3);
  return sub_1001BA48C(v4);
}

void sub_1001B9654(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1001B969C(uint64_t a1)
{
  return sub_1001BA48C(0x800000010036A440LL);
}

void sub_1001B97AC(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1001B97CC(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1001B97F0(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x656E6F6850LL;
  }
  else {
    uint64_t v3 = 0x656D695465636146LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE500000000000000LL;
  }
  sub_1001BA4FC(a1, v3);
  return sub_1001BA48C(v4);
}

uint64_t sub_1001B983C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = v4 == *(void *)a2 && v5 == v6;
  if (!v7 && (sub_1001B1144(v4, v5, *(void *)a2, v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  BOOL v12 = v8 == v10 && v9 == v11;
  if (!v12 && (sub_1001B1144(v8, v9, v10, v11) & 1) == 0
    || *(void *)(a1 + 32) != *(void *)(a2 + 32)
    || ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) != 0)
  {
    return 0LL;
  }

  sub_1001B9D8C();
  return static NSObject.== infix(_:_:)(*(void *)(a1 + 48), *(void *)(a2 + 48)) & 1;
}

void sub_1001B98E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain(v4);
  sub_1001BA4D4();
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain(v5);
  sub_1001BA4D4();
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(*(void *)(v2 + 32));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 40) & 1);
  id v6 = *(id *)(v2 + 48);
  NSObject.hash(into:)(a1);
}

void sub_1001B9974()
{
}

void sub_1001B99B0(uint64_t a1)
{
}

unint64_t sub_1001B99E8()
{
  unint64_t result = qword_1004479C8;
  if (!qword_1004479C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037B5D4, &type metadata for NearbyDeviceRoute);
    atomic_store(result, (unint64_t *)&qword_1004479C8);
  }

  return result;
}

void sub_1001B9A24(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [(id)objc_opt_self(IDSDestination) destinationWithDevice:a1];
  uint64_t v5 = sub_1001BA504((uint64_t)v4, (SEL *)&selRef_uniqueIDOverride);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = sub_1001BA504(v5, (SEL *)&selRef_name);
  if (!v10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = sub_1001BA504(v9, (SEL *)&selRef_modelIdentifier);
  if (v14)
  {
    sub_1001B9AF0(v13, v14);
    uint64_t v16 = v15;

    *(void *)a2 = v7;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v8;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v11;
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v16;
    *(_BYTE *)(a2 + 40) = 0;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v4;
    return;
  }

void sub_1001B9AF0(uint64_t a1, uint64_t a2)
{
  v5._object = (void *)0x800000010036BA30LL;
  v5._countAndFlagsBits = 0xD000000000000011LL;
  if (!sub_1001BA450(v5))
  {
    v6._countAndFlagsBits = 0x6363416F69647541LL;
    v6._object = (void *)0xEE0079726F737365LL;
    if (!sub_1001BA450(v6))
    {
      v7._countAndFlagsBits = 1685016681LL;
      v7._object = (void *)0xE400000000000000LL;
      if (!sub_1001BA450(v7))
      {
        v8._countAndFlagsBits = 0x3864615069LL;
        v8._object = (void *)0xE500000000000000LL;
        if (!sub_1001BA450(v8))
        {
          v9._countAndFlagsBits = 1684099177LL;
          v9._object = (void *)0xE400000000000000LL;
          if (!sub_1001BA450(v9))
          {
            v10._countAndFlagsBits = 1667321193LL;
            v10._object = (void *)0xE400000000000000LL;
            if (!sub_1001BA450(v10))
            {
              v11._countAndFlagsBits = 0x6B6F6F4263614DLL;
              v11._object = (void *)0xE700000000000000LL;
              if (!sub_1001BA450(v11))
              {
                v12._countAndFlagsBits = 0x696E696D63614DLL;
                v12._object = (void *)0xE700000000000000LL;
                if (!sub_1001BA450(v12))
                {
                  v13._countAndFlagsBits = 0x6F725063614DLL;
                  v13._object = (void *)0xE600000000000000LL;
                  if (!sub_1001BA450(v13))
                  {
                    v14._countAndFlagsBits = 0x6863746157LL;
                    v14._object = (void *)0xE500000000000000LL;
                    sub_1001BA450(v14);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (a1 != 0x312C363163614DLL || a2 != 0xE700000000000000LL) {
    sub_1001B1144(a1, a2, 0x312C363163614DLL, 0xE700000000000000LL);
  }
  v15._object = (void *)0x800000010036BA50LL;
  v15._countAndFlagsBits = 0xD000000000000011LL;
  sub_1001BA450(v15);
  sub_1001B4C30();
  sub_10010B978();
}

void sub_1001B9CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 48))();
  if (v5)
  {
    sub_1001B9AF0(v4, v5);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    sub_10010B978();
  }

uint64_t sub_1001B9D34(uint64_t a1, uint64_t a2)
{
  if (!v3) {
    return 0LL;
  }
  v4._countAndFlagsBits = 0x5654656C707041LL;
  v4._object = (void *)0xE700000000000000LL;
  String.hasPrefix(_:)(v4);
  sub_1001B4C30();
  return v2 & 1;
}

unint64_t sub_1001B9D8C()
{
  unint64_t result = qword_100447BB0;
  if (!qword_100447BB0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100447BB0);
  }

  return result;
}

uint64_t sub_1001B9DC8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_1001B9E24@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v49[3] = a2;
  v49[4] = a3;
  sub_1001B236C(v49);
  (*(void (**)(void))(*(void *)(a2 - 8) + 32LL))();
  uint64_t v11 = sub_1001BA50C();
  if ((sub_100283FA8(v11, v12) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v13 = sub_1001BA50C();
  v14(v13);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  int v16 = sub_1001AB0AC((uint64_t)v10, 1LL, v15);
  sub_1001AFF54((uint64_t)v10);
  if (v16 == 1)
  {
    sub_1001BA4E4();
    sub_1001BA4C4();
    sub_1001BA4AC();
    __chkstk_darwin(v17);
    sub_1001BA468(v18, v19, v48[0]);
    uint64_t v20 = sub_1001BA494();
    sub_1001BA080(v20, v21, v22, v23, v24);
    goto LABEL_8;
  }

  uint64_t v25 = sub_1001BA50C();
  sub_1001B9CDC(v25, v26);
  if (v27 > 0x1B || ((1LL << v27) & 0x8400040) == 0)
  {
    sub_1001BA4F0();
    sub_1001B0438(v48);
    goto LABEL_11;
  }

  sub_1001BA4F0();
  sub_1001B204C(v48, v48[3]);
  uint64_t v28 = sub_1001BA50C();
  __int16 v30 = v29(v28);
  sub_1001B0438(v48);
  if ((v30 & 0x200) == 0)
  {
LABEL_11:

    goto LABEL_12;
  }

  sub_1001BA4E4();
  sub_1001BA4C4();
  sub_1001BA4AC();
  __chkstk_darwin(v31);
  sub_1001BA468(v32, v33, v48[0]);
  uint64_t v34 = sub_1001BA494();
  sub_1001BA1F8(v34, v35, v36, v37, v38);
LABEL_8:
  uint64_t v39 = v50[0];
  uint64_t v40 = v50[1];
  uint64_t v41 = v50[2];
  uint64_t v42 = v50[3];
  uint64_t v43 = v50[4];
  char v44 = v51;
  uint64_t v45 = v52;
  sub_1001B0438(v53);
  sub_1001BA1B0((uint64_t)v50, (uint64_t)v53);
  if (!v53[1])
  {
LABEL_12:
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v45 = 0LL;
    goto LABEL_13;
  }

  uint64_t v46 = v44 & 1;
LABEL_13:
  uint64_t result = sub_1001B0438(v49);
  *a4 = v39;
  a4[1] = v40;
  a4[2] = v41;
  a4[3] = v42;
  a4[4] = v43;
  a4[5] = v46;
  a4[6] = v45;
  return result;
}

uint64_t sub_1001BA03C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1001BA080@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v9 + 32))(v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = v12;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    uint64_t v18 = v17;
    sub_1001B9CDC(a3, a4);
    uint64_t v20 = v19;
  }

  else
  {

    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v20 = 0LL;
    a2 = 0LL;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  *a5 = v16;
  a5[1] = v18;
  a5[2] = v15;
  a5[3] = v14;
  a5[4] = v20;
  a5[5] = 0LL;
  a5[6] = (uint64_t)a2;
  return result;
}

uint64_t sub_1001BA188(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_1001BA1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_1004488C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BA1F8@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v19, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  if (sub_1001AB0AC((uint64_t)v12, 1LL, v13) == 1)
  {

    sub_1001AFF54((uint64_t)v12);
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
LABEL_9:
    uint64_t v32 = 0LL;
    uint64_t v31 = 0LL;
    goto LABEL_10;
  }

  id v36 = a2;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  uint64_t v24 = v26;
  if (!v26)
  {

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    goto LABEL_9;
  }

  uint64_t v23 = v25;
  uint64_t v27 = UUID.uuidString.getter(v25);
  uint64_t v34 = v28;
  uint64_t v35 = v27;
  sub_1001B9CDC(a3, a4);
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  if (v30 == 6)
  {
    uint64_t v32 = 14LL;
    uint64_t v21 = v35;
    uint64_t v31 = (uint64_t)v36;
    uint64_t v22 = v34;
  }

  else
  {
    uint64_t v21 = v35;
    uint64_t v31 = (uint64_t)v36;
    uint64_t v22 = v34;
    if (v30 == 22)
    {
      uint64_t v32 = 23LL;
    }

    else if (v30 == 27)
    {
      uint64_t v32 = 28LL;
    }

    else
    {
      uint64_t v32 = 0LL;
    }
  }

BOOL sub_1001BA450(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

void sub_1001BA45C(int a1, Swift::UInt a2)
{
}

uint64_t sub_1001BA468@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t sub_1001BA48C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1001BA494()
{
  return v0;
}

  ;
}

uint64_t sub_1001BA4C4()
{
  return sub_1001BA188(v0 - 136, *(void *)(v0 - 112));
}

uint64_t sub_1001BA4D4()
{
  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1001BA4E4()
{
  return sub_1001BA03C(v0 - 232, v0 - 136);
}

uint64_t sub_1001BA4F0()
{
  return sub_1001BA03C(v0 - 232, v0 - 272);
}

uint64_t sub_1001BA4FC(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_1001BA504(uint64_t a1, SEL *a2)
{
  return sub_1001B9DC8(v2, a2);
}

uint64_t sub_1001BA50C()
{
  return v0;
}

uint64_t sub_1001BA518()
{
  uint64_t v0 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_1001B0F00();
  uint64_t v4 = v3 - v2;
  uint64_t v6 = P256.KeyAgreement.PrivateKey.publicKey.getter(v5);
  uint64_t v7 = P256.KeyAgreement.PublicKey.compactRepresentation.getter(v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v7;
}

BOOL LetMeInRequestorKeyAgreement.isExhausted.getter()
{
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v12[-v5];
  uint64_t v7 = v0 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey;
  sub_1001B0E6C(v0 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey, (uint64_t)v13);
  sub_1001BA700(v7, (uint64_t)v6);
  type metadata accessor for SymmetricKey(0LL);
  int v8 = sub_1001BB5D8((uint64_t)v6);
  sub_1001BB478((uint64_t)v6, &qword_1004479D0);
  if (v8 != 1) {
    return 0LL;
  }
  uint64_t v9 = v0 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey;
  sub_1001B0E6C(v9, (uint64_t)v12);
  sub_1001BA700(v9, (uint64_t)v4);
  BOOL v10 = sub_1001BB5D8((uint64_t)v4) == 1;
  sub_1001BB478((uint64_t)v4, &qword_1004479D0);
  return v10;
}

uint64_t sub_1001BA700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_1004479D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1001BA748(uint64_t a1, unint64_t a2)
{
  uint64_t v41 = v8;
  sub_1001BB5CC();
  __chkstk_darwin(v9);
  uint64_t v40 = (char *)&v39 - v10;
  uint64_t v11 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v39 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001BB4B4();
  uint64_t v43 = v12;
  sub_1001BB5CC();
  __chkstk_darwin(v13);
  uint64_t v42 = (char *)&v39 - v14;
  sub_1001AFF14(&qword_100447A30);
  sub_1001B0E88();
  __chkstk_darwin(v15);
  sub_1001B0F00();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  sub_1001BB550();
  __chkstk_darwin(v20);
  sub_1001BB578();
  uint64_t v21 = &v3[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_localKey];
  uint64_t v22 = v3;
  v51[4] = v21;
  P256.KeyAgreement.PrivateKey.init(compactRepresentable:)(1LL);
  uint64_t v46 = &v22[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey];
  sub_1001BB4E0((uint64_t)&v22[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey], 1LL);
  char v44 = v22;
  uint64_t v47 = &v22[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey];
  sub_1001BB4E0((uint64_t)&v22[OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey], 1LL);
  v51[0] = a1;
  v51[1] = a2;
  uint64_t v48 = a1;
  unint64_t v49 = a2;
  sub_1001BB31C(a1, a2);
  uint64_t v23 = v45;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)( v51,  &type metadata for Data,  &protocol witness table for Data);
  if (v23)
  {
    swift_errorRelease(v23);
    sub_1001BB544(v18, 1LL);
  }

  else
  {
    uint64_t v25 = (uint64_t)v42;
    uint64_t v24 = v43;
    sub_1001BB544(v18, 0LL);
    if (sub_1001AB0AC(v18, 1LL, v19) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v18, v19);
      sub_100258CFC(v25, v24, v2);
      sub_1001BB590();
      uint64_t v32 = (uint64_t)v40;
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
      v33(v40, v25, v11);
      sub_1001BB4E0(v32, 0LL);
      uint64_t v34 = v41;
      v33((char *)v41, v24, v11);
      sub_1001BB4E0(v34, 0LL);
      uint64_t v35 = (uint64_t)v46;
      sub_1001BB4D4((uint64_t)v46, (uint64_t)v51);
      sub_1001BB3E0(v32, v35);
      swift_endAccess(v51);
      uint64_t v36 = (uint64_t)v47;
      sub_1001BB4D4((uint64_t)v47, (uint64_t)v51);
      sub_1001BB3E0(v34, v36);
      swift_endAccess(v51);
      uint64_t v37 = v44;

      uint64_t v38 = (objc_class *)type metadata accessor for LetMeInRequestorKeyAgreement(0LL);
      v50.receiver = v37;
      v50.super_class = v38;
      objc_msgSendSuper2(&v50, "init");
      sub_1001BB5E4();
      goto LABEL_5;
    }
  }

  sub_1001BB478(v18, &qword_100447A30);
  unint64_t v26 = sub_1001BB360();
  uint64_t v27 = sub_1001BB4C8((uint64_t)&type metadata for ConversationLinkCryptoErrorType, v26);
  _BYTE *v28 = 0;
  swift_willThrow(v27);
  sub_1001BB5E4();
  uint64_t v29 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  sub_1001BB538(*(void *)(v29 - 8));
  sub_1001BB478((uint64_t)v46, &qword_1004479D0);
  sub_1001BB478((uint64_t)v47, &qword_1004479D0);
  uint64_t v30 = v44;

  uint64_t v31 = type metadata accessor for LetMeInRequestorKeyAgreement(0LL);
  swift_deallocPartialClassInstance( v30,  v31,  *(unsigned int *)((swift_isaMask & *(void *)v30) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v30) + 0x34LL));
LABEL_5:
  sub_1001BB4EC();
}

void *sub_1001BAAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for AES.GCM.SealedBox(0LL);
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v57 = v11;
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v63 = v13 - v12;
  sub_1001AFF14(&qword_1004479D0);
  sub_1001B0E88();
  __chkstk_darwin(v14);
  sub_1001BB4B4();
  uint64_t v55 = v15;
  sub_1001BB5CC();
  __chkstk_darwin(v16);
  uint64_t v17 = sub_1001BB510();
  sub_1001BB550();
  __chkstk_darwin(v18);
  sub_1001BB560();
  uint64_t v19 = (uint64_t)v2 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey;
  sub_1001B0E6C((uint64_t)v2 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_requestKey, (uint64_t)v62);
  sub_1001BA700(v19, v5);
  if (sub_1001AB0AC(v5, 1LL, v17) == 1)
  {
    sub_1001BB478(v5, &qword_1004479D0);
    unint64_t v20 = sub_1001BB360();
    uint64_t v21 = sub_1001BB4C8((uint64_t)&type metadata for ConversationLinkCryptoErrorType, v20);
    *uint64_t v22 = 1;
    swift_willThrow(v21);
    return v2;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v5, v17);
  sub_1001BA518();
  if (v23 >> 60 == 15)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_1001B0D98(v24, (uint64_t)qword_1004541B0);
    uint64_t v2 = (void *)Logger.logObject.getter(v25, v26, v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v2, v28);
    if (sub_1001BB5B0(v29))
    {
      uint64_t v30 = v17;
      uint64_t v31 = v4;
      uint64_t v32 = (_WORD *)sub_1001BB5EC();
      *uint64_t v32 = 0;
      sub_1001BB524( (void *)&_mh_execute_header,  v33,  v34,  "Failed to derive let me in requestor's public key from the locally-generated private key");
      uint64_t v35 = (uint64_t)v32;
      uint64_t v4 = v31;
      uint64_t v17 = v30;
      sub_1001B0E60(v35);
    }

    unint64_t v36 = sub_1001BB360();
    sub_1001BB4C8((uint64_t)&type metadata for ConversationLinkCryptoErrorType, v36);
    sub_1001BB504(v37, 3);
    goto LABEL_11;
  }

  v61[0] = a1;
  v61[1] = a2;
  uint64_t v38 = type metadata accessor for AES.GCM.Nonce(0LL);
  sub_1001A9670(v10, 1LL, 1LL, v38);
  unint64_t v39 = sub_1001BB428();
  uint64_t v40 = v63;
  static AES.GCM.seal<A>(_:using:nonce:)(v61, v4, v10, &type metadata for Data, v39);
  if (v59)
  {
    sub_1001BB5C0();
    sub_1001BB478(v10, &qword_100447A40);
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v17);
    return v2;
  }

  uint64_t v60 = v4;
  uint64_t v42 = sub_1001BB478(v10, &qword_100447A40);
  uint64_t v43 = AES.GCM.SealedBox.combined.getter(v42);
  if (v44 >> 60 == 15)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    uint64_t v46 = sub_1001B0D98(v45, (uint64_t)qword_1004541B0);
    uint64_t v2 = (void *)Logger.logObject.getter(v46, v47, v48);
    os_log_type_t v49 = static os_log_type_t.default.getter(v2);
    if (sub_1001BB5B0(v49))
    {
      objc_super v50 = (_WORD *)sub_1001BB5EC();
      *objc_super v50 = 0;
      sub_1001BB524( (void *)&_mh_execute_header,  v51,  v52,  "Failed to retrieve combined data from encrypted LMI response.");
      sub_1001B0E60((uint64_t)v50);
    }

    unint64_t v53 = sub_1001BB360();
    sub_1001BB4C8((uint64_t)&type metadata for ConversationLinkCryptoErrorType, v53);
    sub_1001BB504(v54, 3);
    sub_1001BB5C0();
    sub_1001BB538(v56);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v60, v17);
  }

  else
  {
    uint64_t v2 = (void *)v43;
    sub_1001A9670(v55, 1LL, 1LL, v17);
    sub_1001BB4D4(v19, (uint64_t)v61);
    sub_1001BB3E0(v55, v19);
    swift_endAccess(v61);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v40, v57);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v17);
  }

  return v2;
}

void sub_1001BAF04(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = type metadata accessor for AES.GCM.SealedBox(0LL);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1001BB578();
  sub_1001AFF14(&qword_1004479D0);
  sub_1001B0E88();
  __chkstk_darwin(v10);
  sub_1001BB4B4();
  uint64_t v23 = v11;
  sub_1001BB5CC();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_1001BB510();
  sub_1001BB550();
  __chkstk_darwin(v14);
  sub_1001BB560();
  uint64_t v15 = v3 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey;
  sub_1001B0E6C(v3 + OBJC_IVAR___CSDLetMeInRequestorKeyAgreement_responseKey, (uint64_t)v26);
  sub_1001BA700(v15, v6);
  if (sub_1001AB0AC(v6, 1LL, v13) == 1)
  {
    sub_1001BB478(v6, &qword_1004479D0);
    unint64_t v16 = sub_1001BB360();
    sub_1001BB4C8((uint64_t)&type metadata for ConversationLinkCryptoErrorType, v16);
    sub_1001BB504(v17, 2);
LABEL_6:
    sub_1001BB4EC();
    return;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v6, v13);
  sub_1001BB31C(a1, a2);
  uint64_t v18 = v27;
  sub_10024DD80(a1, a2);
  if (v18)
  {
    sub_1001BB5A0();
    goto LABEL_6;
  }

  uint64_t v19 = static AES.GCM.open(_:using:)(v2, v5);
  unint64_t v21 = v20;
  uint64_t v27 = v2;
  sub_1001BB544(v23, 1LL);
  sub_1001BB4D4(v15, (uint64_t)v25);
  sub_1001BB3E0(v23, v15);
  swift_endAccess(v25);
  id v22 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingConversationMessage);
  sub_1001BB31C(v19, v21);
  if (sub_10024E530())
  {
    sub_1001BB39C(v19, v21);
    sub_1001BB538(v24);
    sub_1001BB5A0();
    goto LABEL_6;
  }

  __break(1u);
}

void LetMeInRequestorKeyAgreement.init()()
{
}

id LetMeInRequestorKeyAgreement.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LetMeInRequestorKeyAgreement(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LetMeInRequestorKeyAgreement(uint64_t a1)
{
  uint64_t result = qword_100447A18;
  if (!qword_100447A18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LetMeInRequestorKeyAgreement);
  }
  return result;
}

uint64_t sub_1001BB238()
{
  return type metadata accessor for LetMeInRequestorKeyAgreement(0LL);
}

void sub_1001BB240(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v2 - 8) + 64LL;
    sub_1001BB2C8(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      swift_updateClassMetadata2(a1, 256LL, 3LL, &v6, a1 + 80);
    }
  }

void sub_1001BB2C8(uint64_t a1)
{
  if (!qword_100447A28)
  {
    uint64_t v2 = type metadata accessor for SymmetricKey(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100447A28);
    }
  }

uint64_t sub_1001BB31C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1001BB360()
{
  unint64_t result = qword_100447A38;
  if (!qword_100447A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037E448, &type metadata for ConversationLinkCryptoErrorType);
    atomic_store(result, (unint64_t *)&qword_100447A38);
  }

  return result;
}

uint64_t sub_1001BB39C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001BB3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_1004479D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001BB428()
{
  unint64_t result = qword_100447A48;
  if (!qword_100447A48)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100447A48);
  }

  return result;
}

uint64_t sub_1001BB464(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1001BB39C(result, a2);
  }
  return result;
}

uint64_t sub_1001BB478(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1001AFF14(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

  ;
}

uint64_t sub_1001BB4C8(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_1001BB4D4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_1001BB4E0(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

  ;
}

uint64_t sub_1001BB504@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_1001BB510()
{
  return type metadata accessor for SymmetricKey(0LL);
}

void sub_1001BB524(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1001BB538@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(v1 - 72));
}

uint64_t sub_1001BB544(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1001BB590()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1001BB5A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

BOOL sub_1001BB5B0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1001BB5C0()
{
  return sub_1001BB464(*(void *)(v1 - 176), v0);
}

  ;
}

uint64_t sub_1001BB5D8(uint64_t a1)
{
  return sub_1001AB0AC(a1, 1LL, v1);
}

uint64_t sub_1001BB5E4()
{
  return sub_1001BB39C(*(void *)(v0 - 136), *(void *)(v0 - 128));
}

uint64_t sub_1001BB5EC()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t sub_1001BB5F8(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10026F910(v2);
  char v5 = v4;
  swift_bridgeObjectRelease(v3);
  return v5 & 1;
}

uint64_t sub_1001BB724(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ((v5 & 1) != 0) {
    return 16LL;
  }
  return 0LL;
}

void sub_1001BB85C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = sub_1001704C4();
  static os_log_type_t.error.getter();
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v18 = a1;
  type metadata accessor for CXCallFailureReason(0LL);
  uint64_t v11 = String.init<A>(reflecting:)(&v18, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1001B2330();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  os_log(_:dso:log:type:_:)("BlockUtilities failing call due to %d", v17);

  swift_bridgeObjectRelease(v9);
  [a4 fail];
  id v14 = [objc_allocWithZone(CXCallFailureContext) init];
  [v14 setFailureReason:a1];
  else {
    uint64_t v15 = qword_10037B680[a1 - 16];
  }
  [v14 setProviderEndedReason:v15];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [a2 reportCallWithUUID:isa failedAtDate:0 withContext:v14];
}

id sub_1001BBAC4()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = OBJC_IVAR___CSDBlockUtilities_blocklistUtilities;
  id v3 = objc_allocWithZone((Class)type metadata accessor for BlocklistUtilities());
  char v4 = v0;
  *(void *)&v0[v2] = [v3 init];

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

id ScreenSharingActivityManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BlockUtilities()
{
  return objc_opt_self(&OBJC_CLASS___CSDBlockUtilities);
}

uint64_t sub_1001BBBCC(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_1001B4B94(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_1001BBC0C(void *a1)
{
  objc_super v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_conversationUUIDToConversationReport] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR___CSDRTCReporter_idsSessionUUIDToChatUUIDs] = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs;
  objc_super v6 = v2;
  *(void *)&v2[v5] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for CallInfoPendingScore,  &protocol witness table for String);
  uint64_t v7 = OBJC_IVAR___CSDRTCReporter_userScoreEnabled;
  id v8 = [objc_allocWithZone(TUFeatureFlags) init];
  LOBYTE(v5) = [v8 FTUserScore];

  v6[v7] = v5;
  *(void *)&v6[OBJC_IVAR___CSDRTCReporter_queue] = a1;
  *(void *)&v6[OBJC_IVAR___CSDRTCReporter_chManager] = 0LL;
  id v9 = a1;

  v10.receiver = v6;
  v10.super_class = ObjectType;
  objc_msgSendSuper2(&v10, "init");

  sub_1001C73F4();
}

void sub_1001BBDB4(void *a1, void *a2)
{
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_conversationUUIDToConversationReport] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting] = &_swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___CSDRTCReporter_idsSessionUUIDToChatUUIDs] = &_swiftEmptyDictionarySingleton;
  uint64_t v7 = OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs;
  id v8 = v3;
  *(void *)&v3[v7] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for CallInfoPendingScore,  &protocol witness table for String);
  uint64_t v9 = OBJC_IVAR___CSDRTCReporter_userScoreEnabled;
  id v10 = [objc_allocWithZone(TUFeatureFlags) init];
  LOBYTE(v7) = [v10 FTUserScore];

  v8[v9] = v7;
  *(void *)&v8[OBJC_IVAR___CSDRTCReporter_queue] = a1;
  *(void *)&v8[OBJC_IVAR___CSDRTCReporter_chManager] = a2;
  id v11 = a1;
  id v12 = a2;

  v13.receiver = v8;
  v13.super_class = ObjectType;
  objc_msgSendSuper2(&v13, "init");

  sub_1001C73F4();
}

void sub_1001BBF88(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  objc_super v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  id v11 = (char *)&v52 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v16 = *(void **)(v1 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(vswift_weakDestroy(v0 + 16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    uint64_t v55 = v6;
    id v18 = [a1 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    uint64_t v19 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
    swift_beginAccess(v1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions, v57, 32LL, 0LL);
    uint64_t v54 = v19;
    uint64_t v20 = sub_1001C9FB4(v11, *v19);
    uint64_t v53 = v1;
    unint64_t v21 = (void *)v20;
    swift_endAccess(v57);
    uint64_t v22 = v56;
    uint64_t v23 = *(void (**)(char *, uint64_t))(v56 + 8);
    v23(v11, v3);

    id v24 = sub_1001705A4();
    uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    id v27 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v9, v11, v3);
    uint64_t v28 = String.init<A>(reflecting:)(v9, v3);
    uint64_t v30 = v29;
    v23(v11, v3);
    *(void *)(v26 + 56) = &type metadata for String;
    unint64_t v31 = sub_1001B2330();
    *(void *)(v26 + 64) = v31;
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + 40) = v30;
    uint64_t v32 = static os_log_type_t.default.getter(v31);
    if (v21)
    {
      os_log(_:dso:log:type:_:)( "conversation reporting session exists for uuid %@",  49LL,  2LL,  &_mh_execute_header,  v24,  v32,  v26);

      swift_bridgeObjectRelease(v26);
    }

    else
    {
      os_log(_:dso:log:type:_:)( "Creating conversation reporting session for conversation uuid %@",  64LL,  2LL,  &_mh_execute_header,  v24,  v32,  v26);

      swift_bridgeObjectRelease(v26);
      id v33 = [a1 reportingHierarchyToken];
      uint64_t v34 = v53;
      id v35 = (id)sub_1001C57F4(a1, v33);

      id v36 = [a1 groupUUID];
      uint64_t v37 = (uint64_t)v55;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

      swift_beginAccess(v54, v57, 33LL, 0LL);
      uint64_t v45 = v34;
      if (v35)
      {
        id v35 = v35;
        sub_1001FE37C((uint64_t)v35, v37);
        v23((char *)v37, v3);
      }

      else
      {
        sub_1001FD4D4(v37, v38, v39, v40, v41, v42, v43, v44, v52, v53);
        uint64_t v47 = v46;
        v23((char *)v37, v3);
      }

      swift_endAccess(v57);
      id v48 = [a1 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

      id v49 = objc_allocWithZone((Class)type metadata accessor for RTCCSDConversationInfo(0LL));
      sub_1002A475C(a1);
      uint64_t v51 = v50;
      swift_beginAccess(v45 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, v57, 33LL, 0LL);
      sub_1001FE370(v51, (uint64_t)v11);
      v23(v11, v3);
      swift_endAccess(v57);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1001BC438(void *a1, uint64_t a2, void *a3)
{
  if ([a1 supportsRelay])
  {
    id v5 = [a3 callUUID];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    uint64_t v9 = (void *)(a2 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
    swift_beginAccess(v9, v17, 32LL, 0LL);
    uint64_t v10 = sub_1001C9FB8(v6, v8, *v9);
    swift_bridgeObjectRelease(v8);
    if (v10)
    {
      swift_endAccess(v17);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0) {
          uint64_t v16 = v10 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v16 = v10;
        }
        swift_bridgeObjectRetain(v10);
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v16);
        swift_bridgeObjectRelease(v10);
        if (v11)
        {
LABEL_5:
          BOOL v12 = __OFSUB__(v11, 1LL);
          uint64_t v13 = v11 - 1;
          if (v12)
          {
            __break(1u);
          }

          else
          {
            sub_1002734A0(v13, (v10 & 0xC000000000000001LL) == 0, v10);
            if ((v10 & 0xC000000000000001LL) == 0)
            {
              uint64_t v14 = *(id *)(v10 + 8 * v13 + 32);
LABEL_8:
              uint64_t v15 = v14;
              swift_bridgeObjectRelease(v10);
              v15[OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_failed] = 0;

              return;
            }
          }

          uint64_t v14 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
          goto LABEL_8;
        }
      }

      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        if (v11) {
          goto LABEL_5;
        }
      }

      swift_bridgeObjectRelease(v10);
    }

    else
    {
      swift_endAccess(v17);
    }
  }

void sub_1001BC630()
{
  uint64_t v3 = v2;
  id v5 = v4;
  sub_1001C7360();
  sub_1001C74DC();
  __chkstk_darwin(v6);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v8 = (void *)sub_1001C7370((uint64_t)&unk_1003DF098, 40LL);
  v8[2] = v0;
  v8[3] = v3;
  v8[4] = v5;
  sub_1001C7350();
  sub_1001C750C();
  id v9 = v3;
  id v10 = v5;
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72F8(v11);
  sub_1001C743C();
  sub_1001C74EC();
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001C7388();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001BC76C(char *a1, void *a2, void *a3)
{
  v220 = a3;
  uint64_t v239 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v230 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  uint64_t v6 = (char *)&v208 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v238 = type metadata accessor for DispatchQoS(0LL);
  v229 = *(void (**)(char *, uint64_t))(v238 - 8);
  __chkstk_darwin(v238);
  v237 = (char *)&v208 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v234 = type metadata accessor for DispatchTimeInterval(0LL);
  v225 = *(char **)(v234 - 8);
  __chkstk_darwin(v234);
  v233 = (void (**)(char *, uint64_t))((char *)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v236 = type metadata accessor for DispatchTime(0LL);
  uint64_t v227 = *(void *)(v236 - 8);
  uint64_t v9 = __chkstk_darwin(v236);
  v232 = (char *)&v208 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  v235 = (char *)&v208 - v11;
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v208 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  v228 = (char *)&v208 - v17;
  __chkstk_darwin(v16);
  v226 = (char *)&v208 - v18;
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  v222 = (char *)&v208 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v208 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v208 - v27;
  __chkstk_darwin(v26);
  v221 = (char *)&v208 - v29;
  v216 = v15;
  v217 = v6;
  uint64_t v224 = v20;
  v215 = v25;
  v231 = v28;
  uint64_t v223 = v19;
  id v219 = a2;
  unsigned int v30 = [a2 status];
  id v31 = sub_1001705A4();
  uint64_t v32 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  id v33 = a1;
  uint64_t v34 = swift_allocObject(v32, 112LL, 7LL);
  *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  id v35 = (void ***)&a1[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions];
  swift_beginAccess(&a1[OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions], v248, 0LL, 0LL);
  v214 = v35;
  double aBlock = *v35;
  swift_bridgeObjectRetain(aBlock);
  uint64_t v36 = sub_1001AFF14((uint64_t *)&unk_100447BD0);
  uint64_t v37 = String.init<A>(reflecting:)(&aBlock, v36);
  uint64_t v39 = v38;
  *(void *)(v34 + 56) = &type metadata for String;
  unint64_t v40 = sub_1001B2330();
  *(void *)(v34 + 64) = v40;
  *(void *)(v34 + 32) = v37;
  *(void *)(v34 + 40) = v39;
  LODWORD(aBlock) = v30;
  type metadata accessor for TUCallStatus(0LL);
  uint64_t v42 = String.init<A>(reflecting:)(&aBlock, v41);
  *(void *)(v34 + 96) = &type metadata for String;
  *(void *)(v34 + 104) = v40;
  *(void *)(v34 + 72) = v42;
  *(void *)(v34 + 80) = v43;
  uint64_t v44 = static os_log_type_t.default.getter(v42);
  os_log(_:dso:log:type:_:)( "callUUIDToCallReportingSessions=%@, callStatus: %@",  50LL,  2LL,  &_mh_execute_header,  v31,  v44,  v34);

  swift_bridgeObjectRelease(v34);
  id v45 = sub_1001705A4();
  uint64_t v46 = swift_allocObject(v32, 72LL, 7LL);
  *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  v218 = v33;
  uint64_t v47 = (void ***)&v33[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions];
  swift_beginAccess(&v33[OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions], v247, 0LL, 0LL);
  double aBlock = *v47;
  swift_bridgeObjectRetain(aBlock);
  uint64_t v48 = String.init<A>(reflecting:)(&aBlock, v36);
  *(void *)(v46 + 56) = &type metadata for String;
  *(void *)(v46 + 64) = v40;
  *(void *)(v46 + 32) = v48;
  *(void *)(v46 + 40) = v49;
  uint64_t v50 = static os_log_type_t.default.getter(v48);
  os_log(_:dso:log:type:_:)("callUUIDToGFTCallReportingSessions=%@", 37LL, 2LL, &_mh_execute_header, v45, v50, v46);

  swift_bridgeObjectRelease(v46);
  id v51 = v219;
  if ([v219 disconnectedReason])
  {
    BOOL v52 = [v51 disconnectedReason] == 6;
    if (v30 - 3 >= 2)
    {
      if (v30 != 1)
      {
        uint64_t v53 = v231;
        uint64_t v54 = v218;
        uint64_t v55 = v239;
        uint64_t v56 = v224;
        if (v30 != 6) {
          return;
        }
LABEL_11:
        id v57 = [v51 callGroupUUID];
        uint64_t v58 = v51;
        LODWORD(v21_Block_object_dispose(va, 8) = v52;
        if (v57)
        {
          uint64_t v59 = v57;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

          uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
          uint64_t v61 = (uint64_t)v226;
          uint64_t v62 = v223;
          v60(v226, v53, v223);
          sub_1001A9670(v61, 0LL, 1LL, v62);
          int v63 = sub_1001AB0AC(v61, 1LL, v62);
          uint64_t v64 = v227;
          if (v63 != 1)
          {
            uint64_t v65 = v61;
            uint64_t v66 = (uint64_t)v221;
            v60(v221, (char *)v65, v62);
            uint64_t v67 = v66;
            uint64_t v68 = &v54[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo];
            swift_beginAccess(&v54[OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo], &aBlock, 32LL, 0LL);
            uint64_t v69 = sub_1001C9FB4(v67, *(void *)v68);
            if (v69)
            {
              uint64_t v70 = (void *)v69;
              swift_endAccess(&aBlock);
              sub_1002A3E0C(v58);
            }

            else
            {
              swift_endAccess(&aBlock);
            }

            (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v67, v62);
            goto LABEL_31;
          }
        }

        else
        {
          uint64_t v61 = (uint64_t)v226;
          sub_1001A9670((uint64_t)v226, 1LL, 1LL, v223);
          uint64_t v64 = v227;
        }

        sub_1001C6CE4(v61, (uint64_t *)&unk_10044A400);
LABEL_31:
        v111 = v225;
        uint64_t v112 = (char *)sub_1001BDE3C(v58);
        uint64_t v227 = *(void *)&v54[OBJC_IVAR___CSDRTCReporter_queue];
        v221 = v112;
        v225 = v112;
        uint64_t v113 = v232;
        ((void (*)(void))static DispatchTime.now())();
        uint64_t v114 = v233;
        void *v233 = 5LL;
        uint64_t v115 = (void ***)*((void *)v111 + 13);
        unsigned int v213 = enum case for DispatchTimeInterval.seconds(_:);
        uint64_t v116 = v234;
        v214 = v115;
        ((void (*)(void *))v115)(v114);
        uint64_t v117 = v235;
        + infix(_:_:)(v113, v114);
        v212 = (void (*)(void *, uint64_t))*((void *)v111 + 1);
        v212(v114, v116);
        uint64_t v118 = *(void (**)(char *, uint64_t))(v64 + 8);
        uint64_t v119 = v236;
        v118(v113, v236);
        uint64_t v120 = swift_allocObject(&unk_1003DF0E8, 32LL, 7LL);
        *(void *)(v120 + swift_weakDestroy(v0 + 16) = v54;
        *(void *)(v120 + 24) = v58;
        v245 = sub_1001C70B0;
        v246 = (void *)v120;
        double aBlock = _NSConcreteStackBlock;
        uint64_t v242 = 1107296256LL;
        v243 = sub_1002356BC;
        v244 = &unk_1003DF100;
        uint64_t v121 = _Block_copy(&aBlock);
        v222 = v54;
        v226 = v58;
        uint64_t v122 = v237;
        ((void (*)(void))static DispatchQoS.unspecified.getter)();
        v240 = _swiftEmptyArrayStorage;
        sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        uint64_t v124 = v123;
        uint64_t v125 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
        sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
        v126 = v217;
        uint64_t v211 = v125;
        uint64_t v210 = v127;
        id v219 = v124;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v240, v125, v127, v55, v124);
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v117, v122, v126, v121);
        _Block_release(v121);
        v128 = *(void (**)(char *, uint64_t))(v230 + 8);
        v128(v126, v55);
        uint64_t v129 = v122;
        unsigned int v130 = v222;
        v209 = (void (*)(char *, uint64_t))*((void *)v229 + 1);
        v209(v129, v238);
        v229 = v118;
        v118(v117, v119);
        id v131 = v226;
        swift_release(v246);
        id v132 = [v131 uniqueProxyIdentifierUUID];
        uint64_t v133 = (uint64_t)v231;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v132);

        uint64_t v134 = (uint64_t)v228;
        uint64_t v135 = v223;
        sub_1001A9670((uint64_t)v228, 1LL, 1LL, v223);
        swift_beginAccess(&v130[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID], &aBlock, 33LL, 0LL);
        sub_1001FC248(v134, v133);
        swift_endAccess(&aBlock);
        id v136 = [v131 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v136);

        swift_beginAccess(&v130[OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationUUID], &aBlock, 33LL, 0LL);
        uint64_t v137 = (uint64_t)v216;
        sub_1001FD618(v133);
        swift_endAccess(&aBlock);
        uint64_t v138 = v224;
        uint64_t v230 = *(void *)(v224 + 8);
        ((void (*)(uint64_t, uint64_t))v230)(v133, v135);
        if (sub_1001AB0AC(v137, 1LL, v135) == 1)
        {
          v139 = v225;

          sub_1001C6CE4(v137, (uint64_t *)&unk_10044A400);
          id v140 = [v131 provider];
          unsigned __int8 v141 = [v140 isTelephonyProvider];

          int v142 = (int)v218;
          if ((v141 & 1) != 0)
          {
            id v143 = (id)sub_1001BE61C(v131);

            v144 = 0LL;
            char v145 = 0;
          }

          else
          {
            id v188 = [v131 provider];
            unsigned int v189 = [v188 isFaceTimeProvider];

            if (v189)
            {
              id v190 = [v131 uniqueProxyIdentifierUUID];
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v190);

              swift_beginAccess(&v130[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity], &aBlock, 33LL, 0LL);
              uint64_t v191 = sub_1001FD390(v133);
              swift_endAccess(&aBlock);
              v192 = (void (*)(uint64_t, uint64_t))v230;
              ((void (*)(uint64_t, uint64_t))v230)(v133, v135);
              if (v191)
              {
                if (v142) {
                  uint64_t v193 = 2LL;
                }
                else {
                  uint64_t v193 = 3LL;
                }
                nw_activity_complete_with_reason_and_underlying_error( v191,  v193,  0,  [v131 disconnectedReason]);
                swift_unknownObjectRelease(v191);
              }

              id v194 = [v131 uniqueProxyIdentifierUUID];
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v194);

              swift_beginAccess(&v130[OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting], &aBlock, 33LL, 0LL);
              uint64_t v195 = sub_1001FD390(v133);
              swift_endAccess(&aBlock);
              v192(v133, v135);
              if (v195)
              {
                nw_activity_complete_with_reason_and_underlying_error( v195,  3,  0,  [v131 disconnectedReason]);
                swift_unknownObjectRelease(v195);
              }
            }

            v144 = 0LL;
            char v145 = 0;
            id v143 = v221;
          }
        }

        else
        {
          v146 = v225;
          v208 = v128;
          v147 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 32);
          uint64_t v148 = (uint64_t)v215;
          v147(v215, v137, v135);
          swift_beginAccess(&v130[OBJC_IVAR___CSDRTCReporter_conversationUUIDToConversationReport], &aBlock, 33LL, 0LL);
          sub_1001FD4F0(v148, v149, v150, v151, v152, v153, v154, v155, (uint64_t)v208, (uint64_t)v209);
          v157 = v156;
          swift_endAccess(&aBlock);
          int v158 = v130[OBJC_IVAR___CSDRTCReporter_userScoreEnabled];
          v159 = v130;
          v228 = v157;
          LODWORD(v224) = v158;
          if (v158 == 1)
          {
            v160 = v157;
            v161 = v131;
            id v162 = [v131 callUUID];
            uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
            uint64_t v165 = v164;

            id v166 = objc_allocWithZone((Class)type metadata accessor for RTCCSDCallInfo(0LL));
            id v167 = v161;
            sub_100231A00(v167, v157);
            uint64_t v169 = v168;
            swift_beginAccess(&v159[OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs], &aBlock, 33LL, 0LL);
            sub_1001FE394(v169, (uint64_t)v221, v163, v165);
            swift_endAccess(&aBlock);
            uint64_t v133 = (uint64_t)v231;
            uint64_t v170 = swift_bridgeObjectRelease(v165);
            v171 = v232;
            static DispatchTime.now()(v170);
            v172 = v233;
            void *v233 = 120LL;
            uint64_t v173 = v234;
            ((void (*)(void *, void, uint64_t))v214)(v172, v213, v234);
            v174 = v235;
            + infix(_:_:)(v171, v172);
            v212(v172, v173);
            uint64_t v175 = v236;
            v176 = v159;
            v177 = v229;
            v229(v171, v236);
            v178 = (void *)swift_allocObject(&unk_1003DF138, 40LL, 7LL);
            v178[2] = v176;
            v178[3] = v167;
            v179 = v220;
            v178[4] = v220;
            v245 = sub_1001C70BC;
            v246 = v178;
            double aBlock = _NSConcreteStackBlock;
            uint64_t v242 = 1107296256LL;
            v243 = sub_1002356BC;
            v244 = &unk_1003DF150;
            v180 = _Block_copy(&aBlock);
            v181 = v176;
            id v182 = v167;
            id v183 = v179;
            v184 = v237;
            static DispatchQoS.unspecified.getter(v183);
            v240 = _swiftEmptyArrayStorage;
            v185 = v217;
            uint64_t v186 = v239;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v240, v211, v210, v239, v219);
            OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v174, v184, v185, v180);
            _Block_release(v180);
            uint64_t v187 = v186;
            id v131 = v226;
            v208(v185, v187);
            v209(v184, v238);
            v177(v174, v175);
            v159 = v176;
            swift_release(v246);
          }

          else
          {
          }

          v196 = v215;
          int v197 = (int)v218;
          v198 = (void (*)(uint64_t, uint64_t))v230;
          v199 = &v159[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity];
          swift_beginAccess(&v159[OBJC_IVAR___CSDRTCReporter_uuidToNWActivity], &aBlock, 33LL, 0LL);
          uint64_t v200 = sub_1001FD390(v196);
          swift_endAccess(&aBlock);
          if (v200)
          {
            if (v197) {
              uint64_t v201 = 2LL;
            }
            else {
              uint64_t v201 = 3LL;
            }
            nw_activity_complete_with_reason_and_underlying_error( v200,  v201,  0,  [v131 disconnectedReason]);
            swift_unknownObjectRelease(v200);
          }

          swift_beginAccess(&v159[OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting], &aBlock, 33LL, 0LL);
          uint64_t v202 = sub_1001FD390(v196);
          swift_endAccess(&aBlock);
          if (v202)
          {
            if (v197) {
              uint64_t v203 = 4LL;
            }
            else {
              uint64_t v203 = 3LL;
            }
            nw_activity_complete_with_reason_and_underlying_error( v202,  v203,  0,  [v131 disconnectedReason]);
            swift_unknownObjectRelease(v202);
          }

          id v204 = [v131 uniqueProxyIdentifierUUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v204);

          swift_beginAccess(v199, &aBlock, 33LL, 0LL);
          uint64_t v205 = sub_1001FD390(v133);
          swift_endAccess(&aBlock);
          v198(v133, v223);
          if (v205)
          {
            if (v197) {
              uint64_t v206 = 2LL;
            }
            else {
              uint64_t v206 = 3LL;
            }
            nw_activity_complete_with_reason_and_underlying_error( v205,  v206,  0,  [v131 disconnectedReason]);
            swift_unknownObjectRelease(v205);
          }

          v198((uint64_t)v196, v223);
          id v143 = v221;
          v144 = v228;
          char v145 = v224;
        }

        if (v143)
        {
          if ((v145 & 1) == 0)
          {
            id v143 = v143;
            v207 = (void *)sub_1001BE6BC(v131, v144);
            sub_1001BEC4C(v143, v207);
            swift_bridgeObjectRelease(v207);
          }
        }

        return;
      }

uint64_t sub_1001BDCEC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDRTCReporter_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    id v10 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
    id v11 = [v10 queue];

    __chkstk_darwin(v12);
    *(void *)&v13[-16] = a1;
    OS_dispatch_queue.sync<A>(execute:)(&v14, sub_1001C70C8);

    return v14;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001BDE3C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v32[-v8 - 8];
  id v10 = [a1 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  id v11 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
  swift_beginAccess(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions, v32, 32LL, 0LL);
  uint64_t v12 = sub_1001C9FB4(v9, *v11);
  swift_endAccess(v32);
  uint64_t v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v9, v3);
  if (!v12)
  {
    id v14 = [a1 uniqueProxyIdentifierUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v15 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions);
    swift_beginAccess(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions, v32, 32LL, 0LL);
    uint64_t v12 = sub_1001C9FB4(v9, *v15);
    swift_endAccess(v32);
    v13(v9, v3);
    if (!v12)
    {
      id v16 = [a1 provider];
      unsigned int v17 = [v16 isFaceTimeProvider];

      if (v17)
      {
        id v18 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
        id v31 = [v18 activeConversationForCall:a1 backedByGroupSession:1];

        id v19 = sub_1001705A4();
        uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
        *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
        id v22 = [a1 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
        uint64_t v23 = String.init<A>(reflecting:)(v7, v3);
        uint64_t v25 = v24;
        v13(v9, v3);
        *(void *)(v21 + 56) = &type metadata for String;
        unint64_t v26 = sub_1001B2330();
        *(void *)(v21 + 64) = v26;
        *(void *)(v21 + 32) = v23;
        *(void *)(v21 + 40) = v25;
        uint64_t v27 = v31;
        uint64_t v28 = static os_log_type_t.default.getter(v26);
        if (v27)
        {
          os_log(_:dso:log:type:_:)( "Creating multiway session for call with UUID: %@",  48LL,  2LL,  &_mh_execute_header,  v19,  v28,  v21);

          swift_bridgeObjectRelease(v21);
          id v29 = [a1 uniqueProxyIdentifierUUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

          uint64_t v12 = sub_1001BEF4C(v27, (uint64_t)v9);
          v13(v9, v3);
        }

        else
        {
          os_log(_:dso:log:type:_:)( "Creating 1:1 session for call with UUID: %@",  43LL,  2LL,  &_mh_execute_header,  v19,  v28,  v21);

          swift_bridgeObjectRelease(v21);
          return sub_1001BF94C(a1);
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return v12;
}

void sub_1001BE1AC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [a2 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions, v30, 33LL, 0LL);
  sub_1001FD4D4((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15, v29, v30[0]);
  unsigned int v17 = v16;
  id v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v7, v4);
  swift_endAccess(v30);

  id v19 = [a2 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions, v30, 33LL, 0LL);
  sub_1001FD4D4((uint64_t)v7, v20, v21, v22, v23, v24, v25, v26, v29, v30[0]);
  uint64_t v28 = v27;
  v18(v7, v4);
  swift_endAccess(v30);
}

void sub_1001BE2FC(uint64_t a1, id a2)
{
  id v3 = [a2 callUUID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs, v13, 32LL, 0LL);
  sub_1001CA028(v4, v6, *v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease(v6);
  swift_endAccess(v13);
  if (v9)
  {
    uint64_t v12 = *(void *)&v9[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_callUUID + 8];
    swift_bridgeObjectRetain(v12);
    sub_1001BE3F4();
    swift_bridgeObjectRelease(v12);
  }

  sub_1001C6A68(v9, v11);
}

void sub_1001BE3F4()
{
  int v26 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v25 = sub_1001C7360();
  sub_1001C7334();
  __chkstk_darwin(v8);
  sub_1001C7290();
  sub_1001C7334();
  __chkstk_darwin(v9);
  sub_1001B10F0();
  id v10 = sub_1001705A4();
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = sub_1001C7370(v11, 72LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v28 = v7;
  uint64_t v29 = v5;
  sub_1001C7478();
  uint64_t v13 = String.init<A>(reflecting:)(&v28, &type metadata for String);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_1001B2330();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)( "UserScore: ReportController: reached RTCReporter with current UUID: %@",  70LL,  2LL,  &_mh_execute_header,  v10,  v17,  v12);

  swift_bridgeObjectRelease(v12);
  uint64_t v18 = sub_1001C7370((uint64_t)&unk_1003DE6C0, 44LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v18 + 24) = v7;
  *(void *)(v18 + 32) = v5;
  *(_DWORD *)(v18 + 40) = v26;
  uint64_t v32 = sub_1001C6958;
  uint64_t v33 = v18;
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256LL;
  unsigned int v30 = sub_1002356BC;
  id v31 = &unk_1003DE6D8;
  id v19 = sub_1001C7350();
  sub_1001C7478();
  id v20 = v0;
  sub_1001C7348();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v22 = v21;
  uint64_t v23 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v23, v24, v25, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v19);
  _Block_release(v19);
  sub_1001C72CC();
  sub_1001C73DC();
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_1001BE61C(void *a1)
{
  id v1 = [a1 callUUID];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  uint64_t v5 = sub_1001C5AE8( v2,  v4,  0LL,  0xD000000000000012LL,  0x800000010036C0F0LL,  0xD000000000000021LL,  0x800000010036C0A0LL,  0LL);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1001BE6BC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v59 - 8);
  uint64_t v10 = __chkstk_darwin(v59);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v58 - v13;
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char **)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  void *v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v1_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v17);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  int v63 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v62 = &type metadata for Int;
  v61[0] = 2LL;
  sub_1001FC0F0((uint64_t)v61, v21, v22);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v62 = &type metadata for Int;
  v61[0] = 1LL;
  sub_1001FC0F0((uint64_t)v61, v23, v24);
  id v25 = objc_allocWithZone((Class)type metadata accessor for RTCCSDCallInfo(0LL));
  id v26 = a2;
  id v27 = a1;
  sub_100231A00(v27, a2);
  uint64_t v29 = v28;
  id v30 = [v27 callUUID];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  uint64_t v34 = (void *)(v3 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
  swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID, v61, 32LL, 0LL);
  uint64_t v35 = sub_1001C9FB8(v31, v33, *v34);
  swift_endAccess(v61);
  swift_bridgeObjectRelease(v33);
  uint64_t v36 = *(void *)&v29[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges];
  *(void *)&v29[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges] = v35;
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = v29;
  uint64_t v38 = sub_1001C642C((unint64_t *)&unk_100447B78, type metadata accessor for RTCCSDCallInfo);

  if (!v38)
  {
LABEL_21:

    return (uint64_t)v63;
  }

  unint64_t v39 = 0xD000000000000021LL;
  uint64_t v60 = v38;
  id v40 = [v27 provider];
  unsigned __int8 v41 = [v40 isTelephonyProvider];

  if ((v41 & 1) != 0)
  {
    uint64_t v42 = "com.apple.telephonyutilites.phone";
LABEL_11:
    unint64_t v46 = (unint64_t)(v42 - 32) | 0x8000000000000000LL;
    goto LABEL_18;
  }

  if (![v27 isConversation])
  {
    unint64_t v39 = 0xD000000000000024LL;
    uint64_t v42 = "com.apple.telephonyutilites.facetime";
    goto LABEL_11;
  }

  id v43 = [v27 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

  uint64_t v44 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID);
  swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID, v61, 32LL, 0LL);
  sub_1001C9FBC((uint64_t)v12, *v44, (uint64_t)v8);
  uint64_t v45 = v59;
  if (sub_1001AB0AC((uint64_t)v8, 1LL, v59) == 1)
  {
    unint64_t v39 = 0x6E6F6973736573LL;
    sub_1001C6CE4((uint64_t)v8, (uint64_t *)&unk_10044A400);
    swift_endAccess(v61);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v45);
  }

  else
  {
    uint64_t v47 = v58;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v8, v45);
    swift_endAccess(v61);
    uint64_t v48 = *(void (**)(char *, uint64_t))(v9 + 8);
    v48(v12, v45);
    uint64_t v49 = (void *)(v3 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
    swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, v61, 32LL, 0LL);
    uint64_t v50 = sub_1001C9FB4(v47, *v49);
    if (v50)
    {
      id v51 = (void *)v50;
      swift_endAccess(v61);
      if ((*((_BYTE *)v51 + OBJC_IVAR____TtC13callservicesd22RTCCSDConversationInfo_uPlusOneModeAtStart) & 1) != 0)
      {

        v48(v47, v45);
        unint64_t v46 = 0xE600000000000000LL;
        unint64_t v39 = 0x7961776F7774LL;
        goto LABEL_18;
      }

      unint64_t v39 = 0x6E6F6973736573LL;
      v48(v47, v45);
    }

    else
    {
      unint64_t v39 = 0x6E6F6973736573LL;
      swift_endAccess(v61);
      v48(v47, v45);
    }
  }

  unint64_t v46 = 0xE700000000000000LL;
LABEL_18:
  uint64_t result = kRTCReportingUserInfoServiceName;
  if (!kRTCReportingUserInfoServiceName)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingUserInfoServiceName);
  uint64_t v62 = &type metadata for String;
  v61[0] = v39;
  v61[1] = v46;
  sub_1001FC0F0((uint64_t)v61, v52, v53);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
    uint64_t v56 = v55;
    uint64_t v57 = v60;
    uint64_t v62 = (void *)sub_1001AFF14(&qword_100447B60);
    v61[0] = v57;
    sub_1001FC0F0((uint64_t)v61, v54, v56);
    goto LABEL_21;
  }

id sub_1001BEC4C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (id *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  id v11 = sub_1001705A4();
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(void *)(v13 + 56) = sub_1001B4B94(0LL, &qword_100447B50, &OBJC_CLASS___RTCReporting_ptr);
  *(void *)(v13 + 64) = sub_1001C6A98();
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 96) = sub_1001AFF14(&qword_100447B60);
  sub_1001C6AE8((unint64_t *)&qword_100447B68, &qword_100447B60);
  *(void *)(v13 + 104) = v14;
  *(void *)(v13 + 72) = a2;
  id v15 = a1;
  uint64_t v16 = swift_bridgeObjectRetain(a2);
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)( "Reporting message with session %@ userInfo %@",  45LL,  2LL,  &_mh_execute_header,  v11,  v17,  v13);

  swift_bridgeObjectRelease(v13);
  sub_1002A7838(a2);
  id v30 = 0LL;
  id v29 = v30;
  id v20 = v30;
  uint64_t v21 = (void *)_convertNSErrorToError(_:)(v29);

  swift_willThrow();
  id v22 = sub_1001705A4();
  uint64_t v23 = static os_log_type_t.error.getter();
  uint64_t v24 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  id v30 = v21;
  swift_errorRetain(v21);
  uint64_t v25 = sub_1001AFF14(&qword_100447B70);
  uint64_t v26 = String.init<A>(reflecting:)(&v30, v25);
  uint64_t v28 = v27;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_1001B2330();
  *(void *)(v24 + 32) = v26;
  *(void *)(v24 + 40) = v28;
  os_log(_:dso:log:type:_:)("Error while sending message with error: %@", 42LL, 2LL, &_mh_execute_header, v22, v23, v24);

  swift_bridgeObjectRelease(v24);
  return (id)swift_errorRelease(v21);
}

uint64_t sub_1001BEF4C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v142 = a2;
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v135 = (uint64_t)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v127 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v138 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  id v136 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v134 = (char *)&v127 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unsigned int v130 = (char *)&v127 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v140 = (char *)&v127 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unsigned __int8 v141 = (char *)&v127 - v20;
  __chkstk_darwin(v19);
  id v22 = (char *)&v127 - v21;
  uint64_t v23 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (id *)((char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  void *v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)(v26);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v29 & 1) != 0)
  {
    uint64_t v31 = v138;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
    uint64_t v33 = v142;
    v32(v22, v142, v10);
    id v34 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    sub_1001A9670((uint64_t)v9, 0LL, 1LL, v10);
    swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationUUID, v143, 33LL, 0LL);
    sub_1001FC248((uint64_t)v9, (uint64_t)v22);
    swift_endAccess(v143);
    v32(v22, v33, v10);
    id v35 = [a1 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

    sub_1001A9670((uint64_t)v9, 0LL, 1LL, v10);
    swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_callUUIDtoConversationGroupUUID, v143, 33LL, 0LL);
    sub_1001FC248((uint64_t)v9, (uint64_t)v22);
    swift_endAccess(v143);
    id v36 = [a1 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

    v32(v9, v33, v10);
    sub_1001A9670((uint64_t)v9, 0LL, 1LL, v10);
    uint64_t v37 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID);
    swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID, v143, 33LL, 0LL);
    uint64_t v133 = v37;
    sub_1001FC248((uint64_t)v9, (uint64_t)v22);
    swift_endAccess(v143);
    id v38 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    id v39 = [a1 report];
    swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_conversationUUIDToConversationReport, v143, 33LL, 0LL);
    uint64_t v139 = v3;
    if (v39)
    {
      uint64_t v47 = (uint64_t)v39;
      uint64_t v48 = v141;
      sub_1001FE388(v47, (uint64_t)v141);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v31 + 8);
      v49(v48, v10);
    }

    else
    {
      uint64_t v50 = v141;
      sub_1001FD4F0((uint64_t)v141, v40, v41, v42, v43, v44, v45, v46, (uint64_t)v127, v128);
      uint64_t v52 = v51;
      uint64_t v49 = *(void (**)(char *, uint64_t))(v31 + 8);
      v49(v50, v10);
    }

    uint64_t v53 = v140;
    swift_endAccess(v143);
    id v54 = sub_1001705A4();
    uint64_t v55 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v56 = swift_allocObject(v55, 72LL, 7LL);
    __int128 v137 = xmmword_10037B290;
    *(_OWORD *)(v56 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    id v57 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

    v32(v53, (uint64_t)v22, v10);
    uint64_t v58 = String.init<A>(reflecting:)(v53, v10);
    id v132 = a1;
    unsigned __int8 v141 = (char *)v32;
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    v49(v22, v10);
    *(void *)(v56 + 56) = &type metadata for String;
    unint64_t v62 = sub_1001B2330();
    *(void *)(v56 + 64) = v62;
    *(void *)(v56 + 32) = v59;
    *(void *)(v56 + 40) = v61;
    uint64_t v63 = static os_log_type_t.default.getter(v62);
    os_log(_:dso:log:type:_:)("multiway call reporting session %@", 34LL, 2LL, &_mh_execute_header, v54, v63, v56);

    swift_bridgeObjectRelease(v56);
    uint64_t v64 = (void *)(v139 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
    swift_beginAccess(v139 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions, v143, 32LL, 0LL);
    uint64_t v65 = v142;
    uint64_t v66 = (void *)sub_1001C9FB4(v142, *v64);
    swift_endAccess(v143);

    if (v66)
    {
      id v67 = sub_1001705A4();
      uint64_t v68 = swift_allocObject(v55, 72LL, 7LL);
      *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = v137;
      ((void (*)(char *, uint64_t, uint64_t))v141)(v22, v65, v10);
      uint64_t v69 = String.init<A>(reflecting:)(v22, v10);
      *(void *)(v68 + 56) = &type metadata for String;
      *(void *)(v68 + 64) = v62;
      *(void *)(v68 + 32) = v69;
      *(void *)(v68 + 40) = v70;
      uint64_t v71 = static os_log_type_t.default.getter(v69);
      os_log(_:dso:log:type:_:)( "multiway call reporting session already exists for uuid %@",  58LL,  2LL,  &_mh_execute_header,  v67,  v71,  v68);

      swift_bridgeObjectRelease(v68);
      swift_beginAccess(v64, v143, 32LL, 0LL);
      uint64_t v72 = sub_1001C9FB4(v65, *v64);
      swift_endAccess(v143);
    }

    else
    {
      uint64_t v128 = v55;
      unint64_t v129 = v62;
      id v131 = (void (*)(uint64_t, uint64_t))v49;
      uint64_t v73 = v141;
      id v74 = v132;
      id v127 = [v132 reportingHierarchySubToken];
      if (!v127)
      {
        id v75 = sub_1001705A4();
        uint64_t v76 = swift_allocObject(v128, 72LL, 7LL);
        *(_OWORD *)(v76 + swift_weakDestroy(v0 + 16) = v137;
        ((void (*)(char *, uint64_t, uint64_t))v73)(v22, v65, v10);
        uint64_t v77 = String.init<A>(reflecting:)(v22, v10);
        unint64_t v78 = v129;
        *(void *)(v76 + 56) = &type metadata for String;
        *(void *)(v76 + 64) = v78;
        *(void *)(v76 + 32) = v77;
        *(void *)(v76 + 40) = v79;
        uint64_t v80 = static os_log_type_t.default.getter(v77);
        os_log(_:dso:log:type:_:)("no reporting token for callUUID: %@", 35LL, 2LL, &_mh_execute_header, v75, v80, v76);

        swift_bridgeObjectRelease(v76);
      }

      uint64_t v81 = v74;
      id v82 = objc_msgSend(v74, "groupUUID", v127);
      uint64_t v83 = (uint64_t)v134;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v82);

      id v84 = v133;
      swift_beginAccess(v133, v143, 32LL, 0LL);
      uint64_t v85 = *v84;
      uint64_t v86 = v135;
      sub_1001C9FBC(v83, v85, v135);
      int v87 = sub_1001AB0AC(v86, 1LL, v10);
      id v88 = v140;
      if (v87 == 1)
      {
        sub_1001C6CE4(v86, (uint64_t *)&unk_10044A400);
        swift_endAccess(v143);
      }

      else
      {
        uint64_t v89 = (uint64_t)v130;
        (*(void (**)(char *, uint64_t, uint64_t))(v138 + 32))(v130, v86, v10);
        swift_endAccess(v143);
        v131(v83, v10);
        swift_beginAccess(v64, v143, 33LL, 0LL);
        sub_1001FD4D4(v89, v90, v91, v92, v93, v94, v95, v96, (uint64_t)v127, v128);
        id v98 = v97;
        swift_endAccess(v143);

        uint64_t v83 = v89;
      }

      uint64_t v99 = v73;
      uint64_t v100 = v128;
      uint64_t v101 = (uint64_t (*)(char *, uint64_t))v131;
      v131(v83, v10);
      unsigned __int8 v141 = (char *)sub_1001705A4();
      uint64_t v102 = swift_allocObject(v100, 112LL, 7LL);
      *(_OWORD *)(v102 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
      ((void (*)(char *, uint64_t, uint64_t))v99)(v22, v142, v10);
      uint64_t v103 = String.init<A>(reflecting:)(v22, v10);
      unint64_t v104 = v129;
      *(void *)(v102 + 56) = &type metadata for String;
      *(void *)(v102 + 64) = v104;
      *(void *)(v102 + 32) = v103;
      *(void *)(v102 + 40) = v105;
      id v106 = [v81 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);

      ((void (*)(char *, char *, uint64_t))v99)(v88, v22, v10);
      uint64_t v107 = String.init<A>(reflecting:)(v88, v10);
      uint64_t v109 = v108;
      uint64_t v110 = v101(v22, v10);
      *(void *)(v102 + 96) = &type metadata for String;
      *(void *)(v102 + 104) = v104;
      *(void *)(v102 + 72) = v107;
      *(void *)(v102 + 80) = v109;
      uint64_t v111 = static os_log_type_t.default.getter(v110);
      uint64_t v112 = v141;
      os_log(_:dso:log:type:_:)( "Creating multiway call %@ reporting session for conversation UUID %@",  68LL,  2LL,  &_mh_execute_header,  v141,  v111,  v102);

      uint64_t v113 = v142;
      swift_bridgeObjectRelease(v102);
      uint64_t v114 = (uint64_t)v136;
      ((void (*)(char *, uint64_t, uint64_t))v99)(v136, v113, v10);
      uint64_t v115 = v81;
      uint64_t v116 = v127;
      uint64_t v117 = sub_1001C57F4(v115, v127);
      swift_beginAccess(v64, v143, 33LL, 0LL);
      if (v117)
      {
        sub_1001FE37C(v117, v114);
        v131(v114, v10);
      }

      else
      {
        sub_1001FD4D4(v114, v118, v119, v120, v121, v122, v123, v124, (uint64_t)v127, v128);
        v126 = v125;
        v131(v114, v10);
      }

      swift_endAccess(v143);
      swift_beginAccess(v64, v143, 32LL, 0LL);
      uint64_t v72 = sub_1001C9FB4(v113, *v64);
      swift_endAccess(v143);
    }

    return v72;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001BF94C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v40 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v38 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  id v38 = a1;
  id v12 = [a1 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  uint64_t v39 = v1;
  uint64_t v13 = (void *)(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions);
  swift_beginAccess(v1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions, v41, 32LL, 0LL);
  uint64_t v14 = (void *)sub_1001C9FB4(v11, *v13);
  swift_endAccess(v41);

  id v15 = sub_1001705A4();
  uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v18(v9, v11, v3);
  uint64_t v19 = String.init<A>(reflecting:)(v9, v3);
  uint64_t v21 = v20;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v22 = sub_1001B2330();
  *(void *)(v17 + 64) = v22;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  if (v14)
  {
    os_log(_:dso:log:type:_:)( "FT1:1 reporting session already exists for uuid %@",  50LL,  2LL,  &_mh_execute_header,  v15,  v23,  v17);

    swift_bridgeObjectRelease(v17);
    swift_beginAccess(v13, v41, 32LL, 0LL);
    uint64_t v24 = sub_1001C9FB4(v11, *v13);
    swift_endAccess(v41);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  }

  else
  {
    os_log(_:dso:log:type:_:)( "Creating call reporting session for FT1:1 call UUID %@",  54LL,  2LL,  &_mh_execute_header,  v15,  v23,  v17);

    swift_bridgeObjectRelease(v17);
    uint64_t v25 = (uint64_t)v40;
    v18(v40, v11, v3);
    uint64_t v26 = sub_1001C55EC(v38);
    swift_beginAccess(v13, v41, 33LL, 0LL);
    if (v26)
    {
      sub_1001FE37C(v26, v25);
      id v34 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v34(v25, v3);
    }

    else
    {
      sub_1001FD4D4(v25, v27, v28, v29, v30, v31, v32, v33, (uint64_t)v38, v39);
      id v36 = v35;
      id v34 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v34(v25, v3);
    }

    swift_endAccess(v41);
    swift_beginAccess(v13, v41, 32LL, 0LL);
    uint64_t v24 = sub_1001C9FB4(v11, *v13);
    swift_endAccess(v41);
    v34((uint64_t)v11, v3);
  }

  return v24;
}

void sub_1001BFCB4()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001C7360();
  uint64_t v8 = sub_1001C72E0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001C7290();
  uint64_t v10 = sub_1001C73B4(v9);
  __chkstk_darwin(v10);
  sub_1001B10F0();
  uint64_t v11 = (void *)sub_1001C7370(v2, 40LL);
  v11[2] = v6;
  v11[3] = v0;
  v11[4] = v4;
  sub_1001C7350();
  id v12 = v6;
  id v13 = v0;
  id v14 = v4;
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72AC(v15);
  sub_1001C7454();
  sub_1001C74EC();
  sub_1001C72CC();
  sub_1001C7378();
  sub_1001C7358();
  sub_1001B0FF8();
}

id sub_1001BFDE4(void *a1, uint64_t a2, void *a3)
{
  id result = [a1 supportsRelay];
  if ((_DWORD)result)
  {
    id v7 = [a3 callUUID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    uint64_t v11 = (void *)(a2 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
    swift_beginAccess(v11, v28, 32LL, 0LL);
    uint64_t v12 = sub_1001C9FB8(v8, v10, *v11);
    swift_bridgeObjectRelease(v10);
    if (v12)
    {
      uint64_t v29 = v12;
      swift_endAccess(v28);
      id v13 = objc_allocWithZone((Class)type metadata accessor for RTCCSDRelayDeviceRoute());
      id v14 = sub_100255880(a1);
      uint64_t v15 = v14;
      if (*((_BYTE *)v14 + OBJC_IVAR____TtC13callservicesd22RTCCSDRelayDeviceRoute_type) != 6)
      {
        id v16 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v17 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v18 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v17 >= v18 >> 1)
        {
          unint64_t v27 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v17 + 1, 1LL);
          unint64_t v17 = v27;
        }

        uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
        specialized Array._endMutation()(v19, v20, v21, v22, v23, v24, v25, v26, v28[0]);
      }

      return (id)swift_bridgeObjectRelease(v29);
    }

    else
    {
      return (id)swift_endAccess(v28);
    }
  }

  return result;
}

void sub_1001BFFE8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if ([a1 state] == (id)3)
  {
    id v8 = [a1 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

    uint64_t v9 = (void *)(a2 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
    swift_beginAccess(v9, v13, 32LL, 0LL);
    uint64_t v10 = sub_1001C9FB4(v7, *v9);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      swift_endAccess(v13);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      sub_1002A3F84(a1);
    }

    else
    {
      swift_endAccess(v13);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    }
  }

void sub_1001C0200(uint64_t a1, void *a2, void (*a3)(void *))
{
  uint64_t v6 = sub_1001B1234();
  __chkstk_darwin(v6);
  sub_1001B0F00();
  uint64_t v9 = v8 - v7;
  id v10 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  uint64_t v11 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  sub_1001C746C((uint64_t)v11, (uint64_t)v14);
  uint64_t v12 = sub_1001C9FB4(v9, *v11);
  if (v12)
  {
    id v13 = (void *)v12;
    swift_endAccess(v14);
    sub_1001C74FC();
    a3(a2);
  }

  else
  {
    swift_endAccess(v14);
    sub_1001C74FC();
  }

uint64_t sub_1001C0368(uint64_t a1, void *a2)
{
  uint64_t v47 = type metadata accessor for UUID(0LL);
  uint64_t v49 = *(void *)(v47 - 8);
  uint64_t v4 = __chkstk_darwin(v47);
  uint64_t v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v41 - v6;
  uint64_t v50 = a2;
  uint64_t v51 = a1;
  sub_1001BBF88(a2);
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  id v53 = (id)objc_opt_self(&OBJC_CLASS___TUCallCenter);
  id v7 = [v53 sharedInstance];
  uint64_t v8 = (dispatch_queue_s *)[v7 queue];

  uint64_t v9 = swift_allocObject(&unk_1003DEEE0, 24LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = &v57;
  uint64_t v10 = swift_allocObject(&unk_1003DEF08, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_1001C702C;
  *(void *)(v10 + 24) = v9;
  uint64_t v42 = v9;
  aBlock[4] = sub_1001C7040;
  uint64_t v56 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100275F14;
  aBlock[3] = &unk_1003DEF20;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v56;
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v8, v11);

  _Block_release(v11);
  LOBYTE(v_Block_object_dispose(va, 8) = swift_isEscapingClosureAtFileLocation(v10, "", 90LL, 261LL, 44LL, 1LL);
  swift_release(v10);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = v57;
    if (!(v57 >> 62))
    {
      uint64_t v13 = *(void *)((v57 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = swift_bridgeObjectRetain(v57);
      if (v13) {
        goto LABEL_4;
      }
LABEL_12:
      swift_bridgeObjectRelease(v9);
      unint64_t v39 = v57;
      swift_release(v42);
      return swift_bridgeObjectRelease(v39);
    }
  }

  if (v9 < 0) {
    uint64_t v40 = v9;
  }
  else {
    uint64_t v40 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v9);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v40);
  uint64_t v13 = result;
  if (!result) {
    goto LABEL_12;
  }
LABEL_4:
  if (v13 >= 1)
  {
    unint64_t v52 = v9 & 0xC000000000000001LL;
    uint64_t v44 = (uint64_t *)(v51 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
    swift_beginAccess(v51 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions, aBlock, 0LL, 0LL);
    uint64_t v15 = 0LL;
    __int128 v43 = xmmword_10037B1B0;
    uint64_t v45 = v13;
    do
    {
      if (v52) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v9);
      }
      else {
        id v16 = *(id *)(v9 + 8 * v15 + 32);
      }
      unint64_t v17 = v16;
      id v18 = [v53 sharedInstance];
      id v19 = [v18 activeConversationForCall:v17 backedByGroupSession:1];

      if (v19)
      {
        id v20 = [v17 uniqueProxyIdentifierUUID];
        uint64_t v21 = (uint64_t)v46;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

        uint64_t v22 = v49;
        uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
        uint64_t v24 = v47;
        v23(v21, v47);
        id v25 = sub_1001705A4();
        uint64_t v26 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v27 = swift_allocObject(v26, 112LL, 7LL);
        *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = v43;
        uint64_t v28 = v9;
        id v29 = [v17 uniqueProxyIdentifierUUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

        uint64_t v30 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v48, v21, v24);
        uint64_t v31 = String.init<A>(reflecting:)(v30, v24);
        uint64_t v33 = v32;
        v23(v21, v24);
        *(void *)(v27 + 56) = &type metadata for String;
        unint64_t v34 = sub_1001B2330();
        *(void *)(v27 + 64) = v34;
        *(void *)(v27 + 32) = v31;
        *(void *)(v27 + 40) = v33;
        uint64_t v9 = v28;
        uint64_t v54 = *v44;
        swift_bridgeObjectRetain(v54);
        uint64_t v35 = sub_1001AFF14((uint64_t *)&unk_100447BD0);
        uint64_t v36 = String.init<A>(reflecting:)(&v54, v35);
        *(void *)(v27 + 96) = &type metadata for String;
        *(void *)(v27 + 104) = v34;
        *(void *)(v27 + 72) = v36;
        *(void *)(v27 + 80) = v37;
        uint64_t v38 = static os_log_type_t.default.getter(v36);
        os_log(_:dso:log:type:_:)( "remapped call=%@ to callUUIDToCallReportingSessions=%@",  54LL,  2LL,  &_mh_execute_header,  v25,  v38,  v27);

        uint64_t v13 = v45;
        swift_bridgeObjectRelease(v27);
      }

      ++v15;
    }

    while (v13 != v15);
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001C0804(uint64_t *a1)
{
  id v2 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v3 = [v2 _allCalls];

  uint64_t v4 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044AB70, &OBJC_CLASS___TUCall_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  uint64_t v6 = *a1;
  *a1 = v5;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1001C0914(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38[-1] - v12;
  id v14 = sub_1001705A4();
  uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  id v17 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  uint64_t v18 = String.init<A>(reflecting:)(v11, v7);
  uint64_t v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v13, v7);
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v22 = sub_1001B2330();
  *(void *)(v16 + 64) = v22;
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)("removing ReportingSession for %@", 32LL, 2LL, &_mh_execute_header, v14, v23, v16);

  swift_bridgeObjectRelease(v16);
  id v24 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  sub_1001A9670((uint64_t)v6, 1LL, 1LL, v7);
  swift_beginAccess(a2 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID, v38, 33LL, 0LL);
  sub_1001FC248((uint64_t)v6, (uint64_t)v13);
  swift_endAccess(v38);
  id v25 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  swift_beginAccess(a2 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions, v38, 33LL, 0LL);
  sub_1001FD4D4((uint64_t)v13, v26, v27, v28, v29, v30, v31, v32, v37, v38[0]);
  unint64_t v34 = v33;
  swift_endAccess(v38);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v13, v7);
  if (v34)
  {
    uint64_t v36 = (void *)sub_1001C0BD4(a1);
    sub_1001BEC4C(v34, v36);

    return swift_bridgeObjectRelease(v36);
  }

  return result;
}

uint64_t sub_1001C0BD4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)&v34[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v36 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v35 = &type metadata for Int;
  v34[0] = 0LL;
  sub_1001FC0F0((uint64_t)v34, v15, v16);
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v35 = &type metadata for Int;
  v34[0] = 1LL;
  sub_1001FC0F0((uint64_t)v34, v17, v18);
  id v19 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  swift_beginAccess(v2 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, v34, 33LL, 0LL);
  uint64_t v20 = (void *)sub_1001FD434(v7);
  swift_endAccess(v34);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v20) {
    return (uint64_t)v36;
  }
  sub_1002A4408(a1);
  id v21 = v20;
  uint64_t v22 = sub_1001C642C(&qword_100447BC8, type metadata accessor for RTCCSDConversationInfo);

  if (!v22)
  {
LABEL_13:

    return (uint64_t)v36;
  }

  uint64_t v33 = v22;
  uint64_t result = kRTCReportingUserInfoServiceName;
  if (!kRTCReportingUserInfoServiceName) {
    goto LABEL_18;
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingUserInfoServiceName);
  uint64_t v25 = v24;
  unsigned int v26 = [a1 isOneToOneModeEnabled];
  uint64_t v27 = 0x6E6F6973736573LL;
  if (v26) {
    uint64_t v27 = 0x7961776F7774LL;
  }
  unint64_t v28 = 0xE700000000000000LL;
  uint64_t v35 = &type metadata for String;
  if (v26) {
    unint64_t v28 = 0xE600000000000000LL;
  }
  v34[0] = v27;
  v34[1] = v28;
  sub_1001FC0F0((uint64_t)v34, v23, v25);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
    uint64_t v31 = v30;
    uint64_t v32 = v33;
    uint64_t v35 = (void *)sub_1001AFF14(&qword_100447B60);
    v34[0] = v32;
    sub_1001FC0F0((uint64_t)v34, v29, v31);
    goto LABEL_13;
  }

void sub_1001C114C(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v10 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  uint64_t v11 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, v15, 32LL, 0LL);
  uint64_t v12 = sub_1001C9FB4(v9, *v11);
  if (v12)
  {
    id v13 = (void *)v12;
    swift_endAccess(v15);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    if ((a3 & 1) != 0) {
      sub_1002A433C();
    }
    else {
      sub_1002A4348();
    }
  }

  else
  {
    swift_endAccess(v15);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }

void sub_1001C1328()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001B1234();
  sub_1001C74DC();
  __chkstk_darwin(v8);
  sub_1001B0F00();
  uint64_t v11 = v10 - v9;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v2);
  id v12 = v4;
  id v13 = v6;
  sub_1001C1420();

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v11, v7);
  sub_1001B0FF8();
}

void sub_1001C1420()
{
  uint64_t v25 = v2;
  uint64_t v22 = v3;
  uint64_t v23 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001C7360();
  uint64_t v8 = sub_1001C72E0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001C7290();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  sub_1001C7334();
  __chkstk_darwin(v10);
  id v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1001B1234();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v24 = *(void *)&v0[OBJC_IVAR___CSDRTCReporter_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6,  v13);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = swift_allocObject(v22, v17 + v15, v16 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v0;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))( v18 + v17,  (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v13);
  uint64_t v33 = v23;
  uint64_t v34 = v18;
  uint64_t v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  uint64_t v31 = sub_1002356BC;
  uint64_t v32 = v25;
  id v19 = sub_1001C7350();
  uint64_t v20 = v0;
  sub_1001C7348();
  unint64_t v28 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72AC(v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v1, v19);
  _Block_release(v19);
  sub_1001C72CC();
  sub_1001C73DC();
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_1001C15E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo;
  sub_1001C746C(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, (uint64_t)v9);
  if (!*(void *)(*(void *)v5 + 16LL)) {
    return swift_endAccess(v9);
  }
  sub_1001D7184(a2);
  if ((v6 & 1) == 0) {
    return swift_endAccess(v9);
  }
  uint64_t v7 = swift_endAccess(v9);
  return a3(v7);
}

uint64_t sub_1001C1680(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v7);
  uint64_t v11 = &v30[-v10 - 8];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v14);
  uint64_t v18 = &v30[-v17 - 8];
  id v19 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  uint64_t v20 = (uint64_t *)(a1 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_conversationGroupUUIDToCallUUID, v30, 32LL, 0LL);
  sub_1001C9FBC((uint64_t)v16, *v20, (uint64_t)v11);
  if (sub_1001AB0AC((uint64_t)v11, 1LL, v12) == 1)
  {
    sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_10044A400);
    swift_endAccess(v30);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v18, v11, v12);
    swift_endAccess(v30);
    uint64_t v22 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v22(v16, v12);
    uint64_t v23 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions);
    swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_callUUIDToGFTCallReportingSessions, v30, 32LL, 0LL);
    uint64_t v24 = sub_1001C9FB4(v18, *v23);
    if (v24)
    {
      uint64_t v25 = (void *)v24;
      swift_endAccess(v30);
      id v26 = [a2 report];
      id v27 = [v26 conversationID];

      if (v27)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

        uint64_t v28 = 0LL;
      }

      else
      {
        uint64_t v28 = 1LL;
      }

      sub_1001A9670((uint64_t)v9, v28, 1LL, v12);
      sub_1001C191C(a3, v25, (uint64_t)v9);

      sub_1001C6CE4((uint64_t)v9, (uint64_t *)&unk_10044A400);
    }

    else
    {
      swift_endAccess(v30);
    }

    return ((uint64_t (*)(_BYTE *, uint64_t))v22)(v18, v12);
  }

uint64_t sub_1001C191C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = *(void **)(v4 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)(v15);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    uint64_t v20 = *(void *)(a1 + 16);
    if (v20)
    {
      uint64_t v21 = a1;
      swift_bridgeObjectRetain(a1);
      uint64_t v22 = 0LL;
      do
      {
        uint64_t v23 = *(void *)(v21 + 8 * v22 + 32);
        sub_1001C6DC4(v31, (uint64_t)v8, (uint64_t *)&unk_10044A400);
        if (sub_1001AB0AC((uint64_t)v8, 1LL, v9) == 1)
        {
          swift_bridgeObjectRetain(v23);
          sub_1001C6CE4((uint64_t)v8, (uint64_t *)&unk_10044A400);
        }

        else
        {
          uint64_t v24 = v29;
          (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v11, v8, v9);
          uint64_t v25 = swift_bridgeObjectRetain(v23);
          uint64_t v26 = UUID.uuidString.getter(v25);
          uint64_t v35 = &type metadata for String;
          *(void *)&__int128 v34 = v26;
          *((void *)&v34 + 1) = v27;
          sub_1001B03EC(&v34, v33);
          swift_isUniquelyReferenced_nonNull_native(v23);
          uint64_t v32 = v23;
          sub_1001FF208((uint64_t)v33, 4475203LL, 0xE300000000000000LL);
          uint64_t v23 = v32;
          swift_bridgeObjectRelease(0x8000000000000000LL);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
        }

        ++v22;
        uint64_t v28 = (void *)sub_1001C6230(v23);
        swift_bridgeObjectRelease(v23);
        sub_1001BEC4C(v30, v28);
        swift_bridgeObjectRelease(v28);
      }

      while (v20 != v22);
      return swift_bridgeObjectRelease(v21);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1001C1BBC()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1001C7360();
  uint64_t v6 = sub_1001C72E0(v5);
  __chkstk_darwin(v6);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v8 = sub_1001C7370(v2, 32LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v8 + 24) = v0;
  sub_1001C7350();
  id v9 = v4;
  id v10 = v0;
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72F8(v11);
  sub_1001C7424();
  sub_1001C7488();
  sub_1001C72CC();
  sub_1001C7388();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001C1CE0(void *a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v52 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - v13;
  __chkstk_darwin(v12);
  id v53 = (char *)&v50 - v15;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v23 = [a1 dateConnected];
  if (!v23)
  {
    sub_1001A9670((uint64_t)v22, 1LL, 1LL, v16);
    goto LABEL_6;
  }

  uint64_t v24 = v23;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v19, v16);
  sub_1001A9670((uint64_t)v22, 0LL, 1LL, v16);
  if (sub_1001AB0AC((uint64_t)v22, 1LL, v16) == 1)
  {
LABEL_6:
    uint64_t v29 = &qword_100447EA0;
    uint64_t v30 = (uint64_t)v22;
    goto LABEL_7;
  }

  sub_1001C6CE4((uint64_t)v22, &qword_100447EA0);
  id v25 = [a1 sessionUUID];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  swift_bridgeObjectRelease(v28);
  if (sub_1001AB0AC((uint64_t)v8, 1LL, v9) != 1)
  {
    uint64_t v32 = v53;
    uint64_t v31 = v54;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v8, v9);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v33(v14, v32, v9);
    id v34 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    sub_1001A9670((uint64_t)v6, 0LL, 1LL, v9);
    swift_beginAccess(v51 + OBJC_IVAR___CSDRTCReporter_idsSessionUUIDToChatUUIDs, v55, 33LL, 0LL);
    sub_1001FC248((uint64_t)v6, (uint64_t)v14);
    swift_endAccess(v55);
    id v35 = sub_1001705A4();
    uint64_t v36 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v37 = swift_allocObject(v36, 112LL, 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
    v33(v14, v32, v9);
    uint64_t v38 = String.init<A>(reflecting:)(v14, v9);
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    unint64_t v41 = sub_1001B2330();
    *(void *)(v37 + 64) = v41;
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v40;
    id v42 = [a1 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

    __int128 v43 = v52;
    v33(v52, v14, v9);
    uint64_t v44 = String.init<A>(reflecting:)(v43, v9);
    uint64_t v46 = v45;
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
    uint64_t v48 = v47(v14, v9);
    *(void *)(v37 + 96) = &type metadata for String;
    *(void *)(v37 + 104) = v41;
    *(void *)(v37 + 72) = v44;
    *(void *)(v37 + 80) = v46;
    uint64_t v49 = static os_log_type_t.default.getter(v48);
    os_log(_:dso:log:type:_:)( "recorded mapping for IDS session %@ corresponding to call %@",  60LL,  2LL,  &_mh_execute_header,  v35,  v49,  v37);

    swift_bridgeObjectRelease(v37);
    v47(v32, v9);
    return;
  }

  uint64_t v29 = (uint64_t *)&unk_10044A400;
  uint64_t v30 = (uint64_t)v8;
LABEL_7:
  sub_1001C6CE4(v30, v29);
}

void sub_1001C21C0()
{
  uint64_t v3 = v2;
  v21[0] = v4;
  uint64_t v5 = sub_1001C7360();
  uint64_t v6 = sub_1001C72E0(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = sub_1001C7290();
  v21[2] = *(void *)(v7 - 8);
  v21[3] = v7;
  sub_1001C7334();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1001B1234();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)(v0 + OBJC_IVAR___CSDRTCReporter_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v3, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_1003DE9E0, v17 + 8, v15 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v0;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  uint64_t v19 = v21[0];
  *(void *)(v18 + v17) = v21[0];
  v21[10] = sub_1001C6D84;
  v21[11] = v18;
  v21[6] = _NSConcreteStackBlock;
  v21[7] = 1107296256LL;
  v21[8] = sub_1002356BC;
  v21[9] = &unk_1003DE9F8;
  sub_1001C7350();
  sub_1001C74C4();
  swift_bridgeObjectRetain(v19);
  sub_1001C7348();
  uint64_t v21[5] = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72AC(v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v1, v16);
  sub_1001C7488();
  sub_1001C72CC();
  sub_1001C73DC();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001C23A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - v17;
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_idsSessionUUIDToChatUUIDs, v47, 33LL, 0LL);
  sub_1001FD618(a2);
  swift_endAccess(v47);
  if (sub_1001AB0AC((uint64_t)v11, 1LL, v12) == 1)
  {
    sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_10044A400);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_callUUIDToCallReportingSessions, v47, 33LL, 0LL);
    sub_1001FD4D4((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, v42, (uint64_t)v43);
    uint64_t v27 = v26;
    swift_endAccess(v47);
    if (v27)
    {
      id v45 = sub_1001705A4();
      uint64_t v28 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v29 = swift_allocObject(v28, 112LL, 7LL);
      uint64_t v46 = a3;
      uint64_t v30 = (void *)v29;
      *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v31(v16, a2, v12);
      uint64_t v32 = String.init<A>(reflecting:)(v16, v12);
      uint64_t v44 = a1;
      uint64_t v34 = v33;
      v30[7] = &type metadata for String;
      unint64_t v35 = sub_1001B2330();
      __int128 v43 = v27;
      unint64_t v36 = v35;
      v30[8] = v35;
      void v30[4] = v32;
      v30[5] = v34;
      v31(v16, (uint64_t)v18, v12);
      uint64_t v37 = String.init<A>(reflecting:)(v16, v12);
      v30[12] = &type metadata for String;
      v30[13] = v36;
      v30[9] = v37;
      v30[10] = v38;
      uint64_t v39 = static os_log_type_t.default.getter(v37);
      uint64_t v40 = v45;
      os_log(_:dso:log:type:_:)( "received an IDS metrics report for IDS session %@ corresponding to call %@",  74LL,  2LL,  &_mh_execute_header,  v45,  v39,  v30);

      swift_bridgeObjectRelease(v30);
      sub_1001A9670((uint64_t)v9, 1LL, 1LL, v12);
      unint64_t v41 = v43;
      sub_1001C191C(v46, v43, (uint64_t)v9);

      sub_1001C6CE4((uint64_t)v9, (uint64_t *)&unk_10044A400);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }

void sub_1001C275C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v46 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v46 - v14;
  id v16 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

  uint64_t v17 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions, v49, 32LL, 0LL);
  uint64_t v18 = (void *)sub_1001C9FB4(v15, *v17);
  if (v18)
  {
    uint64_t v48 = v18;
    swift_endAccess(v49);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v15, v6);
    id v20 = sub_1001705A4();
    uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v22 = swift_allocObject(v21, 112LL, 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
    id v23 = [a2 UUID];
    id v47 = a2;
    id v24 = v23;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    uint64_t v25 = String.init<A>(reflecting:)(v10, v6);
    uint64_t v27 = v26;
    v19(v13, v6);
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v28 = sub_1001B2330();
    *(void *)(v22 + 64) = v28;
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v27;
    v49[0] = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v29 = sub_1001AFF14(&qword_100447B60);
    uint64_t v30 = String.init<A>(reflecting:)(v49, v29);
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v28;
    *(void *)(v22 + 72) = v30;
    *(void *)(v22 + 80) = v31;
    uint64_t v32 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)( "received conversation uuid: %@ handoff report: %@",  49LL,  2LL,  &_mh_execute_header,  v20,  v32,  v22);

    swift_bridgeObjectRelease(v22);
    id v33 = [v47 report];
    uint64_t v34 = (void *)sub_1001C2B18(a3, v33);

    if (v34[2])
    {
      unint64_t v35 = v48;
      sub_1001BEC4C(v48, v34);
      swift_bridgeObjectRelease(v34);
    }

    else
    {
      swift_bridgeObjectRelease(v34);
    }
  }

  else
  {
    swift_endAccess(v49);
    unint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    v36(v15, v6);
    id v37 = sub_1001705A4();
    uint64_t v38 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
    *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    id v40 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    uint64_t v41 = String.init<A>(reflecting:)(v10, v6);
    uint64_t v43 = v42;
    v36(v13, v6);
    *(void *)(v39 + 56) = &type metadata for String;
    unint64_t v44 = sub_1001B2330();
    *(void *)(v39 + 64) = v44;
    *(void *)(v39 + 32) = v41;
    *(void *)(v39 + 40) = v43;
    uint64_t v45 = static os_log_type_t.default.getter(v44);
    os_log(_:dso:log:type:_:)( "Dropping handoff report, could not find session for conversation uuid %@",  72LL,  2LL,  &_mh_execute_header,  v37,  v45,  v39);

    swift_bridgeObjectRelease(v39);
  }

uint64_t sub_1001C2B18(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v5);
  uint64_t v107 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v108 - 8);
  uint64_t v8 = __chkstk_darwin(v108);
  id v106 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v104 = (char *)&v103 - v10;
  uint64_t v11 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v11);
  uint64_t v112 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v113 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v115 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v103 - v17;
  __chkstk_darwin(v16);
  id v20 = (char *)&v103 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v24 = (uint64_t *)((char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  *id v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) == 0)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  uint64_t v105 = v7;
  uint64_t v123 = &_swiftEmptyDictionarySingleton;
  uint64_t v124 = &_swiftEmptyDictionarySingleton;
  id v27 = sub_1001705A4();
  uint64_t v28 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
  *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  id v30 = [a2 timebase];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);

  uint64_t v31 = v113;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v18, v20, v13);
  uint64_t v32 = String.init<A>(reflecting:)(v18, v13);
  uint64_t v34 = v33;
  unint64_t v35 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v111 = v20;
  uint64_t v114 = v35;
  v35(v20, v13);
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v36 = sub_1001B2330();
  *(void *)(v29 + 64) = v36;
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  uint64_t v37 = static os_log_type_t.default.getter(v36);
  os_log(_:dso:log:type:_:)("handoffuserInfo timebase: %@", 28LL, 2LL, &_mh_execute_header, v27, v37, v29);

  swift_bridgeObjectRelease(v29);
  uint64_t v38 = a1 + 64;
  uint64_t v39 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v40 = -1LL;
  if (v39 < 64) {
    uint64_t v40 = ~(-1LL << v39);
  }
  unint64_t v41 = v40 & *(void *)(a1 + 64);
  int64_t v117 = (unint64_t)(v39 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v42 = 0LL;
  uint64_t v116 = (char *)&type metadata for Any + 8;
  uint64_t v43 = (uint64_t)v112;
  uint64_t v44 = v31;
  uint64_t v110 = a2;
  uint64_t v109 = a1 + 64;
  while (1)
  {
    if (v41)
    {
      unint64_t v45 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      int64_t v118 = v42;
      unint64_t v46 = v45 | (v42 << 6);
      goto LABEL_25;
    }

    int64_t v47 = v42 + 1;
    if (__OFADD__(v42, 1LL))
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    if (v47 >= v117) {
      goto LABEL_42;
    }
    unint64_t v48 = *(void *)(v38 + 8 * v47);
    int64_t v49 = v42 + 1;
    if (!v48)
    {
      int64_t v49 = v42 + 2;
      if (v42 + 2 >= v117) {
        goto LABEL_42;
      }
      unint64_t v48 = *(void *)(v38 + 8 * v49);
      if (!v48)
      {
        int64_t v49 = v42 + 3;
        if (v42 + 3 >= v117) {
          goto LABEL_42;
        }
        unint64_t v48 = *(void *)(v38 + 8 * v49);
        if (!v48)
        {
          int64_t v49 = v42 + 4;
          if (v42 + 4 >= v117) {
            goto LABEL_42;
          }
          unint64_t v48 = *(void *)(v38 + 8 * v49);
          if (!v48)
          {
            int64_t v49 = v42 + 5;
            if (v42 + 5 >= v117) {
              goto LABEL_42;
            }
            unint64_t v48 = *(void *)(v38 + 8 * v49);
            if (!v48) {
              break;
            }
          }
        }
      }
    }

void sub_1001C35C0()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1001C7360();
  sub_1001C74DC();
  __chkstk_darwin(v8);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v9);
  sub_1001B10F0();
  uint64_t v10 = (void *)sub_1001C7370((uint64_t)&unk_1003DE940, 48LL);
  v10[2] = v0;
  v10[3] = v3;
  v10[4] = v7;
  v10[5] = v5;
  sub_1001C7350();
  sub_1001C750C();
  id v11 = v3;
  sub_1001C7478();
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72F8(v12);
  sub_1001C743C();
  sub_1001C74EC();
  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001C7388();
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_1001C3700(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v34[-v14 - 8];
  __chkstk_darwin(v13);
  uint64_t v17 = &v34[-v16 - 8];
  id v18 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  uint64_t v19 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions, v34, 32LL, 0LL);
  uint64_t v20 = sub_1001C9FB4(v17, *v19);
  if (v20)
  {
    id v21 = (id)v20;
    swift_endAccess(v34);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v17, v8);
    id v22 = [a2 report];
    uint64_t v23 = sub_1001C3974(a3, a4, v22);

    sub_1001BEC4C(v21, (void *)v23);
  }

  else
  {
    swift_endAccess(v34);
    id v24 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
    v24(v17, v8);
    id v21 = sub_1001705A4();
    uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v23 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    id v26 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v15, v8);
    uint64_t v27 = String.init<A>(reflecting:)(v12, v8);
    uint64_t v29 = v28;
    v24(v15, v8);
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v30 = sub_1001B2330();
    *(void *)(v23 + 64) = v30;
    *(void *)(v23 + 32) = v27;
    *(void *)(v23 + 40) = v29;
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)( "Dropping ConnectionSetup report, could not find session for conversation uuid %@",  80LL,  2LL,  &_mh_execute_header,  v21,  v31,  v23);
  }

  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_1001C3974(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v36 = a2;
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (uint64_t *)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void **)(v3 + OBJC_IVAR___CSDRTCReporter_queue);
  *id v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v39 = a1;
  uint64_t v40 = &_swiftEmptyDictionarySingleton;
  if (!a3)
  {
    sub_1001A9670((uint64_t)v11, 1LL, 1LL, v12);
    swift_bridgeObjectRetain(a1);
LABEL_8:
    sub_1001C6CE4((uint64_t)v11, (uint64_t *)&unk_10044A400);
    goto LABEL_10;
  }

  swift_bridgeObjectRetain(a1);
  id v22 = [a3 conversationID];
  if (v22)
  {
    uint64_t v23 = v22;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v24 = 1LL;
  }

  sub_1001A9670((uint64_t)v9, v24, 1LL, v12);
  sub_1001C6C08((uint64_t)v9, (uint64_t)v11);
  uint64_t v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v14, v11, v12);
  uint64_t v38 = (void *)v12;
  id v26 = sub_1001B236C(v37);
  (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v26, v14, v12);
  sub_1001FC0F0((uint64_t)v37, 4475203LL, 0xE300000000000000LL);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
LABEL_10:
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v38 = &type metadata for Int;
  v37[0] = 6LL;
  sub_1001FC0F0((uint64_t)v37, v27, v28);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v38 = &type metadata for Int;
  v37[0] = v36;
  sub_1001FC0F0((uint64_t)v37, v29, v30);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
    uint64_t v33 = v32;
    uint64_t v34 = v39;
    uint64_t v38 = (void *)sub_1001AFF14(&qword_100447B60);
    v37[0] = v34;
    sub_1001FC0F0((uint64_t)v37, v31, v33);
    return (uint64_t)v40;
  }

void sub_1001C3D64()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001C7360();
  uint64_t v8 = sub_1001C72E0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001C7290();
  uint64_t v10 = sub_1001C73B4(v9);
  __chkstk_darwin(v10);
  sub_1001B10F0();
  uint64_t v11 = (void *)sub_1001C7370(v2, 40LL);
  v11[2] = v0;
  v11[3] = v4;
  v11[4] = v6;
  sub_1001C7350();
  sub_1001C750C();
  id v12 = v4;
  sub_1001C7478();
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72AC(v13);
  sub_1001C7454();
  sub_1001C74EC();
  sub_1001C72CC();
  sub_1001C7378();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001C3E90(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = &v35[-v12 - 8];
  __chkstk_darwin(v11);
  uint64_t v15 = &v35[-v14 - 8];
  id v16 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

  uint64_t v17 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationReportingSessions, v35, 32LL, 0LL);
  uint64_t v18 = sub_1001C9FB4(v15, *v17);
  if (!v18)
  {
    swift_endAccess(v35);
    uint64_t v25 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v25(v15, v6);
    id v26 = sub_1001705A4();
    uint64_t v27 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    a3 = swift_allocObject(v27, 72LL, 7LL);
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    id v28 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v13, v6);
    uint64_t v29 = String.init<A>(reflecting:)(v10, v6);
    uint64_t v31 = v30;
    v25(v13, v6);
    *(void *)(a3 + 56) = &type metadata for String;
    unint64_t v32 = sub_1001B2330();
    *(void *)(a3 + 64) = v32;
    *(void *)(a3 + 32) = v29;
    *(void *)(a3 + 40) = v31;
    uint64_t v33 = static os_log_type_t.default.getter(v32);
    os_log(_:dso:log:type:_:)( "Dropping GroupActivities reports, could not find session for conversation uuid %@",  81LL,  2LL,  &_mh_execute_header,  v26,  v33,  a3);

LABEL_7:
    swift_bridgeObjectRelease(a3);
    return;
  }

  uint64_t v19 = (void *)v18;
  swift_endAccess(v35);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v15, v6);
  uint64_t v20 = *(void *)(a3 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v21 = 0LL;
    do
    {
      uint64_t v22 = *(void *)(a3 + 8 * v21++ + 32);
      swift_bridgeObjectRetain(v22);
      id v23 = [a2 report];
      uint64_t v24 = (void *)sub_1001C4148(v22, v23);

      swift_bridgeObjectRelease(v22);
      sub_1001BEC4C(v19, v24);
      swift_bridgeObjectRelease(v24);
    }

    while (v20 != v21);

    goto LABEL_7;
  }
}

uint64_t sub_1001C4148(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = *(void **)(v2 + OBJC_IVAR___CSDRTCReporter_queue);
  void *v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v1_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v17);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v38 = a1;
  uint64_t v39 = &_swiftEmptyDictionarySingleton;
  if (!a2)
  {
    sub_1001A9670((uint64_t)v10, 1LL, 1LL, v11);
    swift_bridgeObjectRetain(a1);
LABEL_8:
    sub_1001C6CE4((uint64_t)v10, (uint64_t *)&unk_10044A400);
    goto LABEL_10;
  }

  swift_bridgeObjectRetain(a1);
  id v21 = [a2 conversationID];
  if (v21)
  {
    uint64_t v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = 1LL;
  }

  sub_1001A9670((uint64_t)v8, v23, 1LL, v11);
  sub_1001C6C08((uint64_t)v8, (uint64_t)v10);
  uint64_t v24 = v35;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v13, v10, v11);
  uint64_t v37 = (void *)v11;
  uint64_t v25 = sub_1001B236C(v36);
  (*(void (**)(void *, char *, uint64_t))(v24 + 16))(v25, v13, v11);
  sub_1001FC0F0((uint64_t)v36, 4475203LL, 0xE300000000000000LL);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
LABEL_10:
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v37 = &type metadata for Int;
  v36[0] = 5LL;
  sub_1001FC0F0((uint64_t)v36, v26, v27);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v37 = &type metadata for Int;
  v36[0] = 7LL;
  sub_1001FC0F0((uint64_t)v36, v28, v29);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    uint64_t v37 = (void *)sub_1001AFF14(&qword_100447B60);
    v36[0] = v33;
    sub_1001FC0F0((uint64_t)v36, v30, v32);
    return (uint64_t)v39;
  }

uint64_t sub_1001C44B0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_1001AFF14(&qword_100447B60);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v9);
  id v11 = a3;
  id v12 = a5;
  id v13 = a1;
  sub_1001C3D64();

  return sub_1001C73C8(v10);
}

uint64_t sub_1001C4548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C456C(3u, a2, a3);
}

uint64_t sub_1001C456C(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v31 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v30 = &type metadata for Int;
  v29[0] = 4LL;
  sub_1001FC0F0((uint64_t)v29, v11, v12);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v30 = &type metadata for Int;
  v29[0] = a1;
  sub_1001FC0F0((uint64_t)v29, v13, v14);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (!kRTCReportingMessageParametersPayload)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
  uint64_t v17 = v16;
  uint64_t v18 = sub_1001AFF14(&qword_100447B88);
  uint64_t inited = swift_initStackObject(v18, v28);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(inited + 32) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x800000010036C0D0LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = a2;
  *(void *)(inited + 56) = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v30 = (void *)sub_1001AFF14((uint64_t *)&unk_100447B90);
  v29[0] = v20;
  sub_1001FC0F0((uint64_t)v29, v15, v17);
  uint64_t v21 = UUID.init()();
  uint64_t v22 = UUID.uuidString.getter(v21);
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v25 = (void *)sub_1001C5AE8( v22,  v24,  0LL,  0xD000000000000012LL,  0x800000010036C0F0LL,  0xD000000000000021LL,  0x800000010036C0A0LL,  0LL);
  swift_bridgeObjectRelease(v24);
  uint64_t v26 = v31;
  if (v25)
  {
    sub_1001BEC4C(v25, v31);
  }

  return swift_bridgeObjectRelease(v26);
}

uint64_t sub_1001C47F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C456C(4u, a2, a3);
}

uint64_t sub_1001C4834(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = v6;
  id v8 = a3;
  id v9 = a1;
  sub_1001C48EC();

  return sub_1001C73C8(v7);
}

uint64_t sub_1001C48AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C456C(5u, a2, a3);
}

void sub_1001C48EC()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001C7360();
  uint64_t v8 = sub_1001C72E0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001C7290();
  uint64_t v10 = sub_1001C73B4(v9);
  __chkstk_darwin(v10);
  sub_1001B10F0();
  uint64_t v11 = (void *)sub_1001C7370(v2, 40LL);
  v11[2] = v0;
  v11[3] = v6;
  v11[4] = v4;
  sub_1001C7350();
  sub_1001C74C4();
  sub_1001C7478();
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72AC(v12);
  sub_1001C740C();
  sub_1001C7488();
  sub_1001C72CC();
  sub_1001C7378();
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_1001C4A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C456C(6u, a2, a3);
}

void sub_1001C4A54()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1001C7360();
  uint64_t v6 = sub_1001C72E0(v5);
  __chkstk_darwin(v6);
  sub_1001C7290();
  sub_1001C73A0();
  __chkstk_darwin(v7);
  sub_1001B10F0();
  uint64_t v8 = sub_1001C7370(v2, 32LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v8 + 24) = v4;
  sub_1001C7350();
  sub_1001C74C4();
  id v9 = v4;
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72F8(v10);
  sub_1001C7424();
  sub_1001C7488();
  sub_1001C72CC();
  sub_1001C7388();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001C4B74(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v6 = sub_1001B1234();
  __chkstk_darwin(v6);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v9 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  uint64_t v10 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  sub_1001C746C(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, (uint64_t)v15);
  uint64_t v11 = sub_1001C9FB4(v8, *v10);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    swift_endAccess(v15);
    uint64_t v13 = sub_1001C74CC();
    a3(v13);
  }

  else
  {
    swift_endAccess(v15);
    sub_1001C74CC();
  }

void sub_1001C4CD8()
{
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001C7360();
  uint64_t v8 = sub_1001C72E0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001C7290();
  uint64_t v10 = sub_1001C73B4(v9);
  __chkstk_darwin(v10);
  sub_1001B10F0();
  uint64_t v11 = sub_1001C7370(v2, 33LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v11 + 24) = v6;
  *(_BYTE *)(v11 + 32) = v4;
  sub_1001C7350();
  sub_1001C74C4();
  id v12 = v6;
  sub_1001C7348();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  sub_1001C72AC(v13);
  sub_1001C740C();
  sub_1001C7488();
  sub_1001C72CC();
  sub_1001C7378();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001C4E00(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v10 = [a2 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  uint64_t v11 = (void *)(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_groupUUIDToConversationInfo, v15, 32LL, 0LL);
  uint64_t v12 = sub_1001C9FB4(v9, *v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    swift_endAccess(v15);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    sub_1002A43C4(a3 & 1);
  }

  else
  {
    swift_endAccess(v15);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }

void sub_1001C4F9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs);
  swift_beginAccess(a1 + OBJC_IVAR___CSDRTCReporter_callInfosPendingScoreForCallUUIDs, v25, 32LL, 0LL);
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain(a3);
  sub_1001CA028(a2, a3, v8);
  id v10 = v9;
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(a3);
  swift_endAccess(v25);
  if (v10 == (char *)1)
  {
    id v16 = sub_1001705A4();
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "UserScore: call UUID does not exist",  35LL,  2LL,  &_mh_execute_header,  v16,  v17,  _swiftEmptyArrayStorage);
  }

  else
  {
    if (v10)
    {
      *(_DWORD *)&v10[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_userScore] = a4;
      if (v12)
      {
        id v18 = v12;
        id v19 = v10;
        uint64_t v20 = (void *)sub_1001C51CC(v19, a2, a3);
        sub_1001BEC4C(v18, v20);
        swift_bridgeObjectRelease(v20);
        swift_beginAccess(v7, v25, 33LL, 0LL);
        uint64_t v21 = (void *)sub_1001FD728();
        uint64_t v23 = v22;
        swift_endAccess(v25);

        sub_1001C6A68(v21, v23);
        return;
      }
    }

    else
    {
      if (v12)
      {
        id v13 = v12;
        id v14 = sub_1001705A4();
        uint64_t v15 = static os_log_type_t.default.getter(v14);
        os_log(_:dso:log:type:_:)( "UserScore: session RTCCSDCallInfo object was nil",  48LL,  2LL,  &_mh_execute_header,  v14,  v15,  _swiftEmptyArrayStorage);

        return;
      }

      id v10 = 0LL;
    }

    id v16 = sub_1001705A4();
    uint64_t v24 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "UserScore: session was RTCReporting object session was nil",  58LL,  2LL,  &_mh_execute_header,  v16,  v24,  _swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001C51CC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)&v32[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(v4 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v34 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v33 = &type metadata for Int;
  v32[0] = 2LL;
  sub_1001FC0F0((uint64_t)v32, v15, v16);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v33 = &type metadata for Int;
  v32[0] = 1LL;
  sub_1001FC0F0((uint64_t)v32, v17, v18);
  id v19 = (uint64_t *)(v4 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID);
  swift_beginAccess(v4 + OBJC_IVAR___CSDRTCReporter_relayDeviceRouteChangesByCallUUID, v32, 32LL, 0LL);
  uint64_t v20 = *v19;
  swift_bridgeObjectRetain(a3);
  uint64_t v21 = sub_1001C9FB8(a2, a3, v20);
  swift_endAccess(v32);
  swift_bridgeObjectRelease(a3);
  uint64_t v22 = *(void *)&a1[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges];
  *(void *)&a1[OBJC_IVAR____TtC13callservicesd14RTCCSDCallInfo_relayDeviceRouteChanges] = v21;
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = a1;
  uint64_t v24 = sub_1001C642C((unint64_t *)&unk_100447B78, type metadata accessor for RTCCSDCallInfo);

  if (!v24) {
    return (uint64_t)v34;
  }
  uint64_t v31 = v24;
  uint64_t result = kRTCReportingUserInfoServiceName;
  if (!kRTCReportingUserInfoServiceName) {
    goto LABEL_12;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingUserInfoServiceName);
  uint64_t v33 = &type metadata for String;
  v32[0] = 0xD000000000000021LL;
  v32[1] = 0x800000010036C0A0LL;
  sub_1001FC0F0((uint64_t)v32, v25, v26);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
    uint64_t v29 = v28;
    uint64_t v30 = v31;
    uint64_t v33 = (void *)sub_1001AFF14(&qword_100447B60);
    v32[0] = v30;
    sub_1001FC0F0((uint64_t)v32, v27, v29);
    return (uint64_t)v34;
  }

unint64_t sub_1001C54E8(void *a1)
{
  uint64_t v1 = 0x6E69706F7264LL;
  id v2 = [a1 provider];
  id v3 = [v2 identifier];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  if (v4 == 0xD00000000000002CLL && v6 == 0x800000010036C520LL)
  {
    swift_bridgeObjectRelease(0x800000010036C520LL);
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 0xD00000000000002CLL, 0x800000010036C520LL, 0LL);
    swift_bridgeObjectRelease(v6);
    if ((v7 & 1) == 0) {
      return 0xD000000000000012LL;
    }
  }

  return v1;
}

uint64_t sub_1001C55EC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  unsigned int v8 = [a1 isVideo];
  id v9 = [a1 uniqueProxyIdentifierUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  if (v8) {
    uint64_t v10 = 2LL;
  }
  else {
    uint64_t v10 = 1LL;
  }
  if (v8) {
    uint64_t v11 = 5LL;
  }
  else {
    uint64_t v11 = 4LL;
  }
  uint64_t v12 = nw_activity_create(22LL, v10);
  nw_activity_activate();
  swift_beginAccess(v2 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivity, v23, 33LL, 0LL);
  uint64_t v13 = swift_unknownObjectRetain(v12);
  sub_1001FE364(v13, (uint64_t)v7);
  swift_endAccess(v23);
  uint64_t v14 = nw_activity_create(22LL, v11);
  nw_activity_activate();
  swift_beginAccess(v2 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting, v23, 33LL, 0LL);
  uint64_t v15 = swift_unknownObjectRetain(v14);
  sub_1001FE364(v15, (uint64_t)v7);
  swift_endAccess(v23);
  id v16 = [(id)objc_opt_self(RTCReporting) newHierarchyTokenFromParentToken:0];
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  uint64_t v20 = sub_1001C5AE8( v17,  v18,  v16,  0xD000000000000012LL,  0x800000010036C0F0LL,  0xD000000000000024LL,  0x800000010036C6B0LL,  0LL);
  swift_unknownObjectRelease(v12);
  swift_unknownObjectRelease(v14);

  swift_bridgeObjectRelease(v19);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return v20;
}

uint64_t sub_1001C57F4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  id v12 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  uint64_t v13 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivity);
  swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivity, v41, 32LL, 0LL);
  sub_1001C9F7C((uint64_t)v11, *v13);
  uint64_t v15 = v14;
  swift_endAccess(v41);
  swift_unknownObjectRelease(v15);
  if (!v15)
  {
    uint64_t v16 = nw_activity_create(22LL, 3LL);
    nw_activity_activate();
    swift_beginAccess(v13, v41, 33LL, 0LL);
    uint64_t v17 = swift_unknownObjectRetain(v16);
    sub_1001FE364(v17, (uint64_t)v11);
    swift_endAccess(v41);
    swift_unknownObjectRelease(v16);
  }

  uint64_t v18 = (uint64_t *)(v3 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting);
  swift_beginAccess(v3 + OBJC_IVAR___CSDRTCReporter_uuidToNWActivityConnecting, v41, 32LL, 0LL);
  sub_1001C9F7C((uint64_t)v11, *v18);
  uint64_t v20 = v19;
  swift_endAccess(v41);
  swift_unknownObjectRelease(v20);
  if (!v20)
  {
    uint64_t v21 = nw_activity_create(22LL, 6LL);
    nw_activity_activate();
    swift_beginAccess(v18, v41, 33LL, 0LL);
    uint64_t v22 = swift_unknownObjectRetain(v21);
    sub_1001FE364(v22, (uint64_t)v11);
    swift_endAccess(v41);
    swift_unknownObjectRelease(v21);
  }

  id v23 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  uint64_t v39 = v11;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v9, v5);
  unint64_t v28 = sub_1001C54E8(a1);
  uint64_t v30 = v29;
  unsigned int v31 = [a1 isOneToOneModeEnabled];
  uint64_t v32 = v5;
  if (v31) {
    uint64_t v33 = 0x7961776F7774LL;
  }
  else {
    uint64_t v33 = 0x6E6F6973736573LL;
  }
  if (v31) {
    uint64_t v34 = 0xE600000000000000LL;
  }
  else {
    uint64_t v34 = 0xE700000000000000LL;
  }
  id v35 = [a1 report];
  uint64_t v36 = sub_1001C5AE8(v24, v26, v40, v28, v30, v33, v34, v35);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v34);

  v27(v39, v32);
  return v36;
}

uint64_t sub_1001C5AE8( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v94 = a7;
  id v95 = a8;
  uint64_t v93 = a6;
  uint64_t v96 = a4;
  uint64_t v97 = a5;
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v98 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v91 - v15;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v99 = *(void (***)(void, char *, uint64_t))(v17 - 8);
  __chkstk_darwin(v17);
  id v92 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (void *)((char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v23 = *(void **)(v8 + OBJC_IVAR___CSDRTCReporter_queue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v26 = sub_1001AFF14((uint64_t *)&unk_100447BA0);
  uint64_t inited = swift_initStackObject(v26, &v103);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10037B140;
  uint64_t result = kRTCReportingSessionInfoClientType;
  if (!kRTCReportingSessionInfoClientType)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingSessionInfoClientType);
  *(void *)(inited + 40) = v28;
  id v29 = [objc_allocWithZone(NSNumber) initWithChar:27];
  uint64_t v30 = sub_1001B4B94(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(inited + 72) = v30;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v29;
  uint64_t result = kRTCReportingSessionInfoClientVersion;
  if (!kRTCReportingSessionInfoClientVersion)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingSessionInfoClientVersion);
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v31;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = 3223088LL;
  *(void *)(inited + 104) = 0xE300000000000000LL;
  uint64_t result = kRTCReportingSessionInfoSessionID;
  if (!kRTCReportingSessionInfoSessionID)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingSessionInfoSessionID);
  *(void *)(inited + 136) = v32;
  id v33 = objc_msgSend(objc_allocWithZone(NSNumber), "initWithInteger:", String.hashValue.getter(a1, a2));
  *(void *)(inited + 16_Block_object_dispose(va, 8) = v30;
  *(void *)(inited + 144) = v33;
  uint64_t result = kRTCReportingSessionInfoBatchEvent;
  if (!kRTCReportingSessionInfoBatchEvent)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingSessionInfoBatchEvent);
  *(void *)(inited + 184) = v34;
  id v35 = [objc_allocWithZone(NSNumber) initWithBool:1];
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v30;
  *(void *)(inited + 192) = v35;
  uint64_t v104 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v36 = v99;
  if (a3)
  {
    uint64_t result = kRTCReportingSessionInfoHierarchyToken;
    if (!kRTCReportingSessionInfoHierarchyToken)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingSessionInfoHierarchyToken);
    uint64_t v39 = v38;
    uint64_t v101 = (void *)sub_1001B4B94(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
    v100[0] = a3;
    id v40 = a3;
    sub_1001FC0F0((uint64_t)v100, v37, v39);
  }

  uint64_t v41 = sub_1001AFF14(&qword_100447B88);
  uint64_t v42 = swift_initStackObject(v41, &v102);
  __int128 v91 = xmmword_10037B1B0;
  *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  uint64_t result = kRTCReportingUserInfoClientName;
  if (!kRTCReportingUserInfoClientName) {
    goto LABEL_29;
  }
  *(void *)(v42 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingUserInfoClientName);
  *(void *)(v42 + 40) = v43;
  uint64_t v44 = v97;
  *(void *)(v42 + 4_Block_object_dispose(va, 8) = v96;
  *(void *)(v42 + 56) = v44;
  uint64_t result = kRTCReportingUserInfoServiceName;
  uint64_t v45 = (uint64_t)v98;
  if (!kRTCReportingUserInfoServiceName)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  *(void *)(v42 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingUserInfoServiceName);
  *(void *)(v42 + 72) = v46;
  uint64_t v47 = v94;
  *(void *)(v42 + 80) = v93;
  *(void *)(v42 + 8_Block_object_dispose(va, 8) = v47;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v47);
  unint64_t v48 = (void *)Dictionary.init(dictionaryLiteral:)( v42,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (v95)
  {
    id v49 = [v95 conversationID];
    if (v49)
    {
      uint64_t v50 = v49;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

      uint64_t v51 = 0LL;
    }

    else
    {
      uint64_t v51 = 1LL;
    }

    uint64_t v52 = v92;
    sub_1001A9670(v45, v51, 1LL, v17);
    sub_1001C6C08(v45, (uint64_t)v16);
    ((void (**)(char *, char *, uint64_t))v36)[4](v52, v16, v17);
    uint64_t result = kRTCReportingSessionInfoSamplingUUIID;
    if (kRTCReportingSessionInfoSamplingUUIID)
    {
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingSessionInfoSamplingUUIID);
      uint64_t v55 = v54;
      uint64_t v56 = UUID.uuidString.getter();
      uint64_t v101 = &type metadata for String;
      v100[0] = v56;
      v100[1] = v57;
      sub_1001FC0F0((uint64_t)v100, v53, v55);
      ((void (*)(char *, uint64_t))v36[1])(v52, v17);
      goto LABEL_20;
    }

uint64_t sub_1001C6230(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDRTCReporter_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v20 = &_swiftEmptyDictionarySingleton;
  uint64_t result = kRTCReportingMessageParametersCategory;
  if (!kRTCReportingMessageParametersCategory)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersCategory);
  uint64_t v19 = &type metadata for Int;
  v18[0] = 3LL;
  sub_1001FC0F0((uint64_t)v18, v10, v11);
  uint64_t result = kRTCReportingMessageParametersType;
  if (!kRTCReportingMessageParametersType)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersType);
  uint64_t v19 = &type metadata for Int;
  v18[0] = 2LL;
  sub_1001FC0F0((uint64_t)v18, v12, v13);
  uint64_t result = kRTCReportingMessageParametersPayload;
  if (kRTCReportingMessageParametersPayload)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(kRTCReportingMessageParametersPayload);
    uint64_t v16 = v15;
    uint64_t v19 = (void *)sub_1001AFF14(&qword_100447B60);
    v18[0] = a1;
    swift_bridgeObjectRetain(a1);
    sub_1001FC0F0((uint64_t)v18, v14, v16);
    return (uint64_t)v20;
  }

void sub_1001C63D0(void *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  id v3 = [a1 provider];
  unsigned __int8 v4 = [v3 isSystemProvider];

  *a2 = v4;
}

uint64_t sub_1001C642C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t ObjectType = swift_getObjectType(v2);
  type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_1001B0F00();
  uint64_t v9 = v8 - v7;
  uint64_t v25 = v2;
  uint64_t v10 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter(v9);
  sub_1001C6B98(a1, a2);
  uint64_t v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v25, ObjectType, v12);
  unint64_t v15 = v14;
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v31[0] = 0LL;
  id v18 = [v16 JSONObjectWithData:isa options:4 error:v31];

  id v19 = *(id *)&v31[0];
  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(v31, v18);
    swift_unknownObjectRelease(v18);
  }

  else
  {
    uint64_t v20 = v19;
    uint64_t v21 = _convertNSErrorToError(_:)(v19);

    swift_willThrow();
    swift_errorRelease(v21);
    memset(v31, 0, sizeof(v31));
  }

  sub_1001C6DC4((uint64_t)v31, (uint64_t)&v28, (uint64_t *)&unk_1004474B0);
  if (v29)
  {
    sub_1001B03EC(&v28, v27);
    sub_1001B03FC((uint64_t)v27, (uint64_t)v26);
    uint64_t v22 = sub_1001AFF14(&qword_100447B60);
    sub_1001B0438(v27);
    uint64_t v23 = v30;
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v30 = 0LL;
  }

  sub_1001BB39C(v13, v15);
  swift_release(v11);
  sub_1001C6CE4((uint64_t)v31, (uint64_t *)&unk_1004474B0);
  return v23;
}

void sub_1001C6688()
{
}

uint64_t type metadata accessor for RTCReporter()
{
  return objc_opt_self(&OBJC_CLASS___CSDRTCReporter);
}

void *initializeBufferWithCopyOfBuffer for CallInfoPendingScore(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  unsigned __int8 v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for CallInfoPendingScore(id *a1)
{
}

uint64_t assignWithCopy for CallInfoPendingScore(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for CallInfoPendingScore(uint64_t a1, _OWORD *a2)
{
  unsigned __int8 v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CallInfoPendingScore(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallInfoPendingScore(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CallInfoPendingScore()
{
  return &type metadata for CallInfoPendingScore;
}

uint64_t sub_1001C6950()
{
  return sub_1001C6C74(44LL);
}

void sub_1001C6958()
{
}

uint64_t sub_1001C6968(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C6978(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_1001C6980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  if (a3)
  {
    v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  id v10 = [v3 initWithSessionInfo:v7.super.isa userInfo:v8.super.isa frameworksToCheck:v9.super.isa];

  return v10;
}

void sub_1001C6A68(void *a1, void *a2)
{
  if (a1 != (void *)1)
  {
  }

unint64_t sub_1001C6A98()
{
  unint64_t result = qword_100447B58;
  if (!qword_100447B58)
  {
    uint64_t v1 = sub_1001B4B94(255LL, &qword_100447B50, &OBJC_CLASS___RTCReporting_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100447B58);
  }

  return result;
}

void sub_1001C6AE8(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1001B0504(a2);
    atomic_store(sub_1001C7514(v3), a1);
  }

  sub_1001AA978();
}

id sub_1001C6B1C(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v7 = [a3 sendMessageWithDictionary:isa error:a2];

  return v7;
}

void sub_1001C6B98(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_1001C7514(v3), a1);
  }

  sub_1001AA978();
}

void sub_1001C6BCC()
{
}

void sub_1001C6BD8()
{
}

uint64_t sub_1001C6BFC()
{
  return sub_1001C4A14(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001C6C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C6C54()
{
  return sub_1001C48AC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001C6C64()
{
  return sub_1001C47F4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001C6C74(uint64_t a1)
{
  return sub_1001C74AC(v1, a1, 7LL);
}

uint64_t sub_1001C6CA4()
{
  return sub_1001C4548(v0[2], v0[3], v0[4]);
}

void sub_1001C6CB4()
{
}

uint64_t sub_1001C6CC0()
{
  return sub_1001C6E10(48LL);
}

uint64_t sub_1001C6CC8()
{
  return sub_1001C3700(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1001C6CD8()
{
}

void sub_1001C6CE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1001AFF14(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_1001AA978();
}

uint64_t sub_1001C6D1C()
{
  uint64_t v3 = v2 | 7;
  unint64_t v5 = (v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1001C73EC();
  sub_1001C74B4();
  swift_bridgeObjectRelease(*(void *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v3);
}

void sub_1001C6D84()
{
  uint64_t v1 = *(void *)(sub_1001B1234() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1001C23A0(*(void *)(v0 + 16), v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_1001C6DC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1001AFF14(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_1001AA978();
}

void sub_1001C6E04()
{
}

uint64_t sub_1001C6E10(uint64_t a1)
{
  return sub_1001C74AC(v1, a1, 7LL);
}

uint64_t sub_1001C6E44()
{
  return sub_1001C1680(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001C6E54()
{
  return sub_1001C6E70((uint64_t (*)(uint64_t))sub_1002A4390);
}

uint64_t sub_1001C6E64()
{
  return sub_1001C6E70((uint64_t (*)(uint64_t))sub_1002A4384);
}

uint64_t sub_1001C6E70(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_1001B1234() - 8) + 80LL);
  return sub_1001C15E4(*(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1001C6EB4()
{
  return sub_1001C6E70((uint64_t (*)(uint64_t))sub_1002A4378);
}

uint64_t sub_1001C6EC4()
{
  return sub_1001C6E70((uint64_t (*)(uint64_t))sub_1002A436C);
}

uint64_t sub_1001C6ED4()
{
  return sub_1001C6E70((uint64_t (*)(uint64_t))sub_1002A4360);
}

uint64_t sub_1001C6EE4()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  sub_1001C73EC();
  sub_1001C74B4();
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_1001C6F30()
{
  return sub_1001C6E70((uint64_t (*)(uint64_t))sub_1002A4354);
}

uint64_t sub_1001C6F3C()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_1001C6F60()
{
}

uint64_t sub_1001C6F6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001C6F90()
{
}

void sub_1001C6FB0()
{
}

void sub_1001C6FD0()
{
}

void sub_1001C6FF0()
{
}

uint64_t sub_1001C7010()
{
  return sub_1001C0914(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001C7018()
{
  return sub_1001C0368(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001C7020()
{
  return sub_1001C7480(v0, 24LL);
}

uint64_t sub_1001C702C()
{
  return sub_1001C0804(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1001C7034()
{
  return sub_1001C7480(v0, 32LL);
}

void sub_1001C7040()
{
}

void sub_1001C7048()
{
}

void sub_1001C7068()
{
}

void sub_1001C7088()
{
}

id sub_1001C7094()
{
  return sub_1001BFDE4(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1001C70A4()
{
}

void sub_1001C70B0()
{
}

void sub_1001C70BC()
{
}

void sub_1001C70C8(unsigned __int8 *a1@<X8>)
{
}

uint64_t sub_1001C70E4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001C7110()
{
}

void sub_1001C711C()
{
}

uint64_t sub_1001C7290()
{
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_1001C72AC(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_1001C72CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 144) + 8LL))(v1, v0);
}

uint64_t sub_1001C72E0(uint64_t result)
{
  *(void *)(v1 - 144) = *(void *)(result - 8);
  return result;
}

uint64_t sub_1001C72F8(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_1001C7318@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1001C7324()
{
  return sub_1001C6C74(40LL);
}

uint64_t sub_1001C732C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1));
}

  ;
}

uint64_t sub_1001C7340()
{
  return sub_1001AFF14(v0);
}

uint64_t sub_1001C7348()
{
  return static DispatchQoS.unspecified.getter();
}

void *sub_1001C7350()
{
  return _Block_copy((const void *)(v0 - 128));
}

uint64_t sub_1001C7358()
{
  return swift_release(*(void *)(v0 - 88));
}

uint64_t sub_1001C7360()
{
  return type metadata accessor for DispatchWorkItemFlags(0LL);
}

void sub_1001C7368(unint64_t *a1)
{
}

uint64_t sub_1001C7370(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_1001C7378()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 152));
}

uint64_t sub_1001C7388()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1001C7398()
{
  return sub_1001C6E10(40LL);
}

  ;
}

uint64_t sub_1001C73B4(uint64_t result)
{
  *(void *)(v1 - 152) = result;
  return result;
}

uint64_t sub_1001C73C8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1001C73DC()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 160) + 8LL))(v0, *(void *)(v1 - 152));
}

void sub_1001C73EC()
{
}

  ;
}

uint64_t sub_1001C740C()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

uint64_t sub_1001C7424()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

uint64_t sub_1001C743C()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

uint64_t sub_1001C7454()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

uint64_t sub_1001C746C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 32LL, 0LL);
}

uint64_t sub_1001C7478()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001C7480(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

void sub_1001C7488()
{
}

  ;
}

uint64_t sub_1001C74AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1001C74B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

id sub_1001C74C4()
{
  return v0;
}

uint64_t sub_1001C74CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

void sub_1001C74EC()
{
}

void sub_1001C74F4()
{
}

uint64_t sub_1001C74FC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

id sub_1001C750C()
{
  return v0;
}

uint64_t sub_1001C7514(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

ValueMetadata *type metadata accessor for HoldMusicDescriptor()
{
  return &type metadata for HoldMusicDescriptor;
}

unint64_t sub_1001C7530()
{
  return 0xD000000000000015LL;
}

unint64_t sub_1001C754C()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1001C7598()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallFilteringPreferencesContactsOnlyKey);
  uint64_t v2 = v1;
  char v3 = sub_1001C75DC(v0, v1, 0);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1001C75DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  NSString v5 = sub_1001C782C();
  id v6 = sub_1001C7838((uint64_t)v5, "objectForKey:");

  if (v6)
  {
    sub_1001C7844(v7, v8, v9, v10, v11, v12, v13, v14, v25);
    uint64_t v15 = swift_unknownObjectRelease(v6);
    sub_1001C7824(v15, v16, v17, v18, v19, v20, v21, v22, v26);
    NSString v23 = sub_1001C7850();
    a3 = [v3 BOOLForKey:v23];
  }

  else
  {
    sub_1001C7824(v7, v8, v9, v10, v11, v12, v13, v14, 0LL);
  }

  return a3 & 1;
}

uint64_t sub_1001C76B0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallFilteringPreferencesSilenceUnknownFaceTimeCallersKey);
  uint64_t v2 = v1;
  unsigned __int8 v3 = TUSilenceUnknownFaceTimeCallersDefaultValue();
  LOBYTE(v0) = sub_1001C75DC(v0, v2, v3);
  swift_bridgeObjectRelease(v2);
  return v0 & 1;
}

id sub_1001C773C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallFilteringPreferencesMaxJunkLevelKey);
  uint64_t v2 = v1;
  id v3 = sub_1001C7780(v0, v1, (id)1);
  swift_bridgeObjectRelease(v2);
  return v3;
}

id sub_1001C7780(uint64_t a1, uint64_t a2, id a3)
{
  NSString v5 = sub_1001C782C();
  id v6 = sub_1001C7838((uint64_t)v5, "objectForKey:");

  if (v6)
  {
    sub_1001C7844(v7, v8, v9, v10, v11, v12, v13, v14, v25);
    uint64_t v15 = swift_unknownObjectRelease(v6);
    sub_1001C7824(v15, v16, v17, v18, v19, v20, v21, v22, v26);
    NSString v23 = sub_1001C7850();
    a3 = [v3 integerForKey:v23];
  }

  else
  {
    sub_1001C7824(v7, v8, v9, v10, v11, v12, v13, v14, 0LL);
  }

  return a3;
}

uint64_t sub_1001C7824( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1001B14E8((uint64_t)&a9);
}

NSString sub_1001C782C()
{
  return String._bridgeToObjectiveC()();
}

id sub_1001C7838(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void *sub_1001C7844( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _bridgeAnyObjectToAny(_:)(&a9, v9);
}

NSString sub_1001C7850()
{
  return String._bridgeToObjectiveC()();
}

void sub_1001C785C(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v3 = [v2 activeConversationForCall:a1];

  sub_1001AA978();
}

uint64_t sub_1001C7928()
{
  return swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___CSDCallCenterObserver_delegate);
}

uint64_t sub_1001C7984(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1001C79D8()
{
  return *(void *)(v0 + OBJC_IVAR___CSDCallCenterObserver_triggers);
}

uint64_t sub_1001C7A28(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___CSDCallCenterObserver_triggers) = a1;
  return sub_1001C7A38();
}

uint64_t sub_1001C7A38()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CSDCallCenterObserver_notificationCenter);
  [v1 removeObserver:v0];
  if (qword_1004466A8 != -1) {
LABEL_51:
  }
    swift_once(&qword_1004466A8, sub_1001C809C);
  id v2 = off_100447BE0;
  id v3 = (char *)off_100447BE0 + 64;
  uint64_t v4 = 1LL << *((_BYTE *)off_100447BE0 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *((void *)off_100447BE0 + 8);
  uint64_t v7 = OBJC_IVAR___CSDCallCenterObserver_triggers;
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(off_100447BE0);
  int64_t v9 = 0LL;
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_21:
    if ((*(void *)(v2[7] + 8 * v11) & ~*(void *)(v0 + v7)) == 0LL) {
      [v1 addObserver:v0 selector:"handleTrigger:" name:*(void *)(v2[6] + 8 * v11) object:0];
    }
  }

  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  if (v12 >= v8) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)&v3[8 * v12];
  ++v9;
  if (v13) {
    goto LABEL_20;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v8) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)&v3[8 * v9];
  if (v13) {
    goto LABEL_20;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v8) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)&v3[8 * v9];
  if (v13)
  {
LABEL_20:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }

  int64_t v14 = v12 + 3;
  if (v14 < v8)
  {
    unint64_t v13 = *(void *)&v3[8 * v14];
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1LL)) {
          goto LABEL_49;
        }
        if (v9 >= v8) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)&v3[8 * v9];
        ++v14;
        if (v13) {
          goto LABEL_20;
        }
      }
    }

    int64_t v9 = v14;
    goto LABEL_20;
  }

uint64_t sub_1001C7DDC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  sub_1001B5D70(v1, *(void *)(v0 + OBJC_IVAR___CSDCallCenterObserver_callChanged + 8));
  return v1;
}

uint64_t sub_1001C7EA0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged + 8);
  *id v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

void sub_1001C7EF0()
{
}

id sub_1001C7F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (objc_class *)sub_1001B5DB8();
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___CSDCallCenterObserver_delegate], 0LL);
  *(void *)&v3[OBJC_IVAR___CSDCallCenterObserver_triggers] = 0LL;
  int64_t v8 = &v3[OBJC_IVAR___CSDCallCenterObserver_callChanged];
  *(void *)int64_t v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  int64_t v9 = &v3[OBJC_IVAR___CSDCallCenterObserver_callContainerClosure];
  *(void *)int64_t v9 = a1;
  *((void *)v9 + 1) = a2;
  *(void *)&v3[OBJC_IVAR___CSDCallCenterObserver_notificationCenter] = a3;
  v11.receiver = v3;
  v11.super_class = v7;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_1001C7FBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (objc_class *)sub_1001B5DB8();
  id v3 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  id v4 = objc_allocWithZone(v2);
  id v5 = sub_1001C7F18((uint64_t)sub_1001C8050, 0LL, (uint64_t)v3);
  uint64_t ObjectType = swift_getObjectType(v1);
  swift_deallocPartialClassInstance(v1, ObjectType, 64LL, 7LL);
  return v5;
}

id sub_1001C8050()
{
  return [(id)objc_opt_self(TUCallCenter) sharedInstance];
}

void *sub_1001C809C()
{
  unint64_t result = (void *)sub_1001C80B8();
  off_100447BE0 = result;
  return result;
}

uint64_t sub_1001C80B8()
{
  uint64_t v0 = sub_1001AFF14((uint64_t *)&unk_100447CD0);
  uint64_t inited = swift_initStackObject(v0, v68);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10037B7B0;
  uint64_t v67 = (void *)TUCallCenterCallStatusChangedNotification;
  *(void *)(inited + 32) = TUCallCenterCallStatusChangedNotification;
  *(void *)(inited + 40) = 1LL;
  id v66 = (void *)TUCallCenterVideoCallStatusChangedNotification;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = TUCallCenterVideoCallStatusChangedNotification;
  *(void *)(inited + 56) = 1LL;
  id v65 = (void *)TUCallCenterCallStartedConnectingNotification;
  *(void *)(inited + 64) = TUCallCenterCallStartedConnectingNotification;
  *(void *)(inited + 72) = 2LL;
  id v64 = (void *)TUCallCenterCallConnectedNotification;
  *(void *)(inited + 80) = TUCallCenterCallConnectedNotification;
  *(void *)(inited + 8_Block_object_dispose(va, 8) = 4LL;
  uint64_t v63 = (void *)TUCallIsUsingBasebandChangedNotification;
  *(void *)(inited + 96) = TUCallIsUsingBasebandChangedNotification;
  *(void *)(inited + 104) = 8LL;
  uint64_t v62 = (void *)TUCallCenterCallInvitationSentNotification;
  *(void *)(inited + 112) = TUCallCenterCallInvitationSentNotification;
  *(void *)(inited + 120) = 16LL;
  uint64_t v61 = (void *)TUCallCenterVideoCallInvitationSentNotification;
  *(void *)(inited + 12_Block_object_dispose(va, 8) = TUCallCenterVideoCallInvitationSentNotification;
  *(void *)(inited + 136) = 16LL;
  uint64_t v60 = (void *)TUCallCenterCallContinuityStateChangedNotification;
  *(void *)(inited + 144) = TUCallCenterCallContinuityStateChangedNotification;
  *(void *)(inited + 152) = 32LL;
  *(void *)(inited + 160) = @"CSDCallHasStartedOutgoingChangedNotification";
  *(void *)(inited + 16_Block_object_dispose(va, 8) = 64LL;
  uint64_t v59 = (void *)TUCallCenterCallWantsHoldMusicChangedNotification;
  *(void *)(inited + 176) = TUCallCenterCallWantsHoldMusicChangedNotification;
  *(void *)(inited + 184) = 128LL;
  uint64_t v58 = (void *)TUCallShouldSuppressRingingChangedNotification;
  *(void *)(inited + 192) = TUCallShouldSuppressRingingChangedNotification;
  *(void *)(inited + 200) = 256LL;
  uint64_t v57 = (void *)TUCallNeedsManualInCallSoundsChangedNotification;
  *(void *)(inited + 20_Block_object_dispose(va, 8) = TUCallNeedsManualInCallSoundsChangedNotification;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = 512LL;
  uint64_t v56 = (void *)TUCallAudioPropertiesChangedNotification;
  *(void *)(inited + 224) = TUCallAudioPropertiesChangedNotification;
  *(void *)(inited + 232) = 1024LL;
  *(void *)(inited + 240) = @"CSDCallHasAudioInterruptionChangedNotification";
  *(void *)(inited + 24_Block_object_dispose(va, 8) = 2048LL;
  *(void *)(inited + 256) = @"CSDCallRemoteParticipantJoinedNotification";
  *(void *)(inited + 264) = 4096LL;
  *(void *)(inited + 272) = @"CSDCallRemoteParticipantLeftNotification";
  *(void *)(inited + 280) = 0x2000LL;
  uint64_t v55 = (void *)TUCallMixesVoiceWithMediaChangedNotification;
  *(void *)(inited + 28_Block_object_dispose(va, 8) = TUCallMixesVoiceWithMediaChangedNotification;
  *(void *)(inited + 296) = 0x4000LL;
  uint64_t v54 = (void *)TUCallBluetoothAudioFormatChangedNotification;
  *(void *)(inited + 304) = TUCallBluetoothAudioFormatChangedNotification;
  *(void *)(inited + 312) = 0x8000LL;
  uint64_t v53 = (void *)TUCallIsUplinkMutedChangedNotification;
  *(void *)(inited + 320) = TUCallIsUplinkMutedChangedNotification;
  *(void *)(inited + 32_Block_object_dispose(va, 8) = 0x10000LL;
  uint64_t v52 = (void *)TUCallIsSharingScreenChangedNotification;
  *(void *)(inited + 336) = TUCallIsSharingScreenChangedNotification;
  *(void *)(inited + 344) = 0x40000LL;
  uint64_t v51 = (void *)TUCallScreenShareAttributesChangedNotification;
  *(void *)(inited + 352) = TUCallScreenShareAttributesChangedNotification;
  *(void *)(inited + 360) = 0x2000000LL;
  uint64_t v2 = (void *)TUCallCenterPendingMemberAddedNotification;
  *(void *)(inited + 36_Block_object_dispose(va, 8) = TUCallCenterPendingMemberAddedNotification;
  *(void *)(inited + 376) = 0x80000LL;
  id v3 = (void *)TUCallCenterHaveBeenLetInNotification;
  *(void *)(inited + 384) = TUCallCenterHaveBeenLetInNotification;
  *(void *)(inited + 392) = 0x100000LL;
  *(void *)(inited + 400) = @"CSDMediaPlaybackOnExternalDeviceChangedNotification";
  *(void *)(inited + 40_Block_object_dispose(va, 8) = 0x800000LL;
  *(void *)(inited + 4swift_weakDestroy(v0 + 16) = @"CSDCallTransmissionStateChangedNotification";
  *(void *)(inited + 424) = 0x1000000LL;
  id v4 = (void *)TUCallCenterIsScreeningChangedNotification;
  *(void *)(inited + 432) = TUCallCenterIsScreeningChangedNotification;
  *(void *)(inited + 440) = 0x4000000LL;
  id v5 = (void *)TUCallScreeningDidFinishAnnouncementNotification;
  *(void *)(inited + 44_Block_object_dispose(va, 8) = TUCallScreeningDidFinishAnnouncementNotification;
  *(void *)(inited + 456) = 0x8000000LL;
  *(void *)(inited + 464) = @"CSDCallPrefersToPlayDuringWombatChangedNotification";
  *(void *)(inited + 472) = 0x10000000LL;
  *(void *)(inited + 480) = @"CSDCallInjectingAudioChangedNotification";
  *(void *)(inited + 48_Block_object_dispose(va, 8) = 0xFFFFFFFF80000000LL;
  type metadata accessor for Name(0LL);
  uint64_t v50 = v6;
  type metadata accessor for Triggers(0LL);
  id v49 = v7;
  sub_1001A9F18( &qword_100446E00,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_10037A868);
  uint64_t v9 = v8;
  id v10 = v67;
  id v11 = v66;
  id v12 = v65;
  id v13 = v64;
  id v14 = v63;
  id v15 = v62;
  id v16 = v61;
  id v17 = v60;
  uint64_t v18 = @"CSDCallHasStartedOutgoingChangedNotification";
  id v19 = v59;
  id v20 = v58;
  id v21 = v57;
  id v22 = v56;
  unint64_t v23 = @"CSDCallHasAudioInterruptionChangedNotification";
  int64_t v24 = @"CSDCallRemoteParticipantJoinedNotification";
  unint64_t v25 = @"CSDCallRemoteParticipantLeftNotification";
  id v26 = v55;
  id v27 = v54;
  id v28 = v53;
  id v29 = v52;
  id v30 = v51;
  id v31 = v2;
  id v32 = v3;
  id v33 = @"CSDMediaPlaybackOnExternalDeviceChangedNotification";
  uint64_t v34 = @"CSDCallTransmissionStateChangedNotification";
  id v35 = v4;
  id v36 = v5;
  uint64_t v37 = @"CSDCallPrefersToPlayDuringWombatChangedNotification";
  uint64_t v38 = @"CSDCallInjectingAudioChangedNotification";
  uint64_t v39 = Dictionary.init(dictionaryLiteral:)(inited, v50, v49, v9);
  id v40 = TUCallCenterTVFirstNonMergedRemoteMemberAdded;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
  sub_1001FFB28( 0x20000000,  (int)v40,  isUniquelyReferenced_nonNull_native,  v42,  v43,  v44,  v45,  v46,  v48,  v49,  v50,  (uint64_t)v51,  (uint64_t)v52,  (uint64_t)v53,  (uint64_t)v54,  (uint64_t)v55,  (uint64_t)@"CSDCallRemoteParticipantLeftNotification",  (uint64_t)@"CSDCallRemoteParticipantJoinedNotification");

  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v39;
}

void sub_1001C850C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Notification.object.getter(v34, v4);
  if (!v34[3])
  {
    sub_1001B14E8((uint64_t)v34);
    goto LABEL_8;
  }

  uint64_t v7 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
  if ((swift_dynamicCast(&v33, v34, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
LABEL_8:
    if (qword_1004468F0 != -1) {
      swift_once(&qword_1004468F0, sub_100208418);
    }
    uint64_t v15 = qword_100454018;
    uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
    uint64_t v18 = String.init<A>(reflecting:)(v6, v2);
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    unint64_t v21 = sub_1001B2330();
    *(void *)(v17 + 64) = v21;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:type:_:)("Call not specified in notification %@", 37LL, 2LL, &_mh_execute_header, v15, v22, v17);
    uint64_t v23 = v17;
    goto LABEL_11;
  }

  uint64_t v8 = v33;
  if (qword_1004466A8 != -1) {
    swift_once(&qword_1004466A8, sub_1001C809C);
  }
  uint64_t v9 = off_100447BE0;
  id v10 = (void *)Notification.name.getter();
  sub_1001CA074((uint64_t)v10, (uint64_t)v9);
  uint64_t v12 = v11;
  char v14 = v13;

  if ((v14 & 1) == 0)
  {
    sub_1001C87E8((uint64_t)v8, v12);

    return;
  }

  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v24 = qword_100454018;
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v27 = String.init<A>(reflecting:)(v6, v2);
  uint64_t v29 = v28;
  *(void *)(v26 + 56) = &type metadata for String;
  unint64_t v30 = sub_1001B2330();
  *(void *)(v26 + 64) = v30;
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = v29;
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  os_log(_:dso:log:type:_:)( "Received notification %@ for unrecognized trigger",  49LL,  2LL,  &_mh_execute_header,  v24,  v31,  v26);

  uint64_t v23 = v26;
LABEL_11:
  swift_bridgeObjectRelease(v23);
}

void *sub_1001C87E8(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___CSDCallCenterObserver_delegate);
  if (result)
  {
    uint64_t v6 = result;
    if ([result respondsToSelector:"callCenterObserver:callChanged:"])
    {
      [v6 callCenterObserver:v2 callChanged:a1];
    }

    else if ([v6 respondsToSelector:"callsChangedForCallCenterObserver:"])
    {
      [v6 callsChangedForCallCenterObserver:v2];
    }

    unint64_t result = (void *)swift_unknownObjectRelease(v6);
  }

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged);
  if (v7)
  {
    uint64_t v8 = *(void *)(v2 + OBJC_IVAR___CSDCallCenterObserver_callChanged + 8);
    swift_retain(v8);
    v7(a1, a2);
    return (void *)sub_1001B5D3C((uint64_t)v7, v8);
  }

  return result;
}

void *sub_1001C88E4()
{
  uint64_t v0 = sub_1001AFF14((uint64_t *)&unk_100447CD0);
  uint64_t inited = swift_initStackObject(v0, &v11);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(void *)(inited + 32) = @"CSDSharePlayMediaDidHandoffNotification";
  *(void *)(inited + 40) = 0x200000LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = @"CSDSharePlayRemoteActivityDidChangeNotification";
  *(void *)(inited + 56) = 0x400000LL;
  type metadata accessor for Name(0LL);
  uint64_t v3 = v2;
  type metadata accessor for Triggers(0LL);
  uint64_t v5 = v4;
  sub_1001A9F18( &qword_100446E00,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_10037A868);
  uint64_t v7 = v6;
  uint64_t v8 = @"CSDSharePlayMediaDidHandoffNotification";
  uint64_t v9 = @"CSDSharePlayRemoteActivityDidChangeNotification";
  unint64_t result = (void *)Dictionary.init(dictionaryLiteral:)(inited, v3, v5, v7);
  off_100447BE8 = result;
  return result;
}

uint64_t sub_1001C89C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v59 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v58 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Notification(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v54 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v54);
  char v13 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v49 - v15;
  Notification.object.getter(aBlock, v14);
  if (v61)
  {
    uint64_t v17 = sub_1001B4B94(0LL, &qword_100447CA8, off_1003D5D88);
    if ((swift_dynamicCast(&v64, aBlock, (char *)&type metadata for Any + 8, v17, 6LL) & 1) != 0)
    {
      id v52 = v64;
      id v18 = [v64 groupUUID];
      uint64_t v51 = v2;
      id v19 = v18;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

      id v20 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
      id v49 = [v20 queue];

      unint64_t v21 = *(void (**)(char *, char *))(v10 + 16);
      uint64_t v22 = v16;
      uint64_t v50 = v16;
      uint64_t v23 = v54;
      v21(v13, v22);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
      uint64_t v24 = *(unsigned __int8 *)(v10 + 80);
      uint64_t v25 = (v24 + 24) & ~v24;
      uint64_t v26 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v27 = (v11 + v26 + v25) & ~v26;
      uint64_t v28 = swift_allocObject(&unk_1003DF268, v27 + v8, v24 | v26 | 7);
      uint64_t v29 = v53;
      *(void *)(v28 + swift_weakDestroy(v0 + 16) = v53;
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v28 + v25, v13, v23);
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v28 + v27, v9, v6);
      uint64_t v62 = sub_1001C9458;
      uint64_t v63 = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1002356BC;
      uint64_t v61 = &unk_1003DF280;
      unint64_t v30 = _Block_copy(aBlock);
      id v31 = v29;
      uint64_t v32 = v55;
      static DispatchQoS.unspecified.getter(v31);
      id v64 = _swiftEmptyArrayStorage;
      sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v34 = v33;
      uint64_t v35 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
      unint64_t v36 = sub_1001C94D0();
      uint64_t v37 = v58;
      uint64_t v38 = v51;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v35, v36, v51, v34);
      uint64_t v39 = v49;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v37, v30);
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v38);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v32, v57);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v50, v23);
      return swift_release(v63);
    }
  }

  else
  {
    sub_1001B14E8((uint64_t)aBlock);
  }

  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v41 = qword_100454018;
  uint64_t v42 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
  *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v44 = String.init<A>(reflecting:)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
  uint64_t v46 = v45;
  *(void *)(v43 + 56) = &type metadata for String;
  unint64_t v47 = sub_1001B2330();
  *(void *)(v43 + 64) = v47;
  *(void *)(v43 + 32) = v44;
  *(void *)(v43 + 40) = v46;
  uint64_t v48 = static os_log_type_t.default.getter(v47);
  os_log(_:dso:log:type:_:)( "Could not retrieve conversation from notification %@",  52LL,  2LL,  &_mh_execute_header,  v41,  v48,  v43);
  return swift_bridgeObjectRelease(v43);
}

void sub_1001C8E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Notification(0LL);
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)(*(uint64_t (**)(uint64_t))(a1 + OBJC_IVAR___CSDCallCenterObserver_callContainerClosure))(v10);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 callsWithGroupUUID:isa];

  swift_unknownObjectRelease(v13);
  uint64_t v16 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044AB70, &OBJC_CLASS___TUCall_ptr);
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    if (*(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease(v17);
    goto LABEL_19;
  }

  if (v17 < 0) {
    uint64_t v37 = v17;
  }
  else {
    uint64_t v37 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v17);
  uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease(v17);
  if (!v38) {
    goto LABEL_18;
  }
LABEL_3:
  sub_1002734A0(0LL, (v17 & 0xC000000000000001LL) == 0, v17);
  if ((v17 & 0xC000000000000001LL) != 0) {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v17);
  }
  else {
    id v18 = *(id *)(v17 + 32);
  }
  id v50 = v18;
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = objc_opt_self(&OBJC_CLASS___CSDCall);
  uint64_t v20 = swift_dynamicCastObjCClass(v50, v19);
  if (!v20)
  {

LABEL_19:
    if (qword_1004468F0 != -1) {
      swift_once(&qword_1004468F0, sub_100208418);
    }
    uint64_t v39 = qword_100454018;
    uint64_t v40 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
    *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    uint64_t v42 = String.init<A>(reflecting:)(v8, v5);
    uint64_t v44 = v43;
    *(void *)(v41 + 56) = &type metadata for String;
    unint64_t v45 = sub_1001B2330();
    *(void *)(v41 + 64) = v45;
    *(void *)(v41 + 32) = v42;
    *(void *)(v41 + 40) = v44;
    uint64_t v46 = static os_log_type_t.default.getter(v45);
    os_log(_:dso:log:type:_:)( "Could not retrieve call with conversation group UUID %@",  55LL,  2LL,  &_mh_execute_header,  v39,  v46,  v41);
    uint64_t v36 = v41;
    goto LABEL_22;
  }

  uint64_t v21 = v20;
  if (qword_1004466B0 != -1) {
    swift_once(&qword_1004466B0, sub_1001C88E4);
  }
  uint64_t v22 = (uint64_t)off_100447BE8;
  uint64_t v23 = v49;
  uint64_t v24 = (void *)Notification.name.getter();
  sub_1001CA074((uint64_t)v24, v22);
  uint64_t v26 = v25;
  LOBYTE(v22) = v27;

  if ((v22 & 1) == 0)
  {
    sub_1001C87E8(v21, v26);

    return;
  }

  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v28 = qword_100454018;
  uint64_t v29 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v12, v23, v9);
  uint64_t v31 = String.init<A>(reflecting:)(v12, v9);
  uint64_t v33 = v32;
  *(void *)(v30 + 56) = &type metadata for String;
  unint64_t v34 = sub_1001B2330();
  *(void *)(v30 + 64) = v34;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v33;
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  os_log(_:dso:log:type:_:)( "Received notification %@ for unrecognized trigger",  49LL,  2LL,  &_mh_execute_header,  v28,  v35,  v30);

  uint64_t v36 = v30;
LABEL_22:
  swift_bridgeObjectRelease(v36);
}

uint64_t sub_1001C9284(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7 = sub_1001C9578();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v11 = a1;
  a4(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for CallCenterObserver()
{
  return objc_opt_self(&OBJC_CLASS___CSDCallCenterObserver);
}

uint64_t sub_1001C93A0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = sub_1001C9578();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void sub_1001C9458()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_1001C9578() - 8) + 80LL);
  sub_1001C8E60(*(void *)(v0 + 16), v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1001C94B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C94C8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1001C94D0()
{
  unint64_t result = qword_100447CC0;
  if (!qword_100447CC0)
  {
    uint64_t v1 = sub_1001B0504((uint64_t *)&unk_1004478D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100447CC0);
  }

  return result;
}

uint64_t sub_1001C9514()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001C9538()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1001C954C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001C9578()
{
  return type metadata accessor for Notification(0LL);
}

void sub_1001C9580(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v5 = v4;
    sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v64, v3, v5, v6);
    uint64_t v1 = v64[0];
    uint64_t v61 = v64[1];
    uint64_t v8 = v64[2];
    int64_t v9 = v64[3];
    unint64_t v10 = v64[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v61 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
  }

  int64_t v60 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v59 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v1 < 0)
    {
      uint64_t v17 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
      if (!v17) {
        goto LABEL_58;
      }
      uint64_t v18 = v17;
      uint64_t v63 = v17;
      sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
      uint64_t v20 = v19;
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v65, &v63, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
      id v21 = v65;
      swift_unknownObjectRelease(v18);
      int64_t v16 = v9;
      uint64_t v14 = v10;
      if (!v21) {
        goto LABEL_58;
      }
      goto LABEL_34;
    }

    if (!v10) {
      break;
    }
    uint64_t v14 = (v10 - 1) & v10;
    unint64_t v15 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v16 = v9;
LABEL_33:
    id v21 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v21) {
      goto LABEL_58;
    }
LABEL_34:
    unint64_t v62 = v14;
    id v25 = objc_msgSend(v21, "handles", v58);
    sub_1001D8EA0(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v27 = v26;
    sub_1001D84A4((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, v27, v28);

    unint64_t v30 = v29 & 0xC000000000000001LL;
    if ((v29 & 0xC000000000000001LL) != 0)
    {
      uint64_t v31 = v1;
      if (v29 < 0) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = v29 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v33 = __CocoaSet.startIndex.getter(v32);
      uint64_t v35 = v34;
      uint64_t v36 = __CocoaSet.endIndex.getter(v32);
      int64_t v37 = v16;
      uint64_t v39 = v38;
      char v40 = static __CocoaSet.Index.== infix(_:_:)(v33, v35, v36, v38);
      uint64_t v41 = v36;
      uint64_t v1 = v31;
      uint64_t v42 = v39;
      int64_t v16 = v37;
      sub_1001D8CA0(v41, v42, 1);
      unint64_t v30 = v29 & 0xC000000000000001LL;
      if ((v40 & 1) != 0) {
        goto LABEL_57;
      }
LABEL_44:
      int64_t v58 = v16;
      char v47 = v30 != 0;
      sub_100250C24(v33, v35, v30 != 0, v29);
      uint64_t v49 = v48;
      sub_1001D8CA0(v33, v35, v47);
      swift_bridgeObjectRelease(v29);
      id v50 = [v49 value];

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v53 = v52;

      uint64_t v54 = v59;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002B00EC();
        uint64_t v54 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v55 = v54[2];
      int64_t v9 = v58;
      if (v55 >= v54[3] >> 1)
      {
        sub_1002B00EC();
        uint64_t v54 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v54[2] = v55 + 1;
      uint64_t v59 = v54;
      uint64_t v56 = &v54[2 * v55];
      v56[4] = v51;
      v56[5] = v53;
      unint64_t v10 = v62;
    }

    else
    {
      char v43 = *(_BYTE *)(v29 + 32);
      uint64_t v33 = 1LL << v43;
      unint64_t v44 = *(void *)(v29 + 56);
      if (v44)
      {
        uint64_t v45 = 0LL;
      }

      else
      {
        if ((v43 & 0x3Fu) < 7) {
          goto LABEL_56;
        }
        unint64_t v44 = *(void *)(v29 + 64);
        if (!v44)
        {
          uint64_t v57 = 9LL;
          while (v57 - 7 < (unint64_t)(v33 + 63) >> 6)
          {
            unint64_t v44 = *(void *)(v29 + 8 * v57++);
            if (v44)
            {
              uint64_t v45 = v57 - 8;
              goto LABEL_42;
            }
          }

void sub_1001C9AE0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v5 = v4;
    sub_1001D84A4((unint64_t *)&unk_100447E90, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v36, v3, v5, v6);
    uint64_t v1 = v36[0];
    uint64_t v34 = v36[1];
    uint64_t v9 = v36[2];
    int64_t v8 = v36[3];
    unint64_t v10 = v36[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v34 = a1 + 56;
    uint64_t v9 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a1);
    int64_t v8 = 0LL;
  }

  int64_t v33 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v10)
    {
      uint64_t v15 = (v10 - 1) & v10;
      unint64_t v16 = __clz(__rbit64(v10)) | (v8 << 6);
      int64_t v17 = v8;
      goto LABEL_32;
    }

    int64_t v23 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v23 >= v33) {
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v23);
    int64_t v17 = v8 + 1;
    if (!v24)
    {
      int64_t v17 = v8 + 2;
      if (v8 + 2 >= v33) {
        goto LABEL_39;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v17);
      if (!v24)
      {
        int64_t v17 = v8 + 3;
        if (v8 + 3 >= v33) {
          goto LABEL_39;
        }
        unint64_t v24 = *(void *)(v34 + 8 * v17);
        if (!v24)
        {
          int64_t v17 = v8 + 4;
          if (v8 + 4 >= v33) {
            goto LABEL_39;
          }
          unint64_t v24 = *(void *)(v34 + 8 * v17);
          if (!v24)
          {
            int64_t v17 = v8 + 5;
            if (v8 + 5 >= v33) {
              goto LABEL_39;
            }
            unint64_t v24 = *(void *)(v34 + 8 * v17);
            if (!v24)
            {
              int64_t v25 = v8 + 6;
              while (v25 < v33)
              {
                unint64_t v24 = *(void *)(v34 + 8 * v25++);
                if (v24)
                {
                  int64_t v17 = v25 - 1;
                  goto LABEL_31;
                }
              }

void sub_1001C9E74(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    sub_1001D7048(a1);
  }
  sub_1001D9410();
}

uint64_t sub_1001C9EC4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = sub_1001D711C(a1), (v4 & 1) != 0)) {
    return *(void *)(*(void *)(a2 + 56) + 24 * v3);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001C9F1C(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (sub_1001D714C(a1), (v3 & 1) != 0))
  {
    sub_1001D941C();
    swift_unknownObjectRetain(v1);
    swift_bridgeObjectRetain(a1);
  }

  else
  {
    sub_1001D9254();
  }

  return sub_1001D907C();
}

void sub_1001C9F7C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v3 = sub_1001D914C(a1);
    if ((v4 & 1) != 0) {
      swift_unknownObjectRetain(*(void *)(*(void *)(v2 + 56) + 8 * v3));
    }
  }

  sub_1001AA978();
}

uint64_t sub_1001C9FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1001D914C(a1), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v9 = sub_1001B1234();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))( a3,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v7,  v9);
    uint64_t v10 = sub_1001D9068();
  }

  else
  {
    sub_1001B1234();
    uint64_t v10 = sub_1001AA9D0();
  }

  return sub_1001D8F30(v10, v11, v12, v13);
}

void sub_1001CA028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = sub_1001D8FB0(a1, a2);
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = *(void *)(v3 + 56) + 16 * v4;
      unint64_t v7 = *(void **)v6;
      id v8 = *(id *)(v6 + 8);
      id v9 = v7;
    }
  }

  sub_1001AA978();
}

void sub_1001CA074(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    sub_1001D71EC(a1);
  }
  sub_1001AA978();
}

uint64_t sub_1001CA0B4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  unint64_t v3 = sub_1001D7184(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  char v5 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v3);
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain(v5[1]);
  return v6;
}

double sub_1001CA108@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1001D70EC(a1), (v6 & 1) != 0))
  {
    sub_1001B03FC(*(void *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

void sub_1001CA158(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_1001D914C(a1);
    if ((v3 & 1) != 0) {
      sub_1001D9430(v2);
    }
  }

  sub_1001AA978();
}

void sub_1001CA18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v3 = sub_1001D8FB0(a1, a2), (v4 & 1) != 0)) {
    sub_1001D912C(v3);
  }
  else {
    sub_1001D9254();
  }
  sub_1001D907C();
  sub_1001AA978();
}

void sub_1001CA1C0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_1001D914C(a1);
    if ((v3 & 1) != 0) {
      sub_1001D9140(v2);
    }
  }

  sub_1001AA978();
}

uint64_t sub_1001CA1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_1001D8FB0(a1, a2), (v3 & 1) != 0))
  {
    type metadata accessor for PendingMembershipInfo(0LL);
    sub_1001D9110();
    uint64_t v4 = sub_1001D9068();
  }

  else
  {
    type metadata accessor for PendingMembershipInfo(0LL);
    uint64_t v4 = sub_1001AA9D0();
  }

  return sub_1001D8F30(v4, v5, v6, v7);
}

uint64_t sub_1001CA250(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1001D914C(a1), (v2 & 1) != 0))
  {
    type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_1001D9110();
    uint64_t v3 = sub_1001D9068();
  }

  else
  {
    type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    uint64_t v3 = sub_1001AA9D0();
  }

  return sub_1001D8F30(v3, v4, v5, v6);
}

uint64_t sub_1001CA2B0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1001D711C(a1), (v3 & 1) != 0))
  {
    sub_1001D941C();
    id v4 = v2;
  }

  else
  {
    sub_1001D9254();
  }

  return sub_1001D907C();
}

uint64_t sub_1001CA318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (sub_1001D8FB0(a1, a2), (v5 & 1) != 0))
  {
    uint64_t v6 = sub_1001C7340();
    sub_1001D8D60();
    uint64_t v7 = a4;
    uint64_t v8 = 0LL;
    uint64_t v9 = 1LL;
    uint64_t v10 = v6;
  }

  else
  {
    sub_1001AFF14(&qword_100447E10);
    uint64_t v7 = sub_1001AA9D0();
  }

  return sub_1001A9670(v7, v8, v9, v10);
}

void sub_1001CA3A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = sub_1001D729C(a1);
    if ((v3 & 1) != 0) {
      sub_1001D9140(v2);
    }
  }

  sub_1001AA978();
}

void sub_1001CA3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_1001D8FB0(a1, a2);
    if ((v4 & 1) != 0) {
      sub_1001D9140(v3);
    }
  }

  sub_1001AA978();
}

void sub_1001CA410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = sub_1001D8FB0(a1, a2);
    if ((v5 & 1) != 0) {
      swift_unknownObjectRetain(*(void *)(*(void *)(v3 + 56) + 16 * v4));
    }
  }

  sub_1001AA978();
}

void sub_1001CA454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_1001D8FB0(a1, a2);
    if ((v4 & 1) != 0) {
      sub_1001D9430(v3);
    }
  }

  sub_1001AA978();
}

void sub_1001CA488(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v4 = a1;
    __CocoaDictionary.lookup(_:)();
    sub_1001D8FCC();
    if (v3)
    {
      uint64_t v11 = v3;
      sub_1001D8FE8(v5, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v7 = v6;
      swift_unknownObjectRetain(v3);
      swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v7, 7LL);
      swift_unknownObjectRelease(v3);
    }
  }

  else if (*(void *)(a2 + 16))
  {
    sub_1001D7318((uint64_t)a1);
    if ((v9 & 1) != 0) {
      id v10 = *(id *)(*(void *)(a2 + 56) + 8 * v8);
    }
  }

  sub_1001D9410();
}

void sub_1001CA54C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1001D7318(a1), (v3 & 1) != 0)) {
    sub_1001D912C(v2);
  }
  else {
    sub_1001D9254();
  }
  sub_1001D907C();
  sub_1001AA978();
}

void sub_1001CA584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = sub_1001D8FB0(a1, a2);
    if ((v5 & 1) != 0) {
      swift_retain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
    }
  }

  sub_1001AA978();
}

uint64_t sub_1001CA5BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    uint64_t v22 = v5;
    unint64_t v23 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = v6;
      uint64_t v11 = v8;
      id v12 = [v8 request];
      uint64_t v13 = a3;
      id v14 = [v12 identifier];

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      a3 = v13;
      BOOL v18 = v15 == a2 && v17 == v13;
      if (v18)
      {
        swift_bridgeObjectRelease(v22);

        char v19 = 1;
        uint64_t v5 = v13;
        goto LABEL_24;
      }

      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a2, v13, 0LL);

      swift_bridgeObjectRelease(v17);
      if ((v19 & 1) != 0)
      {
        uint64_t v5 = v22;
        goto LABEL_24;
      }

      ++v7;
      uint64_t v6 = v10;
      BOOL v18 = v9 == v10;
      uint64_t v5 = v22;
      if (v18) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_19:
    if (v5 < 0) {
      uint64_t v20 = v5;
    }
    else {
      uint64_t v20 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
  }

  char v19 = 0;
LABEL_24:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v5);
  return v19 & 1;
}

unint64_t sub_1001CA774(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DC930, v2);
  sub_1001B0EB8();
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001CA7B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for BadgeCountCategory.missedFaceTimeGroupCalls(_:);
  uint64_t v3 = type metadata accessor for BadgeCountCategory(0LL);
  sub_1001D93B4(a1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL));
  return sub_1001D8F30(a1, 0LL, 1LL, v3);
}

void sub_1001CA810(void *a1)
{
}

void sub_1001CA84C()
{
  id v1 = sub_1001D8FD4(objc_allocWithZone(&OBJC_CLASS___TUContactsDataProviderFetchRequest), "initWithHandle:");
  id v2 = sub_1001D8FD4(v0, "executeFetchRequest:");
  sub_1001D8FCC();
  id v4 = sub_1001D8F3C(v3, "localizedName");
  sub_1001D93FC((uint64_t)v4);
  sub_1001D92C0();

  sub_10010B978();
}

uint64_t sub_1001CA8CC()
{
  id v3 = [v2 value];
  NSString v4 = v3;
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v4 = String._bridgeToObjectiveC()();
    id v3 = (id)sub_1001D9020();
  }

  unsigned int v5 = sub_1001D92AC((uint64_t)v3, "destinationIdIsTemporary");

  if (v5)
  {
    id v7 = sub_1001B115C(v6, "remoteMembers");
    sub_1001D8FF0();
    sub_1001D90A4((unint64_t *)&qword_10044A420);
    sub_1001D9000(v8);
    sub_1001D9358();
    sub_1001CAAA8((uint64_t)&unk_100447E20, v1);
    uint64_t v10 = v9;
    sub_1001B0F5C();
    if (v10)
    {
      sub_1001D8B20(v10, (SEL *)&selRef_nickname);
      if (v12)
      {
        uint64_t v13 = v11;
        uint64_t v14 = v12;
        sub_1001D90D8((uint64_t)"MAYBE_NICKNAME_%@");
        uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v16 = sub_1001C7370(v15, 72LL);
        *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
        *(void *)(v16 + 56) = &type metadata for String;
        *(void *)(v16 + 64) = sub_1001B2330();
        *(void *)(v16 + 32) = v13;
        *(void *)(v16 + 40) = v14;
        uint64_t v17 = sub_1001D907C();
        uint64_t v19 = String.init(format:_:)(v17, v18, v16);

        sub_1001AA9C8();
        return v19;
      }
    }
  }

  id v21 = sub_1001D8FD4(objc_allocWithZone(&OBJC_CLASS___TUContactsDataProviderFetchRequest), "initWithHandle:");
  id v22 = sub_1001D8FD4(v0, "executeFetchRequest:");
  sub_1001D8FCC();
  id v24 = sub_1001D8F3C(v23, "localizedName");
  uint64_t v25 = sub_1001D93FC((uint64_t)v24);
  sub_1001D92C0();

  return v25;
}

void sub_1001CAAA8(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v6 = v5;
    sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v34, v4, v6, v7);
    uint64_t v2 = v34[0];
    uint64_t v31 = v34[1];
    uint64_t v9 = v34[2];
    int64_t v10 = v34[3];
    unint64_t v11 = v34[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v13 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v9 = v13;
    int64_t v10 = 0LL;
  }

  uint64_t v29 = v9;
  int64_t v30 = (unint64_t)(v9 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    int64_t v18 = v10;
    goto LABEL_32;
  }

  int64_t v24 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v24 < v30)
    {
      unint64_t v25 = *(void *)(v31 + 8 * v24);
      int64_t v18 = v10 + 1;
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v30) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 3;
      if (v10 + 3 >= v30) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v30) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v18);
      if (v25)
      {
LABEL_31:
        uint64_t v16 = (v25 - 1) & v25;
        unint64_t v17 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v2 + 48) + 8 * v17); i; uint64_t v16 = v11)
        {
          id v27 = objc_msgSend(i, "handle", v29);
          unsigned int v28 = [v27 isEquivalentToHandle:a2];

          if (v28) {
            break;
          }

          int64_t v10 = v18;
          unint64_t v11 = v16;
          if ((v2 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v19 = __CocoaSet.Iterator.next()(v8);
          if (!v19) {
            break;
          }
          uint64_t v20 = v19;
          uint64_t v33 = v19;
          sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
          uint64_t v22 = v21;
          swift_unknownObjectRetain(v20);
          swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          id i = v35;
          swift_unknownObjectRelease(v20);
          int64_t v18 = v10;
        }

        goto LABEL_36;
      }

      int64_t v18 = v10 + 5;
      if (v10 + 5 < v30)
      {
        unint64_t v25 = *(void *)(v31 + 8 * v18);
        if (!v25)
        {
          int64_t v26 = v10 + 6;
          while (v26 < v30)
          {
            unint64_t v25 = *(void *)(v31 + 8 * v26++);
            if (v25)
            {
              int64_t v18 = v26 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

void sub_1001CADCC(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v6 = v5;
    sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v33, v4, v6, v7);
    uint64_t v2 = v33[0];
    uint64_t v30 = v33[1];
    uint64_t v9 = v33[2];
    int64_t v10 = v33[3];
    unint64_t v11 = v33[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v13 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v9 = v13;
    int64_t v10 = 0LL;
  }

  int64_t v29 = (unint64_t)(v9 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    int64_t v18 = v10;
    goto LABEL_32;
  }

  int64_t v24 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v24 < v29)
    {
      unint64_t v25 = *(void *)(v30 + 8 * v24);
      int64_t v18 = v10 + 1;
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v29) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v30 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 3;
      if (v10 + 3 >= v29) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v30 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v29) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v30 + 8 * v18);
      if (v25)
      {
LABEL_31:
        uint64_t v16 = (v25 - 1) & v25;
        unint64_t v17 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v2 + 48) + 8 * v17); i; uint64_t v16 = v11)
        {
          uint64_t v27 = *(void *)&a2[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationServerBag];
          swift_unknownObjectRetain(v27);
          BOOL v28 = sub_1001D2714();
          swift_unknownObjectRelease(v27);
          if (v28) {
            break;
          }

          int64_t v10 = v18;
          unint64_t v11 = v16;
          if ((v2 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v19 = __CocoaSet.Iterator.next()(v8);
          if (!v19) {
            break;
          }
          uint64_t v20 = v19;
          uint64_t v32 = v19;
          sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
          uint64_t v22 = v21;
          swift_unknownObjectRetain(v20);
          swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          id i = v34;
          swift_unknownObjectRelease(v20);
          int64_t v18 = v10;
        }

        goto LABEL_36;
      }

      int64_t v18 = v10 + 5;
      if (v10 + 5 < v29)
      {
        unint64_t v25 = *(void *)(v30 + 8 * v18);
        if (!v25)
        {
          int64_t v26 = v10 + 6;
          while (v26 < v29)
          {
            unint64_t v25 = *(void *)(v30 + 8 * v26++);
            if (v25)
            {
              int64_t v18 = v26 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

void sub_1001CB0EC(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v6 = v5;
    sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v31, v4, v6, v7);
    uint64_t v2 = v31[0];
    uint64_t v28 = v31[1];
    uint64_t v9 = v31[2];
    int64_t v10 = v31[3];
    unint64_t v11 = v31[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  int64_t v15 = (unint64_t)(v9 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    int64_t v18 = v10;
    goto LABEL_32;
  }

  int64_t v24 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v24 < v15)
    {
      unint64_t v25 = *(void *)(v28 + 8 * v24);
      int64_t v18 = v10 + 1;
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v15) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 3;
      if (v10 + 3 >= v15) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v15) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v18);
      if (v25)
      {
LABEL_31:
        uint64_t v16 = (v25 - 1) & v25;
        unint64_t v17 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v2 + 48) + 8 * v17); i; uint64_t v16 = v11)
        {
          unint64_t v27 = (unint64_t)[i avcSessionToken];
          if ((v27 & 0x8000000000000000LL) == 0
            && v27 == *(void *)&a2[OBJC_IVAR___CSDMomentsNotification_streamToken])
          {
            break;
          }

          int64_t v10 = v18;
          unint64_t v11 = v16;
          if ((v2 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v19 = __CocoaSet.Iterator.next()(v8);
          if (!v19) {
            break;
          }
          uint64_t v20 = v19;
          uint64_t v30 = v19;
          sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
          uint64_t v22 = v21;
          swift_unknownObjectRetain(v20);
          swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          id i = v32;
          swift_unknownObjectRelease(v20);
          int64_t v18 = v10;
        }

        goto LABEL_37;
      }

      int64_t v18 = v10 + 5;
      if (v10 + 5 < v15)
      {
        unint64_t v25 = *(void *)(v28 + 8 * v18);
        if (!v25)
        {
          int64_t v26 = v10 + 6;
          while (v26 < v15)
          {
            unint64_t v25 = *(void *)(v28 + 8 * v26++);
            if (v25)
            {
              int64_t v18 = v26 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_37;
        }

        goto LABEL_31;
      }
    }

void sub_1001CB3E8(uint64_t a1, void *a2)
{
  id v65 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v63 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v58 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447EC0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v56 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v56 - v15;
  uint64_t v68 = (char *)v56 - v15;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v18 = __CocoaSet.makeIterator()(v17);
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v19 = v11;
    uint64_t v21 = v20;
    uint64_t v16 = v68;
    sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v22 = v21;
    unint64_t v11 = v19;
    int64_t v24 = Set.Iterator.init(_cocoa:)(v72, v18, v22, v23);
    a1 = v72[0];
    uint64_t v62 = v72[1];
    uint64_t v25 = v72[2];
    int64_t v26 = v72[3];
    unint64_t v27 = v72[4];
  }

  else
  {
    uint64_t v28 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v29 = *(void *)(a1 + 56);
    uint64_t v62 = a1 + 56;
    uint64_t v30 = ~v28;
    uint64_t v31 = -v28;
    if (v31 < 64) {
      uint64_t v32 = ~(-1LL << v31);
    }
    else {
      uint64_t v32 = -1LL;
    }
    unint64_t v27 = v32 & v29;
    int64_t v24 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v25 = v30;
    int64_t v26 = 0LL;
  }

  uint64_t v60 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v56[1] = v25;
  int64_t v61 = (unint64_t)(v25 + 64) >> 6;
  uint64_t v59 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v64 = a1;
  uint64_t v57 = v14;
  while (1)
  {
    int64_t v66 = v26;
    unint64_t v67 = v27;
    if ((a1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v35 = __CocoaSet.Iterator.next()(v24);
    if (!v35) {
      goto LABEL_45;
    }
    uint64_t v36 = v35;
    uint64_t v71 = v35;
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v38 = v37;
    swift_unknownObjectRetain(v36);
    swift_dynamicCast(&v73, &v71, v59, v38, 7LL);
    id v39 = v73;
    swift_unknownObjectRelease(v36);
    int64_t v34 = v66;
    uint64_t v70 = v67;
    if (!v39) {
      goto LABEL_45;
    }
LABEL_34:
    int64_t v69 = v34;
    id v43 = [v39 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

    uint64_t v44 = 1LL;
    sub_1001A9670((uint64_t)v16, 0LL, 1LL, v3);
    id v45 = [v65 groupUUID];
    if (v45)
    {
      unint64_t v46 = v45;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      uint64_t v44 = 0LL;
    }

    uint64_t v16 = v68;
    sub_1001A9670((uint64_t)v14, v44, 1LL, v3);
    uint64_t v47 = (uint64_t)&v7[*(int *)(v5 + 48)];
    sub_1001D8D60();
    sub_1001D8D60();
    if (sub_1001AB0AC((uint64_t)v7, 1LL, v3) == 1)
    {
      sub_1001C6CE4((uint64_t)v14, (uint64_t *)&unk_10044A400);
      sub_1001C6CE4((uint64_t)v16, (uint64_t *)&unk_10044A400);
      if (sub_1001AB0AC(v47, 1LL, v3) == 1)
      {
        sub_1001C6CE4((uint64_t)v7, (uint64_t *)&unk_10044A400);
        goto LABEL_45;
      }

      goto LABEL_41;
    }

    sub_1001D8D60();
    if (sub_1001AB0AC(v47, 1LL, v3) == 1)
    {
      sub_1001C6CE4((uint64_t)v14, (uint64_t *)&unk_10044A400);
      sub_1001C6CE4((uint64_t)v16, (uint64_t *)&unk_10044A400);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v11, v3);
LABEL_41:
      sub_1001C6CE4((uint64_t)v7, (uint64_t *)&unk_100447EC0);
      goto LABEL_43;
    }

    uint64_t v48 = v63;
    uint64_t v49 = v7;
    uint64_t v50 = v5;
    uint64_t v51 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v58, v47, v3);
    sub_1001C6B98( (unint64_t *)&qword_10044AE20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    char v53 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v51, v3, v52);
    uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
    unint64_t v55 = v51;
    uint64_t v5 = v50;
    uint64_t v7 = v49;
    uint64_t v14 = v57;
    v54(v55, v3);
    sub_1001C6CE4((uint64_t)v14, (uint64_t *)&unk_10044A400);
    sub_1001C6CE4((uint64_t)v68, (uint64_t *)&unk_10044A400);
    v54(v11, v3);
    uint64_t v16 = v68;
    sub_1001C6CE4((uint64_t)v7, (uint64_t *)&unk_10044A400);
    if ((v53 & 1) != 0) {
      goto LABEL_45;
    }
LABEL_43:

    int64_t v26 = v69;
    unint64_t v27 = v70;
    a1 = v64;
  }

  if (v27)
  {
    uint64_t v70 = (v27 - 1) & v27;
    unint64_t v33 = __clz(__rbit64(v27)) | (v26 << 6);
    int64_t v34 = v26;
LABEL_33:
    id v39 = *(id *)(*(void *)(a1 + 48) + 8 * v33);
    if (!v39) {
      goto LABEL_45;
    }
    goto LABEL_34;
  }

  int64_t v40 = v26 + 1;
  if (!__OFADD__(v26, 1LL))
  {
    if (v40 >= v61) {
      goto LABEL_44;
    }
    unint64_t v41 = *(void *)(v62 + 8 * v40);
    int64_t v34 = v26 + 1;
    if (!v41)
    {
      int64_t v34 = v26 + 2;
      if (v26 + 2 >= v61) {
        goto LABEL_44;
      }
      unint64_t v41 = *(void *)(v62 + 8 * v34);
      if (!v41)
      {
        int64_t v34 = v26 + 3;
        if (v26 + 3 >= v61) {
          goto LABEL_44;
        }
        unint64_t v41 = *(void *)(v62 + 8 * v34);
        if (!v41)
        {
          int64_t v34 = v26 + 4;
          if (v26 + 4 >= v61) {
            goto LABEL_44;
          }
          unint64_t v41 = *(void *)(v62 + 8 * v34);
          if (!v41)
          {
            int64_t v34 = v26 + 5;
            if (v26 + 5 >= v61) {
              goto LABEL_44;
            }
            unint64_t v41 = *(void *)(v62 + 8 * v34);
            if (!v41)
            {
              int64_t v42 = v26 + 6;
              while (v42 < v61)
              {
                unint64_t v41 = *(void *)(v62 + 8 * v42++);
                if (v41)
                {
                  int64_t v34 = v42 - 1;
                  goto LABEL_32;
                }
              }

void sub_1001CBA20(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v5 = v4;
    sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v30, v3, v5, v6);
    uint64_t v1 = v30[0];
    uint64_t v28 = v30[1];
    uint64_t v8 = v30[2];
    int64_t v9 = v30[3];
    unint64_t v10 = v30[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    uint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
  }

  uint64_t v27 = v8;
  int64_t v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v10)
  {
    uint64_t v15 = (v10 - 1) & v10;
    unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v17 = v9;
    goto LABEL_32;
  }

  int64_t v23 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v23 < v14)
    {
      unint64_t v24 = *(void *)(v28 + 8 * v23);
      int64_t v17 = v9 + 1;
      if (v24) {
        goto LABEL_31;
      }
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v14) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v17);
      if (v24) {
        goto LABEL_31;
      }
      int64_t v17 = v9 + 3;
      if (v9 + 3 >= v14) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v17);
      if (v24) {
        goto LABEL_31;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 >= v14) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v17);
      if (v24)
      {
LABEL_31:
        uint64_t v15 = (v24 - 1) & v24;
        unint64_t v16 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_32:
        id v22 = *(id *)(*(void *)(v1 + 48) + 8 * v16);
        if (v22)
        {
          while (1)
          {
            id v26 = objc_msgSend(v22, "handoffEligibility", v27);
            if (v26) {
              break;
            }

            int64_t v9 = v17;
            unint64_t v10 = v15;
            if ((v1 & 0x8000000000000000LL) == 0) {
              goto LABEL_11;
            }
LABEL_13:
            uint64_t v18 = __CocoaSet.Iterator.next()(v7);
            if (v18)
            {
              uint64_t v19 = v18;
              uint64_t v29 = v18;
              sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
              uint64_t v21 = v20;
              swift_unknownObjectRetain(v19);
              swift_dynamicCast(&v31, &v29, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
              id v22 = v31;
              swift_unknownObjectRelease(v19);
              int64_t v17 = v9;
              uint64_t v15 = v10;
              if (v22) {
                continue;
              }
            }

            goto LABEL_37;
          }
        }

        goto LABEL_37;
      }

      int64_t v17 = v9 + 5;
      if (v9 + 5 < v14)
      {
        unint64_t v24 = *(void *)(v28 + 8 * v17);
        if (!v24)
        {
          int64_t v25 = v9 + 6;
          while (v25 < v14)
          {
            unint64_t v24 = *(void *)(v28 + 8 * v25++);
            if (v24)
            {
              int64_t v17 = v25 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_37;
        }

        goto LABEL_31;
      }
    }

void sub_1001CBD04(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v5 = v4;
    sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v29, v3, v5, v6);
    uint64_t v1 = v29[0];
    uint64_t v27 = v29[1];
    uint64_t v8 = v29[2];
    int64_t v9 = v29[3];
    unint64_t v10 = v29[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    uint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
  }

  uint64_t v26 = v8;
  int64_t v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v10)
  {
    uint64_t v15 = (v10 - 1) & v10;
    unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v17 = v9;
    goto LABEL_32;
  }

  int64_t v23 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v23 < v14)
    {
      unint64_t v24 = *(void *)(v27 + 8 * v23);
      int64_t v17 = v9 + 1;
      if (v24) {
        goto LABEL_31;
      }
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v14) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v17);
      if (v24) {
        goto LABEL_31;
      }
      int64_t v17 = v9 + 3;
      if (v9 + 3 >= v14) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v17);
      if (v24) {
        goto LABEL_31;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 >= v14) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v17);
      if (v24)
      {
LABEL_31:
        uint64_t v15 = (v24 - 1) & v24;
        unint64_t v16 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v1 + 48) + 8 * v16); i; uint64_t v15 = v10)
        {
          if (objc_msgSend(i, "state", v26)) {
            break;
          }

          int64_t v9 = v17;
          unint64_t v10 = v15;
          if ((v1 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v18 = __CocoaSet.Iterator.next()(v7);
          if (!v18) {
            break;
          }
          uint64_t v19 = v18;
          uint64_t v28 = v18;
          sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
          uint64_t v21 = v20;
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
          id i = v30;
          swift_unknownObjectRelease(v19);
          int64_t v17 = v9;
        }

        goto LABEL_36;
      }

      int64_t v17 = v9 + 5;
      if (v9 + 5 < v14)
      {
        unint64_t v24 = *(void *)(v27 + 8 * v17);
        if (!v24)
        {
          int64_t v25 = v9 + 6;
          while (v25 < v14)
          {
            unint64_t v24 = *(void *)(v27 + 8 * v25++);
            if (v24)
            {
              int64_t v17 = v25 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

void sub_1001CBFD8(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v10 = v9;
    sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v12 = Set.Iterator.init(_cocoa:)(v35, v8, v10, v11);
    uint64_t v5 = v35[0];
    uint64_t v33 = v35[1];
    uint64_t v13 = v35[2];
    int64_t v14 = v35[3];
    unint64_t v15 = v35[4];
  }

  else
  {
    uint64_t v16 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v33 = a3 + 56;
    uint64_t v17 = ~v16;
    uint64_t v18 = -v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1LL << v18);
    }
    else {
      uint64_t v19 = -1LL;
    }
    unint64_t v15 = v19 & *(void *)(a3 + 56);
    uint64_t v12 = (void *)swift_bridgeObjectRetain(a3);
    uint64_t v13 = v17;
    int64_t v14 = 0LL;
  }

  int64_t v32 = (unint64_t)(v13 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v15)
  {
    uint64_t v20 = (v15 - 1) & v15;
    unint64_t v21 = __clz(__rbit64(v15)) | (v14 << 6);
    int64_t v22 = v14;
    goto LABEL_27;
  }

  int64_t v22 = v14 + 1;
  if (!__OFADD__(v14, 1LL))
  {
    if (v22 < v32)
    {
      unint64_t v28 = *(void *)(v33 + 8 * v22);
      if (v28)
      {
LABEL_26:
        uint64_t v20 = (v28 - 1) & v28;
        unint64_t v21 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_27:
        id v27 = *(id *)(*(void *)(v5 + 48) + 8 * v21);
        if (v27)
        {
          while (1)
          {
            id v36 = v27;
            char v30 = a1(&v36);
            if (v4) {
              break;
            }
            if ((v30 & 1) != 0) {
              goto LABEL_39;
            }

            int64_t v14 = v22;
            unint64_t v15 = v20;
            if ((v5 & 0x8000000000000000LL) == 0) {
              goto LABEL_11;
            }
LABEL_13:
            uint64_t v23 = __CocoaSet.Iterator.next()(v12);
            if (v23)
            {
              uint64_t v24 = v23;
              uint64_t v34 = v23;
              sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
              uint64_t v26 = v25;
              swift_unknownObjectRetain(v24);
              swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
              id v27 = v36;
              swift_unknownObjectRelease(v24);
              int64_t v22 = v14;
              uint64_t v20 = v15;
              if (v27) {
                continue;
              }
            }

            goto LABEL_39;
          }
        }

        goto LABEL_39;
      }

      int64_t v29 = v14 + 2;
      if (v14 + 2 < v32)
      {
        unint64_t v28 = *(void *)(v33 + 8 * v29);
        if (v28) {
          goto LABEL_25;
        }
        int64_t v29 = v14 + 3;
        if (v14 + 3 >= v32) {
          goto LABEL_39;
        }
        unint64_t v28 = *(void *)(v33 + 8 * v29);
        if (v28)
        {
LABEL_25:
          int64_t v22 = v29;
          goto LABEL_26;
        }

        int64_t v29 = v14 + 4;
        if (v14 + 4 < v32)
        {
          unint64_t v28 = *(void *)(v33 + 8 * v29);
          if (v28) {
            goto LABEL_25;
          }
          int64_t v22 = v14 + 5;
          if (v14 + 5 < v32)
          {
            unint64_t v28 = *(void *)(v33 + 8 * v22);
            if (!v28)
            {
              int64_t v31 = v14 + 6;
              while (v31 < v32)
              {
                unint64_t v28 = *(void *)(v33 + 8 * v31++);
                if (v28)
                {
                  int64_t v22 = v31 - 1;
                  goto LABEL_26;
                }
              }

              goto LABEL_39;
            }

            goto LABEL_26;
          }
        }
      }
    }

void sub_1001CC308(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v6 = v5;
    sub_1001D84A4((unint64_t *)&unk_100447E90, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v39, v4, v6, v7);
    uint64_t v2 = v39[0];
    uint64_t v36 = v39[1];
    uint64_t v9 = v39[2];
    int64_t v10 = v39[3];
    unint64_t v11 = v39[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v36 = a1 + 56;
    uint64_t v13 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v9 = v13;
    int64_t v10 = 0LL;
  }

  int64_t v35 = (unint64_t)(v9 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    int64_t v18 = v10;
    goto LABEL_32;
  }

  int64_t v24 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v24 < v35)
    {
      unint64_t v25 = *(void *)(v36 + 8 * v24);
      int64_t v18 = v10 + 1;
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v35) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v36 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 3;
      if (v10 + 3 >= v35) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v36 + 8 * v18);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v35) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v36 + 8 * v18);
      if (v25)
      {
LABEL_31:
        uint64_t v16 = (v25 - 1) & v25;
        unint64_t v17 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_32:
        id v23 = *(id *)(*(void *)(v2 + 48) + 8 * v17);
        if (v23)
        {
          while (1)
          {
            id v27 = [v23 avcIdentifier];
            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
            uint64_t v30 = v29;

            uint64_t v31 = *(void *)&a2[OBJC_IVAR___CSDMomentsNotification_requesterID];
            uint64_t v32 = *(void *)&a2[OBJC_IVAR___CSDMomentsNotification_requesterID + 8];
            if (v28 == v31 && v30 == v32) {
              break;
            }
            char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v31, v32, 0LL);
            swift_bridgeObjectRelease(v30);
            if ((v34 & 1) != 0) {
              goto LABEL_41;
            }

            int64_t v10 = v18;
            unint64_t v11 = v16;
            if ((v2 & 0x8000000000000000LL) == 0) {
              goto LABEL_11;
            }
LABEL_13:
            uint64_t v19 = __CocoaSet.Iterator.next()(v8);
            if (v19)
            {
              uint64_t v20 = v19;
              uint64_t v38 = v19;
              sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
              uint64_t v22 = v21;
              swift_unknownObjectRetain(v20);
              swift_dynamicCast(&v40, &v38, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
              id v23 = v40;
              swift_unknownObjectRelease(v20);
              int64_t v18 = v10;
              uint64_t v16 = v11;
              if (v23) {
                continue;
              }
            }

            goto LABEL_41;
          }

          swift_bridgeObjectRelease(v30);
        }

        goto LABEL_41;
      }

      int64_t v18 = v10 + 5;
      if (v10 + 5 < v35)
      {
        unint64_t v25 = *(void *)(v36 + 8 * v18);
        if (!v25)
        {
          int64_t v26 = v10 + 6;
          while (v26 < v35)
          {
            unint64_t v25 = *(void *)(v36 + 8 * v26++);
            if (v25)
            {
              int64_t v18 = v26 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_41;
        }

        goto LABEL_31;
      }
    }

void *sub_1001CC674(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    uint64_t v5 = OBJC_IVAR___CSDMomentsNotification_streamToken;
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      unint64_t v10 = (unint64_t)[v7 videoStreamToken];
      if ((v10 & 0x8000000000000000LL) == 0 && v10 == *(void *)&a2[v5])
      {

        swift_bridgeObjectRelease(a1);
        return v8;
      }

      ++v6;
      if (v9 == v4) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

void *sub_1001CC7B0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      unint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v15 = v9;
      char v12 = a1(&v15);
      if (v4)
      {
        sub_1001B0F5C();

        return v10;
      }

      if ((v12 & 1) != 0)
      {
        sub_1001B0F5C();
        return v10;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

void sub_1001CC8C4(NSURL *a1@<X8>)
{
  uint64_t v2 = v1;
  TUOpenURL(v1);
  sub_1001D9088(v2);
}

void sub_1001CC8F0(NSURL *a1@<X8>)
{
  uint64_t v2 = v1;
  TUUnlockAndOpenSensitiveURL();
  sub_1001D9088(v2);
}

void sub_1001CC91C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags;
  id v3 = [objc_allocWithZone(TUFeatureFlags) init];
  *(void *)&v1[v2] = v3;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID] = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_faceTimeNotificationCenter;
  sub_1001D8FE8((uint64_t)v3, (unint64_t *)&unk_100447F00, &OBJC_CLASS___UNUserNotificationCenter_ptr);
  *(void *)&v1[v4] = sub_10029A28C();
  uint64_t v5 = (uint64_t (**)())&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_shouldDelayInviteNotification];
  *uint64_t v5 = variable initialization expression of CSDConversationSpatialPersonaResolver.forceLocalParticipantState;
  v5[1] = 0LL;
  uint64_t v6 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_openURL];
  void *v6 = 0LL;
  v6[1] = 0LL;
  uint64_t v7 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL];
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType] = 0;
  uint64_t v8 = OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_categories;
  *(void *)&v1[v8] = sub_1001CD608();
  id v9 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add];
  *id v9 = 0LL;
  v9[1] = 0LL;
  unint64_t v10 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace];
  void *v10 = 0LL;
  v10[1] = 0LL;
  uint64_t v11 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification];
  *uint64_t v11 = 0LL;
  v11[1] = 0LL;
  char v12 = &v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_updateBadgeValue];
  *char v12 = 0LL;
  v12[1] = 0LL;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "callservicesd/GroupFaceTimeNotificationProvider.swift",  53LL,  2LL,  197LL,  0);
  __break(1u);
}

void sub_1001CCAAC()
{
  id v0 = [(id)objc_opt_self(UNMutableNotificationSound) soundWithAlertType:1];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(TLAlertTopicIncomingCallFaceTimeGroupInvitation);
  sub_1001EAAA0(v1, v2, v0);
  qword_100447CF0 = (uint64_t)v0;
}

uint64_t sub_1001CCB0C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v7 = [a1 mergedRemoteMembers];
  sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v9 = v8;
  sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, v9, v10);

  uint64_t v12 = sub_10024E694(v11);
  swift_bridgeObjectRelease(v11);
  if (v12 <= 1)
  {
    id v13 = [a1 link];

    if (!v13) {
      goto LABEL_17;
    }
  }

  if (([a1 isLocallyCreated] & 1) != 0
    || [a1 state]
    || [a1 letMeInRequestState]
    || ([a1 hasJoined] & 1) != 0)
  {
    goto LABEL_17;
  }

  uint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_invitationResolver);
  id v15 = [a1 localMember];
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = [v15 handle];
  }

  else
  {
    id v17 = 0LL;
  }

  unsigned int v18 = [v14 shouldShowInvitationUserNotificationForConversation:a1 handle:v17];

  if (!v18) {
    goto LABEL_17;
  }
  id v19 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  uint64_t v20 = (uint64_t *)(v1
                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID);
  swift_beginAccess(v20, v32, 32LL, 0LL);
  sub_1001CA0B4((uint64_t)v6, *v20);
  uint64_t v22 = v21;
  swift_endAccess(v32);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRelease(v22);
  if (v22
    || ([a1 isOneToOneModeEnabled] & 1) != 0
    || ([a1 isFromStorage] & 1) != 0
    || ![(id)objc_opt_self(TUConversationManager) supportsConversations]
    || ![a1 hostedOnCurrentDevice])
  {
LABEL_17:
    char v29 = 0;
  }

  else
  {
    id v23 = [a1 activeRemoteParticipants];
    sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v25 = v24;
    sub_1001D84A4((unint64_t *)&unk_100447E90, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, v25, v26);

    sub_1001CCE5C(v27);
    char v29 = v28;
    swift_bridgeObjectRelease(v27);
  }

  return v29 & 1;
}

void sub_1001CCE5C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v5 = v4;
    sub_1001D84A4((unint64_t *)&unk_100447E90, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    id v7 = Set.Iterator.init(_cocoa:)(v29, v3, v5, v6);
    uint64_t v1 = v29[0];
    uint64_t v27 = v29[1];
    uint64_t v8 = v29[2];
    int64_t v9 = v29[3];
    unint64_t v10 = v29[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    id v7 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
  }

  int64_t v26 = (unint64_t)(v8 + 64) >> 6;
  while (1)
  {
    int64_t v14 = v9;
    if ((v1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v17 = __CocoaSet.Iterator.next()(v7);
    if (!v17) {
      goto LABEL_35;
    }
    uint64_t v18 = v17;
    uint64_t v28 = v17;
    sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v20 = v19;
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    id v21 = v30;
    swift_unknownObjectRelease(v18);
    if (!v21) {
      goto LABEL_35;
    }
LABEL_34:
    unsigned int v25 = [v21 isLocalAccountHandle];

    if (v25) {
      goto LABEL_35;
    }
  }

  if (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v9 << 6);
LABEL_33:
    id v21 = *(id *)(*(void *)(v1 + 48) + 8 * v16);
    if (!v21) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  int64_t v22 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v22 >= v26) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v14 + 2;
      if (v14 + 2 >= v26) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v14 + 3;
        if (v14 + 3 >= v26) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v27 + 8 * v9);
        if (!v23)
        {
          int64_t v9 = v14 + 4;
          if (v14 + 4 >= v26) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v27 + 8 * v9);
          if (!v23)
          {
            int64_t v9 = v14 + 5;
            if (v14 + 5 >= v26) {
              goto LABEL_35;
            }
            unint64_t v23 = *(void *)(v27 + 8 * v9);
            if (!v23)
            {
              int64_t v24 = v14 + 6;
              while (v24 < v26)
              {
                unint64_t v23 = *(void *)(v27 + 8 * v24++);
                if (v23)
                {
                  int64_t v9 = v24 - 1;
                  goto LABEL_32;
                }
              }

unint64_t sub_1001CD150(void *a1)
{
  id v1 = [a1 pseudonym];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  return 0xD000000000000015LL;
}

uint64_t sub_1001CD1F4(void *a1, char a2)
{
  uint64_t v5 = sub_1001B1234();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001D91F4();
  if ((a2 & 1) != 0) {
    uint64_t v7 = 0x2D79616C70726163LL;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v8 = 0xE800000000000000LL;
  }
  else {
    unint64_t v8 = 0xE000000000000000LL;
  }
  id v9 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  uint64_t v11 = UUID.uuidString.getter(v10);
  uint64_t v13 = v12;
  sub_1001D90B0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  swift_bridgeObjectRetain(v8);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  sub_1001B0F28();
  sub_1001B0EB8();
  return v7;
}

uint64_t sub_1001CD2E8(void *a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
}

id sub_1001CD330(uint64_t a1, char a2)
{
  id v3 = [objc_allocWithZone(TUJoinConversationRequest) initWithConversation:a1 originatingUIType:24];
  [v3 setWantsStagingArea:1];
  [v3 setVideoEnabled:a2 & 1];
  return v3;
}

void *sub_1001CD39C(void *a1)
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___TUJoinConversationRequest);
  sub_1002474D8(a1, (uint64_t)&_swiftEmptySetSingleton, 0);
  uint64_t v4 = v3;
  [v3 setWantsStagingArea:1];
  [v4 setVideoEnabled:1];
  id v5 =  [(id)objc_opt_self(TUConversationInvitationPreference) standardInvitationPreferencesForLink];
  sub_1001D8EA0(0LL, (unint64_t *)&qword_100447EB0, &OBJC_CLASS___TUConversationInvitationPreference_ptr);
  uint64_t v7 = v6;
  sub_1001D84A4( (unint64_t *)&qword_100447EB8,  (unint64_t *)&qword_100447EB0,  &OBJC_CLASS___TUConversationInvitationPreference_ptr);
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v5, v7, v8);

  sub_1001D8960(v9, v4);
  return v4;
}

uint64_t sub_1001CD494()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  return result;
}

uint64_t sub_1001CD544()
{
  v8[0] = swift_getObjectType(v0);
  uint64_t v1 = sub_1001AFF14(&qword_100447E08);
  uint64_t v2 = String.init<A>(describing:)(v8, v1);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType)) {
    uint64_t v4 = 0x656E6F6850LL;
  }
  else {
    uint64_t v4 = 0x656D695465636146LL;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType)) {
    id v5 = (void *)0xE500000000000000LL;
  }
  else {
    id v5 = (void *)0xE800000000000000LL;
  }
  v8[0] = v2;
  v8[1] = v3;
  swift_bridgeObjectRetain(v3);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  sub_1001B0EB8();
  sub_1001B0F5C();
  return v8[0];
}

uint64_t sub_1001CD5F8()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationType);
}

void *sub_1001CD608()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10024C01C((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v0 = &_swiftEmptySetSingleton;
  }

  v288 = v0;
  sub_1001D8FE8((uint64_t)v0, (unint64_t *)&unk_100447E40, &OBJC_CLASS___UNNotificationAction_ptr);
  uint64_t v1 = sub_1001F88F0(1313427274LL, (void *)0xE400000000000000LL);
  id v3 = sub_1001D8F84(1852403562LL, 0xE400000000000000LL, (uint64_t)v1, v2);
  sub_1001D8FE8((uint64_t)v3, (unint64_t *)&unk_10044A3C0, &OBJC_CLASS___UNNotificationCategory_ptr);
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v5 = sub_1001C7370(v4, 40LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10037B200;
  *(void *)(v5 + 32) = v3;
  sub_1001D8F4C(v5, v6, v7, v8, v9, v10, v11, v12, v187);
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v14 = sub_1001C7370(v13, 48LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(INJoinCallIntentIdentifier);
  *(void *)(v14 + 40) = v15;
  id v252 = v3;
  sub_1001D930C(0xD000000000000015LL, 0x800000010036D010LL, (uint64_t)v277, v14);
  id v241 = v16;
  uint64_t v23 = sub_1001D92F8((uint64_t)v241, v241, v17, v18, v19, v20, v21, v22, v188, v206);
  sub_1001D9028( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v189,  v207,  v219,  v230,  (uint64_t)v241,  (uint64_t)v252,  1LL,  3LL,  v277);
  sub_1001F88F0(0x4C41435F57454956LL, (void *)0xE90000000000004CLL);
  unsigned int v31 = sub_1001D943C();
  id v34 = sub_1001D8F84(v31 | 0x6C6C614300000000LL, 0xE800000000000000LL, v32, v33);
  uint64_t v35 = sub_1001D8F20();
  *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = v263;
  *(void *)(v35 + 32) = v34;
  sub_1001D8F4C(v35, v36, v37, v38, v39, v40, v41, v42, v190);
  id v43 = v34;
  sub_1001D930C(0xD00000000000001FLL, 0x800000010036D030LL, (uint64_t)v278, (uint64_t)_swiftEmptyArrayStorage);
  id v231 = v44;
  uint64_t v51 = sub_1001D92F8((uint64_t)v231, v231, v45, v46, v47, v48, v49, v50, v191, v208);
  sub_1001D9028( v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v192,  v209,  v220,  (uint64_t)v231,  v242,  v253,  v263,  *((uint64_t *)&v263 + 1),  v278);
  uint64_t v59 = sub_1001D9324(0xD00000000000001BLL, (uint64_t)"ACCEPT_SHARE_SCREEN_REQUEST");
  id v61 = sub_1001D8F84(0xD000000000000012LL, 0x800000010036A350LL, (uint64_t)v59, v60);
  uint64_t v62 = sub_1001D8F20();
  *(_OWORD *)(v62 + swift_weakDestroy(v0 + 16) = v264;
  *(void *)(v62 + 32) = v61;
  sub_1001D8F4C(v62, v63, v64, v65, v66, v67, v68, v69, v193);
  id v221 = v61;
  sub_1001D8F04(0xD00000000000002ELL, (uint64_t)"group-facetime-participant-screenshare-request");
  id v71 = v70;
  uint64_t v79 = sub_1001D92EC( (uint64_t)v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v194,  v210,  (uint64_t)v221,  v232,  v243,  v254,  v264,  *((uint64_t *)&v264 + 1),  v279);
  uint64_t v80 = sub_10024ABC4(v79, v71);
  sub_1001D9028(v80, v81, v82, v83, v84, v85, v86, v87, v195, v211, v222, v233, v244, v255, v265, v273, v280);
  uint64_t v88 = sub_1001D8F20();
  *(_OWORD *)(v88 + swift_weakDestroy(v0 + 16) = v266;
  *(void *)(v88 + 32) = v43;
  sub_1001D8F4C(v88, v89, v90, v91, v92, v93, v94, v95, v196);
  id v96 = v43;
  sub_1001D8F04(0xD00000000000001ELL, (uint64_t)"group-facetime-moments-request");
  id v98 = v97;
  id v106 = sub_1001D92EC( (uint64_t)v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v197,  v212,  v223,  v234,  v245,  v256,  v266,  *((uint64_t *)&v266 + 1),  v281);
  uint64_t v107 = sub_10024ABC4(v106, v98);
  sub_1001D9028(v107, v108, v109, v110, v111, v112, v113, v114, v198, v213, v224, v235, v246, v257, v267, v274, v282);
  uint64_t v115 = sub_1001D8F20();
  *(_OWORD *)(v115 + swift_weakDestroy(v0 + 16) = v268;
  *(void *)(v115 + 32) = v96;
  sub_1001D8F4C(v115, v116, v117, v118, v119, v120, v121, v122, v199);
  id v214 = v96;
  sub_1001D8F04(0xD000000000000021LL, (uint64_t)"group-facetime-let-me-in-approved");
  id v124 = v123;
  id v132 = sub_1001D92EC( (uint64_t)v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v200,  (uint64_t)v214,  v225,  v236,  v247,  v258,  v268,  *((uint64_t *)&v268 + 1),  v283);
  uint64_t v133 = sub_10024ABC4(v132, v124);
  sub_1001D9028(v133, v134, v135, v136, v137, v138, v139, v140, v201, v215, v226, v237, v248, v259, v269, v275, v284);
  sub_1001D90D8((uint64_t)"VIEW_LINK_DETAILS");
  unsigned int v141 = sub_1001D943C();
  id v144 = sub_1001D8F84(v141 | 0x6B6E694C00000000LL, 0xEF736C6961746544LL, v142, v143);
  uint64_t v145 = sub_1001D8F20();
  *(_OWORD *)(v145 + swift_weakDestroy(v0 + 16) = v270;
  *(void *)(v145 + 32) = v144;
  sub_1001D8F4C(v145, v146, v147, v148, v149, v150, v151, v152, v202);
  id v153 = v144;
  sub_1001D8F04(0xD000000000000031LL, (uint64_t)"group-facetime-let-me-in-request-pre-conversation");
  id v155 = v154;
  uint64_t v163 = sub_1001D92EC( (uint64_t)v155,  v156,  v157,  v158,  v159,  v160,  v161,  v162,  v203,  v216,  v227,  v238,  v249,  v260,  v270,  *((uint64_t *)&v270 + 1),  v285);
  uint64_t v164 = sub_10024ABC4(v163, v155);
  sub_1001D9028(v164, v165, v166, v167, v168, v169, v170, v171, v204, v217, v228, v239, v250, v261, v271, v276, v286);
  v172 = sub_1001F88F0(0x484354495753LL, (void *)0xE600000000000000LL);
  id v174 = sub_1001D8F84(0x65756E69746E6F63LL, 0xEF66666F646E6148LL, (uint64_t)v172, v173);
  uint64_t v175 = sub_1001D8F20();
  *(_OWORD *)(v175 + swift_weakDestroy(v0 + 16) = v272;
  *(void *)(v175 + 32) = v174;
  sub_1001D8F4C(v175, v176, v177, v178, v179, v180, v181, v182, v205);
  id v183 = v174;
  v184 = sub_1001F88F0(0x41454E5F4C4C4143LL, (void *)0xEB00000000594252LL);

  return v288;
}

id sub_1001CDAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v11 = [(id)swift_getObjCClassFromMetadata(v5) actionWithIdentifier:v9 title:v10 options:a5];

  return v11;
}

id sub_1001CDB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E40, &OBJC_CLASS___UNNotificationAction_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  id v18 =  [(id)swift_getObjCClassFromMetadata(v8) categoryWithIdentifier:v14 actions:isa intentIdentifiers:v16 hiddenPreviewsBodyPlaceholder:v17 options:a7];

  return v18;
}

uint64_t sub_1001CDC48()
{
  return swift_bridgeObjectRetain(*(void *)(v0
                                            + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_categories));
}

uint64_t sub_1001CDC58(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

void sub_1001CDC74()
{
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_1001C7290();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B10F0();
  sub_1001BA03C(v4, (uint64_t)v19);
  uint64_t v9 = sub_1001C7370((uint64_t)&unk_1003DF3A0, 64LL);
  sub_1001D700C(v19, v9 + 16);
  *(void *)(v9 + 56) = v0;
  v17[4] = sub_1001D7024;
  uint64_t v18 = v9;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  v17[2] = sub_1002356BC;
  v17[3] = &unk_1003DF3B8;
  NSString v10 = _Block_copy(v17);
  static DispatchQoS.unspecified.getter(v0);
  Class v16 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v11 = sub_1001C7340();
  sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  sub_1001D918C((uint64_t)&v16, v11, v12);
  uint64_t v13 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v13, v14, v15, v10);
  _Block_release(v10);
  sub_1001D924C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v7);
  swift_release(v18);
  sub_1001B0FF8();
}

void sub_1001CDE1C(void *a1)
{
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_1001B204C(a1, v4);
  v20._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  char v6 = sub_1001CA774(v20);
  if (v6 != 6)
  {
    char v13 = v6;
    uint64_t v14 = a1[3];
    uint64_t v15 = a1[4];
    sub_1001B204C(a1, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
    uint64_t v17 = v16;
    v18._countAndFlagsBits = 0x2D79616C70726163LL;
    v18._object = (void *)0xE800000000000000LL;
    String.hasPrefix(_:)(v18);
    swift_bridgeObjectRelease(v17);
    __asm { BR              X10 }
  }

  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_1001B0D98(v7, (uint64_t)qword_100454210);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v8, v9, v10);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v11, "Unknown notification response received", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }
}

uint64_t sub_1001CE42C(void **a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v5 = sub_1001CD1F4(*a1, a3);
  uint64_t v7 = v6;
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  sub_1001B204C(a4, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  if (v5 == v10 && v7 == v11)
  {
    char v14 = 1;
    uint64_t v13 = v7;
  }

  else
  {
    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v10, v11, 0LL);
  }

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

void sub_1001CE4E4(void *a1)
{
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v59 - v11;
  __chkstk_darwin(v10);
  char v14 = (char *)&v59 - v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_1001B204C(a1, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  uint64_t v65 = 0x796E6F6475657370LL;
  unint64_t v66 = 0xE90000000000006DLL;
  AnyHashable.init<A>(_:)(v67, &v65, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v67, v17, &v63);
  swift_bridgeObjectRelease(v17);
  sub_1001D8504((uint64_t)v67);
  if (!v64)
  {
    sub_1001C6CE4((uint64_t)&v63, (uint64_t *)&unk_1004474B0);
    goto LABEL_10;
  }

  if ((swift_dynamicCast(&v65, &v63, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_10:
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v37, (uint64_t)qword_100454210);
    uint64_t v38 = sub_1001BA03C((uint64_t)a1, (uint64_t)v67);
    uint64_t v41 = (void *)Logger.logObject.getter(v38, v39, v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v41, v42))
    {
      sub_1001B0438(v67);
LABEL_21:

      return;
    }

    id v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = v44;
    *(_DWORD *)id v43 = 136315138;
    sub_1001BA03C((uint64_t)v67, (uint64_t)&v63);
    uint64_t v45 = sub_1001AFF14(&qword_100447DF8);
    uint64_t v46 = String.init<A>(reflecting:)(&v63, v45);
    unint64_t v48 = v47;
    *(void *)&__int128 v63 = sub_1001D7CF0(v46, v47, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, (char *)&v63 + 8, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease(v48);
    sub_1001B0438(v67);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v41,  v42,  "Ignoring notification response %s because a pseudonym is missing/could not be typecasted in userInfo",  v43,  0xCu);
    swift_arrayDestroy(v44, 1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
    uint64_t v49 = v43;
LABEL_20:
    swift_slowDealloc(v49, -1LL, -1LL);
    goto LABEL_21;
  }

  uint64_t v18 = v65;
  uint64_t v19 = v66;
  Swift::String v20 = (void *)objc_opt_self(&OBJC_CLASS___NSURL);
  id v21 = sub_1001D8A04(v18, v19, v20);
  if (!v21)
  {
    sub_1001A9670((uint64_t)v4, 1LL, 1LL, v5);
    goto LABEL_16;
  }

  uint64_t v22 = v21;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v23(v4, v12, v5);
  sub_1001A9670((uint64_t)v4, 0LL, 1LL, v5);
  if (sub_1001AB0AC((uint64_t)v4, 1LL, v5) == 1)
  {
LABEL_16:
    sub_1001C6CE4((uint64_t)v4, (uint64_t *)&unk_100447DE0);
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = sub_1001B0D98(v50, (uint64_t)qword_100454210);
    uint64_t v41 = (void *)Logger.logObject.getter(v51, v52, v53);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v41, v54)) {
      goto LABEL_21;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v41,  v54,  "Failed to construct FaceTime app URL to view link details",  v55,  2u);
    uint64_t v49 = v55;
    goto LABEL_20;
  }

  v23(v14, v4, v5);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v24, (uint64_t)qword_100454210);
  uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 16))(v9, v14, v5);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v25, v26, v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v61 = swift_slowAlloc(32LL, -1LL);
    v67[0] = v61;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v60 = v30 + 4;
    sub_1001C6B98( (unint64_t *)&qword_100447E00,  (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v5, v31);
    unint64_t v34 = v33;
    *(void *)&__int128 v63 = sub_1001D7CF0(v32, v33, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, (char *)&v63 + 8, v60, v30 + 12);
    swift_bridgeObjectRelease(v34);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v9, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Launching FaceTime for notification response via url %s",  v30,  0xCu);
    uint64_t v36 = v61;
    swift_arrayDestroy(v61, 1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v9, v5);
  }

  uint64_t v56 = v62 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL;
  swift_beginAccess( v62 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_unlockAndOpenSensitiveURL,  v67,  32LL,  0LL);
  uint64_t v57 = *(void (**)(char *))v56;
  if (*(void *)v56)
  {
    uint64_t v58 = *(void *)(v56 + 8);
    swift_endAccess(v67);
    swift_retain(v58);
    v57(v14);
    sub_1001B5D3C((uint64_t)v57, v58);
    v35(v14, v5);
  }

  else
  {
    v35(v14, v5);
    swift_endAccess(v67);
  }

void sub_1001CEB50(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_1001B204C(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  uint64_t v22 = 0xD000000000000018LL;
  unint64_t v23 = 0x800000010036CFD0LL;
  AnyHashable.init<A>(_:)(v24, &v22, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v24, v4, &v20);
  swift_bridgeObjectRelease(v4);
  sub_1001D8504((uint64_t)v24);
  if (v21)
  {
    if ((swift_dynamicCast(&v22, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      unint64_t v5 = v23;
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      id v7 = objc_msgSend(v6, "tu_handoffEligibility");

      if (v7)
      {
        id v8 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
        [v8 continueHandoffForConversationWithEligibility:v7];

        goto LABEL_11;
      }
    }
  }

  else
  {
    sub_1001C6CE4((uint64_t)&v20, (uint64_t *)&unk_1004474B0);
  }

  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v9, (uint64_t)qword_100454210);
  uint64_t v10 = sub_1001BA03C((uint64_t)a1, (uint64_t)v24);
  id v8 = (id)Logger.logObject.getter(v10, v11, v12);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v8, v13))
  {
    char v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v15;
    *(_DWORD *)char v14 = 136315138;
    sub_1001BA03C((uint64_t)v24, (uint64_t)&v20);
    uint64_t v16 = sub_1001AFF14(&qword_100447DF8);
    uint64_t v17 = String.init<A>(reflecting:)(&v20, v16);
    unint64_t v19 = v18;
    *(void *)&__int128 v20 = sub_1001D7CF0(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 8, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    sub_1001B0438(v24);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  v13,  "Ignoring notification response %s because a handoff dynamic identifier is missing/could not be typecasted in userInfo",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    sub_1001B0438(v24);
  }

void sub_1001CEE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v116 - v10;
  Notification.object.getter(&aBlock, v9);
  if (v122)
  {
    uint64_t v12 = type metadata accessor for MomentsNotification();
    if ((swift_dynamicCast(&v129, &aBlock, (char *)&type metadata for Any + 8, v12, 6LL) & 1) != 0)
    {
      uint64_t v119 = v4;
      os_log_type_t v13 = v129;
      uint64_t v129 = 0LL;
      unint64_t v130 = 0xE000000000000000LL;
      uint64_t v127 = 0LL;
      unint64_t v128 = 0xE000000000000000LL;
      id v14 =  [*(id *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager) activeConversations];
      sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
      uint64_t v16 = v15;
      sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
      uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v14, v16, v17);

      unint64_t v19 = v13;
      sub_1001CB0EC(v18, v19);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease(v18);
      if (v21)
      {
        id v22 = [v21 activeRemoteParticipants];
        uint64_t v118 = v19;
        sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
        uint64_t v24 = v23;
        sub_1001D84A4((unint64_t *)&unk_100447E90, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
        uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v24, v25);

        uint64_t v27 = v118;
        sub_1001CC308(v26, v27);
        os_log_type_t v29 = v28;
        swift_bridgeObjectRelease(v26);
        if (v29)
        {
          if (([*(id *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags) conversationOneToOneModeEnabled] & 1) != 0 && objc_msgSend(v21, "isOneToOneModeEnabled"))
          {
            if (qword_100446950 != -1) {
              swift_once(&qword_100446950, sub_100258A88);
            }
            uint64_t v30 = type metadata accessor for Logger(0LL);
            sub_1001B0D98(v30, (uint64_t)qword_100454210);
            uint64_t v31 = v119;
            uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v119);
            uint64_t v35 = (char *)Logger.logObject.getter(v32, v33, v34);
            os_log_type_t v36 = static os_log_type_t.info.getter();
            if (os_log_type_enabled((os_log_t)v35, v36))
            {
              uint64_t v118 = v35;
              uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v38 = swift_slowAlloc(32LL, -1LL);
              uint64_t v117 = v38;
              uint64_t v125 = v38;
              *(_DWORD *)uint64_t v37 = 136315138;
              uint64_t v116 = v37 + 4;
              Notification.object.getter(&aBlock, v38);
              uint64_t v39 = sub_1001AEAD8((uint64_t)&aBlock);
              unint64_t v41 = v40;
              sub_1001C6CE4((uint64_t)&aBlock, (uint64_t *)&unk_1004474B0);
              uint64_t aBlock = sub_1001D7CF0(v39, v41, &v125);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v121, v116, v37 + 12);
              swift_bridgeObjectRelease(v41);
              (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v119);
              uint64_t v35 = v118;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v118,  v36,  "Handle momentsStartedRemoteCapture in-app %s",  v37,  0xCu);
              uint64_t v42 = v117;
              swift_arrayDestroy(v117, 1LL);
              swift_slowDealloc(v42, -1LL, -1LL);
              swift_slowDealloc(v37, -1LL, -1LL);
            }

            else
            {

              (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v31);
            }

            goto LABEL_36;
          }

          goto LABEL_21;
        }

        if (qword_100446950 != -1) {
          swift_once(&qword_100446950, sub_100258A88);
        }
        uint64_t v92 = type metadata accessor for Logger(0LL);
        sub_1001B0D98(v92, (uint64_t)qword_100454210);
        uint64_t v93 = v21;
        uint64_t v94 = v27;
        uint64_t v95 = v93;
        id v98 = (void *)Logger.logObject.getter(v95, v96, v97);
        os_log_type_t v99 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled((os_log_t)v98, v99))
        {

          goto LABEL_36;
        }

        uint64_t v100 = swift_slowAlloc(22LL, -1LL);
        uint64_t v101 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v119 = swift_slowAlloc(32LL, -1LL);
        uint64_t aBlock = v119;
        *(_DWORD *)uint64_t v100 = 138412546;
        uint64_t v125 = (uint64_t)v95;
        uint64_t v102 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v100 + 4, v100 + 12);
        *uint64_t v101 = v21;

        *(_WORD *)(v100 + 12) = 2080;
        uint64_t v103 = *(void *)&v94[OBJC_IVAR___CSDMomentsNotification_requesterID];
        unint64_t v104 = *(void *)&v94[OBJC_IVAR___CSDMomentsNotification_requesterID + 8];
        swift_bridgeObjectRetain(v104);
        uint64_t v125 = sub_1001D7CF0(v103, v104, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v100 + 14, v100 + 22);

        swift_bridgeObjectRelease(v104);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v98,  v99,  "could not find participant for participant in conversation: %@ for requesterID: %s",  (uint8_t *)v100,  0x16u);
        sub_1001AFF14(&qword_100447E80);
        swift_arrayDestroy(v101, 1LL);
        swift_slowDealloc(v101, -1LL, -1LL);
        uint64_t v105 = v119;
        swift_arrayDestroy(v119, 1LL);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v100, -1LL, -1LL);
      }

      else
      {
        if ([*(id *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags) conversationOneToOneModeEnabled])
        {
          id v55 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
          uint64_t v56 = (dispatch_queue_s *)[v55 queue];

          os_log_type_t v29 = (void *)swift_allocObject(&unk_1003DF558, 40LL, 7LL);
          _OWORD v29[2] = v19;
          void v29[3] = &v129;
          v29[4] = &v127;
          uint64_t v21 = (void *)swift_allocObject(&unk_1003DF580, 32LL, 7LL);
          uint64_t v57 = sub_1001D8E84;
          v21[2] = sub_1001D8E84;
          v21[3] = v29;
          id v123 = sub_1001C7040;
          id v124 = v21;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          v121[0] = 1107296256LL;
          v121[1] = sub_100275F14;
          uint64_t v122 = &unk_1003DF598;
          uint64_t v58 = _Block_copy(&aBlock);
          uint64_t v59 = v124;
          uint64_t v118 = v19;
          uint64_t v60 = v19;
          swift_retain(v21);
          swift_release(v59);
          dispatch_sync(v56, v58);

          _Block_release(v58);
          LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(v21, "", 136LL, 455LL, 48LL, 1LL);
          swift_release(v21);
          if ((v56 & 1) == 0)
          {
LABEL_22:
            id v72 = [objc_allocWithZone(UNMutableNotificationContent) init];
            uint64_t v73 = sub_1001F88F0(0xD000000000000025LL, (void *)0x800000010036D2D0LL);
            uint64_t v75 = v74;
            uint64_t v76 = sub_1001AFF14((uint64_t *)&unk_100447E30);
            uint64_t v77 = swift_allocObject(v76, 72LL, 7LL);
            *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
            uint64_t v79 = (uint64_t)v129;
            unint64_t v78 = v130;
            *(void *)(v77 + 56) = &type metadata for String;
            *(void *)(v77 + 64) = sub_1001B2330();
            *(void *)(v77 + 32) = v79;
            *(void *)(v77 + 40) = v78;
            swift_bridgeObjectRetain(v78);
            String.init(format:_:)(v73, v75, v77);
            uint64_t v81 = v80;
            swift_bridgeObjectRelease(v75);
            NSString v82 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v81);
            [v72 setBody:v82];

            NSString v83 = String._bridgeToObjectiveC()();
            [v72 setCategoryIdentifier:v83];

            sub_1001F88F0(0xD000000000000021LL, (void *)0x800000010036D300LL);
            uint64_t v85 = v84;
            NSString v86 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v85);
            [v72 setTitle:v86];

            [v72 setShouldSuppressDefaultAction:1];
            [v72 setShouldIgnoreDoNotDisturb:1];
            sub_1001CD544();
            sub_10024D004();
            sub_1001D8EA0(0LL, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
            uint64_t v87 = v127;
            uint64_t v88 = v128;
            swift_bridgeObjectRetain(v128);
            id v89 = v72;
            sub_10023DB9C(v87, v88, v89, 0LL);
            uint64_t v91 = v90;
            [v90 setDestinations:3];
            sub_1001CFEAC(v91);

            swift_bridgeObjectRelease(v128);
            swift_bridgeObjectRelease(v130);
            sub_1001B5D3C((uint64_t)v57, (uint64_t)v29);
            return;
          }

          __break(1u);
LABEL_21:
          uint64_t v62 = *(uint64_t (**)(void))(a2
                                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation);
          uint64_t v61 = *(void *)(a2
                          + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation
                          + 8);
          swift_retain(v61);
          id v63 = [v29 handle];
          uint64_t v64 = v62();
          unint64_t v66 = v65;

          swift_release(v61);
          unint64_t v67 = v130;
          uint64_t v129 = (void *)v64;
          unint64_t v130 = v66;
          swift_bridgeObjectRelease(v67);
          uint64_t v68 = sub_1001CD2E8(v29);
          unint64_t v70 = v69;

          unint64_t v71 = v128;
          uint64_t v127 = v68;
          unint64_t v128 = v70;
          swift_bridgeObjectRelease(v71);
          uint64_t v57 = 0LL;
          os_log_type_t v29 = 0LL;
          goto LABEL_22;
        }

        if (qword_100446950 != -1) {
          swift_once(&qword_100446950, sub_100258A88);
        }
        uint64_t v106 = type metadata accessor for Logger(0LL);
        sub_1001B0D98(v106, (uint64_t)qword_100454210);
        uint64_t v107 = v19;
        id v98 = (void *)Logger.logObject.getter(v107, v108, v109);
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled((os_log_t)v98, v110))
        {

          goto LABEL_36;
        }

        uint64_t v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v112 = swift_slowAlloc(32LL, -1LL);
        uint64_t aBlock = v112;
        *(_DWORD *)uint64_t v111 = 136315138;
        uint64_t v125 = *(void *)&v107[OBJC_IVAR___CSDMomentsNotification_streamToken];
        uint64_t v113 = String.init<A>(reflecting:)(&v125, &type metadata for UInt);
        unint64_t v115 = v114;
        uint64_t v125 = sub_1001D7CF0(v113, v114, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v111 + 4, v111 + 12);

        swift_bridgeObjectRelease(v115);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v98,  v110,  "could not find conversation for notification stream token: %s",  v111,  0xCu);
        swift_arrayDestroy(v112, 1LL);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v111, -1LL, -1LL);
      }

LABEL_36:
      swift_bridgeObjectRelease(v128);
      swift_bridgeObjectRelease(v130);
      return;
    }
  }

  else
  {
    sub_1001C6CE4((uint64_t)&aBlock, (uint64_t *)&unk_1004474B0);
  }

  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v43 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v43, (uint64_t)qword_100454210);
  uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, a1, v4);
  unint64_t v47 = (os_log_s *)Logger.logObject.getter(v44, v45, v46);
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc(12LL, -1LL);
    uint64_t v119 = v4;
    uint64_t v50 = (uint8_t *)v49;
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    uint64_t v129 = (void *)v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    Notification.object.getter(&aBlock, v51);
    uint64_t v52 = sub_1001AEAD8((uint64_t)&aBlock);
    unint64_t v54 = v53;
    sub_1001C6CE4((uint64_t)&aBlock, (uint64_t *)&unk_1004474B0);
    uint64_t aBlock = sub_1001D7CF0(v52, v54, (uint64_t *)&v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v121, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v54);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v119);
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "momentsStartedRemoteCapture received invalid notification object: %s",  v50,  0xCu);
    swift_arrayDestroy(v51, 1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }
}

void sub_1001CFB8C(void *a1, uint64_t *a2, uint64_t *a3)
{
  id v6 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v7 = [v6 currentVideoCalls];

  sub_1001D8EA0(0LL, (unint64_t *)&qword_10044AB70, &OBJC_CLASS___TUCall_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  uint64_t v10 = a1;
  uint64_t v11 = sub_1001CC674(v9, v10);
  swift_bridgeObjectRelease(v9);
  if (v11)
  {
    sub_1001D8B20(v11, (SEL *)&selRef_displayFirstName);
    if (v13)
    {
      uint64_t v14 = v12;
      uint64_t v15 = v13;
    }

    else
    {
      id v26 = [v11 displayName];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v15 = v27;
    }

    uint64_t v28 = a2[1];
    *a2 = v14;
    a2[1] = v15;
    swift_bridgeObjectRelease(v28);
    id v29 = [v11 uniqueProxyIdentifier];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    uint64_t v33 = a3[1];
    *a3 = v30;
    a3[1] = v32;
    swift_bridgeObjectRelease(v33);
  }

  else
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v16, (uint64_t)qword_100454210);
    uint64_t v34 = v10;
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v34, v17, v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      v36[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v35 = *(void *)&v34[OBJC_IVAR___CSDMomentsNotification_streamToken];
      uint64_t v23 = String.init<A>(reflecting:)(&v35, &type metadata for UInt);
      unint64_t v25 = v24;
      uint64_t v35 = sub_1001D7CF0(v23, v24, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v21 + 4, v21 + 12);

      swift_bridgeObjectRelease(v25);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "could not find conversation or call for notification stream token: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
    }
  }

void sub_1001CFEAC(void *a1)
{
  if ([*(id *)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_ftNetworkSupport) validNetworkReachable])
  {
    uint64_t v3 = *(void (**)(void *))(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add);
    if (v3)
    {
      uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add + 8);
      swift_retain(v4);
      v3(a1);
      sub_1001B5D3C((uint64_t)v3, v4);
    }
  }

  else
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v5, (uint64_t)qword_100454210);
    id v13 = a1;
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v13, v6, v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v10 = 138412290;
      id v14 = v13;
      id v12 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
      *uint64_t v11 = v13;

      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Ignoring adding notification request %@ since valid network is not reachable",  v10,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v11, 1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
    }
  }

void sub_1001D00E0()
{
  uint64_t v28 = v3;
  uint64_t v25 = v4;
  uint64_t v26 = v5;
  uint64_t v7 = v6;
  uint64_t v31 = *(void *)(type metadata accessor for DispatchWorkItemFlags(0LL) - 8);
  sub_1001C7334();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1001C7290();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  sub_1001C7334();
  __chkstk_darwin(v10);
  sub_1001B10F0();
  uint64_t v11 = sub_1001C9578();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  id v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)&v0[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v7, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(v25, v17 + 8, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  *(void *)(v18 + v17) = v0;
  v33[4] = v26;
  uint64_t v34 = v18;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1107296256LL;
  _OWORD v33[2] = sub_1002356BC;
  void v33[3] = v28;
  unint64_t v19 = _Block_copy(v33);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v20 = sub_1001C7340();
  sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
  sub_1001D918C((uint64_t)&v32, v20, v21);
  uint64_t v22 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v22, v23, v24, v19);
  _Block_release(v19);
  sub_1001D924C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v2, v30);
  swift_release(v34);
  sub_1001B0FF8();
}

void sub_1001D02E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_1001B0D98(v8, (uint64_t)qword_100454210);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v10, v11, v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(12LL, -1LL);
    v55[1] = v9;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    v58[0] = v17;
    uint64_t v56 = a2;
    *(_DWORD *)uint64_t v16 = 136315138;
    v55[0] = a1;
    sub_1001C6B98( (unint64_t *)&unk_100447EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    unint64_t v21 = v20;
    *(void *)&__int128 v59 = sub_1001D7CF0(v19, v20, v58);
    a2 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 8, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Handling notification for pending message did receive invite: %s",  v16,  0xCu);
    swift_arrayDestroy(v17, 1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v22 = Notification.userInfo.getter();
  if (!v22)
  {
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    goto LABEL_15;
  }

  uint64_t v23 = v22;
  v57[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDIDSPendingChatKey");
  v57[1] = v24;
  AnyHashable.init<A>(_:)(v58, v57, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v58, v23, &v59);
  swift_bridgeObjectRelease(v23);
  sub_1001D8504((uint64_t)v58);
  if (!*((void *)&v60 + 1))
  {
LABEL_15:
    sub_1001C6CE4((uint64_t)&v59, (uint64_t *)&unk_1004474B0);
    goto LABEL_16;
  }

  uint64_t v25 = type metadata accessor for GroupIDSPendingChat(0LL);
  uint64_t v26 = swift_dynamicCast(v58, &v59, (char *)&type metadata for Any + 8, v25, 6LL);
  if ((v26 & 1) != 0)
  {
    uint64_t v29 = (char *)v58[0];
    id v30 = [objc_allocWithZone(UNMutableNotificationContent) init];
    uint64_t v32 = *(void (**)(void))(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName);
    uint64_t v31 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName + 8);
    uint64_t v33 = OBJC_IVAR___CSDGroupIDSPendingChat_handle;
    uint64_t v34 = *(void **)&v29[OBJC_IVAR___CSDGroupIDSPendingChat_handle];
    swift_retain(v31);
    id v35 = v34;
    v32();
    uint64_t v37 = v36;

    swift_release(v31);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    [v30 setTitle:v38];

    sub_1001F88F0(0xD000000000000012LL, (void *)0x800000010036D290LL);
    uint64_t v40 = v39;
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v40);
    [v30 setBody:v41];

    NSString v42 = String._bridgeToObjectiveC()();
    [v30 setCategoryIdentifier:v42];

    if (qword_1004466B8 != -1) {
      swift_once(&qword_1004466B8, sub_1001CCAAC);
    }
    [v30 setSound:qword_100447CF0];
    NSString v43 = [*(id *)&v29[v33] value];
    if (!v43)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v45 = v44;
      NSString v43 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45);
    }

    [v30 setThreadIdentifier:v43];

    sub_1001CD544();
    sub_10024D004();
    sub_1001D8EA0(0LL, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
    uint64_t v47 = UUID.uuidString.getter(v46);
    uint64_t v49 = v48;
    id v50 = v30;
    sub_10023DB9C(v47, v49, v50, 0LL);
    uint64_t v52 = v51;
    [v51 setDestinations:15];
    sub_1001CFEAC(v52);

    goto LABEL_18;
  }

uint64_t sub_1001D089C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001C9578();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001D920C();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v8 = a1;
  sub_1001D00E0();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

uint64_t type metadata accessor for GroupFaceTimeNotificationProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd33GroupFaceTimeNotificationProvider);
}

uint64_t sub_1001D0AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001CA7B8(a1);
}

uint64_t sub_1001D0AB8(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58(a1, a2, &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_add, sub_1001D8ED8);
}

uint64_t sub_1001D0ADC(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58( a1,  a2,  &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace,  sub_1001D8ED8);
}

uint64_t sub_1001D0B00(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58( a1,  a2,  &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification,  sub_1001D8ED8);
}

uint64_t sub_1001D0B24(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58( a1,  a2,  &OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_updateBadgeValue,  sub_1001B5D3C);
}

id sub_1001D0B4C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [objc_allocWithZone(UNMutableNotificationContent) init];
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setBody:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v10 setCategoryIdentifier:v12];

  if (qword_1004466B8 != -1) {
    swift_once(&qword_1004466B8, sub_1001CCAAC);
  }
  [v10 setSound:qword_100447CF0];
  os_log_type_t v14 = *(void (**)(void))(v2
                         + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation);
  uint64_t v13 = *(void *)(v2
                  + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleNameWithConversation
                  + 8);
  swift_retain(v13);
  id v15 = [a1 initiator];
  v14();
  uint64_t v17 = v16;

  swift_release(v13);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  [v10 setTitle:v18];

  sub_1001CD544();
  sub_10024D004();
  sub_1001D8B20(a1, (SEL *)&selRef_messagesGroupName);
  if (v19) {
    goto LABEL_4;
  }
  id v21 = [a1 link];

  if (!v21)
  {
    uint64_t v37 = sub_1001F88F0(0x49564E495F544647LL, (void *)0xEA00000000004554LL);
    uint64_t v49 = v38;
    id v50 = v37;
    uint64_t v39 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
    *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    NSString v42 = *(uint64_t (**)(void *))(v2
                                           + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName);
    uint64_t v41 = *(void *)(v2
                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName
                    + 8);
    swift_retain(v41);
    uint64_t v43 = v42(a1);
    uint64_t v45 = v44;
    swift_release(v41);
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 64) = sub_1001B2330();
    *(void *)(v40 + 32) = v43;
    *(void *)(v40 + 40) = v45;
    uint64_t v46 = v49;
    String.init(format:_:)(v50, v49, v40);
    uint64_t v20 = v47;
    swift_bridgeObjectRelease(v46);
    goto LABEL_11;
  }

  id v22 = [a1 link];
  if (v22
    && (v23 = v22, unsigned int v24 = [v22 isLocallyCreated], v23, v24)
    && (id v25 = [a1 link]) != 0
    && (sub_1001D8B6C(v25, (SEL *)&selRef_linkName), v19))
  {
LABEL_4:
    uint64_t v20 = v19;
  }

  else
  {
    sub_1001F88F0(0x454D495445434146LL, (void *)0xED00004B4E494C5FLL);
    uint64_t v20 = v26;
  }

uint64_t sub_1001D1044@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v53 = type metadata accessor for URLComponents(0LL);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v5 = *(void *)(v50 - 8);
  uint64_t v6 = __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v10);
  NSString v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v48 - v18;
  id v20 = [a1 messagesGroupUUID];
  if (!v20)
  {
    sub_1001A9670((uint64_t)v12, 1LL, 1LL, v13);
    goto LABEL_7;
  }

  id v21 = v20;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  id v22 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v22(v12, v17, v13);
  sub_1001A9670((uint64_t)v12, 0LL, 1LL, v13);
  if (sub_1001AB0AC((uint64_t)v12, 1LL, v13) == 1)
  {
LABEL_7:
    sub_1001C6CE4((uint64_t)v12, (uint64_t *)&unk_10044A400);
    NSString v27 = _swiftEmptyArrayStorage;
    uint64_t v30 = v50;
    goto LABEL_8;
  }

  uint64_t v23 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v19, v12, v13);
  uint64_t v24 = UUID.uuidString.getter(v23);
  uint64_t v26 = v25;
  URLQueryItem.init(name:value:)(0x646970756F7267LL, 0xE700000000000000LL, v24, v25);
  swift_bridgeObjectRelease(v26);
  NSString v27 = (void *)sub_1002B0240();
  unint64_t v28 = v27[2];
  if (v28 >= v27[3] >> 1) {
    NSString v27 = (void *)sub_1002B0240();
  }
  _OWORD v27[2] = v28 + 1;
  id v29 = v9;
  uint64_t v30 = v50;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v27 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v28,
    v29,
    v50);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
LABEL_8:
  id v31 = [a1 remoteMembers];
  sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v33 = v32;
  sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v33, v34);

  sub_1001C9580(v35);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease(v35);
  uint64_t v54 = v37;
  uint64_t v38 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
  sub_1001C6AE8((unint64_t *)&qword_1004474A0, (uint64_t *)&unk_100447EE0);
  uint64_t v40 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v38, v39);
  uint64_t v42 = v41;
  swift_bridgeObjectRelease(v37);
  uint64_t v43 = v49;
  URLQueryItem.init(name:value:)(0x6573736572646461LL, 0xE900000000000073LL, v40, v42);
  swift_bridgeObjectRelease(v42);
  if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
    NSString v27 = (void *)sub_1002B0240();
  }
  unint64_t v44 = v27[2];
  if (v44 >= v27[3] >> 1) {
    NSString v27 = (void *)sub_1002B0240();
  }
  _OWORD v27[2] = v44 + 1;
  uint64_t v45 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v27 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v44,
          v43,
          v30);
  URLComponents.init()(v45);
  URLComponents.scheme.setter(7564659LL, 0xE300000000000000LL);
  URLComponents.path.setter(1852141679LL, 0xE400000000000000LL);
  uint64_t v46 = URLComponents.queryItems.setter(v27);
  URLComponents.url.getter(v46);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v4, v53);
}

uint64_t sub_1001D1504(void *a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001F88F0(0xD000000000000012LL, (void *)0x800000010036D290LL);
  uint64_t v7 = v6;
  uint64_t v51 = v1;
  id v8 = sub_1001D0B4C(a1);
  swift_bridgeObjectRelease(v7);
  id v50 = a1;
  id v9 = [a1 remoteMembers];
  sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v11 = v10;
  sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v9, v11, v12);

  uint64_t v14 = (uint64_t)sub_1001D19A8(v13);
  swift_bridgeObjectRelease(v13);
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v48 = v14;
    }
    else {
      uint64_t v48 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v48);
    uint64_t v15 = result;
  }

  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v14);
  }

  uint64_t v54 = v3;
  id v55 = v8;
  uint64_t v53 = v4;
  uint64_t v49 = 0LL;
  if (!v15)
  {
LABEL_14:
    swift_bridgeObjectRelease_n(v14, 2LL);
    id v29 = v55;
    sub_10024D040();
    uint64_t v30 = (uint64_t)v50;
    id v31 = [v50 activeRemoteParticipants];
    sub_1001D8EA0(0LL, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v33 = v32;
    sub_1001D84A4((unint64_t *)&unk_100447E90, &qword_100447E88, &OBJC_CLASS___TUConversationParticipant_ptr);
    uint64_t v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v33, v34);

    sub_1001C9AE0(v35);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v35);
    sub_1001D8AC8(v37, v29);
    strcpy((char *)v57, "joinRequestURL");
    HIBYTE(v57[1]) = -18;
    AnyHashable.init<A>(_:)(v58, v57, &type metadata for String, &protocol witness table for String);
    id v38 = sub_1001CD330(v30, 1);
    id v39 = [v38 URL];

    uint64_t v40 = v52;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v39);

    uint64_t v41 = URL.absoluteString.getter();
    uint64_t v43 = v42;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v54);
    v57[3] = &type metadata for String;
    v57[0] = v41;
    v57[1] = v43;
    id v44 = [v29 userInfo];
    uint64_t v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v44,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    uint64_t v56 = v45;
    sub_1001FC358((uint64_t)v57, (uint64_t)v58);
    uint64_t v46 = v56;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v46);
    [v29 setUserInfo:isa];

    return (uint64_t)v29;
  }

  if (v15 >= 1)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = _swiftEmptyArrayStorage;
    do
    {
      if ((v14 & 0xC000000000000001LL) != 0) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      }
      else {
        id v19 = *(id *)(v14 + 8 * v17 + 32);
      }
      id v20 = v19;
      id v21 = objc_msgSend(v19, "value", v49);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v24 = v23;

      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      {
        sub_1002B00EC();
        uint64_t v18 = v27;
      }

      unint64_t v25 = v18[2];
      if (v25 >= v18[3] >> 1)
      {
        sub_1002B00EC();
        uint64_t v18 = v28;
      }

      ++v17;
      v18[2] = v25 + 1;
      uint64_t v26 = &v18[2 * v25];
      v26[4] = v22;
      void v26[5] = v24;
    }

    while (v15 != v17);
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

void *sub_1001D19A8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v35 = _swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v5 = v4;
    sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t result = Set.Iterator.init(_cocoa:)(v34, v3, v5, v6);
    uint64_t v1 = v34[0];
    uint64_t v31 = v34[1];
    uint64_t v8 = v34[2];
    int64_t v9 = v34[3];
    unint64_t v10 = v34[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    uint64_t result = (void *)swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
  }

  int64_t v30 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v10)
    {
      uint64_t v14 = (v10 - 1) & v10;
      unint64_t v15 = __clz(__rbit64(v10)) | (v9 << 6);
      int64_t v16 = v9;
      goto LABEL_32;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v22 >= v30) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v31 + 8 * v22);
    int64_t v16 = v9 + 1;
    if (!v23)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v30) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v31 + 8 * v16);
      if (!v23)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v30) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v31 + 8 * v16);
        if (!v23)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v30) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v31 + 8 * v16);
          if (!v23)
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v30) {
              goto LABEL_35;
            }
            unint64_t v23 = *(void *)(v31 + 8 * v16);
            if (!v23)
            {
              int64_t v24 = v9 + 6;
              while (v24 < v30)
              {
                unint64_t v23 = *(void *)(v31 + 8 * v24++);
                if (v23)
                {
                  int64_t v16 = v24 - 1;
                  goto LABEL_31;
                }
              }

void sub_1001D1D08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v104 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v102 = *(void *)(v11 - 8);
  uint64_t v103 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Calendar(0LL);
  uint64_t v100 = *(void *)(v14 - 8);
  uint64_t v101 = v14;
  __chkstk_darwin(v14);
  int64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for URL(0LL);
  uint64_t v98 = *(void *)(v20 - 8);
  uint64_t v99 = v20;
  __chkstk_darwin(v20);
  int64_t v22 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    id v105 = a3;
  }

  else if (!a2 || (id v105 = [a2 link]) == 0)
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v25, (uint64_t)qword_100454210);
    id v105 = a2;
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v105, v26, v27);
    os_log_type_t v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = 7104878LL;
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      if (a2)
      {
        uint64_t v109 = (uint64_t)v105;
        sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
        uint64_t v34 = v33;
        id v35 = v105;
        uint64_t v30 = String.init<A>(reflecting:)(&v109, v34);
        unint64_t v37 = v36;
      }

      else
      {
        unint64_t v37 = 0xE300000000000000LL;
      }

      uint64_t v109 = sub_1001D7CF0(v30, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 4, v31 + 12);

      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v31 + 12) = 2080;
      uint64_t v109 = sub_1001D7CF0(7104878LL, 0xE300000000000000LL, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 14, v31 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Failed to determine conversation link for pending member notification with conversation %s and conversationLink %s",  (uint8_t *)v31,  0x16u);
      swift_arrayDestroy(v32, 2LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      return;
    }

    goto LABEL_32;
  }

  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v38 = *(void *)(a1 + 16);
    id v39 = a3;
    if (v38) {
      goto LABEL_17;
    }
LABEL_32:

    return;
  }

  if (a1 < 0) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  id v24 = a3;
  if (!__CocoaSet.count.getter(v23)) {
    goto LABEL_32;
  }
LABEL_17:
  uint64_t v40 = v4;
  sub_1001CADCC(a1, v40);
  uint64_t v42 = v41;

  if (!v42) {
    goto LABEL_32;
  }
  if (([(id)objc_opt_self(TUConversationManager) supportsConversations] & 1) == 0
    && ![*(id *)&v40[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_featureFlags] greenTeaLinksEnabled])
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v88 = type metadata accessor for Logger(0LL);
    uint64_t v89 = sub_1001B0D98(v88, (uint64_t)qword_100454210);
    uint64_t v92 = (os_log_s *)Logger.logObject.getter(v89, v90, v91);
    os_log_type_t v93 = static os_log_type_t.default.getter(v92);
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v94 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "Not posting pending member notification becaue Group FaceTime is not supported (GreenTea device or doesn't support multiway)",  v94,  2u);
      swift_slowDealloc(v94, -1LL, -1LL);
    }

    goto LABEL_32;
  }

  id v43 = [objc_allocWithZone(UNMutableNotificationContent) init];
  NSString v44 = String._bridgeToObjectiveC()();
  [v43 setCategoryIdentifier:v44];

  sub_1001F88F0(0xD000000000000017LL, (void *)0x800000010036D230LL);
  uint64_t v46 = v45;
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  [v43 setBody:v47];

  sub_10022A144(v105);
  uint64_t v96 = v8;
  uint64_t v95 = v9;
  if (!v48) {
    sub_1001F88F0(0x454D495445434146LL, (void *)0xED00004B4E494C5FLL);
  }
  uint64_t v49 = v48;
  NSString v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v49);
  [v43 setTitle:v50];

  [v43 setInterruptionLevel:2];
  sub_1001CD544();
  sub_10024D004();
  id v51 = [v105 pseudonym];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  uint64_t v97 = v40;
  uint64_t v53 = v52;

  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v53);
  [v43 setThreadIdentifier:v54];

  uint64_t v109 = 0x796E6F6475657370LL;
  v110[0] = 0xE90000000000006DLL;
  AnyHashable.init<A>(_:)(aBlock, &v109, &type metadata for String, &protocol witness table for String);
  id v55 = [v105 pseudonym];
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  v110[2] = &type metadata for String;
  uint64_t v109 = v56;
  v110[0] = v58;
  id v59 = [v43 userInfo];
  uint64_t v60 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v59,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  uint64_t v108 = v60;
  sub_1001FC358((uint64_t)&v109, (uint64_t)aBlock);
  uint64_t v61 = v108;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v61);
  [v43 setUserInfo:isa];

  id v63 = sub_1001CD39C(v105);
  id v64 = [v63 URL];

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v64);
  URL._bridgeToObjectiveC()(v65);
  unint64_t v67 = v66;
  (*(void (**)(char *, uint64_t))(v98 + 8))(v22, v99);
  [v43 setDefaultActionURL:v67];

  static Calendar.current.getter();
  uint64_t v69 = v102;
  uint64_t v68 = v103;
  uint64_t v70 = (*(uint64_t (**)(char *, void, uint64_t))(v102 + 104))( v13,  enum case for Calendar.Component.hour(_:),  v103);
  unint64_t v71 = v104;
  Date.init()(v70);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v13, 2LL, v71, 0LL);
  id v72 = *(void (**)(char *, uint64_t))(v95 + 8);
  uint64_t v73 = v96;
  v72(v71, v96);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v13, v68);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v16, v101);
  if (sub_1001AB0AC((uint64_t)v19, 1LL, v73) == 1)
  {
    Class v74 = 0LL;
  }

  else
  {
    Class v74 = Date._bridgeToObjectiveC()().super.isa;
    v72(v19, v73);
  }

  objc_msgSend(v43, "setExpirationDate:", v74, v95, v96);

  uint64_t v75 = v97;
  unint64_t v76 = sub_1001CD150(v105);
  uint64_t v78 = v77;
  sub_1001D8EA0(0LL, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
  swift_bridgeObjectRetain(v78);
  id v79 = v43;
  sub_10023DB9C(v76, v78, v79, 0LL);
  uint64_t v81 = v80;
  [v80 setDestinations:4];
  NSString v82 = *(void **)&v75[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_faceTimeNotificationCenter];
  uint64_t v83 = swift_allocObject(&unk_1003DF3F0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v83 + 16, v75);
  uint64_t v84 = (void *)swift_allocObject(&unk_1003DF418, 48LL, 7LL);
  v84[2] = v83;
  v84[3] = v76;
  v84[4] = v78;
  v84[5] = v81;
  aBlock[4] = (uint64_t)sub_1001D8D04;
  uint64_t v107 = v84;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001D2D08;
  void aBlock[3] = (uint64_t)&unk_1003DF430;
  uint64_t v85 = _Block_copy(aBlock);
  NSString v86 = v107;
  id v87 = v81;
  swift_release(v86);
  [v82 getDeliveredNotificationsWithCompletionHandler:v85];
  _Block_release(v85);
}

BOOL sub_1001D2714()
{
  uint64_t v4 = sub_1001D90F4();
  type metadata accessor for Date(v4);
  sub_1001D93A0();
  __chkstk_darwin(v5);
  sub_1001D9030();
  uint64_t v8 = (os_log_s *)(v6 - v7);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v41 - v11;
  id v13 = sub_1001D909C(v10, "dateInitiatedLetMeIn");
  if (!v13)
  {
    uint64_t v16 = sub_1001D9394(v2, 1LL);
    goto LABEL_8;
  }

  uint64_t v14 = v13;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

  uint64_t v15 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 32);
  v15(v2, v8, v1);
  sub_1001D9394(v2, 0LL);
  uint64_t v16 = sub_1001AB0AC(v2, 1LL, v1);
  if ((_DWORD)v16 == 1)
  {
LABEL_8:
    sub_1001D9348(v16, &qword_100447EA0);
    return 1LL;
  }

  uint64_t v17 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v12, v2, v1);
  id v18 = sub_1001D909C(v17, "dateReceivedLetMeIn");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

  double v19 = Date.timeIntervalSince(_:)(v12);
  uint64_t v20 = *(void (**)(uint64_t))(v0 + 8);
  uint64_t v21 = sub_1001D9260();
  v20(v21);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v22 = sub_1001B0E98();
  sub_1001B0D98(v22, (uint64_t)qword_100454210);
  id v23 = sub_1001D928C();
  Logger.logObject.getter(v23, v24, v25);
  os_log_type_t v26 = sub_1001B105C();
  int v27 = v26;
  if (os_log_type_enabled(v8, v26))
  {
    uint64_t v28 = sub_1001B0E78(22LL);
    int v42 = v27;
    uint64_t v29 = v28;
    uint64_t v30 = (void *)sub_1001B0E78(8LL);
    uint64_t v43 = sub_1001B0E78(32LL);
    uint64_t v45 = (uint64_t)v23;
    uint64_t v46 = v43;
    *(_DWORD *)uint64_t v29 = 138412546;
    NSString v44 = v20;
    uint64_t v41 = v8;
    id v31 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 4, v29 + 12);
    *uint64_t v30 = v23;

    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v32 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v33 = sub_1001C7370(v32, 72LL);
    *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
    *(void *)(v33 + 56) = &type metadata for Double;
    *(void *)(v33 + 64) = &protocol witness table for Double;
    *(double *)(v33 + 32) = v19;
    uint64_t v34 = String.init(format:_:)(1714564645LL, 0xE400000000000000LL, v33);
    uint64_t v45 = sub_1001D7CF0(v34, v35, &v46);
    uint64_t v20 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 14, v29 + 22);
    sub_1001B0F28();
    unint64_t v36 = v41;
    sub_1001D9094( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v42,  "Time since LMI initiated for member %@ is %s seconds",  (uint8_t *)v29);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v30);
    sub_1001B0E60((uint64_t)v30);
    uint64_t v37 = v43;
    sub_1001B0F64(v43);
    sub_1001B0E60(v37);
    sub_1001B0E60(v29);
  }

  else
  {
  }

  double v40 = (double)(unint64_t)sub_1001D9124(v38, "letMeInRequestNotificationTimeout");
  ((void (*)(char *, uint64_t))v20)(v12, v1);
  return v19 < v40;
}

uint64_t sub_1001D2A90(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v32, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    id v18 = (void *)result;
    uint64_t v27 = v11;
    swift_bridgeObjectRetain(a4);
    if ((sub_1001CA5BC(a1, a3, a4) & 1) == 0) {
      objc_msgSend(a5, "setDestinations:", (unint64_t)objc_msgSend(a5, "destinations") | 3);
    }
    uint64_t v19 = swift_allocObject(&unk_1003DF468, 32LL, 7LL);
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v18;
    *(void *)(v19 + 24) = a5;
    aBlock[4] = sub_1001D8D3C;
    uint64_t v31 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003DF480;
    uint64_t v20 = _Block_copy(aBlock);
    id v21 = v18;
    static DispatchQoS.unspecified.getter(a5);
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v23 = v22;
    uint64_t v24 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_1001C6AE8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v24, v25, v10, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v28);

    return swift_release(v31);
  }

  return result;
}

uint64_t sub_1001D2D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  sub_1001D8EA0(0LL, &qword_100447EA8, &OBJC_CLASS___UNNotification_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

id sub_1001D2D74(void *a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001F88F0(0xD000000000000015LL, (void *)0x800000010036D2B0LL);
  uint64_t v10 = v9;
  id v11 = sub_1001D0B4C(a1);
  swift_bridgeObjectRelease(v10);
  id v12 = [(id)objc_opt_self(NSURL) faceTimeShowInCallUIURL];
  id v13 = v12;
  if (v12)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v2);
    if (sub_1001AB0AC((uint64_t)v8, 1LL, v2) == 1)
    {
      id v13 = 0LL;
    }

    else
    {
      URL._bridgeToObjectiveC()(v14);
      id v13 = v15;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }

  else
  {
    sub_1001A9670((uint64_t)v8, 1LL, 1LL, v2);
  }

  [v11 setDefaultActionURL:v13];

  return v11;
}

void sub_1001D2F48()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v137 = sub_1001B1234();
  uint64_t v5 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  sub_1001D9030();
  uint64_t v8 = v6 - v7;
  uint64_t v10 = __chkstk_darwin(v9);
  id v12 = (char *)&v129 - v11;
  __chkstk_darwin(v10);
  uint64_t v138 = (char *)&v129 - v13;
  uint64_t v14 = (char **)sub_1001B1098();
  sub_1001D927C();
  __chkstk_darwin(v15);
  sub_1001B0F00();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = *(void **)(v2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  *(void *)(v17 - vswift_weakDestroy(v0 + 16) = v19;
  (*((void (**)(uint64_t, void, char **))v1 + 13))( v17 - v16,  enum case for DispatchPredicate.onQueue(_:),  v14);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  sub_1001D924C(v18, *((uint64_t (**)(uint64_t, uint64_t))v1 + 1));
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v21 = sub_1001CCB0C(v4);
  uint64_t v14 = &selRef_sharedPrivacyManager;
  uint64_t v1 = &unk_100447000;
  if ((v21 & 1) != 0)
  {
    if (qword_100446950 == -1)
    {
LABEL_4:
      uint64_t v22 = sub_1001B0E98();
      sub_1001B0D98(v22, (uint64_t)qword_100454210);
      id v23 = v4;
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v23, v24, v25);
      os_log_type_t v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)sub_1001B0E78(12LL);
        uint64_t v134 = (void (*)(void, void))sub_1001B0E78(32LL);
        uint64_t v135 = v2;
        v140[0] = (uint64_t)v134;
        id v136 = v4;
        *(_DWORD *)uint64_t v28 = 136315138;
        uint64_t v133 = v28 + 4;
        id v29 = [v23 UUID];
        uint64_t v30 = (uint64_t)v138;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

        sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of CustomStringConvertible.description.getter(v137, v31);
        sub_1001D93E4();
        sub_1001D924C(v30, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
        uint64_t v32 = sub_1001D9010();
        uint64_t v33 = sub_1001D9450(v32);
        uint64_t v14 = &selRef_sharedPrivacyManager;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34, v133, v28 + 12);

        sub_1001D92B4();
        sub_1001B0FD8( (void *)&_mh_execute_header,  v26,  v27,  "Conversation UUID %s had a state change, and we determined that we should post an invite notification",  v28);
        unint64_t v35 = v134;
        sub_1001B0F64((uint64_t)v134);
        uint64_t v2 = v135;
        sub_1001B0E60((uint64_t)v35);
        sub_1001B0E60((uint64_t)v28);
      }

      else
      {
      }

      uint64_t v36 = sub_1001CD494();
      goto LABEL_36;
    }

void sub_1001D395C(uint64_t a1, void *a2)
{
  if (sub_1001B115C(a1, "state") == (id)1 && sub_1001B115C(1LL, "letMeInRequestState") == (id)3)
  {
    id v3 = sub_1001B115C(3LL, "link");

    if (v3)
    {
      id v4 = sub_1001D2D74(a2);
      sub_1001D8FE8((uint64_t)v4, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
      uint64_t v5 = sub_1001CD1F4(a2, 0);
      uint64_t v7 = v6;
      id v8 = v4;
      sub_10023DB9C(v5, v7, v8, 0LL);
      id v19 = v9;
      id v10 = [v9 setDestinations:7];
      sub_1001D9388((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }

void sub_1001D3AD0()
{
  id v3 = v0;
  uint64_t v5 = v4;
  uint64_t v75 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  sub_1001D9040();
  uint64_t v74 = v7;
  uint64_t v8 = sub_1001B1234();
  sub_1001D927C();
  __chkstk_darwin(v9);
  sub_1001D9030();
  uint64_t v12 = v10 - v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = &v65[-v15];
  __chkstk_darwin(v14);
  sub_1001D9360();
  uint64_t v18 = __chkstk_darwin(v17);
  id v20 = &v65[-v19];
  uint64_t v21 = (uint64_t)sub_1001D8F3C(v18, "hasJoined");
  if ((v21 & 1) == 0)
  {
    uint64_t v73 = v6;
    id v22 = sub_1001D8F3C(v21, "UUID");
    sub_1001D8FA8();

    id v23 = (uint64_t *)&v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID];
    sub_1001B0E80( (uint64_t)&v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID],  (uint64_t)v77,  32LL);
    uint64_t v24 = sub_1001CA0B4((uint64_t)v20, *v23);
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v72 = v24;
      sub_1001D8F44();
      sub_1001D92DC((uint64_t)v20);
      os_log_type_t v27 = (void *)sub_1001D1504(v5);
      if (qword_100446950 != -1) {
        swift_once(&qword_100446950, sub_100258A88);
      }
      uint64_t v28 = sub_1001B0E98();
      id v29 = (os_log_s *)sub_1001B0D98(v28, (uint64_t)qword_100454210);
      swift_bridgeObjectRetain_n(v26, 2LL);
      id v30 = v27;
      Logger.logObject.getter(v30, v31, v32);
      os_log_type_t v33 = sub_1001B105C();
      if (sub_1001D917C(v33))
      {
        uint64_t v34 = sub_1001B0E78(22LL);
        uint64_t v71 = v8;
        uint64_t v35 = v34;
        uint64_t v68 = (void *)sub_1001B0E78(8LL);
        uint64_t v69 = sub_1001B0E78(32LL);
        v77[0] = v69;
        *(_DWORD *)uint64_t v35 = 136315394;
        unint64_t v67 = v29;
        swift_bridgeObjectRetain(v26);
        uint64_t v76 = sub_1001D92C8(v72, v36, v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v35 + 4, v35 + 12);
        swift_bridgeObjectRelease_n(v26, 3LL);
        *(_WORD *)(v35 + 12) = 2112;
        int v66 = v1;
        uint64_t v76 = (uint64_t)v30;
        id v37 = v30;
        uint64_t v70 = v3;
        id v38 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v35 + 14, v35 + 22);
        uint64_t v39 = (uint64_t)v68;
        *uint64_t v68 = v30;

        id v3 = v70;
        uint64_t v40 = v67;
        sub_1001D9094( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v66,  "Replacing notification id %s with content %@",  (uint8_t *)v35);
        sub_1001AFF14(&qword_100447E80);
        sub_1001B0F64(v39);
        sub_1001B0E60(v39);
        uint64_t v41 = v69;
        sub_1001B0F64(v69);
        sub_1001B0E60(v41);
        sub_1001B0E60(v35);
      }

      else
      {

        swift_bridgeObjectRelease_n(v26, 2LL);
      }

      uint64_t v49 = &v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace];
      uint64_t v50 = *(void (**)(uint64_t, uint64_t, id))&v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_replace];
      if (v50)
      {
        sub_1001D8F58();
        v50(v72, v26, v30);
        sub_1001D8F60((uint64_t)v50);
      }

      uint64_t v51 = sub_1001B92A4();
      id v52 = sub_1001D8F3C(v51, "UUID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

      uint64_t v53 = (uint64_t *)&v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID];
      sub_1001B0E80( (uint64_t)&v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID],  (uint64_t)v77,  32LL);
      uint64_t v54 = sub_1001CA0B4(v2, *v53);
      if (v55)
      {
        uint64_t v56 = v54;
        uint64_t v57 = v55;
        sub_1001D8F44();
        sub_1001D92DC(v2);
        uint64_t v58 = v3;
        id v59 = objc_msgSend(sub_1001CD330((uint64_t)v5, 0), "URL");
        sub_1001D9294();
        uint64_t v60 = v74;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v58);

        URL._bridgeToObjectiveC()(v61);
        uint64_t v63 = v62;
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v60, v75);
        [v30 setDefaultActionURL:v63];

        id v64 = *(void (**)(uint64_t, uint64_t, id))v49;
        if (*(void *)v49)
        {
          sub_1001D8F58();
          v64(v56, v57, v30);
          sub_1001D8F60((uint64_t)v64);
        }

        sub_1001B92A4();
      }

      else
      {
        sub_1001D8F44();

        sub_1001D92DC(v2);
      }
    }

    else
    {
      sub_1001D8F44();
      uint64_t v42 = sub_1001D9174((uint64_t)v20);
      id v43 = sub_1001D8F3C(v42, "UUID");
      sub_1001D9304();

      uint64_t v44 = (uint64_t *)&v3[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID];
      sub_1001B0E80((uint64_t)v44, (uint64_t)v77, 32LL);
      sub_1001CA158((uint64_t)v16, *v44);
      int v46 = v45;
      sub_1001D8F44();
      uint64_t v47 = sub_1001D9174((uint64_t)v16);
      if (v46)
      {
        id v48 = sub_1001D8F3C(v47, "UUID");
        sub_1001D8FDC();

        sub_1001B0E80((uint64_t)v44, (uint64_t)v77, 33LL);
        sub_1001FE458((uint64_t)v5, v12);
        sub_1001D9174(v12);
        sub_1001D8F44();
      }
    }
  }

  sub_1001B0FF8();
}

void sub_1001D4068(uint64_t a1)
{
  id v2 = sub_1001D8F3C(a1, "link");
  if (v2)
  {
    id v9 = v2;
    uint64_t v3 = (uint64_t)sub_1001D8F3C((uint64_t)v2, "hasJoined");
    if ((v3 & 1) == 0 && sub_1001D8F3C(v3, "isAnyOtherAccountDeviceActive"))
    {
      unint64_t v4 = sub_1001CD150(v9);
      uint64_t v6 = v5;
      uint64_t v7 = *(void (**)(unint64_t, uint64_t))(v1
                                                            + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
      if (v7)
      {
        unint64_t v8 = v4;
        sub_1001D8F58();
        v7(v8, v6);
        sub_1001D8F60((uint64_t)v7);
      }

      sub_1001B0EB8();
    }
  }

  else
  {
    sub_1001D91D4();
  }

void sub_1001D4180( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = sub_1001B1098();
  uint64_t v28 = *(char ***)(v27 - 8);
  __chkstk_darwin(v27);
  sub_1001D91F4();
  id v29 = *(void **)(v20 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  *uint64_t v21 = v29;
  sub_1001D93B4( (uint64_t)v21,  enum case for DispatchPredicate.onQueue(_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28[13]);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v21);
  uint64_t v31 = sub_1001D90B0((uint64_t)v21, (uint64_t (*)(uint64_t, uint64_t))v28[1]);
  if ((v29 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_100446950, sub_100258A88);
    goto LABEL_6;
  }

  uint64_t v28 = &selRef_displayPinRequestFailure;
  uint64_t v32 = (uint64_t)sub_1001D8F3C(v31, "hasJoined");
  id v22 = &selRef_displayPinRequestFailure;
  if ((v32 & 1) == 0)
  {
    id v33 = sub_1001D8F3C(v32, "state");
    if (v33 != (id)1)
    {
      uint64_t v34 = (uint64_t)sub_1001D8F3C((uint64_t)v33, "ignoreLMIRequests");
      if ((v34 & 1) == 0)
      {
        id v49 = sub_1001D8F3C(v34, "pendingMembers");
        sub_1001D8FF0();
        sub_1001D90A4((unint64_t *)&qword_10044A420);
        sub_1001D9000(v50);
        sub_1001D9358();
        id v39 = sub_1001D8F3C(v51, "link");
        sub_1001D1D08((uint64_t)&unk_100447E20, v26, v39);
        sub_1001B0F5C();
        goto LABEL_10;
      }
    }
  }

  if (qword_100446950 != -1) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v35 = sub_1001B0E98();
  id v36 = sub_1001D90C4(v35, (uint64_t)qword_100454210);
  id v39 = (id)Logger.logObject.getter(v36, v37, v38);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled((os_log_t)v39, v40))
  {
    uint64_t v41 = sub_1001B0E78(24LL);
    uint64_t v42 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v41 = 67109634;
    id v43 = sub_1001D92AC((uint64_t)v42, v28[433]);
    LODWORD(v52) = (_DWORD)v43;
    uint64_t v45 = sub_1001D9404((uint64_t)v43, v44, v41 + 4, v41 + 8);
    *(_WORD *)(v41 + _Block_object_dispose(va, 8) = 1024;
    id v46 = sub_1001D92AC(v45, v22[511]);
    sub_1001D9404((uint64_t)v46, v47, v41 + 10, v41 + 14);
    *(_WORD *)(v41 + 14) = 2112;
    id v52 = v36;
    id v48 = v36;
    sub_1001D93DC((uint64_t)&v52, (uint64_t)&a9, v41 + 16);
    *uint64_t v42 = v36;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v39,  v40,  "Skip posting pending member notification because hasJoined: %{BOOL}d, ignoreLMIRequests: %{BOOL}d for conversation: %@",  (uint8_t *)v41,  0x18u);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v42);
    sub_1001B0E60((uint64_t)v42);
    sub_1001B0E60(v41);
  }

  else
  {

    id v39 = v36;
  }

#error "1001D445C: call analysis failed (funcsize=24)"
void sub_1001D4480( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  sub_1001B0F10();
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  uint64_t v69 = v28;
  uint64_t v70 = v29;
  id v30 = sub_1001B1234();
  sub_1001D927C();
  __chkstk_darwin(v31);
  sub_1001D920C();
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001C7334();
  __chkstk_darwin(v32);
  id v33 = sub_1001D90F4();
  uint64_t v34 = type metadata accessor for DispatchPredicate(v33);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_1001B0F00();
  uint64_t v38 = v37 - v36;
  id v39 = *(void **)(v20 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue);
  *(void *)(v37 - v36) = v39;
  (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))( v37 - v36,  enum case for DispatchPredicate.onQueue(_:),  v34);
  os_log_type_t v40 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)(v38);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v38, v34);
  if ((v39 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100446950, sub_100258A88);
LABEL_11:
    uint64_t v57 = sub_1001B0E98();
    uint64_t v58 = sub_1001D90C4(v57, (uint64_t)qword_100454210);
    id v59 = v70;
    uint64_t v60 = v58;
    uint64_t v61 = v59;
    Logger.logObject.getter(v61, v62, v63);
    id v64 = sub_1001B11C8();
    if (sub_1001B0EC8(v64))
    {
      uint64_t v65 = sub_1001B0E78(22LL);
      int v66 = (void *)sub_1001B0E78(16LL);
      *(_DWORD *)uint64_t v65 = 138412546;
      uint64_t v71 = v60;
      unint64_t v67 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &a9, v65 + 4, v65 + 12);
      void *v66 = v60;

      *(_WORD *)(v65 + 12) = 2112;
      uint64_t v71 = v61;
      uint64_t v68 = v61;
      sub_1001D93DC((uint64_t)&v71, (uint64_t)&a9, v65 + 14);
      v66[1] = v61;

      sub_1001D9094( (void *)&_mh_execute_header,  (os_log_s *)v58,  (os_log_type_t)v35,  "Tracked pending member changed, but not a locally owned link -- ignoring %@ %@",  (uint8_t *)v65);
      sub_1001AFF14(&qword_100447E80);
      sub_1001D9350((uint64_t)v66);
      sub_1001B0E60((uint64_t)v66);
      sub_1001B0E60(v65);
    }

    else
    {
    }

    goto LABEL_9;
  }

  uint64_t v42 = sub_1001D8F3C(v41, "groupUUID");
  if (!v42)
  {
    uint64_t v44 = sub_1001BB544(v22, 1LL);
    goto LABEL_8;
  }

  id v43 = v42;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v22, v23, v30);
  sub_1001BB544(v22, 0LL);
  uint64_t v44 = sub_1001AB0AC(v22, 1LL, v30);
  if ((_DWORD)v44 == 1)
  {
LABEL_8:
    sub_1001D9348(v44, (uint64_t *)&unk_10044A400);
    goto LABEL_9;
  }

  sub_1001D9348(v44, (uint64_t *)&unk_10044A400);
  if (!sub_1001D8F3C(v45, "isLocallyCreated"))
  {
    if (qword_100446950 == -1) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }

  id v46 = [v69 incomingPendingConversations];
  sub_1001D8FF0();
  sub_1001D90A4(&qword_100447DF0);
  sub_1001D9000(v47);
  sub_1001D9358();
  id v48 = v27;
  sub_1001CB3E8((uint64_t)&qword_100448F90, v48);
  uint64_t v50 = v49;
  uint64_t v51 = sub_1001B0F5C();
  if (v50)
  {
    id v52 = sub_1001B115C(v51, "pendingMembers");
    sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v54 = v53;
    sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v56 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v52, v54, v55);

    sub_1001D1D08(v56, 0LL, v48);
    sub_1001D9020();
  }

#error "1001D48B0: call analysis failed (funcsize=33)"
void sub_1001D48DC()
{
  void (*v0)(uint64_t, uint64_t);
  uint8_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t p_base_prots;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  void (*v33)(unint64_t);
  unint64_t v34;
  id v35;
  uint8_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  void (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  os_log_s *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96[4];
  sub_1001B0F10();
  uint64_t v93 = v4;
  uint64_t v6 = v5;
  p_base_prots = sub_1001B1234();
  uint64_t v92 = *(void (**)(uint64_t, uint64_t))(p_base_prots - 8);
  sub_1001C7334();
  __chkstk_darwin(v8);
  sub_1001D9030();
  uint64_t v91 = v9 - v10;
  __chkstk_darwin(v11);
  sub_1001D9360();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v90 - v13;
  sub_1001B1098();
  sub_1001D93A0();
  __chkstk_darwin(v15);
  sub_1001B10F0();
  uint64_t v94 = v1;
  uint64_t v16 = *(void **)&v1[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_queue];
  void *v2 = v16;
  sub_1001D93B4( (uint64_t)v2,  enum case for DispatchPredicate.onQueue(_:),  *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 13));
  uint64_t v17 = v16;
  uint64_t v18 = _dispatchPreconditionTest(_:)(v2);
  uint64_t v19 = sub_1001D90B0((uint64_t)v2, *((uint64_t (**)(uint64_t, uint64_t))v0 + 1));
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_100446950, sub_100258A88);
LABEL_19:
    uint64_t v76 = sub_1001B0E98();
    sub_1001B0D98(v76, (uint64_t)qword_100454210);
    uint64_t v77 = sub_1001D928C();
    uint64_t v80 = (os_log_s *)Logger.logObject.getter(v77, v78, v79);
    id v81 = static os_log_type_t.default.getter(v80);
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v92 = v0;
      uint64_t v82 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v83 = sub_1001B0E78(32LL);
      v96[0] = v83;
      *(_DWORD *)uint64_t v82 = 136315138;
      uint64_t v94 = v82 + 4;
      os_log_type_t v84 = sub_1001D909C(v83, *(const char **)(p_base_prots + 1112));
      uint64_t v85 = v91;
      sub_1001D9304();

      sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      id v87 = dispatch thunk of CustomStringConvertible.description.getter(v6, v86);
      uint64_t v89 = v88;
      v92(v85, v6);
      uint64_t v95 = sub_1001D7CF0(v87, v89, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v94, v82 + 12);

      sub_1001B0F5C();
      sub_1001B0FD8((void *)&_mh_execute_header, v80, v81, "No notification for conversation UUID %s", v82);
      sub_1001B0F64(v83);
      sub_1001B0E60(v83);
      sub_1001B0E60((uint64_t)v82);
    }

    else
    {
    }

    goto LABEL_22;
  }

  uint64_t v20 = sub_1001D9124(v19, "activeConversations");
  sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
  id v22 = v21;
  sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
  uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v22, v23);

  sub_1001CBA20(v24);
  uint64_t v26 = v25;
  sub_1001D9020();

  uint64_t v6 = p_base_prots;
  if (!v26)
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v28 = sub_1001B0E98();
    uint64_t v26 = (void *)sub_1001B0D98(v28, (uint64_t)qword_100454210);
    Logger.logObject.getter(v26, v29, v30);
    uint64_t v31 = sub_1001B105C();
    if (sub_1001D917C(v31))
    {
      uint64_t v32 = (uint8_t *)sub_1001B0E78(2LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v26,  OS_LOG_TYPE_DEFAULT,  "Removing handoff notification as there are no handoff-eligible conversations left",  v32,  2u);
      sub_1001B0E60((uint64_t)v32);
    }

    id v33 = *(void (**)(unint64_t))&v94[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification];
    if (v33)
    {
      uint64_t v26 = *(void **)&v94[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification + 8];
      sub_1001D8F58();
      uint64_t v34 = sub_1001D919C();
      v33(v34);
      uint64_t v27 = sub_1001D8F60((uint64_t)v33);
    }
  }

  p_base_prots = (uint64_t)&CSDHandoffAudioController__metaData.base_prots;
  uint64_t v35 = sub_1001D909C(v27, "UUID");
  sub_1001D8FDC();

  id v36 = v94;
  uint64_t v37 = (uint64_t *)&v94[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID];
  sub_1001B0E80( (uint64_t)&v94[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_notificationIdentifiersByConversationUUID],  (uint64_t)v96,  32LL);
  uint64_t v38 = sub_1001CA0B4((uint64_t)v14, *v37);
  if (!v39)
  {
    sub_1001D8FB8();
    uint64_t v0 = (void (*)(uint64_t, uint64_t))*((void *)v92 + 1);
    v0((uint64_t)v14, v6);
    goto LABEL_18;
  }

  os_log_type_t v40 = v38;
  uint64_t v41 = v39;
  sub_1001D8FB8();
  uint64_t v42 = v3;
  id v43 = (void (*)(uint64_t, uint64_t))*((void *)v92 + 1);
  uint64_t v44 = sub_1001D9174((uint64_t)v14);
  uint64_t v45 = sub_1001D909C(v44, "UUID");
  sub_1001D91AC();

  id v46 = (uint64_t *)&v36[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID];
  sub_1001B0E80( (uint64_t)&v36[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_carPlayNotificationIdentifiersByConversationUUID],  (uint64_t)v96,  32LL);
  uint64_t v47 = sub_1001CA0B4(v42, *v46);
  id v49 = v36;
  uint64_t v50 = v6;
  if (!v48)
  {
    sub_1001D8FB8();
    sub_1001B92A4();
    v43(v42, v6);
    uint64_t v0 = v43;
    p_base_prots = (uint64_t)&CSDHandoffAudioController__metaData.base_prots;
LABEL_18:
    if (qword_100446950 == -1) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }

  uint64_t v51 = v47;
  id v52 = v48;
  sub_1001D8FB8();
  uint64_t v90 = v50;
  uint64_t v92 = v43;
  v43(v42, v50);
  uint64_t v53 = &v49[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification];
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))&v49[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification];
  if (v54)
  {
    sub_1001D8F58();
    v54(v40, v41);
    sub_1001D8F60((uint64_t)v54);
  }

  sub_1001B92A4();
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))v53;
  if (*(void *)v53)
  {
    sub_1001D8F58();
    v55(v51, v52);
    sub_1001D8F60((uint64_t)v55);
  }

  uint64_t v56 = swift_bridgeObjectRelease(v52);
  uint64_t v57 = sub_1001D92AC(v56, "UUID");
  uint64_t v58 = v91;
  sub_1001D8FA8();

  sub_1001B0E80((uint64_t)v37, (uint64_t)v96, 33LL);
  sub_1001FD914();
  id v59 = sub_1001D9330();
  uint64_t v60 = v90;
  uint64_t v61 = v92;
  v92(v59, v90);
  sub_1001D8FB8();
  uint64_t v62 = sub_1001B0EB8();
  uint64_t v63 = sub_1001D92AC(v62, "UUID");
  sub_1001D8F90();

  sub_1001B0E80((uint64_t)v46, (uint64_t)v96, 33LL);
  sub_1001FD914();
  id v64 = sub_1001D9330();
  v61(v64, v60);
  sub_1001D8FB8();
  uint64_t v65 = sub_1001B0EB8();
  int v66 = sub_1001D92AC(v65, "UUID");
  sub_1001D8F90();

  sub_1001B0E80( (uint64_t)&v94[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_pendingNotificationsForConversationsByUUID],  (uint64_t)v96,  33LL);
  sub_1001FD8F8(v58, v67, v68, v69, v70, v71, v72, v73, v90, v91);
  uint64_t v75 = v74;
  v61(v58, v60);
  sub_1001D8FB8();

LABEL_22:
  sub_1001B0FF8();
}

void sub_1001D4FA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v6 = [objc_allocWithZone(UNMutableNotificationContent) init];
  NSString v7 = sub_1001D9318();
  sub_1001D8FD4(v6, "setCategoryIdentifier:");

  unint64_t v8 = sub_1001F88F0(0xD000000000000027LL, (void *)0x800000010036D200LL);
  uint64_t v10 = v9;
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = sub_1001C7370(v11, 72LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v14 = *(uint64_t (**)(void))(v4 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeHandleName + 8);
  uint64_t v15 = sub_1001D8F58();
  id v16 = sub_1001B115C(v15, "handle");
  uint64_t v17 = v14();
  uint64_t v19 = v18;

  swift_release(v13);
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1001B2330();
  *(void *)(v12 + 32) = v17;
  *(void *)(v12 + 40) = v19;
  String.init(format:_:)(v8, v10, v12);
  sub_1001B0F28();
  NSString v20 = String._bridgeToObjectiveC()();
  sub_1001D9020();
  sub_1001D8FD4(v6, "setBody:");

  uint64_t v21 = *(void (**)(uint64_t))(v4
                                       + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName);
  sub_1001D8F58();
  v21(a2);
  sub_1001D926C();
  NSString v22 = sub_1001D9470();
  sub_1001B0F28();
  sub_1001D8FD4(v6, "setTitle:");

  sub_1001CD544();
  sub_10024D004();
  sub_1001D8FE8(v23, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
  sub_1001CD2E8(a3);
  sub_1001D93E4();
  id v24 = v6;
  uint64_t v25 = sub_1001D9260();
  sub_10023DB9C(v25, v26, v24, 0LL);
  id v38 = v27;
  id v28 = [v27 setDestinations:3];
  sub_1001D9388((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35, v36, v38);
}

uint64_t sub_1001D525C()
{
  id v1 =  [*(id *)&v0[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager] activeConversations];
  sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
  uint64_t v3 = v2;
  sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v3, v4);

  sub_1001D55FC(v5, v0);
  return swift_bridgeObjectRelease(v5);
}

id sub_1001D5318(void **a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  if ((sub_1001CCB0C(*a1) & 1) != 0)
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v10, (uint64_t)qword_100454210);
    id v11 = v9;
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v11, v12, v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    int v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      os_log_t v36 = v14;
      uint64_t v17 = swift_slowAlloc(12LL, -1LL);
      int v34 = v16;
      uint64_t v18 = (uint8_t *)v17;
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v35;
      uint64_t v37 = v2;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = v18 + 12;
      uint64_t v32 = v18 + 4;
      uint64_t v33 = v18;
      id v20 = [v11 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

      sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v5, v21);
      unint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v38 = sub_1001D7CF0(v22, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v32, v19);

      swift_bridgeObjectRelease(v24);
      os_log_t v25 = v36;
      uint64_t v26 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v34,  "In response to conversations changed, we determined that we should post an invite notification for conversation UUID %s",  v33,  0xCu);
      uint64_t v27 = v35;
      swift_arrayDestroy(v35, 1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
    }

    sub_1001CD494();
  }

  id result = [v9 state];
  if (result)
  {
    uint64_t v29 = *(void (**)(unint64_t, unint64_t))(a2
                                                                    + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
    if (v29)
    {
      uint64_t v30 = *(void *)(a2 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification + 8);
      swift_retain(v30);
      v29(0xD00000000000001BLL, 0x800000010036D180LL);
      return (id)sub_1001B5D3C((uint64_t)v29, v30);
    }
  }

  return result;
}

void sub_1001D55FC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    sub_1001D8EA0(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v9 = v8;
    sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
    id v11 = Set.Iterator.init(_cocoa:)(v34, v7, v9, v10);
    uint64_t v5 = v34[0];
    uint64_t v32 = v34[1];
    uint64_t v12 = v34[2];
    int64_t v13 = v34[3];
    unint64_t v14 = v34[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v32 = a1 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a1 + 56);
    id v11 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v31 = (unint64_t)(v12 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v14)
  {
    uint64_t v19 = (v14 - 1) & v14;
    unint64_t v20 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v21 = v13;
    goto LABEL_27;
  }

  int64_t v21 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v21 >= v31) {
      goto LABEL_38;
    }
    unint64_t v27 = *(void *)(v32 + 8 * v21);
    if (!v27)
    {
      int64_t v28 = v13 + 2;
      if (v13 + 2 >= v31) {
        goto LABEL_38;
      }
      unint64_t v27 = *(void *)(v32 + 8 * v28);
      if (v27) {
        goto LABEL_25;
      }
      int64_t v28 = v13 + 3;
      if (v13 + 3 >= v31) {
        goto LABEL_38;
      }
      unint64_t v27 = *(void *)(v32 + 8 * v28);
      if (v27) {
        goto LABEL_25;
      }
      int64_t v28 = v13 + 4;
      if (v13 + 4 >= v31) {
        goto LABEL_38;
      }
      unint64_t v27 = *(void *)(v32 + 8 * v28);
      if (v27)
      {
LABEL_25:
        int64_t v21 = v28;
      }

      else
      {
        int64_t v21 = v13 + 5;
        if (v13 + 5 >= v31) {
          goto LABEL_38;
        }
        unint64_t v27 = *(void *)(v32 + 8 * v21);
        if (!v27)
        {
          int64_t v29 = v13 + 6;
          while (v29 < v31)
          {
            unint64_t v27 = *(void *)(v32 + 8 * v29++);
            if (v27)
            {
              int64_t v21 = v29 - 1;
              goto LABEL_26;
            }
          }

          goto LABEL_38;
        }
      }
    }

void sub_1001D5958()
{
  uint64_t v184 = v2;
  uint64_t v185 = v3;
  uint64_t v5 = v4;
  unint64_t v6 = sub_1001B1234();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B0F00();
  uint64_t v10 = (char **)(v9 - v8);
  uint64_t v171 = *(void *)(type metadata accessor for URL(0LL) - 8);
  sub_1001C7334();
  __chkstk_darwin(v11);
  sub_1001D9040();
  uint64_t v170 = v12;
  uint64_t v14 = (uint64_t)&type metadata for Any;
  id v175 = sub_1001D8F3C(v13, "handoffEligibility");
  if (!v175)
  {
    if (qword_100446950 != -1) {
      swift_once(&qword_100446950, sub_100258A88);
    }
    uint64_t v38 = sub_1001B0E98();
    id v176 = sub_1001D90C4(v38, (uint64_t)qword_100454210);
    Logger.logObject.getter(v176, v39, v40);
    os_log_type_t v41 = sub_1001B11C8();
    if (!sub_1001B0EC8(v41))
    {

      sub_1001D92E4();
      uint64_t v53 = v176;
      goto LABEL_15;
    }

    uint64_t v42 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v43 = sub_1001B0E78(32LL);
    v183[0] = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    id v44 = [v176 UUID];
    sub_1001D8FDC();

    sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v6, v45);
    (*(void (**)(char **, unint64_t))(v7 + 8))(v10, v6);
    uint64_t v48 = sub_1001B1278(v46, v47, v183);
    uint64_t v49 = sub_1001D9374(v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v50, v42 + 4, v42 + 12);
    sub_1001D92E4();
    sub_1001D92E4();
    sub_1001B0EC0();
    sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)v5,  v1,  "Not posting handoff nearby notification for conversation %s because it did not have handoff eligibility",  v42);
    sub_1001B0F64(v43);
    sub_1001B0E60(v43);
    sub_1001B0E60((uint64_t)v42);
LABEL_10:

    goto LABEL_78;
  }

  uint64_t v173 = v5;
  id v15 =  [*(id *)&v0[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_conversationManager] activeConversations];
  uint64_t v16 = sub_1001D929C();
  sub_1001D8EA0(v16, v17, v18);
  uint64_t v20 = v19;
  sub_1001D84A4(&qword_100447DF0, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
  uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v15, v20, v21);

  sub_1001CBD04(v22);
  uint64_t v5 = v23;
  sub_1001B0F5C();

  if (v5)
  {
    if (qword_100446950 != -1) {
      goto LABEL_80;
    }
    goto LABEL_4;
  }

  uint64_t v164 = (uint64_t)v10;
  unint64_t v165 = v6;
  if ([v173 avMode] == (id)2)
  {
    uint64_t v51 = 0xD000000000000010LL;
    id v52 = "FACETIME_SERVICE";
  }

  else
  {
    uint64_t v51 = 0xD000000000000016LL;
    id v52 = "FACETIME_AUDIO_SERVICE";
  }

  uint64_t v54 = sub_1001D9324(v51, (uint64_t)v52);
  uint64_t v56 = v55;
  uint64_t v10 = (char **)[objc_allocWithZone(UNMutableNotificationContent) init];
  sub_1001D919C();
  NSString v57 = String._bridgeToObjectiveC()();
  [v10 setCategoryIdentifier:v57];

  uint64_t v167 = v0;
  uint64_t v58 = *(void (**)(char **))&v0[OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_localizeConversationName];
  sub_1001D8F58();
  v58(v173);
  sub_1001D926C();
  NSString v59 = sub_1001D9470();
  sub_1001B0F28();
  uint64_t v166 = v10;
  sub_1001D8FD4(v10, "setTitle:");

  sub_1001D8B20(v175, (SEL *)&selRef_localizedDeviceCategory);
  if (v61)
  {
    uint64_t v62 = v60;
    uint64_t v63 = v61;
    v183[0] = (uint64_t)v54;
    v183[1] = v56;
    v64._countAndFlagsBits = 2108704LL;
    v64._object = (void *)0xE300000000000000LL;
    String.append(_:)(v64);
    v65._countAndFlagsBits = v62;
    v65._object = v63;
    String.append(_:)(v65);
    sub_1001D9020();
  }

  NSString v66 = String._bridgeToObjectiveC()();
  uint64_t v169 = v7;
  sub_1001B0EB8();
  sub_1001D8FD4(v10, "setSubtitle:");

  sub_1001D9318();
  id v67 = (id)((uint64_t (*)(void))TUStringKeyForProduct)();
  sub_1001D8FCC();
  if (!v56) {
    goto LABEL_83;
  }
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  sub_1001D92C0();
  sub_1001F88F0(v68, v54);
  sub_1001B0F5C();
  NSString v69 = String._bridgeToObjectiveC()();
  sub_1001D9020();
  [v10 setBody:v69];

  sub_1001CD544();
  sub_10024D004();
  uint64_t v179 = (char **)0xD000000000000018LL;
  uint64_t v180 = 0x800000010036CFD0LL;
  AnyHashable.init<A>(_:)(v183, &v179, &type metadata for String, &protocol witness table for String);
  id v70 =  objc_msgSend( (id)objc_opt_self(NSString),  "tu_conversationHandoffDynamicIdentifierForEligibility:",  v175);
  uint64_t v71 = (char **)sub_1001D93FC((uint64_t)v70);
  uint64_t v73 = v72;

  uint64_t v182 = &type metadata for String;
  uint64_t v179 = v71;
  uint64_t v180 = v73;
  id v75 = sub_1001D8F68(v74, "userInfo");
  unint64_t v6 = (unint64_t)&protocol witness table for AnyHashable;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v75,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1001D9294();
  uint64_t v178 = v167;
  sub_1001FC358((uint64_t)&v179, (uint64_t)v183);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  sub_1001D8FD4(v10, "setUserInfo:");

  [v10 setInterruptionLevel:0];
  id v77 = [v173 remoteMembers];
  sub_1001D8EA0(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v7 = v78;
  sub_1001D84A4( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr);
  static Set._unconditionallyBridgeFromObjectiveC(_:)(v77, v7, v79);
  sub_1001D8FCC();
  if (((unint64_t)&unk_100447E20 & 0xC000000000000001LL) == 0)
  {
    uint64_t v80 = sub_1001D8538((uint64_t)&unk_100447E20);
    goto LABEL_47;
  }

  uint64_t v80 = (uint64_t)&_swiftEmptySetSingleton;
  v183[0] = (uint64_t)&_swiftEmptySetSingleton;
  else {
    id v81 = (void *)((unint64_t)&unk_100447E20 & 0xFFFFFFFFFFFFFF8LL);
  }
  uint64_t v82 = __CocoaSet.makeIterator()(v81);
  id v77 = (id)v82;
  uint64_t v83 = __CocoaSet.Iterator.next()(v82);
  if (!v83)
  {
LABEL_45:
    swift_release(v82);
LABEL_47:
    uint64_t v106 = sub_10024E694(v80);
    if (!v106)
    {
      swift_release(v80);
LABEL_70:
      sub_10024D040();
      id v135 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
      id v136 = [v135 conversationManager];
      sub_1001D9294();
      id v137 = [v77 joinRequestForApplicableConversationWithHandoffEligibility:v175];
      sub_1001D8FCC();
      if (v135)
      {
        id v139 = sub_1001D8F3C(v138, "URL");
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v139);

        URL._bridgeToObjectiveC()(v140);
        uint64_t v142 = v141;
        sub_1001D90B0(v170, *(uint64_t (**)(uint64_t, uint64_t))(v171 + 8));
        sub_1001D8FD4(v166, "setDefaultActionURL:");
      }

      sub_1001D8FE8(v138, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
      id v143 = sub_1001D928C();
      unint64_t v144 = sub_1001D919C();
      sub_10023DB9C(v144, v145, v143, 0LL);
      if (qword_100446950 != -1) {
        swift_once(&qword_100446950, sub_100258A88);
      }
      uint64_t v146 = sub_1001B0E98();
      id v147 = sub_1001D90C4(v146, (uint64_t)qword_100454210);
      uint64_t v148 = v173;
      uint64_t v149 = (char **)v147;
      uint64_t v150 = v148;
      id v153 = (os_log_s *)Logger.logObject.getter(v150, v151, v152);
      os_log_type_t v154 = static os_log_type_t.default.getter(v153);
      if (sub_1001D91E4(v154))
      {
        uint64_t v155 = sub_1001B0E78(22LL);
        v172 = (void *)sub_1001B0E78(8LL);
        uint64_t v174 = sub_1001B0E78(32LL);
        v183[0] = v174;
        *(_DWORD *)uint64_t v155 = 138412546;
        uint64_t v179 = v149;
        id v177 = v143;
        uint64_t v156 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v155 + 4, v155 + 12);
        void *v172 = v149;

        *(_WORD *)(v155 + 12) = 2080;
        id v158 = sub_1001D92AC(v157, "UUID");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v158);

        sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter(v165, v159);
        unint64_t v162 = v161;
        sub_1001D90B0(v164, *(uint64_t (**)(uint64_t, uint64_t))(v169 + 8));
        uint64_t v179 = (char **)sub_1001D7CF0(v160, v162, v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v155 + 14, v155 + 22);

        unint64_t v163 = v162;
        id v143 = v177;
        swift_bridgeObjectRelease(v163);
        sub_1001D9094( (void *)&_mh_execute_header,  v153,  (os_log_type_t)v10,  "Posting notification request %@ for handoff eligible conversation UUID %s nearby",  (uint8_t *)v155);
        sub_1001AFF14(&qword_100447E80);
        sub_1001B0F64((uint64_t)v172);
        sub_1001B0E60((uint64_t)v172);
        sub_1001B0F64(v174);
        sub_1001B0E60(v174);
        sub_1001B0E60(v155);
      }

      else
      {
      }

      [v149 setDestinations:6];
      sub_1001CFEAC(v149);

LABEL_78:
      sub_1001B0FF8();
      return;
    }

    uint64_t v107 = v106;
    uint64_t v178 = _swiftEmptyArrayStorage;
    sub_100250050(0, v106 & ~(v106 >> 63), 0);
    if ((v80 & 0xC000000000000001LL) != 0)
    {
      uint64_t v108 = (char **)__CocoaSet.startIndex.getter(v80);
      char v110 = 1;
    }

    else
    {
      uint64_t v108 = (char **)((uint64_t (*)(uint64_t))sub_100250EEC)(v80);
      char v110 = v111 & 1;
    }

    uint64_t v179 = v108;
    uint64_t v180 = v109;
    char v181 = v110;
    if ((v107 & 0x8000000000000000LL) == 0)
    {
      uint64_t v112 = &selRef_displayPinRequestFailure;
      do
      {
        uint64_t v10 = v179;
        uint64_t v113 = v180;
        char v114 = v181;
        uint64_t v115 = sub_1001D93C8();
        sub_100250C38(v115, v116, v117, v118);
        uint64_t v120 = v119;
        sub_1001D8B6C([v119 v112[242]], (SEL *)&selRef_normalizedValue);
        if (v121)
        {
          sub_1001D92D0();
        }

        else
        {
          unint64_t v6 = (unint64_t)[v120 v112[242]];
          id v122 = [(id)v6 value];

          static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          sub_1001D92D0();
        }

        id v123 = v178;
        if ((swift_isUniquelyReferenced_nonNull_native(v178) & 1) == 0)
        {
          sub_100250050(0, v123[2] + 1LL, 1);
          id v123 = v178;
        }

        unint64_t v125 = v123[2];
        unint64_t v124 = v123[3];
        if (v125 >= v124 >> 1)
        {
          sub_100250050(v124 > 1, v125 + 1, 1);
          id v123 = v178;
        }

        v123[2] = v125 + 1;
        id v126 = &v123[2 * v125];
        v126[4] = v14;
        v126[5] = v6;
        if ((v80 & 0xC000000000000001LL) != 0)
        {
          uint64_t v112 = &selRef_displayPinRequestFailure;
          if ((v114 & 1) == 0) {
            goto LABEL_82;
          }
          uint64_t v127 = ((uint64_t (*)(char **, uint64_t))__CocoaSet.Index.handleBitPattern.getter)(v10, v113);
          if (v127) {
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v127);
          }
          else {
            uint64_t isUniquelyReferenced_nonNull_native = 1LL;
          }
          uint64_t v133 = sub_1001AFF14(&qword_100447E70);
          id v77 = (id)((uint64_t (*)(uint64_t *, uint64_t))Set.Index._asCocoa.modify)(v183, v133);
          ((void (*)(uint64_t, uint64_t, uint64_t))__CocoaSet.formIndex(after:isUnique:))( v134,  isUniquelyReferenced_nonNull_native,  v80);
          ((void (*)(uint64_t *, void))v77)(v183, 0LL);
        }

        else
        {
          uint64_t v129 = sub_1001D93C8();
          id v77 = (id)((uint64_t (*)(uint64_t))sub_100250B3C)(v129);
          unint64_t v6 = v130;
          char v132 = v131;
          sub_1001D8CA0((uint64_t)v10, v113, v114);
          uint64_t v179 = (char **)v77;
          uint64_t v180 = v6;
          char v181 = v132 & 1;
          uint64_t v112 = &selRef_displayPinRequestFailure;
        }

        --v107;
      }

      while (v107);
      sub_1001D8CA0((uint64_t)v179, v180, v181);
      swift_release(v80);
      goto LABEL_70;
    }

    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    return;
  }

  uint64_t v10 = &selRef_sharedPrivacyManager;
  uint64_t v14 = -1LL;
  while (1)
  {
    uint64_t v178 = (void *)v83;
    uint64_t v84 = swift_dynamicCast(&v179, &v178, (char *)&type metadata for Swift.AnyObject + 8, v7, 7LL);
    id v85 = sub_1001D8F3C(v84, "handle");
    id v86 = [v85 value];

    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    unint64_t v6 = v88;

    uint64_t v89 = sub_1001B0F28();
    uint64_t v90 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000LL) == 0) {
      uint64_t v90 = v87 & 0xFFFFFFFFFFFFLL;
    }
    if (v90)
    {
      id v91 = objc_msgSend(sub_1001D8F3C(v89, "handle"), "value");
      sub_1001D9294();
      static String._unconditionallyBridgeFromObjectiveC(_:)(v87);

      NSString v92 = String._bridgeToObjectiveC()();
      uint64_t v93 = sub_1001B0F5C();
      unsigned __int8 v94 = sub_1001D8F3C(v93, "destinationIdIsTemporary");

      if ((v94 & 1) == 0) {
        break;
      }
    }

LABEL_43:
    id v77 = (id)v82;
    uint64_t v83 = __CocoaSet.Iterator.next()(v95);
    if (!v83)
    {
      uint64_t v80 = v183[0];
      goto LABEL_45;
    }
  }

  uint64_t v5 = v179;
  uint64_t v96 = v183[0];
  if (*(void *)(v183[0] + 24) <= *(void *)(v183[0] + 16))
  {
    sub_1002499C4();
    uint64_t v96 = v183[0];
  }

  Swift::Int v95 = NSObject._rawHashValue(seed:)(*(void *)(v96 + 40));
  uint64_t v97 = v96 + 56;
  uint64_t v98 = -1LL << *(_BYTE *)(v96 + 32);
  unint64_t v99 = v95 & ~v98;
  unint64_t v100 = v99 >> 6;
  if (((-1LL << v99) & ~*(void *)(v96 + 56 + 8 * (v99 >> 6))) != 0)
  {
    unint64_t v101 = __clz(__rbit64((-1LL << v99) & ~*(void *)(v96 + 56 + 8 * (v99 >> 6)))) | v99 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_42:
    *(void *)(v97 + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v101;
    *(void *)(*(void *)(v96 + 48) + 8 * v101) = v5;
    ++*(void *)(v96 + 16);
    goto LABEL_43;
  }

  char v102 = 0;
  unint64_t v103 = (unint64_t)(63 - v98) >> 6;
  while (++v100 != v103 || (v102 & 1) == 0)
  {
    BOOL v104 = v100 == v103;
    if (v100 == v103) {
      unint64_t v100 = 0LL;
    }
    v102 |= v104;
    uint64_t v105 = *(void *)(v97 + 8 * v100);
    if (v105 != -1)
    {
      unint64_t v101 = __clz(__rbit64(~v105)) + (v100 << 6);
      goto LABEL_42;
    }
  }

  __break(1u);
  __break(1u);
LABEL_80:
  swift_once(&qword_100446950, sub_100258A88);
LABEL_4:
  uint64_t v24 = sub_1001B0E98();
  sub_1001B0D98(v24, (uint64_t)qword_100454210);
  uint64_t v25 = v173;
  Logger.logObject.getter(v25, v26, v27);
  os_log_type_t v28 = sub_1001B11C8();
  if (os_log_type_enabled((os_log_t)v5, v28))
  {
    int64_t v29 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v168 = v7;
    uint64_t v30 = sub_1001B0E78(32LL);
    v183[0] = v30;
    *(_DWORD *)int64_t v29 = 136315138;
    id v31 = sub_1001B115C(v30, "UUID");
    sub_1001D8FDC();

    sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v6, v32);
    (*(void (**)(char **, unint64_t))(v168 + 8))(v10, v6);
    uint64_t v35 = sub_1001D92C8(v33, v34, v183);
    uint64_t v36 = sub_1001D9374(v35);
    sub_1001D93DC(v36, v37, (uint64_t)(v29 + 4));

    sub_1001B92A4();
    sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)v5,  v28,  "Not posting user notification for handoff eligible conversation %s because there's already a local non-waiting conversation",  v29);
    sub_1001B0F64(v30);
    sub_1001B0E60(v30);
    sub_1001B0E60((uint64_t)v29);

    goto LABEL_10;
  }

  uint64_t v53 = v175;
LABEL_15:
}

void sub_1001D6908( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  uint64_t v25 = sub_1001B1234();
  uint64_t v53 = *(void *)(v25 - 8);
  sub_1001C7334();
  __chkstk_darwin(v26);
  sub_1001D9040();
  uint64_t v52 = v27;
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v28 = sub_1001B0E98();
  sub_1001B0D98(v28, (uint64_t)qword_100454210);
  id v29 = sub_1001D928C();
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v29, v30, v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  if (sub_1001D91E4(v33))
  {
    uint64_t v34 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v50 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v34 = 138412290;
    uint64_t v55 = (uint64_t)v29;
    uint64_t v35 = v25;
    id v36 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &a9, v34 + 4, v34 + 12);
    *uint64_t v50 = v29;

    uint64_t v25 = v35;
    sub_1001B0FD8((void *)&_mh_execute_header, v32, v21, "Handoff eligibility changed for %@", v34);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v50);
    sub_1001B0E60((uint64_t)v50);
    sub_1001B0E60((uint64_t)v34);
  }

  else
  {
  }

  id v38 = sub_1001D909C(v37, "handoffEligibility");

  if (v38)
  {
    sub_1001D5958();
  }

  else
  {
    id v39 = v29;
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v39, v40, v41);
    os_log_type_t v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v51 = sub_1001B0E78(32LL);
      uint64_t v55 = v51;
      *(_DWORD *)id v44 = 136315138;
      id v45 = [v39 UUID];
      sub_1001D9304();

      sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v25, v46);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v25);
      uint64_t v54 = sub_1001D92C8(v47, v48, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v44 + 4, v44 + 12);

      sub_1001B92A4();
      sub_1001B0FD8( (void *)&_mh_execute_header,  v42,  v43,  "Removing handoff eligible nearby notification for conversation UUID %s",  v44);
      sub_1001B0F64(v51);
      sub_1001B0E60(v51);
      sub_1001B0E60((uint64_t)v44);
    }

    else
    {
    }

    uint64_t v49 = *(void *)(v24 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
    if (v49)
    {
      sub_1001D8F58();
      sub_1001D8F70((uint64_t)"conversation-handoff-nearby");
      sub_1001D8F60(v49);
    }
  }

  sub_1001B0FF8();
}

#error "1001D6C90: call analysis failed (funcsize=24)"
void sub_1001D6CB4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  sub_1001B0F10();
  os_log_type_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = sub_1001B1234();
  __chkstk_darwin(v6);
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v7 = sub_1001B0E98();
  uint64_t v8 = sub_1001B0D98(v7, (uint64_t)qword_100454210);
  uint64_t v9 = v3;
  uint64_t v10 = v5;
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  Logger.logObject.getter(v12, v13, v14);
  id v15 = sub_1001B11C8();
  if (sub_1001D9224(v15))
  {
    id v29 = v1;
    uint64_t v16 = sub_1001B0E78(22LL);
    uint64_t v28 = sub_1001B0E78(64LL);
    uint64_t v31 = v28;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v27 = (os_log_s *)v10;
    uint64_t v17 = sub_1001D9124(v28, "UUID");
    sub_1001D91AC();

    sub_1001C6B98( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = sub_1001D91B4();
    sub_1001D933C();
    uint64_t v30 = sub_1001B1278(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);

    uint64_t v20 = sub_1001B0EC0();
    *(_WORD *)(v16 + 12) = 2080;
    os_log_type_t v21 = sub_1001B115C(v20, "UUID");
    sub_1001D91AC();

    sub_1001D91B4();
    sub_1001D933C();
    uint64_t v22 = sub_1001D907C();
    uint64_t v30 = sub_1001D7CF0(v22, v23, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 14, v16 + 22);

    sub_1001AA9C8();
    sub_1001D9094( (void *)&_mh_execute_header,  v27,  v8,  "Replacing handoff eligible nearby notification from old conversation UUID %s to new conversation UUID %s",  (uint8_t *)v16);
    sub_1001D9350(v28);
    sub_1001B0E60(v28);
    uint64_t v25 = v16;
    os_log_type_t v1 = v29;
    sub_1001B0E60(v25);
  }

  else
  {
  }

  uint64_t v26 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd33GroupFaceTimeNotificationProvider_removeNotification);
  if (v26)
  {
    sub_1001D8F58();
    sub_1001D8F70((uint64_t)"conversation-handoff-nearby");
    sub_1001D8F60(v26);
  }

  sub_1001D5958();
  sub_1001B0FF8();
}

uint64_t sub_1001D6FE0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001D700C(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

void sub_1001D7024()
{
}

uint64_t sub_1001D7030(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001D7040(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1001D7048(uint64_t a1)
{
  Swift::UInt32 v1 = a1;
  sub_1001D8FC0(a1);
  Hasher._combine(_:)(v1);
  Swift::Int v2 = sub_1001B926C();
  return sub_1001D73DC(v1, v2);
}

unint64_t sub_1001D7094(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = sub_1001B926C();
  return sub_1001D7478(a1, a2, v4);
}

unint64_t sub_1001D70EC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1001D7558(a1, v4);
}

unint64_t sub_1001D711C(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_1001D761C(a1, v3);
}

uint64_t sub_1001D714C(uint64_t a1)
{
  Swift::Int v1 = sub_1001B926C();
  return sub_1001D76B8(v1);
}

unint64_t sub_1001D7184(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = sub_1001B1234();
  sub_1001C6B98((unint64_t *)&qword_100447E50, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1001D76E4(a1, v7);
}

unint64_t sub_1001D71EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = sub_1001B926C();
  sub_1001D9020();
  return sub_1001D7824(a1, v7);
}

void sub_1001D7264(unsigned int a1)
{
  uint64_t v3 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 4LL);
  sub_1001D73DC(a1, v3);
  sub_1001AA978();
}

uint64_t sub_1001D729C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1001D7AD4(a1, v4);
}

unint64_t sub_1001D72E8(char a1)
{
  uint64_t v2 = a1 & 1;
  sub_10025555C(*(void *)(v1 + 40), v2);
  return sub_1001D7998(v2, v3);
}

void sub_1001D7318(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  sub_1001D7AD4(a1, v4);
  sub_1001AA978();
}

unint64_t sub_1001D7360(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_1001C6B98(&qword_100447E18, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
  _CFObject.hash(into:)(v7, v3, v4);
  Swift::Int v5 = sub_1001B926C();
  return sub_1001D7BB0(a1, v5);
}

unint64_t sub_1001D73DC(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_1001D7478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_1001D7558(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1001D8A64(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1001D8504((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_1001D761C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1001D76B8(uint64_t a1)
{
  return a1 & ~(-1LL << *(_BYTE *)(v1 + 32));
}

unint64_t sub_1001D76E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_1001C6B98( (unint64_t *)&qword_10044AE20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_1001D7824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_1001D7998(char a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    if ((a1 & 1) != 0) {
      uint64_t v6 = 0x656E6F6850LL;
    }
    else {
      uint64_t v6 = 0x656D695465636146LL;
    }
    if ((a1 & 1) != 0) {
      unint64_t v7 = 0xE500000000000000LL;
    }
    else {
      unint64_t v7 = 0xE800000000000000LL;
    }
    while (1)
    {
      uint64_t v8 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0x656E6F6850LL : 0x656D695465636146LL;
      unint64_t v9 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0xE500000000000000LL : 0xE800000000000000LL;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0LL);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  return v4;
}

uint64_t sub_1001D7AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  sub_1001D9054();
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = v5;
    sub_1001D8EA0(0LL, v6, v7);
    id v10 = sub_1001D93BC();
    char v11 = static NSObject.== infix(_:_:)(v10, v9);

    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v3;
      uint64_t v4 = (v4 + 1) & v12;
      sub_1001D9054();
      if ((v13 & 1) != 0)
      {
        do
        {
          id v14 = sub_1001D93BC();
          char v15 = static NSObject.== infix(_:_:)(v14, v9);

          if ((v15 & 1) != 0) {
            break;
          }
          uint64_t v4 = (v4 + 1) & v12;
          sub_1001D9054();
        }

        while ((v16 & 1) != 0);
      }
    }
  }

  return v4;
}

unint64_t sub_1001D7BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    id v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    sub_1001C6B98(&qword_100447E18, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
    uint64_t v12 = v11;
    id v13 = v10;
    char v14 = static _CFObject.== infix(_:_:)(v13, a1, v9, v12);

    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      for (unint64_t i = (i + 1) & v15; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v15)
      {
        id v16 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v17 = static _CFObject.== infix(_:_:)(v16, a1, v9, v12);

        if ((v17 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_1001D7CF0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1001D7DC0(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1001B03FC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1001B03FC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_1001B0438(v12);
  return v7;
}

void *sub_1001D7DC0(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1001D7F14((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      unint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    unint64_t result = sub_1001D7FD8(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_1001D7F14(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_1001D7FD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1001D806C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1001D828C(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001D828C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1001D806C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  sub_1001D81DC(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 32, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return (void *)v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void sub_1001D81DC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100448E80);
    uint64_t v5 = (void *)sub_1001C7370(v4, v2 + 32);
    size_t v6 = j__malloc_size(v5);
    uint64_t v5[2] = a1;
    v5[3] = 2 * v6 - 64;
  }

  sub_1001AA978();
}

void sub_1001D8238(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v7 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    sub_1001D9234(v7);
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    sub_1001D9234(v6);
  }

  sub_1001AA978();
}

char *sub_1001D828C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100448E80);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  id v13 = v11 + 32;
  char v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1001D8424(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1001D8360(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1001D8360(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_1001D8424(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

void sub_1001D84A4(unint64_t *a1, unint64_t *a2, void *a3)
{
  if (!*a1)
  {
    sub_1001D8EA0(255LL, a2, a3);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4), a1);
  }

  sub_1001AA978();
}

uint64_t sub_1001D84E0(void **a1)
{
  return sub_1001CE42C(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_1001D8504(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D8538(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    int64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_10024772C(0LL, v6, v8);
    sub_1001D86A0((uint64_t)v8, v6, v2);
    uint64_t v10 = v9;
    uint64_t v11 = swift_release(v2);
    if (v1) {
      swift_willThrow(v11);
    }
  }

  else
  {
    size_t v12 = (void *)swift_slowAlloc(v7, -1LL);
    sub_10024772C(0LL, v6, v12);
    sub_1001D86A0((uint64_t)v12, v6, v2);
    uint64_t v10 = v13;
    swift_release(v2);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return v10;
}

void sub_1001D86A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = 0LL;
  int64_t v3 = 0LL;
  uint64_t v26 = a3 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 56);
  int64_t v27 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    unint64_t v7 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v8 = v7 | (v3 << 6);
LABEL_17:
    id v12 = *(id *)(*(void *)(a3 + 48) + 8 * v8);
    id v13 = [v12 handle];
    id v14 = [v13 value];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;

    swift_bridgeObjectRelease(v17);
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000LL) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      id v19 = [v12 handle];
      NSString v20 = [v19 value];

      if (!v20)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v22 = v21;
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v22);
      }

      unsigned __int8 v23 = [v20 destinationIdIsTemporary];

      if ((v23 & 1) == 0)
      {
        *(void *)(a1 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v8;
        BOOL v9 = __OFADD__(v25++, 1LL);
        if (v9) {
          goto LABEL_34;
        }
      }
    }

    else
    {
    }
  }

  BOOL v9 = __OFADD__(v3++, 1LL);
  if (v9)
  {
    __break(1u);
    goto LABEL_33;
  }

  if (v3 >= v27) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v26 + 8 * v3);
  if (v10)
  {
LABEL_16:
    unint64_t v6 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v3 << 6);
    goto LABEL_17;
  }

  int64_t v11 = v3 + 1;
  if (v3 + 1 >= v27) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v26 + 8 * v11);
  if (v10) {
    goto LABEL_15;
  }
  int64_t v11 = v3 + 2;
  if (v3 + 2 >= v27) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v26 + 8 * v11);
  if (v10) {
    goto LABEL_15;
  }
  int64_t v11 = v3 + 3;
  if (v3 + 3 >= v27)
  {
LABEL_31:
    swift_retain(a3);
    sub_10024CC34();
    return;
  }

  unint64_t v10 = *(void *)(v26 + 8 * v11);
  if (v10)
  {
LABEL_15:
    int64_t v3 = v11;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v3 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v3 >= v27) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v3);
    ++v11;
    if (v10) {
      goto LABEL_16;
    }
  }

void sub_1001D8960(uint64_t a1, void *a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setInvitationPreferences:isa];
}

id sub_1001D8A04(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 faceTimeAppViewLinkDetailsURLForPseudonym:v5];

  return v6;
}

uint64_t sub_1001D8A64(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1001D8AA0()
{
  uint64_t v1 = v0(0LL);
  sub_1001B0FE0(v1);
  sub_1001AA978();
}

void sub_1001D8AC8(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setActiveParticipantHandles:isa];
}

void sub_1001D8B20(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    int64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {
    sub_1001D9254();
  }

  sub_1001D907C();
  sub_10010B978();
}

void sub_1001D8B6C(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];
  sub_1001D8FCC();
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_1001D93F0();
  }

  sub_1001D9260();
  sub_10010B978();
}

Swift::Int sub_1001D8BBC(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = sub_1001B926C();
  swift_bridgeObjectRelease(v3);
  return v5;
}

uint64_t sub_1001D8C24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  sub_1001B0EB8();
  sub_1001AA9C8();
  return v9 & 1;
}

uint64_t sub_1001D8CA0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1001D8CAC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001D8CD0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001D8D04(unint64_t a1)
{
  return sub_1001D2A90(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1001D8D10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001D8D3C()
{
}

void sub_1001D8D60()
{
  uint64_t v1 = sub_1001AFF14(v0);
  sub_1001B0FE0(v1);
  sub_1001AA978();
}

uint64_t sub_1001D8D8C()
{
  return sub_1001D8E14((uint64_t (*)(unint64_t, void))sub_1001D02E0);
}

uint64_t sub_1001D8D9C()
{
  uint64_t v1 = sub_1001C9578();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  uint64_t v7 = sub_1001D9260();
  return swift_deallocObject(v7, v8, v5);
}

uint64_t sub_1001D8E08()
{
  return sub_1001D8E14((uint64_t (*)(unint64_t, void))sub_1001CEE30);
}

uint64_t sub_1001D8E14(uint64_t (*a1)(unint64_t, void))
{
  uint64_t v2 = *(void *)(sub_1001C9578() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(v1 + v3, *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1001D8E60()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001D8E84()
{
}

uint64_t sub_1001D8E90()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001D8EA0(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  sub_1001AA978();
}

void sub_1001D8F04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1001D8F20()
{
  return swift_allocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001D8F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A9670(a1, a2, a3, a4);
}

id sub_1001D8F3C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001D8F44()
{
  return swift_endAccess(v0 - 104);
}

uint64_t sub_1001D8F4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1001D8F58()
{
  return swift_retain(v0);
}

uint64_t sub_1001D8F60(uint64_t a1)
{
  return sub_1001B5D3C(a1, v1);
}

id sub_1001D8F68(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001D8F70@<X0>(uint64_t a1@<X8>)
{
  return v1(0xD00000000000001BLL, (a1 - 32) | 0x8000000000000000LL);
}

id sub_1001D8F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001CDAA8(a1, a2, a3, a4, 0LL);
}

uint64_t sub_1001D8F90()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1001D8F9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B5D3C(*(void *)(v1 + a1), *(void *)(v1 + a1 + 8));
}

uint64_t sub_1001D8FA8()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t sub_1001D8FB0(uint64_t a1, uint64_t a2)
{
  return sub_1001D7094(a1, a2);
}

uint64_t sub_1001D8FB8()
{
  return swift_endAccess(v0 - 112);
}

void *sub_1001D8FC0(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

void sub_1001D8FCC()
{
}

id sub_1001D8FD4(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1001D8FDC()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1001D8FE8(uint64_t a1, unint64_t *a2, void *a3)
{
}

void sub_1001D8FF0()
{
}

uint64_t sub_1001D9000(uint64_t a1)
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, a1);
}

uint64_t sub_1001D9010()
{
  return sub_1001D7CF0(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_1001D9020()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1001D9028( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1001D9068()
{
  return v0;
}

uint64_t sub_1001D907C()
{
  return v0;
}

void sub_1001D9088(id a1)
{
}

void sub_1001D9094(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

id sub_1001D909C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_1001D90A4(unint64_t *a1)
{
}

uint64_t sub_1001D90B0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1001D90B8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 152))(a1, v1);
}

id sub_1001D90C4(uint64_t a1, uint64_t a2)
{
  return v2;
}

NSBundle *sub_1001D90D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F88F0(0xD000000000000011LL, (void *)((a1 - 32) | 0x8000000000000000LL));
}

void sub_1001D90EC(uint64_t a1@<X8>)
{
}

uint64_t sub_1001D90F4()
{
  return 0LL;
}

void sub_1001D9110()
{
}

id sub_1001D9124(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001D912C(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 56) + 16 * a1 + 8));
}

uint64_t sub_1001D9140(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 56) + 8 * a1));
}

unint64_t sub_1001D914C(uint64_t a1)
{
  return sub_1001D7184(a1);
}

uint64_t sub_1001D9154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t sub_1001D9164(uint64_t a1)
{
  return sub_1001B5D3C(a1, v1);
}

uint64_t sub_1001D9174(uint64_t a1)
{
  return v1(a1, v2);
}

BOOL sub_1001D917C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1001D918C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v3, v4);
}

unint64_t sub_1001D919C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1001D91AC()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1001D91B4()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, v0);
}

uint64_t sub_1001D91C4@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(a1 + 8));
}

  ;
}

BOOL sub_1001D91E4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

  ;
}

BOOL sub_1001D9224(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

unint64_t sub_1001D9234(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1001D924C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

uint64_t sub_1001D9260()
{
  return v0;
}

uint64_t sub_1001D926C()
{
  return swift_release(v0);
}

  ;
}

id sub_1001D928C()
{
  return v0;
}

void sub_1001D9294()
{
}

uint64_t sub_1001D929C()
{
  return 0LL;
}

id sub_1001D92AC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001D92B4()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1001D92C0()
{
}

uint64_t sub_1001D92C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001D7CF0(a1, v3, a3);
}

void sub_1001D92D0()
{
}

uint64_t sub_1001D92DC(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1001D92E4()
{
}

char *sub_1001D92EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t sub_1001D92F8( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10024ABC4((uint64_t *)va, a2);
}

uint64_t sub_1001D9304()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1001D930C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

NSString sub_1001D9318()
{
  return String._bridgeToObjectiveC()();
}

NSBundle *sub_1001D9324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F88F0(a1, (void *)((a2 - 32) | 0x8000000000000000LL));
}

uint64_t sub_1001D9330()
{
  return v0;
}

uint64_t sub_1001D933C()
{
  return v0(v2, v1);
}

void sub_1001D9348(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1001D9350(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

void sub_1001D9358()
{
}

  ;
}

uint64_t sub_1001D9374(uint64_t a1)
{
  *(void *)(v1 - 16_Block_object_dispose(va, 8) = a1;
  return v1 - 168;
}

void sub_1001D9388( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_1001D9394(uint64_t a1, uint64_t a2)
{
  return sub_1001A9670(a1, a2, 1LL, v2);
}

  ;
}

uint64_t sub_1001D93B4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

id sub_1001D93BC()
{
  return *(id *)(*(void *)(v1 + 48) + 8 * v0);
}

uint64_t sub_1001D93C8()
{
  return v0;
}

uint64_t sub_1001D93DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

  ;
}

void sub_1001D93F0()
{
}

uint64_t sub_1001D93FC(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1001D9404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 88, v4, a3, a4);
}

  ;
}

  ;
}

id sub_1001D9430(uint64_t a1)
{
  return *(id *)(*(void *)(v1 + 56) + 8 * a1);
}

uint64_t sub_1001D943C()
{
  return 2003134838LL;
}

uint64_t sub_1001D9450(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1001D9464()
{
  return sub_1001FD914();
}

NSString sub_1001D9470()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1001D947C(void *a1)
{
  uint64_t result = (uint64_t)[*(id *)(v1 + 16) activeConversationForCall:a1];
  if (result)
  {
    uint64_t v4 = (void *)result;
    if ([(id)result isOneToOneModeEnabled])
    {
      id v5 = [v4 mergedRemoteMembers];
      uint64_t v6 = sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
      unint64_t v7 = sub_1001DBD34();
      uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v5, v6, v7);

      uint64_t v9 = sub_10024E694(v8);
      swift_bridgeObjectRelease(v8);

      return v9 == 1;
    }

    else
    {

      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001D956C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_1001AFF14(&qword_100447FB8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for SoundDescriptorAction(0LL);
  uint64_t v10 = __chkstk_darwin(v129);
  uint64_t v125 = (uint64_t)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v124 = (uint64_t)&v119 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v119 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  id v19 = (char *)&v119 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  if ((sub_1001D8F3C(v20, "isEndpointOnCurrentDevice") & 1) == 0 && (a2 & 0x20) == 0)
  {
    uint64_t v21 = sub_1001AFF14(&qword_100447FC0);
    uint64_t v22 = a3;
    return sub_1001A9670(v22, 1LL, 2LL, v21);
  }

  uint64_t v123 = a3;
  id v23 = [a1 provider];
  unsigned int v24 = [v23 supportsCurrentPlatform];

  if (!v24)
  {
    uint64_t v21 = sub_1001AFF14(&qword_100447FC0);
    uint64_t v22 = v123;
    return sub_1001A9670(v22, 1LL, 2LL, v21);
  }

  uint64_t v25 = swift_allocBox(v129);
  uint64_t v27 = v26;
  uint64_t v28 = sub_1001AFF14(&qword_100447FC0);
  uint64_t v126 = v27;
  uint64_t v127 = v28;
  uint64_t v29 = sub_1001A9670(v27, 1LL, 2LL, v28);
  if ((a2 & 0x20) != 0)
  {
    uint64_t v29 = (uint64_t)sub_1001D8F3C(v29, "isEndpointOnCurrentDevice");
    if ((v29 & 1) == 0)
    {
      sub_1001DBDF0();
      sub_1001DBE78(v30, type metadata accessor for SoundDescriptorAction);
    }
  }

  if ((a2 & 0x200) != 0 && (sub_1001D8F3C(v29, "needsManualInCallSounds") & 1) == 0)
  {
    sub_1001DBDF0();
    sub_1001DBE78(v31, type metadata accessor for SoundDescriptorAction);
  }

  if ((a2 & 1) != 0)
  {
    sub_1001DBDF0();
    sub_1001DBE78(v32, type metadata accessor for SoundDescriptorAction);
  }

  uint64_t v122 = v25;
  id v33 = sub_1001DA068();
  uint64_t v34 = swift_allocObject(&unk_1003DF5D8, 24LL, 7LL);
  *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v35 = sub_1001DBDC4((uint64_t)&unk_1003DF600);
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1001DBB5C;
  *(void *)(v35 + 24) = v34;
  uint64_t v121 = v34;
  aBlock[4] = sub_1001DBB8C;
  uint64_t v133 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100268458;
  void aBlock[3] = &unk_1003DF618;
  id v36 = _Block_copy(aBlock);
  uint64_t v37 = v133;
  id v128 = a1;
  swift_retain(v35);
  swift_release(v37);
  uint64_t v38 = (uint64_t)[v33 anyCallPassesTest:v36];
  swift_unknownObjectRelease(v33);
  _Block_release(v36);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v35, "", 108LL, 92LL, 62LL, 1LL);
  swift_release(v35);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_89:
    sub_1001DBDD0();
    uint64_t v45 = v41;
    goto LABEL_19;
  }

  if ((v38 & 1) != 0)
  {
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }

  uint64_t v38 = sub_1001DBDC4((uint64_t)&unk_1003DF650);
  sub_1001DBDE4(v38, (uint64_t)sub_1001DBBAC);
  sub_1002B0188();
  unint64_t v44 = *(void *)(v41 + 16);
  uint64_t v45 = v41;
  uint64_t isEscapingClosureAtFileLocation = v44 + 1;
  if (v44 >= *(void *)(v41 + 24) >> 1) {
    goto LABEL_89;
  }
LABEL_19:
  sub_1001DBE2C(v41, v42, v43, v45);
  *(void *)(v46 + 32) = sub_1001DBBB0;
  *(void *)(v46 + 40) = v38;
LABEL_20:
  id v47 = v128;
  id v120 = [*(id *)(v3 + 16) activeConversationForCall:v128];
  if ((sub_1001D947C(v47) & 1) != 0)
  {
    uint64_t v48 = sub_1001DBDC4((uint64_t)&unk_1003DF768);
    sub_1001DBDE4(v48, (uint64_t)sub_1001DBCD0);
    if ((sub_1001DBE50() & 1) == 0)
    {
      sub_1001DBDAC();
      uint64_t isEscapingClosureAtFileLocation = v108;
    }

    unint64_t v49 = *(void *)(isEscapingClosureAtFileLocation + 16);
    uint64_t v50 = isEscapingClosureAtFileLocation;
    if (v49 >= *(void *)(isEscapingClosureAtFileLocation + 24) >> 1)
    {
      sub_1001DBE3C();
      uint64_t v50 = v109;
    }

    *(void *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = v49 + 1;
    uint64_t v51 = v50 + 16 * v49;
    *(void *)(v51 + 32) = sub_1001DBDA8;
    *(void *)(v51 + 40) = v48;
    uint64_t v52 = sub_1001DBDC4((uint64_t)&unk_1003DF790);
    *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1001DBCD4;
    *(void *)(v52 + 24) = v3;
    unint64_t v53 = *(void *)(v50 + 16);
    unint64_t v54 = *(void *)(v50 + 24);
    sub_1001D8F58();
    if (v53 >= v54 >> 1)
    {
      sub_1001DBE3C();
      uint64_t v50 = v110;
    }

    *(void *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = v53 + 1;
    uint64_t isEscapingClosureAtFileLocation = v50;
    uint64_t v55 = v50 + 16 * v53;
    *(void *)(v55 + 32) = sub_1001DBDA8;
    *(void *)(v55 + 40) = v52;
    if (([v128 isVideo] & 1) == 0)
    {
      uint64_t v56 = sub_1001DBDC4((uint64_t)&unk_1003DF7B8);
      *(void *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1001DBCD8;
      *(void *)(v56 + 24) = v3;
      unint64_t v57 = *(void *)(v50 + 16);
      unint64_t v58 = *(void *)(v50 + 24);
      sub_1001D8F58();
      if (v57 >= v58 >> 1)
      {
        sub_1001DBE3C();
        uint64_t v50 = v118;
      }

      *(void *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = v57 + 1;
      uint64_t isEscapingClosureAtFileLocation = v50;
      uint64_t v59 = v50 + 16 * v57;
      *(void *)(v59 + 32) = sub_1001DBDA8;
      *(void *)(v59 + 40) = v56;
    }
  }

  if ((a2 & 0x10000) != 0)
  {
    uint64_t v62 = sub_1001DBDC4((uint64_t)&unk_1003DF740);
    sub_1001DBDE4(v62, (uint64_t)sub_1001DBCCC);
    if ((sub_1001DBE50() & 1) == 0)
    {
      sub_1001DBDAC();
      uint64_t isEscapingClosureAtFileLocation = v111;
    }

    sub_1001DBE18();
    if (v67)
    {
      sub_1001DBDD0();
      uint64_t v66 = v63;
    }

    sub_1001DBE2C(v63, v64, v65, v66);
    *(void *)(v68 + 32) = sub_1001DBDA8;
    *(void *)(v68 + 40) = v62;
    if ((a2 & 0x40000) == 0)
    {
LABEL_33:
      if ((a2 & 0x80000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_49;
    }
  }

  else if ((a2 & 0x40000) == 0)
  {
    goto LABEL_33;
  }

  uint64_t v69 = sub_1001DBDC4((uint64_t)&unk_1003DF718);
  sub_1001DBDE4(v69, (uint64_t)sub_1001DBCC8);
  if ((sub_1001DBE50() & 1) == 0)
  {
    sub_1001DBDAC();
    uint64_t isEscapingClosureAtFileLocation = v112;
  }

  sub_1001DBE18();
  if (v67)
  {
    sub_1001DBDD0();
    uint64_t v73 = v70;
  }

  sub_1001DBE2C(v70, v71, v72, v73);
  *(void *)(v74 + 32) = sub_1001DBDA8;
  *(void *)(v74 + 40) = v69;
  if ((a2 & 0x80000) == 0)
  {
LABEL_34:
    if ((a2 & 0x100000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_54;
  }

void sub_1001D9EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v19[-v9];
  __chkstk_darwin(v8);
  uint64_t v12 = &v19[-v11];
  uint64_t v13 = swift_projectBox(a2);
  swift_beginAccess(v13, v20, 0LL, 0LL);
  sub_1001DBD08(v13, (uint64_t)v12, type metadata accessor for SoundDescriptorAction);
  sub_1001DBD08((uint64_t)v12, (uint64_t)v10, type metadata accessor for SoundDescriptorAction);
  uint64_t v14 = sub_1001AFF14(&qword_100447FC0);
  int v15 = sub_1001AB0AC((uint64_t)v10, 2LL, v14);
  if (v15)
  {
    if (v15 == 1) {
      unint64_t v16 = 1LL;
    }
    else {
      unint64_t v16 = 2LL;
    }
  }

  else
  {
    sub_1001DBC18((uint64_t)v10, type metadata accessor for SoundDescriptor);
    unint64_t v16 = 3LL;
  }

  sub_1001DBD08(a1, (uint64_t)v7, type metadata accessor for SoundDescriptorAction);
  int v17 = sub_1001AB0AC((uint64_t)v7, 2LL, v14);
  if (v17)
  {
    if (v17 == 1) {
      unint64_t v18 = 1LL;
    }
    else {
      unint64_t v18 = 2LL;
    }
  }

  else
  {
    sub_1001DBC18((uint64_t)v7, type metadata accessor for SoundDescriptor);
    unint64_t v18 = 3LL;
  }

  sub_1001DBC18((uint64_t)v12, type metadata accessor for SoundDescriptorAction);
  if (v16 < v18)
  {
    swift_beginAccess(v13, v19, 1LL, 0LL);
    sub_1001DBC50(a1, v13);
  }

id sub_1001DA068()
{
  return [*(id *)(v0 + 16) callContainer];
}

uint64_t sub_1001DA08C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ([a1 status] == 6 && (a2 & 1) != 0)
  {
    id v8 = sub_1001DA068();
    unsigned __int8 v9 = [v8 hasCurrentAudioCalls];
    swift_unknownObjectRelease(v8);
    if ((v9 & 1) == 0)
    {
      if ([a1 isEndpointOnCurrentDevice])
      {
        [a1 callDuration];
        if (v10 > 0.0
          || ([a1 isOutgoing] & 1) != 0
          || [a1 disconnectedReason] == 14)
        {
          if ([a1 needsManualInCallSounds])
          {
            unsigned int v11 = [a1 disconnectedReason] - 5;
            if (v11 < 0x14 && ((0xE7603u >> v11) & 1) != 0)
            {
              uint64_t v12 = *(void *)&asc_10037B880[8 * v11];
              goto LABEL_18;
            }

            if ((*(_BYTE *)(v3 + 24) & 1) != 0)
            {
              uint64_t v12 = 6LL;
LABEL_18:
              sub_100251920(a1, v12, 0, a3);
              uint64_t v16 = sub_1001AFF14(&qword_100447FC0);
              sub_1001A9670(a3, 0LL, 2LL, v16);
              uint64_t v13 = 0LL;
              goto LABEL_16;
            }
          }
        }
      }
    }
  }

  uint64_t v13 = 1LL;
LABEL_16:
  uint64_t v14 = type metadata accessor for SoundDescriptorAction(0LL);
  return sub_1001A9670(a3, v13, 1LL, v14);
}

uint64_t sub_1001DA20C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SoundDescriptorAction(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v8);
  double v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if ([a1 status] == 3
    && [a1 needsManualInCallSounds]
    && (id v11 = [a1 provider],
        unsigned int v12 = [v11 supportsRinging],
        v11,
        v12))
  {
    id v13 = [a1 provider];
    unsigned int v14 = [v13 isFaceTimeProvider];

    id v15 = a1;
    id v36 = [v15 provider];
    unsigned int v35 = [v15 isVideo];
    id v16 = [v15 soundRegion];

    uint64_t v17 = *(int *)(v8 + 32);
    uint64_t v18 = type metadata accessor for UUID(0LL);
    if (v14)
    {
      sub_1001A9670((uint64_t)&v10[v17], 1LL, 1LL, v18);
      id v19 = v36;
      *(void *)double v10 = 1LL;
      *((void *)v10 + 1) = v19;
      v10[16] = v35;
      *((void *)v10 + 3) = v16;
      v10[*(int *)(v8 + 36)] = 1;
      sub_1001DBD08((uint64_t)v10, (uint64_t)v7, type metadata accessor for SoundDescriptor);
      uint64_t v20 = sub_1001AFF14(&qword_100447FC0);
      sub_1001A9670((uint64_t)v7, 0LL, 2LL, v20);
      [v15 hasSentInvitation];
      if ((*(_BYTE *)(v2 + 24) & 1) != 0 || (sub_1001DBAA8() & 1) != 0)
      {
        if ([v15 isVideo])
        {
          id v21 = sub_1001DA068();
          unsigned __int8 v22 = [v21 hasCurrentAudioCalls];
          swift_unknownObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            sub_1001DBC18((uint64_t)v10, type metadata accessor for SoundDescriptor);
LABEL_20:
            sub_1001DBCDC((uint64_t)v7, a2, type metadata accessor for SoundDescriptorAction);
            uint64_t v27 = a2;
            uint64_t v28 = 0LL;
            return sub_1001A9670(v27, v28, 1LL, v5);
          }
        }

        if (([v15 isVideo] & 1) != 0
          || (id v23 = sub_1001DA068(),
              id v24 = [v23 currentCallCount],
              swift_unknownObjectRelease(v23),
              v24 != (id)1))
        {
          sub_1001DBC18((uint64_t)v10, type metadata accessor for SoundDescriptor);
        }

        else
        {
          id v25 = sub_1001DA068();
          unsigned __int8 v26 = [v25 hasCurrentVideoCalls];
          swift_unknownObjectRelease(v25);
          sub_1001DBC18((uint64_t)v10, type metadata accessor for SoundDescriptor);
          if ((v26 & 1) == 0) {
            goto LABEL_20;
          }
        }

        uint64_t v31 = type metadata accessor for SoundDescriptorAction;
        uint64_t v32 = (uint64_t)v7;
      }

      else
      {
        sub_1001DBC18((uint64_t)v7, type metadata accessor for SoundDescriptorAction);
        uint64_t v31 = type metadata accessor for SoundDescriptor;
        uint64_t v32 = (uint64_t)v10;
      }

      sub_1001DBC18(v32, v31);
      uint64_t v27 = a2;
      uint64_t v28 = 1LL;
    }

    else
    {
      sub_1001A9670(a2 + v17, 1LL, 1LL, v18);
      id v29 = v36;
      *(void *)a2 = 1LL;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v29;
      *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
      *(void *)(a2 + 24) = v16;
      *(_BYTE *)(a2 + *(int *)(v8 + 36)) = 0;
      uint64_t v30 = sub_1001AFF14(&qword_100447FC0);
      sub_1001A9670(a2, 0LL, 2LL, v30);
      uint64_t v27 = a2;
      uint64_t v28 = 0LL;
    }
  }

  else
  {
    uint64_t v27 = a2;
    uint64_t v28 = 1LL;
  }

  return sub_1001A9670(v27, v28, 1LL, v5);
}

void sub_1001DA5E8(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = sub_1001DA068();
  id v6 = [v5 incomingCall];
  swift_unknownObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = objc_opt_self(&OBJC_CLASS___CSDCall);
    uint64_t v8 = (void *)swift_dynamicCastObjCClass(v6, v7);
    if (!v8) {
  }
    }

  else
  {
    uint64_t v8 = 0LL;
  }

  id v9 = sub_1001DA068();
  id v10 = [v9 incomingVideoCall];
  swift_unknownObjectRelease(v9);
  if (v10)
  {
    uint64_t v11 = objc_opt_self(&OBJC_CLASS___CSDCall);
    unsigned int v12 = (void *)swift_dynamicCastObjCClass(v10, v11);
    if (v12)
    {
      id v81 = v12;
      goto LABEL_10;
    }
  }

  id v81 = 0LL;
LABEL_10:
  id v13 = sub_1001DA068();
  id v14 = [v13 displayedCalls];
  swift_unknownObjectRelease(v13);
  uint64_t v15 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044AB70, &OBJC_CLASS___TUCall_ptr);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if (!((unint64_t)v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_12;
    }
LABEL_20:
    swift_bridgeObjectRelease(v16);
    uint64_t v20 = 0LL;
    goto LABEL_21;
  }

  if (v16 < 0) {
    uint64_t v21 = v16;
  }
  else {
    uint64_t v21 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v16);
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v16);
  if (!v22) {
    goto LABEL_20;
  }
LABEL_12:
  sub_1002734A0(0LL, (v16 & 0xC000000000000001LL) == 0, v16);
  if ((v16 & 0xC000000000000001LL) != 0) {
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
  }
  else {
    id v17 = *(id *)(v16 + 32);
  }
  uint64_t v18 = v17;
  swift_bridgeObjectRelease(v16);
  uint64_t v19 = objc_opt_self(&OBJC_CLASS___CSDCall);
  uint64_t v20 = (void *)swift_dynamicCastObjCClass(v18, v19);
  if (!v20) {

  }
LABEL_21:
  id v23 = sub_1001DA068();
  id v24 = [v23 activeVideoCall];
  swift_unknownObjectRelease(v23);
  if (v24)
  {
    uint64_t v25 = objc_opt_self(&OBJC_CLASS___CSDCall);
    id v26 = (id)swift_dynamicCastObjCClass(v24, v25);
    if (!v26) {
  }
    }

  else
  {
    id v26 = 0LL;
  }

  if (v8)
  {
    id v27 = v8;
    if (v26)
    {
LABEL_27:
      uint64_t v77 = v2;
      uint64_t v78 = v4;
      uint64_t v79 = a1;
      id v28 = v20;
      id v29 = v26;
      goto LABEL_32;
    }
  }

  else
  {
    if (!v81)
    {
      id v81 = v20;
      goto LABEL_55;
    }

    id v27 = v81;
    if (v26) {
      goto LABEL_27;
    }
  }

  if (!v20)
  {
    id v26 = v27;
    goto LABEL_55;
  }

  uint64_t v77 = v2;
  uint64_t v78 = v4;
  uint64_t v79 = a1;
  id v28 = v20;
  id v26 = 0LL;
  id v29 = v28;
LABEL_32:
  id v30 = v8;
  id v26 = v26;
  id v31 = v28;
  id v80 = v29;
  id v32 = [v29 uniqueProxyIdentifier];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  id v36 = [v27 uniqueProxyIdentifier];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  if (v33 == v37 && v35 == v39)
  {

    swift_bridgeObjectRelease_n(v35, 2LL);
    goto LABEL_39;
  }

  id v76 = v30;
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v39);
  if ((v41 & 1) != 0)
  {

LABEL_39:
    a1 = v79;

LABEL_55:
    uint64_t v64 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a1, 1LL, 1LL, v64);
    return;
  }

  id v42 = v80;
  if ((![v80 needsManualInCallSounds]
     || ([v42 isEndpointOnCurrentDevice] & 1) == 0)
    && (![v27 needsManualInCallSounds]
     || ([v27 isEndpointOnCurrentDevice] & 1) == 0))
  {
    id v43 = [v42 provider];
    id v44 = [v43 identifier];

    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v47 = v46;

    id v48 = [v27 provider];
    id v49 = [v48 identifier];

    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    uint64_t v52 = v51;

    if (v45 == v50 && v47 == v52)
    {
      swift_bridgeObjectRelease_n(v47, 2LL);
      id v42 = v80;
    }

    else
    {
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v50, v52, 0LL);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v52);
      id v42 = v80;
      if ((v54 & 1) == 0) {
        goto LABEL_49;
      }
    }

    uint64_t v65 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(v79, 1LL, 1LL, v65);

    return;
  }

uint64_t sub_1001DAD7C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 4) != 0
    && [a1 isConnected]
    && [a1 needsManualInCallSounds])
  {
    sub_100251920(a1, 2LL, 0, a3);
    uint64_t v5 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v5);
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  uint64_t v7 = type metadata accessor for SoundDescriptorAction(0LL);
  return sub_1001A9670(a3, v6, 1LL, v7);
}

void sub_1001DAE20(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (([a1 isPTT] & 1) != 0
    || ([a1 status] != 6 ? (BOOL v12 = (*(void *)&a2 & 0x10000) == 0) : (BOOL v12 = 1), v12))
  {
    uint64_t v13 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 1LL, 1LL, v13);
  }

  else
  {
    unsigned int v14 = [a1 isUplinkMuted];
    id v15 = a1;
    id v16 = [v15 provider];
    unsigned __int8 v17 = [v15 isVideo];
    id v18 = [v15 soundRegion];

    uint64_t v19 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v20 = type metadata accessor for UUID(0LL);
    uint64_t v21 = sub_1001A9670(v19, 1LL, 1LL, v20);
    uint64_t v22 = 10LL;
    if (!v14) {
      uint64_t v22 = 11LL;
    }
    *(void *)uint64_t v11 = v22;
    *((void *)v11 + 1) = v16;
    v11[16] = v17;
    *((void *)v11 + 3) = v18;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()(v21);
    type metadata accessor for UUID(0LL);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v20);
    sub_1001B0DF0((uint64_t)v8, (uint64_t)&v11[*(int *)(v9 + 32)]);
    sub_1001DBD08((uint64_t)v11, a3, type metadata accessor for SoundDescriptor);
    uint64_t v23 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v23);
    uint64_t v24 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 0LL, 1LL, v24);
    sub_1001DBC18((uint64_t)v11, type metadata accessor for SoundDescriptor);
  }

void sub_1001DB080(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x40000) != 0)
  {
    id v13 = a1;
    id v14 = [v13 provider];
    unsigned __int8 v15 = [v13 isVideo];
    id v16 = [v13 soundRegion];

    uint64_t v17 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = sub_1001A9670(v17, 1LL, 1LL, v18);
    *(void *)uint64_t v11 = 13LL;
    *((void *)v11 + 1) = v14;
    v11[16] = v15;
    *((void *)v11 + 3) = v16;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()(v19);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v18);
    sub_1001B0DF0((uint64_t)v8, v17);
    sub_1001DBD08((uint64_t)v11, a3, type metadata accessor for SoundDescriptor);
    uint64_t v20 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 0LL, 1LL, v21);
    sub_1001DBC18((uint64_t)v11, type metadata accessor for SoundDescriptor);
  }

  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 1LL, 1LL, v12);
  }

void sub_1001DB288(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x80000) != 0)
  {
    id v13 = a1;
    id v14 = [v13 provider];
    unsigned __int8 v15 = [v13 isVideo];
    id v16 = [v13 soundRegion];

    uint64_t v17 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = sub_1001A9670(v17, 1LL, 1LL, v18);
    *(void *)uint64_t v11 = 14LL;
    *((void *)v11 + 1) = v14;
    v11[16] = v15;
    *((void *)v11 + 3) = v16;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()(v19);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v18);
    sub_1001B0DF0((uint64_t)v8, v17);
    sub_1001DBD08((uint64_t)v11, a3, type metadata accessor for SoundDescriptor);
    uint64_t v20 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 0LL, 1LL, v21);
    sub_1001DBC18((uint64_t)v11, type metadata accessor for SoundDescriptor);
  }

  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 1LL, 1LL, v12);
  }

void sub_1001DB490(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x100000) != 0)
  {
    id v13 = a1;
    id v14 = [v13 provider];
    unsigned __int8 v15 = [v13 isVideo];
    id v16 = [v13 soundRegion];

    uint64_t v17 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = sub_1001A9670(v17, 1LL, 1LL, v18);
    *(void *)uint64_t v11 = 15LL;
    *((void *)v11 + 1) = v14;
    v11[16] = v15;
    *((void *)v11 + 3) = v16;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()(v19);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v18);
    sub_1001B0DF0((uint64_t)v8, v17);
    sub_1001DBD08((uint64_t)v11, a3, type metadata accessor for SoundDescriptor);
    uint64_t v20 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 0LL, 1LL, v21);
    sub_1001DBC18((uint64_t)v11, type metadata accessor for SoundDescriptor);
  }

  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 1LL, 1LL, v12);
  }

void sub_1001DB698(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x200000) != 0)
  {
    id v13 = a1;
    id v14 = [v13 provider];
    unsigned __int8 v15 = [v13 isVideo];
    id v16 = [v13 soundRegion];

    uint64_t v17 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = sub_1001A9670(v17, 1LL, 1LL, v18);
    *(void *)uint64_t v11 = 16LL;
    *((void *)v11 + 1) = v14;
    v11[16] = v15;
    *((void *)v11 + 3) = v16;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()(v19);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v18);
    sub_1001B0DF0((uint64_t)v8, v17);
    sub_1001DBD08((uint64_t)v11, a3, type metadata accessor for SoundDescriptor);
    uint64_t v20 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 0LL, 1LL, v21);
    sub_1001DBC18((uint64_t)v11, type metadata accessor for SoundDescriptor);
  }

  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 1LL, 1LL, v12);
  }

void sub_1001DB8A0(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundDescriptor(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x400000) != 0)
  {
    id v13 = a1;
    id v14 = [v13 provider];
    unsigned __int8 v15 = [v13 isVideo];
    id v16 = [v13 soundRegion];

    uint64_t v17 = (uint64_t)&v11[*(int *)(v9 + 32)];
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = sub_1001A9670(v17, 1LL, 1LL, v18);
    *(void *)uint64_t v11 = 17LL;
    *((void *)v11 + 1) = v14;
    v11[16] = v15;
    *((void *)v11 + 3) = v16;
    v11[*(int *)(v9 + 36)] = 0;
    UUID.init()(v19);
    sub_1001A9670((uint64_t)v8, 0LL, 1LL, v18);
    sub_1001B0DF0((uint64_t)v8, v17);
    sub_1001DBD08((uint64_t)v11, a3, type metadata accessor for SoundDescriptor);
    uint64_t v20 = sub_1001AFF14(&qword_100447FC0);
    sub_1001A9670(a3, 0LL, 2LL, v20);
    uint64_t v21 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 0LL, 1LL, v21);
    sub_1001DBC18((uint64_t)v11, type metadata accessor for SoundDescriptor);
  }

  else
  {
    uint64_t v12 = type metadata accessor for SoundDescriptorAction(0LL);
    sub_1001A9670(a3, 1LL, 1LL, v12);
  }

uint64_t sub_1001DBAA8()
{
  uint64_t v0 = MGGetBoolAnswer(@"DeviceSupportsLaguna");
  return v0;
}

uint64_t sub_1001DBAF4()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t type metadata accessor for SoundDescriptorActionResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd29SoundDescriptorActionResolver);
}

uint64_t sub_1001DBB38()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1001DBB5C(void *a1)
{
  return [a1 isVideoUpgradeFromCall:*(void *)(v1 + 16)];
}

uint64_t sub_1001DBB7C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001DBB8C(uint64_t a1)
{
  return sub_100268434(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1001DBB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001DBBA4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001DBBB0(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1001DBBD8(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100447FB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1001DBC18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_1001AA978();
}

uint64_t sub_1001DBC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DBC9C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001DBCDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1001B118C(a1, a2, a3);
  sub_1001DBE58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1001AA978();
}

void sub_1001DBD08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1001B118C(a1, a2, a3);
  sub_1001DBE58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1001AA978();
}

unint64_t sub_1001DBD34()
{
  unint64_t result = qword_10044A420;
  if (!qword_10044A420)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10044A420);
  }

  return result;
}

void sub_1001DBDAC()
{
}

uint64_t sub_1001DBDC4(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

void sub_1001DBDD0()
{
}

uint64_t sub_1001DBDE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(a1 + 24) = v2;
  return swift_retain(v2);
}

void sub_1001DBDF0()
{
}

  ;
}

void sub_1001DBE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
}

void sub_1001DBE3C()
{
}

uint64_t sub_1001DBE50()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1001DBE58@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_1001DBE64(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001DBE6C(uint64_t a1)
{
  return sub_1001AB0AC(a1, 2LL, *(void *)(v1 - 192));
}

void sub_1001DBE78(uint64_t a1, uint64_t (*a2)(void))
{
}

id sub_1001DBE80()
{
  id result = sub_1002523B8(0xD000000000000023LL, 0x800000010036D4A0LL);
  qword_100447FC8 = (uint64_t)result;
  return result;
}

id sub_1001DBED8()
{
  if (qword_1004466C0 != -1) {
    swift_once(&qword_1004466C0, sub_1001DBE80);
  }
  return (id)qword_100447FC8;
}

id sub_1001DBF18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for FaceTimeLivePhotosIDSService();
  id v9 = objc_msgSendSuper2(&v11, "initWithName:service:queryController:", v8, a3, a4);

  return v9;
}

id sub_1001DC004()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeLivePhotosIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeLivePhotosIDSService()
{
  return objc_opt_self(&OBJC_CLASS___CSDFaceTimeLivePhotosIDSService);
}

uint64_t sub_1001DC058(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656E6F6850LL;
  }
  else {
    return 0x656D695465636146LL;
  }
}

uint64_t sub_1001DC090()
{
  return 0LL;
}

uint64_t sub_1001DC09C(Swift::String string)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DC9E0, v3);
  sub_1001B4C30();
  if (v1 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v1) {
    return v4;
  }
  else {
    return 0LL;
  }
}

void sub_1001DC0E4(char *a1, char *a2)
{
}

void sub_1001DC0F0()
{
}

uint64_t sub_1001DC0F8(uint64_t a1)
{
  return sub_1001B97F0(a1, *v1);
}

void sub_1001DC100(uint64_t a1)
{
}

uint64_t sub_1001DC108@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001DC09C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001DC134@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001DC058(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1001DC194(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v6 = a1;
  a4(a3);
  sub_1001D8FCC();
  if (a4)
  {
    Array._bridgeToObjectiveC()();
    sub_1001B4C30();
  }

  else
  {
    id v6 = 0LL;
  }

  return sub_1001DCF78(v6);
}

uint64_t sub_1001DC1EC(uint64_t a1)
{
  id v3 = [v1 userInfo];
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)&__int128 v9 = 0xD000000000000018LL;
  *((void *)&v9 + 1) = a1;
  AnyHashable.init<A>(_:)(v8, &v9, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v8, v4, &v9);
  swift_bridgeObjectRelease(v4);
  sub_1001D8504((uint64_t)v8);
  if (v10)
  {
    uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
    else {
      return 0LL;
    }
  }

  else
  {
    sub_1001B14E8((uint64_t)&v9);
    return 0LL;
  }

uint64_t sub_1001DC2F8()
{
  id v1 = [v0 userInfo];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)&__int128 v6 = 0xD00000000000001ELL;
  *((void *)&v6 + 1) = 0x800000010036D510LL;
  AnyHashable.init<A>(_:)(v5, &v6, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v5, v2, &v6);
  swift_bridgeObjectRelease(v2);
  sub_1001D8504((uint64_t)v5);
  if (v7)
  {
    if (sub_1001DCFEC( (uint64_t)&v4,  (uint64_t)&v6,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String)) {
      return v4;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    sub_1001B14E8((uint64_t)&v6);
    return 0LL;
  }

uint64_t sub_1001DC440(SEL *a1)
{
  v4.super_class = &OBJC_CLASS___UNMutableNotificationContent;
  id v2 = objc_msgSendSuper2(&v4, *a1);
  if (!v2) {
    return 0LL;
  }
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);
  sub_1001D9294();
  return v1;
}

void sub_1001DC4B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = a1;
  sub_1001DC528(v6, a4);
}

void sub_1001DC528(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v8 = 0xD000000000000018LL;
  *((void *)&v8 + 1) = a2;
  id v3 = AnyHashable.init<A>(_:)(v10, &v8, &type metadata for String, &protocol witness table for String);
  if (a1)
  {
    id v3 = (void *)sub_1001AFF14((uint64_t *)&unk_100447EE0);
    *((void *)&v9 + 1) = v3;
    *(void *)&__int128 v8 = a1;
  }

  else
  {
    __int128 v8 = 0u;
    __int128 v9 = 0u;
  }

  id v4 = sub_1001D8F3C((uint64_t)v3, "userInfo");
  sub_1001DCFD0((uint64_t)v4);

  sub_1001DCFB0(v5, v6);
  sub_1001DCF84();
  uint64_t v7 = sub_1001DCFE0();
  sub_1001DCFC4(v7, "setUserInfo:");

  sub_1001DCF9C();
}

id sub_1001DC604(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = (void *)a3();
  uint64_t v7 = v6;

  if (v7)
  {
    String._bridgeToObjectiveC()();
    sub_1001B4C30();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return sub_1001DCF78(v5);
}

uint64_t sub_1001DC65C()
{
  v4.super_class = (Class)&OBJC_CLASS___UNMutableNotificationContent;
  id v0 = objc_msgSendSuper2(&v4, "notificationProviderIdentifier");
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v2;
}

void sub_1001DC740(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v9 = 0xD00000000000001ELL;
  *((void *)&v9 + 1) = 0x800000010036D510LL;
  objc_super v4 = AnyHashable.init<A>(_:)(v11, &v9, &type metadata for String, &protocol witness table for String);
  if (a2)
  {
    *((void *)&v10 + 1) = &type metadata for String;
    *(void *)&__int128 v9 = a1;
    *((void *)&v9 + 1) = a2;
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  id v5 = sub_1001D8F3C((uint64_t)v4, "userInfo");
  sub_1001DCFD0((uint64_t)v5);

  sub_1001DCFB0(v6, v7);
  sub_1001DCF84();
  uint64_t v8 = sub_1001DCFE0();
  sub_1001DCFC4(v8, "setUserInfo:");

  sub_1001DCF9C();
}

void *sub_1001DC81C(void *a1)
{
  id v3 = sub_1001DCF70((uint64_t)a1, "content");
  id v4 = [v3 mutableCopy];

  _bridgeAnyObjectToAny(_:)(v36, v4);
  swift_unknownObjectRelease(v4);
  uint64_t v5 = sub_1001B4B94(0LL, &qword_100448000, &OBJC_CLASS___UNMutableNotificationContent_ptr);
  uint64_t v6 = sub_1001DCFEC((uint64_t)&v35, (uint64_t)v36, (uint64_t)&type metadata for Any + 8, v5);
  if (!(_DWORD)v6) {
    goto LABEL_11;
  }
  uint64_t v7 = v35;
  id v8 = sub_1001DCF70(v6, "content");
  __int128 v9 = sub_1001DCEA4(v8, (SEL *)&selRef_remoteParticipantHandles);
  if (!v9)
  {

LABEL_11:
    id v17 = v1;
    return v1;
  }

  __int128 v10 = v9;
  id v11 = sub_1001DCF70((uint64_t)v9, "content");
  uint64_t v12 = sub_1001DCEA4(v11, (SEL *)&selRef_activeParticipantHandles);
  if (v12) {
    id v13 = v12;
  }
  else {
    id v13 = _swiftEmptyArrayStorage;
  }
  if (!v13[2])
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRetain(v10);
    id v13 = v10;
  }

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  NSString v15 = sub_1001DCFF4();
  id v16 = [a1 filterStatusForAddresses:isa withBundleIdentifier:v15];

  if (v16 != (id)3)
  {
    [v7 setShouldIgnoreDowntime:v16 == 0];
    if (v10[2] == 1LL)
    {
      uint64_t v20 = v10[4];
      unint64_t v19 = v10[5];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v10);
      uint64_t v21 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000LL) == 0) {
        uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
      }
      if (v21)
      {
        NSString v22 = String._bridgeToObjectiveC()();
        NSString v23 = sub_1001DCFF4();
        unsigned __int8 v24 = sub_1001DCEF8((uint64_t)v22, v20, v19, (uint64_t)v23, a1);

        if ((v24 & 1) != 0)
        {
          NSString v25 = String._bridgeToObjectiveC()();
          sub_1001DCFC4((uint64_t)v25, "setThreadIdentifier:");
        }

        goto LABEL_22;
      }

      id v26 = (void *)v19;
    }

    else
    {
      id v26 = v10;
    }

    swift_bridgeObjectRelease(v26);
LABEL_22:
    uint64_t v27 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447E78, &OBJC_CLASS___UNNotificationRequest_ptr);
    id v28 = sub_1001DCF70(v27, "identifier");
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    id v32 = v7;
    id v33 = sub_1001DCF70((uint64_t)v32, "trigger");
    id v34 = sub_1001DCF70((uint64_t)v33, "destinations");
    uint64_t v1 = (void *)v27;
    sub_1001DCB2C(v29, v31, v32, v33, (uint64_t)v34);
    sub_1001D9294();
    return v1;
  }

  swift_bridgeObjectRelease(v10);
  return 0LL;
}

id sub_1001DCB2C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v11 =  [(id)swift_getObjCClassFromMetadata(v5) requestWithIdentifier:v10 content:a3 trigger:a4 destinations:a5];

  return v11;
}

uint64_t sub_1001DCBB4()
{
  id v1 = [v0 notification];
  id v2 = [v1 request];
  sub_1001D9294();
  id v4 = sub_1001DCF70(v3, "identifier");
  sub_1001D8FCC();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v5;
}

id sub_1001DCC3C()
{
  id v1 = [v0 notification];
  id v2 = [v1 request];
  sub_1001D9294();
  id v4 = sub_1001DCF70(v3, "content");
  sub_1001D8FCC();
  id v6 = sub_1001D8F3C(v5, "userInfo");
  sub_1001D9294();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v0,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1001D8FCC();
  return v1;
}

uint64_t sub_1001DCCE4()
{
  return sub_1001DCD04();
}

uint64_t sub_1001DCD04()
{
  id v1 = [v0 actionIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_1001DCD58()
{
  return sub_1001DCBB4();
}

id sub_1001DCD78()
{
  return sub_1001DCC3C();
}

uint64_t storeEnumTagSinglePayload for NotificationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001DCDE4 + 4 * byte_10037B945[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001DCE18 + 4 * asc_10037B940[v4]))();
}

uint64_t sub_1001DCE18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DCE20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001DCE28LL);
  }
  return result;
}

uint64_t sub_1001DCE34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001DCE3CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001DCE40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DCE48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationType()
{
  return &type metadata for NotificationType;
}

unint64_t sub_1001DCE68()
{
  unint64_t result = qword_100447FF8;
  if (!qword_100447FF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037BA5C, &type metadata for NotificationType);
    atomic_store(result, (unint64_t *)&qword_100447FF8);
  }

  return result;
}

void *sub_1001DCEA4(void *a1, SEL *a2)
{
  int v3 = a1;
  id v4 = [a1 *a2];
  sub_1001D8FCC();
  if (!v2) {
    return 0LL;
  }
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);
  sub_1001D9294();
  return v3;
}

id sub_1001DCEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v10 = [a5 isUnknownAddress:a1 normalizedAddress:v9 forBundleIdentifier:a4];

  return v10;
}

id sub_1001DCF70(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_1001DCF78(id a1)
{
  return a1;
}

NSDictionary sub_1001DCF84()
{
  return Dictionary._bridgeToObjectiveC()();
}

  ;
}

void sub_1001DCFB0(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1001FC358((uint64_t)va, (uint64_t)va1);
}

id sub_1001DCFC4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1001DCFD0(uint64_t a1)
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v2, v1, v3);
}

uint64_t sub_1001DCFE0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001DCFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

NSString sub_1001DCFF4()
{
  return String._bridgeToObjectiveC()();
}

id sub_1001DD000(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = String.utf8CString.getter(a1, a2);
  uint64_t v6 = (id *)CUTWeakLinkSymbol(v5 + 32, v4);

  id result = (id)swift_release(v5);
  if (v6) {
    return *v6;
  }
  __break(1u);
  return result;
}

void sub_1001DD070()
{
  id v0 = sub_1001DD000(0xD000000000000020LL, 0x800000010036D9F0LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F38 = v1;
  unk_100453F40 = v3;
}

void sub_1001DD0EC()
{
  id v0 = sub_1001DD000(0xD00000000000001CLL, 0x800000010036DA20LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F48 = v1;
  unk_100453F50 = v3;
}

void sub_1001DD168()
{
  id v0 = sub_1001DD000(0xD000000000000021LL, 0x800000010036D9C0LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F58 = v1;
  unk_100453F60 = v3;
}

void sub_1001DD1E4()
{
  id v0 = sub_1001DD000(0xD000000000000028LL, 0x800000010036D990LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F68 = v1;
  unk_100453F70 = v3;
}

void sub_1001DD260()
{
  id v0 = sub_1001DD000(0xD000000000000026LL, 0x800000010036D960LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F78 = v1;
  unk_100453F80 = v3;
}

void sub_1001DD2DC()
{
  id v0 = sub_1001DD000(0xD00000000000002FLL, 0x800000010036D8C0LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F88 = v1;
  unk_100453F90 = v3;
}

void sub_1001DD358()
{
  id v0 = sub_1001DD000(0xD00000000000002DLL, 0x800000010036D890LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453F98 = v1;
  unk_100453FA0 = v3;
}

void sub_1001DD3D4()
{
  id v0 = sub_1001DD000(0xD000000000000029LL, 0x800000010036D8F0LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453FA8 = v1;
  unk_100453FB0 = v3;
}

void sub_1001DD450()
{
  id v0 = sub_1001DD000(0xD000000000000032LL, 0x800000010036D920LL);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  qword_100453FB8 = v1;
  unk_100453FC0 = v3;
}

void *sub_1001DD4CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v63 = &_swiftEmptyDictionarySingleton;
  sub_1001DEA24(a1 + 148, (uint64_t)v68, &qword_1004480C8);
  sub_1001DEA24((uint64_t)v68, (uint64_t)&v69, &qword_1004480C8);
  if ((v70 & 1) != 0) {
    goto LABEL_7;
  }
  int v4 = v69;
  id v5 = sub_100170614();
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(void *)&__int128 v77 = *v2;
  uint64_t v8 = sub_1001AFF14(&qword_1004480F8);
  NSString v9 = (void *)String.init<A>(describing:)(&v77, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1001B2330();
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for Int32;
  *(void *)(v7 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v7 + 72) = v4;
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("%@: Phone call subtype is: %d", 29LL, 2LL, &_mh_execute_header, v5, v13, v7);

  swift_bridgeObjectRelease(v7);
  if ((v4 - 1) < 2)
  {
    *((void *)&v78 + 1) = &type metadata for Bool;
    LOBYTE(v77) = 0;
    goto LABEL_6;
  }

  if ((v4 - 3) < 2)
  {
    *((void *)&v78 + 1) = &type metadata for Bool;
    LOBYTE(v77) = 1;
LABEL_6:
    sub_1001FC0F0((uint64_t)&v77, 0xD000000000000045LL, 0x800000010036D840LL);
    goto LABEL_7;
  }

  if (!v4)
  {
LABEL_7:
    uint64_t v14 = sub_1001DDCA0(a1);
    NSString v9 = &type metadata for Int;
    *((void *)&v78 + 1) = &type metadata for Int;
    *(void *)&__int128 v77 = v14;
    sub_1001FC0F0((uint64_t)&v77, 0xD000000000000020LL, 0x800000010036D780LL);
    char v15 = *(_BYTE *)(a1 + 52);
    *((void *)&v78 + 1) = &type metadata for Bool;
    LOBYTE(v77) = v15;
    sub_1001FC0F0((uint64_t)&v77, 0xD000000000000030LL, 0x800000010036D7B0LL);
    uint64_t v62 = &_swiftEmptyDictionarySingleton;
    if (qword_1004466D0 == -1) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }

  type metadata accessor for TUTelephonyCallSubType(0LL);
  LODWORD(v77) = v4;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v56, &v77, v56, &type metadata for Int32);
  __break(1u);
LABEL_38:
  swift_once(&qword_1004466D0, sub_1001DD0EC);
LABEL_8:
  uint64_t v16 = qword_100453F48;
  uint64_t v17 = unk_100453F50;
  sub_1001DEA24(a1 + 16, (uint64_t)&v67, &qword_1004480D0);
  sub_1001DEA24((uint64_t)&v67, (uint64_t)&v71, &qword_1004480D0);
  uint64_t v18 = v71;
  if (v71)
  {
    type metadata accessor for Mode(0LL);
    *((void *)&v78 + 1) = v19;
    *(void *)&__int128 v77 = v18;
  }

  else
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
  }

  swift_bridgeObjectRetain(v17);
  sub_1001DE9FC(&v67);
  sub_1001FC0F0((uint64_t)&v77, v16, v17);
  if (qword_1004466C8 != -1) {
    swift_once(&qword_1004466C8, sub_1001DD070);
  }
  uint64_t v20 = qword_100453F38;
  uint64_t v21 = unk_100453F40;
  id v66 = *(id *)(a1 + 8);
  type metadata accessor for Category(0LL);
  *((void *)&v78 + 1) = v22;
  *(void *)&__int128 v77 = v66;
  swift_bridgeObjectRetain(v21);
  sub_1001DE9FC(&v66);
  sub_1001FC0F0((uint64_t)&v77, v20, v21);
  if (qword_1004466D8 != -1) {
    swift_once(&qword_1004466D8, sub_1001DD168);
  }
  uint64_t v23 = qword_100453F58;
  uint64_t v24 = unk_100453F60;
  uint64_t v25 = 10LL;
  if (!*(_BYTE *)(a1 + 49)) {
    uint64_t v25 = 0LL;
  }
  *((void *)&v78 + 1) = v9;
  *(void *)&__int128 v77 = v25;
  swift_bridgeObjectRetain(unk_100453F60);
  sub_1001FC0F0((uint64_t)&v77, v23, v24);
  if (qword_1004466E0 != -1) {
    swift_once(&qword_1004466E0, sub_1001DD1E4);
  }
  uint64_t v26 = qword_100453F68;
  uint64_t v27 = unk_100453F70;
  sub_1001DEA24(a1 + 24, (uint64_t)v65, &qword_1004480D8);
  sub_1001DEA24((uint64_t)v65, (uint64_t)v72, &qword_1004480D8);
  uint64_t v28 = v75;
  if (v75 == 1)
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    swift_bridgeObjectRetain(v27);
  }

  else
  {
    uint64_t v29 = v74;
    char v30 = v76;
    unint64_t v31 = v72[0] | ((unint64_t)v73 << 32);
    swift_bridgeObjectRetain(v27);
    id v32 = sub_1001FC600(v31, v29, v28, v30);
    *((void *)&v78 + 1) = sub_1001AFF14(&qword_100447B60);
    *(void *)&__int128 v77 = v32;
  }

  sub_1001FC0F0((uint64_t)&v77, v26, v27);
  if (qword_1004466E8 != -1) {
    swift_once(&qword_1004466E8, sub_1001DD260);
  }
  uint64_t v33 = qword_100453F78;
  uint64_t v34 = unk_100453F80;
  char v35 = *(_BYTE *)(a1 + 51);
  *((void *)&v78 + 1) = &type metadata for Bool;
  LOBYTE(v77) = v35;
  swift_bridgeObjectRetain(unk_100453F80);
  sub_1001FC0F0((uint64_t)&v77, v33, v34);
  if (qword_100446708 != -1) {
    swift_once(&qword_100446708, sub_1001DD450);
  }
  uint64_t v36 = qword_100453FB8;
  uint64_t v37 = unk_100453FC0;
  id v38 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  swift_bridgeObjectRetain(v37);
  id v39 = [v38 initWithBool:1];
  *((void *)&v78 + 1) = sub_1001B4B94(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  *(void *)&__int128 v77 = v39;
  sub_1001FC0F0((uint64_t)&v77, v36, v37);
  sub_1001DEA24(a1 + 88, (uint64_t)v64, &qword_1004480E0);
  sub_1001DEA24((uint64_t)v64, (uint64_t)&v77, &qword_1004480E0);
  if ((v79 & 1) == 0)
  {
    uint64_t v40 = *(void *)(a1 + 136);
    if (v40)
    {
      __int128 v57 = v78;
      __int128 v58 = v77;
      uint64_t v41 = *(void *)(a1 + 128);
      uint64_t v42 = qword_100446700;
      swift_bridgeObjectRetain(v40);
      if (v42 != -1) {
        swift_once(&qword_100446700, sub_1001DD3D4);
      }
      uint64_t v43 = qword_100453FA8;
      uint64_t v44 = unk_100453FB0;
      uint64_t v45 = sub_1001AFF14(&qword_1004480E8);
      uint64_t v46 = swift_allocObject(v45, 40LL, 7LL);
      *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
      uint64_t v47 = sub_1001AFF14((uint64_t *)&unk_100447BA0);
      uint64_t inited = swift_initStackObject(v47, v59);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      uint64_t v49 = qword_1004466F0;
      swift_bridgeObjectRetain(v44);
      if (v49 != -1) {
        swift_once(&qword_1004466F0, sub_1001DD2DC);
      }
      uint64_t v50 = unk_100453F90;
      *(void *)(inited + 32) = qword_100453F88;
      *(void *)(inited + 40) = v50;
      uint64_t v51 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
      swift_bridgeObjectRetain(v50);
      __int128 v60 = v58;
      __int128 v61 = v57;
      id v52 = objc_msgSend(v51, "tu_dataForAuditToken:", &v60);
      *(void *)(inited + 72) = sub_1001B4B94(0LL, &qword_1004480F0, &OBJC_CLASS___NSData_ptr);
      *(void *)(inited + 4_Block_object_dispose(va, 8) = v52;
      if (qword_1004466F8 != -1) {
        swift_once(&qword_1004466F8, sub_1001DD358);
      }
      uint64_t v53 = unk_100453FA0;
      *(void *)(inited + 80) = qword_100453F98;
      *(void *)(inited + 8_Block_object_dispose(va, 8) = v53;
      *(void *)(inited + 120) = &type metadata for String;
      *(void *)(inited + 96) = v41;
      *(void *)(inited + 104) = v40;
      swift_bridgeObjectRetain(v53);
      *(void *)(v46 + 32) = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      *((void *)&v61 + 1) = sub_1001AFF14((uint64_t *)&unk_10044BF10);
      *(void *)&__int128 v60 = v46;
      sub_1001FC0F0((uint64_t)&v60, v43, v44);
    }
  }

  char v54 = v62;
  *((void *)&v61 + 1) = sub_1001AFF14(&qword_100447B60);
  *(void *)&__int128 v60 = v54;
  sub_1001FC0F0((uint64_t)&v60, 0xD000000000000021LL, 0x800000010036D7F0LL);
  return v63;
}

uint64_t sub_1001DDCA0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 < 5) {
    return qword_10037BAF8[v1];
  }
  uint64_t v3 = *(void *)(a1 + 64);
  type metadata accessor for CSDAudioInterruptionOperationMode(0LL);
  uint64_t v5 = v3;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v4, &v5, v4, &type metadata for Int);
  __break(1u);
  return result;
}

void sub_1001DDD00(_BYTE *a1)
{
  uint64_t v43 = v1;
  uint64_t v3 = sub_1001DD4CC((uint64_t)a1);
  id v4 = sub_100170614();
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = sub_1001DEA68(v5);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v6 + 56) = sub_1001AFF14(&qword_100447B60);
  *(void *)(v6 + 64) = sub_1001DE754();
  *(void *)(v6 + 32) = v3;
  uint64_t v7 = swift_bridgeObjectRetain(v3);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("Setting audio session properties: %@", 36LL, 2LL, &_mh_execute_header, v4, v8, v6);

  swift_bridgeObjectRelease(v6);
  NSString v9 = (void *)objc_opt_self(&OBJC_CLASS___AVAudioClient);
  sub_1002A7838(v3);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease(v3);
  sub_1001DE798(v11, v9);
  id v12 = sub_100170614();
  uint64_t v13 = sub_1001DEA68(v5);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  LOBYTE(aBlock[0]) = a1[53];
  uint64_t v14 = LOBYTE(aBlock[0]);
  uint64_t v15 = String.init<A>(reflecting:)(aBlock, &type metadata for Bool);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1001B2330();
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)("Setting audio mixing: %@", 24LL, 2LL, &_mh_execute_header, v12, v19, v13);

  swift_bridgeObjectRelease(v13);
  id v42 = v9;
  uint64_t v20 = v9;
  uint64_t v21 = a1;
  [v20 setMixingVoiceWithMediaEnabled:v14];
  id v22 = sub_100170614();
  uint64_t v23 = sub_1001DEA68(v5);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  LOBYTE(aBlock[0]) = a1[56];
  uint64_t v24 = String.init<A>(reflecting:)(aBlock, &type metadata for Bool);
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = v18;
  unint64_t v25 = v18;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  uint64_t v27 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:type:_:)("Setting mode to A2DP: %@", 24LL, 2LL, &_mh_execute_header, v22, v27, v23);

  swift_bridgeObjectRelease(v23);
  id v28 = sub_100170614();
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("Starting audio session", 22LL, 2LL, &_mh_execute_header, v28, v29, _swiftEmptyArrayStorage);

  char v30 = a1[54];
  if ((v30 & 1) != 0) {
    dispatch_semaphore_t v31 = 0LL;
  }
  else {
    dispatch_semaphore_t v31 = dispatch_semaphore_create(0LL);
  }
  id v32 = (void *)swift_allocObject(&unk_1003DF928, 192LL, 7LL);
  sub_1001DEA74(v32 + 2, a1);
  v32[22] = v43;
  v32[23] = v31;
  aBlock[4] = sub_1001DE860;
  uint64_t v46 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002130EC;
  void aBlock[3] = &unk_1003DF940;
  uint64_t v33 = _Block_copy(aBlock);
  uint64_t v34 = v46;
  swift_retain(v43);
  sub_1001DEA84();
  char v35 = v31;
  swift_release(v34);
  [v42 startAudioSessionWithCompletionHandler:v33];
  _Block_release(v33);
  if (v31)
  {
    uint64_t v36 = v35;
    OS_dispatch_semaphore.wait()();
  }

  if ((v30 & 1) != 0)
  {
    id v37 = sub_100170614();
    uint64_t v38 = sub_1001DEA68(v5);
    *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    sub_1001DEA74(aBlock, v21);
    sub_1001DEA84();
    uint64_t v39 = String.init<A>(reflecting:)(aBlock, &type metadata for AudioInterruptionDescriptor);
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = v25;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v40;
    uint64_t v41 = static os_log_type_t.default.getter(v39);
    os_log(_:dso:log:type:_:)( "Setting descriptor to be active since it requested an expedited activation: %@",  78LL,  2LL,  &_mh_execute_header,  v37,  v41,  v38);

    swift_bridgeObjectRelease(v38);
    sub_1001DEA74(v44, v47);
    ScreenSharingActivityManager.carPlayStartedConnectionAttempt()();
    sub_1001DEA24(v43 + 16, (uint64_t)aBlock, (uint64_t *)&unk_10044B7C0);
    sub_1001DEA24((uint64_t)v44, v43 + 16, (uint64_t *)&unk_10044B7C0);
    sub_1001DE914( (uint64_t)aBlock,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
    sub_1001DEA84();
  }

  else
  {
  }

uint64_t sub_1001DE168(char a1, uint64_t a2, void *__src, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v16 = 0LL;
    if ((a1 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    swift_bridgeObjectRelease(v16);
    goto LABEL_13;
  }

  uint64_t v10 = (void *)_convertErrorToNSError(_:)(a2);
  id v11 = [v10 code];

  id v12 = (void *)_convertErrorToNSError(_:)(a2);
  id v13 = [v12 domain];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  if ((a1 & 1) != 0) {
    goto LABEL_12;
  }
  if (v11 != (id)32025)
  {
LABEL_15:
    swift_bridgeObjectRelease(v16);
LABEL_16:
    id v24 = sub_100170614();
    uint64_t v25 = static os_log_type_t.error.getter();
    uint64_t v26 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
    *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    if (a2)
    {
      v34[0] = a2;
      swift_errorRetain(a2);
      uint64_t v28 = sub_1001AFF14(&qword_100447B70);
      uint64_t v29 = String.init<A>(reflecting:)(v34, v28);
      unint64_t v31 = v30;
    }

    else
    {
      unint64_t v31 = 0xE300000000000000LL;
      uint64_t v29 = 7104878LL;
    }

    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_1001B2330();
    *(void *)(v27 + 32) = v29;
    *(void *)(v27 + 40) = v31;
    os_log(_:dso:log:type:_:)("Failed to start audio session: %@", 33LL, 2LL, &_mh_execute_header, v24, v25, v27);

    swift_bridgeObjectRelease(v27);
    sub_1001DE6BC(v34);
    goto LABEL_20;
  }

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVConferenceServiceErrorDomain);
  uint64_t v19 = v18;
  if (!v16)
  {
    uint64_t v16 = v18;
    goto LABEL_15;
  }

  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0LL);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v19);
    if ((v21 & 1) == 0) {
      goto LABEL_16;
    }
  }

uint64_t sub_1001DE474()
{
  id v1 = sub_100170614();
  uint64_t v2 = static os_log_type_t.default.getter(v1);
  os_log(_:dso:log:type:_:)( "Setting audio mixing: false",  27LL,  2LL,  &_mh_execute_header,  v1,  v2,  _swiftEmptyArrayStorage);

  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___AVAudioClient);
  [v3 setMixingVoiceWithMediaEnabled:0];
  id v4 = sub_100170614();
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  os_log(_:dso:log:type:_:)("Stopping audio session", 22LL, 2LL, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);

  [v3 stopAudioSession];
  [v3 resetAudioSessionOutputPortOverride];
  sub_1001DE6BC(v7);
  sub_1001DEA7C(v0 + 16, (uint64_t)v8);
  sub_1001DEA7C((uint64_t)v7, v0 + 16);
  return sub_1001DE914( (uint64_t)v8,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
}

uint64_t sub_1001DE5A8()
{
  id v1 = sub_100170614();
  uint64_t v2 = static os_log_type_t.default.getter(v1);
  os_log(_:dso:log:type:_:)("Resetting state", 15LL, 2LL, &_mh_execute_header, v1, v2, _swiftEmptyArrayStorage);

  sub_1001DE6BC(v4);
  sub_1001DEA7C(v0 + 16, (uint64_t)v5);
  sub_1001DEA7C((uint64_t)v4, v0 + 16);
  return sub_1001DE914( (uint64_t)v5,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
}

uint64_t sub_1001DE650()
{
  return swift_deallocClassInstance(v0, 169LL, 7LL);
}

uint64_t type metadata accessor for AVAudioClientInterruptionProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd33AVAudioClientInterruptionProvider);
}

void sub_1001DE6BC(void *a1)
{
}

uint64_t sub_1001DE6C4( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {

    sub_1001DE740(a4, a5, a6);
    swift_unknownObjectRelease(a10);
    return swift_bridgeObjectRelease(a18);
  }

  return result;
}

uint64_t sub_1001DE740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

unint64_t sub_1001DE754()
{
  unint64_t result = qword_100447B68;
  if (!qword_100447B68)
  {
    uint64_t v1 = sub_1001B0504(&qword_100447B60);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100447B68);
  }

  return result;
}

void sub_1001DE798(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setAudioSessionProperties:isa];
}

uint64_t sub_1001DE804()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1 != 1) {
    swift_bridgeObjectRelease(v1);
  }
  swift_unknownObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  swift_release(*(void *)(v0 + 176));

  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t sub_1001DE860(char a1, uint64_t a2)
{
  return sub_1001DE168(a1, a2, v2 + 2, v2[22], v2[23]);
}

uint64_t sub_1001DE86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001DE87C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001DE884(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 136);
  id v8 = *(id *)(a1 + 16);
  id v9 = v2;
  sub_1001DE900(v3, v4, v5);
  swift_bridgeObjectRetain(v7);
  swift_unknownObjectRetain(v6);
  return a1;
}

uint64_t sub_1001DE900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1001DE914( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 152);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  v4);
  return a1;
}

uint64_t sub_1001DE980( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    id v22 = a3;
    id v23 = a2;
    sub_1001DE900(a4, a5, a6);
    swift_bridgeObjectRetain(a18);
    return swift_unknownObjectRetain(a10);
  }

  return result;
}

id *sub_1001DE9FC(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1001DEA24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1001AFF14(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001DEA68(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

void *sub_1001DEA74(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x99uLL);
}

uint64_t sub_1001DEA7C(uint64_t a1, uint64_t a2)
{
  return sub_1001DEA24(a1, a2, v2);
}

uint64_t sub_1001DEA84()
{
  return sub_1001DE884(v0);
}

id sub_1001DEA8C()
{
  id result = sub_1002523B8(0xD000000000000026LL, 0x800000010036DA90LL);
  qword_100448100 = (uint64_t)result;
  return result;
}

id sub_1001DEAE4()
{
  if (qword_100446710 != -1) {
    swift_once(&qword_100446710, sub_1001DEA8C);
  }
  return (id)qword_100448100;
}

id sub_1001DEB24(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for FaceTimeMultiwayIDSService();
  id v9 = objc_msgSendSuper2(&v11, "initWithName:service:queryController:", v8, a3, a4);

  return v9;
}

id sub_1001DEC10()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceTimeMultiwayIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceTimeMultiwayIDSService()
{
  return objc_opt_self(&OBJC_CLASS___CSDFaceTimeMultiwayIDSService);
}

id CSDTipsHelper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDTipsHelper();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for CSDTipsHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd13CSDTipsHelper);
}

id CSDTipsHelper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDTipsHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Int sub_1001DED08()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001DED4C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001DED98()
{
  id v1 =  [*(id *)(v0 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) devices];
  unint64_t v2 = sub_1001E0844();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  sub_1001DEE08(v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v3);
  return v5;
}

void sub_1001DEE08(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (!v2)
    {
LABEL_14:
      sub_10024E6B8((uint64_t)_swiftEmptyArrayStorage);
      return;
    }

    sub_100250050(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v3 = 0LL;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      uint64_t v6 = IDSCopyIDForDevice(v4);
      if (!v6) {
        goto LABEL_21;
      }
      uint64_t v7 = (void *)v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v10 = v9;

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100250050(v11 > 1, v12 + 1, 1);
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      id v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      if (v2 == v3) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  __break(1u);
LABEL_21:
  __break(1u);
}

id sub_1001DEF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 =  [*(id *)(v3 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service) service];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Swift::Int v7 = sub_1001DF1BC(a3);
  Class v8 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = sub_1001AFF14(&qword_1004482C8);
  uint64_t inited = swift_initStackObject(v9, v24);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  v23[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionAlwaysSkipSelfKey);
  v23[1] = v11;
  AnyHashable.init<A>(_:)((void *)(inited + 32), v23, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = 1;
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  id v22 = 0LL;
  v23[0] = 0LL;
  unsigned int v14 = [v5 sendData:isa toDestinations:v8 priority:300 options:v13 identifier:v23 error:&v22];
  swift_unknownObjectRelease(v5);

  id v15 = v22;
  id v16 = (id)v23[0];
  if (v14)
  {
    if (v23[0])
    {
      id v16 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v23[0]);
      id v17 = v15;
    }

    else
    {
      unint64_t v19 = sub_1001E0808();
      swift_allocError(&type metadata for ConversationLinkSyncIDSInteractor.IDSInteractorError, v19, 0LL, 0LL);
      id v20 = v15;
      sub_1001B4C78();
    }
  }

  else
  {
    id v18 = v22;
    id v16 = v16;
    _convertNSErrorToError(_:)(v15);

    sub_1001B4C78();
    sub_1001B4C78();
  }

  return v16;
}

Swift::Int sub_1001DF1BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1001AFF14(&qword_1004482D8);
    uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }

  uint64_t v4 = a1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  uint64_t v9 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  Swift::Int result = swift_retain(v3);
  int64_t v11 = 0LL;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v13 = v12 | (v11 << 6);
  while (1)
  {
    id v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    *(void *)&__int128 v29 = *v18;
    *((void *)&v29 + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(v32, &v29, &type metadata for String, &type metadata for AnyHashable, 7LL);
    __int128 v29 = v32[0];
    __int128 v30 = v32[1];
    uint64_t v31 = v33;
    Swift::Int result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v20 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)&v9[8 * (v21 >> 6)]) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v9[8 * v22];
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)&v9[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)&v9[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v23;
    uint64_t v28 = v3[6] + 40 * v23;
    *(_OWORD *)uint64_t v28 = v29;
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
    *(void *)(v28 + 32) = v31;
    ++v3[2];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_38;
    }
    if (v14 >= v8) {
      goto LABEL_36;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    int64_t v16 = v11 + 1;
    if (!v15)
    {
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v8) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v11 + 3;
        if (v11 + 3 >= v8) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v11 + 4;
          if (v11 + 4 >= v8) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1001DF4A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_knownDestinations);
  *(void *)(v1 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_knownDestinations) = a1;
  return swift_bridgeObjectRelease(v2);
}

void sub_1001DF4C0(void *a1, uint64_t a2)
{
  if (!a2 || (uint64_t v4 = sub_10028F598(a2)) == 0LL)
  {
LABEL_15:
    sub_1001E09F0();
    return;
  }

  sub_1001DEE08((uint64_t)v4);
  uint64_t v6 = v5;
  sub_1001B0F5C();
  uint64_t v7 = sub_1001B9234();
  sub_1001E7460(v7, v6);
  char v9 = v8;
  sub_1001B0F5C();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease(v6);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v10, (uint64_t)qword_1004541B0);
    id v48 = a1;
    unint64_t v13 = (void *)Logger.logObject.getter(v48, v11, v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (!os_log_type_enabled((os_log_t)v13, v14))
    {

      sub_1001E0A20(v20, v21, v22, v23, v24, v25, v26, v27, v46, v48);
      sub_1001E09F0();

      return;
    }

    unint64_t v15 = (uint8_t *)sub_1001B0E78(12LL);
    int64_t v16 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)unint64_t v15 = 138412290;
    if (a1)
    {
      id v50 = v48;
      id v17 = v48;
    }

    else
    {
      id v50 = 0LL;
    }

    int v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v15 + 4, v15 + 12);
    *int64_t v16 = a1;
    sub_1001E0A20(v30, v31, v32, v33, v34, v35, v36, v37, v46, v48);
    sub_1001E0A20(v38, v39, v40, v41, v42, v43, v44, v45, v47, v49);
    sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)v13,  v14,  "ConversationLinkSync: Ignoring devicesChanged signal from IDSService because destinations are the same {service:%@}",  v15);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v16);
    sub_1001B0E60((uint64_t)v16);
    sub_1001B0E60((uint64_t)v15);

    goto LABEL_15;
  }

  uint64_t v18 = swift_bridgeObjectRetain(v6);
  sub_1001DF4A8(v18);
  if (swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate))
  {
    sub_10028D014(v2, v6);
    swift_bridgeObjectRelease(v6);
    sub_1001E09F0();
    swift_unknownObjectRelease(v19);
  }

  else
  {
    sub_1001E09F0();
    swift_bridgeObjectRelease(v29);
  }

uint64_t sub_1001DF7E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate);
  if (result)
  {
    if (a2)
    {
      uint64_t v5 = result;
      sub_10028864C(*(void *)(a2 + 16) != 0LL);
      return swift_unknownObjectRelease(v5);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

void sub_1001DF8B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)v130 - v16;
  if (a6)
  {
    sub_1001B9234();
    if (String.count.getter(a5, a6) >= 1)
    {
      NSString v18 = String._bridgeToObjectiveC()();
      uint64_t v19 = (void *)IDSCopyAddressDestinationForDestination(v18);

      int v20 = (void *)IDSCopyRawAddressForDestination(v19);
      if (v20)
      {
        uint64_t v134 = v6;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        unint64_t v23 = v22;

        if (String.count.getter(v21, v23) >= 1)
        {
          unint64_t v132 = (unint64_t)a4;
          uint64_t v133 = a3;
          int v24 = *(void **)((char *)v134 + OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_service);
          id v25 = [v24 allAliases];
          a4 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String);

          os_log_type_t v26 = sub_10028F48C(v21, v23, a4);
          swift_bridgeObjectRelease(a4);
          if ((v26 & 1) != 0)
          {
            unint64_t v27 = v132;
            if (v132 >> 60 == 15)
            {
              sub_1001B92A4();
              sub_1001B0F5C();
LABEL_36:
              if (qword_100446930 != -1) {
                swift_once(&qword_100446930, sub_100258A18);
              }
              uint64_t v82 = sub_1001B0D98(v11, (uint64_t)qword_1004541B0);
              (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v82, v11);
              uint64_t v83 = v133;
              sub_1001E0A54();
              uint64_t v84 = sub_1001E0A54();
              uint64_t v87 = (os_log_s *)Logger.logObject.getter(v84, v85, v86);
              os_log_type_t v89 = static os_log_type_t.error.getter(v87, v88);
              if (!os_log_type_enabled(v87, v89))
              {
                sub_1001E09B8(v83);
                sub_1001E09B8(v83);
                goto LABEL_42;
              }

              uint64_t v90 = (uint8_t *)sub_1001B0E78(12LL);
              uint64_t v134 = (os_log_s *)sub_1001B0E78(32LL);
              id v136 = v134;
              *(_DWORD *)uint64_t v90 = 136315138;
              if (v27 >> 60 != 15)
              {
                uint64_t v131 = v90 + 4;
                uint64_t v91 = v133;
                sub_1001E0A30(v133);
                uint64_t v92 = Data.description.getter(v91, v27);
                unint64_t v94 = v93;
                sub_1001E09B8(v91);
                uint64_t v95 = sub_1001D7CF0(v92, v94, (uint64_t *)&v136);
                uint64_t v96 = sub_1001E09A4(v95);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v96, v97, v131, v98);
                sub_1001B92A4();
                sub_1001E09B8(v91);
                sub_1001E09B8(v91);
                sub_1001B0FD8( (void *)&_mh_execute_header,  v87,  v89,  "ConversationLinkSync: Incoming sync message, invalid data -- dropping {data: %s}",  v90);
                uint64_t v99 = v134;
                sub_1001B0F64((uint64_t)v134);
                sub_1001B0E60((uint64_t)v99);
                sub_1001B0E60((uint64_t)v90);
LABEL_42:

                (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
                return;
              }

              goto LABEL_77;
            }

            uint64_t v62 = v133;
            sub_1001E0A30(v133);
            if (Data.count.getter(v62, v27) < 1)
            {
              sub_1001B92A4();
              sub_1001B0F5C();
              sub_1001E09B8(v62);
              goto LABEL_36;
            }

            uint64_t v131 = (uint8_t *)v21;
            id v63 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingLinkSyncMessage);
            sub_1001E0A30(v62);
            id v64 = sub_1001E0784(v62, v27);
            if (v64)
            {
              uint64_t v65 = v64;
              if (qword_100446930 != -1) {
                swift_once(&qword_100446930, sub_100258A18);
              }
              uint64_t v66 = sub_1001B0D98(v11, (uint64_t)qword_1004541B0);
              sub_1001B4C60();
              id v67 = v65;
              uint64_t v68 = swift_bridgeObjectRetain(v23);
              v130[1] = v66;
              uint64_t v71 = (os_log_s *)Logger.logObject.getter(v68, v69, v70);
              os_log_type_t v72 = static os_log_type_t.default.getter(v71);
              uint64_t v73 = v72;
              uint64_t v74 = &selRef_sharedPrivacyManager;
              if (os_log_type_enabled(v71, v72))
              {
                uint64_t v75 = sub_1001B0E78(28LL);
                v130[0] = sub_1001B0E78(64LL);
                id v136 = (os_log_s *)v130[0];
                *(_DWORD *)uint64_t v75 = 67109634;
                unsigned int v76 = [v67 type];

                LODWORD(v135) = v76;
                sub_1001B112C((uint64_t)&v135, (uint64_t)&v135 + 4, v77, v75 + 8);

                *(_WORD *)(v75 + _Block_object_dispose(va, 8) = 2080;
                sub_1001B9234();
                uint64_t v135 = sub_1001E09C0();
                sub_1001B112C((uint64_t)&v135, (uint64_t)&v136, v78, v75 + 18);
                sub_1001E09DC();
                *(_WORD *)(v75 + 1_Block_object_dispose(va, 8) = 2080;
                swift_bridgeObjectRetain(v23);
                uint64_t v135 = sub_1001D7CF0((uint64_t)v131, v23, (uint64_t *)&v136);
                unint64_t v27 = v132;
                sub_1001B112C((uint64_t)&v135, (uint64_t)&v136, v79, v75 + 28);
                swift_bridgeObjectRelease_n(v23, 3LL);
                _os_log_impl( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v73,  "ConversationLinkSync: Incoming sync message type: %d, processing {fromID: %s, destinationID: %s}",  (uint8_t *)v75,  0x1Cu);
                uint64_t v80 = v130[0];
                swift_arrayDestroy(v130[0], 2LL);
                sub_1001B0E60(v80);
                uint64_t v81 = v75;
                uint64_t v74 = &selRef_sharedPrivacyManager;
                sub_1001B0E60(v81);
              }

              else
              {

                swift_bridgeObjectRelease_n(v23, 2LL);
                sub_1001B4C54();
              }

              id v106 = [v67 v74[337]];
              switch((_DWORD)v106)
              {
                case 1:
                  id v112 = sub_1001D8F68((uint64_t)v106, "updateMessage");
                  if (v112)
                  {
                    uint64_t v113 = v112;
                    uint64_t v114 = sub_1001E0A28(OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate);
                    if (!v114)
                    {
                      sub_1001BB464(v133, v27);
                      sub_1001B0F5C();

                      goto LABEL_75;
                    }

                    uint64_t v73 = v114;
                    sub_10028A370(v113);
                    sub_1001BB464(v133, v27);
                    sub_1001B0F5C();

                    goto LABEL_62;
                  }

                  sub_1001B0F5C();
                  id v126 = v67;
                  sub_1001E09D0();
                  os_log_type_t v127 = sub_1001E0A4C();
                  if (sub_1001E0994(v127))
                  {
                    uint64_t v121 = (uint8_t *)sub_1001B0E78(12LL);
                    uint64_t v122 = sub_1001B0E78(8LL);
                    sub_1001E095C(5.7779e-34);
                    sub_1001E097C();
                    sub_1001E09E8();

                    uint64_t v123 = "ConversationLinkSync: Incoming sync message, type was update but message was missing updateMe"
                           "ssage {syncMessage: %@}";
                    goto LABEL_72;
                  }

                  break;
                case 3:
                  id v115 = sub_1001D8F68((uint64_t)v106, "recoverMessage");
                  if (v115)
                  {
                    uint64_t v108 = v115;
                    if (sub_1001E0A28(OBJC_IVAR____TtC13callservicesd33ConversationLinkSyncIDSInteractor_delegate))
                    {
                      uint64_t v116 = (void *)sub_1001E0A38();
                      sub_10028B5C4(v116, v117, v118);
                      goto LABEL_61;
                    }

void sub_1001E06B4()
{
}

id sub_1001E06EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationLinkSyncIDSInteractor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationLinkSyncIDSInteractor()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd33ConversationLinkSyncIDSInteractor);
}

id sub_1001E0784(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001BB464(a1, a2);
  }

  id v6 = [v2 initWithData:isa];

  return v6;
}

uint64_t sub_1001E07F4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1001BB31C(result, a2);
  }
  return result;
}

unint64_t sub_1001E0808()
{
  unint64_t result = qword_1004482D0;
  if (!qword_1004482D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10037BC3C,  &type metadata for ConversationLinkSyncIDSInteractor.IDSInteractorError);
    atomic_store(result, (unint64_t *)&qword_1004482D0);
  }

  return result;
}

unint64_t sub_1001E0844()
{
  unint64_t result = qword_1004482E0;
  if (!qword_1004482E0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___IDSDevice);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004482E0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ConversationLinkSyncIDSInteractor.IDSInteractorError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001E08C0 + 4 * asc_10037BB50[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001E08E0 + 4 * byte_10037BB55[v4]))();
  }
}

_BYTE *sub_1001E08C0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001E08E0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001E08E8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001E08F0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001E08F8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001E0900(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConversationLinkSyncIDSInteractor.IDSInteractorError()
{
  return &type metadata for ConversationLinkSyncIDSInteractor.IDSInteractorError;
}

unint64_t sub_1001E0920()
{
  unint64_t result = qword_1004482E8;
  if (!qword_1004482E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10037BC14,  &type metadata for ConversationLinkSyncIDSInteractor.IDSInteractorError);
    atomic_store(result, (unint64_t *)&qword_1004482E8);
  }

  return result;
}

id sub_1001E095C(float a1)
{
  float *v1 = a1;
  *(void *)(v3 - 8_Block_object_dispose(va, 8) = v2;
  return v2;
}

uint64_t sub_1001E097C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 88, v2, v1, v0);
}

BOOL sub_1001E0994(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1001E09A4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1001E09B8(uint64_t a1)
{
  return sub_1001BB464(a1, v1);
}

uint64_t sub_1001E09C0()
{
  return sub_1001D7CF0(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_1001E09D0()
{
  return Logger.logObject.getter();
}

uint64_t sub_1001E09DC()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

void sub_1001E09E8()
{
  *uint64_t v0 = v2;
}

  ;
}

void sub_1001E0A08()
{
}

BOOL sub_1001E0A10(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1001E0A20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_1001E0A28@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectWeakLoadStrong(v1 + a1);
}

uint64_t sub_1001E0A30(uint64_t a1)
{
  return sub_1001BB31C(a1, v1);
}

uint64_t sub_1001E0A38()
{
  return v0;
}

uint64_t sub_1001E0A4C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1001E0A54()
{
  return sub_1001E07F4(v1, v0);
}

id sub_1001E0A60()
{
  uint64_t v31 = v1;
  uint64_t v32 = v2;
  int v28 = v3;
  int v29 = v4;
  id v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v0[OBJC_IVAR___CSDSimulatedAVCSession_participants] = &_swiftEmptyDictionarySingleton;
  uint64_t v13 = &v0[OBJC_IVAR___CSDSimulatedAVCSession_delegate];
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___CSDSimulatedAVCSession_delegate], 0LL);
  uint64_t v14 = (uint64_t *)&v0[OBJC_IVAR___CSDSimulatedAVCSession_sessionIdentifier];
  unint64_t v15 = v0;
  uint64_t v16 = UUID.init()(v15);
  uint64_t v17 = UUID.uuidString.getter(v16);
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *uint64_t v14 = v17;
  v14[1] = v19;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isVideo] = 1;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isAudioReady] = 1;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isUplinkMuted] = 0;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isAudioEnabled] = 1;
  uint64_t v20 = OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled] = 1;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isVideoPaused] = 0;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isAudioPaused] = 0;
  uint64_t v21 = OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled] = 0;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isRelaying] = 0;
  v15[OBJC_IVAR___CSDSimulatedAVCSession_isScreening] = 0;
  *(_DWORD *)&v15[OBJC_IVAR___CSDSimulatedAVCSession_presentationState] = 0;
  unint64_t v22 = &v15[OBJC_IVAR___CSDSimulatedAVCSession_presentationRect];
  *(_OWORD *)unint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  swift_unknownObjectWeakAssign(v13, v8);
  *(void *)&v15[OBJC_IVAR___CSDSimulatedAVCSession_queue] = v6;
  v15[v20] = v28;
  v15[v21] = v29;
  id v23 = v6;

  int v24 = (objc_class *)type metadata accessor for SimulatedAVCSession();
  v30.receiver = v15;
  v30.super_class = v24;
  id v25 = objc_msgSendSuper2(&v30, "init");
  swift_unknownObjectRelease(v8);

  return v25;
}

uint64_t sub_1001E0D24()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_sessionIdentifier);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_sessionIdentifier + 8));
  return v1;
}

uint64_t sub_1001E0D6C()
{
  return 100LL;
}

uint64_t sub_1001E0D98()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isVideo);
}

uint64_t sub_1001E0DC8(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isVideo);
}

uint64_t sub_1001E0DF8()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isAudioReady);
}

uint64_t sub_1001E0E28(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isAudioReady);
}

uint64_t sub_1001E0E58()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isUplinkMuted);
}

uint64_t sub_1001E0E88(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isUplinkMuted);
}

uint64_t sub_1001E0EB8()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isAudioEnabled);
}

uint64_t sub_1001E0EE8(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isAudioEnabled);
}

uint64_t sub_1001E0F18()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled);
}

uint64_t sub_1001E0F48(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isVideoEnabled);
}

uint64_t sub_1001E0F80()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isVideoPaused);
}

uint64_t sub_1001E0FB0(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isVideoPaused);
}

uint64_t sub_1001E0FE0()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isAudioPaused);
}

uint64_t sub_1001E1010(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isAudioPaused);
}

uint64_t sub_1001E1040()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled);
}

uint64_t sub_1001E1070(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isOneToOneModeEnabled);
}

uint64_t sub_1001E10A0()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isRelaying);
}

uint64_t sub_1001E10D0(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isRelaying);
}

uint64_t sub_1001E1100()
{
  return sub_1001E2048(OBJC_IVAR___CSDSimulatedAVCSession_isScreening);
}

uint64_t sub_1001E1130(uint64_t a1)
{
  return sub_1001E2040(a1, OBJC_IVAR___CSDSimulatedAVCSession_isScreening);
}

uint64_t sub_1001E1164()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_presentationState);
}

uint64_t sub_1001E1198(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___CSDSimulatedAVCSession_presentationState) = result;
  return result;
}

double sub_1001E11C8()
{
  return *(double *)(v0 + OBJC_IVAR___CSDSimulatedAVCSession_presentationRect);
}

void sub_1001E1200(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = (double *)(v4 + OBJC_IVAR___CSDSimulatedAVCSession_presentationRect);
  *uint64_t v5 = a1;
  v5[1] = a2;
  uint64_t v5[2] = a3;
  v5[3] = a4;
}

uint64_t sub_1001E1250(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CSDSimulatedAVCSession_participants;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  if (*(void *)(*(void *)v3 + 16LL)) {
    sub_1001D711C(a1);
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

void sub_1001E12E4()
{
  uint64_t v2 = v0;
  unsigned __int8 v4 = v3;
  unsigned __int8 v6 = v5;
  unsigned __int8 v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = sub_1001C7360();
  uint64_t v12 = sub_1001E2050(v11);
  __chkstk_darwin(v12);
  uint64_t v13 = sub_1001C7290();
  uint64_t v29 = *(void *)(v13 - 8);
  uint64_t v30 = v13;
  __chkstk_darwin(v13);
  id v14 = sub_1001E2008();
  uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v16 = (__n128 *)sub_1001C7370(v15, 192LL);
  v16[3].n128_u64[1] = sub_1001E2094(v16, (__n128)xmmword_10037B140);
  v16[4].n128_u64[0] = sub_1001E1F68( (unint64_t *)&unk_1004483A0,  (uint64_t (*)(uint64_t))sub_1001E1F2C,  (uint64_t)&protocol conformance descriptor for NSObject);
  v16[2].n128_u64[0] = (unint64_t)v10;
  v16[6].n128_u64[0] = (unint64_t)&type metadata for Bool;
  v16[6].n128_u64[1] = (unint64_t)&protocol witness table for Bool;
  v16[4].n128_u8[8] = v8;
  v16[8].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v16[9].n128_u64[0] = (unint64_t)&protocol witness table for Bool;
  v16[7].n128_u8[0] = v6;
  v16[11].n128_u64[0] = (unint64_t)&type metadata for Bool;
  v16[11].n128_u64[1] = (unint64_t)&protocol witness table for Bool;
  v16[9].n128_u8[8] = v4;
  id v17 = v10;
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:type:_:)( "Add participant %@ videoEnabled %d audioPaused %d screenEnabled %d",  66LL,  2LL,  &_mh_execute_header,  v14,  v18,  v16);

  swift_bridgeObjectRelease(v16);
  id v19 = [v17 identifier];
  sub_1001BB4D4((uint64_t)v2 + OBJC_IVAR___CSDSimulatedAVCSession_participants, (uint64_t)v31);
  id v20 = v17;
  sub_1001FE498((uint64_t)v20, (uint64_t)v19);
  swift_endAccess(v31);
  uint64_t v21 = sub_1001C7370((uint64_t)&unk_1003DFB70, 32LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v21 + 24) = v20;
  v31[4] = sub_1001E1FDC;
  void v31[5] = v21;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 1107296256LL;
  unint64_t v22 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v23 = v20;
  id v24 = v2;
  sub_1001C7348();
  sub_1001E1F68( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v25 = sub_1001E2080();
  sub_1001E2020(v25);
  uint64_t v26 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v26, v27, v28, v22);
  _Block_release(v22);
  sub_1001C72CC();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v1, v30);
  sub_1001C7358();
  sub_1001B0FF8();
}

void *sub_1001E1538(uint64_t a1, void *a2)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___CSDSimulatedAVCSession_delegate);
  if (result)
  {
    unsigned __int8 v4 = result;
    objc_msgSend( result,  "addedRemoteParticipantWithIdentifier:updatedAudioEnabled:updatedVideoEnabled:streamToken:screenToken:captionsToken:",  objc_msgSend(a2, "identifier"),  1,  1,  0,  0,  0);
    return (void *)swift_unknownObjectRelease(v4);
  }

  return result;
}

void sub_1001E1628()
{
  uint64_t v2 = v0;
  unsigned __int8 v4 = v3;
  uint64_t v5 = sub_1001C7360();
  uint64_t v6 = sub_1001E2050(v5);
  __chkstk_darwin(v6);
  uint64_t v23 = sub_1001C7290();
  uint64_t v7 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v8 = sub_1001E2008();
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v10 = (__n128 *)sub_1001C7370(v9, 72LL);
  v10[3].n128_u64[1] = sub_1001E2094(v10, (__n128)xmmword_10037B290);
  v10[4].n128_u64[0] = sub_1001E1F68( (unint64_t *)&unk_1004483A0,  (uint64_t (*)(uint64_t))sub_1001E1F2C,  (uint64_t)&protocol conformance descriptor for NSObject);
  v10[2].n128_u64[0] = (unint64_t)v4;
  id v11 = v4;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("Remove participant %@", 21LL, 2LL, &_mh_execute_header, v8, v12, v10);

  swift_bridgeObjectRelease(v10);
  id v13 = [v11 identifier];
  sub_1001BB4D4((uint64_t)v2 + OBJC_IVAR___CSDSimulatedAVCSession_participants, (uint64_t)v24);
  id v14 = (void *)sub_1001FD9FC(v13);
  swift_endAccess(v24);

  uint64_t v15 = sub_1001C7370((uint64_t)&unk_1003DFB20, 32LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v15 + 24) = v11;
  v24[4] = sub_1001E1FA8;
  void v24[5] = v15;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256LL;
  uint64_t v16 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v17 = v11;
  id v18 = v2;
  sub_1001C7348();
  sub_1001E1F68( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v19 = sub_1001E2080();
  sub_1001E2020(v19);
  uint64_t v20 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v20, v21, v22, v16);
  _Block_release(v16);
  sub_1001C72CC();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v23);
  sub_1001C7358();
  sub_1001B0FF8();
}

void *sub_1001E184C(uint64_t a1, void *a2)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___CSDSimulatedAVCSession_delegate);
  if (result)
  {
    unsigned __int8 v4 = result;
    objc_msgSend(result, "removedRemoteParticipantWithIdentifier:didSucceed:", objc_msgSend(a2, "identifier"), 1);
    return (void *)swift_unknownObjectRelease(v4);
  }

  return result;
}

void sub_1001E193C()
{
  uint64_t v1 = sub_1001C7360();
  uint64_t v2 = sub_1001E2050(v1);
  __chkstk_darwin(v2);
  sub_1001C7290();
  sub_1001E20A0();
  __chkstk_darwin(v3);
  id v4 = sub_1001E2008();
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  os_log(_:dso:log:type:_:)( "Start simulated AVCSession",  26LL,  2LL,  &_mh_execute_header,  v4,  v5,  _swiftEmptyArrayStorage);

  *(void *)(sub_1001C7370((uint64_t)&unk_1003DFAD0, 24LL) + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  uint64_t v6 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v7 = v0;
  sub_1001C7348();
  sub_1001E1F68( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v8 = sub_1001E2080();
  sub_1001E2020(v8);
  uint64_t v9 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v9, v10, v11, v6);
  _Block_release(v6);
  sub_1001C72CC();
  sub_1001E2070();
  sub_1001C7358();
  sub_1001B0FF8();
}

void *sub_1001E1A98(uint64_t a1)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___CSDSimulatedAVCSession_delegate);
  if (result)
  {
    uint64_t v3 = result;
    [result session:a1 didStart:1 error:0];
    return (void *)swift_unknownObjectRelease(v3);
  }

  return result;
}

void sub_1001E1B28()
{
}

void sub_1001E1B64()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1001C7360();
  uint64_t v4 = sub_1001E2050(v3);
  __chkstk_darwin(v4);
  sub_1001C7290();
  sub_1001E20A0();
  __chkstk_darwin(v5);
  id v6 = sub_1001E2008();
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v8 = sub_1001C7370(v7, 72LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  if (v2)
  {
    v24[0] = v2;
    swift_errorRetain(v2);
    uint64_t v9 = sub_1001AFF14(&qword_100447B70);
    uint64_t v10 = String.init<A>(reflecting:)(v24, v9);
    unint64_t v12 = v11;
  }

  else
  {
    unint64_t v12 = 0xE300000000000000LL;
    uint64_t v10 = 7104878LL;
  }

  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v13 = sub_1001B2330();
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + 40) = v12;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("Stop simulated AVCSession with error %@", 39LL, 2LL, &_mh_execute_header, v6, v14, v8);

  swift_bridgeObjectRelease(v8);
  uint64_t v15 = sub_1001C7370((uint64_t)&unk_1003DFA80, 24LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  v24[4] = sub_1001E1F04;
  void v24[5] = v15;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256LL;
  uint64_t v16 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v17 = v0;
  sub_1001C7348();
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_1001E1F68( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v19 = sub_1001E2080();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v0, v19, v3, v18);
  uint64_t v20 = sub_1001D929C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v20, v21, v22, v16);
  _Block_release(v16);
  sub_1001C72CC();
  sub_1001E2070();
  sub_1001C7358();
  sub_1001B0FF8();
}

void *sub_1001E1D60(uint64_t a1)
{
  unint64_t result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___CSDSimulatedAVCSession_delegate);
  if (result)
  {
    uint64_t v3 = result;
    [result session:a1 didStopWithError:0];
    return (void *)swift_unknownObjectRelease(v3);
  }

  return result;
}

void sub_1001E1DFC()
{
}

id sub_1001E1E34()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedAVCSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SimulatedAVCSession()
{
  return objc_opt_self(&OBJC_CLASS___CSDSimulatedAVCSession);
}

uint64_t sub_1001E1EE0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_1001E1F04()
{
  return sub_1001E1D60(*(void *)(v0 + 16));
}

uint64_t sub_1001E1F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001E1F1C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_1001E1F24()
{
  return sub_1001E1A98(*(void *)(v0 + 16));
}

unint64_t sub_1001E1F2C()
{
  unint64_t result = qword_100448F80;
  if (!qword_100448F80)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CSDConversationParticipant);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100448F80);
  }

  return result;
}

uint64_t sub_1001E1F68(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_1001E1FA8()
{
  return sub_1001E184C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001E1FB0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_1001E1FDC()
{
  return sub_1001E1538(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_1001E2008()
{
  return sub_100170684();
}

uint64_t sub_1001E2020(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v2, a1, v1, v3);
}

uint64_t sub_1001E2040@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v2 + a2) = result;
  return result;
}

uint64_t sub_1001E2048@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(v1 + a1);
}

uint64_t sub_1001E2050(uint64_t result)
{
  *(void *)(v1 - 144) = *(void *)(result - 8);
  return result;
}

void *sub_1001E2064@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_1001E2070()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

unint64_t sub_1001E2080()
{
  return sub_1001C94D0();
}

uint64_t sub_1001E2088()
{
  return 0LL;
}

unint64_t sub_1001E2094(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_1001E1F2C();
}

  ;
}

uint64_t sub_1001E20B4(uint64_t a1, char a2)
{
  *(void *)(v2 + 32) = 0LL;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 1LL;
  *(_BYTE *)(v2 + 56) = 0;
  sub_1001DE6BC(v6);
  sub_1001DEA24((uint64_t)v6, v2 + 64, (uint64_t *)&unk_10044B7C0);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_1001E2120()
{
  uint64_t v1 = v0;
  uint64_t v17 = _typeName(_:qualified:)(*v0, 0LL);
  uint64_t v18 = v2;
  v3._countAndFlagsBits = 40LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)&v16, "audioSession=");
  HIWORD(v16._object) = -4864;
  id v15 = (id)v0[2];
  uint64_t v4 = sub_1001B4B94(0LL, &qword_100448488, &OBJC_CLASS___AVAudioSession_ptr);
  id v5 = v15;
  v6._countAndFlagsBits = String.init<A>(reflecting:)(&v15, v4);
  String.append(_:)(v6);
  sub_1001B0F5C();
  sub_1001E4378();
  String.append(_:)(v16);
  sub_1001B0F5C();
  v16._countAndFlagsBits = 0x3D6C61636F6CLL;
  v16._object = (void *)0xE600000000000000LL;
  char v7 = *((_BYTE *)v1 + 24);
  if (v7) {
    uint64_t v8 = 1702195828LL;
  }
  else {
    uint64_t v8 = 0x65736C6166LL;
  }
  if (*((_BYTE *)v1 + 24)) {
    unint64_t v9 = 0xE400000000000000LL;
  }
  else {
    unint64_t v9 = 0xE500000000000000LL;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v9);
  sub_1001E4378();
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  if ((v7 & 1) == 0)
  {
    v16._countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease(v16._object);
    v16._countAndFlagsBits = 0x7365536F69647561LL;
    v16._object = (void *)0xEF3D44496E6F6973LL;
    LODWORD(v15) = [v5 opaqueSessionID];
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    String.append(_:)(v12);
    sub_1001B0EB8();
    sub_1001E4378();
    String.append(_:)(v16);
    sub_1001B0EB8();
  }

  v13._countAndFlagsBits = 41LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return v17;
}

unint64_t sub_1001E2324(unint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = result;
  uint64_t v56 = *v4;
  uint64_t v10 = v4[4];
  uint64_t v9 = v4[5];
  uint64_t v11 = v4[6];
  unint64_t v12 = HIDWORD(result);
  if (v11 == 1)
  {
    if (a3 == 1) {
      return result;
    }
    sub_1001DE900(result, a2, a3);
    sub_1001DE900(v10, v9, 1LL);
    sub_1001DE740(v10, v9, 1LL);
    sub_1001DE740(v8, a2, a3);
    char v13 = v8 & 1;
    goto LABEL_11;
  }

  if (a3 != 1)
  {
    if ((result & 1) == ((v4[4] & 1) == 0) || HIDWORD(v10) != HIDWORD(result)) {
      goto LABEL_10;
    }
    if (!v11)
    {
      char v13 = result;
      if (!a3) {
        return sub_1001DE740(result, a2, 0LL);
      }
      goto LABEL_11;
    }

    if (a3)
    {
      if (v9 == a2 && v11 == a3) {
        return sub_1001DE740(v8, a2, a3);
      }
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v4[5], v4[6], a2, a3, 0LL);
      char v13 = v8;
      if ((v52 & 1) != 0) {
        return sub_1001DE740(v8, a2, a3);
      }
    }

    else
    {
LABEL_10:
      char v13 = result;
    }

uint64_t sub_1001E2890(uint64_t a1, char a2)
{
  id v104 = *v2;
  sub_1001DEA24(a1, (uint64_t)v111, (uint64_t *)&unk_10044B7C0);
  sub_1001DEA24((uint64_t)v111, (uint64_t)v116, (uint64_t *)&unk_10044B7C0);
  int v105 = sub_1001E42E0((uint64_t)v116);
  sub_1001DEA24(a1, (uint64_t)v113, (uint64_t *)&unk_10044B7C0);
  id v5 = &unk_10037B000;
  if (sub_1001E42E0((uint64_t)v113) != 1)
  {
    uint64_t v6 = v115;
    if (v115)
    {
      uint64_t v7 = v114;
      swift_bridgeObjectRetain(v115);
      sub_1002B00EC();
      uint64_t v9 = v8;
      unint64_t v10 = v8[2];
      if (v10 >= v8[3] >> 1)
      {
        sub_1002B00EC();
        uint64_t v9 = v99;
      }

      v9[2] = v10 + 1;
      uint64_t v11 = &v9[2 * v10];
      v11[4] = v7;
      void v11[5] = v6;
    }

    else
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
    }

    id v12 = sub_100170614();
    uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    v112[0] = v9;
    swift_bridgeObjectRetain(v9);
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
    uint64_t v16 = String.init<A>(reflecting:)(v112, v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v19 = sub_1001B2330();
    *(void *)(v14 + 64) = v19;
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + 40) = v18;
    uint64_t v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:type:_:)( "Requesting audio session be attributed to %@",  44LL,  2LL,  &_mh_execute_header,  v12,  v20,  v14);

    swift_bridgeObjectRelease(v14);
    id v21 = v2[2];
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v112[0] = 0LL;
    LODWORD(v21) = [v21 setHostProcessAttribution:isa error:v112];

    id v23 = v112[0];
    if (!(_DWORD)v21)
    {
      uint64_t v103 = v2;
      id v45 = v112[0];
      uint64_t v43 = _convertNSErrorToError(_:)(v23);

      swift_willThrow(v46);
LABEL_25:
      id v5 = &unk_10037B000;
      goto LABEL_26;
    }

    id v24 = v112[0];
    id v5 = (_OWORD *)&unk_10037B000;
  }

  id v25 = v2[2];
  if (qword_100446708 != -1) {
    swift_once(&qword_100446708, sub_1001DD450);
  }
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [objc_allocWithZone(NSNumber) initWithBool:1];
  v112[0] = 0LL;
  unsigned int v28 = [v25 setMXSessionProperty:v26 value:v27 error:v112];

  id v29 = v112[0];
  if (v28)
  {
    id v30 = v112[0];
    id v31 = sub_100170614();
    uint64_t v100 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v32 = swift_allocObject(v100, 232LL, 7LL);
    *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B130;
    LOBYTE(v109[0]) = v105 == 0;
    uint64_t v33 = String.init<A>(reflecting:)(v109, &type metadata for Bool);
    uint64_t v35 = v34;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v36 = sub_1001B2330();
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    *(void *)(v32 + 96) = &type metadata for UInt;
    *(void *)(v32 + 104) = &protocol witness table for UInt;
    *(void *)(v32 + 64) = v36;
    *(void *)(v32 + 72) = a2 & 1;
    uint64_t v102 = a2 & 1;
    v109[0] = v2;
    swift_retain(v2);
    uint64_t v37 = String.init<A>(reflecting:)(v109, v104);
    *(void *)(v32 + 136) = &type metadata for String;
    *(void *)(v32 + 144) = v36;
    *(void *)(v32 + 112) = v37;
    *(void *)(v32 + 120) = v38;
    uint64_t v39 = (uint64_t)(v2 + 8);
    sub_1001DEA24((uint64_t)(v2 + 8), (uint64_t)v110, (uint64_t *)&unk_10044B7C0);
    sub_1001DEA24((uint64_t)v110, (uint64_t)v112, (uint64_t *)&unk_10044B7C0);
    if (sub_1001E42E0((uint64_t)v112) == 1)
    {
      unint64_t v40 = 0xE300000000000000LL;
      uint64_t v41 = 7104878LL;
    }

    else
    {
      v109[0] = v2[9];
      uint64_t v47 = (void *)v109[0];
      type metadata accessor for Category(0LL);
      uint64_t v49 = v48;
      id v50 = v47;
      uint64_t v41 = String.init<A>(reflecting:)(v109, v49);
    }

    *(void *)(v32 + 176) = &type metadata for String;
    *(void *)(v32 + 184) = v36;
    *(void *)(v32 + 152) = v41;
    *(void *)(v32 + 160) = v40;
    sub_1001DEA24((uint64_t)(v2 + 8), (uint64_t)v108, (uint64_t *)&unk_10044B7C0);
    sub_1001DEA24((uint64_t)v108, (uint64_t)v109, (uint64_t *)&unk_10044B7C0);
    if (sub_1001E42E0((uint64_t)v109) == 1)
    {
      unint64_t v51 = 0xE300000000000000LL;
      uint64_t v52 = 7104878LL;
    }

    else
    {
      id v53 = v2[10];
      uint64_t v52 = 7104878LL;
      if (v53)
      {
        v107[0] = v2[10];
        type metadata accessor for Mode(0LL);
        uint64_t v55 = v54;
        id v56 = v53;
        uint64_t v52 = String.init<A>(reflecting:)(v107, v55);
      }

      else
      {
        unint64_t v51 = 0xE300000000000000LL;
      }
    }

    *(void *)(v32 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
    *(void *)(v32 + 224) = v36;
    *(void *)(v32 + 192) = v52;
    *(void *)(v32 + 200) = v51;
    uint64_t v57 = static os_log_type_t.default.getter(v52);
    os_log(_:dso:log:type:_:)( "Setting audio active: %@ options: %ld for provider %@ category %@ mode %@",  73LL,  2LL,  &_mh_execute_header,  v31,  v57,  v32);

    swift_bridgeObjectRelease(v32);
    v107[0] = 0LL;
    unsigned int v58 = [v25 setActive:v105 == 0 withOptions:v102 error:v107];
    id v59 = v107[0];
    if (v58)
    {
      sub_1001DEA24(v39, (uint64_t)v107, (uint64_t *)&unk_10044B7C0);
      sub_1001DEA24(a1, v39, (uint64_t *)&unk_10044B7C0);
      id v60 = v59;
      sub_1001DE914( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE980);
      sub_1001DE914( (uint64_t)v107,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
      id v61 = sub_100170614();
      uint64_t v62 = swift_allocObject(v100, 112LL, 7LL);
      *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      v106[0] = v105 == 0;
      uint64_t v63 = String.init<A>(reflecting:)(v106, &type metadata for Bool);
      *(void *)(v62 + 56) = &type metadata for String;
      *(void *)(v62 + 64) = v36;
      *(void *)(v62 + 32) = v63;
      *(void *)(v62 + 40) = v64;
      *(void *)(v62 + 96) = &type metadata for UInt;
      *(void *)(v62 + 104) = &protocol witness table for UInt;
      *(void *)(v62 + 72) = v102;
      uint64_t v65 = static os_log_type_t.default.getter(v63);
      os_log(_:dso:log:type:_:)( "Successfully set audio active: %@ options: %ld",  46LL,  2LL,  &_mh_execute_header,  v61,  v65,  v62);

      return swift_bridgeObjectRelease(v62);
    }

    uint64_t v103 = v2;
    id v67 = v107[0];
    uint64_t v43 = _convertNSErrorToError(_:)(v59);

    swift_willThrow(v68);
    goto LABEL_25;
  }

  uint64_t v103 = v2;
  id v42 = v112[0];
  uint64_t v43 = _convertNSErrorToError(_:)(v29);

  swift_willThrow(v44);
LABEL_26:
  v109[0] = v43;
  uint64_t v69 = sub_1001AFF14(&qword_100447B70);
  uint64_t v70 = sub_1001B4B94(0LL, &qword_100448490, &OBJC_CLASS___NSError_ptr);
  swift_dynamicCast(v108, v109, v69, v70, 0LL);
  uint64_t v71 = (void *)v108[0];
  sub_1001DEA24(a1, (uint64_t)v112, (uint64_t *)&unk_10044B7C0);
  id v72 = [v71 domain];
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
  uint64_t v75 = v74;

  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  if (v73 == v76 && v75 == v77)
  {
    swift_bridgeObjectRelease_n(v75, 2LL);
  }

  else
  {
    uint64_t v79 = v77;
    char v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, v76, v77, 0LL);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v79);
    if ((v80 & 1) == 0) {
      goto LABEL_36;
    }
  }

  if (objc_msgSend(v71, "code", v100) != (id)560030580)
  {
LABEL_36:
    id v85 = sub_100170614();
    uint64_t v87 = static os_log_type_t.error.getter(v85, v86);
    uint64_t v88 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v89 = swift_allocObject(v88, 152LL, 7LL);
    *(_OWORD *)(v89 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
    LOBYTE(v110[0]) = v105 == 0;
    uint64_t v90 = String.init<A>(reflecting:)(v110, &type metadata for Bool);
    uint64_t v92 = v91;
    *(void *)(v89 + 56) = &type metadata for String;
    unint64_t v93 = sub_1001B2330();
    *(void *)(v89 + 64) = v93;
    *(void *)(v89 + 32) = v90;
    *(void *)(v89 + 40) = v92;
    v110[0] = v103;
    swift_retain(v103);
    uint64_t v94 = String.init<A>(reflecting:)(v110, v104);
    *(void *)(v89 + 96) = &type metadata for String;
    *(void *)(v89 + 104) = v93;
    *(void *)(v89 + 72) = v94;
    *(void *)(v89 + 80) = v95;
    v110[0] = v71;
    id v96 = v71;
    uint64_t v97 = String.init<A>(reflecting:)(v110, v70);
    *(void *)(v89 + 136) = &type metadata for String;
    *(void *)(v89 + 144) = v93;
    *(void *)(v89 + 112) = v97;
    *(void *)(v89 + 120) = v98;
    os_log(_:dso:log:type:_:)( "Error setting audio active to %@ for provider %@: %@",  52LL,  2LL,  &_mh_execute_header,  v85,  v87,  v89);

    swift_bridgeObjectRelease(v89);
    return swift_errorRelease(v109[0]);
  }

  id v81 = sub_100170614();
  uint64_t v82 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v83 = swift_allocObject(v82, 72LL, 7LL);
  *(_OWORD *)(v83 + swift_unknownObjectWeakDestroy(v0 + 16) = v5[41];
  id v84 = [v71 code];
  *(void *)(v83 + 56) = &type metadata for Int;
  *(void *)(v83 + 64) = &protocol witness table for Int;
  *(void *)(v83 + 32) = v84;
  static os_log_type_t.default.getter(v84);
  os_log(_:dso:log:type:_:)("Did not deactivate audio successfully, but error code was %d so assuming success", v101);

  swift_bridgeObjectRelease(v83);
  sub_1001DEA24((uint64_t)(v103 + 8), (uint64_t)v110, (uint64_t *)&unk_10044B7C0);
  sub_1001DEA24(a1, (uint64_t)(v103 + 8), (uint64_t *)&unk_10044B7C0);
  sub_1001DE914( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
  return swift_errorRelease(v109[0]);
}

void sub_1001E3218(NSString **__src)
{
  uint64_t v2 = v1;
  memcpy(__dst, __src, sizeof(__dst));
  sub_1001DEA7C((uint64_t)(v1 + 8), (uint64_t)v61);
  sub_1001DEA7C((uint64_t)v61, (uint64_t)v62);
  if (sub_1001E42E0((uint64_t)v62) != 1)
  {
    int v4 = v62[49];
    sub_1001DEA24((uint64_t)v61, (uint64_t)v56, (uint64_t *)&unk_10044B7C0);
    sub_1001DE884((uint64_t)v56);
    sub_1001DE914( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
  }

  uint64_t v5 = sub_1001E43CC();
  sub_1001DE900(v5, v6, v7);
  unint64_t v8 = sub_1001E43CC();
  sub_1001E2324(v8, v9, v10, v11);
  uint64_t v54 = &_swiftEmptyDictionarySingleton;
  sub_1001DEA7C((uint64_t)__src + 148, (uint64_t)&v55);
  sub_1001DEA7C((uint64_t)&v55, (uint64_t)&v58);
  if ((v59 & 1) != 0) {
    goto LABEL_12;
  }
  int v12 = v58;
  id v13 = sub_100170614();
  uint64_t v51 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v14 = sub_1001C7370(v51, 112LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  uint64_t v15 = *v2;
  *(void *)id v56 = *v2;
  uint64_t v16 = sub_1001AFF14(&qword_100448498);
  uint64_t v24 = sub_1001E43E8( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  2LL,  4LL,  v49,  v51,  v53[0],  v53[1],  v53[2],  v53[3],  v53[4],  v53[5],  v53[6],  v53[7],  v53[8],  v53[9],  v53[10],  v53[11],  v53[12],  v53[13],  v53[14],  v53[15],  v53[16],  v53[17],  v53[18],  v53[19],  (uint64_t)v54,  v55,  v56[0]);
  uint64_t v26 = v25;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v27 = sub_1001B2330();
  *(void *)(v14 + 64) = v27;
  *(void *)(v14 + 32) = v24;
  *(void *)(v14 + 40) = v26;
  *(void *)(v14 + 96) = &type metadata for Int32;
  *(void *)(v14 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v14 + 72) = v12;
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  os_log(_:dso:log:type:_:)("%@: Phone call subtype is: %d", 29LL, 2LL, &_mh_execute_header, v13, v28, v14);

  sub_1001E43E0();
  if ((v12 - 1) < 2)
  {
    uint64_t v57 = &type metadata for Bool;
    v56[0] = 0;
    goto LABEL_10;
  }

  if ((v12 - 3) < 2)
  {
    uint64_t v57 = &type metadata for Bool;
    v56[0] = 1;
LABEL_10:
    sub_1001FC0F0((uint64_t)v56, 0xD000000000000045LL, 0x800000010036D840LL);
LABEL_11:
    id v29 = (void *)objc_opt_self(&OBJC_CLASS___AVAudioClient);
    id v30 = v54;
    id v31 = (void *)swift_bridgeObjectRetain(v54);
    sub_1002A7838(v31);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v54);
    sub_1001DE798(v33, v29);
    id v34 = sub_100170614();
    uint64_t v35 = sub_1001C7370(v52, 112LL);
    *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v48;
    uint64_t v43 = sub_1001E43E8( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v48,  *((uint64_t *)&v48 + 1),  v50,  v52,  v53[0],  v53[1],  v53[2],  v53[3],  v53[4],  v53[5],  v53[6],  v53[7],  v53[8],  v53[9],  v53[10],  v53[11],  v53[12],  v53[13],  v53[14],  v53[15],  v53[16],  v53[17],  v53[18],  v53[19],  (uint64_t)v54,  v55,  v15);
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = v27;
    *(void *)(v35 + 32) = v43;
    *(void *)(v35 + 40) = v44;
    *(void *)(v35 + 96) = sub_1001AFF14(&qword_100447B60);
    unint64_t v45 = sub_1001DE754();
    *(void *)(v35 + 104) = v45;
    *(void *)(v35 + 72) = v30;
    uint64_t v46 = static os_log_type_t.default.getter(v45);
    os_log(_:dso:log:type:_:)("%@: Setting audio session properties: %@", 40LL, 2LL, &_mh_execute_header, v34, v46, v35);

    sub_1001B0F5C();
LABEL_12:
    sub_1001E3AF0(__src[1], __src[2]);
    sub_1001E35A8(*((unsigned __int8 *)__src + 49));
    memcpy(v53, __dst, 0x99uLL);
    ScreenSharingActivityManager.carPlayStartedConnectionAttempt()();
    sub_1001DEA24((uint64_t)v53, (uint64_t)v56, (uint64_t *)&unk_10044B7C0);
    sub_1001E2890((uint64_t)v56, 0);
    sub_1001B0FF8();
    return;
  }

  if (!v12) {
    goto LABEL_11;
  }
  type metadata accessor for TUTelephonyCallSubType(0LL);
  *(_DWORD *)id v56 = v12;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v47, v56, v47, &type metadata for Int32);
  __break(1u);
}

void sub_1001E35A8(int a1)
{
  char v2 = a1;
  Swift::String v3 = *(void **)v1;
  if (((a1 ^ ([*(id *)(v1 + 16) interruptionPriority] != (id)10)) & 1) == 0)
  {
    if ((v2 & 1) != 0) {
      uint64_t v4 = 10LL;
    }
    else {
      uint64_t v4 = 0LL;
    }
    if (*(_BYTE *)(v1 + 24) == 1)
    {
      uint64_t v5 = 7104878LL;
      id v6 = sub_100170614();
      uint64_t v71 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v7 = sub_1001C7370(v71, 192LL);
      *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B140;
      *(void *)(v7 + 56) = &type metadata for Int;
      *(void *)(v7 + 64) = &protocol witness table for Int;
      *(void *)(v7 + 32) = v4;
      v74[0] = v1;
      swift_retain(v1);
      uint64_t v8 = sub_1001E43A4((uint64_t)v74);
      uint64_t v10 = v9;
      *(void *)(v7 + 96) = &type metadata for String;
      unint64_t v11 = sub_1001B2330();
      *(void *)(v7 + 104) = v11;
      *(void *)(v7 + 72) = v8;
      *(void *)(v7 + 80) = v10;
      sub_1001E439C(v1 + 64, (uint64_t)v75);
      sub_1001E439C((uint64_t)v75, (uint64_t)v76);
      if (sub_1001E42E0((uint64_t)v76) == 1)
      {
        unint64_t v12 = 0xE300000000000000LL;
        uint64_t v13 = 7104878LL;
      }

      else
      {
        v74[0] = *(void *)(v1 + 72);
        uint64_t v32 = (void *)v74[0];
        type metadata accessor for Category(0LL);
        uint64_t v34 = v33;
        id v35 = v32;
        uint64_t v5 = 7104878LL;
        uint64_t v13 = String.init<A>(reflecting:)(v74, v34);
      }

      *(void *)(v7 + 136) = &type metadata for String;
      *(void *)(v7 + 144) = v11;
      *(void *)(v7 + 112) = v13;
      *(void *)(v7 + 120) = v12;
      sub_1001E439C(v1 + 64, (uint64_t)v73);
      sub_1001E439C((uint64_t)v73, (uint64_t)v74);
      uint64_t v36 = sub_1001E42E0((uint64_t)v74);
      if ((_DWORD)v36 == 1 || (uint64_t v37 = *(void **)(v1 + 80)) == 0LL)
      {
        unint64_t v41 = 0xE300000000000000LL;
      }

      else
      {
        v72[0] = *(id *)(v1 + 80);
        type metadata accessor for Mode(0LL);
        uint64_t v39 = v38;
        id v40 = v37;
        uint64_t v36 = String.init<A>(reflecting:)(v72, v39);
        uint64_t v5 = v36;
      }

      *(void *)(v7 + 176) = &type metadata for String;
      *(void *)(v7 + 184) = v11;
      *(void *)(v7 + 152) = v5;
      *(void *)(v7 + 160) = v41;
      uint64_t v42 = static os_log_type_t.default.getter(v36);
      sub_1001E43BC( (uint64_t)"Setting audio interruption priority: %ld for provider %@ category %@ mode %@",  76LL,  v43,  (uint64_t)&_mh_execute_header,  v44,  v42);

      sub_1001E43E0();
      unint64_t v45 = *(void **)(v1 + 16);
      v72[0] = 0LL;
      if ([v45 setInterruptionPriority:v4 error:v72])
      {
        id v46 = v72[0];
        id v47 = sub_100170614();
        uint64_t v29 = sub_1001B11C8();
        id v30 = "Successfully set audio interruption priority";
        uint64_t v31 = 44LL;
        goto LABEL_17;
      }

      id v60 = v72[0];
      uint64_t v49 = (void *)sub_1001E4400();

      swift_willThrow(v61);
      id v51 = sub_100170614();
      uint64_t v63 = static os_log_type_t.error.getter(v51, v62);
      uint64_t v54 = sub_1001C7370(v71, 152LL);
      *(_OWORD *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
      *(void *)(v54 + 56) = &type metadata for Int;
      *(void *)(v54 + 64) = &protocol witness table for Int;
      *(void *)(v54 + 32) = v4;
      v72[0] = (id)v1;
      swift_retain(v1);
      uint64_t v64 = sub_1001E43A4((uint64_t)v72);
      *(void *)(v54 + 96) = &type metadata for String;
      *(void *)(v54 + 104) = v11;
      *(void *)(v54 + 72) = v64;
      *(void *)(v54 + 80) = v65;
      v72[0] = v49;
      swift_errorRetain(v49);
      uint64_t v66 = sub_1001AFF14(&qword_100447B70);
      uint64_t v69 = sub_1001E440C(v66, v67, v68);
      *(void *)(v54 + 136) = &type metadata for String;
      *(void *)(v54 + 144) = v11;
      *(void *)(v54 + 112) = v69;
      *(void *)(v54 + 120) = v70;
      os_log(_:dso:log:type:_:)( "Error setting audio interruption priority to %ld for provider %@: %@",  68LL,  2LL,  &_mh_execute_header,  v51,  v63,  v54);
    }

    else
    {
      id v14 = sub_100170614();
      uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v16 = sub_1001C7370(v15, 112LL);
      *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v16 + 56) = &type metadata for Int;
      *(void *)(v16 + 64) = &protocol witness table for Int;
      sub_1001E43AC(v16);
      uint64_t v17 = (void *)sub_1001E43A4((uint64_t)v76);
      uint64_t v19 = v18;
      *(void *)(v16 + 96) = &type metadata for String;
      unint64_t v20 = sub_1001B2330();
      *(void *)(v16 + 104) = v20;
      *(void *)(v16 + 72) = v17;
      *(void *)(v16 + 80) = v19;
      uint64_t v21 = static os_log_type_t.default.getter(v20);
      sub_1001E43BC( (uint64_t)"Deactivating and setting audio interruption priority: %ld for provider %@",  73LL,  v22,  (uint64_t)&_mh_execute_header,  v23,  v21);

      sub_1001E43E0();
      uint64_t v24 = *(void **)(v1 + 16);
      v76[0] = 0LL;
      if ([v24 deactivateAndSetInterruptionPriority:v4 error:v76])
      {
        id v25 = v76[0];
        id v26 = sub_100170614();
        uint64_t v29 = sub_1001B11C8();
        id v30 = "Successfully deactivated and set audio interruption priority";
        uint64_t v31 = 60LL;
LABEL_17:
        sub_1001E43F4((uint64_t)v30, v31, v27, (uint64_t)&_mh_execute_header, v28, v29, (uint64_t)_swiftEmptyArrayStorage);

        goto LABEL_21;
      }

      id v48 = v76[0];
      uint64_t v49 = (void *)sub_1001E4400();

      swift_willThrow(v50);
      id v51 = sub_100170614();
      uint64_t v53 = static os_log_type_t.error.getter(v51, v52);
      uint64_t v54 = sub_1001C7370(v15, 152LL);
      *(_OWORD *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
      *(void *)(v54 + 56) = &type metadata for Int;
      *(void *)(v54 + 64) = &protocol witness table for Int;
      sub_1001E43AC(v54);
      uint64_t v55 = sub_1001E43A4((uint64_t)v76);
      *(void *)(v54 + 96) = &type metadata for String;
      *(void *)(v54 + 104) = v20;
      *(void *)(v54 + 72) = v55;
      *(void *)(v54 + 80) = v56;
      v76[0] = v49;
      swift_errorRetain(v49);
      uint64_t v57 = sub_1001AFF14(&qword_100447B70);
      uint64_t v58 = String.init<A>(reflecting:)(v76, v57);
      *(void *)(v54 + 136) = &type metadata for String;
      *(void *)(v54 + 144) = v20;
      *(void *)(v54 + 112) = v58;
      *(void *)(v54 + 120) = v59;
      os_log(_:dso:log:type:_:)( "Error deactivating and setting audio interruption priority to %ld for provider %@: %@",  85LL,  2LL,  &_mh_execute_header,  v51,  v53,  v54);
    }

    swift_bridgeObjectRelease(v54);
    swift_errorRelease(v49);
  }

void sub_1001E3AF0(NSString *a1, NSString *a2)
{
  if (v2[24] == 1)
  {
    uint64_t v5 = *(void **)v2;
    if (a2) {
      uint64_t v68 = a2;
    }
    else {
      uint64_t v68 = AVAudioSessionModeDefault;
    }
    id v6 = (void *)*((void *)v2 + 2);
    uint64_t v7 = a2;
    id v8 = [v6 category];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v9 == v12 && v11 == v13)
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    else
    {
      uint64_t v15 = v13;
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0LL);

      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      if ((v16 & 1) == 0)
      {
LABEL_18:
        id v26 = sub_100170614();
        uint64_t v67 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v27 = swift_allocObject(v67, 152LL, 7LL);
        *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
        uint64_t v70 = a1;
        type metadata accessor for Category(0LL);
        uint64_t v29 = v28;
        id v30 = a1;
        uint64_t v66 = v29;
        uint64_t v31 = String.init<A>(reflecting:)(&v70, v29);
        uint64_t v33 = v32;
        *(void *)(v27 + 56) = &type metadata for String;
        unint64_t v34 = sub_1001B2330();
        *(void *)(v27 + 64) = v34;
        *(void *)(v27 + 32) = v31;
        *(void *)(v27 + 40) = v33;
        uint64_t v70 = v68;
        type metadata accessor for Mode(0LL);
        uint64_t v36 = v35;
        uint64_t v37 = v68;
        uint64_t v38 = String.init<A>(reflecting:)(&v70, v36);
        *(void *)(v27 + 96) = &type metadata for String;
        *(void *)(v27 + 104) = v34;
        *(void *)(v27 + 72) = v38;
        *(void *)(v27 + 80) = v39;
        uint64_t v70 = (NSString *)v2;
        swift_retain(v2);
        id v69 = v5;
        uint64_t v40 = String.init<A>(reflecting:)(&v70, v5);
        *(void *)(v27 + 136) = &type metadata for String;
        *(void *)(v27 + 144) = v34;
        *(void *)(v27 + 112) = v40;
        *(void *)(v27 + 120) = v41;
        uint64_t v42 = static os_log_type_t.default.getter(v40);
        os_log(_:dso:log:type:_:)( "Setting audio category: %@ mode: %@ for provider %@",  51LL,  2LL,  &_mh_execute_header,  v26,  v42,  v27);

        swift_bridgeObjectRelease(v27);
        uint64_t v70 = 0LL;
        unsigned int v43 = [v6 setCategory:v30 mode:v37 options:0 error:&v70];
        uint64_t v44 = v70;
        if (v43)
        {
          unint64_t v45 = v70;
          id v46 = sub_100170614();
          uint64_t v47 = static os_log_type_t.default.getter(v46);
          os_log(_:dso:log:type:_:)( "Successfully set audio mode",  27LL,  2LL,  &_mh_execute_header,  v46,  v47,  _swiftEmptyArrayStorage,  v66,  v67,  v5);
        }

        else
        {
          id v48 = v70;
          uint64_t v49 = (NSString *)_convertNSErrorToError(_:)(v44);

          swift_willThrow(v50);
          id v51 = sub_100170614();
          uint64_t v53 = static os_log_type_t.error.getter(v51, v52);
          uint64_t v54 = swift_allocObject(v67, 192LL, 7LL);
          *(_OWORD *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B140;
          uint64_t v70 = v30;
          uint64_t v55 = v30;
          uint64_t v56 = String.init<A>(reflecting:)(&v70, v66);
          *(void *)(v54 + 56) = &type metadata for String;
          *(void *)(v54 + 64) = v34;
          *(void *)(v54 + 32) = v56;
          *(void *)(v54 + 40) = v57;
          uint64_t v70 = v37;
          uint64_t v58 = v37;
          uint64_t v59 = String.init<A>(reflecting:)(&v70, v36);
          *(void *)(v54 + 96) = &type metadata for String;
          *(void *)(v54 + 104) = v34;
          *(void *)(v54 + 72) = v59;
          *(void *)(v54 + 80) = v60;
          uint64_t v70 = (NSString *)v2;
          swift_retain(v2);
          uint64_t v61 = String.init<A>(reflecting:)(&v70, v69);
          *(void *)(v54 + 136) = &type metadata for String;
          *(void *)(v54 + 144) = v34;
          *(void *)(v54 + 112) = v61;
          *(void *)(v54 + 120) = v62;
          uint64_t v70 = v49;
          swift_errorRetain(v49);
          uint64_t v63 = sub_1001AFF14(&qword_100447B70);
          uint64_t v64 = String.init<A>(reflecting:)(&v70, v63);
          *(void *)(v54 + 176) = &type metadata for String;
          *(void *)(v54 + 184) = v34;
          *(void *)(v54 + 152) = v64;
          *(void *)(v54 + 160) = v65;
          os_log(_:dso:log:type:_:)( "Error setting audio category to %@ and mode to %@ for provider %@: %@",  69LL,  2LL,  &_mh_execute_header,  v51,  v53,  v54);

          swift_bridgeObjectRelease(v54);
          swift_errorRelease(v49);
        }

        return;
      }
    }

    id v17 = [v6 mode];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    if (v18 == v21 && v20 == v22)
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
      return;
    }

    uint64_t v24 = v22;
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0LL);

    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v24);
    if ((v25 & 1) != 0)
    {

      return;
    }

    goto LABEL_18;
  }

id sub_1001E3FB4(char a1)
{
  if ((*(_BYTE *)(v1 + 24) & 1) == 0) {
    sub_1001E35A8(0);
  }
  sub_1001E4388();
  Swift::String v3 = *(void **)(v1 + 16);
  id v20 = 0LL;
  id v19 = v20;
  id v5 = v20;
  id v6 = (void *)_convertNSErrorToError(_:)(v19);

  swift_willThrow(v7);
  id v8 = sub_100170614();
  uint64_t v10 = static os_log_type_t.error.getter(v8, v9);
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = sub_1001C7370(v11, 72LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  id v20 = v6;
  swift_errorRetain(v6);
  uint64_t v13 = sub_1001AFF14(&qword_100447B70);
  uint64_t v16 = sub_1001E440C(v13, v14, v15);
  uint64_t v18 = v17;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1001B2330();
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v18;
  os_log(_:dso:log:type:_:)( "Error overriding output audio port to AVAudioSessionPortOverrideNone: %@",  72LL,  2LL,  &_mh_execute_header,  v8,  v10,  v12);

  sub_1001B0F5C();
  return (id)swift_errorRelease(v6);
}

uint64_t sub_1001E4188()
{
  id v2 = sub_100170614();
  uint64_t v3 = sub_1001B11C8();
  sub_1001E43F4( (uint64_t)"Resetting state",  15LL,  v4,  (uint64_t)&_mh_execute_header,  v5,  v3,  (uint64_t)_swiftEmptyArrayStorage);

  sub_1001E4388();
  sub_1001DE6BC(v7);
  sub_1001DEA7C(v1 + 64, (uint64_t)v8);
  sub_1001DEA7C((uint64_t)v7, v1 + 64);
  return sub_1001DE914( (uint64_t)v8,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
}

uint64_t sub_1001E4228()
{
  sub_1001DE740(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_1001DEA24(v0 + 64, (uint64_t)v2, (uint64_t *)&unk_10044B7C0);
  sub_1001DE914( (uint64_t)v2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1001DE6C4);
  return v0;
}

uint64_t sub_1001E4280()
{
  return swift_deallocClassInstance(v0, 217LL, 7LL);
}

uint64_t type metadata accessor for AVAudioSessionInterruptionProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd34AVAudioSessionInterruptionProvider);
}

uint64_t sub_1001E42C0()
{
  return sub_1001E2120();
}

uint64_t sub_1001E42E0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_1001D9EA4(v0, v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1001E42F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  sub_1001B0EB8();
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

void sub_1001E4378()
{
  v0._countAndFlagsBits = 32LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

unint64_t sub_1001E4388()
{
  return sub_1001E2324(0LL, 0LL, 1LL, 0);
}

uint64_t sub_1001E439C(uint64_t a1, uint64_t a2)
{
  return sub_1001DEA24(a1, a2, v2);
}

uint64_t sub_1001E43A4(uint64_t a1)
{
  return String.init<A>(reflecting:)(a1, v1);
}

uint64_t sub_1001E43AC(uint64_t a1)
{
  *(void *)(a1 + 32) = v2;
  *(void *)(v3 - 256) = v1;
  return swift_retain(v1);
}

uint64_t sub_1001E43BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v6, a6, v7);
}

uint64_t sub_1001E43CC()
{
  return v0;
}

uint64_t sub_1001E43E0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001E43E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  return String.init<A>(describing:)(&a35, v35);
}

uint64_t sub_1001E43F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v7, a6, a7);
}

uint64_t sub_1001E4400()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1001E440C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(reflecting:)(va, a1);
}

uint64_t sub_1001E4418(uint64_t a1, char *a2)
{
  uint64_t v33 = v37[1];
  int64_t v4 = v37[3];
  unint64_t v5 = v37[4];
  uint64_t v6 = &a2[OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier];
  int64_t v34 = (unint64_t)(v37[2] + 64LL) >> 6;
  uint64_t v35 = v37[0];
  uint64_t result = swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_15;
    }

    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v10 >= v34) {
      goto LABEL_29;
    }
    unint64_t v11 = *(void *)(v33 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v34) {
        goto LABEL_29;
      }
      unint64_t v11 = *(void *)(v33 + 8 * v12);
      if (v11) {
        goto LABEL_13;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v34) {
        goto LABEL_29;
      }
      unint64_t v11 = *(void *)(v33 + 8 * v12);
      if (v11) {
        goto LABEL_13;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v34) {
        goto LABEL_29;
      }
      unint64_t v11 = *(void *)(v33 + 8 * v12);
      if (v11)
      {
LABEL_13:
        int64_t v10 = v12;
      }

      else
      {
        int64_t v10 = v4 + 5;
        if (v4 + 5 >= v34) {
          goto LABEL_29;
        }
        unint64_t v11 = *(void *)(v33 + 8 * v10);
        if (!v11)
        {
          int64_t v31 = v4 + 6;
          while (v31 < v34)
          {
            unint64_t v11 = *(void *)(v33 + 8 * v31++);
            if (v11)
            {
              int64_t v10 = v31 - 1;
              goto LABEL_14;
            }
          }

uint64_t sub_1001E4704(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v33 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  int64_t v36 = v7;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * i);
    uint64_t v15 = sub_1001E6418(v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    uint64_t v17 = *a2;
    uint64_t v37 = (void *)*a2;
    *a2 = 0x8000000000000000LL;
    sub_1001D7264(v14);
    uint64_t v20 = *(void *)(v17 + 16);
    BOOL v21 = (v19 & 1) == 0;
    Swift::Int v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    unint64_t v23 = v18;
    char v24 = v19;
    sub_1001AFF14(&qword_100448518);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
    {
      sub_1001D7264(v14);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_36;
      }
      unint64_t v23 = v25;
    }

    if ((v24 & 1) != 0)
    {
      *(void *)(v37[7] + 8 * v23) = v15;
    }

    else
    {
      v37[(v23 >> 6) + 8] |= 1LL << v23;
      *(_DWORD *)(v37[6] + 4 * v23) = v14;
      *(void *)(v37[7] + 8 * v23) = v15;
      uint64_t v27 = v37[2];
      BOOL v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_33;
      }
      v37[2] = v29;
    }

    uint64_t v30 = *a2;
    *a2 = v37;
    swift_bridgeObjectRelease(v30);
    int64_t v7 = v36;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_34;
    }
    if (v10 >= v33) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v32 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v33) {
        goto LABEL_31;
      }
      unint64_t v11 = *(void *)(v32 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v33) {
          goto LABEL_31;
        }
        unint64_t v11 = *(void *)(v32 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v7 + 4;
          if (v7 + 4 >= v33) {
            goto LABEL_31;
          }
          unint64_t v11 = *(void *)(v32 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_1001E49BC(uint64_t a1, void *a2)
{
  uint64_t v32 = v34[0];
  int64_t v33 = v34[3];
  unint64_t v4 = v34[4];
  uint64_t v30 = v34[1];
  int64_t v31 = (unint64_t)(v34[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v5 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v6 = v5 | (v33 << 6);
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(*(void *)(v32 + 48) + 4 * v6);
    uint64_t v12 = *(void *)(*(void *)(v32 + 56) + 8 * v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    uint64_t v35 = (void *)*a2;
    unsigned int v14 = v35;
    *a2 = 0x8000000000000000LL;
    sub_1001D7264(v11);
    uint64_t v17 = v14[2];
    BOOL v18 = (v16 & 1) == 0;
    Swift::Int v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    unint64_t v20 = v15;
    char v21 = v16;
    sub_1001AFF14(&qword_100448508);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
    {
      sub_1001D7264(v11);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_33;
      }
      unint64_t v20 = v22;
    }

    char v24 = v35;
    if ((v21 & 1) != 0)
    {
      *(void *)(v35[7] + 8 * v20) = v12;
    }

    else
    {
      v35[(v20 >> 6) + 8] |= 1LL << v20;
      *(_DWORD *)(v24[6] + 4 * v20) = v11;
      *(void *)(v24[7] + 8 * v20) = v12;
      uint64_t v25 = v24[2];
      BOOL v26 = __OFADD__(v25, 1LL);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_31;
      }
      v24[2] = v27;
    }

    uint64_t v28 = *a2;
    *a2 = v24;
    swift_bridgeObjectRelease(v28);
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      goto LABEL_32;
    }
    if (v7 >= v31) {
      return swift_release(v32);
    }
    unint64_t v8 = *(void *)(v30 + 8 * v7);
    int64_t v9 = v33 + 1;
    if (!v8)
    {
      int64_t v9 = v33 + 2;
      if (v33 + 2 >= v31) {
        return swift_release(v32);
      }
      unint64_t v8 = *(void *)(v30 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v33 + 3;
        if (v33 + 3 >= v31) {
          return swift_release(v32);
        }
        unint64_t v8 = *(void *)(v30 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v33 + 4;
          if (v33 + 4 >= v31) {
            return swift_release(v32);
          }
          unint64_t v8 = *(void *)(v30 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v33 + 5;
            if (v33 + 5 >= v31) {
              return swift_release(v32);
            }
            unint64_t v8 = *(void *)(v30 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v33 + 6;
              while (v10 < v31)
              {
                unint64_t v8 = *(void *)(v30 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v32);
            }
          }
        }
      }
    }

uint64_t sub_1001E4C50(uint64_t a1, uint64_t (*a2)(void, void))
{
  uint64_t v4 = v16[0];
  uint64_t v5 = v16[1];
  int64_t v6 = v16[3];
  unint64_t v7 = v16[4];
  int64_t v8 = (unint64_t)(v16[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v6 << 6);
  while (1)
  {
    uint64_t result = a2(*(unsigned int *)(*(void *)(v4 + 48) + 4 * v11), *(void *)(*(void *)(v4 + 56) + 8 * v11));
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v8) {
      return swift_release(v4);
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        return swift_release(v4);
      }
      unint64_t v13 = *(void *)(v5 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v8) {
          return swift_release(v4);
        }
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v8) {
            return swift_release(v4);
          }
          unint64_t v13 = *(void *)(v5 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v8) {
              return swift_release(v4);
            }
            unint64_t v13 = *(void *)(v5 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v8)
              {
                unint64_t v13 = *(void *)(v5 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v4);
            }
          }
        }
      }
    }

BOOL ProcessState.isRunning.getter(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

uint64_t ProcessState.debugDescription.getter(uint64_t a1)
{
  uint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x616E696D7265742ELL;
      break;
    case 2LL:
      uint64_t result = 0xD000000000000014LL;
      break;
    case 3LL:
    case 4LL:
      uint64_t result = 0xD000000000000012LL;
      break;
    default:
      v6[1] = v1;
      v6[2] = v2;
      v6[0] = a1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for ProcessState,  v6,  &type metadata for ProcessState,  &type metadata for Int);
      __break(1u);
      break;
  }

  return result;
}

unint64_t ProcessState.init(rawValue:)(unint64_t result)
{
  if (result > 4) {
    return 0LL;
  }
  return result;
}

unint64_t sub_1001E4E98@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = ProcessState.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_1001E4EC8()
{
  return ProcessState.debugDescription.getter(*v0);
}

void sub_1001E4ED0(void *a1)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v1 initWithBundleIdentifiers:isa queue:a1];

  sub_10010B978();
}

void sub_1001E4F50(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  sub_1001E4F88(a1, a2);
  sub_10010B978();
}

char *sub_1001E4F88(uint64_t a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v29 = sub_1001C7290();
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_1001B10F0();
  *(void *)&v2[OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier] = &_swiftEmptyDictionarySingleton;
  int64_t v9 = &v2[OBJC_IVAR___CSDProcessObserver_processStateChanged];
  *(void *)int64_t v9 = 0LL;
  *((void *)v9 + 1) = 0LL;
  unint64_t v10 = &v2[OBJC_IVAR___CSDProcessObserver_processStateChangedWithBundleID];
  *(void *)unint64_t v10 = 0LL;
  *((void *)v10 + 1) = 0LL;
  objc_allocWithZone(&OBJC_CLASS___BKSApplicationStateMonitor);
  unint64_t v11 = v2;
  unint64_t result = (char *)sub_1001E73EC((uint64_t)_swiftEmptyArrayStorage, 0LL);
  if (result)
  {
    *(void *)&v11[OBJC_IVAR___CSDProcessObserver_applicationMonitor] = result;
    *(void *)&v11[OBJC_IVAR___CSDProcessObserver_queue] = a2;
    id v27 = a2;

    v33.receiver = v11;
    v33.super_class = ObjectType;
    unint64_t v13 = (char *)objc_msgSendSuper2(&v33, "init");
    int64_t v14 = *(void **)&v13[OBJC_IVAR___CSDProcessObserver_applicationMonitor];
    uint64_t v15 = sub_1001C7370((uint64_t)&unk_1003DFC70, 24LL);
    swift_unknownObjectWeakInit(v15 + 16, v13);
    uint64_t v31 = v15;
    char v16 = sub_1001E9240((uint64_t)sub_10028F948);
    uint64_t v17 = v13;
    id v18 = v14;
    swift_release(v31);
    [v18 setHandler:v16];
    _Block_release(v16);

    uint64_t v19 = sub_1001C7370((uint64_t)&unk_1003DFCC0, 32LL);
    *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(void *)(v19 + 24) = a1;
    uint64_t v32 = v19;
    unint64_t v20 = sub_1001E9240((uint64_t)sub_1002356BC);
    char v21 = v17;
    static DispatchQoS.unspecified.getter(v21);
    unint64_t v22 = sub_1001E8E70();
    sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_1001C94D0();
    sub_1001E91F4();
    dispatch thunk of SetAlgebra.init<A>(_:)(v23, v24, v25, v26, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v4, v3, v20);

    _Block_release(v20);
    sub_1001E91BC(v30);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v29);
    swift_release(v32);
    return v21;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001E525C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v23, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    int64_t v12 = (void *)result;
    v19[1] = *(void *)(result + OBJC_IVAR___CSDProcessObserver_queue);
    uint64_t v13 = swift_allocObject(&unk_1003DFD10, 24LL, 7LL);
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    aBlock[4] = sub_1001E8ECC;
    uint64_t v22 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003DFD28;
    int64_t v14 = _Block_copy(aBlock);
    id v15 = v12;
    static DispatchQoS.unspecified.getter(v15);
    unint64_t v20 = _swiftEmptyArrayStorage;
    unint64_t v16 = sub_1001E8E70();
    uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    unint64_t v18 = sub_1001C94D0();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v3, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

    return swift_release(v22);
  }

  return result;
}

uint64_t sub_1001E5448()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(void **)&v0[OBJC_IVAR___CSDProcessObserver_queue];
  *(void *)uint64_t v4 = v5;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = &v0[OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier];
    swift_beginAccess(&v0[OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier], v13, 0LL, 0LL);
    uint64_t v9 = *(void *)v8;
    unint64_t v10 = v0;
    uint64_t v11 = swift_bridgeObjectRetain(v9);
    sub_1001E4418(v11, v10);
    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001E554C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001E5574(a2, 0);
  return swift_bridgeObjectRelease(v2);
}

void *sub_1001E5574(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v89 = a2;
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR___CSDProcessObserver_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (!*(void *)(a1 + 16)) {
    return &_swiftEmptyDictionarySingleton;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  int64_t v12 = (void *)(v3 + OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier);
  swift_beginAccess(v3 + OBJC_IVAR___CSDProcessObserver_processInfoByBundleIdentifier, v96, 0LL, 0LL);
  uint64_t v92 = v12;
  uint64_t v13 = swift_bridgeObjectRetain(*v12);
  int64_t v14 = sub_10024E778(v13);
  swift_bridgeObjectRetain(v14);
  uint64_t v15 = swift_bridgeObjectRetain(a1);
  uint64_t v16 = sub_1001E5C0C(v15, (uint64_t)v14);
  sub_1001E7460((uint64_t)v14, v16);
  char v18 = v17;
  swift_bridgeObjectRelease(v14);
  if ((v18 & 1) != 0)
  {
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    unint64_t v20 = *(void **)(v3 + OBJC_IVAR___CSDProcessObserver_applicationMonitor);
    swift_bridgeObjectRetain(v16);
    sub_1001E7ACC();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v16);
    uint64_t v23 = sub_1001E5D18(v22);
    swift_release(v22);
    v24.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    uint64_t v25 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease(v16);
    if (v25) {
      uint64_t v26 = BKSApplicationStateAll;
    }
    else {
      uint64_t v26 = 0LL;
    }
    [v20 updateInterestedBundleIDs:v24.super.isa states:v26];
  }

  swift_bridgeObjectRetain(a1);
  uint64_t v88 = a1;
  id v27 = (uint64_t *)(a1 + 40);
  uint64_t v19 = &_swiftEmptyDictionarySingleton;
  uint64_t v28 = v11;
  uint64_t v90 = v3;
  while (1)
  {
    uint64_t v29 = *(v27 - 1);
    uint64_t v30 = *v27;
    uint64_t v31 = v92;
    swift_beginAccess(v92, v95, 32LL, 0LL);
    uint64_t v32 = *v31;
    uint64_t v33 = *(void *)(*v31 + 16LL);
    swift_bridgeObjectRetain(v30);
    uint64_t v93 = v29;
    if (!v33) {
      goto LABEL_16;
    }
    swift_bridgeObjectRetain(v30);
    unint64_t v34 = sub_1001D7094(v29, v30);
    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease(v30);
LABEL_16:
      uint64_t v91 = v27;
      uint64_t v37 = v28;
      swift_endAccess(v95);
      goto LABEL_17;
    }

    uint64_t v36 = *(void *)(*(void *)(v32 + 56) + 8 * v34);
    swift_bridgeObjectRetain(v36);
    swift_endAccess(v95);
    swift_bridgeObjectRelease(v30);
    if ((v89 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v95[0] = v19;
      unint64_t v74 = sub_1001D7094(v29, v30);
      uint64_t v76 = v19[2];
      BOOL v77 = (v75 & 1) == 0;
      Swift::Int v78 = v76 + v77;
      if (__OFADD__(v76, v77)) {
        goto LABEL_48;
      }
      unint64_t v79 = v74;
      char v80 = v75;
      sub_1001AFF14(&qword_100448510);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v78))
      {
        unint64_t v81 = sub_1001D7094(v93, v30);
        if ((v80 & 1) != (v82 & 1)) {
          goto LABEL_51;
        }
        unint64_t v79 = v81;
      }

      uint64_t v19 = (void *)v95[0];
      if ((v80 & 1) != 0)
      {
        uint64_t v83 = *(void *)(v95[0] + 56LL);
        swift_bridgeObjectRelease(*(void *)(v83 + 8 * v79));
        *(void *)(v83 + 8 * v79) = v36;
        goto LABEL_33;
      }

      *(void *)(v95[0] + 8 * (v79 >> 6) + 64) |= 1LL << v79;
      id v84 = (void *)(v19[6] + 16 * v79);
      void *v84 = v93;
      v84[1] = v30;
      *(void *)(v19[7] + 8 * v79) = v36;
      uint64_t v85 = v19[2];
      BOOL v57 = __OFADD__(v85, 1LL);
      uint64_t v72 = v85 + 1;
      if (v57) {
        goto LABEL_49;
      }
      goto LABEL_32;
    }

    uint64_t v91 = v27;
    uint64_t v37 = v28;
    swift_bridgeObjectRelease(v36);
LABEL_17:
    uint64_t v38 = sub_1001E610C(v29, v30);
    uint64_t v39 = v92;
    swift_beginAccess(v92, v95, 33LL, 0LL);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v38);
    char v40 = swift_isUniquelyReferenced_nonNull_native(*v39);
    uint64_t v94 = (void *)*v39;
    uint64_t v41 = v94;
    void *v39 = 0x8000000000000000LL;
    unint64_t v42 = sub_1001D7094(v29, v30);
    uint64_t v44 = v41[2];
    BOOL v45 = (v43 & 1) == 0;
    Swift::Int v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      break;
    }
    unint64_t v47 = v42;
    char v48 = v43;
    sub_1001AFF14(&qword_100448510);
    Swift::Bool v49 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v40, v46);
    uint64_t v28 = v37;
    id v27 = v91;
    if (v49)
    {
      unint64_t v50 = sub_1001D7094(v93, v30);
      if ((v48 & 1) != (v51 & 1)) {
        goto LABEL_51;
      }
      unint64_t v47 = v50;
    }

    uint64_t v52 = v94;
    if ((v48 & 1) != 0)
    {
      uint64_t v53 = v94[7];
      swift_bridgeObjectRelease(*(void *)(v53 + 8 * v47));
      *(void *)(v53 + 8 * v47) = v38;
      uint64_t v54 = v93;
    }

    else
    {
      v94[(v47 >> 6) + 8] |= 1LL << v47;
      uint64_t v55 = (void *)(v52[6] + 16 * v47);
      uint64_t v54 = v93;
      void *v55 = v93;
      v55[1] = v30;
      *(void *)(v52[7] + 8 * v47) = v38;
      uint64_t v56 = v52[2];
      BOOL v57 = __OFADD__(v56, 1LL);
      uint64_t v58 = v56 + 1;
      if (v57) {
        goto LABEL_46;
      }
      v52[2] = v58;
      swift_bridgeObjectRetain(v30);
    }

    uint64_t v59 = *v92;
    *uint64_t v92 = v52;
    swift_bridgeObjectRelease(v59);
    swift_endAccess(v95);
    char v60 = swift_isUniquelyReferenced_nonNull_native(v19);
    v95[0] = v19;
    unint64_t v61 = sub_1001D7094(v54, v30);
    char v63 = v62;
    uint64_t v64 = v19[2];
    BOOL v65 = (v62 & 1) == 0;
    if (__OFADD__(v64, v65)) {
      goto LABEL_45;
    }
    unint64_t v66 = v61;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v60, v64 + v65))
    {
      unint64_t v67 = sub_1001D7094(v93, v30);
      if ((v63 & 1) != (v68 & 1)) {
        goto LABEL_51;
      }
      unint64_t v66 = v67;
    }

    uint64_t v19 = (void *)v95[0];
    if ((v63 & 1) == 0)
    {
      *(void *)(v95[0] + 8 * (v66 >> 6) + 64) |= 1LL << v66;
      uint64_t v70 = (void *)(v19[6] + 16 * v66);
      *uint64_t v70 = v93;
      v70[1] = v30;
      *(void *)(v19[7] + 8 * v66) = v38;
      uint64_t v71 = v19[2];
      BOOL v57 = __OFADD__(v71, 1LL);
      uint64_t v72 = v71 + 1;
      if (v57) {
        goto LABEL_47;
      }
LABEL_32:
      void v19[2] = v72;
      swift_bridgeObjectRetain(v30);
      goto LABEL_33;
    }

    uint64_t v69 = *(void *)(v95[0] + 56LL);
    swift_bridgeObjectRelease(*(void *)(v69 + 8 * v66));
    *(void *)(v69 + 8 * v66) = v38;
LABEL_33:
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    v27 += 2;
    if (!--v28)
    {
      swift_bridgeObjectRelease(v88);
      return v19;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001E5C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10024AA5C(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }

  else
  {
    uint64_t v7 = a2;
    swift_bridgeObjectRelease(a1);
  }

  return v7;
}

uint64_t sub_1001E5CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      uint64_t v5 = *(void *)(a1 + 8 * i + 32);
      sub_10024AF3C(&v8, v5);
    }

    sub_1001B0EB8();
    return v9;
  }

  else
  {
    uint64_t v6 = a2;
    sub_1001B0EB8();
  }

  return v6;
}

void *sub_1001E5D18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    sub_100250088();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v8[0] = *(v4 - 1);
      v8[1] = v5;
      swift_bridgeObjectRetain(v5);
      sub_1001E9260((uint64_t)v9, (uint64_t)v8, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1001E91B4();
        uint64_t v2 = v10;
      }

      unint64_t v6 = v2[2];
      if (v6 >= v2[3] >> 1)
      {
        sub_1001E91B4();
        uint64_t v2 = v10;
      }

      v4 += 2;
      v2[2] = v6 + 1;
      sub_1001B03EC(v9, &v2[4 * v6 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_1001E5E30(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_1001E9114();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v1);
    sub_1001B0EB8();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v3)
  {
LABEL_14:
    sub_1001B0FF8();
    return;
  }

  unint64_t v20 = _swiftEmptyArrayStorage;
  sub_100250138(0LL, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v20;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v6 = (id)sub_1001E9220();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v4 + 32);
      }
      id v7 = v6;
      sub_1001D8EA0(0LL, (unint64_t *)&unk_100448550, &OBJC_CLASS___CHRecentCall_ptr);
      uint64_t v18 = v8;
      uint64_t v19 = &off_1003E36E8;
      v17[0] = v7;
      unint64_t v20 = v5;
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_100250138((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v11 = v18;
        int64_t v12 = v19;
      }

      else
      {
        uint64_t v11 = v8;
        int64_t v12 = &off_1003E36E8;
      }

      ++v4;
      uint64_t v13 = sub_1001BA188((uint64_t)v17, v11);
      __chkstk_darwin(v13);
      uint64_t v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v16 + 16))(v15);
      sub_10024D4FC(v10, (uint64_t)v15, (uint64_t *)&v20, v11, (uint64_t)v12);
      sub_1001B0438(v17);
      uint64_t v5 = v20;
    }

    while (v3 != v4);
    goto LABEL_14;
  }

  __break(1u);
}

void sub_1001E5FC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  a24 = v26;
  a25 = v28;
  unint64_t v29 = v27;
  if (v27 >> 62)
  {
    sub_1001E9114();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_1001B0EB8();
  }

  else
  {
    uint64_t v30 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v30)
  {
LABEL_14:
    sub_1001E9024();
    return;
  }

  a13 = _swiftEmptyArrayStorage;
  sub_100250088();
  if ((v30 & 0x8000000000000000LL) == 0)
  {
    for (uint64_t i = 0LL; i != v30; ++i)
    {
      if ((v29 & 0xC000000000000001LL) != 0) {
        uint64_t v32 = sub_1001E9220();
      }
      else {
        uint64_t v32 = swift_unknownObjectRetain(*(void *)(v29 + 8 * i + 32));
      }
      a9 = v32;
      uint64_t v33 = sub_1001AFF14(&qword_1004491D0);
      sub_1001E9260((uint64_t)&a10, (uint64_t)&a9, v33, (uint64_t)&type metadata for Any + 8);
      unint64_t v34 = a13;
      if ((swift_isUniquelyReferenced_nonNull_native(a13) & 1) == 0)
      {
        sub_1001E91B4();
        unint64_t v34 = a13;
      }

      unint64_t v35 = v34[2];
      if (v35 >= v34[3] >> 1)
      {
        sub_1001E91B4();
        unint64_t v34 = a13;
      }

      v34[2] = v35 + 1;
      sub_1001B03EC(&a10, &v34[4 * v35 + 4]);
    }

    goto LABEL_14;
  }

  __break(1u);
}

uint64_t sub_1001E610C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v9 = *(void **)&v2[OBJC_IVAR___CSDProcessObserver_queue];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
    sub_1001E6218(a1, a2);
    uint64_t v13 = v12;
    sub_1001E4704(v12, &v15, v2);
    swift_bridgeObjectRelease(v13);
    return (uint64_t)v15;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1001E6218(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v9 = *(void **)(v2 + OBJC_IVAR___CSDProcessObserver_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    return;
  }

  uint64_t v11 = sub_1001E7EF8(a1, a2, *(void **)(v2 + OBJC_IVAR___CSDProcessObserver_applicationMonitor));
  if (v11)
  {
    uint64_t v12 = v11;
    v19[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(BKSApplicationStateProcessIDKey);
    v19[1] = v13;
    AnyHashable.init<A>(_:)(v20, v19, &type metadata for String, &protocol witness table for String);
    sub_1001CA108((uint64_t)v20, v12, &v21);
    swift_bridgeObjectRelease(v12);
    sub_1001D8504((uint64_t)v20);
    if (v22)
    {
      sub_1001D8EA0(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
      if ((swift_dynamicCast(v19, &v21, (char *)&type metadata for Any + 8, v14, 6LL) & 1) != 0)
      {
        uint64_t v15 = (void *)v19[0];
        uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100448520);
        char v17 = (_UNKNOWN **)swift_allocObject(v16, 36LL, 7LL);
        *((_OWORD *)v17 + 1) = xmmword_10037B290;
        *((_DWORD *)v17 + _Block_object_dispose(va, 8) = [v15 intValue];

        goto LABEL_8;
      }
    }

    else
    {
      sub_1001B14E8((uint64_t)&v21);
    }
  }

  char v17 = &off_1003DC8B0;
LABEL_8:
  if (v17[2])
  {
    sub_10024E8E4((uint64_t)v17);
  }

  else
  {
    swift_bridgeObjectRelease(v17);
    sub_10024C1C8();
  }

uint64_t sub_1001E6418(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDProcessObserver_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if ((_DWORD)a1 == -1) {
      return 0LL;
    }
    else {
      return static ProcessState.processState(applicationState:)((int)[*(id *)(v1 + OBJC_IVAR___CSDProcessObserver_applicationMonitor) mostElevatedApplicationStateForPID:a1]);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t static ProcessState.processState(applicationState:)(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 0LL;
  switch(v1)
  {
    case 0:
      uint64_t result = 1LL;
      break;
    case 1:
      uint64_t result = 2LL;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return result;
    case 3:
      uint64_t result = 3LL;
      break;
    case 7:
      uint64_t result = 4LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

unint64_t sub_1001E656C()
{
  unint64_t result = qword_1004484A0;
  if (!qword_1004484A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ProcessState, &type metadata for ProcessState);
    atomic_store(result, (unint64_t *)&qword_1004484A0);
  }

  return result;
}

ValueMetadata *type metadata accessor for ProcessState()
{
  return &type metadata for ProcessState;
}

void sub_1001E65B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3
    || !*(void *)(a3 + 16)
    || (sub_1001D7264(a1), (v13 & 1) == 0)
    || *(void *)(*(void *)(a3 + 56) + 8 * v12) != a2)
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4
                                                                    + OBJC_IVAR___CSDProcessObserver_processStateChangedWithBundleID);
    if (v14)
    {
      uint64_t v15 = *(void *)(a4 + OBJC_IVAR___CSDProcessObserver_processStateChangedWithBundleID + 8);
      swift_retain(v15);
      v14(a5, a6, a1, a2);
      sub_1001B5D3C((uint64_t)v14, v15);
    }

    uint64_t v16 = a4 + OBJC_IVAR___CSDProcessObserver_processStateChanged;
    char v17 = *(void (**)(uint64_t, uint64_t))(a4 + OBJC_IVAR___CSDProcessObserver_processStateChanged);
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 8);
      swift_retain(v18);
      v17(a1, a2);
      sub_1001B5D3C((uint64_t)v17, v18);
    }
  }

uint64_t sub_1001E66B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(void **)(v3 + OBJC_IVAR___CSDProcessObserver_queue);
  *(void *)uint64_t v10 = v11;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    uint64_t v14 = &_swiftEmptyDictionarySingleton;
    uint64_t v25 = &_swiftEmptyDictionarySingleton;
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t inited = swift_initStackObject(v15, v24);
    __int128 v22 = xmmword_10037B290;
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    swift_bridgeObjectRetain(a2);
    char v17 = sub_1001E5574(inited, a3 & 1);
    swift_setDeallocating(inited);
    sub_1001E79E4();
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_1001C9FB8(a1, a2, v17);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v17);
    if (v18)
    {
      sub_1001E49BC(v18, &v25);
      swift_bridgeObjectRelease(v18);
      uint64_t v14 = v25;
    }

    if (!v14[2])
    {
      uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_1004484F8);
      uint64_t v20 = swift_initStackObject(v19, v23);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
      *(_DWORD *)(v20 + 32) = -1;
      *(void *)(v20 + 40) = 0LL;
      uint64_t v21 = Dictionary.init(dictionaryLiteral:)( v20,  &type metadata for Int32,  &type metadata for Int,  &protocol witness table for Int32);
      swift_bridgeObjectRelease(v14);
      return v21;
    }

    return (uint64_t)v14;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1001E68E0()
{
}

uint64_t sub_1001E6900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

id sub_1001E69FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3();
  if (!v7) {
    return 0LL;
  }
  v11[4] = v7;
  uint64_t v12 = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = a4;
  v11[3] = a5;
  uint64_t v9 = _Block_copy(v11);
  swift_release(v12);
  return v9;
}

void sub_1001E6A78()
{
}

uint64_t sub_1001E6A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v10 = v9;
  swift_retain(v6);
  v7(v8, v10, a3, a4);
  swift_release(v6);
  return swift_bridgeObjectRelease(v10);
}

void sub_1001E6BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id, uint64_t, uint64_t))(a5 + 16))(a5, v8, a3, a4);
}

_UNKNOWN **sub_1001E6BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B10F0();
  id v8 = *(void **)(v2 + OBJC_IVAR___CSDProcessObserver_queue);
  *uint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v9 = v8;
  LOBYTE(v_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v3);
  uint64_t result = (_UNKNOWN **)(*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t inited = swift_initStackObject(v11, v16);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    swift_bridgeObjectRetain(a2);
    char v13 = sub_1001E5574(inited, 0);
    swift_setDeallocating(inited);
    sub_1001E79E4();
    swift_bridgeObjectRetain(a2);
    uint64_t v14 = sub_1001C9FB8(a1, a2, v13);
    sub_1001B0EB8();
    swift_bridgeObjectRelease(v13);
    if (!v14) {
      return &off_1003DCA30;
    }
    uint64_t v15 = sub_1001E7C40(v14);
    swift_bridgeObjectRelease(v14);
    return (_UNKNOWN **)v15;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001E6DD0(uint64_t a1, uint64_t a2)
{
  return sub_1001E66B4(a1, a2, 0);
}

void sub_1001E6E94(uint64_t a1, uint64_t a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_1001E6EEC(uint64_t a1, uint64_t a2)
{
  return sub_1001E66B4(a1, a2, 1);
}

Class sub_1001E6F00(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  sub_1001B0F5C();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  return isa;
}

uint64_t sub_1001E6F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v17 = sub_1001C7290();
  uint64_t v29 = *(void *)(v17 - 8);
  uint64_t v30 = v17;
  __chkstk_darwin(v17);
  sub_1001B10F0();
  uint64_t v18 = (void *)sub_1001C7370(a5, 56LL);
  v18[2] = a3;
  void v18[3] = a4;
  v18[4] = v7;
  v18[5] = a1;
  v18[6] = a2;
  aBlock[4] = a6;
  uint64_t v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = a7;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(a4);
  id v20 = v7;
  uint64_t v21 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v21);
  unint64_t v22 = sub_1001E8E70();
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001C94D0();
  sub_1001E91F4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v23, v24, v25, v26, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v8, v19);
  _Block_release(v19);
  sub_1001E91BC(v31);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v9, v30);
  return swift_release(v33);
}

uint64_t sub_1001E7124(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = sub_1001E66B4(a4, a5, a6);
  a1();
  return swift_bridgeObjectRelease(v7);
}

void sub_1001E7220()
{
}

uint64_t type metadata accessor for ProcessObserver()
{
  return objc_opt_self(&OBJC_CLASS___CSDProcessObserver);
}

uint64_t sub_1001E72E8(void *a1)
{
  uint64_t v1 = sub_10023A468(a1);
  if (v2)
  {
    uint64_t v3 = sub_1001E66B4(v1, v2, 0);
    sub_1001B0EB8();
    return v3;
  }

  else
  {
    uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_1004484F8);
    uint64_t inited = swift_initStackObject(v5, &v7);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    *(_DWORD *)(inited + 32) = -1;
    *(void *)(inited + 40) = 0LL;
    return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for Int32,  &type metadata for Int,  &protocol witness table for Int32);
  }

id sub_1001E73EC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  id v6 = [v2 initWithBundleIDs:v5.super.isa states:a2];

  return v6;
}

void sub_1001E7460(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_1001E924C();
  if (!v30) {
    return;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t v37 = v3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & v5;
  int64_t v38 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = v2 + 56;
  if ((v7 & v5) == 0) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  int64_t v39 = v4;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    uint64_t v20 = v3;
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    Hasher.init(_seed:)(v40, *(void *)(v2 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v40, v23, v22);
    Swift::Int v24 = Hasher._finalize()();
    uint64_t v25 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v26 = v24 & ~v25;
    if (((*(void *)(v9 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v27 = *(void *)(v2 + 48);
    uint64_t v28 = (uint64_t *)(v27 + 16 * v26);
    uint64_t v29 = v28[1];
    BOOL v30 = *v28 == v23 && v29 == v22;
    if (!v30 && (sub_1001B1144(*v28, v29, v23, v22) & 1) == 0)
    {
      uint64_t v31 = ~v25;
      for (unint64_t j = v26 + 1; ; unint64_t j = v33 + 1)
      {
        uint64_t v33 = j & v31;
        unint64_t v34 = (uint64_t *)(v27 + 16 * v33);
        uint64_t v35 = v34[1];
        BOOL v36 = *v34 == v23 && v35 == v22;
        if (v36 || (sub_1001B1144(*v34, v35, v23, v22) & 1) != 0) {
          goto LABEL_35;
        }
      }

void sub_1001E76C8(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_1001E924C();
  if (!v31) {
    return;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = v3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v42 = v2 + 56;
  uint64_t v37 = v3 + 56;
  uint64_t v38 = v3;
  int64_t v36 = v9;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v39 = (v8 - 1) & v8;
  int64_t v40 = v4;
  for (unint64_t i = __clz(__rbit64(v8)) | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = *(void *)(v3 + 48) + 56 * i;
    __int128 v17 = *(_OWORD *)(v15 + 16);
    __int128 v16 = *(_OWORD *)(v15 + 32);
    __int128 v18 = *(_OWORD *)v15;
    uint64_t v47 = *(void *)(v15 + 48);
    __int128 v45 = v17;
    __int128 v46 = v16;
    __int128 v44 = v18;
    Hasher.init(_seed:)(v43, *(void *)(v2 + 40));
    sub_1001E8790(&v44);
    sub_1001B98E0((uint64_t)v43);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v42 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0)
    {
LABEL_45:
      sub_1001E87D4((uint64_t)&v44);
      return;
    }

    uint64_t v41 = ~v20;
    __int128 v22 = v44;
    while (1)
    {
      uint64_t v23 = v2;
      uint64_t v24 = *(void *)(v2 + 48) + 56 * v21;
      uint64_t v25 = *(void *)(v24 + 8);
      uint64_t v26 = *(void *)(v24 + 16);
      uint64_t v27 = *(void *)(v24 + 24);
      uint64_t v28 = *(void *)(v24 + 32);
      int v29 = *(unsigned __int8 *)(v24 + 40);
      BOOL v30 = *(void **)(v24 + 48);
      BOOL v31 = *(void *)v24 == (void)v22 && v25 == *((void *)&v22 + 1);
      if (v31 || (sub_1001B1144(*(void *)v24, *(void *)(v24 + 8), v22, *((uint64_t *)&v22 + 1)) & 1) != 0)
      {
        BOOL v32 = v26 == (void)v45 && v27 == *((void *)&v45 + 1);
        if ((v32 || (sub_1001B1144(v26, v27, v45, *((uint64_t *)&v45 + 1)) & 1) != 0)
          && v28 == (void)v46
          && ((v29 ^ BYTE8(v46)) & 1) == 0)
        {
          sub_1001D8EA0(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
          uint64_t v33 = v47;
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v27);
          id v34 = v30;
          char v35 = static NSObject.== infix(_:_:)(v34, v33);

          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRelease(v25);
          if ((v35 & 1) != 0) {
            break;
          }
        }
      }

      unint64_t v21 = (v21 + 1) & v41;
      uint64_t v2 = v23;
      if (((*(void *)(v42 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
        goto LABEL_45;
      }
    }

    sub_1001E87D4((uint64_t)&v44);
    uint64_t v2 = v23;
    uint64_t v5 = v37;
    uint64_t v3 = v38;
    int64_t v9 = v36;
    unint64_t v8 = v39;
    int64_t v4 = v40;
    if (v39) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_47;
    }

    if (v11 >= v9) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    int64_t v13 = v4 + 1;
    if (!v12)
    {
      int64_t v13 = v11 + 1;
      if (v11 + 1 >= v9) {
        return;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v11 + 2;
        if (v11 + 2 >= v9) {
          return;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v11 + 3;
          if (v11 + 3 >= v9) {
            return;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_1001E79E4()
{
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_1001E7A0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1001AFF14(&qword_100448530);
  swift_arrayDestroy(v0 + 32, v1);
  uint64_t v2 = sub_1001E91E4();
  return swift_deallocClassInstance(v2, v3, v4);
}

void sub_1001E7A54()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_1001AFF14(&qword_100448548);
    uint64_t v3 = (const void *)sub_1001E909C(v2, 32 * v1);
    size_t v4 = j__malloc_size(v3);
    sub_1001E90A8(2 * ((uint64_t)(v4 - 32) / 32));
    sub_1001E7F7C(v5, v6, v7, v8);
    sub_1001E9068();
    sub_1001E9040();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1001E9024();
}

void sub_1001E7ACC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
    uint64_t v3 = (const void *)sub_1001E909C(v2, 16 * v1);
    j__malloc_size(v3);
    sub_1001E922C();
    sub_1001E90A8(v4);
    sub_1001E812C(v5, v6, v7, v8);
    sub_1001E9068();
    sub_1001E9040();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1001E9024();
}

void sub_1001E7B38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v5) {
      goto LABEL_9;
    }
    if (v5 <= 0)
    {
      char v9 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
      char v9 = (void *)sub_1001E909C(v8, 16 * v5);
      j__malloc_size(v9);
      sub_1001E922C();
      _OWORD v9[2] = v5;
      void v9[3] = v10;
    }

    if (v4 != a3)
    {
      sub_10024F680(a2 + 16 * a3, v5, (unint64_t)(v9 + 4));
LABEL_9:
      sub_1001B0F4C();
      return;
    }
  }

  __break(1u);
}

void sub_1001E7BD4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
    uint64_t v3 = (const void *)sub_1001E909C(v2, 8 * v1);
    j__malloc_size(v3);
    sub_1001E916C();
    sub_1001E90A8(v4);
    sub_1001E8598(v5, v6, v7, v8);
    sub_1001E9068();
    sub_1001E9040();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1001E9024();
}

void *sub_1001E7C40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_100448520);
  uint64_t v4 = swift_allocObject(v3, 4 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size((const void *)v4);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 4);
  uint64_t v6 = sub_1001E881C(&v9, (_DWORD *)(v4 + 32), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_1001B4B8C(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return (void *)v4;
}

void sub_1001E7D20(uint64_t a1)
{
}

void sub_1001E7D2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (!v29) {
    goto LABEL_9;
  }
  uint64_t v30 = v27;
  uint64_t v31 = sub_1001AFF14((uint64_t *)&unk_100448538);
  uint64_t v32 = *(void *)(type metadata accessor for PendingMembershipInfo(0LL) - 8);
  uint64_t v33 = *(void *)(v32 + 72);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = (v34 + 32) & ~v34;
  int64_t v36 = (void *)swift_allocObject(v31, v35 + v33 * v29, v34 | 7);
  size_t v37 = j__malloc_size(v36);
  if (v33)
  {
    BOOL v38 = v37 - v35 == 0x8000000000000000LL && v33 == -1;
    if (!v38)
    {
      uint64_t v36[2] = v29;
      void v36[3] = 2 * ((uint64_t)(v37 - v35) / v33);
      sub_1001E89B0(&a10, (uint64_t)v36 + v35, v29, v30);
      sub_1001E927C();
      sub_1001E9040();
      if (!v38) {
        __break(1u);
      }
LABEL_9:
      sub_1001E9024();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_1001E7E04(uint64_t a1)
{
}

void sub_1001E7E10(uint64_t a1)
{
}

void sub_1001E7E1C(uint64_t a1)
{
}

void sub_1001E7E28(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v4)
  {
    if (v4 <= 0)
    {
      uint64_t v6 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v6 = (void *)sub_1001E909C(v5, 8 * v4);
      j__malloc_size(v6);
      sub_1001E916C();
      v6[2] = v4;
      void v6[3] = v7;
    }

    sub_1001E927C();
    uint64_t v8 = a2(v6 + 4, v4, a1);
    a2 = v9;
    swift_bridgeObjectRelease(v8);
    __break(1u);
LABEL_8:
    uint64_t v10 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8LL;
    sub_1001E927C();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }

  sub_1001B0F4C();
}

uint64_t sub_1001E7EF8(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 applicationInfoForApplication:v4];

  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v6;
}

void *sub_1001E7F7C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    uint64_t v17 = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    uint64_t v18 = *(void *)(a4 + 56) + 24 * v12;
    uint64_t v19 = *(void *)(v18 + 16);
    __int128 v20 = *(_OWORD *)v18;
    *(void *)a2 = v17;
    *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = v20;
    *(void *)(a2 + 24) = v19;
    a2 += 32LL;
    if (v9 == a3) {
      goto LABEL_36;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0LL;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

void sub_1001E812C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a4 + 56;
  sub_1001E9100();
  if (v12 && (uint64_t v13 = v11) != 0)
  {
    if (v11 < 0)
    {
LABEL_30:
      __break(1u);
    }

    else
    {
      sub_1001E90DC();
      if (!v6) {
        goto LABEL_6;
      }
LABEL_5:
      sub_1001E91CC();
      while (1)
      {
        ++v5;
        unint64_t v16 = (void *)(*(void *)(a4 + 48) + 16 * v14);
        uint64_t v17 = v16[1];
        void *v4 = *v16;
        v4[1] = v17;
        if (v5 == v13)
        {
          swift_bridgeObjectRetain(v17);
          goto LABEL_28;
        }

        v4 += 2;
        swift_bridgeObjectRetain(v17);
        if (v6) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
          __break(1u);
          goto LABEL_30;
        }

        if (v15 >= v7) {
          goto LABEL_28;
        }
        if (!*(void *)(v10 + 8 * v15))
        {
          v8 += 2LL;
          if (v15 + 1 >= v7) {
            goto LABEL_28;
          }
          if (!*(void *)(v10 + 8 * v8))
          {
            if (v15 + 2 >= v7) {
              goto LABEL_28;
            }
            if (!*(void *)(v10 + 8 * (v15 + 2)))
            {
              uint64_t v8 = v15 + 3;
              if (v15 + 3 >= v7) {
                goto LABEL_28;
              }
              if (!*(void *)(v10 + 8 * v8))
              {
                uint64_t v18 = v15 + 4;
                if (v15 + 4 >= v7) {
                  goto LABEL_28;
                }
                if (!*(void *)(v10 + 8 * v18)) {
                  break;
                }
              }
            }
          }
        }

uint64_t *sub_1001E82B4(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = __CocoaSet.makeIterator()(v8);
    sub_1001D8EA0(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v11 = v10;
    unint64_t v12 = sub_1001E8F94();
    uint64_t result = Set.Iterator.init(_cocoa:)(v39, v9, v11, v12);
    uint64_t v4 = v39[0];
    uint64_t v13 = v39[1];
    uint64_t v14 = v39[2];
    int64_t v15 = v39[3];
    uint64_t v16 = v39[4];
  }

  else
  {
    int64_t v15 = 0LL;
    uint64_t v17 = -1LL << *(_BYTE *)(a4 + 32);
    uint64_t v13 = a4 + 56;
    uint64_t v14 = ~v17;
    uint64_t v18 = -v17;
    if (v18 < 64) {
      uint64_t v19 = ~(-1LL << v18);
    }
    else {
      uint64_t v19 = -1LL;
    }
    uint64_t v16 = v19 & *(void *)(a4 + 56);
  }

  uint64_t v35 = v7;
  if (!a2)
  {
    uint64_t v20 = 0LL;
LABEL_49:
    uint64_t *v35 = v4;
    v35[1] = v13;
    v35[2] = v14;
    v35[3] = v15;
    v35[4] = v16;
    return (uint64_t *)v20;
  }

  if (!a3)
  {
    uint64_t v20 = 0LL;
    goto LABEL_49;
  }

  if (a3 < 0) {
    goto LABEL_51;
  }
  uint64_t v20 = 0LL;
  int64_t v36 = (unint64_t)(v14 + 64) >> 6;
  uint64_t v34 = v14;
  while (1)
  {
    if (v4 < 0)
    {
      uint64_t v23 = v13;
      uint64_t v24 = __CocoaSet.Iterator.next()(result);
      if (!v24) {
        goto LABEL_48;
      }
      uint64_t v25 = v24;
      uint64_t v37 = v24;
      sub_1001D8EA0(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      uint64_t v27 = v26;
      swift_unknownObjectRetain(v25);
      sub_1001E9260((uint64_t)&v38, (uint64_t)&v37, (uint64_t)&type metadata for Swift.AnyObject + 8, v27);
      uint64_t v28 = v38;
      uint64_t result = (uint64_t *)swift_unknownObjectRelease(v25);
      uint64_t v13 = v23;
      if (!v28) {
        goto LABEL_48;
      }
      goto LABEL_30;
    }

    if (!v16) {
      break;
    }
    sub_1001E9268();
    int64_t v22 = v21 | (v15 << 6);
LABEL_29:
    uint64_t result = (uint64_t *)*(id *)(*(void *)(v4 + 48) + 8 * v22);
    uint64_t v28 = result;
    if (!result) {
      goto LABEL_48;
    }
LABEL_30:
    ++v20;
    *a2++ = v28;
    if (v20 == a3)
    {
      uint64_t v20 = a3;
LABEL_48:
      uint64_t v14 = v34;
      goto LABEL_49;
    }
  }

  int64_t v29 = v15 + 1;
  if (!__OFADD__(v15, 1LL))
  {
    if (v29 >= v36)
    {
      uint64_t v16 = 0LL;
      goto LABEL_48;
    }

    if (!*(void *)(v13 + 8 * v29))
    {
      int64_t v30 = v15 + 2;
      if (v15 + 2 >= v36)
      {
        uint64_t v16 = 0LL;
        ++v15;
        goto LABEL_48;
      }

      if (!*(void *)(v13 + 8 * v30))
      {
        if (v15 + 3 >= v36) {
          goto LABEL_45;
        }
        if (!*(void *)(v13 + 8 * (v15 + 3)))
        {
          int64_t v30 = v15 + 4;
          if (v15 + 4 >= v36)
          {
            uint64_t v16 = 0LL;
            v15 += 3LL;
            goto LABEL_48;
          }

          if (!*(void *)(v13 + 8 * v30))
          {
            if (v15 + 5 >= v36)
            {
LABEL_45:
              uint64_t v16 = 0LL;
              int64_t v15 = v30;
              goto LABEL_48;
            }

            if (!*(void *)(v13 + 8 * (v15 + 5)))
            {
              int64_t v32 = v15 + 6;
              while (v32 < v36)
              {
                if (*(void *)(v13 + 8 * v32++)) {
                  goto LABEL_28;
                }
              }

              uint64_t v16 = 0LL;
              int64_t v15 = v36 - 1;
              goto LABEL_48;
            }
          }
        }
      }
    }

void *sub_1001E8598(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void *sub_1001E8790(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)a1[6];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  id v4 = v3;
  return a1;
}

uint64_t sub_1001E87D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void *sub_1001E881C(void *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_DWORD *)(*(void *)(a4 + 48) + 4 * v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0LL;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

void sub_1001E89B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for PendingMembershipInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  int64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  int64_t v15 = (char *)&v27 - v14;
  uint64_t v32 = a4;
  uint64_t v16 = a4 + 64;
  sub_1001E9100();
  if (!a2)
  {
    int64_t v18 = 0LL;
LABEL_33:
    *a1 = v32;
    a1[1] = v16;
    a1[2] = ~v17;
    a1[3] = v18;
    a1[4] = v4;
    sub_1001B0FF8();
    return;
  }

  if (!a3)
  {
    int64_t v18 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v29 = v17;
  int64_t v30 = a1;
  int64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  int64_t v31 = (unint64_t)(63 - v17) >> 6;
  int64_t v28 = v31 - 1;
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  sub_1001E9268();
  uint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    ++v19;
    uint64_t v24 = *(void *)(v10 + 72);
    sub_1001E8D80(*(void *)(v32 + 56) + v24 * v21, (uint64_t)v13);
    sub_1001E8DC4((uint64_t)v13, (uint64_t)v15);
    sub_1001E8DC4((uint64_t)v15, a2);
    if (v19 == a3) {
      goto LABEL_32;
    }
    a2 += v24;
    if (v4) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_35;
    }

    if (v22 >= v31) {
      goto LABEL_28;
    }
    if (*(void *)(v16 + 8 * v22)) {
      goto LABEL_14;
    }
    v18 += 2LL;
    if (v22 + 1 >= v31)
    {
      uint64_t v4 = 0LL;
      int64_t v18 = v22;
      goto LABEL_32;
    }

    if (!*(void *)(v16 + 8 * v18))
    {
      if (v22 + 2 >= v31) {
        goto LABEL_28;
      }
      if (!*(void *)(v16 + 8 * (v22 + 2))) {
        break;
      }
    }

void sub_1001E8BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a4 + 64;
  sub_1001E9100();
  if (v12 && (uint64_t v13 = v11) != 0)
  {
    if (v11 < 0)
    {
LABEL_30:
      __break(1u);
    }

    else
    {
      sub_1001E90DC();
      if (!v6) {
        goto LABEL_6;
      }
LABEL_5:
      sub_1001E91CC();
      while (1)
      {
        ++v5;
        uint64_t v16 = *(void *)(*(void *)(a4 + 56) + 8 * v14);
        void *v4 = v16;
        if (v5 == v13)
        {
          swift_retain(v16);
          goto LABEL_28;
        }

        ++v4;
        swift_retain(v16);
        if (v6) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
          __break(1u);
          goto LABEL_30;
        }

        if (v15 >= v7) {
          goto LABEL_28;
        }
        if (!*(void *)(v10 + 8 * v15))
        {
          v8 += 2LL;
          if (v15 + 1 >= v7) {
            goto LABEL_28;
          }
          if (!*(void *)(v10 + 8 * v8))
          {
            if (v15 + 2 >= v7) {
              goto LABEL_28;
            }
            if (!*(void *)(v10 + 8 * (v15 + 2)))
            {
              uint64_t v8 = v15 + 3;
              if (v15 + 3 >= v7) {
                goto LABEL_28;
              }
              if (!*(void *)(v10 + 8 * v8))
              {
                uint64_t v17 = v15 + 4;
                if (v15 + 4 >= v7) {
                  goto LABEL_28;
                }
                if (!*(void *)(v10 + 8 * v17)) {
                  break;
                }
              }
            }
          }
        }

uint64_t sub_1001E8D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingMembershipInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E8DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingMembershipInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E8E08()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001E8E24(uint64_t a1)
{
  return sub_1001E525C(a1, v1);
}

uint64_t sub_1001E8E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001E8E3C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001E8E44()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  uint64_t v1 = sub_1001E91E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001E8E68()
{
  return sub_1001E554C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1001E8E70()
{
  unint64_t result = qword_100447CB0;
  if (!qword_100447CB0)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100447CB0);
  }

  return result;
}

uint64_t sub_1001E8EB0()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001E8ECC()
{
  return sub_1001E5448();
}

void sub_1001E8EEC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001E8EF8()
{
  uint64_t v1 = sub_1001B5DA8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1001E8F14(uint64_t a1)
{
}

uint64_t sub_1001E8F20()
{
  return sub_1001E8F68(1);
}

uint64_t sub_1001E8F2C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001E8F60()
{
  return sub_1001E8F68(0);
}

uint64_t sub_1001E8F68(char a1)
{
  return sub_1001E7124( *(void (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  a1);
}

void sub_1001E8F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

unint64_t sub_1001E8F94()
{
  unint64_t result = qword_100447ED0;
  if (!qword_100447ED0)
  {
    sub_1001D8EA0(255LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100447ED0);
  }

  return result;
}

  ;
}

uint64_t sub_1001E9040()
{
  return sub_1001B4B8C(v0);
}

uint64_t sub_1001E9068()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_1001E909C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7LL);
}

void sub_1001E90A8(uint64_t a1@<X8>)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1001E9114()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_1001E9144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t *)(v1 + a1);
  uint64_t v3 = *v2;
  sub_1001B5D70(*v2, v2[1]);
  return v3;
}

  ;
}

uint64_t sub_1001E9184()
{
  *uint64_t v0 = v1;
  v0[1] = v3;
  v0[2] = ~v4;
  v0[3] = v6;
  v0[4] = v5;
  return v2;
}

  ;
}

void sub_1001E91B4()
{
}

uint64_t sub_1001E91BC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

  ;
}

uint64_t sub_1001E91E4()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1001E9220()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

  ;
}

void *sub_1001E9240@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 144) = a1;
  *(void *)(v2 - 136) = v1;
  return _Block_copy((const void *)(v2 - 160));
}

  ;
}

uint64_t sub_1001E9260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

  ;
}

uint64_t sub_1001E927C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001E9284@<X0>(uint64_t a1@<X8>)
{
  return sub_1001EA9B0(v1 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_badgeCategory, a1);
}

uint64_t sub_1001E9298(uint64_t a1, void *a2)
{
  id v3 = [objc_allocWithZone(TUContactsDataProviderFetchRequest) initWithHandle:a1];
  id v4 = [a2 executeFetchRequest:v3];

  id v5 = [v4 localizedName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

void sub_1001E933C()
{
  id v0 = [(id)objc_opt_self(UNMutableNotificationSound) soundWithAlertType:1];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(TLAlertTopicIncomingCallFaceTimeGroupInvitation);
  sub_1001EAAA0(v1, v2, v0);
  qword_100448560 = (uint64_t)v0;
}

uint64_t sub_1001E939C(uint64_t a1, uint64_t a2)
{
  id v4 = sub_1001F88F0(0xD000000000000023LL, (void *)0x800000010036EA10LL);
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1001B2330();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v9 = String.init(format:_:)(v4, v6, v8);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1001E9460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1001F88F0(0xD000000000000025LL, (void *)0x800000010036E9E0LL);
  uint64_t v10 = v9;
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v13 = sub_1001B2330();
  *(void *)(v12 + 32) = a3;
  *(void *)(v12 + 40) = a4;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v13;
  *(void *)(v12 + 64) = v13;
  *(void *)(v12 + 72) = a1;
  *(void *)(v12 + 80) = a2;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  uint64_t v14 = String.init(format:_:)(v8, v10, v12);
  swift_bridgeObjectRelease(v10);
  return v14;
}

uint64_t sub_1001E9544()
{
  v9[0] = swift_getObjectType(v0);
  uint64_t v1 = sub_1001AFF14((uint64_t *)&unk_1004485C0);
  uint64_t v2 = String.init<A>(describing:)(v9, v1);
  uint64_t v4 = v3;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType)) {
    uint64_t v5 = 0x656E6F6850LL;
  }
  else {
    uint64_t v5 = 0x656D695465636146LL;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType)) {
    uint64_t v6 = (void *)0xE500000000000000LL;
  }
  else {
    uint64_t v6 = (void *)0xE800000000000000LL;
  }
  v9[0] = v2;
  v9[1] = v3;
  swift_bridgeObjectRetain(v3);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v9[0];
}

uint64_t sub_1001E9600()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_notificationType);
}

uint64_t sub_1001E9610()
{
  return swift_bridgeObjectRetain(*(void *)(v0
                                            + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_categories));
}

uint64_t sub_1001E9620(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_removeNotification);
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_1001B5D3C(v6, v7);
}

void sub_1001E967C(uint64_t a1)
{
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v3, (uint64_t)qword_100454210);
  sub_1001BA03C(a1, (uint64_t)v21);
  id v4 = v1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v4, v5, v6);
  os_log_type_t v9 = static os_log_type_t.error.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    uint64_t v10 = sub_1001B0E78(22LL);
    uint64_t v11 = (void *)sub_1001B0E78(8LL);
    uint64_t v12 = sub_1001B0E78(32LL);
    uint64_t v19 = (uint64_t)v4;
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v10 = 138412546;
    id v13 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
    *uint64_t v11 = v4;

    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    sub_1001B204C(v21, v22);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
    unint64_t v18 = v17;
    uint64_t v19 = sub_1001D7CF0(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v18);
    sub_1001B0438(v21);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v9,  "%@ does not handle response with identifier %s",  (uint8_t *)v10,  0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v11, 1LL);
    sub_1001B0E60((uint64_t)v11);
    swift_arrayDestroy(v12, 1LL);
    sub_1001B0E60(v12);
    sub_1001B0E60(v10);
  }

  else
  {

    sub_1001B0438(v21);
  }
}

void sub_1001E9894()
{
}

uint64_t sub_1001E9990()
{
  return type metadata accessor for FaceTimeNotificationProvider(0LL);
}

uint64_t type metadata accessor for FaceTimeNotificationProvider(uint64_t a1)
{
  uint64_t result = qword_1004485A8;
  if (!qword_1004485A8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FaceTimeNotificationProvider);
  }
  return result;
}

void sub_1001E99D0(uint64_t a1)
{
  v4[0] = &unk_10037BE90;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  _OWORD v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1001E9A8C(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = &unk_10037BE90;
    v4[5] = (char *)&value witness table for () + 64;
    void v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_10037BEA8;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[9] = &unk_10037BE90;
    void v4[10] = &unk_10037BE90;
    v4[11] = &unk_10037BE90;
    swift_updateClassMetadata2(a1, 256LL, 12LL, v4, a1 + 80);
  }

void sub_1001E9A8C(uint64_t a1)
{
  if (!qword_1004485B8)
  {
    uint64_t v2 = type metadata accessor for BadgeCountCategory(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1004485B8);
    }
  }

uint64_t sub_1001E9AF0(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58(a1, a2, &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_add, sub_1001D8ED8);
}

uint64_t sub_1001E9B14(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58(a1, a2, &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_replace, sub_1001D8ED8);
}

uint64_t sub_1001E9B3C(uint64_t a1, uint64_t a2)
{
  return sub_1001CDC58( a1,  a2,  &OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_updateBadgeValue,  sub_1001B5D3C);
}

void sub_1001E9B64(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a2;
  uint64_t v3 = type metadata accessor for Notification(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v70 - v8;
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_1001B0D98(v10, (uint64_t)qword_100454210);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v13 = v12(v9, a1, v3);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v13, v14, v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(12LL, -1LL);
    uint64_t v73 = v11;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v76[0] = v20;
    uint64_t v72 = a1;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v71 = v19 + 4;
    v12(v7, (uint64_t)v9, v3);
    uint64_t v21 = String.init<A>(reflecting:)(v7, v3);
    unint64_t v23 = v22;
    *(void *)&__int128 v77 = sub_1001D7CF0(v21, v22, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, (char *)&v77 + 8, v71, v19 + 12);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Handling notification %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  uint64_t v24 = Notification.userInfo.getter();
  if (!v24)
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    goto LABEL_12;
  }

  uint64_t v25 = v24;
  v75[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDIDSPendingChatKey");
  v75[1] = v26;
  AnyHashable.init<A>(_:)(v76, v75, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v76, v25, &v77);
  swift_bridgeObjectRelease(v25);
  sub_1001D8504((uint64_t)v76);
  if (!*((void *)&v78 + 1))
  {
LABEL_12:
    uint64_t v28 = sub_1001BB478((uint64_t)&v77, (uint64_t *)&unk_1004474B0);
    goto LABEL_13;
  }

  uint64_t v27 = type metadata accessor for IDSPendingChat(0LL);
  uint64_t v28 = swift_dynamicCast(v76, &v77, (char *)&type metadata for Any + 8, v27, 6LL);
  if ((v28 & 1) != 0)
  {
    int64_t v31 = *(void **)(v76[0] + OBJC_IVAR___CSDIDSPendingChat_handle);
    uint64_t v73 = v76[0];
    int v32 = *(unsigned __int8 *)(v76[0] + OBJC_IVAR___CSDIDSPendingChat_isVideo);
    id v33 = v31;
    if (v32 == 1)
    {
      uint64_t v34 = (void *)0x800000010036D1E0LL;
      uint64_t v35 = 0xD000000000000010LL;
    }

    else
    {
      uint64_t v35 = 0xD000000000000016LL;
      uint64_t v34 = (void *)0x800000010036D1A0LL;
    }

    int64_t v40 = sub_1001F88F0(v35, v34);
    uint64_t v42 = v41;
    __int128 v44 = *(uint64_t (**)(id, uint64_t))(v74
                                                + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_localizeHandleName);
    uint64_t v43 = *(void *)(v74 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_localizeHandleName + 8);
    uint64_t v45 = *(void *)(v74 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_contactsDataProvider);
    swift_retain(v43);
    uint64_t v46 = v44(v33, v45);
    uint64_t v48 = v47;
    swift_release(v43);
    id v49 = [objc_allocWithZone(UNMutableNotificationContent) init];
    sub_1001E939C(v46, v48);
    uint64_t v51 = v50;
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
    [v49 setTitle:v52];

    sub_1001E9460(v46, v48, (uint64_t)v40, v42);
    uint64_t v54 = v53;
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v42);
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    [v49 setBody:v55];

    NSString v56 = String._bridgeToObjectiveC()();
    [v49 setCategoryIdentifier:v56];

    if (qword_100446718 != -1) {
      swift_once(&qword_100446718, sub_1001E933C);
    }
    [v49 setSound:qword_100448560];
    NSString v57 = [v33 value];
    uint64_t v58 = (void *)v73;
    if (!v57)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v60 = v59;
      NSString v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v60);
    }

    [v49 setThreadIdentifier:v57];

    uint64_t v61 = v74;
    sub_1001E9544();
    sub_10024D004();
    unint64_t v62 = sub_1001EAAE8();
    uint64_t v63 = UUID.uuidString.getter(v62);
    uint64_t v65 = v64;
    id v66 = v49;
    sub_10023DB9C(v63, v65, v66, 0LL);
    int64_t v36 = v67;
    [v67 setDestinations:15];
    char v68 = *(void (**)(void *))(v61 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_add);
    if (v68)
    {
      uint64_t v69 = *(void *)(v61 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_add + 8);
      swift_retain(v69);
      v68(v36);

      sub_1001B5D3C((uint64_t)v68, v69);
    }

    else
    {

      int64_t v36 = v66;
    }

    goto LABEL_23;
  }

uint64_t sub_1001EA1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B0F00();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  __chkstk_darwin(v10);
  sub_1001B0F00();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_1001C9578();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  os_log_type_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)&v4[OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(v27, v20 + 8, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v21 + v19, v17, v14);
  *(void *)(v21 + v20) = v4;
  aBlock[4] = v28;
  uint64_t v36 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = v30;
  unint64_t v22 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v4);
  uint64_t v34 = _swiftEmptyArrayStorage;
  unint64_t v23 = sub_1001E8E70();
  uint64_t v24 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v25 = sub_1001C94D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v24, v25, v6, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v22);
  _Block_release(v22);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v9, v6);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v13, v32);
  return swift_release(v36);
}

void sub_1001EA414(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v3);
  uint64_t v60 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Notification(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v53 - v14;
  if (qword_100446950 != -1) {
    swift_once(&qword_100446950, sub_100258A88);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_1001B0D98(v16, (uint64_t)qword_100454210);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v61 = a1;
  uint64_t v19 = v18(v15, a1, v9);
  uint64_t v59 = v17;
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(12LL, -1LL);
    NSString v55 = v8;
    unint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = v6;
    uint64_t v27 = v26;
    v63[0] = v26;
    uint64_t v57 = v5;
    *(_DWORD *)unint64_t v25 = 136315138;
    uint64_t v54 = v25 + 4;
    v18(v13, (uint64_t)v15, v9);
    uint64_t v28 = String.init<A>(reflecting:)(v13, v9);
    unint64_t v30 = v29;
    *(void *)&__int128 v64 = sub_1001D7CF0(v28, v29, v63);
    uint64_t v5 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 8, v54, v25 + 12);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Handling notification %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1LL);
    uint64_t v31 = v27;
    uint64_t v6 = v56;
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v32 = v25;
    uint64_t v8 = v55;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  uint64_t v33 = Notification.userInfo.getter();
  if (!v33)
  {
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    goto LABEL_12;
  }

  uint64_t v34 = v33;
  v62[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDIDSPendingChatUUIDKey");
  v62[1] = v35;
  AnyHashable.init<A>(_:)(v63, v62, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v63, v34, &v64);
  swift_bridgeObjectRelease(v34);
  sub_1001D8504((uint64_t)v63);
  if (!*((void *)&v65 + 1))
  {
LABEL_12:
    sub_1001BB478((uint64_t)&v64, (uint64_t *)&unk_1004474B0);
    uint64_t v36 = v60;
    sub_1001A9670(v60, 1LL, 1LL, v5);
    goto LABEL_13;
  }

  uint64_t v36 = v60;
  int v37 = swift_dynamicCast(v60, &v64, (char *)&type metadata for Any + 8, v5, 6LL);
  sub_1001A9670(v36, v37 ^ 1u, 1LL, v5);
  if (sub_1001AB0AC(v36, 1LL, v5) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v36, v5);
    uint64_t v38 = v58 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_removeNotification;
    swift_beginAccess( v58 + OBJC_IVAR____TtC13callservicesd28FaceTimeNotificationProvider_removeNotification,  v63,  32LL,  0LL);
    uint64_t v39 = *(void (**)(uint64_t))v38;
    if (*(void *)v38)
    {
      int64_t v40 = v8;
      uint64_t v41 = *(void *)(v38 + 8);
      swift_endAccess(v63);
      uint64_t v42 = swift_retain(v41);
      uint64_t v43 = UUID.uuidString.getter(v42);
      uint64_t v45 = v44;
      v39(v43);
      swift_bridgeObjectRelease(v45);
      sub_1001B5D3C((uint64_t)v39, v41);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_endAccess(v63);
    }

    return;
  }

uint64_t sub_1001EA900(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_1001C9578();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v15 = v14 - v13;
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v16 = a1;
  sub_1001EA1EC(v15, a4, a5, a6);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1001EA9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_10044C3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EA9FC()
{
  return sub_1001D8E14((uint64_t (*)(unint64_t, void))sub_1001EA414);
}

uint64_t sub_1001EAA08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001EAA18(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001EAA24()
{
  uint64_t v1 = sub_1001C9578();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001EAA94()
{
  return sub_1001D8E14((uint64_t (*)(unint64_t, void))sub_1001E9B64);
}

void sub_1001EAAA0(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setAlertTopic:v5];
  sub_1001D9088(v5);
}

unint64_t sub_1001EAAE8()
{
  unint64_t result = qword_100447E78;
  if (!qword_100447E78)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___UNNotificationRequest);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100447E78);
  }

  return result;
}

uint64_t sub_1001EAB2C(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v23[0];
  uint64_t v24 = v23[1];
  int64_t v7 = v23[3];
  unint64_t v8 = v23[4];
  int64_t v9 = (unint64_t)(v23[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_15;
    }

    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v13 >= v9) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v7 + 3;
      if (v7 + 3 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v7 + 4;
      if (v7 + 4 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (v14)
      {
LABEL_13:
        int64_t v13 = v15;
      }

      else
      {
        int64_t v13 = v7 + 5;
        if (v7 + 5 >= v9) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v13);
        if (!v14)
        {
          int64_t v20 = v7 + 6;
          while (v20 < v9)
          {
            unint64_t v14 = *(void *)(v24 + 8 * v20++);
            if (v14)
            {
              int64_t v13 = v20 - 1;
              goto LABEL_14;
            }
          }

uint64_t sub_1001EACFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v21[0];
  uint64_t v19 = v21[1];
  int64_t v7 = v21[3];
  unint64_t v8 = v21[4];
  int64_t v22 = (unint64_t)(v21[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v7 << 6);
  while (1)
  {
    uint64_t v15 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    v20[0] = a2;
    v20[1] = a3;
    __chkstk_darwin(result);
    v18[2] = v20;
    swift_bridgeObjectRetain_n(v15, 2LL);
    char v16 = sub_1001EAB2C(sub_1001EE240, (uint64_t)v18, v15);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) != 0)
    {
      swift_bridgeObjectRelease(a3);
      swift_release(v6);
      return v15;
    }

    uint64_t result = swift_bridgeObjectRelease(v15);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v12 >= v22) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v22) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v19 + 8 * v14);
      if (v13) {
        goto LABEL_12;
      }
      int64_t v14 = v7 + 3;
      if (v7 + 3 >= v22) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v19 + 8 * v14);
      if (v13) {
        goto LABEL_12;
      }
      int64_t v14 = v7 + 4;
      if (v7 + 4 >= v22) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v19 + 8 * v14);
      if (v13)
      {
LABEL_12:
        int64_t v12 = v14;
      }

      else
      {
        int64_t v12 = v7 + 5;
        if (v7 + 5 >= v22) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v19 + 8 * v12);
        if (!v13)
        {
          int64_t v17 = v7 + 6;
          while (v17 < v22)
          {
            unint64_t v13 = *(void *)(v19 + 8 * v17++);
            if (v13)
            {
              int64_t v12 = v17 - 1;
              goto LABEL_13;
            }
          }

uint64_t sub_1001EAF1C()
{
  uint64_t v0 = sub_1001AFF14(&qword_100448798);
  uint64_t inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
  *(void *)(inited + 32) = 0xD00000000000001BLL;
  *(void *)(inited + 40) = 0x800000010036F4D0LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = Dictionary.init(dictionaryLiteral:)( &off_1003DCA58,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  *(void *)(inited + 56) = 0xD00000000000001ELL;
  *(void *)(inited + 64) = 0x800000010036F4F0LL;
  *(void *)(inited + 72) = Dictionary.init(dictionaryLiteral:)( &off_1003DCAF8,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  *(void *)(inited + 80) = 0xD000000000000024LL;
  *(void *)(inited + 8_Block_object_dispose(va, 8) = 0x800000010036F510LL;
  *(void *)(inited + 96) = Dictionary.init(dictionaryLiteral:)( &off_1003DCB98,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_100447B90);
  uint64_t result = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v2,  &protocol witness table for String);
  qword_1004485D0 = result;
  return result;
}

id sub_1001EB040(uint64_t a1, uint64_t a2, id a3)
{
  id result = [(id)objc_opt_self(FTServerBag) sharedInstance];
  if (result)
  {
    int64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v28, v9);
      swift_unknownObjectRelease(v9);
    }

    else
    {
      memset(v28, 0, sizeof(v28));
    }

    sub_1001B14A0((uint64_t)v28, (uint64_t)v29);
    if (v29[3])
    {
      unint64_t v10 = sub_1001B1528();
      if ((swift_dynamicCast(&v27, v29, (char *)&type metadata for Any + 8, v10, 6LL) & 1) != 0)
      {
        unint64_t v11 = v27;
        id v12 = sub_1001704C4();
        uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
        *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
        *(void *)(v14 + 56) = &type metadata for String;
        *(void *)(v14 + 64) = sub_1001B2330();
        *(void *)(v14 + 32) = a1;
        *(void *)(v14 + 40) = a2;
        *(void *)(v14 + 96) = v10;
        *(void *)(v14 + 104) = sub_1001EE198();
        *(void *)(v14 + 72) = v11;
        swift_bridgeObjectRetain(a2);
        id v15 = v11;
        uint64_t v16 = static os_log_type_t.default.getter(v15);
        os_log(_:dso:log:type:_:)( "Got %@ from server bag with a value of: %@",  42LL,  2LL,  &_mh_execute_header,  v12,  v16,  v14);

        swift_bridgeObjectRelease(v14);
        a3 = [v15 unsignedIntegerValue];

        return a3;
      }
    }

    else
    {
      sub_1001B14E8((uint64_t)v29);
    }

    id v17 = sub_1001704C4();
    uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v19 = swift_allocObject(v18, 112LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    v29[0] = a1;
    v29[1] = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = String.init<A>(reflecting:)(v29, &type metadata for String);
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    unint64_t v23 = sub_1001B2330();
    *(void *)(v19 + 64) = v23;
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    v29[0] = a3;
    uint64_t v24 = String.init<A>(reflecting:)(v29, &type metadata for UInt);
    *(void *)(v19 + 96) = &type metadata for String;
    *(void *)(v19 + 104) = v23;
    *(void *)(v19 + 72) = v24;
    *(void *)(v19 + 80) = v25;
    uint64_t v26 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:type:_:)( "Server bag does not have a value for %@, so returning the default one of %@ seconds.",  84LL,  2LL,  &_mh_execute_header,  v17,  v26,  v19);

    swift_bridgeObjectRelease(v19);
    return a3;
  }

  __break(1u);
  return result;
}

id sub_1001EB2EC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  id result = [(id)objc_opt_self(FTServerBag) sharedInstance];
  if (result)
  {
    int64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v28, v9);
      swift_unknownObjectRelease(v9);
    }

    else
    {
      memset(v28, 0, sizeof(v28));
    }

    sub_1001B14A0((uint64_t)v28, (uint64_t)v29);
    if (v29[3])
    {
      unint64_t v10 = sub_1001B1528();
      if ((swift_dynamicCast(&v27, v29, (char *)&type metadata for Any + 8, v10, 6LL) & 1) != 0)
      {
        unint64_t v11 = v27;
        id v12 = sub_1001704C4();
        uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
        *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
        *(void *)(v14 + 56) = &type metadata for String;
        *(void *)(v14 + 64) = sub_1001B2330();
        *(void *)(v14 + 32) = a1;
        *(void *)(v14 + 40) = a2;
        *(void *)(v14 + 96) = v10;
        *(void *)(v14 + 104) = sub_1001EE198();
        *(void *)(v14 + 72) = v11;
        swift_bridgeObjectRetain(a2);
        id v15 = v11;
        uint64_t v16 = static os_log_type_t.default.getter(v15);
        os_log(_:dso:log:type:_:)( "Got %@ from server bag with a value of: %@",  42LL,  2LL,  &_mh_execute_header,  v12,  v16,  v14);

        swift_bridgeObjectRelease(v14);
        a3 = [v15 BOOLValue];

        return (id)(a3 & 1);
      }
    }

    else
    {
      sub_1001B14E8((uint64_t)v29);
    }

    id v17 = sub_1001704C4();
    uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v19 = swift_allocObject(v18, 112LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    v29[0] = a1;
    v29[1] = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = String.init<A>(reflecting:)(v29, &type metadata for String);
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    unint64_t v23 = sub_1001B2330();
    *(void *)(v19 + 64) = v23;
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    LOBYTE(v29[0]) = a3 & 1;
    uint64_t v24 = String.init<A>(reflecting:)(v29, &type metadata for Bool);
    *(void *)(v19 + 96) = &type metadata for String;
    *(void *)(v19 + 104) = v23;
    *(void *)(v19 + 72) = v24;
    *(void *)(v19 + 80) = v25;
    uint64_t v26 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:type:_:)( "Server bag does not have a value for %@, so returning the default one of %@ seconds.",  84LL,  2LL,  &_mh_execute_header,  v17,  v26,  v19);

    swift_bridgeObjectRelease(v19);
    return (id)(a3 & 1);
  }

  __break(1u);
  return result;
}

id sub_1001EB59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [(id)objc_opt_self(FTServerBag) sharedInstance];
  if (result)
  {
    int64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v29, v9);
      swift_unknownObjectRelease(v9);
      sub_1001B03EC(v29, v30);
    }

    else
    {
      memset(v30, 0, sizeof(v30));
    }

    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
    uint64_t v11 = sub_1001AFF14(&qword_100448790);
    if (swift_dynamicCast(v29, v30, v10, v11, 6LL))
    {
      a3 = *(void *)&v29[0];
      id v12 = sub_1001704C4();
      uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v15 = sub_1001B2330();
      *(void *)(v14 + 64) = v15;
      *(void *)(v14 + 32) = a1;
      *(void *)(v14 + 40) = a2;
      *(void *)&v30[0] = a3;
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a3);
      uint64_t v16 = String.init<A>(reflecting:)(v30, v11);
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = v15;
      *(void *)(v14 + 72) = v16;
      *(void *)(v14 + 80) = v17;
      uint64_t v18 = static os_log_type_t.default.getter(v16);
      os_log(_:dso:log:type:_:)( "Got %@ from server bag with a value of: %@",  42LL,  2LL,  &_mh_execute_header,  v12,  v18,  v14);

      swift_bridgeObjectRelease(v14);
    }

    else
    {
      id v19 = sub_1001704C4();
      uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
      *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)&v30[0] = a1;
      *((void *)&v30[0] + 1) = a2;
      swift_bridgeObjectRetain(a2);
      uint64_t v22 = String.init<A>(reflecting:)(v30, &type metadata for String);
      uint64_t v24 = v23;
      *(void *)(v21 + 56) = &type metadata for String;
      unint64_t v25 = sub_1001B2330();
      *(void *)(v21 + 64) = v25;
      *(void *)(v21 + 32) = v22;
      *(void *)(v21 + 40) = v24;
      *(void *)&v30[0] = a3;
      swift_bridgeObjectRetain(a3);
      uint64_t v26 = String.init<A>(reflecting:)(v30, v11);
      *(void *)(v21 + 96) = &type metadata for String;
      *(void *)(v21 + 104) = v25;
      *(void *)(v21 + 72) = v26;
      *(void *)(v21 + 80) = v27;
      uint64_t v28 = static os_log_type_t.default.getter(v26);
      os_log(_:dso:log:type:_:)( "Server bag does not have a value for %@, so returning the default one of %@ seconds.",  84LL,  2LL,  &_mh_execute_header,  v19,  v28,  v21);

      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRetain(a3);
    }

    return (id)a3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1001EB844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [(id)objc_opt_self(FTServerBag) sharedInstance];
  if (result)
  {
    int64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v26, v9);
      swift_unknownObjectRelease(v9);
      sub_1001B03EC(v26, v27);
    }

    else
    {
      memset(v27, 0, sizeof(v27));
    }

    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
    if (swift_dynamicCast(v26, v27, v10, &type metadata for Int, 6LL))
    {
      a3 = *(void *)&v26[0];
      id v11 = sub_1001704C4();
      uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v13 + 56) = &type metadata for String;
      unint64_t v14 = sub_1001B2330();
      *(void *)(v13 + 64) = v14;
      *(void *)(v13 + 32) = a1;
      *(void *)(v13 + 40) = a2;
      *(void *)&v27[0] = a3;
      swift_bridgeObjectRetain(a2);
      uint64_t v15 = String.init<A>(reflecting:)(v27, &type metadata for Int);
      *(void *)(v13 + 96) = &type metadata for String;
      *(void *)(v13 + 104) = v14;
      *(void *)(v13 + 72) = v15;
      *(void *)(v13 + 80) = v16;
      uint64_t v17 = static os_log_type_t.default.getter(v15);
      os_log(_:dso:log:type:_:)( "Got %@ from server bag with a value of: %@",  42LL,  2LL,  &_mh_execute_header,  v11,  v17,  v13);
    }

    else
    {
      id v11 = sub_1001704C4();
      uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v13 = swift_allocObject(v18, 112LL, 7LL);
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)&v27[0] = a1;
      *((void *)&v27[0] + 1) = a2;
      swift_bridgeObjectRetain(a2);
      uint64_t v19 = String.init<A>(reflecting:)(v27, &type metadata for String);
      uint64_t v21 = v20;
      *(void *)(v13 + 56) = &type metadata for String;
      unint64_t v22 = sub_1001B2330();
      *(void *)(v13 + 64) = v22;
      *(void *)(v13 + 32) = v19;
      *(void *)(v13 + 40) = v21;
      *(void *)&v27[0] = a3;
      uint64_t v23 = String.init<A>(reflecting:)(v27, &type metadata for Int);
      *(void *)(v13 + 96) = &type metadata for String;
      *(void *)(v13 + 104) = v22;
      *(void *)(v13 + 72) = v23;
      *(void *)(v13 + 80) = v24;
      uint64_t v25 = static os_log_type_t.default.getter(v23);
      os_log(_:dso:log:type:_:)( "Server bag does not have a value for %@, so returning the default one of %@ seconds.",  84LL,  2LL,  &_mh_execute_header,  v11,  v25,  v13);
    }

    swift_bridgeObjectRelease(v13);
    return (id)a3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1001EBAB0(uint64_t a1, uint64_t a2, double a3)
{
  id result = [(id)objc_opt_self(FTServerBag) sharedInstance];
  if (result)
  {
    int64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v27, v9);
      swift_unknownObjectRelease(v9);
      sub_1001B03EC(v27, v28);
    }

    else
    {
      memset(v28, 0, sizeof(v28));
    }

    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
    if (swift_dynamicCast(v27, v28, v10, &type metadata for Double, 6LL))
    {
      uint64_t v11 = *(void *)&v27[0];
      id v12 = sub_1001704C4();
      uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v15 = sub_1001B2330();
      *(void *)(v14 + 64) = v15;
      *(void *)(v14 + 32) = a1;
      *(void *)(v14 + 40) = a2;
      *(void *)&v28[0] = v11;
      swift_bridgeObjectRetain(a2);
      uint64_t v16 = String.init<A>(reflecting:)(v28, &type metadata for Double);
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = v15;
      *(void *)(v14 + 72) = v16;
      *(void *)(v14 + 80) = v17;
      uint64_t v18 = static os_log_type_t.default.getter(v16);
      os_log(_:dso:log:type:_:)( "Got %@ from server bag with a value of: %@",  42LL,  2LL,  &_mh_execute_header,  v12,  v18,  v14);
    }

    else
    {
      id v12 = sub_1001704C4();
      uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v14 = swift_allocObject(v19, 112LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)&v28[0] = a1;
      *((void *)&v28[0] + 1) = a2;
      swift_bridgeObjectRetain(a2);
      uint64_t v20 = String.init<A>(reflecting:)(v28, &type metadata for String);
      uint64_t v22 = v21;
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v23 = sub_1001B2330();
      *(void *)(v14 + 64) = v23;
      *(void *)(v14 + 32) = v20;
      *(void *)(v14 + 40) = v22;
      *(double *)uint64_t v28 = a3;
      uint64_t v24 = String.init<A>(reflecting:)(v28, &type metadata for Double);
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = v23;
      *(void *)(v14 + 72) = v24;
      *(void *)(v14 + 80) = v25;
      uint64_t v26 = static os_log_type_t.default.getter(v24);
      os_log(_:dso:log:type:_:)( "Server bag does not have a value for %@, so returning the default one of %@ seconds.",  84LL,  2LL,  &_mh_execute_header,  v12,  v26,  v14);
    }

    return (id)swift_bridgeObjectRelease(v14);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1001EBD1C()
{
  id result = sub_1001EB040(0xD00000000000001CLL, 0x800000010036FB10LL, (id)0x1E);
  qword_1004485D8 = (uint64_t)result;
  return result;
}

id sub_1001EBD54()
{
  id result = sub_1001EB040(0xD00000000000001ALL, 0x800000010036FAF0LL, (id)0x1E);
  qword_1004485E0 = (uint64_t)result;
  return result;
}

id sub_1001EBD8C()
{
  id result = sub_1001EB040(0xD000000000000018LL, 0x800000010036FAD0LL, (id)2);
  qword_1004485E8 = (uint64_t)result;
  return result;
}

id sub_1001EBDC4()
{
  id result = sub_1001EB040(0xD000000000000029LL, 0x800000010036FAA0LL, (id)5);
  qword_1004485F0 = (uint64_t)result;
  return result;
}

id sub_1001EBDFC()
{
  id result = sub_1001EB040(0xD000000000000024LL, 0x800000010036FA70LL, (id)0x41);
  qword_1004485F8 = (uint64_t)result;
  return result;
}

id sub_1001EBE34()
{
  id result = sub_1001EB040(0xD00000000000002ELL, 0x800000010036FA40LL, (id)0x14);
  qword_100448600 = (uint64_t)result;
  return result;
}

id sub_1001EBE6C()
{
  id result = sub_1001EB040(0xD000000000000020LL, 0x800000010036FA10LL, (id)0xA);
  qword_100448608 = (uint64_t)result;
  return result;
}

id sub_1001EBEA4()
{
  id result = sub_1001EB040(0xD000000000000024LL, 0x800000010036F9E0LL, (id)5);
  qword_100448610 = (uint64_t)result;
  return result;
}

id sub_1001EBEDC()
{
  id result = sub_1001EB040(0xD00000000000001ALL, 0x800000010036F9A0LL, (id)0x64);
  qword_100448618 = (uint64_t)result;
  return result;
}

id sub_1001EBF14()
{
  id result = sub_1001EB040(0xD000000000000016LL, 0x800000010036F980LL, (id)0x64);
  qword_100448620 = (uint64_t)result;
  return result;
}

id sub_1001EBF4C()
{
  id result = sub_1001EB2EC(0xD000000000000013LL, 0x800000010036F960LL, 1u);
  byte_100448628 = result & 1;
  return result;
}

id sub_1001EBF88()
{
  id result = sub_1001EB2EC(0xD00000000000001DLL, 0x800000010036F9C0LL, 0);
  byte_100448629 = result & 1;
  return result;
}

id sub_1001EBFC4()
{
  id result = sub_1001EB2EC(0xD00000000000001ELL, 0x800000010036F910LL, 1u);
  byte_10044862A = result & 1;
  return result;
}

id sub_1001EC000()
{
  id result = sub_1001EB2EC(0xD00000000000002DLL, 0x800000010036F930LL, 0);
  byte_10044862B = result & 1;
  return result;
}

id sub_1001EC03C()
{
  id result = sub_1001EB2EC(0xD00000000000001FLL, 0x800000010036F8F0LL, 1u);
  byte_10044862C = result & 1;
  return result;
}

id sub_1001EC078()
{
  id result = sub_1001EB2EC(0xD00000000000002ALL, 0x800000010036F8C0LL, 1u);
  byte_10044862D = result & 1;
  return result;
}

id sub_1001EC0B4()
{
  id result = sub_1001EB2EC(0xD00000000000002CLL, 0x800000010036F890LL, 1u);
  byte_10044862E = result & 1;
  return result;
}

id sub_1001EC0F0()
{
  id result = sub_1001EB2EC(0xD000000000000025LL, 0x800000010036F860LL, 1u);
  byte_10044862F = result & 1;
  return result;
}

id sub_1001EC12C()
{
  id result = sub_1001EB2EC(0xD00000000000001FLL, 0x800000010036F840LL, 1u);
  byte_100448630 = result & 1;
  return result;
}

id sub_1001EC168()
{
  id result = sub_1001EB2EC(0xD000000000000025LL, 0x800000010036F810LL, 1u);
  byte_100448631 = result & 1;
  return result;
}

id sub_1001EC1A4()
{
  id result = sub_1001EB2EC(0xD00000000000001ALL, 0x800000010036F7F0LL, 1u);
  byte_100448632 = result & 1;
  return result;
}

id sub_1001EC1E0()
{
  id result = sub_1001EB040(0xD000000000000023LL, 0x800000010036F7C0LL, (id)5);
  qword_100448638 = (uint64_t)result;
  return result;
}

id sub_1001EC218()
{
  id result = sub_1001EB2EC(0xD00000000000001BLL, 0x800000010036F620LL, 1u);
  byte_100448640 = result & 1;
  return result;
}

id sub_1001EC254()
{
  id result = sub_1001EB040(0xD000000000000016LL, 0x800000010036F7A0LL, (id)5);
  qword_100448648 = (uint64_t)result;
  return result;
}

id sub_1001EC28C()
{
  id result = sub_1001EB040(0xD000000000000015LL, 0x800000010036F780LL, (id)0x1F4FA00);
  qword_100448650 = (uint64_t)result;
  return result;
}

id sub_1001EC2C8()
{
  id result = sub_1001EB040(0xD00000000000001ELL, 0x800000010036F6F0LL, (id)0x1F4FA00);
  qword_100448658 = (uint64_t)result;
  return result;
}

id sub_1001EC304()
{
  id result = sub_1001EB040(0xD00000000000001CLL, 0x800000010036F760LL, (id)0x1F4);
  qword_100448660 = (uint64_t)result;
  return result;
}

id sub_1001EC33C()
{
  id result = sub_1001EB040(0xD00000000000001BLL, 0x800000010036F740LL, (id)0x1F4FA00);
  qword_100448668 = (uint64_t)result;
  return result;
}

id sub_1001EC378()
{
  id result = sub_1001EB040(0xD000000000000027LL, 0x800000010036F710LL, (id)0x1F4FA00);
  qword_100448670 = (uint64_t)result;
  return result;
}

id sub_1001EC3B4()
{
  id result = sub_1001EB040(0xD000000000000019LL, 0x800000010036F6D0LL, (id)3);
  qword_100448678 = (uint64_t)result;
  return result;
}

id sub_1001EC3EC()
{
  id result = sub_1001EB040(0xD000000000000019LL, 0x800000010036F6B0LL, (id)0x100);
  qword_100448680 = (uint64_t)result;
  return result;
}

id sub_1001EC424()
{
  id result = sub_1001EB040(0xD00000000000001FLL, 0x800000010036F690LL, (id)2);
  qword_100448688 = (uint64_t)result;
  return result;
}

id sub_1001EC45C()
{
  id result = sub_1001EB040(0xD00000000000001CLL, 0x800000010036F670LL, (id)0x15180);
  qword_100448690 = (uint64_t)result;
  return result;
}

id sub_1001EC498()
{
  id result = sub_1001EB040(0xD000000000000026LL, 0x800000010036F640LL, (id)0x12C);
  qword_100448698 = (uint64_t)result;
  return result;
}

id sub_1001EC4D0()
{
  id result = sub_1001EB040(0xD000000000000022LL, 0x800000010036F5F0LL, (id)0x12C);
  qword_1004486A0 = (uint64_t)result;
  return result;
}

id sub_1001EC508()
{
  id result = sub_1001EB040(0xD000000000000026LL, 0x800000010036F5C0LL, (id)5);
  qword_1004486A8 = (uint64_t)result;
  return result;
}

uint64_t sub_1001EC540()
{
  if (qword_100446720 != -1) {
    swift_once(&qword_100446720, sub_1001EAF1C);
  }
  uint64_t v0 = qword_1004485D0;
  swift_bridgeObjectRetain(qword_1004485D0);
  id v1 = sub_1001EB59C(0xD000000000000020LL, 0x800000010036F4A0LL, v0);
  uint64_t result = swift_bridgeObjectRelease(v0);
  qword_1004486B0 = (uint64_t)v1;
  return result;
}

id sub_1001EC5C4()
{
  id result = sub_1001EB040(0xD000000000000025LL, 0x800000010036F440LL, (id)0x1388);
  qword_1004486B8 = (uint64_t)result;
  return result;
}

id sub_1001EC5FC()
{
  id result = sub_1001EB040(0xD000000000000022LL, 0x800000010036F470LL, (id)0xA);
  qword_1004486C0 = (uint64_t)result;
  return result;
}

id sub_1001EC634()
{
  id result = sub_1001EB2EC(0xD000000000000022LL, 0x800000010036F410LL, 1u);
  byte_1004486C8 = result & 1;
  return result;
}

id sub_1001EC670()
{
  id result = sub_1001EB040(0xD000000000000027LL, 0x800000010036F3E0LL, (id)4);
  qword_1004486D0 = (uint64_t)result;
  return result;
}

id sub_1001EC6A8()
{
  id result = sub_1001EB2EC(0xD000000000000025LL, 0x800000010036F3B0LL, 1u);
  byte_1004486D8 = result & 1;
  return result;
}

id sub_1001EC6E4()
{
  id result = sub_1001EB2EC(0xD000000000000014LL, 0x800000010036F390LL, 1u);
  byte_1004486D9 = result & 1;
  return result;
}

id sub_1001EC720()
{
  id result = sub_1001EB040(0xD000000000000019LL, 0x800000010036F030LL, (id)5);
  qword_1004486E0 = (uint64_t)result;
  return result;
}

uint64_t sub_1001EC758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1001B2330();
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = String.init(format:_:)(0xD00000000000001CLL, 0x800000010036F370LL, v5);
  uint64_t v8 = v7;
  LOBYTE(a1) = sub_1001EB2EC(v6, v7, 1u);
  swift_bridgeObjectRelease(v8);
  return a1 & 1;
}

id sub_1001EC804()
{
  id result = sub_1001EB040(0xD00000000000001BLL, 0x800000010036F120LL, (id)3);
  qword_1004486E8 = (uint64_t)result;
  return result;
}

id sub_1001EC83C()
{
  id result = sub_1001EB040(0xD000000000000019LL, 0x800000010036F140LL, (id)2);
  qword_1004486F0 = (uint64_t)result;
  return result;
}

id sub_1001EC874()
{
  id result = sub_1001EB040(0xD00000000000001CLL, 0x800000010036F160LL, (id)2);
  qword_1004486F8 = (uint64_t)result;
  return result;
}

id sub_1001EC8AC()
{
  id result = sub_1001EB040(0xD000000000000011LL, 0x800000010036F180LL, (id)0xF);
  qword_100448700 = (uint64_t)result;
  return result;
}

id sub_1001EC8E4()
{
  id result = sub_1001EB844(0x736F642D70696F76LL, 0xEE00746E756F632DLL, 20LL);
  qword_100448708 = (uint64_t)result;
  return result;
}

id sub_1001EC924()
{
  id result = sub_1001EB040(0xD000000000000015LL, 0x800000010036F350LL, (id)0x1E);
  qword_100448710 = (uint64_t)result;
  return result;
}

id sub_1001EC95C()
{
  id result = sub_1001EB040(0xD00000000000001ELL, 0x800000010036F330LL, (id)0x12C);
  qword_100448718 = (uint64_t)result;
  return result;
}

id sub_1001EC994()
{
  id result = sub_1001EB040(0xD00000000000001ELL, 0x800000010036F310LL, (id)1);
  qword_100448720 = (uint64_t)result;
  return result;
}

id sub_1001EC9CC()
{
  id result = sub_1001EB040(0xD000000000000013LL, 0x800000010036F1A0LL, (id)2);
  qword_100448728 = (uint64_t)result;
  return result;
}

id sub_1001ECA04()
{
  id result = sub_1001EBAB0(0xD000000000000018LL, 0x800000010036F230LL, 1.0);
  qword_100448730 = v1;
  return result;
}

id sub_1001ECA3C()
{
  id result = sub_1001EB2EC(0xD000000000000020LL, 0x800000010036F250LL, 1u);
  byte_100448738 = result & 1;
  return result;
}

uint64_t sub_1001ECAA8()
{
  return sub_1001EDF38(&qword_100446728, (uint64_t)&qword_1004485D8);
}

uint64_t sub_1001ECAF4()
{
  return sub_1001EDF38(&qword_100446730, (uint64_t)&qword_1004485E0);
}

uint64_t sub_1001ECB40()
{
  return sub_1001EDF38(&qword_100446738, (uint64_t)&qword_1004485E8);
}

uint64_t sub_1001ECB8C()
{
  return sub_1001EDF38(&qword_100446740, (uint64_t)&qword_1004485F0);
}

uint64_t sub_1001ECBD8()
{
  return sub_1001EDF38(&qword_100446748, (uint64_t)&qword_1004485F8);
}

uint64_t sub_1001ECC24()
{
  return sub_1001EDF38(&qword_100446750, (uint64_t)&qword_100448600);
}

uint64_t sub_1001ECC70()
{
  return sub_1001EDF38(&qword_100446758, (uint64_t)&qword_100448608);
}

uint64_t sub_1001ECCBC()
{
  return sub_1001EDF38(&qword_100446760, (uint64_t)&qword_100448610);
}

uint64_t sub_1001ECD08()
{
  return sub_1001EE034(&qword_100446780, (unsigned __int8 *)&byte_100448629);
}

uint64_t sub_1001ECD54()
{
  return sub_1001EDF38(&qword_100446768, (uint64_t)&qword_100448618);
}

uint64_t sub_1001ECDA0()
{
  return sub_1001EDF38(&qword_100446770, (uint64_t)&qword_100448620);
}

uint64_t sub_1001ECDEC()
{
  return sub_1001EE034(&qword_100446778, (unsigned __int8 *)&byte_100448628);
}

uint64_t sub_1001ECE38()
{
  return sub_1001EE034(&qword_100446790, (unsigned __int8 *)&byte_10044862B);
}

uint64_t sub_1001ECE84()
{
  return sub_1001EE034(&qword_100446788, (unsigned __int8 *)&byte_10044862A);
}

uint64_t sub_1001ECED0()
{
  return sub_1001EE034(&qword_100446798, (unsigned __int8 *)&byte_10044862C);
}

uint64_t sub_1001ECF1C()
{
  return sub_1001EE034(&qword_1004467A0, (unsigned __int8 *)&byte_10044862D);
}

uint64_t sub_1001ECF68()
{
  return sub_1001EE034(&qword_1004467A8, (unsigned __int8 *)&byte_10044862E);
}

uint64_t sub_1001ECFB4()
{
  return sub_1001EE034(&qword_1004467B0, (unsigned __int8 *)&byte_10044862F);
}

uint64_t sub_1001ED000()
{
  return sub_1001EE034(&qword_1004467B8, (unsigned __int8 *)&byte_100448630);
}

uint64_t sub_1001ED04C()
{
  return sub_1001EE034(&qword_1004467C0, (unsigned __int8 *)&byte_100448631);
}

uint64_t sub_1001ED098()
{
  return sub_1001EE034(&qword_1004467C8, (unsigned __int8 *)&byte_100448632);
}

uint64_t sub_1001ED0E4()
{
  return sub_1001EDF38(&qword_1004467D0, (uint64_t)&qword_100448638);
}

uint64_t sub_1001ED130()
{
  return sub_1001EDF38(&qword_1004467E0, (uint64_t)&qword_100448648);
}

uint64_t sub_1001ED17C()
{
  return sub_1001EDF38(&qword_1004467E8, (uint64_t)&qword_100448650);
}

uint64_t sub_1001ED1C8()
{
  return sub_1001EDF38(&qword_1004467F8, (uint64_t)&qword_100448660);
}

uint64_t sub_1001ED214()
{
  return sub_1001EDF38(&qword_100446800, (uint64_t)&qword_100448668);
}

uint64_t sub_1001ED260()
{
  return sub_1001EDF38(&qword_100446808, (uint64_t)&qword_100448670);
}

uint64_t sub_1001ED2AC()
{
  return sub_1001EDF38(&qword_1004467F0, (uint64_t)&qword_100448658);
}

uint64_t sub_1001ED2F8()
{
  return sub_1001EDF38(&qword_100446810, (uint64_t)&qword_100448678);
}

uint64_t sub_1001ED344()
{
  return sub_1001EDF38(&qword_100446818, (uint64_t)&qword_100448680);
}

uint64_t sub_1001ED390()
{
  return sub_1001EDF38(&qword_100446820, (uint64_t)&qword_100448688);
}

uint64_t sub_1001ED3DC()
{
  return sub_1001EDF38(&qword_100446828, (uint64_t)&qword_100448690);
}

uint64_t sub_1001ED428()
{
  return sub_1001EDF38(&qword_100446830, (uint64_t)&qword_100448698);
}

uint64_t sub_1001ED474()
{
  return sub_1001EE034(&qword_1004467D8, (unsigned __int8 *)&byte_100448640);
}

uint64_t sub_1001ED4C0()
{
  return sub_1001EDF38(&qword_100446838, (uint64_t)&qword_1004486A0);
}

uint64_t sub_1001ED50C()
{
  return sub_1001EDF38(&qword_100446840, (uint64_t)&qword_1004486A8);
}

uint64_t sub_1001ED58C()
{
  if (qword_100446848 != -1) {
    swift_once(&qword_100446848, sub_1001EC540);
  }
  return swift_bridgeObjectRetain(qword_1004486B0);
}

uint64_t sub_1001ED5CC(uint64_t a1, uint64_t a2)
{
  if (qword_100446848 != -1) {
    swift_once(&qword_100446848, sub_1001EC540);
  }
  uint64_t v4 = qword_1004486B0;
  swift_bridgeObjectRetain(qword_1004486B0);
  sub_1001EE280();
  uint64_t v5 = sub_1001C9FB8(a1, a2, v4);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v4);
  if (v5)
  {
    sub_1001CA18C(1397716596LL, 0xE400000000000000LL, v5);
    uint64_t v7 = v6;
    if (v8)
    {
      sub_1001EE274();
    }

    else
    {
      uint64_t v17 = sub_1001EE25C();
      sub_1001CA18C(v17, v18, v5);
      uint64_t v20 = v19;
      sub_1001EE274();
      if (a2)
      {
        id v21 = sub_1001704C4();
        uint64_t v22 = static os_log_type_t.default.getter(v21);
        os_log(_:dso:log:type:_:)( "No bundleID specified, but fallback is specified",  48LL,  2LL,  &_mh_execute_header,  v21,  v22,  _swiftEmptyArrayStorage);

        return v20;
      }
    }
  }

  else
  {
    id v9 = sub_1001704C4();
    uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    *(void *)(v11 + 56) = &type metadata for String;
    unint64_t v12 = sub_1001B2330();
    *(void *)(v11 + 64) = v12;
    *(void *)(v11 + 32) = a1;
    *(void *)(v11 + 40) = a2;
    uint64_t v24 = qword_1004486B0;
    sub_1001EE280();
    sub_1001E927C();
    uint64_t v13 = sub_1001AFF14(&qword_100448790);
    uint64_t v14 = String.init<A>(reflecting:)(&v24, v13);
    *(void *)(v11 + 96) = &type metadata for String;
    *(void *)(v11 + 104) = v12;
    *(void *)(v11 + 72) = v14;
    *(void *)(v11 + 80) = v15;
    uint64_t v16 = static os_log_type_t.default.getter(v14);
    os_log(_:dso:log:type:_:)( "Couldn't find bundleID %@ in activityIdentifierMap %@",  53LL,  2LL,  &_mh_execute_header,  v9,  v16,  v11);

    swift_bridgeObjectRelease(v11);
    return 0LL;
  }

  return v7;
}

uint64_t sub_1001ED878()
{
  return sub_1001EDF38(&qword_100446880, (uint64_t)&qword_1004486E0);
}

uint64_t sub_1001ED894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusDaemonBundleID);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusDaemonBundleID + 8);
  BOOL v5 = v3 == a1 && v4 == a2;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v4, 0LL) & 1) != 0)
  {
    uint64_t v8 = *(void *)(v2 + OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusAppBundleID);
    sub_1001E927C();
  }

  else
  {
    if (qword_100446848 != -1) {
      swift_once(&qword_100446848, sub_1001EC540);
    }
    uint64_t v10 = qword_1004486B0;
    sub_1001EE280();
    uint64_t v11 = sub_1001E927C();
    uint64_t v12 = sub_1001EACFC(v11, a1, a2);
    swift_bridgeObjectRelease(v10);
    if (v12)
    {
      uint64_t v13 = sub_1001EE25C();
      sub_1001CA18C(v13, v14, v12);
      if (!v16) {
        sub_1001CA18C(5459817LL, 0xE300000000000000LL, v12);
      }
      uint64_t v8 = v15;
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      return 0LL;
    }
  }

  return v8;
}

uint64_t sub_1001EDA5C()
{
  return sub_1001EDF38(&qword_100446858, (uint64_t)&qword_1004486C0);
}

uint64_t sub_1001EDAA8()
{
  return sub_1001EDF38(&qword_100446850, (uint64_t)&qword_1004486B8);
}

uint64_t sub_1001EDAF4()
{
  return sub_1001EE034(&qword_100446860, (unsigned __int8 *)&byte_1004486C8);
}

uint64_t sub_1001EDB40()
{
  return sub_1001EDF38(&qword_100446868, (uint64_t)&qword_1004486D0);
}

uint64_t sub_1001EDB8C()
{
  return sub_1001EE034(&qword_100446870, (unsigned __int8 *)&byte_1004486D8);
}

uint64_t sub_1001EDBD8()
{
  return sub_1001EE034(&qword_100446878, (unsigned __int8 *)&byte_1004486D9);
}

uint64_t sub_1001EDBF4(uint64_t a1, uint64_t a2)
{
  return sub_1001EC758(a1, a2) & 1;
}

uint64_t sub_1001EDCBC()
{
  return sub_1001EDF38(&qword_100446888, (uint64_t)&qword_1004486E8);
}

uint64_t sub_1001EDD08()
{
  return sub_1001EDF38(&qword_100446890, (uint64_t)&qword_1004486F0);
}

uint64_t sub_1001EDD54()
{
  return sub_1001EDF38(&qword_100446898, (uint64_t)&qword_1004486F8);
}

uint64_t sub_1001EDDA0()
{
  return sub_1001EDF38(&qword_1004468A0, (uint64_t)&qword_100448700);
}

uint64_t sub_1001EDDEC()
{
  return sub_1001EDF38(&qword_1004468C8, (uint64_t)&qword_100448728);
}

uint64_t sub_1001EDE38()
{
  return sub_1001EDF38(&qword_1004468A8, (uint64_t)&qword_100448708);
}

uint64_t sub_1001EDE84()
{
  return sub_1001EDF38(&qword_1004468B0, (uint64_t)&qword_100448710);
}

uint64_t sub_1001EDED0()
{
  return sub_1001EDF38(&qword_1004468B8, (uint64_t)&qword_100448718);
}

uint64_t sub_1001EDF1C()
{
  return sub_1001EDF38(&qword_1004468C0, (uint64_t)&qword_100448720);
}

uint64_t sub_1001EDF38(void *a1, uint64_t a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return *(void *)a2;
}

double sub_1001EDFA8()
{
  if (qword_1004468D0 != -1) {
    swift_once(&qword_1004468D0, sub_1001ECA04);
  }
  return *(double *)&qword_100448730;
}

uint64_t sub_1001EE018()
{
  return sub_1001EE034(&qword_1004468D8, (unsigned __int8 *)&byte_100448738);
}

uint64_t sub_1001EE034(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return *a2;
}

id sub_1001EE06C()
{
  uint64_t v1 = &v0[OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusAppBundleID];
  *(void *)uint64_t v1 = 0xD000000000000011LL;
  *((void *)v1 + 1) = 0x800000010036FB30LL;
  uint64_t v2 = &v0[OBJC_IVAR___CSDSharedConversationServerBag_fitnessPlusDaemonBundleID];
  *(void *)uint64_t v2 = 0xD00000000000001ALL;
  *((void *)v2 + 1) = 0x800000010036FB50LL;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SharedConversationServerBag();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_1001EE108()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedConversationServerBag();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SharedConversationServerBag()
{
  return objc_opt_self(&OBJC_CLASS___CSDSharedConversationServerBag);
}

unint64_t sub_1001EE198()
{
  unint64_t result = qword_100448788;
  if (!qword_100448788)
  {
    unint64_t v1 = sub_1001B1528();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100448788);
  }

  return result;
}

uint64_t sub_1001EE1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1;
  }
}

uint64_t sub_1001EE218(uint64_t *a1, uint64_t *a2)
{
  return sub_1001EE1D8(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_1001EE240(uint64_t *a1)
{
  return sub_1001EE218(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_1001EE25C()
{
  return 0x6B6361626C6C6166LL;
}

uint64_t sub_1001EE274()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001EE280()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001EE288@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v29 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int64_t v34 = v7;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = *(void *)(a1 + 48) + 56 * i;
    uint64_t v16 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 24);
    uint64_t v30 = *(void *)(v14 + 32);
    uint64_t v31 = *(void *)(v14 + 16);
    uint64_t v18 = *(unsigned __int8 *)(v14 + 40);
    uint64_t v19 = *(void **)(v14 + 48);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    id v20 = v19;
    id v21 = [a2 uniqueIdentifier];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    if (v16 == v22 && v15 == v24)
    {

      swift_release(a1);
      uint64_t result = swift_bridgeObjectRelease(v15);
LABEL_29:
      *a3 = v16;
      a3[1] = v15;
      a3[2] = v31;
      a3[3] = v17;
      a3[4] = v30;
      a3[5] = v18;
      a3[6] = v20;
      return result;
    }

    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v22, v24, 0LL);
    swift_bridgeObjectRelease(v24);
    if ((v26 & 1) != 0)
    {

      uint64_t result = swift_release(a1);
      goto LABEL_29;
    }

    swift_bridgeObjectRelease(v17);
    uint64_t result = swift_bridgeObjectRelease(v15);
    int64_t v7 = v34;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v10 >= v29) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v28 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v29) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v28 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v29) {
          goto LABEL_30;
        }
        unint64_t v11 = *(void *)(v28 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v7 + 4;
          if (v7 + 4 >= v29) {
            goto LABEL_30;
          }
          unint64_t v11 = *(void *)(v28 + 8 * v12);
          if (!v11)
          {
            uint64_t v13 = v7 + 5;
            if (v7 + 5 >= v29)
            {
LABEL_30:

              uint64_t result = swift_release(a1);
              a3[6] = 0LL;
              *((_OWORD *)a3 + 1) = 0u;
              *((_OWORD *)a3 + 2) = 0u;
              *(_OWORD *)a3 = 0u;
              return result;
            }

            unint64_t v11 = *(void *)(v28 + 8 * v13);
            int64_t v12 = v7 + 5;
            if (!v11) {
              break;
            }
          }
        }
      }
    }

void sub_1001EE540()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 deviceWithUniqueID:v1];

  if (v2)
  {
    id v3 = [(id)objc_opt_self(IDSDestination) destinationWithDevice:v2];
  }

  sub_10010B978();
}

void sub_1001EE5C0()
{
}

uint64_t sub_1001EE5E0(uint64_t a1)
{
  v2[0] = &unk_10037BF90;
  v2[1] = (char *)&value witness table for () + 64;
  v2[2] = (char *)&value witness table for () + 64;
  v2[3] = (char *)&value witness table for () + 64;
  v2[4] = (char *)&value witness table for () + 64;
  v2[5] = (char *)&value witness table for () + 64;
  v2[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[7] = &unk_10037BFA8;
  _BYTE v2[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v2[9] = &unk_10037BFC0;
  v2[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[12] = &unk_10037BFD8;
  v2[13] = &unk_10037BFF0;
  v2[14] = &unk_10037BFF0;
  return swift_initClassMetadata2(a1, 0LL, 15LL, v2, a1 + 96);
}

uint64_t sub_1001EE680()
{
  uint64_t v43 = v3;
  uint64_t v44 = v4;
  sub_1001B1098();
  sub_1001F0DCC();
  __chkstk_darwin(v5);
  sub_1001B0EA0();
  uint64_t v6 = *(void **)(v0 + qword_1004487D0);
  void *v1 = v6;
  sub_1001B10D8(v7, enum case for DispatchPredicate.onQueue(_:));
  id v8 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v1);
  uint64_t result = sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v6 & 1) != 0)
  {
    uint64_t v10 = *(void *)(v0 + qword_1004487F8);
    uint64_t v11 = *(void *)(v10 + 16);
    int64_t v12 = _swiftEmptyArrayStorage;
    if (!v11) {
      return (uint64_t)v12;
    }
    uint64_t v42 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v10);
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    uint64_t result = sub_100250EEC(v10);
    uint64_t v14 = result;
    char v16 = v15 & 1;
    uint64_t v37 = v10 + 56;
    uint64_t v36 = v10;
    while ((v14 & 0x8000000000000000LL) == 0 && v14 < 1LL << *(_BYTE *)(v10 + 32))
    {
      if (*(_DWORD *)(v10 + 36) != (_DWORD)v13) {
        goto LABEL_13;
      }
      uint64_t v17 = *(void *)(v10 + 48) + 56 * v14;
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *(void *)(v17 + 8);
      uint64_t v21 = *(void *)(v17 + 16);
      uint64_t v20 = *(void *)(v17 + 24);
      uint64_t v22 = *(void *)(v17 + 32);
      uint64_t v23 = *(unsigned __int8 *)(v17 + 40);
      uint64_t v24 = *(void **)(v17 + 48);
      uint64_t v39 = v13;
      char v38 = v16;
      id v25 = objc_allocWithZone(&OBJC_CLASS___TUMutableRoute);
      swift_bridgeObjectRetain_n(v19, 2LL);
      swift_bridgeObjectRetain_n(v20, 2LL);
      id v26 = v24;
      id v27 = sub_1001F0BF4(v18, v19, v21, v20);
      [v27 setDeviceType:v22];
      [v27 setSupportsRelay:1];
      [v27 setCurrentlyPicked:v23];
      id v28 = sub_1001DCF70((uint64_t)objc_msgSend(v27, "setGuest:", objc_msgSend(v26, "isGuest")), "copy");
      _bridgeAnyObjectToAny(_:)(v41, v28);

      swift_unknownObjectRelease(v28);
      uint64_t v29 = sub_1001B4B94(0LL, (unint64_t *)&qword_10044CAD0, &OBJC_CLASS___TURoute_ptr);
      swift_dynamicCast(&v40, v41, (char *)&type metadata for Any + 8, v29, 7LL);
      uint64_t v30 = v40;

      sub_1001E43E0();
      uint64_t v31 = swift_bridgeObjectRelease(v19);
      ((void (*)(uint64_t))specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique())(v31);
      uint64_t v32 = v42[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
      uint64_t v33 = v30;
      uint64_t v10 = v36;
      uint64_t v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v33);
      specialized ContiguousArray._endMutation()(v34);
      uint64_t result = sub_100250B3C(v14, v39, v38 & 1, v36);
      uint64_t v14 = result;
      char v16 = v35 & 1;
      if (!--v11)
      {
        sub_1001D8CA0(result, v13, v16);
        int64_t v12 = v42;
        swift_bridgeObjectRelease(v36);
        return (uint64_t)v12;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001EE958(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_1004487A0);
  uint64_t v4 = *(void *)(v2 + qword_1004487A0);
  uint64_t v5 = *(void *)(v2 + qword_1004487A0 + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

uint64_t sub_1001EE978(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + qword_1004487F8);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  sub_1001E76C8(v4, a1);
  LOBYTE(a1) = v5;
  uint64_t result = swift_bridgeObjectRelease(v3);
  if ((a1 & 1) == 0)
  {
    uint64_t v7 = *(void (**)(uint64_t))(v1 + qword_1004487A0);
    if (v7)
    {
      uint64_t v8 = *(void *)(v1 + qword_1004487A0 + 8);
      uint64_t v9 = swift_retain(v8);
      v7(v9);
      return sub_1001B5D3C((uint64_t)v7, v8);
    }
  }

  return result;
}

uint64_t sub_1001EEA04(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_1004487F8);
  *(void *)(v1 + qword_1004487F_Block_object_dispose(va, 8) = a1;
  sub_1001EE978(v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_1001EEA38()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001C7360();
  uint64_t v3 = sub_1001C72E0(v2);
  __chkstk_darwin(v3);
  sub_1001C7290();
  sub_1001E20A0();
  __chkstk_darwin(v4);
  sub_1001B10F0();
  id v5 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v6 = [v5 queue];

  uint64_t v7 = sub_1001DEA68((uint64_t)&unk_1003E0270);
  __int128 v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(v1 + 32);
  *(void *)(v7 + 64) = *(void *)(v1 + 48);
  uint64_t v9 = sub_1001E2064((uint64_t)sub_1002356BC);
  sub_1001E8790((void *)v1);
  sub_1001C7348();
  sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
  sub_1001C7340();
  uint64_t v11 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v10, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1001F0D78(v11);
  sub_1001F0D98();
  _Block_release(v9);

  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  sub_1001E2070();
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_1001EEB94(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  [v2 pushHostedCallsToDestination:*(void *)(a1 + 48)];
}

void sub_1001EEBF0()
{
  uint64_t v0 = sub_1001C7360();
  uint64_t v1 = sub_1001C72E0(v0);
  __chkstk_darwin(v1);
  sub_1001C7290();
  sub_1001E20A0();
  __chkstk_darwin(v2);
  sub_1001B10F0();
  id v3 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v4 = [v3 queue];

  id v5 = sub_1001E2064((uint64_t)sub_1002356BC);
  sub_1001C7348();
  sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
  sub_1001C7340();
  uint64_t v7 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v6, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1001F0D78(v7);
  sub_1001F0D98();
  _Block_release(v5);

  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_1001E2070();
  sub_1001B0FF8();
}

void sub_1001EED18()
{
  id v0 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  [v0 pullRelayingCallsFromClient];
}

id sub_1001EED64()
{
  return [(id)objc_opt_self(TUCallCapabilities) supportsPrimaryCalling];
}

BOOL sub_1001EED8C(uint64_t a1)
{
  uint64_t v1 = sub_1001B4C00(a1, &qword_1004488E8, off_1003D5E10);
  id v2 = [(id)swift_getObjCClassFromMetadata(v1) sharedInstance];
  id v3 = [v2 service];

  id v5 = sub_1001DCF70(v4, "iCloudAccount");
  if (v5) {

  }
  return v5 != 0LL;
}

void sub_1001EEE1C(uint64_t a1)
{
  uint64_t v1 = sub_1001B4C00(a1, &qword_1004488E8, off_1003D5E10);
  id v2 = [(id)swift_getObjCClassFromMetadata(v1) sharedInstance];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 deviceWithUniqueID:v3];

  sub_10010B978();
}

void sub_1001EEEA8()
{
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v160 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v161 = v2;
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness(0LL, v2, v160, &unk_1003B8D04, &unk_1003B8D14);
  uint64_t v4 = *(AssociatedTypeWitness - 1);
  uint64_t v5 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v150 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v157 = (char *)&v138 - v8;
  uint64_t v148 = v9;
  __chkstk_darwin(v7);
  uint64_t v159 = (char *)&v138 - v10;
  uint64_t v11 = sub_1001B1098();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001D91F4();
  unint64_t v162 = v0;
  uint64_t v13 = *(void **)((char *)v0 + qword_1004487D0);
  void *v1 = v13;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v11);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v1, v11);
  if ((v13 & 1) == 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  if (qword_1004468F0 != -1) {
LABEL_89:
  }
    swift_once(&qword_1004468F0, sub_100208418);
  uint64_t v15 = qword_100454018;
  uint64_t v156 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v16 = sub_1001DEA68(v156);
  __int128 v154 = xmmword_10037B290;
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v17 = v162;
  v181[0] = sub_100284638(v16);
  uint64_t v18 = type metadata accessor for Array(0LL, AssociatedTypeWitness);
  uint64_t v19 = sub_1001F8884((uint64_t)v181, v18);
  uint64_t v21 = v20;
  sub_1001AA9C8();
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v22 = sub_1001B2330();
  unint64_t v155 = v22;
  *(void *)(v16 + 64) = v22;
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v21;
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)( "Updating nearby device routes using devices: %@",  47LL,  2LL,  &_mh_execute_header,  v15,  v23,  v16);
  sub_1001E43E0();
  uint64_t v164 = &_swiftEmptySetSingleton;
  uint64_t v24 = *(uint64_t (**)(uint64_t))((char *)v17 + qword_1004487B8);
  uint64_t v25 = sub_1001D8F58();
  unsigned __int8 v26 = v24(v25);
  sub_1001F0E44();
  id v28 = *(uint64_t (**)(uint64_t))((char *)v17 + qword_1004487C0);
  uint64_t v27 = *(void *)((char *)v17 + qword_1004487C0 + 8);
  uint64_t v29 = swift_retain(v27);
  char v30 = v28(v29);
  uint64_t v31 = swift_release(v27);
  char v32 = *((_BYTE *)v17 + qword_100448810) ^ 1;
  char v33 = v26 ^ 1;
  uint64_t v34 = &selRef_payload;
  if ((v32 & 1) == 0 && ((v26 ^ 1) & 1) == 0 && (v30 & 1) != 0)
  {
    uint64_t v35 = sub_100284638(v31);
    uint64_t v36 = Array.startIndex.getter(v35, AssociatedTypeWitness);
    v166[0] = v36;
    uint64_t v37 = sub_1001F0E14();
    uint64_t v38 = (uint64_t)v157;
    if (v36 == v37)
    {
LABEL_7:
      swift_bridgeObjectRelease(v35);
      uint64_t v34 = &selRef_payload;
      goto LABEL_9;
    }

    uint64_t v158 = qword_100448808;
    uint64_t v152 = (char *)v162 + qword_1004487C8;
    uint64_t v153 = v4;
    uint64_t v149 = (uint64_t)v162 + qword_1004487E8;
    uint64_t v147 = qword_100448800;
    while (1)
    {
      BOOL IsNativeType = Array._hoistableIsNativeTypeChecked()();
      uint64_t v61 = Array._checkSubscript(_:wasNativeTypeChecked:)(v36, IsNativeType, v35, AssociatedTypeWitness);
      if (IsNativeType)
      {
        unint64_t v62 = *(void (**)(char *, uint64_t, void *))(v4 + 16);
        sub_1001F0DBC( v61,  v35 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
        + *(void *)(v4 + 72) * v36);
      }

      else
      {
        uint64_t v131 = _ArrayBuffer._getElementSlowPath(_:)(v36, v35, AssociatedTypeWitness);
        if (v148 != 8) {
          goto LABEL_91;
        }
        uint64_t v132 = v131;
        v178[0] = v131;
        unint64_t v62 = *(void (**)(char *, uint64_t, void *))(v4 + 16);
        sub_1001F0DBC(v131, (uint64_t)v178);
        swift_unknownObjectRelease(v132);
      }

      swift_bridgeObjectRetain(v35);
      Array.formIndex(after:)(v166);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(uint64_t, BOOL, void *))(v4 + 32))(v38, IsNativeType, AssociatedTypeWitness);
      int v63 = *((unsigned __int8 *)v162 + v158);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v161,  v160,  AssociatedTypeWitness,  &unk_1003B8D04,  &unk_1003B8D0C);
      uint64_t v65 = v38;
      if (v63 != 1) {
        goto LABEL_43;
      }
      uint64_t v66 = sub_1001F0E4C();
      uint64_t v68 = v67(v66);
      if (!v69) {
        goto LABEL_48;
      }
      uint64_t v70 = v68;
      uint64_t v71 = v69;
      uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))v152;
      uint64_t v72 = *((void *)v152 + 1);
      swift_retain(v72);
      uint64_t v74 = v73(v70, v71);
      uint64_t v4 = v153;
      char v75 = (void *)v74;
      sub_1001B0F5C();
      swift_release(v72);
      if (!v75) {
        goto LABEL_48;
      }
      unsigned __int8 v76 = [v75 canReceiveRelayedGFTCalls];

      if ((v76 & 1) != 0)
      {
LABEL_43:
        uint64_t v77 = sub_1001F0E4C();
        uint64_t v151 = v78;
        uint64_t v79 = v78(v77);
        if (v80)
        {
          uint64_t v81 = v79;
          uint64_t v82 = v80;
          id v84 = *(uint64_t (**)(uint64_t, uint64_t))v152;
          uint64_t v83 = *((void *)v152 + 1);
          swift_retain(v83);
          uint64_t v85 = v84(v81, v82);
          uint64_t v4 = v153;
          uint64_t v86 = (void *)v85;
          sub_1001B0F5C();
          swift_release(v83);
          if (v86)
          {
            unsigned __int8 v87 = [v86 canReceiveRelayedCalls];

            if ((v87 & 1) == 0) {
              goto LABEL_79;
            }
          }
        }

        uint64_t v88 = sub_1001F0E4C();
        uint64_t v38 = (uint64_t)v157;
        if ((sub_1001B9D34(v88, v89) & 1) != 0)
        {
          uint64_t v90 = sub_1001DEA68(v156);
          *(_OWORD *)(v90 + swift_unknownObjectWeakDestroy(v0 + 16) = v154;
          uint64_t v91 = sub_1001F0E3C(v38);
          uint64_t v93 = sub_1001F0DFC(v91, v92);
          sub_1001F0DB0((uint64_t)"filtering out device: %@", 24LL, 2LL, (uint64_t)&_mh_execute_header, v94, v93);
          sub_1001B2428();
LABEL_53:
          id v107 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
LABEL_80:
          sub_1001F0E34(v38, v107);
          goto LABEL_81;
        }

        sub_1001BA03C(v149, (uint64_t)v178);
        id v100 = sub_1001F071C(v178, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness);
        sub_1001B0438(v178);
        if (!v100) {
          goto LABEL_53;
        }
        v62(v150, v38, AssociatedTypeWitness);
        id v101 = v100;
        sub_1001B9E24(v101, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v165);
        uint64_t v102 = sub_1001BA1B0((uint64_t)v165, (uint64_t)&v170);
        uint64_t v104 = v38;
        uint64_t v105 = v171;
        if (v171)
        {
          uint64_t v106 = v173;
          char v177 = v175;
          if (v174 == 13)
          {

            sub_1001F0C78((uint64_t)v165);
LABEL_79:
            id v107 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
            uint64_t v38 = (uint64_t)v157;
            goto LABEL_80;
          }

          uint64_t v143 = v170;
          uint64_t v144 = v172;
          uint64_t v145 = v174;
          id v146 = v101;
          id v112 = v176;
          if (!*(void *)((char *)v162 + v147))
          {
            id v123 = v176;
            sub_1001B9234();
            sub_1001C7478();
            goto LABEL_71;
          }

          id v142 = v176;
          sub_1001B9234();
          uint64_t v113 = sub_1001C7478();
          uint64_t v114 = (uint64_t (*)(uint64_t))sub_1001DCF70(v113, "remoteDevice");
          if (!v114)
          {
LABEL_71:
            char v125 = v177;
            id v126 = *(void **)((char *)v162 + v147);
            if (v126 && (id v127 = [v126 remoteDestination]) != 0)
            {
              id v128 = v127;
              sub_1001B4B94(0LL, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
              char v129 = static NSObject.== infix(_:_:)(v112, v128);

              v125 |= v129;
            }

            else
            {
            }

            goto LABEL_78;
          }

          uint64_t v141 = v106;
          uint64_t v115 = v114;
          uint64_t v116 = sub_1001F0E4C();
          uint64_t v139 = v151(v116);
          uint64_t v118 = v117;
          uint64_t v151 = v115;
          id v119 = sub_1001F0E20(v139, "uniqueIDOverride");
          if (v119)
          {
            os_log_type_t v120 = v119;
            uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
            uint64_t v140 = v121;

            if (v118)
            {
              uint64_t v106 = v141;
              if (v140)
              {
                if (v139 != v138 || v118 != v140)
                {
                  LODWORD(v139) = _stringCompareWithSmolCheck(_:_:expecting:)(v139, v118, v138, v140, 0LL);
                  sub_1001AA9C8();
                  sub_1001D9020();
                  sub_1001F0E0C();
                  if ((v139 & 1) != 0)
                  {
LABEL_77:

                    char v125 = 1;
LABEL_78:
                    v181[0] = v143;
                    v181[1] = v105;
                    v181[2] = v144;
                    v181[3] = v106;
                    v181[4] = v145;
                    char v182 = v125 & 1;
                    id v183 = v112;
                    sub_10024AC78();

                    unint64_t v130 = v180;
                    sub_1001E43E0();
                    sub_1001B0F5C();

                    sub_1001B2428();
                    sub_1001AA9C8();
                    goto LABEL_79;
                  }

                  goto LABEL_71;
                }

                sub_1001AA9C8();
                sub_1001D9020();
LABEL_76:
                sub_1001F0E0C();
                goto LABEL_77;
              }

uint64_t sub_1001EFA48(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = swift_errorRetain(result);
    if (qword_1004468F0 != -1) {
      uint64_t v2 = swift_once(&qword_1004468F0, sub_100208418);
    }
    static os_log_type_t.error.getter(v2, v3);
    uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v5 = sub_1001DEA68(v4);
    *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    uint64_t v10 = v1;
    swift_errorRetain(v1);
    uint64_t v6 = sub_1001AFF14(&qword_100447B70);
    uint64_t v7 = String.init<A>(reflecting:)(&v10, v6);
    uint64_t v9 = v8;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1001B2330();
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v9;
    sub_1001F0DDC((uint64_t)"Error activating companion link client: %@", 42LL, 2LL, (uint64_t)&_mh_execute_header);
    sub_1001B0F5C();
    return swift_errorRelease(v1);
  }

  return result;
}

void sub_1001EFB48()
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_1001C7360();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_1001C7290();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001B10F0();
  id v10 = sub_1001F0E20(v9, "relayClientTransport");
  uint64_t v24 = v7;
  uint64_t v25 = v6;
  if (v4)
  {
    id v11 = v4;
    if ([v11 isHostedOnCurrentDevice]
      && (id v12 = [v11 hasRelaySupport:2], (_DWORD)v12))
    {
      id v13 = sub_1001F0E20((uint64_t)v12, "provider");
      unsigned __int8 v14 = [v13 isSystemProvider];
    }

    else
    {
      unsigned __int8 v14 = 0;
    }

    unsigned __int8 v15 = [v11 needsConversationOrVideoRelaySupport];
  }

  else
  {
    unsigned __int8 v15 = 0;
    unsigned __int8 v14 = 0;
  }

  uint64_t v16 = sub_1001C7370((uint64_t)&unk_1003E01F8, 40LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(_BYTE *)(v16 + 24) = v14;
  *(_BYTE *)(v16 + 25) = v15;
  *(void *)(v16 + 32) = v10;
  void v26[5] = sub_1001F0CD8;
  v26[6] = v16;
  v26[1] = _NSConcreteStackBlock;
  _OWORD v26[2] = 1107296256LL;
  uint64_t v17 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v18 = v0;
  id v19 = v10;
  sub_1001C7348();
  unint64_t v20 = sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = sub_1001C7340();
  uint64_t v23 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v22, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v26, v21, v23, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v17);
  _Block_release(v17);

  sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v24);
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_1001EFD6C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v9 = [v8 queue];

  uint64_t v10 = swift_allocObject(&unk_1003E02C0, 24LL, 7LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_1001F0D4C;
  uint64_t v19 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E02D8;
  id v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v17 = _swiftEmptyArrayStorage;
  unint64_t v12 = sub_1001E8E70();
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  uint64_t v14 = sub_1001F0B70( (unint64_t *)&qword_100447CC0,  (uint64_t *)&unk_1004478D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release(v19);
}

uint64_t sub_1001EFF78()
{
  return sub_1001EFD6C();
}

void sub_1001EFF80(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_1001EFF78();
}

void sub_1001EFFE0()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001B1098();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1001D91F4();
  id v6 = *(void **)(v0 + qword_1004487D0);
  void *v1 = v6;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v4);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v1, v4);
  if ((v6 & 1) != 0)
  {
    if (qword_1004468F0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1004468F0, sub_100208418);
LABEL_3:
  uint64_t v8 = qword_100454018;
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v10 = sub_1001DEA68(v9);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v11 = sub_1001B4C00(v10, (unint64_t *)&qword_10044CAD0, &OBJC_CLASS___TURoute_ptr);
  *(void *)(v10 + 56) = v11;
  unint64_t v12 = sub_1001F0B20();
  *(void *)(v10 + 64) = v12;
  *(void *)(v10 + 32) = v3;
  id v13 = v3;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("route: %@", 9LL, 2LL, &_mh_execute_header, v8, v14, v10);
  sub_1001E43E0();
  uint64_t v15 = qword_1004487F8;
  id v16 = v13;
  uint64_t v17 = sub_1001C7478();
  sub_1001EE288(v17, v16, &v33);
  uint64_t v18 = sub_1001E43E0();
  uint64_t v20 = v34;
  if (v34)
  {
    uint64_t v22 = v38;
    uint64_t v21 = v39;
    uint64_t v24 = v36;
    uint64_t v23 = v37;
    uint64_t v25 = v35;
    uint64_t v26 = v33;
    v40[0] = v33;
    v40[1] = v34;
    v40[2] = v35;
    v40[3] = v36;
    v40[4] = v37;
    char v41 = v38 & 1;
    uint64_t v42 = v39;
    uint64_t v27 = *(void (**)(void *))(v0 + qword_1004487A8);
    sub_1001D8F58();
    v27(v40);
    sub_1001F0E44();
    sub_1001F0BB0(v26, v20, v25, v24, v23, v22, v21);
  }

  else
  {
    uint64_t v28 = qword_100454018;
    uint64_t v29 = static os_log_type_t.error.getter(v18, v19);
    uint64_t v30 = sub_1001C7370(v9, 112LL);
    *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    *(void *)(v30 + 56) = v11;
    *(void *)(v30 + 64) = v12;
    *(void *)(v30 + 32) = v16;
    uint64_t v31 = *(void *)(v0 + v15);
    *(void *)(v30 + 96) = sub_1001AFF14(&qword_1004488A8);
    *(void *)(v30 + 104) = sub_1001F0B70( (unint64_t *)&unk_1004488B0,  &qword_1004488A8,  (uint64_t)&protocol conformance descriptor for Set<A>);
    *(void *)(v30 + 72) = v31;
    id v32 = v16;
    swift_bridgeObjectRetain(v31);
    os_log(_:dso:log:type:_:)( "Could not find route to pick for %@. All nearby device routes: %@",  65LL,  2LL,  &_mh_execute_header,  v28,  v29,  v30);
    sub_1001B0F5C();
  }

  sub_1001B0FF8();
}

void sub_1001F0278()
{
  uint64_t v37 = v2;
  uint64_t v38 = v3;
  uint64_t v4 = sub_1001C7360();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  __chkstk_darwin(v4);
  sub_1001D9040();
  uint64_t v43 = v5;
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  __chkstk_darwin(v6);
  sub_1001D9040();
  uint64_t v40 = v7;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v39 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v12 = *(void *)(v39 - 8);
  uint64_t v13 = __chkstk_darwin(v39);
  uint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v36 - v16;
  uint64_t v18 = sub_1001B1098();
  sub_1001F0DCC();
  __chkstk_darwin(v19);
  uint64_t v21 = (void *)((char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = *(void **)(v0 + qword_1004487D0);
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v36[1] = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(v1 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    uint64_t v24 = static DispatchWallTime.now()(v23);
    *uint64_t v11 = TUTransferTimeout(v24);
    (*(void (**)(void *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchTimeInterval.seconds(_:),  v8);
    + infix(_:_:)(v15, v11);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v26 = v39;
    v25(v15, v39);
    v46[5] = v37;
    v46[6] = v38;
    v46[1] = _NSConcreteStackBlock;
    v46[2] = 1107296256LL;
    uint64_t v27 = sub_1001E2064((uint64_t)sub_1002356BC);
    uint64_t v28 = sub_1001D8F58();
    uint64_t v29 = v40;
    static DispatchQoS.unspecified.getter(v28);
    unint64_t v30 = sub_1001F0DF4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v31 = sub_1001C7340();
    uint64_t v33 = sub_1001F0DEC((unint64_t *)&qword_100447CC0, v32, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v34 = v43;
    uint64_t v35 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(v46, v31, v33, v45, v30);
    OS_dispatch_queue.asyncAfter(wallDeadline:qos:flags:execute:)(v17, v29, v34, v27);
    _Block_release(v27);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v29, v42);
    v25(v17, v26);
    sub_1001C7358();
    sub_1001B0FF8();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001F0564()
{
  uint64_t v4 = *(void **)(v0 + qword_1004487D0);
  void *v1 = v4;
  sub_1001B10D8(v5, enum case for DispatchPredicate.onQueue(_:));
  id v6 = v4;
  LOBYTE(v4) = _dispatchPreconditionTest(_:)(v1);
  uint64_t v7 = sub_1001C7318(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v4 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (qword_1004468F0 != -1) {
LABEL_5:
  }
    uint64_t v7 = swift_once(&qword_1004468F0, sub_100208418);
  uint64_t v8 = qword_100454018;
  uint64_t v9 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("", 0LL, 2LL, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);
  uint64_t v10 = *(void (**)(uint64_t))(v0 + qword_1004487B0);
  uint64_t v11 = sub_1001D8F58();
  v10(v11);
  return sub_1001F0E44();
}

void sub_1001F0668(uint64_t a1)
{
  id v1 = [*(id *)(a1 + qword_1004487D8) callContainer];
  id v2 = [v1 frontmostAudioOrVideoCall];
  swift_unknownObjectRelease(v1);
  if (v2)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___CSDCall);
    uint64_t v4 = swift_dynamicCastObjCClass(v2, v3);
    if (v4)
    {
      id v6 = (id)v4;
      id v5 = v2;
      uint64_t v4 = (uint64_t)v6;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  id v7 = (id)v4;
  sub_1001EFB48();
}

id sub_1001F071C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    sub_1001B204C(a1, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v8, v9, v10, v11);
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (v14)
  {
    uint64_t v15 = v14;
    if (v12)
    {
      swift_bridgeObjectRelease(v14);
    }

    else
    {
      uint64_t v16 = v13;
      sub_1001B4B94(0LL, &qword_1004488D0, &OBJC_CLASS___IDSDestination_ptr);
      return sub_10025B688(v16, v15);
    }
  }

  return (id)v12;
}

void sub_1001F0820(uint64_t a1, char a2, char a3, void *a4)
{
  *(_BYTE *)(a1 + qword_100448810) = a2;
  *(_BYTE *)(a1 + qword_10044880_Block_object_dispose(va, 8) = a3;
  uint64_t v6 = qword_100448800;
  uint64_t v7 = *(void **)(a1 + qword_100448800);
  if (v7)
  {
    if (a4)
    {
      sub_1001B4B94(0LL, (unint64_t *)&unk_1004488D8, off_1003D5DB8);
      id v8 = a4;
      id v9 = v7;
      char v10 = static NSObject.== infix(_:_:)(v9, v8);

      if ((v10 & 1) != 0) {
        goto LABEL_12;
      }
    }
  }

  else if (!a4)
  {
    goto LABEL_12;
  }

  if (qword_1004468F0 != -1) {
    swift_once(&qword_1004468F0, sub_100208418);
  }
  uint64_t v11 = qword_100454018;
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  if (a4)
  {
    uint64_t v23 = a4;
    uint64_t v14 = sub_1001B4B94(0LL, (unint64_t *)&unk_1004488D8, off_1003D5DB8);
    id v15 = a4;
    uint64_t v16 = String.init<A>(reflecting:)(&v23, v14);
    unint64_t v18 = v17;
  }

  else
  {
    unint64_t v18 = 0xE300000000000000LL;
    uint64_t v16 = 7104878LL;
  }

  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v19 = sub_1001B2330();
  *(void *)(v13 + 64) = v19;
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v18;
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:type:_:)("Updating activeRelayClientTransport to %@", 41LL, 2LL, &_mh_execute_header, v11, v20, v13);
  swift_bridgeObjectRelease(v13);
  uint64_t v21 = *(void **)(a1 + v6);
  *(void *)(a1 + v6) = a4;
  id v22 = a4;

LABEL_12:
  sub_1001EEEA8();
}

void sub_1001F09E4()
{
}

void sub_1001F0A10()
{
}

void sub_1001F0A1C(uint64_t a1)
{
}

uint64_t type metadata accessor for NearbyDeviceRouteProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AC0E4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyDeviceRouteProvider);
}

uint64_t sub_1001F0B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F0B18(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1001F0B20()
{
  unint64_t result = qword_1004488A0;
  if (!qword_1004488A0)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&qword_10044CAD0, &OBJC_CLASS___TURoute_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1004488A0);
  }

  return result;
}

uint64_t sub_1001F0B70(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1001B0504(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

void sub_1001F0BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
  }

id sub_1001F0BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [v4 initWithUniqueIdentifier:v7 name:v8];

  return v9;
}

uint64_t sub_1001F0C78(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001F0CAC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001F0CD8()
{
}

uint64_t sub_1001F0CEC()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_1001F0D20()
{
}

uint64_t sub_1001F0D28()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001F0D4C()
{
}

uint64_t sub_1001F0D78(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_1001F0D98()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

uint64_t sub_1001F0DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, a3, a4, v6, a6, v7);
}

uint64_t sub_1001F0DBC(uint64_t a1, uint64_t a2)
{
  return v4(*(void *)(v2 + 184), a2, v3);
}

  ;
}

uint64_t sub_1001F0DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:type:_:)(a1, a2, a3, a4, v4, v5, v6);
}

uint64_t sub_1001F0DEC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001F0B70(a1, v3, a3);
}

unint64_t sub_1001F0DF4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  return sub_1001E8E70();
}

uint64_t sub_1001F0DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v3 + 152);
  v4[7] = v2;
  v4[8] = v5;
  v4[4] = a1;
  v4[5] = a2;
  return static os_log_type_t.default.getter();
}

void sub_1001F0E0C()
{
}

uint64_t sub_1001F0E14()
{
  return Array.endIndex.getter(v1, v0);
}

id sub_1001F0E20(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001F0E28()
{
  return String.init<A>(reflecting:)(v1 - 144, v0);
}

uint64_t sub_1001F0E34@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1001F0E3C(uint64_t a1)
{
  return sub_1001F8884(a1, v1);
}

uint64_t sub_1001F0E44()
{
  return swift_release(v0);
}

uint64_t sub_1001F0E4C()
{
  return v0;
}

uint64_t sub_1001F0ED4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  sub_1001B5D70(v1, *(void *)(v0 + OBJC_IVAR___CSDDirtyCallManager_callChanged + 8));
  return v1;
}

uint64_t sub_1001F0F98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR___CSDDirtyCallManager_callChanged + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

BOOL sub_1001F0FB8()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet);
  swift_beginAccess(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet, v6, 0LL, 0LL);
  uint64_t v2 = *v1;
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = __CocoaSet.count.getter(v3);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t v4 = *(void *)(v2 + 16);
  }

  return v4 == 0;
}

id sub_1001F103C(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v4 = &v1[OBJC_IVAR___CSDDirtyCallManager_callChanged];
  *(void *)uint64_t v4 = 0LL;
  *((void *)v4 + 1) = 0LL;
  *(void *)&v1[OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet] = &_swiftEmptySetSingleton;
  *(void *)&v1[OBJC_IVAR___CSDDirtyCallManager_queue] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

void sub_1001F10C0(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  objc_super v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CSDDirtyCallManager_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (sub_1001F0FB8()) {
      sub_1001F12F8();
    }
    id v9 = (uint64_t *)(v1 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet);
    sub_1001B0E80(v1 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet, (uint64_t)v31, 0LL);
    uint64_t v10 = *v9;
    swift_bridgeObjectRetain(*v9);
    char v11 = sub_100260E64(a1, v10);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
    {
      id v12 = sub_1001704C4();
      uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v14 = sub_1001DEA68(v13);
      *(_OWORD *)(v14 + sub_1001EEB94(v0 + 16) = xmmword_10037B290;
      *(void *)(v14 + 56) = sub_1001F1950();
      *(void *)(v14 + 64) = sub_1001F19E8( (unint64_t *)&qword_100447798,  (uint64_t (*)(uint64_t))sub_1001F1950);
      *(void *)(v14 + 32) = a1;
      id v15 = a1;
      uint64_t v16 = static os_log_type_t.default.getter(v15);
      os_log(_:dso:log:type:_:)("Adding call %@ to dirty calls pool", 34LL, 2LL, &_mh_execute_header, v12, v16, v14);

      swift_bridgeObjectRelease(v14);
      unint64_t v17 = (void *)(v1 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray);
      sub_1001B0E80((uint64_t)v17, (uint64_t)v30, 33LL);
      id v18 = v15;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v19 = *(void *)((*v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_1002AB2AC(v19);
      uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v18);
      specialized Array._endMutation()(v20, v21, v22, v23, v24, v25, v26, v27, v28);
      swift_endAccess(v30);
      sub_1001B0E80((uint64_t)v9, (uint64_t)v30, 33LL);
      sub_10024AEE8(&v29, v18);
      swift_endAccess(v30);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001F12F8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (void *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v12 = *(void **)&v0[OBJC_IVAR___CSDDirtyCallManager_queue];
  *char v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v21[1] = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    id v14 = sub_1001704C4();
    uint64_t v15 = static os_log_type_t.default.getter(v14);
    os_log(_:dso:log:type:_:)( "Asked to dispatch drain the pool",  32LL,  2LL,  &_mh_execute_header,  v14,  v15,  _swiftEmptyArrayStorage);

    uint64_t v16 = swift_allocObject(&unk_1003E0328, 24LL, 7LL);
    *(void *)(v16 + sub_1001EEB94(v0 + 16) = v0;
    aBlock[4] = sub_1001F19B0;
    uint64_t v25 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003E0340;
    unint64_t v17 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v0);
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t v18 = sub_1001F19E8( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    uint64_t v20 = sub_1001F1A20((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v1, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release(v25);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001F15FC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void (*)(void))&v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CSDDirtyCallManager_queue);
  *(void *)uint64_t v4 = v5;
  (*(void (**)(void (*)(void), void, uint64_t))(v2 + 104))( v4,  enum case for DispatchPredicate.onQueue(_:),  v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void (*)(void), uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  id v7 = sub_1001704C4();
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v9 = sub_1001DEA68(v8);
  *(_OWORD *)(v9 + sub_1001EEB94(v0 + 16) = xmmword_10037B290;
  uint64_t v10 = (uint64_t *)(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray);
  sub_1001B0E80(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsArray, (uint64_t)v23, 1LL);
  uint64_t v11 = *v10;
  *(void *)(v9 + 56) = sub_1001AFF14(&qword_10044C120);
  *(void *)(v9 + 64) = sub_1001F1A20(&qword_100448938, &qword_10044C120);
  *(void *)(v9 + 32) = v11;
  uint64_t v12 = swift_bridgeObjectRetain(v11);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("Draining pool with dirty calls: %@", 34LL, 2LL, &_mh_execute_header, v7, v13, v9);

  swift_bridgeObjectRelease(v9);
  uint64_t result = sub_1001F0FB8();
  if ((result & 1) != 0) {
    return result;
  }
  uint64_t v1 = *v10;
  uint64_t *v10 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v15 = (uint64_t *)(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet);
  sub_1001B0E80(v0 + OBJC_IVAR___CSDDirtyCallManager_dirtyCallsSet, (uint64_t)v22, 1LL);
  uint64_t v16 = *v15;
  *uint64_t v15 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v16);
  uint64_t v4 = *(void (**)(void))(v0 + OBJC_IVAR___CSDDirtyCallManager_callChanged);
  if (!v4) {
    return sub_1001B0EB8();
  }
  uint64_t v0 = *(void *)(v0 + OBJC_IVAR___CSDDirtyCallManager_callChanged + 8);
  if ((unint64_t)v1 >> 62)
  {
LABEL_16:
    if (v1 < 0) {
      uint64_t v21 = v1;
    }
    else {
      uint64_t v21 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    sub_1001B5D70((uint64_t)v4, v0);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v21);
    uint64_t result = sub_1001B0EB8();
    if (v17) {
      goto LABEL_6;
    }
LABEL_12:
    sub_1001B0EB8();
    return sub_1001B5D3C((uint64_t)v4, v0);
  }

  uint64_t v17 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_retain(v0);
  if (!v17) {
    goto LABEL_12;
  }
LABEL_6:
  if (v17 >= 1)
  {
    for (uint64_t i = 0LL; i != v17; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }
      else {
        id v19 = *(id *)(v1 + 8 * i + 32);
      }
      uint64_t v20 = v19;
      v4();
    }

    goto LABEL_12;
  }

  __break(1u);
  return result;
}

void sub_1001F189C()
{
}

uint64_t type metadata accessor for DirtyCallManager()
{
  return objc_opt_self(&OBJC_CLASS___CSDDirtyCallManager);
}

unint64_t sub_1001F1950()
{
  unint64_t result = qword_100447CE0;
  if (!qword_100447CE0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CSDCall);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100447CE0);
  }

  return result;
}

uint64_t sub_1001F198C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001F19B0()
{
  return sub_1001F15FC();
}

uint64_t sub_1001F19D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F19E0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001F19E8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = a2(255LL);
    uint64_t result = sub_1001C7514(v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001F1A20(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1001B0504(a2);
    uint64_t result = sub_1001C7514(v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001F1A58()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001F1A7C(uint64_t a1)
{
  return sub_1001FAFC8(a1, *(void *)(v1 + 16));
}

void sub_1001F1A8C(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v35 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 16);
  }

  if (v2)
  {
    uint64_t v40 = _swiftEmptyArrayStorage;
    sub_100250050(0, v2 & ~(v2 >> 63), 0);
    if (v35)
    {
      if (v1 < 0) {
        uint64_t v3 = v1;
      }
      else {
        uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = __CocoaSet.startIndex.getter(v3);
      unsigned __int8 v6 = 1;
    }

    else
    {
      uint64_t v4 = sub_100250EEC(v1);
      unsigned __int8 v6 = v7 & 1;
    }

    uint64_t v37 = v4;
    uint64_t v38 = v5;
    unsigned __int8 v39 = v6;
    if (v2 < 0)
    {
      __break(1u);
LABEL_32:
      __break(1u);
    }

    else
    {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
      if (v1 < 0) {
        uint64_t v8 = v1;
      }
      uint64_t v33 = v8;
      uint64_t v34 = v1;
      do
      {
        uint64_t v10 = v37;
        uint64_t v9 = v38;
        uint64_t v11 = v39;
        sub_100250C38(v37, v38, v39, v1);
        id v13 = v12;
        id v14 = [v13 handle];
        id v15 = [v14 value];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        uint64_t v18 = v17;

        id v19 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
        {
          sub_100250050(0, v19[2] + 1LL, 1);
          id v19 = v40;
        }

        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_100250050(v20 > 1, v21 + 1, 1);
          id v19 = v40;
        }

        void v19[2] = v21 + 1;
        uint64_t v22 = &v19[2 * v21];
        v22[4] = v16;
        void v22[5] = v18;
        if (v35)
        {
          uint64_t v1 = v34;
          if ((v11 & 1) == 0) {
            goto LABEL_32;
          }
          uint64_t v23 = __CocoaSet.Index.handleBitPattern.getter(v10, v9);
          if (v23) {
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
          }
          else {
            uint64_t isUniquelyReferenced_nonNull_native = 1LL;
          }
          uint64_t v30 = sub_1001AFF14(&qword_100447E70);
          uint64_t v31 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v36, v30);
          __CocoaSet.formIndex(after:isUnique:)(v32, isUniquelyReferenced_nonNull_native, v33);
          v31(v36, 0LL);
        }

        else
        {
          uint64_t v1 = v34;
          uint64_t v25 = sub_100250B3C(v10, v9, v11, v34);
          uint64_t v27 = v26;
          char v29 = v28;
          sub_1001D8CA0(v10, v9, v11);
          uint64_t v37 = v25;
          uint64_t v38 = v27;
          unsigned __int8 v39 = v29 & 1;
        }

        --v2;
      }

      while (v2);
      sub_1001D8CA0(v37, v38, v39);
    }
  }

void sub_1001F1D24(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_1001F7D5C( (unint64_t *)&qword_100447ED0,  &qword_10044A410,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v29, v5, v6, v7);
    uint64_t v3 = v29[0];
    uint64_t v27 = v29[1];
    uint64_t v9 = v29[2];
    int64_t v10 = v29[3];
    unint64_t v11 = v29[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  int64_t v26 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    int64_t v15 = v10;
    if ((v3 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v18 = __CocoaSet.Iterator.next()(v8);
    uint64_t v19 = v18;
    if (!v18) {
      goto LABEL_35;
    }
    uint64_t v28 = v18;
    uint64_t v20 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    id v21 = v30;
    swift_unknownObjectRelease(v19);
    if (!v21) {
      goto LABEL_35;
    }
LABEL_34:
    unsigned int v25 = [v21 isEquivalentToHandle:a2];

    if (v25) {
      goto LABEL_35;
    }
  }

  if (v11)
  {
    unint64_t v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_33:
    id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    if (!v21) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  int64_t v22 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v22 >= v26) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v15 + 2;
      if (v15 + 2 >= v26) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v10);
      if (!v23)
      {
        int64_t v10 = v15 + 3;
        if (v15 + 3 >= v26) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v27 + 8 * v10);
        if (!v23)
        {
          int64_t v10 = v15 + 4;
          if (v15 + 4 >= v26) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v27 + 8 * v10);
          if (!v23)
          {
            int64_t v10 = v15 + 5;
            if (v15 + 5 >= v26) {
              goto LABEL_35;
            }
            unint64_t v23 = *(void *)(v27 + 8 * v10);
            if (!v23)
            {
              int64_t v24 = v15 + 6;
              while (v24 < v26)
              {
                unint64_t v23 = *(void *)(v27 + 8 * v24++);
                if (v23)
                {
                  int64_t v10 = v24 - 1;
                  goto LABEL_32;
                }
              }

uint64_t sub_1001F204C()
{
  return sub_1001F8604(OBJC_IVAR___CSDPendingMembershipTracker_messenger);
}

uint64_t sub_1001F20A4(uint64_t a1)
{
  return sub_1001F2134(a1, &OBJC_IVAR___CSDPendingMembershipTracker_messenger);
}

uint64_t sub_1001F20D0()
{
  return sub_1001F8604(OBJC_IVAR___CSDPendingMembershipTracker_delegate);
}

uint64_t sub_1001F2128(uint64_t a1)
{
  return sub_1001F2134(a1, &OBJC_IVAR___CSDPendingMembershipTracker_delegate);
}

uint64_t sub_1001F2134(uint64_t a1, void *a2)
{
  return swift_unknownObjectRelease(a1);
}

void sub_1001F2164()
{
  uint64_t v1 = type metadata accessor for MemoryPendingMembershipTrackerStorage();
  uint64_t v2 = sub_1001C7370(v1, 24LL);
  *(void *)(v2 + sub_1001EEB94(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = type metadata accessor for SharedPendingMembershipBag();
  uint64_t v4 = sub_1001C7370(v3, 16LL);
  sub_1001F7F34(v2, v4);
  uint64_t ObjectType = swift_getObjectType(v0);
  swift_deallocPartialClassInstance(v0, ObjectType, 104LL, 7LL);
  sub_1001AA978();
}

void sub_1001F21F4()
{
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1001B1234();
  __chkstk_darwin(v8);
  sub_1001D91F4();
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t inited = swift_initStackObject(v9, &v29);
  *(_OWORD *)(inited + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
  *(void *)(inited + 32) = v7;
  uint64_t v28 = inited;
  specialized Array._endMutation()(inited, v11, v12, v13, v14, v15, v16, v17, v0);
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0) {
      uint64_t v25 = v28;
    }
    else {
      uint64_t v25 = v28 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v26 = v7;
    sub_1001E927C();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_1001AA9C8();
  }

  else
  {
    uint64_t v18 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    id v19 = v7;
  }

  if (v18) {
    sub_10024C2C8(v28);
  }
  else {
    swift_bridgeObjectRelease(v28);
  }
  sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
  sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  sub_10010B960();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  sub_1001AA9C8();
  [v5 removePendingMembers:isa triggeredLocally:v3 & 1];

  id v21 = sub_1001F861C( (void *)(v27 + OBJC_IVAR___CSDPendingMembershipTracker_storage),  *(void *)(v27 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  id v22 = sub_1001D909C((uint64_t)v21, "groupUUID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

  id v24 = sub_1001B115C(v23, "handle");
  sub_1001F871C(v1, (uint64_t)v24);
  if (v7)
  {

    sub_1001F8524();
    sub_1001F860C();
  }

  else
  {
    sub_1001F860C();
  }

  sub_1001B0FF8();
}

uint64_t sub_1001F2444()
{
  uint64_t v5 = sub_1001F861C( (void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage),  *(void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  id v6 = sub_1001D8F3C((uint64_t)v5, "groupUUID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  sub_1001F6A00(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

void sub_1001F2534()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001F8508();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1001B0EA0();
  sub_1001B204C( (void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage),  *(void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  uint64_t v6 = sub_1001F6138(v3);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    uint64_t v8 = v6 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v9 = *(void *)(v5 + 72);
    do
    {
      sub_1001E8D80(v8, v1);
      id v10 = *(id *)(v1 + *(int *)(v4 + 24));
      uint64_t v11 = sub_1001F7D98(v1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      uint64_t v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized ContiguousArray._endMutation()(v13);
      v8 += v9;
      --v7;
    }

    while (v7);
  }

  sub_1001B0F5C();
  sub_10024E96C((uint64_t)_swiftEmptyArrayStorage);
  sub_1001B0FF8();
}

uint64_t sub_1001F2750()
{
  uint64_t v1 = *sub_1001B204C( (void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage),  *(void *)(v0 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24));
  sub_1001F61C4();
  sub_1001F75EC(v2);
  sub_1001B4C30();
  return v1;
}

void sub_1001F2820()
{
  uint64_t v224 = v0;
  uint64_t v214 = v5;
  uint64_t v216 = v6;
  id v227 = v7;
  unint64_t v219 = v8;
  uint64_t v218 = v9;
  uint64_t v220 = v10;
  uint64_t v222 = sub_1001F8508();
  sub_1001B0E88();
  __chkstk_darwin(v11);
  sub_1001BB4B4();
  uint64_t v221 = v12;
  __chkstk_darwin(v13);
  uint64_t v223 = (char *)v208 - v14;
  sub_1001F86B8();
  sub_1001F87AC();
  __chkstk_darwin(v15);
  uint64_t v226 = (char *)v208 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v17);
  sub_1001D91F4();
  id v230 = 0LL;
  uint64_t v18 = sub_1001B1234();
  __chkstk_darwin(v18);
  sub_1001F85C0();
  uint64_t v20 = __chkstk_darwin(v19);
  id v22 = (void *)((char *)v208 - v21);
  __chkstk_darwin(v20);
  if (qword_1004468E0 != -1) {
    goto LABEL_92;
  }
  while (1)
  {
    sub_1001F8710();
    if ((v26 & 1) != 0)
    {
      id v230 = sub_1001704C4();
      uint64_t v27 = static os_log_type_t.default.getter(v230);
      os_log(_:dso:log:type:_:)( "Attempting to track pending member, disabled -- ignoring",  56LL,  2LL,  &_mh_execute_header,  v230,  v27,  _swiftEmptyArrayStorage);
      sub_1001F8450(v230);
      return;
    }

    uint64_t v210 = v25;
    uint64_t v225 = v23;
    uint64_t v217 = v24;
    uint64_t v215 = v18;
    if (!v227)
    {
      uint64_t v38 = v216;
      sub_10022A150(v216);
      if (v39)
      {
        unint64_t v40 = v39;
        uint64_t v213 = v3;
        id v41 = sub_1001D8F3C(v39, "groupUUID");
        if (v41)
        {
          uint64_t v42 = v41;
          unint64_t v212 = v1;
          uint64_t v43 = v210;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

          uint64_t v38 = (uint64_t (**)(unint64_t *, uint64_t))v217;
          uint64_t v44 = v215;
          sub_1001F8638((uint64_t)v2, v43);
          sub_1001A9670((uint64_t)v2, 0LL, 1LL, v44);
          if (sub_1001AB0AC((uint64_t)v2, 1LL, v44) != 1)
          {
            sub_1001F8638((uint64_t)v22, (uint64_t)v2);
            uint64_t v45 = v225;
            sub_1001F8638(v225, (uint64_t)v22);
            id v46 = sub_1001704C4();
            uint64_t v47 = sub_1001AFF14((uint64_t *)&unk_100447E30);
            uint64_t v48 = sub_1001C7370(v47, 112LL);
            *(_OWORD *)(v48 + sub_1001EEB94(v0 + 16) = xmmword_10037B1B0;
            sub_1001F8638(v43, v45);
            uint64_t v49 = String.init<A>(reflecting:)(v43, v44);
            uint64_t v51 = v50;
            *(void *)(v48 + 56) = &type metadata for String;
            unint64_t v52 = sub_1001B2330();
            *(void *)(v48 + 64) = v52;
            *(void *)(v48 + 32) = v49;
            *(void *)(v48 + 40) = v51;
            v237[0] = v40;
            sub_1001F859C();
            uint64_t v53 = sub_1001AFF14(&qword_1004499A0);
            uint64_t v54 = String.init<A>(reflecting:)(v237, v53);
            *(void *)(v48 + 96) = &type metadata for String;
            *(void *)(v48 + 104) = v52;
            *(void *)(v48 + 72) = v54;
            *(void *)(v48 + 80) = v55;
            uint64_t v56 = static os_log_type_t.default.getter(v54);
            os_log(_:dso:log:type:_:)( "Setting groupUUID: %@ handlesToSendTo: %@",  41LL,  2LL,  &_mh_execute_header,  v46,  v56,  v48);

            swift_bridgeObjectRelease(v48);
            uint64_t v57 = v38[1](v22, v44);
            goto LABEL_67;
          }
        }

        else
        {
          sub_1001A9670((uint64_t)v2, 1LL, 1LL, v215);
        }

        swift_bridgeObjectRelease(v40);
        sub_1001C6CE4((uint64_t)v2, (uint64_t *)&unk_10044A400);
      }

      id v192 = sub_1001704C4();
      uint64_t v193 = sub_1001B11C8();
      sub_1001E43F4( (uint64_t)"Neither a conversation nor a link with handles was specified -- ignoring",  72LL,  v194,  (uint64_t)&_mh_execute_header,  v195,  v193,  (uint64_t)_swiftEmptyArrayStorage);

      goto LABEL_89;
    }

    uint64_t v213 = v3;
    unint64_t v212 = v1;
    id v211 = v227;
    id v28 = [v211 activeRemoteParticipants];
    uint64_t v29 = sub_1001B4B94(0LL, (unint64_t *)&qword_100448F80, off_1003D5D90);
    sub_1001F7D5C( (unint64_t *)&qword_100448BE8,  (unint64_t *)&qword_100448F80,  off_1003D5D90,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v29, v30);

    uint64_t v32 = sub_10024E694(v31);
    if (v32) {
      break;
    }
    sub_1001B0EB8();
    unint64_t v58 = _swiftEmptyArrayStorage;
LABEL_30:
    sub_10024E990((uint64_t)v58);
    uint64_t v2 = v88;
    id v89 = [v211 memberHandlesEligibleForLinkApproval];
    uint64_t v90 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_1001F7D5C( (unint64_t *)&qword_100447ED0,  &qword_10044A410,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    id v22 = v91;
    uint64_t v92 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v89, v90, v91);

    unint64_t v232 = (unint64_t)&_swiftEmptySetSingleton;
    uint64_t v209 = (unint64_t *)v92;
    uint64_t v228 = v90;
    if ((v92 & 0xC000000000000001LL) != 0)
    {
      if (v92 < 0) {
        uint64_t v93 = v92;
      }
      else {
        uint64_t v93 = v92 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v92);
      uint64_t v94 = __CocoaSet.makeIterator()(v93);
      uint64_t v95 = Set.Iterator.init(_cocoa:)(v237, v94, v90, v22);
      uint64_t v92 = v237[0];
      *(void *)&__int128 v229 = v237[1];
      uint64_t v96 = v237[2];
      uint64_t v3 = v237[3];
      unint64_t v1 = v237[4];
    }

    else
    {
      uint64_t v97 = -1LL << *(_BYTE *)(v92 + 32);
      uint64_t v98 = *(void *)(v92 + 56);
      *(void *)&__int128 v229 = v92 + 56;
      uint64_t v96 = ~v97;
      uint64_t v99 = -v97;
      if (v99 < 64) {
        uint64_t v100 = ~(-1LL << v99);
      }
      else {
        uint64_t v100 = -1LL;
      }
      unint64_t v1 = v100 & v98;
      uint64_t v95 = (void *)swift_bridgeObjectRetain(v92);
      uint64_t v3 = 0LL;
    }

    uint64_t v4 = v92 & 0x7FFFFFFFFFFFFFFFLL;
    v208[1] = v96;
    int64_t v101 = (unint64_t)(v96 + 64) >> 6;
    if (v92 < 0)
    {
      while (1)
      {
        uint64_t v104 = __CocoaSet.Iterator.next()(v95);
        if (!v104) {
          break;
        }
        uint64_t v231 = v104;
        swift_unknownObjectRetain(v104);
        swift_dynamicCast(&v235, &v231, (char *)&type metadata for Swift.AnyObject + 8, v228, 7LL);
        id v22 = v235;
        sub_1001F84C0();
        uint64_t v18 = v3;
        uint64_t v102 = v1;
        if (!v22) {
          break;
        }
LABEL_55:
        id v107 = v22;
        id v108 = v230;
        sub_1001F1D24((uint64_t)v2, v107);
        id v230 = v108;
        if ((v109 & 1) != 0)
        {
          id v22 = &v232;
          sub_10024AF20(&v235, v107);
        }

        else
        {
        }

        uint64_t v3 = v18;
        unint64_t v1 = v102;
        if ((v92 & 0x8000000000000000LL) == 0) {
          goto LABEL_40;
        }
      }

LABEL_94:
      swift_once(&qword_1004468E8, sub_1001F6E74);
      goto LABEL_82;
    }

void sub_1001F3A30()
{
  uint64_t v66 = v3;
  uint64_t v67 = v1;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  id v65 = v8;
  id v10 = v9;
  sub_1001AFF14(&qword_100448BC0);
  sub_1001B0E88();
  __chkstk_darwin(v11);
  sub_1001B0EA0();
  uint64_t v12 = (int *)sub_1001F8508();
  sub_1001B0E88();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = sub_1001F86B8();
  __chkstk_darwin(v19);
  sub_1001BB578();
  if (qword_1004468E0 != -1)
  {
    uint64_t v64 = v20;
    swift_once(&qword_1004468E0, sub_1001F6E34);
  }

  sub_1001F8710();
  if ((v23 & 1) != 0) {
    goto LABEL_7;
  }
  if (qword_1004468E8 != -1)
  {
    uint64_t v64 = v22;
    uint64_t v21 = swift_once(&qword_1004468E8, sub_1001F6E74);
    uint64_t v22 = v64;
  }

  if ((byte_100448941 & 1) != 0)
  {
LABEL_7:
    uint64_t v67 = (char *)sub_1001704C4();
    uint64_t v24 = static os_log_type_t.default.getter(v67);
    os_log(_:dso:log:type:_:)( "Attempting to track delegated pending member, disabled -- ignoring",  66LL,  2LL,  &_mh_execute_header,  v67,  v24,  _swiftEmptyArrayStorage);
    sub_1001F8450(v67);
    return;
  }

  uint64_t v25 = v22;
  Date.init()(v21);
  uint64_t v26 = sub_1001B1234();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))(v18, v5, v26);
  uint64_t v27 = &v18[v12[7]];
  uint64_t v63 = v19;
  uint64_t v64 = v25;
  id v28 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v29 = v0;
  v28(v27, v0, v19);
  uint64_t v30 = &v18[v12[5]];
  *(void *)uint64_t v30 = v7;
  *(_OWORD *)(v30 + _Block_object_dispose(va, 8) = xmmword_10037C080;
  *(void *)&v18[v12[6]] = v10;
  uint64_t v31 = &v67[OBJC_IVAR___CSDPendingMembershipTracker_storage];
  sub_1001B204C( &v67[OBJC_IVAR___CSDPendingMembershipTracker_storage],  *(void *)&v67[OBJC_IVAR___CSDPendingMembershipTracker_storage + 24]);
  id v32 = v10;
  id v33 = v7;
  id v62 = v32;
  id v34 = sub_1001D8F3C((uint64_t)v33, "handle");
  uint64_t v35 = v66;
  sub_1001F6058(v66, (uint64_t)v34);

  if (sub_1001AB0AC(v2, 1LL, (uint64_t)v12) == 1)
  {
    sub_1001C6CE4(v2, &qword_100448BC0);
  }

  else
  {
    sub_1001E8DC4(v2, (uint64_t)v16);
    uint64_t v36 = &v16[v12[5]];
    char v37 = *(void **)v36;
    uint64_t v38 = *((void *)v36 + 1);
    unint64_t v39 = *((void *)v36 + 2);
    sub_1001F6FC4(*(void **)v36, v38, v39);
    sub_1001F7D98((uint64_t)v16);
    sub_1001F7074(v37, v38, v39);
    if ((v39 & 0x2000000000000000LL) == 0) {
      goto LABEL_21;
    }
  }

  unint64_t v40 = sub_1001F861C(v31, *((void *)v31 + 3));
  id v41 = v62;
  id v42 = sub_1001F0E20((uint64_t)v40, "handle");
  uint64_t v43 = 0LL;
  sub_1001F6698((uint64_t)v18, v35, (uint64_t)v42);

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  sub_1001D8FD4(v41, "setDateReceivedLetMeIn:");

  if (v65)
  {
    uint64_t v45 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
    uint64_t v46 = sub_1001F87E0(v45);
    *(_OWORD *)(v46 + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
    *(void *)(v46 + 32) = v41;
    sub_1001F8478(v46, v47, v48, v49, v50, v51, v52, v53, v61);
    uint64_t v54 = v68;
    if (v68 >> 62)
    {
      sub_1001F86E8();
      id v60 = v65;
      sub_1001E927C();
      uint64_t v43 = sub_1001F8738();
      sub_1001AA9C8();
    }

    else
    {
      sub_1001F877C();
      id v55 = v65;
    }

    if (v43) {
      sub_10024C2C8(v54);
    }
    else {
      swift_bridgeObjectRelease(v54);
    }
    sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    v58.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    sub_1001B2428();
    id v59 = v65;
    [v65 addPendingMembers:v58.super.isa triggeredLocally:0];

    goto LABEL_20;
  }

  uint64_t v56 = sub_1001F84C8(OBJC_IVAR___CSDPendingMembershipTracker_delegate);
  if (v56)
  {
    uint64_t v57 = (void *)v56;
    v58.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v57 pendingMembershipTracker:v67 didTrack:v62 forGroupUUID:v58.super.isa];
    sub_1001F8730();
LABEL_20:
  }

void sub_1001F4090( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_1001F40B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_1001F40D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  char v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  id v33 = v32;
  uint64_t v34 = sub_1001B1234();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  char v37 = (char *)&a9 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);
  id v38 = v31;
  id v39 = v29;
  id v40 = v27;
  id v41 = v33;
  v23(v38, v39, v40, v37);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  sub_1001B0FF8();
}

void sub_1001F41A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

#error "1001F41F8: call analysis failed (funcsize=26)"
void sub_1001F421C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  sub_1001F51CC(0LL, a1, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

#error "1001F4270: call analysis failed (funcsize=26)"
void sub_1001F4294(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

void sub_1001F42B8(uint64_t a1)
{
  char v1 = a1;
  sub_1001B9298(a1);
  Hasher._combine(_:)(v1 & 1);
  Hasher._finalize()();
  sub_1001B9210();
}

void sub_1001F42EC()
{
}

void sub_1001F42F4(uint64_t a1)
{
}

void sub_1001F42FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v264 = v20;
  uint64_t v265 = v24;
  __int128 v263 = v25;
  id v266 = v26;
  id v28 = v27;
  LODWORD(v262) = v29;
  sub_1001AFF14(&qword_100448BC0);
  sub_1001B0E88();
  __chkstk_darwin(v30);
  sub_1001D91F4();
  uint64_t v31 = sub_1001F8508();
  sub_1001B0E88();
  __chkstk_darwin(v32);
  sub_1001BB4B4();
  uint64_t v261 = v33;
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v260 = (char *)&v246 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  id v39 = (char *)&v246 - v38;
  __chkstk_darwin(v37);
  id v41 = (char *)&v246 - v40;
  uint64_t v42 = sub_1001B1234();
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_1001F85C0();
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v246 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v246 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  __chkstk_darwin(v51);
  uint64_t v53 = (char *)&v246 - v52;
  if (qword_1004468E0 != -1)
  {
    sub_1001F8864();
    swift_once(&qword_1004468E0, sub_1001F6E34);
    sub_1001F8754();
  }

  sub_1001F8710();
  if ((v56 & 1) != 0) {
    goto LABEL_7;
  }
  if (qword_1004468E8 != -1)
  {
    sub_1001F8864();
    swift_once(&qword_1004468E8, sub_1001F6E74);
    sub_1001F8754();
  }

  if ((byte_100448941 & 1) != 0)
  {
LABEL_7:
    id v266 = sub_1001704C4();
    uint64_t v57 = static os_log_type_t.default.getter(v266);
    os_log(_:dso:log:type:_:)( "Remote user action for pending member attempted, disabled -- ignoring",  69LL,  2LL,  &_mh_execute_header,  v266,  v57,  _swiftEmptyArrayStorage);
    sub_1001F8450(v266);
    return;
  }

  uint64_t v255 = v55;
  uint64_t v258 = v54;
  uint64_t v259 = v41;
  uint64_t v257 = (void (*)(void, void))v42;
  id v58 = [v266 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v58);

  uint64_t v59 = *(void *)(v264 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24);
  uint64_t v253 = (void *)(v264 + OBJC_IVAR___CSDPendingMembershipTracker_storage);
  sub_1001F861C((void *)(v264 + OBJC_IVAR___CSDPendingMembershipTracker_storage), v59);
  id v256 = v28;
  id v60 = [v28 handle];
  sub_1001F6058((uint64_t)v53, (uint64_t)v60);

  if (sub_1001AB0AC(v21, 1LL, v31) != 1)
  {
    uint64_t v254 = v53;
    unsigned int v75 = v262 & 1;
    uint64_t v76 = (uint64_t)v259;
    sub_1001E8DC4(v21, (uint64_t)v259);
    uint64_t v262 = (uint64_t)sub_1001704C4();
    uint64_t v250 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v77 = sub_1001C7370(v250, 272LL);
    *(_OWORD *)(v77 + sub_1001EEB94(v0 + 16) = xmmword_10037C090;
    sub_1001E8D80(v76, (uint64_t)v39);
    uint64_t v78 = String.init<A>(reflecting:)(v39, v31);
    uint64_t v80 = v79;
    *(void *)(v77 + 56) = &type metadata for String;
    unint64_t v81 = sub_1001B2330();
    *(void *)(v77 + 64) = v81;
    *(void *)(v77 + 32) = v78;
    *(void *)(v77 + 40) = v80;
    unsigned int v247 = v75;
    LOBYTE(v269[0]) = v75;
    uint64_t v82 = String.init<A>(reflecting:)(v269, &unk_1003E0488);
    *(void *)(v77 + 96) = &type metadata for String;
    *(void *)(v77 + 104) = v81;
    *(void *)(v77 + 72) = v82;
    *(void *)(v77 + 80) = v83;
    char v84 = v256;
    v269[0] = (uint64_t)v256;
    uint64_t v85 = sub_1001B4C00(v82, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    id v248 = v84;
    uint64_t v249 = v85;
    uint64_t v86 = String.init<A>(reflecting:)(v269, v85);
    *(void *)(v77 + 136) = &type metadata for String;
    *(void *)(v77 + 144) = v81;
    *(void *)(v77 + 112) = v86;
    *(void *)(v77 + 120) = v87;
    uint64_t v88 = v263;
    v269[0] = (uint64_t)v263;
    uint64_t v89 = sub_1001B4C00(v86, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    id v256 = v88;
    uint64_t v251 = v89;
    uint64_t v90 = sub_1001F84B8((uint64_t)v269);
    *(void *)(v77 + 176) = &type metadata for String;
    *(void *)(v77 + 184) = v81;
    *(void *)(v77 + 152) = v90;
    *(void *)(v77 + 160) = v91;
    uint64_t v92 = *(void (**)(uint64_t, uint64_t, void (*)(void, void)))(v43 + 16);
    uint64_t v93 = v258;
    uint64_t v94 = v257;
    sub_1001F8774(v258, v265);
    uint64_t v95 = sub_1001F87D8(v93);
    *(void *)(v77 + 2sub_1001EEB94(v0 + 16) = &type metadata for String;
    *(void *)(v77 + 224) = v81;
    *(void *)(v77 + 192) = v95;
    *(void *)(v77 + 200) = v96;
    id v97 = [v266 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v97);

    sub_1001F8774((uint64_t)v50, v93);
    uint64_t v98 = sub_1001F87D8((uint64_t)v50);
    uint64_t v100 = v99;
    __int128 v263 = *(uint64_t (**)(void, void))(v43 + 8);
    uint64_t v101 = v263(v93, v94);
    *(void *)(v77 + 256) = &type metadata for String;
    *(void *)(v77 + 264) = v81;
    unint64_t v102 = v81;
    *(void *)(v77 + 232) = v98;
    *(void *)(v77 + 240) = v100;
    uint64_t v103 = (uint64_t)v259;
    uint64_t v104 = static os_log_type_t.default.getter(v101);
    unint64_t v105 = (void *)v262;
    os_log(_:dso:log:type:_:)( "Processing remote user action for pending member {info: %@, action: %@, member: %@, from: %@, transactionUUID: %@, conversation.groupUUID: %@}",  142LL,  2LL,  &_mh_execute_header,  v262,  v104,  v77);

    uint64_t v106 = sub_1001B0F5C();
    uint64_t v107 = v103 + *(int *)(v31 + 20);
    char v109 = *(char **)v107;
    uint64_t v108 = *(void *)(v107 + 8);
    unint64_t v110 = *(void *)(v107 + 16);
    uint64_t v262 = v108;
    unint64_t v252 = v110;
    if ((v110 & 0x2000000000000000LL) != 0)
    {
      sub_1001B4C00(v106, (unint64_t *)&qword_100447BB0, &OBJC_CLASS___NSObject_ptr);
      uint64_t v260 = v109;
      unint64_t v147 = v109;
      uint64_t v148 = v256;
      char v149 = static NSObject.== infix(_:_:)(v147, v256);
      uint64_t v150 = v261;
      sub_1001E8D80(v103, v261);
      uint64_t v151 = v92;
      uint64_t v152 = v255;
      uint64_t v153 = v265;
      v151(v255, v265, v94);
      uint64_t v114 = v94;
      if ((v149 & 1) != 0)
      {
        uint64_t v154 = static UUID.== infix(_:_:)(v150, v152);
        sub_1001F8510(v152);
        sub_1001F86A0();
        if ((v154 & 1) != 0)
        {
          uint64_t v155 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          uint64_t v156 = sub_1001F87E0(v155);
          *(_OWORD *)(v156 + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
          uint64_t v157 = v248;
          *(void *)(v156 + 32) = v248;
          sub_1001F8478(v156, v158, v159, v160, v161, v162, v163, v164, v246);
          sub_1001F8768();
          uint64_t v165 = (uint64_t)v148;
          if (v166)
          {
            if (v154 < 0) {
              uint64_t v167 = (void *)v154;
            }
            else {
              uint64_t v167 = (void *)(v154 & 0xFFFFFFFFFFFFFF8LL);
            }
            id v243 = v157;
            sub_1001EE280();
            sub_1001F8698();
            sub_1001B4C30();
          }

          else
          {
            uint64_t v167 = *(void **)((v154 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            id v168 = v157;
          }

          uint64_t v169 = (uint64_t)v254;
          id v170 = v266;
          uint64_t v171 = v253;
          if (v167) {
            sub_10024C2C8(v154);
          }
          else {
            swift_bridgeObjectRelease(v154);
          }
          sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
          sub_1001F87A4();
          sub_1001B4C30();
          sub_1001F8588(v170, "removePendingMembers:triggeredLocally:", (uint64_t)v167);

          id v219 = [v170 delegate];
          if (v219)
          {
            [v219 conversationChanged:v170];
            sub_1001F84C0();
          }

          sub_1001B204C(v171, v171[3]);
          sub_1001F871C(v169, v165);
          sub_1001F8660();
          if (v169) {
            sub_1001F8524();
          }
          sub_1001F86F8((uint64_t)&a18);
          uint64_t v201 = sub_1001F8824();
          goto LABEL_26;
        }
      }

      else
      {
        sub_1001F8510(v152);
        sub_1001F86A0();
      }

      id v186 = sub_1001704C4();
      uint64_t v187 = sub_1001C7370(v250, 192LL);
      *(_OWORD *)(v187 + sub_1001EEB94(v0 + 16) = xmmword_10037B140;
      v269[0] = (uint64_t)v147;
      id v188 = v147;
      uint64_t v189 = sub_1001F8670((uint64_t)v269);
      *(void *)(v187 + 56) = &type metadata for String;
      *(void *)(v187 + 64) = v102;
      *(void *)(v187 + 32) = v189;
      *(void *)(v187 + 40) = v190;
      v269[0] = (uint64_t)v148;
      id v191 = v148;
      uint64_t v192 = sub_1001F8670((uint64_t)v269);
      sub_1001F8490(v192, v193);
      uint64_t v194 = sub_1001F8484();
      *(void *)(v187 + 136) = &type metadata for String;
      *(void *)(v187 + 144) = v102;
      *(void *)(v187 + 112) = v194;
      *(void *)(v187 + 120) = v195;
      sub_1001F852C((uint64_t)v148, v153);
      uint64_t v196 = sub_1001F8484();
      uint64_t v198 = sub_1001F8590(v196, v197);
      sub_1001F8468( (uint64_t)"Client remote action does not match what we expect -- ignoring {sender: %@, from: %@, info.transactionU UID: %@, transactionUUID: %@}",  132LL,  v199,  (uint64_t)&_mh_execute_header,  v200,  v198);

      sub_1001AA9C8();
      sub_1001F7074(v260, v262, v252);
    }

    else
    {
      sub_1001B9234();
      sub_1001BB31C(v108, v110);
      id v111 = v256;
      char v112 = sub_100260E78(v256, (uint64_t)v109);
      uint64_t v113 = v260;
      sub_1001E8D80(v103, (uint64_t)v260);
      sub_1001F8774((uint64_t)v47, v265);
      uint64_t v114 = v94;
      if ((v112 & 1) != 0)
      {
        char v115 = static UUID.== infix(_:_:)(v113, v47);
        sub_1001F8510((uint64_t)v47);
        uint64_t v116 = sub_1001F86A0();
        if ((v115 & 1) != 0)
        {
          uint64_t v260 = v109;
          id v117 = v266;
          id v118 = sub_1001F8700(v116, "kickedMembers");
          sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
          uint64_t v120 = v119;
          uint64_t v121 = sub_1001F8804();
          uint64_t v124 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v121, v122, v123);

          sub_1001F1A8C(v124);
          uint64_t v126 = v125;
          swift_bridgeObjectRelease(v124);
          id v127 = [v111 value];
          uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
          uint64_t v130 = v129;

          LOBYTE(v127) = sub_10028F48C(v128, v130, v126);
          sub_1001B0F28();
          if ((v127 & 1) != 0)
          {
            swift_bridgeObjectRelease(v260);
            id v131 = sub_1001704C4();
            uint64_t v132 = sub_1001C7370(v250, 192LL);
            *(_OWORD *)(v132 + sub_1001EEB94(v0 + 16) = xmmword_10037B140;
            v269[0] = (uint64_t)v126;
            uint64_t v133 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
            uint64_t v134 = sub_1001F84FC(v133);
            sub_1001F8650(v134, v135);
            uint64_t v136 = sub_1001F86A8();
            *(void *)(v132 + 96) = &type metadata for String;
            *(void *)(v132 + 104) = v102;
            *(void *)(v132 + 72) = v136;
            *(void *)(v132 + 80) = v137;
            uint64_t v138 = v258;
            uint64_t v139 = v257;
            sub_1001F852C(v258, (uint64_t)v259);
            uint64_t v140 = sub_1001F8484();
            *(void *)(v132 + 136) = &type metadata for String;
            *(void *)(v132 + 144) = v102;
            *(void *)(v132 + 112) = v140;
            *(void *)(v132 + 120) = v141;
            sub_1001F852C(v138, v265);
            uint64_t v142 = sub_1001F8484();
            uint64_t v144 = sub_1001F8590(v142, v143);
            sub_1001F8468( (uint64_t)"Hosted remote action is from a kicked handle -- ignoring {kickedHandles: %@, from: %@, info.trans actionUUID: %@, transactionUUID: %@}",  133LL,  v145,  (uint64_t)&_mh_execute_header,  v146,  v144);
            sub_1001F8678();

            sub_1001AA9C8();
            sub_1001F854C();
            v263(v254, v139);
            goto LABEL_27;
          }

          uint64_t v203 = v111;
          sub_1001B0F5C();
          uint64_t v204 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          uint64_t inited = swift_initStackObject(v204, &v268);
          *(_OWORD *)(inited + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
          id v206 = v248;
          *(void *)(inited + 32) = v248;
          sub_1001F8478(inited, v207, v208, v209, v210, v211, v212, v213, v246);
          uint64_t v214 = v269[0];
          if ((unint64_t)v269[0] >> 62)
          {
            if (v269[0] < 0) {
              uint64_t v244 = v269[0];
            }
            else {
              uint64_t v244 = v269[0] & 0xFFFFFFFFFFFFFF8LL;
            }
            id v245 = v206;
            sub_1001E927C();
            uint64_t v215 = _CocoaArrayWrapper.endIndex.getter(v244);
            sub_1001AA9C8();
          }

          else
          {
            uint64_t v215 = *(void *)((v269[0] & 0xFFFFFFFFFFFFF8LL) + 0x10);
            id v216 = v206;
          }

          uint64_t v217 = v247;
          unint64_t v218 = v252;
          if (v215) {
            sub_10024C2C8(v214);
          }
          else {
            swift_bridgeObjectRelease(v214);
          }
          sub_1001F8804();
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          sub_1001AA9C8();
          sub_1001F8588(v117, "removePendingMembers:triggeredLocally:", (uint64_t)isa);

          v269[0] = (uint64_t)v260;
          uint64_t v221 = sub_1001F84C8(OBJC_IVAR___CSDPendingMembershipTracker_delegate);
          uint64_t v222 = v221;
          if ((_DWORD)v217)
          {
            if (!v221)
            {
LABEL_47:
              uint64_t v236 = sub_1001F84C8(OBJC_IVAR___CSDPendingMembershipTracker_messenger);
              if (v236)
              {
                uint64_t v237 = (void *)v236;
                sub_1001F7D5C( (unint64_t *)&qword_100447ED0,  &qword_10044A410,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
                sub_10010B960();
                Class v238 = sub_1001F87A4().super.isa;
                sub_1001AA9C8();
                Class v239 = sub_1001F8788().super.isa;
                [v237 sendDelegationResponseMessageTo:v238 conversation:v117 transactionUUID:v239 forMember:v206 withResponse:v217];

                sub_1001F84C0();
              }

              else
              {
                sub_1001AA9C8();
              }

              uint64_t v240 = v262;
              id v241 = (void (*)(uint64_t))v263;
              sub_1001B204C(v253, v253[3]);
              sub_1001F6858((uint64_t)v254, (uint64_t)v203);
              sub_1001BB39C(v240, v218);
              sub_1001F86F8((uint64_t)&a18);
              uint64_t v242 = sub_1001F8824();
              v241(v242);
              goto LABEL_27;
            }

            Class v223 = sub_1001F87CC().super.isa;
            uint64_t v224 = (void *)sub_1001F87F0();
            [v224 v225];

            uint64_t v226 = v222;
          }

          else
          {
            if (v221)
            {
              Class v227 = sub_1001F87CC().super.isa;
              uint64_t v228 = (void *)sub_1001F87F0();
              [v228 v229];

              uint64_t v221 = swift_unknownObjectRelease(v222);
            }

            id v230 = sub_1001F8700(v221, "rejectedMembers");
            uint64_t v231 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v230, v249, v120);

            uint64_t v267 = v231;
            Class v232 = Set._bridgeToObjectiveC()().super.isa;
            sub_1001AA9C8();
            [v117 setRejectedMembers:v232];

            id v234 = sub_1001F8700(v233, "delegate");
            if (!v234) {
              goto LABEL_47;
            }
            uint64_t v235 = (uint64_t)v234;
            [v234 conversationChanged:v117];
            uint64_t v226 = v235;
          }

          swift_unknownObjectRelease(v226);
          goto LABEL_47;
        }
      }

      else
      {
        sub_1001F8510((uint64_t)v47);
        sub_1001F86A0();
      }

      id v172 = sub_1001704C4();
      uint64_t v173 = sub_1001C7370(v250, 192LL);
      *(_OWORD *)(v173 + sub_1001EEB94(v0 + 16) = xmmword_10037B140;
      v269[0] = (uint64_t)v109;
      uint64_t v174 = sub_1001AFF14(&qword_1004499A0);
      uint64_t v175 = sub_1001F84FC(v174);
      sub_1001F8650(v175, v176);
      uint64_t v177 = sub_1001F86A8();
      sub_1001F8490(v177, v178);
      uint64_t v179 = sub_1001F8484();
      *(void *)(v173 + 136) = &type metadata for String;
      *(void *)(v173 + 144) = v102;
      *(void *)(v173 + 112) = v179;
      *(void *)(v173 + 120) = v180;
      sub_1001F852C((uint64_t)v47, v265);
      uint64_t v181 = sub_1001F8484();
      uint64_t v183 = sub_1001F8590(v181, v182);
      sub_1001F8468( (uint64_t)"Hosted remote action does not match what we expect -- ignoring {expectedDestinations: %@, from: %@, inf o.transactionUUID: %@, transactionUUID: %@}",  146LL,  v184,  (uint64_t)&_mh_execute_header,  v185,  v183);
      sub_1001F8678();

      sub_1001AA9C8();
    }

    sub_1001F854C();
    uint64_t v201 = (uint64_t)v254;
    uint64_t v202 = v114;
LABEL_26:
    v94(v201, v202);
    goto LABEL_27;
  }

  sub_1001C6CE4(v21, &qword_100448BC0);
  id v61 = sub_1001704C4();
  uint64_t v62 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v63 = sub_1001C7370(v62, 112LL);
  *(_OWORD *)(v63 + sub_1001EEB94(v0 + 16) = xmmword_10037B1B0;
  uint64_t v64 = v257;
  sub_1001F87E8(v258, (uint64_t)v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16));
  uint64_t v65 = sub_1001F8554();
  uint64_t v67 = v66;
  *(void *)(v63 + 56) = &type metadata for String;
  unint64_t v68 = sub_1001B2330();
  *(void *)(v63 + 64) = v68;
  *(void *)(v63 + 32) = v65;
  *(void *)(v63 + 40) = v67;
  v269[0] = (uint64_t)[v256 handle];
  uint64_t v69 = sub_1001B4C00(v269[0], &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
  uint64_t v70 = sub_1001F84FC(v69);
  *(void *)(v63 + 96) = &type metadata for String;
  *(void *)(v63 + 104) = v68;
  *(void *)(v63 + 72) = v70;
  *(void *)(v63 + 80) = v71;
  uint64_t v72 = static os_log_type_t.default.getter(v70);
  sub_1001F8468( (uint64_t)"No info matching remote user action -- ignoring {uuid: %@, handle: %@}",  70LL,  v73,  (uint64_t)&_mh_execute_header,  v74,  v72);

  sub_1001AA9C8();
  (*(void (**)(char *, void))(v43 + 8))(v53, v64);
LABEL_27:
  sub_1001B0FF8();
}

void sub_1001F51CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  id v28 = v27;
  char v30 = v29;
  sub_1001AFF14(&qword_100448BC0);
  sub_1001B0E88();
  __chkstk_darwin(v31);
  sub_1001BB578();
  uint64_t v199 = sub_1001F8508();
  sub_1001B0E88();
  __chkstk_darwin(v32);
  sub_1001F85A4();
  __chkstk_darwin(v33);
  uint64_t v200 = (char *)v190 - v34;
  uint64_t v35 = sub_1001B1234();
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)v190 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v36);
  id v41 = (char *)v190 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v45 = (char *)v190 - v44;
  if (qword_1004468E0 != -1)
  {
    uint64_t v198 = v42;
    id v197 = v43;
    swift_once(&qword_1004468E0, sub_1001F6E34);
  }

  sub_1001F8710();
  if ((v48 & 1) != 0)
  {
    uint64_t v200 = (char *)sub_1001704C4();
    uint64_t v49 = static os_log_type_t.default.getter(v200);
    os_log(_:dso:log:type:_:)( "Local user action for pending member attempted, disabled -- ignoring",  68LL,  2LL,  &_mh_execute_header,  v200,  v49,  _swiftEmptyArrayStorage);
    sub_1001F8450(v200);
  }

  else
  {
    uint64_t v198 = v46;
    id v197 = v47;
    int v50 = v30 & 1;
    id v51 = [v26 groupUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

    uint64_t v194 = v21;
    uint64_t v52 = *(void *)(v21 + OBJC_IVAR___CSDPendingMembershipTracker_storage + 24);
    uint64_t v192 = (void *)(v21 + OBJC_IVAR___CSDPendingMembershipTracker_storage);
    sub_1001F861C((void *)(v21 + OBJC_IVAR___CSDPendingMembershipTracker_storage), v52);
    *(void *)&__int128 v195 = v26;
    id v53 = sub_1001F8838();
    sub_1001F6058((uint64_t)v45, (uint64_t)v53);

    uint64_t v54 = v199;
    int v55 = sub_1001AB0AC(v20, 1LL, v199);
    uint64_t v196 = v45;
    int v193 = v50;
    if (v55 == 1)
    {
      sub_1001C6CE4(v20, &qword_100448BC0);
      id v56 = sub_1001704C4();
      uint64_t v57 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v58 = sub_1001C7370(v57, 152LL);
      *(_OWORD *)(v58 + sub_1001EEB94(v0 + 16) = xmmword_10037B6E0;
      uint64_t v59 = v198;
      (*((void (**)(char *, char *, uint64_t))v197 + 2))(v41, v45, v198);
      uint64_t v60 = String.init<A>(reflecting:)(v41, v59);
      uint64_t v62 = v61;
      *(void *)(v58 + 56) = &type metadata for String;
      uint64_t v63 = (void *)sub_1001B2330();
      *(void *)(v58 + 64) = v63;
      *(void *)(v58 + 32) = v60;
      *(void *)(v58 + 40) = v62;
      v204[0] = (uint64_t)sub_1001F8838();
      sub_1001B4C00(v204[0], &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      uint64_t v64 = sub_1001F851C((uint64_t)v204);
      *(void *)(v58 + 96) = &type metadata for String;
      *(void *)(v58 + 104) = v63;
      *(void *)(v58 + 72) = v64;
      *(void *)(v58 + 80) = v65;
      v204[0] = (uint64_t)v28;
      uint64_t v66 = (char *)sub_1001B4C00(v64, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
      id v67 = v28;
      uint64_t v200 = v66;
      uint64_t v68 = sub_1001F8670((uint64_t)v204);
      *(void *)(v58 + 136) = &type metadata for String;
      *(void *)(v58 + 144) = v63;
      *(void *)(v58 + 112) = v68;
      *(void *)(v58 + 120) = v69;
      uint64_t v70 = static os_log_type_t.default.getter(v68);
      os_log(_:dso:log:type:_:)( "No info matching local user action {uuid: %@, handle: %@}, remove pending member: %@",  84LL,  2LL,  &_mh_execute_header,  v56,  v70,  v58);

      sub_1001B2428();
      uint64_t v71 = (void *)v195;
      if ([(id)v195 shouldRespondToLetMeInRequestForMember:v67])
      {
        uint64_t v72 = sub_1001C7370(v57, 72LL);
        *(_OWORD *)(v72 + sub_1001EEB94(v0 + 16) = xmmword_10037B290;
        id v73 = sub_1001F0E20(v72, "handle");
        if (v193)
        {
          v204[0] = (uint64_t)v73;
          uint64_t v155 = sub_1001F851C((uint64_t)v204);
          *(void *)(v72 + 56) = &type metadata for String;
          *(void *)(v72 + 64) = v63;
          *(void *)(v72 + 32) = v155;
          *(void *)(v72 + 40) = v156;
          uint64_t v157 = sub_1001B4C00(v155, (unint64_t *)&unk_10044C050, &OBJC_CLASS___OS_os_log_ptr);
          static OS_os_log.default.getter();
          uint64_t v158 = sub_1001B11C8();
          sub_1001F8630( (uint64_t)"Approve the request, remove pending member and add remote member: %@",  68LL,  2LL,  (uint64_t)&_mh_execute_header,  (uint64_t)v63,  v158);
          sub_1001B0EC0();

          uint64_t v159 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          uint64_t inited = swift_initStackObject(v159, &v203);
          *(_OWORD *)(inited + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
          *(void *)(inited + 32) = v67;
          sub_1001F8478(inited, v161, v162, v163, v164, v165, v166, v167, v190[0]);
          sub_1001F8768();
          id v168 = v71;
          if (v169)
          {
            sub_1001F8688();
            sub_1001EE280();
            sub_1001F8698();
            sub_1001B4C30();
          }

          else
          {
            sub_1001F8748();
          }

          if (v157) {
            sub_10024C2C8((uint64_t)v63);
          }
          else {
            swift_bridgeObjectRelease(v63);
          }
          sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
          sub_10010B960();
          v181.super.Class isa = sub_1001F87A4().super.isa;
          sub_1001AA9C8();
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
              sub_10024C504((uint64_t)_swiftEmptyArrayStorage);
            }
            id v168 = v71;
          }

          sub_1001F7D5C( (unint64_t *)&qword_100447ED0,  &qword_10044A410,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          sub_1001AA9C8();
          [v168 addRemoteMembers:v181.super.isa otherInvitedHandles:isa triggeredLocally:1];
        }

        else
        {
          v204[0] = (uint64_t)v73;
          uint64_t v74 = sub_1001F851C((uint64_t)v204);
          *(void *)(v72 + 56) = &type metadata for String;
          *(void *)(v72 + 64) = v63;
          *(void *)(v72 + 32) = v74;
          *(void *)(v72 + 40) = v75;
          uint64_t v76 = (void *)sub_1001B4C00(v74, (unint64_t *)&unk_10044C050, &OBJC_CLASS___OS_os_log_ptr);
          static OS_os_log.default.getter();
          uint64_t v77 = sub_1001B11C8();
          sub_1001F8630( (uint64_t)"Decline the request, remove pending member: %@",  46LL,  2LL,  (uint64_t)&_mh_execute_header,  (uint64_t)v63,  v77);
          sub_1001B0EC0();

          uint64_t v78 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          uint64_t v79 = sub_1001F87E0(v78);
          *(_OWORD *)(v79 + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
          *(void *)(v79 + 32) = v67;
          sub_1001F8478(v79, v80, v81, v82, v83, v84, v85, v86, v190[0]);
          sub_1001F8768();
          if (v87)
          {
            sub_1001F8688();
            sub_1001EE280();
            sub_1001F8698();
            sub_1001B4C30();
          }

          else
          {
            sub_1001F8748();
          }

          if (v76) {
            sub_10024C2C8((uint64_t)v63);
          }
          else {
            swift_bridgeObjectRelease(v63);
          }
          sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
          Set._bridgeToObjectiveC()();
          sub_1001B4C30();
          sub_1001F8588(v71, "removePendingMembers:triggeredLocally:", (uint64_t)v76);

          id v180 = sub_1001B115C(v179, "delegate");
          if (v180)
          {
            [v180 conversationChanged:v71];
            sub_1001F84C0();
          }
        }
      }

      (*((void (**)(char *, uint64_t))v197 + 1))(v196, v198);
    }

    else
    {
      uint64_t v88 = (uint64_t)v200;
      sub_1001E8DC4(v20, (uint64_t)v200);
      v190[0] = (uint64_t)sub_1001704C4();
      uint64_t v89 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v90 = sub_1001C7370(v89, 232LL);
      *(_OWORD *)(v90 + sub_1001EEB94(v0 + 16) = xmmword_10037B130;
      sub_1001E8D80(v88, v22);
      uint64_t v91 = String.init<A>(reflecting:)(v22, v54);
      uint64_t v93 = v92;
      *(void *)(v90 + 56) = &type metadata for String;
      unint64_t v94 = sub_1001B2330();
      *(void *)(v90 + 64) = v94;
      *(void *)(v90 + 32) = v91;
      *(void *)(v90 + 40) = v93;
      uint64_t v95 = v198;
      LOBYTE(v204[0]) = v50;
      uint64_t v96 = String.init<A>(reflecting:)(v204, &unk_1003E0488);
      *(void *)(v90 + 96) = &type metadata for String;
      *(void *)(v90 + 104) = v94;
      *(void *)(v90 + 72) = v96;
      *(void *)(v90 + 80) = v97;
      v204[0] = (uint64_t)v28;
      uint64_t v98 = sub_1001B4C00(v96, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
      id v99 = v28;
      v190[1] = v98;
      uint64_t v100 = sub_1001F8670((uint64_t)v204);
      *(void *)(v90 + 136) = &type metadata for String;
      *(void *)(v90 + 144) = v94;
      *(void *)(v90 + 112) = v100;
      *(void *)(v90 + 120) = v101;
      unint64_t v102 = (void *)v195;
      id v103 = sub_1001D909C(v100, "groupUUID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v103);

      uint64_t v104 = v197;
      sub_1001F87E8((uint64_t)v38, (uint64_t)v41, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v197 + 2));
      uint64_t v105 = sub_1001F8554();
      uint64_t v107 = v106;
      id v191 = (uint64_t (*)(char *, uint64_t))v104[1];
      uint64_t v108 = v191(v41, v95);
      *(void *)(v90 + 176) = &type metadata for String;
      *(void *)(v90 + 184) = v94;
      *(void *)(v90 + 152) = v105;
      *(void *)(v90 + 160) = v107;
      v204[0] = (uint64_t)v102;
      uint64_t v109 = sub_1001B4C00(v108, &qword_100447CA8, off_1003D5D88);
      id v110 = v102;
      uint64_t v111 = sub_1001F84B8((uint64_t)v204);
      *(void *)(v90 + 2sub_1001EEB94(v0 + 16) = &type metadata for String;
      *(void *)(v90 + 224) = v94;
      char v112 = v99;
      *(void *)(v90 + 192) = v111;
      *(void *)(v90 + 200) = v113;
      uint64_t v114 = static os_log_type_t.default.getter(v111);
      char v115 = (void *)v190[0];
      os_log(_:dso:log:type:_:)( "Processing local user action for pending member {info: %@, action: %@, member: %@, conversation.groupUUID: %@, c onversation: %@}",  128LL,  2LL,  &_mh_execute_header,  v190[0],  v114,  v90);

      sub_1001B0EB8();
      uint64_t v116 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v117 = swift_initStackObject(v116, &v202);
      __int128 v195 = xmmword_10037B200;
      *(_OWORD *)(v117 + sub_1001EEB94(v0 + 16) = xmmword_10037B200;
      *(void *)(v117 + 32) = v99;
      sub_1001F8478(v117, v118, v119, v120, v121, v122, v123, v124, v190[0]);
      uint64_t v125 = v204[0];
      if ((unint64_t)v204[0] >> 62)
      {
        sub_1001F86E8();
        sub_1001E927C();
        uint64_t v109 = sub_1001F8738();
        sub_1001AA9C8();
      }

      else
      {
        sub_1001F877C();
      }

      uint64_t v126 = (uint64_t)v196;
      if (v109) {
        sub_10024C2C8(v125);
      }
      else {
        swift_bridgeObjectRelease(v125);
      }
      sub_1001F7D5C( (unint64_t *)&qword_10044A420,  (unint64_t *)&unk_100447E20,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
      Class v127 = Set._bridgeToObjectiveC()().super.isa;
      sub_1001AA9C8();
      id v197 = v110;
      sub_1001F8588(v110, "removePendingMembers:triggeredLocally:", (uint64_t)v127);

      uint64_t v128 = &v200[*(int *)(v199 + 20)];
      uint64_t v130 = *(void **)v128;
      uint64_t v129 = *((void *)v128 + 1);
      unint64_t v131 = *((void *)v128 + 2);
      if ((v131 & 0x2000000000000000LL) != 0)
      {
        uint64_t v142 = swift_initStackObject(v116, &v201);
        *(_OWORD *)(v142 + sub_1001EEB94(v0 + 16) = v195;
        *(void *)(v142 + 32) = v130;
        sub_1001F8478(v142, v143, v144, v145, v146, v147, v148, v149, v190[0]);
        sub_1001F8768();
        if (v150)
        {
          if (v116 < 0) {
            uint64_t v151 = v116;
          }
          else {
            uint64_t v151 = v116 & 0xFFFFFFFFFFFFFF8LL;
          }
          sub_1001F84E0();
          sub_1001F84E0();
          sub_1001EE280();
          sub_1001F8698();
          sub_1001B4C30();
        }

        else
        {
          uint64_t v151 = *(void *)((v116 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          sub_1001F84E0();
          id v152 = v130;
        }

        if (v151)
        {
          sub_10024C504(v116);
          uint64_t v154 = (void *)v153;
        }

        else
        {
          uint64_t v153 = swift_bridgeObjectRelease(v116);
          uint64_t v154 = &_swiftEmptySetSingleton;
        }

        if (v193)
        {
          sub_1001F84D0();
          uint64_t v178 = 1LL;
        }

        else
        {
          uint64_t v173 = v197;
          id v174 = sub_1001D909C(v153, "rejectedMembers");
          uint64_t v175 = sub_1001F86D8((uint64_t)v174);

          v204[0] = v175;
          sub_1001F8574();
          sub_1001B4C30();
          sub_1001D8FD4(v173, "setRejectedMembers:");

          id v177 = sub_1001D909C(v176, "delegate");
          if (v177)
          {
            [v177 conversationChanged:v173];
            sub_1001F84D0();
            sub_1001F84C0();
          }

          else
          {
            sub_1001F84D0();
          }

          uint64_t v126 = (uint64_t)v196;
          uint64_t v178 = 0LL;
        }
      }

      else
      {
        uint64_t v132 = (void *)sub_1001F84C8(OBJC_IVAR___CSDPendingMembershipTracker_delegate);
        sub_1001F859C();
        uint64_t v133 = sub_1001BB31C(v129, v131);
        if (v193)
        {
          if (v132)
          {
            Class v170 = sub_1001F87C0().super.isa;
            uint64_t v171 = (void *)sub_1001F8844();
            [v171 v172];
            sub_1001F84F0();

            sub_1001F84C0();
          }

          else
          {
            sub_1001F84F0();
          }

          uint64_t v178 = 1LL;
        }

        else
        {
          uint64_t v134 = v197;
          if (v132)
          {
            Class v135 = sub_1001F87C0().super.isa;
            uint64_t v136 = (void *)sub_1001F8844();
            [v136 v137];

            uint64_t v133 = sub_1001F84C0();
          }

          id v138 = sub_1001B115C(v133, "rejectedMembers");
          uint64_t v139 = sub_1001F86D8((uint64_t)v138);

          v204[0] = v139;
          sub_1001F8574();
          sub_1001B4C30();
          sub_1001D8FD4(v134, "setRejectedMembers:");

          id v141 = sub_1001B115C(v140, "delegate");
          if (v141)
          {
            [v141 conversationChanged:v134];
            sub_1001F84F0();
            sub_1001F84C0();
          }

          else
          {
            sub_1001F84F0();
          }

          uint64_t v178 = 0LL;
        }

        uint64_t v154 = v130;
      }

      uint64_t v183 = sub_1001F84C8(OBJC_IVAR___CSDPendingMembershipTracker_messenger);
      if (v183)
      {
        uint64_t v184 = (void *)v183;
        sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
        sub_1001F7D5C( (unint64_t *)&qword_100447ED0,  &qword_10044A410,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
        Class v185 = Set._bridgeToObjectiveC()().super.isa;
        sub_1001B2428();
        Class v186 = sub_1001F8788().super.isa;
        [v184 sendDelegationResponseMessageTo:v185 conversation:v197 transactionUUID:v186 forMember:v112 withResponse:v178];

        swift_unknownObjectRelease(v184);
      }

      else
      {
        sub_1001B2428();
      }

      uint64_t v187 = v198;
      id v188 = sub_1001F861C(v192, v192[3]);
      id v189 = sub_1001F0E20((uint64_t)v188, "handle");
      sub_1001F871C(v126, (uint64_t)v189);

      if (v154) {
        sub_1001F8524();
      }
      sub_1001F86F8((uint64_t)&a17);
      v191((char *)v126, v187);
    }

    sub_1001B0FF8();
  }

id sub_1001F5F7C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PendingMembershipTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PendingMembershipTracker()
{
  return objc_opt_self(&OBJC_CLASS___CSDPendingMembershipTracker);
}

void sub_1001F6024(uint64_t a1)
{
}

uint64_t sub_1001F6058(uint64_t a1, uint64_t a2)
{
  id v4 = (id)TUCopyIDSCanonicalAddressForHandle(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;

    sub_1001B0E6C(v2 + 16, (uint64_t)v21);
    uint64_t v9 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain(v9);
    sub_1001CA1C0(a1, v9);
    uint64_t v11 = v10;
    sub_1001B0F28();
    if (v11)
    {
      sub_1001CA1F0(v6, v8, v11);
      sub_1001AA9C8();
      return sub_1001B0F5C();
    }

    else
    {
      sub_1001B0F5C();
      sub_1001F8508();
      uint64_t v17 = sub_1001AA9D0();
      return sub_1001A9670(v17, v18, v19, v20);
    }
  }

  else
  {
    type metadata accessor for PendingMembershipInfo(0LL);
    uint64_t v13 = sub_1001AA9D0();
    return sub_1001A9670(v13, v14, v15, v16);
  }

#error "1001F6190: call analysis failed (funcsize=35)"
void sub_1001F61C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  Swift::Int v42;
  unint64_t v43;
  char v44;
  Swift::Bool v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  sub_1001B0F10();
  uint64_t v3 = sub_1001B1234();
  id v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B0EA0();
  sub_1001AFF14(&qword_100448BD0);
  sub_1001B0E88();
  __chkstk_darwin(v5);
  sub_1001F85A4();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v52 - v7;
  sub_1001B0E6C(v0 + 16, (uint64_t)&v64);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v9 + 64);
  id v53 = v9 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  uint64_t v13 = v12 & v10;
  uint64_t v54 = (unint64_t)(v11 + 63) >> 6;
  int v55 = v9;
  uint64_t v52 = v54 - 1;
  swift_bridgeObjectRetain(v9);
  uint64_t v60 = 0LL;
  uint64_t v14 = &_swiftEmptyDictionarySingleton;
  uint64_t v61 = v1;
  id v56 = v8;
  uint64_t v57 = v2;
  if (!v13) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v15 = v14;
  uint64_t v62 = (v13 - 1) & v13;
  uint64_t v16 = __clz(__rbit64(v13)) | (v60 << 6);
LABEL_5:
  uint64_t v17 = v55;
  sub_1001F8740( v2,  *(void *)(v55 + 48) + *(void *)(v4 + 72) * v16,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  uint64_t v18 = *(void *)(v17 + 56);
  uint64_t v19 = sub_1001F8708();
  *(void *)(v2 + *(int *)(v19 + 48)) = *(void *)(v18 + 8 * v16);
  sub_1001A9670(v2, 0LL, 1LL, v19);
  sub_1001B9234();
  char v1 = v61;
  uint64_t v14 = v15;
  while (1)
  {
    sub_1001F7DD4(v2, (uint64_t)v8, &qword_100448BD0);
    uint64_t v24 = sub_1001F8708();
    if (sub_1001AB0AC((uint64_t)v8, 1LL, v24) == 1)
    {
      swift_release(v55);
      sub_1001B0FF8();
      return;
    }

    uint64_t v25 = *(void *)&v8[*(int *)(v24 + 48)];
    sub_1001F8740(v1, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      uint64_t v59 = v14;
      uint64_t v27 = sub_1001AFF14((uint64_t *)&unk_100448538);
      id v28 = *(void *)(sub_1001F8508() - 8);
      char v29 = *(void *)(v28 + 72);
      char v30 = *(unsigned __int8 *)(v28 + 80);
      uint64_t v31 = (v30 + 32) & ~v30;
      uint64_t v32 = (void *)swift_allocObject(v27, v31 + v29 * v26, v30 | 7);
      uint64_t v33 = j__malloc_size(v32);
      if (!v29) {
        goto LABEL_46;
      }
      if (v33 - v31 == 0x8000000000000000LL && v29 == -1) {
        goto LABEL_50;
      }
      _OWORD v32[2] = v26;
      void v32[3] = 2 * ((uint64_t)(v33 - v31) / v29);
      sub_1001E89B0(&v63, (uint64_t)v32 + v31, v26, v25);
      uint64_t v58 = v35;
      uint64_t v36 = (uint64_t)v63;
      sub_1001B9234();
      sub_1001B4B8C(v36);
      if (v58 != v26) {
        goto LABEL_47;
      }
      sub_1001B0F5C();
      char v1 = v61;
      uint64_t v14 = v59;
    }

    else
    {
      sub_1001B0F5C();
      uint64_t v32 = _swiftEmptyArrayStorage;
    }

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    uint64_t v63 = v14;
    uint64_t v38 = sub_1001D7184(v1);
    uint64_t v40 = v14[2];
    id v41 = (v39 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      break;
    }
    uint64_t v43 = v38;
    uint64_t v44 = v39;
    sub_1001AFF14(&qword_100448BE0);
    uint64_t v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
    uint64_t v8 = v56;
    uint64_t v2 = v57;
    if (v45)
    {
      uint64_t v46 = sub_1001D7184(v1);
      if ((v44 & 1) != (v47 & 1)) {
        goto LABEL_52;
      }
      uint64_t v43 = v46;
    }

    uint64_t v14 = v63;
    if ((v44 & 1) != 0)
    {
      char v48 = v63[7];
      swift_bridgeObjectRelease(*(void *)(v48 + 8 * v43));
      *(void *)(v48 + 8 * v43) = v32;
    }

    else
    {
      v63[(v43 >> 6) + 8] |= 1LL << v43;
      sub_1001F8740( v14[6] + *(void *)(v4 + 72) * v43,  v1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
      *(void *)(v14[7] + 8 * v43) = v32;
      uint64_t v49 = v14[2];
      int v50 = __OFADD__(v49, 1LL);
      id v51 = v49 + 1;
      if (v50) {
        goto LABEL_48;
      }
      v14[2] = v51;
    }

    swift_bridgeObjectRelease(0x8000000000000000LL);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
    uint64_t v13 = v62;
    if (v62) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v20 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      goto LABEL_49;
    }
    if (v20 < v54)
    {
      uint64_t v21 = *(void *)(v53 + 8 * v20);
      if (v21) {
        goto LABEL_9;
      }
      uint64_t v22 = v60 + 2;
      ++v60;
      if (v20 + 1 < v54)
      {
        uint64_t v21 = *(void *)(v53 + 8 * v22);
        if (v21) {
          goto LABEL_12;
        }
        uint64_t v60 = v20 + 1;
        if (v20 + 2 < v54)
        {
          uint64_t v21 = *(void *)(v53 + 8 * (v20 + 2));
          if (v21)
          {
            v20 += 2LL;
            goto LABEL_9;
          }

          uint64_t v22 = v20 + 3;
          uint64_t v60 = v20 + 2;
          if (v20 + 3 < v54)
          {
            uint64_t v21 = *(void *)(v53 + 8 * v22);
            if (!v21)
            {
              while (1)
              {
                uint64_t v20 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_51;
                }
                if (v20 >= v54)
                {
                  uint64_t v60 = v52;
                  goto LABEL_23;
                }

                uint64_t v21 = *(void *)(v53 + 8 * v20);
                ++v22;
                if (v21) {
                  goto LABEL_9;
                }
              }
            }

void sub_1001F6698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  sub_1001AFF14(&qword_100448BC0);
  sub_1001B0E88();
  __chkstk_darwin(v9);
  sub_1001BB560();
  id v10 = (id)TUCopyIDSCanonicalAddressForHandle(a3);
  if (v10)
  {
    uint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    sub_1001F8534();
    uint64_t v12 = *(void *)(v5 + 16);
    sub_1001F859C();
    sub_1001CA1C0(a2, v12);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v12);
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
    if (v14) {
      uint64_t v15 = v14;
    }
    uint64_t v28 = (uint64_t)v15;
    sub_1001E8D80(a1, v4);
    uint64_t v16 = type metadata accessor for PendingMembershipInfo(0LL);
    sub_1001A9670(v4, 0LL, 1LL, v16);
    sub_1001F85F0();
    sub_1001F85DC();
    sub_1001F8724(v28);
    swift_endAccess(v27);
    id v17 = sub_1001704C4();
    uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v19 = (__n128 *)sub_1001DEA68(v18);
    sub_1001F8640(v19, (__n128)xmmword_10037B290);
    uint64_t v20 = sub_1001AFF14(&qword_100448BB8);
    uint64_t v21 = sub_1001F8818(v20);
    unint64_t v23 = v22;
    v19[3].n128_u64[1] = (unint64_t)&type metadata for String;
    unint64_t v24 = sub_1001B2330();
    v19[4].n128_u64[0] = v24;
    v19[2].n128_u64[0] = v21;
    v19[2].n128_u64[1] = v23;
    static os_log_type_t.default.getter(v24);
    sub_1001F8878();
    os_log(_:dso:log:type:_:)(v25);

    swift_bridgeObjectRelease(v19);
  }

  else
  {
    unint64_t v26 = sub_1001F75B0();
    sub_1001BB4C8((uint64_t)&unk_1003E0518, v26);
    sub_1001F8858();
  }

  sub_1001BB4EC();
}

void sub_1001F6858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_1001AFF14(&qword_100448BC0);
  sub_1001B0E88();
  __chkstk_darwin(v7);
  sub_1001BB560();
  id v8 = (id)TUCopyIDSCanonicalAddressForHandle(a2);
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

    sub_1001F8534();
    uint64_t v10 = *(void *)(v4 + 16);
    sub_1001E927C();
    sub_1001CA1C0(a1, v10);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v10);
    uint64_t v13 = &_swiftEmptyDictionarySingleton;
    if (v12) {
      uint64_t v13 = v12;
    }
    uint64_t v26 = (uint64_t)v13;
    uint64_t v14 = type metadata accessor for PendingMembershipInfo(0LL);
    sub_1001A9670(v3, 1LL, 1LL, v14);
    sub_1001F85F0();
    sub_1001F85DC();
    sub_1001F8724(v26);
    swift_endAccess(v25);
    id v15 = sub_1001704C4();
    uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    id v17 = (__n128 *)sub_1001DEA68(v16);
    sub_1001F8640(v17, (__n128)xmmword_10037B290);
    uint64_t v18 = sub_1001AFF14(&qword_100448BB8);
    uint64_t v19 = sub_1001F8818(v18);
    unint64_t v21 = v20;
    v17[3].n128_u64[1] = (unint64_t)&type metadata for String;
    unint64_t v22 = sub_1001B2330();
    v17[4].n128_u64[0] = v22;
    v17[2].n128_u64[0] = v19;
    v17[2].n128_u64[1] = v21;
    static os_log_type_t.default.getter(v22);
    sub_1001F8878();
    os_log(_:dso:log:type:_:)(v23);

    swift_bridgeObjectRelease(v17);
  }

  else
  {
    unint64_t v24 = sub_1001F75B0();
    sub_1001BB4C8((uint64_t)&unk_1003E0518, v24);
    sub_1001F8858();
  }

  sub_1001BB4EC();
}

uint64_t sub_1001F6A00(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess(v1 + 16, v16, 33LL, 0LL);
  sub_1001FDB1C(a1);
  swift_endAccess(v16);
  sub_1001B0EB8();
  id v4 = sub_1001704C4();
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = sub_1001C7370(v5, 72LL);
  *(_OWORD *)(v6 + sub_1001EEB94(v0 + 16) = xmmword_10037B290;
  v16[0] = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(v16[0]);
  uint64_t v7 = sub_1001AFF14(&qword_100448BB8);
  uint64_t v8 = String.init<A>(reflecting:)(v16, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v11 = sub_1001B2330();
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  sub_1001F8468( (uint64_t)"Removed group from pending membership tracker storage {underlyingStorage: %@}",  77LL,  v13,  (uint64_t)&_mh_execute_header,  v14,  v12);

  return sub_1001AA9C8();
}

uint64_t sub_1001F6B00()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for MemoryPendingMembershipTrackerStorage()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd37MemoryPendingMembershipTrackerStorage);
}

id sub_1001F6B44(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  id result = [(id)objc_opt_self(FTServerBag) sharedInstance];
  if (result)
  {
    uint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v29, v9);
      swift_unknownObjectRelease(v9);
    }

    else
    {
      memset(v29, 0, sizeof(v29));
    }

    sub_1001F7DD4((uint64_t)v29, (uint64_t)v30, (uint64_t *)&unk_1004474B0);
    if (v30[3])
    {
      uint64_t v10 = sub_1001B4B94(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
      if ((swift_dynamicCast(&v28, v30, (char *)&type metadata for Any + 8, v10, 6LL) & 1) != 0)
      {
        unint64_t v11 = v28;
        id v12 = sub_1001704C4();
        uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
        *(_OWORD *)(v14 + sub_1001EEB94(v0 + 16) = xmmword_10037B1B0;
        *(void *)(v14 + 56) = &type metadata for String;
        *(void *)(v14 + 64) = sub_1001B2330();
        *(void *)(v14 + 32) = a1;
        *(void *)(v14 + 40) = a2;
        *(void *)(v14 + 96) = v10;
        sub_1001F7D5C( (unint64_t *)&qword_100448788,  (unint64_t *)&qword_100448780,  &OBJC_CLASS___NSNumber_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
        *(void *)(v14 + 104) = v15;
        *(void *)(v14 + 72) = v11;
        swift_bridgeObjectRetain(a2);
        id v16 = v11;
        uint64_t v17 = static os_log_type_t.default.getter(v16);
        os_log(_:dso:log:type:_:)( "Got %@ from server bag with a value of: %@",  42LL,  2LL,  &_mh_execute_header,  v12,  v17,  v14);

        swift_bridgeObjectRelease(v14);
        a3 = [v16 BOOLValue];

        return (id)(a3 & 1);
      }
    }

    else
    {
      sub_1001C6CE4((uint64_t)v30, (uint64_t *)&unk_1004474B0);
    }

    id v18 = sub_1001704C4();
    uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
    *(_OWORD *)(v20 + sub_1001EEB94(v0 + 16) = xmmword_10037B1B0;
    v30[0] = a1;
    v30[1] = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v21 = String.init<A>(reflecting:)(v30, &type metadata for String);
    uint64_t v23 = v22;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v24 = sub_1001B2330();
    *(void *)(v20 + 64) = v24;
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v23;
    LOBYTE(v30[0]) = a3 & 1;
    uint64_t v25 = String.init<A>(reflecting:)(v30, &type metadata for Bool);
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v24;
    *(void *)(v20 + 72) = v25;
    *(void *)(v20 + 80) = v26;
    uint64_t v27 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:type:_:)( "Server bag does not have a value for %@, so returning the default one of %@ seconds.",  84LL,  2LL,  &_mh_execute_header,  v18,  v27,  v20);

    swift_bridgeObjectRelease(v20);
    return (id)(a3 & 1);
  }

  __break(1u);
  return result;
}

id sub_1001F6E34()
{
  id result = sub_1001F6B44(0x617369642D696D6CLL, 0xEC00000064656C62LL, 0);
  byte_100448940 = result & 1;
  return result;
}

id sub_1001F6E74()
{
  id result = sub_1001F6B44(0xD000000000000017LL, 0x8000000100370770LL, 0);
  byte_100448941 = result & 1;
  return result;
}

uint64_t type metadata accessor for SharedPendingMembershipBag()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesdP33_29A092E378431E19BF8C7D5BE1CFB24A26SharedPendingMembershipBag);
}

uint64_t *sub_1001F6ED0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    id v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *(void **)v10;
    uint64_t v12 = *((void *)v10 + 1);
    unint64_t v13 = *((void *)v10 + 2);
    sub_1001F6FC4(*(void **)v10, v12, v13);
    *id v9 = v11;
    v9[1] = v12;
    void v9[2] = v13;
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    id v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v16;
    uint64_t v17 = (char *)a1 + v15;
    id v18 = (char *)a2 + v15;
    uint64_t v19 = type metadata accessor for Date(0LL);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL);
    id v21 = v16;
    v20(v17, v18, v19);
  }

  return a1;
}

id sub_1001F6FC4(void *a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000LL) != 0) {
    return a1;
  }
  swift_bridgeObjectRetain(a1);
  return (id)sub_1001BB31C(a2, a3);
}

uint64_t sub_1001F6FF8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_1001F7074(*(void **)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8), *(void *)(a1 + a2[5] + 16));

  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

void sub_1001F7074(void *a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000LL) != 0)
  {
  }

  else
  {
    swift_bridgeObjectRelease(a1);
    sub_1001BB39C(a2, a3);
  }

uint64_t sub_1001F70A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  unint64_t v12 = *(void *)(v9 + 16);
  sub_1001F6FC4(*(void **)v9, v11, v12);
  *uint64_t v8 = v10;
  v8[1] = v11;
  void v8[2] = v12;
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v15;
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL);
  id v20 = v15;
  v19(v16, v17, v18);
  return a1;
}

uint64_t sub_1001F7170(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  unint64_t v12 = *(void *)(v9 + 16);
  sub_1001F6FC4(*(void **)v9, v11, v12);
  uint64_t v13 = *(void **)v8;
  uint64_t v14 = *(void *)(v8 + 8);
  unint64_t v15 = *(void *)(v8 + 16);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v11;
  *(void *)(v8 + sub_1001EEB94(v0 + 16) = v12;
  sub_1001F7074(v13, v14, v15);
  uint64_t v16 = a3[6];
  uint64_t v17 = *(void **)(a2 + v16);
  uint64_t v18 = *(void **)(a1 + v16);
  *(void *)(a1 + vsub_1001EEB94(v0 + 16) = v17;
  id v19 = v17;

  uint64_t v20 = a3[7];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24LL))(v21, v22, v23);
  return a1;
}

uint64_t sub_1001F724C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  uint64_t v11 = *(void *)(a2 + v8);
  *(void *)(v9 + sub_1001EEB94(v0 + 16) = *(void *)(v10 + 16);
  *(void *)(a1 + v_Block_object_dispose(va, 8) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_1001F72EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void **)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  unint64_t v13 = *(void *)(v8 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + sub_1001EEB94(v0 + 16) = v10;
  sub_1001F7074(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);

  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_1001F73A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F73B0);
}

uint64_t sub_1001F73B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)(sub_1001B1234() - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v6 = sub_10010B960();
    return sub_1001AB0AC(v6, a2, v7);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v7 = sub_1001F86B8();
    uint64_t v6 = a1 + *(int *)(a3 + 28);
    return sub_1001AB0AC(v6, a2, v7);
  }

  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v_Block_object_dispose(va, 8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1001F7440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F744C);
}

uint64_t sub_1001F744C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1001B1234();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = (a2 - 1);
      return result;
    }

    uint64_t v9 = sub_1001F86B8();
    uint64_t v10 = a1 + *(int *)(a4 + 28);
  }

  return sub_1001A9670(v10, a2, a2, v9);
}

uint64_t type metadata accessor for PendingMembershipInfo(uint64_t a1)
{
  uint64_t result = qword_100448B78;
  if (!qword_100448B78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PendingMembershipInfo);
  }
  return result;
}

uint64_t sub_1001F7514(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_10037C1B8;
    uint64_t v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1001F75B0()
{
  unint64_t result = qword_100448BC8;
  if (!qword_100448BC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C2D8, &unk_1003E0518);
    atomic_store(result, (unint64_t *)&qword_100448BC8);
  }

  return result;
}

uint64_t sub_1001F75EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingMembershipInfo(0LL);
  uint64_t v46 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int v50 = (char *)&v42 - v9;
  sub_1001AFF14(&qword_100448BF8);
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v11 = (void *)result;
  int64_t v12 = 0LL;
  uint64_t v52 = a1;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v14 = a1 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1LL << *(_BYTE *)(v14 - 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v47 = v14;
  int64_t v48 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v49 = result + 64;
  uint64_t v44 = v8;
  uint64_t v45 = v5;
  uint64_t v43 = (void *)result;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v55 = (v18 - 1) & v18;
  int64_t v56 = v12;
  for (unint64_t i = __clz(__rbit64(v18)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    uint64_t v25 = v51;
    uint64_t v24 = v52;
    uint64_t v26 = *(void *)(v52 + 48);
    unint64_t v57 = *(void *)(v51 + 72) * i;
    uint64_t v27 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v50, v26 + v57, v5);
    uint64_t v28 = *(void *)(*(void *)(v24 + 56) + 8 * i);
    char v29 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v29(v8, v27, v5);
    uint64_t v30 = *(void *)(v28 + 16);
    if (v30)
    {
      uint64_t v54 = v29;
      uint64_t v58 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v28);
      specialized ContiguousArray.reserveCapacity(_:)(v30);
      uint64_t v31 = *(unsigned __int8 *)(v46 + 80);
      uint64_t v53 = v28;
      uint64_t v32 = v28 + ((v31 + 32) & ~v31);
      uint64_t v33 = *(void *)(v46 + 72);
      do
      {
        sub_1001E8D80(v32, (uint64_t)v4);
        id v34 = *(id *)&v4[*(int *)(v2 + 24)];
        uint64_t v35 = sub_1001F7D98((uint64_t)v4);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        uint64_t v36 = v58[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        uint64_t v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
        specialized ContiguousArray._endMutation()(v37);
        v32 += v33;
        --v30;
      }

      while (v30);
      uint64_t v38 = v58;
      swift_bridgeObjectRelease(v53);
      unint64_t v8 = v44;
      uint64_t v5 = v45;
      uint64_t v11 = v43;
      char v29 = v54;
    }

    else
    {
      uint64_t v38 = _swiftEmptyArrayStorage;
    }

    *(void *)(v49 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(v11[6] + v57, v8, v5);
    *(void *)(v11[7] + 8 * i) = v38;
    uint64_t v39 = v11[2];
    BOOL v40 = __OFADD__(v39, 1LL);
    uint64_t v41 = v39 + 1;
    if (v40)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v11[2] = v41;
    unint64_t v18 = v55;
    int64_t v12 = v56;
    if (v55) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_29;
    }
    if (v20 >= v48) {
      return (uint64_t)v11;
    }
    unint64_t v21 = *(void *)(v47 + 8 * v20);
    int64_t v22 = v12 + 1;
    if (!v21)
    {
      int64_t v22 = v12 + 2;
      if (v12 + 2 >= v48) {
        return (uint64_t)v11;
      }
      unint64_t v21 = *(void *)(v47 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v12 + 3;
        if (v12 + 3 >= v48) {
          return (uint64_t)v11;
        }
        unint64_t v21 = *(void *)(v47 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }

#error "1001F79E8: call analysis failed (funcsize=57)"
uint64_t sub_1001F7A6C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t *v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = NSObject._rawHashValue(seed:)(*(void *)(*v2 + 40));
  unint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  uint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
  {
    sub_1001B4B94(0LL, (unint64_t *)&unk_100447E20, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v11 = *(id *)(*(void *)(v6 + 48) + 8 * v9);
    int64_t v12 = static NSObject.== infix(_:_:)(v11, a1);

    if ((v12 & 1) != 0)
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 1;
    }

    else
    {
      uint64_t v15 = ~v8;
      uint64_t v9 = (v9 + 1) & v15;
      if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
      {
        uint64_t v13 = 1LL;
        while (1)
        {
          uint64_t v16 = *(id *)(*(void *)(v6 + 48) + 8 * v9);
          uint64_t v14 = static NSObject.== infix(_:_:)(v16, a1);

          if ((v14 & 1) != 0) {
            break;
          }
          uint64_t v9 = (v9 + 1) & v15;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
            goto LABEL_12;
          }
        }

        uint64_t v13 = 0LL;
      }

      else
      {
        uint64_t v14 = 0;
        uint64_t v13 = 1LL;
      }
    }

void sub_1001F7D5C(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = sub_1001B4B94(255LL, a2, a3);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_1001AA978();
}

uint64_t sub_1001F7D98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingMembershipInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1001F7DD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1001AFF14(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_1001AA978();
}

unint64_t sub_1001F7E14()
{
  unint64_t result = qword_100447E50;
  if (!qword_100447E50)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100447E50);
  }

  return result;
}

id sub_1001F7E54(uint64_t a1, uint64_t a2, char *a3)
{
  v10[3] = type metadata accessor for MemoryPendingMembershipTrackerStorage();
  v10[4] = &off_1003E03D0;
  v10[0] = a1;
  void v9[3] = type metadata accessor for SharedPendingMembershipBag();
  void v9[4] = &off_1003E03B8;
  v9[0] = a2;
  swift_unknownObjectWeakInit(&a3[OBJC_IVAR___CSDPendingMembershipTracker_messenger], 0LL);
  swift_unknownObjectWeakInit(&a3[OBJC_IVAR___CSDPendingMembershipTracker_delegate], 0LL);
  sub_1001F8064((uint64_t)v10, (uint64_t)&a3[OBJC_IVAR___CSDPendingMembershipTracker_storage]);
  sub_1001F8064((uint64_t)v9, (uint64_t)&a3[OBJC_IVAR___CSDPendingMembershipTracker_serverBag]);
  v8.receiver = a3;
  v8.super_class = (Class)type metadata accessor for PendingMembershipTracker();
  id v6 = objc_msgSendSuper2(&v8, "init");
  sub_1001B0438(v9);
  sub_1001B0438(v10);
  return v6;
}

id sub_1001F7F34(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for MemoryPendingMembershipTrackerStorage();
  int64_t v20 = &off_1003E03D0;
  v18[0] = a1;
  uint64_t v16 = type metadata accessor for SharedPendingMembershipBag();
  uint64_t v17 = &off_1003E03B8;
  v15[0] = a2;
  unint64_t v4 = (char *)objc_allocWithZone((Class)type metadata accessor for PendingMembershipTracker());
  uint64_t v5 = sub_1001BA188((uint64_t)v18, v19);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_1001BA188((uint64_t)v15, v16);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  id v13 = sub_1001F7E54(*v7, *v11, v4);
  sub_1001B0438(v15);
  sub_1001B0438(v18);
  return v13;
}

void sub_1001F8064(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_1001AA978();
}

uint64_t sub_1001F80A4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001F80F0 + 4 * byte_10037C0A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001F8124 + 4 * byte_10037C0A0[v4]))();
}

uint64_t sub_1001F8124(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F812C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001F8134LL);
  }
  return result;
}

uint64_t sub_1001F8140(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001F8148LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001F814C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F8154(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PendingMembershipTracker.UserAction()
{
}

uint64_t sub_1001F816C(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001F81AC + 4 * byte_10037C0AA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001F81CC + 4 * byte_10037C0AF[v4]))();
  }
}

_BYTE *sub_1001F81AC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001F81CC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001F81D4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001F81DC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001F81E4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001F81EC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for MemoryPendingMembershipTrackerStorage.Errors()
{
}

void sub_1001F8208(uint64_t a1)
{
}

void *sub_1001F8218(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1001F6FC4(*(void **)a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t sub_1001F8260(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1001F6FC4(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + sub_1001EEB94(v0 + 16) = v5;
  sub_1001F7074(v6, v7, v8);
  return a1;
}

uint64_t sub_1001F82B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + sub_1001EEB94(v0 + 16) = v3;
  sub_1001F7074(v4, v6, v5);
  return a1;
}

uint64_t sub_1001F82F4(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 3 && *(_BYTE *)(a1 + 24))
    {
      unsigned int v2 = *(_DWORD *)a1 + 2;
    }

    else
    {
      unsigned int v2 = ((2 * ((*(void *)(a1 + 16) & 0x1000000000000000LL) != 0)) | ((*(void *)(a1 + 16) >> 60) >> 1) & 1) ^ 3;
      if (v2 >= 2) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t sub_1001F8340(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + sub_1001EEB94(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 - 3;
    if (a3 >= 3) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 3) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
      *(void *)(result + sub_1001EEB94(v0 + 16) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }

  return result;
}

uint64_t sub_1001F8390(uint64_t a1)
{
  return (*(void *)(a1 + 16) >> 61) & 1LL;
}

uint64_t sub_1001F839C(uint64_t result)
{
  *(void *)(result + 16) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1001F83AC(uint64_t result, char a2)
{
  *(void *)(result + sub_1001EEB94(v0 + 16) = *(void *)(result + 16) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

void type metadata accessor for PendingMembershipInfo.Mode()
{
}

unint64_t sub_1001F83D4()
{
  unint64_t result = qword_100448C08;
  if (!qword_100448C08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C248, &unk_1003E0518);
    atomic_store(result, (unint64_t *)&qword_100448C08);
  }

  return result;
}

unint64_t sub_1001F8414()
{
  unint64_t result = qword_100448C10;
  if (!qword_100448C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C2B0, &unk_1003E0488);
    atomic_store(result, (unint64_t *)&qword_100448C10);
  }

  return result;
}

void sub_1001F8450(id a1)
{
}

uint64_t sub_1001F8468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v6, a6, v7);
}

uint64_t sub_1001F8478( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 96) = a1;
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1001F8484()
{
  return String.init<A>(reflecting:)(v1, v0);
}

uint64_t sub_1001F8490(uint64_t a1, uint64_t a2)
{
  v2[12] = v4;
  v2[13] = v6;
  void v2[9] = a1;
  v2[10] = a2;
  return v5(*(void *)(v7 - 272), *(void *)(v7 - 264), v3);
}

uint64_t sub_1001F84B8(uint64_t a1)
{
  return String.init<A>(reflecting:)(a1, v1);
}

uint64_t sub_1001F84C0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1001F84C8@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectWeakLoadStrong(v1 + a1);
}

void sub_1001F84D0()
{
}

id sub_1001F84E0()
{
  return sub_1001F6FC4(v2, v0, v1);
}

uint64_t sub_1001F84F0()
{
  return sub_1001BB39C(v0, v1);
}

uint64_t sub_1001F84FC(uint64_t a1)
{
  return String.init<A>(reflecting:)(v1 - 96, a1);
}

uint64_t sub_1001F8508()
{
  return type metadata accessor for PendingMembershipInfo(0LL);
}

uint64_t sub_1001F8510(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 232))(a1, v1);
}

uint64_t sub_1001F851C(uint64_t a1)
{
  return String.init<A>(reflecting:)(a1, v1);
}

uint64_t sub_1001F8524()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1001F852C(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_1001F8534()
{
  return swift_beginAccess(v0 + 16, v1 - 104, 0LL, 0LL);
}

uint64_t sub_1001F854C()
{
  return sub_1001F7D98(v0);
}

uint64_t sub_1001F8554()
{
  return String.init<A>(reflecting:)(v0, v1);
}

uint64_t sub_1001F8560@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 - 264), *(void *)(v1 - 376));
}

NSSet sub_1001F8574()
{
  return Set._bridgeToObjectiveC()();
}

id sub_1001F8588(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 1);
}

uint64_t sub_1001F8590(uint64_t a1, uint64_t a2)
{
  v2[22] = v3;
  v2[23] = v4;
  v2[19] = a1;
  v2[20] = a2;
  return static os_log_type_t.default.getter();
}

uint64_t sub_1001F859C()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

uint64_t sub_1001F85DC()
{
  return swift_beginAccess(v0, v1 - 128, 33LL, 0LL);
}

void sub_1001F85F0()
{
}

uint64_t sub_1001F8604@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectWeakLoadStrong(v1 + a1);
}

uint64_t sub_1001F860C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void *sub_1001F861C(void *a1, uint64_t a2)
{
  return sub_1001B204C(a1, a2);
}

uint64_t sub_1001F8630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:type:_:)(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_1001F8638(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1001F8640(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(v3 - 12_Block_object_dispose(va, 8) = v4;
  return swift_bridgeObjectRetain(v4);
}

id sub_1001F8650(uint64_t a1, uint64_t a2)
{
  v2[7] = v3;
  _BYTE v2[8] = v4;
  v2[4] = a1;
  v2[5] = a2;
  *(void *)(v6 - 96) = v5;
  return v5;
}

void sub_1001F8660()
{
}

uint64_t sub_1001F8670(uint64_t a1)
{
  return String.init<A>(reflecting:)(a1, v1);
}

uint64_t sub_1001F8678()
{
  return sub_1001BB39C(*(void *)(v0 - 240), *(void *)(v0 - 320));
}

id sub_1001F8688()
{
  return v0;
}

uint64_t sub_1001F8698()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1001F86A0()
{
  return sub_1001F7D98(v0);
}

uint64_t sub_1001F86A8()
{
  return String.init<A>(reflecting:)(v0 - 96, *(void *)(v0 - 328));
}

uint64_t sub_1001F86B8()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_1001F86C0()
{
  return *(void *)(v0 - 272);
}

uint64_t sub_1001F86D8(uint64_t a1)
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v1, v2);
}

id sub_1001F86E8()
{
  return v0;
}

uint64_t sub_1001F86F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F7D98(*(void *)(a1 - 256));
}

id sub_1001F8700(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1001F8708()
{
  return sub_1001AFF14(v0);
}

  ;
}

void sub_1001F871C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001F8724(uint64_t a1)
{
  return sub_1001FE4FC(a1, v1);
}

uint64_t sub_1001F8730()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1001F8738()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1001F8740@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

id sub_1001F8748()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1001F8774(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

id sub_1001F877C()
{
  return v0;
}

NSUUID sub_1001F8788()
{
  return UUID._bridgeToObjectiveC()();
}

uint64_t sub_1001F8790()
{
  return v0;
}

NSSet sub_1001F87A4()
{
  return Set._bridgeToObjectiveC()();
}

  ;
}

NSData sub_1001F87C0()
{
  return Data._bridgeToObjectiveC()();
}

NSData sub_1001F87CC()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_1001F87D8(uint64_t a1)
{
  return String.init<A>(reflecting:)(a1, v1);
}

uint64_t sub_1001F87E0(uint64_t a1)
{
  return swift_initStackObject(a1, v1 - 136);
}

uint64_t sub_1001F87E8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1001F87F0()
{
  return v0;
}

uint64_t sub_1001F8804()
{
  return v0;
}

uint64_t sub_1001F8818(uint64_t a1)
{
  return String.init<A>(reflecting:)(v1 - 128, a1);
}

uint64_t sub_1001F8824()
{
  return *(void *)(v0 - 304);
}

id sub_1001F8838()
{
  return [v1 *(SEL *)(v0 + 1936)];
}

uint64_t sub_1001F8844()
{
  return v0;
}

uint64_t sub_1001F8858()
{
  return swift_willThrow();
}

void sub_1001F8864()
{
  *(void *)(v2 - 272) = v0;
  *(void *)(v2 - 296) = v1;
}

  ;
}

uint64_t sub_1001F8884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v5 + 16))(v4);
  return String.init<A>(reflecting:)(v4, a2);
}

NSBundle *sub_1001F88F0(uint64_t a1, void *a2)
{
  unint64_t result = (NSBundle *)(id)TUBundle();
  if (result)
  {
    uint64_t v5 = result;
    v10._object = (void *)0xE000000000000000LL;
    v6.value._object = (void *)0x8000000100370A50LL;
    v7._uint64_t countAndFlagsBits = a1;
    v7._object = a2;
    v6.value._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    v8._uint64_t countAndFlagsBits = 0LL;
    v8._object = (void *)0xE000000000000000LL;
    v10._uint64_t countAndFlagsBits = 0LL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v6, v5, v8, v10)._countAndFlagsBits;

    return (NSBundle *)countAndFlagsBits;
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_1001F8988(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  *(void *)&v1[OBJC_IVAR___CSDDuetDonater_maxDuration] = 0x4024000000000000LL;
  *(void *)&v1[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver] = 0LL;
  *(void *)&v1[OBJC_IVAR___CSDDuetDonater_queue] = a1;
  v15.receiver = v1;
  v15.super_class = ObjectType;
  id v4 = a1;
  id v5 = objc_msgSendSuper2(&v15, "init");
  Swift::String_optional v6 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v7 = v5;
  id v14 = objc_msgSend(v6, "tu_defaults");
  uint64_t KeyPath = swift_getKeyPath(&unk_10037C348);
  uint64_t v9 = sub_1001F900C((uint64_t)&unk_1003E06A0);
  *(void *)(v9 + sub_1001EEB94(v0 + 16) = v7;
  Swift::String v10 = (char *)v7;
  uint64_t v11 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( KeyPath,  1LL,  sub_1001F8FB0,  v9,  &protocol witness table for NSObject);

  swift_release(KeyPath);
  swift_release(v9);

  uint64_t v12 = *(void **)&v10[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver];
  *(void *)&v10[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver] = v11;

  return v10;
}

void sub_1001F8ACC()
{
  id v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "tu_defaults");
  [v0 silenceUnknownCallersEnabled];
}

id sub_1001F8B3C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = *(void **)&v0[OBJC_IVAR___CSDDuetDonater_silenceUnknownCallersEnabledObserver];
  if (v3)
  {
    id v4 = v3;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }

  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

void sub_1001F8C04()
{
  uint64_t v2 = sub_1001E2064((uint64_t)sub_1002356BC);
  static DispatchQoS.unspecified.getter(v2);
  sub_1001E8E70();
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v3 = sub_1001C94D0();
  sub_1001F8FDC(v3);
  sub_1001F0D98();
  _Block_release(v2);
  sub_1001F8FFC();
  sub_1001E2070();
  sub_1001B0FF8();
}

void sub_1001F8D4C()
{
  uint64_t v3 = sub_1001F900C((uint64_t)&unk_1003E0628);
  *(void *)(v3 + sub_1001EEB94(v0 + 16) = v0;
  uint64_t v6 = v3;
  id v4 = sub_1001E2064((uint64_t)sub_1002356BC);
  static DispatchQoS.unspecified.getter(v0);
  sub_1001E8E70();
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v5 = sub_1001C94D0();
  sub_1001F8FDC(v5);
  sub_1001F0D98();
  _Block_release(v4);
  sub_1001F8FFC();
  sub_1001E2070();
  swift_release(v6);
  sub_1001B0FF8();
}

void sub_1001F8EB0()
{
}

uint64_t type metadata accessor for DuetDonater()
{
  return objc_opt_self(&OBJC_CLASS___CSDDuetDonater);
}

uint64_t sub_1001F8F38()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001F8F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F8F6C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

const char *sub_1001F8F74()
{
  return "allowContactsOnly";
}

id sub_1001F8F80@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result = [*a1 allowContactsOnly];
  *a2 = (_BYTE)result;
  return result;
}

void sub_1001F8FB0()
{
}

uint64_t sub_1001F8FDC(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v2, a1, v1, v3);
}

uint64_t sub_1001F8FFC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1001F900C(uint64_t a1)
{
  return swift_allocObject(a1, 24LL, 7LL);
}

  ;
}

char *sub_1001F902C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1001AFF14(&qword_100448D30);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001FAE3C();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Locale(0LL);
  sub_1001A9670((uint64_t)v6, 1LL, 1LL, v10);
  LanguageManager.init(featureFlags:localeOverride:)( [objc_allocWithZone(TUFeatureFlags) init],  v6);
  id v11 = [(id)objc_opt_self(UAFAssetSetManager) sharedManager];
  id v12 = objc_allocWithZone((Class)sub_1001FABB4());
  id v13 = sub_1001F91A4(a1, (uint64_t)v9, 0, v11);
  uint64_t ObjectType = swift_getObjectType(v2);
  swift_deallocPartialClassInstance( v2,  ObjectType,  *(unsigned int *)((swift_isaMask & *v2) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v2) + 0x34LL));
  return v13;
}

char *sub_1001F91A4(void *a1, uint64_t a2, char a3, void *a4)
{
  v4[OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets] = 0;
  uint64_t v9 = OBJC_IVAR___CSDSpeechAssetManager_delegates;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSHashTable);
  id v11 = v4;
  *(void *)&v4[v9] = [v10 weakObjectsHashTable];
  id v12 = &v11[OBJC_IVAR___CSDSpeechAssetManager____lazy_storage___downloadSpeechAssetPath];
  *id v12 = 0LL;
  v12[1] = 0LL;
  *(void *)&v11[OBJC_IVAR___CSDSpeechAssetManager_queue] = a1;
  id v13 = &v11[OBJC_IVAR___CSDSpeechAssetManager_languageManager];
  uint64_t v14 = sub_1001FAE3C();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a2, v14);
  v11[OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets] = a3;
  *(void *)&v11[OBJC_IVAR___CSDSpeechAssetManager_assetSetObserver] = a4;
  id v16 = a1;
  id v17 = a4;

  v34.receiver = v11;
  v34.super_class = (Class)sub_1001FABB4();
  id v18 = objc_msgSendSuper2(&v34, "init");
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  int64_t v20 = (char *)v18;
  id v21 = [v19 defaultCenter];
  [v21 addObserver:v20 selector:"handleCurrentLocaleDidChange" name:NSCurrentLocaleDidChangeNotification object:0];

  id v22 = *(id *)&v20[OBJC_IVAR___CSDSpeechAssetManager_assetSetObserver];
  NSString v23 = String._bridgeToObjectiveC()();
  uint64_t v24 = sub_1001F900C((uint64_t)&unk_1003E08D0);
  *(void *)(v24 + sub_1001EEB94(v0 + 16) = v20;
  aBlock[4] = sub_1001FADD4;
  uint64_t v33 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E08E8;
  uint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = v33;
  id v27 = v16;
  uint64_t v28 = v20;
  swift_release(v26);
  id v29 = [v22 observeAssetSet:v23 queue:v27 handler:v25];

  _Block_release(v25);
  swift_unknownObjectRelease(v29);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  return v28;
}

void sub_1001F9434(uint64_t a1)
{
  if (qword_100446938 != -1) {
    swift_once(&qword_100446938, sub_100258A30);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1001B0D98(v2, (uint64_t)qword_1004541C8);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v3, v4, v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "assets updated", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  sub_1001F99B0();
  if (*(_BYTE *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) == 1) {
    sub_1001F9528();
  }
}

void sub_1001F9528()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___CSDSpeechAssetManager_delegates) allObjects];
  uint64_t v2 = sub_1001AFF14(&qword_100448D38);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease(v3);
    return;
  }

  if (v3 < 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease(v3);
  if (!v4) {
    goto LABEL_9;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }

      else
      {
        uint64_t v6 = *(void **)(v3 + 8 * i + 32);
        swift_unknownObjectRetain(v6);
      }

      [v6 assetsUpdated];
      swift_unknownObjectRelease(v6);
    }

    goto LABEL_9;
  }

  __break(1u);
}

void sub_1001F963C()
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = sub_1001C7290();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001B10F0();
  uint64_t v7 = *(void **)&v0[OBJC_IVAR___CSDSpeechAssetManager_queue];
  uint64_t v8 = sub_1001F900C((uint64_t)&unk_1003E0880);
  *(void *)(v8 + sub_1001EEB94(v0 + 16) = v0;
  uint64_t v15 = v8;
  uint64_t v9 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v10 = v7;
  static DispatchQoS.unspecified.getter(v0);
  unint64_t v11 = sub_1001E8E70();
  sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_1001C94D0();
  uint64_t v12 = sub_1001FAE28();
  dispatch thunk of SetAlgebra.init<A>(_:)(v12, v13, v14, v3, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v9);
  _Block_release(v9);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  swift_release(v15);
  sub_1001B0FF8();
}

void sub_1001F97A4(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100448D30);
  __chkstk_darwin(v2);
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = type metadata accessor for LanguageManager(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for Locale(0LL);
  sub_1001A9670((uint64_t)v4, 1LL, 1LL, v9);
  LanguageManager.init(featureFlags:localeOverride:)( [objc_allocWithZone(TUFeatureFlags) init],  v4);
  uint64_t v10 = a1 + OBJC_IVAR___CSDSpeechAssetManager_languageManager;
  swift_beginAccess(a1 + OBJC_IVAR___CSDSpeechAssetManager_languageManager, v19, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 40))(v10, v8, v5);
  swift_endAccess(v19);
  if (qword_100446938 != -1) {
    swift_once(&qword_100446938, sub_100258A30);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_1001B0D98(v11, (uint64_t)qword_1004541C8);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v12, v13, v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "handleCurrentLocaleDidChange", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  sub_1001F9528();
  sub_1001F99B0();
}

void sub_1001F99B0()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = sub_1001C7290();
  uint64_t v38 = *(os_log_s **)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001B10F0();
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((v3[OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets] & 1) != 0
    || (uint64_t v11 = OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets,
        (v3[OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets] & 1) != 0))
  {
    if (qword_100446938 != -1) {
      swift_once(&qword_100446938, sub_100258A30);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_1001B0D98(v12, (uint64_t)qword_1004541C8);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v13, v14, v15);
    os_log_type_t v16 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v16))
    {
      id v17 = (uint8_t *)sub_1001BB5EC();
      *(_WORD *)id v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v16,  "we already have the speech assets (or are fetching them), not downloading again",  v17,  2u);
      sub_1001B0E60((uint64_t)v17);
    }
  }

  else
  {
    uint64_t v36 = v6;
    uint64_t v37 = v5;
    if (qword_100446938 != -1) {
      swift_once(&qword_100446938, sub_100258A30);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_1001B0D98(v18, (uint64_t)qword_1004541C8);
    id v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)sub_1001BB5EC();
      uint64_t v35 = v4;
      uint64_t v25 = v24;
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "downloadSpeechAssets (it is necessary)", v24, 2u);
      uint64_t v26 = (uint64_t)v25;
      uint64_t v4 = v35;
      sub_1001B0E60(v26);
    }

    v3[v11] = 1;
    sub_1001FAC88();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for DispatchQoS.QoSClass.default(_:),  v7);
    id v27 = (void *)static OS_dispatch_queue.global(qos:)(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v28 = sub_1001F900C((uint64_t)&unk_1003E06C8);
    *(void *)(v28 + sub_1001EEB94(v0 + 16) = v3;
    uint64_t v42 = sub_1001FACE8;
    uint64_t v43 = v28;
    BOOL v40 = _NSConcreteStackBlock;
    uint64_t v41 = 1107296256LL;
    id v29 = sub_1001E2064((uint64_t)sub_1002356BC);
    static DispatchQoS.unspecified.getter(v3);
    uint64_t v39 = _swiftEmptyArrayStorage;
    unint64_t v30 = sub_1001E8E70();
    sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_1001C94D0();
    uint64_t v31 = sub_1001FAE28();
    dispatch thunk of SetAlgebra.init<A>(_:)(v31, v32, v33, v4, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v29);
    _Block_release(v29);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v1, v4);
    (*((void (**)(uint64_t, uint64_t))v38 + 1))(v2, v36);
    swift_release(v43);
    sub_1001B0FF8();
  }

void sub_1001F9D1C(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v67 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v66 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LanguageManager(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [(id)objc_opt_self(NSBundle) mainBundle];
  sub_1001FAD08(v12);
  if (!v13)
  {
    if (qword_100446938 != -1) {
      swift_once(&qword_100446938, sub_100258A30);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_1001B0D98(v31, (uint64_t)qword_1004541C8);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v32, v33, v34);
    os_log_type_t v37 = static os_log_type_t.error.getter(v35, v36);
    if (os_log_type_enabled(v35, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v37, "Missing bundle identifier", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    uint64_t v39 = *(void **)&a1[OBJC_IVAR___CSDSpeechAssetManager_queue];
    uint64_t v40 = swift_allocObject(&unk_1003E0718, 24LL, 7LL);
    *(void *)(v40 + sub_1001EEB94(v0 + 16) = a1;
    uint64_t v74 = sub_1001FAD74;
    uint64_t v75 = v40;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v71 = 1107296256LL;
    uint64_t v72 = sub_1002356BC;
    id v73 = &unk_1003E0730;
    uint64_t v41 = _Block_copy(&aBlock);
    uint64_t v42 = a1;
    id v43 = v39;
    static DispatchQoS.unspecified.getter(v43);
    v69[0] = _swiftEmptyArrayStorage;
    unint64_t v44 = sub_1001E8E70();
    uint64_t v45 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    unint64_t v46 = sub_1001C94D0();
    dispatch thunk of SetAlgebra.init<A>(_:)(v69, v45, v46, v2, v44);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v41);
    _Block_release(v41);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v7, v5);
    goto LABEL_9;
  }

  uint64_t v14 = v13;
  uint64_t v63 = v4;
  uint64_t v64 = v2;
  uint64_t v65 = v5;
  uint64_t v15 = &a1[OBJC_IVAR___CSDSpeechAssetManager_languageManager];
  swift_beginAccess(&a1[OBJC_IVAR___CSDSpeechAssetManager_languageManager], v69, 0LL, 0LL);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
  v76.value._rawValue = 0LL;
  object = LanguageManager.mappedASRLanguageIdentifier(supportedLanguages:)(v76)._object;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v17 = (void *)objc_opt_self(&OBJC_CLASS___SFSpeechAssetManager);
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v17 assetPathForLanguage:v18 clientIdentifier:v19];

  if (v20)
  {
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v14);

    uint64_t v21 = *(void **)&a1[OBJC_IVAR___CSDSpeechAssetManager_queue];
    uint64_t v22 = swift_allocObject(&unk_1003E07E0, 24LL, 7LL);
    *(void *)(v22 + sub_1001EEB94(v0 + 16) = a1;
    uint64_t v74 = sub_1001FAD90;
    uint64_t v75 = v22;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v71 = 1107296256LL;
    uint64_t v72 = sub_1002356BC;
    id v73 = &unk_1003E07F8;
    os_log_type_t v23 = _Block_copy(&aBlock);
    uint64_t v24 = a1;
    id v25 = v21;
    static DispatchQoS.unspecified.getter(v25);
    uint64_t v68 = _swiftEmptyArrayStorage;
    unint64_t v26 = sub_1001E8E70();
    uint64_t v27 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    unint64_t v28 = sub_1001C94D0();
    id v29 = v63;
    uint64_t v30 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v27, v28, v64, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v29, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v7, v65);
LABEL_9:
    swift_release(v75);
    return;
  }

  if (qword_100446938 != -1) {
    swift_once(&qword_100446938, sub_100258A30);
  }
  uint64_t v47 = type metadata accessor for Logger(0LL);
  uint64_t v48 = sub_1001B0D98(v47, (uint64_t)qword_1004541C8);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v48, v49, v50);
  os_log_type_t v52 = static os_log_type_t.default.getter(v51);
  uint64_t v53 = v17;
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Starting asset download.", v54, 2u);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  NSString v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  uint64_t v74 = sub_1001FA3B0;
  uint64_t v75 = 0LL;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v71 = 1107296256LL;
  uint64_t v72 = sub_1001E6900;
  id v73 = &unk_1003E0758;
  unint64_t v57 = _Block_copy(&aBlock);
  uint64_t v58 = swift_allocObject(&unk_1003E0790, 24LL, 7LL);
  *(void *)(v58 + sub_1001EEB94(v0 + 16) = a1;
  uint64_t v74 = sub_1001FAD88;
  uint64_t v75 = v58;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v71 = 1107296256LL;
  uint64_t v72 = sub_1001FA964;
  id v73 = &unk_1003E07A8;
  uint64_t v59 = _Block_copy(&aBlock);
  uint64_t v60 = v75;
  uint64_t v61 = a1;
  swift_release(v60);
  [v53 fetchAssetsForLanguage:v55 clientIdentifier:v56 urgent:1 forceUpgrade:1 detailedProgress:v57 completion:v59];
  _Block_release(v59);
  _Block_release(v57);
}

void sub_1001FA3B0(uint64_t a1, char a2)
{
  if (qword_100446938 != -1) {
    swift_once(&qword_100446938, sub_100258A30);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_1001B0D98(v4, (uint64_t)qword_1004541C8);
  oslog = (os_log_s *)Logger.logObject.getter(v5, v6, v7);
  os_log_type_t v8 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)uint64_t v9 = 134218240;
    uint64_t v12 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 1024;
    int v11 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9 + 14, v9 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v8,  "Speech model download progress: %lu. Is stalled: %{BOOL}d",  (uint8_t *)v9,  0x12u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_1001FA4F4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void **)&a4[OBJC_IVAR___CSDSpeechAssetManager_queue];
  uint64_t v15 = swift_allocObject(&unk_1003E0830, 32LL, 7LL);
  *(void *)(v15 + sub_1001EEB94(v0 + 16) = a4;
  *(void *)(v15 + 24) = a3;
  aBlock[4] = sub_1001FADC4;
  uint64_t v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E0848;
  os_log_type_t v16 = _Block_copy(aBlock);
  id v17 = v14;
  NSString v18 = a4;
  uint64_t v19 = swift_errorRetain(a3);
  static DispatchQoS.unspecified.getter(v19);
  id v25 = _swiftEmptyArrayStorage;
  unint64_t v20 = sub_1001E8E70();
  uint64_t v21 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  unint64_t v22 = sub_1001C94D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v27);
}

void sub_1001FA6C4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets) = 0;
  *(_BYTE *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) = a2 == 0;
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDCoreTelephonyClient.opt_inst_meths;
  if (a2)
  {
    if (qword_100446938 != -1) {
      swift_once(&qword_100446938, sub_100258A30);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v4, (uint64_t)qword_1004541C8);
    swift_errorRetain(a2);
    uint64_t v5 = swift_errorRetain(a2);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v5, v6, v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = a2;
      uint64_t v25 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_errorRetain(a2);
      uint64_t v12 = sub_1001AFF14(&qword_100447B70);
      uint64_t v13 = String.init<A>(reflecting:)(&v24, v12);
      unint64_t v15 = v14;
      uint64_t v24 = sub_1001D7CF0(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Speech model fetch failed with error: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
      os_log_type_t v16 = v10;
      p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDCoreTelephonyClient + 40);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  if (p_opt_inst_meths[295] != (__objc2_meth_list *)-1LL) {
    swift_once(&qword_100446938, sub_100258A30);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_1001B0D98(v17, (uint64_t)qword_1004541C8);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v18, v19, v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Speech model fetch complete", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  sub_1001F9528();
}

uint64_t sub_1001FA964(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  swift_retain(v4);
  id v9 = a3;
  v5(v6, v8, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v8);
}

void sub_1001FA9E4(uint64_t a1)
{
  *(_BYTE *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_hasSpeechAssets) = 1;
  *(_BYTE *)(a1 + OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets) = 0;
  if (qword_100446938 != -1) {
    swift_once(&qword_100446938, sub_100258A30);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1001B0D98(v1, (uint64_t)qword_1004541C8);
  oslog = (os_log_s *)Logger.logObject.getter(v2, v3, v4);
  os_log_type_t v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Speech model ready", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }
}

void sub_1001FAACC()
{
}

id sub_1001FAB04()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_1001FABB4();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001FABB4()
{
  return type metadata accessor for SpeechAssetManager(0LL);
}

uint64_t type metadata accessor for SpeechAssetManager(uint64_t a1)
{
  uint64_t result = qword_100448D20;
  if (!qword_100448D20) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SpeechAssetManager);
  }
  return result;
}

uint64_t sub_1001FABF4(uint64_t a1)
{
  v4[0] = &unk_10037C388;
  v4[1] = &unk_10037C388;
  _OWORD v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for LanguageManager(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[6] = &unk_10037C3A0;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1001FAC88()
{
  unint64_t result = qword_100449F70;
  if (!qword_100449F70)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100449F70);
  }

  return result;
}

uint64_t sub_1001FACC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001FACE8()
{
}

uint64_t sub_1001FACF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001FAD00(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001FAD08(void *a1)
{
  id v2 = [a1 bundleIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_1001FAD74()
{
  *(_BYTE *)(*(void *)(v0 + 16) + OBJC_IVAR___CSDSpeechAssetManager_fetchingSpeechAssets) = 0;
}

uint64_t sub_1001FAD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001FA4F4(a1, a2, a3, *(char **)(v3 + 16));
}

void sub_1001FAD90()
{
}

uint64_t sub_1001FAD98()
{
  swift_errorRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001FADC4()
{
}

void sub_1001FADCC()
{
}

void sub_1001FADD4()
{
}

uint64_t sub_1001FAE28()
{
  return v0 - 136;
}

uint64_t sub_1001FAE3C()
{
  return type metadata accessor for LanguageManager(0LL);
}

uint64_t type metadata accessor for EmptyDescriptorProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd23EmptyDescriptorProvider);
}

ValueMetadata *type metadata accessor for EmptyDescriptor()
{
  return &type metadata for EmptyDescriptor;
}

id sub_1001FAE74(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v9 = [v6 shouldRegisterCall:a2];

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }

      goto LABEL_17;
    }

    __break(1u);
LABEL_12:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  id v9 = 0LL;
LABEL_17:

  swift_bridgeObjectRelease(a1);
  return v9;
}

void sub_1001FAF78(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_1001FAFC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1001FAFFC()
{
  return swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___CSDCallController_callStateController);
}

void sub_1001FB054(void *a1)
{
}

uint64_t sub_1001FB104()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCallController_callChanged);
  sub_1001B5D70(v1, *(void *)(v0 + OBJC_IVAR___CSDCallController_callChanged + 8));
  return v1;
}

uint64_t sub_1001FB1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___CSDCallController_callChanged);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___CSDCallController_callChanged);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR___CSDCallController_callChanged + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_1001B5D3C(v4, v5);
}

void sub_1001FB218()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CSDCallController_dataSources);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v11 = *(void *)(v0 + OBJC_IVAR___CSDCallController_dataSources);
    }
    else {
      uint64_t v11 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001FBB5C();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (!v2) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1001FBB5C();
    if (!v2) {
      goto LABEL_16;
    }
  }

  sub_1002500BC(0LL, v2 & ~(v2 >> 63), 0LL);
  if (v2 < 0)
  {
    __break(1u);
    return;
  }

  for (uint64_t i = 0LL; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001LL) != 0) {
      uint64_t v4 = (void *)sub_1001FBB70();
    }
    else {
      uint64_t v4 = sub_1001FBB64();
    }
    uint64_t v5 = v4;
    id v6 = [v4 calls];
    uint64_t v7 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    unint64_t v10 = _swiftEmptyArrayStorage[2];
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1) {
      sub_1002500BC(v9 > 1, v10 + 1, 1LL);
    }
    _swiftEmptyArrayStorage[2] = v10 + 1;
    _swiftEmptyArrayStorage[v10 + 4] = v8;
  }

id sub_1001FB48C(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  sub_1001B4B94(0LL, (unint64_t *)&qword_10044AB70, &OBJC_CLASS___TUCall_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v5 = [v3 initWithCalls:isa];

  return v5;
}

char *sub_1001FB510(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DeviceRestrictionController(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  objc_allocWithZone((Class)type metadata accessor for DirtyCallManager());
  id v9 = a2;
  id v10 = sub_1001F103C((uint64_t)v9);
  DeviceRestrictionController.init()();
  uint64_t v11 = (char *)objc_allocWithZone((Class)type metadata accessor for CallController());
  uint64_t v12 = sub_1001FB974(a1, v10, (uint64_t)v8, v11);

  uint64_t ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, ObjectType, 48LL, 7LL);
  return v12;
}

void sub_1001FB654(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    id v5 = (void *)Strong;
    uint64_t v7 = *(void (**)(uint64_t))(Strong + OBJC_IVAR___CSDCallController_callChanged);
    uint64_t v6 = *(void *)(Strong + OBJC_IVAR___CSDCallController_callChanged + 8);
    sub_1001B5D70((uint64_t)v7, v6);

    if (v7)
    {
      v7(a1);
      sub_1001B5D3C((uint64_t)v7, v6);
    }
  }

uint64_t sub_1001FB6E0(void *a1)
{
  uint64_t result = sub_1001FB834(a1);
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CSDCallController_dataSources);
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v9 = *(void *)(v1 + OBJC_IVAR___CSDCallController_dataSources);
    }
    else {
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001FBB5C();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v9);
    uint64_t v5 = result;
    if (result) {
      goto LABEL_4;
    }
LABEL_10:
    sub_1001B2428();
    return (uint64_t)[*(id *)(v1 + OBJC_IVAR___CSDCallController_dirtyCallManager) add:a1];
  }

  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = sub_1001FBB5C();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  if (v5 >= 1)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001LL) != 0) {
        uint64_t v7 = (void *)sub_1001FBB70();
      }
      else {
        uint64_t v7 = sub_1001FBB64();
      }
      uint64_t v8 = v7;
      [v7 registerCall:a1];
    }

    goto LABEL_10;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001FB834(void *a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CSDCallController_dataSources);
  id v3 = a1;
  uint64_t v4 = swift_bridgeObjectRetain(v2);
  LOBYTE(String.hash(into:)(v7, v2, v3) = sub_1001FAE74(v4, v3);
  sub_1001B0EB8();
  return v3 & 1;
}

void sub_1001FB890()
{
}

id sub_1001FB8C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CallController()
{
  return objc_opt_self(&OBJC_CLASS___CSDCallController);
}

char *sub_1001FB974(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v8 = &a4[OBJC_IVAR___CSDCallController_callChanged];
  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  *(void *)&a4[OBJC_IVAR___CSDCallController_dataSources] = a1;
  *(void *)&a4[OBJC_IVAR___CSDCallController_dirtyCallManager] = a2;
  v17.receiver = a4;
  v17.super_class = (Class)type metadata accessor for CallController();
  swift_unknownObjectRetain(a2);
  uint64_t v9 = (char *)objc_msgSendSuper2(&v17, "init");
  DeviceRestrictionController.resetRestrictions()();
  id v10 = *(void **)&v9[OBJC_IVAR___CSDCallController_dirtyCallManager];
  uint64_t v11 = swift_allocObject(&unk_1003E0940, 24LL, 7LL);
  swift_unknownObjectWeakInit(v11 + 16, v9);
  v15[4] = sub_1001FBB00;
  uint64_t v16 = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  v15[2] = sub_1001FAF78;
  void v15[3] = &unk_1003E0958;
  uint64_t v12 = _Block_copy(v15);
  swift_release(v16);
  [v10 setCallChanged:v12];

  _Block_release(v12);
  uint64_t v13 = type metadata accessor for DeviceRestrictionController(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a3, v13);
  return v9;
}

uint64_t sub_1001FBADC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001FBB00(uint64_t a1)
{
}

uint64_t sub_1001FBB08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001FBB18(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001FBB20()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001FBB44()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1001FBB5C()
{
  return swift_bridgeObjectRetain(v0);
}

id sub_1001FBB64()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_1001FBB70()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

unint64_t sub_1001FBB7C()
{
  return (unint64_t)sub_1001FBBA0() & 1;
}

id sub_1001FBBA0()
{
  return [v0 isTTY];
}

uint64_t sub_1001FBBC0()
{
  return sub_1001FBC10((SEL *)&selRef_pickableRoutesForTTY);
}

uint64_t sub_1001FBBE8()
{
  return sub_1001FBC10((SEL *)&selRef_bestGuessPickableRoutesForAnyCall);
}

uint64_t sub_1001FBC10(SEL *a1)
{
  id v2 = [v1 *a1];
  uint64_t v3 = sub_1001AFF14(&qword_100447B60);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_1001FBC64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return sub_1001FBC84(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1001FBC84(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5, uint64_t a6)
{
  NSString v10 = String._bridgeToObjectiveC()();
  if (a4) {
    a4 = String._bridgeToObjectiveC()();
  }
  v13[4] = a5;
  uint64_t v14 = a6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  _OWORD v13[2] = sub_1001FBD58;
  v13[3] = &unk_1003E0A10;
  uint64_t v11 = _Block_copy(v13);
  swift_retain(a6);
  [v6 getPickableRoutesForCategory:v10 mode:a4 completion:v11];
  _Block_release(v11);

  return swift_release(v14);
}

uint64_t sub_1001FBD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = sub_1001AFF14(&qword_100447B60);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

id sub_1001FBDB8(uint64_t a1)
{
  return sub_1001FBDD8(a1);
}

id sub_1001FBDD8(uint64_t a1)
{
  id v6 = 0LL;
  unsigned int v2 = [v1 pickRoute:a1 error:&v6];
  id v3 = v6;
  if (v2) {
    return v6;
  }
  id v5 = v6;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow();
}

unint64_t sub_1001FBE80()
{
  return (unint64_t)sub_1001FBEA4() & 1;
}

id sub_1001FBEA4()
{
  return [v0 otherSessionsRequestNoRingtoneInterruption];
}

id sub_1001FBEC8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [(id)swift_getObjCClassFromMetadata(v0) isPhoneCallAudioCategory:v1];

  return v2;
}

uint64_t sub_1001FBF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001FBF1C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t destroy for AudioActivationContext(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioActivationContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioActivationContext(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(String.hash(into:)(v7, v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioActivationContext( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AudioActivationContext()
{
  return &type metadata for AudioActivationContext;
}

void sub_1001FC0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001B03EC((_OWORD *)a1, v5);
    sub_1001FE308(v5, a2, a3);
    sub_1001B0EB8();
  }

  else
  {
    sub_1002011C8(a1, (uint64_t *)&unk_1004474B0);
    sub_1001FD0C8(a2, a3, v5);
    sub_1001B0EB8();
    sub_1002011C8((uint64_t)v5, (uint64_t *)&unk_1004474B0);
  }

  sub_100021D74();
}

void sub_1001FC16C(uint64_t a1)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100201848(v5, v8, v9);
  if (v10)
  {
    sub_1002016DC(a1);
    sub_1001FD1EC();
    sub_1001B0EB8();
    sub_1002016DC(v1);
  }

  else
  {
    sub_1002010B0(a1, (uint64_t)v7, &qword_100447E10);
    sub_1002017FC();
    sub_1001B0EB8();
  }

  sub_1001B0F4C();
}

void sub_1001FC248(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1001B1234();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_1001AB0AC(a1, 1LL, v7) == 1)
  {
    sub_1002016DC(a1);
    sub_1001FD618(a2);
    sub_1002017C4();
    sub_1002016DC((uint64_t)v6);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, a1, v7);
    sub_1001FE508(v10, a2, sub_1001FF890);
    sub_1002017C4();
  }

void sub_1001FC358(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001B03EC((_OWORD *)a1, v3);
    sub_1001FE3EC(v3, a2);
    sub_1001D8504(a2);
  }

  else
  {
    sub_10020189C(a1);
    sub_1001FD7DC(a2, v3);
    sub_1001D8504(a2);
    sub_10020189C((uint64_t)v3);
  }

  sub_100021D74();
}

void sub_1001FC3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for PendingMembershipInfo(0LL);
  sub_1001B0E88();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100201848(v10, v13, v14);
  if (v15)
  {
    sub_1002016DC(a1);
    sub_1001FDBC0(a2, a3, (uint64_t)v8);
    sub_1001B0EB8();
    sub_1002016DC((uint64_t)v8);
  }

  else
  {
    sub_100201174(a1, (uint64_t)v12, type metadata accessor for PendingMembershipInfo);
    sub_1002017FC();
    sub_1001B0EB8();
  }

  sub_1001B0F4C();
}

void sub_1001FC4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v8);
  sub_1001B10F0();
  sub_100201848(v9, v10, v11);
  if (v12)
  {
    sub_1002011C8(a1, (uint64_t *)&unk_100449200);
    sub_1001FDD08(a2, (uint64_t)v7);
    uint64_t v13 = sub_1001B1234();
    sub_100201554(v13);
    sub_1002011C8((uint64_t)v7, (uint64_t *)&unk_100449200);
  }

  else
  {
    sub_100201174(a1, v2, type metadata accessor for SimulatedConversationManager.SimulatedGroupSession);
    sub_1001FE508(v2, a2, sub_1002001B0);
    uint64_t v14 = sub_1001B1234();
    sub_100201554(v14);
  }

  sub_1001B0F4C();
}

void sub_1001FC598(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001B03EC((_OWORD *)a1, v3);
    sub_1001FE6E0(v3, a2);
  }

  else
  {
    sub_10020189C(a1);
    sub_1001FE1D0((uint64_t)a2, v3);

    sub_10020189C((uint64_t)v3);
  }

  sub_100021D74();
}

void *sub_1001FC600(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v34 = &_swiftEmptyDictionarySingleton;
  if ((a4 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionActivationTriggerKey);
    sub_1002017A0();
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    *((void *)&v33 + 1) = sub_1001B4C00( (uint64_t)isa,  (unint64_t *)&qword_100448780,  &OBJC_CLASS___NSNumber_ptr);
    sub_10020178C(*((uint64_t *)&v33 + 1), v7, v8, v9, v10, v11, v12, v13, (uint64_t)isa);
    static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionActivationDeviceUIDKey);
    uint64_t v14 = sub_1002017A0();
    if (v14 == 1668047476 && a3)
    {
      *((void *)&v33 + 1) = &type metadata for String;
      *(void *)&__int128 v32 = a2;
      *((void *)&v32 + 1) = a3;
      uint64_t v14 = swift_bridgeObjectRetain(a3);
    }

    else
    {
      __int128 v32 = 0u;
      __int128 v33 = 0u;
    }

    sub_10020178C(v14, v15, v16, v17, v18, v19, v20, v21, v32);
  }

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionActivationCallDirectionKey);
  uint64_t v24 = v23;
  Class v25 = UInt._bridgeToObjectiveC()().super.super.isa;
  uint64_t v26 = sub_1001B4C00((uint64_t)v25, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
  *((void *)&v33 + 1) = v26;
  *(void *)&__int128 v32 = v25;
  sub_1001FC0F0((uint64_t)&v32, v22, v24);
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionActivationAccessibilityPreferenceKey);
  uint64_t v29 = v28;
  v30.super.super.Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  *((void *)&v33 + 1) = v26;
  *(NSNumber *)&__int128 v32 = v30;
  sub_1001FC0F0((uint64_t)&v32, v27, v29);
  return v34;
}

uint64_t sub_1001FC7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 1668047728LL;
  if (!a3) {
    return 1668047974LL;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallSourceIdentifierMikeyRoute);
  uint64_t v8 = v7;
  if (v6 == a2 && v7 == a3)
  {
    swift_bridgeObjectRelease(v7);
    return 1668050283LL;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, a2, a3, 0LL);
  swift_bridgeObjectRelease(v8);
  if ((v10 & 1) != 0) {
    return 1668050283LL;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallSourceIdentifierSpeakerRoute);
  uint64_t v13 = v12;
  if (v11 == a2 && v12 == a3)
  {
    swift_bridgeObjectRelease(v12);
    return 1668051824LL;
  }

  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0LL);
  swift_bridgeObjectRelease(v13);
  if ((v15 & 1) != 0) {
    return 1668051824LL;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallSourceIdentifierCarPlay);
  uint64_t v18 = v17;
  if (v16 == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease(v17);
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a2, a3, 0LL);
    swift_bridgeObjectRelease(v18);
    if ((v20 & 1) == 0)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(TUCallSourceIdentifierHeySiri);
      uint64_t v23 = v22;
      if (v21 == a2 && v22 == a3)
      {
        swift_bridgeObjectRelease(v22);
        return 1668051817LL;
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, a2, a3, 0LL);
        swift_bridgeObjectRelease(v23);
        if ((v25 & 1) != 0) {
          return 1668051817LL;
        }
        else {
          return 1668047476LL;
        }
      }
    }
  }

  return v3;
}

uint64_t sub_1001FC970(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = sub_1001FC600(a1 & 0xFFFFFFFF00000001LL, a2, a3, a4);
  uint64_t v7 = v6;
  uint64_t v73 = (uint64_t)(v6 + 64);
  uint64_t v8 = 1LL << v6[32];
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *((void *)v6 + 8);
  Swift::OpaquePointer_optional v76 = v91;
  uint64_t v79 = &v94;
  uint64_t v78 = AVAudioSessionActivationTriggerKey;
  uint64_t v74 = AVAudioSessionActivationCallDirectionKey;
  int64_t v75 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v71 = v75 - 1;
  uint64_t v72 = AVAudioSessionActivationAccessibilityPreferenceKey;
  uint64_t v11 = 0LL;
  uint64_t v77 = (char *)&type metadata for Any + 8;
  uint64_t v12 = (void *)swift_bridgeObjectRetain(v6);
  if (!v10) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v14 = v13 | (v11 << 6);
LABEL_5:
  uint64_t v15 = *((void *)v7 + 7);
  uint64_t v16 = (void *)(*((void *)v7 + 6) + 16 * v14);
  uint64_t isUniquelyReferenced_nonNull_native = (void *)v16[1];
  *(void *)&__int128 v90 = *v16;
  *((void *)&v90 + 1) = isUniquelyReferenced_nonNull_native;
  sub_1001B03FC(v15 + 32 * v14, (uint64_t)v76);
  swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
  while (1)
  {
    sub_1002010B0((uint64_t)&v90, (uint64_t)&v92, (uint64_t *)&unk_100448E60);
    uint64_t v20 = v93;
    if (!v93)
    {
      swift_release(v7);
      return (uint64_t)v12;
    }

    uint64_t v21 = v92;
    sub_1001B03EC(v79, &v90);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
    if (v21 == v22 && v23 == v20) {
      goto LABEL_41;
    }
    sub_100201414(v22, v23);
    sub_100201780();
    if ((v5 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    if (v21 == v25 && v26 == v20) {
      goto LABEL_41;
    }
    sub_100201414(v25, v26);
    sub_100201780();
    if ((v5 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    if (v21 == v28 && v29 == v20)
    {
LABEL_41:
      sub_1001E43E0();
    }

    else
    {
      sub_100201414(v28, v29);
      uint64_t v31 = sub_100201780();
      if ((v5 & 1) == 0)
      {
        sub_10020194C( v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v71,  v72,  v73,  v74,  v75,  (uint64_t)v76,  (uint64_t)v77,  v78,  (uint64_t)v79,  v80,  *((uint64_t *)&v80 + 1),  v81,  (uint64_t)v82,  v83,  v84,  *((uint64_t *)&v84 + 1),  v85,  v86,  v87,  *((uint64_t *)&v87 + 1),  v88,  v89,  v90);
        goto LABEL_52;
      }
    }

uint64_t sub_1001FCE0C(unint64_t a1)
{
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v20 = bswap64(a1);
  size_t v5 = sub_100200FBC((size_t)&v20, (unint64_t)&v21);
  size_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    goto LABEL_6;
  }
  if (!*(_BYTE *)(v5 + 32))
  {
    if (v7 != 1)
    {
      if (*(_BYTE *)(v5 + 33))
      {
        uint64_t v8 = 1LL;
        goto LABEL_4;
      }

      if (v7 != 2)
      {
        uint64_t v16 = 34LL;
        while (1)
        {
          uint64_t v8 = v16 - 32;
          if (*(_BYTE *)(v5 + v16)) {
            break;
          }
          BOOL v17 = __OFADD__(v8, 1LL);
          uint64_t v18 = v16 - 31;
          if (v17) {
            goto LABEL_20;
          }
          uint64_t v14 = 0LL;
          ++v16;
          if (v18 == v7) {
            goto LABEL_7;
          }
        }

        if (v7 >= v8)
        {
          if ((v8 & 0x8000000000000000LL) == 0) {
            goto LABEL_4;
          }
          __break(1u);
        }

        __break(1u);
LABEL_20:
        __break(1u);
      }
    }

uint64_t sub_1001FCFC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = Dictionary.debugDescription.getter();
  sub_1001B0EB8();
  return v4;
}

uint64_t sub_1001FD020()
{
  return sub_1001FCFC0( *v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32),  *((void *)v0 + 1),  *((void *)v0 + 2),  v0[24]);
}

uint64_t sub_1001FD038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = 0LL;
  if (((a1 ^ a5) & 1) == 0 && HIDWORD(a1) == HIDWORD(a5))
  {
    uint64_t result = (a3 | a7) == 0;
    if (a3)
    {
      if (a7)
      {
        if (a2 == a6 && a3 == a7) {
          return 1LL;
        }
        else {
          return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a6, a7, 0LL);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1001FD098(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001FD038( *a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32),  *((void *)a1 + 1),  *((void *)a1 + 2),  0LL,  *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32),  *((void *)a2 + 1),  *((void *)a2 + 2));
}

double sub_1001FD0C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_1001D7094(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v16 = *v4;
    uint64_t v12 = *v4;
    void *v4 = 0x8000000000000000LL;
    Swift::Int v13 = *(void *)(v12 + 24);
    sub_1001AFF14(&qword_100447BC0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease(*(void *)(*(void *)(v16 + 48) + 16 * v9 + 8));
    sub_1001B03EC((_OWORD *)(*(void *)(v16 + 56) + 32 * v9), a3);
    _NativeDictionary._delete(at:)( v9,  v16,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v14 = *v4;
    void *v4 = v16;
    swift_bridgeObjectRelease(v14);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_1001FD1EC()
{
  uint64_t v4 = v3;
  sub_10020187C();
  uint64_t v5 = sub_10020183C();
  sub_1001D7094(v5, v6);
  sub_10020188C();
  if ((v2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v1);
    sub_100201758();
    int v7 = sub_1001AFF14(&qword_100448E90);
    sub_100201744(v7, v8, v9, v10, v11, v12, v13, v14, v27, v28);
    sub_10020173C(*(void *)(v29 + 48) + 16 * v4);
    uint64_t v15 = *(void *)(v29 + 56);
    uint64_t v16 = sub_1001AFF14(&qword_100447E10);
    sub_1002010B0(v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v4, v0, &qword_100447E10);
    uint64_t v17 = sub_10020183C();
    sub_1002018F4(v17, v18, v19, v20, v21);
    sub_10020192C();
    uint64_t v22 = v0;
    uint64_t v23 = 0LL;
    uint64_t v24 = 1LL;
    uint64_t v25 = v16;
  }

  else
  {
    sub_1001AFF14(&qword_100447E10);
    uint64_t v22 = sub_1001AA9D0();
  }

  return sub_1001A9670(v22, v23, v24, v25);
}

uint64_t sub_1001FD2DC()
{
  uint64_t v1 = sub_1001D714C(v0);
  if ((v2 & 1) == 0) {
    return 0LL;
  }
  uint64_t v3 = v1;
  sub_1002013CC();
  sub_10020122C();
  int v4 = sub_1001AFF14(&qword_100449058);
  sub_10020125C(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  uint64_t v12 = *(void *)(*(void *)(v17 + 56) + 24 * v3);
  unint64_t v13 = sub_1002011F0();
  _NativeDictionary._delete(at:)(v3, v17, &unk_1003DE378, &unk_1003DE2D8, v13);
  sub_1002018E8();
  return v12;
}

#error "1001FD3D0: call analysis failed (funcsize=38)"
#error "1001FD474: call analysis failed (funcsize=38)"
void sub_1001FD4D4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10)
{
  sub_1001FD50C( a1,  (uint64_t)&unk_100448FB0,  (uint64_t)&qword_100447B50,  (uint64_t)&OBJC_CLASS___RTCReporting_ptr,  a5,  a6,  a7,  a8,  a9,  a10);
}

void sub_1001FD4F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1001FD50C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v11 = v10;
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_1001C7478();
  unint64_t v18 = sub_1001D7184(v17);
  LOBYTE(v17) = v19;
  sub_1001E43E0();
  if ((v17 & 1) != 0)
  {
    char v20 = sub_1002013CC();
    sub_1002018D4();
    Swift::Int v22 = *(void *)(v21 + 24);
    sub_1001AFF14(v15);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v20, v22);
    uint64_t v23 = *(void *)(a10 + 48);
    uint64_t v24 = sub_1001B1234();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))( v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v18,  v24);
    uint64_t v25 = sub_1001B4B94(0LL, v13, v11);
    sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    _NativeDictionary._delete(at:)(v18, a10, v24, v25, v26);
    sub_1002018E8();
  }

  sub_1001C73F4();
}

uint64_t sub_1001FD618(uint64_t a1)
{
  int v5 = v2;
  sub_10020187C();
  sub_1001D7184(a1);
  sub_10020188C();
  if ((v4 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v5);
    sub_100201758();
    int v7 = sub_1001AFF14((uint64_t *)&unk_100448FC0);
    sub_100201744(v7, v8, v9, v10, v11, v12, v13, v14, v28, v29);
    uint64_t v15 = *(void *)(v30 + 48);
    uint64_t v16 = sub_1001B1234();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 72) * v3;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15 + v18, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v1, *(void *)(v30 + 56) + v18, v16);
    sub_10020181C((unint64_t *)&qword_100447E50, v19, (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = sub_10020183C();
    _NativeDictionary._delete(at:)(v20, v21, v16, v16, v22);
    sub_10020192C();
    uint64_t v23 = v1;
    uint64_t v24 = 0LL;
    uint64_t v25 = 1LL;
    uint64_t v26 = v16;
  }

  else
  {
    sub_1001B1234();
    uint64_t v23 = sub_1001AA9D0();
  }

  return sub_1001A9670(v23, v24, v25, v26);
}

uint64_t sub_1001FD728()
{
  char v1 = v0;
  uint64_t v3 = v2;
  sub_1002013C0();
  sub_100201624();
  sub_100201294();
  if ((v1 & 1) != 0)
  {
    sub_1002013CC();
    sub_10020122C();
    int v4 = sub_1001AFF14(&qword_100448FA8);
    sub_10020125C(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    sub_10020173C(*(void *)(v15 + 48) + 16 * v3);
    _NativeDictionary._delete(at:)( v3,  v15,  &type metadata for String,  &type metadata for CallInfoPendingScore,  &protocol witness table for String);
    sub_100201724();
  }

  return sub_10020183C();
}

double sub_1001FD7DC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1001D70EC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v14 = *v3;
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    Swift::Int v11 = *(void *)(v10 + 24);
    sub_1001AFF14(&qword_100448EF0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    sub_1001D8504(*(void *)(v14 + 48) + 40 * v7);
    sub_1001B03EC((_OWORD *)(*(void *)(v14 + 56) + 32 * v7), a2);
    _NativeDictionary._delete(at:)( v7,  v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    uint64_t v12 = *v3;
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

void sub_1001FD8F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_1001FD914()
{
  char v2 = v1;
  sub_1002013C0();
  sub_100201618();
  sub_100201294();
  if ((v2 & 1) == 0) {
    return 0LL;
  }
  sub_1002013CC();
  sub_10020122C();
  int v3 = sub_1001AFF14(&qword_100448F98);
  sub_10020125C(v3, v4, v5, v6, v7, v8, v9, v10, v16, v17);
  uint64_t v11 = *(void *)(v18 + 48);
  uint64_t v12 = sub_1001B1234();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v0,  v12);
  uint64_t v13 = *(void *)(*(void *)(v18 + 56) + 16 * v0);
  sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  _NativeDictionary._delete(at:)(v0, v18, v12, &type metadata for String, v14);
  sub_100201724();
  return v13;
}

#error "1001FDA38: call analysis failed (funcsize=32)"
#error "1001FDACC: call analysis failed (funcsize=34)"
#error "1001FDB5C: call analysis failed (funcsize=38)"
uint64_t sub_1001FDBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v4 = v3;
  int v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  int v9 = sub_1001D7094(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v19 = *v4;
    uint64_t v12 = *v4;
    void *v4 = 0x8000000000000000LL;
    uint64_t v13 = *(void *)(v12 + 24);
    sub_1001AFF14(&qword_100448F70);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease(*(void *)(*(void *)(v19 + 48) + 16 * v9 + 8));
    uint64_t v14 = *(void *)(v19 + 56);
    uint64_t v15 = type metadata accessor for PendingMembershipInfo(0LL);
    sub_100201174( v14 + *(void *)(*(void *)(v15 - 8) + 72LL) * v9,  a3,  type metadata accessor for PendingMembershipInfo);
    _NativeDictionary._delete(at:)(v9, v19, &type metadata for String, v15, &protocol witness table for String);
    uint64_t v16 = *v4;
    void *v4 = v19;
    swift_bridgeObjectRelease(v16);
    return sub_1001A9670(a3, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v18 = type metadata accessor for PendingMembershipInfo(0LL);
    return sub_1001A9670(a3, 1LL, 1LL, v18);
  }

uint64_t sub_1001FDD08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1001D7184(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v20 = *v3;
    uint64_t v10 = *v3;
    *int v3 = 0x8000000000000000LL;
    Swift::Int v11 = *(void *)(v10 + 24);
    sub_1001AFF14((uint64_t *)&unk_100448F40);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    uint64_t v12 = *(void *)(v20 + 48);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v7,  v13);
    uint64_t v14 = *(void *)(v20 + 56);
    uint64_t v15 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_100201174( v14 + *(void *)(*(void *)(v15 - 8) + 72LL) * v7,  a2,  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession);
    sub_1001A9F18( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    _NativeDictionary._delete(at:)(v7, v20, v13, v15, v16);
    uint64_t v17 = *v3;
    *int v3 = v20;
    swift_bridgeObjectRelease(v17);
    return sub_1001A9670(a2, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v19 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    return sub_1001A9670(a2, 1LL, 1LL, v19);
  }

void sub_1001FDE80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1001FDE94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = *v10;
  swift_bridgeObjectRetain(*v10);
  uint64_t v16 = sub_10020183C();
  unint64_t v18 = sub_1001D7094(v16, v17);
  char v20 = v19;
  swift_bridgeObjectRelease(v15);
  if ((v20 & 1) != 0)
  {
    char v21 = sub_1002013CC();
    sub_1002018D4();
    Swift::Int v23 = *(void *)(v22 + 24);
    sub_1001AFF14(v14);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v21, v23);
    sub_10020173C(*(void *)(a10 + 48) + 16 * v18);
    uint64_t v24 = v12(0LL);
    _NativeDictionary._delete(at:)(v18, a10, &type metadata for String, v24, &protocol witness table for String);
    sub_100201724();
  }

  sub_1001C73F4();
}

void sub_1001FDF6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

#error "1001FDFC4: call analysis failed (funcsize=33)"
#error "1001FE144: call analysis failed (funcsize=104)"
double sub_1001FE1D0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1001D7360(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v17 = *v3;
    uint64_t v10 = *v3;
    *int v3 = 0x8000000000000000LL;
    Swift::Int v11 = *(void *)(v10 + 24);
    sub_1001AFF14((uint64_t *)&unk_100448EA0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);

    sub_1001B03EC((_OWORD *)(*(void *)(v17 + 56) + 32 * v7), a2);
    type metadata accessor for CFString(0LL);
    uint64_t v13 = v12;
    sub_1001A9F18( (unint64_t *)&qword_100446DF0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10037A8D8);
    _NativeDictionary._delete(at:)(v7, v17, v13, (char *)&type metadata for Any + 8, v14);
    uint64_t v15 = *v3;
    *int v3 = v17;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

#error "1001FE340: call analysis failed (funcsize=17)"
uint64_t sub_1001FE34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FE3A0(a1, a2, a3, a4, sub_1001FF2DC);
}

uint64_t sub_1001FE358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001FE530(a1, a2, a3);
}

uint64_t sub_1001FE364(uint64_t a1, uint64_t a2)
{
  return sub_1001FE508(a1, a2, sub_1001FF62C);
}

uint64_t sub_1001FE370(uint64_t a1, uint64_t a2)
{
  return sub_1001FE464(a1, a2, &unk_100448FD0);
}

uint64_t sub_1001FE37C(uint64_t a1, uint64_t a2)
{
  return sub_1001FE464(a1, a2, &unk_100448FB0);
}

uint64_t sub_1001FE388(uint64_t a1, uint64_t a2)
{
  return sub_1001FE464(a1, a2, &unk_100448FD8);
}

uint64_t sub_1001FE394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FE3A0(a1, a2, a3, a4, sub_1001FF9F8);
}

#error "1001FE3E0: call analysis failed (funcsize=19)"
uint64_t sub_1001FE3EC(_OWORD *a1, uint64_t a2)
{
  void *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  char v8 = *v2;
  void *v2 = 0x8000000000000000LL;
  sub_1001FFC14(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v2;
  void *v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1001FE458(uint64_t a1, uint64_t a2)
{
  return sub_1001FE464(a1, a2, &unk_100448F88);
}

#error "1001FE48C: call analysis failed (funcsize=13)"
uint64_t sub_1001FE498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  sub_100201500();
  int v3 = sub_100201640();
  sub_1001FFD38(v3, a2, v4);
  uint64_t v13 = sub_1002015B8(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_1002013F0(v13);
}

uint64_t sub_1001FE4D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448510, (uint64_t)sub_100200488, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE4E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448F10, (uint64_t)sub_100200408, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE4FC(uint64_t a1, uint64_t a2)
{
  return sub_1001FE508(a1, a2, sub_1001FFE34);
}

#error "1001FE524: call analysis failed (funcsize=10)"
#error "1001FE560: call analysis failed (funcsize=15)"
#error "1001FE5BC: call analysis failed (funcsize=23)"
uint64_t sub_1001FE5C8(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  sub_100201500();
  int v3 = sub_100201640();
  int v5 = sub_10020030C(v3, a2, v4);
  uint64_t v13 = sub_1002015B8(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_1002013F0(v13);
}

uint64_t sub_1001FE604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448F28, (uint64_t)sub_100200408, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE618( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448F20, (uint64_t)sub_100200408, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE62C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448EF8, (uint64_t)sub_100200874, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE640( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448F00, (uint64_t)sub_100200488, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001FE530(a1, a2, a3);
}

uint64_t sub_1001FE660(uint64_t a1, void *a2)
{
  int v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    Swift::Int v6 = sub_1001FE7B4(v7, result + 1);
    *int v3 = v6;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(v6);
    sub_1002018C0();
    sub_100200654(a1, a2, v9);
    uint64_t v18 = sub_1002015B8(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20);
    return sub_1002013F0(v18);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001FE6E0(_OWORD *a1, void *a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  void *v2 = 0x8000000000000000LL;
  sub_100200768(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v2;
  void *v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1001FE74C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1001FE760(a1, a2, a3, (uint64_t)&unk_100448E98, (uint64_t)sub_100200874, a6, a7, a8, a9, a10);
}

uint64_t sub_1001FE760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v11;
  sub_100201500();
  uint64_t v13 = sub_1002015C8();
  v12(v13);
  uint64_t v14 = *v10;
  uint64_t *v10 = a10;
  return sub_10020158C(v14);
}

Swift::Int sub_1001FE7B4(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  sub_1001AFF14(&qword_100448EC0);
  uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
  uint64_t v29 = v4;
  uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
  uint64_t v6 = __CocoaDictionary.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
  while (1)
  {
    uint64_t v27 = v8;
    swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
    uint64_t v26 = v9;
    uint64_t v11 = sub_1001B4B94(0LL, (unint64_t *)&qword_100448780, &OBJC_CLASS___NSNumber_ptr);
    swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v11, 7LL);
    uint64_t v4 = v29;
    unint64_t v12 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v12)
    {
      sub_1001FEF48(v12 + 1, 1LL);
      uint64_t v4 = v29;
    }

    uint64_t v14 = v27;
    uint64_t v13 = v28;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v16 = v4 + 64;
    uint64_t v17 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v4 + 64 + 8 * (v18 >> 6))) == 0) {
      break;
    }
    unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v4 + 64 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(void *)(*(void *)(v4 + 48) + 8 * v20) = v13;
    *(void *)(*(void *)(v4 + 56) + 8 * v20) = v14;
    ++*(void *)(v4 + 16);
    uint64_t v8 = __CocoaDictionary.Iterator.next()();
    uint64_t v9 = v25;
    if (!v8) {
      goto LABEL_16;
    }
  }

  char v21 = 0;
  unint64_t v22 = (unint64_t)(63 - v17) >> 6;
  while (++v19 != v22 || (v21 & 1) == 0)
  {
    BOOL v23 = v19 == v22;
    if (v19 == v22) {
      unint64_t v19 = 0LL;
    }
    v21 |= v23;
    uint64_t v24 = *(void *)(v16 + 8 * v19);
    if (v24 != -1)
    {
      unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

void sub_1001FE9F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  uint64_t v18 = sub_1002013D4();
  if (*(void *)(v15 + 16))
  {
    sub_1002012D0();
    uint64_t v19 = 0LL;
    if (!v16) {
      goto LABEL_4;
    }
LABEL_3:
    sub_1002017D4();
    while (1)
    {
      sub_100201824();
      if ((v27 & 1) == 0) {
        uint64_t v22 = sub_1001C7478();
      }
      uint64_t v28 = sub_100201730(v22, v23, v24, v25, v26);
      sub_1002017EC((uint64_t)v28, v29, v30, v31, v32);
      sub_100201944();
      sub_1002016BC();
      if (v33)
      {
        sub_100201674();
        while (++v36 != v37 || (v35 & 1) == 0)
        {
          BOOL v38 = v36 == v37;
          if (v36 == v37) {
            uint64_t v36 = 0LL;
          }
          v35 |= v38;
          if (*(void *)(v17 + 8 * v36) != -1LL)
          {
            sub_100201660();
            goto LABEL_27;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      sub_100201688();
LABEL_27:
      sub_10020134C(v34);
      if (v16) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v20 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_36;
      }
      if (v20 >= a11) {
        goto LABEL_29;
      }
      ++v19;
      if (!*(void *)(a12 + 8 * v20))
      {
        uint64_t v19 = v20 + 1;
        if (v20 + 1 >= a11) {
          goto LABEL_29;
        }
        if (!*(void *)(a12 + 8 * v19))
        {
          uint64_t v21 = v20 + 2;
          if (v21 >= a11)
          {
LABEL_29:
            sub_1001B1164();
            uint64_t v14 = a10;
            if ((a14 & 1) != 0)
            {
              sub_1002016FC();
              if (v40 != v41) {
                sub_1002017B4(v39);
              }
              else {
                sub_1002015A4(v39);
              }
              *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
            }

            break;
          }

          if (!*(void *)(a12 + 8 * v21))
          {
            while (1)
            {
              uint64_t v19 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_37;
              }
              if (v19 >= a11) {
                goto LABEL_29;
              }
              ++v21;
              if (*(void *)(a12 + 8 * v19)) {
                goto LABEL_15;
              }
            }
          }

          uint64_t v19 = v21;
        }
      }

void sub_1001FEB68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

void sub_1001FEB74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

void sub_1001FEB80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  a35 = v38;
  a36 = v39;
  sub_1002014BC();
  sub_1001AFF14(v40);
  uint64_t v41 = sub_1002013D4();
  uint64_t v42 = v41;
  if (*(void *)(v37 + 16))
  {
    uint64_t v43 = 1LL << *(_BYTE *)(v37 + 32);
    uint64_t v73 = v37 + 64;
    if (v43 < 64) {
      uint64_t v44 = ~(-1LL << v43);
    }
    else {
      uint64_t v44 = -1LL;
    }
    unint64_t v45 = v44 & *(void *)(v37 + 64);
    int64_t v72 = (unint64_t)(v43 + 63) >> 6;
    uint64_t v46 = v41 + 64;
    uint64_t v47 = swift_retain(v37);
    int64_t v52 = 0LL;
    if (!v45) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v53 = __clz(__rbit64(v45));
    v45 &= v45 - 1;
    for (unint64_t i = v53 | (v52 << 6); ; unint64_t i = __clz(__rbit64(v56)) + (v52 << 6))
    {
      unint64_t v58 = (uint64_t *)(*(void *)(v37 + 48) + 16 * i);
      uint64_t v60 = *v58;
      uint64_t v59 = v58[1];
      uint64_t v61 = *(void *)(*(void *)(v37 + 56) + 8 * i);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain(v58[1]);
        uint64_t v47 = sub_1001C7478();
      }

      sub_100201730(v47, v48, v49, v50, v51);
      String.hash(into:)(&a16, v60, v59);
      unint64_t v62 = sub_100201944() & ~(-1LL << *(_BYTE *)(v42 + 32));
      if (((-1LL << v62) & ~*(void *)(v46 + 8 * (v62 >> 6))) == 0)
      {
        sub_100201674();
        while (++v65 != v66 || (v64 & 1) == 0)
        {
          BOOL v67 = v65 == v66;
          if (v65 == v66) {
            uint64_t v65 = 0LL;
          }
          v64 |= v67;
          if (*(void *)(v46 + 8 * v65) != -1LL)
          {
            sub_100201660();
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

      sub_100201688();
LABEL_30:
      *(void *)(v46 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v63;
      BOOL v68 = (void *)(*(void *)(v42 + 48) + 16 * v63);
      *BOOL v68 = v60;
      v68[1] = v59;
      *(void *)(*(void *)(v42 + 56) + 8 * v63) = v61;
      ++*(void *)(v42 + 16);
      if (v45) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v55 = v52 + 1;
      if (__OFADD__(v52, 1LL)) {
        goto LABEL_39;
      }
      if (v55 >= v72) {
        goto LABEL_32;
      }
      unint64_t v56 = *(void *)(v73 + 8 * v55);
      ++v52;
      if (!v56)
      {
        int64_t v52 = v55 + 1;
        if (v55 + 1 >= v72) {
          goto LABEL_32;
        }
        unint64_t v56 = *(void *)(v73 + 8 * v52);
        if (!v56)
        {
          int64_t v57 = v55 + 2;
          if (v57 >= v72)
          {
LABEL_32:
            sub_1001B1164();
            if ((a14 & 1) != 0)
            {
              sub_1002016FC();
              if (v70 != v71) {
                sub_1002017B4(v69);
              }
              else {
                sub_1002015A4(v69);
              }
              *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
            }

            break;
          }

          unint64_t v56 = *(void *)(v73 + 8 * v57);
          if (!v56)
          {
            while (1)
            {
              int64_t v52 = v57 + 1;
              if (__OFADD__(v57, 1LL)) {
                goto LABEL_40;
              }
              if (v52 >= v72) {
                goto LABEL_32;
              }
              unint64_t v56 = *(void *)(v73 + 8 * v52);
              ++v57;
              if (v56) {
                goto LABEL_18;
              }
            }
          }

          int64_t v52 = v57;
        }
      }

void sub_1001FEDCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  uint64_t v18 = sub_1002013D4();
  if (*(void *)(v15 + 16))
  {
    sub_1002012D0();
    uint64_t v19 = 0LL;
    if (!v16) {
      goto LABEL_4;
    }
LABEL_3:
    sub_1002017D4();
    while (1)
    {
      sub_100201824();
      if ((v27 & 1) == 0)
      {
        sub_1001C7478();
        uint64_t v22 = v14;
      }

      uint64_t v28 = sub_100201730((uint64_t)v22, v23, v24, v25, v26);
      sub_1002017EC((uint64_t)v28, v29, v30, v31, v32);
      sub_100201944();
      sub_1002016BC();
      if (v33)
      {
        sub_100201674();
        while (++v36 != v37 || (v35 & 1) == 0)
        {
          BOOL v38 = v36 == v37;
          if (v36 == v37) {
            uint64_t v36 = 0LL;
          }
          v35 |= v38;
          if (*(void *)(v17 + 8 * v36) != -1LL)
          {
            sub_100201660();
            goto LABEL_27;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      sub_100201688();
LABEL_27:
      sub_10020134C(v34);
      if (v16) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v20 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_36;
      }
      if (v20 >= a11) {
        goto LABEL_29;
      }
      ++v19;
      if (!*(void *)(a12 + 8 * v20))
      {
        uint64_t v19 = v20 + 1;
        if (v20 + 1 >= a11) {
          goto LABEL_29;
        }
        if (!*(void *)(a12 + 8 * v19))
        {
          uint64_t v21 = v20 + 2;
          if (v21 >= a11)
          {
LABEL_29:
            sub_1001B1164();
            uint64_t v14 = a10;
            if ((a14 & 1) != 0)
            {
              sub_1002016FC();
              if (v40 != v41) {
                sub_1002017B4(v39);
              }
              else {
                sub_1002015A4(v39);
              }
              *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
            }

            break;
          }

          if (!*(void *)(a12 + 8 * v21))
          {
            while (1)
            {
              uint64_t v19 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_37;
              }
              if (v19 >= a11) {
                goto LABEL_29;
              }
              ++v21;
              if (*(void *)(a12 + 8 * v19)) {
                goto LABEL_15;
              }
            }
          }

          uint64_t v19 = v21;
        }
      }

Swift::Int sub_1001FEF48(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1001AFF14(&qword_100448EC0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    char v35 = v3;
    uint64_t v36 = v5 + 64;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v15 << 6))
    {
      uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * i);
      uint64_t v23 = *(void **)(*(void *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
      {
        id v24 = v22;
        id v25 = v23;
      }

      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v13 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }

      unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v13 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
      *(void *)(*(void *)(v8 + 48) + 8 * v29) = v22;
      *(void *)(*(void *)(v8 + 56) + 8 * v29) = v23;
      ++*(void *)(v8 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_44;
      }
      if (v18 >= v12) {
        break;
      }
      uint64_t v19 = (void *)(v5 + 64);
      unint64_t v20 = *(void *)(v36 + 8 * v18);
      ++v15;
      if (!v20)
      {
        int64_t v15 = v18 + 1;
        if (v18 + 1 >= v12) {
          goto LABEL_35;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v15);
        if (!v20)
        {
          int64_t v21 = v18 + 2;
          if (v21 >= v12)
          {
LABEL_35:
            swift_release(v5);
            int v3 = v35;
            if ((a2 & 1) == 0) {
              goto LABEL_42;
            }
            goto LABEL_38;
          }

          unint64_t v20 = *(void *)(v36 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v15 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_45;
              }
              if (v15 >= v12) {
                goto LABEL_35;
              }
              unint64_t v20 = *(void *)(v36 + 8 * v15);
              ++v21;
              if (v20) {
                goto LABEL_21;
              }
            }
          }

          int64_t v15 = v21;
        }
      }

_OWORD *sub_1001FF208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_1001AFF14(&qword_100447BC0);
  if (!sub_100201400()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_100201508();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v6;
  if ((v11 & 1) != 0)
  {
    int64_t v15 = (void *)(v14[7] + 32 * v10);
    sub_1001B0438(v15);
    return sub_1001B03EC(v3, v15);
  }

  else
  {
    sub_1002008F4(v10, v5, v4, v3, v14);
    return (_OWORD *)swift_bridgeObjectRetain(v4);
  }

uint64_t sub_1001FF2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v13 = sub_1001D711C(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001AFF14(&qword_100449068);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1001D711C(a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
    return result;
  }

  unint64_t v18 = result;
LABEL_5:
  uint64_t v22 = *v6;
  if ((v19 & 1) == 0) {
    return sub_10020095C(v18, a4, a1, a2, a3, v22);
  }
  uint64_t v23 = (uint64_t *)(v22[7] + 24 * v18);
  uint64_t *v23 = a1;
  v23[1] = a2;
  void v23[2] = a3;
  return result;
}

uint64_t sub_1001FF3F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1001D7094(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001AFF14(&qword_100448E90);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1001D7094(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = v21 + *(void *)(*(void *)(sub_1001AFF14(&qword_100447E10) - 8) + 72LL) * v16;
    return sub_1002010DC(a1, v22);
  }

  else
  {
    sub_1002009AC(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

unint64_t sub_1001FF51C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = sub_1001D714C(a1);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001AFF14(&qword_100449058);
  BOOL v18 = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if (!v18) {
    goto LABEL_5;
  }
  uint64_t v19 = sub_1001D714C(v18);
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_9:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_1003DE378);
    __break(1u);
    return result;
  }

  unint64_t v16 = v19;
LABEL_5:
  uint64_t v21 = *v5;
  if ((v17 & 1) == 0) {
    return sub_100200A48(v16, a1, a2, a3, v21);
  }
  uint64_t v22 = (uint64_t *)(*(void *)(v21 + 56) + 24 * v16);
  uint64_t v23 = *v22;
  swift_bridgeObjectRelease(v22[1]);
  unint64_t result = swift_unknownObjectRelease(v23);
  *uint64_t v22 = a1;
  v22[1] = a2;
  void v22[2] = a3;
  return result;
}

uint64_t sub_1001FF62C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = (void *)*v3;
  unint64_t v13 = sub_1001D7184(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001AFF14(&qword_100449040);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1001D7184(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_unknownObjectRelease(*(void *)(v23 + 8 * v18));
    *(void *)(v23 + 8 * v1_Block_object_dispose(va, 8) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100200A90(v18, (uint64_t)v11, a1, v22);
  }

  return result;
}

void sub_1001FF770()
{
  char v2 = v1;
  int v3 = v0;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v24 = v8;
  uint64_t v9 = sub_1001B1234();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v13 = *v0;
  sub_1001D7184(v7);
  sub_1002012A4();
  if (v16)
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v17 = v14;
  char v18 = v15;
  sub_1001AFF14(v2);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v5 & 1, v13))
  {
    unint64_t v19 = sub_1001D7184(v7);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }

uint64_t sub_1001FF890(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = (void *)*v3;
  unint64_t v13 = sub_1001D7184(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001AFF14((uint64_t *)&unk_100448FC0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1001D7184(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0) {
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))( v22[7] + *(void *)(v9 + 72) * v18,  a1,  v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100200B28(v18, (uint64_t)v11, a1, v22);
}

void sub_1001FF9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  char v12 = (void *)*v5;
  unint64_t v13 = sub_1001D7094(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001AFF14(&qword_100448FA8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1001D7094(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7] + 16 * v18;
    uint64_t v24 = *(void **)(v23 + 8);

    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + _Block_object_dispose(va, 8) = a2;
  }

  else
  {
    sub_100200BD4(v18, a3, a4, a1, a2, v22);
    swift_bridgeObjectRetain(a4);
  }

uint64_t sub_1001FFB28( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  Swift::Int v24 = *v18;
  char v35 = (void *)v25;
  sub_1001D71EC(v25);
  sub_1002012A4();
  if (v28)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v29 = v26;
  char v30 = v27;
  sub_1001AFF14(&qword_100448FA0);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(v21 & 1, v24);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1001D71EC((uint64_t)v35);
  if ((v30 & 1) != (v32 & 1))
  {
LABEL_9:
    type metadata accessor for Name(0LL);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v34);
    __break(1u);
    return result;
  }

  unint64_t v29 = result;
LABEL_5:
  uint64_t v33 = (void *)*v19;
  if ((v30 & 1) != 0)
  {
    *(void *)(v33[7] + 8 * v29) = v23;
  }

  else
  {
    sub_100200C20(v29, (uint64_t)v35, v23, v33);
    return (uint64_t)v35;
  }

  return result;
}

_OWORD *sub_1001FFC14(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1001D70EC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001AFF14(&qword_100448EF0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1001D70EC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    char v19 = (void *)(v18[7] + 32 * v14);
    sub_1001B0438(v19);
    return sub_1001B03EC(a1, v19);
  }

  else
  {
    sub_1001D8A64(a2, (uint64_t)v21);
    return sub_100200C64(v14, (uint64_t)v21, a1, v18);
  }

void sub_1001FFD38(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1001D711C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001AFF14(&qword_100448F78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1001D711C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
    return;
  }

  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = v18[7];

    *(void *)(v19 + 8 * v14) = a1;
  }

  else
  {
    sub_100200C20(v14, a2, a1, v18);
  }

uint64_t sub_1001FFE34(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v12 = (void *)*v3;
  unint64_t v13 = sub_1001D7184(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001AFF14(&qword_100448F58);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1001D7184(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v23 + 8 * v18));
    *(void *)(v23 + 8 * v1_Block_object_dispose(va, 8) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100200A90(v18, (uint64_t)v11, a1, v22);
  }

  return result;
}

void sub_1001FFF78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1001D7094(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_1001AFF14(&qword_100448F70);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1001D7094(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = type metadata accessor for PendingMembershipInfo(0LL);
    sub_100201194( a1,  v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v16,  type metadata accessor for PendingMembershipInfo);
  }

  else
  {
    sub_100200D1C(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

void sub_1002000A4()
{
  char v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  __int16 v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  sub_1001D711C(v4);
  sub_1002012A4();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  sub_1001AFF14(&qword_100448F50);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1001D711C(v5);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = (void *)*v1;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7] + 24 * v16;

    *(void *)uint64_t v21 = v11;
    *(void *)(v21 + _Block_object_dispose(va, 8) = v9;
    *(_BYTE *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v7 & 1;
    *(_BYTE *)(v21 + 17) = HIBYTE(v7) & 1;
    sub_1001B0FF8();
  }

  else
  {
    sub_100200DAC(v16, v5, v11, v9, v7 & 0x101, v20);
  }

void sub_1002001B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  unint64_t v13 = sub_1001D7184(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_1001AFF14((uint64_t *)&unk_100448F40);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1001D7184(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = *(void *)(v22 + 56);
    uint64_t v24 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_100201194( a1,  v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v18,  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_100200E08(v18, (uint64_t)v11, a1, v22);
  }

unint64_t sub_10020030C(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  sub_1001D8ED4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_1001AFF14((uint64_t *)&unk_100448F30);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  sub_1001D8ED4(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt32);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if ((v15 & 1) == 0) {
    return sub_100200E68(v14, a2, a1, v18);
  }
  uint64_t v19 = v18[7];
  unint64_t result = swift_release(*(void *)(v19 + 8 * v14));
  *(void *)(v19 + 8 * v14) = a1;
  return result;
}

void sub_100200408()
{
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_1002015EC();
  BOOL v8 = sub_100201400();
  if (v8)
  {
    sub_100201508();
    sub_10020180C();
    if (!v12) {
      goto LABEL_10;
    }
    BOOL v2 = v8;
  }

  uint64_t v13 = *v1;
  if ((v3 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v13 + 56);

    *(void *)(v14 + 8 * sub_1001FC3C8(v0, v1, v2) = v0;
    sub_1001B0FF8();
  }

  else
  {
    uint64_t v15 = sub_1002018FC(v8, v9, v10, v11, v13);
    sub_1002012B8(v15);
  }

void sub_100200488()
{
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_1002015EC();
  if (sub_100201400())
  {
    sub_100201508();
    sub_10020180C();
    if (!v11) {
      goto LABEL_10;
    }
    unint64_t v4 = v10;
  }

  uint64_t v12 = *v3;
  if ((v5 & 1) != 0)
  {
    uint64_t v13 = *(void *)(v12 + 56);
    swift_bridgeObjectRelease(*(void *)(v13 + 8 * v4));
    *(void *)(v13 + 8 * v4) = v0;
    sub_1001B0FF8();
  }

  else
  {
    sub_100200EAC(v4, v2, v1, v0, v12);
    sub_1002012B8(v1);
  }

void sub_10020051C()
{
}

id sub_100200528(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  char v5 = (void **)v4;
  char v9 = (void *)*v4;
  sub_1001D7318((uint64_t)a3);
  uint64_t v12 = v9[2];
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v15 = v10;
  char v16 = v11;
  sub_1001AFF14((uint64_t *)&unk_10044CA10);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_1001D7318((uint64_t)a3);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    uint64_t v22 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
    __break(1u);
    return result;
  }

  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = *v5;
  if ((v16 & 1) != 0)
  {
    unint64_t v20 = (uint64_t *)(v19[7] + 16 * v15);
    id result = (id)swift_bridgeObjectRelease(v20[1]);
    *unint64_t v20 = a1;
    v20[1] = a2;
  }

  else
  {
    sub_100200F10(v15, (uint64_t)a3, a1, a2, v19);
    return a3;
  }

  return result;
}

void sub_100200654(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  sub_1001D7318((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v8;
  char v14 = v9;
  sub_1001AFF14(&qword_100448EB8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  sub_1001D7318((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    uint64_t v20 = sub_1001B4B94(0LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return;
  }

  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v4;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = v17[7];

    *(void *)(v18 + 8 * v13) = a1;
  }

  else
  {
    sub_100200C20(v13, (uint64_t)a2, a1, v17);
    id v19 = a2;
  }

_OWORD *sub_100200768(_OWORD *a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v8 = sub_1001D7360((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v8;
  char v14 = v9;
  sub_1001AFF14((uint64_t *)&unk_100448EA0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_1001D7360((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    type metadata accessor for CFString(0LL);
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v4;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = (void *)(v17[7] + 32 * v13);
    sub_1001B0438(v18);
    return sub_1001B03EC(a1, v18);
  }

  else
  {
    sub_100200F58(v13, (uint64_t)a2, a1, v17);
    return a2;
  }

void sub_100200874()
{
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_1002015EC();
  BOOL v8 = sub_100201400();
  if (v8)
  {
    sub_100201508();
    sub_10020180C();
    if (!v12) {
      goto LABEL_10;
    }
    BOOL v2 = v8;
  }

  uint64_t v13 = *v1;
  if ((v3 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v13 + 56);
    swift_release(*(void *)(v14 + 8 * v2));
    *(void *)(v14 + 8 * sub_1001FC3C8(v0, v1, v2) = v0;
    sub_1001B0FF8();
  }

  else
  {
    uint64_t v15 = sub_1002018FC(v8, v9, v10, v11, v13);
    sub_1002012B8(v15);
  }

_OWORD *sub_1002008F4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  id result = sub_1001B03EC(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_10020095C( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = (void *)(a6[7] + 24 * result);
  void *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

void sub_1002009AC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  BOOL v8 = (void *)(a5[6] + 16 * a1);
  *BOOL v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_1001AFF14(&qword_100447E10);
  sub_1002010B0(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1, &qword_100447E10);
  uint64_t v11 = a5[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a5[2] = v13;
  }
}

unint64_t sub_100200A48(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 56) + 24 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  _OWORD v5[2] = a4;
  uint64_t v6 = *(void *)(a5 + 16);
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    *(void *)(a5 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  }
  return result;
}

uint64_t sub_100200A90(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100200B28(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72) * a1;
  uint64_t v12 = v8 + v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

unint64_t sub_100200BD4( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_100200C20(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

_OWORD *sub_100200C64(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1001B03EC(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void sub_100200CDC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100201314(a1, a2, a3, a4);
  sub_1002015FC(v7);
  *(void *)(*(void *)(v4 + 56) + 8 * sub_100201270(v4, v5, v6) = v5;
  uint64_t v8 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    sub_1001B0F4C();
  }

void sub_100200D1C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for PendingMembershipInfo(0LL);
  sub_100201174( a4,  v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  type metadata accessor for PendingMembershipInfo);
  uint64_t v11 = a5[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a5[2] = v13;
  }
}

unint64_t sub_100200DAC( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 24 * result;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + _Block_object_dispose(va, 8) = a4;
  *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a5 & 1;
  *(_BYTE *)(v6 + 17) = HIBYTE(a5) & 1;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

void sub_100200E08(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100201314(a1, a2, a3, a4);
  sub_1002015FC(v7);
  uint64_t v8 = *(void *)(v4 + 56);
  uint64_t v9 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  sub_100201174( v5,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v6,  type metadata accessor for SimulatedConversationManager.SimulatedGroupSession);
  uint64_t v10 = *(void *)(v4 + 16);
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    sub_1001B0F4C();
  }

unint64_t sub_100200E68(unint64_t result, int a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_100200EAC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100201518(a1, a2, a3, a4, a5);
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  }
  return result;
}

unint64_t sub_100200EC8(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a4[6] + result) = a2 & 1;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_100200F10(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a5[6] + 8 * result) = a2;
  BOOL v5 = (void *)(a5[7] + 16 * result);
  *BOOL v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_100200F58(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  unint64_t result = sub_1001B03EC(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

size_t sub_100200FBC(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  char v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    BOOL v5 = _swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100448E80);
    BOOL v5 = (void *)swift_allocObject(v6, v4 + 32, 7LL);
    unint64_t result = j__malloc_size(v5);
    _OWORD v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }

  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }

    __break(1u);
  }

unint64_t sub_10020106C()
{
  unint64_t result = qword_100448E78;
  if (!qword_100448E78)
  {
    uint64_t v1 = sub_1001B0504(&qword_100448E70);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100448E78);
  }

  return result;
}

void sub_1002010B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1001AFF14(a3);
  sub_1002016E4(v3);
  sub_1001AA978();
}

uint64_t sub_1002010DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100201124()
{
  unint64_t result = qword_100448EC8;
  if (!qword_100448EC8)
  {
    uint64_t v1 = sub_1001B4B94(255LL, (unint64_t *)&qword_100447CE0, off_1003D5D70);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100448EC8);
  }

  return result;
}

void sub_100201174(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1001B118C(a1, a2, a3);
  sub_1002016E4(v3);
  sub_1001AA978();
}

void sub_100201194(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_1001B118C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v3, v4, v5);
  sub_1001AA978();
}

void sub_1002011C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1001AFF14(a2);
  sub_100201554(v2);
  sub_1001AA978();
}

unint64_t sub_1002011F0()
{
  unint64_t result = qword_100449060;
  if (!qword_100449060)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037B408, &unk_1003DE378);
    atomic_store(result, (unint64_t *)&qword_100449060);
  }

  return result;
}

void sub_10020122C()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_100201248(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

BOOL sub_10020125C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

unint64_t sub_100201270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001D7094(a2, a3);
}

uint64_t sub_100201294()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_1002012B8(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1002012D0()
{
  return swift_retain(v0);
}

uint64_t sub_100201314(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * (a1 >> 6) + 64) |= 1LL << a1;
  return type metadata accessor for UUID(0LL);
}

void sub_10020134C(unint64_t a1@<X8>)
{
  *(void *)(v5 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
  uint64_t v6 = (void *)(v2[6] + 16 * a1);
  void *v6 = v4;
  v6[1] = v3;
  *(void *)(v2[7] + 8 * a1) = v1;
  ++v2[2];
}

  ;
}

  ;
}

uint64_t sub_1002013C0()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1002013CC()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1002013D4()
{
  return static _DictionaryStorage.resize(original:capacity:move:)(v1, v0, v2);
}

uint64_t sub_1002013F0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

BOOL sub_100201400()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100201414(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, a1, a2, 0LL);
}

  ;
}

uint64_t sub_100201444(uint64_t a1)
{
  return _NativeDictionary._delete(at:)(v1, v2, v3, v4, a1);
}

uint64_t sub_10020145C()
{
  uint64_t v2 = *v0;
  *Swift::Int v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100201468(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))( v1 + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,  v3);
}

uint64_t sub_100201480()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

  ;
}

uint64_t sub_1002014AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

  ;
}

uint64_t sub_1002014D8(uint64_t a1)
{
  void *v2 = 0x8000000000000000LL;
  return v1(v5, v4, v3, a1);
}

uint64_t sub_100201500()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

unint64_t sub_100201508()
{
  return sub_1001D7094(v1, v0);
}

unint64_t sub_100201518(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_100201554(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100201568(uint64_t a1)
{
  void *v2 = 0x8000000000000000LL;
  return v1(v4, v3, a1);
}

uint64_t sub_10020158C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1002015A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10024772C(0LL, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t sub_1002015B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t sub_1002015C8()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_1002015EC()
{
  return sub_1001AFF14(v0);
}

uint64_t sub_1002015FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))( v3 + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,  v1,  a1);
}

unint64_t sub_100201618()
{
  return sub_1001D7184(v0);
}

unint64_t sub_100201624()
{
  return sub_1001D7094(v1, v0);
}

  ;
}

uint64_t sub_100201640()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10020169C()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

  ;
}

void sub_1002016DC(uint64_t a1)
{
}

uint64_t sub_1002016E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

  ;
}

uint64_t sub_100201710( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t sub_100201724()
{
  uint64_t v2 = *v0;
  *uint64_t v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

void *sub_100201730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v5 + 40));
}

uint64_t sub_10020173C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

BOOL sub_100201744(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void sub_100201758()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_100201774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _NativeDictionary._delete(at:)(v5, v6, a3, a4, a5);
}

uint64_t sub_100201780()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10020178C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002017A0()
{
  return sub_1001FC7C8(v2, v1, v0);
}

void sub_1002017B4(char a1@<W8>)
{
  void *v1 = -1LL << a1;
}

uint64_t sub_1002017C4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_1002017EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return String.hash(into:)(va, v6, v5);
}

uint64_t sub_1002017FC()
{
  return sub_1001FE530(v2, v1, v0);
}

  ;
}

void sub_10020181C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

  ;
}

uint64_t sub_10020183C()
{
  return v0;
}

uint64_t sub_100201848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AB0AC(v3, 1LL, a3);
}

  ;
}

uint64_t sub_10020187C()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10020188C()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10020189C(uint64_t a1)
{
}

  ;
}

void sub_1002018C0()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

void sub_1002018D4()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_1002018E8()
{
  uint64_t v2 = *v0;
  *uint64_t v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1002018F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _NativeDictionary._delete(at:)(a1, a2, a3, v5, a5);
}

uint64_t sub_1002018FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return v6;
}

unint64_t sub_100201920()
{
  return sub_1001D7094(v0, v1);
}

uint64_t sub_10020192C()
{
  uint64_t v2 = *v1;
  uint64_t *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100201938( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, unint64_t a22)
{
  return sub_1001FCE0C(a22);
}

Swift::Int sub_100201944()
{
  return Hasher._finalize()();
}

uint64_t sub_10020194C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  return sub_1001B03FC((uint64_t)&a31, (uint64_t)&a27);
}

void sub_100201958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = v33[0];
  uint64_t v27 = v33[1];
  int64_t v3 = v33[3];
  unint64_t v4 = v33[4];
  int64_t v29 = (unint64_t)(v33[2] + 64LL) >> 6;
  uint64_t v5 = _swiftEmptyArrayStorage;
  while (v4)
  {
    unint64_t v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v7 = v6 | (v3 << 6);
LABEL_20:
    uint64_t v12 = *(void *)(v32 + 56) + 24 * v7;
    uint64_t v13 = *(void *)(v12 + 8);
    char v14 = *(_BYTE *)(v12 + 16);
    char v31 = *(_BYTE *)(v12 + 17);
    id v15 = *(id *)v12;
    id v16 = (id)TUCopyIDSCanonicalAddressForHandle(v15);
    if (!v16) {
      goto LABEL_26;
    }
    uint64_t v17 = v16;
    uint64_t v18 = v3;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v21 = v20;

    if (v19 == a2 && v21 == a3)
    {
      swift_bridgeObjectRelease(a3);
LABEL_28:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      uint64_t v34 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002500E8();
        uint64_t v5 = v34;
      }

      unint64_t v25 = v5[2];
      if (v25 >= v5[3] >> 1)
      {
        sub_1002500E8();
        uint64_t v5 = v34;
      }

      _OWORD v5[2] = v25 + 1;
      unint64_t v26 = &v5[3 * v25];
      v26[4] = v15;
      void v26[5] = v13;
      *((_BYTE *)v26 + 4_Block_object_dispose(va, 8) = v14;
      *((_BYTE *)v26 + 49) = v31;
      int64_t v3 = v18;
    }

    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, a2, a3, 0LL);
      swift_bridgeObjectRelease(v21);
      int64_t v3 = v18;
      if ((v23 & 1) != 0) {
        goto LABEL_28;
      }
LABEL_26:
    }
  }

  int64_t v8 = v3 + 1;
  if (!__OFADD__(v3, 1LL))
  {
    if (v8 >= v29) {
      goto LABEL_33;
    }
    unint64_t v9 = *(void *)(v27 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v29) {
        goto LABEL_33;
      }
      unint64_t v9 = *(void *)(v27 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v29) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v27 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v29) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v27 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v29) {
              goto LABEL_33;
            }
            unint64_t v9 = *(void *)(v27 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v29)
              {
                unint64_t v9 = *(void *)(v27 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_100201BF8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v6)
  {
    do
    {
      uint64_t v7 = 0LL;
      unint64_t v8 = v5 & 0xC000000000000001LL;
      uint64_t v37 = v5 + 32;
      unint64_t v9 = &selRef_chat_outputFrequencyLevelChangedTo_;
      uint64_t v38 = v6;
      while (1)
      {
        if (v8)
        {
          int64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        }

        else
        {
          int64_t v10 = *(void **)(v37 + 8 * v7);
          swift_unknownObjectRetain(v10);
        }

        if (__OFADD__(v7++, 1LL)) {
          break;
        }
        id v12 = [v10 v9[439]];
        uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for String,  &protocol witness table for String);

        char v14 = *(_BYTE *)(v13 + 32);
        uint64_t v15 = 1LL << v14;
        unint64_t v16 = *(void *)(v13 + 56);
        if (v16)
        {
          uint64_t v17 = 0LL;
        }

        else
        {
          if ((v14 & 0x3Fu) < 7) {
            goto LABEL_32;
          }
          unint64_t v16 = *(void *)(v13 + 64);
          if (!v16)
          {
            uint64_t v31 = 9LL;
            while (v31 - 7 < (unint64_t)(v15 + 63) >> 6)
            {
              unint64_t v16 = *(void *)(v13 + 8 * v31++);
              if (v16)
              {
                uint64_t v17 = v31 - 8;
                goto LABEL_10;
              }
            }

unint64_t sub_100201F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v23 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v15 = *(int *)(type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL) + 24);
    unint64_t result = sub_1001D711C(v14);
    if ((v16 & 1) != 0)
    {
      unint64_t v17 = result;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a2 + v15));
      uint64_t v24 = *(void *)(a2 + v15);
      *(void *)(a2 + v15) = 0x8000000000000000LL;
      Swift::Int v19 = *(void *)(v24 + 24);
      sub_1001AFF14(&qword_100448F50);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19);
      unint64_t v20 = *(void **)(*(void *)(v24 + 56) + 24 * v17);
      _NativeDictionary._delete(at:)( v17,  v24,  &type metadata for UInt64,  &type metadata for SimulatedConversationManager.SimulatedParticipant,  &protocol witness table for UInt64);
      uint64_t v21 = *(void *)(a2 + v15);
      *(void *)(a2 + v15) = v24;

      unint64_t result = swift_bridgeObjectRelease(v21);
    }
  }

  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v11 >= v23) {
    return swift_release(a1);
  }
  unint64_t v12 = *(void *)(v22 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v23) {
    return swift_release(a1);
  }
  unint64_t v12 = *(void *)(v22 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v23) {
    return swift_release(a1);
  }
  unint64_t v12 = *(void *)(v22 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v23) {
    return swift_release(a1);
  }
  unint64_t v12 = *(void *)(v22 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v23) {
    return swift_release(a1);
  }
  unint64_t v12 = *(void *)(v22 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v23) {
      return swift_release(a1);
    }
    unint64_t v12 = *(void *)(v22 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

uint64_t sub_1002021AC()
{
  return v1;
}

uint64_t sub_100202214(uint64_t a1)
{
  int64_t v3 = *(dispatch_queue_s **)&v1[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  uint64_t v4 = sub_1001C7370((uint64_t)&unk_1003E0D98, 32LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = sub_1001C7370((uint64_t)&unk_1003E0DC0, 32LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100206D40;
  *(void *)(v5 + 24) = v4;
  void v9[4] = sub_100206F3C;
  void v9[5] = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  void v9[2] = sub_100275F14;
  void v9[3] = &unk_1003E0DD8;
  _Block_copy(v9);
  unint64_t v6 = v1;
  swift_retain(v5);
  sub_10020713C();
  sub_100207190(v3);
  sub_100207188();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 107LL, 22LL, 24LL, 1LL);
  sub_100207134();
  uint64_t result = sub_1001B1164();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100202324(uint64_t a1, uint64_t a2)
{
  return sub_1002026A0(a2);
}

uint64_t (*sub_100202354(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_1002021AC();
  return sub_100202388;
}

uint64_t sub_100202388(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0) {
    return sub_100202214(*a1);
  }
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  sub_100202214(v3);
  return sub_1001BA48C(v2);
}

uint64_t sub_1002023C8()
{
  uint64_t v21 = v1;
  uint64_t v22 = v2;
  uint64_t v3 = sub_1001AFF14(&qword_100449250);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B0F00();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_1001AFF14(&qword_100449258);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001B0F00();
  uint64_t v12 = v11 - v10;
  swift_beginAccess(v0 + OBJC_IVAR___CSDSimulatedConversationManager___activeGroupSessionsByGroupUUID, v20, 33LL, 0LL);
  uint64_t v13 = sub_1001AFF14(&qword_100449260);
  ((void (*)(uint64_t))Published.projectedValue.getter)(v13);
  swift_endAccess(v20);
  uint64_t v14 = sub_1001C7370((uint64_t)&unk_1003E0C30, 24LL);
  swift_unknownObjectWeakInit(v14 + 16);
  uint64_t v15 = sub_1001AFF14(&qword_100449268);
  sub_1001C6AE8(&qword_100449270, &qword_100449250);
  ((void (*)(uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), uint64_t, uint64_t, uint64_t, uint64_t))Publisher.map<A>(_:))( sub_100206D0C,  v14,  v3,  v15,  v16);
  swift_release(v14);
  sub_1001D90B0(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1001C6AE8(&qword_100449278, &qword_100449258);
  uint64_t v18 = ((uint64_t (*)(uint64_t, uint64_t))Publisher.eraseToAnyPublisher())(v8, v17);
  sub_1001D924C(v12, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  return v18;
}

uint64_t sub_10020256C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = sub_100202638();
  }

  else
  {
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    sub_1001C6B98( (unint64_t *)&qword_100447E50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v9, v10, v11);
  }

  *a3 = v8;
  a3[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100202638()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
  uint64_t v2 = swift_getKeyPath(&unk_10037C5C0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  sub_100207134();
  sub_1001B1164();
  return v4;
}

uint64_t sub_1002026A0(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
  uint64_t v4 = swift_getKeyPath(&unk_10037C5C0);
  uint64_t v6 = a1;
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*sub_100202708(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_10037C5C0);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_100202780;
}

void sub_100202780(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 40LL);
  (*(void (**)(void, void))(*a1 + 48LL))(*a1, 0LL);
  swift_release(v2);
  sub_1001B1164();
  free(v1);
}

uint64_t sub_1002027C8()
{
  uint64_t v2 = sub_1001C7360();
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v49 = v2;
  sub_1001C7334();
  __chkstk_darwin(v3);
  sub_1001D9040();
  uint64_t v47 = v4;
  uint64_t v5 = sub_1001AFF14(&qword_100449260);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_1001D9040();
  uint64_t v53 = v7;
  uint64_t v52 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v9 = sub_1002070D4();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(v9);
  sub_1001C7334();
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v14 = v13 - v12;
  uint64_t v46 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v46 - 8);
  sub_1001C7334();
  __chkstk_darwin(v15);
  sub_1001B0F00();
  uint64_t v18 = v17 - v16;
  uint64_t v51 = OBJC_IVAR___CSDSimulatedConversationManager_queue;
  sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  Swift::Int v19 = v0;
  static DispatchQoS.unspecified.getter(v19);
  int64_t v57 = (void **)_swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&unk_100449280,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v21 = v20;
  uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_1001C6AE8(&qword_100449290, (uint64_t *)&unk_100449F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v22, v23, v10, v21);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v1,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v52);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000047LL,  0x8000000100370F50LL,  v18,  v14,  v1,  0LL);
  *(void *)(v50 + v51) = v24;
  id v25 = &v19[OBJC_IVAR___CSDSimulatedConversationManager___activeGroupSessionsByGroupUUID];
  int64_t v57 = (void **)&_swiftEmptyDictionarySingleton;
  uint64_t v26 = sub_1001AFF14(&qword_1004490C8);
  Published.init(initialValue:)(&v57, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v25, v53, v55);
  uint64_t v27 = &v19[OBJC_IVAR___CSDSimulatedConversationManager_localCallerID];
  *(void *)uint64_t v27 = 0xD000000000000016LL;
  *((void *)v27 + 1) = 0x8000000100370FA0LL;
  id v28 = [objc_allocWithZone((Class)CSDClientManager) initWithSerialQueue:v24];
  *(void *)&v19[OBJC_IVAR___CSDSimulatedConversationManager_clientManager] = v28;

  BOOL v29 = (objc_class *)type metadata accessor for SimulatedConversationManager(0LL);
  v61.receiver = v19;
  v61.super_class = v29;
  char v30 = (char *)objc_msgSendSuper2(&v61, "init");
  uint64_t v31 = *(dispatch_queue_s **)&v30[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  uint64_t v32 = sub_1001C7370((uint64_t)&unk_1003E0E10, 24LL);
  *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
  uint64_t v33 = sub_1001C7370((uint64_t)&unk_1003E0E38, 32LL);
  *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100206DA4;
  *(void *)(v33 + 24) = v32;
  uint64_t v59 = sub_100206F3C;
  uint64_t v60 = v33;
  int64_t v57 = _NSConcreteStackBlock;
  uint64_t v58 = 1107296256LL;
  sub_1002071A4((uint64_t)sub_100275F14);
  uint64_t v34 = v60;
  uint64_t v35 = v30;
  swift_retain(v33);
  swift_release(v34);
  sub_100207190(v31);
  sub_100207188();
  LOBYTE(v31) = sub_100207108(v33, (uint64_t)"", 107LL, 46LL);
  uint64_t result = sub_1001B1164();
  if ((v31 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v37 = sub_1001C7370((uint64_t)&unk_1003E0E88, 24LL);
    *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
    uint64_t v59 = sub_100206DB0;
    uint64_t v60 = v37;
    int64_t v57 = _NSConcreteStackBlock;
    uint64_t v58 = 1107296256LL;
    uint64_t v38 = sub_1002071A4((uint64_t)sub_1002356BC);
    uint64_t v39 = v35;
    static DispatchQoS.unspecified.getter(v39);
    unint64_t v56 = _swiftEmptyArrayStorage;
    sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v41 = v40;
    uint64_t v42 = sub_1001C7340();
    sub_1001C7368((unint64_t *)&qword_100447CC0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v49, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v47, v38);

    _Block_release(v38);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v18, v46);
    uint64_t v44 = v60;
    sub_10020713C();
    swift_release(v44);
    return (uint64_t)v39;
  }

  return result;
}

void sub_100202CCC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR___CSDSimulatedConversationManager_clientManager);
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___TUSimulatedConversationControllerXPCClient);
  id v4 = [v3 simulatedConversationControllerClientXPCInterface];
  [v2 setRemoteObjectInterface:v4];

  id v5 = [v3 simulatedConversationControllerServerXPCInterface];
  [v2 setExportedInterface:v5];

  [v2 setExportedObject:a1];
  [v2 setRequiredConnectionCapability:@"modify-simulated-conversations"];
  uint64_t v12 = sub_100202E58;
  uint64_t v13 = 0LL;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256LL;
  uint64_t v10 = sub_1001FAF78;
  uint64_t v11 = &unk_1003E0EC8;
  uint64_t v6 = _Block_copy(&v8);
  [v2 setInterruptionHandler:v6];
  _Block_release(v6);
  uint64_t v12 = sub_100202E64;
  uint64_t v13 = 0LL;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256LL;
  uint64_t v10 = sub_1001FAF78;
  uint64_t v11 = &unk_1003E0EF0;
  uint64_t v7 = _Block_copy(&v8);
  [v2 setInvalidationHandler:v7];
  _Block_release(v7);
}

uint64_t sub_100202E58(void *a1)
{
  return sub_100202E70(a1, "XPC connection interrupted from client %@");
}

uint64_t sub_100202E64(void *a1)
{
  return sub_100202E70(a1, "XPC connection invalidated from client %@");
}

uint64_t sub_100202E70(void *a1, const char *a2)
{
  id v4 = sub_100170684();
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = sub_1001C7370(v5, 72LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v6 + 56) = sub_1001AFF14(&qword_100449298);
  sub_1001C6AE8((unint64_t *)&unk_1004492A0, &qword_100449298);
  *(void *)(v6 + 64) = v7;
  *(void *)(v6 + 32) = a1;
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:type:_:)(a2, 41LL, 2LL, &_mh_execute_header, v4, v8, v6);

  return swift_bridgeObjectRelease(v6);
}

void sub_100202F3C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR___CSDSimulatedConversationManager_clientManager);
  id v2 = String._bridgeToObjectiveC()();
  [v1 startListeningOnMachServiceWithName:v2];
}

void sub_100202FC0()
{
  id v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001B1234();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_queue_t v22 = *(dispatch_queue_t *)&v0[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v6, v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_1003E0D20, v14 + 8, v11 | 7);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15 + v12, v10, v7);
  *(void *)(v15 + v13) = v4;
  *(void *)(v15 + v14) = v2;
  uint64_t v16 = sub_1001C7370((uint64_t)&unk_1003E0D48, 32LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100206CB8;
  *(void *)(v16 + 24) = v15;
  id v25 = sub_100206F3C;
  uint64_t v26 = v16;
  uint64_t v23 = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256LL;
  uint64_t v17 = sub_1001E2064((uint64_t)sub_100275F14);
  uint64_t v18 = v26;
  Swift::Int v19 = v0;
  swift_bridgeObjectRetain(v4);
  id v20 = v2;
  swift_retain(v16);
  swift_release(v18);
  dispatch_sync(v22, v17);
  _Block_release(v17);
  LOBYTE(sub_1001FC3C8(v0, v1, v2) = sub_100207108(v16, (uint64_t)"", 107LL, 72LL);
  swift_release(v15);
  sub_10020713C();
  else {
    sub_1001B0FF8();
  }
}

uint64_t sub_100203164(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v39 = a3;
  id v40 = a4;
  uint64_t v6 = (int *)type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v41 = (uint64_t)&v38 - v14;
  uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  id v20 = (char *)&v38 - v19;
  uint64_t v21 = sub_100202638();
  sub_1001CA250(a2, v21);
  swift_bridgeObjectRelease(v21);
  LODWORD(v21) = sub_1001AB0AC((uint64_t)v20, 1LL, (uint64_t)v6);
  uint64_t result = sub_100206AE0((uint64_t)v20);
  if ((_DWORD)v21 == 1)
  {
    uint64_t v38 = a1;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v23(v41, a2, v9);
    v23((uint64_t)v13, a2, v9);
    uint64_t v24 = swift_bridgeObjectRetain(v39);
    id v25 = sub_100203400(v24);
    *(void *)&v8[v6[6]] = &_swiftEmptyDictionarySingleton;
    uint64_t v26 = v6[8];
    id v27 = v40;
    *(void *)&v8[v26] = sub_10028E19C(-1LL, v28, v29, v30, v31, v32, v33, v34);
    v23((uint64_t)v8, (uint64_t)v13, v9);
    *(void *)&v8[v6[5]] = v25;
    *(void *)&v8[v6[7]] = v27;
    v8[v6[9]] = 1;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    sub_100206928((uint64_t)v8, (uint64_t)v18);
    sub_1001A9670((uint64_t)v18, 0LL, 1LL, (uint64_t)v6);
    uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
    uint64_t v36 = swift_getKeyPath(&unk_10037C5C0);
    uint64_t v37 = (void (*)(_BYTE *, void))static Published.subscript.modify(v42, v38, KeyPath, v36);
    sub_1001FC4B0((uint64_t)v18, v41);
    v37(v42, 0LL);
    swift_release(KeyPath);
    return swift_release(v36);
  }

  return result;
}

void *sub_100203400(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = _swiftEmptyArrayStorage;
  unint64_t v43 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_14:
    swift_bridgeObjectRelease(v1);
    return v2;
  }

  uint64_t v4 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = (uint64_t *)&unk_1004491D0;
  uint64_t v6 = (char *)&type metadata for Any;
  uint64_t v7 = (char *)&type metadata for Any + 8;
  uint64_t v8 = (unint64_t *)&qword_1004491D8;
  uint64_t v9 = &OBJC_CLASS___NSString_ptr;
  while (1)
  {
    uint64_t v10 = sub_1001B03FC(v4, (uint64_t)v42);
    sub_1002071B0(v10, v11, v12);
    uint64_t v13 = sub_1001AFF14(v5);
    uint64_t v14 = swift_dynamicCast(&v40, v41, v7, v13, 6LL);
    if ((_DWORD)v14)
    {
      id v17 = v40;
LABEL_8:
      uint64_t v28 = sub_1001B0438(v42);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      unint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v29 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v30 >= v29 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
      }
      uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v17);
      specialized Array._endMutation()(v31, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_12;
    }

    sub_1002071B0(v14, v15, v16);
    uint64_t v18 = sub_1001B4B94(0LL, v8, v9);
    sub_1001B0438(v42);
LABEL_12:
    v4 += 32LL;
    if (!--v3)
    {
      uint64_t v1 = a1;
      swift_bridgeObjectRelease(a1);
      id v2 = (void *)v43;
      goto LABEL_14;
    }
  }

  uint64_t v19 = v5;
  id v20 = v6;
  uint64_t v21 = v9;
  dispatch_queue_t v22 = v8;
  id v23 = v40;
  uint64_t result = [v40 _stripPotentialTokenURIWithToken:0];
  if (result)
  {
    id v25 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v27 = v26;

    id v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    uint64_t v8 = v22;
    uint64_t v9 = v21;
    uint64_t v6 = v20;
    uint64_t v5 = v19;
    uint64_t v7 = (char *)&type metadata for Any + 8;
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

void sub_100203608(uint64_t a1)
{
  uint64_t v3 = sub_1001B1234();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(dispatch_queue_s **)&v1[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1003E0CA8, v8 + v5, v7 | 7);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v9 + v8,  (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t v10 = sub_1001C7370((uint64_t)&unk_1003E0CD0, 32LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100206C2C;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_1001C7040;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100275F14;
  void aBlock[3] = &unk_1003E0CE8;
  _Block_copy(aBlock);
  uint64_t v11 = v1;
  swift_retain(v10);
  sub_10020713C();
  sub_100207190(v6);
  sub_100207188();
  char v12 = sub_100207108(v10, (uint64_t)"", 107LL, 80LL);
  sub_100207134();
  swift_release(v10);
  if ((v12 & 1) != 0) {
    __break(1u);
  }
  else {
    sub_1001B1064();
  }
}

uint64_t sub_100203778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v21[-v12];
  uint64_t v14 = sub_100202638();
  sub_1001CA250(a2, v14);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  int v16 = sub_1001AB0AC((uint64_t)v13, 1LL, v15);
  uint64_t result = sub_100206AE0((uint64_t)v13);
  if (v16 != 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    sub_1001A9670((uint64_t)v11, 1LL, 1LL, v15);
    uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
    uint64_t v19 = swift_getKeyPath(&unk_10037C5C0);
    id v20 = (void (*)(_BYTE *, void))static Published.subscript.modify(v21, a1, KeyPath, v19);
    sub_1001FC4B0((uint64_t)v11, (uint64_t)v7);
    v20(v21, 0LL);
    swift_release(KeyPath);
    return swift_release(v19);
  }

  return result;
}

void sub_100203928()
{
  uint64_t v34 = v2;
  uint64_t v37 = sub_1001C7360();
  uint64_t v40 = *(void *)(v37 - 8);
  sub_1001C7334();
  __chkstk_darwin(v3);
  uint64_t v5 = sub_100206FBC(v4, v31);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  sub_1001C7334();
  __chkstk_darwin(v6);
  uint64_t v32 = sub_100206F9C(v7, v31);
  uint64_t v8 = *(void *)(v32 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = sub_1002070D4();
  uint64_t v13 = type metadata accessor for DispatchTime(v12);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v33 = (char *)&v31 - v19;
  uint64_t v35 = *(void *)(v0 + OBJC_IVAR___CSDSimulatedConversationManager_queue);
  static DispatchTime.now()(v18);
  void *v1 = 2LL;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))( v1,  enum case for DispatchTimeInterval.seconds(_:),  v10);
  + infix(_:_:)(v17, v1);
  (*(void (**)(void *, uint64_t))(v11 + 8))(v1, v10);
  sub_100207198();
  uint64_t v20 = sub_1001C7370((uint64_t)&unk_1003E0C30, 24LL);
  swift_unknownObjectWeakInit(v20 + 16);
  uint64_t v22 = v31;
  uint64_t v21 = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v31, v34, v32);
  uint64_t v23 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = (v23 + 24) & ~v23;
  uint64_t v25 = swift_allocObject(&unk_1003E0C58, v24 + v9, v23 | 7);
  *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v25 + v24, v22, v21);
  uint64_t v44 = sub_100206BE8;
  uint64_t v45 = v25;
  uint64_t v42 = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256LL;
  uint64_t v26 = sub_1001E2064((uint64_t)sub_1002356BC);
  swift_retain(v20);
  sub_1002070FC();
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v27 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  uint64_t v28 = sub_100207164();
  uint64_t v29 = v36;
  sub_100207154(v28, v27, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v14, v29, v26);
  _Block_release(v26);
  sub_1001D924C(v29, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
  sub_1001C73DC();
  sub_100207198();
  swift_release(v20);
  sub_100207134();
  sub_1001B0FF8();
}

void sub_100203C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v18, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    uint64_t v10 = sub_100202708(v17);
    uint64_t v11 = sub_10029A2F8(v16);
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
    ((void (*)(void *, void))v11)(v16, 0LL);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    ((void (*)(void *, void))v10)(v17, 0LL);
  }

uint64_t sub_100203D3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  uint64_t v3 = (void *)(v0 + v2[6]);
  uint64_t v4 = swift_bridgeObjectRetain(*v3);
  sub_10024EAFC(v4);
  uint64_t v6 = v5;
  uint64_t v79 = v1;
  uint64_t v7 = *(void *)(v1 + v2[5]);
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v7);
  while (v8)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = (id *)(v79 + v2[7]);
    uint64_t v83 = v7 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v84 = v7 & 0xC000000000000001LL;
    uint64_t v82 = v7 + 32;
    uint64_t v77 = v3;
    uint64_t v78 = v7;
    uint64_t v80 = v8;
    uint64_t v81 = v10;
    while (1)
    {
      if (v84)
      {
        uint64_t v2 = (int *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
      }

      else
      {
        if (v9 >= *(void *)(v83 + 16)) {
          goto LABEL_72;
        }
        uint64_t v2 = *(int **)(v82 + 8 * v9);
        swift_unknownObjectRetain(v2);
      }

      if (__OFADD__(v9++, 1LL)) {
        break;
      }
      id v12 = [v2 destinationURIs];
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for String,  &protocol witness table for String);

      char v14 = *(_BYTE *)(v13 + 32);
      uint64_t v15 = 1LL << v14;
      unint64_t v16 = *(void *)(v13 + 56);
      if (v16)
      {
        uint64_t v17 = 0LL;
      }

      else
      {
        unsigned int v23 = v14 & 0x3F;
        if (v23 < 7) {
          goto LABEL_26;
        }
        unint64_t v16 = *(void *)(v13 + 64);
        if (v16)
        {
          uint64_t v17 = 1LL;
        }

        else
        {
          if (v23 < 8) {
            goto LABEL_26;
          }
          unint64_t v16 = *(void *)(v13 + 72);
          if (!v16)
          {
            uint64_t v24 = 10LL;
            while (v24 - 7 < (unint64_t)(v15 + 63) >> 6)
            {
              unint64_t v16 = *(void *)(v13 + 8 * v24++);
              if (v16)
              {
                uint64_t v17 = v24 - 8;
                goto LABEL_11;
              }
            }

id sub_100204338()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedConversationManager(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002043E0()
{
  return type metadata accessor for SimulatedConversationManager(0LL);
}

uint64_t type metadata accessor for SimulatedConversationManager(uint64_t a1)
{
  return sub_100206810( a1,  (uint64_t *)&unk_1004490B0,  (uint64_t)&nominal type descriptor for SimulatedConversationManager);
}

void sub_1002043FC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100204484(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    _OWORD v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[3] = &unk_10037C540;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void sub_100204484(uint64_t a1)
{
  if (!qword_1004490C0)
  {
    uint64_t v2 = sub_1001B0504(&qword_1004490C8);
    unint64_t v3 = type metadata accessor for Published(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1004490C0);
    }
  }

id sub_1002044DC(char a1)
{
  id v2 = [objc_allocWithZone(TUMutableConversationParticipantCapabilities) init];
  id v3 = sub_10020703C((uint64_t)[v2 setScreenSharingAvailable:1], "setGondolaCallingAvailable:");
  id v4 = sub_10020703C((uint64_t)v3, "setSupportsLeaveContext:");
  id v5 = sub_10020703C((uint64_t)v4, "setGftDowngradeToOneToOneAvailable:");
  id v6 = sub_10020703C((uint64_t)v5, "setUPlusOneScreenShareAvailable:");
  id v7 = sub_10020703C((uint64_t)v6, "setUPlusNDowngradeAvailable:");
  [v2 setSharePlayProtocolVersion:TUSharePlayProtocolVersion(v7)];
  [v2 setPersonaAvailable:a1 & 1];
  id v8 = v2;
  [v8 setVisionCallEstablishmentVersion:TUVisionCallEstablishmentVersion(v8)];

  id v9 = v8;
  [v9 setVisionFeatureVersion:TUVisionFeatureVersion(v9)];

  [v9 setUPlusOneAVLessAvailable:1];
  id v10 = [(id)objc_opt_self(CSDMomentsController) localCapabilities];
  id v11 = [v10 isEnabled];
  swift_unknownObjectRelease(v10);
  [v9 setMomentsAvailable:v11];
  return v9;
}

BOOL sub_100204644(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return ((a2 != a5) | ((static NSObject.== infix(_:_:)(a1, a4) & 1) == 0) | (a3 ^ a6) & 1 | ((a3 ^ a6) >> 8) & 1) == 0;
}

BOOL sub_1002046D0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  if (*(_BYTE *)(a2 + 17)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return sub_100204644( *(void *)a1,  *(void *)(a1 + 8),  v2 | *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  v3 | *(unsigned __int8 *)(a2 + 16));
}

void sub_100204710()
{
  uint64_t v38 = v2;
  id v4 = v3;
  id v6 = v5;
  uint64_t v36 = v5;
  uint64_t v40 = *(void *)(sub_1001C7360() - 8);
  sub_1001C7334();
  __chkstk_darwin(v7);
  sub_100206FBC(v8, v34);
  sub_1001C7334();
  __chkstk_darwin(v9);
  uint64_t v11 = sub_100206F9C(v10, v35);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = sub_10020708C();
  uint64_t v14 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v15 = sub_1001C7370(v14, 152LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
  *(void *)(v15 + 56) = sub_1001B4B94(0LL, &qword_100449230, &OBJC_CLASS___TUSimulatedParticipantUpdate_ptr);
  sub_100206A18(&qword_100449238, &qword_100449230, &OBJC_CLASS___TUSimulatedParticipantUpdate_ptr);
  *(void *)(v15 + 64) = v16;
  *(void *)(v15 + 32) = v4;
  uint64_t v37 = v4;
  id v17 = -[objc_class identifier](v6, "identifier");
  *(void *)(v15 + 96) = &type metadata for UInt64;
  *(void *)(v15 + 104) = &protocol witness table for UInt64;
  *(void *)(v15 + 72) = v17;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v15 + 136) = sub_100207048();
  sub_1002070F0(&qword_100449220);
  *(void *)(v15 + 144) = v19;
  *(void *)(v15 + 112) = isa;
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:type:_:)( "Received simulated participant update %@ for participant %llu on conversation %@",  80LL,  2LL,  &_mh_execute_header,  v13,  v20,  v15);

  swift_bridgeObjectRelease(v15);
  sub_1002070CC(v1, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  sub_100207170();
  unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = ((v21 & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v25 = swift_allocObject(&unk_1003E0BE0, v23 + 8, v24);
  uint64_t v26 = sub_100207144(v25);
  sub_1002070CC(v26, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
  *(Class *)((char *)&isa->isa + v22) = v36;
  *(Class *)((char *)&isa->isa + v23) = v37;
  uint64_t v27 = sub_1001E2064((uint64_t)sub_1002356BC);
  char v28 = v37;
  id v29 = v0;
  uint64_t v30 = v36;
  sub_1002070FC();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v31 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  uint64_t v32 = sub_100207164();
  sub_100207124(v32, v31, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v39);
  _Block_release(v27);
  sub_1001D90B0(v39, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
  sub_1001C73DC();
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_100204A08(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v38 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v34 - v15;
  uint64_t v17 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = a1;
  uint64_t v20 = sub_100202638();
  sub_1001CA250(a2, v20);
  swift_bridgeObjectRelease(v20);
  sub_100206928((uint64_t)v16, (uint64_t)v19);
  id v22 = [a3 identifier];
  uint64_t v23 = *(int *)(v17 + 24);
  uint64_t v24 = *(void *)&v19[v23];
  if (*(void *)(v24 + 16))
  {
    unint64_t v25 = sub_1001D711C((uint64_t)v22);
    if ((v26 & 1) != 0)
    {
      uint64_t v27 = *(void *)(v24 + 56) + 24 * v25;
      char v28 = *(void **)v27;
      uint64_t v36 = *(void *)(v27 + 8);
      v34[1] = *(unsigned __int8 *)(v27 + 16);
      unsigned int v37 = *(unsigned __int8 *)(v27 + 17);
      id v35 = v28;
      id v29 = v38;
      swift_isUniquelyReferenced_nonNull_native(*(void *)&v19[v23]);
      v40[0] = *(void *)&v19[v23];
      *(void *)&v19[v23] = 0x8000000000000000LL;
      sub_1002000A4();
      uint64_t v30 = *(void *)&v19[v23];
      *(void *)&v19[v23] = v40[0];
      swift_bridgeObjectRelease(v30);
    }
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  sub_10020696C((uint64_t)v19, (uint64_t)v14);
  sub_1001A9670((uint64_t)v14, 0LL, 1LL, v17);
  uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
  uint64_t v32 = swift_getKeyPath(&unk_10037C5C0);
  uint64_t v33 = (void (*)(void *, void))static Published.subscript.modify(v40, v39, KeyPath, v32);
  sub_1001FC4B0((uint64_t)v14, (uint64_t)v10);
  v33(v40, 0LL);
  swift_release(KeyPath);
  swift_release(v32);
  return sub_1002069DC((uint64_t)v19);
}

void sub_100204CFC()
{
  uint64_t v47 = v0;
  uint64_t v2 = v1;
  id v4 = v3;
  id v6 = v5;
  uint64_t v50 = sub_1001C7360();
  uint64_t v53 = *(void *)(v50 - 8);
  sub_1001C7334();
  __chkstk_darwin(v7);
  uint64_t v9 = sub_100206FBC(v8, v44[0]);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  sub_1001C7334();
  __chkstk_darwin(v10);
  uint64_t v46 = sub_100206F9C(v11, v44[0]);
  uint64_t v12 = *(void *)(v46 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v46);
  uint64_t v45 = (uint64_t)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = sub_100170684();
  uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v16 = sub_1001C7370(v15, 152LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
  *(void *)(v16 + 56) = sub_100207048();
  sub_1002070F0(&qword_100449228);
  *(void *)(v16 + 64) = v17;
  *(void *)(v16 + 32) = v6;
  *(void *)(v16 + 96) = sub_100207048();
  sub_1002070F0(&qword_100449238);
  *(void *)(v16 + 104) = v18;
  *(void *)(v16 + 72) = v4;
  v44[0] = (uint64_t)v6;
  id v19 = v4;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v16 + 136) = sub_1001B4B94(0LL, &qword_100449218, &OBJC_CLASS___NSUUID_ptr);
  sub_100206A18(&qword_100449220, &qword_100449218, &OBJC_CLASS___NSUUID_ptr);
  *(void *)(v16 + 144) = v21;
  *(void *)(v16 + 112) = isa;
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  os_log(_:dso:log:type:_:)( "Received add remote participant with handle %@ update %@ on conversation %@",  75LL,  2LL,  &_mh_execute_header,  v14,  v22,  v16);

  sub_1001B0EB8();
  uint64_t v23 = v47;
  v44[1] = *(void *)&v47[OBJC_IVAR___CSDSimulatedConversationManager_queue];
  uint64_t v24 = v45;
  sub_1002070CC(v45, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  uint64_t v25 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v26 = (v13 + ((v25 + 24) & ~v25) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = swift_allocObject(&unk_1003E0B90, v27 + 8, v25 | 7);
  uint64_t v29 = sub_100207144(v28);
  sub_1002070CC(v29, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
  uint64_t v30 = (void *)v44[0];
  *(void *)(v16 + v26) = v44[0];
  *(void *)(v16 + v27) = v19;
  uint64_t v57 = sub_100206B24;
  uint64_t v58 = v16;
  uint64_t v55 = _NSConcreteStackBlock;
  uint64_t v56 = 1107296256LL;
  uint64_t v31 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v32 = v30;
  id v33 = v19;
  id v34 = v23;
  uint64_t v35 = v48;
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v54 = _swiftEmptyArrayStorage;
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v37 = v36;
  uint64_t v38 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  uint64_t v39 = sub_100207164();
  uint64_t v40 = v49;
  uint64_t v41 = v38;
  uint64_t v42 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v41, v43, v50, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v40);
  _Block_release(v31);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v40, v42);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v35, v52);
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_10020504C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v59 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v60 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v16 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100202638();
  sub_1001CA250(a2, v19);
  swift_bridgeObjectRelease(v19);
  sub_100206928((uint64_t)v15, (uint64_t)v18);
  id v21 = (id)TUCopyIDSCanonicalAddressForHandle(a3);
  uint64_t v57 = a1;
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;
  }

  else
  {
    uint64_t v58 = 0LL;
    uint64_t v24 = 0LL;
  }

  uint64_t v25 = *(void *)&v18[*(int *)(v16 + 20)];
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0) {
      uint64_t v55 = *(void *)&v18[*(int *)(v16 + 20)];
    }
    else {
      uint64_t v55 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)&v18[*(int *)(v16 + 20)]);
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v26 < 3)
  {
    sub_1002069DC((uint64_t)v18);
    return swift_bridgeObjectRelease(v24);
  }

  else
  {
    swift_bridgeObjectRetain(v24);
    unint64_t v27 = swift_bridgeObjectRetain(v25);
    char v28 = sub_100201BF8(v27, v58, v24);
    swift_bridgeObjectRelease(v25);
    if ((v28 & 1) != 0)
    {
      swift_bridgeObjectRelease(v24);
      uint64_t v36 = sub_10028E19C(-1LL, v29, v30, v31, v32, v33, v34, v35);
      id v37 = a3;
      id v38 = v59;
      int v39 = sub_100206B30((char)[v59 hasSet]);
      uint64_t v58 = v36;
      if (v39) {
        [v38 isSpatialPersonaEnabled];
      }
      uint64_t v47 = *(int *)(v16 + 24);
      id v59 = v37;
      swift_isUniquelyReferenced_nonNull_native(*(void *)&v18[v47]);
      v61[0] = *(void *)&v18[v47];
      *(void *)&v18[v47] = 0x8000000000000000LL;
      sub_1002000A4();
      uint64_t v48 = *(void *)&v18[v47];
      *(void *)&v18[v47] = v61[0];
      swift_bridgeObjectRelease(v48);
      uint64_t v49 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v60, a2, v7);
      sub_10020696C((uint64_t)v18, (uint64_t)v13);
      sub_1001A9670((uint64_t)v13, 0LL, 1LL, v16);
      uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
      uint64_t v51 = swift_getKeyPath(&unk_10037C5C0);
      uint64_t v52 = (void (*)(void *, void))static Published.subscript.modify(v61, v57, KeyPath, v51);
      sub_1001FC4B0((uint64_t)v13, v49);
      v52(v61, 0LL);

      swift_release(KeyPath);
      swift_release(v51);
    }

    else
    {
      id v40 = sub_100170684();
      uint64_t v41 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v42 = swift_allocObject(v41, 112LL, 7LL);
      *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v42 + 56) = sub_1001AFF14(&qword_100449240);
      sub_1001C6AE8(&qword_100449248, &qword_100449240);
      *(void *)(v42 + 64) = v43;
      *(void *)(v42 + 32) = v25;
      if (v24)
      {
        v61[0] = v58;
        v61[1] = v24;
        swift_bridgeObjectRetain(v25);
        uint64_t v44 = String.init<A>(reflecting:)(v61, &type metadata for String);
        unint64_t v46 = v45;
      }

      else
      {
        swift_bridgeObjectRetain(v25);
        unint64_t v46 = 0xE300000000000000LL;
        uint64_t v44 = 7104878LL;
      }

      *(void *)(v42 + 96) = &type metadata for String;
      unint64_t v53 = sub_1001B2330();
      *(void *)(v42 + 104) = v53;
      *(void *)(v42 + 72) = v44;
      *(void *)(v42 + 80) = v46;
      uint64_t v54 = static os_log_type_t.default.getter(v53);
      os_log(_:dso:log:type:_:)( "participantDestinationIDs=%@, handleDestination=%@",  50LL,  2LL,  &_mh_execute_header,  v40,  v54,  v42);

      swift_bridgeObjectRelease(v42);
    }

    return sub_1002069DC((uint64_t)v18);
  }

void sub_1002054F4( void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  uint64_t v11 = sub_1001B1234();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001B0F00();
  uint64_t v15 = v14 - v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a5);
  id v16 = a3;
  id v17 = a4;
  id v18 = a1;
  a6(v16, v17, v15);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  sub_1001B1064();
}

void sub_1002055A8()
{
  uint64_t v32 = v2;
  uint64_t v33 = v0;
  uint64_t v4 = v3;
  id v5 = v2;
  uint64_t v35 = *(void *)(sub_1001C7360() - 8);
  sub_1001C7334();
  __chkstk_darwin(v6);
  sub_100206FBC(v7, v30);
  sub_1001C7334();
  __chkstk_darwin(v8);
  uint64_t v10 = sub_100206F9C(v9, v31);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v12 = sub_10020708C();
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v14 = sub_1001C7370(v13, 112LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  id v15 = [v5 identifier];
  *(void *)(v14 + 56) = &type metadata for UInt64;
  *(void *)(v14 + 64) = &protocol witness table for UInt64;
  *(void *)(v14 + 32) = v15;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v14 + 96) = sub_1001B4B94(0LL, &qword_100449218, &OBJC_CLASS___NSUUID_ptr);
  sub_100206A18(&qword_100449220, &qword_100449218, &OBJC_CLASS___NSUUID_ptr);
  *(void *)(v14 + 104) = v17;
  *(void *)(v14 + 72) = isa;
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:type:_:)( "Received remove remote participant with identifier %llu on conversation %@",  74LL,  2LL,  &_mh_execute_header,  v12,  v18,  v14);

  sub_1001E43E0();
  sub_1002070CC(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  sub_100207170();
  unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_1003E0B40, (v19 & 0xFFFFFFFFFFFFFFF8LL) + 8, v21);
  uint64_t v23 = sub_100207144(v22);
  sub_1002070CC(v23, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
  *(_UNKNOWN **)((char *)&OBJC_CLASS___NSUUID_ptr + v20) = v32;
  uint64_t v24 = sub_1001E2064((uint64_t)sub_1002356BC);
  id v25 = v33;
  id v26 = v32;
  sub_1002070FC();
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v27 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  uint64_t v28 = sub_100207164();
  sub_100207124(v28, v27, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v4, v34);
  _Block_release(v24);
  sub_1001D90B0(v34, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  sub_1001C73DC();
  sub_1001C7358();
  sub_1001B0FF8();
}

uint64_t sub_100205848(uint64_t a1, uint64_t a2, void *a3)
{
  id v42 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100449200);
  uint64_t v10 = __chkstk_darwin(v9);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100202638();
  sub_1001CA250(a2, v18);
  swift_bridgeObjectRelease(v18);
  uint64_t v37 = v6;
  uint64_t v38 = v5;
  int v39 = v8;
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  sub_100206928((uint64_t)v14, (uint64_t)v17);
  id v20 = v42;
  id v21 = [v42 identifier];
  uint64_t v22 = *(int *)(v15 + 24);
  uint64_t v23 = (void *)sub_1001CA2B0((uint64_t)v21, *(void *)&v17[v22]);

  if (v23)
  {
    unint64_t v24 = sub_1001D711C((uint64_t)[v20 identifier]);
    if ((v25 & 1) != 0)
    {
      unint64_t v26 = v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v17[v22]);
      v43[0] = *(void *)&v17[v22];
      uint64_t v28 = v43[0];
      *(void *)&v17[v22] = 0x8000000000000000LL;
      Swift::Int v29 = *(void *)(v28 + 24);
      sub_1001AFF14(&qword_100448F50);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v29);
      uint64_t v30 = v43[0];
      uint64_t v31 = *(void **)(*(void *)(v43[0] + 56LL) + 24 * v26);
      _NativeDictionary._delete(at:)( v26,  v43[0],  &type metadata for UInt64,  &type metadata for SimulatedConversationManager.SimulatedParticipant,  &protocol witness table for UInt64);
      uint64_t v32 = *(void *)&v17[v22];
      *(void *)&v17[v22] = v30;

      swift_bridgeObjectRelease(v32);
    }

    uint64_t v33 = (uint64_t)v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v39, v40, v38);
    sub_10020696C((uint64_t)v17, (uint64_t)v12);
    sub_1001A9670((uint64_t)v12, 0LL, 1LL, v15);
    uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
    uint64_t v35 = swift_getKeyPath(&unk_10037C5C0);
    uint64_t v36 = (void (*)(void *, void))static Published.subscript.modify(v43, v41, KeyPath, v35);
    sub_1001FC4B0((uint64_t)v12, v33);
    v36(v43, 0LL);
    swift_release(KeyPath);
    swift_release(v35);
  }

  return sub_1002069DC((uint64_t)v17);
}

void sub_100205BDC()
{
  uint64_t v2 = v1;
  uint64_t v23 = *(void *)(sub_1001C7360() - 8);
  sub_1001C7334();
  __chkstk_darwin(v3);
  sub_1001B0F00();
  uint64_t v6 = v5 - v4;
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_1001B0F00();
  uint64_t v10 = v9 - v8;
  id v11 = sub_100170684();
  uint64_t v12 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v13 = sub_1001C7370(v12, 72LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v13 + 56) = sub_1001AFF14(&qword_1004491E8);
  sub_1001C6AE8((unint64_t *)&unk_1004491F0, &qword_1004491E8);
  *(void *)(v13 + 64) = v14;
  *(void *)(v13 + 32) = v2;
  uint64_t v15 = swift_bridgeObjectRetain(v2);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)( "Received create simulated conversation with handles %@",  54LL,  2LL,  &_mh_execute_header,  v11,  v16,  v13);

  swift_bridgeObjectRelease(v13);
  uint64_t v17 = sub_1001C7370((uint64_t)&unk_1003E0AF0, 32LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v17 + 24) = v2;
  uint64_t v18 = sub_1001E2064((uint64_t)sub_1002356BC);
  swift_bridgeObjectRetain(v2);
  static DispatchQoS.unspecified.getter(v0);
  sub_1001C6B98( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v19 = sub_1001C7340();
  sub_1001C7368((unint64_t *)&qword_100447CC0);
  uint64_t v20 = sub_100207164();
  sub_100207154(v20, v19, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6);
  _Block_release(v18);
  sub_1001D924C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v22);
  sub_1001C7358();
  sub_1001B0FF8();
}

void sub_100205E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100449200);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for UUID(0LL);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v73 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  uint64_t v8 = __chkstk_darwin(v71);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v66 - v11;
  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 normalizedHandleWithDestinationID:v14];

  if (!v15) {
    return;
  }
  id v16 = objc_allocWithZone(&OBJC_CLASS___TUConversationMember);
  id v74 = v15;
  id v68 = [v16 initWithHandle:v15];
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v65 = a2;
    }
    else {
      uint64_t v65 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v69 = v12;
  if (v17)
  {
    v75[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v17);
    if (v17 < 0)
    {
      __break(1u);
      goto LABEL_22;
    }

    uint64_t v66 = v6;
    uint64_t v67 = a1;
    uint64_t v19 = 0LL;
    do
    {
      if ((a2 & 0xC000000000000001LL) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a2);
      }
      else {
        id v20 = *(id *)(a2 + 8 * v19 + 32);
      }
      uint64_t v21 = v20;
      ++v19;
      id v22 = objc_msgSend(v20, "value", v66);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v24 = v23;

      NSString v25 = String._bridgeToObjectiveC()();
      uint64_t v26 = swift_bridgeObjectRelease(v24);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      uint64_t v27 = *(void *)(v75[0] + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      specialized ContiguousArray._endMutation()(v28);
    }

    while (v17 != v19);
    uint64_t v18 = (void *)v75[0];
    uint64_t v6 = v66;
    a1 = v67;
  }

  unint64_t v76 = (unint64_t)v18;
  id v29 = (id)TUCopyIDSCanonicalAddressForHandle(v74);
  if (!v29)
  {
LABEL_22:
    __break(1u);
    return;
  }

  uint64_t v30 = v29;
  sub_1001B4B94(0LL, &qword_1004488D0, &OBJC_CLASS___IDSDestination_ptr);
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  id v34 = sub_1002062A4(v31, v33);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v36 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v35 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v36 >= v35 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
  }
  uint64_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
  uint64_t v45 = specialized Array._endMutation()(v37, v38, v39, v40, v41, v42, v43, v44, v66);
  uint64_t v46 = (uint64_t)v73;
  UUID.init()(v45);
  unint64_t v47 = v76;
  uint64_t v48 = (int *)v71;
  *(void *)&v10[*(int *)(v71 + 24)] = &_swiftEmptyDictionarySingleton;
  uint64_t v49 = v48[8];
  id v50 = v68;
  *(void *)&v10[v49] = sub_10028E19C(-1LL, v51, v52, v53, v54, v55, v56, v57);
  uint64_t v58 = v70;
  id v59 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v60 = v72;
  v59(v10, v46, v72);
  *(void *)&v10[v48[5]] = v47;
  *(void *)&v10[v48[7]] = v50;
  v10[v48[9]] = 0;
  sub_100203D3C();
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v46, v60);
  uint64_t v61 = (uint64_t)v69;
  sub_100206928((uint64_t)v10, (uint64_t)v69);
  v59((char *)v46, v61, v60);
  sub_10020696C(v61, (uint64_t)v6);
  sub_1001A9670((uint64_t)v6, 0LL, 1LL, (uint64_t)v48);
  uint64_t KeyPath = swift_getKeyPath(&unk_10037C598);
  uint64_t v63 = swift_getKeyPath(&unk_10037C5C0);
  uint64_t v64 = (void (*)(void *, void))static Published.subscript.modify(v75, a1, KeyPath, v63);
  sub_1001FC4B0((uint64_t)v6, v46);
  v64(v75, 0LL);

  swift_release(KeyPath);
  swift_release(v63);
  sub_1002069DC(v61);
}

id sub_1002062A4(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) destinationWithURI:v4];

  return v5;
}

void *sub_100206364(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void *)((char *)a2 + v8);
    *(void *)((char *)a1 + v_Block_object_dispose(va, 8) = v10;
    uint64_t v11 = *(void *)((char *)a2 + v9);
    *(void *)((char *)a1 + v9) = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    NSString v14 = *(void **)((char *)a2 + v12);
    *(void *)((char *)a1 + v12) = v14;
    *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    id v15 = v14;
  }

  return a1;
}

void sub_10020642C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6]));
}

uint64_t sub_100206488(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = *(void *)(a2 + v8);
  *(void *)(a1 + v_Block_object_dispose(va, 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = *(void **)(a2 + v11);
  *(void *)(a1 + v11) = v13;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  id v14 = v13;
  return a1;
}

uint64_t sub_100206524(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void *)(a2 + v10);
  uint64_t v12 = *(void *)(a1 + v10);
  *(void *)(a1 + sub_1001FC0F0((uint64_t)&a9, v9, v10) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[7];
  id v14 = *(void **)(a2 + v13);
  id v15 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = v14;
  id v16 = v14;

  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1002065DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v_Block_object_dispose(va, 8) = *(void *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100206660(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_100206700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020670C);
}

uint64_t sub_10020670C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001B1234();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_1001AB0AC(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v_Block_object_dispose(va, 8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100206780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020678C);
}

uint64_t sub_10020678C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1001B1234();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_1001A9670(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(uint64_t a1)
{
  return sub_100206810( a1,  qword_100449188,  (uint64_t)&nominal type descriptor for SimulatedConversationManager.SimulatedGroupSession);
}

uint64_t sub_100206810(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100206840(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    _OWORD v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_10037C578;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_1002068E0()
{
}

uint64_t sub_1002068E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002068F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100206900(void *a1)
{
  uint64_t v1 = swift_bridgeObjectRetain(*a1);
  return sub_1002026A0(v1);
}

uint64_t sub_100206928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020696C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002069B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100202638();
  *a1 = result;
  return result;
}

uint64_t sub_1002069DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SimulatedConversationManager.SimulatedGroupSession(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_100206A18(unint64_t *a1, unint64_t *a2, void *a3)
{
  if (!*a1)
  {
    uint64_t v4 = sub_1001B4B94(255LL, a2, a3);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4), a1);
  }

  sub_1001AA978();
}

uint64_t sub_100206A54()
{
  uint64_t v1 = sub_1001B1234();
  unint64_t v2 = (*(void *)(*(void *)(v1 - 8) + 64LL)
  sub_1001C73EC();
  sub_1001C74B4();

  uint64_t v3 = sub_100207114();
  return sub_100207028(v3, v4, v5);
}

uint64_t sub_100206AB8()
{
  return sub_100205848(*(void *)(v0 + 16), v0 + v2, *(void **)(v0 + (v1 & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100206AE0(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_100449200);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100206B24()
{
  return sub_100206CC4((uint64_t (*)(void, uint64_t, void, void))sub_10020504C);
}

uint64_t sub_100206B30(char a1)
{
  return a1 & 1;
}

uint64_t sub_100206B3C()
{
  uint64_t v3 = sub_100207114();
  return sub_100207028(v3, v4, v5);
}

uint64_t sub_100206B7C()
{
  return sub_100206CC4((uint64_t (*)(void, uint64_t, void, void))sub_100204A08);
}

uint64_t sub_100206B88()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100206BAC()
{
  return sub_100207058(v0, v1, v2);
}

uint64_t sub_100206BE8()
{
  return sub_100206C38((uint64_t (*)(void, uint64_t))sub_100203C14);
}

uint64_t sub_100206BF4()
{
  return sub_100207058(v0, v1, v2);
}

uint64_t sub_100206C2C()
{
  return sub_100206C38(sub_100203778);
}

uint64_t sub_100206C38(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_1001B1234() - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100206C78()
{
  uint64_t v3 = sub_100207114();
  return sub_100207028(v3, v4, v5);
}

uint64_t sub_100206CB8()
{
  return sub_100206CC4((uint64_t (*)(void, uint64_t, void, void))sub_100203164);
}

uint64_t sub_100206CC4(uint64_t (*a1)(void, uint64_t, void, void))
{
  return a1( *(void *)(v1 + 16),  v1 + v3,  *(void *)(v1 + (v2 & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + (((v2 & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100206D0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10020256C(a1, v2, a2);
}

uint64_t sub_100206D18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100206D40()
{
  return sub_100202324(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100206D4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100202638();
  *a1 = result;
  return result;
}

uint64_t sub_100206D84()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100206DA4()
{
}

void sub_100206DB0()
{
}

void destroy for SimulatedConversationManager.SimulatedParticipant(id *a1)
{
}

void _s13callservicesd28SimulatedConversationManagerC20SimulatedParticipantVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_WORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  id v4 = v2;
  sub_1001AA978();
}

uint64_t assignWithCopy for SimulatedConversationManager.SimulatedParticipant(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for SimulatedConversationManager.SimulatedParticipant(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SimulatedConversationManager.SimulatedParticipant(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimulatedConversationManager.SimulatedParticipant(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 18))
    {
      LODWORD(sub_1001FC3C8(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_1001FC3C8(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimulatedConversationManager.SimulatedParticipant( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SimulatedConversationManager.SimulatedParticipant()
{
  return &type metadata for SimulatedConversationManager.SimulatedParticipant;
}

uint64_t sub_100206F9C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_100206FBC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_100206FDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100206FEC()
{
}

uint64_t sub_100207028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

id sub_10020703C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

uint64_t sub_100207048()
{
  return sub_1001B4B94(0LL, v0, v1);
}

uint64_t sub_100207058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

  ;
}

id sub_10020708C()
{
  return sub_100170684();
}

  ;
}

uint64_t sub_1002070C4()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1002070CC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1002070D4()
{
  return 0LL;
}

void sub_1002070F0(unint64_t *a1)
{
}

uint64_t sub_1002070FC()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_100207108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_isEscapingClosureAtFileLocation(a1, a2, a3, a4, 20LL, 1LL);
}

uint64_t sub_100207114()
{
  return v0;
}

uint64_t sub_100207124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v4, v3);
}

uint64_t sub_100207134()
{
  return swift_release(v0);
}

uint64_t sub_10020713C()
{
  return swift_release(v0);
}

uint64_t sub_100207144(uint64_t a1)
{
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  return a1 + v1;
}

uint64_t sub_100207154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100207164()
{
  return v0 - 136;
}

  ;
}

void sub_100207188()
{
}

void sub_100207190(dispatch_queue_s *a1)
{
}

uint64_t sub_100207198()
{
  return v2(v0, v1);
}

void *sub_1002071A4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 152) = a1;
  *(void *)(v2 - 144) = v1;
  return _Block_copy((const void *)(v2 - 168));
}

uint64_t sub_1002071B0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  return sub_1001B03FC((uint64_t)va1, (uint64_t)va);
}

uint64_t *sub_1002071BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = sub_1001AFF14(&qword_100447FC0);
    if (sub_1001AB0AC((uint64_t)a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = (void *)a2[1];
      *a1 = *a2;
      a1[1] = (uint64_t)v9;
      *((_BYTE *)a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
      a1[3] = a2[3];
      uint64_t v10 = type metadata accessor for SoundDescriptor(0LL);
      uint64_t v11 = *(int *)(v10 + 32);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UUID(0LL);
      id v15 = v9;
      if (sub_1001AB0AC((uint64_t)v13, 1LL, v14))
      {
        uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_10044A400);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
        sub_1001A9670((uint64_t)v12, 0LL, 1LL, v14);
      }

      *((_BYTE *)a1 + *(int *)(v10 + 36)) = *((_BYTE *)a2 + *(int *)(v10 + 36));
      sub_1001A9670((uint64_t)a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t sub_100207320(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100447FC0);
  uint64_t result = sub_1001AB0AC(a1, 2LL, v2);
  if (!(_DWORD)result)
  {

    uint64_t v4 = a1 + *(int *)(type metadata accessor for SoundDescriptor(0LL) + 32);
    uint64_t v5 = type metadata accessor for UUID(0LL);
    uint64_t result = sub_1001AB0AC(v4, 1LL, v5);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
    }
  }

  return result;
}

void *sub_1002073B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14(&qword_100447FC0);
  if (sub_1001AB0AC((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((_BYTE *)a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
    a1[3] = a2[3];
    uint64_t v8 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    id v13 = v7;
    if (sub_1001AB0AC((uint64_t)v11, 1LL, v12))
    {
      uint64_t v14 = sub_1001AFF14((uint64_t *)&unk_10044A400);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      sub_1001A9670((uint64_t)v10, 0LL, 1LL, v12);
    }

    *((_BYTE *)a1 + *(int *)(v8 + 36)) = *((_BYTE *)a2 + *(int *)(v8 + 36));
    sub_1001A9670((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

uint64_t sub_1002074F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14(&qword_100447FC0);
  int v7 = sub_1001AB0AC(a1, 2LL, v6);
  int v8 = sub_1001AB0AC(a2, 2LL, v6);
  if (!v7)
  {
    if (v8)
    {
      sub_100207768(a1);
      goto LABEL_7;
    }

    *(void *)a1 = *(void *)a2;
    uint64_t v17 = *(void **)(a2 + 8);
    uint64_t v18 = *(void **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v17;
    id v19 = v17;

    *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v20 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v21 = *(int *)(v20 + 32);
    id v22 = (void *)(a1 + v21);
    uint64_t v23 = (const void *)(a2 + v21);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    int v25 = sub_1001AB0AC((uint64_t)v22, 1LL, v24);
    int v26 = sub_1001AB0AC((uint64_t)v23, 1LL, v24);
    if (v25)
    {
      if (!v26)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v22, v23, v24);
        sub_1001A9670((uint64_t)v22, 0LL, 1LL, v24);
LABEL_16:
        *(_BYTE *)(a1 + *(int *)(v20 + 36)) = *(_BYTE *)(a2 + *(int *)(v20 + 36));
        return a1;
      }
    }

    else
    {
      uint64_t v27 = *(void *)(v24 - 8);
      if (!v26)
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 24))(v22, v23, v24);
        goto LABEL_16;
      }

      (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
    }

    uint64_t v28 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v8)
  {
LABEL_7:
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  uint64_t v9 = *(void **)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v9;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v10 = type metadata accessor for SoundDescriptor(0LL);
  uint64_t v11 = *(int *)(v10 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  id v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  id v15 = v9;
  if (sub_1001AB0AC((uint64_t)v13, 1LL, v14))
  {
    uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    sub_1001A9670((uint64_t)v12, 0LL, 1LL, v14);
  }

  *(_BYTE *)(a1 + *(int *)(v10 + 36)) = *(_BYTE *)(a2 + *(int *)(v10 + 36));
  sub_1001A9670(a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t sub_100207768(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100447FC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_1002077A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14(&qword_100447FC0);
  if (sub_1001AB0AC((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((_BYTE *)a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
    a1[3] = a2[3];
    uint64_t v8 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    if (sub_1001AB0AC((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_10044A400);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
      sub_1001A9670((uint64_t)v10, 0LL, 1LL, v12);
    }

    *((_BYTE *)a1 + *(int *)(v8 + 36)) = *((_BYTE *)a2 + *(int *)(v8 + 36));
    sub_1001A9670((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

uint64_t sub_1002078E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001AFF14(&qword_100447FC0);
  int v7 = sub_1001AB0AC(a1, 2LL, v6);
  int v8 = sub_1001AB0AC(a2, 2LL, v6);
  if (!v7)
  {
    if (v8)
    {
      sub_100207768(a1);
      goto LABEL_7;
    }

    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v17 = *(void **)(a1 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v16;

    *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v18 = type metadata accessor for SoundDescriptor(0LL);
    uint64_t v19 = *(int *)(v18 + 32);
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for UUID(0LL);
    int v23 = sub_1001AB0AC((uint64_t)v20, 1LL, v22);
    int v24 = sub_1001AB0AC((uint64_t)v21, 1LL, v22);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
        sub_1001A9670((uint64_t)v20, 0LL, 1LL, v22);
LABEL_16:
        *(_BYTE *)(a1 + *(int *)(v18 + 36)) = *(_BYTE *)(a2 + *(int *)(v18 + 36));
        return a1;
      }
    }

    else
    {
      uint64_t v25 = *(void *)(v22 - 8);
      if (!v24)
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 40))(v20, v21, v22);
        goto LABEL_16;
      }

      (*(void (**)(void *, uint64_t))(v25 + 8))(v20, v22);
    }

    uint64_t v26 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v8)
  {
LABEL_7:
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v9;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v10 = type metadata accessor for SoundDescriptor(0LL);
  uint64_t v11 = *(int *)(v10 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  if (sub_1001AB0AC((uint64_t)v13, 1LL, v14))
  {
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_10044A400);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    sub_1001A9670((uint64_t)v12, 0LL, 1LL, v14);
  }

  *(_BYTE *)(a1 + *(int *)(v10 + 36)) = *(_BYTE *)(a2 + *(int *)(v10 + 36));
  sub_1001A9670(a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t sub_100207B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100207B50);
}

uint64_t sub_100207B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447FC0);
  unsigned int v5 = sub_1001AB0AC(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100207B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100207BA4);
}

uint64_t sub_100207BA4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_1001AFF14(&qword_100447FC0);
  return sub_1001A9670(a1, v5, a3, v6);
}

uint64_t sub_100207BF4(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14(&qword_100447FC0);
  return sub_1001AB0AC(a1, 2LL, v2);
}

uint64_t sub_100207C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447FC0);
  return sub_1001A9670(a1, a2, 2LL, v4);
}

uint64_t type metadata accessor for SoundDescriptorAction(uint64_t a1)
{
  uint64_t result = qword_100449320;
  if (!qword_100449320) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundDescriptorAction);
  }
  return result;
}

uint64_t sub_100207C9C(uint64_t a1)
{
  uint64_t result = type metadata accessor for SoundDescriptor(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

unint64_t sub_100207CF4()
{
  unint64_t result = qword_100449330;
  if (!qword_100449330)
  {
    uint64_t v1 = type metadata accessor for SoundDescriptorAction(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10037C680, v1);
    atomic_store(result, (unint64_t *)&qword_100449330);
  }

  return result;
}

BOOL sub_100207D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  sub_1002082E4(a2, (uint64_t)&v16 - v8);
  uint64_t v10 = sub_1001AFF14(&qword_100447FC0);
  int v11 = sub_1001AB0AC((uint64_t)v9, 2LL, v10);
  if (v11)
  {
    if (v11 == 1) {
      unint64_t v12 = 1LL;
    }
    else {
      unint64_t v12 = 2LL;
    }
  }

  else
  {
    sub_100208328((uint64_t)v9, type metadata accessor for SoundDescriptor);
    unint64_t v12 = 3LL;
  }

  sub_1002082E4(a1, (uint64_t)v7);
  unsigned int v13 = sub_1001AB0AC((uint64_t)v7, 2LL, v10);
  if (v13)
  {
    unint64_t v14 = v13;
    if (v13 != 1) {
      unint64_t v14 = 2LL;
    }
  }

  else
  {
    sub_100208328((uint64_t)v7, type metadata accessor for SoundDescriptor);
    unint64_t v14 = 3LL;
  }

  return v12 >= v14;
}

BOOL sub_100207E58( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a5 != a2 || a4 >= a1;
  return a5 >= a2 && v6;
}

BOOL sub_100207E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  sub_1002082E4(a1, (uint64_t)&v16 - v8);
  uint64_t v10 = sub_1001AFF14(&qword_100447FC0);
  int v11 = sub_1001AB0AC((uint64_t)v9, 2LL, v10);
  if (v11)
  {
    if (v11 == 1) {
      unint64_t v12 = 1LL;
    }
    else {
      unint64_t v12 = 2LL;
    }
  }

  else
  {
    sub_100208328((uint64_t)v9, type metadata accessor for SoundDescriptor);
    unint64_t v12 = 3LL;
  }

  sub_1002082E4(a2, (uint64_t)v7);
  unsigned int v13 = sub_1001AB0AC((uint64_t)v7, 2LL, v10);
  if (v13)
  {
    unint64_t v14 = v13;
    if (v13 != 1) {
      unint64_t v14 = 2LL;
    }
  }

  else
  {
    sub_100208328((uint64_t)v7, type metadata accessor for SoundDescriptor);
    unint64_t v14 = 3LL;
  }

  return v12 >= v14;
}

BOOL sub_100207F94( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a2 != a5 || a1 >= a4;
  return a2 >= a5 && v6;
}

void sub_100207FAC()
{
  uint64_t v4 = __chkstk_darwin(v3);
  sub_1002083DC(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  sub_1001AFF14(&qword_100447FC0);
  uint64_t v12 = sub_1002083D0(v1);
  if ((_DWORD)v12) {
    sub_1002083F4();
  }
  else {
    sub_100208410(v12, type metadata accessor for SoundDescriptor);
  }
  sub_100208404();
  else {
    sub_100208328(v0, type metadata accessor for SoundDescriptor);
  }
  sub_10010B978();
}

uint64_t sub_10020806C( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v6 = a5 == a2 && a4 < a1;
  return a5 < a2 || v6;
}

uint64_t sub_100208088(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (char *)&v18 - v7;
  sub_1001AFF14(qword_100449338);
  sub_1001B0E88();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1002082E4(a1, (uint64_t)v12);
  sub_1002082E4(a2, v13);
  sub_1001AFF14(&qword_100447FC0);
  int v14 = sub_1002083C4(v13);
  if (!v14)
  {
    uint64_t v15 = sub_1002083C4((uint64_t)v12);
    if (!(_DWORD)v15)
    {
      sub_100208364((uint64_t)v12, (uint64_t)v8);
      sub_100208364(v13, v2);
      char v16 = sub_1002519E8((uint64_t)v8, v2);
      sub_100208328(v2, type metadata accessor for SoundDescriptor);
      sub_100208328((uint64_t)v8, type metadata accessor for SoundDescriptor);
      return v16 & 1;
    }

    sub_100208410(v15, type metadata accessor for SoundDescriptor);
    goto LABEL_9;
  }

  if (v14 == 1)
  {
  }

  else if (sub_1002083C4((uint64_t)v12) != 2)
  {
LABEL_9:
    sub_100208328((uint64_t)v12, type metadata accessor for SoundDescriptorAction);
    char v16 = 0;
    return v16 & 1;
  }

  char v16 = 1;
  return v16 & 1;
}

void sub_100208214()
{
  uint64_t v4 = __chkstk_darwin(v3);
  sub_1002083DC(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  sub_1001AFF14(&qword_100447FC0);
  uint64_t v12 = sub_1002083D0(v1);
  if ((_DWORD)v12) {
    sub_1002083F4();
  }
  else {
    sub_100208410(v12, type metadata accessor for SoundDescriptor);
  }
  sub_100208404();
  else {
    sub_100208328(v0, type metadata accessor for SoundDescriptor);
  }
  sub_10010B978();
}

uint64_t sub_1002082E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptorAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100208328(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100208364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundDescriptor(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

  ;
}

uint64_t sub_1002083C4(uint64_t a1)
{
  return sub_1001AB0AC(a1, 2LL, v1);
}

uint64_t sub_1002083D0(uint64_t a1)
{
  return sub_1001AB0AC(a1, 2LL, v1);
}

uint64_t sub_1002083DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1002082E4(v10, (uint64_t)&a9 - v9);
}

  ;
}

uint64_t sub_100208404()
{
  return sub_1002082E4(v1, v0);
}

uint64_t sub_100208410(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_100208328(v2, a2);
}

id sub_100208418()
{
  id result = sub_1001704C4();
  qword_100454018 = (uint64_t)result;
  return result;
}

uint64_t sub_10020843C(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = "\b";
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = "\b";
  v2[4] = "\b";
  v2[5] = "\b";
  v2[6] = "\b";
  v2[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  _BYTE v2[8] = &unk_10037C750;
  void v2[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[10] = (char *)&value witness table for () + 64;
  v2[11] = &unk_10037C768;
  v2[12] = &unk_10037C768;
  return swift_initClassMetadata2(a1, 0LL, 13LL, v2, a1 + 208);
}

void *sub_1002084D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a1;
  v5[3] = a2;
  void v5[4] = a1;
  void v5[5] = a3;
  v5[6] = a1;
  v5[7] = a4;
  v5[8] = a1;
  void v5[9] = a5;
  v5[10] = a1;
  swift_retain_n();
  return v5;
}

void sub_100208504(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100208560(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1002085BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = sub_1001B4B0C(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1LL << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }

    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v16 = v2;
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
        uint64_t v10 = type metadata accessor for AnyAudioInterruptionProvider();
        swift_allocObject(v10, 88LL, 7LL);
        uint64_t v11 = swift_retain(v9);
        uint64_t v12 = sub_1002084D4( v11,  (uint64_t)sub_10020E598,  (uint64_t)sub_10020E59C,  (uint64_t)sub_10020E5A0,  (uint64_t)sub_10020E5A4);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        uint64_t v13 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
        uint64_t result = specialized ContiguousArray._endMutation()(v14);
        uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
        if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v7 = v8;
        uint64_t result = _HashTable.occupiedBucket(after:)(v5, v8, ~v15);
        uint64_t v2 = v16 - 1;
        if (v16 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100208794(void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  uint64_t v4 = v8;
  if (!v8) {
    return v4 == 0;
  }
  sub_1001B03EC(&v7, v6);
  a1(&v9, v6);
  uint64_t result = sub_1001B0438(v6);
  if (!v2) {
    return v4 == 0;
  }
  return result;
}

void sub_100208828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = sub_1001B4B94(0LL, &qword_100449418, &OBJC_CLASS___TUConversationActivitySession_ptr);
    sub_10020EB04((uint64_t)&unk_100449420);
    __int128 v7 = Set.Iterator.init(_cocoa:)(v30, v4, v5, v6);
    uint64_t v2 = v30[0];
    uint64_t v28 = v30[1];
    uint64_t v8 = v30[2];
    int64_t v9 = v30[3];
    unint64_t v10 = v30[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    __int128 v7 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
  }

  int64_t v14 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v10)
    {
      uint64_t v15 = (v10 - 1) & v10;
      unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
      int64_t v17 = v9;
      goto LABEL_32;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v22 >= v14) {
      goto LABEL_40;
    }
    unint64_t v23 = *(void *)(v28 + 8 * v22);
    int64_t v17 = v9 + 1;
    if (!v23)
    {
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v14) {
        goto LABEL_40;
      }
      unint64_t v23 = *(void *)(v28 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v9 + 3;
        if (v9 + 3 >= v14) {
          goto LABEL_40;
        }
        unint64_t v23 = *(void *)(v28 + 8 * v17);
        if (!v23)
        {
          int64_t v17 = v9 + 4;
          if (v9 + 4 >= v14) {
            goto LABEL_40;
          }
          unint64_t v23 = *(void *)(v28 + 8 * v17);
          if (!v23)
          {
            int64_t v17 = v9 + 5;
            if (v9 + 5 >= v14) {
              goto LABEL_40;
            }
            unint64_t v23 = *(void *)(v28 + 8 * v17);
            if (!v23)
            {
              int64_t v24 = v9 + 6;
              while (v24 < v14)
              {
                unint64_t v23 = *(void *)(v28 + 8 * v24++);
                if (v23)
                {
                  int64_t v17 = v24 - 1;
                  goto LABEL_31;
                }
              }

double sub_100208B44()
{
  return 3.0;
}

uint64_t sub_100208B4C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1001B4B94(0LL, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  int64_t v17 = _swiftEmptyArrayStorage;
  sub_10020F18C((uint64_t)&unk_100449280);
  uint64_t v12 = v11;
  uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100449F80);
  sub_10020F1C4((uint64_t)&qword_100449290);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v4, v12);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003ALL,  0x80000001003718F0LL,  v9,  v6,  v3,  0LL);
}

uint64_t sub_100208D10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  *(void *)(v10 + 80) = 0LL;
  *(void *)(v10 + 8_Block_object_dispose(va, 8) = &_swiftEmptySetSingleton;
  *(void *)(v10 + 96) = sub_100208B44;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(void *)(v10 + 16_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a10;
  *(void *)(v10 + 24) = a1;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 40) = a4;
  *(void *)(v10 + 4_Block_object_dispose(va, 8) = a5;
  *(void *)(v10 + 56) = a6;
  *(void *)(v10 + 64) = a8;
  *(void *)(v10 + 72) = a9;
  uint64_t v16 = swift_allocObject(&unk_1003E1128, 24LL, 7LL);
  swift_weakInit(v16 + 16, v10);
  int64_t v17 = (uint64_t (**)(uint64_t, uint64_t, int))(a1
                                                       + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  uint64_t v37 = a1;
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler);
  uint64_t v18 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd13AudioResolver_resolutionChangedHandler + 8);
  void *v17 = sub_10020E45C;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, int))v16;
  id v36 = a10;
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a4);
  swift_retain(a5);
  id v35 = a6;
  swift_retain(a8);
  id v20 = a9;
  sub_1001B5D3C(v19, v18);
  id v21 = (void *)objc_opt_self(&OBJC_CLASS___NSOperationQueue);
  id v22 = [v21 mainQueue];
  uint64_t v23 = swift_allocObject(&unk_1003E1128, 24LL, 7LL);
  swift_weakInit(v23 + 16, v10);
  uint64_t v45 = sub_10020E464;
  uint64_t v46 = v23;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256LL;
  uint64_t v43 = sub_100209DB4;
  uint64_t ObjectType = &unk_1003E1140;
  int64_t v24 = _Block_copy(&aBlock);
  swift_release(v46);
  id v25 = (void **) [v20 addObserverForName:AVAudioSessionMediaServicesWereResetNotification object:0 queue:v22 usingBlock:v24];
  _Block_release(v24);

  uint64_t ObjectType = (void *)swift_getObjectType(v25);
  uint64_t aBlock = v25;
  swift_beginAccess(v10 + 112, v40, 33LL, 0LL);
  sub_10020E484((uint64_t)&aBlock, v10 + 112);
  swift_endAccess(v40);
  id v26 = [v21 mainQueue];
  uint64_t v27 = swift_allocObject(&unk_1003E1128, 24LL, 7LL);
  swift_weakInit(v27 + 16, v10);
  uint64_t v45 = sub_10020E4CC;
  uint64_t v46 = v27;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256LL;
  uint64_t v43 = sub_100209DB4;
  uint64_t ObjectType = &unk_1003E1168;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_release(v46);
  uint64_t v29 = (void **) [v20 addObserverForName:AVAudioSessionInterruptionNotification object:0 queue:v26 usingBlock:v28];
  _Block_release(v28);

  uint64_t ObjectType = (void *)swift_getObjectType(v29);
  swift_release(a2);
  swift_release(a3);
  swift_release(a4);
  swift_release(a5);

  swift_release(a7);
  swift_release(a8);

  uint64_t aBlock = v29;
  swift_release(v37);
  swift_beginAccess(v10 + 144, v40, 33LL, 0LL);
  sub_10020E484((uint64_t)&aBlock, v10 + 144);
  swift_endAccess(v40);
  return v10;
}

uint64_t sub_1002090D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v43 = a1;
  uint64_t v7 = sub_1001AFF14(&qword_100447498);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v44 + 64);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v10 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  uint64_t v12 = &v40[-v11];
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a4 += 16LL;
  id v17 = sub_100170614();
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:type:_:)( "resolutionChangedHandler closure invoked",  40LL,  2LL,  &_mh_execute_header,  v17,  v18,  _swiftEmptyArrayStorage);

  swift_beginAccess(a4, v47, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a4);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v21 = a2;
    id v22 = *(void **)(result + 16);
    uint64_t v23 = sub_1001AFF14(&qword_100449400);
    uint64_t v24 = *(void *)(v14 + 72);
    uint64_t v25 = *(unsigned __int8 *)(v14 + 80);
    int v41 = a3;
    uint64_t v26 = swift_allocObject(v23, ((v25 + 32) & ~v25) + v24, v25 | 7);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    id v42 = v22;
    static DispatchWorkItemFlags.assignCurrentContext.getter();
    aBlock[0] = v26;
    sub_10020F18C((uint64_t)&qword_100447CB0);
    uint64_t v28 = v27;
    uint64_t v29 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_10020F1C4((uint64_t)&qword_100447CC0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v13, v28);
    sub_10020F1FC(v43, (uint64_t)v12, &qword_100447498);
    sub_10020F1FC(v21, (uint64_t)v10, &qword_100447498);
    uint64_t v31 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v32 = (v31 + 24) & ~v31;
    uint64_t v33 = (v8 + v31 + v32) & ~v31;
    uint64_t v34 = v33 + v8;
    uint64_t v35 = swift_allocObject(&unk_1003E1218, v34 + 1, v31 | 7);
    *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    sub_10020E9EC((uint64_t)v12, v35 + v32, &qword_100447498);
    sub_10020E9EC((uint64_t)v10, v35 + v33, &qword_100447498);
    *(_BYTE *)(v35 + v34) = v41 & 1;
    aBlock[4] = sub_10020E7BC;
    uint64_t v46 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003E1230;
    id v36 = _Block_copy(aBlock);
    uint64_t v37 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    swift_retain(v20);
    uint64_t v38 = DispatchWorkItem.init(flags:block:)(v16, v36);
    swift_release(v46);
    uint64_t v39 = v42;
    OS_dispatch_queue.async(execute:)(v38);
    swift_release(v20);

    return swift_release(v38);
  }

  return result;
}

void sub_100209408(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1001AFF14(&qword_100447498);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AudioDescriptor(0LL);
  __chkstk_darwin(v11);
  uint64_t v106 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v17 = *(void **)(v4 + 16);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    uint64_t v105 = v11;
    id v19 = sub_100170614();
    uint64_t v20 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v21 = swift_allocObject(v20, 152LL, 7LL);
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B6E0;
    uint64_t v104 = a1;
    sub_1001AEB64(a1);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v26 = sub_1001B2330();
    *(void *)(v21 + 64) = v26;
    *(void *)(v21 + 32) = v23;
    *(void *)(v21 + 40) = v25;
    sub_1001AEB64(a2);
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v26;
    *(void *)(v21 + 72) = v27;
    *(void *)(v21 + 80) = v28;
    char v108 = a3 & 1;
    uint64_t v29 = String.init<A>(reflecting:)(&v108, &type metadata for Bool);
    *(void *)(v21 + 136) = &type metadata for String;
    *(void *)(v21 + 144) = v26;
    *(void *)(v21 + 112) = v29;
    *(void *)(v21 + 120) = v30;
    uint64_t v31 = static os_log_type_t.default.getter(v29);
    os_log(_:dso:log:type:_:)( "oldDescriptor: %@ descriptor: %@ notifyUnconditionally: %@",  58LL,  2LL,  &_mh_execute_header,  v19,  v31,  v21);

    swift_bridgeObjectRelease(v21);
    uint64_t v32 = *(void *)(v4 + 80);
    if (v32)
    {
      swift_retain(*(void *)(v4 + 80));
      id v33 = sub_100170614();
      uint64_t v34 = static os_log_type_t.default.getter(v33);
      os_log(_:dso:log:type:_:)( "An end interruption was deferred but we were asked to update to a new descriptor, so canceling the deferred end",  111LL,  2LL,  &_mh_execute_header,  v33,  v34,  _swiftEmptyArrayStorage);

      dispatch thunk of DispatchWorkItem.cancel()(v35);
      swift_release(v32);
      uint64_t v36 = *(void *)(v4 + 80);
      *(void *)(v4 + 80) = 0LL;
      swift_release(v36);
    }

    sub_10020F1FC(a2, (uint64_t)v10, &qword_100447498);
    if (sub_1001AB0AC((uint64_t)v10, 1LL, v105) == 1)
    {
      sub_1002011C8((uint64_t)v10, &qword_100447498);
      id v37 = sub_100170614();
      uint64_t v38 = static os_log_type_t.default.getter(v37);
      os_log(_:dso:log:type:_:)( "Ending interruption immediately since there is no longer a resolved descriptor",  78LL,  2LL,  &_mh_execute_header,  v37,  v38,  _swiftEmptyArrayStorage);

      sub_10020B1BC();
    }

    else
    {
      LODWORD(v105) = a3;
      uint64_t v39 = (uint64_t)v106;
      sub_1001DBCDC((uint64_t)v10, (uint64_t)v106, type metadata accessor for AudioDescriptor);
      uint64_t v40 = sub_1001AFF14(&qword_100449408);
      uint64_t inited = swift_initStackObject(v40, v107);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B130;
      id v42 = sub_10020A390(v39);
      unsigned __int8 v44 = v43;
      int v45 = ~v43;
      uint64_t v95 = v42;
      *(void *)(inited + 32) = v42;
      *(void *)(inited + 40) = v46;
      uint64_t v94 = v46;
      *(_BYTE *)(inited + 4_Block_object_dispose(va, 8) = v43;
      unint64_t v47 = sub_10020A5D8(v39);
      unsigned __int8 v49 = v48;
      uint64_t v97 = v47;
      *(void *)(inited + 56) = v47;
      *(void *)(inited + 64) = v50;
      uint64_t v96 = v50;
      *(_BYTE *)(inited + 72) = v48;
      uint64_t v51 = sub_10020A878(v39);
      unsigned __int8 v53 = v52;
      id v99 = v51;
      *(void *)(inited + 80) = v51;
      *(void *)(inited + 8_Block_object_dispose(va, 8) = v54;
      uint64_t v98 = v54;
      *(_BYTE *)(inited + 96) = v52;
      uint64_t v55 = sub_10020A98C();
      unsigned __int8 v57 = v56;
      unint64_t v102 = (void (*)(uint64_t))v55;
      *(void *)(inited + 104) = v55;
      *(void *)(inited + 112) = v58;
      uint64_t v101 = v58;
      *(_BYTE *)(inited + 120) = v56;
      id v59 = sub_10020AA40(v39);
      unsigned __int8 v61 = v60;
      id v103 = v59;
      *(void *)(inited + 12_Block_object_dispose(va, 8) = v59;
      *(void *)(inited + 136) = v62;
      uint64_t v100 = v62;
      *(_BYTE *)(inited + 144) = v60;
      if (v45 && (v44 & 1) != 0)
      {
        uint64_t v63 = v95;
        uint64_t v64 = v94;
        uint64_t v65 = sub_10020E818((uint64_t)v95, v94);
        ((void (*)(uint64_t))v63)(v65);
        sub_10020E820((uint64_t)v63, v64, v44);
      }

      if (v49 != 0xFF && (v49 & 1) != 0)
      {
        uint64_t v66 = v97;
        uint64_t v67 = v96;
        uint64_t v68 = sub_10020E818((uint64_t)v97, v96);
        ((void (*)(uint64_t))v66)(v68);
        sub_10020E820((uint64_t)v66, v67, v49);
      }

      if (v53 != 0xFF && (v53 & 1) != 0)
      {
        uint64_t v69 = v99;
        uint64_t v70 = v98;
        uint64_t v71 = sub_10020E818((uint64_t)v99, v98);
        ((void (*)(uint64_t))v69)(v71);
        sub_10020E820((uint64_t)v69, v70, v53);
      }

      if (v57 != 0xFF && (v57 & 1) != 0)
      {
        uint64_t v72 = v102;
        uint64_t v73 = v101;
        uint64_t v74 = sub_10020E818((uint64_t)v102, v101);
        v72(v74);
        sub_10020E820((uint64_t)v72, v73, v57);
      }

      char v75 = v105;
      if (v61 != 0xFF && (v61 & 1) != 0)
      {
        uint64_t v76 = v100;
        uint64_t v77 = v103;
        uint64_t v78 = sub_10020E818((uint64_t)v103, v100);
        ((void (*)(uint64_t))v77)(v78);
        sub_10020E820((uint64_t)v77, v76, v61);
      }

      sub_10020AB3C(v106, v104, v75 & 1);
      if ((v44 & 1) == 0 && v44 != 0xFF)
      {
        uint64_t v79 = v95;
        uint64_t v80 = v94;
        uint64_t v81 = sub_10020E818((uint64_t)v95, v94);
        ((void (*)(uint64_t))v79)(v81);
        sub_10020E820((uint64_t)v79, v80, v44);
      }

      if ((v49 & 1) == 0 && v49 != 0xFF)
      {
        uint64_t v82 = v97;
        uint64_t v83 = v96;
        uint64_t v84 = sub_10020E818((uint64_t)v97, v96);
        ((void (*)(uint64_t))v82)(v84);
        sub_10020E820((uint64_t)v82, v83, v49);
      }

      if ((v53 & 1) == 0 && v53 != 0xFF)
      {
        uint64_t v85 = v99;
        uint64_t v86 = v98;
        uint64_t v87 = sub_10020E818((uint64_t)v99, v98);
        ((void (*)(uint64_t))v85)(v87);
        sub_10020E820((uint64_t)v85, v86, v53);
      }

      if ((v57 & 1) == 0 && v57 != 0xFF)
      {
        uint64_t v88 = v102;
        uint64_t v89 = v101;
        uint64_t v90 = sub_10020E818((uint64_t)v102, v101);
        v88(v90);
        sub_10020E820((uint64_t)v88, v89, v57);
      }

      if (v61 != 0xFF && (v61 & 1) == 0)
      {
        uint64_t v91 = v103;
        uint64_t v92 = v100;
        uint64_t v93 = sub_10020E818((uint64_t)v103, v100);
        ((void (*)(uint64_t))v91)(v93);
        sub_10020E820((uint64_t)v91, v92, v61);
      }

      swift_release(inited);
      sub_10020E8B0((uint64_t)v106, type metadata accessor for AudioDescriptor);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100209AFC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Notification(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = sub_100170614();
  uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v17 = String.init<A>(reflecting:)(v13, v10);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v20 = sub_1001B2330();
  *(void *)(v16 + 64) = v20;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  os_log(_:dso:log:type:_:)("notification: %@", 16LL, 2LL, &_mh_execute_header, v14, v21, v16);

  swift_bridgeObjectRelease(v16);
  aBlock[4] = sub_10020E57C;
  uint64_t v34 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E11E0;
  uint64_t v22 = _Block_copy(aBlock);
  uint64_t v23 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_10020F18C((uint64_t)&qword_100447CB0);
  uint64_t v25 = v24;
  uint64_t v26 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_10020F1C4((uint64_t)&qword_100447CC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v26, v27, v4, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  return swift_release(v34);
}

uint64_t sub_100209DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001C9578();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return sub_1001D90B0((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
}

uint64_t sub_100209E50(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = a2 + 16;
  sub_1001B0E6C(a2 + 16, (uint64_t)v8);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    a3(a1);
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_100209EB4(uint64_t a1)
{
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  __chkstk_darwin(v3);
  id v33 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Notification(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  id v8 = sub_100170614();
  uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v11((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v5);
  uint64_t v12 = String.init<A>(reflecting:)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_1001B2330();
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("notification: %@", 16LL, 2LL, &_mh_execute_header, v8, v16, v10);

  swift_bridgeObjectRelease(v10);
  uint64_t v17 = v32;
  v11((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v5);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1003E11A0, v20 + 8, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v21 + v19,  (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  *(void *)(v21 + v20) = v17;
  aBlock[4] = sub_10020E55C;
  uint64_t v41 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E11B8;
  uint64_t v22 = _Block_copy(aBlock);
  uint64_t v23 = swift_retain(v17);
  uint64_t v24 = v33;
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_10020F18C((uint64_t)&qword_100447CB0);
  uint64_t v26 = v25;
  uint64_t v27 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_10020F1C4((uint64_t)&qword_100447CC0);
  uint64_t v29 = v34;
  uint64_t v28 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v27, v30, v35, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v24, v29);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v37);
  return swift_release(v41);
}

uint64_t sub_10020A1D8()
{
  sub_100208794((void (*)(uint64_t *__return_ptr, _OWORD *))sub_10020F228);
  sub_10020F56C((uint64_t)v3);
  sub_1001B0E6C(v0 + 144, (uint64_t)v2);
  sub_10020F1FC(v0 + 144, (uint64_t)v3, (uint64_t *)&unk_1004474B0);
  sub_100208794((void (*)(uint64_t *__return_ptr, _OWORD *))sub_10020F228);
  sub_10020F56C((uint64_t)v3);

  swift_unknownObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  swift_unknownObjectRelease(*(void *)(v0 + 56));
  swift_unknownObjectRelease(*(void *)(v0 + 64));

  swift_release(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 104));
  sub_10020F56C(v0 + 112);
  sub_10020F56C(v0 + 144);
  return v0;
}

uint64_t sub_10020A304(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 72);
  uint64_t v3 = a1[3];
  uint64_t v4 = sub_1001B204C(a1, v3);
  uint64_t v5 = _bridgeAnythingToObjectiveC<A>(_:)(v4, v3);
  [v2 removeObserver:v5];
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_10020A364()
{
  return swift_deallocClassInstance(v0, 176LL, 7LL);
}

uint64_t type metadata accessor for AudioController(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AudioController);
}

uint64_t (*sub_10020A390(uint64_t a1))()
{
  uint64_t v25 = a1;
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_10044B7B0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for RingtoneDescriptor(0LL);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v24 + 64);
  uint64_t v7 = __chkstk_darwin(v5);
  id v8 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = v1;
  unint64_t v15 = *(void **)(v1 + 16);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    uint64_t v18 = type metadata accessor for AudioDescriptor(0LL);
    sub_10020F1FC(v25 + *(int *)(v18 + 24), (uint64_t)v4, (uint64_t *)&unk_10044B7B0);
    if (sub_1001AB0AC((uint64_t)v4, 1LL, v5) == 1)
    {
      sub_1002011C8((uint64_t)v4, (uint64_t *)&unk_10044B7B0);
      swift_retain(*(void *)(v26 + 40));
      return sub_10020F09C;
    }

    else
    {
      sub_1001DBCDC((uint64_t)v4, (uint64_t)v10, type metadata accessor for RingtoneDescriptor);
      sub_1001DBCDC((uint64_t)v10, (uint64_t)v8, type metadata accessor for RingtoneDescriptor);
      uint64_t v19 = *(unsigned __int8 *)(v24 + 80);
      uint64_t v20 = (v19 + 24) & ~v19;
      uint64_t v21 = swift_allocObject(&unk_1003E1380, v20 + v6, v19 | 7);
      uint64_t v22 = v26;
      *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
      sub_1001DBCDC((uint64_t)v8, v21 + v20, type metadata accessor for RingtoneDescriptor);
      swift_retain(v22);
      return sub_10020F134;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t (*sub_10020A5D8(uint64_t a1))()
{
  uint64_t v32 = a1;
  uint64_t v2 = type metadata accessor for AudioDescriptor(0LL);
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v29 + 64);
  __chkstk_darwin(v2);
  uint64_t v30 = (uint64_t)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SoundDescriptor(0LL);
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v28 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SoundDescriptorAction(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = v1;
  uint64_t v14 = *(void **)(v1 + 16);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    uint64_t v17 = v32;
    sub_1001DBD08(v32 + *(int *)(v2 + 28), (uint64_t)v9, type metadata accessor for SoundDescriptorAction);
    uint64_t v18 = sub_1001AFF14(&qword_100447FC0);
    int v19 = sub_1001AB0AC((uint64_t)v9, 2LL, v18);
    if (v19)
    {
      if (v19 == 1)
      {
        return 0LL;
      }

      else
      {
        swift_retain(*(void *)(v31 + 48));
        return sub_10020ECBC;
      }
    }

    else
    {
      sub_1001DBCDC( (uint64_t)v9,  (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for SoundDescriptor);
      uint64_t v20 = v30;
      sub_1001DBD08(v17, v30, type metadata accessor for AudioDescriptor);
      uint64_t v21 = *(unsigned __int8 *)(v28 + 80);
      uint64_t v22 = (v21 + 24) & ~v21;
      uint64_t v23 = *(unsigned __int8 *)(v29 + 80);
      uint64_t v24 = (v5 + v23 + v22) & ~v23;
      uint64_t v25 = swift_allocObject(&unk_1003E1330, v24 + v3, v21 | v23 | 7);
      uint64_t v26 = v31;
      *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
      sub_1001DBCDC((uint64_t)v6, v25 + v22, type metadata accessor for SoundDescriptor);
      sub_1001DBCDC(v20, v25 + v24, type metadata accessor for AudioDescriptor);
      swift_retain(v26);
      return sub_10020EEA0;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void (*sub_10020A878(uint64_t a1))()
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + 16);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (void (*)())(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for AudioDescriptor(0LL) + 32)) & 1) != 0)
    {
      uint64_t v10 = *(void **)(v1 + 56);
      *(void *)(swift_allocObject(&unk_1003E12B8, 24LL, 7LL) + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
      id v11 = v10;
      return sub_10020EC24;
    }

    else
    {
      swift_retain(v1);
      return (void (*)())sub_10020EC40;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10020A98C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + 16);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  __break(1u);
  return result;
}

uint64_t (*sub_10020AA40(uint64_t a1))()
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + 16);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (uint64_t (*)())(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for AudioDescriptor(0LL) + 36)) & 1) != 0)
    {
      swift_retain(*(void *)(v1 + 64));
      return sub_10020EBF4;
    }

    else
    {
      swift_retain(v1);
      return sub_10020EBF8;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10020AB3C(const void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v66 = a3;
  uint64_t v65 = a2;
  uint64_t v67 = a1;
  uint64_t v64 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v5 = __chkstk_darwin(v64);
  unsigned __int8 v61 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v57 - v7;
  uint64_t v58 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v58);
  id v59 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1001AFF14(&qword_100447498);
  __chkstk_darwin(v9);
  id v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1001AFF14(&qword_100447488);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (void *)((char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = (void *)v4[2];
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v60 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    uint64_t v23 = type metadata accessor for AudioDescriptor(0LL);
    uint64_t v24 = v67;
    sub_10020F1FC((uint64_t)v67 + *(int *)(v23 + 20), (uint64_t)v14, &qword_100447488);
    if (sub_1001AB0AC((uint64_t)v14, 1LL, v15) == 1)
    {
      sub_1002011C8((uint64_t)v14, &qword_100447488);
      memcpy(v70, v24, 0x99uLL);
      sub_10020F1FC(v65, (uint64_t)v11, &qword_100447498);
      if (sub_1001AB0AC((uint64_t)v11, 1LL, v23) == 1)
      {
        sub_1002011C8((uint64_t)v11, &qword_100447498);
        sub_1001DE6BC(v71);
      }

      else
      {
        memcpy(v68, v11, 0x99uLL);
        sub_1001DE884((uint64_t)v68);
        sub_10020E8B0((uint64_t)v11, type metadata accessor for AudioDescriptor);
        memcpy(v71, v68, 0x99uLL);
        ScreenSharingActivityManager.carPlayStartedConnectionAttempt()();
      }

      sub_10020E9EC((uint64_t)v71, (uint64_t)v69, (uint64_t *)&unk_10044B7C0);
      sub_10020E9EC((uint64_t)v69, (uint64_t)v71, (uint64_t *)&unk_10044B7C0);
      sub_10020B394((uint64_t)v70, (uint64_t)v71, v66 & 1);
      sub_10020E840((uint64_t)v69);
    }

    else
    {
      uint64_t v25 = (uint64_t)v17;
      sub_1001DBCDC((uint64_t)v14, (uint64_t)v17, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
      swift_beginAccess(v4 + 11, v70, 0LL, 0LL);
      uint64_t v26 = v4[11];
      swift_bridgeObjectRetain(v26);
      char v27 = sub_100260FB4();
      swift_bridgeObjectRelease(v26);
      if ((v27 & 1) != 0)
      {
        id v28 = sub_100170614();
        uint64_t v29 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
        *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        uint64_t v31 = UUID.uuidString.getter(v30);
        uint64_t v33 = v32;
        *(void *)(v30 + 56) = &type metadata for String;
        unint64_t v34 = sub_1001B2330();
        *(void *)(v30 + 64) = v34;
        *(void *)(v30 + 32) = v31;
        *(void *)(v30 + 40) = v33;
        uint64_t v35 = static os_log_type_t.default.getter(v34);
        os_log(_:dso:log:type:_:)( "Ending interruption immediately, since descriptor has an interruption deferred end descriptor and there is a p ending expedite for UUID %@",  137LL,  2LL,  &_mh_execute_header,  v28,  v35,  v30);

        swift_bridgeObjectRelease(v30);
        sub_10027BA14(0);
      }

      else
      {
        v71[4] = sub_10020E8A8;
        v71[5] = v4;
        v71[0] = _NSConcreteStackBlock;
        v71[1] = 1107296256LL;
        v71[2] = sub_1002356BC;
        v71[3] = &unk_1003E1258;
        uint64_t v36 = _Block_copy(v71);
        v69[0] = _swiftEmptyArrayStorage;
        sub_10020F18C((uint64_t)&qword_100447CB0);
        uint64_t v38 = v37;
        swift_retain(v4);
        uint64_t v39 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
        sub_10020F1C4((uint64_t)&qword_100447CC0);
        uint64_t v40 = v59;
        dispatch thunk of SetAlgebra.init<A>(_:)(v69, v39, v41, v58, v38);
        uint64_t v42 = type metadata accessor for DispatchWorkItem(0LL);
        swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
        uint64_t v43 = DispatchWorkItem.init(flags:block:)(v40, v36);
        swift_release(v71[5]);
        uint64_t v44 = v4[10];
        void v4[10] = v43;
        swift_retain(v43);
        swift_release(v44);
        uint64_t v46 = (double (*)(uint64_t))v4[12];
        uint64_t v45 = v4[13];
        uint64_t v47 = swift_retain(v45);
        double v48 = v46(v47);
        swift_release(v45);
        id v49 = sub_100170614();
        uint64_t v50 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
        *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        *(void *)(v51 + 56) = &type metadata for Double;
        *(void *)(v51 + 64) = &protocol witness table for Double;
        *(double *)(v51 + 32) = v48;
        static os_log_type_t.default.getter(v51);
        os_log(_:dso:log:type:_:)( "Deferring end interruption by %.2f sec, since descriptor has an interruption deferred end descriptor and there is no pending expedited end interruption",  v57);

        uint64_t v52 = swift_bridgeObjectRelease(v51);
        unsigned __int8 v53 = v61;
        static DispatchWallTime.now()(v52);
        uint64_t v54 = v63;
        + infix(_:_:)(v53, v48);
        uint64_t v55 = *(void (**)(char *, uint64_t))(v62 + 8);
        uint64_t v56 = v64;
        v55(v53, v64);
        OS_dispatch_queue.asyncAfter(wallDeadline:execute:)(v54, v43);
        swift_release(v43);
        v55(v54, v56);
      }

      sub_10020E8B0(v25, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10020B1BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void **)(v1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(sub_100201270(v4, v5, v6) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    sub_100212C48();
    sub_10020CEA4(1LL);
    sub_1002A2470();
    sub_1002529B8();
    sub_1002A008C();
    swift_beginAccess(v1 + 88, v11, 1LL, 0LL);
    uint64_t v9 = *(void *)(v1 + 88);
    *(void *)(v1 + 8_Block_object_dispose(va, 8) = &_swiftEmptySetSingleton;
    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10020B2C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(a1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(sub_100201270(v4, v5, v6) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0LL;
    swift_release(v9);
    return sub_10027BA14(0);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10020B394(uint64_t a1, uint64_t a2, char a3)
{
  void (*v21)(void *__return_ptr, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void *__return_ptr, uint64_t);
  uint64_t v47;
  char v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ObjectType;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  char v114;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE v131[160];
  void v132[9];
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[160];
  _BYTE v136[72];
  uint64_t v137;
  _BYTE v138[24];
  _BYTE v139[8];
  uint64_t v140;
  int v141[40];
  uint64_t v142;
  _BYTE v143[160];
  void v144[20];
  void v145[20];
  void v146[20];
  id v147[20];
  void v148[20];
  _BYTE v149[160];
  void v150[20];
  void v151[20];
  void v152[20];
  void v153[20];
  _BYTE v154[160];
  int v155[40];
  _BYTE v156[160];
  int v157;
  void v158[2];
  void v159[2];
  _BYTE __src[160];
  uint64_t v161;
  id v162[2];
  _BYTE v163[8];
  _BYTE v164[160];
  _BYTE __dst[153];
  uint64_t v4 = v3;
  sub_10020E9EC(a2, (uint64_t)v149, (uint64_t *)&unk_10044B7C0);
  sub_10020E9EC((uint64_t)v149, (uint64_t)v164, (uint64_t *)&unk_10044B7C0);
  memcpy(__dst, (const void *)a1, sizeof(__dst));
  uint64_t v8 = sub_10020DBE8((int *)a1);
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v9 = (uint64_t)v8;
  sub_10020E9EC(a2, (uint64_t)v156, (uint64_t *)&unk_10044B7C0);
  if (sub_1001E42E0((uint64_t)v156) == 1)
  {
    memcpy(__src, __dst, 0x99uLL);
    ScreenSharingActivityManager.carPlayStartedConnectionAttempt()();
    sub_10020E9EC((uint64_t)__src, (uint64_t)v141, (uint64_t *)&unk_10044B7C0);
    sub_10020E9EC((uint64_t)v164, (uint64_t)&v142, (uint64_t *)&unk_10044B7C0);
    sub_1001DE884(a1);
    sub_10020E8D8((uint64_t)v141);
LABEL_4:
    sub_1001DE6BC(__src);
    sub_10020E9EC((uint64_t)__src, (uint64_t)v143, (uint64_t *)&unk_10044B7C0);
    uint64_t v10 = 0LL;
    goto LABEL_11;
  }

  sub_10020E9EC((uint64_t)v164, (uint64_t)__src, (uint64_t *)&unk_10044B7C0);
  memcpy(v141, __src, 0x99uLL);
  sub_1001DE884(a1);
  sub_10020E840(a2);
  char v11 = sub_1002956A4(a1, (uint64_t)v141);
  sub_10020E840(a2);
  sub_10020EB3C(a1);
  if ((v11 & 1) != 0 && (a3 & 1) == 0)
  {
    swift_release(v9);
LABEL_8:
    id v12 = sub_100170614();
    uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    memcpy(__src, (const void *)a1, 0x99uLL);
    sub_1001DE884(a1);
    uint64_t v15 = String.init<A>(reflecting:)(__src, &type metadata for AudioInterruptionDescriptor);
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v18 = sub_1001B2330();
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    uint64_t v19 = static os_log_type_t.default.getter(v18);
    os_log(_:dso:log:type:_:)("No provider returned for descriptor %@", 38LL, 2LL, &_mh_execute_header, v12, v19, v14);

    return swift_bridgeObjectRelease(v14);
  }

  sub_1001DE884((uint64_t)__src);
  uint64_t v10 = sub_10020DBE8(v141);
  sub_10020E840(a2);
  if (!v10) {
    goto LABEL_4;
  }
  uint64_t v21 = (void (*)(void *__return_ptr, uint64_t))v10[9];
  uint64_t v22 = swift_retain(v10);
  v21(v144, v22);
  sub_10020E9EC((uint64_t)v144, (uint64_t)v155, (uint64_t *)&unk_10044B7C0);
  swift_release(v10);
  sub_10020E9EC((uint64_t)v155, (uint64_t)v143, (uint64_t *)&unk_10044B7C0);
LABEL_11:
  sub_10020E9EC((uint64_t)v143, (uint64_t)__src, (uint64_t *)&unk_10044B7C0);
  (*(void (**)(uint64_t))(v9 + 24))(a1);
  sub_10020E9EC((uint64_t)v143, (uint64_t)v139, (uint64_t *)&unk_10044B7C0);
  uint64_t v130 = v9;
  uint64_t v23 = AVAudioSessionCategoryRingtone;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
  uint64_t v26 = v25;
  char v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  if (v24 == v27 && v26 == v28)
  {
    uint64_t v32 = swift_bridgeObjectRelease_n(v26, 2LL);
  }

  else
  {
    uint64_t v30 = v28;
    uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0LL);
    swift_bridgeObjectRelease(v26);
    uint64_t v32 = swift_bridgeObjectRelease(v30);
    if ((v31 & 1) == 0) {
      goto LABEL_29;
    }
  }

  (*(void (**)(void *__return_ptr, uint64_t))(v9 + 72))(v145, v32);
  sub_10020E9EC((uint64_t)v145, (uint64_t)v154, (uint64_t *)&unk_10044B7C0);
  if (sub_1001E42E0((uint64_t)v154) != 1)
  {
    memcpy(v155, v154, 0x99uLL);
    sub_10020EAC8(v155, (uint64_t)&v157);
    sub_10020EAC8(&v157, (uint64_t)v163);
    if (v163[5] == 1 && (v155[13] & 0x100) != 0)
    {
      uint64_t v33 = v10;
      unint64_t v34 = [*(id *)(v4 + 32) conversationManager];
      uint64_t v35 = [v34 activeConversations];

      uint64_t v36 = sub_1001B4B94(0LL, &qword_100448F90, &OBJC_CLASS___TUConversation_ptr);
      sub_10020EB04((uint64_t)&qword_100447DF0);
      uint64_t v38 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v35, v36, v37);

      sub_10023D95C();
      uint64_t v40 = v39;
      swift_bridgeObjectRelease(v38);
      if (v40)
      {
        if ([v40 state] == (id)3)
        {
          uint64_t v41 = [v40 activitySessions];
          uint64_t v42 = sub_1001B4B94(0LL, &qword_100449418, &OBJC_CLASS___TUConversationActivitySession_ptr);
          sub_10020EB04((uint64_t)&unk_100449420);
          uint64_t v43 = v42;
          uint64_t v9 = v130;
          uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v41, v43, v44);

          swift_retain(v4);
          sub_100208828(v45, v4);

          sub_10020E840((uint64_t)v145);
          swift_bridgeObjectRelease(v45);
        }

        else
        {
          sub_10020E840((uint64_t)v145);
        }
      }

      else
      {
        sub_10020E840((uint64_t)v145);
      }

      uint64_t v10 = v33;
    }

    else
    {
      sub_10020E840((uint64_t)v145);
    }
  }

void sub_10020C12C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10020C150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AudioDescriptor(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001DBD08(a3, (uint64_t)v9, type metadata accessor for AudioDescriptor);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  unint64_t v12 = (v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = swift_allocObject(&unk_1003E1358, v12 + 8, v10 | 7);
  sub_1001DBCDC((uint64_t)v9, v13 + v11, type metadata accessor for AudioDescriptor);
  *(void *)(v13 + v12) = a1;
  swift_retain(a1);
  sub_1002A1F64(a2, (uint64_t)sub_10020F06C, v13);
  return swift_release(v13);
}

void sub_10020C248(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1001AFF14(&qword_100447488);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AudioDescriptor(0LL);
  sub_10020F1FC(a2 + *(int *)(v9 + 20), (uint64_t)v5, &qword_100447488);
  if (sub_1001AB0AC((uint64_t)v5, 1LL, v6) == 1)
  {
    sub_1002011C8((uint64_t)v5, &qword_100447488);
  }

  else
  {
    sub_1001DBCDC((uint64_t)v5, (uint64_t)v8, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
    id v10 = sub_100170614();
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    uint64_t v13 = UUID.uuidString.getter(v12);
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v16 = sub_1001B2330();
    *(void *)(v12 + 64) = v16;
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "Sound playback completed and we had a deferred end descriptor, so expediting end interruption for call with UUID %@",  115LL,  2LL,  &_mh_execute_header,  v10,  v17,  v12);

    swift_bridgeObjectRelease(v12);
    sub_10020C408((uint64_t)v8);
    sub_10020E8B0((uint64_t)v8, type metadata accessor for AudioInterruptionDeferredEndDescriptor);
  }

uint64_t sub_10020C408(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v32 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = sub_100170614();
  uint64_t v10 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v12 = UUID.uuidString.getter(v11);
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_1001B2330();
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("callUUID: %@", 12LL, 2LL, &_mh_execute_header, v9, v16, v11);

  swift_bridgeObjectRelease(v11);
  uint64_t v17 = v31[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  uint64_t v20 = swift_allocObject(&unk_1003E10D8, v19 + v8, v18 | 7);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v20 + v19,  (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  aBlock[4] = sub_10020D5E8;
  uint64_t v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1002356BC;
  void aBlock[3] = &unk_1003E10F0;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain(v17);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_10020F18C((uint64_t)&qword_100447CB0);
  uint64_t v24 = v23;
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
  sub_10020F1C4((uint64_t)&qword_100447CC0);
  uint64_t v26 = v32;
  uint64_t v27 = v25;
  uint64_t v28 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v27, v29, v33, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v5, v26);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v35);
  return swift_release(v39);
}

uint64_t sub_10020C708(uint64_t a1)
{
  uint64_t v2 = swift_allocObject(&unk_1003E1128, 24LL, 7LL);
  swift_weakInit(v2 + 16, a1);
  swift_retain(v2);
  sub_1002528FC((uint64_t)sub_10020EC48, v2);
  return swift_release_n(v2, 2LL);
}

uint64_t sub_10020C778(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  id v13 = sub_100170614();
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)( "speechSynthesizerEventHandler invoked",  37LL,  2LL,  &_mh_execute_header,  v13,  v14,  _swiftEmptyArrayStorage);

  swift_beginAccess(a3, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v25 = *(void *)(result + 16);
    uint64_t v17 = (void *)swift_allocObject(&unk_1003E12E0, 40LL, 7LL);
    v17[2] = a1;
    void v17[3] = a2;
    void v17[4] = v16;
    aBlock[4] = sub_10020EC88;
    uint64_t v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1002356BC;
    void aBlock[3] = &unk_1003E12F8;
    uint64_t v18 = v7;
    uint64_t v19 = _Block_copy(aBlock);
    sub_10020EC94(a1, a2);
    uint64_t v20 = swift_retain(v16);
    static DispatchQoS.unspecified.getter(v20);
    uint64_t v27 = _swiftEmptyArrayStorage;
    sub_10020F18C((uint64_t)&qword_100447CB0);
    uint64_t v22 = v21;
    uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
    sub_10020F1C4((uint64_t)&qword_100447CC0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v23, v24, v6, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v26);
    swift_release(v16);
    return swift_release(v29);
  }

  return result;
}

void sub_10020C9E4(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a1 >= 2)
  {
    if ((*(_BYTE *)(*(void *)(a3 + 56) + OBJC_IVAR____TtC13callservicesd17HoldMusicProvider_activeDescriptor) & 1) != 0)
    {
      swift_retain(a2);
      id v8 = sub_100170614();
      uint64_t v5 = static os_log_type_t.default.getter(v8);
      os_log(_:dso:log:type:_:)( "Hold music provider speech synthesizer finished utterance, but hold music provider is no longer active, so not i nvoking playback continuation",  141LL,  2LL,  &_mh_execute_header,  v8,  v5,  _swiftEmptyArrayStorage);
      sub_10020ECA8((unint64_t)a1, a2);
    }

    else
    {
      swift_retain(a2);
      id v6 = sub_100170614();
      uint64_t v7 = static os_log_type_t.default.getter(v6);
      os_log(_:dso:log:type:_:)( "Hold music provider speech synthesizer finished utterance, and hold music provider is still active, so invoking playback continuation",  133LL,  2LL,  &_mh_execute_header,  v6,  v7,  _swiftEmptyArrayStorage);

      a1();
      sub_10020ECA8((unint64_t)a1, a2);
    }
  }

uint64_t sub_10020CB0C()
{
  return sub_1002A0038();
}

int64_t sub_10020CB2C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + 16);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  int64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  __break(1u);
  return result;
}

int64_t sub_10020CBE4()
{
  int64_t result = sub_10020D728();
  int64_t v1 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    int64_t result = _CocoaArrayWrapper.endIndex.getter(result);
    uint64_t v2 = result;
    if (!result) {
      return swift_bridgeObjectRelease(v1);
    }
  }

  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v2) {
      return swift_bridgeObjectRelease(v1);
    }
  }

  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }

      else
      {
        uint64_t v4 = *(void *)(v1 + 8 * i + 32);
        swift_retain(v4);
      }

      (*(void (**)(void))(v4 + 56))();
      swift_release(v4);
    }

    return swift_bridgeObjectRelease(v1);
  }

  __break(1u);
  return result;
}

uint64_t sub_10020CCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6);
  uint64_t v10 = &v25[-v9 - 8];
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    swift_retain(*(void *)(a1 + 80));
    id v12 = sub_100170614();
    uint64_t v13 = static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:type:_:)( "Expediting deferred end interruption work item",  46LL,  2LL,  &_mh_execute_header,  v12,  v13,  _swiftEmptyArrayStorage);

    uint64_t v14 = dispatch thunk of DispatchWorkItem.perform()();
    dispatch thunk of DispatchWorkItem.cancel()(v14);
    return swift_release(v11);
  }

  else
  {
    id v16 = sub_100170614();
    uint64_t v17 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    uint64_t v19 = UUID.uuidString.getter(v18);
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    unint64_t v22 = sub_1001B2330();
    *(void *)(v18 + 64) = v22;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:type:_:)( "Attempted to expedite deferred end interruption block prematurely, so pending the UUID %@",  89LL,  2LL,  &_mh_execute_header,  v16,  v23,  v18);

    swift_bridgeObjectRelease(v18);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    swift_beginAccess(a1 + 88, v25, 33LL, 0LL);
    sub_10024AFCC();
    swift_endAccess(v25);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  }

int64_t sub_10020CEA4(uint64_t a1)
{
  int64_t result = sub_10020D728();
  int64_t v4 = result;
  if (!((unint64_t)result >> 62))
  {
    uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease(v4);
LABEL_20:
    swift_beginAccess(v1 + 48, v12, 33LL, 0LL);
    sub_1001AFF14(qword_100449430);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    return swift_endAccess(v12);
  }

  if (result >= 0) {
    result &= 0xFFFFFFFFFFFFFF8uLL;
  }
  int64_t result = _CocoaArrayWrapper.endIndex.getter(result);
  uint64_t v5 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v11 = v1;
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      }

      else
      {
        uint64_t v7 = *(void *)(v4 + 8 * i + 32);
        swift_retain(v7);
      }

      (*(void (**)(void *__return_ptr))(v7 + 72))(v13);
      sub_10020E9EC((uint64_t)v13, (uint64_t)v14, (uint64_t *)&unk_10044B7C0);
      if (sub_1001E42E0((uint64_t)v14) == 1)
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
      }

      else
      {
        uint64_t v8 = v15;
        uint64_t v9 = v16;
        swift_unknownObjectRetain(v15);
        sub_10020E840((uint64_t)v13);
      }

      (*(void (**)(uint64_t))(v7 + 40))(a1);
      if (v8)
      {
        uint64_t ObjectType = swift_getObjectType(v8);
        swift_unknownObjectRetain(v8);
        sub_1002954D8(0, ObjectType, v9);
        swift_release(v7);
        swift_unknownObjectRelease_n(v8, 2LL);
      }

      else
      {
        swift_release(v7);
      }
    }

    swift_bridgeObjectRelease(v4);
    uint64_t v1 = v11;
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

uint64_t sub_10020D06C()
{
  return sub_10027BA14(1);
}

void sub_10020D098()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    goto LABEL_7;
  }

  uint64_t v1 = v0;
  v5[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionInterruptionTypeKey);
  v5[1] = v2;
  AnyHashable.init<A>(_:)(v6, v5, &type metadata for String, &protocol witness table for String);
  sub_1001CA108((uint64_t)v6, v1, &v7);
  swift_bridgeObjectRelease(v1);
  sub_1001D8504((uint64_t)v6);
  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_1002011C8((uint64_t)&v7, (uint64_t *)&unk_1004474B0);
    return;
  }

  if (swift_dynamicCast(v6, &v7, (char *)&type metadata for Any + 8, &type metadata for UInt, 6LL))
  {
    if (!v6[0])
    {
      id v3 = sub_100170614();
      uint64_t v4 = static os_log_type_t.default.getter(v3);
      os_log(_:dso:log:type:_:)( "Other interruption ended so re-interrupting if necessary",  56LL,  2LL,  &_mh_execute_header,  v3,  v4,  _swiftEmptyArrayStorage);

      sub_10027BA14(1);
    }
  }

id sub_10020D1C0(void *a1)
{
  uint64_t v2 = type metadata accessor for EmptyDescriptorProvider();
  uint64_t inited = swift_initStackObject(v2, v28);
  uint64_t v24 = swift_initStackObject(v2, v27);
  type metadata accessor for AudioResolver(0LL);
  uint64_t v4 = v1;
  id v23 = sub_10027B64C();
  uint64_t v5 = type metadata accessor for AudioInterruptionProviderFactory();
  uint64_t v6 = sub_1001C7370(v5, 16LL);
  id v7 = [(id)objc_opt_self(TUAudioSystemController) sharedAudioSystemController];
  id v8 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  uint64_t v9 = sub_1001AFF14(&qword_1004493F0);
  sub_1001C7370(v9, 64LL);
  unint64_t v22 = sub_10020D614(v6, v7, v8);
  uint64_t v10 = type metadata accessor for RingtoneProvider();
  sub_1001C7370(v10, 96LL);
  uint64_t v11 = sub_100211BD8();
  uint64_t v12 = type metadata accessor for SoundProvider(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = sub_1002A1F10();
  id v14 = [objc_allocWithZone((Class)type metadata accessor for HoldMusicProvider()) init];
  uint64_t v15 = type metadata accessor for DiscoveryModeProvider();
  uint64_t v16 = sub_1001C7370(v15, 16LL);
  id v17 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v18 = (void *)sub_100208B4C();
  uint64_t v19 = sub_1001AFF14(&qword_1004493F8);
  sub_1001C7370(v19, 176LL);
  swift_retain(inited);
  swift_retain(v24);
  *(void *)&v4[OBJC_IVAR___CSDAudioController_audioController] = sub_100208D10( (uint64_t)v23,  (uint64_t)v22,  inited,  (uint64_t)v11,  v13,  v14,  v24,  v16,  v17,  v18);

  v26.receiver = v4;
  v26.super_class = (Class)type metadata accessor for CSDAudioController();
  id v20 = objc_msgSendSuper2(&v26, "init");
  swift_release(inited);

  return v20;
}

void sub_10020D424(uint64_t a1)
{
}

void sub_10020D4E4()
{
}

id sub_10020D51C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSDAudioController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CSDAudioController()
{
  return objc_opt_self(&OBJC_CLASS___CSDAudioController);
}

uint64_t sub_10020D57C()
{
  uint64_t v1 = sub_1001B1234();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  sub_10020F584();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10020D5E8()
{
  return sub_10020F148((uint64_t (*)(void))&type metadata accessor for UUID, sub_10020CCA0);
}

uint64_t sub_10020D5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10020D60C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_10020D614(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  void v4[6] = &_swiftEmptyDictionarySingleton;
  _OWORD v4[2] = a1;
  void v4[3] = a2;
  void v4[4] = a3;
  id v8 = (void *)objc_opt_self(&OBJC_CLASS___AVAudioSession);
  swift_retain(a1);
  id v9 = a2;
  id v10 = a3;
  id v11 = [v8 sharedInstance];
  uint64_t v12 = type metadata accessor for AVAudioSessionInterruptionProvider();
  swift_allocObject(v12, 217LL, 7LL);
  v4[5] = sub_1001E20B4((uint64_t)v11, 1);
  uint64_t v13 = type metadata accessor for AVAudioClientInterruptionProvider();
  uint64_t v14 = swift_allocObject(v13, 169LL, 7LL);
  sub_1001DE6BC(v16);
  sub_10020E9EC((uint64_t)v16, v14 + 16, (uint64_t *)&unk_10044B7C0);
  swift_release(a1);

  void v4[7] = v14;
  return v4;
}

unint64_t sub_10020D728()
{
  uint64_t v1 = v0;
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for AnyAudioInterruptionProvider();
  swift_allocObject(v3, 88LL, 7LL);
  uint64_t v4 = sub_1002084D4(v2, (uint64_t)sub_10020E598, (uint64_t)sub_10020E59C, (uint64_t)sub_10020E5A0, (uint64_t)sub_10020E5A4);
  uint64_t v5 = swift_retain(v2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  unint64_t v7 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v6 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v7 >= v6 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1LL);
  }
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8, v9, v10, v11, v12, v13, v14, v15);
  swift_beginAccess(v0 + 48, v43, 0LL, 0LL);
  uint64_t v16 = *(void *)(v0 + 48);
  uint64_t v17 = swift_bridgeObjectRetain(v16);
  uint64_t v18 = sub_1002085BC(v17);
  swift_bridgeObjectRelease(v16);
  if (v18 < 0 || (v18 & 0x4000000000000000LL) != 0)
  {
    sub_1001E7E04(v18);
    uint64_t v26 = v41;
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t v26 = v18 & 0xFFFFFFFFFFFFFF8LL;
  }

  sub_1002900E4(v26, v19, v20, v21, v22, v23, v24, v25, v42);
  uint64_t v27 = *(void *)(v1 + 56);
  swift_allocObject(v3, 88LL, 7LL);
  uint64_t v28 = sub_1002084D4( v27,  (uint64_t)sub_10020E584,  (uint64_t)sub_10020E588,  (uint64_t)sub_10020E58C,  (uint64_t)sub_10020E590);
  uint64_t v29 = swift_retain(v27);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
  unint64_t v31 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v30 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v31 >= v30 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1LL);
  }
  uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
  specialized Array._endMutation()(v32, v33, v34, v35, v36, v37, v38, v39);
  return v44;
}

uint64_t sub_10020D914(int *a1)
{
  uint64_t result = sub_10020EAC8(&v26, (uint64_t)&v27);
  if ((v29 & 1) == 0)
  {
    if (v28 == 1)
    {
      uint64_t v3 = *(void *)(v1 + 40);
    }

    else
    {
      uint64_t v4 = v27;
      uint64_t v5 = v1 + 48;
      swift_beginAccess(v1 + 48, v25, 32LL, 0LL);
      uint64_t v6 = *(void *)(v1 + 48);
      if (!*(void *)(v6 + 16) || (sub_1001D8ED4(v4), (v8 & 1) == 0))
      {
        swift_endAccess(v25);
        uint64_t v9 = sub_1001AFF14((uint64_t *)&unk_100447E30);
        uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
        *((void *)&v24 + 1) = 2LL;
        *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        *(void *)(v10 + 56) = &type metadata for UInt32;
        *(void *)(v10 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v10 + 32) = v4;
        sub_1001B4B94(0LL, (unint64_t *)&unk_10044C050, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v11 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter(v11);
        os_log(_:dso:log:type:_:)( "No existing proxy AVAudioSession interruption provider for ID %u, creating a new one",  1);
        swift_bridgeObjectRelease(v10);

        uint64_t v12 = sub_1001B92F4(v4);
        if (v12)
        {
          uint64_t v3 = v12;
          swift_retain_n(v12, 2LL);
          id v13 = sub_100170614();
          uint64_t v14 = swift_allocObject(v9, 72LL, 7LL);
          *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
          v25[0] = v3;
          uint64_t v15 = sub_1001AFF14(&qword_100449428);
          uint64_t v16 = Optional.debugDescription.getter(v15);
          uint64_t v18 = v17;
          *(void *)(v14 + 56) = &type metadata for String;
          unint64_t v19 = sub_1001B2330();
          *(void *)(v14 + 64) = v19;
          *(void *)(v14 + 32) = v16;
          *(void *)(v14 + 40) = v18;
          uint64_t v20 = static os_log_type_t.default.getter(v19);
          os_log(_:dso:log:type:_:)( "Created AVAudioSession interruption provider %@",  47LL,  2LL,  &_mh_execute_header,  v13,  v20,  v14);

          swift_bridgeObjectRelease(v14);
          swift_beginAccess(v5, v25, 33LL, 0LL);
          sub_1001FE5C8(v3, v4);
          swift_endAccess(v25);
          swift_release(v3);
        }

        else
        {
          id v21 = sub_100170614();
          static os_log_type_t.error.getter(v21, v22);
          uint64_t v23 = swift_allocObject(v9, 72LL, 7LL);
          *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
          *(void *)(v23 + 56) = &type metadata for UInt32;
          *(void *)(v23 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v23 + 32) = v4;
          os_log(_:dso:log:type:_:)("Error retrieving AVAudioSession provider with ID %u", (_DWORD)v24);

          swift_bridgeObjectRelease(v23);
          return 0LL;
        }

        return v3;
      }

      uint64_t v3 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      swift_endAccess(v25);
    }

    swift_retain(v3);
    return v3;
  }

  __break(1u);
  return result;
}

void *sub_10020DBE8(int *a1)
{
  if ((v14[5] & 1) != 0)
  {
    uint64_t v3 = *(void *)(v1 + 56);
    uint64_t v4 = type metadata accessor for AnyAudioInterruptionProvider();
    swift_allocObject(v4, 88LL, 7LL);
    uint64_t v5 = swift_retain(v3);
    uint64_t v6 = (uint64_t (*)(void *))sub_10020E584;
    uint64_t v7 = sub_10020E588;
    char v8 = sub_10020E58C;
    uint64_t v9 = sub_10020E590;
  }

  else
  {
    uint64_t result = (void *)sub_10020D914(a1);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for AnyAudioInterruptionProvider();
    swift_allocObject(v12, 88LL, 7LL);
    uint64_t v6 = sub_10020E598;
    uint64_t v7 = sub_10020E59C;
    char v8 = sub_10020E5A0;
    uint64_t v9 = sub_10020E5A4;
    uint64_t v5 = (uint64_t)v11;
  }

  return sub_1002084D4(v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9);
}

uint64_t sub_10020DCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = sub_1001E42E0((uint64_t)v24);
  int v9 = v24[49];
  sub_10020E9EC(a3, (uint64_t)v23, (uint64_t *)&unk_10044B7C0);
  int v10 = sub_1001E42E0((uint64_t)v23);
  BOOL v11 = v10 == 1;
  if (v10 == 1)
  {
    if (v8 != 1) {
      BOOL v11 = 0;
    }
  }

  else if (v8 != 1)
  {
    BOOL v11 = ((v9 ^ v23[49]) & 1) == 0;
  }

  sub_10020E9EC(a1, (uint64_t)__src, (uint64_t *)&unk_10044B7C0);
  if (sub_1001E42E0((uint64_t)__src) == 1)
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    memcpy(__dst, __src, 0x99uLL);
    sub_10020E9EC((uint64_t)&__dst[72], (uint64_t)v25, &qword_100449410);
    sub_10020E9EC((uint64_t)v25, (uint64_t)&v28, &qword_100449410);
    uint64_t v12 = v28;
  }

  sub_10020E9EC(a3, (uint64_t)v19, (uint64_t *)&unk_10044B7C0);
  if (sub_1001E42E0((uint64_t)v19) == 1)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    memcpy(v20, v19, 0x99uLL);
    sub_10020E9EC((uint64_t)&v20[72], (uint64_t)v26, &qword_100449410);
    sub_10020E9EC((uint64_t)v26, (uint64_t)&v27, &qword_100449410);
    uint64_t v13 = v27;
  }

  BOOL v14 = (v12 | v13) == 0;
  if (v12 && v13) {
    BOOL v14 = v12 == v13;
  }
  if (a2)
  {
    uint64_t v15 = *(void *)(a2 + 16);
    swift_unknownObjectRetain(v15);
    if (!a4)
    {
      if (!v15) {
        return !v11 || !v14;
      }
      goto LABEL_26;
    }
  }

  else
  {
    if (!a4) {
      return !v11 || !v14;
    }
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = *(void *)(a4 + 16);
  swift_unknownObjectRetain(v16);
  if (!v15)
  {
    if (v16)
    {
      uint64_t v18 = v16;
      goto LABEL_29;
    }

    return !v11 || !v14;
  }

  if (!v16)
  {
LABEL_26:
    uint64_t v18 = v15;
LABEL_29:
    swift_unknownObjectRelease(v18);
    return 1LL;
  }

  swift_unknownObjectRelease(v15);
  swift_unknownObjectRelease(v16);
  return v16 != v15 || !v11 || !v14;
}

uint64_t sub_10020DEEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  int v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(void *__return_ptr, uint64_t))(a1 + 72))(v29, v8);
  sub_10020E9EC((uint64_t)v29, (uint64_t)v30, (uint64_t *)&unk_10044B7C0);
  uint64_t result = sub_1001E42E0((uint64_t)v30);
  if ((_DWORD)result != 1)
  {
    uint64_t v12 = v31;
    if (v31)
    {
      uint64_t v24 = v3;
      uint64_t v13 = v32;
      uint64_t ObjectType = swift_getObjectType(v31);
      uint64_t v25 = v6;
      uint64_t v15 = ObjectType;
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
      swift_unknownObjectRetain(v12);
      uint64_t v17 = (void *)v16(v15, v13);
      swift_unknownObjectRelease(v12);
      v27[4] = sub_10020EBB8;
      uint64_t v28 = a1;
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 1107296256LL;
      _OWORD v27[2] = sub_1002356BC;
      v27[3] = &unk_1003E1280;
      uint64_t v18 = _Block_copy(v27);
      uint64_t v19 = swift_retain(a1);
      static DispatchQoS.unspecified.getter(v19);
      int v26 = _swiftEmptyArrayStorage;
      sub_10020F18C((uint64_t)&qword_100447CB0);
      uint64_t v21 = v20;
      uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
      sub_10020F1C4((uint64_t)&qword_100447CC0);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v2, v21);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v5);
      _Block_release(v18);

      sub_10020E840((uint64_t)v29);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v25);
      return swift_release(v28);
    }

    else
    {
      return sub_10020E840((uint64_t)v29);
    }
  }

  return result;
}

void sub_10020E150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = swift_unknownObjectRetain(v1);
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v4 = (void *)sub_10020EBC0(v1, ObjectType, (uint64_t)&protocol descriptor for AudioInterruptionProvider);
  if (v4 && (uint64_t v5 = sub_10020E3C8(v4), v6))
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    uint64_t v9 = sub_1001AFF14(&qword_100447B88);
    uint64_t inited = swift_initStackObject(v9, v30);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CSDCallAudioInterruptionProviderUserInfoKey");
    *(void *)(inited + 40) = v11;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v7;
    *(void *)(inited + 56) = v8;
    Class isa = (Class)Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    swift_unknownObjectRelease(v1);
  }

  else
  {
    swift_unknownObjectRelease(v1);
    Class isa = 0LL;
  }

  id v13 = sub_100170614();
  uint64_t v14 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  uint64_t v31 = @"CSDCallAudioInterruptionPropertiesChangedNotification";
  type metadata accessor for Name(0LL);
  uint64_t v17 = v16;
  uint64_t v18 = @"CSDCallAudioInterruptionPropertiesChangedNotification";
  uint64_t v19 = String.init<A>(reflecting:)(&v31, v17);
  uint64_t v21 = v20;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v22 = sub_1001B2330();
  *(void *)(v15 + 64) = v22;
  *(void *)(v15 + 32) = v19;
  *(void *)(v15 + 40) = v21;
  if (isa)
  {
    uint64_t v31 = (const __CFString *)isa;
    swift_bridgeObjectRetain(isa);
    uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_100447B90);
    uint64_t v24 = String.init<A>(reflecting:)(&v31, v23);
  }

  else
  {
    unint64_t v25 = 0xE300000000000000LL;
    uint64_t v24 = 7104878LL;
  }

  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v22;
  *(void *)(v15 + 72) = v24;
  *(void *)(v15 + 80) = v25;
  uint64_t v26 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:type:_:)( "postAudioInterruptionPropertiesNotification %@ userInfo: %@",  59LL,  2LL,  &_mh_execute_header,  v13,  v26,  v15);

  swift_bridgeObjectRelease(v15);
  id v27 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  if (isa)
  {
    sub_1002A7AFC(isa);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(isa);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
  }

  [v27 postNotificationName:v18 object:0 userInfo:isa];
}

uint64_t sub_10020E3C8(void *a1)
{
  Class = (__objc2_class *)object_getClass(a1);
  if (Class != &OBJC_CLASS____TtC13callservicesd33AVAudioClientInterruptionProvider || a1 == 0LL)
  {
    if (Class != &OBJC_CLASS____TtC13callservicesd34AVAudioSessionInterruptionProvider || a1 == 0LL) {
      return 0LL;
    }
    uint64_t v6 = &off_1003D9770;
  }

  else
  {
    uint64_t v6 = off_1003D9768;
  }

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v6);
}

uint64_t sub_10020E438()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10020E45C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1002090D0(a1, a2, a3, v3);
}

uint64_t sub_10020E464(uint64_t a1)
{
  return sub_100209E50(a1, v1, (void (*)(uint64_t))sub_100209AFC);
}

uint64_t sub_10020E484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_1004474B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020E4CC(uint64_t a1)
{
  return sub_100209E50(a1, v1, (void (*)(uint64_t))sub_100209EB4);
}

uint64_t sub_10020E4EC()
{
  uint64_t v1 = sub_1001C9578();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10020E55C()
{
}

uint64_t sub_10020E57C()
{
  return sub_10020D06C();
}

void sub_10020E590(uint64_t a1@<X8>)
{
}

void sub_10020E5A4(uint64_t a1@<X8>)
{
}

uint64_t sub_10020E5AC()
{
  uint64_t v2 = *(void *)(sub_1001AFF14(&qword_100447498) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  sub_10020F584();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = sub_10020F518();
  if (!sub_10020F58C())
  {
    sub_10020F59C();

    uint64_t v9 = *(void *)(v7 + 40);
    if (v9 != 1) {
      swift_bridgeObjectRelease(v9);
    }
    swift_unknownObjectRelease(*(void *)(v7 + 72));
    swift_bridgeObjectRelease(*(void *)(v7 + 136));
    uint64_t v10 = sub_10020F55C();
    if (!sub_10020F54C(v10))
    {
      uint64_t v11 = sub_1001B1234();
      sub_10020F4F4(v11);
    }

    uint64_t v12 = v7 + *(int *)(v8 + 24);
    uint64_t v13 = sub_10020F510();
    if (!sub_10020F528(v13))
    {
      swift_bridgeObjectRelease(*(void *)(v12 + 8));
      uint64_t v14 = sub_10020F508();
      sub_10020173C(v12 + *(int *)(v1 + 24));
    }

    uint64_t v15 = v7 + *(int *)(v8 + 28);
    uint64_t v16 = sub_1001AFF14(&qword_100447FC0);
    if (!sub_10020F544(v15, v17, v16))
    {
      sub_10020F59C();
      sub_10020F520();
      uint64_t v18 = sub_1001B1234();
    }
  }

  uint64_t v19 = v0 + v6;
  if (!sub_10020F58C())
  {
    sub_10020F59C();

    uint64_t v20 = *(void *)(v19 + 40);
    if (v20 != 1) {
      swift_bridgeObjectRelease(v20);
    }
    swift_unknownObjectRelease(*(void *)(v19 + 72));
    swift_bridgeObjectRelease(*(void *)(v19 + 136));
    uint64_t v21 = sub_10020F55C();
    if (!sub_10020F54C(v21))
    {
      uint64_t v22 = sub_1001B1234();
      sub_10020F4F4(v22);
    }

    uint64_t v23 = v19 + *(int *)(v8 + 24);
    uint64_t v24 = sub_10020F510();
    if (!sub_10020F528(v24))
    {
      swift_bridgeObjectRelease(*(void *)(v23 + 8));
      uint64_t v25 = sub_10020F508();
      sub_10020173C(v23 + *(int *)(v1 + 24));
    }

    uint64_t v26 = v19 + *(int *)(v8 + 28);
    uint64_t v27 = sub_1001AFF14(&qword_100447FC0);
    if (!sub_10020F544(v26, v28, v27))
    {
      sub_10020F53C();
      sub_10020F520();
      sub_1001B1234();
    }
  }

  return sub_10020F444(v0, v5 + v6 + 1, v3 | 7);
}

void sub_10020E7BC()
{
  uint64_t v1 = *(void *)(sub_1001AFF14(&qword_100447498) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  sub_100209408( v0 + ((v2 + 24) & ~v2),  v0 + ((*(void *)(v1 + 64) + v2 + ((v2 + 24) & ~v2)) & ~v2),  *(unsigned __int8 *)(v0 + ((*(void *)(v1 + 64) + v2 + ((v2 + 24) & ~v2)) & ~v2) + *(void *)(v1 + 64)));
  sub_1001AA978();
}

uint64_t sub_10020E818(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_10020E820(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10020E838(a1, a2);
  }
  return a1;
}

uint64_t sub_10020E838(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_10020E840(uint64_t a1)
{
  uint64_t v2 = sub_10020F5A4(a1);
  char v5 = *(_BYTE *)(v1 + 152);
  v3( v2,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88),  *(void *)(v1 + 96),  *(void *)(v1 + 104),  *(void *)(v1 + 112),  *(void *)(v1 + 120),  *(void *)(v1 + 128),  *(void *)(v1 + 136),  *(void *)(v1 + 144),  v5);
  return v1;
}

uint64_t sub_10020E8A8()
{
  return sub_10020B2C8(v0);
}

void sub_10020E8B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_100201554(v2);
  sub_1001AA978();
}

uint64_t sub_10020E8D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  uint64_t v15 = *(void *)(a1 + 160);
  uint64_t v3 = *(void **)(a1 + 176);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208);
  uint64_t v8 = *(void *)(a1 + 216);
  __int128 v13 = *(_OWORD *)(a1 + 240);
  __int128 v14 = *(_OWORD *)(a1 + 224);
  __int128 v11 = *(_OWORD *)(a1 + 272);
  __int128 v12 = *(_OWORD *)(a1 + 256);
  __int128 v10 = *(_OWORD *)(a1 + 288);
  sub_1001DE6C4( *(void *)a1,  *(void **)(a1 + 8),  *(void **)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136));
  sub_1001DE6C4( v15,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1));
  return a1;
}

void sub_10020E9EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10020F574(a1, a2, a3);
  sub_1001DBE58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1001AA978();
}

void *sub_10020EA18(void *a1)
{
  return a1;
}

void *sub_10020EA40(void *a1)
{
  return a1;
}

uint64_t sub_10020EA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_conformsToProtocol2(a2, a3);
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

id *sub_10020EAA0(id *a1)
{
  return a1;
}

uint64_t sub_10020EAC8(int *a1, uint64_t a2)
{
  return a2;
}

void sub_10020EB04(uint64_t a1)
{
  if (!sub_10020F5A4(a1))
  {
    uint64_t v4 = sub_1001B4B94(255LL, v2, v3);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4), v1);
  }

  sub_1001AA978();
}

uint64_t sub_10020EB3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 136);

  sub_1001DE740(v3, v4, v5);
  swift_unknownObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void sub_10020EBB8()
{
}

uint64_t sub_10020EBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_conformsToProtocol2(a2, a3)) {
    return a1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10020EBF8()
{
  return sub_10020CB0C();
}

uint64_t sub_10020EC00()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10020EC24()
{
}

uint64_t sub_10020EC40()
{
  return sub_10020C708(v0);
}

uint64_t sub_10020EC48(unint64_t a1, uint64_t a2)
{
  return sub_10020C778(a1, a2, v2);
}

uint64_t sub_10020EC50()
{
  if (v0[2] >= 2uLL) {
    swift_release(v0[3]);
  }
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10020EC88()
{
}

unint64_t sub_10020EC94(unint64_t result, uint64_t a2)
{
  if (result >= 2) {
    return swift_retain(a2);
  }
  return result;
}

unint64_t sub_10020ECA8(unint64_t result, uint64_t a2)
{
  if (result >= 2) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10020ECC0()
{
  uint64_t v2 = sub_10020F520();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (int *)sub_10020F518();
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v5 + v6 + v9) & ~v9;
  uint64_t v11 = *(void *)(v8 + 64);
  sub_10020F584();
  sub_10020F53C();
  uint64_t v12 = v0 + v5 + *(int *)(v2 + 32);
  uint64_t v13 = sub_1001B1234();
  uint64_t v14 = v0 + v10;
  sub_10020F53C();

  uint64_t v15 = *(void *)(v0 + v10 + 40);
  if (v15 != 1) {
    swift_bridgeObjectRelease(v15);
  }
  swift_unknownObjectRelease(*(void *)(v14 + 72));
  swift_bridgeObjectRelease(*(void *)(v14 + 136));
  uint64_t v16 = v14 + v7[5];
  uint64_t v17 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  uint64_t v18 = v14 + v7[6];
  uint64_t v19 = sub_10020F510();
  if (!sub_10020F4E0(v19))
  {
    uint64_t v26 = v11;
    uint64_t v27 = v10;
    swift_bridgeObjectRelease(*(void *)(v18 + 8));
    uint64_t v20 = v18 + *(int *)(v1 + 20);
    uint64_t v21 = sub_10020F508();
    sub_10020173C(v18 + *(int *)(v1 + 24));
    uint64_t v11 = v26;
    uint64_t v10 = v27;
  }

  uint64_t v22 = v14 + v7[7];
  uint64_t v23 = sub_1001AFF14(&qword_100447FC0);
  if (!sub_10020F544(v22, v24, v23))
  {
  }

  return swift_deallocObject(v0, v10 + v11, v4 | v9 | 7);
}

uint64_t sub_10020EEA0()
{
  uint64_t v1 = *(void *)(sub_10020F520() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_10020F518() - 8) + 80LL);
  return sub_10020C150(*(void *)(v0 + 16), v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_10020EEFC()
{
  uint64_t v3 = (int *)sub_10020F518();
  uint64_t v4 = *((void *)v3 - 1);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = v0 + v6;

  uint64_t v9 = *(void *)(v0 + v6 + 40);
  if (v9 != 1) {
    swift_bridgeObjectRelease(v9);
  }
  swift_unknownObjectRelease(*(void *)(v8 + 72));
  swift_bridgeObjectRelease(*(void *)(v8 + 136));
  uint64_t v10 = v8 + v3[5];
  uint64_t v11 = type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
  if (!sub_1001AB0AC(v10, 1LL, v11))
  {
    uint64_t v12 = sub_1001B1234();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v10, v12);
  }

  uint64_t v13 = v8 + v3[6];
  uint64_t v14 = sub_10020F510();
  if (!sub_10020F430(v14))
  {
    swift_bridgeObjectRelease(*(void *)(v13 + 8));
    uint64_t v15 = v13 + *(int *)(v1 + 20);
    uint64_t v16 = sub_10020F508();
    sub_10020173C(v13 + *(int *)(v1 + 24));
  }

  uint64_t v17 = v8 + v3[7];
  uint64_t v18 = sub_1001AFF14(&qword_100447FC0);
  if (!sub_10020F544(v17, v19, v18))
  {
    sub_10020F53C();
    sub_10020F520();
    sub_1001B1234();
  }

  unint64_t v20 = (v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = v20 + 8;
  swift_release(*(void *)(v0 + v20));
  return sub_10020F444(v0, v21, v5 | 7);
}

void sub_10020F06C(uint64_t a1)
{
}

uint64_t sub_10020F0A0()
{
  uint64_t v1 = sub_10020F510();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_10020F584();
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  uint64_t v6 = sub_10020F508();
  sub_10020173C(v0 + v4 + *(int *)(v1 + 24));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10020F134()
{
  return sub_10020F148( type metadata accessor for RingtoneDescriptor,  (uint64_t (*)(void, uint64_t))sub_10020C12C);
}

uint64_t sub_10020F148(uint64_t (*a1)(void), uint64_t (*a2)(void, uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1(0LL) - 8) + 80LL);
  return a2(*(void *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

void sub_10020F18C(uint64_t a1)
{
  if (!sub_10020F5A4(a1))
  {
    uint64_t v4 = v3;
    uint64_t v5 = v2(255LL);
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }

  sub_1001AA978();
}

void sub_10020F1C4(uint64_t a1)
{
  if (!sub_10020F5A4(a1))
  {
    uint64_t v3 = sub_1001B0504(v2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), v1);
  }

  sub_1001AA978();
}

void sub_10020F1FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10020F574(a1, a2, a3);
  sub_1001DBE58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1001AA978();
}

uint64_t sub_10020F228(void *a1)
{
  return sub_10020F5B0(a1);
}

uint64_t sub_10020F23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 128LL);
}

uint64_t sub_10020F248(uint64_t *a1)
{
  return sub_10020E838(*a1, a1[1]);
}

uint64_t sub_10020F258(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10020E818(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t sub_10020F2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10020E818(*(void *)a2, v4);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_10020E838(v6, v7);
  return a1;
}

__n128 sub_10020F2F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_10020F308(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_10020E838(v4, v5);
  return a1;
}

uint64_t sub_10020F34C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10020F38C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10020F3D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10020F3D8(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for AudioController.ProviderChange(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AudioController.ProviderChange);
}

uint64_t sub_10020F430(uint64_t a1)
{
  return sub_1001AB0AC(v1, 1LL, a1);
}

uint64_t sub_10020F444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10020F45C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10020F470()
{
  return sub_1001AB0AC(v0, 1LL, v1);
}

  ;
}

uint64_t sub_10020F4A4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10020F4B8(uint64_t a1)
{
  return sub_1001AB0AC(v1, 1LL, a1);
}

uint64_t sub_10020F4CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10020F4E0(uint64_t a1)
{
  return sub_1001AB0AC(v1, 1LL, a1);
}

uint64_t sub_10020F4F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_10020F508()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_10020F510()
{
  return type metadata accessor for RingtoneDescriptor(0LL);
}

uint64_t sub_10020F518()
{
  return type metadata accessor for AudioDescriptor(0LL);
}

uint64_t sub_10020F520()
{
  return type metadata accessor for SoundDescriptor(0LL);
}

uint64_t sub_10020F528(uint64_t a1)
{
  return sub_1001AB0AC(v1, 1LL, a1);
}

void sub_10020F53C()
{
}

uint64_t sub_10020F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AB0AC(a1, 2LL, a3);
}

uint64_t sub_10020F54C(uint64_t a1)
{
  return sub_1001AB0AC(v1, 1LL, a1);
}

uint64_t sub_10020F55C()
{
  return type metadata accessor for AudioInterruptionDeferredEndDescriptor(0LL);
}

void sub_10020F56C(uint64_t a1)
{
}

uint64_t sub_10020F574(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001AFF14(a3);
}

uint64_t sub_10020F584()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t sub_10020F58C()
{
  return sub_1001AB0AC(v1, 1LL, v0);
}

void sub_10020F59C()
{
}

uint64_t sub_10020F5A4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10020F5B0(void *a1)
{
  return sub_10020A304(a1, v1);
}

id sub_10020F5BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = &v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_conversation];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_conversation], 0LL);
  uint64_t v8 = &v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_idsGroupSession];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_idsGroupSession], 0LL);
  v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_deferredUpdateRequest] = 2;
  swift_unknownObjectWeakAssign(v7, a1);
  swift_unknownObjectWeakAssign(v8, a2);
  *(void *)&v3[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue] = a3;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for ConversationLocalParticipantBlobTracker();
  id v9 = objc_msgSendSuper2(&v11, "init");
  swift_unknownObjectRelease(a1);

  return v9;
}

void sub_10020F6E0()
{
  uint64_t v6 = v5 - v4;
  uint64_t v7 = *(void **)&v1[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v5 - v4) = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v5 - v4,  enum case for DispatchPredicate.onQueue(_:),  v0);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  if ((v7 & 1) != 0)
  {
    if (qword_100446908 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446908, sub_100258908);
LABEL_3:
  uint64_t v9 = sub_1001B0E98();
  uint64_t v10 = (void *)sub_1001B0D98(v9, (uint64_t)qword_100454138);
  objc_super v11 = v1;
  uint64_t v12 = v10;
  Logger.logObject.getter(v11, v13, v14);
  os_log_type_t v15 = sub_1001B105C();
  if (sub_100211240(v15))
  {
    uint64_t v16 = sub_1001B0E78(22LL);
    uint64_t v17 = sub_1001B0E78(64LL);
    uint64_t v32 = (uint64_t)v11;
    uint64_t v33 = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v18 = type metadata accessor for ConversationLocalParticipantBlobTracker();
    uint64_t v19 = v11;
    uint64_t v20 = String.init<A>(reflecting:)(&v32, v18);
    uint64_t v32 = sub_1001D7CF0(v20, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);

    sub_1001B92A4();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(&v19[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_conversation]);
    if (Strong)
    {
      uint64_t v23 = Strong;
      id v24 = [Strong state];
      swift_unknownObjectRelease(v23);
      uint64_t v32 = (uint64_t)v24;
      type metadata accessor for TUConversationState(0LL);
      uint64_t v26 = String.init<A>(reflecting:)(&v32, v25);
      unint64_t v28 = v27;
    }

    else
    {
      unint64_t v28 = 0xE300000000000000LL;
      uint64_t v26 = 7104878LL;
    }

    uint64_t v32 = sub_1001D7CF0(v26, v28, &v33);
    sub_100211260((uint64_t)&v32, v29, v30, v16 + 22);

    swift_bridgeObjectRelease(v28);
    sub_100211208((void *)&_mh_execute_header, v31, v15, "%s Learned about updated state new-state=%s");
    swift_arrayDestroy(v17, 2LL);
    sub_1001B0E60(v17);
    sub_1001B0E60(v16);
  }

  else
  {
  }

  sub_10020FE28();
  sub_1001B0FF8();
}

void sub_10020F994(char a1)
{
  uint64_t v3 = sub_1001B1098();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B0F00();
  uint64_t v7 = v6 - v5;
  id v8 = *(void **)&v1[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v6 - v5) = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v6 - v5,  enum case for DispatchPredicate.onQueue(_:),  v3);
  id v9 = v8;
  LOBYTE(v_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v7);
  sub_1001D90B0(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  if ((v8 & 1) != 0)
  {
    if (qword_100446908 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446908, sub_100258908);
LABEL_3:
  uint64_t v10 = sub_1001B0E98();
  sub_1001B0D98(v10, (uint64_t)qword_100454138);
  objc_super v11 = v1;
  sub_1001B1224();
  os_log_type_t v12 = sub_1001B105C();
  if (os_log_type_enabled((os_log_t)v1, v12))
  {
    uint64_t v13 = sub_1001B0E78(18LL);
    uint64_t v14 = sub_1001B0E78(32LL);
    uint64_t v22 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v20 = (uint64_t)v11;
    uint64_t v15 = type metadata accessor for ConversationLocalParticipantBlobTracker();
    char v16 = a1;
    uint64_t v17 = v11;
    uint64_t v18 = String.init<A>(reflecting:)(&v20, v15);
    uint64_t v20 = sub_1001D7CF0(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);

    a1 = v16;
    sub_1001B92A4();
    *(_WORD *)(v13 + 12) = 1024;
    LODWORD(v20) = v16 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 4, v13 + 14, v13 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v1,  v12,  "%s received request to update localParticiapntBlob, deliverOverPush: %{BOOL}d",  (uint8_t *)v13,  0x12u);
    sub_1001B0F64(v14);
    sub_1001B0E60(v14);
    sub_1001B0E60(v13);
  }

  else
  {
  }

  sub_10021062C(a1 & 1);
  sub_1001B0FF8();
}

void sub_10020FE28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001B0F00();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1001D9040();
  uint64_t v44 = v9;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  v42[9] = *(void *)(v10 - 8);
  v42[10] = v10;
  __chkstk_darwin(v10);
  sub_1001D9040();
  v42[8] = v11;
  uint64_t v43 = type metadata accessor for DispatchTime(0LL);
  v42[12] = *(void *)(v43 - 8);
  uint64_t v12 = __chkstk_darwin(v43);
  v42[11] = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v42[13] = (char *)v42 - v14;
  uint64_t v15 = sub_1001B1098();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_1001B0F00();
  unint64_t v19 = (void *)(v18 - v17);
  v42[7] = OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue;
  uint64_t v20 = *(void **)&v1[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v18 - v17) = v20;
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))( v18 - v17,  enum case for DispatchPredicate.onQueue(_:),  v15);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) != 0)
  {
    v42[5] = v8;
    if (qword_100446908 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100446908, sub_100258908);
LABEL_3:
  v42[6] = v7;
  uint64_t v22 = sub_1001B0E98();
  uint64_t v23 = sub_1001B0D98(v22, (uint64_t)qword_100454138);
  id v24 = v1;
  sub_10021124C();
  os_log_type_t v25 = sub_1001B105C();
  p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___OS_nw_activity + 32);
  if (sub_100211240(v25))
  {
    v42[1] = v23;
    uint64_t v45 = v1;
    void v42[4] = v6;
    v42[2] = v3;
    v42[3] = v2;
    uint64_t v27 = sub_1001B0E78(22LL);
    uint64_t v28 = sub_1001B0E78(64LL);
    uint64_t aBlock = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v47 = (uint64_t)v24;
    uint64_t v29 = type metadata accessor for ConversationLocalParticipantBlobTracker();
    uint64_t v30 = v24;
    uint64_t v31 = String.init<A>(reflecting:)(&v47, v29);
    uint64_t v47 = sub_1001B0FBC(v31, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v27 + 4, v27 + 12);

    sub_1001B92A4();
    *(_WORD *)(v27 + 12) = 2080;
    int v33 = v30[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_deferredUpdateRequest];
    if (v33 == 2)
    {
      unint64_t v34 = 0xE300000000000000LL;
      uint64_t v35 = 7104878LL;
    }

    else
    {
      LOBYTE(v47) = v33 & 1;
      uint64_t v35 = String.init<A>(reflecting:)(&v47, &unk_1003E14A0);
      unint64_t v34 = v36;
    }

    uint64_t v47 = sub_1001D7CF0(v35, v34, &aBlock);
    sub_100211260((uint64_t)&v47, v37, v38, v27 + 22);

    swift_bridgeObjectRelease(v34);
    sub_100211208((void *)&_mh_execute_header, v39, v25, "%s Evaluating deferredUpdateRequest: %s");
    swift_arrayDestroy(v28, 2LL);
    sub_1001B0E60(v28);
    sub_1001B0E60(v27);

    p_class_meths = &OBJC_PROTOCOL___OS_nw_activity.class_meths;
  }

  else
  {
  }

  uint64_t v40 = p_class_meths[153];
  int v41 = *((unsigned __int8 *)&v40->entrysize + (void)v24);
  if (v41 != 2)
  {
    sub_10021062C(v41 & 1);
    *((_BYTE *)&v40->entrysize + (void)v24) = 2;
  }

  sub_1001B0FF8();
}

void sub_1002105DC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10020FE28();
  }

void sub_10021062C(char a1)
{
  uint64_t v8 = v7 - v6;
  uint64_t v9 = *(void **)&v2[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_queue];
  *(void *)(v7 - sub_100201270(v4, v5, v6) = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v7 - v6,  enum case for DispatchPredicate.onQueue(_:),  v1);
  id v10 = v9;
  uint64_t v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v8, v1);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR___CSDConversationLocalParticipantBlobTracker_conversation]);
  if (!Strong)
  {
    if (qword_100446908 == -1)
    {
LABEL_10:
      uint64_t v29 = sub_1001B0E98();
      sub_1001B0D98(v29, (uint64_t)qword_100454138);
      uint64_t v30 = v2;
      int v33 = (os_log_s *)Logger.logObject.getter(v30, v31, v32);
      os_log_type_t v34 = static os_log_type_t.default.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)sub_1001B0E78(12LL);
        uint64_t v36 = sub_1001B0E78(32LL);
        uint64_t v78 = v36;
        sub_100211218(4.8149e-34);
        uint64_t v76 = (uint64_t)v30;
        uint64_t v37 = type metadata accessor for ConversationLocalParticipantBlobTracker();
        uint64_t v38 = v30;
        uint64_t v39 = String.init<A>(reflecting:)(&v76, v37);
        unint64_t v41 = v40;
        uint64_t v76 = sub_100211228(v39, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, 12LL, v11);

        swift_bridgeObjectRelease(v41);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "%s Couldn't find a reference to the underlying conversation to update the local participant for.",  v35,  0xCu);
        swift_arrayDestroy(v36, 1LL);
        sub_1001B0E60(v36);
        sub_1001B0E60((uint64_t)v35);
      }

      else
      {
      }

      unint64_t v53 = sub_100210F04();
      uint64_t v54 = sub_1001BB4C8((uint64_t)&unk_1003E1618, v53);
      swift_willThrow(v54);
      return;
    }

void sub_100210C80()
{
}

id sub_100210CB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationLocalParticipantBlobTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationLocalParticipantBlobTracker()
{
  return objc_opt_self(&OBJC_CLASS___CSDConversationLocalParticipantBlobTracker);
}

uint64_t sub_100210D80(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t sub_100210E18(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100210E64 + 4 * byte_10037C7F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100210E98 + 4 * byte_10037C7F0[v4]))();
}

uint64_t sub_100210E98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100210EA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100210EA8LL);
  }
  return result;
}

uint64_t sub_100210EB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100210EBCLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_100210EC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100210EC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConversationLocalParticipantBlobTracker.DeferredUpdateRequest()
{
}

id sub_100210EE0()
{
  return [v0 localConversationParticipantWithData];
}

unint64_t sub_100210F04()
{
  unint64_t result = qword_100449500;
  if (!qword_100449500)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C9A0, &unk_1003E1618);
    atomic_store(result, (unint64_t *)&qword_100449500);
  }

  return result;
}

unint64_t sub_100210F40()
{
  unint64_t result = qword_100449508;
  if (!qword_100449508)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C960, &unk_1003E1588);
    atomic_store(result, (unint64_t *)&qword_100449508);
  }

  return result;
}

uint64_t sub_100210F7C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100210FA0()
{
}

uint64_t sub_100210FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100210FB8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100210FC0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10021100C + 4 * byte_10037C7FF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100211040 + 4 * byte_10037C7FA[v4]))();
}

uint64_t sub_100211040(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100211048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100211050LL);
  }
  return result;
}

uint64_t sub_10021105C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100211064LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100211068(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100211070(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConversationLocalParticipantBlobTracker.RecoverableErrors()
{
}

uint64_t sub_100211088(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1002110C8 + 4 * byte_10037C804[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1002110E8 + 4 * byte_10037C809[v4]))();
  }
}

_BYTE *sub_1002110C8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1002110E8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1002110F0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1002110F8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100211100(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100211108(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for ConversationLocalParticipantBlobTracker.FatalErrors()
{
}

unint64_t sub_100211124()
{
  unint64_t result = qword_100449510;
  if (!qword_100449510)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C8D0, &unk_1003E1618);
    atomic_store(result, (unint64_t *)&qword_100449510);
  }

  return result;
}

unint64_t sub_100211164()
{
  unint64_t result = qword_100449518[0];
  if (!qword_100449518[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10037C938, &unk_1003E1588);
    atomic_store(result, qword_100449518);
  }

  return result;
}

uint64_t sub_1002111A0()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1002111A8(uint64_t a1)
{
  *(void *)(v3 - 8_Block_object_dispose(va, 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 88, v3 - 80, v2, v1);
}

void sub_1002111C4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1002111D8(float a1)
{
  float *v1 = a1;
  *(void *)(v3 - 8_Block_object_dispose(va, 8) = v2;
  return type metadata accessor for ConversationLocalParticipantBlobTracker();
}

uint64_t sub_1002111EC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_1002111F8()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_100211208(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
}

void sub_100211218(float a1)
{
  float *v1 = a1;
}

uint64_t sub_100211228(uint64_t a1, unint64_t a2)
{
  return sub_1001D7CF0(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_100211230()
{
  return String.init<A>(reflecting:)(v1 - 88, v0);
}

BOOL sub_100211240(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10021124C()
{
  return Logger.logObject.getter();
}

void sub_100211254(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_100211260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v4, v5, a4);
}

uint64_t sub_10021126C()
{
  return Logger.logObject.getter();
}

uint64_t sub_100211278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, v4, a4, 0LL);
}

uint64_t sub_100211284(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    _OWORD v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[3] = "\b";
    void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = "\b";
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 6LL, v4, a1 + 112);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10021131C()
{
  swift_unknownObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 136LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 144LL)));
  swift_unknownObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 152LL)));
  return v0;
}

uint64_t sub_10021139C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AudioInterruptionProviderPool(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AudioInterruptionProviderPool);
}

uint64_t sub_1002113EC()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_availability);
}

uint64_t sub_10021141C()
{
  return *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestSuccessCount);
}

uint64_t sub_10021144C()
{
  return *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestFailureCount);
}

double sub_10021147C()
{
  return *(double *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_medianRequestDuration);
}

double sub_1002114AC()
{
  return *(double *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_meanRequestDuration);
}

id sub_1002114BC(int a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_DWORD *)&v5[OBJC_IVAR___CSDMomentsUsageReport_availability] = a1;
  *(void *)&v5[OBJC_IVAR___CSDMomentsUsageReport_photoRequestSuccessCount] = a2;
  *(void *)&v5[OBJC_IVAR___CSDMomentsUsageReport_photoRequestFailureCount] = a3;
  *(double *)&v5[OBJC_IVAR___CSDMomentsUsageReport_medianRequestDuration] = a4;
  *(double *)&v5[OBJC_IVAR___CSDMomentsUsageReport_meanRequestDuration] = a5;
  v13.receiver = v5;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t sub_1002115D8()
{
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(96LL);
  v1._object = (void *)0x8000000100371CA0LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v1);
  LODWORD(v14) = *(_DWORD *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_availability);
  type metadata accessor for TUMomentsAvailability(0LL);
  _print_unlocked<A, B>(_:_:)(&v14, v15);
  v2._uint64_t countAndFlagsBits = 0x736563637553202CLL;
  v2._object = (void *)0xED0000203A736573LL;
  String.append(_:)(v2);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestSuccessCount);
  v3._uint64_t countAndFlagsBits = sub_100211824();
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._object = (void *)0xEC000000203A7365LL;
  v5._uint64_t countAndFlagsBits = 0x72756C696146202CLL;
  String.append(_:)(v5);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR___CSDMomentsUsageReport_photoRequestFailureCount);
  v6._uint64_t countAndFlagsBits = sub_100211824();
  BOOL v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._uint64_t countAndFlagsBits = 0x6E616964654D202CLL;
  v8._object = (void *)0xEE00203A72754420LL;
  String.append(_:)(v8);
  sub_100211810(OBJC_IVAR___CSDMomentsUsageReport_medianRequestDuration, v12, v14);
  v9._uint64_t countAndFlagsBits = 0x44206E61654D202CLL;
  v9._object = (void *)0xEC000000203A7275LL;
  String.append(_:)(v9);
  sub_100211810(OBJC_IVAR___CSDMomentsUsageReport_meanRequestDuration, v13, v14);
  v10._uint64_t countAndFlagsBits = 41LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return v15[0];
}

void sub_1002117B8()
{
}

uint64_t type metadata accessor for MomentsUsageReport()
{
  return objc_opt_self(&OBJC_CLASS___CSDMomentsUsageReport);
}

uint64_t sub_100211810@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, ...)
{
  return Double.write<A>(to:)(va, v4, v5, *(double *)(v3 + a1));
}

uint64_t sub_100211824()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

id sub_100211834()
{
  uint64_t v1 = (objc_class *)sub_1001B5DB8();
  Swift::String v2 = &v0[OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying];
  *(void *)Swift::String v2 = 0LL;
  *((void *)v2 + 1) = 0LL;
  v4.receiver = v0;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, "init");
}

void sub_1002118A8()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying + 8);
    uint64_t v3 = sub_1001D8F58();
    v1(v3);
    sub_1001B5D3C((uint64_t)v1, v2);
  }

id sub_100211944()
{
  return [v0 configuration];
}

uint64_t sub_10021196C(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

void sub_1002119A4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v6[4] = a1;
    uint64_t v7 = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256LL;
    _OWORD v6[2] = sub_100211A48;
    void v6[3] = &unk_1003E17E0;
    objc_super v4 = _Block_copy(v6);
    uint64_t v5 = v7;
    swift_retain(a2);
    swift_release(v5);
  }

  else
  {
    objc_super v4 = 0LL;
  }

  [v2 playWithCompletionHandler:v4];
  _Block_release(v4);
}

void sub_100211A48(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t type metadata accessor for RingtoneProviderAlertPlaybackObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver);
}

id sub_100211ACC()
{
  return [v0 stop];
}

id sub_100211ADC(uint64_t a1)
{
  return [(id)objc_opt_self(TLAlert) alertWithConfiguration:a1];
}

id sub_100211B2C()
{
  return [objc_allocWithZone((Class)type metadata accessor for RingtoneProviderAlertPlaybackObserver()) init];
}

uint64_t sub_100211B4C()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 88));
  return v0;
}

uint64_t sub_100211B98()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t type metadata accessor for RingtoneProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13callservicesd16RingtoneProvider);
}

void *sub_100211BD8()
{
  id v1 = [objc_allocWithZone(CNContactStore) init];
  v0[3] = 0LL;
  v0[4] = 0LL;
  v0[2] = v1;
  v0[5] = dispatch_semaphore_create(0LL);
  v0[6] = dispatch_semaphore_create(0LL);
  v0[7] = [objc_allocWithZone(TUFeatureFlags) init];
  v0[8] = sub_100211ADC;
  void v0[9] = 0LL;
  v0[10] = sub_100211B2C;
  v0[11] = 0LL;
  return v0;
}

void sub_100211C5C(uint64_t *a1)
{
  uint64_t v2 = v1;
  id v29 = sub_100211EA0(a1);
  uint64_t v3 = v1[3];
  if (v3)
  {
    uint64_t v4 = v2[4];
    uint64_t v5 = sub_1001B5DB8();
    Swift::String v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    swift_unknownObjectRetain(v3);
    id v7 = (void *)v6(v5, v4);
    swift_unknownObjectRelease(v3);
    sub_1001B4B94(0LL, (unint64_t *)&unk_100449770, &OBJC_CLASS___TLAlertConfiguration_ptr);
    id v28 = v29;
    id v8 = v7;
    char v9 = static NSObject.== infix(_:_:)(v8, v28);

    if ((v9 & 1) != 0)
    {
      id v10 = sub_1001704C4();
      uint64_t v11 = static os_log_type_t.default.getter(v10);
      os_log(_:dso:log:type:_:)( "Requested to begin or update playback, but alert configuration is unchanged so doing nothing",  92LL,  2LL,  &_mh_execute_header,  v10,  v11,  _swiftEmptyArrayStorage);

      uint64_t v12 = v28;
LABEL_6:

      return;
    }
  }

  uint64_t v14 = (uint64_t (*)(id))v2[8];
  uint64_t v13 = v2[9];
  sub_1001D8F58();
  uint64_t v15 = v14(v29);
  uint64_t v17 = v16;
  swift_release(v13);
  if (v15)
  {
    unint64_t v19 = (uint64_t (*)(uint64_t))v2[10];
    uint64_t v18 = v2[11];
    uint64_t v20 = sub_1001D8F58();
    uint64_t v21 = (void *)v19(v20);
    swift_release(v18);
    sub_1002126C0((uint64_t)v21, v15, v17, (uint64_t)v2);

    swift_unknownObjectRelease(v15);
    uint64_t v12 = v29;
    goto LABEL_6;
  }

  id v22 = sub_1001704C4();
  uint64_t v24 = static os_log_type_t.error.getter(v22, v23);
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v26 = sub_1001DEA68(v25);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  *(void *)(v26 + 56) = sub_1001B4B94(0LL, (unint64_t *)&unk_100449770, &OBJC_CLASS___TLAlertConfiguration_ptr);
  *(void *)(v26 + 64) = sub_100213094( &qword_100449780,  (unint64_t *)&unk_100449770,  &OBJC_CLASS___TLAlertConfiguration_ptr);
  *(void *)(v26 + 32) = v29;
  id v27 = v29;
  os_log(_:dso:log:type:_:)( "Alert configuration has changed, but unable to create TLAlert using configuration %@",  84LL,  2LL,  &_mh_execute_header,  v22,  v24,  v26);

  swift_bridgeObjectRelease(v26);
}

id sub_100211EA0(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v94 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v90 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v85 - v5;
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  uint64_t v8 = __chkstk_darwin(v7);
  id v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v85 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v85 - v14;
  unint64_t v16 = a1[1];
  uint64_t v17 = (_OWORD *)&unk_10037B000;
  uint64_t v91 = a1;
  uint64_t v92 = v2;
  if (!v16)
  {
    unint64_t v19 = 0LL;
    goto LABEL_6;
  }

  uint64_t v18 = (char *)sub_100212D6C(*a1, v16);
  unint64_t v19 = v18;
  if (!v18)
  {
LABEL_6:
    unsigned int v93 = 0;
    goto LABEL_14;
  }

  uint64_t v86 = v6;
  uint64_t v89 = v15;
  uint64_t v20 = sub_1001B9DC8(v18, (SEL *)&selRef_sound);
  uint64_t v22 = v21;
  uint64_t v87 = sub_1001B9DC8(v19, (SEL *)&selRef_vibration);
  uint64_t v24 = v23;
  unsigned int v93 = [v19 ignoreMute];
  id v88 = sub_1001704C4();
  uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v26 = swift_allocObject(v25, 192LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B140;
  *(void *)(v26 + 56) = sub_1001B4B94(0LL, &qword_1004497A8, &OBJC_CLASS___CNActivityAlert_ptr);
  *(void *)(v26 + 64) = sub_100213094( (unint64_t *)&unk_1004497B0,  &qword_1004497A8,  &OBJC_CLASS___CNActivityAlert_ptr);
  *(void *)(v26 + 32) = v19;
  id v27 = (char *)v20;
  if (v22)
  {
    uint64_t v95 = v20;
    uint64_t v96 = v22;
    id v28 = v19;
    swift_bridgeObjectRetain(v22);
    uint64_t v29 = String.init<A>(reflecting:)(&v95, &type metadata for String);
    unint64_t v31 = v30;
  }

  else
  {
    uint64_t v32 = v19;
    unint64_t v31 = 0xE300000000000000LL;
    uint64_t v29 = 7104878LL;
  }

  *(void *)(v26 + 96) = &type metadata for String;
  unint64_t v33 = sub_1001B2330();
  *(void *)(v26 + 104) = v33;
  *(void *)(v26 + 72) = v29;
  *(void *)(v26 + 80) = v31;
  if (v24)
  {
    uint64_t v95 = v87;
    uint64_t v96 = v24;
    swift_bridgeObjectRetain(v24);
    uint64_t v34 = String.init<A>(reflecting:)(&v95, &type metadata for String);
  }

  else
  {
    unint64_t v35 = 0xE300000000000000LL;
    uint64_t v34 = 7104878LL;
  }

  *(void *)(v26 + 136) = &type metadata for String;
  *(void *)(v26 + 144) = v33;
  *(void *)(v26 + 112) = v34;
  *(void *)(v26 + 120) = v35;
  LOBYTE(v95) = v93;
  uint64_t v36 = String.init<A>(reflecting:)(&v95, &type metadata for Bool);
  *(void *)(v26 + 176) = &type metadata for String;
  *(void *)(v26 + 184) = v33;
  *(void *)(v26 + 152) = v36;
  *(void *)(v26 + 160) = v37;
  uint64_t v38 = static os_log_type_t.default.getter(v36);
  uint64_t v39 = v88;
  os_log(_:dso:log:type:_:)( "From activity alert %@, using tone %@, vibration %@, bypass ringer %@",  69LL,  2LL,  &_mh_execute_header,  v88,  v38,  v26);
  swift_bridgeObjectRelease(v24);

  swift_bridgeObjectRelease(v26);
  if (v22)
  {
    char v40 = 0;
    uint64_t v41 = 1LL;
    uint64_t v15 = v89;
    uint64_t v17 = (_OWORD *)&unk_10037B000;
    uint64_t v2 = v92;
    unint64_t v19 = v27;
    goto LABEL_18;
  }

  uint64_t v15 = v89;
  a1 = v91;
  uint64_t v2 = v92;
  uint64_t v17 = &unk_10037B000;
  unint64_t v19 = v27;
  Swift::String v6 = v86;
LABEL_14:
  uint64_t v42 = type metadata accessor for RingtoneDescriptor(0LL);
  sub_10021300C((uint64_t)a1 + *(int *)(v42 + 20), (uint64_t)v13);
  if (sub_1001AB0AC((uint64_t)v13, 1LL, v2) == 1)
  {
    sub_100213054((uint64_t)v13);
    uint64_t v22 = 0LL;
    uint64_t v41 = 1LL;
  }

  else
  {
    uint64_t v89 = v19;
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
    v43(v6, v13, v2);
    id v44 = sub_1001704C4();
    uint64_t v45 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
    *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = v17[41];
    URL._bridgeToObjectiveC()(v47);
    uint64_t v49 = v48;
    *(void *)(v46 + 56) = sub_1001B4B94(0LL, &qword_100449798, &OBJC_CLASS___NSURL_ptr);
    uint64_t v50 = sub_100213094(&qword_1004497A0, &qword_100449798, &OBJC_CLASS___NSURL_ptr);
    *(void *)(v46 + 64) = v50;
    *(void *)(v46 + 32) = v49;
    uint64_t v51 = static os_log_type_t.default.getter(v50);
    os_log(_:dso:log:type:_:)( "From provider, using externalToneFileURL %@",  43LL,  2LL,  &_mh_execute_header,  v44,  v51,  v46);

    uint64_t v2 = v92;
    swift_bridgeObjectRelease(v46);
    v43(v15, v6, v2);
    unint64_t v19 = v89;
    uint64_t v41 = 0LL;
    uint64_t v22 = 0LL;
  }

  char v40 = 1;
LABEL_18:
  sub_1001A9670((uint64_t)v15, v41, 1LL, v2);
  id v52 = [objc_allocWithZone(TLAlertConfiguration) initWithType:1];
  [v52 setShouldRepeat:1];
  if ((v40 & 1) == 0)
  {
    NSString v53 = String._bridgeToObjectiveC()();
    [v52 setToneIdentifier:v53];

    id v54 = sub_1001704C4();
    uint64_t v55 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v56 = v2;
    uint64_t v57 = swift_allocObject(v55, 72LL, 7LL);
    *(_OWORD *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = v17[41];
    *(void *)(v57 + 56) = &type metadata for String;
    unint64_t v58 = sub_1001B2330();
    *(void *)(v57 + 64) = v58;
    *(void *)(v57 + 32) = v19;
    *(void *)(v57 + 40) = v22;
    uint64_t v59 = static os_log_type_t.default.getter(v58);
    os_log(_:dso:log:type:_:)("Setting toneIdentifier: %@", 26LL, 2LL, &_mh_execute_header, v54, v59, v57);

    uint64_t v60 = v57;
    uint64_t v2 = v56;
    swift_bridgeObjectRelease(v60);
  }

  sub_10021300C((uint64_t)v15, (uint64_t)v10);
  if (sub_1001AB0AC((uint64_t)v10, 1LL, v2) == 1)
  {
    sub_100213054((uint64_t)v10);
  }

  else
  {
    uint64_t v61 = v90;
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v90, v10, v2);
    URL._bridgeToObjectiveC()(v62);
    unint64_t v64 = v63;
    [v52 setExternalToneFileURL:v63];

    id v65 = sub_1001704C4();
    uint64_t v66 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
    *(_OWORD *)(v67 + swift_unknownObjectWeakDestroy(v0 + 16) = v17[41];
    URL._bridgeToObjectiveC()(v68);
    uint64_t v70 = v69;
    *(void *)(v67 + 56) = sub_1001B4B94(0LL, &qword_100449798, &OBJC_CLASS___NSURL_ptr);
    uint64_t v71 = sub_100213094(&qword_1004497A0, &qword_100449798, &OBJC_CLASS___NSURL_ptr);
    *(void *)(v67 + 64) = v71;
    *(void *)(v67 + 32) = v70;
    uint64_t v72 = static os_log_type_t.default.getter(v71);
    os_log(_:dso:log:type:_:)("Setting externalToneFileURL: %@", 31LL, 2LL, &_mh_execute_header, v65, v72, v67);

    swift_bridgeObjectRelease(v67);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v61, v92);
  }

  char v73 = v93;
  [v52 setShouldIgnoreRingerSwitch:v93];
  id v74 = sub_1001704C4();
  uint64_t v75 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v76 = swift_allocObject(v75, 72LL, 7LL);
  *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = v17[41];
  LOBYTE(v95) = v73;
  uint64_t v77 = String.init<A>(reflecting:)(&v95, &type metadata for Bool);
  uint64_t v79 = v78;
  *(void *)(v76 + 56) = &type metadata for String;
  unint64_t v80 = sub_1001B2330();
  *(void *)(v76 + 64) = v80;
  *(void *)(v76 + 32) = v77;
  *(void *)(v76 + 40) = v79;
  uint64_t v81 = static os_log_type_t.default.getter(v80);
  os_log(_:dso:log:type:_:)("Setting shouldIgnoreRingerSwitch: %@", 36LL, 2LL, &_mh_execute_header, v74, v81, v76);

  swift_bridgeObjectRelease(v76);
  if (*((_BYTE *)v91 + *(int *)(type metadata accessor for RingtoneDescriptor(0LL) + 28)) == 1)
  {
    id v82 = sub_1001704C4();
    uint64_t v83 = static os_log_type_t.default.getter(v82);
    os_log(_:dso:log:type:_:)( "Clearing toneIdentifier and externalToneFileURL due to shouldSuppressAudio",  74LL,  2LL,  &_mh_execute_header,  v82,  v83,  _swiftEmptyArrayStorage);

    [v52 setToneIdentifier:TLToneIdentifierNone];
    [v52 setExternalToneFileURL:0];
  }

  sub_100213054((uint64_t)v15);
  return v52;
}

uint64_t sub_1002126C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (Swift::Int (*)())swift_allocObject(&unk_1003E17A0, 40LL, 7LL);
  *((void *)v8 + 2) = a2;
  *((void *)v8 + 3) = a3;
  *((void *)v8 + 4) = a4;
  uint64_t v9 = (Swift::Int (**)())(a1 + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying);
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying);
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC13callservicesd37RingtoneProviderAlertPlaybackObserver_didBeginPlaying + 8);
  *uint64_t v9 = sub_1002129E0;
  v9[1] = v8;
  swift_unknownObjectRetain(a2);
  swift_retain(a4);
  sub_1001B5D3C(v10, v11);
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
  uint64_t v14 = swift_unknownObjectRetain(a1);
  v13(v14, ObjectType, a3);
  id v15 = sub_1001704C4();
  uint64_t v16 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  swift_unknownObjectRetain(a2);
  uint64_t v18 = sub_1001AFF14((uint64_t *)&unk_100449788);
  uint64_t v19 = String.init<A>(reflecting:)(&v28, v18);
  uint64_t v21 = v20;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v22 = sub_1001B2330();
  *(void *)(v17 + 64) = v22;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)( "Alert configuration has changed, playing alert %@",  49LL,  2LL,  &_mh_execute_header,  v15,  v23,  v17,  v28,  v29);

  swift_bridgeObjectRelease(v17);
  uint64_t v24 = (void *)swift_allocObject(&unk_1003E17C8, 40LL, 7LL);
  v24[2] = a4;
  v24[3] = a2;
  v24[4] = a3;
  uint64_t v25 = *(void (**)(id (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain(a2);
  swift_retain(a4);
  v25(sub_100212C3C, v24, ObjectType, a3);
  swift_release(v24);
  OS_dispatch_semaphore.wait()();
  uint64_t v26 = *(void *)(a4 + 24);
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  swift_unknownObjectRelease(v26);
  return swift_unknownObjectRetain(a2);
}

Swift::Int sub_1002128BC(uint64_t a1, uint64_t a2)
{
  id v4 = sub_1001704C4();
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_unknownObjectRetain(a1);
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_100449788);
  uint64_t v8 = String.init<A>(reflecting:)(&v14, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v11 = sub_1001B2330();
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("Started playing alert: %@", 25LL, 2LL, &_mh_execute_header, v4, v12, v6, v14, v15);

  swift_bridgeObjectRelease(v6);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1002129B4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

Swift::Int sub_1002129E0()
{
  return sub_1002128BC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

id sub_1002129EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = sub_1001704C4();
  unint64_t v11 = v9;
  if (a1 == 5)
  {
    uint64_t v12 = static os_log_type_t.error.getter(v9, v10);
    uint64_t v13 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
    uint64_t v34 = a4;
    uint64_t v35 = a5;
    swift_unknownObjectRetain(a4);
    uint64_t v15 = sub_1001AFF14((uint64_t *)&unk_100449788);
    uint64_t v16 = String.init<A>(reflecting:)(&v34, v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v19 = sub_1001B2330();
    *(void *)(v14 + 64) = v19;
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + 40) = v18;
    if (a2)
    {
      uint64_t v34 = a2;
      swift_errorRetain(a2);
      uint64_t v20 = sub_1001AFF14(&qword_100447B70);
      uint64_t v21 = String.init<A>(reflecting:)(&v34, v20);
    }

    else
    {
      unint64_t v22 = 0xE300000000000000LL;
      uint64_t v21 = 7104878LL;
    }

    *(void *)(v14 + 96) = &type metadata for String;
    *(void *)(v14 + 104) = v19;
    *(void *)(v14 + 72) = v21;
    *(void *)(v14 + 80) = v22;
    os_log(_:dso:log:type:_:)( "Playback failed for alert %@: %@",  32LL,  2LL,  &_mh_execute_header,  v11,  v12,  v14,  v34,  v35);
    goto LABEL_8;
  }

  uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_100447E30);
  uint64_t v14 = swift_allocObject(v23, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
  id result = (id)NSStringFromTLAlertPlaybackCompletionType(a1);
  if (result)
  {
    uint64_t v25 = result;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v28 = v27;

    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v29 = sub_1001B2330();
    *(void *)(v14 + 64) = v29;
    *(void *)(v14 + 32) = v26;
    *(void *)(v14 + 40) = v28;
    uint64_t v34 = a4;
    uint64_t v35 = a5;
    swift_unknownObjectRetain(a4);
    uint64_t v30 = sub_1001AFF14((uint64_t *)&unk_100449788);
    uint64_t v31 = String.init<A>(reflecting:)(&v34, v30);
    *(void *)(v14 + 96) = &type metadata for String;
    *(void *)(v14 + 104) = v29;
    *(void *)(v14 + 72) = v31;
    *(void *)(v14 + 80) = v32;
    uint64_t v33 = static os_log_type_t.default.getter(v31);
    os_log(_:dso:log:type:_:)( "Playback finished with completion type %@ for alert %@",  54LL,  2LL,  &_mh_execute_header,  v11,  v33,  v14,  v34,  v35);
LABEL_8:

    return (id)swift_bridgeObjectRelease(v14);
  }

  __break(1u);
  return result;
}

uint64_t sub_100212C10()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_100212C3C(uint64_t a1, uint64_t a2)
{
  return sub_1002129EC(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_100212C48()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = 0LL;
    id v3 = sub_1001704C4();
    uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447E30);
    uint64_t v5 = sub_1001DEA68(v4);
    *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
    uint64_t v13 = v1;
    uint64_t v14 = v2;
    swift_unknownObjectRetain(v1);
    uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_100449788);
    uint64_t v7 = String.init<A>(reflecting:)(&v13, v6);
    uint64_t v9 = v8;
    *(void *)(v5 + 56) = &type metadata for String;
    unint64_t v10 = sub_1001B2330();
    *(void *)(v5 + 64) = v10;
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v9;
    uint64_t v11 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:type:_:)( "Requested to end playback, stopping alert: %@",  45LL,  2LL,  &_mh_execute_header,  v3,  v11,  v5,  v13,  v14);

    swift_bridgeObjectRelease(v5);
    uint64_t ObjectType = swift_getObjectType(v1);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
    OS_dispatch_semaphore.wait()();
    swift_unknownObjectRelease(v1);
  }

id sub_100212D6C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0LL;
  }
  uint64_t v6 = *(void **)(v2 + 16);
  NSString v7 = String._bridgeToObjectiveC()();
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
  unint64_t v10 = (void *)CNContactCallAlertKey;
  *(void *)(v9 + 32) = CNContactCallAlertKey;
  id v36 = (id)v9;
  specialized Array._endMutation()(v9, v11, v12, v13, v14, v15, v16, v17);
  id v18 = v10;
  sub_1001AFF14((uint64_t *)&unk_100449820);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  id v36 = 0LL;
  id v20 = [v6 unifiedContactWithIdentifier:v7 keysToFetch:isa error:&v36];

  id v21 = v36;
  if (!v20)
  {
    id v24 = v36;
    uint64_t v25 = _convertNSErrorToError(_:)(v21);

    swift_willThrow(v26);
    uint64_t v27 = (void *)_convertErrorToNSError(_:)(v25);
    id v28 = [v27 code];

    if (v28 == (id)200)
    {
      swift_errorRelease(v25);
    }

    else
    {
      id v29 = sub_1001704C4();
      uint64_t v31 = static os_log_type_t.error.getter(v29, v30);
      uint64_t v32 = sub_1001AFF14((uint64_t *)&unk_100447E30);
      uint64_t v33 = swift_allocObject(v32, 112LL, 7LL);
      *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B1B0;
      *(void *)(v33 + 56) = &type metadata for String;
      *(void *)(v33 + 64) = sub_1001B2330();
      *(void *)(v33 + 32) = a1;
      *(void *)(v33 + 40) = a2;
      swift_bridgeObjectRetain(a2);
      uint64_t v34 = _convertErrorToNSError(_:)(v25);
      *(void *)(v33 + 96) = sub_1001B4B94(0LL, &qword_100448490, &OBJC_CLASS___NSError_ptr);
      *(void *)(v33 + 104) = sub_100213094( (unint64_t *)&unk_100449830,  &qword_100448490,  &OBJC_CLASS___NSError_ptr);
      *(void *)(v33 + 72) = v34;
      os_log(_:dso:log:type:_:)( "Contact retrieval failed for contact identifier %@: %@",  54LL,  2LL,  &_mh_execute_header,  v29,  v31,  v33);
      swift_errorRelease(v25);

      swift_bridgeObjectRelease(v33);
    }

    return 0LL;
  }

  id v22 = v36;
  id v23 = [v20 callAlert];

  return v23;
}

uint64_t sub_10021300C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100213054(uint64_t a1)
{
  uint64_t v2 = sub_1001AFF14((uint64_t *)&unk_100447DE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100213094(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_1001B4B94(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1002130D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002130E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1002130EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  sub_10022D310();
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
  sub_10022CE1C(v7);
}

unint64_t sub_10021313C(unint64_t result)
{
  if (result > 0xF) {
    return 0LL;
  }
  return result;
}

unint64_t sub_10021314C()
{
  return 0xD00000000000002ELL;
}

void sub_100213168()
{
}

uint64_t sub_100213170(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10022CA8C();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

void sub_1002131A8(uint64_t a1)
{
}

unint64_t sub_1002131B0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10021313C(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_1002131E0(uint64_t a1)
{
  unint64_t v2 = sub_10022CA8C();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100213208(uint64_t a1)
{
  unint64_t v2 = sub_10022CA8C();
  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_100213230()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10021324C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10022CA8C();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10021328C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask);
  *(void *)(v1 + OBJC_IVAR___CSDConversationLinkManager_renewPseudonymTask) = a1;
  return swift_release(v2);
}

char *sub_1002132A4()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  id v2 = [objc_allocWithZone(TUConversationLinkDescriptorXPCClientDataSource) init];
  if (qword_100446710 != -1) {
    swift_once(&qword_100446710, sub_1001DEA8C);
  }
  uint64_t v3 = (void *)qword_100448100;
  id v4 = objc_allocWithZone((Class)type metadata accessor for SharedConversationServerBag());
  id v5 = v3;
  id v6 = sub_1001D92AC((uint64_t)v5, "init");
  id v7 = sub_10022A9C8(v2, v5, v6);
  swift_deallocPartialClassInstance(v0, ObjectType, 80LL, 7LL);
  return v7;
}

uint64_t sub_1002133B4()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___CSDConversationLinkManager_delegate));
}

uint64_t sub_100213410(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CSDConversationLinkManager_delegate);
  *(void *)(v1 + OBJC_IVAR___CSDConversationLinkManager_delegate) = a1;
  return swift_unknownObjectRelease(v2);
}

void sub_100213428(uint64_t a1)
{
  id v4 = (void *)sub_1001B4C00(a1, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  uint64_t v5 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v6 = sub_1001C7370(v5, 48LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B210;
  id v7 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  *(void *)(v6 + 32) = sub_10022D090(v7, "tu_predicateForConversationLinkDescriptorsWithActivated:");
  id v8 = objc_msgSend(v7, "tu_predicateForConversationLinkDescriptorsIsDeleted:", 0);
  *(void *)(v6 + 40) = v8;
  specialized Array._endMutation()(v8, v9, v10, v11, v12, v13, v14, v15);
  id v16 = sub_10023D8E4(v6);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v17 = sub_1001B0E98();
  sub_1001B0D98(v17, (uint64_t)qword_1004541B0);
  id v18 = v16;
  sub_10022D274();
  os_log_type_t v19 = sub_1001B105C();
  if (sub_1001B1134(v19))
  {
    id v20 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v32 = (void *)sub_1001B0E78(8LL);
    id v21 = sub_10022CD94(5.7779e-34);
    uint64_t v24 = sub_10022CDD0((uint64_t)v21, v22, v23);
    sub_10022D1C0(v24, v25, v26, v27, v28, v29, v30, v31, v32);

    sub_1001B0FD8((void *)&_mh_execute_header, (os_log_s *)v16, v2, "Fetching activated links with predicate %@", v20);
    sub_1001AFF14(&qword_100447E80);
    sub_10022CDB8();
    sub_1001B0E60(v3);
    sub_1001B0E60((uint64_t)v20);
  }

  else
  {
  }

  sub_10022CFE4();
  sub_10022D2DC();
  sub_10022CD54();
}

void sub_1002135F4()
{
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  id v5 = sub_10022D090(v4, "tu_predicateForConversationLinkDescriptorsIsDeleted:");
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v6 = sub_1001B0E98();
  sub_1001B0D98(v6, (uint64_t)qword_1004541B0);
  id v7 = v5;
  sub_10022D274();
  os_log_type_t v8 = sub_1001B105C();
  if (sub_1001B1134(v8))
  {
    uint64_t v9 = (uint8_t *)sub_1001B0E78(12LL);
    id v21 = (void *)sub_1001B0E78(8LL);
    id v10 = sub_10022CD94(5.7779e-34);
    uint64_t v13 = sub_10022CDD0((uint64_t)v10, v11, v12);
    sub_10022D1C0(v13, v14, v15, v16, v17, v18, v19, v20, v21);

    sub_1001B0FD8((void *)&_mh_execute_header, (os_log_s *)v5, v2, "Fetching deleted links with predicate %@", v9);
    sub_1001AFF14(&qword_100447E80);
    sub_10022CDB8();
    sub_1001B0E60(v3);
    sub_1001B0E60((uint64_t)v9);
  }

  else
  {
  }

  sub_10022CFE4();
  sub_10022D2DC();
  sub_10022CD54();
}

Class sub_100213744(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  id v5 = a1;
  a4();

  sub_1001B4C00(v6, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001AA9C8();
  return isa;
}

os_log_s *sub_1002137FC(void *a1)
{
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v4 = sub_1001B0E98();
  sub_1001B0D98(v4, (uint64_t)qword_1004541B0);
  id v5 = a1;
  os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v5, v6, v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  id v10 = "ts";
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = (uint8_t *)sub_1001B0E78(12LL);
    id v44 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t v45 = v5;
    uint64_t v12 = v5;
    id v10 = "_TtC13callservicesd13CSDAVCMoments" + 32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v11 + 4, v11 + 12);
    *id v44 = v5;

    sub_1001B0FD8((void *)&_mh_execute_header, v8, v9, "Fetching links with predicate %@", v11);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v44);
    sub_1001B0E60((uint64_t)v44);
    sub_1001B0E60((uint64_t)v11);
  }

  else
  {
  }

  uint64_t v13 = *(void **)(v1 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v45 = 0LL;
  id v14 = sub_10022CFA4(v13, "conversationLinkDescriptorsWithPredicate:limit:offset:error:", (uint64_t)v5);
  id v15 = v45;
  if (!v14)
  {
    uint64_t v29 = v45;
    uint64_t v30 = sub_10022D190();

    swift_willThrow(v31);
    sub_10022D1B0();
    uint64_t v32 = sub_10022D1B0();
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v32, v33, v34);
    os_log_type_t v36 = static os_log_type_t.error.getter(v28, v35);
    if (os_log_type_enabled(v28, v36))
    {
      uint64_t v37 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v38 = (void *)sub_1001B0E78(8LL);
      *(_DWORD *)uint64_t v37 = *((void *)v10 + 392);
      sub_10022D1B0();
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError(v30);
      sub_10022D29C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v37 + 4, v37 + 12);
      *uint64_t v38 = v39;
      sub_10022CFFC();
      sub_10022CFFC();
      sub_1001B0FD8((void *)&_mh_execute_header, v28, v36, "Fetch attempt failed with error %@", v37);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v38);
      sub_1001B0E60((uint64_t)v38);
      sub_1001B0E60((uint64_t)v37);
    }

    else
    {
      sub_10022CFFC();
      sub_10022CFFC();
    }

    swift_willThrow(v42);
    return v28;
  }

  uint64_t v16 = v14;
  uint64_t v17 = sub_1001B4C00((uint64_t)v14, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
  unint64_t v18 = sub_10022D160(v17);
  id v19 = v15;

  if (v18 >> 62)
  {
    sub_10022CF6C();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v2);
    sub_1001B0F5C();
    if (v20) {
      goto LABEL_9;
    }
LABEL_21:
    sub_1001B0F5C();
    return (os_log_s *)_swiftEmptyArrayStorage;
  }

  uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v20) {
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v45 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v20);
  if (v20 < 0) {
    __break(1u);
  }
  uint64_t v21 = 0LL;
  do
  {
    if ((v18 & 0xC000000000000001LL) != 0) {
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
    }
    else {
      id v22 = *(id *)(v18 + 8 * v21 + 32);
    }
    uint64_t v23 = v22;
    ++v21;
    id v24 = sub_1001D8FD4(objc_allocWithZone(&OBJC_CLASS___TUConversationLink), "initWithDescriptor:");

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
    uint64_t v26 = v45[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
    uint64_t v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
    specialized ContiguousArray._endMutation()(v27);
  }

  while (v20 != v21);
  uint64_t v28 = (os_log_s *)v45;
  sub_1001B0F5C();
  return v28;
}

#error "100213D18: call analysis failed (funcsize=74)"
uint64_t sub_100213D54(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v5 = a1;
  if (!a1) {
    goto LABEL_18;
  }
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t result = swift_bridgeObjectRetain(a1);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }

  if (a1 >= 0) {
    id v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    id v22 = a1;
  }
  swift_bridgeObjectRetain(a1);
  unint64_t result = _CocoaArrayWrapper.endIndex.getter(v22);
  uint64_t v6 = result;
  if (!result)
  {
LABEL_17:
    swift_bridgeObjectRelease(v5);
    id v5 = (uint64_t)&_swiftEmptyArrayStorage;
LABEL_18:
    a3(v5, a2);
    return swift_bridgeObjectRelease(v5);
  }

LABEL_4:
  if (v6 >= 1)
  {
    uint64_t v23 = a2;
    os_log_type_t v8 = 0LL;
    do
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        os_log_type_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      }
      else {
        os_log_type_t v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      id v10 = v9;
      uint64_t v11 = [objc_allocWithZone(TUConversationLink) initWithDescriptor:v9];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v13 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v12 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v13 >= v12 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
      }
      ++v8;
      id v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v14, v15, v16, v17, v18, v19, v20, v21, v23);
    }

    while (v6 != v8);
    swift_bridgeObjectRelease(v5);
    id v5 = (uint64_t)&_swiftEmptyArrayStorage;
    a3((uint64_t)&_swiftEmptyArrayStorage, v23);
    return swift_bridgeObjectRelease(v5);
  }

  __break(1u);
  return result;
}

  if (v6 >= 1)
  {
    os_log_type_t v8 = 0LL;
    do
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        os_log_type_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      }
      else {
        os_log_type_t v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      id v10 = v9;
      ++v8;
      sub_10024B1F8(&v12, [objc_allocWithZone(TUConversationLink) initWithDescriptor:v9]);
    }

    while (v6 != v8);
    swift_bridgeObjectRelease(v5);
    id v5 = (uint64_t)v13;
    a3((uint64_t)v13, a2);
    return swift_bridgeObjectRelease(v5);
  }

  __break(1u);
  return result;
}

  sub_1002734A0(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0) {
    uint64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    uint64_t v7 = *(id *)(a1 + 32);
  }
  os_log_type_t v8 = v7;
  swift_bridgeObjectRelease(a1);
  os_log_type_t v9 = [objc_allocWithZone(TUConversationLink) initWithDescriptor:v8];

  uint64_t v26 = v9;
LABEL_13:
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v11, (uint64_t)qword_1004541B0);
  uint64_t v12 = v9;
  id v15 = (os_log_s *)Logger.logObject.getter(v12, v13, v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v23 = a2;
    uint64_t v17 = a3;
    unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v19 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v18 = 138412290;
    if (v9)
    {
      id v24 = v12;
      uint64_t v20 = v12;
    }

    else
    {
      id v24 = 0LL;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v18 + 4, v18 + 12);
    char *v19 = v9;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Asked for inactive link, returning: %@", v18, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v19, 1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    a3 = v17;
    a2 = v23;
  }

  else
  {
  }

  swift_beginAccess(&v26, &v24, 0LL, 0LL);
  uint64_t v21 = v26;
  id v22 = v26;
  a3(v21, a2);
}

  uint64_t v11 = 0LL;
  uint64_t v126 = a6 & 0xC000000000000001LL;
  uint64_t v12 = a6 + 32;
  uint64_t v13 = a6 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v116 = a6 & 0xFFFFFFFFFFFFFF8LL;
  if (a6 < 0) {
    uint64_t v13 = a6;
  }
  char v115 = v13;
  id v14 = &selRef_renewPseudonymIfNeeded_completionHandler_;
  id v15 = &selRef_sharedPrivacyManager;
  uint64_t v125 = a6;
  uint64_t v119 = v10;
  uint64_t v120 = a6 + 32;
  while (1)
  {
    if (v126) {
      uint64_t v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a6);
    }
    else {
      uint64_t v16 = *(id *)(v12 + 8 * v11);
    }
    uint64_t v17 = v16;
    if (__OFADD__(v11++, 1LL))
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }

    id v19 = [v16 handle];
    if (!v19) {
      break;
    }
    uint64_t v20 = v19;
    uint64_t v21 = [v19 tuHandle];

    if (!v21) {
      goto LABEL_22;
    }
    id v22 = [v17 associationVoucher];
    if (!v22) {
      goto LABEL_21;
    }
    uint64_t v23 = v22;
    id v24 = [v22 tuVoucher];

    if (!v24) {
      goto LABEL_21;
    }
    uint64_t v123 = v24;
    uint64_t v25 = [v24 unsafeData];
    uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    uint64_t v29 = objc_allocWithZone((Class)&OBJC_CLASS___CSDMessagingMemberAssociationClaim);
    sub_10027A67C(v26, v28);
    if (!v30
      || (uint64_t v31 = v30,
          uint64_t v32 = [v30 tuAssociationForHandle:v21],
          v31,
          !v32))
    {

      id v14 = &selRef_renewPseudonymIfNeeded_completionHandler_;
      id v15 = &selRef_sharedPrivacyManager;
      uint64_t v21 = v24;
LABEL_21:

LABEL_22:
      objc_msgSend(v17, v14[492], 0, v106);

      goto LABEL_25;
    }

    uint64_t v124 = v32;
    if (v121)
    {
      swift_bridgeObjectRetain(a6);
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v115);
      if (v33)
      {
LABEL_28:
        uint64_t v34 = 4LL;
        while (1)
        {
          if (v126) {
            uint64_t v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, a6);
          }
          else {
            uint64_t v35 = *(id *)(a6 + 8 * v34);
          }
          os_log_type_t v36 = v35;
          a6 = v34 - 3;
          if (__OFADD__(v34 - 4, 1LL))
          {
            __break(1u);
            goto LABEL_77;
          }

          uint64_t v37 = [v35 handle];
          if (!v37) {
            break;
          }
          uint64_t v38 = v37;
          uint64_t v39 = [v37 tuHandle];

          if (v39)
          {
            uint64_t v40 = [v124 handle];
            uint64_t v41 = [v40 isEqualToHandle:v39];

            if (v41)
            {
              a6 = v125;
              swift_bridgeObjectRelease(v125);
              uint64_t v43 = [v17 tuConversationMember];
              if (v43)
              {
                id v44 = v43;
                uint64_t v45 = (os_log_s *)[v36 tuConversationMember];
                uint64_t v12 = v120;
                id v14 = &selRef_renewPseudonymIfNeeded_completionHandler_;
                id v15 = &selRef_sharedPrivacyManager;
                if (v45)
                {
                  uint64_t v113 = v45;
                  uint64_t v114 = v44;
                  uint64_t v46 = sub_10027A268(v124, v44, v45);
                  if (!v46)
                  {
                    [v17 setValidationSource:2];

                    id v10 = v119;
                    goto LABEL_25;
                  }

                  uint64_t v47 = v46;
                  [v17 setAssociationVoucher:0];
                  uint64_t v48 = v47;
                  if (qword_100446918 != -1) {
                    swift_once(&qword_100446918, sub_1002589B4);
                  }
                  uint64_t v49 = type metadata accessor for Logger(0LL);
                  sub_1001B0D98(v49, (uint64_t)qword_100454168);
                  uint64_t v50 = v21;
                  swift_errorRetain(v47);
                  uint64_t v51 = v50;
                  id v52 = swift_errorRetain(v47);
                  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v52, v53, v54);
                  uint64_t v57 = static os_log_type_t.error.getter(v55, v56);
                  if (os_log_type_enabled(v55, v57))
                  {
                    log = v55;
                    unint64_t v58 = swift_slowAlloc(22LL, -1LL);
                    uint64_t v107 = (void *)swift_slowAlloc(8LL, -1LL);
                    uint64_t v111 = swift_slowAlloc(32LL, -1LL);
                    Class v127 = (uint64_t)v51;
                    uint64_t v128 = v111;
                    *(_DWORD *)unint64_t v58 = 138412546;
                    uint64_t v106 = v48;
                    uint64_t v59 = v51;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v58 + 4, v58 + 12);
                    unint64_t *v107 = v21;
                    uint64_t v109 = v59;

                    *(_WORD *)(v58 + 12) = 2080;
                    Class v127 = v48;
                    swift_errorRetain(v48);
                    uint64_t v60 = sub_1001AFF14(&qword_100449C48);
                    uint64_t v61 = String.init<A>(describing:)(&v127, v60);
                    uint64_t v63 = v62;
                    Class v127 = sub_1001D7CF0(v61, v62, &v128);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v58 + 14, v58 + 22);
                    swift_bridgeObjectRelease(v63);
                    swift_errorRelease(v48);
                    swift_errorRelease(v48);
                    _os_log_impl( (void *)&_mh_execute_header,  log,  v57,  "Failed to validate association for member: %@ with error: %s",  (uint8_t *)v58,  0x16u);
                    sub_1001AFF14(&qword_100447E80);
                    swift_arrayDestroy(v107, 1LL);
                    swift_slowDealloc(v107, -1LL, -1LL);
                    swift_arrayDestroy(v111, 1LL);
                    swift_slowDealloc(v111, -1LL, -1LL);
                    swift_slowDealloc(v58, -1LL, -1LL);

                    swift_errorRelease(v48);
                    unint64_t v64 = v109;
                    goto LABEL_63;
                  }

                  swift_errorRelease(v48);
                  swift_errorRelease(v48);
                  swift_errorRelease(v48);

LABEL_69:
                  id v10 = v119;
                  id v14 = &selRef_renewPseudonymIfNeeded_completionHandler_;
                  id v15 = &selRef_sharedPrivacyManager;
                  goto LABEL_25;
                }

                [v36 setAssociationVoucher:0];
                if (qword_100446918 != -1) {
                  swift_once(&qword_100446918, sub_1002589B4);
                }
                uint64_t v72 = type metadata accessor for Logger(0LL);
                sub_1001B0D98(v72, (uint64_t)qword_100454168);
                char v73 = v36;
                uint64_t v76 = (os_log_s *)Logger.logObject.getter(v73, v74, v75);
                uint64_t v77 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v76, v77))
                {
                  uint64_t v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  char v112 = (void *)swift_slowAlloc(8LL, -1LL);
                  *(_DWORD *)uint64_t v78 = 138412290;
                  uint64_t v128 = (uint64_t)v73;
                  id v110 = v73;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v78 + 4, v78 + 12);
                  *char v112 = v73;

                  _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Could not create TUConversationMember for other associated member: %@",  v78,  0xCu);
                  sub_1001AFF14(&qword_100447E80);
                  swift_arrayDestroy(v112, 1LL);
                  swift_slowDealloc(v112, -1LL, -1LL);
                  swift_slowDealloc(v78, -1LL, -1LL);

LABEL_62:
                  unint64_t v64 = v123;
LABEL_63:

                  goto LABEL_69;
                }
              }

              else
              {
                [v17 setAssociationVoucher:0];
                uint64_t v12 = v120;
                if (qword_100446918 != -1) {
                  swift_once(&qword_100446918, sub_1002589B4);
                }
                id v65 = type metadata accessor for Logger(0LL);
                sub_1001B0D98(v65, (uint64_t)qword_100454168);
                uint64_t v17 = v17;
                uint64_t v68 = (os_log_s *)Logger.logObject.getter(v17, v66, v67);
                uint64_t v69 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v68, v69))
                {
                  uint64_t v70 = swift_slowAlloc(12LL, -1LL);
                  uint64_t v71 = (void *)swift_slowAlloc(8LL, -1LL);
                  *(_DWORD *)uint64_t v70 = 138412290;
                  *(void *)(v70 + 4) = v17;
                  *uint64_t v71 = v17;

                  _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "Could not create TUConversationMember for member: %@",  (uint8_t *)v70,  0xCu);
                  sub_1001AFF14(&qword_100447E80);
                  swift_arrayDestroy(v71, 1LL);
                  swift_slowDealloc(v71, -1LL, -1LL);
                  swift_slowDealloc(v70, -1LL, -1LL);

                  goto LABEL_62;
                }
              }

              goto LABEL_69;
            }
          }

          ++v34;
          uint64_t v42 = a6 == v33;
          a6 = v125;
          if (v42) {
            goto LABEL_38;
          }
        }

        __break(1u);
        break;
      }
    }

    else
    {
      uint64_t v33 = *(void *)(v116 + 16);
      swift_bridgeObjectRetain(a6);
      if (v33) {
        goto LABEL_28;
      }
    }

uint64_t sub_100213EF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

void sub_100213FEC(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_1001B4B94(0LL, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_100214080()
{
  uint64_t v61 = v1;
  id v62 = v0;
  uint64_t v59 = v3;
  uint64_t v60 = v2;
  uint64_t v63 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_1001B1234();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v58 = &v53[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v12);
  id v14 = &v53[-v13];
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v15 = sub_1001B0E98();
  sub_10022CF28(v15, (uint64_t)qword_1004541B0);
  uint64_t v16 = *(void *)(v10 + 16);
  sub_10022D1CC((uint64_t)v14);
  uint64_t v17 = sub_10022CE68(v6);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v17, v18, v19);
  int v21 = static os_log_type_t.default.getter(v20);
  BOOL v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
  uint64_t v64 = v8;
  uint64_t v57 = v6;
  if (v22)
  {
    int v54 = v21;
    uint64_t v56 = v16;
    uint64_t v23 = sub_1001B0E78(22LL);
    uint64_t v55 = sub_1001B0E78(64LL);
    uint64_t v66 = v55;
    *(_DWORD *)uint64_t v23 = 136315394;
    sub_1001A9F18( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    uint64_t v26 = v6;
    unint64_t v28 = v27;
    uint64_t v65 = sub_1001D7CF0(v25, v27, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 4, v23 + 12);
    unint64_t v29 = v28;
    uint64_t v30 = v26;
    swift_bridgeObjectRelease(v29);
    sub_10022D16C(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    *(_WORD *)(v23 + 12) = 2080;
    if (v26)
    {
      uint64_t v65 = v26;
      sub_1001F859C();
      uint64_t v31 = sub_1001AFF14(&qword_1004499A0);
      uint64_t v32 = String.init<A>(reflecting:)(&v65, v31);
      unint64_t v34 = v33;
    }

    else
    {
      unint64_t v34 = 0xE300000000000000LL;
      uint64_t v32 = 7104878LL;
    }

    os_log_type_t v35 = v54;
    uint64_t v65 = sub_1001D7CF0(v32, v34, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 14, v23 + 22);
    sub_1001B0EB8();
    sub_10022CCA4(v30);
    sub_1001D9094( (void *)&_mh_execute_header,  v20,  v35,  "Link manager asked to generate link for groupUUID %s with invitedHandles: %s",  (uint8_t *)v23);
    uint64_t v36 = v55;
    sub_10022CF08();
    sub_1001B0E60(v36);
    sub_1001B0E60(v23);
  }

  else
  {
    sub_10022D16C(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    sub_10022CCA4(v6);
  }

  uint64_t v37 = v58;
  sub_10022D1CC((uint64_t)v58);
  uint64_t v38 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v39 = (v38 + 16) & ~v38;
  unint64_t v40 = (v11 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v41 = v10;
  unint64_t v42 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v46 = swift_allocObject(&unk_1003E23B0, v45 + 8, v38 | 7);
  sub_1001F87E8(v46 + v39, (uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 32));
  uint64_t v47 = (void *)(v46 + v40);
  uint64_t v49 = v61;
  uint64_t v48 = v62;
  *uint64_t v47 = v59;
  v47[1] = v49;
  *(void *)(v46 + v42) = v48;
  uint64_t v50 = v63;
  *(void *)(v46 + v43) = v63;
  uint64_t v51 = v57;
  *(void *)(v46 + v44) = v57;
  *(void *)(v46 + v45) = v60;
  swift_bridgeObjectRetain(v51);
  swift_retain(v49);
  v48;
  id v52 = v50;
  sub_100220AF4(v64, sub_10022C53C, v46);
  sub_100207134();
  sub_1001B0FF8();
}

void sub_1002143E0( uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(id, void *), uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v17)
  {
    uint64_t v51 = v17;
    id v52 = a4;
    uint64_t v20 = qword_100446930;
    id v21 = v17;
    if (v20 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v22, (uint64_t)qword_1004541B0);
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v19, a3, v15);
    id v23 = v21;
    swift_errorRetain(a2);
    id v24 = v23;
    uint64_t v25 = swift_errorRetain(a2);
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v25, v26, v27);
    int v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      int v48 = v29;
      uint64_t v47 = v28;
      uint64_t v50 = a5;
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v54 = v49;
      *(_DWORD *)uint64_t v30 = 136315650;
      sub_1001A9F18( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v15, v32);
      unint64_t v35 = v34;
      uint64_t v53 = sub_1001D7CF0(v33, v34, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      *(_WORD *)(v30 + 12) = 2112;
      uint64_t v53 = (uint64_t)v24;
      id v36 = v24;
      uint64_t v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v30 + 14, v30 + 22);
      *uint64_t v31 = v51;

      *(_WORD *)(v30 + 22) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v38 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v53 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v30 + 24, v30 + 32);
      }

      else
      {
        uint64_t v53 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v30 + 24, v30 + 32);
        uint64_t v38 = 0LL;
      }

      unint64_t v40 = v52;
      uint64_t v41 = v47;
      v37[1] = v38;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v48,  "Refusing generation of a link descriptor for groupUUID %s as one already exists %@ (error: %@",  (uint8_t *)v30,  0x20u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v37, 2LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v42 = v49;
      swift_arrayDestroy(v49, 1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);

      swift_errorRelease(a2);
      swift_errorRelease(a2);

      unint64_t v40 = v52;
    }

    id v43 = [objc_allocWithZone(TUConversationLink) initWithDescriptor:v24];
    sub_100227A98(5LL, 0LL);
    unint64_t v45 = v44;
    v40(v43, v44);
  }

  else
  {
    double v39 = sub_100227AF4();
    sub_1002223D4(a3, a7, a8, 1, a9, (void (*)(void, void *))a4, a5, v39);
  }

void sub_100214978(uint64_t a1, void *a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a5);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v13, (uint64_t)qword_1004541B0);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v14 = a2;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v14, v15, v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = a3;
    uint64_t v20 = v19;
    uint64_t v38 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v39;
    *(_DWORD *)uint64_t v20 = 136315394;
    unint64_t v40 = (char *)(v20 + 4);
    uint64_t v41 = v10;
    uint64_t v21 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    id v43 = a4;
    uint64_t v22 = v21;
    sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v24 = v23;
    uint64_t v25 = swift_bridgeObjectRetain(a1);
    uint64_t v26 = Set.description.getter(v25, v22, v24);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease(a1);
    uint64_t v45 = sub_1001D7CF0(v26, v28, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v40, v20 + 12);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease_n(a1, 2LL);
    *(_WORD *)(v20 + 12) = 2112;
    uint64_t v45 = (uint64_t)v14;
    id v29 = v14;
    unint64_t v40 = v12;
    uint64_t v30 = v17;
    id v31 = v29;
    a4 = v43;
    uint64_t v10 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v20 + 14, v20 + 22);
    uint64_t v32 = v38;
    *uint64_t v38 = v14;

    _os_log_impl( (void *)&_mh_execute_header,  v30,  v18,  "Link manager asked to generate link with invitedHandles: %s, originatorHandle: %@",  (uint8_t *)v20,  0x16u);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v32, 1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
    uint64_t v33 = v39;
    swift_arrayDestroy(v39, 1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v20;
    a3 = v42;
    swift_slowDealloc(v34, -1LL, -1LL);

    uint64_t v12 = v40;
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  UUID.init()(v35);
  double v36 = sub_100227AF4();
  _Block_copy(a5);
  sub_100220E88((unint64_t)v12, v14, a1, 1, a3, a4, (void (**)(void, void, void))a5, v36);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v10);
  _Block_release(a5);
  _Block_release(a5);
}

void sub_100214DDC(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v5;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v13 = sub_1001B0E98();
  sub_1001B0D98(v13, (uint64_t)qword_1004541B0);
  id v14 = a1;
  sub_10022D238();
  os_log_type_t v15 = sub_1001B105C();
  if (sub_10022CD18(v15))
  {
    uint64_t v16 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t aBlock = v6;
    unint64_t v28 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v16 = 138412290;
    uint64_t v17 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v16 + 4, v16 + 12);
    void *v28 = v6;

    sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)a1,  v7,  "Link manager asked to generate TUConversationLinkDescriptor for received TUConversationLink %@ (not locally owned)",  v16);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v28);
    sub_1001B0E60((uint64_t)v28);
    sub_1001B0E60((uint64_t)v16);
  }

  else
  {
  }

  NSString v19 = sub_10022D078(v18, "pseudonym");
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v19 = String._bridgeToObjectiveC()();
    sub_1001B2428();
  }

  uint64_t v20 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  id v21 = sub_1001D8FD4(v20, "tu_predicateForConversationLinkDescriptorsWithPseudonym:");

  uint64_t v22 = *(void **)&v8[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  uint64_t v23 = sub_1001C7370((uint64_t)&unk_1003E22C0, 56LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v23 + 24) = a4;
  *(void *)(v23 + 32) = a5;
  *(_BYTE *)(v23 + 40) = a3 & 1;
  *(void *)(v23 + 4_Block_object_dispose(va, 8) = v8;
  uint64_t v30[3] = sub_10022C474;
  void v30[4] = v23;
  uint64_t aBlock = _NSConcreteStackBlock;
  v30[0] = 1107296256LL;
  v30[1] = sub_100213EF4;
  _OWORD v30[2] = &unk_1003E22D8;
  uint64_t v24 = _Block_copy(&aBlock);
  uint64_t v25 = v6;
  id v26 = v21;
  swift_retain(a5);
  unint64_t v27 = v8;
  sub_10022CCE8();
  [v22 conversationLinkDescriptorsWithPredicate:v26 limit:1 offset:0 completion:v24];
  sub_10022D264();
}

uint64_t sub_100215084( uint64_t a1, uint64_t a2, void *a3, void (*a4)(void, uint64_t), uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v152 = a7;
  LODWORD(v153) = a6;
  uint64_t v159 = a5;
  uint64_t v160 = a4;
  uint64_t v9 = sub_1001AFF14(&qword_100447EA0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  id v14 = (char *)&v147 - v13;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v156 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v154 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v147 - v19;
  __chkstk_darwin(v18);
  uint64_t v155 = (char *)&v147 - v21;
  uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_10044A400);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v147 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v158 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  unint64_t v28 = (char *)&v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v157 = (char *)&v147 - v29;
  id v30 = [a3 originatorHandle];
  if (!v30) {
    goto LABEL_24;
  }
  id v31 = v30;
  uint64_t v151 = v15;
  id v32 = [a3 groupUUID];
  if (!v32)
  {
    sub_1001A9670((uint64_t)v24, 1LL, 1LL, v25);
    goto LABEL_18;
  }

  uint64_t v33 = v32;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v158 + 32);
  v34(v24, v28, v25);
  sub_1001A9670((uint64_t)v24, 0LL, 1LL, v25);
  if (sub_1001AB0AC((uint64_t)v24, 1LL, v25) == 1)
  {
LABEL_18:

    uint64_t v55 = (uint64_t *)&unk_10044A400;
    uint64_t v56 = (uint64_t)v24;
LABEL_23:
    sub_1002011C8(v56, v55);
LABEL_24:
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v57, (uint64_t)qword_1004541B0);
    unint64_t v58 = a3;
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v58, v59, v60);
    os_log_type_t v63 = static os_log_type_t.error.getter(v61, v62);
    if (os_log_type_enabled(v61, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v65 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v64 = 138412290;
      uint64_t aBlock = v58;
      uint64_t v66 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v64 + 4, v64 + 12);
      *uint64_t v65 = v58;

      _os_log_impl((void *)&_mh_execute_header, v61, v63, "Received link %@ missing required field", v64, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v65, 1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    else
    {

      uint64_t v61 = (os_log_s *)v58;
    }

    unint64_t v67 = sub_10022B8F8();
    uint64_t v68 = swift_allocError(&type metadata for ConversationLinkManagerErrorType, v67, 0LL, 0LL);
    *uint64_t v69 = 13LL;
    v160(0LL, v68);
    return swift_errorRelease(v68);
  }

  v34(v157, v24, v25);
  id v35 = [a3 creationDate];
  if (!v35)
  {
    sub_1001A9670((uint64_t)v14, 1LL, 1LL, v151);
    goto LABEL_20;
  }

  double v36 = v35;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);

  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
  uint64_t v38 = v151;
  v37(v14, v20, v151);
  sub_1001A9670((uint64_t)v14, 0LL, 1LL, v38);
  if (sub_1001AB0AC((uint64_t)v14, 1LL, v38) == 1)
  {
LABEL_20:

    (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v25);
    uint64_t v55 = &qword_100447EA0;
    uint64_t v56 = (uint64_t)v14;
    goto LABEL_23;
  }

  v37(v155, v14, v38);
  id v39 = [a3 expirationDate];
  uint64_t v40 = v38;
  if (!v39)
  {
    sub_1001A9670((uint64_t)v12, 1LL, 1LL, v38);
    goto LABEL_22;
  }

  uint64_t v41 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

  v37(v12, v20, v40);
  sub_1001A9670((uint64_t)v12, 0LL, 1LL, v40);
  if (sub_1001AB0AC((uint64_t)v12, 1LL, v40) == 1)
  {
LABEL_22:

    (*(void (**)(char *, uint64_t))(v156 + 8))(v155, v40);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v25);
    uint64_t v55 = &qword_100447EA0;
    uint64_t v56 = (uint64_t)v12;
    goto LABEL_23;
  }

  uint64_t v42 = v154;
  v37(v154, v12, v40);
  sub_10022A150(a3);
  if (!v43)
  {

    uint64_t v71 = *(void (**)(char *, uint64_t))(v156 + 8);
    v71(v42, v40);
    v71(v155, v40);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v25);
    goto LABEL_24;
  }

  uint64_t v44 = v43;
  uint64_t v45 = swift_allocObject(&unk_1003E2310, 24LL, 7LL);
  uint64_t v149 = (id *)(v45 + 16);
  uint64_t v150 = v45;
  if (!a1)
  {
LABEL_42:
    sub_1001B4B94(0LL, &qword_1004499A8, &OBJC_CLASS___TUConversationLinkOriginator_ptr);
    id v87 = sub_100215E20(v31);
    (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v28, v157, v25);
    id v88 = v87;
    id v89 = [a3 pseudonym];
    uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    uint64_t v91 = v90;

    id v92 = [a3 publicKey];
    uint64_t v93 = v44;
    uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
    unint64_t v96 = v95;

    id v97 = objc_allocWithZone(&OBJC_CLASS___TUMutableConversationLinkDescriptor);
    uint64_t v98 = v94;
    uint64_t v44 = v93;
    id v99 = sub_10028D3A4((uint64_t)v28, v88, v148, v91, v98, v96);
    uint64_t v54 = v149;
    *uint64_t v149 = v99;
    [v99 setActivated:1];
    id v100 = *v54;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v100 setCreationDate:isa];

    id v51 = *v54;
    char v53 = v153;
    goto LABEL_43;
  }

  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v46 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v46) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }

  if (a1 >= 0) {
    uint64_t v86 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v86 = a1;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v86))
  {
LABEL_41:
    swift_bridgeObjectRelease(a1);
    goto LABEL_42;
  }

id sub_100215E20(void *a1)
{
  uint64_t v2 = v1;
  if (qword_100446990 != -1) {
    swift_once(&qword_100446990, sub_1002A2AB0);
  }
  sub_1002A2B48();
  uint64_t v5 = v4;
  uint64_t v6 = sub_1002A2E6C();
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v9 = [v7 initWithIdentifier:v8 revision:v6 handle:a1];

  return v9;
}

void sub_100215EE8(char a1, uint64_t a2, void (*a3)(id, uint64_t), uint64_t a4, uint64_t a5)
{
  id v7 = (void *)(a5 + 16);
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(a5 + 16, v22, 0LL, 0LL);
    id v8 = [objc_allocWithZone(TUConversationLink) initWithDescriptor:*v7];
    a3(v8, a2);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v10, (uint64_t)qword_1004541B0);
    uint64_t v11 = swift_retain_n(a5, 2LL);
    id v14 = (os_log_s *)Logger.logObject.getter(v11, v12, v13);
    os_log_type_t v16 = static os_log_type_t.error.getter(v14, v15);
    if (os_log_type_enabled(v14, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_beginAccess(v7, v22, 0LL, 0LL);
      uint64_t v18 = *(void **)(a5 + 16);
      uint64_t v21 = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v17 + 4, v17 + 12);
      *uint64_t v20 = v18;
      swift_release_n(a5, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Failed to persist link %@", v17, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v20, 1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      a3(0LL, a2);
    }

    else
    {

      swift_release_n(a5, 2LL);
      a3(0LL, a2);
    }
  }

void sub_10021611C()
{
  uint64_t v1 = v0;
  if (qword_100446990 != -1) {
    swift_once(&qword_100446990, sub_1002A2AB0);
  }
  uint64_t v2 = sub_1002A2B48();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1002A2E6C();
  id v6 = [v1 originator];
  id v7 = [v6 handle];

  id v8 = objc_allocWithZone(&OBJC_CLASS___TUConversationLinkOriginator);
  id v9 = sub_10028D474(v2, v4, v5, v7);
  [v1 setOriginator:v9];
}

void sub_1002162BC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v9 = sub_1001C7370(v8, 48LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B210;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  id v11 = sub_10022D090(v10, "tu_predicateForConversationLinkDescriptorsWithActivated:");
  *(void *)(v9 + 32) = v11;
  id v12 = sub_10022D220((uint64_t)v11, "tu_predicateForConversationLinkDescriptorsIsDeleted:");
  *(void *)(v9 + 40) = v12;
  aBlock[0] = v9;
  uint64_t v20 = specialized Array._endMutation()(v12, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v42 = v9;
  if ((a1 & 1) != 0)
  {
    id v21 = objc_msgSend(v10, "tu_predicateForConversationLinkDescriptorsWithPrivateKey:", 0);
    uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSCompoundPredicate);
    id v23 = sub_1001D8FD4(v22, "notPredicateWithSubpredicate:");
    sub_10022D280();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
    unint64_t v26 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v25 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v26 >= v25 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1LL);
    }
    uint64_t v27 = sub_1001F0E4C();
    uint64_t v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v28);
    uint64_t v20 = specialized Array._endMutation()(v29, v30, v31, v32, v33, v34, v35, v36);
  }

  sub_1001B4C00(v20, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  id v37 = sub_10022CD28();
  uint64_t v38 = *(void **)(v4 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v39 = sub_1001C7370((uint64_t)&unk_1003E2270, 32LL);
  *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v39 + 24) = a3;
  aBlock[4] = sub_10022C44C;
  void aBlock[5] = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100213EF4;
  void aBlock[3] = &unk_1003E2288;
  _Block_copy(aBlock);
  id v40 = v37;
  sub_10022CD70();
  sub_10022CCE8();
  sub_10022CC60(v38, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v40);
  sub_10022CD10();

  sub_10022CDB0();
}

uint64_t sub_1002164BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1;
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v13 = &_swiftEmptySetSingleton;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(a1);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }

  if (a1 >= 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v11 = a1;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v11);
  uint64_t v6 = result;
  if (!result)
  {
LABEL_15:
    swift_bridgeObjectRelease(v5);
    uint64_t v5 = (uint64_t)&_swiftEmptySetSingleton;
LABEL_16:
    a3(v5, a2);
    return swift_bridgeObjectRelease(v5);
  }

void sub_100216684(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_1001B4B94(0LL, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    sub_10022B8BC((unint64_t *)&unk_1004499F8, &qword_1004499F0, &OBJC_CLASS___TUConversationLink_ptr);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_100216744()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  objc_opt_self(&OBJC_CLASS___NSPredicate);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = sub_10022D184((uint64_t)v9, "tu_predicateForConversationLinkDescriptorsWithPseudonym:");

  uint64_t v11 = *(void **)&v0[OBJC_IVAR___CSDConversationLinkManager_dataSource];
  id v12 = (void *)sub_1001C7370((uint64_t)&unk_1003E21D0, 56LL);
  v12[2] = v0;
  void v12[3] = v4;
  v12[4] = v2;
  v12[5] = v8;
  v12[6] = v6;
  uint64_t v13 = sub_10022CC44((uint64_t)sub_100213EF4, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v16, v17);
  id v14 = v10;
  uint64_t v15 = v0;
  sub_1001B5D70(v4, v2);
  sub_1001EE280();
  sub_10022D130();
  [v11 conversationLinkDescriptorsWithPredicate:v14 limit:0 offset:0 completion:v13];
  _Block_release(v13);

  sub_10022CC84();
}

void sub_100216868( uint64_t a1, uint64_t a2, char *a3, void (*a4)(void, void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    goto LABEL_9;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      uint64_t v42 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v42 = a1;
    }
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v42)) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v17)
    {
LABEL_4:
      sub_1002734A0(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
      }
      else {
        id v18 = *(id *)(a1 + 32);
      }
      uint64_t v19 = v18;
      swift_bridgeObjectRelease(a1);
      id v20 = [v19 mutableCopy];
      _bridgeAnyObjectToAny(_:)(aBlock, v20);
      swift_unknownObjectRelease(v20);
      uint64_t v21 = sub_1001B4B94( 0LL,  (unint64_t *)&unk_100449970,  &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr);
      if ((swift_dynamicCast(&v48, aBlock, (char *)&type metadata for Any + 8, v21, 6LL) & 1) != 0)
      {
        id v22 = v48;
        Date.init()([v48 setActivated:1]);
        v23.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v44 = a6;
        Class isa = v23.super.isa;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        [v22 setCreationDate:isa];

        [v22 setDeletionDate:0];
        sub_10021611C();
        id v45 = *(id *)&a3[OBJC_IVAR___CSDConversationLinkManager_dataSource];
        uint64_t v25 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
        uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
        *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
        *(void *)(v26 + 32) = v22;
        aBlock[0] = v26;
        specialized Array._endMutation()(v26, v27, v28, v29, v30, v31, v32, v33);
        uint64_t v34 = aBlock[0];
        sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
        id v35 = v22;
        Class v36 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v34);
        id v37 = (void *)swift_allocObject(&unk_1003E2220, 56LL, 7LL);
        v37[2] = a4;
        void v37[3] = a5;
        uint64_t v38 = v44;
        v37[4] = a3;
        void v37[5] = v38;
        v37[6] = a7;
        aBlock[4] = sub_10022C440;
        id v47 = v37;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1002130EC;
        void aBlock[3] = &unk_1003E2238;
        uint64_t v39 = _Block_copy(aBlock);
        id v40 = v47;
        sub_1001B5D70((uint64_t)a4, a5);
        uint64_t v41 = a3;
        swift_bridgeObjectRetain(a7);
        swift_release(v40);
        [v45 addOrUpdateConversationLinkDescriptors:v36 completion:v39];
        _Block_release(v39);

        return;
      }

LABEL_9:
      if (!a4) {
        return;
      }
      goto LABEL_10;
    }
  }

  swift_bridgeObjectRelease(a1);
  if (a4) {
LABEL_10:
  }
    a4(0LL, 0LL);
}

uint64_t sub_100216BAC( char a1, uint64_t a2, uint64_t (*a3)(void, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v21[1] = a7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v21 - v16;
  if (a3) {
    uint64_t v15 = a3(a1 & 1, a2);
  }
  Date.init()(v15);
  double v18 = sub_100227AF4();
  Date.addingTimeInterval(_:)(v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  sub_10021B9C8();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
  if ((a1 & 1) != 0) {
    return sub_100285E64();
  }
  return result;
}

void sub_100216D98()
{
  uint64_t v121 = v1;
  uint64_t v122 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1001AFF14((uint64_t *)&unk_10044A400);
  sub_1001B0E88();
  __chkstk_darwin(v7);
  sub_1001B0F00();
  uint64_t v10 = (void *)(v9 - v8);
  uint64_t v11 = sub_1001B1234();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  double v18 = (char *)&v108 - v17;
  __chkstk_darwin(v16);
  uint64_t v119 = (char *)&v108 - v19;
  uint64_t v124 = sub_1001F86B8();
  uint64_t v20 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  sub_1001BB4B4();
  uint64_t v115 = v21;
  sub_1001BB5CC();
  __chkstk_darwin(v22);
  uint64_t v123 = (os_log_s *)((char *)&v108 - v23);
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  uint64_t v116 = v6;
  uint64_t v117 = v4;
  NSString v25 = String._bridgeToObjectiveC()();
  uint64_t v26 = (objc_class *)objc_msgSend(v24, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v25);

  uint64_t v118 = v0;
  uint64_t v27 = *(void *)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v128 = 0LL;
  uint64_t v125 = v26;
  id v28 = sub_10022CFA4((id)v27, "conversationLinkDescriptorsWithPredicate:limit:offset:error:", (uint64_t)v26);
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDCoreTelephonyClient.opt_inst_meths;
  if (!v28)
  {
    id v39 = v128;
    sub_1001B4C3C();
    sub_10022D294();
    swift_willThrow(v40);
    goto LABEL_27;
  }

  uint64_t v30 = v28;
  id v114 = (id)v27;
  uint64_t v113 = sub_1001B4C00((uint64_t)v28, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v113);
  sub_10022D0A0();

  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0) {
      uint64_t v106 = v27;
    }
    else {
      uint64_t v106 = v27 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v27);
    uint64_t v107 = _CocoaArrayWrapper.endIndex.getter(v106);
    sub_1001AA9C8();
    if (v107) {
      goto LABEL_4;
    }
LABEL_36:
    sub_1001AA9C8();
    uint64_t v41 = v125;
    goto LABEL_37;
  }

  if (!*(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_36;
  }
LABEL_4:
  sub_1002734A0(0LL, (v27 & 0xC000000000000001LL) == 0, v27);
  if ((v27 & 0xC000000000000001LL) != 0) {
    uint64_t v31 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v27);
  }
  else {
    uint64_t v31 = (objc_class *)*(id *)(v27 + 32);
  }
  uint64_t v120 = v31;
  sub_1001AA9C8();
  id v32 = -[objc_class mutableCopy](v120, "mutableCopy");
  _bridgeAnyObjectToAny(_:)(&v128, v32);
  uint64_t v33 = swift_unknownObjectRelease(v32);
  uint64_t v34 = sub_1001B4C00(v33, (unint64_t *)&unk_100449970, &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr);
  if ((swift_dynamicCast(&v126, &v128, (char *)&type metadata for Any + 8, v34, 6LL) & 1) == 0)
  {
    sub_10022CFD4();
    uint64_t v41 = v120;
LABEL_37:

    goto LABEL_38;
  }

  id v35 = v126;
  id v36 = [v126 setActivated:1];
  id v37 = v123;
  Date.init()(v36);
  v38.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v111 = *(void (**)(os_log_s *, uint64_t))(v20 + 8);
  v111(v37, v124);
  [v35 setCreationDate:v38.super.isa];

  char v112 = v35;
  [v35 setDeletionDate:0];
  sub_10022C38C(v121, (uint64_t)v10, (uint64_t *)&unk_10044A400);
  if (sub_1001AB0AC((uint64_t)v10, 1LL, v11) == 1)
  {
    sub_1002011C8((uint64_t)v10, (uint64_t *)&unk_10044A400);
  }

  else
  {
    uint64_t v42 = (uint64_t)v119;
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v119, v10, v11);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v43 = sub_1001B0E98();
    sub_10022CF28(v43, (uint64_t)qword_1004541B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v18, v42, v11);
    uint64_t v10 = v112;
    Logger.logObject.getter(v10, v44, v45);
    os_log_type_t v46 = sub_1001B11C8();
    if (sub_1001D9224(v46))
    {
      uint64_t v47 = sub_1001B0E78(22LL);
      id v48 = (void *)sub_1001B0E78(64LL);
      uint64_t v121 = (uint64_t)v48;
      id v128 = v48;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v108 = v47 + 4;
      id v49 = sub_1001D92AC((uint64_t)v48, "groupUUID");
      Class isa = (os_log_s *)v38.super.isa;
      id v50 = v49;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

      sub_1001A9F18( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v109 = (int)v37;
      uint64_t v51 = sub_10022D1A4();
      unint64_t v53 = v52;
      sub_10022D138((uint64_t)v15);
      id v126 = (id)sub_1001D7CF0(v51, v53, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v108, v47 + 12);
      sub_1001B1200();

      *(_WORD *)(v47 + 12) = 2080;
      uint64_t v54 = sub_10022D1A4();
      id v126 = (id)sub_1001D7CF0(v54, v55, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v47 + 14, v47 + 22);
      sub_1001B0EB8();
      sub_10022D138((uint64_t)v18);
      uint64_t v56 = isa;
      sub_1001D9094( (void *)&_mh_execute_header,  isa,  (os_log_type_t)v109,  "In activating link, updating the groupUUID from %s to %s",  (uint8_t *)v47);
      uint64_t v57 = v121;
      sub_10022CF08();
      sub_1001B0E60(v57);
      uint64_t v58 = v47;
      uint64_t v42 = (uint64_t)v119;
      sub_1001B0E60(v58);
    }

    else
    {

      sub_10022D138((uint64_t)v18);
    }

    id v37 = (os_log_s *)v42;
    Class v59 = UUID._bridgeToObjectiveC()().super.isa;
    [v10 setGroupUUID:v59];

    sub_10022D138(v42);
  }

  uint64_t v60 = v122;
  if (v122)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v61 = sub_1001B0E98();
    sub_10022CF28(v61, (uint64_t)qword_1004541B0);
    uint64_t v62 = sub_10022CE68(v60);
    Logger.logObject.getter(v62, v63, v64);
    os_log_type_t v65 = sub_1001B105C();
    if (sub_10022CC50(v65))
    {
      uint64_t v66 = (uint8_t *)sub_1001B0E78(12LL);
      unint64_t v67 = (void *)sub_1001B0E78(32LL);
      id v128 = v67;
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v68 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
      uint64_t v70 = v69;
      uint64_t v71 = swift_bridgeObjectRetain(v60);
      uint64_t v72 = Set.description.getter(v71, v68, v70);
      unint64_t v74 = v73;
      sub_1001E43E0();
      id v126 = (id)sub_1001D7CF0(v72, v74, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v66 + 4, v66 + 12);
      sub_1001B92A4();
      sub_10022CCA4(v60);
      sub_1001B0FD8( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v10,  "In activating link, setting invitedHandles to %s",  v66);
      sub_1001B0F64((uint64_t)v67);
      uint64_t v75 = (uint64_t)v67;
      p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDCoreTelephonyClient + 40);
      sub_1001B0E60(v75);
      sub_1001B0E60((uint64_t)v66);
    }

    else
    {
      sub_10022CCA4(v60);
    }

    sub_10022A284(v60, v112);
  }

  uint64_t v76 = p_opt_inst_meths;
  os_log_type_t v77 = v112;
  sub_10021611C();
  uint64_t v78 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v79 = sub_1001C7370(v78, 40LL);
  *(_OWORD *)(v79 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
  *(void *)(v79 + 32) = v77;
  id v128 = (id)v79;
  specialized Array._endMutation()(v79, v80, v81, v82, v83, v84, v85, v86);
  id v87 = v77;
  uint64_t v27 = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
  sub_1001B0EB8();
  id v128 = 0LL;
  LODWORD(v77) = [v114 addOrUpdateConversationLinkDescriptors:v27 error:&v128];

  if ((_DWORD)v77)
  {
    id v88 = v128;
    uint64_t v89 = sub_100285E64();
    uint64_t v90 = v115;
    Date.init()(v89);
    double v91 = sub_100227AF4();
    id v92 = v123;
    Date.addingTimeInterval(_:)(v91);
    uint64_t v93 = v90;
    uint64_t v94 = v124;
    unint64_t v95 = v111;
    v111(v93, v124);
    sub_10021B9C8();
    v95(v92, v94);
    [objc_allocWithZone(TUConversationLink) initWithDescriptor:v87];
    sub_10022CFD4();

    uint64_t v41 = v120;
    goto LABEL_37;
  }

  id v96 = v128;
  sub_1001B4C3C();
  sub_10022D294();
  swift_willThrow(v97);

  p_opt_inst_meths = v76;
LABEL_27:
  if (p_opt_inst_meths[294] != (__objc2_meth_list *)-1LL) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v98 = sub_1001B0E98();
  sub_10022CF28(v98, (uint64_t)qword_1004541B0);
  sub_10022D26C();
  uint64_t v99 = sub_10022D26C();
  Logger.logObject.getter(v99, v100, v101);
  os_log_type_t v102 = sub_1001E0A4C();
  if (sub_1001BB5B0(v102))
  {
    Class v103 = (uint8_t *)sub_1001B0E78(12LL);
    id v104 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)Class v103 = 138412290;
    sub_10022D26C();
    uint64_t v105 = (void *)_swift_stdlib_bridgeErrorToNSError(v10);
    id v128 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v103 + 4, v103 + 12);
    *id v104 = v105;
    sub_10022CE70();
    sub_10022CE70();
    sub_1001B0FD8( (void *)&_mh_execute_header,  (os_log_s *)v27,  (os_log_type_t)p_opt_inst_meths,  "Exception caught when trying to activate link %@",  v103);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v104);
    sub_1001B0E60((uint64_t)v104);
    sub_1001B0E60((uint64_t)v103);

    sub_10022CE70();
    uint64_t v41 = v125;
    goto LABEL_37;
  }

  sub_10022CFD4();
  sub_10022CE70();
  sub_10022CE70();
  sub_10022CE70();

LABEL_38:
  sub_1001B0FF8();
}

#error "100217978: call analysis failed (funcsize=43)"
id sub_1002179BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  uint64_t v6 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v7 = swift_allocObject(v6, 56LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037CBF0;
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  *(void *)(v7 + 32) = objc_msgSend(v8, "tu_predicateForConversationLinkDescriptorsWithActivated:", 0);
  *(void *)(v7 + 40) = objc_msgSend(v8, "tu_predicateForConversationLinkDescriptorsWithOriginatorHandle:", v1);
  static Date.now.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = objc_msgSend(v8, "tu_predicateForConversationLinkDescriptorsWithExpirationDateAfter:", isa);

  *(void *)(v7 + 4_Block_object_dispose(va, 8) = v10;
  uint64_t v21 = v7;
  specialized Array._endMutation()(v11, v12, v13, v14, v15, v16, v17, v18);
  return sub_10023D8E4(v21);
}

void sub_100217B20(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (NSNotFound.getter(a1) == a1)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v7, (uint64_t)qword_1004541B0);
    swift_errorRetain(a2);
    uint64_t v8 = swift_errorRetain(a2);
    os_log_t oslog = (os_log_t)Logger.logObject.getter(v8, v9, v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(oslog, v11);
    if (!os_log_type_enabled(oslog, v12))
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      return;
    }

    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v13 = 138412290;
    if (a2)
    {
      swift_errorRetain(a2);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v24 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
    }

    else
    {
      uint64_t v24 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
      uint64_t v15 = 0LL;
    }

    *uint64_t v14 = v15;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v12,  "Fetching conversation link descriptor count failed with error %@",  v13,  0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v14, 1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
LABEL_21:
    swift_slowDealloc(v13, -1LL, -1LL);

    return;
  }

  if ((uint64_t)sub_100227C74() < a1)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_1001B0D98(v16, (uint64_t)qword_1004541B0);
    os_log_t oslog = (os_log_t)Logger.logObject.getter(v17, v18, v19);
    os_log_type_t v20 = static os_log_type_t.default.getter(oslog);
    if (!os_log_type_enabled(oslog, v20))
    {

      return;
    }

    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v13 = 134217984;
    uint64_t v24 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v20,  "More inactive links exist than needed -- not generating %ld",  v13,  0xCu);
    goto LABEL_21;
  }

  unint64_t v21 = sub_100227C74();
  unint64_t v22 = v21 - a1;
  if (__OFSUB__(v21, a1))
  {
    __break(1u);
LABEL_24:
    __break(1u);
  }

  if ((v22 & 0x8000000000000000LL) != 0) {
    goto LABEL_24;
  }
  for (; v22; --v22)
    sub_100217EB8(a4, 0LL);
}

#error "100217F3C: call analysis failed (funcsize=45)"
void sub_100217F7C(int64_t a1, uint64_t a2, char *a3, char a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_s *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  os_log_type_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (NSNotFound.getter(v12) == a1)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v15, (uint64_t)qword_1004541B0);
    swift_errorRetain(a2);
    uint64_t v16 = swift_errorRetain(a2);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v16, v17, v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v34, v19);
    if (os_log_type_enabled(v34, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v22 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v21 = 138412290;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(a2);
        id v35 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v21 + 4, v21 + 12);
      }

      else
      {
        id v35 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v21 + 4, v21 + 12);
        uint64_t v23 = 0LL;
      }

      *unint64_t v22 = v23;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v20,  "Fetching conversation link descriptor count failed with error %@",  v21,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      id v32 = (uint64_t)v21;
      goto LABEL_18;
    }

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  else
  {
    uint64_t v24 = sub_100227C74();
    if (v24 > a1 || (a4 & 1) != 0 && (uint64_t v24 = sub_100227C74(), v24 == a1))
    {
      UUID.init()(v24);
      sub_100221980( (unint64_t)v14,  a5,  0,  0,  0,  a3,  (double)(unint64_t)[*(id *)&a3[OBJC_IVAR___CSDConversationLinkManager_serverBag] inactiveLinkPseudonymExpiry]);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      return;
    }

    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v25, (uint64_t)qword_1004541B0);
    uint64_t v26 = a3;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v26, v27, v28);
    uint64_t v30 = static os_log_type_t.error.getter(v34, v29);
    if (os_log_type_enabled(v34, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v31 = 134218240;
      id v35 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2048;
      id v35 = sub_100227C74();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v31 + 14, v31 + 22);

      _os_log_impl( (void *)&_mh_execute_header,  v34,  v30,  "Count of inactive links ({public}%ld) reached the cache limit ({public}%ld); not provisioning another.",
        (uint8_t *)v31,
        0x16u);
      id v32 = v31;
LABEL_18:
      swift_slowDealloc(v32, -1LL, -1LL);

      return;
    }
  }
}

void sub_100218370(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v4, (uint64_t)qword_1004541B0);
    id v5 = a1;
    swift_errorRetain(a2);
    id v6 = v5;
    uint64_t v7 = swift_errorRetain(a2);
    os_log_t oslog = (os_log_s *)Logger.logObject.getter(v7, v8, v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(oslog, v10);
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v13 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v12 = 138412546;
      if (a1)
      {
        uint64_t v25 = (uint64_t)v6;
        id v14 = v6;
      }

      else
      {
        uint64_t v25 = 0LL;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 4, v12 + 12);
      *uint64_t v13 = a1;

      *(_WORD *)(v12 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v25 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 14, v12 + 22);
      v13[1] = v23;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v11,  "Failed to provision inactive link %@ %@",  (uint8_t *)v12,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v13, 2LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      swift_errorRelease(a2);
      return;
    }

    swift_errorRelease(a2);

    swift_errorRelease(a2);
    swift_errorRelease(a2);
LABEL_14:

    return;
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v15, (uint64_t)qword_1004541B0);
  os_log_t oslog = a1;
  uint64_t v18 = (void *)Logger.logObject.getter(oslog, v16, v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (!os_log_type_enabled((os_log_t)v18, v19))
  {

    goto LABEL_14;
  }

  os_log_type_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  unint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
  *(_DWORD *)os_log_type_t v20 = 138412290;
  if (a1)
  {
    uint64_t v25 = (uint64_t)oslog;
    unint64_t v22 = oslog;
  }

  else
  {
    uint64_t v25 = 0LL;
  }

  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 4, v20 + 12);
  *unint64_t v21 = a1;

  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v18, v19, "Provisioned inactive link %@", v20, 0xCu);
  sub_1001AFF14(&qword_100447E80);
  swift_arrayDestroy(v21, 1LL);
  swift_slowDealloc(v21, -1LL, -1LL);
  swift_slowDealloc(v20, -1LL, -1LL);
}

#error "100218844: call analysis failed (funcsize=45)"
void sub_10021888C(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  os_log_s *v15;
  os_log_type_t v16;
  void (*v17)(void, void);
  uint8_t *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v26 = 0LL;
  if (!a1) {
    goto LABEL_12;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v10 = a1;
    }
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v10)) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }

  id v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v6)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
LABEL_12:
    uint64_t v9 = 0LL;
    goto LABEL_13;
  }

id sub_100218BE8()
{
  uint64_t v26 = v1;
  uint64_t v27 = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v4 = sub_1002179BC();
  id v24 = 0LL;
  id v5 = sub_10022CFA4(v3, "conversationLinkDescriptorsWithPredicate:limit:offset:error:", (uint64_t)v4);

  if (!v5)
  {
    id v13 = v24;
    uint64_t v14 = _convertNSErrorToError(_:)(0LL);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    return 0LL;
  }

  uint64_t v7 = sub_1001B4C00(v6, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v7);
  id v9 = 0LL;

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v16 = v8;
    }
    else {
      uint64_t v16 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001EE280();
    uint64_t v10 = (void *)_CocoaArrayWrapper.endIndex.getter(v16);
    sub_1001B0EB8();
    if (v10) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v10 = *(void **)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v10)
    {
LABEL_4:
      sub_1002734A0(0LL, (v8 & 0xC000000000000001LL) == 0, v8);
      if ((v8 & 0xC000000000000001LL) != 0) {
        id v11 = (id)sub_10022CE88(0LL);
      }
      else {
        id v11 = *(id *)(v8 + 32);
      }
      uint64_t v10 = v11;
      sub_1001B0EB8();
      id v12 = sub_1001D8FD4(objc_allocWithZone(&OBJC_CLASS___TUConversationLink), "initWithDescriptor:");

      goto LABEL_13;
    }
  }

  sub_1001B0EB8();
  id v12 = 0LL;
LABEL_13:
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v17 = sub_1001B0E98();
  sub_1001B0D98(v17, (uint64_t)qword_1004541B0);
  id v18 = sub_10022D0A0();
  sub_10022D0E8();
  os_log_type_t v19 = sub_1001B105C();
  if (sub_100211240(v19))
  {
    os_log_type_t v20 = (uint8_t *)sub_1001B0E78(12LL);
    unint64_t v21 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)os_log_type_t v20 = 138412290;
    id v24 = 0LL;
    if (v12) {
      id v22 = 0LL;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v20 + 4, v20 + 12);
    *unint64_t v21 = v12;

    sub_1001B0FD8((void *)&_mh_execute_header, (os_log_s *)v10, v19, "Asked for inactive link, returning: %@", v20);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v21);
    sub_1001B0E60((uint64_t)v21);
    sub_1001B0E60((uint64_t)v20);
  }

  else
  {
  }

  return v12;
}

void sub_100218F08()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = sub_10022D184((uint64_t)v9, "tu_predicateForConversationLinkDescriptorsWithPseudonym:");

  if ((v7 & 1) != 0)
  {
    uint64_t v11 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
    uint64_t v12 = sub_1001C7370(v11, 48LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B210;
    *(void *)(v12 + 32) = v10;
    id v13 = v10;
    id v14 = sub_10022D090(v8, "tu_predicateForConversationLinkDescriptorsWithActivated:");
    uint64_t v22 = sub_10022D058((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21);
    sub_1001B4C00(v22, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
    sub_10022CD28();
  }

  uint64_t v23 = *(void **)(v1 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v24 = sub_1001C7370((uint64_t)&unk_1003E2040, 32LL);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v24 + 24) = v3;
  sub_10022CC44((uint64_t)sub_100213EF4, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v26, v27);
  id v25 = sub_10022CF80();
  sub_10022CD70();
  sub_10022CCE8();
  sub_10022CC60(v23, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v25);

  sub_10022CD10();
  sub_10022CC84();
}

void sub_10021911C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)(a2);
  }
  uint64_t v2 = sub_1001D907C();
  id v5 = v3;
  v4(v2);
}

void (*sub_100219170(uint64_t a1))(uint64_t, uint64_t, uint64_t)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001B0F00();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
  if (v7)
  {
    uint64_t v27 = v1;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    id v28 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    uint64_t v10 = *(void *)(v29 + 72);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
    do
    {
      v8(v6, v9, v3);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v12 = sub_1001D8FD4(v28, "tu_predicateForConversationLinkDescriptorsWithGroupUUID:");

      uint64_t v13 = sub_1001F0E4C();
      uint64_t v15 = v14(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v12);
      uint64_t v18 = specialized ContiguousArray._endMutation()(v17);
      v9 += v10;
      --v7;
    }

    while (v7);
    sub_1001B4C00(v18, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
    id v19 = sub_1002A00E8((uint64_t)_swiftEmptyArrayStorage);
    id v20 =  sub_10022CFA4( *(id *)(v27 + OBJC_IVAR___CSDConversationLinkManager_dataSource),  "conversationLinkDescriptorsWithPredicate:limit:offset:error:",  (uint64_t)v19);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = sub_1001B4C00((uint64_t)v20, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))static Array._unconditionallyBridgeFromObjectiveC(_:)( v21,  v22);
      id v23 = 0LL;
    }

    else
    {
      id v24 = 0LL;
      _convertNSErrorToError(_:)(0LL);

      swift_willThrow(v25);
    }
  }

  return v8;
}

void sub_1002194A0()
{
  uint64_t v2 = v0;
  if ([*(id *)((char *)v0 + OBJC_IVAR___CSDConversationLinkManager_service) hasActiveAccounts])
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v3 = sub_1001B0E98();
    sub_10022CC30(v3, (uint64_t)qword_1004541B0);
    os_log_type_t v4 = sub_1001B105C();
    if (sub_1001D917C(v4))
    {
      uint64_t v5 = (uint8_t *)sub_1001B0E78(2LL);
      *(_WORD *)uint64_t v5 = 0;
      sub_10022CC9C((void *)&_mh_execute_header, v0, v1, "validateAllLinks: Checking for invalid links", v5);
      sub_1001B0E60((uint64_t)v5);
    }

    uint64_t v6 = *(void **)((char *)v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
    uint64_t v7 = sub_1001C7370((uint64_t)&unk_1003E1ED8, 24LL);
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    aBlock[4] = sub_10022C15C;
    void aBlock[5] = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100213EF4;
    void aBlock[3] = &unk_1003E1EF0;
    _Block_copy(aBlock);
    uint64_t v8 = v2;
    sub_10022CDC8();
    sub_10022CC60(v6, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", 0LL);
    sub_10022CD10();
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v9 = sub_1001B0E98();
    os_log_t oslog = (os_log_s *)sub_10022CC30(v9, (uint64_t)qword_1004541B0);
    os_log_type_t v11 = static os_log_type_t.error.getter(oslog, v10);
    if (os_log_type_enabled(oslog, v11))
    {
      id v12 = (uint8_t *)sub_1001B0E78(2LL);
      *(_WORD *)id v12 = 0;
      sub_10022CC9C( (void *)&_mh_execute_header,  oslog,  v11,  "validateAllLinks: No active accounts on the service, skipping link validation for now",  v12);
      sub_1001B0E60((uint64_t)v12);
    }
  }

void sub_100219688(uint64_t a1, uint64_t a2, uint64_t (*a3)(id *))
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v17 = (char *)v142 - v16;
  if (a1 && !a2)
  {
    uint64_t v144 = v15;
    uint64_t v145 = v14;
    uint64_t v146 = v13;
    Date.init(timeIntervalSinceNow:)(v12, -86400.0);
    uint64_t v153 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v149 = v8;
    uint64_t v148 = v17;
    id v143 = a3;
    uint64_t v147 = v9;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0) {
        uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v8 = a1;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v8);
    }

    else
    {
      uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
    }

    uint64_t v151 = (os_log_s *)a1;
    if (v27)
    {
      if (v27 < 1)
      {
        __break(1u);
        goto LABEL_60;
      }

      uint64_t v28 = 0LL;
      unint64_t v29 = a1 & 0xC000000000000001LL;
      uint64_t v30 = &selRef_ignoresBluetoothDeviceUID;
      uint64_t v31 = &selRef_ignoresBluetoothDeviceUID;
      uint64_t v150 = (uint64_t (*)(id *))(a1 & 0xC000000000000001LL);
      do
      {
        if (v29) {
          id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, a1);
        }
        else {
          id v32 = *(id *)(a1 + 8 * v28 + 32);
        }
        uint64_t v33 = v32;
        id v34 = objc_msgSend(objc_allocWithZone(TUConversationLink), v30[130], v32);
        if ([v34 v31[477]])
        {
          id v35 = v31;
          id v36 = v30;
          id v37 = v33;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          unint64_t v39 = *(void *)((v153 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v38 = *(void *)((v153 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v39 >= v38 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1LL);
          }
          uint64_t v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
          specialized Array._endMutation()(v40, v41, v42, v43, v44, v45, v46, v47);
          a1 = (uint64_t)v151;
          uint64_t v30 = v36;
          uint64_t v31 = v35;
          unint64_t v29 = (unint64_t)v150;
        }

        ++v28;
      }

      while (v27 != v28);
    }

    swift_bridgeObjectRelease(a1);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    uint64_t v49 = sub_1001B0D98(v48, (uint64_t)qword_1004541B0);
    id v50 = v147;
    uint64_t v51 = v144;
    unint64_t v52 = v148;
    uint64_t v53 = v149;
    uint64_t v150 = (uint64_t (*)(id *))v147[2];
    uint64_t v54 = ((uint64_t (*)(void (*)(void, void), char *, uint64_t))v150)(v144, v148, v149);
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v54, v55, v56);
    os_log_type_t v58 = static os_log_type_t.default.getter(v57);
    BOOL v59 = os_log_type_enabled(v57, v58);
    v142[1] = v49;
    if (v59)
    {
      uint64_t v60 = swift_slowAlloc(22LL, -1LL);
      uint64_t v61 = (void *)swift_slowAlloc(64LL, -1LL);
      uint64_t aBlock = v61;
      *(_DWORD *)uint64_t v60 = 136315394;
      sub_1001A9F18( &qword_100449980,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v53, v62);
      unint64_t v65 = v64;
      uint64_t v162 = sub_1001D7CF0(v63, v64, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease(v65);
      uint64_t v144 = (void (*)(void, void))v50[1];
      v144(v51, v149);
      *(_WORD *)(v60 + 12) = 2080;
      swift_beginAccess(&v153, v154, 0LL, 0LL);
      uint64_t v66 = v153;
      uint64_t v67 = sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      uint64_t v68 = swift_bridgeObjectRetain(v66);
      uint64_t v69 = Array.description.getter(v68, v67);
      unint64_t v71 = v70;
      uint64_t v72 = v66;
      uint64_t v53 = v149;
      swift_bridgeObjectRelease(v72);
      uint64_t v73 = v69;
      unint64_t v52 = v148;
      uint64_t v162 = sub_1001D7CF0(v73, v71, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease(v71);
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "validateAllLinks: Links expiration must be newer than date %s for descriptors: %s",  (uint8_t *)v60,  0x16u);
      swift_arrayDestroy(v61, 2LL);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    else
    {
      uint64_t v144 = (void (*)(void, void))v50[1];
      v144(v51, v53);
    }

    unint64_t v74 = v143;
    swift_beginAccess(&v153, v161, 0LL, 0LL);
    uint64_t v75 = v153;
    uint64_t v76 = v146;
    ((void (*)(uint64_t, char *, uint64_t))v150)(v146, v52, v53);
    uint64_t v77 = *((unsigned __int8 *)v50 + 80);
    uint64_t v78 = (v77 + 16) & ~v77;
    uint64_t v79 = swift_allocObject(&unk_1003E1F28, v78 + v145, v77 | 7);
    ((void (*)(uint64_t, uint64_t, uint64_t))v50[4])(v79 + v78, v76, v53);
    uint64_t v162 = v75;
    uint64_t v163 = sub_10022C1A4;
    uint64_t v164 = v79;
    uint64_t v80 = swift_allocObject(&unk_1003E1F50, 24LL, 7LL);
    *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = v74;
    swift_bridgeObjectRetain(v75);
    os_log_type_t v4 = v74;
    uint64_t v81 = sub_1001AFF14((uint64_t *)&unk_1004499C0);
    LazyFilterSequence.filter(_:)(&aBlock, sub_10022C1DC, v80, v81);
    swift_release(v80);
    uint64_t v3 = (uint64_t)aBlock;
    uint64_t v82 = (uint64_t (*)(id *))v156;
    a1 = (uint64_t)v157;
    swift_bridgeObjectRetain_n(aBlock, 2LL);
    swift_retain_n(a1, 2LL);
    uint64_t v83 = sub_10022B5EC(v3, v82, a1);
    if ((unint64_t)v3 >> 62)
    {
      if (v3 < 0) {
        uint64_t v140 = v3;
      }
      else {
        uint64_t v140 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v3);
      uint64_t v84 = (char *)_CocoaArrayWrapper.endIndex.getter(v140);
      swift_bridgeObjectRelease(v3);
    }

    else
    {
      uint64_t v84 = *(char **)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_release(a1);
    swift_bridgeObjectRelease(v3);
    uint64_t v150 = v82;
    if ((char *)v83 != v84)
    {
      swift_bridgeObjectRetain_n(v3, 4LL);
      uint64_t v85 = swift_retain_n(a1, 4LL);
      id v88 = (os_log_s *)Logger.logObject.getter(v85, v86, v87);
      os_log_type_t v89 = static os_log_type_t.default.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = swift_slowAlloc(22LL, -1LL);
        uint64_t v147 = v4;
        uint64_t v91 = v90;
        uint64_t v92 = swift_slowAlloc(32LL, -1LL);
        uint64_t v162 = v92;
        *(_DWORD *)uint64_t v91 = 134218242;
        swift_bridgeObjectRetain(v3);
        swift_retain(a1);
        uint64_t v93 = (char *)sub_10022B5EC(v3, v82, a1);
        uint64_t v94 = (void *)sub_10022B700(v93, v84, v3, (uint64_t (*)(char **))v82, a1);
        swift_bridgeObjectRelease_n(v3, 2LL);
        swift_release_n(a1, 2LL);
        uint64_t aBlock = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v156, v91 + 4, v91 + 12);
        swift_bridgeObjectRelease(v3);
        swift_release(a1);
        *(_WORD *)(v91 + 12) = 2080;
        uint64_t aBlock = (void *)v3;
        uint64_t v156 = (uint64_t)v82;
        uint64_t v157 = (void (*)(uint64_t, uint64_t, void *))a1;
        uint64_t v158 = sub_10021A900;
        uint64_t v159 = 0LL;
        swift_bridgeObjectRetain(v3);
        swift_retain(a1);
        uint64_t v95 = sub_1001AFF14((uint64_t *)&unk_1004499D0);
        uint64_t v96 = String.init<A>(reflecting:)(&aBlock, v95);
        unint64_t v98 = v97;
        uint64_t aBlock = (void *)sub_1001D7CF0(v96, v97, &v162);
        uint64_t v82 = v150;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v156, v91 + 14, v91 + 22);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease_n(v3, 2LL);
        swift_release_n(a1, 2LL);
        _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "validateAllLinks: We have some invalid links to cleanup {count: %ld, pseudonyms: %s}",  (uint8_t *)v91,  0x16u);
        swift_arrayDestroy(v92, 1LL);
        swift_slowDealloc(v92, -1LL, -1LL);
        uint64_t v99 = v91;
        os_log_type_t v4 = (char *)v147;
        swift_slowDealloc(v99, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v3, 4LL);
        swift_release_n(a1, 4LL);
      }

      uint64_t v100 = (void *)swift_allocObject(&unk_1003E1F78, 72LL, 7LL);
      v100[2] = sub_10021A954;
      void v100[3] = 0LL;
      v100[4] = v3;
      v100[5] = v82;
      v100[6] = a1;
      v100[7] = sub_10021A900;
      v100[8] = 0LL;
      uint64_t v162 = v3;
      uint64_t v163 = v82;
      uint64_t v164 = a1;
      uint64_t v165 = sub_10022C260;
      uint64_t v166 = v100;
      swift_bridgeObjectRetain_n(v3, 2LL);
      swift_retain_n(a1, 2LL);
      sub_10022A4B4(&v162);
      uint64_t v102 = v101;
      swift_bridgeObjectRelease(v3);
      swift_release(a1);
      swift_release(v100);
      sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
      id v103 = sub_1002A00E8(v102);
      id v104 = *(void **)&v4[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v105 = (void *)swift_allocObject(&unk_1003E1FA0, 48LL, 7LL);
      v105[2] = v4;
      v105[3] = v3;
      v105[4] = v82;
      v105[5] = a1;
      uint64_t v159 = sub_10022C270;
      uint64_t v160 = v105;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v156 = 1107296256LL;
      uint64_t v157 = sub_100211A48;
      uint64_t v158 = (void (*)(id *@<X0>, uint64_t *@<X8>))&unk_1003E1FB8;
      uint64_t v106 = _Block_copy(&aBlock);
      uint64_t v107 = v160;
      uint64_t v108 = v4;
      swift_bridgeObjectRetain(v3);
      swift_retain(a1);
      swift_release(v107);
      [v104 removeConversationLinkDescriptorsWithPredicate:v103 deleteReason:5 completion:v106];
      _Block_release(v106);
    }

    sub_100226D3C();
    uint64_t v110 = v109;
    if (!*(void *)(v109 + 16))
    {
      v144(v52, v149);
      swift_bridgeObjectRelease_n(v3, 2LL);
      swift_release_n(a1, 2LL);
      swift_bridgeObjectRelease(v110);
LABEL_50:
      swift_bridgeObjectRelease(v153);
      return;
    }

    uint64_t v111 = swift_bridgeObjectRetain_n(v109, 3LL);
    id v114 = (os_log_s *)Logger.logObject.getter(v111, v112, v113);
    os_log_type_t v115 = static os_log_type_t.default.getter(v114);
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = swift_slowAlloc(22LL, -1LL);
      uint64_t v117 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v117;
      *(_DWORD *)uint64_t v116 = 134218242;
      uint64_t v152 = *(void *)(v110 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v116 + 4, v116 + 12);
      swift_bridgeObjectRelease(v110);
      *(_WORD *)(v116 + 12) = 2080;
      uint64_t v152 = v110;
      swift_bridgeObjectRetain(v110);
      uint64_t v118 = sub_1001AFF14((uint64_t *)&unk_100447EE0);
      uint64_t v119 = String.init<A>(reflecting:)(&v152, v118);
      uint64_t v120 = v4;
      unint64_t v122 = v121;
      uint64_t v152 = sub_1001D7CF0(v119, v121, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v116 + 14, v116 + 22);
      unint64_t v123 = v122;
      os_log_type_t v4 = v120;
      swift_bridgeObjectRelease(v123);
      swift_bridgeObjectRelease_n(v110, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "validateAllLinks: We have some deleted links to remove from database {count: %ld, pseudonyms: %s}",  (uint8_t *)v116,  0x16u);
      swift_arrayDestroy(v117, 1LL);
      swift_slowDealloc(v117, -1LL, -1LL);
      swift_slowDealloc(v116, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v110, 3LL);
    }

    uint64_t v124 = *(void *)(v110 + 16);
    if (v124)
    {
      uint64_t v147 = v4;
      uint64_t aBlock = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v124);
      uint64_t v125 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
      id v126 = (void *)(v110 + 40);
      do
      {
        uint64_t v127 = *v126;
        swift_bridgeObjectRetain(*v126);
        NSString v128 = String._bridgeToObjectiveC()();
        id v129 = objc_msgSend(v125, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v128);

        uint64_t v130 = swift_bridgeObjectRelease(v127);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v130);
        uint64_t v131 = aBlock[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v131);
        uint64_t v132 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v131, v129);
        specialized ContiguousArray._endMutation()(v132);
        v126 += 2;
        --v124;
      }

      while (v124);
      uint64_t v8 = (uint64_t)aBlock;
      swift_bridgeObjectRelease(v110);
      uint64_t v27 = (uint64_t)v148;
      os_log_type_t v4 = (char *)v147;
    }

    else
    {
      swift_bridgeObjectRelease(v110);
      uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v27 = (uint64_t)v148;
    }

    a3 = v150;
    if ((v8 & 0x8000000000000000LL) == 0 && (v8 & 0x4000000000000000LL) == 0)
    {
      uint64_t v133 = v8 & 0xFFFFFFFFFFFFFF8LL;
LABEL_49:
      sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
      id v134 = sub_1002A00E8(v133);
      uint64_t v135 = *(void **)&v4[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v136 = (void *)swift_allocObject(&unk_1003E1FF0, 48LL, 7LL);
      v136[2] = v4;
      v136[3] = v3;
      v136[4] = a3;
      v136[5] = a1;
      uint64_t v159 = sub_10022C2C0;
      uint64_t v160 = v136;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v156 = 1107296256LL;
      uint64_t v157 = sub_100211A48;
      uint64_t v158 = (void (*)(id *@<X0>, uint64_t *@<X8>))&unk_1003E2008;
      uint64_t v137 = _Block_copy(&aBlock);
      uint64_t v138 = v160;
      uint64_t v139 = v4;
      swift_bridgeObjectRetain(v3);
      swift_retain(a1);
      swift_release(v138);
      [v135 removeLinkDescriptorsFromDataSourceWithPredicate:v134 completion:v137];
      _Block_release(v137);

      swift_bridgeObjectRelease_n(v3, 2LL);
      swift_release_n(a1, 2LL);
      v144(v27, v149);
      goto LABEL_50;
    }

uint64_t sub_10021A63C(id *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - v12;
  id v14 = [*a1 expirationDate];
  if (v14)
  {
    uint64_t v15 = v14;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v6, v11, v7);
    sub_1001A9670((uint64_t)v6, 0LL, 1LL, v7);
    if (sub_1001AB0AC((uint64_t)v6, 1LL, v7) != 1)
    {
      v16(v13, v6, v7);
      char v17 = static Date.> infix(_:_:)(v13, a2);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return v17 & 1;
    }
  }

  else
  {
    sub_1001A9670((uint64_t)v6, 1LL, 1LL, v7);
  }

  sub_1002011C8((uint64_t)v6, &qword_100447EA0);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = sub_1001B0D98(v18, (uint64_t)qword_1004541B0);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "validateAllLinks: no valid expirationDate", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  char v17 = 1;
  return v17 & 1;
}

uint64_t sub_10021A87C(id *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + OBJC_IVAR___CSDConversationLinkManager_service);
  NSString v3 = [*a1 pseudonym];
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v5 = v4;
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  unsigned int v6 = [v2 checkValidityForSelfPseudonymString:v3];

  return v6 ^ 1;
}

void sub_10021A900(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 pseudonym];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

void sub_10021A954(void *a1@<X8>)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = objc_msgSend(v2, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v3);

  *a1 = v4;
}

void sub_10021A9C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v29;
  a26 = v30;
  id v32 = v31;
  uint64_t v34 = v33;
  sub_10022D068();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v39 = sub_1001B0E98();
  sub_10022CF28(v39, (uint64_t)qword_1004541B0);
  sub_10022D1B8();
  uint64_t v40 = sub_10022D1B8();
  Logger.logObject.getter(v40, v41, v42);
  os_log_type_t v43 = sub_1001B105C();
  if (sub_100211240(v43))
  {
    uint64_t v57 = v34;
    uint64_t v58 = v28;
    uint64_t v44 = sub_1001B0E78(22LL);
    uint64_t v45 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v44 = 134218242;
    a13 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a13, &a14, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2112;
    if (v36)
    {
      sub_10022D1B8();
      uint64_t v48 = _swift_stdlib_bridgeErrorToNSError(v36);
      a13 = v48;
      sub_10022CF98((uint64_t)&a13, v49, v50, v44 + 22);
    }

    else
    {
      a13 = 0LL;
      sub_10022CF98((uint64_t)&a13, v46, v47, v44 + 22);
      uint64_t v48 = 0LL;
    }

    *uint64_t v45 = v48;
    sub_10022D014();
    sub_10022D014();
    sub_1001D9094((void *)&_mh_execute_header, v26, v43, v32, (uint8_t *)v44);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v45);
    sub_1001B0E60((uint64_t)v45);
    sub_1001B0E60(v44);

    uint64_t v28 = v58;
    uint64_t v34 = v57;
  }

  else
  {
    sub_10022D014();
    sub_10022D014();
  }

  if (NSNotFound.getter(v51) != v38)
  {
    unint64_t v52 = *(void **)(v28 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v52)
    {
      sub_10022D308();
      swift_bridgeObjectRetain(v27);
      swift_retain(v34);
      uint64_t v53 = sub_1001B1244();
      sub_10022A760(v53, v54, v34);
      sub_10022CCE8();
      uint64_t v55 = sub_1001B2428();
      sub_1001B4C00(v55, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_100207134();
      [v52 linkManager:v28 removedLinkDescriptorsFromIDSSignal:isa];

      swift_unknownObjectRelease(v52);
    }
  }

  sub_1001E9024();
}

void sub_10021AC3C()
{
  NSString v3 = v1;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10022D250();
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v10 = sub_1001B0E98();
  uint64_t v11 = sub_10022CD78(v10, (uint64_t)qword_1004541B0);
  Logger.logObject.getter(v11, v12, v13);
  os_log_type_t v14 = sub_1001B105C();
  if (os_log_type_enabled(v1, v14))
  {
    uint64_t v15 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v25 = sub_1001B0E78(32LL);
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v16 = sub_1001EE280();
    sub_10022D110(v16, v17, v18);
    sub_10022D0F8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v21, v15 + 12);
    sub_10022D178();
    sub_1001B0FD8((void *)&_mh_execute_header, v1, v14, "Invalidating pseudonym %s", v15);
    sub_1001B0F64(v25);
    sub_1001B0E60(v25);
    uint64_t v22 = (uint64_t)v15;
    NSString v3 = v1;
    sub_1001B0E60(v22);
  }

  else
  {
    sub_10022CCA4(v0);
  }

  os_log_type_t v23 = (void *)sub_1001C7370((uint64_t)&unk_1003E1E60, 64LL);
  void v23[2] = v2;
  v23[3] = v0;
  v23[4] = v7;
  void v23[5] = v5;
  v23[6] = v3;
  v23[7] = v9;
  sub_1001EE280();
  sub_1001B5D70(v7, v5);
  id v24 = v3;
  sub_10022D120();
  sub_10022CDC8();
  sub_10022CDB0();
}

void sub_10021ADE4( void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, uint64_t), uint64_t a6, char *a7, uint64_t a8)
{
  if (a1)
  {
    id v14 = objc_allocWithZone(&OBJC_CLASS___TUConversationLink);
    id v62 = a1;
    id v15 = objc_msgSend(v14, "initWithDescriptor:");
    if ([v15 isLocallyCreated])
    {
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      sub_1001B0D98(v16, (uint64_t)qword_1004541B0);
      uint64_t v17 = swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v17, v18, v19);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_type_t v23 = (void **)swift_slowAlloc(32LL, -1LL);
        uint64_t aBlock = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        swift_bridgeObjectRetain(a4);
        uint64_t v71 = sub_1001D7CF0(a3, a4, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Asking IDS to revoke pseudonym %s because it was locally generated for link being invalidated",  v22,  0xCu);
        swift_arrayDestroy(v23, 1LL);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(a4, 2LL);
      }

      uint64_t v46 = *(void **)&a7[OBJC_IVAR___CSDConversationLinkManager_service];
      NSString v47 = [v15 pseudonym];
      if (!v47)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v49 = v48;
        NSString v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v49);
      }

      uint64_t v50 = (void *)swift_allocObject(&unk_1003E1E88, 56LL, 7LL);
      v50[2] = a5;
      v50[3] = a6;
      v50[4] = a7;
      void v50[5] = v15;
      v50[6] = a8;
      uint64_t v69 = sub_10022C130;
      unint64_t v70 = v50;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v66 = 1107296256LL;
      uint64_t v67 = sub_1002130EC;
      uint64_t v68 = &unk_1003E1EA0;
      uint64_t v51 = _Block_copy(&aBlock);
      uint64_t v52 = (uint64_t)v70;
      sub_1001B5D70((uint64_t)a5, a6);
      uint64_t v53 = a7;
      id v54 = v15;
      swift_release(v52);
      [v46 revokePseudonymString:v47 completionHandler:v51];

      _Block_release(v51);
    }

    else
    {
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_1001B0D98(v34, (uint64_t)qword_1004541B0);
      uint64_t v35 = swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v35, v36, v37);
      os_log_type_t v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v60 = a6;
        uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v61 = a8;
        uint64_t v41 = (void **)swift_slowAlloc(32LL, -1LL);
        uint64_t aBlock = v41;
        *(_DWORD *)uint64_t v40 = 136315138;
        swift_bridgeObjectRetain(a4);
        uint64_t v71 = sub_1001D7CF0(a3, a4, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v40 + 4, v40 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Removing link with pseudonym %s from storage without invalidating as it's not locally created",  v40,  0xCu);
        swift_arrayDestroy(v41, 1LL);
        uint64_t v42 = v41;
        a8 = v61;
        swift_slowDealloc(v42, -1LL, -1LL);
        os_log_type_t v43 = v40;
        a6 = v60;
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(a4, 2LL);
      }

      sub_10021B6D0( (uint64_t)v15,  a8,  (uint64_t)a5,  a6,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  (uint64_t)v62,  (uint64_t)a5,  (uint64_t)aBlock,  v66,  (uint64_t)v67,  (uint64_t)v68,  (uint64_t)v69,  (uint64_t)v70,  v71,  v72[0],  v72[1],  v72[2],  v72[3],  v72[4],  v72[5]);
    }
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v25, (uint64_t)qword_1004541B0);
    uint64_t v26 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v26, v27, v28);
    os_log_type_t v31 = static os_log_type_t.error.getter(v29, v30);
    if (os_log_type_enabled(v29, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v33;
      *(_DWORD *)id v32 = 136315138;
      swift_bridgeObjectRetain(a4);
      uint64_t v71 = sub_1001D7CF0(a3, a4, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v31,  "Asked to invalidate link for pseudonym %s but none was found.",  v32,  0xCu);
      swift_arrayDestroy(v33, 1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    if (a5)
    {
      uint64_t v44 = a2;
      if (!a2)
      {
        sub_100227A98(3LL, 0LL);
        uint64_t v44 = v45;
      }

      swift_errorRetain(a2);
      a5(0LL, v44);
      swift_errorRelease(v44);
    }
  }

#error "10021B5A0: call analysis failed (funcsize=115)"
void __cdecl -[CSDConversationLinkManager invalidateLinkWithPseudonym:deleteReason:completionHandler:]( CSDConversationLinkManager *self,  SEL a2,  id a3,  int64_t a4,  id a5)
{
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CSDConversationLinkManager *v11;
  uint64_t v7 = (uint64_t (*)())_Block_copy(a5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v9 = v8;
  if (v7)
  {
    uint64_t v10 = swift_allocObject(&unk_1003E2540, 24LL, 7LL);
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    uint64_t v7 = sub_10022CAC8;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  uint64_t v11 = self;
  sub_10021AC3C();
  sub_1001B5D3C((uint64_t)v7, v10);
  swift_bridgeObjectRelease(v9);
}

void sub_10021B6D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v28;
  a26 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v36 = sub_1001B0E98();
  sub_1001B0D98(v36, (uint64_t)qword_1004541B0);
  id v37 = v35;
  sub_10022D238();
  os_log_type_t v38 = sub_1001B105C();
  os_log_type_t v39 = &selRef_payload;
  if (sub_10022CD18(v38))
  {
    uint64_t v40 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v52 = v31;
    uint64_t v41 = sub_1001B0E78(32LL);
    a14 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    id v42 = sub_10022D078(v41, "pseudonym");
    uint64_t v43 = sub_10022D0F0((uint64_t)v42);
    unint64_t v45 = v44;

    os_log_type_t v39 = &selRef_payload;
    sub_1001D7CF0(v43, v45, &a14);
    sub_10022D29C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v46, v47, v40 + 4, v40 + 12);

    swift_bridgeObjectRelease(v45);
    sub_1001B0FD8((void *)&_mh_execute_header, (os_log_s *)v35, v27, "Removing conversation link for pseudonym %s", v40);
    sub_1001B0F64(v41);
    uint64_t v48 = v41;
    uint64_t v31 = v52;
    sub_1001B0E60(v48);
    sub_1001B0E60((uint64_t)v40);
  }

  else
  {
  }

  id v50 = sub_10022D078(v49, v39[290]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v50);

  uint64_t v51 = sub_1001C7370((uint64_t)&unk_1003E1E38, 32LL);
  *(void *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
  *(void *)(v51 + 24) = v31;
  sub_1001B5D70(v33, v31);
  sub_100220DA4();
  sub_1001B2428();
  sub_100207134();
  sub_1001E9024();
}

uint64_t sub_10021B8C8(uint64_t result, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t))
{
  if (a3)
  {
    BOOL v5 = NSNotFound.getter() != result;
    return a3(v5, a2);
  }

  return result;
}

#error "10021B998: call analysis failed (funcsize=44)"
void sub_10021B9C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  sub_1001B0F10();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v17 = v9;
  uint64_t v10 = sub_1001F86B8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6,  v10);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  id v14 = (v13 + 56) & ~v13;
  id v15 = (char *)swift_allocObject(&unk_1003E1E10, v14 + v12, v13 | 7);
  *((void *)v15 + 2) = v17;
  *((void *)v15 + 3) = v8;
  *((void *)v15 + 4) = v4;
  *((void *)v15 + 5) = v2;
  *((void *)v15 + 6) = v0;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))( &v15[v14],  (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  sub_1001EE280();
  sub_1001B5D70(v4, v2);
  v0;
  sub_10022077C();
  sub_10020713C();
  sub_1001B0FF8();
}

void sub_10021BAC4( void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    id v25 = a1;
    sub_100224860((unint64_t)v25, a8, (uint64_t)a5, a6);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v14, (uint64_t)qword_1004541B0);
    uint64_t v15 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v15, v16, v17);
    os_log_type_t v20 = static os_log_type_t.error.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = v22;
      *(_DWORD *)os_log_type_t v21 = 136315138;
      swift_bridgeObjectRetain(a4);
      uint64_t v26 = sub_1001D7CF0(a3, a4, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v20,  "Asked to renew link for pseudonym %s but none was found.",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    if (a5)
    {
      uint64_t v23 = a2;
      if (!a2)
      {
        sub_100227A98(3LL, 0LL);
        uint64_t v23 = v24;
      }

      swift_errorRetain(a2);
      a5(0LL, v23);
      swift_errorRelease(v23);
    }
  }

void sub_10021BE18()
{
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_10022D250();
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v9 = sub_1001B0E98();
  uint64_t v10 = sub_10022CD78(v9, (uint64_t)qword_1004541B0);
  Logger.logObject.getter(v10, v11, v12);
  os_log_type_t v13 = sub_1001B105C();
  if (sub_10022CD18(v13))
  {
    uint64_t v14 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v24 = sub_1001B0E78(32LL);
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v15 = sub_1001EE280();
    sub_10022D110(v15, v16, v17);
    sub_10022D0F8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v20, v14 + 12);
    sub_10022D178();
    sub_1001B0FD8((void *)&_mh_execute_header, v1, v3, "Checking validity of pseudonym %s", v14);
    sub_1001B0F64(v24);
    sub_1001B0E60(v24);
    uint64_t v21 = (uint64_t)v14;
    uint64_t v4 = v1;
    sub_1001B0E60(v21);
  }

  else
  {
    sub_10022CCA4(v0);
  }

  uint64_t v22 = (void *)sub_1001C7370((uint64_t)&unk_1003E1D70, 56LL);
  void v22[2] = v2;
  v22[3] = v0;
  v22[4] = v8;
  void v22[5] = v6;
  v22[6] = v4;
  sub_1001EE280();
  sub_1001B5D70(v8, v6);
  uint64_t v23 = v4;
  sub_10022D120();
  sub_10022CDC8();
  sub_10022CDB0();
}

void sub_10021BF98( void *a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t, void), uint64_t a6, char *a7)
{
  id v123 = a2;
  uint64_t v124 = a5;
  uint64_t v11 = sub_1001AFF14(&qword_100447EA0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v114 - v15;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    unint64_t v121 = a4;
    id v21 = a1;
    id v22 = [v21 mutableCopy];
    _bridgeAnyObjectToAny(_:)(aBlock, v22);
    swift_unknownObjectRelease(v22);
    uint64_t v23 = sub_1001B4B94(0LL, (unint64_t *)&unk_100449970, &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr);
    if ((swift_dynamicCast(&v127, aBlock, (char *)&type metadata for Any + 8, v23, 6LL) & 1) != 0)
    {
      id v119 = v21;
      uint64_t v120 = v16;
      uint64_t v24 = a7;
      id v25 = v127;
      uint64_t v117 = a3;
      uint64_t v118 = v24;
      uint64_t v26 = *(void **)&v24[OBJC_IVAR___CSDConversationLinkManager_service];
      uint64_t v27 = &selRef_payload;
      NSString v28 = [v127 pseudonym];
      if (!v28)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v30 = v29;
        NSString v28 = String._bridgeToObjectiveC()();
        uint64_t v31 = v30;
        uint64_t v27 = &selRef_payload;
        swift_bridgeObjectRelease(v31);
      }

      id v32 = [v26 pseudonymForPseudonymString:v28];

      p_opt_inst_meths = &OBJC_PROTOCOL___CSDCoreTelephonyClient.opt_inst_meths;
      uint64_t v34 = "ts";
      uint64_t v122 = v17;
      id v123 = v25;
      if (v32)
      {
        if (!sub_1002279A8())
        {
          id v65 = [v32 properties];
          id v66 = [v65 expirationDate];

          static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
          [v25 setExpirationDate:isa];

          sub_10021611C();
          uint64_t v68 = v118;
          uint64_t v69 = *(void **)&v118[OBJC_IVAR___CSDConversationLinkManager_dataSource];
          uint64_t v70 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
          uint64_t v71 = swift_allocObject(v70, 40LL, 7LL);
          *(_OWORD *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
          *(void *)(v71 + 32) = v25;
          aBlock[0] = v71;
          specialized Array._endMutation()(v71, v72, v73, v74, v75, v76, v77, v78);
          uint64_t v79 = aBlock[0];
          sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
          id v80 = v25;
          Class v81 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v79);
          uint64_t v82 = swift_allocObject(&unk_1003E1DC0, 32LL, 7LL);
          *(void *)(v82 + swift_unknownObjectWeakDestroy(v0 + 16) = v80;
          *(void *)(v82 + 24) = v68;
          aBlock[4] = (uint64_t)sub_10022BFCC;
          uint64_t v126 = v82;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = (uint64_t)sub_1002130EC;
          void aBlock[3] = (uint64_t)&unk_1003E1DD8;
          uint64_t v83 = _Block_copy(aBlock);
          uint64_t v84 = v126;
          id v85 = v80;
          id v86 = v68;
          swift_release(v84);
          [v69 addOrUpdateConversationLinkDescriptors:v81 completion:v83];

          _Block_release(v83);
          uint64_t v87 = 1LL;
          id v88 = v124;
LABEL_31:
          uint64_t v109 = (uint64_t)v120;
          if (!v88)
          {

            return;
          }

          id v110 = v123;
          id v111 = [v123 expirationDate];
          if (v111)
          {
            uint64_t v112 = v111;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v111);

            uint64_t v113 = 0LL;
          }

          else
          {
            uint64_t v113 = 1LL;
          }

          sub_1001A9670(v109, v113, 1LL, v122);
          v88(v87, v109, 0LL);

          uint64_t v48 = v109;
          goto LABEL_37;
        }
      }

      else
      {
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v49 = type metadata accessor for Logger(0LL);
        sub_1001B0D98(v49, (uint64_t)qword_1004541B0);
        id v50 = v25;
        uint64_t v53 = (os_log_s *)Logger.logObject.getter(v50, v51, v52);
        os_log_type_t v55 = static os_log_type_t.error.getter(v53, v54);
        if (os_log_type_enabled(v53, v55))
        {
          os_log_t v116 = v53;
          uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v57 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v57;
          *(_DWORD *)uint64_t v56 = 136315138;
          uint64_t v58 = v56 + 12;
          id v114 = v56 + 4;
          os_log_type_t v115 = v56;
          id v59 = [v50 pseudonym];
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          unint64_t v62 = v61;

          id v127 = (id)sub_1001D7CF0(v60, v62, aBlock);
          id v63 = v58;
          uint64_t v27 = &selRef_payload;
          uint64_t v34 = "_TtC13callservicesd13CSDAVCMoments" + 32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v114, v63);
          swift_bridgeObjectRelease(v62);

          unint64_t v64 = v115;
          uint64_t v53 = v116;
          _os_log_impl( (void *)&_mh_execute_header,  v116,  v55,  "Could not retrieve IDS pseudonym object for pseudonym string %s",  v115,  0xCu);
          swift_arrayDestroy(v57, 1LL);
          swift_slowDealloc(v57, -1LL, -1LL);
          p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDCoreTelephonyClient + 40);
          swift_slowDealloc(v64, -1LL, -1LL);
        }

        else
        {
        }

        id v25 = v123;
      }

      if (p_opt_inst_meths[294] != (__objc2_meth_list *)-1LL) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v89 = type metadata accessor for Logger(0LL);
      sub_1001B0D98(v89, (uint64_t)qword_1004541B0);
      id v90 = v25;
      uint64_t v93 = (os_log_s *)Logger.logObject.getter(v90, v91, v92);
      os_log_type_t v94 = static os_log_type_t.default.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v96 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v96;
        *(_DWORD *)uint64_t v95 = *((void *)v34 + 430);
        os_log_t v116 = (os_log_t)(v95 + 4);
        id v97 = [v90 pseudonym];
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        unint64_t v100 = v99;

        id v127 = (id)sub_1001D7CF0(v98, v100, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v116, v95 + 12);
        swift_bridgeObjectRelease(v100);

        _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Removing invalid conversation link with pseudonym %s",  v95,  0xCu);
        swift_arrayDestroy(v96, 1LL);
        uint64_t v101 = v96;
        uint64_t v27 = &selRef_payload;
        swift_slowDealloc(v101, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      else
      {
      }

      id v88 = v124;
      id v102 = [v90 v27[290]];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
      uint64_t v104 = v103;

      uint64_t v105 = (void *)swift_allocObject(&unk_1003E1D98, 48LL, 7LL);
      uint64_t v106 = v118;
      unint64_t v107 = v121;
      v105[2] = v117;
      v105[3] = v107;
      v105[4] = v106;
      v105[5] = v90;
      id v108 = v90;
      v106;
      swift_bridgeObjectRetain(v107);
      sub_100220DA4();
      swift_release(v105);
      swift_bridgeObjectRelease(v104);
      uint64_t v87 = 0LL;
      goto LABEL_31;
    }

    a4 = v121;
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v35, (uint64_t)qword_1004541B0);
  uint64_t v36 = swift_bridgeObjectRetain_n(a4, 2LL);
  os_log_type_t v39 = (os_log_s *)Logger.logObject.getter(v36, v37, v38);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v122 = v17;
    uint64_t v41 = a3;
    id v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v43;
    *(_DWORD *)id v42 = 136315138;
    swift_bridgeObjectRetain(a4);
    id v127 = (id)sub_1001D7CF0(v41, a4, aBlock);
    uint64_t v17 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Asked to check validity of link for pseudonym %s but none was found.",  v42,  0xCu);
    swift_arrayDestroy(v43, 1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  unint64_t v44 = (void (*)(void, char *, id))v124;
  if (v124)
  {
    sub_1001A9670((uint64_t)v14, 1LL, 1LL, v17);
    id v45 = v123;
    id v46 = v123;
    if (!v123)
    {
      sub_100227A98(3LL, 0LL);
      id v46 = v47;
    }

    swift_errorRetain(v45);
    v44(0LL, v14, v46);
    swift_errorRelease(v46);
    uint64_t v48 = (uint64_t)v14;
LABEL_37:
    sub_1002011C8(v48, &qword_100447EA0);
  }

void sub_10021C95C(char a1, uint64_t a2, void *a3)
{
  if ((a1 & 1) != 0)
  {
    sub_100285E64();
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v5, (uint64_t)qword_1004541B0);
    id v6 = a3;
    swift_errorRetain(a2);
    id v7 = v6;
    uint64_t v8 = swift_errorRetain(a2);
    os_log_t oslog = (os_log_s *)Logger.logObject.getter(v8, v9, v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(oslog, v11);
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = v15;
      *(_DWORD *)uint64_t v13 = 136315394;
      id v16 = [v7 pseudonym];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v19 = v18;

      uint64_t v22 = sub_1001D7CF0(v17, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 4, v13 + 12);

      swift_bridgeObjectRelease(v19);
      *(_WORD *)(v13 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v22 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 14, v13 + 22);
      }

      else
      {
        uint64_t v22 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 14, v13 + 22);
        uint64_t v20 = 0LL;
      }

      *uint64_t v14 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v12,  "Saving expiration date for pseudonym %s failed with error %@",  (uint8_t *)v13,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v14, 1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_arrayDestroy(v15, 1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

void sub_10021CC74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (NSNotFound.getter(a1) == a1)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v11, (uint64_t)qword_1004541B0);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v12 = swift_errorRetain(a2);
    os_log_t oslog = (os_log_s *)Logger.logObject.getter(v12, v13, v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(oslog, v15);
    if (os_log_type_enabled(oslog, v16))
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      unint64_t v18 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v19;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v34 = sub_1001D7CF0(a3, a4, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v17 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v34 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14, v17 + 22);
      }

      else
      {
        uint64_t v34 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14, v17 + 22);
        uint64_t v20 = 0LL;
      }

      *unint64_t v18 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v16,  "Removal of invalid conversation link with pseudonym %%%s failed with error %@",  (uint8_t *)v17,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v18, 1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_arrayDestroy(v19, 1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  else
  {
    id v21 = *(void **)(a5 + OBJC_IVAR___CSDConversationLinkManager_delegate);
    if (v21)
    {
      uint64_t v22 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v23 = swift_allocObject(v22, 40LL, 7LL);
      *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
      *(void *)(v23 + 32) = a6;
      uint64_t v35 = v23;
      specialized Array._endMutation()(v23, v24, v25, v26, v27, v28, v29, v30);
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      swift_unknownObjectRetain(v21);
      id v31 = a6;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v35);
      [v21 linkManager:a5 removedLinkDescriptorsFromValidityCheck:isa];

      swift_unknownObjectRelease(v21);
    }

    sub_100285E64();
  }

void sub_10021D0DC(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10022C38C(a2, (uint64_t)v10, &qword_100447EA0);
  uint64_t v11 = type metadata accessor for Date(0LL);
  Class isa = 0LL;
  if (sub_1001AB0AC((uint64_t)v10, 1LL, v11) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  }

  if (a3) {
    a3 = (void *)_convertErrorToNSError(_:)(a3);
  }
  (*(void (**)(uint64_t, void, Class, void *))(a4 + 16))(a4, a1 & 1, isa, a3);
}

uint64_t sub_10021D1DC()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  id v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_10022CFDC((uint64_t)[v6 pseudonym]);
  sub_10022D2B0();
  uint64_t v12 = (void *)sub_1001C7370((uint64_t)&unk_1003E1CF8, 64LL);
  v12[2] = v7;
  void v12[3] = v5;
  v12[4] = v3;
  v12[5] = v0;
  v12[6] = v11;
  v12[7] = v9;
  id v13 = v7;
  sub_1001B5D70(v5, v3);
  v0;
  sub_1001EE280();
  sub_10022D004();
  sub_10022D130();
  return sub_10022CCC8(v1);
}

void sub_10021D27C( void *a1, uint64_t a2, void *a3, void (*a4)(void, uint64_t), uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    id v15 = a1;
    id v16 = [v15 mutableCopy];
    _bridgeAnyObjectToAny(_:)(aBlock, v16);
    swift_unknownObjectRelease(v16);
    uint64_t v17 = sub_1001B4B94(0LL, (unint64_t *)&unk_100449970, &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr);
    if ((swift_dynamicCast(&v58, aBlock, (char *)&type metadata for Any + 8, v17, 6LL) & 1) != 0)
    {
      unint64_t v18 = v58;
      sub_10022A364(a7, a8, v58);
      sub_10021611C();
      id v55 = *(id *)&a6[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v19 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
      *(void *)(v20 + 32) = v18;
      aBlock[0] = v20;
      specialized Array._endMutation()(v20, v21, v22, v23, v24, v25, v26, v27);
      uint64_t v28 = aBlock[0];
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      uint64_t v29 = (uint64_t)a4;
      id v54 = v18;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v28);
      id v31 = (void *)swift_allocObject(&unk_1003E1D20, 72LL, 7LL);
      void v31[2] = v15;
      v31[3] = a4;
      v31[4] = a5;
      void v31[5] = a6;
      void v31[6] = a3;
      v31[7] = a7;
      v31[8] = a8;
      aBlock[4] = (uint64_t)sub_10022BF24;
      uint64_t v57 = v31;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1002130EC;
      void aBlock[3] = (uint64_t)&unk_1003E1D38;
      id v32 = _Block_copy(aBlock);
      uint64_t v33 = v57;
      id v34 = v15;
      sub_1001B5D70(v29, a5);
      uint64_t v35 = a6;
      id v36 = a3;
      swift_bridgeObjectRetain(a8);
      swift_release(v33);
      [v55 addOrUpdateConversationLinkDescriptors:isa completion:v32];
      _Block_release(v32);

      return;
    }
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v37, (uint64_t)qword_1004541B0);
  id v38 = a3;
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v38, v39, v40);
  os_log_type_t v43 = static os_log_type_t.error.getter(v41, v42);
  if (os_log_type_enabled(v41, v43))
  {
    unint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v45;
    *(_DWORD *)unint64_t v44 = 136315138;
    id v46 = [v38 pseudonym];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v48 = a2;
    unint64_t v50 = v49;

    uint64_t v58 = (void *)sub_1001D7CF0(v47, v50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v44 + 4, v44 + 12);
    unint64_t v51 = v50;
    a2 = v48;
    swift_bridgeObjectRelease(v51);

    _os_log_impl( (void *)&_mh_execute_header,  v41,  v43,  "Asked to set link name for pseudonym %s but none was found.",  v44,  0xCu);
    swift_arrayDestroy(v45, 1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
  }

  if (a4)
  {
    uint64_t v52 = a2;
    if (!a2)
    {
      sub_100227A98(3LL, 0LL);
      uint64_t v52 = v53;
    }

    swift_errorRetain(a2);
    a4(0LL, v52);
    swift_errorRelease(v52);
  }

void sub_10021D684( char a1, uint64_t a2, void *a3, void (*a4)(void, void), uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v13 = a9;
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v14, (uint64_t)qword_1004541B0);
    id v15 = a3;
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v15, v16, v17);
    os_log_type_t v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v49 = a8;
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v48;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v21 = a4;
      id v22 = [v15 pseudonym];
      uint64_t v23 = a7;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      unint64_t v26 = v25;

      a4 = v21;
      uint64_t v13 = a9;
      uint64_t v27 = v24;
      a7 = v23;
      uint64_t v52 = sub_1001D7CF0(v27, v26, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v20 + 4, v20 + 12);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Updated link name for pseudonym %s", v20, 0xCu);
      swift_arrayDestroy(v48, 1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
      uint64_t v28 = v20;
      a8 = v49;
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
    }

    sub_10022A3A8(a8, v13, a7);
    if (a4) {
      a4(a7, 0LL);
    }
    sub_100285E64();
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v30, (uint64_t)qword_1004541B0);
    id v31 = a3;
    swift_errorRetain(a2);
    id v32 = v31;
    uint64_t v33 = swift_errorRetain(a2);
    id v36 = (os_log_s *)Logger.logObject.getter(v33, v34, v35);
    os_log_type_t v38 = static os_log_type_t.error.getter(v36, v37);
    if (os_log_type_enabled(v36, v38))
    {
      unint64_t v51 = a4;
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v50;
      *(_DWORD *)uint64_t v39 = 136315394;
      id v41 = [v32 pseudonym];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      unint64_t v44 = v43;

      uint64_t v52 = sub_1001D7CF0(v42, v44, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v39 + 4, v39 + 12);

      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v39 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v52 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v39 + 14, v39 + 22);
      }

      else
      {
        uint64_t v52 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v39 + 14, v39 + 22);
        uint64_t v45 = 0LL;
      }

      *uint64_t v40 = v45;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v38,  "Saving link name for pseudonym %s failed with error %@",  (uint8_t *)v39,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v40, 1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_arrayDestroy(v50, 1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);

      a4 = v51;
      if (!v51) {
        return;
      }
    }

    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);

      if (!a4) {
        return;
      }
    }

    uint64_t v46 = a2;
    if (!a2)
    {
      sub_100227A98(3LL, 0LL);
      uint64_t v46 = v47;
    }

    swift_errorRetain(a2);
    a4(0LL, v46);
    swift_errorRelease(v46);
  }

void sub_10021DC6C(void *a1, void *a2, uint64_t a3, void *a4)
{
  if ([a1 type] == 10 && objc_msgSend(a1, "hasLink"))
  {
    uint64_t v7 = sub_10027A6E4(a1);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      id v11 = [objc_allocWithZone((Class)CSDMessagingEncryptedConversationMessage) init];
      if (v11)
      {
        id v12 = v11;
        id v13 = [a2 publicKey];
        uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v16 = v15;

        id v17 = objc_allocWithZone((Class)type metadata accessor for LetMeInRequestorKeyAgreement(0LL));
        sub_1001BA748(v14, v16);
        uint64_t v58 = v12;
        id v48 = v47;
        uint64_t v49 = sub_1001BAAE4(v9, v10);
        unint64_t v51 = v50;
        uint64_t v53 = v52;
        unint64_t v55 = v54;
        sub_1001BB31C((uint64_t)v49, v50);
        sub_1001BB31C(v53, v55);
        sub_10022A438((uint64_t)v49, v51, v58, (SEL *)&selRef_setConversationMessageBytes_);
        sub_10022A438(v53, v55, v58, (SEL *)&selRef_setPublicKey_);
        uint64_t v56 = (void (*)(void *, id, id, void))a4[2];
        id v57 = v58;
        v56(a4, v57, v48, 0LL);
        sub_1001BB39C(v53, v55);
        sub_1001BB39C((uint64_t)v49, v51);

        sub_1001BB464(v9, v10);
LABEL_18:
        _Block_release(a4);
        return;
      }

      sub_1001BB464(v9, v10);
    }

    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    uint64_t v38 = sub_1001B0D98(v37, (uint64_t)qword_1004541B0);
    id v41 = (os_log_s *)Logger.logObject.getter(v38, v39, v40);
    os_log_type_t v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Failed to retrieve the data bytes from the let me in request, or failed to init a CSDMessagingEncryptedConversationMessage",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    sub_100227A98(7LL, 0LL);
    uint64_t v45 = v44;
    uint64_t v46 = (void *)_convertErrorToNSError(_:)(v44);
    ((void (*)(void *, void, void, void *))a4[2])(a4, 0LL, 0LL, v46);

    goto LABEL_18;
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v18, (uint64_t)qword_1004541B0);
  id v19 = a1;
  id v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
  os_log_type_t v24 = static os_log_type_t.error.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    uint64_t v60 = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    LODWORD(v59) = [v19 type];
    type metadata accessor for CSDMessagingConversationMessageType(0LL);
    uint64_t v28 = String.init<A>(reflecting:)(&v59, v27);
    unint64_t v30 = v29;
    uint64_t v59 = sub_1001D7CF0(v28, v29, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v25 + 4, v25 + 12);

    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v25 + 12) = 2080;
    LOBYTE(v59) = [v19 hasLink] ^ 1;
    uint64_t v31 = String.init<A>(reflecting:)(&v59, &type metadata for Bool);
    unint64_t v33 = v32;
    uint64_t v59 = sub_1001D7CF0(v31, v32, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v25 + 14, v25 + 22);

    swift_bridgeObjectRelease(v33);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v24,  "Failed to encrypt let me in request because either the type was wrong (%s or missing the link (%s",  (uint8_t *)v25,  0x16u);
    swift_arrayDestroy(v26, 2LL);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
  }

  sub_100227A98(7LL, 0LL);
  uint64_t v35 = v34;
  id v36 = (void *)_convertErrorToNSError(_:)(v34);
  ((void (*)(void *, void, void, void *))a4[2])(a4, 0LL, 0LL, v36);

  _Block_release(a4);
}

void sub_10021E59C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  unint64_t v97 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = type metadata accessor for SymmetricKey(0LL);
  __chkstk_darwin(v29);
  sub_1001D9040();
  uint64_t v98 = v30;
  sub_1001AFF14(&qword_1004499B8);
  sub_1001B0E88();
  __chkstk_darwin(v31);
  sub_1001B0F00();
  uint64_t v34 = v33 - v32;
  uint64_t v35 = sub_10022D0C4();
  sub_1001B0E88();
  __chkstk_darwin(v36);
  sub_1001B0F00();
  uint64_t v39 = (void *)(v38 - v37);
  id v41 = sub_1001F0E20(v40, "type");
  if ((_DWORD)v41 != 16
    || (id v42 = sub_1001F0E20((uint64_t)v41, "hasLink"), !(_DWORD)v42)
    || (id v43 = sub_1001F0E20((uint64_t)v42, "hasIsLetMeInApproved"), !(_DWORD)v43))
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v49 = sub_1001B0E98();
    sub_1001B0D98(v49, (uint64_t)qword_1004541B0);
    id v50 = v28;
    sub_10022D0E8();
    os_log_type_t v51 = sub_1001B10E8();
    if (!sub_10022CCC0((os_log_s *)v39))
    {

      goto LABEL_12;
    }

    uint64_t v52 = sub_1001B0E78(32LL);
    uint64_t v53 = sub_1001B0E78(96LL);
    v99[0] = v53;
    *(_DWORD *)uint64_t v52 = 136315650;
    LODWORD(v100) = sub_1001B115C(v53, "type");
    type metadata accessor for CSDMessagingConversationMessageType(0LL);
    uint64_t v55 = String.init<A>(reflecting:)(&v100, v54);
    uint64_t v57 = sub_10022D20C(v55, v56);
    sub_10022CF14(v57, v58, v59, v52 + 12);

    uint64_t v60 = sub_1001E43E0();
    *(_WORD *)(v52 + 12) = 2080;
    LOBYTE(v100) = sub_1001B115C(v60, "hasLink") ^ 1;
    uint64_t v61 = sub_10022D214();
    uint64_t v100 = sub_10022D20C(v61, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &a9, v52 + 14, v52 + 22);

    uint64_t v63 = sub_1001B0EC0();
    *(_WORD *)(v52 + 22) = 2080;
    LOBYTE(v100) = sub_1001B115C(v63, "hasIsLetMeInApproved") ^ 1;
    uint64_t v64 = sub_10022D214();
    uint64_t v66 = sub_10022D20C(v64, v65);
    sub_10022CF14(v66, v67, v68, v52 + 32);

    sub_1001E43E0();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v39,  v51,  "Failed to encrypt let me in response because either the type was wrong (%s, missing the link %s, or approval was n ot specified (%s)",  (uint8_t *)v52,  0x20u);
    swift_arrayDestroy(v53, 3LL);
    sub_1001B0E60(v53);
    uint64_t v69 = v52;
    goto LABEL_9;
  }

  uint64_t v44 = (uint64_t)v39;
  id v45 = sub_1001B115C((uint64_t)v43, "value");
  uint64_t v39 = (void *)sub_10022D0F0((uint64_t)v45);
  uint64_t v47 = v46;

  id v48 = (os_log_s *)sub_1002208D8();
  swift_bridgeObjectRelease(v47);
  if (!v48)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v76 = sub_1001B0E98();
    sub_10022CC30(v76, (uint64_t)qword_1004541B0);
    os_log_type_t v77 = sub_1001B10E8();
    if (!sub_1001D9224(v77)) {
      goto LABEL_10;
    }
    uint64_t v78 = (_WORD *)sub_1001B0E78(2LL);
    sub_10022D0DC(v78);
    sub_10022CC70((void *)&_mh_execute_header, v79, v80, "Failed to retrieve link");
    uint64_t v69 = 0LL;
LABEL_9:
    sub_1001B0E60(v69);
LABEL_10:

    goto LABEL_12;
  }

  uint64_t v70 = v48;
  sub_10027AE64(v34);
  if (sub_1001AB0AC(v34, 1LL, v35) == 1)
  {
    sub_1002011C8(v34, &qword_1004499B8);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v71 = sub_1001B0E98();
    sub_10022CC30(v71, (uint64_t)qword_1004541B0);
    os_log_type_t v72 = sub_1001B10E8();
    if (sub_1001D9224(v72))
    {
      uint64_t v73 = (_WORD *)sub_1001B0E78(2LL);
      sub_10022D0DC(v73);
      sub_10022CC70( (void *)&_mh_execute_header,  v74,  v75,  "Failed to initialize key agreement from link's private key, or private key is absent, aborting.");
      sub_1001B0E60(0LL);
    }
  }

  else
  {
    sub_10022BE1C(v34, v44);
    uint64_t v81 = sub_10027A6E4(v28);
    if (v82 >> 60 != 15)
    {
      uint64_t v70 = (os_log_s *)v81;
      uint64_t v83 = v82;
      id v84 = [objc_allocWithZone((Class)CSDMessagingEncryptedConversationMessage) init];
      if (v84)
      {
        id v85 = v84;
        v99[0] = v24;
        v99[1] = v97;
        sub_1001BB31C(v24, v97);
        SymmetricKey.init<A>(data:)(v99, &type metadata for Data, &protocol witness table for Data);
        uint64_t v86 = (uint64_t)v70;
        id v90 = sub_10024DE38((uint64_t)v70, v83, v98);
        sub_1001BB31C((uint64_t)v90, v91);
        uint64_t v92 = sub_10022D2FC();
        sub_10022A438(v92, v93, v85, v94);
        sub_10022D14C(v86);

        uint64_t v95 = sub_10022D2FC();
        sub_1001BB39C(v95, v96);
        sub_10022CEF4();
        sub_10022BD98(v44);
        goto LABEL_12;
      }

      sub_10022D14C((uint64_t)v70);
    }

    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v87 = sub_1001B0E98();
    sub_10022CC30(v87, (uint64_t)qword_1004541B0);
    os_log_type_t v88 = sub_1001E0A4C();
    if (sub_1001D917C(v88))
    {
      uint64_t v89 = (uint8_t *)sub_1001B0E78(2LL);
      *(_WORD *)uint64_t v89 = 0;
      sub_10022CC9C( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Failed to retrieve the data bytes from the let me in response, or failed to init a CSDMessagingEncryptedConversationMessage",  v89);
      sub_1001B0E60((uint64_t)v89);
    }

    sub_10022BD98(v44);
  }

#error "10021EE18: call analysis failed (funcsize=40)"
void sub_10021EE50()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  sub_1001B0F10();
  sub_10022D068();
  uint64_t v4 = v3;
  id v6 = v5;
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  unint64_t v8 = sub_1001C7370(v7, 48LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v9 = sub_10022D078(v8, "value");
  unint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  id v12 = v11;

  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + 40) = v12;
  sub_1002863F0();
  sub_1001B0EC0();
  sub_100275F30(v6, v4, v2, v1, v0);
  sub_1001B0FF8();
}

void sub_10021EF08( void *a1, void *a2, void *a3, void *a4, void (**a5)(void, void, void, void))
{
  uint64_t v10 = swift_allocObject(&unk_1003E2450, 24LL, 7LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  _Block_copy(a5);
  if ([a1 hasPublicKey] && objc_msgSend(a1, "hasConversationMessageBytes"))
  {
    id v11 = [a2 value];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v13 = v12;

    uint64_t v14 = (void *)swift_allocObject(&unk_1003E2478, 64LL, 7LL);
    v14[2] = a4;
    v14[3] = a1;
    v14[4] = a2;
    v14[5] = a3;
    v14[6] = sub_10022C6C8;
    void v14[7] = v10;
    a4;
    id v15 = a1;
    id v16 = a2;
    id v17 = a3;
    swift_retain(v10);
    sub_10022077C();
    swift_release(v14);
    swift_bridgeObjectRelease(v13);
    swift_release(v10);
    _Block_release(a5);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v18, (uint64_t)qword_1004541B0);
    id v19 = a1;
    unint64_t v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
    os_log_type_t v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      uint64_t v25 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v25 = 67109376;
      unsigned int v30 = [v19 hasPublicKey];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 8);
      *(_WORD *)(v25 + _Block_object_dispose(va, 8) = 1024;
      unsigned int v29 = [v19 hasConversationMessageBytes];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v25 + 10, v25 + 14);

      _os_log_impl( (void *)&_mh_execute_header,  v22,  v24,  "Failed to decrypt conversation message because the encrypted message either was missing the public key (%{BOOL}d) or missing the encrypted bytes (%{BOOL}d)",  (uint8_t *)v25,  0xEu);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
    }

    sub_100227A98(8LL, 0LL);
    uint64_t v27 = v26;
    uint64_t v28 = (void *)_convertErrorToNSError(_:)(v26);
    ((void (**)(void, void, void, void *))a5)[2](a5, 0LL, 0LL, v28);

    swift_release(v10);
    _Block_release(a5);
  }

void sub_10021F1E0()
{
  id v6 = v5;
  unint64_t v8 = v7;
  if ([v7 hasPublicKey] && objc_msgSend(v8, "hasConversationMessageBytes"))
  {
    sub_10022CFDC((uint64_t)[v6 value]);
    sub_10022D2B0();
    uint64_t v9 = (void *)sub_1001C7370((uint64_t)&unk_1003E1CD0, 64LL);
    void v9[2] = v1;
    void v9[3] = v8;
    void v9[4] = v6;
    void v9[5] = v3;
    void v9[6] = v2;
    v9[7] = v0;
    id v10 = v1;
    id v11 = v8;
    id v12 = v6;
    id v13 = v3;
    sub_10022CD70();
    sub_10022D004();
    sub_10022D130();
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v14 = sub_1001B0E98();
    sub_10022CF28(v14, (uint64_t)qword_1004541B0);
    id v15 = v8;
    Logger.logObject.getter(v15, v16, v17);
    os_log_type_t v18 = sub_1001E0A4C();
    if (sub_1001BB5B0(v18))
    {
      uint64_t v19 = sub_1001B0E78(14LL);
      *(_DWORD *)uint64_t v19 = 67109376;
      unsigned int v23 = [v15 hasPublicKey];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v19 + 4, v19 + 8);
      *(_WORD *)(v19 + _Block_object_dispose(va, 8) = 1024;
      unsigned int v22 = [v15 hasConversationMessageBytes];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v19 + 10, v19 + 14);

      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v1,  (os_log_type_t)v6,  "Failed to decrypt conversation message because the encrypted message either was missing the public key (%{BOOL}d) or missing the encrypted bytes (%{BOOL}d)",  (uint8_t *)v19,  0xEu);
      sub_1001B0E60(v19);
    }

    else
    {
    }

    sub_10022CEC8(8LL);
    uint64_t v21 = v20;
    v2(0LL, 0LL, 0xF000000000000000LL, v20);
  }

void sub_10021F400( void *a1, uint64_t a2, void *a3, void *a4, uint8_t *a5, os_log_s *a6, void (*a7)(void, void, unint64_t, void *), uint64_t a8)
{
  uint64_t v70 = a8;
  uint64_t v71 = a7;
  uint64_t v67 = a5;
  os_log_t v68 = a6;
  id v69 = a3;
  uint64_t v11 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = sub_1001AFF14(&qword_1004499B8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  __chkstk_darwin(v21);
  unsigned int v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 || !a1)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v36, (uint64_t)qword_1004541B0);
    swift_errorRetain(a2);
    uint64_t v37 = swift_errorRetain(a2);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v37, v38, v39);
    os_log_type_t v42 = static os_log_type_t.error.getter(v40, v41);
    if (os_log_type_enabled(v40, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v43 = 138412290;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v72 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v43 + 4, v43 + 12);
      }

      else
      {
        uint64_t v72 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v43 + 4, v43 + 12);
        uint64_t v45 = 0LL;
      }

      *uint64_t v44 = v45;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v42,  "Failed to retrieve link with error %@) triggering link recovery for LMI",  v43,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v44, 1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v46 = v71;
    sub_10021EE50();
    sub_100227A98(3LL, 0LL);
    uint64_t v35 = v47;
    v46(0LL, 0LL, 0xF000000000000000LL, v47);
    goto LABEL_19;
  }

  id v24 = a1;
  sub_10027AE64((uint64_t)v20);
  if (sub_1001AB0AC((uint64_t)v20, 1LL, v21) == 1)
  {
    uint64_t v25 = v24;
    sub_1002011C8((uint64_t)v20, &qword_1004499B8);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_1001B0D98(v26, (uint64_t)qword_1004541B0);
    unsigned int v30 = (os_log_s *)Logger.logObject.getter(v27, v28, v29);
    os_log_type_t v32 = static os_log_type_t.error.getter(v30, v31);
    if (os_log_type_enabled(v30, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v32,  "Failed to initialize key agreement from link's private key, or private key is absent, aborting.",  v33,  2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    sub_100227A98(8LL, 0LL);
    uint64_t v35 = v34;
    v71(0LL, 0LL, 0xF000000000000000LL, v34);

LABEL_19:
    return;
  }

  id v69 = v24;
  sub_10022BE1C((uint64_t)v20, (uint64_t)v23);
  sub_10024E038(v15, a4);
  uint64_t v49 = v48;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v15, v11);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v50 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v50, (uint64_t)qword_1004541B0);
  id v51 = v49;
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v51, v52, v53);
  os_log_type_t v55 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    os_log_t v68 = v54;
    unint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v67 = v56;
    *(_DWORD *)unint64_t v56 = 138412290;
    unint64_t v65 = v56 + 4;
    uint64_t v72 = (uint64_t)v51;
    id v57 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v65, v56 + 12);
    uint64_t v58 = v66;
    void *v66 = v51;

    uint64_t v60 = v67;
    os_log_t v59 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, v55, "decryptedLetMeInRequest: %@", v67, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v58, 1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {
  }

  id v61 = v51;
  SymmetricKey.withUnsafeBytes<A>(_:)(&v72, sub_100258EE0, 0LL, &type metadata for Data);
  uint64_t v62 = v72;
  unint64_t v63 = v73;
  v71(v51, v72, v73, 0LL);
  sub_1001BB39C(v62, v63);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  sub_10022BD98((uint64_t)v23);
}

void sub_10021FBDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v9 = 0LL;
    goto LABEL_6;
  }

  Class isa = 0LL;
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v9 = _convertErrorToNSError(_:)(a4);
LABEL_6:
  id v10 = (id)v9;
  (*(void (**)(uint64_t, uint64_t, Class))(a5 + 16))(a5, a1, isa);
}

void sub_10021FC6C(void *a1, uint64_t a2, os_log_type_t a3)
{
  if ([a1 hasConversationMessageBytes])
  {
    if (LetMeInRequestorKeyAgreement.isExhausted.getter())
    {
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v6 = sub_1001B0E98();
      sub_10022CC30(v6, (uint64_t)qword_1004541B0);
      os_log_type_t v7 = sub_1001B10E8();
      if (!sub_1001D9224(v7)) {
        goto LABEL_14;
      }
      unint64_t v8 = (_WORD *)sub_1001B0E78(2LL);
      sub_10022D0DC(v8);
      sub_10022CC70( (void *)&_mh_execute_header,  v9,  v10,  "Failed to decrypt let me in response because the requestor's key agreement has already been used to decrypt a response.");
      uint64_t v11 = (uint64_t)v3;
LABEL_11:
      sub_1001B0E60(v11);
LABEL_14:

      return;
    }

    sub_10022A3EC(a1);
    if (v29 >> 60 == 15)
    {
      __break(1u);
    }

    else
    {
      uint64_t v30 = v28;
      unint64_t v31 = v29;
      sub_1001BAF04(v28, v29);
      sub_1001BB464(v30, v31);
    }
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v12 = sub_1001B0E98();
    sub_1001B0D98(v12, (uint64_t)qword_1004541B0);
    sub_10022D0A0();
    sub_10022D0E8();
    os_log_type_t v13 = sub_1001B10E8();
    if (sub_1001D9224(v13))
    {
      uint64_t v14 = sub_1001B0E78(14LL);
      *(_DWORD *)uint64_t v14 = 67109376;
      id v15 = sub_1001B115C(v14, "hasPublicKey");
      uint64_t v21 = sub_10022D154((uint64_t)v15, v16, v14 + 4, v14 + 8, v17, v18, v19, v20, v32, v34, (char)v15);
      *(_WORD *)(v14 + _Block_object_dispose(va, 8) = 1024;
      id v22 = sub_1001B115C(v21, "hasConversationMessageBytes");
      sub_10022D154((uint64_t)v22, v23, v14 + 10, v14 + 14, v24, v25, v26, v27, v33, v35, (char)v22);

      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)a1,  a3,  "Failed to decrypt conversation message because the encrypted message either was missing the public key (%{BOOL}d) or missing the encrypted bytes (%{BOOL}d)",  (uint8_t *)v14,  0xEu);
      uint64_t v11 = v14;
      goto LABEL_11;
    }
  }

void sub_10021FF50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  uint64_t v8 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v9 = swift_allocObject(v8, 56LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037CBF0;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  *(void *)(v9 + 32) = objc_msgSend(v10, "tu_predicateForConversationLinkDescriptorsWithActivated:", 1);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = objc_msgSend(v10, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v11);

  *(void *)(v9 + 40) = v12;
  id v13 = objc_msgSend(v10, "tu_predicateForConversationLinkDescriptorsWithPrivateKey:", 0);
  id v14 = [(id)objc_opt_self(NSCompoundPredicate) notPredicateWithSubpredicate:v13];

  *(void *)(v9 + 4_Block_object_dispose(va, 8) = v14;
  id v61 = (id)v9;
  specialized Array._endMutation()(v15, v16, v17, v18, v19, v20, v21, v22);
  sub_1001B4B94(0LL, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  id v23 = sub_10023D8E4(v9);
  uint64_t v24 = *(void **)(a4 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v61 = 0LL;
  id v25 = [v24 conversationLinkDescriptorsWithPredicate:v23 limit:0 offset:0 error:&v61];
  id v26 = v61;
  if (v25)
  {
    uint64_t v27 = v25;
    uint64_t v28 = sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
    uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);
    id v30 = v26;

    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0) {
        uint64_t v48 = v29;
      }
      else {
        uint64_t v48 = v29 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v29);
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_bridgeObjectRelease(v29);
      if (v49) {
        goto LABEL_4;
      }
    }

    else if (*(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_4:
      sub_1002734A0(0LL, (v29 & 0xC000000000000001LL) == 0, v29);
      if ((v29 & 0xC000000000000001LL) != 0) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v29);
      }
      else {
        id v31 = *(id *)(v29 + 32);
      }
      uint64_t v32 = v31;
      swift_bridgeObjectRelease(v29);
      uint64_t v47 = sub_1002264C4(v32, a1);
      ((void (**)(void, _DWORD *, void))a5)[2](a5, v47, 0LL);

      goto LABEL_22;
    }

    swift_bridgeObjectRelease(v29);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = sub_1001B0D98(v50, (uint64_t)qword_1004541B0);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v51, v52, v53);
    os_log_type_t v56 = static os_log_type_t.error.getter(v54, v55);
    if (os_log_type_enabled(v54, v56))
    {
      id v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v57 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v56,  "Cannot add invited member handles for pseudonym %%@ because no link matching this pseudonym was found",  v57,  2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    sub_100227A98(3LL, 0LL);
    os_log_t v59 = v58;
    uint64_t v60 = (void *)_convertErrorToNSError(_:)(v58);
    ((void (**)(void, void, void *))a5)[2](a5, 0LL, v60);
  }

  else
  {
    id v33 = v61;
    uint64_t v34 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v35);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v36, (uint64_t)qword_1004541B0);
    swift_errorRetain(v34);
    uint64_t v37 = swift_errorRetain(v34);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v37, v38, v39);
    os_log_type_t v42 = static os_log_type_t.error.getter(v40, v41);
    if (os_log_type_enabled(v40, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v43 = 138412290;
      swift_errorRetain(v34);
      uint64_t v45 = (void *)_swift_stdlib_bridgeErrorToNSError(v34);
      id v61 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v43 + 4, v43 + 12);
      *uint64_t v44 = v45;
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v42,  "Failed to add invited member handles with error %@)",  v43,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v44, 1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v34);
      swift_errorRelease(v34);
    }

    swift_errorRetain(v34);
    uint64_t v46 = (void *)_convertErrorToNSError(_:)(v34);
    ((void (**)(void, void, void *))a5)[2](a5, 0LL, v46);

    swift_errorRelease(v34);
    swift_errorRelease(v34);
  }

void sub_1002205C0(char a1)
{
  if ((a1 & 1) != 0) {
    sub_1002860B0();
  }
  else {
    sub_100285F1C();
  }
}

void sub_100220640()
{
}

void sub_1002206B8(char a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  ((void (**)(void, NSString))a3)[2](a3, v6);
  swift_bridgeObjectRelease(v5);

  _Block_release(a3);
}

void sub_10022077C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v8 = sub_1001C7370(v7, 48LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B210;
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  String._bridgeToObjectiveC()();
  id v10 = sub_1001D8FD4(v9, "tu_predicateForConversationLinkDescriptorsWithPseudonym:");
  sub_10022D280();
  *(void *)(v8 + 32) = v6;
  id v11 = sub_10022D090(v9, "tu_predicateForConversationLinkDescriptorsWithActivated:");
  uint64_t v19 = sub_10022D058((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
  sub_1001B4C00(v19, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  sub_10022CD28();
  uint64_t v20 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  uint64_t v21 = sub_1001C7370((uint64_t)&unk_1003E1C80, 32LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v21 + 24) = v2;
  sub_10022CC44((uint64_t)sub_100213EF4, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v23, v24);
  id v22 = sub_10022CF80();
  sub_10022CD70();
  sub_10022CCE8();
  sub_10022CC60(v20, "conversationLinkDescriptorsWithPredicate:limit:offset:completion:", (uint64_t)v22);
  sub_10022CD10();

  sub_10022CC84();
}

uint64_t sub_1002208D8()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
  uint64_t v4 = sub_1001C7370(v3, 48LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B210;
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = sub_1001D8FD4(v5, "tu_predicateForConversationLinkDescriptorsWithPseudonym:");

  *(void *)(v4 + 32) = v7;
  id v8 = sub_10022D090(v5, "tu_predicateForConversationLinkDescriptorsWithActivated:");
  *(void *)(v4 + 40) = v8;
  uint64_t v16 = specialized Array._endMutation()(v8, v9, v10, v11, v12, v13, v14, v15);
  sub_1001B4C00(v16, &qword_1004499B0, &OBJC_CLASS___NSCompoundPredicate_ptr);
  id v17 = sub_10023D8E4(v4);
  id v18 =  sub_10022CFA4( *(id *)(v2 + OBJC_IVAR___CSDConversationLinkManager_dataSource),  "conversationLinkDescriptorsWithPredicate:limit:offset:error:",  (uint64_t)v17);
  uint64_t v19 = 0LL;
  if (!v18)
  {
    id v25 = 0LL;
    sub_10022D190();

    swift_willThrow(v26);
    return v19;
  }

  uint64_t v20 = v18;
  uint64_t v21 = sub_1001B4C00((uint64_t)v18, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
  unint64_t v22 = sub_10022D160(v21);
  id v23 = 0LL;

  if (v22 >> 62)
  {
    sub_10022CF6C();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v1);
    sub_1001B0F5C();
    if (v19) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v19 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v19)
    {
LABEL_4:
      sub_1002734A0(0LL, (v22 & 0xC000000000000001LL) == 0, v22);
      if ((v22 & 0xC000000000000001LL) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v22);
      }
      else {
        id v24 = *(id *)(v22 + 32);
      }
      uint64_t v19 = (uint64_t)v24;
    }
  }

  sub_1001B0F5C();

  return v19;
}

#error "100220BA0: call analysis failed (funcsize=54)"
#error "100220C98: call analysis failed (funcsize=58)"
void sub_100220CD4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v4 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      id v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      id v7 = a1;
    }
    sub_1001B9234();
    if (_CocoaArrayWrapper.endIndex.getter(v7)) {
      goto LABEL_4;
    }
LABEL_11:
    sub_1001B0F5C();
    a1 = 0LL;
    goto LABEL_12;
  }

  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  sub_1001B9234();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_4:
  sub_1002734A0(0LL, (v4 & 0xC000000000000001LL) == 0, v4);
  if ((v4 & 0xC000000000000001LL) != 0) {
    NSString v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
  }
  else {
    NSString v6 = *(id *)(v4 + 32);
  }
  id v8 = v6;
  sub_1001B0F5C();
  a1 = (uint64_t)v8;
LABEL_12:
  uint64_t v9 = (id)a1;
  a3();
}

void sub_100220DA4()
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSPredicate);
  sub_1001F0E4C();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = objc_msgSend(v3, "tu_predicateForConversationLinkDescriptorsWithPseudonym:", v4);

  NSString v6 = *(void **)(v0 + OBJC_IVAR___CSDConversationLinkManager_dataSource);
  id v7 = sub_10022CC44((uint64_t)sub_100211A48, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v8, v9);
  sub_10022D310();
  sub_10022CCE8();
  [v6 removeConversationLinkDescriptorsWithPredicate:v5 deleteReason:v2 completion:v7];
  sub_10022D264();

  sub_10022CC84();
}

void sub_100220E88( unint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, char *a6, void (**a7)(void, void, void), double a8)
{
  uint64_t v138 = a5;
  int v137 = a4;
  uint64_t v142 = a3;
  unint64_t v140 = a1;
  uint64_t v141 = type metadata accessor for UUID(0LL);
  uint64_t v139 = *(void **)(v141 - 8);
  uint64_t v12 = __chkstk_darwin(v141);
  uint64_t v134 = v13;
  uint64_t v135 = &v121[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v12);
  uint64_t v15 = &v121[-v14];
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = &v121[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  uint64_t v131 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v133 = &v121[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v132 = v22;
  __chkstk_darwin(v21);
  id v24 = &v121[-v23];
  uint64_t v143 = swift_allocObject(&unk_1003E2630, 24LL, 7LL);
  *(void *)(v143 + swift_unknownObjectWeakDestroy(v0 + 16) = a7;
  uint64_t v136 = a6;
  uint64_t v26 = *(void (**)(uint64_t))&a6[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  uint64_t v25 = *(void *)&a6[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement + 8];
  _Block_copy(a7);
  uint64_t v27 = swift_retain(v25);
  uint64_t v144 = v24;
  v26(v27);
  swift_release(v25);
  id v28 = (id)TUNormalizedHandleForTUHandle(a2);
  if (!v28) {
    goto LABEL_10;
  }
  id v29 = v28;
  sub_10024D084(v28);
  uint64_t v31 = v30;
  uint64_t v32 = swift_bridgeObjectRelease(v30);
  if (!v31)
  {

LABEL_10:
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v49 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v49, (uint64_t)qword_1004541B0);
    uint64_t v50 = a2;
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v50, v51, v52);
    os_log_type_t v55 = static os_log_type_t.error.getter(v53, v54);
    uint64_t v37 = a7;
    if (os_log_type_enabled(v53, v55))
    {
      os_log_type_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v57 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v56 = 138412290;
      uint64_t aBlock = v50;
      uint64_t v58 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v147, v56 + 4, v56 + 12);
      *id v57 = a2;

      _os_log_impl((void *)&_mh_execute_header, v53, v55, "Cannot normalize value for originator handle %@", v56, 0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v57, 1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    else
    {

      uint64_t v53 = (os_log_s *)v50;
    }

    sub_100227A98(10LL, 0LL);
    id v29 = v59;
    uint64_t v47 = (void *)_convertErrorToNSError(_:)(v59);
    ((void (**)(void, void, void *))a7)[2](a7, 0LL, v47);
    goto LABEL_16;
  }

  uint64_t v33 = P256.KeyAgreement.PrivateKey.publicKey.getter(v32);
  uint64_t v34 = P256.KeyAgreement.PublicKey.compactRepresentation.getter(v33);
  unint64_t v36 = v35;
  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v16);
  if (v36 >> 60 == 15)
  {
    uint64_t v37 = a7;
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = sub_1001B0D98(v38, (uint64_t)qword_1004541B0);
    os_log_type_t v42 = (os_log_s *)Logger.logObject.getter(v39, v40, v41);
    os_log_type_t v44 = static os_log_type_t.error.getter(v42, v43);
    if (os_log_type_enabled(v42, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v44,  "Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when i nitializing the private key?",  v45,  2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    sub_100227A98(0LL, 0LL);
    uint64_t v47 = v46;
    uint64_t v48 = (void *)_convertErrorToNSError(_:)(v46);
    ((void (**)(void, void, void *))a7)[2](a7, 0LL, v48);

LABEL_16:
    goto LABEL_17;
  }

  unint64_t v127 = v36;
  uint64_t v128 = v34;
  uint64_t v60 = a7;
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v61 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v61, (uint64_t)qword_1004541B0);
  uint64_t v62 = v139;
  uint64_t v63 = v141;
  uint64_t v126 = (void (*)(_BYTE *, unint64_t, uint64_t))v139[2];
  v126(v15, v140, v141);
  uint64_t v64 = v142;
  swift_bridgeObjectRetain_n(v142, 2LL);
  id v65 = a2;
  os_log_t v68 = (os_log_s *)Logger.logObject.getter(v65, v66, v67);
  int v69 = static os_log_type_t.default.getter(v68);
  BOOL v70 = os_log_type_enabled(v68, (os_log_type_t)v69);
  id v129 = v60;
  id v130 = v29;
  if (v70)
  {
    int v122 = v69;
    id v123 = v68;
    uint64_t v71 = swift_slowAlloc(48LL, -1LL);
    uint64_t v125 = (void *)swift_slowAlloc(8LL, -1LL);
    Class isa = (Class)swift_slowAlloc(96LL, -1LL);
    uint64_t aBlock = (void **)&isa->isa;
    *(_DWORD *)uint64_t v71 = 136316162;
    sub_1001A9F18( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v63, v72);
    unint64_t v75 = v74;
    uint64_t v145 = sub_1001D7CF0(v73, v74, (uint64_t *)&aBlock);
    uint64_t v76 = v142;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &aBlock, v71 + 4, v71 + 12);
    swift_bridgeObjectRelease(v75);
    ((void (*)(_BYTE *, uint64_t))v62[1])(v15, v63);
    *(_WORD *)(v71 + 12) = 2112;
    uint64_t v145 = (uint64_t)v65;
    id v77 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &aBlock, v71 + 14, v71 + 22);
    *uint64_t v125 = a2;

    *(_WORD *)(v71 + 22) = 2080;
    if (v76)
    {
      uint64_t v145 = v76;
      swift_bridgeObjectRetain(v76);
      uint64_t v78 = sub_1001AFF14(&qword_1004499A0);
      uint64_t v79 = String.init<A>(reflecting:)(&v145, v78);
      unint64_t v81 = v80;
    }

    else
    {
      unint64_t v81 = 0xE300000000000000LL;
      uint64_t v79 = 7104878LL;
    }

    uint64_t v82 = v138;
    char v83 = v137;
    id v84 = v123;
    os_log_type_t v85 = v122;
    uint64_t v145 = sub_1001D7CF0(v79, v81, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &aBlock, v71 + 24, v71 + 32);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease_n(v76, 2LL);
    *(_WORD *)(v71 + 32) = 1024;
    LODWORD(v145) = v83 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 4, v71 + 34, v71 + 38);
    *(_WORD *)(v71 + 3_Block_object_dispose(va, 8) = 2080;
    uint64_t v145 = v82;
    type metadata accessor for TUConversationLinkLifetimeScope(0LL);
    uint64_t v87 = String.init<A>(reflecting:)(&v145, v86);
    unint64_t v89 = v88;
    uint64_t v145 = sub_1001D7CF0(v87, v88, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &aBlock, v71 + 40, v71 + 48);
    swift_bridgeObjectRelease(v89);
    _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "Provisioning pseudonym to generate link for groupUUID: %s, originatorHandle: %@, invitedHandles: %s, isActivated: %{BOOL}d, linkLifetimeScope: %s",  (uint8_t *)v71,  0x30u);
    sub_1001AFF14(&qword_100447E80);
    id v90 = v125;
    swift_arrayDestroy(v125, 1LL);
    swift_slowDealloc(v90, -1LL, -1LL);
    Class v91 = isa;
    swift_arrayDestroy(isa, 3LL);
    swift_slowDealloc(v91, -1LL, -1LL);
    swift_slowDealloc(v71, -1LL, -1LL);

    uint64_t v63 = v141;
    uint64_t v62 = v139;
  }

  else
  {
    ((void (*)(_BYTE *, uint64_t))v62[1])(v15, v63);

    swift_bridgeObjectRelease_n(v64, 2LL);
  }

  uint64_t v92 = v136;
  uint64_t v125 = *(void **)&v136[OBJC_IVAR___CSDConversationLinkManager_service];
  id v93 = v125;
  uint64_t v139 = String._bridgeToObjectiveC()();
  uint64_t v94 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v95 = swift_allocObject(v94, 48LL, 7LL);
  *(_OWORD *)(v95 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  id v96 = [v93 name];
  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  uint64_t v99 = v98;

  *(void *)(v95 + 32) = v97;
  *(void *)(v95 + 40) = v99;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v95);
  uint64_t v100 = v135;
  v126(v135, v140, v63);
  uint64_t v101 = v133;
  sub_10022BDD4((uint64_t)v144, (uint64_t)v133);
  uint64_t v102 = *((unsigned __int8 *)v62 + 80);
  uint64_t v103 = v62;
  uint64_t v104 = (v102 + 48) & ~v102;
  unint64_t v140 = (v104 + v134 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v105 = (v104 + v134 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v106 = *(unsigned __int8 *)(v131 + 80);
  uint64_t v107 = (v106 + v105 + 8) & ~v106;
  unint64_t v108 = (v132 + v107 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v109 = (char *)swift_allocObject(&unk_1003E2658, v108 + 8, v102 | v106 | 7);
  uint64_t v110 = v143;
  *((void *)v109 + 2) = sub_10022CACC;
  *((void *)v109 + 3) = v110;
  id v111 = v130;
  *((void *)v109 + 4) = v92;
  *((void *)v109 + 5) = v111;
  ((void (*)(char *, _BYTE *, uint64_t))v103[4])(&v109[v104], v100, v141);
  uint64_t v112 = &v109[v140];
  uint64_t v113 = v128;
  unint64_t v114 = v127;
  *(void *)uint64_t v112 = v128;
  *((void *)v112 + 1) = v114;
  v112[16] = v137 & 1;
  uint64_t v115 = v142;
  *(void *)&v109[v105] = v142;
  sub_10022BE1C((uint64_t)v101, (uint64_t)&v109[v107]);
  *(void *)&v109[v108] = v138;
  v147[3] = sub_10022BE60;
  uint64_t v148 = v109;
  uint64_t aBlock = _NSConcreteStackBlock;
  v147[0] = 1107296256LL;
  v147[1] = sub_10022368C;
  v147[2] = &unk_1003E2670;
  os_log_t v116 = _Block_copy(&aBlock);
  uint64_t v117 = v148;
  swift_bridgeObjectRetain(v115);
  swift_retain(v110);
  id v118 = v92;
  id v29 = v130;
  sub_1001E07F4(v113, v114);
  swift_release(v117);
  id v119 = v139;
  Class v120 = isa;
  [v125 provisionPseudonymForHandle:v29 featureID:v139 scopeID:0 expiryDuration:isa allowedServices:v116 completionHandler:a8];
  _Block_release(v116);

  sub_1001BB464(v113, v114);
  uint64_t v37 = v129;
LABEL_17:

  sub_10022BD98((uint64_t)v144);
  swift_release(v143);
  _Block_release(v37);
}

uint64_t sub_100221980(unint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, char *a6, double a7)
{
  uint64_t v128 = a5;
  int v129 = a4;
  uint64_t v134 = a3;
  unint64_t v130 = a1;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v132 = *(void *)(v10 - 8);
  uint64_t v133 = v10;
  uint64_t v11 = *(void *)(v132 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v127 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v116 - v13;
  uint64_t v15 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for ConversationLinkKeyAgreement(0LL);
  uint64_t v125 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v125 + 64);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v126 = (uint64_t)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v116 - v22;
  uint64_t v131 = a6;
  uint64_t v25 = *(void (**)(uint64_t))&a6[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  uint64_t v24 = *(void *)&a6[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement + 8];
  uint64_t v26 = swift_retain(v24);
  uint64_t v135 = v23;
  v25(v26);
  swift_release(v24);
  id v27 = (id)TUNormalizedHandleForTUHandle(a2);
  if (v27)
  {
    id v28 = v27;
    sub_10024D084(v27);
    uint64_t v30 = v29;
    uint64_t v31 = swift_bridgeObjectRelease(v29);
    if (v30)
    {
      uint64_t v32 = P256.KeyAgreement.PrivateKey.publicKey.getter(v31);
      uint64_t v33 = P256.KeyAgreement.PublicKey.compactRepresentation.getter(v32);
      unint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (v35 >> 60 == 15)
      {
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v36 = type metadata accessor for Logger(0LL);
        uint64_t v37 = sub_1001B0D98(v36, (uint64_t)qword_1004541B0);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v37, v38, v39);
        os_log_type_t v42 = static os_log_type_t.error.getter(v40, v41);
        if (os_log_type_enabled(v40, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  v42,  "Unable to generate publicKey compact representation for private key, was compactRepresentable set to true wh en initializing the private key?",  v43,  2u);
          swift_slowDealloc(v43, -1LL, -1LL);
        }

        sub_100227A98(0LL, 0LL);
        uint64_t v45 = (void *)v44;
        sub_100218370(0LL, v44);
      }

      else
      {
        unint64_t v123 = v35;
        uint64_t v124 = v33;
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v57 = type metadata accessor for Logger(0LL);
        sub_1001B0D98(v57, (uint64_t)qword_1004541B0);
        uint64_t v59 = v132;
        uint64_t v58 = v133;
        int v122 = *(void (**)(char *, unint64_t, uint64_t))(v132 + 16);
        v122(v14, v130, v133);
        uint64_t v60 = v134;
        swift_bridgeObjectRetain_n(v134, 2LL);
        id v61 = a2;
        uint64_t v64 = (os_log_s *)Logger.logObject.getter(v61, v62, v63);
        LODWORD(v120) = static os_log_type_t.default.getter(v64);
        if (os_log_type_enabled(v64, (os_log_type_t)v120))
        {
          os_log_t isa = v64;
          uint64_t v65 = swift_slowAlloc(48LL, -1LL);
          unint64_t v121 = (void *)swift_slowAlloc(8LL, -1LL);
          id v118 = (void **)swift_slowAlloc(96LL, -1LL);
          uint64_t aBlock = v118;
          *(_DWORD *)uint64_t v65 = 136316162;
          p_uint64_t aBlock = (void ***)(v65 + 4);
          sub_1001A9F18( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v58, v66);
          unint64_t v69 = v68;
          uint64_t v136 = sub_1001D7CF0(v67, v68, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, p_aBlock, v65 + 12);
          swift_bridgeObjectRelease(v69);
          (*(void (**)(char *, uint64_t))(v132 + 8))(v14, v58);
          *(_WORD *)(v65 + 12) = 2112;
          uint64_t v136 = (uint64_t)v61;
          id v70 = v61;
          p_uint64_t aBlock = &aBlock;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v65 + 14, v65 + 22);
          *unint64_t v121 = a2;
          uint64_t v71 = v134;

          *(_WORD *)(v65 + 22) = 2080;
          char v72 = v129;
          if (v71)
          {
            uint64_t v136 = v71;
            swift_bridgeObjectRetain(v71);
            uint64_t v73 = sub_1001AFF14(&qword_1004499A0);
            uint64_t v74 = String.init<A>(reflecting:)(&v136, v73);
            unint64_t v76 = v75;
          }

          else
          {
            unint64_t v76 = 0xE300000000000000LL;
            uint64_t v74 = 7104878LL;
          }

          uint64_t v79 = v128;
          uint64_t v136 = sub_1001D7CF0(v74, v76, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, p_aBlock, v65 + 24, v65 + 32);
          swift_bridgeObjectRelease(v76);
          swift_bridgeObjectRelease_n(v71, 2LL);
          *(_WORD *)(v65 + 32) = 1024;
          LODWORD(v136) = v72 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 4, v65 + 34, v65 + 38);
          *(_WORD *)(v65 + 3_Block_object_dispose(va, 8) = 2080;
          uint64_t v136 = v79;
          type metadata accessor for TUConversationLinkLifetimeScope(0LL);
          uint64_t v81 = String.init<A>(reflecting:)(&v136, v80);
          unint64_t v83 = v82;
          uint64_t v136 = sub_1001D7CF0(v81, v82, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v65 + 40, v65 + 48);
          swift_bridgeObjectRelease(v83);
          os_log_t v84 = isa;
          _os_log_impl( (void *)&_mh_execute_header,  isa,  (os_log_type_t)v120,  "Provisioning pseudonym to generate link for groupUUID: %s, originatorHandle: %@, invitedHandles: %s, isActiv ated: %{BOOL}d, linkLifetimeScope: %s",  (uint8_t *)v65,  0x30u);
          sub_1001AFF14(&qword_100447E80);
          os_log_type_t v85 = v121;
          swift_arrayDestroy(v121, 1LL);
          swift_slowDealloc(v85, -1LL, -1LL);
          uint64_t v86 = v118;
          swift_arrayDestroy(v118, 3LL);
          swift_slowDealloc(v86, -1LL, -1LL);
          swift_slowDealloc(v65, -1LL, -1LL);

          uint64_t v78 = v132;
          uint64_t v77 = v133;
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v58);

          swift_bridgeObjectRelease_n(v60, 2LL);
          uint64_t v77 = v58;
          uint64_t v78 = v59;
        }

        id v120 = *(id *)&v131[OBJC_IVAR___CSDConversationLinkManager_service];
        id v87 = v120;
        unint64_t v121 = String._bridgeToObjectiveC()();
        uint64_t v88 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
        uint64_t v89 = swift_allocObject(v88, 48LL, 7LL);
        *(_OWORD *)(v89 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        id v90 = [v87 name];
        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        uint64_t v93 = v92;

        *(void *)(v89 + 32) = v91;
        *(void *)(v89 + 40) = v93;
        os_log_t isa = (os_log_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v89);
        uint64_t v94 = v127;
        v122(v127, v130, v77);
        uint64_t v95 = v126;
        sub_10022BDD4((uint64_t)v135, v126);
        uint64_t v96 = *(unsigned __int8 *)(v78 + 80);
        uint64_t v97 = (v96 + 48) & ~v96;
        unint64_t v130 = (v97 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v98 = v97 + v11 + 31;
        uint64_t v99 = v78;
        unint64_t v100 = v98 & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v101 = *(unsigned __int8 *)(v125 + 80);
        uint64_t v102 = (v101 + v100 + 8) & ~v101;
        unint64_t v103 = (v20 + v102 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v104 = (char *)swift_allocObject(&unk_1003E2130, v103 + 8, v96 | v101 | 7);
        *((void *)v104 + 2) = sub_100218370;
        *((void *)v104 + 3) = 0LL;
        unint64_t v105 = v131;
        *((void *)v104 + 4) = v131;
        *((void *)v104 + 5) = v28;
        (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v104[v97], v94, v133);
        uint64_t v106 = &v104[v130];
        unint64_t v107 = v123;
        *(void *)uint64_t v106 = v124;
        *((void *)v106 + 1) = v107;
        v106[16] = v129 & 1;
        uint64_t v108 = v134;
        *(void *)&v104[v100] = v134;
        sub_10022BE1C(v95, (uint64_t)&v104[v102]);
        *(void *)&v104[v103] = v128;
        v138[3] = sub_10022BE60;
        uint64_t v139 = v104;
        uint64_t aBlock = _NSConcreteStackBlock;
        v138[0] = 1107296256LL;
        v138[1] = sub_10022368C;
        v138[2] = &unk_1003E2148;
        uint64_t v109 = _Block_copy(&aBlock);
        uint64_t v110 = v139;
        swift_bridgeObjectRetain(v108);
        id v111 = v105;
        id v28 = v28;
        uint64_t v112 = v124;
        sub_1001E07F4(v124, v107);
        swift_release(v110);
        uint64_t v113 = v121;
        os_log_t v114 = isa;
        [v120 provisionPseudonymForHandle:v28 featureID:v121 scopeID:0 expiryDuration:isa allowedServices:v109 completionHandler:a7];
        _Block_release(v109);

        sub_1001BB464(v112, v107);
      }

      goto LABEL_25;
    }
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  sub_1001B0D98(v46, (uint64_t)qword_1004541B0);
  uint64_t v47 = a2;
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v47, v48, v49);
  os_log_type_t v52 = static os_log_type_t.error.getter(v50, v51);
  if (os_log_type_enabled(v50, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v54 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v53 = 138412290;
    uint64_t aBlock = v47;
    os_log_type_t v55 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v138, v53 + 4, v53 + 12);
    *uint64_t v54 = a2;

    _os_log_impl((void *)&_mh_execute_header, v50, v52, "Cannot normalize value for originator handle %@", v53, 0xCu);
    sub_1001AFF14(&qword_100447E80);
    swift_arrayDestroy(v54, 1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    uint64_t v50 = (os_log_s *)v47;
  }

  sub_100227A98(10LL, 0LL);
  id v28 = (id)v56;
  sub_100218370(0LL, v56);
LABEL_25:

  return sub_10022BD98((uint64_t)v135);
}

void sub_1002223D4( unint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(void, void *), uint64_t a7, double a8)
{
  uint64_t v124 = a6;
  uint64_t v125 = a7;
  uint64_t v117 = a5;
  int v119 = a4;
  uint64_t v123 = a3;
  unint64_t v120 = a1;
  uint64_t v118 = sub_1001B1234();
  uint64_t v122 = *(void *)(v118 - 8);
  uint64_t v11 = *(void *)(v122 + 64);
  uint64_t v12 = __chkstk_darwin(v118);
  uint64_t v116 = (char *)&p_aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&p_aBlock - v13;
  type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  sub_10022D2BC();
  __chkstk_darwin(v15);
  sub_10022D01C();
  uint64_t v16 = sub_10022D0C4();
  uint64_t v114 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v114 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v115 = (uint64_t)&p_aBlock - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&p_aBlock - v19;
  unint64_t v121 = v8;
  uint64_t v22 = *(void (**)(uint64_t))&v8[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement];
  uint64_t v21 = *(void *)&v8[OBJC_IVAR___CSDConversationLinkManager_generateKeyAgreement + 8];
  uint64_t v23 = swift_retain(v21);
  uint64_t v126 = v20;
  v22(v23);
  swift_release(v21);
  id v24 = (id)TUNormalizedHandleForTUHandle(a2);
  if (v24)
  {
    id v25 = v24;
    sub_10024D084(v24);
    uint64_t v27 = v26;
    uint64_t v28 = swift_bridgeObjectRelease(v26);
    if (v27)
    {
      uint64_t v29 = P256.KeyAgreement.PrivateKey.publicKey.getter(v28);
      uint64_t v30 = P256.KeyAgreement.PublicKey.compactRepresentation.getter(v29);
      uint64_t v32 = v31;
      sub_10022CDFC();
      if ((unint64_t)v32 >> 60 == 15)
      {
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v33 = sub_1001B0E98();
        sub_10022CC30(v33, (uint64_t)qword_1004541B0);
        os_log_type_t v34 = sub_1001E0A4C();
        if (sub_1001D917C(v34))
        {
          unint64_t v35 = (uint8_t *)sub_1001B0E78(2LL);
          *(_WORD *)unint64_t v35 = 0;
          sub_10022CC9C( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v17,  "Unable to generate publicKey compact representation for private key, was compactRepresentable set to true wh en initializing the private key?",  v35);
          sub_1001B0E60((uint64_t)v35);
        }

        sub_10022CEC8(0LL);
        uint64_t v37 = v36;
        v124(0LL, v36);
      }

      else
      {
        id v111 = v32;
        uint64_t v113 = v30;
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v48 = sub_1001B0E98();
        sub_10022CF28(v48, (uint64_t)qword_1004541B0);
        uint64_t v49 = v122;
        uint64_t v50 = v118;
        uint64_t v110 = *(void (**)(char *, unint64_t, uint64_t))(v122 + 16);
        v110(v14, v120, v118);
        uint64_t v51 = v123;
        sub_10022CE68(v123);
        os_log_type_t v52 = a2;
        Logger.logObject.getter(v52, v53, v54);
        LODWORD(isa) = sub_1001B105C();
        BOOL v55 = sub_100211240((os_log_type_t)isa);
        id v112 = v25;
        if (v55)
        {
          os_log_t v107 = v32;
          uint64_t v56 = sub_1001B0E78(48LL);
          uint64_t v109 = (void *)sub_1001B0E78(8LL);
          uint64_t v106 = (void **)sub_1001B0E78(96LL);
          uint64_t aBlock = v106;
          *(_DWORD *)uint64_t v56 = 136316162;
          p_uint64_t aBlock = (void ***)(v56 + 4);
          sub_1001A9F18( (unint64_t *)&qword_100447E68,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v50, v57);
          uint64_t v127 = sub_1001D7CF0(v58, v59, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &aBlock, p_aBlock, v56 + 12);
          sub_1001AA9C8();
          sub_10022D22C(*(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
          *(_WORD *)(v56 + 12) = 2112;
          uint64_t v127 = (uint64_t)v52;
          uint64_t v60 = v52;
          p_uint64_t aBlock = &aBlock;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &aBlock, v56 + 14, v56 + 22);
          void *v109 = a2;
          uint64_t v61 = v123;

          *(_WORD *)(v56 + 22) = 2080;
          char v62 = v119;
          if (v61)
          {
            uint64_t v127 = v61;
            sub_1001F859C();
            uint64_t v63 = sub_1001AFF14(&qword_1004499A0);
            uint64_t v64 = String.init<A>(reflecting:)(&v127, v63);
            unint64_t v66 = v65;
          }

          else
          {
            unint64_t v66 = 0xE300000000000000LL;
            uint64_t v64 = 7104878LL;
          }

          uint64_t v69 = v117;
          uint64_t v127 = sub_1001D7CF0(v64, v66, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, p_aBlock, v56 + 24, v56 + 32);
          swift_bridgeObjectRelease(v66);
          sub_10022CCA4(v61);
          *(_WORD *)(v56 + 32) = 1024;
          LODWORD(v127) = v62 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 4, v56 + 34, v56 + 38);
          *(_WORD *)(v56 + 3_Block_object_dispose(va, 8) = 2080;
          uint64_t v127 = v69;
          type metadata accessor for TUConversationLinkLifetimeScope(0LL);
          a2 = &v127;
          uint64_t v71 = String.init<A>(reflecting:)(&v127, v70);
          unint64_t v73 = v72;
          uint64_t v127 = sub_1001D7CF0(v71, v72, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &aBlock, v56 + 40, v56 + 48);
          swift_bridgeObjectRelease(v73);
          os_log_t v74 = v107;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  (os_log_type_t)isa,  "Provisioning pseudonym to generate link for groupUUID: %s, originatorHandle: %@, invitedHandles: %s, isActiv ated: %{BOOL}d, linkLifetimeScope: %s",  (uint8_t *)v56,  0x30u);
          sub_1001AFF14(&qword_100447E80);
          uint64_t v75 = (uint64_t)v109;
          sub_1001B0F64((uint64_t)v109);
          sub_1001B0E60(v75);
          uint64_t v76 = (uint64_t)v106;
          swift_arrayDestroy(v106, 3LL);
          sub_1001B0E60(v76);
          sub_1001B0E60(v56);

          uint64_t v67 = v118;
          uint64_t v68 = v122;
        }

        else
        {
          sub_10022D22C(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));

          sub_10022CCA4(v51);
          uint64_t v67 = v50;
          uint64_t v68 = v49;
        }

        uint64_t v109 = *(void **)&v121[OBJC_IVAR___CSDConversationLinkManager_service];
        uint64_t v118 = (uint64_t)String._bridgeToObjectiveC()();
        uint64_t v77 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
        uint64_t v78 = sub_1001C7370(v77, 48LL);
        *(_OWORD *)(v78 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
        id v79 = sub_1001D8F3C(v78, "name");
        uint64_t v80 = sub_10022CFDC((uint64_t)v79);
        uint64_t v82 = v81;

        *(void *)(v78 + 32) = v80;
        *(void *)(v78 + 40) = v82;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        sub_1001B0EC0();
        unint64_t v83 = v116;
        v110(v116, v120, v67);
        uint64_t v84 = v115;
        sub_10022BDD4((uint64_t)v126, v115);
        uint64_t v85 = *(unsigned __int8 *)(v68 + 80);
        uint64_t v86 = (v85 + 48) & ~v85;
        unint64_t v120 = (v86 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v87 = (v86 + v11 + 31) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v88 = *(unsigned __int8 *)(v114 + 80);
        uint64_t v89 = (v88 + v87 + 8) & ~v88;
        unint64_t v90 = (v17 + v89 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v91 = (char *)swift_allocObject(&unk_1003E1B18, v90 + 8, v85 | v88 | 7);
        uint64_t v92 = v67;
        uint64_t v93 = v125;
        *((void *)v91 + 2) = v124;
        *((void *)v91 + 3) = v93;
        uint64_t v94 = v121;
        id v95 = v112;
        *((void *)v91 + 4) = v121;
        *((void *)v91 + 5) = v95;
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v91[v86], v83, v92);
        uint64_t v96 = &v91[v120];
        unint64_t v97 = (unint64_t)v111;
        *(void *)uint64_t v96 = v113;
        *((void *)v96 + 1) = v97;
        v96[16] = v119 & 1;
        uint64_t v98 = v123;
        *(void *)&v91[v87] = v123;
        sub_10022BE1C(v84, (uint64_t)&v91[v89]);
        *(void *)&v91[v90] = v117;
        v129[3] = sub_10022BE60;
        unint64_t v130 = v91;
        uint64_t aBlock = _NSConcreteStackBlock;
        v129[0] = 1107296256LL;
        v129[1] = sub_10022368C;
        v129[2] = &unk_1003E1B30;
        uint64_t v99 = _Block_copy(&aBlock);
        unint64_t v100 = v130;
        swift_bridgeObjectRetain(v98);
        swift_retain(v93);
        id v101 = v94;
        id v25 = v112;
        uint64_t v102 = v113;
        sub_1001E07F4(v113, v97);
        swift_release(v100);
        unint64_t v103 = (void *)v118;
        Class v104 = isa;
        [v109 provisionPseudonymForHandle:v25 featureID:v118 scopeID:0 expiryDuration:isa allowedServices:v99 completionHandler:a8];
        _Block_release(v99);

        sub_10022D14C(v102);
      }

      goto LABEL_25;
    }
  }

  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v38 = sub_1001B0E98();
  uint64_t v39 = (os_log_s *)sub_1001B0D98(v38, (uint64_t)qword_1004541B0);
  uint64_t v40 = a2;
  Logger.logObject.getter(v40, v41, v42);
  os_log_type_t v43 = sub_1001E0A4C();
  if (sub_10022CC50(v43))
  {
    uint64_t v44 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v45 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v44 = 138412290;
    uint64_t aBlock = v40;
    uint64_t v46 = v40;
    sub_10022D140((uint64_t)&aBlock, (uint64_t)v129);
    *uint64_t v45 = a2;

    sub_1001B0FD8( (void *)&_mh_execute_header,  v39,  (os_log_type_t)v11,  "Cannot normalize value for originator handle %@",  v44);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v45);
    sub_1001B0E60((uint64_t)v45);
    sub_1001B0E60((uint64_t)v44);
  }

  else
  {

    uint64_t v39 = (os_log_s *)v40;
  }

  sub_10022CEC8(10LL);
  id v25 = v47;
  v124(0LL, v47);
LABEL_25:

  sub_10022BD98((uint64_t)v126);
  sub_10022CD38();
}

void sub_100222D38( void *a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4, char *a5, void *a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v110 = a7;
  id v111 = (void **)a8;
  id v112 = a5;
  id v113 = a1;
  uint64_t v114 = a3;
  uint64_t v115 = a4;
  uint64_t v108 = a13;
  id v109 = a6;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v22, (uint64_t)qword_1004541B0);
    swift_errorRetain(a2);
    uint64_t v23 = swift_errorRetain(a2);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v23, v24, v25);
    os_log_type_t v28 = static os_log_type_t.error.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v29 = 138412290;
      swift_errorRetain(a2);
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t aBlock = (void **)v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v117, v29 + 4, v29 + 12);
      *uint64_t v30 = v31;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v28,  "Failed to provision pseudonym with error from IDS: %@)",  v29,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v30, 1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    v114(0LL, a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  else
  {
    unint64_t v102 = a9;
    int v103 = a10;
    uint64_t v104 = v15;
    unint64_t v105 = v17;
    uint64_t v106 = a11;
    uint64_t v107 = a12;
    id v32 = v113;
    if (v113)
    {
      uint64_t v33 = (uint64_t)v21;
      sub_1001B4B94(0LL, &qword_1004499A8, &OBJC_CLASS___TUConversationLinkOriginator_ptr);
      id v34 = v109;
      id v35 = v32;
      id v36 = sub_100215E20(v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v33, v110, v18);
      id v37 = v36;
      id v38 = [v35 URI];
      id v39 = [v38 prefixedURI];

      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v42 = v41;

      id v43 = objc_allocWithZone(&OBJC_CLASS___TUMutableConversationLinkDescriptor);
      uint64_t v44 = (uint64_t)v111;
      unint64_t v45 = v102;
      sub_1001BB31C((uint64_t)v111, v102);
      id v46 = sub_10028D3A4(v33, v37, v40, v42, v44, v45);
      id v47 = [v46 setActivated:v103 & 1];
      uint64_t v48 = v105;
      Date.init()(v47);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v50 = *(void (**)(char *, uint64_t))(v104 + 8);
      v50(v48, v14);
      [v46 setCreationDate:isa];

      id v51 = [v35 properties];
      id v52 = [v51 expirationDate];

      static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);
      Class v53 = Date._bridgeToObjectiveC()().super.isa;
      v50(v48, v14);
      [v46 setExpirationDate:v53];

      if (v106)
      {
        sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
        sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
        v54.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
      }

      else
      {
        v54.super.Class isa = 0LL;
      }

      uint64_t v64 = v108;
      [v46 setInvitedHandles:v54.super.isa];

      uint64_t v65 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
      sub_10022A438(v65, v66, v46, (SEL *)&selRef_setPrivateKey_);
      [v46 setLinkLifetimeScope:v64];
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v67 = type metadata accessor for Logger(0LL);
      sub_1001B0D98(v67, (uint64_t)qword_1004541B0);
      id v68 = v35;
      id v69 = v46;
      uint64_t v70 = (void **)v68;
      uint64_t v71 = (void **)v69;
      os_log_t v74 = (os_log_s *)Logger.logObject.getter(v71, v72, v73);
      os_log_type_t v75 = static os_log_type_t.default.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc(22LL, -1LL);
        uint64_t v77 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v76 = 138412546;
        uint64_t aBlock = v70;
        uint64_t v78 = v70;
        id v111 = v70;
        id v79 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v117, v76 + 4, v76 + 12);
        *uint64_t v77 = v113;

        *(_WORD *)(v76 + 12) = 2112;
        uint64_t aBlock = v71;
        uint64_t v80 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v117, v76 + 14, v76 + 22);
        v77[1] = v71;

        uint64_t v70 = v111;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Successfully provisioned pseudonym %@ and link descriptor %@",  (uint8_t *)v76,  0x16u);
        sub_1001AFF14(&qword_100447E80);
        swift_arrayDestroy(v77, 2LL);
        swift_slowDealloc(v77, -1LL, -1LL);
        swift_slowDealloc(v76, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v81 = v112;

      uint64_t v82 = *(void **)&v81[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v83 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v84 = swift_allocObject(v83, 40LL, 7LL);
      *(_OWORD *)(v84 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
      *(void *)(v84 + 32) = v71;
      uint64_t aBlock = (void **)v84;
      specialized Array._endMutation()(v84, v85, v86, v87, v88, v89, v90, v91);
      uint64_t v92 = aBlock;
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      uint64_t v93 = v71;
      Class v94 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v92);
      id v95 = (void *)swift_allocObject(&unk_1003E1B68, 48LL, 7LL);
      uint64_t v96 = v115;
      v95[2] = v114;
      void v95[3] = v96;
      v95[4] = v93;
      v95[5] = v81;
      v117[3] = sub_10022BE70;
      uint64_t v118 = v95;
      uint64_t aBlock = _NSConcreteStackBlock;
      v117[0] = 1107296256LL;
      v117[1] = sub_1002130EC;
      v117[2] = &unk_1003E1B80;
      unint64_t v97 = _Block_copy(&aBlock);
      uint64_t v98 = v118;
      uint64_t v99 = v93;
      swift_retain(v96);
      unint64_t v100 = v81;
      swift_release(v98);
      [v82 addConversationLinkDescriptors:v94 completion:v97];
      _Block_release(v97);
    }

    else
    {
      if (qword_100446930 != -1) {
        swift_once(&qword_100446930, sub_100258A18);
      }
      uint64_t v55 = type metadata accessor for Logger(0LL);
      uint64_t v56 = sub_1001B0D98(v55, (uint64_t)qword_1004541B0);
      unint64_t v59 = (os_log_s *)Logger.logObject.getter(v56, v57, v58);
      os_log_type_t v61 = static os_log_type_t.error.getter(v59, v60);
      if (os_log_type_enabled(v59, v61))
      {
        char v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)char v62 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  v61,  "Failed to provision pseudonym with error from IDS, pseudonym was nil",  v62,  2u);
        swift_slowDealloc(v62, -1LL, -1LL);
      }

      sub_100227A98(0LL, 0LL);
      id v113 = v63;
      v114(0LL, (uint64_t)v63);
    }
  }

uint64_t sub_1002235FC(char a1, uint64_t a2, uint64_t (*a3)(id, uint64_t), uint64_t a4, uint64_t a5)
{
  if ((a1 & 1) == 0) {
    return a3(0LL, a2);
  }
  id v7 = [objc_allocWithZone(TUConversationLink) initWithDescriptor:a5];
  a3(v7, a2);

  return sub_100285E64();
}

void sub_10022368C(uint64_t a1, void *a2, void *a3)
{
  NSString v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_100223700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(sub_10022371C, 0LL, 0LL);
}

uint64_t sub_10022371C()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  NSString v4 = (void *)swift_task_alloc(48LL);
  v0[6] = v4;
  _OWORD v4[2] = v1;
  void v4[3] = v3;
  void v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v5;
  uint64_t v6 = sub_1001F86B8();
  *uint64_t v5 = v0;
  v5[1] = sub_1002237C8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0[2],  0LL,  0LL,  0xD00000000000001ALL,  0x80000001003723A0LL,  sub_10022BBCC,  v4,  v6);
}

uint64_t sub_1002237C8()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10022383C, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10022383C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100223870(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1001AFF14(&qword_100449998);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  unint64_t v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_1003E1AC8, v14 + 8, v12 | 7);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v13, v11, v8);
  *(void *)(v15 + v14) = a2;
  swift_bridgeObjectRetain(a4);
  id v16 = a2;
  sub_10022077C();
  return swift_release(v15);
}

void sub_10022398C( void *a1, void (*a2)(char *, uint64_t), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a2;
  uint64_t v50 = a5;
  id v48 = (id)a4;
  uint64_t v51 = sub_1001AFF14(&qword_100449998);
  uint64_t v9 = *(void *)(v51 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v51);
  id v47 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v46 - v16;
  if (a1)
  {
    id v18 = a1;
    sub_1002243B8();
    if ((v19 & 1) != 0)
    {
      static Date.now.getter();
      v46[1] = a6;
      Date.addingTimeInterval(_:)((double)(unint64_t)[*(id *)(a6 + OBJC_IVAR___CSDConversationLinkManager_serverBag) linkRenewalExtensionTime]);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v12 + 8);
      v49(v15, v11);
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      id v48 = v18;
      uint64_t v21 = v47;
      uint64_t v22 = v51;
      v20(v47, v50, v51);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
      uint64_t v23 = *(unsigned __int8 *)(v9 + 80);
      uint64_t v24 = (v23 + 16) & ~v23;
      uint64_t v25 = *(unsigned __int8 *)(v12 + 80);
      uint64_t v26 = (v10 + v25 + v24) & ~v25;
      uint64_t v27 = swift_allocObject(&unk_1003E1AF0, v26 + v13, v23 | v25 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + v24, v21, v22);
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v27 + v26, v15, v11);
      os_log_type_t v28 = v48;
      sub_100224860((unint64_t)v48, (uint64_t)v17, (uint64_t)sub_10022BD20, v27);
      swift_release(v27);

      v49(v17, v11);
    }

    else
    {
      id v43 = v49;
      if (v49)
      {
        uint64_t v44 = (uint64_t)v49;
      }

      else
      {
        sub_100227A98(15LL, 0LL);
        id v43 = 0LL;
      }

      uint64_t v53 = v44;
      swift_errorRetain(v43);
      CheckedContinuation.resume(throwing:)(&v53, v51);
    }
  }

  else
  {
    uint64_t v29 = a3;
    unint64_t v30 = (unint64_t)v48;
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v31, (uint64_t)qword_1004541B0);
    swift_bridgeObjectRetain(v30);
    id v32 = v49;
    swift_errorRetain(v49);
    swift_bridgeObjectRetain(v30);
    uint64_t v33 = swift_errorRetain(v32);
    id v36 = (os_log_s *)Logger.logObject.getter(v33, v34, v35);
    os_log_type_t v38 = static os_log_type_t.error.getter(v36, v37);
    if (os_log_type_enabled(v36, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v41;
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_bridgeObjectRetain(v30);
      uint64_t v52 = sub_1001D7CF0(v29, v30, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(v30, 3LL);
      *(_WORD *)(v39 + 12) = 2112;
      if (v32)
      {
        swift_errorRetain(v32);
        uint64_t v42 = _swift_stdlib_bridgeErrorToNSError(v32);
        uint64_t v52 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v39 + 14, v39 + 22);
      }

      else
      {
        uint64_t v52 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v39 + 14, v39 + 22);
        uint64_t v42 = 0LL;
      }

      *uint64_t v40 = v42;
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v38,  "Asked to renew link for pseudonym %s but none was found %@",  (uint8_t *)v39,  0x16u);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v40, 1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_arrayDestroy(v41, 1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v30, 2LL);
      swift_errorRelease(v32);
      swift_errorRelease(v32);
    }

    uint64_t v45 = (uint64_t)v32;
    if (!v32) {
      sub_100227A98(3LL, 0LL);
    }
    uint64_t v53 = v45;
    swift_errorRetain(v32);
    CheckedContinuation.resume(throwing:)(&v53, v51);
  }

uint64_t sub_100223E6C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v11, (uint64_t)qword_1004541B0);
    swift_errorRetain(a2);
    uint64_t v12 = swift_errorRetain(a2);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v12, v13, v14);
    os_log_type_t v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = a2;
      uint64_t v35 = v19;
      *(_DWORD *)id v18 = 136315138;
      swift_errorRetain(a2);
      uint64_t v20 = sub_1001AFF14(&qword_100447B70);
      uint64_t v21 = String.init<A>(reflecting:)(&v34, v20);
      unint64_t v23 = v22;
      uint64_t v34 = sub_1001D7CF0(v21, v22, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "Renewing pseudonym failed with error %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v35 = a2;
    uint64_t v33 = sub_1001AFF14(&qword_100449998);
    return CheckedContinuation.resume(throwing:)(&v35, v33);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_1001B0D98(v24, (uint64_t)qword_1004541B0);
    os_log_type_t v28 = (os_log_s *)Logger.logObject.getter(v25, v26, v27);
    os_log_type_t v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v30 = 67109120;
      LODWORD(v35) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v30 + 4, v30 + 8);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Renewing pseudonym succeeded %{BOOL}d", v30, 8u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
    uint64_t v31 = sub_1001AFF14(&qword_100449998);
    return CheckedContinuation.resume(returning:)(v10, v31);
  }

uint64_t sub_100224214(uint64_t a1, const void *a2, void *a3)
{
  _OWORD v3[2] = a3;
  uint64_t v7 = type metadata accessor for Date(0LL);
  v3[3] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[4] = v8;
  uint64_t v9 = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v3[5] = v9;
  v3[6] = _Block_copy(a2);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  v3[7] = v11;
  uint64_t v13 = dword_1004498AC;
  a3;
  uint64_t v14 = (void *)swift_task_alloc(v13);
  v3[8] = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_1002242E0;
  return sub_100223700(v9, v10, v12);
}

uint64_t sub_1002242E0()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  NSString v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc(v3);

  sub_1001B0EB8();
  if (v0)
  {
    uint64_t v6 = _convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    Class isa = 0LL;
    uint64_t v8 = (void *)v6;
  }

  else
  {
    uint64_t v10 = v2[4];
    uint64_t v9 = v2[5];
    uint64_t v11 = v2[3];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v6 = 0LL;
    uint64_t v8 = isa;
  }

  uint64_t v13 = v2 + 5;
  uint64_t v12 = v2[5];
  (*(void (**)(void, Class, uint64_t))(v13[1] + 16LL))(v13[1], isa, v6);

  sub_10022CD10();
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_1002243B8()
{
  uint64_t v47 = v1;
  uint64_t v48 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_1001AFF14(&qword_100447EA0);
  sub_1001B0E88();
  __chkstk_darwin(v6);
  sub_10022D034();
  uint64_t v7 = (os_log_s *)sub_1001F86B8();
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (os_log_s *)((char *)&v42 - v13);
  id v15 = sub_1001D92AC(v12, "expirationDate");
  if (v15)
  {
    uint64_t v16 = v15;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

    os_log_type_t v17 = *(void (**)(uint64_t, char *, os_log_s *))(v8 + 32);
    v17(v0, v11, v7);
    sub_1001B2A74(v0, 0LL);
    if (sub_1001AB0AC(v0, 1LL, (uint64_t)v7) != 1)
    {
      uint64_t v18 = ((uint64_t (*)(os_log_s *, uint64_t, os_log_s *))v17)(v14, v0, v7);
      if (Date.timeIntervalSinceNow.getter(v18) < 0.0)
      {
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v19 = sub_1001B0E98();
        sub_10022CC30(v19, (uint64_t)qword_1004541B0);
        os_log_type_t v20 = sub_1001B105C();
        if (sub_10022CC50(v20))
        {
          uint64_t v21 = (uint8_t *)sub_1001B0E78(2LL);
          *(_WORD *)uint64_t v21 = 0;
          sub_10022CC9C( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v5,  "Link has already expired - not renewing",  v21);
          sub_1001B0E60((uint64_t)v21);
        }

LABEL_26:
        sub_1001D924C((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
        return;
      }

      sub_10028E2E8(v5);
      unint64_t v29 = v28;
      uint64_t v31 = sub_1001BB464(v30, v28);
      if (v29 >> 60 == 15)
      {
        if (qword_100446930 != -1) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v32 = sub_1001B0E98();
        uint64_t v33 = (os_log_s *)sub_1001B0D98(v32, (uint64_t)qword_1004541B0);
        uint64_t v34 = v5;
        Logger.logObject.getter(v34, v35, v36);
        os_log_type_t v37 = sub_1001B105C();
        uint64_t v44 = v33;
        if (sub_10022CF8C())
        {
          os_log_type_t v38 = (uint8_t *)sub_1001B0E78(12LL);
          id v43 = (void *)sub_1001B0E78(8LL);
          *(_DWORD *)os_log_type_t v38 = 138412290;
          uint64_t v45 = v34;
          uint64_t v39 = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v38 + 4, v38 + 12);
          uint64_t v40 = (uint64_t)v43;
          *id v43 = v34;

          sub_1001B0FD8((void *)&_mh_execute_header, v44, v37, "Not link creator for %@ - not renewing", v38);
          sub_1001AFF14(&qword_100447E80);
          sub_1001B0F64(v40);
          sub_1001B0E60(v40);
          sub_1001B0E60((uint64_t)v38);
        }

        else
        {
        }

        goto LABEL_26;
      }

      double v41 = Date.timeIntervalSinceNow.getter(v31);
      if ((~*(void *)&v41 & 0x7FF0000000000000LL) != 0)
      {
        if (v41 > -1.0)
        {
          if (v41 < 1.84467441e19)
          {
            [*(id *)(v3 + OBJC_IVAR___CSDConversationLinkManager_serverBag) linkRemainingTimeBeforeAutoRenewal];
            sub_1001D924C((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
            return;
          }

          goto LABEL_29;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
  }

  else
  {
    sub_1001B2A74(v0, 1LL);
  }

  sub_1002011C8(v0, &qword_100447EA0);
  if (qword_100446930 != -1) {
    swift_once(&qword_100446930, sub_100258A18);
  }
  uint64_t v22 = sub_1001B0E98();
  sub_1001B0D98(v22, (uint64_t)qword_1004541B0);
  id v23 = v5;
  sub_10022D0E8();
  os_log_type_t v24 = sub_1001B11C8();
  if (sub_10022CCC0(v7))
  {
    uint64_t v25 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v26 = (void *)sub_1001B0E78(8LL);
    sub_10022D080(5.7779e-34);
    uint64_t v45 = v14;
    uint64_t v27 = v14;
    sub_1001B0F8C((uint64_t)&v45, (uint64_t)v46);
    void *v26 = v14;

    sub_1001B0FD8((void *)&_mh_execute_header, v7, v24, "Link has no expiration date - not renewing %@", v25);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v26);
    sub_1001B0E60((uint64_t)v26);
    sub_1001B0E60((uint64_t)v25);
  }

  else
  {
  }

void sub_100224860(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  uint64_t v163 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v162 = (char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BB5CC();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v150 - v12;
  uint64_t v160 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_1001B0E88();
  __chkstk_darwin(v14);
  sub_1001D9040();
  uint64_t v161 = v15;
  uint64_t v159 = sub_1001F86B8();
  uint64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v156 = v16;
  uint64_t v17 = (uint64_t)&v150 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100446930 != -1) {
LABEL_57:
  }
    swift_once(&qword_100446930, sub_100258A18);
  uint64_t v18 = sub_1001B0E98();
  sub_10022CF28(v18, (uint64_t)qword_1004541B0);
  uint64_t v19 = (id)a1;
  uint64_t v169 = v4;
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v19, v20, v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v166 = a2;
  uint64_t v167 = a4;
  uint64_t v164 = v13;
  uint64_t v165 = v9;
  uint64_t v157 = v17;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)sub_1001B0E78(12LL);
    uint64_t v26 = (void *)sub_1001B0E78(8LL);
    *(_DWORD *)uint64_t v25 = 138412290;
    uint64_t v13 = (char *)(v25 + 4);
    uint64_t v171 = v19;
    NSString v4 = (os_log_s *)v19;
    uint64_t v27 = v19;
    sub_1001B0F8C((uint64_t)&v171, (uint64_t)v172);
    void *v26 = v19;

    sub_1001B0FD8((void *)&_mh_execute_header, v22, v23, "Asking to renew pseudonym for %@", v25);
    sub_1001AFF14(&qword_100447E80);
    sub_1001B0F64((uint64_t)v26);
    sub_1001B0E60((uint64_t)v26);
    sub_1001B0E60((uint64_t)v25);
  }

  else
  {
  }

  unint64_t v29 = (os_log_s *)sub_1001F8700(v28, "mutableCopy");
  _bridgeAnyObjectToAny(_:)(&v171, v29);
  uint64_t v30 = swift_unknownObjectRelease(v29);
  uint64_t v31 = sub_1001B4C00(v30, (unint64_t *)&unk_100449970, &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr);
  uint64_t v32 = swift_dynamicCast(v175, &v171, (char *)&type metadata for Any + 8, v31, 6LL);
  if (!(_DWORD)v32)
  {
    id v46 = v19;
    sub_10022D098();
    os_log_type_t v47 = sub_1001B10E8();
    if (sub_10022CCC0(v29))
    {
      uint64_t v48 = (uint8_t *)sub_1001B0E78(12LL);
      uint64_t v49 = a3;
      uint64_t v50 = (void *)sub_1001B0E78(8LL);
      sub_10022D080(5.7779e-34);
      uint64_t v171 = v46;
      uint64_t v51 = v46;
      sub_1001B0F8C((uint64_t)&v171, (uint64_t)v172);
      *uint64_t v50 = v46;

      sub_1001B0FD8((void *)&_mh_execute_header, v29, v47, "Failed to create mutable descriptor for descriptor %@", v48);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v50);
      uint64_t v52 = (uint64_t)v50;
      a3 = v49;
      sub_1001B0E60(v52);
      sub_1001B0E60((uint64_t)v48);
    }

    else
    {

      unint64_t v29 = (os_log_s *)v46;
    }

    if (a3)
    {
      unint64_t v53 = sub_10022B8F8();
      uint64_t v54 = swift_allocError(&type metadata for ConversationLinkManagerErrorType, v53, 0LL, 0LL);
      void *v55 = 3LL;
      sub_10022CDEC();
      swift_errorRelease(v54);
    }

    goto LABEL_53;
  }

  uint64_t v33 = (void *)v175[0];
  uint64_t v155 = v19;
  id v34 = sub_1001F8700(v32, "originator");
  id v35 = [v34 identifier];

  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  a1 = *(void *)&v168[OBJC_IVAR___CSDConversationLinkManager_service];
  id v40 = sub_1001B115C(v39, "localDeviceUniqueID");
  if (v40)
  {
    uint64_t v41 = sub_10022CFDC((uint64_t)v40);
    id v34 = v42;

    if (v36 == v41 && v38 == (void)v34)
    {
      sub_10022CCA4(v38);
LABEL_35:
      id v111 = v168;
      sub_10022D098();
      os_log_type_t v112 = sub_1001B105C();
      if (sub_100211240(v112))
      {
        id v113 = (uint8_t *)sub_1001B0E78(12LL);
        uint64_t v114 = sub_1001B0E78(32LL);
        v175[0] = v114;
        *(_DWORD *)id v113 = 136315138;
        id v115 = sub_1001B115C(v114, "localDeviceUniqueID");
        if (v115)
        {
          uint64_t v116 = v115;
          uint64_t v117 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
          int64_t v170 = (int64_t)v4;
          os_log_type_t v118 = v112;
          int v119 = v111;
          unint64_t v120 = a1;
          uint64_t v121 = v114;
          uint64_t v122 = a3;
          uint64_t v123 = v33;
          uint64_t v125 = v124;

          uint64_t v171 = v117;
          v172[0] = v125;
          uint64_t v33 = v123;
          a3 = v122;
          uint64_t v114 = v121;
          a1 = v120;
          id v111 = v119;
          os_log_type_t v112 = v118;
          NSString v4 = (os_log_s *)v170;
          uint64_t v126 = String.init<A>(reflecting:)(&v171, &type metadata for String);
          unint64_t v128 = v127;
        }

        else
        {
          unint64_t v128 = 0xE300000000000000LL;
          uint64_t v126 = 7104878LL;
        }

        uint64_t v171 = (void *)sub_1001D7CF0(v126, v128, v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v113 + 4, v113 + 12);
        sub_1001B0EC0();

        sub_1001B0FD8( (void *)&_mh_execute_header,  v4,  v112,  "The local device (%s) generated this link, sending renew request now.",  v113);
        sub_1001B0F64(v114);
        sub_1001B0E60(v114);
        sub_1001B0E60((uint64_t)v113);
      }

      else
      {
      }

      unint64_t v140 = v155;
      NSString v142 = sub_1001F8700(v141, "pseudonym");
      if (!v142)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        NSString v142 = String._bridgeToObjectiveC()();
        sub_1001AA9C8();
      }

      Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v144 = (void *)sub_1001C7370((uint64_t)&unk_1003E1960, 56LL);
      uint64_t v145 = v167;
      v144[2] = a3;
      v144[3] = v145;
      v144[4] = v33;
      v144[5] = v111;
      v144[6] = v140;
      uint64_t v173 = sub_10022B9F0;
      id v174 = v144;
      uint64_t v171 = _NSConcreteStackBlock;
      v172[0] = 1107296256LL;
      uint64_t v146 = sub_1002071A4((uint64_t)sub_100225768);
      id v147 = v140;
      uint64_t v148 = v111;
      sub_1001B5D70(a3, v145);
      id v134 = v33;
      sub_10022D130();
      [(id)a1 renewPseudonymString:v142 expirationDate:isa completionHandler:v146];
      _Block_release(v146);

      goto LABEL_52;
    }

    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v41, v34, 0LL);
    sub_1001B0EB8();
    uint64_t v45 = sub_1001B0F5C();
    if ((v44 & 1) != 0) {
      goto LABEL_35;
    }
  }

  else
  {
    uint64_t v45 = sub_1001B0F5C();
  }

  id v56 = sub_1001B115C(v45, "localDeviceUniqueID");
  if (!v56)
  {
    sub_10022D098();
    os_log_type_t v129 = sub_1001B10E8();
    if (sub_1001D9224(v129))
    {
      unint64_t v130 = (_WORD *)sub_1001B0E78(2LL);
      sub_10022D0DC(v130);
      sub_10022CC70((void *)&_mh_execute_header, v131, v132, "No IDS unique ID found, cannot schedule renew.");
      sub_1001B0E60(a1);
    }

    if (!a3)
    {

      goto LABEL_53;
    }

    sub_10022CEC8(9LL);
    id v134 = v133;
    sub_10022CDEC();

    goto LABEL_52;
  }

  uint64_t v57 = v56;
  uint64_t v153 = v33;
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  uint64_t v60 = v59;

  uint64_t v61 = sub_1001AFF14((uint64_t *)&unk_1004478C0);
  uint64_t v62 = sub_1001C7370(v61, 48LL);
  *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B290;
  uint64_t v151 = v58;
  *(void *)(v62 + 32) = v58;
  *(void *)(v62 + 40) = v60;
  uint64_t v152 = v60;
  uint64_t v63 = swift_bridgeObjectRetain(v60);
  id v64 = sub_1001B115C(v63, "devices");
  uint64_t v65 = sub_1001B4C00((uint64_t)v64, (unint64_t *)&qword_1004482E0, &OBJC_CLASS___IDSDevice_ptr);
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v65);

  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0) {
      uint64_t v149 = v17;
    }
    else {
      uint64_t v149 = v17 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001F859C();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v149);
    sub_1001B1200();
  }

  else
  {
    uint64_t v9 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v154 = a3;
  if (!v9)
  {
LABEL_32:
    sub_1001B1200();
    uint64_t v171 = (void *)v62;
    swift_bridgeObjectRetain(v62);
    sub_1002296B8((uint64_t *)&v171);
    sub_1001B92A4();
    uint64_t v73 = v171;
    uint64_t v74 = sub_10026AA94(v151, v152, v171);
    char v76 = v75;
    sub_100207134();
    sub_1001AA9C8();
    uint64_t v77 = v154;
    uint64_t v78 = v153;
    if ((v76 & 1) == 0)
    {
      uint64_t v79 = v158;
      uint64_t v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 16);
      int64_t v170 = v74;
      uint64_t v81 = v157;
      sub_1001F87E8(v157, v166, v80);
      uint64_t v82 = *(unsigned __int8 *)(v79 + 80);
      uint64_t v83 = (v82 + 56) & ~v82;
      uint64_t v84 = (void *)swift_allocObject(&unk_1003E1910, v83 + v156, v82 | 7);
      uint64_t v85 = v167;
      id v86 = v168;
      v84[2] = v168;
      v84[3] = v78;
      uint64_t v87 = v155;
      v84[4] = v155;
      v84[5] = v77;
      v84[6] = v85;
      sub_1001F87E8((uint64_t)v84 + v83, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 32));
      uint64_t v173 = sub_10022B99C;
      id v174 = v84;
      uint64_t v171 = _NSConcreteStackBlock;
      v172[0] = 1107296256LL;
      uint64_t v88 = sub_1002071A4((uint64_t)sub_1002356BC);
      v175[0] = (uint64_t)_swiftEmptyArrayStorage;
      id v89 = v87;
      id v90 = v86;
      sub_1001B5D70(v77, v85);
      sub_1001A9F18( (unint64_t *)&qword_100447CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v92 = v91;
      id v93 = v78;
      uint64_t v94 = sub_1001AFF14((uint64_t *)&unk_1004478D0);
      sub_1001B90A8((unint64_t *)&qword_100447CC0, (uint64_t *)&unk_1004478D0);
      uint64_t v95 = v161;
      dispatch thunk of SetAlgebra.init<A>(_:)(v175, v94, v96, v160, v92);
      uint64_t v97 = type metadata accessor for DispatchWorkItem(0LL);
      swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
      uint64_t v98 = DispatchWorkItem.init(flags:block:)(v95, v88);
      swift_release(v174);
      double v99 = (double)v170 * 120.0;
      uint64_t v100 = swift_retain(v98);
      uint64_t v101 = sub_10021328C(v100);
      uint64_t v102 = sub_1001B4C00(v101, (unint64_t *)&qword_100449F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
      int v103 = (void *)static OS_dispatch_queue.main.getter(v102);
      uint64_t v104 = v162;
      static DispatchTime.now()(v103);
      unint64_t v105 = v164;
      + infix(_:_:)(v104, v99);
      uint64_t v106 = *(void (**)(char *, uint64_t))(v163 + 8);
      uint64_t v107 = v104;
      uint64_t v108 = v165;
      v106(v107, v165);
      uint64_t v109 = sub_1001F0E4C();
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v109, v110);

      sub_10022CCE8();
      v106(v105, v108);
LABEL_53:
      sub_10022CD38();
      return;
    }

    sub_10022D098();
    os_log_type_t v135 = sub_1001B10E8();
    if (sub_1001D9224(v135))
    {
      uint64_t v136 = (_WORD *)sub_1001B0E78(2LL);
      sub_10022D0DC(v136);
      sub_10022CC70((void *)&_mh_execute_header, v137, v138, "Could not find index of our own uniqueID, aborting...");
      sub_1001B0E60(v74);
    }

    if (!v77)
    {

      goto LABEL_53;
    }

    sub_10022CEC8(9LL);
    id v134 = v139;
    sub_10022CDEC();

LABEL_52:
    goto LABEL_53;
  }

  int64_t v170 = v17 & 0xC000000000000001LL;
  a2 = 4LL;
  while (1)
  {
    a4 = a2 - 4;
    if (v170) {
      id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, v17);
    }
    else {
      id v66 = *(id *)(v17 + 8 * a2);
    }
    uint64_t v67 = v66;
    NSString v4 = (os_log_s *)(a2 - 3);
    if (__OFADD__(a4, 1LL))
    {
      __break(1u);
      goto LABEL_57;
    }

    sub_10022A320(v66, (SEL *)&selRef_uniqueID);
    if (!v69) {
      break;
    }
    uint64_t v70 = v68;
    uint64_t v13 = v69;
    a1 = *(void *)(v62 + 16);
    a3 = a1 + 1;
    if (a1 >= *(void *)(v62 + 24) >> 1)
    {
      sub_1002B00EC();
      uint64_t v62 = v72;
    }

    *(void *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    unint64_t v71 = v62 + 16 * a1;
    *(void *)(v71 + 32) = v70;
    *(void *)(v71 + 40) = v13;

    ++a2;
    if (v4 == (os_log_s *)v9) {
      goto LABEL_32;
    }
  }

  __break(1u);
  swift_release(v171);
  __break(1u);
}

void sub_100225428( char a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t), uint64_t a5, objc_class *a6, char *a7, void *a8)
{
  uint64_t v52 = a8;
  unint64_t v53 = a7;
  Class v51 = a6;
  uint64_t v54 = a5;
  uint64_t v55 = a4;
  uint64_t v11 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v50 - v19;
  sub_10022C38C(a2, (uint64_t)v13, &qword_100447EA0);
  if (sub_1001AB0AC((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_1002011C8((uint64_t)v13, &qword_100447EA0);
  }

  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v21(v20, v13, v14);
    if (!a3)
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      Class v23 = v51;
      -[objc_class setExpirationDate:](v51, "setExpirationDate:", isa);

      sub_10021611C();
      -[objc_class setDeletionDate:](v23, "setDeletionDate:", 0LL);
      id v50 = *(id *)&v53[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v24 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v25 = swift_allocObject(v24, 40LL, 7LL);
      *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
      *(void *)(v25 + 32) = v23;
      aBlock[0] = v25;
      specialized Array._endMutation()(v25, v26, v27, v28, v29, v30, v31, v32);
      uint64_t v33 = aBlock[0];
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      id v34 = v23;
      Class v51 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
      uint64_t v35 = *(unsigned __int8 *)(v15 + 80);
      uint64_t v36 = (v35 + 24) & ~v35;
      unint64_t v37 = (v16 + v36 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v39 = swift_allocObject(&unk_1003E19B0, v38 + 8, v35 | 7);
      id v40 = v52;
      *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v52;
      v21((char *)(v39 + v36), v18, v14);
      uint64_t v41 = (void *)(v39 + v37);
      uint64_t v42 = v54;
      uint64_t v43 = (uint64_t)v55;
      void *v41 = v55;
      v41[1] = v42;
      char v44 = v53;
      *(void *)(v39 + v3_Block_object_dispose(va, 8) = v53;
      aBlock[4] = sub_10022BA04;
      uint64_t v57 = v39;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1002130EC;
      void aBlock[3] = &unk_1003E19C8;
      uint64_t v45 = _Block_copy(aBlock);
      uint64_t v46 = v57;
      id v47 = v40;
      sub_1001B5D70(v43, v42);
      id v48 = v44;
      swift_release(v46);
      Class v49 = v51;
      [v50 addOrUpdateConversationLinkDescriptors:v51 completion:v45];
      _Block_release(v45);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
      return;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }

  if (v55) {
    v55(a1 & 1, a3);
  }
}

void sub_100225768(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void (**)(uint64_t, char *, void *))(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = 1LL;
  }

  sub_1001A9670((uint64_t)v10, v14, 1LL, v13);
  swift_retain(v11);
  id v15 = a4;
  v12(a2, v10, a4);
  swift_release(v11);

  sub_1002011C8((uint64_t)v10, &qword_100447EA0);
}

uint64_t sub_100225860(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a1;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = [a2 pseudonym];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v17 = v16;

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, v11);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v19 = (v18 + 48) & ~v18;
  uint64_t v20 = (char *)swift_allocObject(&unk_1003E1A00, v19 + v13, v18 | 7);
  *((void *)v20 + 2) = a3;
  *((void *)v20 + 3) = a4;
  uint64_t v21 = v26;
  *((void *)v20 + 4) = a5;
  *((void *)v20 + 5) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v19], v14, v11);
  id v22 = a3;
  sub_1001B5D70(a4, a5);
  id v23 = v21;
  sub_10022077C();
  swift_bridgeObjectRelease(v17);
  return swift_release(v20);
}

void sub_1002259B4( void *a1, uint64_t a2, void *a3, void (*a4)(void, uint64_t), uint64_t a5, char *a6)
{
  if (a1
    && (id v10 = [a1 mutableCopy],
        _bridgeAnyObjectToAny(_:)(&aBlock, v10),
        swift_unknownObjectRelease(v10),
        uint64_t v11 = sub_1001B4B94( 0LL,  (unint64_t *)&unk_100449970,  &OBJC_CLASS___TUMutableConversationLinkDescriptor_ptr),  (swift_dynamicCast(&v39, &aBlock, (char *)&type metadata for Any + 8, v11, 6LL) & 1) != 0))
  {
    id v12 = v39;
    uint64_t v13 = *(void **)&a6[OBJC_IVAR___CSDConversationLinkManager_service];
    NSString v14 = [v39 pseudonym];
    if (!v14)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v16 = v15;
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
    }

    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v18 = (void *)swift_allocObject(&unk_1003E1A28, 48LL, 7LL);
    v18[2] = a4;
    void v18[3] = a5;
    void v18[4] = v12;
    v18[5] = a6;
    void v37[3] = sub_10022BAC8;
    unint64_t v38 = v18;
    uint64_t aBlock = _NSConcreteStackBlock;
    v37[0] = 1107296256LL;
    v37[1] = sub_100225768;
    v37[2] = &unk_1003E1A40;
    uint64_t v19 = _Block_copy(&aBlock);
    uint64_t v20 = v38;
    sub_1001B5D70((uint64_t)a4, a5);
    id v21 = v12;
    id v22 = a6;
    swift_release(v20);
    [v13 renewPseudonymString:v14 expirationDate:isa completionHandler:v19];
    _Block_release(v19);
  }

  else
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_1001B0D98(v23, (uint64_t)qword_1004541B0);
    uint64_t v24 = a3;
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v24, v25, v26);
    os_log_type_t v29 = static os_log_type_t.error.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = (void ***)swift_slowAlloc(8LL, -1LL);
      uint64_t aBlock = v24;
      *(_DWORD *)uint64_t v30 = 138412290;
      uint64_t v31 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v37, v30 + 4, v30 + 12);
      uint8_t *v35 = v24;

      _os_log_impl( (void *)&_mh_execute_header,  v27,  v29,  "Failed to create mutable descriptor for descriptor %@",  v30,  0xCu);
      sub_1001AFF14(&qword_100447E80);
      swift_arrayDestroy(v35, 1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      uint64_t v27 = (os_log_s *)v24;
    }

    if (a4)
    {
      unint64_t v32 = sub_10022B8F8();
      uint64_t v33 = swift_allocError(&type metadata for ConversationLinkManagerErrorType, v32, 0LL, 0LL);
      *id v34 = 3LL;
      a4(0LL, v33);
      swift_errorRelease(v33);
    }
  }

void sub_100225D14( char a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t), uint64_t a5, objc_class *a6, char *a7)
{
  Class v50 = a6;
  Class v51 = a7;
  uint64_t v52 = a5;
  unint64_t v53 = a4;
  uint64_t v10 = sub_1001AFF14(&qword_100447EA0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v48 - v18;
  sub_10022C38C(a2, (uint64_t)v12, &qword_100447EA0);
  if (sub_1001AB0AC((uint64_t)v12, 1LL, v13) == 1)
  {
    sub_1002011C8((uint64_t)v12, &qword_100447EA0);
  }

  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v20(v19, v12, v13);
    if (!a3)
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      Class v22 = v50;
      -[objc_class setExpirationDate:](v50, "setExpirationDate:", isa);

      sub_10021611C();
      id v49 = *(id *)&v51[OBJC_IVAR___CSDConversationLinkManager_dataSource];
      uint64_t v23 = sub_1001AFF14((uint64_t *)&unk_1004475C0);
      uint64_t v24 = swift_allocObject(v23, 40LL, 7LL);
      *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10037B200;
      *(void *)(v24 + 32) = v22;
      aBlock[0] = v24;
      specialized Array._endMutation()(v24, v25, v26, v27, v28, v29, v30, v31);
      uint64_t v32 = aBlock[0];
      sub_1001B4B94(0LL, &qword_1004475B0, &OBJC_CLASS___TUConversationLinkDescriptor_ptr);
      uint64_t v33 = v22;
      Class v50 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
      uint64_t v34 = *(unsigned __int8 *)(v14 + 80);
      uint64_t v35 = (v34 + 24) & ~v34;
      unint64_t v36 = (v15 + v35 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v38 = swift_allocObject(&unk_1003E1A78, v37 + 8, v34 | 7);
      *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
      v20((char *)(v38 + v35), v17, v13);
      id v39 = (void *)(v38 + v36);
      uint64_t v40 = v52;
      uint64_t v41 = (uint64_t)v53;
      void *v39 = v53;
      v39[1] = v40;
      uint64_t v42 = v51;
      *(void *)(v38 + v37) = v51;
      aBlock[4] = sub_10022BB5C;
      uint64_t v55 = v38;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1002130EC;
      void aBlock[3] = &unk_1003E1A90;
      uint64_t v43 = _Block_copy(aBlock);
      uint64_t v44 = v55;
      uint64_t v45 = v33;
      sub_1001B5D70(v41, v40);
      id v46 = v42;
      swift_release(v44);
      Class v47 = v50;
      [v49 addOrUpdateConversationLinkDescriptors:v50 completion:v43];
      _Block_release(v43);

      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
      return;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }

  if (v53) {
    v53(a1 & 1, a3);
  }
}

void sub_10022603C()
{
  NSString v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  id v12 = v11;
  char v14 = v13;
  sub_1001F86B8();
  sub_10022D2BC();
  __chkstk_darwin(v15);
  sub_10022D01C();
  if ((v14 & 1) == 0)
  {
    if (qword_100446930 != -1) {
      swift_once(&qword_100446930, sub_100258A18);
    }
    uint64_t v35 = sub_1001B0E98();
    sub_1001B0D98(v35, (uint64_t)qword_1004541B0);
    id v36 = sub_10022D0A0();
    sub_1002111A0();
    id v37 = v36;
    uint64_t v38 = sub_1002111A0();
    Logger.logObject.getter(v38, v39, v40);
    os_log_type_t v41 = sub_1001E0A4C();
    if (sub_100211240(v41))
    {
      id v56 = v4;
      uint64_t v60 = v6;
      uint64_t v42 = sub_1001B0E78(22LL);
      uint64_t v43 = (void *)sub_1001B0E78(8LL);
      uint64_t v55 = sub_1001B0E78(32LL);
      v62[0] = v55;
      *(_DWORD *)uint64_t v42 = 136315394;
      id v44 = sub_1001D8F3C(v55, "pseudonym");
      uint64_t v45 = sub_10022D0F0((uint64_t)v44);
      unint64_t v47 = v46;

      uint64_t v61 = sub_1001D7CF0(v45, v47, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v42 + 4, v42 + 12);

      uint64_t v48 = sub_1001B92A4();
      *(_WORD *)(v42 + 12) = 2112;
      if (v12)
      {
        sub_10022CFF4();
        uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(v12);
        uint64_t v61 = v51;
        sub_10022CFC4(v51, v52, v53, v42 + 22);
      }

      else
      {
        uint64_t v61 = 0LL;
        sub_10022CFC4(v48, v49, v50, v42 + 22);
        uint64_t v51 = 0LL;
      }

      *uint64_t v43 = v51;
      sub_10022CCF0();
      sub_10022CCF0();
      sub_1001D9094((void *)&_mh_execute_header, v8, v41, v56, (uint8_t *)v42);
      sub_1001AFF14(&qword_100447E80);
      sub_1001B0F64((uint64_t)v43);
      sub_1001B0E60((uint64_t)v43);
      sub_1001B0F64(v55);
      sub_1001B0E60(v55);
      sub_1001B0E60(v42);

      uint64_t v6 = v60;
      if (!v60) {
        goto LABEL_19;
      }
    }

    else
    {

      sub_1001F8524();
      sub_1001F8524();

      if (!v6) {
        goto LABEL_19;
      }
    }

_DWORD *sub_1002264C4(void *a1, uint64_t a2)
{
  NSString v4 = &_swiftEmptySetSingleton;
  if (v3) {
    NSString v4 = v3;
  }
  uint64_t v91 = (uint64_t)v4;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v6 = __CocoaSet.makeIterator()(v5);
    uint64_t v7 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_10022B8BC((unint64_t *)&qword_100447ED0, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v9 = Set.Iterator.init(_cocoa:)(v94, v6, v7, v8);
    a2 = v94[0];
    uint64_t v89 = v94[1];
    uint64_t v10 = v94[2];
    int64_t v11 = v94[3];
    unint64_t v12 = v94[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v89 = a2 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a2 + 56);
    uint64_t v9 = (void *)swift_bridgeObjectRetain(a2);
    int64_t v11 = 0LL;
  }

  int64_t v88 = (unint64_t)(v10 + 64) >> 6;
  uint64_t v16 = &selRef_sharedPrivacyManager;
  p_opt_inst_meths = &OBJC_PROTOCOL___CSDCoreTelephonyClient.opt_inst_meths;
  if ((a2 & 0x8000000000000000LL) == 0) {
    goto LABEL_16;
  }
LABEL_13:
  id v18 = (void *)__CocoaSet.Iterator.next()(v9);
  if (v18)
  {
    os_log_type_t v19 = v18;
    id v90 = v18;
    uint64_t v20 = sub_1001B4B94(0LL, &qword_10044A410, &OBJC_CLASS___TUHandle_ptr);
    sub_10022D308();
    swift_dynamicCast(&v92, &v90, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    id v21 = v92;
    id v22 = (id)swift_unknownObjectRelease(v19);
    int64_t v23 = v11;
    uint64_t v24 = v12;
    if (v21)
    {
      while (1)
      {
        id v29 = sub_1001D909C((uint64_t)v22, v16[337]);
        if (v29 == (id)1) {
          goto LABEL_57;
        }
        id v30 = sub_1001D909C((uint64_t)v29, v16[337]);
        if (v30 == (id)1) {
          break;
        }
        if (v30 == (id)2)
        {
          NSString v36 = sub_1001D909C(2LL, "value");
          if (!v36)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
            uint64_t v38 = v37;
            NSString v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v38);
          }

          sub_1002A125C(v21);
          if (v39)
          {
            uint64_t v40 = v39;
            NSString v31 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v40);
          }

          else
          {
            NSString v31 = 0LL;
          }

          id v35 =  [(id)objc_opt_self(TUHandle) normalizedPhoneNumberHandleForValue:v36 isoCountryCode:v31];

          goto LABEL_55;
        }

        if (v30 == (id)3)
        {
          NSString v31 = sub_1001D909C(3LL, "value");
          if (!v31)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
            NSString v31 = String._bridgeToObjectiveC()();
            sub_1001B0F5C();
          }

          unint64_t v32 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
          id v33 = sub_1001D8FD4(v32, "normalizedEmailAddressHandleForValue:");
          goto LABEL_43;
        }

        if (p_opt_inst_meths[294] != (__objc2_meth_list *)-1LL) {
          swift_once(&qword_100446930, sub_100258A18);
        }
        uint64_t v41 = sub_1001B0E98();
        uint64_t v42 = (os_log_s *)sub_1001B0D98(v41, (uint64_t)qword_1004541B0);
        id v43 = v21;
        Logger.logObject.getter(v43, v44, v45);
        os_log_type_t v46 = sub_1001B105C();
        if (os_log_type_enabled(v42, v46))
        {
          uint64_t v47 = sub_1001B0E78(12LL);
          uint64_t v48 = (void *)sub_1001B0E78(8LL);
          *(_DWORD *)uint64_t v47 = 138412290;
          *(void *)(v47 + 4) = v43;
          void *v48 = v21;
          sub_1001B0FD8( (void *)&_mh_execute_header,  v42,  v46,  "Unknown handle type used for invited handle %@",  (uint8_t *)v47);
          sub_1001AFF14(&qword_100447E80);
          sub_10022CDB8();
          uint64_t v49 = (uint64_t)v48;
          p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___CSDCoreTelephonyClient + 40);
          sub_1001B0E60(v49);
          uint64_t v50 = v47;
          uint64_t v16 = &selRef_sharedPrivacyManager;
          sub_1001B0E60(v50);
        }

        else
        {
        }