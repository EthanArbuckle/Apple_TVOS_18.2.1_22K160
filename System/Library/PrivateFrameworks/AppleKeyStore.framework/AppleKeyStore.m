uint64_t _applekeystored_client_send_uid(void *a1, uint64_t a2, unsigned int a3)
{
  xpc_object_t v6;
  void *v7;
  int64_t v8;
  v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v6) {
    return 3758097084LL;
  }
  v7 = v6;
  xpc_dictionary_set_uint64(v6, "_request", a2);
  xpc_dictionary_set_uint64(v7, "_uid", a3);
  v8 = _service_send_msg(a1, v7, 0LL);
  xpc_release(v7);
  return v8;
}

int64_t _service_send_msg(void *bytes, xpc_object_t xdict, void *a3)
{
  int64_t int64 = 3758097084LL;
  if (xdict)
  {
    if (_service_get_connection_onceToken != -1) {
      dispatch_once(&_service_get_connection_onceToken, &__block_literal_global);
    }
    v7 = (_xpc_connection_s *)_service_get_connection_connection;
    if (_service_get_connection_connection)
    {
      if (bytes) {
        xpc_dictionary_set_data(xdict, "_context", bytes, 0x30uLL);
      }
      xpc_object_t v8 = xpc_connection_send_message_with_reply_sync(v7, xdict);
      if (v8)
      {
        v9 = v8;
        else {
          *a3 = v9;
        }
      }
    }
  }

  return int64;
}

uint64_t _applekeystored_client_send_secret( void *a1, uint64_t a2, const void *a3, int a4, const void *a5, int a6)
{
  xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v12) {
    return 3758097084LL;
  }
  v13 = v12;
  xpc_dictionary_set_uint64(v12, "_request", a2);
  if (a3) {
    xpc_dictionary_set_data(v13, "_secret", a3, a4);
  }
  if (a5) {
    xpc_dictionary_set_data(v13, "_secret_new", a5, a6);
  }
  int64_t v14 = _service_send_msg(a1, v13, 0LL);
  xpc_release(v13);
  return v14;
}

uint64_t applekeystored_client_kb_create(void *a1, const void *a2, int a3)
{
  return _applekeystored_client_send_secret(a1, 5uLL, a2, a3, 0LL, 0);
}

uint64_t applekeystored_client_kb_load(void *a1)
{
  return _applekeystored_client_send_secret(a1, 3uLL, 0LL, 0, 0LL, 0);
}

uint64_t applekeystored_client_kb_load_uid(unsigned int a1)
{
  return _applekeystored_client_send_uid(0LL, 8uLL, a1);
}

uint64_t applekeystored_client_kb_unload(void *a1)
{
  return _applekeystored_client_send_secret(a1, 7uLL, 0LL, 0, 0LL, 0);
}

uint64_t applekeystored_client_kb_change_secret(void *a1, const void *a2, int a3, const void *a4, int a5)
{
  return _applekeystored_client_send_secret(a1, 4uLL, a2, a3, a4, a5);
}

uint64_t applekeystored_client_kb_reset(void *a1, const void *a2, int a3)
{
  return _applekeystored_client_send_secret(a1, 6uLL, a2, a3, 0LL, 0);
}

uint64_t applekeystored_client_kb_save(void *a1)
{
  return _applekeystored_client_send_secret(a1, 0xAuLL, 0LL, 0, 0LL, 0);
}

uint64_t applekeystored_client_kb_unlock(void *a1, const void *a2, int a3)
{
  return _applekeystored_client_send_secret(a1, 0xBuLL, a2, a3, 0LL, 0);
}

uint64_t applekeystored_client_kb_is_locked(void *a1, BOOL *a2, BOOL *a3)
{
  xpc_object_t xdict = 0LL;
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v6) {
    return 3758097084LL;
  }
  v7 = v6;
  xpc_dictionary_set_uint64(v6, "_request", 9uLL);
  int64_t v8 = _service_send_msg(a1, v7, &xdict);
  if (!(_DWORD)v8)
  {
    if (a2) {
      *a2 = xpc_dictionary_get_BOOL(xdict, "_locked");
    }
    if (a3) {
      *a3 = xpc_dictionary_get_BOOL(xdict, "_no_pin");
    }
  }

  xpc_release(v7);
  if (xdict) {
    xpc_release(xdict);
  }
  return v8;
}

uint64_t applekeystored_client_stash_create(void *a1, const void *a2, int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v6) {
    return 3758097084LL;
  }
  v7 = v6;
  xpc_dictionary_set_uint64(v6, "_request", 1uLL);
  if (a2) {
    xpc_dictionary_set_data(v7, "_key", a2, a3);
  }
  int64_t v8 = _service_send_msg(a1, v7, 0LL);
  xpc_release(v7);
  return v8;
}

uint64_t applekeystored_client_stash_load(void *a1, const void *a2, int a3, BOOL a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v8) {
    return 3758097084LL;
  }
  v9 = v8;
  xpc_dictionary_set_uint64(v8, "_request", 2uLL);
  if (a2) {
    xpc_dictionary_set_data(v9, "_key", a2, a3);
  }
  xpc_dictionary_set_BOOL(v9, "_destroy", a4);
  int64_t v10 = _service_send_msg(a1, v9, 0LL);
  xpc_release(v9);
  return v10;
}

uint64_t applekeystored_client_identity_create( const __CFUUID *a1, const __CFData *a2, unsigned int a3, const __CFData *a4)
{
  CFUUIDBytes v15 = CFUUIDGetUUIDBytes(a1);
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v7) {
    return 3758097084LL;
  }
  xpc_object_t v8 = v7;
  xpc_dictionary_set_uint64(v7, "_request", 0xCuLL);
  if (a3 != -1) {
    xpc_dictionary_set_uint64(v8, "_uid", a3);
  }
  xpc_dictionary_set_uuid(v8, "_user_uuid", &v15.byte0);
  if (a2)
  {
    BytePtr = CFDataGetBytePtr(a2);
    size_t Length = CFDataGetLength(a2);
    xpc_dictionary_set_data(v8, "_secret_new", BytePtr, Length);
  }

  if (a4)
  {
    v11 = CFDataGetBytePtr(a4);
    size_t v12 = CFDataGetLength(a4);
    xpc_dictionary_set_data(v8, "_secret", v11, v12);
  }

  int64_t v13 = _service_send_msg(0LL, v8, 0LL);
  xpc_release(v8);
  return v13;
}

uint64_t applekeystored_client_identity_delete(const __CFUUID *a1)
{
  CFUUIDBytes v5 = CFUUIDGetUUIDBytes(a1);
  xpc_object_t v1 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v1) {
    return 3758097084LL;
  }
  v2 = v1;
  xpc_dictionary_set_uint64(v1, "_request", 0xDuLL);
  xpc_dictionary_set_uuid(v2, "_user_uuid", &v5.byte0);
  int64_t v3 = _service_send_msg(0LL, v2, 0LL);
  xpc_release(v2);
  return v3;
}

uint64_t applekeystored_client_identity_migrate(const __CFUUID *a1, unsigned int a2, const __CFData *a3)
{
  CFUUIDBytes v11 = CFUUIDGetUUIDBytes(a1);
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v5) {
    return 3758097084LL;
  }
  xpc_object_t v6 = v5;
  xpc_dictionary_set_uint64(v5, "_request", 0xEuLL);
  xpc_dictionary_set_uuid(v6, "_user_uuid", &v11.byte0);
  xpc_dictionary_set_uint64(v6, "_uid", a2);
  if (a3)
  {
    BytePtr = CFDataGetBytePtr(a3);
    size_t Length = CFDataGetLength(a3);
    xpc_dictionary_set_data(v6, "_secret", BytePtr, Length);
  }

  int64_t v9 = _service_send_msg(0LL, v6, 0LL);
  xpc_release(v6);
  return v9;
}

uint64_t applekeystored_client_identity_load(const __CFUUID *a1, const __CFData *a2, unsigned int a3)
{
  CFUUIDBytes v11 = CFUUIDGetUUIDBytes(a1);
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v5) {
    return 3758097084LL;
  }
  xpc_object_t v6 = v5;
  xpc_dictionary_set_uint64(v5, "_request", 0xFuLL);
  xpc_dictionary_set_uint64(v6, "_uid", a3);
  xpc_dictionary_set_uuid(v6, "_user_uuid", &v11.byte0);
  if (a2)
  {
    BytePtr = CFDataGetBytePtr(a2);
    size_t Length = CFDataGetLength(a2);
    xpc_dictionary_set_data(v6, "_secret", BytePtr, Length);
  }

  int64_t v9 = _service_send_msg(0LL, v6, 0LL);
  xpc_release(v6);
  return v9;
}

uint64_t applekeystored_client_identity_change_passcode( unsigned int a1, const __CFData *a2, const __CFData *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v6) {
    return 3758097084LL;
  }
  xpc_object_t v7 = v6;
  xpc_dictionary_set_uint64(v6, "_request", 0x10uLL);
  xpc_dictionary_set_uint64(v7, "_uid", a1);
  if (a2)
  {
    BytePtr = CFDataGetBytePtr(a2);
    size_t Length = CFDataGetLength(a2);
    xpc_dictionary_set_data(v7, "_secret", BytePtr, Length);
  }

  if (a3)
  {
    int64_t v10 = CFDataGetBytePtr(a3);
    size_t v11 = CFDataGetLength(a3);
    xpc_dictionary_set_data(v7, "_secret_new", v10, v11);
  }

  int64_t v12 = _service_send_msg(0LL, v7, 0LL);
  xpc_release(v7);
  return v12;
}

void ___service_get_connection_block_invoke()
{
  if (getenv("USE_APPLEKEYSTORED_TEST"))
  {
    syslog(4, "Using applekeystored-test variant");
    v0 = "com.apple.applekeystored-test";
  }

  else
  {
    v0 = "com.apple.applekeystored";
  }

  mach_service = xpc_connection_create_mach_service(v0, 0LL, 2uLL);
  _service_get_connection_connection = (uint64_t)mach_service;
  if (mach_service)
  {
    xpc_connection_set_event_handler(mach_service, &__block_literal_global_18);
    xpc_connection_resume((xpc_connection_t)_service_get_connection_connection);
  }
}

void ___service_get_connection_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x186E26248](a2) == MEMORY[0x1895F9268])
  {
    if (a2 == MEMORY[0x1895F91A0]) {
      syslog(3, "applekeystored not available");
    }
  }

  else
  {
    int64_t v3 = (char *)MEMORY[0x186E261E8](a2);
    syslog(3, "applekeystored should never get messages on this connection: %s", v3);
    free(v3);
  }

uint64_t platform_get_measurement()
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  36,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return 4294967284LL;
}

uint64_t platform_rng()
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  62,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_rng != 0LL,  63,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_rng();
}

uint64_t platform_read_random(uint64_t a1, unsigned int a2)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  70,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_read_random != 0LL,  71,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_read_random(a1, a2);
}

uint64_t platform_pka_get_pub_key( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  78,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 79, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t platform_pka_ecdh( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  86,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 87, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t platform_pka_sign( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  94,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 95, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t platform_pka_sika_attest( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  106,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 107, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t platform_pka_shared_encrypt( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  115,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 116, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t platform_ref_key_hw_crypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  123,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 124, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5);
}

uint64_t platform_ref_key_hw_crypt_clear_cache()
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  131,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 132, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0]();
}

uint64_t platform_get_device_id(uint64_t a1, void *a2)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  139,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_get_device_id != 0LL,  140,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_get_device_id(a1, a2);
}

uint64_t platform_get_aon_security(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  147,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 148, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_att_sep_chip_rev(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  155,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 156, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_chip_id(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  163,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_get_chip_id != 0LL,  164,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_get_chip_id(a1);
}

uint64_t platform_get_ecid(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  171,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_get_ecid != 0LL,  172,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_get_ecid(a1);
}

uint64_t platform_get_board_id(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  179,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_get_board_id != 0LL,  180,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_get_board_id(a1);
}

uint64_t platform_get_fuse_bits(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  187,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 188, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_att_board_and_chip_id(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  195,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 196, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t get_aks_log_pid()
{
  return 0LL;
}

uint64_t compress_uuid()
{
  return 0LL;
}

unint64_t time_seconds_to_abs_interval(unsigned int a1)
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return 1000000000 * info.denom * (unint64_t)a1 / info.numer;
}

unint64_t time_absolute_to_nanoseconds(uint64_t a1)
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return (unint64_t)info.numer * a1 / info.denom;
}

uint64_t get_usec_time()
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return mach_continuous_time() * info.numer / info.denom / 0x3E8;
}

__darwin_time_t get_clock_time()
{
  v1.tv_sec = 0LL;
  *(void *)&v1.tv_usec = 0LL;
  gettimeofday(&v1, 0LL);
  return v1.tv_sec;
}

uint64_t ipc_seconds_to_microsecond_interval(uint64_t a1)
{
  return 1000000 * a1;
}

unint64_t ipc_microseconds_to_seconds(uint64_t a1)
{
  return (a1 + 999999) / 0xF4240uLL;
}

void *circular_queue_init(unsigned int a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1LL;
  uint64_t v3 = v2 << 31 >> 31;
  if (v3 != v2 || v3 < 0)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s overflow%s\n",  "aks",  "",  "",  "",  "circular_queue_init",  ":",  341,  "",  0,  "",  "");
    return 0LL;
  }

  else
  {
    xpc_object_t v5 = calloc(0x20uLL, 1uLL);
    xpc_object_t v6 = v5;
    if (v5)
    {
      v5[1] = 0LL;
      size_t v7 = (v3 & 0x1FFFFFFFFLL) * a2;
      *(_DWORD *)xpc_object_t v5 = a2;
      *((_DWORD *)v5 + 1) = v2;
      xpc_object_t v8 = calloc(v7, 1uLL);
      v6[2] = v7;
      v6[3] = v8;
    }
  }

  return v6;
}

uint64_t circular_queue_size(_DWORD *a1)
{
  unsigned int v3 = a1[2];
  unsigned int v2 = a1[3];
  uint64_t result = v2 - v3;
  if (v2 < v3) {
    return (result + a1[1]);
  }
  return result;
}

uint64_t circular_queue_enqueue(unsigned int *a1, const void *a2)
{
  unsigned int v3 = a1[3];
  unsigned int v4 = (v3 + 1) % a1[1];
  memcpy((void *)(*((void *)a1 + 3) + *a1 * v3), a2, *a1);
  a1[3] = v4;
  if (v4 == a1[2]) {
    a1[2] = (v4 + 1) % a1[1];
  }
  return 0LL;
}

uint64_t circular_queue_dequeue(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  if (__dst)
  {
    memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
    unsigned int v2 = a1[2];
  }

  memset_s((void *)(*((void *)a1 + 3) + *a1 * v2), *a1, 0, *a1);
  uint64_t result = 0LL;
  a1[2] = (a1[2] + 1) % a1[1];
  return result;
}

uint64_t circular_queue_peek(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
  return 0LL;
}

uint64_t circular_queue_dequeue_all(int *a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v8 = v6 - v7;
  if (v6 < v7) {
    v8 += a1[1];
  }
  if (!v8) {
    return 0LL;
  }
  unsigned int v9 = *a1 * v8;
  int64_t v10 = (char *)calloc(v9, 1uLL);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  size_t v11 = v10;
  unsigned int v12 = a1[2];
  unsigned int v13 = a1[3];
  if (v13 <= v12)
  {
    if (v12 <= v13) {
      goto LABEL_13;
    }
    unsigned int v17 = a1[1] - v12;
    memcpy(v10, (const void *)(*((void *)a1 + 3) + *a1 * v12), *a1 * v17);
    if (v8 <= v17) {
      goto LABEL_13;
    }
    int64_t v10 = &v11[*a1 * v17];
    int64_t v14 = (const void *)*((void *)a1 + 3);
    size_t v15 = *a1 * (v8 - v17);
  }

  else
  {
    int64_t v14 = (const void *)(*((void *)a1 + 3) + *a1 * v12);
    size_t v15 = *a1 * v8;
  }

  memcpy(v10, v14, v15);
LABEL_13:
  unsigned int v18 = a1[1];
  int v19 = *a1;
  a1[2] = (a1[2] + v8) % v18;
  memset_s(*((void **)a1 + 3), v19 * v18, 0, v19 * v18);
  uint64_t result = 0LL;
  *a2 = v11;
  *a3 = v9;
  return result;
}

uint64_t circular_queue_clear(uint64_t a1)
{
  *(void *)(a1 + 8) = 0LL;
  rsize_t v1 = (*(_DWORD *)a1 * *(_DWORD *)(a1 + 4));
  return memset_s(*(void **)(a1 + 24), v1, 0, v1);
}

void circular_queue_free(void *a1)
{
  *((void *)a1 + 1) = 0LL;
  rsize_t v2 = (*(_DWORD *)a1 * *((_DWORD *)a1 + 1));
  memset_s(*((void **)a1 + 3), v2, 0, v2);
  memset_s(*((void **)a1 + 3), *((void *)a1 + 2), 0, *((void *)a1 + 2));
  free(*((void **)a1 + 3));
  memset_s(a1, 0x20uLL, 0, 0x20uLL);
  free(a1);
}

uint64_t class_gen_get(unsigned int a1)
{
  return (a1 >> 5) & 1;
}

BOOL persona_uuid_is_valid(uint8x16_t *a1)
{
  int8x16_t v1 = (int8x16_t)vmovl_high_u8(*a1);
  int8x16_t v2 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a1->i8);
  int8x16_t v3 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8( vorr_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v1.i8),  vorr_s8( (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))));
  return vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) != 0LL;
}

BOOL is_non_zero(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  int v2 = 0;
  do
  {
    int v3 = *a1++;
    v2 |= v3;
    --a2;
  }

  while (a2);
  return v2 != 0;
}

_DWORD *pfk_params_is_valid(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

uint64_t class_gen_set(char a1, int a2)
{
  return a1 & 0x1F | (32 * a2);
}

uint64_t class_persona_get(unsigned int a1)
{
  return (a1 >> 6) & 1;
}

uint64_t class_persona_unset(int a1)
{
  return a1 & 0xFFFFFFBF;
}

uint64_t class_persona_set(int a1)
{
  return a1 | 0x40u;
}

uint64_t keychain_key(char a1)
{
  char v1 = a1 & 0x1F;
  if ((a1 & 0x1Fu) >= 0x14) {
    char v1 = -1;
  }
  return ((a1 & 0x1Fu) < 0x14) & (0xC3FC0u >> v1);
}

uint64_t class_id_get(char a1)
{
  if ((a1 & 0x1Fu) > 0x13) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a1 & 0x1F;
  }
}

uint64_t fs_class_key(char a1)
{
  unsigned int v1 = a1 & 0x1F;
  if (v1 > 0x13) {
    unsigned int v1 = -1;
  }
  return (v1 < 0x12) & (0x2E03Eu >> v1);
}

uint64_t keystore_type(char a1)
{
  return a1 & 0xF;
}

BOOL store_type_equal(int a1, int a2)
{
  return ((a2 ^ a1) & 0xF) == 0;
}

uint64_t memcmp_c()
{
  return cc_cmp_safe();
}

uint64_t dump_bytes_internal(const char *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unsigned int v4 = a1;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  char v24 = 0;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v17 = 0u;
  xpc_object_t v5 = (FILE **)MEMORY[0x1895F89E0];
  if (a3 >= 0x41)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s %sdump %s (len = %zd)%s%s\n",  "aks",  "",  "",  "",  "dump_bytes_internal",  ":",  786,  "",  0,  "",  "",  a1,  a3,  "",  "");
    unsigned int v4 = "";
  }

  else if (!a3)
  {
    return memset_s(__str, 0x81uLL, 0, 0x81uLL);
  }

  unint64_t v6 = 0LL;
  unint64_t v15 = v3;
  do
  {
    unsigned int v7 = v5;
    if (v3 - v6 >= 0x40) {
      uint64_t v8 = 64LL;
    }
    else {
      uint64_t v8 = v3 - v6;
    }
    if (v8)
    {
      unsigned int v9 = (unsigned __int8 *)(a2 + v6);
      int64_t v10 = __str;
      uint64_t v11 = v8;
      do
      {
        int v12 = *v9++;
        snprintf(v10, 3uLL, "%02x", v12);
        v10 += 2;
        --v11;
      }

      while (v11);
    }

    xpc_object_t v5 = v7;
    fprintf( *v7,  "%s%s:%s%s%s%s%u:%s%u:%s %s%s%s[%04zu,%04zu): %s%s%s%s\n",  "aks",  "",  "",  "",  "dump_bytes_internal",  ":",  796,  "",  0,  "",  "",  v4,  "",  v6,  v8 + v6,  "",  __str,  "",  "");
    v6 += v8;
    unint64_t v3 = v15;
  }

  while (v6 < v15);
  return memset_s(__str, 0x81uLL, 0, 0x81uLL);
}

_BYTE *bytes_to_str_hint(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 0x10) {
    uint64_t v2 = 16LL;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    unsigned int v4 = bytes_to_str_hint_buf;
    uint64_t v5 = v2;
    do
    {
      int v6 = *a1++;
      snprintf(v4, 3uLL, "%02x", v6);
      v4 += 2;
      --v5;
    }

    while (v5);
  }

  bytes_to_str_hint_buf[2 * v2] = 0;
  return bytes_to_str_hint_buf;
}

uint64_t get_kcv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  if (a4 == 3)
  {
    ccsha256_di();
    cchmac();
    uint64_t v5 = 0LL;
    *(_WORD *)a3 = __s[0];
    *(_BYTE *)(a3 + 2) = BYTE2(__s[0]);
  }

  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v5;
}

uint64_t print_kcv(const char *a1, uint64_t a2, uint64_t a3)
{
  char v6 = 0;
  __int16 v5 = 0;
  get_kcv(a2, a3, (uint64_t)&v5, 3LL);
  return dump_bytes_internal(a1, (uint64_t)&v5, 3uLL);
}

char *byte_swap_val(char *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = a2 >> 1;
    unint64_t v3 = &result[a2 - 1];
    do
    {
      char v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t ascii_hex_to_bytes(unsigned __int8 *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if ((a2 & 1) == 0)
  {
    char v6 = a1;
    if (a1)
    {
      if (a3 && a4)
      {
        unint64_t v9 = a2 >> 1;
        int64_t v10 = calloc(a2 >> 1, 1uLL);
        if (v10)
        {
          if (a2 >= 2)
          {
            if (v9 <= 1) {
              uint64_t v11 = 1LL;
            }
            else {
              uint64_t v11 = a2 >> 1;
            }
            int v12 = v10;
            do
            {
              int v13 = *v6;
              unsigned int v14 = v13 - 48;
              unsigned int v15 = v13 - 97;
              else {
                char v16 = v13 - 55;
              }
              char v17 = v13 - 87;
              if (v15 > 5) {
                char v17 = v16;
              }
              if (v14 < 0xA) {
                char v17 = v14;
              }
              char v18 = 16 * v17;
              int v19 = v6[1];
              unsigned int v20 = v19 - 48;
              unsigned int v21 = v19 - 97;
              else {
                char v22 = v19 - 55;
              }
              char v23 = v19 - 87;
              if (v21 > 5) {
                char v23 = v22;
              }
              if (v20 < 0xA) {
                char v23 = v20;
              }
              *v12++ = v23 | v18;
              v6 += 2;
              --v11;
            }

            while (v11);
          }

          uint64_t v5 = 0LL;
          *a3 = v10;
          *a4 = v9;
        }

        else
        {
          return 4294967279LL;
        }
      }
    }
  }

  return v5;
}

uint64_t err_sks_to_aks(uint64_t result)
{
  return result;
}

uint64_t fv_init_cred_from_secret(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return 4294967285LL;
  }
  if (a2 && *(void *)a2 && (size_t v7 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v8 = calloc(v7, 1uLL);
    if (v8)
    {
      *a1 = v8;
      unint64_t v9 = *(const void **)a2;
      a1[1] = *(void *)(a2 + 8);
      memcpy(v8, v9, *(void *)(a2 + 8));
      return 0LL;
    }

    else
    {
      return 4294967279LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a1 = 0LL;
    a1[1] = 0LL;
  }

  return result;
}

uint64_t REQUIRE_func(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n",  "aks",  "",  "",  "",  "REQUIRE_func",  ":",  1047,  "",  0,  "",  a3,  a2,  "");
    abort();
  }

  return result;
}

uint64_t firebloom_export_pub_key(uint64_t a1, void *a2, size_t *a3)
{
  size_t v5 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  char v6 = calloc(v5, 1uLL);
  if (!v6) {
    return 4294967279LL;
  }
  size_t v7 = v6;
  ccec_export_pub();
  uint64_t result = 0LL;
  *a2 = v7;
  *a3 = v5;
  return result;
}

unint64_t firebloom_cp_prime_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

unint64_t firebloom_sign_max_size()
{
  return (((unint64_t)(cczp_bitlen() + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 9;
}

unint64_t firebloom_ec_export_pub_size()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

unint64_t firebloom_ec_compact_export_pub_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t firebloom_cbc_one_shot_f()
{
  return cccbc_one_shot();
}

uint64_t firebloom_ecb_one_shot_f()
{
  return ccecb_one_shot();
}

uint64_t firebloom_cbc_update_f()
{
  return cccbc_update();
}

BOOL firebloom_ec_import()
{
  return !MEMORY[0x186E25BD0]() && ccn_read_uint() == 0;
}

uint64_t firebloom_ec_export()
{
  return 1LL;
}

uint64_t generate_wrapping_key_curve25519(__int128 *a1, __int128 *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(v14, 0, sizeof(v14));
  platform_read_random((uint64_t)v14, 0x20u);
  cccurve25519_make_pub();
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  int __s = 0x1000000;
  __int128 v4 = a2[1];
  __int128 v10 = *a2;
  __int128 v11 = v4;
  __int128 v5 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v5;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  memset_s(v14, 0x20uLL, 0, 0x20uLL);
  return 0LL;
}

uint64_t wrap_data( int *a1, uint64_t (*a2)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), char a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  unsigned int v30 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  memset(__s, 0, sizeof(__s));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (!a6 || !a7) {
    goto LABEL_40;
  }
  if (!a1)
  {
LABEL_14:
    if (a2)
    {
      if (rfc3394_wrapped_size_legacy(a5, &v30))
      {
        if (*a7 < v30) {
          goto LABEL_40;
        }
        char v18 = 0LL;
        unsigned int v19 = 0;
        unsigned int v20 = a2;
        unsigned int v21 = a4;
        goto LABEL_38;
      }
    }

    else
    {
      if ((a3 & 4) != 0)
      {
        if ((a5 & 0xF) != 0 || *a7 < a5) {
          goto LABEL_40;
        }
        unsigned int v30 = a5;
        ccaes_cbc_encrypt_mode();
        firebloom_cbc_one_shot_f();
LABEL_39:
        uint64_t v8 = 0LL;
        *a7 = v30;
        goto LABEL_40;
      }

      if (rfc3394_wrapped_size_legacy(a5, &v30))
      {
        if (*a7 < v30) {
          goto LABEL_40;
        }
        if ((a3 & 8) != 0)
        {
          ccsha256_di();
          cchkdf();
          char v18 = __s;
        }

        else
        {
          char v18 = a1 + 2;
        }

        unsigned int v19 = 32;
        unsigned int v20 = 0LL;
        unsigned int v21 = a4;
LABEL_38:
        if (rfc3394_wrap_legacy( (uint64_t)v18,  v19,  0xA6A6A6A6A6A6A6A6LL,  v20,  v21,  a5,  (void *)a6,  &v30)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
    }

    uint64_t v8 = 4294967285LL;
    if ((a3 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

  int v14 = *a1;
  if ((*a1 - 1) >= 2)
  {
    if (v14) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }

  if ((a3 & 4) != 0) {
    unsigned int v15 = 64;
  }
  else {
    unsigned int v15 = 72;
  }
  unsigned int v30 = v15;
  if (!a2 && a5 == 32 && *a7 >= v15)
  {
    if (v14 == 1)
    {
      generate_wrapping_key_curve25519((__int128 *)(a1 + 9), &v32);
    }

    else
    {
      __int128 v23 = *(_OWORD *)(a1 + 5);
      __int128 v32 = *(_OWORD *)(a1 + 1);
      __int128 v33 = v23;
      __int128 v24 = *(_OWORD *)(a1 + 13);
      __int128 v34 = *(_OWORD *)(a1 + 9);
      __int128 v35 = v24;
    }

    if ((a3 & 0x80) == 0)
    {
      __int128 v25 = v33;
      *(_OWORD *)a6 = v32;
      *(_OWORD *)(a6 + 16) = v25;
      if ((a3 & 4) != 0)
      {
        ccaes_cbc_encrypt_mode();
        firebloom_cbc_one_shot_f();
        goto LABEL_34;
      }

      int v29 = 40;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        v27 = (void *)(a6 + 32);
        v26 = __s;
      }

      else
      {
        v26 = &v34;
        v27 = (void *)(a6 + 32);
      }

      if (!rfc3394_wrap_legacy((uint64_t)v26, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, a4, 0x20u, v27, &v29))
      {
LABEL_34:
        uint64_t v8 = 0LL;
        *a7 = v15;
        if ((a3 & 8) == 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
  }

LABEL_40:
  if ((a3 & 8) != 0) {
LABEL_41:
  }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_42:
  memset_s(&v32, 0x40uLL, 0, 0x40uLL);
  return v8;
}

    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  return v11;
}

uint64_t generate_unwrap_shared_key_curve25519(__int128 *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  __int128 v8 = 0u;
  __int128 v7 = 0u;
  __int128 v3 = a1[1];
  __int128 v9 = *a1;
  __int128 v10 = v3;
  __int128 v4 = a3[1];
  __int128 v11 = *a3;
  int __s = 0x1000000;
  __int128 v12 = v4;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  return 0LL;
}

uint64_t unwrap_data( uint64_t a1, uint64_t (*a2)(void, void *, unint64_t *, unint64_t *, uint64_t), char a3, void *a4, unsigned int a5, void *a6, unsigned int *a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unsigned int v22 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (a4 && a5)
  {
    if (!a1) {
      goto LABEL_6;
    }
    if (*(_DWORD *)a1 != 1)
    {
      if (!*(_DWORD *)a1)
      {
LABEL_6:
        if (a5 <= 0x28)
        {
          if (a2)
          {
            if (rfc3394_unwrapped_size_legacy(a5, &v22) && *a7 >= v22)
            {
              unsigned int v15 = 0LL;
              unsigned int v16 = 0;
              char v17 = a2;
              goto LABEL_30;
            }
          }

          else if ((a3 & 4) != 0)
          {
            if ((a5 & 0xF) == 0 && *a7 >= a5)
            {
              unsigned int v22 = a5;
              ccaes_cbc_decrypt_mode();
              firebloom_cbc_one_shot_f();
LABEL_31:
              uint64_t v8 = 0LL;
              *a7 = v22;
              goto LABEL_35;
            }
          }

          else if (rfc3394_unwrapped_size_legacy(a5, &v22) && *a7 >= v22)
          {
            if ((a3 & 8) != 0)
            {
              ccsha256_di();
              cchkdf();
              unsigned int v15 = v24;
            }

            else
            {
              unsigned int v15 = (_OWORD *)(a1 + 8);
            }

            unsigned int v16 = 32;
            char v17 = 0LL;
LABEL_30:
            goto LABEL_40;
          }
        }

LABEL_38:
        uint64_t v8 = 4294967285LL;
        goto LABEL_35;
      }

LABEL_22:
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_35;
    }

    unsigned int v22 = 32;
    if (*a7 < 0x20) {
      goto LABEL_38;
    }
    memset(__s, 0, sizeof(__s));
    if ((a3 & 4) != 0)
    {
      if (a5 != 64) {
        goto LABEL_38;
      }
      generate_unwrap_shared_key_curve25519((__int128 *)a4, a1 + 4, (__int128 *)(a1 + 36));
      ccaes_cbc_decrypt_mode();
      firebloom_cbc_one_shot_f();
    }

    else
    {
      if (a5 != 72) {
        goto LABEL_38;
      }
      generate_unwrap_shared_key_curve25519((__int128 *)a4, a1 + 4, (__int128 *)(a1 + 36));
      if (a3 < 0) {
        goto LABEL_22;
      }
      int v21 = 32;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        char v18 = a4 + 4;
        unsigned int v19 = v24;
      }

      else
      {
        char v18 = a4 + 4;
        unsigned int v19 = __s;
      }

      if (rfc3394_unwrap_legacy((uint64_t)v19, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, v18, 0x28u, a6, &v21))
      {
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_40:
        uint64_t v8 = 4294967277LL;
        goto LABEL_35;
      }
    }

    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    uint64_t v8 = 0LL;
    *a7 = 32;
  }

  __break(1u);
}

LABEL_35:
  if ((a3 & 8) != 0) {
    memset_s(v24, 0x20uLL, 0, 0x20uLL);
  }
  return v8;
}

    char v17 = sub_183CE67E0(0LL, *((void *)v17 + 2) + 1LL, 1, v17);
    goto LABEL_25;
  }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_29:
  v55 = *(_DWORD *)(v6 + 16);
  v42 = sub_183CEF230(&v55, v17);
  if (v38)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    v43 = v42;
    swift_bridgeObjectRelease();
    v44 = sub_183CECBD8(v43, 17LL, 0LL);
    swift_release();
    v45 = *(void *)(v6 + 24);
    *(void *)(v6 + 24) = v44;
    sub_183CF9680(v45);
  }

  return v6;
}

                __int128 v24 = v23;
LABEL_39:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                *int v29 = v24;
                return a2;
              }

uint64_t rfc3394_wrap( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, void *a7, unint64_t *a8)
{
  uint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  ccaes_cbc_encrypt_mode();
  MEMORY[0x1895F8858]();
  v41 = (char *)&v34 - v14;
  bzero((char *)&v34 - v14, v14);
  MEMORY[0x1895F8858]();
  bzero((char *)&v34 - v15, v15);
  uint64_t v16 = 0xFFFFFFFFLL;
  v37 = &v34;
  v38 = a8;
  uint64_t v36 = a7;
  if (!a4)
  {
    BOOL v18 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v18 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }

    unint64_t v35 = a6 + 8;
    cccbc_init();
    goto LABEL_15;
  }

  if (a8)
  {
    unint64_t v17 = *v38;
    unint64_t v35 = a6 + 8;
    if (v17 >= a6 + 8)
    {
LABEL_15:
      uint64_t v19 = 0LL;
      unsigned int v20 = a6 >> 3;
      else {
        uint64_t v21 = v20;
      }
      do
      {
        uint64_t v22 = *a5++;
        *((void *)&__s[v19++] + 1) = v22;
      }

      while (v21 != v19);
      uint64_t v23 = 0LL;
      *(void *)&__s[0] = v40;
      uint64_t v24 = 1LL;
      uint64_t v39 = v20;
      do
      {
        uint64_t v40 = v23;
        uint64_t v25 = 0LL;
        v26 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1LL, &firebloom_null_iv, v26, v26, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv();
            firebloom_cbc_update_f();
          }

          uint64_t v27 = *v26;
          v26 += 2;
          unint64_t v28 = v27 ^ bswap64(v24 + v25++);
          *(void *)&__s[v25 % v20] = v28;
        }

        while (v21 != v25);
        uint64_t v23 = v40 + 1;
        v24 += v39;
      }

      while (v40 != 5);
      int v29 = v36;
      *uint64_t v36 = *(void *)&__s[0];
      unsigned int v30 = v29 + 1;
      v31 = (uint64_t *)__s + 1;
      do
      {
        uint64_t v32 = *v31;
        v31 += 2;
        *v30++ = v32;
        --v21;
      }

      while (v21);
      uint64_t v16 = 0LL;
      unint64_t *v38 = v35 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4) {
        return v16;
      }
LABEL_31:
      cc_clear();
      return v16;
    }
  }

LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

  uint64_t v8 = v7 + 1;
  __int128 v3 = 327693;
  uint64_t result = 327693LL;
  if (a3 < 0 || v5 > (unint64_t)v8)
  {
LABEL_34:
    __break(0x5519u);
    return result;
  }

  if (__CFADD__(v8, v6 - (void)v8)) {
    goto LABEL_31;
  }
  if (v6 - (void)v8 != 2 * a3) {
    return (v3 + 1);
  }
  if (__CFADD__(a2, a3) || v7 == (unsigned __int8 *)-2LL)
  {
LABEL_31:
    __break(0x5513u);
    return (v3 + 1);
  }

  __int128 v9 = v7 + 2;
  __int128 v10 = a2;
  while (1)
  {
    uint64_t result = 0LL;
    __int128 v11 = v9 - 1;
    __int128 v12 = &asciiNibbleToByte[*v11];
    uint64_t result = (uint64_t)&CTOidAppleImg4Manifest;
    if (v11 < v7) {
      goto LABEL_34;
    }
    size_t v14 = &asciiNibbleToByte[*v9];
    uint64_t result = (uint64_t)&CTOidAppleImg4Manifest;
    size_t v15 = *v12;
    uint64_t result = 327695LL;
    if (v15 > 0xF) {
      return result;
    }
    uint64_t v16 = *v14;
    if (v16 > 0xF) {
      return result;
    }
    if (v10 < a2) {
      goto LABEL_34;
    }
    *v10++ = v16 | (16 * v15);
    v9 += 2;
    if (!v9) {
      goto LABEL_31;
    }
  }

uint64_t rfc3394_wrap_legacy( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  unint64_t v11 = *a8;
  uint64_t v9 = rfc3394_wrap(a1, a2, a3, a4, a5, a6, a7, &v11);
  REQUIRE_func(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t rfc3394_unwrap( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unint64_t a6, void *a7, void *a8)
{
  v45 = a5;
  uint64_t v43 = a1;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_decrypt_mode();
  MEMORY[0x1895F8858](v14);
  v46 = (char *)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  MEMORY[0x1895F8858](v16);
  bzero((char *)&v37 - v17, v17);
  uint64_t v18 = 0xFFFFFFFFLL;
  if (HIDWORD(a6)) {
    goto LABEL_33;
  }
  uint64_t v39 = a3;
  unsigned int v19 = a6 >> 3;
  uint64_t v40 = &v37;
  v41 = a8;
  v38 = a7;
  unint64_t v44 = a6;
  if (!a4)
  {
    BOOL v20 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v20 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }

    cccbc_init();
    goto LABEL_15;
  }

  if (a8 && *v41 >= v44 - 8)
  {
LABEL_15:
    *(void *)&__s[0] = *v45;
    uint64_t v21 = v19 - 1;
    if (v19 != 1)
    {
      uint64_t v22 = (void *)__s + 1;
      uint64_t v23 = v45 + 1;
      uint64_t v24 = v19 - 1;
      do
      {
        uint64_t v25 = *v23++;
        *uint64_t v22 = v25;
        v22 += 2;
        --v24;
      }

      while (v24);
    }

    int v26 = 6 * v19 - 6;
    LODWORD(v43) = 1 - v19;
    int v27 = 5;
    v42 = (unint64_t *)&__s[v19 - 2];
    do
    {
      LODWORD(v45) = v27;
      if (v44 >= 0x10)
      {
        unint64_t v28 = v42;
        int v29 = v21;
        unsigned int v30 = v26;
        do
        {
          *unint64_t v28 = *(void *)&__s[v29 % v21] ^ bswap64(v30);
          if (a4)
          {
            if ((a4(0LL, &firebloom_null_iv, v28, v28, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv();
            firebloom_cbc_update_f();
          }

          --v30;
          v28 -= 2;
          BOOL v31 = __OFSUB__(v29--, 1);
        }

        while (!((v29 < 0) ^ v31 | (v29 == 0)));
      }

      int v27 = (_DWORD)v45 - 1;
      v26 += v43;
    }

    while ((_DWORD)v45);
    if (*(void *)&__s[0] == v39)
    {
      uint64_t v32 = v38;
      if ((_DWORD)v21)
      {
        __int128 v33 = (uint64_t *)__s + 1;
        uint64_t v34 = v21;
        do
        {
          uint64_t v35 = *v33;
          v33 += 2;
          *v32++ = v35;
          --v34;
        }

        while (v34);
      }

      uint64_t v18 = 0LL;
      void *v41 = (8 * v21);
    }

    else
    {
      uint64_t v18 = 0xFFFFFFFFLL;
    }

LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4) {
      return v18;
    }
LABEL_34:
    cc_clear();
    return v18;
  }

uint64_t rfc3394_unwrap_legacy( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v11 = *a8;
  uint64_t v9 = rfc3394_unwrap(a1, a2, a3, a4, a5, a6, a7, &v11);
  REQUIRE_func(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t rfc3394_wrapped_size_legacy(unsigned int a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 15LL;
  uint64_t v3 = v2 << 31 >> 31;
  BOOL v4 = v3 != v2 || v3 < 0;
  int v5 = v4;
  if (!v4) {
    *a2 = v3 & 0xFFFFFFF8;
  }
  return v5 ^ 1u;
}

uint64_t rfc3394_wrapped_size(unint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 >= 0xFFFFFFFFFFFFFFF1LL;
  BOOL v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  int v4 = v3;
  if (!v3) {
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  }
  return v4 ^ 1u;
}

BOOL rfc3394_unwrapped_size_legacy(unsigned int a1, unsigned int *a2)
{
  unsigned int v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL rfc3394_unwrapped_size(unint64_t a1, unint64_t *a2)
{
  unint64_t v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t lib_platform_rng()
{
  uint64_t v0 = ccrng();
  REQUIRE_func(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  REQUIRE_func(0LL, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t lib_platform_read_random(uint64_t a1, unsigned int a2)
{
  int v4 = *(unsigned int (**)(uint64_t, void, uint64_t))platform_rng();
  uint64_t v5 = platform_rng();
  BOOL v6 = v4(v5, a2, a1) == 0;
  return REQUIRE_func(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t lib_platform_get_device_id(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 < 0x1AuLL) {
    return 0xFFFFFFFFLL;
  }
  if ((lib_platform_get_device_id_s_device_id_len & 1) == 0)
  {
    int v7 = 0;
    uint64_t v6 = 0LL;
    LODWORD(lib_platform_get_device_id_s_device_id) = v7;
    byte_swap_val((char *)&lib_platform_get_device_id_s_device_id, 4uLL);
    *(void *)((char *)&lib_platform_get_device_id_s_device_id + 4) = v6;
    byte_swap_val((char *)&lib_platform_get_device_id_s_device_id + 4, 0x10uLL);
    lib_platform_get_device_id_s_device_id_len = 1;
  }

  *a2 = 20LL;
  uint64_t result = 0LL;
  if (a1)
  {
    __int128 v5 = lib_platform_get_device_id_s_device_id;
    *(_DWORD *)(a1 + 16) = dword_18C664F5C;
    *(_OWORD *)a1 = v5;
  }

  return result;
}

uint64_t lib_platform_get_chip_id(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (_DWORD *)result;
    uint64_t v2 = MGGetSInt64Answer();
    if (v2)
    {
      int v3 = v2;
      uint64_t result = 0LL;
      *unsigned int v1 = v3;
    }

    else
    {
      return 4294967284LL;
    }
  }

  return result;
}

uint64_t lib_platform_get_ecid(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    uint64_t v2 = MGGetSInt64Answer();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t result = 0LL;
      *unsigned int v1 = v3;
    }

    else
    {
      return 4294967284LL;
    }
  }

  return result;
}

uint64_t lib_platform_get_board_id(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (_DWORD *)result;
    uint64_t v2 = MGGetSInt64Answer();
    if (v2)
    {
      int v3 = v2;
      uint64_t result = 0LL;
      *unsigned int v1 = v3;
    }

    else
    {
      return 4294967284LL;
    }
  }

  return result;
}

uint64_t dict_find_params_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 8) >= *(void *)a5)
  {
    char v13 = 0;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    while (1)
    {
      BOOL v11 = der_equal( *(const void **)(*(void *)(a5 + 24) + v9),  *(void *)(*(void *)(a5 + 24) + v9)
            + *(unsigned __int8 *)(*(void *)(*(void *)(a5 + 24) + v9) + 1LL)
            + 2LL,
              a1);
      if (v11) {
        break;
      }
      ++v10;
      v9 += 40LL;
      if (v10 >= *(void *)a5) {
        goto LABEL_10;
      }
    }

    uint64_t v14 = (void *)(*(void *)(a5 + 24) + v9);
    if (v14[1])
    {
      char v12 = 0;
      *(_BYTE *)(a5 + 16) = 1;
    }

    else
    {
      ++*(void *)(a5 + 8);
      v14[1] = a3;
      _OWORD v14[2] = a3 + a4;
      v14[3] = a3;
      v14[4] = a3 + a4;
      char v12 = 1;
    }

LABEL_10:
    char v13 = v12 | !v11;
  }

  return v13 & 1;
}

  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v7;
}

  uint64_t result = (char *)swift_unexpectedError();
  __break(1u);
  return result;
}

BOOL der_key_equal(unsigned __int8 *a1, const void *a2)
{
  return der_equal(a1, (uint64_t)&a1[a1[1] + 2], a2);
}

BOOL der_equal(const void *a1, uint64_t a2, const void *a3)
{
  size_t v5 = der_get_sizeof((uint64_t)a1);
  return v5 == der_get_sizeof((uint64_t)a3) && memcmp(a1, a3, v5) == 0;
}

uint64_t der_get_sizeof(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t der_dict_iterate()
{
  uint64_t result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl())
    {
      uint64_t result = ccder_blob_decode_tl();
      if ((_DWORD)result) {
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t der_dict_find_value(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    der_dict_iterate();
    if (a2)
    {
      if (a3)
      {
        *a2 = 0LL;
        *a3 = 0LL;
      }
    }
  }

  return 0LL;
}

BOOL _dict_find_value_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = der_equal(*(const void **)a5, *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1LL) + 2LL, a1);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(void *)(a5 + 8) = a3;
    *(void *)(a5 + 16) = a3 + a4;
  }

  return !v8;
}

uint64_t der_dict_get_number(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  if (result)
  {
    der_dict_iterate();
    return 0LL;
  }

  return result;
}

uint64_t der_get_number()
{
  return 0LL;
}

uint64_t der_dict_get_data(uint64_t result)
{
  if (result)
  {
    der_dict_iterate();
    return 0LL;
  }

  return result;
}

double der_utils_decode_implicit_raw_octet_string(__int128 *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  __int128 v8 = *a1;
  if (ccder_blob_decode_range())
  {
    *a4 = 0LL;
    *a3 = 0;
    double result = *(double *)&v8;
    *a1 = v8;
  }

  return result;
}

uint64_t der_array_iterate( uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, void, uint64_t), uint64_t a4)
{
  *(void *)&__int128 v12 = a1;
  *((void *)&v12 + 1) = a2;
  uint64_t v6 = ccder_blob_decode_range();
  if ((_DWORD)v6)
  {
    uint64_t v11 = 0LL;
    uint64_t v7 = v12;
    if (der_utils_decode_tl(&v12, &v10, &v11))
    {
      do
      {
        uint64_t v8 = v12 + v11;
        if (!a3(v7, v12 + v11 - v7, a4)) {
          break;
        }
        *(void *)&__int128 v12 = v8;
        uint64_t v7 = v8;
      }

      while ((der_utils_decode_tl(&v12, &v10, &v11) & 1) != 0);
    }
  }

  return v6;
}

uint64_t der_utils_decode_tl(__int128 *a1, void *a2, void *a3)
{
  __int128 v7 = *a1;
  uint64_t result = ccder_blob_decode_tag();
  if ((_DWORD)result)
  {
    uint64_t result = ccder_blob_decode_len();
    if ((_DWORD)result)
    {
      *a1 = v7;
      *a2 = 0LL;
      *a3 = 0LL;
      return 1LL;
    }
  }

  return result;
}

uint64_t der_get_BOOL()
{
  return 0LL;
}

uint64_t encode_list_free(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v2 = *a1;
    if (!*a1) {
      break;
    }
    int v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }

    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }

  return 0LL;
}

uint64_t encode_list_remove_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (void **)a1;
  uint64_t result = (uint64_t)_encode_list_find_key(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (i = *v2; i != (void *)result; i = (void *)*i)
      uint64_t v2 = (void **)i;
    void *v2 = *(void **)result;
    uint64_t v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }

    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0LL;
  }

  return result;
}

void *_encode_list_find_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      size_t v5 = (const void *)v2[1];
      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return v2;
}

uint64_t encode_list_get_data(void *a1, unsigned __int8 *a2, int a3, void *a4, void *a5)
{
  key = _encode_list_find_key(a1, a2);
  if (!key) {
    return 0LL;
  }
  uint64_t v9 = 1LL;
  if (a4)
  {
    if (a5)
    {
      uint64_t v10 = key[1] + key[2];
      *(void *)&__int128 v15 = key[1];
      *((void *)&v15 + 1) = v10;
      uint64_t v9 = ccder_blob_decode_sequence_tl();
      if ((_DWORD)v9)
      {
        if (der_utils_decode_implicit_raw_octet_string_copy(&v15, 12LL, 0LL, 0))
        {
          uint64_t v11 = v15;
          if (ccder_blob_decode_tag())
          {
            if (ccder_blob_decode_len())
            {
              uint64_t v13 = 0LL;
              uint64_t v12 = v15;
              if (a3)
              {
                uint64_t v13 = (v15 - v11);
                uint64_t v12 = v11;
              }

              *a4 = v12;
              *a5 = v13;
            }
          }
        }
      }
    }
  }

  return v9;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy(__int128 *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0 || a3 && a4) {
    return 0LL;
  }
  *a1 = v8;
  return 1LL;
}

uint64_t encode_list_cstr_get_data(void *a1, char *__s, void *a3, size_t a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  memset(v18, 0, sizeof(v18));
  __int128 v17 = 0u;
  __int128 v16 = 0u;
  __int128 v15 = 0u;
  __int128 v14 = 0u;
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  v11[0] = 12;
  v11[1] = strlen(__s);
  __int128 v7 = (unsigned __int8 *)der_key_validate((uint64_t)v11);
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && v7)
  {
    __memcpy_chk();
    __src = 0LL;
    uint64_t v10 = 0LL;
    if (encode_list_get_data(a1, v7, 0, &__src, &v10))
    {
      if (v10 == a4)
      {
        memcpy(a3, __src, a4);
        return 0LL;
      }

      else
      {
        return 4294967277LL;
      }
    }

    else
    {
      return 4294967293LL;
    }
  }

  return result;
}

uint64_t der_key_validate(uint64_t a1)
{
  if ((ccder_blob_decode_tl() & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x1895F89E0], "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  return a1;
}

uint64_t encode_list_get_number(void *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t data = encode_list_get_data(a1, a2, 1, &v7, &v8);
  uint64_t v5 = data;
  if (a3 && (_DWORD)data) {
    *a3 = der_get_number();
  }
  return v5;
}

uint64_t encode_list_get_BOOL(void *a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t data = encode_list_get_data(a1, a2, 1, &v7, &v8);
  uint64_t v5 = data;
  if (a3 && (_DWORD)data) {
    *a3 = der_get_BOOL();
  }
  return v5;
}

uint64_t encode_list_merge_dict(uint64_t a1)
{
  if (a1) {
    return der_dict_iterate() - 1;
  }
  else {
    return 4294967285LL;
  }
}

uint64_t _merge_dict_cb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (unsigned __int8 *)der_key_validate(a1);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
  }

  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n",  "aks",  "",  "",  "",  "_merge_dict_cb",  ":",  647,  "",  0,  "",  "");
  return 0LL;
}

uint64_t encode_list_dict(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          uint64_t v10 = 0LL;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16LL;
            --v8;
          }

          while (v7);
          if (v8 >= 0xF000000000000001LL && (v11 = -v9, (__int128 v12 = calloc(-v9, 1uLL)) != 0LL))
          {
            __int128 v13 = v12;
            __int128 v14 = (void *)*a1;
            if (*a1)
            {
              __int128 v15 = v12;
              do
              {
                *v15++ = *(_OWORD *)(v14 + 1);
                __int128 v14 = (void *)*v14;
              }

              while (v14);
            }

            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))_qsort_compare);
            size_t v16 = ccder_sizeof();
            __int128 v17 = (char *)calloc(v16, 1uLL);
            uint64_t v18 = v17;
            if (v17)
            {
              uint64_t v25 = v17;
              int v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              uint64_t v20 = (uint64_t)v13 - v9 - 8;
              while (!__CFADD__(v19++, 1LL))
              {
                uint64_t v22 = v20 - 16;
                char v23 = ccder_blob_encode_body();
                uint64_t v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }

              if (!ccder_blob_encode_tl() || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }

              uint64_t v3 = 0LL;
              *a2 = v18;
              *a3 = v16;
              uint64_t v18 = 0LL;
            }

            else
            {
              uint64_t v3 = 4294967279LL;
            }

LABEL_20:
            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }

          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v3;
}

  char v23 = v50;
  if (__OFSUB__(v50, v48)) {
    goto LABEL_45;
  }
  if (v50 == v48) {
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)v6 + 2);
  uint64_t v24 = v49;
  uint64_t v43 = v47;
  v45 = v48;
  uint64_t v25 = (uint64_t (*)(_BYTE *, void))v4(v46, v50);
  int v27 = *v26;
  uint64_t result = v25(v46, 0LL);
  unint64_t v28 = v23 - 1;
  if (v23 < 1) {
    goto LABEL_47;
  }
  int v29 = v24;
  v42 = (71 - __clz(v24)) >> 3;
  if (v42 < v23) {
    goto LABEL_47;
  }
  unsigned int v30 = v45;
LABEL_26:
  while (1)
  {
    BOOL v31 = *((void *)v6 + 3);
    uint64_t v32 = v31 >> 1;
    __int128 v33 = v7 + 1;
    uint64_t v34 = v7 - v32;
    if (v7 < v32) {
      goto LABEL_28;
    }
LABEL_25:
    *((void *)v6 + 2) = v7;
  }

  uint64_t v39 = v6;
  uint64_t v40 = v29;
  uint64_t result = (uint64_t)sub_183CE66F8((char *)(v31 > 1), v7 + 1, 1, v39);
  int v29 = v40;
  unsigned int v30 = v45;
  uint64_t v6 = (char *)result;
  uint64_t v32 = *(void *)(result + 24) >> 1;
  uint64_t v34 = v7 - v32;
  if (v7 >= v32) {
    goto LABEL_25;
  }
LABEL_28:
  v6[v7 + 32] = v27;
  if (__OFSUB__(v28, v30)) {
    goto LABEL_46;
  }
  v41 = v32;
  if (v28 == v30)
  {
LABEL_42:
    *((void *)v6 + 2) = v33;
    goto LABEL_15;
  }

  uint64_t v10 = 0LL;
  unint64_t v44 = v34 + 1;
  uint64_t v35 = v6 + 33;
  while (1)
  {
    uint64_t v36 = v29;
    uint64_t v37 = (uint64_t (*)(_BYTE *, void))((uint64_t (*)(_BYTE *, uint64_t, int64_t))v4)( v46,  v28 + v10,  v43);
    int v27 = *v38;
    uint64_t result = v37(v46, 0LL);
    if (v28 > v42 || v28 + v10 < 1) {
      break;
    }
    int v29 = v36;
    if (v44 == v10)
    {
      unint64_t v28 = v28 + v10 - 1;
      uint64_t v7 = v41;
      unsigned int v30 = v45;
      *((void *)v6 + 2) = v41;
      goto LABEL_26;
    }

    v35[v7] = v27;
    if (__OFSUB__(v28 + v10 - 1, v45)) {
      goto LABEL_44;
    }
    --v10;
    ++v35;
    if (!(v28 - v45 + v10)) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

  __break(1u);
}

  uint64_t v20 = v11 + 1;
  if (__OFADD__(v11, 1LL)) {
    goto LABEL_49;
  }
  if (v20 != v5)
  {
    while (v20 < v5)
    {
      uint64_t v22 = &v4[i];
      uint64_t result = sub_183CE09F4(*(void *)&v4[i - 48], *(void *)&v4[i - 40], *(void *)&v4[i - 32], a2, a3, v6);
      if ((result & 1) == 0)
      {
        if (v20 != v11)
        {
          if ((v11 & 0x8000000000000000LL) != 0) {
            goto LABEL_43;
          }
          char v23 = *((void *)v4 + 2);
          if (v11 >= v23) {
            goto LABEL_44;
          }
          if (v20 >= v23) {
            goto LABEL_45;
          }
          uint64_t v24 = &v4[64 * v11 + 32];
          uint64_t v35 = *((_OWORD *)v24 + 2);
          BOOL v31 = *((_OWORD *)v24 + 3);
          uint64_t v32 = *((_OWORD *)v24 + 1);
          uint64_t v37 = *(_OWORD *)(v22 - 56);
          uint64_t v25 = *((void *)v22 - 5);
          v38 = *((void *)v22 - 4);
          uint64_t v36 = *(_OWORD *)&v4[i - 24];
          int v26 = *(void *)&v4[i];
          uint64_t v34 = *(void *)&v4[i - 8];
          __int128 v33 = *(_OWORD *)v24;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = sub_183CF84C4((uint64_t)v4);
          }
          int v27 = &v4[64 * v11];
          *((_OWORD *)v27 + 2) = v37;
          *((void *)v27 + 6) = v25;
          *((void *)v27 + 7) = v38;
          *((_OWORD *)v27 + 4) = v36;
          *((void *)v27 + 10) = v34;
          *((void *)v27 + 11) = v26;
          swift_unknownObjectRelease();
          uint64_t result = swift_unknownObjectRelease();
          if (v20 >= *((void *)v4 + 2)) {
            goto LABEL_46;
          }
          unint64_t v28 = &v4[i];
          *(_OWORD *)(v28 - 56) = v33;
          *(_OWORD *)(v28 - 40) = v32;
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 8) = v31;
          swift_unknownObjectRelease();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v6 = a4;
          *unsigned int v30 = v4;
        }

        if (__OFADD__(v11++, 1LL)) {
          goto LABEL_41;
        }
      }

      ++v20;
      uint64_t v5 = *((void *)v4 + 2);
      i += 64LL;
      if (v20 == v5) {
        return v11;
      }
    }

    __break(0x5519u);
  }

  return result;
}

uint64_t encode_list_add_der(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    if (der_get_sizeof(a3) <= (unint64_t)(a4 - a3))
    {
      size_t v6 = ccder_sizeof();
      uint64_t v7 = (char *)calloc(v6, 1uLL);
      if (!v7) {
        return 4294967279LL;
      }
      unint64_t v8 = v7;
      size_t v16 = &v7[v6];
      if (ccder_blob_encode_body())
      {
        int v9 = ccder_blob_encode_body();
        uint64_t v10 = v16;
        if (!v9) {
          uint64_t v10 = 0LL;
        }
        __int128 v17 = v10;
        int v11 = ccder_blob_encode_tl();
        __int128 v12 = v17;
        if (!v11) {
          __int128 v12 = 0LL;
        }
        if (v12 && v12 == v8)
        {
          __int128 v14 = calloc(0x18uLL, 1uLL);
          if (v14)
          {
            __int128 v15 = v14;
            uint64_t result = 0LL;
            v15[1] = v8;
            v15[2] = v6;
            *__int128 v15 = *a1;
            *a1 = v15;
            return result;
          }
        }
      }

      memset_s(v8, v6, 0, v6);
      free(v8);
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t encode_list_add_key(void *a1, uint64_t a2, uint64_t a3)
{
  return encode_list_add_der(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t encode_list_add_data(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    size_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      __int128 v15 = &v6[v5];
      int v8 = ccder_blob_encode_body();
      int v9 = v15;
      if (!v8) {
        int v9 = 0LL;
      }
      size_t v16 = v9;
      int v10 = ccder_blob_encode_tl();
      int v11 = v16;
      if (!v10) {
        int v11 = 0LL;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (__int128 v13 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v14 = v13;
        uint64_t result = 0LL;
        v14[1] = v7;
        _OWORD v14[2] = v5;
        *__int128 v14 = *a1;
        *a1 = v14;
      }

      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_cstr_add_data(void *a1, char *__s, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(v14, 0, sizeof(v14));
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  __int128 v11 = 0u;
  __int128 v10 = 0u;
  __int128 v9 = 0u;
  __int128 v8 = 0u;
  v7[0] = 12;
  v7[1] = strlen(__s);
  uint64_t v5 = der_key_validate((uint64_t)v7);
  uint64_t result = 4294967285LL;
  if (a3)
  {
    if (v5)
    {
      __memcpy_chk();
      return encode_list_add_data(a1, v5, a3);
    }
  }

  return result;
}

uint64_t encode_list_add_BOOL(void *a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v4 = ccder_sizeof();
    uint64_t v5 = (char *)calloc(v4, 1uLL);
    if (v5)
    {
      size_t v6 = v5;
      __int128 v14 = &v5[v4];
      int v7 = ccder_blob_encode_body();
      __int128 v8 = v14;
      if (!v7) {
        __int128 v8 = 0LL;
      }
      uint64_t v15 = v8;
      int v9 = ccder_blob_encode_tl();
      __int128 v10 = v15;
      if (!v9) {
        __int128 v10 = 0LL;
      }
      BOOL v11 = v10 && v10 == v6;
      if (v11 && (__int128 v12 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v13 = v12;
        uint64_t result = 0LL;
        v13[1] = v6;
        v13[2] = v4;
        void *v13 = *a1;
        *a1 = v13;
      }

      else
      {
LABEL_18:
        memset_s(v6, v4, 0, v4);
        free(v6);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_number(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v25[1] = *MEMORY[0x1895F89C0];
  unint64_t v5 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v10 = 8LL;
  }

  else
  {
    uint64_t v6 = 9LL;
    uint64_t v7 = 48LL;
    uint64_t v8 = 1LL;
    while ((unint64_t)(v6 - 2) >= 2)
    {
      uint64_t v9 = a3 >> v7;
      --v6;
      v7 -= 8LL;
      if ((_DWORD)v5 != v9)
      {
        uint64_t v8 = v6 - 1;
        goto LABEL_8;
      }
    }

    uint64_t v6 = 2LL;
LABEL_8:
    else {
      uint64_t v10 = v8;
    }
  }

  v25[0] = 0LL;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v12 = ccder_sizeof();
    __int128 v13 = (char *)calloc(v12, 1uLL);
    if (v13)
    {
      __int128 v14 = v13;
      uint64_t v15 = v10;
      do
      {
        *((_BYTE *)v25 + v15 - 1) = v3;
        v3 >>= 8;
        --v15;
      }

      while (v15);
      char v23 = &v13[v12];
      int v16 = ccder_blob_encode_body();
      __int128 v17 = v23;
      if (!v16) {
        __int128 v17 = 0LL;
      }
      uint64_t v24 = v17;
      int v18 = ccder_blob_encode_tl();
      unint64_t v19 = v24;
      if (!v18) {
        unint64_t v19 = 0LL;
      }
      BOOL v20 = v19 && v19 == v14;
      if (v20 && (uint64_t v21 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        uint64_t v22 = v21;
        uint64_t result = 0LL;
        v22[1] = v14;
        v22[2] = v12;
        *uint64_t v22 = *a1;
        *a1 = v22;
      }

      else
      {
LABEL_30:
        memset_s(v14, v12, 0, v12);
        free(v14);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_string(void *a1, uint64_t a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && __s)
  {
    strlen(__s);
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    uint64_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v15 = &v6[v5];
      int v8 = ccder_blob_encode_body();
      uint64_t v9 = v15;
      if (!v8) {
        uint64_t v9 = 0LL;
      }
      int v16 = v9;
      int v10 = ccder_blob_encode_tl();
      BOOL v11 = v16;
      if (!v10) {
        BOOL v11 = 0LL;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (__int128 v13 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v14 = v13;
        uint64_t result = 0LL;
        v14[1] = v7;
        _OWORD v14[2] = v5;
        *__int128 v14 = *a1;
        *a1 = v14;
      }

      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_list(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0LL;
  int __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    size_t v5 = 0LL;
    if (a3)
    {
      if (encode_list_dict(a3, &__s, &__n))
      {
        uint64_t v3 = 0LL;
        size_t v5 = 0LL;
      }

      else
      {
        size_t v5 = ccder_sizeof();
        uint64_t v7 = (char *)calloc(v5, 1uLL);
        uint64_t v3 = v7;
        if (v7)
        {
          uint64_t v15 = &v7[v5];
          int v18 = v3;
          unint64_t v19 = v15;
          int v8 = ccder_blob_encode_body();
          uint64_t v9 = v19;
          if (!v8) {
            uint64_t v9 = 0LL;
          }
          int v18 = v3;
          unint64_t v19 = v9;
          int v10 = ccder_blob_encode_tl();
          BOOL v11 = v19;
          if (!v10) {
            BOOL v11 = 0LL;
          }
          BOOL v12 = v11 && v11 == v3;
          if (v12 && (__int128 v13 = calloc(0x18uLL, 1uLL)) != 0LL)
          {
            uint64_t v4 = 0LL;
            v13[1] = v3;
            v13[2] = v5;
            void *v13 = *a1;
            *a1 = v13;
            uint64_t v3 = 0LL;
          }

          else
          {
LABEL_23:
            uint64_t v4 = 0xFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v4 = 4294967279LL;
        }
      }
    }
  }

  else
  {
    size_t v5 = 0LL;
  }

  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v3)
  {
    memset_s(v3, v5, 0, v5);
    free(v3);
  }

  return v4;
}

BOOL encode_list_is_empty(void *a1)
{
  return *a1 == 0LL;
}

uint64_t ccder_sizeof_fv_data()
{
  return ccder_sizeof();
}

uint64_t ccder_sizeof_fv_key()
{
  uint64_t v0 = ccder_sizeof();
  return ccder_sizeof() + v0;
}

uint64_t der_utils_encode_fv_key(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    uint64_t result = ccder_blob_encode_body_tl();
    if (!(_DWORD)result) {
      return result;
    }
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0LL;
    }
  }

  else if (!ccder_blob_encode_body_tl() || (ccder_blob_encode_tl() & 1) == 0)
  {
    return 0LL;
  }

  *a1 = v4;
  return 1LL;
}

uint64_t der_utils_decode_fv_key(__int128 *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 20);
  __int128 v11 = *a1;
  if (a2)
  {
    __int128 v14 = *a1;
    BOOL v12 = 0LL;
    uint64_t v13 = 0LL;
    if ((ccder_blob_decode_range() & 1) == 0) {
      return 0LL;
    }
    uint64_t v6 = (uint64_t)v12;
    unsigned int v8 = v13 - (_DWORD)v12;
    __int128 v11 = v14;
  }

  else
  {
    LODWORD(v14) = v5;
    uint64_t result = der_utils_decode_implicit_raw_octet_string_copy_len(&v11, 4LL, v6, &v14);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v8 = v14;
  }

  __int128 v14 = v11;
  BOOL v12 = 0LL;
  uint64_t v13 = 0LL;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  __int128 v11 = v14;
  int v10 = *v12;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v7;
  *a1 = v11;
  return 1LL;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy_len( __int128 *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int128 v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  if (a3)
  {
    if (a4) {
      *a4 = 0;
    }
  }

  *a1 = v8;
  return 1LL;
}

uint64_t der_utils_encode_fv_data(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = ccder_blob_encode_tl();
    if (!(_DWORD)result) {
      return result;
    }
  }

  *a1 = v4;
  return 1LL;
}

uint64_t der_utils_decode_fv_data(__int128 *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  __int128 v9 = *a1;
  if (a2)
  {
    __int128 v12 = *a1;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t result = ccder_blob_decode_range();
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v6 = v10;
    unsigned int v8 = v11 - v10;
    __int128 v9 = v12;
  }

  else
  {
    LODWORD(v12) = v5;
    uint64_t result = der_utils_decode_implicit_raw_octet_string_copy_len(&v9, 4LL, v6, &v12);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v8 = v12;
  }

  *a3 = v6;
  a3[1] = v8;
  *a1 = v9;
  return 1LL;
}

uint64_t der_utils_encode_fv_params(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = ccder_blob_encode_tl();
    if (!(_DWORD)result) {
      return result;
    }
  }

  *a1 = v4;
  return 1LL;
}

uint64_t der_utils_decode_fv_params(__int128 *a1)
{
  __int128 v3 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  *a1 = v3;
  return 1LL;
}

uint64_t encode_extended_state(unsigned int *a1, int a2, void *a3, _DWORD *a4)
{
  __int128 v12 = 0LL;
  if (encode_list_add_number(&v12, (uint64_t)der_key_state_state, *a1)
    || encode_list_add_number(&v12, (uint64_t)der_key_state_lock_state, a1[1])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_backoff, *((void *)a1 + 1))
    || encode_list_add_number(&v12, (uint64_t)der_key_state_failed_attempts, a1[4])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_generation_state, a1[5])
    || encode_list_add_number( &v12,  (uint64_t)der_key_state_recovery_countdown,  *(void *)((char *)a1 + 26))
    || encode_list_add_number(&v12, (uint64_t)der_key_state_more_state, *(void *)((char *)a1 + 34))
    || encode_list_add_number(&v12, (uint64_t)der_key_keybag_handle, *(int *)((char *)a1 + 42))
    || encode_list_add_number( &v12,  (uint64_t)der_key_config_max_unlock_attempts,  *(unsigned int *)((char *)a1 + 46))
    || encode_list_add_data(&v12, (uint64_t)der_key_config_user_uuid, (uint64_t)a1 + 50)
    || a2
    && (encode_list_add_number(&v12, (uint64_t)der_key_state_assertion_set, *((char *)a1 + 66))
     || encode_list_add_number(&v12, (uint64_t)der_key_state_grace_period_enabled, *((char *)a1 + 67))
     || encode_list_add_number(&v12, (uint64_t)der_key_lock_time, *(void *)(a1 + 17))
     || encode_list_add_number(&v12, (uint64_t)der_key_cx_window, *(void *)(a1 + 19)))
    || (uint64_t v10 = 0LL, v11 = 0LL, encode_list_dict(&v12, &v10, &v11)))
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = 0LL;
    *a3 = v10;
    *a4 = v11;
  }

  encode_list_free(&v12);
  return v8;
}

uint64_t decode_extended_state(uint64_t a1, int a2, char *__s)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1)
  {
    if (__s)
    {
      memset_s(__s, 0x54uLL, 0, 0x54uLL);
      bzero(v7, 0x228uLL);
      v7[4] = der_key_state_lock_state;
      v7[9] = der_key_state_backoff;
      v7[14] = der_key_state_failed_attempts;
      v7[19] = der_key_state_generation_state;
      v7[24] = der_key_state_assertion_set;
      v7[29] = der_key_state_grace_period_enabled;
      v7[34] = der_key_state_recovery_countdown;
      v7[39] = der_key_state_more_state;
      v7[44] = der_key_keybag_handle;
      v7[49] = der_key_config_max_unlock_attempts;
      v7[54] = der_key_config_user_uuid;
      __int128 v9 = der_key_lock_time;
      uint64_t v10 = der_key_cx_window;
      der_dict_iterate();
      *(_DWORD *)int __s = der_get_number();
      *((_DWORD *)__s + 1) = der_get_number();
      *((void *)__s + 1) = der_get_number();
      *((_DWORD *)__s + 4) = der_get_number();
      *((_DWORD *)__s + 5) = der_get_number();
      *(void *)(__s + 26) = der_get_number();
      *(void *)(__s + 34) = der_get_number();
      *(_DWORD *)(__s + 42) = der_get_number();
      *(_DWORD *)(__s + 46) = der_get_number();
      der_utils_decode_implicit_raw_octet_string_copy(&v8, 4LL, (uint64_t)(__s + 50), 16);
      __s[66] = der_get_number();
      __s[67] = der_get_number();
      *(void *)(__s + 68) = der_get_number();
      uint64_t number = der_get_number();
      uint64_t result = 0LL;
      *(void *)(__s + 76) = number;
    }
  }

  return result;
}

uint64_t decode_memento_state(uint64_t a1, int a2, _BYTE *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (der_dict_iterate())
    {
      *int __s = der_get_number();
      *((_DWORD *)__s + 1) = der_get_number();
      *((_DWORD *)__s + 2) = der_get_number();
      int number = der_get_number();
      uint64_t result = 0LL;
      *((_DWORD *)__s + 3) = number;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t decode_primary_identity_state(uint64_t a1, int a2, void *__s, void *a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s && a4)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    memset_s(a4, 0x10uLL, 0, 0x10uLL);
    uint64_t v12 = 0LL;
    v10[0] = 0u;
    __int128 v11 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    v10[1] = (unint64_t)der_key_group_uuid;
    uint64_t v13 = der_key_uuid;
    der_dict_iterate();
    if (der_utils_decode_implicit_raw_octet_string_copy(v10, 4LL, (uint64_t)__s, 16)
      && der_utils_decode_implicit_raw_octet_string_copy( (__int128 *)((char *)&v11 + 8),  4LL,  (uint64_t)a4,  16))
    {
      return der_utils_decode_implicit_raw_octet_string_copy(&v15, 4LL, a5, 16) - 1;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t decode_fv_blob_state(uint64_t a1, uint64_t a2, _DWORD *__s)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x58uLL, 0, 0x58uLL);
    __int128 v24 = 0u;
    uint64_t v26 = 0LL;
    __int128 v27 = 0u;
    uint64_t v28 = 0LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    uint64_t v33 = 0LL;
    __int128 v34 = 0u;
    uint64_t v35 = 0LL;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v40 = 0LL;
    __int128 v41 = 0u;
    uint64_t v42 = 0LL;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v8 = 0u;
    uint64_t v9 = 0LL;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v15 = 0LL;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v21 = 0LL;
    __int128 v23 = 0u;
    uint64_t v10 = der_key_id;
    *(void *)&__int128 v13 = der_key_flags;
    uint64_t v16 = der_key_version;
    *(void *)&__int128 v19 = der_key_state_reserved;
    uint64_t v22 = der_key_state_failed_attempts;
    uint64_t v25 = der_key_state_failed_attempts_other;
    int v29 = der_key_config_max_unlock_attempts;
    uint64_t v32 = der_key_state_backoff;
    uint64_t v36 = der_key_state_backoff_other;
    uint64_t v39 = der_key_config_capabilities;
    uint64_t v43 = der_key_state_refcount;
    der_dict_iterate();
    *int __s = der_get_number();
    if (der_utils_decode_implicit_raw_octet_string_copy( (__int128 *)((char *)&v8 + 8),  4LL,  (uint64_t)(__s + 1),  16)
      && der_utils_decode_implicit_raw_octet_string_copy(&v12, 4LL, (uint64_t)(__s + 5), 16)
      && (__s[9] = der_get_number(),
          __s[10] = der_get_number(),
          __s[11] = der_get_number(),
          __s[12] = der_get_number(),
          __s[15] = der_get_number(),
          __s[13] = der_get_number(),
          __s[14] = der_get_number(),
          der_utils_decode_implicit_raw_octet_string_copy_partial((__int128 *)((char *)&v20 + 8))))
    {
      int v6 = __s[9];
      if ((v6 & 0x400) != 0)
      {
        *((void *)__s + 9) = der_get_number();
        int v6 = __s[9];
      }

      if ((v6 & 0x800) != 0)
      {
        int number = der_get_number();
        uint64_t result = 0LL;
        __s[20] = number;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy_partial(__int128 *a1)
{
  __int128 v4 = *a1;
  uint64_t v2 = ccder_blob_decode_range();
  if ((v2 & 1) != 0) {
    *a1 = v4;
  }
  return v2;
}

uint64_t encode_pfk_params_public(int *a1, void *a2, _DWORD *a3)
{
  __int128 v11 = 0LL;
  uint64_t v3 = 4294967273LL;
  if (a2 && a3)
  {
    if (a1 && (int v7 = *a1) != 0)
    {
      if ((v7 & 1) != 0)
      {
        encode_list_cstr_add_data(&v11, "persona_uuid", (uint64_t)(a1 + 1));
        int v7 = *a1;
      }

      if ((v7 & 2) != 0) {
        encode_list_cstr_add_data(&v11, "volume_uuid", (uint64_t)(a1 + 5));
      }
      uint64_t v9 = 0LL;
      size_t v10 = 0LL;
      if (!encode_list_dict(&v11, &v9, &v10))
      {
        uint64_t v3 = 0LL;
        *a2 = v9;
        *a3 = v10;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      *a2 = 0LL;
      *a3 = 0;
    }
  }

  encode_list_free(&v11);
  return v3;
}

uint64_t decode_pfk_params_internal(uint64_t a1, uint64_t a2, char *__s)
{
  int v6 = 0LL;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x24uLL, 0, 0x24uLL);
    if (der_dict_iterate())
    {
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }

  encode_list_free(&v6);
  return v3;
}

uint64_t encode_fv_params_internal(uint64_t a1, void *a2, _DWORD *a3)
{
  size_t v10 = 0LL;
  uint64_t v3 = 4294967273LL;
  if (a2 && a3)
  {
    if (a1)
    {
      if (!encode_list_cstr_add_data(&v10, "options", a1)
        && !encode_list_cstr_add_data(&v10, "kc", a1 + 8))
      {
        uint64_t v8 = 0LL;
        size_t v9 = 0LL;
        if (!encode_list_dict(&v10, &v8, &v9))
        {
          uint64_t v3 = 0LL;
          *a2 = v8;
          *a3 = v9;
        }
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      *a2 = 0LL;
      *a3 = 0;
    }
  }

  encode_list_free(&v10);
  return v3;
}

uint64_t decode_fv_params_internal(uint64_t a1, uint64_t a2, char *__s)
{
  int v6 = 0LL;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (der_dict_iterate())
    {
      encode_list_cstr_get_data(&v6, "options", __s, 8uLL);
      encode_list_cstr_get_data(&v6, "kc", __s + 8, 4uLL);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }

  encode_list_free(&v6);
  return v3;
}

uint64_t ref_key_op_der_to_enum(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  uint64_t v4 = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    if (der_key_op) {
      der_dict_iterate();
    }
    return 0LL;
  }

  return result;
}

uint64_t der_utils_decode_implicit_raw_octet_string_alloc(__int128 *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  __int128 v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  if (a3 && a4)
  {
    uint64_t result = (uint64_t)calloc(0LL, 1uLL);
    if (!result) {
      return result;
    }
    *a3 = result;
    *a4 = 0;
  }

  *a1 = v8;
  return 1LL;
}

uint64_t der_utils_decode_implicit_uint64(__int128 *a1, uint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0LL;
  }
  __int128 v6 = *a1;
  uint64_t result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    if (ccn_read_uint())
    {
      return 0LL;
    }

    else
    {
      *a1 = v6;
      if (a3) {
        *a3 = 0LL;
      }
      return 1LL;
    }
  }

  return result;
}

uint64_t _qsort_compare(const void **a1, void **a2)
{
  uint64_t v5 = *a1;
  __s2 = *a2;
  if (!ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !v5
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !__s2)
  {
    return 4294967293LL;
  }

  int v2 = memcmp(v5, __s2, 0LL);
  if (v2 > 0) {
    return 1LL;
  }
  else {
    return ((v2 < 0) << 31 >> 31);
  }
}

uint64_t sizeof_backup_bag()
{
  return ccder_sizeof();
}

uint64_t encode_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_implicit_uint64())
  {
    return 4294967273LL;
  }

  int v3 = ccder_blob_encode_tl();
  uint64_t result = 4294967273LL;
  if (v3)
  {
    if (a2 == v6) {
      return 0LL;
    }
    else {
      return 4294967273LL;
    }
  }

  return result;
}

uint64_t decode_backup_bag(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&__int128 v6 = a1;
  *((void *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range()
    || !der_utils_decode_implicit_uint64(&v6, 0x8000000000000000LL, a3)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000001LL, (uint64_t)(a3 + 1), 16)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000002LL, (uint64_t)(a3 + 3), 40)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000003LL, (uint64_t)(a3 + 8), 16))
  {
    return 4294967277LL;
  }

  int v4 = der_utils_decode_implicit_uint64(&v6, 0x8000000000000004LL, a3 + 10);
  uint64_t result = 4294967277LL;
  if (v4)
  {
    if ((void)v6 == *((void *)&v6 + 1)) {
      return 0LL;
    }
    else {
      return 4294967277LL;
    }
  }

  return result;
}

uint64_t wrap_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  int v12 = 40;
  *(void *)a4 = 0LL;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(void *)(a4 + 80) = 1LL;
  platform_read_random(a4 + 64, 0x10u);
  uint64_t v8 = ccsha256_di();
  if (firebloom_ccpbkdf2_hmac(v8, a3, a2, 16LL, a4 + 64, *(void *)(a4 + 80), 32LL, __s))
  {
    uint64_t v10 = 4294967286LL;
  }

  else
  {
    uint64_t v9 = rfc3394_wrap_legacy( (uint64_t)__s,  0x20u,  0xA6A6A6A6A6A6A6A6LL,  0LL,  (uint64_t *)a1,  0x20u,  (void *)(a4 + 24),  &v12);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
    }

    else if (v12 == 40)
    {
      uint64_t v10 = 0LL;
    }

    else
    {
      uint64_t v10 = 4294967286LL;
    }
  }

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

uint64_t unwrap_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  int v12 = 32;
  if (*(void *)a1)
  {
    uint64_t v10 = 4294967284LL;
  }

  else
  {
    uint64_t v8 = ccsha256_di();
    uint64_t v9 = rfc3394_unwrap_legacy( (uint64_t)__s,  0x20u,  0xA6A6A6A6A6A6A6A6LL,  0LL,  (void *)(a1 + 24),  0x28u,  (void *)a4,  &v12);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
      goto LABEL_8;
    }

    if (v12 != 32)
    {
LABEL_9:
      uint64_t v10 = 4294967286LL;
    }

    else
    {
      cccurve25519_make_pub();
      else {
        uint64_t v10 = 0LL;
      }
    }
  }

LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

    __int128 v13 = MEMORY[0x186E25BA0]();
    goto LABEL_9;
  }

  if (type == 3)
  {
    __int128 v20 = 0LL;
    if (aks_ref_key_get_public_key(a1, &v20))
    {
      if (v20 == 32 && v21 && v22 == 64)
      {
        ccsha512_di();
        return 0LL;
      }
    }
  }

  return v11;
}

  *a4 = v9;
  return 1LL;
}

  if (v5 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (v5 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v6 < 0) {
LABEL_16:
  }
    __break(1u);
}

uint64_t aks_get_pad_size(int a1)
{
  return -a1 & 3;
}

char *aks_copy_packed_data(_DWORD *a1, const void *a2, int a3)
{
  int v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    int v5 = -a3;
    size_t v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      int __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }

  else
  {
    *a1 = 0;
  }

  return v3;
}

char *aks_pack_data( char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = &a9;
  unsigned int v12 = 4;
  if (a3)
  {
    int v13 = a3;
    do
    {
      uint64_t v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }

    while (v13);
  }

  uint64_t result = (char *)calloc(1uLL, v12);
  uint64_t v16 = result;
  uint64_t v22 = (const void **)&a9;
  int v17 = 0;
  if (a3)
  {
    uint64_t v18 = 4LL;
    do
    {
      __int128 v19 = v22;
      __int128 v20 = *v22;
      v22 += 2;
      uint64_t result = aks_copy_packed_data(&v16[v18], v20, *((_DWORD *)v19 + 2));
      uint64_t v18 = result - v16;
      ++v17;
    }

    while (a3 != v17);
  }

  *(_DWORD *)uint64_t v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t aks_unpack_data( unsigned int *a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 < 4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = a3;
  if (*a1 >= a3)
  {
    __int128 v19 = (void **)&a9;
    if (!a3) {
      return 0LL;
    }
    __int128 v11 = (char *)(a1 + 1);
    while (1)
    {
      unsigned int v12 = v19;
      int v13 = *v19;
      v19 += 2;
      unsigned int v16 = *(_DWORD *)v11;
      uint64_t v14 = v11 + 4;
      size_t v15 = v16;
      if (v16 > a2) {
        break;
      }
      if (v13)
      {
        int v17 = (size_t *)v12[1];
        if (*v17 < v15) {
          return 0xFFFFFFFFLL;
        }
        memcpy(v13, v14, v15);
        *int v17 = v15;
      }

      __int128 v11 = &v14[v15];
      if (!--v9) {
        return 0LL;
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t aks_fv_new_vek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  v23[0] = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096LL;
  uint64_t v13 = 3758097090LL;
  if (v7 && v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_vek",  ":",  179,  "",  0,  "",  "");
      uint64_t v13 = 3758097084LL;
      goto LABEL_16;
    }

    mach_port_t v15 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v19, v9)
      || !der_utils_encode_fv_data(&v19, v11)
      || !der_utils_encode_fv_params(&v19, v12)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_14;
    }

    input[0] = *((void *)&v19 + 1);
    input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
    uint64_t v16 = IOConnectCallMethod(v15, 0x4Au, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v20);
    if ((_DWORD)v16)
    {
      uint64_t v13 = v16;
      goto LABEL_16;
    }

    *(void *)&__int128 v18 = __s;
    *((void *)&v18 + 1) = &__s[v20];
    if (!v3)
    {
      uint64_t v13 = 0LL;
      goto LABEL_16;
    }

    uint64_t v13 = 0LL;
    if ((der_utils_decode_fv_key(&v18, 0, v3) & 1) == 0) {
LABEL_14:
    }
      uint64_t v13 = 3758097098LL;
  }

LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

  encode_list_free(&v27);
  encode_list_free(&v26);
  encode_list_free(&v25);
  if (v8) {
    free(v29[0]);
  }
  if (v31) {
    aks_ref_key_free((uint64_t *)&v31);
  }
  free(v30);
  encode_list_free(&v32);
  uint64_t result = 3758097122LL;
  if ((int)v17 <= -536870175)
  {
    if ((_DWORD)v17 == -536870212) {
      return 3758097084LL;
    }
    if ((_DWORD)v17 != -536870194) {
      return v17;
    }
  }

  else if ((_DWORD)v17 != -536870174 && (_DWORD)v17 != -536363000)
  {
    if ((_DWORD)v17 != -536362999) {
      return v17;
    }
    return 3758097084LL;
  }

  return result;
}

    uint64_t v9 = 0LL;
LABEL_17:
    uint64_t v11 = 0LL;
    goto LABEL_18;
  }

  int v4 = *MEMORY[0x1896086A8];
  int v5 = IOServiceMatching("AppleKeyStore");
  MatchingService = IOServiceGetMatchingService(v4, v5);
  if (!MatchingService)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      __int128 v24 = "AppleKeyStore";
      uint64_t v16 = (os_log_s *)MEMORY[0x1895F8DA0];
      int v17 = "failed to find %s service";
      __int128 v18 = 12;
      goto LABEL_15;
    }

    goto LABEL_16;
  }

  uint64_t v7 = MatchingService;
  uint64_t v8 = IONotificationPortCreate(v4);
  if (!v8)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    *(_WORD *)buf = 0;
    uint64_t v16 = (os_log_s *)MEMORY[0x1895F8DA0];
    int v17 = "failed to create notification port for AKS";
    goto LABEL_12;
  }

  uint64_t v9 = v8;
  uint64_t v10 = calloc(1uLL, 0x20uLL);
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_183CB9000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to allocate memory for event callback",  buf,  2u);
    }

    goto LABEL_17;
  }

  uint64_t v11 = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = _Block_copy(a2);
  v11[1] = v12;
  if (v12)
  {
    uint64_t v13 = dispatch_queue_create_with_target_V2("aks events", 0LL, a1);
    v11[3] = v13;
    IONotificationPortSetDispatchQueue(v9, v13);
    if (!IOServiceAddInterestNotification( v9,  v7,  "IOGeneralInterest",  (IOServiceInterestCallback)aksNotificationCB,  v11,  &notification))
    {
      *((_DWORD *)v11 + 4) = notification;
      *((_DWORD *)v11 + 5) = 1902207865;
      return v11;
    }

    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v14 = (os_log_s *)MEMORY[0x1895F8DA0];
      mach_port_t v15 = "failed to add interest notification";
LABEL_35:
      _os_log_impl(&dword_183CB9000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
    }
  }

  else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v14 = (os_log_s *)MEMORY[0x1895F8DA0];
    mach_port_t v15 = "failed to copy block";
    goto LABEL_35;
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(0x5519u);
  }

  return result;
}

uint64_t get_aks_client_connection()
{
  if (get_aks_client_dispatch_queue_onceToken != -1) {
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  }
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_150);
  uint64_t result = get_aks_client_connection_connection;
  if (!get_aks_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return get_aks_client_connection_connection;
  }

  return result;
}

unint64_t _aks_save_file(char *a1, const void *a2, size_t a3)
{
  unint64_t v3 = (unint64_t)a1;
  if (a1)
  {
    int v6 = open_dprotected_np(a1, 1793, 4, 0, 384LL);
    if (v6 == -1)
    {
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0LL;
    }

    else
    {
      int v7 = v6;
      ssize_t v8 = write(v6, a2, a3);
      unint64_t v3 = v8 != -1;
      if (v8 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }

      close(v7);
    }
  }

  return v3;
}

const char *_aks_load_file(char *a1, void *a2, size_t *a3)
{
  unint64_t v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      size_t st_size = v14.st_size;
      int v7 = open(v3, 0);
      if (v7 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }

      else
      {
        int v8 = v7;
        uint64_t v9 = calloc(st_size, 1uLL);
        unint64_t v3 = (const char *)(v9 != 0LL);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }

        uint64_t v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }

        close(v8);
        free(v10);
      }
    }

    return 0LL;
  }

  return v3;
}

uint64_t aks_delete_xart_leak(unsigned int a1, const void *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x6Cu, input, 1u, a2, 0x10uLL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_delete_xart_leak",  ":",  268,  "",  0,  "",  "");
  return 3758097084LL;
}

char *_iterate_path(char *result, uint64_t a2, uint64_t a3)
{
  v9[2] = *(char **)MEMORY[0x1895F89C0];
  if (result)
  {
    v9[0] = result;
    v9[1] = 0LL;
    uint64_t result = (char *)fts_open(v9, 84, 0LL);
    if (result)
    {
      int v5 = (FTS *)result;
      int v6 = fts_read((FTS *)result);
      if (v6)
      {
        int v7 = v6;
        do
        {
          fts_mach_timebase_info info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
              }
            }

            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }

          int v7 = fts_read(v5);
        }

        while (v7);
      }

      return (char *)fts_close(v5);
    }
  }

  return result;
}

char *aks_dump_path(char *result, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (result)
  {
    unint64_t v3 = result;
    bzero(v8, 0x400uLL);
    uint64_t result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = MEMORY[0x1895F87A8];
      v6[1] = 0x40000000LL;
      v6[2] = __aks_dump_path_block_invoke;
      v6[3] = &__block_descriptor_tmp_0;
      int v7 = a2;
      v4[0] = MEMORY[0x1895F87A8];
      v4[1] = 0x40000000LL;
      v4[2] = __aks_dump_path_block_invoke_2;
      v4[3] = &__block_descriptor_tmp_126;
      int v5 = a2;
      return _iterate_path(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }

  return result;
}

uint64_t __aks_dump_path_block_invoke(uint64_t a1, uint64_t a2)
{
  int path_class = _get_path_class(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || path_class == v5) {
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), path_class);
  }
  return 1LL;
}

uint64_t _get_path_class(const char *a1)
{
  int v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = v1;
  uint64_t v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return v3;
}

uint64_t __aks_dump_path_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result = _get_path_class(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || (_DWORD)result == v5) {
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  }
  return result;
}

uint64_t aks_fs_supports_enhanced_apfs()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  io_registry_entry_t v0 = IORegistryEntryFromPath(*MEMORY[0x1896086B0], "IODeviceTree:/filesystems");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"e-apfs", (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
    BOOL v3 = CFProperty != 0LL;
    if (CFProperty) {
      CFRelease(CFProperty);
    }
    IOObjectRelease(v1);
  }

  else
  {
    BOOL v3 = 0;
  }

  size_t __len = 1023LL;
  bzero(__big, 0x400uLL);
  if ((_aks_check_apfs_shared_datavolume_bootarg_init & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0LL, 0LL) && strnstr(__big, "-apfs_shared_datavolume", __len)) {
      _aks_check_apfs_shared_datavolume_bootarg_value = 1;
    }
    _aks_check_apfs_shared_datavolume_bootarg_init = 1;
  }

  unsigned int v4 = _aks_check_apfs_shared_datavolume_bootarg_value;
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n",  "aks",  "",  "",  "",  "aks_fs_supports_enhanced_apfs",  ":",  437,  "",  0,  "",  v3,  _aks_check_apfs_shared_datavolume_bootarg_value,  "");
  return v3 | v4;
}

uint64_t aks_fs_status(const char *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    aks_fs_status_with_map(v4, (uint64_t)&sharedPathMap, 35LL);
    if ((aks_fs_supports_enhanced_apfs() & 1) == 0) {
      aks_fs_status_with_map(__str, (uint64_t)&userPathMap, 72LL);
    }
  }

  return 0LL;
}

void aks_fs_status_with_map(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }

      else
      {
        _get_path_class(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }

      v6 += 48LL;
      --a3;
    }

    while (a3);
  }

uint64_t aks_user_fs_status(const char *a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3)) {
    aks_fs_status_with_map(v3, (uint64_t)&userPathMap, 72LL);
  }
  return 0LL;
}

const char *aks_show_allowlist()
{
  return aks_show_allowlist_with_map("<user>", (uint64_t)&userPathMap, 72LL);
}

const char *aks_show_allowlist_with_map(const char *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = result;
    uint64_t v5 = (const char **)(a2 + 16);
    uint64_t v6 = (const char **)(a2 + 16);
    do
    {
      char v7 = *(_BYTE *)v6;
      v6 += 6;
      if ((v7 & 1) != 0) {
        uint64_t result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      }
      uint64_t v5 = v6;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t aks_fv_new_kek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  uint64_t v10 = v1;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096LL;
  uint64_t v11 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v13 = aks_client_connection;
      if (!ccder_blob_encode_body_tl()
        || !der_utils_encode_fv_data(&v17, v7)
        || !der_utils_encode_fv_params(&v17, v10)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_10;
      }

      input[0] = v9;
      input[1] = *((void *)&v17 + 1);
      uint64_t input[2] = (uint64_t)&v21 - *((void *)&v17 + 1);
      uint64_t v14 = IOConnectCallMethod(v13, 0x4Cu, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &v18);
      if ((_DWORD)v14)
      {
        uint64_t v11 = v14;
        goto LABEL_12;
      }

      *(void *)&__int128 v16 = __s;
      *((void *)&v16 + 1) = &__s[v18];
      if (!ccder_blob_decode_range() || (uint64_t v11 = 0LL, (der_utils_decode_fv_data(&v16, 0, v3) & 1) == 0)) {
LABEL_10:
      }
        uint64_t v11 = 3758097098LL;
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_kek",  ":",  508,  "",  0,  "",  "");
      uint64_t v11 = 3758097084LL;
    }
  }

LABEL_12:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

  free(*(void **)&inputStructCnt[1]);
  return v17;
}

  __break(1u);
}

      if (++v19 == v16) {
        goto LABEL_34;
      }
    }

  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[v14 + 32], (const void *)(a2 + a3), v6);
  if (v6 <= 0)
  {
LABEL_16:
    *uint64_t v4 = v7;
    return;
  }

  mach_port_t v15 = *((void *)v7 + 2);
  __int128 v16 = __OFADD__(v15, v6);
  __int128 v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }

  __break(0x5519u);
  return result;
}

  uint64_t v11 = v14 - 0x5555555555555556LL;
  if (v14 > v14 - 0x5555555555555556LL || v11 > v13) {
    goto LABEL_30;
  }
  if (v11 == v13)
  {
    if (a3)
    {
      *a3 = 0LL;
      a3[1] = 0LL;
    }
  }

  else if (a3)
  {
    *a3 = v11;
    a3[1] = v13 - v11;
  }

  if (v13 > v15 || v14 > v13) {
    goto LABEL_30;
  }
  *a4 = 0LL;
  a4[1] = 0LL;
  if (v13 == v15) {
    return 0LL;
  }
  else {
    return 655365LL;
  }
}

    __break(0x5519u);
  }

  return result;
}

uint64_t aks_fv_new_sibling_vek()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v16 = __s;
  *((void *)&v16 + 1) = &v20;
  size_t v17 = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (v6 && v4)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_sibling_vek",  ":",  543,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
      goto LABEL_15;
    }

    mach_port_t v12 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v16, v8)
      || !der_utils_encode_fv_params(&v16, v9)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_13;
    }

    input[0] = *((void *)&v16 + 1);
    input[1] = (uint64_t)&v20 - *((void *)&v16 + 1);
    uint64_t v13 = IOConnectCallMethod(v12, 0x63u, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v17);
    if ((_DWORD)v13)
    {
      uint64_t v10 = v13;
      goto LABEL_15;
    }

    *(void *)&__int128 v15 = __s;
    *((void *)&v15 + 1) = &__s[v17];
    if (!v2)
    {
      uint64_t v10 = 0LL;
      goto LABEL_15;
    }

    uint64_t v10 = 0LL;
    if ((der_utils_decode_fv_key(&v15, 0, v2) & 1) == 0) {
LABEL_13:
    }
      uint64_t v10 = 3758097098LL;
  }

LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

      swift_unknownObjectRelease();
      return;
    }

      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    __break(1u);
    goto LABEL_15;
  }

  return result;
}

        __int128 v44 = v60;
        __int128 v45 = sub_183D04F20();
        v26(v44, v9);
        v26(v57, v9);
        v26(v55, v9);
        return v45;
      }
    }

    else if (v33 < 9)
    {
      uint64_t v42 = v51;
      uint64_t v43 = sub_183D04F20();
      v26(v42, v9);
      goto LABEL_15;
    }

    sub_183CEA240();
    uint64_t v39 = v48;
    sub_183D04EFC();
    swift_getAssociatedConformanceWitness();
    uint64_t v40 = v51;
    __int128 v41 = sub_183D04DDC();
    v26(v39, v9);
    v26(v40, v9);
    if ((v41 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

  __break(0x5519u);
  return result;
}

uint64_t aks_fv_rewrap_kek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  v23[0] = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096LL;
  uint64_t v13 = 3758097090LL;
  if (v9 && v7 && v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v15 = aks_client_connection;
      if (!der_utils_encode_fv_data(&v19, v5)
        || !ccder_blob_encode_body_tl()
        || !der_utils_encode_fv_data(&v19, v9)
        || !der_utils_encode_fv_data(&v19, v11)
        || !der_utils_encode_fv_params(&v19, v12)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_14;
      }

      input[0] = *((void *)&v19 + 1);
      input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
      uint64_t v16 = IOConnectCallMethod(v15, 0x4Du, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v20);
      if ((_DWORD)v16)
      {
        uint64_t v13 = v16;
        goto LABEL_16;
      }

      *(void *)&__int128 v18 = __s;
      *((void *)&v18 + 1) = &__s[v20];
      if (!ccder_blob_decode_range() || (uint64_t v13 = 0LL, (der_utils_decode_fv_data(&v18, 0, v3) & 1) == 0)) {
LABEL_14:
      }
        uint64_t v13 = 3758097098LL;
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_rewrap_kek",  ":",  582,  "",  0,  "",  "");
      uint64_t v13 = 3758097084LL;
    }
  }

uint64_t aks_fv_set_protection(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v19 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = v1;
  v25[0] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097098LL;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_set_protection",  ":",  616,  "",  0,  "",  "");
    uint64_t v14 = 3758097084LL;
    goto LABEL_14;
  }

  mach_port_t v16 = aks_client_connection;
  if (der_utils_encode_fv_data(&v21, v4)
    && der_utils_encode_fv_data(&v21, v6)
    && der_utils_encode_fv_data(&v21, v8)
    && der_utils_encode_fv_params(&v21, v13)
    && ccder_blob_encode_tl())
  {
    input[0] = v12;
    input[1] = v10;
    uint64_t input[2] = *((void *)&v21 + 1);
    uint64_t input[3] = (uint64_t)v25 - *((void *)&v21 + 1);
    uint64_t v17 = IOConnectCallMethod(v16, 0x54u, input, 4u, 0LL, 0LL, 0LL, 0LL, __s, &v22);
    if ((_DWORD)v17)
    {
      uint64_t v14 = v17;
      goto LABEL_14;
    }

    *(void *)&__int128 v20 = __s;
    *((void *)&v20 + 1) = &__s[v22];
    if (!v22) {
      goto LABEL_13;
    }
    if (!v19)
    {
LABEL_13:
      uint64_t v14 = 0LL;
      goto LABEL_14;
    }

    uint64_t v14 = 0LL;
    if ((der_utils_decode_fv_data(&v20, 0, v19) & 1) == 0) {
      uint64_t v14 = 3758097098LL;
    }
  }

LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v14;
}

  memset_s(v18, v17, 0, v17);
  free(v23);
  memset_s(__s, __n[0], 0, __n[0]);
  free(__s);
  encode_list_free(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  memset_s(*(void **)&__n[1], v27[0], 0, v27[0]);
  free(*(void **)&__n[1]);
  memset_s(0LL, 0LL, 0, 0LL);
  free(0LL);
  return v14;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }

  uint64_t v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v10 = a5 << ((8 - v7) & 0x38);
  else {
    LOBYTE(v8) = v10;
  }
LABEL_11:
  *a6 = v8;
  return nullsub_1;
}

  __int128 v18 = v64;
  uint64_t v17 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  __int128 v19 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 136) = v64;
  *(void *)(a1 + 144) = v19;
  if (__CFADD__(v18, v19)) {
    goto LABEL_187;
  }
  __int128 v20 = v18 + v19;
  if (v18 > v20 || v20 > v17) {
    goto LABEL_186;
  }
  v64 = v20;
  size_t v22 = v64;
  __int128 v21 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  __int128 v23 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 120) = v64;
  *(void *)(a1 + 128) = v23;
  if (__CFADD__(v22, v23)) {
    goto LABEL_187;
  }
  __int128 v24 = v22 + v23;
  if (v22 > v24 || v24 > v21) {
    goto LABEL_186;
  }
  v64 = v24;
  uint64_t v26 = v64;
  uint64_t v25 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  __int128 v27 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 72) = v64;
  *(void *)(a1 + 80) = v27;
  if (__CFADD__(v26, v27)) {
    goto LABEL_187;
  }
  uint64_t v28 = v26 + v27;
  if (v26 > v28 || v28 > v25) {
    goto LABEL_186;
  }
  v64 = v28;
  int v29 = v64;
  __int128 v30 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  __int128 v31 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 104) = v64;
  *(void *)(a1 + 112) = v31;
  if (__CFADD__(v29, v31)) {
    goto LABEL_187;
  }
  uint64_t v32 = v29 + v31;
  if (v29 > v29 + v31 || v32 > v30) {
    goto LABEL_186;
  }
  v64 = v29 + v31;
  uint64_t result = ccder_blob_decode_tl();
  if (!(_DWORD)result) {
    return 720922LL;
  }
  uint64_t v33 = v64;
  __int128 v34 = v68;
  uint64_t v35 = v64 - v32 + v68;
  if (!__CFADD__(v64 - v32, v68))
  {
    if (v35 > v30 - v32) {
      goto LABEL_186;
    }
    *(void *)(a1 + 88) = v32;
    *(void *)(a1 + 96) = v35;
    if (__CFADD__(v33, v34)) {
      goto LABEL_187;
    }
    uint64_t v36 = v33 + v34;
    if (v33 > v36 || v36 > v65) {
      goto LABEL_186;
    }
    v63 = v65;
    v64 = v36;
    v62 = v36;
    if ((ccder_blob_decode_tl() & 1) != 0) {
      return 720923LL;
    }
    if (v64 > v65) {
      goto LABEL_186;
    }
    v62 = v64;
    v63 = v65;
    if ((ccder_blob_decode_tl() & 1) != 0) {
      return 720924LL;
    }
    if (v64 > v65) {
      goto LABEL_186;
    }
    v62 = v64;
    v63 = v65;
    if (ccder_blob_decode_tl())
    {
      v60 = 0xAAAAAAAAAAAAAAAALL;
      v61 = 0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v62, v68)) {
        goto LABEL_187;
      }
      if (v62 > v62 + v68 || v62 + v68 > v63) {
        goto LABEL_186;
      }
      v60 = v62;
      v61 = v62 + v68;
      __int128 v37 = v60;
      if (__CFADD__(v60, v68)) {
LABEL_187:
      }
        __break(0x5513u);
      __int128 v38 = v60 + v68;
      if (v60 > v60 + v68 || v38 > v61) {
        goto LABEL_186;
      }
      v61 = v60 + v68;
      *(_BYTE *)(a1 + 266) = 0;
      memset(&v70[2], 0, 128);
      if (a3) {
        uint64_t v39 = a4 == 0;
      }
      else {
        uint64_t v39 = 1;
      }
      uint64_t v40 = !v39;
      memset(v70, 0, 32);
      if (v37 < v38)
      {
        v53 = 0;
        __int128 v41 = 0;
        do
        {
          v58 = 0xAAAAAAAAAAAAAAAALL;
          v59 = 0xAAAAAAAAAAAAAAAALL;
          v57 = 0;
          v56 = 0LL;
          if ((ccder_blob_decode_tl() & 1) == 0) {
            return 720926LL;
          }
          v54 = 0xAAAAAAAAAAAAAAAALL;
          v55 = 0xAAAAAAAAAAAAAAAALL;
          if (__CFADD__(v60, v56)) {
            goto LABEL_187;
          }
          if (v60 > v60 + v56 || v60 + v56 > v61) {
            goto LABEL_186;
          }
          v54 = v60;
          v55 = v60 + v56;
          if (v55 < v54 || v68 > v55 - v54) {
            goto LABEL_186;
          }
          v58 = v54;
          v59 = v68;
          if (__CFADD__(v54, v68)) {
            goto LABEL_187;
          }
          if (v54 > v54 + v68 || v54 + v68 > v55) {
            goto LABEL_186;
          }
          v54 += v68;
          if (__CFADD__(v54, v68)) {
            goto LABEL_187;
          }
          if (v55 != v54 + v68) {
            return 720929LL;
          }
          if (v40 && !compare_octet_string_raw((uint64_t)&v58, a3, a4))
          {
            if (v55 < v54) {
              goto LABEL_186;
            }
            uint64_t v43 = v68;
            if (v68 > v55 - v54) {
              goto LABEL_186;
            }
            *(void *)(a1 + 248) = v54;
            *(void *)(a1 + 256) = v43;
          }

          if (v59 == 3)
          {
            if (*(_WORD *)v58 == 7509 && *(_BYTE *)(v58 + 2) == 15)
            {
              mach_port_t v16 = 720930LL;
              if ((v41 & 1) != 0 || (X509ExtensionParseKeyUsage() & 1) == 0) {
                return v16;
              }
              v41 |= 1u;
              goto LABEL_155;
            }

            if (*(_WORD *)v58 == 7509 && *(_BYTE *)(v58 + 2) == 19)
            {
              mach_port_t v16 = 720931LL;
              if ((v41 & 2) != 0
                || (X509ExtensionParseBasicConstraints(&v54, (void *)(a1 + 200), (_BYTE *)(a1 + 265)) & 1) == 0)
              {
                return v16;
              }

              v41 |= 2u;
              goto LABEL_155;
            }

            if (*(_WORD *)v58 == 7509 && *(_BYTE *)(v58 + 2) == 35)
            {
              mach_port_t v16 = 720932LL;
              if ((v41 & 4) != 0
                || (X509ExtensionParseAuthorityKeyIdentifier(&v54, (unint64_t *)(a1 + 168), (void *)(a1 + 176)) & 1) == 0)
              {
                return v16;
              }

              v41 |= 4u;
              goto LABEL_155;
            }

            if (*(_WORD *)v58 == 7509 && *(_BYTE *)(v58 + 2) == 14)
            {
              mach_port_t v16 = 720933LL;
              if ((v41 & 8) != 0
                || (X509ExtensionParseSubjectKeyIdentifier(&v54, (unint64_t *)(a1 + 184), (void *)(a1 + 192)) & 1) == 0)
              {
                return v16;
              }

              v41 |= 8u;
              goto LABEL_155;
            }

            if (*(_WORD *)v58 == 7509 && *(_BYTE *)(v58 + 2) == 37)
            {
              mach_port_t v16 = 720934LL;
              if ((v41 & 0x10) != 0
                || (X509ExtensionParseExtendedKeyUsage(&v54, (unint64_t *)(a1 + 208), (void *)(a1 + 216)) & 1) == 0)
              {
                return v16;
              }

              v41 |= 0x10u;
              goto LABEL_155;
            }

            if (*(_WORD *)v58 == 7509 && *(_BYTE *)(v58 + 2) == 17)
            {
              mach_port_t v16 = 720935LL;
              if ((v41 & 0x20) != 0
                || (X509ExtensionParseSubjectAltName(&v54, (unint64_t *)(a1 + 224), (void *)(a1 + 232)) & 1) == 0)
              {
                return v16;
              }

              v41 |= 0x20u;
              goto LABEL_155;
            }
          }

          else if (v59 >= 8 && *(_DWORD *)v58 == -2042067414 && *(_DWORD *)(v58 + 3) == 1684273030)
          {
            mach_port_t v16 = 720936LL;
            uint64_t result = X509ExtensionParseAppleExtension( (uint64_t)&v54,  v58,  v59,  (uint64_t *)(a1 + 240),  (unint64_t *)(a1 + 248),  v40);
            if (!(_DWORD)result) {
              return v16;
            }
            if (v53 == 0xFF) {
              goto LABEL_189;
            }
            ++v53;
            goto LABEL_155;
          }

          if (__CFADD__(v54, v68)) {
            goto LABEL_187;
          }
          if (v54 > v54 + v68 || v54 + v68 > v55) {
            goto LABEL_186;
          }
          v54 += v68;
          if (v57) {
            *(_BYTE *)(a1 + 266) = 1;
          }
LABEL_155:
          if (v54 != v55) {
            return 720926LL;
          }
          if (__CFADD__(v60, v56)) {
            goto LABEL_187;
          }
          __int128 v37 = v60 + v56;
          if (v60 > v60 + v56) {
            goto LABEL_186;
          }
          __int128 v38 = v61;
          if (v37 > v61) {
            goto LABEL_186;
          }
          v60 += v56;
        }

        while (v37 < v61);
      }

      if (v37 != v38) {
        return 720925LL;
      }
      if (v37 > v65 || v64 > v37) {
        goto LABEL_186;
      }
      v64 = v37;
    }

    if (*(void *)(a1 + 32) < 3uLL)
    {
      mach_port_t v16 = 720915LL;
      if (v64 != v65) {
        return v16;
      }
LABEL_170:
      if (__CFADD__(v66, v69)) {
        goto LABEL_187;
      }
      if (v66 > v66 + v69 || v66 + v69 > v67) {
        goto LABEL_186;
      }
      v66 += v69;
      *(void *)&v70[0] = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v70[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v60 = 0LL;
      uint64_t result = ccder_blob_decode_bitstring();
      if (!(_DWORD)result) {
        return 720938LL;
      }
      if (v60 < 0xFFFFFFFFFFFFFFF9LL)
      {
        if (*((void *)&v70[0] + 1) >= *(void *)&v70[0])
        {
          v51 = (v60 + 7) >> 3;
          if (v51 <= *((void *)&v70[0] + 1) - *(void *)&v70[0])
          {
            *(void *)(a1 + 56) = *(void *)&v70[0];
            *(void *)(a1 + 64) = v51;
            v52 = v67;
            if (v66 <= v67)
            {
              mach_port_t v16 = 0LL;
              *a2 = v66;
              a2[1] = v52;
              return v16;
            }
          }
        }

        goto LABEL_186;
      }

      goto LABEL_188;
    }

    if (v65 <= a2[1] && *a2 <= v65)
    {
      *a2 = v65;
      goto LABEL_170;
    }

uint64_t aks_fv_unwrap_vek_with_acm()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = v0;
  v24[0] = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v20 = __s;
  *((void *)&v20 + 1) = v24;
  size_t v21 = 4096LL;
  if (!v6)
  {
    uint64_t v17 = 3758097090LL;
    goto LABEL_15;
  }

  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_unwrap_vek_with_acm",  ":",  653,  "",  0,  "",  "");
    uint64_t v17 = 3758097084LL;
    goto LABEL_15;
  }

  mach_port_t v15 = aks_client_connection;
  if (!der_utils_encode_fv_data(&v20, v4)
    || !der_utils_encode_fv_data(&v20, v6)
    || !der_utils_encode_fv_data(&v20, v8)
    || !der_utils_encode_fv_data(&v20, v10)
    || !der_utils_encode_fv_params(&v20, v13)
    || !ccder_blob_encode_tl())
  {
    goto LABEL_13;
  }

  input[0] = *((void *)&v20 + 1);
  input[1] = (uint64_t)v24 - *((void *)&v20 + 1);
  uint64_t input[2] = v12;
  uint64_t v16 = IOConnectCallMethod(v15, 0x4Bu, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &v21);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
    goto LABEL_15;
  }

  *(void *)&__int128 v19 = __s;
  *((void *)&v19 + 1) = &__s[v21];
  if (!v2)
  {
    uint64_t v17 = 0LL;
    goto LABEL_15;
  }

  uint64_t v17 = 0LL;
  if ((der_utils_decode_fv_key(&v19, 0, v2) & 1) == 0) {
LABEL_13:
  }
    uint64_t v17 = 3758097098LL;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v17;
}

uint64_t aks_fv_unwrap_vek_with_opts()
{
  return aks_fv_unwrap_vek_with_acm();
}

void aks_gather_stats(const char *a1, char a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      uint64_t v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 0x40000000LL;
      _BYTE v11[2] = __aks_gather_stats_block_invoke_2;
      v11[3] = &__block_descriptor_tmp_139;
      v11[4] = v4;
      _iterate_path(v12, (uint64_t)&__block_literal_global_0, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if ((a2 & 1) != 0) {
          printf("Free Blocks:%lld blocks of size:%d\n");
        }
        else {
          printf("%lld,%d\n");
        }
      }

      uint64_t v5 = v4 + 340;
      for (uint64_t i = 1LL; i != 5; ++i)
      {
        if ((a2 & 1) != 0)
        {
          uint64_t v9 = &v4[296 * i];
          printf( "%s:\n \tNum files:\t%u,\n \tNum hardlinks:\t%u,\n \tNum compressed:\t%u,\n \tTotal Size:\t%lld,\n \tMin File Size:\t%lld,\n \tMax File Size:\t%lld,\n",  class_names[i],  *(_DWORD *)v9,  *((_DWORD *)v9 + 2),  *((_DWORD *)v9 + 1),  *((void *)v9 + 2),  *((void *)v9 + 3),  *((void *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (uint64_t j = 0LL; j != 252; j += 4LL)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }

        else
        {
          uint64_t v7 = &v4[296 * i];
          printf( "%i,%u,%u,%u,%lld,%lld,%lld,",  i,  *(_DWORD *)v7,  *((_DWORD *)v7 + 2),  *((_DWORD *)v7 + 1),  *((void *)v7 + 2),  *((void *)v7 + 3),  *((void *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (uint64_t k = 0LL; k != 252; k += 4LL)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }

        putchar(10);
        v5 += 296;
      }

      free(v4);
    }
  }

uint64_t __aks_gather_stats_block_invoke()
{
  return 1LL;
}

uint64_t __aks_gather_stats_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result = _get_path_class(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    uint64_t v5 = *(void *)(a2 + 96);
    int64_t v6 = *(void *)(v5 + 96);
    uint64_t v7 = *(void *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296LL * result);
    if ((*(_BYTE *)(v5 + 116) & 0x20) != 0) {
      ++*(_DWORD *)(v7 + 296LL * result + 4);
    }
    uint64_t v8 = v7 + 296LL * result;
    int64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10) {
      int64_t *v9 = v6;
    }
    uint64_t v11 = v7 + 296LL * result;
    int64_t v14 = *(void *)(v11 + 24);
    unsigned int v12 = (int64_t *)(v11 + 24);
    int64_t v13 = v14;
    if (v14) {
      BOOL v15 = v6 < v13;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      *unsigned int v12 = v6;
    }
    if (v6) {
      unint64_t v16 = v7 + 296LL * result + 4 * (63 - __clz(v6));
    }
    else {
      unint64_t v16 = v7 + 296LL * result;
    }
    ++*(_DWORD *)(v16 + 40);
  }

  return result;
}

uint64_t aks_kext_set_options(unsigned int a1, uint64_t a2)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = 1LL;
  input[1] = a1;
  uint64_t input[2] = a2;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x56u, input, 3u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kext_set_options",  ":",  820,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_kext_get_options(unsigned int a1, uint64_t *a2)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v2 = 3758097084LL;
  if (!a2) {
    return 3758097090LL;
  }
  input[0] = 0LL;
  input[1] = a1;
  uint64_t input[2] = 0LL;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v2 = IOConnectCallMethod(aks_client_connection, 0x56u, input, 3u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (!(_DWORD)v2) {
      *a2 = output;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kext_get_options",  ":",  841,  "",  0,  "",  "");
  }

  return v2;
}

uint64_t aks_internal_state()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x10u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_internal_state",  ":",  857,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_run_internal_test(unsigned int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x86u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_run_internal_test",  ":",  871,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_stash_escrow()
{
  int v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v8 = v7;
  int v10 = v9;
  uint64_t v12 = v11;
  unsigned int v14 = v13;
  int v15 = v0;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = v15;
    input[1] = v14;
    uint64_t input[2] = v12;
    uint64_t input[3] = v10;
    if (!v14 || (uint64_t v17 = 3758097090LL, v4) && v2)
    {
      uint64_t v17 = IOConnectCallMethod(aks_client_connection, 0x36u, input, 4u, v8, v6, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)v17 && v14)
      {
        __int128 v18 = calloc(__count, 1uLL);
        *uint64_t v4 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          uint64_t v17 = 0LL;
          _DWORD *v2 = __count;
        }

        else
        {
          uint64_t v17 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    uint64_t v17 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_escrow",  ":",  890,  "",  0,  "",  "");
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v17;
}

void __get_aks_client_connection_block_invoke()
{
  if (!get_aks_client_connection_connection) {
    get_aks_client_connection_connection = _copy_aks_client_connection( "IOService:/IOResources/AppleKeyStore",  "AppleKeyStore");
  }
}

uint64_t get_akstest_client_connection()
{
  if (get_aks_client_dispatch_queue_onceToken != -1) {
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  }
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_154);
  uint64_t result = get_akstest_client_connection_connection;
  if (!get_akstest_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return get_akstest_client_connection_connection;
  }

  return result;
}

void __get_akstest_client_connection_block_invoke()
{
  if (!get_akstest_client_connection_connection) {
    get_akstest_client_connection_connection = _copy_aks_client_connection( "IOService:/IOResources/AppleKeyStoreTest",  "AppleKeyStoreTest");
  }
}

uint64_t akstest_new_key( mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  size_t v19 = 1024LL;
  uint64_t v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if ((_DWORD)v11) {
    return v11;
  }
  uint64_t v17 = 3758097084LL;
  if (outputCnt == 1)
  {
    *a7 = output;
    else {
      return 0LL;
    }
  }

  return v17;
}

uint64_t akstest_new_ekwk( mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint32_t outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  size_t v26 = 1024LL;
  uint64_t v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if ((_DWORD)v17) {
    return v17;
  }
  uint64_t v23 = 3758097084LL;
  if (outputCnt == 3)
  {
    int v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    else {
      return 0LL;
    }
  }

  return v23;
}

uint64_t akstest_new_ek( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  uint64_t v11 = IOConnectCallMethod( a1,  0x14u,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  a7,  a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t akstest_rewrap_ek( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  uint64_t input[3] = a12;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  uint64_t v16 = IOConnectCallMethod( a1,  0x15u,  input,  4u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  outputStruct,  a14);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
  }

  else if (outputCnt == 1)
  {
    uint64_t v17 = 0LL;
    *a15 = output;
  }

  else
  {
    uint64_t v17 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t akstest_unwrap_key( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t outputStructCnt = 1024LL;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  uint64_t v15 = IOConnectCallMethod( a1,  0x10u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &outputStructCnt);
  if ((_DWORD)v15)
  {
    uint64_t v21 = v15;
  }

  else if (aks_unpack_data(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    uint64_t v21 = 3758097084LL;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t akstest_unwrap_ek( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t v25 = 1024LL;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  uint64_t v17 = IOConnectCallMethod( a1,  0x17u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &v25);
  if ((_DWORD)v17)
  {
    uint64_t v23 = v17;
  }

  else if (aks_unpack_data(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    uint64_t v23 = 3758097084LL;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t akstest_check_class(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  return IOConnectCallMethod(a1, 0x11u, input, 1u, inputStruct, 0x10uLL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t akstest_last_user( mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  uint64_t v9 = IOConnectCallMethod( a1,  0x12u,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t aks_get_internal_info_for_key(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v7) {
      size_t v9 = 18LL;
    }
    else {
      size_t v9 = 0LL;
    }
    uint64_t v10 = IOConnectCallMethod(aks_client_connection, 0x5Du, input, 1u, v7, v9, 0LL, 0LL, __src, &__count);
    size_t v11 = __count;
    if ((_DWORD)v10)
    {
      uint64_t v13 = v10;
    }

    else if (__count - 32769 < 0xFFFFFFFFFFFF8000LL)
    {
      uint64_t v13 = 3758097090LL;
    }

    else
    {
      uint64_t v12 = calloc(__count, 1uLL);
      *int v5 = v12;
      size_t v11 = __count;
      if (v12)
      {
        *uint64_t v3 = __count;
        memcpy(v12, __src, v11);
        uint64_t v13 = 0LL;
        size_t v11 = __count;
      }

      else
      {
        uint64_t v13 = 3758097085LL;
      }
    }
  }

  else
  {
    uint64_t v13 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_internal_info_for_key",  ":",  1246,  "",  0,  "",  "");
    size_t v11 = 0x8000LL;
  }

  memset_s(__src, v11, 0, v11);
  return v13;
}

dispatch_queue_t __get_aks_client_dispatch_queue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("aks-client-queue", 0LL);
  get_aks_client_dispatch_queue_connection_queue = (uint64_t)result;
  return result;
}

uint64_t _copy_aks_client_connection(char *path, const char *a2)
{
  kern_return_t v7;
  CFDictionaryRef v8;
  io_service_t MatchingService;
  io_object_t v10;
  uint64_t result;
  kern_return_t v12;
  io_connect_t connect;
  connect = 0;
  mach_port_t v3 = *MEMORY[0x1896086B0];
  io_service_t v4 = IORegistryEntryFromPath(*MEMORY[0x1896086B0], path);
  int v5 = (task_port_t *)MEMORY[0x1895FBBE0];
  if (!v4 || (io_object_t v6 = v4, v7 = IOServiceOpen(v4, *MEMORY[0x1895FBBE0], 0, &connect), IOObjectRelease(v6), v7))
  {
    uint64_t v8 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(v3, v8);
    if (MatchingService)
    {
      uint64_t v10 = MatchingService;
      IOServiceOpen(MatchingService, *v5, 0, &connect);
      IOObjectRelease(v10);
    }
  }

  dispatch_queue_t result = connect;
  if (connect)
  {
    uint64_t v12 = IOConnectCallMethod(connect, 0, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    dispatch_queue_t result = connect;
    if (v12)
    {
      IOServiceClose(connect);
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_operation_optional_params( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v19 = 0LL;
  if (a1
    && (uint64_t v14 = a1 + a2, der_get_sizeof(a1) == a2)
    && encode_list_add_der(&v19, (uint64_t)der_key_access_groups, a1, v14)
    || a3
    && der_get_sizeof(a3) == a4
    && encode_list_add_der(&v19, (uint64_t)der_key_external_data, a3, a3 + a4)
    || a5 && encode_list_add_data(&v19, (uint64_t)der_key_acm_handle, a5)
    || (uint64_t v17 = 0LL, v18 = 0LL, encode_list_dict(&v19, &v17, &v18)))
  {
    uint64_t v15 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v15 = 0LL;
    *a7 = v17;
    *a8 = v18;
  }

  encode_list_free(&v19);
  return v15;
}

void *aks_params_create(uint64_t a1)
{
  uint64_t v2 = calloc(8uLL, 1uLL);
  mach_port_t v3 = v2;
  if (v2)
  {
    void *v2 = 0LL;
    if (a1)
    {
      if (encode_list_merge_dict((uint64_t)v2))
      {
        memset_s(v3, 8uLL, 0, 8uLL);
        free(v3);
        return 0LL;
      }
    }
  }

  return v3;
}

uint64_t aks_params_set_BOOL(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 3758097090LL;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 3);
  if (der_key)
  {
    uint64_t v7 = (uint64_t)der_key;
  }

  return v5;
}

void *_params_get_der_key(int a1, int a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = (void **)&der_key_access_groups;
      goto LABEL_28;
    case 2:
      uint64_t v2 = (void **)&der_key_external_data;
      goto LABEL_28;
    case 3:
      uint64_t v2 = (void **)&der_key_acm_handle;
      goto LABEL_28;
    case 4:
      uint64_t v2 = (void **)&der_key_salt;
      goto LABEL_28;
    case 5:
      uint64_t v2 = (void **)&der_key_data;
      goto LABEL_28;
    case 6:
      uint64_t v2 = (void **)&der_key_ecdh_seed;
      goto LABEL_28;
    case 7:
      uint64_t v2 = (void **)&der_key_ecdh_iv;
      goto LABEL_28;
    case 8:
      io_service_t v4 = (void **)&der_key_raw_output;
      goto LABEL_30;
    case 9:
      io_service_t v4 = (void **)&der_key_options;
      goto LABEL_30;
    case 10:
      uint64_t v2 = (void **)&der_key_shared_info;
      goto LABEL_28;
    case 11:
      uint64_t v2 = (void **)&der_key_shared_info2;
      goto LABEL_28;
    case 12:
      uint64_t v2 = (void **)&der_key_transcode_shared_info;
      goto LABEL_28;
    case 13:
      uint64_t v2 = (void **)&der_key_transcode_shared_info2;
      goto LABEL_28;
    case 14:
      uint64_t v2 = (void **)&der_key_transcode_ecdh_seed;
      goto LABEL_28;
    case 15:
      uint64_t v2 = (void **)&der_key_persona_uuid;
      goto LABEL_28;
    case 16:
      io_service_t v4 = (void **)&der_key_sub_key_type;
      goto LABEL_30;
    case 17:
      uint64_t v2 = (void **)&der_key_system_key_client_seed;
      goto LABEL_28;
    case 18:
      io_service_t v4 = (void **)&der_key_system_key_options;
      goto LABEL_30;
    case 19:
      uint64_t v5 = der_key_system_key_no_img4;
      BOOL v6 = a2 == 3;
      goto LABEL_31;
    case 20:
      io_service_t v4 = (void **)&der_key_remote_session_signing_key_type;
      goto LABEL_30;
    case 21:
      uint64_t v2 = (void **)&der_key_remote_session_signing_key_certificate;
      goto LABEL_28;
    case 22:
      io_service_t v4 = (void **)&der_key_gid_ref_key_options;
      goto LABEL_30;
    case 23:
      io_service_t v4 = (void **)&der_key_pka_flags;
      goto LABEL_30;
    case 24:
      uint64_t v2 = (void **)&der_key_volume_uuid;
      goto LABEL_28;
    case 25:
      uint64_t v2 = (void **)&der_key_seed;
LABEL_28:
      uint64_t v5 = *v2;
      BOOL v6 = a2 == 2;
      goto LABEL_31;
    case 26:
      io_service_t v4 = (void **)&der_key_test_flags;
LABEL_30:
      uint64_t v5 = *v4;
      BOOL v6 = a2 == 1;
LABEL_31:
      if (v6) {
        dispatch_queue_t result = v5;
      }
      else {
        dispatch_queue_t result = 0LL;
      }
      break;
    default:
      dispatch_queue_t result = 0LL;
      break;
  }

  return result;
}

uint64_t aks_params_get_BOOL(void *a1, int a2, _BYTE *a3)
{
  char v6 = 0;
  uint64_t result = (uint64_t)_params_get_der_key(a2, 3);
  if (result)
  {
    uint64_t result = encode_list_get_BOOL(a1, (unsigned __int8 *)result, &v6);
    if ((_DWORD)result)
    {
      if (v6)
      {
        uint64_t result = 1LL;
        *a3 = 1;
      }
    }
  }

  return result;
}

uint64_t aks_params_set_number(void *a1, int a2, uint64_t *a3)
{
  uint64_t v5 = 3758097090LL;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 1);
  if (der_key)
  {
    uint64_t v7 = (uint64_t)der_key;
    if (!encode_list_remove_key(a1, der_key)
      && (!a3 || !encode_list_add_number(a1, v7, *a3)))
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t aks_params_get_number(void *a1, int a2, void *a3)
{
  uint64_t v6 = 0LL;
  uint64_t result = (uint64_t)_params_get_der_key(a2, 1);
  if (result)
  {
    uint64_t result = encode_list_get_number(a1, (unsigned __int8 *)result, &v6);
    if (a3)
    {
      if ((_DWORD)result)
      {
        *a3 = v6;
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t aks_params_set_data(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 3758097090LL;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 2);
  if (der_key)
  {
    uint64_t v8 = (uint64_t)der_key;
    if (!encode_list_remove_key(a1, der_key))
    {
      if (a3)
      {
        if (a2 == 1 || a2 == 2)
        {
          ccder_blob_decode_tag();
          return v6;
        }
      }

      return 0LL;
    }
  }

  return v6;
}

uint64_t aks_params_get_data(void *a1, int a2, void *a3)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 2);
  if (der_key)
  {
    int data = encode_list_get_data(a1, der_key, (a2 - 1) < 2, &v9, &v10);
    if (a3)
    {
      if (data) {
        *a3 = v10;
      }
    }
  }

  return v9;
}

uint64_t aks_params_free(void ***a1)
{
  uint64_t result = 3758097090LL;
  if (a1)
  {
    mach_port_t v3 = *a1;
    if (*a1)
    {
      *a1 = 0LL;
      encode_list_free(v3);
      memset_s(v3, 8uLL, 0, 8uLL);
      free(v3);
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_encrypt(int a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, size_t *a8)
{
  BOOL v8 = 0;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  v29[1] = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v28 = a6;
  v29[0] = a5;
  size_t v26 = 0LL;
  __int128 v27 = 0LL;
  size_t v25 = 0LL;
  if (!a7 || !a8)
  {
    uint64_t v17 = 3758097090LL;
    goto LABEL_16;
  }

  uint64_t v11 = a6;
  uint64_t v12 = a5;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  if (der_dict_find_value((uint64_t)der_key_external_data, &v23, &v24)
    && (uint64_t v21 = 0LL, v22 = 0LL, der_dict_find_value((uint64_t)der_key_acl, &v21, &v22))
    && (der_dict_find_value((uint64_t)der_key_op_encrypt, 0LL, 0LL) & 1) == 0)
  {
    if (encode_list_merge_dict((uint64_t)&v27)
      || encode_list_merge_dict((uint64_t)&v26)
      || encode_list_merge_dict((uint64_t)&v25))
    {
      BOOL v8 = 0;
      uint64_t v17 = 3758097085LL;
      goto LABEL_16;
    }

    encode_list_add_BOOL(&v25, (uint64_t)der_key_op_encrypt);
    encode_list_remove_key(&v26, (unsigned __int8 *)der_key_acl);
    encode_list_add_list(&v26, (uint64_t)der_key_acl, &v25);
    encode_list_remove_key(&v27, (unsigned __int8 *)der_key_external_data);
    encode_list_add_list(&v27, (uint64_t)der_key_external_data, &v26);
    BOOL v8 = encode_list_dict(&v27, v29, (size_t *)&v28) == 0;
    uint64_t v11 = v28;
    uint64_t v12 = v29[0];
  }

  else
  {
    BOOL v8 = 0;
  }

  uint64_t v16 = aks_ref_key_create(a1, a2, 0, (uint64_t)v12, v11, &v31);
  if ((_DWORD)v16 || (uint64_t v16 = aks_ref_key_encrypt((uint64_t *)v31, (uint64_t)v29[0], v28, a3), (_DWORD)v16))
  {
    uint64_t v17 = v16;
  }

  else if (encode_list_merge_dict((uint64_t)&v32) {
         || encode_list_merge_dict((uint64_t)&v32)
  }
         || (uint64_t v19 = 0LL, v20 = 0LL, der_dict_find_value((uint64_t)der_key_external_data, &v19, &v20))
         && encode_list_add_der(&v32, (uint64_t)der_key_auth_data, v19, (uint64_t)v31[2]))
  {
    uint64_t v17 = 3758097090LL;
  }

  else if (encode_list_dict(&v32, a7, a8))
  {
    uint64_t v17 = 3758097090LL;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

uint64_t aks_ref_key_create(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, void ***a6)
{
  uint64_t v11 = 3758097090LL;
  uint64_t v12 = der_key_op_create;
  uint64_t v13 = (void **)calloc(8uLL, 1uLL);
  char *v13 = 0LL;
  encode_list_add_key(v13, (uint64_t)der_key_op, (uint64_t)v12);
  size_t v25 = 0LL;
  size_t v26 = 0LL;
  uint64_t v23 = 0LL;
  rsize_t v24 = 0LL;
  if (!a6) {
    goto LABEL_14;
  }
  uint64_t v14 = calloc(0x50uLL, 1uLL);
  uint64_t v22 = v14;
  if (!v14)
  {
    uint64_t v11 = 3758604298LL;
    goto LABEL_14;
  }

  uint64_t v15 = (void **)v14;
  memset_s(v14, 0x50uLL, 0, 0x50uLL);
  if (a4 && encode_list_merge_dict((uint64_t)v13)
    || encode_list_add_number(v13, (uint64_t)der_key_keybag_class, a2)
    || encode_list_add_number(v13, (uint64_t)der_key_type, a3)
    || encode_list_dict(v13, &v25, &v26))
  {
LABEL_17:
    aks_ref_key_free((uint64_t *)&v22);
    goto LABEL_14;
  }

  uint64_t v16 = _aks_operation();
  if ((_DWORD)v16)
  {
    uint64_t v11 = v16;
    goto LABEL_17;
  }

  uint64_t v17 = (char *)v23;
  rsize_t v18 = v24;
  *uint64_t v15 = v23;
  v15[1] = (void *)v18;
  *((_DWORD *)v15 + 10) = a1;
  v15[2] = &v17[v18];
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v11 = 0LL;
  *a6 = v15;
  uint64_t v23 = 0LL;
  rsize_t v24 = 0LL;
LABEL_14:
  encode_list_free(v13);
  memset_s(v13, 8uLL, 0, 8uLL);
  free(v13);
  memset_s(v25, v26, 0, v26);
  free(v25);
  memset_s(v23, v24, 0, v24);
  free(v23);
  return v11;
}

uint64_t aks_ref_key_encrypt(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3758097090LL;
  BOOL v8 = der_key_op_encrypt;
  uint64_t v9 = (void **)calloc(8uLL, 1uLL);
  int64_t *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_data);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v9, (uint64_t)der_key_data, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v9, &__s, &__n))
    {
      uint64_t v7 = _aks_operation();
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t aks_ref_key_free(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 3758097090LL;
  }
  *a1 = 0LL;
  if (*(void *)v1)
  {
    memset_s(*(void **)v1, *(void *)(v1 + 8), 0, *(void *)(v1 + 8));
    free(*(void **)v1);
  }

  uint64_t v2 = *(void **)(v1 + 48);
  if (v2)
  {
    memset_s(v2, *(void *)(v1 + 56), 0, *(void *)(v1 + 56));
    free(*(void **)(v1 + 48));
  }

  mach_port_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    memset_s(v3, *(void *)(v1 + 72), 0, *(void *)(v1 + 72));
    free(*(void **)(v1 + 64));
  }

  memset_s((void *)v1, 0x50uLL, 0, 0x50uLL);
  free((void *)v1);
  return 0LL;
}

uint64_t aks_decrypt(int a1, void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 3758097122LL;
  uint64_t v13 = 0LL;
  uint64_t v6 = 3758097090LL;
  uint64_t v6 = aks_ref_key_create_with_blob(a1, a2, a3, (uint64_t *)&v13);
  if (!(_DWORD)v6)
  {
    uint64_t v6 = aks_ref_key_decrypt(v13, a4, a5, a2, a3);
LABEL_6:
    aks_ref_key_free((uint64_t *)&v13);
    goto LABEL_7;
  }

  if (v13) {
    goto LABEL_6;
  }
LABEL_7:
  if ((int)v6 <= -536870175)
  {
    if ((_DWORD)v6 == -536870212) {
      return 3758097084LL;
    }
    if ((_DWORD)v6 != -536870194) {
      return v6;
    }
  }

  else if ((_DWORD)v6 != -536870174 && (_DWORD)v6 != -536363000)
  {
    if ((_DWORD)v6 != -536362999) {
      return v6;
    }
    return 3758097084LL;
  }

  return v5;
}

uint64_t aks_ref_key_create_with_blob(int a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = 3758097090LL;
  if (a2)
  {
    if (a3)
    {
      if (der_get_sizeof((uint64_t)a2) == a3)
      {
        uint64_t v4 = 3758604298LL;
        uint64_t v9 = calloc(0x50uLL, 1uLL);
        uint64_t v12 = v9;
        if (v9)
        {
          uint64_t v10 = (uint64_t)v9;
          memset_s(v9, 0x50uLL, 0, 0x50uLL);
          *(_DWORD *)(v10 + 40) = a1;
          if (_set_blob(v10, a2, a3))
          {
            aks_ref_key_free((uint64_t *)&v12);
          }

          else
          {
            uint64_t v4 = 0LL;
            *a4 = v10;
          }
        }
      }
    }
  }

  return v4;
}

uint64_t aks_ref_key_decrypt(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  uint64_t v9 = 3758097090LL;
  uint64_t v10 = der_key_op_decrypt;
  uint64_t v11 = (void **)calloc(8uLL, 1uLL);
  char *v11 = 0LL;
  encode_list_add_key(v11, (uint64_t)der_key_op, (uint64_t)v10);
  int __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v15 = a4;
  size_t v16 = a5;
  if (a4)
  {
    if (a5)
    {
      uint64_t v12 = (uint64_t)a4 + a5;
      if (der_get_sizeof((uint64_t)a4) == a5)
      {
        int version = aks_ref_key_get_version((uint64_t)a1);
        if (!version)
        {
          uint64_t v22 = 0LL;
          uint64_t v23 = 0LL;
          uint64_t v20 = 0LL;
          uint64_t v21 = 0LL;
          uint64_t v19 = 0LL;
          if (!der_dict_find_value((uint64_t)der_key_tag, &v19, &v20)
            || !der_dict_find_value((uint64_t)der_key_protected_data, &v21, &v22)
            || encode_list_add_der(&v23, (uint64_t)der_key_data, v21, v12)
            || encode_list_add_der(&v23, (uint64_t)der_key_tag, v19, v12)
            || encode_list_dict(&v23, &v15, &v16))
          {
            encode_list_free(&v23);
            goto LABEL_19;
          }

          encode_list_free(&v23);
        }

        if (!_get_merged_params((uint64_t)a1, v11, a2))
        {
          encode_list_remove_key(v11, (unsigned __int8 *)der_key_data);
          encode_list_remove_key(v11, (unsigned __int8 *)der_key_ref_key);
          if (!encode_list_add_der(v11, (uint64_t)der_key_data, (uint64_t)v15, (uint64_t)v15 + v16)
            && !encode_list_add_der(v11, (uint64_t)der_key_ref_key, *a1, a1[2])
            && !encode_list_dict(v11, &__s, &__n))
          {
            uint64_t v9 = _aks_operation();
          }
        }

        if (!version)
        {
          memset_s(v15, v16, 0, v16);
          free(v15);
        }
      }
    }
  }

LABEL_19:
  encode_list_free(v11);
  memset_s(v11, 8uLL, 0, 8uLL);
  free(v11);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v9;
}

          if ((v10 & 0x80) == 0) {
            goto LABEL_20;
          }
          goto LABEL_23;
        }

        if (v5 + 1 < v6)
        {
          rsize_t v18 = *(char *)(v7 + v11);
          if (*(_BYTE *)(v7 + v5))
          {
            if (v10 != 255) {
              goto LABEL_19;
            }
            if ((v18 & 0x80000000) == 0)
            {
LABEL_23:
              uint64_t v14 = 0xD000000000000021LL;
              uint64_t v13 = 0x8000000183D08FF0LL;
              uint64_t v15 = 77LL;
              goto LABEL_13;
            }
          }

          else if (v18 < 0)
          {
            goto LABEL_21;
          }

          uint64_t v14 = 0xD00000000000002ELL;
          uint64_t v13 = 0x8000000183D09020LL;
          uint64_t v15 = 67LL;
          goto LABEL_13;
        }

        goto LABEL_28;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
  }

  __break(1u);
  return result;
}

          if ((v10 & 0x80) == 0) {
            goto LABEL_20;
          }
          goto LABEL_23;
        }

        if (v5 + 1 < v6)
        {
          rsize_t v18 = *(char *)(v7 + v11);
          if (*(_BYTE *)(v7 + v5))
          {
            if (v10 != 255) {
              goto LABEL_19;
            }
            if ((v18 & 0x80000000) == 0)
            {
LABEL_23:
              uint64_t v14 = 0xD000000000000021LL;
              uint64_t v13 = 0x8000000183D08FF0LL;
              uint64_t v15 = 77LL;
              goto LABEL_13;
            }
          }

          else if (v18 < 0)
          {
            goto LABEL_21;
          }

          uint64_t v14 = 0xD00000000000002ELL;
          uint64_t v13 = 0x8000000183D09020LL;
          uint64_t v15 = 67LL;
          goto LABEL_13;
        }

        goto LABEL_28;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
  }

  __break(1u);
  return result;
}

          if (v14 != (_BYTE *)-1LL)
          {
            if (v23 <= (unint64_t)(v14 + 1))
            {
              v21[0] = v14 + 1;
              v21[1] = v23 + v22;
              uint64_t v19 = 0LL;
              uint64_t v20 = 0LL;
              uint64_t v15 = CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v21, &v20);
              uint64_t result = 327697LL;
              if (!v15 && !HIDWORD(v20))
              {
                if (CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v21, &v19))
                {
                  return 327698LL;
                }

                else
                {
                  uint64_t result = 0LL;
                  if (a7)
                  {
                    *(_DWORD *)a7 = v20;
                    *(void *)(a7 + 8) = v19;
                  }
                }
              }

              return result;
            }

    __break(0x5519u);
LABEL_20:
    __break(0x5513u);
  }

  return v7 == v8 + v9;
}

uint64_t aks_delete(int a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v4 = 3758097122LL;
  uint64_t v11 = 0LL;
  uint64_t v5 = 3758097090LL;
  uint64_t v5 = aks_ref_key_create_with_blob(a1, a2, a3, (uint64_t *)&v11);
  if (!(_DWORD)v5)
  {
    uint64_t v5 = aks_ref_key_delete(v11, a4);
LABEL_6:
    aks_ref_key_free((uint64_t *)&v11);
    goto LABEL_7;
  }

  if (v11) {
    goto LABEL_6;
  }
LABEL_7:
  if ((int)v5 <= -536870175)
  {
    if ((_DWORD)v5 == -536870212) {
      return 3758097084LL;
    }
    if ((_DWORD)v5 != -536870194) {
      return v5;
    }
  }

  else if ((_DWORD)v5 != -536870174 && (_DWORD)v5 != -536363000)
  {
    if ((_DWORD)v5 != -536362999) {
      return v5;
    }
    return 3758097084LL;
  }

  return v4;
}

uint64_t aks_ref_key_delete(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = 3758097090LL;
  uint64_t v5 = der_key_op_delete;
  uint64_t v6 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v6 = 0LL;
  encode_list_add_key(v6, (uint64_t)der_key_op, (uint64_t)v5);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v6, a2))
  {
    encode_list_remove_key(v6, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_der(v6, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v6, &__s, &__n))
    {
      uint64_t v4 = _aks_operation();
    }
  }

  encode_list_free(v6);
  memset_s(v6, 8uLL, 0, 8uLL);
  free(v6);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v4;
}

uint64_t _aks_operation()
{
  int v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  size_t v6 = v5;
  BOOL v8 = v7;
  int v9 = v0;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v8)
    {
      mach_port_t v11 = aks_client_connection;
      uint64_t v12 = 3758097090LL;
      if (der_get_sizeof((uint64_t)v8) == v6)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        uint64_t input = v9;
        uint64_t v12 = IOConnectCallMethod(v11, 0x2Bu, &input, 1u, v8, v6, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)v12 && v4 && v2)
        {
          uint64_t v13 = calloc(__count, 1uLL);
          *uint64_t v4 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            uint64_t v12 = 0LL;
            size_t *v2 = __count;
          }

          else
          {
            uint64_t v12 = 3758097085LL;
          }
        }
      }
    }

    else
    {
      uint64_t v12 = 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_operation",  ":",  457,  "",  0,  "",  "");
    uint64_t v12 = 3758097084LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v12;
}

uint64_t _set_blob(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  if (*(void *)a1)
  {
    memset_s(*(void **)a1, *(void *)(a1 + 8), 0, *(void *)(a1 + 8));
    free(*(void **)a1);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
  }

  size_t v6 = calloc(a3, 1uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = a3;
  if (!v6) {
    return 3758604298LL;
  }
  memcpy(v6, a2, a3);
  *(void *)(a1 + 16) = *(void *)a1 + *(void *)(a1 + 8);
  if ((der_dict_find_value((uint64_t)der_key_external_data, &v8, &v9) & 1) != 0
    || (uint64_t result = der_dict_find_value((uint64_t)der_key_auth_data, &v8, &v9), (_DWORD)result))
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 24) = v8;
  }

  return result;
}

uint64_t aks_ref_key_create_and_encrypt( int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void ***a8, void **a9, rsize_t *a10)
{
  uint64_t v16 = 3758097090LL;
  rsize_t v35 = 0LL;
  rsize_t __smax = 0LL;
  __int128 v34 = 0LL;
  rsize_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v17 = der_key_op_create_with_encrypt;
  uint64_t v18 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v18 = 0LL;
  encode_list_add_key(v18, (uint64_t)der_key_op, (uint64_t)v17);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!a8) {
    goto LABEL_16;
  }
  uint64_t v19 = calloc(0x50uLL, 1uLL);
  int v29 = v19;
  if (!v19)
  {
    uint64_t v16 = 3758604298LL;
    goto LABEL_16;
  }

  uint64_t v20 = (void **)v19;
  memset_s(v19, 0x50uLL, 0, 0x50uLL);
  if (a4 && encode_list_merge_dict((uint64_t)v18)
    || (encode_list_remove_key(v18, (unsigned __int8 *)der_key_data),
        encode_list_remove_key(v18, (unsigned __int8 *)der_key_ref_key),
        encode_list_add_number(v18, (uint64_t)der_key_keybag_class, a2))
    || encode_list_add_number(v18, (uint64_t)der_key_type, a3)
    || encode_list_add_data(v18, (uint64_t)der_key_data, a6)
    || encode_list_dict(v18, &__s, &__n))
  {
LABEL_26:
    aks_ref_key_free((uint64_t *)&v29);
    goto LABEL_16;
  }

  uint64_t v21 = _aks_operation();
  if ((_DWORD)v21 || (uint64_t v21 = decode_ref_key_with_result((uint64_t)v34, v35, &v32, &__smax, &v30, &v31), (_DWORD)v21))
  {
    uint64_t v16 = v21;
    goto LABEL_26;
  }

  uint64_t v22 = (char *)v32;
  rsize_t v23 = __smax;
  *uint64_t v20 = v32;
  v20[1] = (void *)v23;
  *((_DWORD *)v20 + 10) = a1;
  v20[2] = &v22[v23];
  size_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v16 = 0LL;
  *a8 = v20;
  uint64_t v32 = 0LL;
  rsize_t __smax = 0LL;
  *a9 = v30;
  *a10 = v31;
  uint64_t v30 = 0LL;
  rsize_t v31 = 0LL;
LABEL_16:
  encode_list_free(v18);
  memset_s(v18, 8uLL, 0, 8uLL);
  free(v18);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v32)
  {
    memset_s(v32, __smax, 0, __smax);
    free(v32);
  }

  if (v30)
  {
    memset_s(v30, v31, 0, v31);
    free(v30);
  }

  if (v34)
  {
    memset_s(v34, v35, 0, v35);
    free(v34);
  }

  return v16;
}

uint64_t decode_ref_key_with_result(uint64_t a1, uint64_t a2, void *a3, void *a4, void **a5, void *a6)
{
  *(void *)&__int128 __n_4 = a1;
  *((void *)&__n_4 + 1) = a1 + a2;
  unsigned int __n = 0;
  *(void *)&__smax[1] = 0LL;
  __smax[0] = 0;
  int __s = 0LL;
  if (a6
    && a1
    && a3
    && a4
    && a5
    && ccder_blob_decode_range()
    && der_utils_decode_implicit_raw_octet_string_alloc(&__n_4, 4LL, (uint64_t *)&__s, __smax))
  {
    if (der_utils_decode_implicit_raw_octet_string_alloc(&__n_4, 4LL, (uint64_t *)&__smax[1], &__n))
    {
      uint64_t v10 = 0LL;
      *a3 = *(void *)&__smax[1];
      *a4 = __n;
      *a5 = __s;
      *a6 = __smax[0];
      return v10;
    }

    if (*(void *)&__smax[1])
    {
      memset_s(*(void **)&__smax[1], __n, 0, __n);
      free(*(void **)&__smax[1]);
    }
  }

  uint64_t v10 = 3758097084LL;
  if (__s)
  {
    memset_s(__s, __smax[0], 0, __smax[0]);
    free(__s);
  }

  return v10;
}

uint64_t aks_ref_key_create_and_wrap( int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void ***a8, void **a9, rsize_t *a10)
{
  uint64_t v16 = 3758097090LL;
  rsize_t v35 = 0LL;
  rsize_t __smax = 0LL;
  __int128 v34 = 0LL;
  rsize_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v17 = der_key_op_create_with_wrap;
  uint64_t v18 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v18 = 0LL;
  encode_list_add_key(v18, (uint64_t)der_key_op, (uint64_t)v17);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!a8) {
    goto LABEL_16;
  }
  uint64_t v19 = calloc(0x50uLL, 1uLL);
  int v29 = v19;
  if (!v19)
  {
    uint64_t v16 = 3758604298LL;
    goto LABEL_16;
  }

  uint64_t v20 = (void **)v19;
  memset_s(v19, 0x50uLL, 0, 0x50uLL);
  if (a4 && encode_list_merge_dict((uint64_t)v18)
    || (encode_list_remove_key(v18, (unsigned __int8 *)der_key_data),
        encode_list_remove_key(v18, (unsigned __int8 *)der_key_ref_key),
        encode_list_add_number(v18, (uint64_t)der_key_keybag_class, a2))
    || encode_list_add_number(v18, (uint64_t)der_key_type, a3)
    || encode_list_add_data(v18, (uint64_t)der_key_data, a6)
    || encode_list_dict(v18, &__s, &__n))
  {
LABEL_26:
    aks_ref_key_free((uint64_t *)&v29);
    goto LABEL_16;
  }

  uint64_t v21 = _aks_operation();
  if ((_DWORD)v21 || (uint64_t v21 = decode_ref_key_with_result((uint64_t)v34, v35, &v32, &__smax, &v30, &v31), (_DWORD)v21))
  {
    uint64_t v16 = v21;
    goto LABEL_26;
  }

  uint64_t v22 = (char *)v32;
  rsize_t v23 = __smax;
  *uint64_t v20 = v32;
  v20[1] = (void *)v23;
  *((_DWORD *)v20 + 10) = a1;
  v20[2] = &v22[v23];
  size_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v16 = 0LL;
  *a8 = v20;
  uint64_t v32 = 0LL;
  rsize_t __smax = 0LL;
  *a9 = v30;
  *a10 = v31;
  uint64_t v30 = 0LL;
  rsize_t v31 = 0LL;
LABEL_16:
  encode_list_free(v18);
  memset_s(v18, 8uLL, 0, 8uLL);
  free(v18);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v32)
  {
    memset_s(v32, __smax, 0, __smax);
    free(v32);
  }

  if (v30)
  {
    memset_s(v30, v31, 0, v31);
    free(v30);
  }

  if (v34)
  {
    memset_s(v34, v35, 0, v35);
    free(v34);
  }

  return v16;
}

uint64_t _get_merged_params(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = 3758604298LL;
  if (a1
    && (!*(void *)(a1 + 48) || !encode_list_merge_dict((uint64_t)a2))
    && (!a3 || !encode_list_merge_dict((uint64_t)a2)))
  {
    encode_list_remove_key(a2, (unsigned __int8 *)der_key_external_data);
    return 0LL;
  }

  return v3;
}

uint64_t aks_ref_key_get_version(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  uint64_t result = der_dict_find_value((uint64_t)der_key_version, &v2, &v3);
  if ((_DWORD)result) {
    return der_get_number();
  }
  return result;
}

uint64_t aks_ref_key_sign(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3758097090LL;
  uint64_t v8 = der_key_op_sign;
  uint64_t v9 = (void **)calloc(8uLL, 1uLL);
  void *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_data);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v9, (uint64_t)der_key_data, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v9, &__s, &__n))
    {
      uint64_t v7 = _aks_operation();
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t aks_ref_key_verify_sig( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7 = a7;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v23 = a6;
  *((void *)&v23 + 1) = a6 + a7;
  int v22 = 0;
  uint64_t v21 = 0LL;
  der_utils_decode_implicit_raw_octet_string(&v23, 4LL, &v22, &v21);
  if ((v10 & 1) == 0)
  {
    uint64_t v21 = a6;
    int v22 = v7;
  }

  uint64_t v11 = 3758097090LL;
  int type = aks_ref_key_get_type((uint64_t)a1);
  if ((type - 4) < 2)
  {
    char v19 = 0;
    goto LABEL_8;
  }

  if ((type - 7) < 2)
  {
    uint64_t v13 = MEMORY[0x186E25BAC]();
    char v19 = 0;
    if (v13)
    {
LABEL_9:
      MEMORY[0x1895F8858]();
      uint64_t v15 = &v18[-v14];
      bzero(&v18[-v14], v14);
      uint64_t v20 = 0LL;
      uint64_t public_key = aks_ref_key_get_public_key(a1, &v20);
      if (public_key && !MEMORY[0x186E25BD0](v13, v20, public_key, v15) && !ccec_verify())
      {
        if (!v19) {
          return 3758604294LL;
        }
        return 0LL;
      }

      return v11;
    }

uint64_t aks_ref_key_get_type(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  uint64_t result = der_dict_find_value((uint64_t)der_key_type, &v2, &v3);
  if ((_DWORD)result) {
    return der_get_number();
  }
  return result;
}

uint64_t aks_ref_key_get_public_key(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unsigned int v17 = 0;
  uint64_t v16 = 0LL;
  if (!a1[4]) {
    return 0LL;
  }
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  if (der_dict_find_value((uint64_t)der_key_public_key, &v14, &v15))
  {
    *(void *)&__int128 v13 = v14;
    *((void *)&v13 + 1) = v14 + v15;
    der_utils_decode_implicit_raw_octet_string(&v13, 4LL, &v17, &v16);
  }

  int type = aks_ref_key_get_type((uint64_t)a1);
  if ((type - 7) < 2)
  {
    uint64_t v5 = MEMORY[0x186E25BAC]();
    goto LABEL_9;
  }

  if ((type - 4) <= 1)
  {
    uint64_t v5 = MEMORY[0x186E25BA0]();
LABEL_9:
    if (v5)
    {
      uint64_t v7 = firebloom_cp_prime_bitlen(v5);
      if (v17 == (unint64_t)(v7 + 7) >> 3)
      {
        if (v16 && !a1[8])
        {
          MEMORY[0x1895F8858]();
          bzero((char *)&v12 - v8, v8);
          ccec_compact_import_pub();
          size_t v9 = (2 * firebloom_cp_prime_size()) | 1;
          char v10 = calloc(v9, 1uLL);
          a1[8] = v10;
          a1[9] = v9;
          if (v10) {
            ccec_export_pub();
          }
          cc_clear();
        }

        uint64_t v11 = a1[9];
        uint64_t v16 = a1[8];
        unsigned int v17 = v11;
      }
    }
  }

  *a2 = v17;
  return v16;
}

uint64_t aks_ref_key_set_key_class(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = 3758097090LL;
  size_t v8 = der_key_op_set_key_class;
  size_t v9 = (void **)calloc(8uLL, 1uLL);
  void *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  uint64_t v12 = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_data);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_number(v9, (uint64_t)der_key_keybag_class, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v9, &v12, &__n))
    {
      uint64_t v10 = _aks_operation();
      if ((_DWORD)v10) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = _set_blob((uint64_t)a1, 0LL, 0LL);
      }
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(v12);
  }

  return v7;
}

uint64_t aks_ref_key_wrap(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3758097090LL;
  size_t v8 = der_key_op_wrap;
  size_t v9 = (void **)calloc(8uLL, 1uLL);
  void *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_data);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v9, (uint64_t)der_key_data, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v9, &__s, &__n))
    {
      uint64_t v7 = _aks_operation();
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t aks_ref_key_unwrap(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 3758097090LL;
  uint64_t v10 = der_key_op_unwrap;
  uint64_t v11 = (void **)calloc(8uLL, 1uLL);
  uint64_t *v11 = 0LL;
  encode_list_add_key(v11, (uint64_t)der_key_op, (uint64_t)v10);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v11, a2))
  {
    encode_list_remove_key(v11, (unsigned __int8 *)der_key_data);
    encode_list_remove_key(v11, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_der(v11, (uint64_t)der_key_data, a4, a4 + a5)
      && !encode_list_add_der(v11, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v11, &__s, &__n))
    {
      uint64_t v9 = _aks_operation();
    }
  }

  encode_list_free(v11);
  memset_s(v11, 8uLL, 0, 8uLL);
  free(v11);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v9;
}

uint64_t aks_ref_key_transcrypt(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = 3758097090LL;
  size_t v8 = der_key_op_transcrypt;
  uint64_t v9 = (void **)calloc(8uLL, 1uLL);
  void *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  uint64_t v12 = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params(a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_dst_keybag_handle);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_number(v9, (uint64_t)der_key_dst_keybag_handle, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *(void *)a1, *(void *)(a1 + 16))
      && !encode_list_dict(v9, &v12, &__n))
    {
      uint64_t v10 = _aks_operation();
      if ((_DWORD)v10)
      {
        uint64_t v7 = v10;
      }

      else
      {
        *(_DWORD *)(a1 + 40) = a4;
        uint64_t v7 = _set_blob(a1, 0LL, 0LL);
      }
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(v12);
  }

  return v7;
}

uint64_t aks_ref_key_compute_key(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3758097090LL;
  size_t v8 = der_key_op_compute_key;
  uint64_t v9 = (void **)calloc(8uLL, 1uLL);
  void *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v9, a2))
  {
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_public_key);
    encode_list_remove_key(v9, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v9, (uint64_t)der_key_public_key, a4)
      && !encode_list_add_der(v9, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v9, &__s, &__n))
    {
      uint64_t v7 = _aks_operation();
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t aks_ref_key_encapsulate( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, void *a7, void **a8, void *a9)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097090LL;
  uint64_t v15 = der_key_op_kem_encapsulate;
  uint64_t v16 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v16 = 0LL;
  encode_list_add_key(v16, (uint64_t)der_key_op, (uint64_t)v15);
  LODWORD(v17) = 0;
  uint64_t v18 = 0LL;
  v27[0] = 0LL;
  memset(__n, 0, sizeof(__n));
  int __s = 0LL;
  unsigned int v24 = 0;
  __int128 v23 = 0LL;
  if (a6 && a8)
  {
    encode_list_remove_key(v16, (unsigned __int8 *)der_key_ref_key);
    if (encode_list_add_data(v16, (uint64_t)der_key_public_key, a4)
      || encode_list_add_der(v16, (uint64_t)der_key_ref_key, *a1, a1[2])
      || encode_list_dict(v16, &__n[1], v27))
    {
      goto LABEL_13;
    }

    uint64_t v19 = _aks_operation();
    if ((_DWORD)v19)
    {
      uint64_t v14 = v19;
      goto LABEL_13;
    }

    uint64_t v14 = 3758604298LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    v27[1] = (size_t)der_key_op_compute_key;
    uint64_t v32 = 0LL;
    *(void *)&__int128 v30 = der_key_data;
    der_dict_iterate();
    LODWORD(v17) = 0;
    uint64_t v18 = 0LL;
    if ((void)v28)
    {
      if (*((void *)&v30 + 1))
      {
        if (!der_utils_decode_implicit_raw_octet_string_alloc(&v29, 4LL, (uint64_t *)&__s, __n))
        {
LABEL_13:
          uint64_t v18 = 0LL;
          LODWORD(v17) = 0;
          goto LABEL_14;
        }

        int v20 = der_utils_decode_implicit_raw_octet_string_alloc( (__int128 *)((char *)&v31 + 8),  4LL,  (uint64_t *)&v23,  &v24);
        uint64_t v17 = v24;
        uint64_t v18 = v23;
        if (v20)
        {
          uint64_t v14 = 0LL;
          *a6 = v23;
          *a7 = v17;
          __int128 v23 = 0LL;
          unsigned int v24 = 0;
          *a8 = __s;
          *a9 = __n[0];
          int __s = 0LL;
          __n[0] = 0;
          goto LABEL_13;
        }
      }
    }
  }

uint64_t aks_ref_key_decapsulate( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v12 = 3758097090LL;
  __int128 v13 = der_key_op_kem_decapsulate;
  uint64_t v14 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v14 = 0LL;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  uint64_t v16 = 0LL;
  size_t v17 = 0LL;
  if (a6)
  {
    if (!_get_merged_params((uint64_t)a1, v14, a2))
    {
      encode_list_remove_key(v14, (unsigned __int8 *)der_key_ref_key);
      if (!encode_list_add_data(v14, (uint64_t)der_key_data, a4)
        && !encode_list_add_der(v14, (uint64_t)der_key_ref_key, *a1, a1[2])
        && !encode_list_dict(v14, &v16, &v17))
      {
        uint64_t v12 = _aks_operation();
        if (!(_DWORD)v12)
        {
          *a6 = 0LL;
          *a7 = 0LL;
        }
      }
    }
  }

  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  memset_s(v16, v17, 0, v17);
  free(v16);
  return v12;
}

uint64_t aks_ref_key_ecies_encrypt( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v13 = 3758097090LL;
  uint64_t v14 = der_key_op_ecies_encrypt;
  uint64_t v15 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v15 = 0LL;
  encode_list_add_key(v15, (uint64_t)der_key_op, (uint64_t)v14);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v15, a2))
  {
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_public_key);
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v15, (uint64_t)der_key_public_key, a4)
      && !encode_list_add_data(v15, (uint64_t)der_key_data, a6)
      && !encode_list_add_der(v15, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v15, &__s, &__n))
    {
      uint64_t v13 = _aks_operation();
      if (!(_DWORD)v13)
      {
        *a8 = 0LL;
        *a9 = 0LL;
      }
    }
  }

  encode_list_free(v15);
  memset_s(v15, 8uLL, 0, 8uLL);
  free(v15);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v13;
}

uint64_t aks_ref_key_ecies_decrypt( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v12 = 3758097090LL;
  uint64_t v13 = der_key_op_ecies_decrypt;
  uint64_t v14 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v14 = 0LL;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v14, a2))
  {
    encode_list_remove_key(v14, (unsigned __int8 *)der_key_ref_key);
    if ((!a4 || !encode_list_add_data(v14, (uint64_t)der_key_data, a4))
      && !encode_list_add_der(v14, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v14, &__s, &__n))
    {
      uint64_t v12 = _aks_operation();
      if (!(_DWORD)v12)
      {
        *a6 = 0LL;
        *a7 = 0LL;
      }
    }
  }

  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v12;
}

uint64_t aks_ref_key_ecies_transcode( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v13 = 3758097090LL;
  uint64_t v14 = der_key_op_ecies_transcode;
  uint64_t v15 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v15 = 0LL;
  encode_list_add_key(v15, (uint64_t)der_key_op, (uint64_t)v14);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!_get_merged_params((uint64_t)a1, v15, a2))
  {
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_public_key);
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_ref_key);
    if (!encode_list_add_data(v15, (uint64_t)der_key_public_key, a4)
      && !encode_list_add_data(v15, (uint64_t)der_key_data, a6)
      && !encode_list_add_der(v15, (uint64_t)der_key_ref_key, *a1, a1[2])
      && !encode_list_dict(v15, &__s, &__n))
    {
      uint64_t v13 = _aks_operation();
      if (!(_DWORD)v13)
      {
        *a8 = 0LL;
        *a9 = 0LL;
      }
    }
  }

  encode_list_free(v15);
  memset_s(v15, 8uLL, 0, 8uLL);
  free(v15);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v13;
}

uint64_t aks_ref_key_enable_test_keys(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 3758097090LL;
  uint64_t v4 = der_key_op_enable_test_keys;
  uint64_t v5 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v5 = 0LL;
  encode_list_add_key(v5, (uint64_t)der_key_op, (uint64_t)v4);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!encode_list_add_data(v5, (uint64_t)der_key_passcode, a2)
    && !encode_list_dict(v5, &__s, &__n))
  {
    uint64_t v3 = _aks_operation();
  }

  encode_list_free(v5);
  memset_s(v5, 8uLL, 0, 8uLL);
  free(v5);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v3;
}

uint64_t aks_ref_key_attest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 3758097090LL;
  uint64_t v12 = der_key_op_attest;
  uint64_t v13 = (void **)calloc(8uLL, 1uLL);
  void *v13 = 0LL;
  encode_list_add_key(v13, (uint64_t)der_key_op, (uint64_t)v12);
  int __s = 0LL;
  rsize_t __n = 0LL;
  size_t v17 = 0LL;
  if (a5)
  {
    if (a6)
    {
      if (!_get_merged_params((uint64_t)a4, &v17, 0LL))
      {
        encode_list_remove_key(&v17, (unsigned __int8 *)der_key_ref_key);
        if (!encode_list_add_der(&v17, (uint64_t)der_key_ref_key, *a4, a4[2])
          && !_get_merged_params((uint64_t)a1, v13, a2))
        {
          encode_list_remove_key(v13, (unsigned __int8 *)der_key_ref_key);
          if (!encode_list_add_list(v13, (uint64_t)der_key_data, &v17)
            && !encode_list_add_der(v13, (uint64_t)der_key_ref_key, *a1, a1[2])
            && !encode_list_dict(v13, &__s, &__n))
          {
            uint64_t v11 = _aks_operation();
          }
        }
      }
    }
  }

  encode_list_free(&v17);
  encode_list_free(v13);
  memset_s(v13, 8uLL, 0, 8uLL);
  free(v13);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v11;
}

uint64_t aks_ref_key_set_params(uint64_t a1, const void *a2, size_t __count)
{
  size_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    memset_s(v6, *(void *)(a1 + 56), 0, *(void *)(a1 + 56));
    free(*(void **)(a1 + 48));
    *(void *)(a1 + 48) = 0LL;
    *(void *)(a1 + 56) = 0LL;
  }

  uint64_t result = 0LL;
  if (a2 && __count)
  {
    size_t v8 = calloc(__count, 1uLL);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = __count;
    if (v8)
    {
      memcpy(v8, a2, __count);
      return 0LL;
    }

    else
    {
      return 3758604298LL;
    }
  }

  return result;
}

uint64_t aks_ref_key_get_blob(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a2 = a1[1];
  return result;
}

uint64_t aks_ref_key_get_external_data(uint64_t a1, uint64_t *a2)
{
  *a2 = der_get_sizeof(*(void *)(a1 + 24));
  return *(void *)(a1 + 24);
}

uint64_t aks_ref_key_get_uuid(uint64_t a1, void *a2)
{
  unsigned int v9 = 0;
  uint64_t v8 = 0LL;
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  int value = der_dict_find_value((uint64_t)der_key_uuid, &v6, &v7);
  uint64_t result = 0LL;
  if (value)
  {
    *(void *)&__int128 v5 = v6;
    *((void *)&v5 + 1) = v6 + v7;
    der_utils_decode_implicit_raw_octet_string(&v5, 4LL, &v9, &v8);
    *a2 = v9;
    return v8;
  }

  return result;
}

uint64_t aks_ref_key_get_handle(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t aks_ref_key_get_key_class(uint64_t a1)
{
  return aks_ref_key_get_raw_key_class(a1) & 0x1F;
}

uint64_t aks_ref_key_get_raw_key_class(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  uint64_t result = der_dict_find_value((uint64_t)der_key_keybag_class, &v2, &v3);
  if ((_DWORD)result) {
    return der_get_number();
  }
  return result;
}

uint64_t aks_ref_key_get_options(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  int value = der_dict_find_value((uint64_t)der_key_options, &v3, &v4);
  uint64_t result = 0LL;
  if (value) {
    return der_get_number();
  }
  return result;
}

uint64_t aks_ref_key_validate_key(uint64_t *a1)
{
  uint64_t v2 = 3758097090LL;
  uint64_t v3 = der_key_op_validate_key;
  uint64_t v4 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v4 = 0LL;
  encode_list_add_key(v4, (uint64_t)der_key_op, (uint64_t)v3);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!encode_list_add_der(v4, (uint64_t)der_key_ref_key, *a1, a1[2])
    && !encode_list_dict(v4, &__s, &__n))
  {
    uint64_t v2 = _aks_operation();
  }

  encode_list_free(v4);
  memset_s(v4, 8uLL, 0, 8uLL);
  free(v4);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v2;
}

uint64_t aks_sik_attest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _op_attest(a1, (uint64_t)der_key_op_sik_attest, a2, a3, a4, a5);
}

uint64_t _op_attest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 3758097090LL;
  uint64_t v12 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v12 = 0LL;
  encode_list_add_key(v12, (uint64_t)der_key_op, a2);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (a1)
  {
    if (a5)
    {
      if (a6)
      {
        if (!_get_merged_params((uint64_t)a1, v12, a3))
        {
          encode_list_remove_key(v12, (unsigned __int8 *)der_key_ref_key);
          if (!encode_list_add_der(v12, (uint64_t)der_key_ref_key, *a1, a1[2])
            && !encode_list_dict(v12, &__s, &__n))
          {
            uint64_t v11 = _aks_operation();
          }
        }
      }
    }
  }

  encode_list_free(v12);
  memset_s(v12, 8uLL, 0, 8uLL);
  free(v12);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v11;
}

uint64_t aks_gid_attest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _op_attest(a1, (uint64_t)der_key_op_gid_attest, a2, a3, a4, a5);
}

uint64_t aks_sik_optional_params( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v11 = 0LL;
  size_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v9 = 3758097090LL;
  if ((!a1 || a2 <= 0x20 && !encode_list_add_data(&v13, (uint64_t)der_key_salt, a1))
    && (!a3 || !encode_list_add_data(&v13, (uint64_t)der_key_data, a3)))
  {
    if (encode_list_is_empty(&v13))
    {
      uint64_t v9 = 0LL;
    }

    else if (!encode_list_dict(&v13, &v11, &v12))
    {
      uint64_t v9 = 0LL;
      *a5 = v11;
      *a6 = v12;
    }
  }

  encode_list_free(&v13);
  return v9;
}

uint64_t aks_sik_collection(uint64_t a1)
{
  uint64_t v2 = 3758097090LL;
  uint64_t v3 = der_key_op_sik_collection;
  uint64_t v4 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v4 = 0LL;
  encode_list_add_key(v4, (uint64_t)der_key_op, (uint64_t)v3);
  int __s = 0LL;
  rsize_t __n = 0LL;
  encode_list_free(v4);
  memset_s(v4, 8uLL, 0, 8uLL);
  free(v4);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v2;
}

uint64_t aks_get_sik_status(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = 3758097090LL;
  uint64_t v8 = der_key_op_get_sik_status;
  uint64_t v9 = (void **)calloc(8uLL, 1uLL);
  void *v9 = 0LL;
  encode_list_add_key(v9, (uint64_t)der_key_op, (uint64_t)v8);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if ((!a1 || !encode_list_merge_dict((uint64_t)v9)) && !encode_list_dict(v9, &__s, &__n))
  {
    uint64_t v7 = _aks_operation();
    if (!(_DWORD)v7)
    {
      *a3 = 0LL;
      *a4 = 0LL;
    }
  }

  encode_list_free(v9);
  memset_s(v9, 8uLL, 0, 8uLL);
  free(v9);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t aks_system_key_collection( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v11 = 3758097090LL;
  size_t v12 = der_key_op_system_key_collect;
  uint64_t v13 = (void **)calloc(8uLL, 1uLL);
  void *v13 = 0LL;
  encode_list_add_key(v13, (uint64_t)der_key_op, (uint64_t)v12);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v13))
    && !encode_list_add_number(v13, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v13, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v13, &__s, &__n))
  {
    uint64_t v11 = _aks_operation();
    if (!(_DWORD)v11)
    {
      *a5 = 0LL;
      *a6 = 0LL;
    }
  }

  encode_list_free(v13);
  memset_s(v13, 8uLL, 0, 8uLL);
  free(v13);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v11;
}

uint64_t aks_system_key_attest( unsigned int a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v13 = 3758097090LL;
  uint64_t v14 = der_key_op_system_key_attest;
  uint64_t v15 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v15 = 0LL;
  encode_list_add_key(v15, (uint64_t)der_key_op, (uint64_t)v14);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (a3)
  {
    if (!_get_merged_params((uint64_t)a3, v15, a4))
    {
      encode_list_remove_key(v15, (unsigned __int8 *)der_key_ref_key);
      if (!encode_list_add_der(v15, (uint64_t)der_key_ref_key, *a3, a3[2])
        && !encode_list_add_number(v15, (uint64_t)der_key_system_key_type, a1)
        && !encode_list_add_number(v15, (uint64_t)der_key_system_key_generation, a2)
        && !encode_list_dict(v15, &__s, &__n))
      {
        uint64_t v13 = _aks_operation();
        if (!(_DWORD)v13)
        {
          *a6 = 0LL;
          *a7 = 0LL;
        }
      }
    }
  }

  encode_list_free(v15);
  memset_s(v15, 8uLL, 0, 8uLL);
  free(v15);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v13;
}

uint64_t aks_system_key_operate(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = 3758097090LL;
  uint64_t v7 = der_key_op_system_key_operate;
  uint64_t v8 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v8 = 0LL;
  encode_list_add_key(v8, (uint64_t)der_key_op, (uint64_t)v7);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v8))
    && !encode_list_add_number(v8, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v8, (uint64_t)der_key_system_key_operation, a2)
    && !encode_list_dict(v8, &__s, &__n))
  {
    uint64_t v6 = _aks_operation();
  }

  encode_list_free(v8);
  memset_s(v8, 8uLL, 0, 8uLL);
  free(v8);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v6;
}

uint64_t aks_system_key_get_public( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v11 = 3758097090LL;
  size_t v12 = der_key_op_system_key_get_public;
  uint64_t v13 = (void **)calloc(8uLL, 1uLL);
  void *v13 = 0LL;
  encode_list_add_key(v13, (uint64_t)der_key_op, (uint64_t)v12);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v13))
    && !encode_list_add_number(v13, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v13, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v13, &__s, &__n))
  {
    uint64_t v11 = _aks_operation();
    if (!(_DWORD)v11)
    {
      *a5 = 0LL;
      *a6 = 0LL;
    }
  }

  encode_list_free(v13);
  memset_s(v13, 8uLL, 0, 8uLL);
  free(v13);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v11;
}

uint64_t aks_system_key_sign( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v13 = 3758097090LL;
  uint64_t v14 = der_key_op_system_key_sign;
  uint64_t v15 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v15 = 0LL;
  encode_list_add_key(v15, (uint64_t)der_key_op, (uint64_t)v14);
  int __s = 0LL;
  rsize_t __n = 0LL;
  if (!a3 || !encode_list_merge_dict((uint64_t)v15))
  {
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_system_key_type);
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_system_key_generation);
    encode_list_remove_key(v15, (unsigned __int8 *)der_key_data);
    if (!encode_list_add_number(v15, (uint64_t)der_key_system_key_type, a1)
      && !encode_list_add_number(v15, (uint64_t)der_key_system_key_generation, a2)
      && !encode_list_add_data(v15, (uint64_t)der_key_data, a5)
      && !encode_list_dict(v15, &__s, &__n))
    {
      uint64_t v13 = _aks_operation();
      if (!(_DWORD)v13)
      {
        *a7 = 0LL;
        *a8 = 0LL;
      }
    }
  }

  encode_list_free(v15);
  memset_s(v15, 8uLL, 0, 8uLL);
  free(v15);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v13;
}

void aks_dealloc(void *a1, rsize_t __n)
{
}

uint64_t aks_fv_apfs_get_default_disk(char *a1, size_t a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  bzero(&v9, 0x878uLL);
  if (a1)
  {
    if (statfs("/private/var", &v9))
    {
      uint64_t v6 = (FILE *)*MEMORY[0x1895F89E0];
      uint64_t v7 = __error();
      uint64_t v8 = strerror(*v7);
      fprintf( v6,  "%s%s:%s%s%s%s%u:%s%u:%s statfs error: %s\n%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_default_disk",  ":",  33,  "",  0,  "",  v8,  "");
      return 3758097136LL;
    }

    else if (*(_DWORD *)v9.f_fstypename ^ 0x73667061 | v9.f_fstypename[4])
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s skipping: not apfs%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_default_disk",  ":",  34,  "",  0,  "",  "");
      return 3758097112LL;
    }

    else if (strlcpy(a1, v9.f_mntfromname, a2) >= a2)
    {
      return 3758097084LL;
    }

    else
    {
      return 0LL;
    }
  }

  return v4;
}

uint64_t fv_apfs_remove_blob(uint64_t a1, uint64_t a2)
{
  uint64_t result = 3758097090LL;
  if (a1 && a2)
  {
    uint64_t result = APFSVolumeRemoveUnlockRecord();
    if ((_DWORD)result)
    {
      uint64_t v4 = (FILE *)*MEMORY[0x1895F89E0];
      __int128 v5 = __error();
      uint64_t v6 = strerror(*v5);
      fprintf( v4,  "%s%s:%s%s%s%s%u:%s%u:%s APFSVolumeRemoveUnlockRecord: %s%s\n",  "aks",  "",  "",  "",  "fv_apfs_remove_blob",  ":",  49,  "",  0,  "",  v6,  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t fv_apfs_set_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 3758097084LL;
  uint64_t result = 3758097090LL;
  if (a1 && a2 && a3)
  {
    CFDataRef v6 = CFDataCreateWithBytesNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  *(const UInt8 **)a3,  *(void *)(a3 + 8),  (CFAllocatorRef)*MEMORY[0x189604DC8]);
    if (v6)
    {
      CFDataRef v7 = v6;
      if (APFSVolumeSetUnlockRecord())
      {
        uint64_t v8 = (FILE *)*MEMORY[0x1895F89E0];
        statfs v9 = __error();
        uint64_t v10 = strerror(*v9);
        fprintf( v8,  "%s%s:%s%s%s%s%u:%s%u:%s APFSVolumeSetUnlockRecord: %s%s\n",  "aks",  "",  "",  "",  "fv_apfs_set_blob",  ":",  65,  "",  0,  "",  v10,  "");
      }

      else
      {
        uint64_t v4 = 0LL;
      }

      CFRelease(v7);
      return v4;
    }

    else
    {
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_fv_apfs_get_blob_by_uuid(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v3 = 3758097084LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v4 = 3758097090LL;
  *(_OWORD *)buffer = 0u;
  __int128 v17 = 0u;
  if (!a1 || !a3) {
    return v4;
  }
  if (MEMORY[0x18960CC78]) {
    BOOL v6 = MEMORY[0x18960CC90] == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s no apfs fwk%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_blob_by_uuid");
    return 3758097084LL;
  }

  if (APFSVolumeListUUIDsOfUnlockRecords())
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s APFSVolumeListUUIDsOfUnlockRecords failed%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_blob_by_uuid");
    return 3758097084LL;
  }

  CFIndex Count = CFArrayGetCount(0LL);
  if (Count)
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(0LL, v10);
      memset(uu, 0, sizeof(uu));
      if (!CFStringGetCString(ValueAtIndex, buffer, 128LL, 0x8000100u))
      {
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s string fail%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_blob_by_uuid",  ":",  100,  "",  0,  "",  "");
        return v3;
      }

      uuid_parse(buffer, uu);
      if (!uuid_compare(uu, a2)) {
        break;
      }
      if (v9 == ++v10) {
        goto LABEL_16;
      }
    }

    int UnlockRecord = APFSVolumeGetUnlockRecord();
    if (UnlockRecord)
    {
      uint64_t v14 = (FILE *)*MEMORY[0x1895F89E0];
      strerror(UnlockRecord);
      fprintf( v14,  "%s%s:%s%s%s%s%u:%s%u:%s APFSVolumeGetUnlockRecord: %s\n%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_blob_by_uuid",  ":");
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s no kek%s\n",  "aks",  "",  "",  "",  "aks_fv_apfs_get_blob_by_uuid");
    }

    return 3758097136LL;
  }

  else
  {
LABEL_16:
    if (*(void *)(a3 + 8)) {
      return 0LL;
    }
    else {
      return 3758097136LL;
    }
  }

uint64_t fv_apfs_get_blobs(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = 3758097084LL;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  CFIndex Count = 3758097090LL;
  *(_OWORD *)buffer = 0u;
  __int128 v11 = 0u;
  if (!a1 || !a2) {
    return Count;
  }
  if (MEMORY[0x18960CC78]) {
    BOOL v4 = MEMORY[0x18960CC90] == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s no apfs fwk%s\n",  "aks",  "",  "",  "",  "fv_apfs_get_blobs");
    return 3758097084LL;
  }

  if (APFSVolumeListUUIDsOfUnlockRecords())
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s APFSVolumeListUUIDsOfUnlockRecords failed%s\n",  "aks",  "",  "",  "",  "fv_apfs_get_blobs");
    return 3758097084LL;
  }

  CFIndex Count = CFArrayGetCount(0LL);
  if (Count)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(0LL, 0LL);
    memset(uu, 0, sizeof(uu));
    if (CFStringGetCString(ValueAtIndex, buffer, 128LL, 0x8000100u))
    {
      uuid_parse(buffer, uu);
      int UnlockRecord = APFSVolumeGetUnlockRecord();
      if (UnlockRecord)
      {
        uint64_t v8 = (FILE *)*MEMORY[0x1895F89E0];
        strerror(UnlockRecord);
        fprintf( v8,  "%s%s:%s%s%s%s%u:%s%u:%s APFSVolumeGetUnlockRecord: %s\n%s\n",  "aks",  "",  "",  "",  "fv_apfs_get_blobs",  ":");
      }

      else
      {
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s no kek%s\n",  "aks",  "",  "",  "",  "fv_apfs_get_blobs");
      }

      return 3758097136LL;
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s string fail%s\n",  "aks",  "",  "",  "",  "fv_apfs_get_blobs",  ":",  152,  "",  0,  "",  "");
    }

    return v2;
  }

  return Count;
}

uint64_t aks_fv_apfs_get_vek(uint64_t a1, void *a2)
{
  uint64_t v3 = 3758097084LL;
  if (!APFSVolumeGetWVEK())
  {
    size_t Length = CFDataGetLength(0LL);
    a2[1] = Length;
    __int128 v5 = malloc(Length);
    *a2 = v5;
    if (v5)
    {
      BOOL v6 = v5;
      BytePtr = CFDataGetBytePtr(0LL);
      memcpy(v6, BytePtr, a2[1]);
      return 0LL;
    }

    else
    {
      return 3758097085LL;
    }
  }

  return v3;
}

size_t aks_fv_apfs_device_parse(const char *a1, char *a2, size_t a3, char **a4)
{
  if (!strncmp(a1, "/dev/", 5uLL)) {
    uint64_t v8 = 5LL;
  }
  else {
    uint64_t v8 = 0LL;
  }
  CFIndex v9 = &a1[v8];
  if (!strncmp(&a1[v8], "disk", 4uLL))
  {
    *a4 = a2;
  }

  else
  {
    int v10 = strncmp(v9, "rdisk", 5uLL);
    *a4 = a2;
    if (v10) {
      CFIndex v9 = a1;
    }
    else {
      ++v9;
    }
  }

  return strlcpy(a2, v9, a3);
}

const char *fv_apfs_is_special_uuid(const unsigned __int8 *a1)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  memset(v2, 0, sizeof(v2));
  uuid_unparse_upper(a1, v2);
  if (!strcmp("EBC6C064-0000-11AA-AA11-00306543ECAC", v2)) {
    return "personal recovery key";
  }
  if (!strcmp("64C0C6EB-0000-11AA-AA11-00306543ECAC", v2)) {
    return "icloud recovery key";
  }
  if (!strcmp("C064EBC6-0000-11AA-AA11-00306543ECAC", v2)) {
    return "institutional recovery key";
  }
  if (!strcmp("EC1C2AD9-B618-4ED6-BD8D-50F361C27507", v2)) {
    return "icloud user";
  }
  if (!strcmp("2FA31400-BAFF-4DE7-AE2A-C3AA6E1FD340", v2)) {
    return "institutional user";
  }
  if (!strcmp("2457711A-523C-4604-B75A-F48A571D5036", v2)) {
    return "mdm boostrap token";
  }
  if (!strcmp("BF6F8EF2-33A3-408A-A6D3-37EAFC077B07", v2)) {
    return "installer bootstrap user";
  }
  return 0LL;
}

void *aks_create_escrow_blob(rsize_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 >> 16) {
    int v6 = 0;
  }
  else {
    int v6 = (unsigned __int16)a5;
  }
  if (a3 != 32 || !a2 || !a4 || !v6)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s Bad input %d %zd %d %zd%s\n",  "aks",  "",  "",  "",  "aks_create_escrow_blob",  ":",  26LL,  "",  0LL);
    goto LABEL_21;
  }

  uint64_t v7 = ccder_sizeof_raw_octet_string();
  if (__CFADD__(v7, ccder_sizeof_raw_octet_string()))
  {
LABEL_21:
    __int128 v11 = 0LL;
LABEL_22:
    rsize_t v9 = 0LL;
    if (!a1) {
      return v11;
    }
    goto LABEL_16;
  }

  size_t v8 = ccder_sizeof();
  rsize_t v9 = v8;
  if (v8 >= 0x3C01)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s Escrow blob is too big %zd/%llu%s\n",  "aks",  "",  "",  "",  "aks_create_escrow_blob",  ":",  31LL);
    goto LABEL_21;
  }

  int v10 = (char *)calloc(v8, 1uLL);
  __int128 v11 = v10;
  if (!v10) {
    goto LABEL_22;
  }
  __int128 v13 = v10;
  __int128 v14 = &v10[v9];
  if (!ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_tl()
    || v13 != v14)
  {
    memset_s(v11, v9, 0, v9);
    free(v11);
    goto LABEL_21;
  }

  if (a1) {
LABEL_16:
  }
    *a1 = v9;
  return v11;
}

void aks_free_escrow_blob(void **a1, rsize_t __smax)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (v3)
    {
      if (__smax)
      {
        memset_s(v3, __smax, 0, __smax);
        uint64_t v3 = *a1;
      }

      memset_s(v3, __smax, 0, __smax);
      free(*a1);
    }
  }

uint64_t aks_parse_escrow_blob( uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = 1LL;
  if (a1 && a2 >= 0x20)
  {
    *(void *)&__int128 v18 = a1;
    *((void *)&v18 + 1) = a1 + a2;
    if (ccder_blob_decode_range())
    {
      if ((unint64_t)(*((void *)&v18 + 1) - v18 - 15360) < 0xFFFFFFFFFFFFC420LL)
      {
        uint64_t v6 = 3LL;
      }

      else
      {
        unsigned int v17 = 0;
        uint64_t v16 = 0LL;
        unsigned int v15 = 0;
        uint64_t v14 = 0LL;
        der_utils_decode_implicit_raw_octet_string(&v18, 0x8000000000000000LL, &v17, &v16);
        if (v11 && (der_utils_decode_implicit_raw_octet_string(&v18, 0x8000000000000001LL, &v15, &v14), v12))
        {
          uint64_t v6 = 0LL;
          *a3 = v16;
          *a4 = v17;
          *a5 = v14;
          *a6 = v15;
        }

        else
        {
          uint64_t v6 = 0xFFFFFFFFLL;
        }
      }
    }

    else
    {
      uint64_t v6 = 2LL;
    }
  }

  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s escrow blob parse error %d%s\n",  "aks",  "",  "",  "",  "aks_parse_escrow_blob",  ":",  100,  "",  0,  "",  v6,  "");
  return v6;
}

uint64_t aks_get_os_type()
{
  return 5LL;
}

uint64_t attest_verify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bzero(v9, 0x460uLL);
  uint64_t result = aks_attest_context_init(a3, a4, v9);
  if (!(_DWORD)result) {
    return aks_attest_context_verify((uint64_t)v9, a1, a2);
  }
  return result;
}

uint64_t aks_attest_context_init(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 4294967285LL;
  if (a1 && a2 && a3)
  {
    bzero(a3, 0x460uLL);
    *((void *)a3 + 2) = a1;
    *((void *)a3 + 3) = a1 + a2;
    if (ccder_blob_decode_range())
    {
      if ((ccder_blob_decode_uint64() & 1) != 0)
      {
        uint64_t v7 = 0LL;
        *((void *)a3 + 1) = 0LL;
      }

      else
      {
        uint64_t v7 = *((void *)a3 + 1);
      }

      if (v7 == 3)
      {
        return 4294967272LL;
      }

      if (!v7)
      {
        __int128 v8 = *((_OWORD *)a3 + 1);
        if (ccder_blob_decode_range())
        {
          if (ccder_blob_decode_range())
          {
            *((void *)a3 + 4) = v8;
            *((void *)a3 + 5) = 0LL;
            ccder_blob_decode_uint64();
          }
        }

        return 4294967272LL;
      }

      return 4294967284LL;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t aks_attest_context_verify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[1] = *MEMORY[0x1895F89C0];
  uint64_t result = 4294967285LL;
  if (a2 && a3)
  {
    if (!a1 || !*(_BYTE *)a1)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_verify",  ":",  1093,  "",  0,  "",  "");
      return 4294967282LL;
    }

    if (a3 == 65)
    {
      uint64_t v7 = MEMORY[0x186E25BA0](4294967285LL);
    }

    else
    {
      if (a3 != 97) {
        return result;
      }
      uint64_t v7 = MEMORY[0x186E25BAC](4294967285LL);
    }

    uint64_t v8 = v7;
    MEMORY[0x1895F8858]();
    uint64_t v10 = (char *)v12 - v9;
    bzero((char *)v12 - v9, v9);
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11 == 3)
    {
      uint64_t result = verify_simple_request((uint64_t)v10, a1);
      if (!(_DWORD)result) {
        return 0LL;
      }
    }

    else
    {
      if (!v11)
      {
        uint64_t result = verify_certificate_request((uint64_t)v10, a1);
        if ((_DWORD)result) {
          return result;
        }
        return 0LL;
      }

      return 4294967284LL;
    }
  }

  return result;
}

uint64_t attest_get(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, size_t *a5)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  bzero(v11, 0x460uLL);
  uint64_t result = aks_attest_context_init(a1, a2, v11);
  if (!(_DWORD)result) {
    return aks_attest_context_get((uint64_t)v11, a3, a4, a5);
  }
  return result;
}

uint64_t aks_attest_context_get(uint64_t a1, unsigned int a2, void *a3, size_t *a4)
{
  if (a1 && *(_BYTE *)a1)
  {
    if (!*(_BYTE *)(a1 + 1) && (_akslog_filter & 2) != 0) {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s %swarning parsing an unverified attestation%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get",  ":",  866,  "",  0,  "",  "",  "");
    }
    return aks_attest_context_get_internal((void *)a1, a2, a3, a4);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get",  ":",  864,  "",  0,  "",  "");
    return 4294967285LL;
  }

uint64_t aks_get_digest_info(uint64_t a1, uint64_t *a2)
{
  if (ccoid_equal())
  {
    uint64_t v3 = ccsha384_di();
  }

  else if (ccoid_equal())
  {
    uint64_t v3 = ccsha256_di();
  }

  else
  {
    uint64_t v3 = ccsha512_di();
  }

  uint64_t v4 = 0LL;
  *a2 = v3;
  return v4;
}

uint64_t aks_get_pub_key_cp(uint64_t a1, uint64_t *a2)
{
  if (ccoid_equal())
  {
    uint64_t v3 = MEMORY[0x186E25BAC]();
LABEL_5:
    uint64_t v4 = v3;
    uint64_t result = 0LL;
    *a2 = v4;
    return result;
  }

  if (ccoid_equal())
  {
    uint64_t v3 = MEMORY[0x186E25BA0]();
    goto LABEL_5;
  }

  return 4294967272LL;
}

uint64_t aks_attest_context_get_internal(void *a1, unsigned int a2, void *a3, size_t *a4)
{
  uint64_t result = 4294967285LL;
  if (!a3 || !a4) {
    return result;
  }
  if (a2 >= 0x13 || (uint64_t v8 = &param_id_table[4 * a2], *v8 != a2)) {
    abort();
  }
  int v10 = param_id_table[4 * a2 + 1];
  if (v10 == 2)
  {
    if (a2 == 5)
    {
      *a3 = a1[27];
      size_t v12 = a1[28];
LABEL_21:
      *a4 = v12;
      return 0LL;
    }

    if (a2 != 3)
    {
      if (a2 != 1) {
        return 4294967293LL;
      }
      uint64_t v11 = a1[105];
      if (v11)
      {
        *a3 = v11;
        size_t v12 = a1[104];
      }

      else
      {
        *a3 = a1[62];
        size_t v12 = a1[61];
      }

      goto LABEL_21;
    }

    __s1 = 0LL;
    size_t __n = 0LL;
    uint64_t result = _get_param_data((uint64_t)a1, (uint64_t)v8, &__s1, &__n);
    if ((_DWORD)result) {
      return result;
    }
    __int128 v13 = (const void *)a1[43];
    if (v13)
    {
      size_t v14 = __n;
      size_t v15 = a1[44];
    }

    else
    {
      __int128 v13 = (const void *)a1[129];
      if (!v13)
      {
        uint64_t v16 = __s1;
        size_t v14 = __n;
LABEL_26:
        *a3 = v16;
        *a4 = v14;
        return 0LL;
      }

      size_t v14 = __n;
      size_t v15 = a1[130];
    }

    if (v14 > v15) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v16 = __s1;
    if (memcmp(__s1, v13, v14)) {
      return 4294967272LL;
    }
    goto LABEL_26;
  }

  if (v10 != 1) {
    return 4294967286LL;
  }
  uint64_t result = _get_param_data((uint64_t)a1, (uint64_t)v8, a3, a4);
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t aks_attest_context_get_uint64(uint64_t a1, unsigned int a2)
{
  if (a1 && *(_BYTE *)a1)
  {
    if (!*(_BYTE *)(a1 + 1) && (_akslog_filter & 2) != 0) {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s %swarning parsing an unverified attestation%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get_uint64",  ":",  898,  "",  0,  "",  "",  "");
    }
    return aks_attest_context_get_uint64_internal((void *)a1, a2);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get_uint64",  ":",  896,  "",  0,  "",  "");
    return 4294967285LL;
  }

uint64_t aks_attest_context_get_uint64_internal(void *a1, unsigned int a2)
{
  uint64_t v3 = 0LL;
  size_t v4 = 0LL;
  uint64_t result = aks_attest_context_get_internal(a1, a2, &v3, &v4);
  if (!(_DWORD)result) {
    return ccder_blob_decode_uint64() - 1;
  }
  return result;
}

uint64_t aks_attest_context_get_header_version(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967285LL;
  }
  if (a1 && *(_BYTE *)a1)
  {
    uint64_t result = 0LL;
    *a2 = *(void *)(a1 + 8);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get_header_version",  ":",  913,  "",  0,  "",  "");
    return 4294967285LL;
  }

  return result;
}

uint64_t aks_attest_context_get_blob(_BYTE *a1, int a2, void *__dst)
{
  if (!__dst) {
    return 4294967285LL;
  }
  if (a1 && *a1)
  {
    switch(a2)
    {
      case 1:
        size_t v4 = a1 + 88;
        if (*((void *)a1 + 11))
        {
          __int128 v5 = __dst;
          uint64_t v3 = v4;
LABEL_14:
          memcpy(v5, v3, 0x158uLL);
          return 0LL;
        }

        return 4294967293LL;
      case 3:
        if (*((void *)a1 + 97))
        {
          uint64_t v3 = a1 + 776;
          goto LABEL_13;
        }

        return 4294967293LL;
      case 2:
        if (*((void *)a1 + 54))
        {
          uint64_t v3 = a1 + 432;
LABEL_13:
          __int128 v5 = __dst;
          goto LABEL_14;
        }

        return 4294967293LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get_blob",  ":",  928,  "",  0,  "",  "");
  }

  return 4294967285LL;
}

uint64_t aks_attest_context_get_info(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t result = 4294967285LL;
  if (a6 && a2 && a3 && a4 && a5)
  {
    if (a1 && *(_BYTE *)a1)
    {
      uint64_t result = 0LL;
      *a2 = *(void *)(a1 + 32);
      *a3 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 56);
      *a4 = *(void *)(a1 + 48);
      *a5 = *(void *)(a1 + 64);
      *a6 = v8;
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get_info",  ":",  959,  "",  0,  "",  "");
      return 4294967285LL;
    }
  }

  return result;
}

uint64_t verify_certificate_request(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (_verify_ec_attest_blob(a1, (void *)(a2 + 88))
    || *(void *)(a2 + 776) && _verify_ec_attest_blob(a1, (void *)(a2 + 776)))
  {
    return 0xFFFFFFFFLL;
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  unint64_t v16 = 48LL;
  uint64_t v17 = 0LL;
  uint64_t result = _calculate_digest( *(void *)(a2 + 48),  *(void *)(a2 + 136),  (uint64_t (*)(uint64_t, char *, uint64_t))_osk_digest_update,  a2,  (uint64_t)&v18,  &v16);
  if (!(_DWORD)result)
  {
    uint64_t result = aks_get_pub_key_cp(*(void *)(a2 + 136), &v17);
    if (!(_DWORD)result)
    {
      uint64_t v5 = v17;
      MEMORY[0x1895F8858]();
      uint64_t v7 = &v14[-v6];
      bzero(&v14[-v6], v6);
      char v15 = 0;
      uint64_t v8 = *(void *)(a2 + 480);
      if (ccoid_equal())
      {
        *(void *)&__int128 v18 = 0LL;
        if (aks_attest_context_get_uint64_internal((void *)a2, 0x11u)
          || (void)v18 != 1LL
          || !ccoid_equal()
          || *(void *)(a2 + 464)
          || *(void *)(a2 + 472))
        {
          return 0xFFFFFFFFLL;
        }
      }

      else if (ccoid_equal())
      {
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        uint64_t v17 = 64LL;
        uint64_t v9 = *(void *)(a2 + 456);
        if (!*(void *)(a2 + 432)) {
          return 0xFFFFFFFFLL;
        }
        if (*(void *)(a2 + 488) != 32LL) {
          return 0xFFFFFFFFLL;
        }
        if (!*(void *)(a2 + 472)) {
          return 0xFFFFFFFFLL;
        }
        if (*(void *)(a2 + 464) != 64LL) {
          return 0xFFFFFFFFLL;
        }
        if (_calculate_digest( v9,  v8,  (uint64_t (*)(uint64_t, char *, uint64_t))_blob_digest_update,  a2 + 432,  (uint64_t)&v18,  (unint64_t *)&v17)) {
          return 0xFFFFFFFFLL;
        }
        ccsha512_di();
      }

      else
      {
        *(void *)&__int128 v18 = 0LL;
        uint64_t result = aks_get_pub_key_cp(v8, (uint64_t *)&v18);
        if ((_DWORD)result) {
          return result;
        }
        uint64_t v10 = v18;
        MEMORY[0x1895F8858]();
        size_t v12 = &v14[-v11];
        bzero(&v14[-v11], v11);
        if (MEMORY[0x186E25BD0](v10, *(void *)(a2 + 488), *(void *)(a2 + 496), v12)
          || _verify_ec_attest_blob((uint64_t)v12, (void *)(a2 + 432)))
        {
          return 0xFFFFFFFFLL;
        }
      }

      if (!*(void *)(a2 + 776)
        || (size_t v13 = *(void *)(a2 + 832), v13 == *(void *)(a2 + 488))
        && !memcmp(*(const void **)(a2 + 840), *(const void **)(a2 + 496), v13))
      {
        if ((*(_DWORD *)(a2 + 424) == 1936941921 || *(_DWORD *)(a2 + 424) == 1633907571)
          && (*(_BYTE *)(a2 + 160) & 0x40) != 0)
        {
          uint64_t result = 0LL;
          *(_BYTE *)(a2 + 1) = 1;
          return result;
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t verify_simple_request(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  uint64_t v4 = ccsha256_di();
  MEMORY[0x1895F8858]();
  size_t v6 = (char *)&v20 - v5;
  bzero((char *)&v20 - v5, v7);
  ccdigest_init();
  uint64_t v8 = 0LL;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  do
  {
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    if (ccder_blob_decode_range())
    {
      ccdigest_update();
      uint64_t v9 = v20;
      uint64_t v10 = v21;
    }

    ++v8;
  }

  while (v8 != 32);
  if (v9 != v10) {
    return 0xFFFFFFFFLL;
  }
  if (*(void *)(a2 + 56) != 32LL) {
    return 4294967290LL;
  }
  (*(void (**)(uint64_t, char *, __int128 *))(v4 + 56))(v4, v6, &v24);
  cc_clear();
  size_t v11 = *(uint64_t **)(a2 + 64);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v15 = v11[2];
  uint64_t v14 = v11[3];
  BOOL v16 = (void)v24 == v12 && *((void *)&v24 + 1) == v13;
  BOOL v17 = v16 && (void)v25 == v15;
  if (!v17 || *((void *)&v25 + 1) != v14) {
    return 4294967290LL;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(a2 + 1) = 1;
  return result;
}

uint64_t aks_attest_context_get_sealed_hash(_BYTE *a1, void *a2, uint64_t a3)
{
  size_t v15 = 0LL;
  size_t v16 = 0LL;
  uint64_t result = 4294967285LL;
  if (a2 && a3)
  {
    if (a1 && *a1)
    {
      uint64_t result = aks_attest_context_get((uint64_t)a1, 7u, &v15, &v16);
      if (!(_DWORD)result)
      {
        size_t v19 = v15;
        size_t v20 = v15 + v16;
        __int128 v18 = 0uLL;
        unint64_t v17 = 0LL;
        if (ccder_blob_decode_range())
        {
          while (1)
          {
            if (v19) {
              BOOL v7 = v19 == v20;
            }
            else {
              BOOL v7 = 1;
            }
            if (v7) {
              return 4294967293LL;
            }
            if (v19 > v20)
            {
              fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s incorrect attestation data%s\n",  "aks",  "",  "",  "",  "_find_sealed_data_hash",  ":",  1163,  "",  0,  "",  "");
              return 4294967272LL;
            }

            uint64_t v24 = 0LL;
            __int128 v23 = v18;
            uint64_t v21 = 0LL;
            uint64_t v22 = 0LL;
            __int128 v18 = v23;
            if (v24) {
              break;
            }
            int v8 = ccder_blob_decode_tl();
            uint64_t result = 0xFFFFFFFFLL;
            if (!v8 || v17 < 0x56) {
              return result;
            }
            uint64_t v9 = v18;
            if (*(void *)v18 == *a2 && *(void *)(v18 + 8) == a2[1])
            {
              uint64_t result = 0LL;
              __int128 v11 = *(_OWORD *)(v18 + 16);
              *(_OWORD *)a3 = *(_OWORD *)v18;
              *(_OWORD *)(a3 + 16) = v11;
              __int128 v12 = *(_OWORD *)(v9 + 32);
              __int128 v13 = *(_OWORD *)(v9 + 48);
              __int128 v14 = *(_OWORD *)(v9 + 64);
              *(void *)(a3 + 78) = *(void *)(v9 + 78);
              *(_OWORD *)(a3 + 48) = v13;
              *(_OWORD *)(a3 + 64) = v14;
              *(_OWORD *)(a3 + 32) = v12;
              return result;
            }
          }

          fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s version mis-match during load%s\n",  "aks",  "",  "",  "",  "_find_sealed_data_hash",  ":",  1170,  "",  0,  "",  "");
        }

        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_get_sealed_hash",  ":",  1196,  "",  0,  "",  "");
      return 4294967285LL;
    }
  }

  return result;
}

uint64_t aks_validate_certificate( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  __int128 v28 = 0LL;
  size_t v29 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  memset(v24, 0, sizeof(v24));
  uint64_t v23 = 0LL;
  uint64_t result = 4294967285LL;
  if (!a1 || !a2) {
    return result;
  }
  __int128 v36 = 0uLL;
  __int128 v37 = 0uLL;
  __int128 v35 = 0uLL;
  if (v23 != 2) {
    return 4294967285LL;
  }
  unint64_t v12 = CTGetBAASubCAType(v36, *((uint64_t *)&v36 + 1));
  uint64_t result = 4294967272LL;
  if (v12 <= 4 && ((1LL << v12) & 0x16) != 0)
  {
    int v13 = CTEvaluateBAA(v12, a1, a2, 0LL, 0LL, &v28, &v29, &v26, &v27, (uint64_t)v24);
    if (v13)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s error: CTEvaluateBAA returned %x%s\n",  "aks",  "",  "",  "",  "aks_validate_certificate",  ":",  1738,  "",  0,  "",  v13,  "");
      return 4294967274LL;
    }

    uint64_t result = 4294967286LL;
    if (v28)
    {
      if (v29)
      {
        uint64_t v22 = 0LL;
        if (!get_oid_property_integer(5u, 1u, v35, *((uint64_t *)&v35 + 1), &v22))
        {
          __int128 v14 = (v22 & 0x1F000000) != 0 ? "ssca" : "acss";
          __int128 v15 = v35;
          exention_prop_by_id = _get_exention_prop_by_id(6u, 6u);
          uint64_t v33 = 0LL;
          uint64_t v34 = 0LL;
          uint64_t v32 = 0LL;
          if (!exention_prop_by_id[4]
            && !_get_oid_property_value( 6u,  *((void *)exention_prop_by_id + 1),  v15,  *((uint64_t *)&v15 + 1),  (unint64_t *)&v33,  &v34))
          {
            if (v33)
            {
              __int128 v30 = v33;
              __int128 v31 = (char *)v33 + v34;
              if ((ccder_blob_decode_tl() & 1) != 0)
              {
                if (v32 == 4 && *(_DWORD *)v14 == *v30)
                {
                  uint64_t v21 = 0LL;
                  if (!get_oid_property_integer(6u, 2u, v35, *((uint64_t *)&v35 + 1), &v21))
                  {
                    if (v21 == 1)
                    {
                      uint64_t v20 = 0LL;
                      if (!get_oid_property_integer(6u, 8u, v35, *((uint64_t *)&v35 + 1), &v20))
                      {
                        if (v20 == 6)
                        {
                          uint64_t result = 0LL;
                          if (a6 && a7)
                          {
                            unint64_t v17 = calloc(v29, 1uLL);
                            if (v17)
                            {
                              *a6 = v17;
                              __int128 v18 = v28;
                              size_t v19 = v29;
                              *a7 = v29;
                              memcpy(v17, v18, v19);
                              return 0LL;
                            }

                            else
                            {
                              return 4294967279LL;
                            }
                          }

                          return result;
                        }

                        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s error: incorrect key type%s\n",  "aks",  "",  "",  "",  "aks_validate_certificate");
                      }
                    }

                    else
                    {
                      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s error: not attestion only key%s\n",  "aks",  "",  "",  "",  "aks_validate_certificate");
                    }
                  }
                }

                else
                {
                  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s error: invalid namespace, expected ssca%s\n",  "aks",  "",  "",  "",  "aks_validate_certificate");
                }
              }
            }
          }
        }

        return 4294967286LL;
      }
    }
  }

  return result;
}

uint64_t get_oid_property_integer( unsigned int a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  exention_prop_by_id = _get_exention_prop_by_id(a1, a2);
  size_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v10 = exention_prop_by_id;
  if (_get_oid_property_value( a1,  *((void *)exention_prop_by_id + 1),  a3,  a4,  (unint64_t *)&v19,  &v20)
    || v19 == 0LL)
  {
    return 0xFFFFFFFFLL;
  }

  unint64_t v17 = (unsigned __int8 *)v19;
  __int128 v18 = (unsigned __int8 *)&v19[v20];
  int v12 = ccder_blob_decode_tl();
  uint64_t result = 0xFFFFFFFFLL;
  if (v12)
  {
    __int128 v14 = v17;
    if (v10[4] == 1) {
      uint64_t v15 = (uint64_t)(char)*v17 >> 7;
    }
    else {
      uint64_t v15 = 0LL;
    }
    while (v14 != v18)
    {
      unsigned int v16 = *v14++;
      uint64_t v15 = v16 | (unint64_t)(v15 << 8);
    }

    uint64_t result = 0LL;
    *a5 = v15;
  }

  return result;
}

uint64_t aks_attest_context_dump(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  memset(v5, 0, sizeof(v5));
  unint64_t v4 = 64LL;
  if (!a1 || !*(_BYTE *)a1)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s context not initialized%s\n",  "aks",  "",  "",  "",  "aks_attest_context_dump",  ":",  1784,  "",  0,  "",  "");
    return 4294967285LL;
  }

  uint64_t v2 = (FILE **)MEMORY[0x1895F89E0];
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s dumping attestation info:%s\n",  "aks",  "",  "",  "",  "aks_attest_context_dump",  ":",  1786,  "",  0,  "",  "");
  if (*(void *)(a1 + 88))
  {
    uint64_t result = _calculate_digest( *(void *)(a1 + 48),  *(void *)(a1 + 136),  (uint64_t (*)(uint64_t, char *, uint64_t))_osk_digest_update,  a1,  (uint64_t)v5,  &v4);
    if ((_DWORD)result) {
      return result;
    }
    dump_bytes_internal("osk pub", *(void *)(a1 + 152), *(void *)(a1 + 144));
    dump_bytes_internal("request digest", (uint64_t)v5, v4);
    dump_bytes_internal("request sig", *(void *)(a1 + 128), *(void *)(a1 + 120));
    unint64_t v4 = 64LL;
    uint64_t result = _calculate_digest( *(void *)(a1 + 112),  *(void *)(a1 + 136),  (uint64_t (*)(uint64_t, char *, uint64_t))_blob_digest_update,  a1 + 88,  (uint64_t)v5,  &v4);
    if ((_DWORD)result) {
      return result;
    }
    dump_bytes_internal("osk digest", (uint64_t)v5, v4);
  }

  else
  {
    fprintf( *v2,  "%s%s:%s%s%s%s%u:%s%u:%s \x1B[38;5;112mno osk detected\x1B[0m%s\n",
      "aks",
      "",
      "",
      "",
      "aks_attest_context_dump",
      ":",
      1797,
      "",
      0,
      "",
      "");
  }

  dump_bytes_internal("osk sig", *(void *)(a1 + 128), *(void *)(a1 + 120));
  if (*(void *)(a1 + 432))
  {
    unint64_t v4 = 64LL;
    dump_bytes_internal("self pub", *(void *)(a1 + 496), *(void *)(a1 + 488));
    if (*(void *)(a1 + 472))
    {
      uint64_t result = _calculate_digest( *(void *)(a1 + 456),  *(void *)(a1 + 480),  (uint64_t (*)(uint64_t, char *, uint64_t))_blob_digest_update,  a1 + 432,  (uint64_t)v5,  &v4);
      if ((_DWORD)result) {
        return result;
      }
      dump_bytes_internal("self digest", (uint64_t)v5, v4);
      dump_bytes_internal("self sig", *(void *)(a1 + 472), *(void *)(a1 + 464));
    }

    else
    {
      fprintf(*v2, "%s%s:%s%s%s%s%u:%s%u:%s self has no sig%s\n", "aks", "", "", "", "aks_attest_context_dump");
    }
  }

  else
  {
    fprintf( *v2,  "%s%s:%s%s%s%s%u:%s%u:%s \x1B[38;5;112mno self detected\x1B[0m%s\n",
      "aks",
      "",
      "",
      "",
      "aks_attest_context_dump");
  }

  if (*(void *)(a1 + 776))
  {
    unint64_t v4 = 64LL;
    uint64_t result = _calculate_digest( *(void *)(a1 + 800),  *(void *)(a1 + 824),  (uint64_t (*)(uint64_t, char *, uint64_t))_blob_digest_update,  a1 + 776,  (uint64_t)v5,  &v4);
    if ((_DWORD)result) {
      return result;
    }
    dump_bytes_internal("aa digest", (uint64_t)v5, v4);
    dump_bytes_internal("aa sig", *(void *)(a1 + 816), *(void *)(a1 + 808));
  }

  return 0LL;
}

uint64_t _calculate_digest( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, unint64_t *a6)
{
  v25[1] = *MEMORY[0x1895F89C0];
  uint64_t v24 = 0LL;
  v25[0] = 0LL;
  uint64_t v12 = ccsha384_di();
  uint64_t result = aks_get_digest_info(a1, v25);
  if (!(_DWORD)result)
  {
    uint64_t v14 = v25[0];
    if (v14 == ccsha256_di())
    {
      unint64_t v15 = 32LL;
    }

    else if (v14 == ccsha384_di())
    {
      unint64_t v15 = 48LL;
    }

    else
    {
      if (v14 != ccsha512_di()) {
        return 4294967272LL;
      }
      unint64_t v15 = 64LL;
    }

    if (*a6 < v15) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v16 = v14;
    if ((ccoid_equal() & 1) == 0)
    {
      uint64_t result = aks_get_pub_key_cp(a2, &v24);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v17 = v24;
      uint64_t v16 = v12;
      if (v17 == MEMORY[0x186E25BA0]()) {
        uint64_t v16 = ccsha256_di();
      }
    }

    MEMORY[0x1895F8858]();
    size_t v19 = (char *)&v23 - v18;
    bzero((char *)&v23 - v18, v20);
    ccdigest_init();
    uint64_t result = a3(v16, v19, a4);
    if (!(_DWORD)result)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 56))(v16, v19, a5);
      cc_clear();
      if (v16 == ccsha256_di() && v14 != ccsha256_di())
      {
        __int128 v21 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)(a5 + 16) = *(_OWORD *)a5;
        *(_OWORD *)(a5 + 32) = v21;
        *(void *)a5 = 0LL;
        *(void *)(a5 + 8) = 0LL;
      }

      if (v16 == ccsha384_di() && v14 != ccsha384_di())
      {
        __int128 v22 = *(_OWORD *)(a5 + 32);
        *(_OWORD *)a5 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)(a5 + 16) = v22;
        *(void *)(a5 + 32) = 0LL;
        *(void *)(a5 + 40) = 0LL;
      }

      uint64_t result = 0LL;
      *a6 = v15;
    }
  }

  return result;
}

uint64_t _osk_digest_update(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3[3];
  if (!v3) {
    return 4294967285LL;
  }
  unint64_t v4 = a3[4];
  if (!v4) {
    return 4294967285LL;
  }
  unint64_t v5 = a3[5];
  if (v4 >= v3 || v5 == 0) {
    return 4294967285LL;
  }
  if (v5 >= v3 || v5 <= v4) {
    return 4294967285LL;
  }
  ccdigest_update();
  return 0LL;
}

uint64_t _blob_digest_update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = 0LL; i != 256; i += 16LL)
  {
    if (*(void *)(a3 + i + 80) && *(void *)(a3 + i + 88)) {
      ccdigest_update();
    }
  }

  return 0LL;
}

uint64_t _parse_attest_blob(__int128 *a1, char a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  __int128 v6 = *a1;
  if (ccder_blob_decode_uint64()
    && ccder_blob_decode_range()
    && ccder_blob_decode_oid())
  {
    if (ccoid_equal())
    {
      if ((a2 & 1) != 0) {
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      uint64_t v4 = v7 + 1;
      *((void *)a1 + 4) = v8 - (v7 + 1);
      *((void *)a1 + 5) = v4;
    }

    if (ccder_blob_decode_range()
      && ccder_blob_decode_range()
      && ccder_blob_decode_oid()
      && ccder_blob_decode_range()
      && ccder_blob_decode_oid())
    {
      ccder_blob_decode_range();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t _parse_digest_value(void *a1, uint64_t a2, unsigned int a3)
{
  if (digest_pos_table[4 * a3] != a3) {
    abort();
  }
  uint64_t v4 = a3;
  if ((digest_pos_table[4 * a3 + 1] & *(_DWORD *)(a2 + 72)) == 0) {
    return 1LL;
  }
  uint64_t result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    uint64_t result = ccder_blob_decode_tl();
    if ((_DWORD)result)
    {
      uint64_t v7 = a2 + 16 * v4;
      *(void *)(v7 + 80) = 0LL;
      *(void *)(v7 + 88) = 0LL;
      return !*a1;
    }
  }

  return result;
}

uint64_t _get_param_data(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v12 = v4;
  unint64_t v13 = v5;
  if (v4) {
    BOOL v6 = v4 == v5;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    while (1)
    {
      if (v4 > v5)
      {
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s incorrect attestation data%s\n",  "aks",  "",  "",  "",  "_get_param_data",  ":",  758,  "",  0,  "",  "");
        return 4294967272LL;
      }

      if (!*(void *)(a2 + 8)) {
        break;
      }
      unint64_t v4 = v12;
      uint64_t result = 4294967293LL;
      if (v12)
      {
        unint64_t v5 = v13;
        if (v12 != v13) {
          continue;
        }
      }

      return result;
    }

    uint64_t v11 = v12;
    if (v11)
    {
      uint64_t result = 0LL;
      *a3 = v11;
      *a4 = 0LL;
      return result;
    }
  }

  return 4294967293LL;
}

uint64_t _verify_ec_attest_blob(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(v7, 0, sizeof(v7));
  unint64_t v6 = 48LL;
  uint64_t v3 = a2[6];
  uint64_t v4 = a2[3];
  if (!*a2 || !a2[5] || !a2[4]) {
    return 4294967272LL;
  }
  uint64_t result = _calculate_digest( v4,  v3,  (uint64_t (*)(uint64_t, char *, uint64_t))_blob_digest_update,  (uint64_t)a2,  (uint64_t)v7,  &v6);
  if (!(_DWORD)result)
  {
    ccec_verify();
    return 0xFFFFFFFFLL;
  }

  return result;
}

_DWORD *_get_exention_prop_by_id(unsigned int a1, unsigned int a2)
{
  if (*((_DWORD *)&cert_oids_table + 12 * a1) != a1
    || *((void *)&cert_oids_table + 6 * a1 + 4) <= (unint64_t)a2
    || (uint64_t result = (_DWORD *)(*((void *)&cert_oids_table + 6 * a1 + 3) + 32LL * a2), *result != a2))
  {
    abort();
  }

  return result;
}

uint64_t _get_oid_property_value( unsigned int a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, void *a6)
{
  if (*((_DWORD *)&cert_oids_table + 12 * a1) != a1) {
    abort();
  }
  uint64_t v11 = *((void *)&cert_oids_table + 6 * a1 + 1);
  uint64_t v12 = MEMORY[0x186E25B1C](v11);
  unint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  if (CTParseExtensionValue(a3, a4, (const void *)(v11 + 2), v12 - 2, &v16, &v17))
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s extension error %s%s\n",  "aks",  "",  "",  "",  "_get_oid_property_value",  ":",  1619,  "",  0,  "",  "",  "");
  }

  else
  {
    unint64_t v14 = v16;
    unint64_t v15 = v16 + v17;
    if (ccder_blob_decode_range() && v14 < v15)
    {
      while (ccder_blob_decode_tag() && ccder_blob_decode_len())
      {
        if (!a2)
        {
          if (!v14) {
            return 0xFFFFFFFFLL;
          }
          uint64_t result = 0LL;
          *a5 = v14;
          *a6 = 0LL;
          return result;
        }

        if (v14 >= v15) {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t _data_protection_enabled(const char *a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  bzero(&v3, 0x878uLL);
  if (!statfs(a1, &v3) && (v3.f_flags & 0x80) != 0) {
    return 1LL;
  }
  fprintf((FILE *)*MEMORY[0x1895F89D0], "mount point (%s) does not support Data Protection", a1);
  return 0LL;
}

uint64_t aks_migrate_user_fs(const char *a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(v8, 0x400uLL);
  uint64_t v4 = 0xFFFFFFFFLL;
  int v7 = -1;
  if (realpath_DARWIN_EXTSN(a1, v8))
  {
    if (aks_migrate_fs_required(v8, a2, ".aks_migrate", &v7)
      && ((uint64_t v5 = aks_migrate_fs_with_map(v8, a2, (uint64_t)&userPathMap, 72LL), (_DWORD)v5)
       || (uint64_t v5 = _aks_version_commit(v7, 49), (_DWORD)v5)))
    {
      return v5;
    }

    else
    {
      return 0LL;
    }
  }

  return v4;
}

uint64_t aks_migrate_fs_required(const char *a1, char a2, const char *a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x400uLL);
  if ((a2 & 2) != 0 || (uint64_t result = _data_protection_enabled(a1), (_DWORD)result))
  {
    snprintf(__str, 0x400uLL, "%s/%s", a1, a3);
    int v9 = open_dprotected_np(__str, 514, 4, 0, 420LL);
    if (v9 != -1)
    {
      int v10 = v9;
      if ((a2 & 2) != 0 || !_aks_version_check(v9, 0x31u))
      {
        *a4 = v10;
        return 1LL;
      }

      close(v10);
    }

    return 0LL;
  }

  return result;
}

uint64_t aks_migrate_fs_with_map(char *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 22LL;
  }
  char v6 = a2;
  int v8 = a2 | 1;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 0x40000000LL;
  void v12[2] = ___migrate_user_partition_block_invoke;
  v12[3] = &__block_descriptor_tmp_22;
  v12[4] = strlen(a1);
  v12[5] = a4;
  v12[6] = a3;
  int v13 = v8;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 0x40000000LL;
  __int128 v10[2] = ___migrate_user_partition_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_23;
  int v11 = v8;
  _iterate_path(a1, (uint64_t)v12, (uint64_t)v10);
  if ((v6 & 1) != 0) {
    fwrite("Skipping migration of Applications\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1895F89E0]);
  }
  return 0LL;
}

uint64_t aks_migrate_fs(const char *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bzero(v9, 0x400uLL);
  bzero(__str, 0x400uLL);
  uint64_t v4 = 0xFFFFFFFFLL;
  int v7 = -1;
  if (realpath_DARWIN_EXTSN(a1, v9))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v9);
    if (aks_migrate_fs_required(v9, a2, "root/.aks_migrate", &v7)
      && ((uint64_t v5 = aks_migrate_fs_with_map(v9, a2, (uint64_t)&sharedPathMap, 35LL), (_DWORD)v5)
       || (aks_fs_supports_enhanced_apfs() & 1) == 0
       && (uint64_t v5 = aks_migrate_fs_with_map(__str, a2, (uint64_t)&userPathMap, 72LL), (_DWORD)v5)
       || (uint64_t v5 = _aks_version_commit(v7, 49), (_DWORD)v5)))
    {
      return v5;
    }

    else
    {
      return 0LL;
    }
  }

  return v4;
}

uint64_t aks_bootstrap_shared_fs(const char *a1, char a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 22LL;
  }
  bzero(v5, 0x400uLL);
  if (!realpath_DARWIN_EXTSN(a1, v5)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = aks_bootstrap_fs_required(v5, "root/.bootstrapped", a2);
  if (!(_DWORD)result) {
    return result;
  }
  aks_bootstrap_fs_done(v5, "root/.bootstrapped");
  return 0LL;
}

uint64_t aks_bootstrap_fs_required(const char *a1, const char *a2, char a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t result = _data_protection_enabled(a1);
  if ((_DWORD)result)
  {
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "%s/%s", a1, a2);
    if ((a3 & 1) != 0) {
      fprintf((FILE *)*MEMORY[0x1895F89E0], "checking path: %s\n", __str);
    }
    int v7 = access(__str, 4) | a3 & 2;
    uint64_t result = v7 != 0;
    if ((a3 & 1) != 0 && !v7)
    {
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%s has already been bootstrapped\n", a1);
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_bootstrap_fs_with_map(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  char v33 = v2;
  gid_t v34 = v3;
  uid_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = (const char *)v1;
  uint64_t v40 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x400uLL);
  uint64_t v11 = 0LL;
  if (v7)
  {
    uint64_t v12 = (unsigned __int16 *)(v9 + 20);
    int v13 = (FILE **)MEMORY[0x1895F89D0];
    do
    {
      if ((*(_BYTE *)(v12 - 2) & 8) == 0)
      {
        memset(&v35, 0, sizeof(v35));
        snprintf(__str, 0x400uLL, "%s%s", v10, *(const char **)(v12 - 10));
        if (!stat(__str, &v35)) {
          goto LABEL_19;
        }
        if (mkpath_np(__str, *v12))
        {
          unint64_t v14 = *v13;
          unint64_t v15 = __error();
          strerror(*v15);
          fprintf(v14, "failed to create: %s (%s)\n");
        }

        else
        {
          unsigned int v16 = *v12;
          if (v16 >= 0x200 && chmod(__str, v16))
          {
            uint64_t v17 = *v13;
            uint64_t v18 = __error();
            size_t v19 = strerror(*v18);
            fprintf(v17, "failed to change permissions on: %s (%s)\n", __str, v19);
          }

          size_t v20 = *(const char **)(v12 + 2);
          uid_t pw_uid = v5;
          if (v20)
          {
            bzero(v39, 0x1000uLL);
            __int128 v37 = 0LL;
            memset(&v36, 0, sizeof(v36));
            if (getpwnam_r(v20, &v36, v39, 0x1000uLL, &v37))
            {
              uid_t pw_uid = v5;
              if (*__error())
              {
                uint64_t v27 = *v13;
                __int128 v28 = __error();
                strerror(*v28);
                fprintf(v27, "failed to get uid for user '%s'(%s)\n");
                goto LABEL_25;
              }
            }

            else
            {
              uid_t pw_uid = v37->pw_uid;
            }
          }

          __int128 v22 = *(const char **)(v12 + 6);
          gid_t v23 = v34;
          if (!v22) {
            goto LABEL_16;
          }
          bzero(v39, 0x1000uLL);
          memset(&v36, 0, 32);
          __int128 v37 = 0LL;
          if (!getgrnam_r(v22, (group *)&v36, v39, 0x1000uLL, (group **)&v37))
          {
            gid_t v23 = v37->pw_uid;
LABEL_16:
            if (chown(__str, pw_uid, v23))
            {
              uint64_t v24 = *v13;
              uint64_t v25 = __error();
              uint64_t v26 = strerror(*v25);
              fprintf(v24, "failed to change ownership on: %s (%s)\n", __str, v26);
            }

            stat(__str, &v35);
LABEL_19:
            if ((v35.st_mode & 0xF000) == 0x4000)
            {
              if ((*(_BYTE *)(v12 - 2) & 1) != 0)
              {
                else {
                  uint64_t v11 = v11;
                }
              }
            }

            else
            {
              fprintf(*v13, "failed %s is not a directory\n");
            }

            goto LABEL_25;
          }

          size_t v29 = __error();
          gid_t v23 = v34;
          if (!*v29) {
            goto LABEL_16;
          }
          __int128 v30 = *v13;
          __int128 v31 = __error();
          strerror(*v31);
          fprintf(v30, "failed to get gid for group '%s' (%s)\n");
        }
      }

LABEL_25:
      v12 += 24;
      --v7;
    }

    while (v7);
  }

  return v11;
}

uint64_t aks_bootstrap_fs_done(const char *a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s/%s", a1, a2);
  int v4 = open(__str, 513, 420LL);
  if (v4 != -1) {
    return close(v4);
  }
  uint64_t v6 = (FILE *)*MEMORY[0x1895F89D0];
  uint64_t v7 = __error();
  uint64_t v8 = strerror(*v7);
  return fprintf(v6, "Could not create marker file: %s (%s)\n", __str, v8);
}

uint64_t aks_bootstrap_user_fs(const char *a1, char a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 22LL;
  }
  bzero(v5, 0x400uLL);
  if (!realpath_DARWIN_EXTSN(a1, v5)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = aks_bootstrap_fs_required(v5, ".bootstrapped", a2);
  if (!(_DWORD)result) {
    return result;
  }
  aks_bootstrap_fs_done(v5, ".bootstrapped");
  return 0LL;
}

uint64_t aks_bootstrap_fs(const char *a1, char a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 22LL;
  }
  bzero(v6, 0x400uLL);
  if (!realpath_DARWIN_EXTSN(a1, v6)) {
    return 0xFFFFFFFFLL;
  }
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s/mobile", v6);
  uint64_t result = aks_bootstrap_fs_required(v6, "root/.bootstrapped", a2);
  if (!(_DWORD)result) {
    return result;
  }
  if (aks_bootstrap_fs_with_map((uint64_t)v6)
    || (aks_fs_supports_enhanced_apfs() & 1) == 0 && aks_bootstrap_fs_with_map((uint64_t)__str))
  {
    return 0xFFFFFFFFLL;
  }

  aks_bootstrap_fs_done(v6, "root/.bootstrapped");
  return 0LL;
}

uint64_t aks_setupallowlist_user_fs(const char *a1, int a2)
{
  int v13 = -1;
  int v4 = fopen("/var/logs/AKSSetup.log", "w+");
  uid_t v5 = v4;
  uint64_t v6 = (uint64_t *)MEMORY[0x1895F89E0];
  uint64_t v7 = *MEMORY[0x1895F89E0];
  if (v4) {
    uint64_t v7 = (uint64_t)v4;
  }
  __logfd = v7;
  aks_bootstrap_user_fs(a1, a2 | 3);
  if (aks_setupallowlist_fs_required(a1, a2, ".aks_allowlist", &v13))
  {
    aks_setupallowlist_fs_with_map(a1, a2, (uint64_t)&userPathMap, 72LL);
    int v8 = v13;
    uint64_t v9 = (FILE *)(__logfd ? __logfd : *v6);
    fprintf(v9, "%s has been allow listed with version:%c\n", a1, 52LL);
    uint64_t v10 = _aks_version_commit(v8, 52);
    if ((_DWORD)v10)
    {
      uint64_t v11 = v10;
      if (!v5) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  uint64_t v11 = 0LL;
  if (v5) {
LABEL_9:
  }
    fclose(v5);
LABEL_10:
  __logfd = *v6;
  return v11;
}

uint64_t aks_setupallowlist_fs_required(const char *a1, char a2, const char *a3, int *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s/%s", a1, a3);
  int v8 = open_dprotected_np(__str, 514, 4, 0, 420LL);
  if (v8 == -1) {
    return 0LL;
  }
  int v9 = v8;
  if ((a2 & 2) == 0)
  {
    if (!_aks_version_check(v8, 0x34u))
    {
      if (__logfd) {
        uint64_t v10 = (FILE *)__logfd;
      }
      else {
        uint64_t v10 = (FILE *)*MEMORY[0x1895F89E0];
      }
      fprintf(v10, "%s has different allowlist needed=%c\n", a1, 52LL);
      goto LABEL_8;
    }

    close(v9);
    return 0LL;
  }

void aks_setupallowlist_fs_with_map(const char *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x401uLL);
  if (a4)
  {
    int v8 = (_DWORD *)(a3 + 16);
    int v9 = (FILE **)MEMORY[0x1895F89E0];
    while (1)
    {
      snprintf(__str, 0x401uLL, "%s%s", a1, *((const char **)v8 - 2));
      if ((*v8 & 2) != 0) {
        break;
      }
      if (__logfd) {
        uint64_t v10 = (FILE *)__logfd;
      }
      else {
        uint64_t v10 = *v9;
      }
      if ((*v8 & 4) == 0) {
        goto LABEL_12;
      }
      fprintf(v10, "Traversing hierarchy: %s\n", __str);
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 0x40000000LL;
      _BYTE v11[2] = __setup_allowlist_dirpath_block_invoke;
      v11[3] = &__block_descriptor_tmp_36;
      int v12 = a2 | 3;
      _iterate_path(__str, (uint64_t)v11, 0LL);
LABEL_13:
      v8 += 12;
      if (!--a4) {
        return;
      }
    }

    if (__logfd) {
      uint64_t v10 = (FILE *)__logfd;
    }
    else {
      uint64_t v10 = *v9;
    }
LABEL_12:
    fprintf(v10, "SKIPPED: %s\n", __str);
    goto LABEL_13;
  }

uint64_t aks_setupallowlist_fs(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  int v3 = v2;
  int v4 = (const char *)v1;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v14 = -1;
  bzero(__new, 0x400uLL);
  bzero(__old, 0x400uLL);
  bzero(v16, 0x400uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s/mobile", v4);
  snprintf(v16, 0x400uLL, "%s/tmp", v4);
  uid_t v5 = fopen("/var/logs/AKSSetup.log", "w+");
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t *)MEMORY[0x1895F89E0];
  uint64_t v8 = *MEMORY[0x1895F89E0];
  if (v5) {
    uint64_t v8 = (uint64_t)v5;
  }
  __logfd = v8;
  aks_bootstrap_fs(v4, v3 | 3);
  snprintf(__old, 0x400uLL, "%s/root/.aks_whitelist", v4);
  snprintf(__new, 0x400uLL, "%s/root/.aks_allowlist", v4);
  rename(__old, __new);
  if (aks_setupallowlist_fs_required(v4, v3, "root/.aks_allowlist", &v14))
  {
    aks_setupallowlist_fs_with_map(v4, v3, (uint64_t)&sharedPathMap, 35LL);
    if ((aks_fs_supports_enhanced_apfs() & 1) == 0) {
      aks_setupallowlist_fs_with_map(__str, v3, (uint64_t)&userPathMap, 72LL);
    }
    int v9 = v14;
    uint64_t v10 = (FILE *)(__logfd ? __logfd : *v7);
    fprintf(v10, "%s has been allow listed with version:%c\n", v4, 52LL);
    uint64_t v11 = _aks_version_commit(v9, 52);
    if ((_DWORD)v11)
    {
      uint64_t v12 = v11;
      if (!v6) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }

  uint64_t v12 = 0LL;
  if (v6) {
LABEL_13:
  }
    fclose(v6);
LABEL_14:
  __logfd = *v7;
  return v12;
}

uint64_t _set_path_class(const char *a1, int a2, int a3, char a4)
{
  uint64_t v16 = 0LL;
  __int128 v15 = xmmword_183D0A798;
  uint64_t v14 = 0LL;
  if (getattrlist(a1, &v15, &v14, 8uLL, 0)) {
    return *__error();
  }
  if (HIDWORD(v14) == a3 || a2 != -1 && HIDWORD(v14) != a2) {
    return 0LL;
  }
  if (a2 == -1)
  {
    if ((a4 & 1) != 0) {
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%s set %i\n");
    }
  }

  else if ((a4 & 1) != 0)
  {
    fprintf((FILE *)*MEMORY[0x1895F89E0], "%s update %i -> %i\n");
  }

  int v13 = a3;
  if (!setattrlist(a1, &v15, &v13, 4uLL, 0)) {
    return 0LL;
  }
  uint64_t v8 = __error();
  uint64_t v9 = *v8;
  uint64_t v10 = (FILE *)*MEMORY[0x1895F89D0];
  uint64_t v11 = strerror(*v8);
  fprintf(v10, "failed (%s) to update class for %s\n", v11, a1);
  return v9;
}

uint64_t aks_migrate_path(const char *a1, int a2, int a3, int a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  bzero(v18, 0x400uLL);
  if (!realpath_DARWIN_EXTSN(a1, v18)) {
    return 0xFFFFFFFFLL;
  }
  int v8 = a2 | 0x18;
  v14[0] = MEMORY[0x1895F87A8];
  if ((a2 & 0x1C) != 0) {
    int v8 = a2;
  }
  v14[1] = 0x40000000LL;
  _OWORD v14[2] = __aks_migrate_path_block_invoke;
  v14[3] = &__block_descriptor_tmp_1;
  int v15 = v8;
  int v16 = a3;
  int v17 = a4;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 0x40000000LL;
  __int128 v10[2] = __aks_migrate_path_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_16;
  int v11 = a3;
  int v12 = v8;
  int v13 = a4;
  _iterate_path(v18, (uint64_t)v14, (uint64_t)v10);
  return 0LL;
}

uint64_t __aks_migrate_path_block_invoke(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[8];
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(const char **)(a2 + 48);
    int v4 = a1[9];
    int v5 = a1[10];
    int v3 = v6;
    goto LABEL_5;
  }

  if ((v2 & 8) != 0)
  {
    int v3 = *(const char **)(a2 + 48);
    int v4 = -1;
    int v5 = 0;
LABEL_5:
    _set_path_class(v3, v4, v5, v2);
  }

  return 1LL;
}

_DWORD *__aks_migrate_path_block_invoke_2(_DWORD *result, uint64_t a2)
{
  int v3 = result[8];
  if (v3)
  {
    int v4 = result[9];
    if ((v4 & 0x10) != 0)
    {
      if (result[10]) {
        int v5 = result[10];
      }
      else {
        int v5 = 3;
      }
      return (_DWORD *)_set_path_class(*(const char **)(a2 + 48), v3, v5, v4);
    }
  }

  return result;
}

BOOL _aks_version_check(int a1, unsigned __int8 a2)
{
  unsigned __int8 v8 = a2;
  int v3 = read(a1, &v8, 1uLL);
  if (v3 == 1) {
    return (char)v8 == a2;
  }
  if (v3 == -1)
  {
    int v5 = (FILE *)*MEMORY[0x1895F89D0];
    uint64_t v6 = __error();
    uint64_t v7 = strerror(*v6);
    fprintf(v5, "failed to read version file (%s)\n", v7);
  }

  return 0LL;
}

BOOL ___migrate_user_partition_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(const char **)(a2 + 48);
  int v4 = &v3[*(void *)(a1 + 32)];
  size_t v5 = strlen(v4);
  unint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_8:
    _set_path_class(v3, 4, 0, *(_DWORD *)(a1 + 56));
    return 1;
  }

  BOOL v7 = 0;
  uint64_t v8 = 0LL;
  size_t v9 = v5 + 1;
  uint64_t v10 = (_DWORD *)(*(void *)(a1 + 48) + 16LL);
  while (1)
  {
    if ((*v10 & 1) != 0) {
      break;
    }
    if ((*v10 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 56) & 1) != 0) {
        fprintf((FILE *)*MEMORY[0x1895F89E0], "SKIPPED: %s\n");
      }
      return v7;
    }

LABEL_7:
    BOOL v7 = ++v8 >= v6;
    v10 += 12;
    if (v6 == v8) {
      goto LABEL_8;
    }
  }

  if ((*(_BYTE *)(a1 + 56) & 1) != 0) {
    fprintf((FILE *)*MEMORY[0x1895F89E0], "ALLOW LISTED: %s\n");
  }
  return v7;
}

uint64_t ___migrate_user_partition_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return _set_path_class(*(const char **)(a2 + 48), 4, 3, *(_DWORD *)(a1 + 32));
}

uint64_t _aks_version_commit(int a1, char a2)
{
  char __buf = a2;
  int v2 = __error();
  uint64_t v3 = *v2;
  int v4 = (FILE *)*MEMORY[0x1895F89D0];
  size_t v5 = strerror(*v2);
  fprintf(v4, "failed to read version file (%s)\n", v5);
  return v3;
}

uint64_t __setup_allowlist_dirpath_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t aks_stash_create_for_bag_and_kek(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  unsigned int v11 = v10;
  int v12 = v1;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v13 = 3758097098LL;
  bzero(v19, 0x1000uLL);
  *(void *)&__int128 v17 = v19;
  *((void *)&v17 + 1) = &v20;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v15 = aks_client_connection;
    if (der_utils_encode_fv_data(&v17, v3) && ccder_blob_encode_tl())
    {
      input[0] = v12;
      input[1] = v11;
      uint64_t input[2] = v7;
      uint64_t input[3] = v5;
      uint64_t input[4] = v9;
      uint64_t input[5] = *((void *)&v17 + 1);
      input[6] = (uint64_t)&v20 - *((void *)&v17 + 1);
      return IOConnectCallMethod(v15, 0x21u, input, 7u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_create_for_bag_and_kek",  ":",  50,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return v13;
}

uint64_t aks_stash_create(uint64_t a1)
{
  return aks_stash_create_for_bag_and_kek(a1);
}

uint64_t aks_stash_load(int a1)
{
  return _aks_stash_load(a1, 0, 0LL);
}

uint64_t _aks_stash_load(int a1, unsigned int a2, BOOL *a3)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0x22u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t result = 0LL;
      if (a3) {
        *a3 = output != 0;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_stash_load",  ":",  77,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_stash_verify(int a1, _BYTE *a2)
{
  BOOL v4 = 0;
  if (!a2) {
    return _aks_stash_load(a1, 1u, &v4);
  }
  *a2 = 0;
  uint64_t result = _aks_stash_load(a1, 1u, &v4);
  if (!(_DWORD)result) {
    *a2 = v4;
  }
  return result;
}

uint64_t aks_stash_destroy()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x25u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_destroy",  ":",  125,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_stash_commit(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x24u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_commit",  ":",  138,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_stash_enable(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x33u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_enable",  ":",  154,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_stash_persist(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x35u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_persist",  ":",  170,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_prederived_free(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856) {
    return 0xFFFFFFFFLL;
  }
  free(a1[1]);
  free(a1);
  return 0LL;
}

uint64_t aks_prederived_create(int a1, uint64_t a2, unint64_t a3, int a4, void ***a5)
{
  uint64_t v14 = 0LL;
  if (!a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  if (_aks_prederived_create_ctx(a4, &v14) || (unsigned int v9 = calloc(0x20uLL, 1uLL)) == 0LL)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }

  else
  {
    unsigned int v10 = v9;
    int v11 = _aks_prederive_passcode(v14, a2, a3, (uint64_t)v9);
    uint64_t v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE
      && !v11
      && !_set_prederived_configuration(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      uint64_t v12 = 0LL;
      if (a5)
      {
        *a5 = v14;
        uint64_t v14 = 0LL;
      }
    }

    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }

  if (v14) {
    aks_prederived_free(v14);
  }
  return v12;
}

uint64_t _aks_prederived_create_ctx(int a1, void *a2)
{
  uint64_t v6 = calloc(0x20uLL, 1uLL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v6;
  *((void *)v6 + 2) = 20LL;
  unsigned int v8 = calloc(0x14uLL, 1uLL);
  *((void *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }

  _DWORD *v7 = 1634431856;
  v7[6] = a1;
  uint64_t result = CCRandomCopyBytes();
  if ((_DWORD)result)
  {
    unsigned int v10 = (void *)*((void *)v7 + 1);
    if (v10) {
      free(v10);
    }
    goto LABEL_19;
  }

  if (a1 == 3) {
    int v9 = 2000;
  }
  else {
    int v9 = 10000000;
  }
  if (a1 == 2) {
    int v9 = 1000;
  }
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t _aks_prederive_passcode(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 != 1634431856 || !a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 && (a1[6] - 4) >= 0xFFFFFFFD)
  {
    ccsha256_di();
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t _set_prederived_configuration(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  rsize_t __n = 0LL;
  int __s = 0LL;
  uint64_t v10 = 3758097090LL;
  uint64_t v14 = 0LL;
  if ((a2 || !a3) && a4 && a5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v12 = aks_client_connection;
      if (!encode_list_add_data(&v14, (uint64_t)der_key_config_prederived_salt, *(void *)(a5 + 8))
        && !encode_list_add_data(&v14, (uint64_t)der_key_config_prederived_passcode, a4)
        && !encode_list_add_number( &v14,  (uint64_t)der_key_config_prederived_iterations,  *(unsigned int *)(a5 + 4))
        && !encode_list_add_number( &v14,  (uint64_t)der_key_config_prederived_type,  *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !encode_list_add_data(&v14, (uint64_t)der_key_passcode, a2))
        && !encode_list_is_empty(&v14)
        && !encode_list_dict(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        uint64_t input[2] = __n;
        uint64_t v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_set_prederived_configuration",  ":",  218,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
    }
  }

  encode_list_free(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v10;
}

uint64_t aks_prederived_is_enabled(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  *(_DWORD *)uint64_t result = 1634431856;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_prederived_configuration",  ":",  384,  "",  0,  "",  "");
LABEL_16:
    aks_prederived_free((void **)v6);
    return 0LL;
  }

  mach_port_t v8 = aks_client_connection;
  bzero(outputStruct, 0x8000uLL);
  v14[0] = 0x8000LL;
  uint64_t input = v4;
  if (IOConnectCallMethod(v8, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, v14) || v14[0] > 0x8000) {
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  __int128 v16 = 0u;
  __int128 v18 = 0u;
  uint64_t v19 = 0LL;
  __int128 v15 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  v14[1] = (size_t)der_key_config_prederived_salt;
  __int128 v17 = (unint64_t)der_key_config_prederived_iterations;
  uint64_t v20 = der_key_config_prederived_type;
  der_dict_iterate();
  uint64_t v10 = ccder_decode_tl();
  if (v10)
  {
    int v11 = (const void *)v10;
    mach_port_t v12 = calloc(*(void *)(v6 + 16), 1uLL);
    *(void *)(v6 + 8) = v12;
    if (!v12)
    {
      int v13 = 0;
      if (!Mutable) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    memcpy(v12, v11, *(void *)(v6 + 16));
    *(_DWORD *)(v6 + 4) = der_get_number();
    *(_DWORD *)(v6 + 24) = der_get_number();
  }

  int v13 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (!v13 || !*(void *)(v6 + 16)) {
    goto LABEL_16;
  }
  *uint64_t v3 = v6;
  return 1LL;
}

uint64_t aks_prederived_unlock_keybag(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  if (a3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a4 == 0LL;
  else {
    uint64_t v7 = aks_unlock_bag(a1, (uint64_t)v9, 32);
  }
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t aks_unlock_bag(int a1, uint64_t a2, int a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    return IOConnectCallMethod(aks_client_connection, 0xCu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_bag",  ":",  807,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_prederived_change_secret(int a1, uint64_t a2, int a3, uint64_t a4, int a5, void ***a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  __int128 v16 = 0LL;
  if (!a6) {
    goto LABEL_17;
  }
  uint64_t v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3) {
    goto LABEL_17;
  }
  int v11 = _aks_prederived_create_ctx(*((_DWORD *)v7 + 6), &v16);
  mach_port_t v12 = v16;
  if (v11 || (v13 = _aks_prederive_passcode(v16, a4, a5, (uint64_t)v17), mach_port_t v12 = v16, v13))
  {
LABEL_15:
    if (v12) {
      aks_prederived_free(v12);
    }
LABEL_17:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }

  if (_set_prederived_configuration(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    mach_port_t v12 = v16;
    goto LABEL_15;
  }

  aks_prederived_free(v7);
  uint64_t v14 = 0LL;
  *a6 = v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t aks_create_bag(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0LL, 0, a3, -1, a4);
}

uint64_t _create_bag(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  input[6] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      uint64_t input[2] = a1;
      uint64_t input[3] = a2;
      uint64_t input[4] = a3;
      uint64_t input[5] = a4;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      uint64_t v14 = IOConnectCallMethod(aks_client_connection, 2u, input, 6u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v14) {
        *a7 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_create_bag",  ":",  187,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t aks_create_escrow_bag(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0LL, 0, 2u, a3, a4);
}

uint64_t aks_create_escrow_bag_with_auth(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return _create_bag(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t aks_create_sync_bag(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0LL, 0, 0x8000002u, a3, a4);
}

uint64_t aks_create_sync_bag_with_auth(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return _create_bag(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t aks_invalidate_sync_bags()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x42u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_invalidate_sync_bags",  ":",  544,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_unlock_with_sync_bag(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      uint64_t input[2] = a4;
      return IOConnectCallMethod(aks_client_connection, 0x43u, input, 3u, a1, a2, 0LL, 0LL, 0LL, 0LL);
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_with_sync_bag",  ":",  557,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t aks_load_bag(const void *a1, int a2, _DWORD *a3)
{
  output[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v6 = 3758097090LL;
    if (a1)
    {
      if (a3)
      {
        output[0] = 0LL;
        uint32_t outputCnt = 1;
        uint64_t v6 = IOConnectCallMethod(aks_client_connection, 6u, 0LL, 0, a1, a2, output, &outputCnt, 0LL, 0LL);
        if (!(_DWORD)v6) {
          *a3 = output[0];
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_load_bag",  ":",  574,  "",  0,  "",  "");
  }

  return v6;
}

uint64_t aks_invalidate_bag(const void *a1, int a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a1) {
      return IOConnectCallMethod(aks_client_connection, 0x57u, 0LL, 0, a1, a2, 0LL, 0LL, 0LL, 0LL);
    }
    return 3758097090LL;
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_invalidate_bag",  ":",  596,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_unload_bag(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 4u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_bag",  ":",  612,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_unload_session_bags(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x37u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_session_bags",  ":",  629,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_save_bag(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  BOOL v5 = v4;
  int v6 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v8 = aks_client_connection;
    uint64_t result = 3758097090LL;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        uint64_t input = v6;
        uint64_t result = IOConnectCallMethod(v8, 3u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          *BOOL v5 = v10;
          if (v10)
          {
            memcpy(v10, __src, __count);
            uint64_t result = 0LL;
            *uint64_t v3 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_save_bag",  ":",  646,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_change_secret_opts( int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  input[12] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a11;
    uint64_t input[2] = a10;
    uint64_t input[3] = a2;
    uint64_t input[4] = a3;
    uint64_t input[5] = a4;
    input[6] = a5;
    uint64_t input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0xFu, input, 0xCu, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a13)
    {
      if (!(_DWORD)result) {
        *a13 = output;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_change_secret_opts",  ":",  678,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_change_secret_se( int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return aks_change_secret_opts(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t aks_change_secret(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return aks_change_secret_opts(a1, a2, a3, a4, a5, 0LL, 0, 0LL, 0, 0xFFu, a6, 0, a7);
}

uint64_t aks_get_bag_uuid(int a1, _OWORD *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  size_t v7 = 16LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      __int128 outputStruct = 0uLL;
      uint64_t input = a1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0x17u, &input, 1u, 0LL, 0LL, 0LL, 0LL, &outputStruct, &v7);
      if (!(_DWORD)v4) {
        *a2 = outputStruct;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_bag_uuid",  ":",  729,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_copy_volume_cookie(int a1, void *a2, size_t *a3)
{
  return aks_copy_volume_cookie_persona(a1, (uint64_t)&UUID_NULL, a2, a3);
}

uint64_t aks_copy_volume_cookie_persona(int a1, uint64_t a2, void *a3, size_t *a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  __int16 v23 = 0;
  memset(__src, 0, sizeof(__src));
  size_t __count = 34LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v14 = 3758097090LL;
    if (a3 && a4)
    {
      mach_port_t v15 = aks_client_connection;
      uint64_t input = a1;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v16 = IOConnectCallMethod( v15,  0x44u,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
        if ((_DWORD)v16)
        {
          uint64_t v14 = v16;
        }

        else
        {
          __int128 v17 = calloc(__count, 1uLL);
          *a3 = v17;
          uint64_t v14 = 3758097085LL;
          if (v17)
          {
            memcpy(v17, __src, __count);
            uint64_t v14 = 0LL;
            *a4 = __count;
          }
        }
      }

      else
      {
        uint64_t v14 = 3758097085LL;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_copy_volume_cookie_persona",  ":",  760,  "",  0,  "",  "");
    uint64_t v14 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t aks_lock_bag(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0xDu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_bag",  ":",  790,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_get_lock_state(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 7u, input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_lock_state",  ":",  824,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_wrap_key(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      size_t v18 = *a6;
      uint64_t v16 = IOConnectCallMethod(aks_client_connection, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }

      else
      {
        *a6 = v18;
        uint64_t v14 = 0LL;
        if (a7) {
          *a7 = output;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_wrap_key",  ":",  848,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t aks_unwrap_key(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v12 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v12 = 3758097090LL;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          size_t v15 = *a6;
          uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0xBu, input, 2u, a1, a2, 0LL, 0LL, a5, &v15);
          if (!(_DWORD)v12) {
            *a6 = v15;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unwrap_key",  ":",  877,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t aks_rewrap_key_for_backup( const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      uint64_t input[2] = a5;
      uint64_t input[3] = a6;
      size_t v17 = 108LL;
      return IOConnectCallMethod(aks_client_connection, 0x18u, input, 4u, a1, a2, 0LL, 0LL, a7, &v17);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_rewrap_key_for_backup",  ":",  901,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t aks_get_system(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0xEu, input, a1 != 0, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_system",  ":",  922,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_set_system_with_passcode(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(aks_client_connection, 5u, input, 4u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_system_with_passcode",  ":",  950,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_set_system(int a1, int a2)
{
  return aks_set_system_with_passcode(a1, a2, 0LL, 0);
}

uint64_t aks_set_keybag_for_volume(int a1, uint64_t a2, unsigned int a3)
{
  return aks_set_keybag_for_volume_with_cookie_persona(a1, a2, a3);
}

uint64_t aks_set_keybag_for_volume_with_cookie(int a1, uint64_t a2, unsigned int a3)
{
  return aks_set_keybag_for_volume_with_cookie_persona(a1, a2, a3);
}

uint64_t aks_set_keybag_for_volume_with_cookie_persona(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v6 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v13 = aks_client_connection;
    input[0] = a1;
    input[1] = a3;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v6 = IOConnectCallMethod( v13,  0x41u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
      uint64_t v14 = *(void **)&inputStructCnt[1];
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v6 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_keybag_for_volume_with_cookie_persona",  ":",  987,  "",  0,  "",  "");
    uint64_t v14 = 0LL;
  }

  free(v14);
  return v6;
}

uint64_t aks_backup_enable_volume(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  BOOL v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 3758097085LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v18 = aks_client_connection;
    input[0] = v9;
    input[1] = v7;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v13, v14, v15, v16, v17, v10);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v19 = IOConnectCallMethod( v18,  0x6Eu,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
      if ((_DWORD)v19)
      {
        uint64_t v11 = v19;
      }

      else
      {
        uint64_t v20 = calloc(__count, 1uLL);
        *BOOL v5 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          uint64_t v11 = 0LL;
          *uint64_t v3 = __count;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_enable_volume",  ":",  1014,  "",  0,  "",  "");
    uint64_t v11 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t aks_backup_disable_volume(uint64_t a1)
{
  uint64_t v2 = 3758097084LL;
  uint64_t v13 = 0LL;
  int v12 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v9 = aks_client_connection;
    aks_pack_data(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      uint64_t v2 = IOConnectCallMethod(v9, 0x6Fu, 0LL, 0, v13, v12, 0LL, 0LL, 0LL, 0LL);
      uint64_t v10 = v13;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v2 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_disable_volume",  ":",  1044,  "",  0,  "",  "");
    uint64_t v10 = 0LL;
  }

  free(v10);
  return v2;
}

uint64_t aks_backup_copy_current_bag_uuid(uint64_t a1, void *a2)
{
  uint64_t v4 = 3758097084LL;
  uint64_t v16 = 0LL;
  int v15 = 0;
  size_t v14 = 16LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v11 = aks_client_connection;
    aks_pack_data(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x70u, 0LL, 0, v16, v15, 0LL, 0LL, a2, &v14);
      int v12 = v16;
    }

    else
    {
      int v12 = 0LL;
      uint64_t v4 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_copy_current_bag_uuid",  ":",  1066,  "",  0,  "",  "");
    int v12 = 0LL;
  }

  free(v12);
  return v4;
}

uint64_t aks_backup_rewrap_key( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v13 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v20 = aks_client_connection;
    __int128 v21 = 0LL;
    uint64_t v13 = 3758097090LL;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      uint64_t input[2] = a6;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      size_t v23 = 108LL;
      uint64_t v13 = IOConnectCallMethod( v20,  0x71u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  a7,  &v23);
      __int128 v21 = *(void **)&inputStructCnt[1];
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_rewrap_key",  ":",  1087,  "",  0,  "",  "");
    __int128 v21 = 0LL;
  }

  free(v21);
  return v13;
}

uint64_t aks_backup_rewrap_ek( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v15 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v22 = aks_client_connection;
    size_t v23 = 0LL;
    uint64_t v15 = 3758097090LL;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      uint64_t input[2] = a8;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      size_t v25 = 108LL;
      uint64_t v15 = IOConnectCallMethod( v22,  0x71u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &v25);
      size_t v23 = *(void **)&inputStructCnt[1];
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_rewrap_ek",  ":",  1113,  "",  0,  "",  "");
    size_t v23 = 0LL;
  }

  free(v23);
  return v15;
}

uint64_t aks_backup_unwrap_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 __s = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = decode_backup_bag(a1, a2, v13);
  if ((_DWORD)v8)
  {
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = unwrap_backup_bag((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!(_DWORD)v9)
    {
      __int128 v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      __int128 v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }

  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return err_sks_to_aks(v9);
}

uint64_t aks_backup_copy_bag_uuid(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = decode_backup_bag(a1, a2, v6);
  if (!(_DWORD)v4) {
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  }
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return err_sks_to_aks(v4);
}

uint64_t aks_backup_unwrap_key(__int128 *a1, void *a2, unsigned int a3, void *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v6 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v6;
  __int128 v7 = a1[3];
  __int128 v14 = a1[2];
  __int128 v15 = v7;
  unsigned int v10 = *a5;
  int __s = 1;
  uint64_t v8 = unwrap_data((uint64_t)&__s, 0LL, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return err_sks_to_aks(v8);
}

uint64_t aks_kc_backup_unwrap_key(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64LL;
      return IOConnectCallMethod(aks_client_connection, 0x82u, input, 2u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_unwrap_key",  ":",  1193,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t aks_kc_backup_wrap_key(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      input[0] = a1;
      return IOConnectCallMethod(aks_client_connection, 0x81u, input, 1u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_wrap_key",  ":",  1212,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t aks_kc_backup_get_handle(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0x83u, input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_handle",  ":",  1231,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_kc_backup_get_uuid(int a1, unsigned __int8 *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t v10 = 0LL;
      input[0] = a1;
      size_t v8 = 16LL;
      *(void *)src = 0LL;
      uint64_t v6 = IOConnectCallMethod(aks_client_connection, 0x84u, input, 1u, 0LL, 0LL, 0LL, 0LL, src, &v8);
      if ((_DWORD)v6)
      {
        return v6;
      }

      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0LL;
      }

      else
      {
        return 3758604298LL;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_uuid",  ":",  1253,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_kc_backup_open_keybag(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  if (a5)
  {
    int v7 = a4;
    int v9 = a2;
    *a5 = -1;
    int v11 = aks_backup_unwrap_bag((uint64_t)a1, a2, a3, a4, a6);
    __int128 v12 = (FILE **)MEMORY[0x1895F89E0];
    __int128 v13 = (FILE *)*MEMORY[0x1895F89E0];
    if (!v11)
    {
      fprintf( v13,  "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1302,  "",  0,  "",  "");
      uint64_t v17 = 0LL;
      goto LABEL_9;
    }

    fprintf( v13,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1290,  "",  0,  "",  v11,  "");
    uint64_t bag = aks_load_bag(a1, v9, a5);
    if ((_DWORD)bag)
    {
      uint64_t v17 = bag;
      fprintf( *v12,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1292,  "",  0,  "",  bag,  "");
    }

    else
    {
      int is_enabled = aks_prederived_is_enabled(*a5);
      int v16 = *a5;
      if (is_enabled)
      {
        uint64_t v17 = aks_prederived_unlock_keybag(v16, a3, v7, 0LL);
        if (!(_DWORD)v17) {
          goto LABEL_9;
        }
        fprintf( *v12,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }

      else
      {
        uint64_t v17 = aks_unlock_bag(v16, a3, v7);
        if (!(_DWORD)v17) {
          goto LABEL_9;
        }
        fprintf( *v12,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }
    }
  }

  else
  {
    uint64_t v17 = 3758097090LL;
  }

  if (*a5 != -1)
  {
    aks_unload_bag(*a5);
    *a5 = -1;
  }

LABEL_9:
  aks_prederived_free(0LL);
  return v17;
}

  memset_s(__s, v7, 0, v7);
  return v4;
}

uint64_t aks_keybag_persona_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v8 = 3758097084LL;
  uint64_t v19 = 0LL;
  int v18 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v15 = aks_client_connection;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    aks_pack_data(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      uint64_t v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0LL, 0LL, 0LL, 0LL);
      int v16 = v19;
    }

    else
    {
      int v16 = 0LL;
      uint64_t v8 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_create",  ":",  1324,  "",  0,  "",  "");
    int v16 = 0LL;
  }

  free(v16);
  return v8;
}

uint64_t aks_keybag_persona_create_with_flags(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v17 = aks_client_connection;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a5;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v10 = IOConnectCallMethod( v17,  0x75u,  input,  4u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
      int v18 = *(void **)&inputStructCnt[1];
    }

    else
    {
      int v18 = 0LL;
      uint64_t v10 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_create_with_flags",  ":",  1346,  "",  0,  "",  "");
    int v18 = 0LL;
  }

  free(v18);
  return v10;
}

uint64_t aks_keybag_persona_list(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  uint64_t v16 = *MEMORY[0x1895F89C0];
  bzero(__src, 0x2000uLL);
  size_t __count = 0x2000LL;
  uint64_t input = v6;
  uint64_t v7 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      uint64_t v9 = IOConnectCallMethod(aks_client_connection, 0x61u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v9)
      {
        uint64_t v7 = v9;
      }

      else
      {
        if (__count)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          *uint64_t v5 = v10;
          if (!v10)
          {
            uint64_t v7 = 3758097085LL;
            goto LABEL_10;
          }

          memcpy(v10, __src, __count);
          size_t v11 = __count;
        }

        else
        {
          size_t v11 = 0LL;
          *uint64_t v5 = 0LL;
        }

        uint64_t v7 = 0LL;
        *uint64_t v3 = v11;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_list",  ":",  1372,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

uint64_t aks_keybag_persona_delete(int a1, uint64_t a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  uint64_t v15 = 0LL;
  int v14 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v11 = aks_client_connection;
    input[0] = a1;
    aks_pack_data(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x62u, input, 1u, v15, v14, 0LL, 0LL, 0LL, 0LL);
      uint64_t v12 = v15;
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v4 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_delete",  ":",  1394,  "",  0,  "",  "");
    uint64_t v12 = 0LL;
  }

  free(v12);
  return v4;
}

uint64_t aks_auth_token_create(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v12 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v12 = 3758097090LL;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      uint64_t input[2] = a2;
      uint64_t input[3] = a3;
      return IOConnectCallMethod(aks_client_connection, 0x26u, input, 4u, 0LL, 0LL, 0LL, 0LL, a5, a6);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_auth_token_create",  ":",  1415,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t aks_set_configuration(int a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  rsize_t __n = 0LL;
  int __s = 0LL;
  uint64_t v7 = 3758097090LL;
  uint64_t v20 = 0LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v9 = aks_client_connection;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!_copy_cf_key(a4, @"GracePeriod", TypeID, (uint64_t)der_key_config_graceperiod, &v20))
    {
      CFTypeID v11 = CFNumberGetTypeID();
      if (!_copy_cf_key(a4, @"BackOffDelay", v11, (uint64_t)der_key_config_backoff_delay, &v20))
      {
        CFTypeID v12 = CFNumberGetTypeID();
        if (!_copy_cf_key( a4,  @"MaxUnlockAttempts",  v12,  (uint64_t)der_key_config_max_unlock_attempts,  &v20))
        {
          CFTypeID v13 = CFNumberGetTypeID();
          if (!_copy_cf_key( a4,  @"EscrowPasscodePeriod",  v13,  (uint64_t)der_key_config_escrow_passcode_period,  &v20))
          {
            CFTypeID v14 = CFNumberGetTypeID();
            if (!_copy_cf_key( a4,  @"EscrowTokenPeriod",  v14,  (uint64_t)der_key_config_escrow_token_period,  &v20))
            {
              CFTypeID v15 = CFDataGetTypeID();
              if (!_copy_cf_key(a4, @"UserUUID", v15, (uint64_t)der_key_config_user_uuid, &v20))
              {
                CFTypeID v16 = CFDataGetTypeID();
                if (!_copy_cf_key(a4, @"BindKEKToKB", v16, (uint64_t)der_key_config_bind_kek, &v20))
                {
                  CFTypeID v17 = CFBooleanGetTypeID();
                  if (!_copy_cf_key( a4,  @"InactivityRebootEnabled",  v17,  (uint64_t)der_key_inactivity_reboot_enabled,  &v20))
                  {
                    CFTypeID v18 = CFBooleanGetTypeID();
                    if (!_copy_cf_key( a4,  @"OnenessAutomaticMode",  v18,  (uint64_t)der_key_oneness_automatic_mode,  &v20)
                      && !encode_list_is_empty(&v20)
                      && (!a2 || !encode_list_add_data(&v20, (uint64_t)der_key_passcode, a2))
                      && !encode_list_dict(&v20, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      uint64_t input[2] = __n;
                      uint64_t v7 = IOConnectCallMethod(v9, 0x1Eu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_configuration",  ":",  1488,  "",  0,  "",  "");
    uint64_t v7 = 3758097084LL;
  }

  encode_list_free(&v20);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t _copy_cf_key(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int value = 0LL;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if ((_DWORD)result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        uint64_t v10 = 0LL;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10)
          || encode_list_add_number(a5, a4, v10))
        {
          return 0xFFFFFFFFLL;
        }

        return 0LL;
      }

      if (CFBooleanGetTypeID() == a3)
      {
        CFBooleanGetValue((CFBooleanRef)value);
      }

      else
      {
        if (CFDataGetTypeID() != a3) {
          return 0xFFFFFFFFLL;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        CFDataGetLength((CFDataRef)value);
      }

      return 0LL;
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t aks_get_configuration(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t v51 = *MEMORY[0x1895F89C0];
  uint64_t v5 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      mach_port_t v7 = aks_client_connection;
      bzero(outputStruct, 0x8000uLL);
      v47[0] = 0x8000LL;
      uint64_t input = v4;
      uint64_t v8 = IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, v47);
      if ((_DWORD)v8)
      {
        return v8;
      }

      else if (v47[0] > 0x8000)
      {
        return 3758604298LL;
      }

      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
        bzero(v48, 0x250uLL);
        v47[1] = (size_t)der_key_config_graceperiod;
        v48[4] = der_key_config_backoff_delay;
        v48[9] = der_key_config_max_unlock_attempts;
        v48[14] = der_key_config_escrow_passcode_period;
        v48[19] = der_key_config_escrow_token_period;
        v48[24] = der_key_config_flags;
        v48[29] = der_key_config_user_uuid;
        v48[34] = der_key_config_group_uuid;
        v48[39] = der_key_config_recovery_iterations;
        v48[44] = der_key_config_recovery_flags;
        v48[49] = der_key_config_recovery_target_iterations;
        v48[54] = der_key_memento_supported;
        v48[59] = der_key_memento_blob_exists;
        v48[64] = der_key_config_memento_passcode_generation;
        v48[69] = der_key_config_passcode_generation;
        der_dict_iterate();
        uint64_t v10 = v48[0];
        uint64_t v11 = v48[5];
        uint64_t v12 = v48[10];
        uint64_t v13 = v48[15];
        uint64_t v14 = v48[20];
        uint64_t v15 = v48[25];
        uint64_t v16 = v48[30];
        uint64_t v46 = v3;
        uint64_t v17 = v48[35];
        uint64_t v39 = v48[40];
        uint64_t v40 = v48[45];
        uint64_t v41 = v48[50];
        uint64_t v42 = v48[55];
        uint64_t v43 = v48[60];
        uint64_t v44 = v48[65];
        uint64_t v45 = v48[70];
        CFTypeID TypeID = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"GracePeriod", TypeID, v10);
        CFTypeID v19 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"BackOffDelay", v19, v11);
        CFTypeID v20 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"MaxUnlockAttempts", v20, v12);
        CFTypeID v21 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"EscrowPasscodePeriod", v21, v13);
        CFTypeID v22 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"EscrowTokenPeriod", v22, v14);
        CFTypeID v23 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"ConfigFlags", v23, v15);
        CFTypeID v24 = CFDataGetTypeID();
        _set_cf_key(Mutable, @"UserUUID", v24, v16);
        CFTypeID v25 = CFDataGetTypeID();
        _set_cf_key(Mutable, @"GroupUUID", v25, v17);
        CFTypeID v26 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"RecoveryIterations", v26, v39);
        CFTypeID v27 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"RecoveryFlags", v27, v40);
        CFTypeID v28 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"RecoveryTargetIterations", v28, v41);
        CFTypeID v29 = CFBooleanGetTypeID();
        _set_cf_key(Mutable, @"MementoSupported", v29, v42);
        CFTypeID v30 = CFBooleanGetTypeID();
        _set_cf_key(Mutable, @"MementoBlobExists", v30, v43);
        CFTypeID v31 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"MementoPasscodeGeneration", v31, v44);
        CFTypeID v32 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"PasscodeGeneration", v32, v45);
        char number = der_get_number();
        gid_t v34 = (const void *)*MEMORY[0x189604DE0];
        stat v35 = (const void *)*MEMORY[0x189604DE8];
        if ((number & 2) != 0) {
          passwd v36 = (const void *)*MEMORY[0x189604DE8];
        }
        else {
          passwd v36 = (const void *)*MEMORY[0x189604DE0];
        }
        CFDictionarySetValue(Mutable, @"InactivityRebootEnabled", v36);
        if ((number & 8) != 0) {
          __int128 v37 = v35;
        }
        else {
          __int128 v37 = v34;
        }
        CFDictionarySetValue(Mutable, @"OnenessAutomaticMode", v37);
        uint64_t v5 = 0LL;
        char *v46 = Mutable;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_configuration",  ":",  1556,  "",  0,  "",  "");
  }

  return v5;
}

void _set_cf_key(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      CFIndex valuePtr = der_get_number();
      CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt64Type, &valuePtr);
      if (!v7) {
        return;
      }
LABEL_12:
      CFNumberRef v11 = v7;
      CFDictionaryAddValue(a1, a2, v7);
      CFRelease(v11);
      return;
    }

    if (CFBooleanGetTypeID() == a3)
    {
      int v8 = der_get_BOOL();
      mach_port_t v9 = (const void **)MEMORY[0x189604DE8];
      if (!v8) {
        mach_port_t v9 = (const void **)MEMORY[0x189604DE0];
      }
      CFDictionaryAddValue(a1, a2, *v9);
    }

    else if (CFDataGetTypeID() == a3)
    {
      CFIndex valuePtr = 0LL;
      uint64_t v10 = (const UInt8 *)ccder_decode_tl();
      if (v10)
      {
        CFNumberRef v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v10, valuePtr);
        goto LABEL_12;
      }
    }
  }

uint64_t aks_assert_hold(int a1, unsigned int a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x1Au, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_hold",  ":",  1654,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_assert_drop(int a1, unsigned int a2)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a2;
  input[1] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x1Bu, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_drop",  ":",  1672,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_assert_promote(int a1, unsigned int a2)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x64u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_promote",  ":",  1687,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_oneness_heartbeat(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x91u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_oneness_heartbeat",  ":",  1707,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_assert_consume(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x65u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_consume",  ":",  1722,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_recover_with_escrow_bag(int a1, uint64_t a2)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v15 = 0LL;
  int v14 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v10 = aks_client_connection;
    aks_pack_data((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    uint64_t input[2] = v14;
    uint64_t v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v12 = v15;
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_recover_with_escrow_bag",  ":",  1739,  "",  0,  "",  "");
    uint64_t v12 = 0LL;
    uint64_t v11 = 3758097084LL;
  }

  free(v12);
  return v11;
}

uint64_t aks_fdr_hmac_data(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v8 = (const void *)v1;
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 3758097090LL;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v8 && v5 && v3)
    {
      uint64_t v11 = IOConnectCallMethod(aks_client_connection, 0x29u, 0LL, 0, v8, v7, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v11)
      {
        uint64_t v9 = v11;
      }

      else
      {
        uint64_t v12 = calloc(__count, 1uLL);
        *uint64_t v5 = v12;
        if (v12)
        {
          memcpy(v12, __src, __count);
          uint64_t v9 = 0LL;
          *uint64_t v3 = __count;
        }

        else
        {
          uint64_t v9 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fdr_hmac_data",  ":",  1758,  "",  0,  "",  "");
    uint64_t v9 = 3758097084LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v9;
}

uint64_t aks_generation(int a1, unsigned int a2, _DWORD *a3)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0x28u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a3)
    {
      if (!(_DWORD)result) {
        *a3 = output;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_generation",  ":",  1781,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t _aks_verify_password(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v9 = 3758097084LL;
  CFTypeID v21 = 0LL;
  int v20 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v16 = aks_client_connection;
    if (a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = "";
    }
    aks_pack_data((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      uint64_t input[2] = (uint64_t)v21;
      uint64_t input[3] = v20;
      uint64_t v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      CFTypeID v18 = v21;
    }

    else
    {
      CFTypeID v18 = 0LL;
      uint64_t v9 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_verify_password",  ":",  1807,  "",  0,  "",  "");
    CFTypeID v18 = 0LL;
  }

  free(v18);
  return v9;
}

uint64_t aks_verify_password(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _aks_verify_password(a1, a2, a3, a4, a5, 0);
}

uint64_t aks_verify_password_memento(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _aks_verify_password(a1, a2, a3, a4, a5, 1u);
}

uint64_t aks_register_for_notifications()
{
  return 3758097084LL;
}

uint64_t aks_create_signing_key(int a1, int a2, void *a3, size_t *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  size_t __count = 256LL;
  input[0] = a1;
  input[1] = a2;
  uint64_t result = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      memset(__src, 0, sizeof(__src));
      uint64_t result = IOConnectCallMethod(aks_client_connection, 0x31u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x100)
        {
          return 3758604298LL;
        }

        else
        {
          uint64_t v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            uint64_t result = 0LL;
            *a4 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_create_signing_key",  ":",  1859,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_create_signing_key_with_params(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v18 = *MEMORY[0x1895F89C0];
  size_t __count = 0x8000LL;
  input[0] = v1;
  input[1] = v6;
  uint64_t result = 3758097090LL;
  if (v4)
  {
    uint64_t v8 = v5;
    if (v5)
    {
      uint64_t v9 = v4;
      size_t v10 = v3;
      uint64_t v11 = v2;
      mach_port_t aks_client_connection = get_aks_client_connection();
      if (aks_client_connection)
      {
        mach_port_t v13 = aks_client_connection;
        bzero(__src, 0x8000uLL);
        uint64_t result = IOConnectCallMethod(v13, 0x31u, input, 2u, v11, v10, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count > 0x8000)
          {
            return 3758604298LL;
          }

          else
          {
            uint64_t v14 = calloc(__count, 1uLL);
            void *v9 = v14;
            if (v14)
            {
              memcpy(v14, __src, __count);
              uint64_t result = 0LL;
              *uint64_t v8 = __count;
            }

            else
            {
              return 3758097085LL;
            }
          }
        }
      }

      else
      {
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_create_signing_key_with_params",  ":",  1881,  "",  0,  "",  "");
        return 3758097084LL;
      }
    }
  }

  return result;
}

uint64_t aks_obliterate_signing_keys(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t remote_session_operate(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  uint32_t v7 = v6;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  size_t __count = 15360LL;
  input[0] = v1;
  input[1] = v8;
  uint64_t input[2] = v9;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v11 = aks_client_connection;
    bzero(__src, 0x3C00uLL);
    uint64_t v12 = IOConnectCallMethod(v11, v7, input, 3u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v12)
    {
      return v12;
    }

    else if (__count > 0x3C00)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v13 = 0LL;
      if (v5 && v3)
      {
        if (__count)
        {
          uint64_t v14 = calloc(__count, 1uLL);
          *uint64_t v5 = v14;
          if (!v14) {
            return 3758097085LL;
          }
          memcpy(v14, __src, __count);
          size_t v15 = __count;
        }

        else
        {
          size_t v15 = 0LL;
        }

        uint64_t v13 = 0LL;
        *size_t v3 = v15;
      }
    }
  }

  else
  {
    uint64_t v13 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "remote_session_operate",  ":",  2017,  "",  0,  "",  "");
  }

  return v13;
}

uint64_t aks_sign_signing_key( int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8, size_t *a9)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  memset(__src, 0, sizeof(__src));
  size_t __count = 256LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  uint64_t v9 = 3758097090LL;
  uint64_t input[2] = a5;
  if (a8 && a9)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v18 = aks_client_connection;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v19 = IOConnectCallMethod( v18,  0x32u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
        if ((_DWORD)v19)
        {
          uint64_t v9 = v19;
        }

        else if (__count > 0x100)
        {
          uint64_t v9 = 3758604298LL;
        }

        else
        {
          uint64_t v20 = calloc(__count, 1uLL);
          *a8 = v20;
          uint64_t v9 = 3758097085LL;
          if (v20)
          {
            memcpy(v20, __src, __count);
            uint64_t v9 = 0LL;
            *a9 = __count;
          }
        }
      }

      else
      {
        uint64_t v9 = 3758097085LL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_sign_signing_key",  ":",  1911,  "",  0,  "",  "");
      uint64_t v9 = 3758097084LL;
    }
  }

  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t aks_remote_session( int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  input[0] = a2;
  input[1] = a1;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v17 = aks_client_connection;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v18 = IOConnectCallMethod( v17,  0x2Cu,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  0LL,  0LL);
      uint64_t v10 = v18;
      if (a9 && !(_DWORD)v18) {
        *a9 = output;
      }
    }

    else
    {
      uint64_t v10 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_session",  ":",  1938,  "",  0,  "",  "");
  }

  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t aks_validate_local_key(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  mach_port_t v17 = 0LL;
  int __s = 0LL;
  uint64_t v4 = 3758097084LL;
  rsize_t __n = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v5 = 3758097090LL;
  rsize_t __smax = 0LL;
  if (!a3 || !a4) {
    goto LABEL_12;
  }
  int v8 = -536870212;
  *(void *)&__int128 v19 = a3;
  *((void *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4)) {
    goto LABEL_19;
  }
  uint64_t v16 = 0LL;
  if ((ccder_blob_decode_range() & 1) == 0)
  {
    int v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    uint64_t v5 = 3758097084LL;
LABEL_12:
    uint64_t v12 = __s;
    uint64_t v4 = v5;
    goto LABEL_13;
  }

  der_utils_decode_implicit_uint64(&v19, 0x8000000000000001LL, &v16);
  if (v16)
  {
    uint64_t v5 = remote_session_operate(a1);
    if ((_DWORD)v5) {
      syslog(3, "error: validating v1 local signing key failed: %d");
    }
    goto LABEL_12;
  }

  uint64_t v11 = aks_create_signing_key(a1, 11, &__s, &__n);
  if ((_DWORD)v11)
  {
    uint64_t v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }

  uint64_t v12 = __s;
  if (__s && __n)
  {
    uint64_t v5 = aks_sign_signing_key(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if ((_DWORD)v5) {
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    }
    goto LABEL_12;
  }

LABEL_13:
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }

  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }

  return v4;
}

  if (v6 == v3) {
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_30;
  }
  do
  {
    while (1)
    {
      if (v6 <= v3)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      uint64_t v13 = v6 - 1 + v5;
      if (__OFADD__(v6 - 1, v5)) {
        goto LABEL_24;
      }
      uint64_t v14 = v6 - 1;
      if (v6 < 1) {
        goto LABEL_25;
      }
      uint64_t v15 = *(void *)(v7 + 16);
      if (v14 >= v15) {
        goto LABEL_26;
      }
      if (v13 < v15) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t result = (uint64_t)sub_183CF84B0(v7);
      uint32_t v7 = result;
    }

    *(_BYTE *)(v7 + 32 + v13) = *(_BYTE *)(v7 + v6-- + 31);
  }

  while (v14 != v3);
  *uint64_t v4 = v7;
  return result;
}

  __break(1u);
  return result;
}

          j__swift_unknownObjectRetain( *(void *)(result + 16),  *(void *)(result + 24),  *(void *)(result + 32),  *(void *)(result + 40),  *(void *)(result + 48),  1LL);
          sub_183CF8DE8(v9, v8, v6, v5);
          size_t v3 = v12;
          j__swift_unknownObjectRelease(v9, v8, v6, v5, v10, 1LL);
          sub_183CE2004(v4);
          return v3;
        }

        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

    if (*(_BYTE *)(v3 + 17)) {
      uint64_t result = X509PolicySetFlagsForTestAnchor((void *)v3, a2);
    }
    goto LABEL_15;
  }

  if ((v4 & 0x1C00000000LL) == 0) {
    goto LABEL_15;
  }
  uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&MFi4RootSpki);
  if ((_DWORD)result) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a2 + 240) | 0x1C00000000LL;
LABEL_11:
  *(void *)(a2 + 240) = v5;
LABEL_15:
  if (*(_BYTE *)(v3 + 16))
  {
    if (*(_BYTE *)(v3 + 17))
    {
      uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootCASPKI);
      if (!(_DWORD)result
        || (uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG2SPKI), !(_DWORD)result)
        || (uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG3SPKI), !(_DWORD)result))
      {
        *(void *)(a2 + 240) |= 0x58E30653FFF8uLL;
      }
    }

    if (*(_BYTE *)(v3 + 16) && *(_BYTE *)(v3 + 17))
    {
      uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootECCSPKI);
      if (!(_DWORD)result) {
        *(void *)(a2 + 240) |= 0x6400000uLL;
      }
    }
  }

  return result;
}

  uint64_t v10 = 0LL;
LABEL_23:
  if (v10 == a2) {
    return 0LL;
  }
  else {
    return 589829LL;
  }
}

    __break(0x5519u);
  }

  return result;
}

  __break(0x5513u);
  return result;
}

uint64_t aks_remote_session_step(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_setup(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_setup_with_acm(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_confirm(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_session_token(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_drain_backup_keys(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v8 = aks_client_connection;
    uint64_t result = 3758097090LL;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        input[0] = v6;
        input[1] = 0LL;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            uint64_t v10 = calloc(__count, 1uLL);
            *uint64_t v5 = v10;
            if (v10)
            {
              memcpy(v10, __src, __count);
              uint64_t result = 0LL;
              *size_t v3 = __count;
            }

            else
            {
              return 3758097085LL;
            }
          }

          else
          {
            return 3758097136LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drain_backup_keys",  ":",  2072,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_drain_backup_keys_info(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v8 = aks_client_connection;
    uint64_t result = 3758097090LL;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        input[0] = v6;
        input[1] = 1LL;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298LL;
            }

            else
            {
              uint64_t v10 = calloc(__count, 1uLL);
              *uint64_t v5 = v10;
              if (v10)
              {
                memcpy(v10, __src, __count);
                uint64_t result = 0LL;
                *size_t v3 = __count / 0x7C;
              }

              else
              {
                return 3758097085LL;
              }
            }
          }

          else
          {
            return 3758097136LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drain_backup_keys_info",  ":",  2100,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_clear_backup_bag(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x16u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_clear_backup_bag",  ":",  2129,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_set_backup_bag(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  int v12 = v1;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_backup_bag",  ":",  2146,  "",  0,  "",  "");
    return 3758097084LL;
  }

  mach_port_t v14 = aks_client_connection;
  if (v5)
  {
    if (!v3) {
      return 3758097090LL;
    }
    __int128 outputStruct = __src;
    p_count = &__count;
    uint64_t v17 = 1LL;
  }

  else
  {
    p_count = 0LL;
    __int128 outputStruct = 0LL;
    uint64_t v17 = 0LL;
  }

  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  input[0] = v12;
  input[1] = v11;
  uint64_t input[2] = v17;
  uint64_t input[3] = v9;
  uint64_t input[4] = v7;
  uint64_t result = IOConnectCallMethod(v14, 0x15u, input, 5u, 0LL, 0LL, 0LL, 0LL, outputStruct, p_count);
  if (v5 && !(_DWORD)result)
  {
    __int128 v19 = calloc(__count, 1uLL);
    *uint64_t v5 = v19;
    if (v19)
    {
      memcpy(v19, __src, __count);
      uint64_t result = 0LL;
      *size_t v3 = __count;
    }

    else
    {
      return 3758097085LL;
    }
  }

  return result;
}

uint64_t aks_make_public_backup_bag(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0x52u, input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_make_public_backup_bag",  ":",  2178,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_remote_session_reset(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_session_reset_all()
{
  return remote_session_operate(0LL);
}

uint64_t aks_reset_session(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_get_device_state(uint64_t a1)
{
  return _get_device_state(a1);
}

uint64_t _get_device_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint32_t v5 = v4;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  *(void *)uint64_t v13 = 4096LL;
  uint64_t v6 = 3758097084LL;
  int v19 = 0;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 __s = 0u;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      mach_port_t v8 = aks_client_connection;
      bzero(outputStruct, 0x1000uLL);
      uint64_t v9 = IOConnectCallMethod(v8, v5, input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, (size_t *)v13);
      if ((_DWORD)v9)
      {
        return v9;
      }

      else
      {
        uint64_t v6 = 0LL;
        if (!decode_extended_state((uint64_t)outputStruct, v13[0], (char *)&__s))
        {
          __int128 v10 = v17;
          *(_OWORD *)(v3 + 32) = v16;
          *(_OWORD *)(v3 + 48) = v10;
          *(_WORD *)(v3 + 64) = v18;
          __int128 v11 = v15;
          *(_OWORD *)uint64_t v3 = __s;
          *(_OWORD *)(v3 + 16) = v11;
        }
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_device_state",  ":",  2224,  "",  0,  "",  "");
  }

  return v6;
}

uint64_t aks_get_extended_device_state(uint64_t a1)
{
  return _get_device_state(a1);
}

uint64_t aks_remote_peer_get_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  int v7 = v6;
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 3758097084LL;
  v13[0] = 4096LL;
  uint64_t input = v1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      mach_port_t v10 = aks_client_connection;
      bzero(outputStruct, 0x1000uLL);
      memset_s(v3, 0x10uLL, 0, 0x10uLL);
      uint64_t v11 = IOConnectCallMethod(v10, 0x39u, &input, 1u, v7, v5, 0LL, 0LL, outputStruct, v13);
      if ((_DWORD)v11)
      {
        return v11;
      }

      else
      {
        uint64_t v18 = 0LL;
        __int128 v22 = 0u;
        __int128 v14 = 0u;
        __int128 v15 = 0u;
        __int128 v17 = 0u;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        __int128 v23 = 0u;
        uint64_t v24 = 0LL;
        v13[1] = (size_t)der_key_peer_unlock_token_status;
        __int128 v16 = (unint64_t)der_key_peer_unwrapped_escrow_record_status;
        int v19 = der_key_peer_wrapped_escrow_record_status;
        *(void *)&__int128 v22 = der_key_peer_flags;
        der_dict_iterate();
        *uint64_t v3 = der_get_number();
        v3[1] = der_get_number();
        v3[2] = der_get_number();
        uint64_t v8 = 0LL;
        v3[3] = der_get_number();
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_peer_get_state",  ":",  2255,  "",  0,  "",  "");
  }

  return v8;
}

uint64_t aks_remote_peer_drop(int a1, const void *a2, size_t a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x3Au, input, 1u, a2, a3, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_peer_drop",  ":",  2292,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_lock_device(int a1, int a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2) {
      uint32_t v4 = 32;
    }
    else {
      uint32_t v4 = 8;
    }
    return IOConnectCallMethod(aks_client_connection, v4, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_device",  ":",  2307,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_lock_cx(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x8Du, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_cx",  ":",  2327,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_unlock_device(int a1, uint64_t a2, int a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 9u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_device",  ":",  2342,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_obliterate_class_d()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x13u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_obliterate_class_d",  ":",  2355,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_migrate_s_key(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(aks_client_connection, 0x3Fu, input, 4u, a5, a6, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_migrate_s_key",  ":",  2367,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_smartcard_register( int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, void *a7, size_t *a8)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a4;
  uint64_t input[2] = a2;
  uint64_t input[3] = a3;
  size_t __count = 2048LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v13 = aks_client_connection;
    bzero(__src, 0x800uLL);
    uint64_t v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v14)
    {
      return v14;
    }

    else if (__count > 0x800)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v15 = 0LL;
      if (a7 && a8)
      {
        if (__count)
        {
          __int128 v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16) {
            return 3758097085LL;
          }
          memcpy(v16, __src, __count);
          size_t v17 = __count;
        }

        else
        {
          size_t v17 = 0LL;
        }

        uint64_t v15 = 0LL;
        *a8 = v17;
      }
    }
  }

  else
  {
    uint64_t v15 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_register",  ":",  2388,  "",  0,  "",  "");
  }

  return v15;
}

uint64_t aks_smartcard_unregister(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x3Cu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_unregister",  ":",  2412,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_smartcard_request_unlock(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  size_t __count = 2048LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v10 = aks_client_connection;
    bzero(__src, 0x800uLL);
    uint64_t v11 = IOConnectCallMethod(v10, 0x3Du, input, 1u, a2, a3, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }

    else if (__count > 0x800)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      if (a4 && a5)
      {
        if (__count)
        {
          mach_port_t v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13) {
            return 3758097085LL;
          }
          memcpy(v13, __src, __count);
          size_t v14 = __count;
        }

        else
        {
          size_t v14 = 0LL;
        }

        uint64_t v12 = 0LL;
        *a5 = v14;
      }
    }
  }

  else
  {
    uint64_t v12 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_request_unlock",  ":",  2429,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t aks_smartcard_unlock(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  size_t __count = 2048LL;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(void *)&inputStructCnt[1])
  {
    uint64_t v17 = 3758097085LL;
    goto LABEL_12;
  }

  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_unlock",  ":",  2460,  "",  0,  "",  "");
    uint64_t v17 = 3758097084LL;
    goto LABEL_12;
  }

  uint64_t v16 = IOConnectCallMethod( aks_client_connection,  0x3Eu,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
    goto LABEL_12;
  }

  if (__count > 0x800)
  {
    uint64_t v17 = 3758604298LL;
    goto LABEL_12;
  }

  uint64_t v17 = 0LL;
  if (a6 && a7)
  {
    if (!__count)
    {
      size_t v19 = 0LL;
      goto LABEL_11;
    }

    uint64_t v18 = calloc(__count, 1uLL);
    *a6 = v18;
    uint64_t v17 = 3758097085LL;
    if (v18)
    {
      memcpy(v18, __src, __count);
      size_t v19 = __count;
LABEL_11:
      uint64_t v17 = 0LL;
      *a7 = v19;
    }
  }

uint64_t aks_smartcard_get_sc_usk(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_smartcard_get_foo(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a6 && a3 && a4 && a5 && a3 + a4 > a3)
  {
    der_dict_iterate();
    if (a2)
    {
      if (*a6 == 8LL)
      {
        uint64_t number = der_get_number();
        uint64_t result = 0LL;
        *a5 = number;
        return result;
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v11 = ccder_decode_tl();
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v12 = v11;
    uint64_t result = 0LL;
    *a5 = v12;
    *a6 = 0LL;
  }

  return result;
}

uint64_t aks_smartcard_get_ec_pub(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_smartcard_get_mode(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0LL;
  uint64_t result = aks_smartcard_get_foo((uint64_t)der_key_sc_auth_mode, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t aks_smartcard_get_version(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0LL;
  uint64_t result = aks_smartcard_get_foo((uint64_t)der_key_sc_auth_version, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t aks_se_fail(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x47u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_fail",  ":",  2589,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_set_healthy(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x49u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_set_healthy",  ":",  2605,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_set_secret(int a1, uint64_t a2, uint64_t a3)
{
  return __aks_se_set_secret(a1, a2, a3, 0x45u);
}

uint64_t __aks_se_set_secret(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, a4, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "__aks_se_set_secret",  ":",  2621,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_set_secret_memento(int a1, uint64_t a2, uint64_t a3)
{
  return __aks_se_set_secret(a1, a2, a3, 0x8Cu);
}

uint64_t aks_se_recover(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x46u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_recover",  ":",  2649,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_change_secret_epilogue(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x69u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_change_secret_epilogue",  ":",  2665,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_get_reset_token_for_memento_secret(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  input[1] = v4;
  uint64_t input[2] = v5;
  bzero(__s, 0x1000uLL);
  __n[0] = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    uint64_t v9 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_token_for_memento_secret",  ":",  2683,  "",  0,  "",  "");
    goto LABEL_10;
  }

  uint64_t v7 = IOConnectCallMethod(aks_client_connection, 0x48u, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, __n);
  if ((_DWORD)v7)
  {
    uint64_t v9 = v7;
    goto LABEL_10;
  }

  if (__n[0] - 4097 < 0xFFFFFFFFFFFFF000LL)
  {
    uint64_t v9 = 3758604298LL;
    goto LABEL_10;
  }

  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  __n[1] = (rsize_t)der_key_config_se_reset_token;
  __int128 v14 = (unint64_t)der_key_config_se_slot;
  der_dict_iterate();
  if ((void)v12)
  {
    ccder_decode_tl();
LABEL_9:
    uint64_t v9 = 0LL;
    goto LABEL_10;
  }

  if (!*((void *)&v14 + 1)) {
    goto LABEL_9;
  }
  unint64_t number = der_get_number();
  if (number > 0xFF) {
    goto LABEL_9;
  }
  uint64_t v9 = 0LL;
  *uint64_t v3 = number;
LABEL_10:
  memset_s(__s, __n[0], 0, __n[0]);
  return v9;
}

uint64_t aks_se_get_reset_token(uint64_t a1)
{
  return aks_se_get_reset_token_for_memento_secret(a1);
}

uint64_t aks_se_set_nonce(int a1, const void *a2, size_t a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2) {
      size_t v6 = a3;
    }
    else {
      size_t v6 = 0LL;
    }
    return IOConnectCallMethod(aks_client_connection, 0x58u, input, 1u, a2, v6, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_set_nonce",  ":",  2737,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_se_get_reset_sig(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  bzero(&__s, 0x1000uLL);
  size_t __n = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (v9)
  {
    if (v7)
    {
      uint64_t v10 = 3758097090LL;
      if (v5)
      {
        if (v3)
        {
          mach_port_t aks_client_connection = get_aks_client_connection();
          if (aks_client_connection)
          {
            uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0x5Au, input, 1u, 0LL, 0LL, 0LL, 0LL, &__s, &__n);
            if ((_DWORD)v12)
            {
              uint64_t v10 = v12;
            }

            else if (__n - 4097 < 0xFFFFFFFFFFFFF005LL)
            {
              uint64_t v10 = 3758604298LL;
            }

            else
            {
              __int128 v13 = calloc(5uLL, 1uLL);
              *uint64_t v5 = v13;
              if (v13)
              {
                *uint64_t v3 = 5LL;
                int v14 = __s;
                v13[4] = v20;
                *(_DWORD *)__int128 v13 = v14;
                __int128 v15 = calloc(__n - 5, 1uLL);
                void *v9 = v15;
                uint64_t v10 = 3758097085LL;
                if (v15)
                {
                  size_t v16 = __n;
                  void *v7 = __n - 5;
                  memcpy(v15, v21, v16);
                  uint64_t v10 = 0LL;
                }
              }

              else
              {
                uint64_t v10 = 3758097085LL;
              }
            }
          }

          else
          {
            fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_sig",  ":",  2759,  "",  0,  "",  "");
            uint64_t v10 = 3758097084LL;
          }
        }
      }
    }
  }

  memset_s(&__s, __n, 0, __n);
  return v10;
}

uint64_t aks_se_get_reset_pubkey(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  size_t v6 = 4096LL;
  bzero(__src, 0x1000uLL);
  size_t __count = 4096LL;
  uint64_t v7 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      uint64_t v9 = IOConnectCallMethod(aks_client_connection, 0x59u, input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      size_t v6 = __count;
      if ((_DWORD)v9)
      {
        uint64_t v7 = v9;
      }

      else if (__count - 4097 < 0xFFFFFFFFFFFFF000LL)
      {
        uint64_t v7 = 3758604298LL;
      }

      else
      {
        uint64_t v10 = calloc(__count, 1uLL);
        *uint64_t v5 = v10;
        size_t v6 = __count;
        if (v10)
        {
          *uint64_t v3 = __count;
          memcpy(v10, __src, v6);
          uint64_t v7 = 0LL;
          size_t v6 = __count;
        }

        else
        {
          uint64_t v7 = 3758097085LL;
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_pubkey",  ":",  2791,  "",  0,  "",  "");
      size_t v6 = 4096LL;
      uint64_t v7 = 3758097084LL;
    }
  }

  memset_s(__src, v6, 0, v6);
  return v7;
}

uint64_t aks_se_delete_reset_token(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Bu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_delete_reset_token",  ":",  2815,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_support_in_rm(unsigned int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Eu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_support_in_rm",  ":",  2832,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_support_in_rm_is_set(BOOL *a1)
{
  output[1] = *MEMORY[0x1895F89C0];
  output[0] = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0x6Bu, 0LL, 0, 0LL, 0LL, output, &outputCnt, 0LL, 0LL);
    if (a1)
    {
      if (!(_DWORD)result) {
        *a1 = output[0] != 0;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_support_in_rm_is_set",  ":",  2848,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_se_stage_stash()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Fu, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_stage_stash",  ":",  2865,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_fv_lock_volume_bag()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_unwrap_vek()
{
  return aks_fv_unwrap_vek_with_acm();
}

uint64_t aks_fv_get_blob_state(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v12 = __s;
  *((void *)&v12 + 1) = &v15;
  *(void *)__int128 v13 = 4096LL;
  uint64_t v7 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v9 = aks_client_connection;
      if (der_utils_encode_fv_data(&v12, v5) && der_utils_encode_fv_params(&v12, v6))
      {
        uint64_t v7 = 3758097098LL;
        if (ccder_blob_encode_tl())
        {
          uint64_t v10 = IOConnectCallMethod( v9,  0x55u,  0LL,  0,  *((const void **)&v12 + 1),  (size_t)&v15 - *((void *)&v12 + 1),  0LL,  0LL,  __s,  (size_t *)v13);
          if (!(_DWORD)v10) {
            uint64_t v10 = decode_fv_blob_state((uint64_t)__s, *(uint64_t *)v13, v3);
          }
          uint64_t v7 = v10;
        }
      }

      else
      {
        uint64_t v7 = 3758097098LL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_get_blob_state",  ":",  2900,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v7;
}

uint64_t aks_fv_get_last_known_gp_state(__int128 *a1)
{
  char v7 = 0;
  uint64_t v5 = &v7;
  uint64_t v6 = 1LL;
  __int128 v3 = 0uLL;
  uint64_t v4 = 0LL;
  if (a1)
  {
    __int128 v3 = *a1;
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v1 = *((void *)&v3 + 1) | 0x10LL;
  }

  else
  {
    uint64_t v1 = 16LL;
  }

  *((void *)&v3 + 1) = v1;
  return aks_fv_get_blob_state((uint64_t)&v3);
}

uint64_t aks_fv_get_size(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v3 = v2;
  uint64_t v4 = v1;
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = 3758097098LL;
  uint64_t output = 0LL;
  input[0] = v6;
  uint32_t outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v10 = __s;
  *((void *)&v10 + 1) = &output;
  if (v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v8 = aks_client_connection;
      if (der_utils_encode_fv_params(&v10, v4))
      {
        if (ccder_blob_encode_tl())
        {
          uint64_t v5 = IOConnectCallMethod( v8,  0x4Eu,  input,  1u,  *((const void **)&v10 + 1),  (size_t)&input[-1] - *((void *)&v10 + 1),  &output,  &outputCnt,  0LL,  0LL);
          if (!(_DWORD)v5) {
            *__int128 v3 = output;
          }
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_get_size",  ":",  2943,  "",  0,  "",  "");
      uint64_t v5 = 3758097084LL;
    }
  }

  else
  {
    uint64_t v5 = 3758097090LL;
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t aks_fv_import(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v9;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v16 = __s;
  *((void *)&v16 + 1) = input;
  size_t v17 = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (v7 && v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_import",  ":",  2971,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
      goto LABEL_14;
    }

    mach_port_t v12 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v16, v7)
      || !der_utils_encode_fv_params(&v16, v8)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_12;
    }

    uint64_t v13 = IOConnectCallMethod( v12,  0x4Fu,  input,  1u,  *((const void **)&v16 + 1),  (size_t)input - *((void *)&v16 + 1),  0LL,  0LL,  __s,  &v17);
    if ((_DWORD)v13)
    {
      uint64_t v10 = v13;
      goto LABEL_14;
    }

    *(void *)&__int128 v15 = __s;
    *((void *)&v15 + 1) = &__s[v17];
    if (!v3)
    {
      uint64_t v10 = 0LL;
      goto LABEL_14;
    }

    uint64_t v10 = 0LL;
    if ((der_utils_decode_fv_data(&v15, 0, v3) & 1) == 0) {
LABEL_12:
    }
      uint64_t v10 = 3758097098LL;
  }

uint64_t aks_fv_get_verifier_size()
{
  return aks_fv_get_size(0LL);
}

uint64_t aks_fv_get_access_token_size()
{
  return aks_fv_get_size(0LL);
}

uint64_t aks_fv_new_verifier()
{
  return aks_fv_new_kek(0LL);
}

uint64_t aks_fv_rewrap_verifier()
{
  return aks_fv_rewrap_kek(0LL);
}

uint64_t aks_fv_new_access_token()
{
  v1[0] = 0LL;
  v1[1] = 2LL;
  v1[2] = 0LL;
  return aks_fv_new_vek((uint64_t)v1);
}

uint64_t aks_fv_new_unbound_access_token(char a1)
{
  uint64_t v1 = 130LL;
  if ((a1 & 6) == 0) {
    uint64_t v1 = 2LL;
  }
  v3[0] = 0LL;
  v3[1] = v1;
  v3[2] = 0LL;
  return aks_fv_new_vek((uint64_t)v3);
}

uint64_t aks_fv_bind_access_token()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_is_access_token_unbound(uint64_t a1, BOOL *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v5 = 0u;
  if (!a2) {
    return 3758097090LL;
  }
  uint64_t result = aks_fv_get_blob_state((uint64_t)v4);
  if (!(_DWORD)result)
  {
    if ((_DWORD)v5 == 1)
    {
      uint64_t result = 0LL;
      *a2 = (DWORD1(v7) & 0x8000000) != 0;
    }

    else
    {
      return 3758604312LL;
    }
  }

  return result;
}

uint64_t aks_fv_load_access_token_as_system_keychain()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_verify_user_opts()
{
  return aks_fv_unwrap_vek_with_acm();
}

uint64_t aks_fv_grant_ownership(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 3758097098LL;
  bzero(v16, 0x1000uLL);
  bzero(v15, 0x1000uLL);
  *(void *)&__int128 v14 = v16;
  *((void *)&v14 + 1) = &v17;
  *(void *)&__int128 v13 = v15;
  *((void *)&v13 + 1) = v16;
  if (der_utils_encode_fv_data(&v14, v9)
    && der_utils_encode_fv_data(&v14, v7)
    && ccder_blob_encode_tl()
    && der_utils_encode_fv_data(&v13, v5)
    && der_utils_encode_fv_data(&v13, v3)
    && ccder_blob_encode_tl())
  {
    return aks_fv_set_protection(v10);
  }

  return v11;
}

uint64_t aks_fv_owners_exist(uint64_t a1)
{
  return aks_fv_set_protection(a1);
}

uint64_t aks_fv_remove_external_kek_group(uint64_t a1)
{
  v2[3] = a1;
  memset(v2, 0, 24);
  return aks_fv_set_protection((uint64_t)v2);
}

uint64_t aks_fv_sidp_status(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(v8, 0x4000uLL);
  uint64_t result = aks_fv_set_protection(v6);
  if (!(_DWORD)result)
  {
    if (ccder_decode_sequence_tl() && ccder_decode_tl())
    {
      __memcpy_chk();
      if (v5) {
        *uint64_t v5 = 0;
      }
      if (v3) {
        *uint64_t v3 = 0;
      }
      return 0LL;
    }

    else
    {
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_fv_stash_kek()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_stash_kek_with_secret(int a1)
{
  uint64_t v1 = 8LL;
  if (a1) {
    uint64_t v1 = 12LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = v1;
  uint64_t v6 = 0LL;
  uint64_t v2 = aks_fv_set_protection((uint64_t)&v4);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v5, v2);
  return v2;
}

uint64_t aks_fv_commit_stashed_kek()
{
  uint64_t v0 = aks_fv_set_protection(0LL);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t aks_fv_destroy_stashed_kek()
{
  uint64_t v0 = aks_fv_set_protection(0LL);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t aks_fv_verify_user()
{
  return aks_fv_unwrap_vek_with_acm();
}

uint64_t aks_fv_delete_verifier()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_absinthe_collection(uint64_t a1)
{
  unsigned int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v8 = 3758097084LL;
  input[0] = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v15 = aks_client_connection;
      if (v7) {
        __int128 v16 = v7;
      }
      else {
        __int128 v16 = "";
      }
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, (uint64_t)v16);
      uint64_t v17 = IOConnectCallMethod( v15,  0x50u,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
      if ((_DWORD)v17)
      {
        uint64_t v8 = v17;
      }

      else
      {
        uint64_t v18 = calloc(__count, 1uLL);
        *uint64_t v5 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          uint64_t v8 = 0LL;
          *uint64_t v3 = (int)__count;
        }

        else
        {
          uint64_t v8 = 3758097085LL;
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_collection",  ":",  3220,  "",  0,  "",  "");
    }
  }

  else
  {
    uint64_t v8 = 3758097090LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v8;
}

uint64_t aks_absinthe_generate( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  input[1] = *MEMORY[0x1895F89C0];
  __int128 v21 = 0LL;
  input[0] = a1;
  int v20 = 0;
  uint64_t v7 = 3758097090LL;
  if (a2 && a6 && a7)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v17 = aks_client_connection;
      aks_pack_data(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      size_t v19 = *a7;
      uint64_t v7 = IOConnectCallMethod(v17, 0x51u, input, 1u, v21, v20, 0LL, 0LL, a6, &v19);
      if (!(_DWORD)v7) {
        *a7 = (int)v19;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_generate",  ":",  3253,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

  free(v21);
  return v7;
}

uint64_t aks_drop_auxiliary_auth_by_uid(unsigned int a1)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = 0LL;
  input[1] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x53u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drop_auxiliary_auth_by_uid",  ":",  3280,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_drop_auxiliary_auth_by_handle(int a1)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = 1LL;
  input[1] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x53u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drop_auxiliary_auth_by_handle",  ":",  3296,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_lower_iteration_count()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Cu, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lower_iteration_count",  ":",  3310,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_secret_drop(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x6Au, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_secret_drop",  ":",  3326,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_get_current_sep_measurement(uint64_t a1, uint64_t a2)
{
  return 3758097084LL;
}

uint64_t aks_get_internal_info(uint64_t a1)
{
  return aks_get_internal_info_for_key(a1);
}

uint64_t aks_get_seconds_since_passcode_change(uint64_t a1, void *a2)
{
  uint64_t v3 = 3758097084LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  if (!aks_get_internal_info_for_key(a1)
    && der_dict_get_number( (uint64_t)der_key_passcode_change_time,  (uint64_t)v9,  (uint64_t)v9 + v8,  (uint64_t)&v7))
  {
    if (a2)
    {
      time_t v4 = time(0LL);
      uint64_t v3 = 0LL;
      time_t v5 = v4 - v7;
      if (v4 <= v7) {
        time_t v5 = 0LL;
      }
      *a2 = v5;
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  free(v9);
  return v3;
}

uint64_t aks_get_internal_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097090LL;
  input[0] = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_internal_state",  ":",  3405,  "",  0,  "",  "");
    uint64_t v4 = 3758097084LL;
    goto LABEL_11;
  }

  if (!v3)
  {
LABEL_11:
    rsize_t v7 = 4096LL;
    goto LABEL_9;
  }

  uint64_t v6 = IOConnectCallMethod(aks_client_connection, 0x8Eu, input, 1u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
  rsize_t v7 = __n;
  if ((_DWORD)v6)
  {
    uint64_t v4 = v6;
  }

  else if (__n - 4097 >= 0xFFFFFFFFFFFFF000LL)
  {
    else {
      uint64_t v4 = 0LL;
    }
    rsize_t v7 = __n;
  }

uint64_t aks_fairplay_wrap(const void *a1, size_t a2, void *a3, size_t *a4)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = 266LL;
  uint64_t result = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      size_t v10 = *a4;
      uint64_t result = IOConnectCallMethod(aks_client_connection, 0x68u, input, 1u, a1, a2, 0LL, 0LL, a3, &v10);
      if (!(_DWORD)result) {
        *a4 = (int)v10;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fairplay_wrap",  ":",  3431,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t _fairplay_generate_csk_internal(unsigned int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = ((unint64_t)a1 << 8) | 1;
  uint64_t result = 3758097090LL;
  if (a4 && a5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      size_t v11 = *a5;
      uint64_t result = IOConnectCallMethod(aks_client_connection, 0x68u, input, 1u, a2, a3, 0LL, 0LL, a4, &v11);
      if (!(_DWORD)result) {
        *a5 = (int)v11;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_fairplay_generate_csk_internal",  ":",  3455,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_fairplay_generate_csk(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return _fairplay_generate_csk_internal(0, a1, a2, a3, a4);
}

uint64_t aks_fairplay_generate_csk_v1(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return _fairplay_generate_csk_internal(1u, a1, a2, a3, a4);
}

uint64_t aks_bak_get_beacon_internal(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  time_t v5 = v4;
  size_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __int128 v19 = 0u;
  memset(v20, 0, sizeof(v20));
  bzero(__s, 0x4000uLL);
  size_t v16 = 0x4000LL;
  input[0] = 1LL;
  input[1] = v10;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0x87u, input, 2u, v9, v7, 0LL, 0LL, __s, &v16);
    if ((_DWORD)v12)
    {
      uint64_t v14 = v12;
    }

    else
    {
      __memcpy_chk();
      *uint64_t v3 = 44LL;
      uint64_t v13 = calloc(0x2CuLL, 1uLL);
      *time_t v5 = v13;
      if (v13)
      {
        __memcpy_chk();
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t v14 = 3758097085LL;
      }
    }
  }

  else
  {
    uint64_t v14 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_bak_get_beacon_internal",  ":",  3491,  "",  0,  "",  "");
  }

  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  return v14;
}

uint64_t aks_bak_get_beacon(int a1, unsigned int a2)
{
  uint64_t beacon_internal = aks_bak_get_beacon_internal(a1 ^ 1u | ((unint64_t)a2 << 16));
  else {
    return 3758604312LL;
  }
}

uint64_t aks_bak_get_swizzler_internal(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  time_t v5 = v4;
  size_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = 2LL;
  input[1] = v1;
  int v37 = 0;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v28 = 0u;
  memset(v27, 0, sizeof(v27));
  bzero(__s, 0x4000uLL);
  size_t v25 = 0x4000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v11 = IOConnectCallMethod(aks_client_connection, 0x87u, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v25);
    if ((_DWORD)v11)
    {
      uint64_t v12 = v11;
    }

    else
    {
      uint64_t v12 = 3758097085LL;
      __memcpy_chk();
      uint64_t v13 = calloc(0x28uLL, 1uLL);
      void *v9 = v13;
      if (v13)
      {
        void *v7 = 40LL;
        __int128 v14 = *(_OWORD *)&v27[1];
        __int128 v15 = *(_OWORD *)&v27[3];
        v13[4] = v27[5];
        *(_OWORD *)uint64_t v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        size_t v16 = calloc(0x91uLL, 1uLL);
        *time_t v5 = v16;
        if (v16)
        {
          uint64_t v12 = 0LL;
          *uint64_t v3 = 145LL;
          __int128 v17 = v29;
          *size_t v16 = v28;
          v16[1] = v17;
          __int128 v18 = v30;
          __int128 v19 = v31;
          __int128 v20 = v33;
          v16[4] = v32;
          v16[5] = v20;
          v16[2] = v18;
          v16[3] = v19;
          __int128 v21 = v34;
          __int128 v22 = v35;
          __int128 v23 = v36;
          *((_BYTE *)v16 + 144) = v37;
          v16[7] = v22;
          v16[8] = v23;
          v16[6] = v21;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_bak_get_swizzler_internal",  ":",  3551,  "",  0,  "",  "");
    uint64_t v12 = 3758097084LL;
  }

  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  memset_s(v27, 0xC4uLL, 0, 0xC4uLL);
  return v12;
}

uint64_t aks_bak_get_swizzler()
{
  return aks_bak_get_swizzler_internal(0LL);
}

uint64_t aks_test_stashed_kek(uint64_t a1)
{
  mach_port_t akstest_client_connection = get_akstest_client_connection();
  if (akstest_client_connection) {
    return IOConnectCallMethod( akstest_client_connection,  0xCu,  0LL,  0,  *(const void **)a1,  *(void *)(a1 + 8),  0LL,  0LL,  0LL,  0LL);
  }
  else {
    return 3758097084LL;
  }
}

uint64_t aks_get_dsme_key(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  bzero(__src, 0x4000uLL);
  size_t __count = 0x4000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v6 = 3758097090LL;
    if (v4 && v3)
    {
      uint64_t v7 = IOConnectCallMethod(aks_client_connection, 0x96u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v7)
      {
        uint64_t v6 = v7;
      }

      else
      {
        uint64_t v8 = calloc(__count, 1uLL);
        *uint64_t v4 = v8;
        if (v8)
        {
          size_t v9 = __count;
          *uint64_t v3 = __count;
          memcpy(v8, __src, v9);
          uint64_t v6 = 0LL;
        }

        else
        {
          uint64_t v6 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_dsme_key",  ":",  3600,  "",  0,  "",  "");
    uint64_t v6 = 3758097084LL;
  }

  memset_s(__src, 0x4000uLL, 0, 0x4000uLL);
  return v6;
}

BOOL aks_bag_in_xart(uint64_t a1, uint64_t a2)
{
  return a2 == 4 || a2 == 32;
}

uint64_t aks_prewarm_sps()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x73u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_prewarm_sps",  ":",  3627,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_sealed_hashes_set(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v12[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 4294967285LL;
  if (a3 && a4 <= 0x30)
  {
    uint64_t v4 = 3758097084LL;
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v6 = aks_client_connection;
      ccder_sizeof_raw_octet_string();
      ccder_sizeof_uint64();
      ccder_sizeof_raw_octet_string();
      uint64_t v7 = ccder_sizeof();
      size_t v8 = v7;
      MEMORY[0x1895F8858](v7);
      uint64_t v10 = (char *)v12 - v9;
      bzero((char *)v12 - v9, v8);
      ccder_encode_raw_octet_string();
      ccder_encode_uint64();
      ccder_encode_raw_octet_string();
      else {
        return 3758097090LL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_sealed_hashes_set",  ":",  3644,  "",  0,  "",  "");
    }
  }

  return v4;
}

uint64_t aks_measure_and_seal_cryptex_manifest(const void *a1, size_t a2)
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x90u, 0LL, 0, a1, a2, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_measure_and_seal_cryptex_manifest",  ":",  3674,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_seal_cryptex_manifest_lock()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x95u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_seal_cryptex_manifest_lock",  ":",  3688,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_lkgp_recover(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x85u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lkgp_recover",  ":",  3704,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_memento_efface_blob(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x8Au, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_memento_efface_blob",  ":",  3720,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_memento_get_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v5 = IOConnectCallMethod(aks_client_connection, 0x8Bu, input, 1u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
    rsize_t v6 = __n;
    if ((_DWORD)v5)
    {
      uint64_t v7 = v5;
    }

    else
    {
      uint64_t v7 = 3758097090LL;
      if (__n - 4097 >= 0xFFFFFFFFFFFFF000LL)
      {
        else {
          uint64_t v7 = 0LL;
        }
        rsize_t v6 = __n;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_memento_get_state",  ":",  3738,  "",  0,  "",  "");
    uint64_t v7 = 3758097084LL;
    rsize_t v6 = 4096LL;
  }

  memset_s(__s, v6, 0, v6);
  return v7;
}

uint64_t aks_set_jcop_supports_updated_kud_policy()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x89u, &input, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_jcop_supports_updated_kud_policy",  ":",  3758,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_set_cx_window(uint64_t a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x97u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_cx_window",  ":",  3774,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_get_cx_window(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  outputStruct[512] = *MEMORY[0x1895F89C0];
  size_t v6 = 4096LL;
  if (!v1) {
    return 4294967285LL;
  }
  uint64_t v2 = (void *)v1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v4 = aks_client_connection;
    bzero(outputStruct, 0x1000uLL);
    uint64_t result = IOConnectCallMethod(v4, 0x98u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, outputStruct, &v6);
    if (!(_DWORD)result)
    {
      if (v6 == 8)
      {
        uint64_t result = 0LL;
        void *v2 = outputStruct[0];
      }

      else
      {
        return 3758604298LL;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_cx_window",  ":",  3791,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t AKSIdentityCreateFirst(const __CFUUID *a1, const __CFData *a2, CFTypeRef *a3)
{
  return AKSIdentityCreateInternal(a1, a2, -1, 0LL, a3);
}

uint64_t AKSIdentityCreateInternal( const __CFUUID *a1, const __CFData *a2, int a3, const __CFData *a4, CFTypeRef *a5)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  CFUUIDBytes v19 = CFUUIDGetUUIDBytes(a1);
  input[0] = a3;
  input[1] = 0LL;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (a2)
  {
    CFDataGetBytePtr(a2);
    CFDataGetLength(a2);
    if (!a4) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }

  if (a4)
  {
LABEL_3:
    CFDataGetBytePtr(a4);
    CFDataGetLength(a4);
  }

LABEL_5:
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v9, v10, v11, v12, v13, (uint64_t)&v19);
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityCreateInternal",  ":",  109,  "",  0,  "",  "");
    free(*(void **)&inputStructCnt[1]);
    uint64_t v15 = 3758097084LL;
    goto LABEL_7;
  }

  uint64_t v15 = IOConnectCallMethod( aks_client_connection,  0x76u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  0LL,  0LL);
  free(*(void **)&inputStructCnt[1]);
  if ((_DWORD)v15)
  {
LABEL_7:
    create_error((CFErrorRef)v15, a5);
    return 0LL;
  }

  return 1LL;
}

  uint64_t v10 = v9 + 1;
  if (v9 + 1 < v1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v9 >= -1)
  {
    if (v8 != -128 && v1 != v10)
    {
      uint64_t v11 = v0[3] & 1LL | (2 * v10);
      v0[2] = v10;
      uint64_t v12 = swift_unknownObjectRetain();
      sub_183CEA934(v12, v7, v1, v11);
      return;
    }

    uint64_t v5 = 0xD00000000000002DLL;
    mach_port_t v4 = 0x8000000183D08E60LL;
    size_t v6 = 283LL;
    goto LABEL_17;
  }

uint64_t AKSIdentityMigrateFirst(const __CFUUID *a1, CFTypeRef *a2)
{
  CFUUIDBytes v13 = CFUUIDGetUUIDBytes(a1);
  uint64_t v12 = 0LL;
  int v11 = 0;
  aks_pack_data(&v12, (unsigned int *)&v11, 1, v3, v4, v5, v6, v7, (uint64_t)&v13);
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityMigrateFirst",  ":",  147,  "",  0,  "",  "");
    free(v12);
    uint64_t v9 = 3758097084LL;
    goto LABEL_3;
  }

  uint64_t v9 = IOConnectCallMethod(aks_client_connection, 0x7Fu, 0LL, 0, v12, v11, 0LL, 0LL, 0LL, 0LL);
  free(v12);
  if ((_DWORD)v9)
  {
LABEL_3:
    create_error((CFErrorRef)v9, a2);
    return 0LL;
  }

  return 1LL;
}

uint64_t AKSIdentityCreate(const __CFUUID *a1, const __CFData *a2, int a3, const __CFData *a4, CFTypeRef *a5)
{
  if (a3 >= 10) {
    int v5 = -a3;
  }
  else {
    int v5 = -1;
  }
  return AKSIdentityCreateInternal(a1, a2, v5, a4, a5);
}

uint64_t AKSIdentityMigrate(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return 0LL;
}

uint64_t AKSIdentityDelete(const __CFUUID *a1, CFTypeRef *a2)
{
  CFUUIDBytes v13 = CFUUIDGetUUIDBytes(a1);
  uint64_t v12 = 0LL;
  int v11 = 0;
  aks_pack_data(&v12, (unsigned int *)&v11, 1, v3, v4, v5, v6, v7, (uint64_t)&v13);
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityDelete",  ":",  195,  "",  0,  "",  "");
    free(v12);
    uint64_t v9 = 3758097084LL;
    goto LABEL_3;
  }

  uint64_t v9 = IOConnectCallMethod(aks_client_connection, 0x77u, 0LL, 0, v12, v11, 0LL, 0LL, 0LL, 0LL);
  free(v12);
  if ((_DWORD)v9)
  {
LABEL_3:
    create_error((CFErrorRef)v9, a2);
    return 0LL;
  }

  return 1LL;
}

uint64_t AKSIdentityChangePasscode(int a1, CFDataRef theData, const __CFData *a3, CFTypeRef *a4)
{
  input[1] = *MEMORY[0x1895F89C0];
  int v17 = 0;
  __int128 v18 = 0LL;
  input[0] = -a1;
  BytePtr = CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  CFDataGetBytePtr(a3);
  CFDataGetLength(a3);
  aks_pack_data(&v18, (unsigned int *)&v17, 2, v8, v9, v10, v11, v12, (uint64_t)BytePtr);
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityChangePasscodeInternal",  ":",  220,  "",  0,  "",  "");
    free(v18);
    uint64_t v15 = 3758097084LL;
    goto LABEL_3;
  }

  uint64_t v14 = 1LL;
  uint64_t v15 = IOConnectCallMethod(aks_client_connection, 0x7Cu, input, 1u, v18, v17, 0LL, 0LL, 0LL, 0LL);
  free(v18);
  if ((_DWORD)v15)
  {
LABEL_3:
    create_error((CFErrorRef)v15, a4);
    return 0LL;
  }

  return v14;
}

uint64_t AKSIdentitySetOption(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return 0LL;
}

uint64_t AKSIdentityGetOption(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return 0LL;
}

uint64_t AKSIdentityLoad(const __CFUUID *a1, int a2, CFTypeRef *a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  if (a2 >= 10) {
    int v4 = -a2;
  }
  else {
    int v4 = -1;
  }
  CFUUIDBytes v16 = CFUUIDGetUUIDBytes(a1);
  uint64_t v15 = 0LL;
  int v14 = 0;
  input[0] = v4;
  aks_pack_data(&v15, (unsigned int *)&v14, 1, v5, v6, v7, v8, v9, (uint64_t)&v16);
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityLoadInternal",  ":",  276,  "",  0,  "",  "");
    free(v15);
    uint64_t v12 = 3758097084LL;
    goto LABEL_6;
  }

  uint64_t v11 = 1LL;
  uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0x78u, input, 1u, v15, v14, 0LL, 0LL, 0LL, 0LL);
  free(v15);
  if ((_DWORD)v12)
  {
LABEL_6:
    create_error((CFErrorRef)v12, a3);
    return 0LL;
  }

  return v11;
}

uint64_t AKSIdentityLogin(const __CFUUID *a1, const __CFData *a2, int a3, CFTypeRef *a4)
{
  uint64_t result = AKSIdentityLoad(a1, a3, a4);
  if ((_DWORD)result)
  {
    if (a3 >= 10) {
      int v13 = -a3;
    }
    else {
      int v13 = -1;
    }
    if ((AKSIdentityUnlockInternal(v13, a2, a4, v8, v9, v10, v11, v12) & 1) != 0)
    {
      return 1LL;
    }

    else
    {
      AKSIdentityUnload(a3, 0LL);
      return 0LL;
    }
  }

  return result;
}

uint64_t AKSIdentityUnlockSession( int a1, const __CFData *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 10) {
    int v8 = -a1;
  }
  else {
    int v8 = -1;
  }
  return AKSIdentityUnlockInternal(v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AKSIdentityUnload(int a1, CFTypeRef *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  if (a1 >= 10) {
    int v3 = -a1;
  }
  else {
    int v3 = -1;
  }
  input[0] = v3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityUnloadInternal",  ":",  337,  "",  0,  "",  "");
    uint64_t v6 = 3758097084LL;
    goto LABEL_6;
  }

  uint64_t v5 = 1LL;
  uint64_t v6 = IOConnectCallMethod(aks_client_connection, 0x79u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  if ((_DWORD)v6)
  {
LABEL_6:
    create_error((CFErrorRef)v6, a2);
    return 0LL;
  }

  return v5;
}

BOOL AKSIdentityCopyVolumeCookie(int a1, CFUUIDRef uuid, CFDataRef *a3, CFTypeRef *a4)
{
  if (a1 >= 10) {
    int v6 = -a1;
  }
  else {
    int v6 = -1;
  }
  size_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if (uuid)
  {
    CFUUIDBytes v10 = CFUUIDGetUUIDBytes(uuid);
    uint64_t v7 = (__CFError *)aks_copy_volume_cookie_persona(v6, (uint64_t)&v10, &v12, &v11);
  }

  else
  {
    uint64_t v7 = (__CFError *)aks_copy_volume_cookie(v6, &v12, &v11);
  }

  int v8 = (int)v7;
  if ((_DWORD)v7)
  {
    create_error(v7, a4);
  }

  else
  {
    *a3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v12, v11);
    aks_dealloc(v12, v11);
  }

  return v8 == 0;
}

BOOL AKSVolumeMapByUUID(const __CFUUID *a1, int a2, const __CFUUID *a3, const __CFData *a4, CFTypeRef *a5)
{
  CFUUIDBytes v12 = CFUUIDGetUUIDBytes(a1);
  if (a3)
  {
    CFUUIDGetUUIDBytes(a3);
    CFDataGetBytePtr(a4);
    CFDataGetLength(a4);
    uint64_t v9 = (__CFError *)aks_set_keybag_for_volume_with_cookie_persona(a2, (uint64_t)&v12, 0);
  }

  else
  {
    CFDataGetBytePtr(a4);
    CFDataGetLength(a4);
    uint64_t v9 = (__CFError *)aks_set_keybag_for_volume_with_cookie(a2, (uint64_t)&v12, 0);
  }

  int v10 = (int)v9;
  if ((_DWORD)v9) {
    create_error(v9, a5);
  }
  return v10 == 0;
}

BOOL AKSVolumeUnmapByUUID(const __CFUUID *a1, CFTypeRef *a2)
{
  CFUUIDBytes v6 = CFUUIDGetUUIDBytes(a1);
  int v3 = (__CFError *)aks_set_keybag_for_volume(-1, (uint64_t)&v6, 0);
  int v4 = (int)v3;
  if ((_DWORD)v3) {
    create_error(v3, a2);
  }
  return v4 == 0;
}

BOOL AKSVolumeMap(const __CFString *a1, int a2, const __CFUUID *a3, CFTypeRef *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  CFDataRef theData = 0LL;
  size_t __size = 0LL;
  bzero(buffer, 0x400uLL);
  if (!CFStringGetCString(a1, buffer, 1024LL, 0x8000100u))
  {
    create_error((CFErrorRef)0xE00002C2LL, a4);
    BOOL v12 = 0LL;
    int v10 = 0LL;
    int v8 = 0LL;
    goto LABEL_11;
  }

  int v8 = copy_apfs_volume_uuid_for_disk(a1, a4);
  if (!v8) {
    goto LABEL_18;
  }
  if (APFSVolumePayloadGet())
  {
    if (AKSIdentityCopyVolumeCookie(a2, a3, &theData, a4))
    {
      uint64_t v9 = theData;
      CFDataGetBytePtr(theData);
      CFDataGetLength(v9);
      if (!APFSVolumePayloadSet())
      {
        int v10 = 0LL;
LABEL_10:
        BOOL v12 = AKSVolumeMapByUUID(v8, a2, a3, v9, a4);
        goto LABEL_11;
      }

      create_error((CFErrorRef)0xE007C00ALL, a4);
    }

LABEL_18:
    BOOL v12 = 0LL;
    int v10 = 0LL;
    goto LABEL_11;
  }

  int v10 = (UInt8 *)malloc(__size);
  if (APFSVolumePayloadGet())
  {
    uint64_t v14 = 3758604298LL;
  }

  else
  {
    size_t v11 = CFDataCreateWithBytesNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v10,  __size,  (CFAllocatorRef)*MEMORY[0x189604DC8]);
    CFDataRef theData = v11;
    if (v11)
    {
      uint64_t v9 = v11;
      goto LABEL_10;
    }

    uint64_t v14 = 3758097085LL;
  }

  create_error((CFErrorRef)v14, a4);
  BOOL v12 = 0LL;
LABEL_11:
  free(v10);
  if (theData) {
    CFRelease(theData);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

  if (notification) {
    IOObjectRelease(notification);
  }
  if (v9) {
    IONotificationPortDestroy(v9);
  }
  if (v11)
  {
    CFUUIDBytes v19 = (dispatch_object_s *)v11[3];
    if (v19) {
      dispatch_release(v19);
    }
    __int128 v20 = (const void *)v11[1];
    if (v20) {
      _Block_release(v20);
    }
    free(v11);
    return 0LL;
  }

  return v11;
}

    __break(1u);
  }

    __break(0x5519u);
    goto LABEL_19;
  }

  return result;
}

          __break(0x5519u);
          return result;
        }

CFErrorRef create_error(CFErrorRef result, CFTypeRef *a2)
{
  if (a2)
  {
    int v3 = (int)result;
    if (*a2)
    {
      CFRelease(*a2);
      *a2 = 0LL;
    }

    uint64_t result = CFErrorCreate((CFAllocatorRef)*MEMORY[0x189604DB0], (CFErrorDomain)*MEMORY[0x189604F50], v3, 0LL);
    *a2 = result;
  }

  return result;
}

CFUUIDRef copy_apfs_volume_uuid_for_disk(const __CFString *a1, CFTypeRef *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  bzero(buffer, 0x400uLL);
  CFMutableDictionaryRef properties = 0LL;
  if (CFStringGetCString(a1, buffer, 1024LL, 0x8000100u))
  {
    uint64_t v4 = 3758097090LL;
    mach_port_t v5 = *MEMORY[0x1896086B0];
    CFUUIDBytes v6 = IOBSDNameMatching(*MEMORY[0x1896086B0], 0, buffer);
    io_service_t MatchingService = IOServiceGetMatchingService(v5, v6);
    if (!MatchingService) {
      goto LABEL_13;
    }
    io_registry_entry_t v8 = MatchingService;
    if (!IOObjectConformsTo(MatchingService, "AppleAPFSVolume")) {
      goto LABEL_13;
    }
    uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    uint64_t v10 = IORegistryEntryCreateCFProperties(v8, &properties, (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
    if ((_DWORD)v10)
    {
      uint64_t v4 = v10;
      goto LABEL_13;
    }

    Value = (const __CFString *)CFDictionaryGetValue(properties, @"UUID");
    if (Value)
    {
      BOOL v12 = Value;
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 == CFStringGetTypeID())
      {
        CFUUIDRef v14 = CFUUIDCreateFromString(v9, v12);
        uint64_t v4 = 3758604298LL;
        if (v14) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
  }

  uint64_t v4 = 3758604298LL;
LABEL_13:
  create_error((CFErrorRef)v4, a2);
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s Failed to get volume UUID for %s%s\n",  "aks",  "",  "",  "",  "copy_apfs_volume_uuid_for_disk",  ":",  422,  "",  0,  "",  buffer,  "");
  CFUUIDRef v14 = 0LL;
LABEL_8:
  if (properties) {
    CFRelease(properties);
  }
  return v14;
}

CFUUIDRef AKSVolumeUnmap(const __CFString *a1, CFTypeRef *a2)
{
  uint64_t result = copy_apfs_volume_uuid_for_disk(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    BOOL v5 = AKSVolumeUnmapByUUID(result, a2);
    CFRelease(v4);
    return (const __CFUUID *)v5;
  }

  return result;
}

uint64_t AKSIdentityCopyGroupUUIDBytes(int a1, _OWORD *a2, CFTypeRef *a3)
{
  uint64_t v4 = 3758097090LL;
  int value = 0LL;
  CFDictionaryRef v11 = 0LL;
  if (a2)
  {
    uint64_t v6 = a1 >= 10 ? -a1 : 0xFFFFFFFFLL;
    uint64_t configuration = aks_get_configuration(v6);
    if ((_DWORD)configuration)
    {
      uint64_t v4 = configuration;
    }

    else if (CFDictionaryGetValueIfPresent(v11, @"GroupUUID", (const void **)&value))
    {
      CFTypeID v8 = CFGetTypeID(value);
      if (v8 == CFDataGetTypeID())
      {
        if (CFDataGetLength((CFDataRef)value) == 16)
        {
          uint64_t v4 = 0LL;
          *a2 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)value);
        }

        else
        {
          uint64_t v4 = 3758604298LL;
          fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s invalid uuid size%s\n",  "aks",  "",  "",  "",  "AKSIdentityCopyGroupUUIDBytes");
        }
      }

      else
      {
        uint64_t v4 = 3758604298LL;
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s invalid type%s\n",  "aks",  "",  "",  "",  "AKSIdentityCopyGroupUUIDBytes");
      }
    }

    else
    {
      uint64_t v4 = 3758097136LL;
    }

    if (v11)
    {
      CFRelease(v11);
      CFDictionaryRef v11 = 0LL;
    }

    if (!(_DWORD)v4) {
      return 1LL;
    }
  }

  create_error((CFErrorRef)v4, a3);
  return 0LL;
}

uint64_t AKSIdentityCopyGroupUUID(int a1, CFUUIDRef *a2, CFTypeRef *a3)
{
  CFUUIDBytes v8 = (CFUUIDBytes)0LL;
  if (!a2)
  {
    uint64_t v7 = 3758097090LL;
LABEL_8:
    create_error((CFErrorRef)v7, a3);
    return 0LL;
  }

  uint64_t result = AKSIdentityCopyGroupUUIDBytes(a1, &v8, a3);
  if (!(_DWORD)result) {
    return result;
  }
  CFUUIDRef v6 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], v8);
  *a2 = v6;
  if (!v6)
  {
    uint64_t v7 = 3758097085LL;
    goto LABEL_8;
  }

  return 1LL;
}

uint64_t AKSIdentityCopyUserUUIDBytes(int a1, _OWORD *a2, CFTypeRef *a3)
{
  uint64_t v4 = 3758097090LL;
  int value = 0LL;
  CFDictionaryRef v11 = 0LL;
  if (a2)
  {
    uint64_t v6 = a1 >= 10 ? -a1 : 0xFFFFFFFFLL;
    uint64_t configuration = aks_get_configuration(v6);
    if ((_DWORD)configuration)
    {
      uint64_t v4 = configuration;
    }

    else if (CFDictionaryGetValueIfPresent(v11, @"UserUUID", (const void **)&value))
    {
      CFTypeID v8 = CFGetTypeID(value);
      if (v8 == CFDataGetTypeID())
      {
        if (CFDataGetLength((CFDataRef)value) == 16)
        {
          uint64_t v4 = 0LL;
          *a2 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)value);
        }

        else
        {
          uint64_t v4 = 3758604298LL;
          fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s invalid uuid size%s\n",  "aks",  "",  "",  "",  "AKSIdentityCopyUserUUIDBytes");
        }
      }

      else
      {
        uint64_t v4 = 3758604298LL;
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s invalid type%s\n",  "aks",  "",  "",  "",  "AKSIdentityCopyUserUUIDBytes");
      }
    }

    else
    {
      uint64_t v4 = 3758097136LL;
    }

    if (v11)
    {
      CFRelease(v11);
      CFDictionaryRef v11 = 0LL;
    }

    if (!(_DWORD)v4) {
      return 1LL;
    }
  }

  create_error((CFErrorRef)v4, a3);
  return 0LL;
}

uint64_t AKSIdentityCopyUserUUID(int a1, CFUUIDRef *a2, CFTypeRef *a3)
{
  CFUUIDBytes v8 = (CFUUIDBytes)0LL;
  if (!a2)
  {
    uint64_t v7 = 3758097090LL;
LABEL_8:
    create_error((CFErrorRef)v7, a3);
    return 0LL;
  }

  uint64_t result = AKSIdentityCopyUserUUIDBytes(a1, &v8, a3);
  if (!(_DWORD)result) {
    return result;
  }
  CFUUIDRef v6 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], v8);
  *a2 = v6;
  if (!v6)
  {
    uint64_t v7 = 3758097085LL;
    goto LABEL_8;
  }

  return 1LL;
}

uint64_t AKSIdentityUnlock( CFDataRef theData, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AKSIdentityUnlockInternal(-3, theData, a2, a4, a5, a6, a7, a8);
}

uint64_t AKSIdentityUnlockInternal( int a1, CFDataRef theData, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  input[1] = *MEMORY[0x1895F89C0];
  int v15 = 0;
  CFUUIDBytes v16 = 0LL;
  input[0] = a1;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
  }

  else
  {
    BytePtr = 0LL;
  }

  aks_pack_data(&v16, (unsigned int *)&v15, 1, a4, a5, a6, a7, a8, (uint64_t)BytePtr);
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityUnlockInternal",  ":",  567,  "",  0,  "",  "");
    free(v16);
    uint64_t v13 = 3758097084LL;
    goto LABEL_6;
  }

  uint64_t v12 = 1LL;
  uint64_t v13 = IOConnectCallMethod(aks_client_connection, 0x7Bu, input, 1u, v16, v15, 0LL, 0LL, 0LL, 0LL);
  free(v16);
  if ((_DWORD)v13)
  {
LABEL_6:
    create_error((CFErrorRef)v13, a3);
    return 0LL;
  }

  return v12;
}

uint64_t AKSIdentityLock(CFTypeRef *a1)
{
  return AKSIdentityLockInternal(-3, a1);
}

uint64_t AKSIdentityLockInternal(int a1, CFTypeRef *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityLockInternal",  ":",  620,  "",  0,  "",  "");
    uint64_t v5 = 3758097084LL;
    goto LABEL_3;
  }

  uint64_t v4 = 1LL;
  uint64_t v5 = IOConnectCallMethod(aks_client_connection, 0x7Au, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  if ((_DWORD)v5)
  {
LABEL_3:
    create_error((CFErrorRef)v5, a2);
    return 0LL;
  }

  return v4;
}

uint64_t AKSIdentityLockSession(int a1, CFTypeRef *a2)
{
  if (a1 >= 10) {
    int v2 = -a1;
  }
  else {
    int v2 = -1;
  }
  return AKSIdentityLockInternal(v2, a2);
}

uint64_t AKSIdentityGetLockState(uint64_t a1, CFTypeRef *a2)
{
  return 0LL;
}

BOOL AKSIdentityAddPersona(int a1, const __CFData *a2, CFUUIDRef uuid, CFTypeRef *a4)
{
  if (a1 >= 10) {
    int v6 = -a1;
  }
  else {
    int v6 = -1;
  }
  CFUUIDBytes v12 = CFUUIDGetUUIDBytes(uuid);
  BytePtr = CFDataGetBytePtr(a2);
  uint64_t Length = CFDataGetLength(a2);
  uint64_t v9 = (__CFError *)aks_keybag_persona_create(v6, (uint64_t)BytePtr, Length, (uint64_t)&v12);
  int v10 = (int)v9;
  if ((_DWORD)v9) {
    create_error(v9, a4);
  }
  return v10 == 0;
}

BOOL AKSIdentityDeletePersona(int a1, CFUUIDRef uuid, CFTypeRef *a3)
{
  if (a1 >= 10) {
    int v4 = -a1;
  }
  else {
    int v4 = -1;
  }
  CFUUIDBytes v8 = CFUUIDGetUUIDBytes(uuid);
  uint64_t v5 = (__CFError *)aks_keybag_persona_delete(v4, (uint64_t)&v8);
  int v6 = (int)v5;
  if ((_DWORD)v5) {
    create_error(v5, a3);
  }
  return v6 == 0;
}

uint64_t AKSIdentityOperation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return 0LL;
}

uint64_t AKSIdentityRemoteSession(CFTypeRef *a1)
{
  return 0LL;
}

uint64_t AKSIdentityRegisterUnlockToken(CFTypeRef *a1)
{
  return 0LL;
}

uint64_t AKSIdentityReset(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return 0LL;
}

uint64_t AKSIdentityUnlockWithToken(CFTypeRef *a1)
{
  return 0LL;
}

uint64_t AKSIdentityList(uint64_t a1, CFTypeRef *a2)
{
  return 0LL;
}

uint64_t AKSBackupEnableForVolume(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  return 0LL;
}

uint64_t AKSBackupDisableForVolume(uint64_t a1, CFTypeRef *a2)
{
  return 0LL;
}

uint64_t AKSBackupCopyBackupBagUUIDForVolume(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return 0LL;
}

uint64_t AKSBackupCopyBackupBagUUIDForBag(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return 0LL;
}

uint64_t AKSIdentityGetPrimary(CFUUIDRef *a1, CFUUIDRef *a2, CFTypeRef *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  memset(outputStruct, 0, sizeof(outputStruct));
  *(void *)uint64_t v13 = 256LL;
  *(void *)&__s.byte0 = 0LL;
  *(void *)&__s.byte8 = 0LL;
  *(void *)&v16.byte0 = 0LL;
  *(void *)&v16.byte8 = 0LL;
  v15[0] = 0LL;
  v15[1] = 0LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSIdentityGetPrimary",  ":",  779,  "",  0,  "",  "");
    uint64_t v8 = 3758097084LL;
    goto LABEL_12;
  }

  uint64_t v7 = IOConnectCallMethod(aks_client_connection, 0x7Du, &input, 0, 0LL, 0LL, 0LL, 0LL, outputStruct, (size_t *)v13);
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    goto LABEL_12;
  }

  uint64_t v8 = 3758604298LL;
  if (v13[1])
  {
LABEL_12:
    create_error((CFErrorRef)v8, a3);
    return 0LL;
  }

  if (decode_primary_identity_state((uint64_t)outputStruct, v13[0], &__s, &v16, (uint64_t)v15))
  {
    uint64_t v8 = 3758604307LL;
    goto LABEL_12;
  }

  uint64_t v8 = 3758097090LL;
  uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFUUIDRef v10 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], __s);
  *a1 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  CFUUIDRef v11 = CFUUIDCreateFromUUIDBytes(v9, v16);
  *a2 = v11;
  if (!v11) {
    goto LABEL_12;
  }
  return 1LL;
}

BOOL AKSIdentityTransferPrimary(int a1, const __CFData *a2, int a3, const __CFData *a4, CFTypeRef *a5)
{
  if (a1 >= 10) {
    int v6 = -a1;
  }
  else {
    int v6 = -1;
  }
  if (a3 >= 10) {
    int v7 = -a3;
  }
  else {
    int v7 = -1;
  }
  uint64_t v8 = (__CFError *)_transfer_primary_identity(v6, a2, v7, a4);
  int v9 = (int)v8;
  if ((_DWORD)v8) {
    create_error(v8, a5);
  }
  return v9 == 0;
}

uint64_t _transfer_primary_identity(int a1, CFDataRef theData, int a3, const __CFData *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  input[0] = a1;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
  }

  else
  {
    BytePtr = 0LL;
    CFIndex Length = 0LL;
  }

  __int128 v14 = 0u;
  input[1] = (uint64_t)BytePtr;
  uint64_t input[2] = Length;
  uint64_t input[3] = a3;
  if (a4)
  {
    int v9 = CFDataGetBytePtr(a4);
    CFIndex v10 = CFDataGetLength(a4);
  }

  else
  {
    int v9 = 0LL;
    CFIndex v10 = 0LL;
  }

  *(void *)&__int128 v14 = v9;
  *((void *)&v14 + 1) = v10;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x7Eu, input, 6u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_transfer_primary_identity",  ":",  809,  "",  0,  "",  "");
  return 3758097084LL;
}

BOOL AKSIdentitySetPrimary(int a1, const __CFData *a2, CFTypeRef *a3)
{
  int v4 = (__CFError *)_transfer_primary_identity(-1, 0LL, -a1, a2);
  int v5 = (int)v4;
  if ((_DWORD)v4) {
    create_error(v4, a3);
  }
  return v5 == 0;
}

uint64_t AKSIdentityStashLoad(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  return 0LL;
}

uint64_t AKSIdentityStashCreate(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return 0LL;
}

uint64_t AKSGetLastUser(CFUUIDRef *a1, CFTypeRef *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = 2LL;
  memset(outputStruct, 0, sizeof(outputStruct));
  size_t v9 = 256LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    uint64_t v8 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "AKSGetLastUser",  ":",  901,  "",  0,  "",  "");
    goto LABEL_11;
  }

  uint64_t v5 = IOConnectCallMethod(aks_client_connection, 0x80u, input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, &v9);
  if ((_DWORD)v5)
  {
    uint64_t v8 = v5;
    goto LABEL_11;
  }

  if (v9 != 16)
  {
    uint64_t v8 = 3758604298LL;
LABEL_11:
    create_error((CFErrorRef)v8, a2);
    return 0LL;
  }

  CFUUIDRef v6 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], outputStruct[0]);
  *a1 = v6;
  if (!v6)
  {
    uint64_t v8 = 3758097090LL;
    goto LABEL_11;
  }

  return 1LL;
}

uint64_t AKSVolumeBootstrapFS(const __CFString *a1, int a2, CFTypeRef *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(buffer, 0x400uLL);
  if (!CFStringGetCString(a1, buffer, 1024LL, 0x8000100u))
  {
    uint64_t v6 = 3758604298LL;
    goto LABEL_6;
  }

  if (a2)
  {
    uint64_t v6 = aks_bootstrap_user_fs(buffer, 0);
    if (!(_DWORD)v6) {
      return 1LL;
    }
LABEL_6:
    create_error((CFErrorRef)v6, a3);
    return 0LL;
  }

  uint64_t v6 = aks_bootstrap_fs(buffer, 0);
  if ((_DWORD)v6) {
    goto LABEL_6;
  }
  return 1LL;
}

uint64_t AKSVolumeAllowlistFS(const __CFString *a1, int a2, CFTypeRef *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(buffer, 0x400uLL);
  if (!CFStringGetCString(a1, buffer, 1024LL, 0x8000100u))
  {
    uint64_t v6 = 3758604298LL;
    goto LABEL_6;
  }

  if (a2)
  {
    uint64_t v6 = aks_setupallowlist_user_fs(buffer, 0);
    if (!(_DWORD)v6) {
      return 1LL;
    }
LABEL_6:
    create_error((CFErrorRef)v6, a3);
    return 0LL;
  }

  uint64_t v6 = aks_setupallowlist_fs((uint64_t)buffer);
  if ((_DWORD)v6) {
    goto LABEL_6;
  }
  return 1LL;
}

BOOL AKSIdentityGetSessionInfo(__CFDictionary **a1, CFTypeRef *a2)
{
  return _get_info(4294967293LL, a1, a2);
}

BOOL _get_info(uint64_t a1, __CFDictionary **a2, CFTypeRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  int v7 = (__CFError *)set_lock_state(a1, Mutable);
  if ((_DWORD)v7)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    create_error(v7, a3);
  }

  else
  {
    *a2 = Mutable;
  }

  return (_DWORD)v7 == 0;
}

BOOL AKSIdentityGetInfo(int a1, __CFDictionary **a2, CFTypeRef *a3)
{
  if (a1 >= 10) {
    uint64_t v3 = -a1;
  }
  else {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  return _get_info(v3, a2, a3);
}

void *AKSEventsRegister(dispatch_queue_s *a1, const void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  io_object_t notification = 0;
  if (!a1 || !a2)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      CFUUIDBytes v16 = (os_log_s *)MEMORY[0x1895F8DA0];
      int v17 = "bad arguments";
LABEL_12:
      uint32_t v18 = 2;
LABEL_15:
      _os_log_impl(&dword_183CB9000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, v18);
    }

void aksNotificationCB(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v11 = 0;
    int v5 = 0;
LABEL_10:
    v15[0] = 67109376;
    v15[1] = v11;
    __int16 v16 = 1024;
    int v17 = v5;
    CFUUIDBytes v12 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v13 = "invalid context %d %d";
    uint32_t v14 = 14;
    goto LABEL_11;
  }

  int v5 = *(_DWORD *)(a1 + 20);
  if (v5 != 1902207865)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v11 = 1;
    goto LABEL_10;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v15[0]) = 0;
    CFUUIDBytes v12 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v13 = "OOM";
    uint32_t v14 = 2;
LABEL_11:
    _os_log_impl(&dword_183CB9000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)v15, v14);
    return;
  }

  uint64_t v9 = Mutable;
  set_info_key(Mutable, @"h", (int)a4);
  switch(a3)
  {
    case -469774324:
      CFIndex v10 = *(void (**)(void))(*(void *)(a1 + 8) + 16LL);
      goto LABEL_19;
    case -469774323:
    case -469774321:
      set_lock_state(a4, v9);
      CFIndex v10 = *(void (**)(void))(*(void *)(a1 + 8) + 16LL);
      goto LABEL_19;
    case -469774320:
      CFIndex v10 = *(void (**)(void))(*(void *)(a1 + 8) + 16LL);
      goto LABEL_19;
    case -469774319:
      CFIndex v10 = *(void (**)(void))(*(void *)(a1 + 8) + 16LL);
      goto LABEL_19;
    case -469774318:
      CFIndex v10 = *(void (**)(void))(*(void *)(a1 + 8) + 16LL);
LABEL_19:
      v10();
      break;
    default:
      break;
  }

  CFRelease(v9);
}

void AKSEventsUnregister(uint64_t a1)
{
  if (a1)
  {
    IOObjectRelease(*(_DWORD *)(a1 + 16));
    IONotificationPortDestroy(*(IONotificationPortRef *)a1);
    int v2 = *(dispatch_queue_s **)(a1 + 24);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = __AKSEventsUnregister_block_invoke;
    block[3] = &__block_descriptor_tmp_2;
    block[4] = a1;
    dispatch_barrier_async(v2, block);
  }

void __AKSEventsUnregister_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)(v2 + 20) = 0;
  _Block_release(*(const void **)(v2 + 8));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 24LL));
  free(*(void **)(a1 + 32));
}

BOOL AKSIdentityGetTimeWindows(int a1, void *a2, void *a3, CFTypeRef *a4)
{
  if (a1 >= 10) {
    uint64_t v4 = -a1;
  }
  else {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  return get_time_windows(v4, a2, a3, a4);
}

BOOL get_time_windows(uint64_t a1, void *a2, void *a3, CFTypeRef *a4)
{
  internal_state = (__CFError *)aks_get_internal_state(a1);
  int v8 = (int)internal_state;
  if ((_DWORD)internal_state)
  {
    create_error(internal_state, a4);
  }

  else
  {
    if (a2) {
      *a2 = 0LL;
    }
    if (a3) {
      *a3 = *(void *)&v10[12];
    }
  }

  return v8 == 0;
}

BOOL AKSIdentityGetSessionTimeWindows(void *a1, void *a2, CFTypeRef *a3)
{
  return get_time_windows(4294967293LL, a1, a2, a3);
}

uint64_t set_lock_state(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = 3758097084LL;
  *(_WORD *)byte15 = 0;
  __int128 v13 = 0u;
  memset(byte7, 0, sizeof(byte7));
  else {
    uint64_t v5 = DWORD1(v13);
  }
  set_info_key(a2, @"ls", v5);
  set_info_key(a2, @"els", DWORD1(v13));
  set_info_key(a2, @"state", v13);
  set_info_key(a2, @"kms", *(uint64_t *)((char *)&byte7[1] + 2));
  char v6 = BYTE2(byte7[1]);
  if ((BYTE2(byte7[1]) & 1) == 0)
  {
    if ((BYTE2(byte7[1]) & 2) == 0) {
      goto LABEL_11;
    }
LABEL_33:
    CFDictionarySetValue(a2, @"cxd", (const void *)*MEMORY[0x189604DE8]);
    if ((BYTE2(byte7[1]) & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  CFDictionarySetValue(a2, @"cxx", (const void *)*MEMORY[0x189604DE8]);
  char v6 = BYTE2(byte7[1]);
  if ((BYTE2(byte7[1]) & 2) != 0) {
    goto LABEL_33;
  }
LABEL_11:
  if ((v6 & 0x10) != 0) {
LABEL_12:
  }
    CFDictionarySetValue(a2, @"oneness", (const void *)*MEMORY[0x189604DE8]);
LABEL_13:
  if ((v13 & 8) != 0) {
    CFDictionarySetValue(a2, @"th", (const void *)*MEMORY[0x189604DE8]);
  }
  set_info_key(a2, @"boff", *((uint64_t *)&v13 + 1));
  set_info_key(a2, @"fa", LODWORD(byte7[0]));
  set_info_key(a2, @"countdown", *(uint64_t *)((char *)byte7 + 10));
  set_info_key(a2, @"ma", *(unsigned int *)((char *)&byte7[1] + 14));
  if (LODWORD(byte7[0]) >= *(_DWORD *)((char *)&byte7[1] + 14))
  {
    io_service_t v7 = (const void *)*MEMORY[0x189604DE8];
    CFDictionarySetValue(a2, @"pb", (const void *)*MEMORY[0x189604DE8]);
    if ((isEduMode_once & 1) == 0)
    {
      uint32_t multiuser_flags = 0;
      host_t v8 = MEMORY[0x186E25E10]();
      if (!host_get_multiuser_config_flags(v8, &multiuser_flags))
      {
        if ((multiuser_flags & 0x80000000) != 0) {
          isEduMode_uint64_t result = 1;
        }
        isEduMode_once = 1;
      }
    }

    if (isEduMode_result == 1) {
      CFDictionarySetValue(a2, @"sw", v7);
    }
  }

  else {
    unsigned int v9 = -1;
  }
  else {
    uint64_t v10 = 501LL;
  }
  set_info_key(a2, @"uid", v10);
  uint64_t v2 = (uint64_t)CFUUIDCreateWithBytes( (CFAllocatorRef)*MEMORY[0x189604DB0],  BYTE2(byte7[2]),  BYTE3(byte7[2]),  BYTE4(byte7[2]),  BYTE5(byte7[2]),  BYTE6(byte7[2]),  BYTE7(byte7[2]),  BYTE8(byte7[2]),  BYTE9(byte7[2]),  BYTE10(byte7[2]),  BYTE11(byte7[2]),  BYTE12(byte7[2]),  BYTE13(byte7[2]),  BYTE14(byte7[2]),  HIBYTE(byte7[2]),  byte15[0],  byte15[1]);
  CFDictionarySetValue(a2, @"user_uuid", (const void *)v2);
  if (v2)
  {
    CFRelease((CFTypeRef)v2);
    return 0LL;
  }

  return v2;
}

void set_info_key(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  if (a1 && a2)
  {
    CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberLongLongType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }

void *initializeBufferWithCopyOfBuffer for DERDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DERDictionary()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for DERDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for DERDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DERDictionary(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DERDictionary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DERDictionary()
{
  return &type metadata for DERDictionary;
}

uint64_t sub_183CDBF08@<X0>(uint64_t *a1@<X0>, char **a2@<X1>, char **a3@<X8>)
{
  int64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  int64_t v10 = v9 >> 1;
  if (v8 == v9 >> 1)
  {
LABEL_47:
    *a3 = *a2;
    return swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v43 = a3;
    uint64_t v54 = v4;
    uint64_t v12 = *a1;
    uint64_t v11 = a1[1];
    uint64_t v46 = v11;
    uint64_t v47 = v11 + 112;
    unint64_t v48 = v9 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v45 = *a1;
    while (1)
    {
      unint64_t v13 = v9 >> 1;
      if (v8 >= (uint64_t)(v9 >> 1))
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __int128 v21 = (void *)v9;
        if (!*(void *)(v13 + 64))
        {
          *a1 = v45;
          a1[1] = v46;
          a1[2] = v5;
          a1[3] = v9;
          __break(1u);
LABEL_67:
          *a1 = v12;
          a1[1] = v11;
          a1[2] = v52;
          a1[3] = v53;
          __break(1u);
        }

        swift_unknownObjectRetain();
        if (v3 == 16 && (_DWORD)v4 == 0)
        {
          *a1 = v45;
          a1[1] = v46;
          a1[2] = v5;
          a1[3] = (uint64_t)v21;
          __break(1u);
        }

LABEL_74:
        __break(1u);
LABEL_75:
        *a1 = v12;
        a1[1] = v11;
        a1[2] = v52;
        a1[3] = v53;
        uint64_t v37 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1OctetString.swift", 35LL, 2, 26LL);
        sub_183CDD030();
        swift_allocError();
        uint64_t *v38 = v37;
        j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
        j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
        swift_unknownObjectRetain();
        j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
        swift_unknownObjectRetain();
        swift_willThrow();
        sub_183CDD140( v59,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD078);
        goto LABEL_78;
      }

      if (v10 <= v8) {
        goto LABEL_52;
      }
      if (v13 < v10) {
        goto LABEL_53;
      }
      unint64_t v13 = v11 + 96 * v8;
      uint64_t v3 = *(void *)v13;
      LODWORD(v4) = *(unsigned __int8 *)(v13 + 8);
      uint64_t v5 = v8 + 1;
      unint64_t v14 = v9 & 1;
      unint64_t v9 = v14 | v48;
      if (!*(_BYTE *)(v13 + 24)) {
        goto LABEL_65;
      }
      uint64_t v6 = *(void *)(v13 + 16);
      if (v5 == v10)
      {
        uint64_t v15 = v10;
      }

      else
      {
        unint64_t v13 = v47 + 96 * v8;
        uint64_t v15 = v8 + 1;
        do
        {
          if (v15 >= v10)
          {
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }

          if (v6 >= *(void *)v13) {
            goto LABEL_15;
          }
          uint64_t v16 = v15 + 1;
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_50;
          }
          ++v15;
          v13 += 96LL;
        }

        while (v16 != v10);
        uint64_t v15 = v10;
LABEL_15:
        if (v15 <= v8) {
          goto LABEL_54;
        }
        if (v15 < 0) {
          goto LABEL_55;
        }
      }

      unint64_t v13 = v15 - v5;
      if (__OFSUB__(v15, v5)) {
        goto LABEL_56;
      }
      if ((v13 & 0x8000000000000000LL) != 0) {
        goto LABEL_57;
      }
      int64_t v17 = v10 - v5;
      if (__OFSUB__(v10, v5)) {
        goto LABEL_58;
      }
      if (!v13 || v17 < 0 || (int64_t v18 = v10, v17 >= (uint64_t)v13))
      {
        int64_t v18 = v15;
        if (__OFADD__(v5, v13)) {
          goto LABEL_62;
        }
        if (v10 < v15) {
          goto LABEL_59;
        }
      }

      if (v18 <= v8) {
        goto LABEL_60;
      }
      if (v5 != v15)
      {
        if (v5 >= v15) {
          goto LABEL_63;
        }
        uint64_t v19 = (uint64_t *)(v47 + 96 * v8);
        do
        {
          uint64_t v20 = *v19;
          v19 += 12;
          if (v6 >= v20)
          {
            __break(1u);
            goto LABEL_49;
          }

          --v13;
        }

        while (v13);
        unint64_t v13 = *(void *)(v11 + 96 * v5 + 16);
        if (v13 != v6 + 1) {
          goto LABEL_64;
        }
      }

      int64_t v52 = v18;
      unint64_t v53 = v14 | v48;
      swift_unknownObjectRetain();
      if (v3 != 16 || (_DWORD)v4) {
        goto LABEL_74;
      }
      v58[0] = v12;
      v58[1] = v11;
      uint64_t v3 = v14 | (2 * v15);
      v58[2] = v5;
      v58[3] = v3;
      v58[4] = v6;
      __int128 v21 = v58;
      sub_183CDE090((uint64_t)v59);
      sub_183CDCFA8((uint64_t)v59, (uint64_t)v67);
      if (!(void)v68)
      {
        *a1 = v12;
        a1[1] = v11;
        a1[2] = v52;
        a1[3] = v53;
        uint64_t v39 = sub_183CDD978( 0xD00000000000002ALL,  0x8000000183D08A90LL,  (uint64_t)"AppleKeyStore/ASN1.swift",  24LL,  2,  1107LL);
        sub_183CDD030();
        swift_allocError();
        *uint64_t v40 = v39;
        j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
        j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
        swift_unknownObjectRetain();
        j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
        swift_unknownObjectRetain();
        swift_willThrow();
        goto LABEL_78;
      }

      v71[1] = v67[2];
      v71[2] = v67[3];
      v71[3] = v68;
      v71[4] = v69;
      __int128 v70 = v67[0];
      v71[0] = v67[1];
      if (*(void *)&v67[0] != 12LL || BYTE8(v70)) {
        goto LABEL_75;
      }
      sub_183CDD0CC((uint64_t)v71, (uint64_t)v72);
      sub_183CDD0CC((uint64_t)v72, (uint64_t)&v75);
      if (v78 != 1) {
        goto LABEL_67;
      }
      __int128 v56 = v75;
      uint64_t v50 = v77;
      uint64_t v51 = v76;
      j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
      j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
      swift_unknownObjectRetain();
      uint64_t v57 = v3;
      j__swift_unknownObjectRetain(v12, v11, v5, v3, v6, 0LL);
      swift_unknownObjectRetain();
      sub_183CDD108( (uint64_t)v72,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      sub_183CDD140( v59,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD078);
      sub_183CDE090((uint64_t)v60);
      sub_183CDCFA8((uint64_t)v60, (uint64_t)v62);
      if (!(void)v63) {
        break;
      }
      v66[1] = v62[2];
      v66[2] = v62[3];
      v66[3] = v63;
      v66[4] = v64;
      __int128 v65 = v62[0];
      v66[0] = v62[1];
      v79 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
      unint64_t v22 = v65;
      char v23 = BYTE8(v65);
      sub_183CDD0CC((uint64_t)v66, (uint64_t)v73);
      sub_183CDD0CC((uint64_t)v73, (uint64_t)v74);
      char v24 = v74[40];
      sub_183CDD140( v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD194);
      LODWORD(v4) = v54;
      sub_183CE0748(v22, v23, (v24 & 1) == 0, (uint64_t)&v79, (uint64_t)&v65);
      if (v54) {
        goto LABEL_79;
      }
      sub_183CDD140( v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD078);
      sub_183CDD140( v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD078);
      uint64_t v25 = v79;
      uint64_t v49 = *((void *)v79 + 2);
      sub_183CDE090((uint64_t)v61);
      uint64_t v26 = v61[8];
      uint64_t v27 = v12;
      uint64_t v28 = v11;
      uint64_t v29 = v5;
      uint64_t v3 = v5;
      uint64_t v5 = v11;
      uint64_t v11 = v12;
      uint64_t v12 = v57;
      j__swift_unknownObjectRelease(v27, v28, v29, v57, v6, 0LL);
      sub_183CDD140( v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD078);
      if (v26) {
        goto LABEL_61;
      }
      swift_unknownObjectRelease();
      j__swift_unknownObjectRelease(v11, v5, v3, v57, v6, 0LL);
      swift_unknownObjectRelease();
      __int128 v30 = *a2;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v30;
      uint64_t v5 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        __int128 v30 = sub_183CE67E0(0LL, *((void *)v30 + 2) + 1LL, 1, v30);
        *a2 = v30;
      }

      uint64_t v3 = v51;
      unint64_t v33 = *((void *)v30 + 2);
      unint64_t v32 = *((void *)v30 + 3);
      if (v33 >= v32 >> 1) {
        __int128 v30 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v33 + 1;
      __int128 v34 = &v30[64 * v33];
      *((_OWORD *)v34 + 2) = v56;
      *((void *)v34 + 6) = v51;
      *((void *)v34 + 7) = v50;
      *((void *)v34 + 8) = v25;
      *((void *)v34 + 9) = v25 + 32;
      *((void *)v34 + 10) = 0LL;
      *((void *)v34 + 11) = (2 * v49) | 1;
      *a2 = v30;
      uint64_t v12 = v45;
      uint64_t v11 = v46;
      j__swift_unknownObjectRelease(v45, v46, v5, v57, v6, 0LL);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v9 = v53;
      int64_t v8 = v52;
      if (v52 == v10)
      {
        a3 = v43;
        *a1 = v45;
        a1[1] = v46;
        a1[2] = v10;
        a1[3] = v53;
        goto LABEL_47;
      }
    }

    *a1 = v12;
    a1[1] = v11;
    a1[2] = v52;
    a1[3] = v53;
    uint64_t v41 = sub_183CDD978( 0xD00000000000002ALL,  0x8000000183D08A90LL,  (uint64_t)"AppleKeyStore/ASN1.swift",  24LL,  2,  1026LL);
    sub_183CDD030();
    swift_allocError();
    uint64_t *v42 = v41;
    swift_willThrow();
    sub_183CDD108( (uint64_t)v72,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
LABEL_78:
    swift_unexpectedError();
    __break(1u);
LABEL_79:
    sub_183CDD140( v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_183CDD078);
    *a1 = v12;
    a1[1] = v11;
    a1[2] = v52;
    a1[3] = v53;
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }

  return result;
}

__n128 sub_183CDC7AC(uint64_t a1)
{
  if (!*(void *)v1) {
    *(void *)uint64_t v1 = MEMORY[0x18961AFE8];
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = sub_183CF89BC(v1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  int64_t v5 = *(void *)(*(void *)v1 + 16LL);
  if (v5 < v4)
  {
    __break(1u);
LABEL_11:
    uint64_t v3 = sub_183CE67E0(0LL, *((void *)v3 + 2) + 1LL, 1, v3);
    goto LABEL_6;
  }

  sub_183CF8CD4(v4, v5);
  uint64_t v3 = *(char **)v1;
  if (!*(void *)v1) {
    return result;
  }
  sub_183CDD1E4(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v8 = *((void *)v3 + 2);
  unint64_t v7 = *((void *)v3 + 3);
  if (v8 >= v7 >> 1) {
    uint64_t v3 = sub_183CE67E0((char *)(v7 > 1), v8 + 1, 1, v3);
  }
  *((void *)v3 + 2) = v8 + 1;
  unint64_t v9 = &v3[64 * v8];
  __n128 result = *(__n128 *)a1;
  __int128 v10 = *(_OWORD *)(a1 + 16);
  __int128 v11 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v9 + 5) = v11;
  *((__n128 *)v9 + 2) = result;
  *((_OWORD *)v9 + 3) = v10;
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_183CDC8A8(char **a1, uint64_t a2)
{
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v7 = 0LL;
  uint64_t v8 = 32LL;
  while (v7 < v6)
  {
    __int128 v9 = *(_OWORD *)(a2 + v8);
    __int128 v10 = *(_OWORD *)(a2 + v8 + 16);
    __int128 v11 = *(_OWORD *)(a2 + v8 + 48);
    void v12[2] = *(_OWORD *)(a2 + v8 + 32);
    v12[3] = v11;
    v12[0] = v9;
    v12[1] = v10;
    sub_183CDD1E4((uint64_t)v12);
    sub_183CDD1E4((uint64_t)v12);
    sub_183CE0D80(0x10uLL, 0, 1, a1, (char *)v12);
    if (v2)
    {
      sub_183CDD218((uint64_t)v12);
      sub_183CDD218((uint64_t)v12);
      return swift_bridgeObjectRelease();
    }

    ++v7;
    sub_183CDD218((uint64_t)v12);
    uint64_t result = sub_183CDD218((uint64_t)v12);
    unint64_t v6 = *(void *)(a2 + 16);
    v8 += 64LL;
    if (v7 == v6) {
      return swift_bridgeObjectRelease();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CDC998()
{
  uint64_t v1 = *v0;
  sub_183D05028();
  sub_183D05040();
  if (v1) {
    sub_183CDCCB4((uint64_t)v3, v1);
  }
  return sub_183D05058();
}

uint64_t sub_183CDC9F8(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    return sub_183D05040();
  }
  sub_183D05040();
  return sub_183CDCCB4(a1, v3);
}

uint64_t sub_183CDCA54()
{
  uint64_t v1 = *v0;
  sub_183D05028();
  sub_183D05040();
  if (v1) {
    sub_183CDCCB4((uint64_t)v3, v1);
  }
  return sub_183D05058();
}

BOOL sub_183CDCAB0(uint64_t *a1, uint64_t *a2)
{
  return sub_183CDCED0(*a1, *a2);
}

unint64_t sub_183CDCAC0()
{
  unint64_t result = qword_18C6648B0;
  if (!qword_18C6648B0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0A81C, &type metadata for DERDictionary);
    atomic_store(result, (unint64_t *)&qword_18C6648B0);
  }

  return result;
}

uint64_t sub_183CDCB04()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v4 = v0[1];
  uint64_t result = sub_183D05034();
  BOOL v5 = __OFSUB__(v2, v1);
  uint64_t v6 = v2 - v1;
  if (v6)
  {
    if ((v6 < 0) ^ v5 | (v6 == 0))
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }

    uint64_t v7 = v4 + v1;
    do
    {
      ++v7;
      sub_183D05040();
      --v6;
    }

    while (v6);
  }

  uint64_t v8 = v0[6];
  uint64_t v9 = v0[7] >> 1;
  uint64_t result = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v10 = v0[5];
  uint64_t result = sub_183D05034();
  uint64_t v11 = v9 - v8;
  if (v9 == v8) {
    return result;
  }
  if (v9 <= v8)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v12 = v10 + v8;
  do
  {
    ++v12;
    uint64_t result = sub_183D05040();
    --v11;
  }

  while (v11);
  return result;
}

uint64_t sub_183CDCBB4()
{
  return sub_183D05058();
}

uint64_t sub_183CDCBF4()
{
  return sub_183D05058();
}

uint64_t sub_183CDCC2C(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  unint64_t v7 = a2[7];
  if ((sub_183CE09F4(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3]) & 1) != 0) {
    return sub_183CE09F4(v2, v3, v4, v5, v6, v7);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_183CDCCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_183D05034();
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = a2 + 32;
    while (1)
    {
      unint64_t v7 = (void *)(v6 + (v5 << 6));
      uint64_t v8 = v7[2];
      uint64_t v9 = v7[3] >> 1;
      uint64_t result = v9 - v8;
      if (__OFSUB__(v9, v8)) {
        break;
      }
      uint64_t v10 = v7[1];
      uint64_t v11 = v7[5];
      uint64_t v12 = v7[6];
      unint64_t v13 = v7[7];
      uint64_t result = sub_183D05034();
      BOOL v14 = __OFSUB__(v9, v8);
      uint64_t v15 = v9 - v8;
      if (v15)
      {
        if ((v15 < 0) ^ v14 | (v15 == 0)) {
          goto LABEL_18;
        }
        uint64_t v16 = v10 + v8;
        do
        {
          ++v16;
          sub_183D05040();
          --v15;
        }

        while (v15);
      }

      unint64_t v17 = v13 >> 1;
      uint64_t result = v17 - v12;
      if (__OFSUB__(v17, v12)) {
        goto LABEL_17;
      }
      uint64_t result = sub_183D05034();
      BOOL v18 = __OFSUB__(v17, v12);
      uint64_t v19 = v17 - v12;
      if (v19)
      {
        if ((v19 < 0) ^ v18 | (v19 == 0)) {
          goto LABEL_19;
        }
        uint64_t v20 = v11 + v12;
        do
        {
          ++v20;
          uint64_t result = sub_183D05040();
          --v19;
        }

        while (v19);
      }

      if (++v5 == v3) {
        return result;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  return result;
}

uint64_t sub_183CDCDA4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a4)
  {
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v7 = 0LL;
    uint64_t v8 = a4 + 48;
    while (1)
    {
      unint64_t v9 = *(void *)(a4 + 16);
      if (v7 == v9) {
        break;
      }
      if (v7 >= v9)
      {
        __break(1u);
        return result;
      }

      uint64_t v10 = v8 + 64;
      ++v7;
      uint64_t v11 = *(void *)(v8 - 16);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v14 = *(void *)v8;
      unint64_t v13 = *(void *)(v8 + 8);
      __int128 v19 = *(_OWORD *)(v8 + 16);
      uint64_t v15 = *(void *)(v8 + 32);
      uint64_t v16 = *(void *)(v8 + 40);
      uint64_t result = sub_183CE09F4(v12, *(void *)v8, v13, a1, a2, a3);
      uint64_t v8 = v10;
      if ((result & 1) != 0)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)a5 = v11;
        *(void *)(a5 + 8) = v12;
        *(void *)(a5 + 16) = v14;
        *(void *)(a5 + 24) = v13;
        *(_OWORD *)(a5 + 32) = v19;
        *(void *)(a5 + 48) = v15;
        *(void *)(a5 + 56) = v16;
        return result;
      }
    }
  }

  sub_183CDD24C();
  swift_allocError();
  *unint64_t v17 = 2;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

BOOL sub_183CDCED0(uint64_t a1, uint64_t a2)
{
  BOOL result = (a1 | a2) == 0;
  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == *(void *)(a2 + 16))
    {
      if (!v4 || a1 == a2) {
        return 1LL;
      }
      uint64_t v5 = (uint64_t *)(a2 + 48);
      for (uint64_t i = (uint64_t *)(a1 + 48); ; i += 8)
      {
        uint64_t v7 = i[3];
        uint64_t v8 = i[4];
        unint64_t v9 = i[5];
        uint64_t v10 = v5[3];
        uint64_t v11 = v5[4];
        unint64_t v12 = v5[5];
        if ((sub_183CE09F4(*(i - 1), *i, i[1], *(v5 - 1), *v5, v5[1]) & 1) == 0
          || (sub_183CE09F4(v7, v8, v9, v10, v11, v12) & 1) == 0)
        {
          break;
        }

        v5 += 8;
        if (!--v4) {
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_183CDCFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6648B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E26074]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_183CDD030()
{
  unint64_t result = qword_18C6648C0;
  if (!qword_18C6648C0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AA9C, &type metadata for ASN1Error);
    atomic_store(result, (unint64_t *)&qword_18C6648C0);
  }

  return result;
}

uint64_t sub_183CDD078( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  if (a9)
  {
    j__swift_unknownObjectRelease(a3, a4, a5, a6, a7, a8 & 1);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_183CDD0CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_183CDD108(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

void *sub_183CDD140( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_183CDD194( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  if (a9)
  {
    j__swift_unknownObjectRetain(a3, a4, a5, a6, a7, a8 & 1);
    return swift_unknownObjectRetain();
  }

  return result;
}

uint64_t sub_183CDD1E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_183CDD218(uint64_t a1)
{
  return a1;
}

unint64_t sub_183CDD24C()
{
  unint64_t result = qword_18C6648C8;
  if (!qword_18C6648C8)
  {
    unint64_t result = MEMORY[0x186E2608C](&protocol conformance descriptor for AKSError, &type metadata for AKSError);
    atomic_store(result, (unint64_t *)&qword_18C6648C8);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for der_key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for DERDictionaryItem()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DERDictionaryItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for DERDictionaryItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for DERDictionaryItem(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_unknownObjectRelease();
  __int128 v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for DERDictionaryItem(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DERDictionaryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DERDictionaryItem()
{
  return &type metadata for DERDictionaryItem;
}

unint64_t sub_183CDD4CC()
{
  unint64_t result = qword_18C6648D0;
  if (!qword_18C6648D0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0A8D4, &type metadata for DERDictionaryItem);
    atomic_store(result, (unint64_t *)&qword_18C6648D0);
  }

  return result;
}

uint64_t sub_183CDD524()
{
  return sub_183D05058();
}

uint64_t sub_183CDD568()
{
  return sub_183D05034();
}

uint64_t sub_183CDD594()
{
  return sub_183D05058();
}

BOOL sub_183CDD5D4(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(void *)a1 + 16LL) == *(unsigned __int8 *)(*(void *)a2 + 16LL);
}

uint64_t sub_183CDD5F0()
{
  return 0x6F727245314E5341LL;
}

uint64_t sub_183CDD72C()
{
  return sub_183CDD5F0();
}

BOOL sub_183CDD734(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_183CDD748()
{
  return sub_183D05058();
}

uint64_t sub_183CDD78C()
{
  return sub_183D05034();
}

uint64_t sub_183CDD7B4()
{
  return sub_183D05058();
}

uint64_t sub_183CDD7F4()
{
  return sub_183D04E0C();
}

uint64_t sub_183CDD824()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASN1Error.Backing()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ASN1Error()
{
  return &type metadata for ASN1Error;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Error.ErrorCode()
{
  return &type metadata for ASN1Error.ErrorCode;
}

unint64_t sub_183CDD8A4()
{
  unint64_t result = qword_18C6648D8;
  if (!qword_18C6648D8)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0A9CC, &type metadata for ASN1Error.ErrorCode);
    atomic_store(result, (unint64_t *)&qword_18C6648D8);
  }

  return result;
}

unint64_t sub_183CDD8EC()
{
  unint64_t result = qword_18C6648E0;
  if (!qword_18C6648E0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AA34, &type metadata for ASN1Error);
    atomic_store(result, (unint64_t *)&qword_18C6648E0);
  }

  return result;
}

unint64_t sub_183CDD934()
{
  unint64_t result = qword_18C6648E8;
  if (!qword_18C6648E8)
  {
    uint64_t v1 = type metadata accessor for ASN1Error.Backing();
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AADC, v1);
    atomic_store(result, (unint64_t *)&qword_18C6648E8);
  }

  return result;
}

uint64_t sub_183CDD978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 1;
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(void *)(v12 + 48) = a4;
  *(_BYTE *)(v12 + 56) = a5;
  *(void *)(v12 + 64) = a6;
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t sub_183CDD9F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  *(void *)(result + 24) = 0xD000000000000013LL;
  *(void *)(result + 32) = 0x8000000183D08B50LL;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = a2;
  *(_BYTE *)(result + 56) = a3;
  *(void *)(result + 64) = a4;
  return result;
}

uint64_t sub_183CDDA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 2;
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(void *)(v12 + 48) = a4;
  *(_BYTE *)(v12 + 56) = a5;
  *(void *)(v12 + 64) = a6;
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t sub_183CDDAE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result = swift_allocObject();
  *(_BYTE *)(result + 16) = 3;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0xE000000000000000LL;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = a2;
  *(_BYTE *)(result + 56) = a3;
  *(void *)(result + 64) = a4;
  return result;
}

uint64_t sub_183CDDB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 4;
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(void *)(v12 + 48) = a4;
  *(_BYTE *)(v12 + 56) = a5;
  *(void *)(v12 + 64) = a6;
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t _s13AppleKeyStore9ASN1ErrorV9ErrorCodeV11BackingCodeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x27;
  int v8 = v6 - 39;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      inputStructCnt = 0LL;
LABEL_18:
      if (a2) {
        __int128 v19 = (const uint64_t *)(a2 + 32);
      }
      else {
        __int128 v19 = 0LL;
      }
      uint64_t v20 = (const void *)(a3 + 32);
      if (!a3) {
        uint64_t v20 = 0LL;
      }
      uint64_t v26 = v20;
      uint64_t v27 = v19;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v8 = sub_183CE68E0(0LL, *((void *)v8 + 2), 0, v8);
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v7 = sub_183CE66F8(0LL, *((void *)v7 + 2), 0, v7);
      }
      a2 = IOConnectCallMethod(v5, a1, v27, v18, v26, inputStructCnt, (uint64_t *)v8 + 4, &outputCnt, v7 + 32, &v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRelease();
        *a4 = v8;
        if (v14) {
          goto LABEL_29;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        if (v14)
        {
LABEL_29:
          int v8 = v7 + 32;
          __int128 v5 = v32;
          if ((v32 & 0x8000000000000000LL) == 0)
          {
            if (*((void *)v7 + 2) >= v32)
            {
              sub_183D04FD4();
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain_n();
              __int128 v21 = swift_dynamicCastClass();
              if (!v21)
              {
                swift_bridgeObjectRelease();
                __int128 v21 = MEMORY[0x18961AFE8];
              }

              unint64_t v22 = *(void *)(v21 + 16);
              swift_release();
              if (v22 == v5)
              {
                char v23 = swift_dynamicCastClass();
                if (!v23)
                {
                  swift_bridgeObjectRelease();
                  char v24 = MEMORY[0x18961AFE8];
                  goto LABEL_39;
                }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

        __break(0x5513u);
        goto LABEL_18;
      }
    }
  }

  return result;
}

uint64_t _s13AppleKeyStore9ASN1ErrorV9ErrorCodeV11BackingCodeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_183CDDC9C + 4 * byte_183D0A975[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_183CDDCD0 + 4 * byte_183D0A970[v4]))();
}

uint64_t sub_183CDDCD0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CDDCD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CDDCE0LL);
  }
  return result;
}

uint64_t sub_183CDDCEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CDDCF4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_183CDDCF8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CDDD00(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CDDD0C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_183CDDD18(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Error.ErrorCode.BackingCode()
{
  return &type metadata for ASN1Error.ErrorCode.BackingCode;
}

unint64_t sub_183CDDD34()
{
  unint64_t result = qword_18C6648F0;
  if (!qword_18C6648F0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0ABE0, &type metadata for ASN1Error.ErrorCode.BackingCode);
    atomic_store(result, (unint64_t *)&qword_18C6648F0);
  }

  return result;
}

uint64_t sub_183CDDD7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3 = *((_BYTE *)a1 + 8);
  uint64_t v4 = a1[6];
  char v5 = *((_BYTE *)a1 + 56);
  unsigned int v6 = *(uint64_t (**)(uint64_t *))(a3 + 8);
  uint64_t v10 = *a1;
  char v11 = v3;
  __int128 v7 = *((_OWORD *)a1 + 2);
  __int128 v12 = *((_OWORD *)a1 + 1);
  __int128 v13 = v7;
  uint64_t v14 = v4;
  char v15 = v5;
  __int128 v8 = *((_OWORD *)a1 + 5);
  __int128 v16 = *((_OWORD *)a1 + 4);
  __int128 v17 = v8;
  return v6(&v10);
}

uint64_t sub_183CDDDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_183CDDDE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_183CDDDF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = *((_BYTE *)a1 + 8);
  uint64_t v6 = a1[6];
  char v7 = *((_BYTE *)a1 + 56);
  __int128 v8 = *(uint64_t (**)(uint64_t *))(a5 + 32);
  uint64_t v12 = *a1;
  char v13 = v5;
  __int128 v9 = *((_OWORD *)a1 + 2);
  __int128 v14 = *((_OWORD *)a1 + 1);
  __int128 v15 = v9;
  uint64_t v16 = v6;
  char v17 = v7;
  __int128 v10 = *((_OWORD *)a1 + 5);
  __int128 v18 = *((_OWORD *)a1 + 4);
  __int128 v19 = v10;
  return v8(&v12);
}

uint64_t sub_183CDDE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t destroy for ASN1Node.Content(uint64_t a1)
{
  return j__swift_unknownObjectRelease( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t initializeWithCopy for ASN1Node.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for ASN1Node.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = *((unsigned __int8 *)a1 + 40);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  *((_BYTE *)a1 + 40) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ASN1Node.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = *((unsigned __int8 *)a1 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  a1[4] = v3;
  *((_BYTE *)a1 + 40) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1Node.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Node.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_183CDE06C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_183CDE074(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Node.Content()
{
  return &type metadata for ASN1Node.Content;
}

void sub_183CDE090(uint64_t a1@<X8>)
{
  int64_t v3 = v1[2];
  unint64_t v4 = v1[3];
  if (v3 == v4 >> 1)
  {
    uint64_t v5 = 0LL;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    __int128 v9 = 0uLL;
    __int128 v10 = 0uLL;
    __int128 v11 = 0uLL;
    __int128 v12 = 0uLL;
LABEL_9:
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    return;
  }

  if (v3 >= (uint64_t)(v4 >> 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  __int128 v15 = (__int128 *)(v14 + 96 * v3);
  __int128 v16 = v15[1];
  __int128 v44 = *v15;
  __int128 v45 = v16;
  __int128 v17 = v15[2];
  __int128 v18 = v15[3];
  __int128 v19 = v15[5];
  v48[0] = v15[4];
  v48[1] = v19;
  __int128 v46 = v17;
  __int128 v47 = v18;
  uint64_t v20 = v3 + 1;
  v1[2] = v3 + 1;
  if ((BYTE8(v45) & 1) != 0)
  {
    sub_183CE2044(v13, v14, v20, v4, (uint64_t)&v44);
    uint64_t v25 = v24;
    if (!__OFSUB__(v23 >> 1, v22))
    {
      uint64_t v26 = v21;
      uint64_t v27 = v22;
      unint64_t v28 = v23;
      *__int16 v1 = sub_183CDF0D8((v23 >> 1) - v22, v13, v14, v20, v4);
      v1[1] = v29;
      v1[2] = v30;
      void v1[3] = v31;
      uint64_t v5 = v44;
      unsigned int v6 = BYTE8(v44);
      sub_183CE06D4(v25, v26, v27, v28, v45, &v40);
      uint64_t v7 = v40;
      uint64_t v8 = v41;
      *((void *)&v32 + 1) = *((void *)&v46 + 1);
      __int128 v37 = v42;
      __int128 v39 = v46;
      *(void *)&__int128 v32 = v43;
      __int128 v33 = v32;
      __int128 v35 = v47;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      __int128 v10 = v33;
      __int128 v12 = v35;
      __int128 v9 = v37;
      __int128 v11 = v39;
      goto LABEL_9;
    }

    goto LABEL_11;
  }

  sub_183CE1F00((uint64_t)v48, (uint64_t)v49, &qword_18C664920);
  sub_183CE1F00((uint64_t)v49, (uint64_t)&v40, &qword_18C664920);
  uint64_t v7 = v40;
  if (v40)
  {
    uint64_t v8 = v41;
    uint64_t v5 = v44;
    unsigned int v6 = BYTE8(v44);
    __int128 v36 = v42;
    __int128 v38 = v46;
    __int128 v34 = v47;
    sub_183CE1F44((uint64_t)v49);
    swift_unknownObjectRetain();
    __int128 v12 = v34;
    __int128 v9 = v36;
    __int128 v11 = v38;
    __int128 v10 = xmmword_183D0AC10;
    goto LABEL_9;
  }

char *sub_183CDE290(uint64_t a1, uint64_t a2, unsigned __int8 a3, char **a4)
{
  if (*(void *)a1 != a2 || *(unsigned __int8 *)(a1 + 8) != a3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  v13[0] = v6;
  v13[1] = v7;
  int v13[2] = v8;
  v13[3] = v9;
  v13[4] = v10;
  swift_unknownObjectRetain_n();
  sub_183CDBF08(v13, a4, &v15);
  if (!v4)
  {
    sub_183CDE090((uint64_t)v14);
    uint64_t v11 = v14[8];
    j__swift_unknownObjectRelease(v6, v7, v8, v9, v10, 0LL);
    sub_183CE1F70(v14);
    if (!v11)
    {
      swift_unknownObjectRelease();
      return v15;
    }

    goto LABEL_8;
  }

uint64_t sub_183CDE39C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v4 = v0[5];
  uint64_t result = sub_183D05034();
  BOOL v5 = __OFSUB__(v2, v1);
  uint64_t v6 = v2 - v1;
  if (v6)
  {
    if ((v6 < 0) ^ v5 | (v6 == 0))
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    uint64_t v7 = v4 + v1;
    do
    {
      ++v7;
      sub_183D05040();
      --v6;
    }

    while (v6);
  }

  if (!v0[8]) {
    return sub_183D05040();
  }
  uint64_t v8 = v0[10];
  unint64_t v9 = v0[11];
  uint64_t v10 = v0[9];
  sub_183D05040();
  unint64_t v11 = v9 >> 1;
  uint64_t result = (v9 >> 1) - v8;
  if (__OFSUB__(v9 >> 1, v8))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t result = sub_183D05034();
  BOOL v12 = __OFSUB__(v11, v8);
  uint64_t v13 = v11 - v8;
  if (!v13) {
    return result;
  }
  if ((v13 < 0) ^ v12 | (v13 == 0))
  {
LABEL_18:
    __break(1u);
    return result;
  }

  uint64_t v14 = v10 + v8;
  do
  {
    ++v14;
    uint64_t result = sub_183D05040();
    --v13;
  }

  while (v13);
  return result;
}

uint64_t sub_183CDE490()
{
  return sub_183D05058();
}

uint64_t sub_183CDE4D0()
{
  return sub_183D05058();
}

uint64_t sub_183CDE508(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[3];
  _OWORD v9[2] = a1[2];
  v9[3] = v2;
  __int128 v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  __int128 v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  __int128 v5 = a2[3];
  __int128 v10[2] = a2[2];
  v10[3] = v5;
  __int128 v6 = a2[5];
  void v10[4] = a2[4];
  v10[5] = v6;
  __int128 v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_183CE16E8((uint64_t)v9, (uint64_t)v10) & 1;
}

uint64_t sub_183CDE560()
{
  v3[0] = 0LL;
  v3[1] = 0xE000000000000000LL;
  sub_183D04F74();
  sub_183D04E18();
  sub_183CFB1D8();
  sub_183D04E18();
  swift_bridgeObjectRelease();
  sub_183D04E18();
  v3[0] = *(void *)(v0 + 16);
  sub_183D04FBC();
  sub_183D04E18();
  swift_bridgeObjectRelease();
  sub_183D04E18();
  sub_183CE1F00(v0 + 64, (uint64_t)v2, &qword_18C664920);
  uint64_t result = sub_183CE1F00((uint64_t)v2, (uint64_t)v3, &qword_18C664920);
  if (v3[0] && __OFSUB__(v3[3] >> 1, v3[2]))
  {
    __break(1u);
  }

  else
  {
    sub_183D04FBC();
    sub_183D04E18();
    swift_bridgeObjectRelease();
    sub_183D04E18();
    return 0LL;
  }

  return result;
}

uint64_t sub_183CDE6EC()
{
  return sub_183CDE560();
}

uint64_t sub_183CDE72C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = a3;
  swift_unknownObjectRetain();
  unint64_t v11 = sub_183CE65E0(0LL, 16LL, 0, MEMORY[0x18961AFE8]);
  sub_183CDE850(v8, 1LL, &v11);
  uint64_t result = v8[0];
  if (v5) {
    goto LABEL_6;
  }
  if (!__OFSUB__(v10 >> 1, v9))
  {
    if (v10 >> 1 == v9)
    {
      __int128 v4 = v11;
      swift_unknownObjectRelease();
      return (uint64_t)v4;
    }

    __int128 v4 = (char *)sub_183CDD978( 0xD000000000000021LL,  0x8000000183D08B90LL,  (uint64_t)"AppleKeyStore/ASN1.swift",  24LL,  2,  479LL);
    sub_183CDD030();
    swift_allocError();
    void *v7 = v4;
    swift_willThrow();
LABEL_6:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CDE850(uint64_t *a1, uint64_t a2, char **a3)
{
  if (a2 > 50)
  {
    uint64_t v4 = sub_183CDD978(0xD000000000000021LL, 0x8000000183D08C10LL, (uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 490LL);
LABEL_9:
    uint64_t v20 = v4;
    sub_183CDD030();
    swift_allocError();
    *uint64_t v21 = v20;
    return swift_willThrow();
  }

  __int128 v7 = a1;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  int v12 = sub_183CDEDB8();
  if ((v12 & 0x100) != 0)
  {
    uint64_t v4 = sub_183CDDAE4((uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 496LL);
    goto LABEL_9;
  }

  char v13 = v12;
  if ((~v12 & 0x1F) != 0)
  {
    uint64_t v58 = sub_183CFB330(v12);
    int v62 = v23;
    swift_unknownObjectRetain();
  }

  else
  {
    __int128 v56 = a3;
    uint64_t v14 = v10;
    uint64_t v15 = v9;
    int v16 = sub_183CFB328(v12);
    swift_unknownObjectRetain();
    sub_183CEA2FC();
    if (v3) {
      return swift_unknownObjectRelease();
    }
    int v62 = v16;
    if (v17 <= 0x1E)
    {
      uint64_t v18 = sub_183CDD978( 0xD00000000000002BLL,  0x8000000183D08BE0LL,  (uint64_t)"AppleKeyStore/ASN1.swift",  24LL,  2,  510LL);
      sub_183CDD030();
      swift_allocError();
      *__int128 v19 = v18;
      swift_willThrow();
      return swift_unknownObjectRelease();
    }

    uint64_t v58 = v17;
    uint64_t v9 = v15;
    uint64_t v10 = v14;
    a3 = v56;
  }

  sub_183CDEE00();
  if (v3) {
    return swift_unknownObjectRelease();
  }
  if ((v25 & 1) != 0)
  {
    uint64_t v38 = sub_183CDDAE4((uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 518LL);
LABEL_27:
    uint64_t v39 = v38;
    sub_183CDD030();
    swift_allocError();
    *uint64_t v40 = v39;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }

  if (v24 < 0)
  {
    uint64_t v38 = sub_183CDD978(0xD000000000000018LL, 0x8000000183D08BC0LL, (uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 523LL);
    goto LABEL_27;
  }

  uint64_t v55 = *v7;
  uint64_t v57 = v24;
  int64_t v50 = v7[2];
  uint64_t v51 = v7[1];
  unint64_t v52 = v7[3];
  uint64_t v26 = sub_183CDF058(v24, *v7, v51, v50, v52);
  unint64_t v53 = v28;
  uint64_t v54 = v27;
  uint64_t v48 = v29;
  uint64_t v49 = v26;
  v59[0] = v26;
  v59[1] = v29;
  uint64_t v60 = v27;
  unint64_t v61 = v28;
  uint64_t *v7 = sub_183CDF0D8(v57, v55, v51, v50, v52);
  v7[1] = v30;
  _BYTE v7[2] = v31;
  _OWORD v7[3] = v32;
  uint64_t v33 = v53 >> 1;
  if (__OFSUB__(v53 >> 1, v54))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if ((v53 >> 1) - v54 != v57)
  {
    uint64_t v41 = sub_183CDDAE4((uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 530LL);
    sub_183CDD030();
    swift_allocError();
    uint64_t *v42 = v41;
    swift_unknownObjectRetain();
    swift_willThrow();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  if (v33 < v10) {
    goto LABEL_42;
  }
  if ((uint64_t)(v11 >> 1) < v10)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  if (v11 >> 1 < v33)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  unint64_t v52 = v53 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  if ((v13 & 0x20) != 0)
  {
    uint64_t v43 = *a3;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v43 = sub_183CE65E0(0LL, *((void *)v43 + 2) + 1LL, 1, v43);
    }
    unint64_t v45 = *((void *)v43 + 2);
    unint64_t v44 = *((void *)v43 + 3);
    char v46 = v62;
    if (v45 >= v44 >> 1)
    {
      uint64_t v43 = sub_183CE65E0((char *)(v44 > 1), v45 + 1, 1, v43);
      char v46 = v62;
    }

    *((void *)v43 + 2) = v45 + 1;
    __int128 v47 = &v43[96 * v45];
    *((void *)v47 + 4) = v58;
    v47[40] = v46;
    *((void *)v47 + 6) = a2;
    v47[56] = 1;
    *((void *)v47 + 8) = v8;
    *((void *)v47 + 9) = v9;
    *((void *)v47 + 10) = v10;
    *((void *)v47 + 11) = v52;
    *((_OWORD *)v47 + 6) = 0u;
    *((_OWORD *)v47 + 7) = 0u;
    *a3 = v43;
    if (!v57)
    {
      swift_unknownObjectRelease_n();
      return swift_unknownObjectRelease();
    }

    __int128 v7 = (uint64_t *)(a2 + 1);
    while (1)
    {
      sub_183CDE850(v59, a2 + 1, a3);
      if (__OFSUB__(v61 >> 1, v60)) {
        break;
      }
      if ((uint64_t)((v61 >> 1) - v60) <= 0)
      {
        swift_unknownObjectRelease_n();
        return swift_unknownObjectRelease();
      }
    }

    __break(1u);
    goto LABEL_41;
  }

  __int128 v7 = (uint64_t *)*a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_45:
  }
    __int128 v7 = (uint64_t *)sub_183CE65E0(0LL, v7[2] + 1, 1, (char *)v7);
  unint64_t v35 = v7[2];
  unint64_t v34 = v7[3];
  char v36 = v62;
  if (v35 >= v34 >> 1)
  {
    __int128 v7 = (uint64_t *)sub_183CE65E0((char *)(v34 > 1), v35 + 1, 1, (char *)v7);
    char v36 = v62;
  }

  _BYTE v7[2] = v35 + 1;
  __int128 v37 = &v7[12 * v35];
  v37[4] = v58;
  *((_BYTE *)v37 + 40) = v36;
  v37[6] = a2;
  *((_BYTE *)v37 + 56) = 0;
  v37[8] = v8;
  v37[9] = v9;
  v37[10] = v10;
  v37[11] = v52;
  v37[12] = v49;
  v37[13] = v48;
  v37[14] = v54;
  v37[15] = v53;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a3 = (char *)v7;
  return result;
}

uint64_t sub_183CDEDB8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  if (v1 == v2)
  {
    int v3 = 0;
  }

  else
  {
    if (v1 >= v2)
    {
      __break(1u);
      return result;
    }

    int v3 = *(unsigned __int8 *)(v0[1] + v1);
    v0[2] = v1 + 1;
  }

  return v3 | ((v1 == v2) << 8);
}

void sub_183CDEE00()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  int64_t v4 = v3 >> 1;
  if (v2 == v3 >> 1) {
    return;
  }
  if (v2 >= v4)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  int v7 = *(unsigned __int8 *)(v6 + v2);
  int64_t v8 = v2 + 1;
  v0[2] = v2 + 1;
  if (v7 == 128)
  {
    uint64_t v9 = sub_183CDDB40(0xD000000000000035LL, 0x8000000183D08CD0LL, (uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 1149LL);
    sub_183CDD030();
    swift_allocError();
    *uint64_t v10 = v9;
    swift_willThrow();
    return;
  }

  if ((v7 & 0x80) != 0)
  {
    BOOL v11 = __OFSUB__(v4, v8);
    int64_t v12 = v4 - v8;
    if (!v11)
    {
      unint64_t v13 = v7 & 0x7F;
      sub_183CDF058(v7 & 0x7F, v5, v6, v2 + 1, v3);
      uint64_t v29 = v14;
      uint64_t v16 = v15;
      unint64_t v28 = v17;
      uint64_t *v0 = sub_183CDF0D8(v13, v5, v6, v8, v3);
      v0[1] = v18;
      v0[2] = v19;
      v0[3] = v20;
      swift_unknownObjectRetain();
      uint64_t v21 = swift_unknownObjectRetain();
      sub_183CECE94(v21, v29, v16, v28);
      if (!v1)
      {
        if (v22 <= 0x7F)
        {
          uint64_t v24 = 0xD00000000000004FLL;
          uint64_t v23 = 0x8000000183D08C40LL;
          uint64_t v25 = 1168LL;
        }

        else
        {
          if (v13 <= (71 - __clz(v22)) >> 3) {
            goto LABEL_15;
          }
          uint64_t v23 = 0x8000000183D08C90LL;
          uint64_t v24 = 0xD000000000000031LL;
          uint64_t v25 = 1173LL;
        }

        uint64_t v26 = sub_183CDDB40(v24, v23, (uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, v25);
        sub_183CDD030();
        swift_allocError();
        uint64_t *v27 = v26;
        swift_willThrow();
      }

uint64_t sub_183CDF058(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!result || v6 < 0 || (int64_t v7 = a5 >> 1, v6 >= result))
  {
    int64_t v7 = a4 + result;
    if (__OFADD__(a4, result)) {
      goto LABEL_18;
    }
  }

  if (v7 < a4) {
    goto LABEL_14;
  }
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000LL) == 0) {
      return a2;
    }
    goto LABEL_17;
  }

uint64_t sub_183CDF0D8(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (result)
  {
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      int64_t v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4) {
            return a2;
          }
          goto LABEL_15;
        }

uint64_t sub_183CDF148()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_183D05028();
  sub_183CE1CA8((uint64_t)v5, v1, v2, v3);
  return sub_183D05058();
}

uint64_t sub_183CDF1A0(uint64_t a1)
{
  return sub_183CE1CA8(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_183CDF1AC()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_183D05028();
  sub_183CE1CA8((uint64_t)v5, v1, v2, v3);
  return sub_183D05058();
}

uint64_t sub_183CDF200(uint64_t a1, uint64_t a2)
{
  return sub_183CE1348( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t sub_183CDF21C()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_183D05028();
  sub_183CE1CA8((uint64_t)v5, v1, v2, v3);
  sub_183D05034();
  return sub_183D05058();
}

uint64_t sub_183CDF288(uint64_t a1)
{
  return sub_183D05034();
}

uint64_t sub_183CDF2BC()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_183D05028();
  sub_183CE1CA8((uint64_t)v5, v1, v2, v3);
  sub_183D05034();
  return sub_183D05058();
}

uint64_t sub_183CDF324(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a2[4];
  return sub_183CE1348(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3]) & (v2 == v3);
}

uint64_t sub_183CDF364@<X0>(uint64_t a1@<X8>)
{
  return sub_183CE1F00((uint64_t)v3, a1, &qword_18C6648B8);
}

__n128 sub_183CDF3A4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  __int128 v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_183CDF3B8()
{
  return 0LL;
}

uint64_t sub_183CDF3C0()
{
  return 2LL;
}

uint64_t sub_183CDF3C8()
{
  uint64_t v1 = sub_183CE18C4(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_183CDF400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE03FC(a1, a2, a3);
}

uint64_t sub_183CDF438()
{
  return sub_183D04E3C();
}

uint64_t sub_183CDF458(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_183D05034();
  sub_183D05034();
  sub_183CDD0CC((uint64_t)(v2 + 2), (uint64_t)v17);
  sub_183CDD0CC((uint64_t)v17, (uint64_t)v18);
  uint64_t v4 = v19;
  uint64_t v5 = v20;
  unint64_t v6 = v21;
  if ((v22 & 1) != 0)
  {
    sub_183D05034();
    unint64_t v7 = v6 >> 1;
    uint64_t result = v7 - v5;
    if (__OFSUB__(v7, v5))
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    uint64_t result = sub_183D05034();
    BOOL v9 = __OFSUB__(v7, v5);
    uint64_t v10 = v7 - v5;
    if (v10)
    {
      if ((v10 < 0) ^ v9 | (v10 == 0))
      {
LABEL_18:
        __break(1u);
        return result;
      }

      uint64_t v11 = v4 + v5;
      do
      {
        ++v11;
        sub_183D05040();
        --v10;
      }

      while (v10);
    }
  }

  else
  {
    sub_183D05034();
    sub_183CE1CA8(a1, v4, v5, v6);
    sub_183D05034();
  }

  uint64_t v12 = v2[10];
  uint64_t v13 = v2[11] >> 1;
  uint64_t result = v13 - v12;
  if (__OFSUB__(v13, v12))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v14 = v2[9];
  uint64_t result = sub_183D05034();
  uint64_t v15 = v13 - v12;
  if (v13 == v12) {
    return result;
  }
  if (v13 <= v12) {
    goto LABEL_17;
  }
  uint64_t v16 = v14 + v12;
  do
  {
    ++v16;
    uint64_t result = sub_183D05040();
    --v15;
  }

  while (v15);
  return result;
}

uint64_t sub_183CDF578(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_183CDD0CC(v2, (uint64_t)v12);
  uint64_t v4 = v12[1];
  uint64_t v5 = v12[2];
  unint64_t v6 = v12[3];
  if ((v13 & 1) == 0)
  {
    sub_183D05034();
    sub_183CE1CA8(a1, v4, v5, v6);
    return sub_183D05034();
  }

  sub_183D05034();
  unint64_t v7 = v6 >> 1;
  uint64_t result = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_183D05034();
  BOOL v9 = __OFSUB__(v7, v5);
  uint64_t v10 = v7 - v5;
  if (!v10) {
    return result;
  }
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v11 = v4 + v5;
  do
  {
    ++v11;
    uint64_t result = sub_183D05040();
    --v10;
  }

  while (v10);
  return result;
}

uint64_t sub_183CDF638()
{
  uint64_t v1 = v11;
  uint64_t v2 = v12;
  unint64_t v3 = v13;
  if ((v14 & 1) == 0)
  {
    sub_183D05034();
    sub_183CE1CA8((uint64_t)v9, v1, v2, v3);
    sub_183D05034();
    return sub_183D05058();
  }

  sub_183D05034();
  unint64_t v4 = v3 >> 1;
  uint64_t result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_183D05034();
  BOOL v6 = __OFSUB__(v4, v2);
  uint64_t v7 = v4 - v2;
  if (!v7) {
    return sub_183D05058();
  }
  if (!((v7 < 0) ^ v6 | (v7 == 0)))
  {
    uint64_t v8 = v1 + v2;
    do
    {
      ++v8;
      sub_183D05040();
      --v7;
    }

    while (v7);
    return sub_183D05058();
  }

LABEL_11:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_183CDF718()
{
  __int128 v1 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v1;
  __int128 v2 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v2;
  __int128 v3 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v3;
  sub_183D05028();
  sub_183CDF458((uint64_t)v5);
  return sub_183D05058();
}

uint64_t sub_183CDF774(uint64_t a1)
{
  return sub_183CDF458(a1);
}

uint64_t sub_183CDF7B4()
{
  __int128 v1 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v1;
  __int128 v2 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v2;
  __int128 v3 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v3;
  sub_183D05028();
  sub_183CDF458((uint64_t)v5);
  return sub_183D05058();
}

uint64_t sub_183CDF80C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[3];
  _OWORD v9[2] = a1[2];
  v9[3] = v2;
  __int128 v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  __int128 v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  __int128 v5 = a2[3];
  __int128 v10[2] = a2[2];
  v10[3] = v5;
  __int128 v6 = a2[5];
  void v10[4] = a2[4];
  v10[5] = v6;
  __int128 v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_183CE1798((uint64_t)v9, (uint64_t)v10) & 1;
}

uint64_t sub_183CDF864()
{
  return sub_183CDF638();
}

uint64_t sub_183CDF898(uint64_t a1)
{
  return sub_183CDF578(a1);
}

uint64_t sub_183CDF8D4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(_BYTE *)(v0 + 40);
  sub_183D05028();
  if ((v4 & 1) == 0)
  {
    sub_183D05034();
    sub_183CE1CA8((uint64_t)v10, v1, v2, v3);
    sub_183D05034();
    return sub_183D05058();
  }

  sub_183D05034();
  unint64_t v5 = v3 >> 1;
  uint64_t result = v5 - v2;
  if (__OFSUB__(v5, v2))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_183D05034();
  BOOL v7 = __OFSUB__(v5, v2);
  uint64_t v8 = v5 - v2;
  if (!v8) {
    return sub_183D05058();
  }
  if (!((v8 < 0) ^ v7 | (v8 == 0)))
  {
    uint64_t v9 = v1 + v2;
    do
    {
      ++v9;
      sub_183D05040();
      --v8;
    }

    while (v8);
    return sub_183D05058();
  }

uint64_t sub_183CDF9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0) {
      return sub_183CE09F4(v4, v5, v6, v7, v8, v9);
    }
    return 0LL;
  }

  if ((*(_BYTE *)(a2 + 40) & 1) != 0) {
    return 0LL;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a2 + 32);
  return sub_183CE1348(v4, v5, v6, v7, v8, v9) & (v11 == v12);
}

unint64_t sub_183CDFA14()
{
  unint64_t result = qword_18C6648F8;
  if (!qword_18C6648F8)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AC78, &type metadata for ASN1Node.Content);
    atomic_store(result, (unint64_t *)&qword_18C6648F8);
  }

  return result;
}

unint64_t sub_183CDFA5C()
{
  unint64_t result = qword_18C664900;
  if (!qword_18C664900)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AD48, &type metadata for ASN1NodeCollection.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C664900);
  }

  return result;
}

unint64_t sub_183CDFAA4()
{
  unint64_t result = qword_18C664908;
  if (!qword_18C664908)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AD78, &type metadata for ASN1NodeCollection);
    atomic_store(result, (unint64_t *)&qword_18C664908);
  }

  return result;
}

unint64_t sub_183CDFAEC()
{
  unint64_t result = qword_18C664910;
  if (!qword_18C664910)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0ADE0, &type metadata for DER.ParseResult);
    atomic_store(result, (unint64_t *)&qword_18C664910);
  }

  return result;
}

unint64_t sub_183CDFB34()
{
  unint64_t result = qword_18C664918;
  if (!qword_18C664918)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AE70, &type metadata for DER.ParserNode);
    atomic_store(result, (unint64_t *)&qword_18C664918);
  }

  return result;
}

uint64_t sub_183CDFB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_183CE2004(a5);
}

uint64_t sub_183CDFBA8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    unsigned int v35 = *(unsigned __int8 *)(a2 + 56);
    j__swift_unknownObjectRetain(v3, v4, v6, v5, v7, 1LL);
    sub_183CF8810(v3, v4, v6, v5);
    return j__swift_unknownObjectRelease(v3, v4, v6, v5, v7, v35);
  }

  else
  {
    uint64_t v41 = result;
    unint64_t v8 = *(void *)(a2 + 40);
    int64_t v9 = v5 >> 1;
    if (v6 != v9)
    {
      unsigned int v35 = *(unsigned __int8 *)(a2 + 56);
      uint64_t v58 = v2;
      uint64_t v32 = v7;
      j__swift_unknownObjectRetain(v3, v4, v6, v8, v7, 0LL);
      unint64_t v39 = v8 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v37 = v3;
      swift_unknownObjectRetain();
      uint64_t v36 = v4 + 112;
      uint64_t v10 = v6;
      unint64_t v33 = v8;
      uint64_t v34 = v6;
      uint64_t v40 = v4;
      int64_t v38 = v9;
      while (v10 < (uint64_t)(v8 >> 1))
      {
        if (v9 <= v10) {
          goto LABEL_46;
        }
        if (v8 >> 1 < v9) {
          goto LABEL_47;
        }
        uint64_t v11 = v4 + 96 * v10;
        uint64_t v12 = *(void *)v11;
        uint64_t v13 = *(unsigned __int8 *)(v11 + 8);
        uint64_t v14 = *(unsigned __int8 *)(v11 + 24);
        uint64_t v15 = v10 + 1;
        unint64_t v16 = v8 & 1;
        unint64_t v45 = v16;
        __int128 v43 = *(_OWORD *)(v11 + 48);
        __int128 v44 = *(_OWORD *)(v11 + 32);
        if (*(_BYTE *)(v11 + 24))
        {
          uint64_t v17 = *(void *)(v11 + 16);
          if (v15 == v9)
          {
            uint64_t v18 = v9;
          }

          else
          {
            char v22 = (void *)(v36 + 96 * v10);
            uint64_t v18 = v10 + 1;
            do
            {
              if (v18 >= v9)
              {
LABEL_43:
                __break(1u);
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }

              if (v17 >= *v22) {
                goto LABEL_19;
              }
              uint64_t v23 = v18 + 1;
              if (__OFADD__(v18, 1LL)) {
                goto LABEL_44;
              }
              ++v18;
              v22 += 12;
            }

            while (v23 != v9);
            uint64_t v18 = v9;
LABEL_19:
            if (v18 <= v10) {
              goto LABEL_48;
            }
            if (v18 < 0) {
              goto LABEL_49;
            }
          }

          uint64_t v24 = v18 - v15;
          if (__OFSUB__(v18, v15)) {
            goto LABEL_50;
          }
          if (v24 < 0) {
            goto LABEL_51;
          }
          int64_t v25 = v9 - v15;
          if (__OFSUB__(v9, v15)) {
            goto LABEL_52;
          }
          if (!v24 || v25 < 0 || (int64_t v26 = v9, v25 >= v24))
          {
            int64_t v26 = v18;
            if (__OFADD__(v15, v24)) {
              goto LABEL_55;
            }
            if (v9 < v18) {
              goto LABEL_53;
            }
          }

          if (v26 <= v10) {
            goto LABEL_54;
          }
          if (v15 != v18)
          {
            if (v15 >= v18) {
              goto LABEL_56;
            }
            uint64_t v27 = (uint64_t *)(v36 + 96 * v10);
            do
            {
              uint64_t v28 = *v27;
              v27 += 12;
              if (v17 >= v28)
              {
                __break(1u);
                goto LABEL_43;
              }

              --v24;
            }

            while (v24);
            if (*(void *)(v4 + 96 * v15 + 16) != v17 + 1) {
              goto LABEL_57;
            }
          }

          uint64_t v42 = v26;
          uint64_t v20 = v13;
          uint64_t v47 = v16 | (2 * v18);
          uint64_t v19 = v37;
          swift_unknownObjectRetain();
          uint64_t v46 = v4;
        }

        else
        {
          uint64_t v19 = *(void *)(v11 + 64);
          if (!v19) {
            goto LABEL_58;
          }
          uint64_t v20 = *(unsigned __int8 *)(v11 + 8);
          uint64_t v21 = *(void *)(v11 + 80);
          uint64_t v46 = *(void *)(v11 + 72);
          uint64_t v47 = *(void *)(v11 + 88);
          swift_unknownObjectRetain();
          uint64_t v17 = 0LL;
          uint64_t v42 = v15;
          uint64_t v15 = v21;
        }

        uint64_t v29 = v14;
        uint64_t v30 = v14 ^ 1;
        uint64_t v48 = v12;
        char v49 = v20;
        uint64_t v50 = v19;
        uint64_t v51 = v46;
        uint64_t v52 = v15;
        uint64_t v53 = v47;
        uint64_t v54 = v17;
        char v55 = v30;
        __int128 v56 = v44;
        __int128 v57 = v43;
        swift_unknownObjectRetain();
        j__swift_unknownObjectRetain(v19, v46, v15, v47, v17, v30);
        swift_unknownObjectRetain();
        uint64_t v31 = v58;
        sub_183CDFB78(v12, v20, v29, v41, (uint64_t)&v48);
        uint64_t v58 = v31;
        if (v31) {
          goto LABEL_59;
        }
        unint64_t v8 = v45 | v39;
        j__swift_unknownObjectRelease(v19, v46, v15, v47, v17, v30);
        swift_unknownObjectRelease();
        uint64_t v10 = v42;
        int64_t v9 = v38;
        uint64_t v4 = v40;
        if (v42 == v38)
        {
          uint64_t v3 = v37;
          swift_unknownObjectRelease();
          unint64_t v5 = v33;
          uint64_t v6 = v34;
          uint64_t v7 = v32;
          return j__swift_unknownObjectRelease(v3, v4, v6, v5, v7, v35);
        }
      }

LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      unint64_t result = swift_unexpectedError();
      __break(1u);
    }
  }

  return result;
}

              swift_bridgeObjectRelease();
              sub_183CF84D8((uint64_t)v7, (uint64_t)v8, 0LL, (2 * v5) | 1);
              goto LABEL_35;
            }

uint64_t sub_183CDFF90(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 1) {
    goto LABEL_28;
  }
  uint64_t v6 = a3;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16);
  uint64_t v9 = v8 - a3;
  if (__OFSUB__(v8, a3)) {
    goto LABEL_29;
  }
  uint64_t v3 = a2;
  uint64_t v5 = result;
  if (v9 >= result) {
    goto LABEL_13;
  }
  uint64_t v10 = result - v9;
  if (__OFSUB__(result, v9))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v10 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    unint64_t result = (uint64_t)sub_183CE66F8(0LL, v8 + 1, 1, (char *)v7);
    uint64_t v7 = result;
LABEL_8:
    unint64_t v11 = *(void *)(v7 + 16);
    do
    {
      unint64_t v12 = *(void *)(v7 + 24);
      if (v11 >= v12 >> 1)
      {
        unint64_t result = (uint64_t)sub_183CE66F8((char *)(v12 > 1), v11 + 1, 1, (char *)v7);
        uint64_t v7 = result;
      }

      *(void *)(v7 + 16) = v11 + 1;
      *(_BYTE *)(v7 + v11++ + 32) = 0;
      --v10;
    }

    while (v10);
    *uint64_t v4 = v7;
    goto LABEL_13;
  }

  if (v10)
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

uint64_t sub_183CE0114()
{
  uint64_t v0 = sub_183D04F2C();
  uint64_t result = sub_183D04FB0();
  uint64_t v2 = v0 - result;
  if (__OFSUB__(v0, result))
  {
    __break(1u);
  }

  else
  {
    BOOL v3 = __OFADD__(v2, 7LL);
    uint64_t v4 = v2 + 7;
    if (!v3) {
      return v4 / 8;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE017C(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0LL;
  uint64_t v7 = 32LL;
  int64_t v8 = result;
  while (1)
  {
    BOOL v9 = v8 <= a2;
    if (a3 > 0) {
      BOOL v9 = v8 >= a2;
    }
    if (v9) {
      break;
    }
    BOOL v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10) {
      int64_t v8 = (v8 >> 63) ^ 0x8000000000000000LL;
    }
    v7 += 8LL;
    BOOL v10 = __OFADD__(v6++, 1LL);
    if (v10)
    {
      __break(1u);
      break;
    }
  }

  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C664930);
    unint64_t v11 = (int64_t *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v11);
    uint64_t v12 = result - 32;
    if (result < 32) {
      uint64_t v12 = result - 25;
    }
    uint64_t v13 = v12 >> 3;
    _BYTE v11[2] = v6;
    v11[3] = 2 * v13;
    unint64_t v14 = v11 + 4;
    uint64_t v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      BOOL v16 = v5 <= a2;
      if (a3 > 0) {
        BOOL v16 = v5 >= a2;
      }
      if (v16) {
        break;
      }
      if (__OFADD__(v5, a3)) {
        int64_t v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000LL;
      }
      else {
        int64_t v17 = v5 + a3;
      }
      *v14++ = v5;
      uint64_t v5 = v17;
      if (!--v6) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  unint64_t v11 = (int64_t *)MEMORY[0x18961AFE8];
  unint64_t v14 = (int64_t *)(MEMORY[0x18961AFE8] + 32LL);
  uint64_t v15 = *(void *)(MEMORY[0x18961AFE8] + 24LL) >> 1;
  if (v6) {
    goto LABEL_15;
  }
  int64_t v17 = result;
LABEL_23:
  BOOL v18 = v17 <= a2;
  if (a3 > 0) {
    BOOL v18 = v17 >= a2;
  }
  if (!v18)
  {
    uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      int64_t v20 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        int64_t v20 = v19;
        if (!v15) {
          goto LABEL_32;
        }
        int64_t v20 = v19;
      }

      else if (!v15)
      {
LABEL_32:
        unint64_t v21 = v11[3];
        int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        if (v22 <= 1) {
          uint64_t v23 = 1LL;
        }
        else {
          uint64_t v23 = v22;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C664930);
        uint64_t v24 = (int64_t *)swift_allocObject();
        int64_t v25 = _swift_stdlib_malloc_size(v24);
        uint64_t v26 = v25 - 32;
        if (v25 < 32) {
          uint64_t v26 = v25 - 25;
        }
        uint64_t v27 = v26 >> 3;
        _OWORD v24[2] = v23;
        v24[3] = 2 * (v26 >> 3);
        unint64_t v28 = (unint64_t)(v24 + 4);
        unint64_t v29 = (unint64_t)v11[3] >> 1;
        if (v11[2])
        {
          _BYTE v11[2] = 0LL;
        }

        unint64_t v14 = (int64_t *)(v28 + 8 * v29);
        uint64_t v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
        uint64_t result = swift_release();
        unint64_t v11 = v24;
        uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }

      BOOL v10 = __OFSUB__(v15--, 1LL);
      if (v10) {
        goto LABEL_57;
      }
      *v14++ = v17;
      BOOL v31 = v20 <= a2;
      if (a3 > 0) {
        BOOL v31 = v20 >= a2;
      }
      int64_t v17 = v20;
    }

    while (!v31);
  }

  unint64_t v32 = v11[3];
  if (v32 < 2) {
    return (uint64_t)v11;
  }
  unint64_t v33 = v32 >> 1;
  BOOL v10 = __OFSUB__(v33, v15);
  unint64_t v34 = v33 - v15;
  if (!v10)
  {
    _BYTE v11[2] = v34;
    return (uint64_t)v11;
  }

LABEL_59:
  __break(1u);
  return result;
}

    __break(0x5513u);
  }

uint64_t sub_183CE03FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v5 = v3[1];
  uint64_t v31 = *v3;
  int64_t v6 = v3[2];
  __int128 v29 = *(_OWORD *)(v3 + 3);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_43:
    *(void *)uint64_t result = v31;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = v6;
    *(_OWORD *)(result + 24) = v29;
    return v35;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    int64_t v7 = (unint64_t)v29 >> 1;
    if (v6 == (unint64_t)v29 >> 1)
    {
LABEL_5:
      uint64_t v35 = 0LL;
      goto LABEL_43;
    }

    uint64_t v27 = result;
    if (v6 >= (uint64_t)((unint64_t)v29 >> 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      int64_t v12 = (unint64_t)v29 >> 1;
      uint64_t v35 = v4;
LABEL_42:
      swift_unknownObjectRetain();
      int64_t v6 = v12;
      uint64_t result = v27;
      goto LABEL_43;
    }

    uint64_t v8 = a2;
    uint64_t v28 = v5 + 112;
    uint64_t v4 = 1LL;
    while (v7 > v6)
    {
      BOOL v9 = (uint64_t *)(v5 + 96 * v6);
      uint64_t v10 = *v9;
      char v11 = *((_BYTE *)v9 + 8);
      int64_t v12 = v6 + 1;
      __int128 v33 = *((_OWORD *)v9 + 3);
      __int128 v34 = *((_OWORD *)v9 + 2);
      char v32 = *((_BYTE *)v9 + 24);
      if (v32)
      {
        uint64_t v13 = v9[2];
        int64_t v14 = (unint64_t)v29 >> 1;
        if (v12 != v7)
        {
          uint64_t v15 = (void *)(v28 + 96 * v6);
          int64_t v14 = v6 + 1;
          do
          {
            if (v14 >= v7)
            {
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }

            if (v13 >= *v15) {
              goto LABEL_17;
            }
            int64_t v16 = v14 + 1;
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_46;
            }
            ++v14;
            v15 += 12;
          }

          while (v16 != v7);
          int64_t v14 = (unint64_t)v29 >> 1;
LABEL_17:
          if (v14 <= v6) {
            goto LABEL_48;
          }
          if (v14 < 0) {
            goto LABEL_49;
          }
        }

        int64_t v17 = v14 - v12;
        if (__OFSUB__(v14, v12)) {
          goto LABEL_50;
        }
        if (v17 < 0) {
          goto LABEL_51;
        }
        int64_t v18 = v7 - v12;
        if (__OFSUB__(v7, v12)) {
          goto LABEL_52;
        }
        if (!v17 || v18 < 0 || (int64_t v19 = (unint64_t)v29 >> 1, v18 >= v17))
        {
          int64_t v19 = v14;
          if (__OFADD__(v12, v17)) {
            goto LABEL_55;
          }
          if (v7 < v14) {
            goto LABEL_53;
          }
        }

        if (v19 <= v6) {
          goto LABEL_54;
        }
        if (v12 != v14)
        {
          if (v12 >= v14) {
            goto LABEL_56;
          }
          int64_t v20 = (uint64_t *)(v28 + 96 * v6);
          do
          {
            uint64_t v21 = *v20;
            v20 += 12;
            if (v13 >= v21)
            {
              __break(1u);
              goto LABEL_45;
            }

            --v17;
          }

          while (v17);
          if (*(void *)(v5 + 96 * v12 + 16) != v13 + 1) {
            goto LABEL_57;
          }
        }

        uint64_t v22 = v29 & 1 | (2 * v14);
        uint64_t v23 = swift_unknownObjectRetain();
        int64_t v24 = v12;
        int64_t v12 = v19;
        uint64_t v25 = v22;
        uint64_t v26 = v5;
      }

      else
      {
        uint64_t result = v9[8];
        if (!result) {
          goto LABEL_59;
        }
        uint64_t v26 = v9[9];
        int64_t v30 = v9[10];
        uint64_t v25 = v9[11];
        uint64_t v23 = swift_unknownObjectRetain();
        uint64_t v13 = 0LL;
        int64_t v24 = v30;
      }

      *(void *)uint64_t v8 = v10;
      *(_BYTE *)(v8 + 8) = v11;
      *(void *)(v8 + 16) = v23;
      *(void *)(v8 + 24) = v26;
      *(void *)(v8 + 32) = v24;
      *(void *)(v8 + 40) = v25;
      *(void *)(v8 + 48) = v13;
      *(_BYTE *)(v8 + 56) = v32 ^ 1;
      *(_OWORD *)(v8 + 64) = v34;
      *(_OWORD *)(v8 + 80) = v33;
      if (v4 == v35) {
        goto LABEL_42;
      }
      if (v12 == v7) {
        goto LABEL_41;
      }
      ++v4;
      v8 += 96LL;
      uint64_t result = swift_unknownObjectRetain();
      int64_t v6 = v12;
      if (v12 >= v7) {
        goto LABEL_40;
      }
    }

LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }

  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

    __break(1u);
LABEL_48:
    uint64_t v46 = v4;
    swift_unknownObjectRelease();
    goto LABEL_27;
  }

  return result;
}

void sub_183CE06C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
}

uint64_t sub_183CE06D4@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_7:
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    a6[4] = a5;
  }

  else
  {
    int64_t v7 = (void *)(a2 + 96 * a3 + 16);
    uint64_t v8 = a3;
    do
    {
      if (v8 >= v6)
      {
        __break(1u);
LABEL_9:
        __break(1u);
        goto LABEL_10;
      }

      if (*v7 <= a5) {
        goto LABEL_9;
      }
      ++v8;
      v7 += 12;
    }

    while (v6 != v8);
    if (*(void *)(a2 + 96 * a3 + 16) == a5 + 1) {
      goto LABEL_7;
    }
LABEL_10:
    __break(1u);
  }

  return result;
}

uint64_t sub_183CE0748(unint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  BOOL v9 = *(char **)a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1) {
      BOOL v9 = sub_183CE66F8((char *)(v10 > 1), v11 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v12;
    v9[v11 + 32] = 0;
    *(void *)a4 = v9;
    uint64_t result = sub_183CDFBA8(a4, a5);
    if (v5) {
      return result;
    }
    a5 = *(void *)a4;
    unint64_t v14 = *(void *)(*(void *)a4 + 16LL);
    unint64_t v15 = v14 - v12;
    if (v14 <= v11)
    {
      __break(1u);
    }

    else
    {
      unint64_t v6 = 71 - __clz(v15);
      BOOL v9 = (char *)(v6 >> 3);
      sub_183CDFF90(v6 >> 3, v11 + 1, v14);
      a5 = *(void *)a4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_8;
      }
    }

    uint64_t result = (uint64_t)sub_183CF84B0(a5);
    a5 = result;
LABEL_8:
    if (v11 >= *(void *)(a5 + 16))
    {
      __break(1u);
      goto LABEL_36;
    }

    uint64_t v16 = a5 + 32;
    *(_BYTE *)(a5 + 32 + v11) = (v6 >> 3) | 0x80;
    *(void *)a4 = a5;
    if (v11 + 1 < *(void *)(a5 + 16))
    {
      *(_BYTE *)(v16 + v11 + 1) = v15 >> (8 * (((_BYTE)v9 - 1) & 7u));
      if (v11 + 2 < *(void *)(a5 + 16))
      {
        *(_BYTE *)(v16 + v11 + 2) = v15 >> (8 * (((_BYTE)v9 - 2) & 7u));
        if (v11 + 3 < *(void *)(a5 + 16))
        {
          *(_BYTE *)(v16 + v11 + 3) = v15 >> (8 * (((_BYTE)v9 - 3) & 7u));
          if (v11 + 4 < *(void *)(a5 + 16))
          {
            *(_BYTE *)(v16 + v11 + 4) = v15 >> (8 * (((_BYTE)v9 - 4) & 7u));
            if (v11 + 5 < *(void *)(a5 + 16))
            {
              *(_BYTE *)(v16 + v11 + 5) = v15 >> (8 * (((_BYTE)v9 - 5) & 7u));
              if (v11 + 6 < *(void *)(a5 + 16))
              {
                *(_BYTE *)(v16 + v11 + 6) = v15 >> (8 * (((_BYTE)v9 - 6) & 7u));
                if (v11 + 7 < *(void *)(a5 + 16))
                {
                  *(_BYTE *)(v16 + v11 + 7) = v15 >> (8 * (((_BYTE)v9 - 7) & 7u));
                  if (v11 + 8 < *(void *)(a5 + 16))
                  {
                    *(_BYTE *)(v16 + v11 + 8) = v15 >> (v6 & 0x38);
LABEL_29:
                    *(void *)a4 = a5;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_32:
    BOOL v9 = sub_183CE66F8(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }

  if ((v15 & 0x8000000000000000LL) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_27;
  }
LABEL_37:
  uint64_t result = (uint64_t)sub_183CF84B0(a5);
  a5 = result;
LABEL_27:
  if (v11 < *(void *)(a5 + 16))
  {
    *(_BYTE *)(a5 + v11 + 32) = v15;
    goto LABEL_29;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE09F4( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    int64_t v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5)) {
      goto LABEL_20;
    }
    if (v7 != (a6 >> 1) - a5) {
      return 0LL;
    }
    if (!v7 || result + a2 == a4 + a5 || v6 == a2) {
      return 1LL;
    }
    if (v6 <= a2) {
      goto LABEL_22;
    }
    uint64_t v9 = a2 + 1;
    int v10 = *(unsigned __int8 *)(result + a2);
    if (v6 == a2) {
      return 1LL;
    }
    uint64_t v11 = a5;
    if (v8 == a5) {
      return 0LL;
    }
    while (v11 >= a5 && v11 < v8)
    {
      if (v6 == v9) {
        return 1LL;
      }
      if (v9 >= v6) {
        goto LABEL_21;
      }
      int v10 = *(unsigned __int8 *)(result + v9++);
      if (v8 == ++v11) {
        return 0LL;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_183CE0AC8(unint64_t a1, char a2, char a3, char **a4, uint64_t (*a5)(char **))
{
  uint64_t v9 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1) {
      uint64_t v9 = sub_183CE66F8((char *)(v10 > 1), v11 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v12;
    v9[v11 + 32] = 0;
    *a4 = v9;
    uint64_t result = a5(a4);
    if (v5) {
      return result;
    }
    uint64_t v9 = *a4;
    unint64_t v14 = *((void *)*a4 + 2);
    unint64_t v15 = v14 - v12;
    if (v14 <= v11)
    {
      __break(1u);
    }

    else
    {
      unint64_t v6 = 71 - __clz(v15);
      a5 = (uint64_t (*)(char **))(v6 >> 3);
      sub_183CDFF90(v6 >> 3, v11 + 1, v14);
      uint64_t v9 = *a4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_8;
      }
    }

    uint64_t result = (uint64_t)sub_183CF84B0((uint64_t)v9);
    uint64_t v9 = (char *)result;
LABEL_8:
    if (v11 >= *((void *)v9 + 2))
    {
      __break(1u);
      goto LABEL_36;
    }

    uint64_t v16 = v9 + 32;
    v9[v11 + 32] = (v6 >> 3) | 0x80;
    *a4 = v9;
    if (v11 + 1 < *((void *)v9 + 2))
    {
      v16[v11 + 1] = v15 >> (8 * (((_BYTE)a5 - 1) & 7u));
      if (v11 + 2 < *((void *)v9 + 2))
      {
        v16[v11 + 2] = v15 >> (8 * (((_BYTE)a5 - 2) & 7u));
        if (v11 + 3 < *((void *)v9 + 2))
        {
          v16[v11 + 3] = v15 >> (8 * (((_BYTE)a5 - 3) & 7u));
          if (v11 + 4 < *((void *)v9 + 2))
          {
            v16[v11 + 4] = v15 >> (8 * (((_BYTE)a5 - 4) & 7u));
            if (v11 + 5 < *((void *)v9 + 2))
            {
              v16[v11 + 5] = v15 >> (8 * (((_BYTE)a5 - 5) & 7u));
              if (v11 + 6 < *((void *)v9 + 2))
              {
                v16[v11 + 6] = v15 >> (8 * (((_BYTE)a5 - 6) & 7u));
                if (v11 + 7 < *((void *)v9 + 2))
                {
                  v16[v11 + 7] = v15 >> (8 * (((_BYTE)a5 - 7) & 7u));
                  if (v11 + 8 < *((void *)v9 + 2))
                  {
                    v16[v11 + 8] = v15 >> (v6 & 0x38);
LABEL_29:
                    *a4 = v9;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_32:
    uint64_t v9 = sub_183CE66F8(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }

  if ((v15 & 0x8000000000000000LL) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_27;
  }
LABEL_37:
  uint64_t result = (uint64_t)sub_183CF84B0((uint64_t)v9);
  uint64_t v9 = (char *)result;
LABEL_27:
  if (v11 < *((void *)v9 + 2))
  {
    v9[v11 + 32] = v15;
    goto LABEL_29;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE0D80(unint64_t a1, char a2, char a3, char **a4, char *a5)
{
  uint64_t v7 = v5;
  sub_183CFAF68(a1, a2, a3);
  unint64_t v10 = *a4;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    unint64_t v13 = *((void *)v10 + 2);
    unint64_t v12 = *((void *)v10 + 3);
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_183CE66F8((char *)(v12 > 1), v13 + 1, 1, v10);
      unint64_t v10 = (char *)isUniquelyReferenced_nonNull_native;
    }

    *((void *)v10 + 2) = v14;
    v10[v13 + 32] = 0;
    *a4 = v10;
    MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
    uint64_t result = sub_183CE0AC8(0xCuLL, 0, 0, a4, (uint64_t (*)(char **))sub_183CE1FC0);
    if (v7) {
      return result;
    }
    __int128 v16 = *((_OWORD *)a5 + 3);
    v23[0] = *((_OWORD *)a5 + 2);
    v23[1] = v16;
    uint64_t v17 = *((void *)&v23[0] + 1);
    unint64_t v10 = (char *)*((void *)&v16 + 1);
    uint64_t v18 = v16;
    uint64_t v19 = swift_unknownObjectRetain();
    sub_183CF8810(v19, v17, v18, (unint64_t)v10);
    sub_183CE1FDC((uint64_t)v23);
    a5 = *a4;
    unint64_t v20 = *((void *)*a4 + 2);
    unint64_t v21 = v20 - v14;
    if (v20 <= v13)
    {
      __break(1u);
    }

    else
    {
      unint64_t v6 = 71 - __clz(v21);
      unint64_t v10 = (char *)(v6 >> 3);
      sub_183CDFF90(v6 >> 3, v13 + 1, v20);
      a5 = *a4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_8;
      }
    }

    uint64_t result = (uint64_t)sub_183CF84B0((uint64_t)a5);
    a5 = (char *)result;
LABEL_8:
    if (v13 >= *((void *)a5 + 2))
    {
      __break(1u);
      goto LABEL_36;
    }

    uint64_t v22 = a5 + 32;
    a5[v13 + 32] = (v6 >> 3) | 0x80;
    *a4 = a5;
    if (v13 + 1 < *((void *)a5 + 2))
    {
      v22[v13 + 1] = v21 >> (8 * (((_BYTE)v10 - 1) & 7u));
      if (v13 + 2 < *((void *)a5 + 2))
      {
        v22[v13 + 2] = v21 >> (8 * (((_BYTE)v10 - 2) & 7u));
        if (v13 + 3 < *((void *)a5 + 2))
        {
          v22[v13 + 3] = v21 >> (8 * (((_BYTE)v10 - 3) & 7u));
          if (v13 + 4 < *((void *)a5 + 2))
          {
            v22[v13 + 4] = v21 >> (8 * (((_BYTE)v10 - 4) & 7u));
            if (v13 + 5 < *((void *)a5 + 2))
            {
              v22[v13 + 5] = v21 >> (8 * (((_BYTE)v10 - 5) & 7u));
              if (v13 + 6 < *((void *)a5 + 2))
              {
                v22[v13 + 6] = v21 >> (8 * (((_BYTE)v10 - 6) & 7u));
                if (v13 + 7 < *((void *)a5 + 2))
                {
                  v22[v13 + 7] = v21 >> (8 * (((_BYTE)v10 - 7) & 7u));
                  if (v13 + 8 < *((void *)a5 + 2))
                  {
                    v22[v13 + 8] = v21 >> (v6 & 0x38);
LABEL_29:
                    *a4 = a5;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_32:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_183CE66F8(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    unint64_t v10 = (char *)isUniquelyReferenced_nonNull_native;
  }

  if ((v21 & 0x8000000000000000LL) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_27;
  }
LABEL_37:
  uint64_t result = (uint64_t)sub_183CF84B0((uint64_t)a5);
  a5 = (char *)result;
LABEL_27:
  if (v13 < *((void *)a5 + 2))
  {
    a5[v13 + 32] = v21;
    goto LABEL_29;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE109C(unint64_t a1, char a2, char a3, char **a4, char *a5)
{
  uint64_t v9 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1) {
      uint64_t v9 = sub_183CE66F8((char *)(v10 > 1), v11 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v12;
    v9[v11 + 32] = 0;
    *a4 = v9;
    uint64_t result = sub_183CDC8A8(a4, (uint64_t)a5);
    if (v5) {
      return result;
    }
    a5 = *a4;
    unint64_t v14 = *((void *)*a4 + 2);
    unint64_t v15 = v14 - v12;
    if (v14 <= v11)
    {
      __break(1u);
    }

    else
    {
      unint64_t v6 = 71 - __clz(v15);
      uint64_t v9 = (char *)(v6 >> 3);
      sub_183CDFF90(v6 >> 3, v11 + 1, v14);
      a5 = *a4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_8;
      }
    }

    uint64_t result = (uint64_t)sub_183CF84B0((uint64_t)a5);
    a5 = (char *)result;
LABEL_8:
    if (v11 >= *((void *)a5 + 2))
    {
      __break(1u);
      goto LABEL_36;
    }

    __int128 v16 = a5 + 32;
    a5[v11 + 32] = (v6 >> 3) | 0x80;
    *a4 = a5;
    if (v11 + 1 < *((void *)a5 + 2))
    {
      v16[v11 + 1] = v15 >> (8 * (((_BYTE)v9 - 1) & 7u));
      if (v11 + 2 < *((void *)a5 + 2))
      {
        v16[v11 + 2] = v15 >> (8 * (((_BYTE)v9 - 2) & 7u));
        if (v11 + 3 < *((void *)a5 + 2))
        {
          v16[v11 + 3] = v15 >> (8 * (((_BYTE)v9 - 3) & 7u));
          if (v11 + 4 < *((void *)a5 + 2))
          {
            v16[v11 + 4] = v15 >> (8 * (((_BYTE)v9 - 4) & 7u));
            if (v11 + 5 < *((void *)a5 + 2))
            {
              v16[v11 + 5] = v15 >> (8 * (((_BYTE)v9 - 5) & 7u));
              if (v11 + 6 < *((void *)a5 + 2))
              {
                v16[v11 + 6] = v15 >> (8 * (((_BYTE)v9 - 6) & 7u));
                if (v11 + 7 < *((void *)a5 + 2))
                {
                  v16[v11 + 7] = v15 >> (8 * (((_BYTE)v9 - 7) & 7u));
                  if (v11 + 8 < *((void *)a5 + 2))
                  {
                    v16[v11 + 8] = v15 >> (v6 & 0x38);
LABEL_29:
                    *a4 = a5;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_32:
    uint64_t v9 = sub_183CE66F8(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }

  if ((v15 & 0x8000000000000000LL) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_27;
  }
LABEL_37:
  uint64_t result = (uint64_t)sub_183CF84B0((uint64_t)a5);
  a5 = (char *)result;
LABEL_27:
  if (v11 < *((void *)a5 + 2))
  {
    a5[v11 + 32] = v15;
    goto LABEL_29;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE1348( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v8 = a5;
  int64_t v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5)) {
    goto LABEL_37;
  }
  if (v7 != (a6 >> 1) - a5) {
    return 0LL;
  }
  if (!v7) {
    return 1LL;
  }
  uint64_t v10 = a4;
  uint64_t v11 = result + 96 * a2;
  if (v11 == a4 + 96 * a5) {
    return 1LL;
  }
  int64_t v44 = a3 >> 1;
  unint64_t v46 = a6 >> 1;
  if (v6 == a2)
  {
    uint64_t v42 = result;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v61 = 0LL;
    unint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    char v19 = 0;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t result = 0LL;
    uint64_t v22 = a5;
    uint64_t v23 = a5;
    goto LABEL_11;
  }

  uint64_t v23 = a5;
  if (v6 > a2)
  {
LABEL_10:
    uint64_t v42 = result;
    uint64_t v25 = result + 96 * a2;
    char v19 = *(_BYTE *)(v25 + 24);
    uint64_t v55 = a2 + 1;
    uint64_t v18 = *(void *)(v25 + 32);
    uint64_t v57 = *(void *)(v25 + 40);
    uint64_t v58 = *(unsigned __int8 *)(v11 + 8);
    uint64_t v54 = *(void *)(v25 + 88);
    uint64_t v50 = *(void *)(v25 + 80);
    uint64_t v52 = *(void *)(v25 + 72);
    uint64_t v26 = *(void *)(v25 + 48);
    unint64_t v60 = *(void *)(v25 + 56);
    uint64_t v61 = *(void *)(v25 + 64);
    uint64_t v27 = *(void *)(v25 + 16);
    uint64_t v28 = *(void *)v11;
    uint64_t v29 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t result = v28;
    uint64_t v14 = v52;
    uint64_t v12 = v54;
    uint64_t v13 = v50;
    uint64_t v20 = v27;
    uint64_t v17 = v57;
    uint64_t v21 = v58;
    uint64_t v23 = v29;
    uint64_t v16 = v26;
    unint64_t v15 = v60;
    uint64_t v22 = v29;
    a2 = v55;
LABEL_11:
    int64_t v30 = (unint64_t *)(v10 + 96 * v22 + 88);
    uint64_t v47 = v22;
    uint64_t v48 = a2;
    while (1)
    {
      BOOL v24 = v18 == 0;
      if (!v18) {
        return v24;
      }
      uint64_t v31 = v19 & 1;
      if (v9 == v23) {
        break;
      }
      if (v22 < v8 || v23 >= v9) {
        goto LABEL_38;
      }
      if (result != *(v30 - 11)
        || *((unsigned __int8 *)v30 - 80) != v21
        || v20 != *(v30 - 9)
        || (_DWORD)v31 != *((unsigned __int8 *)v30 - 64))
      {
        uint64_t v40 = v21;
        uint64_t v41 = v18;
LABEL_32:
        sub_183CE1E10(result, v40, v20, v31, v41);
        return 0LL;
      }

      uint64_t v51 = v19 & 1;
      uint64_t v53 = v20;
      uint64_t v32 = result;
      unint64_t v33 = v12;
      uint64_t v34 = v13;
      uint64_t v59 = v21;
      uint64_t v49 = v23;
      uint64_t v56 = v18;
      uint64_t v35 = *(v30 - 3);
      uint64_t v37 = *(v30 - 2);
      uint64_t v36 = *(v30 - 1);
      unint64_t v38 = *v30;
      if ((sub_183CE09F4(v17, v16, v15, *(v30 - 6), *(v30 - 5), *(v30 - 4)) & 1) == 0) {
        goto LABEL_31;
      }
      if (v61)
      {
        if (!v35) {
          goto LABEL_31;
        }
        char v39 = sub_183CE09F4(v14, v34, v33, v37, v36, v38);
        sub_183CE1E10(v32, v59, v53, v51, v56);
        if ((v39 & 1) == 0) {
          return v24;
        }
      }

      else
      {
        if (v35)
        {
LABEL_31:
          uint64_t result = v32;
          uint64_t v40 = v59;
          uint64_t v31 = v51;
          uint64_t v20 = v53;
          uint64_t v41 = v56;
          goto LABEL_32;
        }

        sub_183CE1E10(v32, v59, v53, v51, v56);
      }

      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v61 = 0LL;
      unint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      char v19 = 0;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      uint64_t result = 0LL;
      v30 += 12;
      a2 = v48;
      uint64_t v23 = v49 + 1;
      uint64_t v8 = a5;
      int64_t v9 = v46;
      uint64_t v22 = v47;
      if (v48 != v44)
      {
        if (v48 >= v44) {
          goto LABEL_40;
        }
        uint64_t result = v42;
        uint64_t v10 = a4;
        uint64_t v11 = v42 + 96 * v48;
        goto LABEL_10;
      }
    }

    v62[0] = result;
    v62[1] = v21;
    v62[2] = v20;
    v62[3] = v19 & 1;
    _OWORD v62[4] = v18;
    v62[5] = v17;
    v62[6] = v16;
    v62[7] = v15;
    v62[8] = v61;
    v62[9] = v14;
    v62[10] = v13;
    v62[11] = v12;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    sub_183CE1E40(v62);
    return 0LL;
  }

LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_183CE16E8(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16)
    && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0
    && (sub_183CE09F4( *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a2 + 40),  *(void *)(a2 + 48),  *(void *)(a2 + 56)) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    if (*(void *)(a1 + 64))
    {
      if (v4
        && (sub_183CE09F4( *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a2 + 72),  *(void *)(a2 + 80),  *(void *)(a2 + 88)) & 1) != 0)
      {
        return 1LL;
      }
    }

    else if (!v4)
    {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_183CE1798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v15;
  uint64_t v5 = v16;
  unint64_t v6 = v17;
  if ((v19 & 1) != 0)
  {
    sub_183CDD0CC((uint64_t)v12, (uint64_t)v20);
    if ((v25 & 1) != 0 && (sub_183CE09F4(v4, v5, v6, v21, v22, v23) & 1) != 0)
    {
LABEL_12:
      char v8 = sub_183CE09F4( *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a2 + 72),  *(void *)(a2 + 80),  *(void *)(a2 + 88));
      return v8 & 1;
    }

    goto LABEL_8;
  }

  uint64_t v7 = v18;
  sub_183CDD0CC((uint64_t)v12, (uint64_t)v20);
  if ((v25 & 1) != 0)
  {
LABEL_8:
    char v8 = 0;
    return v8 & 1;
  }

  uint64_t v10 = v24;
  char v11 = sub_183CE1348(v4, v5, v6, v21, v22, v23);
  char v8 = 0;
  if ((v11 & 1) != 0 && v7 == v10) {
    goto LABEL_12;
  }
  return v8 & 1;
}

uint64_t sub_183CE18C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v6 = a4 >> 1;
  uint64_t result = MEMORY[0x18961AFE8];
  if (a4 >> 1 == a3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_52;
  }

  char v8 = a4;
  uint64_t v9 = a3;
  unint64_t v45 = (char *)MEMORY[0x18961AFE8];
  uint64_t v43 = a1;
  uint64_t result = swift_unknownObjectRetain();
  if (v6 > v9)
  {
    uint64_t v4 = 0LL;
    uint64_t v41 = v8 & 1;
    uint64_t v42 = a2 + 112;
    uint64_t v11 = MEMORY[0x18961AFE8] + 32LL;
    uint64_t v44 = a2;
    do
    {
      if (v6 <= v9)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }

      uint64_t v12 = (uint64_t *)(a2 + 96 * v9);
      uint64_t v13 = *v12;
      char v14 = *((_BYTE *)v12 + 8);
      uint64_t v15 = v9 + 1;
      __int128 v50 = *((_OWORD *)v12 + 3);
      __int128 v51 = *((_OWORD *)v12 + 2);
      char v49 = *((_BYTE *)v12 + 24);
      if (v49)
      {
        uint64_t v16 = v12[2];
        uint64_t v17 = v6;
        if (v15 != v6)
        {
          uint64_t v18 = (void *)(v42 + 96 * v9);
          uint64_t v17 = v9 + 1;
          do
          {
            if (v17 >= v6)
            {
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }

            if (v16 >= *v18) {
              goto LABEL_14;
            }
            uint64_t v19 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_58;
            }
            ++v17;
            v18 += 12;
          }

          while (v19 != v6);
          uint64_t v17 = v6;
LABEL_14:
          if (v17 <= v9) {
            goto LABEL_61;
          }
          if (v17 < 0) {
            goto LABEL_62;
          }
        }

        uint64_t v20 = v17 - v15;
        if (__OFSUB__(v17, v15)) {
          goto LABEL_63;
        }
        if (v20 < 0) {
          goto LABEL_64;
        }
        uint64_t v21 = v6 - v15;
        if (__OFSUB__(v6, v15)) {
          goto LABEL_65;
        }
        char v46 = v14;
        uint64_t v22 = v13;
        if (!v20 || v21 < 0 || (uint64_t v23 = v6, v21 >= v20))
        {
          uint64_t v23 = v17;
          if (__OFADD__(v15, v20)) {
            goto LABEL_69;
          }
          if (v6 < v17) {
            goto LABEL_66;
          }
        }

        if (v23 <= v9) {
          goto LABEL_67;
        }
        if (v15 != v17)
        {
          if (v15 >= v17) {
            goto LABEL_70;
          }
          uint64_t v24 = (uint64_t *)(v42 + 96 * v9);
          do
          {
            uint64_t v25 = *v24;
            v24 += 12;
            if (v16 >= v25)
            {
              __break(1u);
              goto LABEL_57;
            }

            --v20;
          }

          while (v20);
          if (*(void *)(a2 + 96 * v15 + 16) != v16 + 1) {
            goto LABEL_71;
          }
        }

        uint64_t v48 = v41 | (2 * v17);
        uint64_t v26 = v43;
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v9 = v23;
        uint64_t v47 = a2;
        uint64_t v13 = v22;
        char v14 = v46;
        if (v4)
        {
LABEL_43:
          uint64_t result = swift_unknownObjectRetain();
          BOOL v37 = __OFSUB__(v4--, 1LL);
          if (v37) {
            goto LABEL_60;
          }
          goto LABEL_48;
        }
      }

      else
      {
        uint64_t v26 = v12[8];
        if (!v26) {
          goto LABEL_73;
        }
        uint64_t v36 = v12[10];
        uint64_t v47 = v12[9];
        uint64_t v48 = v12[11];
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v16 = 0LL;
        ++v9;
        uint64_t v15 = v36;
        a2 = v44;
        if (v4) {
          goto LABEL_43;
        }
      }

      unint64_t v27 = *((void *)v45 + 3);
      int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
      if (v28 <= 1) {
        uint64_t v29 = 1LL;
      }
      else {
        uint64_t v29 = v28;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C664928);
      int64_t v30 = (char *)swift_allocObject();
      uint64_t v31 = (uint64_t)(_swift_stdlib_malloc_size(v30) - 32) / 96;
      *((void *)v30 + 2) = v29;
      *((void *)v30 + 3) = 2 * v31;
      uint64_t v32 = v30 + 32;
      uint64_t v33 = *((void *)v45 + 3) >> 1;
      uint64_t v11 = (uint64_t)&v30[96 * v33 + 32];
      uint64_t v34 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v33;
      if (*((void *)v45 + 2))
      {
        uint64_t v35 = v45 + 32;
        if (v30 != v45 || v32 >= &v35[96 * v33]) {
          memmove(v32, v35, 96 * v33);
        }
        swift_unknownObjectRetain();
        *((void *)v45 + 2) = 0LL;
      }

      else
      {
        swift_unknownObjectRetain();
      }

      uint64_t result = swift_release();
      unint64_t v45 = v30;
      a2 = v44;
      BOOL v37 = __OFSUB__(v34, 1LL);
      uint64_t v4 = v34 - 1;
      if (v37) {
        goto LABEL_60;
      }
LABEL_48:
      *(void *)uint64_t v11 = v13;
      *(_BYTE *)(v11 + 8) = v14;
      *(void *)(v11 + 16) = v26;
      *(void *)(v11 + 24) = v47;
      *(void *)(v11 + 32) = v15;
      *(void *)(v11 + 40) = v48;
      *(void *)(v11 + 48) = v16;
      *(_BYTE *)(v11 + 56) = v49 ^ 1;
      *(_OWORD *)(v11 + 64) = v51;
      *(_OWORD *)(v11 + 80) = v50;
      if (v9 == v6) {
        goto LABEL_51;
      }
      v11 += 96LL;
    }

    while (v9 < v6);
  }

  __break(1u);
LABEL_51:
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)v45;
LABEL_52:
  unint64_t v38 = *(void *)(result + 24);
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v37 = __OFSUB__(v39, v4);
    uint64_t v40 = v39 - v4;
    if (v37) {
      goto LABEL_72;
    }
    *(void *)(result + 16) = v40;
  }

  return result;
}

uint64_t sub_183CE1CA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_25:
    __break(1u);
    return result;
  }

  uint64_t v6 = a3;
  uint64_t result = sub_183D05034();
  if (v4 != v6)
  {
    uint64_t v21 = v4;
    while (v6 < v4)
    {
      uint64_t v7 = (void *)(a2 + 96 * v6);
      uint64_t v8 = v7[5];
      uint64_t v9 = v7[6];
      uint64_t v10 = v7[10];
      uint64_t v23 = v7[9];
      unint64_t v24 = v7[11];
      unint64_t v12 = v7[7];
      uint64_t v11 = v7[8];
      sub_183D05034();
      sub_183D05034();
      sub_183D05034();
      sub_183D05040();
      unint64_t v13 = v12 >> 1;
      uint64_t result = (v12 >> 1) - v9;
      if (__OFSUB__(v12 >> 1, v9)) {
        goto LABEL_21;
      }
      uint64_t result = sub_183D05034();
      BOOL v14 = __OFSUB__(v13, v9);
      uint64_t v15 = v13 - v9;
      if (v15)
      {
        if ((v15 < 0) ^ v14 | (v15 == 0)) {
          goto LABEL_23;
        }
        uint64_t v16 = v8 + v9;
        do
        {
          ++v16;
          sub_183D05040();
          --v15;
        }

        while (v15);
      }

      if (v11)
      {
        sub_183D05040();
        unint64_t v17 = v24 >> 1;
        uint64_t result = (v24 >> 1) - v10;
        if (__OFSUB__(v24 >> 1, v10)) {
          goto LABEL_22;
        }
        uint64_t result = sub_183D05034();
        BOOL v18 = __OFSUB__(v17, v10);
        uint64_t v19 = v17 - v10;
        if (v19)
        {
          if ((v19 < 0) ^ v18 | (v19 == 0)) {
            goto LABEL_24;
          }
          uint64_t v20 = v23 + v10;
          do
          {
            ++v20;
            uint64_t result = sub_183D05040();
            --v19;
          }

          while (v19);
        }
      }

      else
      {
        uint64_t result = sub_183D05040();
      }

      ++v6;
      int64_t v4 = v21;
      if (v6 == v21) {
        return result;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  return result;
}

uint64_t sub_183CE1E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t *sub_183CE1E40(uint64_t *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v7 = a1[12];
  uint64_t v3 = a1[14];
  uint64_t v4 = a1[15];
  uint64_t v5 = a1[16];
  sub_183CE1E10(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_183CE1E10(v7, v2, v3, v4, v5);
  return a1;
}

uint64_t sub_183CE1F00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_183CE1F44(uint64_t a1)
{
  return a1;
}

uint64_t *sub_183CE1F70(uint64_t *a1)
{
  return a1;
}

uint64_t sub_183CE1FC0(uint64_t a1)
{
  return sub_183CEAE98(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_183CE1FDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_183CE2004(uint64_t a1)
{
  return a1;
}

void sub_183CE2044(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5 = a4 >> 1;
  int64_t v6 = a3;
  if (a4 >> 1 != a3)
  {
    uint64_t v7 = (void *)(a2 + 96 * a3 + 16);
    int64_t v6 = a3;
    while (1)
    {
      if (v6 >= v5)
      {
        __break(1u);
        goto LABEL_13;
      }

      if (*(void *)(a5 + 16) >= *v7) {
        break;
      }
      ++v6;
      v7 += 12;
      if (v5 == v6)
      {
        int64_t v6 = a4 >> 1;
        break;
      }
    }

    if (v6 >= a3) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

uint64_t sub_183CE20C8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_183CDE72C(a1, a2, a3, a4);
  if (!v5)
  {
    unint64_t v11 = v10;
    unint64_t v12 = v10 >> 1;
    if (v9 == v10 >> 1)
    {
      __break(1u);
    }

    else if (v9 < (uint64_t)(v10 >> 1))
    {
      uint64_t v13 = result;
      uint64_t v14 = v8;
      uint64_t v15 = (__int128 *)(v8 + 96 * v9);
      __int128 v16 = v15[1];
      __int128 v44 = *v15;
      __int128 v45 = v16;
      __int128 v17 = v15[2];
      __int128 v18 = v15[3];
      __int128 v19 = v15[5];
      v48[0] = v15[4];
      v48[1] = v19;
      __int128 v46 = v17;
      __int128 v47 = v18;
      int64_t v20 = v9 + 1;
      int v51 = BYTE8(v45);
      if ((BYTE8(v45) & 1) != 0)
      {
        sub_183CE2044(result, v8, v9 + 1, v10, (uint64_t)&v44);
        uint64_t v41 = v29;
        uint64_t result = (v28 >> 1) - v27;
        if (__OFSUB__(v28 >> 1, v27))
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }

        uint64_t v30 = v26;
        uint64_t v31 = v27;
        unint64_t v32 = v28;
        sub_183CDF0D8(result, v13, v14, v20, v11);
        unint64_t v37 = v33;
        int64_t v20 = v34;
        sub_183CE06D4(v41, v30, v31, v32, v45, v42);
        uint64_t v21 = v42[0];
        uint64_t v39 = v42[1];
        uint64_t v22 = v42[2];
        __int128 v38 = v43;
        __int128 v40 = v46;
        uint64_t v24 = *((void *)&v47 + 1);
        uint64_t v25 = v47;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v12 = v37 >> 1;
      }

      else
      {
        sub_183CE1F00((uint64_t)v48, (uint64_t)v49, &qword_18C664920);
        uint64_t result = sub_183CE1F00((uint64_t)v49, (uint64_t)v50, &qword_18C664920);
        uint64_t v21 = v50[0];
        if (!v50[0])
        {
LABEL_18:
          __break(1u);
          return result;
        }

        uint64_t v22 = v50[2];
        uint64_t v39 = v50[1];
        *((void *)&v23 + 1) = *((void *)&v46 + 1);
        __int128 v40 = v46;
        uint64_t v24 = *((void *)&v47 + 1);
        uint64_t v25 = v47;
        *(void *)&__int128 v23 = v50[3];
        __int128 v38 = v23;
        sub_183CE1F44((uint64_t)v49);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
      }

      if (!__OFSUB__(v12, v20))
      {
        if (v12 == v20)
        {
          char v35 = BYTE8(v44);
          BOOL v36 = (v51 & 1) == 0;
          *(void *)a5 = v44;
          *(_BYTE *)(a5 + 8) = v35;
          *(void *)(a5 + 16) = v21;
          *(void *)(a5 + 24) = v39;
          *(void *)(a5 + 32) = v22;
          *(_OWORD *)(a5 + 40) = v38;
          *(_BYTE *)(a5 + 56) = v36;
          *(_OWORD *)(a5 + 64) = v40;
          *(void *)(a5 + 80) = v25;
          *(void *)(a5 + 88) = v24;
          return result;
        }

        goto LABEL_16;
      }

ValueMetadata *type metadata accessor for DER()
{
  return &type metadata for DER;
}

uint64_t destroy for DER.ParserNode()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DER.ParserNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DER.ParserNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for DER.ParserNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_unknownObjectRelease();
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_unknownObjectRelease();
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for DER.ParserNode(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DER.ParserNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DER.ParserNode()
{
  return &type metadata for DER.ParserNode;
}

uint64_t initializeWithCopy for der_key(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for der_key(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for der_key(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for der_key(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for der_key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DER.ParseResult()
{
  return &type metadata for DER.ParseResult;
}

uint64_t destroy for der_key()
{
  return swift_unknownObjectRelease();
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ASN1NodeCollection.Iterator()
{
  return &type metadata for ASN1NodeCollection.Iterator;
}

uint64_t initializeWithCopy for ASN1BitString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for ASN1BitString(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ASN1BitString(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1BitString(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1BitString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1NodeCollection()
{
  return &type metadata for ASN1NodeCollection;
}

uint64_t destroy for ASN1Node(uint64_t a1)
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ASN1Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 56);
  j__swift_unknownObjectRetain(v4, v5, v6, v7, v8, v9);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 56);
  j__swift_unknownObjectRetain(v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  j__swift_unknownObjectRelease(v10, v11, v12, v13, v14, v15);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for ASN1Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 48);
  char v5 = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 56);
  __int128 v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = v5;
  j__swift_unknownObjectRelease(v6, v7, v8, v9, v10, v11);
  swift_unknownObjectRelease();
  __int128 v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1Node(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1Node()
{
  return &type metadata for ASN1Node;
}

unint64_t sub_183CE2B70()
{
  unint64_t result = qword_18C664938;
  if (!qword_18C664938)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AF14, &type metadata for ASN1Node);
    atomic_store(result, (unint64_t *)&qword_18C664938);
  }

  return result;
}

uint64_t sub_183CE2BBC(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) != 0)
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CE66F8(0LL, *(void *)(v4 + 16) + 1LL, 1, (char *)v4);
      uint64_t v4 = result;
    }

    unint64_t v7 = *(void *)(v4 + 16);
    unint64_t v6 = *(void *)(v4 + 24);
    unint64_t v8 = v7 + 1;
    if (v7 >= v6 >> 1)
    {
      uint64_t result = (uint64_t)sub_183CE66F8((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }

    char v9 = -1;
  }

  else
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CE66F8(0LL, *(void *)(v4 + 16) + 1LL, 1, (char *)v4);
      uint64_t v4 = result;
    }

    unint64_t v7 = *(void *)(v4 + 16);
    unint64_t v10 = *(void *)(v4 + 24);
    unint64_t v8 = v7 + 1;
    if (v7 >= v10 >> 1)
    {
      uint64_t result = (uint64_t)sub_183CE66F8((char *)(v10 > 1), v7 + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }

    char v9 = 0;
  }

  *(void *)(v4 + 16) = v8;
  *(_BYTE *)(v4 + v7 + 32) = v9;
  *a1 = v4;
  return result;
}

uint64_t sub_183CE2CCC(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3 = result;
  if (*(void *)result != a2 || *(unsigned __int8 *)(result + 8) != a3)
  {
    uint64_t v8 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1Boolean.swift", 31LL, 2, 22LL);
LABEL_12:
    uint64_t v9 = v8;
    sub_183CDD030();
    swift_allocError();
    *unint64_t v10 = v9;
    swift_willThrow();
    sub_183CE2004(v3);
    return v7 & 1;
  }

  if (*(_BYTE *)(result + 56) != 1) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = *(void *)(result + 40);
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_17;
  }

  if ((v5 >> 1) - v4 != 1)
  {
LABEL_11:
    uint64_t v8 = sub_183CDD978( 0xD00000000000001CLL,  0x8000000183D08D30LL,  (uint64_t)"AppleKeyStore/ASN1Boolean.swift",  31LL,  2,  26LL);
    goto LABEL_12;
  }

  if (v4 < (uint64_t)(v5 >> 1))
  {
    uint64_t v6 = *(void *)(result + 24);
    if (*(unsigned __int8 *)(v6 + v4) == 255)
    {
      sub_183CE2004(result);
      char v7 = 1;
    }

    else if (*(_BYTE *)(v6 + v4))
    {
      uint64_t v11 = *(void *)(result + 16);
      uint64_t v12 = *(void *)(result + 48);
      uint64_t v13 = sub_183CDD978( 0xD000000000000019LL,  0x8000000183D08D50LL,  (uint64_t)"AppleKeyStore/ASN1Boolean.swift",  31LL,  2,  38LL);
      sub_183CDD030();
      swift_allocError();
      *uint64_t v14 = v13;
      swift_unknownObjectRetain();
      swift_willThrow();
      sub_183CE2004(v3);
      j__swift_unknownObjectRelease(v11, v6, v4, v5, v12, 1LL);
    }

    else
    {
      sub_183CE2004(result);
      char v7 = 0;
    }

    return v7 & 1;
  }

__n128 sub_183CE2EAC@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_183CE2EB8@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_183CE2EC8()
{
  return sub_183CE2F0C(0LL, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_183CE2ED8(uint64_t a1)
{
  return sub_183CE2F90(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_183CE2EE4(uint64_t a1)
{
  return sub_183CE2F0C(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_183CE2EF0(uint64_t a1, uint64_t a2)
{
  return sub_183CE09F4( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t sub_183CE2F0C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_183D05034();
    BOOL v9 = __OFSUB__(v7, a3);
    uint64_t v10 = v7 - a3;
    if (!v10) {
      return sub_183D05058();
    }
    if (!((v10 < 0) ^ v9 | (v10 == 0)))
    {
      uint64_t v11 = a2 + a3;
      do
      {
        ++v11;
        sub_183D05040();
        --v10;
      }

      while (v10);
      return sub_183D05058();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE2F90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t result = sub_183D05034();
  BOOL v8 = __OFSUB__(v4, a3);
  uint64_t v9 = v4 - a3;
  if (!v9) {
    return result;
  }
  if ((v9 < 0) ^ v8 | (v9 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v10 = a2 + a3;
  do
  {
    ++v10;
    uint64_t result = sub_183D05040();
    --v9;
  }

  while (v9);
  return result;
}

ValueMetadata *type metadata accessor for der_key()
{
  return &type metadata for der_key;
}

unint64_t sub_183CE3008()
{
  unint64_t result = qword_18C664940;
  if (!qword_18C664940)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0AFE4, &type metadata for der_key);
    atomic_store(result, (unint64_t *)&qword_18C664940);
  }

  return result;
}

uint64_t sub_183CE304C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_183CE3054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t sub_183CE305C()
{
  return MEMORY[0x189618030];
}

uint64_t sub_183CE3068()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v4 = v0[1];
  uint64_t result = sub_183D05034();
  BOOL v5 = __OFSUB__(v2, v1);
  uint64_t v6 = v2 - v1;
  if (!v6) {
    return result;
  }
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v7 = v4 + v1;
  do
  {
    ++v7;
    uint64_t result = sub_183D05040();
    --v6;
  }

  while (v6);
  return result;
}

uint64_t sub_183CE30DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_183CE37A0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  a2[1] = v5;
  a2[2] = v7;
  a2[3] = v9;
  return result;
}

uint64_t sub_183CE3138@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_183CE3208(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_183CE372C, a2);
}

uint64_t sub_183CE3144()
{
  return sub_183CE3ADC(*(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_183CE3160(uint64_t a1)
{
  return sub_183CE2F90(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_183CE317C()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_183D05028();
  unint64_t v4 = v3 >> 1;
  uint64_t result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_183D05034();
    BOOL v6 = __OFSUB__(v4, v2);
    uint64_t v7 = v4 - v2;
    if (!v7) {
      return sub_183D05058();
    }
    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      uint64_t v8 = v1 + v2;
      do
      {
        ++v8;
        sub_183D05040();
        --v7;
      }

      while (v7);
      return sub_183D05058();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE31FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_183CE3208(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_183CE384C, a2);
}

uint64_t sub_183CE3208@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_183CE3694(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v6 = (2LL * *(void *)(v5 + 16)) | 1;
  uint64_t result = a2(v5 + 32, 0LL, v6);
  if ((result & 1) != 0)
  {
    *a3 = v5;
    a3[1] = v5 + 32;
    a3[2] = 0LL;
    a3[3] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_183CE3288()
{
  unint64_t result = qword_18C664948;
  if (!qword_18C664948)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B0BC, &type metadata for ASN1IA5String);
    atomic_store(result, (unint64_t *)&qword_18C664948);
  }

  return result;
}

uint64_t sub_183CE32CC()
{
  return MEMORY[0x189618038];
}

unint64_t sub_183CE32DC()
{
  unint64_t result = qword_18C664950;
  if (!qword_18C664950)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B0F4, &type metadata for ASN1IA5String);
    atomic_store(result, (unint64_t *)&qword_18C664950);
  }

  return result;
}

uint64_t sub_183CE3320()
{
  return MEMORY[0x189618028];
}

unint64_t sub_183CE3330()
{
  unint64_t result = qword_18C664958;
  if (!qword_18C664958)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B174, &type metadata for ASN1BMPString);
    atomic_store(result, (unint64_t *)&qword_18C664958);
  }

  return result;
}

unint64_t sub_183CE3378()
{
  unint64_t result = qword_18C664960;
  if (!qword_18C664960)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B1AC, &type metadata for ASN1BMPString);
    atomic_store(result, (unint64_t *)&qword_18C664960);
  }

  return result;
}

unint64_t sub_183CE33C0()
{
  unint64_t result = qword_18C664968;
  if (!qword_18C664968)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B22C, &type metadata for ASN1UniversalString);
    atomic_store(result, (unint64_t *)&qword_18C664968);
  }

  return result;
}

unint64_t sub_183CE3408()
{
  unint64_t result = qword_18C664970;
  if (!qword_18C664970)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B264, &type metadata for ASN1UniversalString);
    atomic_store(result, (unint64_t *)&qword_18C664970);
  }

  return result;
}

unint64_t sub_183CE3450()
{
  unint64_t result = qword_18C664978;
  if (!qword_18C664978)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B2E4, &type metadata for ASN1PrintableString);
    atomic_store(result, (unint64_t *)&qword_18C664978);
  }

  return result;
}

unint64_t sub_183CE3498()
{
  unint64_t result = qword_18C664980;
  if (!qword_18C664980)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B31C, &type metadata for ASN1PrintableString);
    atomic_store(result, (unint64_t *)&qword_18C664980);
  }

  return result;
}

unint64_t sub_183CE34E0()
{
  unint64_t result = qword_18C664988;
  if (!qword_18C664988)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B39C, &type metadata for ASN1TeletexString);
    atomic_store(result, (unint64_t *)&qword_18C664988);
  }

  return result;
}

unint64_t sub_183CE3528()
{
  unint64_t result = qword_18C664990;
  if (!qword_18C664990)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B3D4, &type metadata for ASN1TeletexString);
    atomic_store(result, (unint64_t *)&qword_18C664990);
  }

  return result;
}

unint64_t sub_183CE3570()
{
  unint64_t result = qword_18C664998;
  if (!qword_18C664998)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B454, &type metadata for ASN1UTF8String);
    atomic_store(result, (unint64_t *)&qword_18C664998);
  }

  return result;
}

unint64_t sub_183CE35B8()
{
  unint64_t result = qword_18C6649A0;
  if (!qword_18C6649A0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B48C, &type metadata for ASN1UTF8String);
    atomic_store(result, (unint64_t *)&qword_18C6649A0);
  }

  return result;
}

void *sub_183CE35FC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6649A8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t (*sub_183CE3660( uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))()
{
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }

  else
  {
    *(_BYTE *)unint64_t result = *(_BYTE *)(a4 + a2);
    return nullsub_1;
  }

  return result;
}

uint64_t sub_183CE3694(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_183CE35FC(v2, 0LL);
      uint64_t result = sub_183D04F80();
      if ((v5 & 1) != 0) {
        break;
      }
      if (result == v2) {
        return (uint64_t)v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = sub_183D04E24();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t sub_183CE372C(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  if (a3 >> 1 == a2) {
    return 1LL;
  }
  while (a2 < v3)
  {
    unsigned int v4 = *(unsigned __int8 *)(result + a2);
    BOOL v5 = (v4 & 0xFFFFFFDF) - 91 > 0xFFFFFFE5 || v4 - 58 > 0xFFFFFFF5;
    if (!v5)
    {
      BOOL v5 = v4 > 0x3F;
      unint64_t v6 = (1LL << v4) & 0xA400FB8100000000LL;
      if (v5 || v6 == 0) {
        return 0LL;
      }
    }

    if (v3 == ++a2) {
      return 1LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE37A0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      int64_t v3 = sub_183CE35FC(v2, 0LL);
      uint64_t result = sub_183D04F80();
      if ((v5 & 1) != 0) {
        break;
      }
      if (result == v2) {
        return (uint64_t)v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = sub_183D04E24();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t sub_183CE384C(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  if (a3 >> 1 != a2)
  {
    if ((uint64_t)(a3 >> 1) > a2)
    {
      if (a2 + 1 == v3) {
        return 1LL;
      }
      uint64_t v4 = result + 1;
      while (a2 + 1 < v3)
      {
        int v5 = *(char *)(v4 + a2);
        uint64_t result = v5 >= 0;
        if ((v5 & 0x80000000) == 0 && v3 - 2 != a2++) {
          continue;
        }
        return result;
      }

      __break(1u);
    }

    __break(1u);
    return result;
  }

  return 1LL;
}

ValueMetadata *type metadata accessor for ASN1UTF8String()
{
  return &type metadata for ASN1UTF8String;
}

ValueMetadata *type metadata accessor for ASN1TeletexString()
{
  return &type metadata for ASN1TeletexString;
}

ValueMetadata *type metadata accessor for ASN1PrintableString()
{
  return &type metadata for ASN1PrintableString;
}

ValueMetadata *type metadata accessor for ASN1UniversalString()
{
  return &type metadata for ASN1UniversalString;
}

ValueMetadata *type metadata accessor for ASN1BMPString()
{
  return &type metadata for ASN1BMPString;
}

ValueMetadata *type metadata accessor for ASN1IA5String()
{
  return &type metadata for ASN1IA5String;
}

unint64_t sub_183CE3930()
{
  unint64_t result = qword_18C6649B0;
  if (!qword_18C6649B0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B5B0, &type metadata for ASN1IA5String);
    atomic_store(result, (unint64_t *)&qword_18C6649B0);
  }

  return result;
}

unint64_t sub_183CE3978()
{
  unint64_t result = qword_18C6649B8;
  if (!qword_18C6649B8)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B658, &type metadata for ASN1BMPString);
    atomic_store(result, (unint64_t *)&qword_18C6649B8);
  }

  return result;
}

unint64_t sub_183CE39C0()
{
  unint64_t result = qword_18C6649C0;
  if (!qword_18C6649C0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B700, &type metadata for ASN1UniversalString);
    atomic_store(result, (unint64_t *)&qword_18C6649C0);
  }

  return result;
}

unint64_t sub_183CE3A08()
{
  unint64_t result = qword_18C6649C8;
  if (!qword_18C6649C8)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B7A8, &type metadata for ASN1PrintableString);
    atomic_store(result, (unint64_t *)&qword_18C6649C8);
  }

  return result;
}

unint64_t sub_183CE3A50()
{
  unint64_t result = qword_18C6649D0;
  if (!qword_18C6649D0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B850, &type metadata for ASN1TeletexString);
    atomic_store(result, (unint64_t *)&qword_18C6649D0);
  }

  return result;
}

unint64_t sub_183CE3A98()
{
  unint64_t result = qword_18C6649D8;
  if (!qword_18C6649D8)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0B8F8, &type metadata for ASN1UTF8String);
    atomic_store(result, (unint64_t *)&qword_18C6649D8);
  }

  return result;
}

uint64_t sub_183CE3ADC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 1;
  uint64_t result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_183D05034();
    BOOL v8 = __OFSUB__(v6, a2);
    uint64_t v9 = v6 - a2;
    if (!v9) {
      return sub_183D05058();
    }
    if (!((v9 < 0) ^ v8 | (v9 == 0)))
    {
      uint64_t v10 = a1 + a2;
      do
      {
        ++v10;
        sub_183D05040();
        --v9;
      }

      while (v9);
      return sub_183D05058();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE3B70(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  v7[0] = a2;
  v7[1] = a3;
  size_t v4 = sub_183CE69E0((size_t)v7, (unint64_t)v8);
  uint64_t v5 = (2LL * *(void *)(v4 + 16)) | 1;
  size_t v9 = v4;
  size_t v10 = v4 + 32;
  uint64_t v11 = 0LL;
  uint64_t v12 = v5;
  sub_183CE0AC8(4uLL, 0, 0, a1, (uint64_t (*)(char **))sub_183CE1FC0);
  return swift_release();
}

_DWORD *AKSIdentity.init(_:)@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t AKSUUID.init(_:)@<X0>( uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, int a10, int a11)
{
  *(_BYTE *)a9 = result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 3) = a4;
  *(_BYTE *)(a9 + 4) = a5;
  *(_BYTE *)(a9 + 5) = a6;
  *(_BYTE *)(a9 + 6) = a7;
  *(_BYTE *)(a9 + 7) = a8;
  *(_DWORD *)(a9 + 8) = a10;
  *(_DWORD *)(a9 + 12) = a11;
  return result;
}

uint64_t AKSUUID.init(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) == 16LL)
  {
    __int128 v5 = *(_OWORD *)(a1 + 32);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v5;
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    *size_t v4 = 10;
    return swift_willThrow();
  }

  return result;
}

uint64_t AKSUUID.init(repeating:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = 0x101010101010101LL * result;
  *a2 = v2;
  a2[1] = v2;
  return result;
}

uint64_t static AKSUUID.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  v7[1] = *MEMORY[0x1895F89C0];
  __int128 v6 = *a1;
  size_t v3 = sub_183CE69E0((size_t)&v6, (unint64_t)v7);
  __int128 v6 = *a2;
  size_t v4 = sub_183CE69E0((size_t)&v6, (unint64_t)v7);
  LOBYTE(a2) = sub_183CE3E84(v3, v4);
  swift_release();
  swift_release();
  return a2 & 1;
}

size_t AKSUUID.bytes.getter()
{
  v3[1] = *MEMORY[0x1895F89C0];
  __int128 v2 = *v0;
  return sub_183CE69E0((size_t)&v2, (unint64_t)v3);
}

BOOL sub_183CE3E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  size_t v3 = (unsigned __int8 *)(a1 + 33);
  size_t v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

BOOL sub_183CE3EF0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  size_t v3 = a1 + 5;
  size_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

BOOL sub_183CE3F5C()
{
  size_t v0 = AKSUUID.bytes.getter();
  size_t v1 = AKSUUID.bytes.getter();
  BOOL v2 = sub_183CE3E84(v0, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_183CE3FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, _OWORD *a4@<X8>)
{
  if (*(void *)a1 != a2 || *(unsigned __int8 *)(a1 + 8) != a3)
  {
    uint64_t v13 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1OctetString.swift", 35LL, 2, 26LL);
LABEL_16:
    uint64_t v16 = v13;
    sub_183CDD030();
    swift_allocError();
    *__int128 v17 = v16;
    swift_willThrow();
    return sub_183CE2004(a1);
  }

  sub_183CDD0CC(a1 + 16, (uint64_t)v19);
  uint64_t result = sub_183CDD0CC((uint64_t)v19, (uint64_t)v20);
  if (v21 == 1)
  {
    uint64_t v7 = v20[0];
    uint64_t v8 = v20[1];
    uint64_t v9 = v20[2];
    unint64_t v10 = v20[3];
    sub_183CDD108( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    if ((v10 & 1) != 0)
    {
      sub_183D04FD4();
      swift_unknownObjectRetain_n();
      uint64_t v14 = swift_dynamicCastClass();
      if (!v14)
      {
        sub_183CDD108( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
        uint64_t v14 = MEMORY[0x18961AFE8];
      }

      uint64_t v15 = *(void *)(v14 + 16);
      swift_release();
      if (__OFSUB__(v10 >> 1, v9))
      {
        __break(1u);
      }

      else if (v15 == (v10 >> 1) - v9)
      {
        uint64_t v12 = swift_dynamicCastClass();
        if (!v12)
        {
          sub_183CDD108( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
          uint64_t v12 = MEMORY[0x18961AFE8];
        }

        goto LABEL_13;
      }

      sub_183CDD108( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    }

    sub_183CF84D8(v7, v8, v9, v10);
    uint64_t v12 = v11;
LABEL_13:
    sub_183CDD108( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    if (*(void *)(v12 + 16) == 16LL)
    {
      __int128 v18 = *(_OWORD *)(v12 + 32);
      swift_release();
      uint64_t result = sub_183CE2004(a1);
      *a4 = v18;
      return result;
    }

    swift_release();
    uint64_t v13 = sub_183CDDB40( 0xD000000000000011LL,  0x8000000183D08DE0LL,  (uint64_t)"AppleKeyStore/libaks_identity.swift",  35LL,  2,  72LL);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t AKSIdentity.Config.gracePeriod.getter()
{
  return *(void *)v0;
}

uint64_t AKSIdentity.Config.gracePeriod.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.gracePeriod.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.backOffDelay.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AKSIdentity.Config.backOffDelay.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.backOffDelay.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.maxUnlockAttempts.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AKSIdentity.Config.maxUnlockAttempts.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.maxUnlockAttempts.modify())()
{
  return nullsub_1;
}

void AKSIdentity.Config.options.getter(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AKSIdentity.Config.options.setter(uint64_t result)
{
  char v2 = *(_BYTE *)(result + 8);
  *(void *)(v1 + 48) = *(void *)result;
  *(_BYTE *)(v1 + 56) = v2;
  return result;
}

uint64_t (*AKSIdentity.Config.options.modify())()
{
  return nullsub_1;
}

__n128 AKSIdentity.Config.userUUID.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(_BYTE *)(v1 + 73);
  __n128 result = *(__n128 *)(v1 + 57);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AKSIdentity.Config.userUUID.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 57) = *a1;
  *(_BYTE *)(v1 + 73) = v2;
  return result;
}

uint64_t (*AKSIdentity.Config.userUUID.modify())()
{
  return nullsub_1;
}

__n128 AKSIdentity.Config.groupUUID.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(_BYTE *)(v1 + 90);
  __n128 result = *(__n128 *)(v1 + 74);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AKSIdentity.Config.groupUUID.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 74) = *a1;
  *(_BYTE *)(v1 + 90) = v2;
  return result;
}

uint64_t (*AKSIdentity.Config.groupUUID.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.recoveryIterations.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t AKSIdentity.Config.recoveryIterations.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 96) = result;
  *(_BYTE *)(v2 + 104) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.recoveryIterations.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.recoveryTargetIterations.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t AKSIdentity.Config.recoveryTargetIterations.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 112) = result;
  *(_BYTE *)(v2 + 120) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.recoveryTargetIterations.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.recoveryFlags.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t AKSIdentity.Config.recoveryFlags.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 128) = result;
  *(_BYTE *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.recoveryFlags.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.mementoSupported.getter()
{
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t AKSIdentity.Config.mementoSupported.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 137) = result;
  return result;
}

uint64_t (*AKSIdentity.Config.mementoSupported.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.mementoBlobExists.getter()
{
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t AKSIdentity.Config.mementoBlobExists.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 138) = result;
  return result;
}

uint64_t (*AKSIdentity.Config.mementoBlobExists.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.mementoPasscodeGeneration.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t AKSIdentity.Config.mementoPasscodeGeneration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 144) = result;
  *(_BYTE *)(v2 + 152) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.mementoPasscodeGeneration.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.passcodeGeneration.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t AKSIdentity.Config.passcodeGeneration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 160) = result;
  *(_BYTE *)(v2 + 168) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.passcodeGeneration.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.escrowPasscodePeriod.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t AKSIdentity.Config.escrowPasscodePeriod.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 176) = result;
  *(_BYTE *)(v2 + 184) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.escrowPasscodePeriod.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.escrowTokenPeriod.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t AKSIdentity.Config.escrowTokenPeriod.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 192) = result;
  *(_BYTE *)(v2 + 200) = a2 & 1;
  return result;
}

uint64_t (*AKSIdentity.Config.escrowTokenPeriod.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.inactivityRebootEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 201);
}

uint64_t AKSIdentity.Config.inactivityRebootEnabled.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 201) = result;
  return result;
}

uint64_t (*AKSIdentity.Config.inactivityRebootEnabled.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.onenessAutomaticMode.getter()
{
  return *(unsigned __int8 *)(v0 + 202);
}

uint64_t AKSIdentity.Config.onenessAutomaticMode.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 202) = result;
  return result;
}

uint64_t (*AKSIdentity.Config.onenessAutomaticMode.modify())()
{
  return nullsub_1;
}

uint64_t AKSIdentity.Config.bindKEKToKB.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AKSIdentity.Config.bindKEKToKB.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 208) = a1;
  return result;
}

uint64_t (*AKSIdentity.Config.bindKEKToKB.modify())()
{
  return nullsub_1;
}

void AKSIdentity.Config.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 57) = 0LL;
  *(void *)(a1 + 65) = 0LL;
  *(_BYTE *)(a1 + 73) = 1;
  *(void *)(a1 + 74) = 0LL;
  *(void *)(a1 + 82) = 0LL;
  *(_BYTE *)(a1 + 90) = 1;
  *(void *)(a1 + 96) = 0LL;
  *(_BYTE *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = 0LL;
  *(_BYTE *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + 136) = 1;
  *(_WORD *)(a1 + 137) = 514;
  *(void *)(a1 + 144) = 0LL;
  *(_BYTE *)(a1 + 152) = 1;
  *(void *)(a1 + 160) = 0LL;
  *(_BYTE *)(a1 + 168) = 1;
  *(void *)(a1 + 176) = 0LL;
  *(_BYTE *)(a1 + 184) = 1;
  *(void *)(a1 + 192) = 0LL;
  *(_BYTE *)(a1 + 200) = 1;
  *(_WORD *)(a1 + 201) = 514;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
}

uint64_t AKSIdentity.Config.Options.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t AKSIdentity.Config.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AKSIdentity.Config.Options.gracePeriodSet.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static AKSIdentity.Config.Options.inactivityRebootEnabled.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static AKSIdentity.Config.Options.inactivityRebootSet.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static AKSIdentity.Config.Options.onenessAutomaticMode.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void *sub_183CE4654@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_183CE4660(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_183CE4668@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_183CE467C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_183CE4690@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_183CE46A4(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_183CE46D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_183CE4700@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_183CE4724(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_183CE4738(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_183CE474C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_183CE4760@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_183CE4774(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_183CE4788(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_183CE479C(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_183CE47B0()
{
  return *v0 == 0LL;
}

uint64_t sub_183CE47C0()
{
  return sub_183D04F5C();
}

void *sub_183CE47D8(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_183CE47EC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_183CE47FC(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_183CE4808(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t AKSIdentity.getConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v5 = sub_183D04E48();
  *(void *)(v5 + 16) = 0x8000LL;
  bzero((void *)(v5 + 32), 0x8000uLL);
  uint64_t v21 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6649E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183D0B990;
  *(void *)(inited + 32) = v4;
  int64_t v20 = 0LL;
  uint64_t v7 = sub_183CFAB38(0x1Fu, inited, 0LL, &v20, &v21);
  uint64_t result = swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else if ((_DWORD)v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    sub_183CED2E4(v7, v9);
    return swift_willThrow();
  }

  else
  {
    uint64_t v10 = v21;
    if (v21)
    {
      swift_bridgeObjectRelease();
      sub_183CE20C8(v10, v10 + 32, 0LL, (2LL * *(void *)(v10 + 16)) | 1, (uint64_t)v22);
      swift_bridgeObjectRelease();
      uint64_t result = sub_183CE4EAC((uint64_t)v22, 17LL, 0, (uint64_t)v18);
      __int128 v11 = v18[13];
      *(_OWORD *)(a1 + 192) = v18[12];
      *(_OWORD *)(a1 + 208) = v11;
      *(void *)(a1 + 224) = v19;
      __int128 v12 = v18[9];
      *(_OWORD *)(a1 + 128) = v18[8];
      *(_OWORD *)(a1 + 144) = v12;
      __int128 v13 = v18[11];
      *(_OWORD *)(a1 + 160) = v18[10];
      *(_OWORD *)(a1 + 176) = v13;
      __int128 v14 = v18[5];
      *(_OWORD *)(a1 + 64) = v18[4];
      *(_OWORD *)(a1 + 80) = v14;
      __int128 v15 = v18[7];
      *(_OWORD *)(a1 + 96) = v18[6];
      *(_OWORD *)(a1 + 112) = v15;
      __int128 v16 = v18[1];
      *(_OWORD *)a1 = v18[0];
      *(_OWORD *)(a1 + 16) = v16;
      __int128 v17 = v18[3];
      *(_OWORD *)(a1 + 32) = v18[2];
      *(_OWORD *)(a1 + 48) = v17;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t AKSIdentity.setConfiguration(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 208);
  __int128 v62 = *(_OWORD *)(a2 + 192);
  __int128 v63 = v4;
  uint64_t v64 = *(void *)(a2 + 224);
  __int128 v5 = *(_OWORD *)(a2 + 144);
  __int128 v58 = *(_OWORD *)(a2 + 128);
  __int128 v59 = v5;
  __int128 v6 = *(_OWORD *)(a2 + 176);
  __int128 v60 = *(_OWORD *)(a2 + 160);
  __int128 v61 = v6;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v55[16] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v55[32] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 112);
  __int128 v56 = *(_OWORD *)(a2 + 96);
  __int128 v57 = v8;
  __int128 v9 = *(_OWORD *)(a2 + 16);
  v53[0] = *(_OWORD *)a2;
  v53[1] = v9;
  __int128 v10 = *(_OWORD *)(a2 + 48);
  __int128 v54 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v55 = v10;
  int v21 = *v2;
  __int128 v48 = v63;
  __int16 v47 = *(_WORD *)((char *)&v62 + 9);
  uint64_t v46 = v62;
  char v45 = BYTE8(v62);
  uint64_t v44 = v61;
  char v43 = BYTE8(v61);
  uint64_t v42 = v60;
  char v41 = BYTE8(v60);
  uint64_t v40 = v59;
  __int16 v38 = *(_WORD *)((char *)&v58 + 9);
  char v39 = BYTE8(v59);
  uint64_t v37 = v58;
  char v36 = BYTE8(v58);
  uint64_t v35 = v57;
  char v34 = BYTE8(v57);
  uint64_t v33 = v56;
  char v32 = BYTE8(v56);
  uint64_t v30 = *(void *)&v55[34];
  uint64_t v31 = *(void *)&v55[26];
  char v29 = v55[42];
  uint64_t v27 = *(void *)&v55[17];
  uint64_t v28 = *(void *)&v55[9];
  char v26 = v55[25];
  uint64_t v25 = v10;
  char v24 = BYTE8(v10);
  uint64_t v23 = v54;
  char v22 = BYTE8(v54);
  uint64_t v11 = v9;
  char v12 = BYTE8(v9);
  uint64_t v13 = *(void *)&v53[0];
  char v14 = BYTE8(v53[0]);
  sub_183CE6A90((uint64_t)v53);
  uint64_t v52 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&__int128 v65 = v13;
  BYTE8(v65) = v14;
  *(void *)&__int128 v66 = v11;
  BYTE8(v66) = v12;
  *(void *)&__int128 v67 = v23;
  BYTE8(v67) = v22;
  *(void *)__int128 v68 = v25;
  v68[8] = v24;
  *(void *)&v68[9] = v28;
  *(void *)&v68[17] = v27;
  v68[25] = v26;
  *(void *)&v68[26] = v31;
  *(void *)&v68[34] = v30;
  v68[42] = v29;
  *(void *)&__int128 v69 = v33;
  BYTE8(v69) = v32;
  *(void *)&__int128 v70 = v35;
  BYTE8(v70) = v34;
  *(void *)&__int128 v71 = v37;
  BYTE8(v71) = v36;
  *(_WORD *)((char *)&v71 + 9) = v38;
  *(void *)&__int128 v72 = v40;
  BYTE8(v72) = v39;
  *(void *)&__int128 v73 = v42;
  BYTE8(v73) = v41;
  *(void *)&__int128 v74 = v44;
  BYTE8(v74) = v43;
  *(void *)&__int128 v75 = v46;
  BYTE8(v75) = v45;
  *(_WORD *)((char *)&v75 + 9) = v47;
  __int128 v76 = v48;
  uint64_t v77 = a1;
  v50[12] = v75;
  v50[13] = v48;
  uint64_t v51 = a1;
  v50[8] = v71;
  v50[9] = v72;
  v50[10] = v73;
  v50[11] = v74;
  v50[4] = *(_OWORD *)&v68[16];
  void v50[5] = *(_OWORD *)&v68[32];
  v50[6] = v69;
  v50[7] = v70;
  v50[0] = v65;
  v50[1] = v66;
  v50[2] = v67;
  v50[3] = *(_OWORD *)v68;
  uint64_t v15 = v78;
  sub_183CE6AD4(&v52);
  sub_183CE7D54((uint64_t)&v65);
  if (v15)
  {
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    *__int128 v16 = 23;
    swift_willThrow();
    return MEMORY[0x186E26038](v15);
  }

  else
  {
    uint64_t v18 = sub_183D04E48();
    *(void *)(v18 + 16) = 0x8000LL;
    bzero((void *)(v18 + 32), 0x8000uLL);
    *(void *)&v50[0] = v18;
    unsigned int v49 = -1;
    sub_183CE4DE0((uint64_t)(v52 + 32), *((void *)v52 + 2), v21, &v49, (uint64_t *)v50);
    swift_bridgeObjectRelease();
    uint64_t v19 = v49;
    if (v49)
    {
      sub_183CDD24C();
      swift_allocError();
      sub_183CED2E4(v19, v20);
      swift_willThrow();
    }

    return swift_bridgeObjectRelease();
  }

uint64_t sub_183CE4DE0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_183D0B9A0;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a1;
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)(result + 48) = a2;
    uint64_t v13 = 0LL;
    int v12 = sub_183CFAB38(0x1Eu, result, 0LL, &v13, a5);
    swift_bridgeObjectRelease();
    uint64_t result = swift_setDeallocating();
    if (!v5) {
      *a4 = v12;
    }
  }

  return result;
}

uint64_t sub_183CE4EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  char v134 = 1;
  char v132 = 1;
  char v130 = 1;
  char v128 = 1;
  char v127 = 1;
  char v126 = 1;
  char v123 = 1;
  char v121 = 1;
  char v119 = 1;
  char v116 = 1;
  char v114 = 1;
  char v112 = 1;
  char v110 = 1;
  *(void *)&__int128 v62 = MEMORY[0x18961AFE8];
  __int128 v7 = sub_183CDE290(a1, a2, a3, (char **)&v62);
  if (v4)
  {
    swift_bridgeObjectRelease();
    sub_183CE2004(a1);
    *(void *)&__int128 v62 = 0LL;
    BYTE8(v62) = v134;
    *(_DWORD *)((char *)&v62 + 9) = *(_DWORD *)v133;
    HIDWORD(v62) = *(_DWORD *)&v133[3];
    uint64_t v63 = 0LL;
    char v64 = v132;
    *(_DWORD *)__int128 v65 = *(_DWORD *)v131;
    *(_DWORD *)&v65[3] = *(_DWORD *)&v131[3];
    uint64_t v66 = 0LL;
    char v67 = v130;
    *(_DWORD *)__int128 v68 = *(_DWORD *)v129;
    *(_DWORD *)&v68[3] = *(_DWORD *)&v129[3];
    uint64_t v69 = 0LL;
    char v70 = v128;
    uint64_t v71 = 0LL;
    uint64_t v72 = 0LL;
    char v73 = v127;
    uint64_t v74 = 0LL;
    uint64_t v75 = 0LL;
    char v76 = v126;
    char v78 = v125;
    int v77 = v124;
    uint64_t v79 = 0LL;
    char v80 = v123;
    *(_DWORD *)&v81[3] = *(_DWORD *)&v122[3];
    *(_DWORD *)v81 = *(_DWORD *)v122;
    uint64_t v82 = 0LL;
    char v83 = v121;
    *(_DWORD *)&v84[3] = *(_DWORD *)&v120[3];
    *(_DWORD *)v84 = *(_DWORD *)v120;
    uint64_t v85 = 0LL;
    char v86 = v119;
    char v87 = 2;
    char v88 = 2;
    char v90 = v118;
    int v89 = v117;
    uint64_t v91 = 0LL;
    char v92 = v116;
    *(_DWORD *)&v93[3] = *(_DWORD *)&v115[3];
    *(_DWORD *)v93 = *(_DWORD *)v115;
    uint64_t v94 = 0LL;
    char v95 = v114;
    *(_DWORD *)&v96[3] = *(_DWORD *)&v113[3];
    *(_DWORD *)v96 = *(_DWORD *)v113;
    uint64_t v97 = 0LL;
    char v98 = v112;
    *(_DWORD *)&v99[3] = *(_DWORD *)&v111[3];
    *(_DWORD *)v99 = *(_DWORD *)v111;
    uint64_t v100 = 0LL;
    char v101 = v110;
    __int16 v102 = 514;
    char v104 = v109;
    int v103 = v108;
    uint64_t v105 = 0LL;
    uint64_t v106 = 0LL;
    uint64_t v107 = 0LL;
    return sub_183CE7D54((uint64_t)&v62);
  }

  else
  {
    uint64_t v9 = (uint64_t)v7;
    swift_bridgeObjectRelease();
    if (qword_18C664718 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669490, qword_18C669498, qword_18C6694A0, v9, (uint64_t)v135);
    v209[0] = v136;
    v209[1] = v137;
    __int128 v10 = v136;
    __int128 v11 = v137;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v135);
    sub_183CE20C8(v10, *((uint64_t *)&v10 + 1), v11, *((unint64_t *)&v11 + 1), (uint64_t)v138);
    uint64_t v210 = sub_183CED738((uint64_t)v138, 2LL, 0);
    sub_183CE1FDC((uint64_t)v209);
    char v134 = 0;
    if (qword_18C664720 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6694B0, qword_18C6694B8, qword_18C6694C0, v9, (uint64_t)v139);
    uint64_t v60 = a4;
    v208[0] = v140;
    v208[1] = v141;
    __int128 v12 = v140;
    __int128 v13 = v141;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v139);
    sub_183CE20C8(v12, *((uint64_t *)&v12 + 1), v13, *((unint64_t *)&v13 + 1), (uint64_t)v142);
    uint64_t v61 = sub_183CED738((uint64_t)v142, 2LL, 0);
    sub_183CE1FDC((uint64_t)v208);
    char v132 = 0;
    if (qword_18C664728 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6694D0, xmmword_18C6694D8, *((unint64_t *)&xmmword_18C6694D8 + 1), v9, (uint64_t)v143);
    v207[0] = v144;
    v207[1] = v145;
    __int128 v14 = v144;
    __int128 v15 = v145;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v143);
    sub_183CE20C8(v14, *((uint64_t *)&v14 + 1), v15, *((unint64_t *)&v15 + 1), (uint64_t)v146);
    uint64_t v59 = sub_183CED738((uint64_t)v146, 2LL, 0);
    sub_183CE1FDC((uint64_t)v207);
    char v130 = 0;
    if (qword_18C664740 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669530, *(uint64_t *)algn_18C669538, qword_18C669540, v9, (uint64_t)v147);
    v206[0] = v148;
    v206[1] = v149;
    __int128 v16 = v148;
    __int128 v17 = v149;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v147);
    sub_183CE20C8(v16, *((uint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1), (uint64_t)v150);
    uint64_t v58 = sub_183CED4E0((uint64_t)v150, 2LL, 0);
    sub_183CE1FDC((uint64_t)v206);
    char v128 = 0;
    if (qword_18C6647C8 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669750, xmmword_18C669758, *((unint64_t *)&xmmword_18C669758 + 1), v9, (uint64_t)v151);
    v205[0] = v152;
    v205[1] = v153;
    __int128 v18 = v152;
    __int128 v19 = v153;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v151);
    sub_183CE20C8(v18, *((uint64_t *)&v18 + 1), v19, *((unint64_t *)&v19 + 1), (uint64_t)v154);
    sub_183CE3FD4((uint64_t)v154, 4LL, 0, &v62);
    sub_183CE1FDC((uint64_t)v205);
    uint64_t v56 = *((void *)&v62 + 1);
    uint64_t v57 = v62;
    char v127 = 0;
    if (qword_18C664800 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669830, unk_18C669838, qword_18C669840, v9, (uint64_t)v155);
    v204[0] = v156;
    v204[1] = v157;
    __int128 v20 = v156;
    __int128 v21 = v157;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v155);
    sub_183CE20C8(v20, *((uint64_t *)&v20 + 1), v21, *((unint64_t *)&v21 + 1), (uint64_t)v158);
    sub_183CE3FD4((uint64_t)v158, 4LL, 0, &v62);
    sub_183CE1FDC((uint64_t)v204);
    uint64_t v54 = *((void *)&v62 + 1);
    uint64_t v55 = v62;
    char v126 = 0;
    if (qword_18C664810 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669870, *(uint64_t *)algn_18C669878, qword_18C669880, v9, (uint64_t)v159);
    v203[0] = v160;
    v203[1] = v161;
    __int128 v22 = v160;
    __int128 v23 = v161;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v159);
    sub_183CE20C8(v22, *((uint64_t *)&v22 + 1), v23, *((unint64_t *)&v23 + 1), (uint64_t)v162);
    uint64_t v53 = sub_183CED738((uint64_t)v162, 2LL, 0);
    sub_183CE1FDC((uint64_t)v203);
    char v123 = 0;
    if (qword_18C664820 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6698B0, unk_18C6698B8, qword_18C6698C0, v9, (uint64_t)v163);
    v202[0] = v164;
    v202[1] = v165;
    __int128 v24 = v164;
    __int128 v25 = v165;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v163);
    sub_183CE20C8(v24, *((uint64_t *)&v24 + 1), v25, *((unint64_t *)&v25 + 1), (uint64_t)v166);
    uint64_t v52 = sub_183CED738((uint64_t)v166, 2LL, 0);
    sub_183CE1FDC((uint64_t)v202);
    char v121 = 0;
    if (qword_18C664818 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669890, *(uint64_t *)algn_18C669898, qword_18C6698A0, v9, (uint64_t)v167);
    v201[0] = v168;
    v201[1] = v169;
    __int128 v26 = v168;
    __int128 v27 = v169;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v167);
    sub_183CE20C8(v26, *((uint64_t *)&v26 + 1), v27, *((unint64_t *)&v27 + 1), (uint64_t)v170);
    uint64_t v37 = sub_183CED738((uint64_t)v170, 2LL, 0);
    sub_183CE1FDC((uint64_t)v201);
    char v119 = 0;
    if (qword_18C664860 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6699B0, *(uint64_t *)algn_18C6699B8, qword_18C6699C0, v9, (uint64_t)v171);
    v200[0] = v172;
    v200[1] = v173;
    __int128 v28 = v172;
    __int128 v29 = v173;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v171);
    sub_183CE20C8(v28, *((uint64_t *)&v28 + 1), v29, *((unint64_t *)&v29 + 1), (uint64_t)v174);
    uint64_t v38 = sub_183CE2CCC((uint64_t)v174, 1LL, 0);
    sub_183CE1FDC((uint64_t)v200);
    char v39 = v38 & 1;
    if (qword_18C664868 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6699D0, unk_18C6699D8, qword_18C6699E0, v9, (uint64_t)v175);
    v199[0] = v176;
    v199[1] = v177;
    __int128 v30 = v176;
    __int128 v31 = v177;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v175);
    sub_183CE20C8(v30, *((uint64_t *)&v30 + 1), v31, *((unint64_t *)&v31 + 1), (uint64_t)v178);
    uint64_t v40 = sub_183CE2CCC((uint64_t)v178, 1LL, 0);
    sub_183CE1FDC((uint64_t)v199);
    if (qword_18C664878 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669A10, *(uint64_t *)algn_18C669A18, qword_18C669A20, v9, (uint64_t)v179);
    v198[0] = v180;
    v198[1] = v181;
    __int128 v32 = v180;
    __int128 v33 = v181;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v179);
    sub_183CE20C8(v32, *((uint64_t *)&v32 + 1), v33, *((unint64_t *)&v33 + 1), (uint64_t)v182);
    sub_183CED738((uint64_t)v182, 2LL, 0);
    sub_183CE1FDC((uint64_t)v198);
    char v116 = 0;
    if (qword_18C664870 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6699F0, unk_18C6699F8, qword_18C669A00, v9, (uint64_t)v183);
    v197[0] = v184;
    v197[1] = v185;
    uint64_t v34 = v184;
    __int128 v35 = v185;
    uint64_t v51 = *((void *)&v184 + 1);
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v183);
    sub_183CE20C8(v34, v51, v35, *((unint64_t *)&v35 + 1), (uint64_t)v186);
    uint64_t v41 = sub_183CED738((uint64_t)v186, 2LL, 0);
    sub_183CE1FDC((uint64_t)v197);
    char v114 = 0;
    if (qword_18C664730 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6694F0, xmmword_18C6694F8, *((unint64_t *)&xmmword_18C6694F8 + 1), v9, (uint64_t)v187);
    v196[0] = v188;
    v196[1] = v189;
    uint64_t v36 = v188;
    uint64_t v46 = v189;
    uint64_t v48 = *((void *)&v188 + 1);
    unint64_t v44 = *((void *)&v189 + 1);
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v187);
    sub_183CE20C8(v36, v48, v46, v44, (uint64_t)v190);
    uint64_t v42 = sub_183CED738((uint64_t)v190, 2LL, 0);
    sub_183CE1FDC((uint64_t)v196);
    char v112 = 0;
    if (qword_18C664738 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669510, xmmword_18C669518, *((unint64_t *)&xmmword_18C669518 + 1), v9, (uint64_t)v191);
    v195[0] = v192;
    v195[1] = v193;
    uint64_t v47 = v193;
    uint64_t v49 = *((void *)&v192 + 1);
    uint64_t v43 = v192;
    unint64_t v45 = *((void *)&v193 + 1);
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v191);
    sub_183CE20C8(v43, v49, v47, v45, (uint64_t)v194);
    uint64_t v50 = sub_183CED738((uint64_t)v194, 2LL, 0);
    sub_183CE1FDC((uint64_t)v195);
    swift_bridgeObjectRelease();
    uint64_t result = sub_183CE2004(a1);
    *(void *)uint64_t v60 = v210;
    *(_BYTE *)(v60 + 8) = 0;
    *(void *)(v60 + 16) = v61;
    *(_BYTE *)(v60 + 24) = 0;
    *(void *)(v60 + 32) = v59;
    *(_BYTE *)(v60 + 40) = 0;
    *(void *)(v60 + 48) = v58;
    *(_BYTE *)(v60 + 56) = 0;
    *(void *)(v60 + 57) = v57;
    *(void *)(v60 + 65) = v56;
    *(_BYTE *)(v60 + 73) = 0;
    *(void *)(v60 + 74) = v55;
    *(void *)(v60 + 82) = v54;
    *(_BYTE *)(v60 + 90) = 0;
    *(void *)(v60 + 96) = v53;
    *(_BYTE *)(v60 + 104) = 0;
    *(void *)(v60 + 112) = v52;
    *(_BYTE *)(v60 + 120) = 0;
    *(void *)(v60 + 128) = v37;
    *(_BYTE *)(v60 + 136) = 0;
    *(_BYTE *)(v60 + 137) = v39;
    *(_BYTE *)(v60 + 138) = v40 & 1;
    *(void *)(v60 + 144) = *((void *)&v26 + 1);
    *(_BYTE *)(v60 + 152) = 0;
    *(void *)(v60 + 160) = v41;
    *(_BYTE *)(v60 + 168) = 0;
    *(void *)(v60 + 176) = v42;
    *(_BYTE *)(v60 + 184) = 0;
    *(void *)(v60 + 192) = v50;
    *(_BYTE *)(v60 + 200) = 0;
    *(_BYTE *)(v60 + 201) = (v58 & 2) != 0;
    *(_BYTE *)(v60 + 202) = (v58 & 8) != 0;
    *(void *)(v60 + 208) = 0LL;
    *(void *)(v60 + 216) = 0LL;
    *(void *)(v60 + 224) = 0LL;
  }

  return result;
}

char *sub_183CE65D4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_183CE68EC(a1, a2, a3, a4, &qword_18C664930);
}

char *sub_183CE65E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C664A10);
    __int128 v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }

  else
  {
    __int128 v10 = (char *)MEMORY[0x18961AFE8];
  }

  __int128 v12 = v10 + 32;
  __int128 v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_183CE66F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6649A8);
    __int128 v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    __int128 v10 = (char *)MEMORY[0x18961AFE8];
  }

  __int128 v12 = v10 + 32;
  __int128 v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_183CE67E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C664A08);
    __int128 v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }

  else
  {
    __int128 v10 = (char *)MEMORY[0x18961AFE8];
  }

  __int128 v13 = v10 + 32;
  __int128 v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_183CE68E0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_183CE68EC(a1, a2, a3, a4, &qword_18C6649E0);
}

char *sub_183CE68EC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    int64_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  __int128 v14 = v11 + 32;
  __int128 v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v9);
  }

  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_183CE69E0(size_t result, unint64_t a2)
{
  if (!result) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x18961AFE8];
  }
  if (v4 < 1)
  {
    char v5 = (void *)MEMORY[0x18961AFE8];
    if (!a2) {
      goto LABEL_13;
    }
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6649A8);
    char v5 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }

  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }

    __break(1u);
  }

uint64_t sub_183CE6A90(uint64_t a1)
{
  return a1;
}

char *sub_183CE6AD4(char **a1)
{
  uint64_t v3 = v2;
  char v4 = *(_BYTE *)(v1 + 8);
  __int128 v156 = *(char **)(v1 + 16);
  LOBYTE(v5) = *(_BYTE *)(v1 + 24);
  unint64_t v153 = *(void *)(v1 + 32);
  LODWORD(v157) = *(unsigned __int8 *)(v1 + 40);
  uint64_t v148 = *(void *)(v1 + 65);
  uint64_t v149 = *(void *)(v1 + 57);
  char v151 = *(_BYTE *)(v1 + 73);
  LODWORD(v154) = *(unsigned __int8 *)(v1 + 184);
  char v152 = *(_BYTE *)(v1 + 200);
  int v150 = *(unsigned __int8 *)(v1 + 201);
  int v147 = *(unsigned __int8 *)(v1 + 202);
  uint64_t v144 = *(void *)(v1 + 216);
  uint64_t v145 = *(void *)(v1 + 224);
  uint64_t v146 = *(void *)(v1 + 208);
  v171 = 0LL;
  if (qword_18C664718 == -1)
  {
    if ((v4 & 1) != 0)
    {
LABEL_3:
      char v6 = 0LL;
      goto LABEL_4;
    }
  }

  else
  {
    swift_once();
    if ((v4 & 1) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t v7 = qword_18C669488;
  unint64_t v9 = qword_18C669490;
  uint64_t v10 = qword_18C669498;
  __int128 v18 = (char *)qword_18C6694A0;
  uint64_t result = sub_183CEC418();
  char v6 = v2;
  if (v2) {
    return result;
  }
  int64_t v8 = result;
  uint64_t v130 = v127;
  uint64_t v140 = v129;
  unint64_t v141 = v128;
  v171 = (char *)MEMORY[0x18961AFE8];
  swift_unknownObjectRetain();
  uint64_t v131 = sub_183CF89BC((uint64_t)&v171, v9, v10, (unint64_t)v18);
  int64_t v132 = *((void *)v171 + 2);
  if (v132 >= v131)
  {
    uint64_t v3 = 0LL;
    sub_183CF8CD4(v131, v132);
    char v6 = v171;
    if (!v171)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_4;
    }

    uint64_t v139 = v130;
    v142 = 0LL;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_141;
    }
    goto LABEL_154;
  }

LABEL_150:
  __break(1u);
LABEL_151:
  swift_once();
  while (1)
  {
    __int128 v18 = (char *)qword_18C669748;
    uint64_t v19 = qword_18C669750;
    uint64_t v7 = *((void *)&xmmword_18C669758 + 1);
    uint64_t v17 = xmmword_18C669758;
    if (v171)
    {
      uint64_t v32 = sub_183CF89BC( (uint64_t)&v171,  qword_18C669750,  xmmword_18C669758,  *((unint64_t *)&xmmword_18C669758 + 1));
      int64_t v33 = *((void *)v171 + 2);
      if (v33 < v32)
      {
        __break(1u);
        while (1)
        {
          __break(1u);
LABEL_157:
          char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_16:
          unint64_t v24 = *((void *)v6 + 2);
          unint64_t v23 = *((void *)v6 + 3);
          unint64_t v5 = v24 + 1;
          if (v24 >= v23 >> 1) {
            char v6 = sub_183CE67E0((char *)(v23 > 1), v24 + 1, 1, v6);
          }
          *((void *)v6 + 2) = v5;
          __int128 v25 = &v6[64 * v24];
          *((void *)v25 + 4) = v7;
          *((void *)v25 + 5) = v8;
          *((void *)v25 + 6) = v9;
          *((void *)v25 + 7) = v10;
          *((void *)v25 + 8) = v17;
          *((void *)v25 + 9) = v156;
          *((void *)v25 + 10) = v19;
          *((void *)v25 + 11) = v141;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v171 = v6;
LABEL_20:
          uint64_t v3 = v142;
LABEL_21:
          uint64_t v10 = (uint64_t)v3;
          if (qword_18C664728 != -1) {
            swift_once();
          }
          uint64_t v17 = qword_18C6694C8;
          uint64_t v7 = qword_18C6694D0;
          unint64_t v9 = *((void *)&xmmword_18C6694D8 + 1);
          int64_t v8 = (char *)xmmword_18C6694D8;
          if (v171)
          {
            uint64_t v26 = sub_183CF89BC( (uint64_t)&v171,  qword_18C6694D0,  xmmword_18C6694D8,  *((unint64_t *)&xmmword_18C6694D8 + 1));
            int64_t v27 = *((void *)v171 + 2);
            if (v27 < v26)
            {
              __break(1u);
              goto LABEL_148;
            }

            char v6 = (char *)&v171;
            sub_183CF8CD4(v26, v27);
          }

          uint64_t v47 = sub_183CEC418();
          char v6 = (char *)v10;
          if (v10) {
            return (char *)swift_bridgeObjectRelease();
          }
          uint64_t v19 = (uint64_t)v47;
          uint64_t v51 = v48;
          unint64_t v5 = v49;
          __int128 v157 = v50;
          uint64_t v52 = v171;
          if (!v171) {
            uint64_t v52 = (char *)MEMORY[0x18961AFE8];
          }
          v171 = v52;
          swift_unknownObjectRetain();
          uint64_t v53 = sub_183CF89BC((uint64_t)&v171, v7, (uint64_t)v8, v9);
          int64_t v54 = *((void *)v171 + 2);
          if (v54 >= v53)
          {
            uint64_t v10 = 0LL;
            sub_183CF8CD4(v53, v54);
            char v6 = v171;
            if (!v171)
            {
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              break;
            }

            unint64_t v153 = v5;
            __int128 v156 = v51;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
              goto LABEL_65;
            }
            goto LABEL_160;
          }
        }

        while (2)
        {
          if (qword_18C664730 != -1) {
LABEL_146:
          }
            swift_once();
          uint64_t v19 = qword_18C6694E8;
          uint64_t v17 = qword_18C6694F0;
          int64_t v8 = (char *)*((void *)&xmmword_18C6694F8 + 1);
          uint64_t v7 = xmmword_18C6694F8;
          if (v171)
          {
            uint64_t v28 = sub_183CF89BC( (uint64_t)&v171,  qword_18C6694F0,  xmmword_18C6694F8,  *((unint64_t *)&xmmword_18C6694F8 + 1));
            int64_t v29 = *((void *)v171 + 2);
            if (v29 < v28)
            {
              __break(1u);
              goto LABEL_150;
            }

            char v6 = (char *)&v171;
            sub_183CF8CD4(v28, v29);
          }

          if ((v154 & 1) != 0)
          {
            while (1)
            {
LABEL_32:
              if (qword_18C664738 == -1) {
                goto LABEL_33;
              }
LABEL_148:
              swift_once();
LABEL_33:
              __int128 v18 = (char *)qword_18C669508;
              uint64_t v19 = qword_18C669510;
              uint64_t v7 = *((void *)&xmmword_18C669518 + 1);
              uint64_t v17 = xmmword_18C669518;
              if (v171)
              {
                uint64_t v30 = sub_183CF89BC( (uint64_t)&v171,  qword_18C669510,  xmmword_18C669518,  *((unint64_t *)&xmmword_18C669518 + 1));
                int64_t v31 = *((void *)v171 + 2);
                if (v31 < v30)
                {
                  __break(1u);
                  while (1)
                  {
                    __break(1u);
LABEL_154:
                    char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_141:
                    unint64_t v134 = *((void *)v6 + 2);
                    unint64_t v133 = *((void *)v6 + 3);
                    if (v134 >= v133 >> 1) {
                      char v6 = sub_183CE67E0((char *)(v133 > 1), v134 + 1, 1, v6);
                    }
                    *((void *)v6 + 2) = v134 + 1;
                    v135 = &v6[64 * v134];
                    *((void *)v135 + 4) = v7;
                    *((void *)v135 + 5) = v9;
                    *((void *)v135 + 6) = v10;
                    *((void *)v135 + 7) = v18;
                    *((void *)v135 + 8) = v8;
                    *((void *)v135 + 9) = v139;
                    *((void *)v135 + 10) = v141;
                    *((void *)v135 + 11) = v140;
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v171 = v6;
                    uint64_t v3 = v142;
LABEL_4:
                    if (qword_18C664720 != -1) {
                      swift_once();
                    }
                    uint64_t v7 = qword_18C6694A8;
                    int64_t v8 = (char *)qword_18C6694B0;
                    unint64_t v9 = qword_18C6694B8;
                    uint64_t v10 = qword_18C6694C0;
                    if (v6)
                    {
                      uint64_t v11 = sub_183CF89BC((uint64_t)&v171, qword_18C6694B0, qword_18C6694B8, qword_18C6694C0);
                      int64_t v12 = *((void *)v171 + 2);
                      if (v12 < v11)
                      {
                        __break(1u);
                        goto LABEL_146;
                      }

                      char v6 = (char *)&v171;
                      sub_183CF8CD4(v11, v12);
                    }

                    if ((v5 & 1) != 0) {
                      goto LABEL_21;
                    }
                    uint64_t v13 = sub_183CEC418();
                    char v6 = v3;
                    if (v3) {
                      return (char *)swift_bridgeObjectRelease();
                    }
                    uint64_t v17 = (uint64_t)v13;
                    __int128 v18 = v14;
                    uint64_t v19 = v15;
                    unint64_t v5 = v16;
                    __int128 v20 = v171;
                    if (!v171) {
                      __int128 v20 = (char *)MEMORY[0x18961AFE8];
                    }
                    v171 = v20;
                    swift_unknownObjectRetain();
                    uint64_t v21 = sub_183CF89BC((uint64_t)&v171, (uint64_t)v8, v9, v10);
                    v142 = 0LL;
                    int64_t v22 = *((void *)v171 + 2);
                    if (v22 >= v21)
                    {
                      sub_183CF8CD4(v21, v22);
                      char v6 = v171;
                      if (v171)
                      {
                        unint64_t v141 = v5;
                        __int128 v156 = v18;
                        swift_unknownObjectRetain();
                        swift_unknownObjectRetain();
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                          goto LABEL_157;
                        }
                        goto LABEL_16;
                      }

                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      goto LABEL_20;
                    }
                  }
                }

                char v6 = (char *)&v171;
                sub_183CF8CD4(v30, v31);
              }

              if ((v152 & 1) != 0) {
                goto LABEL_37;
              }
              int64_t v8 = sub_183CEC418();
              char v6 = (char *)v10;
              if (v10) {
                return (char *)swift_bridgeObjectRelease();
              }
              __int128 v68 = v65;
              unint64_t v9 = v66;
              __int128 v157 = v67;
              if (!v171) {
                v171 = (char *)MEMORY[0x18961AFE8];
              }
              swift_unknownObjectRetain();
              uint64_t v69 = sub_183CF89BC((uint64_t)&v171, v19, v17, v7);
              int64_t v70 = *((void *)v171 + 2);
              if (v70 >= v69)
              {
                uint64_t v10 = 0LL;
                sub_183CF8CD4(v69, v70);
                char v6 = v171;
                if (!v171)
                {
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_37;
                }

                unint64_t v154 = v9;
                __int128 v156 = v68;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  goto LABEL_165;
                }
                goto LABEL_83;
              }

LABEL_162:
              __break(1u);
LABEL_163:
              char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_74:
              unint64_t v9 = *((void *)v6 + 2);
              unint64_t v63 = *((void *)v6 + 3);
              unint64_t v5 = v9 + 1;
              if (v9 >= v63 >> 1) {
                char v6 = sub_183CE67E0((char *)(v63 > 1), v9 + 1, 1, v6);
              }
              *((void *)v6 + 2) = v5;
              char v64 = &v6[64 * v9];
              *((void *)v64 + 4) = v19;
              *((void *)v64 + 5) = v17;
              *((void *)v64 + 6) = v7;
              *((void *)v64 + 7) = v8;
              *((void *)v64 + 8) = v18;
              *((void *)v64 + 9) = v156;
              *((void *)v64 + 10) = v154;
              *((void *)v64 + 11) = v157;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v171 = v6;
            }
          }

          __int128 v18 = sub_183CEC418();
          char v6 = (char *)v10;
          if (v10) {
            return (char *)swift_bridgeObjectRelease();
          }
          unint64_t v5 = v58;
          unint64_t v9 = v59;
          __int128 v157 = v60;
          if (!v171) {
            v171 = (char *)MEMORY[0x18961AFE8];
          }
          swift_unknownObjectRetain();
          uint64_t v61 = sub_183CF89BC((uint64_t)&v171, v17, v7, (unint64_t)v8);
          int64_t v62 = *((void *)v171 + 2);
          if (v62 < v61)
          {
LABEL_159:
            __break(1u);
LABEL_160:
            char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_65:
            unint64_t v56 = *((void *)v6 + 2);
            unint64_t v55 = *((void *)v6 + 3);
            unint64_t v5 = v56 + 1;
            if (v56 >= v55 >> 1) {
              char v6 = sub_183CE67E0((char *)(v55 > 1), v56 + 1, 1, v6);
            }
            *((void *)v6 + 2) = v5;
            uint64_t v57 = &v6[64 * v56];
            *((void *)v57 + 4) = v17;
            *((void *)v57 + 5) = v7;
            *((void *)v57 + 6) = v8;
            *((void *)v57 + 7) = v9;
            *((void *)v57 + 8) = v19;
            *((void *)v57 + 9) = v156;
            *((void *)v57 + 10) = v153;
            *((void *)v57 + 11) = v157;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v171 = v6;
            continue;
          }

          break;
        }

        uint64_t v10 = 0LL;
        sub_183CF8CD4(v61, v62);
        char v6 = v171;
        if (!v171)
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_32;
        }

        unint64_t v154 = v9;
        __int128 v156 = (char *)v5;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
          goto LABEL_74;
        }
        goto LABEL_163;
      }

      char v6 = (char *)&v171;
      sub_183CF8CD4(v32, v33);
    }

    if ((v151 & 1) != 0) {
      goto LABEL_42;
    }
    char v73 = (char *)MEMORY[0x18961AFE8];
    __int128 v161 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
    sub_183CE3B70(&v161, v149, v148);
    char v6 = (char *)v10;
    int64_t v8 = v161;
    if (v10)
    {
      swift_bridgeObjectRelease();
      return (char *)swift_bridgeObjectRelease();
    }

    unint64_t v9 = *((void *)v161 + 2);
    char v95 = v171;
    if (!v171) {
      char v95 = v73;
    }
    v171 = v95;
    swift_unknownObjectRetain();
    uint64_t v96 = sub_183CF89BC((uint64_t)&v171, v19, v17, v7);
    int64_t v97 = *((void *)v171 + 2);
    if (v97 >= v96) {
      break;
    }
    __break(1u);
LABEL_165:
    char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_83:
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v71 = *((void *)v6 + 3);
    if (v9 >= v71 >> 1) {
      char v6 = sub_183CE67E0((char *)(v71 > 1), v9 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v9 + 1;
    uint64_t v72 = &v6[64 * v9];
    *((void *)v72 + 4) = v18;
    *((void *)v72 + 5) = v19;
    *((void *)v72 + 6) = v17;
    *((void *)v72 + 7) = v7;
    *((void *)v72 + 8) = v8;
    *((void *)v72 + 9) = v156;
    *((void *)v72 + 10) = v154;
    *((void *)v72 + 11) = v157;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v171 = v6;
LABEL_37:
    if (qword_18C6647C8 != -1) {
      goto LABEL_151;
    }
  }

  uint64_t v10 = 0LL;
  sub_183CF8CD4(v96, v97);
  char v6 = v171;
  if (v171)
  {
    __int128 v157 = v8 + 32;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
    }
    uint64_t v98 = (2 * v9) | 1;
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v99 = *((void *)v6 + 3);
    if (v9 >= v99 >> 1)
    {
      __int128 v136 = v6;
      uint64_t v137 = v98;
      v138 = sub_183CE67E0((char *)(v99 > 1), v9 + 1, 1, v136);
      uint64_t v98 = v137;
      char v6 = v138;
    }

    *((void *)v6 + 2) = v9 + 1;
    uint64_t v100 = &v6[64 * v9];
    *((void *)v100 + 4) = v18;
    *((void *)v100 + 5) = v19;
    *((void *)v100 + 6) = v17;
    *((void *)v100 + 7) = v7;
    *((void *)v100 + 8) = v8;
    *((void *)v100 + 9) = v157;
    *((void *)v100 + 10) = 0LL;
    *((void *)v100 + 11) = v98;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v171 = v6;
  }

  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

LABEL_42:
  if (qword_18C664880 != -1) {
    swift_once();
  }
  __int128 v18 = (char *)qword_18C669A28;
  uint64_t v19 = qword_18C669A30;
  uint64_t v7 = *((void *)&xmmword_18C669A38 + 1);
  uint64_t v17 = xmmword_18C669A38;
  if (!v171) {
    goto LABEL_47;
  }
  uint64_t v34 = sub_183CF89BC((uint64_t)&v171, qword_18C669A30, xmmword_18C669A38, *((unint64_t *)&xmmword_18C669A38 + 1));
  int64_t v35 = *((void *)v171 + 2);
  if (v35 < v34)
  {
    __break(1u);
    goto LABEL_159;
  }

  char v6 = (char *)&v171;
  sub_183CF8CD4(v34, v35);
LABEL_47:
  if (v150 != 2)
  {
    int64_t v8 = sub_183CEC380();
    if (v10) {
      return (char *)swift_bridgeObjectRelease();
    }
    int v77 = v74;
    unint64_t v78 = v75;
    __int128 v157 = v76;
    if (!v171) {
      v171 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v79 = sub_183CF89BC((uint64_t)&v171, v19, v17, v7);
    int64_t v80 = *((void *)v171 + 2);
    if (v80 < v79)
    {
      __break(1u);
LABEL_167:
      swift_once();
LABEL_123:
      uint64_t v104 = qword_18C669150;
      uint64_t v159 = qword_18C669148;
      uint64_t v106 = qword_18C669158;
      uint64_t v105 = unk_18C669160;
      swift_bridgeObjectRetain();
      uint64_t v107 = v19;
      int v108 = sub_183CF8904();
      uint64_t v110 = v109;
      uint64_t v112 = v111;
      uint64_t v114 = v113;
      swift_bridgeObjectRelease();
      uint64_t v115 = v107;
      if (!v107)
      {
        uint64_t v116 = v105;
        uint64_t v162 = v159;
        int v117 = &v162;
        goto LABEL_134;
      }

    __break(1u);
    goto LABEL_43;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a2;
}

      __break(0x5519u);
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    uint64_t v11 = *a1;
    unint64_t v16 = a1[1];
    if (ccder_blob_decode_tl())
    {
      uint64_t v7 = v11;
      if (v16 < v11) {
        goto LABEL_42;
      }
      *a3 = v11;
      a3[1] = 0LL;
      int64_t v8 = 1;
LABEL_15:
      *a2 = v8;
      goto LABEL_16;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    int64_t v12 = *a1;
    uint64_t v17 = a1[1];
    if (ccder_blob_decode_tl())
    {
      uint64_t v7 = v12;
      if (v17 < v12) {
        goto LABEL_42;
      }
      *a3 = v12;
      a3[1] = 0LL;
      int64_t v8 = 2;
      goto LABEL_15;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    uint64_t v10 = *a1;
    if (ccder_blob_decode_tl())
    {
      unint64_t v9 = 3;
LABEL_23:
      *a2 = v9;
      goto LABEL_6;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    uint64_t v13 = *a1;
    __int128 v18 = a1[1];
    if (ccder_blob_decode_tl())
    {
      uint64_t v7 = v13;
      if (v18 < v13) {
        goto LABEL_42;
      }
      *a3 = v13;
      a3[1] = 0LL;
      int64_t v8 = 4;
      goto LABEL_15;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    uint64_t v10 = *a1;
    if (ccder_blob_decode_tl())
    {
      unint64_t v9 = 5;
      goto LABEL_23;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    __int128 v14 = *a1;
    uint64_t v19 = a1[1];
    if (ccder_blob_decode_tl())
    {
      uint64_t v7 = v14;
      if (v19 < v14) {
        goto LABEL_42;
      }
      *a3 = v14;
      a3[1] = 0LL;
      int64_t v8 = 6;
      goto LABEL_15;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    uint64_t v15 = *a1;
    __int128 v20 = a1[1];
    if (ccder_blob_decode_tl())
    {
      uint64_t v7 = v15;
      if (v20 < v15) {
        goto LABEL_42;
      }
      *a3 = v15;
      a3[1] = 0LL;
      int64_t v8 = 7;
      goto LABEL_15;
    }

    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    uint64_t v10 = *a1;
    uint64_t result = ccder_blob_decode_tl();
    if ((_DWORD)result)
    {
      unint64_t v9 = 8;
      goto LABEL_23;
    }
  }

  return result;
}

LABEL_129:
      sub_183CDD24C();
      uint64_t v123 = swift_allocError();
      *int v124 = 22;
      swift_willThrow();
      MEMORY[0x186E26038](v115);
      swift_bridgeObjectRelease();
      uint64_t v125 = sub_183CDD978( 0xD000000000000018LL,  0x8000000183D08D70LL,  (uint64_t)"AppleKeyStore/libaks_identity.swift",  35LL,  2,  293LL);
      sub_183CDD030();
      swift_allocError();
      *char v126 = v125;
      swift_willThrow();
      return (char *)MEMORY[0x186E26038](v123);
    }

    uint64_t v10 = 0LL;
    sub_183CF8CD4(v79, v80);
    char v6 = v171;
    if (v171)
    {
      unint64_t v154 = v78;
      __int128 v156 = v77;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_95;
      }
      goto LABEL_169;
    }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  while (1)
  {
    if (qword_18C664888 != -1) {
      swift_once();
    }
    __int128 v18 = (char *)qword_18C669A48;
    uint64_t v19 = qword_18C669A50;
    uint64_t v7 = *((void *)&xmmword_18C669A58 + 1);
    uint64_t v17 = xmmword_18C669A58;
    if (v171)
    {
      uint64_t v36 = sub_183CF89BC( (uint64_t)&v171,  qword_18C669A50,  xmmword_18C669A58,  *((unint64_t *)&xmmword_18C669A58 + 1));
      int64_t v37 = *((void *)v171 + 2);
      if (v37 < v36)
      {
        __break(1u);
        goto LABEL_162;
      }

      sub_183CF8CD4(v36, v37);
    }

    if (v147 == 2) {
      goto LABEL_54;
    }
    int64_t v8 = sub_183CEC380();
    char v6 = (char *)v10;
    if (v10) {
      return (char *)swift_bridgeObjectRelease();
    }
    uint64_t v87 = v84;
    uint64_t v88 = v85;
    __int128 v157 = v86;
    if (!v171) {
      v171 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v89 = sub_183CF89BC((uint64_t)&v171, v19, v17, v7);
    int64_t v90 = *((void *)v171 + 2);
    if (v90 >= v89) {
      break;
    }
    __break(1u);
LABEL_169:
    char v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_95:
    unint64_t v82 = *((void *)v6 + 2);
    unint64_t v81 = *((void *)v6 + 3);
    if (v82 >= v81 >> 1) {
      char v6 = sub_183CE67E0((char *)(v81 > 1), v82 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v82 + 1;
    char v83 = &v6[64 * v82];
    *((void *)v83 + 4) = v18;
    *((void *)v83 + 5) = v19;
    *((void *)v83 + 6) = v17;
    *((void *)v83 + 7) = v7;
    *((void *)v83 + 8) = v8;
    *((void *)v83 + 9) = v156;
    *((void *)v83 + 10) = v154;
    *((void *)v83 + 11) = v157;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v171 = v6;
  }

  uint64_t v10 = 0LL;
  sub_183CF8CD4(v89, v90);
  uint64_t v91 = v171;
  if (v171)
  {
    uint64_t v155 = v88;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v91 = sub_183CE67E0(0LL, *((void *)v91 + 2) + 1LL, 1, v91);
    }
    unint64_t v93 = *((void *)v91 + 2);
    unint64_t v92 = *((void *)v91 + 3);
    if (v93 >= v92 >> 1) {
      uint64_t v91 = sub_183CE67E0((char *)(v92 > 1), v93 + 1, 1, v91);
    }
    *((void *)v91 + 2) = v93 + 1;
    uint64_t v94 = &v91[64 * v93];
    *((void *)v94 + 4) = v18;
    *((void *)v94 + 5) = v19;
    *((void *)v94 + 6) = v17;
    *((void *)v94 + 7) = v7;
    *((void *)v94 + 8) = v8;
    *((void *)v94 + 9) = v87;
    *((void *)v94 + 10) = v155;
    *((void *)v94 + 11) = v157;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v171 = v91;
  }

  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

LABEL_54:
  uint64_t v19 = v10;
  if (v146)
  {
    if (qword_18C664808 != -1) {
      swift_once();
    }
    __int128 v158 = xmmword_18C669848;
    uint64_t v38 = qword_18C669858;
    uint64_t v39 = unk_18C669860;
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_183CF8904();
    if (v10)
    {
      swift_bridgeObjectRelease();
      MEMORY[0x186E26038](v10);
      swift_bridgeObjectRelease();
      uint64_t v44 = sub_183CDD978( 0xD000000000000019LL,  0x8000000183D08DC0LL,  (uint64_t)"AppleKeyStore/libaks_identity.swift",  35LL,  2,  281LL);
      sub_183CDD030();
      swift_allocError();
      uint64_t *v45 = v44;
      return (char *)swift_willThrow();
    }

    uint64_t v101 = v40;
    uint64_t v102 = v41;
    uint64_t v103 = v42;
    swift_bridgeObjectRelease();
    __int128 v164 = v158;
    uint64_t v165 = v38;
    uint64_t v166 = v39;
    v167 = v43;
    uint64_t v168 = v101;
    uint64_t v169 = v102;
    uint64_t v170 = v103;
    swift_unknownObjectRetain();
    sub_183CDC7AC((uint64_t)&v164);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v19 = 0LL;
  }

  if (v145)
  {
    if (qword_18C664648 == -1) {
      goto LABEL_123;
    }
    goto LABEL_167;
  }

  if (v144)
  {
    if (qword_18C664658 != -1) {
      swift_once();
    }
    uint64_t v104 = qword_18C669190;
    uint64_t v160 = qword_18C669188;
    uint64_t v106 = qword_18C669198;
    uint64_t v118 = unk_18C6691A0;
    swift_bridgeObjectRetain();
    uint64_t v119 = v19;
    int v108 = sub_183CF8904();
    uint64_t v110 = v120;
    uint64_t v112 = v121;
    uint64_t v114 = v122;
    swift_bridgeObjectRelease();
    uint64_t v115 = v119;
    if (v119) {
      goto LABEL_129;
    }
    uint64_t v116 = v118;
    uint64_t v163 = v160;
    int v117 = &v163;
LABEL_134:
    v117[1] = v104;
    v117[2] = v106;
    v117[3] = v116;
    v117[4] = (uint64_t)v108;
    v117[5] = v110;
    v117[6] = v112;
    v117[7] = v114;
    swift_unknownObjectRetain();
    sub_183CDC7AC((uint64_t)v117);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  sub_183CE109C(0x11uLL, 0, 1, a1, v171);
  return (char *)swift_bridgeObjectRelease();
}

uint64_t sub_183CE7D54(uint64_t a1)
{
  return a1;
}

unint64_t sub_183CE7D9C()
{
  unint64_t result = qword_18C6649E8;
  if (!qword_18C6649E8)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSIdentity.Config.Options,  &type metadata for AKSIdentity.Config.Options);
    atomic_store(result, (unint64_t *)&qword_18C6649E8);
  }

  return result;
}

unint64_t sub_183CE7DE4()
{
  unint64_t result = qword_18C6649F0;
  if (!qword_18C6649F0)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSIdentity.Config.Options,  &type metadata for AKSIdentity.Config.Options);
    atomic_store(result, (unint64_t *)&qword_18C6649F0);
  }

  return result;
}

unint64_t sub_183CE7E2C()
{
  unint64_t result = qword_18C6649F8;
  if (!qword_18C6649F8)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSIdentity.Config.Options,  &type metadata for AKSIdentity.Config.Options);
    atomic_store(result, (unint64_t *)&qword_18C6649F8);
  }

  return result;
}

unint64_t sub_183CE7E74()
{
  unint64_t result = qword_18C664A00;
  if (!qword_18C664A00)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSIdentity.Config.Options,  &type metadata for AKSIdentity.Config.Options);
    atomic_store(result, (unint64_t *)&qword_18C664A00);
  }

  return result;
}

ValueMetadata *type metadata accessor for AKSIdentity()
{
  return &type metadata for AKSIdentity;
}

__n128 __swift_memcpy16_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AKSUUID(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AKSUUID(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AKSUUID()
{
  return &type metadata for AKSUUID;
}

uint64_t destroy for AKSIdentity.Config()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AKSIdentity.Config(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_OWORD *)(a1 + 57) = v3;
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  uint64_t v4 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v4;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AKSIdentity.Config(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  __int128 v8 = *(_OWORD *)((char *)a2 + 57);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_OWORD *)(a1 + 57) = v8;
  __int128 v9 = *(_OWORD *)((char *)a2 + 74);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_OWORD *)(a1 + 74) = v9;
  uint64_t v10 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(void *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 138);
  uint64_t v13 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = a2[20];
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = a2[22];
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = a2[24];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(void *)(a1 + 192) = v16;
  *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
  *(_BYTE *)(a1 + 202) = *((_BYTE *)a2 + 202);
  *(void *)(a1 + 208) = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __int128 v7 = a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  __int128 v11 = a2[12];
  __int128 v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for AKSIdentity.Config(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v4 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_OWORD *)(a1 + 57) = v4;
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AKSIdentity.Config(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 232)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 208);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AKSIdentity.Config(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 232) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 232) = 0;
    }
    if (a2) {
      *(void *)(result + 208) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AKSIdentity.Config()
{
  return &type metadata for AKSIdentity.Config;
}

ValueMetadata *type metadata accessor for AKSIdentity.Config.Options()
{
  return &type metadata for AKSIdentity.Config.Options;
}

BOOL static AKSError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t AKSError.hash(into:)()
{
  return sub_183D05034();
}

uint64_t AKSError.hashValue.getter()
{
  return sub_183D05058();
}

unint64_t sub_183CE8504()
{
  unint64_t result = qword_18C664A18;
  if (!qword_18C664A18)
  {
    unint64_t result = MEMORY[0x186E2608C](&protocol conformance descriptor for AKSError, &type metadata for AKSError);
    atomic_store(result, (unint64_t *)&qword_18C664A18);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AKSError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xDA) {
    goto LABEL_17;
  }
  if (a2 + 38 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 38) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 38;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 38;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 38;
    }
  }

uint64_t storeEnumTagSinglePayload for AKSError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 38 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 38) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xDA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD9) {
    return ((uint64_t (*)(void))((char *)&loc_183CE8624 + 4 * byte_183D0BC81[v4]))();
  }
  *a1 = a2 + 38;
  return ((uint64_t (*)(void))((char *)sub_183CE8658 + 4 * asc_183D0BC7C[v4]))();
}

uint64_t sub_183CE8658(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CE8660(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CE8668LL);
  }
  return result;
}

uint64_t sub_183CE8674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CE867CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 38;
  return result;
}

uint64_t sub_183CE8680(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CE8688(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AKSError()
{
  return &type metadata for AKSError;
}

uint64_t sub_183CE86A4()
{
  return sub_183CE8850(&qword_18C664A20, qword_18C664A28);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E26080](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_183CE870C()
{
  return sub_183CE8850(&qword_18C664A68, qword_18C664A70);
}

uint64_t sub_183CE8730()
{
  return sub_183CE8850(&qword_18C664AB0, qword_18C664AB8);
}

uint64_t sub_183CE8754()
{
  return sub_183CE8850(&qword_18C664AF8, qword_18C664B00);
}

uint64_t sub_183CE8778()
{
  return sub_183CE8850(&qword_18C664B40, qword_18C664B48);
}

uint64_t sub_183CE879C()
{
  return sub_183CE8850(&qword_18C664B88, qword_18C664B90);
}

uint64_t sub_183CE87C0()
{
  return sub_183CE8850(&qword_18C664BD0, qword_18C664BD8);
}

uint64_t sub_183CE87E4()
{
  return sub_183CE8850(&qword_18C664C18, qword_18C664C20);
}

uint64_t sub_183CE8808()
{
  return sub_183CE8850(&qword_18C664C60, qword_18C664C68);
}

uint64_t sub_183CE882C()
{
  return sub_183CE8850(&qword_18C664CA8, qword_18C664CB0);
}

uint64_t sub_183CE8850(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E2608C](&unk_183D0C480, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_183CE8890(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_183CE8898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t sub_183CE88B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t sub_183CE88C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_183CE88D0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_183CE893C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t sub_183CE89AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_183CE89BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_183CE89EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_183CE8A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_183CE8A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_183CE8A7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183CE8B2C + 4 * byte_183D0BDF0[(v7 - 1)]))();
}

void sub_183CE8B7C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for IntegerBytesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerBytesCollection);
}

void sub_183CE8D38()
{
}

uint64_t sub_183CE8D48()
{
  return MEMORY[0x189618758];
}

uint64_t sub_183CE8D54()
{
  return MEMORY[0x189618790];
}

uint64_t sub_183CE8D60()
{
  return sub_183D04DB8();
}

uint64_t sub_183CE8D74()
{
  return sub_183D04E00() & 1;
}

uint64_t sub_183CE8DA4()
{
  return sub_183D05058();
}

uint64_t sub_183CE8DF8()
{
  return sub_183D05058();
}

uint64_t sub_183CE8E38()
{
  return sub_183CE8D74();
}

uint64_t sub_183CE8E44(uint64_t result)
{
  if (__OFSUB__(result, 1LL))
  {
    __break(1u);
  }

  else if ((unint64_t)(result - 0x1000000000000001LL) >> 61 == 7)
  {
    sub_183CEA284();
    return sub_183D04F44();
  }

  __break(1u);
  return result;
}

uint64_t sub_183CE8EC8()
{
  return sub_183CE0114();
}

uint64_t sub_183CE8ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v54 = *(void *)(a2 + 24);
  unint64_t v55 = (char *)a1;
  uint64_t v49 = *(void *)(*(void *)(v54 + 8) + 24LL);
  uint64_t v50 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v53 = (char *)&v46 - v4;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v6);
  size_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v58 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v47 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v51 = (char *)&v46 - v12;
  MEMORY[0x1895F8858](v13);
  uint64_t v60 = (char *)&v46 - v14;
  MEMORY[0x1895F8858](v15);
  uint64_t v57 = (char *)&v46 - v16;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v48 = (char *)&v46 - v18;
  double v21 = MEMORY[0x1895F8858](v20);
  unint64_t v23 = (char *)&v46 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v3, v21);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_183D04EFC();
  sub_183CE8E44((uint64_t)v55);
  sub_183D04F14();
  uint64_t v24 = v3;
  __int128 v25 = (char *)AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v24);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v58 + 8);
  v26(v19, v9);
  swift_getAssociatedConformanceWitness();
  sub_183D04FEC();
  sub_183D04FC8();
  int64_t v27 = v57;
  unint64_t v55 = v23;
  sub_183D04F08();
  v26(v19, v9);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v28(v60, v27, v9);
  if ((sub_183D04F38() & 1) == 0
    || (sub_183D04FEC(),
        int64_t v29 = v48,
        sub_183D04FC8(),
        swift_getAssociatedConformanceWitness(),
        char v30 = sub_183D04DE8(),
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v29, v9),
        (v30 & 1) != 0))
  {
    if (sub_183D04F2C() < 8) {
      goto LABEL_15;
    }
    v28(v51, v60, v9);
    unsigned __int8 v61 = -1;
    char v32 = sub_183D04F38();
    uint64_t v33 = sub_183D04F2C();
    if ((v32 & 1) != 0)
    {
      if (v33 <= 8)
      {
        sub_183D04FEC();
        uint64_t v34 = v48;
        sub_183D04FC8();
        swift_getAssociatedConformanceWitness();
        int64_t v35 = v51;
        char v36 = sub_183D04DD0();
        v26(v34, v9);
        unsigned int v37 = v61;
        __int128 v25 = v47;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v47, v35, v9);
        if ((v36 & 1) == 0)
        {
LABEL_14:
          v26(v25, v9);
          goto LABEL_15;
        }

        unsigned __int8 v38 = sub_183D04F20();
        v26(v25, v9);
        if (v37 < v38)
        {
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }

uint64_t sub_183CE9504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
  MEMORY[0x186E2608C](&unk_183D0C168, v4);
  return sub_183D04E60();
}

uint64_t sub_183CE9578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
  MEMORY[0x186E2608C](&unk_183D0C168, v4);
  return sub_183D04E78();
}

uint64_t sub_183CE95E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE9940(a1, a2, a3, MEMORY[0x189618808]);
}

void *sub_183CE95EC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE99D0(a1, a2, a3, MEMORY[0x189618808]);
}

uint64_t sub_183CE95FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183D04E54();
}

uint64_t sub_183CE9664@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_183CE8EC8();
  *a1 = result;
  return result;
}

uint64_t sub_183CE9688@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_183CDF3B8();
  *a1 = result;
  return result;
}

void (*sub_183CE96B4(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  uint64_t v7 = sub_183CE9744((uint64_t)v6, *a2, a3);
  v6[40] = v8;
  *((void *)v6 + 4) = v7;
  return sub_183CE9718;
}

void sub_183CE9718(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t (*sub_183CE9744(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  return nullsub_1;
}

uint64_t sub_183CE9770(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a1 + 16), *(void *)(a1 + 24), v2);
  MEMORY[0x186E2608C](&unk_183D0C168, v3);
  return sub_183D04E6C();
}

void sub_183CE97E0(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_183CE97F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v4);
  MEMORY[0x186E2608C](&unk_183D0C168, v5);
  return sub_183D04E60();
}

uint64_t sub_183CE9870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v4);
  MEMORY[0x186E2608C](&unk_183D0C168, v5);
  return sub_183D04E78();
}

uint64_t sub_183CE98E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183CE9F08( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189618A18],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B40]);
}

uint64_t sub_183CE990C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183CE9F08( a1,  a2,  a3,  a4,  MEMORY[0x189617BE0],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B50]);
}

uint64_t sub_183CE9934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE9940(a1, a2, a3, MEMORY[0x189618800]);
}

uint64_t sub_183CE9940( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = MEMORY[0x186E2608C](&unk_183D0C480);
  uint64_t v8 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v7);
  uint64_t v9 = MEMORY[0x186E2608C](&unk_183D0C168, v8);
  return a4(a1, a2, v6, v9);
}

void *sub_183CE99C4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE99D0(a1, a2, a3, MEMORY[0x189618800]);
}

void *sub_183CE99D0( void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = MEMORY[0x186E2608C](&unk_183D0C480);
  uint64_t v9 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v8);
  uint64_t v10 = MEMORY[0x186E2608C](&unk_183D0C168, v9);
  uint64_t result = a4(&v12, a1, a2, v7, v10);
  *a1 = v12;
  return result;
}

uint64_t sub_183CE9A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = sub_183CE8EC8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x186E2608C](&unk_183D0C2D8, a1);
  uint64_t result = sub_183D04FA4();
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t sub_183CE9AE4(uint64_t a1)
{
  return sub_183D04E84();
}

uint64_t sub_183CE9B18(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E2608C](&unk_183D0C2D8, a1);
  uint64_t v4 = sub_183CEA0B4(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
  return v4;
}

uint64_t sub_183CE9B78()
{
  return sub_183D05034();
}

uint64_t sub_183CE9B9C()
{
  return sub_183D05058();
}

uint64_t sub_183CE9BE4()
{
  return sub_183CE9B9C();
}

uint64_t sub_183CE9BEC()
{
  return sub_183CE9B78();
}

uint64_t sub_183CE9BF4()
{
  return sub_183D05058();
}

uint64_t sub_183CE9C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183D04EE4();
}

BOOL sub_183CE9C7C(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

BOOL sub_183CE9C88(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_183CE9C94(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_183CE9CA0(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_183CE9CAC(uint64_t *a1, uint64_t *a2)
{
  return sub_183CE9C7C(*a1, *a2);
}

BOOL sub_183CE9CB8(uint64_t *a1, uint64_t *a2)
{
  return sub_183CE9C94(*a1, *a2);
}

BOOL sub_183CE9CC4(uint64_t *a1, uint64_t *a2)
{
  return sub_183CE9CA0(*a1, *a2);
}

BOOL sub_183CE9CD0(uint64_t *a1, uint64_t *a2)
{
  return sub_183CE9C88(*a1, *a2);
}

uint64_t sub_183CE9CE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_183CE9CF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_183CE9CE0(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_183CE9D1C()
{
  return sub_183D04EF0();
}

void sub_183CE9D38()
{
}

void sub_183CE9D48()
{
}

void sub_183CE9D58()
{
}

uint64_t sub_183CE9D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE9E58(a1, a2, a3, MEMORY[0x189618A60]);
}

unint64_t sub_183CE9D74()
{
  unint64_t result = qword_18C664D70;
  if (!qword_18C664D70)
  {
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C664D70);
  }

  return result;
}

void sub_183CE9DB8()
{
}

void sub_183CE9DC8()
{
}

uint64_t sub_183CE9DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE9E58(a1, a2, a3, MEMORY[0x189618A40]);
}

uint64_t sub_183CE9DE4(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E2608C](&unk_183D0C3B8);
  return MEMORY[0x186E2608C](MEMORY[0x18961A5C8], a1, &v3);
}

void sub_183CE9E2C()
{
}

void sub_183CE9E3C()
{
}

uint64_t sub_183CE9E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183CE9E58(a1, a2, a3, MEMORY[0x189618A58]);
}

uint64_t sub_183CE9E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x186E2608C](&unk_183D0C168, *(void *)(a1 + 16));
  v7[1] = sub_183CE9D74();
  return MEMORY[0x186E2608C](a4, a1, v7);
}

uint64_t sub_183CE9EB4(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E2608C](&unk_183D0C480);
  return MEMORY[0x186E2608C](MEMORY[0x18961A5E0], a1, &v3);
}

uint64_t type metadata accessor for IntegerBytesCollection.Index( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerBytesCollection.Index);
}

uint64_t sub_183CE9F08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  unint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = sub_183D04DF4();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }

  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_183CEA0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_183D04EA8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v17 - v9;
  char v11 = sub_183D04DF4();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v7, a2, v4);
  if ((v11 & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }

  char v13 = sub_183D04DF4();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t sub_183CEA240()
{
  unint64_t result = qword_18C664D78;
  if (!qword_18C664D78)
  {
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x18961A640], MEMORY[0x18961A610]);
    atomic_store(result, (unint64_t *)&qword_18C664D78);
  }

  return result;
}

unint64_t sub_183CEA284()
{
  unint64_t result = qword_18C664D80[0];
  if (!qword_18C664D80[0])
  {
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x189618788], MEMORY[0x189618740]);
    atomic_store(result, qword_18C664D80);
  }

  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186E2605C](a1, v6, a5);
}

void sub_183CEA2FC()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  uint64_t v3 = v2 >> 1;
  if (v1 == v2 >> 1) {
    goto LABEL_2;
  }
  if (v1 >= (uint64_t)(v2 >> 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v7 = v0[1];
  int v8 = *(char *)(v7 + v1);
  uint64_t v9 = v0[2];
  if (v8 < 0)
  {
    uint64_t v9 = v1 + 1;
    if (v1 + 1 == v3)
    {
LABEL_2:
      uint64_t v4 = 0x8000000183D08E00LL;
      uint64_t v5 = 0xD000000000000026LL;
      uint64_t v6 = 275LL;
LABEL_17:
      uint64_t v14 = sub_183CDD978(v5, v4, (uint64_t)"AppleKeyStore/ObjectIdentifier.swift", 36LL, 2, v6);
      sub_183CDD030();
      swift_allocError();
      *uint64_t v15 = v14;
      swift_willThrow();
      return;
    }

    while (v9 < v3)
    {
      uint64_t v13 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_19;
      }
      ++v9;
      if (v13 == v3) {
        goto LABEL_2;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

uint64_t sub_183CEA46C(unint64_t a1)
{
  if (a1)
  {
    unint64_t v3 = __clz(a1);
    uint64_t v4 = *v1;
    if (v3 - 57 >= 7)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_183CE66F8(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
      }
      uint64_t v6 = 7 * v5 - 7;
      uint64_t v7 = v5;
      while (v7 <= v5)
      {
        unint64_t v9 = *((void *)v4 + 2);
        unint64_t v8 = *((void *)v4 + 3);
        if (v9 >= v8 >> 1) {
          uint64_t v4 = sub_183CE66F8((char *)(v8 > 1), v9 + 1, 1, v4);
        }
        --v7;
        *((void *)v4 + 2) = v9 + 1;
        v4[v9 + 32] = (a1 >> v6) | 0x80;
        v6 -= 7LL;
        if (v7 == 1) {
          goto LABEL_17;
        }
      }

      __break(1u);
LABEL_17:
      *uint64_t v1 = v4;
    }

    char v14 = a1 & 0x7F;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CE66F8(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
      uint64_t v4 = (char *)result;
    }

    unint64_t v12 = *((void *)v4 + 2);
    unint64_t v15 = *((void *)v4 + 3);
    unint64_t v13 = v12 + 1;
    if (v12 >= v15 >> 1)
    {
      uint64_t result = (uint64_t)sub_183CE66F8((char *)(v15 > 1), v12 + 1, 1, v4);
      uint64_t v4 = (char *)result;
    }
  }

  else
  {
    uint64_t v4 = *v1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CE66F8(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
      uint64_t v4 = (char *)result;
    }

    unint64_t v12 = *((void *)v4 + 2);
    unint64_t v11 = *((void *)v4 + 3);
    unint64_t v13 = v12 + 1;
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)sub_183CE66F8((char *)(v11 > 1), v12 + 1, 1, v4);
      uint64_t v4 = (char *)result;
    }

    char v14 = 0;
  }

  *((void *)v4 + 2) = v13;
  v4[v12 + 32] = v14;
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_183CEA65C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_183D05034();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8LL;
      sub_183D05034();
      --v2;
    }

    while (v2);
  }

  return sub_183D05058();
}

uint64_t sub_183CEA6C8()
{
  return sub_183CEA65C(*v0);
}

uint64_t sub_183CEA6D0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_183D05034();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8LL;
      uint64_t result = sub_183D05034();
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_183CEA720()
{
  uint64_t v1 = *v0;
  sub_183D05028();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_183D05034();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8LL;
      sub_183D05034();
      --v2;
    }

    while (v2);
  }

  return sub_183D05058();
}

BOOL sub_183CEA788(void **a1, void **a2)
{
  return sub_183CE3EF0(*a1, *a2);
}

uint64_t sub_183CEA794@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_183CEA79C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    sub_183CEAAD8(0LL, v1, 0);
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = sub_183D04FBC();
      uint64_t v5 = v4;
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v6 = *(void *)(v11 + 24);
      if (v7 >= v6 >> 1) {
        sub_183CEAAD8((char *)(v6 > 1), v7 + 1, 1);
      }
      ++v2;
      *(void *)(v11 + 16) = v7 + 1;
      uint64_t v8 = v11 + 16 * v7;
      *(void *)(v8 + 32) = v3;
      *(void *)(v8 + 40) = v5;
    }

    while (v1 != v2);
    swift_bridgeObjectRelease();
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C664E10);
  sub_183CEAAF4();
  uint64_t v9 = sub_183D04DC4();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_183CEA8E4()
{
  return sub_183CEA79C(*v0);
}

unint64_t sub_183CEA8F0()
{
  unint64_t result = qword_18C664E08;
  if (!qword_18C664E08)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0C568, &type metadata for ASN1ObjectIdentifier);
    atomic_store(result, (unint64_t *)&qword_18C664E08);
  }

  return result;
}

void sub_183CEA934(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v7 = 7 * v5;
  if ((unsigned __int128)(v5 * (__int128)7LL) >> 64 != (7 * v5) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (!__OFADD__(v7, 7LL))
  {
    if (v7 + 7 > 71)
    {
      uint64_t v8 = sub_183CDD978( 0xD000000000000021LL,  0x8000000183D08E90LL,  (uint64_t)"AppleKeyStore/ObjectIdentifier.swift",  36LL,  2,  298LL);
      sub_183CDD030();
      swift_allocError();
      uint64_t *v9 = v8;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v11 = sub_183CED1D0(0LL, v7, 7LL);
    uint64_t v12 = *(void *)(v11 + 16);
    if (!v12)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    if (a3 <= v4) {
      uint64_t v15 = v4;
    }
    else {
      uint64_t v15 = a3;
    }
    unint64_t v16 = v15 - a3;
    while (v16 > v12 - 1)
    {
      unint64_t v18 = *(void *)(v11 + 8 * v14 + 32);
      if (v18 - 65 <= 0xFFFFFFFFFFFFFF7ELL)
      {
        unint64_t v17 = 0LL;
      }

      else
      {
        unint64_t v19 = *(_BYTE *)(a2 + a3 + v14) & 0x7F;
        if ((v18 & 0x8000000000000000LL) != 0)
        {
          unint64_t v21 = v19 >> -(char)v18;
          if (v18 <= 0xFFFFFFFFFFFFFFC0LL) {
            unint64_t v17 = 0LL;
          }
          else {
            unint64_t v17 = v21;
          }
        }

        else
        {
          uint64_t v20 = v19 << v18;
          if (v18 >= 0x40) {
            unint64_t v17 = 0LL;
          }
          else {
            unint64_t v17 = v20;
          }
        }
      }

      ++v14;
      v13 |= v17;
      if (v12 == v14) {
        goto LABEL_22;
      }
    }

    __break(1u);
    goto LABEL_24;
  }

LABEL_26:
  __break(1u);
}

  __break(1u);
  return result;
}

char *sub_183CEAAD8(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_183CEAB40(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

unint64_t sub_183CEAAF4()
{
  unint64_t result = qword_18C664E18;
  if (!qword_18C664E18)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C664E10);
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x189618458], v1);
    atomic_store(result, (unint64_t *)&qword_18C664E18);
  }

  return result;
}

char *sub_183CEAB40(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C664E20);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

ValueMetadata *type metadata accessor for ASN1ObjectIdentifier()
{
  return &type metadata for ASN1ObjectIdentifier;
}

uint64_t sub_183CEAC50()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = v0[1];
    uint64_t result = sub_183D05034();
    BOOL v5 = __OFSUB__(v2, v1);
    uint64_t v6 = v2 - v1;
    if (!v6) {
      return sub_183D05034();
    }
    if (!((v6 < 0) ^ v5 | (v6 == 0)))
    {
      uint64_t v7 = v4 + v1;
      do
      {
        ++v7;
        sub_183D05040();
        --v6;
      }

      while (v6);
      return sub_183D05034();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CEACC8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = v0[1];
    uint64_t result = sub_183D05034();
    BOOL v5 = __OFSUB__(v2, v1);
    uint64_t v6 = v2 - v1;
    if (!v6)
    {
LABEL_6:
      sub_183D05034();
      return sub_183D05058();
    }

    if (!((v6 < 0) ^ v5 | (v6 == 0)))
    {
      uint64_t v7 = v4 + v1;
      do
      {
        ++v7;
        sub_183D05040();
        --v6;
      }

      while (v6);
      goto LABEL_6;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CEAD6C()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_183D05028();
  unint64_t v4 = v3 >> 1;
  uint64_t result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_183D05034();
    BOOL v6 = __OFSUB__(v4, v2);
    uint64_t v7 = v4 - v2;
    if (!v7)
    {
LABEL_6:
      sub_183D05034();
      return sub_183D05058();
    }

    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      uint64_t v8 = v1 + v2;
      do
      {
        ++v8;
        sub_183D05040();
        --v7;
      }

      while (v7);
      goto LABEL_6;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183CEAE00(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a2[4];
  return sub_183CE09F4(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3]) & (v2 == v3);
}

unint64_t sub_183CEAE44()
{
  unint64_t result = qword_18C664E28;
  if (!qword_18C664E28)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0C628, &type metadata for ASN1BitString);
    atomic_store(result, (unint64_t *)&qword_18C664E28);
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1BitString()
{
  return &type metadata for ASN1BitString;
}

uint64_t sub_183CEAE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return swift_unknownObjectRelease();
}

uint64_t sub_183CEAF04()
{
  return sub_183CE3ADC(*(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_183CEAF14()
{
  unint64_t result = qword_18C664E30;
  if (!qword_18C664E30)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0C6DC, &type metadata for ASN1OctetString);
    atomic_store(result, (unint64_t *)&qword_18C664E30);
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1OctetString()
{
  return &type metadata for ASN1OctetString;
}

double sub_183CEAF68(uint64_t a1)
{
  return sub_183CEB02C(a1, 111, &qword_18C6690A8, &qword_18C6690B0, &qword_18C6690B8);
}

double sub_183CEAF80(uint64_t a1)
{
  return sub_183CEBF88(a1, 25442, &qword_18C6690C8, &qword_18C6690D0, &qword_18C6690D8);
}

double sub_183CEAF98(uint64_t a1)
{
  return sub_183CEB02C(a1, 100, (uint64_t *)&xmmword_18C6690E8, (void *)&xmmword_18C6690E8 + 1, &qword_18C6690F8);
}

double sub_183CEAFB0(uint64_t a1)
{
  return sub_183CEBF88(a1, 25697, &qword_18C669108, &qword_18C669110, &qword_18C669118);
}

double sub_183CEAFC8(uint64_t a1)
{
  return sub_183CEBF88(a1, 25701, &qword_18C669128, &qword_18C669130, &qword_18C669138);
}

double sub_183CEAFE0(uint64_t a1)
{
  return sub_183CEC214(a1, 1751999329, &qword_18C669148, &qword_18C669150, &qword_18C669158);
}

double sub_183CEAFFC(uint64_t a1)
{
  return sub_183CEBF88(a1, 26465, &qword_18C669168, &qword_18C669170, &qword_18C669178);
}

double sub_183CEB014(uint64_t a1)
{
  return sub_183CEB02C(a1, 112, &qword_18C669188, &qword_18C669190, &qword_18C669198);
}

double sub_183CEB02C(uint64_t a1, char a2, uint64_t *a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = swift_allocObject();
  size_t v10 = _swift_stdlib_malloc_size((const void *)v9);
  *(_BYTE *)(v9 + 32) = a2;
  *(void *)(v9 + 16) = 1LL;
  *(void *)(v9 + 24) = 2 * v10 - 64;
  *a3 = v9;
  *a4 = v9 + 32;
  double result = 0.0;
  *a5 = xmmword_183D0C7A0;
  return result;
}

double sub_183CEB0B0(uint64_t a1)
{
  return sub_183CEC214(a1, 1953259891, &qword_18C6691A8, &qword_18C6691B0, &qword_18C6691B8);
}

double sub_183CEB0CC()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 30064;
  *(_BYTE *)(v0 + 34) = 98;
  *(void *)&xmmword_18C6691C8 = v0;
  *((void *)&xmmword_18C6691C8 + 1) = v0 + 32;
  double result = 0.0;
  xmmword_18C6691D8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB140(uint64_t a1)
{
  return sub_183CEBF88(a1, 29803, &qword_18C6691E8, &qword_18C6691F0, &qword_18C6691F8);
}

double sub_183CEB158(uint64_t a1)
{
  return sub_183CEBF88(a1, 30315, &qword_18C669208, &qword_18C669210, algn_18C669218);
}

double sub_183CEB170()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 26987;
  *(_BYTE *)(v0 + 34) = 100;
  qword_18C669228 = v0;
  qword_18C669230 = v0 + 32;
  double result = 0.0;
  xmmword_18C669238 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB1E4(uint64_t a1)
{
  return sub_183CEBF88(a1, 27506, &qword_18C669248, &qword_18C669250, &qword_18C669258);
}

double sub_183CEB1FC(uint64_t a1)
{
  return sub_183CEBF88(a1, 25967, &qword_18C669268, &qword_18C669270, &qword_18C669278);
}

double sub_183CEB214(uint64_t a1)
{
  return sub_183CEC214(a1, 1702323055, &qword_18C669288, &qword_18C669290, &qword_18C669298);
}

double sub_183CEB230(uint64_t a1)
{
  return sub_183CEBF88(a1, 25711, &qword_18C6692A8, &qword_18C6692B0, &qword_18C6692B8);
}

double sub_183CEB248(uint64_t a1)
{
  return sub_183CEC214(a1, 1818584175, &qword_18C6692C8, &qword_18C6692D0, &qword_18C6692D8);
}

double sub_183CEB264(uint64_t a1)
{
  return sub_183CEBF88(a1, 25455, &qword_18C6692E8, &qword_18C6692F0, &qword_18C6692F8);
}

double sub_183CEB27C(uint64_t a1)
{
  return sub_183CEC214(a1, 1852273519, &qword_18C669308, &qword_18C669310, &qword_18C669318);
}

double sub_183CEB298(uint64_t a1)
{
  return sub_183CEC214(a1, 1667986287, &qword_18C669328, &qword_18C669330, &qword_18C669338);
}

double sub_183CEB2B4(uint64_t a1)
{
  return sub_183CEBF88(a1, 30575, &qword_18C669348, &qword_18C669350, &qword_18C669358);
}

double sub_183CEB2CC()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 30063;
  *(_BYTE *)(v0 + 34) = 119;
  qword_18C669368 = v0;
  unk_18C669370 = v0 + 32;
  double result = 0.0;
  xmmword_18C669378 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB340()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 25455;
  *(_BYTE *)(v0 + 34) = 107;
  qword_18C669388 = v0;
  qword_18C669390 = v0 + 32;
  double result = 0.0;
  xmmword_18C669398 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB3B4(uint64_t a1)
{
  return sub_183CEBF88(a1, 24943, &qword_18C6693A8, &qword_18C6693B0, &qword_18C6693B8);
}

double sub_183CEB3CC(uint64_t a1)
{
  return sub_183CEC214(a1, 1802990191, &qword_18C6693C8, &qword_18C6693D0, &qword_18C6693D8);
}

double sub_183CEB3E8()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 30319;
  *(_BYTE *)(v0 + 34) = 107;
  qword_18C6693E8 = v0;
  unk_18C6693F0 = v0 + 32;
  double result = 0.0;
  xmmword_18C6693F8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB45C(uint64_t a1)
{
  return sub_183CEC214(a1, 1701012847, &qword_18C669408, &qword_18C669410, &qword_18C669418);
}

double sub_183CEB478(uint64_t a1)
{
  return sub_183CEC214(a1, 1684235631, &qword_18C669428, &qword_18C669430, &qword_18C669438);
}

double sub_183CEB494(uint64_t a1)
{
  return sub_183CEC214(a1, 1952671087, &qword_18C669448, &qword_18C669450, &qword_18C669458);
}

double sub_183CEB4B0()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 25188;
  *(_BYTE *)(v0 + 34) = 104;
  qword_18C669468 = v0;
  unk_18C669470 = v0 + 32;
  double result = 0.0;
  xmmword_18C669478 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB524(uint64_t a1)
{
  return sub_183CEBF88(a1, 28775, &qword_18C669488, &qword_18C669490, &qword_18C669498);
}

double sub_183CEB53C(uint64_t a1)
{
  return sub_183CEBF88(a1, 25698, &qword_18C6694A8, &qword_18C6694B0, &qword_18C6694B8);
}

double sub_183CEB554()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 30061;
  *(_BYTE *)(v0 + 34) = 97;
  qword_18C6694C8 = v0;
  qword_18C6694D0 = v0 + 32;
  double result = 0.0;
  xmmword_18C6694D8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB5C8()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 28773;
  *(_BYTE *)(v0 + 34) = 112;
  qword_18C6694E8 = v0;
  qword_18C6694F0 = v0 + 32;
  double result = 0.0;
  xmmword_18C6694F8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB63C()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 29797;
  *(_BYTE *)(v0 + 34) = 112;
  qword_18C669508 = v0;
  qword_18C669510 = v0 + 32;
  double result = 0.0;
  xmmword_18C669518 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB6B0(uint64_t a1)
{
  return sub_183CEBF88(a1, 26211, &qword_18C669528, &qword_18C669530, algn_18C669538);
}

double sub_183CEB6C8(uint64_t a1)
{
  return sub_183CEC214(a1, 1634431855, &qword_18C669548, &qword_18C669550, &qword_18C669558);
}

double sub_183CEB6E4()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 5LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1667986287;
  *(_BYTE *)(v0 + 36) = 50;
  qword_18C669568 = v0;
  unk_18C669570 = v0 + 32;
  double result = 0.0;
  xmmword_18C669578 = xmmword_183D0C7C0;
  return result;
}

double sub_183CEB75C()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 5LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1735095151;
  *(_BYTE *)(v0 + 36) = 112;
  qword_18C669588 = v0;
  unk_18C669590 = v0 + 32;
  double result = 0.0;
  xmmword_18C669598 = xmmword_183D0C7C0;
  return result;
}

double sub_183CEB7D4(uint64_t a1)
{
  return sub_183CEC214(a1, 1869312879, &qword_18C6695A8, &qword_18C6695B0, &qword_18C6695B8);
}

double sub_183CEB7F0(uint64_t a1)
{
  return sub_183CEC214(a1, 1936421743, &qword_18C6695C8, &qword_18C6695D0, &qword_18C6695D8);
}

double sub_183CEB80C()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 27507;
  *(_BYTE *)(v0 + 34) = 116;
  qword_18C6695E8 = v0;
  unk_18C6695F0 = v0 + 32;
  double result = 0.0;
  xmmword_18C6695F8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB880(uint64_t a1)
{
  return sub_183CEC214(a1, 1953198707, &qword_18C669608, &qword_18C669610, &qword_18C669618);
}

double sub_183CEB89C(uint64_t a1)
{
  return sub_183CEC214(a1, 1634431091, &qword_18C669628, &qword_18C669630, &qword_18C669638);
}

double sub_183CEB8B8(uint64_t a1)
{
  return sub_183CEC214(a1, 1935895411, &qword_18C669648, &qword_18C669650, &qword_18C669658);
}

double sub_183CEB8D4()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 27507;
  *(_BYTE *)(v0 + 34) = 103;
  qword_18C669668 = v0;
  unk_18C669670 = v0 + 32;
  double result = 0.0;
  xmmword_18C669678 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB948()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 27507;
  *(_BYTE *)(v0 + 34) = 111;
  qword_18C669688 = v0;
  unk_18C669690 = v0 + 32;
  double result = 0.0;
  xmmword_18C669698 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEB9BC(uint64_t a1)
{
  return sub_183CEC214(a1, 1936681843, &qword_18C6696A8, &qword_18C6696B0, &qword_18C6696B8);
}

double sub_183CEB9D8(uint64_t a1)
{
  return sub_183CEC214(a1, 1869312615, &qword_18C6696C8, &qword_18C6696D0, &qword_18C6696D8);
}

double sub_183CEB9F4(uint64_t a1)
{
  return sub_183CEC214(a1, 1768844147, &qword_18C6696E8, &qword_18C6696F0, &qword_18C6696F8);
}

double sub_183CEBA10(uint64_t a1)
{
  return sub_183CEC214(a1, 1953198962, &qword_18C669708, &qword_18C669710, &qword_18C669718);
}

double sub_183CEBA2C(uint64_t a1)
{
  return sub_183CEC214(a1, 1952674674, &qword_18C669728, &qword_18C669730, &qword_18C669738);
}

double sub_183CEBA48()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 5LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1769305461;
  *(_BYTE *)(v0 + 36) = 100;
  qword_18C669748 = v0;
  qword_18C669750 = v0 + 32;
  double result = 0.0;
  xmmword_18C669758 = xmmword_183D0C7C0;
  return result;
}

double sub_183CEBAC0()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 5LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1751409509;
  *(_BYTE *)(v0 + 36) = 105;
  qword_18C669768 = v0;
  unk_18C669770 = v0 + 32;
  double result = 0.0;
  xmmword_18C669778 = xmmword_183D0C7C0;
  return result;
}

double sub_183CEBB38()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 5LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1751409509;
  *(_BYTE *)(v0 + 36) = 115;
  qword_18C669788 = v0;
  unk_18C669790 = v0 + 32;
  double result = 0.0;
  xmmword_18C669798 = xmmword_183D0C7C0;
  return result;
}

double sub_183CEBBB0(uint64_t a1)
{
  return sub_183CEC214(a1, 1853059696, &qword_18C6697A8, &qword_18C6697B0, &qword_18C6697B8);
}

double sub_183CEBBCC(uint64_t a1)
{
  return sub_183CEBF88(a1, 28530, &qword_18C6697C8, &qword_18C6697D0, &qword_18C6697D8);
}

double sub_183CEBBE4()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 27506;
  *(_BYTE *)(v0 + 34) = 111;
  qword_18C6697E8 = v0;
  qword_18C6697F0 = v0 + 32;
  double result = 0.0;
  xmmword_18C6697F8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEBC58(uint64_t a1)
{
  return sub_183CEBF88(a1, 26228, &qword_18C669808, &qword_18C669810, &qword_18C669818);
}

double sub_183CEBC70()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 5LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1769305447;
  *(_BYTE *)(v0 + 36) = 100;
  qword_18C669828 = v0;
  qword_18C669830 = v0 + 32;
  double result = 0.0;
  unk_18C669838 = xmmword_183D0C7C0;
  return result;
}

double sub_183CEBCE8(uint64_t a1)
{
  return sub_183CEBF88(a1, 27490, (uint64_t *)&xmmword_18C669848, (void *)&xmmword_18C669848 + 1, &qword_18C669858);
}

double sub_183CEBD00(uint64_t a1)
{
  return sub_183CEBF88(a1, 26994, &qword_18C669868, &qword_18C669870, algn_18C669878);
}

double sub_183CEBD18(uint64_t a1)
{
  return sub_183CEBF88(a1, 26226, &qword_18C669888, &qword_18C669890, algn_18C669898);
}

double sub_183CEBD30()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 29810;
  *(_BYTE *)(v0 + 34) = 105;
  qword_18C6698A8 = v0;
  qword_18C6698B0 = v0 + 32;
  double result = 0.0;
  unk_18C6698B8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEBDA4(uint64_t a1)
{
  return sub_183CEBF88(a1, 26995, &qword_18C6698C8, &qword_18C6698D0, &qword_18C6698D8);
}

double sub_183CEBDBC()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 26995;
  *(_BYTE *)(v0 + 34) = 50;
  qword_18C6698E8 = v0;
  unk_18C6698F0 = v0 + 32;
  double result = 0.0;
  xmmword_18C6698F8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEBE30()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 29556;
  *(_BYTE *)(v0 + 34) = 105;
  qword_18C669908 = v0;
  unk_18C669910 = v0 + 32;
  double result = 0.0;
  xmmword_18C669918 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEBEA4(uint64_t a1)
{
  return sub_183CEC214(a1, 845771636, &qword_18C669928, &qword_18C669930, &qword_18C669938);
}

double sub_183CEBEC0()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 6LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_DWORD *)(v0 + 32) = 1684235636;
  *(_WORD *)(v0 + 36) = 29544;
  qword_18C669948 = v0;
  unk_18C669950 = v0 + 32;
  double result = 0.0;
  xmmword_18C669958 = xmmword_183D0C7D0;
  return result;
}

double sub_183CEBF38(uint64_t a1)
{
  return sub_183CEC214(a1, 2004312943, &qword_18C669968, &qword_18C669970, &qword_18C669978);
}

double sub_183CEBF54(uint64_t a1)
{
  return sub_183CEC214(a1, 1684632950, &qword_18C669988, &qword_18C669990, &qword_18C669998);
}

double sub_183CEBF70(uint64_t a1)
{
  return sub_183CEBF88(a1, 29549, &qword_18C6699A8, &qword_18C6699B0, algn_18C6699B8);
}

double sub_183CEBF88(uint64_t a1, __int16 a2, uint64_t *a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = swift_allocObject();
  size_t v10 = _swift_stdlib_malloc_size((const void *)v9);
  *(_WORD *)(v9 + 32) = a2;
  *(void *)(v9 + 16) = 2LL;
  *(void *)(v9 + 24) = 2 * v10 - 64;
  *a3 = v9;
  *a4 = v9 + 32;
  double result = 0.0;
  *a5 = xmmword_183D0C7E0;
  return result;
}

double sub_183CEC00C()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 25197;
  *(_BYTE *)(v0 + 34) = 101;
  qword_18C6699C8 = v0;
  qword_18C6699D0 = v0 + 32;
  double result = 0.0;
  unk_18C6699D8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEC080()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 28771;
  *(_BYTE *)(v0 + 34) = 103;
  qword_18C6699E8 = v0;
  qword_18C6699F0 = v0 + 32;
  double result = 0.0;
  unk_18C6699F8 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEC0F4(uint64_t a1)
{
  return sub_183CEC214(a1, 1735421283, &qword_18C669A08, &qword_18C669A10, algn_18C669A18);
}

double sub_183CEC110()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 29289;
  *(_BYTE *)(v0 + 34) = 101;
  qword_18C669A28 = v0;
  unk_18C669A30 = v0 + 32;
  double result = 0.0;
  xmmword_18C669A38 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEC184()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 24943;
  *(_BYTE *)(v0 + 34) = 109;
  qword_18C669A48 = v0;
  unk_18C669A50 = v0 + 32;
  double result = 0.0;
  xmmword_18C669A58 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEC1F8(uint64_t a1)
{
  return sub_183CEC214(a1, 1684366707, &qword_18C669A68, &qword_18C669A70, &qword_18C669A78);
}

double sub_183CEC214(uint64_t a1, int a2, uint64_t *a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = swift_allocObject();
  size_t v10 = _swift_stdlib_malloc_size((const void *)v9);
  *(_DWORD *)(v9 + 32) = a2;
  *(void *)(v9 + 16) = 4LL;
  *(void *)(v9 + 24) = 2 * v10 - 64;
  *a3 = v9;
  *a4 = v9 + 32;
  double result = 0.0;
  *a5 = xmmword_183D0C7F0;
  return result;
}

double sub_183CEC298()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 27503;
  *(_BYTE *)(v0 + 34) = 101;
  qword_18C669A88 = v0;
  unk_18C669A90 = v0 + 32;
  double result = 0.0;
  xmmword_18C669A98 = xmmword_183D0C7B0;
  return result;
}

double sub_183CEC30C()
{
  uint64_t v0 = swift_allocObject();
  size_t v1 = _swift_stdlib_malloc_size((const void *)v0);
  *(void *)(v0 + 16) = 3LL;
  *(void *)(v0 + 24) = 2 * v1 - 64;
  *(_WORD *)(v0 + 32) = 27503;
  *(_BYTE *)(v0 + 34) = 100;
  qword_18C669AA8 = v0;
  unk_18C669AB0 = v0 + 32;
  double result = 0.0;
  xmmword_18C669AB8 = xmmword_183D0C7B0;
  return result;
}

char *sub_183CEC380()
{
  uint64_t v2 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_183CE0AC8(1uLL, 0, 0, &v2, (uint64_t (*)(char **))sub_183CFA670);
  double result = v2;
  if (v0) {
    return (char *)swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_183CEC418()
{
  uint64_t v2 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_183CE0AC8(2uLL, 0, 0, &v2, (uint64_t (*)(char **))sub_183CFA64C);
  double result = v2;
  if (v0) {
    return (char *)swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_183CEC4B8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_183CE0AC8(0xCuLL, 0, 0, &v7, (uint64_t (*)(char **))sub_183CE1FC0);
  if (v4)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    a4 = v7;
    swift_unknownObjectRelease();
  }

  return a4;
}

char *sub_183CEC58C(char *a1)
{
  BOOL v5 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  swift_bridgeObjectRetain();
  sub_183CE109C(0x11uLL, 0, 1, &v5, a1);
  swift_bridgeObjectRelease();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  else {
    uint64_t v2 = v5;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_183CEC64C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (!(void)v11)
  {
    uint64_t v6 = sub_183CDD978(0xD00000000000002ALL, 0x8000000183D08A90LL, (uint64_t)"AppleKeyStore/ASN1.swift", 24LL, 2, 1107LL);
    sub_183CDD030();
    swift_allocError();
    uint64_t *v7 = v6;
    swift_willThrow();
    return v6;
  }

  v14[1] = v10[2];
  size_t v14[2] = v10[3];
  v14[3] = v11;
  void v14[4] = v12;
  __int128 v13 = v10[0];
  v14[0] = v10[1];
  if (*(void *)&v10[0] != a2 || BYTE8(v13) != a3)
  {
    uint64_t v6 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1OctetString.swift", 35LL, 2, 26LL);
    sub_183CDD030();
    swift_allocError();
    *uint64_t v8 = v6;
    swift_willThrow();
    sub_183CE1F70(v9);
    return v6;
  }

  sub_183CDD0CC((uint64_t)v14, (uint64_t)v15);
  uint64_t result = sub_183CDD0CC((uint64_t)v15, (uint64_t)&v16);
  if ((v17 & 1) != 0)
  {
    uint64_t v6 = v16;
    sub_183CFA618((uint64_t)v15);
    sub_183CE1F70(v9);
    return v6;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CEC7E4( uint64_t result, unint64_t a2, unint64_t a3, uint64_t (*a4)(_BYTE *, uint64_t))
{
  unint64_t v8 = (71 - __clz(a3)) >> 3;
  if (v8 < result)
  {
    __break(1u);
    goto LABEL_17;
  }

  if (v8 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  int64_t v10 = result;
  uint64_t v11 = result - a2;
  uint64_t v6 = *v5;
  int64_t v12 = *((void *)*v5 + 2);
  int64_t v13 = v12 + result - a2;
  if (__OFADD__(v12, result - a2))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v4 = a4;
  uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v16 = *((void *)v6 + 3) >> 1, v16 < v13))
  {
    if (v12 <= v13) {
      int64_t v17 = v13;
    }
    else {
      int64_t v17 = v12;
    }
    uint64_t v6 = sub_183CE66F8(isUniquelyReferenced_nonNull_native, v17, 1, v6);
    int64_t v16 = *((void *)v6 + 3) >> 1;
  }

  uint64_t v18 = *((void *)v6 + 2);
  uint64_t v19 = v16 - v18;
  uint64_t result = (uint64_t)sub_183CF858C(&v47, &v6[v18 + 32], v16 - v18, v10, a2, a3);
  if (result < v11) {
    goto LABEL_19;
  }
  if (result >= 1)
  {
    uint64_t v20 = *((void *)v6 + 2);
    BOOL v21 = __OFADD__(v20, result);
    uint64_t v22 = v20 + result;
    if (v21)
    {
      __break(1u);
LABEL_41:
      uint64_t v33 = v7 - v10 + 1;
      goto LABEL_42;
    }

    *((void *)v6 + 2) = v22;
  }

  if (result != v19)
  {
LABEL_15:
    *BOOL v5 = v6;
    return result;
  }

uint64_t sub_183CECAE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = sub_183CE20C8(a1, a2, a3, a4, (uint64_t)&v9);
  if (v4) {
    goto LABEL_7;
  }
  if (v9 != 4 || v10 != 0)
  {
    uint64_t v5 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1OctetString.swift", 35LL, 2, 26LL);
    sub_183CDD030();
    swift_allocError();
    *unint64_t v8 = v5;
    swift_willThrow();
    sub_183CE2004((uint64_t)&v9);
LABEL_7:
    swift_unknownObjectRelease();
    return v5;
  }

  if (v12 == 1)
  {
    uint64_t v5 = v11;
    swift_unknownObjectRetain();
    sub_183CE2004((uint64_t)&v9);
    swift_unknownObjectRelease();
    return v5;
  }

  __break(1u);
  return result;
}

char *sub_183CECBD8(uint64_t a1, uint64_t a2, char *a3)
{
  if (!v3)
  {
    uint64_t v7 = (char *)MEMORY[0x18961AFE8];
    a3 = sub_183CDE290((uint64_t)v8, a2, a3, &v7);
    sub_183CE2004((uint64_t)v8);
    swift_bridgeObjectRelease();
  }

  return a3;
}

uint64_t sub_183CECC80(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (v3) {
    return v4;
  }
  if (v10 != a2 || v11 != a3)
  {
    uint64_t v8 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1OctetString.swift", 35LL, 2, 26LL);
    sub_183CDD030();
    swift_allocError();
    uint64_t *v9 = v8;
    swift_willThrow();
    sub_183CE2004((uint64_t)&v10);
    return v4;
  }

  if (v13 == 1)
  {
    uint64_t v4 = v12;
    swift_unknownObjectRetain();
    sub_183CE2004((uint64_t)&v10);
    return v4;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CECD90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_183CE20C8(a1, a2, a3, a4, (uint64_t)&v11);
  if (v6) {
    goto LABEL_7;
  }
  if (v11 != a5 || v12 != a6)
  {
    a6 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1OctetString.swift", 35LL, 2, 26LL);
    sub_183CDD030();
    swift_allocError();
    *uint64_t v10 = a6;
    swift_willThrow();
    sub_183CE2004((uint64_t)&v11);
LABEL_7:
    swift_unknownObjectRelease();
    return a6;
  }

  if (v14 == 1)
  {
    a6 = v13;
    swift_unknownObjectRetain();
    sub_183CE2004((uint64_t)&v11);
    swift_unknownObjectRelease();
    return a6;
  }

  __break(1u);
  return result;
}

void sub_183CECE94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_183CECEA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (v5 > 8)
    {
      uint64_t v6 = sub_183CDD978( 0xD00000000000001ALL,  0x8000000183D09050LL,  (uint64_t)"AppleKeyStore/ASN1.swift",  24LL,  2,  1191LL);
      sub_183CDD030();
      swift_allocError();
      uint64_t *v7 = v6;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v10 = sub_183CED1D0(0LL, 8 * v5, 8LL);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    if (a3 <= v4) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = a3;
    }
    unint64_t v15 = v14 - a3;
    while (v15 > v11 - 1)
    {
      unint64_t v17 = *(void *)(v10 + 8 * v12 + 32);
      if (v17 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      {
        unint64_t v16 = 0LL;
      }

      else
      {
        unint64_t v18 = *(unsigned __int8 *)(a2 + a3 + v12);
        if ((v17 & 0x8000000000000000LL) != 0)
        {
          unint64_t v20 = v18 >> -(char)v17;
          if (v17 <= 0xFFFFFFFFFFFFFFC0LL) {
            unint64_t v16 = 0LL;
          }
          else {
            unint64_t v16 = v20;
          }
        }

        else
        {
          uint64_t v19 = v18 << v17;
          if (v17 >= 0x40) {
            unint64_t v16 = 0LL;
          }
          else {
            unint64_t v16 = v19;
          }
        }
      }

      ++v12;
      v13 |= v16;
      if (v11 == v12) {
        goto LABEL_21;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_24:
  __break(1u);
}

void sub_183CED03C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (v5 > 4)
    {
      uint64_t v6 = sub_183CDD978( 0xD00000000000001ALL,  0x8000000183D09050LL,  (uint64_t)"AppleKeyStore/ASN1.swift",  24LL,  2,  1191LL);
      sub_183CDD030();
      swift_allocError();
      uint64_t *v7 = v6;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v10 = sub_183CED1D0(0LL, 8 * v5, 8LL);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v12 = 0LL;
    int v13 = 0;
    if (a3 <= v4) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = a3;
    }
    unint64_t v15 = v14 - a3;
    while (v15 > v11 - 1)
    {
      unint64_t v17 = *(void *)(v10 + 8 * v12 + 32);
      if (v17 - 33 < 0xFFFFFFFFFFFFFFBFLL)
      {
        int v16 = 0;
      }

      else
      {
        unsigned int v18 = *(unsigned __int8 *)(a2 + a3 + v12);
        if ((v17 & 0x8000000000000000LL) != 0)
        {
          unsigned int v20 = v18 >> -(char)v17;
          if (v17 <= 0xFFFFFFFFFFFFFFE0LL) {
            int v16 = 0;
          }
          else {
            int v16 = v20;
          }
        }

        else
        {
          BOOL v19 = v17 >= 0x20;
          int v16 = v18 << v17;
          if (v19) {
            int v16 = 0;
          }
        }
      }

      ++v12;
      v13 |= v16;
      if (v11 == v12) {
        goto LABEL_21;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t sub_183CED1D0(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result = sub_183CE017C(a1, a2, a3);
  uint64_t v4 = result;
  unint64_t v5 = *(void *)(result + 16);
  if (v5 < 2) {
    return v4;
  }
  unint64_t v6 = 0LL;
  unint64_t v7 = v5 >> 1;
  for (unint64_t i = v5 + 3; ; --i)
  {
    if (v6 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v9 = *(void *)(v4 + 16);
    if (v6 >= v9) {
      break;
    }
    if (i - 4 >= v9) {
      goto LABEL_12;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6 + 32);
    uint64_t v11 = *(void *)(v4 + 8 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CF849C(v4);
      uint64_t v4 = result;
    }

    *(void *)(v4 + 8 * v6 + 32) = v11;
    *(void *)(v4 + 8 * i) = v10;
LABEL_5:
    if (v7 == ++v6) {
      return v4;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_183CED290@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0LL;
      }
      v4 |= v6;
      --v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_183CED2E4@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch(result)
  {
    case 0xE007C006:
      *a2 = 5;
      break;
    case 0xE007C007:
      *a2 = 6;
      break;
    case 0xE007C008:
      *a2 = 7;
      break;
    case 0xE007C009:
      *a2 = 8;
      break;
    case 0xE007C00A:
      *a2 = 9;
      break;
    case 0xE007C00B:
    case 0xE007C00C:
    case 0xE007C00F:
    case 0xE007C010:
    case 0xE007C011:
    case 0xE007C012:
    case 0xE007C01B:
    case 0xE007C01C:
    case 0xE007C01D:
    case 0xE007C020:
LABEL_28:
      char v2 = 38;
LABEL_29:
      *a2 = v2;
      break;
    case 0xE007C00D:
      *a2 = 12;
      break;
    case 0xE007C00E:
      *a2 = 3;
      break;
    case 0xE007C013:
      *a2 = 18;
      break;
    case 0xE007C014:
      *a2 = 19;
      break;
    case 0xE007C015:
      *a2 = 20;
      break;
    case 0xE007C016:
      *a2 = 21;
      break;
    case 0xE007C017:
      *a2 = 22;
      break;
    case 0xE007C018:
      *a2 = 23;
      break;
    case 0xE007C019:
      *a2 = 24;
      break;
    case 0xE007C01A:
      *a2 = 31;
      break;
    case 0xE007C01E:
      *a2 = 29;
      break;
    case 0xE007C01F:
      *a2 = 30;
      break;
    case 0xE007C021:
      *a2 = 32;
      break;
    case 0xE007C022:
      *a2 = 33;
      break;
    case 0xE007C023:
      *a2 = 34;
      break;
    case 0xE007C024:
      *a2 = 35;
      break;
    case 0xE007C025:
      *a2 = 36;
      break;
    case 0xE007C026:
      *a2 = 37;
      break;
    default:
      char v2 = 1;
      switch(result)
      {
        case 0xE00002BC:
          *a2 = 0;
          break;
        case 0xE00002BD:
          *a2 = 16;
          break;
        case 0xE00002C1:
          *a2 = 28;
          break;
        case 0xE00002CA:
          *a2 = 25;
          break;
        case 0xE00002CE:
          *a2 = 4;
          break;
        case 0xE00002D5:
          *a2 = 26;
          break;
        case 0xE00002D6:
          *a2 = 17;
          break;
        case 0xE00002D8:
          *a2 = 13;
          break;
        case 0xE00002DB:
          *a2 = 27;
          break;
        case 0xE00002E2:
          goto LABEL_29;
        case 0xE00002E6:
          *a2 = 11;
          break;
        case 0xE00002F0:
          *a2 = 2;
          break;
        default:
          goto LABEL_28;
      }

      break;
  }

  return result;
}

uint64_t sub_183CED4E0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3 = result;
  if (*(void *)result != a2 || *(unsigned __int8 *)(result + 8) != a3)
  {
    unint64_t v4 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1Integer.swift", 31LL, 2, 46LL);
    sub_183CDD030();
    swift_allocError();
    *uint64_t v12 = v4;
    swift_willThrow();
    sub_183CE2004(v3);
    return v4;
  }

  if (*(_BYTE *)(result + 56) == 1)
  {
    int64_t v5 = *(void *)(result + 32);
    unint64_t v4 = *(void *)(result + 40);
    int64_t v6 = v4 >> 1;
    if (__OFSUB__(v4 >> 1, v5))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      uint64_t v9 = *(void *)(result + 48);
      if ((uint64_t)((v4 >> 1) - v5) < 1)
      {
        uint64_t v13 = 0x8000000183D08FD0LL;
        uint64_t v14 = 0xD00000000000001FLL;
        uint64_t v15 = 55LL;
LABEL_13:
        uint64_t v16 = sub_183CDDA64(v14, v13, (uint64_t)"AppleKeyStore/ASN1Integer.swift", 31LL, 2, v15);
        sub_183CDD030();
        swift_allocError();
        *unint64_t v17 = v16;
        swift_unknownObjectRetain();
        swift_willThrow();
        sub_183CE2004(v3);
        j__swift_unknownObjectRelease(v8, v7, v5, v4, v9, 1LL);
        return v4;
      }

      if (v5 == v6)
      {
LABEL_20:
        uint64_t v11 = *(void *)(result + 32);
        goto LABEL_21;
      }

      if (v5 < v6)
      {
        int v10 = *(unsigned __int8 *)(v7 + v5);
        uint64_t v11 = v5 + 1;
        if (v5 + 1 == v6)
        {
          if (!*(_BYTE *)(v7 + v5))
          {
            uint64_t v11 = v4 >> 1;
LABEL_21:
            uint64_t v19 = swift_unknownObjectRetain();
            sub_183CECEA8(v19, v7, v11, v4);
            unint64_t v4 = v20;
            sub_183CE2004(v3);
            return v4;
          }

uint64_t sub_183CED738(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_183CED74C(a1, a2, a3);
}

uint64_t sub_183CED74C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v4 = result;
  if (*(void *)result != a2 || *(unsigned __int8 *)(result + 8) != a3)
  {
    uint64_t v13 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1Integer.swift", 31LL, 2, 46LL);
    sub_183CDD030();
    swift_allocError();
    *uint64_t v14 = v13;
    swift_willThrow();
    sub_183CE2004(v4);
    return v3;
  }

  if (*(_BYTE *)(result + 56) == 1)
  {
    uint64_t v6 = *(void *)(result + 32);
    unint64_t v5 = *(void *)(result + 40);
    int64_t v7 = v5 >> 1;
    if (__OFSUB__(v5 >> 1, v6))
    {
      __break(1u);
    }

    else
    {
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      uint64_t v10 = *(void *)(result + 48);
      if ((uint64_t)((v5 >> 1) - v6) < 1)
      {
        uint64_t v15 = 0x8000000183D08FD0LL;
        uint64_t v16 = 0xD00000000000001FLL;
        uint64_t v17 = 55LL;
LABEL_16:
        uint64_t v3 = sub_183CDDA64(v16, v15, (uint64_t)"AppleKeyStore/ASN1Integer.swift", 31LL, 2, v17);
        sub_183CDD030();
        swift_allocError();
        *int v18 = v3;
        swift_unknownObjectRetain();
        swift_willThrow();
        sub_183CE2004(v4);
        j__swift_unknownObjectRelease(v9, v8, v6, v5, v10, 1LL);
        return v3;
      }

      if (v6 == v7) {
        goto LABEL_13;
      }
      if (v6 < v7)
      {
        if (v6 + 1 == v7) {
          goto LABEL_13;
        }
        if (v6 + 1 < v7)
        {
          int v11 = *(char *)(v8 + v6 + 1);
          if (*(_BYTE *)(v8 + v6))
          {
            goto LABEL_19;
          }

          if ((v11 & 0x80000000) == 0)
          {
LABEL_19:
            uint64_t v16 = 0xD00000000000002ELL;
            uint64_t v15 = 0x8000000183D09020LL;
            uint64_t v17 = 67LL;
            goto LABEL_16;
          }

uint64_t sub_183CED994(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3 = result;
  if (*(void *)result != a2 || *(unsigned __int8 *)(result + 8) != a3)
  {
    unint64_t v4 = sub_183CDD9F8((uint64_t)"AppleKeyStore/ASN1Integer.swift", 31LL, 2, 46LL);
    sub_183CDD030();
    swift_allocError();
    *uint64_t v12 = v4;
    swift_willThrow();
    sub_183CE2004(v3);
    return v4;
  }

  if (*(_BYTE *)(result + 56) == 1)
  {
    int64_t v5 = *(void *)(result + 32);
    unint64_t v4 = *(void *)(result + 40);
    int64_t v6 = v4 >> 1;
    if (__OFSUB__(v4 >> 1, v5))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      uint64_t v9 = *(void *)(result + 48);
      if ((uint64_t)((v4 >> 1) - v5) < 1)
      {
        uint64_t v13 = 0x8000000183D08FD0LL;
        uint64_t v14 = 0xD00000000000001FLL;
        uint64_t v15 = 55LL;
LABEL_13:
        uint64_t v16 = sub_183CDDA64(v14, v13, (uint64_t)"AppleKeyStore/ASN1Integer.swift", 31LL, 2, v15);
        sub_183CDD030();
        swift_allocError();
        *uint64_t v17 = v16;
        swift_unknownObjectRetain();
        swift_willThrow();
        sub_183CE2004(v3);
        j__swift_unknownObjectRelease(v8, v7, v5, v4, v9, 1LL);
        return v4;
      }

      if (v5 == v6)
      {
LABEL_20:
        uint64_t v11 = *(void *)(result + 32);
        goto LABEL_21;
      }

      if (v5 < v6)
      {
        int v10 = *(unsigned __int8 *)(v7 + v5);
        uint64_t v11 = v5 + 1;
        if (v5 + 1 == v6)
        {
          if (!*(_BYTE *)(v7 + v5))
          {
            uint64_t v11 = v4 >> 1;
LABEL_21:
            uint64_t v19 = swift_unknownObjectRetain();
            sub_183CED03C(v19, v7, v11, v4);
            unint64_t v4 = v20;
            sub_183CE2004(v3);
            return v4;
          }

uint64_t sub_183CEDBEC(uint64_t *a1, unint64_t a2, uint64_t (*a3)(_BYTE *, uint64_t))
{
  if (a2)
  {
    unint64_t v5 = sub_183CEDCAC(a2);
    return sub_183CEC7E4(v5, v6, v7, a3);
  }

  else
  {
    uint64_t v9 = *a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CE66F8(0LL, *(void *)(v9 + 16) + 1LL, 1, (char *)v9);
      uint64_t v9 = result;
    }

    unint64_t v11 = *(void *)(v9 + 16);
    unint64_t v10 = *(void *)(v9 + 24);
    if (v11 >= v10 >> 1)
    {
      uint64_t result = (uint64_t)sub_183CE66F8((char *)(v10 > 1), v11 + 1, 1, (char *)v9);
      uint64_t v9 = result;
    }

    *(void *)(v9 + 16) = v11 + 1;
    *(_BYTE *)(v9 + v11 + 32) = 0;
    *a1 = v9;
  }

  return result;
}

unint64_t sub_183CEDCAC(unint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v2 = 71 - __clz(a1);
  uint64_t v3 = v2 >> 3;
  unint64_t result = sub_183CF8788(v2 >> 3, v2 >> 3, 0LL, a1, v2);
  if (v3 >= 1) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v3;
  }
  uint64_t v7 = 8 * v3;
  char v8 = 16 - 8 * v3;
  unint64_t v9 = v3;
  while (1)
  {
    if (v9 < 2) {
      return v6;
    }
    unint64_t v15 = v9;
    uint64_t v10 = v7 - 8;
    if (v7 - 8 < 0) {
      unint64_t v11 = a1 << ((v8 - 8) & 0x38);
    }
    else {
      unint64_t v11 = a1 >> (v10 & 0x38);
    }
    unint64_t v9 = v15 - 1;
    if (v15 - 1 > v3) {
      break;
    }
    BOOL v12 = v7 < 16;
    unint64_t v13 = a1 >> ((v7 + 48) & 0x38);
    if (v12) {
      unint64_t v13 = a1 << (v8 & 0x38);
    }
    char v14 = result ^ v13;
    v8 += 8;
    uint64_t v7 = v10;
    if (v14 < 0) {
      return v15;
    }
  }

  __break(1u);
  return result;
}

BOOL static AKSRefKeyParam.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t AKSRefKeyParam.hash(into:)()
{
  return sub_183D05034();
}

uint64_t AKSRefKeyParam.hashValue.getter()
{
  return sub_183D05058();
}

AppleKeyStore::AKSSystemKeyType_optional __swiftcall AKSSystemKeyType.init(rawValue:)(Swift::Int64 rawValue)
{
  char v2 = rawValue - 1;
  *uint64_t v1 = v2;
  return (AppleKeyStore::AKSSystemKeyType_optional)rawValue;
}

AppleKeyStore::AKSSystemKeyType_optional sub_183CEDE50(Swift::Int64 *a1)
{
  return AKSSystemKeyType.init(rawValue:)(*a1);
}

AppleKeyStore::AKSSystemKeyGeneration_optional __swiftcall AKSSystemKeyGeneration.init(rawValue:)( Swift::Int64 rawValue)
{
  unsigned int v2 = 0x2010003u >> (8 * rawValue);
  *uint64_t v1 = v2;
  return (AppleKeyStore::AKSSystemKeyGeneration_optional)rawValue;
}

uint64_t AKSSystemKeyGeneration.rawValue.getter()
{
  return *v0 + 1LL;
}

uint64_t sub_183CEDE88()
{
  return sub_183D0504C();
}

AppleKeyStore::AKSSystemKeyGeneration_optional sub_183CEDEB4(Swift::Int64 *a1)
{
  return AKSSystemKeyGeneration.init(rawValue:)(*a1);
}

void sub_183CEDEBC(void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

uint64_t sub_183CEDECC()
{
  return sub_183D05058();
}

uint64_t sub_183CEDF10()
{
  return sub_183D05058();
}

uint64_t AKSHandle.rawValue.getter()
{
  return *v0;
}

uint64_t AKSHandle.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AKSHandle.systemKeychain.getter(_DWORD *a1@<X8>)
{
  *a1 = -6;
}

void static AKSHandle.uuidOnly.getter(_DWORD *a1@<X8>)
{
  *a1 = -5;
}

void static AKSHandle.macosRoot.getter(_DWORD *a1@<X8>)
{
  *a1 = -4;
}

void static AKSHandle.session.getter(_DWORD *a1@<X8>)
{
  *a1 = -3;
}

void static AKSHandle.backup.getter(_DWORD *a1@<X8>)
{
  *a1 = -2;
}

void static AKSHandle.bad.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

void static AKSHandle.device.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_183CEDFB0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_183CEDFC0(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

AppleKeyStore::AKSKeyClass_optional __swiftcall AKSKeyClass.init(rawValue:)(Swift::Int64 rawValue)
{
  char v2 = 0;
  char v3 = 2;
  switch(rawValue)
  {
    case 0LL:
      goto LABEL_3;
    case 1LL:
      char v2 = 1;
LABEL_3:
      char v3 = v2;
      goto LABEL_4;
    case 2LL:
LABEL_4:
      *uint64_t v1 = v3;
      break;
    case 3LL:
      *uint64_t v1 = 3;
      break;
    case 4LL:
      *uint64_t v1 = 4;
      break;
    case 5LL:
      *uint64_t v1 = 5;
      break;
    case 6LL:
      *uint64_t v1 = 6;
      break;
    case 7LL:
      *uint64_t v1 = 7;
      break;
    case 8LL:
      *uint64_t v1 = 8;
      break;
    case 9LL:
      *uint64_t v1 = 9;
      break;
    case 10LL:
      *uint64_t v1 = 10;
      break;
    case 11LL:
      *uint64_t v1 = 11;
      break;
    case 12LL:
      *uint64_t v1 = 12;
      break;
    case 13LL:
      *uint64_t v1 = 13;
      break;
    case 14LL:
      *uint64_t v1 = 14;
      break;
    case 15LL:
      *uint64_t v1 = 15;
      break;
    case 16LL:
      *uint64_t v1 = 16;
      break;
    case 17LL:
      *uint64_t v1 = 17;
      break;
    case 18LL:
      *uint64_t v1 = 18;
      break;
    case 19LL:
      *uint64_t v1 = 19;
      break;
    default:
      *uint64_t v1 = 20;
      break;
  }

  return (AppleKeyStore::AKSKeyClass_optional)rawValue;
}

uint64_t AKSKeyClass.rawValue.getter()
{
  return *v0;
}

uint64_t sub_183CEE0E4()
{
  return sub_183D05058();
}

uint64_t sub_183CEE128()
{
  return sub_183D0504C();
}

uint64_t sub_183CEE150()
{
  return sub_183D05058();
}

AppleKeyStore::AKSKeyClass_optional sub_183CEE190(Swift::Int64 *a1)
{
  return AKSKeyClass.init(rawValue:)(*a1);
}

void sub_183CEE198(void *a1@<X8>)
{
  *a1 = *v1;
}

AppleKeyStore::AKSRefKeyType_optional __swiftcall AKSRefKeyType.init(rawValue:)(Swift::Int64 rawValue)
{
  char v2 = 1;
  switch(rawValue)
  {
    case 0LL:
      char v2 = 0;
      goto LABEL_3;
    case 1LL:
LABEL_3:
      *uint64_t v1 = v2;
      break;
    case 2LL:
      *uint64_t v1 = 2;
      break;
    case 3LL:
      *uint64_t v1 = 3;
      break;
    case 4LL:
      *uint64_t v1 = 4;
      break;
    case 5LL:
      *uint64_t v1 = 5;
      break;
    case 6LL:
      *uint64_t v1 = 6;
      break;
    case 7LL:
      *uint64_t v1 = 7;
      break;
    case 8LL:
      *uint64_t v1 = 8;
      break;
    case 9LL:
      *uint64_t v1 = 9;
      break;
    case 10LL:
      *uint64_t v1 = 10;
      break;
    default:
      if (rawValue == 0xFFFFFFFFLL) {
        char v3 = 11;
      }
      else {
        char v3 = 12;
      }
      *uint64_t v1 = v3;
      break;
  }

  return (AppleKeyStore::AKSRefKeyType_optional)rawValue;
}

uint64_t AKSRefKeyType.rawValue.getter()
{
  return qword_183D0D098[*v0];
}

BOOL sub_183CEE270(char *a1, char *a2)
{
  return qword_183D0D098[*a1] == qword_183D0D098[*a2];
}

uint64_t sub_183CEE294()
{
  return sub_183D05058();
}

uint64_t sub_183CEE2E0()
{
  return sub_183D0504C();
}

uint64_t sub_183CEE314()
{
  return sub_183D05058();
}

AppleKeyStore::AKSRefKeyType_optional sub_183CEE35C(Swift::Int64 *a1)
{
  return AKSRefKeyType.init(rawValue:)(*a1);
}

void sub_183CEE364(void *a1@<X8>)
{
  *a1 = qword_183D0D098[*v1];
}

uint64_t AKSRefKeyOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t AKSRefKeyOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AKSRefKeyOptions.none.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

void static AKSRefKeyOptions.osBound.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static AKSRefKeyOptions.intermediate.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static AKSRefKeyOptions.satori.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static AKSRefKeyOptions.userclient.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void static AKSRefKeyOptions.ecCompactable.getter(void *a1@<X8>)
{
  *a1 = 16LL;
}

void static AKSRefKeyOptions.nonce.getter(void *a1@<X8>)
{
  *a1 = 32LL;
}

void static AKSRefKeyOptions.anonymous.getter(void *a1@<X8>)
{
  *a1 = 64LL;
}

void static AKSRefKeyOptions.trng.getter(void *a1@<X8>)
{
  *a1 = 128LL;
}

void static AKSRefKeyOptions.sealedHashesBound.getter(void *a1@<X8>)
{
  *a1 = 256LL;
}

void static AKSRefKeyOptions.completeSeed.getter(void *a1@<X8>)
{
  *a1 = 0x200000000000000LL;
}

void static AKSRefKeyOptions.sealData.getter(void *a1@<X8>)
{
  *a1 = 0x400000000000000LL;
}

void static AKSRefKeyOptions.forceEffective.getter(void *a1@<X8>)
{
  *a1 = 0x800000000000000LL;
}

void static AKSRefKeyOptions.pkaSkipPubGen.getter(void *a1@<X8>)
{
  *a1 = 0x1000000000000000LL;
}

void static AKSRefKeyOptions.pkaUpdatedSeed.getter(void *a1@<X8>)
{
  *a1 = 0x2000000000000000LL;
}

void static AKSRefKeyOptions.systemKey.getter(void *a1@<X8>)
{
  *a1 = 0x4000000000000000LL;
}

void static AKSRefKeyOptions.uidProtection.getter(void *a1@<X8>)
{
  *a1 = 0x8000000000000000LL;
}

uint64_t sub_183CEE454@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_183CED290(a1, a2);
}

uint64_t AKSRefKeyParams.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t AKSRefKeyParams.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0LL;
  return result;
}

void sub_183CEE498(char *a1)
{
  char v14 = *a1;
  sub_183CF8F6C((uint64_t)&v14);
  if (!v1)
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    swift_unknownObjectRetain();
    v13[0] = v6;
    v13[1] = v7;
    int v13[2] = v8;
    v13[3] = v9;
    v13[4] = sub_183CEC418();
    uint64_t v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    swift_unknownObjectRetain();
    sub_183CDC7AC((uint64_t)v13);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }

BOOL sub_183CEE5A4(char *a1)
{
  char v15 = *a1;
  sub_183CF8F6C((uint64_t)&v15);
  if (!v2)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    unint64_t v9 = v5;
    uint64_t v10 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_183CDCDA4(v7, v8, v9, v10, (uint64_t)v16);
    swift_bridgeObjectRelease();
    v20[0] = v17;
    v20[1] = v18;
    __int128 v11 = v17;
    __int128 v12 = v18;
    sub_183CE1F44((uint64_t)v20);
    sub_183CE20C8(v11, *((uint64_t *)&v11 + 1), v12, *((unint64_t *)&v12 + 1), (uint64_t)v19);
    uint64_t v13 = sub_183CED74C((uint64_t)v19, 2LL, 0);
    sub_183CE1FDC((uint64_t)v20);
    swift_unknownObjectRelease();
    sub_183CDD218((uint64_t)v16);
    return v13 != 0;
  }

  return v6;
}

void sub_183CEE744(char *a1)
{
  char v14 = *a1;
  sub_183CF8F6C((uint64_t)&v14);
  if (!v1)
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    swift_unknownObjectRetain();
    v13[0] = v6;
    v13[1] = v7;
    int v13[2] = v8;
    v13[3] = v9;
    v13[4] = sub_183CEC418();
    uint64_t v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    swift_unknownObjectRetain();
    sub_183CDC7AC((uint64_t)v13);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }

uint64_t sub_183CEE84C(char *a1)
{
  char v15 = *a1;
  sub_183CF8F6C((uint64_t)&v15);
  if (!v2)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    unint64_t v9 = v6;
    uint64_t v10 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_183CDCDA4(v7, v8, v9, v10, (uint64_t)v16);
    swift_bridgeObjectRelease();
    v20[0] = v17;
    v20[1] = v18;
    uint64_t v13 = *((void *)&v17 + 1);
    uint64_t v12 = v17;
    __int128 v14 = v18;
    sub_183CE1F44((uint64_t)v20);
    sub_183CE20C8(v12, v13, v14, *((unint64_t *)&v14 + 1), (uint64_t)v19);
    uint64_t v3 = sub_183CED74C((uint64_t)v19, 2LL, 0);
    sub_183CE1FDC((uint64_t)v20);
    swift_unknownObjectRelease();
    sub_183CDD218((uint64_t)v16);
  }

  return v3;
}

void sub_183CEE9E0(_BYTE *a1, uint64_t a2)
{
  int v4 = *a1;
  LOBYTE(v57) = *a1;
  sub_183CF8F6C((uint64_t)&v57);
  if (!v2)
  {
    uint64_t v9 = v5;
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v37 = v6;
    if (v4)
    {
      if (v4 != 1)
      {
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        char v15 = sub_183CF8904();
        __int128 v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        uint64_t v23 = v17;
        uint64_t v24 = v19;
        uint64_t v41 = 0LL;
        uint64_t v35 = 0LL;
        char v36 = 0;
        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v32 = 0LL;
        uint64_t v25 = 0LL;
        uint64_t v26 = 0LL;
LABEL_11:
        v55[0] = v9;
        v55[1] = v37;
        v55[2] = v10;
        v55[3] = v11;
        v55[4] = v15;
        v55[5] = v23;
        v55[6] = v24;
        v55[7] = v21;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        sub_183CDC7AC((uint64_t)v55);
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        sub_183CDD078(v26, 0LL, v25, v32, v33, v34, v35, v36, v41);
        return;
      }

      uint64_t v12 = 17LL;
    }

    else
    {
      uint64_t v12 = 16LL;
    }

    unint64_t v13 = (2LL * *(void *)(a2 + 16)) | 1;
    swift_unknownObjectRetain();
    uint64_t v14 = swift_bridgeObjectRetain();
    sub_183CE20C8(v14, a2 + 32, 0LL, v13, (uint64_t)&v42);
    uint64_t v39 = v42;
    uint64_t v40 = v43;
    uint64_t v38 = v44;
    uint64_t v32 = v45;
    uint64_t v33 = v46;
    uint64_t v34 = v47;
    uint64_t v35 = v48;
    char v36 = v49;
    uint64_t v41 = v50;
    swift_bridgeObjectRelease();
    uint64_t v22 = swift_bridgeObjectRetain();
    sub_183CE20C8(v22, a2 + 32, 0LL, v13, (uint64_t)&v51);
    uint64_t v57 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
    unint64_t v27 = v51;
    char v28 = v52;
    sub_183CDD0CC((uint64_t)&v53, (uint64_t)v54);
    sub_183CDD0CC((uint64_t)v54, (uint64_t)v56);
    char v29 = v56[40];
    sub_183CF9640((uint64_t)&v51);
    sub_183CE0748(v27, v28, (v29 & 1) == 0, (uint64_t)&v57, (uint64_t)&v51);
    sub_183CE2004((uint64_t)&v51);
    char v15 = v57;
    uint64_t v30 = *((void *)v57 + 2);
    sub_183CE2004((uint64_t)&v51);
    swift_bridgeObjectRelease();
    if (v39 == v12 && !(_DWORD)v40)
    {
      uint64_t v24 = 0LL;
      uint64_t v23 = v15 + 32;
      uint64_t v21 = (2 * v30) | 1;
      uint64_t v25 = v38;
      uint64_t v26 = v12;
      goto LABEL_11;
    }

    sub_183CDD24C();
    swift_allocError();
    _BYTE *v31 = 10;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_183CDD078(v39, v40, v38, v32, v33, v34, v35, v36, v41);
  }

uint64_t sub_183CEEE50(_BYTE *a1)
{
  LOBYTE(v25) = *a1;
  sub_183CF8F6C((uint64_t)&v25);
  if (v2) {
    return v3;
  }
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  uint64_t v10 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_183CDCDA4(v7, v8, v9, v10, (uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  v36[0] = v27;
  v36[1] = v28;
  uint64_t v13 = *((void *)&v27 + 1);
  uint64_t v12 = v27;
  __int128 v14 = v28;
  sub_183CE1F44((uint64_t)v36);
  sub_183CF8810(v12, v13, v14, *((unint64_t *)&v14 + 1));
  sub_183CE1FDC((uint64_t)v36);
  uint64_t v15 = (uint64_t)v25;
  uint64_t v16 = (uint64_t)(v25 + 32);
  unint64_t v17 = (2LL * *((void *)v25 + 2)) | 1;
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_183CE20C8(v18, v16, 0LL, v17, (uint64_t)&v29);
  swift_bridgeObjectRelease();
  if (v29 != 4 || v30)
  {
    uint64_t v19 = 0LL;
    unint64_t v20 = (2LL * *(void *)(v15 + 16)) | 1;
LABEL_11:
    sub_183D04FD4();
    swift_unknownObjectRetain_n();
    uint64_t v22 = swift_dynamicCastClass();
    if (!v22)
    {
      swift_unknownObjectRelease();
      uint64_t v22 = MEMORY[0x18961AFE8];
    }

    uint64_t v23 = *(void *)(v22 + 16);
    swift_release();
    if (__OFSUB__(v20 >> 1, v19))
    {
      __break(1u);
    }

    else if (v23 == (v20 >> 1) - v19)
    {
      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        uint64_t v3 = v24;
      }

      else
      {
        swift_unknownObjectRelease();
        uint64_t v3 = MEMORY[0x18961AFE8];
      }

      goto LABEL_18;
    }

    swift_unknownObjectRelease();
LABEL_10:
    sub_183CF84D8(v15, v16, v19, v20);
    uint64_t v3 = v21;
LABEL_18:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_183CE2004((uint64_t)&v29);
    sub_183CDD218((uint64_t)v26);
    return v3;
  }

  uint64_t result = swift_bridgeObjectRelease();
  if (v35 == 1)
  {
    uint64_t v19 = v33;
    unint64_t v20 = v34;
    uint64_t v15 = v31;
    uint64_t v16 = v32;
    swift_unknownObjectRetain();
    if ((v20 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

char *sub_183CEF128()
{
  unint64_t v6 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  uint64_t v2 = *(char **)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_183CE109C(0x11uLL, 0, 1, &v6, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v6;
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    *uint64_t v4 = 22;
    swift_willThrow();
    MEMORY[0x186E26038](v1);
  }

  return v3;
}

uint64_t AKSRefKeyParams.deinit()
{
  return v0;
}

uint64_t AKSRefKeyParams.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_183CEF230(int *a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = MEMORY[0x18961AFE8];
  __int128 v14 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  swift_bridgeObjectRetain();
  sub_183CE109C(0x11uLL, 0, 1, &v14, a2);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    *unint64_t v6 = 25;
    swift_willThrow();
    return MEMORY[0x186E26038](v2);
  }

  else
  {
    uint64_t v8 = sub_183D04E48();
    *(void *)(v8 + 16) = 0x8000LL;
    bzero((void *)(v8 + 32), 0x8000uLL);
    uint64_t v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6649E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183D0B990;
    *(void *)(inited + 32) = v4;
    uint64_t v12 = 0LL;
    uint64_t v10 = sub_183CFAB38(0x2Bu, inited, (uint64_t)v14, &v12, &v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = v13;
    if ((_DWORD)v10)
    {
      swift_bridgeObjectRelease();
      sub_183CDD24C();
      swift_allocError();
      sub_183CED2E4(v10, v11);
      return swift_willThrow();
    }

    else if (!v13)
    {
      return v5;
    }
  }

  return result;
}

uint64_t sub_183CEF418(uint64_t a1)
{
  uint64_t v5 = a1 + 32;
  uint64_t v6 = (2LL * *(void *)(a1 + 16)) | 1;
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_183CE20C8(v7, v5, 0LL, v6, (uint64_t)&v32);
  uint64_t v8 = v1;
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_183CDD24C();
    swift_allocError();
    _BYTE *v9 = 25;
    swift_willThrow();
    MEMORY[0x186E26038](v1);
    return v8;
  }

  if (v32 == 16 && v33 == 0)
  {
    if ((v39 & 1) != 0)
    {
      __break(1u);
      swift_unknownObjectRelease();
      uint64_t result = swift_unexpectedError();
      __break(1u);
      return result;
    }

    unint64_t v3 = v34;
    unint64_t v4 = v35;
    uint64_t v2 = v36;
    uint64_t v11 = v37;
    uint64_t v12 = v38;
    v31[0] = v34;
    v31[1] = v35;
    v31[2] = v36;
    v31[3] = v37;
    v31[4] = v38;
    j__swift_unknownObjectRetain(v34, v35, v36, v37, v38, 0LL);
    swift_unknownObjectRetain();
    uint64_t v30 = sub_183CEC64C((uint64_t)v31, 4LL, 0);
    uint64_t v41 = v13;
    uint64_t v6 = v14;
    uint64_t v27 = v15;
    uint64_t v28 = sub_183CEC64C((uint64_t)v31, 4LL, 0);
    uint64_t v29 = v16;
    uint64_t v26 = v17;
    unint64_t v19 = v18;
    sub_183CDE090((uint64_t)v40);
    uint64_t v20 = v40[8];
    j__swift_unknownObjectRelease(v3, v4, v2, v11, v12, 0LL);
    sub_183CE1F70(v40);
    if (!v20)
    {
      swift_unknownObjectRelease();
      unint64_t v4 = v6;
      if ((v6 & 1) == 0)
      {
        uint64_t v6 = v30;
        swift_unknownObjectRetain();
        unint64_t v3 = v19;
        uint64_t v2 = v41;
        goto LABEL_12;
      }

      sub_183D04FD4();
      uint64_t v6 = v30;
      swift_unknownObjectRetain_n();
      uint64_t v22 = swift_dynamicCastClass();
      unint64_t v3 = v19;
      uint64_t v2 = v41;
      if (!v22)
      {
        swift_unknownObjectRelease();
        uint64_t v22 = MEMORY[0x18961AFE8];
      }

      uint64_t v23 = *(void *)(v22 + 16);
      swift_release();
      if (!__OFSUB__(v4 >> 1, v2))
      {
        if (v23 != (v4 >> 1) - v2) {
          goto LABEL_33;
        }
        uint64_t v8 = swift_dynamicCastClass();
        if (!v8)
        {
          swift_unknownObjectRelease();
          uint64_t v8 = MEMORY[0x18961AFE8];
        }

        goto LABEL_19;
      }

      goto LABEL_31;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_31:
  __break(1u);
  do
  {
    __break(1u);
LABEL_33:
    swift_unknownObjectRelease();
LABEL_12:
    sub_183CF84D8(v6, v27, v2, v4);
    uint64_t v8 = v21;
LABEL_19:
    swift_unknownObjectRelease();
    if ((v3 & 1) == 0)
    {
      swift_unknownObjectRetain();
LABEL_21:
      sub_183CF84D8(v28, v26, v29, v3);
      goto LABEL_28;
    }

    sub_183D04FD4();
    swift_unknownObjectRetain_n();
    uint64_t v24 = swift_dynamicCastClass();
    if (!v24)
    {
      swift_unknownObjectRelease();
      uint64_t v24 = MEMORY[0x18961AFE8];
    }

    uint64_t v2 = *(void *)(v24 + 16);
    swift_release();
  }

  while (__OFSUB__(v3 >> 1, v29));
  if (v2 != (v3 >> 1) - v29)
  {
    swift_unknownObjectRelease();
    goto LABEL_21;
  }

  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_28:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  sub_183CE2004((uint64_t)&v32);
  return v8;
}

char *sub_183CEF798(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (!a5 || (v5 = *(void *)(a5 + 16)) == 0 || (swift_bridgeObjectRetain(), (unint64_t v6 = *(void *)(v5 + 16)) == 0))
  {
    uint64_t v8 = 0LL;
LABEL_79:
    if (qword_18C664620 != -1) {
      goto LABEL_112;
    }
    goto LABEL_80;
  }

  unint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v79 = v5 + 32;
  uint64_t v80 = v5;
  while (1)
  {
    if (v7 >= v6) {
      goto LABEL_103;
    }
    uint64_t v10 = (uint64_t *)(v79 + (v7 << 6));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v14 = v10[2];
    unint64_t v13 = v10[3];
    __int128 v86 = *((_OWORD *)v10 + 2);
    __int128 v15 = *((_OWORD *)v10 + 3);
    if (!v8) {
      uint64_t v8 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v100 = v8;
    unint64_t v16 = *((void *)v8 + 2);
    uint64_t v87 = v14;
    uint64_t v88 = v12;
    unint64_t v83 = v7;
    uint64_t v84 = v11;
    __int128 v82 = v15;
    unint64_t v81 = v13;
    if (!v16)
    {
LABEL_34:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      int64_t v19 = v16;
      int64_t v27 = v16;
      goto LABEL_35;
    }

    int64_t v17 = v13 >> 1;
    uint64_t v18 = (v13 >> 1) - v14;
    if (__OFSUB__(v13 >> 1, v14)) {
      goto LABEL_109;
    }
    int64_t v19 = 0LL;
    uint64_t v95 = v12 + v14;
    while (1)
    {
      uint64_t v20 = &v8[64 * v19 + 32];
      uint64_t v21 = *((void *)v20 + 2);
      uint64_t v22 = *((void *)v20 + 3) >> 1;
      if (__OFSUB__(v22, v21)) {
        goto LABEL_100;
      }
      if (v22 - v21 != v18) {
        goto LABEL_12;
      }
      if (!v18) {
        break;
      }
      uint64_t v23 = *((void *)v20 + 1);
      if (v23 + v21 == v95 || v21 == v22) {
        break;
      }
      if (v21 >= v22) {
        goto LABEL_108;
      }
      uint64_t v24 = v21 + 1;
      int v25 = *(unsigned __int8 *)(v23 + v21);
      if (v21 == v22) {
        break;
      }
      uint64_t v26 = v14;
      if (v17 != v14)
      {
        while (v26 >= v14 && v26 < v17)
        {
          if (v22 == v24) {
            goto LABEL_28;
          }
          if (v24 >= v22) {
            goto LABEL_93;
          }
          int v25 = *(unsigned __int8 *)(v23 + v24++);
          if (v17 == ++v26) {
            goto LABEL_12;
          }
        }

        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }

LABEL_28:
    int64_t v27 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      goto LABEL_110;
    }
    uint64_t v85 = (v13 >> 1) - v14;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if (v27 != v16)
    {
      uint64_t v37 = v85;
      while (1)
      {
        if (v27 >= v16) {
          goto LABEL_95;
        }
        uint64_t v38 = v8 + 32;
        char v39 = &v8[64 * v27 + 32];
        uint64_t v40 = *((void *)v39 + 2);
        unint64_t v41 = *((void *)v39 + 3);
        int64_t v42 = v41 >> 1;
        if (__OFSUB__(v41 >> 1, v40)) {
          goto LABEL_96;
        }
        uint64_t v43 = *((void *)v39 + 1);
        if ((v41 >> 1) - v40 != v37) {
          goto LABEL_68;
        }
        if (v37 && v43 + v40 != v95 && v40 != v42)
        {
          if (v40 >= v42) {
            goto LABEL_107;
          }
          uint64_t v44 = v40 + 1;
          int v45 = *(unsigned __int8 *)(v43 + v40);
          if (v40 != v42) {
            break;
          }
        }

LABEL_75:
        BOOL v32 = __OFADD__(v27++, 1LL);
        if (v32) {
          goto LABEL_97;
        }
        unint64_t v16 = *((void *)v8 + 2);
        if (v27 == v16) {
          goto LABEL_31;
        }
      }

      uint64_t v46 = v14;
      if (v17 != v14)
      {
        while (v46 >= v14 && v46 < v17)
        {
          if (v42 == v44) {
            goto LABEL_75;
          }
          if (v44 >= v42) {
            goto LABEL_98;
          }
          int v45 = *(unsigned __int8 *)(v43 + v44++);
          if (v17 == ++v46) {
            goto LABEL_68;
          }
        }

        goto LABEL_94;
      }

LABEL_68:
      if (v19 != v27)
      {
        if (v19 >= v16) {
          goto LABEL_101;
        }
        uint64_t v47 = &v38[64 * v19];
        uint64_t v48 = *((void *)v47 + 2);
        uint64_t v49 = *((void *)v47 + 3);
        __int128 v96 = *((_OWORD *)v47 + 2);
        uint64_t v89 = *((void *)v47 + 7);
        uint64_t v90 = *((void *)v47 + 6);
        uint64_t v50 = *(void *)v39;
        unint64_t v51 = &v38[64 * v27];
        __int128 v98 = *((_OWORD *)v51 + 2);
        uint64_t v93 = *((void *)v51 + 7);
        uint64_t v94 = *((void *)v51 + 6);
        __int128 v92 = *(_OWORD *)v47;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v91 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = sub_183CF84C4((uint64_t)v8);
        }
        char v52 = v8;
        v8 += 32;
        uint64_t v53 = &v8[64 * v19];
        *(void *)uint64_t v53 = v50;
        *((void *)v53 + 1) = v43;
        *((void *)v53 + 2) = v40;
        *((void *)v53 + 3) = v41;
        *((_OWORD *)v53 + 2) = v98;
        *((void *)v53 + 6) = v94;
        *((void *)v53 + 7) = v93;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v54 = &v8[64 * v27];
        *(_OWORD *)uint64_t v54 = v92;
        *((void *)v54 + 2) = v48;
        *((void *)v54 + 3) = v91;
        *((_OWORD *)v54 + 2) = v96;
        *((void *)v54 + 6) = v90;
        *((void *)v54 + 7) = v89;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v8 = v52;
        uint64_t v14 = v87;
        uint64_t v12 = v88;
        uint64_t v37 = v85;
      }

      BOOL v32 = __OFADD__(v19++, 1LL);
      if (v32) {
        goto LABEL_99;
      }
      goto LABEL_75;
    }

    int64_t v27 = v16;
LABEL_31:
    if (v27 < v19) {
      goto LABEL_105;
    }
    if (v19 < 0) {
      break;
    }
LABEL_35:
    int64_t v28 = v19 - v27;
    if (__OFADD__(v27, v19 - v27)) {
      goto LABEL_104;
    }
    uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v19 > *((void *)v8 + 3) >> 1)
    {
      if (v27 <= v19) {
        int64_t v30 = v19;
      }
      else {
        int64_t v30 = v27;
      }
      uint64_t v8 = sub_183CE67E0(isUniquelyReferenced_nonNull_native, v30, 1, v8);
    }

    swift_arrayDestroy();
    if (v27 != v19)
    {
      memmove(&v8[64 * v19 + 32], &v8[64 * v27 + 32], (*((void *)v8 + 2) - v27) << 6);
      uint64_t v31 = *((void *)v8 + 2);
      BOOL v32 = __OFADD__(v31, v28);
      uint64_t v33 = v31 + v28;
      if (v32) {
        goto LABEL_111;
      }
      *((void *)v8 + 2) = v33;
LABEL_47:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v9 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_183CE67E0(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
      }
      unint64_t v35 = *((void *)v8 + 2);
      unint64_t v34 = *((void *)v8 + 3);
      if (v35 >= v34 >> 1) {
        uint64_t v8 = sub_183CE67E0((char *)(v34 > 1), v35 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v35 + 1;
      uint64_t v36 = &v8[64 * v35];
      *((void *)v36 + 4) = v84;
      *((void *)v36 + 5) = v88;
      *((void *)v36 + 6) = v87;
      *((void *)v36 + 7) = v81;
      *((_OWORD *)v36 + 4) = v86;
      *((_OWORD *)v36 + 5) = v82;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v100 = v8;
      goto LABEL_5;
    }

    uint64_t v100 = v8;
    if (v8) {
      goto LABEL_47;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v9 = v80;
LABEL_5:
    unint64_t v7 = v83 + 1;
    unint64_t v6 = *(void *)(v9 + 16);
    if (v83 + 1 == v6) {
      goto LABEL_79;
    }
  }

LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  swift_once();
LABEL_80:
  uint64_t v55 = qword_18C6690A8;
  uint64_t v56 = qword_18C6690B0;
  uint64_t v57 = qword_18C6690B8;
  unint64_t v58 = unk_18C6690C0;
  uint64_t v59 = swift_unknownObjectRetain();
  uint64_t v60 = sub_183CEC4B8(v59, a2, a3, a4);
  char v64 = v78;
  if (!v78)
  {
    unint64_t v66 = v60;
    uint64_t v67 = v61;
    uint64_t v97 = v63;
    uint64_t v99 = v62;
    __int128 v68 = (char *)MEMORY[0x18961AFE8];
    if (v8) {
      __int128 v68 = v8;
    }
    uint64_t v100 = v68;
    swift_unknownObjectRetain();
    uint64_t v69 = sub_183CF89BC((uint64_t)&v100, v56, v57, v58);
    int64_t v70 = *((void *)v100 + 2);
    if (v70 < v69)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v69, v70);
      char v64 = v100;
      if (!v100)
      {
LABEL_90:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return v64;
      }

      uint64_t v95 = v67;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_87:
        unint64_t v72 = *((void *)v64 + 2);
        unint64_t v71 = *((void *)v64 + 3);
        if (v72 >= v71 >> 1) {
          char v64 = sub_183CE67E0((char *)(v71 > 1), v72 + 1, 1, v64);
        }
        *((void *)v64 + 2) = v72 + 1;
        char v73 = &v64[64 * v72];
        *((void *)v73 + 4) = v55;
        *((void *)v73 + 5) = v56;
        *((void *)v73 + 6) = v57;
        *((void *)v73 + 7) = v58;
        *((void *)v73 + 8) = v66;
        *((void *)v73 + 9) = v95;
        *((void *)v73 + 10) = v99;
        *((void *)v73 + 11) = v97;
        goto LABEL_90;
      }
    }

    char v64 = sub_183CE67E0(0LL, *((void *)v64 + 2) + 1LL, 1, v64);
    goto LABEL_87;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183CDD24C();
  swift_allocError();
  *__int128 v65 = 25;
  swift_willThrow();
  MEMORY[0x186E26038]();
  return v64;
}

uint64_t AKSRefKey.__allocating_init(handle:key_class:key_type:params:)( int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  AKSRefKey.init(handle:key_class:key_type:params:)(a1, a2, a3, a4);
  return v8;
}

uint64_t AKSRefKey.init(handle:key_class:key_type:params:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  int v8 = *a1;
  *(_OWORD *)(v4 + 24) = xmmword_183D0A7C0;
  *(_DWORD *)(v4 + 16) = v8;
  if (qword_18C6646B0 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_183CEF798(qword_18C6692E8, qword_18C6692F0, qword_18C6692F8, unk_18C669300, a4);
  uint64_t v10 = v5;
  if (v5)
  {
    swift_release();
    swift_release();
    return v6;
  }

  uint64_t v11 = v9;
  uint64_t v56 = v9;
  if (qword_18C664628 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_18C6690C8;
  uint64_t v13 = qword_18C6690D0;
  uint64_t v15 = qword_18C6690D8;
  unint64_t v14 = qword_18C6690E0;
  int64_t v17 = 0LL;
  unint64_t v16 = sub_183CEC418();
  uint64_t v47 = v19;
  uint64_t v49 = v18;
  uint64_t v51 = v20;
  uint64_t v53 = v16;
  if (!v11) {
    uint64_t v56 = (char *)MEMORY[0x18961AFE8];
  }
  swift_unknownObjectRetain();
  uint64_t v21 = sub_183CF89BC((uint64_t)&v56, v13, v15, v14);
  int64_t v22 = *((void *)v56 + 2);
  if (v22 < v21)
  {
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_18;
  }

  sub_183CF8CD4(v21, v22);
  uint64_t v10 = v56;
  if (v56)
  {
    uint64_t v46 = 0LL;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_183CE67E0(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    }
    unint64_t v24 = *((void *)v10 + 2);
    unint64_t v23 = *((void *)v10 + 3);
    if (v24 >= v23 >> 1) {
      uint64_t v10 = sub_183CE67E0((char *)(v23 > 1), v24 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v24 + 1;
    int v25 = &v10[64 * v24];
    *((void *)v25 + 4) = v12;
    *((void *)v25 + 5) = v13;
    *((void *)v25 + 6) = v15;
    *((void *)v25 + 7) = v14;
    *((void *)v25 + 8) = v53;
    *((void *)v25 + 9) = v51;
    *((void *)v25 + 10) = v49;
    *((void *)v25 + 11) = v47;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v56 = v10;
    int64_t v17 = v5;
  }

  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  if (qword_18C664670 != -1) {
    goto LABEL_33;
  }
LABEL_18:
  uint64_t v26 = qword_18C6691E8;
  uint64_t v27 = qword_18C6691F0;
  uint64_t v29 = qword_18C6691F8;
  unint64_t v28 = qword_18C669200;
  int64_t v30 = sub_183CEC418();
  uint64_t v48 = v33;
  uint64_t v50 = v32;
  uint64_t v52 = v34;
  uint64_t v54 = v30;
  unint64_t v35 = (char *)MEMORY[0x18961AFE8];
  if (v10) {
    unint64_t v35 = v10;
  }
  uint64_t v56 = v35;
  swift_unknownObjectRetain();
  uint64_t v36 = sub_183CF89BC((uint64_t)&v56, v27, v29, v28);
  int64_t v37 = *((void *)v56 + 2);
  if (v37 < v36)
  {
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v38 = 0LL;
  sub_183CF8CD4(v36, v37);
  int64_t v17 = v56;
  if (v56)
  {
    uint64_t v46 = 0LL;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_25:
      unint64_t v40 = *((void *)v17 + 2);
      unint64_t v39 = *((void *)v17 + 3);
      if (v40 >= v39 >> 1) {
        int64_t v17 = sub_183CE67E0((char *)(v39 > 1), v40 + 1, 1, v17);
      }
      *((void *)v17 + 2) = v40 + 1;
      unint64_t v41 = &v17[64 * v40];
      *((void *)v41 + 4) = v26;
      *((void *)v41 + 5) = v27;
      *((void *)v41 + 6) = v29;
      *((void *)v41 + 7) = v28;
      *((void *)v41 + 8) = v54;
      *((void *)v41 + 9) = v52;
      *((void *)v41 + 10) = v50;
      *((void *)v41 + 11) = v48;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v38 = v46;
      goto LABEL_29;
    }

uint64_t AKSRefKey.__allocating_init(handle:blob:)(int *a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  int v6 = *a1;
  *(_OWORD *)(v5 + 24) = xmmword_183D0A7C0;
  *(_DWORD *)(v5 + 16) = v6;
  unint64_t v7 = sub_183CECBD8(a2, 17LL, 0LL);
  if (v2)
  {
    swift_release();
    sub_183CDD24C();
    swift_allocError();
    *int v8 = 25;
    swift_willThrow();
    MEMORY[0x186E26038](v2);
  }

  else
  {
    *(void *)(v5 + 24) = v7;
    sub_183CF9680(1LL);
  }

  return v5;
}

uint64_t AKSRefKey.init(handle:blob:)(int *a1, uint64_t a2)
{
  int v4 = *a1;
  *(_OWORD *)(v2 + 24) = xmmword_183D0A7C0;
  *(_DWORD *)(v2 + 16) = v4;
  uint64_t v5 = sub_183CECBD8(a2, 17LL, 0LL);
  if (v3)
  {
    swift_release();
    sub_183CDD24C();
    swift_allocError();
    *int v6 = 25;
    swift_willThrow();
    MEMORY[0x186E26038](v3);
  }

  else
  {
    uint64_t v7 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = v5;
    sub_183CF9680(v7);
  }

  return v2;
}

double AKSRefKey.__allocating_init(handle:)(int *a1)
{
  uint64_t v2 = swift_allocObject();
  int v3 = *a1;
  *(void *)&double result = 1LL;
  *(_OWORD *)(v2 + 24) = xmmword_183D0A7C0;
  *(_DWORD *)(v2 + 16) = v3;
  return result;
}

uint64_t AKSRefKey.init(handle:)(int *a1)
{
  int v2 = *a1;
  *(_OWORD *)(v1 + 24) = xmmword_183D0A7C0;
  *(_DWORD *)(v1 + 16) = v2;
  return v1;
}

uint64_t sub_183CF0674(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (qword_18C664698 != -1) {
    swift_once();
  }
  int v8 = sub_183CEF798(qword_18C669288, qword_18C669290, qword_18C669298, unk_18C6692A0, a4);
  if (!v5)
  {
    unint64_t v9 = (unint64_t)v8;
    uint64_t v62 = v4;
    unint64_t v71 = v8;
    if (qword_18C664628 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_18C6690C8;
    uint64_t v11 = qword_18C6690D0;
    uint64_t v12 = qword_18C6690D8;
    unint64_t v13 = qword_18C6690E0;
    unint64_t v14 = 0LL;
    uint64_t v15 = sub_183CEC418();
    uint64_t v56 = v17;
    uint64_t v57 = v16;
    uint64_t v59 = v18;
    if (!v9) {
      unint64_t v71 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v19 = sub_183CF89BC((uint64_t)&v71, v11, v12, v13);
    int64_t v20 = *((void *)v71 + 2);
    if (v20 < v19)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v19, v20);
      int v4 = v71;
      if (v71)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v4 = sub_183CE67E0(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
        }
        unint64_t v9 = *((void *)v4 + 2);
        unint64_t v21 = *((void *)v4 + 3);
        if (v9 >= v21 >> 1) {
          int v4 = sub_183CE67E0((char *)(v21 > 1), v9 + 1, 1, v4);
        }
        *((void *)v4 + 2) = v9 + 1;
        int64_t v22 = &v4[64 * v9];
        *((void *)v22 + 4) = v10;
        *((void *)v22 + 5) = v11;
        *((void *)v22 + 6) = v12;
        *((void *)v22 + 7) = v13;
        *((void *)v22 + 8) = v15;
        *((void *)v22 + 9) = v59;
        *((void *)v22 + 10) = v57;
        *((void *)v22 + 11) = v56;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v71 = v4;
        unint64_t v14 = v5;
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      if (qword_18C664670 == -1)
      {
LABEL_17:
        uint64_t v23 = qword_18C6691E8;
        uint64_t v24 = qword_18C6691F0;
        uint64_t v25 = qword_18C6691F8;
        unint64_t v26 = qword_18C669200;
        uint64_t v27 = sub_183CEC418();
        uint64_t v29 = v28;
        uint64_t v58 = v31;
        uint64_t v60 = v30;
        uint64_t v32 = (char *)MEMORY[0x18961AFE8];
        if (v4) {
          uint64_t v32 = v4;
        }
        unint64_t v71 = v32;
        swift_unknownObjectRetain();
        uint64_t v33 = sub_183CF89BC((uint64_t)&v71, v24, v25, v26);
        int64_t v34 = *((void *)v71 + 2);
        if (v34 < v33)
        {
          __break(1u);
        }

        else
        {
          unint64_t v9 = 0LL;
          sub_183CF8CD4(v33, v34);
          unint64_t v35 = v71;
          if (v71)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v35 = sub_183CE67E0(0LL, *((void *)v35 + 2) + 1LL, 1, v35);
            }
            unint64_t v37 = *((void *)v35 + 2);
            unint64_t v36 = *((void *)v35 + 3);
            if (v37 >= v36 >> 1) {
              unint64_t v35 = sub_183CE67E0((char *)(v36 > 1), v37 + 1, 1, v35);
            }
            *((void *)v35 + 2) = v37 + 1;
            uint64_t v38 = &v35[64 * v37];
            *((void *)v38 + 4) = v23;
            *((void *)v38 + 5) = v24;
            *((void *)v38 + 6) = v25;
            *((void *)v38 + 7) = v26;
            *((void *)v38 + 8) = v27;
            *((void *)v38 + 9) = v60;
            *((void *)v38 + 10) = v58;
            *((void *)v38 + 11) = v29;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v71 = v35;
            unint64_t v9 = v14;
          }

          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }

          if (qword_18C664630 == -1) {
            goto LABEL_28;
          }
        }

        swift_once();
LABEL_28:
        __int128 v61 = xmmword_18C6690E8;
        uint64_t v39 = qword_18C6690F8;
        uint64_t v40 = qword_18C669100;
        swift_bridgeObjectRetain();
        uint64_t v41 = v9;
        uint64_t v42 = sub_183CF8904();
        uint64_t v44 = v43;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        uint64_t v7 = v41;
        swift_bridgeObjectRelease();
        if (v41)
        {
          sub_183CDD24C();
          swift_allocError();
          *uint64_t v49 = 22;
          swift_willThrow();
          MEMORY[0x186E26038](v41);
          swift_bridgeObjectRelease();
        }

        else
        {
          __int128 v64 = v61;
          uint64_t v65 = v39;
          uint64_t v66 = v40;
          uint64_t v67 = v42;
          uint64_t v68 = v44;
          uint64_t v69 = v46;
          uint64_t v70 = v48;
          swift_unknownObjectRetain();
          sub_183CDC7AC((uint64_t)&v64);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          int v63 = *((_DWORD *)v62 + 4);
          uint64_t v51 = sub_183CEF230(&v63, v71);
          swift_bridgeObjectRelease();
          uint64_t v7 = sub_183CEF418(v51);
          uint64_t v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v54 = sub_183CECBD8(v53, 17LL, 0LL);
          uint64_t v55 = *((void *)v62 + 3);
          *((void *)v62 + 3) = v54;
          sub_183CF9680(v55);
        }

        return v7;
      }
    }

    swift_once();
    goto LABEL_17;
  }

  return v7;
}

uint64_t sub_183CF0BE8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (qword_18C664850 != -1) {
    swift_once();
  }
  int v8 = sub_183CEF798(qword_18C669968, qword_18C669970, qword_18C669978, unk_18C669980, a4);
  if (!v5)
  {
    unint64_t v9 = (unint64_t)v8;
    uint64_t v62 = v4;
    unint64_t v71 = v8;
    if (qword_18C664628 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_18C6690C8;
    uint64_t v11 = qword_18C6690D0;
    uint64_t v12 = qword_18C6690D8;
    unint64_t v13 = qword_18C6690E0;
    unint64_t v14 = 0LL;
    uint64_t v15 = sub_183CEC418();
    uint64_t v56 = v17;
    uint64_t v57 = v16;
    uint64_t v59 = v18;
    if (!v9) {
      unint64_t v71 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v19 = sub_183CF89BC((uint64_t)&v71, v11, v12, v13);
    int64_t v20 = *((void *)v71 + 2);
    if (v20 < v19)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v19, v20);
      int v4 = v71;
      if (v71)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v4 = sub_183CE67E0(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
        }
        unint64_t v9 = *((void *)v4 + 2);
        unint64_t v21 = *((void *)v4 + 3);
        if (v9 >= v21 >> 1) {
          int v4 = sub_183CE67E0((char *)(v21 > 1), v9 + 1, 1, v4);
        }
        *((void *)v4 + 2) = v9 + 1;
        int64_t v22 = &v4[64 * v9];
        *((void *)v22 + 4) = v10;
        *((void *)v22 + 5) = v11;
        *((void *)v22 + 6) = v12;
        *((void *)v22 + 7) = v13;
        *((void *)v22 + 8) = v15;
        *((void *)v22 + 9) = v59;
        *((void *)v22 + 10) = v57;
        *((void *)v22 + 11) = v56;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v71 = v4;
        unint64_t v14 = v5;
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      if (qword_18C664670 == -1)
      {
LABEL_17:
        uint64_t v23 = qword_18C6691E8;
        uint64_t v24 = qword_18C6691F0;
        uint64_t v25 = qword_18C6691F8;
        unint64_t v26 = qword_18C669200;
        uint64_t v27 = sub_183CEC418();
        uint64_t v29 = v28;
        uint64_t v58 = v31;
        uint64_t v60 = v30;
        uint64_t v32 = (char *)MEMORY[0x18961AFE8];
        if (v4) {
          uint64_t v32 = v4;
        }
        unint64_t v71 = v32;
        swift_unknownObjectRetain();
        uint64_t v33 = sub_183CF89BC((uint64_t)&v71, v24, v25, v26);
        int64_t v34 = *((void *)v71 + 2);
        if (v34 < v33)
        {
          __break(1u);
        }

        else
        {
          unint64_t v9 = 0LL;
          sub_183CF8CD4(v33, v34);
          unint64_t v35 = v71;
          if (v71)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v35 = sub_183CE67E0(0LL, *((void *)v35 + 2) + 1LL, 1, v35);
            }
            unint64_t v37 = *((void *)v35 + 2);
            unint64_t v36 = *((void *)v35 + 3);
            if (v37 >= v36 >> 1) {
              unint64_t v35 = sub_183CE67E0((char *)(v36 > 1), v37 + 1, 1, v35);
            }
            *((void *)v35 + 2) = v37 + 1;
            uint64_t v38 = &v35[64 * v37];
            *((void *)v38 + 4) = v23;
            *((void *)v38 + 5) = v24;
            *((void *)v38 + 6) = v25;
            *((void *)v38 + 7) = v26;
            *((void *)v38 + 8) = v27;
            *((void *)v38 + 9) = v60;
            *((void *)v38 + 10) = v58;
            *((void *)v38 + 11) = v29;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v71 = v35;
            unint64_t v9 = v14;
          }

          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }

          if (qword_18C664630 == -1) {
            goto LABEL_28;
          }
        }

        swift_once();
LABEL_28:
        __int128 v61 = xmmword_18C6690E8;
        uint64_t v39 = qword_18C6690F8;
        uint64_t v40 = qword_18C669100;
        swift_bridgeObjectRetain();
        uint64_t v41 = v9;
        uint64_t v42 = sub_183CF8904();
        uint64_t v44 = v43;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        uint64_t v7 = v41;
        swift_bridgeObjectRelease();
        if (v41)
        {
          sub_183CDD24C();
          swift_allocError();
          *uint64_t v49 = 22;
          swift_willThrow();
          MEMORY[0x186E26038](v41);
          swift_bridgeObjectRelease();
        }

        else
        {
          __int128 v64 = v61;
          uint64_t v65 = v39;
          uint64_t v66 = v40;
          uint64_t v67 = v42;
          uint64_t v68 = v44;
          uint64_t v69 = v46;
          uint64_t v70 = v48;
          swift_unknownObjectRetain();
          sub_183CDC7AC((uint64_t)&v64);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          int v63 = *((_DWORD *)v62 + 4);
          uint64_t v51 = sub_183CEF230(&v63, v71);
          swift_bridgeObjectRelease();
          uint64_t v7 = sub_183CEF418(v51);
          uint64_t v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v54 = sub_183CECBD8(v53, 17LL, 0LL);
          uint64_t v55 = *((void *)v62 + 3);
          *((void *)v62 + 3) = v54;
          sub_183CF9680(v55);
        }

        return v7;
      }
    }

    swift_once();
    goto LABEL_17;
  }

  return v7;
}

uint64_t sub_183CF115C(uint64_t a1, uint64_t a2)
{
  if (qword_18C6646B8 != -1) {
    swift_once();
  }
  int v6 = sub_183CEF798(qword_18C669308, qword_18C669310, qword_18C669318, unk_18C669320, a2);
  if (v3) {
    return a1;
  }
  uint64_t v7 = v6;
  uint64_t v59 = v2;
  uint64_t v68 = v6;
  if (qword_18C6647E8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_18C6697C8;
  uint64_t v8 = qword_18C6697D0;
  uint64_t v10 = qword_18C6697D8;
  unint64_t v11 = unk_18C6697E0;
  uint64_t v12 = sub_183CEC418();
  uint64_t v14 = v13;
  uint64_t v55 = v16;
  uint64_t v57 = v15;
  if (!v7) {
    uint64_t v68 = (char *)MEMORY[0x18961AFE8];
  }
  swift_unknownObjectRetain();
  uint64_t v17 = v8;
  uint64_t v18 = sub_183CF89BC((uint64_t)&v68, v8, v10, v11);
  int64_t v19 = *((void *)v68 + 2);
  if (v19 < v18)
  {
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_17;
  }

  sub_183CF8CD4(v18, v19);
  int64_t v20 = v68;
  if (v68)
  {
    uint64_t v54 = v14;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v20 = sub_183CE67E0(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
    }
    unint64_t v22 = *((void *)v20 + 2);
    unint64_t v21 = *((void *)v20 + 3);
    if (v22 >= v21 >> 1) {
      int64_t v20 = sub_183CE67E0((char *)(v21 > 1), v22 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v22 + 1;
    uint64_t v23 = &v20[64 * v22];
    *((void *)v23 + 4) = v9;
    *((void *)v23 + 5) = v17;
    *((void *)v23 + 6) = v10;
    *((void *)v23 + 7) = v11;
    *((void *)v23 + 8) = v12;
    *((void *)v23 + 9) = v54;
    *((void *)v23 + 10) = v57;
    *((void *)v23 + 11) = v55;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v68 = v20;
  }

  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  if (qword_18C664630 != -1) {
    goto LABEL_33;
  }
LABEL_17:
  __int128 v58 = xmmword_18C6690E8;
  uint64_t v24 = qword_18C6690F8;
  uint64_t v25 = qword_18C669100;
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_183CF8904();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  __int128 v61 = v58;
  uint64_t v62 = v24;
  uint64_t v63 = v25;
  __int128 v64 = v26;
  uint64_t v65 = v28;
  uint64_t v66 = v30;
  uint64_t v67 = v32;
  swift_unknownObjectRetain();
  uint64_t v33 = (char *)&v68;
  sub_183CDC7AC((uint64_t)&v61);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v59 + 24);
  if (result != 1)
  {
    unint64_t v35 = (char *)swift_bridgeObjectRetain();
    unint64_t v36 = sub_183CEC58C(v35);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v43 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v43 != -1) {
      swift_once();
    }
    uint64_t v45 = qword_18C669248;
    uint64_t v44 = qword_18C669250;
    uint64_t v47 = qword_18C669258;
    unint64_t v46 = qword_18C669260;
    uint64_t v48 = v68;
    if (!v68) {
      uint64_t v48 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v68 = v48;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    unint64_t v56 = v46;
    uint64_t v49 = sub_183CF89BC((uint64_t)&v68, v44, v47, v46);
    int64_t v50 = *((void *)v68 + 2);
    if (v50 < v49)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v49, v50);
      uint64_t v33 = v68;
      if (!v68)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_31:
        int v60 = *(_DWORD *)(v59 + 16);
        a1 = sub_183CEF230(&v60, v33);
        swift_bridgeObjectRelease();
        return a1;
      }

      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_27:
        unint64_t v52 = *((void *)v33 + 2);
        unint64_t v51 = *((void *)v33 + 3);
        if (v52 >= v51 >> 1) {
          uint64_t v33 = sub_183CE67E0((char *)(v51 > 1), v52 + 1, 1, v33);
        }
        *((void *)v33 + 2) = v52 + 1;
        uint64_t v53 = &v33[64 * v52];
        *((void *)v53 + 4) = v45;
        *((void *)v53 + 5) = v44;
        *((void *)v53 + 6) = v47;
        *((void *)v53 + 7) = v56;
        *((void *)v53 + 8) = v36;
        *((void *)v53 + 9) = v38;
        *((void *)v53 + 10) = v40;
        *((void *)v53 + 11) = v42;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_31;
      }
    }

    uint64_t v33 = sub_183CE67E0(0LL, *((void *)v33 + 2) + 1LL, 1, v33);
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF1650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (qword_18C664690 != -1) {
    swift_once();
  }
  int v6 = sub_183CEF798(qword_18C669268, qword_18C669270, qword_18C669278, unk_18C669280, a2);
  if (v3) {
    return v4;
  }
  uint64_t v47 = v6;
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v37 = xmmword_18C6690E8;
  uint64_t v7 = qword_18C6690F8;
  uint64_t v8 = qword_18C669100;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_183CF8904();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  __int128 v40 = v37;
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v44 = v11;
  uint64_t v45 = v13;
  uint64_t v46 = v15;
  swift_unknownObjectRetain();
  uint64_t v16 = (char *)&v47;
  sub_183CDC7AC((uint64_t)&v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v4 + 24);
  if (result != 1)
  {
    uint64_t v18 = (char *)swift_bridgeObjectRetain();
    int64_t v19 = sub_183CEC58C(v18);
    uint64_t v21 = v20;
    uint64_t v36 = v23;
    uint64_t v38 = v22;
    uint64_t v24 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_18C669248;
    uint64_t v26 = qword_18C669250;
    uint64_t v27 = qword_18C669258;
    unint64_t v28 = qword_18C669260;
    uint64_t v29 = v47;
    if (!v47) {
      uint64_t v29 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v47 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v30 = sub_183CF89BC((uint64_t)&v47, v26, v27, v28);
    int64_t v31 = *((void *)v47 + 2);
    if (v31 < v30)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v30, v31);
      uint64_t v16 = v47;
      if (!v47)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_20:
        int v39 = *(_DWORD *)(v4 + 16);
        uint64_t v4 = sub_183CEF230(&v39, v16);
        swift_bridgeObjectRelease();
        return v4;
      }

      uint64_t v35 = v21;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_16:
        unint64_t v33 = *((void *)v16 + 2);
        unint64_t v32 = *((void *)v16 + 3);
        if (v33 >= v32 >> 1) {
          uint64_t v16 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v33 + 1;
        int64_t v34 = &v16[64 * v33];
        *((void *)v34 + 4) = v25;
        *((void *)v34 + 5) = v26;
        *((void *)v34 + 6) = v27;
        *((void *)v34 + 7) = v28;
        *((void *)v34 + 8) = v19;
        *((void *)v34 + 9) = v35;
        *((void *)v34 + 10) = v38;
        *((void *)v34 + 11) = v36;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_20;
      }
    }

    uint64_t v16 = sub_183CE67E0(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF19C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 32;
  uint64_t v6 = (2LL * *(void *)(a1 + 16)) | 1;
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_183CE20C8(v7, v5, 0LL, v6, (uint64_t)&v65);
  if (v3)
  {
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    *uint64_t v8 = 10;
    swift_willThrow();
    MEMORY[0x186E26038](v3);
    return v6;
  }

  uint64_t v70 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  unint64_t v9 = v65;
  char v10 = v66;
  sub_183CDD0CC((uint64_t)&v67, (uint64_t)v68);
  sub_183CDD0CC((uint64_t)v68, (uint64_t)v69);
  char v11 = v69[40];
  sub_183CF9640((uint64_t)&v65);
  sub_183CE0748(v9, v10, (v11 & 1) == 0, (uint64_t)&v70, (uint64_t)&v65);
  sub_183CE2004((uint64_t)&v65);
  uint64_t v12 = v70;
  uint64_t v6 = *((void *)v70 + 2);
  sub_183CE2004((uint64_t)&v65);
  swift_bridgeObjectRelease();
  uint64_t v13 = qword_18C6646A0;
  swift_unknownObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = 0LL;
  uint64_t v15 = sub_183CEF798(qword_18C6692A8, qword_18C6692B0, qword_18C6692B8, unk_18C6692C0, a2);
  uint64_t v63 = v2;
  uint64_t v70 = v15;
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v16 = xmmword_18C6690E8;
  uint64_t v17 = qword_18C6690F8;
  unint64_t v18 = qword_18C669100;
  if (!v15) {
    uint64_t v70 = (char *)MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v19 = sub_183CF89BC((uint64_t)&v70, *((uint64_t *)&v16 + 1), v17, v18);
  int64_t v20 = *((void *)v70 + 2);
  if (v20 < v19)
  {
    __break(1u);
LABEL_44:
    uint64_t v2 = sub_183CE67E0(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
    goto LABEL_12;
  }

  sub_183CF8CD4(v19, v20);
  uint64_t v2 = v70;
  if (!v70)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_16;
  }

  uint64_t v62 = 0LL;
  uint64_t v14 = 1LL;
  int v60 = v12 + 32;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_44;
  }
LABEL_12:
  uint64_t v21 = v14 | (2 * v6);
  unint64_t v23 = *((void *)v2 + 2);
  unint64_t v22 = *((void *)v2 + 3);
  uint64_t v6 = v23 + 1;
  if (v23 >= v22 >> 1) {
    uint64_t v2 = sub_183CE67E0((char *)(v22 > 1), v23 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v6;
  uint64_t v24 = &v2[64 * v23];
  *((_OWORD *)v24 + 2) = v16;
  *((void *)v24 + 6) = v17;
  *((void *)v24 + 7) = v18;
  *((void *)v24 + 8) = v12;
  *((void *)v24 + 9) = v60;
  *((void *)v24 + 10) = 0LL;
  *((void *)v24 + 11) = v21;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v70 = v2;
  uint64_t v14 = v62;
LABEL_16:
  if (*((void *)v63 + 3) != 1LL)
  {
    uint64_t v25 = (char *)swift_bridgeObjectRetain();
    uint64_t v26 = sub_183CEC58C(v25);
    uint64_t v30 = v14;
    if (v14)
    {
      sub_183CDD24C();
      swift_allocError();
      _BYTE *v31 = 22;
      swift_willThrow();
      MEMORY[0x186E26038](v14);
      swift_bridgeObjectRelease();
LABEL_32:
      swift_bridgeObjectRelease();
      return v6;
    }

    unint64_t v32 = v26;
    uint64_t v33 = v27;
    uint64_t v34 = v29;
    uint64_t v59 = v28;
    uint64_t v35 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_18C669248;
    uint64_t v36 = qword_18C669250;
    uint64_t v6 = qword_18C669258;
    unint64_t v38 = qword_18C669260;
    int v39 = (char *)MEMORY[0x18961AFE8];
    if (v2) {
      int v39 = v2;
    }
    uint64_t v70 = v39;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v61 = v6;
    uint64_t v40 = sub_183CF89BC((uint64_t)&v70, v36, v6, v38);
    int64_t v41 = *((void *)v70 + 2);
    if (v41 < v40)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v40, v41);
      uint64_t v6 = (uint64_t)v70;
      if (!v70)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v6 = (uint64_t)v70;
        goto LABEL_30;
      }

      uint64_t v58 = v30;
      uint64_t v30 = v33;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_26:
        unint64_t v43 = *(void *)(v6 + 16);
        unint64_t v42 = *(void *)(v6 + 24);
        if (v43 >= v42 >> 1) {
          uint64_t v6 = (uint64_t)sub_183CE67E0((char *)(v42 > 1), v43 + 1, 1, (char *)v6);
        }
        *(void *)(v6 + 16) = v43 + 1;
        uint64_t v44 = (void *)(v6 + (v43 << 6));
        v44[4] = v37;
        v44[5] = v36;
        v44[6] = v61;
        v44[7] = v38;
        v44[8] = v32;
        v44[9] = v30;
        v44[10] = v59;
        v44[11] = v34;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v70 = (char *)v6;
        uint64_t v30 = v58;
LABEL_30:
        int v64 = *((_DWORD *)v63 + 4);
        uint64_t v45 = sub_183CEF230(&v64, (char *)v6);
        if (v30)
        {
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }

        uint64_t v47 = v45;
        swift_bridgeObjectRelease();
        uint64_t v48 = sub_183CECC80(v47, 4LL, 0);
        uint64_t v50 = v49;
        uint64_t v52 = v51;
        unint64_t v54 = v53;
        if ((v53 & 1) != 0)
        {
          sub_183D04FD4();
          swift_unknownObjectRetain_n();
          uint64_t v56 = swift_dynamicCastClass();
          if (!v56)
          {
            swift_unknownObjectRelease();
            uint64_t v56 = MEMORY[0x18961AFE8];
          }

          uint64_t v57 = *(void *)(v56 + 16);
          swift_release();
          if (__OFSUB__(v54 >> 1, v52))
          {
            __break(1u);
          }

          else if (v57 == (v54 >> 1) - v52)
          {
            uint64_t v6 = swift_dynamicCastClass();
            swift_bridgeObjectRelease();
            if (!v6)
            {
              swift_unknownObjectRelease();
              uint64_t v6 = MEMORY[0x18961AFE8];
            }

            goto LABEL_42;
          }

          swift_unknownObjectRelease();
        }

        sub_183CF84D8(v48, v50, v52, v54);
        uint64_t v6 = v55;
        swift_bridgeObjectRelease();
LABEL_42:
        swift_unknownObjectRelease();
        return v6;
      }
    }

    uint64_t v6 = (uint64_t)sub_183CE67E0(0LL, *(void *)(v6 + 16) + 1LL, 1, (char *)v6);
    goto LABEL_26;
  }

  __break(1u);
  sub_183CE2004(1LL);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

char *sub_183CF2088(uint64_t a1)
{
  uint64_t v3 = v1;
  if (qword_18C6646A8 != -1) {
    swift_once();
  }
  uint64_t result = sub_183CEF798(qword_18C6692C8, qword_18C6692D0, qword_18C6692D8, unk_18C6692E0, a1);
  if (!v2)
  {
    uint64_t v6 = result;
    unint64_t v32 = result;
    uint64_t result = *(char **)(v3 + 24);
    if (result == (char *)1)
    {
      __break(1u);
      return result;
    }

    uint64_t v8 = 0LL;
    uint64_t v7 = (char *)swift_bridgeObjectRetain();
    unint64_t v9 = sub_183CEC58C(v7);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v30 = v14;
    uint64_t v15 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = qword_18C669248;
    uint64_t v17 = qword_18C669250;
    uint64_t v18 = qword_18C669258;
    unint64_t v19 = qword_18C669260;
    if (!v6) {
      unint64_t v32 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v20 = sub_183CF89BC((uint64_t)&v32, v17, v18, v19);
    int64_t v21 = *((void *)v32 + 2);
    if (v21 < v20)
    {
      __break(1u);
    }

    else
    {
      uint64_t v22 = 0LL;
      sub_183CF8CD4(v20, v21);
      uint64_t v8 = v32;
      if (!v32)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_16:
        int v31 = *(_DWORD *)(v3 + 16);
        sub_183CEF230(&v31, v8);
        if (!v22) {
          swift_bridgeObjectRelease();
        }
        return (char *)swift_bridgeObjectRelease();
      }

      uint64_t v28 = v17;
      uint64_t v29 = 0LL;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_12:
        unint64_t v24 = *((void *)v8 + 2);
        unint64_t v23 = *((void *)v8 + 3);
        uint64_t v25 = v18;
        if (v24 >= v23 >> 1)
        {
          uint64_t v27 = sub_183CE67E0((char *)(v23 > 1), v24 + 1, 1, v8);
          uint64_t v25 = v18;
          uint64_t v8 = v27;
        }

        *((void *)v8 + 2) = v24 + 1;
        uint64_t v26 = &v8[64 * v24];
        *((void *)v26 + 4) = v16;
        *((void *)v26 + 5) = v28;
        *((void *)v26 + 6) = v25;
        *((void *)v26 + 7) = v19;
        *((void *)v26 + 8) = v9;
        *((void *)v26 + 9) = v30;
        *((void *)v26 + 10) = v11;
        *((void *)v26 + 11) = v13;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v22 = v29;
        goto LABEL_16;
      }
    }

    uint64_t v8 = sub_183CE67E0(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
    goto LABEL_12;
  }

  return result;
}

char *sub_183CF2338(uint64_t a1, uint64_t a2)
{
  if (qword_18C6646C0 != -1) {
    swift_once();
  }
  uint64_t result = sub_183CEF798(qword_18C669328, qword_18C669330, qword_18C669338, unk_18C669340, a2);
  if (!v3)
  {
    uint64_t v6 = result;
    uint64_t v50 = v2;
    uint64_t v52 = result;
    if (qword_18C664628 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_18C6690C8;
    uint64_t v8 = qword_18C6690D0;
    uint64_t v9 = qword_18C6690D8;
    unint64_t v10 = qword_18C6690E0;
    uint64_t v11 = 0LL;
    uint64_t v12 = sub_183CEC418();
    uint64_t v14 = v13;
    uint64_t v48 = v16;
    uint64_t v49 = v15;
    if (!v6) {
      uint64_t v52 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v17 = sub_183CF89BC((uint64_t)&v52, v8, v9, v10);
    int64_t v18 = *((void *)v52 + 2);
    if (v18 < v17)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v17, v18);
      uint64_t v2 = v52;
      if (!v52)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_15;
      }

      uint64_t v47 = 0LL;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_11:
        unint64_t v20 = *((void *)v2 + 2);
        unint64_t v19 = *((void *)v2 + 3);
        if (v20 >= v19 >> 1) {
          uint64_t v2 = sub_183CE67E0((char *)(v19 > 1), v20 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v20 + 1;
        int64_t v21 = &v2[64 * v20];
        *((void *)v21 + 4) = v7;
        *((void *)v21 + 5) = v8;
        *((void *)v21 + 6) = v9;
        *((void *)v21 + 7) = v10;
        *((void *)v21 + 8) = v12;
        *((void *)v21 + 9) = v14;
        *((void *)v21 + 10) = v49;
        *((void *)v21 + 11) = v48;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v52 = v2;
        uint64_t v11 = v47;
LABEL_15:
        uint64_t v22 = v50;
        uint64_t result = (char *)*((void *)v50 + 3);
        if (result == (char *)1)
        {
          __break(1u);
          return result;
        }

        unint64_t v23 = (char *)swift_bridgeObjectRetain();
        unint64_t v24 = sub_183CEC58C(v23);
        if (v11)
        {
          sub_183CDD24C();
          swift_allocError();
          *uint64_t v28 = 22;
          swift_willThrow();
          MEMORY[0x186E26038](v11);
          return (char *)swift_bridgeObjectRelease();
        }

        uint64_t v29 = v24;
        uint64_t v30 = v26;
        uint64_t v31 = v27;
        uint64_t v46 = v25;
        uint64_t v32 = qword_18C664688;
        swift_unknownObjectRetain();
        if (v32 != -1) {
          swift_once();
        }
        uint64_t v34 = qword_18C669248;
        uint64_t v33 = qword_18C669250;
        uint64_t v35 = qword_18C669258;
        unint64_t v36 = qword_18C669260;
        uint64_t v37 = (char *)MEMORY[0x18961AFE8];
        if (v2) {
          uint64_t v37 = v2;
        }
        uint64_t v52 = v37;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v38 = sub_183CF89BC((uint64_t)&v52, v33, v35, v36);
        int64_t v39 = *((void *)v52 + 2);
        if (v39 < v38)
        {
          __break(1u);
        }

        else
        {
          sub_183CF8CD4(v38, v39);
          uint64_t v11 = v52;
          if (!v52)
          {
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
LABEL_30:
            int v51 = *((_DWORD *)v22 + 4);
            uint64_t v43 = sub_183CEF230(&v51, v11);
            swift_bridgeObjectRelease();
            uint64_t v44 = sub_183CECBD8(v43, 17LL, 0LL);
            uint64_t v45 = *((void *)v22 + 3);
            *((void *)v22 + 3) = v44;
            return (char *)sub_183CF9680(v45);
          }

          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_26:
            unint64_t v41 = *((void *)v11 + 2);
            unint64_t v40 = *((void *)v11 + 3);
            if (v41 >= v40 >> 1) {
              uint64_t v11 = sub_183CE67E0((char *)(v40 > 1), v41 + 1, 1, v11);
            }
            *((void *)v11 + 2) = v41 + 1;
            unint64_t v42 = &v11[64 * v41];
            *((void *)v42 + 4) = v34;
            *((void *)v42 + 5) = v33;
            *((void *)v42 + 6) = v35;
            *((void *)v42 + 7) = v36;
            *((void *)v42 + 8) = v29;
            *((void *)v42 + 9) = v46;
            *((void *)v42 + 10) = v30;
            *((void *)v42 + 11) = v31;
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
            uint64_t v22 = v50;
            goto LABEL_30;
          }
        }

        uint64_t v11 = sub_183CE67E0(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
        goto LABEL_26;
      }
    }

    uint64_t v2 = sub_183CE67E0(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
    goto LABEL_11;
  }

  return result;
}

uint64_t sub_183CF27CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (qword_18C6646C8 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_183CEF798(qword_18C669348, qword_18C669350, qword_18C669358, unk_18C669360, a2);
  if (v3) {
    return v4;
  }
  uint64_t v47 = v6;
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v37 = xmmword_18C6690E8;
  uint64_t v7 = qword_18C6690F8;
  uint64_t v8 = qword_18C669100;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_183CF8904();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  __int128 v40 = v37;
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v44 = v11;
  uint64_t v45 = v13;
  uint64_t v46 = v15;
  swift_unknownObjectRetain();
  uint64_t v16 = (char *)&v47;
  sub_183CDC7AC((uint64_t)&v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v4 + 24);
  if (result != 1)
  {
    int64_t v18 = (char *)swift_bridgeObjectRetain();
    unint64_t v19 = sub_183CEC58C(v18);
    uint64_t v21 = v20;
    uint64_t v36 = v23;
    uint64_t v38 = v22;
    uint64_t v24 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_18C669248;
    uint64_t v26 = qword_18C669250;
    uint64_t v27 = qword_18C669258;
    unint64_t v28 = qword_18C669260;
    uint64_t v29 = v47;
    if (!v47) {
      uint64_t v29 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v47 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v30 = sub_183CF89BC((uint64_t)&v47, v26, v27, v28);
    int64_t v31 = *((void *)v47 + 2);
    if (v31 < v30)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v30, v31);
      uint64_t v16 = v47;
      if (!v47)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_20:
        int v39 = *(_DWORD *)(v4 + 16);
        uint64_t v4 = sub_183CEF230(&v39, v16);
        swift_bridgeObjectRelease();
        return v4;
      }

      uint64_t v35 = v21;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_16:
        unint64_t v33 = *((void *)v16 + 2);
        unint64_t v32 = *((void *)v16 + 3);
        if (v33 >= v32 >> 1) {
          uint64_t v16 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v33 + 1;
        uint64_t v34 = &v16[64 * v33];
        *((void *)v34 + 4) = v25;
        *((void *)v34 + 5) = v26;
        *((void *)v34 + 6) = v27;
        *((void *)v34 + 7) = v28;
        *((void *)v34 + 8) = v19;
        *((void *)v34 + 9) = v35;
        *((void *)v34 + 10) = v38;
        *((void *)v34 + 11) = v36;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_20;
      }
    }

    uint64_t v16 = sub_183CE67E0(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF2B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 32;
  unint64_t v6 = (2LL * *(void *)(a1 + 16)) | 1;
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_183CE20C8(v7, v5, 0LL, v6, (uint64_t)&v72);
  swift_bridgeObjectRelease();
  if (v3)
  {
    sub_183CDD24C();
    swift_allocError();
    *uint64_t v8 = 10;
    swift_willThrow();
    MEMORY[0x186E26038](v3);
    return a2;
  }

  int v77 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  unint64_t v9 = v72;
  char v10 = v73;
  sub_183CDD0CC((uint64_t)&v74, (uint64_t)v75);
  sub_183CDD0CC((uint64_t)v75, (uint64_t)v76);
  char v11 = v76[40];
  sub_183CF9640((uint64_t)&v72);
  sub_183CE0748(v9, v10, (v11 & 1) == 0, (uint64_t)&v77, (uint64_t)&v72);
  sub_183CE2004((uint64_t)&v72);
  uint64_t v12 = v77;
  uint64_t v13 = *((void *)v77 + 2);
  sub_183CE2004((uint64_t)&v72);
  uint64_t v14 = qword_18C6646D0;
  swift_unknownObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_183CEF798(qword_18C669368, unk_18C669370, xmmword_18C669378, *((char **)&xmmword_18C669378 + 1), a2);
  uint64_t v69 = v13;
  uint64_t v70 = v2;
  int v77 = v15;
  if (qword_18C6647E8 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_18C6697C8;
  unint64_t v17 = qword_18C6697D0;
  uint64_t v18 = qword_18C6697D8;
  unint64_t v19 = unk_18C6697E0;
  uint64_t v20 = 0LL;
  uint64_t v21 = sub_183CEC418();
  uint64_t v63 = v23;
  uint64_t v65 = v22;
  uint64_t v67 = v24;
  unint64_t v68 = v19;
  if (!v15) {
    int v77 = (char *)MEMORY[0x18961AFE8];
  }
  swift_unknownObjectRetain();
  unint64_t v25 = v17;
  uint64_t v26 = v17;
  uint64_t v27 = v18;
  uint64_t v28 = sub_183CF89BC((uint64_t)&v77, v26, v18, v68);
  int64_t v29 = *((void *)v77 + 2);
  if (v29 < v28)
  {
    __break(1u);
    goto LABEL_44;
  }

  sub_183CF8CD4(v28, v29);
  uint64_t v2 = v77;
  if (!v77)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_16;
  }

  uint64_t v62 = 0LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_46;
  }
  while (1)
  {
    unint64_t v31 = *((void *)v2 + 2);
    unint64_t v30 = *((void *)v2 + 3);
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_183CE67E0((char *)(v30 > 1), v31 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v31 + 1;
    unint64_t v32 = &v2[64 * v31];
    *((void *)v32 + 4) = v16;
    *((void *)v32 + 5) = v25;
    *((void *)v32 + 6) = v27;
    *((void *)v32 + 7) = v68;
    *((void *)v32 + 8) = v21;
    *((void *)v32 + 9) = v67;
    *((void *)v32 + 10) = v65;
    *((void *)v32 + 11) = v63;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    int v77 = v2;
    uint64_t v20 = v62;
LABEL_16:
    if (qword_18C664630 != -1) {
LABEL_44:
    }
      swift_once();
    uint64_t v33 = *((void *)&xmmword_18C6690E8 + 1);
    uint64_t v16 = xmmword_18C6690E8;
    uint64_t v21 = (char *)qword_18C6690F8;
    unint64_t v25 = qword_18C669100;
    uint64_t v34 = v77;
    if (!v77) {
      uint64_t v34 = (char *)MEMORY[0x18961AFE8];
    }
    int v77 = v34;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v35 = v20;
    uint64_t v36 = sub_183CF89BC((uint64_t)&v77, v33, (uint64_t)v21, v25);
    int64_t v37 = *((void *)v77 + 2);
    if (v37 >= v36) {
      break;
    }
    __break(1u);
LABEL_46:
    uint64_t v2 = sub_183CE67E0(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
  }

  sub_183CF8CD4(v36, v37);
  uint64_t v38 = v77;
  if (v77)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v38 = sub_183CE67E0(0LL, *((void *)v38 + 2) + 1LL, 1, v38);
    }
    unint64_t v40 = *((void *)v38 + 2);
    unint64_t v39 = *((void *)v38 + 3);
    if (v40 >= v39 >> 1) {
      uint64_t v38 = sub_183CE67E0((char *)(v39 > 1), v40 + 1, 1, v38);
    }
    *((void *)v38 + 2) = v40 + 1;
    uint64_t v41 = &v38[64 * v40];
    *((void *)v41 + 4) = v16;
    *((void *)v41 + 5) = v33;
    *((void *)v41 + 6) = v21;
    *((void *)v41 + 7) = v25;
    *((void *)v41 + 8) = v12;
    *((void *)v41 + 9) = v12 + 32;
    *((void *)v41 + 10) = 0LL;
    *((void *)v41 + 11) = (2 * v69) | 1;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    int v77 = v38;
    uint64_t v20 = v35;
  }

  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }

  if (*((void *)v70 + 3) != 1LL)
  {
    uint64_t v42 = (char *)swift_bridgeObjectRetain();
    uint64_t v43 = sub_183CEC58C(v42);
    if (v20)
    {
      sub_183CDD24C();
      swift_allocError();
      *uint64_t v47 = 22;
      swift_willThrow();
      MEMORY[0x186E26038](v20);
      a2 = (uint64_t)v77;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a2;
    }

    uint64_t v49 = v43;
    uint64_t v50 = v44;
    uint64_t v64 = v46;
    uint64_t v66 = v45;
    uint64_t v51 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v51 != -1) {
      swift_once();
    }
    uint64_t v53 = qword_18C669248;
    uint64_t v52 = qword_18C669250;
    uint64_t v54 = qword_18C669258;
    unint64_t v55 = qword_18C669260;
    uint64_t v56 = (char *)MEMORY[0x18961AFE8];
    if (v38) {
      uint64_t v56 = v38;
    }
    int v77 = v56;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v57 = sub_183CF89BC((uint64_t)&v77, v52, v54, v55);
    int64_t v58 = *((void *)v77 + 2);
    if (v58 < v57)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v57, v58);
      uint64_t v20 = v77;
      if (!v77)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v20 = v77;
LABEL_42:
        int v71 = *((_DWORD *)v70 + 4);
        a2 = sub_183CEF230(&v71, v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a2;
      }

      uint64_t v62 = v50;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_38:
        unint64_t v60 = *((void *)v20 + 2);
        unint64_t v59 = *((void *)v20 + 3);
        if (v60 >= v59 >> 1) {
          uint64_t v20 = sub_183CE67E0((char *)(v59 > 1), v60 + 1, 1, v20);
        }
        *((void *)v20 + 2) = v60 + 1;
        uint64_t v61 = &v20[64 * v60];
        *((void *)v61 + 4) = v53;
        *((void *)v61 + 5) = v52;
        *((void *)v61 + 6) = v54;
        *((void *)v61 + 7) = v55;
        *((void *)v61 + 8) = v49;
        *((void *)v61 + 9) = v62;
        *((void *)v61 + 10) = v66;
        *((void *)v61 + 11) = v64;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_42;
      }
    }

    uint64_t v20 = sub_183CE67E0(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
    goto LABEL_38;
  }

  __break(1u);
  sub_183CE2004(1LL);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

char *sub_183CF327C(int *a1, uint64_t a2)
{
  int v5 = *a1;
  if (qword_18C6646E8 != -1) {
    swift_once();
  }
  uint64_t result = sub_183CEF798(qword_18C6693C8, qword_18C6693D0, qword_18C6693D8, unk_18C6693E0, a2);
  if (!v3)
  {
    uint64_t v7 = result;
    int v50 = v5;
    uint64_t v51 = v2;
    uint64_t v53 = result;
    if (qword_18C664710 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_18C669468;
    uint64_t v9 = unk_18C669470;
    __int128 v10 = xmmword_18C669478;
    char v11 = 0LL;
    uint64_t v12 = sub_183CEC418();
    uint64_t v14 = v13;
    uint64_t v48 = v16;
    uint64_t v49 = v15;
    if (!v7) {
      uint64_t v53 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v17 = sub_183CF89BC((uint64_t)&v53, v9, v10, *((unint64_t *)&v10 + 1));
    int64_t v18 = *((void *)v53 + 2);
    if (v18 < v17)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v17, v18);
      uint64_t v2 = v53;
      if (!v53)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_15;
      }

      uint64_t v47 = 0LL;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_11:
        unint64_t v20 = *((void *)v2 + 2);
        unint64_t v19 = *((void *)v2 + 3);
        if (v20 >= v19 >> 1) {
          uint64_t v2 = sub_183CE67E0((char *)(v19 > 1), v20 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v20 + 1;
        uint64_t v21 = &v2[64 * v20];
        *((void *)v21 + 4) = v8;
        *((void *)v21 + 5) = v9;
        *((_OWORD *)v21 + 3) = v10;
        *((void *)v21 + 8) = v12;
        *((void *)v21 + 9) = v14;
        *((void *)v21 + 10) = v49;
        *((void *)v21 + 11) = v48;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v53 = v2;
        char v11 = v47;
LABEL_15:
        uint64_t v22 = v51;
        uint64_t result = (char *)*((void *)v51 + 3);
        if (result == (char *)1)
        {
          __break(1u);
          return result;
        }

        uint64_t v23 = (char *)swift_bridgeObjectRetain();
        uint64_t v24 = sub_183CEC58C(v23);
        if (v11)
        {
          sub_183CDD24C();
          swift_allocError();
          *uint64_t v28 = 22;
          swift_willThrow();
          MEMORY[0x186E26038](v11);
          return (char *)swift_bridgeObjectRelease();
        }

        int64_t v29 = v24;
        uint64_t v30 = v26;
        uint64_t v31 = v27;
        uint64_t v46 = v25;
        uint64_t v32 = qword_18C664688;
        swift_unknownObjectRetain();
        if (v32 != -1) {
          swift_once();
        }
        uint64_t v34 = qword_18C669248;
        uint64_t v33 = qword_18C669250;
        uint64_t v35 = qword_18C669258;
        unint64_t v36 = qword_18C669260;
        int64_t v37 = (char *)MEMORY[0x18961AFE8];
        if (v2) {
          int64_t v37 = v2;
        }
        uint64_t v53 = v37;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v38 = sub_183CF89BC((uint64_t)&v53, v33, v35, v36);
        int64_t v39 = *((void *)v53 + 2);
        if (v39 < v38)
        {
          __break(1u);
        }

        else
        {
          sub_183CF8CD4(v38, v39);
          char v11 = v53;
          if (!v53)
          {
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
LABEL_30:
            int v52 = *((_DWORD *)v22 + 4);
            uint64_t v43 = sub_183CEF230(&v52, v11);
            swift_bridgeObjectRelease();
            *((_DWORD *)v22 + 4) = v50;
            uint64_t v44 = sub_183CECBD8(v43, 17LL, 0LL);
            uint64_t v45 = *((void *)v22 + 3);
            *((void *)v22 + 3) = v44;
            return (char *)sub_183CF9680(v45);
          }

          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_26:
            unint64_t v41 = *((void *)v11 + 2);
            unint64_t v40 = *((void *)v11 + 3);
            if (v41 >= v40 >> 1) {
              char v11 = sub_183CE67E0((char *)(v40 > 1), v41 + 1, 1, v11);
            }
            *((void *)v11 + 2) = v41 + 1;
            uint64_t v42 = &v11[64 * v41];
            *((void *)v42 + 4) = v34;
            *((void *)v42 + 5) = v33;
            *((void *)v42 + 6) = v35;
            *((void *)v42 + 7) = v36;
            *((void *)v42 + 8) = v29;
            *((void *)v42 + 9) = v46;
            *((void *)v42 + 10) = v30;
            *((void *)v42 + 11) = v31;
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
            uint64_t v22 = v51;
            goto LABEL_30;
          }
        }

        char v11 = sub_183CE67E0(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
        goto LABEL_26;
      }
    }

    uint64_t v2 = sub_183CE67E0(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
    goto LABEL_11;
  }

  return result;
}

uint64_t sub_183CF371C(uint64_t a1, uint64_t a2)
{
  if (qword_18C6646D8 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_183CEF798(qword_18C669388, qword_18C669390, xmmword_18C669398, *((char **)&xmmword_18C669398 + 1), a2);
  if (v3) {
    return a1;
  }
  uint64_t v7 = v6;
  uint64_t v58 = v2;
  uint64_t v65 = v6;
  if (qword_18C6647E8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_18C6697C8;
  uint64_t v8 = qword_18C6697D0;
  uint64_t v10 = qword_18C6697D8;
  unint64_t v11 = unk_18C6697E0;
  uint64_t v12 = sub_183CEC418();
  uint64_t v14 = v13;
  uint64_t v54 = v16;
  uint64_t v56 = v15;
  if (!v7) {
    uint64_t v65 = (char *)MEMORY[0x18961AFE8];
  }
  swift_unknownObjectRetain();
  uint64_t v17 = v8;
  uint64_t v18 = sub_183CF89BC((uint64_t)&v65, v8, v10, v11);
  int64_t v19 = *((void *)v65 + 2);
  if (v19 < v18)
  {
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_17;
  }

  sub_183CF8CD4(v18, v19);
  unint64_t v20 = v65;
  if (v65)
  {
    uint64_t v53 = v14;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v20 = sub_183CE67E0(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
    }
    unint64_t v22 = *((void *)v20 + 2);
    unint64_t v21 = *((void *)v20 + 3);
    if (v22 >= v21 >> 1) {
      unint64_t v20 = sub_183CE67E0((char *)(v21 > 1), v22 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v22 + 1;
    uint64_t v23 = &v20[64 * v22];
    *((void *)v23 + 4) = v9;
    *((void *)v23 + 5) = v17;
    *((void *)v23 + 6) = v10;
    *((void *)v23 + 7) = v11;
    *((void *)v23 + 8) = v12;
    *((void *)v23 + 9) = v53;
    *((void *)v23 + 10) = v56;
    *((void *)v23 + 11) = v54;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v65 = v20;
  }

  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  if (qword_18C664668 != -1) {
    goto LABEL_33;
  }
LABEL_17:
  __int128 v57 = xmmword_18C6691C8;
  __int128 v24 = xmmword_18C6691D8;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_183CF8904();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  v60[0] = v57;
  v60[1] = v24;
  uint64_t v61 = v25;
  uint64_t v62 = v27;
  uint64_t v63 = v29;
  uint64_t v64 = v31;
  swift_unknownObjectRetain();
  uint64_t v32 = (char *)&v65;
  sub_183CDC7AC((uint64_t)v60);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v58 + 24);
  if (result != 1)
  {
    uint64_t v34 = (char *)swift_bridgeObjectRetain();
    uint64_t v35 = sub_183CEC58C(v34);
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v42 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v42 != -1) {
      swift_once();
    }
    uint64_t v44 = qword_18C669248;
    uint64_t v43 = qword_18C669250;
    uint64_t v46 = qword_18C669258;
    unint64_t v45 = qword_18C669260;
    uint64_t v47 = v65;
    if (!v65) {
      uint64_t v47 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v65 = v47;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    unint64_t v55 = v45;
    uint64_t v48 = sub_183CF89BC((uint64_t)&v65, v43, v46, v45);
    int64_t v49 = *((void *)v65 + 2);
    if (v49 < v48)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v48, v49);
      uint64_t v32 = v65;
      if (!v65)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_31:
        int v59 = *(_DWORD *)(v58 + 16);
        a1 = sub_183CEF230(&v59, v32);
        swift_bridgeObjectRelease();
        return a1;
      }

      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_27:
        unint64_t v51 = *((void *)v32 + 2);
        unint64_t v50 = *((void *)v32 + 3);
        if (v51 >= v50 >> 1) {
          uint64_t v32 = sub_183CE67E0((char *)(v50 > 1), v51 + 1, 1, v32);
        }
        *((void *)v32 + 2) = v51 + 1;
        int v52 = &v32[64 * v51];
        *((void *)v52 + 4) = v44;
        *((void *)v52 + 5) = v43;
        *((void *)v52 + 6) = v46;
        *((void *)v52 + 7) = v55;
        *((void *)v52 + 8) = v35;
        *((void *)v52 + 9) = v37;
        *((void *)v52 + 10) = v39;
        *((void *)v52 + 11) = v41;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_31;
      }
    }

    uint64_t v32 = sub_183CE67E0(0LL, *((void *)v32 + 2) + 1LL, 1, v32);
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF3C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_18C6646F8 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_183CEF798(qword_18C669408, qword_18C669410, qword_18C669418, unk_18C669420, a3);
  if (v4) {
    return a3;
  }
  uint64_t v46 = v3;
  uint64_t v62 = v6;
  if (qword_18C664668 != -1) {
    swift_once();
  }
  __int128 v47 = xmmword_18C6691C8;
  __int128 v7 = xmmword_18C6691D8;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_183CF8904();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = 0LL;
  swift_bridgeObjectRelease();
  v57[0] = v47;
  v57[1] = v7;
  uint64_t v58 = v8;
  uint64_t v59 = v10;
  uint64_t v60 = v12;
  uint64_t v61 = v14;
  swift_unknownObjectRetain();
  sub_183CDC7AC((uint64_t)v57);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v48 = xmmword_18C6690E8;
  uint64_t v16 = qword_18C6690F8;
  uint64_t v17 = qword_18C669100;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_183CF8904();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  __int128 v50 = v48;
  uint64_t v51 = v16;
  uint64_t v52 = v17;
  uint64_t v53 = v18;
  uint64_t v54 = v20;
  uint64_t v55 = v22;
  uint64_t v56 = v24;
  swift_unknownObjectRetain();
  sub_183CDC7AC((uint64_t)&v50);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v25 = v46;
  uint64_t result = *(void *)(v46 + 24);
  if (result != 1)
  {
    uint64_t v27 = (char *)swift_bridgeObjectRetain();
    uint64_t v28 = sub_183CEC58C(v27);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v35 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_18C669248;
    uint64_t v37 = qword_18C669250;
    uint64_t v39 = qword_18C669258;
    unint64_t v38 = qword_18C669260;
    uint64_t v40 = v62;
    if (!v62) {
      uint64_t v40 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v62 = v40;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v41 = sub_183CF89BC((uint64_t)&v62, v37, v39, v38);
    int64_t v42 = *((void *)v62 + 2);
    if (v42 < v41)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v41, v42);
      uint64_t v15 = v62;
      if (!v62)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_22:
        int v49 = *(_DWORD *)(v25 + 16);
        a3 = sub_183CEF230(&v49, v15);
        swift_bridgeObjectRelease();
        return a3;
      }

      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_18:
        unint64_t v44 = *((void *)v15 + 2);
        unint64_t v43 = *((void *)v15 + 3);
        if (v44 >= v43 >> 1) {
          uint64_t v15 = sub_183CE67E0((char *)(v43 > 1), v44 + 1, 1, v15);
        }
        *((void *)v15 + 2) = v44 + 1;
        unint64_t v45 = &v15[64 * v44];
        *((void *)v45 + 4) = v36;
        *((void *)v45 + 5) = v37;
        *((void *)v45 + 6) = v39;
        *((void *)v45 + 7) = v38;
        *((void *)v45 + 8) = v28;
        *((void *)v45 + 9) = v30;
        *((void *)v45 + 10) = v32;
        *((void *)v45 + 11) = v34;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v25 = v46;
        goto LABEL_22;
      }
    }

    uint64_t v15 = sub_183CE67E0(0LL, *((void *)v15 + 2) + 1LL, 1, v15);
    goto LABEL_18;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF4050(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (qword_18C664700 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_183CEF798(qword_18C669428, qword_18C669430, qword_18C669438, unk_18C669440, a2);
  if (v3) {
    return v4;
  }
  __int128 v47 = v6;
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v37 = xmmword_18C6690E8;
  uint64_t v7 = qword_18C6690F8;
  uint64_t v8 = qword_18C669100;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_183CF8904();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  __int128 v40 = v37;
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  unint64_t v43 = v9;
  uint64_t v44 = v11;
  uint64_t v45 = v13;
  uint64_t v46 = v15;
  swift_unknownObjectRetain();
  uint64_t v16 = (char *)&v47;
  sub_183CDC7AC((uint64_t)&v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v4 + 24);
  if (result != 1)
  {
    uint64_t v18 = (char *)swift_bridgeObjectRetain();
    uint64_t v19 = sub_183CEC58C(v18);
    uint64_t v21 = v20;
    uint64_t v36 = v23;
    uint64_t v38 = v22;
    uint64_t v24 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_18C669248;
    uint64_t v26 = qword_18C669250;
    uint64_t v27 = qword_18C669258;
    unint64_t v28 = qword_18C669260;
    uint64_t v29 = v47;
    if (!v47) {
      uint64_t v29 = (char *)MEMORY[0x18961AFE8];
    }
    __int128 v47 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v30 = sub_183CF89BC((uint64_t)&v47, v26, v27, v28);
    int64_t v31 = *((void *)v47 + 2);
    if (v31 < v30)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v30, v31);
      uint64_t v16 = v47;
      if (!v47)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_20:
        int v39 = *(_DWORD *)(v4 + 16);
        uint64_t v4 = sub_183CEF230(&v39, v16);
        swift_bridgeObjectRelease();
        return v4;
      }

      uint64_t v35 = v21;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_16:
        unint64_t v33 = *((void *)v16 + 2);
        unint64_t v32 = *((void *)v16 + 3);
        if (v33 >= v32 >> 1) {
          uint64_t v16 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v33 + 1;
        uint64_t v34 = &v16[64 * v33];
        *((void *)v34 + 4) = v25;
        *((void *)v34 + 5) = v26;
        *((void *)v34 + 6) = v27;
        *((void *)v34 + 7) = v28;
        *((void *)v34 + 8) = v19;
        *((void *)v34 + 9) = v35;
        *((void *)v34 + 10) = v38;
        *((void *)v34 + 11) = v36;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_20;
      }
    }

    uint64_t v16 = sub_183CE67E0(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF43C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_18C664708 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_183CEF798(qword_18C669448, qword_18C669450, qword_18C669458, unk_18C669460, a3);
  if (v4) {
    return a3;
  }
  uint64_t v46 = v3;
  uint64_t v62 = v6;
  if (qword_18C664668 != -1) {
    swift_once();
  }
  __int128 v47 = xmmword_18C6691C8;
  __int128 v7 = xmmword_18C6691D8;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_183CF8904();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = 0LL;
  swift_bridgeObjectRelease();
  v57[0] = v47;
  v57[1] = v7;
  uint64_t v58 = v8;
  uint64_t v59 = v10;
  uint64_t v60 = v12;
  uint64_t v61 = v14;
  swift_unknownObjectRetain();
  sub_183CDC7AC((uint64_t)v57);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v48 = xmmword_18C6690E8;
  uint64_t v16 = qword_18C6690F8;
  uint64_t v17 = qword_18C669100;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_183CF8904();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  __int128 v50 = v48;
  uint64_t v51 = v16;
  uint64_t v52 = v17;
  uint64_t v53 = v18;
  uint64_t v54 = v20;
  uint64_t v55 = v22;
  uint64_t v56 = v24;
  swift_unknownObjectRetain();
  sub_183CDC7AC((uint64_t)&v50);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v25 = v46;
  uint64_t result = *(void *)(v46 + 24);
  if (result != 1)
  {
    uint64_t v27 = (char *)swift_bridgeObjectRetain();
    unint64_t v28 = sub_183CEC58C(v27);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v35 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_18C669248;
    uint64_t v37 = qword_18C669250;
    uint64_t v39 = qword_18C669258;
    unint64_t v38 = qword_18C669260;
    __int128 v40 = v62;
    if (!v62) {
      __int128 v40 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v62 = v40;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v41 = sub_183CF89BC((uint64_t)&v62, v37, v39, v38);
    int64_t v42 = *((void *)v62 + 2);
    if (v42 < v41)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v41, v42);
      uint64_t v15 = v62;
      if (!v62)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_22:
        int v49 = *(_DWORD *)(v25 + 16);
        a3 = sub_183CEF230(&v49, v15);
        swift_bridgeObjectRelease();
        return a3;
      }

      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_18:
        unint64_t v44 = *((void *)v15 + 2);
        unint64_t v43 = *((void *)v15 + 3);
        if (v44 >= v43 >> 1) {
          uint64_t v15 = sub_183CE67E0((char *)(v43 > 1), v44 + 1, 1, v15);
        }
        *((void *)v15 + 2) = v44 + 1;
        uint64_t v45 = &v15[64 * v44];
        *((void *)v45 + 4) = v36;
        *((void *)v45 + 5) = v37;
        *((void *)v45 + 6) = v39;
        *((void *)v45 + 7) = v38;
        *((void *)v45 + 8) = v28;
        *((void *)v45 + 9) = v30;
        *((void *)v45 + 10) = v32;
        *((void *)v45 + 11) = v34;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v25 = v46;
        goto LABEL_22;
      }
    }

    uint64_t v15 = sub_183CE67E0(0LL, *((void *)v15 + 2) + 1LL, 1, v15);
    goto LABEL_18;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF4800@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  if (qword_18C664898 != -1) {
    swift_once();
  }
  uint64_t result = (uint64_t)sub_183CEF798( qword_18C669A88,  unk_18C669A90,  xmmword_18C669A98,  *((char **)&xmmword_18C669A98 + 1),  a1);
  if (v3) {
    return result;
  }
  unint64_t v83 = a2;
  uint64_t v69 = result;
  if (qword_18C664668 != -1) {
    swift_once();
  }
  __int128 v66 = xmmword_18C6691C8;
  __int128 v8 = xmmword_18C6691D8;
  swift_bridgeObjectRetain();
  unint64_t v9 = (unint64_t)sub_183CF8904();
  unint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = 0LL;
  swift_bridgeObjectRelease();
  v78[0] = v66;
  v78[1] = v8;
  unint64_t v79 = v9;
  unint64_t v80 = v11;
  uint64_t v17 = v66;
  uint64_t v81 = v13;
  uint64_t v82 = v15;
  swift_unknownObjectRetain();
  sub_183CDC7AC((uint64_t)v78);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (*(void *)(v4 + 24) == 1LL)
  {
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v19 = 0LL;
  uint64_t v18 = (char *)swift_bridgeObjectRetain();
  uint64_t v20 = sub_183CEC58C(v18);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = qword_18C664688;
  swift_unknownObjectRetain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v29 = qword_18C669248;
  uint64_t v28 = qword_18C669250;
  uint64_t v30 = qword_18C669258;
  unint64_t v31 = qword_18C669260;
  uint64_t v32 = v69;
  if (!v69) {
    uint64_t v32 = MEMORY[0x18961AFE8];
  }
  uint64_t v69 = v32;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v65 = v30;
  uint64_t v33 = sub_183CF89BC((uint64_t)&v69, v28, v30, v31);
  int64_t v34 = *(void *)(v69 + 16);
  if (v34 < v33)
  {
    __break(1u);
LABEL_45:
    uint64_t v19 = sub_183CE67E0(0LL, *((void *)v19 + 2) + 1LL, 1, v19);
    goto LABEL_16;
  }

  uint64_t v35 = 0LL;
  sub_183CF8CD4(v33, v34);
  uint64_t v19 = (char *)v69;
  if (!v69)
  {
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    goto LABEL_20;
  }

  uint64_t v63 = 0LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_45;
  }
LABEL_16:
  unint64_t v37 = *((void *)v19 + 2);
  unint64_t v36 = *((void *)v19 + 3);
  if (v37 >= v36 >> 1) {
    uint64_t v19 = sub_183CE67E0((char *)(v36 > 1), v37 + 1, 1, v19);
  }
  *((void *)v19 + 2) = v37 + 1;
  unint64_t v38 = &v19[64 * v37];
  *((void *)v38 + 4) = v29;
  *((void *)v38 + 5) = v28;
  *((void *)v38 + 6) = v65;
  *((void *)v38 + 7) = v31;
  *((void *)v38 + 8) = v20;
  *((void *)v38 + 9) = v22;
  *((void *)v38 + 10) = v24;
  *((void *)v38 + 11) = v26;
  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  uint64_t v69 = (uint64_t)v19;
  uint64_t v35 = v63;
LABEL_20:
  int v68 = *(_DWORD *)(v4 + 16);
  uint64_t v39 = sub_183CEF230(&v68, v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v35)
  {
    __int128 v40 = sub_183CECBD8(v39, 17LL, 0LL);
    if (qword_18C664630 != -1) {
      swift_once();
    }
    sub_183CDCDA4(*((uint64_t *)&xmmword_18C6690E8 + 1), qword_18C6690F8, qword_18C669100, (uint64_t)v40, (uint64_t)v70);
    v77[0] = v71;
    v77[1] = v72;
    uint64_t v41 = *((void *)&v71 + 1);
    __int128 v42 = v72;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v70);
    if (qword_18C6646D8 != -1) {
      swift_once();
    }
    sub_183CDCDA4( qword_18C669390,  xmmword_18C669398,  *((unint64_t *)&xmmword_18C669398 + 1),  (uint64_t)v40,  (uint64_t)v73);
    swift_bridgeObjectRelease();
    v76[0] = v74;
    v76[1] = v75;
    uint64_t v43 = *((void *)&v74 + 1);
    unint64_t v67 = *((void *)&v75 + 1);
    uint64_t v44 = v75;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v73);
    uint64_t v45 = swift_unknownObjectRetain();
    uint64_t v46 = sub_183CECAE0(v45, v41, v42, *((unint64_t *)&v42 + 1));
    uint64_t v15 = v47;
    uint64_t v16 = v48;
    unint64_t v9 = v49;
    uint64_t v50 = swift_unknownObjectRetain();
    uint64_t v17 = sub_183CECAE0(v50, v43, v44, v67);
    unint64_t v11 = v51;
    uint64_t v64 = v52;
    *(void *)&__int128 v66 = v53;
    if ((v9 & 1) == 0)
    {
      swift_unknownObjectRetain();
LABEL_27:
      sub_183CF84D8(v46, v15, v16, v9);
      uint64_t v55 = v54;
      goto LABEL_34;
    }

    sub_183D04FD4();
    swift_unknownObjectRetain_n();
    uint64_t v4 = v46;
    uint64_t v56 = swift_dynamicCastClass();
    if (!v56)
    {
      swift_unknownObjectRelease();
      uint64_t v56 = MEMORY[0x18961AFE8];
    }

    uint64_t v57 = *(void *)(v56 + 16);
    swift_release();
    if (!__OFSUB__(v9 >> 1, v16))
    {
      if (v57 == (v9 >> 1) - v16)
      {
        uint64_t v55 = swift_dynamicCastClass();
        if (!v55)
        {
          swift_unknownObjectRelease();
          uint64_t v55 = MEMORY[0x18961AFE8];
        }

LABEL_34:
        swift_unknownObjectRelease();
        if ((v11 & 1) != 0)
        {
          sub_183D04FD4();
          swift_unknownObjectRetain_n();
          uint64_t v61 = swift_dynamicCastClass();
          if (!v61)
          {
            swift_unknownObjectRelease();
            uint64_t v61 = MEMORY[0x18961AFE8];
          }

          uint64_t v62 = *(void *)(v61 + 16);
          swift_release();
          if (__OFSUB__(v11 >> 1, (void)v66))
          {
            __break(1u);
          }

          else if (v62 == (v11 >> 1) - (void)v66)
          {
            uint64_t v59 = swift_dynamicCastClass();
            uint64_t v60 = v83;
            if (!v59)
            {
              swift_unknownObjectRelease();
              uint64_t v59 = MEMORY[0x18961AFE8];
            }

            goto LABEL_43;
          }

          swift_unknownObjectRelease();
        }

        else
        {
          swift_unknownObjectRetain();
        }

        sub_183CF84D8(v17, v64, v66, v11);
        uint64_t v59 = v58;
        uint64_t v60 = v83;
LABEL_43:
        swift_unknownObjectRelease();
        sub_183CE1FDC((uint64_t)v77);
        sub_183CE1FDC((uint64_t)v76);
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        *uint64_t v60 = v55;
        v60[1] = v59;
        return result;
      }

      goto LABEL_48;
    }

uint64_t sub_183CF4F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (qword_18C6648A0 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_183CEF798(qword_18C669AA8, unk_18C669AB0, xmmword_18C669AB8, *((char **)&xmmword_18C669AB8 + 1), a2);
  if (v3) {
    return v4;
  }
  uint64_t v47 = v6;
  if (qword_18C664630 != -1) {
    swift_once();
  }
  __int128 v37 = xmmword_18C6690E8;
  uint64_t v7 = qword_18C6690F8;
  uint64_t v8 = qword_18C669100;
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_183CF8904();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  __int128 v40 = v37;
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v44 = v11;
  uint64_t v45 = v13;
  uint64_t v46 = v15;
  swift_unknownObjectRetain();
  uint64_t v16 = (char *)&v47;
  sub_183CDC7AC((uint64_t)&v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v4 + 24);
  if (result != 1)
  {
    uint64_t v18 = (char *)swift_bridgeObjectRetain();
    uint64_t v19 = sub_183CEC58C(v18);
    uint64_t v21 = v20;
    uint64_t v36 = v23;
    uint64_t v38 = v22;
    uint64_t v24 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_18C669248;
    uint64_t v26 = qword_18C669250;
    uint64_t v27 = qword_18C669258;
    unint64_t v28 = qword_18C669260;
    uint64_t v29 = v47;
    if (!v47) {
      uint64_t v29 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v47 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v30 = sub_183CF89BC((uint64_t)&v47, v26, v27, v28);
    int64_t v31 = *((void *)v47 + 2);
    if (v31 < v30)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v30, v31);
      uint64_t v16 = v47;
      if (!v47)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_20:
        int v39 = *(_DWORD *)(v4 + 16);
        uint64_t v4 = sub_183CEF230(&v39, v16);
        swift_bridgeObjectRelease();
        return v4;
      }

      uint64_t v35 = v21;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_16:
        unint64_t v33 = *((void *)v16 + 2);
        unint64_t v32 = *((void *)v16 + 3);
        if (v33 >= v32 >> 1) {
          uint64_t v16 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v33 + 1;
        int64_t v34 = &v16[64 * v33];
        *((void *)v34 + 4) = v25;
        *((void *)v34 + 5) = v26;
        *((void *)v34 + 6) = v27;
        *((void *)v34 + 7) = v28;
        *((void *)v34 + 8) = v19;
        *((void *)v34 + 9) = v35;
        *((void *)v34 + 10) = v38;
        *((void *)v34 + 11) = v36;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        goto LABEL_20;
      }
    }

    uint64_t v16 = sub_183CE67E0(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_183CF52E8(uint64_t a1, uint64_t a2)
{
  if (qword_18C6646E0 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_183CEF798(qword_18C6693A8, qword_18C6693B0, qword_18C6693B8, unk_18C6693C0, a2);
  if (v3) {
    return a1;
  }
  uint64_t v7 = v6;
  uint64_t v82 = v6;
  uint64_t v8 = (char *)MEMORY[0x18961AFE8];
  char v76 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9 == 1)
  {
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v11 = 0LL;
  uint64_t v10 = (char *)swift_bridgeObjectRetain();
  uint64_t v12 = sub_183CEC58C(v10);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v72 = v17;
  uint64_t v68 = v2;
  uint64_t v18 = qword_18C664688;
  swift_unknownObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_18C669248;
  uint64_t v19 = qword_18C669250;
  uint64_t v21 = (char *)qword_18C669258;
  unint64_t v22 = qword_18C669260;
  __int128 v75 = v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v70 = v21;
  uint64_t v23 = sub_183CF89BC((uint64_t)&v75, v19, (uint64_t)v21, v22);
  int64_t v24 = *((void *)v75 + 2);
  if (v24 < v23)
  {
    __break(1u);
LABEL_46:
    uint64_t v21 = sub_183CE67E0(0LL, *((void *)v21 + 2) + 1LL, 1, v21);
    goto LABEL_10;
  }

  sub_183CF8CD4(v23, v24);
  uint64_t v21 = v75;
  if (!v75)
  {
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    goto LABEL_14;
  }

  uint64_t v69 = 0LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_46;
  }
LABEL_10:
  unint64_t v26 = *((void *)v21 + 2);
  unint64_t v25 = *((void *)v21 + 3);
  if (v26 >= v25 >> 1) {
    uint64_t v21 = sub_183CE67E0((char *)(v25 > 1), v26 + 1, 1, v21);
  }
  *((void *)v21 + 2) = v26 + 1;
  uint64_t v27 = &v21[64 * v26];
  *((void *)v27 + 4) = v20;
  *((void *)v27 + 5) = v19;
  *((void *)v27 + 6) = v70;
  *((void *)v27 + 7) = v22;
  *((void *)v27 + 8) = v12;
  *((void *)v27 + 9) = v72;
  *((void *)v27 + 10) = v14;
  *((void *)v27 + 11) = v16;
  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  __int128 v75 = v21;
  uint64_t v11 = v69;
LABEL_14:
  uint64_t v28 = v11;
  sub_183CE109C(0x11uLL, 0, 1, &v76, v21);
  uint64_t v29 = v11;
  swift_bridgeObjectRelease();
  a1 = (uint64_t)v76;
  if (v28)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183CDD24C();
    swift_allocError();
    *uint64_t v30 = 22;
    swift_willThrow();
    swift_unknownObjectRelease();
    MEMORY[0x186E26038](v29);
    return a1;
  }

  sub_183CE20C8((uint64_t)v76, (uint64_t)(v76 + 32), 0LL, (2LL * *((void *)v76 + 2)) | 1, (uint64_t)&v77);
  swift_bridgeObjectRelease();
  __int128 v74 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  unint64_t v32 = v77;
  unint64_t v33 = (char *)v78;
  sub_183CDD0CC((uint64_t)&v79, (uint64_t)v80);
  sub_183CDD0CC((uint64_t)v80, (uint64_t)v81);
  char v34 = v81[40];
  sub_183CF9640((uint64_t)&v77);
  sub_183CE0748(v32, (char)v33, (v34 & 1) == 0, (uint64_t)&v74, (uint64_t)&v77);
  a1 = 0LL;
  sub_183CE2004((uint64_t)&v77);
  uint64_t v35 = v74;
  uint64_t v36 = *((void *)v74 + 2);
  sub_183CE2004((uint64_t)&v77);
  uint64_t v37 = qword_18C664630;
  swift_unknownObjectRetain();
  if (v37 != -1) {
    swift_once();
  }
  __int128 v38 = xmmword_18C6690E8;
  uint64_t v39 = qword_18C6690F8;
  unint64_t v40 = qword_18C669100;
  if (!v7) {
    uint64_t v82 = (char *)MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v41 = sub_183CF89BC((uint64_t)&v82, *((uint64_t *)&v38 + 1), v39, v40);
  int64_t v42 = *((void *)v82 + 2);
  if (v42 < v41)
  {
    __break(1u);
LABEL_48:
    unint64_t v33 = sub_183CE67E0(0LL, *((void *)v33 + 2) + 1LL, 1, v33);
    goto LABEL_25;
  }

  sub_183CF8CD4(v41, v42);
  unint64_t v33 = v82;
  if (!v82)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_29;
  }

  uint64_t v72 = 0LL;
  a1 = 1LL;
  uint64_t v70 = v35 + 32;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_48;
  }
LABEL_25:
  uint64_t v43 = a1 | (2 * v36);
  unint64_t v45 = *((void *)v33 + 2);
  unint64_t v44 = *((void *)v33 + 3);
  if (v45 >= v44 >> 1) {
    unint64_t v33 = sub_183CE67E0((char *)(v44 > 1), v45 + 1, 1, v33);
  }
  *((void *)v33 + 2) = v45 + 1;
  uint64_t v46 = &v33[64 * v45];
  *((_OWORD *)v46 + 2) = v38;
  *((void *)v46 + 6) = v39;
  *((void *)v46 + 7) = v40;
  *((void *)v46 + 8) = v35;
  *((void *)v46 + 9) = v70;
  *((void *)v46 + 10) = 0LL;
  *((void *)v46 + 11) = v43;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v82 = v33;
  a1 = v72;
LABEL_29:
  uint64_t v9 = *(void *)(v68 + 24);
  if (v9 != 1)
  {
    uint64_t v47 = (char *)swift_bridgeObjectRetain();
    uint64_t v48 = sub_183CEC58C(v47);
    if (a1)
    {
      sub_183CDD24C();
      swift_allocError();
      *uint64_t v52 = 22;
      swift_willThrow();
      MEMORY[0x186E26038](a1);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
LABEL_43:
      swift_bridgeObjectRelease();
      return a1;
    }

    uint64_t v53 = v48;
    uint64_t v54 = v49;
    uint64_t v55 = v50;
    uint64_t v73 = v51;
    uint64_t v57 = qword_18C669248;
    uint64_t v56 = qword_18C669250;
    uint64_t v59 = (char *)qword_18C669258;
    unint64_t v58 = qword_18C669260;
    uint64_t v60 = (char *)MEMORY[0x18961AFE8];
    if (v33) {
      uint64_t v60 = v33;
    }
    uint64_t v82 = v60;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    __int128 v71 = v59;
    uint64_t v61 = sub_183CF89BC((uint64_t)&v82, v56, (uint64_t)v59, v58);
    int64_t v62 = *((void *)v82 + 2);
    if (v62 < v61)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v61, v62);
      uint64_t v59 = v82;
      if (!v82)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v59 = v82;
LABEL_41:
        LODWORD(v74) = *(_DWORD *)(v68 + 16);
        uint64_t v66 = sub_183CEF230((int *)&v74, v59);
        if (!a1)
        {
          a1 = v66;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return a1;
        }

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }

      uint64_t v67 = a1;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_37:
        unint64_t v64 = *((void *)v59 + 2);
        unint64_t v63 = *((void *)v59 + 3);
        if (v64 >= v63 >> 1) {
          uint64_t v59 = sub_183CE67E0((char *)(v63 > 1), v64 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v64 + 1;
        uint64_t v65 = &v59[64 * v64];
        *((void *)v65 + 4) = v57;
        *((void *)v65 + 5) = v56;
        *((void *)v65 + 6) = v71;
        *((void *)v65 + 7) = v58;
        *((void *)v65 + 8) = v53;
        *((void *)v65 + 9) = v54;
        *((void *)v65 + 10) = v55;
        *((void *)v65 + 11) = v73;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v82 = v59;
        a1 = v67;
        goto LABEL_41;
      }
    }

    uint64_t v59 = sub_183CE67E0(0LL, *((void *)v59 + 2) + 1LL, 1, v59);
    goto LABEL_37;
  }

LABEL_52:
  __break(1u);
  sub_183CE2004(v9);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

char *sub_183CF5A9C()
{
  uint64_t result = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  unint64_t v6 = result;
  uint64_t v3 = *(char **)(v0 + 24);
  if (v3 == (char *)1)
  {
    __break(1u);
  }

  else
  {
    sub_183CF9690((uint64_t)v3);
    sub_183CE109C(0x11uLL, 0, 1, &v6, v3);
    sub_183CF9680((uint64_t)v3);
    uint64_t v4 = v6;
    if (v1)
    {
      swift_bridgeObjectRelease();
      sub_183CDD24C();
      swift_allocError();
      *int v5 = 22;
      swift_willThrow();
      MEMORY[0x186E26038](v1);
    }

    return v4;
  }

  return result;
}

char *sub_183CF5B70()
{
  uint64_t v2 = *(char **)(v0 + 24);
  if (v2 == (char *)1)
  {
    sub_183CDD24C();
    swift_allocError();
    *uint64_t v3 = 10;
    swift_willThrow();
  }

  else
  {
    uint64_t v4 = v1;
    uint64_t v5 = qword_18C664688;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669250, qword_18C669258, qword_18C669260, (uint64_t)v2, (uint64_t)v11);
    sub_183CF9680((uint64_t)v2);
    if (!v4)
    {
      v15[0] = v12;
      v15[1] = v13;
      uint64_t v7 = *((void *)&v12 + 1);
      uint64_t v6 = v12;
      __int128 v8 = v13;
      swift_unknownObjectRetain();
      sub_183CDD218((uint64_t)v11);
      sub_183CE1F44((uint64_t)v15);
      sub_183CE1F44((uint64_t)v15);
      sub_183CE20C8(v6, v7, v8, *((unint64_t *)&v8 + 1), (uint64_t)v14);
      uint64_t v10 = (char *)MEMORY[0x18961AFE8];
      uint64_t v2 = sub_183CDE290((uint64_t)v14, 17LL, 0, &v10);
      sub_183CE2004((uint64_t)v14);
      swift_bridgeObjectRelease();
      sub_183CE1FDC((uint64_t)v15);
      sub_183CE1FDC((uint64_t)v15);
      sub_183CE1FDC((uint64_t)v15);
    }
  }

  return v2;
}

char sub_183CF5D58@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = sub_183CF5B70();
  if (!v1)
  {
    uint64_t v4 = (uint64_t)v3;
    if (qword_18C664670 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6691F0, qword_18C6691F8, qword_18C669200, v4, (uint64_t)v10);
    swift_bridgeObjectRelease();
    v14[0] = v11;
    v14[1] = v12;
    __int128 v5 = v11;
    __int128 v6 = v12;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v10);
    sub_183CE1F44((uint64_t)v14);
    sub_183CE20C8(v5, *((uint64_t *)&v5 + 1), v6, *((unint64_t *)&v6 + 1), (uint64_t)v13);
    Swift::Int64 v7 = sub_183CED74C((uint64_t)v13, 2LL, 0);
    sub_183CE1FDC((uint64_t)v14);
    LOBYTE(v3) = AKSRefKeyType.init(rawValue:)(v7);
    if (v9 == 12)
    {
      __break(1u);
    }

    else
    {
      LOBYTE(v3) = sub_183CE1FDC((uint64_t)v14);
      *a1 = v9;
    }
  }

  return (char)v3;
}

uint64_t sub_183CF5EF4()
{
  uint64_t v2 = sub_183CF5B70();
  if (!v0)
  {
    uint64_t v3 = (uint64_t)v2;
    if (qword_18C664668 != -1) {
      swift_once();
    }
    sub_183CDCDA4( *((uint64_t *)&xmmword_18C6691C8 + 1),  xmmword_18C6691D8,  *((unint64_t *)&xmmword_18C6691D8 + 1),  v3,  (uint64_t)v19);
    swift_bridgeObjectRelease();
    v22[0] = v20;
    v22[1] = v21;
    uint64_t v4 = *((void *)&v20 + 1);
    __int128 v5 = v21;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v19);
    uint64_t v6 = swift_unknownObjectRetain();
    uint64_t v7 = sub_183CECD90(v6, v4, v5, *((unint64_t *)&v5 + 1), 4LL, 0LL);
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    unint64_t v15 = v10;
    if ((v10 & 1) != 0)
    {
      sub_183D04FD4();
      swift_unknownObjectRetain_n();
      uint64_t v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_unknownObjectRelease();
        uint64_t v17 = MEMORY[0x18961AFE8];
      }

      uint64_t v18 = *(void *)(v17 + 16);
      swift_release();
      if (__OFSUB__(v15 >> 1, v14))
      {
        __break(1u);
      }

      else if (v18 == (v15 >> 1) - v14)
      {
        uint64_t v1 = swift_dynamicCastClass();
        if (!v1)
        {
          swift_unknownObjectRelease();
          uint64_t v1 = MEMORY[0x18961AFE8];
        }

        goto LABEL_14;
      }

      swift_unknownObjectRelease();
    }

    sub_183CF84D8(v12, v13, v14, v15);
    uint64_t v1 = v16;
LABEL_14:
    swift_unknownObjectRelease();
    sub_183CE1FDC((uint64_t)v22);
  }

  return v1;
}

char *sub_183CF60F0()
{
  if (qword_18C664640 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 24);
  if (v2 == 1)
  {
    sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
    goto LABEL_16;
  }

  uint64_t v4 = qword_18C669138;
  unint64_t v3 = unk_18C669140;
  uint64_t v5 = qword_18C669130;
  sub_183CF9690(*(void *)(v0 + 24));
  sub_183CDCDA4(v5, v4, v3, v2, (uint64_t)v20);
  if (!v1)
  {
    sub_183CF9680(v2);
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    unint64_t v13 = v24;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v20);
    v25[0] = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
    if (v10)
    {
      sub_183CF8810(v10, v11, v12, v13);
      swift_unknownObjectRelease();
      return (char *)v25[0];
    }

    goto LABEL_14;
  }

  sub_183CF9680(v2);
  MEMORY[0x186E26038](v1);
  if (qword_18C664638 != -1) {
    swift_once();
  }
  uint64_t v6 = *(void *)(v0 + 24);
  if (v6 == 1) {
    goto LABEL_15;
  }
  uint64_t v7 = qword_18C669118;
  unint64_t v8 = unk_18C669120;
  uint64_t v9 = qword_18C669110;
  swift_bridgeObjectRetain();
  sub_183CDCDA4(v9, v7, v8, v6, (uint64_t)v25);
  sub_183CF9680(v6);
  uint64_t v14 = v25[4];
  uint64_t v15 = v25[5];
  uint64_t v16 = v25[6];
  unint64_t v17 = v25[7];
  swift_unknownObjectRetain();
  sub_183CDD218((uint64_t)v25);
  uint64_t result = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  uint64_t v19 = result;
  if (v14)
  {
    sub_183CF8810(v14, v15, v16, v17);
    swift_unknownObjectRelease();
    return v19;
  }

uint64_t sub_183CF6330()
{
  uint64_t v2 = sub_183CF5B70();
  if (!v0)
  {
    uint64_t v3 = (uint64_t)v2;
    if (qword_18C664680 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669230, xmmword_18C669238, *((unint64_t *)&xmmword_18C669238 + 1), v3, (uint64_t)v19);
    swift_bridgeObjectRelease();
    v22[0] = v20;
    v22[1] = v21;
    uint64_t v4 = *((void *)&v20 + 1);
    __int128 v5 = v21;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v19);
    uint64_t v6 = swift_unknownObjectRetain();
    uint64_t v7 = sub_183CECAE0(v6, v4, v5, *((unint64_t *)&v5 + 1));
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    unint64_t v15 = v10;
    if ((v10 & 1) != 0)
    {
      sub_183D04FD4();
      swift_unknownObjectRetain_n();
      uint64_t v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_unknownObjectRelease();
        uint64_t v17 = MEMORY[0x18961AFE8];
      }

      uint64_t v18 = *(void *)(v17 + 16);
      swift_release();
      if (__OFSUB__(v15 >> 1, v14))
      {
        __break(1u);
      }

      else if (v18 == (v15 >> 1) - v14)
      {
        uint64_t v1 = swift_dynamicCastClass();
        if (!v1)
        {
          swift_unknownObjectRelease();
          uint64_t v1 = MEMORY[0x18961AFE8];
        }

        goto LABEL_14;
      }

      swift_unknownObjectRelease();
    }

    sub_183CF84D8(v12, v13, v14, v15);
    uint64_t v1 = v16;
LABEL_14:
    swift_unknownObjectRelease();
    sub_183CE1FDC((uint64_t)v22);
  }

  return v1;
}

uint64_t sub_183CF6524()
{
  uint64_t v2 = sub_183CF5B70();
  if (!v1)
  {
    uint64_t v3 = (uint64_t)v2;
    if (qword_18C664678 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C669210, *(uint64_t *)algn_18C669218, qword_18C669220, v3, (uint64_t)v8);
    swift_bridgeObjectRelease();
    v12[0] = v9;
    v12[1] = v10;
    uint64_t v5 = *((void *)&v9 + 1);
    uint64_t v4 = v9;
    __int128 v6 = v10;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v8);
    sub_183CE1F44((uint64_t)v12);
    sub_183CE20C8(v4, v5, v6, *((unint64_t *)&v6 + 1), (uint64_t)v11);
    uint64_t v0 = sub_183CED994((uint64_t)v11, 2LL, 0);
    sub_183CE1FDC((uint64_t)v12);
    sub_183CE1FDC((uint64_t)v12);
  }

  return v0;
}

void sub_183CF6694(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 16);
}

char sub_183CF66A0@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = sub_183CF5B70();
  if (!v1)
  {
    uint64_t v4 = (uint64_t)v3;
    if (qword_18C664628 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6690D0, qword_18C6690D8, qword_18C6690E0, v4, (uint64_t)v10);
    swift_bridgeObjectRelease();
    v14[0] = v11;
    v14[1] = v12;
    __int128 v5 = v11;
    __int128 v6 = v12;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v10);
    sub_183CE1F44((uint64_t)v14);
    sub_183CE20C8(v5, *((uint64_t *)&v5 + 1), v6, *((unint64_t *)&v6 + 1), (uint64_t)v13);
    Swift::Int64 v7 = sub_183CED74C((uint64_t)v13, 2LL, 0);
    sub_183CE1FDC((uint64_t)v14);
    LOBYTE(v3) = AKSKeyClass.init(rawValue:)(v7);
    if (v9 == 20)
    {
      __break(1u);
    }

    else
    {
      LOBYTE(v3) = sub_183CE1FDC((uint64_t)v14);
      *a1 = v9;
    }
  }

  return (char)v3;
}

uint64_t sub_183CF683C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (uint64_t)sub_183CF5B70();
  if (!v1)
  {
    uint64_t v4 = result;
    if (qword_18C6647F0 != -1) {
      swift_once();
    }
    sub_183CDCDA4(qword_18C6697F0, xmmword_18C6697F8, *((unint64_t *)&xmmword_18C6697F8 + 1), v4, (uint64_t)v8);
    swift_bridgeObjectRelease();
    v12[0] = v9;
    v12[1] = v10;
    __int128 v5 = v9;
    __int128 v6 = v10;
    swift_unknownObjectRetain();
    sub_183CDD218((uint64_t)v8);
    sub_183CE1F44((uint64_t)v12);
    sub_183CE20C8(v5, *((uint64_t *)&v5 + 1), v6, *((unint64_t *)&v6 + 1), (uint64_t)v11);
    uint64_t v7 = sub_183CED4E0((uint64_t)v11, 2LL, 0);
    sub_183CE1FDC((uint64_t)v12);
    uint64_t result = sub_183CE1FDC((uint64_t)v12);
    *a1 = v7;
  }

  return result;
}

char *sub_183CF69B0()
{
  uint64_t v2 = v0;
  if (qword_18C6646F0 != -1) {
    swift_once();
  }
  uint64_t result = sub_183CEF798(qword_18C6693E8, unk_18C6693F0, xmmword_18C6693F8, *((char **)&xmmword_18C6693F8 + 1), 0LL);
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v30 = result;
    uint64_t result = *(char **)(v0 + 24);
    if (result == (char *)1)
    {
      __break(1u);
      return result;
    }

    __int128 v6 = 0LL;
    __int128 v5 = (char *)swift_bridgeObjectRetain();
    uint64_t v7 = sub_183CEC58C(v5);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v28 = v12;
    uint64_t v13 = qword_18C664688;
    swift_unknownObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_18C669248;
    uint64_t v15 = qword_18C669250;
    uint64_t v16 = qword_18C669258;
    unint64_t v17 = qword_18C669260;
    if (!v4) {
      uint64_t v30 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v18 = sub_183CF89BC((uint64_t)&v30, v15, v16, v17);
    int64_t v19 = *((void *)v30 + 2);
    if (v19 < v18)
    {
      __break(1u);
    }

    else
    {
      uint64_t v20 = 0LL;
      sub_183CF8CD4(v18, v19);
      __int128 v6 = v30;
      if (!v30)
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
LABEL_16:
        int v29 = *(_DWORD *)(v2 + 16);
        sub_183CEF230(&v29, v6);
        if (!v20) {
          swift_bridgeObjectRelease();
        }
        return (char *)swift_bridgeObjectRelease();
      }

      uint64_t v26 = v15;
      uint64_t v27 = 0LL;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_12:
        unint64_t v22 = *((void *)v6 + 2);
        unint64_t v21 = *((void *)v6 + 3);
        uint64_t v23 = v16;
        if (v22 >= v21 >> 1)
        {
          unint64_t v25 = sub_183CE67E0((char *)(v21 > 1), v22 + 1, 1, v6);
          uint64_t v23 = v16;
          __int128 v6 = v25;
        }

        *((void *)v6 + 2) = v22 + 1;
        unint64_t v24 = &v6[64 * v22];
        *((void *)v24 + 4) = v14;
        *((void *)v24 + 5) = v26;
        *((void *)v24 + 6) = v23;
        *((void *)v24 + 7) = v17;
        *((void *)v24 + 8) = v7;
        *((void *)v24 + 9) = v28;
        *((void *)v24 + 10) = v9;
        *((void *)v24 + 11) = v11;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v20 = v27;
        goto LABEL_16;
      }
    }

    __int128 v6 = sub_183CE67E0(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
    goto LABEL_12;
  }

  return result;
}

uint64_t AKSRefKey.deinit()
{
  return v0;
}

uint64_t AKSRefKey.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AKSRefKeyCreateAndEncrypt(handle:key_class:key_type:data:params:)( int *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  return sub_183CF6CE4(a1, a2, a3, a4, a5, (void (*)(char *, char *, uint64_t, uint64_t))sub_183CF0674);
}

uint64_t AKSRefKeyCreateAndWrap(handle:key_class:key_type:data:params:)( int *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  return sub_183CF6CE4(a1, a2, a3, a4, a5, (void (*)(char *, char *, uint64_t, uint64_t))sub_183CF0BE8);
}

uint64_t sub_183CF6CE4( int *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t, uint64_t))
{
  int v10 = *a1;
  char v11 = *a2;
  char v12 = *a3;
  type metadata accessor for AKSRefKey();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 24) = xmmword_183D0A7C0;
  *(_DWORD *)(v13 + 16) = v10;
  char v16 = v11;
  char v15 = v12;
  a6(&v16, &v15, a4, a5);
  if (v6) {
    swift_release();
  }
  return v13;
}

uint64_t AKSSystemKeyCollection(type:generation:params:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_18C664750 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_183CEF798(qword_18C669568, unk_18C669570, xmmword_18C669578, *((char **)&xmmword_18C669578 + 1), a3);
  if (!v3)
  {
    uint64_t v7 = v6;
    uint64_t v41 = v6;
    if (qword_18C664770 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_18C6695E8;
    uint64_t v9 = unk_18C6695F0;
    __int128 v10 = xmmword_18C6695F8;
    char v11 = sub_183CEC418();
    uint64_t v35 = v13;
    uint64_t v36 = v12;
    uint64_t v38 = v14;
    if (!v7) {
      uint64_t v41 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v15 = sub_183CF89BC((uint64_t)&v41, v9, v10, *((unint64_t *)&v10 + 1));
    int64_t v16 = *((void *)v41 + 2);
    if (v16 < v15)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v15, v16);
      uint64_t v7 = v41;
      if (v41)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_183CE67E0(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
        }
        unint64_t v18 = *((void *)v7 + 2);
        unint64_t v17 = *((void *)v7 + 3);
        if (v18 >= v17 >> 1) {
          uint64_t v7 = sub_183CE67E0((char *)(v17 > 1), v18 + 1, 1, v7);
        }
        *((void *)v7 + 2) = v18 + 1;
        int64_t v19 = &v7[64 * v18];
        *((void *)v19 + 4) = v8;
        *((void *)v19 + 5) = v9;
        *((_OWORD *)v19 + 3) = v10;
        *((void *)v19 + 8) = v11;
        *((void *)v19 + 9) = v38;
        *((void *)v19 + 10) = v36;
        *((void *)v19 + 11) = v35;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v41 = v7;
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      if (qword_18C664790 == -1)
      {
LABEL_17:
        uint64_t v20 = qword_18C669668;
        uint64_t v21 = unk_18C669670;
        __int128 v22 = xmmword_18C669678;
        unint64_t v24 = sub_183CEC418();
        uint64_t v26 = v25;
        uint64_t v37 = v28;
        uint64_t v39 = v27;
        int v29 = (char *)MEMORY[0x18961AFE8];
        if (v7) {
          int v29 = v7;
        }
        uint64_t v41 = v29;
        swift_unknownObjectRetain();
        uint64_t v30 = sub_183CF89BC((uint64_t)&v41, v21, v22, *((unint64_t *)&v22 + 1));
        int64_t v31 = *((void *)v41 + 2);
        if (v31 < v30)
        {
          __break(1u);
        }

        else
        {
          sub_183CF8CD4(v30, v31);
          uint64_t v7 = v41;
          if (!v41)
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
LABEL_28:
            int v40 = -1;
            uint64_t v4 = sub_183CEF230(&v40, v7);
            swift_bridgeObjectRelease();
            return v4;
          }

          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_24:
            unint64_t v33 = *((void *)v7 + 2);
            unint64_t v32 = *((void *)v7 + 3);
            if (v33 >= v32 >> 1) {
              uint64_t v7 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v7);
            }
            *((void *)v7 + 2) = v33 + 1;
            char v34 = &v7[64 * v33];
            *((void *)v34 + 4) = v20;
            *((void *)v34 + 5) = v21;
            *((_OWORD *)v34 + 3) = v22;
            *((void *)v34 + 8) = v24;
            *((void *)v34 + 9) = v39;
            *((void *)v34 + 10) = v26;
            *((void *)v34 + 11) = v37;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_28;
          }
        }

        uint64_t v7 = sub_183CE67E0(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
        goto LABEL_24;
      }
    }

    swift_once();
    goto LABEL_17;
  }

  return v4;
}

uint64_t AKSSystemKeyAttest(type:generation:ref_key:params:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a3 + 24);
  if (result != 1)
  {
    uint64_t v8 = (char *)swift_bridgeObjectRetain();
    uint64_t v9 = sub_183CEC58C(v8);
    if (v4)
    {
      sub_183CDD24C();
      swift_allocError();
      _BYTE *v13 = 25;
      swift_willThrow();
      MEMORY[0x186E26038](v4);
      return v5;
    }

    uint64_t v14 = v9;
    uint64_t v15 = v10;
    uint64_t v16 = v11;
    uint64_t v17 = v12;
    uint64_t v18 = qword_18C664748;
    swift_unknownObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    int64_t v19 = sub_183CEF798(qword_18C669548, qword_18C669550, qword_18C669558, unk_18C669560, a4);
    uint64_t v20 = 0LL;
    uint64_t v21 = v19;
    uint64_t v69 = v14;
    uint64_t v72 = v19;
    if (qword_18C664688 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_18C669248;
    uint64_t v22 = qword_18C669250;
    uint64_t v24 = qword_18C669258;
    unint64_t v25 = qword_18C669260;
    if (!v21) {
      uint64_t v72 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v26 = sub_183CF89BC((uint64_t)&v72, v22, v24, v25);
    int64_t v27 = *((void *)v72 + 2);
    if (v27 < v26)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v26, v27);
      uint64_t v20 = v72;
      unint64_t v64 = 0LL;
      if (v72)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = sub_183CE67E0(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
        }
        unint64_t v29 = *((void *)v20 + 2);
        unint64_t v28 = *((void *)v20 + 3);
        uint64_t v30 = v22;
        if (v29 >= v28 >> 1)
        {
          unint64_t v63 = sub_183CE67E0((char *)(v28 > 1), v29 + 1, 1, v20);
          uint64_t v30 = v22;
          uint64_t v20 = v63;
        }

        *((void *)v20 + 2) = v29 + 1;
        int64_t v31 = &v20[64 * v29];
        *((void *)v31 + 4) = v23;
        *((void *)v31 + 5) = v30;
        *((void *)v31 + 6) = v24;
        *((void *)v31 + 7) = v25;
        *((void *)v31 + 8) = v69;
        *((void *)v31 + 9) = v15;
        *((void *)v31 + 10) = v16;
        *((void *)v31 + 11) = v17;
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v72 = v20;
      }

      else
      {
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease();
      }

      if (qword_18C664770 == -1)
      {
LABEL_19:
        uint64_t v5 = qword_18C6695E8;
        uint64_t v32 = unk_18C6695F0;
        __int128 v33 = xmmword_18C6695F8;
        char v34 = sub_183CEC418();
        uint64_t v38 = v64;
        if (v64)
        {
LABEL_32:
          sub_183CDD24C();
          swift_allocError();
          *uint64_t v53 = 22;
          swift_willThrow();
          MEMORY[0x186E26038](v38);
LABEL_33:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          return v5;
        }

        uint64_t v39 = v34;
        int v40 = v35;
        uint64_t v65 = v37;
        uint64_t v67 = v36;
        uint64_t v41 = (char *)MEMORY[0x18961AFE8];
        if (v20) {
          uint64_t v41 = v20;
        }
        uint64_t v72 = v41;
        swift_unknownObjectRetain();
        uint64_t v42 = sub_183CF89BC((uint64_t)&v72, v32, v33, *((unint64_t *)&v33 + 1));
        int64_t v43 = *((void *)v72 + 2);
        if (v43 < v42)
        {
          __break(1u);
        }

        else
        {
          sub_183CF8CD4(v42, v43);
          uint64_t v20 = v72;
          uint64_t v69 = 0LL;
          if (v72)
          {
            unint64_t v64 = v40;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v20 = sub_183CE67E0(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
            }
            unint64_t v45 = *((void *)v20 + 2);
            unint64_t v44 = *((void *)v20 + 3);
            if (v45 >= v44 >> 1) {
              uint64_t v20 = sub_183CE67E0((char *)(v44 > 1), v45 + 1, 1, v20);
            }
            *((void *)v20 + 2) = v45 + 1;
            uint64_t v46 = &v20[64 * v45];
            *((void *)v46 + 4) = v5;
            *((void *)v46 + 5) = v32;
            *((_OWORD *)v46 + 3) = v33;
            *((void *)v46 + 8) = v39;
            *((void *)v46 + 9) = v64;
            *((void *)v46 + 10) = v67;
            *((void *)v46 + 11) = v65;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v72 = v20;
          }

          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }

          if (qword_18C664790 == -1)
          {
LABEL_31:
            uint64_t v5 = qword_18C669668;
            uint64_t v47 = unk_18C669670;
            __int128 v48 = xmmword_18C669678;
            uint64_t v49 = sub_183CEC418();
            uint64_t v38 = v69;
            if (v69) {
              goto LABEL_32;
            }
            uint64_t v54 = v49;
            uint64_t v66 = v52;
            uint64_t v68 = v51;
            uint64_t v70 = v50;
            uint64_t v55 = (char *)MEMORY[0x18961AFE8];
            if (v20) {
              uint64_t v55 = v20;
            }
            uint64_t v72 = v55;
            swift_unknownObjectRetain();
            uint64_t v56 = sub_183CF89BC((uint64_t)&v72, v47, v48, *((unint64_t *)&v48 + 1));
            int64_t v57 = *((void *)v72 + 2);
            if (v57 < v56)
            {
              __break(1u);
            }

            else
            {
              unint64_t v58 = 0LL;
              sub_183CF8CD4(v56, v57);
              uint64_t v38 = v72;
              if (!v72)
              {
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                goto LABEL_44;
              }

              unint64_t v64 = 0LL;
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
LABEL_40:
                unint64_t v60 = *((void *)v38 + 2);
                unint64_t v59 = *((void *)v38 + 3);
                if (v60 >= v59 >> 1) {
                  uint64_t v38 = sub_183CE67E0((char *)(v59 > 1), v60 + 1, 1, v38);
                }
                *((void *)v38 + 2) = v60 + 1;
                uint64_t v61 = &v38[64 * v60];
                *((void *)v61 + 4) = v5;
                *((void *)v61 + 5) = v47;
                *((_OWORD *)v61 + 3) = v48;
                *((void *)v61 + 8) = v54;
                *((void *)v61 + 9) = v70;
                *((void *)v61 + 10) = v68;
                *((void *)v61 + 11) = v66;
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                unint64_t v58 = v64;
LABEL_44:
                int v71 = -1;
                uint64_t v62 = sub_183CEF230(&v71, v38);
                if (!v58)
                {
                  uint64_t v5 = v62;
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRelease();
                  return v5;
                }

                goto LABEL_33;
              }
            }

            uint64_t v38 = sub_183CE67E0(0LL, *((void *)v38 + 2) + 1LL, 1, v38);
            goto LABEL_40;
          }
        }

        swift_once();
        goto LABEL_31;
      }
    }

    swift_once();
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

char *AKSSystemKeyOperate(type:operation:params:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_18C664760 != -1) {
    swift_once();
  }
  uint64_t result = sub_183CEF798(qword_18C6695A8, qword_18C6695B0, qword_18C6695B8, unk_18C6695C0, a3);
  if (!v3)
  {
    uint64_t v6 = result;
    uint64_t v41 = result;
    if (qword_18C664770 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_18C6695E8;
    uint64_t v8 = unk_18C6695F0;
    __int128 v9 = xmmword_18C6695F8;
    uint64_t v10 = 0LL;
    uint64_t v11 = sub_183CEC418();
    uint64_t v35 = v13;
    uint64_t v36 = v12;
    uint64_t v38 = v14;
    if (!v6) {
      uint64_t v41 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v15 = sub_183CF89BC((uint64_t)&v41, v8, v9, *((unint64_t *)&v9 + 1));
    int64_t v16 = *((void *)v41 + 2);
    if (v16 < v15)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v15, v16);
      uint64_t v10 = v41;
      if (v41)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_183CE67E0(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
        }
        unint64_t v18 = *((void *)v10 + 2);
        unint64_t v17 = *((void *)v10 + 3);
        if (v18 >= v17 >> 1) {
          uint64_t v10 = sub_183CE67E0((char *)(v17 > 1), v18 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v18 + 1;
        int64_t v19 = &v10[64 * v18];
        *((void *)v19 + 4) = v7;
        *((void *)v19 + 5) = v8;
        *((_OWORD *)v19 + 3) = v9;
        *((void *)v19 + 8) = v11;
        *((void *)v19 + 9) = v38;
        *((void *)v19 + 10) = v36;
        *((void *)v19 + 11) = v35;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v41 = v10;
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      if (qword_18C664798 == -1)
      {
LABEL_17:
        uint64_t v20 = qword_18C669688;
        uint64_t v21 = unk_18C669690;
        __int128 v22 = xmmword_18C669698;
        uint64_t v23 = sub_183CEC418();
        uint64_t v25 = v24;
        uint64_t v37 = v27;
        uint64_t v39 = v26;
        unint64_t v28 = (char *)MEMORY[0x18961AFE8];
        if (v10) {
          unint64_t v28 = v10;
        }
        uint64_t v41 = v28;
        swift_unknownObjectRetain();
        uint64_t v29 = sub_183CF89BC((uint64_t)&v41, v21, v22, *((unint64_t *)&v22 + 1));
        int64_t v30 = *((void *)v41 + 2);
        if (v30 < v29)
        {
          __break(1u);
        }

        else
        {
          uint64_t v31 = 0LL;
          sub_183CF8CD4(v29, v30);
          uint64_t v10 = v41;
          if (!v41)
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
LABEL_28:
            int v40 = -1;
            sub_183CEF230(&v40, v10);
            if (!v31) {
              swift_bridgeObjectRelease();
            }
            return (char *)swift_bridgeObjectRelease();
          }

          uint64_t v35 = 0LL;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_24:
            unint64_t v33 = *((void *)v10 + 2);
            unint64_t v32 = *((void *)v10 + 3);
            if (v33 >= v32 >> 1) {
              uint64_t v10 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v10);
            }
            *((void *)v10 + 2) = v33 + 1;
            char v34 = &v10[64 * v33];
            *((void *)v34 + 4) = v20;
            *((void *)v34 + 5) = v21;
            *((_OWORD *)v34 + 3) = v22;
            *((void *)v34 + 8) = v23;
            *((void *)v34 + 9) = v39;
            *((void *)v34 + 10) = v25;
            *((void *)v34 + 11) = v37;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v31 = v35;
            goto LABEL_28;
          }
        }

        uint64_t v10 = sub_183CE67E0(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
        goto LABEL_24;
      }
    }

    swift_once();
    goto LABEL_17;
  }

  return result;
}

uint64_t AKSSystemKeyGetPublicKey(type:generation:params:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_18C664758 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_183CEF798(qword_18C669588, unk_18C669590, xmmword_18C669598, *((char **)&xmmword_18C669598 + 1), a3);
  if (!v3)
  {
    uint64_t v7 = v6;
    uint64_t v41 = v6;
    if (qword_18C664770 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_18C6695E8;
    uint64_t v9 = unk_18C6695F0;
    __int128 v10 = xmmword_18C6695F8;
    uint64_t v11 = sub_183CEC418();
    uint64_t v35 = v13;
    uint64_t v36 = v12;
    uint64_t v38 = v14;
    if (!v7) {
      uint64_t v41 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v15 = sub_183CF89BC((uint64_t)&v41, v9, v10, *((unint64_t *)&v10 + 1));
    int64_t v16 = *((void *)v41 + 2);
    if (v16 < v15)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v15, v16);
      uint64_t v7 = v41;
      if (v41)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_183CE67E0(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
        }
        unint64_t v18 = *((void *)v7 + 2);
        unint64_t v17 = *((void *)v7 + 3);
        if (v18 >= v17 >> 1) {
          uint64_t v7 = sub_183CE67E0((char *)(v17 > 1), v18 + 1, 1, v7);
        }
        *((void *)v7 + 2) = v18 + 1;
        int64_t v19 = &v7[64 * v18];
        *((void *)v19 + 4) = v8;
        *((void *)v19 + 5) = v9;
        *((_OWORD *)v19 + 3) = v10;
        *((void *)v19 + 8) = v11;
        *((void *)v19 + 9) = v38;
        *((void *)v19 + 10) = v36;
        *((void *)v19 + 11) = v35;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v41 = v7;
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      if (qword_18C664790 == -1)
      {
LABEL_17:
        uint64_t v20 = qword_18C669668;
        uint64_t v21 = unk_18C669670;
        __int128 v22 = xmmword_18C669678;
        uint64_t v24 = sub_183CEC418();
        uint64_t v26 = v25;
        uint64_t v37 = v28;
        uint64_t v39 = v27;
        uint64_t v29 = (char *)MEMORY[0x18961AFE8];
        if (v7) {
          uint64_t v29 = v7;
        }
        uint64_t v41 = v29;
        swift_unknownObjectRetain();
        uint64_t v30 = sub_183CF89BC((uint64_t)&v41, v21, v22, *((unint64_t *)&v22 + 1));
        int64_t v31 = *((void *)v41 + 2);
        if (v31 < v30)
        {
          __break(1u);
        }

        else
        {
          sub_183CF8CD4(v30, v31);
          uint64_t v7 = v41;
          if (!v41)
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
LABEL_28:
            int v40 = -1;
            uint64_t v4 = sub_183CEF230(&v40, v7);
            swift_bridgeObjectRelease();
            return v4;
          }

          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_24:
            unint64_t v33 = *((void *)v7 + 2);
            unint64_t v32 = *((void *)v7 + 3);
            if (v33 >= v32 >> 1) {
              uint64_t v7 = sub_183CE67E0((char *)(v32 > 1), v33 + 1, 1, v7);
            }
            *((void *)v7 + 2) = v33 + 1;
            char v34 = &v7[64 * v33];
            *((void *)v34 + 4) = v20;
            *((void *)v34 + 5) = v21;
            *((_OWORD *)v34 + 3) = v22;
            *((void *)v34 + 8) = v24;
            *((void *)v34 + 9) = v39;
            *((void *)v34 + 10) = v26;
            *((void *)v34 + 11) = v37;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_28;
          }
        }

        uint64_t v7 = sub_183CE67E0(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
        goto LABEL_24;
      }
    }

    swift_once();
    goto LABEL_17;
  }

  return v4;
}

uint64_t AKSSystemKeySign(type:generation:digest:params:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_18C664768 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_183CEF798(qword_18C6695C8, qword_18C6695D0, qword_18C6695D8, unk_18C6695E0, a4);
  if (!v4)
  {
    uint64_t v7 = v6;
    unint64_t v60 = v6;
    if (qword_18C664770 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_18C6695E8;
    uint64_t v9 = unk_18C6695F0;
    __int128 v10 = xmmword_18C6695F8;
    uint64_t v11 = sub_183CEC418();
    uint64_t v46 = v13;
    uint64_t v48 = v12;
    uint64_t v49 = v14;
    if (!v7) {
      unint64_t v60 = (char *)MEMORY[0x18961AFE8];
    }
    swift_unknownObjectRetain();
    uint64_t v15 = sub_183CF89BC((uint64_t)&v60, v9, v10, *((unint64_t *)&v10 + 1));
    int64_t v16 = *((void *)v60 + 2);
    if (v16 < v15)
    {
      __break(1u);
    }

    else
    {
      sub_183CF8CD4(v15, v16);
      uint64_t v7 = v60;
      if (v60)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_183CE67E0(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
        }
        unint64_t v18 = *((void *)v7 + 2);
        unint64_t v17 = *((void *)v7 + 3);
        if (v18 >= v17 >> 1) {
          uint64_t v7 = sub_183CE67E0((char *)(v17 > 1), v18 + 1, 1, v7);
        }
        *((void *)v7 + 2) = v18 + 1;
        int64_t v19 = &v7[64 * v18];
        *((void *)v19 + 4) = v8;
        *((void *)v19 + 5) = v9;
        *((_OWORD *)v19 + 3) = v10;
        *((void *)v19 + 8) = v11;
        *((void *)v19 + 9) = v49;
        *((void *)v19 + 10) = v48;
        *((void *)v19 + 11) = v46;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v60 = v7;
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      if (qword_18C664790 == -1)
      {
LABEL_17:
        uint64_t v20 = qword_18C669668;
        uint64_t v21 = unk_18C669670;
        __int128 v22 = xmmword_18C669678;
        uint64_t v23 = sub_183CEC418();
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        uint64_t v50 = v28;
        uint64_t v29 = (char *)MEMORY[0x18961AFE8];
        if (v7) {
          uint64_t v29 = v7;
        }
        unint64_t v60 = v29;
        swift_unknownObjectRetain();
        uint64_t v30 = sub_183CF89BC((uint64_t)&v60, v21, v22, *((unint64_t *)&v22 + 1));
        int64_t v31 = *((void *)v60 + 2);
        if (v31 < v30)
        {
          __break(1u);
        }

        else
        {
          sub_183CF8CD4(v30, v31);
          unint64_t v32 = v60;
          if (v60)
          {
            uint64_t v47 = v25;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v32 = sub_183CE67E0(0LL, *((void *)v32 + 2) + 1LL, 1, v32);
            }
            unint64_t v34 = *((void *)v32 + 2);
            unint64_t v33 = *((void *)v32 + 3);
            if (v34 >= v33 >> 1) {
              unint64_t v32 = sub_183CE67E0((char *)(v33 > 1), v34 + 1, 1, v32);
            }
            *((void *)v32 + 2) = v34 + 1;
            uint64_t v35 = &v32[64 * v34];
            *((void *)v35 + 4) = v20;
            *((void *)v35 + 5) = v21;
            *((_OWORD *)v35 + 3) = v22;
            *((void *)v35 + 8) = v23;
            *((void *)v35 + 9) = v47;
            *((void *)v35 + 10) = v27;
            *((void *)v35 + 11) = v50;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v60 = v32;
          }

          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }

          if (qword_18C664630 == -1) {
            goto LABEL_28;
          }
        }

        swift_once();
LABEL_28:
        __int128 v51 = xmmword_18C6690E8;
        uint64_t v36 = qword_18C6690F8;
        uint64_t v37 = qword_18C669100;
        swift_bridgeObjectRetain();
        uint64_t v38 = sub_183CF8904();
        uint64_t v40 = v39;
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        __int128 v53 = v51;
        uint64_t v54 = v36;
        uint64_t v55 = v37;
        uint64_t v56 = v38;
        uint64_t v57 = v40;
        uint64_t v58 = v42;
        uint64_t v59 = v44;
        swift_unknownObjectRetain();
        sub_183CDC7AC((uint64_t)&v53);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        int v52 = -1;
        a4 = sub_183CEF230(&v52, v60);
        swift_bridgeObjectRelease();
        return a4;
      }
    }

    swift_once();
    goto LABEL_17;
  }

  return a4;
}

char *sub_183CF849C(uint64_t a1)
{
  return sub_183CE65D4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_183CF84B0(uint64_t a1)
{
  return sub_183CE66F8(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_183CF84C4(uint64_t a1)
{
  return sub_183CE67E0(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_183CF84D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  int64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_9:
    __break(1u);
    return;
  }

  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v8 = (void *)MEMORY[0x18961AFE8];
      if (v4 != a3) {
        goto LABEL_5;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6649A8);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = _swift_stdlib_malloc_size(v8);
      uint64_t v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3)
      {
LABEL_5:
        memcpy(v8 + 4, (const void *)(a2 + a3), v5);
        return;
      }
    }

    __break(1u);
    goto LABEL_9;
  }

int64_t *sub_183CF858C( int64_t *result, _BYTE *a2, int64_t a3, int64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    if (!a3) {
      goto LABEL_7;
    }
    if (a3 < 0) {
      goto LABEL_36;
    }
    if (__OFSUB__(a4, a5))
    {
LABEL_37:
      __break(1u);
      return result;
    }

    if (a4 != a5)
    {
      if (a4 <= a5) {
        goto LABEL_33;
      }
      uint64_t v7 = 0LL;
      int64_t v8 = (71 - __clz(a6)) >> 3;
      char v9 = 8 - 8 * a4;
      uint64_t v10 = 8 * a4 - 8;
      while (1)
      {
        if ((unint64_t)(a4 - 0x1000000000000001LL + v7) >> 61 != 7)
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }

        if (v10 < -64)
        {
LABEL_13:
          LOBYTE(v11) = 0;
          if (v8 < a4) {
            goto LABEL_34;
          }
          goto LABEL_22;
        }

        if (v10 > 64) {
          break;
        }
        if (v10 < 0)
        {
          unint64_t v11 = a6 << (v9 & 0x38);
        }

        else
        {
          unint64_t v11 = a6 >> (v10 & 0x38);
        }

        if (v8 < a4) {
          goto LABEL_34;
        }
LABEL_22:
        if (a4 + v7 < 1) {
          goto LABEL_34;
        }
        *a2 = v11;
        if (!(a3 - 1 + v7))
        {
          uint64_t v6 = a4 + v7 - 1;
          goto LABEL_8;
        }

        if (__OFSUB__(a4 + v7 - 1, a5)) {
          goto LABEL_35;
        }
        if (!(a4 - a5 - 1 + v7))
        {
          uint64_t v6 = a5;
          a3 = a4 - a5;
          goto LABEL_8;
        }

        ++a2;
        --v7;
        v9 += 8;
        v10 -= 8LL;
        if (a4 + v7 <= a5) {
          goto LABEL_33;
        }
      }

      LOBYTE(v11) = 0;
      if (v8 < a4) {
        goto LABEL_34;
      }
      goto LABEL_22;
    }
  }

  a3 = 0LL;
LABEL_7:
  uint64_t v6 = a4;
LABEL_8:
  *uint64_t result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = v6;
  return (int64_t *)a3;
}

uint64_t (*sub_183CF86EC@<X0>( _BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _BYTE *a6@<X8>))()
{
  if (a3 < a2 || a4 >= a2)
  {
    __break(1u);
    goto LABEL_13;
  }

  int64_t v6 = (unint64_t)(a2 - 0x1000000000000001LL) >> 61;
  if (v6 != 7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  a6 = a1;
  char v7 = 8 * a2;
  int64_t v6 = 8 * a2 - 8;
  if (v6 < -64)
  {
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }

  if (v6 > 64)
  {
LABEL_7:
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }

  if ((v6 & 0x8000000000000000LL) == 0)
  {
    if ((unint64_t)v6 < 0x40)
    {
      unint64_t v8 = a5 >> (v6 & 0x38);
      goto LABEL_11;
    }

    goto LABEL_7;
  }

unint64_t sub_183CF8788@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int64_t a5@<X8>)
{
  if (a2 < a1 || a3 >= a1)
  {
    __break(1u);
    goto LABEL_12;
  }

  a5 = (unint64_t)(a1 - 0x1000000000000001LL) >> 61;
  if (a5 != 7)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t v7 = a4 << ((8 - v5) & 0x38);
    else {
      return v7;
    }
  }

  char v5 = 8 * a1;
  a5 = 8 * a1 - 8;
  if (a5 < -64) {
    return 0LL;
  }
  if (a5 > 64) {
    return 0LL;
  }
  if (a5 < 0) {
    goto LABEL_13;
  }
  return a4 >> (a5 & 0x38);
}

void sub_183CF8810(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  int64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t isUniquelyReferenced_nonNull_native = sub_183CE66F8(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }

    goto LABEL_16;
  }

char *sub_183CF8904()
{
  uint64_t v2 = sub_183CE66F8(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_183CE0AC8(4uLL, 0, 0, &v2, (uint64_t (*)(char **))sub_183CFA698);
  uint64_t result = v2;
  if (v0) {
    return (char *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_183CF89BC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v30 = (void *)result;
  unint64_t v4 = *(char **)result;
  unint64_t v5 = *(void *)(*(void *)result + 16LL);
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = a4;
  int64_t v8 = a4 >> 1;
  uint64_t v9 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }

  unint64_t v11 = 0LL;
  for (uint64_t i = 152LL; ; i += 64LL)
  {
    int64_t v13 = &v4[64 * v11 + 32];
    uint64_t v14 = *((void *)v13 + 2);
    uint64_t v15 = *((void *)v13 + 3) >> 1;
    if (__OFSUB__(v15, v14)) {
      goto LABEL_42;
    }
    if (v15 - v14 != v9) {
      goto LABEL_4;
    }
    if (!v9) {
      break;
    }
    uint64_t v16 = *((void *)v13 + 1);
    if (v16 + v14 == a2 + a3 || v14 == v15) {
      break;
    }
    if (v14 >= v15) {
      goto LABEL_48;
    }
    uint64_t v17 = v14 + 1;
    int v18 = *(unsigned __int8 *)(v16 + v14);
    if (v14 == v15) {
      break;
    }
    uint64_t v19 = a3;
    if (v8 != a3)
    {
      while (v19 >= a3 && v19 < v8)
      {
        if (v15 == v17) {
          goto LABEL_20;
        }
        if (v17 >= v15) {
          goto LABEL_39;
        }
        int v18 = *(unsigned __int8 *)(v16 + v17++);
        if (v8 == ++v19) {
          goto LABEL_4;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

LABEL_4:
    if (++v11 == v5) {
      return *(void *)(*(void *)result + 16LL);
    }
  }

uint64_t sub_183CF8CD4(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_183CE67E0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v15 = &v4[64 * a2 + 32];
  if (v6 != a2 || &v4[64 * v6 + 32] >= &v15[64 * v14]) {
    uint64_t result = (uint64_t)memmove(&v4[64 * v6 + 32], v15, v14 << 6);
  }
  uint64_t v16 = *((void *)v4 + 2);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    *((void *)v4 + 2) = v17;
LABEL_19:
    char *v2 = v4;
    return result;
  }

void sub_183CF8DE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = swift_unknownObjectRetain();
  sub_183CECEA8(v8, a2, a3, a4);
}

void sub_183CF8F6C(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_183CF8F98(uint64_t a1, char a2)
{
  if (a2 == 1)
  {
    if (qword_18C664650 != -1) {
      swift_once();
    }
    return qword_18C669168;
  }

  else
  {
    sub_183CDD24C();
    swift_allocError();
    _BYTE *v2 = 10;
    return swift_willThrow();
  }

uint64_t sub_183CF9640(uint64_t a1)
{
  return a1;
}

uint64_t sub_183CF9680(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_183CF9690(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for AKSRefKey()
{
  return objc_opt_self();
}

unint64_t sub_183CF96C4()
{
  unint64_t result = qword_18C664E38;
  if (!qword_18C664E38)
  {
    unint64_t result = MEMORY[0x186E2608C](&protocol conformance descriptor for AKSRefKeyParam, &type metadata for AKSRefKeyParam);
    atomic_store(result, (unint64_t *)&qword_18C664E38);
  }

  return result;
}

unint64_t sub_183CF970C()
{
  unint64_t result = qword_18C664E40;
  if (!qword_18C664E40)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSSystemKeyType,  &type metadata for AKSSystemKeyType);
    atomic_store(result, (unint64_t *)&qword_18C664E40);
  }

  return result;
}

unint64_t sub_183CF9754()
{
  unint64_t result = qword_18C664E48;
  if (!qword_18C664E48)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSSystemKeyGeneration,  &type metadata for AKSSystemKeyGeneration);
    atomic_store(result, (unint64_t *)&qword_18C664E48);
  }

  return result;
}

unint64_t sub_183CF979C()
{
  unint64_t result = qword_18C664E50;
  if (!qword_18C664E50)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSSystemKeyOperation,  &type metadata for AKSSystemKeyOperation);
    atomic_store(result, (unint64_t *)&qword_18C664E50);
  }

  return result;
}

unint64_t sub_183CF97E4()
{
  unint64_t result = qword_18C664E58;
  if (!qword_18C664E58)
  {
    unint64_t result = MEMORY[0x186E2608C](&protocol conformance descriptor for AKSKeyClass, &type metadata for AKSKeyClass);
    atomic_store(result, (unint64_t *)&qword_18C664E58);
  }

  return result;
}

unint64_t sub_183CF982C()
{
  unint64_t result = qword_18C664E60;
  if (!qword_18C664E60)
  {
    unint64_t result = MEMORY[0x186E2608C](&protocol conformance descriptor for AKSRefKeyType, &type metadata for AKSRefKeyType);
    atomic_store(result, (unint64_t *)&qword_18C664E60);
  }

  return result;
}

unint64_t sub_183CF9874()
{
  unint64_t result = qword_18C664E68;
  if (!qword_18C664E68)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSRefKeyOptions,  &type metadata for AKSRefKeyOptions);
    atomic_store(result, (unint64_t *)&qword_18C664E68);
  }

  return result;
}

unint64_t sub_183CF98BC()
{
  unint64_t result = qword_18C664E70;
  if (!qword_18C664E70)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSRefKeyOptions,  &type metadata for AKSRefKeyOptions);
    atomic_store(result, (unint64_t *)&qword_18C664E70);
  }

  return result;
}

unint64_t sub_183CF9904()
{
  unint64_t result = qword_18C664E78;
  if (!qword_18C664E78)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSRefKeyOptions,  &type metadata for AKSRefKeyOptions);
    atomic_store(result, (unint64_t *)&qword_18C664E78);
  }

  return result;
}

unint64_t sub_183CF994C()
{
  unint64_t result = qword_18C664E80;
  if (!qword_18C664E80)
  {
    unint64_t result = MEMORY[0x186E2608C]( &protocol conformance descriptor for AKSRefKeyOptions,  &type metadata for AKSRefKeyOptions);
    atomic_store(result, (unint64_t *)&qword_18C664E80);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AKSRefKeyParam(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }

uint64_t storeEnumTagSinglePayload for AKSRefKeyParam(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE6) {
    return ((uint64_t (*)(void))((char *)&loc_183CF9A6C + 4 * byte_183D0C894[v4]))();
  }
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_183CF9AA0 + 4 * byte_183D0C88F[v4]))();
}

uint64_t sub_183CF9AA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9AA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CF9AB0LL);
  }
  return result;
}

uint64_t sub_183CF9ABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CF9AC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 25;
  return result;
}

uint64_t sub_183CF9AC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9AD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AKSRefKeyParam()
{
  return &type metadata for AKSRefKeyParam;
}

uint64_t getEnumTagSinglePayload for AKSSystemKeyType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for AKSSystemKeyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_183CF9BC8 + 4 * byte_183D0C89E[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_183CF9BFC + 4 * byte_183D0C899[v4]))();
}

uint64_t sub_183CF9BFC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9C04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CF9C0CLL);
  }
  return result;
}

uint64_t sub_183CF9C18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CF9C20LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_183CF9C24(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9C2C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AKSSystemKeyType()
{
  return &type metadata for AKSSystemKeyType;
}

ValueMetadata *type metadata accessor for AKSSystemKeyGeneration()
{
  return &type metadata for AKSSystemKeyGeneration;
}

uint64_t _s13AppleKeyStore22AKSSystemKeyGenerationOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t _s13AppleKeyStore22AKSSystemKeyGenerationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183CF9D3C + 4 * byte_183D0C8A8[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183CF9D70 + 4 * byte_183D0C8A3[v4]))();
}

uint64_t sub_183CF9D70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9D78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CF9D80LL);
  }
  return result;
}

uint64_t sub_183CF9D8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CF9D94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_183CF9D98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9DA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AKSSystemKeyOperation()
{
  return &type metadata for AKSSystemKeyOperation;
}

ValueMetadata *type metadata accessor for AKSHandle()
{
  return &type metadata for AKSHandle;
}

uint64_t getEnumTagSinglePayload for AKSKeyClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }

uint64_t storeEnumTagSinglePayload for AKSKeyClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEC) {
    return ((uint64_t (*)(void))((char *)&loc_183CF9EA8 + 4 * byte_183D0C8B2[v4]))();
  }
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_183CF9EDC + 4 * byte_183D0C8AD[v4]))();
}

uint64_t sub_183CF9EDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9EE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CF9EECLL);
  }
  return result;
}

uint64_t sub_183CF9EF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CF9F00LL);
  }
  *(_BYTE *)unint64_t result = a2 + 19;
  return result;
}

uint64_t sub_183CF9F04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CF9F0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AKSKeyClass()
{
  return &type metadata for AKSKeyClass;
}

uint64_t getEnumTagSinglePayload for AKSRefKeyType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

uint64_t storeEnumTagSinglePayload for AKSRefKeyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_183CFA004 + 4 * byte_183D0C8BC[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_183CFA038 + 4 * byte_183D0C8B7[v4]))();
}

uint64_t sub_183CFA038(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CFA040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CFA048LL);
  }
  return result;
}

uint64_t sub_183CFA054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CFA05CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 11;
  return result;
}

uint64_t sub_183CFA060(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CFA068(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AKSRefKeyType()
{
  return &type metadata for AKSRefKeyType;
}

ValueMetadata *type metadata accessor for AKSRefKeyOptions()
{
  return &type metadata for AKSRefKeyOptions;
}

uint64_t type metadata accessor for AKSRefKeyParams()
{
  return objc_opt_self();
}

uint64_t method lookup function for AKSRefKeyParams()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AKSRefKeyParams.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AKSRefKeyParams.set_BOOL(key:value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of AKSRefKeyParams.get_BOOL(key:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))() & 1;
}

uint64_t dispatch thunk of AKSRefKeyParams.set_number(key:value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of AKSRefKeyParams.get_number(key:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of AKSRefKeyParams.set_data(key:value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of AKSRefKeyParams.get_data(key:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of AKSRefKeyParams.serialize()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t destroy for AKSRefKeyKemOutput()
{
  return swift_bridgeObjectRelease();
}

void *_s13AppleKeyStore18AKSRefKeyKemOutputVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AKSRefKeyKemOutput(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for AKSRefKeyKemOutput(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AKSRefKeyKemOutput(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AKSRefKeyKemOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AKSRefKeyKemOutput()
{
  return &type metadata for AKSRefKeyKemOutput;
}

uint64_t method lookup function for AKSRefKey()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AKSRefKey.__allocating_init(handle:key_class:key_type:params:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of AKSRefKey.__allocating_init(handle:blob:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of AKSRefKey.__allocating_init(handle:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of AKSRefKey.sign(digest:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of AKSRefKey.encrypt(data:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of AKSRefKey.decrypt(data:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of AKSRefKey.delete(params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of AKSRefKey.set_key_class(key_class:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of AKSRefKey.wrap(key:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of AKSRefKey.unwrap(key:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t dispatch thunk of AKSRefKey.transcrypt(dst_handle:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

uint64_t dispatch thunk of AKSRefKey.compute_key(public_key:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288LL))();
}

uint64_t dispatch thunk of AKSRefKey.ecies_encrypt(public_key:data:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296LL))();
}

uint64_t dispatch thunk of AKSRefKey.ecies_decrypt(data:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t dispatch thunk of AKSRefKey.ecies_transcode(public_key:data:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312LL))();
}

uint64_t dispatch thunk of AKSRefKey.encapsulate(public_key:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
}

uint64_t dispatch thunk of AKSRefKey.decapsulate(cipher_text:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

uint64_t dispatch thunk of AKSRefKey.attest(ref_key:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336LL))();
}

uint64_t dispatch thunk of AKSRefKey.serialize()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344LL))();
}

uint64_t dispatch thunk of AKSRefKey.type()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368LL))();
}

uint64_t dispatch thunk of AKSRefKey.public_key()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376LL))();
}

uint64_t dispatch thunk of AKSRefKey.external_data()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384LL))();
}

uint64_t dispatch thunk of AKSRefKey.uuid()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392LL))();
}

uint64_t dispatch thunk of AKSRefKey.version()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400LL))();
}

uint64_t dispatch thunk of AKSRefKey.keybag_handle()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408LL))();
}

uint64_t dispatch thunk of AKSRefKey.key_class()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416LL))();
}

uint64_t dispatch thunk of AKSRefKey.options()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424LL))();
}

uint64_t dispatch thunk of AKSRefKey.validate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432LL))();
}

uint64_t sub_183CFA618(uint64_t a1)
{
  return a1;
}

uint64_t sub_183CFA64C(uint64_t *a1)
{
  return sub_183CEDBEC(a1, **(void **)(v1 + 16), (uint64_t (*)(_BYTE *, uint64_t))sub_183CF86EC);
}

uint64_t sub_183CFA670(uint64_t *a1)
{
  return sub_183CE2BBC(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_183CFA698(uint64_t a1)
{
  return sub_183CE1FC0(a1);
}

unint64_t sub_183CFA6C0()
{
  unint64_t result = qword_18C664E88;
  if (!qword_18C664E88)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_18C664E90);
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x189618F98], v1);
    atomic_store(result, (unint64_t *)&qword_18C664E88);
  }

  return result;
}

uint64_t sub_183CFA70C()
{
  return 0x28796E41314E5341LL;
}

ValueMetadata *type metadata accessor for ASN1Any()
{
  return &type metadata for ASN1Any;
}

unint64_t sub_183CFA7B8()
{
  unint64_t result = qword_18C664ED0;
  if (!qword_18C664ED0)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0D20C, &type metadata for ASN1Any);
    atomic_store(result, (unint64_t *)&qword_18C664ED0);
  }

  return result;
}

uint64_t sub_183CFA7FC()
{
  uint64_t v0 = sub_183D04EB4();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_183D04ECC();
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = sub_183D04DAC();
  MEMORY[0x1895F8858](v5);
  sub_183CFAE98();
  sub_183D04DA0();
  v7[1] = MEMORY[0x18961AFE8];
  sub_183CFAED4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C664EF0);
  sub_183CFAF1C();
  sub_183D04F68();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961B908], v0);
  uint64_t result = sub_183D04ED8();
  qword_18C669AC8 = result;
  return result;
}

void sub_183CFA98C()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!dword_18C664ED8)
  {
    io_connect_t connect = 0;
    mach_port_t v0 = *MEMORY[0x1896086A8];
    io_service_t MatchingService = IORegistryEntryFromPath(*MEMORY[0x1896086A8], "IOService:/IOResources/AppleKeyStore");
    if (!MatchingService)
    {
      uint64_t v2 = IOServiceMatching("AppleKeyStore");
      io_service_t MatchingService = IOServiceGetMatchingService(v0, v2);
      if (!MatchingService)
      {
        sub_183CDD24C();
        swift_allocError();
        *uint64_t v5 = 21;
        swift_willThrow();
        return;
      }
    }

    if (!IOServiceOpen(MatchingService, *MEMORY[0x1895FBBE0], 0, &connect))
    {
      int v3 = connect;
      if (!IOConnectCallMethod(connect, 0, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL))
      {
        dword_18C664ED8 = v3;
        goto LABEL_8;
      }

      IOServiceClose(v3);
    }

    sub_183CDD24C();
    swift_allocError();
    *uint64_t v4 = 21;
    swift_willThrow();
LABEL_8:
    IOObjectRelease(MatchingService);
  }

uint64_t sub_183CFAB08()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AKSUserClient()
{
  return objc_opt_self();
}

uint64_t sub_183CFAB38(uint32_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t *a5)
{
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *a4;
  if (*a4)
  {
    unint64_t v13 = *((void *)v12 + 2);
    if (HIDWORD(v13))
    {
      __break(1u);
      goto LABEL_42;
    }

    int v8 = *a4;
  }

  else
  {
    LODWORD(v13) = 0;
    int v8 = (char *)MEMORY[0x18961AFE8];
  }

  uint32_t outputCnt = v13;
  uint64_t v14 = *a5;
  uint64_t v29 = a5;
  if (*a5)
  {
    size_t v15 = *(void *)(v14 + 16);
    uint64_t v7 = (char *)*a5;
  }

  else
  {
    size_t v15 = 0LL;
    uint64_t v7 = (char *)MEMORY[0x18961AFE8];
  }

  size_t v32 = v15;
  uint64_t v16 = qword_18C6648A8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  id v17 = (id)qword_18C669AC8;
  sub_183D04EC0();
  if (!v9)
  {

    size_t v5 = dword_18C664ED8;
    if (!a2)
    {
      LODWORD(v18) = 0;
      if (a3) {
        goto LABEL_15;
      }
      goto LABEL_17;
    }

    unint64_t v18 = *(void *)(a2 + 16);
    if (!HIDWORD(v18))
    {
      if (a3)
      {
LABEL_15:
        size_t inputStructCnt = *(void *)(a3 + 16);
        goto LABEL_18;
      }

LABEL_44:
            __break(1u);
            goto LABEL_45;
          }

LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
      }

      swift_bridgeObjectRelease();
      return a2;
    }

unint64_t sub_183CFAE98()
{
  unint64_t result = qword_18C664EE0;
  if (!qword_18C664EE0)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C664EE0);
  }

  return result;
}

unint64_t sub_183CFAED4()
{
  unint64_t result = qword_18C664EE8;
  if (!qword_18C664EE8)
  {
    uint64_t v1 = sub_183D04ECC();
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x18961BA40], v1);
    atomic_store(result, (unint64_t *)&qword_18C664EE8);
  }

  return result;
}

unint64_t sub_183CFAF1C()
{
  unint64_t result = qword_18C664EF8;
  if (!qword_18C664EF8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C664EF0);
    unint64_t result = MEMORY[0x186E2608C](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C664EF8);
  }

  return result;
}

uint64_t sub_183CFAF68(unint64_t a1, char a2, char a3)
{
  char v5 = a2 << 6;
  if (a1 > 0x1E)
  {
    if ((a3 & 1) != 0) {
      char v11 = 63;
    }
    else {
      char v11 = 31;
    }
    uint64_t v12 = *v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_183CE66F8(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    char v13 = v5 | v11;
    unint64_t v15 = *((void *)v12 + 2);
    unint64_t v14 = *((void *)v12 + 3);
    if (v15 >= v14 >> 1) {
      uint64_t v12 = sub_183CE66F8((char *)(v14 > 1), v15 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v15 + 1;
    v12[v15 + 32] = v13;
    *int v3 = v12;
    return sub_183CEA46C(a1);
  }

  else
  {
    if ((a3 & 1) != 0) {
      char v6 = v5 | a1 | 0x20;
    }
    else {
      char v6 = v5 | a1;
    }
    uint64_t v7 = (uint64_t)*v3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_183CE66F8(0LL, *(void *)(v7 + 16) + 1LL, 1, (char *)v7);
      uint64_t v7 = result;
    }

    unint64_t v10 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      uint64_t result = (uint64_t)sub_183CE66F8((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }

    *(void *)(v7 + 16) = v10 + 1;
    *(_BYTE *)(v7 + v10 + 32) = v6;
    *int v3 = (char *)v7;
  }

  return result;
}

uint64_t sub_183CFB0BC()
{
  return sub_183D05058();
}

uint64_t sub_183CFB118()
{
  return sub_183D05034();
}

uint64_t sub_183CFB154()
{
  return sub_183D05058();
}

BOOL sub_183CFB1AC(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_183CFB1D8()
{
  return 0LL;
}

uint64_t sub_183CFB2D4()
{
  return sub_183CFB1D8();
}

unint64_t sub_183CFB2E4()
{
  unint64_t result = qword_18C664F00;
  if (!qword_18C664F00)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0D2E4, &type metadata for ASN1Identifier);
    atomic_store(result, (unint64_t *)&qword_18C664F00);
  }

  return result;
}

uint64_t sub_183CFB328(unsigned __int8 a1)
{
  return a1 >> 6;
}

uint64_t sub_183CFB330(char a1)
{
  uint64_t result = a1 & 0x1F;
  if ((_DWORD)result == 31) {
    __break(1u);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1Identifier.TagClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for ASN1Identifier.TagClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_183CFB428 + 4 * byte_183D0D2B5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_183CFB45C + 4 * asc_183D0D2B0[v4]))();
}

uint64_t sub_183CFB45C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CFB464(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183CFB46CLL);
  }
  return result;
}

uint64_t sub_183CFB478(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183CFB480LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_183CFB484(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183CFB48C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Identifier.TagClass()
{
  return &type metadata for ASN1Identifier.TagClass;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1Identifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1Identifier()
{
  return &type metadata for ASN1Identifier;
}

unint64_t sub_183CFB558()
{
  unint64_t result = qword_18C664F08;
  if (!qword_18C664F08)
  {
    unint64_t result = MEMORY[0x186E2608C](&unk_183D0D3B4, &type metadata for ASN1Identifier.TagClass);
    atomic_store(result, (unint64_t *)&qword_18C664F08);
  }

  return result;
}

uint64_t X509PolicySetFlagsForCommonNames(uint64_t a1)
{
  v4[2] = *MEMORY[0x1895F89C0];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateSubjectNameGetCommonName((unint64_t *)(a1 + 104), v4);
  if (!(_DWORD)result)
  {
    uint64_t result = compare_octet_string((uint64_t)&iPhoneCAName, (uint64_t)v4);
    if ((_DWORD)result)
    {
      uint64_t result = compare_octet_string((uint64_t)&CodeSigningCAName, (uint64_t)v4);
      if ((_DWORD)result)
      {
        uint64_t result = compare_octet_string_partial((uint64_t)&MFi4AccessoryCAName, (uint64_t)v4);
        if ((_DWORD)result)
        {
          uint64_t result = compare_octet_string_partial((uint64_t)&MFi4AttestationCAName, (uint64_t)v4);
          if ((_DWORD)result)
          {
            uint64_t result = compare_octet_string_partial((uint64_t)&MFi4ProvisioningCAName, (uint64_t)v4);
            if ((_DWORD)result) {
              return result;
            }
            uint64_t v3 = 0x1000000000LL;
          }

          else
          {
            uint64_t v3 = 0x800000000LL;
          }
        }

        else
        {
          uint64_t v3 = 0x400000000LL;
        }
      }

      else
      {
        uint64_t v3 = 8LL;
      }
    }

    else
    {
      uint64_t v3 = 3840LL;
    }

    *(void *)(a1 + 240) |= v3;
  }

  return result;
}

double X509PolicySetFlagsForMFI(uint64_t a1)
{
  v6[2] = *MEMORY[0x1895F89C0];
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  if (!X509CertificateSubjectNameGetCommonName((unint64_t *)(a1 + 104), v6))
  {
    time_t v5 = 0LL;
    if (!X509CertificateGetNotBefore(a1, &v5))
    {
      memset(&v4, 0, sizeof(v4));
      strptime("2006-05-31", "%F", &v4);
      time_t v3 = timegm(&v4);
      double result = difftime(v3, v5);
      if (result < 0.0)
      {
        *(void *)(a1 + 240) |= 0x8000000uLL;
LABEL_3:
      }
    }
  }

  return result;
}

uint64_t X509PolicySetFlagsForRoots(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(_BYTE *)(result + 16))
  {
    double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootCASPKI);
    if (!(_DWORD)result
      || (double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootG2SPKI), !(_DWORD)result)
      || (double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootG3SPKI), !(_DWORD)result))
    {
      uint64_t v5 = *(void *)(a2 + 240) | 0x58E30653FFF8LL;
      goto LABEL_11;
    }
  }

  uint64_t v4 = *(void *)(v3 + 8);
  if ((v4 & 0x1000000) != 0)
  {
    double result = compare_octet_string(a2 + 88, (uint64_t)&UcrtRootSpki);
    if (!(_DWORD)result)
    {
      uint64_t v5 = *(void *)(a2 + 240) | 0x1000000LL;
      goto LABEL_11;
    }

uint64_t X509PolicySetFlagsForTestAnchor(void *a1, uint64_t a2)
{
  v6[2] = *MEMORY[0x1895F89C0];
  v6[0] = 0LL;
  v6[1] = 0LL;
  v5[0] = 0LL;
  v5[1] = 0LL;
  uint64_t result = X509CertificateParseSPKI((unint64_t *)(a2 + 88), v6, 0LL, v5);
  if (!(_DWORD)result)
  {
    uint64_t result = compare_octet_string(a1[4], (uint64_t)v6);
    if (!(_DWORD)result)
    {
      uint64_t result = compare_octet_string(a1[3], (uint64_t)v5);
      if (!(_DWORD)result) {
        *(void *)(a2 + 240) |= a1[1];
      }
    }
  }

  return result;
}

uint64_t X509PolicyCheckForBlockedKeys(uint64_t a1)
{
  uint64_t result = compare_octet_string(a1 + 88, (uint64_t)&BlockedYonkersSPKI);
  if (!(_DWORD)result) {
    *(void *)(a1 + 240) &= 0xFFFFFFFFFFF3FFFFLL;
  }
  return result;
}

int *find_digest(uint64_t a1)
{
  unint64_t v2 = 0LL;
  while (1)
  {
    uint64_t result = (int *)compare_octet_string_raw((uint64_t)&digests[v2 / 4 + 2], *(const void **)a1, *(void *)(a1 + 8));
    if (!(_DWORD)result) {
      break;
    }
    v2 += 32LL;
    if (v2 == 160) {
      return 0LL;
    }
  }

  __break(0x5513u);
  return result;
}

int *find_digest_by_type(int *result)
{
  unint64_t v1 = 0LL;
  while (digests[v1 / 4] != (_DWORD)result)
  {
    v1 += 32LL;
    if (v1 == 160) {
      return 0LL;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t find_digestOID_for_signingOID(uint64_t a1, void *a2)
{
  if (!compare_octet_string_raw(a1, &sha1WithRSA_oid, 9uLL)
    || !compare_octet_string_raw(a1, &sha1WithECDSA_oid, 7uLL))
  {
    unsigned int v6 = &CTOidSha1;
    uint64_t v4 = 5LL;
    goto LABEL_11;
  }

  uint64_t v4 = 9LL;
  if (!compare_octet_string_raw(a1, &sha256WithRSA_oid, 9uLL))
  {
    unsigned int v6 = &CTOidSha256;
    goto LABEL_11;
  }

  if (!compare_octet_string_raw(a1, &sha256WithECDSA_oid, 8uLL))
  {
    unsigned int v6 = &CTOidSha256;
LABEL_18:
    uint64_t v4 = 9LL;
    goto LABEL_11;
  }

  uint64_t v4 = 9LL;
  if (!compare_octet_string_raw(a1, &sha384WithRSA_oid, 9uLL))
  {
    unsigned int v6 = &CTOidSha384;
    goto LABEL_11;
  }

  if (!compare_octet_string_raw(a1, &sha384WithECDSA_oid, 8uLL))
  {
    unsigned int v6 = &CTOidSha384;
    goto LABEL_18;
  }

  uint64_t v4 = 9LL;
  if (compare_octet_string_raw(a1, &sha512WithRSA_oid, 9uLL))
  {
    unsigned int v6 = &CTOidSha512;
    goto LABEL_18;
  }

  unsigned int v6 = &CTOidSha512;
LABEL_11:
  *a2 = v6;
  a2[1] = v4;
  return 1LL;
}

unint64_t validateSignatureRSA(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t result = 0LL;
  uint64_t v27 = *MEMORY[0x1895F89C0];
  char v23 = 0;
  if (a1)
  {
    if (a2)
    {
      unint64_t result = 0LL;
      if (a3)
      {
        if (a4)
        {
          if (a5)
          {
            unint64_t result = compare_octet_string((uint64_t)&rsaEncryption, (uint64_t)(a5 + 7));
            if (!(_DWORD)result
              || (unint64_t result = validateOIDs((uint64_t)&rsaAlgs, (uint64_t)(a5 + 3), (uint64_t)(a5 + 7)), (_DWORD)result))
            {
              unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
              unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
              unint64_t v10 = a5[9];
              uint64_t v9 = a5[10];
              if (__CFADD__(v10, v9)) {
                goto LABEL_31;
              }
              if (v10 > v10 + v9) {
                goto LABEL_32;
              }
              unint64_t v21 = a5[9];
              unint64_t v22 = v10 + v9;
              if (!v9 || (unint64_t result = ccder_blob_check_null(), (_DWORD)result))
              {
                if (!__CFADD__(a1, a2))
                {
                  if (a1 + a2 >= a1)
                  {
                    unint64_t result = ccder_decode_rsa_pub_n();
                    if (!result) {
                      return result;
                    }
                    unint64_t v11 = result;
                    if (result >> 58)
                    {
LABEL_33:
                      __break(0x550Cu);
                      return result;
                    }

                    unint64_t v12 = result << 6;
                    if (result << 6 < 0x400) {
                      return 0LL;
                    }
                    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
                    __int16 v26 = -21846;
                    char v24 = 6;
                    if (&vars0 != (uint64_t *)82)
                    {
                      unint64_t v13 = a5[4];
                      LOBYTE(v25) = v13;
                      if ((unint64_t)&v24 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        if (v13 <= 9)
                        {
                          uint64_t v14 = __memcpy_chk();
                          if (v12 > 0x1068) {
                            return 0LL;
                          }
                          unint64_t result = MEMORY[0x1895F8858](v14);
                          uint64_t v16 = (unint64_t *)((char *)&v20 - v15);
                          unint64_t v17 = 0LL;
                          *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
                          *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
                          do
                          {
                            uint64_t v19 = &v16[v17 / 8];
                            *(_OWORD *)uint64_t v19 = v18;
                            *((_OWORD *)v19 + 1) = v18;
                            v17 += 32LL;
                          }

                          while (v15 != v17);
                          if (v15 >= 1)
                          {
                            *uint64_t v16 = v11;
                            unint64_t result = 0LL;
                            char v23 = 0;
                            return result;
                          }
                        }

                        goto LABEL_32;
                      }
                    }

                    goto LABEL_31;
                  }

LABEL_32:
                  __break(0x5519u);
                  goto LABEL_33;
                }

      __break(0x5513u);
    }
  }

  return result;
}

LABEL_31:
                __break(0x5513u);
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

                            __break(0x5513u);
                            return result;
                          }

                          if (ccec_verify()) {
LABEL_24:
                          }
                            HIBYTE(v17) = 0;
                        }

                        return HIBYTE(v17) != 0;
                      }

            __break(0x5519u);
          }
        }
      }

BOOL validateOIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0LL;
  BOOL v7 = 1;
  do
  {
    BOOL v7 = v6 < 3;
    a1 += 32LL;
    ++v6;
  }

  while (v6 != 4);
  return v7;
}

_UNKNOWN **oidForPubKeyLength()
{
  uint64_t v0 = ccec_x963_import_pub_size();
  int is_supported = ccec_keysize_is_supported();
  unint64_t v2 = &CTOidSECP256r1;
  uint64_t v3 = &CTOidSECP521r1;
  uint64_t v4 = &CTOidSECP384r1;
  if (v0 != 384) {
    uint64_t v4 = 0LL;
  }
  if (v0 != 521) {
    uint64_t v3 = v4;
  }
  if (v0 != 256) {
    unint64_t v2 = v3;
  }
  if (is_supported) {
    return v2;
  }
  else {
    return 0LL;
  }
}

uint64_t validateSignatureEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0LL;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  HIBYTE(v17) = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0LL;
      if (a3)
      {
        if (a4)
        {
          if (a5)
          {
            if (!compare_octet_string((uint64_t)&ecPublicKey, a5 + 56)
              || (uint64_t result = validateOIDs((uint64_t)&ecAlgs, a5 + 24, a5 + 56), (_DWORD)result))
            {
              uint64_t result = ccec_cp_for_oid((int **)(a5 + 72));
              if (result)
              {
                uint64_t v8 = *(void *)result;
                if (*(void *)result >> 61 || !is_mul_ok(8 * v8, 3uLL))
                {
                  __break(0x550Cu);
                }

                else
                {
                  uint64_t v9 = 24 * v8;
                  BOOL v10 = __CFADD__(v9, 16LL);
                  unint64_t v11 = v9 + 16;
                  if (!v10 && v11 < 0xFFFFFFFFFFFFFFF0LL)
                  {
                    uint64_t result = MEMORY[0x1895F8858](result);
                    uint64_t v14 = (uint64_t *)((char *)&v17 - v12);
                    unint64_t v15 = 0LL;
                    do
                    {
                      uint64_t v16 = &v14[v15 / 8];
                      *uint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
                      v16[1] = 0xAAAAAAAAAAAAAAAALL;
                      v15 += 16LL;
                    }

                    while (v12 != v15);
                    if (v13 >= 0x10)
                    {
                      *uint64_t v14 = result;
                      if (v12 >= 1)
                      {
                        if (!MEMORY[0x186E25BD0]())
                        {
                          uint64_t result = ccec_x963_import_pub_size();
                          if (result == 256 && *(void *)(a5 + 96) == 64LL)
                          {
                            if (*(void *)(a5 + 88) < 0xFFFFFFFFFFFFFFE0LL)
                            {
                              goto LABEL_24;
                            }

LABEL_30:
                      __break(0x5519u);
                      goto LABEL_31;
                    }

    __break(0x5519u);
    goto LABEL_31;
  }

LABEL_29:
                    __break(1u);
                    goto LABEL_30;
                  }
                }

                __break(0x5500u);
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t ccec_cp_for_oid(int **a1)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v1 = a1[1];
  if (v1 != (int *)7)
  {
    return 0LL;
  }

  uint64_t v3 = *a1;
  int v5 = *v3;
  int v6 = *(int *)((char *)v3 + 3);
  if (v5 != -2127887098 || v6 != 587203713) {
    return 0LL;
  }
  return ccec_cp_521();
}

void compressECPublicKey(void *a1, int **a2, uint64_t a3, uint64_t a4)
{
  v19[1] = *MEMORY[0x1895F89C0];
  BOOL v7 = (void *)ccec_cp_for_oid(a2);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *v7;
  if (*v7 >> 61 || !is_mul_ok(8 * v9, 3uLL))
  {
    __break(0x550Cu);
    goto LABEL_18;
  }

  uint64_t v10 = 24 * v9;
  BOOL v11 = __CFADD__(v10, 16LL);
  unint64_t v12 = v10 + 16;
  if (v11 || v12 >= 0xFFFFFFFFFFFFFFF0LL) {
LABEL_18:
  }
    __break(0x5500u);
  v15.n128_f64[0] = MEMORY[0x1895F8858](v7);
  uint64_t v16 = (void *)((char *)v19 - v13);
  unint64_t v17 = 0LL;
  do
  {
    uint64_t v18 = &v16[v17 / 8];
    *uint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    v18[1] = 0xAAAAAAAAAAAAAAAALL;
    v17 += 16LL;
  }

  while (v13 != v17);
  if (v14 < 0x10) {
    goto LABEL_20;
  }
  *uint64_t v16 = v8;
  if (v13 < 1)
  {
LABEL_19:
    __break(0x5519u);
LABEL_20:
    __break(1u);
    return;
  }

  if (!MEMORY[0x186E25BD0](v8, a1[1], *a1, (char *)v19 - v13, v15)
    && ccec_compressed_x962_export_pub_size() == a4)
  {
    if (!a3 || a4)
    {
      ccec_compressed_x962_export_pub();
      return;
    }

    goto LABEL_19;
  }

void decompressECPublicKey(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x1895F89C0];
  int v6 = (uint64_t *)ccec_cp_for_oid(a2);
  if (v6)
  {
    uint64_t v7 = *v6;
    if (!((unint64_t)*v6 >> 61) && is_mul_ok(8 * v7, 3uLL))
    {
      uint64_t v8 = 24 * v7;
      BOOL v9 = __CFADD__(v8, 16LL);
      unint64_t v10 = v8 + 16;
      if (!v9 && v10 < 0xFFFFFFFFFFFFFFF0LL)
      {
        MEMORY[0x1895F8858](v6);
        unint64_t v14 = (void *)((char *)v17 - v12);
        unint64_t v15 = 0LL;
        do
        {
          uint64_t v16 = &v14[v15 / 8];
          *uint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
          v16[1] = 0xAAAAAAAAAAAAAAAALL;
          v15 += 16LL;
        }

        while (v12 != v15);
        if (v13 < 0x10) {
          goto LABEL_20;
        }
        *unint64_t v14 = v11;
        if (v12 < 1)
        {
LABEL_19:
          __break(0x5519u);
LABEL_20:
          __break(1u);
          return;
        }

        if ((unint64_t)cczp_bitlen() < 0xFFFFFFFFFFFFFFF9LL)
        {
          if (!a3 || a4)
          {
            ccec_export_pub();
            return;
          }

          goto LABEL_19;
        }
      }

      __break(0x5500u);
    }

    __break(0x550Cu);
  }

unint64_t CTCopyDeviceIdentifiers(unint64_t result, uint64_t a2, uint64_t a3)
{
  v12[1] = *MEMORY[0x1895F89C0];
  uint64_t v3 = 327696LL;
  if (!result || !a2) {
    return v3;
  }
  uint64_t v11 = 0LL;
  v12[0] = 0LL;
  unint64_t v10 = 0LL;
  if (__CFADD__(result, a2))
  {
    __break(0x5513u);
  }

  else if (result + a2 >= result)
  {
    v9[0] = result;
    v9[1] = result + a2;
    int v5 = CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v9, v12);
    uint64_t v6 = 327697LL;
    if (!v5 && !HIDWORD(v12[0]))
    {
      if (CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v9, &v11))
      {
        return 327698LL;
      }

      else
      {
        int v7 = CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v9, &v10);
        uint64_t v6 = 327699LL;
        if (!v7)
        {
          char v8 = v10;
          if (v10 <= 0xFF)
          {
            uint64_t v6 = 0LL;
            if (a3)
            {
              *(_DWORD *)a3 = v12[0];
              *(void *)(a3 + 8) = v11;
              *(_BYTE *)(a3 + 16) = (v8 & 8) != 0;
              *(_BYTE *)(a3 + 17) = (v8 & 4) != 0;
              *(_BYTE *)(a3 + 18) = v8 & 3;
              *(void *)(a3 + 24) = 0LL;
              *(void *)(a3 + 32) = 0LL;
            }
          }
        }
      }
    }

    return v6;
  }

  __break(0x5519u);
  return result;
}

uint64_t CTConvertDashTerminatedHexstringTo64BitInteger(uint64_t result, void *a2)
{
  unint64_t v2 = *(unsigned __int8 **)result;
  unint64_t v3 = *(void *)(result + 8);
  if (*(void *)result > v3) {
    goto LABEL_51;
  }
  uint64_t v4 = (void *)result;
  int v5 = *(unsigned __int8 **)result;
  if (*(void *)result < v3)
  {
    unint64_t v6 = v3 - (void)v2;
    int v5 = *(unsigned __int8 **)result;
    while (*v5 != 45)
    {
      int v7 = v5 + 1;
      *(void *)uint64_t result = v7;
      ++v5;
      if (!--v6)
      {
        int v5 = (unsigned __int8 *)v3;
        break;
      }
    }
  }

  uint64_t result = 327708LL;
  char v8 = (_BYTE)v5 - (_BYTE)v2;
  if (v5 - v2 > 16) {
    return result;
  }
  BOOL v9 = v5 + 1;
  if ((unint64_t)(v5 + 1) > v3 || v5 > v9)
  {
LABEL_51:
    __break(0x5519u);
LABEL_52:
    __break(0x5513u);
LABEL_53:
    __break(0x5500u);
    return result;
  }

  uint64_t v10 = 0LL;
  *uint64_t v4 = v9;
  if (v2 >= v5 || (signed int v11 = v8 + 1 + (((v8 + 1) & 0x8000u) >> 15), v11 << 23 >> 24 < 1))
  {
LABEL_47:
    uint64_t result = 0LL;
    if (a2) {
      *a2 = v10;
    }
  }

  else
  {
    char v12 = 0;
    uint64_t v10 = 0LL;
    uint64_t v13 = v11 >> 1;
    char v14 = 8 * v13 - 8;
    while (1)
    {
      if ((v8 & 1) == 0 || (v12 & 1) != 0)
      {
        unint64_t v16 = *v2;
        unint64_t v17 = &asciiNibbleToByte[v16];
        BOOL v18 = v17 < (unsigned __int8 *)&CTOidAppleImg4Manifest && v17 >= asciiNibbleToByte;
        if (!v18) {
          goto LABEL_51;
        }
        if (v2 + 1 > v5 || v2 > v2 + 1) {
          goto LABEL_51;
        }
        unsigned int v15 = *v17;
        ++v2;
      }

      else
      {
        unsigned int v15 = 0;
      }

      if (v2 >= v5) {
        return 327703LL;
      }
      unint64_t v19 = *v2;
      uint64_t v20 = &asciiNibbleToByte[v19];
      unint64_t v22 = v2 + 1;
      if (v2 + 1 > v5 || v2 > v22) {
        goto LABEL_51;
      }
      if (v15 > 0xF) {
        return 327703LL;
      }
      unsigned int v23 = *v20;
      if (v23 > 0xF) {
        return 327703LL;
      }
      unint64_t v24 = (unint64_t)(v23 | (16 * v15)) << (v14 & 0xF8);
      BOOL v18 = __CFADD__(v10, v24);
      v10 += v24;
      if (v18) {
        goto LABEL_53;
      }
      if (v22 < v5)
      {
        v14 -= 8;
        char v12 = 1;
        unint64_t v2 = v22;
        if (v13-- > 1) {
          continue;
        }
      }

      goto LABEL_47;
    }
  }

  return result;
}

uint64_t CTEvaluateBAASystem(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 1, a3, a4, 0LL, 0LL, 0LL, 0LL, X509PolicyBAASystem);
}

unint64_t CTEvaluateBAASystemWithId( unint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  unint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  unint64_t result = CTEvaluateCertsForPolicy(a1, a2, 0, 1, a3, a4, 0LL, 0LL, &v7, &v8, X509PolicyBAASystem);
  if (!(_DWORD)result) {
    return CTFillBAAIdentity(v7, v8, v9, a5);
  }
  return result;
}

unint64_t CTFillBAAIdentity(int a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 0x800000) != 0 && a4)
  {
    unint64_t result = CTCopyDeviceIdentifiers(a2, a3, a4);
    if ((_DWORD)result) {
      return result;
    }
  }

  else if (!a4)
  {
    return 0LL;
  }

  unint64_t result = 0LL;
  if (a1 < 0 && a3)
  {
    if (a2)
    {
      *(void *)(a4 + 32) = 0LL;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      unint64_t result = 0LL;
      *(void *)(a4 + 24) = a2;
      *(void *)(a4 + 32) = a3;
      return result;
    }

    return 0LL;
  }

  return result;
}

unint64_t CTEvaluateBAASystemTestRoot( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v9 = 0LL;
  unint64_t result = CTEvaluateCertsForPolicy(a1, a2, 1, 1, a5, a6, a3, a4, &v9, &v10, X509PolicyBAASystem);
  if (!(_DWORD)result) {
    return CTFillBAAIdentity(v9, v10, v11, a7);
  }
  return result;
}

unint64_t CTEvaluateBAAUser(unint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  unint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  unint64_t result = CTEvaluateCertsForPolicy(a1, a2, 0, 1, a3, a4, 0LL, 0LL, &v7, &v8, X509PolicyBAAUser);
  if (!(_DWORD)result) {
    return CTFillBAAIdentity(v7, v8, v9, a5);
  }
  return result;
}

unint64_t CTEvaluateBAAUserTestRoot( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v9 = 0LL;
  unint64_t result = CTEvaluateCertsForPolicy(a1, a2, 1, 1, a5, a6, a3, a4, &v9, &v10, X509PolicyBAAUser);
  if (!(_DWORD)result) {
    return CTFillBAAIdentity(v9, v10, v11, a7);
  }
  return result;
}

unint64_t CTEvaluateBAASepApp( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v9 = 0LL;
  unint64_t result = CTEvaluateCertsForPolicy(a1, a2, 1, 1, a5, a6, a3, a4, &v9, &v10, X509PolicyBAASepApp);
  if (!(_DWORD)result) {
    return CTFillBAAIdentity(v9, v10, v11, a7);
  }
  return result;
}

uint64_t CTEvaluateBAAAccessory( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t result = CTEvaluateCertsForPolicy(a1, a2, 0, 1, a5, a6, a3, a4, 0LL, &v12, X509PolicyMFi4Attestation);
  if (!(_DWORD)result && a7)
  {
    if (a8)
    {
      uint64_t v11 = v13;
      *a7 = v12;
      *a8 = v11;
    }
  }

  return result;
}

uint64_t CTEvaluateBAA( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  switch(a1)
  {
    case 1LL:
      uint64_t result = CTEvaluateBAASystemTestRoot(a2, a3, a4, a5, a6, a7, a10);
      break;
    case 2LL:
      uint64_t result = CTEvaluateBAAUserTestRoot(a2, a3, a4, a5, a6, a7, a10);
      break;
    case 3LL:
      uint64_t result = CTEvaluateBAAAccessory(a2, a3, a4, a5, a6, a7, a8, a9);
      break;
    case 4LL:
      uint64_t result = CTEvaluateBAASepApp(a2, a3, a4, a5, a6, a7, a10);
      break;
    default:
      uint64_t result = 327712LL;
      break;
  }

  return result;
}

uint64_t CTGetBAARootType(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_14:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_14;
  }
  v3[0] = a1;
  v3[1] = a1 + a2;
  return 3LL;
}

uint64_t CTGetBAASubCAType(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_14:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_14;
  }
  v3[0] = a1;
  v3[1] = a1 + a2;
  return 3LL;
}

uint64_t CTEvaluateDAK( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  unint64_t v7 = a1 + a2;
  if (a1 + a2 < a1) {
    goto LABEL_31;
  }
  uint64_t result = CTEvaluateBAAUserTestRoot(a1, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result) {
    return result;
  }
  *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[17] = v12;
  v27[18] = v12;
  v27[15] = v12;
  v27[16] = v12;
  v27[13] = v12;
  v27[14] = v12;
  v27[11] = v12;
  v27[12] = v12;
  v27[9] = v12;
  v27[10] = v12;
  v27[7] = v12;
  v27[8] = v12;
  v27[5] = v12;
  void v27[6] = v12;
  v27[3] = v12;
  v27[4] = v12;
  v27[1] = v12;
  size_t v27[2] = v12;
  v27[0] = v12;
  v18[0] = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = 0LL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_32;
  }
  v16[0] = a1;
  v16[1] = v7;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(v16, (unint64_t)v27, 1LL, v18, &v17);
  if (!(_DWORD)result)
  {
    if (!v18[0]) {
      return 327691LL;
    }
    unint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    uint64_t result = CTParseExtensionValue( *(void *)v18[0],  *(void *)(v18[0] + 8LL),  &CTOidAppleFDRIdentity,  9uLL,  &v25,  &v26);
    if (!(_DWORD)result)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      if (!__CFADD__(v25, v26))
      {
        if (v25 > v25 + v26) {
          goto LABEL_31;
        }
        unint64_t v23 = v25;
        unint64_t v24 = v25 + v26;
        unint64_t v22 = v26;
        uint64_t result = ccder_blob_decode_tl();
        if (!(_DWORD)result) {
          return 720929LL;
        }
        if (v24 < v23) {
          goto LABEL_31;
        }
        unint64_t v13 = v22;
        if (v22 > v24 - v23) {
          goto LABEL_31;
        }
        unint64_t v25 = v23;
        unint64_t v26 = v22;
        if (!__CFADD__(v23, v22))
        {
          uint64_t v14 = (_BYTE *)v23;
          if (v23 < v23 + v22)
          {
            do
            {
              if (*v14 == 45) {
                goto LABEL_19;
              }
              ++v14;
              --v13;
            }

            while (v13);
            uint64_t v14 = (_BYTE *)(v23 + v22);
          }

uint64_t CMSParseContentInfoSignedDataWithOptions(char *a1, uint64_t a2, unint64_t *a3, char a4)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t v28 = (char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (char *)0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_114;
  }
  if (&a1[a2] < a1) {
    goto LABEL_112;
  }
  int v4 = 65537;
  uint64_t v28 = a1;
  uint64_t v29 = &a1[a2];
  __int16 v27 = 0;
  size_t v26 = 0xAAAAAAAAAAAAAAAALL;
  int v7 = ccder_blob_decode_ber_tl((uint64_t)&v28, 0x2000000000000010LL, (_BYTE *)&v27 + 1, &v26);
  uint64_t result = 65537LL;
  if (v7)
  {
    unint64_t v24 = (char *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v25 = (char *)0xAAAAAAAAAAAAAAAALL;
    if (__CFADD__(v28, v26)) {
      goto LABEL_114;
    }
    if (v28 > &v28[v26] || &v28[v26] > v29) {
      goto LABEL_112;
    }
    unint64_t v24 = v28;
    unint64_t v25 = &v28[v26];
    if (ccder_blob_decode_tl())
    {
      if (v25 < v24 || v26 > v25 - v24) {
        goto LABEL_112;
      }
      if (__CFADD__(v24, v26)) {
        goto LABEL_114;
      }
      if (v24 > &v24[v26] || &v24[v26] > v25) {
        goto LABEL_112;
      }
      v24 += v26;
      unint64_t v22 = (char *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v23 = (char *)0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v24, v26)) {
        goto LABEL_114;
      }
      if (v24 > &v24[v26] || &v24[v26] > v25) {
        goto LABEL_112;
      }
      unint64_t v22 = v24;
      unint64_t v23 = &v24[v26];
      __int16 v31 = 0;
      memset(v30, 170, sizeof(v30));
      if (__CFADD__(v22, v30[0])) {
        goto LABEL_114;
      }
      uint64_t v9 = 131080LL;
      if (&v22[v30[0]] != v23) {
        return 131082LL;
      }
      unint64_t v10 = a3 + 11;
      uint64_t result = 131092LL;
      if (*v10 <= 4uLL && ((1LL << *v10) & 0x1A) != 0)
      {
        unsigned __int8 v35 = 0;
        size_t v34 = 0LL;
        size_t v32 = (char *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        if (__CFADD__(v22, v34)) {
          goto LABEL_114;
        }
        if (v22 > &v22[v34] || &v22[v34] > v23) {
          goto LABEL_112;
        }
        size_t v32 = v22;
        unint64_t v33 = (unint64_t)&v22[v34];
        if (__CFADD__(v32, v34)) {
          goto LABEL_114;
        }
        uint64_t v11 = &v32[v34];
        v32 += v34;
        int v12 = v35;
        if (v11 != (char *)v33 || v35)
        {
          unsigned __int8 v40 = 0;
          uint64_t v38 = (char *)v33;
          unint64_t v39 = 0LL;
          __int128 v37 = v11;
          if (ccder_blob_decode_ber_tl((uint64_t)&v37, 0xA000000000000000LL, &v40, &v39))
          {
            if (!v12)
            {
              if (__CFADD__(v37, v39)) {
                goto LABEL_114;
              }
            }

            if (v37 > v38) {
              goto LABEL_112;
            }
            size_t v32 = v37;
            unint64_t v33 = (unint64_t)v38;
            unsigned __int8 v36 = 0;
            int v16 = v40;
            unint64_t v41 = 0LL;
            uint64_t v17 = v32;
            unint64_t v18 = v33;
            unint64_t v19 = v41;
            a3[9] = (unint64_t)v32;
            a3[10] = v19;
            if (__CFADD__(v17, v19))
            {
LABEL_114:
              __break(0x5513u);
              return 0LL;
            }

            unint64_t v20 = &v17[v19];
            size_t v32 = v20;
          }

          else
          {
            if (!v12) {
              return v9;
            }
            int v16 = v40;
          }

          uint64_t v11 = v32;
        }

        if (v11 > v23 || v22 > v11) {
          goto LABEL_112;
        }
        unint64_t v22 = v11;
        __int128 v37 = (char *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v38 = (char *)0xAAAAAAAAAAAAAAAALL;
        if (v22 > v23) {
          goto LABEL_112;
        }
        __int128 v37 = v22;
        uint64_t v38 = v23;
        if ((ccder_blob_decode_ber_tl((uint64_t)&v37, 0xA000000000000000LL, &v31, v30) & 1) == 0)
        {
          unint64_t v13 = v22;
          int v15 = v23;
          goto LABEL_86;
        }

        size_t v32 = (char *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        if (!__CFADD__(v37, v30[0]))
        {
          if (v37 > &v37[v30[0]] || &v37[v30[0]] > v38) {
            goto LABEL_112;
          }
          size_t v32 = v37;
          unint64_t v33 = (unint64_t)&v37[v30[0]];
          unint64_t v13 = v32;
          if (v32 - v37 >= 0 ? v32 >= v37 : v32 < v37)
          {
            if (v37 > v32) {
              goto LABEL_112;
            }
            int v15 = v38;
            if (v32 > v38) {
              goto LABEL_112;
            }
            unint64_t v22 = v32;
            unint64_t v23 = v38;
LABEL_86:
            if (v13 <= v15)
            {
              __int128 v37 = v13;
              uint64_t v38 = v15;
              if (ccder_blob_eat_ber_inner((unint64_t *)&v37, 0xA000000000000001LL, 0LL, 125))
              {
                if (v37 > v38) {
                  goto LABEL_112;
                }
                unint64_t v22 = v37;
                unint64_t v23 = v38;
              }

              if (v30[2] >= v30[1])
              {
                unint64_t v21 = &v22[-v30[1]];
                if ((unint64_t)&v22[-v30[1]] <= v30[2] - v30[1])
                {
                  a3[5] = v30[1];
                  a3[6] = (unint64_t)v21;
                  if (v22 <= v25 && v24 <= v22)
                  {
                    unint64_t v24 = v22;
                    if (ccder_blob_decode_eoc((unint64_t *)&v24, HIBYTE(v27)))
                    {
                      if ((a4 & 1) == 0 && v24 != v29) {
                        return 65543LL;
                      }
                      return 0LL;
                    }

                    return (v4 + 5);
                  }
                }
              }
            }

LABEL_112:
            __break(0x5519u);
            return (v4 + 5);
          }
        }

        goto LABEL_114;
      }
    }

    else
    {
      return 65538LL;
    }
  }

  return result;
}

uint64_t ccder_blob_decode_ber_tl(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t *a4)
{
  int v8 = ccder_blob_decode_tag();
  uint64_t result = 0LL;
  if (v8)
  {
    if (a2 == 0xAAAAAAAAAAAAAAAALL) {
      return ccder_blob_decode_ber_len(a1, a3, a4);
    }
  }

  return result;
}

uint64_t ccder_blob_decode_eoc(unint64_t *a1, int a2)
{
  if (!a2) {
    return 1LL;
  }
  uint64_t result = ccder_blob_decode_tl();
  if (!(_DWORD)result) {
    return result;
  }
  unint64_t v4 = *a1;
  if (*a1 >= 0x5555555555555556LL)
  {
    __break(0x5513u);
LABEL_12:
    __break(0x5519u);
    return result;
  }

  unint64_t v5 = v4 - 0x5555555555555556LL;
  if (v4 > v4 - 0x5555555555555556LL || v5 > a1[1]) {
    goto LABEL_12;
  }
  *a1 = v5;
  return 1LL;
}

uint64_t CMSParseContentInfoSignedData(char *a1, uint64_t a2, unint64_t *a3)
{
  return CMSParseContentInfoSignedDataWithOptions(a1, a2, a3, 0);
}

uint64_t CMSParseSignerInfos(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, __int128 *))
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (__CFADD__(v4, v3)) {
    goto LABEL_93;
  }
  if (v4 > v4 + v3) {
    goto LABEL_92;
  }
  unint64_t v84 = *(void *)(a1 + 40);
  unint64_t v85 = v4 + v3;
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  if (v4 >= v4 + v3)
  {
    unsigned int v48 = 0;
    uint64_t result = 0LL;
    if (v3) {
      return (v48 << 8) | 0x30008;
    }
    return result;
  }

  unsigned int v6 = 0;
  unsigned __int8 v60 = 0;
  int v7 = 256;
  while (1)
  {
    unsigned __int8 v71 = 0;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    DWORD2(v83) = 327681;
    LOBYTE(v82) = v6 + 1;
    if ((ccder_blob_decode_ber_tl((uint64_t)&v84, 0x2000000000000010LL, &v71, &v72) & 1) == 0)
    {
      int v49 = 196609;
      return v7 | v49;
    }

    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
    if (__CFADD__(v84, v72)) {
      goto LABEL_93;
    }
    if (v84 > v84 + v72 || v84 + v72 > v85) {
      goto LABEL_92;
    }
    unint64_t v69 = v84;
    unint64_t v70 = v84 + v72;
    if ((ccder_blob_decode_uint64() & 1) == 0)
    {
      int v49 = 196610;
      return v7 | v49;
    }

    unint64_t v9 = v69;
    unint64_t v8 = v70;
    unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
    if (v69 > v70) {
      goto LABEL_92;
    }
    unint64_t v67 = v69;
    unint64_t v68 = v70;
    unint64_t v65 = v69;
    unint64_t v66 = v70;
    unint64_t v10 = v69;
LABEL_19:
    if (__CFADD__(v72, v10 - v9)) {
      goto LABEL_94;
    }
    if (v72 + v10 - v9 > v8 - v9) {
      goto LABEL_92;
    }
    *((void *)&v73 + 1) = v9;
    *(void *)&__int128 v74 = v72 + v10 - v9;
    if (__CFADD__(v10, v72)) {
      goto LABEL_93;
    }
    if (v10 > v10 + v72 || v10 + v72 > v70) {
      goto LABEL_92;
    }
    unint64_t v69 = v10 + v72;
    if (!ccder_blob_decode_AlgorithmIdentifierNULL(&v69, (unint64_t *)&v74 + 1))
    {
      int v49 = 196612;
      return v7 | v49;
    }

    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    if (v69 > v70) {
      goto LABEL_92;
    }
    unint64_t v63 = v69;
    unint64_t v64 = v70;
    if (ccder_blob_decode_tl())
    {
      if (v64 < v63 || v72 > v64 - v63) {
        goto LABEL_92;
      }
      *((void *)&v75 + 1) = v63;
      *(void *)&__int128 v76 = v72;
      if (__CFADD__(v63, v72)) {
        goto LABEL_93;
      }
      if (v63 > v63 + v72 || v63 + v72 > v64) {
        goto LABEL_92;
      }
      unint64_t v69 = v63 + v72;
      unint64_t v70 = v64;
    }

    else
    {
      *((void *)&v75 + 1) = 0LL;
      *(void *)&__int128 v76 = 0LL;
    }

    if ((ccder_blob_decode_AlgorithmIdentifierNULL(&v69, (unint64_t *)&v76 + 1) & 1) == 0)
    {
      int v49 = 196613;
      return v7 | v49;
    }

    if ((ccder_blob_decode_tl() & 1) == 0)
    {
      int v49 = 196614;
      return v7 | v49;
    }

    if (v70 < v69 || v72 > v70 - v69) {
      goto LABEL_92;
    }
    *((void *)&v78 + 1) = v69;
    *(void *)&__int128 v79 = v72;
    if (__CFADD__(v69, v72)) {
      goto LABEL_93;
    }
    unint64_t v12 = v69 + v72;
    if (v69 > v69 + v72 || v12 > v70) {
      goto LABEL_92;
    }
    v69 += v72;
    unint64_t v63 = v12;
    unint64_t v64 = v70;
    if (ccder_blob_eat_ber_inner(&v63, 0xA000000000000001LL, 0LL, 125))
    {
      if (v63 > v64) {
        goto LABEL_92;
      }
      unint64_t v69 = v63;
      unint64_t v70 = v64;
    }

    if ((ccder_blob_decode_eoc(&v69, v71) & 1) == 0)
    {
      int v49 = 196615;
      return v7 | v49;
    }

    digest = find_digest((uint64_t)&v74 + 8);
    if (digest)
    {
      uint64_t v14 = digest;
      unsigned int v15 = *(_DWORD *)(a1 + 96);
      if (!v15 || *digest <= v15)
      {
        uint64_t result = a3(a2, a1, &v73);
        if ((_DWORD)result != 327710)
        {
          if ((_DWORD)result) {
            return result;
          }
          unint64_t v17 = *(void *)(a1 + 64);
          if (v17 <= v60)
          {
            if (v17)
            {
              int v29 = v60 - 1;
              unint64_t v30 = *(void *)(a1 + 56);
              uint64_t v31 = 176LL * v29;
              if (__CFADD__(v30, v31)) {
                goto LABEL_93;
              }
              unint64_t v32 = v30 + 176LL * v29;
              if (v32 >= v30 + 176 * v17 || v32 < v30) {
                goto LABEL_92;
              }
              unint64_t v33 = find_digest(v30 + 176LL * v29 + 24);
              if (v33)
              {
                if (*v14 > *v33)
                {
                  unsigned int v34 = *(_DWORD *)(a1 + 96);
                  if (!v34 || *v14 <= v34)
                  {
                    unint64_t v35 = *(void *)(a1 + 56);
                    if (__CFADD__(v35, v31)) {
                      goto LABEL_93;
                    }
                    unsigned __int8 v36 = (_OWORD *)(v35 + 176LL * v29);
                    unint64_t v37 = v35 + 176LL * *(void *)(a1 + 64);
                    BOOL v38 = v37 >= (unint64_t)v36;
                    unint64_t v39 = v37 - (void)v36;
                    __int128 v40 = v73;
                    __int128 v41 = v75;
                    v36[1] = v74;
                    _OWORD v36[2] = v41;
                    *unsigned __int8 v36 = v40;
                    __int128 v42 = v76;
                    __int128 v43 = v77;
                    __int128 v44 = v79;
                    v36[5] = v78;
                    v36[6] = v44;
                    v36[3] = v42;
                    v36[4] = v43;
                    __int128 v45 = v80;
                    __int128 v46 = v81;
                    __int128 v47 = v83;
                    v36[9] = v82;
                    v36[10] = v47;
                    v36[7] = v45;
                    v36[8] = v46;
                  }
                }
              }
            }
          }

          else
          {
            unsigned int v18 = *(_DWORD *)(a1 + 96);
            if (!v18 || *v14 <= v18)
            {
              uint64_t v19 = *(void *)(a1 + 56);
              unint64_t v20 = (_OWORD *)(v19 + 176LL * v60);
              if (176 * v17 - 176LL * v60 < 0xB0) {
                goto LABEL_92;
              }
              __int128 v21 = v73;
              __int128 v22 = v75;
              v20[1] = v74;
              _OWORD v20[2] = v22;
              *unint64_t v20 = v21;
              __int128 v23 = v76;
              __int128 v24 = v77;
              __int128 v25 = v79;
              void v20[5] = v78;
              v20[6] = v25;
              v20[3] = v23;
              v20[4] = v24;
              __int128 v26 = v80;
              __int128 v27 = v81;
              __int128 v28 = v83;
              v20[9] = v82;
              v20[10] = v28;
              v20[7] = v26;
              _BYTE v20[8] = v27;
              if (v60 == 0xFF)
              {
                __break(0x5507u);
                return result;
              }

              ++v60;
            }
          }
        }
      }
    }

    if (v69 > v85 || v84 > v69) {
      goto LABEL_92;
    }
    unint64_t v84 = v69;
    unsigned int v48 = v6 + 1;
    if (v6 <= 6)
    {
      v7 += 256;
      ++v6;
      if (v69 < v85) {
        continue;
      }
    }

    if (v69 == v85)
    {
      if (v60) {
        return 0LL;
      }
      uint64_t v50 = *(void *)(a1 + 64);
      if (!v50) {
        return 0LL;
      }
      if ((unint64_t)(176 * v50) >= 0xB0)
      {
        uint64_t result = 0LL;
        __int128 v51 = *(_OWORD **)(a1 + 56);
        __int128 v52 = v73;
        __int128 v53 = v75;
        v51[1] = v74;
        v51[2] = v53;
        *__int128 v51 = v52;
        __int128 v54 = v76;
        __int128 v55 = v77;
        __int128 v56 = v79;
        v51[5] = v78;
        v51[6] = v56;
        v51[3] = v54;
        v51[4] = v55;
        __int128 v57 = v80;
        __int128 v58 = v81;
        __int128 v59 = v83;
        v51[9] = v82;
        v51[10] = v59;
        v51[7] = v57;
        v51[8] = v58;
        return result;
      }

LABEL_92:
      __break(0x5519u);
LABEL_93:
      __break(0x5513u);
LABEL_94:
      __break(0x5500u);
    }

    return (v48 << 8) | 0x30008;
  }

  if ((ccder_blob_decode_tl() & 1) != 0)
  {
    unint64_t v10 = v67;
    unint64_t v11 = v68;
LABEL_17:
    if (v10 > v11) {
      goto LABEL_92;
    }
    unint64_t v69 = v10;
    unint64_t v70 = v11;
    goto LABEL_19;
  }

  if (ccder_blob_decode_tl())
  {
    unint64_t v10 = v65;
    unint64_t v11 = v66;
    goto LABEL_17;
  }

  int v49 = 196611;
  return v7 | v49;
}

uint64_t CMSBuildPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = *(void *)(a3 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  if (__CFADD__(v3, v4)) {
LABEL_49:
  }
    __break(0x5513u);
  unint64_t v5 = v3 + v4;
  if (v3 > v5) {
    goto LABEL_48;
  }
  unint64_t v20 = *(void *)(a3 + 8);
  unint64_t v21 = v5;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if (*(void *)a3 != 3LL)
  {
    if (*(void *)a3 != 1LL) {
      return 524289LL;
    }
    uint64_t v8 = 524293LL;
    if (v21 >= v20 && v19 <= v21 - v20)
    {
      unint64_t v15 = v20;
      unint64_t v16 = v19;
      if (__CFADD__(v20, v19)) {
        goto LABEL_49;
      }
      if (v20 <= v20 + v19 && v20 + v19 <= v21)
      {
        v20 += v19;
        if (v21 >= v20 && v19 <= v21 - v20)
        {
          unint64_t v17 = v20;
          unint64_t v18 = v19;
          if (__CFADD__(v20, v19)) {
            goto LABEL_49;
          }
          if (v20 <= v20 + v19 && v20 + v19 <= v21)
          {
            v20 += v19;
            unint64_t v9 = *(void **)(a2 + 24);
            if (!v9) {
              return v8;
            }
            while (compare_octet_string((uint64_t)&v15, (uint64_t)(v9 + 15))
                 || compare_octet_string((uint64_t)&v17, (uint64_t)(v9 + 17)))
            {
              unint64_t v9 = (void *)v9[34];
              if (!v9) {
                return v8;
              }
            }

            goto LABEL_36;
          }
        }
      }
    }

    goto LABEL_48;
  }

  if (*(void *)(a2 + 88) == 1LL) {
    return 524298LL;
  }
  unint64_t v15 = v3;
  unint64_t v16 = v5;
  if (ccder_blob_decode_tl())
  {
    unint64_t v11 = v20;
    unint64_t v10 = v21;
    goto LABEL_29;
  }

  uint64_t v8 = 524294LL;
  unint64_t v11 = v15;
  unint64_t v10 = v16;
  if (v15 > v16)
  {
LABEL_48:
    __break(0x5519u);
    goto LABEL_49;
  }

  unint64_t v20 = v15;
  unint64_t v21 = v16;
LABEL_29:
  if (v10 < v11 || v19 > v10 - v11) {
    goto LABEL_48;
  }
  unint64_t v17 = v11;
  unint64_t v18 = v19;
  if (__CFADD__(v11, v19)) {
    goto LABEL_49;
  }
  if (v11 > v11 + v19 || v11 + v19 > v10) {
    goto LABEL_48;
  }
  unint64_t v20 = v11 + v19;
  uint64_t CertificateUsingKeyIdentifier = X509ChainGetCertificateUsingKeyIdentifier((uint64_t *)(a2 + 24), (uint64_t)&v17);
  if (!CertificateUsingKeyIdentifier) {
    return 524295LL;
  }
  unint64_t v9 = (void *)CertificateUsingKeyIdentifier;
LABEL_36:
  if (v20 != v21) {
    return 524543LL;
  }
  uint64_t v13 = X509ChainBuildPath(v9, (uint64_t *)(a2 + 24), (void *)(a3 + 152));
  uint64_t v8 = v13;
  if (*(_DWORD *)(a3 + 168) == 327681) {
    *(_DWORD *)(a3 + 168) = v13;
  }
  return v8;
}

uint64_t validateSignerInfo(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  unsigned int v6 = (__int128 *)(a3 + 24);
  digest = find_digest(a3 + 24);
  if (!digest) {
    return 327682LL;
  }
  uint64_t v8 = (unint64_t *)(*((uint64_t (**)(void))digest + 3))();
  unint64_t v9 = v8;
  memset(v34, 0, sizeof(v34));
  unint64_t v10 = (_OWORD *)a2[13];
  unint64_t v11 = a2[14];
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (a2[9] && a2[10])
    {
      unint64_t v10 = v34;
      uint64_t v13 = ccdigest();
      unint64_t v11 = *v9;
      if (*v9 >= 0x41) {
        goto LABEL_55;
      }
      goto LABEL_16;
    }

    if (!v10) {
      goto LABEL_31;
    }
  }

  if (*v8 != v11)
  {
LABEL_31:
    *(_DWORD *)(a3 + 168) = 327710;
    return 327710LL;
  }

  if (v11 > 0x40) {
    goto LABEL_55;
  }
  uint64_t v13 = __memcpy_chk();
LABEL_16:
  *(void *)(a3 + 128) = v10;
  *(void *)(a3 + 136) = v11;
  unint64_t v15 = (void *)(a3 + 128);
  uint64_t v16 = *(void *)(a3 + 48);
  if (!v16)
  {
    uint64_t result = CMSBuildPath(v13, (uint64_t)a2, a3);
    switch((int)result)
    {
      case 524293:
      case 524295:
        *(_DWORD *)(a3 + 168) = result;
        return 0LL;
      case 524294:
        goto LABEL_52;
      case 524296:
        if (*(_DWORD *)(a3 + 168) != 458753) {
          goto LABEL_43;
        }
        int v20 = 524296;
LABEL_42:
        *(_DWORD *)(a3 + 168) = v20;
LABEL_43:
        uint64_t v21 = *v9;
        if (*v9 > 0x40) {
          goto LABEL_55;
        }
        v28[0] = (uint64_t)v34;
        v28[1] = v21;
        uint64_t result = X509CertificateCheckSignatureDigest(29, *(void *)(a3 + 152), v28, v6, (__int128 *)(a3 + 88));
        if (!(_DWORD)result || (_DWORD)result == 655648 || (_DWORD)result == 655632)
        {
          int v22 = *(_DWORD *)(a3 + 168);
          if (!v22 || v22 == 458753 || v22 == 327681) {
            *(_DWORD *)(a3 + 168) = result;
          }
          uint64_t result = 0LL;
        }

        break;
      case 524297:
        int v20 = 524297;
        goto LABEL_42;
      default:
        if ((_DWORD)result) {
          goto LABEL_52;
        }
        goto LABEL_43;
    }

    goto LABEL_52;
  }

  uint64_t v25 = a1;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = *(void *)(a3 + 40);
  if (__CFADD__(v17, v16)) {
LABEL_56:
  }
    __break(0x5513u);
  unint64_t v18 = v17 + v16;
  if (v17 > v18) {
    goto LABEL_55;
  }
  unint64_t v32 = *(void *)(a3 + 40);
  unint64_t v33 = v18;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  if (v17 >= v18)
  {
    uint64_t result = 262156LL;
    goto LABEL_52;
  }

  uint64_t v27 = 0x2000000000000010LL;
  unsigned int v24 = 262146;
  int v26 = 262147;
  int v23 = 458754;
  if (!ccder_blob_decode_tl())
  {
    uint64_t result = 262145LL;
    goto LABEL_52;
  }

  if (__CFADD__(v32, v31)) {
    goto LABEL_56;
  }
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  if (v32 > v32 + v31 || v32 + v31 > v33)
  {
LABEL_55:
    __break(0x5519u);
    goto LABEL_56;
  }

  unint64_t v29 = v32;
  unint64_t v30 = v32 + v31;
  if (ccder_blob_decode_tl())
  {
    if (__CFADD__(v29, v31)) {
      goto LABEL_56;
    }
    if (v29 <= v29 + v31 && v29 + v31 <= v30)
    {
      v29 += v31;
      uint64_t result = 262150LL;
      goto LABEL_52;
    }

    goto LABEL_55;
  }

  uint64_t result = v24;
LABEL_52:
  if ((_OWORD *)*v15 == v34)
  {
    *unint64_t v15 = 0LL;
    *(void *)(a3 + 136) = 0LL;
  }

  return result;
}

uint64_t validateSignerInfoAndChain(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = validateSignerInfo((uint64_t)a1, a2, a3);
  if (!(_DWORD)v5)
  {
    int v7 = X509ChainCheckPath(29, (uint64_t *)(a3 + 152), *a1);
    if (v7)
    {
      if (!*(_DWORD *)(a3 + 168)) {
        *(_DWORD *)(a3 + 168) = v7;
      }
    }
  }

  return v5;
}

uint64_t CMSVerifySignedDataWithLeaf( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v8 = 0LL;
  v9[0] = 0LL;
  return CMSVerify(a1, a2, a3, a4, a5, a6, a7, &v8, v9);
}

uint64_t CMSVerify( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v29 = 0LL;
  v30[0] = 0LL;
  memset(v28, 0, sizeof(v28));
  uint64_t v26 = 0LL;
  uint64_t v25 = 0LL;
  __int128 v23 = 0u;
  unsigned int v24 = (char *)&v23 + 8;
  v30[1] = 0LL;
  memset(__b, 170, sizeof(__b));
  v22[0] = 4LL;
  v22[1] = (unint64_t)__b;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v27 = v19;
  *(void *)&v28[0] = 1LL;
  DWORD2(v21) = 327681;
  if (a2 < 0) {
    goto LABEL_19;
  }
  uint64_t result = CMSParseContentInfoSignedDataWithOptions(a1, a2, v22, 0);
  if ((_DWORD)result) {
    return result;
  }
  if (!a4) {
    goto LABEL_7;
  }
  uint64_t result = 131091LL;
  if (a4 < 0) {
LABEL_19:
  }
    __break(0x5519u);
  *((void *)&v28[0] + 1) = a3;
  *(void *)&v28[1] = a4;
LABEL_7:
  v30[0] = a5;
  DWORD2(v21) = 458753;
  uint64_t result = CMSParseSignerInfos( (uint64_t)v22,  (uint64_t)v30,  (uint64_t (*)(uint64_t, uint64_t, __int128 *))validateSignerInfoAndChain);
  if (!(_DWORD)result)
  {
    uint64_t result = DWORD2(v21);
    if (!DWORD2(v21))
    {
      if (a6 && a7) {
        uint64_t result = X509CertificateParseKey(*((uint64_t *)&v20 + 1), a6, a7);
      }
      if (!a4)
      {
        if (a8)
        {
          if (a9)
          {
            uint64_t v18 = *(void *)&v28[1];
            if (*(void *)&v28[1])
            {
              if (*((void *)&v28[0] + 1))
              {
                *a8 = *((void *)&v28[0] + 1);
                *a9 = v18;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t CMSVerifySignedData(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  v9[0] = 0LL;
  uint64_t v8 = 0LL;
  return CMSVerify(a1, a2, a3, a4, a5, &v6, &v7, &v8, v9);
}

uint64_t CMSVerifyAndReturnSignedData(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  v7[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0LL;
  v7[0] = 0LL;
  return CMSVerify(a1, a2, 0LL, 0LL, a5, &v6, v7, a3, a4);
}

uint64_t ccder_blob_decode_ber_len(uint64_t result, _BYTE *a2, unint64_t *a3)
{
  *a2 = 0;
  unint64_t v3 = *(unsigned __int8 **)result;
  if (!*(void *)result) {
    return 0LL;
  }
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v3 + 1;
  if (v3 >= v3 + 1 || (unint64_t)v5 > v4)
  {
LABEL_41:
    __break(0x5519u);
LABEL_42:
    __break(0x5513u);
    return result;
  }

  *(void *)uint64_t result = v5;
  unint64_t v7 = *v3;
  if ((char)*v3 < 0)
  {
    switch(*v3)
    {
      case 0x80u:
        unint64_t v7 = v4 - (void)v5;
        *a2 = 1;
        break;
      case 0x81u:
        uint64_t v8 = v3 + 2;
        *(void *)uint64_t result = v8;
        unint64_t v7 = *v5;
        uint64_t v5 = v8;
        break;
      case 0x82u:
        unint64_t v9 = v3 + 3;
        unint64_t v10 = (unint64_t)v3[1] << 8;
        uint64_t v11 = v3[2];
        goto LABEL_40;
      case 0x83u:
        unint64_t v9 = v3 + 4;
        unint64_t v10 = ((unint64_t)v3[1] << 16) | ((unint64_t)v3[2] << 8);
        uint64_t v11 = v3[3];
LABEL_40:
        unint64_t v7 = v10 | v11;
        *(void *)uint64_t result = v9;
        uint64_t v5 = v9;
        break;
      default:
        return 0LL;
    }
  }

  *a3 = v7;
  return 1LL;
}

uint64_t CMSParseImplicitCertificateSet( unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  *a4 = 0LL;
  a4[1] = 0LL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (*a1 > v6)
  {
LABEL_43:
    __break(0x5519u);
LABEL_44:
    __break(0x5513u);
  }

  unint64_t v30 = *a1;
  unint64_t v31 = v6;
  BOOL v7 = v5 >= v6 || a3 == 0;
  if (v7)
  {
    unint64_t v12 = 0LL;
LABEL_8:
    if (a5) {
      *a5 = v12;
    }
    return 1LL;
  }

  else
  {
    unint64_t v12 = 0LL;
    unint64_t v13 = 304 * a3;
    unint64_t v14 = a2 + 304 * a3;
    unint64_t v25 = ~a2;
    uint64_t v27 = (unint64_t **)(a4 + 1);
    __int128 v23 = (unint64_t *)(a2 + 272);
    unint64_t v15 = a2;
    while (1)
    {
      char v29 = 0;
      if (!v32) {
        goto LABEL_8;
      }
      if (v15 > v14) {
        goto LABEL_43;
      }
      if (v15 < a2) {
        goto LABEL_43;
      }
      BOOL v16 = v13 >= 0x130;
      v13 -= 304LL;
      if (!v16) {
        goto LABEL_43;
      }
      *(_OWORD *)(v15 + 272) = 0u;
      *(_OWORD *)(v15 + 288) = 0u;
      *(_OWORD *)(v15 + 240) = 0u;
      *(_OWORD *)(v15 + 256) = 0u;
      *(_OWORD *)(v15 + 208) = 0u;
      *(_OWORD *)(v15 + 224) = 0u;
      *(_OWORD *)(v15 + 176) = 0u;
      *(_OWORD *)(v15 + 192) = 0u;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 128) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)unint64_t v15 = 0u;
      if (v12)
      {
        if (v15 + 304 > v14) {
          goto LABEL_43;
        }
        *(void *)(v15 + 272) = 0LL;
        unint64_t v17 = *v27;
        *(void *)(v15 + 280) = *v27;
        if (v15)
        {
          if (v15 >= v14) {
            goto LABEL_43;
          }
        }

        *unint64_t v17 = v15;
        _OWORD *v27 = (unint64_t *)(v15 + 272);
      }

      else
      {
        if (v15 + 304 > v14) {
          goto LABEL_43;
        }
        unint64_t v18 = *a4;
        *__int128 v23 = *a4;
        unint64_t v19 = (unint64_t **)(v18 + 280);
        BOOL v7 = v18 == 0;
        __int128 v20 = v27;
        if (!v7) {
          __int128 v20 = v19;
        }
        *__int128 v20 = v23;
        if (v15)
        {
          if (v15 >= v14) {
            goto LABEL_43;
          }
        }

        *a4 = v15;
        *(void *)(a2 + 280) = a4;
      }

      if (v6 < v5) {
        goto LABEL_43;
      }
      unint64_t v21 = v30;
      uint64_t v22 = v30 - v5;
      if (v30 - v5 > v6 - v5) {
        goto LABEL_43;
      }
      if (v15 + 304 > v14) {
        goto LABEL_43;
      }
      *(void *)unint64_t v15 = v5;
      *(void *)(v15 + 8) = v22;
      unint64_t v6 = v31;
      if (v21 > v31) {
        goto LABEL_43;
      }
      *a1 = v21;
      a1[1] = v6;
      ++v12;
      if (v21 < v6)
      {
        v15 += 304LL;
        unint64_t v5 = v21;
        if (v12 < a3) {
          continue;
        }
      }

      goto LABEL_8;
    }
  }

uint64_t ccder_blob_eat_ber_inner(unint64_t *a1, uint64_t a2, unint64_t *a3, int a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  char v15 = 0;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  int v8 = ccder_blob_decode_tag();
  uint64_t result = 0LL;
  if (v8 && v14 == a2)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = ccder_blob_decode_ber_len((uint64_t)a1, &v15, &v13);
    if ((result & 1) == 0) {
      return 0LL;
    }
    if (a3)
    {
      unint64_t v10 = a1[1];
      if (*a1 > v10) {
        goto LABEL_18;
      }
      *a3 = *a1;
      a3[1] = v10;
    }

    if (v15)
    {
      if (a4 >= 1)
      {
        uint64_t result = ccder_blob_eat_ber_inner(a1, 0LL, 0LL, (char)(a4 - 1));
        if (!(_DWORD)result) {
          return result;
        }
        return (ccder_blob_decode_eoc(a1, 1) & 1) != 0;
      }

      return 0LL;
    }

    unint64_t v11 = *a1;
    if (__CFADD__(*a1, v13))
    {
LABEL_19:
      __break(0x5513u);
      return result;
    }

    unint64_t v12 = v11 + v13;
    if (v11 <= v11 + v13 && v12 <= a1[1])
    {
      *a1 = v12;
      return 1LL;
    }

uint64_t compare_octet_string(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  size_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return memcmp(*(const void **)a1, *(const void **)a2, v2);
  }
  if (v2 > v3) {
    return 0xFFFFFFFFLL;
  }
  return 1LL;
}

uint64_t compare_octet_string_raw(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = *(void *)(a1 + 8);
  if (v3 == a3) {
    return memcmp(*(const void **)a1, a2, a3);
  }
  if (v3 > a3) {
    return 0xFFFFFFFFLL;
  }
  return 1LL;
}

uint64_t compare_octet_string_partial(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  if (v2 <= *(void *)(a2 + 8)) {
    return memcmp(*(const void **)a2, *(const void **)a1, v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ccder_blob_decode_AlgorithmIdentifierNULL(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    if (*a1 > a1[1]) {
      goto LABEL_20;
    }
    unint64_t v5 = *a1;
    unint64_t v6 = *a1;
    uint64_t result = ccder_blob_decode_tl();
    if (!(_DWORD)result) {
      return result;
    }
    if (a2)
    {
      if (v6 < v5) {
        goto LABEL_20;
      }
      *a2 = v5;
      a2[1] = 0LL;
    }

    if (v5 == v6)
    {
      if (v5 <= a1[1] && *a1 <= v5)
      {
        *a1 = v5;
        return 1LL;
      }
    }

    else if (v5 <= v6)
    {
      uint64_t result = ccder_blob_decode_tl();
      if (!(_DWORD)result) {
        return result;
      }
      if (v5 != v6) {
        return 0LL;
      }
      if (v5 <= a1[1] && *a1 <= v5)
      {
        *a1 = v5;
        return 1LL;
      }
    }

uint64_t ccder_blob_decode_Time(void *a1)
{
  if (*a1 > a1[1]) {
    goto LABEL_6;
  }
  if ((ccder_blob_decode_tl() & 1) != 0) {
    return 0LL;
  }
  if (*a1 > a1[1]) {
LABEL_6:
  }
    __break(0x5519u);
  ccder_blob_decode_tl();
  return 0LL;
}

uint64_t ccder_blob_decode_GeneralName(unint64_t *a1, int *a2, unint64_t *a3)
{
  uint64_t result = 0LL;
  if (a2 && a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v10 = *a1;
    if (ccder_blob_decode_tl())
    {
      *a2 = 0;
LABEL_6:
      unint64_t v7 = v10;
LABEL_16:
      if (v7 <= a1[1] && *a1 <= v7)
      {
        *a1 = v7;
        return 1LL;
      }

uint64_t ccder_blob_check_null()
{
  return ccder_blob_decode_tl();
}

uint64_t CTParseCertificateSet(unint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4, void *a5)
{
  uint64_t v6 = 0LL;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1 < a2 && a4)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = a4 - 1;
    unint64_t v10 = a3;
    unint64_t v11 = (unint64_t)&a3[a4];
    while (1)
    {
      *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v17[17] = v12;
      v17[18] = v12;
      v17[15] = v12;
      v17[16] = v12;
      v17[13] = v12;
      v17[14] = v12;
      v17[11] = v12;
      v17[12] = v12;
      v17[9] = v12;
      v17[10] = v12;
      v17[7] = v12;
      v17[8] = v12;
      v17[5] = v12;
      v17[6] = v12;
      v17[3] = v12;
      v17[4] = v12;
      v17[1] = v12;
      void v17[2] = v12;
      v17[0] = v12;
      unint64_t v15 = a1;
      unint64_t v16 = a2;
      uint64_t result = X509CertificateParse((unint64_t *)v17, &v15);
      if ((_DWORD)result) {
        break;
      }
      a1 = v15;
      a2 = v16;
      *unint64_t v10 = v17[0];
      uint64_t v6 = v8 + 1;
      if (a1 < a2)
      {
        ++v10;
        if (v9 != v8++) {
          continue;
        }
      }

      goto LABEL_11;
    }
  }

  else
  {
LABEL_11:
    uint64_t result = 0LL;
    if (a5) {
      *a5 = v6;
    }
  }

  return result;
}

uint64_t CTParseExtensionValue( unint64_t a1, uint64_t a2, const void *a3, size_t a4, void *a5, void *a6)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_11;
  }
  v10[0] = a1;
  v10[1] = a1 + a2;
  uint64_t result = X509CertificateParseWithExtension((unint64_t *)v11, v10, a3, a4);
  if (!(_DWORD)result)
  {
    uint64_t result = 720914LL;
    if (*((void *)&v12 + 1))
    {
      uint64_t v9 = v13;
      if ((void)v13)
      {
        uint64_t result = 0LL;
        if (a5)
        {
          if (a6)
          {
            uint64_t result = 0LL;
            *a5 = *((void *)&v12 + 1);
            *a6 = v9;
          }
        }
      }
    }
  }

  return result;
}

uint64_t CTParseKey(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  memset(v8, 0, sizeof(v8));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_7:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a1 + a2;
  uint64_t result = X509CertificateParse((unint64_t *)v8, v7);
  if (!(_DWORD)result) {
    return X509CertificateParseKey((uint64_t)v8, a3, a4);
  }
  return result;
}

uint64_t CTEvaluateSavageCertsWithUID( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, BOOL *a9)
{
  return CTEvaluateCertifiedChip(a1, a2, a3, a4, a5, a6, a7, a8, 0LL, 0LL, a9, (uint64_t)&X509PolicySavage, 2LL);
}

uint64_t CTEvaluateCertifiedChip( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, const void *a9, size_t a10, BOOL *a11, uint64_t a12, uint64_t a13)
{
  __b[152] = *MEMORY[0x1895F89C0];
  uint64_t result = (uint64_t)memset(__b, 170, 0x4C0uLL);
  memset(v33, 170, sizeof(v33));
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v32 = 0LL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_34;
  }
  if (a1 + a2 < a1) {
    goto LABEL_35;
  }
  unint64_t v30 = a1;
  unint64_t v31 = a1 + a2;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(&v30, (unint64_t)__b, 4LL, &v33[2], &v32);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t result = 327690LL;
  if (v30 != v31) {
    return result;
  }
  if (v32 != 2) {
    return 327692LL;
  }
  X509ChainResetChain(v33, &v33[2]);
  __b[74] = v33[0];
  uint64_t v22 = v33[0] ? (uint64_t *)(v33[0] + 296) : &v33[1];
  *uint64_t v22 = (uint64_t)&__b[74];
  if ((void *)((char *)&__b[38] + 1) != 0LL && (unint64_t)__b >= 0xFFFFFFFFFFFFFECFLL) {
LABEL_34:
  }
    __break(0x5513u);
  v33[0] = (uint64_t)&__b[38];
  __b[75] = v33;
  __b[36] = 0LL;
  __b[37] = v33[1];
  *(void *)v33[1] = __b;
  v33[1] = (uint64_t)&__b[36];
  uint64_t result = X509ChainCheckPathWithOptions(12, v33, a12, 0LL);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v23 = **(void **)(v33[1] + 8);
  uint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  if ((a4 & 0x8000000000000000LL) != 0) {
    goto LABEL_35;
  }
  uint64_t v28 = a3;
  unint64_t v29 = a4;
  unsigned int v24 = (__int128 *)oidForPubKeyLength();
  uint64_t result = X509CertificateCheckSignatureWithPublicKey( &v28,  (uint64_t)&ecPublicKey,  v24,  v23 + 16,  (__int128 *)(v23 + 40),  (__int128 *)(v23 + 56));
  if ((_DWORD)result) {
    return result;
  }
  if (a9 && a10)
  {
    if ((a10 & 0x8000000000000000LL) != 0) {
      goto LABEL_35;
    }
  }

  unint64_t v25 = v33[0];
  LODWORD(result) = X509CertificateParseKey(v33[0], a5, a6);
  int v26 = result;
  if ((_DWORD)result) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 327691LL;
  }
  if (!v25 || v26) {
    return result;
  }
  if (a11) {
    *a11 = (*(void *)(v25 + 240) & a13) != 0;
  }
  if (!a7 || !a8) {
    return 0LL;
  }
  v27[0] = 0LL;
  v27[1] = 0LL;
  if (v25 >= v25 + 304) {
    goto LABEL_35;
  }
  uint64_t result = X509CertificateSubjectNameGetCommonName((unint64_t *)(v25 + 104), v27);
  if ((_DWORD)result) {
    return result;
  }
  if (a8 < 0)
  {
LABEL_35:
    __break(0x5519u);
    return result;
  }

  uint64_t result = CTCopyUID((uint64_t)v27, a7, a8);
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t CTEvaluateSavageCerts( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, BOOL *a7)
{
  return CTEvaluateCertifiedChip(a1, a2, a3, a4, a5, a6, 0LL, 0LL, 0LL, 0LL, a7, (uint64_t)&X509PolicySavage, 2LL);
}

uint64_t CTEvaluateYonkersCerts( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, BOOL *a9)
{
  return CTEvaluateCertifiedChip(a1, a2, a3, a4, a5, a6, a7, a8, 0LL, 0LL, a9, (uint64_t)&X509PolicyYonkers, 0x80000LL);
}

uint64_t CTEvaluateSensorCerts( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, size_t a6, void *a7, void *a8, _BYTE *a9, uint64_t a10, BOOL *a11)
{
  return CTEvaluateCertifiedChip( a1,  a2,  a3,  a4,  a7,  a8,  a9,  a10,  a5,  a6,  a11,  (uint64_t)&X509PolicySensor,  0x10000000000LL);
}

uint64_t CTEvaluateCertsForPolicy( unint64_t a1, uint64_t a2, char a3, int a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, void *a10, __int128 *a11)
{
  v41[116] = *MEMORY[0x1895F89C0];
  memset(v38, 170, sizeof(v38));
  bzero(v39, 0x4C0uLL);
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_42:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_42;
  }
  uint64_t v36 = a1 + a2;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v35 = a1;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(&v35, (unint64_t)v39, 4LL, &v38[2], &v37);
  if ((_DWORD)result) {
    return result;
  }
  if (v35 != v36) {
    return 327690LL;
  }
  if ((a4 & 1) == 0 && !v40)
  {
    X509ChainResetChain(v38, &v38[2]);
    uint64_t v20 = v38[0];
    unint64_t v21 = (uint64_t *)(v38[0] + 296);
    if (!v38[0]) {
      unint64_t v21 = &v38[1];
    }
    *unint64_t v21 = (uint64_t)v41;
    v38[0] = (uint64_t)v39;
    v41[0] = v20;
    v41[1] = v38;
LABEL_20:
    v34[0] = a7;
    v34[1] = a8;
    if (a7) {
      BOOL v23 = a8 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v32 = v24;
    *(_OWORD *)&v32[16] = v24;
    __int128 v31 = *a11;
    v32[0] = *((_BYTE *)a11 + 16);
    if (v23) {
      char v25 = a3;
    }
    else {
      char v25 = 1;
    }
    v32[1] = v25;
    *(_WORD *)&v32[2] = *((_WORD *)a11 + 9);
    if (v23)
    {
      *(_OWORD *)&v32[8] = *(__int128 *)((char *)a11 + 24);
      uint64_t v27 = (_UNKNOWN **)*((void *)a11 + 5);
    }

    else
    {
      uint64_t v26 = *((void *)a11 + 4);
      *(void *)&v32[8] = v34;
      *(void *)&v32[16] = v26;
      uint64_t v27 = oidForPubKeyLength();
    }

    uint64_t v28 = *((void *)a11 + 6);
    *(void *)&v32[24] = v27;
    uint64_t v33 = v28;
    uint64_t result = X509ChainCheckPathWithOptions(12, v38, (uint64_t)&v31, 0LL);
    if (!(_DWORD)result)
    {
      unint64_t v29 = (void *)v38[0];
      if (!a5 || !a6 || !v38[0] || (uint64_t result = X509CertificateParseKey(v38[0], a5, a6), !(_DWORD)result))
      {
        if (a10 && v29)
        {
          uint64_t v30 = v29[32];
          *a10 = v29[31];
          a10[1] = v30;
        }

        uint64_t result = 0LL;
        if (a9)
        {
          if (v29)
          {
            uint64_t result = 0LL;
            *a9 = v29[30];
          }
        }
      }
    }

    return result;
  }

  if (v39[265])
  {
    if (v38[2])
    {
      uint64_t v22 = (_BYTE *)v38[2];
      while (v22[265])
      {
        uint64_t v22 = (_BYTE *)*((void *)v22 + 34);
        if (!v22)
        {
          uint64_t v22 = (_BYTE *)v38[2];
          break;
        }
      }
    }

    else
    {
      uint64_t v22 = 0LL;
    }
  }

  else
  {
    uint64_t v22 = v39;
  }

  uint64_t result = X509ChainBuildPathPartial(v22, &v38[2], v38, a4 ^ 1u);
  if (!(_DWORD)result) {
    goto LABEL_20;
  }
  return result;
}

uint64_t CTEvaluateSatori(unint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  return CTEvaluateCertsForPolicy(a1, a2, a3, 1, a4, a5, 0LL, 0LL, 0LL, 0LL, X509PolicySatori);
}

uint64_t CTEvaluateAcrt(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 0, a3, a4, 0LL, 0LL, 0LL, 0LL, X509PolicyACRT);
}

uint64_t CTEvaluateUcrt(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 1, a3, a4, 0LL, 0LL, 0LL, 0LL, X509PolicyUcrt);
}

uint64_t CTEvaluateUcrtTestRoot( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  return CTEvaluateCertsForPolicy(a1, a2, 1, 1, a5, a6, a3, a4, 0LL, 0LL, X509PolicyUcrt);
}

uint64_t CTEvaluatePragueSignatureCMS( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v9 = 0xAAAAAAAA0000AA01LL;
  __int128 v8 = xmmword_183D0E550;
  BYTE1(v9) = a5;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  return CMSVerifySignedDataWithLeaf(a1, a2, a3, a4, (uint64_t)&v8, a6, a7);
}

uint64_t CTEvaluateKDLSignatureCMS( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v9 = 0xAAAAAAAA0000AA01LL;
  __int128 v8 = xmmword_183D0E560;
  BYTE1(v9) = a5;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  return CMSVerifySignedDataWithLeaf(a1, a2, a3, a4, (uint64_t)&v8, a6, a7);
}

uint64_t CTVerifyAppleMarkerExtension(void *a1, uint64_t a2)
{
  uint64_t result = 327700LL;
  unint64_t v4 = a1[31];
  unint64_t v5 = a1[32];
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 327707LL;
  }
  uint64_t v7 = a1[30];
  if ((v7 & 0x100000000LL) == 0)
  {
    if ((v7 & 0x200000000LL) == 0) {
      return result;
    }
    if (!__CFADD__(v4, v5))
    {
      unint64_t v11 = v4 + v5;
      if (v4 + v5 != -1LL)
      {
        if (v5 > 0x13) {
          return 327704LL;
        }
        uint64_t v16 = (unsigned __int8 *)(v11 - 1);
        if (v11 - 1 >= v4)
        {
          uint64_t v10 = 0LL;
          uint64_t v17 = 0LL;
          while ((unint64_t)v16 < v11)
          {
            int v18 = *v16;
            if (v17 == 20) {
              break;
            }
            if ((v17 & 0x1FFFFFFFFFFFFFFFLL) == 0x14) {
              goto LABEL_39;
            }
            unint64_t v19 = (v18 - 48);
            unint64_t v20 = powersOfTen[v17];
            if (!is_mul_ok(v19, v20)) {
              goto LABEL_40;
            }
            unint64_t v21 = v19 * v20;
            BOOL v15 = __CFADD__(v10, v21);
            v10 += v21;
            if (v15) {
              goto LABEL_38;
            }
            ++v17;
          }

LABEL_37:
          __break(0x5519u);
LABEL_38:
          __break(0x5500u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(0x550Cu);
          goto LABEL_41;
        }

        goto LABEL_13;
      }
    }

LABEL_41:
    __break(0x5513u);
    return result;
  }

  if (__CFADD__(v4, v5)) {
    goto LABEL_41;
  }
  unint64_t v8 = v4 + v5;
  if (v4 + v5 == -1LL) {
    goto LABEL_41;
  }
  unint64_t v9 = (_BYTE *)(v8 - 1);
  if (v8 - 1 >= v4)
  {
    char v12 = 0;
    unint64_t v13 = 0LL;
    uint64_t v10 = 0LL;
    while ((unint64_t)v9 < v8)
    {
      unint64_t v14 = (unint64_t)(*v9 & 0x7F) << v12;
      BOOL v15 = __CFADD__(v10, v14);
      v10 += v14;
      if (v15) {
        goto LABEL_38;
      }
      if (v13 <= 7)
      {
        ++v13;
        --v9;
        v12 += 7;
      }

      goto LABEL_23;
    }

    goto LABEL_37;
  }

uint64_t CTVerifyHostname(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v3 = 327702LL;
  if (*(void *)(a1 + 232) && *(void *)(a1 + 224))
  {
    v7[1] = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00LL;
    v7[0] = a2;
    unsigned int v4 = X509CertificateParseGeneralNamesContent( a1,  (uint64_t (*)(void, int *, uint64_t))CTCompareGeneralNameToHostname,  (uint64_t)v7);
    if ((_BYTE)v8) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = 327706;
    }
    if (v4) {
      return v4;
    }
    else {
      return v5;
    }
  }

  return v3;
}

uint64_t CTCompareGeneralNameToHostname(uint64_t result, void *a2, unint64_t a3)
{
  if ((_DWORD)result != 2) {
    return 1LL;
  }
  unsigned int v4 = *(char **)a3;
  size_t v5 = *(void *)(a3 + 8);
  size_t v6 = ~*(void *)a3;
  if (v5 > v6) {
    goto LABEL_50;
  }
  uint64_t v7 = &v4[v5];
  unint64_t v8 = v7 - 1;
  if (v7) {
    BOOL v9 = v8 >= v4;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9 || a3 + 24 < a3) {
    goto LABEL_49;
  }
  int v11 = *v8;
  uint64_t result = compare_octet_string((uint64_t)a2, a3);
  if (!(_DWORD)result) {
    goto LABEL_48;
  }
  if (v11 != 46) {
    goto LABEL_15;
  }
  size_t v12 = v5 - 1;
  if (v5)
  {
    if (v12 <= v5)
    {
      uint64_t result = compare_octet_string_raw((uint64_t)a2, v4, v12);
      if ((_DWORD)result)
      {
LABEL_15:
        unint64_t v13 = a2[1];
        if (v13 < 3) {
          return 1LL;
        }
        unint64_t v14 = (_BYTE *)*a2;
        if (*(_BYTE *)*a2 != 42) {
          return 1LL;
        }
        if (v14 != (_BYTE *)-1LL)
        {
          BOOL v15 = v14 + 1;
          if (v14[1] == 46)
          {
            uint64_t v16 = -2LL;
            uint64_t v17 = -v16;
            uint64_t v18 = 2LL;
            uint64_t result = 1LL;
            while (v17 != v18)
            {
              if (&v14[v18] < v14) {
                goto LABEL_49;
              }
              if (v14[v18] == 46)
              {
                if (v13 == v18) {
                  return 1LL;
                }
                size_t v19 = 0LL;
                if (v5)
                {
                  while (1)
                  {
                    unint64_t v20 = &v4[v19];
                    if (&v4[v19] >= v7 || v20 < v4) {
                      goto LABEL_49;
                    }
                    if (*v20 == 46) {
                      break;
                    }
                    if (v5 == ++v19)
                    {
                      size_t v19 = v5;
                      break;
                    }
                  }
                }

                size_t v22 = v13 - 1;
                BOOL v9 = v5 >= v19;
                size_t v23 = v5 - v19;
                if (!v9) {
                  goto LABEL_51;
                }
                if (v22 == v23)
                {
                  if (v19 > v6) {
                    goto LABEL_50;
                  }
                  uint64_t result = memcmp(v15, &v4[v19], v13 - 1);
                  if (!(_DWORD)result) {
                    goto LABEL_48;
                  }
                }

                if (v11 != 46) {
                  return 1LL;
                }
                if (!v23) {
                  goto LABEL_51;
                }
                if (v22 != v23 - 1) {
                  return 1LL;
                }
                if (v19 <= v6)
                {
                  if (!memcmp(v15, &v4[v19], v22)) {
                    goto LABEL_48;
                  }
                  return 1LL;
                }

                goto LABEL_50;
              }

              if (v13 == ++v18) {
                return result;
              }
            }

            goto LABEL_50;
          }

          return 1LL;
        }

LABEL_50:
        __break(0x5513u);
        goto LABEL_51;
      }

LABEL_48:
      uint64_t result = 0LL;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }

LABEL_49:
    __break(0x5519u);
    goto LABEL_50;
  }

LABEL_51:
  __break(0x5515u);
  return result;
}

uint64_t CTEvaluateAppleSSLWithOptionalTemporalCheck( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unint64_t v20 = 0xAAAAAAAA00AAAA01LL;
  unint64_t v21 = &null_octet;
  __int128 v19 = xmmword_183D0E570;
  BYTE1(v20) = a6;
  BYTE2(v20) = a7;
  size_t v22 = &null_octet;
  size_t v23 = &null_octet;
  __int128 v24 = &CTOctetServerAuthEKU;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t result = CTEvaluateCertsForPolicy(a1, a2, a6, 1, &v17, &v18, 0LL, 0LL, 0LL, 0LL, &v19);
  if (!(_DWORD)result)
  {
    *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[17] = v13;
    v16[18] = v13;
    v16[15] = v13;
    v16[16] = v13;
    v16[13] = v13;
    v16[14] = v13;
    v16[11] = v13;
    v16[12] = v13;
    v16[9] = v13;
    v16[10] = v13;
    v16[7] = v13;
    v16[8] = v13;
    v16[6] = v13;
    v16[4] = v13;
    v16[5] = v13;
    unint64_t v16[2] = v13;
    v16[3] = v13;
    v16[0] = v13;
    v16[1] = v13;
    memset(v15, 170, sizeof(v15));
    if (__CFADD__(a1, a2))
    {
      __break(0x5513u);
    }

    else
    {
      v14[0] = a1;
      v14[1] = a1 + a2;
      uint64_t result = (uint64_t)X509ChainParseCertificateSet(v14, (unint64_t)v16, 1LL, &v15[1], v15);
      if (!(_DWORD)result)
      {
        uint64_t result = CTVerifyAppleMarkerExtension(v16, a5);
        if (!(_DWORD)result) {
          return CTVerifyHostname((uint64_t)v16, a3, a4);
        }
      }
    }
  }

  return result;
}

uint64_t CTEvaluateAppleSSL(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return CTEvaluateAppleSSLWithOptionalTemporalCheck(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t CTGetSEKType(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_10:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_10;
  }
  v3[0] = a1;
  v3[1] = a1 + a2;
  return 2LL;
}

uint64_t CTEvaluateSEK(char a1, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = 327712LL;
  if ((a1 & 3) != 0)
  {
    if ((a1 & 1) == 0
      || (uint64_t result = CTEvaluateCertsForPolicy(a2, a3, 0, 1, a4, a5, 0LL, 0LL, 0LL, 0LL, X509PolicySEK), (_DWORD)result))
    {
      if ((a1 & 2) != 0) {
        return CTEvaluateCertsForPolicy( a2,  a3,  0,  1,  a4,  a5,  (uint64_t)&_sek_test_root_public_key,  97LL,  0LL,  0LL,  X509PolicySEK);
      }
    }
  }

  return result;
}

uint64_t CTCopyUID(uint64_t result, _BYTE *a2, uint64_t a3)
{
  unint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (__CFADD__(*(void *)result, v4)) {
    goto LABEL_31;
  }
  unint64_t v6 = v5 + v4;
  uint64_t v7 = *(unsigned __int8 **)result;
  if (v5 < v6)
  {
    while ((unint64_t)v7 >= v5)
    {
      int v3 = *v7;
      goto LABEL_6;
    }

    goto LABEL_34;
  }

uint64_t X509CertificateParseImplicit(uint64_t a1, unint64_t *a2, const void *a3, size_t a4)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  unint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 > v5) {
    goto LABEL_186;
  }
  uint64_t v10 = 720915LL;
  unint64_t v66 = *a2;
  unint64_t v67 = v5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  uint64_t result = ccder_blob_decode_tl();
  if (!(_DWORD)result) {
    return v10;
  }
  uint64_t v12 = v69;
  unint64_t v13 = v66;
  unint64_t v14 = v69 + v66 - v4;
  if (__CFADD__(v69, v66 - v4)) {
    goto LABEL_188;
  }
  if (v14 > v5 - v4) {
    goto LABEL_186;
  }
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v14;
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v13, v12)) {
    goto LABEL_187;
  }
  unint64_t v15 = v13 + v12;
  if (v13 > v15 || v15 > v67) {
    goto LABEL_186;
  }
  unint64_t v64 = v13;
  unint64_t v65 = v15;
  unint64_t v62 = v13;
  unint64_t v63 = v15;
  if (ccder_blob_decode_tl())
  {
    if (__CFADD__(v62, v68)) {
      goto LABEL_187;
    }
    uint64_t v16 = 720916LL;
    if (ccder_blob_decode_uint64() && v62 == v62 + v68)
    {
      if (v62 + v68 > v63) {
        goto LABEL_186;
      }
      unint64_t v64 = v62 + v68;
      unint64_t v65 = v63;
      goto LABEL_14;
    }

    return v16;
  }

LABEL_186:
    __break(0x5519u);
    goto LABEL_187;
  }

LABEL_188:
  __break(0x5500u);
LABEL_189:
  __break(0x5507u);
  return result;
}

uint64_t der_get_BOOLean(void *a1, int a2, _BYTE *a3)
{
  if (*a1 > a1[1]) {
    __break(0x5519u);
  }
  if ((ccder_blob_decode_tl() & 1) != 0 || !a2) {
    return 0LL;
  }
  if (a3) {
    *a3 = 0;
  }
  return 1LL;
}

uint64_t X509ExtensionParseKeyUsage()
{
  uint64_t result = ccder_blob_decode_bitstring();
  if ((_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t X509ExtensionParseBasicConstraints(void *a1, void *a2, _BYTE *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    uint64_t result = der_get_BOOLean(a1, 1, a3);
    if ((_DWORD)result)
    {
      if (ccder_blob_decode_uint64())
      {
        if (!*a3) {
          return 0LL;
        }
        *a2 = 0xAAAAAAAAAAAAAAAALL;
        *a2 = 0xAAAAAAAAAAAAAAABLL;
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t X509ExtensionParseAuthorityKeyIdentifier(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556LL) {
      goto LABEL_15;
    }
    if (v7 - 0x5555555555555556LL != a1[1]) {
      return 0LL;
    }
    if (v7 > v7 - 0x5555555555555556LL) {
      goto LABEL_16;
    }
    unint64_t v10 = *a1;
    unint64_t v11 = v7 - 0x5555555555555556LL;
    uint64_t result = ccder_blob_decode_tl();
    if ((_DWORD)result)
    {
      if (v11 < v10 || v11 - v10 < 0xAAAAAAAAAAAAAAAALL) {
        goto LABEL_16;
      }
      *a2 = v10;
      *a3 = 0xAAAAAAAAAAAAAAAALL;
    }

    unint64_t v8 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
LABEL_15:
      __break(0x5513u);
    }

    else
    {
      unint64_t v9 = v8 - 0x5555555555555556LL;
      if (v8 <= v8 - 0x5555555555555556LL && v9 <= a1[1])
      {
        *a1 = v9;
        return 1LL;
      }
    }

uint64_t X509ExtensionParseSubjectKeyIdentifier(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    unint64_t v7 = a1[1];
    BOOL v8 = v7 >= *a1;
    unint64_t v9 = v7 - *a1;
    if (!v8 || v9 < 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_13;
    }
    *a2 = *a1;
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v11 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v12 = v11 - 0x5555555555555556LL;
    if (v11 > v11 - 0x5555555555555556LL || v12 > a1[1]) {
LABEL_13:
    }
      __break(0x5519u);
    *a1 = v12;
  }

  return result;
}

uint64_t X509ExtensionParseExtendedKeyUsage(unint64_t *a1, unint64_t *a2, void *a3)
{
  int v6 = ccder_blob_decode_tl();
  uint64_t result = 0LL;
  if (v6)
  {
    if (*a1 > a1[1]) {
      goto LABEL_11;
    }
    unint64_t v10 = *a1;
    unint64_t v11 = a1[1];
    uint64_t result = ccder_blob_decode_tl();
    if (!(_DWORD)result) {
      return result;
    }
    if (v11 < v10 || v11 - v10 < 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_11;
    }
    *a2 = v10;
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v8 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v9 = v8 - 0x5555555555555556LL;
    if (v8 > v8 - 0x5555555555555556LL || v9 > a1[1]) {
LABEL_11:
    }
      __break(0x5519u);
    *a1 = v9;
  }

  return result;
}

uint64_t X509ExtensionParseSubjectAltName(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result == 1)
  {
    unint64_t v7 = a1[1];
    BOOL v8 = v7 >= *a1;
    unint64_t v9 = v7 - *a1;
    if (!v8 || v9 < 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_13;
    }
    *a2 = *a1;
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v11 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v12 = v11 - 0x5555555555555556LL;
    if (v11 > v11 - 0x5555555555555556LL || v12 > a1[1]) {
LABEL_13:
    }
      __break(0x5519u);
    *a1 = v12;
  }

  return result;
}

uint64_t X509CertificateVerifyOnlyOneAppleExtension(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 > 9) {
    return 0LL;
  }
  unint64_t v5 = (void *)result;
  unsigned __int8 v6 = 0;
  unint64_t v7 = ~a2;
  while (v7 >= 16LL * (char)v6)
  {
    uint64_t result = compare_octet_string((uint64_t)v5, a2 + 16LL * v6);
    if (!(_DWORD)result) {
      return result;
    }
    if (a3 <= v6++)
    {
      uint64_t v9 = v5[1];
      unint64_t v10 = (void *)(a2 + 16LL * a3);
      *unint64_t v10 = *v5;
      v10[1] = v9;
      return 1LL;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t X509ExtensionParseAppleExtension( uint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, int a6)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  if (a6) {
    a5 = 0LL;
  }
  if (a3 == 11)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10901066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10301066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x200;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10601066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x800;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x11801066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x2000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x12401066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x11901066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x4000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x21901066463F786LL)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x8000;
      goto LABEL_261;
    }

LABEL_157:
    int v44 = 0;
LABEL_158:
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 27) {
      return X509ExtensionParseServerAuthMarker(result, a2, a3, a4, a5);
    }
    if (!v44) {
      goto LABEL_232;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 832)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3586)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v54 = *a4;
      uint64_t v55 = 37748736LL;
    }

    else
    {
      if (*(void *)a2 != 0x66463F78648862ALL || *(_WORD *)(a2 + 8) != 4354)
      {
        if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 327) {
          return (uint64_t)X509ExtensionParseMFI4Properties((unint64_t *)result, a4, a5);
        }
        if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3841LL)
        {
          unint64_t v52 = *(void *)result;
          unint64_t v51 = *(void *)(result + 8);
          if (a5)
          {
            if (v52 > v51) {
              goto LABEL_265;
            }
            *a5 = v52;
            a5[1] = v51 - v52;
          }

          *a4 |= 0x80000000uLL;
LABEL_233:
          if (v52 <= v51)
          {
            *(void *)uint64_t result = v51;
            return 1LL;
          }

LABEL_265:
          __break(0x5519u);
          return result;
        }

        goto LABEL_232;
      }

      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v54 = *a4;
      uint64_t v55 = 0x8004000000LL;
    }

LABEL_201:
    uint64_t v24 = v54 | v55;
    goto LABEL_261;
  }

  if (a3 == 10)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 5122)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 258)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v54 = *a4;
      uint64_t v55 = 0x58600003F0D0LL;
      goto LABEL_201;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1538) {
      goto LABEL_203;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 4610)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0xF00;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3073)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x10;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1793)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x20000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3329)
    {
LABEL_203:
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x20;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 2305)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x40;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 513)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x80;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1025)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x10000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 769)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1537)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 6145)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x1000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 9217)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x80000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 8193)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x2000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 8705)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x4000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 315) {
      return X509ExtensionParseMFISWAuth((unint64_t *)result, a4, a5);
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3074)
    {
      uint64_t result = ccder_blob_check_null();
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x300000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 304) {
      return X509ExtensionParseGenericSSLMarker();
    }
    int v44 = 1;
    goto LABEL_158;
  }

  if (a3 != 9)
  {
    if (a3 < 0xA) {
      goto LABEL_232;
    }
    goto LABEL_157;
  }

  if (*(void *)a2 == 0xB6463F78648862ALL && *(_BYTE *)(a2 + 8) == 1) {
    return X509ExtensionParseComponentAuth((unint64_t *)result, a4, a5);
  }
  if (*(void *)a2 != 0x66463F78648862ALL || *(_BYTE *)(a2 + 8) != 49)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 44) {
      return X509ExtensionParseCertifiedChipIntermediate((unint64_t *)result, a4, a5);
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 36) {
      return X509ExtensionParseMFIAuthv3Leaf((unint64_t *)result);
    }
    if (*(void *)a2 != 0x66463F78648862ALL || *(_BYTE *)(a2 + 8) != 22)
    {
      if (*(void *)a2 == 0xC6463F78648862ALL && *(_BYTE *)(a2 + 8) == 19)
      {
        uint64_t result = ccder_blob_check_null();
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v24 = *a4 | 0x8000000000LL;
        goto LABEL_261;
      }

      if (*(void *)a2 != 0xA6463F78648862ALL || *(_BYTE *)(a2 + 8) != 1)
      {
        if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 29)
        {
          uint64_t result = ccder_blob_check_null();
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v24 = *a4 | 0x2000000;
        }

        else
        {
          if (*(void *)a2 != 0xC6463F78648862ALL || *(_BYTE *)(a2 + 8) != 14)
          {
            if (*(void *)a2 == 0x86463F78648862ALL && *(_BYTE *)(a2 + 8) == 3) {
              return X509ExtensionParseDeviceAttestationIdentity((unint64_t *)result, a4, a5);
            }
            goto LABEL_232;
          }

          uint64_t result = ccder_blob_check_null();
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v24 = *a4 | 0x4000000;
        }

LABEL_261:
        *a4 = v24;
        return 1LL;
      }

      *a4 |= 0x1000000uLL;
LABEL_232:
      unint64_t v52 = *(void *)result;
      unint64_t v51 = *(void *)(result + 8);
      goto LABEL_233;
    }

    uint64_t result = ccder_blob_check_null();
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v54 = *a4;
    uint64_t v55 = 1048584LL;
    goto LABEL_201;
  }

  char v56 = 0;
  uint64_t result = der_get_BOOLean((void *)result, 0, &v56);
  if ((_DWORD)result)
  {
    uint64_t v53 = 0x10000080002LL;
    if (!v56) {
      uint64_t v53 = 0x20000040001LL;
    }
    *a4 |= v53;
  }

  return result;
}

uint64_t X509CertificateParseWithExtension( unint64_t *a1, unint64_t *a2, const void *a3, size_t a4)
{
  uint64_t v8 = 720939LL;
  unint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  unint64_t v11 = *a2;
  uint64_t result = X509CertificateParseImplicit((uint64_t)a1, a2, a3, a4);
  uint64_t v8 = result;
  if ((_DWORD)result) {
    return v8;
  }
  if (v11 >= 0x5555555555555556LL)
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5500u);
    goto LABEL_12;
  }

  uint64_t v8 = 720939LL;
  if (*a2 != v11 - 0x5555555555555556LL) {
    return v8;
  }
  unint64_t v13 = v11 - v9 - 0x5555555555555556LL;
  if (v11 - v9 >= 0x5555555555555556LL) {
    goto LABEL_11;
  }
  if (v10 >= v9 && v13 <= v10 - v9)
  {
    *a1 = v9;
    a1[1] = v13;
    X509PolicyCheckForBlockedKeys((uint64_t)a1);
    return 0LL;
  }

uint64_t X509CertificateParse(unint64_t *a1, unint64_t *a2)
{
  return X509CertificateParseWithExtension(a1, a2, 0LL, 0LL);
}

uint64_t X509CertificateParseSPKI( unint64_t *a1, unint64_t *a2, unint64_t *a3, void *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (__CFADD__(*a1, v5)) {
    goto LABEL_31;
  }
  unint64_t v6 = v4 + v5;
  if (v4 > v6) {
    goto LABEL_30;
  }
  uint64_t v10 = 655361LL;
  unint64_t v14 = *a1;
  unint64_t v15 = v6;
  if (v14 >= 0x5555555555555556LL) {
LABEL_31:
  }
    __break(0x5513u);
  if (v14 > v14 - 0x5555555555555556LL || v14 - 0x5555555555555556LL > v15) {
    goto LABEL_30;
  }
  unint64_t v13 = v14 - 0x5555555555555556LL;
  if (a2)
  {
    if (v13 >= v14)
    {
      *a2 = v14;
      a2[1] = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_12;
    }

uint64_t X509CertificateParseKey(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t result = 327691LL;
  if (a1)
  {
    if (*(void *)(a1 + 96))
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t result = X509CertificateParseSPKI((unint64_t *)(a1 + 88), 0LL, 0LL, &v8);
      if (!(_DWORD)result)
      {
        if (a2)
        {
          if (a3)
          {
            uint64_t v7 = v9;
            *a2 = v8;
            *a3 = v7;
          }
        }
      }
    }
  }

  return result;
}

uint64_t X509CertificateCheckSignatureDigest(char a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  __int128 v28 = 0uLL;
  __int128 v27 = 0uLL;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v24 = 0LL;
  __int128 v23 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v9 = X509CertificateParseSPKI((unint64_t *)(a2 + 88), (unint64_t *)&v28, (unint64_t *)&v27, &v25);
  if ((_DWORD)v9) {
    return v9;
  }
  uint64_t v9 = 655632LL;
  if (compare_octet_string((uint64_t)&v28, (uint64_t)&rsaEncryption))
  {
    unint64_t v11 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureEC;
  }

  else
  {
    unint64_t v11 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureRSA;
  }

  memset(v14, 0, sizeof(v14));
  __int128 v19 = *a5;
  __int128 v15 = *a4;
  __int128 v17 = v28;
  __int128 v18 = v27;
  if (((a1 & 1) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha1, 5uLL))
    && ((a1 & 4) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha256, 9uLL))
    && ((a1 & 8) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha384, 9uLL))
    && ((a1 & 0x10) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha512, 9uLL)))
  {
    return v9;
  }

  uint64_t result = v25;
  if (v26 || !v25)
  {
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13 || !v12)
    {
      if (v11(v25, v26, v12, v13, v14)) {
        return 0LL;
      }
      else {
        return 655648LL;
      }
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t X509CertificateCheckSignature(char a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v12[2] = v8;
  v12[3] = v8;
  v12[0] = v8;
  v12[1] = v8;
  v11[0] = (uint64_t)v12;
  v11[1] = 64LL;
  __int128 v10 = 0uLL;
  uint64_t result = X509MatchSignatureAlgorithm(a3, a4, (uint64_t)v11, &v10);
  if (!(_DWORD)result) {
    return X509CertificateCheckSignatureDigest(a1, a2, v11, &v10, a5);
  }
  return result;
}

uint64_t X509MatchSignatureAlgorithm(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = compare_octet_string_raw(a2, &sha1WithRSA_oid, 9uLL);
  if (!(_DWORD)result) {
    goto LABEL_8;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha256WithRSA_oid, 9uLL);
  if (!(_DWORD)result)
  {
LABEL_10:
    *a4 = &CTOidSha256;
    a4[1] = 9LL;
    if (*(void *)(a3 + 8) < 0x20uLL) {
      goto LABEL_15;
    }
    *(void *)(a3 + 8) = 32LL;
    ccsha256_di();
    goto LABEL_14;
  }

  uint64_t result = compare_octet_string_raw(a2, &sha384WithRSA_oid, 9uLL);
  if (!(_DWORD)result) {
    goto LABEL_12;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha1WithECDSA_oid, 7uLL);
  if (!(_DWORD)result)
  {
LABEL_8:
    *a4 = &CTOidSha1;
    a4[1] = 5LL;
    if (*(void *)(a3 + 8) < 0x14uLL) {
      goto LABEL_15;
    }
    *(void *)(a3 + 8) = 20LL;
    ccsha1_di();
LABEL_14:
    ccdigest();
    return 0LL;
  }

  uint64_t result = compare_octet_string_raw(a2, &sha256WithECDSA_oid, 8uLL);
  if (!(_DWORD)result) {
    goto LABEL_10;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha384WithECDSA_oid, 8uLL);
  if ((_DWORD)result) {
    return 656640LL;
  }
LABEL_12:
  *a4 = &CTOidSha384;
  a4[1] = 9LL;
  if (*(void *)(a3 + 8) >= 0x30uLL)
  {
    *(void *)(a3 + 8) = 48LL;
    ccsha384_di();
    goto LABEL_14;
  }

uint64_t X509CertificateCheckSignatureWithPublicKey( uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, __int128 *a6)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[2] = v11;
  v32[3] = v11;
  v32[0] = v11;
  v32[1] = v11;
  unint64_t v30 = v32;
  uint64_t v31 = 64LL;
  __int128 v29 = 0uLL;
  uint64_t matched = X509MatchSignatureAlgorithm(a4, (uint64_t)a5, (uint64_t)&v30, &v29);
  if ((_DWORD)matched) {
    return matched;
  }
  uint64_t matched = 655617LL;
  if (compare_octet_string(a2, (uint64_t)&rsaEncryption))
  {
    uint64_t v13 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureEC;
  }

  else
  {
    uint64_t v13 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureRSA;
  }

  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  __int128 v25 = 0u;
  __int128 v24 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  __int128 v21 = *a5;
  uint64_t v17 = 0LL;
  __int128 v23 = *a6;
  __int128 v19 = v29;
  if (a3) {
    __int128 v14 = *a3;
  }
  else {
    __int128 v14 = null_octet;
  }
  __int128 v22 = v14;
  uint64_t result = *a1;
  uint64_t v16 = a1[1];
  if ((v16 || !result) && (!v30 || v31))
  {
    else {
      return 655648LL;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t X509CertificateParseGeneralNamesContent( uint64_t a1, uint64_t (*a2)(void, int *, uint64_t), uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v3 = *(void *)(a1 + 224);
  uint64_t v4 = *(void *)(a1 + 232);
  if (__CFADD__(v3, v4))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5519u);
  }

  unint64_t v5 = v3 + v4;
  if (v3 > v5) {
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + 224);
  unint64_t v11 = v5;
  while (1)
  {
    if (v10 >= v11) {
      return 0LL;
    }
    memset(v9, 170, sizeof(v9));
  }

  return 720912LL;
}

uint64_t X509CertificateSubjectNameGetCommonName(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v20 = v3;
  if (__CFADD__(*a1, v3)) {
    goto LABEL_59;
  }
  unint64_t v4 = v2 + v3;
  if (v2 > v4)
  {
LABEL_58:
    __break(0x5519u);
    goto LABEL_59;
  }

  uint64_t v6 = 720901LL;
  unint64_t v18 = *a1;
  unint64_t v19 = v4;
  *a2 = 0LL;
  a2[1] = 0LL;
  if (v2 < v4)
  {
    while (1)
    {
      unint64_t v2 = v18;
      if (__CFADD__(v18, v20)) {
        break;
      }
      unint64_t v7 = v18 + v20;
      if (v18 > v18 + v20 || v7 > v19) {
        goto LABEL_58;
      }
      unint64_t v16 = v18;
      unint64_t v17 = v18 + v20;
      while (v2 < v7)
      {
        if (__CFADD__(v16, v20)) {
          goto LABEL_59;
        }
        if (v16 > v16 + v20 || v16 + v20 > v17) {
          goto LABEL_58;
        }
        unint64_t v15 = v16 + v20;
        unint64_t v2 = v16 + v20;
        if (v16 > v15) {
          goto LABEL_58;
        }
        if (__CFADD__(v16, v20)) {
          goto LABEL_59;
        }
        if (v16 > v16 + v20) {
          goto LABEL_58;
        }
        unint64_t v14 = v16 + v20;
        if (v20 == 3 && *(_WORD *)v16 == 1109 && *(_BYTE *)(v16 + 2) == 3)
        {
          unint64_t v12 = v16 + v20;
          unint64_t v13 = v16 + v20;
          if ((ccder_blob_decode_tl() & 1) == 0)
          {
            if (v14 > v15) {
              goto LABEL_58;
            }
            unint64_t v12 = v16 + v20;
            unint64_t v13 = v16 + v20;
            if ((ccder_blob_decode_tl() & 1) == 0)
            {
              if (v14 > v15) {
                goto LABEL_58;
              }
              unint64_t v12 = v16 + v20;
              unint64_t v13 = v16 + v20;
            }
          }

          if (__CFADD__(v12, v20)) {
            goto LABEL_59;
          }
          unint64_t v2 = v12 + v20;
          if (v15 != v12 + v20) {
            return 720902LL;
          }
          if (v13 < v12 || v20 > v13 - v12) {
            goto LABEL_58;
          }
          *a2 = v12;
          a2[1] = v20;
        }

        unint64_t v7 = v18 + v20;
        if (v2 > v17 || v16 > v2) {
          goto LABEL_58;
        }
        unint64_t v16 = v2;
      }

      if (v2 != v7) {
        return 720903LL;
      }
      unint64_t v4 = v19;
      if (v2 > v19 || v18 > v2) {
        goto LABEL_58;
      }
      unint64_t v18 = v2;
      if (v2 >= v19) {
        goto LABEL_46;
      }
    }

LABEL_46:
  if (v2 != v4) {
    return 720904LL;
  }
  if (a2[1] && *a2) {
    return 0LL;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return 720905LL;
}

BOOL X509CertificateValidAtTime(uint64_t a1, time_t a2)
{
  BOOL result = 0LL;
  v6[1] = *MEMORY[0x1895F89C0];
  time_t v5 = 0LL;
  v6[0] = 0LL;
  if (a1 && a2 != -1) {
    return !X509CertificateGetNotBefore(a1, v6)
  }
        && !X509CertificateGetNotAfter(a1, &v5)
        && difftime(a2, v6[0]) >= 0.0
        && difftime(a2, v5) <= 0.0;
  return result;
}

uint64_t X509CertificateGetNotBefore(uint64_t a1, time_t *a2)
{
  v4[2] = *(const char **)MEMORY[0x1895F89C0];
  v4[0] = (const char *)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (const char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateParseValidity(a1);
  if (!(_DWORD)result) {
    return X509TimeConvert(v4, a2);
  }
  return result;
}

uint64_t X509CertificateGetNotAfter(uint64_t a1, time_t *a2)
{
  v4[2] = *(const char **)MEMORY[0x1895F89C0];
  v4[0] = (const char *)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (const char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateParseValidity(a1);
  if (!(_DWORD)result) {
    return X509TimeConvert(v4, a2);
  }
  return result;
}

BOOL X509CertificateIsValid(uint64_t a1)
{
  time_t v2 = time(0LL);
  return X509CertificateValidAtTime(a1, v2);
}

uint64_t X509CertificateParseValidity(uint64_t result)
{
  time_t v6[2] = *MEMORY[0x1895F89C0];
  uint64_t v1 = 720906LL;
  if (!result) {
    return v1;
  }
  unint64_t v2 = *(void *)(result + 72);
  uint64_t v3 = *(void *)(result + 80);
  if (!v2 || v3 == 0) {
    return v1;
  }
  if (__CFADD__(v2, v3))
  {
    __break(0x5513u);
  }

  else
  {
    unint64_t v5 = v2 + v3;
    if (v2 <= v5)
    {
      v6[0] = *(void *)(result + 72);
      v6[1] = v5;
      return 720908LL;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t X509TimeConvert(const char **a1, time_t *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v2 = 720909LL;
  if (!a1) {
    return v2;
  }
  unint64_t v4 = a1[1];
  v11.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v11.tm_mon = v6;
  *(_OWORD *)&v11.tm_isdst = v6;
  *(_OWORD *)&v11.tm_sec = v6;
  unint64_t v7 = *a1;
  if (v4 == (const char *)13)
  {
    uint64_t result = (uint64_t)strptime(v7, "%y%m%d%H%M%SZ", &v11);
    if (result && v11.tm_year >= 150) {
      v11.tm_year -= 100;
    }
  }

  else
  {
    uint64_t result = (uint64_t)strptime(v7, "%Y%m%d%H%M%SZ", &v11);
  }

  uint64_t v9 = a1[1];
  if (!__CFADD__(*a1, v9))
  {
    time_t v10 = timegm(&v11);
    if (v10 == -1) {
      return 720911LL;
    }
    uint64_t v2 = 0LL;
    if (a2) {
      *a2 = v10;
    }
    return v2;
  }

  __break(0x5513u);
  return result;
}

BOOL X509ExtensionParseComponentAuth(unint64_t *a1, void *a2, unint64_t *a3)
{
  unint64_t v3 = a1[1];
  if (*a1 > v3) {
    goto LABEL_19;
  }
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  unint64_t v11 = v3 - *a1;
  if ((ccder_blob_decode_tl() & 1) != 0) {
    goto LABEL_5;
  }
  if (*a1 > a1[1]) {
    goto LABEL_19;
  }
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  if (ccder_blob_decode_tl())
  {
LABEL_5:
    unint64_t v8 = v12;
    unint64_t v7 = v13;
    if (v12 > v13) {
      goto LABEL_19;
    }
    *a1 = v12;
    a1[1] = v13;
    unint64_t v9 = v11;
  }

  else
  {
    unint64_t v8 = *a1;
    unint64_t v7 = a1[1];
    unint64_t v9 = v7 - *a1;
  }

  if (__CFADD__(v8, v9)) {
    goto LABEL_20;
  }
  if (v7 == v8 + v9)
  {
    if (!v9) {
      goto LABEL_16;
    }
    if (!a3)
    {
LABEL_15:
      *a2 |= 0x40000000uLL;
LABEL_16:
      if (v8 <= v7)
      {
        *a1 = v7;
        return v7 == v8 + v9;
      }

      goto LABEL_19;
    }

    if (v8 <= v7 && v9 <= v7 - v8)
    {
      *a3 = v8;
      a3[1] = v9;
      goto LABEL_15;
    }

uint64_t X509ExtensionParseCertifiedChipIntermediate(unint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
      __break(0x5513u);
      goto LABEL_12;
    }

    unint64_t v8 = v7 - 0x5555555555555556LL;
    if (a1[1] != v7 - 0x5555555555555556LL) {
      return 0LL;
    }
    *a2 |= 0x30000000000uLL;
    if (a3)
    {
      if (v7 > v8) {
        goto LABEL_12;
      }
      *a3 = v7;
      a3[1] = 0xAAAAAAAAAAAAAAAALL;
    }

    if (v7 <= v8)
    {
      *a1 = v8;
      return 1LL;
    }

uint64_t X509ExtensionParseMFIAuthv3Leaf(unint64_t *a1)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    unint64_t v3 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
      __break(0x5513u);
    }

    else
    {
      unint64_t v4 = a1[1];
      if (v4 != v3 - 0x5555555555555556LL) {
        return 0LL;
      }
      if (v3 <= v4)
      {
        *a1 = v4;
        return 1LL;
      }
    }

    __break(0x5519u);
  }

  return result;
}

uint64_t X509ExtensionParseMFISWAuth(unint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556LL)
    {
      __break(0x5513u);
    }

    else
    {
      unint64_t v8 = a1[1];
      if (v8 != v7 - 0x5555555555555556LL) {
        return 0LL;
      }
      if (a3)
      {
        if (v8 < v7 || v8 - v7 < 0xAAAAAAAAAAAAAAAALL) {
          goto LABEL_13;
        }
        *a3 = v7;
        a3[1] = 0xAAAAAAAAAAAAAAAALL;
      }

      *a2 |= 0x30000000uLL;
      if (v7 <= v8)
      {
        *a1 = v8;
        return 1LL;
      }
    }

uint64_t X509ExtensionParseGenericSSLMarker()
{
  return 0LL;
}

uint64_t X509ExtensionParseServerAuthMarker( uint64_t a1, unint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  uint64_t result = ccder_blob_check_null();
  if ((_DWORD)result)
  {
    if (a2 > 0xFFFFFFFFFFFFFFF6LL) {
      goto LABEL_26;
    }
    if (__CFADD__(a2, a3)) {
      goto LABEL_26;
    }
    unint64_t v10 = a2 + a3;
    if (a2 + a3 == -1LL) {
      goto LABEL_26;
    }
    unint64_t v11 = a2 + 9;
    unint64_t v12 = (char *)(a2 + 9);
    while (1)
    {
      BOOL v13 = (unint64_t)v12 < v10 && (unint64_t)v12 >= a2;
      BOOL v14 = v13;
      if (!v14) {
        goto LABEL_25;
      }
      int v15 = *v12++;
      if ((v15 & 0x80000000) == 0) {
        return 0LL;
      }
    }

    if (!v14)
    {
LABEL_25:
      __break(0x5519u);
LABEL_26:
      __break(0x5513u);
      return result;
    }

    if ((*v12 & 0x80000000) == 0)
    {
      if (!a5)
      {
LABEL_22:
        *a4 |= 0x100000000uLL;
        return 1LL;
      }

      if (v11 >= a2 && v11 <= v10)
      {
        *a5 = v11;
        a5[1] = a3 - 9;
        goto LABEL_22;
      }

      goto LABEL_25;
    }

    return 0LL;
  }

  return result;
}

uint64_t X509ExtensionParseDeviceAttestationIdentity(unint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556LL) {
      goto LABEL_17;
    }
    if (a1[1] != v7 - 0x5555555555555556LL) {
      return 0LL;
    }
    if (v7 > v7 - 0x5555555555555556LL) {
      goto LABEL_18;
    }
    unint64_t v10 = *a1;
    unint64_t v11 = v7 - 0x5555555555555556LL;
    uint64_t result = ccder_blob_decode_tl();
    if ((_DWORD)result)
    {
      uint64_t result = ccder_blob_decode_tl();
      if ((_DWORD)result)
      {
        if (a3)
        {
          if (v11 < v10 || v11 - v10 < 0xAAAAAAAAAAAAAAAALL) {
            goto LABEL_18;
          }
          *a3 = v10;
          a3[1] = 0xAAAAAAAAAAAAAAAALL;
        }

        *a2 |= 0x240000800000uLL;
        unint64_t v8 = *a1;
        if (*a1 < 0x5555555555555556LL)
        {
          unint64_t v9 = v8 - 0x5555555555555556LL;
          if (v8 <= v8 - 0x5555555555555556LL && v9 <= a1[1])
          {
            *a1 = v9;
            return 1LL;
          }

unint64_t *X509ExtensionParseMFI4Properties( unint64_t *result, void *a2, unint64_t *a3)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  unint64_t v5 = v3 - *result;
  if (v5 != 32) {
    return (unint64_t *)(v5 == 32);
  }
  if (a3)
  {
    if (v4 > v3)
    {
LABEL_12:
      __break(0x5519u);
      goto LABEL_13;
    }

    *a3 = v4;
    a3[1] = 32LL;
  }

  *a2 |= 0xC00000000uLL;
  if (v4 < 0xFFFFFFFFFFFFFFE0LL)
  {
    unint64_t v6 = v4 + 32;
    if (v4 + 32 <= v3 && v4 <= v6)
    {
      *uint64_t result = v6;
      return (unint64_t *)(v5 == 32);
    }

    goto LABEL_12;
  }

unint64_t *X509ChainParseCertificateSet( unint64_t *result, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = 0LL;
  *a4 = 0LL;
  a4[1] = 0LL;
  BOOL v6 = *result >= result[1] || a3 == 0;
  if (v6)
  {
LABEL_6:
    if (a5)
    {
      uint64_t result = 0LL;
      *a5 = v5;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    unint64_t v9 = result;
    uint64_t v10 = 0LL;
    unint64_t v11 = a2 + 304 * a3;
    unint64_t v12 = ~a2;
    BOOL v13 = a4 + 1;
    BOOL v14 = (void *)(a2 + 272);
    uint64_t v15 = a3 - 1;
    unint64_t v21 = a2 + 272;
    while ((unsigned __int128)(v10 * (__int128)304LL) >> 64 == (304 * v10) >> 63 && 304 * v10 <= v12)
    {
      unint64_t v16 = v14 - 34;
      if (v14 != (void *)272 && ((unint64_t)v16 >= v11 || (unint64_t)v16 < a2))
      {
LABEL_30:
        __break(0x5519u);
        break;
      }

      uint64_t result = (unint64_t *)X509CertificateParse(v14 - 34, v9);
      if ((_DWORD)result) {
        return result;
      }
      if (v10)
      {
        unint64_t v17 = (void *)*v13;
        *BOOL v14 = 0LL;
        v14[1] = v17;
        *unint64_t v17 = v16;
        unint64_t *v13 = (unint64_t)v14;
      }

      else
      {
        uint64_t v18 = *a4;
        *(void *)(a2 + 272) = *a4;
        if (v18) {
          unint64_t v19 = (unint64_t *)(v18 + 280);
        }
        else {
          unint64_t v19 = v13;
        }
        *unint64_t v19 = v21;
        *a4 = v16;
        *(void *)(a2 + 280) = a4;
      }

      uint64_t v5 = v10 + 1;
      if (*v9 < v9[1])
      {
        v14 += 38;
        BOOL v6 = v15 == v10++;
        if (!v6) {
          continue;
        }
      }

      goto LABEL_6;
    }

    __break(0x5513u);
  }

  return result;
}

uint64_t X509ChainGetCertificateUsingKeyIdentifier(uint64_t *a1, uint64_t a2)
{
  for (uint64_t i = *a1; i; uint64_t i = *(void *)(i + 272))
  {
  }

  return i;
}

void *X509ChainResetChain(void *result, void *a2)
{
  *uint64_t result = 0LL;
  result[1] = result;
  uint64_t v2 = (void *)*a2;
  if (*a2)
  {
    do
    {
      v2[36] = 0LL;
      _BYTE v2[37] = 0LL;
      uint64_t v2 = (void *)v2[34];
    }

    while (v2);
  }

  return result;
}

uint64_t X509ChainBuildPathPartial(void *a1, uint64_t *a2, void *a3, int a4)
{
  if (!a1) {
    return 327691LL;
  }
  unint64_t v7 = a1;
  *a3 = a1;
  a3[1] = a1 + 36;
  a1[36] = 0LL;
  a1[37] = a3;
  uint64_t v8 = (uint64_t)(a1 + 15);
  uint64_t result = compare_octet_string((uint64_t)(a1 + 15), (uint64_t)(a1 + 13));
  if ((_DWORD)result)
  {
    while (1)
    {
      uint64_t v10 = (uint64_t)(v7 + 21);
      if (!v7[22]
        || (uint64_t CertificateUsingKeyIdentifier = X509ChainGetCertificateUsingKeyIdentifier(a2, (uint64_t)(v7 + 21))) == 0
        || (unint64_t v7 = (void *)CertificateUsingKeyIdentifier,
            compare_octet_string(CertificateUsingKeyIdentifier + 104, v8)))
      {
        unint64_t v7 = (void *)*a2;
        if (!*a2)
        {
LABEL_16:
          if (X509ChainGetAppleRootUsingKeyIdentifier(v10, 1)) {
            return 0LL;
          }
          uint64_t BAARootUsingKeyIdentifier = X509ChainGetBAARootUsingKeyIdentifier(v10);
          if (a4) {
            unsigned int v16 = 0;
          }
          else {
            unsigned int v16 = 524296;
          }
          if (BAARootUsingKeyIdentifier) {
            return 0LL;
          }
          else {
            return v16;
          }
        }

        while (compare_octet_string(v8, (uint64_t)(v7 + 13)))
        {
          unint64_t v7 = (void *)v7[34];
          if (!v7) {
            goto LABEL_16;
          }
        }
      }

      unint64_t v12 = (void *)*a3;
      if (*a3) {
        break;
      }
LABEL_13:
      BOOL v13 = (void *)a3[1];
      v7[36] = 0LL;
      v7[37] = v13;
      void *v13 = v7;
      a3[1] = v7 + 36;
      uint64_t v8 = (uint64_t)(v7 + 15);
      int v14 = compare_octet_string((uint64_t)(v7 + 15), (uint64_t)(v7 + 13));
      uint64_t result = 0LL;
      if (!v14) {
        return result;
      }
    }

    while (v12 != v7)
    {
      unint64_t v12 = (void *)v12[36];
      if (!v12) {
        goto LABEL_13;
      }
    }

    return 524297LL;
  }

  return result;
}

uint64_t X509ChainGetAppleRootUsingKeyIdentifier(uint64_t result, int a2)
{
  uint64_t v2 = &numAppleRoots;
  if (!a2) {
    uint64_t v2 = &numAppleProdRoots;
  }
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = (uint64_t *)&AppleRoots; i < (uint64_t *)&UcrtRootPublicKey && i >= (uint64_t *)&AppleRoots; ++i)
    {
      uint64_t v7 = *i;
      uint64_t result = compare_octet_string(v4, *i + 184);
      if (!(_DWORD)result) {
        return v7;
      }
      if (!--v3) {
        return 0LL;
      }
    }

    __break(0x5519u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t X509ChainGetBAARootUsingKeyIdentifier(uint64_t result)
{
  uint64_t v1 = numBAARoots;
  if (numBAARoots)
  {
    uint64_t v2 = result;
    for (uint64_t i = (uint64_t *)&BAARoots; i < (uint64_t *)&SEKTestRootPublicKey && i >= (uint64_t *)&BAARoots; ++i)
    {
      uint64_t v5 = *i;
      uint64_t result = compare_octet_string(v2, *i + 184);
      if (!(_DWORD)result) {
        return v5;
      }
      if (!--v1) {
        return 0LL;
      }
    }

    __break(0x5519u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t X509ChainBuildPath(void *a1, uint64_t *a2, void *a3)
{
  return X509ChainBuildPathPartial(a1, a2, a3, 0);
}

uint64_t X509ChainCheckPathWithOptions(char a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  BOOL v6 = a2;
  v35[4] = *MEMORY[0x1895F89C0];
  uint64_t v8 = *a2;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 48);
    if (v9)
    {
      if (*(void *)(v9 + 8))
      {
        uint64_t v8 = *v6;
      }
    }
  }

  if (v8)
  {
    uint64_t v31 = v6;
    unint64_t v32 = a4;
    unint64_t v11 = 0LL;
    int v12 = 0;
    char v33 = 0;
    uint64_t v13 = -1LL;
    while (1)
    {
      unint64_t v14 = *(void *)(v8 + 288);
      unint64_t v15 = v14 + 304;
      if (v14)
      {
LABEL_10:
        char v16 = 0;
        goto LABEL_11;
      }

      if (!compare_octet_string(v8 + 120, v8 + 104))
      {
        char v16 = 0;
        unint64_t v15 = v8 + 304;
        unint64_t v14 = v8;
        goto LABEL_11;
      }

      if (!a3) {
        return v12 | 0x9000Du;
      }
      if (*(_BYTE *)(a3 + 16))
      {
        uint64_t AppleRootUsingKeyIdentifier = X509ChainGetAppleRootUsingKeyIdentifier(v8 + 168, *(unsigned __int8 *)(a3 + 17));
      }

      else
      {
        if (!*(void *)(a3 + 24)) {
          goto LABEL_58;
        }
        uint64_t AppleRootUsingKeyIdentifier = X509ChainGetBAARootUsingKeyIdentifier(v8 + 168);
      }

      unint64_t v14 = AppleRootUsingKeyIdentifier;
      v33 |= AppleRootUsingKeyIdentifier != 0;
      unint64_t v15 = AppleRootUsingKeyIdentifier + 304;
      if (AppleRootUsingKeyIdentifier) {
        goto LABEL_10;
      }
LABEL_58:
      if (!*(_BYTE *)(a3 + 19)) {
        return v12 | 0x9000Du;
      }
      unint64_t v14 = 0LL;
      char v16 = 1;
LABEL_11:
      if (v11 && *(void *)(v8 + 32) >= 2uLL)
      {
        if (!*(_BYTE *)(v8 + 265))
        {
          int v30 = 589825;
          return v12 | v30;
        }

        if ((*(_BYTE *)(v8 + 264) & 4) == 0)
        {
          int v30 = 589826;
          return v12 | v30;
        }
      }

      unint64_t v17 = *(void *)(v8 + 200);
      if (v17) {
        BOOL v18 = v17 >= v11;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        int v30 = 589827;
        return v12 | v30;
      }

      if (*(_BYTE *)(v8 + 266))
      {
        int v30 = 589831;
        return v12 | v30;
      }

      if (compare_octet_string(v8 + 40, v8 + 152))
      {
        int v30 = 589828;
        return v12 | v30;
      }

      if ((v16 & 1) == 0 && *(void *)(v8 + 168) && *(void *)(v8 + 176))
      {
        if (v14 >= v15) {
          goto LABEL_100;
        }
      }

      if (a3 && v11 && (*(void *)(v8 + 240) & *(void *)(a3 + 8)) == 0LL) {
        X509PolicySetFlagsForCommonNames(v8);
      }
      if (v14 == v8 && !*(void *)(v8 + 240))
      {
        X509PolicySetFlagsForRoots(a3, v8);
        if (a3)
        {
LABEL_34:
          if (*(_BYTE *)(a3 + 18) && !X509CertificateIsValid(v8)) {
            return v12 | 0x90009u;
          }
          uint64_t v19 = *(void *)(a3 + 8);
          if (!v11 && (*(void *)(v8 + 240) & v19) == 0)
          {
            X509PolicySetFlagsForMFI(v8);
            uint64_t v19 = *(void *)(a3 + 8);
          }

          v13 &= *(void *)(v8 + 240);
          if (v19 && (v19 & v13) == 0)
          {
            int v30 = 589829;
            return v12 | v30;
          }

          goto LABEL_49;
        }
      }

      else if (a3)
      {
        goto LABEL_34;
      }

      v13 &= *(void *)(v8 + 240);
LABEL_49:
      a1 |= v14 == v8;
      if ((v16 & 1) == 0)
      {
        if (v14 >= v15) {
          goto LABEL_100;
        }
        uint64_t result = X509CertificateCheckSignature(a1, v14, v8 + 16, v8 + 40, (__int128 *)(v8 + 56));
        if ((_DWORD)result) {
          return result;
        }
      }

      unint64_t v21 = v11 + 1;
      if (v11 == -1LL) {
        goto LABEL_99;
      }
      uint64_t v8 = *(void *)(v8 + 288);
      v12 += 256;
      ++v11;
      if (!v8)
      {
        BOOL v6 = v31;
        a4 = v32;
        LOBYTE(v8) = v33;
        if (a3) {
          goto LABEL_61;
        }
        goto LABEL_87;
      }
    }
  }

  unint64_t v21 = 0LL;
  uint64_t v13 = -1LL;
  if (!a3) {
    goto LABEL_87;
  }
LABEL_61:
  if (*(void *)a3)
  {
    unint64_t v22 = v21;
    if ((v8 & 1) != 0)
    {
      unint64_t v22 = v21 + 1;
      if (v21 == -1LL)
      {
LABEL_99:
        __break(0x5500u);
LABEL_100:
        __break(0x5519u);
      }
    }

    if (*(void *)a3 != v22) {
      return ((_DWORD)v22 << 8) | 0x90006u;
    }
  }

  uint64_t v23 = *(void *)(a3 + 24);
  if (!v23 || !*(void *)(v23 + 8))
  {
    if (!*(_BYTE *)(a3 + 16)) {
      goto LABEL_87;
    }
    int v24 = (_DWORD)v21 << 8;
    uint64_t v25 = **(void **)(v6[1] + 8);
LABEL_75:
    uint64_t v27 = 184LL;
    if ((v8 & 1) != 0) {
      uint64_t v27 = 168LL;
    }
    uint64_t v28 = X509ChainGetAppleRootUsingKeyIdentifier(v25 + v27, *(unsigned __int8 *)(a3 + 17));
    if (!v28) {
      return v24 | 0x9000Bu;
    }
    uint64_t v29 = v28;
    if ((v8 & 1) == 0 && !compare_octet_string(v25 + 88, v28 + 88)
      || !X509CertificateCheckSignature(29, v29, v25 + 16, v25 + 40, (__int128 *)(v25 + 56)))
    {
      goto LABEL_87;
    }

    int v26 = 589836;
    return v24 | v26;
  }

  int v24 = (_DWORD)v21 << 8;
  uint64_t v25 = **(void **)(v6[1] + 8);
  if (*(_BYTE *)(a3 + 16)) {
    goto LABEL_75;
  }
  memset(v35, 170, 32);
  v34[0] = 0xAAAAAAAAAAAAAAAALL;
  v34[1] = 0xAAAAAAAAAAAAAAAALL;
  if (X509CertificateParseSPKI((unint64_t *)(v25 + 88), &v35[2], v34, v35))
  {
LABEL_72:
    int v26 = 589832;
    return v24 | v26;
  }

  if (compare_octet_string((uint64_t)&v35[2], *(void *)(a3 + 32))
    || compare_octet_string((uint64_t)v35, *(void *)(a3 + 24)))
  {
    if (X509CertificateCheckSignatureWithPublicKey( *(uint64_t **)(a3 + 24),  *(void *)(a3 + 32),  *(__int128 **)(a3 + 40),  v25 + 16,  (__int128 *)(v25 + 40),  (__int128 *)(v25 + 56))) {
      goto LABEL_72;
    }
  }

  else if (!compare_octet_string(*(void *)(a3 + 32), (uint64_t)&ecPublicKey))
  {
    compare_octet_string((uint64_t)v34, *(void *)(a3 + 40));
  }

LABEL_87:
  uint64_t result = 0LL;
  if (a4) {
    *a4 = v13;
  }
  return result;
}

uint64_t X509ChainCheckPath(char a1, uint64_t *a2, uint64_t a3)
{
  return X509ChainCheckPathWithOptions(a1, a2, a3, 0LL);
}

uint64_t sub_183D04DA0()
{
  return MEMORY[0x18961B6E8]();
}

uint64_t sub_183D04DAC()
{
  return MEMORY[0x18961B708]();
}

uint64_t sub_183D04DB8()
{
  return MEMORY[0x189617A00]();
}

uint64_t sub_183D04DC4()
{
  return MEMORY[0x189617B30]();
}

uint64_t sub_183D04DD0()
{
  return MEMORY[0x189617B38]();
}

uint64_t sub_183D04DDC()
{
  return MEMORY[0x189617B40]();
}

uint64_t sub_183D04DE8()
{
  return MEMORY[0x189617B48]();
}

uint64_t sub_183D04DF4()
{
  return MEMORY[0x189617B50]();
}

uint64_t sub_183D04E00()
{
  return MEMORY[0x189617C20]();
}

uint64_t sub_183D04E0C()
{
  return MEMORY[0x189617C90]();
}

uint64_t sub_183D04E18()
{
  return MEMORY[0x189617E70]();
}

uint64_t sub_183D04E24()
{
  return MEMORY[0x189617EB0]();
}

uint64_t sub_183D04E30()
{
  return MEMORY[0x1896180E0]();
}

uint64_t sub_183D04E3C()
{
  return MEMORY[0x1896180F8]();
}

uint64_t sub_183D04E48()
{
  return MEMORY[0x189618390]();
}

uint64_t sub_183D04E54()
{
  return MEMORY[0x1896187F8]();
}

uint64_t sub_183D04E60()
{
  return MEMORY[0x189618810]();
}

uint64_t sub_183D04E6C()
{
  return MEMORY[0x189618818]();
}

uint64_t sub_183D04E78()
{
  return MEMORY[0x189618820]();
}

uint64_t sub_183D04E84()
{
  return MEMORY[0x1896188B8]();
}

uint64_t sub_183D04E90()
{
  return MEMORY[0x1896188F8]();
}

uint64_t sub_183D04E9C()
{
  return MEMORY[0x189618940]();
}

uint64_t sub_183D04EA8()
{
  return MEMORY[0x189618A18]();
}

uint64_t sub_183D04EB4()
{
  return MEMORY[0x18961B920]();
}

uint64_t sub_183D04EC0()
{
  return MEMORY[0x18961B938]();
}

uint64_t sub_183D04ECC()
{
  return MEMORY[0x18961BA30]();
}

uint64_t sub_183D04ED8()
{
  return MEMORY[0x18961BA48]();
}

uint64_t sub_183D04EE4()
{
  return MEMORY[0x189618D80]();
}

uint64_t sub_183D04EF0()
{
  return MEMORY[0x189618D88]();
}

uint64_t sub_183D04EFC()
{
  return MEMORY[0x189618E20]();
}

uint64_t sub_183D04F08()
{
  return MEMORY[0x189618E28]();
}

uint64_t sub_183D04F14()
{
  return MEMORY[0x189618E68]();
}

uint64_t sub_183D04F20()
{
  return MEMORY[0x189618EA0]();
}

uint64_t sub_183D04F2C()
{
  return MEMORY[0x189618EA8]();
}

uint64_t sub_183D04F38()
{
  return MEMORY[0x189618EB8]();
}

uint64_t sub_183D04F44()
{
  return MEMORY[0x189618ED8]();
}

uint64_t sub_183D04F50()
{
  return MEMORY[0x189618F48]();
}

uint64_t sub_183D04F5C()
{
  return MEMORY[0x189619010]();
}

uint64_t sub_183D04F68()
{
  return MEMORY[0x189619018]();
}

uint64_t sub_183D04F74()
{
  return MEMORY[0x1896191E8]();
}

uint64_t sub_183D04F80()
{
  return MEMORY[0x1896191F0]();
}

uint64_t sub_183D04F8C()
{
  return MEMORY[0x189619260]();
}

uint64_t sub_183D04F98()
{
  return MEMORY[0x189619660]();
}

uint64_t sub_183D04FA4()
{
  return MEMORY[0x189619668]();
}

uint64_t sub_183D04FB0()
{
  return MEMORY[0x189619760]();
}

uint64_t sub_183D04FBC()
{
  return MEMORY[0x189619CC8]();
}

uint64_t sub_183D04FC8()
{
  return MEMORY[0x18961A010]();
}

uint64_t sub_183D04FD4()
{
  return MEMORY[0x18961A120]();
}

uint64_t sub_183D04FE0()
{
  return MEMORY[0x18961A2E8]();
}

uint64_t sub_183D04FEC()
{
  return MEMORY[0x18961A310]();
}

uint64_t sub_183D04FF8()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t sub_183D05004()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t sub_183D05010()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t sub_183D0501C()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t sub_183D05028()
{
  return MEMORY[0x18961A680]();
}

uint64_t sub_183D05034()
{
  return MEMORY[0x18961A690]();
}

uint64_t sub_183D05040()
{
  return MEMORY[0x18961A698]();
}

uint64_t sub_183D0504C()
{
  return MEMORY[0x18961A6B0]();
}

uint64_t sub_183D05058()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t APFSVolumeGetUnlockRecord()
{
  return MEMORY[0x18960CC78]();
}

uint64_t APFSVolumeGetWVEK()
{
  return MEMORY[0x18960CC88]();
}

uint64_t APFSVolumeListUUIDsOfUnlockRecords()
{
  return MEMORY[0x18960CC90]();
}

uint64_t APFSVolumePayloadGet()
{
  return MEMORY[0x18960CC98]();
}

uint64_t APFSVolumePayloadSet()
{
  return MEMORY[0x18960CCA0]();
}

uint64_t APFSVolumeRemoveUnlockRecord()
{
  return MEMORY[0x18960CCA8]();
}

uint64_t APFSVolumeSetUnlockRecord()
{
  return MEMORY[0x18960CCC0]();
}

uint64_t CCRandomCopyBytes()
{
  return MEMORY[0x1895F8220]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy( CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x189602A80](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x189602C08](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFErrorRef CFErrorCreate( CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x189602C60](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x189603878](alloc, uuidStr);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x189603880](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFUUIDRef CFUUIDCreateWithBytes( CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return (CFUUIDRef)MEMORY[0x189603890](alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1896038B0](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x189607C80](*(void *)&mainPort, *(void *)&options, bsdName);
}

kern_return_t IOConnectCallMethod( mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x189607CB8]( *(void *)&connection,  *(void *)&selector,  input,  *(void *)&inputCnt,  inputStruct,  inputStructCnt,  output,  outputCnt);
}

kern_return_t IOConnectSetNotificationPort( io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return MEMORY[0x189607CF8](*(void *)&connect, *(void *)&type, *(void *)&port, reference);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x189608330](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return MEMORY[0x189608360](*(void *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x189608398](*(void *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties( io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x189608458](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608470](*(void *)&entry, key, allocator, *(void *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x189608488](*(void *)&mainPort, path);
}

kern_return_t IOServiceAddInterestNotification( IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x189608540](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x189608550](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x189608560](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608580](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x189608598](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x189613730]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8720](aBlock);
}

void _Block_release(const void *aBlock)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1895F9328](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

uint64_t cc_clear()
{
  return MEMORY[0x1895F9748]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1895F9750]();
}

uint64_t ccaes_cbc_decrypt_mode()
{
  return MEMORY[0x1895F9758]();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return MEMORY[0x1895F9760]();
}

uint64_t cccbc_clear_iv()
{
  return MEMORY[0x1895F97D0]();
}

uint64_t cccbc_init()
{
  return MEMORY[0x1895F97D8]();
}

uint64_t cccbc_one_shot()
{
  return MEMORY[0x1895F97E0]();
}

uint64_t cccbc_update()
{
  return MEMORY[0x1895F97F0]();
}

uint64_t cccurve25519()
{
  return MEMORY[0x1895F9868]();
}

uint64_t cccurve25519_make_pub()
{
  return MEMORY[0x1895F9880]();
}

uint64_t ccder_blob_decode_bitstring()
{
  return MEMORY[0x1895F98B8]();
}

uint64_t ccder_blob_decode_len()
{
  return MEMORY[0x1895F98C0]();
}

uint64_t ccder_blob_decode_oid()
{
  return MEMORY[0x1895F98C8]();
}

uint64_t ccder_blob_decode_range()
{
  return MEMORY[0x1895F98D0]();
}

uint64_t ccder_blob_decode_sequence_tl()
{
  return MEMORY[0x1895F98D8]();
}

uint64_t ccder_blob_decode_tag()
{
  return MEMORY[0x1895F98E0]();
}

uint64_t ccder_blob_decode_tl()
{
  return MEMORY[0x1895F98E8]();
}

uint64_t ccder_blob_decode_uint64()
{
  return MEMORY[0x1895F98F0]();
}

uint64_t ccder_blob_encode_body()
{
  return MEMORY[0x1895F98F8]();
}

uint64_t ccder_blob_encode_body_tl()
{
  return MEMORY[0x1895F9900]();
}

uint64_t ccder_blob_encode_implicit_raw_octet_string()
{
  return MEMORY[0x1895F9908]();
}

uint64_t ccder_blob_encode_implicit_uint64()
{
  return MEMORY[0x1895F9910]();
}

uint64_t ccder_blob_encode_tl()
{
  return MEMORY[0x1895F9918]();
}

uint64_t ccder_decode_rsa_pub_n()
{
  return MEMORY[0x1895F9950]();
}

uint64_t ccder_decode_sequence_tl()
{
  return MEMORY[0x1895F9960]();
}

uint64_t ccder_decode_tl()
{
  return MEMORY[0x1895F9970]();
}

uint64_t ccder_encode_constructed_tl()
{
  return MEMORY[0x1895F9990]();
}

uint64_t ccder_encode_raw_octet_string()
{
  return MEMORY[0x1895F99A8]();
}

uint64_t ccder_encode_uint64()
{
  return MEMORY[0x1895F99C8]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x1895F99D0]();
}

uint64_t ccder_sizeof_implicit_uint64()
{
  return MEMORY[0x1895F99E0]();
}

uint64_t ccder_sizeof_len()
{
  return MEMORY[0x1895F99F0]();
}

uint64_t ccder_sizeof_oid()
{
  return MEMORY[0x1895F99F8]();
}

uint64_t ccder_sizeof_raw_octet_string()
{
  return MEMORY[0x1895F9A00]();
}

uint64_t ccder_sizeof_tag()
{
  return MEMORY[0x1895F9A08]();
}

uint64_t ccder_sizeof_uint64()
{
  return MEMORY[0x1895F9A10]();
}

uint64_t ccdigest()
{
  return MEMORY[0x1895F9A90]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x1895F9A98]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x1895F9AA0]();
}

uint64_t ccec_compact_import_pub()
{
  return MEMORY[0x1895F9AD8]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1895F9AE0]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1895F9AE8]();
}

uint64_t ccec_compressed_x962_import_pub()
{
  return MEMORY[0x1895F9AF0]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1895F9B10]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1895F9B18]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1895F9B20]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x1895F9B68]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x1895F9BA8]();
}

uint64_t ccec_keysize_is_supported()
{
  return MEMORY[0x1895F9BB0]();
}

uint64_t ccec_verify()
{
  return MEMORY[0x1895F9C40]();
}

uint64_t ccec_verify_composite()
{
  return MEMORY[0x1895F9C48]();
}

uint64_t ccec_x963_import_pub_size()
{
  return MEMORY[0x1895F9C70]();
}

uint64_t ccecb_one_shot()
{
  return MEMORY[0x1895F9C88]();
}

uint64_t cced25519_verify()
{
  return MEMORY[0x1895F9D10]();
}

uint64_t cchkdf()
{
  return MEMORY[0x1895F9F08]();
}

uint64_t cchmac()
{
  return MEMORY[0x1895F9F20]();
}

uint64_t ccn_read_uint()
{
  return MEMORY[0x1895FA098]();
}

uint64_t ccn_write_uint_padded()
{
  return MEMORY[0x1895FA0D0]();
}

uint64_t ccoid_equal()
{
  return MEMORY[0x1895FA0F0]();
}

uint64_t ccpbkdf2_hmac()
{
  return MEMORY[0x1895FA0F8]();
}

uint64_t ccrng()
{
  return MEMORY[0x1895FA118]();
}

uint64_t ccrsa_import_pub()
{
  return MEMORY[0x1895FA1C8]();
}

uint64_t ccrsa_verify_pkcs1v15_allowshortsigs()
{
  return MEMORY[0x1895FA218]();
}

uint64_t ccsha1_di()
{
  return MEMORY[0x1895FA268]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t ccsha384_di()
{
  return MEMORY[0x1895FA280]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x1895FA298]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1895FA4B8]();
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1895FA538](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1895FA540](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

double difftime(time_t a1, time_t a2)
{
  return result;
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2( const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD90](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

void free(void *a1)
{
}

int fts_close(FTS *a1)
{
  return MEMORY[0x1895FB490](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x1895FB498](a1, *(void *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x1895FB4A0](a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return MEMORY[0x1895FB4A8](a1, a2, *(void *)&a3);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1895FB4F8](a1, a2, a3, a4, *(void *)&a5);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

int getgrnam_r(const char *a1, group *a2, char *a3, size_t a4, group **a5)
{
  return MEMORY[0x1895FB570](a1, a2, a3, a4, a5);
}

int getpwnam_r(const char *a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return MEMORY[0x1895FB668](a1, a2, a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

kern_return_t host_get_multiuser_config_flags(host_t host, uint32_t *multiuser_flags)
{
  return MEMORY[0x1895FB778](*(void *)&host, multiuser_flags);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1895FBAB0]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1895FBAD0]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1895FBBF8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1895FBE68](__s, __smax, *(void *)&__c, __n);
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x1895FBF28](path, omode);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1895FC250](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1895FC890](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1895FCB88](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1895FCB98](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1895FCBA0](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1895FCC80](a1, a2);
}

int rename(const char *__old, const char *__new)
{
  return MEMORY[0x1895FCD50](__old, __new);
}

int setattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1895FCE50](a1, a2, a3, a4, *(void *)&a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1895FD018](a1, a2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1895FD0D0](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1895FD108](__big, __little, __len);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1895FD118](a1, a2, a3);
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x18961B0C0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x18961B188]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x18961B3A0]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x18961B450]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x18961B460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

time_t timegm(tm *const a1)
{
  return MEMORY[0x1895FD408](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1895FD4B8](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD750](*(void *)&__fd, __buf, __nbyte);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1895FD968](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1895FD9F0](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1895FDA98](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FDB98](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDBE8](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDC20](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1895FDE70](object);
}